
LSN.elf:     file format elf32-littlenios2
LSN.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001cb5c memsz 0x0001cb5c flags r-x
    LOAD off    0x0001db7c vaddr 0x0081cb7c paddr 0x0081e744 align 2**12
         filesz 0x00001bc8 memsz 0x00001bc8 flags rw-
    LOAD off    0x0002030c vaddr 0x0082030c paddr 0x0082030c align 2**12
         filesz 0x00000000 memsz 0x000049cc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001bc54  008001b8  008001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000d70  0081be0c  0081be0c  0001ce0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bc8  0081cb7c  0081e744  0001db7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000049cc  0082030c  0082030c  0002030c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001f744  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001218  00000000  00000000  0001f770  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00003867  00000000  00000000  00020988  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000385a9  00000000  00000000  000241ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b324  00000000  00000000  0005c798  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00021311  00000000  00000000  00067abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003530  00000000  00000000  00088dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000036b9  00000000  00000000  0008c300  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000101cb  00000000  00000000  0008f9b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0009fb84  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c78  00000000  00000000  0009fbe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000a69dc  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000a69df  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000a69eb  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000a69ec  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000a69ed  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000a69f8  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000a6a03  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000a6a0e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002b  00000000  00000000  000a6a19  2**0
                  CONTENTS, READONLY
 26 .jdi          000057f2  00000000  00000000  000a6a44  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00096040  00000000  00000000  000ac236  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b8 l    d  .text	00000000 .text
0081be0c l    d  .rodata	00000000 .rodata
0081cb7c l    d  .rwdata	00000000 .rwdata
0082030c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00800200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 audio.c
00800c74 l     F .text	00000170 playSoundISR
00820318 l     O .bss	00000004 audioBuffer
0082031c l     O .bss	00000004 audioVolumeBuffer
00000000 l    df *ABS*	00000000 bmp.c
00000000 l    df *ABS*	00000000 bullet.c
00000000 l    df *ABS*	00000000 collision.c
00000000 l    df *ABS*	00000000 displacement.c
00820360 l     O .bss	00000008 right
00820368 l     O .bss	00000008 left
00820370 l     O .bss	00000008 up
00820378 l     O .bss	00000008 down
00000000 l    df *ABS*	00000000 gameEnd.c
00000000 l    df *ABS*	00000000 input.c
00820380 l     O .bss	00000002 edgeDetect3.3746
00820382 l     O .bss	00000002 edgeDetect2.3745
00820384 l     O .bss	00000002 edgeDetect1.3744
00820386 l     O .bss	00000002 edgeDetect0.3743
00820388 l     O .bss	00000001 keyInput.3742
0082038a l     O .bss	00000002 scoresShown.3824
0081e6f8 l     O .rwdata	00000001 prevSwInput.3823
0082038c l     O .bss	00000002 edgeDetect.3822
0082038e l     O .bss	00000001 SWInput.3821
00820390 l     O .bss	00000002 edgeDetect.3857
00820392 l     O .bss	00000001 atariFire.3856
00820393 l     O .bss	00000001 atariDown.3855
00820394 l     O .bss	00000001 atariUp.3854
00820395 l     O .bss	00000001 atariButtons.3853
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 player.c
00000000 l    df *ABS*	00000000 score.c
00820398 l     O .bss	00000001 atariFire.3428
00820399 l     O .bss	00000001 atariDown.3427
0082039a l     O .bss	00000001 atariUp.3426
0082039b l     O .bss	00000001 atariButtons.3425
00000000 l    df *ABS*	00000000 sd_card.c
00000000 l    df *ABS*	00000000 shark.c
00000000 l    df *ABS*	00000000 splash.c
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
0081c714 l     O .rodata	00000010 bp
0081c724 l     O .rodata	00000010 dp_l
0081c734 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
0081c744 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00807d80 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00808d50 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0081cb7c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080a168 l     F .text	00000058 __sprint_r
0081c8ee l     O .rodata	00000010 blanks.3452
0081c8de l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0080c1cc l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080dbc8 l     F .text	00000058 std
0080dcd4 l     F .text	00000008 __fp_lock
0080dcdc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0081e718 l     O .rwdata	00000004 charset
0081c920 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0081ca68 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00811a14 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00811a74 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00811b74 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00812070 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00812150 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
008122ac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
008124d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081e738 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00812948 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0081d538 l     O .rwdata	00001060 jtag_uart_0
0081e598 l     O .rwdata	00000030 audio_and_video_config_0
0081e5c8 l     O .rwdata	00000030 audio_0
0081e5f8 l     O .rwdata	0000002c character_lcd_0
0081e624 l     O .rwdata	00000048 char_drawer
0081e66c l     O .rwdata	00000054 pixel_buffer_dma
0081e6c0 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00812d50 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00812f88 l     F .text	0000022c altera_avalon_jtag_uart_irq
008131b4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00813830 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 altera_up_sd_card_avalon_interface.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0081b120 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0081b30c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0081b448 l     F .text	000000dc alt_file_locked
0081b6ac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0081bb88 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0081bd3c l     F .text	00000040 alt_sim_halt
00800f1c g     F .text	000001e8 changeBufferVolume
008143f4 g     F .text	00000038 alt_up_av_config_reset
00820404 g     O .bss	00000004 aux_status_register
008203a0 g     O .bss	00000004 sharkList
0080f2b8 g     F .text	00000094 _mprec_log10
00814898 g     F .text	00000064 alt_up_av_config_read_D5M_cfg_register
008004c4 g     F .text	000000cc loadPlayerDeath
0080f3a4 g     F .text	00000088 __any_on
00810a10 g     F .text	00000070 _isatty_r
0081ca40 g     O .rodata	00000028 __mprec_tinytens
00814464 g     F .text	00000030 alt_up_av_config_disable_interrupt
0081230c g     F .text	0000006c alt_main
00815ec8 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00809ee0 g     F .text	000000a0 _puts_r
00824a48 g     O .bss	00000100 alt_irq
00807690 g     F .text	00000018 fabs
00810a80 g     F .text	00000078 _lseek_r
0081e744 g       *ABS*	00000000 __flash_rwdata_start
00814aa4 g     F .text	00000034 alt_up_character_lcd_send_cmd
00805790 g     F .text	00000048 setHardwareTimerPeriod
008088a0 g     F .text	00000088 __eqdf2
00801818 g     F .text	00000098 initBullets
00816b78 g     F .text	000001b0 Check_for_Master_Boot_Record
0080e8e4 g     F .text	00000074 _gettimeofday_r
00813d0c g     F .text	00000070 alt_up_audio_read_fifo_avail
00814534 g     F .text	000000ac alt_up_av_config_write_audio_cfg_register
00824cd8 g       *ABS*	00000000 __alt_heap_start
008044bc g     F .text	00000024 getCurrentPlayerScore
008031b8 g     F .text	00000070 handleAtariInput
0081e6fc g     O .rwdata	00000004 scoreFileName
0081aa30 g     F .text	000001cc alt_up_sd_card_fclose
00809e68 g     F .text	00000044 printf
00804530 g     F .text	00000238 drawScore
00813d7c g     F .text	00000070 alt_up_audio_record_r
008104dc g     F .text	00000068 __sseek
0080dc30 g     F .text	000000a4 __sinit
008150ec g     F .text	00000114 alt_up_char_buffer_string
0081e6ec g     O .rwdata	00000004 CONFIG_NAME
0080e97c g     F .text	00000084 _setlocale_r
0080dd30 g     F .text	00000068 __sfmoreglue
00812398 g     F .text	00000020 __malloc_unlock
008203ac g     O .bss	00000004 sharkArrayCursor
00807b20 g     F .text	00000174 __divsf3
00820428 g     O .bss	00000004 current_sector_modified
0081501c g     F .text	000000d0 alt_up_char_buffer_draw
00813c84 g     F .text	00000088 alt_up_audio_reset_audio_core
0081acf8 g     F .text	00000090 Read_Sector_Data_Attempt_CRC
008203f8 g     O .bss	00000004 altera_avalon_timer_ts_freq
00800bcc g     F .text	00000044 playSharkDeath
0080ed34 g     F .text	000000e0 memmove
00822be0 g     O .bss	00000400 verticalDisplacementFunctionDown
008037c4 g     F .text	00000028 killPlayer
0080dd20 g     F .text	00000010 _cleanup
0080f42c g     F .text	000000bc _Balloc
00804f34 g     F .text	00000110 moveShark
008195f4 g     F .text	000000c8 alt_up_sd_card_is_Present
00816890 g     F .text	00000050 Save_Modified_Sector
0080160c g     F .text	00000038 freeSplash
008037ec g     F .text	00000064 initScoreBoard
0081529c g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00803674 g     F .text	0000008c moveDownPlayer
008089b0 g     F .text	00000088 __gtdf2
008096f0 g     F .text	00000010 __errno
00814a28 g     F .text	0000007c get_DDRAM_addr
00804a50 g     F .text	00000040 openFile
00800858 g     F .text	000001a0 audioTest
0081525c g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00805b48 g     F .text	00000060 drawBox
00800000 g     F .entry	0000001c __reset
00820420 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
00801b70 g     F .text	00000084 drawAllBullets
00800020 g       *ABS*	00000000 __flash_exceptions_start
0081099c g     F .text	00000074 _fstat_r
008203bc g     O .bss	00000004 errno
00808d18 g     F .text	00000038 __make_dp
008054d8 g     F .text	00000028 clearSplashScreen
00813c48 g     F .text	0000003c alt_up_audio_write_interrupt_pending
0082033c g     O .bss	00000004 pixel_buffer_addr1
00820340 g     O .bss	00000004 char_buffer
008203e4 g     O .bss	00000004 alt_argv
00801f60 g     F .text	000000a0 moveBulletLeft
008266ec g       *ABS*	00000000 _gp
008127f8 g     F .text	00000030 usleep
00819bb4 g     F .text	000003a8 alt_up_sd_card_fopen
00820670 g     O .bss	00000010 player
00819730 g     F .text	000000d4 alt_up_sd_card_find_first
00820414 g     O .bss	00000004 command_argument_register
0081543c g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
008040e4 g     F .text	00000374 obtainUserInitials
00820458 g     O .bss	000001e8 tone
008038f8 g     F .text	00000354 readHighScoreBoardFromSD
0081d3b8 g     O .rwdata	00000180 alt_fd_list
008203a8 g     O .bss	00000004 sharkCount
00818e24 g     F .text	0000012c find_first_empty_record_in_root_directory
0081b248 g     F .text	00000094 alt_find_dev
0080ec94 g     F .text	000000a0 memcpy
00814c3c g     F .text	0000004c alt_up_character_lcd_write_fd
00815200 g     F .text	0000005c alt_up_char_buffer_clear
0080dd14 g     F .text	0000000c _cleanup_r
00808b48 g     F .text	000000f8 __floatsidf
0081b3d0 g     F .text	00000078 alt_io_redirect
00808a38 g     F .text	00000088 __ltdf2
00802b54 g     F .text	00000040 makeUp
0081be0c g       *ABS*	00000000 __DTOR_END__
00809f80 g     F .text	00000014 puts
00802664 g     F .text	000000a4 doPlayerBulletCollision
008022a4 g     F .text	000000a0 findSharkIfHit
00818a34 g     F .text	000001a4 find_first_empty_cluster
0080f208 g     F .text	000000b0 __ratio
00819530 g     F .text	000000c4 alt_up_sd_card_open_dev
008141e0 g     F .text	00000060 alt_up_audio_read_fifo_head
008154ec g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
008133cc g     F .text	00000224 altera_avalon_jtag_uart_read
008015c0 g     F .text	0000004c freeBmps
00809714 g     F .text	00000014 malloc
00809eac g     F .text	00000034 _printf_r
00808e8c g     F .text	00000008 __udivsi3
00811fb0 g     F .text	000000c0 isatty
0081c950 g     O .rodata	000000c8 __mprec_tens
00815b78 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
0080e958 g     F .text	00000008 __locale_charset
008203cc g     O .bss	00000008 alt_timezone
0081b904 g     F .text	00000090 alt_icache_flush
008203b0 g     O .bss	00000004 __malloc_top_pad
00814368 g     F .text	0000008c alt_up_av_config_read_data
0081e714 g     O .rwdata	00000004 __mb_cur_max
0080e960 g     F .text	0000000c _localeconv_r
0080fb24 g     F .text	0000003c __i2b
0080e2c8 g     F .text	0000049c __sfvwrite_r
00817d10 g     F .text	000000c0 get_dir_divider_location
00805500 g     F .text	00000290 timer_test
008035a4 g     F .text	00000044 erasePlayer
0080a028 g     F .text	00000070 _sbrk_r
0081635c g     F .text	000000d0 helper_plot_pixel
0080580c g     F .text	00000028 hasHardwareTimerExpired
008179b0 g     F .text	000000d0 filename_to_upper_case
00819f5c g     F .text	00000090 alt_up_sd_card_set_attributes
00816d28 g     F .text	00000284 Read_File_Record_At_Offset
00802c14 g     F .text	00000040 makeDownLeft
00810af8 g     F .text	00000078 _read_r
00820358 g     O .bss	00000004 playerBulletList
0081d384 g     O .rwdata	0000000c __lc_ctype
0081e72c g     O .rwdata	00000004 alt_max_fd
00814240 g     F .text	00000060 alt_up_audio_write_fifo_head
008094f0 g     F .text	00000138 __unpack_d
008185d0 g     F .text	00000464 find_file_in_directory
00810878 g     F .text	00000110 _fclose_r
00820640 g     O .bss	0000000c sharkDeath
0080db94 g     F .text	00000034 fflush
008203b4 g     O .bss	00000004 __malloc_max_sbrked_mem
00804af4 g     F .text	00000094 readWord
00804490 g     F .text	0000002c setCurrentPlayerScore
00811df0 g     F .text	000001c0 alt_irq_register
00803c4c g     F .text	00000498 updateHighScoreBoard
00807d2c g     F .text	00000054 __extendsfdf2
008196bc g     F .text	00000074 alt_up_sd_card_is_FAT16
00808210 g     F .text	00000074 __adddf3
0080f0e8 g     F .text	00000120 __b2d
00815520 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
0081114c g     F .text	000005b0 __umoddi3
008121bc g     F .text	000000f0 lseek
0081e700 g     O .rwdata	00000004 __fdlib_version
0081e708 g     O .rwdata	00000004 _global_impure_ptr
008180bc g     F .text	00000514 get_home_directory_cluster_for_file
0080fea0 g     F .text	000005f4 _realloc_r
00824cd8 g       *ABS*	00000000 __bss_end
00815684 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
008126ec g     F .text	0000010c alt_tick
00800c54 g     F .text	00000020 stopTheme
0080536c g     F .text	0000011c cleanupDeadSharks
00810b70 g     F .text	000005dc __udivdi3
0081ca18 g     O .rodata	00000028 __mprec_bigtens
0080fd80 g     F .text	00000120 __s2b
00820680 g     O .bss	00000e00 bulletArray
00811784 g     F .text	00000194 __floatunsidf
0080f008 g     F .text	00000060 __mcmp
0082042c g     O .bss	00000004 current_sector_index
00813a94 g     F .text	00000040 alt_up_audio_open_dev
00802988 g     F .text	000000bc setupArcDisplacementFunction
008030e4 g     F .text	000000d4 handleSwitchInput
0080dcfc g     F .text	00000018 __fp_lock_all
00804c5c g     F .text	000000b8 getWavFileLength
008003f8 g     F .text	000000cc loadLaser
00813ed0 g     F .text	00000070 alt_up_audio_play_r
00812654 g     F .text	00000098 alt_alarm_stop
00816a94 g     F .text	000000e4 mark_cluster
008203dc g     O .bss	00000004 alt_irq_active
0081e6f0 g     O .rwdata	00000004 AUDIO_NAME
008000ec g     F .exceptions	000000cc alt_irq_handler
0081d390 g     O .rwdata	00000028 alt_dev_null
00818f50 g     F .text	000001b8 convert_filename_to_name_extension
008052a4 g     F .text	000000c8 killShark
0080770c g     F .text	00000210 rint
00809114 g     F .text	000000c8 __unpack_f
00805044 g     F .text	00000050 moveAllSharks
00814f24 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0082035c g     O .bss	00000004 sharkBulletList
0081b028 g     F .text	00000044 alt_dcache_flush_all
0080eed4 g     F .text	00000070 __hi0bits
00820400 g     O .bss	00000004 is_sd_card_formated_as_FAT16
00816298 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
00808c40 g     F .text	000000d8 __fixdfsi
00818bd8 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
0081e744 g       *ABS*	00000000 __ram_rwdata_end
00802e5c g     F .text	00000288 handleKeyInput
0081e724 g     O .rwdata	00000008 alt_dev_list
00812828 g     F .text	00000120 write
00820424 g     O .bss	00000004 device_pointer
00813a6c g     F .text	00000028 alt_timestamp_freq
0081642c g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
008049f0 g     F .text	00000060 openSdCard
0082064c g     O .bss	0000000c laser
0081cb7c g       *ABS*	00000000 __ram_rodata_end
00820314 g     O .bss	00000004 DEBUG
00811aa0 g     F .text	000000d4 fstat
00808ac0 g     F .text	00000088 __ledf2
0080fc60 g     F .text	00000120 __pow5mult
008203c0 g     O .bss	00000004 __nlocale_changed
00808e94 g     F .text	00000008 __umodsi3
00805094 g     F .text	00000050 drawAllSharks
00824cd8 g       *ABS*	00000000 end
00808fb4 g     F .text	00000160 __pack_f
00814f58 g     F .text	00000084 alt_up_char_buffer_init
008057d8 g     F .text	00000034 isHardwareTimerRunning
00812ed0 g     F .text	000000b8 altera_avalon_jtag_uart_init
0081be08 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008138a4 g     F .text	00000088 alt_avalon_timer_sc_init
00808f34 g     F .text	00000080 __clzsi2
00820320 g     O .bss	00000002 loaded
008135f0 g     F .text	00000240 altera_avalon_jtag_uart_write
00804e7c g     F .text	0000005c drawShark
0080dc20 g     F .text	00000004 __sfp_lock_acquire
0080ebb0 g     F .text	000000e4 memchr
00814b4c g     F .text	00000078 alt_up_character_lcd_write
0080a1c0 g     F .text	00001eac ___vfprintf_internal_r
00805b04 g     F .text	00000044 printLine
0080dfb4 g     F .text	00000314 _free_r
00805860 g     F .text	00000094 initVga
00802708 g     F .text	0000008c setupDisplacement
0081bb8c g     F .text	000001b0 __call_exitprocs
008203c4 g     O .bss	00000004 __mlocale_changed
0081e710 g     O .rwdata	00000004 __malloc_sbrk_base
008001b8 g     F .text	0000004c _start
008203ec g     O .bss	00000004 _alt_tick_rate
00809fb0 g     F .text	00000078 rand
008140b4 g     F .text	0000012c alt_up_audio_write_fifo
008017b8 g     F .text	00000060 eraseBmp
0080f7f0 g     F .text	0000014c __lshift
00814304 g     F .text	00000064 alt_up_av_config_write_data
008203f0 g     O .bss	00000004 _alt_nticks
008123b8 g     F .text	00000120 read
008129dc g     F .text	00000374 alt_sys_init
00814db0 g     F .text	000000b0 alt_up_character_lcd_shift_display
00807c94 g     F .text	00000098 __floatsisf
00822fe0 g     O .bss	00000400 verticalDisplacementFunctionUp
00813fb0 g     F .text	00000104 alt_up_audio_read_fifo
008203a4 g     O .bss	00000004 deadSharkList
00804de8 g     F .text	00000094 getFreeShark
0081ba54 g     F .text	00000134 __register_exitproc
008149c4 g     F .text	00000064 alt_up_av_config_write_LTM_cfg_register
00813bbc g     F .text	00000050 alt_up_audio_disable_write_interrupt
008025bc g     F .text	000000a8 doSharkBulletCollision
00820344 g     O .bss	00000004 pixel_buffer_addr2
00820348 g     O .bss	00000004 sharkBmp
00800b2c g     F .text	0000005c playLaser
0080f93c g     F .text	000001e8 __multiply
00814e60 g     F .text	00000090 alt_up_character_lcd_erase_pos
008060c8 g     F .text	00001300 __ieee754_pow
00813264 g     F .text	00000074 altera_avalon_jtag_uart_close
00805c40 g     F .text	00000488 pow
0081cb7c g       *ABS*	00000000 __ram_rwdata_start
0081be0c g       *ABS*	00000000 __ram_rodata_start
00820430 g     O .bss	00000028 __malloc_current_mallinfo
0080f4e8 g     F .text	0000017c __d2b
008203fc g     O .bss	00000004 initialized
008019f0 g     F .text	00000180 moveAllBullets
00812d88 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0081b84c g     F .text	000000b8 alt_get_fd
008244e0 g     O .bss	00000014 search_data
0081aedc g     F .text	0000014c alt_busy_sleep
00809628 g     F .text	000000c8 __fpcmp_parts_d
00820658 g     O .bss	0000000c theme
00821480 g     O .bss	00000b90 relativeSharkHit
00810808 g     F .text	00000070 _close_r
00802df8 g     F .text	00000064 gameEndSequence
00820324 g     O .bss	00000004 audioFileWordLength
00813b70 g     F .text	0000004c alt_up_audio_enable_write_interrupt
00802794 g     F .text	00000104 setupHorizontalDisplacementFunction
00800b88 g     F .text	00000044 playPlayerDeath
0081b9e0 g     F .text	00000074 memcmp
00812e38 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00824cd8 g       *ABS*	00000000 __alt_stack_base
00812e80 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00802480 g     F .text	0000013c isBulletCollidingWithPlayer
0080c090 g     F .text	0000013c __swsetup_r
00803328 g     F .text	00000090 init
0082034c g     O .bss	00000004 splashBmp
00808648 g     F .text	00000258 __divdf3
00804b88 g     F .text	000000d4 readDWord
00813b20 g     F .text	00000050 alt_up_audio_disable_read_interrupt
0080dd98 g     F .text	000000f0 __sfp
008244f4 g     O .bss	00000054 boot_sector_data
0080f34c g     F .text	00000058 __copybits
0081cf7c g     O .rwdata	00000408 __malloc_av_
0080dc2c g     F .text	00000004 __sinit_lock_release
00808284 g     F .text	000003c4 __muldf3
008105c0 g     F .text	00000060 __sread
008050e4 g     F .text	00000050 eraseAllSharks
0081c754 g     O .rodata	00000010 __thenan_sf
0081b72c g     F .text	00000120 alt_find_file
0081b06c g     F .text	000000b4 alt_dev_llist_insert
00812378 g     F .text	00000020 __malloc_lock
00812598 g     F .text	000000bc sbrk
00802344 g     F .text	0000013c isBulletCollidingWithShark
0080d998 g     F .text	000001fc _fflush_r
00810754 g     F .text	000000b4 _calloc_r
008007bc g     F .text	0000009c playAudio
00811bd4 g     F .text	0000021c gettimeofday
0082039c g     O .bss	00000004 gameScores
00805834 g     F .text	0000002c startHardwareTimer
0082030c g       *ABS*	00000000 __bss_start
0080ee14 g     F .text	00000098 memset
00805938 g     F .text	0000003c swapBuffers
008033b8 g     F .text	0000014c main
00813e5c g     F .text	00000074 alt_up_audio_write_fifo_space
008203e8 g     O .bss	00000004 alt_envp
008203b8 g     O .bss	00000004 __malloc_max_total_mem
00815494 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
00814fdc g     F .text	00000040 alt_up_char_buffer_open_dev
00812de0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00809f94 g     F .text	0000001c srand
00802b94 g     F .text	00000040 makeDown
00819fec g     F .text	0000008c alt_up_sd_card_get_attributes
00803228 g     F .text	00000078 delayUntilUPAndButtonPressed
008167c8 g     F .text	000000c8 Write_Sector_Data
0081a40c g     F .text	00000624 alt_up_sd_card_write
00814d00 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
008104d4 g     F .text	00000008 __sclose
008076f4 g     F .text	00000008 matherr
01000000 g       *ABS*	00000000 __alt_heap_limit
00810988 g     F .text	00000014 fclose
00802ad4 g     F .text	00000040 makeRight
0081392c g     F .text	000000a4 alt_timestamp_start
00824b48 g     O .bss	00000190 _atexit0
0080c3e4 g     F .text	000015b4 _dtoa_r
00809728 g     F .text	00000740 _malloc_r
0080a10c g     F .text	0000005c time
0081e730 g     O .rwdata	00000004 alt_errno
008044e0 g     F .text	0000002c setCurrentPlayerLives
0080e82c g     F .text	000000b8 _fwalk
00801bf4 g     F .text	00000084 eraseAllBullets
00801c78 g     F .text	000000a8 drawBullet
00808dcc g     F .text	00000060 __divsi3
0081c764 g     O .rodata	00000014 __thenan_df
00814b0c g     F .text	00000040 alt_up_character_lcd_open_dev
00820328 g     O .bss	00000004 sdDev
0080de88 g     F .text	0000012c _malloc_trim_r
0081be0c g       *ABS*	00000000 __CTOR_END__
00803850 g     F .text	000000a8 defaultHighScoreBoard
008076a8 g     F .text	0000001c finite
0082030c g     O .bss	00000004 audio
00820408 g     O .bss	00000004 status_register
00814ad8 g     F .text	00000034 alt_up_character_lcd_init
00802000 g     F .text	000002a4 initCollision
008009f8 g     F .text	00000134 readWavFile
00810620 g     F .text	000000bc strcmp
00804ed8 g     F .text	0000005c eraseShark
00820410 g     O .bss	00000004 command_register
0081be0c g       *ABS*	00000000 __flash_rodata_start
0081be0c g       *ABS*	00000000 __DTOR_LIST__
00802cd4 g     F .text	00000124 setToRandomDisplacement
00804794 g     F .text	0000025c drawInGameInfo
00807afc g     F .text	00000024 copysign
00808928 g     F .text	00000088 __nedf2
00801d20 g     F .text	000000ec eraseBullet
008142a0 g     F .text	00000064 alt_up_av_config_open_dev
008129a8 g     F .text	00000034 alt_irq_init
00805a3c g     F .text	000000c8 drawLine
00812538 g     F .text	00000060 alt_release_fd
0080065c g     F .text	000000d0 loadTheme
008169dc g     F .text	000000b8 get_cluster_flag
00814ef0 g     F .text	00000034 alt_up_character_lcd_cursor_off
0081c778 g     O .rodata	00000100 __clz_tab
00816fac g     F .text	000002b8 Write_File_Record_At_Offset
008203c8 g     O .bss	00000004 _PathLocale
0082032c g     O .bss	00000004 somethingForIrq
00820350 g     O .bss	00000004 pixel_buffer
0081b994 g     F .text	00000014 atexit
008106dc g     F .text	00000078 _write_r
008144fc g     F .text	00000038 alt_up_av_config_read_ready
00804d64 g     F .text	00000084 initSharks
0080ea00 g     F .text	0000001c setlocale
00817264 g     F .text	00000648 Check_for_DOS_FAT
00819108 g     F .text	000002d4 create_file
00802898 g     F .text	000000f0 setupCircularDisplacementFunction
0081e704 g     O .rwdata	00000004 _impure_ptr
0082040c g     O .bss	00000004 CSD_register_w0
008018b0 g     F .text	00000140 createBullet
008203e0 g     O .bss	00000004 alt_argc
0080791c g     F .text	000001e0 scalbn
008203f4 g     O .bss	00000004 altera_avalon_timer_ts_base
0081b1e4 g     F .text	00000064 _do_dtors
008233e0 g     O .bss	00000400 circularDisplacementFunction
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
0080f068 g     F .text	00000080 __ulp
00810494 g     F .text	00000040 __isinfd
0080dce4 g     F .text	00000018 __fp_unlock_all
00802a44 g     F .text	00000090 setupNoDisplcaementFunction
00804768 g     F .text	0000002c clearScore
0081e71c g     O .rwdata	00000008 alt_fs_list
00822010 g     O .bss	00000bd0 relativePlayerHit
00817a80 g     F .text	00000290 check_file_name_for_FAT16_compliance
00820664 g     O .bss	0000000c playerDeath
00820418 g     O .bss	00000004 buffer_memory
00804a90 g     F .text	00000030 closeFile
00813dec g     F .text	00000070 alt_up_audio_record_l
008237e0 g     O .bss	00000400 doNotMove
00805974 g     F .text	00000044 drawPixel
008203d4 g     O .bss	00000008 alt_resettime
008076fc g     F .text	00000010 nan
00803700 g     F .text	0000005c keepPlayerStationary
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080e96c g     F .text	00000010 localeconv
008139d0 g     F .text	0000009c alt_timestamp
008035e8 g     F .text	0000008c moveUpPlayer
008073c8 g     F .text	000002c8 __ieee754_sqrt
0081442c g     F .text	00000038 alt_up_av_config_enable_interrupt
00801548 g     F .text	00000078 parseBmps
00801644 g     F .text	00000174 drawBmp
0082041c g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
00814494 g     F .text	00000068 alt_up_av_config_read_acknowledge
00814834 g     F .text	00000064 alt_up_av_config_write_DC2_cfg_register
0081e744 g       *ABS*	00000000 _edata
0081e6f4 g     O .rwdata	00000004 toneLength
00824cd8 g       *ABS*	00000000 _end
00805ba8 g     F .text	00000098 convert24BitRgbTo16
00824548 g     O .bss	00000500 active_files
008001b8 g       *ABS*	00000000 __ram_exceptions_end
0080450c g     F .text	00000024 getCurrentPlayerLives
008193dc g     F .text	00000154 copy_file_record_name_to_string
008132d8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080072c g     F .text	00000090 playAudioMono
008178ac g     F .text	00000104 Look_for_FAT16
00813f40 g     F .text	00000070 alt_up_audio_play_l
00810544 g     F .text	0000007c __swrite
0081e70c g     O .rwdata	00000004 __malloc_trim_threshold
0081b70c g     F .text	00000020 altera_nios2_qsys_irq_init
0081b9a8 g     F .text	00000038 exit
00802c54 g     F .text	00000040 makeUpRight
00805488 g     F .text	00000050 drawSplashScreen
00819804 g     F .text	000003b0 alt_up_sd_card_find_next
0080e764 g     F .text	000000c8 _fwalk_reent
0080f664 g     F .text	0000018c __mdiff
00814960 g     F .text	00000064 alt_up_av_config_read_LTM_cfg_register
00823fe0 g     O .bss	00000500 sharkArray
00808e2c g     F .text	00000060 __modsi3
00802bd4 g     F .text	00000040 makeDownRight
008168e0 g     F .text	000000fc Read_Sector_Data
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080dc24 g     F .text	00000004 __sfp_lock_release
00814bc4 g     F .text	00000078 alt_up_character_lcd_string
00820330 g     O .bss	00000004 playedWords
0080375c g     F .text	00000068 hitPlayer
0081bd7c g     F .text	00000020 _exit
008076c4 g     F .text	00000030 __isnand
0081ad88 g     F .text	00000154 alt_alarm_start
00800590 g     F .text	000000cc loadSharkDeath
00808e9c g     F .text	00000098 __muldi3
0081abfc g     F .text	000000fc Read_Sector_Data_CRC
0081a078 g     F .text	00000394 alt_up_sd_card_read
0080ea1c g     F .text	00000194 __smakebuf_r
0080a098 g     F .text	00000074 strlen
0081b524 g     F .text	00000188 open
00803560 g     F .text	00000044 drawPlayer
00802b14 g     F .text	00000040 makeLeft
008116fc g     F .text	00000088 __gedf2
00823be0 g     O .bss	00000400 arcDisplacementFunction
008058f4 g     F .text	00000044 clearScreen
008145e0 g     F .text	000000f8 alt_up_av_config_read_video_cfg_register
00804458 g     F .text	00000038 updateCurrentPlayerScore
0081b2dc g     F .text	00000030 alt_icache_flush_all
00800204 g     F .text	0000019c setupAudio
00814c88 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0081e734 g     O .rwdata	00000004 alt_priority_mask
00820354 g     O .bss	00000004 playerBmp
00804ac0 g     F .text	00000034 readByte
00801eac g     F .text	000000b4 deleteBullet
00801104 g     F .text	00000444 parseBmp
00804d14 g     F .text	00000050 readPastWavHeader
0080c06c g     F .text	00000024 __vfprintf_internal
008148fc g     F .text	00000064 alt_up_av_config_write_D5M_cfg_register
00808190 g     F .text	00000080 __subdf3
00820334 g     O .bss	00000004 playCursor
00802c94 g     F .text	00000040 makeUpLeft
0080ef44 g     F .text	000000c4 __lo0bits
0081e73c g     O .rwdata	00000008 alt_alarm_list
00800de4 g     F .text	00000138 updateAudioWithVolume
0081b180 g     F .text	00000064 _do_ctors
00801e0c g     F .text	000000a0 moveBulletRight
008003a0 g     F .text	00000058 setupAudioInterrupt
00820338 g     O .bss	00000002 status
00803504 g     F .text	0000005c initPlayer
008059b8 g     F .text	00000084 drawPixelFast
00811918 g     F .text	000000fc close
00820310 g     O .bss	00000004 config
00800c10 g     F .text	00000044 playTheme
008120d0 g     F .text	00000080 alt_load
00813ad4 g     F .text	0000004c alt_up_audio_enable_read_interrupt
008146d8 g     F .text	000000f8 alt_up_av_config_write_video_cfg_register
008091dc g     F .text	00000314 __pack_d
008032a0 g     F .text	00000088 gameStart
00805134 g     F .text	00000170 createShark
00817dd0 g     F .text	000002ec match_file_record_to_name_ext
00809700 g     F .text	00000014 free
0080dc28 g     F .text	00000004 __sinit_lock_acquire
0080fb60 g     F .text	00000100 __multadd
0080eeac g     F .text	00000028 _Bfree
008147d0 g     F .text	00000064 alt_up_av_config_read_DC2_cfg_register
00813c0c g     F .text	0000003c alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406e14 	ori	at,at,440
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000171e 	bne	r2,zero,800188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c020b4 	movhi	r3,130
  800134:	18d29204 	addi	r3,r3,19016
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11800017 	ldw	r6,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c020b4 	movhi	r3,130
  80014c:	18d29204 	addi	r3,r3,19016
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	e17ffd17 	ldw	r5,-12(fp)
  800164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800168:	0005313a 	rdctl	r2,ipending
  80016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
  800170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800178:	e0bfff17 	ldw	r2,-4(fp)
  80017c:	1004c03a 	cmpne	r2,r2,zero
  800180:	103fe21e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800184:	00000706 	br	8001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800188:	e0bffe17 	ldw	r2,-8(fp)
  80018c:	1085883a 	add	r2,r2,r2
  800190:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800194:	e0bffd17 	ldw	r2,-12(fp)
  800198:	10800044 	addi	r2,r2,1
  80019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a0:	003fdd06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a4:	e037883a 	mov	sp,fp
  8001a8:	dfc00117 	ldw	ra,4(sp)
  8001ac:	df000017 	ldw	fp,0(sp)
  8001b0:	dec00204 	addi	sp,sp,8
  8001b4:	f800283a 	ret

Disassembly of section .text:

008001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b8:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
  8001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c4:	00bffd16 	blt	zero,r2,8001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c8:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001d0:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  8001d4:	d699bb14 	ori	gp,gp,26348
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d8:	008020b4 	movhi	r2,130
    ori r2, r2, %lo(__bss_start)
  8001dc:	1080c314 	ori	r2,r2,780

    movhi r3, %hi(__bss_end)
  8001e0:	00c020b4 	movhi	r3,130
    ori r3, r3, %lo(__bss_end)
  8001e4:	18d33614 	ori	r3,r3,19672

    beq r2, r3, 1f
  8001e8:	10c00326 	beq	r2,r3,8001f8 <_start+0x40>

0:
    stw zero, (r2)
  8001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f4:	10fffd36 	bltu	r2,r3,8001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f8:	08120d00 	call	8120d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001fc:	081230c0 	call	81230c <alt_main>

00800200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800200:	003fff06 	br	800200 <alt_after_alt_main>

00800204 <setupAudio>:
struct audioInfo theme;

volatile int somethingForIrq;

void setupAudio()
{
  800204:	defffc04 	addi	sp,sp,-16
  800208:	dfc00315 	stw	ra,12(sp)
  80020c:	df000215 	stw	fp,8(sp)
  800210:	df000204 	addi	fp,sp,8
	bool error = false;
  800214:	e03fff15 	stw	zero,-4(fp)
	config = (alt_up_av_config_dev *)alt_up_av_config_open_dev(CONFIG_NAME);
  800218:	d1200017 	ldw	r4,-32768(gp)
  80021c:	08142a00 	call	8142a0 <alt_up_av_config_open_dev>
  800220:	d0a70915 	stw	r2,-25564(gp)
	if (config == NULL) {
  800224:	d0a70917 	ldw	r2,-25564(gp)
  800228:	1004c03a 	cmpne	r2,r2,zero
  80022c:	1000051e 	bne	r2,zero,800244 <setupAudio+0x40>
		printf("Error: audio video config could not be opened.\n");
  800230:	010020b4 	movhi	r4,130
  800234:	212f8f04 	addi	r4,r4,-16836
  800238:	0809f800 	call	809f80 <puts>
		error = true;
  80023c:	00800044 	movi	r2,1
  800240:	e0bfff15 	stw	r2,-4(fp)
	}
	while (!alt_up_av_config_read_ready(config)) {
  800244:	d1270917 	ldw	r4,-25564(gp)
  800248:	08144fc0 	call	8144fc <alt_up_av_config_read_ready>
  80024c:	1005003a 	cmpeq	r2,r2,zero
  800250:	103ffc1e 	bne	r2,zero,800244 <setupAudio+0x40>
	}

	audio = (alt_up_audio_dev *)alt_up_audio_open_dev(AUDIO_NAME);
  800254:	d1200117 	ldw	r4,-32764(gp)
  800258:	0813a940 	call	813a94 <alt_up_audio_open_dev>
  80025c:	d0a70815 	stw	r2,-25568(gp)
	if (config == NULL) {
  800260:	d0a70917 	ldw	r2,-25564(gp)
  800264:	1004c03a 	cmpne	r2,r2,zero
  800268:	1000061e 	bne	r2,zero,800284 <setupAudio+0x80>
		printf("Error: audio codec could not be opened.\n");
  80026c:	010020b4 	movhi	r4,130
  800270:	212f9b04 	addi	r4,r4,-16788
  800274:	0809f800 	call	809f80 <puts>
		error = true;
  800278:	00800044 	movi	r2,1
  80027c:	e0bfff15 	stw	r2,-4(fp)
  800280:	00000606 	br	80029c <setupAudio+0x98>
	} else if (DEBUG == 1) {
  800284:	d0a70a17 	ldw	r2,-25560(gp)
  800288:	10800058 	cmpnei	r2,r2,1
  80028c:	1000031e 	bne	r2,zero,80029c <setupAudio+0x98>
		printf("Successfully opened audio codec.\n");
  800290:	010020b4 	movhi	r4,130
  800294:	212fa504 	addi	r4,r4,-16748
  800298:	0809f800 	call	809f80 <puts>
	}
    int interruptStatus = setupAudioInterrupt(audio, somethingForIrq);
  80029c:	d1270817 	ldw	r4,-25568(gp)
  8002a0:	d1671017 	ldw	r5,-25536(gp)
  8002a4:	08003a00 	call	8003a0 <setupAudioInterrupt>
  8002a8:	e0bffe15 	stw	r2,-8(fp)

    if (interruptStatus < 0) {
  8002ac:	e0bffe17 	ldw	r2,-8(fp)
  8002b0:	1004403a 	cmpge	r2,r2,zero
  8002b4:	1000061e 	bne	r2,zero,8002d0 <setupAudio+0xcc>
		printf("Error: audio interrupt could not be setup.\n");
  8002b8:	010020b4 	movhi	r4,130
  8002bc:	212fae04 	addi	r4,r4,-16712
  8002c0:	0809f800 	call	809f80 <puts>
		error = true;
  8002c4:	00800044 	movi	r2,1
  8002c8:	e0bfff15 	stw	r2,-4(fp)
  8002cc:	00000606 	br	8002e8 <setupAudio+0xe4>
	} else if (DEBUG == 1) {
  8002d0:	d0a70a17 	ldw	r2,-25560(gp)
  8002d4:	10800058 	cmpnei	r2,r2,1
  8002d8:	1000031e 	bne	r2,zero,8002e8 <setupAudio+0xe4>
		printf("Successfully setup audio interrupts.\n");
  8002dc:	010020b4 	movhi	r4,130
  8002e0:	212fb904 	addi	r4,r4,-16668
  8002e4:	0809f800 	call	809f80 <puts>
	}

    laser.mainBuffer = NULL;
  8002e8:	008020b4 	movhi	r2,130
  8002ec:	10819304 	addi	r2,r2,1612
  8002f0:	10000015 	stw	zero,0(r2)
    laser.volumeBuffer = NULL;
  8002f4:	008020b4 	movhi	r2,130
  8002f8:	10819304 	addi	r2,r2,1612
  8002fc:	10000115 	stw	zero,4(r2)
    loadLaser();
  800300:	08003f80 	call	8003f8 <loadLaser>
    playerDeath.mainBuffer = NULL;
  800304:	008020b4 	movhi	r2,130
  800308:	10819904 	addi	r2,r2,1636
  80030c:	10000015 	stw	zero,0(r2)
    playerDeath.volumeBuffer = NULL;
  800310:	008020b4 	movhi	r2,130
  800314:	10819904 	addi	r2,r2,1636
  800318:	10000115 	stw	zero,4(r2)
    loadPlayerDeath();
  80031c:	08004c40 	call	8004c4 <loadPlayerDeath>
    sharkDeath.mainBuffer = NULL;
  800320:	008020b4 	movhi	r2,130
  800324:	10819004 	addi	r2,r2,1600
  800328:	10000015 	stw	zero,0(r2)
    sharkDeath.volumeBuffer = NULL;
  80032c:	008020b4 	movhi	r2,130
  800330:	10819004 	addi	r2,r2,1600
  800334:	10000115 	stw	zero,4(r2)
    loadSharkDeath();
  800338:	08005900 	call	800590 <loadSharkDeath>
    theme.mainBuffer = NULL;
  80033c:	008020b4 	movhi	r2,130
  800340:	10819604 	addi	r2,r2,1624
  800344:	10000015 	stw	zero,0(r2)
    theme.volumeBuffer = NULL;
  800348:	008020b4 	movhi	r2,130
  80034c:	10819604 	addi	r2,r2,1624
  800350:	10000115 	stw	zero,4(r2)
    loadTheme();
  800354:	080065c0 	call	80065c <loadTheme>
    printf("finised loading sound buffers.\n");
  800358:	010020b4 	movhi	r4,130
  80035c:	212fc304 	addi	r4,r4,-16628
  800360:	0809f800 	call	809f80 <puts>

	status = NONE;
  800364:	d027130d 	sth	zero,-25524(gp)

	if (DEBUG == 1 && error == false) {
  800368:	d0a70a17 	ldw	r2,-25560(gp)
  80036c:	10800058 	cmpnei	r2,r2,1
  800370:	1000061e 	bne	r2,zero,80038c <setupAudio+0x188>
  800374:	e0bfff17 	ldw	r2,-4(fp)
  800378:	1004c03a 	cmpne	r2,r2,zero
  80037c:	1000031e 	bne	r2,zero,80038c <setupAudio+0x188>
		printf("Successfully setup sound.\n");
  800380:	010020b4 	movhi	r4,130
  800384:	212fcb04 	addi	r4,r4,-16596
  800388:	0809f800 	call	809f80 <puts>
	}
}
  80038c:	e037883a 	mov	sp,fp
  800390:	dfc00117 	ldw	ra,4(sp)
  800394:	df000017 	ldw	fp,0(sp)
  800398:	dec00204 	addi	sp,sp,8
  80039c:	f800283a 	ret

008003a0 <setupAudioInterrupt>:

int setupAudioInterrupt(alt_up_audio_dev *audio, volatile int somethingForIrq)
{
  8003a0:	defffb04 	addi	sp,sp,-20
  8003a4:	dfc00415 	stw	ra,16(sp)
  8003a8:	df000315 	stw	fp,12(sp)
  8003ac:	df000304 	addi	fp,sp,12
  8003b0:	e13ffe15 	stw	r4,-8(fp)
  8003b4:	e17fff15 	stw	r5,-4(fp)
    // Need to disable both audio interrupts before setting them up
    // otherwise you get stuck in them when they are setup
    alt_up_audio_disable_read_interrupt(audio);
  8003b8:	e13ffe17 	ldw	r4,-8(fp)
  8003bc:	0813b200 	call	813b20 <alt_up_audio_disable_read_interrupt>
    alt_up_audio_disable_write_interrupt(audio);
  8003c0:	e13ffe17 	ldw	r4,-8(fp)
  8003c4:	0813bbc0 	call	813bbc <alt_up_audio_disable_write_interrupt>

    void *irqInt = (void*)&somethingForIrq;
  8003c8:	e0bfff04 	addi	r2,fp,-4
  8003cc:	e0bffd15 	stw	r2,-12(fp)

	#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	return alt_ic_isr_register(AUDIO_0_IRQ_INTERRUPT_CONTROLLER_ID, AUDIO_0_IRQ, playSoundISR, irqInt, 0x0);
	#else
	return alt_irq_register(AUDIO_0_IRQ, irqInt, playSoundISR);
  8003d0:	010000c4 	movi	r4,3
  8003d4:	e17ffd17 	ldw	r5,-12(fp)
  8003d8:	01802034 	movhi	r6,128
  8003dc:	31831d04 	addi	r6,r6,3188
  8003e0:	0811df00 	call	811df0 <alt_irq_register>
	#endif
}
  8003e4:	e037883a 	mov	sp,fp
  8003e8:	dfc00117 	ldw	ra,4(sp)
  8003ec:	df000017 	ldw	fp,0(sp)
  8003f0:	dec00204 	addi	sp,sp,8
  8003f4:	f800283a 	ret

008003f8 <loadLaser>:

void loadLaser() {
  8003f8:	defffe04 	addi	sp,sp,-8
  8003fc:	dfc00115 	stw	ra,4(sp)
  800400:	df000015 	stw	fp,0(sp)
  800404:	d839883a 	mov	fp,sp
    laser.bufferLength = 38384;
  800408:	00c020b4 	movhi	r3,130
  80040c:	18c19304 	addi	r3,r3,1612
  800410:	00a57c14 	movui	r2,38384
  800414:	18800215 	stw	r2,8(r3)
	audioFileWordLength = laser.bufferLength;
  800418:	008020b4 	movhi	r2,130
  80041c:	10819304 	addi	r2,r2,1612
  800420:	10800217 	ldw	r2,8(r2)
  800424:	d0a70e15 	stw	r2,-25544(gp)
	if (laser.mainBuffer == NULL || laser.volumeBuffer == NULL) {
  800428:	008020b4 	movhi	r2,130
  80042c:	10819304 	addi	r2,r2,1612
  800430:	10800017 	ldw	r2,0(r2)
  800434:	1005003a 	cmpeq	r2,r2,zero
  800438:	1000051e 	bne	r2,zero,800450 <loadLaser+0x58>
  80043c:	008020b4 	movhi	r2,130
  800440:	10819304 	addi	r2,r2,1612
  800444:	10800117 	ldw	r2,4(r2)
  800448:	1004c03a 	cmpne	r2,r2,zero
  80044c:	10000e1e 	bne	r2,zero,800488 <loadLaser+0x90>
		readWavFile("laserii.wav", laser.bufferLength);
  800450:	008020b4 	movhi	r2,130
  800454:	10819304 	addi	r2,r2,1612
  800458:	11400217 	ldw	r5,8(r2)
  80045c:	010020b4 	movhi	r4,130
  800460:	212fd204 	addi	r4,r4,-16568
  800464:	08009f80 	call	8009f8 <readWavFile>
		//laserBuffer = audioBuffer;
		laser.mainBuffer = audioBuffer;
  800468:	d0e70b17 	ldw	r3,-25556(gp)
  80046c:	008020b4 	movhi	r2,130
  800470:	10819304 	addi	r2,r2,1612
  800474:	10c00015 	stw	r3,0(r2)
		laser.volumeBuffer = audioVolumeBuffer;
  800478:	d0e70c17 	ldw	r3,-25552(gp)
  80047c:	008020b4 	movhi	r2,130
  800480:	10819304 	addi	r2,r2,1612
  800484:	10c00115 	stw	r3,4(r2)
	}
	//audioBuffer = laserBuffer;
	audioBuffer = laser.mainBuffer;
  800488:	008020b4 	movhi	r2,130
  80048c:	10819304 	addi	r2,r2,1612
  800490:	10800017 	ldw	r2,0(r2)
  800494:	d0a70b15 	stw	r2,-25556(gp)
	audioVolumeBuffer = laser.volumeBuffer;
  800498:	008020b4 	movhi	r2,130
  80049c:	10819304 	addi	r2,r2,1612
  8004a0:	10800117 	ldw	r2,4(r2)
  8004a4:	d0a70c15 	stw	r2,-25552(gp)
	loaded = LASER;
  8004a8:	00800044 	movi	r2,1
  8004ac:	d0a70d0d 	sth	r2,-25548(gp)
}
  8004b0:	e037883a 	mov	sp,fp
  8004b4:	dfc00117 	ldw	ra,4(sp)
  8004b8:	df000017 	ldw	fp,0(sp)
  8004bc:	dec00204 	addi	sp,sp,8
  8004c0:	f800283a 	ret

008004c4 <loadPlayerDeath>:

void loadPlayerDeath() {
  8004c4:	defffe04 	addi	sp,sp,-8
  8004c8:	dfc00115 	stw	ra,4(sp)
  8004cc:	df000015 	stw	fp,0(sp)
  8004d0:	d839883a 	mov	fp,sp
	playerDeath.bufferLength = 0x0000DAFF / 2;
  8004d4:	00c020b4 	movhi	r3,130
  8004d8:	18c19904 	addi	r3,r3,1636
  8004dc:	009b5fc4 	movi	r2,28031
  8004e0:	18800215 	stw	r2,8(r3)
	audioFileWordLength = playerDeath.bufferLength;
  8004e4:	008020b4 	movhi	r2,130
  8004e8:	10819904 	addi	r2,r2,1636
  8004ec:	10800217 	ldw	r2,8(r2)
  8004f0:	d0a70e15 	stw	r2,-25544(gp)
	if (playerDeath.mainBuffer == NULL || playerDeath.volumeBuffer == NULL) {
  8004f4:	008020b4 	movhi	r2,130
  8004f8:	10819904 	addi	r2,r2,1636
  8004fc:	10800017 	ldw	r2,0(r2)
  800500:	1005003a 	cmpeq	r2,r2,zero
  800504:	1000051e 	bne	r2,zero,80051c <loadPlayerDeath+0x58>
  800508:	008020b4 	movhi	r2,130
  80050c:	10819904 	addi	r2,r2,1636
  800510:	10800117 	ldw	r2,4(r2)
  800514:	1004c03a 	cmpne	r2,r2,zero
  800518:	10000e1e 	bne	r2,zero,800554 <loadPlayerDeath+0x90>
		readWavFile("pdie.wav", playerDeath.bufferLength);
  80051c:	008020b4 	movhi	r2,130
  800520:	10819904 	addi	r2,r2,1636
  800524:	11400217 	ldw	r5,8(r2)
  800528:	010020b4 	movhi	r4,130
  80052c:	212fd504 	addi	r4,r4,-16556
  800530:	08009f80 	call	8009f8 <readWavFile>
		//playerDeathBuffer = audioBuffer;
		playerDeath.mainBuffer = audioBuffer;
  800534:	d0e70b17 	ldw	r3,-25556(gp)
  800538:	008020b4 	movhi	r2,130
  80053c:	10819904 	addi	r2,r2,1636
  800540:	10c00015 	stw	r3,0(r2)
		playerDeath.volumeBuffer = audioVolumeBuffer;
  800544:	d0e70c17 	ldw	r3,-25552(gp)
  800548:	008020b4 	movhi	r2,130
  80054c:	10819904 	addi	r2,r2,1636
  800550:	10c00115 	stw	r3,4(r2)
	}
	//audioBuffer = playerDeathBuffer;
	audioBuffer = playerDeath.mainBuffer;
  800554:	008020b4 	movhi	r2,130
  800558:	10819904 	addi	r2,r2,1636
  80055c:	10800017 	ldw	r2,0(r2)
  800560:	d0a70b15 	stw	r2,-25556(gp)
	audioVolumeBuffer = playerDeath.volumeBuffer;
  800564:	008020b4 	movhi	r2,130
  800568:	10819904 	addi	r2,r2,1636
  80056c:	10800117 	ldw	r2,4(r2)
  800570:	d0a70c15 	stw	r2,-25552(gp)
	loaded = PLAYER_DEATH;
  800574:	00800084 	movi	r2,2
  800578:	d0a70d0d 	sth	r2,-25548(gp)
}
  80057c:	e037883a 	mov	sp,fp
  800580:	dfc00117 	ldw	ra,4(sp)
  800584:	df000017 	ldw	fp,0(sp)
  800588:	dec00204 	addi	sp,sp,8
  80058c:	f800283a 	ret

00800590 <loadSharkDeath>:

void loadSharkDeath() {
  800590:	defffe04 	addi	sp,sp,-8
  800594:	dfc00115 	stw	ra,4(sp)
  800598:	df000015 	stw	fp,0(sp)
  80059c:	d839883a 	mov	fp,sp
	sharkDeath.bufferLength = 0x0000DAFF / 2;
  8005a0:	00c020b4 	movhi	r3,130
  8005a4:	18c19004 	addi	r3,r3,1600
  8005a8:	009b5fc4 	movi	r2,28031
  8005ac:	18800215 	stw	r2,8(r3)
	audioFileWordLength = sharkDeath.bufferLength;
  8005b0:	008020b4 	movhi	r2,130
  8005b4:	10819004 	addi	r2,r2,1600
  8005b8:	10800217 	ldw	r2,8(r2)
  8005bc:	d0a70e15 	stw	r2,-25544(gp)
	if (sharkDeath.mainBuffer == NULL || sharkDeath.volumeBuffer == NULL) {
  8005c0:	008020b4 	movhi	r2,130
  8005c4:	10819004 	addi	r2,r2,1600
  8005c8:	10800017 	ldw	r2,0(r2)
  8005cc:	1005003a 	cmpeq	r2,r2,zero
  8005d0:	1000051e 	bne	r2,zero,8005e8 <loadSharkDeath+0x58>
  8005d4:	008020b4 	movhi	r2,130
  8005d8:	10819004 	addi	r2,r2,1600
  8005dc:	10800117 	ldw	r2,4(r2)
  8005e0:	1004c03a 	cmpne	r2,r2,zero
  8005e4:	10000e1e 	bne	r2,zero,800620 <loadSharkDeath+0x90>
		readWavFile("sdie.wav", sharkDeath.bufferLength);
  8005e8:	008020b4 	movhi	r2,130
  8005ec:	10819004 	addi	r2,r2,1600
  8005f0:	11400217 	ldw	r5,8(r2)
  8005f4:	010020b4 	movhi	r4,130
  8005f8:	212fd804 	addi	r4,r4,-16544
  8005fc:	08009f80 	call	8009f8 <readWavFile>
		//sharkDeathBuffer = audioBuffer;
		sharkDeath.mainBuffer = audioBuffer;
  800600:	d0e70b17 	ldw	r3,-25556(gp)
  800604:	008020b4 	movhi	r2,130
  800608:	10819004 	addi	r2,r2,1600
  80060c:	10c00015 	stw	r3,0(r2)
		sharkDeath.volumeBuffer = audioVolumeBuffer;
  800610:	d0e70c17 	ldw	r3,-25552(gp)
  800614:	008020b4 	movhi	r2,130
  800618:	10819004 	addi	r2,r2,1600
  80061c:	10c00115 	stw	r3,4(r2)
	}
	//audioBuffer = sharkDeathBuffer;
	audioBuffer = sharkDeath.mainBuffer;
  800620:	008020b4 	movhi	r2,130
  800624:	10819004 	addi	r2,r2,1600
  800628:	10800017 	ldw	r2,0(r2)
  80062c:	d0a70b15 	stw	r2,-25556(gp)
	audioVolumeBuffer = sharkDeath.volumeBuffer;
  800630:	008020b4 	movhi	r2,130
  800634:	10819004 	addi	r2,r2,1600
  800638:	10800117 	ldw	r2,4(r2)
  80063c:	d0a70c15 	stw	r2,-25552(gp)
	loaded = SHARK_DEATH;
  800640:	008000c4 	movi	r2,3
  800644:	d0a70d0d 	sth	r2,-25548(gp)
}
  800648:	e037883a 	mov	sp,fp
  80064c:	dfc00117 	ldw	ra,4(sp)
  800650:	df000017 	ldw	fp,0(sp)
  800654:	dec00204 	addi	sp,sp,8
  800658:	f800283a 	ret

0080065c <loadTheme>:

void loadTheme() {
  80065c:	defffe04 	addi	sp,sp,-8
  800660:	dfc00115 	stw	ra,4(sp)
  800664:	df000015 	stw	fp,0(sp)
  800668:	d839883a 	mov	fp,sp
	theme.bufferLength = 0x00063E00 / 2;
  80066c:	00c020b4 	movhi	r3,130
  800670:	18c19604 	addi	r3,r3,1624
  800674:	008000f4 	movhi	r2,3
  800678:	1087c004 	addi	r2,r2,7936
  80067c:	18800215 	stw	r2,8(r3)
	audioFileWordLength = theme.bufferLength;
  800680:	008020b4 	movhi	r2,130
  800684:	10819604 	addi	r2,r2,1624
  800688:	10800217 	ldw	r2,8(r2)
  80068c:	d0a70e15 	stw	r2,-25544(gp)
	if (theme.mainBuffer == NULL || theme.volumeBuffer == NULL) {
  800690:	008020b4 	movhi	r2,130
  800694:	10819604 	addi	r2,r2,1624
  800698:	10800017 	ldw	r2,0(r2)
  80069c:	1005003a 	cmpeq	r2,r2,zero
  8006a0:	1000051e 	bne	r2,zero,8006b8 <loadTheme+0x5c>
  8006a4:	008020b4 	movhi	r2,130
  8006a8:	10819604 	addi	r2,r2,1624
  8006ac:	10800117 	ldw	r2,4(r2)
  8006b0:	1004c03a 	cmpne	r2,r2,zero
  8006b4:	10000e1e 	bne	r2,zero,8006f0 <loadTheme+0x94>
		readWavFile("theme.wav", theme.bufferLength);
  8006b8:	008020b4 	movhi	r2,130
  8006bc:	10819604 	addi	r2,r2,1624
  8006c0:	11400217 	ldw	r5,8(r2)
  8006c4:	010020b4 	movhi	r4,130
  8006c8:	212fdb04 	addi	r4,r4,-16532
  8006cc:	08009f80 	call	8009f8 <readWavFile>
		//themeBuffer = audioBuffer;
		theme.mainBuffer = audioBuffer;
  8006d0:	d0e70b17 	ldw	r3,-25556(gp)
  8006d4:	008020b4 	movhi	r2,130
  8006d8:	10819604 	addi	r2,r2,1624
  8006dc:	10c00015 	stw	r3,0(r2)
		theme.volumeBuffer = audioVolumeBuffer;
  8006e0:	d0e70c17 	ldw	r3,-25552(gp)
  8006e4:	008020b4 	movhi	r2,130
  8006e8:	10819604 	addi	r2,r2,1624
  8006ec:	10c00115 	stw	r3,4(r2)
	}
	//audioBuffer = themeBuffer;
	audioBuffer = theme.mainBuffer;
  8006f0:	008020b4 	movhi	r2,130
  8006f4:	10819604 	addi	r2,r2,1624
  8006f8:	10800017 	ldw	r2,0(r2)
  8006fc:	d0a70b15 	stw	r2,-25556(gp)
	audioVolumeBuffer = theme.volumeBuffer;
  800700:	008020b4 	movhi	r2,130
  800704:	10819604 	addi	r2,r2,1624
  800708:	10800117 	ldw	r2,4(r2)
  80070c:	d0a70c15 	stw	r2,-25552(gp)
	loaded = THEME;
  800710:	00800104 	movi	r2,4
  800714:	d0a70d0d 	sth	r2,-25548(gp)
}
  800718:	e037883a 	mov	sp,fp
  80071c:	dfc00117 	ldw	ra,4(sp)
  800720:	df000017 	ldw	fp,0(sp)
  800724:	dec00204 	addi	sp,sp,8
  800728:	f800283a 	ret

0080072c <playAudioMono>:

void playAudioMono(int length) {
  80072c:	defffb04 	addi	sp,sp,-20
  800730:	dfc00415 	stw	ra,16(sp)
  800734:	df000315 	stw	fp,12(sp)
  800738:	df000304 	addi	fp,sp,12
  80073c:	e13fff15 	stw	r4,-4(fp)
	if (DEBUG == 1) {
  800740:	d0a70a17 	ldw	r2,-25560(gp)
  800744:	10800058 	cmpnei	r2,r2,1
  800748:	1000031e 	bne	r2,zero,800758 <playAudioMono+0x2c>
		printf("Playing audio.\n");
  80074c:	010020b4 	movhi	r4,130
  800750:	212fde04 	addi	r4,r4,-16520
  800754:	0809f800 	call	809f80 <puts>
	}
	int left = alt_up_audio_write_fifo(audio, (unsigned int *)playCursor, length, ALT_UP_AUDIO_LEFT);
  800758:	d1270817 	ldw	r4,-25568(gp)
  80075c:	d0a71217 	ldw	r2,-25528(gp)
  800760:	100b883a 	mov	r5,r2
  800764:	e1bfff17 	ldw	r6,-4(fp)
  800768:	000f883a 	mov	r7,zero
  80076c:	08140b40 	call	8140b4 <alt_up_audio_write_fifo>
  800770:	e0bffe15 	stw	r2,-8(fp)
	int right = alt_up_audio_write_fifo(audio, (unsigned int *)playCursor, length, ALT_UP_AUDIO_RIGHT);
  800774:	d1270817 	ldw	r4,-25568(gp)
  800778:	d0a71217 	ldw	r2,-25528(gp)
  80077c:	100b883a 	mov	r5,r2
  800780:	e1bfff17 	ldw	r6,-4(fp)
  800784:	01c00044 	movi	r7,1
  800788:	08140b40 	call	8140b4 <alt_up_audio_write_fifo>
  80078c:	e0bffd15 	stw	r2,-12(fp)
	left++;
  800790:	e0bffe17 	ldw	r2,-8(fp)
  800794:	10800044 	addi	r2,r2,1
  800798:	e0bffe15 	stw	r2,-8(fp)
	right++;
  80079c:	e0bffd17 	ldw	r2,-12(fp)
  8007a0:	10800044 	addi	r2,r2,1
  8007a4:	e0bffd15 	stw	r2,-12(fp)
	//playAudio(buffer, length, buffer, length);
}
  8007a8:	e037883a 	mov	sp,fp
  8007ac:	dfc00117 	ldw	ra,4(sp)
  8007b0:	df000017 	ldw	fp,0(sp)
  8007b4:	dec00204 	addi	sp,sp,8
  8007b8:	f800283a 	ret

008007bc <playAudio>:

void playAudio(unsigned int *leftBuffer, int leftLength, unsigned int *rightBuffer, int rightLength) {
  8007bc:	defff804 	addi	sp,sp,-32
  8007c0:	dfc00715 	stw	ra,28(sp)
  8007c4:	df000615 	stw	fp,24(sp)
  8007c8:	df000604 	addi	fp,sp,24
  8007cc:	e13ffc15 	stw	r4,-16(fp)
  8007d0:	e17ffd15 	stw	r5,-12(fp)
  8007d4:	e1bffe15 	stw	r6,-8(fp)
  8007d8:	e1ffff15 	stw	r7,-4(fp)
	int leftWritten = alt_up_audio_write_fifo(audio, leftBuffer, leftLength, ALT_UP_AUDIO_LEFT);
  8007dc:	d1270817 	ldw	r4,-25568(gp)
  8007e0:	e17ffc17 	ldw	r5,-16(fp)
  8007e4:	e1bffd17 	ldw	r6,-12(fp)
  8007e8:	000f883a 	mov	r7,zero
  8007ec:	08140b40 	call	8140b4 <alt_up_audio_write_fifo>
  8007f0:	e0bffb15 	stw	r2,-20(fp)
	if (DEBUG == 1) {
  8007f4:	d0a70a17 	ldw	r2,-25560(gp)
  8007f8:	10800058 	cmpnei	r2,r2,1
  8007fc:	1000041e 	bne	r2,zero,800810 <playAudio+0x54>
		printf("Wrote %d to left audio FIFO. with value\n", leftWritten);
  800800:	010020b4 	movhi	r4,130
  800804:	212fe204 	addi	r4,r4,-16504
  800808:	e17ffb17 	ldw	r5,-20(fp)
  80080c:	0809e680 	call	809e68 <printf>
	}

	int rightWritten = alt_up_audio_write_fifo(audio, rightBuffer, rightLength, ALT_UP_AUDIO_RIGHT);
  800810:	d1270817 	ldw	r4,-25568(gp)
  800814:	e17ffe17 	ldw	r5,-8(fp)
  800818:	e1bfff17 	ldw	r6,-4(fp)
  80081c:	01c00044 	movi	r7,1
  800820:	08140b40 	call	8140b4 <alt_up_audio_write_fifo>
  800824:	e0bffa15 	stw	r2,-24(fp)
	if (DEBUG == 1) {
  800828:	d0a70a17 	ldw	r2,-25560(gp)
  80082c:	10800058 	cmpnei	r2,r2,1
  800830:	1000041e 	bne	r2,zero,800844 <playAudio+0x88>
		printf("Wrote %d to right audio FIFO.\n", rightWritten);
  800834:	010020b4 	movhi	r4,130
  800838:	212fed04 	addi	r4,r4,-16460
  80083c:	e17ffa17 	ldw	r5,-24(fp)
  800840:	0809e680 	call	809e68 <printf>
	}
}
  800844:	e037883a 	mov	sp,fp
  800848:	dfc00117 	ldw	ra,4(sp)
  80084c:	df000017 	ldw	fp,0(sp)
  800850:	dec00204 	addi	sp,sp,8
  800854:	f800283a 	ret

00800858 <audioTest>:

void audioTest()
{
  800858:	defff504 	addi	sp,sp,-44
  80085c:	dfc00a15 	stw	ra,40(sp)
  800860:	df000915 	stw	fp,36(sp)
  800864:	df000904 	addi	fp,sp,36
	setupAudio();
  800868:	08002040 	call	800204 <setupAudio>
	printf("Starting audio test\n");
  80086c:	010020b4 	movhi	r4,130
  800870:	212ff504 	addi	r4,r4,-16428
  800874:	0809f800 	call	809f80 <puts>
	int length = 8;
  800878:	00800204 	movi	r2,8
  80087c:	e0bffb15 	stw	r2,-20(fp)
	unsigned int right [length];
  800880:	e0bffb17 	ldw	r2,-20(fp)
  800884:	1085883a 	add	r2,r2,r2
  800888:	1085883a 	add	r2,r2,r2
  80088c:	108000c4 	addi	r2,r2,3
  800890:	108000c4 	addi	r2,r2,3
  800894:	1004d0ba 	srli	r2,r2,2
  800898:	1085883a 	add	r2,r2,r2
  80089c:	1085883a 	add	r2,r2,r2
  8008a0:	d8b7c83a 	sub	sp,sp,r2
  8008a4:	e6ffff15 	stw	sp,-4(fp)
  8008a8:	e0ffff17 	ldw	r3,-4(fp)
  8008ac:	188000c4 	addi	r2,r3,3
  8008b0:	1004d0ba 	srli	r2,r2,2
  8008b4:	1085883a 	add	r2,r2,r2
  8008b8:	1085883a 	add	r2,r2,r2
  8008bc:	e0bfff15 	stw	r2,-4(fp)
  8008c0:	e0bfff17 	ldw	r2,-4(fp)
  8008c4:	e0bffd15 	stw	r2,-12(fp)
	unsigned int left [length];
  8008c8:	e0bffb17 	ldw	r2,-20(fp)
  8008cc:	1085883a 	add	r2,r2,r2
  8008d0:	1085883a 	add	r2,r2,r2
  8008d4:	108000c4 	addi	r2,r2,3
  8008d8:	108000c4 	addi	r2,r2,3
  8008dc:	1004d0ba 	srli	r2,r2,2
  8008e0:	1085883a 	add	r2,r2,r2
  8008e4:	1085883a 	add	r2,r2,r2
  8008e8:	d8b7c83a 	sub	sp,sp,r2
  8008ec:	e6fffe15 	stw	sp,-8(fp)
  8008f0:	e0fffe17 	ldw	r3,-8(fp)
  8008f4:	188000c4 	addi	r2,r3,3
  8008f8:	1004d0ba 	srli	r2,r2,2
  8008fc:	1085883a 	add	r2,r2,r2
  800900:	1085883a 	add	r2,r2,r2
  800904:	e0bffe15 	stw	r2,-8(fp)
  800908:	e0bffe17 	ldw	r2,-8(fp)
  80090c:	e0bffc15 	stw	r2,-16(fp)
	int i;

	for (i = 0; i < length; i++) {
  800910:	e03ffa15 	stw	zero,-24(fp)
  800914:	00001b06 	br	800984 <audioTest+0x12c>
		right[i] = (i * i * i) & 0x0000FFFF;
  800918:	e17ffa17 	ldw	r5,-24(fp)
  80091c:	e0fffa17 	ldw	r3,-24(fp)
  800920:	e0bffa17 	ldw	r2,-24(fp)
  800924:	1887383a 	mul	r3,r3,r2
  800928:	e0bffa17 	ldw	r2,-24(fp)
  80092c:	1885383a 	mul	r2,r3,r2
  800930:	113fffcc 	andi	r4,r2,65535
  800934:	e0fffd17 	ldw	r3,-12(fp)
  800938:	2945883a 	add	r2,r5,r5
  80093c:	1085883a 	add	r2,r2,r2
  800940:	10c5883a 	add	r2,r2,r3
  800944:	11000015 	stw	r4,0(r2)
		left[i] = right[i];
  800948:	e17ffa17 	ldw	r5,-24(fp)
  80094c:	e0bffa17 	ldw	r2,-24(fp)
  800950:	e0fffd17 	ldw	r3,-12(fp)
  800954:	1085883a 	add	r2,r2,r2
  800958:	1085883a 	add	r2,r2,r2
  80095c:	10c5883a 	add	r2,r2,r3
  800960:	11000017 	ldw	r4,0(r2)
  800964:	e0fffc17 	ldw	r3,-16(fp)
  800968:	2945883a 	add	r2,r5,r5
  80096c:	1085883a 	add	r2,r2,r2
  800970:	10c5883a 	add	r2,r2,r3
  800974:	11000015 	stw	r4,0(r2)
	int length = 8;
	unsigned int right [length];
	unsigned int left [length];
	int i;

	for (i = 0; i < length; i++) {
  800978:	e0bffa17 	ldw	r2,-24(fp)
  80097c:	10800044 	addi	r2,r2,1
  800980:	e0bffa15 	stw	r2,-24(fp)
  800984:	e0fffa17 	ldw	r3,-24(fp)
  800988:	e0bffb17 	ldw	r2,-20(fp)
  80098c:	18bfe216 	blt	r3,r2,800918 <audioTest+0xc0>
		right[i] = (i * i * i) & 0x0000FFFF;
		left[i] = right[i];
	}

	unsigned int *rightBuffer = right;
  800990:	e0bffd17 	ldw	r2,-12(fp)
  800994:	e0bff915 	stw	r2,-28(fp)
	unsigned int *leftBuffer = left;
  800998:	e0bffc17 	ldw	r2,-16(fp)
  80099c:	e0bff815 	stw	r2,-32(fp)

	//sin (param*PI/180); for degrees, it uses radians

	int free = alt_up_audio_write_fifo_space(audio, ALT_UP_AUDIO_RIGHT);
  8009a0:	d1270817 	ldw	r4,-25568(gp)
  8009a4:	01400044 	movi	r5,1
  8009a8:	0813e5c0 	call	813e5c <alt_up_audio_write_fifo_space>
  8009ac:	e0bff715 	stw	r2,-36(fp)
	printf("%d words free in right FIFO\n", free);
  8009b0:	010020b4 	movhi	r4,130
  8009b4:	212ffa04 	addi	r4,r4,-16408
  8009b8:	e17ff717 	ldw	r5,-36(fp)
  8009bc:	0809e680 	call	809e68 <printf>
  8009c0:	00000006 	br	8009c4 <audioTest+0x16c>

	for (;;) {
		free = alt_up_audio_write_fifo_space(audio, ALT_UP_AUDIO_RIGHT);
  8009c4:	d1270817 	ldw	r4,-25568(gp)
  8009c8:	01400044 	movi	r5,1
  8009cc:	0813e5c0 	call	813e5c <alt_up_audio_write_fifo_space>
  8009d0:	e0bff715 	stw	r2,-36(fp)
		//printf("%d words free in right FIFO\n", free);
		if (free >= length) {
  8009d4:	e0fff717 	ldw	r3,-36(fp)
  8009d8:	e0bffb17 	ldw	r2,-20(fp)
  8009dc:	18bff916 	blt	r3,r2,8009c4 <audioTest+0x16c>
			//printf("Playing audio\n");
			playAudio(leftBuffer, length, rightBuffer, length);
  8009e0:	e13ff817 	ldw	r4,-32(fp)
  8009e4:	e17ffb17 	ldw	r5,-20(fp)
  8009e8:	e1bff917 	ldw	r6,-28(fp)
  8009ec:	e1fffb17 	ldw	r7,-20(fp)
  8009f0:	08007bc0 	call	8007bc <playAudio>
		}
	}
  8009f4:	003ff306 	br	8009c4 <audioTest+0x16c>

008009f8 <readWavFile>:
}

void readWavFile(char *wavFileName, unsigned int fileWordLength) {
  8009f8:	defff904 	addi	sp,sp,-28
  8009fc:	dfc00615 	stw	ra,24(sp)
  800a00:	df000515 	stw	fp,20(sp)
  800a04:	df000504 	addi	fp,sp,20
  800a08:	e13ffe15 	stw	r4,-8(fp)
  800a0c:	e17fff15 	stw	r5,-4(fp)
	audioBuffer = malloc(sizeof(unsigned int) * fileWordLength);
  800a10:	e0bfff17 	ldw	r2,-4(fp)
  800a14:	1085883a 	add	r2,r2,r2
  800a18:	1085883a 	add	r2,r2,r2
  800a1c:	1009883a 	mov	r4,r2
  800a20:	08097140 	call	809714 <malloc>
  800a24:	d0a70b15 	stw	r2,-25556(gp)
	audioVolumeBuffer = malloc(sizeof(unsigned int) * fileWordLength);
  800a28:	e0bfff17 	ldw	r2,-4(fp)
  800a2c:	1085883a 	add	r2,r2,r2
  800a30:	1085883a 	add	r2,r2,r2
  800a34:	1009883a 	mov	r4,r2
  800a38:	08097140 	call	809714 <malloc>
  800a3c:	d0a70c15 	stw	r2,-25552(gp)
	if (audioBuffer == NULL || audioVolumeBuffer == NULL) {
  800a40:	d0a70b17 	ldw	r2,-25556(gp)
  800a44:	1005003a 	cmpeq	r2,r2,zero
  800a48:	1000031e 	bne	r2,zero,800a58 <readWavFile+0x60>
  800a4c:	d0a70c17 	ldw	r2,-25552(gp)
  800a50:	1004c03a 	cmpne	r2,r2,zero
  800a54:	1000031e 	bne	r2,zero,800a64 <readWavFile+0x6c>
		printf("Error: insufficient memory to load audio file into memory.\n");
  800a58:	010020b4 	movhi	r4,130
  800a5c:	21300204 	addi	r4,r4,-16376
  800a60:	0809f800 	call	809f80 <puts>
	}

	short int fileHandle = openFile(wavFileName);
  800a64:	e13ffe17 	ldw	r4,-8(fp)
  800a68:	0804a500 	call	804a50 <openFile>
  800a6c:	e0bffd0d 	sth	r2,-12(fp)
	if (fileHandle == -1) {
  800a70:	e0bffd0f 	ldh	r2,-12(fp)
  800a74:	10bfffd8 	cmpnei	r2,r2,-1
  800a78:	1000051e 	bne	r2,zero,800a90 <readWavFile+0x98>
		printf("Error opening %s\n", wavFileName);
  800a7c:	010020b4 	movhi	r4,130
  800a80:	21301104 	addi	r4,r4,-16316
  800a84:	e17ffe17 	ldw	r5,-8(fp)
  800a88:	0809e680 	call	809e68 <printf>
		return;
  800a8c:	00002206 	br	800b18 <readWavFile+0x120>
	}

	readPastWavHeader(fileHandle);
  800a90:	e13ffd0f 	ldh	r4,-12(fp)
  800a94:	0804d140 	call	804d14 <readPastWavHeader>

	unsigned int i;
	unsigned int word;
	for (i = 0; i < fileWordLength; i++) {
  800a98:	e03ffc15 	stw	zero,-16(fp)
  800a9c:	00001906 	br	800b04 <readWavFile+0x10c>
		word = readWord(fileHandle);
  800aa0:	e13ffd0f 	ldh	r4,-12(fp)
  800aa4:	0804af40 	call	804af4 <readWord>
  800aa8:	10bfffcc 	andi	r2,r2,65535
  800aac:	10a0001c 	xori	r2,r2,32768
  800ab0:	10a00004 	addi	r2,r2,-32768
  800ab4:	e0bffb15 	stw	r2,-20(fp)
		audioBuffer[i] = word;
  800ab8:	e0bffc17 	ldw	r2,-16(fp)
  800abc:	1085883a 	add	r2,r2,r2
  800ac0:	1085883a 	add	r2,r2,r2
  800ac4:	1007883a 	mov	r3,r2
  800ac8:	d0a70b17 	ldw	r2,-25556(gp)
  800acc:	1887883a 	add	r3,r3,r2
  800ad0:	e0bffb17 	ldw	r2,-20(fp)
  800ad4:	18800015 	stw	r2,0(r3)
		audioVolumeBuffer[i] = word;
  800ad8:	e0bffc17 	ldw	r2,-16(fp)
  800adc:	1085883a 	add	r2,r2,r2
  800ae0:	1085883a 	add	r2,r2,r2
  800ae4:	1007883a 	mov	r3,r2
  800ae8:	d0a70c17 	ldw	r2,-25552(gp)
  800aec:	1887883a 	add	r3,r3,r2
  800af0:	e0bffb17 	ldw	r2,-20(fp)
  800af4:	18800015 	stw	r2,0(r3)

	readPastWavHeader(fileHandle);

	unsigned int i;
	unsigned int word;
	for (i = 0; i < fileWordLength; i++) {
  800af8:	e0bffc17 	ldw	r2,-16(fp)
  800afc:	10800044 	addi	r2,r2,1
  800b00:	e0bffc15 	stw	r2,-16(fp)
  800b04:	e0fffc17 	ldw	r3,-16(fp)
  800b08:	e0bfff17 	ldw	r2,-4(fp)
  800b0c:	18bfe436 	bltu	r3,r2,800aa0 <readWavFile+0xa8>
		audioVolumeBuffer[i] = word;
		//printf("0x%x ", (int)word > 0 ? word : -1 * word);
	}
	//printf("reached EOF\n");

	closeFile(fileHandle);
  800b10:	e13ffd0f 	ldh	r4,-12(fp)
  800b14:	0804a900 	call	804a90 <closeFile>
	return;
}
  800b18:	e037883a 	mov	sp,fp
  800b1c:	dfc00117 	ldw	ra,4(sp)
  800b20:	df000017 	ldw	fp,0(sp)
  800b24:	dec00204 	addi	sp,sp,8
  800b28:	f800283a 	ret

00800b2c <playLaser>:

// Plays laser once, using interrupts
void playLaser(void) {
  800b2c:	defffe04 	addi	sp,sp,-8
  800b30:	dfc00115 	stw	ra,4(sp)
  800b34:	df000015 	stw	fp,0(sp)
  800b38:	d839883a 	mov	fp,sp
	if (DEBUG == 1) {
  800b3c:	d0a70a17 	ldw	r2,-25560(gp)
  800b40:	10800058 	cmpnei	r2,r2,1
  800b44:	1000031e 	bne	r2,zero,800b54 <playLaser+0x28>
		printf("Playing laser via interrupt.\n");
  800b48:	010020b4 	movhi	r4,130
  800b4c:	21301604 	addi	r4,r4,-16296
  800b50:	0809f800 	call	809f80 <puts>
	}
	loadLaser();
  800b54:	08003f80 	call	8003f8 <loadLaser>
	status = LASER;
  800b58:	00800044 	movi	r2,1
  800b5c:	d0a7130d 	sth	r2,-25524(gp)
	playCursor = audioVolumeBuffer;
  800b60:	d0a70c17 	ldw	r2,-25552(gp)
  800b64:	d0a71215 	stw	r2,-25528(gp)
	playedWords = 0;
  800b68:	d0271115 	stw	zero,-25532(gp)
	alt_up_audio_enable_write_interrupt(audio);
  800b6c:	d1270817 	ldw	r4,-25568(gp)
  800b70:	0813b700 	call	813b70 <alt_up_audio_enable_write_interrupt>
}
  800b74:	e037883a 	mov	sp,fp
  800b78:	dfc00117 	ldw	ra,4(sp)
  800b7c:	df000017 	ldw	fp,0(sp)
  800b80:	dec00204 	addi	sp,sp,8
  800b84:	f800283a 	ret

00800b88 <playPlayerDeath>:

void playPlayerDeath(void) {
  800b88:	defffe04 	addi	sp,sp,-8
  800b8c:	dfc00115 	stw	ra,4(sp)
  800b90:	df000015 	stw	fp,0(sp)
  800b94:	d839883a 	mov	fp,sp
	loadPlayerDeath();
  800b98:	08004c40 	call	8004c4 <loadPlayerDeath>
	status = PLAYER_DEATH;
  800b9c:	00800084 	movi	r2,2
  800ba0:	d0a7130d 	sth	r2,-25524(gp)
	playCursor = audioVolumeBuffer;
  800ba4:	d0a70c17 	ldw	r2,-25552(gp)
  800ba8:	d0a71215 	stw	r2,-25528(gp)
	playedWords = 0;
  800bac:	d0271115 	stw	zero,-25532(gp)
	alt_up_audio_enable_write_interrupt(audio);
  800bb0:	d1270817 	ldw	r4,-25568(gp)
  800bb4:	0813b700 	call	813b70 <alt_up_audio_enable_write_interrupt>
}
  800bb8:	e037883a 	mov	sp,fp
  800bbc:	dfc00117 	ldw	ra,4(sp)
  800bc0:	df000017 	ldw	fp,0(sp)
  800bc4:	dec00204 	addi	sp,sp,8
  800bc8:	f800283a 	ret

00800bcc <playSharkDeath>:

void playSharkDeath(void) {
  800bcc:	defffe04 	addi	sp,sp,-8
  800bd0:	dfc00115 	stw	ra,4(sp)
  800bd4:	df000015 	stw	fp,0(sp)
  800bd8:	d839883a 	mov	fp,sp
	loadSharkDeath();
  800bdc:	08005900 	call	800590 <loadSharkDeath>
	status = SHARK_DEATH;
  800be0:	008000c4 	movi	r2,3
  800be4:	d0a7130d 	sth	r2,-25524(gp)
	playCursor = audioVolumeBuffer;
  800be8:	d0a70c17 	ldw	r2,-25552(gp)
  800bec:	d0a71215 	stw	r2,-25528(gp)
	playedWords = 0;
  800bf0:	d0271115 	stw	zero,-25532(gp)
	alt_up_audio_enable_write_interrupt(audio);
  800bf4:	d1270817 	ldw	r4,-25568(gp)
  800bf8:	0813b700 	call	813b70 <alt_up_audio_enable_write_interrupt>
}
  800bfc:	e037883a 	mov	sp,fp
  800c00:	dfc00117 	ldw	ra,4(sp)
  800c04:	df000017 	ldw	fp,0(sp)
  800c08:	dec00204 	addi	sp,sp,8
  800c0c:	f800283a 	ret

00800c10 <playTheme>:

void playTheme(void) {
  800c10:	defffe04 	addi	sp,sp,-8
  800c14:	dfc00115 	stw	ra,4(sp)
  800c18:	df000015 	stw	fp,0(sp)
  800c1c:	d839883a 	mov	fp,sp
	loadTheme();
  800c20:	080065c0 	call	80065c <loadTheme>
	status = THEME;
  800c24:	00800104 	movi	r2,4
  800c28:	d0a7130d 	sth	r2,-25524(gp)
	playCursor = audioVolumeBuffer;
  800c2c:	d0a70c17 	ldw	r2,-25552(gp)
  800c30:	d0a71215 	stw	r2,-25528(gp)
	playedWords = 0;
  800c34:	d0271115 	stw	zero,-25532(gp)
	alt_up_audio_enable_write_interrupt(audio);
  800c38:	d1270817 	ldw	r4,-25568(gp)
  800c3c:	0813b700 	call	813b70 <alt_up_audio_enable_write_interrupt>
}
  800c40:	e037883a 	mov	sp,fp
  800c44:	dfc00117 	ldw	ra,4(sp)
  800c48:	df000017 	ldw	fp,0(sp)
  800c4c:	dec00204 	addi	sp,sp,8
  800c50:	f800283a 	ret

00800c54 <stopTheme>:

void stopTheme(void) {
  800c54:	deffff04 	addi	sp,sp,-4
  800c58:	df000015 	stw	fp,0(sp)
  800c5c:	d839883a 	mov	fp,sp
	status = NONE;
  800c60:	d027130d 	sth	zero,-25524(gp)
}
  800c64:	e037883a 	mov	sp,fp
  800c68:	df000017 	ldw	fp,0(sp)
  800c6c:	dec00104 	addi	sp,sp,4
  800c70:	f800283a 	ret

00800c74 <playSoundISR>:

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void playSoundISR(void* isr_context) {
#else
static void playSoundISR(void* isr_context, alt_u32 id) {
  800c74:	defff704 	addi	sp,sp,-36
  800c78:	dfc00815 	stw	ra,32(sp)
  800c7c:	df000715 	stw	fp,28(sp)
  800c80:	df000704 	addi	fp,sp,28
  800c84:	e13ffc15 	stw	r4,-16(fp)
  800c88:	e17ffd15 	stw	r5,-12(fp)
#endif
	if (status == NONE) {
  800c8c:	d0a7130b 	ldhu	r2,-25524(gp)
  800c90:	10bfffcc 	andi	r2,r2,65535
  800c94:	10a0001c 	xori	r2,r2,32768
  800c98:	10a00004 	addi	r2,r2,-32768
  800c9c:	1004c03a 	cmpne	r2,r2,zero
  800ca0:	1000031e 	bne	r2,zero,800cb0 <playSoundISR+0x3c>
		alt_up_audio_disable_write_interrupt(audio);
  800ca4:	d1270817 	ldw	r4,-25568(gp)
  800ca8:	0813bbc0 	call	813bbc <alt_up_audio_disable_write_interrupt>
		return;
  800cac:	00004806 	br	800dd0 <playSoundISR+0x15c>
	}
	int len;
	unsigned int free = alt_up_audio_write_fifo_space(audio, ALT_UP_AUDIO_LEFT);
  800cb0:	d1270817 	ldw	r4,-25568(gp)
  800cb4:	000b883a 	mov	r5,zero
  800cb8:	0813e5c0 	call	813e5c <alt_up_audio_write_fifo_space>
  800cbc:	e0bffa15 	stw	r2,-24(fp)
	unsigned end = (unsigned)(audioVolumeBuffer) + (2 * audioFileWordLength);
  800cc0:	d0a70e17 	ldw	r2,-25544(gp)
  800cc4:	1085883a 	add	r2,r2,r2
  800cc8:	1007883a 	mov	r3,r2
  800ccc:	d0a70c17 	ldw	r2,-25552(gp)
  800cd0:	1885883a 	add	r2,r3,r2
  800cd4:	e0bff915 	stw	r2,-28(fp)
	if (free >= 1) {
  800cd8:	e0bffa17 	ldw	r2,-24(fp)
  800cdc:	1005003a 	cmpeq	r2,r2,zero
  800ce0:	1000391e 	bne	r2,zero,800dc8 <playSoundISR+0x154>
		if (((int)playCursor + free >= end) ||
  800ce4:	d0a71217 	ldw	r2,-25528(gp)
  800ce8:	1007883a 	mov	r3,r2
  800cec:	e0bffa17 	ldw	r2,-24(fp)
  800cf0:	1887883a 	add	r3,r3,r2
  800cf4:	e0bff917 	ldw	r2,-28(fp)
  800cf8:	1880052e 	bgeu	r3,r2,800d10 <playSoundISR+0x9c>
  800cfc:	d0e71117 	ldw	r3,-25532(gp)
  800d00:	e0bffa17 	ldw	r2,-24(fp)
  800d04:	1887883a 	add	r3,r3,r2
  800d08:	d0a70e17 	ldw	r2,-25544(gp)
  800d0c:	18801336 	bltu	r3,r2,800d5c <playSoundISR+0xe8>
			 (playedWords + free) >= audioFileWordLength) {
			// Last chunk to play
			len = end - (int)playCursor;
  800d10:	d0a71217 	ldw	r2,-25528(gp)
  800d14:	1007883a 	mov	r3,r2
  800d18:	e0bff917 	ldw	r2,-28(fp)
  800d1c:	10c5c83a 	sub	r2,r2,r3
  800d20:	e0bffb15 	stw	r2,-20(fp)
			if (status == THEME) {
  800d24:	d0a7130b 	ldhu	r2,-25524(gp)
  800d28:	10bfffcc 	andi	r2,r2,65535
  800d2c:	10a0001c 	xori	r2,r2,32768
  800d30:	10a00004 	addi	r2,r2,-32768
  800d34:	10800118 	cmpnei	r2,r2,4
  800d38:	1000051e 	bne	r2,zero,800d50 <playSoundISR+0xdc>
				loadTheme();
  800d3c:	080065c0 	call	80065c <loadTheme>
				playCursor = audioVolumeBuffer;
  800d40:	d0a70c17 	ldw	r2,-25552(gp)
  800d44:	d0a71215 	stw	r2,-25528(gp)
				playedWords = 0;
  800d48:	d0271115 	stw	zero,-25532(gp)
  800d4c:	00000506 	br	800d64 <playSoundISR+0xf0>
			} else {
				alt_up_audio_disable_write_interrupt(audio);
  800d50:	d1270817 	ldw	r4,-25568(gp)
  800d54:	0813bbc0 	call	813bbc <alt_up_audio_disable_write_interrupt>
	}
	int len;
	unsigned int free = alt_up_audio_write_fifo_space(audio, ALT_UP_AUDIO_LEFT);
	unsigned end = (unsigned)(audioVolumeBuffer) + (2 * audioFileWordLength);
	if (free >= 1) {
		if (((int)playCursor + free >= end) ||
  800d58:	00000206 	br	800d64 <playSoundISR+0xf0>
				playedWords = 0;
			} else {
				alt_up_audio_disable_write_interrupt(audio);
			}
		} else {
			len = free;
  800d5c:	e0bffa17 	ldw	r2,-24(fp)
  800d60:	e0bffb15 	stw	r2,-20(fp)
		}
		len = len > free ? free : len;
  800d64:	e0bffb17 	ldw	r2,-20(fp)
  800d68:	e0fffa17 	ldw	r3,-24(fp)
  800d6c:	e0ffff15 	stw	r3,-4(fp)
  800d70:	e0bffe15 	stw	r2,-8(fp)
  800d74:	e0bfff17 	ldw	r2,-4(fp)
  800d78:	e0fffe17 	ldw	r3,-8(fp)
  800d7c:	10c0022e 	bgeu	r2,r3,800d88 <playSoundISR+0x114>
  800d80:	e0bfff17 	ldw	r2,-4(fp)
  800d84:	e0bffe15 	stw	r2,-8(fp)
  800d88:	e0fffe17 	ldw	r3,-8(fp)
  800d8c:	e0fffb15 	stw	r3,-20(fp)
		playAudioMono(len);
  800d90:	e13ffb17 	ldw	r4,-20(fp)
  800d94:	080072c0 	call	80072c <playAudioMono>
		playedWords += len;
  800d98:	d0e71117 	ldw	r3,-25532(gp)
  800d9c:	e0bffb17 	ldw	r2,-20(fp)
  800da0:	1885883a 	add	r2,r3,r2
  800da4:	d0a71115 	stw	r2,-25532(gp)
		playCursor += len;
  800da8:	e0bffb17 	ldw	r2,-20(fp)
  800dac:	1085883a 	add	r2,r2,r2
  800db0:	1085883a 	add	r2,r2,r2
  800db4:	1007883a 	mov	r3,r2
  800db8:	d0a71217 	ldw	r2,-25528(gp)
  800dbc:	1885883a 	add	r2,r3,r2
  800dc0:	d0a71215 	stw	r2,-25528(gp)
  800dc4:	00000206 	br	800dd0 <playSoundISR+0x15c>
	} else {
		// Interrupt should not be triggered if there is no space
		alt_up_audio_disable_write_interrupt(audio);
  800dc8:	d1270817 	ldw	r4,-25568(gp)
  800dcc:	0813bbc0 	call	813bbc <alt_up_audio_disable_write_interrupt>
	}
}
  800dd0:	e037883a 	mov	sp,fp
  800dd4:	dfc00117 	ldw	ra,4(sp)
  800dd8:	df000017 	ldw	fp,0(sp)
  800ddc:	dec00204 	addi	sp,sp,8
  800de0:	f800283a 	ret

00800de4 <updateAudioWithVolume>:

void updateAudioWithVolume(char switchValues) {
  800de4:	defffd04 	addi	sp,sp,-12
  800de8:	dfc00215 	stw	ra,8(sp)
  800dec:	df000115 	stw	fp,4(sp)
  800df0:	df000104 	addi	fp,sp,4
  800df4:	e13fff05 	stb	r4,-4(fp)

	if (laser.mainBuffer != NULL && laser.volumeBuffer != NULL){
  800df8:	008020b4 	movhi	r2,130
  800dfc:	10819304 	addi	r2,r2,1612
  800e00:	10800017 	ldw	r2,0(r2)
  800e04:	1005003a 	cmpeq	r2,r2,zero
  800e08:	10000c1e 	bne	r2,zero,800e3c <updateAudioWithVolume+0x58>
  800e0c:	008020b4 	movhi	r2,130
  800e10:	10819304 	addi	r2,r2,1612
  800e14:	10800117 	ldw	r2,4(r2)
  800e18:	1005003a 	cmpeq	r2,r2,zero
  800e1c:	1000071e 	bne	r2,zero,800e3c <updateAudioWithVolume+0x58>
		changeBufferVolume(laser, switchValues);
  800e20:	e1ffff07 	ldb	r7,-4(fp)
  800e24:	008020b4 	movhi	r2,130
  800e28:	10819304 	addi	r2,r2,1612
  800e2c:	11000017 	ldw	r4,0(r2)
  800e30:	11400117 	ldw	r5,4(r2)
  800e34:	11800217 	ldw	r6,8(r2)
  800e38:	0800f1c0 	call	800f1c <changeBufferVolume>
	}
	if (playerDeath.mainBuffer != NULL && playerDeath.volumeBuffer != NULL){
  800e3c:	008020b4 	movhi	r2,130
  800e40:	10819904 	addi	r2,r2,1636
  800e44:	10800017 	ldw	r2,0(r2)
  800e48:	1005003a 	cmpeq	r2,r2,zero
  800e4c:	10000c1e 	bne	r2,zero,800e80 <updateAudioWithVolume+0x9c>
  800e50:	008020b4 	movhi	r2,130
  800e54:	10819904 	addi	r2,r2,1636
  800e58:	10800117 	ldw	r2,4(r2)
  800e5c:	1005003a 	cmpeq	r2,r2,zero
  800e60:	1000071e 	bne	r2,zero,800e80 <updateAudioWithVolume+0x9c>
		changeBufferVolume(playerDeath, switchValues);
  800e64:	e1ffff07 	ldb	r7,-4(fp)
  800e68:	008020b4 	movhi	r2,130
  800e6c:	10819904 	addi	r2,r2,1636
  800e70:	11000017 	ldw	r4,0(r2)
  800e74:	11400117 	ldw	r5,4(r2)
  800e78:	11800217 	ldw	r6,8(r2)
  800e7c:	0800f1c0 	call	800f1c <changeBufferVolume>
	}
	if (sharkDeath.mainBuffer != NULL && sharkDeath.volumeBuffer != NULL) {
  800e80:	008020b4 	movhi	r2,130
  800e84:	10819004 	addi	r2,r2,1600
  800e88:	10800017 	ldw	r2,0(r2)
  800e8c:	1005003a 	cmpeq	r2,r2,zero
  800e90:	10000c1e 	bne	r2,zero,800ec4 <updateAudioWithVolume+0xe0>
  800e94:	008020b4 	movhi	r2,130
  800e98:	10819004 	addi	r2,r2,1600
  800e9c:	10800117 	ldw	r2,4(r2)
  800ea0:	1005003a 	cmpeq	r2,r2,zero
  800ea4:	1000071e 	bne	r2,zero,800ec4 <updateAudioWithVolume+0xe0>
		changeBufferVolume(sharkDeath, switchValues);
  800ea8:	e1ffff07 	ldb	r7,-4(fp)
  800eac:	008020b4 	movhi	r2,130
  800eb0:	10819004 	addi	r2,r2,1600
  800eb4:	11000017 	ldw	r4,0(r2)
  800eb8:	11400117 	ldw	r5,4(r2)
  800ebc:	11800217 	ldw	r6,8(r2)
  800ec0:	0800f1c0 	call	800f1c <changeBufferVolume>
	}
	if (theme.mainBuffer != NULL && theme.volumeBuffer != NULL) {
  800ec4:	008020b4 	movhi	r2,130
  800ec8:	10819604 	addi	r2,r2,1624
  800ecc:	10800017 	ldw	r2,0(r2)
  800ed0:	1005003a 	cmpeq	r2,r2,zero
  800ed4:	10000c1e 	bne	r2,zero,800f08 <updateAudioWithVolume+0x124>
  800ed8:	008020b4 	movhi	r2,130
  800edc:	10819604 	addi	r2,r2,1624
  800ee0:	10800117 	ldw	r2,4(r2)
  800ee4:	1005003a 	cmpeq	r2,r2,zero
  800ee8:	1000071e 	bne	r2,zero,800f08 <updateAudioWithVolume+0x124>
		changeBufferVolume(theme, switchValues);
  800eec:	e1ffff07 	ldb	r7,-4(fp)
  800ef0:	008020b4 	movhi	r2,130
  800ef4:	10819604 	addi	r2,r2,1624
  800ef8:	11000017 	ldw	r4,0(r2)
  800efc:	11400117 	ldw	r5,4(r2)
  800f00:	11800217 	ldw	r6,8(r2)
  800f04:	0800f1c0 	call	800f1c <changeBufferVolume>
	}

	return;
}
  800f08:	e037883a 	mov	sp,fp
  800f0c:	dfc00117 	ldw	ra,4(sp)
  800f10:	df000017 	ldw	fp,0(sp)
  800f14:	dec00204 	addi	sp,sp,8
  800f18:	f800283a 	ret

00800f1c <changeBufferVolume>:

void changeBufferVolume(struct audioInfo currentAudioInfo, char switchValues) {
  800f1c:	defff704 	addi	sp,sp,-36
  800f20:	dfc00815 	stw	ra,32(sp)
  800f24:	df000715 	stw	fp,28(sp)
  800f28:	df000704 	addi	fp,sp,28
  800f2c:	e13ffc15 	stw	r4,-16(fp)
  800f30:	e17ffd15 	stw	r5,-12(fp)
  800f34:	e1bffe15 	stw	r6,-8(fp)
  800f38:	e1ffff05 	stb	r7,-4(fp)
	int i;
	short volumeKeys = switchValues & 0x0F;
  800f3c:	e0bfff03 	ldbu	r2,-4(fp)
  800f40:	10803fcc 	andi	r2,r2,255
  800f44:	108003cc 	andi	r2,r2,15
  800f48:	e0bffa0d 	sth	r2,-24(fp)
	if(volumeKeys == 0x00 || volumeKeys == 0x01) {
  800f4c:	e0bffa0f 	ldh	r2,-24(fp)
  800f50:	1005003a 	cmpeq	r2,r2,zero
  800f54:	1000031e 	bne	r2,zero,800f64 <changeBufferVolume+0x48>
  800f58:	e0bffa0f 	ldh	r2,-24(fp)
  800f5c:	10800058 	cmpnei	r2,r2,1
  800f60:	10001b1e 	bne	r2,zero,800fd0 <changeBufferVolume+0xb4>
		short shiftLength = 2 - volumeKeys;
  800f64:	e0fffa0b 	ldhu	r3,-24(fp)
  800f68:	00800084 	movi	r2,2
  800f6c:	10c5c83a 	sub	r2,r2,r3
  800f70:	e0bff98d 	sth	r2,-26(fp)
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  800f74:	e03ffb15 	stw	zero,-20(fp)
  800f78:	00001106 	br	800fc0 <changeBufferVolume+0xa4>
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) >> shiftLength;
  800f7c:	e0fffd17 	ldw	r3,-12(fp)
  800f80:	e0bffb17 	ldw	r2,-20(fp)
  800f84:	1085883a 	add	r2,r2,r2
  800f88:	1085883a 	add	r2,r2,r2
  800f8c:	1889883a 	add	r4,r3,r2
  800f90:	e0fffc17 	ldw	r3,-16(fp)
  800f94:	e0bffb17 	ldw	r2,-20(fp)
  800f98:	1085883a 	add	r2,r2,r2
  800f9c:	1085883a 	add	r2,r2,r2
  800fa0:	1885883a 	add	r2,r3,r2
  800fa4:	10c00017 	ldw	r3,0(r2)
  800fa8:	e0bff98f 	ldh	r2,-26(fp)
  800fac:	1884d83a 	srl	r2,r3,r2
  800fb0:	20800015 	stw	r2,0(r4)
void changeBufferVolume(struct audioInfo currentAudioInfo, char switchValues) {
	int i;
	short volumeKeys = switchValues & 0x0F;
	if(volumeKeys == 0x00 || volumeKeys == 0x01) {
		short shiftLength = 2 - volumeKeys;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  800fb4:	e0bffb17 	ldw	r2,-20(fp)
  800fb8:	10800044 	addi	r2,r2,1
  800fbc:	e0bffb15 	stw	r2,-20(fp)
  800fc0:	e0fffb17 	ldw	r3,-20(fp)
  800fc4:	e0bffe17 	ldw	r2,-8(fp)
  800fc8:	18bfec36 	bltu	r3,r2,800f7c <changeBufferVolume+0x60>
}

void changeBufferVolume(struct audioInfo currentAudioInfo, char switchValues) {
	int i;
	short volumeKeys = switchValues & 0x0F;
	if(volumeKeys == 0x00 || volumeKeys == 0x01) {
  800fcc:	00004806 	br	8010f0 <changeBufferVolume+0x1d4>
		short shiftLength = 2 - volumeKeys;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) >> shiftLength;
		}
	} else if(volumeKeys == 0x07 || volumeKeys == 0x0F) {
  800fd0:	e0bffa0f 	ldh	r2,-24(fp)
  800fd4:	108001e0 	cmpeqi	r2,r2,7
  800fd8:	1000031e 	bne	r2,zero,800fe8 <changeBufferVolume+0xcc>
  800fdc:	e0bffa0f 	ldh	r2,-24(fp)
  800fe0:	108003d8 	cmpnei	r2,r2,15
  800fe4:	10001c1e 	bne	r2,zero,801058 <changeBufferVolume+0x13c>
		short shiftLength = (volumeKeys % 7) + 1;
  800fe8:	e13ffa0f 	ldh	r4,-24(fp)
  800fec:	014001c4 	movi	r5,7
  800ff0:	0808e2c0 	call	808e2c <__modsi3>
  800ff4:	10800044 	addi	r2,r2,1
  800ff8:	e0bff90d 	sth	r2,-28(fp)
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  800ffc:	e03ffb15 	stw	zero,-20(fp)
  801000:	00001106 	br	801048 <changeBufferVolume+0x12c>
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) << shiftLength;
  801004:	e0fffd17 	ldw	r3,-12(fp)
  801008:	e0bffb17 	ldw	r2,-20(fp)
  80100c:	1085883a 	add	r2,r2,r2
  801010:	1085883a 	add	r2,r2,r2
  801014:	1889883a 	add	r4,r3,r2
  801018:	e0fffc17 	ldw	r3,-16(fp)
  80101c:	e0bffb17 	ldw	r2,-20(fp)
  801020:	1085883a 	add	r2,r2,r2
  801024:	1085883a 	add	r2,r2,r2
  801028:	1885883a 	add	r2,r3,r2
  80102c:	10c00017 	ldw	r3,0(r2)
  801030:	e0bff90f 	ldh	r2,-28(fp)
  801034:	1884983a 	sll	r2,r3,r2
  801038:	20800015 	stw	r2,0(r4)
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) >> shiftLength;
		}
	} else if(volumeKeys == 0x07 || volumeKeys == 0x0F) {
		short shiftLength = (volumeKeys % 7) + 1;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  80103c:	e0bffb17 	ldw	r2,-20(fp)
  801040:	10800044 	addi	r2,r2,1
  801044:	e0bffb15 	stw	r2,-20(fp)
  801048:	e0fffb17 	ldw	r3,-20(fp)
  80104c:	e0bffe17 	ldw	r2,-8(fp)
  801050:	18bfec36 	bltu	r3,r2,801004 <changeBufferVolume+0xe8>
	if(volumeKeys == 0x00 || volumeKeys == 0x01) {
		short shiftLength = 2 - volumeKeys;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) >> shiftLength;
		}
	} else if(volumeKeys == 0x07 || volumeKeys == 0x0F) {
  801054:	00002606 	br	8010f0 <changeBufferVolume+0x1d4>
		short shiftLength = (volumeKeys % 7) + 1;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) << shiftLength;
		}
	} else if(volumeKeys == 0x03) {
  801058:	e0bffa0f 	ldh	r2,-24(fp)
  80105c:	108000d8 	cmpnei	r2,r2,3
  801060:	1000151e 	bne	r2,zero,8010b8 <changeBufferVolume+0x19c>
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  801064:	e03ffb15 	stw	zero,-20(fp)
  801068:	00000f06 	br	8010a8 <changeBufferVolume+0x18c>
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i);
  80106c:	e0fffd17 	ldw	r3,-12(fp)
  801070:	e0bffb17 	ldw	r2,-20(fp)
  801074:	1085883a 	add	r2,r2,r2
  801078:	1085883a 	add	r2,r2,r2
  80107c:	1887883a 	add	r3,r3,r2
  801080:	e13ffc17 	ldw	r4,-16(fp)
  801084:	e0bffb17 	ldw	r2,-20(fp)
  801088:	1085883a 	add	r2,r2,r2
  80108c:	1085883a 	add	r2,r2,r2
  801090:	2085883a 	add	r2,r4,r2
  801094:	10800017 	ldw	r2,0(r2)
  801098:	18800015 	stw	r2,0(r3)
		short shiftLength = (volumeKeys % 7) + 1;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) << shiftLength;
		}
	} else if(volumeKeys == 0x03) {
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  80109c:	e0bffb17 	ldw	r2,-20(fp)
  8010a0:	10800044 	addi	r2,r2,1
  8010a4:	e0bffb15 	stw	r2,-20(fp)
  8010a8:	e0fffb17 	ldw	r3,-20(fp)
  8010ac:	e0bffe17 	ldw	r2,-8(fp)
  8010b0:	18bfee36 	bltu	r3,r2,80106c <changeBufferVolume+0x150>
  8010b4:	00000e06 	br	8010f0 <changeBufferVolume+0x1d4>
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i);
		}
	} else {
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  8010b8:	e03ffb15 	stw	zero,-20(fp)
  8010bc:	00000906 	br	8010e4 <changeBufferVolume+0x1c8>
			*(currentAudioInfo.volumeBuffer + i) = 0; //mute on all other combos
  8010c0:	e0fffd17 	ldw	r3,-12(fp)
  8010c4:	e0bffb17 	ldw	r2,-20(fp)
  8010c8:	1085883a 	add	r2,r2,r2
  8010cc:	1085883a 	add	r2,r2,r2
  8010d0:	1885883a 	add	r2,r3,r2
  8010d4:	10000015 	stw	zero,0(r2)
	} else if(volumeKeys == 0x03) {
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i);
		}
	} else {
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  8010d8:	e0bffb17 	ldw	r2,-20(fp)
  8010dc:	10800044 	addi	r2,r2,1
  8010e0:	e0bffb15 	stw	r2,-20(fp)
  8010e4:	e0fffb17 	ldw	r3,-20(fp)
  8010e8:	e0bffe17 	ldw	r2,-8(fp)
  8010ec:	18bff436 	bltu	r3,r2,8010c0 <changeBufferVolume+0x1a4>
			*(currentAudioInfo.volumeBuffer + i) = 0; //mute on all other combos
		}
	}

	return;
}
  8010f0:	e037883a 	mov	sp,fp
  8010f4:	dfc00117 	ldw	ra,4(sp)
  8010f8:	df000017 	ldw	fp,0(sp)
  8010fc:	dec00204 	addi	sp,sp,8
  801100:	f800283a 	ret

00801104 <parseBmp>:
#include "bmp.h"

void parseBmp (char *fileName, BMP *bmp) {
  801104:	defff304 	addi	sp,sp,-52
  801108:	dfc00c15 	stw	ra,48(sp)
  80110c:	df000b15 	stw	fp,44(sp)
  801110:	dc000a15 	stw	r16,40(sp)
  801114:	df000a04 	addi	fp,sp,40
  801118:	e13ffd15 	stw	r4,-12(fp)
  80111c:	e17ffe15 	stw	r5,-8(fp)
	int i, j, k;
	int pixels, rowOffset, offset;
	short int fh;

	fh = openFile(fileName);
  801120:	e13ffd17 	ldw	r4,-12(fp)
  801124:	0804a500 	call	804a50 <openFile>
  801128:	e0bff60d 	sth	r2,-40(fp)

	bmp->header.type = readWord(fh);
  80112c:	e13ff60f 	ldh	r4,-40(fp)
  801130:	0804af40 	call	804af4 <readWord>
  801134:	1007883a 	mov	r3,r2
  801138:	e0bffe17 	ldw	r2,-8(fp)
  80113c:	10c0000d 	sth	r3,0(r2)
	bmp->header.size = readDWord(fh);
  801140:	e13ff60f 	ldh	r4,-40(fp)
  801144:	0804b880 	call	804b88 <readDWord>
  801148:	1007883a 	mov	r3,r2
  80114c:	e0bffe17 	ldw	r2,-8(fp)
  801150:	10c00115 	stw	r3,4(r2)
	bmp->header.reserved1 = readWord(fh);
  801154:	e13ff60f 	ldh	r4,-40(fp)
  801158:	0804af40 	call	804af4 <readWord>
  80115c:	1007883a 	mov	r3,r2
  801160:	e0bffe17 	ldw	r2,-8(fp)
  801164:	10c0020d 	sth	r3,8(r2)
	bmp->header.reserved2 = readWord(fh);
  801168:	e13ff60f 	ldh	r4,-40(fp)
  80116c:	0804af40 	call	804af4 <readWord>
  801170:	1007883a 	mov	r3,r2
  801174:	e0bffe17 	ldw	r2,-8(fp)
  801178:	10c0028d 	sth	r3,10(r2)
	bmp->header.offset = readDWord(fh);
  80117c:	e13ff60f 	ldh	r4,-40(fp)
  801180:	0804b880 	call	804b88 <readDWord>
  801184:	1007883a 	mov	r3,r2
  801188:	e0bffe17 	ldw	r2,-8(fp)
  80118c:	10c00315 	stw	r3,12(r2)

	bmp->infoheader.size = readDWord(fh);
  801190:	e13ff60f 	ldh	r4,-40(fp)
  801194:	0804b880 	call	804b88 <readDWord>
  801198:	1007883a 	mov	r3,r2
  80119c:	e0bffe17 	ldw	r2,-8(fp)
  8011a0:	10c00415 	stw	r3,16(r2)
	bmp->infoheader.width = readDWord(fh);
  8011a4:	e13ff60f 	ldh	r4,-40(fp)
  8011a8:	0804b880 	call	804b88 <readDWord>
  8011ac:	1007883a 	mov	r3,r2
  8011b0:	e0bffe17 	ldw	r2,-8(fp)
  8011b4:	10c00515 	stw	r3,20(r2)
	bmp->infoheader.height = readDWord(fh);
  8011b8:	e13ff60f 	ldh	r4,-40(fp)
  8011bc:	0804b880 	call	804b88 <readDWord>
  8011c0:	1007883a 	mov	r3,r2
  8011c4:	e0bffe17 	ldw	r2,-8(fp)
  8011c8:	10c00615 	stw	r3,24(r2)
	bmp->infoheader.planes = readWord(fh);
  8011cc:	e13ff60f 	ldh	r4,-40(fp)
  8011d0:	0804af40 	call	804af4 <readWord>
  8011d4:	1007883a 	mov	r3,r2
  8011d8:	e0bffe17 	ldw	r2,-8(fp)
  8011dc:	10c0070d 	sth	r3,28(r2)
	bmp->infoheader.bits = readWord(fh);
  8011e0:	e13ff60f 	ldh	r4,-40(fp)
  8011e4:	0804af40 	call	804af4 <readWord>
  8011e8:	1007883a 	mov	r3,r2
  8011ec:	e0bffe17 	ldw	r2,-8(fp)
  8011f0:	10c0078d 	sth	r3,30(r2)
	bmp->infoheader.compression = readDWord(fh);
  8011f4:	e13ff60f 	ldh	r4,-40(fp)
  8011f8:	0804b880 	call	804b88 <readDWord>
  8011fc:	1007883a 	mov	r3,r2
  801200:	e0bffe17 	ldw	r2,-8(fp)
  801204:	10c00815 	stw	r3,32(r2)
	bmp->infoheader.imagesize = readDWord(fh);
  801208:	e13ff60f 	ldh	r4,-40(fp)
  80120c:	0804b880 	call	804b88 <readDWord>
  801210:	1007883a 	mov	r3,r2
  801214:	e0bffe17 	ldw	r2,-8(fp)
  801218:	10c00915 	stw	r3,36(r2)
	bmp->infoheader.xresolution = readDWord(fh);
  80121c:	e13ff60f 	ldh	r4,-40(fp)
  801220:	0804b880 	call	804b88 <readDWord>
  801224:	1007883a 	mov	r3,r2
  801228:	e0bffe17 	ldw	r2,-8(fp)
  80122c:	10c00a15 	stw	r3,40(r2)
	bmp->infoheader.yresolution = readDWord(fh);
  801230:	e13ff60f 	ldh	r4,-40(fp)
  801234:	0804b880 	call	804b88 <readDWord>
  801238:	1007883a 	mov	r3,r2
  80123c:	e0bffe17 	ldw	r2,-8(fp)
  801240:	10c00b15 	stw	r3,44(r2)
	bmp->infoheader.ncolors = readDWord(fh);
  801244:	e13ff60f 	ldh	r4,-40(fp)
  801248:	0804b880 	call	804b88 <readDWord>
  80124c:	1007883a 	mov	r3,r2
  801250:	e0bffe17 	ldw	r2,-8(fp)
  801254:	10c00c15 	stw	r3,48(r2)
	bmp->infoheader.importantcolors = readDWord(fh);
  801258:	e13ff60f 	ldh	r4,-40(fp)
  80125c:	0804b880 	call	804b88 <readDWord>
  801260:	1007883a 	mov	r3,r2
  801264:	e0bffe17 	ldw	r2,-8(fp)
  801268:	10c00d15 	stw	r3,52(r2)

	pixels = bmp->infoheader.width * bmp->infoheader.height;
  80126c:	e0bffe17 	ldw	r2,-8(fp)
  801270:	10c00517 	ldw	r3,20(r2)
  801274:	e0bffe17 	ldw	r2,-8(fp)
  801278:	10800617 	ldw	r2,24(r2)
  80127c:	1885383a 	mul	r2,r3,r2
  801280:	e0bff915 	stw	r2,-28(fp)
	bmp->rgb = malloc(BYTES_PER_PIXEL * pixels);
  801284:	e0fff917 	ldw	r3,-28(fp)
  801288:	1805883a 	mov	r2,r3
  80128c:	1085883a 	add	r2,r2,r2
  801290:	10c5883a 	add	r2,r2,r3
  801294:	1009883a 	mov	r4,r2
  801298:	08097140 	call	809714 <malloc>
  80129c:	1007883a 	mov	r3,r2
  8012a0:	e0bffe17 	ldw	r2,-8(fp)
  8012a4:	10c00e15 	stw	r3,56(r2)

	for(i = 0; i < bmp->infoheader.height; i++) {
  8012a8:	e03ffc15 	stw	zero,-16(fp)
  8012ac:	00009a06 	br	801518 <parseBmp+0x414>
		rowOffset = i*bmp->infoheader.width;
  8012b0:	e0bffe17 	ldw	r2,-8(fp)
  8012b4:	10c00517 	ldw	r3,20(r2)
  8012b8:	e0bffc17 	ldw	r2,-16(fp)
  8012bc:	1885383a 	mul	r2,r3,r2
  8012c0:	e0bff815 	stw	r2,-32(fp)
		for(j = 0; j < bmp->infoheader.width; j++ ){
  8012c4:	e03ffb15 	stw	zero,-20(fp)
  8012c8:	00006206 	br	801454 <parseBmp+0x350>
			offset = pixels - rowOffset - j - 1;
  8012cc:	e0fff917 	ldw	r3,-28(fp)
  8012d0:	e0bff817 	ldw	r2,-32(fp)
  8012d4:	1887c83a 	sub	r3,r3,r2
  8012d8:	e0bffb17 	ldw	r2,-20(fp)
  8012dc:	1885c83a 	sub	r2,r3,r2
  8012e0:	10bfffc4 	addi	r2,r2,-1
  8012e4:	e0bff715 	stw	r2,-36(fp)

			(bmp->rgb + offset)->b = (readByte(fh) & 0xF1) >> 3;
  8012e8:	e0bffe17 	ldw	r2,-8(fp)
  8012ec:	11000e17 	ldw	r4,56(r2)
  8012f0:	e0fff717 	ldw	r3,-36(fp)
  8012f4:	1805883a 	mov	r2,r3
  8012f8:	1085883a 	add	r2,r2,r2
  8012fc:	10c5883a 	add	r2,r2,r3
  801300:	20a1883a 	add	r16,r4,r2
  801304:	e13ff60f 	ldh	r4,-40(fp)
  801308:	0804ac00 	call	804ac0 <readByte>
  80130c:	10803fcc 	andi	r2,r2,255
  801310:	10803c4c 	andi	r2,r2,241
  801314:	1005d0fa 	srai	r2,r2,3
  801318:	80800085 	stb	r2,2(r16)
			(bmp->rgb + offset)->g = (readByte(fh) & 0xFC) >> 2;
  80131c:	e0bffe17 	ldw	r2,-8(fp)
  801320:	11000e17 	ldw	r4,56(r2)
  801324:	e0fff717 	ldw	r3,-36(fp)
  801328:	1805883a 	mov	r2,r3
  80132c:	1085883a 	add	r2,r2,r2
  801330:	10c5883a 	add	r2,r2,r3
  801334:	20a1883a 	add	r16,r4,r2
  801338:	e13ff60f 	ldh	r4,-40(fp)
  80133c:	0804ac00 	call	804ac0 <readByte>
  801340:	10803fcc 	andi	r2,r2,255
  801344:	10803f0c 	andi	r2,r2,252
  801348:	1005d0ba 	srai	r2,r2,2
  80134c:	80800045 	stb	r2,1(r16)
			(bmp->rgb + offset)->r = (readByte(fh) & 0xF1) >> 3;
  801350:	e0bffe17 	ldw	r2,-8(fp)
  801354:	11000e17 	ldw	r4,56(r2)
  801358:	e0fff717 	ldw	r3,-36(fp)
  80135c:	1805883a 	mov	r2,r3
  801360:	1085883a 	add	r2,r2,r2
  801364:	10c5883a 	add	r2,r2,r3
  801368:	20a1883a 	add	r16,r4,r2
  80136c:	e13ff60f 	ldh	r4,-40(fp)
  801370:	0804ac00 	call	804ac0 <readByte>
  801374:	10803fcc 	andi	r2,r2,255
  801378:	10803c4c 	andi	r2,r2,241
  80137c:	1005d0fa 	srai	r2,r2,3
  801380:	80800005 	stb	r2,0(r16)

			//Filter out the pink pixels
			if (((bmp->rgb + offset)->b == 0x1E) && ((bmp->rgb + offset)->g == 0) && ((bmp->rgb + offset)->r == 0x1E)) {
  801384:	e0bffe17 	ldw	r2,-8(fp)
  801388:	11000e17 	ldw	r4,56(r2)
  80138c:	e0fff717 	ldw	r3,-36(fp)
  801390:	1805883a 	mov	r2,r3
  801394:	1085883a 	add	r2,r2,r2
  801398:	10c5883a 	add	r2,r2,r3
  80139c:	2085883a 	add	r2,r4,r2
  8013a0:	10800083 	ldbu	r2,2(r2)
  8013a4:	10803fcc 	andi	r2,r2,255
  8013a8:	10800798 	cmpnei	r2,r2,30
  8013ac:	1000261e 	bne	r2,zero,801448 <parseBmp+0x344>
  8013b0:	e0bffe17 	ldw	r2,-8(fp)
  8013b4:	11000e17 	ldw	r4,56(r2)
  8013b8:	e0fff717 	ldw	r3,-36(fp)
  8013bc:	1805883a 	mov	r2,r3
  8013c0:	1085883a 	add	r2,r2,r2
  8013c4:	10c5883a 	add	r2,r2,r3
  8013c8:	2085883a 	add	r2,r4,r2
  8013cc:	10800043 	ldbu	r2,1(r2)
  8013d0:	10803fcc 	andi	r2,r2,255
  8013d4:	1004c03a 	cmpne	r2,r2,zero
  8013d8:	10001b1e 	bne	r2,zero,801448 <parseBmp+0x344>
  8013dc:	e0bffe17 	ldw	r2,-8(fp)
  8013e0:	11000e17 	ldw	r4,56(r2)
  8013e4:	e0fff717 	ldw	r3,-36(fp)
  8013e8:	1805883a 	mov	r2,r3
  8013ec:	1085883a 	add	r2,r2,r2
  8013f0:	10c5883a 	add	r2,r2,r3
  8013f4:	2085883a 	add	r2,r4,r2
  8013f8:	10800003 	ldbu	r2,0(r2)
  8013fc:	10803fcc 	andi	r2,r2,255
  801400:	10800798 	cmpnei	r2,r2,30
  801404:	1000101e 	bne	r2,zero,801448 <parseBmp+0x344>
				(bmp->rgb + offset)->b = 0x0;
  801408:	e0bffe17 	ldw	r2,-8(fp)
  80140c:	11000e17 	ldw	r4,56(r2)
  801410:	e0fff717 	ldw	r3,-36(fp)
  801414:	1805883a 	mov	r2,r3
  801418:	1085883a 	add	r2,r2,r2
  80141c:	10c5883a 	add	r2,r2,r3
  801420:	2085883a 	add	r2,r4,r2
  801424:	10000085 	stb	zero,2(r2)
				(bmp->rgb + offset)->r = 0x0;
  801428:	e0bffe17 	ldw	r2,-8(fp)
  80142c:	11000e17 	ldw	r4,56(r2)
  801430:	e0fff717 	ldw	r3,-36(fp)
  801434:	1805883a 	mov	r2,r3
  801438:	1085883a 	add	r2,r2,r2
  80143c:	10c5883a 	add	r2,r2,r3
  801440:	2085883a 	add	r2,r4,r2
  801444:	10000005 	stb	zero,0(r2)
	pixels = bmp->infoheader.width * bmp->infoheader.height;
	bmp->rgb = malloc(BYTES_PER_PIXEL * pixels);

	for(i = 0; i < bmp->infoheader.height; i++) {
		rowOffset = i*bmp->infoheader.width;
		for(j = 0; j < bmp->infoheader.width; j++ ){
  801448:	e0bffb17 	ldw	r2,-20(fp)
  80144c:	10800044 	addi	r2,r2,1
  801450:	e0bffb15 	stw	r2,-20(fp)
  801454:	e0bffe17 	ldw	r2,-8(fp)
  801458:	10c00517 	ldw	r3,20(r2)
  80145c:	e0bffb17 	ldw	r2,-20(fp)
  801460:	10ff9a16 	blt	r2,r3,8012cc <parseBmp+0x1c8>
				(bmp->rgb + offset)->b = 0x0;
				(bmp->rgb + offset)->r = 0x0;
			}
		}

		if((BYTES_PER_PIXEL*bmp->infoheader.width) % 4 != 0) {
  801464:	e0bffe17 	ldw	r2,-8(fp)
  801468:	10c00517 	ldw	r3,20(r2)
  80146c:	1805883a 	mov	r2,r3
  801470:	1085883a 	add	r2,r2,r2
  801474:	10c5883a 	add	r2,r2,r3
  801478:	108000cc 	andi	r2,r2,3
  80147c:	1005003a 	cmpeq	r2,r2,zero
  801480:	1000221e 	bne	r2,zero,80150c <parseBmp+0x408>
			for (k = 0; k <  (4 - ((BYTES_PER_PIXEL*bmp->infoheader.width) % 4)); k++) {
  801484:	e03ffa15 	stw	zero,-24(fp)
  801488:	00000506 	br	8014a0 <parseBmp+0x39c>
				readByte(fh);
  80148c:	e13ff60f 	ldh	r4,-40(fp)
  801490:	0804ac00 	call	804ac0 <readByte>
				(bmp->rgb + offset)->r = 0x0;
			}
		}

		if((BYTES_PER_PIXEL*bmp->infoheader.width) % 4 != 0) {
			for (k = 0; k <  (4 - ((BYTES_PER_PIXEL*bmp->infoheader.width) % 4)); k++) {
  801494:	e0bffa17 	ldw	r2,-24(fp)
  801498:	10800044 	addi	r2,r2,1
  80149c:	e0bffa15 	stw	r2,-24(fp)
  8014a0:	e0bffe17 	ldw	r2,-8(fp)
  8014a4:	10c00517 	ldw	r3,20(r2)
  8014a8:	1805883a 	mov	r2,r3
  8014ac:	1085883a 	add	r2,r2,r2
  8014b0:	10c7883a 	add	r3,r2,r3
  8014b4:	00a00034 	movhi	r2,32768
  8014b8:	108000c4 	addi	r2,r2,3
  8014bc:	1886703a 	and	r3,r3,r2
  8014c0:	e0ffff15 	stw	r3,-4(fp)
  8014c4:	e0ffff17 	ldw	r3,-4(fp)
  8014c8:	1804403a 	cmpge	r2,r3,zero
  8014cc:	10000a1e 	bne	r2,zero,8014f8 <parseBmp+0x3f4>
  8014d0:	e0bfff17 	ldw	r2,-4(fp)
  8014d4:	10bfffc4 	addi	r2,r2,-1
  8014d8:	e0bfff15 	stw	r2,-4(fp)
  8014dc:	00bfff04 	movi	r2,-4
  8014e0:	e0ffff17 	ldw	r3,-4(fp)
  8014e4:	1886b03a 	or	r3,r3,r2
  8014e8:	e0ffff15 	stw	r3,-4(fp)
  8014ec:	e0bfff17 	ldw	r2,-4(fp)
  8014f0:	10800044 	addi	r2,r2,1
  8014f4:	e0bfff15 	stw	r2,-4(fp)
  8014f8:	e0ffff17 	ldw	r3,-4(fp)
  8014fc:	00800104 	movi	r2,4
  801500:	10c7c83a 	sub	r3,r2,r3
  801504:	e0bffa17 	ldw	r2,-24(fp)
  801508:	10ffe016 	blt	r2,r3,80148c <parseBmp+0x388>
	bmp->infoheader.importantcolors = readDWord(fh);

	pixels = bmp->infoheader.width * bmp->infoheader.height;
	bmp->rgb = malloc(BYTES_PER_PIXEL * pixels);

	for(i = 0; i < bmp->infoheader.height; i++) {
  80150c:	e0bffc17 	ldw	r2,-16(fp)
  801510:	10800044 	addi	r2,r2,1
  801514:	e0bffc15 	stw	r2,-16(fp)
  801518:	e0bffe17 	ldw	r2,-8(fp)
  80151c:	10c00617 	ldw	r3,24(r2)
  801520:	e0bffc17 	ldw	r2,-16(fp)
  801524:	10ff6216 	blt	r2,r3,8012b0 <parseBmp+0x1ac>
				readByte(fh);
			}
		}
	}

	closeFile(fh);
  801528:	e13ff60f 	ldh	r4,-40(fp)
  80152c:	0804a900 	call	804a90 <closeFile>
}
  801530:	e037883a 	mov	sp,fp
  801534:	dfc00217 	ldw	ra,8(sp)
  801538:	df000117 	ldw	fp,4(sp)
  80153c:	dc000017 	ldw	r16,0(sp)
  801540:	dec00304 	addi	sp,sp,12
  801544:	f800283a 	ret

00801548 <parseBmps>:

void parseBmps() {
  801548:	defffe04 	addi	sp,sp,-8
  80154c:	dfc00115 	stw	ra,4(sp)
  801550:	df000015 	stw	fp,0(sp)
  801554:	d839883a 	mov	fp,sp
	splashBmp = malloc(sizeof(BMP));
  801558:	01000f04 	movi	r4,60
  80155c:	08097140 	call	809714 <malloc>
  801560:	d0a71815 	stw	r2,-25504(gp)
	sharkBmp = malloc(sizeof(BMP));
  801564:	01000f04 	movi	r4,60
  801568:	08097140 	call	809714 <malloc>
  80156c:	d0a71715 	stw	r2,-25508(gp)
	playerBmp = malloc(sizeof(BMP));
  801570:	01000f04 	movi	r4,60
  801574:	08097140 	call	809714 <malloc>
  801578:	d0a71a15 	stw	r2,-25496(gp)

	parseBmp("splash.bmp", splashBmp);
  80157c:	d1671817 	ldw	r5,-25504(gp)
  801580:	010020b4 	movhi	r4,130
  801584:	21301e04 	addi	r4,r4,-16264
  801588:	08011040 	call	801104 <parseBmp>
	parseBmp("shark.bmp", sharkBmp);
  80158c:	d1671717 	ldw	r5,-25508(gp)
  801590:	010020b4 	movhi	r4,130
  801594:	21302104 	addi	r4,r4,-16252
  801598:	08011040 	call	801104 <parseBmp>
	parseBmp("player.bmp", playerBmp);
  80159c:	d1671a17 	ldw	r5,-25496(gp)
  8015a0:	010020b4 	movhi	r4,130
  8015a4:	21302404 	addi	r4,r4,-16240
  8015a8:	08011040 	call	801104 <parseBmp>
}
  8015ac:	e037883a 	mov	sp,fp
  8015b0:	dfc00117 	ldw	ra,4(sp)
  8015b4:	df000017 	ldw	fp,0(sp)
  8015b8:	dec00204 	addi	sp,sp,8
  8015bc:	f800283a 	ret

008015c0 <freeBmps>:

void freeBmps(){
  8015c0:	defffe04 	addi	sp,sp,-8
  8015c4:	dfc00115 	stw	ra,4(sp)
  8015c8:	df000015 	stw	fp,0(sp)
  8015cc:	d839883a 	mov	fp,sp
	free(playerBmp->rgb);
  8015d0:	d0a71a17 	ldw	r2,-25496(gp)
  8015d4:	11000e17 	ldw	r4,56(r2)
  8015d8:	08097000 	call	809700 <free>
	free(sharkBmp->rgb);
  8015dc:	d0a71717 	ldw	r2,-25508(gp)
  8015e0:	11000e17 	ldw	r4,56(r2)
  8015e4:	08097000 	call	809700 <free>

	free(sharkBmp);
  8015e8:	d1271717 	ldw	r4,-25508(gp)
  8015ec:	08097000 	call	809700 <free>
	free(playerBmp);
  8015f0:	d1271a17 	ldw	r4,-25496(gp)
  8015f4:	08097000 	call	809700 <free>
}
  8015f8:	e037883a 	mov	sp,fp
  8015fc:	dfc00117 	ldw	ra,4(sp)
  801600:	df000017 	ldw	fp,0(sp)
  801604:	dec00204 	addi	sp,sp,8
  801608:	f800283a 	ret

0080160c <freeSplash>:

void freeSplash() {
  80160c:	defffe04 	addi	sp,sp,-8
  801610:	dfc00115 	stw	ra,4(sp)
  801614:	df000015 	stw	fp,0(sp)
  801618:	d839883a 	mov	fp,sp
	free(splashBmp->rgb);
  80161c:	d0a71817 	ldw	r2,-25504(gp)
  801620:	11000e17 	ldw	r4,56(r2)
  801624:	08097000 	call	809700 <free>
	free(splashBmp);
  801628:	d1271817 	ldw	r4,-25504(gp)
  80162c:	08097000 	call	809700 <free>
}
  801630:	e037883a 	mov	sp,fp
  801634:	dfc00117 	ldw	ra,4(sp)
  801638:	df000017 	ldw	fp,0(sp)
  80163c:	dec00204 	addi	sp,sp,8
  801640:	f800283a 	ret

00801644 <drawBmp>:


void drawBmp (BMP *bmp, int x, int y) {
  801644:	defff804 	addi	sp,sp,-32
  801648:	dfc00715 	stw	ra,28(sp)
  80164c:	df000615 	stw	fp,24(sp)
  801650:	df000604 	addi	fp,sp,24
  801654:	e13ffd15 	stw	r4,-12(fp)
  801658:	e17ffe15 	stw	r5,-8(fp)
  80165c:	e1bfff15 	stw	r6,-4(fp)
	int i,j;
	int color;

	for(i = 0; i < bmp->infoheader.height; i++) {
  801660:	e03ffc15 	stw	zero,-16(fp)
  801664:	00004b06 	br	801794 <drawBmp+0x150>
		for(j = 0; j < bmp->infoheader.width; j++){
  801668:	e03ffb15 	stw	zero,-20(fp)
  80166c:	00004206 	br	801778 <drawBmp+0x134>
			color = ((bmp->rgb + i*bmp->infoheader.width +j)->r << 11) | ((bmp->rgb + i*bmp->infoheader.width +j)->g << 5) | (bmp->rgb + i*bmp->infoheader.width +j)->b;
  801670:	e0bffd17 	ldw	r2,-12(fp)
  801674:	11000e17 	ldw	r4,56(r2)
  801678:	e0bffd17 	ldw	r2,-12(fp)
  80167c:	10c00517 	ldw	r3,20(r2)
  801680:	e0bffc17 	ldw	r2,-16(fp)
  801684:	1885383a 	mul	r2,r3,r2
  801688:	1007883a 	mov	r3,r2
  80168c:	e0bffb17 	ldw	r2,-20(fp)
  801690:	1887883a 	add	r3,r3,r2
  801694:	1805883a 	mov	r2,r3
  801698:	1085883a 	add	r2,r2,r2
  80169c:	10c5883a 	add	r2,r2,r3
  8016a0:	2085883a 	add	r2,r4,r2
  8016a4:	10800003 	ldbu	r2,0(r2)
  8016a8:	10803fcc 	andi	r2,r2,255
  8016ac:	100892fa 	slli	r4,r2,11
  8016b0:	e0bffd17 	ldw	r2,-12(fp)
  8016b4:	11400e17 	ldw	r5,56(r2)
  8016b8:	e0bffd17 	ldw	r2,-12(fp)
  8016bc:	10c00517 	ldw	r3,20(r2)
  8016c0:	e0bffc17 	ldw	r2,-16(fp)
  8016c4:	1885383a 	mul	r2,r3,r2
  8016c8:	1007883a 	mov	r3,r2
  8016cc:	e0bffb17 	ldw	r2,-20(fp)
  8016d0:	1887883a 	add	r3,r3,r2
  8016d4:	1805883a 	mov	r2,r3
  8016d8:	1085883a 	add	r2,r2,r2
  8016dc:	10c5883a 	add	r2,r2,r3
  8016e0:	2885883a 	add	r2,r5,r2
  8016e4:	10800043 	ldbu	r2,1(r2)
  8016e8:	10803fcc 	andi	r2,r2,255
  8016ec:	1004917a 	slli	r2,r2,5
  8016f0:	2088b03a 	or	r4,r4,r2
  8016f4:	e0bffd17 	ldw	r2,-12(fp)
  8016f8:	11400e17 	ldw	r5,56(r2)
  8016fc:	e0bffd17 	ldw	r2,-12(fp)
  801700:	10c00517 	ldw	r3,20(r2)
  801704:	e0bffc17 	ldw	r2,-16(fp)
  801708:	1885383a 	mul	r2,r3,r2
  80170c:	1007883a 	mov	r3,r2
  801710:	e0bffb17 	ldw	r2,-20(fp)
  801714:	1887883a 	add	r3,r3,r2
  801718:	1805883a 	mov	r2,r3
  80171c:	1085883a 	add	r2,r2,r2
  801720:	10c5883a 	add	r2,r2,r3
  801724:	2885883a 	add	r2,r5,r2
  801728:	10800083 	ldbu	r2,2(r2)
  80172c:	10803fcc 	andi	r2,r2,255
  801730:	2084b03a 	or	r2,r4,r2
  801734:	e0bffa15 	stw	r2,-24(fp)

			if(color == 0)
  801738:	e0bffa17 	ldw	r2,-24(fp)
  80173c:	1005003a 	cmpeq	r2,r2,zero
  801740:	10000a1e 	bne	r2,zero,80176c <drawBmp+0x128>
				continue;

			drawPixelFast(x + j, y + i, color);
  801744:	e0fffe17 	ldw	r3,-8(fp)
  801748:	e0bffb17 	ldw	r2,-20(fp)
  80174c:	1885883a 	add	r2,r3,r2
  801750:	1009883a 	mov	r4,r2
  801754:	e0ffff17 	ldw	r3,-4(fp)
  801758:	e0bffc17 	ldw	r2,-16(fp)
  80175c:	1885883a 	add	r2,r3,r2
  801760:	100b883a 	mov	r5,r2
  801764:	e1bffa17 	ldw	r6,-24(fp)
  801768:	08059b80 	call	8059b8 <drawPixelFast>
void drawBmp (BMP *bmp, int x, int y) {
	int i,j;
	int color;

	for(i = 0; i < bmp->infoheader.height; i++) {
		for(j = 0; j < bmp->infoheader.width; j++){
  80176c:	e0bffb17 	ldw	r2,-20(fp)
  801770:	10800044 	addi	r2,r2,1
  801774:	e0bffb15 	stw	r2,-20(fp)
  801778:	e0bffd17 	ldw	r2,-12(fp)
  80177c:	10c00517 	ldw	r3,20(r2)
  801780:	e0bffb17 	ldw	r2,-20(fp)
  801784:	10ffba16 	blt	r2,r3,801670 <drawBmp+0x2c>

void drawBmp (BMP *bmp, int x, int y) {
	int i,j;
	int color;

	for(i = 0; i < bmp->infoheader.height; i++) {
  801788:	e0bffc17 	ldw	r2,-16(fp)
  80178c:	10800044 	addi	r2,r2,1
  801790:	e0bffc15 	stw	r2,-16(fp)
  801794:	e0bffd17 	ldw	r2,-12(fp)
  801798:	10c00617 	ldw	r3,24(r2)
  80179c:	e0bffc17 	ldw	r2,-16(fp)
  8017a0:	10ffb116 	blt	r2,r3,801668 <drawBmp+0x24>
				continue;

			drawPixelFast(x + j, y + i, color);
		}
	}
}
  8017a4:	e037883a 	mov	sp,fp
  8017a8:	dfc00117 	ldw	ra,4(sp)
  8017ac:	df000017 	ldw	fp,0(sp)
  8017b0:	dec00204 	addi	sp,sp,8
  8017b4:	f800283a 	ret

008017b8 <eraseBmp>:

void eraseBmp (BMP *bmp, int x, int y) {
  8017b8:	defffa04 	addi	sp,sp,-24
  8017bc:	dfc00515 	stw	ra,20(sp)
  8017c0:	df000415 	stw	fp,16(sp)
  8017c4:	df000404 	addi	fp,sp,16
  8017c8:	e13ffd15 	stw	r4,-12(fp)
  8017cc:	e17ffe15 	stw	r5,-8(fp)
  8017d0:	e1bfff15 	stw	r6,-4(fp)
	drawBox(x, y, x  + bmp->infoheader.width, y + bmp->infoheader.height, 0);
  8017d4:	e0bffd17 	ldw	r2,-12(fp)
  8017d8:	10c00517 	ldw	r3,20(r2)
  8017dc:	e0bffe17 	ldw	r2,-8(fp)
  8017e0:	188d883a 	add	r6,r3,r2
  8017e4:	e0bffd17 	ldw	r2,-12(fp)
  8017e8:	10c00617 	ldw	r3,24(r2)
  8017ec:	e0bfff17 	ldw	r2,-4(fp)
  8017f0:	188f883a 	add	r7,r3,r2
  8017f4:	d8000015 	stw	zero,0(sp)
  8017f8:	e13ffe17 	ldw	r4,-8(fp)
  8017fc:	e17fff17 	ldw	r5,-4(fp)
  801800:	0805b480 	call	805b48 <drawBox>
}
  801804:	e037883a 	mov	sp,fp
  801808:	dfc00117 	ldw	ra,4(sp)
  80180c:	df000017 	ldw	fp,0(sp)
  801810:	dec00204 	addi	sp,sp,8
  801814:	f800283a 	ret

00801818 <initBullets>:
#include "bullet.h"

Bullet *playerBulletList = NULL;
Bullet *sharkBulletList = NULL;

void initBullets() {
  801818:	defffe04 	addi	sp,sp,-8
  80181c:	df000115 	stw	fp,4(sp)
  801820:	df000104 	addi	fp,sp,4
	int i = 0;
  801824:	e03fff15 	stw	zero,-4(fp)
	for (i = 0; i < NUM_BULLETS; i++) {
  801828:	e03fff15 	stw	zero,-4(fp)
  80182c:	00001906 	br	801894 <initBullets+0x7c>
		bulletArray[i].type = NOTACTIVE;
  801830:	e0bfff17 	ldw	r2,-4(fp)
  801834:	00c020b4 	movhi	r3,130
  801838:	18c1a004 	addi	r3,r3,1664
  80183c:	10800724 	muli	r2,r2,28
  801840:	10c5883a 	add	r2,r2,r3
  801844:	10c00404 	addi	r3,r2,16
  801848:	00800084 	movi	r2,2
  80184c:	18800015 	stw	r2,0(r3)
		bulletArray[i].next = NULL;
  801850:	e0bfff17 	ldw	r2,-4(fp)
  801854:	00c020b4 	movhi	r3,130
  801858:	18c1a004 	addi	r3,r3,1664
  80185c:	10800724 	muli	r2,r2,28
  801860:	10c5883a 	add	r2,r2,r3
  801864:	10800504 	addi	r2,r2,20
  801868:	10000015 	stw	zero,0(r2)
		bulletArray[i].prev = NULL;
  80186c:	e0bfff17 	ldw	r2,-4(fp)
  801870:	00c020b4 	movhi	r3,130
  801874:	18c1a004 	addi	r3,r3,1664
  801878:	10800724 	muli	r2,r2,28
  80187c:	10c5883a 	add	r2,r2,r3
  801880:	10800604 	addi	r2,r2,24
  801884:	10000015 	stw	zero,0(r2)
Bullet *playerBulletList = NULL;
Bullet *sharkBulletList = NULL;

void initBullets() {
	int i = 0;
	for (i = 0; i < NUM_BULLETS; i++) {
  801888:	e0bfff17 	ldw	r2,-4(fp)
  80188c:	10800044 	addi	r2,r2,1
  801890:	e0bfff15 	stw	r2,-4(fp)
  801894:	e0bfff17 	ldw	r2,-4(fp)
  801898:	10802010 	cmplti	r2,r2,128
  80189c:	103fe41e 	bne	r2,zero,801830 <initBullets+0x18>
		bulletArray[i].type = NOTACTIVE;
		bulletArray[i].next = NULL;
		bulletArray[i].prev = NULL;
	}
}
  8018a0:	e037883a 	mov	sp,fp
  8018a4:	df000017 	ldw	fp,0(sp)
  8018a8:	dec00104 	addi	sp,sp,4
  8018ac:	f800283a 	ret

008018b0 <createBullet>:

void createBullet(bullettype type, int x, int y) {
  8018b0:	defff904 	addi	sp,sp,-28
  8018b4:	dfc00615 	stw	ra,24(sp)
  8018b8:	df000515 	stw	fp,20(sp)
  8018bc:	df000504 	addi	fp,sp,20
  8018c0:	e13ffd15 	stw	r4,-12(fp)
  8018c4:	e17ffe15 	stw	r5,-8(fp)
  8018c8:	e1bfff15 	stw	r6,-4(fp)
	int index;
	Bullet *newBullet = NULL;
  8018cc:	e03ffb15 	stw	zero,-20(fp)
	for (index = 0; index < NUM_BULLETS; index++) {
  8018d0:	e03ffc15 	stw	zero,-16(fp)
  8018d4:	00002306 	br	801964 <createBullet+0xb4>
		if (bulletArray[index].type == NOTACTIVE)	{
  8018d8:	e0bffc17 	ldw	r2,-16(fp)
  8018dc:	00c020b4 	movhi	r3,130
  8018e0:	18c1a004 	addi	r3,r3,1664
  8018e4:	10800724 	muli	r2,r2,28
  8018e8:	10c5883a 	add	r2,r2,r3
  8018ec:	10800404 	addi	r2,r2,16
  8018f0:	10800017 	ldw	r2,0(r2)
  8018f4:	10800098 	cmpnei	r2,r2,2
  8018f8:	1000171e 	bne	r2,zero,801958 <createBullet+0xa8>
			newBullet = &(bulletArray[index]);
  8018fc:	e0bffc17 	ldw	r2,-16(fp)
  801900:	10800724 	muli	r2,r2,28
  801904:	1007883a 	mov	r3,r2
  801908:	008020b4 	movhi	r2,130
  80190c:	1081a004 	addi	r2,r2,1664
  801910:	1885883a 	add	r2,r3,r2
  801914:	e0bffb15 	stw	r2,-20(fp)
			newBullet->x = x;
  801918:	e0fffb17 	ldw	r3,-20(fp)
  80191c:	e0bffe17 	ldw	r2,-8(fp)
  801920:	18800015 	stw	r2,0(r3)
			newBullet->y = y;
  801924:	e0fffb17 	ldw	r3,-20(fp)
  801928:	e0bfff17 	ldw	r2,-4(fp)
  80192c:	18800215 	stw	r2,8(r3)
			newBullet->prevX = x;
  801930:	e0fffb17 	ldw	r3,-20(fp)
  801934:	e0bffe17 	ldw	r2,-8(fp)
  801938:	18800115 	stw	r2,4(r3)
			newBullet->prevY = y;
  80193c:	e0fffb17 	ldw	r3,-20(fp)
  801940:	e0bfff17 	ldw	r2,-4(fp)
  801944:	18800315 	stw	r2,12(r3)
			newBullet->type = type;
  801948:	e0fffb17 	ldw	r3,-20(fp)
  80194c:	e0bffd17 	ldw	r2,-12(fp)
  801950:	18800415 	stw	r2,16(r3)

			break;
  801954:	00000606 	br	801970 <createBullet+0xc0>
}

void createBullet(bullettype type, int x, int y) {
	int index;
	Bullet *newBullet = NULL;
	for (index = 0; index < NUM_BULLETS; index++) {
  801958:	e0bffc17 	ldw	r2,-16(fp)
  80195c:	10800044 	addi	r2,r2,1
  801960:	e0bffc15 	stw	r2,-16(fp)
  801964:	e0bffc17 	ldw	r2,-16(fp)
  801968:	10802010 	cmplti	r2,r2,128
  80196c:	103fda1e 	bne	r2,zero,8018d8 <createBullet+0x28>

			break;
		}
	}

	if (type == PLAYERBULLET) {
  801970:	e0bffd17 	ldw	r2,-12(fp)
  801974:	1004c03a 	cmpne	r2,r2,zero
  801978:	10000c1e 	bne	r2,zero,8019ac <createBullet+0xfc>
		if (playerBulletList != NULL) {
  80197c:	d0a71b17 	ldw	r2,-25492(gp)
  801980:	1005003a 	cmpeq	r2,r2,zero
  801984:	1000031e 	bne	r2,zero,801994 <createBullet+0xe4>
			playerBulletList->prev = newBullet;
  801988:	d0e71b17 	ldw	r3,-25492(gp)
  80198c:	e0bffb17 	ldw	r2,-20(fp)
  801990:	18800615 	stw	r2,24(r3)
		}
		newBullet->next = playerBulletList;
  801994:	d0a71b17 	ldw	r2,-25492(gp)
  801998:	e0fffb17 	ldw	r3,-20(fp)
  80199c:	18800515 	stw	r2,20(r3)
		playerBulletList = newBullet;
  8019a0:	e0bffb17 	ldw	r2,-20(fp)
  8019a4:	d0a71b15 	stw	r2,-25492(gp)
  8019a8:	00000b06 	br	8019d8 <createBullet+0x128>
	} else {
		if (sharkBulletList != NULL) {
  8019ac:	d0a71c17 	ldw	r2,-25488(gp)
  8019b0:	1005003a 	cmpeq	r2,r2,zero
  8019b4:	1000031e 	bne	r2,zero,8019c4 <createBullet+0x114>
			sharkBulletList->prev = newBullet;
  8019b8:	d0e71c17 	ldw	r3,-25488(gp)
  8019bc:	e0bffb17 	ldw	r2,-20(fp)
  8019c0:	18800615 	stw	r2,24(r3)
		}
		newBullet->next = sharkBulletList;
  8019c4:	d0a71c17 	ldw	r2,-25488(gp)
  8019c8:	e0fffb17 	ldw	r3,-20(fp)
  8019cc:	18800515 	stw	r2,20(r3)
		sharkBulletList = newBullet;
  8019d0:	e0bffb17 	ldw	r2,-20(fp)
  8019d4:	d0a71c15 	stw	r2,-25488(gp)
	}

	playLaser();
  8019d8:	0800b2c0 	call	800b2c <playLaser>
}
  8019dc:	e037883a 	mov	sp,fp
  8019e0:	dfc00117 	ldw	ra,4(sp)
  8019e4:	df000017 	ldw	fp,0(sp)
  8019e8:	dec00204 	addi	sp,sp,8
  8019ec:	f800283a 	ret

008019f0 <moveAllBullets>:

void moveAllBullets() {
  8019f0:	defffd04 	addi	sp,sp,-12
  8019f4:	dfc00215 	stw	ra,8(sp)
  8019f8:	df000115 	stw	fp,4(sp)
  8019fc:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801a00:	e03fff15 	stw	zero,-4(fp)
  801a04:	00005206 	br	801b50 <moveAllBullets+0x160>
		if (bulletArray[i].type == PLAYERBULLET) {
  801a08:	e0bfff17 	ldw	r2,-4(fp)
  801a0c:	00c020b4 	movhi	r3,130
  801a10:	18c1a004 	addi	r3,r3,1664
  801a14:	10800724 	muli	r2,r2,28
  801a18:	10c5883a 	add	r2,r2,r3
  801a1c:	10800404 	addi	r2,r2,16
  801a20:	10800017 	ldw	r2,0(r2)
  801a24:	1004c03a 	cmpne	r2,r2,zero
  801a28:	1000081e 	bne	r2,zero,801a4c <moveAllBullets+0x5c>
			moveBulletRight(&bulletArray[i]);
  801a2c:	e0bfff17 	ldw	r2,-4(fp)
  801a30:	10800724 	muli	r2,r2,28
  801a34:	1007883a 	mov	r3,r2
  801a38:	008020b4 	movhi	r2,130
  801a3c:	1081a004 	addi	r2,r2,1664
  801a40:	1889883a 	add	r4,r3,r2
  801a44:	0801e0c0 	call	801e0c <moveBulletRight>
  801a48:	00003e06 	br	801b44 <moveAllBullets+0x154>
		} else if (bulletArray[i].type == SHARKBULLET) {
  801a4c:	e0bfff17 	ldw	r2,-4(fp)
  801a50:	00c020b4 	movhi	r3,130
  801a54:	18c1a004 	addi	r3,r3,1664
  801a58:	10800724 	muli	r2,r2,28
  801a5c:	10c5883a 	add	r2,r2,r3
  801a60:	10800404 	addi	r2,r2,16
  801a64:	10800017 	ldw	r2,0(r2)
  801a68:	10800058 	cmpnei	r2,r2,1
  801a6c:	1000081e 	bne	r2,zero,801a90 <moveAllBullets+0xa0>
			moveBulletLeft(&bulletArray[i]);
  801a70:	e0bfff17 	ldw	r2,-4(fp)
  801a74:	10800724 	muli	r2,r2,28
  801a78:	1007883a 	mov	r3,r2
  801a7c:	008020b4 	movhi	r2,130
  801a80:	1081a004 	addi	r2,r2,1664
  801a84:	1889883a 	add	r4,r3,r2
  801a88:	0801f600 	call	801f60 <moveBulletLeft>
  801a8c:	00002d06 	br	801b44 <moveAllBullets+0x154>
		} else if (bulletArray[i].type == DELETED || bulletArray[i].type == ONEMORE) {
  801a90:	e0bfff17 	ldw	r2,-4(fp)
  801a94:	00c020b4 	movhi	r3,130
  801a98:	18c1a004 	addi	r3,r3,1664
  801a9c:	10800724 	muli	r2,r2,28
  801aa0:	10c5883a 	add	r2,r2,r3
  801aa4:	10800404 	addi	r2,r2,16
  801aa8:	10800017 	ldw	r2,0(r2)
  801aac:	108000e0 	cmpeqi	r2,r2,3
  801ab0:	1000091e 	bne	r2,zero,801ad8 <moveAllBullets+0xe8>
  801ab4:	e0bfff17 	ldw	r2,-4(fp)
  801ab8:	00c020b4 	movhi	r3,130
  801abc:	18c1a004 	addi	r3,r3,1664
  801ac0:	10800724 	muli	r2,r2,28
  801ac4:	10c5883a 	add	r2,r2,r3
  801ac8:	10800404 	addi	r2,r2,16
  801acc:	10800017 	ldw	r2,0(r2)
  801ad0:	10800118 	cmpnei	r2,r2,4
  801ad4:	10001b1e 	bne	r2,zero,801b44 <moveAllBullets+0x154>
			bulletArray[i].prevX = bulletArray[i].x;
  801ad8:	e17fff17 	ldw	r5,-4(fp)
  801adc:	e0bfff17 	ldw	r2,-4(fp)
  801ae0:	00c020b4 	movhi	r3,130
  801ae4:	18c1a004 	addi	r3,r3,1664
  801ae8:	10800724 	muli	r2,r2,28
  801aec:	10c5883a 	add	r2,r2,r3
  801af0:	11000017 	ldw	r4,0(r2)
  801af4:	00c020b4 	movhi	r3,130
  801af8:	18c1a004 	addi	r3,r3,1664
  801afc:	28800724 	muli	r2,r5,28
  801b00:	10c5883a 	add	r2,r2,r3
  801b04:	10800104 	addi	r2,r2,4
  801b08:	11000015 	stw	r4,0(r2)
			bulletArray[i].prevY = bulletArray[i].y;
  801b0c:	e17fff17 	ldw	r5,-4(fp)
  801b10:	e0bfff17 	ldw	r2,-4(fp)
  801b14:	00c020b4 	movhi	r3,130
  801b18:	18c1a004 	addi	r3,r3,1664
  801b1c:	10800724 	muli	r2,r2,28
  801b20:	10c5883a 	add	r2,r2,r3
  801b24:	10800204 	addi	r2,r2,8
  801b28:	11000017 	ldw	r4,0(r2)
  801b2c:	00c020b4 	movhi	r3,130
  801b30:	18c1a004 	addi	r3,r3,1664
  801b34:	28800724 	muli	r2,r5,28
  801b38:	10c5883a 	add	r2,r2,r3
  801b3c:	10800304 	addi	r2,r2,12
  801b40:	11000015 	stw	r4,0(r2)
	playLaser();
}

void moveAllBullets() {
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801b44:	e0bfff17 	ldw	r2,-4(fp)
  801b48:	10800044 	addi	r2,r2,1
  801b4c:	e0bfff15 	stw	r2,-4(fp)
  801b50:	e0bfff17 	ldw	r2,-4(fp)
  801b54:	10802010 	cmplti	r2,r2,128
  801b58:	103fab1e 	bne	r2,zero,801a08 <moveAllBullets+0x18>
		} else if (bulletArray[i].type == DELETED || bulletArray[i].type == ONEMORE) {
			bulletArray[i].prevX = bulletArray[i].x;
			bulletArray[i].prevY = bulletArray[i].y;
		}
	}
}
  801b5c:	e037883a 	mov	sp,fp
  801b60:	dfc00117 	ldw	ra,4(sp)
  801b64:	df000017 	ldw	fp,0(sp)
  801b68:	dec00204 	addi	sp,sp,8
  801b6c:	f800283a 	ret

00801b70 <drawAllBullets>:

void drawAllBullets() {
  801b70:	defffd04 	addi	sp,sp,-12
  801b74:	dfc00215 	stw	ra,8(sp)
  801b78:	df000115 	stw	fp,4(sp)
  801b7c:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801b80:	e03fff15 	stw	zero,-4(fp)
  801b84:	00001306 	br	801bd4 <drawAllBullets+0x64>
		if (bulletArray[i].type != NOTACTIVE) {
  801b88:	e0bfff17 	ldw	r2,-4(fp)
  801b8c:	00c020b4 	movhi	r3,130
  801b90:	18c1a004 	addi	r3,r3,1664
  801b94:	10800724 	muli	r2,r2,28
  801b98:	10c5883a 	add	r2,r2,r3
  801b9c:	10800404 	addi	r2,r2,16
  801ba0:	10800017 	ldw	r2,0(r2)
  801ba4:	108000a0 	cmpeqi	r2,r2,2
  801ba8:	1000071e 	bne	r2,zero,801bc8 <drawAllBullets+0x58>
			drawBullet(&bulletArray[i]);
  801bac:	e0bfff17 	ldw	r2,-4(fp)
  801bb0:	10800724 	muli	r2,r2,28
  801bb4:	1007883a 	mov	r3,r2
  801bb8:	008020b4 	movhi	r2,130
  801bbc:	1081a004 	addi	r2,r2,1664
  801bc0:	1889883a 	add	r4,r3,r2
  801bc4:	0801c780 	call	801c78 <drawBullet>
	}
}

void drawAllBullets() {
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801bc8:	e0bfff17 	ldw	r2,-4(fp)
  801bcc:	10800044 	addi	r2,r2,1
  801bd0:	e0bfff15 	stw	r2,-4(fp)
  801bd4:	e0bfff17 	ldw	r2,-4(fp)
  801bd8:	10802010 	cmplti	r2,r2,128
  801bdc:	103fea1e 	bne	r2,zero,801b88 <drawAllBullets+0x18>
		if (bulletArray[i].type != NOTACTIVE) {
			drawBullet(&bulletArray[i]);
		}
	}
}
  801be0:	e037883a 	mov	sp,fp
  801be4:	dfc00117 	ldw	ra,4(sp)
  801be8:	df000017 	ldw	fp,0(sp)
  801bec:	dec00204 	addi	sp,sp,8
  801bf0:	f800283a 	ret

00801bf4 <eraseAllBullets>:

void eraseAllBullets() {
  801bf4:	defffd04 	addi	sp,sp,-12
  801bf8:	dfc00215 	stw	ra,8(sp)
  801bfc:	df000115 	stw	fp,4(sp)
  801c00:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801c04:	e03fff15 	stw	zero,-4(fp)
  801c08:	00001306 	br	801c58 <eraseAllBullets+0x64>
		if (bulletArray[i].type != NOTACTIVE) {
  801c0c:	e0bfff17 	ldw	r2,-4(fp)
  801c10:	00c020b4 	movhi	r3,130
  801c14:	18c1a004 	addi	r3,r3,1664
  801c18:	10800724 	muli	r2,r2,28
  801c1c:	10c5883a 	add	r2,r2,r3
  801c20:	10800404 	addi	r2,r2,16
  801c24:	10800017 	ldw	r2,0(r2)
  801c28:	108000a0 	cmpeqi	r2,r2,2
  801c2c:	1000071e 	bne	r2,zero,801c4c <eraseAllBullets+0x58>
			eraseBullet(&bulletArray[i]);
  801c30:	e0bfff17 	ldw	r2,-4(fp)
  801c34:	10800724 	muli	r2,r2,28
  801c38:	1007883a 	mov	r3,r2
  801c3c:	008020b4 	movhi	r2,130
  801c40:	1081a004 	addi	r2,r2,1664
  801c44:	1889883a 	add	r4,r3,r2
  801c48:	0801d200 	call	801d20 <eraseBullet>
	}
}

void eraseAllBullets() {
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801c4c:	e0bfff17 	ldw	r2,-4(fp)
  801c50:	10800044 	addi	r2,r2,1
  801c54:	e0bfff15 	stw	r2,-4(fp)
  801c58:	e0bfff17 	ldw	r2,-4(fp)
  801c5c:	10802010 	cmplti	r2,r2,128
  801c60:	103fea1e 	bne	r2,zero,801c0c <eraseAllBullets+0x18>
		if (bulletArray[i].type != NOTACTIVE) {
			eraseBullet(&bulletArray[i]);
		}
	}
}
  801c64:	e037883a 	mov	sp,fp
  801c68:	dfc00117 	ldw	ra,4(sp)
  801c6c:	df000017 	ldw	fp,0(sp)
  801c70:	dec00204 	addi	sp,sp,8
  801c74:	f800283a 	ret

00801c78 <drawBullet>:

void drawBullet(Bullet *bullet) {
  801c78:	defffa04 	addi	sp,sp,-24
  801c7c:	dfc00515 	stw	ra,20(sp)
  801c80:	df000415 	stw	fp,16(sp)
  801c84:	dc400315 	stw	r17,12(sp)
  801c88:	dc000215 	stw	r16,8(sp)
  801c8c:	df000204 	addi	fp,sp,8
  801c90:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = 0; i < BULLET_LENGTH; i++) {
  801c94:	e03ffe15 	stw	zero,-8(fp)
  801c98:	00001706 	br	801cf8 <drawBullet+0x80>
		if (bullet != NULL) {
  801c9c:	e0bfff17 	ldw	r2,-4(fp)
  801ca0:	1005003a 	cmpeq	r2,r2,zero
  801ca4:	10000e1e 	bne	r2,zero,801ce0 <drawBullet+0x68>
			drawPixel(bullet->x + i, bullet->y, convert24BitRgbTo16(0xFF000C));
  801ca8:	e0bfff17 	ldw	r2,-4(fp)
  801cac:	10c00017 	ldw	r3,0(r2)
  801cb0:	e0bffe17 	ldw	r2,-8(fp)
  801cb4:	18a3883a 	add	r17,r3,r2
  801cb8:	e0bfff17 	ldw	r2,-4(fp)
  801cbc:	14000217 	ldw	r16,8(r2)
  801cc0:	01003ff4 	movhi	r4,255
  801cc4:	21000304 	addi	r4,r4,12
  801cc8:	0805ba80 	call	805ba8 <convert24BitRgbTo16>
  801ccc:	100d883a 	mov	r6,r2
  801cd0:	8809883a 	mov	r4,r17
  801cd4:	800b883a 	mov	r5,r16
  801cd8:	08059740 	call	805974 <drawPixel>
  801cdc:	00000306 	br	801cec <drawBullet+0x74>
		} else {
			printf("Attempt to draw null bullet.\n");
  801ce0:	010020b4 	movhi	r4,130
  801ce4:	21302704 	addi	r4,r4,-16228
  801ce8:	0809f800 	call	809f80 <puts>
	}
}

void drawBullet(Bullet *bullet) {
	int i;
	for (i = 0; i < BULLET_LENGTH; i++) {
  801cec:	e0bffe17 	ldw	r2,-8(fp)
  801cf0:	10800044 	addi	r2,r2,1
  801cf4:	e0bffe15 	stw	r2,-8(fp)
  801cf8:	e0bffe17 	ldw	r2,-8(fp)
  801cfc:	108000d0 	cmplti	r2,r2,3
  801d00:	103fe61e 	bne	r2,zero,801c9c <drawBullet+0x24>
			drawPixel(bullet->x + i, bullet->y, convert24BitRgbTo16(0xFF000C));
		} else {
			printf("Attempt to draw null bullet.\n");
		}
	}
}
  801d04:	e037883a 	mov	sp,fp
  801d08:	dfc00317 	ldw	ra,12(sp)
  801d0c:	df000217 	ldw	fp,8(sp)
  801d10:	dc400117 	ldw	r17,4(sp)
  801d14:	dc000017 	ldw	r16,0(sp)
  801d18:	dec00404 	addi	sp,sp,16
  801d1c:	f800283a 	ret

00801d20 <eraseBullet>:

void eraseBullet(Bullet *bullet) {
  801d20:	defffa04 	addi	sp,sp,-24
  801d24:	dfc00515 	stw	ra,20(sp)
  801d28:	df000415 	stw	fp,16(sp)
  801d2c:	df000404 	addi	fp,sp,16
  801d30:	e13ffd15 	stw	r4,-12(fp)
	int i;
	for (i = 0; i < BULLET_LENGTH; i++) {
  801d34:	e03ffc15 	stw	zero,-16(fp)
  801d38:	00002c06 	br	801dec <eraseBullet+0xcc>
		if (bullet != NULL) {
  801d3c:	e0bffd17 	ldw	r2,-12(fp)
  801d40:	1005003a 	cmpeq	r2,r2,zero
  801d44:	1000231e 	bne	r2,zero,801dd4 <eraseBullet+0xb4>
			drawPixel(bullet->prevX + i, bullet->prevY, 0x0000);
  801d48:	e0bffd17 	ldw	r2,-12(fp)
  801d4c:	10c00117 	ldw	r3,4(r2)
  801d50:	e0bffc17 	ldw	r2,-16(fp)
  801d54:	1889883a 	add	r4,r3,r2
  801d58:	e0bffd17 	ldw	r2,-12(fp)
  801d5c:	11400317 	ldw	r5,12(r2)
  801d60:	000d883a 	mov	r6,zero
  801d64:	08059740 	call	805974 <drawPixel>
			bullet->type = bullet->type == DELETED ? ONEMORE : bullet->type;
  801d68:	e0bffd17 	ldw	r2,-12(fp)
  801d6c:	10800417 	ldw	r2,16(r2)
  801d70:	108000e0 	cmpeqi	r2,r2,3
  801d74:	1000041e 	bne	r2,zero,801d88 <eraseBullet+0x68>
  801d78:	e0bffd17 	ldw	r2,-12(fp)
  801d7c:	10800417 	ldw	r2,16(r2)
  801d80:	e0bfff15 	stw	r2,-4(fp)
  801d84:	00000206 	br	801d90 <eraseBullet+0x70>
  801d88:	00800104 	movi	r2,4
  801d8c:	e0bfff15 	stw	r2,-4(fp)
  801d90:	e0bffd17 	ldw	r2,-12(fp)
  801d94:	e0ffff17 	ldw	r3,-4(fp)
  801d98:	10c00415 	stw	r3,16(r2)
			bullet->type = bullet->type == ONEMORE ? NOTACTIVE : bullet->type;
  801d9c:	e0bffd17 	ldw	r2,-12(fp)
  801da0:	10800417 	ldw	r2,16(r2)
  801da4:	10800120 	cmpeqi	r2,r2,4
  801da8:	1000041e 	bne	r2,zero,801dbc <eraseBullet+0x9c>
  801dac:	e0bffd17 	ldw	r2,-12(fp)
  801db0:	10800417 	ldw	r2,16(r2)
  801db4:	e0bffe15 	stw	r2,-8(fp)
  801db8:	00000206 	br	801dc4 <eraseBullet+0xa4>
  801dbc:	00800084 	movi	r2,2
  801dc0:	e0bffe15 	stw	r2,-8(fp)
  801dc4:	e0bffd17 	ldw	r2,-12(fp)
  801dc8:	e0fffe17 	ldw	r3,-8(fp)
  801dcc:	10c00415 	stw	r3,16(r2)
  801dd0:	00000306 	br	801de0 <eraseBullet+0xc0>
		} else {
			printf("Attempt to draw null bullet.\n");
  801dd4:	010020b4 	movhi	r4,130
  801dd8:	21302704 	addi	r4,r4,-16228
  801ddc:	0809f800 	call	809f80 <puts>
	}
}

void eraseBullet(Bullet *bullet) {
	int i;
	for (i = 0; i < BULLET_LENGTH; i++) {
  801de0:	e0bffc17 	ldw	r2,-16(fp)
  801de4:	10800044 	addi	r2,r2,1
  801de8:	e0bffc15 	stw	r2,-16(fp)
  801dec:	e0bffc17 	ldw	r2,-16(fp)
  801df0:	108000d0 	cmplti	r2,r2,3
  801df4:	103fd11e 	bne	r2,zero,801d3c <eraseBullet+0x1c>
			bullet->type = bullet->type == ONEMORE ? NOTACTIVE : bullet->type;
		} else {
			printf("Attempt to draw null bullet.\n");
		}
	}
}
  801df8:	e037883a 	mov	sp,fp
  801dfc:	dfc00117 	ldw	ra,4(sp)
  801e00:	df000017 	ldw	fp,0(sp)
  801e04:	dec00204 	addi	sp,sp,8
  801e08:	f800283a 	ret

00801e0c <moveBulletRight>:

void moveBulletRight(Bullet *bullet) {
  801e0c:	defffd04 	addi	sp,sp,-12
  801e10:	dfc00215 	stw	ra,8(sp)
  801e14:	df000115 	stw	fp,4(sp)
  801e18:	df000104 	addi	fp,sp,4
  801e1c:	e13fff15 	stw	r4,-4(fp)
	if (bullet == NULL) {
  801e20:	e0bfff17 	ldw	r2,-4(fp)
  801e24:	1004c03a 	cmpne	r2,r2,zero
  801e28:	1000041e 	bne	r2,zero,801e3c <moveBulletRight+0x30>
		printf("Attempt to move null bullet right.\n");
  801e2c:	010020b4 	movhi	r4,130
  801e30:	21302f04 	addi	r4,r4,-16196
  801e34:	0809f800 	call	809f80 <puts>
		return;
  801e38:	00001706 	br	801e98 <moveBulletRight+0x8c>
	}

	bullet->prevX = bullet->x;
  801e3c:	e0bfff17 	ldw	r2,-4(fp)
  801e40:	10c00017 	ldw	r3,0(r2)
  801e44:	e0bfff17 	ldw	r2,-4(fp)
  801e48:	10c00115 	stw	r3,4(r2)
	bullet->prevY = bullet->y;
  801e4c:	e0bfff17 	ldw	r2,-4(fp)
  801e50:	10c00217 	ldw	r3,8(r2)
  801e54:	e0bfff17 	ldw	r2,-4(fp)
  801e58:	10c00315 	stw	r3,12(r2)

	bullet->x = bullet->x + 2;
  801e5c:	e0bfff17 	ldw	r2,-4(fp)
  801e60:	10800017 	ldw	r2,0(r2)
  801e64:	10c00084 	addi	r3,r2,2
  801e68:	e0bfff17 	ldw	r2,-4(fp)
  801e6c:	10c00015 	stw	r3,0(r2)

	if ((bullet->x >= SCREEN_WIDTH) || (bullet->x <= -BULLET_LENGTH - 1)) {
  801e70:	e0bfff17 	ldw	r2,-4(fp)
  801e74:	10800017 	ldw	r2,0(r2)
  801e78:	10805508 	cmpgei	r2,r2,340
  801e7c:	1000041e 	bne	r2,zero,801e90 <moveBulletRight+0x84>
  801e80:	e0bfff17 	ldw	r2,-4(fp)
  801e84:	10800017 	ldw	r2,0(r2)
  801e88:	10bfff48 	cmpgei	r2,r2,-3
  801e8c:	1000021e 	bne	r2,zero,801e98 <moveBulletRight+0x8c>
		deleteBullet(bullet);
  801e90:	e13fff17 	ldw	r4,-4(fp)
  801e94:	0801eac0 	call	801eac <deleteBullet>
	}
}
  801e98:	e037883a 	mov	sp,fp
  801e9c:	dfc00117 	ldw	ra,4(sp)
  801ea0:	df000017 	ldw	fp,0(sp)
  801ea4:	dec00204 	addi	sp,sp,8
  801ea8:	f800283a 	ret

00801eac <deleteBullet>:

void deleteBullet(Bullet *bullet) {
  801eac:	defffb04 	addi	sp,sp,-20
  801eb0:	dfc00415 	stw	ra,16(sp)
  801eb4:	df000315 	stw	fp,12(sp)
  801eb8:	df000304 	addi	fp,sp,12
  801ebc:	e13fff15 	stw	r4,-4(fp)
	eraseBullet(bullet);
  801ec0:	e13fff17 	ldw	r4,-4(fp)
  801ec4:	0801d200 	call	801d20 <eraseBullet>
	bullet->type = DELETED;
  801ec8:	e0ffff17 	ldw	r3,-4(fp)
  801ecc:	008000c4 	movi	r2,3
  801ed0:	18800415 	stw	r2,16(r3)
	bullet->prevX = bullet->x;
  801ed4:	e0bfff17 	ldw	r2,-4(fp)
  801ed8:	10c00017 	ldw	r3,0(r2)
  801edc:	e0bfff17 	ldw	r2,-4(fp)
  801ee0:	10c00115 	stw	r3,4(r2)
	bullet->prevY = bullet->y;
  801ee4:	e0bfff17 	ldw	r2,-4(fp)
  801ee8:	10c00217 	ldw	r3,8(r2)
  801eec:	e0bfff17 	ldw	r2,-4(fp)
  801ef0:	10c00315 	stw	r3,12(r2)
	Bullet *nextBullet = bullet->next;
  801ef4:	e0bfff17 	ldw	r2,-4(fp)
  801ef8:	10800517 	ldw	r2,20(r2)
  801efc:	e0bffe15 	stw	r2,-8(fp)
	Bullet *prevBullet = bullet->prev;
  801f00:	e0bfff17 	ldw	r2,-4(fp)
  801f04:	10800617 	ldw	r2,24(r2)
  801f08:	e0bffd15 	stw	r2,-12(fp)
	bullet->next = NULL;
  801f0c:	e0bfff17 	ldw	r2,-4(fp)
  801f10:	10000515 	stw	zero,20(r2)
	bullet->prev = NULL;
  801f14:	e0bfff17 	ldw	r2,-4(fp)
  801f18:	10000615 	stw	zero,24(r2)

	if (nextBullet != NULL) {
  801f1c:	e0bffe17 	ldw	r2,-8(fp)
  801f20:	1005003a 	cmpeq	r2,r2,zero
  801f24:	1000031e 	bne	r2,zero,801f34 <deleteBullet+0x88>
		nextBullet->prev = prevBullet;
  801f28:	e0fffe17 	ldw	r3,-8(fp)
  801f2c:	e0bffd17 	ldw	r2,-12(fp)
  801f30:	18800615 	stw	r2,24(r3)
	}
	if (prevBullet != NULL) {
  801f34:	e0bffd17 	ldw	r2,-12(fp)
  801f38:	1005003a 	cmpeq	r2,r2,zero
  801f3c:	1000031e 	bne	r2,zero,801f4c <deleteBullet+0xa0>
		prevBullet->next = nextBullet;
  801f40:	e0fffd17 	ldw	r3,-12(fp)
  801f44:	e0bffe17 	ldw	r2,-8(fp)
  801f48:	18800515 	stw	r2,20(r3)
	}
}
  801f4c:	e037883a 	mov	sp,fp
  801f50:	dfc00117 	ldw	ra,4(sp)
  801f54:	df000017 	ldw	fp,0(sp)
  801f58:	dec00204 	addi	sp,sp,8
  801f5c:	f800283a 	ret

00801f60 <moveBulletLeft>:

void moveBulletLeft(Bullet *bullet) {
  801f60:	defffd04 	addi	sp,sp,-12
  801f64:	dfc00215 	stw	ra,8(sp)
  801f68:	df000115 	stw	fp,4(sp)
  801f6c:	df000104 	addi	fp,sp,4
  801f70:	e13fff15 	stw	r4,-4(fp)
	if (bullet == NULL) {
  801f74:	e0bfff17 	ldw	r2,-4(fp)
  801f78:	1004c03a 	cmpne	r2,r2,zero
  801f7c:	1000041e 	bne	r2,zero,801f90 <moveBulletLeft+0x30>
		printf("Attempt to move null bullet left.\n");
  801f80:	010020b4 	movhi	r4,130
  801f84:	21303804 	addi	r4,r4,-16160
  801f88:	0809f800 	call	809f80 <puts>
		return;
  801f8c:	00001706 	br	801fec <moveBulletLeft+0x8c>
	}

	bullet->prevX = bullet->x;
  801f90:	e0bfff17 	ldw	r2,-4(fp)
  801f94:	10c00017 	ldw	r3,0(r2)
  801f98:	e0bfff17 	ldw	r2,-4(fp)
  801f9c:	10c00115 	stw	r3,4(r2)
	bullet->prevY = bullet->y;
  801fa0:	e0bfff17 	ldw	r2,-4(fp)
  801fa4:	10c00217 	ldw	r3,8(r2)
  801fa8:	e0bfff17 	ldw	r2,-4(fp)
  801fac:	10c00315 	stw	r3,12(r2)

	bullet->x = bullet->x - 2;
  801fb0:	e0bfff17 	ldw	r2,-4(fp)
  801fb4:	10800017 	ldw	r2,0(r2)
  801fb8:	10ffff84 	addi	r3,r2,-2
  801fbc:	e0bfff17 	ldw	r2,-4(fp)
  801fc0:	10c00015 	stw	r3,0(r2)

	if ((bullet->x >= SCREEN_WIDTH) || (bullet->x <= -BULLET_LENGTH - 1)) {
  801fc4:	e0bfff17 	ldw	r2,-4(fp)
  801fc8:	10800017 	ldw	r2,0(r2)
  801fcc:	10805508 	cmpgei	r2,r2,340
  801fd0:	1000041e 	bne	r2,zero,801fe4 <moveBulletLeft+0x84>
  801fd4:	e0bfff17 	ldw	r2,-4(fp)
  801fd8:	10800017 	ldw	r2,0(r2)
  801fdc:	10bfff48 	cmpgei	r2,r2,-3
  801fe0:	1000021e 	bne	r2,zero,801fec <moveBulletLeft+0x8c>
		deleteBullet(bullet);
  801fe4:	e13fff17 	ldw	r4,-4(fp)
  801fe8:	0801eac0 	call	801eac <deleteBullet>
	}
}
  801fec:	e037883a 	mov	sp,fp
  801ff0:	dfc00117 	ldw	ra,4(sp)
  801ff4:	df000017 	ldw	fp,0(sp)
  801ff8:	dec00204 	addi	sp,sp,8
  801ffc:	f800283a 	ret

00802000 <initCollision>:
#define FALSE 0

int relativeSharkHit[SHARK_WIDTH][SHARK_HEIGHT];
int relativePlayerHit[PLAYER_WIDTH][PLAYER_HEIGHT];

void initCollision(void) {
  802000:	defffa04 	addi	sp,sp,-24
  802004:	df000515 	stw	fp,20(sp)
  802008:	df000504 	addi	fp,sp,20
	RGB *colourArray;
	RGB *cursor;
	colourArray = playerBmp->rgb;
  80200c:	d0a71a17 	ldw	r2,-25496(gp)
  802010:	10800e17 	ldw	r2,56(r2)
  802014:	e0bfff15 	stw	r2,-4(fp)
	int x, y;
	int yOffset;

	for (y = 0; y < SHARK_HEIGHT; y++) {
  802018:	e03ffc15 	stw	zero,-16(fp)
  80201c:	00003e06 	br	802118 <initCollision+0x118>
		yOffset = SHARK_WIDTH * y;
  802020:	e0bffc17 	ldw	r2,-16(fp)
  802024:	10800964 	muli	r2,r2,37
  802028:	e0bffb15 	stw	r2,-20(fp)
		for (x = 0; x < SHARK_WIDTH; x++) {
  80202c:	e03ffd15 	stw	zero,-12(fp)
  802030:	00003306 	br	802100 <initCollision+0x100>
			cursor = &colourArray[yOffset + x];
  802034:	e0fffb17 	ldw	r3,-20(fp)
  802038:	e0bffd17 	ldw	r2,-12(fp)
  80203c:	1885883a 	add	r2,r3,r2
  802040:	1007883a 	mov	r3,r2
  802044:	1805883a 	mov	r2,r3
  802048:	1085883a 	add	r2,r2,r2
  80204c:	10c5883a 	add	r2,r2,r3
  802050:	1007883a 	mov	r3,r2
  802054:	e0bfff17 	ldw	r2,-4(fp)
  802058:	1885883a 	add	r2,r3,r2
  80205c:	e0bffe15 	stw	r2,-8(fp)
			if (cursor->r > 0 &&
  802060:	e0bffe17 	ldw	r2,-8(fp)
  802064:	10800003 	ldbu	r2,0(r2)
  802068:	10803fcc 	andi	r2,r2,255
  80206c:	1005003a 	cmpeq	r2,r2,zero
  802070:	1000161e 	bne	r2,zero,8020cc <initCollision+0xcc>
  802074:	e0bffe17 	ldw	r2,-8(fp)
  802078:	10800043 	ldbu	r2,1(r2)
  80207c:	10803fcc 	andi	r2,r2,255
  802080:	1005003a 	cmpeq	r2,r2,zero
  802084:	1000111e 	bne	r2,zero,8020cc <initCollision+0xcc>
  802088:	e0bffe17 	ldw	r2,-8(fp)
  80208c:	10800083 	ldbu	r2,2(r2)
  802090:	10803fcc 	andi	r2,r2,255
  802094:	1005003a 	cmpeq	r2,r2,zero
  802098:	10000c1e 	bne	r2,zero,8020cc <initCollision+0xcc>
				cursor->g > 0 &&
				cursor->b > 0) {
				relativeSharkHit[x][y] = TRUE;
  80209c:	e0bffd17 	ldw	r2,-12(fp)
  8020a0:	e0fffc17 	ldw	r3,-16(fp)
  8020a4:	010020b4 	movhi	r4,130
  8020a8:	21052004 	addi	r4,r4,5248
  8020ac:	10800524 	muli	r2,r2,20
  8020b0:	10c5883a 	add	r2,r2,r3
  8020b4:	1085883a 	add	r2,r2,r2
  8020b8:	1085883a 	add	r2,r2,r2
  8020bc:	1107883a 	add	r3,r2,r4
  8020c0:	00800044 	movi	r2,1
  8020c4:	18800015 	stw	r2,0(r3)

	for (y = 0; y < SHARK_HEIGHT; y++) {
		yOffset = SHARK_WIDTH * y;
		for (x = 0; x < SHARK_WIDTH; x++) {
			cursor = &colourArray[yOffset + x];
			if (cursor->r > 0 &&
  8020c8:	00000a06 	br	8020f4 <initCollision+0xf4>
				cursor->g > 0 &&
				cursor->b > 0) {
				relativeSharkHit[x][y] = TRUE;
			} else {
				relativeSharkHit[x][y] = FALSE;
  8020cc:	e0bffd17 	ldw	r2,-12(fp)
  8020d0:	e0fffc17 	ldw	r3,-16(fp)
  8020d4:	010020b4 	movhi	r4,130
  8020d8:	21052004 	addi	r4,r4,5248
  8020dc:	10800524 	muli	r2,r2,20
  8020e0:	10c5883a 	add	r2,r2,r3
  8020e4:	1085883a 	add	r2,r2,r2
  8020e8:	1085883a 	add	r2,r2,r2
  8020ec:	1105883a 	add	r2,r2,r4
  8020f0:	10000015 	stw	zero,0(r2)
	int x, y;
	int yOffset;

	for (y = 0; y < SHARK_HEIGHT; y++) {
		yOffset = SHARK_WIDTH * y;
		for (x = 0; x < SHARK_WIDTH; x++) {
  8020f4:	e0bffd17 	ldw	r2,-12(fp)
  8020f8:	10800044 	addi	r2,r2,1
  8020fc:	e0bffd15 	stw	r2,-12(fp)
  802100:	e0bffd17 	ldw	r2,-12(fp)
  802104:	10800950 	cmplti	r2,r2,37
  802108:	103fca1e 	bne	r2,zero,802034 <initCollision+0x34>
	RGB *cursor;
	colourArray = playerBmp->rgb;
	int x, y;
	int yOffset;

	for (y = 0; y < SHARK_HEIGHT; y++) {
  80210c:	e0bffc17 	ldw	r2,-16(fp)
  802110:	10800044 	addi	r2,r2,1
  802114:	e0bffc15 	stw	r2,-16(fp)
  802118:	e0bffc17 	ldw	r2,-16(fp)
  80211c:	10800510 	cmplti	r2,r2,20
  802120:	103fbf1e 	bne	r2,zero,802020 <initCollision+0x20>
				relativeSharkHit[x][y] = FALSE;
			}
		}
	}

	for (y = 0; y < PLAYER_HEIGHT; y++) {
  802124:	e03ffc15 	stw	zero,-16(fp)
  802128:	00005706 	br	802288 <initCollision+0x288>
		yOffset = PLAYER_WIDTH * y;
  80212c:	e0bffc17 	ldw	r2,-16(fp)
  802130:	10800724 	muli	r2,r2,28
  802134:	e0bffb15 	stw	r2,-20(fp)
		for (x = 0; x < PLAYER_WIDTH; x++) {
  802138:	e03ffd15 	stw	zero,-12(fp)
  80213c:	00004c06 	br	802270 <initCollision+0x270>
			cursor = &colourArray[yOffset + x];
  802140:	e0fffb17 	ldw	r3,-20(fp)
  802144:	e0bffd17 	ldw	r2,-12(fp)
  802148:	1885883a 	add	r2,r3,r2
  80214c:	1007883a 	mov	r3,r2
  802150:	1805883a 	mov	r2,r3
  802154:	1085883a 	add	r2,r2,r2
  802158:	10c5883a 	add	r2,r2,r3
  80215c:	1007883a 	mov	r3,r2
  802160:	e0bfff17 	ldw	r2,-4(fp)
  802164:	1885883a 	add	r2,r3,r2
  802168:	e0bffe15 	stw	r2,-8(fp)
			//printf("r: 0x%x; g: 0x%x; b: 0x%x\n", cursor->r, cursor->g, cursor->b);
			if (!(cursor->r == 0xff && cursor->b == 0xff) &&
  80216c:	e0bffe17 	ldw	r2,-8(fp)
  802170:	10800003 	ldbu	r2,0(r2)
  802174:	10803fcc 	andi	r2,r2,255
  802178:	10803fd8 	cmpnei	r2,r2,255
  80217c:	1000051e 	bne	r2,zero,802194 <initCollision+0x194>
  802180:	e0bffe17 	ldw	r2,-8(fp)
  802184:	10800083 	ldbu	r2,2(r2)
  802188:	10803fcc 	andi	r2,r2,255
  80218c:	10803fe0 	cmpeqi	r2,r2,255
  802190:	10002a1e 	bne	r2,zero,80223c <initCollision+0x23c>
  802194:	e0bffe17 	ldw	r2,-8(fp)
  802198:	10800003 	ldbu	r2,0(r2)
  80219c:	10803fcc 	andi	r2,r2,255
  8021a0:	1004c03a 	cmpne	r2,r2,zero
  8021a4:	10000a1e 	bne	r2,zero,8021d0 <initCollision+0x1d0>
  8021a8:	e0bffe17 	ldw	r2,-8(fp)
  8021ac:	10800083 	ldbu	r2,2(r2)
  8021b0:	10803fcc 	andi	r2,r2,255
  8021b4:	1004c03a 	cmpne	r2,r2,zero
  8021b8:	1000051e 	bne	r2,zero,8021d0 <initCollision+0x1d0>
  8021bc:	e0bffe17 	ldw	r2,-8(fp)
  8021c0:	10800043 	ldbu	r2,1(r2)
  8021c4:	10803fcc 	andi	r2,r2,255
  8021c8:	1005003a 	cmpeq	r2,r2,zero
  8021cc:	10001b1e 	bne	r2,zero,80223c <initCollision+0x23c>
  8021d0:	e0bffe17 	ldw	r2,-8(fp)
  8021d4:	10800003 	ldbu	r2,0(r2)
  8021d8:	10803fcc 	andi	r2,r2,255
  8021dc:	108001a8 	cmpgeui	r2,r2,6
  8021e0:	10000a1e 	bne	r2,zero,80220c <initCollision+0x20c>
  8021e4:	e0bffe17 	ldw	r2,-8(fp)
  8021e8:	10800083 	ldbu	r2,2(r2)
  8021ec:	10803fcc 	andi	r2,r2,255
  8021f0:	108001a8 	cmpgeui	r2,r2,6
  8021f4:	1000051e 	bne	r2,zero,80220c <initCollision+0x20c>
  8021f8:	e0bffe17 	ldw	r2,-8(fp)
  8021fc:	10800043 	ldbu	r2,1(r2)
  802200:	10803fcc 	andi	r2,r2,255
  802204:	108001b0 	cmpltui	r2,r2,6
  802208:	10000c1e 	bne	r2,zero,80223c <initCollision+0x23c>
				!(cursor->r == 0x00 && cursor->b == 0x00 && cursor->g == 0x00) &&
				 (cursor->r >  0x05 || cursor->b >  0x05 || cursor->g >  0x05)) {
				relativePlayerHit[x][y] = TRUE;
  80220c:	e0bffd17 	ldw	r2,-12(fp)
  802210:	e0fffc17 	ldw	r3,-16(fp)
  802214:	010020b4 	movhi	r4,130
  802218:	21080404 	addi	r4,r4,8208
  80221c:	108006e4 	muli	r2,r2,27
  802220:	10c5883a 	add	r2,r2,r3
  802224:	1085883a 	add	r2,r2,r2
  802228:	1085883a 	add	r2,r2,r2
  80222c:	1107883a 	add	r3,r2,r4
  802230:	00800044 	movi	r2,1
  802234:	18800015 	stw	r2,0(r3)
	for (y = 0; y < PLAYER_HEIGHT; y++) {
		yOffset = PLAYER_WIDTH * y;
		for (x = 0; x < PLAYER_WIDTH; x++) {
			cursor = &colourArray[yOffset + x];
			//printf("r: 0x%x; g: 0x%x; b: 0x%x\n", cursor->r, cursor->g, cursor->b);
			if (!(cursor->r == 0xff && cursor->b == 0xff) &&
  802238:	00000a06 	br	802264 <initCollision+0x264>
				!(cursor->r == 0x00 && cursor->b == 0x00 && cursor->g == 0x00) &&
				 (cursor->r >  0x05 || cursor->b >  0x05 || cursor->g >  0x05)) {
				relativePlayerHit[x][y] = TRUE;
			} else {
				relativePlayerHit[x][y] = FALSE;
  80223c:	e0bffd17 	ldw	r2,-12(fp)
  802240:	e0fffc17 	ldw	r3,-16(fp)
  802244:	010020b4 	movhi	r4,130
  802248:	21080404 	addi	r4,r4,8208
  80224c:	108006e4 	muli	r2,r2,27
  802250:	10c5883a 	add	r2,r2,r3
  802254:	1085883a 	add	r2,r2,r2
  802258:	1085883a 	add	r2,r2,r2
  80225c:	1105883a 	add	r2,r2,r4
  802260:	10000015 	stw	zero,0(r2)
		}
	}

	for (y = 0; y < PLAYER_HEIGHT; y++) {
		yOffset = PLAYER_WIDTH * y;
		for (x = 0; x < PLAYER_WIDTH; x++) {
  802264:	e0bffd17 	ldw	r2,-12(fp)
  802268:	10800044 	addi	r2,r2,1
  80226c:	e0bffd15 	stw	r2,-12(fp)
  802270:	e0bffd17 	ldw	r2,-12(fp)
  802274:	10800710 	cmplti	r2,r2,28
  802278:	103fb11e 	bne	r2,zero,802140 <initCollision+0x140>
				relativeSharkHit[x][y] = FALSE;
			}
		}
	}

	for (y = 0; y < PLAYER_HEIGHT; y++) {
  80227c:	e0bffc17 	ldw	r2,-16(fp)
  802280:	10800044 	addi	r2,r2,1
  802284:	e0bffc15 	stw	r2,-16(fp)
  802288:	e0bffc17 	ldw	r2,-16(fp)
  80228c:	108006d0 	cmplti	r2,r2,27
  802290:	103fa61e 	bne	r2,zero,80212c <initCollision+0x12c>
			} else {
				relativePlayerHit[x][y] = FALSE;
			}
		}
	}
}
  802294:	e037883a 	mov	sp,fp
  802298:	df000017 	ldw	fp,0(sp)
  80229c:	dec00104 	addi	sp,sp,4
  8022a0:	f800283a 	ret

008022a4 <findSharkIfHit>:

Shark *findSharkIfHit(Bullet *bullet) {
  8022a4:	defffa04 	addi	sp,sp,-24
  8022a8:	dfc00515 	stw	ra,20(sp)
  8022ac:	df000415 	stw	fp,16(sp)
  8022b0:	df000404 	addi	fp,sp,16
  8022b4:	e13ffe15 	stw	r4,-8(fp)
	Shark *cursor = sharkList;
  8022b8:	008020b4 	movhi	r2,130
  8022bc:	1080e804 	addi	r2,r2,928
  8022c0:	10800017 	ldw	r2,0(r2)
  8022c4:	e0bffd15 	stw	r2,-12(fp)
	int i = 0;
  8022c8:	e03ffc15 	stw	zero,-16(fp)
	while (cursor != NULL
  8022cc:	00000e06 	br	802308 <findSharkIfHit+0x64>
			&& i < sharkCount) {
		if (isBulletCollidingWithShark(cursor, bullet) == TRUE) {
  8022d0:	e13ffd17 	ldw	r4,-12(fp)
  8022d4:	e17ffe17 	ldw	r5,-8(fp)
  8022d8:	08023440 	call	802344 <isBulletCollidingWithShark>
  8022dc:	10800058 	cmpnei	r2,r2,1
  8022e0:	1000031e 	bne	r2,zero,8022f0 <findSharkIfHit+0x4c>
			return cursor;
  8022e4:	e0bffd17 	ldw	r2,-12(fp)
  8022e8:	e0bfff15 	stw	r2,-4(fp)
  8022ec:	00000f06 	br	80232c <findSharkIfHit+0x88>
		}
		cursor = cursor->next;
  8022f0:	e0bffd17 	ldw	r2,-12(fp)
  8022f4:	10800617 	ldw	r2,24(r2)
  8022f8:	e0bffd15 	stw	r2,-12(fp)
		i++;
  8022fc:	e0bffc17 	ldw	r2,-16(fp)
  802300:	10800044 	addi	r2,r2,1
  802304:	e0bffc15 	stw	r2,-16(fp)
}

Shark *findSharkIfHit(Bullet *bullet) {
	Shark *cursor = sharkList;
	int i = 0;
	while (cursor != NULL
  802308:	e0bffd17 	ldw	r2,-12(fp)
  80230c:	1005003a 	cmpeq	r2,r2,zero
  802310:	1000051e 	bne	r2,zero,802328 <findSharkIfHit+0x84>
  802314:	e0bffc17 	ldw	r2,-16(fp)
  802318:	00c020b4 	movhi	r3,130
  80231c:	18c0ea04 	addi	r3,r3,936
  802320:	18c00017 	ldw	r3,0(r3)
  802324:	10ffea36 	bltu	r2,r3,8022d0 <findSharkIfHit+0x2c>
			return cursor;
		}
		cursor = cursor->next;
		i++;
	}
	return NULL;
  802328:	e03fff15 	stw	zero,-4(fp)
  80232c:	e0bfff17 	ldw	r2,-4(fp)
}
  802330:	e037883a 	mov	sp,fp
  802334:	dfc00117 	ldw	ra,4(sp)
  802338:	df000017 	ldw	fp,0(sp)
  80233c:	dec00204 	addi	sp,sp,8
  802340:	f800283a 	ret

00802344 <isBulletCollidingWithShark>:

int isBulletCollidingWithShark(Shark *shark, Bullet *bullet) {
  802344:	defff904 	addi	sp,sp,-28
  802348:	dfc00615 	stw	ra,24(sp)
  80234c:	df000515 	stw	fp,20(sp)
  802350:	df000504 	addi	fp,sp,20
  802354:	e13ffd15 	stw	r4,-12(fp)
  802358:	e17ffe15 	stw	r5,-8(fp)
	if (bullet == NULL || shark == NULL) {
  80235c:	e0bffe17 	ldw	r2,-8(fp)
  802360:	1005003a 	cmpeq	r2,r2,zero
  802364:	1000031e 	bne	r2,zero,802374 <isBulletCollidingWithShark+0x30>
  802368:	e0bffd17 	ldw	r2,-12(fp)
  80236c:	1004c03a 	cmpne	r2,r2,zero
  802370:	1000051e 	bne	r2,zero,802388 <isBulletCollidingWithShark+0x44>
		printf("Attempt to do player/bullet collision with null member.\n");
  802374:	010020b4 	movhi	r4,130
  802378:	21304104 	addi	r4,r4,-16124
  80237c:	0809f800 	call	809f80 <puts>
		return FALSE;
  802380:	e03fff15 	stw	zero,-4(fp)
  802384:	00003806 	br	802468 <isBulletCollidingWithShark+0x124>
	}

	if (bullet->type == SHARKBULLET) {
  802388:	e0bffe17 	ldw	r2,-8(fp)
  80238c:	10800417 	ldw	r2,16(r2)
  802390:	10800058 	cmpnei	r2,r2,1
  802394:	1000051e 	bne	r2,zero,8023ac <isBulletCollidingWithShark+0x68>
		// No friendly fire
		printf("Error: sharkbullet present in player bullet list.\n");
  802398:	010020b4 	movhi	r4,130
  80239c:	21304f04 	addi	r4,r4,-16068
  8023a0:	0809f800 	call	809f80 <puts>
		return FALSE;
  8023a4:	e03fff15 	stw	zero,-4(fp)
  8023a8:	00002f06 	br	802468 <isBulletCollidingWithShark+0x124>
	}
	
	if (bullet->x >= shark->x &&
  8023ac:	e0bffe17 	ldw	r2,-8(fp)
  8023b0:	10c00017 	ldw	r3,0(r2)
  8023b4:	e0bffd17 	ldw	r2,-12(fp)
  8023b8:	10800017 	ldw	r2,0(r2)
  8023bc:	18802916 	blt	r3,r2,802464 <isBulletCollidingWithShark+0x120>
  8023c0:	e0bffe17 	ldw	r2,-8(fp)
  8023c4:	10c00017 	ldw	r3,0(r2)
  8023c8:	e0bffd17 	ldw	r2,-12(fp)
  8023cc:	10800017 	ldw	r2,0(r2)
  8023d0:	10800944 	addi	r2,r2,37
  8023d4:	10c02316 	blt	r2,r3,802464 <isBulletCollidingWithShark+0x120>
		bullet->x <= shark->x + SHARK_WIDTH) {
		// Have x region correct
		//printf("x-hit\n");
		
		if (bullet->y >= shark->y &&
  8023d8:	e0bffe17 	ldw	r2,-8(fp)
  8023dc:	10c00217 	ldw	r3,8(r2)
  8023e0:	e0bffd17 	ldw	r2,-12(fp)
  8023e4:	10800217 	ldw	r2,8(r2)
  8023e8:	18801e16 	blt	r3,r2,802464 <isBulletCollidingWithShark+0x120>
  8023ec:	e0bffe17 	ldw	r2,-8(fp)
  8023f0:	10c00217 	ldw	r3,8(r2)
  8023f4:	e0bffd17 	ldw	r2,-12(fp)
  8023f8:	10800217 	ldw	r2,8(r2)
  8023fc:	10800504 	addi	r2,r2,20
  802400:	10c01816 	blt	r2,r3,802464 <isBulletCollidingWithShark+0x120>
			bullet->y <= shark->y + SHARK_HEIGHT) {
			// Have y region correct
			//printf("y-hit\n");
			int yRelative = bullet->y - shark->y;
  802404:	e0bffe17 	ldw	r2,-8(fp)
  802408:	10c00217 	ldw	r3,8(r2)
  80240c:	e0bffd17 	ldw	r2,-12(fp)
  802410:	10800217 	ldw	r2,8(r2)
  802414:	1885c83a 	sub	r2,r3,r2
  802418:	e0bffc15 	stw	r2,-16(fp)
			int xRelative = bullet->x - shark->x;
  80241c:	e0bffe17 	ldw	r2,-8(fp)
  802420:	10c00017 	ldw	r3,0(r2)
  802424:	e0bffd17 	ldw	r2,-12(fp)
  802428:	10800017 	ldw	r2,0(r2)
  80242c:	1885c83a 	sub	r2,r3,r2
  802430:	e0bffb15 	stw	r2,-20(fp)
			return relativeSharkHit[xRelative][yRelative];
  802434:	e0bffb17 	ldw	r2,-20(fp)
  802438:	e0fffc17 	ldw	r3,-16(fp)
  80243c:	010020b4 	movhi	r4,130
  802440:	21052004 	addi	r4,r4,5248
  802444:	10800524 	muli	r2,r2,20
  802448:	10c5883a 	add	r2,r2,r3
  80244c:	1085883a 	add	r2,r2,r2
  802450:	1085883a 	add	r2,r2,r2
  802454:	1105883a 	add	r2,r2,r4
  802458:	10800017 	ldw	r2,0(r2)
  80245c:	e0bfff15 	stw	r2,-4(fp)
  802460:	00000106 	br	802468 <isBulletCollidingWithShark+0x124>
		}
	}
	//printf("Miss\n");
	return FALSE;
  802464:	e03fff15 	stw	zero,-4(fp)
  802468:	e0bfff17 	ldw	r2,-4(fp)
}
  80246c:	e037883a 	mov	sp,fp
  802470:	dfc00117 	ldw	ra,4(sp)
  802474:	df000017 	ldw	fp,0(sp)
  802478:	dec00204 	addi	sp,sp,8
  80247c:	f800283a 	ret

00802480 <isBulletCollidingWithPlayer>:

int isBulletCollidingWithPlayer(Player *player, Bullet *bullet) {
  802480:	defff904 	addi	sp,sp,-28
  802484:	dfc00615 	stw	ra,24(sp)
  802488:	df000515 	stw	fp,20(sp)
  80248c:	df000504 	addi	fp,sp,20
  802490:	e13ffd15 	stw	r4,-12(fp)
  802494:	e17ffe15 	stw	r5,-8(fp)
	if (player == NULL || bullet == NULL) {
  802498:	e0bffd17 	ldw	r2,-12(fp)
  80249c:	1005003a 	cmpeq	r2,r2,zero
  8024a0:	1000031e 	bne	r2,zero,8024b0 <isBulletCollidingWithPlayer+0x30>
  8024a4:	e0bffe17 	ldw	r2,-8(fp)
  8024a8:	1004c03a 	cmpne	r2,r2,zero
  8024ac:	1000051e 	bne	r2,zero,8024c4 <isBulletCollidingWithPlayer+0x44>
		printf("Attempt to do player/bullet collision with null member.\n");
  8024b0:	010020b4 	movhi	r4,130
  8024b4:	21304104 	addi	r4,r4,-16124
  8024b8:	0809f800 	call	809f80 <puts>
		return FALSE;
  8024bc:	e03fff15 	stw	zero,-4(fp)
  8024c0:	00003806 	br	8025a4 <isBulletCollidingWithPlayer+0x124>
	}

	if (bullet->type == PLAYERBULLET) {
  8024c4:	e0bffe17 	ldw	r2,-8(fp)
  8024c8:	10800417 	ldw	r2,16(r2)
  8024cc:	1004c03a 	cmpne	r2,r2,zero
  8024d0:	1000051e 	bne	r2,zero,8024e8 <isBulletCollidingWithPlayer+0x68>
		// No friendly fire
		printf("Error: player bullet in shark bullet list.\n");
  8024d4:	010020b4 	movhi	r4,130
  8024d8:	21305c04 	addi	r4,r4,-16016
  8024dc:	0809f800 	call	809f80 <puts>
		return FALSE;
  8024e0:	e03fff15 	stw	zero,-4(fp)
  8024e4:	00002f06 	br	8025a4 <isBulletCollidingWithPlayer+0x124>
	}

	if (bullet->x >= player->x &&
  8024e8:	e0bffe17 	ldw	r2,-8(fp)
  8024ec:	10c00017 	ldw	r3,0(r2)
  8024f0:	e0bffd17 	ldw	r2,-12(fp)
  8024f4:	10800017 	ldw	r2,0(r2)
  8024f8:	18802916 	blt	r3,r2,8025a0 <isBulletCollidingWithPlayer+0x120>
  8024fc:	e0bffe17 	ldw	r2,-8(fp)
  802500:	10c00017 	ldw	r3,0(r2)
  802504:	e0bffd17 	ldw	r2,-12(fp)
  802508:	10800017 	ldw	r2,0(r2)
  80250c:	10800704 	addi	r2,r2,28
  802510:	10c02316 	blt	r2,r3,8025a0 <isBulletCollidingWithPlayer+0x120>
		bullet->x <= player->x + PLAYER_WIDTH) {
		// Have x region
		
		if (bullet->y >= player->y &&
  802514:	e0bffe17 	ldw	r2,-8(fp)
  802518:	10c00217 	ldw	r3,8(r2)
  80251c:	e0bffd17 	ldw	r2,-12(fp)
  802520:	10800217 	ldw	r2,8(r2)
  802524:	18801e16 	blt	r3,r2,8025a0 <isBulletCollidingWithPlayer+0x120>
  802528:	e0bffe17 	ldw	r2,-8(fp)
  80252c:	10c00217 	ldw	r3,8(r2)
  802530:	e0bffd17 	ldw	r2,-12(fp)
  802534:	10800217 	ldw	r2,8(r2)
  802538:	108006c4 	addi	r2,r2,27
  80253c:	10c01816 	blt	r2,r3,8025a0 <isBulletCollidingWithPlayer+0x120>
			bullet->y <= player->y + PLAYER_HEIGHT) {
			// Have y
			int yRelative = bullet->y - player->y;
  802540:	e0bffe17 	ldw	r2,-8(fp)
  802544:	10c00217 	ldw	r3,8(r2)
  802548:	e0bffd17 	ldw	r2,-12(fp)
  80254c:	10800217 	ldw	r2,8(r2)
  802550:	1885c83a 	sub	r2,r3,r2
  802554:	e0bffc15 	stw	r2,-16(fp)
			int xRelative = bullet->x - player->x;
  802558:	e0bffe17 	ldw	r2,-8(fp)
  80255c:	10c00017 	ldw	r3,0(r2)
  802560:	e0bffd17 	ldw	r2,-12(fp)
  802564:	10800017 	ldw	r2,0(r2)
  802568:	1885c83a 	sub	r2,r3,r2
  80256c:	e0bffb15 	stw	r2,-20(fp)
			return relativePlayerHit[xRelative][yRelative];
  802570:	e0bffb17 	ldw	r2,-20(fp)
  802574:	e0fffc17 	ldw	r3,-16(fp)
  802578:	010020b4 	movhi	r4,130
  80257c:	21080404 	addi	r4,r4,8208
  802580:	108006e4 	muli	r2,r2,27
  802584:	10c5883a 	add	r2,r2,r3
  802588:	1085883a 	add	r2,r2,r2
  80258c:	1085883a 	add	r2,r2,r2
  802590:	1105883a 	add	r2,r2,r4
  802594:	10800017 	ldw	r2,0(r2)
  802598:	e0bfff15 	stw	r2,-4(fp)
  80259c:	00000106 	br	8025a4 <isBulletCollidingWithPlayer+0x124>
		}
	}
	return FALSE;
  8025a0:	e03fff15 	stw	zero,-4(fp)
  8025a4:	e0bfff17 	ldw	r2,-4(fp)
}
  8025a8:	e037883a 	mov	sp,fp
  8025ac:	dfc00117 	ldw	ra,4(sp)
  8025b0:	df000017 	ldw	fp,0(sp)
  8025b4:	dec00204 	addi	sp,sp,8
  8025b8:	f800283a 	ret

008025bc <doSharkBulletCollision>:

void doSharkBulletCollision(void) {
  8025bc:	defffb04 	addi	sp,sp,-20
  8025c0:	dfc00415 	stw	ra,16(sp)
  8025c4:	df000315 	stw	fp,12(sp)
  8025c8:	df000304 	addi	fp,sp,12
	Bullet *bulletCursor = playerBulletList;
  8025cc:	008020b4 	movhi	r2,130
  8025d0:	1080d604 	addi	r2,r2,856
  8025d4:	10800017 	ldw	r2,0(r2)
  8025d8:	e0bfff15 	stw	r2,-4(fp)
	Shark *toKill = NULL;
  8025dc:	e03ffe15 	stw	zero,-8(fp)
	int i = 0;
  8025e0:	e03ffd15 	stw	zero,-12(fp)
	while (bulletCursor != NULL
  8025e4:	00001006 	br	802628 <doSharkBulletCollision+0x6c>
			&& bulletCursor->type == PLAYERBULLET
			&& i < NUM_BULLETS) {
		toKill = findSharkIfHit(bulletCursor);
  8025e8:	e13fff17 	ldw	r4,-4(fp)
  8025ec:	08022a40 	call	8022a4 <findSharkIfHit>
  8025f0:	e0bffe15 	stw	r2,-8(fp)
		if (toKill != NULL) {
  8025f4:	e0bffe17 	ldw	r2,-8(fp)
  8025f8:	1005003a 	cmpeq	r2,r2,zero
  8025fc:	1000041e 	bne	r2,zero,802610 <doSharkBulletCollision+0x54>
			killShark(toKill);
  802600:	e13ffe17 	ldw	r4,-8(fp)
  802604:	08052a40 	call	8052a4 <killShark>
			deleteBullet(bulletCursor);
  802608:	e13fff17 	ldw	r4,-4(fp)
  80260c:	0801eac0 	call	801eac <deleteBullet>
		}
		bulletCursor = bulletCursor->next;
  802610:	e0bfff17 	ldw	r2,-4(fp)
  802614:	10800517 	ldw	r2,20(r2)
  802618:	e0bfff15 	stw	r2,-4(fp)
		i++;
  80261c:	e0bffd17 	ldw	r2,-12(fp)
  802620:	10800044 	addi	r2,r2,1
  802624:	e0bffd15 	stw	r2,-12(fp)

void doSharkBulletCollision(void) {
	Bullet *bulletCursor = playerBulletList;
	Shark *toKill = NULL;
	int i = 0;
	while (bulletCursor != NULL
  802628:	e0bfff17 	ldw	r2,-4(fp)
  80262c:	1005003a 	cmpeq	r2,r2,zero
  802630:	1000071e 	bne	r2,zero,802650 <doSharkBulletCollision+0x94>
  802634:	e0bfff17 	ldw	r2,-4(fp)
  802638:	10800417 	ldw	r2,16(r2)
  80263c:	1004c03a 	cmpne	r2,r2,zero
  802640:	1000031e 	bne	r2,zero,802650 <doSharkBulletCollision+0x94>
  802644:	e0bffd17 	ldw	r2,-12(fp)
  802648:	10802010 	cmplti	r2,r2,128
  80264c:	103fe61e 	bne	r2,zero,8025e8 <doSharkBulletCollision+0x2c>
			deleteBullet(bulletCursor);
		}
		bulletCursor = bulletCursor->next;
		i++;
	}
}
  802650:	e037883a 	mov	sp,fp
  802654:	dfc00117 	ldw	ra,4(sp)
  802658:	df000017 	ldw	fp,0(sp)
  80265c:	dec00204 	addi	sp,sp,8
  802660:	f800283a 	ret

00802664 <doPlayerBulletCollision>:

void doPlayerBulletCollision(void) {
  802664:	defffc04 	addi	sp,sp,-16
  802668:	dfc00315 	stw	ra,12(sp)
  80266c:	df000215 	stw	fp,8(sp)
  802670:	df000204 	addi	fp,sp,8
	Bullet *bulletCursor = sharkBulletList;
  802674:	008020b4 	movhi	r2,130
  802678:	1080d704 	addi	r2,r2,860
  80267c:	10800017 	ldw	r2,0(r2)
  802680:	e0bfff15 	stw	r2,-4(fp)
	int i = 0;
  802684:	e03ffe15 	stw	zero,-8(fp)
	while (bulletCursor != NULL
  802688:	00001006 	br	8026cc <doPlayerBulletCollision+0x68>
			&& bulletCursor->type == SHARKBULLET
			&& i < NUM_BULLETS) {
		if (isBulletCollidingWithPlayer(&player, bulletCursor) == TRUE) {
  80268c:	010020b4 	movhi	r4,130
  802690:	21019c04 	addi	r4,r4,1648
  802694:	e17fff17 	ldw	r5,-4(fp)
  802698:	08024800 	call	802480 <isBulletCollidingWithPlayer>
  80269c:	10800058 	cmpnei	r2,r2,1
  8026a0:	1000041e 	bne	r2,zero,8026b4 <doPlayerBulletCollision+0x50>
			hitPlayer();
  8026a4:	080375c0 	call	80375c <hitPlayer>
			deleteBullet(bulletCursor);
  8026a8:	e13fff17 	ldw	r4,-4(fp)
  8026ac:	0801eac0 	call	801eac <deleteBullet>
			break;
  8026b0:	00001006 	br	8026f4 <doPlayerBulletCollision+0x90>
		}
		i++;
  8026b4:	e0bffe17 	ldw	r2,-8(fp)
  8026b8:	10800044 	addi	r2,r2,1
  8026bc:	e0bffe15 	stw	r2,-8(fp)
		bulletCursor = bulletCursor->next;
  8026c0:	e0bfff17 	ldw	r2,-4(fp)
  8026c4:	10800517 	ldw	r2,20(r2)
  8026c8:	e0bfff15 	stw	r2,-4(fp)
}

void doPlayerBulletCollision(void) {
	Bullet *bulletCursor = sharkBulletList;
	int i = 0;
	while (bulletCursor != NULL
  8026cc:	e0bfff17 	ldw	r2,-4(fp)
  8026d0:	1005003a 	cmpeq	r2,r2,zero
  8026d4:	1000071e 	bne	r2,zero,8026f4 <doPlayerBulletCollision+0x90>
  8026d8:	e0bfff17 	ldw	r2,-4(fp)
  8026dc:	10800417 	ldw	r2,16(r2)
  8026e0:	10800058 	cmpnei	r2,r2,1
  8026e4:	1000031e 	bne	r2,zero,8026f4 <doPlayerBulletCollision+0x90>
  8026e8:	e0bffe17 	ldw	r2,-8(fp)
  8026ec:	10802010 	cmplti	r2,r2,128
  8026f0:	103fe61e 	bne	r2,zero,80268c <doPlayerBulletCollision+0x28>
			break;
		}
		i++;
		bulletCursor = bulletCursor->next;
	}
}
  8026f4:	e037883a 	mov	sp,fp
  8026f8:	dfc00117 	ldw	ra,4(sp)
  8026fc:	df000017 	ldw	fp,0(sp)
  802700:	dec00204 	addi	sp,sp,8
  802704:	f800283a 	ret

00802708 <setupDisplacement>:
void makeDownRight(Displacement *disp);
void makeDownLeft(Displacement *disp);
void makeUpRight(Displacement *disp);
void makeUpLeft(Displacement *disp);

void setupDisplacement(void) {
  802708:	defffe04 	addi	sp,sp,-8
  80270c:	dfc00115 	stw	ra,4(sp)
  802710:	df000015 	stw	fp,0(sp)
  802714:	d839883a 	mov	fp,sp
	right.dx = 1;
  802718:	00800044 	movi	r2,1
  80271c:	d0a71d0d 	sth	r2,-25484(gp)
	right.dy = 0;
  802720:	008020b4 	movhi	r2,130
  802724:	1080d884 	addi	r2,r2,866
  802728:	1000000d 	sth	zero,0(r2)

	left.dx = -1;
  80272c:	00bfffc4 	movi	r2,-1
  802730:	d0a71f0d 	sth	r2,-25476(gp)
	left.dy = 0;
  802734:	008020b4 	movhi	r2,130
  802738:	1080da84 	addi	r2,r2,874
  80273c:	1000000d 	sth	zero,0(r2)

	up.dx = 0;
  802740:	d027210d 	sth	zero,-25468(gp)
	up.dy = -1;
  802744:	00c020b4 	movhi	r3,130
  802748:	18c0dc84 	addi	r3,r3,882
  80274c:	00bfffc4 	movi	r2,-1
  802750:	1880000d 	sth	r2,0(r3)

	down.dx = 0;
  802754:	d027230d 	sth	zero,-25460(gp)
	up.dy = 1;
  802758:	00c020b4 	movhi	r3,130
  80275c:	18c0dc84 	addi	r3,r3,882
  802760:	00800044 	movi	r2,1
  802764:	1880000d 	sth	r2,0(r3)

	setupHorizontalDisplacementFunction();
  802768:	08027940 	call	802794 <setupHorizontalDisplacementFunction>
	setupCircularDisplacementFunction();
  80276c:	08028980 	call	802898 <setupCircularDisplacementFunction>
	setupArcDisplacementFunction();
  802770:	08029880 	call	802988 <setupArcDisplacementFunction>

	printf("Setup displacement functions.\n");
  802774:	010020b4 	movhi	r4,130
  802778:	21306704 	addi	r4,r4,-15972
  80277c:	0809f800 	call	809f80 <puts>
}
  802780:	e037883a 	mov	sp,fp
  802784:	dfc00117 	ldw	ra,4(sp)
  802788:	df000017 	ldw	fp,0(sp)
  80278c:	dec00204 	addi	sp,sp,8
  802790:	f800283a 	ret

00802794 <setupHorizontalDisplacementFunction>:

void setupHorizontalDisplacementFunction(void) {
  802794:	defffc04 	addi	sp,sp,-16
  802798:	dfc00315 	stw	ra,12(sp)
  80279c:	df000215 	stw	fp,8(sp)
  8027a0:	df000204 	addi	fp,sp,8
	int i;
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  8027a4:	e03fff15 	stw	zero,-4(fp)
  8027a8:	00002506 	br	802840 <setupHorizontalDisplacementFunction+0xac>
		ptr = &verticalDisplacementFunctionUp[i];
  8027ac:	e0bfff17 	ldw	r2,-4(fp)
  8027b0:	100490fa 	slli	r2,r2,3
  8027b4:	1007883a 	mov	r3,r2
  8027b8:	008020b4 	movhi	r2,130
  8027bc:	108bf804 	addi	r2,r2,12256
  8027c0:	1885883a 	add	r2,r3,r2
  8027c4:	e0bffe15 	stw	r2,-8(fp)
		makeUp(ptr);
  8027c8:	e13ffe17 	ldw	r4,-8(fp)
  8027cc:	0802b540 	call	802b54 <makeUp>
		ptr->next = &verticalDisplacementFunctionUp[i + 1];
  8027d0:	e0bfff17 	ldw	r2,-4(fp)
  8027d4:	100490fa 	slli	r2,r2,3
  8027d8:	1007883a 	mov	r3,r2
  8027dc:	008020b4 	movhi	r2,130
  8027e0:	108bfa04 	addi	r2,r2,12264
  8027e4:	1887883a 	add	r3,r3,r2
  8027e8:	e0bffe17 	ldw	r2,-8(fp)
  8027ec:	10c00115 	stw	r3,4(r2)

		ptr = &verticalDisplacementFunctionDown[i];
  8027f0:	e0bfff17 	ldw	r2,-4(fp)
  8027f4:	100490fa 	slli	r2,r2,3
  8027f8:	1007883a 	mov	r3,r2
  8027fc:	008020b4 	movhi	r2,130
  802800:	108af804 	addi	r2,r2,11232
  802804:	1885883a 	add	r2,r3,r2
  802808:	e0bffe15 	stw	r2,-8(fp)
		makeUp(ptr);
  80280c:	e13ffe17 	ldw	r4,-8(fp)
  802810:	0802b540 	call	802b54 <makeUp>
		ptr-> next = &verticalDisplacementFunctionDown[i + 1];
  802814:	e0bfff17 	ldw	r2,-4(fp)
  802818:	100490fa 	slli	r2,r2,3
  80281c:	1007883a 	mov	r3,r2
  802820:	008020b4 	movhi	r2,130
  802824:	108afa04 	addi	r2,r2,11240
  802828:	1887883a 	add	r3,r3,r2
  80282c:	e0bffe17 	ldw	r2,-8(fp)
  802830:	10c00115 	stw	r3,4(r2)
}

void setupHorizontalDisplacementFunction(void) {
	int i;
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  802834:	e0bfff17 	ldw	r2,-4(fp)
  802838:	10800044 	addi	r2,r2,1
  80283c:	e0bfff15 	stw	r2,-4(fp)
  802840:	e0bfff17 	ldw	r2,-4(fp)
  802844:	10802010 	cmplti	r2,r2,128
  802848:	103fd81e 	bne	r2,zero,8027ac <setupHorizontalDisplacementFunction+0x18>

		ptr = &verticalDisplacementFunctionDown[i];
		makeUp(ptr);
		ptr-> next = &verticalDisplacementFunctionDown[i + 1];
	}
	ptr = &verticalDisplacementFunctionUp[DISPLACEMENT_LENGTH];
  80284c:	008020b4 	movhi	r2,130
  802850:	108cf804 	addi	r2,r2,13280
  802854:	e0bffe15 	stw	r2,-8(fp)
	ptr->next = verticalDisplacementFunctionUp;
  802858:	e0fffe17 	ldw	r3,-8(fp)
  80285c:	008020b4 	movhi	r2,130
  802860:	108bf804 	addi	r2,r2,12256
  802864:	18800115 	stw	r2,4(r3)
	ptr = &verticalDisplacementFunctionDown[DISPLACEMENT_LENGTH];
  802868:	008020b4 	movhi	r2,130
  80286c:	108bf804 	addi	r2,r2,12256
  802870:	e0bffe15 	stw	r2,-8(fp)
	ptr->next = verticalDisplacementFunctionDown;
  802874:	e0fffe17 	ldw	r3,-8(fp)
  802878:	008020b4 	movhi	r2,130
  80287c:	108af804 	addi	r2,r2,11232
  802880:	18800115 	stw	r2,4(r3)
}
  802884:	e037883a 	mov	sp,fp
  802888:	dfc00117 	ldw	ra,4(sp)
  80288c:	df000017 	ldw	fp,0(sp)
  802890:	dec00204 	addi	sp,sp,8
  802894:	f800283a 	ret

00802898 <setupCircularDisplacementFunction>:

void setupCircularDisplacementFunction(void) {
  802898:	defffc04 	addi	sp,sp,-16
  80289c:	dfc00315 	stw	ra,12(sp)
  8028a0:	df000215 	stw	fp,8(sp)
  8028a4:	df000204 	addi	fp,sp,8
	int i = 0;
  8028a8:	e03fff15 	stw	zero,-4(fp)
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  8028ac:	e03fff15 	stw	zero,-4(fp)
  8028b0:	00002606 	br	80294c <setupCircularDisplacementFunction+0xb4>
		ptr = &circularDisplacementFunction[i];
  8028b4:	e0bfff17 	ldw	r2,-4(fp)
  8028b8:	100490fa 	slli	r2,r2,3
  8028bc:	1007883a 	mov	r3,r2
  8028c0:	008020b4 	movhi	r2,130
  8028c4:	108cf804 	addi	r2,r2,13280
  8028c8:	1885883a 	add	r2,r3,r2
  8028cc:	e0bffe15 	stw	r2,-8(fp)
		if (i < DISPLACEMENT_LENGTH / 4) {
  8028d0:	e0bfff17 	ldw	r2,-4(fp)
  8028d4:	10800808 	cmpgei	r2,r2,32
  8028d8:	1000031e 	bne	r2,zero,8028e8 <setupCircularDisplacementFunction+0x50>
			makeLeft(ptr);
  8028dc:	e13ffe17 	ldw	r4,-8(fp)
  8028e0:	0802b140 	call	802b14 <makeLeft>
  8028e4:	00000e06 	br	802920 <setupCircularDisplacementFunction+0x88>
		} else if (i < DISPLACEMENT_LENGTH / 2) {
  8028e8:	e0bfff17 	ldw	r2,-4(fp)
  8028ec:	10801008 	cmpgei	r2,r2,64
  8028f0:	1000031e 	bne	r2,zero,802900 <setupCircularDisplacementFunction+0x68>
			makeDown(ptr);
  8028f4:	e13ffe17 	ldw	r4,-8(fp)
  8028f8:	0802b940 	call	802b94 <makeDown>
  8028fc:	00000806 	br	802920 <setupCircularDisplacementFunction+0x88>
		} else if (i < 3 * DISPLACEMENT_LENGTH / 4) {
  802900:	e0bfff17 	ldw	r2,-4(fp)
  802904:	10801808 	cmpgei	r2,r2,96
  802908:	1000031e 	bne	r2,zero,802918 <setupCircularDisplacementFunction+0x80>
			makeRight(ptr);
  80290c:	e13ffe17 	ldw	r4,-8(fp)
  802910:	0802ad40 	call	802ad4 <makeRight>
  802914:	00000206 	br	802920 <setupCircularDisplacementFunction+0x88>
		} else {
			makeUp(ptr);
  802918:	e13ffe17 	ldw	r4,-8(fp)
  80291c:	0802b540 	call	802b54 <makeUp>
		}
		ptr->next = &circularDisplacementFunction[i + 1];
  802920:	e0bfff17 	ldw	r2,-4(fp)
  802924:	100490fa 	slli	r2,r2,3
  802928:	1007883a 	mov	r3,r2
  80292c:	008020b4 	movhi	r2,130
  802930:	108cfa04 	addi	r2,r2,13288
  802934:	1887883a 	add	r3,r3,r2
  802938:	e0bffe17 	ldw	r2,-8(fp)
  80293c:	10c00115 	stw	r3,4(r2)
}

void setupCircularDisplacementFunction(void) {
	int i = 0;
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  802940:	e0bfff17 	ldw	r2,-4(fp)
  802944:	10800044 	addi	r2,r2,1
  802948:	e0bfff15 	stw	r2,-4(fp)
  80294c:	e0bfff17 	ldw	r2,-4(fp)
  802950:	10802010 	cmplti	r2,r2,128
  802954:	103fd71e 	bne	r2,zero,8028b4 <setupCircularDisplacementFunction+0x1c>
		} else {
			makeUp(ptr);
		}
		ptr->next = &circularDisplacementFunction[i + 1];
	}
	ptr = &circularDisplacementFunction[DISPLACEMENT_LENGTH];
  802958:	008020b4 	movhi	r2,130
  80295c:	108df804 	addi	r2,r2,14304
  802960:	e0bffe15 	stw	r2,-8(fp)
	ptr->next = circularDisplacementFunction;
  802964:	e0fffe17 	ldw	r3,-8(fp)
  802968:	008020b4 	movhi	r2,130
  80296c:	108cf804 	addi	r2,r2,13280
  802970:	18800115 	stw	r2,4(r3)
}
  802974:	e037883a 	mov	sp,fp
  802978:	dfc00117 	ldw	ra,4(sp)
  80297c:	df000017 	ldw	fp,0(sp)
  802980:	dec00204 	addi	sp,sp,8
  802984:	f800283a 	ret

00802988 <setupArcDisplacementFunction>:

void setupArcDisplacementFunction(void) {
  802988:	defffc04 	addi	sp,sp,-16
  80298c:	dfc00315 	stw	ra,12(sp)
  802990:	df000215 	stw	fp,8(sp)
  802994:	df000204 	addi	fp,sp,8
	int i;
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  802998:	e03fff15 	stw	zero,-4(fp)
  80299c:	00001a06 	br	802a08 <setupArcDisplacementFunction+0x80>
		ptr = &arcDisplacementFunction[i];
  8029a0:	e0bfff17 	ldw	r2,-4(fp)
  8029a4:	100490fa 	slli	r2,r2,3
  8029a8:	1007883a 	mov	r3,r2
  8029ac:	008020b4 	movhi	r2,130
  8029b0:	108ef804 	addi	r2,r2,15328
  8029b4:	1885883a 	add	r2,r3,r2
  8029b8:	e0bffe15 	stw	r2,-8(fp)
		if (i < DISPLACEMENT_LENGTH / 2) {
  8029bc:	e0bfff17 	ldw	r2,-4(fp)
  8029c0:	10801008 	cmpgei	r2,r2,64
  8029c4:	1000031e 	bne	r2,zero,8029d4 <setupArcDisplacementFunction+0x4c>
			makeDownLeft(ptr);
  8029c8:	e13ffe17 	ldw	r4,-8(fp)
  8029cc:	0802c140 	call	802c14 <makeDownLeft>
  8029d0:	00000206 	br	8029dc <setupArcDisplacementFunction+0x54>
		} else {
			makeDownRight(ptr);
  8029d4:	e13ffe17 	ldw	r4,-8(fp)
  8029d8:	0802bd40 	call	802bd4 <makeDownRight>
		}
		ptr->next = &arcDisplacementFunction[i + 1];
  8029dc:	e0bfff17 	ldw	r2,-4(fp)
  8029e0:	100490fa 	slli	r2,r2,3
  8029e4:	1007883a 	mov	r3,r2
  8029e8:	008020b4 	movhi	r2,130
  8029ec:	108efa04 	addi	r2,r2,15336
  8029f0:	1887883a 	add	r3,r3,r2
  8029f4:	e0bffe17 	ldw	r2,-8(fp)
  8029f8:	10c00115 	stw	r3,4(r2)
}

void setupArcDisplacementFunction(void) {
	int i;
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  8029fc:	e0bfff17 	ldw	r2,-4(fp)
  802a00:	10800044 	addi	r2,r2,1
  802a04:	e0bfff15 	stw	r2,-4(fp)
  802a08:	e0bfff17 	ldw	r2,-4(fp)
  802a0c:	10802010 	cmplti	r2,r2,128
  802a10:	103fe31e 	bne	r2,zero,8029a0 <setupArcDisplacementFunction+0x18>
		} else {
			makeDownRight(ptr);
		}
		ptr->next = &arcDisplacementFunction[i + 1];
	}
	ptr = &arcDisplacementFunction[DISPLACEMENT_LENGTH];
  802a14:	008020b4 	movhi	r2,130
  802a18:	108ff804 	addi	r2,r2,16352
  802a1c:	e0bffe15 	stw	r2,-8(fp)
	ptr->next = arcDisplacementFunction;
  802a20:	e0fffe17 	ldw	r3,-8(fp)
  802a24:	008020b4 	movhi	r2,130
  802a28:	108ef804 	addi	r2,r2,15328
  802a2c:	18800115 	stw	r2,4(r3)
}
  802a30:	e037883a 	mov	sp,fp
  802a34:	dfc00117 	ldw	ra,4(sp)
  802a38:	df000017 	ldw	fp,0(sp)
  802a3c:	dec00204 	addi	sp,sp,8
  802a40:	f800283a 	ret

00802a44 <setupNoDisplcaementFunction>:

void setupNoDisplcaementFunction(void) {
  802a44:	defffe04 	addi	sp,sp,-8
  802a48:	df000115 	stw	fp,4(sp)
  802a4c:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  802a50:	e03fff15 	stw	zero,-4(fp)
  802a54:	00001806 	br	802ab8 <setupNoDisplcaementFunction+0x74>
		doNotMove[i].dx = 0;
  802a58:	e0bfff17 	ldw	r2,-4(fp)
  802a5c:	00c020b4 	movhi	r3,130
  802a60:	18cdf804 	addi	r3,r3,14304
  802a64:	100490fa 	slli	r2,r2,3
  802a68:	10c5883a 	add	r2,r2,r3
  802a6c:	1000000d 	sth	zero,0(r2)
		doNotMove[i].dy = 0;
  802a70:	e0bfff17 	ldw	r2,-4(fp)
  802a74:	00c020b4 	movhi	r3,130
  802a78:	18cdf804 	addi	r3,r3,14304
  802a7c:	100490fa 	slli	r2,r2,3
  802a80:	10c5883a 	add	r2,r2,r3
  802a84:	1000008d 	sth	zero,2(r2)
		doNotMove[i].next = doNotMove;
  802a88:	e0bfff17 	ldw	r2,-4(fp)
  802a8c:	00c020b4 	movhi	r3,130
  802a90:	18cdf804 	addi	r3,r3,14304
  802a94:	100490fa 	slli	r2,r2,3
  802a98:	10c5883a 	add	r2,r2,r3
  802a9c:	10c00104 	addi	r3,r2,4
  802aa0:	008020b4 	movhi	r2,130
  802aa4:	108df804 	addi	r2,r2,14304
  802aa8:	18800015 	stw	r2,0(r3)
	ptr->next = arcDisplacementFunction;
}

void setupNoDisplcaementFunction(void) {
	int i;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  802aac:	e0bfff17 	ldw	r2,-4(fp)
  802ab0:	10800044 	addi	r2,r2,1
  802ab4:	e0bfff15 	stw	r2,-4(fp)
  802ab8:	e0bfff17 	ldw	r2,-4(fp)
  802abc:	10802010 	cmplti	r2,r2,128
  802ac0:	103fe51e 	bne	r2,zero,802a58 <setupNoDisplcaementFunction+0x14>
		doNotMove[i].dx = 0;
		doNotMove[i].dy = 0;
		doNotMove[i].next = doNotMove;
	}
}
  802ac4:	e037883a 	mov	sp,fp
  802ac8:	df000017 	ldw	fp,0(sp)
  802acc:	dec00104 	addi	sp,sp,4
  802ad0:	f800283a 	ret

00802ad4 <makeRight>:

void makeRight(Displacement *disp) {
  802ad4:	defffe04 	addi	sp,sp,-8
  802ad8:	df000115 	stw	fp,4(sp)
  802adc:	df000104 	addi	fp,sp,4
  802ae0:	e13fff15 	stw	r4,-4(fp)
	disp->dx = right.dx;
  802ae4:	d0e71d0b 	ldhu	r3,-25484(gp)
  802ae8:	e0bfff17 	ldw	r2,-4(fp)
  802aec:	10c0000d 	sth	r3,0(r2)
	disp->dy = right.dy;
  802af0:	008020b4 	movhi	r2,130
  802af4:	1080d884 	addi	r2,r2,866
  802af8:	10c0000b 	ldhu	r3,0(r2)
  802afc:	e0bfff17 	ldw	r2,-4(fp)
  802b00:	10c0008d 	sth	r3,2(r2)
}
  802b04:	e037883a 	mov	sp,fp
  802b08:	df000017 	ldw	fp,0(sp)
  802b0c:	dec00104 	addi	sp,sp,4
  802b10:	f800283a 	ret

00802b14 <makeLeft>:
void makeLeft(Displacement *disp) {
  802b14:	defffe04 	addi	sp,sp,-8
  802b18:	df000115 	stw	fp,4(sp)
  802b1c:	df000104 	addi	fp,sp,4
  802b20:	e13fff15 	stw	r4,-4(fp)
	disp->dx = left.dx;
  802b24:	d0e71f0b 	ldhu	r3,-25476(gp)
  802b28:	e0bfff17 	ldw	r2,-4(fp)
  802b2c:	10c0000d 	sth	r3,0(r2)
	disp->dy = left.dy;
  802b30:	008020b4 	movhi	r2,130
  802b34:	1080da84 	addi	r2,r2,874
  802b38:	10c0000b 	ldhu	r3,0(r2)
  802b3c:	e0bfff17 	ldw	r2,-4(fp)
  802b40:	10c0008d 	sth	r3,2(r2)
}
  802b44:	e037883a 	mov	sp,fp
  802b48:	df000017 	ldw	fp,0(sp)
  802b4c:	dec00104 	addi	sp,sp,4
  802b50:	f800283a 	ret

00802b54 <makeUp>:
void makeUp(Displacement *disp) {
  802b54:	defffe04 	addi	sp,sp,-8
  802b58:	df000115 	stw	fp,4(sp)
  802b5c:	df000104 	addi	fp,sp,4
  802b60:	e13fff15 	stw	r4,-4(fp)
	disp->dx = up.dx;
  802b64:	d0e7210b 	ldhu	r3,-25468(gp)
  802b68:	e0bfff17 	ldw	r2,-4(fp)
  802b6c:	10c0000d 	sth	r3,0(r2)
	disp->dy = up.dy;
  802b70:	008020b4 	movhi	r2,130
  802b74:	1080dc84 	addi	r2,r2,882
  802b78:	10c0000b 	ldhu	r3,0(r2)
  802b7c:	e0bfff17 	ldw	r2,-4(fp)
  802b80:	10c0008d 	sth	r3,2(r2)
}
  802b84:	e037883a 	mov	sp,fp
  802b88:	df000017 	ldw	fp,0(sp)
  802b8c:	dec00104 	addi	sp,sp,4
  802b90:	f800283a 	ret

00802b94 <makeDown>:

void makeDown(Displacement *disp) {
  802b94:	defffe04 	addi	sp,sp,-8
  802b98:	df000115 	stw	fp,4(sp)
  802b9c:	df000104 	addi	fp,sp,4
  802ba0:	e13fff15 	stw	r4,-4(fp)
	disp->dx = down.dx;
  802ba4:	d0e7230b 	ldhu	r3,-25460(gp)
  802ba8:	e0bfff17 	ldw	r2,-4(fp)
  802bac:	10c0000d 	sth	r3,0(r2)
	disp->dy = down.dy;
  802bb0:	008020b4 	movhi	r2,130
  802bb4:	1080de84 	addi	r2,r2,890
  802bb8:	10c0000b 	ldhu	r3,0(r2)
  802bbc:	e0bfff17 	ldw	r2,-4(fp)
  802bc0:	10c0008d 	sth	r3,2(r2)
}
  802bc4:	e037883a 	mov	sp,fp
  802bc8:	df000017 	ldw	fp,0(sp)
  802bcc:	dec00104 	addi	sp,sp,4
  802bd0:	f800283a 	ret

00802bd4 <makeDownRight>:

void makeDownRight(Displacement *disp) {
  802bd4:	defffe04 	addi	sp,sp,-8
  802bd8:	df000115 	stw	fp,4(sp)
  802bdc:	df000104 	addi	fp,sp,4
  802be0:	e13fff15 	stw	r4,-4(fp)
	disp->dx = right.dx;
  802be4:	d0e71d0b 	ldhu	r3,-25484(gp)
  802be8:	e0bfff17 	ldw	r2,-4(fp)
  802bec:	10c0000d 	sth	r3,0(r2)
	disp->dy = down.dy;
  802bf0:	008020b4 	movhi	r2,130
  802bf4:	1080de84 	addi	r2,r2,890
  802bf8:	10c0000b 	ldhu	r3,0(r2)
  802bfc:	e0bfff17 	ldw	r2,-4(fp)
  802c00:	10c0008d 	sth	r3,2(r2)
}
  802c04:	e037883a 	mov	sp,fp
  802c08:	df000017 	ldw	fp,0(sp)
  802c0c:	dec00104 	addi	sp,sp,4
  802c10:	f800283a 	ret

00802c14 <makeDownLeft>:

void makeDownLeft(Displacement *disp) {
  802c14:	defffe04 	addi	sp,sp,-8
  802c18:	df000115 	stw	fp,4(sp)
  802c1c:	df000104 	addi	fp,sp,4
  802c20:	e13fff15 	stw	r4,-4(fp)
	disp->dx = left.dx;
  802c24:	d0e71f0b 	ldhu	r3,-25476(gp)
  802c28:	e0bfff17 	ldw	r2,-4(fp)
  802c2c:	10c0000d 	sth	r3,0(r2)
	disp->dy = down.dy;
  802c30:	008020b4 	movhi	r2,130
  802c34:	1080de84 	addi	r2,r2,890
  802c38:	10c0000b 	ldhu	r3,0(r2)
  802c3c:	e0bfff17 	ldw	r2,-4(fp)
  802c40:	10c0008d 	sth	r3,2(r2)
}
  802c44:	e037883a 	mov	sp,fp
  802c48:	df000017 	ldw	fp,0(sp)
  802c4c:	dec00104 	addi	sp,sp,4
  802c50:	f800283a 	ret

00802c54 <makeUpRight>:

void makeUpRight(Displacement *disp) {
  802c54:	defffe04 	addi	sp,sp,-8
  802c58:	df000115 	stw	fp,4(sp)
  802c5c:	df000104 	addi	fp,sp,4
  802c60:	e13fff15 	stw	r4,-4(fp)
	disp->dx = right.dx;
  802c64:	d0e71d0b 	ldhu	r3,-25484(gp)
  802c68:	e0bfff17 	ldw	r2,-4(fp)
  802c6c:	10c0000d 	sth	r3,0(r2)
	disp->dy = up.dy;
  802c70:	008020b4 	movhi	r2,130
  802c74:	1080dc84 	addi	r2,r2,882
  802c78:	10c0000b 	ldhu	r3,0(r2)
  802c7c:	e0bfff17 	ldw	r2,-4(fp)
  802c80:	10c0008d 	sth	r3,2(r2)
}
  802c84:	e037883a 	mov	sp,fp
  802c88:	df000017 	ldw	fp,0(sp)
  802c8c:	dec00104 	addi	sp,sp,4
  802c90:	f800283a 	ret

00802c94 <makeUpLeft>:

void makeUpLeft(Displacement *disp) {
  802c94:	defffe04 	addi	sp,sp,-8
  802c98:	df000115 	stw	fp,4(sp)
  802c9c:	df000104 	addi	fp,sp,4
  802ca0:	e13fff15 	stw	r4,-4(fp)
	disp->dx = left.dx;
  802ca4:	d0e71f0b 	ldhu	r3,-25476(gp)
  802ca8:	e0bfff17 	ldw	r2,-4(fp)
  802cac:	10c0000d 	sth	r3,0(r2)
	disp->dy = up.dy;
  802cb0:	008020b4 	movhi	r2,130
  802cb4:	1080dc84 	addi	r2,r2,882
  802cb8:	10c0000b 	ldhu	r3,0(r2)
  802cbc:	e0bfff17 	ldw	r2,-4(fp)
  802cc0:	10c0008d 	sth	r3,2(r2)
}
  802cc4:	e037883a 	mov	sp,fp
  802cc8:	df000017 	ldw	fp,0(sp)
  802ccc:	dec00104 	addi	sp,sp,4
  802cd0:	f800283a 	ret

00802cd4 <setToRandomDisplacement>:

void setToRandomDisplacement(Shark *shark) {
  802cd4:	defff804 	addi	sp,sp,-32
  802cd8:	dfc00715 	stw	ra,28(sp)
  802cdc:	df000615 	stw	fp,24(sp)
  802ce0:	df000604 	addi	fp,sp,24
  802ce4:	e13ffd15 	stw	r4,-12(fp)
	srand(time(NULL));
  802ce8:	0009883a 	mov	r4,zero
  802cec:	080a10c0 	call	80a10c <time>
  802cf0:	1009883a 	mov	r4,r2
  802cf4:	0809f940 	call	809f94 <srand>
	int r = rand();
  802cf8:	0809fb00 	call	809fb0 <rand>
  802cfc:	e0bffc15 	stw	r2,-16(fp)
	short int select = r % 4;
  802d00:	e0fffc17 	ldw	r3,-16(fp)
  802d04:	00a00034 	movhi	r2,32768
  802d08:	108000c4 	addi	r2,r2,3
  802d0c:	1886703a 	and	r3,r3,r2
  802d10:	e0ffff15 	stw	r3,-4(fp)
  802d14:	e0ffff17 	ldw	r3,-4(fp)
  802d18:	1804403a 	cmpge	r2,r3,zero
  802d1c:	10000a1e 	bne	r2,zero,802d48 <setToRandomDisplacement+0x74>
  802d20:	e0bfff17 	ldw	r2,-4(fp)
  802d24:	10bfffc4 	addi	r2,r2,-1
  802d28:	e0bfff15 	stw	r2,-4(fp)
  802d2c:	00bfff04 	movi	r2,-4
  802d30:	e0ffff17 	ldw	r3,-4(fp)
  802d34:	1886b03a 	or	r3,r3,r2
  802d38:	e0ffff15 	stw	r3,-4(fp)
  802d3c:	e0bfff17 	ldw	r2,-4(fp)
  802d40:	10800044 	addi	r2,r2,1
  802d44:	e0bfff15 	stw	r2,-4(fp)
  802d48:	e0bfff17 	ldw	r2,-4(fp)
  802d4c:	e0bffb0d 	sth	r2,-20(fp)
	Displacement *ptr;
	switch (select) {
  802d50:	e0fffb0f 	ldh	r3,-20(fp)
  802d54:	e0fffe15 	stw	r3,-8(fp)
  802d58:	e0fffe17 	ldw	r3,-8(fp)
  802d5c:	18800060 	cmpeqi	r2,r3,1
  802d60:	1000121e 	bne	r2,zero,802dac <setToRandomDisplacement+0xd8>
  802d64:	e0fffe17 	ldw	r3,-8(fp)
  802d68:	18800088 	cmpgei	r2,r3,2
  802d6c:	1000041e 	bne	r2,zero,802d80 <setToRandomDisplacement+0xac>
  802d70:	e0fffe17 	ldw	r3,-8(fp)
  802d74:	1805003a 	cmpeq	r2,r3,zero
  802d78:	1000081e 	bne	r2,zero,802d9c <setToRandomDisplacement+0xc8>
  802d7c:	00001606 	br	802dd8 <setToRandomDisplacement+0x104>
  802d80:	e0fffe17 	ldw	r3,-8(fp)
  802d84:	188000a0 	cmpeqi	r2,r3,2
  802d88:	10000c1e 	bne	r2,zero,802dbc <setToRandomDisplacement+0xe8>
  802d8c:	e0fffe17 	ldw	r3,-8(fp)
  802d90:	188000e0 	cmpeqi	r2,r3,3
  802d94:	10000d1e 	bne	r2,zero,802dcc <setToRandomDisplacement+0xf8>
  802d98:	00000f06 	br	802dd8 <setToRandomDisplacement+0x104>
	case 0:
		ptr = verticalDisplacementFunctionUp;
  802d9c:	008020b4 	movhi	r2,130
  802da0:	108bf804 	addi	r2,r2,12256
  802da4:	e0bffa15 	stw	r2,-24(fp)
		break;
  802da8:	00000b06 	br	802dd8 <setToRandomDisplacement+0x104>
	case 1:
		ptr = verticalDisplacementFunctionDown;
  802dac:	008020b4 	movhi	r2,130
  802db0:	108af804 	addi	r2,r2,11232
  802db4:	e0bffa15 	stw	r2,-24(fp)
		break;
  802db8:	00000706 	br	802dd8 <setToRandomDisplacement+0x104>
	case 2:
		ptr = circularDisplacementFunction;
  802dbc:	008020b4 	movhi	r2,130
  802dc0:	108cf804 	addi	r2,r2,13280
  802dc4:	e0bffa15 	stw	r2,-24(fp)
		break;
  802dc8:	00000306 	br	802dd8 <setToRandomDisplacement+0x104>
	case 3:
		ptr = arcDisplacementFunction;
  802dcc:	008020b4 	movhi	r2,130
  802dd0:	108ef804 	addi	r2,r2,15328
  802dd4:	e0bffa15 	stw	r2,-24(fp)
		break;
	}
	shark->displacement = ptr;
  802dd8:	e0fffd17 	ldw	r3,-12(fp)
  802ddc:	e0bffa17 	ldw	r2,-24(fp)
  802de0:	18800815 	stw	r2,32(r3)
}
  802de4:	e037883a 	mov	sp,fp
  802de8:	dfc00117 	ldw	ra,4(sp)
  802dec:	df000017 	ldw	fp,0(sp)
  802df0:	dec00204 	addi	sp,sp,8
  802df4:	f800283a 	ret

00802df8 <gameEndSequence>:
#include "gameEnd.h"

void gameEndSequence(void) {
  802df8:	defffe04 	addi	sp,sp,-8
  802dfc:	dfc00115 	stw	ra,4(sp)
  802e00:	df000015 	stw	fp,0(sp)
  802e04:	d839883a 	mov	fp,sp
	updateHighScoreBoard();
  802e08:	0803c4c0 	call	803c4c <updateHighScoreBoard>

	clearScreen();
  802e0c:	08058f40 	call	8058f4 <clearScreen>

	readHighScoreBoardFromSD();
  802e10:	08038f80 	call	8038f8 <readHighScoreBoardFromSD>
	drawScore();
  802e14:	08045300 	call	804530 <drawScore>
	delayUntilUPAndButtonPressed();
  802e18:	08032280 	call	803228 <delayUntilUPAndButtonPressed>

	clearScreen();
  802e1c:	08058f40 	call	8058f4 <clearScreen>

	initPlayer();
  802e20:	08035040 	call	803504 <initPlayer>
	setCurrentPlayerLives(3);
  802e24:	010000c4 	movi	r4,3
  802e28:	08044e00 	call	8044e0 <setCurrentPlayerLives>
	setCurrentPlayerScore(0);
  802e2c:	0009883a 	mov	r4,zero
  802e30:	08044900 	call	804490 <setCurrentPlayerScore>


	initSharks();
  802e34:	0804d640 	call	804d64 <initSharks>
	//DO ALL SHARK CLEARING/INITIALIZATION STUFF
	initBullets();
  802e38:	08018180 	call	801818 <initBullets>
	//DO ALL BULLET CLEARING/INITIALIZATION STUFF

	drawSplashScreen();
  802e3c:	08054880 	call	805488 <drawSplashScreen>
	delayUntilUPAndButtonPressed();
  802e40:	08032280 	call	803228 <delayUntilUPAndButtonPressed>

	clearScreen();
  802e44:	08058f40 	call	8058f4 <clearScreen>
}
  802e48:	e037883a 	mov	sp,fp
  802e4c:	dfc00117 	ldw	ra,4(sp)
  802e50:	df000017 	ldw	fp,0(sp)
  802e54:	dec00204 	addi	sp,sp,8
  802e58:	f800283a 	ret

00802e5c <handleKeyInput>:
#include "input.h"


void handleKeyInput(void){
  802e5c:	defffc04 	addi	sp,sp,-16
  802e60:	dfc00315 	stw	ra,12(sp)
  802e64:	df000215 	stw	fp,8(sp)
  802e68:	dc000115 	stw	r16,4(sp)
  802e6c:	df000104 	addi	fp,sp,4
	static short int edgeDetect0 = 0;
	static short int edgeDetect1 = 0;
	static short int edgeDetect2 = 0;
	static short int edgeDetect3 = 0;

	keyInput = IORD_8DIRECT(KEYS_BASE, 0);
  802e70:	00804034 	movhi	r2,256
  802e74:	10842004 	addi	r2,r2,4224
  802e78:	10800023 	ldbuio	r2,0(r2)
  802e7c:	d0a72705 	stb	r2,-25444(gp)
	char key0 = keyInput & 0x01;
  802e80:	d0a72703 	ldbu	r2,-25444(gp)
  802e84:	1080004c 	andi	r2,r2,1
  802e88:	e0bfffc5 	stb	r2,-1(fp)
	char key1 = keyInput & 0x02;
  802e8c:	d0a72703 	ldbu	r2,-25444(gp)
  802e90:	1080008c 	andi	r2,r2,2
  802e94:	e0bfff85 	stb	r2,-2(fp)
	char key2 = keyInput & 0x04;
  802e98:	d0a72703 	ldbu	r2,-25444(gp)
  802e9c:	1080010c 	andi	r2,r2,4
  802ea0:	e0bfff45 	stb	r2,-3(fp)
	char key3 = keyInput & 0x08;
  802ea4:	d0a72703 	ldbu	r2,-25444(gp)
  802ea8:	1080020c 	andi	r2,r2,8
  802eac:	e0bfff05 	stb	r2,-4(fp)

	// / *
	//functionality for keys being held
	if(key1) {
  802eb0:	e0bfff87 	ldb	r2,-2(fp)
  802eb4:	1005003a 	cmpeq	r2,r2,zero
  802eb8:	1000021e 	bne	r2,zero,802ec4 <handleKeyInput+0x68>
		moveDownPlayer();
  802ebc:	08036740 	call	803674 <moveDownPlayer>
  802ec0:	00000606 	br	802edc <handleKeyInput+0x80>
	} else if (key2) {
  802ec4:	e0bfff47 	ldb	r2,-3(fp)
  802ec8:	1005003a 	cmpeq	r2,r2,zero
  802ecc:	1000021e 	bne	r2,zero,802ed8 <handleKeyInput+0x7c>
		moveUpPlayer();
  802ed0:	08035e80 	call	8035e8 <moveUpPlayer>
  802ed4:	00000106 	br	802edc <handleKeyInput+0x80>
	} else {
		keepPlayerStationary();
  802ed8:	08037000 	call	803700 <keepPlayerStationary>
	}

	//functionality for keys being pressed.
	if (!key0 && (edgeDetect0 == 0)) {
  802edc:	e0bfffc7 	ldb	r2,-1(fp)
  802ee0:	1004c03a 	cmpne	r2,r2,zero
  802ee4:	1000091e 	bne	r2,zero,802f0c <handleKeyInput+0xb0>
  802ee8:	d0a7268b 	ldhu	r2,-25446(gp)
  802eec:	10bfffcc 	andi	r2,r2,65535
  802ef0:	10a0001c 	xori	r2,r2,32768
  802ef4:	10a00004 	addi	r2,r2,-32768
  802ef8:	1004c03a 	cmpne	r2,r2,zero
  802efc:	1000031e 	bne	r2,zero,802f0c <handleKeyInput+0xb0>
		edgeDetect0 = 1;
  802f00:	00800044 	movi	r2,1
  802f04:	d0a7268d 	sth	r2,-25446(gp)
	} else {
		keepPlayerStationary();
	}

	//functionality for keys being pressed.
	if (!key0 && (edgeDetect0 == 0)) {
  802f08:	00002d06 	br	802fc0 <handleKeyInput+0x164>
		edgeDetect0 = 1;
	} else if (key0 && (edgeDetect0 == 1)) {
  802f0c:	e0bfffc7 	ldb	r2,-1(fp)
  802f10:	1005003a 	cmpeq	r2,r2,zero
  802f14:	10002a1e 	bne	r2,zero,802fc0 <handleKeyInput+0x164>
  802f18:	d0a7268b 	ldhu	r2,-25446(gp)
  802f1c:	10bfffcc 	andi	r2,r2,65535
  802f20:	10a0001c 	xori	r2,r2,32768
  802f24:	10a00004 	addi	r2,r2,-32768
  802f28:	10800058 	cmpnei	r2,r2,1
  802f2c:	1000241e 	bne	r2,zero,802fc0 <handleKeyInput+0x164>
		edgeDetect0 = 0;
  802f30:	d027268d 	sth	zero,-25446(gp)
		createBullet(PLAYERBULLET, player.x + PLAYER_WIDTH - 1, player.y + 0.5 * PLAYER_HEIGHT - GUN_OFFSET);
  802f34:	008020b4 	movhi	r2,130
  802f38:	10819c04 	addi	r2,r2,1648
  802f3c:	10800017 	ldw	r2,0(r2)
  802f40:	140006c4 	addi	r16,r2,27
  802f44:	008020b4 	movhi	r2,130
  802f48:	10819c04 	addi	r2,r2,1648
  802f4c:	11000217 	ldw	r4,8(r2)
  802f50:	0808b480 	call	808b48 <__floatsidf>
  802f54:	100b883a 	mov	r5,r2
  802f58:	180d883a 	mov	r6,r3
  802f5c:	2809883a 	mov	r4,r5
  802f60:	300b883a 	mov	r5,r6
  802f64:	000d883a 	mov	r6,zero
  802f68:	01d00af4 	movhi	r7,16427
  802f6c:	08082100 	call	808210 <__adddf3>
  802f70:	1009883a 	mov	r4,r2
  802f74:	180b883a 	mov	r5,r3
  802f78:	2005883a 	mov	r2,r4
  802f7c:	2807883a 	mov	r3,r5
  802f80:	1009883a 	mov	r4,r2
  802f84:	180b883a 	mov	r5,r3
  802f88:	000d883a 	mov	r6,zero
  802f8c:	01d00634 	movhi	r7,16408
  802f90:	08081900 	call	808190 <__subdf3>
  802f94:	1009883a 	mov	r4,r2
  802f98:	180b883a 	mov	r5,r3
  802f9c:	2005883a 	mov	r2,r4
  802fa0:	2807883a 	mov	r3,r5
  802fa4:	1009883a 	mov	r4,r2
  802fa8:	180b883a 	mov	r5,r3
  802fac:	0808c400 	call	808c40 <__fixdfsi>
  802fb0:	100d883a 	mov	r6,r2
  802fb4:	0009883a 	mov	r4,zero
  802fb8:	800b883a 	mov	r5,r16
  802fbc:	08018b00 	call	8018b0 <createBullet>
	}

	if (!key1 && (edgeDetect1 == 0)) {
  802fc0:	e0bfff87 	ldb	r2,-2(fp)
  802fc4:	1004c03a 	cmpne	r2,r2,zero
  802fc8:	1000091e 	bne	r2,zero,802ff0 <handleKeyInput+0x194>
  802fcc:	d0a7260b 	ldhu	r2,-25448(gp)
  802fd0:	10bfffcc 	andi	r2,r2,65535
  802fd4:	10a0001c 	xori	r2,r2,32768
  802fd8:	10a00004 	addi	r2,r2,-32768
  802fdc:	1004c03a 	cmpne	r2,r2,zero
  802fe0:	1000031e 	bne	r2,zero,802ff0 <handleKeyInput+0x194>
		edgeDetect1 = 1;
  802fe4:	00800044 	movi	r2,1
  802fe8:	d0a7260d 	sth	r2,-25448(gp)
	} else if (key0 && (edgeDetect0 == 1)) {
		edgeDetect0 = 0;
		createBullet(PLAYERBULLET, player.x + PLAYER_WIDTH - 1, player.y + 0.5 * PLAYER_HEIGHT - GUN_OFFSET);
	}

	if (!key1 && (edgeDetect1 == 0)) {
  802fec:	00000a06 	br	803018 <handleKeyInput+0x1bc>
		edgeDetect1 = 1;
	} else if (key1 && (edgeDetect1 == 1)) {
  802ff0:	e0bfff87 	ldb	r2,-2(fp)
  802ff4:	1005003a 	cmpeq	r2,r2,zero
  802ff8:	1000071e 	bne	r2,zero,803018 <handleKeyInput+0x1bc>
  802ffc:	d0a7260b 	ldhu	r2,-25448(gp)
  803000:	10bfffcc 	andi	r2,r2,65535
  803004:	10a0001c 	xori	r2,r2,32768
  803008:	10a00004 	addi	r2,r2,-32768
  80300c:	10800058 	cmpnei	r2,r2,1
  803010:	1000011e 	bne	r2,zero,803018 <handleKeyInput+0x1bc>
		edgeDetect1 = 0;
  803014:	d027260d 	sth	zero,-25448(gp)
		//playPlayerDeath();
	}

	if (!key2 && (edgeDetect2 == 0)) {
  803018:	e0bfff47 	ldb	r2,-3(fp)
  80301c:	1004c03a 	cmpne	r2,r2,zero
  803020:	1000091e 	bne	r2,zero,803048 <handleKeyInput+0x1ec>
  803024:	d0a7258b 	ldhu	r2,-25450(gp)
  803028:	10bfffcc 	andi	r2,r2,65535
  80302c:	10a0001c 	xori	r2,r2,32768
  803030:	10a00004 	addi	r2,r2,-32768
  803034:	1004c03a 	cmpne	r2,r2,zero
  803038:	1000031e 	bne	r2,zero,803048 <handleKeyInput+0x1ec>
		edgeDetect2 = 1;
  80303c:	00800044 	movi	r2,1
  803040:	d0a7258d 	sth	r2,-25450(gp)
	} else if (key1 && (edgeDetect1 == 1)) {
		edgeDetect1 = 0;
		//playPlayerDeath();
	}

	if (!key2 && (edgeDetect2 == 0)) {
  803044:	00000a06 	br	803070 <handleKeyInput+0x214>
		edgeDetect2 = 1;
	} else if (key2 && (edgeDetect2 == 1)) {
  803048:	e0bfff47 	ldb	r2,-3(fp)
  80304c:	1005003a 	cmpeq	r2,r2,zero
  803050:	1000071e 	bne	r2,zero,803070 <handleKeyInput+0x214>
  803054:	d0a7258b 	ldhu	r2,-25450(gp)
  803058:	10bfffcc 	andi	r2,r2,65535
  80305c:	10a0001c 	xori	r2,r2,32768
  803060:	10a00004 	addi	r2,r2,-32768
  803064:	10800058 	cmpnei	r2,r2,1
  803068:	1000011e 	bne	r2,zero,803070 <handleKeyInput+0x214>
		edgeDetect2 = 0;
  80306c:	d027258d 	sth	zero,-25450(gp)
		//updateHighScoreBoard();
		//playTheme();
	} // */

	if (!key3 && (edgeDetect3 == 0)) {
  803070:	e0bfff07 	ldb	r2,-4(fp)
  803074:	1004c03a 	cmpne	r2,r2,zero
  803078:	1000091e 	bne	r2,zero,8030a0 <handleKeyInput+0x244>
  80307c:	d0a7250b 	ldhu	r2,-25452(gp)
  803080:	10bfffcc 	andi	r2,r2,65535
  803084:	10a0001c 	xori	r2,r2,32768
  803088:	10a00004 	addi	r2,r2,-32768
  80308c:	1004c03a 	cmpne	r2,r2,zero
  803090:	1000031e 	bne	r2,zero,8030a0 <handleKeyInput+0x244>
		edgeDetect3 = 1;
  803094:	00800044 	movi	r2,1
  803098:	d0a7250d 	sth	r2,-25452(gp)
		edgeDetect2 = 0;
		//updateHighScoreBoard();
		//playTheme();
	} // */

	if (!key3 && (edgeDetect3 == 0)) {
  80309c:	00000b06 	br	8030cc <handleKeyInput+0x270>
		edgeDetect3 = 1;
	} else if (key3 && (edgeDetect3 == 1)) {
  8030a0:	e0bfff07 	ldb	r2,-4(fp)
  8030a4:	1005003a 	cmpeq	r2,r2,zero
  8030a8:	1000081e 	bne	r2,zero,8030cc <handleKeyInput+0x270>
  8030ac:	d0a7250b 	ldhu	r2,-25452(gp)
  8030b0:	10bfffcc 	andi	r2,r2,65535
  8030b4:	10a0001c 	xori	r2,r2,32768
  8030b8:	10a00004 	addi	r2,r2,-32768
  8030bc:	10800058 	cmpnei	r2,r2,1
  8030c0:	1000021e 	bne	r2,zero,8030cc <handleKeyInput+0x270>
		edgeDetect3 = 0;
  8030c4:	d027250d 	sth	zero,-25452(gp)
		hitPlayer(); // TEST only
  8030c8:	080375c0 	call	80375c <hitPlayer>
		//updateCurrentPlayerScore(250);
		//playSharkDeath();
	}
}
  8030cc:	e037883a 	mov	sp,fp
  8030d0:	dfc00217 	ldw	ra,8(sp)
  8030d4:	df000117 	ldw	fp,4(sp)
  8030d8:	dc000017 	ldw	r16,0(sp)
  8030dc:	dec00304 	addi	sp,sp,12
  8030e0:	f800283a 	ret

008030e4 <handleSwitchInput>:

void handleSwitchInput(void){
  8030e4:	defffe04 	addi	sp,sp,-8
  8030e8:	dfc00115 	stw	ra,4(sp)
  8030ec:	df000015 	stw	fp,0(sp)
  8030f0:	d839883a 	mov	fp,sp
	static char SWInput;
	static short int edgeDetect = 0;
	static char prevSwInput = 0x03;
	static short int scoresShown = 0;
	SWInput = IORD_8DIRECT(SWITCHES_BASE, 0);
  8030f4:	00804034 	movhi	r2,256
  8030f8:	10841804 	addi	r2,r2,4192
  8030fc:	10800023 	ldbuio	r2,0(r2)
  803100:	d0a72885 	stb	r2,-25438(gp)

	if((SWInput & 0x0F) != (prevSwInput & 0x0F)) {
  803104:	d0a72883 	ldbu	r2,-25438(gp)
  803108:	10803fcc 	andi	r2,r2,255
  80310c:	10c003cc 	andi	r3,r2,15
  803110:	d0a00303 	ldbu	r2,-32756(gp)
  803114:	10803fcc 	andi	r2,r2,255
  803118:	108003cc 	andi	r2,r2,15
  80311c:	18800526 	beq	r3,r2,803134 <handleSwitchInput+0x50>
		updateAudioWithVolume(SWInput);
  803120:	d0a72883 	ldbu	r2,-25438(gp)
  803124:	11003fcc 	andi	r4,r2,255
  803128:	2100201c 	xori	r4,r4,128
  80312c:	213fe004 	addi	r4,r4,-128
  803130:	0800de40 	call	800de4 <updateAudioWithVolume>
	}
	prevSwInput = SWInput;
  803134:	d0a72883 	ldbu	r2,-25438(gp)
  803138:	d0a00305 	stb	r2,-32756(gp)

	if ((SWInput & 0x80) != 0) {
  80313c:	d0a72883 	ldbu	r2,-25438(gp)
  803140:	10803fcc 	andi	r2,r2,255
  803144:	1080201c 	xori	r2,r2,128
  803148:	10bfe004 	addi	r2,r2,-128
  80314c:	1004403a 	cmpge	r2,r2,zero
  803150:	10000b1e 	bne	r2,zero,803180 <handleSwitchInput+0x9c>
		if(scoresShown == 0){
  803154:	d0a7278b 	ldhu	r2,-25442(gp)
  803158:	10bfffcc 	andi	r2,r2,65535
  80315c:	10a0001c 	xori	r2,r2,32768
  803160:	10a00004 	addi	r2,r2,-32768
  803164:	1004c03a 	cmpne	r2,r2,zero
  803168:	1000021e 	bne	r2,zero,803174 <handleSwitchInput+0x90>
			readHighScoreBoardFromSD();
  80316c:	08038f80 	call	8038f8 <readHighScoreBoardFromSD>
			drawScore();
  803170:	08045300 	call	804530 <drawScore>
		}
		scoresShown = 1;
  803174:	00800044 	movi	r2,1
  803178:	d0a7278d 	sth	r2,-25442(gp)
  80317c:	00000906 	br	8031a4 <handleSwitchInput+0xc0>
	} else {
		if(scoresShown == 1){
  803180:	d0a7278b 	ldhu	r2,-25442(gp)
  803184:	10bfffcc 	andi	r2,r2,65535
  803188:	10a0001c 	xori	r2,r2,32768
  80318c:	10a00004 	addi	r2,r2,-32768
  803190:	10800058 	cmpnei	r2,r2,1
  803194:	1000021e 	bne	r2,zero,8031a0 <handleSwitchInput+0xbc>
			clearScore();
  803198:	08047680 	call	804768 <clearScore>
			drawInGameInfo();
  80319c:	08047940 	call	804794 <drawInGameInfo>
		}
		scoresShown = 0;
  8031a0:	d027278d 	sth	zero,-25442(gp)
	}

}
  8031a4:	e037883a 	mov	sp,fp
  8031a8:	dfc00117 	ldw	ra,4(sp)
  8031ac:	df000017 	ldw	fp,0(sp)
  8031b0:	dec00204 	addi	sp,sp,8
  8031b4:	f800283a 	ret

008031b8 <handleAtariInput>:

void handleAtariInput(void){
  8031b8:	deffff04 	addi	sp,sp,-4
  8031bc:	df000015 	stw	fp,0(sp)
  8031c0:	d839883a 	mov	fp,sp
	static char atariUp;
	static char atariDown;
	static char atariFire;
	static short int edgeDetect = 0;

	atariButtons = (IORD_8DIRECT(PROCESSORGPIN_BASE, 0) & 0x0F);
  8031c4:	00804034 	movhi	r2,256
  8031c8:	10842c04 	addi	r2,r2,4272
  8031cc:	10800023 	ldbuio	r2,0(r2)
  8031d0:	108003cc 	andi	r2,r2,15
  8031d4:	d0a72a45 	stb	r2,-25431(gp)
	atariFire = atariButtons & 0x08;
  8031d8:	d0a72a43 	ldbu	r2,-25431(gp)
  8031dc:	1080020c 	andi	r2,r2,8
  8031e0:	d0a72985 	stb	r2,-25434(gp)
	atariUp = atariButtons & 0x02;
  8031e4:	d0a72a43 	ldbu	r2,-25431(gp)
  8031e8:	1080008c 	andi	r2,r2,2
  8031ec:	d0a72a05 	stb	r2,-25432(gp)
	atariDown = atariButtons & 0x04;
  8031f0:	d0a72a43 	ldbu	r2,-25431(gp)
  8031f4:	1080010c 	andi	r2,r2,4
  8031f8:	d0a729c5 	stb	r2,-25433(gp)
	IOWR_16DIRECT(LEDS_BASE, 0, atariButtons);
  8031fc:	d0a72a43 	ldbu	r2,-25431(gp)
  803200:	10c03fcc 	andi	r3,r2,255
  803204:	18c0201c 	xori	r3,r3,128
  803208:	18ffe004 	addi	r3,r3,-128
  80320c:	00804034 	movhi	r2,256
  803210:	10841c04 	addi	r2,r2,4208
  803214:	10c0002d 	sthio	r3,0(r2)
	} else if (atariDown != 0x00) {
		moveDownPlayer();
	} else {
		keepPlayerStationary();
	} */
}
  803218:	e037883a 	mov	sp,fp
  80321c:	df000017 	ldw	fp,0(sp)
  803220:	dec00104 	addi	sp,sp,4
  803224:	f800283a 	ret

00803228 <delayUntilUPAndButtonPressed>:

void delayUntilUPAndButtonPressed(void) {
  803228:	defffe04 	addi	sp,sp,-8
  80322c:	df000115 	stw	fp,4(sp)
  803230:	df000104 	addi	fp,sp,4
	char atariFire;
	char keys;
	char key4;
	
	while(1) {
		atariButtons = (IORD_8DIRECT(PROCESSORGPIN_BASE, 0) & 0x0F);
  803234:	00804034 	movhi	r2,256
  803238:	10842c04 	addi	r2,r2,4272
  80323c:	10800023 	ldbuio	r2,0(r2)
  803240:	108003cc 	andi	r2,r2,15
  803244:	e0bfffc5 	stb	r2,-1(fp)
		keys = (IORD_8DIRECT(KEYS_BASE, 0) & 0x0F);
  803248:	00804034 	movhi	r2,256
  80324c:	10842004 	addi	r2,r2,4224
  803250:	10800023 	ldbuio	r2,0(r2)
  803254:	108003cc 	andi	r2,r2,15
  803258:	e0bfff45 	stb	r2,-3(fp)
		atariFire = atariButtons & 0x8;
  80325c:	e0bfffc3 	ldbu	r2,-1(fp)
  803260:	1080020c 	andi	r2,r2,8
  803264:	e0bfff85 	stb	r2,-2(fp)
		key4 = keys & 0x8;
  803268:	e0bfff43 	ldbu	r2,-3(fp)
  80326c:	1080020c 	andi	r2,r2,8
  803270:	e0bfff05 	stb	r2,-4(fp)
		if (atariFire || key4) {
  803274:	e0bfff87 	ldb	r2,-2(fp)
  803278:	1004c03a 	cmpne	r2,r2,zero
  80327c:	1000041e 	bne	r2,zero,803290 <delayUntilUPAndButtonPressed+0x68>
  803280:	e0bfff07 	ldb	r2,-4(fp)
  803284:	1004c03a 	cmpne	r2,r2,zero
  803288:	1000011e 	bne	r2,zero,803290 <delayUntilUPAndButtonPressed+0x68>
			break;
		}
	}
  80328c:	003fe906 	br	803234 <delayUntilUPAndButtonPressed+0xc>
}
  803290:	e037883a 	mov	sp,fp
  803294:	df000017 	ldw	fp,0(sp)
  803298:	dec00104 	addi	sp,sp,4
  80329c:	f800283a 	ret

008032a0 <gameStart>:

int gameStart(void){
  8032a0:	defffd04 	addi	sp,sp,-12
  8032a4:	df000215 	stw	fp,8(sp)
  8032a8:	df000204 	addi	fp,sp,8
	char atariButtons;
	char atariFire;
	char keys;
	char key4;

	atariButtons = (IORD_8DIRECT(PROCESSORGPIN_BASE, 0) & 0x0F);
  8032ac:	00804034 	movhi	r2,256
  8032b0:	10842c04 	addi	r2,r2,4272
  8032b4:	10800023 	ldbuio	r2,0(r2)
  8032b8:	108003cc 	andi	r2,r2,15
  8032bc:	e0bffec5 	stb	r2,-5(fp)
	keys = (IORD_8DIRECT(KEYS_BASE, 0) & 0x0F);
  8032c0:	00804034 	movhi	r2,256
  8032c4:	10842004 	addi	r2,r2,4224
  8032c8:	10800023 	ldbuio	r2,0(r2)
  8032cc:	108003cc 	andi	r2,r2,15
  8032d0:	e0bffe45 	stb	r2,-7(fp)
	atariFire = atariButtons & 0x8;
  8032d4:	e0bffec3 	ldbu	r2,-5(fp)
  8032d8:	1080020c 	andi	r2,r2,8
  8032dc:	e0bffe85 	stb	r2,-6(fp)
	key4 = keys & 0x8;
  8032e0:	e0bffe43 	ldbu	r2,-7(fp)
  8032e4:	1080020c 	andi	r2,r2,8
  8032e8:	e0bffe05 	stb	r2,-8(fp)

	if (atariFire || key4) {
  8032ec:	e0bffe87 	ldb	r2,-6(fp)
  8032f0:	1004c03a 	cmpne	r2,r2,zero
  8032f4:	1000031e 	bne	r2,zero,803304 <gameStart+0x64>
  8032f8:	e0bffe07 	ldb	r2,-8(fp)
  8032fc:	1005003a 	cmpeq	r2,r2,zero
  803300:	1000031e 	bne	r2,zero,803310 <gameStart+0x70>
		return 1;
  803304:	00800044 	movi	r2,1
  803308:	e0bfff15 	stw	r2,-4(fp)
  80330c:	00000106 	br	803314 <gameStart+0x74>
	} else {
		return 0;
  803310:	e03fff15 	stw	zero,-4(fp)
  803314:	e0bfff17 	ldw	r2,-4(fp)
	}
}
  803318:	e037883a 	mov	sp,fp
  80331c:	df000017 	ldw	fp,0(sp)
  803320:	dec00104 	addi	sp,sp,4
  803324:	f800283a 	ret

00803328 <init>:
#include "score.h"
#include "input.h"
#include "splash.h"
#include "gameEnd.h"

int init(void) {
  803328:	defffd04 	addi	sp,sp,-12
  80332c:	dfc00215 	stw	ra,8(sp)
  803330:	df000115 	stw	fp,4(sp)
  803334:	df000104 	addi	fp,sp,4
	if (openSdCard() == -1) {
  803338:	08049f00 	call	8049f0 <openSdCard>
  80333c:	10bfffd8 	cmpnei	r2,r2,-1
  803340:	1000061e 	bne	r2,zero,80335c <init+0x34>
		printf("Error: Failed to open sd card\n");
  803344:	010020b4 	movhi	r4,130
  803348:	21306f04 	addi	r4,r4,-15940
  80334c:	0809f800 	call	809f80 <puts>
		return -1;
  803350:	00bfffc4 	movi	r2,-1
  803354:	e0bfff15 	stw	r2,-4(fp)
  803358:	00001106 	br	8033a0 <init+0x78>
	} else {
		printf("Opened SD card\n");
  80335c:	010020b4 	movhi	r4,130
  803360:	21307704 	addi	r4,r4,-15908
  803364:	0809f800 	call	809f80 <puts>
	}

	initVga();
  803368:	08058600 	call	805860 <initVga>
	parseBmps();
  80336c:	08015480 	call	801548 <parseBmps>
	drawSplashScreen();
  803370:	08054880 	call	805488 <drawSplashScreen>
	setupAudio();
  803374:	08002040 	call	800204 <setupAudio>
	setupDisplacement();
  803378:	08027080 	call	802708 <setupDisplacement>
	initScoreBoard();
  80337c:	08037ec0 	call	8037ec <initScoreBoard>

	initBullets();
  803380:	08018180 	call	801818 <initBullets>
	initPlayer();
  803384:	08035040 	call	803504 <initPlayer>
	initSharks();
  803388:	0804d640 	call	804d64 <initSharks>
	initCollision();
  80338c:	08020000 	call	802000 <initCollision>

	setHardwareTimerPeriod(CLOCK_FREQ/30);
  803390:	01000674 	movhi	r4,25
  803394:	211b9a84 	addi	r4,r4,28266
  803398:	08057900 	call	805790 <setHardwareTimerPeriod>
	return 0;
  80339c:	e03fff15 	stw	zero,-4(fp)
  8033a0:	e0bfff17 	ldw	r2,-4(fp)
}
  8033a4:	e037883a 	mov	sp,fp
  8033a8:	dfc00117 	ldw	ra,4(sp)
  8033ac:	df000017 	ldw	fp,0(sp)
  8033b0:	dec00204 	addi	sp,sp,8
  8033b4:	f800283a 	ret

008033b8 <main>:

int main() {
  8033b8:	defffb04 	addi	sp,sp,-20
  8033bc:	dfc00415 	stw	ra,16(sp)
  8033c0:	df000315 	stw	fp,12(sp)
  8033c4:	df000304 	addi	fp,sp,12
	int count = 0;
  8033c8:	e03ffe15 	stw	zero,-8(fp)
	short int displaySplashScreen = 1;
  8033cc:	00800044 	movi	r2,1
  8033d0:	e0bffd0d 	sth	r2,-12(fp)

	if (init() == -1)
  8033d4:	08033280 	call	803328 <init>
  8033d8:	10bfffd8 	cmpnei	r2,r2,-1
  8033dc:	1000031e 	bne	r2,zero,8033ec <main+0x34>
		return -1;
  8033e0:	00bfffc4 	movi	r2,-1
  8033e4:	e0bfff15 	stw	r2,-4(fp)
  8033e8:	00004006 	br	8034ec <main+0x134>

	createShark(22, 100, 0, (Displacement *)&doNotMove);
  8033ec:	01000584 	movi	r4,22
  8033f0:	01401904 	movi	r5,100
  8033f4:	000d883a 	mov	r6,zero
  8033f8:	01c020b4 	movhi	r7,130
  8033fc:	39cdf804 	addi	r7,r7,14304
  803400:	08051340 	call	805134 <createShark>
	createShark(45, 200, 200, (Displacement *)&doNotMove);
  803404:	01000b44 	movi	r4,45
  803408:	01403204 	movi	r5,200
  80340c:	01803204 	movi	r6,200
  803410:	01c020b4 	movhi	r7,130
  803414:	39cdf804 	addi	r7,r7,14304
  803418:	08051340 	call	805134 <createShark>

	drawAllSharks();
  80341c:	08050940 	call	805094 <drawAllSharks>
	startHardwareTimer();
  803420:	08058340 	call	805834 <startHardwareTimer>

	playTheme();
  803424:	0800c100 	call	800c10 <playTheme>

	printf("%d: count \n", count);
  803428:	010020b4 	movhi	r4,130
  80342c:	21307b04 	addi	r4,r4,-15892
  803430:	e17ffe17 	ldw	r5,-8(fp)
  803434:	0809e680 	call	809e68 <printf>
  803438:	00000006 	br	80343c <main+0x84>
	// main game loop;
	while(1) {
		if (hasHardwareTimerExpired() == 1) {
  80343c:	080580c0 	call	80580c <hasHardwareTimerExpired>
  803440:	10800058 	cmpnei	r2,r2,1
  803444:	103ffd1e 	bne	r2,zero,80343c <main+0x84>
			startHardwareTimer();
  803448:	08058340 	call	805834 <startHardwareTimer>

			if (displaySplashScreen) {
  80344c:	e0bffd0f 	ldh	r2,-12(fp)
  803450:	1005003a 	cmpeq	r2,r2,zero
  803454:	1000071e 	bne	r2,zero,803474 <main+0xbc>
				if(gameStart()) {
  803458:	08032a00 	call	8032a0 <gameStart>
  80345c:	1005003a 	cmpeq	r2,r2,zero
  803460:	103ff61e 	bne	r2,zero,80343c <main+0x84>
					clearSplashScreen();
  803464:	08054d80 	call	8054d8 <clearSplashScreen>
					stopTheme();
  803468:	0800c540 	call	800c54 <stopTheme>
					displaySplashScreen = 0;	
  80346c:	e03ffd0d 	sth	zero,-12(fp)
  803470:	003ff206 	br	80343c <main+0x84>
				}
			} else {
				count++;
  803474:	e0bffe17 	ldw	r2,-8(fp)
  803478:	10800044 	addi	r2,r2,1
  80347c:	e0bffe15 	stw	r2,-8(fp)

				moveAllSharks();
  803480:	08050440 	call	805044 <moveAllSharks>
				drawAllSharks();
  803484:	08050940 	call	805094 <drawAllSharks>
				drawInGameInfo(); // TBD: in actual game loop, only call this function when an event happens (like score inc/dec, or lives inc/dec)
  803488:	08047940 	call	804794 <drawInGameInfo>

				handleKeyInput();
  80348c:	0802e5c0 	call	802e5c <handleKeyInput>
				handleSwitchInput();
  803490:	08030e40 	call	8030e4 <handleSwitchInput>
				handleAtariInput();
  803494:	08031b80 	call	8031b8 <handleAtariInput>

				moveAllBullets();
  803498:	08019f00 	call	8019f0 <moveAllBullets>

				cleanupDeadSharks();
  80349c:	080536c0 	call	80536c <cleanupDeadSharks>

				doSharkBulletCollision();
  8034a0:	08025bc0 	call	8025bc <doSharkBulletCollision>
				doPlayerBulletCollision();
  8034a4:	08026640 	call	802664 <doPlayerBulletCollision>
				if(getCurrentPlayerLives() == 0) {
  8034a8:	080450c0 	call	80450c <getCurrentPlayerLives>
  8034ac:	1004c03a 	cmpne	r2,r2,zero
  8034b0:	1000021e 	bne	r2,zero,8034bc <main+0x104>
					gameEndSequence();
  8034b4:	0802df80 	call	802df8 <gameEndSequence>
					//displaySplashScreen = 1;
					continue;
  8034b8:	003fe006 	br	80343c <main+0x84>
				}

				drawAllBullets();
  8034bc:	0801b700 	call	801b70 <drawAllBullets>

				alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  8034c0:	d1271917 	ldw	r4,-25500(gp)
  8034c4:	08154940 	call	815494 <alt_up_pixel_buffer_dma_swap_buffers>
				while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  8034c8:	d1271917 	ldw	r4,-25500(gp)
  8034cc:	08154ec0 	call	8154ec <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  8034d0:	1004c03a 	cmpne	r2,r2,zero
  8034d4:	103ffc1e 	bne	r2,zero,8034c8 <main+0x110>
				cleanupDeadSharks();
  8034d8:	080536c0 	call	80536c <cleanupDeadSharks>
				eraseAllSharks();
  8034dc:	08050e40 	call	8050e4 <eraseAllSharks>
				eraseAllBullets();
  8034e0:	0801bf40 	call	801bf4 <eraseAllBullets>
				erasePlayer();
  8034e4:	08035a40 	call	8035a4 <erasePlayer>
			}
		}
	}
  8034e8:	003fd406 	br	80343c <main+0x84>

	freeBmps();
	return 0;
}
  8034ec:	e0bfff17 	ldw	r2,-4(fp)
  8034f0:	e037883a 	mov	sp,fp
  8034f4:	dfc00117 	ldw	ra,4(sp)
  8034f8:	df000017 	ldw	fp,0(sp)
  8034fc:	dec00204 	addi	sp,sp,8
  803500:	f800283a 	ret

00803504 <initPlayer>:
#include "player.h"
#include "audio.h"
#include "score.h"

void initPlayer() {
  803504:	deffff04 	addi	sp,sp,-4
  803508:	df000015 	stw	fp,0(sp)
  80350c:	d839883a 	mov	fp,sp
	player.x = 10;
  803510:	00c020b4 	movhi	r3,130
  803514:	18c19c04 	addi	r3,r3,1648
  803518:	00800284 	movi	r2,10
  80351c:	18800015 	stw	r2,0(r3)
	player.y = 90;
  803520:	00c020b4 	movhi	r3,130
  803524:	18c19c04 	addi	r3,r3,1648
  803528:	00801684 	movi	r2,90
  80352c:	18800215 	stw	r2,8(r3)
	player.prevX = 10;
  803530:	00c020b4 	movhi	r3,130
  803534:	18c19c04 	addi	r3,r3,1648
  803538:	00800284 	movi	r2,10
  80353c:	18800115 	stw	r2,4(r3)
	player.prevY = 90;
  803540:	00c020b4 	movhi	r3,130
  803544:	18c19c04 	addi	r3,r3,1648
  803548:	00801684 	movi	r2,90
  80354c:	18800315 	stw	r2,12(r3)
}
  803550:	e037883a 	mov	sp,fp
  803554:	df000017 	ldw	fp,0(sp)
  803558:	dec00104 	addi	sp,sp,4
  80355c:	f800283a 	ret

00803560 <drawPlayer>:

void drawPlayer() {
  803560:	defffe04 	addi	sp,sp,-8
  803564:	dfc00115 	stw	ra,4(sp)
  803568:	df000015 	stw	fp,0(sp)
  80356c:	d839883a 	mov	fp,sp
	drawBmp(playerBmp, player.x, player.y);
  803570:	d1271a17 	ldw	r4,-25496(gp)
  803574:	008020b4 	movhi	r2,130
  803578:	10819c04 	addi	r2,r2,1648
  80357c:	11400017 	ldw	r5,0(r2)
  803580:	008020b4 	movhi	r2,130
  803584:	10819c04 	addi	r2,r2,1648
  803588:	11800217 	ldw	r6,8(r2)
  80358c:	08016440 	call	801644 <drawBmp>
}
  803590:	e037883a 	mov	sp,fp
  803594:	dfc00117 	ldw	ra,4(sp)
  803598:	df000017 	ldw	fp,0(sp)
  80359c:	dec00204 	addi	sp,sp,8
  8035a0:	f800283a 	ret

008035a4 <erasePlayer>:

void erasePlayer() {
  8035a4:	defffe04 	addi	sp,sp,-8
  8035a8:	dfc00115 	stw	ra,4(sp)
  8035ac:	df000015 	stw	fp,0(sp)
  8035b0:	d839883a 	mov	fp,sp
	eraseBmp(playerBmp, player.prevX, player.prevY);
  8035b4:	d1271a17 	ldw	r4,-25496(gp)
  8035b8:	008020b4 	movhi	r2,130
  8035bc:	10819c04 	addi	r2,r2,1648
  8035c0:	11400117 	ldw	r5,4(r2)
  8035c4:	008020b4 	movhi	r2,130
  8035c8:	10819c04 	addi	r2,r2,1648
  8035cc:	11800317 	ldw	r6,12(r2)
  8035d0:	08017b80 	call	8017b8 <eraseBmp>
}
  8035d4:	e037883a 	mov	sp,fp
  8035d8:	dfc00117 	ldw	ra,4(sp)
  8035dc:	df000017 	ldw	fp,0(sp)
  8035e0:	dec00204 	addi	sp,sp,8
  8035e4:	f800283a 	ret

008035e8 <moveUpPlayer>:

void moveUpPlayer() {
  8035e8:	defffe04 	addi	sp,sp,-8
  8035ec:	dfc00115 	stw	ra,4(sp)
  8035f0:	df000015 	stw	fp,0(sp)
  8035f4:	d839883a 	mov	fp,sp
	player.prevY = player.y;
  8035f8:	008020b4 	movhi	r2,130
  8035fc:	10819c04 	addi	r2,r2,1648
  803600:	10c00217 	ldw	r3,8(r2)
  803604:	008020b4 	movhi	r2,130
  803608:	10819c04 	addi	r2,r2,1648
  80360c:	10c00315 	stw	r3,12(r2)

	if (player.y > 0)
  803610:	008020b4 	movhi	r2,130
  803614:	10819c04 	addi	r2,r2,1648
  803618:	10800217 	ldw	r2,8(r2)
  80361c:	10800050 	cmplti	r2,r2,1
  803620:	1000071e 	bne	r2,zero,803640 <moveUpPlayer+0x58>
		player.y = player.y - 2;
  803624:	008020b4 	movhi	r2,130
  803628:	10819c04 	addi	r2,r2,1648
  80362c:	10800217 	ldw	r2,8(r2)
  803630:	10ffff84 	addi	r3,r2,-2
  803634:	008020b4 	movhi	r2,130
  803638:	10819c04 	addi	r2,r2,1648
  80363c:	10c00215 	stw	r3,8(r2)

	drawBmp(playerBmp, player.x, player.y);
  803640:	d1271a17 	ldw	r4,-25496(gp)
  803644:	008020b4 	movhi	r2,130
  803648:	10819c04 	addi	r2,r2,1648
  80364c:	11400017 	ldw	r5,0(r2)
  803650:	008020b4 	movhi	r2,130
  803654:	10819c04 	addi	r2,r2,1648
  803658:	11800217 	ldw	r6,8(r2)
  80365c:	08016440 	call	801644 <drawBmp>
}
  803660:	e037883a 	mov	sp,fp
  803664:	dfc00117 	ldw	ra,4(sp)
  803668:	df000017 	ldw	fp,0(sp)
  80366c:	dec00204 	addi	sp,sp,8
  803670:	f800283a 	ret

00803674 <moveDownPlayer>:
void moveDownPlayer()
{
  803674:	defffe04 	addi	sp,sp,-8
  803678:	dfc00115 	stw	ra,4(sp)
  80367c:	df000015 	stw	fp,0(sp)
  803680:	d839883a 	mov	fp,sp
	player.prevY = player.y;
  803684:	008020b4 	movhi	r2,130
  803688:	10819c04 	addi	r2,r2,1648
  80368c:	10c00217 	ldw	r3,8(r2)
  803690:	008020b4 	movhi	r2,130
  803694:	10819c04 	addi	r2,r2,1648
  803698:	10c00315 	stw	r3,12(r2)

	if (player.y < SCREEN_HEIGHT - PLAYER_HEIGHT)
  80369c:	008020b4 	movhi	r2,130
  8036a0:	10819c04 	addi	r2,r2,1648
  8036a4:	10800217 	ldw	r2,8(r2)
  8036a8:	10803548 	cmpgei	r2,r2,213
  8036ac:	1000071e 	bne	r2,zero,8036cc <moveDownPlayer+0x58>
		player.y = player.y + 2;
  8036b0:	008020b4 	movhi	r2,130
  8036b4:	10819c04 	addi	r2,r2,1648
  8036b8:	10800217 	ldw	r2,8(r2)
  8036bc:	10c00084 	addi	r3,r2,2
  8036c0:	008020b4 	movhi	r2,130
  8036c4:	10819c04 	addi	r2,r2,1648
  8036c8:	10c00215 	stw	r3,8(r2)

	drawBmp(playerBmp, player.x, player.y);
  8036cc:	d1271a17 	ldw	r4,-25496(gp)
  8036d0:	008020b4 	movhi	r2,130
  8036d4:	10819c04 	addi	r2,r2,1648
  8036d8:	11400017 	ldw	r5,0(r2)
  8036dc:	008020b4 	movhi	r2,130
  8036e0:	10819c04 	addi	r2,r2,1648
  8036e4:	11800217 	ldw	r6,8(r2)
  8036e8:	08016440 	call	801644 <drawBmp>
}
  8036ec:	e037883a 	mov	sp,fp
  8036f0:	dfc00117 	ldw	ra,4(sp)
  8036f4:	df000017 	ldw	fp,0(sp)
  8036f8:	dec00204 	addi	sp,sp,8
  8036fc:	f800283a 	ret

00803700 <keepPlayerStationary>:

void keepPlayerStationary() {
  803700:	defffe04 	addi	sp,sp,-8
  803704:	dfc00115 	stw	ra,4(sp)
  803708:	df000015 	stw	fp,0(sp)
  80370c:	d839883a 	mov	fp,sp
	player.prevY = player.y;
  803710:	008020b4 	movhi	r2,130
  803714:	10819c04 	addi	r2,r2,1648
  803718:	10c00217 	ldw	r3,8(r2)
  80371c:	008020b4 	movhi	r2,130
  803720:	10819c04 	addi	r2,r2,1648
  803724:	10c00315 	stw	r3,12(r2)
	drawBmp(playerBmp, player.x, player.y);
  803728:	d1271a17 	ldw	r4,-25496(gp)
  80372c:	008020b4 	movhi	r2,130
  803730:	10819c04 	addi	r2,r2,1648
  803734:	11400017 	ldw	r5,0(r2)
  803738:	008020b4 	movhi	r2,130
  80373c:	10819c04 	addi	r2,r2,1648
  803740:	11800217 	ldw	r6,8(r2)
  803744:	08016440 	call	801644 <drawBmp>
}
  803748:	e037883a 	mov	sp,fp
  80374c:	dfc00117 	ldw	ra,4(sp)
  803750:	df000017 	ldw	fp,0(sp)
  803754:	dec00204 	addi	sp,sp,8
  803758:	f800283a 	ret

0080375c <hitPlayer>:

void hitPlayer() {
  80375c:	defffd04 	addi	sp,sp,-12
  803760:	dfc00215 	stw	ra,8(sp)
  803764:	df000115 	stw	fp,4(sp)
  803768:	df000104 	addi	fp,sp,4
	int playerLives = getCurrentPlayerLives();
  80376c:	080450c0 	call	80450c <getCurrentPlayerLives>
  803770:	e0bfff15 	stw	r2,-4(fp)
	if (playerLives > 1) {
  803774:	e0bfff17 	ldw	r2,-4(fp)
  803778:	10800090 	cmplti	r2,r2,2
  80377c:	1000041e 	bne	r2,zero,803790 <hitPlayer+0x34>
		setCurrentPlayerLives(playerLives - 1);
  803780:	e0bfff17 	ldw	r2,-4(fp)
  803784:	113fffc4 	addi	r4,r2,-1
  803788:	08044e00 	call	8044e0 <setCurrentPlayerLives>
  80378c:	00000706 	br	8037ac <hitPlayer+0x50>
	} else if (playerLives == 1) {
  803790:	e0bfff17 	ldw	r2,-4(fp)
  803794:	10800058 	cmpnei	r2,r2,1
  803798:	1000041e 	bne	r2,zero,8037ac <hitPlayer+0x50>
		setCurrentPlayerLives(playerLives - 1);
  80379c:	e0bfff17 	ldw	r2,-4(fp)
  8037a0:	113fffc4 	addi	r4,r2,-1
  8037a4:	08044e00 	call	8044e0 <setCurrentPlayerLives>
		killPlayer();
  8037a8:	08037c40 	call	8037c4 <killPlayer>
	}
	drawInGameInfo();
  8037ac:	08047940 	call	804794 <drawInGameInfo>
}
  8037b0:	e037883a 	mov	sp,fp
  8037b4:	dfc00117 	ldw	ra,4(sp)
  8037b8:	df000017 	ldw	fp,0(sp)
  8037bc:	dec00204 	addi	sp,sp,8
  8037c0:	f800283a 	ret

008037c4 <killPlayer>:

void killPlayer() {
  8037c4:	defffe04 	addi	sp,sp,-8
  8037c8:	dfc00115 	stw	ra,4(sp)
  8037cc:	df000015 	stw	fp,0(sp)
  8037d0:	d839883a 	mov	fp,sp
	playPlayerDeath();
  8037d4:	0800b880 	call	800b88 <playPlayerDeath>
	//updateHighScoreBoard();
	// Some game over stuff
}
  8037d8:	e037883a 	mov	sp,fp
  8037dc:	dfc00117 	ldw	ra,4(sp)
  8037e0:	df000017 	ldw	fp,0(sp)
  8037e4:	dec00204 	addi	sp,sp,8
  8037e8:	f800283a 	ret

008037ec <initScoreBoard>:

char * scoreFileName = "scores.txt";
struct scores * gameScores;

//set all gameScores values to initial values - read all high score board info from SD card.
void initScoreBoard(void) {
  8037ec:	defffe04 	addi	sp,sp,-8
  8037f0:	dfc00115 	stw	ra,4(sp)
  8037f4:	df000015 	stw	fp,0(sp)
  8037f8:	d839883a 	mov	fp,sp
	alt_up_char_buffer_clear(char_buffer); // clear screen
  8037fc:	d1271517 	ldw	r4,-25516(gp)
  803800:	08152000 	call	815200 <alt_up_char_buffer_clear>
	gameScores = malloc(sizeof(struct scores));
  803804:	01001404 	movi	r4,80
  803808:	08097140 	call	809714 <malloc>
  80380c:	d0a72c15 	stw	r2,-25424(gp)
	printf("gameScoresTemp is at: %x\n", (unsigned int)gameScores);
  803810:	d0a72c17 	ldw	r2,-25424(gp)
  803814:	100b883a 	mov	r5,r2
  803818:	010020b4 	movhi	r4,130
  80381c:	21308104 	addi	r4,r4,-15868
  803820:	0809e680 	call	809e68 <printf>

	gameScores->currentPlayerScore = 0; // TBD - set to 0 - testing code by setting to other values.
  803824:	d0a72c17 	ldw	r2,-25424(gp)
  803828:	10000015 	stw	zero,0(r2)
	gameScores->currentPlayerLives = INITIALLIVES;
  80382c:	d0e72c17 	ldw	r3,-25424(gp)
  803830:	008000c4 	movi	r2,3
  803834:	18800115 	stw	r2,4(r3)
	readHighScoreBoardFromSD();
  803838:	08038f80 	call	8038f8 <readHighScoreBoardFromSD>
}
  80383c:	e037883a 	mov	sp,fp
  803840:	dfc00117 	ldw	ra,4(sp)
  803844:	df000017 	ldw	fp,0(sp)
  803848:	dec00204 	addi	sp,sp,8
  80384c:	f800283a 	ret

00803850 <defaultHighScoreBoard>:

//set high score values to defaults - used if reading the SD card fails.s
void defaultHighScoreBoard(void) {
  803850:	defffd04 	addi	sp,sp,-12
  803854:	df000215 	stw	fp,8(sp)
  803858:	df000204 	addi	fp,sp,8
	int i,j;
	for(i = 0; i < NUMSCORES; i++) {
  80385c:	e03fff15 	stw	zero,-4(fp)
  803860:	00001e06 	br	8038dc <defaultHighScoreBoard+0x8c>
		gameScores->highScoreBoard[i] = 1;
  803864:	d0e72c17 	ldw	r3,-25424(gp)
  803868:	e0bfff17 	ldw	r2,-4(fp)
  80386c:	1085883a 	add	r2,r2,r2
  803870:	1085883a 	add	r2,r2,r2
  803874:	10c5883a 	add	r2,r2,r3
  803878:	10c00204 	addi	r3,r2,8
  80387c:	00800044 	movi	r2,1
  803880:	18800015 	stw	r2,0(r3)
		for(j = 0; j < NUMINITIALS; j++) {
  803884:	e03ffe15 	stw	zero,-8(fp)
  803888:	00000e06 	br	8038c4 <defaultHighScoreBoard+0x74>
			gameScores->highScoreBoardInits[i][j] = 'X';
  80388c:	d1672c17 	ldw	r5,-25424(gp)
  803890:	e0ffff17 	ldw	r3,-4(fp)
  803894:	e13ffe17 	ldw	r4,-8(fp)
  803898:	1805883a 	mov	r2,r3
  80389c:	1085883a 	add	r2,r2,r2
  8038a0:	10c5883a 	add	r2,r2,r3
  8038a4:	1145883a 	add	r2,r2,r5
  8038a8:	1105883a 	add	r2,r2,r4
  8038ac:	10c00c04 	addi	r3,r2,48
  8038b0:	00801604 	movi	r2,88
  8038b4:	18800005 	stb	r2,0(r3)
//set high score values to defaults - used if reading the SD card fails.s
void defaultHighScoreBoard(void) {
	int i,j;
	for(i = 0; i < NUMSCORES; i++) {
		gameScores->highScoreBoard[i] = 1;
		for(j = 0; j < NUMINITIALS; j++) {
  8038b8:	e0bffe17 	ldw	r2,-8(fp)
  8038bc:	10800044 	addi	r2,r2,1
  8038c0:	e0bffe15 	stw	r2,-8(fp)
  8038c4:	e0bffe17 	ldw	r2,-8(fp)
  8038c8:	108000d0 	cmplti	r2,r2,3
  8038cc:	103fef1e 	bne	r2,zero,80388c <defaultHighScoreBoard+0x3c>
}

//set high score values to defaults - used if reading the SD card fails.s
void defaultHighScoreBoard(void) {
	int i,j;
	for(i = 0; i < NUMSCORES; i++) {
  8038d0:	e0bfff17 	ldw	r2,-4(fp)
  8038d4:	10800044 	addi	r2,r2,1
  8038d8:	e0bfff15 	stw	r2,-4(fp)
  8038dc:	e0bfff17 	ldw	r2,-4(fp)
  8038e0:	10800290 	cmplti	r2,r2,10
  8038e4:	103fdf1e 	bne	r2,zero,803864 <defaultHighScoreBoard+0x14>
		for(j = 0; j < NUMINITIALS; j++) {
			gameScores->highScoreBoardInits[i][j] = 'X';
		}
	}
	return;
}
  8038e8:	e037883a 	mov	sp,fp
  8038ec:	df000017 	ldw	fp,0(sp)
  8038f0:	dec00104 	addi	sp,sp,4
  8038f4:	f800283a 	ret

008038f8 <readHighScoreBoardFromSD>:

//returns -1 on error in reading scoreboard (and also defaults all current values), returns 0 on success.
//function updates all gameScores' variables so that reading them have the most up to date values
int readHighScoreBoardFromSD(void) {
  8038f8:	deffe904 	addi	sp,sp,-92
  8038fc:	dfc01615 	stw	ra,88(sp)
  803900:	df001515 	stw	fp,84(sp)
  803904:	dcc01415 	stw	r19,80(sp)
  803908:	dc801315 	stw	r18,76(sp)
  80390c:	dc401215 	stw	r17,72(sp)
  803910:	dc001115 	stw	r16,68(sp)
  803914:	df001104 	addi	fp,sp,68
	gameScores->currentScoreBoardCorrupt = 0;
  803918:	d0a72c17 	ldw	r2,-25424(gp)
  80391c:	10001385 	stb	zero,78(r2)

	short int fileHandle = openFile(scoreFileName);
  803920:	d1200417 	ldw	r4,-32752(gp)
  803924:	0804a500 	call	804a50 <openFile>
  803928:	e0bff48d 	sth	r2,-46(fp)
	if (fileHandle == -1) {
  80392c:	e0bff48f 	ldh	r2,-46(fp)
  803930:	10bfffd8 	cmpnei	r2,r2,-1
  803934:	10000b1e 	bne	r2,zero,803964 <readHighScoreBoardFromSD+0x6c>
		printf("Error opening %s\n", scoreFileName);
  803938:	d1600417 	ldw	r5,-32752(gp)
  80393c:	010020b4 	movhi	r4,130
  803940:	21308804 	addi	r4,r4,-15840
  803944:	0809e680 	call	809e68 <printf>
		defaultHighScoreBoard();
  803948:	08038500 	call	803850 <defaultHighScoreBoard>
		gameScores->currentScoreBoardCorrupt = 1;
  80394c:	d0e72c17 	ldw	r3,-25424(gp)
  803950:	00800044 	movi	r2,1
  803954:	18801385 	stb	r2,78(r3)
		return -1;
  803958:	00bfffc4 	movi	r2,-1
  80395c:	e0bfff15 	stw	r2,-4(fp)
  803960:	0000b006 	br	803c24 <readHighScoreBoardFromSD+0x32c>
	char readValue;
	int currentScore;
	int numDigits;
	int scoreBuffer[MAXSCOREDIGITS];
	int i,j,k;
	for(i = 0; i < NUMSCORES; i++) {
  803964:	e03ff115 	stw	zero,-60(fp)
  803968:	0000a806 	br	803c0c <readHighScoreBoardFromSD+0x314>
		for(j = 0; j < NUMINITIALS; j++){
  80396c:	e03ff015 	stw	zero,-64(fp)
  803970:	00001106 	br	8039b8 <readHighScoreBoardFromSD+0xc0>
			readValue = readByte(fileHandle);
  803974:	e13ff48f 	ldh	r4,-46(fp)
  803978:	0804ac00 	call	804ac0 <readByte>
  80397c:	e0bff405 	stb	r2,-48(fp)
			gameScores->highScoreBoardInits[i][j] = readValue;
  803980:	d1272c17 	ldw	r4,-25424(gp)
  803984:	e0fff117 	ldw	r3,-60(fp)
  803988:	e17ff017 	ldw	r5,-64(fp)
  80398c:	e1bff403 	ldbu	r6,-48(fp)
  803990:	1805883a 	mov	r2,r3
  803994:	1085883a 	add	r2,r2,r2
  803998:	10c5883a 	add	r2,r2,r3
  80399c:	1105883a 	add	r2,r2,r4
  8039a0:	1145883a 	add	r2,r2,r5
  8039a4:	10800c04 	addi	r2,r2,48
  8039a8:	11800005 	stb	r6,0(r2)
	int currentScore;
	int numDigits;
	int scoreBuffer[MAXSCOREDIGITS];
	int i,j,k;
	for(i = 0; i < NUMSCORES; i++) {
		for(j = 0; j < NUMINITIALS; j++){
  8039ac:	e0bff017 	ldw	r2,-64(fp)
  8039b0:	10800044 	addi	r2,r2,1
  8039b4:	e0bff015 	stw	r2,-64(fp)
  8039b8:	e0bff017 	ldw	r2,-64(fp)
  8039bc:	108000d0 	cmplti	r2,r2,3
  8039c0:	103fec1e 	bne	r2,zero,803974 <readHighScoreBoardFromSD+0x7c>
			readValue = readByte(fileHandle);
			gameScores->highScoreBoardInits[i][j] = readValue;
		}
		readValue = readByte(fileHandle);
  8039c4:	e13ff48f 	ldh	r4,-46(fp)
  8039c8:	0804ac00 	call	804ac0 <readByte>
  8039cc:	e0bff405 	stb	r2,-48(fp)

		if(readValue != 0x20) {
  8039d0:	e0bff407 	ldb	r2,-48(fp)
  8039d4:	10800820 	cmpeqi	r2,r2,32
  8039d8:	10000d1e 	bne	r2,zero,803a10 <readHighScoreBoardFromSD+0x118>
			closeFile(fileHandle);
  8039dc:	e13ff48f 	ldh	r4,-46(fp)
  8039e0:	0804a900 	call	804a90 <closeFile>
			printf("Error within %s - file not initialized to proper format. Scoreboard defaulted.", scoreFileName);
  8039e4:	d1600417 	ldw	r5,-32752(gp)
  8039e8:	010020b4 	movhi	r4,130
  8039ec:	21308d04 	addi	r4,r4,-15820
  8039f0:	0809e680 	call	809e68 <printf>
			defaultHighScoreBoard();
  8039f4:	08038500 	call	803850 <defaultHighScoreBoard>
			gameScores->currentScoreBoardCorrupt = 1;
  8039f8:	d0e72c17 	ldw	r3,-25424(gp)
  8039fc:	00800044 	movi	r2,1
  803a00:	18801385 	stb	r2,78(r3)
			return -1;
  803a04:	00ffffc4 	movi	r3,-1
  803a08:	e0ffff15 	stw	r3,-4(fp)
  803a0c:	00008506 	br	803c24 <readHighScoreBoardFromSD+0x32c>
		}

		//clear score buffer - which is used in order to convert unknown number of chars into an int.
		for(k = 0; k < MAXSCOREDIGITS; k++){
  803a10:	e03fef15 	stw	zero,-68(fp)
  803a14:	00000b06 	br	803a44 <readHighScoreBoardFromSD+0x14c>
			scoreBuffer[k] = -1;
  803a18:	e0bfef17 	ldw	r2,-68(fp)
  803a1c:	1085883a 	add	r2,r2,r2
  803a20:	1085883a 	add	r2,r2,r2
  803a24:	e13fef04 	addi	r4,fp,-68
  803a28:	1105883a 	add	r2,r2,r4
  803a2c:	10c00604 	addi	r3,r2,24
  803a30:	00bfffc4 	movi	r2,-1
  803a34:	18800015 	stw	r2,0(r3)
			gameScores->currentScoreBoardCorrupt = 1;
			return -1;
		}

		//clear score buffer - which is used in order to convert unknown number of chars into an int.
		for(k = 0; k < MAXSCOREDIGITS; k++){
  803a38:	e0bfef17 	ldw	r2,-68(fp)
  803a3c:	10800044 	addi	r2,r2,1
  803a40:	e0bfef15 	stw	r2,-68(fp)
  803a44:	e0bfef17 	ldw	r2,-68(fp)
  803a48:	10800290 	cmplti	r2,r2,10
  803a4c:	103ff21e 	bne	r2,zero,803a18 <readHighScoreBoardFromSD+0x120>
			scoreBuffer[k] = -1;
		}

		numDigits = 0;
  803a50:	e03ff215 	stw	zero,-56(fp)
		while((readValue = readByte(fileHandle)) != 0x20 && numDigits < MAXSCOREDIGITS) { //loop until space found
  803a54:	00000b06 	br	803a84 <readHighScoreBoardFromSD+0x18c>
			scoreBuffer[numDigits] = readValue;
  803a58:	e0bff217 	ldw	r2,-56(fp)
  803a5c:	e0fff407 	ldb	r3,-48(fp)
  803a60:	1085883a 	add	r2,r2,r2
  803a64:	1085883a 	add	r2,r2,r2
  803a68:	e13fef04 	addi	r4,fp,-68
  803a6c:	1105883a 	add	r2,r2,r4
  803a70:	10800604 	addi	r2,r2,24
  803a74:	10c00015 	stw	r3,0(r2)
			numDigits++;
  803a78:	e0bff217 	ldw	r2,-56(fp)
  803a7c:	10800044 	addi	r2,r2,1
  803a80:	e0bff215 	stw	r2,-56(fp)
		for(k = 0; k < MAXSCOREDIGITS; k++){
			scoreBuffer[k] = -1;
		}

		numDigits = 0;
		while((readValue = readByte(fileHandle)) != 0x20 && numDigits < MAXSCOREDIGITS) { //loop until space found
  803a84:	e13ff48f 	ldh	r4,-46(fp)
  803a88:	0804ac00 	call	804ac0 <readByte>
  803a8c:	e0bff405 	stb	r2,-48(fp)
  803a90:	e0bff407 	ldb	r2,-48(fp)
  803a94:	10800820 	cmpeqi	r2,r2,32
  803a98:	1000031e 	bne	r2,zero,803aa8 <readHighScoreBoardFromSD+0x1b0>
  803a9c:	e0bff217 	ldw	r2,-56(fp)
  803aa0:	10800290 	cmplti	r2,r2,10
  803aa4:	103fec1e 	bne	r2,zero,803a58 <readHighScoreBoardFromSD+0x160>
			scoreBuffer[numDigits] = readValue;
			numDigits++;
		}
		if(readValue != 0x20) {
  803aa8:	e0bff407 	ldb	r2,-48(fp)
  803aac:	10800820 	cmpeqi	r2,r2,32
  803ab0:	10000d1e 	bne	r2,zero,803ae8 <readHighScoreBoardFromSD+0x1f0>
			closeFile(fileHandle);
  803ab4:	e13ff48f 	ldh	r4,-46(fp)
  803ab8:	0804a900 	call	804a90 <closeFile>
			printf("Error within %s - file not initialized to proper format. Scoreboard defaulted.", scoreFileName);
  803abc:	d1600417 	ldw	r5,-32752(gp)
  803ac0:	010020b4 	movhi	r4,130
  803ac4:	21308d04 	addi	r4,r4,-15820
  803ac8:	0809e680 	call	809e68 <printf>
			defaultHighScoreBoard();
  803acc:	08038500 	call	803850 <defaultHighScoreBoard>
			gameScores->currentScoreBoardCorrupt = 1;
  803ad0:	d0e72c17 	ldw	r3,-25424(gp)
  803ad4:	00800044 	movi	r2,1
  803ad8:	18801385 	stb	r2,78(r3)
			return -1;
  803adc:	00bfffc4 	movi	r2,-1
  803ae0:	e0bfff15 	stw	r2,-4(fp)
  803ae4:	00004f06 	br	803c24 <readHighScoreBoardFromSD+0x32c>
		}

		//use scoreBuffer values (stored in char values) into a meaningful integer, currentScore.
		currentScore = 0;
  803ae8:	e03ff315 	stw	zero,-52(fp)
		for(k = 0; k < numDigits; k++) {
  803aec:	e03fef15 	stw	zero,-68(fp)
  803af0:	00003806 	br	803bd4 <readHighScoreBoardFromSD+0x2dc>
			currentScore += (scoreBuffer[k] - '0') * pow(10,(numDigits - 1 - k));
  803af4:	e13ff317 	ldw	r4,-52(fp)
  803af8:	0808b480 	call	808b48 <__floatsidf>
  803afc:	1025883a 	mov	r18,r2
  803b00:	1827883a 	mov	r19,r3
  803b04:	e0bfef17 	ldw	r2,-68(fp)
  803b08:	1085883a 	add	r2,r2,r2
  803b0c:	1085883a 	add	r2,r2,r2
  803b10:	e0ffef04 	addi	r3,fp,-68
  803b14:	10c5883a 	add	r2,r2,r3
  803b18:	10800604 	addi	r2,r2,24
  803b1c:	10800017 	ldw	r2,0(r2)
  803b20:	113ff404 	addi	r4,r2,-48
  803b24:	0808b480 	call	808b48 <__floatsidf>
  803b28:	1021883a 	mov	r16,r2
  803b2c:	1823883a 	mov	r17,r3
  803b30:	e0fff217 	ldw	r3,-56(fp)
  803b34:	e0bfef17 	ldw	r2,-68(fp)
  803b38:	1885c83a 	sub	r2,r3,r2
  803b3c:	113fffc4 	addi	r4,r2,-1
  803b40:	0808b480 	call	808b48 <__floatsidf>
  803b44:	100f883a 	mov	r7,r2
  803b48:	1811883a 	mov	r8,r3
  803b4c:	0009883a 	mov	r4,zero
  803b50:	01500934 	movhi	r5,16420
  803b54:	380d883a 	mov	r6,r7
  803b58:	400f883a 	mov	r7,r8
  803b5c:	0805c400 	call	805c40 <pow>
  803b60:	1009883a 	mov	r4,r2
  803b64:	180b883a 	mov	r5,r3
  803b68:	2005883a 	mov	r2,r4
  803b6c:	2807883a 	mov	r3,r5
  803b70:	8009883a 	mov	r4,r16
  803b74:	880b883a 	mov	r5,r17
  803b78:	100d883a 	mov	r6,r2
  803b7c:	180f883a 	mov	r7,r3
  803b80:	08082840 	call	808284 <__muldf3>
  803b84:	1009883a 	mov	r4,r2
  803b88:	180b883a 	mov	r5,r3
  803b8c:	2005883a 	mov	r2,r4
  803b90:	2807883a 	mov	r3,r5
  803b94:	9009883a 	mov	r4,r18
  803b98:	980b883a 	mov	r5,r19
  803b9c:	100d883a 	mov	r6,r2
  803ba0:	180f883a 	mov	r7,r3
  803ba4:	08082100 	call	808210 <__adddf3>
  803ba8:	1009883a 	mov	r4,r2
  803bac:	180b883a 	mov	r5,r3
  803bb0:	2005883a 	mov	r2,r4
  803bb4:	2807883a 	mov	r3,r5
  803bb8:	1009883a 	mov	r4,r2
  803bbc:	180b883a 	mov	r5,r3
  803bc0:	0808c400 	call	808c40 <__fixdfsi>
  803bc4:	e0bff315 	stw	r2,-52(fp)
			return -1;
		}

		//use scoreBuffer values (stored in char values) into a meaningful integer, currentScore.
		currentScore = 0;
		for(k = 0; k < numDigits; k++) {
  803bc8:	e0bfef17 	ldw	r2,-68(fp)
  803bcc:	10800044 	addi	r2,r2,1
  803bd0:	e0bfef15 	stw	r2,-68(fp)
  803bd4:	e0ffef17 	ldw	r3,-68(fp)
  803bd8:	e0bff217 	ldw	r2,-56(fp)
  803bdc:	18bfc516 	blt	r3,r2,803af4 <readHighScoreBoardFromSD+0x1fc>
			currentScore += (scoreBuffer[k] - '0') * pow(10,(numDigits - 1 - k));
		}
		gameScores->highScoreBoard[i] = currentScore;
  803be0:	d0e72c17 	ldw	r3,-25424(gp)
  803be4:	e0bff117 	ldw	r2,-60(fp)
  803be8:	1085883a 	add	r2,r2,r2
  803bec:	1085883a 	add	r2,r2,r2
  803bf0:	10c5883a 	add	r2,r2,r3
  803bf4:	10c00204 	addi	r3,r2,8
  803bf8:	e0bff317 	ldw	r2,-52(fp)
  803bfc:	18800015 	stw	r2,0(r3)
	char readValue;
	int currentScore;
	int numDigits;
	int scoreBuffer[MAXSCOREDIGITS];
	int i,j,k;
	for(i = 0; i < NUMSCORES; i++) {
  803c00:	e0bff117 	ldw	r2,-60(fp)
  803c04:	10800044 	addi	r2,r2,1
  803c08:	e0bff115 	stw	r2,-60(fp)
  803c0c:	e0bff117 	ldw	r2,-60(fp)
  803c10:	10800290 	cmplti	r2,r2,10
  803c14:	103f551e 	bne	r2,zero,80396c <readHighScoreBoardFromSD+0x74>
			currentScore += (scoreBuffer[k] - '0') * pow(10,(numDigits - 1 - k));
		}
		gameScores->highScoreBoard[i] = currentScore;
	}

	closeFile(fileHandle);
  803c18:	e13ff48f 	ldh	r4,-46(fp)
  803c1c:	0804a900 	call	804a90 <closeFile>
	return 0;
  803c20:	e03fff15 	stw	zero,-4(fp)
  803c24:	e0bfff17 	ldw	r2,-4(fp)
}
  803c28:	e037883a 	mov	sp,fp
  803c2c:	dfc00517 	ldw	ra,20(sp)
  803c30:	df000417 	ldw	fp,16(sp)
  803c34:	dcc00317 	ldw	r19,12(sp)
  803c38:	dc800217 	ldw	r18,8(sp)
  803c3c:	dc400117 	ldw	r17,4(sp)
  803c40:	dc000017 	ldw	r16,0(sp)
  803c44:	dec00604 	addi	sp,sp,24
  803c48:	f800283a 	ret

00803c4c <updateHighScoreBoard>:

//function writes to the SD card, and places current players score into the high scores if
//it exceeds any of the current high scores.
//function returns if the highScore file doesnt open in memory, or if the currentScoreBoard is corrupt.
void updateHighScoreBoard(void) {
  803c4c:	defff604 	addi	sp,sp,-40
  803c50:	dfc00915 	stw	ra,36(sp)
  803c54:	df000815 	stw	fp,32(sp)
  803c58:	dc400715 	stw	r17,28(sp)
  803c5c:	dc000615 	stw	r16,24(sp)
  803c60:	df000604 	addi	fp,sp,24
	int playerScore = getCurrentPlayerScore();
  803c64:	08044bc0 	call	8044bc <getCurrentPlayerScore>
  803c68:	e0bfff15 	stw	r2,-4(fp)
	unsigned short i,j;
	short scoreReplaceIndex = -1;
  803c6c:	00bfffc4 	movi	r2,-1
  803c70:	e0bffd8d 	sth	r2,-10(fp)
	unsigned short firstDigitFound = 0;
  803c74:	e03ffd0d 	sth	zero,-12(fp)
	unsigned short digit;
	short int fileHandle = openFile(scoreFileName);
  803c78:	d1200417 	ldw	r4,-32752(gp)
  803c7c:	0804a500 	call	804a50 <openFile>
  803c80:	e0bffc0d 	sth	r2,-16(fp)
	if (fileHandle == -1 || gameScores == NULL || gameScores->currentScoreBoardCorrupt == 1) {
  803c84:	e0bffc0f 	ldh	r2,-16(fp)
  803c88:	10bfffe0 	cmpeqi	r2,r2,-1
  803c8c:	1000081e 	bne	r2,zero,803cb0 <updateHighScoreBoard+0x64>
  803c90:	d0a72c17 	ldw	r2,-25424(gp)
  803c94:	1005003a 	cmpeq	r2,r2,zero
  803c98:	1000051e 	bne	r2,zero,803cb0 <updateHighScoreBoard+0x64>
  803c9c:	d0a72c17 	ldw	r2,-25424(gp)
  803ca0:	10801383 	ldbu	r2,78(r2)
  803ca4:	10803fcc 	andi	r2,r2,255
  803ca8:	10800058 	cmpnei	r2,r2,1
  803cac:	1000051e 	bne	r2,zero,803cc4 <updateHighScoreBoard+0x78>
		printf("Error opening %s\n", scoreFileName);
  803cb0:	d1600417 	ldw	r5,-32752(gp)
  803cb4:	010020b4 	movhi	r4,130
  803cb8:	21308804 	addi	r4,r4,-15840
  803cbc:	0809e680 	call	809e68 <printf>
		return;
  803cc0:	00010106 	br	8040c8 <updateHighScoreBoard+0x47c>
	}

	//determine if playerScore is better than any high scores
	for(i = 0; i < NUMSCORES; i++) {
  803cc4:	e03ffe8d 	sth	zero,-6(fp)
  803cc8:	00001406 	br	803d1c <updateHighScoreBoard+0xd0>
		if(playerScore > gameScores->highScoreBoard[i]) {
  803ccc:	d0e72c17 	ldw	r3,-25424(gp)
  803cd0:	e0bffe8b 	ldhu	r2,-6(fp)
  803cd4:	1085883a 	add	r2,r2,r2
  803cd8:	1085883a 	add	r2,r2,r2
  803cdc:	10c5883a 	add	r2,r2,r3
  803ce0:	10800204 	addi	r2,r2,8
  803ce4:	10c00017 	ldw	r3,0(r2)
  803ce8:	e0bfff17 	ldw	r2,-4(fp)
  803cec:	1880080e 	bge	r3,r2,803d10 <updateHighScoreBoard+0xc4>
			printf("I found a score, %d, that is higher than other scores. Index %d\n", playerScore, i);
  803cf0:	e1bffe8b 	ldhu	r6,-6(fp)
  803cf4:	010020b4 	movhi	r4,130
  803cf8:	2130a104 	addi	r4,r4,-15740
  803cfc:	e17fff17 	ldw	r5,-4(fp)
  803d00:	0809e680 	call	809e68 <printf>
			scoreReplaceIndex = i;
  803d04:	e0bffe8b 	ldhu	r2,-6(fp)
  803d08:	e0bffd8d 	sth	r2,-10(fp)
			break; // current index needs to be replaced by
  803d0c:	00000606 	br	803d28 <updateHighScoreBoard+0xdc>
		printf("Error opening %s\n", scoreFileName);
		return;
	}

	//determine if playerScore is better than any high scores
	for(i = 0; i < NUMSCORES; i++) {
  803d10:	e0bffe8b 	ldhu	r2,-6(fp)
  803d14:	10800044 	addi	r2,r2,1
  803d18:	e0bffe8d 	sth	r2,-6(fp)
  803d1c:	e0bffe8b 	ldhu	r2,-6(fp)
  803d20:	108002b0 	cmpltui	r2,r2,10
  803d24:	103fe91e 	bne	r2,zero,803ccc <updateHighScoreBoard+0x80>
			break; // current index needs to be replaced by
		}
	}

	//if playerScore is better than a high score, re-write to the SD card, placing currentPlayerScore in the file.
	if(scoreReplaceIndex != -1) {
  803d28:	e0bffd8f 	ldh	r2,-10(fp)
  803d2c:	10bfffe0 	cmpeqi	r2,r2,-1
  803d30:	1000e21e 	bne	r2,zero,8040bc <updateHighScoreBoard+0x470>
		int loopCount = NUMSCORES;
  803d34:	00800284 	movi	r2,10
  803d38:	e0bffb15 	stw	r2,-20(fp)
		for(i = 0; i < loopCount; i++) {
  803d3c:	e03ffe8d 	sth	zero,-6(fp)
  803d40:	0000db06 	br	8040b0 <updateHighScoreBoard+0x464>
			if(i == scoreReplaceIndex){
  803d44:	e0fffe8b 	ldhu	r3,-6(fp)
  803d48:	e0bffd8f 	ldh	r2,-10(fp)
  803d4c:	1880711e 	bne	r3,r2,803f14 <updateHighScoreBoard+0x2c8>
				printf("replacing score code at index %d\n", i);
  803d50:	e17ffe8b 	ldhu	r5,-6(fp)
  803d54:	010020b4 	movhi	r4,130
  803d58:	2130b204 	addi	r4,r4,-15672
  803d5c:	0809e680 	call	809e68 <printf>

				char * newInitials = malloc(4*sizeof(char));
  803d60:	01000104 	movi	r4,4
  803d64:	08097140 	call	809714 <malloc>
  803d68:	e0bffa15 	stw	r2,-24(fp)
				*newInitials = '-';
  803d6c:	e0fffa17 	ldw	r3,-24(fp)
  803d70:	00800b44 	movi	r2,45
  803d74:	18800005 	stb	r2,0(r3)
				*(newInitials + 1) = '-';
  803d78:	e0bffa17 	ldw	r2,-24(fp)
  803d7c:	10c00044 	addi	r3,r2,1
  803d80:	00800b44 	movi	r2,45
  803d84:	18800005 	stb	r2,0(r3)
				*(newInitials + 2) = '-';
  803d88:	e0bffa17 	ldw	r2,-24(fp)
  803d8c:	10c00084 	addi	r3,r2,2
  803d90:	00800b44 	movi	r2,45
  803d94:	18800005 	stb	r2,0(r3)
				*(newInitials + 3) = '\0';
  803d98:	e0bffa17 	ldw	r2,-24(fp)
  803d9c:	108000c4 	addi	r2,r2,3
  803da0:	10000005 	stb	zero,0(r2)
				obtainUserInitials(newInitials);
  803da4:	e13ffa17 	ldw	r4,-24(fp)
  803da8:	08040e40 	call	8040e4 <obtainUserInitials>
				for(j = 0; j < NUMINITIALS; j++){
  803dac:	e03ffe0d 	sth	zero,-8(fp)
  803db0:	00000d06 	br	803de8 <updateHighScoreBoard+0x19c>
					alt_up_sd_card_write(fileHandle, newInitials[j]);
  803db4:	e13ffc0f 	ldh	r4,-16(fp)
  803db8:	e0bffe0b 	ldhu	r2,-8(fp)
  803dbc:	1007883a 	mov	r3,r2
  803dc0:	e0bffa17 	ldw	r2,-24(fp)
  803dc4:	1885883a 	add	r2,r3,r2
  803dc8:	10800003 	ldbu	r2,0(r2)
  803dcc:	11403fcc 	andi	r5,r2,255
  803dd0:	2940201c 	xori	r5,r5,128
  803dd4:	297fe004 	addi	r5,r5,-128
  803dd8:	081a40c0 	call	81a40c <alt_up_sd_card_write>
				*newInitials = '-';
				*(newInitials + 1) = '-';
				*(newInitials + 2) = '-';
				*(newInitials + 3) = '\0';
				obtainUserInitials(newInitials);
				for(j = 0; j < NUMINITIALS; j++){
  803ddc:	e0bffe0b 	ldhu	r2,-8(fp)
  803de0:	10800044 	addi	r2,r2,1
  803de4:	e0bffe0d 	sth	r2,-8(fp)
  803de8:	e0bffe0b 	ldhu	r2,-8(fp)
  803dec:	108000f0 	cmpltui	r2,r2,3
  803df0:	103ff01e 	bne	r2,zero,803db4 <updateHighScoreBoard+0x168>
					alt_up_sd_card_write(fileHandle, newInitials[j]);
				}
				free(newInitials);
  803df4:	e13ffa17 	ldw	r4,-24(fp)
  803df8:	08097000 	call	809700 <free>

				alt_up_sd_card_write(fileHandle, ' ');
  803dfc:	e13ffc0f 	ldh	r4,-16(fp)
  803e00:	01400804 	movi	r5,32
  803e04:	081a40c0 	call	81a40c <alt_up_sd_card_write>
				firstDigitFound = 0;
  803e08:	e03ffd0d 	sth	zero,-12(fp)
				for(j = 0; j < MAXSCOREDIGITS; j++){
  803e0c:	e03ffe0d 	sth	zero,-8(fp)
  803e10:	00003706 	br	803ef0 <updateHighScoreBoard+0x2a4>
					digit = ((int)(gameScores->currentPlayerScore / pow(10,(MAXSCOREDIGITS - 1 - j)))%10);
  803e14:	d0a72c17 	ldw	r2,-25424(gp)
  803e18:	11000017 	ldw	r4,0(r2)
  803e1c:	0808b480 	call	808b48 <__floatsidf>
  803e20:	1021883a 	mov	r16,r2
  803e24:	1823883a 	mov	r17,r3
  803e28:	e0fffe0b 	ldhu	r3,-8(fp)
  803e2c:	00800244 	movi	r2,9
  803e30:	10c9c83a 	sub	r4,r2,r3
  803e34:	0808b480 	call	808b48 <__floatsidf>
  803e38:	100f883a 	mov	r7,r2
  803e3c:	1811883a 	mov	r8,r3
  803e40:	0009883a 	mov	r4,zero
  803e44:	01500934 	movhi	r5,16420
  803e48:	380d883a 	mov	r6,r7
  803e4c:	400f883a 	mov	r7,r8
  803e50:	0805c400 	call	805c40 <pow>
  803e54:	100f883a 	mov	r7,r2
  803e58:	1811883a 	mov	r8,r3
  803e5c:	8009883a 	mov	r4,r16
  803e60:	880b883a 	mov	r5,r17
  803e64:	380d883a 	mov	r6,r7
  803e68:	400f883a 	mov	r7,r8
  803e6c:	08086480 	call	808648 <__divdf3>
  803e70:	1009883a 	mov	r4,r2
  803e74:	180b883a 	mov	r5,r3
  803e78:	2005883a 	mov	r2,r4
  803e7c:	2807883a 	mov	r3,r5
  803e80:	1009883a 	mov	r4,r2
  803e84:	180b883a 	mov	r5,r3
  803e88:	0808c400 	call	808c40 <__fixdfsi>
  803e8c:	1009883a 	mov	r4,r2
  803e90:	01400284 	movi	r5,10
  803e94:	0808e2c0 	call	808e2c <__modsi3>
  803e98:	e0bffc8d 	sth	r2,-14(fp)
					if(digit != 0 && firstDigitFound == 0){
  803e9c:	e0bffc8b 	ldhu	r2,-14(fp)
  803ea0:	1005003a 	cmpeq	r2,r2,zero
  803ea4:	1000051e 	bne	r2,zero,803ebc <updateHighScoreBoard+0x270>
  803ea8:	e0bffd0b 	ldhu	r2,-12(fp)
  803eac:	1004c03a 	cmpne	r2,r2,zero
  803eb0:	1000021e 	bne	r2,zero,803ebc <updateHighScoreBoard+0x270>
						firstDigitFound = 1;
  803eb4:	00800044 	movi	r2,1
  803eb8:	e0bffd0d 	sth	r2,-12(fp)
					}
					if(firstDigitFound == 1){
  803ebc:	e0bffd0b 	ldhu	r2,-12(fp)
  803ec0:	10800058 	cmpnei	r2,r2,1
  803ec4:	1000071e 	bne	r2,zero,803ee4 <updateHighScoreBoard+0x298>
						alt_up_sd_card_write(fileHandle, (digit + '0'));
  803ec8:	e13ffc0f 	ldh	r4,-16(fp)
  803ecc:	e0bffc8b 	ldhu	r2,-14(fp)
  803ed0:	10800c04 	addi	r2,r2,48
  803ed4:	11403fcc 	andi	r5,r2,255
  803ed8:	2940201c 	xori	r5,r5,128
  803edc:	297fe004 	addi	r5,r5,-128
  803ee0:	081a40c0 	call	81a40c <alt_up_sd_card_write>
				}
				free(newInitials);

				alt_up_sd_card_write(fileHandle, ' ');
				firstDigitFound = 0;
				for(j = 0; j < MAXSCOREDIGITS; j++){
  803ee4:	e0bffe0b 	ldhu	r2,-8(fp)
  803ee8:	10800044 	addi	r2,r2,1
  803eec:	e0bffe0d 	sth	r2,-8(fp)
  803ef0:	e0bffe0b 	ldhu	r2,-8(fp)
  803ef4:	108002b0 	cmpltui	r2,r2,10
  803ef8:	103fc61e 	bne	r2,zero,803e14 <updateHighScoreBoard+0x1c8>
					}
					if(firstDigitFound == 1){
						alt_up_sd_card_write(fileHandle, (digit + '0'));
					}
				}
				alt_up_sd_card_write(fileHandle, ' ');
  803efc:	e13ffc0f 	ldh	r4,-16(fp)
  803f00:	01400804 	movi	r5,32
  803f04:	081a40c0 	call	81a40c <alt_up_sd_card_write>
				loopCount--;
  803f08:	e0bffb17 	ldw	r2,-20(fp)
  803f0c:	10bfffc4 	addi	r2,r2,-1
  803f10:	e0bffb15 	stw	r2,-20(fp)
			}

			printf("writing high scores, in main loop, i = %d\n", i);
  803f14:	e17ffe8b 	ldhu	r5,-6(fp)
  803f18:	010020b4 	movhi	r4,130
  803f1c:	2130bb04 	addi	r4,r4,-15636
  803f20:	0809e680 	call	809e68 <printf>
			//write scores that are currently saved as high scores back to SD card in correct position.
			for(j = 0; j < NUMINITIALS; j++){
  803f24:	e03ffe0d 	sth	zero,-8(fp)
  803f28:	00001306 	br	803f78 <updateHighScoreBoard+0x32c>
				alt_up_sd_card_write(fileHandle, gameScores->highScoreBoardInits[i][j]);
  803f2c:	e1bffc0f 	ldh	r6,-16(fp)
  803f30:	d1672c17 	ldw	r5,-25424(gp)
  803f34:	e0fffe8b 	ldhu	r3,-6(fp)
  803f38:	e13ffe0b 	ldhu	r4,-8(fp)
  803f3c:	1805883a 	mov	r2,r3
  803f40:	1085883a 	add	r2,r2,r2
  803f44:	10c5883a 	add	r2,r2,r3
  803f48:	1145883a 	add	r2,r2,r5
  803f4c:	1105883a 	add	r2,r2,r4
  803f50:	10800c04 	addi	r2,r2,48
  803f54:	10800003 	ldbu	r2,0(r2)
  803f58:	11403fcc 	andi	r5,r2,255
  803f5c:	2940201c 	xori	r5,r5,128
  803f60:	297fe004 	addi	r5,r5,-128
  803f64:	3009883a 	mov	r4,r6
  803f68:	081a40c0 	call	81a40c <alt_up_sd_card_write>
				loopCount--;
			}

			printf("writing high scores, in main loop, i = %d\n", i);
			//write scores that are currently saved as high scores back to SD card in correct position.
			for(j = 0; j < NUMINITIALS; j++){
  803f6c:	e0bffe0b 	ldhu	r2,-8(fp)
  803f70:	10800044 	addi	r2,r2,1
  803f74:	e0bffe0d 	sth	r2,-8(fp)
  803f78:	e0bffe0b 	ldhu	r2,-8(fp)
  803f7c:	108000f0 	cmpltui	r2,r2,3
  803f80:	103fea1e 	bne	r2,zero,803f2c <updateHighScoreBoard+0x2e0>
				alt_up_sd_card_write(fileHandle, gameScores->highScoreBoardInits[i][j]);
			}
			alt_up_sd_card_write(fileHandle, ' ');
  803f84:	e13ffc0f 	ldh	r4,-16(fp)
  803f88:	01400804 	movi	r5,32
  803f8c:	081a40c0 	call	81a40c <alt_up_sd_card_write>
			firstDigitFound = 0;
  803f90:	e03ffd0d 	sth	zero,-12(fp)
			for(j = 0; j < MAXSCOREDIGITS; j++){
  803f94:	e03ffe0d 	sth	zero,-8(fp)
  803f98:	00003c06 	br	80408c <updateHighScoreBoard+0x440>
				digit = ((int)(gameScores->highScoreBoard[i] / pow(10,(MAXSCOREDIGITS - 1 - j)))%10);
  803f9c:	d0e72c17 	ldw	r3,-25424(gp)
  803fa0:	e0bffe8b 	ldhu	r2,-6(fp)
  803fa4:	1085883a 	add	r2,r2,r2
  803fa8:	1085883a 	add	r2,r2,r2
  803fac:	10c5883a 	add	r2,r2,r3
  803fb0:	10800204 	addi	r2,r2,8
  803fb4:	11000017 	ldw	r4,0(r2)
  803fb8:	0808b480 	call	808b48 <__floatsidf>
  803fbc:	1021883a 	mov	r16,r2
  803fc0:	1823883a 	mov	r17,r3
  803fc4:	e0fffe0b 	ldhu	r3,-8(fp)
  803fc8:	00800244 	movi	r2,9
  803fcc:	10c9c83a 	sub	r4,r2,r3
  803fd0:	0808b480 	call	808b48 <__floatsidf>
  803fd4:	100f883a 	mov	r7,r2
  803fd8:	1811883a 	mov	r8,r3
  803fdc:	0009883a 	mov	r4,zero
  803fe0:	01500934 	movhi	r5,16420
  803fe4:	380d883a 	mov	r6,r7
  803fe8:	400f883a 	mov	r7,r8
  803fec:	0805c400 	call	805c40 <pow>
  803ff0:	100f883a 	mov	r7,r2
  803ff4:	1811883a 	mov	r8,r3
  803ff8:	8009883a 	mov	r4,r16
  803ffc:	880b883a 	mov	r5,r17
  804000:	380d883a 	mov	r6,r7
  804004:	400f883a 	mov	r7,r8
  804008:	08086480 	call	808648 <__divdf3>
  80400c:	1009883a 	mov	r4,r2
  804010:	180b883a 	mov	r5,r3
  804014:	2005883a 	mov	r2,r4
  804018:	2807883a 	mov	r3,r5
  80401c:	1009883a 	mov	r4,r2
  804020:	180b883a 	mov	r5,r3
  804024:	0808c400 	call	808c40 <__fixdfsi>
  804028:	1009883a 	mov	r4,r2
  80402c:	01400284 	movi	r5,10
  804030:	0808e2c0 	call	808e2c <__modsi3>
  804034:	e0bffc8d 	sth	r2,-14(fp)
				if(digit != 0 && firstDigitFound == 0){
  804038:	e0bffc8b 	ldhu	r2,-14(fp)
  80403c:	1005003a 	cmpeq	r2,r2,zero
  804040:	1000051e 	bne	r2,zero,804058 <updateHighScoreBoard+0x40c>
  804044:	e0bffd0b 	ldhu	r2,-12(fp)
  804048:	1004c03a 	cmpne	r2,r2,zero
  80404c:	1000021e 	bne	r2,zero,804058 <updateHighScoreBoard+0x40c>
					firstDigitFound = 1;
  804050:	00800044 	movi	r2,1
  804054:	e0bffd0d 	sth	r2,-12(fp)
				}
				if(firstDigitFound == 1){
  804058:	e0bffd0b 	ldhu	r2,-12(fp)
  80405c:	10800058 	cmpnei	r2,r2,1
  804060:	1000071e 	bne	r2,zero,804080 <updateHighScoreBoard+0x434>
					alt_up_sd_card_write(fileHandle, (digit + '0'));
  804064:	e13ffc0f 	ldh	r4,-16(fp)
  804068:	e0bffc8b 	ldhu	r2,-14(fp)
  80406c:	10800c04 	addi	r2,r2,48
  804070:	11403fcc 	andi	r5,r2,255
  804074:	2940201c 	xori	r5,r5,128
  804078:	297fe004 	addi	r5,r5,-128
  80407c:	081a40c0 	call	81a40c <alt_up_sd_card_write>
			for(j = 0; j < NUMINITIALS; j++){
				alt_up_sd_card_write(fileHandle, gameScores->highScoreBoardInits[i][j]);
			}
			alt_up_sd_card_write(fileHandle, ' ');
			firstDigitFound = 0;
			for(j = 0; j < MAXSCOREDIGITS; j++){
  804080:	e0bffe0b 	ldhu	r2,-8(fp)
  804084:	10800044 	addi	r2,r2,1
  804088:	e0bffe0d 	sth	r2,-8(fp)
  80408c:	e0bffe0b 	ldhu	r2,-8(fp)
  804090:	108002b0 	cmpltui	r2,r2,10
  804094:	103fc11e 	bne	r2,zero,803f9c <updateHighScoreBoard+0x350>
				}
				if(firstDigitFound == 1){
					alt_up_sd_card_write(fileHandle, (digit + '0'));
				}
			}
			alt_up_sd_card_write(fileHandle, ' ');
  804098:	e13ffc0f 	ldh	r4,-16(fp)
  80409c:	01400804 	movi	r5,32
  8040a0:	081a40c0 	call	81a40c <alt_up_sd_card_write>
	}

	//if playerScore is better than a high score, re-write to the SD card, placing currentPlayerScore in the file.
	if(scoreReplaceIndex != -1) {
		int loopCount = NUMSCORES;
		for(i = 0; i < loopCount; i++) {
  8040a4:	e0bffe8b 	ldhu	r2,-6(fp)
  8040a8:	10800044 	addi	r2,r2,1
  8040ac:	e0bffe8d 	sth	r2,-6(fp)
  8040b0:	e0fffe8b 	ldhu	r3,-6(fp)
  8040b4:	e0bffb17 	ldw	r2,-20(fp)
  8040b8:	18bf2216 	blt	r3,r2,803d44 <updateHighScoreBoard+0xf8>
			}
			alt_up_sd_card_write(fileHandle, ' ');
		}
	}

	closeFile(fileHandle);
  8040bc:	e13ffc0f 	ldh	r4,-16(fp)
  8040c0:	0804a900 	call	804a90 <closeFile>

	//reload new written data back into game memory.
	readHighScoreBoardFromSD();
  8040c4:	08038f80 	call	8038f8 <readHighScoreBoardFromSD>

	return;
}
  8040c8:	e037883a 	mov	sp,fp
  8040cc:	dfc00317 	ldw	ra,12(sp)
  8040d0:	df000217 	ldw	fp,8(sp)
  8040d4:	dc400117 	ldw	r17,4(sp)
  8040d8:	dc000017 	ldw	r16,0(sp)
  8040dc:	dec00404 	addi	sp,sp,16
  8040e0:	f800283a 	ret

008040e4 <obtainUserInitials>:

//get user input for initials if they are on the high score board
void obtainUserInitials(char * initials){
  8040e4:	defff504 	addi	sp,sp,-44
  8040e8:	dfc00a15 	stw	ra,40(sp)
  8040ec:	df000915 	stw	fp,36(sp)
  8040f0:	df000904 	addi	fp,sp,36
  8040f4:	e13fff15 	stw	r4,-4(fp)

	int numInitials = 3;
  8040f8:	008000c4 	movi	r2,3
  8040fc:	e0bffe15 	stw	r2,-8(fp)
	unsigned int charChoice = 0;
  804100:	e03ffd15 	stw	zero,-12(fp)
	int i;
	char keyInput;
	short int edgeDetect0 = 0;
  804104:	e03ffb0d 	sth	zero,-20(fp)
	short int edgeDetect1 = 0;
  804108:	e03ffa8d 	sth	zero,-22(fp)
	short int edgeDetect2 = 0;
  80410c:	e03ffa0d 	sth	zero,-24(fp)
	keyInput = IORD_8DIRECT(KEYS_BASE, 0);
  804110:	00804034 	movhi	r2,256
  804114:	10842004 	addi	r2,r2,4224
  804118:	10800023 	ldbuio	r2,0(r2)
  80411c:	e0bffb85 	stb	r2,-18(fp)
	static char atariButtons;
	static char atariUp;
	static char atariDown;
	static char atariFire;
	char key0 = keyInput & 0x01;
  804120:	e0bffb83 	ldbu	r2,-18(fp)
  804124:	1080004c 	andi	r2,r2,1
  804128:	e0bff985 	stb	r2,-26(fp)
	char key1 = keyInput & 0x02;
  80412c:	e0bffb83 	ldbu	r2,-18(fp)
  804130:	1080008c 	andi	r2,r2,2
  804134:	e0bff945 	stb	r2,-27(fp)
	char key2 = keyInput & 0x04;
  804138:	e0bffb83 	ldbu	r2,-18(fp)
  80413c:	1080010c 	andi	r2,r2,4
  804140:	e0bff905 	stb	r2,-28(fp)
	int xPos = 20;
  804144:	00800504 	movi	r2,20
  804148:	e0bff815 	stw	r2,-32(fp)
	int yPos = 20;
  80414c:	00800504 	movi	r2,20
  804150:	e0bff715 	stw	r2,-36(fp)

	//0x41 + x(0-25) is alphabet in ascii.
	alt_up_char_buffer_string(char_buffer, "NEW HIGH SCORE!!!", xPos, yPos-3);
  804154:	d1271517 	ldw	r4,-25516(gp)
  804158:	e1bff817 	ldw	r6,-32(fp)
  80415c:	e0bff717 	ldw	r2,-36(fp)
  804160:	10bfff44 	addi	r2,r2,-3
  804164:	100f883a 	mov	r7,r2
  804168:	014020b4 	movhi	r5,130
  80416c:	2970c604 	addi	r5,r5,-15592
  804170:	08150ec0 	call	8150ec <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "use key1 to go up, key2 to go down,", xPos, yPos-2);
  804174:	d1271517 	ldw	r4,-25516(gp)
  804178:	e1bff817 	ldw	r6,-32(fp)
  80417c:	e0bff717 	ldw	r2,-36(fp)
  804180:	10bfff84 	addi	r2,r2,-2
  804184:	100f883a 	mov	r7,r2
  804188:	014020b4 	movhi	r5,130
  80418c:	2970cb04 	addi	r5,r5,-15572
  804190:	08150ec0 	call	8150ec <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "and key0 to lock in choice:", xPos, yPos-1);
  804194:	d1271517 	ldw	r4,-25516(gp)
  804198:	e1bff817 	ldw	r6,-32(fp)
  80419c:	e0bff717 	ldw	r2,-36(fp)
  8041a0:	10bfffc4 	addi	r2,r2,-1
  8041a4:	100f883a 	mov	r7,r2
  8041a8:	014020b4 	movhi	r5,130
  8041ac:	2970d404 	addi	r5,r5,-15536
  8041b0:	08150ec0 	call	8150ec <alt_up_char_buffer_string>
	for(i = 0; i < numInitials; i++) {
  8041b4:	e03ffc15 	stw	zero,-16(fp)
  8041b8:	00008906 	br	8043e0 <obtainUserInitials+0x2fc>
		charChoice = 0;
  8041bc:	e03ffd15 	stw	zero,-12(fp)
		while(1) {
			keyInput = IORD_8DIRECT(KEYS_BASE, 0);
  8041c0:	00804034 	movhi	r2,256
  8041c4:	10842004 	addi	r2,r2,4224
  8041c8:	10800023 	ldbuio	r2,0(r2)
  8041cc:	e0bffb85 	stb	r2,-18(fp)
			key0 = keyInput & 0x01;
  8041d0:	e0bffb83 	ldbu	r2,-18(fp)
  8041d4:	1080004c 	andi	r2,r2,1
  8041d8:	e0bff985 	stb	r2,-26(fp)
			key1 = keyInput & 0x02;
  8041dc:	e0bffb83 	ldbu	r2,-18(fp)
  8041e0:	1080008c 	andi	r2,r2,2
  8041e4:	e0bff945 	stb	r2,-27(fp)
			key2 = keyInput & 0x04;
  8041e8:	e0bffb83 	ldbu	r2,-18(fp)
  8041ec:	1080010c 	andi	r2,r2,4
  8041f0:	e0bff905 	stb	r2,-28(fp)
			atariButtons = (IORD_8DIRECT(PROCESSORGPIN_BASE, 0) & 0x0F);
  8041f4:	00804034 	movhi	r2,256
  8041f8:	10842c04 	addi	r2,r2,4272
  8041fc:	10800023 	ldbuio	r2,0(r2)
  804200:	108003cc 	andi	r2,r2,15
  804204:	d0a72bc5 	stb	r2,-25425(gp)
			atariFire = atariButtons & 0x08;
  804208:	d0a72bc3 	ldbu	r2,-25425(gp)
  80420c:	1080020c 	andi	r2,r2,8
  804210:	d0a72b05 	stb	r2,-25428(gp)
			atariUp = atariButtons & 0x02;
  804214:	d0a72bc3 	ldbu	r2,-25425(gp)
  804218:	1080008c 	andi	r2,r2,2
  80421c:	d0a72b85 	stb	r2,-25426(gp)
			atariDown = atariButtons & 0x04;
  804220:	d0a72bc3 	ldbu	r2,-25425(gp)
  804224:	1080010c 	andi	r2,r2,4
  804228:	d0a72b45 	stb	r2,-25427(gp)

			alt_up_char_buffer_string(char_buffer, initials, xPos, yPos);
  80422c:	d1271517 	ldw	r4,-25516(gp)
  804230:	e1bff817 	ldw	r6,-32(fp)
  804234:	e1fff717 	ldw	r7,-36(fp)
  804238:	e17fff17 	ldw	r5,-4(fp)
  80423c:	08150ec0 	call	8150ec <alt_up_char_buffer_string>
			if ((!key0 && !atariFire) && (edgeDetect0 == 0)) {
  804240:	e0bff987 	ldb	r2,-26(fp)
  804244:	1004c03a 	cmpne	r2,r2,zero
  804248:	10000c1e 	bne	r2,zero,80427c <obtainUserInitials+0x198>
  80424c:	d0a72b03 	ldbu	r2,-25428(gp)
  804250:	10803fcc 	andi	r2,r2,255
  804254:	1080201c 	xori	r2,r2,128
  804258:	10bfe004 	addi	r2,r2,-128
  80425c:	1004c03a 	cmpne	r2,r2,zero
  804260:	1000061e 	bne	r2,zero,80427c <obtainUserInitials+0x198>
  804264:	e0bffb0f 	ldh	r2,-20(fp)
  804268:	1004c03a 	cmpne	r2,r2,zero
  80426c:	1000031e 	bne	r2,zero,80427c <obtainUserInitials+0x198>
				edgeDetect0 = 1;
  804270:	00800044 	movi	r2,1
  804274:	e0bffb0d 	sth	r2,-20(fp)
			atariFire = atariButtons & 0x08;
			atariUp = atariButtons & 0x02;
			atariDown = atariButtons & 0x04;

			alt_up_char_buffer_string(char_buffer, initials, xPos, yPos);
			if ((!key0 && !atariFire) && (edgeDetect0 == 0)) {
  804278:	00000e06 	br	8042b4 <obtainUserInitials+0x1d0>
				edgeDetect0 = 1;
			} else if ((key0 ^ atariFire) && (edgeDetect0 == 1)) {
  80427c:	d0a72b03 	ldbu	r2,-25428(gp)
  804280:	e0fff987 	ldb	r3,-26(fp)
  804284:	10803fcc 	andi	r2,r2,255
  804288:	1080201c 	xori	r2,r2,128
  80428c:	10bfe004 	addi	r2,r2,-128
  804290:	18800826 	beq	r3,r2,8042b4 <obtainUserInitials+0x1d0>
  804294:	e0bffb0f 	ldh	r2,-20(fp)
  804298:	10800058 	cmpnei	r2,r2,1
  80429c:	1000051e 	bne	r2,zero,8042b4 <obtainUserInitials+0x1d0>
				edgeDetect0 = 0;
  8042a0:	e03ffb0d 	sth	zero,-20(fp)

	//0x41 + x(0-25) is alphabet in ascii.
	alt_up_char_buffer_string(char_buffer, "NEW HIGH SCORE!!!", xPos, yPos-3);
	alt_up_char_buffer_string(char_buffer, "use key1 to go up, key2 to go down,", xPos, yPos-2);
	alt_up_char_buffer_string(char_buffer, "and key0 to lock in choice:", xPos, yPos-1);
	for(i = 0; i < numInitials; i++) {
  8042a4:	e0bffc17 	ldw	r2,-16(fp)
  8042a8:	10800044 	addi	r2,r2,1
  8042ac:	e0bffc15 	stw	r2,-16(fp)
  8042b0:	00004b06 	br	8043e0 <obtainUserInitials+0x2fc>
				edgeDetect0 = 1;
			} else if ((key0 ^ atariFire) && (edgeDetect0 == 1)) {
				edgeDetect0 = 0;
				break;
			}
			if ((!key1 && !atariUp) && (edgeDetect1 == 0)) {
  8042b4:	e0bff947 	ldb	r2,-27(fp)
  8042b8:	1004c03a 	cmpne	r2,r2,zero
  8042bc:	10000c1e 	bne	r2,zero,8042f0 <obtainUserInitials+0x20c>
  8042c0:	d0a72b83 	ldbu	r2,-25426(gp)
  8042c4:	10803fcc 	andi	r2,r2,255
  8042c8:	1080201c 	xori	r2,r2,128
  8042cc:	10bfe004 	addi	r2,r2,-128
  8042d0:	1004c03a 	cmpne	r2,r2,zero
  8042d4:	1000061e 	bne	r2,zero,8042f0 <obtainUserInitials+0x20c>
  8042d8:	e0bffa8f 	ldh	r2,-22(fp)
  8042dc:	1004c03a 	cmpne	r2,r2,zero
  8042e0:	1000031e 	bne	r2,zero,8042f0 <obtainUserInitials+0x20c>
				edgeDetect1 = 1;
  8042e4:	00800044 	movi	r2,1
  8042e8:	e0bffa8d 	sth	r2,-22(fp)
				edgeDetect0 = 1;
			} else if ((key0 ^ atariFire) && (edgeDetect0 == 1)) {
				edgeDetect0 = 0;
				break;
			}
			if ((!key1 && !atariUp) && (edgeDetect1 == 0)) {
  8042ec:	00001206 	br	804338 <obtainUserInitials+0x254>
				edgeDetect1 = 1;
			} else if ((key1 ^ atariUp) && (edgeDetect1 == 1)) {
  8042f0:	d0a72b83 	ldbu	r2,-25426(gp)
  8042f4:	e0fff947 	ldb	r3,-27(fp)
  8042f8:	10803fcc 	andi	r2,r2,255
  8042fc:	1080201c 	xori	r2,r2,128
  804300:	10bfe004 	addi	r2,r2,-128
  804304:	18800c26 	beq	r3,r2,804338 <obtainUserInitials+0x254>
  804308:	e0bffa8f 	ldh	r2,-22(fp)
  80430c:	10800058 	cmpnei	r2,r2,1
  804310:	1000091e 	bne	r2,zero,804338 <obtainUserInitials+0x254>
				edgeDetect1 = 0;
  804314:	e03ffa8d 	sth	zero,-22(fp)
				if(charChoice < 25){
  804318:	e0bffd17 	ldw	r2,-12(fp)
  80431c:	10800668 	cmpgeui	r2,r2,25
  804320:	1000041e 	bne	r2,zero,804334 <obtainUserInitials+0x250>
					charChoice++;
  804324:	e0bffd17 	ldw	r2,-12(fp)
  804328:	10800044 	addi	r2,r2,1
  80432c:	e0bffd15 	stw	r2,-12(fp)
  804330:	00000106 	br	804338 <obtainUserInitials+0x254>
				} else {
					charChoice = 0;
  804334:	e03ffd15 	stw	zero,-12(fp)
				}
			}
			if ((!key2 && !atariDown) && (edgeDetect2 == 0)) {
  804338:	e0bff907 	ldb	r2,-28(fp)
  80433c:	1004c03a 	cmpne	r2,r2,zero
  804340:	10000c1e 	bne	r2,zero,804374 <obtainUserInitials+0x290>
  804344:	d0a72b43 	ldbu	r2,-25427(gp)
  804348:	10803fcc 	andi	r2,r2,255
  80434c:	1080201c 	xori	r2,r2,128
  804350:	10bfe004 	addi	r2,r2,-128
  804354:	1004c03a 	cmpne	r2,r2,zero
  804358:	1000061e 	bne	r2,zero,804374 <obtainUserInitials+0x290>
  80435c:	e0bffa0f 	ldh	r2,-24(fp)
  804360:	1004c03a 	cmpne	r2,r2,zero
  804364:	1000031e 	bne	r2,zero,804374 <obtainUserInitials+0x290>
				edgeDetect2 = 1;
  804368:	00800044 	movi	r2,1
  80436c:	e0bffa0d 	sth	r2,-24(fp)
					charChoice++;
				} else {
					charChoice = 0;
				}
			}
			if ((!key2 && !atariDown) && (edgeDetect2 == 0)) {
  804370:	00001306 	br	8043c0 <obtainUserInitials+0x2dc>
				edgeDetect2 = 1;
			} else if ((key2 ^ atariDown) && (edgeDetect2 == 1)) {
  804374:	d0a72b43 	ldbu	r2,-25427(gp)
  804378:	e0fff907 	ldb	r3,-28(fp)
  80437c:	10803fcc 	andi	r2,r2,255
  804380:	1080201c 	xori	r2,r2,128
  804384:	10bfe004 	addi	r2,r2,-128
  804388:	18800d26 	beq	r3,r2,8043c0 <obtainUserInitials+0x2dc>
  80438c:	e0bffa0f 	ldh	r2,-24(fp)
  804390:	10800058 	cmpnei	r2,r2,1
  804394:	10000a1e 	bne	r2,zero,8043c0 <obtainUserInitials+0x2dc>
				edgeDetect2 = 0;
  804398:	e03ffa0d 	sth	zero,-24(fp)
				if(charChoice > 0) {
  80439c:	e0bffd17 	ldw	r2,-12(fp)
  8043a0:	1005003a 	cmpeq	r2,r2,zero
  8043a4:	1000041e 	bne	r2,zero,8043b8 <obtainUserInitials+0x2d4>
					charChoice--;
  8043a8:	e0bffd17 	ldw	r2,-12(fp)
  8043ac:	10bfffc4 	addi	r2,r2,-1
  8043b0:	e0bffd15 	stw	r2,-12(fp)
  8043b4:	00000206 	br	8043c0 <obtainUserInitials+0x2dc>
				} else {
					charChoice = 25;
  8043b8:	00800644 	movi	r2,25
  8043bc:	e0bffd15 	stw	r2,-12(fp)
				}

			}
			initials[i] = 0x41 + charChoice;
  8043c0:	e0bffc17 	ldw	r2,-16(fp)
  8043c4:	1007883a 	mov	r3,r2
  8043c8:	e0bfff17 	ldw	r2,-4(fp)
  8043cc:	1887883a 	add	r3,r3,r2
  8043d0:	e0bffd17 	ldw	r2,-12(fp)
  8043d4:	10801044 	addi	r2,r2,65
  8043d8:	18800005 	stb	r2,0(r3)
		}
  8043dc:	003f7806 	br	8041c0 <obtainUserInitials+0xdc>

	//0x41 + x(0-25) is alphabet in ascii.
	alt_up_char_buffer_string(char_buffer, "NEW HIGH SCORE!!!", xPos, yPos-3);
	alt_up_char_buffer_string(char_buffer, "use key1 to go up, key2 to go down,", xPos, yPos-2);
	alt_up_char_buffer_string(char_buffer, "and key0 to lock in choice:", xPos, yPos-1);
	for(i = 0; i < numInitials; i++) {
  8043e0:	e0fffc17 	ldw	r3,-16(fp)
  8043e4:	e0bffe17 	ldw	r2,-8(fp)
  8043e8:	18bf7416 	blt	r3,r2,8041bc <obtainUserInitials+0xd8>
			}
			initials[i] = 0x41 + charChoice;
		}
	}

	alt_up_char_buffer_clear(char_buffer); // clear screen
  8043ec:	d1271517 	ldw	r4,-25516(gp)
  8043f0:	08152000 	call	815200 <alt_up_char_buffer_clear>

	printf("initials read as: %c%c%c", initials[0], initials[1], initials[2]);
  8043f4:	e0bfff17 	ldw	r2,-4(fp)
  8043f8:	10800003 	ldbu	r2,0(r2)
  8043fc:	11403fcc 	andi	r5,r2,255
  804400:	2940201c 	xori	r5,r5,128
  804404:	297fe004 	addi	r5,r5,-128
  804408:	e0bfff17 	ldw	r2,-4(fp)
  80440c:	10800044 	addi	r2,r2,1
  804410:	10800003 	ldbu	r2,0(r2)
  804414:	11803fcc 	andi	r6,r2,255
  804418:	3180201c 	xori	r6,r6,128
  80441c:	31bfe004 	addi	r6,r6,-128
  804420:	e0bfff17 	ldw	r2,-4(fp)
  804424:	10800084 	addi	r2,r2,2
  804428:	10800003 	ldbu	r2,0(r2)
  80442c:	11c03fcc 	andi	r7,r2,255
  804430:	39c0201c 	xori	r7,r7,128
  804434:	39ffe004 	addi	r7,r7,-128
  804438:	010020b4 	movhi	r4,130
  80443c:	2130db04 	addi	r4,r4,-15508
  804440:	0809e680 	call	809e68 <printf>

	return;
}
  804444:	e037883a 	mov	sp,fp
  804448:	dfc00117 	ldw	ra,4(sp)
  80444c:	df000017 	ldw	fp,0(sp)
  804450:	dec00204 	addi	sp,sp,8
  804454:	f800283a 	ret

00804458 <updateCurrentPlayerScore>:


//increment player score by deltaScore
void updateCurrentPlayerScore(int deltaScore) {
  804458:	defffe04 	addi	sp,sp,-8
  80445c:	df000115 	stw	fp,4(sp)
  804460:	df000104 	addi	fp,sp,4
  804464:	e13fff15 	stw	r4,-4(fp)
	gameScores->currentPlayerScore += deltaScore;
  804468:	d1272c17 	ldw	r4,-25424(gp)
  80446c:	d0a72c17 	ldw	r2,-25424(gp)
  804470:	10c00017 	ldw	r3,0(r2)
  804474:	e0bfff17 	ldw	r2,-4(fp)
  804478:	1885883a 	add	r2,r3,r2
  80447c:	20800015 	stw	r2,0(r4)
	return;
}
  804480:	e037883a 	mov	sp,fp
  804484:	df000017 	ldw	fp,0(sp)
  804488:	dec00104 	addi	sp,sp,4
  80448c:	f800283a 	ret

00804490 <setCurrentPlayerScore>:

//mutator: set playerScore to score
void setCurrentPlayerScore(int score) {
  804490:	defffe04 	addi	sp,sp,-8
  804494:	df000115 	stw	fp,4(sp)
  804498:	df000104 	addi	fp,sp,4
  80449c:	e13fff15 	stw	r4,-4(fp)
	gameScores->currentPlayerScore = score;
  8044a0:	d0e72c17 	ldw	r3,-25424(gp)
  8044a4:	e0bfff17 	ldw	r2,-4(fp)
  8044a8:	18800015 	stw	r2,0(r3)
	return;
}
  8044ac:	e037883a 	mov	sp,fp
  8044b0:	df000017 	ldw	fp,0(sp)
  8044b4:	dec00104 	addi	sp,sp,4
  8044b8:	f800283a 	ret

008044bc <getCurrentPlayerScore>:

//accessor: get score
int getCurrentPlayerScore() {
  8044bc:	deffff04 	addi	sp,sp,-4
  8044c0:	df000015 	stw	fp,0(sp)
  8044c4:	d839883a 	mov	fp,sp
	return gameScores->currentPlayerScore;
  8044c8:	d0a72c17 	ldw	r2,-25424(gp)
  8044cc:	10800017 	ldw	r2,0(r2)
}
  8044d0:	e037883a 	mov	sp,fp
  8044d4:	df000017 	ldw	fp,0(sp)
  8044d8:	dec00104 	addi	sp,sp,4
  8044dc:	f800283a 	ret

008044e0 <setCurrentPlayerLives>:

//mutator: set lives to newNumLives
void setCurrentPlayerLives(int newNumLives){
  8044e0:	defffe04 	addi	sp,sp,-8
  8044e4:	df000115 	stw	fp,4(sp)
  8044e8:	df000104 	addi	fp,sp,4
  8044ec:	e13fff15 	stw	r4,-4(fp)
	gameScores->currentPlayerLives = newNumLives;
  8044f0:	d0e72c17 	ldw	r3,-25424(gp)
  8044f4:	e0bfff17 	ldw	r2,-4(fp)
  8044f8:	18800115 	stw	r2,4(r3)
}
  8044fc:	e037883a 	mov	sp,fp
  804500:	df000017 	ldw	fp,0(sp)
  804504:	dec00104 	addi	sp,sp,4
  804508:	f800283a 	ret

0080450c <getCurrentPlayerLives>:

//accessor: get lives
int getCurrentPlayerLives(void) {
  80450c:	deffff04 	addi	sp,sp,-4
  804510:	df000015 	stw	fp,0(sp)
  804514:	d839883a 	mov	fp,sp
	return gameScores->currentPlayerLives;
  804518:	d0a72c17 	ldw	r2,-25424(gp)
  80451c:	10800117 	ldw	r2,4(r2)
}
  804520:	e037883a 	mov	sp,fp
  804524:	df000017 	ldw	fp,0(sp)
  804528:	dec00104 	addi	sp,sp,4
  80452c:	f800283a 	ret

00804530 <drawScore>:

//purpose: overlay current scoreboard values onto the screen.
void drawScore(void){
  804530:	deffee04 	addi	sp,sp,-72
  804534:	dfc01115 	stw	ra,68(sp)
  804538:	df001015 	stw	fp,64(sp)
  80453c:	dc400f15 	stw	r17,60(sp)
  804540:	dc000e15 	stw	r16,56(sp)
  804544:	df000e04 	addi	fp,sp,56
	char scoreValues[32];// = malloc(sizeof(char) * NUMINITIALS); // scores wont exceed 10, and names are 3
	int i,j;
	int digit;
	int firstNonZeroDig;
	int xPos = 35;
  804548:	008008c4 	movi	r2,35
  80454c:	e0bff315 	stw	r2,-52(fp)
	int ypos = 25;
  804550:	00800644 	movi	r2,25
  804554:	e0bff215 	stw	r2,-56(fp)

	alt_up_char_buffer_string(char_buffer, "**HIGH SCORES**" , xPos, ypos - 2);
  804558:	d1271517 	ldw	r4,-25516(gp)
  80455c:	e1bff317 	ldw	r6,-52(fp)
  804560:	e0bff217 	ldw	r2,-56(fp)
  804564:	10bfff84 	addi	r2,r2,-2
  804568:	100f883a 	mov	r7,r2
  80456c:	014020b4 	movhi	r5,130
  804570:	2970e204 	addi	r5,r5,-15480
  804574:	08150ec0 	call	8150ec <alt_up_char_buffer_string>

	for(i = 0; i < NUMSCORES; i++) {
  804578:	e03ff715 	stw	zero,-36(fp)
  80457c:	00007006 	br	804740 <drawScore+0x210>
		scoreValues[0] = gameScores->highScoreBoardInits[i][0];
  804580:	d1272c17 	ldw	r4,-25424(gp)
  804584:	e0fff717 	ldw	r3,-36(fp)
  804588:	1805883a 	mov	r2,r3
  80458c:	1085883a 	add	r2,r2,r2
  804590:	10c5883a 	add	r2,r2,r3
  804594:	1105883a 	add	r2,r2,r4
  804598:	10800c04 	addi	r2,r2,48
  80459c:	10800003 	ldbu	r2,0(r2)
  8045a0:	e0bff805 	stb	r2,-32(fp)
		scoreValues[1] = gameScores->highScoreBoardInits[i][1];
  8045a4:	d1272c17 	ldw	r4,-25424(gp)
  8045a8:	e0fff717 	ldw	r3,-36(fp)
  8045ac:	1805883a 	mov	r2,r3
  8045b0:	1085883a 	add	r2,r2,r2
  8045b4:	10c5883a 	add	r2,r2,r3
  8045b8:	1105883a 	add	r2,r2,r4
  8045bc:	10800c44 	addi	r2,r2,49
  8045c0:	10800003 	ldbu	r2,0(r2)
  8045c4:	e0bff845 	stb	r2,-31(fp)
		scoreValues[2] = gameScores->highScoreBoardInits[i][2];
  8045c8:	d1272c17 	ldw	r4,-25424(gp)
  8045cc:	e0fff717 	ldw	r3,-36(fp)
  8045d0:	1805883a 	mov	r2,r3
  8045d4:	1085883a 	add	r2,r2,r2
  8045d8:	10c5883a 	add	r2,r2,r3
  8045dc:	1105883a 	add	r2,r2,r4
  8045e0:	10800c84 	addi	r2,r2,50
  8045e4:	10800003 	ldbu	r2,0(r2)
  8045e8:	e0bff885 	stb	r2,-30(fp)

		scoreValues[3] = ' ';
  8045ec:	00800804 	movi	r2,32
  8045f0:	e0bff8c5 	stb	r2,-29(fp)

		firstNonZeroDig = 0;
  8045f4:	e03ff415 	stw	zero,-48(fp)
		for(j = 0; j < MAXSCOREDIGITS; j++){
  8045f8:	e03ff615 	stw	zero,-40(fp)
  8045fc:	00004106 	br	804704 <drawScore+0x1d4>
			digit = ((int)(gameScores->highScoreBoard[i] / pow(10,(MAXSCOREDIGITS - 1 - j))) % 10);
  804600:	d0e72c17 	ldw	r3,-25424(gp)
  804604:	e0bff717 	ldw	r2,-36(fp)
  804608:	1085883a 	add	r2,r2,r2
  80460c:	1085883a 	add	r2,r2,r2
  804610:	10c5883a 	add	r2,r2,r3
  804614:	10800204 	addi	r2,r2,8
  804618:	11000017 	ldw	r4,0(r2)
  80461c:	0808b480 	call	808b48 <__floatsidf>
  804620:	1021883a 	mov	r16,r2
  804624:	1823883a 	mov	r17,r3
  804628:	00c00244 	movi	r3,9
  80462c:	e0bff617 	ldw	r2,-40(fp)
  804630:	1889c83a 	sub	r4,r3,r2
  804634:	0808b480 	call	808b48 <__floatsidf>
  804638:	100f883a 	mov	r7,r2
  80463c:	1811883a 	mov	r8,r3
  804640:	0009883a 	mov	r4,zero
  804644:	01500934 	movhi	r5,16420
  804648:	380d883a 	mov	r6,r7
  80464c:	400f883a 	mov	r7,r8
  804650:	0805c400 	call	805c40 <pow>
  804654:	100f883a 	mov	r7,r2
  804658:	1811883a 	mov	r8,r3
  80465c:	8009883a 	mov	r4,r16
  804660:	880b883a 	mov	r5,r17
  804664:	380d883a 	mov	r6,r7
  804668:	400f883a 	mov	r7,r8
  80466c:	08086480 	call	808648 <__divdf3>
  804670:	1009883a 	mov	r4,r2
  804674:	180b883a 	mov	r5,r3
  804678:	2005883a 	mov	r2,r4
  80467c:	2807883a 	mov	r3,r5
  804680:	1009883a 	mov	r4,r2
  804684:	180b883a 	mov	r5,r3
  804688:	0808c400 	call	808c40 <__fixdfsi>
  80468c:	1009883a 	mov	r4,r2
  804690:	01400284 	movi	r5,10
  804694:	0808e2c0 	call	808e2c <__modsi3>
  804698:	e0bff515 	stw	r2,-44(fp)
			//printf("digit: %d\n", digit);
			if(digit == 0 && firstNonZeroDig == 0){
  80469c:	e0bff517 	ldw	r2,-44(fp)
  8046a0:	1004c03a 	cmpne	r2,r2,zero
  8046a4:	10000a1e 	bne	r2,zero,8046d0 <drawScore+0x1a0>
  8046a8:	e0bff417 	ldw	r2,-48(fp)
  8046ac:	1004c03a 	cmpne	r2,r2,zero
  8046b0:	1000071e 	bne	r2,zero,8046d0 <drawScore+0x1a0>
				scoreValues[4+j] = ' ';
  8046b4:	e0bff617 	ldw	r2,-40(fp)
  8046b8:	10c00104 	addi	r3,r2,4
  8046bc:	e0bff804 	addi	r2,fp,-32
  8046c0:	10c7883a 	add	r3,r2,r3
  8046c4:	00800804 	movi	r2,32
  8046c8:	18800005 	stb	r2,0(r3)

		firstNonZeroDig = 0;
		for(j = 0; j < MAXSCOREDIGITS; j++){
			digit = ((int)(gameScores->highScoreBoard[i] / pow(10,(MAXSCOREDIGITS - 1 - j))) % 10);
			//printf("digit: %d\n", digit);
			if(digit == 0 && firstNonZeroDig == 0){
  8046cc:	00000a06 	br	8046f8 <drawScore+0x1c8>
				scoreValues[4+j] = ' ';
			} else {
				firstNonZeroDig = 1;
  8046d0:	00800044 	movi	r2,1
  8046d4:	e0bff415 	stw	r2,-48(fp)
				scoreValues[4+j] = (digit + '0');
  8046d8:	e0bff617 	ldw	r2,-40(fp)
  8046dc:	11000104 	addi	r4,r2,4
  8046e0:	e0bff517 	ldw	r2,-44(fp)
  8046e4:	10800c04 	addi	r2,r2,48
  8046e8:	1007883a 	mov	r3,r2
  8046ec:	e0bff804 	addi	r2,fp,-32
  8046f0:	1105883a 	add	r2,r2,r4
  8046f4:	10c00005 	stb	r3,0(r2)
		scoreValues[2] = gameScores->highScoreBoardInits[i][2];

		scoreValues[3] = ' ';

		firstNonZeroDig = 0;
		for(j = 0; j < MAXSCOREDIGITS; j++){
  8046f8:	e0bff617 	ldw	r2,-40(fp)
  8046fc:	10800044 	addi	r2,r2,1
  804700:	e0bff615 	stw	r2,-40(fp)
  804704:	e0bff617 	ldw	r2,-40(fp)
  804708:	10800290 	cmplti	r2,r2,10
  80470c:	103fbc1e 	bne	r2,zero,804600 <drawScore+0xd0>
			} else {
				firstNonZeroDig = 1;
				scoreValues[4+j] = (digit + '0');
			}
		}
		scoreValues[4+MAXSCOREDIGITS] = '\0';
  804710:	e03ffb85 	stb	zero,-18(fp)

		alt_up_char_buffer_string(char_buffer, scoreValues , xPos, ypos + i);
  804714:	d1271517 	ldw	r4,-25516(gp)
  804718:	e1bff317 	ldw	r6,-52(fp)
  80471c:	e0fff217 	ldw	r3,-56(fp)
  804720:	e0bff717 	ldw	r2,-36(fp)
  804724:	1885883a 	add	r2,r3,r2
  804728:	100f883a 	mov	r7,r2
  80472c:	e17ff804 	addi	r5,fp,-32
  804730:	08150ec0 	call	8150ec <alt_up_char_buffer_string>
	int xPos = 35;
	int ypos = 25;

	alt_up_char_buffer_string(char_buffer, "**HIGH SCORES**" , xPos, ypos - 2);

	for(i = 0; i < NUMSCORES; i++) {
  804734:	e0bff717 	ldw	r2,-36(fp)
  804738:	10800044 	addi	r2,r2,1
  80473c:	e0bff715 	stw	r2,-36(fp)
  804740:	e0bff717 	ldw	r2,-36(fp)
  804744:	10800290 	cmplti	r2,r2,10
  804748:	103f8d1e 	bne	r2,zero,804580 <drawScore+0x50>
		}
		scoreValues[4+MAXSCOREDIGITS] = '\0';

		alt_up_char_buffer_string(char_buffer, scoreValues , xPos, ypos + i);
	}
}
  80474c:	e037883a 	mov	sp,fp
  804750:	dfc00317 	ldw	ra,12(sp)
  804754:	df000217 	ldw	fp,8(sp)
  804758:	dc400117 	ldw	r17,4(sp)
  80475c:	dc000017 	ldw	r16,0(sp)
  804760:	dec00404 	addi	sp,sp,16
  804764:	f800283a 	ret

00804768 <clearScore>:

void clearScore(void) {
  804768:	defffe04 	addi	sp,sp,-8
  80476c:	dfc00115 	stw	ra,4(sp)
  804770:	df000015 	stw	fp,0(sp)
  804774:	d839883a 	mov	fp,sp
	alt_up_char_buffer_clear(char_buffer);
  804778:	d1271517 	ldw	r4,-25516(gp)
  80477c:	08152000 	call	815200 <alt_up_char_buffer_clear>
}
  804780:	e037883a 	mov	sp,fp
  804784:	dfc00117 	ldw	ra,4(sp)
  804788:	df000017 	ldw	fp,0(sp)
  80478c:	dec00204 	addi	sp,sp,8
  804790:	f800283a 	ret

00804794 <drawInGameInfo>:

//draws current lives and playerScore
void drawInGameInfo(void) {
  804794:	defff204 	addi	sp,sp,-56
  804798:	dfc00d15 	stw	ra,52(sp)
  80479c:	df000c15 	stw	fp,48(sp)
  8047a0:	dc400b15 	stw	r17,44(sp)
  8047a4:	dc000a15 	stw	r16,40(sp)
  8047a8:	df000a04 	addi	fp,sp,40
	char livesLeft[2] = {' ', '\0'};
  8047ac:	00800804 	movi	r2,32
  8047b0:	e0bffc05 	stb	r2,-16(fp)
  8047b4:	e03ffc45 	stb	zero,-15(fp)
	livesLeft[0] = (getCurrentPlayerLives() + '0');
  8047b8:	080450c0 	call	80450c <getCurrentPlayerLives>
  8047bc:	10800c04 	addi	r2,r2,48
  8047c0:	e0bffc05 	stb	r2,-16(fp)
	int xPos = 1;
  8047c4:	00800044 	movi	r2,1
  8047c8:	e0bffb15 	stw	r2,-20(fp)
	int yPos = 1;
  8047cc:	00800044 	movi	r2,1
  8047d0:	e0bffa15 	stw	r2,-24(fp)
	int i;
	int digit = 0;
  8047d4:	e03ff815 	stw	zero,-32(fp)
	int firstDigitFound = 0;
  8047d8:	e03ff715 	stw	zero,-36(fp)
	int currentScore = getCurrentPlayerScore();
  8047dc:	08044bc0 	call	8044bc <getCurrentPlayerScore>
  8047e0:	e0bff615 	stw	r2,-40(fp)
	char currentCharScore[MAXSCOREDIGITS + 1];
	currentCharScore[MAXSCOREDIGITS] = '\0'; //end of string
  8047e4:	e03fff05 	stb	zero,-4(fp)

	//populate currentCharScore;
	for(i = 0; i < MAXSCOREDIGITS; i++) {
  8047e8:	e03ff915 	stw	zero,-28(fp)
  8047ec:	00003e06 	br	8048e8 <drawInGameInfo+0x154>
		digit = ((int)(currentScore / pow(10,(MAXSCOREDIGITS - 1 - i)))%10);
  8047f0:	e13ff617 	ldw	r4,-40(fp)
  8047f4:	0808b480 	call	808b48 <__floatsidf>
  8047f8:	1021883a 	mov	r16,r2
  8047fc:	1823883a 	mov	r17,r3
  804800:	00c00244 	movi	r3,9
  804804:	e0bff917 	ldw	r2,-28(fp)
  804808:	1889c83a 	sub	r4,r3,r2
  80480c:	0808b480 	call	808b48 <__floatsidf>
  804810:	100f883a 	mov	r7,r2
  804814:	1811883a 	mov	r8,r3
  804818:	0009883a 	mov	r4,zero
  80481c:	01500934 	movhi	r5,16420
  804820:	380d883a 	mov	r6,r7
  804824:	400f883a 	mov	r7,r8
  804828:	0805c400 	call	805c40 <pow>
  80482c:	100f883a 	mov	r7,r2
  804830:	1811883a 	mov	r8,r3
  804834:	8009883a 	mov	r4,r16
  804838:	880b883a 	mov	r5,r17
  80483c:	380d883a 	mov	r6,r7
  804840:	400f883a 	mov	r7,r8
  804844:	08086480 	call	808648 <__divdf3>
  804848:	1009883a 	mov	r4,r2
  80484c:	180b883a 	mov	r5,r3
  804850:	2005883a 	mov	r2,r4
  804854:	2807883a 	mov	r3,r5
  804858:	1009883a 	mov	r4,r2
  80485c:	180b883a 	mov	r5,r3
  804860:	0808c400 	call	808c40 <__fixdfsi>
  804864:	1009883a 	mov	r4,r2
  804868:	01400284 	movi	r5,10
  80486c:	0808e2c0 	call	808e2c <__modsi3>
  804870:	e0bff815 	stw	r2,-32(fp)
		currentCharScore[i] = '0';
  804874:	e0fff917 	ldw	r3,-28(fp)
  804878:	e0bffc84 	addi	r2,fp,-14
  80487c:	10c7883a 	add	r3,r2,r3
  804880:	00800c04 	movi	r2,48
  804884:	18800005 	stb	r2,0(r3)
		if(digit != 0 && firstDigitFound == 0) {
  804888:	e0bff817 	ldw	r2,-32(fp)
  80488c:	1005003a 	cmpeq	r2,r2,zero
  804890:	1000051e 	bne	r2,zero,8048a8 <drawInGameInfo+0x114>
  804894:	e0bff717 	ldw	r2,-36(fp)
  804898:	1004c03a 	cmpne	r2,r2,zero
  80489c:	1000021e 	bne	r2,zero,8048a8 <drawInGameInfo+0x114>
			firstDigitFound = 1;
  8048a0:	00800044 	movi	r2,1
  8048a4:	e0bff715 	stw	r2,-36(fp)
		}
		if(firstDigitFound == 1 || i == (MAXSCOREDIGITS - 1)) {
  8048a8:	e0bff717 	ldw	r2,-36(fp)
  8048ac:	10800060 	cmpeqi	r2,r2,1
  8048b0:	1000031e 	bne	r2,zero,8048c0 <drawInGameInfo+0x12c>
  8048b4:	e0bff917 	ldw	r2,-28(fp)
  8048b8:	10800258 	cmpnei	r2,r2,9
  8048bc:	1000071e 	bne	r2,zero,8048dc <drawInGameInfo+0x148>
			currentCharScore[i] = (digit + '0');
  8048c0:	e13ff917 	ldw	r4,-28(fp)
  8048c4:	e0bff817 	ldw	r2,-32(fp)
  8048c8:	10800c04 	addi	r2,r2,48
  8048cc:	1007883a 	mov	r3,r2
  8048d0:	e0bffc84 	addi	r2,fp,-14
  8048d4:	1105883a 	add	r2,r2,r4
  8048d8:	10c00005 	stb	r3,0(r2)
	int currentScore = getCurrentPlayerScore();
	char currentCharScore[MAXSCOREDIGITS + 1];
	currentCharScore[MAXSCOREDIGITS] = '\0'; //end of string

	//populate currentCharScore;
	for(i = 0; i < MAXSCOREDIGITS; i++) {
  8048dc:	e0bff917 	ldw	r2,-28(fp)
  8048e0:	10800044 	addi	r2,r2,1
  8048e4:	e0bff915 	stw	r2,-28(fp)
  8048e8:	e0bff917 	ldw	r2,-28(fp)
  8048ec:	10800290 	cmplti	r2,r2,10
  8048f0:	103fbf1e 	bne	r2,zero,8047f0 <drawInGameInfo+0x5c>
			currentCharScore[i] = (digit + '0');
		}
	}

	//print info to screen
	if(livesLeft[0] == '1') {
  8048f4:	e0bffc03 	ldbu	r2,-16(fp)
  8048f8:	10803fcc 	andi	r2,r2,255
  8048fc:	1080201c 	xori	r2,r2,128
  804900:	10bfe004 	addi	r2,r2,-128
  804904:	10800c58 	cmpnei	r2,r2,49
  804908:	1000071e 	bne	r2,zero,804928 <drawInGameInfo+0x194>
		alt_up_char_buffer_string(char_buffer, "Lives: YOLO" , xPos, yPos);
  80490c:	d1271517 	ldw	r4,-25516(gp)
  804910:	e1bffb17 	ldw	r6,-20(fp)
  804914:	e1fffa17 	ldw	r7,-24(fp)
  804918:	014020b4 	movhi	r5,130
  80491c:	2970e604 	addi	r5,r5,-15464
  804920:	08150ec0 	call	8150ec <alt_up_char_buffer_string>
  804924:	00001a06 	br	804990 <drawInGameInfo+0x1fc>

	} else if(livesLeft[0] == '0') {
  804928:	e0bffc03 	ldbu	r2,-16(fp)
  80492c:	10803fcc 	andi	r2,r2,255
  804930:	1080201c 	xori	r2,r2,128
  804934:	10bfe004 	addi	r2,r2,-128
  804938:	10800c18 	cmpnei	r2,r2,48
  80493c:	1000071e 	bne	r2,zero,80495c <drawInGameInfo+0x1c8>
		alt_up_char_buffer_string(char_buffer, "Lives: DEAD" , xPos, yPos);
  804940:	d1271517 	ldw	r4,-25516(gp)
  804944:	e1bffb17 	ldw	r6,-20(fp)
  804948:	e1fffa17 	ldw	r7,-24(fp)
  80494c:	014020b4 	movhi	r5,130
  804950:	2970e904 	addi	r5,r5,-15452
  804954:	08150ec0 	call	8150ec <alt_up_char_buffer_string>
  804958:	00000d06 	br	804990 <drawInGameInfo+0x1fc>
	} else {
		alt_up_char_buffer_string(char_buffer, "Lives: " , xPos, yPos);
  80495c:	d1271517 	ldw	r4,-25516(gp)
  804960:	e1bffb17 	ldw	r6,-20(fp)
  804964:	e1fffa17 	ldw	r7,-24(fp)
  804968:	014020b4 	movhi	r5,130
  80496c:	2970ec04 	addi	r5,r5,-15440
  804970:	08150ec0 	call	8150ec <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buffer, livesLeft , xPos + 7, yPos);
  804974:	d1271517 	ldw	r4,-25516(gp)
  804978:	e0bffb17 	ldw	r2,-20(fp)
  80497c:	108001c4 	addi	r2,r2,7
  804980:	100d883a 	mov	r6,r2
  804984:	e1fffa17 	ldw	r7,-24(fp)
  804988:	e17ffc04 	addi	r5,fp,-16
  80498c:	08150ec0 	call	8150ec <alt_up_char_buffer_string>
	}
	alt_up_char_buffer_string(char_buffer, "Score: " , xPos, yPos+1);
  804990:	d1271517 	ldw	r4,-25516(gp)
  804994:	e1bffb17 	ldw	r6,-20(fp)
  804998:	e0bffa17 	ldw	r2,-24(fp)
  80499c:	10800044 	addi	r2,r2,1
  8049a0:	100f883a 	mov	r7,r2
  8049a4:	014020b4 	movhi	r5,130
  8049a8:	2970ee04 	addi	r5,r5,-15432
  8049ac:	08150ec0 	call	8150ec <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, currentCharScore , xPos + 7, yPos+1);
  8049b0:	d1271517 	ldw	r4,-25516(gp)
  8049b4:	e0bffb17 	ldw	r2,-20(fp)
  8049b8:	108001c4 	addi	r2,r2,7
  8049bc:	100d883a 	mov	r6,r2
  8049c0:	e0bffa17 	ldw	r2,-24(fp)
  8049c4:	10800044 	addi	r2,r2,1
  8049c8:	100f883a 	mov	r7,r2
  8049cc:	e17ffc84 	addi	r5,fp,-14
  8049d0:	08150ec0 	call	8150ec <alt_up_char_buffer_string>

	return;
}
  8049d4:	e037883a 	mov	sp,fp
  8049d8:	dfc00317 	ldw	ra,12(sp)
  8049dc:	df000217 	ldw	fp,8(sp)
  8049e0:	dc400117 	ldw	r17,4(sp)
  8049e4:	dc000017 	ldw	r16,0(sp)
  8049e8:	dec00404 	addi	sp,sp,16
  8049ec:	f800283a 	ret

008049f0 <openSdCard>:
#include <stdio.h>
#include <stdlib.h>
#include "sd_card.h"

int openSdCard(){
  8049f0:	defffd04 	addi	sp,sp,-12
  8049f4:	dfc00215 	stw	ra,8(sp)
  8049f8:	df000115 	stw	fp,4(sp)
  8049fc:	df000104 	addi	fp,sp,4
	sdDev = alt_up_sd_card_open_dev("/dev/Altera_UP_SD_Card_Avalon_Interface_0");
  804a00:	010020b4 	movhi	r4,130
  804a04:	2130f004 	addi	r4,r4,-15424
  804a08:	08195300 	call	819530 <alt_up_sd_card_open_dev>
  804a0c:	d0a70f15 	stw	r2,-25540(gp)

	if(sdDev != NULL && alt_up_sd_card_is_FAT16()){
  804a10:	d0a70f17 	ldw	r2,-25540(gp)
  804a14:	1005003a 	cmpeq	r2,r2,zero
  804a18:	1000051e 	bne	r2,zero,804a30 <openSdCard+0x40>
  804a1c:	08196bc0 	call	8196bc <alt_up_sd_card_is_FAT16>
  804a20:	1005003a 	cmpeq	r2,r2,zero
  804a24:	1000021e 	bne	r2,zero,804a30 <openSdCard+0x40>
		return 0;
  804a28:	e03fff15 	stw	zero,-4(fp)
  804a2c:	00000206 	br	804a38 <openSdCard+0x48>
	} else {
		return -1;
  804a30:	00bfffc4 	movi	r2,-1
  804a34:	e0bfff15 	stw	r2,-4(fp)
  804a38:	e0bfff17 	ldw	r2,-4(fp)
	}
}
  804a3c:	e037883a 	mov	sp,fp
  804a40:	dfc00117 	ldw	ra,4(sp)
  804a44:	df000017 	ldw	fp,0(sp)
  804a48:	dec00204 	addi	sp,sp,8
  804a4c:	f800283a 	ret

00804a50 <openFile>:

short int openFile(char *fileName) {
  804a50:	defffd04 	addi	sp,sp,-12
  804a54:	dfc00215 	stw	ra,8(sp)
  804a58:	df000115 	stw	fp,4(sp)
  804a5c:	df000104 	addi	fp,sp,4
  804a60:	e13fff15 	stw	r4,-4(fp)
	return alt_up_sd_card_fopen(fileName, 0);
  804a64:	e13fff17 	ldw	r4,-4(fp)
  804a68:	000b883a 	mov	r5,zero
  804a6c:	0819bb40 	call	819bb4 <alt_up_sd_card_fopen>
  804a70:	10bfffcc 	andi	r2,r2,65535
  804a74:	10a0001c 	xori	r2,r2,32768
  804a78:	10a00004 	addi	r2,r2,-32768
}
  804a7c:	e037883a 	mov	sp,fp
  804a80:	dfc00117 	ldw	ra,4(sp)
  804a84:	df000017 	ldw	fp,0(sp)
  804a88:	dec00204 	addi	sp,sp,8
  804a8c:	f800283a 	ret

00804a90 <closeFile>:

int closeFile(short int fh) {
  804a90:	defffd04 	addi	sp,sp,-12
  804a94:	dfc00215 	stw	ra,8(sp)
  804a98:	df000115 	stw	fp,4(sp)
  804a9c:	df000104 	addi	fp,sp,4
  804aa0:	e13fff0d 	sth	r4,-4(fp)
	return alt_up_sd_card_fclose(fh);
  804aa4:	e13fff0f 	ldh	r4,-4(fp)
  804aa8:	081aa300 	call	81aa30 <alt_up_sd_card_fclose>
}
  804aac:	e037883a 	mov	sp,fp
  804ab0:	dfc00117 	ldw	ra,4(sp)
  804ab4:	df000017 	ldw	fp,0(sp)
  804ab8:	dec00204 	addi	sp,sp,8
  804abc:	f800283a 	ret

00804ac0 <readByte>:

unsigned char readByte(short int fh) {
  804ac0:	defffd04 	addi	sp,sp,-12
  804ac4:	dfc00215 	stw	ra,8(sp)
  804ac8:	df000115 	stw	fp,4(sp)
  804acc:	df000104 	addi	fp,sp,4
  804ad0:	e13fff0d 	sth	r4,-4(fp)
	return (unsigned char) alt_up_sd_card_read(fh);
  804ad4:	e13fff0f 	ldh	r4,-4(fp)
  804ad8:	081a0780 	call	81a078 <alt_up_sd_card_read>
  804adc:	10803fcc 	andi	r2,r2,255
}
  804ae0:	e037883a 	mov	sp,fp
  804ae4:	dfc00117 	ldw	ra,4(sp)
  804ae8:	df000017 	ldw	fp,0(sp)
  804aec:	dec00204 	addi	sp,sp,8
  804af0:	f800283a 	ret

00804af4 <readWord>:
short int readWord(short int fh) {
  804af4:	defffb04 	addi	sp,sp,-20
  804af8:	dfc00415 	stw	ra,16(sp)
  804afc:	df000315 	stw	fp,12(sp)
  804b00:	df000304 	addi	fp,sp,12
  804b04:	e13ffe0d 	sth	r4,-8(fp)
	short int byte1, byte2;

	byte1 = alt_up_sd_card_read(fh);
  804b08:	e13ffe0f 	ldh	r4,-8(fp)
  804b0c:	081a0780 	call	81a078 <alt_up_sd_card_read>
  804b10:	e0bffd8d 	sth	r2,-10(fp)
	byte2 = alt_up_sd_card_read(fh);
  804b14:	e13ffe0f 	ldh	r4,-8(fp)
  804b18:	081a0780 	call	81a078 <alt_up_sd_card_read>
  804b1c:	e0bffd0d 	sth	r2,-12(fp)

	if (byte1 == -1 || byte2 == -1)
  804b20:	e0bffd8f 	ldh	r2,-10(fp)
  804b24:	10bfffe0 	cmpeqi	r2,r2,-1
  804b28:	1000031e 	bne	r2,zero,804b38 <readWord+0x44>
  804b2c:	e0bffd0f 	ldh	r2,-12(fp)
  804b30:	10bfffd8 	cmpnei	r2,r2,-1
  804b34:	1000031e 	bne	r2,zero,804b44 <readWord+0x50>
		return -1;
  804b38:	00bfffc4 	movi	r2,-1
  804b3c:	e0bfff15 	stw	r2,-4(fp)
  804b40:	00000b06 	br	804b70 <readWord+0x7c>

	return ((unsigned short int)byte2 << 8) | ((unsigned short int)byte1 & 0x00FF);
  804b44:	e0bffd0b 	ldhu	r2,-12(fp)
  804b48:	10bfffcc 	andi	r2,r2,65535
  804b4c:	1004923a 	slli	r2,r2,8
  804b50:	1007883a 	mov	r3,r2
  804b54:	e0bffd8b 	ldhu	r2,-10(fp)
  804b58:	10803fcc 	andi	r2,r2,255
  804b5c:	1884b03a 	or	r2,r3,r2
  804b60:	10bfffcc 	andi	r2,r2,65535
  804b64:	10a0001c 	xori	r2,r2,32768
  804b68:	10a00004 	addi	r2,r2,-32768
  804b6c:	e0bfff15 	stw	r2,-4(fp)
  804b70:	e0bfff17 	ldw	r2,-4(fp)
}
  804b74:	e037883a 	mov	sp,fp
  804b78:	dfc00117 	ldw	ra,4(sp)
  804b7c:	df000017 	ldw	fp,0(sp)
  804b80:	dec00204 	addi	sp,sp,8
  804b84:	f800283a 	ret

00804b88 <readDWord>:

int readDWord(short int fh) {
  804b88:	defffa04 	addi	sp,sp,-24
  804b8c:	dfc00515 	stw	ra,20(sp)
  804b90:	df000415 	stw	fp,16(sp)
  804b94:	df000404 	addi	fp,sp,16
  804b98:	e13ffe0d 	sth	r4,-8(fp)
	short int byte1, byte2, byte3, byte4;

	byte1 = alt_up_sd_card_read(fh);
  804b9c:	e13ffe0f 	ldh	r4,-8(fp)
  804ba0:	081a0780 	call	81a078 <alt_up_sd_card_read>
  804ba4:	e0bffd8d 	sth	r2,-10(fp)
	byte2 = alt_up_sd_card_read(fh);
  804ba8:	e13ffe0f 	ldh	r4,-8(fp)
  804bac:	081a0780 	call	81a078 <alt_up_sd_card_read>
  804bb0:	e0bffd0d 	sth	r2,-12(fp)
	byte3 = alt_up_sd_card_read(fh);
  804bb4:	e13ffe0f 	ldh	r4,-8(fp)
  804bb8:	081a0780 	call	81a078 <alt_up_sd_card_read>
  804bbc:	e0bffc8d 	sth	r2,-14(fp)
	byte4 = alt_up_sd_card_read(fh);
  804bc0:	e13ffe0f 	ldh	r4,-8(fp)
  804bc4:	081a0780 	call	81a078 <alt_up_sd_card_read>
  804bc8:	e0bffc0d 	sth	r2,-16(fp)

	if (byte1 == -1 || byte2 == -1 || byte3 == -1 || byte4 == -1)
  804bcc:	e0bffd8f 	ldh	r2,-10(fp)
  804bd0:	10bfffe0 	cmpeqi	r2,r2,-1
  804bd4:	1000091e 	bne	r2,zero,804bfc <readDWord+0x74>
  804bd8:	e0bffd0f 	ldh	r2,-12(fp)
  804bdc:	10bfffe0 	cmpeqi	r2,r2,-1
  804be0:	1000061e 	bne	r2,zero,804bfc <readDWord+0x74>
  804be4:	e0bffc8f 	ldh	r2,-14(fp)
  804be8:	10bfffe0 	cmpeqi	r2,r2,-1
  804bec:	1000031e 	bne	r2,zero,804bfc <readDWord+0x74>
  804bf0:	e0bffc0f 	ldh	r2,-16(fp)
  804bf4:	10bfffd8 	cmpnei	r2,r2,-1
  804bf8:	1000031e 	bne	r2,zero,804c08 <readDWord+0x80>
			return -1;
  804bfc:	00bfffc4 	movi	r2,-1
  804c00:	e0bfff15 	stw	r2,-4(fp)
  804c04:	00000f06 	br	804c44 <readDWord+0xbc>

	return ((unsigned short int)byte4 << 24) | ((unsigned short int)byte3 << 16) | ((unsigned short int)byte2 << 8) | (unsigned short int)byte1;
  804c08:	e0bffc0b 	ldhu	r2,-16(fp)
  804c0c:	10bfffcc 	andi	r2,r2,65535
  804c10:	1006963a 	slli	r3,r2,24
  804c14:	e0bffc8b 	ldhu	r2,-14(fp)
  804c18:	10bfffcc 	andi	r2,r2,65535
  804c1c:	1004943a 	slli	r2,r2,16
  804c20:	1886b03a 	or	r3,r3,r2
  804c24:	e0bffd0b 	ldhu	r2,-12(fp)
  804c28:	10bfffcc 	andi	r2,r2,65535
  804c2c:	1004923a 	slli	r2,r2,8
  804c30:	1886b03a 	or	r3,r3,r2
  804c34:	e0bffd8b 	ldhu	r2,-10(fp)
  804c38:	10bfffcc 	andi	r2,r2,65535
  804c3c:	1886b03a 	or	r3,r3,r2
  804c40:	e0ffff15 	stw	r3,-4(fp)
  804c44:	e0bfff17 	ldw	r2,-4(fp)
}
  804c48:	e037883a 	mov	sp,fp
  804c4c:	dfc00117 	ldw	ra,4(sp)
  804c50:	df000017 	ldw	fp,0(sp)
  804c54:	dec00204 	addi	sp,sp,8
  804c58:	f800283a 	ret

00804c5c <getWavFileLength>:

unsigned int getWavFileLength(char *fileName) { // TBD: This function MUST be fixed - it currently returns an incorrect value, becuase - vals dont always mean it's done.
  804c5c:	defffb04 	addi	sp,sp,-20
  804c60:	dfc00415 	stw	ra,16(sp)
  804c64:	df000315 	stw	fp,12(sp)
  804c68:	df000304 	addi	fp,sp,12
  804c6c:	e13fff15 	stw	r4,-4(fp)
	unsigned int fileLength = 0;
  804c70:	e03ffe15 	stw	zero,-8(fp)

	short int fileHandle = openFile(fileName);
  804c74:	e13fff17 	ldw	r4,-4(fp)
  804c78:	0804a500 	call	804a50 <openFile>
  804c7c:	e0bffd8d 	sth	r2,-10(fp)
	if (fileHandle == -1) {
  804c80:	e0bffd8f 	ldh	r2,-10(fp)
  804c84:	10bfffd8 	cmpnei	r2,r2,-1
  804c88:	1000041e 	bne	r2,zero,804c9c <getWavFileLength+0x40>
		printf("Error occurred, unable to open file in 'getFileLength' with name: %s", fileName);
  804c8c:	010020b4 	movhi	r4,130
  804c90:	2130fb04 	addi	r4,r4,-15380
  804c94:	e17fff17 	ldw	r5,-4(fp)
  804c98:	0809e680 	call	809e68 <printf>
	}

	readPastWavHeader(fileHandle); // to get wav file length, dont bypass header i think..
  804c9c:	e13ffd8f 	ldh	r4,-10(fp)
  804ca0:	0804d140 	call	804d14 <readPastWavHeader>

	short int wordRead = readWord(fileHandle);
  804ca4:	e13ffd8f 	ldh	r4,-10(fp)
  804ca8:	0804af40 	call	804af4 <readWord>
  804cac:	e0bffd0d 	sth	r2,-12(fp)
	//unsigned char firstByte = 0x0000FFFF | wordRead;
	//unsigned char secondByte = 0x0000FFFF | (wordRead >> 8);
	while ((short int)wordRead >= 0) {
  804cb0:	00000606 	br	804ccc <getWavFileLength+0x70>
		//printf("%c", (unsigned char)byteRead);
		fileLength += 2;
  804cb4:	e0bffe17 	ldw	r2,-8(fp)
  804cb8:	10800084 	addi	r2,r2,2
  804cbc:	e0bffe15 	stw	r2,-8(fp)
		wordRead = readWord(fileHandle);
  804cc0:	e13ffd8f 	ldh	r4,-10(fp)
  804cc4:	0804af40 	call	804af4 <readWord>
  804cc8:	e0bffd0d 	sth	r2,-12(fp)
	readPastWavHeader(fileHandle); // to get wav file length, dont bypass header i think..

	short int wordRead = readWord(fileHandle);
	//unsigned char firstByte = 0x0000FFFF | wordRead;
	//unsigned char secondByte = 0x0000FFFF | (wordRead >> 8);
	while ((short int)wordRead >= 0) {
  804ccc:	e0bffd0f 	ldh	r2,-12(fp)
  804cd0:	1004403a 	cmpge	r2,r2,zero
  804cd4:	103ff71e 	bne	r2,zero,804cb4 <getWavFileLength+0x58>
		//printf("%c", (unsigned char)byteRead);
		fileLength += 2;
		wordRead = readWord(fileHandle);
	}
	if ((short int)wordRead <= -1) {
  804cd8:	e0bffd0f 	ldh	r2,-12(fp)
  804cdc:	1004403a 	cmpge	r2,r2,zero
  804ce0:	1000041e 	bne	r2,zero,804cf4 <getWavFileLength+0x98>
		printf("Error reading bytes from %s\n", fileName);
  804ce4:	010020b4 	movhi	r4,130
  804ce8:	21310d04 	addi	r4,r4,-15308
  804cec:	e17fff17 	ldw	r5,-4(fp)
  804cf0:	0809e680 	call	809e68 <printf>
	}

	closeFile(fileHandle);
  804cf4:	e13ffd8f 	ldh	r4,-10(fp)
  804cf8:	0804a900 	call	804a90 <closeFile>
	return fileLength;
  804cfc:	e0bffe17 	ldw	r2,-8(fp)
}
  804d00:	e037883a 	mov	sp,fp
  804d04:	dfc00117 	ldw	ra,4(sp)
  804d08:	df000017 	ldw	fp,0(sp)
  804d0c:	dec00204 	addi	sp,sp,8
  804d10:	f800283a 	ret

00804d14 <readPastWavHeader>:

void readPastWavHeader(short int handle) {
  804d14:	defffc04 	addi	sp,sp,-16
  804d18:	dfc00315 	stw	ra,12(sp)
  804d1c:	df000215 	stw	fp,8(sp)
  804d20:	df000204 	addi	fp,sp,8
  804d24:	e13fff0d 	sth	r4,-4(fp)
	int i;
	for (i = 0; i < 44; i++) {
  804d28:	e03ffe15 	stw	zero,-8(fp)
  804d2c:	00000506 	br	804d44 <readPastWavHeader+0x30>
		readByte(handle);
  804d30:	e13fff0f 	ldh	r4,-4(fp)
  804d34:	0804ac00 	call	804ac0 <readByte>
	return fileLength;
}

void readPastWavHeader(short int handle) {
	int i;
	for (i = 0; i < 44; i++) {
  804d38:	e0bffe17 	ldw	r2,-8(fp)
  804d3c:	10800044 	addi	r2,r2,1
  804d40:	e0bffe15 	stw	r2,-8(fp)
  804d44:	e0bffe17 	ldw	r2,-8(fp)
  804d48:	10800b10 	cmplti	r2,r2,44
  804d4c:	103ff81e 	bne	r2,zero,804d30 <readPastWavHeader+0x1c>
		readByte(handle);
	}
}
  804d50:	e037883a 	mov	sp,fp
  804d54:	dfc00117 	ldw	ra,4(sp)
  804d58:	df000017 	ldw	fp,0(sp)
  804d5c:	dec00204 	addi	sp,sp,8
  804d60:	f800283a 	ret

00804d64 <initSharks>:
Shark *deadSharkList = NULL;
unsigned int sharkCount = 0;
Shark sharkArray[NUM_SHARKS];
int sharkArrayCursor = 0;;

void initSharks(void) {
  804d64:	defffd04 	addi	sp,sp,-12
  804d68:	df000215 	stw	fp,8(sp)
  804d6c:	df000204 	addi	fp,sp,8
	int i;
	Shark *cursor;
	sharkList = NULL;
  804d70:	d0272d15 	stw	zero,-25420(gp)
	deadSharkList = NULL;
  804d74:	d0272e15 	stw	zero,-25416(gp)
	for (i = 0; i < NUM_SHARKS; i++) {
  804d78:	e03fff15 	stw	zero,-4(fp)
  804d7c:	00001306 	br	804dcc <initSharks+0x68>
		cursor = &(sharkArray[i]);
  804d80:	e0bfff17 	ldw	r2,-4(fp)
  804d84:	10800a24 	muli	r2,r2,40
  804d88:	1007883a 	mov	r3,r2
  804d8c:	008020b4 	movhi	r2,130
  804d90:	108ff804 	addi	r2,r2,16352
  804d94:	1885883a 	add	r2,r3,r2
  804d98:	e0bffe15 	stw	r2,-8(fp)
		cursor->state = DEAD;
  804d9c:	e0fffe17 	ldw	r3,-8(fp)
  804da0:	008000c4 	movi	r2,3
  804da4:	1880090d 	sth	r2,36(r3)
		cursor->next = NULL;
  804da8:	e0bffe17 	ldw	r2,-8(fp)
  804dac:	10000615 	stw	zero,24(r2)
		cursor->prev = NULL;
  804db0:	e0bffe17 	ldw	r2,-8(fp)
  804db4:	10000715 	stw	zero,28(r2)
		cursor->displacement = NULL;
  804db8:	e0bffe17 	ldw	r2,-8(fp)
  804dbc:	10000815 	stw	zero,32(r2)
void initSharks(void) {
	int i;
	Shark *cursor;
	sharkList = NULL;
	deadSharkList = NULL;
	for (i = 0; i < NUM_SHARKS; i++) {
  804dc0:	e0bfff17 	ldw	r2,-4(fp)
  804dc4:	10800044 	addi	r2,r2,1
  804dc8:	e0bfff15 	stw	r2,-4(fp)
  804dcc:	e0bfff17 	ldw	r2,-4(fp)
  804dd0:	10800810 	cmplti	r2,r2,32
  804dd4:	103fea1e 	bne	r2,zero,804d80 <initSharks+0x1c>
		cursor->state = DEAD;
		cursor->next = NULL;
		cursor->prev = NULL;
		cursor->displacement = NULL;
	}
}
  804dd8:	e037883a 	mov	sp,fp
  804ddc:	df000017 	ldw	fp,0(sp)
  804de0:	dec00104 	addi	sp,sp,4
  804de4:	f800283a 	ret

00804de8 <getFreeShark>:

Shark *getFreeShark(void) {
  804de8:	defffd04 	addi	sp,sp,-12
  804dec:	df000215 	stw	fp,8(sp)
  804df0:	df000204 	addi	fp,sp,8
	int i;
	for (i = 0; i < NUM_SHARKS; i++) {
  804df4:	e03ffe15 	stw	zero,-8(fp)
  804df8:	00001706 	br	804e58 <getFreeShark+0x70>
		if (sharkArray[i].state == DEAD) {
  804dfc:	e0bffe17 	ldw	r2,-8(fp)
  804e00:	00c020b4 	movhi	r3,130
  804e04:	18cff804 	addi	r3,r3,16352
  804e08:	10800a24 	muli	r2,r2,40
  804e0c:	10c5883a 	add	r2,r2,r3
  804e10:	10800904 	addi	r2,r2,36
  804e14:	1080000b 	ldhu	r2,0(r2)
  804e18:	10bfffcc 	andi	r2,r2,65535
  804e1c:	10a0001c 	xori	r2,r2,32768
  804e20:	10a00004 	addi	r2,r2,-32768
  804e24:	108000d8 	cmpnei	r2,r2,3
  804e28:	1000081e 	bne	r2,zero,804e4c <getFreeShark+0x64>
			return &(sharkArray[i]);
  804e2c:	e0bffe17 	ldw	r2,-8(fp)
  804e30:	10800a24 	muli	r2,r2,40
  804e34:	1007883a 	mov	r3,r2
  804e38:	008020b4 	movhi	r2,130
  804e3c:	108ff804 	addi	r2,r2,16352
  804e40:	1887883a 	add	r3,r3,r2
  804e44:	e0ffff15 	stw	r3,-4(fp)
  804e48:	00000706 	br	804e68 <getFreeShark+0x80>
	}
}

Shark *getFreeShark(void) {
	int i;
	for (i = 0; i < NUM_SHARKS; i++) {
  804e4c:	e0bffe17 	ldw	r2,-8(fp)
  804e50:	10800044 	addi	r2,r2,1
  804e54:	e0bffe15 	stw	r2,-8(fp)
  804e58:	e0bffe17 	ldw	r2,-8(fp)
  804e5c:	10800810 	cmplti	r2,r2,32
  804e60:	103fe61e 	bne	r2,zero,804dfc <getFreeShark+0x14>
		if (sharkArray[i].state == DEAD) {
			return &(sharkArray[i]);
		}
	}
	return NULL;
  804e64:	e03fff15 	stw	zero,-4(fp)
  804e68:	e0bfff17 	ldw	r2,-4(fp)
}
  804e6c:	e037883a 	mov	sp,fp
  804e70:	df000017 	ldw	fp,0(sp)
  804e74:	dec00104 	addi	sp,sp,4
  804e78:	f800283a 	ret

00804e7c <drawShark>:

void drawShark(Shark *shark) {
  804e7c:	defffd04 	addi	sp,sp,-12
  804e80:	dfc00215 	stw	ra,8(sp)
  804e84:	df000115 	stw	fp,4(sp)
  804e88:	df000104 	addi	fp,sp,4
  804e8c:	e13fff15 	stw	r4,-4(fp)
	if (shark != NULL) {
  804e90:	e0bfff17 	ldw	r2,-4(fp)
  804e94:	1005003a 	cmpeq	r2,r2,zero
  804e98:	1000071e 	bne	r2,zero,804eb8 <drawShark+0x3c>
		drawBmp(sharkBmp, shark->x, shark->y);
  804e9c:	d1271717 	ldw	r4,-25508(gp)
  804ea0:	e0bfff17 	ldw	r2,-4(fp)
  804ea4:	11400017 	ldw	r5,0(r2)
  804ea8:	e0bfff17 	ldw	r2,-4(fp)
  804eac:	11800217 	ldw	r6,8(r2)
  804eb0:	08016440 	call	801644 <drawBmp>
  804eb4:	00000306 	br	804ec4 <drawShark+0x48>
	} else {
		printf("Attempt to draw null shark.\n");
  804eb8:	010020b4 	movhi	r4,130
  804ebc:	21311504 	addi	r4,r4,-15276
  804ec0:	0809f800 	call	809f80 <puts>
	}
}
  804ec4:	e037883a 	mov	sp,fp
  804ec8:	dfc00117 	ldw	ra,4(sp)
  804ecc:	df000017 	ldw	fp,0(sp)
  804ed0:	dec00204 	addi	sp,sp,8
  804ed4:	f800283a 	ret

00804ed8 <eraseShark>:

void eraseShark(Shark *shark){
  804ed8:	defffd04 	addi	sp,sp,-12
  804edc:	dfc00215 	stw	ra,8(sp)
  804ee0:	df000115 	stw	fp,4(sp)
  804ee4:	df000104 	addi	fp,sp,4
  804ee8:	e13fff15 	stw	r4,-4(fp)
	if (shark != NULL) {
  804eec:	e0bfff17 	ldw	r2,-4(fp)
  804ef0:	1005003a 	cmpeq	r2,r2,zero
  804ef4:	1000071e 	bne	r2,zero,804f14 <eraseShark+0x3c>
		eraseBmp(sharkBmp, shark->prevX, shark->prevY);
  804ef8:	d1271717 	ldw	r4,-25508(gp)
  804efc:	e0bfff17 	ldw	r2,-4(fp)
  804f00:	11400117 	ldw	r5,4(r2)
  804f04:	e0bfff17 	ldw	r2,-4(fp)
  804f08:	11800317 	ldw	r6,12(r2)
  804f0c:	08017b80 	call	8017b8 <eraseBmp>
  804f10:	00000306 	br	804f20 <eraseShark+0x48>
	} else {
		printf("Attempt to erase null shark.\n");
  804f14:	010020b4 	movhi	r4,130
  804f18:	21311c04 	addi	r4,r4,-15248
  804f1c:	0809f800 	call	809f80 <puts>
	}
}
  804f20:	e037883a 	mov	sp,fp
  804f24:	dfc00117 	ldw	ra,4(sp)
  804f28:	df000017 	ldw	fp,0(sp)
  804f2c:	dec00204 	addi	sp,sp,8
  804f30:	f800283a 	ret

00804f34 <moveShark>:

void moveShark(Shark *shark) {
  804f34:	defffc04 	addi	sp,sp,-16
  804f38:	dfc00315 	stw	ra,12(sp)
  804f3c:	df000215 	stw	fp,8(sp)
  804f40:	df000204 	addi	fp,sp,8
  804f44:	e13fff15 	stw	r4,-4(fp)
	if (shark == NULL) {
  804f48:	e0bfff17 	ldw	r2,-4(fp)
  804f4c:	1004c03a 	cmpne	r2,r2,zero
  804f50:	1000041e 	bne	r2,zero,804f64 <moveShark+0x30>
		printf("Attempt to move null shark.\n");
  804f54:	010020b4 	movhi	r4,130
  804f58:	21312404 	addi	r4,r4,-15216
  804f5c:	0809f800 	call	809f80 <puts>
		return;
  804f60:	00003306 	br	805030 <moveShark+0xfc>
	}

	shark->prevX = shark->x;
  804f64:	e0bfff17 	ldw	r2,-4(fp)
  804f68:	10c00017 	ldw	r3,0(r2)
  804f6c:	e0bfff17 	ldw	r2,-4(fp)
  804f70:	10c00115 	stw	r3,4(r2)
	shark->prevY = shark->y;
  804f74:	e0bfff17 	ldw	r2,-4(fp)
  804f78:	10c00217 	ldw	r3,8(r2)
  804f7c:	e0bfff17 	ldw	r2,-4(fp)
  804f80:	10c00315 	stw	r3,12(r2)

	shark->count++;
  804f84:	e0bfff17 	ldw	r2,-4(fp)
  804f88:	10800517 	ldw	r2,20(r2)
  804f8c:	10c00044 	addi	r3,r2,1
  804f90:	e0bfff17 	ldw	r2,-4(fp)
  804f94:	10c00515 	stw	r3,20(r2)

	if (shark->count >= shark->freq) {
  804f98:	e0bfff17 	ldw	r2,-4(fp)
  804f9c:	10c00517 	ldw	r3,20(r2)
  804fa0:	e0bfff17 	ldw	r2,-4(fp)
  804fa4:	10800417 	ldw	r2,16(r2)
  804fa8:	18800a16 	blt	r3,r2,804fd4 <moveShark+0xa0>
		shark->count = 0;
  804fac:	e0bfff17 	ldw	r2,-4(fp)
  804fb0:	10000515 	stw	zero,20(r2)
		createBullet(SHARKBULLET, shark->x + BULLET_LENGTH, shark->y + SHARK_LASER_LOCATION);
  804fb4:	e0bfff17 	ldw	r2,-4(fp)
  804fb8:	10800017 	ldw	r2,0(r2)
  804fbc:	114000c4 	addi	r5,r2,3
  804fc0:	e0bfff17 	ldw	r2,-4(fp)
  804fc4:	10800217 	ldw	r2,8(r2)
  804fc8:	11800344 	addi	r6,r2,13
  804fcc:	01000044 	movi	r4,1
  804fd0:	08018b00 	call	8018b0 <createBullet>
//		shark->type = RECENTLYDEAD;
//	} else if ((shark->y >= SCREEN_HEIGHT) || (shark->y <= -SHARK_HEIGHT)) {
//		shark->type = RECENTLYDEAD;
//	}

	Displacement *disp = shark->displacement;
  804fd4:	e0bfff17 	ldw	r2,-4(fp)
  804fd8:	10800817 	ldw	r2,32(r2)
  804fdc:	e0bffe15 	stw	r2,-8(fp)
	shark->x += disp->dx;
  804fe0:	e0bfff17 	ldw	r2,-4(fp)
  804fe4:	10c00017 	ldw	r3,0(r2)
  804fe8:	e0bffe17 	ldw	r2,-8(fp)
  804fec:	1080000b 	ldhu	r2,0(r2)
  804ff0:	10bfffcc 	andi	r2,r2,65535
  804ff4:	10a0001c 	xori	r2,r2,32768
  804ff8:	10a00004 	addi	r2,r2,-32768
  804ffc:	1887883a 	add	r3,r3,r2
  805000:	e0bfff17 	ldw	r2,-4(fp)
  805004:	10c00015 	stw	r3,0(r2)
	shark->y += disp->dy;
  805008:	e0bfff17 	ldw	r2,-4(fp)
  80500c:	10c00217 	ldw	r3,8(r2)
  805010:	e0bffe17 	ldw	r2,-8(fp)
  805014:	1080008b 	ldhu	r2,2(r2)
  805018:	10bfffcc 	andi	r2,r2,65535
  80501c:	10a0001c 	xori	r2,r2,32768
  805020:	10a00004 	addi	r2,r2,-32768
  805024:	1887883a 	add	r3,r3,r2
  805028:	e0bfff17 	ldw	r2,-4(fp)
  80502c:	10c00215 	stw	r3,8(r2)
}
  805030:	e037883a 	mov	sp,fp
  805034:	dfc00117 	ldw	ra,4(sp)
  805038:	df000017 	ldw	fp,0(sp)
  80503c:	dec00204 	addi	sp,sp,8
  805040:	f800283a 	ret

00805044 <moveAllSharks>:

void moveAllSharks(void) {
  805044:	defffd04 	addi	sp,sp,-12
  805048:	dfc00215 	stw	ra,8(sp)
  80504c:	df000115 	stw	fp,4(sp)
  805050:	df000104 	addi	fp,sp,4
	Shark *cursor = sharkList;
  805054:	d0a72d17 	ldw	r2,-25420(gp)
  805058:	e0bfff15 	stw	r2,-4(fp)
	while (cursor != NULL) {
  80505c:	00000506 	br	805074 <moveAllSharks+0x30>
		moveShark(cursor);
  805060:	e13fff17 	ldw	r4,-4(fp)
  805064:	0804f340 	call	804f34 <moveShark>
		cursor = cursor->next;
  805068:	e0bfff17 	ldw	r2,-4(fp)
  80506c:	10800617 	ldw	r2,24(r2)
  805070:	e0bfff15 	stw	r2,-4(fp)
	shark->y += disp->dy;
}

void moveAllSharks(void) {
	Shark *cursor = sharkList;
	while (cursor != NULL) {
  805074:	e0bfff17 	ldw	r2,-4(fp)
  805078:	1004c03a 	cmpne	r2,r2,zero
  80507c:	103ff81e 	bne	r2,zero,805060 <moveAllSharks+0x1c>
		moveShark(cursor);
		cursor = cursor->next;
	}
}
  805080:	e037883a 	mov	sp,fp
  805084:	dfc00117 	ldw	ra,4(sp)
  805088:	df000017 	ldw	fp,0(sp)
  80508c:	dec00204 	addi	sp,sp,8
  805090:	f800283a 	ret

00805094 <drawAllSharks>:

void drawAllSharks(void) {
  805094:	defffd04 	addi	sp,sp,-12
  805098:	dfc00215 	stw	ra,8(sp)
  80509c:	df000115 	stw	fp,4(sp)
  8050a0:	df000104 	addi	fp,sp,4
	Shark *cursor = sharkList;
  8050a4:	d0a72d17 	ldw	r2,-25420(gp)
  8050a8:	e0bfff15 	stw	r2,-4(fp)
	while (cursor != NULL) {
  8050ac:	00000506 	br	8050c4 <drawAllSharks+0x30>
		drawShark(cursor);
  8050b0:	e13fff17 	ldw	r4,-4(fp)
  8050b4:	0804e7c0 	call	804e7c <drawShark>
		cursor = cursor->next;
  8050b8:	e0bfff17 	ldw	r2,-4(fp)
  8050bc:	10800617 	ldw	r2,24(r2)
  8050c0:	e0bfff15 	stw	r2,-4(fp)
	}
}

void drawAllSharks(void) {
	Shark *cursor = sharkList;
	while (cursor != NULL) {
  8050c4:	e0bfff17 	ldw	r2,-4(fp)
  8050c8:	1004c03a 	cmpne	r2,r2,zero
  8050cc:	103ff81e 	bne	r2,zero,8050b0 <drawAllSharks+0x1c>
		drawShark(cursor);
		cursor = cursor->next;
	}
}
  8050d0:	e037883a 	mov	sp,fp
  8050d4:	dfc00117 	ldw	ra,4(sp)
  8050d8:	df000017 	ldw	fp,0(sp)
  8050dc:	dec00204 	addi	sp,sp,8
  8050e0:	f800283a 	ret

008050e4 <eraseAllSharks>:

void eraseAllSharks(void) {
  8050e4:	defffd04 	addi	sp,sp,-12
  8050e8:	dfc00215 	stw	ra,8(sp)
  8050ec:	df000115 	stw	fp,4(sp)
  8050f0:	df000104 	addi	fp,sp,4
	Shark *cursor = sharkList;
  8050f4:	d0a72d17 	ldw	r2,-25420(gp)
  8050f8:	e0bfff15 	stw	r2,-4(fp)
	// TODO: erase recently dead list
	while (cursor != NULL) {
  8050fc:	00000506 	br	805114 <eraseAllSharks+0x30>
		eraseShark(cursor);
  805100:	e13fff17 	ldw	r4,-4(fp)
  805104:	0804ed80 	call	804ed8 <eraseShark>
		cursor = cursor->next;
  805108:	e0bfff17 	ldw	r2,-4(fp)
  80510c:	10800617 	ldw	r2,24(r2)
  805110:	e0bfff15 	stw	r2,-4(fp)
}

void eraseAllSharks(void) {
	Shark *cursor = sharkList;
	// TODO: erase recently dead list
	while (cursor != NULL) {
  805114:	e0bfff17 	ldw	r2,-4(fp)
  805118:	1004c03a 	cmpne	r2,r2,zero
  80511c:	103ff81e 	bne	r2,zero,805100 <eraseAllSharks+0x1c>
		eraseShark(cursor);
		cursor = cursor->next;
	}
}
  805120:	e037883a 	mov	sp,fp
  805124:	dfc00117 	ldw	ra,4(sp)
  805128:	df000017 	ldw	fp,0(sp)
  80512c:	dec00204 	addi	sp,sp,8
  805130:	f800283a 	ret

00805134 <createShark>:

void createShark(int sudoRandomSeed, int x, int y, Displacement *displacement) {
  805134:	defff904 	addi	sp,sp,-28
  805138:	dfc00615 	stw	ra,24(sp)
  80513c:	df000515 	stw	fp,20(sp)
  805140:	df000504 	addi	fp,sp,20
  805144:	e13ffc15 	stw	r4,-16(fp)
  805148:	e17ffd15 	stw	r5,-12(fp)
  80514c:	e1bffe15 	stw	r6,-8(fp)
  805150:	e1ffff15 	stw	r7,-4(fp)
	if (displacement == NULL) {
  805154:	e0bfff17 	ldw	r2,-4(fp)
  805158:	1004c03a 	cmpne	r2,r2,zero
  80515c:	1000041e 	bne	r2,zero,805170 <createShark+0x3c>
		printf("Attempt to create shark with null displacement.\n");
  805160:	010020b4 	movhi	r4,130
  805164:	21312b04 	addi	r4,r4,-15188
  805168:	0809f800 	call	809f80 <puts>
		return;
  80516c:	00004806 	br	805290 <createShark+0x15c>
	}

	//Shark *newShark = malloc(sizeof(Shark));
	Shark *newShark = getFreeShark();
  805170:	0804de80 	call	804de8 <getFreeShark>
  805174:	e0bffb15 	stw	r2,-20(fp)
	if (newShark == NULL) {
  805178:	e0bffb17 	ldw	r2,-20(fp)
  80517c:	1005003a 	cmpeq	r2,r2,zero
  805180:	1000431e 	bne	r2,zero,805290 <createShark+0x15c>
		return;
	}

	newShark->state = LIVE;
  805184:	e0fffb17 	ldw	r3,-20(fp)
  805188:	00800044 	movi	r2,1
  80518c:	1880090d 	sth	r2,36(r3)

	newShark->x = x;
  805190:	e0fffb17 	ldw	r3,-20(fp)
  805194:	e0bffd17 	ldw	r2,-12(fp)
  805198:	18800015 	stw	r2,0(r3)
	newShark->y = y;
  80519c:	e0fffb17 	ldw	r3,-20(fp)
  8051a0:	e0bffe17 	ldw	r2,-8(fp)
  8051a4:	18800215 	stw	r2,8(r3)
	newShark->displacement = displacement;
  8051a8:	e0fffb17 	ldw	r3,-20(fp)
  8051ac:	e0bfff17 	ldw	r2,-4(fp)
  8051b0:	18800815 	stw	r2,32(r3)
	newShark->prev = NULL;
  8051b4:	e0bffb17 	ldw	r2,-20(fp)
  8051b8:	10000715 	stw	zero,28(r2)
	if (sharkList == NULL) {
  8051bc:	d0a72d17 	ldw	r2,-25420(gp)
  8051c0:	1004c03a 	cmpne	r2,r2,zero
  8051c4:	1000051e 	bne	r2,zero,8051dc <createShark+0xa8>
		sharkList = newShark;
  8051c8:	e0bffb17 	ldw	r2,-20(fp)
  8051cc:	d0a72d15 	stw	r2,-25420(gp)
		newShark->next = NULL;
  8051d0:	e0bffb17 	ldw	r2,-20(fp)
  8051d4:	10000615 	stw	zero,24(r2)
  8051d8:	00000806 	br	8051fc <createShark+0xc8>
	} else {
		sharkList->prev = newShark;
  8051dc:	d0e72d17 	ldw	r3,-25420(gp)
  8051e0:	e0bffb17 	ldw	r2,-20(fp)
  8051e4:	18800715 	stw	r2,28(r3)
		newShark->next = sharkList;
  8051e8:	d0e72d17 	ldw	r3,-25420(gp)
  8051ec:	e0bffb17 	ldw	r2,-20(fp)
  8051f0:	10c00615 	stw	r3,24(r2)
		sharkList = newShark;
  8051f4:	e0bffb17 	ldw	r2,-20(fp)
  8051f8:	d0a72d15 	stw	r2,-25420(gp)
	}
	newShark->freq = (sudoRandomSeed % 20) + 1.5*PLAYER_HEIGHT + 1;
  8051fc:	e13ffc17 	ldw	r4,-16(fp)
  805200:	01400504 	movi	r5,20
  805204:	0808e2c0 	call	808e2c <__modsi3>
  805208:	1009883a 	mov	r4,r2
  80520c:	0808b480 	call	808b48 <__floatsidf>
  805210:	100b883a 	mov	r5,r2
  805214:	180d883a 	mov	r6,r3
  805218:	2809883a 	mov	r4,r5
  80521c:	300b883a 	mov	r5,r6
  805220:	000d883a 	mov	r6,zero
  805224:	01d01134 	movhi	r7,16452
  805228:	39d00004 	addi	r7,r7,16384
  80522c:	08082100 	call	808210 <__adddf3>
  805230:	1009883a 	mov	r4,r2
  805234:	180b883a 	mov	r5,r3
  805238:	2005883a 	mov	r2,r4
  80523c:	2807883a 	mov	r3,r5
  805240:	1009883a 	mov	r4,r2
  805244:	180b883a 	mov	r5,r3
  805248:	000d883a 	mov	r6,zero
  80524c:	01cffc34 	movhi	r7,16368
  805250:	08082100 	call	808210 <__adddf3>
  805254:	1009883a 	mov	r4,r2
  805258:	180b883a 	mov	r5,r3
  80525c:	2005883a 	mov	r2,r4
  805260:	2807883a 	mov	r3,r5
  805264:	1009883a 	mov	r4,r2
  805268:	180b883a 	mov	r5,r3
  80526c:	0808c400 	call	808c40 <__fixdfsi>
  805270:	1007883a 	mov	r3,r2
  805274:	e0bffb17 	ldw	r2,-20(fp)
  805278:	10c00415 	stw	r3,16(r2)
	newShark->count = 0;
  80527c:	e0bffb17 	ldw	r2,-20(fp)
  805280:	10000515 	stw	zero,20(r2)
	sharkCount++;
  805284:	d0a72f17 	ldw	r2,-25412(gp)
  805288:	10800044 	addi	r2,r2,1
  80528c:	d0a72f15 	stw	r2,-25412(gp)
}
  805290:	e037883a 	mov	sp,fp
  805294:	dfc00117 	ldw	ra,4(sp)
  805298:	df000017 	ldw	fp,0(sp)
  80529c:	dec00204 	addi	sp,sp,8
  8052a0:	f800283a 	ret

008052a4 <killShark>:

void killShark(Shark *shark) {
  8052a4:	defffb04 	addi	sp,sp,-20
  8052a8:	dfc00415 	stw	ra,16(sp)
  8052ac:	df000315 	stw	fp,12(sp)
  8052b0:	df000304 	addi	fp,sp,12
  8052b4:	e13fff15 	stw	r4,-4(fp)
	if (shark == NULL) {
  8052b8:	e0bfff17 	ldw	r2,-4(fp)
  8052bc:	1004c03a 	cmpne	r2,r2,zero
  8052c0:	1000041e 	bne	r2,zero,8052d4 <killShark+0x30>
		printf("Attempt to kill null shark.\n");
  8052c4:	010020b4 	movhi	r4,130
  8052c8:	21313704 	addi	r4,r4,-15140
  8052cc:	0809f800 	call	809f80 <puts>
		return;
  8052d0:	00002106 	br	805358 <killShark+0xb4>
	}

	shark->state = RECENTLY_DEAD;
  8052d4:	e0ffff17 	ldw	r3,-4(fp)
  8052d8:	00800084 	movi	r2,2
  8052dc:	1880090d 	sth	r2,36(r3)

	Shark *previousShark = shark->prev;
  8052e0:	e0bfff17 	ldw	r2,-4(fp)
  8052e4:	10800717 	ldw	r2,28(r2)
  8052e8:	e0bffe15 	stw	r2,-8(fp)
	Shark *nextShark = shark->next;
  8052ec:	e0bfff17 	ldw	r2,-4(fp)
  8052f0:	10800617 	ldw	r2,24(r2)
  8052f4:	e0bffd15 	stw	r2,-12(fp)
//		deadSharkList->prev = shark;
//		shark->next = deadSharkList;
//		deadSharkList = shark;
//	}

	playSharkDeath();
  8052f8:	0800bcc0 	call	800bcc <playSharkDeath>
	// Need to erase now because we free the shark
	eraseShark(shark);
  8052fc:	e13fff17 	ldw	r4,-4(fp)
  805300:	0804ed80 	call	804ed8 <eraseShark>
	// TODO: increase player score

	if (previousShark != NULL) {
  805304:	e0bffe17 	ldw	r2,-8(fp)
  805308:	1005003a 	cmpeq	r2,r2,zero
  80530c:	1000041e 	bne	r2,zero,805320 <killShark+0x7c>
		// Not killing first shark
		previousShark->next = nextShark;
  805310:	e0fffe17 	ldw	r3,-8(fp)
  805314:	e0bffd17 	ldw	r2,-12(fp)
  805318:	18800615 	stw	r2,24(r3)
  80531c:	00000206 	br	805328 <killShark+0x84>
	} else {
		// Killing first shark
		sharkList = nextShark;
  805320:	e0bffd17 	ldw	r2,-12(fp)
  805324:	d0a72d15 	stw	r2,-25420(gp)
	}

	if (nextShark != NULL) {
  805328:	e0bffd17 	ldw	r2,-12(fp)
  80532c:	1005003a 	cmpeq	r2,r2,zero
  805330:	1000031e 	bne	r2,zero,805340 <killShark+0x9c>
		// Not killing last shark
		nextShark->prev = previousShark;
  805334:	e0fffd17 	ldw	r3,-12(fp)
  805338:	e0bffe17 	ldw	r2,-8(fp)
  80533c:	18800715 	stw	r2,28(r3)
	} else {
		// Killing last shark
	}
	sharkCount--;
  805340:	d0a72f17 	ldw	r2,-25412(gp)
  805344:	10bfffc4 	addi	r2,r2,-1
  805348:	d0a72f15 	stw	r2,-25412(gp)
	updateCurrentPlayerScore(250);
  80534c:	01003e84 	movi	r4,250
  805350:	08044580 	call	804458 <updateCurrentPlayerScore>
	drawInGameInfo();
  805354:	08047940 	call	804794 <drawInGameInfo>
}
  805358:	e037883a 	mov	sp,fp
  80535c:	dfc00117 	ldw	ra,4(sp)
  805360:	df000017 	ldw	fp,0(sp)
  805364:	dec00204 	addi	sp,sp,8
  805368:	f800283a 	ret

0080536c <cleanupDeadSharks>:

void cleanupDeadSharks() {
  80536c:	defffd04 	addi	sp,sp,-12
  805370:	dfc00215 	stw	ra,8(sp)
  805374:	df000115 	stw	fp,4(sp)
  805378:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < NUM_SHARKS; i++) {
  80537c:	e03fff15 	stw	zero,-4(fp)
  805380:	00003906 	br	805468 <cleanupDeadSharks+0xfc>
		if (sharkArray[i].state == RECENTLY_DEAD) {
  805384:	e0bfff17 	ldw	r2,-4(fp)
  805388:	00c020b4 	movhi	r3,130
  80538c:	18cff804 	addi	r3,r3,16352
  805390:	10800a24 	muli	r2,r2,40
  805394:	10c5883a 	add	r2,r2,r3
  805398:	10800904 	addi	r2,r2,36
  80539c:	1080000b 	ldhu	r2,0(r2)
  8053a0:	10bfffcc 	andi	r2,r2,65535
  8053a4:	10a0001c 	xori	r2,r2,32768
  8053a8:	10a00004 	addi	r2,r2,-32768
  8053ac:	10800098 	cmpnei	r2,r2,2
  8053b0:	10002a1e 	bne	r2,zero,80545c <cleanupDeadSharks+0xf0>
			sharkArray[i].state = DEAD;
  8053b4:	e0bfff17 	ldw	r2,-4(fp)
  8053b8:	00c020b4 	movhi	r3,130
  8053bc:	18cff804 	addi	r3,r3,16352
  8053c0:	10800a24 	muli	r2,r2,40
  8053c4:	10c5883a 	add	r2,r2,r3
  8053c8:	10c00904 	addi	r3,r2,36
  8053cc:	008000c4 	movi	r2,3
  8053d0:	1880000d 	sth	r2,0(r3)
			sharkArray[i].prevX = sharkArray[i].x;
  8053d4:	e17fff17 	ldw	r5,-4(fp)
  8053d8:	e0bfff17 	ldw	r2,-4(fp)
  8053dc:	00c020b4 	movhi	r3,130
  8053e0:	18cff804 	addi	r3,r3,16352
  8053e4:	10800a24 	muli	r2,r2,40
  8053e8:	10c5883a 	add	r2,r2,r3
  8053ec:	11000017 	ldw	r4,0(r2)
  8053f0:	00c020b4 	movhi	r3,130
  8053f4:	18cff804 	addi	r3,r3,16352
  8053f8:	28800a24 	muli	r2,r5,40
  8053fc:	10c5883a 	add	r2,r2,r3
  805400:	10800104 	addi	r2,r2,4
  805404:	11000015 	stw	r4,0(r2)
			sharkArray[i].prevY = sharkArray[i].y;
  805408:	e17fff17 	ldw	r5,-4(fp)
  80540c:	e0bfff17 	ldw	r2,-4(fp)
  805410:	00c020b4 	movhi	r3,130
  805414:	18cff804 	addi	r3,r3,16352
  805418:	10800a24 	muli	r2,r2,40
  80541c:	10c5883a 	add	r2,r2,r3
  805420:	10800204 	addi	r2,r2,8
  805424:	11000017 	ldw	r4,0(r2)
  805428:	00c020b4 	movhi	r3,130
  80542c:	18cff804 	addi	r3,r3,16352
  805430:	28800a24 	muli	r2,r5,40
  805434:	10c5883a 	add	r2,r2,r3
  805438:	10800304 	addi	r2,r2,12
  80543c:	11000015 	stw	r4,0(r2)
			eraseShark(&(sharkArray[i]));
  805440:	e0bfff17 	ldw	r2,-4(fp)
  805444:	10800a24 	muli	r2,r2,40
  805448:	1007883a 	mov	r3,r2
  80544c:	008020b4 	movhi	r2,130
  805450:	108ff804 	addi	r2,r2,16352
  805454:	1889883a 	add	r4,r3,r2
  805458:	0804ed80 	call	804ed8 <eraseShark>
	drawInGameInfo();
}

void cleanupDeadSharks() {
	int i;
	for (i = 0; i < NUM_SHARKS; i++) {
  80545c:	e0bfff17 	ldw	r2,-4(fp)
  805460:	10800044 	addi	r2,r2,1
  805464:	e0bfff15 	stw	r2,-4(fp)
  805468:	e0bfff17 	ldw	r2,-4(fp)
  80546c:	10800810 	cmplti	r2,r2,32
  805470:	103fc41e 	bne	r2,zero,805384 <cleanupDeadSharks+0x18>
//		//free(cursor);
//		cursor = next;
//		i++;
//	}
//	deadSharkList = NULL;
}
  805474:	e037883a 	mov	sp,fp
  805478:	dfc00117 	ldw	ra,4(sp)
  80547c:	df000017 	ldw	fp,0(sp)
  805480:	dec00204 	addi	sp,sp,8
  805484:	f800283a 	ret

00805488 <drawSplashScreen>:
#include "splash.h"

void drawSplashScreen() {
  805488:	defffe04 	addi	sp,sp,-8
  80548c:	dfc00115 	stw	ra,4(sp)
  805490:	df000015 	stw	fp,0(sp)
  805494:	d839883a 	mov	fp,sp
	clearScreen();
  805498:	08058f40 	call	8058f4 <clearScreen>
	drawBmp(splashBmp, 0, 0);
  80549c:	d1271817 	ldw	r4,-25504(gp)
  8054a0:	000b883a 	mov	r5,zero
  8054a4:	000d883a 	mov	r6,zero
  8054a8:	08016440 	call	801644 <drawBmp>

	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  8054ac:	d1271917 	ldw	r4,-25500(gp)
  8054b0:	08154940 	call	815494 <alt_up_pixel_buffer_dma_swap_buffers>
	while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  8054b4:	d1271917 	ldw	r4,-25500(gp)
  8054b8:	08154ec0 	call	8154ec <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  8054bc:	1004c03a 	cmpne	r2,r2,zero
  8054c0:	103ffc1e 	bne	r2,zero,8054b4 <drawSplashScreen+0x2c>
}
  8054c4:	e037883a 	mov	sp,fp
  8054c8:	dfc00117 	ldw	ra,4(sp)
  8054cc:	df000017 	ldw	fp,0(sp)
  8054d0:	dec00204 	addi	sp,sp,8
  8054d4:	f800283a 	ret

008054d8 <clearSplashScreen>:

void clearSplashScreen() {
  8054d8:	defffe04 	addi	sp,sp,-8
  8054dc:	dfc00115 	stw	ra,4(sp)
  8054e0:	df000015 	stw	fp,0(sp)
  8054e4:	d839883a 	mov	fp,sp
	clearScreen();
  8054e8:	08058f40 	call	8058f4 <clearScreen>

	//freeSplash();
}
  8054ec:	e037883a 	mov	sp,fp
  8054f0:	dfc00117 	ldw	ra,4(sp)
  8054f4:	df000017 	ldw	fp,0(sp)
  8054f8:	dec00204 	addi	sp,sp,8
  8054fc:	f800283a 	ret

00805500 <timer_test>:
#include "sys/alt_alarm.h"
#include "system.h"
#include "timer.h"

// Test code from lab
void timer_test(void) {
  805500:	defff304 	addi	sp,sp,-52
  805504:	dfc00c15 	stw	ra,48(sp)
  805508:	df000b15 	stw	fp,44(sp)
  80550c:	dc000a15 	stw	r16,40(sp)
  805510:	df000a04 	addi	fp,sp,40
	int ticks_duration;
	int timer_period;
	int status;
	int done;

	printf("Timers\n");
  805514:	010020b4 	movhi	r4,130
  805518:	21313e04 	addi	r4,r4,-15112
  80551c:	0809f800 	call	809f80 <puts>
	printf(" Sys Clock Timer\n");
  805520:	010020b4 	movhi	r4,130
  805524:	21314004 	addi	r4,r4,-15104
  805528:	0809f800 	call	809f80 <puts>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80552c:	008020b4 	movhi	r2,130
  805530:	1080fb04 	addi	r2,r2,1004
  805534:	10800017 	ldw	r2,0(r2)
	ticks_per_s = alt_ticks_per_second();
  805538:	e0bffa15 	stw	r2,-24(fp)
	printf("Tick Freq: %d\n", ticks_per_s);
  80553c:	010020b4 	movhi	r4,130
  805540:	21314504 	addi	r4,r4,-15084
  805544:	e17ffa17 	ldw	r5,-24(fp)
  805548:	0809e680 	call	809e68 <printf>
	printf(" Recording starting ticks\n");
  80554c:	010020b4 	movhi	r4,130
  805550:	21314904 	addi	r4,r4,-15068
  805554:	0809f800 	call	809f80 <puts>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  805558:	008020b4 	movhi	r2,130
  80555c:	1080fc04 	addi	r2,r2,1008
  805560:	10800017 	ldw	r2,0(r2)
	ticks_start = alt_nticks();
  805564:	e0bffc15 	stw	r2,-16(fp)
	printf(" Sleeping for 5 seconds\n");
  805568:	010020b4 	movhi	r4,130
  80556c:	21315004 	addi	r4,r4,-15040
  805570:	0809f800 	call	809f80 <puts>
	usleep(5000000);
  805574:	01001334 	movhi	r4,76
  805578:	2112d004 	addi	r4,r4,19264
  80557c:	08127f80 	call	8127f8 <usleep>
	printf(" Recording ending ticks\n");
  805580:	010020b4 	movhi	r4,130
  805584:	21315604 	addi	r4,r4,-15016
  805588:	0809f800 	call	809f80 <puts>
  80558c:	008020b4 	movhi	r2,130
  805590:	1080fc04 	addi	r2,r2,1008
  805594:	10800017 	ldw	r2,0(r2)
	ticks_end = alt_nticks();
  805598:	e0bffb15 	stw	r2,-20(fp)
	ticks_duration = ticks_end -ticks_start;
  80559c:	e0fffb17 	ldw	r3,-20(fp)
  8055a0:	e0bffc17 	ldw	r2,-16(fp)
  8055a4:	1885c83a 	sub	r2,r3,r2
  8055a8:	e0bff915 	stw	r2,-28(fp)
	duration = (float) ticks_duration / (float) ticks_per_s;
  8055ac:	e13ff917 	ldw	r4,-28(fp)
  8055b0:	0807c940 	call	807c94 <__floatsisf>
  8055b4:	1021883a 	mov	r16,r2
  8055b8:	e13ffa17 	ldw	r4,-24(fp)
  8055bc:	0807c940 	call	807c94 <__floatsisf>
  8055c0:	8009883a 	mov	r4,r16
  8055c4:	100b883a 	mov	r5,r2
  8055c8:	0807b200 	call	807b20 <__divsf3>
  8055cc:	e0bffd15 	stw	r2,-12(fp)
	printf(" The program slept for %d ticks (%f seconds)\n\n", ticks_duration,
  8055d0:	e13ffd17 	ldw	r4,-12(fp)
  8055d4:	0807d2c0 	call	807d2c <__extendsfdf2>
  8055d8:	100f883a 	mov	r7,r2
  8055dc:	1811883a 	mov	r8,r3
  8055e0:	010020b4 	movhi	r4,130
  8055e4:	21315c04 	addi	r4,r4,-14992
  8055e8:	e17ff917 	ldw	r5,-28(fp)
  8055ec:	380d883a 	mov	r6,r7
  8055f0:	400f883a 	mov	r7,r8
  8055f4:	0809e680 	call	809e68 <printf>
	duration);

	printf(" Timestamp Timer\n");
  8055f8:	010020b4 	movhi	r4,130
  8055fc:	21316804 	addi	r4,r4,-14944
  805600:	0809f800 	call	809f80 <puts>
	freq = alt_timestamp_freq();
  805604:	0813a6c0 	call	813a6c <alt_timestamp_freq>
  805608:	e0bfff15 	stw	r2,-4(fp)
	printf(" CPU Freq: %d\n", freq);
  80560c:	010020b4 	movhi	r4,130
  805610:	21316d04 	addi	r4,r4,-14924
  805614:	e17fff17 	ldw	r5,-4(fp)
  805618:	0809e680 	call	809e68 <printf>
	printf(" Resetting Timestamp timer\n");
  80561c:	010020b4 	movhi	r4,130
  805620:	21317104 	addi	r4,r4,-14908
  805624:	0809f800 	call	809f80 <puts>
	alt_timestamp_start();
  805628:	081392c0 	call	81392c <alt_timestamp_start>
	printf(" ...Timing the print of this statement...\n");
  80562c:	010020b4 	movhi	r4,130
  805630:	21317804 	addi	r4,r4,-14880
  805634:	0809f800 	call	809f80 <puts>
	cycles = alt_timestamp();
  805638:	08139d00 	call	8139d0 <alt_timestamp>
  80563c:	e0bffe15 	stw	r2,-8(fp)
	duration = (float) cycles / (float) freq;
  805640:	e13ffe17 	ldw	r4,-8(fp)
  805644:	0807c940 	call	807c94 <__floatsisf>
  805648:	1021883a 	mov	r16,r2
  80564c:	e13fff17 	ldw	r4,-4(fp)
  805650:	0807c940 	call	807c94 <__floatsisf>
  805654:	8009883a 	mov	r4,r16
  805658:	100b883a 	mov	r5,r2
  80565c:	0807b200 	call	807b20 <__divsf3>
  805660:	e0bffd15 	stw	r2,-12(fp)
	printf(" It took %d cycles (%f seconds) to print the statement\n\n",
  805664:	e13ffd17 	ldw	r4,-12(fp)
  805668:	0807d2c0 	call	807d2c <__extendsfdf2>
  80566c:	100f883a 	mov	r7,r2
  805670:	1811883a 	mov	r8,r3
  805674:	010020b4 	movhi	r4,130
  805678:	21318304 	addi	r4,r4,-14836
  80567c:	e17ffe17 	ldw	r5,-8(fp)
  805680:	380d883a 	mov	r6,r7
  805684:	400f883a 	mov	r7,r8
  805688:	0809e680 	call	809e68 <printf>
	cycles, duration);

	printf(" Hardware-Only Timer\n");
  80568c:	010020b4 	movhi	r4,130
  805690:	21319204 	addi	r4,r4,-14776
  805694:	0809f800 	call	809f80 <puts>
	printf(" Setting timer period to 5 seconds.\n");
  805698:	010020b4 	movhi	r4,130
  80569c:	21319804 	addi	r4,r4,-14752
  8056a0:	0809f800 	call	809f80 <puts>
	timer_period = 5 * CLOCK_FREQ;
  8056a4:	0083b9f4 	movhi	r2,3815
  8056a8:	10aca004 	addi	r2,r2,-19840
  8056ac:	e0bff815 	stw	r2,-32(fp)
	// Setting the period registers must be done in 2 steps as they are only 16 bits wide
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 8, timer_period & 0xFFFF); // less significant word
  8056b0:	e0bff817 	ldw	r2,-32(fp)
  8056b4:	10ffffcc 	andi	r3,r2,65535
  8056b8:	00804034 	movhi	r2,256
  8056bc:	10840204 	addi	r2,r2,4104
  8056c0:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE,12, timer_period >> 16); // more significant word
  8056c4:	e0bff817 	ldw	r2,-32(fp)
  8056c8:	1007d43a 	srai	r3,r2,16
  8056cc:	00804034 	movhi	r2,256
  8056d0:	10840304 	addi	r2,r2,4108
  8056d4:	10c0002d 	sthio	r3,0(r2)
	printf(" Stopping Timer\n");
  8056d8:	010020b4 	movhi	r4,130
  8056dc:	2131a104 	addi	r4,r4,-14716
  8056e0:	0809f800 	call	809f80 <puts>
	status = IORD_16DIRECT(HAL_SYSTEM_TIMER_BASE, 0); // read status registers
  8056e4:	00804034 	movhi	r2,256
  8056e8:	10840004 	addi	r2,r2,4096
  8056ec:	1080002b 	ldhuio	r2,0(r2)
  8056f0:	e0bff715 	stw	r2,-36(fp)
	// Write the control registers
	if(status & 0x2) {
  8056f4:	e0bff717 	ldw	r2,-36(fp)
  8056f8:	1080008c 	andi	r2,r2,2
  8056fc:	1005003a 	cmpeq	r2,r2,zero
  805700:	1000041e 	bne	r2,zero,805714 <timer_test+0x214>
		IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 4, 1 << 3); // stop the timer if it was started
  805704:	00c04034 	movhi	r3,256
  805708:	18c40104 	addi	r3,r3,4100
  80570c:	00800204 	movi	r2,8
  805710:	1880002d 	sthio	r2,0(r3)
	}
	printf(" Starting Timer\n");
  805714:	010020b4 	movhi	r4,130
  805718:	2131a504 	addi	r4,r4,-14700
  80571c:	0809f800 	call	809f80 <puts>
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 4, 1 << 2); // start the timer
  805720:	00c04034 	movhi	r3,256
  805724:	18c40104 	addi	r3,r3,4100
  805728:	00800104 	movi	r2,4
  80572c:	1880002d 	sthio	r2,0(r3)

	printf("  Waiting for timer to expire...\n");
  805730:	010020b4 	movhi	r4,130
  805734:	2131a904 	addi	r4,r4,-14684
  805738:	0809f800 	call	809f80 <puts>
	done = 0;
  80573c:	e03ff615 	stw	zero,-40(fp)
	while(! done) {
  805740:	00000706 	br	805760 <timer_test+0x260>
		status = IORD_16DIRECT(HAL_SYSTEM_TIMER_BASE, 0); // read status registers
  805744:	00804034 	movhi	r2,256
  805748:	10840004 	addi	r2,r2,4096
  80574c:	1080002b 	ldhuio	r2,0(r2)
  805750:	e0bff715 	stw	r2,-36(fp)
		done = status & 0x1;
  805754:	e0bff717 	ldw	r2,-36(fp)
  805758:	1080004c 	andi	r2,r2,1
  80575c:	e0bff615 	stw	r2,-40(fp)
	printf(" Starting Timer\n");
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 4, 1 << 2); // start the timer

	printf("  Waiting for timer to expire...\n");
	done = 0;
	while(! done) {
  805760:	e0bff617 	ldw	r2,-40(fp)
  805764:	1005003a 	cmpeq	r2,r2,zero
  805768:	103ff61e 	bne	r2,zero,805744 <timer_test+0x244>
		status = IORD_16DIRECT(HAL_SYSTEM_TIMER_BASE, 0); // read status registers
		done = status & 0x1;
	}
	printf(" 5 seconds timer is done\n");
  80576c:	010020b4 	movhi	r4,130
  805770:	2131b204 	addi	r4,r4,-14648
  805774:	0809f800 	call	809f80 <puts>
}
  805778:	e037883a 	mov	sp,fp
  80577c:	dfc00217 	ldw	ra,8(sp)
  805780:	df000117 	ldw	fp,4(sp)
  805784:	dc000017 	ldw	r16,0(sp)
  805788:	dec00304 	addi	sp,sp,12
  80578c:	f800283a 	ret

00805790 <setHardwareTimerPeriod>:

// Period is in clock cycles
// ie 5 seconds would be 5 * CLOCK_FREQ
void setHardwareTimerPeriod(int period)
{
  805790:	defffe04 	addi	sp,sp,-8
  805794:	df000115 	stw	fp,4(sp)
  805798:	df000104 	addi	fp,sp,4
  80579c:	e13fff15 	stw	r4,-4(fp)
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 8, period & 0xFFFF); // less significant word
  8057a0:	e0bfff17 	ldw	r2,-4(fp)
  8057a4:	10ffffcc 	andi	r3,r2,65535
  8057a8:	00804034 	movhi	r2,256
  8057ac:	10840204 	addi	r2,r2,4104
  8057b0:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE,12, period >> 16); // more significant word
  8057b4:	e0bfff17 	ldw	r2,-4(fp)
  8057b8:	1007d43a 	srai	r3,r2,16
  8057bc:	00804034 	movhi	r2,256
  8057c0:	10840304 	addi	r2,r2,4108
  8057c4:	10c0002d 	sthio	r3,0(r2)
}
  8057c8:	e037883a 	mov	sp,fp
  8057cc:	df000017 	ldw	fp,0(sp)
  8057d0:	dec00104 	addi	sp,sp,4
  8057d4:	f800283a 	ret

008057d8 <isHardwareTimerRunning>:

int isHardwareTimerRunning(void)
{
  8057d8:	defffe04 	addi	sp,sp,-8
  8057dc:	df000115 	stw	fp,4(sp)
  8057e0:	df000104 	addi	fp,sp,4
	int status = IORD_16DIRECT(HAL_SYSTEM_TIMER_BASE, 0);
  8057e4:	00804034 	movhi	r2,256
  8057e8:	10840004 	addi	r2,r2,4096
  8057ec:	1080002b 	ldhuio	r2,0(r2)
  8057f0:	e0bfff15 	stw	r2,-4(fp)
	return status & 0x2; // not totally sure on this
  8057f4:	e0bfff17 	ldw	r2,-4(fp)
  8057f8:	1080008c 	andi	r2,r2,2
}
  8057fc:	e037883a 	mov	sp,fp
  805800:	df000017 	ldw	fp,0(sp)
  805804:	dec00104 	addi	sp,sp,4
  805808:	f800283a 	ret

0080580c <hasHardwareTimerExpired>:

int hasHardwareTimerExpired(void)
{
  80580c:	deffff04 	addi	sp,sp,-4
  805810:	df000015 	stw	fp,0(sp)
  805814:	d839883a 	mov	fp,sp
	return IORD_16DIRECT(HAL_SYSTEM_TIMER_BASE, 0);
  805818:	00804034 	movhi	r2,256
  80581c:	10840004 	addi	r2,r2,4096
  805820:	1080002b 	ldhuio	r2,0(r2)
}
  805824:	e037883a 	mov	sp,fp
  805828:	df000017 	ldw	fp,0(sp)
  80582c:	dec00104 	addi	sp,sp,4
  805830:	f800283a 	ret

00805834 <startHardwareTimer>:

void startHardwareTimer(void)
{
  805834:	deffff04 	addi	sp,sp,-4
  805838:	df000015 	stw	fp,0(sp)
  80583c:	d839883a 	mov	fp,sp
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 4, 1 << 2);
  805840:	00c04034 	movhi	r3,256
  805844:	18c40104 	addi	r3,r3,4100
  805848:	00800104 	movi	r2,4
  80584c:	1880002d 	sthio	r2,0(r3)
}
  805850:	e037883a 	mov	sp,fp
  805854:	df000017 	ldw	fp,0(sp)
  805858:	dec00104 	addi	sp,sp,4
  80585c:	f800283a 	ret

00805860 <initVga>:
#include "vga.h"

void initVga()
{
  805860:	defffe04 	addi	sp,sp,-8
  805864:	dfc00115 	stw	ra,4(sp)
  805868:	df000015 	stw	fp,0(sp)
  80586c:	d839883a 	mov	fp,sp
	pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma");
  805870:	010020b4 	movhi	r4,130
  805874:	2131b904 	addi	r4,r4,-14620
  805878:	081525c0 	call	81525c <alt_up_pixel_buffer_dma_open_dev>
  80587c:	d0a71915 	stw	r2,-25500(gp)
	pixel_buffer_addr1 = PIXEL_BUFFER_BASE;
  805880:	00804234 	movhi	r2,264
  805884:	d0a71415 	stw	r2,-25520(gp)
	pixel_buffer_addr2 = PIXEL_BUFFER_BASE + (320 * 240 * 2);
  805888:	008042b4 	movhi	r2,266
  80588c:	10960004 	addi	r2,r2,22528
  805890:	d0a71615 	stw	r2,-25512(gp)

	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer, pixel_buffer_addr1);
  805894:	d1271917 	ldw	r4,-25500(gp)
  805898:	d1671417 	ldw	r5,-25520(gp)
  80589c:	081543c0 	call	81543c <alt_up_pixel_buffer_dma_change_back_buffer_address>

	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  8058a0:	d1271917 	ldw	r4,-25500(gp)
  8058a4:	08154940 	call	815494 <alt_up_pixel_buffer_dma_swap_buffers>
	while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  8058a8:	d1271917 	ldw	r4,-25500(gp)
  8058ac:	08154ec0 	call	8154ec <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  8058b0:	1004c03a 	cmpne	r2,r2,zero
  8058b4:	103ffc1e 	bne	r2,zero,8058a8 <initVga+0x48>

	// Set the 2nd buffer address
	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer, pixel_buffer_addr2);
  8058b8:	d1271917 	ldw	r4,-25500(gp)
  8058bc:	d1671617 	ldw	r5,-25512(gp)
  8058c0:	081543c0 	call	81543c <alt_up_pixel_buffer_dma_change_back_buffer_address>

	char_buffer = alt_up_char_buffer_open_dev("/dev/char_drawer");
  8058c4:	010020b4 	movhi	r4,130
  8058c8:	2131bf04 	addi	r4,r4,-14596
  8058cc:	0814fdc0 	call	814fdc <alt_up_char_buffer_open_dev>
  8058d0:	d0a71515 	stw	r2,-25516(gp)
	alt_up_char_buffer_init(char_buffer);
  8058d4:	d1271517 	ldw	r4,-25516(gp)
  8058d8:	0814f580 	call	814f58 <alt_up_char_buffer_init>

	clearScreen();
  8058dc:	08058f40 	call	8058f4 <clearScreen>
}
  8058e0:	e037883a 	mov	sp,fp
  8058e4:	dfc00117 	ldw	ra,4(sp)
  8058e8:	df000017 	ldw	fp,0(sp)
  8058ec:	dec00204 	addi	sp,sp,8
  8058f0:	f800283a 	ret

008058f4 <clearScreen>:

void clearScreen()
{
  8058f4:	defffe04 	addi	sp,sp,-8
  8058f8:	dfc00115 	stw	ra,4(sp)
  8058fc:	df000015 	stw	fp,0(sp)
  805900:	d839883a 	mov	fp,sp
	alt_up_char_buffer_clear(char_buffer);
  805904:	d1271517 	ldw	r4,-25516(gp)
  805908:	08152000 	call	815200 <alt_up_char_buffer_clear>
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  80590c:	d1271917 	ldw	r4,-25500(gp)
  805910:	000b883a 	mov	r5,zero
  805914:	08155200 	call	815520 <alt_up_pixel_buffer_dma_clear_screen>
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 1);
  805918:	d1271917 	ldw	r4,-25500(gp)
  80591c:	01400044 	movi	r5,1
  805920:	08155200 	call	815520 <alt_up_pixel_buffer_dma_clear_screen>
}
  805924:	e037883a 	mov	sp,fp
  805928:	dfc00117 	ldw	ra,4(sp)
  80592c:	df000017 	ldw	fp,0(sp)
  805930:	dec00204 	addi	sp,sp,8
  805934:	f800283a 	ret

00805938 <swapBuffers>:

void swapBuffers() {
  805938:	defffe04 	addi	sp,sp,-8
  80593c:	dfc00115 	stw	ra,4(sp)
  805940:	df000015 	stw	fp,0(sp)
  805944:	d839883a 	mov	fp,sp
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  805948:	d1271917 	ldw	r4,-25500(gp)
  80594c:	08154940 	call	815494 <alt_up_pixel_buffer_dma_swap_buffers>
	while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  805950:	d1271917 	ldw	r4,-25500(gp)
  805954:	08154ec0 	call	8154ec <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  805958:	1004c03a 	cmpne	r2,r2,zero
  80595c:	103ffc1e 	bne	r2,zero,805950 <swapBuffers+0x18>
}
  805960:	e037883a 	mov	sp,fp
  805964:	dfc00117 	ldw	ra,4(sp)
  805968:	df000017 	ldw	fp,0(sp)
  80596c:	dec00204 	addi	sp,sp,8
  805970:	f800283a 	ret

00805974 <drawPixel>:

void drawPixel(int x, int y, int color) {
  805974:	defffb04 	addi	sp,sp,-20
  805978:	dfc00415 	stw	ra,16(sp)
  80597c:	df000315 	stw	fp,12(sp)
  805980:	df000304 	addi	fp,sp,12
  805984:	e13ffd15 	stw	r4,-12(fp)
  805988:	e17ffe15 	stw	r5,-8(fp)
  80598c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_pixel_buffer_dma_draw(pixel_buffer, color, x, y);
  805990:	d1271917 	ldw	r4,-25500(gp)
  805994:	e17fff17 	ldw	r5,-4(fp)
  805998:	e1bffd17 	ldw	r6,-12(fp)
  80599c:	e1fffe17 	ldw	r7,-8(fp)
  8059a0:	081529c0 	call	81529c <alt_up_pixel_buffer_dma_draw>
}
  8059a4:	e037883a 	mov	sp,fp
  8059a8:	dfc00117 	ldw	ra,4(sp)
  8059ac:	df000017 	ldw	fp,0(sp)
  8059b0:	dec00204 	addi	sp,sp,8
  8059b4:	f800283a 	ret

008059b8 <drawPixelFast>:
 *
 * DO NOT USE THIS FUNCTION IF ANY OF THE ABOVE ARE NOT GUARANATEED, OR YOU
 * MAY WRITE TO INVALID MEMORY LOCATIONS, CRASHING YOUR PROGRAM, OR
 * CAUSING UNEXPECTED BEHAVIOR.
 */
void drawPixelFast(unsigned int x, unsigned int y, unsigned int color) {
  8059b8:	defffb04 	addi	sp,sp,-20
  8059bc:	df000415 	stw	fp,16(sp)
  8059c0:	df000404 	addi	fp,sp,16
  8059c4:	e13ffd15 	stw	r4,-12(fp)
  8059c8:	e17ffe15 	stw	r5,-8(fp)
  8059cc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int addr;

	addr = ((x & pixel_buffer->x_coord_mask) << 1);
  8059d0:	d0a71917 	ldw	r2,-25500(gp)
  8059d4:	10c01217 	ldw	r3,72(r2)
  8059d8:	e0bffd17 	ldw	r2,-12(fp)
  8059dc:	1884703a 	and	r2,r3,r2
  8059e0:	1085883a 	add	r2,r2,r2
  8059e4:	e0bffc15 	stw	r2,-16(fp)
	addr += (((y & pixel_buffer->y_coord_mask) * 320) << 1);
  8059e8:	d0a71917 	ldw	r2,-25500(gp)
  8059ec:	10c01417 	ldw	r3,80(r2)
  8059f0:	e0bffe17 	ldw	r2,-8(fp)
  8059f4:	1884703a 	and	r2,r3,r2
  8059f8:	10805024 	muli	r2,r2,320
  8059fc:	1085883a 	add	r2,r2,r2
  805a00:	1007883a 	mov	r3,r2
  805a04:	e0bffc17 	ldw	r2,-16(fp)
  805a08:	10c5883a 	add	r2,r2,r3
  805a0c:	e0bffc15 	stw	r2,-16(fp)

	IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  805a10:	d0a71917 	ldw	r2,-25500(gp)
  805a14:	10800c17 	ldw	r2,48(r2)
  805a18:	1007883a 	mov	r3,r2
  805a1c:	e0bffc17 	ldw	r2,-16(fp)
  805a20:	1885883a 	add	r2,r3,r2
  805a24:	e0ffff17 	ldw	r3,-4(fp)
  805a28:	10c0002d 	sthio	r3,0(r2)
}
  805a2c:	e037883a 	mov	sp,fp
  805a30:	df000017 	ldw	fp,0(sp)
  805a34:	dec00104 	addi	sp,sp,4
  805a38:	f800283a 	ret

00805a3c <drawLine>:

void drawLine(int x0, int y0, int x1, int y1, int color)
{
  805a3c:	defff704 	addi	sp,sp,-36
  805a40:	dfc00815 	stw	ra,32(sp)
  805a44:	df000715 	stw	fp,28(sp)
  805a48:	df000704 	addi	fp,sp,28
  805a4c:	e13ffc15 	stw	r4,-16(fp)
  805a50:	e17ffd15 	stw	r5,-12(fp)
  805a54:	e1bffe15 	stw	r6,-8(fp)
  805a58:	e1ffff15 	stw	r7,-4(fp)
	if (y0 == y1)
  805a5c:	e0fffd17 	ldw	r3,-12(fp)
  805a60:	e0bfff17 	ldw	r2,-4(fp)
  805a64:	18800a1e 	bne	r3,r2,805a90 <drawLine+0x54>
	{
		alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, 1);
  805a68:	d1271917 	ldw	r4,-25500(gp)
  805a6c:	e0800217 	ldw	r2,8(fp)
  805a70:	d8800015 	stw	r2,0(sp)
  805a74:	00800044 	movi	r2,1
  805a78:	d8800115 	stw	r2,4(sp)
  805a7c:	e17ffc17 	ldw	r5,-16(fp)
  805a80:	e1bffe17 	ldw	r6,-8(fp)
  805a84:	e1fffd17 	ldw	r7,-12(fp)
  805a88:	0815b780 	call	815b78 <alt_up_pixel_buffer_dma_draw_hline>
  805a8c:	00001806 	br	805af0 <drawLine+0xb4>
	}
	else if (x0 == x1)
  805a90:	e0fffc17 	ldw	r3,-16(fp)
  805a94:	e0bffe17 	ldw	r2,-8(fp)
  805a98:	18800a1e 	bne	r3,r2,805ac4 <drawLine+0x88>
	{
		alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, y0, y1, color, 1);
  805a9c:	d1271917 	ldw	r4,-25500(gp)
  805aa0:	e0800217 	ldw	r2,8(fp)
  805aa4:	d8800015 	stw	r2,0(sp)
  805aa8:	00800044 	movi	r2,1
  805aac:	d8800115 	stw	r2,4(sp)
  805ab0:	e17ffc17 	ldw	r5,-16(fp)
  805ab4:	e1bffd17 	ldw	r6,-12(fp)
  805ab8:	e1ffff17 	ldw	r7,-4(fp)
  805abc:	0815b780 	call	815b78 <alt_up_pixel_buffer_dma_draw_hline>
  805ac0:	00000b06 	br	805af0 <drawLine+0xb4>
	}
	else
	{
		alt_up_pixel_buffer_dma_draw_line(pixel_buffer, x0, y0, x1, y1, color, 1);
  805ac4:	d1271917 	ldw	r4,-25500(gp)
  805ac8:	e0bfff17 	ldw	r2,-4(fp)
  805acc:	d8800015 	stw	r2,0(sp)
  805ad0:	e0800217 	ldw	r2,8(fp)
  805ad4:	d8800115 	stw	r2,4(sp)
  805ad8:	00800044 	movi	r2,1
  805adc:	d8800215 	stw	r2,8(sp)
  805ae0:	e17ffc17 	ldw	r5,-16(fp)
  805ae4:	e1bffd17 	ldw	r6,-12(fp)
  805ae8:	e1fffe17 	ldw	r7,-8(fp)
  805aec:	081642c0 	call	81642c <alt_up_pixel_buffer_dma_draw_line>
	}
}
  805af0:	e037883a 	mov	sp,fp
  805af4:	dfc00117 	ldw	ra,4(sp)
  805af8:	df000017 	ldw	fp,0(sp)
  805afc:	dec00204 	addi	sp,sp,8
  805b00:	f800283a 	ret

00805b04 <printLine>:

void printLine(char *str, int x, int y)
{
  805b04:	defffb04 	addi	sp,sp,-20
  805b08:	dfc00415 	stw	ra,16(sp)
  805b0c:	df000315 	stw	fp,12(sp)
  805b10:	df000304 	addi	fp,sp,12
  805b14:	e13ffd15 	stw	r4,-12(fp)
  805b18:	e17ffe15 	stw	r5,-8(fp)
  805b1c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_char_buffer_string(char_buffer, str, x, y);
  805b20:	d1271517 	ldw	r4,-25516(gp)
  805b24:	e1bffe17 	ldw	r6,-8(fp)
  805b28:	e1ffff17 	ldw	r7,-4(fp)
  805b2c:	e17ffd17 	ldw	r5,-12(fp)
  805b30:	08150ec0 	call	8150ec <alt_up_char_buffer_string>
}
  805b34:	e037883a 	mov	sp,fp
  805b38:	dfc00117 	ldw	ra,4(sp)
  805b3c:	df000017 	ldw	fp,0(sp)
  805b40:	dec00204 	addi	sp,sp,8
  805b44:	f800283a 	ret

00805b48 <drawBox>:

void drawBox(int x0, int y0, int x1, int y1, int color)
{
  805b48:	defff704 	addi	sp,sp,-36
  805b4c:	dfc00815 	stw	ra,32(sp)
  805b50:	df000715 	stw	fp,28(sp)
  805b54:	df000704 	addi	fp,sp,28
  805b58:	e13ffc15 	stw	r4,-16(fp)
  805b5c:	e17ffd15 	stw	r5,-12(fp)
  805b60:	e1bffe15 	stw	r6,-8(fp)
  805b64:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer, x0, y0, x1, y1, color, 1);
  805b68:	d1271917 	ldw	r4,-25500(gp)
  805b6c:	e0bfff17 	ldw	r2,-4(fp)
  805b70:	d8800015 	stw	r2,0(sp)
  805b74:	e0800217 	ldw	r2,8(fp)
  805b78:	d8800115 	stw	r2,4(sp)
  805b7c:	00800044 	movi	r2,1
  805b80:	d8800215 	stw	r2,8(sp)
  805b84:	e17ffc17 	ldw	r5,-16(fp)
  805b88:	e1bffd17 	ldw	r6,-12(fp)
  805b8c:	e1fffe17 	ldw	r7,-8(fp)
  805b90:	08156840 	call	815684 <alt_up_pixel_buffer_dma_draw_box>
}
  805b94:	e037883a 	mov	sp,fp
  805b98:	dfc00117 	ldw	ra,4(sp)
  805b9c:	df000017 	ldw	fp,0(sp)
  805ba0:	dec00204 	addi	sp,sp,8
  805ba4:	f800283a 	ret

00805ba8 <convert24BitRgbTo16>:

int convert24BitRgbTo16(unsigned int rgb24bit)
{
  805ba8:	defff804 	addi	sp,sp,-32
  805bac:	df000715 	stw	fp,28(sp)
  805bb0:	df000704 	addi	fp,sp,28
  805bb4:	e13fff15 	stw	r4,-4(fp)
	unsigned int R8bit = (rgb24bit >> 16) & 0xFF;
  805bb8:	e0bfff17 	ldw	r2,-4(fp)
  805bbc:	1004d43a 	srli	r2,r2,16
  805bc0:	10803fcc 	andi	r2,r2,255
  805bc4:	e0bffe15 	stw	r2,-8(fp)
	unsigned int G8bit = (rgb24bit >> 8)  & 0xFF;
  805bc8:	e0bfff17 	ldw	r2,-4(fp)
  805bcc:	1004d23a 	srli	r2,r2,8
  805bd0:	10803fcc 	andi	r2,r2,255
  805bd4:	e0bffd15 	stw	r2,-12(fp)
	unsigned int B8bit = (rgb24bit)	      & 0xFF;
  805bd8:	e0bfff17 	ldw	r2,-4(fp)
  805bdc:	10803fcc 	andi	r2,r2,255
  805be0:	e0bffc15 	stw	r2,-16(fp)
	unsigned int R5bit = R8bit >> 3 & 0x1F;
  805be4:	e0bffe17 	ldw	r2,-8(fp)
  805be8:	1004d0fa 	srli	r2,r2,3
  805bec:	108007cc 	andi	r2,r2,31
  805bf0:	e0bffb15 	stw	r2,-20(fp)
	unsigned int G6bit = G8bit >> 2 & 0x3F;
  805bf4:	e0bffd17 	ldw	r2,-12(fp)
  805bf8:	1004d0ba 	srli	r2,r2,2
  805bfc:	10800fcc 	andi	r2,r2,63
  805c00:	e0bffa15 	stw	r2,-24(fp)
	unsigned int B5bit = B8bit >> 3 & 0x1F;
  805c04:	e0bffc17 	ldw	r2,-16(fp)
  805c08:	1004d0fa 	srli	r2,r2,3
  805c0c:	108007cc 	andi	r2,r2,31
  805c10:	e0bff915 	stw	r2,-28(fp)
	return (R5bit << 11 | G6bit << 5 | B5bit);
  805c14:	e0bffb17 	ldw	r2,-20(fp)
  805c18:	100692fa 	slli	r3,r2,11
  805c1c:	e0bffa17 	ldw	r2,-24(fp)
  805c20:	1004917a 	slli	r2,r2,5
  805c24:	1886b03a 	or	r3,r3,r2
  805c28:	e0bff917 	ldw	r2,-28(fp)
  805c2c:	1884b03a 	or	r2,r3,r2
}
  805c30:	e037883a 	mov	sp,fp
  805c34:	df000017 	ldw	fp,0(sp)
  805c38:	dec00104 	addi	sp,sp,4
  805c3c:	f800283a 	ret

00805c40 <pow>:
  805c40:	deffee04 	addi	sp,sp,-72
  805c44:	ddc01015 	stw	r23,64(sp)
  805c48:	05c020b4 	movhi	r23,130
  805c4c:	bdf9c004 	addi	r23,r23,-6400
  805c50:	dd800f15 	stw	r22,60(sp)
  805c54:	dd400e15 	stw	r21,56(sp)
  805c58:	dd000d15 	stw	r20,52(sp)
  805c5c:	dcc00c15 	stw	r19,48(sp)
  805c60:	dc800b15 	stw	r18,44(sp)
  805c64:	dc400a15 	stw	r17,40(sp)
  805c68:	dc000915 	stw	r16,36(sp)
  805c6c:	2029883a 	mov	r20,r4
  805c70:	dfc01115 	stw	ra,68(sp)
  805c74:	3025883a 	mov	r18,r6
  805c78:	282b883a 	mov	r21,r5
  805c7c:	3827883a 	mov	r19,r7
  805c80:	08060c80 	call	8060c8 <__ieee754_pow>
  805c84:	b9000017 	ldw	r4,0(r23)
  805c88:	05bfffc4 	movi	r22,-1
  805c8c:	1021883a 	mov	r16,r2
  805c90:	1823883a 	mov	r17,r3
  805c94:	25800426 	beq	r4,r22,805ca8 <pow+0x68>
  805c98:	9009883a 	mov	r4,r18
  805c9c:	980b883a 	mov	r5,r19
  805ca0:	08076c40 	call	8076c4 <__isnand>
  805ca4:	10000d26 	beq	r2,zero,805cdc <pow+0x9c>
  805ca8:	8005883a 	mov	r2,r16
  805cac:	8807883a 	mov	r3,r17
  805cb0:	dfc01117 	ldw	ra,68(sp)
  805cb4:	ddc01017 	ldw	r23,64(sp)
  805cb8:	dd800f17 	ldw	r22,60(sp)
  805cbc:	dd400e17 	ldw	r21,56(sp)
  805cc0:	dd000d17 	ldw	r20,52(sp)
  805cc4:	dcc00c17 	ldw	r19,48(sp)
  805cc8:	dc800b17 	ldw	r18,44(sp)
  805ccc:	dc400a17 	ldw	r17,40(sp)
  805cd0:	dc000917 	ldw	r16,36(sp)
  805cd4:	dec01204 	addi	sp,sp,72
  805cd8:	f800283a 	ret
  805cdc:	a009883a 	mov	r4,r20
  805ce0:	a80b883a 	mov	r5,r21
  805ce4:	08076c40 	call	8076c4 <__isnand>
  805ce8:	1000151e 	bne	r2,zero,805d40 <pow+0x100>
  805cec:	000d883a 	mov	r6,zero
  805cf0:	000f883a 	mov	r7,zero
  805cf4:	a009883a 	mov	r4,r20
  805cf8:	a80b883a 	mov	r5,r21
  805cfc:	08088a00 	call	8088a0 <__eqdf2>
  805d00:	1000541e 	bne	r2,zero,805e54 <pow+0x214>
  805d04:	000d883a 	mov	r6,zero
  805d08:	000f883a 	mov	r7,zero
  805d0c:	9009883a 	mov	r4,r18
  805d10:	980b883a 	mov	r5,r19
  805d14:	08088a00 	call	8088a0 <__eqdf2>
  805d18:	10002c1e 	bne	r2,zero,805dcc <pow+0x18c>
  805d1c:	b8800017 	ldw	r2,0(r23)
  805d20:	d8000615 	stw	zero,24(sp)
  805d24:	d8000715 	stw	zero,28(sp)
  805d28:	10001226 	beq	r2,zero,805d74 <pow+0x134>
  805d2c:	008ffc34 	movhi	r2,16368
  805d30:	d8800715 	stw	r2,28(sp)
  805d34:	dc000617 	ldw	r16,24(sp)
  805d38:	dc400717 	ldw	r17,28(sp)
  805d3c:	003fda06 	br	805ca8 <pow+0x68>
  805d40:	000d883a 	mov	r6,zero
  805d44:	000f883a 	mov	r7,zero
  805d48:	9009883a 	mov	r4,r18
  805d4c:	980b883a 	mov	r5,r19
  805d50:	08088a00 	call	8088a0 <__eqdf2>
  805d54:	103fd41e 	bne	r2,zero,805ca8 <pow+0x68>
  805d58:	b8c00017 	ldw	r3,0(r23)
  805d5c:	010ffc34 	movhi	r4,16368
  805d60:	d8000615 	stw	zero,24(sp)
  805d64:	d9000715 	stw	r4,28(sp)
  805d68:	1d801526 	beq	r3,r22,805dc0 <pow+0x180>
  805d6c:	00800084 	movi	r2,2
  805d70:	18801326 	beq	r3,r2,805dc0 <pow+0x180>
  805d74:	008020b4 	movhi	r2,130
  805d78:	10b1c404 	addi	r2,r2,-14576
  805d7c:	00c00044 	movi	r3,1
  805d80:	d809883a 	mov	r4,sp
  805d84:	dcc00515 	stw	r19,20(sp)
  805d88:	dd400315 	stw	r21,12(sp)
  805d8c:	d8800115 	stw	r2,4(sp)
  805d90:	d8c00015 	stw	r3,0(sp)
  805d94:	dc800415 	stw	r18,16(sp)
  805d98:	dd000215 	stw	r20,8(sp)
  805d9c:	d8000815 	stw	zero,32(sp)
  805da0:	08076f40 	call	8076f4 <matherr>
  805da4:	10002726 	beq	r2,zero,805e44 <pow+0x204>
  805da8:	d8800817 	ldw	r2,32(sp)
  805dac:	103fe126 	beq	r2,zero,805d34 <pow+0xf4>
  805db0:	08096f00 	call	8096f0 <__errno>
  805db4:	d8c00817 	ldw	r3,32(sp)
  805db8:	10c00015 	stw	r3,0(r2)
  805dbc:	003fdd06 	br	805d34 <pow+0xf4>
  805dc0:	d9000715 	stw	r4,28(sp)
  805dc4:	d8000615 	stw	zero,24(sp)
  805dc8:	003fda06 	br	805d34 <pow+0xf4>
  805dcc:	9009883a 	mov	r4,r18
  805dd0:	980b883a 	mov	r5,r19
  805dd4:	08076a80 	call	8076a8 <finite>
  805dd8:	103fb326 	beq	r2,zero,805ca8 <pow+0x68>
  805ddc:	000d883a 	mov	r6,zero
  805de0:	000f883a 	mov	r7,zero
  805de4:	9009883a 	mov	r4,r18
  805de8:	980b883a 	mov	r5,r19
  805dec:	0808a380 	call	808a38 <__ltdf2>
  805df0:	103fad0e 	bge	r2,zero,805ca8 <pow+0x68>
  805df4:	b9000017 	ldw	r4,0(r23)
  805df8:	00800044 	movi	r2,1
  805dfc:	00c020b4 	movhi	r3,130
  805e00:	18f1c404 	addi	r3,r3,-14576
  805e04:	d8800015 	stw	r2,0(sp)
  805e08:	d8c00115 	stw	r3,4(sp)
  805e0c:	dd400315 	stw	r21,12(sp)
  805e10:	dcc00515 	stw	r19,20(sp)
  805e14:	d8000815 	stw	zero,32(sp)
  805e18:	dd000215 	stw	r20,8(sp)
  805e1c:	dc800415 	stw	r18,16(sp)
  805e20:	20005626 	beq	r4,zero,805f7c <pow+0x33c>
  805e24:	00bffc34 	movhi	r2,65520
  805e28:	d8800715 	stw	r2,28(sp)
  805e2c:	00800084 	movi	r2,2
  805e30:	d8000615 	stw	zero,24(sp)
  805e34:	20800326 	beq	r4,r2,805e44 <pow+0x204>
  805e38:	d809883a 	mov	r4,sp
  805e3c:	08076f40 	call	8076f4 <matherr>
  805e40:	103fd91e 	bne	r2,zero,805da8 <pow+0x168>
  805e44:	08096f00 	call	8096f0 <__errno>
  805e48:	00c00844 	movi	r3,33
  805e4c:	10c00015 	stw	r3,0(r2)
  805e50:	003fd506 	br	805da8 <pow+0x168>
  805e54:	8009883a 	mov	r4,r16
  805e58:	880b883a 	mov	r5,r17
  805e5c:	08076a80 	call	8076a8 <finite>
  805e60:	10002426 	beq	r2,zero,805ef4 <pow+0x2b4>
  805e64:	000d883a 	mov	r6,zero
  805e68:	000f883a 	mov	r7,zero
  805e6c:	8009883a 	mov	r4,r16
  805e70:	880b883a 	mov	r5,r17
  805e74:	08088a00 	call	8088a0 <__eqdf2>
  805e78:	103f8b1e 	bne	r2,zero,805ca8 <pow+0x68>
  805e7c:	a009883a 	mov	r4,r20
  805e80:	a80b883a 	mov	r5,r21
  805e84:	08076a80 	call	8076a8 <finite>
  805e88:	103f8726 	beq	r2,zero,805ca8 <pow+0x68>
  805e8c:	9009883a 	mov	r4,r18
  805e90:	980b883a 	mov	r5,r19
  805e94:	08076a80 	call	8076a8 <finite>
  805e98:	103f8326 	beq	r2,zero,805ca8 <pow+0x68>
  805e9c:	b9000017 	ldw	r4,0(r23)
  805ea0:	00800104 	movi	r2,4
  805ea4:	d8800015 	stw	r2,0(sp)
  805ea8:	00c020b4 	movhi	r3,130
  805eac:	18f1c404 	addi	r3,r3,-14576
  805eb0:	00800084 	movi	r2,2
  805eb4:	d8c00115 	stw	r3,4(sp)
  805eb8:	dd400315 	stw	r21,12(sp)
  805ebc:	dcc00515 	stw	r19,20(sp)
  805ec0:	d8000815 	stw	zero,32(sp)
  805ec4:	dd000215 	stw	r20,8(sp)
  805ec8:	dc800415 	stw	r18,16(sp)
  805ecc:	d8000615 	stw	zero,24(sp)
  805ed0:	d8000715 	stw	zero,28(sp)
  805ed4:	20800326 	beq	r4,r2,805ee4 <pow+0x2a4>
  805ed8:	d809883a 	mov	r4,sp
  805edc:	08076f40 	call	8076f4 <matherr>
  805ee0:	103fb11e 	bne	r2,zero,805da8 <pow+0x168>
  805ee4:	08096f00 	call	8096f0 <__errno>
  805ee8:	00c00884 	movi	r3,34
  805eec:	10c00015 	stw	r3,0(r2)
  805ef0:	003fad06 	br	805da8 <pow+0x168>
  805ef4:	a009883a 	mov	r4,r20
  805ef8:	a80b883a 	mov	r5,r21
  805efc:	08076a80 	call	8076a8 <finite>
  805f00:	103fd826 	beq	r2,zero,805e64 <pow+0x224>
  805f04:	9009883a 	mov	r4,r18
  805f08:	980b883a 	mov	r5,r19
  805f0c:	08076a80 	call	8076a8 <finite>
  805f10:	103fd426 	beq	r2,zero,805e64 <pow+0x224>
  805f14:	880b883a 	mov	r5,r17
  805f18:	8009883a 	mov	r4,r16
  805f1c:	08076c40 	call	8076c4 <__isnand>
  805f20:	10001926 	beq	r2,zero,805f88 <pow+0x348>
  805f24:	bc000017 	ldw	r16,0(r23)
  805f28:	00800044 	movi	r2,1
  805f2c:	00c020b4 	movhi	r3,130
  805f30:	18f1c404 	addi	r3,r3,-14576
  805f34:	d8800015 	stw	r2,0(sp)
  805f38:	d8c00115 	stw	r3,4(sp)
  805f3c:	dd400315 	stw	r21,12(sp)
  805f40:	dcc00515 	stw	r19,20(sp)
  805f44:	d8000815 	stw	zero,32(sp)
  805f48:	dd000215 	stw	r20,8(sp)
  805f4c:	dc800415 	stw	r18,16(sp)
  805f50:	80000a26 	beq	r16,zero,805f7c <pow+0x33c>
  805f54:	0009883a 	mov	r4,zero
  805f58:	000d883a 	mov	r6,zero
  805f5c:	000b883a 	mov	r5,zero
  805f60:	000f883a 	mov	r7,zero
  805f64:	08086480 	call	808648 <__divdf3>
  805f68:	d8800615 	stw	r2,24(sp)
  805f6c:	00800084 	movi	r2,2
  805f70:	d8c00715 	stw	r3,28(sp)
  805f74:	80bfb01e 	bne	r16,r2,805e38 <pow+0x1f8>
  805f78:	003fb206 	br	805e44 <pow+0x204>
  805f7c:	d8000615 	stw	zero,24(sp)
  805f80:	d8000715 	stw	zero,28(sp)
  805f84:	003fac06 	br	805e38 <pow+0x1f8>
  805f88:	b8800017 	ldw	r2,0(r23)
  805f8c:	00c000c4 	movi	r3,3
  805f90:	010020b4 	movhi	r4,130
  805f94:	2131c404 	addi	r4,r4,-14576
  805f98:	d8c00015 	stw	r3,0(sp)
  805f9c:	d9000115 	stw	r4,4(sp)
  805fa0:	d8000815 	stw	zero,32(sp)
  805fa4:	dd000215 	stw	r20,8(sp)
  805fa8:	dd400315 	stw	r21,12(sp)
  805fac:	dc800415 	stw	r18,16(sp)
  805fb0:	dcc00515 	stw	r19,20(sp)
  805fb4:	1000251e 	bne	r2,zero,80604c <pow+0x40c>
  805fb8:	05b80034 	movhi	r22,57344
  805fbc:	0091fc34 	movhi	r2,18416
  805fc0:	10bfffc4 	addi	r2,r2,-1
  805fc4:	000d883a 	mov	r6,zero
  805fc8:	000f883a 	mov	r7,zero
  805fcc:	a80b883a 	mov	r5,r21
  805fd0:	a009883a 	mov	r4,r20
  805fd4:	d8800715 	stw	r2,28(sp)
  805fd8:	dd800615 	stw	r22,24(sp)
  805fdc:	0808a380 	call	808a38 <__ltdf2>
  805fe0:	103fbd0e 	bge	r2,zero,805ed8 <pow+0x298>
  805fe4:	0005883a 	mov	r2,zero
  805fe8:	00cff834 	movhi	r3,16352
  805fec:	180f883a 	mov	r7,r3
  805ff0:	100d883a 	mov	r6,r2
  805ff4:	980b883a 	mov	r5,r19
  805ff8:	9009883a 	mov	r4,r18
  805ffc:	08082840 	call	808284 <__muldf3>
  806000:	1009883a 	mov	r4,r2
  806004:	180b883a 	mov	r5,r3
  806008:	1021883a 	mov	r16,r2
  80600c:	1823883a 	mov	r17,r3
  806010:	080770c0 	call	80770c <rint>
  806014:	180f883a 	mov	r7,r3
  806018:	8009883a 	mov	r4,r16
  80601c:	880b883a 	mov	r5,r17
  806020:	100d883a 	mov	r6,r2
  806024:	08089280 	call	808928 <__nedf2>
  806028:	10000426 	beq	r2,zero,80603c <pow+0x3fc>
  80602c:	00b1fc34 	movhi	r2,51184
  806030:	10bfffc4 	addi	r2,r2,-1
  806034:	dd800615 	stw	r22,24(sp)
  806038:	d8800715 	stw	r2,28(sp)
  80603c:	b8c00017 	ldw	r3,0(r23)
  806040:	00800084 	movi	r2,2
  806044:	18bfa41e 	bne	r3,r2,805ed8 <pow+0x298>
  806048:	003fa606 	br	805ee4 <pow+0x2a4>
  80604c:	009ffc34 	movhi	r2,32752
  806050:	000d883a 	mov	r6,zero
  806054:	000f883a 	mov	r7,zero
  806058:	a80b883a 	mov	r5,r21
  80605c:	a009883a 	mov	r4,r20
  806060:	d8800715 	stw	r2,28(sp)
  806064:	d8000615 	stw	zero,24(sp)
  806068:	0808a380 	call	808a38 <__ltdf2>
  80606c:	103ff30e 	bge	r2,zero,80603c <pow+0x3fc>
  806070:	0005883a 	mov	r2,zero
  806074:	00cff834 	movhi	r3,16352
  806078:	180f883a 	mov	r7,r3
  80607c:	100d883a 	mov	r6,r2
  806080:	980b883a 	mov	r5,r19
  806084:	9009883a 	mov	r4,r18
  806088:	08082840 	call	808284 <__muldf3>
  80608c:	1009883a 	mov	r4,r2
  806090:	180b883a 	mov	r5,r3
  806094:	1021883a 	mov	r16,r2
  806098:	1823883a 	mov	r17,r3
  80609c:	080770c0 	call	80770c <rint>
  8060a0:	180f883a 	mov	r7,r3
  8060a4:	8009883a 	mov	r4,r16
  8060a8:	880b883a 	mov	r5,r17
  8060ac:	100d883a 	mov	r6,r2
  8060b0:	08089280 	call	808928 <__nedf2>
  8060b4:	103fe126 	beq	r2,zero,80603c <pow+0x3fc>
  8060b8:	00bffc34 	movhi	r2,65520
  8060bc:	d8800715 	stw	r2,28(sp)
  8060c0:	d8000615 	stw	zero,24(sp)
  8060c4:	003fdd06 	br	80603c <pow+0x3fc>

008060c8 <__ieee754_pow>:
  8060c8:	deffbb04 	addi	sp,sp,-276
  8060cc:	3005883a 	mov	r2,r6
  8060d0:	dd404015 	stw	r21,256(sp)
  8060d4:	dd003f15 	stw	r20,252(sp)
  8060d8:	d9802815 	stw	r6,160(sp)
  8060dc:	2029883a 	mov	r20,r4
  8060e0:	282b883a 	mov	r21,r5
  8060e4:	3009883a 	mov	r4,r6
  8060e8:	380b883a 	mov	r5,r7
  8060ec:	01a00034 	movhi	r6,32768
  8060f0:	31bfffc4 	addi	r6,r6,-1
  8060f4:	dc003b15 	stw	r16,236(sp)
  8060f8:	29a0703a 	and	r16,r5,r6
  8060fc:	1404b03a 	or	r2,r2,r16
  806100:	dd804115 	stw	r22,260(sp)
  806104:	dc403c15 	stw	r17,240(sp)
  806108:	d9c02915 	stw	r7,164(sp)
  80610c:	382d883a 	mov	r22,r7
  806110:	dfc04415 	stw	ra,272(sp)
  806114:	200f883a 	mov	r7,r4
  806118:	df004315 	stw	fp,268(sp)
  80611c:	ddc04215 	stw	r23,264(sp)
  806120:	dcc03e15 	stw	r19,248(sp)
  806124:	dc803d15 	stw	r18,244(sp)
  806128:	a023883a 	mov	r17,r20
  80612c:	2809883a 	mov	r4,r5
  806130:	10000826 	beq	r2,zero,806154 <__ieee754_pow+0x8c>
  806134:	a9a4703a 	and	r18,r21,r6
  806138:	009ffc34 	movhi	r2,32752
  80613c:	a827883a 	mov	r19,r21
  806140:	1480180e 	bge	r2,r18,8061a4 <__ieee754_pow+0xdc>
  806144:	00b00434 	movhi	r2,49168
  806148:	9085883a 	add	r2,r18,r2
  80614c:	8884b03a 	or	r2,r17,r2
  806150:	1000321e 	bne	r2,zero,80621c <__ieee754_pow+0x154>
  806154:	0009883a 	mov	r4,zero
  806158:	014ffc34 	movhi	r5,16368
  80615c:	d9002815 	stw	r4,160(sp)
  806160:	d9402915 	stw	r5,164(sp)
  806164:	d9002817 	ldw	r4,160(sp)
  806168:	d9402917 	ldw	r5,164(sp)
  80616c:	2005883a 	mov	r2,r4
  806170:	2807883a 	mov	r3,r5
  806174:	dfc04417 	ldw	ra,272(sp)
  806178:	df004317 	ldw	fp,268(sp)
  80617c:	ddc04217 	ldw	r23,264(sp)
  806180:	dd804117 	ldw	r22,260(sp)
  806184:	dd404017 	ldw	r21,256(sp)
  806188:	dd003f17 	ldw	r20,252(sp)
  80618c:	dcc03e17 	ldw	r19,248(sp)
  806190:	dc803d17 	ldw	r18,244(sp)
  806194:	dc403c17 	ldw	r17,240(sp)
  806198:	dc003b17 	ldw	r16,236(sp)
  80619c:	dec04504 	addi	sp,sp,276
  8061a0:	f800283a 	ret
  8061a4:	90802b26 	beq	r18,r2,806254 <__ieee754_pow+0x18c>
  8061a8:	143fe616 	blt	r2,r16,806144 <__ieee754_pow+0x7c>
  8061ac:	80806126 	beq	r16,r2,806334 <__ieee754_pow+0x26c>
  8061b0:	982e403a 	cmpge	r23,r19,zero
  8061b4:	b8004e26 	beq	r23,zero,8062f0 <__ieee754_pow+0x228>
  8061b8:	0039883a 	mov	fp,zero
  8061bc:	3800281e 	bne	r7,zero,806260 <__ieee754_pow+0x198>
  8061c0:	009ffc34 	movhi	r2,32752
  8061c4:	80804f26 	beq	r16,r2,806304 <__ieee754_pow+0x23c>
  8061c8:	008ffc34 	movhi	r2,16368
  8061cc:	80808226 	beq	r16,r2,8063d8 <__ieee754_pow+0x310>
  8061d0:	00900034 	movhi	r2,16384
  8061d4:	20828426 	beq	r4,r2,806be8 <__ieee754_pow+0xb20>
  8061d8:	008ff834 	movhi	r2,16352
  8061dc:	2080201e 	bne	r4,r2,806260 <__ieee754_pow+0x198>
  8061e0:	98001f16 	blt	r19,zero,806260 <__ieee754_pow+0x198>
  8061e4:	a80b883a 	mov	r5,r21
  8061e8:	a009883a 	mov	r4,r20
  8061ec:	dfc04417 	ldw	ra,272(sp)
  8061f0:	df004317 	ldw	fp,268(sp)
  8061f4:	ddc04217 	ldw	r23,264(sp)
  8061f8:	dd804117 	ldw	r22,260(sp)
  8061fc:	dd404017 	ldw	r21,256(sp)
  806200:	dd003f17 	ldw	r20,252(sp)
  806204:	dcc03e17 	ldw	r19,248(sp)
  806208:	dc803d17 	ldw	r18,244(sp)
  80620c:	dc403c17 	ldw	r17,240(sp)
  806210:	dc003b17 	ldw	r16,236(sp)
  806214:	dec04504 	addi	sp,sp,276
  806218:	08073c81 	jmpi	8073c8 <__ieee754_sqrt>
  80621c:	010020b4 	movhi	r4,130
  806220:	21322f04 	addi	r4,r4,-14148
  806224:	dfc04417 	ldw	ra,272(sp)
  806228:	df004317 	ldw	fp,268(sp)
  80622c:	ddc04217 	ldw	r23,264(sp)
  806230:	dd804117 	ldw	r22,260(sp)
  806234:	dd404017 	ldw	r21,256(sp)
  806238:	dd003f17 	ldw	r20,252(sp)
  80623c:	dcc03e17 	ldw	r19,248(sp)
  806240:	dc803d17 	ldw	r18,244(sp)
  806244:	dc403c17 	ldw	r17,240(sp)
  806248:	dc003b17 	ldw	r16,236(sp)
  80624c:	dec04504 	addi	sp,sp,276
  806250:	08076fc1 	jmpi	8076fc <nan>
  806254:	a03fbb1e 	bne	r20,zero,806144 <__ieee754_pow+0x7c>
  806258:	003fd306 	br	8061a8 <__ieee754_pow+0xe0>
  80625c:	0039883a 	mov	fp,zero
  806260:	a009883a 	mov	r4,r20
  806264:	a80b883a 	mov	r5,r21
  806268:	08076900 	call	807690 <fabs>
  80626c:	1015883a 	mov	r10,r2
  806270:	1817883a 	mov	r11,r3
  806274:	88001226 	beq	r17,zero,8062c0 <__ieee754_pow+0x1f8>
  806278:	9804d7fa 	srli	r2,r19,31
  80627c:	10bfffc4 	addi	r2,r2,-1
  806280:	1706b03a 	or	r3,r2,fp
  806284:	d8802515 	stw	r2,148(sp)
  806288:	18002c1e 	bne	r3,zero,80633c <__ieee754_pow+0x274>
  80628c:	a80f883a 	mov	r7,r21
  806290:	a009883a 	mov	r4,r20
  806294:	a80b883a 	mov	r5,r21
  806298:	a00d883a 	mov	r6,r20
  80629c:	08081900 	call	808190 <__subdf3>
  8062a0:	1009883a 	mov	r4,r2
  8062a4:	180b883a 	mov	r5,r3
  8062a8:	100d883a 	mov	r6,r2
  8062ac:	180f883a 	mov	r7,r3
  8062b0:	08086480 	call	808648 <__divdf3>
  8062b4:	d8802815 	stw	r2,160(sp)
  8062b8:	d8c02915 	stw	r3,164(sp)
  8062bc:	003fa906 	br	806164 <__ieee754_pow+0x9c>
  8062c0:	009ffc34 	movhi	r2,32752
  8062c4:	90800326 	beq	r18,r2,8062d4 <__ieee754_pow+0x20c>
  8062c8:	90000226 	beq	r18,zero,8062d4 <__ieee754_pow+0x20c>
  8062cc:	008ffc34 	movhi	r2,16368
  8062d0:	90bfe91e 	bne	r18,r2,806278 <__ieee754_pow+0x1b0>
  8062d4:	b0026316 	blt	r22,zero,806c64 <__ieee754_pow+0xb9c>
  8062d8:	5011883a 	mov	r8,r10
  8062dc:	5813883a 	mov	r9,r11
  8062e0:	b8023126 	beq	r23,zero,806ba8 <__ieee754_pow+0xae0>
  8062e4:	da002815 	stw	r8,160(sp)
  8062e8:	da402915 	stw	r9,164(sp)
  8062ec:	003f9d06 	br	806164 <__ieee754_pow+0x9c>
  8062f0:	0090d034 	movhi	r2,17216
  8062f4:	10bfffc4 	addi	r2,r2,-1
  8062f8:	1400270e 	bge	r2,r16,806398 <__ieee754_pow+0x2d0>
  8062fc:	07000084 	movi	fp,2
  806300:	003fae06 	br	8061bc <__ieee754_pow+0xf4>
  806304:	00b00434 	movhi	r2,49168
  806308:	9085883a 	add	r2,r18,r2
  80630c:	8884b03a 	or	r2,r17,r2
  806310:	103f9026 	beq	r2,zero,806154 <__ieee754_pow+0x8c>
  806314:	008ffc34 	movhi	r2,16368
  806318:	10bfffc4 	addi	r2,r2,-1
  80631c:	1482d00e 	bge	r2,r18,806e60 <__ieee754_pow+0xd98>
  806320:	b03f900e 	bge	r22,zero,806164 <__ieee754_pow+0x9c>
  806324:	0005883a 	mov	r2,zero
  806328:	d8802815 	stw	r2,160(sp)
  80632c:	d8802915 	stw	r2,164(sp)
  806330:	003f8c06 	br	806164 <__ieee754_pow+0x9c>
  806334:	383f9e26 	beq	r7,zero,8061b0 <__ieee754_pow+0xe8>
  806338:	003f8206 	br	806144 <__ieee754_pow+0x7c>
  80633c:	00907834 	movhi	r2,16864
  806340:	1400290e 	bge	r2,r16,8063e8 <__ieee754_pow+0x320>
  806344:	0090fc34 	movhi	r2,17392
  806348:	1402500e 	bge	r2,r16,806c8c <__ieee754_pow+0xbc4>
  80634c:	008ffc34 	movhi	r2,16368
  806350:	10bfffc4 	addi	r2,r2,-1
  806354:	14800b0e 	bge	r2,r18,806384 <__ieee754_pow+0x2bc>
  806358:	05800b0e 	bge	zero,r22,806388 <__ieee754_pow+0x2c0>
  80635c:	00a20034 	movhi	r2,34816
  806360:	109d6704 	addi	r2,r2,30108
  806364:	00df8e34 	movhi	r3,32312
  806368:	18f90f04 	addi	r3,r3,-7108
  80636c:	100d883a 	mov	r6,r2
  806370:	180f883a 	mov	r7,r3
  806374:	1009883a 	mov	r4,r2
  806378:	180b883a 	mov	r5,r3
  80637c:	08082840 	call	808284 <__muldf3>
  806380:	003fcc06 	br	8062b4 <__ieee754_pow+0x1ec>
  806384:	b03ff516 	blt	r22,zero,80635c <__ieee754_pow+0x294>
  806388:	0007883a 	mov	r3,zero
  80638c:	d8c02815 	stw	r3,160(sp)
  806390:	d8c02915 	stw	r3,164(sp)
  806394:	003f7306 	br	806164 <__ieee754_pow+0x9c>
  806398:	008ffc34 	movhi	r2,16368
  80639c:	10bfffc4 	addi	r2,r2,-1
  8063a0:	143f850e 	bge	r2,r16,8061b8 <__ieee754_pow+0xf0>
  8063a4:	8005d53a 	srai	r2,r16,20
  8063a8:	01400504 	movi	r5,20
  8063ac:	10ff0044 	addi	r3,r2,-1023
  8063b0:	28c3e10e 	bge	r5,r3,807338 <__ieee754_pow+0x1270>
  8063b4:	00800d04 	movi	r2,52
  8063b8:	10c5c83a 	sub	r2,r2,r3
  8063bc:	3886d83a 	srl	r3,r7,r2
  8063c0:	1884983a 	sll	r2,r3,r2
  8063c4:	38bf7c1e 	bne	r7,r2,8061b8 <__ieee754_pow+0xf0>
  8063c8:	18c0004c 	andi	r3,r3,1
  8063cc:	00800084 	movi	r2,2
  8063d0:	10f9c83a 	sub	fp,r2,r3
  8063d4:	003f7906 	br	8061bc <__ieee754_pow+0xf4>
  8063d8:	b0038516 	blt	r22,zero,8071f0 <__ieee754_pow+0x1128>
  8063dc:	dd002815 	stw	r20,160(sp)
  8063e0:	dd402915 	stw	r21,164(sp)
  8063e4:	003f5f06 	br	806164 <__ieee754_pow+0x9c>
  8063e8:	00800434 	movhi	r2,16
  8063ec:	10bfffc4 	addi	r2,r2,-1
  8063f0:	1482900e 	bge	r2,r18,806e34 <__ieee754_pow+0xd6c>
  8063f4:	000b883a 	mov	r5,zero
  8063f8:	9005d53a 	srai	r2,r18,20
  8063fc:	00c00434 	movhi	r3,16
  806400:	18ffffc4 	addi	r3,r3,-1
  806404:	90c8703a 	and	r4,r18,r3
  806408:	2887883a 	add	r3,r5,r2
  80640c:	18bf0044 	addi	r2,r3,-1023
  806410:	d8800015 	stw	r2,0(sp)
  806414:	00800134 	movhi	r2,4
  806418:	10a62384 	addi	r2,r2,-26482
  80641c:	250ffc34 	orhi	r20,r4,16368
  806420:	1101ee0e 	bge	r2,r4,806bdc <__ieee754_pow+0xb14>
  806424:	00800334 	movhi	r2,12
  806428:	10ad9e44 	addi	r2,r2,-18823
  80642c:	1101e716 	blt	r2,r4,806bcc <__ieee754_pow+0xb04>
  806430:	01000044 	movi	r4,1
  806434:	04000334 	movhi	r16,12
  806438:	200890fa 	slli	r4,r4,3
  80643c:	da800115 	stw	r10,4(sp)
  806440:	dd000215 	stw	r20,8(sp)
  806444:	d9002c15 	stw	r4,176(sp)
  806448:	d9402c17 	ldw	r5,176(sp)
  80644c:	010020b4 	movhi	r4,130
  806450:	2131c504 	addi	r4,r4,-14572
  806454:	a02bd07a 	srai	r21,r20,1
  806458:	2909883a 	add	r4,r5,r4
  80645c:	25800017 	ldw	r22,0(r4)
  806460:	25c00117 	ldw	r23,4(r4)
  806464:	a00b883a 	mov	r5,r20
  806468:	5009883a 	mov	r4,r10
  80646c:	b00d883a 	mov	r6,r22
  806470:	b80f883a 	mov	r7,r23
  806474:	08081900 	call	808190 <__subdf3>
  806478:	d9000117 	ldw	r4,4(sp)
  80647c:	a00b883a 	mov	r5,r20
  806480:	b00d883a 	mov	r6,r22
  806484:	b80f883a 	mov	r7,r23
  806488:	1025883a 	mov	r18,r2
  80648c:	1827883a 	mov	r19,r3
  806490:	08082100 	call	808210 <__adddf3>
  806494:	0011883a 	mov	r8,zero
  806498:	024ffc34 	movhi	r9,16368
  80649c:	480b883a 	mov	r5,r9
  8064a0:	4009883a 	mov	r4,r8
  8064a4:	180f883a 	mov	r7,r3
  8064a8:	100d883a 	mov	r6,r2
  8064ac:	08086480 	call	808648 <__divdf3>
  8064b0:	d8c02e15 	stw	r3,184(sp)
  8064b4:	d8800f15 	stw	r2,60(sp)
  8064b8:	d8802d15 	stw	r2,180(sp)
  8064bc:	d8802e17 	ldw	r2,184(sp)
  8064c0:	d9800f17 	ldw	r6,60(sp)
  8064c4:	9009883a 	mov	r4,r18
  8064c8:	980b883a 	mov	r5,r19
  8064cc:	100f883a 	mov	r7,r2
  8064d0:	dc800b15 	stw	r18,44(sp)
  8064d4:	dcc00c15 	stw	r19,48(sp)
  8064d8:	d8801015 	stw	r2,64(sp)
  8064dc:	08082840 	call	808284 <__muldf3>
  8064e0:	d8c03015 	stw	r3,192(sp)
  8064e4:	d9003017 	ldw	r4,192(sp)
  8064e8:	d8802f15 	stw	r2,188(sp)
  8064ec:	d8800315 	stw	r2,12(sp)
  8064f0:	ad480034 	orhi	r21,r21,8192
  8064f4:	0005883a 	mov	r2,zero
  8064f8:	ac2b883a 	add	r21,r21,r16
  8064fc:	000b883a 	mov	r5,zero
  806500:	1021883a 	mov	r16,r2
  806504:	2005883a 	mov	r2,r4
  806508:	800d883a 	mov	r6,r16
  80650c:	a80f883a 	mov	r7,r21
  806510:	d9000415 	stw	r4,16(sp)
  806514:	d9002715 	stw	r4,156(sp)
  806518:	d9402615 	stw	r5,152(sp)
  80651c:	d9401615 	stw	r5,88(sp)
  806520:	d9001715 	stw	r4,92(sp)
  806524:	100b883a 	mov	r5,r2
  806528:	0009883a 	mov	r4,zero
  80652c:	08082840 	call	808284 <__muldf3>
  806530:	d9000b17 	ldw	r4,44(sp)
  806534:	980b883a 	mov	r5,r19
  806538:	180f883a 	mov	r7,r3
  80653c:	100d883a 	mov	r6,r2
  806540:	08081900 	call	808190 <__subdf3>
  806544:	8009883a 	mov	r4,r16
  806548:	a80b883a 	mov	r5,r21
  80654c:	b80f883a 	mov	r7,r23
  806550:	b00d883a 	mov	r6,r22
  806554:	1021883a 	mov	r16,r2
  806558:	1823883a 	mov	r17,r3
  80655c:	08081900 	call	808190 <__subdf3>
  806560:	d9000117 	ldw	r4,4(sp)
  806564:	a00b883a 	mov	r5,r20
  806568:	180f883a 	mov	r7,r3
  80656c:	100d883a 	mov	r6,r2
  806570:	08081900 	call	808190 <__subdf3>
  806574:	d9001617 	ldw	r4,88(sp)
  806578:	d9402717 	ldw	r5,156(sp)
  80657c:	180f883a 	mov	r7,r3
  806580:	100d883a 	mov	r6,r2
  806584:	08082840 	call	808284 <__muldf3>
  806588:	180f883a 	mov	r7,r3
  80658c:	880b883a 	mov	r5,r17
  806590:	8009883a 	mov	r4,r16
  806594:	100d883a 	mov	r6,r2
  806598:	08081900 	call	808190 <__subdf3>
  80659c:	d9000f17 	ldw	r4,60(sp)
  8065a0:	d9402e17 	ldw	r5,184(sp)
  8065a4:	180f883a 	mov	r7,r3
  8065a8:	100d883a 	mov	r6,r2
  8065ac:	08082840 	call	808284 <__muldf3>
  8065b0:	d9000317 	ldw	r4,12(sp)
  8065b4:	d9403017 	ldw	r5,192(sp)
  8065b8:	d8803115 	stw	r2,196(sp)
  8065bc:	200d883a 	mov	r6,r4
  8065c0:	280f883a 	mov	r7,r5
  8065c4:	d8c03215 	stw	r3,200(sp)
  8065c8:	08082840 	call	808284 <__muldf3>
  8065cc:	1009883a 	mov	r4,r2
  8065d0:	180b883a 	mov	r5,r3
  8065d4:	100d883a 	mov	r6,r2
  8065d8:	180f883a 	mov	r7,r3
  8065dc:	1021883a 	mov	r16,r2
  8065e0:	1823883a 	mov	r17,r3
  8065e4:	08082840 	call	808284 <__muldf3>
  8065e8:	02129174 	movhi	r8,19013
  8065ec:	4213bbc4 	addi	r8,r8,20207
  8065f0:	024ff2b4 	movhi	r9,16330
  8065f4:	4a5f8a04 	addi	r9,r9,32296
  8065f8:	480f883a 	mov	r7,r9
  8065fc:	8009883a 	mov	r4,r16
  806600:	880b883a 	mov	r5,r17
  806604:	400d883a 	mov	r6,r8
  806608:	1029883a 	mov	r20,r2
  80660c:	182b883a 	mov	r21,r3
  806610:	08082840 	call	808284 <__muldf3>
  806614:	0224f2b4 	movhi	r8,37834
  806618:	4236d944 	addi	r8,r8,-9371
  80661c:	024ff3b4 	movhi	r9,16334
  806620:	4a619284 	addi	r9,r9,-31158
  806624:	480f883a 	mov	r7,r9
  806628:	400d883a 	mov	r6,r8
  80662c:	180b883a 	mov	r5,r3
  806630:	1009883a 	mov	r4,r2
  806634:	08082100 	call	808210 <__adddf3>
  806638:	180f883a 	mov	r7,r3
  80663c:	8009883a 	mov	r4,r16
  806640:	880b883a 	mov	r5,r17
  806644:	100d883a 	mov	r6,r2
  806648:	08082840 	call	808284 <__muldf3>
  80664c:	022a4774 	movhi	r8,43293
  806650:	42104044 	addi	r8,r8,16641
  806654:	024ff474 	movhi	r9,16337
  806658:	4a5d1804 	addi	r9,r9,29792
  80665c:	480f883a 	mov	r7,r9
  806660:	400d883a 	mov	r6,r8
  806664:	180b883a 	mov	r5,r3
  806668:	1009883a 	mov	r4,r2
  80666c:	08082100 	call	808210 <__adddf3>
  806670:	180f883a 	mov	r7,r3
  806674:	8009883a 	mov	r4,r16
  806678:	880b883a 	mov	r5,r17
  80667c:	100d883a 	mov	r6,r2
  806680:	08082840 	call	808284 <__muldf3>
  806684:	021463f4 	movhi	r8,20879
  806688:	42099344 	addi	r8,r8,9805
  80668c:	024ff574 	movhi	r9,16341
  806690:	4a555544 	addi	r9,r9,21845
  806694:	480f883a 	mov	r7,r9
  806698:	400d883a 	mov	r6,r8
  80669c:	180b883a 	mov	r5,r3
  8066a0:	1009883a 	mov	r4,r2
  8066a4:	08082100 	call	808210 <__adddf3>
  8066a8:	180f883a 	mov	r7,r3
  8066ac:	8009883a 	mov	r4,r16
  8066b0:	880b883a 	mov	r5,r17
  8066b4:	100d883a 	mov	r6,r2
  8066b8:	08082840 	call	808284 <__muldf3>
  8066bc:	0236dc34 	movhi	r8,56176
  8066c0:	422affc4 	addi	r8,r8,-21505
  8066c4:	024ff6f4 	movhi	r9,16347
  8066c8:	4a5b6d84 	addi	r9,r9,28086
  8066cc:	480f883a 	mov	r7,r9
  8066d0:	400d883a 	mov	r6,r8
  8066d4:	180b883a 	mov	r5,r3
  8066d8:	1009883a 	mov	r4,r2
  8066dc:	08082100 	call	808210 <__adddf3>
  8066e0:	180f883a 	mov	r7,r3
  8066e4:	8009883a 	mov	r4,r16
  8066e8:	880b883a 	mov	r5,r17
  8066ec:	100d883a 	mov	r6,r2
  8066f0:	08082840 	call	808284 <__muldf3>
  8066f4:	020cccf4 	movhi	r8,13107
  8066f8:	420cc0c4 	addi	r8,r8,13059
  8066fc:	024ff8f4 	movhi	r9,16355
  806700:	4a4cccc4 	addi	r9,r9,13107
  806704:	480f883a 	mov	r7,r9
  806708:	400d883a 	mov	r6,r8
  80670c:	180b883a 	mov	r5,r3
  806710:	1009883a 	mov	r4,r2
  806714:	08082100 	call	808210 <__adddf3>
  806718:	180f883a 	mov	r7,r3
  80671c:	a80b883a 	mov	r5,r21
  806720:	a009883a 	mov	r4,r20
  806724:	100d883a 	mov	r6,r2
  806728:	08082840 	call	808284 <__muldf3>
  80672c:	d9000317 	ldw	r4,12(sp)
  806730:	d9403017 	ldw	r5,192(sp)
  806734:	d9801617 	ldw	r6,88(sp)
  806738:	d9c02717 	ldw	r7,156(sp)
  80673c:	1021883a 	mov	r16,r2
  806740:	1823883a 	mov	r17,r3
  806744:	08082100 	call	808210 <__adddf3>
  806748:	d9003117 	ldw	r4,196(sp)
  80674c:	d9403217 	ldw	r5,200(sp)
  806750:	180f883a 	mov	r7,r3
  806754:	100d883a 	mov	r6,r2
  806758:	d9001415 	stw	r4,80(sp)
  80675c:	d9401515 	stw	r5,84(sp)
  806760:	08082840 	call	808284 <__muldf3>
  806764:	180f883a 	mov	r7,r3
  806768:	8009883a 	mov	r4,r16
  80676c:	880b883a 	mov	r5,r17
  806770:	100d883a 	mov	r6,r2
  806774:	08082100 	call	808210 <__adddf3>
  806778:	d9001617 	ldw	r4,88(sp)
  80677c:	d9402717 	ldw	r5,156(sp)
  806780:	d8803315 	stw	r2,204(sp)
  806784:	200d883a 	mov	r6,r4
  806788:	280f883a 	mov	r7,r5
  80678c:	d8c03415 	stw	r3,208(sp)
  806790:	08082840 	call	808284 <__muldf3>
  806794:	182f883a 	mov	r23,r3
  806798:	05500234 	movhi	r21,16392
  80679c:	0029883a 	mov	r20,zero
  8067a0:	b80b883a 	mov	r5,r23
  8067a4:	a00d883a 	mov	r6,r20
  8067a8:	a80f883a 	mov	r7,r21
  8067ac:	1009883a 	mov	r4,r2
  8067b0:	d8800715 	stw	r2,28(sp)
  8067b4:	d8c00815 	stw	r3,32(sp)
  8067b8:	08082100 	call	808210 <__adddf3>
  8067bc:	d9003317 	ldw	r4,204(sp)
  8067c0:	d9403417 	ldw	r5,208(sp)
  8067c4:	180f883a 	mov	r7,r3
  8067c8:	100d883a 	mov	r6,r2
  8067cc:	d9000515 	stw	r4,20(sp)
  8067d0:	d9400615 	stw	r5,24(sp)
  8067d4:	08082100 	call	808210 <__adddf3>
  8067d8:	d9001617 	ldw	r4,88(sp)
  8067dc:	d9402717 	ldw	r5,156(sp)
  8067e0:	0025883a 	mov	r18,zero
  8067e4:	900d883a 	mov	r6,r18
  8067e8:	180f883a 	mov	r7,r3
  8067ec:	1823883a 	mov	r17,r3
  8067f0:	08082840 	call	808284 <__muldf3>
  8067f4:	d9001417 	ldw	r4,80(sp)
  8067f8:	d9403217 	ldw	r5,200(sp)
  8067fc:	880f883a 	mov	r7,r17
  806800:	900d883a 	mov	r6,r18
  806804:	d8803515 	stw	r2,212(sp)
  806808:	d8c03615 	stw	r3,216(sp)
  80680c:	08082840 	call	808284 <__muldf3>
  806810:	a80f883a 	mov	r7,r21
  806814:	880b883a 	mov	r5,r17
  806818:	000d883a 	mov	r6,zero
  80681c:	9009883a 	mov	r4,r18
  806820:	1021883a 	mov	r16,r2
  806824:	1823883a 	mov	r17,r3
  806828:	08081900 	call	808190 <__subdf3>
  80682c:	d9800717 	ldw	r6,28(sp)
  806830:	b80f883a 	mov	r7,r23
  806834:	180b883a 	mov	r5,r3
  806838:	1009883a 	mov	r4,r2
  80683c:	08081900 	call	808190 <__subdf3>
  806840:	d9000517 	ldw	r4,20(sp)
  806844:	d9403417 	ldw	r5,208(sp)
  806848:	180f883a 	mov	r7,r3
  80684c:	100d883a 	mov	r6,r2
  806850:	08081900 	call	808190 <__subdf3>
  806854:	d9000317 	ldw	r4,12(sp)
  806858:	d9403017 	ldw	r5,192(sp)
  80685c:	180f883a 	mov	r7,r3
  806860:	100d883a 	mov	r6,r2
  806864:	08082840 	call	808284 <__muldf3>
  806868:	180f883a 	mov	r7,r3
  80686c:	880b883a 	mov	r5,r17
  806870:	8009883a 	mov	r4,r16
  806874:	100d883a 	mov	r6,r2
  806878:	08082100 	call	808210 <__adddf3>
  80687c:	102d883a 	mov	r22,r2
  806880:	d9003617 	ldw	r4,216(sp)
  806884:	d8803517 	ldw	r2,212(sp)
  806888:	d9403617 	ldw	r5,216(sp)
  80688c:	182f883a 	mov	r23,r3
  806890:	b00d883a 	mov	r6,r22
  806894:	b80f883a 	mov	r7,r23
  806898:	d9000a15 	stw	r4,40(sp)
  80689c:	1009883a 	mov	r4,r2
  8068a0:	054ffbf4 	movhi	r21,16367
  8068a4:	ad71c244 	addi	r21,r21,-14583
  8068a8:	dd800d15 	stw	r22,52(sp)
  8068ac:	ddc00e15 	stw	r23,56(sp)
  8068b0:	05380034 	movhi	r20,57344
  8068b4:	d8800915 	stw	r2,36(sp)
  8068b8:	08082100 	call	808210 <__adddf3>
  8068bc:	180b883a 	mov	r5,r3
  8068c0:	a00d883a 	mov	r6,r20
  8068c4:	a80f883a 	mov	r7,r21
  8068c8:	9009883a 	mov	r4,r18
  8068cc:	1823883a 	mov	r17,r3
  8068d0:	08082840 	call	808284 <__muldf3>
  8068d4:	020516f4 	movhi	r8,5211
  8068d8:	42007d44 	addi	r8,r8,501
  8068dc:	026f8fb4 	movhi	r9,48702
  8068e0:	4a4bf804 	addi	r9,r9,12256
  8068e4:	480f883a 	mov	r7,r9
  8068e8:	400d883a 	mov	r6,r8
  8068ec:	880b883a 	mov	r5,r17
  8068f0:	9009883a 	mov	r4,r18
  8068f4:	d8803715 	stw	r2,220(sp)
  8068f8:	d8c03815 	stw	r3,224(sp)
  8068fc:	08082840 	call	808284 <__muldf3>
  806900:	d9800917 	ldw	r6,36(sp)
  806904:	d9c03617 	ldw	r7,216(sp)
  806908:	880b883a 	mov	r5,r17
  80690c:	9009883a 	mov	r4,r18
  806910:	1021883a 	mov	r16,r2
  806914:	1823883a 	mov	r17,r3
  806918:	08081900 	call	808190 <__subdf3>
  80691c:	d9000d17 	ldw	r4,52(sp)
  806920:	b80b883a 	mov	r5,r23
  806924:	180f883a 	mov	r7,r3
  806928:	100d883a 	mov	r6,r2
  80692c:	08081900 	call	808190 <__subdf3>
  806930:	180b883a 	mov	r5,r3
  806934:	a80f883a 	mov	r7,r21
  806938:	01b70eb4 	movhi	r6,56378
  80693c:	3180ff44 	addi	r6,r6,1021
  806940:	1009883a 	mov	r4,r2
  806944:	08082840 	call	808284 <__muldf3>
  806948:	180f883a 	mov	r7,r3
  80694c:	880b883a 	mov	r5,r17
  806950:	8009883a 	mov	r4,r16
  806954:	100d883a 	mov	r6,r2
  806958:	08082100 	call	808210 <__adddf3>
  80695c:	d9402c17 	ldw	r5,176(sp)
  806960:	010020b4 	movhi	r4,130
  806964:	2131c904 	addi	r4,r4,-14556
  806968:	2909883a 	add	r4,r5,r4
  80696c:	22400117 	ldw	r9,4(r4)
  806970:	22000017 	ldw	r8,0(r4)
  806974:	180b883a 	mov	r5,r3
  806978:	480f883a 	mov	r7,r9
  80697c:	400d883a 	mov	r6,r8
  806980:	1009883a 	mov	r4,r2
  806984:	08082100 	call	808210 <__adddf3>
  806988:	d9000017 	ldw	r4,0(sp)
  80698c:	182f883a 	mov	r23,r3
  806990:	102d883a 	mov	r22,r2
  806994:	0808b480 	call	808b48 <__floatsidf>
  806998:	d9402c17 	ldw	r5,176(sp)
  80699c:	010020b4 	movhi	r4,130
  8069a0:	2131cd04 	addi	r4,r4,-14540
  8069a4:	b00d883a 	mov	r6,r22
  8069a8:	2911883a 	add	r8,r5,r4
  8069ac:	d9003717 	ldw	r4,220(sp)
  8069b0:	d9403817 	ldw	r5,224(sp)
  8069b4:	45000017 	ldw	r20,0(r8)
  8069b8:	d9002315 	stw	r4,140(sp)
  8069bc:	d9003817 	ldw	r4,224(sp)
  8069c0:	45400117 	ldw	r21,4(r8)
  8069c4:	b80f883a 	mov	r7,r23
  8069c8:	d9002415 	stw	r4,144(sp)
  8069cc:	d9002317 	ldw	r4,140(sp)
  8069d0:	1021883a 	mov	r16,r2
  8069d4:	1823883a 	mov	r17,r3
  8069d8:	dd802115 	stw	r22,132(sp)
  8069dc:	ddc02215 	stw	r23,136(sp)
  8069e0:	08082100 	call	808210 <__adddf3>
  8069e4:	180b883a 	mov	r5,r3
  8069e8:	1009883a 	mov	r4,r2
  8069ec:	a00d883a 	mov	r6,r20
  8069f0:	a80f883a 	mov	r7,r21
  8069f4:	08082100 	call	808210 <__adddf3>
  8069f8:	180f883a 	mov	r7,r3
  8069fc:	8009883a 	mov	r4,r16
  806a00:	880b883a 	mov	r5,r17
  806a04:	100d883a 	mov	r6,r2
  806a08:	08082100 	call	808210 <__adddf3>
  806a0c:	180b883a 	mov	r5,r3
  806a10:	0009883a 	mov	r4,zero
  806a14:	800d883a 	mov	r6,r16
  806a18:	880f883a 	mov	r7,r17
  806a1c:	d9001b15 	stw	r4,108(sp)
  806a20:	d8c01c15 	stw	r3,112(sp)
  806a24:	08081900 	call	808190 <__subdf3>
  806a28:	180b883a 	mov	r5,r3
  806a2c:	a80f883a 	mov	r7,r21
  806a30:	1009883a 	mov	r4,r2
  806a34:	a00d883a 	mov	r6,r20
  806a38:	08081900 	call	808190 <__subdf3>
  806a3c:	d9802317 	ldw	r6,140(sp)
  806a40:	d9c03817 	ldw	r7,224(sp)
  806a44:	180b883a 	mov	r5,r3
  806a48:	1009883a 	mov	r4,r2
  806a4c:	08081900 	call	808190 <__subdf3>
  806a50:	d9002117 	ldw	r4,132(sp)
  806a54:	1011883a 	mov	r8,r2
  806a58:	1813883a 	mov	r9,r3
  806a5c:	b80b883a 	mov	r5,r23
  806a60:	480f883a 	mov	r7,r9
  806a64:	400d883a 	mov	r6,r8
  806a68:	08081900 	call	808190 <__subdf3>
  806a6c:	1823883a 	mov	r17,r3
  806a70:	d8c02517 	ldw	r3,148(sp)
  806a74:	1021883a 	mov	r16,r2
  806a78:	e0bfffc4 	addi	r2,fp,-1
  806a7c:	1884b03a 	or	r2,r3,r2
  806a80:	1000731e 	bne	r2,zero,806c50 <__ieee754_pow+0xb88>
  806a84:	0009883a 	mov	r4,zero
  806a88:	016ffc34 	movhi	r5,49136
  806a8c:	d9001915 	stw	r4,100(sp)
  806a90:	d9401a15 	stw	r5,104(sp)
  806a94:	d9402917 	ldw	r5,164(sp)
  806a98:	d9002817 	ldw	r4,160(sp)
  806a9c:	0029883a 	mov	r20,zero
  806aa0:	a00d883a 	mov	r6,r20
  806aa4:	280f883a 	mov	r7,r5
  806aa8:	2827883a 	mov	r19,r5
  806aac:	08081900 	call	808190 <__subdf3>
  806ab0:	d9001b17 	ldw	r4,108(sp)
  806ab4:	d9401c17 	ldw	r5,112(sp)
  806ab8:	180f883a 	mov	r7,r3
  806abc:	100d883a 	mov	r6,r2
  806ac0:	08082840 	call	808284 <__muldf3>
  806ac4:	d9c02917 	ldw	r7,164(sp)
  806ac8:	d9802817 	ldw	r6,160(sp)
  806acc:	880b883a 	mov	r5,r17
  806ad0:	8009883a 	mov	r4,r16
  806ad4:	1823883a 	mov	r17,r3
  806ad8:	1021883a 	mov	r16,r2
  806adc:	08082840 	call	808284 <__muldf3>
  806ae0:	180f883a 	mov	r7,r3
  806ae4:	880b883a 	mov	r5,r17
  806ae8:	8009883a 	mov	r4,r16
  806aec:	100d883a 	mov	r6,r2
  806af0:	08082100 	call	808210 <__adddf3>
  806af4:	d9401c17 	ldw	r5,112(sp)
  806af8:	d9001b17 	ldw	r4,108(sp)
  806afc:	a00d883a 	mov	r6,r20
  806b00:	980f883a 	mov	r7,r19
  806b04:	1029883a 	mov	r20,r2
  806b08:	182b883a 	mov	r21,r3
  806b0c:	08082840 	call	808284 <__muldf3>
  806b10:	1025883a 	mov	r18,r2
  806b14:	1827883a 	mov	r19,r3
  806b18:	a009883a 	mov	r4,r20
  806b1c:	a80b883a 	mov	r5,r21
  806b20:	900d883a 	mov	r6,r18
  806b24:	980f883a 	mov	r7,r19
  806b28:	dd001d15 	stw	r20,116(sp)
  806b2c:	dc801f15 	stw	r18,124(sp)
  806b30:	dd401e15 	stw	r21,120(sp)
  806b34:	dcc02015 	stw	r19,128(sp)
  806b38:	08082100 	call	808210 <__adddf3>
  806b3c:	1823883a 	mov	r17,r3
  806b40:	01102434 	movhi	r4,16528
  806b44:	213fffc4 	addi	r4,r4,-1
  806b48:	1021883a 	mov	r16,r2
  806b4c:	182f883a 	mov	r23,r3
  806b50:	dc401815 	stw	r17,96(sp)
  806b54:	100b883a 	mov	r5,r2
  806b58:	20c02c0e 	bge	r4,r3,806c0c <__ieee754_pow+0xb44>
  806b5c:	00afdc34 	movhi	r2,49008
  806b60:	1885883a 	add	r2,r3,r2
  806b64:	2884b03a 	or	r2,r5,r2
  806b68:	1001a626 	beq	r2,zero,807204 <__ieee754_pow+0x113c>
  806b6c:	04220034 	movhi	r16,34816
  806b70:	841d6704 	addi	r16,r16,30108
  806b74:	045f8e34 	movhi	r17,32312
  806b78:	8c790f04 	addi	r17,r17,-7108
  806b7c:	d9401a17 	ldw	r5,104(sp)
  806b80:	d9001917 	ldw	r4,100(sp)
  806b84:	800d883a 	mov	r6,r16
  806b88:	880f883a 	mov	r7,r17
  806b8c:	08082840 	call	808284 <__muldf3>
  806b90:	180b883a 	mov	r5,r3
  806b94:	800d883a 	mov	r6,r16
  806b98:	880f883a 	mov	r7,r17
  806b9c:	1009883a 	mov	r4,r2
  806ba0:	08082840 	call	808284 <__muldf3>
  806ba4:	003dc306 	br	8062b4 <__ieee754_pow+0x1ec>
  806ba8:	00b00434 	movhi	r2,49168
  806bac:	9085883a 	add	r2,r18,r2
  806bb0:	e084b03a 	or	r2,fp,r2
  806bb4:	1000af1e 	bne	r2,zero,806e74 <__ieee754_pow+0xdac>
  806bb8:	480f883a 	mov	r7,r9
  806bbc:	4009883a 	mov	r4,r8
  806bc0:	480b883a 	mov	r5,r9
  806bc4:	400d883a 	mov	r6,r8
  806bc8:	003db406 	br	80629c <__ieee754_pow+0x1d4>
  806bcc:	00bffc34 	movhi	r2,65520
  806bd0:	18ff0084 	addi	r3,r3,-1022
  806bd4:	a0a9883a 	add	r20,r20,r2
  806bd8:	d8c00015 	stw	r3,0(sp)
  806bdc:	0009883a 	mov	r4,zero
  806be0:	04000234 	movhi	r16,8
  806be4:	003e1406 	br	806438 <__ieee754_pow+0x370>
  806be8:	a80f883a 	mov	r7,r21
  806bec:	a009883a 	mov	r4,r20
  806bf0:	a80b883a 	mov	r5,r21
  806bf4:	a00d883a 	mov	r6,r20
  806bf8:	08082840 	call	808284 <__muldf3>
  806bfc:	180b883a 	mov	r5,r3
  806c00:	d8802815 	stw	r2,160(sp)
  806c04:	d9402915 	stw	r5,164(sp)
  806c08:	003d5606 	br	806164 <__ieee754_pow+0x9c>
  806c0c:	d9001817 	ldw	r4,96(sp)
  806c10:	00a00034 	movhi	r2,32768
  806c14:	10bfffc4 	addi	r2,r2,-1
  806c18:	00d02474 	movhi	r3,16529
  806c1c:	18f2ffc4 	addi	r3,r3,-13313
  806c20:	20b8703a 	and	fp,r4,r2
  806c24:	1f009d0e 	bge	r3,fp,806e9c <__ieee754_pow+0xdd4>
  806c28:	008fdbf4 	movhi	r2,16239
  806c2c:	108d0004 	addi	r2,r2,13312
  806c30:	2085883a 	add	r2,r4,r2
  806c34:	1144b03a 	or	r2,r2,r5
  806c38:	1001c626 	beq	r2,zero,807354 <__ieee754_pow+0x128c>
  806c3c:	0430be74 	movhi	r16,49913
  806c40:	843cd644 	addi	r16,r16,-3239
  806c44:	04406974 	movhi	r17,421
  806c48:	8c5b87c4 	addi	r17,r17,28191
  806c4c:	003fcb06 	br	806b7c <__ieee754_pow+0xab4>
  806c50:	0005883a 	mov	r2,zero
  806c54:	00cffc34 	movhi	r3,16368
  806c58:	d8801915 	stw	r2,100(sp)
  806c5c:	d8c01a15 	stw	r3,104(sp)
  806c60:	003f8c06 	br	806a94 <__ieee754_pow+0x9cc>
  806c64:	0005883a 	mov	r2,zero
  806c68:	00cffc34 	movhi	r3,16368
  806c6c:	180b883a 	mov	r5,r3
  806c70:	580f883a 	mov	r7,r11
  806c74:	1009883a 	mov	r4,r2
  806c78:	500d883a 	mov	r6,r10
  806c7c:	08086480 	call	808648 <__divdf3>
  806c80:	1011883a 	mov	r8,r2
  806c84:	1813883a 	mov	r9,r3
  806c88:	003d9506 	br	8062e0 <__ieee754_pow+0x218>
  806c8c:	008ffc34 	movhi	r2,16368
  806c90:	10bfff84 	addi	r2,r2,-2
  806c94:	14bdbb0e 	bge	r2,r18,806384 <__ieee754_pow+0x2bc>
  806c98:	008ffc34 	movhi	r2,16368
  806c9c:	14bdae16 	blt	r2,r18,806358 <__ieee754_pow+0x290>
  806ca0:	580b883a 	mov	r5,r11
  806ca4:	5009883a 	mov	r4,r10
  806ca8:	000d883a 	mov	r6,zero
  806cac:	100f883a 	mov	r7,r2
  806cb0:	08081900 	call	808190 <__subdf3>
  806cb4:	1021883a 	mov	r16,r2
  806cb8:	1823883a 	mov	r17,r3
  806cbc:	00980034 	movhi	r2,24576
  806cc0:	00cffdf4 	movhi	r3,16375
  806cc4:	18c551c4 	addi	r3,r3,5447
  806cc8:	8009883a 	mov	r4,r16
  806ccc:	880b883a 	mov	r5,r17
  806cd0:	180f883a 	mov	r7,r3
  806cd4:	100d883a 	mov	r6,r2
  806cd8:	08082840 	call	808284 <__muldf3>
  806cdc:	023e17b4 	movhi	r8,63582
  806ce0:	4237d104 	addi	r8,r8,-8380
  806ce4:	024f9574 	movhi	r9,15957
  806ce8:	4a6b82c4 	addi	r9,r9,-20981
  806cec:	480f883a 	mov	r7,r9
  806cf0:	400d883a 	mov	r6,r8
  806cf4:	8009883a 	mov	r4,r16
  806cf8:	880b883a 	mov	r5,r17
  806cfc:	102d883a 	mov	r22,r2
  806d00:	182f883a 	mov	r23,r3
  806d04:	08082840 	call	808284 <__muldf3>
  806d08:	8009883a 	mov	r4,r16
  806d0c:	880b883a 	mov	r5,r17
  806d10:	800d883a 	mov	r6,r16
  806d14:	880f883a 	mov	r7,r17
  806d18:	d8802a15 	stw	r2,168(sp)
  806d1c:	d8c02b15 	stw	r3,172(sp)
  806d20:	08082840 	call	808284 <__muldf3>
  806d24:	0011883a 	mov	r8,zero
  806d28:	026ff434 	movhi	r9,49104
  806d2c:	480f883a 	mov	r7,r9
  806d30:	8009883a 	mov	r4,r16
  806d34:	880b883a 	mov	r5,r17
  806d38:	400d883a 	mov	r6,r8
  806d3c:	1029883a 	mov	r20,r2
  806d40:	182b883a 	mov	r21,r3
  806d44:	08082840 	call	808284 <__muldf3>
  806d48:	02155574 	movhi	r8,21845
  806d4c:	42155544 	addi	r8,r8,21845
  806d50:	024ff574 	movhi	r9,16341
  806d54:	4a555544 	addi	r9,r9,21845
  806d58:	480f883a 	mov	r7,r9
  806d5c:	400d883a 	mov	r6,r8
  806d60:	180b883a 	mov	r5,r3
  806d64:	1009883a 	mov	r4,r2
  806d68:	08082100 	call	808210 <__adddf3>
  806d6c:	180f883a 	mov	r7,r3
  806d70:	8009883a 	mov	r4,r16
  806d74:	880b883a 	mov	r5,r17
  806d78:	100d883a 	mov	r6,r2
  806d7c:	08082840 	call	808284 <__muldf3>
  806d80:	0011883a 	mov	r8,zero
  806d84:	024ff834 	movhi	r9,16352
  806d88:	480b883a 	mov	r5,r9
  806d8c:	4009883a 	mov	r4,r8
  806d90:	180f883a 	mov	r7,r3
  806d94:	100d883a 	mov	r6,r2
  806d98:	08081900 	call	808190 <__subdf3>
  806d9c:	180f883a 	mov	r7,r3
  806da0:	a80b883a 	mov	r5,r21
  806da4:	a009883a 	mov	r4,r20
  806da8:	100d883a 	mov	r6,r2
  806dac:	08082840 	call	808284 <__muldf3>
  806db0:	02194b34 	movhi	r8,25900
  806db4:	4220bf84 	addi	r8,r8,-32002
  806db8:	026ffdf4 	movhi	r9,49143
  806dbc:	4a4551c4 	addi	r9,r9,5447
  806dc0:	480f883a 	mov	r7,r9
  806dc4:	400d883a 	mov	r6,r8
  806dc8:	180b883a 	mov	r5,r3
  806dcc:	1009883a 	mov	r4,r2
  806dd0:	08082840 	call	808284 <__muldf3>
  806dd4:	d9402b17 	ldw	r5,172(sp)
  806dd8:	d9002a17 	ldw	r4,168(sp)
  806ddc:	180f883a 	mov	r7,r3
  806de0:	100d883a 	mov	r6,r2
  806de4:	08082100 	call	808210 <__adddf3>
  806de8:	100d883a 	mov	r6,r2
  806dec:	b009883a 	mov	r4,r22
  806df0:	b80b883a 	mov	r5,r23
  806df4:	180f883a 	mov	r7,r3
  806df8:	1021883a 	mov	r16,r2
  806dfc:	1823883a 	mov	r17,r3
  806e00:	08082100 	call	808210 <__adddf3>
  806e04:	180b883a 	mov	r5,r3
  806e08:	0009883a 	mov	r4,zero
  806e0c:	b00d883a 	mov	r6,r22
  806e10:	b80f883a 	mov	r7,r23
  806e14:	d9001b15 	stw	r4,108(sp)
  806e18:	d8c01c15 	stw	r3,112(sp)
  806e1c:	08081900 	call	808190 <__subdf3>
  806e20:	1011883a 	mov	r8,r2
  806e24:	1813883a 	mov	r9,r3
  806e28:	8009883a 	mov	r4,r16
  806e2c:	880b883a 	mov	r5,r17
  806e30:	003f0b06 	br	806a60 <__ieee754_pow+0x998>
  806e34:	0005883a 	mov	r2,zero
  806e38:	00d0d034 	movhi	r3,17216
  806e3c:	580b883a 	mov	r5,r11
  806e40:	5009883a 	mov	r4,r10
  806e44:	180f883a 	mov	r7,r3
  806e48:	100d883a 	mov	r6,r2
  806e4c:	08082840 	call	808284 <__muldf3>
  806e50:	1015883a 	mov	r10,r2
  806e54:	1825883a 	mov	r18,r3
  806e58:	017ff2c4 	movi	r5,-53
  806e5c:	003d6606 	br	8063f8 <__ieee754_pow+0x330>
  806e60:	b03d300e 	bge	r22,zero,806324 <__ieee754_pow+0x25c>
  806e64:	d9402917 	ldw	r5,164(sp)
  806e68:	28e0003c 	xorhi	r3,r5,32768
  806e6c:	d8c02915 	stw	r3,164(sp)
  806e70:	003cbc06 	br	806164 <__ieee754_pow+0x9c>
  806e74:	00800044 	movi	r2,1
  806e78:	e0bd1a1e 	bne	fp,r2,8062e4 <__ieee754_pow+0x21c>
  806e7c:	48e0003c 	xorhi	r3,r9,32768
  806e80:	da002815 	stw	r8,160(sp)
  806e84:	d8c02915 	stw	r3,164(sp)
  806e88:	003cb606 	br	806164 <__ieee754_pow+0x9c>
  806e8c:	d9001817 	ldw	r4,96(sp)
  806e90:	00a00034 	movhi	r2,32768
  806e94:	10bfffc4 	addi	r2,r2,-1
  806e98:	20b8703a 	and	fp,r4,r2
  806e9c:	008ff834 	movhi	r2,16352
  806ea0:	1700fc16 	blt	r2,fp,807294 <__ieee754_pow+0x11cc>
  806ea4:	0039883a 	mov	fp,zero
  806ea8:	d8001315 	stw	zero,76(sp)
  806eac:	0025883a 	mov	r18,zero
  806eb0:	0005883a 	mov	r2,zero
  806eb4:	00cff9b4 	movhi	r3,16358
  806eb8:	18cb90c4 	addi	r3,r3,11843
  806ebc:	9009883a 	mov	r4,r18
  806ec0:	b80b883a 	mov	r5,r23
  806ec4:	180f883a 	mov	r7,r3
  806ec8:	100d883a 	mov	r6,r2
  806ecc:	08082840 	call	808284 <__muldf3>
  806ed0:	d9c02017 	ldw	r7,128(sp)
  806ed4:	d9801f17 	ldw	r6,124(sp)
  806ed8:	9009883a 	mov	r4,r18
  806edc:	b80b883a 	mov	r5,r23
  806ee0:	b823883a 	mov	r17,r23
  806ee4:	102d883a 	mov	r22,r2
  806ee8:	182f883a 	mov	r23,r3
  806eec:	08081900 	call	808190 <__subdf3>
  806ef0:	d9401e17 	ldw	r5,120(sp)
  806ef4:	d9001d17 	ldw	r4,116(sp)
  806ef8:	180f883a 	mov	r7,r3
  806efc:	100d883a 	mov	r6,r2
  806f00:	08081900 	call	808190 <__subdf3>
  806f04:	023fbeb4 	movhi	r8,65274
  806f08:	420e7bc4 	addi	r8,r8,14831
  806f0c:	024ff9b4 	movhi	r9,16358
  806f10:	4a4b9084 	addi	r9,r9,11842
  806f14:	480f883a 	mov	r7,r9
  806f18:	400d883a 	mov	r6,r8
  806f1c:	180b883a 	mov	r5,r3
  806f20:	1009883a 	mov	r4,r2
  806f24:	08082840 	call	808284 <__muldf3>
  806f28:	02032a34 	movhi	r8,3240
  806f2c:	421b0e44 	addi	r8,r8,27705
  806f30:	026f8834 	movhi	r9,48672
  806f34:	4a571844 	addi	r9,r9,23649
  806f38:	480f883a 	mov	r7,r9
  806f3c:	400d883a 	mov	r6,r8
  806f40:	9009883a 	mov	r4,r18
  806f44:	880b883a 	mov	r5,r17
  806f48:	1021883a 	mov	r16,r2
  806f4c:	1823883a 	mov	r17,r3
  806f50:	08082840 	call	808284 <__muldf3>
  806f54:	180f883a 	mov	r7,r3
  806f58:	880b883a 	mov	r5,r17
  806f5c:	8009883a 	mov	r4,r16
  806f60:	100d883a 	mov	r6,r2
  806f64:	08082100 	call	808210 <__adddf3>
  806f68:	100d883a 	mov	r6,r2
  806f6c:	b009883a 	mov	r4,r22
  806f70:	b80b883a 	mov	r5,r23
  806f74:	180f883a 	mov	r7,r3
  806f78:	1021883a 	mov	r16,r2
  806f7c:	1823883a 	mov	r17,r3
  806f80:	08082100 	call	808210 <__adddf3>
  806f84:	1009883a 	mov	r4,r2
  806f88:	180b883a 	mov	r5,r3
  806f8c:	b00d883a 	mov	r6,r22
  806f90:	b80f883a 	mov	r7,r23
  806f94:	d8803915 	stw	r2,228(sp)
  806f98:	d8c03a15 	stw	r3,232(sp)
  806f9c:	d8801115 	stw	r2,68(sp)
  806fa0:	d8c01215 	stw	r3,72(sp)
  806fa4:	08081900 	call	808190 <__subdf3>
  806fa8:	180f883a 	mov	r7,r3
  806fac:	8009883a 	mov	r4,r16
  806fb0:	880b883a 	mov	r5,r17
  806fb4:	100d883a 	mov	r6,r2
  806fb8:	08081900 	call	808190 <__subdf3>
  806fbc:	d9001117 	ldw	r4,68(sp)
  806fc0:	d9403a17 	ldw	r5,232(sp)
  806fc4:	1029883a 	mov	r20,r2
  806fc8:	200d883a 	mov	r6,r4
  806fcc:	280f883a 	mov	r7,r5
  806fd0:	182b883a 	mov	r21,r3
  806fd4:	08082840 	call	808284 <__muldf3>
  806fd8:	1021883a 	mov	r16,r2
  806fdc:	1823883a 	mov	r17,r3
  806fe0:	009caff4 	movhi	r2,29375
  806fe4:	10a93404 	addi	r2,r2,-23344
  806fe8:	00cf99b4 	movhi	r3,15974
  806fec:	18cdda44 	addi	r3,r3,14185
  806ff0:	8009883a 	mov	r4,r16
  806ff4:	880b883a 	mov	r5,r17
  806ff8:	180f883a 	mov	r7,r3
  806ffc:	100d883a 	mov	r6,r2
  807000:	08082840 	call	808284 <__muldf3>
  807004:	023174b4 	movhi	r8,50642
  807008:	421afc44 	addi	r8,r8,27633
  80700c:	024faf34 	movhi	r9,16060
  807010:	4a6f5044 	addi	r9,r9,-17087
  807014:	480f883a 	mov	r7,r9
  807018:	400d883a 	mov	r6,r8
  80701c:	180b883a 	mov	r5,r3
  807020:	1009883a 	mov	r4,r2
  807024:	08081900 	call	808190 <__subdf3>
  807028:	180f883a 	mov	r7,r3
  80702c:	8009883a 	mov	r4,r16
  807030:	880b883a 	mov	r5,r17
  807034:	100d883a 	mov	r6,r2
  807038:	08082840 	call	808284 <__muldf3>
  80703c:	022bc9b4 	movhi	r8,44838
  807040:	42378b04 	addi	r8,r8,-8660
  807044:	024fc474 	movhi	r9,16145
  807048:	4a559a84 	addi	r9,r9,22122
  80704c:	480f883a 	mov	r7,r9
  807050:	400d883a 	mov	r6,r8
  807054:	180b883a 	mov	r5,r3
  807058:	1009883a 	mov	r4,r2
  80705c:	08082100 	call	808210 <__adddf3>
  807060:	180f883a 	mov	r7,r3
  807064:	8009883a 	mov	r4,r16
  807068:	880b883a 	mov	r5,r17
  80706c:	100d883a 	mov	r6,r2
  807070:	08082840 	call	808284 <__muldf3>
  807074:	0205aff4 	movhi	r8,5823
  807078:	422f64c4 	addi	r8,r8,-17005
  80707c:	024fd9f4 	movhi	r9,16231
  807080:	4a705b04 	addi	r9,r9,-16020
  807084:	480f883a 	mov	r7,r9
  807088:	400d883a 	mov	r6,r8
  80708c:	180b883a 	mov	r5,r3
  807090:	1009883a 	mov	r4,r2
  807094:	08081900 	call	808190 <__subdf3>
  807098:	180f883a 	mov	r7,r3
  80709c:	8009883a 	mov	r4,r16
  8070a0:	880b883a 	mov	r5,r17
  8070a4:	100d883a 	mov	r6,r2
  8070a8:	08082840 	call	808284 <__muldf3>
  8070ac:	02155574 	movhi	r8,21845
  8070b0:	42154f84 	addi	r8,r8,21822
  8070b4:	024ff174 	movhi	r9,16325
  8070b8:	4a555544 	addi	r9,r9,21845
  8070bc:	480f883a 	mov	r7,r9
  8070c0:	400d883a 	mov	r6,r8
  8070c4:	180b883a 	mov	r5,r3
  8070c8:	1009883a 	mov	r4,r2
  8070cc:	08082100 	call	808210 <__adddf3>
  8070d0:	180f883a 	mov	r7,r3
  8070d4:	8009883a 	mov	r4,r16
  8070d8:	880b883a 	mov	r5,r17
  8070dc:	100d883a 	mov	r6,r2
  8070e0:	08082840 	call	808284 <__muldf3>
  8070e4:	d9001117 	ldw	r4,68(sp)
  8070e8:	d9403a17 	ldw	r5,232(sp)
  8070ec:	180f883a 	mov	r7,r3
  8070f0:	100d883a 	mov	r6,r2
  8070f4:	08081900 	call	808190 <__subdf3>
  8070f8:	d9001117 	ldw	r4,68(sp)
  8070fc:	d9403a17 	ldw	r5,232(sp)
  807100:	100d883a 	mov	r6,r2
  807104:	180f883a 	mov	r7,r3
  807108:	1021883a 	mov	r16,r2
  80710c:	1823883a 	mov	r17,r3
  807110:	08082840 	call	808284 <__muldf3>
  807114:	0011883a 	mov	r8,zero
  807118:	02500034 	movhi	r9,16384
  80711c:	480f883a 	mov	r7,r9
  807120:	400d883a 	mov	r6,r8
  807124:	8009883a 	mov	r4,r16
  807128:	880b883a 	mov	r5,r17
  80712c:	1021883a 	mov	r16,r2
  807130:	1823883a 	mov	r17,r3
  807134:	08081900 	call	808190 <__subdf3>
  807138:	180f883a 	mov	r7,r3
  80713c:	880b883a 	mov	r5,r17
  807140:	8009883a 	mov	r4,r16
  807144:	100d883a 	mov	r6,r2
  807148:	08086480 	call	808648 <__divdf3>
  80714c:	d9001117 	ldw	r4,68(sp)
  807150:	d9403a17 	ldw	r5,232(sp)
  807154:	a00d883a 	mov	r6,r20
  807158:	a80f883a 	mov	r7,r21
  80715c:	1025883a 	mov	r18,r2
  807160:	1827883a 	mov	r19,r3
  807164:	08082840 	call	808284 <__muldf3>
  807168:	180f883a 	mov	r7,r3
  80716c:	a009883a 	mov	r4,r20
  807170:	a80b883a 	mov	r5,r21
  807174:	100d883a 	mov	r6,r2
  807178:	08082100 	call	808210 <__adddf3>
  80717c:	180f883a 	mov	r7,r3
  807180:	980b883a 	mov	r5,r19
  807184:	9009883a 	mov	r4,r18
  807188:	100d883a 	mov	r6,r2
  80718c:	08081900 	call	808190 <__subdf3>
  807190:	d9801117 	ldw	r6,68(sp)
  807194:	d9c03a17 	ldw	r7,232(sp)
  807198:	180b883a 	mov	r5,r3
  80719c:	1009883a 	mov	r4,r2
  8071a0:	08081900 	call	808190 <__subdf3>
  8071a4:	0011883a 	mov	r8,zero
  8071a8:	024ffc34 	movhi	r9,16368
  8071ac:	480b883a 	mov	r5,r9
  8071b0:	180f883a 	mov	r7,r3
  8071b4:	4009883a 	mov	r4,r8
  8071b8:	100d883a 	mov	r6,r2
  8071bc:	08081900 	call	808190 <__subdf3>
  8071c0:	100b883a 	mov	r5,r2
  8071c4:	d8801317 	ldw	r2,76(sp)
  8071c8:	10d5883a 	add	r10,r2,r3
  8071cc:	5005d53a 	srai	r2,r10,20
  8071d0:	0080720e 	bge	zero,r2,80739c <__ieee754_pow+0x12d4>
  8071d4:	2811883a 	mov	r8,r5
  8071d8:	5013883a 	mov	r9,r10
  8071dc:	d9c01a17 	ldw	r7,104(sp)
  8071e0:	d9801917 	ldw	r6,100(sp)
  8071e4:	480b883a 	mov	r5,r9
  8071e8:	4009883a 	mov	r4,r8
  8071ec:	003e8206 	br	806bf8 <__ieee754_pow+0xb30>
  8071f0:	0009883a 	mov	r4,zero
  8071f4:	800b883a 	mov	r5,r16
  8071f8:	a80f883a 	mov	r7,r21
  8071fc:	a00d883a 	mov	r6,r20
  807200:	003c2b06 	br	8062b0 <__ieee754_pow+0x1e8>
  807204:	d9001d17 	ldw	r4,116(sp)
  807208:	00994b34 	movhi	r2,25900
  80720c:	10a0bf84 	addi	r2,r2,-32002
  807210:	00cf25f4 	movhi	r3,15511
  807214:	18c551c4 	addi	r3,r3,5447
  807218:	a80b883a 	mov	r5,r21
  80721c:	180f883a 	mov	r7,r3
  807220:	100d883a 	mov	r6,r2
  807224:	08082100 	call	808210 <__adddf3>
  807228:	d9801f17 	ldw	r6,124(sp)
  80722c:	880b883a 	mov	r5,r17
  807230:	8009883a 	mov	r4,r16
  807234:	980f883a 	mov	r7,r19
  807238:	1021883a 	mov	r16,r2
  80723c:	1823883a 	mov	r17,r3
  807240:	08081900 	call	808190 <__subdf3>
  807244:	180f883a 	mov	r7,r3
  807248:	880b883a 	mov	r5,r17
  80724c:	8009883a 	mov	r4,r16
  807250:	100d883a 	mov	r6,r2
  807254:	08089b00 	call	8089b0 <__gtdf2>
  807258:	00bf0c0e 	bge	zero,r2,806e8c <__ieee754_pow+0xdc4>
  80725c:	04220034 	movhi	r16,34816
  807260:	841d6704 	addi	r16,r16,30108
  807264:	045f8e34 	movhi	r17,32312
  807268:	8c790f04 	addi	r17,r17,-7108
  80726c:	d9401a17 	ldw	r5,104(sp)
  807270:	d9001917 	ldw	r4,100(sp)
  807274:	800d883a 	mov	r6,r16
  807278:	880f883a 	mov	r7,r17
  80727c:	08082840 	call	808284 <__muldf3>
  807280:	180b883a 	mov	r5,r3
  807284:	800d883a 	mov	r6,r16
  807288:	880f883a 	mov	r7,r17
  80728c:	1009883a 	mov	r4,r2
  807290:	003e5906 	br	806bf8 <__ieee754_pow+0xb30>
  807294:	e005d53a 	srai	r2,fp,20
  807298:	01800434 	movhi	r6,16
  80729c:	d9401817 	ldw	r5,96(sp)
  8072a0:	10bf0084 	addi	r2,r2,-1022
  8072a4:	308dd83a 	sra	r6,r6,r2
  8072a8:	02000434 	movhi	r8,16
  8072ac:	423fffc4 	addi	r8,r8,-1
  8072b0:	0005883a 	mov	r2,zero
  8072b4:	298d883a 	add	r6,r5,r6
  8072b8:	318b883a 	add	r5,r6,r6
  8072bc:	320e703a 	and	r7,r6,r8
  8072c0:	1013883a 	mov	r9,r2
  8072c4:	280ad57a 	srli	r5,r5,21
  8072c8:	d8801817 	ldw	r2,96(sp)
  8072cc:	01000504 	movi	r4,20
  8072d0:	297f0044 	addi	r5,r5,-1023
  8072d4:	4151d83a 	sra	r8,r8,r5
  8072d8:	39c00434 	orhi	r7,r7,16
  8072dc:	2149c83a 	sub	r4,r4,r5
  8072e0:	0210303a 	nor	r8,zero,r8
  8072e4:	3939d83a 	sra	fp,r7,r4
  8072e8:	320e703a 	and	r7,r6,r8
  8072ec:	10002916 	blt	r2,zero,807394 <__ieee754_pow+0x12cc>
  8072f0:	d9402017 	ldw	r5,128(sp)
  8072f4:	d9001f17 	ldw	r4,124(sp)
  8072f8:	480d883a 	mov	r6,r9
  8072fc:	08081900 	call	808190 <__subdf3>
  807300:	180b883a 	mov	r5,r3
  807304:	d9402015 	stw	r5,128(sp)
  807308:	280f883a 	mov	r7,r5
  80730c:	d9001d17 	ldw	r4,116(sp)
  807310:	d9401e17 	ldw	r5,120(sp)
  807314:	1007883a 	mov	r3,r2
  807318:	180d883a 	mov	r6,r3
  80731c:	d8801f15 	stw	r2,124(sp)
  807320:	08082100 	call	808210 <__adddf3>
  807324:	180b883a 	mov	r5,r3
  807328:	e006953a 	slli	r3,fp,20
  80732c:	282f883a 	mov	r23,r5
  807330:	d8c01315 	stw	r3,76(sp)
  807334:	003edd06 	br	806eac <__ieee754_pow+0xde4>
  807338:	383bc81e 	bne	r7,zero,80625c <__ieee754_pow+0x194>
  80733c:	28c5c83a 	sub	r2,r5,r3
  807340:	8087d83a 	sra	r3,r16,r2
  807344:	1884983a 	sll	r2,r3,r2
  807348:	80801b26 	beq	r16,r2,8073b8 <__ieee754_pow+0x12f0>
  80734c:	0039883a 	mov	fp,zero
  807350:	003b9d06 	br	8061c8 <__ieee754_pow+0x100>
  807354:	d9801f17 	ldw	r6,124(sp)
  807358:	8009883a 	mov	r4,r16
  80735c:	880b883a 	mov	r5,r17
  807360:	980f883a 	mov	r7,r19
  807364:	08081900 	call	808190 <__subdf3>
  807368:	d9001d17 	ldw	r4,116(sp)
  80736c:	a80b883a 	mov	r5,r21
  807370:	180f883a 	mov	r7,r3
  807374:	100d883a 	mov	r6,r2
  807378:	0808ac00 	call	808ac0 <__ledf2>
  80737c:	00bfc516 	blt	zero,r2,807294 <__ieee754_pow+0x11cc>
  807380:	0430be74 	movhi	r16,49913
  807384:	843cd644 	addi	r16,r16,-3239
  807388:	04406974 	movhi	r17,421
  80738c:	8c5b87c4 	addi	r17,r17,28191
  807390:	003fb606 	br	80726c <__ieee754_pow+0x11a4>
  807394:	0739c83a 	sub	fp,zero,fp
  807398:	003fd506 	br	8072f0 <__ieee754_pow+0x1228>
  80739c:	2809883a 	mov	r4,r5
  8073a0:	e00d883a 	mov	r6,fp
  8073a4:	180b883a 	mov	r5,r3
  8073a8:	080791c0 	call	80791c <scalbn>
  8073ac:	1011883a 	mov	r8,r2
  8073b0:	1813883a 	mov	r9,r3
  8073b4:	003f8906 	br	8071dc <__ieee754_pow+0x1114>
  8073b8:	18c0004c 	andi	r3,r3,1
  8073bc:	00800084 	movi	r2,2
  8073c0:	10f9c83a 	sub	fp,r2,r3
  8073c4:	003b8006 	br	8061c8 <__ieee754_pow+0x100>

008073c8 <__ieee754_sqrt>:
  8073c8:	defffd04 	addi	sp,sp,-12
  8073cc:	dc000015 	stw	r16,0(sp)
  8073d0:	009ffc34 	movhi	r2,32752
  8073d4:	2021883a 	mov	r16,r4
  8073d8:	291ffc2c 	andhi	r4,r5,32752
  8073dc:	dc400115 	stw	r17,4(sp)
  8073e0:	dfc00215 	stw	ra,8(sp)
  8073e4:	2823883a 	mov	r17,r5
  8073e8:	280f883a 	mov	r7,r5
  8073ec:	2807883a 	mov	r3,r5
  8073f0:	8011883a 	mov	r8,r16
  8073f4:	20807d26 	beq	r4,r2,8075ec <__ieee754_sqrt+0x224>
  8073f8:	01408d0e 	bge	zero,r5,807630 <__ieee754_sqrt+0x268>
  8073fc:	380dd53a 	srai	r6,r7,20
  807400:	3000131e 	bne	r6,zero,807450 <__ieee754_sqrt+0x88>
  807404:	1800041e 	bne	r3,zero,807418 <__ieee754_sqrt+0x50>
  807408:	400ed2fa 	srli	r7,r8,11
  80740c:	31bffac4 	addi	r6,r6,-21
  807410:	4010957a 	slli	r8,r8,21
  807414:	383ffc26 	beq	r7,zero,807408 <__ieee754_sqrt+0x40>
  807418:	3880042c 	andhi	r2,r7,16
  80741c:	1000991e 	bne	r2,zero,807684 <__ieee754_sqrt+0x2bc>
  807420:	0009883a 	mov	r4,zero
  807424:	39cf883a 	add	r7,r7,r7
  807428:	3880042c 	andhi	r2,r7,16
  80742c:	21000044 	addi	r4,r4,1
  807430:	103ffc26 	beq	r2,zero,807424 <__ieee754_sqrt+0x5c>
  807434:	00800804 	movi	r2,32
  807438:	1105c83a 	sub	r2,r2,r4
  80743c:	4086d83a 	srl	r3,r8,r2
  807440:	4110983a 	sll	r8,r8,r4
  807444:	3105c83a 	sub	r2,r6,r4
  807448:	38ceb03a 	or	r7,r7,r3
  80744c:	11800044 	addi	r6,r2,1
  807450:	31bf0044 	addi	r6,r6,-1023
  807454:	30c0004c 	andi	r3,r6,1
  807458:	00800434 	movhi	r2,16
  80745c:	10bfffc4 	addi	r2,r2,-1
  807460:	3884703a 	and	r2,r7,r2
  807464:	1807003a 	cmpeq	r3,r3,zero
  807468:	11000434 	orhi	r4,r2,16
  80746c:	18005426 	beq	r3,zero,8075c0 <__ieee754_sqrt+0x1f8>
  807470:	4004d7fa 	srli	r2,r8,31
  807474:	4207883a 	add	r3,r8,r8
  807478:	02800834 	movhi	r10,32
  80747c:	1105883a 	add	r2,r2,r4
  807480:	2089883a 	add	r4,r4,r2
  807484:	0011883a 	mov	r8,zero
  807488:	000b883a 	mov	r5,zero
  80748c:	0013883a 	mov	r9,zero
  807490:	02c00584 	movi	r11,22
  807494:	520f883a 	add	r7,r10,r8
  807498:	1804d7fa 	srli	r2,r3,31
  80749c:	4a400044 	addi	r9,r9,1
  8074a0:	18c7883a 	add	r3,r3,r3
  8074a4:	21c00316 	blt	r4,r7,8074b4 <__ieee754_sqrt+0xec>
  8074a8:	21c9c83a 	sub	r4,r4,r7
  8074ac:	2a8b883a 	add	r5,r5,r10
  8074b0:	51d1883a 	add	r8,r10,r7
  8074b4:	1105883a 	add	r2,r2,r4
  8074b8:	5014d07a 	srli	r10,r10,1
  8074bc:	2089883a 	add	r4,r4,r2
  8074c0:	4afff41e 	bne	r9,r11,807494 <__ieee754_sqrt+0xcc>
  8074c4:	02600034 	movhi	r9,32768
  8074c8:	0017883a 	mov	r11,zero
  8074cc:	0019883a 	mov	r12,zero
  8074d0:	0015883a 	mov	r10,zero
  8074d4:	4821883a 	mov	r16,r9
  8074d8:	03c00804 	movi	r15,32
  8074dc:	00000806 	br	807500 <__ieee754_sqrt+0x138>
  8074e0:	22003426 	beq	r4,r8,8075b4 <__ieee754_sqrt+0x1ec>
  8074e4:	1804d7fa 	srli	r2,r3,31
  8074e8:	52800044 	addi	r10,r10,1
  8074ec:	18c7883a 	add	r3,r3,r3
  8074f0:	1105883a 	add	r2,r2,r4
  8074f4:	2089883a 	add	r4,r4,r2
  8074f8:	4812d07a 	srli	r9,r9,1
  8074fc:	53c01326 	beq	r10,r15,80754c <__ieee754_sqrt+0x184>
  807500:	4acf883a 	add	r7,r9,r11
  807504:	413ff60e 	bge	r8,r4,8074e0 <__ieee754_sqrt+0x118>
  807508:	38a0002c 	andhi	r2,r7,32768
  80750c:	3a57883a 	add	r11,r7,r9
  807510:	14002426 	beq	r2,r16,8075a4 <__ieee754_sqrt+0x1dc>
  807514:	4005883a 	mov	r2,r8
  807518:	2209c83a 	sub	r4,r4,r8
  80751c:	19c0012e 	bgeu	r3,r7,807524 <__ieee754_sqrt+0x15c>
  807520:	213fffc4 	addi	r4,r4,-1
  807524:	19c7c83a 	sub	r3,r3,r7
  807528:	1011883a 	mov	r8,r2
  80752c:	1804d7fa 	srli	r2,r3,31
  807530:	52800044 	addi	r10,r10,1
  807534:	6259883a 	add	r12,r12,r9
  807538:	1105883a 	add	r2,r2,r4
  80753c:	18c7883a 	add	r3,r3,r3
  807540:	2089883a 	add	r4,r4,r2
  807544:	4812d07a 	srli	r9,r9,1
  807548:	53ffed1e 	bne	r10,r15,807500 <__ieee754_sqrt+0x138>
  80754c:	20c4b03a 	or	r2,r4,r3
  807550:	1000201e 	bne	r2,zero,8075d4 <__ieee754_sqrt+0x20c>
  807554:	600ed07a 	srli	r7,r12,1
  807558:	2880004c 	andi	r2,r5,1
  80755c:	1005003a 	cmpeq	r2,r2,zero
  807560:	1000011e 	bne	r2,zero,807568 <__ieee754_sqrt+0x1a0>
  807564:	39e00034 	orhi	r7,r7,32768
  807568:	300dd07a 	srai	r6,r6,1
  80756c:	280bd07a 	srai	r5,r5,1
  807570:	010ff834 	movhi	r4,16352
  807574:	300c953a 	slli	r6,r6,20
  807578:	290b883a 	add	r5,r5,r4
  80757c:	3821883a 	mov	r16,r7
  807580:	299d883a 	add	r14,r5,r6
  807584:	7023883a 	mov	r17,r14
  807588:	8005883a 	mov	r2,r16
  80758c:	8807883a 	mov	r3,r17
  807590:	dfc00217 	ldw	ra,8(sp)
  807594:	dc400117 	ldw	r17,4(sp)
  807598:	dc000017 	ldw	r16,0(sp)
  80759c:	dec00304 	addi	sp,sp,12
  8075a0:	f800283a 	ret
  8075a4:	5884703a 	and	r2,r11,r2
  8075a8:	103fda1e 	bne	r2,zero,807514 <__ieee754_sqrt+0x14c>
  8075ac:	40800044 	addi	r2,r8,1
  8075b0:	003fd906 	br	807518 <__ieee754_sqrt+0x150>
  8075b4:	19ffd42e 	bgeu	r3,r7,807508 <__ieee754_sqrt+0x140>
  8075b8:	2011883a 	mov	r8,r4
  8075bc:	003fc906 	br	8074e4 <__ieee754_sqrt+0x11c>
  8075c0:	4004d7fa 	srli	r2,r8,31
  8075c4:	4211883a 	add	r8,r8,r8
  8075c8:	1105883a 	add	r2,r2,r4
  8075cc:	2089883a 	add	r4,r4,r2
  8075d0:	003fa706 	br	807470 <__ieee754_sqrt+0xa8>
  8075d4:	00bfffc4 	movi	r2,-1
  8075d8:	60802726 	beq	r12,r2,807678 <__ieee754_sqrt+0x2b0>
  8075dc:	6080004c 	andi	r2,r12,1
  8075e0:	6085883a 	add	r2,r12,r2
  8075e4:	100ed07a 	srli	r7,r2,1
  8075e8:	003fdb06 	br	807558 <__ieee754_sqrt+0x190>
  8075ec:	8009883a 	mov	r4,r16
  8075f0:	800d883a 	mov	r6,r16
  8075f4:	08082840 	call	808284 <__muldf3>
  8075f8:	180f883a 	mov	r7,r3
  8075fc:	880b883a 	mov	r5,r17
  807600:	8009883a 	mov	r4,r16
  807604:	100d883a 	mov	r6,r2
  807608:	08082100 	call	808210 <__adddf3>
  80760c:	1021883a 	mov	r16,r2
  807610:	1823883a 	mov	r17,r3
  807614:	8005883a 	mov	r2,r16
  807618:	8807883a 	mov	r3,r17
  80761c:	dfc00217 	ldw	ra,8(sp)
  807620:	dc400117 	ldw	r17,4(sp)
  807624:	dc000017 	ldw	r16,0(sp)
  807628:	dec00304 	addi	sp,sp,12
  80762c:	f800283a 	ret
  807630:	00a00034 	movhi	r2,32768
  807634:	10bfffc4 	addi	r2,r2,-1
  807638:	2884703a 	and	r2,r5,r2
  80763c:	8084b03a 	or	r2,r16,r2
  807640:	103fd126 	beq	r2,zero,807588 <__ieee754_sqrt+0x1c0>
  807644:	283f6d26 	beq	r5,zero,8073fc <__ieee754_sqrt+0x34>
  807648:	280f883a 	mov	r7,r5
  80764c:	8009883a 	mov	r4,r16
  807650:	800d883a 	mov	r6,r16
  807654:	08081900 	call	808190 <__subdf3>
  807658:	1009883a 	mov	r4,r2
  80765c:	180b883a 	mov	r5,r3
  807660:	100d883a 	mov	r6,r2
  807664:	180f883a 	mov	r7,r3
  807668:	08086480 	call	808648 <__divdf3>
  80766c:	1021883a 	mov	r16,r2
  807670:	1823883a 	mov	r17,r3
  807674:	003fc406 	br	807588 <__ieee754_sqrt+0x1c0>
  807678:	29400044 	addi	r5,r5,1
  80767c:	000f883a 	mov	r7,zero
  807680:	003fb506 	br	807558 <__ieee754_sqrt+0x190>
  807684:	0009883a 	mov	r4,zero
  807688:	00800804 	movi	r2,32
  80768c:	003f6b06 	br	80743c <__ieee754_sqrt+0x74>

00807690 <fabs>:
  807690:	01e00034 	movhi	r7,32768
  807694:	39ffffc4 	addi	r7,r7,-1
  807698:	394e703a 	and	r7,r7,r5
  80769c:	2005883a 	mov	r2,r4
  8076a0:	3807883a 	mov	r3,r7
  8076a4:	f800283a 	ret

008076a8 <finite>:
  8076a8:	00a00034 	movhi	r2,32768
  8076ac:	10bfffc4 	addi	r2,r2,-1
  8076b0:	2884703a 	and	r2,r5,r2
  8076b4:	01600434 	movhi	r5,32784
  8076b8:	1145883a 	add	r2,r2,r5
  8076bc:	1004d7fa 	srli	r2,r2,31
  8076c0:	f800283a 	ret

008076c4 <__isnand>:
  8076c4:	200d883a 	mov	r6,r4
  8076c8:	0109c83a 	sub	r4,zero,r4
  8076cc:	2188b03a 	or	r4,r4,r6
  8076d0:	2008d7fa 	srli	r4,r4,31
  8076d4:	00a00034 	movhi	r2,32768
  8076d8:	10bfffc4 	addi	r2,r2,-1
  8076dc:	1144703a 	and	r2,r2,r5
  8076e0:	2088b03a 	or	r4,r4,r2
  8076e4:	009ffc34 	movhi	r2,32752
  8076e8:	1105c83a 	sub	r2,r2,r4
  8076ec:	1004d7fa 	srli	r2,r2,31
  8076f0:	f800283a 	ret

008076f4 <matherr>:
  8076f4:	0005883a 	mov	r2,zero
  8076f8:	f800283a 	ret

008076fc <nan>:
  8076fc:	015ffe34 	movhi	r5,32760
  807700:	0005883a 	mov	r2,zero
  807704:	2807883a 	mov	r3,r5
  807708:	f800283a 	ret

0080770c <rint>:
  80770c:	2015883a 	mov	r10,r4
  807710:	2809d53a 	srai	r4,r5,20
  807714:	defff904 	addi	sp,sp,-28
  807718:	034004c4 	movi	r13,19
  80771c:	2101ffcc 	andi	r4,r4,2047
  807720:	227f0044 	addi	r9,r4,-1023
  807724:	dc800415 	stw	r18,16(sp)
  807728:	dfc00615 	stw	ra,24(sp)
  80772c:	dcc00515 	stw	r19,20(sp)
  807730:	dc400315 	stw	r17,12(sp)
  807734:	dc000215 	stw	r16,8(sp)
  807738:	2817883a 	mov	r11,r5
  80773c:	500d883a 	mov	r6,r10
  807740:	2824d7fa 	srli	r18,r5,31
  807744:	6a403016 	blt	r13,r9,807808 <rint+0xfc>
  807748:	48004916 	blt	r9,zero,807870 <rint+0x164>
  80774c:	00800434 	movhi	r2,16
  807750:	10bfffc4 	addi	r2,r2,-1
  807754:	1247d83a 	sra	r3,r2,r9
  807758:	2809883a 	mov	r4,r5
  80775c:	1944703a 	and	r2,r3,r5
  807760:	5084b03a 	or	r2,r10,r2
  807764:	10001f26 	beq	r2,zero,8077e4 <rint+0xd8>
  807768:	180ad07a 	srli	r5,r3,1
  80776c:	5944703a 	and	r2,r11,r5
  807770:	5084b03a 	or	r2,r10,r2
  807774:	10000626 	beq	r2,zero,807790 <rint+0x84>
  807778:	4b406626 	beq	r9,r13,807914 <rint+0x208>
  80777c:	00c000b4 	movhi	r3,2
  807780:	1a47d83a 	sra	r3,r3,r9
  807784:	0144303a 	nor	r2,zero,r5
  807788:	5884703a 	and	r2,r11,r2
  80778c:	10c8b03a 	or	r4,r2,r3
  807790:	900690fa 	slli	r3,r18,3
  807794:	008020b4 	movhi	r2,130
  807798:	10b1d104 	addi	r2,r2,-14524
  80779c:	200f883a 	mov	r7,r4
  8077a0:	1887883a 	add	r3,r3,r2
  8077a4:	1c000017 	ldw	r16,0(r3)
  8077a8:	1c400117 	ldw	r17,4(r3)
  8077ac:	8009883a 	mov	r4,r16
  8077b0:	880b883a 	mov	r5,r17
  8077b4:	08082100 	call	808210 <__adddf3>
  8077b8:	d8800015 	stw	r2,0(sp)
  8077bc:	d8c00115 	stw	r3,4(sp)
  8077c0:	d8800017 	ldw	r2,0(sp)
  8077c4:	d8c00117 	ldw	r3,4(sp)
  8077c8:	880f883a 	mov	r7,r17
  8077cc:	800d883a 	mov	r6,r16
  8077d0:	180b883a 	mov	r5,r3
  8077d4:	1009883a 	mov	r4,r2
  8077d8:	08081900 	call	808190 <__subdf3>
  8077dc:	1015883a 	mov	r10,r2
  8077e0:	1817883a 	mov	r11,r3
  8077e4:	5005883a 	mov	r2,r10
  8077e8:	5807883a 	mov	r3,r11
  8077ec:	dfc00617 	ldw	ra,24(sp)
  8077f0:	dcc00517 	ldw	r19,20(sp)
  8077f4:	dc800417 	ldw	r18,16(sp)
  8077f8:	dc400317 	ldw	r17,12(sp)
  8077fc:	dc000217 	ldw	r16,8(sp)
  807800:	dec00704 	addi	sp,sp,28
  807804:	f800283a 	ret
  807808:	00800cc4 	movi	r2,51
  80780c:	12400f16 	blt	r2,r9,80784c <rint+0x140>
  807810:	213efb44 	addi	r4,r4,-1043
  807814:	00bfffc4 	movi	r2,-1
  807818:	1104d83a 	srl	r2,r2,r4
  80781c:	5086703a 	and	r3,r10,r2
  807820:	183ff026 	beq	r3,zero,8077e4 <rint+0xd8>
  807824:	100ad07a 	srli	r5,r2,1
  807828:	5144703a 	and	r2,r10,r5
  80782c:	10000526 	beq	r2,zero,807844 <rint+0x138>
  807830:	00d00034 	movhi	r3,16384
  807834:	1907d83a 	sra	r3,r3,r4
  807838:	0144303a 	nor	r2,zero,r5
  80783c:	5084703a 	and	r2,r10,r2
  807840:	10ccb03a 	or	r6,r2,r3
  807844:	5809883a 	mov	r4,r11
  807848:	003fd106 	br	807790 <rint+0x84>
  80784c:	00810004 	movi	r2,1024
  807850:	48bfe41e 	bne	r9,r2,8077e4 <rint+0xd8>
  807854:	5009883a 	mov	r4,r10
  807858:	500d883a 	mov	r6,r10
  80785c:	280f883a 	mov	r7,r5
  807860:	08082100 	call	808210 <__adddf3>
  807864:	1015883a 	mov	r10,r2
  807868:	1817883a 	mov	r11,r3
  80786c:	003fdd06 	br	8077e4 <rint+0xd8>
  807870:	04e00034 	movhi	r19,32768
  807874:	9cffffc4 	addi	r19,r19,-1
  807878:	2cc4703a 	and	r2,r5,r19
  80787c:	5084b03a 	or	r2,r10,r2
  807880:	103fd826 	beq	r2,zero,8077e4 <rint+0xd8>
  807884:	00c00434 	movhi	r3,16
  807888:	18ffffc4 	addi	r3,r3,-1
  80788c:	28c6703a 	and	r3,r5,r3
  807890:	50c6b03a 	or	r3,r10,r3
  807894:	00cdc83a 	sub	r6,zero,r3
  807898:	900a90fa 	slli	r5,r18,3
  80789c:	1986b03a 	or	r3,r3,r6
  8078a0:	010020b4 	movhi	r4,130
  8078a4:	2131d104 	addi	r4,r4,-14524
  8078a8:	1806d33a 	srli	r3,r3,12
  8078ac:	290b883a 	add	r5,r5,r4
  8078b0:	2c000017 	ldw	r16,0(r5)
  8078b4:	2c400117 	ldw	r17,4(r5)
  8078b8:	593fffac 	andhi	r4,r11,65534
  8078bc:	18c0022c 	andhi	r3,r3,8
  8078c0:	1906b03a 	or	r3,r3,r4
  8078c4:	500d883a 	mov	r6,r10
  8078c8:	180f883a 	mov	r7,r3
  8078cc:	8009883a 	mov	r4,r16
  8078d0:	880b883a 	mov	r5,r17
  8078d4:	08082100 	call	808210 <__adddf3>
  8078d8:	d8800015 	stw	r2,0(sp)
  8078dc:	d8c00115 	stw	r3,4(sp)
  8078e0:	d8800017 	ldw	r2,0(sp)
  8078e4:	d8c00117 	ldw	r3,4(sp)
  8078e8:	880f883a 	mov	r7,r17
  8078ec:	800d883a 	mov	r6,r16
  8078f0:	180b883a 	mov	r5,r3
  8078f4:	1009883a 	mov	r4,r2
  8078f8:	08081900 	call	808190 <__subdf3>
  8078fc:	901297fa 	slli	r9,r18,31
  807900:	98d0703a 	and	r8,r19,r3
  807904:	1015883a 	mov	r10,r2
  807908:	4250b03a 	or	r8,r8,r9
  80790c:	4017883a 	mov	r11,r8
  807910:	003fb406 	br	8077e4 <rint+0xd8>
  807914:	01900034 	movhi	r6,16384
  807918:	003f9d06 	br	807790 <rint+0x84>

0080791c <scalbn>:
  80791c:	2011883a 	mov	r8,r4
  807920:	291ffc2c 	andhi	r4,r5,32752
  807924:	2009d53a 	srai	r4,r4,20
  807928:	defffd04 	addi	sp,sp,-12
  80792c:	dc000015 	stw	r16,0(sp)
  807930:	dfc00215 	stw	ra,8(sp)
  807934:	dc400115 	stw	r17,4(sp)
  807938:	2813883a 	mov	r9,r5
  80793c:	2815883a 	mov	r10,r5
  807940:	3021883a 	mov	r16,r6
  807944:	2000281e 	bne	r4,zero,8079e8 <scalbn+0xcc>
  807948:	00a00034 	movhi	r2,32768
  80794c:	10bfffc4 	addi	r2,r2,-1
  807950:	2884703a 	and	r2,r5,r2
  807954:	4084b03a 	or	r2,r8,r2
  807958:	10001826 	beq	r2,zero,8079bc <scalbn+0xa0>
  80795c:	0005883a 	mov	r2,zero
  807960:	00d0d434 	movhi	r3,17232
  807964:	4009883a 	mov	r4,r8
  807968:	100d883a 	mov	r6,r2
  80796c:	180f883a 	mov	r7,r3
  807970:	08082840 	call	808284 <__muldf3>
  807974:	100b883a 	mov	r5,r2
  807978:	1011883a 	mov	r8,r2
  80797c:	00bffff4 	movhi	r2,65535
  807980:	108f2c04 	addi	r2,r2,15536
  807984:	180d883a 	mov	r6,r3
  807988:	1813883a 	mov	r9,r3
  80798c:	8080120e 	bge	r16,r2,8079d8 <scalbn+0xbc>
  807990:	00b0be74 	movhi	r2,49913
  807994:	10bcd644 	addi	r2,r2,-3239
  807998:	00c06974 	movhi	r3,421
  80799c:	18db87c4 	addi	r3,r3,28191
  8079a0:	2809883a 	mov	r4,r5
  8079a4:	180f883a 	mov	r7,r3
  8079a8:	300b883a 	mov	r5,r6
  8079ac:	100d883a 	mov	r6,r2
  8079b0:	08082840 	call	808284 <__muldf3>
  8079b4:	1011883a 	mov	r8,r2
  8079b8:	1813883a 	mov	r9,r3
  8079bc:	4005883a 	mov	r2,r8
  8079c0:	4807883a 	mov	r3,r9
  8079c4:	dfc00217 	ldw	ra,8(sp)
  8079c8:	dc400117 	ldw	r17,4(sp)
  8079cc:	dc000017 	ldw	r16,0(sp)
  8079d0:	dec00304 	addi	sp,sp,12
  8079d4:	f800283a 	ret
  8079d8:	189ffc2c 	andhi	r2,r3,32752
  8079dc:	1005d53a 	srai	r2,r2,20
  8079e0:	1815883a 	mov	r10,r3
  8079e4:	113ff284 	addi	r4,r2,-54
  8079e8:	0081ffc4 	movi	r2,2047
  8079ec:	20801126 	beq	r4,r2,807a34 <scalbn+0x118>
  8079f0:	2409883a 	add	r4,r4,r16
  8079f4:	0081ff84 	movi	r2,2046
  8079f8:	11001c16 	blt	r2,r4,807a6c <scalbn+0x150>
  8079fc:	0100290e 	bge	zero,r4,807aa4 <scalbn+0x188>
  807a00:	200a953a 	slli	r5,r4,20
  807a04:	01200434 	movhi	r4,32784
  807a08:	213fffc4 	addi	r4,r4,-1
  807a0c:	5108703a 	and	r4,r10,r4
  807a10:	2148b03a 	or	r4,r4,r5
  807a14:	2013883a 	mov	r9,r4
  807a18:	4005883a 	mov	r2,r8
  807a1c:	4807883a 	mov	r3,r9
  807a20:	dfc00217 	ldw	ra,8(sp)
  807a24:	dc400117 	ldw	r17,4(sp)
  807a28:	dc000017 	ldw	r16,0(sp)
  807a2c:	dec00304 	addi	sp,sp,12
  807a30:	f800283a 	ret
  807a34:	480f883a 	mov	r7,r9
  807a38:	4009883a 	mov	r4,r8
  807a3c:	480b883a 	mov	r5,r9
  807a40:	400d883a 	mov	r6,r8
  807a44:	08082100 	call	808210 <__adddf3>
  807a48:	1011883a 	mov	r8,r2
  807a4c:	1813883a 	mov	r9,r3
  807a50:	4005883a 	mov	r2,r8
  807a54:	4807883a 	mov	r3,r9
  807a58:	dfc00217 	ldw	ra,8(sp)
  807a5c:	dc400117 	ldw	r17,4(sp)
  807a60:	dc000017 	ldw	r16,0(sp)
  807a64:	dec00304 	addi	sp,sp,12
  807a68:	f800283a 	ret
  807a6c:	04220034 	movhi	r16,34816
  807a70:	841d6704 	addi	r16,r16,30108
  807a74:	045f8e34 	movhi	r17,32312
  807a78:	8c790f04 	addi	r17,r17,-7108
  807a7c:	480f883a 	mov	r7,r9
  807a80:	400d883a 	mov	r6,r8
  807a84:	8009883a 	mov	r4,r16
  807a88:	880b883a 	mov	r5,r17
  807a8c:	0807afc0 	call	807afc <copysign>
  807a90:	180b883a 	mov	r5,r3
  807a94:	800d883a 	mov	r6,r16
  807a98:	880f883a 	mov	r7,r17
  807a9c:	1009883a 	mov	r4,r2
  807aa0:	003fc306 	br	8079b0 <scalbn+0x94>
  807aa4:	00bff284 	movi	r2,-54
  807aa8:	11000716 	blt	r2,r4,807ac8 <scalbn+0x1ac>
  807aac:	00b0d414 	movui	r2,50000
  807ab0:	143fee16 	blt	r2,r16,807a6c <scalbn+0x150>
  807ab4:	0430be74 	movhi	r16,49913
  807ab8:	843cd644 	addi	r16,r16,-3239
  807abc:	04406974 	movhi	r17,421
  807ac0:	8c5b87c4 	addi	r17,r17,28191
  807ac4:	003fed06 	br	807a7c <scalbn+0x160>
  807ac8:	21000d84 	addi	r4,r4,54
  807acc:	2008953a 	slli	r4,r4,20
  807ad0:	01e00434 	movhi	r7,32784
  807ad4:	39ffffc4 	addi	r7,r7,-1
  807ad8:	51ce703a 	and	r7,r10,r7
  807adc:	390eb03a 	or	r7,r7,r4
  807ae0:	024f2434 	movhi	r9,15504
  807ae4:	4009883a 	mov	r4,r8
  807ae8:	0011883a 	mov	r8,zero
  807aec:	380b883a 	mov	r5,r7
  807af0:	400d883a 	mov	r6,r8
  807af4:	480f883a 	mov	r7,r9
  807af8:	003fad06 	br	8079b0 <scalbn+0x94>

00807afc <copysign>:
  807afc:	3813883a 	mov	r9,r7
  807b00:	01e00034 	movhi	r7,32768
  807b04:	39ffffc4 	addi	r7,r7,-1
  807b08:	394e703a 	and	r7,r7,r5
  807b0c:	4aa0002c 	andhi	r10,r9,32768
  807b10:	3a8eb03a 	or	r7,r7,r10
  807b14:	2005883a 	mov	r2,r4
  807b18:	3807883a 	mov	r3,r7
  807b1c:	f800283a 	ret

00807b20 <__divsf3>:
  807b20:	defff304 	addi	sp,sp,-52
  807b24:	dc400b15 	stw	r17,44(sp)
  807b28:	dc400204 	addi	r17,sp,8
  807b2c:	dc000a15 	stw	r16,40(sp)
  807b30:	d9000015 	stw	r4,0(sp)
  807b34:	d9400115 	stw	r5,4(sp)
  807b38:	d809883a 	mov	r4,sp
  807b3c:	880b883a 	mov	r5,r17
  807b40:	dc000604 	addi	r16,sp,24
  807b44:	dfc00c15 	stw	ra,48(sp)
  807b48:	08091140 	call	809114 <__unpack_f>
  807b4c:	d9000104 	addi	r4,sp,4
  807b50:	800b883a 	mov	r5,r16
  807b54:	08091140 	call	809114 <__unpack_f>
  807b58:	d9000217 	ldw	r4,8(sp)
  807b5c:	00800044 	movi	r2,1
  807b60:	01800104 	movi	r6,4
  807b64:	11000a2e 	bgeu	r2,r4,807b90 <__divsf3+0x70>
  807b68:	d9400617 	ldw	r5,24(sp)
  807b6c:	1140432e 	bgeu	r2,r5,807c7c <__divsf3+0x15c>
  807b70:	d8800317 	ldw	r2,12(sp)
  807b74:	d8c00717 	ldw	r3,28(sp)
  807b78:	10c4f03a 	xor	r2,r2,r3
  807b7c:	d8800315 	stw	r2,12(sp)
  807b80:	21800226 	beq	r4,r6,807b8c <__divsf3+0x6c>
  807b84:	00800084 	movi	r2,2
  807b88:	2080101e 	bne	r4,r2,807bcc <__divsf3+0xac>
  807b8c:	29000726 	beq	r5,r4,807bac <__divsf3+0x8c>
  807b90:	8809883a 	mov	r4,r17
  807b94:	0808fb40 	call	808fb4 <__pack_f>
  807b98:	dfc00c17 	ldw	ra,48(sp)
  807b9c:	dc400b17 	ldw	r17,44(sp)
  807ba0:	dc000a17 	ldw	r16,40(sp)
  807ba4:	dec00d04 	addi	sp,sp,52
  807ba8:	f800283a 	ret
  807bac:	010020b4 	movhi	r4,130
  807bb0:	2131d504 	addi	r4,r4,-14508
  807bb4:	0808fb40 	call	808fb4 <__pack_f>
  807bb8:	dfc00c17 	ldw	ra,48(sp)
  807bbc:	dc400b17 	ldw	r17,44(sp)
  807bc0:	dc000a17 	ldw	r16,40(sp)
  807bc4:	dec00d04 	addi	sp,sp,52
  807bc8:	f800283a 	ret
  807bcc:	29802d26 	beq	r5,r6,807c84 <__divsf3+0x164>
  807bd0:	28801a26 	beq	r5,r2,807c3c <__divsf3+0x11c>
  807bd4:	d8c00417 	ldw	r3,16(sp)
  807bd8:	d8800817 	ldw	r2,32(sp)
  807bdc:	d9000517 	ldw	r4,20(sp)
  807be0:	d9800917 	ldw	r6,36(sp)
  807be4:	1885c83a 	sub	r2,r3,r2
  807be8:	d8800415 	stw	r2,16(sp)
  807bec:	2180032e 	bgeu	r4,r6,807bfc <__divsf3+0xdc>
  807bf0:	10bfffc4 	addi	r2,r2,-1
  807bf4:	d8800415 	stw	r2,16(sp)
  807bf8:	2109883a 	add	r4,r4,r4
  807bfc:	01500034 	movhi	r5,16384
  807c00:	0007883a 	mov	r3,zero
  807c04:	0005883a 	mov	r2,zero
  807c08:	01c007c4 	movi	r7,31
  807c0c:	10800044 	addi	r2,r2,1
  807c10:	21800236 	bltu	r4,r6,807c1c <__divsf3+0xfc>
  807c14:	1946b03a 	or	r3,r3,r5
  807c18:	2189c83a 	sub	r4,r4,r6
  807c1c:	280ad07a 	srli	r5,r5,1
  807c20:	2109883a 	add	r4,r4,r4
  807c24:	11fff91e 	bne	r2,r7,807c0c <__divsf3+0xec>
  807c28:	19401fcc 	andi	r5,r3,127
  807c2c:	00801004 	movi	r2,64
  807c30:	28800a26 	beq	r5,r2,807c5c <__divsf3+0x13c>
  807c34:	d8c00515 	stw	r3,20(sp)
  807c38:	003fd506 	br	807b90 <__divsf3+0x70>
  807c3c:	8809883a 	mov	r4,r17
  807c40:	d9800215 	stw	r6,8(sp)
  807c44:	0808fb40 	call	808fb4 <__pack_f>
  807c48:	dfc00c17 	ldw	ra,48(sp)
  807c4c:	dc400b17 	ldw	r17,44(sp)
  807c50:	dc000a17 	ldw	r16,40(sp)
  807c54:	dec00d04 	addi	sp,sp,52
  807c58:	f800283a 	ret
  807c5c:	1880200c 	andi	r2,r3,128
  807c60:	103ff41e 	bne	r2,zero,807c34 <__divsf3+0x114>
  807c64:	203ff326 	beq	r4,zero,807c34 <__divsf3+0x114>
  807c68:	1947883a 	add	r3,r3,r5
  807c6c:	00bfe004 	movi	r2,-128
  807c70:	1886703a 	and	r3,r3,r2
  807c74:	d8c00515 	stw	r3,20(sp)
  807c78:	003fc506 	br	807b90 <__divsf3+0x70>
  807c7c:	8009883a 	mov	r4,r16
  807c80:	003fc406 	br	807b94 <__divsf3+0x74>
  807c84:	8809883a 	mov	r4,r17
  807c88:	d8000515 	stw	zero,20(sp)
  807c8c:	d8000415 	stw	zero,16(sp)
  807c90:	003fc006 	br	807b94 <__divsf3+0x74>

00807c94 <__floatsisf>:
  807c94:	2006d7fa 	srli	r3,r4,31
  807c98:	defffa04 	addi	sp,sp,-24
  807c9c:	008000c4 	movi	r2,3
  807ca0:	dfc00515 	stw	ra,20(sp)
  807ca4:	dc000415 	stw	r16,16(sp)
  807ca8:	d8800015 	stw	r2,0(sp)
  807cac:	d8c00115 	stw	r3,4(sp)
  807cb0:	2000081e 	bne	r4,zero,807cd4 <__floatsisf+0x40>
  807cb4:	00800084 	movi	r2,2
  807cb8:	d8800015 	stw	r2,0(sp)
  807cbc:	d809883a 	mov	r4,sp
  807cc0:	0808fb40 	call	808fb4 <__pack_f>
  807cc4:	dfc00517 	ldw	ra,20(sp)
  807cc8:	dc000417 	ldw	r16,16(sp)
  807ccc:	dec00604 	addi	sp,sp,24
  807cd0:	f800283a 	ret
  807cd4:	00800784 	movi	r2,30
  807cd8:	1807003a 	cmpeq	r3,r3,zero
  807cdc:	d8800215 	stw	r2,8(sp)
  807ce0:	18000e1e 	bne	r3,zero,807d1c <__floatsisf+0x88>
  807ce4:	00a00034 	movhi	r2,32768
  807ce8:	20800e26 	beq	r4,r2,807d24 <__floatsisf+0x90>
  807cec:	0121c83a 	sub	r16,zero,r4
  807cf0:	8009883a 	mov	r4,r16
  807cf4:	dc000315 	stw	r16,12(sp)
  807cf8:	0808f340 	call	808f34 <__clzsi2>
  807cfc:	117fffc4 	addi	r5,r2,-1
  807d00:	017fee0e 	bge	zero,r5,807cbc <__floatsisf+0x28>
  807d04:	d8800217 	ldw	r2,8(sp)
  807d08:	8146983a 	sll	r3,r16,r5
  807d0c:	1145c83a 	sub	r2,r2,r5
  807d10:	d8c00315 	stw	r3,12(sp)
  807d14:	d8800215 	stw	r2,8(sp)
  807d18:	003fe806 	br	807cbc <__floatsisf+0x28>
  807d1c:	2021883a 	mov	r16,r4
  807d20:	003ff306 	br	807cf0 <__floatsisf+0x5c>
  807d24:	00b3c034 	movhi	r2,52992
  807d28:	003fe606 	br	807cc4 <__floatsisf+0x30>

00807d2c <__extendsfdf2>:
  807d2c:	defff904 	addi	sp,sp,-28
  807d30:	d9000115 	stw	r4,4(sp)
  807d34:	d9400204 	addi	r5,sp,8
  807d38:	d9000104 	addi	r4,sp,4
  807d3c:	dfc00615 	stw	ra,24(sp)
  807d40:	08091140 	call	809114 <__unpack_f>
  807d44:	d9c00517 	ldw	r7,20(sp)
  807d48:	0011883a 	mov	r8,zero
  807d4c:	400697ba 	slli	r3,r8,30
  807d50:	3812d0ba 	srli	r9,r7,2
  807d54:	380497ba 	slli	r2,r7,30
  807d58:	d9000217 	ldw	r4,8(sp)
  807d5c:	d9400317 	ldw	r5,12(sp)
  807d60:	d9800417 	ldw	r6,16(sp)
  807d64:	48c6b03a 	or	r3,r9,r3
  807d68:	100f883a 	mov	r7,r2
  807d6c:	d8c00015 	stw	r3,0(sp)
  807d70:	0808d180 	call	808d18 <__make_dp>
  807d74:	dfc00617 	ldw	ra,24(sp)
  807d78:	dec00704 	addi	sp,sp,28
  807d7c:	f800283a 	ret

00807d80 <_fpadd_parts>:
  807d80:	defff804 	addi	sp,sp,-32
  807d84:	dcc00315 	stw	r19,12(sp)
  807d88:	2027883a 	mov	r19,r4
  807d8c:	21000017 	ldw	r4,0(r4)
  807d90:	00c00044 	movi	r3,1
  807d94:	dd400515 	stw	r21,20(sp)
  807d98:	dd000415 	stw	r20,16(sp)
  807d9c:	ddc00715 	stw	r23,28(sp)
  807da0:	dd800615 	stw	r22,24(sp)
  807da4:	dc800215 	stw	r18,8(sp)
  807da8:	dc400115 	stw	r17,4(sp)
  807dac:	dc000015 	stw	r16,0(sp)
  807db0:	282b883a 	mov	r21,r5
  807db4:	3029883a 	mov	r20,r6
  807db8:	1900632e 	bgeu	r3,r4,807f48 <_fpadd_parts+0x1c8>
  807dbc:	28800017 	ldw	r2,0(r5)
  807dc0:	1880812e 	bgeu	r3,r2,807fc8 <_fpadd_parts+0x248>
  807dc4:	00c00104 	movi	r3,4
  807dc8:	20c0dc26 	beq	r4,r3,80813c <_fpadd_parts+0x3bc>
  807dcc:	10c07e26 	beq	r2,r3,807fc8 <_fpadd_parts+0x248>
  807dd0:	00c00084 	movi	r3,2
  807dd4:	10c06726 	beq	r2,r3,807f74 <_fpadd_parts+0x1f4>
  807dd8:	20c07b26 	beq	r4,r3,807fc8 <_fpadd_parts+0x248>
  807ddc:	9dc00217 	ldw	r23,8(r19)
  807de0:	28c00217 	ldw	r3,8(r5)
  807de4:	9c400317 	ldw	r17,12(r19)
  807de8:	2bc00317 	ldw	r15,12(r5)
  807dec:	b8cdc83a 	sub	r6,r23,r3
  807df0:	9c800417 	ldw	r18,16(r19)
  807df4:	2c000417 	ldw	r16,16(r5)
  807df8:	3009883a 	mov	r4,r6
  807dfc:	30009716 	blt	r6,zero,80805c <_fpadd_parts+0x2dc>
  807e00:	00800fc4 	movi	r2,63
  807e04:	11806b16 	blt	r2,r6,807fb4 <_fpadd_parts+0x234>
  807e08:	0100a40e 	bge	zero,r4,80809c <_fpadd_parts+0x31c>
  807e0c:	35bff804 	addi	r22,r6,-32
  807e10:	b000bc16 	blt	r22,zero,808104 <_fpadd_parts+0x384>
  807e14:	8596d83a 	srl	r11,r16,r22
  807e18:	0019883a 	mov	r12,zero
  807e1c:	0013883a 	mov	r9,zero
  807e20:	01000044 	movi	r4,1
  807e24:	0015883a 	mov	r10,zero
  807e28:	b000be16 	blt	r22,zero,808124 <_fpadd_parts+0x3a4>
  807e2c:	2590983a 	sll	r8,r4,r22
  807e30:	000f883a 	mov	r7,zero
  807e34:	00bfffc4 	movi	r2,-1
  807e38:	3889883a 	add	r4,r7,r2
  807e3c:	408b883a 	add	r5,r8,r2
  807e40:	21cd803a 	cmpltu	r6,r4,r7
  807e44:	314b883a 	add	r5,r6,r5
  807e48:	7904703a 	and	r2,r15,r4
  807e4c:	8146703a 	and	r3,r16,r5
  807e50:	10c4b03a 	or	r2,r2,r3
  807e54:	10000226 	beq	r2,zero,807e60 <_fpadd_parts+0xe0>
  807e58:	02400044 	movi	r9,1
  807e5c:	0015883a 	mov	r10,zero
  807e60:	5a5eb03a 	or	r15,r11,r9
  807e64:	62a0b03a 	or	r16,r12,r10
  807e68:	99400117 	ldw	r5,4(r19)
  807e6c:	a8800117 	ldw	r2,4(r21)
  807e70:	28806e26 	beq	r5,r2,80802c <_fpadd_parts+0x2ac>
  807e74:	28006626 	beq	r5,zero,808010 <_fpadd_parts+0x290>
  807e78:	7c45c83a 	sub	r2,r15,r17
  807e7c:	7889803a 	cmpltu	r4,r15,r2
  807e80:	8487c83a 	sub	r3,r16,r18
  807e84:	1909c83a 	sub	r4,r3,r4
  807e88:	100d883a 	mov	r6,r2
  807e8c:	200f883a 	mov	r7,r4
  807e90:	38007716 	blt	r7,zero,808070 <_fpadd_parts+0x2f0>
  807e94:	a5c00215 	stw	r23,8(r20)
  807e98:	a1c00415 	stw	r7,16(r20)
  807e9c:	a0000115 	stw	zero,4(r20)
  807ea0:	a1800315 	stw	r6,12(r20)
  807ea4:	a2000317 	ldw	r8,12(r20)
  807ea8:	a2400417 	ldw	r9,16(r20)
  807eac:	00bfffc4 	movi	r2,-1
  807eb0:	408b883a 	add	r5,r8,r2
  807eb4:	2a09803a 	cmpltu	r4,r5,r8
  807eb8:	488d883a 	add	r6,r9,r2
  807ebc:	01c40034 	movhi	r7,4096
  807ec0:	39ffffc4 	addi	r7,r7,-1
  807ec4:	218d883a 	add	r6,r4,r6
  807ec8:	39801736 	bltu	r7,r6,807f28 <_fpadd_parts+0x1a8>
  807ecc:	31c06526 	beq	r6,r7,808064 <_fpadd_parts+0x2e4>
  807ed0:	a3000217 	ldw	r12,8(r20)
  807ed4:	4209883a 	add	r4,r8,r8
  807ed8:	00bfffc4 	movi	r2,-1
  807edc:	220f803a 	cmpltu	r7,r4,r8
  807ee0:	4a4b883a 	add	r5,r9,r9
  807ee4:	394f883a 	add	r7,r7,r5
  807ee8:	2095883a 	add	r10,r4,r2
  807eec:	3897883a 	add	r11,r7,r2
  807ef0:	510d803a 	cmpltu	r6,r10,r4
  807ef4:	6099883a 	add	r12,r12,r2
  807ef8:	32d7883a 	add	r11,r6,r11
  807efc:	00840034 	movhi	r2,4096
  807f00:	10bfffc4 	addi	r2,r2,-1
  807f04:	2011883a 	mov	r8,r4
  807f08:	3813883a 	mov	r9,r7
  807f0c:	a1000315 	stw	r4,12(r20)
  807f10:	a1c00415 	stw	r7,16(r20)
  807f14:	a3000215 	stw	r12,8(r20)
  807f18:	12c00336 	bltu	r2,r11,807f28 <_fpadd_parts+0x1a8>
  807f1c:	58bfed1e 	bne	r11,r2,807ed4 <_fpadd_parts+0x154>
  807f20:	00bfff84 	movi	r2,-2
  807f24:	12bfeb2e 	bgeu	r2,r10,807ed4 <_fpadd_parts+0x154>
  807f28:	a2800417 	ldw	r10,16(r20)
  807f2c:	008000c4 	movi	r2,3
  807f30:	00c80034 	movhi	r3,8192
  807f34:	18ffffc4 	addi	r3,r3,-1
  807f38:	a2400317 	ldw	r9,12(r20)
  807f3c:	a0800015 	stw	r2,0(r20)
  807f40:	1a802336 	bltu	r3,r10,807fd0 <_fpadd_parts+0x250>
  807f44:	a027883a 	mov	r19,r20
  807f48:	9805883a 	mov	r2,r19
  807f4c:	ddc00717 	ldw	r23,28(sp)
  807f50:	dd800617 	ldw	r22,24(sp)
  807f54:	dd400517 	ldw	r21,20(sp)
  807f58:	dd000417 	ldw	r20,16(sp)
  807f5c:	dcc00317 	ldw	r19,12(sp)
  807f60:	dc800217 	ldw	r18,8(sp)
  807f64:	dc400117 	ldw	r17,4(sp)
  807f68:	dc000017 	ldw	r16,0(sp)
  807f6c:	dec00804 	addi	sp,sp,32
  807f70:	f800283a 	ret
  807f74:	20fff41e 	bne	r4,r3,807f48 <_fpadd_parts+0x1c8>
  807f78:	31000015 	stw	r4,0(r6)
  807f7c:	98800117 	ldw	r2,4(r19)
  807f80:	30800115 	stw	r2,4(r6)
  807f84:	98c00217 	ldw	r3,8(r19)
  807f88:	30c00215 	stw	r3,8(r6)
  807f8c:	98800317 	ldw	r2,12(r19)
  807f90:	30800315 	stw	r2,12(r6)
  807f94:	98c00417 	ldw	r3,16(r19)
  807f98:	30c00415 	stw	r3,16(r6)
  807f9c:	98800117 	ldw	r2,4(r19)
  807fa0:	28c00117 	ldw	r3,4(r5)
  807fa4:	3027883a 	mov	r19,r6
  807fa8:	10c4703a 	and	r2,r2,r3
  807fac:	30800115 	stw	r2,4(r6)
  807fb0:	003fe506 	br	807f48 <_fpadd_parts+0x1c8>
  807fb4:	1dc02616 	blt	r3,r23,808050 <_fpadd_parts+0x2d0>
  807fb8:	0023883a 	mov	r17,zero
  807fbc:	182f883a 	mov	r23,r3
  807fc0:	0025883a 	mov	r18,zero
  807fc4:	003fa806 	br	807e68 <_fpadd_parts+0xe8>
  807fc8:	a827883a 	mov	r19,r21
  807fcc:	003fde06 	br	807f48 <_fpadd_parts+0x1c8>
  807fd0:	01800044 	movi	r6,1
  807fd4:	500497fa 	slli	r2,r10,31
  807fd8:	4808d07a 	srli	r4,r9,1
  807fdc:	518ad83a 	srl	r5,r10,r6
  807fe0:	a2000217 	ldw	r8,8(r20)
  807fe4:	1108b03a 	or	r4,r2,r4
  807fe8:	0007883a 	mov	r3,zero
  807fec:	4984703a 	and	r2,r9,r6
  807ff0:	208cb03a 	or	r6,r4,r2
  807ff4:	28ceb03a 	or	r7,r5,r3
  807ff8:	42000044 	addi	r8,r8,1
  807ffc:	a027883a 	mov	r19,r20
  808000:	a1c00415 	stw	r7,16(r20)
  808004:	a2000215 	stw	r8,8(r20)
  808008:	a1800315 	stw	r6,12(r20)
  80800c:	003fce06 	br	807f48 <_fpadd_parts+0x1c8>
  808010:	8bc5c83a 	sub	r2,r17,r15
  808014:	8889803a 	cmpltu	r4,r17,r2
  808018:	9407c83a 	sub	r3,r18,r16
  80801c:	1909c83a 	sub	r4,r3,r4
  808020:	100d883a 	mov	r6,r2
  808024:	200f883a 	mov	r7,r4
  808028:	003f9906 	br	807e90 <_fpadd_parts+0x110>
  80802c:	7c45883a 	add	r2,r15,r17
  808030:	13c9803a 	cmpltu	r4,r2,r15
  808034:	8487883a 	add	r3,r16,r18
  808038:	20c9883a 	add	r4,r4,r3
  80803c:	a1400115 	stw	r5,4(r20)
  808040:	a5c00215 	stw	r23,8(r20)
  808044:	a0800315 	stw	r2,12(r20)
  808048:	a1000415 	stw	r4,16(r20)
  80804c:	003fb606 	br	807f28 <_fpadd_parts+0x1a8>
  808050:	001f883a 	mov	r15,zero
  808054:	0021883a 	mov	r16,zero
  808058:	003f8306 	br	807e68 <_fpadd_parts+0xe8>
  80805c:	018dc83a 	sub	r6,zero,r6
  808060:	003f6706 	br	807e00 <_fpadd_parts+0x80>
  808064:	00bfff84 	movi	r2,-2
  808068:	117faf36 	bltu	r2,r5,807f28 <_fpadd_parts+0x1a8>
  80806c:	003f9806 	br	807ed0 <_fpadd_parts+0x150>
  808070:	0005883a 	mov	r2,zero
  808074:	1189c83a 	sub	r4,r2,r6
  808078:	1105803a 	cmpltu	r2,r2,r4
  80807c:	01cbc83a 	sub	r5,zero,r7
  808080:	2885c83a 	sub	r2,r5,r2
  808084:	01800044 	movi	r6,1
  808088:	a1800115 	stw	r6,4(r20)
  80808c:	a5c00215 	stw	r23,8(r20)
  808090:	a1000315 	stw	r4,12(r20)
  808094:	a0800415 	stw	r2,16(r20)
  808098:	003f8206 	br	807ea4 <_fpadd_parts+0x124>
  80809c:	203f7226 	beq	r4,zero,807e68 <_fpadd_parts+0xe8>
  8080a0:	35bff804 	addi	r22,r6,-32
  8080a4:	b9af883a 	add	r23,r23,r6
  8080a8:	b0003116 	blt	r22,zero,808170 <_fpadd_parts+0x3f0>
  8080ac:	959ad83a 	srl	r13,r18,r22
  8080b0:	001d883a 	mov	r14,zero
  8080b4:	000f883a 	mov	r7,zero
  8080b8:	01000044 	movi	r4,1
  8080bc:	0011883a 	mov	r8,zero
  8080c0:	b0002516 	blt	r22,zero,808158 <_fpadd_parts+0x3d8>
  8080c4:	2594983a 	sll	r10,r4,r22
  8080c8:	0013883a 	mov	r9,zero
  8080cc:	00bfffc4 	movi	r2,-1
  8080d0:	4889883a 	add	r4,r9,r2
  8080d4:	508b883a 	add	r5,r10,r2
  8080d8:	224d803a 	cmpltu	r6,r4,r9
  8080dc:	314b883a 	add	r5,r6,r5
  8080e0:	8904703a 	and	r2,r17,r4
  8080e4:	9146703a 	and	r3,r18,r5
  8080e8:	10c4b03a 	or	r2,r2,r3
  8080ec:	10000226 	beq	r2,zero,8080f8 <_fpadd_parts+0x378>
  8080f0:	01c00044 	movi	r7,1
  8080f4:	0011883a 	mov	r8,zero
  8080f8:	69e2b03a 	or	r17,r13,r7
  8080fc:	7224b03a 	or	r18,r14,r8
  808100:	003f5906 	br	807e68 <_fpadd_parts+0xe8>
  808104:	8407883a 	add	r3,r16,r16
  808108:	008007c4 	movi	r2,31
  80810c:	1185c83a 	sub	r2,r2,r6
  808110:	1886983a 	sll	r3,r3,r2
  808114:	7996d83a 	srl	r11,r15,r6
  808118:	8198d83a 	srl	r12,r16,r6
  80811c:	1ad6b03a 	or	r11,r3,r11
  808120:	003f3e06 	br	807e1c <_fpadd_parts+0x9c>
  808124:	2006d07a 	srli	r3,r4,1
  808128:	008007c4 	movi	r2,31
  80812c:	1185c83a 	sub	r2,r2,r6
  808130:	1890d83a 	srl	r8,r3,r2
  808134:	218e983a 	sll	r7,r4,r6
  808138:	003f3e06 	br	807e34 <_fpadd_parts+0xb4>
  80813c:	113f821e 	bne	r2,r4,807f48 <_fpadd_parts+0x1c8>
  808140:	28c00117 	ldw	r3,4(r5)
  808144:	98800117 	ldw	r2,4(r19)
  808148:	10ff7f26 	beq	r2,r3,807f48 <_fpadd_parts+0x1c8>
  80814c:	04c020b4 	movhi	r19,130
  808150:	9cf1d904 	addi	r19,r19,-14492
  808154:	003f7c06 	br	807f48 <_fpadd_parts+0x1c8>
  808158:	2006d07a 	srli	r3,r4,1
  80815c:	008007c4 	movi	r2,31
  808160:	1185c83a 	sub	r2,r2,r6
  808164:	1894d83a 	srl	r10,r3,r2
  808168:	2192983a 	sll	r9,r4,r6
  80816c:	003fd706 	br	8080cc <_fpadd_parts+0x34c>
  808170:	9487883a 	add	r3,r18,r18
  808174:	008007c4 	movi	r2,31
  808178:	1185c83a 	sub	r2,r2,r6
  80817c:	1886983a 	sll	r3,r3,r2
  808180:	899ad83a 	srl	r13,r17,r6
  808184:	919cd83a 	srl	r14,r18,r6
  808188:	1b5ab03a 	or	r13,r3,r13
  80818c:	003fc906 	br	8080b4 <_fpadd_parts+0x334>

00808190 <__subdf3>:
  808190:	deffea04 	addi	sp,sp,-88
  808194:	dcc01415 	stw	r19,80(sp)
  808198:	dcc00404 	addi	r19,sp,16
  80819c:	2011883a 	mov	r8,r4
  8081a0:	2813883a 	mov	r9,r5
  8081a4:	dc401315 	stw	r17,76(sp)
  8081a8:	d809883a 	mov	r4,sp
  8081ac:	980b883a 	mov	r5,r19
  8081b0:	dc400904 	addi	r17,sp,36
  8081b4:	dfc01515 	stw	ra,84(sp)
  8081b8:	da400115 	stw	r9,4(sp)
  8081bc:	d9c00315 	stw	r7,12(sp)
  8081c0:	da000015 	stw	r8,0(sp)
  8081c4:	d9800215 	stw	r6,8(sp)
  8081c8:	08094f00 	call	8094f0 <__unpack_d>
  8081cc:	d9000204 	addi	r4,sp,8
  8081d0:	880b883a 	mov	r5,r17
  8081d4:	08094f00 	call	8094f0 <__unpack_d>
  8081d8:	d8800a17 	ldw	r2,40(sp)
  8081dc:	880b883a 	mov	r5,r17
  8081e0:	9809883a 	mov	r4,r19
  8081e4:	d9800e04 	addi	r6,sp,56
  8081e8:	1080005c 	xori	r2,r2,1
  8081ec:	d8800a15 	stw	r2,40(sp)
  8081f0:	0807d800 	call	807d80 <_fpadd_parts>
  8081f4:	1009883a 	mov	r4,r2
  8081f8:	08091dc0 	call	8091dc <__pack_d>
  8081fc:	dfc01517 	ldw	ra,84(sp)
  808200:	dcc01417 	ldw	r19,80(sp)
  808204:	dc401317 	ldw	r17,76(sp)
  808208:	dec01604 	addi	sp,sp,88
  80820c:	f800283a 	ret

00808210 <__adddf3>:
  808210:	deffea04 	addi	sp,sp,-88
  808214:	dcc01415 	stw	r19,80(sp)
  808218:	dcc00404 	addi	r19,sp,16
  80821c:	2011883a 	mov	r8,r4
  808220:	2813883a 	mov	r9,r5
  808224:	dc401315 	stw	r17,76(sp)
  808228:	d809883a 	mov	r4,sp
  80822c:	980b883a 	mov	r5,r19
  808230:	dc400904 	addi	r17,sp,36
  808234:	dfc01515 	stw	ra,84(sp)
  808238:	da400115 	stw	r9,4(sp)
  80823c:	d9c00315 	stw	r7,12(sp)
  808240:	da000015 	stw	r8,0(sp)
  808244:	d9800215 	stw	r6,8(sp)
  808248:	08094f00 	call	8094f0 <__unpack_d>
  80824c:	d9000204 	addi	r4,sp,8
  808250:	880b883a 	mov	r5,r17
  808254:	08094f00 	call	8094f0 <__unpack_d>
  808258:	d9800e04 	addi	r6,sp,56
  80825c:	9809883a 	mov	r4,r19
  808260:	880b883a 	mov	r5,r17
  808264:	0807d800 	call	807d80 <_fpadd_parts>
  808268:	1009883a 	mov	r4,r2
  80826c:	08091dc0 	call	8091dc <__pack_d>
  808270:	dfc01517 	ldw	ra,84(sp)
  808274:	dcc01417 	ldw	r19,80(sp)
  808278:	dc401317 	ldw	r17,76(sp)
  80827c:	dec01604 	addi	sp,sp,88
  808280:	f800283a 	ret

00808284 <__muldf3>:
  808284:	deffe004 	addi	sp,sp,-128
  808288:	dc401815 	stw	r17,96(sp)
  80828c:	dc400404 	addi	r17,sp,16
  808290:	2011883a 	mov	r8,r4
  808294:	2813883a 	mov	r9,r5
  808298:	dc001715 	stw	r16,92(sp)
  80829c:	d809883a 	mov	r4,sp
  8082a0:	880b883a 	mov	r5,r17
  8082a4:	dc000904 	addi	r16,sp,36
  8082a8:	dfc01f15 	stw	ra,124(sp)
  8082ac:	da400115 	stw	r9,4(sp)
  8082b0:	d9c00315 	stw	r7,12(sp)
  8082b4:	da000015 	stw	r8,0(sp)
  8082b8:	d9800215 	stw	r6,8(sp)
  8082bc:	ddc01e15 	stw	r23,120(sp)
  8082c0:	dd801d15 	stw	r22,116(sp)
  8082c4:	dd401c15 	stw	r21,112(sp)
  8082c8:	dd001b15 	stw	r20,108(sp)
  8082cc:	dcc01a15 	stw	r19,104(sp)
  8082d0:	dc801915 	stw	r18,100(sp)
  8082d4:	08094f00 	call	8094f0 <__unpack_d>
  8082d8:	d9000204 	addi	r4,sp,8
  8082dc:	800b883a 	mov	r5,r16
  8082e0:	08094f00 	call	8094f0 <__unpack_d>
  8082e4:	d9000417 	ldw	r4,16(sp)
  8082e8:	00800044 	movi	r2,1
  8082ec:	1100102e 	bgeu	r2,r4,808330 <__muldf3+0xac>
  8082f0:	d8c00917 	ldw	r3,36(sp)
  8082f4:	10c0062e 	bgeu	r2,r3,808310 <__muldf3+0x8c>
  8082f8:	00800104 	movi	r2,4
  8082fc:	20800a26 	beq	r4,r2,808328 <__muldf3+0xa4>
  808300:	1880cc26 	beq	r3,r2,808634 <__muldf3+0x3b0>
  808304:	00800084 	movi	r2,2
  808308:	20800926 	beq	r4,r2,808330 <__muldf3+0xac>
  80830c:	1880191e 	bne	r3,r2,808374 <__muldf3+0xf0>
  808310:	d8c00a17 	ldw	r3,40(sp)
  808314:	d8800517 	ldw	r2,20(sp)
  808318:	8009883a 	mov	r4,r16
  80831c:	10c4c03a 	cmpne	r2,r2,r3
  808320:	d8800a15 	stw	r2,40(sp)
  808324:	00000706 	br	808344 <__muldf3+0xc0>
  808328:	00800084 	movi	r2,2
  80832c:	1880c326 	beq	r3,r2,80863c <__muldf3+0x3b8>
  808330:	d8800517 	ldw	r2,20(sp)
  808334:	d8c00a17 	ldw	r3,40(sp)
  808338:	8809883a 	mov	r4,r17
  80833c:	10c4c03a 	cmpne	r2,r2,r3
  808340:	d8800515 	stw	r2,20(sp)
  808344:	08091dc0 	call	8091dc <__pack_d>
  808348:	dfc01f17 	ldw	ra,124(sp)
  80834c:	ddc01e17 	ldw	r23,120(sp)
  808350:	dd801d17 	ldw	r22,116(sp)
  808354:	dd401c17 	ldw	r21,112(sp)
  808358:	dd001b17 	ldw	r20,108(sp)
  80835c:	dcc01a17 	ldw	r19,104(sp)
  808360:	dc801917 	ldw	r18,100(sp)
  808364:	dc401817 	ldw	r17,96(sp)
  808368:	dc001717 	ldw	r16,92(sp)
  80836c:	dec02004 	addi	sp,sp,128
  808370:	f800283a 	ret
  808374:	dd800717 	ldw	r22,28(sp)
  808378:	dc800c17 	ldw	r18,48(sp)
  80837c:	002b883a 	mov	r21,zero
  808380:	0023883a 	mov	r17,zero
  808384:	a80b883a 	mov	r5,r21
  808388:	b00d883a 	mov	r6,r22
  80838c:	880f883a 	mov	r7,r17
  808390:	ddc00817 	ldw	r23,32(sp)
  808394:	dcc00d17 	ldw	r19,52(sp)
  808398:	9009883a 	mov	r4,r18
  80839c:	0808e9c0 	call	808e9c <__muldi3>
  8083a0:	001b883a 	mov	r13,zero
  8083a4:	680f883a 	mov	r7,r13
  8083a8:	b009883a 	mov	r4,r22
  8083ac:	000b883a 	mov	r5,zero
  8083b0:	980d883a 	mov	r6,r19
  8083b4:	b82d883a 	mov	r22,r23
  8083b8:	002f883a 	mov	r23,zero
  8083bc:	db401615 	stw	r13,88(sp)
  8083c0:	d8801315 	stw	r2,76(sp)
  8083c4:	d8c01415 	stw	r3,80(sp)
  8083c8:	dcc01515 	stw	r19,84(sp)
  8083cc:	0808e9c0 	call	808e9c <__muldi3>
  8083d0:	b00d883a 	mov	r6,r22
  8083d4:	000b883a 	mov	r5,zero
  8083d8:	9009883a 	mov	r4,r18
  8083dc:	b80f883a 	mov	r7,r23
  8083e0:	1021883a 	mov	r16,r2
  8083e4:	1823883a 	mov	r17,r3
  8083e8:	0808e9c0 	call	808e9c <__muldi3>
  8083ec:	8085883a 	add	r2,r16,r2
  8083f0:	140d803a 	cmpltu	r6,r2,r16
  8083f4:	88c7883a 	add	r3,r17,r3
  8083f8:	30cd883a 	add	r6,r6,r3
  8083fc:	1029883a 	mov	r20,r2
  808400:	302b883a 	mov	r21,r6
  808404:	da801317 	ldw	r10,76(sp)
  808408:	dac01417 	ldw	r11,80(sp)
  80840c:	db001517 	ldw	r12,84(sp)
  808410:	db401617 	ldw	r13,88(sp)
  808414:	3440612e 	bgeu	r6,r17,80859c <__muldf3+0x318>
  808418:	0009883a 	mov	r4,zero
  80841c:	5105883a 	add	r2,r10,r4
  808420:	128d803a 	cmpltu	r6,r2,r10
  808424:	5d07883a 	add	r3,r11,r20
  808428:	30cd883a 	add	r6,r6,r3
  80842c:	0021883a 	mov	r16,zero
  808430:	04400044 	movi	r17,1
  808434:	1025883a 	mov	r18,r2
  808438:	3027883a 	mov	r19,r6
  80843c:	32c06236 	bltu	r6,r11,8085c8 <__muldf3+0x344>
  808440:	59807a26 	beq	r11,r6,80862c <__muldf3+0x3a8>
  808444:	680b883a 	mov	r5,r13
  808448:	b80f883a 	mov	r7,r23
  80844c:	6009883a 	mov	r4,r12
  808450:	b00d883a 	mov	r6,r22
  808454:	0808e9c0 	call	808e9c <__muldi3>
  808458:	1009883a 	mov	r4,r2
  80845c:	000f883a 	mov	r7,zero
  808460:	1545883a 	add	r2,r2,r21
  808464:	1111803a 	cmpltu	r8,r2,r4
  808468:	19c7883a 	add	r3,r3,r7
  80846c:	40c7883a 	add	r3,r8,r3
  808470:	88cb883a 	add	r5,r17,r3
  808474:	d8c00617 	ldw	r3,24(sp)
  808478:	8089883a 	add	r4,r16,r2
  80847c:	d8800b17 	ldw	r2,44(sp)
  808480:	18c00104 	addi	r3,r3,4
  808484:	240d803a 	cmpltu	r6,r4,r16
  808488:	10c7883a 	add	r3,r2,r3
  80848c:	2013883a 	mov	r9,r4
  808490:	d8800a17 	ldw	r2,40(sp)
  808494:	d9000517 	ldw	r4,20(sp)
  808498:	314d883a 	add	r6,r6,r5
  80849c:	3015883a 	mov	r10,r6
  8084a0:	2088c03a 	cmpne	r4,r4,r2
  8084a4:	00880034 	movhi	r2,8192
  8084a8:	10bfffc4 	addi	r2,r2,-1
  8084ac:	d9000f15 	stw	r4,60(sp)
  8084b0:	d8c01015 	stw	r3,64(sp)
  8084b4:	1180162e 	bgeu	r2,r6,808510 <__muldf3+0x28c>
  8084b8:	1811883a 	mov	r8,r3
  8084bc:	101f883a 	mov	r15,r2
  8084c0:	980497fa 	slli	r2,r19,31
  8084c4:	9016d07a 	srli	r11,r18,1
  8084c8:	500697fa 	slli	r3,r10,31
  8084cc:	480cd07a 	srli	r6,r9,1
  8084d0:	500ed07a 	srli	r7,r10,1
  8084d4:	12d6b03a 	or	r11,r2,r11
  8084d8:	00800044 	movi	r2,1
  8084dc:	198cb03a 	or	r6,r3,r6
  8084e0:	4888703a 	and	r4,r9,r2
  8084e4:	9818d07a 	srli	r12,r19,1
  8084e8:	001b883a 	mov	r13,zero
  8084ec:	03a00034 	movhi	r14,32768
  8084f0:	3013883a 	mov	r9,r6
  8084f4:	3815883a 	mov	r10,r7
  8084f8:	4091883a 	add	r8,r8,r2
  8084fc:	20000226 	beq	r4,zero,808508 <__muldf3+0x284>
  808500:	5b64b03a 	or	r18,r11,r13
  808504:	63a6b03a 	or	r19,r12,r14
  808508:	7abfed36 	bltu	r15,r10,8084c0 <__muldf3+0x23c>
  80850c:	da001015 	stw	r8,64(sp)
  808510:	00840034 	movhi	r2,4096
  808514:	10bfffc4 	addi	r2,r2,-1
  808518:	12801436 	bltu	r2,r10,80856c <__muldf3+0x2e8>
  80851c:	da001017 	ldw	r8,64(sp)
  808520:	101f883a 	mov	r15,r2
  808524:	4a45883a 	add	r2,r9,r9
  808528:	124d803a 	cmpltu	r6,r2,r9
  80852c:	5287883a 	add	r3,r10,r10
  808530:	9497883a 	add	r11,r18,r18
  808534:	5c8f803a 	cmpltu	r7,r11,r18
  808538:	9cd9883a 	add	r12,r19,r19
  80853c:	01000044 	movi	r4,1
  808540:	30cd883a 	add	r6,r6,r3
  808544:	3b0f883a 	add	r7,r7,r12
  808548:	423fffc4 	addi	r8,r8,-1
  80854c:	1013883a 	mov	r9,r2
  808550:	3015883a 	mov	r10,r6
  808554:	111ab03a 	or	r13,r2,r4
  808558:	98003016 	blt	r19,zero,80861c <__muldf3+0x398>
  80855c:	5825883a 	mov	r18,r11
  808560:	3827883a 	mov	r19,r7
  808564:	7abfef2e 	bgeu	r15,r10,808524 <__muldf3+0x2a0>
  808568:	da001015 	stw	r8,64(sp)
  80856c:	00803fc4 	movi	r2,255
  808570:	488e703a 	and	r7,r9,r2
  808574:	00802004 	movi	r2,128
  808578:	0007883a 	mov	r3,zero
  80857c:	0011883a 	mov	r8,zero
  808580:	38801826 	beq	r7,r2,8085e4 <__muldf3+0x360>
  808584:	008000c4 	movi	r2,3
  808588:	d9000e04 	addi	r4,sp,56
  80858c:	da801215 	stw	r10,72(sp)
  808590:	d8800e15 	stw	r2,56(sp)
  808594:	da401115 	stw	r9,68(sp)
  808598:	003f6a06 	br	808344 <__muldf3+0xc0>
  80859c:	89802126 	beq	r17,r6,808624 <__muldf3+0x3a0>
  8085a0:	0009883a 	mov	r4,zero
  8085a4:	5105883a 	add	r2,r10,r4
  8085a8:	128d803a 	cmpltu	r6,r2,r10
  8085ac:	5d07883a 	add	r3,r11,r20
  8085b0:	30cd883a 	add	r6,r6,r3
  8085b4:	0021883a 	mov	r16,zero
  8085b8:	0023883a 	mov	r17,zero
  8085bc:	1025883a 	mov	r18,r2
  8085c0:	3027883a 	mov	r19,r6
  8085c4:	32ff9e2e 	bgeu	r6,r11,808440 <__muldf3+0x1bc>
  8085c8:	00800044 	movi	r2,1
  8085cc:	8089883a 	add	r4,r16,r2
  8085d0:	240d803a 	cmpltu	r6,r4,r16
  8085d4:	344d883a 	add	r6,r6,r17
  8085d8:	2021883a 	mov	r16,r4
  8085dc:	3023883a 	mov	r17,r6
  8085e0:	003f9806 	br	808444 <__muldf3+0x1c0>
  8085e4:	403fe71e 	bne	r8,zero,808584 <__muldf3+0x300>
  8085e8:	01004004 	movi	r4,256
  8085ec:	4904703a 	and	r2,r9,r4
  8085f0:	10c4b03a 	or	r2,r2,r3
  8085f4:	103fe31e 	bne	r2,zero,808584 <__muldf3+0x300>
  8085f8:	94c4b03a 	or	r2,r18,r19
  8085fc:	103fe126 	beq	r2,zero,808584 <__muldf3+0x300>
  808600:	49c5883a 	add	r2,r9,r7
  808604:	1251803a 	cmpltu	r8,r2,r9
  808608:	4291883a 	add	r8,r8,r10
  80860c:	013fc004 	movi	r4,-256
  808610:	1112703a 	and	r9,r2,r4
  808614:	4015883a 	mov	r10,r8
  808618:	003fda06 	br	808584 <__muldf3+0x300>
  80861c:	6813883a 	mov	r9,r13
  808620:	003fce06 	br	80855c <__muldf3+0x2d8>
  808624:	143f7c36 	bltu	r2,r16,808418 <__muldf3+0x194>
  808628:	003fdd06 	br	8085a0 <__muldf3+0x31c>
  80862c:	12bf852e 	bgeu	r2,r10,808444 <__muldf3+0x1c0>
  808630:	003fe506 	br	8085c8 <__muldf3+0x344>
  808634:	00800084 	movi	r2,2
  808638:	20bf351e 	bne	r4,r2,808310 <__muldf3+0x8c>
  80863c:	010020b4 	movhi	r4,130
  808640:	2131d904 	addi	r4,r4,-14492
  808644:	003f3f06 	br	808344 <__muldf3+0xc0>

00808648 <__divdf3>:
  808648:	deffed04 	addi	sp,sp,-76
  80864c:	dcc01115 	stw	r19,68(sp)
  808650:	dcc00404 	addi	r19,sp,16
  808654:	2011883a 	mov	r8,r4
  808658:	2813883a 	mov	r9,r5
  80865c:	dc000e15 	stw	r16,56(sp)
  808660:	d809883a 	mov	r4,sp
  808664:	980b883a 	mov	r5,r19
  808668:	dc000904 	addi	r16,sp,36
  80866c:	dfc01215 	stw	ra,72(sp)
  808670:	da400115 	stw	r9,4(sp)
  808674:	d9c00315 	stw	r7,12(sp)
  808678:	da000015 	stw	r8,0(sp)
  80867c:	d9800215 	stw	r6,8(sp)
  808680:	dc801015 	stw	r18,64(sp)
  808684:	dc400f15 	stw	r17,60(sp)
  808688:	08094f00 	call	8094f0 <__unpack_d>
  80868c:	d9000204 	addi	r4,sp,8
  808690:	800b883a 	mov	r5,r16
  808694:	08094f00 	call	8094f0 <__unpack_d>
  808698:	d9000417 	ldw	r4,16(sp)
  80869c:	00800044 	movi	r2,1
  8086a0:	11000b2e 	bgeu	r2,r4,8086d0 <__divdf3+0x88>
  8086a4:	d9400917 	ldw	r5,36(sp)
  8086a8:	1140762e 	bgeu	r2,r5,808884 <__divdf3+0x23c>
  8086ac:	d8800517 	ldw	r2,20(sp)
  8086b0:	d8c00a17 	ldw	r3,40(sp)
  8086b4:	01800104 	movi	r6,4
  8086b8:	10c4f03a 	xor	r2,r2,r3
  8086bc:	d8800515 	stw	r2,20(sp)
  8086c0:	21800226 	beq	r4,r6,8086cc <__divdf3+0x84>
  8086c4:	00800084 	movi	r2,2
  8086c8:	2080141e 	bne	r4,r2,80871c <__divdf3+0xd4>
  8086cc:	29000926 	beq	r5,r4,8086f4 <__divdf3+0xac>
  8086d0:	9809883a 	mov	r4,r19
  8086d4:	08091dc0 	call	8091dc <__pack_d>
  8086d8:	dfc01217 	ldw	ra,72(sp)
  8086dc:	dcc01117 	ldw	r19,68(sp)
  8086e0:	dc801017 	ldw	r18,64(sp)
  8086e4:	dc400f17 	ldw	r17,60(sp)
  8086e8:	dc000e17 	ldw	r16,56(sp)
  8086ec:	dec01304 	addi	sp,sp,76
  8086f0:	f800283a 	ret
  8086f4:	010020b4 	movhi	r4,130
  8086f8:	2131d904 	addi	r4,r4,-14492
  8086fc:	08091dc0 	call	8091dc <__pack_d>
  808700:	dfc01217 	ldw	ra,72(sp)
  808704:	dcc01117 	ldw	r19,68(sp)
  808708:	dc801017 	ldw	r18,64(sp)
  80870c:	dc400f17 	ldw	r17,60(sp)
  808710:	dc000e17 	ldw	r16,56(sp)
  808714:	dec01304 	addi	sp,sp,76
  808718:	f800283a 	ret
  80871c:	29805b26 	beq	r5,r6,80888c <__divdf3+0x244>
  808720:	28802d26 	beq	r5,r2,8087d8 <__divdf3+0x190>
  808724:	d8c00617 	ldw	r3,24(sp)
  808728:	d8800b17 	ldw	r2,44(sp)
  80872c:	d9c00817 	ldw	r7,32(sp)
  808730:	dc400d17 	ldw	r17,52(sp)
  808734:	188bc83a 	sub	r5,r3,r2
  808738:	d9800717 	ldw	r6,28(sp)
  80873c:	dc000c17 	ldw	r16,48(sp)
  808740:	d9400615 	stw	r5,24(sp)
  808744:	3c403836 	bltu	r7,r17,808828 <__divdf3+0x1e0>
  808748:	89c03626 	beq	r17,r7,808824 <__divdf3+0x1dc>
  80874c:	0015883a 	mov	r10,zero
  808750:	001d883a 	mov	r14,zero
  808754:	02c40034 	movhi	r11,4096
  808758:	001f883a 	mov	r15,zero
  80875c:	003f883a 	mov	ra,zero
  808760:	04800f44 	movi	r18,61
  808764:	00000f06 	br	8087a4 <__divdf3+0x15c>
  808768:	601d883a 	mov	r14,r12
  80876c:	681f883a 	mov	r15,r13
  808770:	400d883a 	mov	r6,r8
  808774:	100f883a 	mov	r7,r2
  808778:	3191883a 	add	r8,r6,r6
  80877c:	5808d07a 	srli	r4,r11,1
  808780:	4185803a 	cmpltu	r2,r8,r6
  808784:	39d3883a 	add	r9,r7,r7
  808788:	28c6b03a 	or	r3,r5,r3
  80878c:	1245883a 	add	r2,r2,r9
  808790:	1815883a 	mov	r10,r3
  808794:	2017883a 	mov	r11,r4
  808798:	400d883a 	mov	r6,r8
  80879c:	100f883a 	mov	r7,r2
  8087a0:	fc801726 	beq	ra,r18,808800 <__divdf3+0x1b8>
  8087a4:	580a97fa 	slli	r5,r11,31
  8087a8:	5006d07a 	srli	r3,r10,1
  8087ac:	ffc00044 	addi	ra,ra,1
  8087b0:	3c7ff136 	bltu	r7,r17,808778 <__divdf3+0x130>
  8087b4:	3411c83a 	sub	r8,r6,r16
  8087b8:	3205803a 	cmpltu	r2,r6,r8
  8087bc:	3c53c83a 	sub	r9,r7,r17
  8087c0:	7298b03a 	or	r12,r14,r10
  8087c4:	7adab03a 	or	r13,r15,r11
  8087c8:	4885c83a 	sub	r2,r9,r2
  8087cc:	89ffe61e 	bne	r17,r7,808768 <__divdf3+0x120>
  8087d0:	343fe936 	bltu	r6,r16,808778 <__divdf3+0x130>
  8087d4:	003fe406 	br	808768 <__divdf3+0x120>
  8087d8:	9809883a 	mov	r4,r19
  8087dc:	d9800415 	stw	r6,16(sp)
  8087e0:	08091dc0 	call	8091dc <__pack_d>
  8087e4:	dfc01217 	ldw	ra,72(sp)
  8087e8:	dcc01117 	ldw	r19,68(sp)
  8087ec:	dc801017 	ldw	r18,64(sp)
  8087f0:	dc400f17 	ldw	r17,60(sp)
  8087f4:	dc000e17 	ldw	r16,56(sp)
  8087f8:	dec01304 	addi	sp,sp,76
  8087fc:	f800283a 	ret
  808800:	00803fc4 	movi	r2,255
  808804:	7090703a 	and	r8,r14,r2
  808808:	00802004 	movi	r2,128
  80880c:	0007883a 	mov	r3,zero
  808810:	0013883a 	mov	r9,zero
  808814:	40800d26 	beq	r8,r2,80884c <__divdf3+0x204>
  808818:	dbc00815 	stw	r15,32(sp)
  80881c:	db800715 	stw	r14,28(sp)
  808820:	003fab06 	br	8086d0 <__divdf3+0x88>
  808824:	343fc92e 	bgeu	r6,r16,80874c <__divdf3+0x104>
  808828:	3185883a 	add	r2,r6,r6
  80882c:	1189803a 	cmpltu	r4,r2,r6
  808830:	39c7883a 	add	r3,r7,r7
  808834:	20c9883a 	add	r4,r4,r3
  808838:	297fffc4 	addi	r5,r5,-1
  80883c:	100d883a 	mov	r6,r2
  808840:	200f883a 	mov	r7,r4
  808844:	d9400615 	stw	r5,24(sp)
  808848:	003fc006 	br	80874c <__divdf3+0x104>
  80884c:	483ff21e 	bne	r9,zero,808818 <__divdf3+0x1d0>
  808850:	01004004 	movi	r4,256
  808854:	7104703a 	and	r2,r14,r4
  808858:	10c4b03a 	or	r2,r2,r3
  80885c:	103fee1e 	bne	r2,zero,808818 <__divdf3+0x1d0>
  808860:	31c4b03a 	or	r2,r6,r7
  808864:	103fec26 	beq	r2,zero,808818 <__divdf3+0x1d0>
  808868:	7205883a 	add	r2,r14,r8
  80886c:	1391803a 	cmpltu	r8,r2,r14
  808870:	43d1883a 	add	r8,r8,r15
  808874:	013fc004 	movi	r4,-256
  808878:	111c703a 	and	r14,r2,r4
  80887c:	401f883a 	mov	r15,r8
  808880:	003fe506 	br	808818 <__divdf3+0x1d0>
  808884:	8009883a 	mov	r4,r16
  808888:	003f9206 	br	8086d4 <__divdf3+0x8c>
  80888c:	9809883a 	mov	r4,r19
  808890:	d8000715 	stw	zero,28(sp)
  808894:	d8000815 	stw	zero,32(sp)
  808898:	d8000615 	stw	zero,24(sp)
  80889c:	003f8d06 	br	8086d4 <__divdf3+0x8c>

008088a0 <__eqdf2>:
  8088a0:	deffef04 	addi	sp,sp,-68
  8088a4:	dc400f15 	stw	r17,60(sp)
  8088a8:	dc400404 	addi	r17,sp,16
  8088ac:	2005883a 	mov	r2,r4
  8088b0:	2807883a 	mov	r3,r5
  8088b4:	dc000e15 	stw	r16,56(sp)
  8088b8:	d809883a 	mov	r4,sp
  8088bc:	880b883a 	mov	r5,r17
  8088c0:	dc000904 	addi	r16,sp,36
  8088c4:	d8c00115 	stw	r3,4(sp)
  8088c8:	d8800015 	stw	r2,0(sp)
  8088cc:	d9800215 	stw	r6,8(sp)
  8088d0:	dfc01015 	stw	ra,64(sp)
  8088d4:	d9c00315 	stw	r7,12(sp)
  8088d8:	08094f00 	call	8094f0 <__unpack_d>
  8088dc:	d9000204 	addi	r4,sp,8
  8088e0:	800b883a 	mov	r5,r16
  8088e4:	08094f00 	call	8094f0 <__unpack_d>
  8088e8:	d8800417 	ldw	r2,16(sp)
  8088ec:	00c00044 	movi	r3,1
  8088f0:	180d883a 	mov	r6,r3
  8088f4:	1880062e 	bgeu	r3,r2,808910 <__eqdf2+0x70>
  8088f8:	d8800917 	ldw	r2,36(sp)
  8088fc:	8809883a 	mov	r4,r17
  808900:	800b883a 	mov	r5,r16
  808904:	1880022e 	bgeu	r3,r2,808910 <__eqdf2+0x70>
  808908:	08096280 	call	809628 <__fpcmp_parts_d>
  80890c:	100d883a 	mov	r6,r2
  808910:	3005883a 	mov	r2,r6
  808914:	dfc01017 	ldw	ra,64(sp)
  808918:	dc400f17 	ldw	r17,60(sp)
  80891c:	dc000e17 	ldw	r16,56(sp)
  808920:	dec01104 	addi	sp,sp,68
  808924:	f800283a 	ret

00808928 <__nedf2>:
  808928:	deffef04 	addi	sp,sp,-68
  80892c:	dc400f15 	stw	r17,60(sp)
  808930:	dc400404 	addi	r17,sp,16
  808934:	2005883a 	mov	r2,r4
  808938:	2807883a 	mov	r3,r5
  80893c:	dc000e15 	stw	r16,56(sp)
  808940:	d809883a 	mov	r4,sp
  808944:	880b883a 	mov	r5,r17
  808948:	dc000904 	addi	r16,sp,36
  80894c:	d8c00115 	stw	r3,4(sp)
  808950:	d8800015 	stw	r2,0(sp)
  808954:	d9800215 	stw	r6,8(sp)
  808958:	dfc01015 	stw	ra,64(sp)
  80895c:	d9c00315 	stw	r7,12(sp)
  808960:	08094f00 	call	8094f0 <__unpack_d>
  808964:	d9000204 	addi	r4,sp,8
  808968:	800b883a 	mov	r5,r16
  80896c:	08094f00 	call	8094f0 <__unpack_d>
  808970:	d8800417 	ldw	r2,16(sp)
  808974:	00c00044 	movi	r3,1
  808978:	180d883a 	mov	r6,r3
  80897c:	1880062e 	bgeu	r3,r2,808998 <__nedf2+0x70>
  808980:	d8800917 	ldw	r2,36(sp)
  808984:	8809883a 	mov	r4,r17
  808988:	800b883a 	mov	r5,r16
  80898c:	1880022e 	bgeu	r3,r2,808998 <__nedf2+0x70>
  808990:	08096280 	call	809628 <__fpcmp_parts_d>
  808994:	100d883a 	mov	r6,r2
  808998:	3005883a 	mov	r2,r6
  80899c:	dfc01017 	ldw	ra,64(sp)
  8089a0:	dc400f17 	ldw	r17,60(sp)
  8089a4:	dc000e17 	ldw	r16,56(sp)
  8089a8:	dec01104 	addi	sp,sp,68
  8089ac:	f800283a 	ret

008089b0 <__gtdf2>:
  8089b0:	deffef04 	addi	sp,sp,-68
  8089b4:	dc400f15 	stw	r17,60(sp)
  8089b8:	dc400404 	addi	r17,sp,16
  8089bc:	2005883a 	mov	r2,r4
  8089c0:	2807883a 	mov	r3,r5
  8089c4:	dc000e15 	stw	r16,56(sp)
  8089c8:	d809883a 	mov	r4,sp
  8089cc:	880b883a 	mov	r5,r17
  8089d0:	dc000904 	addi	r16,sp,36
  8089d4:	d8c00115 	stw	r3,4(sp)
  8089d8:	d8800015 	stw	r2,0(sp)
  8089dc:	d9800215 	stw	r6,8(sp)
  8089e0:	dfc01015 	stw	ra,64(sp)
  8089e4:	d9c00315 	stw	r7,12(sp)
  8089e8:	08094f00 	call	8094f0 <__unpack_d>
  8089ec:	d9000204 	addi	r4,sp,8
  8089f0:	800b883a 	mov	r5,r16
  8089f4:	08094f00 	call	8094f0 <__unpack_d>
  8089f8:	d8800417 	ldw	r2,16(sp)
  8089fc:	00c00044 	movi	r3,1
  808a00:	01bfffc4 	movi	r6,-1
  808a04:	1880062e 	bgeu	r3,r2,808a20 <__gtdf2+0x70>
  808a08:	d8800917 	ldw	r2,36(sp)
  808a0c:	8809883a 	mov	r4,r17
  808a10:	800b883a 	mov	r5,r16
  808a14:	1880022e 	bgeu	r3,r2,808a20 <__gtdf2+0x70>
  808a18:	08096280 	call	809628 <__fpcmp_parts_d>
  808a1c:	100d883a 	mov	r6,r2
  808a20:	3005883a 	mov	r2,r6
  808a24:	dfc01017 	ldw	ra,64(sp)
  808a28:	dc400f17 	ldw	r17,60(sp)
  808a2c:	dc000e17 	ldw	r16,56(sp)
  808a30:	dec01104 	addi	sp,sp,68
  808a34:	f800283a 	ret

00808a38 <__ltdf2>:
  808a38:	deffef04 	addi	sp,sp,-68
  808a3c:	dc400f15 	stw	r17,60(sp)
  808a40:	dc400404 	addi	r17,sp,16
  808a44:	2005883a 	mov	r2,r4
  808a48:	2807883a 	mov	r3,r5
  808a4c:	dc000e15 	stw	r16,56(sp)
  808a50:	d809883a 	mov	r4,sp
  808a54:	880b883a 	mov	r5,r17
  808a58:	dc000904 	addi	r16,sp,36
  808a5c:	d8c00115 	stw	r3,4(sp)
  808a60:	d8800015 	stw	r2,0(sp)
  808a64:	d9800215 	stw	r6,8(sp)
  808a68:	dfc01015 	stw	ra,64(sp)
  808a6c:	d9c00315 	stw	r7,12(sp)
  808a70:	08094f00 	call	8094f0 <__unpack_d>
  808a74:	d9000204 	addi	r4,sp,8
  808a78:	800b883a 	mov	r5,r16
  808a7c:	08094f00 	call	8094f0 <__unpack_d>
  808a80:	d8800417 	ldw	r2,16(sp)
  808a84:	00c00044 	movi	r3,1
  808a88:	180d883a 	mov	r6,r3
  808a8c:	1880062e 	bgeu	r3,r2,808aa8 <__ltdf2+0x70>
  808a90:	d8800917 	ldw	r2,36(sp)
  808a94:	8809883a 	mov	r4,r17
  808a98:	800b883a 	mov	r5,r16
  808a9c:	1880022e 	bgeu	r3,r2,808aa8 <__ltdf2+0x70>
  808aa0:	08096280 	call	809628 <__fpcmp_parts_d>
  808aa4:	100d883a 	mov	r6,r2
  808aa8:	3005883a 	mov	r2,r6
  808aac:	dfc01017 	ldw	ra,64(sp)
  808ab0:	dc400f17 	ldw	r17,60(sp)
  808ab4:	dc000e17 	ldw	r16,56(sp)
  808ab8:	dec01104 	addi	sp,sp,68
  808abc:	f800283a 	ret

00808ac0 <__ledf2>:
  808ac0:	deffef04 	addi	sp,sp,-68
  808ac4:	dc400f15 	stw	r17,60(sp)
  808ac8:	dc400404 	addi	r17,sp,16
  808acc:	2005883a 	mov	r2,r4
  808ad0:	2807883a 	mov	r3,r5
  808ad4:	dc000e15 	stw	r16,56(sp)
  808ad8:	d809883a 	mov	r4,sp
  808adc:	880b883a 	mov	r5,r17
  808ae0:	dc000904 	addi	r16,sp,36
  808ae4:	d8c00115 	stw	r3,4(sp)
  808ae8:	d8800015 	stw	r2,0(sp)
  808aec:	d9800215 	stw	r6,8(sp)
  808af0:	dfc01015 	stw	ra,64(sp)
  808af4:	d9c00315 	stw	r7,12(sp)
  808af8:	08094f00 	call	8094f0 <__unpack_d>
  808afc:	d9000204 	addi	r4,sp,8
  808b00:	800b883a 	mov	r5,r16
  808b04:	08094f00 	call	8094f0 <__unpack_d>
  808b08:	d8800417 	ldw	r2,16(sp)
  808b0c:	00c00044 	movi	r3,1
  808b10:	180d883a 	mov	r6,r3
  808b14:	1880062e 	bgeu	r3,r2,808b30 <__ledf2+0x70>
  808b18:	d8800917 	ldw	r2,36(sp)
  808b1c:	8809883a 	mov	r4,r17
  808b20:	800b883a 	mov	r5,r16
  808b24:	1880022e 	bgeu	r3,r2,808b30 <__ledf2+0x70>
  808b28:	08096280 	call	809628 <__fpcmp_parts_d>
  808b2c:	100d883a 	mov	r6,r2
  808b30:	3005883a 	mov	r2,r6
  808b34:	dfc01017 	ldw	ra,64(sp)
  808b38:	dc400f17 	ldw	r17,60(sp)
  808b3c:	dc000e17 	ldw	r16,56(sp)
  808b40:	dec01104 	addi	sp,sp,68
  808b44:	f800283a 	ret

00808b48 <__floatsidf>:
  808b48:	2006d7fa 	srli	r3,r4,31
  808b4c:	defff604 	addi	sp,sp,-40
  808b50:	008000c4 	movi	r2,3
  808b54:	dfc00915 	stw	ra,36(sp)
  808b58:	dcc00815 	stw	r19,32(sp)
  808b5c:	dc800715 	stw	r18,28(sp)
  808b60:	dc400615 	stw	r17,24(sp)
  808b64:	dc000515 	stw	r16,20(sp)
  808b68:	d8800015 	stw	r2,0(sp)
  808b6c:	d8c00115 	stw	r3,4(sp)
  808b70:	20000f1e 	bne	r4,zero,808bb0 <__floatsidf+0x68>
  808b74:	00800084 	movi	r2,2
  808b78:	d8800015 	stw	r2,0(sp)
  808b7c:	d809883a 	mov	r4,sp
  808b80:	08091dc0 	call	8091dc <__pack_d>
  808b84:	1009883a 	mov	r4,r2
  808b88:	180b883a 	mov	r5,r3
  808b8c:	2005883a 	mov	r2,r4
  808b90:	2807883a 	mov	r3,r5
  808b94:	dfc00917 	ldw	ra,36(sp)
  808b98:	dcc00817 	ldw	r19,32(sp)
  808b9c:	dc800717 	ldw	r18,28(sp)
  808ba0:	dc400617 	ldw	r17,24(sp)
  808ba4:	dc000517 	ldw	r16,20(sp)
  808ba8:	dec00a04 	addi	sp,sp,40
  808bac:	f800283a 	ret
  808bb0:	00800f04 	movi	r2,60
  808bb4:	1807003a 	cmpeq	r3,r3,zero
  808bb8:	d8800215 	stw	r2,8(sp)
  808bbc:	18001126 	beq	r3,zero,808c04 <__floatsidf+0xbc>
  808bc0:	0027883a 	mov	r19,zero
  808bc4:	2025883a 	mov	r18,r4
  808bc8:	d9000315 	stw	r4,12(sp)
  808bcc:	dcc00415 	stw	r19,16(sp)
  808bd0:	0808f340 	call	808f34 <__clzsi2>
  808bd4:	11000744 	addi	r4,r2,29
  808bd8:	013fe80e 	bge	zero,r4,808b7c <__floatsidf+0x34>
  808bdc:	10bfff44 	addi	r2,r2,-3
  808be0:	10000c16 	blt	r2,zero,808c14 <__floatsidf+0xcc>
  808be4:	90a2983a 	sll	r17,r18,r2
  808be8:	0021883a 	mov	r16,zero
  808bec:	d8800217 	ldw	r2,8(sp)
  808bf0:	dc400415 	stw	r17,16(sp)
  808bf4:	dc000315 	stw	r16,12(sp)
  808bf8:	1105c83a 	sub	r2,r2,r4
  808bfc:	d8800215 	stw	r2,8(sp)
  808c00:	003fde06 	br	808b7c <__floatsidf+0x34>
  808c04:	00a00034 	movhi	r2,32768
  808c08:	20800a26 	beq	r4,r2,808c34 <__floatsidf+0xec>
  808c0c:	0109c83a 	sub	r4,zero,r4
  808c10:	003feb06 	br	808bc0 <__floatsidf+0x78>
  808c14:	9006d07a 	srli	r3,r18,1
  808c18:	008007c4 	movi	r2,31
  808c1c:	1105c83a 	sub	r2,r2,r4
  808c20:	1886d83a 	srl	r3,r3,r2
  808c24:	9922983a 	sll	r17,r19,r4
  808c28:	9120983a 	sll	r16,r18,r4
  808c2c:	1c62b03a 	or	r17,r3,r17
  808c30:	003fee06 	br	808bec <__floatsidf+0xa4>
  808c34:	0009883a 	mov	r4,zero
  808c38:	01707834 	movhi	r5,49632
  808c3c:	003fd306 	br	808b8c <__floatsidf+0x44>

00808c40 <__fixdfsi>:
  808c40:	defff804 	addi	sp,sp,-32
  808c44:	2005883a 	mov	r2,r4
  808c48:	2807883a 	mov	r3,r5
  808c4c:	d809883a 	mov	r4,sp
  808c50:	d9400204 	addi	r5,sp,8
  808c54:	d8c00115 	stw	r3,4(sp)
  808c58:	d8800015 	stw	r2,0(sp)
  808c5c:	dfc00715 	stw	ra,28(sp)
  808c60:	08094f00 	call	8094f0 <__unpack_d>
  808c64:	d8c00217 	ldw	r3,8(sp)
  808c68:	00800084 	movi	r2,2
  808c6c:	1880051e 	bne	r3,r2,808c84 <__fixdfsi+0x44>
  808c70:	0007883a 	mov	r3,zero
  808c74:	1805883a 	mov	r2,r3
  808c78:	dfc00717 	ldw	ra,28(sp)
  808c7c:	dec00804 	addi	sp,sp,32
  808c80:	f800283a 	ret
  808c84:	00800044 	movi	r2,1
  808c88:	10fff92e 	bgeu	r2,r3,808c70 <__fixdfsi+0x30>
  808c8c:	00800104 	movi	r2,4
  808c90:	18800426 	beq	r3,r2,808ca4 <__fixdfsi+0x64>
  808c94:	d8c00417 	ldw	r3,16(sp)
  808c98:	183ff516 	blt	r3,zero,808c70 <__fixdfsi+0x30>
  808c9c:	00800784 	movi	r2,30
  808ca0:	10c0080e 	bge	r2,r3,808cc4 <__fixdfsi+0x84>
  808ca4:	d8800317 	ldw	r2,12(sp)
  808ca8:	1000121e 	bne	r2,zero,808cf4 <__fixdfsi+0xb4>
  808cac:	00e00034 	movhi	r3,32768
  808cb0:	18ffffc4 	addi	r3,r3,-1
  808cb4:	1805883a 	mov	r2,r3
  808cb8:	dfc00717 	ldw	ra,28(sp)
  808cbc:	dec00804 	addi	sp,sp,32
  808cc0:	f800283a 	ret
  808cc4:	00800f04 	movi	r2,60
  808cc8:	10d1c83a 	sub	r8,r2,r3
  808ccc:	40bff804 	addi	r2,r8,-32
  808cd0:	d9800517 	ldw	r6,20(sp)
  808cd4:	d9c00617 	ldw	r7,24(sp)
  808cd8:	10000816 	blt	r2,zero,808cfc <__fixdfsi+0xbc>
  808cdc:	3888d83a 	srl	r4,r7,r2
  808ce0:	d8800317 	ldw	r2,12(sp)
  808ce4:	2007883a 	mov	r3,r4
  808ce8:	103fe226 	beq	r2,zero,808c74 <__fixdfsi+0x34>
  808cec:	0107c83a 	sub	r3,zero,r4
  808cf0:	003fe006 	br	808c74 <__fixdfsi+0x34>
  808cf4:	00e00034 	movhi	r3,32768
  808cf8:	003fde06 	br	808c74 <__fixdfsi+0x34>
  808cfc:	39c7883a 	add	r3,r7,r7
  808d00:	008007c4 	movi	r2,31
  808d04:	1205c83a 	sub	r2,r2,r8
  808d08:	1886983a 	sll	r3,r3,r2
  808d0c:	3208d83a 	srl	r4,r6,r8
  808d10:	1908b03a 	or	r4,r3,r4
  808d14:	003ff206 	br	808ce0 <__fixdfsi+0xa0>

00808d18 <__make_dp>:
  808d18:	defff904 	addi	sp,sp,-28
  808d1c:	d8c00717 	ldw	r3,28(sp)
  808d20:	d9000015 	stw	r4,0(sp)
  808d24:	d809883a 	mov	r4,sp
  808d28:	dfc00515 	stw	ra,20(sp)
  808d2c:	d9c00615 	stw	r7,24(sp)
  808d30:	d9400115 	stw	r5,4(sp)
  808d34:	d9800215 	stw	r6,8(sp)
  808d38:	d8c00415 	stw	r3,16(sp)
  808d3c:	d9c00315 	stw	r7,12(sp)
  808d40:	08091dc0 	call	8091dc <__pack_d>
  808d44:	dfc00517 	ldw	ra,20(sp)
  808d48:	dec00704 	addi	sp,sp,28
  808d4c:	f800283a 	ret

00808d50 <udivmodsi4>:
  808d50:	29001b2e 	bgeu	r5,r4,808dc0 <udivmodsi4+0x70>
  808d54:	28001a16 	blt	r5,zero,808dc0 <udivmodsi4+0x70>
  808d58:	00800044 	movi	r2,1
  808d5c:	0007883a 	mov	r3,zero
  808d60:	01c007c4 	movi	r7,31
  808d64:	00000306 	br	808d74 <udivmodsi4+0x24>
  808d68:	19c01326 	beq	r3,r7,808db8 <udivmodsi4+0x68>
  808d6c:	18c00044 	addi	r3,r3,1
  808d70:	28000416 	blt	r5,zero,808d84 <udivmodsi4+0x34>
  808d74:	294b883a 	add	r5,r5,r5
  808d78:	1085883a 	add	r2,r2,r2
  808d7c:	293ffa36 	bltu	r5,r4,808d68 <udivmodsi4+0x18>
  808d80:	10000d26 	beq	r2,zero,808db8 <udivmodsi4+0x68>
  808d84:	0007883a 	mov	r3,zero
  808d88:	21400236 	bltu	r4,r5,808d94 <udivmodsi4+0x44>
  808d8c:	2149c83a 	sub	r4,r4,r5
  808d90:	1886b03a 	or	r3,r3,r2
  808d94:	1004d07a 	srli	r2,r2,1
  808d98:	280ad07a 	srli	r5,r5,1
  808d9c:	103ffa1e 	bne	r2,zero,808d88 <udivmodsi4+0x38>
  808da0:	30000226 	beq	r6,zero,808dac <udivmodsi4+0x5c>
  808da4:	2005883a 	mov	r2,r4
  808da8:	f800283a 	ret
  808dac:	1809883a 	mov	r4,r3
  808db0:	2005883a 	mov	r2,r4
  808db4:	f800283a 	ret
  808db8:	0007883a 	mov	r3,zero
  808dbc:	003ff806 	br	808da0 <udivmodsi4+0x50>
  808dc0:	00800044 	movi	r2,1
  808dc4:	0007883a 	mov	r3,zero
  808dc8:	003fef06 	br	808d88 <udivmodsi4+0x38>

00808dcc <__divsi3>:
  808dcc:	defffe04 	addi	sp,sp,-8
  808dd0:	dc000015 	stw	r16,0(sp)
  808dd4:	dfc00115 	stw	ra,4(sp)
  808dd8:	0021883a 	mov	r16,zero
  808ddc:	20000c16 	blt	r4,zero,808e10 <__divsi3+0x44>
  808de0:	000d883a 	mov	r6,zero
  808de4:	28000e16 	blt	r5,zero,808e20 <__divsi3+0x54>
  808de8:	0808d500 	call	808d50 <udivmodsi4>
  808dec:	1007883a 	mov	r3,r2
  808df0:	8005003a 	cmpeq	r2,r16,zero
  808df4:	1000011e 	bne	r2,zero,808dfc <__divsi3+0x30>
  808df8:	00c7c83a 	sub	r3,zero,r3
  808dfc:	1805883a 	mov	r2,r3
  808e00:	dfc00117 	ldw	ra,4(sp)
  808e04:	dc000017 	ldw	r16,0(sp)
  808e08:	dec00204 	addi	sp,sp,8
  808e0c:	f800283a 	ret
  808e10:	0109c83a 	sub	r4,zero,r4
  808e14:	04000044 	movi	r16,1
  808e18:	000d883a 	mov	r6,zero
  808e1c:	283ff20e 	bge	r5,zero,808de8 <__divsi3+0x1c>
  808e20:	014bc83a 	sub	r5,zero,r5
  808e24:	8021003a 	cmpeq	r16,r16,zero
  808e28:	003fef06 	br	808de8 <__divsi3+0x1c>

00808e2c <__modsi3>:
  808e2c:	deffff04 	addi	sp,sp,-4
  808e30:	dfc00015 	stw	ra,0(sp)
  808e34:	01800044 	movi	r6,1
  808e38:	2807883a 	mov	r3,r5
  808e3c:	20000416 	blt	r4,zero,808e50 <__modsi3+0x24>
  808e40:	28000c16 	blt	r5,zero,808e74 <__modsi3+0x48>
  808e44:	dfc00017 	ldw	ra,0(sp)
  808e48:	dec00104 	addi	sp,sp,4
  808e4c:	0808d501 	jmpi	808d50 <udivmodsi4>
  808e50:	0109c83a 	sub	r4,zero,r4
  808e54:	28000b16 	blt	r5,zero,808e84 <__modsi3+0x58>
  808e58:	180b883a 	mov	r5,r3
  808e5c:	01800044 	movi	r6,1
  808e60:	0808d500 	call	808d50 <udivmodsi4>
  808e64:	0085c83a 	sub	r2,zero,r2
  808e68:	dfc00017 	ldw	ra,0(sp)
  808e6c:	dec00104 	addi	sp,sp,4
  808e70:	f800283a 	ret
  808e74:	014bc83a 	sub	r5,zero,r5
  808e78:	dfc00017 	ldw	ra,0(sp)
  808e7c:	dec00104 	addi	sp,sp,4
  808e80:	0808d501 	jmpi	808d50 <udivmodsi4>
  808e84:	0147c83a 	sub	r3,zero,r5
  808e88:	003ff306 	br	808e58 <__modsi3+0x2c>

00808e8c <__udivsi3>:
  808e8c:	000d883a 	mov	r6,zero
  808e90:	0808d501 	jmpi	808d50 <udivmodsi4>

00808e94 <__umodsi3>:
  808e94:	01800044 	movi	r6,1
  808e98:	0808d501 	jmpi	808d50 <udivmodsi4>

00808e9c <__muldi3>:
  808e9c:	2011883a 	mov	r8,r4
  808ea0:	427fffcc 	andi	r9,r8,65535
  808ea4:	4018d43a 	srli	r12,r8,16
  808ea8:	32bfffcc 	andi	r10,r6,65535
  808eac:	3016d43a 	srli	r11,r6,16
  808eb0:	4a85383a 	mul	r2,r9,r10
  808eb4:	6295383a 	mul	r10,r12,r10
  808eb8:	4ad3383a 	mul	r9,r9,r11
  808ebc:	113fffcc 	andi	r4,r2,65535
  808ec0:	1004d43a 	srli	r2,r2,16
  808ec4:	4a93883a 	add	r9,r9,r10
  808ec8:	3807883a 	mov	r3,r7
  808ecc:	1245883a 	add	r2,r2,r9
  808ed0:	280f883a 	mov	r7,r5
  808ed4:	180b883a 	mov	r5,r3
  808ed8:	1006943a 	slli	r3,r2,16
  808edc:	defffd04 	addi	sp,sp,-12
  808ee0:	dc800215 	stw	r18,8(sp)
  808ee4:	1907883a 	add	r3,r3,r4
  808ee8:	dc400115 	stw	r17,4(sp)
  808eec:	dc000015 	stw	r16,0(sp)
  808ef0:	4165383a 	mul	r18,r8,r5
  808ef4:	31e3383a 	mul	r17,r6,r7
  808ef8:	1012d43a 	srli	r9,r2,16
  808efc:	62d9383a 	mul	r12,r12,r11
  808f00:	181f883a 	mov	r15,r3
  808f04:	1280022e 	bgeu	r2,r10,808f10 <__muldi3+0x74>
  808f08:	00800074 	movhi	r2,1
  808f0c:	6099883a 	add	r12,r12,r2
  808f10:	624d883a 	add	r6,r12,r9
  808f14:	9187883a 	add	r3,r18,r6
  808f18:	88c7883a 	add	r3,r17,r3
  808f1c:	7805883a 	mov	r2,r15
  808f20:	dc800217 	ldw	r18,8(sp)
  808f24:	dc400117 	ldw	r17,4(sp)
  808f28:	dc000017 	ldw	r16,0(sp)
  808f2c:	dec00304 	addi	sp,sp,12
  808f30:	f800283a 	ret

00808f34 <__clzsi2>:
  808f34:	00bfffd4 	movui	r2,65535
  808f38:	11000e36 	bltu	r2,r4,808f74 <__clzsi2+0x40>
  808f3c:	00803fc4 	movi	r2,255
  808f40:	01400204 	movi	r5,8
  808f44:	0007883a 	mov	r3,zero
  808f48:	11001036 	bltu	r2,r4,808f8c <__clzsi2+0x58>
  808f4c:	000b883a 	mov	r5,zero
  808f50:	20c6d83a 	srl	r3,r4,r3
  808f54:	008020b4 	movhi	r2,130
  808f58:	10b1de04 	addi	r2,r2,-14472
  808f5c:	1887883a 	add	r3,r3,r2
  808f60:	18800003 	ldbu	r2,0(r3)
  808f64:	00c00804 	movi	r3,32
  808f68:	2885883a 	add	r2,r5,r2
  808f6c:	1885c83a 	sub	r2,r3,r2
  808f70:	f800283a 	ret
  808f74:	01400404 	movi	r5,16
  808f78:	00804034 	movhi	r2,256
  808f7c:	10bfffc4 	addi	r2,r2,-1
  808f80:	2807883a 	mov	r3,r5
  808f84:	113ff22e 	bgeu	r2,r4,808f50 <__clzsi2+0x1c>
  808f88:	01400604 	movi	r5,24
  808f8c:	2807883a 	mov	r3,r5
  808f90:	20c6d83a 	srl	r3,r4,r3
  808f94:	008020b4 	movhi	r2,130
  808f98:	10b1de04 	addi	r2,r2,-14472
  808f9c:	1887883a 	add	r3,r3,r2
  808fa0:	18800003 	ldbu	r2,0(r3)
  808fa4:	00c00804 	movi	r3,32
  808fa8:	2885883a 	add	r2,r5,r2
  808fac:	1885c83a 	sub	r2,r3,r2
  808fb0:	f800283a 	ret

00808fb4 <__pack_f>:
  808fb4:	20c00017 	ldw	r3,0(r4)
  808fb8:	01c00044 	movi	r7,1
  808fbc:	21800317 	ldw	r6,12(r4)
  808fc0:	21400117 	ldw	r5,4(r4)
  808fc4:	38c02d2e 	bgeu	r7,r3,80907c <__pack_f+0xc8>
  808fc8:	00800104 	movi	r2,4
  808fcc:	18802826 	beq	r3,r2,809070 <__pack_f+0xbc>
  808fd0:	00800084 	movi	r2,2
  808fd4:	18800126 	beq	r3,r2,808fdc <__pack_f+0x28>
  808fd8:	3000101e 	bne	r6,zero,80901c <__pack_f+0x68>
  808fdc:	000d883a 	mov	r6,zero
  808fe0:	0007883a 	mov	r3,zero
  808fe4:	19003fcc 	andi	r4,r3,255
  808fe8:	200895fa 	slli	r4,r4,23
  808fec:	00c02034 	movhi	r3,128
  808ff0:	18ffffc4 	addi	r3,r3,-1
  808ff4:	30c6703a 	and	r3,r6,r3
  808ff8:	10a0002c 	andhi	r2,r2,32768
  808ffc:	10c4b03a 	or	r2,r2,r3
  809000:	280a97fa 	slli	r5,r5,31
  809004:	1104b03a 	or	r2,r2,r4
  809008:	00e00034 	movhi	r3,32768
  80900c:	18ffffc4 	addi	r3,r3,-1
  809010:	10c4703a 	and	r2,r2,r3
  809014:	1144b03a 	or	r2,r2,r5
  809018:	f800283a 	ret
  80901c:	21000217 	ldw	r4,8(r4)
  809020:	00bfe084 	movi	r2,-126
  809024:	20801b16 	blt	r4,r2,809094 <__pack_f+0xe0>
  809028:	00801fc4 	movi	r2,127
  80902c:	11001016 	blt	r2,r4,809070 <__pack_f+0xbc>
  809030:	308e703a 	and	r7,r6,r2
  809034:	2087883a 	add	r3,r4,r2
  809038:	00801004 	movi	r2,64
  80903c:	38800526 	beq	r7,r2,809054 <__pack_f+0xa0>
  809040:	31800fc4 	addi	r6,r6,63
  809044:	30000716 	blt	r6,zero,809064 <__pack_f+0xb0>
  809048:	300490ba 	slli	r2,r6,2
  80904c:	100cd27a 	srli	r6,r2,9
  809050:	003fe406 	br	808fe4 <__pack_f+0x30>
  809054:	3080200c 	andi	r2,r6,128
  809058:	103ffa26 	beq	r2,zero,809044 <__pack_f+0x90>
  80905c:	31cd883a 	add	r6,r6,r7
  809060:	003ff806 	br	809044 <__pack_f+0x90>
  809064:	300cd07a 	srli	r6,r6,1
  809068:	18c00044 	addi	r3,r3,1
  80906c:	003ff606 	br	809048 <__pack_f+0x94>
  809070:	000d883a 	mov	r6,zero
  809074:	00ffffc4 	movi	r3,-1
  809078:	003fda06 	br	808fe4 <__pack_f+0x30>
  80907c:	31800434 	orhi	r6,r6,16
  809080:	00802034 	movhi	r2,128
  809084:	10bfffc4 	addi	r2,r2,-1
  809088:	308c703a 	and	r6,r6,r2
  80908c:	00ffffc4 	movi	r3,-1
  809090:	003fd406 	br	808fe4 <__pack_f+0x30>
  809094:	1109c83a 	sub	r4,r2,r4
  809098:	00800644 	movi	r2,25
  80909c:	11001216 	blt	r2,r4,8090e8 <__pack_f+0x134>
  8090a0:	3904983a 	sll	r2,r7,r4
  8090a4:	3106d83a 	srl	r3,r6,r4
  8090a8:	10bfffc4 	addi	r2,r2,-1
  8090ac:	3084703a 	and	r2,r6,r2
  8090b0:	1004c03a 	cmpne	r2,r2,zero
  8090b4:	1886b03a 	or	r3,r3,r2
  8090b8:	19001fcc 	andi	r4,r3,127
  8090bc:	00801004 	movi	r2,64
  8090c0:	20800c26 	beq	r4,r2,8090f4 <__pack_f+0x140>
  8090c4:	18c00fc4 	addi	r3,r3,63
  8090c8:	00900034 	movhi	r2,16384
  8090cc:	10bfffc4 	addi	r2,r2,-1
  8090d0:	180cd1fa 	srli	r6,r3,7
  8090d4:	10c7803a 	cmpltu	r3,r2,r3
  8090d8:	00802034 	movhi	r2,128
  8090dc:	10bfffc4 	addi	r2,r2,-1
  8090e0:	308c703a 	and	r6,r6,r2
  8090e4:	003fbf06 	br	808fe4 <__pack_f+0x30>
  8090e8:	0007883a 	mov	r3,zero
  8090ec:	000d883a 	mov	r6,zero
  8090f0:	003ff906 	br	8090d8 <__pack_f+0x124>
  8090f4:	1880200c 	andi	r2,r3,128
  8090f8:	10000126 	beq	r2,zero,809100 <__pack_f+0x14c>
  8090fc:	1907883a 	add	r3,r3,r4
  809100:	180cd1fa 	srli	r6,r3,7
  809104:	00900034 	movhi	r2,16384
  809108:	10bfffc4 	addi	r2,r2,-1
  80910c:	10c7803a 	cmpltu	r3,r2,r3
  809110:	003ff106 	br	8090d8 <__pack_f+0x124>

00809114 <__unpack_f>:
  809114:	21800017 	ldw	r6,0(r4)
  809118:	00c02034 	movhi	r3,128
  80911c:	18ffffc4 	addi	r3,r3,-1
  809120:	3004d5fa 	srli	r2,r6,23
  809124:	3008d7fa 	srli	r4,r6,31
  809128:	30ce703a 	and	r7,r6,r3
  80912c:	10c03fcc 	andi	r3,r2,255
  809130:	29000115 	stw	r4,4(r5)
  809134:	1800131e 	bne	r3,zero,809184 <__unpack_f+0x70>
  809138:	38000f26 	beq	r7,zero,809178 <__unpack_f+0x64>
  80913c:	380691fa 	slli	r3,r7,7
  809140:	01bfe084 	movi	r6,-126
  809144:	008000c4 	movi	r2,3
  809148:	01100034 	movhi	r4,16384
  80914c:	213fffc4 	addi	r4,r4,-1
  809150:	28800015 	stw	r2,0(r5)
  809154:	29800215 	stw	r6,8(r5)
  809158:	20c00536 	bltu	r4,r3,809170 <__unpack_f+0x5c>
  80915c:	3005883a 	mov	r2,r6
  809160:	18c7883a 	add	r3,r3,r3
  809164:	10bfffc4 	addi	r2,r2,-1
  809168:	20fffd2e 	bgeu	r4,r3,809160 <__unpack_f+0x4c>
  80916c:	28800215 	stw	r2,8(r5)
  809170:	28c00315 	stw	r3,12(r5)
  809174:	f800283a 	ret
  809178:	00800084 	movi	r2,2
  80917c:	28800015 	stw	r2,0(r5)
  809180:	f800283a 	ret
  809184:	00803fc4 	movi	r2,255
  809188:	18800826 	beq	r3,r2,8091ac <__unpack_f+0x98>
  80918c:	380491fa 	slli	r2,r7,7
  809190:	18ffe044 	addi	r3,r3,-127
  809194:	28c00215 	stw	r3,8(r5)
  809198:	10900034 	orhi	r2,r2,16384
  80919c:	28800315 	stw	r2,12(r5)
  8091a0:	008000c4 	movi	r2,3
  8091a4:	28800015 	stw	r2,0(r5)
  8091a8:	f800283a 	ret
  8091ac:	3800031e 	bne	r7,zero,8091bc <__unpack_f+0xa8>
  8091b0:	00800104 	movi	r2,4
  8091b4:	28800015 	stw	r2,0(r5)
  8091b8:	f800283a 	ret
  8091bc:	3080042c 	andhi	r2,r6,16
  8091c0:	10000426 	beq	r2,zero,8091d4 <__unpack_f+0xc0>
  8091c4:	00800044 	movi	r2,1
  8091c8:	28800015 	stw	r2,0(r5)
  8091cc:	29c00315 	stw	r7,12(r5)
  8091d0:	f800283a 	ret
  8091d4:	28000015 	stw	zero,0(r5)
  8091d8:	003ffc06 	br	8091cc <__unpack_f+0xb8>

008091dc <__pack_d>:
  8091dc:	20c00017 	ldw	r3,0(r4)
  8091e0:	defffd04 	addi	sp,sp,-12
  8091e4:	dc000015 	stw	r16,0(sp)
  8091e8:	dc800215 	stw	r18,8(sp)
  8091ec:	dc400115 	stw	r17,4(sp)
  8091f0:	00800044 	movi	r2,1
  8091f4:	22000317 	ldw	r8,12(r4)
  8091f8:	001f883a 	mov	r15,zero
  8091fc:	22400417 	ldw	r9,16(r4)
  809200:	24000117 	ldw	r16,4(r4)
  809204:	10c0552e 	bgeu	r2,r3,80935c <__pack_d+0x180>
  809208:	00800104 	movi	r2,4
  80920c:	18804f26 	beq	r3,r2,80934c <__pack_d+0x170>
  809210:	00800084 	movi	r2,2
  809214:	18800226 	beq	r3,r2,809220 <__pack_d+0x44>
  809218:	4244b03a 	or	r2,r8,r9
  80921c:	10001a1e 	bne	r2,zero,809288 <__pack_d+0xac>
  809220:	000d883a 	mov	r6,zero
  809224:	000f883a 	mov	r7,zero
  809228:	0011883a 	mov	r8,zero
  80922c:	00800434 	movhi	r2,16
  809230:	10bfffc4 	addi	r2,r2,-1
  809234:	301d883a 	mov	r14,r6
  809238:	3884703a 	and	r2,r7,r2
  80923c:	400a953a 	slli	r5,r8,20
  809240:	79bffc2c 	andhi	r6,r15,65520
  809244:	308cb03a 	or	r6,r6,r2
  809248:	00e00434 	movhi	r3,32784
  80924c:	18ffffc4 	addi	r3,r3,-1
  809250:	800497fa 	slli	r2,r16,31
  809254:	30c6703a 	and	r3,r6,r3
  809258:	1946b03a 	or	r3,r3,r5
  80925c:	01600034 	movhi	r5,32768
  809260:	297fffc4 	addi	r5,r5,-1
  809264:	194a703a 	and	r5,r3,r5
  809268:	288ab03a 	or	r5,r5,r2
  80926c:	2807883a 	mov	r3,r5
  809270:	7005883a 	mov	r2,r14
  809274:	dc800217 	ldw	r18,8(sp)
  809278:	dc400117 	ldw	r17,4(sp)
  80927c:	dc000017 	ldw	r16,0(sp)
  809280:	dec00304 	addi	sp,sp,12
  809284:	f800283a 	ret
  809288:	21000217 	ldw	r4,8(r4)
  80928c:	00bf0084 	movi	r2,-1022
  809290:	20803f16 	blt	r4,r2,809390 <__pack_d+0x1b4>
  809294:	0080ffc4 	movi	r2,1023
  809298:	11002c16 	blt	r2,r4,80934c <__pack_d+0x170>
  80929c:	00803fc4 	movi	r2,255
  8092a0:	408c703a 	and	r6,r8,r2
  8092a4:	00802004 	movi	r2,128
  8092a8:	0007883a 	mov	r3,zero
  8092ac:	000f883a 	mov	r7,zero
  8092b0:	2280ffc4 	addi	r10,r4,1023
  8092b4:	30801e26 	beq	r6,r2,809330 <__pack_d+0x154>
  8092b8:	00801fc4 	movi	r2,127
  8092bc:	4089883a 	add	r4,r8,r2
  8092c0:	220d803a 	cmpltu	r6,r4,r8
  8092c4:	324d883a 	add	r6,r6,r9
  8092c8:	2011883a 	mov	r8,r4
  8092cc:	3013883a 	mov	r9,r6
  8092d0:	00880034 	movhi	r2,8192
  8092d4:	10bfffc4 	addi	r2,r2,-1
  8092d8:	12400d36 	bltu	r2,r9,809310 <__pack_d+0x134>
  8092dc:	4804963a 	slli	r2,r9,24
  8092e0:	400cd23a 	srli	r6,r8,8
  8092e4:	480ed23a 	srli	r7,r9,8
  8092e8:	013fffc4 	movi	r4,-1
  8092ec:	118cb03a 	or	r6,r2,r6
  8092f0:	01400434 	movhi	r5,16
  8092f4:	297fffc4 	addi	r5,r5,-1
  8092f8:	3104703a 	and	r2,r6,r4
  8092fc:	3946703a 	and	r3,r7,r5
  809300:	5201ffcc 	andi	r8,r10,2047
  809304:	100d883a 	mov	r6,r2
  809308:	180f883a 	mov	r7,r3
  80930c:	003fc706 	br	80922c <__pack_d+0x50>
  809310:	480897fa 	slli	r4,r9,31
  809314:	4004d07a 	srli	r2,r8,1
  809318:	4806d07a 	srli	r3,r9,1
  80931c:	52800044 	addi	r10,r10,1
  809320:	2084b03a 	or	r2,r4,r2
  809324:	1011883a 	mov	r8,r2
  809328:	1813883a 	mov	r9,r3
  80932c:	003feb06 	br	8092dc <__pack_d+0x100>
  809330:	383fe11e 	bne	r7,zero,8092b8 <__pack_d+0xdc>
  809334:	01004004 	movi	r4,256
  809338:	4104703a 	and	r2,r8,r4
  80933c:	10c4b03a 	or	r2,r2,r3
  809340:	103fe326 	beq	r2,zero,8092d0 <__pack_d+0xf4>
  809344:	3005883a 	mov	r2,r6
  809348:	003fdc06 	br	8092bc <__pack_d+0xe0>
  80934c:	000d883a 	mov	r6,zero
  809350:	000f883a 	mov	r7,zero
  809354:	0201ffc4 	movi	r8,2047
  809358:	003fb406 	br	80922c <__pack_d+0x50>
  80935c:	0005883a 	mov	r2,zero
  809360:	00c00234 	movhi	r3,8
  809364:	408cb03a 	or	r6,r8,r2
  809368:	48ceb03a 	or	r7,r9,r3
  80936c:	013fffc4 	movi	r4,-1
  809370:	01400434 	movhi	r5,16
  809374:	297fffc4 	addi	r5,r5,-1
  809378:	3104703a 	and	r2,r6,r4
  80937c:	3946703a 	and	r3,r7,r5
  809380:	100d883a 	mov	r6,r2
  809384:	180f883a 	mov	r7,r3
  809388:	0201ffc4 	movi	r8,2047
  80938c:	003fa706 	br	80922c <__pack_d+0x50>
  809390:	1109c83a 	sub	r4,r2,r4
  809394:	00800e04 	movi	r2,56
  809398:	11004316 	blt	r2,r4,8094a8 <__pack_d+0x2cc>
  80939c:	21fff804 	addi	r7,r4,-32
  8093a0:	38004516 	blt	r7,zero,8094b8 <__pack_d+0x2dc>
  8093a4:	49d8d83a 	srl	r12,r9,r7
  8093a8:	001b883a 	mov	r13,zero
  8093ac:	0023883a 	mov	r17,zero
  8093b0:	01400044 	movi	r5,1
  8093b4:	0025883a 	mov	r18,zero
  8093b8:	38004716 	blt	r7,zero,8094d8 <__pack_d+0x2fc>
  8093bc:	29d6983a 	sll	r11,r5,r7
  8093c0:	0015883a 	mov	r10,zero
  8093c4:	00bfffc4 	movi	r2,-1
  8093c8:	5089883a 	add	r4,r10,r2
  8093cc:	588b883a 	add	r5,r11,r2
  8093d0:	228d803a 	cmpltu	r6,r4,r10
  8093d4:	314b883a 	add	r5,r6,r5
  8093d8:	4104703a 	and	r2,r8,r4
  8093dc:	4946703a 	and	r3,r9,r5
  8093e0:	10c4b03a 	or	r2,r2,r3
  8093e4:	10000226 	beq	r2,zero,8093f0 <__pack_d+0x214>
  8093e8:	04400044 	movi	r17,1
  8093ec:	0025883a 	mov	r18,zero
  8093f0:	00803fc4 	movi	r2,255
  8093f4:	644eb03a 	or	r7,r12,r17
  8093f8:	3892703a 	and	r9,r7,r2
  8093fc:	00802004 	movi	r2,128
  809400:	6c90b03a 	or	r8,r13,r18
  809404:	0015883a 	mov	r10,zero
  809408:	48801626 	beq	r9,r2,809464 <__pack_d+0x288>
  80940c:	01001fc4 	movi	r4,127
  809410:	3905883a 	add	r2,r7,r4
  809414:	11cd803a 	cmpltu	r6,r2,r7
  809418:	320d883a 	add	r6,r6,r8
  80941c:	100f883a 	mov	r7,r2
  809420:	00840034 	movhi	r2,4096
  809424:	10bfffc4 	addi	r2,r2,-1
  809428:	3011883a 	mov	r8,r6
  80942c:	0007883a 	mov	r3,zero
  809430:	11801b36 	bltu	r2,r6,8094a0 <__pack_d+0x2c4>
  809434:	4004963a 	slli	r2,r8,24
  809438:	3808d23a 	srli	r4,r7,8
  80943c:	400ad23a 	srli	r5,r8,8
  809440:	1813883a 	mov	r9,r3
  809444:	1108b03a 	or	r4,r2,r4
  809448:	00bfffc4 	movi	r2,-1
  80944c:	00c00434 	movhi	r3,16
  809450:	18ffffc4 	addi	r3,r3,-1
  809454:	208c703a 	and	r6,r4,r2
  809458:	28ce703a 	and	r7,r5,r3
  80945c:	4a01ffcc 	andi	r8,r9,2047
  809460:	003f7206 	br	80922c <__pack_d+0x50>
  809464:	503fe91e 	bne	r10,zero,80940c <__pack_d+0x230>
  809468:	01004004 	movi	r4,256
  80946c:	3904703a 	and	r2,r7,r4
  809470:	0007883a 	mov	r3,zero
  809474:	10c4b03a 	or	r2,r2,r3
  809478:	10000626 	beq	r2,zero,809494 <__pack_d+0x2b8>
  80947c:	3a45883a 	add	r2,r7,r9
  809480:	11cd803a 	cmpltu	r6,r2,r7
  809484:	320d883a 	add	r6,r6,r8
  809488:	100f883a 	mov	r7,r2
  80948c:	3011883a 	mov	r8,r6
  809490:	0007883a 	mov	r3,zero
  809494:	00840034 	movhi	r2,4096
  809498:	10bfffc4 	addi	r2,r2,-1
  80949c:	123fe52e 	bgeu	r2,r8,809434 <__pack_d+0x258>
  8094a0:	00c00044 	movi	r3,1
  8094a4:	003fe306 	br	809434 <__pack_d+0x258>
  8094a8:	0009883a 	mov	r4,zero
  8094ac:	0013883a 	mov	r9,zero
  8094b0:	000b883a 	mov	r5,zero
  8094b4:	003fe406 	br	809448 <__pack_d+0x26c>
  8094b8:	4a47883a 	add	r3,r9,r9
  8094bc:	008007c4 	movi	r2,31
  8094c0:	1105c83a 	sub	r2,r2,r4
  8094c4:	1886983a 	sll	r3,r3,r2
  8094c8:	4118d83a 	srl	r12,r8,r4
  8094cc:	491ad83a 	srl	r13,r9,r4
  8094d0:	1b18b03a 	or	r12,r3,r12
  8094d4:	003fb506 	br	8093ac <__pack_d+0x1d0>
  8094d8:	2806d07a 	srli	r3,r5,1
  8094dc:	008007c4 	movi	r2,31
  8094e0:	1105c83a 	sub	r2,r2,r4
  8094e4:	1896d83a 	srl	r11,r3,r2
  8094e8:	2914983a 	sll	r10,r5,r4
  8094ec:	003fb506 	br	8093c4 <__pack_d+0x1e8>

008094f0 <__unpack_d>:
  8094f0:	20c00117 	ldw	r3,4(r4)
  8094f4:	22400017 	ldw	r9,0(r4)
  8094f8:	00800434 	movhi	r2,16
  8094fc:	10bfffc4 	addi	r2,r2,-1
  809500:	1808d53a 	srli	r4,r3,20
  809504:	180cd7fa 	srli	r6,r3,31
  809508:	1894703a 	and	r10,r3,r2
  80950c:	2201ffcc 	andi	r8,r4,2047
  809510:	281b883a 	mov	r13,r5
  809514:	4817883a 	mov	r11,r9
  809518:	29800115 	stw	r6,4(r5)
  80951c:	5019883a 	mov	r12,r10
  809520:	40001e1e 	bne	r8,zero,80959c <__unpack_d+0xac>
  809524:	4a84b03a 	or	r2,r9,r10
  809528:	10001926 	beq	r2,zero,809590 <__unpack_d+0xa0>
  80952c:	4804d63a 	srli	r2,r9,24
  809530:	500c923a 	slli	r6,r10,8
  809534:	013f0084 	movi	r4,-1022
  809538:	00c40034 	movhi	r3,4096
  80953c:	18ffffc4 	addi	r3,r3,-1
  809540:	118cb03a 	or	r6,r2,r6
  809544:	008000c4 	movi	r2,3
  809548:	480a923a 	slli	r5,r9,8
  80954c:	68800015 	stw	r2,0(r13)
  809550:	69000215 	stw	r4,8(r13)
  809554:	19800b36 	bltu	r3,r6,809584 <__unpack_d+0x94>
  809558:	200f883a 	mov	r7,r4
  80955c:	1811883a 	mov	r8,r3
  809560:	2945883a 	add	r2,r5,r5
  809564:	1149803a 	cmpltu	r4,r2,r5
  809568:	3187883a 	add	r3,r6,r6
  80956c:	20c9883a 	add	r4,r4,r3
  809570:	100b883a 	mov	r5,r2
  809574:	200d883a 	mov	r6,r4
  809578:	39ffffc4 	addi	r7,r7,-1
  80957c:	413ff82e 	bgeu	r8,r4,809560 <__unpack_d+0x70>
  809580:	69c00215 	stw	r7,8(r13)
  809584:	69800415 	stw	r6,16(r13)
  809588:	69400315 	stw	r5,12(r13)
  80958c:	f800283a 	ret
  809590:	00800084 	movi	r2,2
  809594:	28800015 	stw	r2,0(r5)
  809598:	f800283a 	ret
  80959c:	0081ffc4 	movi	r2,2047
  8095a0:	40800f26 	beq	r8,r2,8095e0 <__unpack_d+0xf0>
  8095a4:	480cd63a 	srli	r6,r9,24
  8095a8:	5006923a 	slli	r3,r10,8
  8095ac:	4804923a 	slli	r2,r9,8
  8095b0:	0009883a 	mov	r4,zero
  8095b4:	30c6b03a 	or	r3,r6,r3
  8095b8:	01440034 	movhi	r5,4096
  8095bc:	110cb03a 	or	r6,r2,r4
  8095c0:	423f0044 	addi	r8,r8,-1023
  8095c4:	194eb03a 	or	r7,r3,r5
  8095c8:	008000c4 	movi	r2,3
  8095cc:	69c00415 	stw	r7,16(r13)
  8095d0:	6a000215 	stw	r8,8(r13)
  8095d4:	68800015 	stw	r2,0(r13)
  8095d8:	69800315 	stw	r6,12(r13)
  8095dc:	f800283a 	ret
  8095e0:	4a84b03a 	or	r2,r9,r10
  8095e4:	1000031e 	bne	r2,zero,8095f4 <__unpack_d+0x104>
  8095e8:	00800104 	movi	r2,4
  8095ec:	28800015 	stw	r2,0(r5)
  8095f0:	f800283a 	ret
  8095f4:	0009883a 	mov	r4,zero
  8095f8:	01400234 	movhi	r5,8
  8095fc:	4904703a 	and	r2,r9,r4
  809600:	5146703a 	and	r3,r10,r5
  809604:	10c4b03a 	or	r2,r2,r3
  809608:	10000526 	beq	r2,zero,809620 <__unpack_d+0x130>
  80960c:	00800044 	movi	r2,1
  809610:	68800015 	stw	r2,0(r13)
  809614:	6b000415 	stw	r12,16(r13)
  809618:	6ac00315 	stw	r11,12(r13)
  80961c:	f800283a 	ret
  809620:	68000015 	stw	zero,0(r13)
  809624:	003ffb06 	br	809614 <__unpack_d+0x124>

00809628 <__fpcmp_parts_d>:
  809628:	21800017 	ldw	r6,0(r4)
  80962c:	00c00044 	movi	r3,1
  809630:	19800a2e 	bgeu	r3,r6,80965c <__fpcmp_parts_d+0x34>
  809634:	28800017 	ldw	r2,0(r5)
  809638:	1880082e 	bgeu	r3,r2,80965c <__fpcmp_parts_d+0x34>
  80963c:	00c00104 	movi	r3,4
  809640:	30c02626 	beq	r6,r3,8096dc <__fpcmp_parts_d+0xb4>
  809644:	10c02226 	beq	r2,r3,8096d0 <__fpcmp_parts_d+0xa8>
  809648:	00c00084 	movi	r3,2
  80964c:	30c00526 	beq	r6,r3,809664 <__fpcmp_parts_d+0x3c>
  809650:	10c0071e 	bne	r2,r3,809670 <__fpcmp_parts_d+0x48>
  809654:	20800117 	ldw	r2,4(r4)
  809658:	1000091e 	bne	r2,zero,809680 <__fpcmp_parts_d+0x58>
  80965c:	00800044 	movi	r2,1
  809660:	f800283a 	ret
  809664:	10c01a1e 	bne	r2,r3,8096d0 <__fpcmp_parts_d+0xa8>
  809668:	0005883a 	mov	r2,zero
  80966c:	f800283a 	ret
  809670:	22000117 	ldw	r8,4(r4)
  809674:	28800117 	ldw	r2,4(r5)
  809678:	40800326 	beq	r8,r2,809688 <__fpcmp_parts_d+0x60>
  80967c:	403ff726 	beq	r8,zero,80965c <__fpcmp_parts_d+0x34>
  809680:	00bfffc4 	movi	r2,-1
  809684:	f800283a 	ret
  809688:	20c00217 	ldw	r3,8(r4)
  80968c:	28800217 	ldw	r2,8(r5)
  809690:	10fffa16 	blt	r2,r3,80967c <__fpcmp_parts_d+0x54>
  809694:	18800916 	blt	r3,r2,8096bc <__fpcmp_parts_d+0x94>
  809698:	21c00417 	ldw	r7,16(r4)
  80969c:	28c00417 	ldw	r3,16(r5)
  8096a0:	21800317 	ldw	r6,12(r4)
  8096a4:	28800317 	ldw	r2,12(r5)
  8096a8:	19fff436 	bltu	r3,r7,80967c <__fpcmp_parts_d+0x54>
  8096ac:	38c00526 	beq	r7,r3,8096c4 <__fpcmp_parts_d+0x9c>
  8096b0:	38c00236 	bltu	r7,r3,8096bc <__fpcmp_parts_d+0x94>
  8096b4:	19ffec1e 	bne	r3,r7,809668 <__fpcmp_parts_d+0x40>
  8096b8:	30bfeb2e 	bgeu	r6,r2,809668 <__fpcmp_parts_d+0x40>
  8096bc:	403fe71e 	bne	r8,zero,80965c <__fpcmp_parts_d+0x34>
  8096c0:	003fef06 	br	809680 <__fpcmp_parts_d+0x58>
  8096c4:	11bffa2e 	bgeu	r2,r6,8096b0 <__fpcmp_parts_d+0x88>
  8096c8:	403fe426 	beq	r8,zero,80965c <__fpcmp_parts_d+0x34>
  8096cc:	003fec06 	br	809680 <__fpcmp_parts_d+0x58>
  8096d0:	28800117 	ldw	r2,4(r5)
  8096d4:	103fe11e 	bne	r2,zero,80965c <__fpcmp_parts_d+0x34>
  8096d8:	003fe906 	br	809680 <__fpcmp_parts_d+0x58>
  8096dc:	11bfdd1e 	bne	r2,r6,809654 <__fpcmp_parts_d+0x2c>
  8096e0:	28c00117 	ldw	r3,4(r5)
  8096e4:	20800117 	ldw	r2,4(r4)
  8096e8:	1885c83a 	sub	r2,r3,r2
  8096ec:	f800283a 	ret

008096f0 <__errno>:
  8096f0:	00c020b4 	movhi	r3,130
  8096f4:	18f9c104 	addi	r3,r3,-6396
  8096f8:	18800017 	ldw	r2,0(r3)
  8096fc:	f800283a 	ret

00809700 <free>:
  809700:	008020b4 	movhi	r2,130
  809704:	10b9c104 	addi	r2,r2,-6396
  809708:	200b883a 	mov	r5,r4
  80970c:	11000017 	ldw	r4,0(r2)
  809710:	080dfb41 	jmpi	80dfb4 <_free_r>

00809714 <malloc>:
  809714:	008020b4 	movhi	r2,130
  809718:	10b9c104 	addi	r2,r2,-6396
  80971c:	200b883a 	mov	r5,r4
  809720:	11000017 	ldw	r4,0(r2)
  809724:	08097281 	jmpi	809728 <_malloc_r>

00809728 <_malloc_r>:
  809728:	defff604 	addi	sp,sp,-40
  80972c:	28c002c4 	addi	r3,r5,11
  809730:	00800584 	movi	r2,22
  809734:	dc800215 	stw	r18,8(sp)
  809738:	dfc00915 	stw	ra,36(sp)
  80973c:	df000815 	stw	fp,32(sp)
  809740:	ddc00715 	stw	r23,28(sp)
  809744:	dd800615 	stw	r22,24(sp)
  809748:	dd400515 	stw	r21,20(sp)
  80974c:	dd000415 	stw	r20,16(sp)
  809750:	dcc00315 	stw	r19,12(sp)
  809754:	dc400115 	stw	r17,4(sp)
  809758:	dc000015 	stw	r16,0(sp)
  80975c:	2025883a 	mov	r18,r4
  809760:	10c01236 	bltu	r2,r3,8097ac <_malloc_r+0x84>
  809764:	04400404 	movi	r17,16
  809768:	8940142e 	bgeu	r17,r5,8097bc <_malloc_r+0x94>
  80976c:	00800304 	movi	r2,12
  809770:	0007883a 	mov	r3,zero
  809774:	90800015 	stw	r2,0(r18)
  809778:	1805883a 	mov	r2,r3
  80977c:	dfc00917 	ldw	ra,36(sp)
  809780:	df000817 	ldw	fp,32(sp)
  809784:	ddc00717 	ldw	r23,28(sp)
  809788:	dd800617 	ldw	r22,24(sp)
  80978c:	dd400517 	ldw	r21,20(sp)
  809790:	dd000417 	ldw	r20,16(sp)
  809794:	dcc00317 	ldw	r19,12(sp)
  809798:	dc800217 	ldw	r18,8(sp)
  80979c:	dc400117 	ldw	r17,4(sp)
  8097a0:	dc000017 	ldw	r16,0(sp)
  8097a4:	dec00a04 	addi	sp,sp,40
  8097a8:	f800283a 	ret
  8097ac:	00bffe04 	movi	r2,-8
  8097b0:	18a2703a 	and	r17,r3,r2
  8097b4:	883fed16 	blt	r17,zero,80976c <_malloc_r+0x44>
  8097b8:	897fec36 	bltu	r17,r5,80976c <_malloc_r+0x44>
  8097bc:	9009883a 	mov	r4,r18
  8097c0:	08123780 	call	812378 <__malloc_lock>
  8097c4:	00807dc4 	movi	r2,503
  8097c8:	14402b2e 	bgeu	r2,r17,809878 <_malloc_r+0x150>
  8097cc:	8806d27a 	srli	r3,r17,9
  8097d0:	18003f1e 	bne	r3,zero,8098d0 <_malloc_r+0x1a8>
  8097d4:	880cd0fa 	srli	r6,r17,3
  8097d8:	300490fa 	slli	r2,r6,3
  8097dc:	02c020b4 	movhi	r11,130
  8097e0:	5af3df04 	addi	r11,r11,-12420
  8097e4:	12cb883a 	add	r5,r2,r11
  8097e8:	2c000317 	ldw	r16,12(r5)
  8097ec:	580f883a 	mov	r7,r11
  8097f0:	2c00041e 	bne	r5,r16,809804 <_malloc_r+0xdc>
  8097f4:	00000a06 	br	809820 <_malloc_r+0xf8>
  8097f8:	1800860e 	bge	r3,zero,809a14 <_malloc_r+0x2ec>
  8097fc:	84000317 	ldw	r16,12(r16)
  809800:	2c000726 	beq	r5,r16,809820 <_malloc_r+0xf8>
  809804:	80800117 	ldw	r2,4(r16)
  809808:	00ffff04 	movi	r3,-4
  80980c:	10c8703a 	and	r4,r2,r3
  809810:	2447c83a 	sub	r3,r4,r17
  809814:	008003c4 	movi	r2,15
  809818:	10fff70e 	bge	r2,r3,8097f8 <_malloc_r+0xd0>
  80981c:	31bfffc4 	addi	r6,r6,-1
  809820:	32400044 	addi	r9,r6,1
  809824:	028020b4 	movhi	r10,130
  809828:	52b3e104 	addi	r10,r10,-12412
  80982c:	54000217 	ldw	r16,8(r10)
  809830:	8280a026 	beq	r16,r10,809ab4 <_malloc_r+0x38c>
  809834:	80800117 	ldw	r2,4(r16)
  809838:	00ffff04 	movi	r3,-4
  80983c:	10ca703a 	and	r5,r2,r3
  809840:	2c4dc83a 	sub	r6,r5,r17
  809844:	008003c4 	movi	r2,15
  809848:	11808316 	blt	r2,r6,809a58 <_malloc_r+0x330>
  80984c:	52800315 	stw	r10,12(r10)
  809850:	52800215 	stw	r10,8(r10)
  809854:	30002916 	blt	r6,zero,8098fc <_malloc_r+0x1d4>
  809858:	8147883a 	add	r3,r16,r5
  80985c:	18800117 	ldw	r2,4(r3)
  809860:	9009883a 	mov	r4,r18
  809864:	10800054 	ori	r2,r2,1
  809868:	18800115 	stw	r2,4(r3)
  80986c:	08123980 	call	812398 <__malloc_unlock>
  809870:	80c00204 	addi	r3,r16,8
  809874:	003fc006 	br	809778 <_malloc_r+0x50>
  809878:	02c020b4 	movhi	r11,130
  80987c:	5af3df04 	addi	r11,r11,-12420
  809880:	8ac5883a 	add	r2,r17,r11
  809884:	14000317 	ldw	r16,12(r2)
  809888:	580f883a 	mov	r7,r11
  80988c:	8806d0fa 	srli	r3,r17,3
  809890:	14006c26 	beq	r2,r16,809a44 <_malloc_r+0x31c>
  809894:	80c00117 	ldw	r3,4(r16)
  809898:	00bfff04 	movi	r2,-4
  80989c:	81800317 	ldw	r6,12(r16)
  8098a0:	1886703a 	and	r3,r3,r2
  8098a4:	80c7883a 	add	r3,r16,r3
  8098a8:	18800117 	ldw	r2,4(r3)
  8098ac:	81400217 	ldw	r5,8(r16)
  8098b0:	9009883a 	mov	r4,r18
  8098b4:	10800054 	ori	r2,r2,1
  8098b8:	18800115 	stw	r2,4(r3)
  8098bc:	31400215 	stw	r5,8(r6)
  8098c0:	29800315 	stw	r6,12(r5)
  8098c4:	08123980 	call	812398 <__malloc_unlock>
  8098c8:	80c00204 	addi	r3,r16,8
  8098cc:	003faa06 	br	809778 <_malloc_r+0x50>
  8098d0:	00800104 	movi	r2,4
  8098d4:	10c0052e 	bgeu	r2,r3,8098ec <_malloc_r+0x1c4>
  8098d8:	00800504 	movi	r2,20
  8098dc:	10c07836 	bltu	r2,r3,809ac0 <_malloc_r+0x398>
  8098e0:	198016c4 	addi	r6,r3,91
  8098e4:	300490fa 	slli	r2,r6,3
  8098e8:	003fbc06 	br	8097dc <_malloc_r+0xb4>
  8098ec:	8804d1ba 	srli	r2,r17,6
  8098f0:	11800e04 	addi	r6,r2,56
  8098f4:	300490fa 	slli	r2,r6,3
  8098f8:	003fb806 	br	8097dc <_malloc_r+0xb4>
  8098fc:	00807fc4 	movi	r2,511
  809900:	1140bb36 	bltu	r2,r5,809bf0 <_malloc_r+0x4c8>
  809904:	2806d0fa 	srli	r3,r5,3
  809908:	573ffe04 	addi	fp,r10,-8
  80990c:	00800044 	movi	r2,1
  809910:	180890fa 	slli	r4,r3,3
  809914:	1807d0ba 	srai	r3,r3,2
  809918:	e1c00117 	ldw	r7,4(fp)
  80991c:	5909883a 	add	r4,r11,r4
  809920:	21400217 	ldw	r5,8(r4)
  809924:	10c4983a 	sll	r2,r2,r3
  809928:	81000315 	stw	r4,12(r16)
  80992c:	81400215 	stw	r5,8(r16)
  809930:	388eb03a 	or	r7,r7,r2
  809934:	2c000315 	stw	r16,12(r5)
  809938:	24000215 	stw	r16,8(r4)
  80993c:	e1c00115 	stw	r7,4(fp)
  809940:	4807883a 	mov	r3,r9
  809944:	4800cd16 	blt	r9,zero,809c7c <_malloc_r+0x554>
  809948:	1807d0ba 	srai	r3,r3,2
  80994c:	00800044 	movi	r2,1
  809950:	10c8983a 	sll	r4,r2,r3
  809954:	39004436 	bltu	r7,r4,809a68 <_malloc_r+0x340>
  809958:	21c4703a 	and	r2,r4,r7
  80995c:	10000a1e 	bne	r2,zero,809988 <_malloc_r+0x260>
  809960:	2109883a 	add	r4,r4,r4
  809964:	00bfff04 	movi	r2,-4
  809968:	4884703a 	and	r2,r9,r2
  80996c:	3906703a 	and	r3,r7,r4
  809970:	12400104 	addi	r9,r2,4
  809974:	1800041e 	bne	r3,zero,809988 <_malloc_r+0x260>
  809978:	2109883a 	add	r4,r4,r4
  80997c:	3904703a 	and	r2,r7,r4
  809980:	4a400104 	addi	r9,r9,4
  809984:	103ffc26 	beq	r2,zero,809978 <_malloc_r+0x250>
  809988:	480490fa 	slli	r2,r9,3
  80998c:	4819883a 	mov	r12,r9
  809990:	023fff04 	movi	r8,-4
  809994:	589b883a 	add	r13,r11,r2
  809998:	6807883a 	mov	r3,r13
  80999c:	014003c4 	movi	r5,15
  8099a0:	1c000317 	ldw	r16,12(r3)
  8099a4:	1c00041e 	bne	r3,r16,8099b8 <_malloc_r+0x290>
  8099a8:	0000a706 	br	809c48 <_malloc_r+0x520>
  8099ac:	3000ab0e 	bge	r6,zero,809c5c <_malloc_r+0x534>
  8099b0:	84000317 	ldw	r16,12(r16)
  8099b4:	1c00a426 	beq	r3,r16,809c48 <_malloc_r+0x520>
  8099b8:	80800117 	ldw	r2,4(r16)
  8099bc:	1204703a 	and	r2,r2,r8
  8099c0:	144dc83a 	sub	r6,r2,r17
  8099c4:	29bff90e 	bge	r5,r6,8099ac <_malloc_r+0x284>
  8099c8:	81000317 	ldw	r4,12(r16)
  8099cc:	80c00217 	ldw	r3,8(r16)
  8099d0:	89400054 	ori	r5,r17,1
  8099d4:	8445883a 	add	r2,r16,r17
  8099d8:	20c00215 	stw	r3,8(r4)
  8099dc:	19000315 	stw	r4,12(r3)
  8099e0:	81400115 	stw	r5,4(r16)
  8099e4:	1187883a 	add	r3,r2,r6
  8099e8:	31000054 	ori	r4,r6,1
  8099ec:	50800315 	stw	r2,12(r10)
  8099f0:	50800215 	stw	r2,8(r10)
  8099f4:	19800015 	stw	r6,0(r3)
  8099f8:	11000115 	stw	r4,4(r2)
  8099fc:	12800215 	stw	r10,8(r2)
  809a00:	12800315 	stw	r10,12(r2)
  809a04:	9009883a 	mov	r4,r18
  809a08:	08123980 	call	812398 <__malloc_unlock>
  809a0c:	80c00204 	addi	r3,r16,8
  809a10:	003f5906 	br	809778 <_malloc_r+0x50>
  809a14:	8109883a 	add	r4,r16,r4
  809a18:	20800117 	ldw	r2,4(r4)
  809a1c:	80c00217 	ldw	r3,8(r16)
  809a20:	81400317 	ldw	r5,12(r16)
  809a24:	10800054 	ori	r2,r2,1
  809a28:	20800115 	stw	r2,4(r4)
  809a2c:	28c00215 	stw	r3,8(r5)
  809a30:	19400315 	stw	r5,12(r3)
  809a34:	9009883a 	mov	r4,r18
  809a38:	08123980 	call	812398 <__malloc_unlock>
  809a3c:	80c00204 	addi	r3,r16,8
  809a40:	003f4d06 	br	809778 <_malloc_r+0x50>
  809a44:	80800204 	addi	r2,r16,8
  809a48:	14000317 	ldw	r16,12(r2)
  809a4c:	143f911e 	bne	r2,r16,809894 <_malloc_r+0x16c>
  809a50:	1a400084 	addi	r9,r3,2
  809a54:	003f7306 	br	809824 <_malloc_r+0xfc>
  809a58:	88c00054 	ori	r3,r17,1
  809a5c:	8445883a 	add	r2,r16,r17
  809a60:	80c00115 	stw	r3,4(r16)
  809a64:	003fdf06 	br	8099e4 <_malloc_r+0x2bc>
  809a68:	e4000217 	ldw	r16,8(fp)
  809a6c:	00bfff04 	movi	r2,-4
  809a70:	80c00117 	ldw	r3,4(r16)
  809a74:	802d883a 	mov	r22,r16
  809a78:	18aa703a 	and	r21,r3,r2
  809a7c:	ac401636 	bltu	r21,r17,809ad8 <_malloc_r+0x3b0>
  809a80:	ac49c83a 	sub	r4,r21,r17
  809a84:	008003c4 	movi	r2,15
  809a88:	1100130e 	bge	r2,r4,809ad8 <_malloc_r+0x3b0>
  809a8c:	88800054 	ori	r2,r17,1
  809a90:	8447883a 	add	r3,r16,r17
  809a94:	80800115 	stw	r2,4(r16)
  809a98:	20800054 	ori	r2,r4,1
  809a9c:	18800115 	stw	r2,4(r3)
  809aa0:	e0c00215 	stw	r3,8(fp)
  809aa4:	9009883a 	mov	r4,r18
  809aa8:	08123980 	call	812398 <__malloc_unlock>
  809aac:	80c00204 	addi	r3,r16,8
  809ab0:	003f3106 	br	809778 <_malloc_r+0x50>
  809ab4:	39c00117 	ldw	r7,4(r7)
  809ab8:	573ffe04 	addi	fp,r10,-8
  809abc:	003fa006 	br	809940 <_malloc_r+0x218>
  809ac0:	00801504 	movi	r2,84
  809ac4:	10c06736 	bltu	r2,r3,809c64 <_malloc_r+0x53c>
  809ac8:	8804d33a 	srli	r2,r17,12
  809acc:	11801b84 	addi	r6,r2,110
  809ad0:	300490fa 	slli	r2,r6,3
  809ad4:	003f4106 	br	8097dc <_malloc_r+0xb4>
  809ad8:	d0a73117 	ldw	r2,-25404(gp)
  809adc:	d0e00917 	ldw	r3,-32732(gp)
  809ae0:	053fffc4 	movi	r20,-1
  809ae4:	10800404 	addi	r2,r2,16
  809ae8:	88a7883a 	add	r19,r17,r2
  809aec:	1d000326 	beq	r3,r20,809afc <_malloc_r+0x3d4>
  809af0:	98c3ffc4 	addi	r3,r19,4095
  809af4:	00bc0004 	movi	r2,-4096
  809af8:	18a6703a 	and	r19,r3,r2
  809afc:	9009883a 	mov	r4,r18
  809b00:	980b883a 	mov	r5,r19
  809b04:	080a0280 	call	80a028 <_sbrk_r>
  809b08:	1009883a 	mov	r4,r2
  809b0c:	15000426 	beq	r2,r20,809b20 <_malloc_r+0x3f8>
  809b10:	854b883a 	add	r5,r16,r21
  809b14:	1029883a 	mov	r20,r2
  809b18:	11405a2e 	bgeu	r2,r5,809c84 <_malloc_r+0x55c>
  809b1c:	87000c26 	beq	r16,fp,809b50 <_malloc_r+0x428>
  809b20:	e4000217 	ldw	r16,8(fp)
  809b24:	80c00117 	ldw	r3,4(r16)
  809b28:	00bfff04 	movi	r2,-4
  809b2c:	1884703a 	and	r2,r3,r2
  809b30:	14400336 	bltu	r2,r17,809b40 <_malloc_r+0x418>
  809b34:	1449c83a 	sub	r4,r2,r17
  809b38:	008003c4 	movi	r2,15
  809b3c:	113fd316 	blt	r2,r4,809a8c <_malloc_r+0x364>
  809b40:	9009883a 	mov	r4,r18
  809b44:	08123980 	call	812398 <__malloc_unlock>
  809b48:	0007883a 	mov	r3,zero
  809b4c:	003f0a06 	br	809778 <_malloc_r+0x50>
  809b50:	05c020b4 	movhi	r23,130
  809b54:	bdc10c04 	addi	r23,r23,1072
  809b58:	b8800017 	ldw	r2,0(r23)
  809b5c:	988d883a 	add	r6,r19,r2
  809b60:	b9800015 	stw	r6,0(r23)
  809b64:	d0e00917 	ldw	r3,-32732(gp)
  809b68:	00bfffc4 	movi	r2,-1
  809b6c:	18808e26 	beq	r3,r2,809da8 <_malloc_r+0x680>
  809b70:	2145c83a 	sub	r2,r4,r5
  809b74:	3085883a 	add	r2,r6,r2
  809b78:	b8800015 	stw	r2,0(r23)
  809b7c:	20c001cc 	andi	r3,r4,7
  809b80:	18005f1e 	bne	r3,zero,809d00 <_malloc_r+0x5d8>
  809b84:	000b883a 	mov	r5,zero
  809b88:	a4c5883a 	add	r2,r20,r19
  809b8c:	1083ffcc 	andi	r2,r2,4095
  809b90:	00c40004 	movi	r3,4096
  809b94:	1887c83a 	sub	r3,r3,r2
  809b98:	28e7883a 	add	r19,r5,r3
  809b9c:	9009883a 	mov	r4,r18
  809ba0:	980b883a 	mov	r5,r19
  809ba4:	080a0280 	call	80a028 <_sbrk_r>
  809ba8:	1007883a 	mov	r3,r2
  809bac:	00bfffc4 	movi	r2,-1
  809bb0:	18807a26 	beq	r3,r2,809d9c <_malloc_r+0x674>
  809bb4:	1d05c83a 	sub	r2,r3,r20
  809bb8:	9885883a 	add	r2,r19,r2
  809bbc:	10c00054 	ori	r3,r2,1
  809bc0:	b8800017 	ldw	r2,0(r23)
  809bc4:	a021883a 	mov	r16,r20
  809bc8:	a0c00115 	stw	r3,4(r20)
  809bcc:	9885883a 	add	r2,r19,r2
  809bd0:	b8800015 	stw	r2,0(r23)
  809bd4:	e5000215 	stw	r20,8(fp)
  809bd8:	b7003626 	beq	r22,fp,809cb4 <_malloc_r+0x58c>
  809bdc:	018003c4 	movi	r6,15
  809be0:	35404b36 	bltu	r6,r21,809d10 <_malloc_r+0x5e8>
  809be4:	00800044 	movi	r2,1
  809be8:	a0800115 	stw	r2,4(r20)
  809bec:	003fcd06 	br	809b24 <_malloc_r+0x3fc>
  809bf0:	2808d27a 	srli	r4,r5,9
  809bf4:	2000371e 	bne	r4,zero,809cd4 <_malloc_r+0x5ac>
  809bf8:	2808d0fa 	srli	r4,r5,3
  809bfc:	200690fa 	slli	r3,r4,3
  809c00:	1ad1883a 	add	r8,r3,r11
  809c04:	41800217 	ldw	r6,8(r8)
  809c08:	41805b26 	beq	r8,r6,809d78 <_malloc_r+0x650>
  809c0c:	30800117 	ldw	r2,4(r6)
  809c10:	00ffff04 	movi	r3,-4
  809c14:	10c4703a 	and	r2,r2,r3
  809c18:	2880022e 	bgeu	r5,r2,809c24 <_malloc_r+0x4fc>
  809c1c:	31800217 	ldw	r6,8(r6)
  809c20:	41bffa1e 	bne	r8,r6,809c0c <_malloc_r+0x4e4>
  809c24:	32000317 	ldw	r8,12(r6)
  809c28:	39c00117 	ldw	r7,4(r7)
  809c2c:	82000315 	stw	r8,12(r16)
  809c30:	81800215 	stw	r6,8(r16)
  809c34:	070020b4 	movhi	fp,130
  809c38:	e733df04 	addi	fp,fp,-12420
  809c3c:	34000315 	stw	r16,12(r6)
  809c40:	44000215 	stw	r16,8(r8)
  809c44:	003f3e06 	br	809940 <_malloc_r+0x218>
  809c48:	63000044 	addi	r12,r12,1
  809c4c:	608000cc 	andi	r2,r12,3
  809c50:	10005d26 	beq	r2,zero,809dc8 <_malloc_r+0x6a0>
  809c54:	18c00204 	addi	r3,r3,8
  809c58:	003f5106 	br	8099a0 <_malloc_r+0x278>
  809c5c:	8089883a 	add	r4,r16,r2
  809c60:	003f6d06 	br	809a18 <_malloc_r+0x2f0>
  809c64:	00805504 	movi	r2,340
  809c68:	10c02036 	bltu	r2,r3,809cec <_malloc_r+0x5c4>
  809c6c:	8804d3fa 	srli	r2,r17,15
  809c70:	11801dc4 	addi	r6,r2,119
  809c74:	300490fa 	slli	r2,r6,3
  809c78:	003ed806 	br	8097dc <_malloc_r+0xb4>
  809c7c:	48c000c4 	addi	r3,r9,3
  809c80:	003f3106 	br	809948 <_malloc_r+0x220>
  809c84:	05c020b4 	movhi	r23,130
  809c88:	bdc10c04 	addi	r23,r23,1072
  809c8c:	b8800017 	ldw	r2,0(r23)
  809c90:	988d883a 	add	r6,r19,r2
  809c94:	b9800015 	stw	r6,0(r23)
  809c98:	293fb21e 	bne	r5,r4,809b64 <_malloc_r+0x43c>
  809c9c:	2083ffcc 	andi	r2,r4,4095
  809ca0:	103fb01e 	bne	r2,zero,809b64 <_malloc_r+0x43c>
  809ca4:	e4000217 	ldw	r16,8(fp)
  809ca8:	9d45883a 	add	r2,r19,r21
  809cac:	10800054 	ori	r2,r2,1
  809cb0:	80800115 	stw	r2,4(r16)
  809cb4:	b8c00017 	ldw	r3,0(r23)
  809cb8:	d0a73217 	ldw	r2,-25400(gp)
  809cbc:	10c0012e 	bgeu	r2,r3,809cc4 <_malloc_r+0x59c>
  809cc0:	d0e73215 	stw	r3,-25400(gp)
  809cc4:	d0a73317 	ldw	r2,-25396(gp)
  809cc8:	10ff962e 	bgeu	r2,r3,809b24 <_malloc_r+0x3fc>
  809ccc:	d0e73315 	stw	r3,-25396(gp)
  809cd0:	003f9406 	br	809b24 <_malloc_r+0x3fc>
  809cd4:	00800104 	movi	r2,4
  809cd8:	11001e36 	bltu	r2,r4,809d54 <_malloc_r+0x62c>
  809cdc:	2804d1ba 	srli	r2,r5,6
  809ce0:	11000e04 	addi	r4,r2,56
  809ce4:	200690fa 	slli	r3,r4,3
  809ce8:	003fc506 	br	809c00 <_malloc_r+0x4d8>
  809cec:	00815504 	movi	r2,1364
  809cf0:	10c01d2e 	bgeu	r2,r3,809d68 <_malloc_r+0x640>
  809cf4:	01801f84 	movi	r6,126
  809cf8:	0080fc04 	movi	r2,1008
  809cfc:	003eb706 	br	8097dc <_malloc_r+0xb4>
  809d00:	00800204 	movi	r2,8
  809d04:	10cbc83a 	sub	r5,r2,r3
  809d08:	2169883a 	add	r20,r4,r5
  809d0c:	003f9e06 	br	809b88 <_malloc_r+0x460>
  809d10:	00bffe04 	movi	r2,-8
  809d14:	a93ffd04 	addi	r4,r21,-12
  809d18:	2088703a 	and	r4,r4,r2
  809d1c:	b10b883a 	add	r5,r22,r4
  809d20:	00c00144 	movi	r3,5
  809d24:	28c00215 	stw	r3,8(r5)
  809d28:	28c00115 	stw	r3,4(r5)
  809d2c:	b0800117 	ldw	r2,4(r22)
  809d30:	1080004c 	andi	r2,r2,1
  809d34:	2084b03a 	or	r2,r4,r2
  809d38:	b0800115 	stw	r2,4(r22)
  809d3c:	313fdd2e 	bgeu	r6,r4,809cb4 <_malloc_r+0x58c>
  809d40:	b1400204 	addi	r5,r22,8
  809d44:	9009883a 	mov	r4,r18
  809d48:	080dfb40 	call	80dfb4 <_free_r>
  809d4c:	e4000217 	ldw	r16,8(fp)
  809d50:	003fd806 	br	809cb4 <_malloc_r+0x58c>
  809d54:	00800504 	movi	r2,20
  809d58:	11001536 	bltu	r2,r4,809db0 <_malloc_r+0x688>
  809d5c:	210016c4 	addi	r4,r4,91
  809d60:	200690fa 	slli	r3,r4,3
  809d64:	003fa606 	br	809c00 <_malloc_r+0x4d8>
  809d68:	8804d4ba 	srli	r2,r17,18
  809d6c:	11801f04 	addi	r6,r2,124
  809d70:	300490fa 	slli	r2,r6,3
  809d74:	003e9906 	br	8097dc <_malloc_r+0xb4>
  809d78:	2009d0ba 	srai	r4,r4,2
  809d7c:	014020b4 	movhi	r5,130
  809d80:	2973df04 	addi	r5,r5,-12420
  809d84:	00c00044 	movi	r3,1
  809d88:	28800117 	ldw	r2,4(r5)
  809d8c:	1906983a 	sll	r3,r3,r4
  809d90:	10c4b03a 	or	r2,r2,r3
  809d94:	28800115 	stw	r2,4(r5)
  809d98:	003fa306 	br	809c28 <_malloc_r+0x500>
  809d9c:	0027883a 	mov	r19,zero
  809da0:	00c00044 	movi	r3,1
  809da4:	003f8606 	br	809bc0 <_malloc_r+0x498>
  809da8:	d1200915 	stw	r4,-32732(gp)
  809dac:	003f7306 	br	809b7c <_malloc_r+0x454>
  809db0:	00801504 	movi	r2,84
  809db4:	11001936 	bltu	r2,r4,809e1c <_malloc_r+0x6f4>
  809db8:	2804d33a 	srli	r2,r5,12
  809dbc:	11001b84 	addi	r4,r2,110
  809dc0:	200690fa 	slli	r3,r4,3
  809dc4:	003f8e06 	br	809c00 <_malloc_r+0x4d8>
  809dc8:	480b883a 	mov	r5,r9
  809dcc:	6807883a 	mov	r3,r13
  809dd0:	288000cc 	andi	r2,r5,3
  809dd4:	18fffe04 	addi	r3,r3,-8
  809dd8:	297fffc4 	addi	r5,r5,-1
  809ddc:	10001526 	beq	r2,zero,809e34 <_malloc_r+0x70c>
  809de0:	18800217 	ldw	r2,8(r3)
  809de4:	10fffa26 	beq	r2,r3,809dd0 <_malloc_r+0x6a8>
  809de8:	2109883a 	add	r4,r4,r4
  809dec:	393f1e36 	bltu	r7,r4,809a68 <_malloc_r+0x340>
  809df0:	203f1d26 	beq	r4,zero,809a68 <_malloc_r+0x340>
  809df4:	21c4703a 	and	r2,r4,r7
  809df8:	10000226 	beq	r2,zero,809e04 <_malloc_r+0x6dc>
  809dfc:	6013883a 	mov	r9,r12
  809e00:	003ee106 	br	809988 <_malloc_r+0x260>
  809e04:	2109883a 	add	r4,r4,r4
  809e08:	3904703a 	and	r2,r7,r4
  809e0c:	63000104 	addi	r12,r12,4
  809e10:	103ffc26 	beq	r2,zero,809e04 <_malloc_r+0x6dc>
  809e14:	6013883a 	mov	r9,r12
  809e18:	003edb06 	br	809988 <_malloc_r+0x260>
  809e1c:	00805504 	movi	r2,340
  809e20:	11000836 	bltu	r2,r4,809e44 <_malloc_r+0x71c>
  809e24:	2804d3fa 	srli	r2,r5,15
  809e28:	11001dc4 	addi	r4,r2,119
  809e2c:	200690fa 	slli	r3,r4,3
  809e30:	003f7306 	br	809c00 <_malloc_r+0x4d8>
  809e34:	0104303a 	nor	r2,zero,r4
  809e38:	388e703a 	and	r7,r7,r2
  809e3c:	e1c00115 	stw	r7,4(fp)
  809e40:	003fe906 	br	809de8 <_malloc_r+0x6c0>
  809e44:	00815504 	movi	r2,1364
  809e48:	1100032e 	bgeu	r2,r4,809e58 <_malloc_r+0x730>
  809e4c:	01001f84 	movi	r4,126
  809e50:	00c0fc04 	movi	r3,1008
  809e54:	003f6a06 	br	809c00 <_malloc_r+0x4d8>
  809e58:	2804d4ba 	srli	r2,r5,18
  809e5c:	11001f04 	addi	r4,r2,124
  809e60:	200690fa 	slli	r3,r4,3
  809e64:	003f6606 	br	809c00 <_malloc_r+0x4d8>

00809e68 <printf>:
  809e68:	defffb04 	addi	sp,sp,-20
  809e6c:	dfc00115 	stw	ra,4(sp)
  809e70:	d9400215 	stw	r5,8(sp)
  809e74:	d9800315 	stw	r6,12(sp)
  809e78:	d9c00415 	stw	r7,16(sp)
  809e7c:	008020b4 	movhi	r2,130
  809e80:	10b9c104 	addi	r2,r2,-6396
  809e84:	10c00017 	ldw	r3,0(r2)
  809e88:	200b883a 	mov	r5,r4
  809e8c:	d8800204 	addi	r2,sp,8
  809e90:	19000217 	ldw	r4,8(r3)
  809e94:	100d883a 	mov	r6,r2
  809e98:	d8800015 	stw	r2,0(sp)
  809e9c:	080c06c0 	call	80c06c <__vfprintf_internal>
  809ea0:	dfc00117 	ldw	ra,4(sp)
  809ea4:	dec00504 	addi	sp,sp,20
  809ea8:	f800283a 	ret

00809eac <_printf_r>:
  809eac:	defffc04 	addi	sp,sp,-16
  809eb0:	dfc00115 	stw	ra,4(sp)
  809eb4:	d9800215 	stw	r6,8(sp)
  809eb8:	d9c00315 	stw	r7,12(sp)
  809ebc:	280d883a 	mov	r6,r5
  809ec0:	21400217 	ldw	r5,8(r4)
  809ec4:	d8c00204 	addi	r3,sp,8
  809ec8:	180f883a 	mov	r7,r3
  809ecc:	d8c00015 	stw	r3,0(sp)
  809ed0:	080a1c00 	call	80a1c0 <___vfprintf_internal_r>
  809ed4:	dfc00117 	ldw	ra,4(sp)
  809ed8:	dec00404 	addi	sp,sp,16
  809edc:	f800283a 	ret

00809ee0 <_puts_r>:
  809ee0:	defff604 	addi	sp,sp,-40
  809ee4:	dc400715 	stw	r17,28(sp)
  809ee8:	2023883a 	mov	r17,r4
  809eec:	2809883a 	mov	r4,r5
  809ef0:	dfc00915 	stw	ra,36(sp)
  809ef4:	dcc00815 	stw	r19,32(sp)
  809ef8:	2827883a 	mov	r19,r5
  809efc:	080a0980 	call	80a098 <strlen>
  809f00:	89400217 	ldw	r5,8(r17)
  809f04:	00c020b4 	movhi	r3,130
  809f08:	18f21f04 	addi	r3,r3,-14212
  809f0c:	01c00044 	movi	r7,1
  809f10:	12000044 	addi	r8,r2,1
  809f14:	d8c00515 	stw	r3,20(sp)
  809f18:	d9c00615 	stw	r7,24(sp)
  809f1c:	d8c00304 	addi	r3,sp,12
  809f20:	01c00084 	movi	r7,2
  809f24:	8809883a 	mov	r4,r17
  809f28:	d80d883a 	mov	r6,sp
  809f2c:	d8c00015 	stw	r3,0(sp)
  809f30:	dcc00315 	stw	r19,12(sp)
  809f34:	da000215 	stw	r8,8(sp)
  809f38:	d9c00115 	stw	r7,4(sp)
  809f3c:	d8800415 	stw	r2,16(sp)
  809f40:	080e2c80 	call	80e2c8 <__sfvwrite_r>
  809f44:	00ffffc4 	movi	r3,-1
  809f48:	10000626 	beq	r2,zero,809f64 <_puts_r+0x84>
  809f4c:	1805883a 	mov	r2,r3
  809f50:	dfc00917 	ldw	ra,36(sp)
  809f54:	dcc00817 	ldw	r19,32(sp)
  809f58:	dc400717 	ldw	r17,28(sp)
  809f5c:	dec00a04 	addi	sp,sp,40
  809f60:	f800283a 	ret
  809f64:	00c00284 	movi	r3,10
  809f68:	1805883a 	mov	r2,r3
  809f6c:	dfc00917 	ldw	ra,36(sp)
  809f70:	dcc00817 	ldw	r19,32(sp)
  809f74:	dc400717 	ldw	r17,28(sp)
  809f78:	dec00a04 	addi	sp,sp,40
  809f7c:	f800283a 	ret

00809f80 <puts>:
  809f80:	008020b4 	movhi	r2,130
  809f84:	10b9c104 	addi	r2,r2,-6396
  809f88:	200b883a 	mov	r5,r4
  809f8c:	11000017 	ldw	r4,0(r2)
  809f90:	0809ee01 	jmpi	809ee0 <_puts_r>

00809f94 <srand>:
  809f94:	008020b4 	movhi	r2,130
  809f98:	10b9c104 	addi	r2,r2,-6396
  809f9c:	11400017 	ldw	r5,0(r2)
  809fa0:	0007883a 	mov	r3,zero
  809fa4:	28c02a15 	stw	r3,168(r5)
  809fa8:	29002915 	stw	r4,164(r5)
  809fac:	f800283a 	ret

00809fb0 <rand>:
  809fb0:	defffe04 	addi	sp,sp,-8
  809fb4:	008020b4 	movhi	r2,130
  809fb8:	10b9c104 	addi	r2,r2,-6396
  809fbc:	dc000015 	stw	r16,0(sp)
  809fc0:	14000017 	ldw	r16,0(r2)
  809fc4:	dfc00115 	stw	ra,4(sp)
  809fc8:	00932574 	movhi	r2,19605
  809fcc:	109fcb44 	addi	r2,r2,32557
  809fd0:	82002917 	ldw	r8,164(r16)
  809fd4:	82402a17 	ldw	r9,168(r16)
  809fd8:	00d614b4 	movhi	r3,22610
  809fdc:	18fd0b44 	addi	r3,r3,-3027
  809fe0:	4009883a 	mov	r4,r8
  809fe4:	180f883a 	mov	r7,r3
  809fe8:	100d883a 	mov	r6,r2
  809fec:	480b883a 	mov	r5,r9
  809ff0:	0808e9c0 	call	808e9c <__muldi3>
  809ff4:	02000044 	movi	r8,1
  809ff8:	1209883a 	add	r4,r2,r8
  809ffc:	2095803a 	cmpltu	r10,r4,r2
  80a000:	50d5883a 	add	r10,r10,r3
  80a004:	81002915 	stw	r4,164(r16)
  80a008:	01200034 	movhi	r4,32768
  80a00c:	213fffc4 	addi	r4,r4,-1
  80a010:	2284703a 	and	r2,r4,r10
  80a014:	82802a15 	stw	r10,168(r16)
  80a018:	dfc00117 	ldw	ra,4(sp)
  80a01c:	dc000017 	ldw	r16,0(sp)
  80a020:	dec00204 	addi	sp,sp,8
  80a024:	f800283a 	ret

0080a028 <_sbrk_r>:
  80a028:	defffd04 	addi	sp,sp,-12
  80a02c:	dc000015 	stw	r16,0(sp)
  80a030:	040020b4 	movhi	r16,130
  80a034:	8400ef04 	addi	r16,r16,956
  80a038:	dc400115 	stw	r17,4(sp)
  80a03c:	80000015 	stw	zero,0(r16)
  80a040:	2023883a 	mov	r17,r4
  80a044:	2809883a 	mov	r4,r5
  80a048:	dfc00215 	stw	ra,8(sp)
  80a04c:	08125980 	call	812598 <sbrk>
  80a050:	1007883a 	mov	r3,r2
  80a054:	00bfffc4 	movi	r2,-1
  80a058:	18800626 	beq	r3,r2,80a074 <_sbrk_r+0x4c>
  80a05c:	1805883a 	mov	r2,r3
  80a060:	dfc00217 	ldw	ra,8(sp)
  80a064:	dc400117 	ldw	r17,4(sp)
  80a068:	dc000017 	ldw	r16,0(sp)
  80a06c:	dec00304 	addi	sp,sp,12
  80a070:	f800283a 	ret
  80a074:	80800017 	ldw	r2,0(r16)
  80a078:	103ff826 	beq	r2,zero,80a05c <_sbrk_r+0x34>
  80a07c:	88800015 	stw	r2,0(r17)
  80a080:	1805883a 	mov	r2,r3
  80a084:	dfc00217 	ldw	ra,8(sp)
  80a088:	dc400117 	ldw	r17,4(sp)
  80a08c:	dc000017 	ldw	r16,0(sp)
  80a090:	dec00304 	addi	sp,sp,12
  80a094:	f800283a 	ret

0080a098 <strlen>:
  80a098:	208000cc 	andi	r2,r4,3
  80a09c:	2011883a 	mov	r8,r4
  80a0a0:	1000161e 	bne	r2,zero,80a0fc <strlen+0x64>
  80a0a4:	20c00017 	ldw	r3,0(r4)
  80a0a8:	017fbff4 	movhi	r5,65279
  80a0ac:	297fbfc4 	addi	r5,r5,-257
  80a0b0:	01e02074 	movhi	r7,32897
  80a0b4:	39e02004 	addi	r7,r7,-32640
  80a0b8:	1945883a 	add	r2,r3,r5
  80a0bc:	11c4703a 	and	r2,r2,r7
  80a0c0:	00c6303a 	nor	r3,zero,r3
  80a0c4:	1886703a 	and	r3,r3,r2
  80a0c8:	18000c1e 	bne	r3,zero,80a0fc <strlen+0x64>
  80a0cc:	280d883a 	mov	r6,r5
  80a0d0:	380b883a 	mov	r5,r7
  80a0d4:	21000104 	addi	r4,r4,4
  80a0d8:	20800017 	ldw	r2,0(r4)
  80a0dc:	1187883a 	add	r3,r2,r6
  80a0e0:	1946703a 	and	r3,r3,r5
  80a0e4:	0084303a 	nor	r2,zero,r2
  80a0e8:	10c4703a 	and	r2,r2,r3
  80a0ec:	103ff926 	beq	r2,zero,80a0d4 <strlen+0x3c>
  80a0f0:	20800007 	ldb	r2,0(r4)
  80a0f4:	10000326 	beq	r2,zero,80a104 <strlen+0x6c>
  80a0f8:	21000044 	addi	r4,r4,1
  80a0fc:	20800007 	ldb	r2,0(r4)
  80a100:	103ffd1e 	bne	r2,zero,80a0f8 <strlen+0x60>
  80a104:	2205c83a 	sub	r2,r4,r8
  80a108:	f800283a 	ret

0080a10c <time>:
  80a10c:	defffc04 	addi	sp,sp,-16
  80a110:	008020b4 	movhi	r2,130
  80a114:	10b9c104 	addi	r2,r2,-6396
  80a118:	dc000215 	stw	r16,8(sp)
  80a11c:	2021883a 	mov	r16,r4
  80a120:	11000017 	ldw	r4,0(r2)
  80a124:	d80b883a 	mov	r5,sp
  80a128:	000d883a 	mov	r6,zero
  80a12c:	dfc00315 	stw	ra,12(sp)
  80a130:	080e8e40 	call	80e8e4 <_gettimeofday_r>
  80a134:	00ffffc4 	movi	r3,-1
  80a138:	10000416 	blt	r2,zero,80a14c <time+0x40>
  80a13c:	80000826 	beq	r16,zero,80a160 <time+0x54>
  80a140:	d8800017 	ldw	r2,0(sp)
  80a144:	80800015 	stw	r2,0(r16)
  80a148:	1007883a 	mov	r3,r2
  80a14c:	1805883a 	mov	r2,r3
  80a150:	dfc00317 	ldw	ra,12(sp)
  80a154:	dc000217 	ldw	r16,8(sp)
  80a158:	dec00404 	addi	sp,sp,16
  80a15c:	f800283a 	ret
  80a160:	d8800017 	ldw	r2,0(sp)
  80a164:	003ff806 	br	80a148 <time+0x3c>

0080a168 <__sprint_r>:
  80a168:	30800217 	ldw	r2,8(r6)
  80a16c:	defffe04 	addi	sp,sp,-8
  80a170:	dc000015 	stw	r16,0(sp)
  80a174:	dfc00115 	stw	ra,4(sp)
  80a178:	3021883a 	mov	r16,r6
  80a17c:	0007883a 	mov	r3,zero
  80a180:	1000061e 	bne	r2,zero,80a19c <__sprint_r+0x34>
  80a184:	1805883a 	mov	r2,r3
  80a188:	30000115 	stw	zero,4(r6)
  80a18c:	dfc00117 	ldw	ra,4(sp)
  80a190:	dc000017 	ldw	r16,0(sp)
  80a194:	dec00204 	addi	sp,sp,8
  80a198:	f800283a 	ret
  80a19c:	080e2c80 	call	80e2c8 <__sfvwrite_r>
  80a1a0:	1007883a 	mov	r3,r2
  80a1a4:	1805883a 	mov	r2,r3
  80a1a8:	80000115 	stw	zero,4(r16)
  80a1ac:	80000215 	stw	zero,8(r16)
  80a1b0:	dfc00117 	ldw	ra,4(sp)
  80a1b4:	dc000017 	ldw	r16,0(sp)
  80a1b8:	dec00204 	addi	sp,sp,8
  80a1bc:	f800283a 	ret

0080a1c0 <___vfprintf_internal_r>:
  80a1c0:	defea404 	addi	sp,sp,-1392
  80a1c4:	dd815815 	stw	r22,1376(sp)
  80a1c8:	dc015215 	stw	r16,1352(sp)
  80a1cc:	d9c15115 	stw	r7,1348(sp)
  80a1d0:	dfc15b15 	stw	ra,1388(sp)
  80a1d4:	df015a15 	stw	fp,1384(sp)
  80a1d8:	ddc15915 	stw	r23,1380(sp)
  80a1dc:	dd415715 	stw	r21,1372(sp)
  80a1e0:	dd015615 	stw	r20,1368(sp)
  80a1e4:	dcc15515 	stw	r19,1364(sp)
  80a1e8:	dc815415 	stw	r18,1360(sp)
  80a1ec:	dc415315 	stw	r17,1356(sp)
  80a1f0:	282d883a 	mov	r22,r5
  80a1f4:	3021883a 	mov	r16,r6
  80a1f8:	d9014f15 	stw	r4,1340(sp)
  80a1fc:	080e9600 	call	80e960 <_localeconv_r>
  80a200:	10800017 	ldw	r2,0(r2)
  80a204:	d9c15117 	ldw	r7,1348(sp)
  80a208:	d8814915 	stw	r2,1316(sp)
  80a20c:	d8814f17 	ldw	r2,1340(sp)
  80a210:	10000226 	beq	r2,zero,80a21c <___vfprintf_internal_r+0x5c>
  80a214:	10800e17 	ldw	r2,56(r2)
  80a218:	10020d26 	beq	r2,zero,80aa50 <___vfprintf_internal_r+0x890>
  80a21c:	b080030b 	ldhu	r2,12(r22)
  80a220:	1080020c 	andi	r2,r2,8
  80a224:	10020e26 	beq	r2,zero,80aa60 <___vfprintf_internal_r+0x8a0>
  80a228:	b0800417 	ldw	r2,16(r22)
  80a22c:	10020c26 	beq	r2,zero,80aa60 <___vfprintf_internal_r+0x8a0>
  80a230:	b200030b 	ldhu	r8,12(r22)
  80a234:	00800284 	movi	r2,10
  80a238:	40c0068c 	andi	r3,r8,26
  80a23c:	18802f1e 	bne	r3,r2,80a2fc <___vfprintf_internal_r+0x13c>
  80a240:	b080038f 	ldh	r2,14(r22)
  80a244:	10002d16 	blt	r2,zero,80a2fc <___vfprintf_internal_r+0x13c>
  80a248:	b240038b 	ldhu	r9,14(r22)
  80a24c:	b2800717 	ldw	r10,28(r22)
  80a250:	b2c00917 	ldw	r11,36(r22)
  80a254:	d9014f17 	ldw	r4,1340(sp)
  80a258:	dc402904 	addi	r17,sp,164
  80a25c:	d8804004 	addi	r2,sp,256
  80a260:	00c10004 	movi	r3,1024
  80a264:	423fff4c 	andi	r8,r8,65533
  80a268:	800d883a 	mov	r6,r16
  80a26c:	880b883a 	mov	r5,r17
  80a270:	da002c0d 	sth	r8,176(sp)
  80a274:	da402c8d 	sth	r9,178(sp)
  80a278:	da803015 	stw	r10,192(sp)
  80a27c:	dac03215 	stw	r11,200(sp)
  80a280:	d8802d15 	stw	r2,180(sp)
  80a284:	d8c02e15 	stw	r3,184(sp)
  80a288:	d8802915 	stw	r2,164(sp)
  80a28c:	d8c02b15 	stw	r3,172(sp)
  80a290:	d8002f15 	stw	zero,188(sp)
  80a294:	080a1c00 	call	80a1c0 <___vfprintf_internal_r>
  80a298:	d8814b15 	stw	r2,1324(sp)
  80a29c:	10000416 	blt	r2,zero,80a2b0 <___vfprintf_internal_r+0xf0>
  80a2a0:	d9014f17 	ldw	r4,1340(sp)
  80a2a4:	880b883a 	mov	r5,r17
  80a2a8:	080d9980 	call	80d998 <_fflush_r>
  80a2ac:	1002321e 	bne	r2,zero,80ab78 <___vfprintf_internal_r+0x9b8>
  80a2b0:	d8802c0b 	ldhu	r2,176(sp)
  80a2b4:	1080100c 	andi	r2,r2,64
  80a2b8:	10000326 	beq	r2,zero,80a2c8 <___vfprintf_internal_r+0x108>
  80a2bc:	b080030b 	ldhu	r2,12(r22)
  80a2c0:	10801014 	ori	r2,r2,64
  80a2c4:	b080030d 	sth	r2,12(r22)
  80a2c8:	d8814b17 	ldw	r2,1324(sp)
  80a2cc:	dfc15b17 	ldw	ra,1388(sp)
  80a2d0:	df015a17 	ldw	fp,1384(sp)
  80a2d4:	ddc15917 	ldw	r23,1380(sp)
  80a2d8:	dd815817 	ldw	r22,1376(sp)
  80a2dc:	dd415717 	ldw	r21,1372(sp)
  80a2e0:	dd015617 	ldw	r20,1368(sp)
  80a2e4:	dcc15517 	ldw	r19,1364(sp)
  80a2e8:	dc815417 	ldw	r18,1360(sp)
  80a2ec:	dc415317 	ldw	r17,1356(sp)
  80a2f0:	dc015217 	ldw	r16,1352(sp)
  80a2f4:	dec15c04 	addi	sp,sp,1392
  80a2f8:	f800283a 	ret
  80a2fc:	0005883a 	mov	r2,zero
  80a300:	0007883a 	mov	r3,zero
  80a304:	dd401904 	addi	r21,sp,100
  80a308:	d8814215 	stw	r2,1288(sp)
  80a30c:	802f883a 	mov	r23,r16
  80a310:	d8c14315 	stw	r3,1292(sp)
  80a314:	d8014b15 	stw	zero,1324(sp)
  80a318:	d8014815 	stw	zero,1312(sp)
  80a31c:	d8014415 	stw	zero,1296(sp)
  80a320:	d8014715 	stw	zero,1308(sp)
  80a324:	dd400c15 	stw	r21,48(sp)
  80a328:	d8000e15 	stw	zero,56(sp)
  80a32c:	d8000d15 	stw	zero,52(sp)
  80a330:	b8800007 	ldb	r2,0(r23)
  80a334:	10001926 	beq	r2,zero,80a39c <___vfprintf_internal_r+0x1dc>
  80a338:	00c00944 	movi	r3,37
  80a33c:	10c01726 	beq	r2,r3,80a39c <___vfprintf_internal_r+0x1dc>
  80a340:	b821883a 	mov	r16,r23
  80a344:	00000106 	br	80a34c <___vfprintf_internal_r+0x18c>
  80a348:	10c00326 	beq	r2,r3,80a358 <___vfprintf_internal_r+0x198>
  80a34c:	84000044 	addi	r16,r16,1
  80a350:	80800007 	ldb	r2,0(r16)
  80a354:	103ffc1e 	bne	r2,zero,80a348 <___vfprintf_internal_r+0x188>
  80a358:	85e7c83a 	sub	r19,r16,r23
  80a35c:	98000e26 	beq	r19,zero,80a398 <___vfprintf_internal_r+0x1d8>
  80a360:	dc800e17 	ldw	r18,56(sp)
  80a364:	dc400d17 	ldw	r17,52(sp)
  80a368:	008001c4 	movi	r2,7
  80a36c:	94e5883a 	add	r18,r18,r19
  80a370:	8c400044 	addi	r17,r17,1
  80a374:	adc00015 	stw	r23,0(r21)
  80a378:	dc800e15 	stw	r18,56(sp)
  80a37c:	acc00115 	stw	r19,4(r21)
  80a380:	dc400d15 	stw	r17,52(sp)
  80a384:	14428b16 	blt	r2,r17,80adb4 <___vfprintf_internal_r+0xbf4>
  80a388:	ad400204 	addi	r21,r21,8
  80a38c:	d9014b17 	ldw	r4,1324(sp)
  80a390:	24c9883a 	add	r4,r4,r19
  80a394:	d9014b15 	stw	r4,1324(sp)
  80a398:	802f883a 	mov	r23,r16
  80a39c:	b8800007 	ldb	r2,0(r23)
  80a3a0:	10013c26 	beq	r2,zero,80a894 <___vfprintf_internal_r+0x6d4>
  80a3a4:	bdc00044 	addi	r23,r23,1
  80a3a8:	d8000405 	stb	zero,16(sp)
  80a3ac:	b8c00007 	ldb	r3,0(r23)
  80a3b0:	04ffffc4 	movi	r19,-1
  80a3b4:	d8014c15 	stw	zero,1328(sp)
  80a3b8:	d8014a15 	stw	zero,1320(sp)
  80a3bc:	d8c14d15 	stw	r3,1332(sp)
  80a3c0:	bdc00044 	addi	r23,r23,1
  80a3c4:	d9414d17 	ldw	r5,1332(sp)
  80a3c8:	00801604 	movi	r2,88
  80a3cc:	28fff804 	addi	r3,r5,-32
  80a3d0:	10c06036 	bltu	r2,r3,80a554 <___vfprintf_internal_r+0x394>
  80a3d4:	18c5883a 	add	r2,r3,r3
  80a3d8:	1085883a 	add	r2,r2,r2
  80a3dc:	00c02074 	movhi	r3,129
  80a3e0:	18e8fc04 	addi	r3,r3,-23568
  80a3e4:	10c5883a 	add	r2,r2,r3
  80a3e8:	11000017 	ldw	r4,0(r2)
  80a3ec:	2000683a 	jmp	r4
  80a3f0:	0080b364 	muli	r2,zero,717
  80a3f4:	0080a554 	movui	r2,661
  80a3f8:	0080a554 	movui	r2,661
  80a3fc:	0080b350 	cmplti	r2,zero,717
  80a400:	0080a554 	movui	r2,661
  80a404:	0080a554 	movui	r2,661
  80a408:	0080a554 	movui	r2,661
  80a40c:	0080a554 	movui	r2,661
  80a410:	0080a554 	movui	r2,661
  80a414:	0080a554 	movui	r2,661
  80a418:	0080b130 	cmpltui	r2,zero,708
  80a41c:	0080b340 	call	80b34 <__reset-0x77f4cc>
  80a420:	0080a554 	movui	r2,661
  80a424:	0080b148 	cmpgei	r2,zero,709
  80a428:	0080b3dc 	xori	r2,zero,719
  80a42c:	0080a554 	movui	r2,661
  80a430:	0080b3c8 	cmpgei	r2,zero,719
  80a434:	0080b390 	cmplti	r2,zero,718
  80a438:	0080b390 	cmplti	r2,zero,718
  80a43c:	0080b390 	cmplti	r2,zero,718
  80a440:	0080b390 	cmplti	r2,zero,718
  80a444:	0080b390 	cmplti	r2,zero,718
  80a448:	0080b390 	cmplti	r2,zero,718
  80a44c:	0080b390 	cmplti	r2,zero,718
  80a450:	0080b390 	cmplti	r2,zero,718
  80a454:	0080b390 	cmplti	r2,zero,718
  80a458:	0080a554 	movui	r2,661
  80a45c:	0080a554 	movui	r2,661
  80a460:	0080a554 	movui	r2,661
  80a464:	0080a554 	movui	r2,661
  80a468:	0080a554 	movui	r2,661
  80a46c:	0080a554 	movui	r2,661
  80a470:	0080a554 	movui	r2,661
  80a474:	0080a554 	movui	r2,661
  80a478:	0080a554 	movui	r2,661
  80a47c:	0080a554 	movui	r2,661
  80a480:	0080abac 	andhi	r2,zero,686
  80a484:	0080b218 	cmpnei	r2,zero,712
  80a488:	0080a554 	movui	r2,661
  80a48c:	0080b218 	cmpnei	r2,zero,712
  80a490:	0080a554 	movui	r2,661
  80a494:	0080a554 	movui	r2,661
  80a498:	0080a554 	movui	r2,661
  80a49c:	0080a554 	movui	r2,661
  80a4a0:	0080b37c 	xorhi	r2,zero,717
  80a4a4:	0080a554 	movui	r2,661
  80a4a8:	0080a554 	movui	r2,661
  80a4ac:	0080ac60 	cmpeqi	r2,zero,689
  80a4b0:	0080a554 	movui	r2,661
  80a4b4:	0080a554 	movui	r2,661
  80a4b8:	0080a554 	movui	r2,661
  80a4bc:	0080a554 	movui	r2,661
  80a4c0:	0080a554 	movui	r2,661
  80a4c4:	0080acac 	andhi	r2,zero,690
  80a4c8:	0080a554 	movui	r2,661
  80a4cc:	0080a554 	movui	r2,661
  80a4d0:	0080b2cc 	andi	r2,zero,715
  80a4d4:	0080a554 	movui	r2,661
  80a4d8:	0080a554 	movui	r2,661
  80a4dc:	0080a554 	movui	r2,661
  80a4e0:	0080a554 	movui	r2,661
  80a4e4:	0080a554 	movui	r2,661
  80a4e8:	0080a554 	movui	r2,661
  80a4ec:	0080a554 	movui	r2,661
  80a4f0:	0080a554 	movui	r2,661
  80a4f4:	0080a554 	movui	r2,661
  80a4f8:	0080a554 	movui	r2,661
  80a4fc:	0080b2a0 	cmpeqi	r2,zero,714
  80a500:	0080abb8 	rdprs	r2,zero,686
  80a504:	0080b218 	cmpnei	r2,zero,712
  80a508:	0080b218 	cmpnei	r2,zero,712
  80a50c:	0080b218 	cmpnei	r2,zero,712
  80a510:	0080b204 	movi	r2,712
  80a514:	0080abb8 	rdprs	r2,zero,686
  80a518:	0080a554 	movui	r2,661
  80a51c:	0080a554 	movui	r2,661
  80a520:	0080b18c 	andi	r2,zero,710
  80a524:	0080a554 	movui	r2,661
  80a528:	0080b15c 	xori	r2,zero,709
  80a52c:	0080ac6c 	andhi	r2,zero,689
  80a530:	0080b1bc 	xorhi	r2,zero,710
  80a534:	0080b1a8 	cmpgeui	r2,zero,710
  80a538:	0080a554 	movui	r2,661
  80a53c:	0080b438 	rdprs	r2,zero,720
  80a540:	0080a554 	movui	r2,661
  80a544:	0080acb8 	rdprs	r2,zero,690
  80a548:	0080a554 	movui	r2,661
  80a54c:	0080a554 	movui	r2,661
  80a550:	0080b330 	cmpltui	r2,zero,716
  80a554:	d9014d17 	ldw	r4,1332(sp)
  80a558:	2000ce26 	beq	r4,zero,80a894 <___vfprintf_internal_r+0x6d4>
  80a55c:	01400044 	movi	r5,1
  80a560:	d9800f04 	addi	r6,sp,60
  80a564:	d9c14015 	stw	r7,1280(sp)
  80a568:	d9414515 	stw	r5,1300(sp)
  80a56c:	d9814115 	stw	r6,1284(sp)
  80a570:	280f883a 	mov	r7,r5
  80a574:	d9000f05 	stb	r4,60(sp)
  80a578:	d8000405 	stb	zero,16(sp)
  80a57c:	d8014615 	stw	zero,1304(sp)
  80a580:	d8c14c17 	ldw	r3,1328(sp)
  80a584:	1880008c 	andi	r2,r3,2
  80a588:	1005003a 	cmpeq	r2,r2,zero
  80a58c:	d8815015 	stw	r2,1344(sp)
  80a590:	1000031e 	bne	r2,zero,80a5a0 <___vfprintf_internal_r+0x3e0>
  80a594:	d9014517 	ldw	r4,1300(sp)
  80a598:	21000084 	addi	r4,r4,2
  80a59c:	d9014515 	stw	r4,1300(sp)
  80a5a0:	d9414c17 	ldw	r5,1328(sp)
  80a5a4:	2940210c 	andi	r5,r5,132
  80a5a8:	d9414e15 	stw	r5,1336(sp)
  80a5ac:	28002d1e 	bne	r5,zero,80a664 <___vfprintf_internal_r+0x4a4>
  80a5b0:	d9814a17 	ldw	r6,1320(sp)
  80a5b4:	d8814517 	ldw	r2,1300(sp)
  80a5b8:	30a1c83a 	sub	r16,r6,r2
  80a5bc:	0400290e 	bge	zero,r16,80a664 <___vfprintf_internal_r+0x4a4>
  80a5c0:	00800404 	movi	r2,16
  80a5c4:	1404580e 	bge	r2,r16,80b728 <___vfprintf_internal_r+0x1568>
  80a5c8:	dc800e17 	ldw	r18,56(sp)
  80a5cc:	dc400d17 	ldw	r17,52(sp)
  80a5d0:	1027883a 	mov	r19,r2
  80a5d4:	070020b4 	movhi	fp,130
  80a5d8:	e7323b84 	addi	fp,fp,-14098
  80a5dc:	050001c4 	movi	r20,7
  80a5e0:	00000306 	br	80a5f0 <___vfprintf_internal_r+0x430>
  80a5e4:	843ffc04 	addi	r16,r16,-16
  80a5e8:	ad400204 	addi	r21,r21,8
  80a5ec:	9c00130e 	bge	r19,r16,80a63c <___vfprintf_internal_r+0x47c>
  80a5f0:	94800404 	addi	r18,r18,16
  80a5f4:	8c400044 	addi	r17,r17,1
  80a5f8:	af000015 	stw	fp,0(r21)
  80a5fc:	acc00115 	stw	r19,4(r21)
  80a600:	dc800e15 	stw	r18,56(sp)
  80a604:	dc400d15 	stw	r17,52(sp)
  80a608:	a47ff60e 	bge	r20,r17,80a5e4 <___vfprintf_internal_r+0x424>
  80a60c:	d9014f17 	ldw	r4,1340(sp)
  80a610:	b00b883a 	mov	r5,r22
  80a614:	d9800c04 	addi	r6,sp,48
  80a618:	d9c15115 	stw	r7,1348(sp)
  80a61c:	080a1680 	call	80a168 <__sprint_r>
  80a620:	d9c15117 	ldw	r7,1348(sp)
  80a624:	10009e1e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80a628:	843ffc04 	addi	r16,r16,-16
  80a62c:	dc800e17 	ldw	r18,56(sp)
  80a630:	dc400d17 	ldw	r17,52(sp)
  80a634:	dd401904 	addi	r21,sp,100
  80a638:	9c3fed16 	blt	r19,r16,80a5f0 <___vfprintf_internal_r+0x430>
  80a63c:	9425883a 	add	r18,r18,r16
  80a640:	8c400044 	addi	r17,r17,1
  80a644:	008001c4 	movi	r2,7
  80a648:	af000015 	stw	fp,0(r21)
  80a64c:	ac000115 	stw	r16,4(r21)
  80a650:	dc800e15 	stw	r18,56(sp)
  80a654:	dc400d15 	stw	r17,52(sp)
  80a658:	1441f516 	blt	r2,r17,80ae30 <___vfprintf_internal_r+0xc70>
  80a65c:	ad400204 	addi	r21,r21,8
  80a660:	00000206 	br	80a66c <___vfprintf_internal_r+0x4ac>
  80a664:	dc800e17 	ldw	r18,56(sp)
  80a668:	dc400d17 	ldw	r17,52(sp)
  80a66c:	d8800407 	ldb	r2,16(sp)
  80a670:	10000b26 	beq	r2,zero,80a6a0 <___vfprintf_internal_r+0x4e0>
  80a674:	00800044 	movi	r2,1
  80a678:	94800044 	addi	r18,r18,1
  80a67c:	8c400044 	addi	r17,r17,1
  80a680:	a8800115 	stw	r2,4(r21)
  80a684:	d8c00404 	addi	r3,sp,16
  80a688:	008001c4 	movi	r2,7
  80a68c:	a8c00015 	stw	r3,0(r21)
  80a690:	dc800e15 	stw	r18,56(sp)
  80a694:	dc400d15 	stw	r17,52(sp)
  80a698:	1441da16 	blt	r2,r17,80ae04 <___vfprintf_internal_r+0xc44>
  80a69c:	ad400204 	addi	r21,r21,8
  80a6a0:	d9015017 	ldw	r4,1344(sp)
  80a6a4:	20000b1e 	bne	r4,zero,80a6d4 <___vfprintf_internal_r+0x514>
  80a6a8:	d8800444 	addi	r2,sp,17
  80a6ac:	94800084 	addi	r18,r18,2
  80a6b0:	8c400044 	addi	r17,r17,1
  80a6b4:	a8800015 	stw	r2,0(r21)
  80a6b8:	00c00084 	movi	r3,2
  80a6bc:	008001c4 	movi	r2,7
  80a6c0:	a8c00115 	stw	r3,4(r21)
  80a6c4:	dc800e15 	stw	r18,56(sp)
  80a6c8:	dc400d15 	stw	r17,52(sp)
  80a6cc:	1441c216 	blt	r2,r17,80add8 <___vfprintf_internal_r+0xc18>
  80a6d0:	ad400204 	addi	r21,r21,8
  80a6d4:	d9414e17 	ldw	r5,1336(sp)
  80a6d8:	00802004 	movi	r2,128
  80a6dc:	2880b126 	beq	r5,r2,80a9a4 <___vfprintf_internal_r+0x7e4>
  80a6e0:	d8c14617 	ldw	r3,1304(sp)
  80a6e4:	19e1c83a 	sub	r16,r3,r7
  80a6e8:	0400260e 	bge	zero,r16,80a784 <___vfprintf_internal_r+0x5c4>
  80a6ec:	00800404 	movi	r2,16
  80a6f0:	1403c90e 	bge	r2,r16,80b618 <___vfprintf_internal_r+0x1458>
  80a6f4:	1027883a 	mov	r19,r2
  80a6f8:	070020b4 	movhi	fp,130
  80a6fc:	e7323784 	addi	fp,fp,-14114
  80a700:	050001c4 	movi	r20,7
  80a704:	00000306 	br	80a714 <___vfprintf_internal_r+0x554>
  80a708:	843ffc04 	addi	r16,r16,-16
  80a70c:	ad400204 	addi	r21,r21,8
  80a710:	9c00130e 	bge	r19,r16,80a760 <___vfprintf_internal_r+0x5a0>
  80a714:	94800404 	addi	r18,r18,16
  80a718:	8c400044 	addi	r17,r17,1
  80a71c:	af000015 	stw	fp,0(r21)
  80a720:	acc00115 	stw	r19,4(r21)
  80a724:	dc800e15 	stw	r18,56(sp)
  80a728:	dc400d15 	stw	r17,52(sp)
  80a72c:	a47ff60e 	bge	r20,r17,80a708 <___vfprintf_internal_r+0x548>
  80a730:	d9014f17 	ldw	r4,1340(sp)
  80a734:	b00b883a 	mov	r5,r22
  80a738:	d9800c04 	addi	r6,sp,48
  80a73c:	d9c15115 	stw	r7,1348(sp)
  80a740:	080a1680 	call	80a168 <__sprint_r>
  80a744:	d9c15117 	ldw	r7,1348(sp)
  80a748:	1000551e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80a74c:	843ffc04 	addi	r16,r16,-16
  80a750:	dc800e17 	ldw	r18,56(sp)
  80a754:	dc400d17 	ldw	r17,52(sp)
  80a758:	dd401904 	addi	r21,sp,100
  80a75c:	9c3fed16 	blt	r19,r16,80a714 <___vfprintf_internal_r+0x554>
  80a760:	9425883a 	add	r18,r18,r16
  80a764:	8c400044 	addi	r17,r17,1
  80a768:	008001c4 	movi	r2,7
  80a76c:	af000015 	stw	fp,0(r21)
  80a770:	ac000115 	stw	r16,4(r21)
  80a774:	dc800e15 	stw	r18,56(sp)
  80a778:	dc400d15 	stw	r17,52(sp)
  80a77c:	14418216 	blt	r2,r17,80ad88 <___vfprintf_internal_r+0xbc8>
  80a780:	ad400204 	addi	r21,r21,8
  80a784:	d9014c17 	ldw	r4,1328(sp)
  80a788:	2080400c 	andi	r2,r4,256
  80a78c:	10004a1e 	bne	r2,zero,80a8b8 <___vfprintf_internal_r+0x6f8>
  80a790:	d9414117 	ldw	r5,1284(sp)
  80a794:	91e5883a 	add	r18,r18,r7
  80a798:	8c400044 	addi	r17,r17,1
  80a79c:	008001c4 	movi	r2,7
  80a7a0:	a9400015 	stw	r5,0(r21)
  80a7a4:	a9c00115 	stw	r7,4(r21)
  80a7a8:	dc800e15 	stw	r18,56(sp)
  80a7ac:	dc400d15 	stw	r17,52(sp)
  80a7b0:	14416716 	blt	r2,r17,80ad50 <___vfprintf_internal_r+0xb90>
  80a7b4:	a8c00204 	addi	r3,r21,8
  80a7b8:	d9814c17 	ldw	r6,1328(sp)
  80a7bc:	3080010c 	andi	r2,r6,4
  80a7c0:	10002826 	beq	r2,zero,80a864 <___vfprintf_internal_r+0x6a4>
  80a7c4:	d8814a17 	ldw	r2,1320(sp)
  80a7c8:	d9014517 	ldw	r4,1300(sp)
  80a7cc:	1121c83a 	sub	r16,r2,r4
  80a7d0:	0400240e 	bge	zero,r16,80a864 <___vfprintf_internal_r+0x6a4>
  80a7d4:	00800404 	movi	r2,16
  80a7d8:	14044f0e 	bge	r2,r16,80b918 <___vfprintf_internal_r+0x1758>
  80a7dc:	dc400d17 	ldw	r17,52(sp)
  80a7e0:	1027883a 	mov	r19,r2
  80a7e4:	070020b4 	movhi	fp,130
  80a7e8:	e7323b84 	addi	fp,fp,-14098
  80a7ec:	050001c4 	movi	r20,7
  80a7f0:	00000306 	br	80a800 <___vfprintf_internal_r+0x640>
  80a7f4:	843ffc04 	addi	r16,r16,-16
  80a7f8:	18c00204 	addi	r3,r3,8
  80a7fc:	9c00110e 	bge	r19,r16,80a844 <___vfprintf_internal_r+0x684>
  80a800:	94800404 	addi	r18,r18,16
  80a804:	8c400044 	addi	r17,r17,1
  80a808:	1f000015 	stw	fp,0(r3)
  80a80c:	1cc00115 	stw	r19,4(r3)
  80a810:	dc800e15 	stw	r18,56(sp)
  80a814:	dc400d15 	stw	r17,52(sp)
  80a818:	a47ff60e 	bge	r20,r17,80a7f4 <___vfprintf_internal_r+0x634>
  80a81c:	d9014f17 	ldw	r4,1340(sp)
  80a820:	b00b883a 	mov	r5,r22
  80a824:	d9800c04 	addi	r6,sp,48
  80a828:	080a1680 	call	80a168 <__sprint_r>
  80a82c:	10001c1e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80a830:	843ffc04 	addi	r16,r16,-16
  80a834:	dc800e17 	ldw	r18,56(sp)
  80a838:	dc400d17 	ldw	r17,52(sp)
  80a83c:	d8c01904 	addi	r3,sp,100
  80a840:	9c3fef16 	blt	r19,r16,80a800 <___vfprintf_internal_r+0x640>
  80a844:	9425883a 	add	r18,r18,r16
  80a848:	8c400044 	addi	r17,r17,1
  80a84c:	008001c4 	movi	r2,7
  80a850:	1f000015 	stw	fp,0(r3)
  80a854:	1c000115 	stw	r16,4(r3)
  80a858:	dc800e15 	stw	r18,56(sp)
  80a85c:	dc400d15 	stw	r17,52(sp)
  80a860:	1440cb16 	blt	r2,r17,80ab90 <___vfprintf_internal_r+0x9d0>
  80a864:	d8814a17 	ldw	r2,1320(sp)
  80a868:	d9414517 	ldw	r5,1300(sp)
  80a86c:	1140010e 	bge	r2,r5,80a874 <___vfprintf_internal_r+0x6b4>
  80a870:	2805883a 	mov	r2,r5
  80a874:	d9814b17 	ldw	r6,1324(sp)
  80a878:	308d883a 	add	r6,r6,r2
  80a87c:	d9814b15 	stw	r6,1324(sp)
  80a880:	90013b1e 	bne	r18,zero,80ad70 <___vfprintf_internal_r+0xbb0>
  80a884:	d9c14017 	ldw	r7,1280(sp)
  80a888:	dd401904 	addi	r21,sp,100
  80a88c:	d8000d15 	stw	zero,52(sp)
  80a890:	003ea706 	br	80a330 <___vfprintf_internal_r+0x170>
  80a894:	d8800e17 	ldw	r2,56(sp)
  80a898:	10053f1e 	bne	r2,zero,80bd98 <___vfprintf_internal_r+0x1bd8>
  80a89c:	d8000d15 	stw	zero,52(sp)
  80a8a0:	b080030b 	ldhu	r2,12(r22)
  80a8a4:	1080100c 	andi	r2,r2,64
  80a8a8:	103e8726 	beq	r2,zero,80a2c8 <___vfprintf_internal_r+0x108>
  80a8ac:	00bfffc4 	movi	r2,-1
  80a8b0:	d8814b15 	stw	r2,1324(sp)
  80a8b4:	003e8406 	br	80a2c8 <___vfprintf_internal_r+0x108>
  80a8b8:	d9814d17 	ldw	r6,1332(sp)
  80a8bc:	00801944 	movi	r2,101
  80a8c0:	11806e16 	blt	r2,r6,80aa7c <___vfprintf_internal_r+0x8bc>
  80a8c4:	d9414717 	ldw	r5,1308(sp)
  80a8c8:	00c00044 	movi	r3,1
  80a8cc:	1943430e 	bge	r3,r5,80b5dc <___vfprintf_internal_r+0x141c>
  80a8d0:	d8814117 	ldw	r2,1284(sp)
  80a8d4:	94800044 	addi	r18,r18,1
  80a8d8:	8c400044 	addi	r17,r17,1
  80a8dc:	a8800015 	stw	r2,0(r21)
  80a8e0:	008001c4 	movi	r2,7
  80a8e4:	a8c00115 	stw	r3,4(r21)
  80a8e8:	dc800e15 	stw	r18,56(sp)
  80a8ec:	dc400d15 	stw	r17,52(sp)
  80a8f0:	1441ca16 	blt	r2,r17,80b01c <___vfprintf_internal_r+0xe5c>
  80a8f4:	a8c00204 	addi	r3,r21,8
  80a8f8:	d9014917 	ldw	r4,1316(sp)
  80a8fc:	00800044 	movi	r2,1
  80a900:	94800044 	addi	r18,r18,1
  80a904:	8c400044 	addi	r17,r17,1
  80a908:	18800115 	stw	r2,4(r3)
  80a90c:	008001c4 	movi	r2,7
  80a910:	19000015 	stw	r4,0(r3)
  80a914:	dc800e15 	stw	r18,56(sp)
  80a918:	dc400d15 	stw	r17,52(sp)
  80a91c:	1441b616 	blt	r2,r17,80aff8 <___vfprintf_internal_r+0xe38>
  80a920:	1cc00204 	addi	r19,r3,8
  80a924:	d9014217 	ldw	r4,1288(sp)
  80a928:	d9414317 	ldw	r5,1292(sp)
  80a92c:	000d883a 	mov	r6,zero
  80a930:	000f883a 	mov	r7,zero
  80a934:	08089280 	call	808928 <__nedf2>
  80a938:	10017426 	beq	r2,zero,80af0c <___vfprintf_internal_r+0xd4c>
  80a93c:	d9414717 	ldw	r5,1308(sp)
  80a940:	d9814117 	ldw	r6,1284(sp)
  80a944:	8c400044 	addi	r17,r17,1
  80a948:	2c85883a 	add	r2,r5,r18
  80a94c:	14bfffc4 	addi	r18,r2,-1
  80a950:	28bfffc4 	addi	r2,r5,-1
  80a954:	30c00044 	addi	r3,r6,1
  80a958:	98800115 	stw	r2,4(r19)
  80a95c:	008001c4 	movi	r2,7
  80a960:	98c00015 	stw	r3,0(r19)
  80a964:	dc800e15 	stw	r18,56(sp)
  80a968:	dc400d15 	stw	r17,52(sp)
  80a96c:	14418e16 	blt	r2,r17,80afa8 <___vfprintf_internal_r+0xde8>
  80a970:	9cc00204 	addi	r19,r19,8
  80a974:	d9414817 	ldw	r5,1312(sp)
  80a978:	d8800804 	addi	r2,sp,32
  80a97c:	8c400044 	addi	r17,r17,1
  80a980:	9165883a 	add	r18,r18,r5
  80a984:	98800015 	stw	r2,0(r19)
  80a988:	008001c4 	movi	r2,7
  80a98c:	99400115 	stw	r5,4(r19)
  80a990:	dc800e15 	stw	r18,56(sp)
  80a994:	dc400d15 	stw	r17,52(sp)
  80a998:	1440ed16 	blt	r2,r17,80ad50 <___vfprintf_internal_r+0xb90>
  80a99c:	98c00204 	addi	r3,r19,8
  80a9a0:	003f8506 	br	80a7b8 <___vfprintf_internal_r+0x5f8>
  80a9a4:	d9814a17 	ldw	r6,1320(sp)
  80a9a8:	d8814517 	ldw	r2,1300(sp)
  80a9ac:	30a1c83a 	sub	r16,r6,r2
  80a9b0:	043f4b0e 	bge	zero,r16,80a6e0 <___vfprintf_internal_r+0x520>
  80a9b4:	00800404 	movi	r2,16
  80a9b8:	1404340e 	bge	r2,r16,80ba8c <___vfprintf_internal_r+0x18cc>
  80a9bc:	1027883a 	mov	r19,r2
  80a9c0:	070020b4 	movhi	fp,130
  80a9c4:	e7323784 	addi	fp,fp,-14114
  80a9c8:	050001c4 	movi	r20,7
  80a9cc:	00000306 	br	80a9dc <___vfprintf_internal_r+0x81c>
  80a9d0:	843ffc04 	addi	r16,r16,-16
  80a9d4:	ad400204 	addi	r21,r21,8
  80a9d8:	9c00130e 	bge	r19,r16,80aa28 <___vfprintf_internal_r+0x868>
  80a9dc:	94800404 	addi	r18,r18,16
  80a9e0:	8c400044 	addi	r17,r17,1
  80a9e4:	af000015 	stw	fp,0(r21)
  80a9e8:	acc00115 	stw	r19,4(r21)
  80a9ec:	dc800e15 	stw	r18,56(sp)
  80a9f0:	dc400d15 	stw	r17,52(sp)
  80a9f4:	a47ff60e 	bge	r20,r17,80a9d0 <___vfprintf_internal_r+0x810>
  80a9f8:	d9014f17 	ldw	r4,1340(sp)
  80a9fc:	b00b883a 	mov	r5,r22
  80aa00:	d9800c04 	addi	r6,sp,48
  80aa04:	d9c15115 	stw	r7,1348(sp)
  80aa08:	080a1680 	call	80a168 <__sprint_r>
  80aa0c:	d9c15117 	ldw	r7,1348(sp)
  80aa10:	103fa31e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80aa14:	843ffc04 	addi	r16,r16,-16
  80aa18:	dc800e17 	ldw	r18,56(sp)
  80aa1c:	dc400d17 	ldw	r17,52(sp)
  80aa20:	dd401904 	addi	r21,sp,100
  80aa24:	9c3fed16 	blt	r19,r16,80a9dc <___vfprintf_internal_r+0x81c>
  80aa28:	9425883a 	add	r18,r18,r16
  80aa2c:	8c400044 	addi	r17,r17,1
  80aa30:	008001c4 	movi	r2,7
  80aa34:	af000015 	stw	fp,0(r21)
  80aa38:	ac000115 	stw	r16,4(r21)
  80aa3c:	dc800e15 	stw	r18,56(sp)
  80aa40:	dc400d15 	stw	r17,52(sp)
  80aa44:	14416116 	blt	r2,r17,80afcc <___vfprintf_internal_r+0xe0c>
  80aa48:	ad400204 	addi	r21,r21,8
  80aa4c:	003f2406 	br	80a6e0 <___vfprintf_internal_r+0x520>
  80aa50:	d9014f17 	ldw	r4,1340(sp)
  80aa54:	080dc300 	call	80dc30 <__sinit>
  80aa58:	d9c15117 	ldw	r7,1348(sp)
  80aa5c:	003def06 	br	80a21c <___vfprintf_internal_r+0x5c>
  80aa60:	d9014f17 	ldw	r4,1340(sp)
  80aa64:	b00b883a 	mov	r5,r22
  80aa68:	d9c15115 	stw	r7,1348(sp)
  80aa6c:	080c0900 	call	80c090 <__swsetup_r>
  80aa70:	d9c15117 	ldw	r7,1348(sp)
  80aa74:	103dee26 	beq	r2,zero,80a230 <___vfprintf_internal_r+0x70>
  80aa78:	003f8c06 	br	80a8ac <___vfprintf_internal_r+0x6ec>
  80aa7c:	d9014217 	ldw	r4,1288(sp)
  80aa80:	d9414317 	ldw	r5,1292(sp)
  80aa84:	000d883a 	mov	r6,zero
  80aa88:	000f883a 	mov	r7,zero
  80aa8c:	08088a00 	call	8088a0 <__eqdf2>
  80aa90:	1000f21e 	bne	r2,zero,80ae5c <___vfprintf_internal_r+0xc9c>
  80aa94:	008020b4 	movhi	r2,130
  80aa98:	10b23704 	addi	r2,r2,-14116
  80aa9c:	94800044 	addi	r18,r18,1
  80aaa0:	8c400044 	addi	r17,r17,1
  80aaa4:	a8800015 	stw	r2,0(r21)
  80aaa8:	00c00044 	movi	r3,1
  80aaac:	008001c4 	movi	r2,7
  80aab0:	a8c00115 	stw	r3,4(r21)
  80aab4:	dc800e15 	stw	r18,56(sp)
  80aab8:	dc400d15 	stw	r17,52(sp)
  80aabc:	1442fa16 	blt	r2,r17,80b6a8 <___vfprintf_internal_r+0x14e8>
  80aac0:	a8c00204 	addi	r3,r21,8
  80aac4:	d8800517 	ldw	r2,20(sp)
  80aac8:	d9014717 	ldw	r4,1308(sp)
  80aacc:	11015c0e 	bge	r2,r4,80b040 <___vfprintf_internal_r+0xe80>
  80aad0:	dc400d17 	ldw	r17,52(sp)
  80aad4:	d9814917 	ldw	r6,1316(sp)
  80aad8:	00800044 	movi	r2,1
  80aadc:	94800044 	addi	r18,r18,1
  80aae0:	8c400044 	addi	r17,r17,1
  80aae4:	18800115 	stw	r2,4(r3)
  80aae8:	008001c4 	movi	r2,7
  80aaec:	19800015 	stw	r6,0(r3)
  80aaf0:	dc800e15 	stw	r18,56(sp)
  80aaf4:	dc400d15 	stw	r17,52(sp)
  80aaf8:	14431016 	blt	r2,r17,80b73c <___vfprintf_internal_r+0x157c>
  80aafc:	18c00204 	addi	r3,r3,8
  80ab00:	d8814717 	ldw	r2,1308(sp)
  80ab04:	143fffc4 	addi	r16,r2,-1
  80ab08:	043f2b0e 	bge	zero,r16,80a7b8 <___vfprintf_internal_r+0x5f8>
  80ab0c:	00800404 	movi	r2,16
  80ab10:	1402a20e 	bge	r2,r16,80b59c <___vfprintf_internal_r+0x13dc>
  80ab14:	dc400d17 	ldw	r17,52(sp)
  80ab18:	1027883a 	mov	r19,r2
  80ab1c:	070020b4 	movhi	fp,130
  80ab20:	e7323784 	addi	fp,fp,-14114
  80ab24:	050001c4 	movi	r20,7
  80ab28:	00000306 	br	80ab38 <___vfprintf_internal_r+0x978>
  80ab2c:	18c00204 	addi	r3,r3,8
  80ab30:	843ffc04 	addi	r16,r16,-16
  80ab34:	9c029c0e 	bge	r19,r16,80b5a8 <___vfprintf_internal_r+0x13e8>
  80ab38:	94800404 	addi	r18,r18,16
  80ab3c:	8c400044 	addi	r17,r17,1
  80ab40:	1f000015 	stw	fp,0(r3)
  80ab44:	1cc00115 	stw	r19,4(r3)
  80ab48:	dc800e15 	stw	r18,56(sp)
  80ab4c:	dc400d15 	stw	r17,52(sp)
  80ab50:	a47ff60e 	bge	r20,r17,80ab2c <___vfprintf_internal_r+0x96c>
  80ab54:	d9014f17 	ldw	r4,1340(sp)
  80ab58:	b00b883a 	mov	r5,r22
  80ab5c:	d9800c04 	addi	r6,sp,48
  80ab60:	080a1680 	call	80a168 <__sprint_r>
  80ab64:	103f4e1e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80ab68:	dc800e17 	ldw	r18,56(sp)
  80ab6c:	dc400d17 	ldw	r17,52(sp)
  80ab70:	d8c01904 	addi	r3,sp,100
  80ab74:	003fee06 	br	80ab30 <___vfprintf_internal_r+0x970>
  80ab78:	d8802c0b 	ldhu	r2,176(sp)
  80ab7c:	00ffffc4 	movi	r3,-1
  80ab80:	d8c14b15 	stw	r3,1324(sp)
  80ab84:	1080100c 	andi	r2,r2,64
  80ab88:	103dcc1e 	bne	r2,zero,80a2bc <___vfprintf_internal_r+0xfc>
  80ab8c:	003dce06 	br	80a2c8 <___vfprintf_internal_r+0x108>
  80ab90:	d9014f17 	ldw	r4,1340(sp)
  80ab94:	b00b883a 	mov	r5,r22
  80ab98:	d9800c04 	addi	r6,sp,48
  80ab9c:	080a1680 	call	80a168 <__sprint_r>
  80aba0:	103f3f1e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80aba4:	dc800e17 	ldw	r18,56(sp)
  80aba8:	003f2e06 	br	80a864 <___vfprintf_internal_r+0x6a4>
  80abac:	d9414c17 	ldw	r5,1328(sp)
  80abb0:	29400414 	ori	r5,r5,16
  80abb4:	d9414c15 	stw	r5,1328(sp)
  80abb8:	d9814c17 	ldw	r6,1328(sp)
  80abbc:	3080080c 	andi	r2,r6,32
  80abc0:	10014f1e 	bne	r2,zero,80b100 <___vfprintf_internal_r+0xf40>
  80abc4:	d8c14c17 	ldw	r3,1328(sp)
  80abc8:	1880040c 	andi	r2,r3,16
  80abcc:	1002ea1e 	bne	r2,zero,80b778 <___vfprintf_internal_r+0x15b8>
  80abd0:	d9014c17 	ldw	r4,1328(sp)
  80abd4:	2080100c 	andi	r2,r4,64
  80abd8:	1002e726 	beq	r2,zero,80b778 <___vfprintf_internal_r+0x15b8>
  80abdc:	3880000f 	ldh	r2,0(r7)
  80abe0:	39c00104 	addi	r7,r7,4
  80abe4:	d9c14015 	stw	r7,1280(sp)
  80abe8:	1023d7fa 	srai	r17,r2,31
  80abec:	1021883a 	mov	r16,r2
  80abf0:	88037216 	blt	r17,zero,80b9bc <___vfprintf_internal_r+0x17fc>
  80abf4:	01000044 	movi	r4,1
  80abf8:	98000416 	blt	r19,zero,80ac0c <___vfprintf_internal_r+0xa4c>
  80abfc:	d8c14c17 	ldw	r3,1328(sp)
  80ac00:	00bfdfc4 	movi	r2,-129
  80ac04:	1886703a 	and	r3,r3,r2
  80ac08:	d8c14c15 	stw	r3,1328(sp)
  80ac0c:	8444b03a 	or	r2,r16,r17
  80ac10:	1002261e 	bne	r2,zero,80b4ac <___vfprintf_internal_r+0x12ec>
  80ac14:	9802251e 	bne	r19,zero,80b4ac <___vfprintf_internal_r+0x12ec>
  80ac18:	20803fcc 	andi	r2,r4,255
  80ac1c:	10029b26 	beq	r2,zero,80b68c <___vfprintf_internal_r+0x14cc>
  80ac20:	d8c01904 	addi	r3,sp,100
  80ac24:	dd000f04 	addi	r20,sp,60
  80ac28:	d8c14115 	stw	r3,1284(sp)
  80ac2c:	d8c14117 	ldw	r3,1284(sp)
  80ac30:	dcc14515 	stw	r19,1300(sp)
  80ac34:	a0c5c83a 	sub	r2,r20,r3
  80ac38:	11c00a04 	addi	r7,r2,40
  80ac3c:	99c0010e 	bge	r19,r7,80ac44 <___vfprintf_internal_r+0xa84>
  80ac40:	d9c14515 	stw	r7,1300(sp)
  80ac44:	dcc14615 	stw	r19,1304(sp)
  80ac48:	d8800407 	ldb	r2,16(sp)
  80ac4c:	103e4c26 	beq	r2,zero,80a580 <___vfprintf_internal_r+0x3c0>
  80ac50:	d8814517 	ldw	r2,1300(sp)
  80ac54:	10800044 	addi	r2,r2,1
  80ac58:	d8814515 	stw	r2,1300(sp)
  80ac5c:	003e4806 	br	80a580 <___vfprintf_internal_r+0x3c0>
  80ac60:	d9814c17 	ldw	r6,1328(sp)
  80ac64:	31800414 	ori	r6,r6,16
  80ac68:	d9814c15 	stw	r6,1328(sp)
  80ac6c:	d8c14c17 	ldw	r3,1328(sp)
  80ac70:	1880080c 	andi	r2,r3,32
  80ac74:	1001271e 	bne	r2,zero,80b114 <___vfprintf_internal_r+0xf54>
  80ac78:	d9414c17 	ldw	r5,1328(sp)
  80ac7c:	2880040c 	andi	r2,r5,16
  80ac80:	1002b61e 	bne	r2,zero,80b75c <___vfprintf_internal_r+0x159c>
  80ac84:	d9814c17 	ldw	r6,1328(sp)
  80ac88:	3080100c 	andi	r2,r6,64
  80ac8c:	1002b326 	beq	r2,zero,80b75c <___vfprintf_internal_r+0x159c>
  80ac90:	3c00000b 	ldhu	r16,0(r7)
  80ac94:	0009883a 	mov	r4,zero
  80ac98:	39c00104 	addi	r7,r7,4
  80ac9c:	0023883a 	mov	r17,zero
  80aca0:	d9c14015 	stw	r7,1280(sp)
  80aca4:	d8000405 	stb	zero,16(sp)
  80aca8:	003fd306 	br	80abf8 <___vfprintf_internal_r+0xa38>
  80acac:	d9014c17 	ldw	r4,1328(sp)
  80acb0:	21000414 	ori	r4,r4,16
  80acb4:	d9014c15 	stw	r4,1328(sp)
  80acb8:	d9414c17 	ldw	r5,1328(sp)
  80acbc:	2880080c 	andi	r2,r5,32
  80acc0:	1001081e 	bne	r2,zero,80b0e4 <___vfprintf_internal_r+0xf24>
  80acc4:	d8c14c17 	ldw	r3,1328(sp)
  80acc8:	1880040c 	andi	r2,r3,16
  80accc:	1002b01e 	bne	r2,zero,80b790 <___vfprintf_internal_r+0x15d0>
  80acd0:	d9014c17 	ldw	r4,1328(sp)
  80acd4:	2080100c 	andi	r2,r4,64
  80acd8:	1002ad26 	beq	r2,zero,80b790 <___vfprintf_internal_r+0x15d0>
  80acdc:	3c00000b 	ldhu	r16,0(r7)
  80ace0:	01000044 	movi	r4,1
  80ace4:	39c00104 	addi	r7,r7,4
  80ace8:	0023883a 	mov	r17,zero
  80acec:	d9c14015 	stw	r7,1280(sp)
  80acf0:	d8000405 	stb	zero,16(sp)
  80acf4:	003fc006 	br	80abf8 <___vfprintf_internal_r+0xa38>
  80acf8:	d9014f17 	ldw	r4,1340(sp)
  80acfc:	b00b883a 	mov	r5,r22
  80ad00:	d9800c04 	addi	r6,sp,48
  80ad04:	080a1680 	call	80a168 <__sprint_r>
  80ad08:	103ee51e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80ad0c:	dc800e17 	ldw	r18,56(sp)
  80ad10:	d8c01904 	addi	r3,sp,100
  80ad14:	d9814c17 	ldw	r6,1328(sp)
  80ad18:	3080004c 	andi	r2,r6,1
  80ad1c:	1005003a 	cmpeq	r2,r2,zero
  80ad20:	103ea51e 	bne	r2,zero,80a7b8 <___vfprintf_internal_r+0x5f8>
  80ad24:	00800044 	movi	r2,1
  80ad28:	dc400d17 	ldw	r17,52(sp)
  80ad2c:	18800115 	stw	r2,4(r3)
  80ad30:	d8814917 	ldw	r2,1316(sp)
  80ad34:	94800044 	addi	r18,r18,1
  80ad38:	8c400044 	addi	r17,r17,1
  80ad3c:	18800015 	stw	r2,0(r3)
  80ad40:	008001c4 	movi	r2,7
  80ad44:	dc800e15 	stw	r18,56(sp)
  80ad48:	dc400d15 	stw	r17,52(sp)
  80ad4c:	14421e0e 	bge	r2,r17,80b5c8 <___vfprintf_internal_r+0x1408>
  80ad50:	d9014f17 	ldw	r4,1340(sp)
  80ad54:	b00b883a 	mov	r5,r22
  80ad58:	d9800c04 	addi	r6,sp,48
  80ad5c:	080a1680 	call	80a168 <__sprint_r>
  80ad60:	103ecf1e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80ad64:	dc800e17 	ldw	r18,56(sp)
  80ad68:	d8c01904 	addi	r3,sp,100
  80ad6c:	003e9206 	br	80a7b8 <___vfprintf_internal_r+0x5f8>
  80ad70:	d9014f17 	ldw	r4,1340(sp)
  80ad74:	b00b883a 	mov	r5,r22
  80ad78:	d9800c04 	addi	r6,sp,48
  80ad7c:	080a1680 	call	80a168 <__sprint_r>
  80ad80:	103ec026 	beq	r2,zero,80a884 <___vfprintf_internal_r+0x6c4>
  80ad84:	003ec606 	br	80a8a0 <___vfprintf_internal_r+0x6e0>
  80ad88:	d9014f17 	ldw	r4,1340(sp)
  80ad8c:	b00b883a 	mov	r5,r22
  80ad90:	d9800c04 	addi	r6,sp,48
  80ad94:	d9c15115 	stw	r7,1348(sp)
  80ad98:	080a1680 	call	80a168 <__sprint_r>
  80ad9c:	d9c15117 	ldw	r7,1348(sp)
  80ada0:	103ebf1e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80ada4:	dc800e17 	ldw	r18,56(sp)
  80ada8:	dc400d17 	ldw	r17,52(sp)
  80adac:	dd401904 	addi	r21,sp,100
  80adb0:	003e7406 	br	80a784 <___vfprintf_internal_r+0x5c4>
  80adb4:	d9014f17 	ldw	r4,1340(sp)
  80adb8:	b00b883a 	mov	r5,r22
  80adbc:	d9800c04 	addi	r6,sp,48
  80adc0:	d9c15115 	stw	r7,1348(sp)
  80adc4:	080a1680 	call	80a168 <__sprint_r>
  80adc8:	d9c15117 	ldw	r7,1348(sp)
  80adcc:	103eb41e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80add0:	dd401904 	addi	r21,sp,100
  80add4:	003d6d06 	br	80a38c <___vfprintf_internal_r+0x1cc>
  80add8:	d9014f17 	ldw	r4,1340(sp)
  80addc:	b00b883a 	mov	r5,r22
  80ade0:	d9800c04 	addi	r6,sp,48
  80ade4:	d9c15115 	stw	r7,1348(sp)
  80ade8:	080a1680 	call	80a168 <__sprint_r>
  80adec:	d9c15117 	ldw	r7,1348(sp)
  80adf0:	103eab1e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80adf4:	dc800e17 	ldw	r18,56(sp)
  80adf8:	dc400d17 	ldw	r17,52(sp)
  80adfc:	dd401904 	addi	r21,sp,100
  80ae00:	003e3406 	br	80a6d4 <___vfprintf_internal_r+0x514>
  80ae04:	d9014f17 	ldw	r4,1340(sp)
  80ae08:	b00b883a 	mov	r5,r22
  80ae0c:	d9800c04 	addi	r6,sp,48
  80ae10:	d9c15115 	stw	r7,1348(sp)
  80ae14:	080a1680 	call	80a168 <__sprint_r>
  80ae18:	d9c15117 	ldw	r7,1348(sp)
  80ae1c:	103ea01e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80ae20:	dc800e17 	ldw	r18,56(sp)
  80ae24:	dc400d17 	ldw	r17,52(sp)
  80ae28:	dd401904 	addi	r21,sp,100
  80ae2c:	003e1c06 	br	80a6a0 <___vfprintf_internal_r+0x4e0>
  80ae30:	d9014f17 	ldw	r4,1340(sp)
  80ae34:	b00b883a 	mov	r5,r22
  80ae38:	d9800c04 	addi	r6,sp,48
  80ae3c:	d9c15115 	stw	r7,1348(sp)
  80ae40:	080a1680 	call	80a168 <__sprint_r>
  80ae44:	d9c15117 	ldw	r7,1348(sp)
  80ae48:	103e951e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80ae4c:	dc800e17 	ldw	r18,56(sp)
  80ae50:	dc400d17 	ldw	r17,52(sp)
  80ae54:	dd401904 	addi	r21,sp,100
  80ae58:	003e0406 	br	80a66c <___vfprintf_internal_r+0x4ac>
  80ae5c:	d9000517 	ldw	r4,20(sp)
  80ae60:	0102520e 	bge	zero,r4,80b7ac <___vfprintf_internal_r+0x15ec>
  80ae64:	d9814717 	ldw	r6,1308(sp)
  80ae68:	21807a16 	blt	r4,r6,80b054 <___vfprintf_internal_r+0xe94>
  80ae6c:	d8814117 	ldw	r2,1284(sp)
  80ae70:	91a5883a 	add	r18,r18,r6
  80ae74:	8c400044 	addi	r17,r17,1
  80ae78:	a8800015 	stw	r2,0(r21)
  80ae7c:	008001c4 	movi	r2,7
  80ae80:	a9800115 	stw	r6,4(r21)
  80ae84:	dc800e15 	stw	r18,56(sp)
  80ae88:	dc400d15 	stw	r17,52(sp)
  80ae8c:	1442f616 	blt	r2,r17,80ba68 <___vfprintf_internal_r+0x18a8>
  80ae90:	a8c00204 	addi	r3,r21,8
  80ae94:	d9414717 	ldw	r5,1308(sp)
  80ae98:	2161c83a 	sub	r16,r4,r5
  80ae9c:	043f9d0e 	bge	zero,r16,80ad14 <___vfprintf_internal_r+0xb54>
  80aea0:	00800404 	movi	r2,16
  80aea4:	1402130e 	bge	r2,r16,80b6f4 <___vfprintf_internal_r+0x1534>
  80aea8:	dc400d17 	ldw	r17,52(sp)
  80aeac:	1027883a 	mov	r19,r2
  80aeb0:	070020b4 	movhi	fp,130
  80aeb4:	e7323784 	addi	fp,fp,-14114
  80aeb8:	050001c4 	movi	r20,7
  80aebc:	00000306 	br	80aecc <___vfprintf_internal_r+0xd0c>
  80aec0:	18c00204 	addi	r3,r3,8
  80aec4:	843ffc04 	addi	r16,r16,-16
  80aec8:	9c020d0e 	bge	r19,r16,80b700 <___vfprintf_internal_r+0x1540>
  80aecc:	94800404 	addi	r18,r18,16
  80aed0:	8c400044 	addi	r17,r17,1
  80aed4:	1f000015 	stw	fp,0(r3)
  80aed8:	1cc00115 	stw	r19,4(r3)
  80aedc:	dc800e15 	stw	r18,56(sp)
  80aee0:	dc400d15 	stw	r17,52(sp)
  80aee4:	a47ff60e 	bge	r20,r17,80aec0 <___vfprintf_internal_r+0xd00>
  80aee8:	d9014f17 	ldw	r4,1340(sp)
  80aeec:	b00b883a 	mov	r5,r22
  80aef0:	d9800c04 	addi	r6,sp,48
  80aef4:	080a1680 	call	80a168 <__sprint_r>
  80aef8:	103e691e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80aefc:	dc800e17 	ldw	r18,56(sp)
  80af00:	dc400d17 	ldw	r17,52(sp)
  80af04:	d8c01904 	addi	r3,sp,100
  80af08:	003fee06 	br	80aec4 <___vfprintf_internal_r+0xd04>
  80af0c:	d8814717 	ldw	r2,1308(sp)
  80af10:	143fffc4 	addi	r16,r2,-1
  80af14:	043e970e 	bge	zero,r16,80a974 <___vfprintf_internal_r+0x7b4>
  80af18:	00800404 	movi	r2,16
  80af1c:	1400180e 	bge	r2,r16,80af80 <___vfprintf_internal_r+0xdc0>
  80af20:	1029883a 	mov	r20,r2
  80af24:	070020b4 	movhi	fp,130
  80af28:	e7323784 	addi	fp,fp,-14114
  80af2c:	054001c4 	movi	r21,7
  80af30:	00000306 	br	80af40 <___vfprintf_internal_r+0xd80>
  80af34:	9cc00204 	addi	r19,r19,8
  80af38:	843ffc04 	addi	r16,r16,-16
  80af3c:	a400120e 	bge	r20,r16,80af88 <___vfprintf_internal_r+0xdc8>
  80af40:	94800404 	addi	r18,r18,16
  80af44:	8c400044 	addi	r17,r17,1
  80af48:	9f000015 	stw	fp,0(r19)
  80af4c:	9d000115 	stw	r20,4(r19)
  80af50:	dc800e15 	stw	r18,56(sp)
  80af54:	dc400d15 	stw	r17,52(sp)
  80af58:	ac7ff60e 	bge	r21,r17,80af34 <___vfprintf_internal_r+0xd74>
  80af5c:	d9014f17 	ldw	r4,1340(sp)
  80af60:	b00b883a 	mov	r5,r22
  80af64:	d9800c04 	addi	r6,sp,48
  80af68:	080a1680 	call	80a168 <__sprint_r>
  80af6c:	103e4c1e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80af70:	dc800e17 	ldw	r18,56(sp)
  80af74:	dc400d17 	ldw	r17,52(sp)
  80af78:	dcc01904 	addi	r19,sp,100
  80af7c:	003fee06 	br	80af38 <___vfprintf_internal_r+0xd78>
  80af80:	070020b4 	movhi	fp,130
  80af84:	e7323784 	addi	fp,fp,-14114
  80af88:	9425883a 	add	r18,r18,r16
  80af8c:	8c400044 	addi	r17,r17,1
  80af90:	008001c4 	movi	r2,7
  80af94:	9f000015 	stw	fp,0(r19)
  80af98:	9c000115 	stw	r16,4(r19)
  80af9c:	dc800e15 	stw	r18,56(sp)
  80afa0:	dc400d15 	stw	r17,52(sp)
  80afa4:	147e720e 	bge	r2,r17,80a970 <___vfprintf_internal_r+0x7b0>
  80afa8:	d9014f17 	ldw	r4,1340(sp)
  80afac:	b00b883a 	mov	r5,r22
  80afb0:	d9800c04 	addi	r6,sp,48
  80afb4:	080a1680 	call	80a168 <__sprint_r>
  80afb8:	103e391e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80afbc:	dc800e17 	ldw	r18,56(sp)
  80afc0:	dc400d17 	ldw	r17,52(sp)
  80afc4:	dcc01904 	addi	r19,sp,100
  80afc8:	003e6a06 	br	80a974 <___vfprintf_internal_r+0x7b4>
  80afcc:	d9014f17 	ldw	r4,1340(sp)
  80afd0:	b00b883a 	mov	r5,r22
  80afd4:	d9800c04 	addi	r6,sp,48
  80afd8:	d9c15115 	stw	r7,1348(sp)
  80afdc:	080a1680 	call	80a168 <__sprint_r>
  80afe0:	d9c15117 	ldw	r7,1348(sp)
  80afe4:	103e2e1e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80afe8:	dc800e17 	ldw	r18,56(sp)
  80afec:	dc400d17 	ldw	r17,52(sp)
  80aff0:	dd401904 	addi	r21,sp,100
  80aff4:	003dba06 	br	80a6e0 <___vfprintf_internal_r+0x520>
  80aff8:	d9014f17 	ldw	r4,1340(sp)
  80affc:	b00b883a 	mov	r5,r22
  80b000:	d9800c04 	addi	r6,sp,48
  80b004:	080a1680 	call	80a168 <__sprint_r>
  80b008:	103e251e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80b00c:	dc800e17 	ldw	r18,56(sp)
  80b010:	dc400d17 	ldw	r17,52(sp)
  80b014:	dcc01904 	addi	r19,sp,100
  80b018:	003e4206 	br	80a924 <___vfprintf_internal_r+0x764>
  80b01c:	d9014f17 	ldw	r4,1340(sp)
  80b020:	b00b883a 	mov	r5,r22
  80b024:	d9800c04 	addi	r6,sp,48
  80b028:	080a1680 	call	80a168 <__sprint_r>
  80b02c:	103e1c1e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80b030:	dc800e17 	ldw	r18,56(sp)
  80b034:	dc400d17 	ldw	r17,52(sp)
  80b038:	d8c01904 	addi	r3,sp,100
  80b03c:	003e2e06 	br	80a8f8 <___vfprintf_internal_r+0x738>
  80b040:	d9414c17 	ldw	r5,1328(sp)
  80b044:	2880004c 	andi	r2,r5,1
  80b048:	1005003a 	cmpeq	r2,r2,zero
  80b04c:	103dda1e 	bne	r2,zero,80a7b8 <___vfprintf_internal_r+0x5f8>
  80b050:	003e9f06 	br	80aad0 <___vfprintf_internal_r+0x910>
  80b054:	d8c14117 	ldw	r3,1284(sp)
  80b058:	9125883a 	add	r18,r18,r4
  80b05c:	8c400044 	addi	r17,r17,1
  80b060:	008001c4 	movi	r2,7
  80b064:	a8c00015 	stw	r3,0(r21)
  80b068:	a9000115 	stw	r4,4(r21)
  80b06c:	dc800e15 	stw	r18,56(sp)
  80b070:	dc400d15 	stw	r17,52(sp)
  80b074:	14426616 	blt	r2,r17,80ba10 <___vfprintf_internal_r+0x1850>
  80b078:	a8c00204 	addi	r3,r21,8
  80b07c:	d9414917 	ldw	r5,1316(sp)
  80b080:	00800044 	movi	r2,1
  80b084:	94800044 	addi	r18,r18,1
  80b088:	8c400044 	addi	r17,r17,1
  80b08c:	18800115 	stw	r2,4(r3)
  80b090:	008001c4 	movi	r2,7
  80b094:	19400015 	stw	r5,0(r3)
  80b098:	dc800e15 	stw	r18,56(sp)
  80b09c:	dc400d15 	stw	r17,52(sp)
  80b0a0:	2021883a 	mov	r16,r4
  80b0a4:	14425016 	blt	r2,r17,80b9e8 <___vfprintf_internal_r+0x1828>
  80b0a8:	19400204 	addi	r5,r3,8
  80b0ac:	d9814717 	ldw	r6,1308(sp)
  80b0b0:	8c400044 	addi	r17,r17,1
  80b0b4:	dc400d15 	stw	r17,52(sp)
  80b0b8:	3107c83a 	sub	r3,r6,r4
  80b0bc:	d9014117 	ldw	r4,1284(sp)
  80b0c0:	90e5883a 	add	r18,r18,r3
  80b0c4:	28c00115 	stw	r3,4(r5)
  80b0c8:	8105883a 	add	r2,r16,r4
  80b0cc:	28800015 	stw	r2,0(r5)
  80b0d0:	008001c4 	movi	r2,7
  80b0d4:	dc800e15 	stw	r18,56(sp)
  80b0d8:	147f1d16 	blt	r2,r17,80ad50 <___vfprintf_internal_r+0xb90>
  80b0dc:	28c00204 	addi	r3,r5,8
  80b0e0:	003db506 	br	80a7b8 <___vfprintf_internal_r+0x5f8>
  80b0e4:	3c000017 	ldw	r16,0(r7)
  80b0e8:	3c400117 	ldw	r17,4(r7)
  80b0ec:	39800204 	addi	r6,r7,8
  80b0f0:	01000044 	movi	r4,1
  80b0f4:	d9814015 	stw	r6,1280(sp)
  80b0f8:	d8000405 	stb	zero,16(sp)
  80b0fc:	003ebe06 	br	80abf8 <___vfprintf_internal_r+0xa38>
  80b100:	3c000017 	ldw	r16,0(r7)
  80b104:	3c400117 	ldw	r17,4(r7)
  80b108:	38800204 	addi	r2,r7,8
  80b10c:	d8814015 	stw	r2,1280(sp)
  80b110:	003eb706 	br	80abf0 <___vfprintf_internal_r+0xa30>
  80b114:	3c000017 	ldw	r16,0(r7)
  80b118:	3c400117 	ldw	r17,4(r7)
  80b11c:	39000204 	addi	r4,r7,8
  80b120:	d9014015 	stw	r4,1280(sp)
  80b124:	0009883a 	mov	r4,zero
  80b128:	d8000405 	stb	zero,16(sp)
  80b12c:	003eb206 	br	80abf8 <___vfprintf_internal_r+0xa38>
  80b130:	38c00017 	ldw	r3,0(r7)
  80b134:	39c00104 	addi	r7,r7,4
  80b138:	d8c14a15 	stw	r3,1320(sp)
  80b13c:	1800d10e 	bge	r3,zero,80b484 <___vfprintf_internal_r+0x12c4>
  80b140:	00c7c83a 	sub	r3,zero,r3
  80b144:	d8c14a15 	stw	r3,1320(sp)
  80b148:	d9014c17 	ldw	r4,1328(sp)
  80b14c:	b8c00007 	ldb	r3,0(r23)
  80b150:	21000114 	ori	r4,r4,4
  80b154:	d9014c15 	stw	r4,1328(sp)
  80b158:	003c9806 	br	80a3bc <___vfprintf_internal_r+0x1fc>
  80b15c:	d9814c17 	ldw	r6,1328(sp)
  80b160:	3080080c 	andi	r2,r6,32
  80b164:	1001f026 	beq	r2,zero,80b928 <___vfprintf_internal_r+0x1768>
  80b168:	d9014b17 	ldw	r4,1324(sp)
  80b16c:	38800017 	ldw	r2,0(r7)
  80b170:	39c00104 	addi	r7,r7,4
  80b174:	d9c14015 	stw	r7,1280(sp)
  80b178:	2007d7fa 	srai	r3,r4,31
  80b17c:	d9c14017 	ldw	r7,1280(sp)
  80b180:	11000015 	stw	r4,0(r2)
  80b184:	10c00115 	stw	r3,4(r2)
  80b188:	003c6906 	br	80a330 <___vfprintf_internal_r+0x170>
  80b18c:	b8c00007 	ldb	r3,0(r23)
  80b190:	00801b04 	movi	r2,108
  80b194:	18824f26 	beq	r3,r2,80bad4 <___vfprintf_internal_r+0x1914>
  80b198:	d9414c17 	ldw	r5,1328(sp)
  80b19c:	29400414 	ori	r5,r5,16
  80b1a0:	d9414c15 	stw	r5,1328(sp)
  80b1a4:	003c8506 	br	80a3bc <___vfprintf_internal_r+0x1fc>
  80b1a8:	d9814c17 	ldw	r6,1328(sp)
  80b1ac:	b8c00007 	ldb	r3,0(r23)
  80b1b0:	31800814 	ori	r6,r6,32
  80b1b4:	d9814c15 	stw	r6,1328(sp)
  80b1b8:	003c8006 	br	80a3bc <___vfprintf_internal_r+0x1fc>
  80b1bc:	d8814c17 	ldw	r2,1328(sp)
  80b1c0:	3c000017 	ldw	r16,0(r7)
  80b1c4:	00c01e04 	movi	r3,120
  80b1c8:	10800094 	ori	r2,r2,2
  80b1cc:	d8814c15 	stw	r2,1328(sp)
  80b1d0:	39c00104 	addi	r7,r7,4
  80b1d4:	014020b4 	movhi	r5,130
  80b1d8:	29722004 	addi	r5,r5,-14208
  80b1dc:	00800c04 	movi	r2,48
  80b1e0:	0023883a 	mov	r17,zero
  80b1e4:	01000084 	movi	r4,2
  80b1e8:	d9c14015 	stw	r7,1280(sp)
  80b1ec:	d8c14d15 	stw	r3,1332(sp)
  80b1f0:	d9414415 	stw	r5,1296(sp)
  80b1f4:	d8800445 	stb	r2,17(sp)
  80b1f8:	d8c00485 	stb	r3,18(sp)
  80b1fc:	d8000405 	stb	zero,16(sp)
  80b200:	003e7d06 	br	80abf8 <___vfprintf_internal_r+0xa38>
  80b204:	d8814c17 	ldw	r2,1328(sp)
  80b208:	b8c00007 	ldb	r3,0(r23)
  80b20c:	10801014 	ori	r2,r2,64
  80b210:	d8814c15 	stw	r2,1328(sp)
  80b214:	003c6906 	br	80a3bc <___vfprintf_internal_r+0x1fc>
  80b218:	d9414c17 	ldw	r5,1328(sp)
  80b21c:	2880020c 	andi	r2,r5,8
  80b220:	1001df26 	beq	r2,zero,80b9a0 <___vfprintf_internal_r+0x17e0>
  80b224:	39800017 	ldw	r6,0(r7)
  80b228:	38800204 	addi	r2,r7,8
  80b22c:	d8814015 	stw	r2,1280(sp)
  80b230:	d9814215 	stw	r6,1288(sp)
  80b234:	39c00117 	ldw	r7,4(r7)
  80b238:	d9c14315 	stw	r7,1292(sp)
  80b23c:	d9014217 	ldw	r4,1288(sp)
  80b240:	d9414317 	ldw	r5,1292(sp)
  80b244:	08104940 	call	810494 <__isinfd>
  80b248:	10021726 	beq	r2,zero,80baa8 <___vfprintf_internal_r+0x18e8>
  80b24c:	d9014217 	ldw	r4,1288(sp)
  80b250:	d9414317 	ldw	r5,1292(sp)
  80b254:	000d883a 	mov	r6,zero
  80b258:	000f883a 	mov	r7,zero
  80b25c:	0808a380 	call	808a38 <__ltdf2>
  80b260:	1002ca16 	blt	r2,zero,80bd8c <___vfprintf_internal_r+0x1bcc>
  80b264:	d9414d17 	ldw	r5,1332(sp)
  80b268:	008011c4 	movi	r2,71
  80b26c:	11420a16 	blt	r2,r5,80ba98 <___vfprintf_internal_r+0x18d8>
  80b270:	018020b4 	movhi	r6,130
  80b274:	31b22504 	addi	r6,r6,-14188
  80b278:	d9814115 	stw	r6,1284(sp)
  80b27c:	d9014c17 	ldw	r4,1328(sp)
  80b280:	00c000c4 	movi	r3,3
  80b284:	00bfdfc4 	movi	r2,-129
  80b288:	2088703a 	and	r4,r4,r2
  80b28c:	180f883a 	mov	r7,r3
  80b290:	d8c14515 	stw	r3,1300(sp)
  80b294:	d9014c15 	stw	r4,1328(sp)
  80b298:	d8014615 	stw	zero,1304(sp)
  80b29c:	003e6a06 	br	80ac48 <___vfprintf_internal_r+0xa88>
  80b2a0:	38800017 	ldw	r2,0(r7)
  80b2a4:	00c00044 	movi	r3,1
  80b2a8:	39c00104 	addi	r7,r7,4
  80b2ac:	d9c14015 	stw	r7,1280(sp)
  80b2b0:	d9000f04 	addi	r4,sp,60
  80b2b4:	180f883a 	mov	r7,r3
  80b2b8:	d8c14515 	stw	r3,1300(sp)
  80b2bc:	d9014115 	stw	r4,1284(sp)
  80b2c0:	d8800f05 	stb	r2,60(sp)
  80b2c4:	d8000405 	stb	zero,16(sp)
  80b2c8:	003cac06 	br	80a57c <___vfprintf_internal_r+0x3bc>
  80b2cc:	014020b4 	movhi	r5,130
  80b2d0:	29722b04 	addi	r5,r5,-14164
  80b2d4:	d9414415 	stw	r5,1296(sp)
  80b2d8:	d9814c17 	ldw	r6,1328(sp)
  80b2dc:	3080080c 	andi	r2,r6,32
  80b2e0:	1000f926 	beq	r2,zero,80b6c8 <___vfprintf_internal_r+0x1508>
  80b2e4:	3c000017 	ldw	r16,0(r7)
  80b2e8:	3c400117 	ldw	r17,4(r7)
  80b2ec:	38800204 	addi	r2,r7,8
  80b2f0:	d8814015 	stw	r2,1280(sp)
  80b2f4:	d9414c17 	ldw	r5,1328(sp)
  80b2f8:	2880004c 	andi	r2,r5,1
  80b2fc:	1005003a 	cmpeq	r2,r2,zero
  80b300:	1000b31e 	bne	r2,zero,80b5d0 <___vfprintf_internal_r+0x1410>
  80b304:	8444b03a 	or	r2,r16,r17
  80b308:	1000b126 	beq	r2,zero,80b5d0 <___vfprintf_internal_r+0x1410>
  80b30c:	d9814d17 	ldw	r6,1332(sp)
  80b310:	29400094 	ori	r5,r5,2
  80b314:	00800c04 	movi	r2,48
  80b318:	01000084 	movi	r4,2
  80b31c:	d9414c15 	stw	r5,1328(sp)
  80b320:	d8800445 	stb	r2,17(sp)
  80b324:	d9800485 	stb	r6,18(sp)
  80b328:	d8000405 	stb	zero,16(sp)
  80b32c:	003e3206 	br	80abf8 <___vfprintf_internal_r+0xa38>
  80b330:	018020b4 	movhi	r6,130
  80b334:	31b22004 	addi	r6,r6,-14208
  80b338:	d9814415 	stw	r6,1296(sp)
  80b33c:	003fe606 	br	80b2d8 <___vfprintf_internal_r+0x1118>
  80b340:	00800ac4 	movi	r2,43
  80b344:	d8800405 	stb	r2,16(sp)
  80b348:	b8c00007 	ldb	r3,0(r23)
  80b34c:	003c1b06 	br	80a3bc <___vfprintf_internal_r+0x1fc>
  80b350:	d8814c17 	ldw	r2,1328(sp)
  80b354:	b8c00007 	ldb	r3,0(r23)
  80b358:	10800054 	ori	r2,r2,1
  80b35c:	d8814c15 	stw	r2,1328(sp)
  80b360:	003c1606 	br	80a3bc <___vfprintf_internal_r+0x1fc>
  80b364:	d8800407 	ldb	r2,16(sp)
  80b368:	1000461e 	bne	r2,zero,80b484 <___vfprintf_internal_r+0x12c4>
  80b36c:	00800804 	movi	r2,32
  80b370:	d8800405 	stb	r2,16(sp)
  80b374:	b8c00007 	ldb	r3,0(r23)
  80b378:	003c1006 	br	80a3bc <___vfprintf_internal_r+0x1fc>
  80b37c:	d9814c17 	ldw	r6,1328(sp)
  80b380:	b8c00007 	ldb	r3,0(r23)
  80b384:	31800214 	ori	r6,r6,8
  80b388:	d9814c15 	stw	r6,1328(sp)
  80b38c:	003c0b06 	br	80a3bc <___vfprintf_internal_r+0x1fc>
  80b390:	0007883a 	mov	r3,zero
  80b394:	01000244 	movi	r4,9
  80b398:	188002a4 	muli	r2,r3,10
  80b39c:	b8c00007 	ldb	r3,0(r23)
  80b3a0:	d9814d17 	ldw	r6,1332(sp)
  80b3a4:	bdc00044 	addi	r23,r23,1
  80b3a8:	d8c14d15 	stw	r3,1332(sp)
  80b3ac:	d9414d17 	ldw	r5,1332(sp)
  80b3b0:	3085883a 	add	r2,r6,r2
  80b3b4:	10fff404 	addi	r3,r2,-48
  80b3b8:	28bff404 	addi	r2,r5,-48
  80b3bc:	20bff62e 	bgeu	r4,r2,80b398 <___vfprintf_internal_r+0x11d8>
  80b3c0:	d8c14a15 	stw	r3,1320(sp)
  80b3c4:	003bff06 	br	80a3c4 <___vfprintf_internal_r+0x204>
  80b3c8:	d9414c17 	ldw	r5,1328(sp)
  80b3cc:	b8c00007 	ldb	r3,0(r23)
  80b3d0:	29402014 	ori	r5,r5,128
  80b3d4:	d9414c15 	stw	r5,1328(sp)
  80b3d8:	003bf806 	br	80a3bc <___vfprintf_internal_r+0x1fc>
  80b3dc:	b8c00007 	ldb	r3,0(r23)
  80b3e0:	00800a84 	movi	r2,42
  80b3e4:	bdc00044 	addi	r23,r23,1
  80b3e8:	18831526 	beq	r3,r2,80c040 <___vfprintf_internal_r+0x1e80>
  80b3ec:	d8c14d15 	stw	r3,1332(sp)
  80b3f0:	18bff404 	addi	r2,r3,-48
  80b3f4:	00c00244 	movi	r3,9
  80b3f8:	18827836 	bltu	r3,r2,80bddc <___vfprintf_internal_r+0x1c1c>
  80b3fc:	000d883a 	mov	r6,zero
  80b400:	308002a4 	muli	r2,r6,10
  80b404:	b9800007 	ldb	r6,0(r23)
  80b408:	d9414d17 	ldw	r5,1332(sp)
  80b40c:	bdc00044 	addi	r23,r23,1
  80b410:	d9814d15 	stw	r6,1332(sp)
  80b414:	d9014d17 	ldw	r4,1332(sp)
  80b418:	1145883a 	add	r2,r2,r5
  80b41c:	11bff404 	addi	r6,r2,-48
  80b420:	20bff404 	addi	r2,r4,-48
  80b424:	18bff62e 	bgeu	r3,r2,80b400 <___vfprintf_internal_r+0x1240>
  80b428:	3027883a 	mov	r19,r6
  80b42c:	303be50e 	bge	r6,zero,80a3c4 <___vfprintf_internal_r+0x204>
  80b430:	04ffffc4 	movi	r19,-1
  80b434:	003be306 	br	80a3c4 <___vfprintf_internal_r+0x204>
  80b438:	d8000405 	stb	zero,16(sp)
  80b43c:	39800017 	ldw	r6,0(r7)
  80b440:	39c00104 	addi	r7,r7,4
  80b444:	d9c14015 	stw	r7,1280(sp)
  80b448:	d9814115 	stw	r6,1284(sp)
  80b44c:	3001c926 	beq	r6,zero,80bb74 <___vfprintf_internal_r+0x19b4>
  80b450:	98000e16 	blt	r19,zero,80b48c <___vfprintf_internal_r+0x12cc>
  80b454:	d9014117 	ldw	r4,1284(sp)
  80b458:	000b883a 	mov	r5,zero
  80b45c:	980d883a 	mov	r6,r19
  80b460:	080ebb00 	call	80ebb0 <memchr>
  80b464:	10025926 	beq	r2,zero,80bdcc <___vfprintf_internal_r+0x1c0c>
  80b468:	d8c14117 	ldw	r3,1284(sp)
  80b46c:	10cfc83a 	sub	r7,r2,r3
  80b470:	99c19e16 	blt	r19,r7,80baec <___vfprintf_internal_r+0x192c>
  80b474:	d9c14515 	stw	r7,1300(sp)
  80b478:	38000916 	blt	r7,zero,80b4a0 <___vfprintf_internal_r+0x12e0>
  80b47c:	d8014615 	stw	zero,1304(sp)
  80b480:	003df106 	br	80ac48 <___vfprintf_internal_r+0xa88>
  80b484:	b8c00007 	ldb	r3,0(r23)
  80b488:	003bcc06 	br	80a3bc <___vfprintf_internal_r+0x1fc>
  80b48c:	d9014117 	ldw	r4,1284(sp)
  80b490:	080a0980 	call	80a098 <strlen>
  80b494:	d8814515 	stw	r2,1300(sp)
  80b498:	100f883a 	mov	r7,r2
  80b49c:	103ff70e 	bge	r2,zero,80b47c <___vfprintf_internal_r+0x12bc>
  80b4a0:	d8014515 	stw	zero,1300(sp)
  80b4a4:	d8014615 	stw	zero,1304(sp)
  80b4a8:	003de706 	br	80ac48 <___vfprintf_internal_r+0xa88>
  80b4ac:	20c03fcc 	andi	r3,r4,255
  80b4b0:	00800044 	movi	r2,1
  80b4b4:	18802d26 	beq	r3,r2,80b56c <___vfprintf_internal_r+0x13ac>
  80b4b8:	18800e36 	bltu	r3,r2,80b4f4 <___vfprintf_internal_r+0x1334>
  80b4bc:	00800084 	movi	r2,2
  80b4c0:	1880fa26 	beq	r3,r2,80b8ac <___vfprintf_internal_r+0x16ec>
  80b4c4:	010020b4 	movhi	r4,130
  80b4c8:	21323004 	addi	r4,r4,-14144
  80b4cc:	080a0980 	call	80a098 <strlen>
  80b4d0:	100f883a 	mov	r7,r2
  80b4d4:	dcc14515 	stw	r19,1300(sp)
  80b4d8:	9880010e 	bge	r19,r2,80b4e0 <___vfprintf_internal_r+0x1320>
  80b4dc:	d8814515 	stw	r2,1300(sp)
  80b4e0:	008020b4 	movhi	r2,130
  80b4e4:	10b23004 	addi	r2,r2,-14144
  80b4e8:	dcc14615 	stw	r19,1304(sp)
  80b4ec:	d8814115 	stw	r2,1284(sp)
  80b4f0:	003dd506 	br	80ac48 <___vfprintf_internal_r+0xa88>
  80b4f4:	d9401904 	addi	r5,sp,100
  80b4f8:	dd000f04 	addi	r20,sp,60
  80b4fc:	d9414115 	stw	r5,1284(sp)
  80b500:	880a977a 	slli	r5,r17,29
  80b504:	d9814117 	ldw	r6,1284(sp)
  80b508:	8004d0fa 	srli	r2,r16,3
  80b50c:	8806d0fa 	srli	r3,r17,3
  80b510:	810001cc 	andi	r4,r16,7
  80b514:	2884b03a 	or	r2,r5,r2
  80b518:	31bfffc4 	addi	r6,r6,-1
  80b51c:	21000c04 	addi	r4,r4,48
  80b520:	d9814115 	stw	r6,1284(sp)
  80b524:	10cab03a 	or	r5,r2,r3
  80b528:	31000005 	stb	r4,0(r6)
  80b52c:	1021883a 	mov	r16,r2
  80b530:	1823883a 	mov	r17,r3
  80b534:	283ff21e 	bne	r5,zero,80b500 <___vfprintf_internal_r+0x1340>
  80b538:	d8c14c17 	ldw	r3,1328(sp)
  80b53c:	1880004c 	andi	r2,r3,1
  80b540:	1005003a 	cmpeq	r2,r2,zero
  80b544:	103db91e 	bne	r2,zero,80ac2c <___vfprintf_internal_r+0xa6c>
  80b548:	20803fcc 	andi	r2,r4,255
  80b54c:	1080201c 	xori	r2,r2,128
  80b550:	10bfe004 	addi	r2,r2,-128
  80b554:	00c00c04 	movi	r3,48
  80b558:	10fdb426 	beq	r2,r3,80ac2c <___vfprintf_internal_r+0xa6c>
  80b55c:	31bfffc4 	addi	r6,r6,-1
  80b560:	d9814115 	stw	r6,1284(sp)
  80b564:	30c00005 	stb	r3,0(r6)
  80b568:	003db006 	br	80ac2c <___vfprintf_internal_r+0xa6c>
  80b56c:	88800068 	cmpgeui	r2,r17,1
  80b570:	10002c1e 	bne	r2,zero,80b624 <___vfprintf_internal_r+0x1464>
  80b574:	8800021e 	bne	r17,zero,80b580 <___vfprintf_internal_r+0x13c0>
  80b578:	00800244 	movi	r2,9
  80b57c:	14002936 	bltu	r2,r16,80b624 <___vfprintf_internal_r+0x1464>
  80b580:	d90018c4 	addi	r4,sp,99
  80b584:	dd000f04 	addi	r20,sp,60
  80b588:	d9014115 	stw	r4,1284(sp)
  80b58c:	d9014117 	ldw	r4,1284(sp)
  80b590:	80800c04 	addi	r2,r16,48
  80b594:	20800005 	stb	r2,0(r4)
  80b598:	003da406 	br	80ac2c <___vfprintf_internal_r+0xa6c>
  80b59c:	dc400d17 	ldw	r17,52(sp)
  80b5a0:	070020b4 	movhi	fp,130
  80b5a4:	e7323784 	addi	fp,fp,-14114
  80b5a8:	9425883a 	add	r18,r18,r16
  80b5ac:	8c400044 	addi	r17,r17,1
  80b5b0:	008001c4 	movi	r2,7
  80b5b4:	1f000015 	stw	fp,0(r3)
  80b5b8:	1c000115 	stw	r16,4(r3)
  80b5bc:	dc800e15 	stw	r18,56(sp)
  80b5c0:	dc400d15 	stw	r17,52(sp)
  80b5c4:	147de216 	blt	r2,r17,80ad50 <___vfprintf_internal_r+0xb90>
  80b5c8:	18c00204 	addi	r3,r3,8
  80b5cc:	003c7a06 	br	80a7b8 <___vfprintf_internal_r+0x5f8>
  80b5d0:	01000084 	movi	r4,2
  80b5d4:	d8000405 	stb	zero,16(sp)
  80b5d8:	003d8706 	br	80abf8 <___vfprintf_internal_r+0xa38>
  80b5dc:	d9814c17 	ldw	r6,1328(sp)
  80b5e0:	30c4703a 	and	r2,r6,r3
  80b5e4:	1005003a 	cmpeq	r2,r2,zero
  80b5e8:	103cb926 	beq	r2,zero,80a8d0 <___vfprintf_internal_r+0x710>
  80b5ec:	d9014117 	ldw	r4,1284(sp)
  80b5f0:	94800044 	addi	r18,r18,1
  80b5f4:	8c400044 	addi	r17,r17,1
  80b5f8:	008001c4 	movi	r2,7
  80b5fc:	a9000015 	stw	r4,0(r21)
  80b600:	a8c00115 	stw	r3,4(r21)
  80b604:	dc800e15 	stw	r18,56(sp)
  80b608:	dc400d15 	stw	r17,52(sp)
  80b60c:	147e6616 	blt	r2,r17,80afa8 <___vfprintf_internal_r+0xde8>
  80b610:	acc00204 	addi	r19,r21,8
  80b614:	003cd706 	br	80a974 <___vfprintf_internal_r+0x7b4>
  80b618:	070020b4 	movhi	fp,130
  80b61c:	e7323784 	addi	fp,fp,-14114
  80b620:	003c4f06 	br	80a760 <___vfprintf_internal_r+0x5a0>
  80b624:	dd000f04 	addi	r20,sp,60
  80b628:	dc801904 	addi	r18,sp,100
  80b62c:	8009883a 	mov	r4,r16
  80b630:	880b883a 	mov	r5,r17
  80b634:	01800284 	movi	r6,10
  80b638:	000f883a 	mov	r7,zero
  80b63c:	081114c0 	call	81114c <__umoddi3>
  80b640:	12000c04 	addi	r8,r2,48
  80b644:	94bfffc4 	addi	r18,r18,-1
  80b648:	8009883a 	mov	r4,r16
  80b64c:	880b883a 	mov	r5,r17
  80b650:	01800284 	movi	r6,10
  80b654:	000f883a 	mov	r7,zero
  80b658:	92000005 	stb	r8,0(r18)
  80b65c:	0810b700 	call	810b70 <__udivdi3>
  80b660:	1009883a 	mov	r4,r2
  80b664:	1021883a 	mov	r16,r2
  80b668:	18800068 	cmpgeui	r2,r3,1
  80b66c:	1823883a 	mov	r17,r3
  80b670:	103fee1e 	bne	r2,zero,80b62c <___vfprintf_internal_r+0x146c>
  80b674:	1800021e 	bne	r3,zero,80b680 <___vfprintf_internal_r+0x14c0>
  80b678:	00800244 	movi	r2,9
  80b67c:	113feb36 	bltu	r2,r4,80b62c <___vfprintf_internal_r+0x146c>
  80b680:	94bfffc4 	addi	r18,r18,-1
  80b684:	dc814115 	stw	r18,1284(sp)
  80b688:	003fc006 	br	80b58c <___vfprintf_internal_r+0x13cc>
  80b68c:	d9014c17 	ldw	r4,1328(sp)
  80b690:	2080004c 	andi	r2,r4,1
  80b694:	10009a1e 	bne	r2,zero,80b900 <___vfprintf_internal_r+0x1740>
  80b698:	d9401904 	addi	r5,sp,100
  80b69c:	dd000f04 	addi	r20,sp,60
  80b6a0:	d9414115 	stw	r5,1284(sp)
  80b6a4:	003d6106 	br	80ac2c <___vfprintf_internal_r+0xa6c>
  80b6a8:	d9014f17 	ldw	r4,1340(sp)
  80b6ac:	b00b883a 	mov	r5,r22
  80b6b0:	d9800c04 	addi	r6,sp,48
  80b6b4:	080a1680 	call	80a168 <__sprint_r>
  80b6b8:	103c791e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80b6bc:	dc800e17 	ldw	r18,56(sp)
  80b6c0:	d8c01904 	addi	r3,sp,100
  80b6c4:	003cff06 	br	80aac4 <___vfprintf_internal_r+0x904>
  80b6c8:	d8c14c17 	ldw	r3,1328(sp)
  80b6cc:	1880040c 	andi	r2,r3,16
  80b6d0:	1000711e 	bne	r2,zero,80b898 <___vfprintf_internal_r+0x16d8>
  80b6d4:	d9014c17 	ldw	r4,1328(sp)
  80b6d8:	2080100c 	andi	r2,r4,64
  80b6dc:	10006e26 	beq	r2,zero,80b898 <___vfprintf_internal_r+0x16d8>
  80b6e0:	3c00000b 	ldhu	r16,0(r7)
  80b6e4:	0023883a 	mov	r17,zero
  80b6e8:	39c00104 	addi	r7,r7,4
  80b6ec:	d9c14015 	stw	r7,1280(sp)
  80b6f0:	003f0006 	br	80b2f4 <___vfprintf_internal_r+0x1134>
  80b6f4:	dc400d17 	ldw	r17,52(sp)
  80b6f8:	070020b4 	movhi	fp,130
  80b6fc:	e7323784 	addi	fp,fp,-14114
  80b700:	9425883a 	add	r18,r18,r16
  80b704:	8c400044 	addi	r17,r17,1
  80b708:	008001c4 	movi	r2,7
  80b70c:	1f000015 	stw	fp,0(r3)
  80b710:	1c000115 	stw	r16,4(r3)
  80b714:	dc800e15 	stw	r18,56(sp)
  80b718:	dc400d15 	stw	r17,52(sp)
  80b71c:	147d7616 	blt	r2,r17,80acf8 <___vfprintf_internal_r+0xb38>
  80b720:	18c00204 	addi	r3,r3,8
  80b724:	003d7b06 	br	80ad14 <___vfprintf_internal_r+0xb54>
  80b728:	dc800e17 	ldw	r18,56(sp)
  80b72c:	dc400d17 	ldw	r17,52(sp)
  80b730:	070020b4 	movhi	fp,130
  80b734:	e7323b84 	addi	fp,fp,-14098
  80b738:	003bc006 	br	80a63c <___vfprintf_internal_r+0x47c>
  80b73c:	d9014f17 	ldw	r4,1340(sp)
  80b740:	b00b883a 	mov	r5,r22
  80b744:	d9800c04 	addi	r6,sp,48
  80b748:	080a1680 	call	80a168 <__sprint_r>
  80b74c:	103c541e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80b750:	dc800e17 	ldw	r18,56(sp)
  80b754:	d8c01904 	addi	r3,sp,100
  80b758:	003ce906 	br	80ab00 <___vfprintf_internal_r+0x940>
  80b75c:	3c000017 	ldw	r16,0(r7)
  80b760:	0009883a 	mov	r4,zero
  80b764:	39c00104 	addi	r7,r7,4
  80b768:	0023883a 	mov	r17,zero
  80b76c:	d9c14015 	stw	r7,1280(sp)
  80b770:	d8000405 	stb	zero,16(sp)
  80b774:	003d2006 	br	80abf8 <___vfprintf_internal_r+0xa38>
  80b778:	38800017 	ldw	r2,0(r7)
  80b77c:	39c00104 	addi	r7,r7,4
  80b780:	d9c14015 	stw	r7,1280(sp)
  80b784:	1023d7fa 	srai	r17,r2,31
  80b788:	1021883a 	mov	r16,r2
  80b78c:	003d1806 	br	80abf0 <___vfprintf_internal_r+0xa30>
  80b790:	3c000017 	ldw	r16,0(r7)
  80b794:	01000044 	movi	r4,1
  80b798:	39c00104 	addi	r7,r7,4
  80b79c:	0023883a 	mov	r17,zero
  80b7a0:	d9c14015 	stw	r7,1280(sp)
  80b7a4:	d8000405 	stb	zero,16(sp)
  80b7a8:	003d1306 	br	80abf8 <___vfprintf_internal_r+0xa38>
  80b7ac:	008020b4 	movhi	r2,130
  80b7b0:	10b23704 	addi	r2,r2,-14116
  80b7b4:	94800044 	addi	r18,r18,1
  80b7b8:	8c400044 	addi	r17,r17,1
  80b7bc:	a8800015 	stw	r2,0(r21)
  80b7c0:	00c00044 	movi	r3,1
  80b7c4:	008001c4 	movi	r2,7
  80b7c8:	a8c00115 	stw	r3,4(r21)
  80b7cc:	dc800e15 	stw	r18,56(sp)
  80b7d0:	dc400d15 	stw	r17,52(sp)
  80b7d4:	1440ca16 	blt	r2,r17,80bb00 <___vfprintf_internal_r+0x1940>
  80b7d8:	a8c00204 	addi	r3,r21,8
  80b7dc:	2000061e 	bne	r4,zero,80b7f8 <___vfprintf_internal_r+0x1638>
  80b7e0:	d9414717 	ldw	r5,1308(sp)
  80b7e4:	2800041e 	bne	r5,zero,80b7f8 <___vfprintf_internal_r+0x1638>
  80b7e8:	d9814c17 	ldw	r6,1328(sp)
  80b7ec:	3080004c 	andi	r2,r6,1
  80b7f0:	1005003a 	cmpeq	r2,r2,zero
  80b7f4:	103bf01e 	bne	r2,zero,80a7b8 <___vfprintf_internal_r+0x5f8>
  80b7f8:	00800044 	movi	r2,1
  80b7fc:	dc400d17 	ldw	r17,52(sp)
  80b800:	18800115 	stw	r2,4(r3)
  80b804:	d8814917 	ldw	r2,1316(sp)
  80b808:	94800044 	addi	r18,r18,1
  80b80c:	8c400044 	addi	r17,r17,1
  80b810:	18800015 	stw	r2,0(r3)
  80b814:	008001c4 	movi	r2,7
  80b818:	dc800e15 	stw	r18,56(sp)
  80b81c:	dc400d15 	stw	r17,52(sp)
  80b820:	1440ca16 	blt	r2,r17,80bb4c <___vfprintf_internal_r+0x198c>
  80b824:	18c00204 	addi	r3,r3,8
  80b828:	0121c83a 	sub	r16,zero,r4
  80b82c:	0400500e 	bge	zero,r16,80b970 <___vfprintf_internal_r+0x17b0>
  80b830:	00800404 	movi	r2,16
  80b834:	1400800e 	bge	r2,r16,80ba38 <___vfprintf_internal_r+0x1878>
  80b838:	1027883a 	mov	r19,r2
  80b83c:	070020b4 	movhi	fp,130
  80b840:	e7323784 	addi	fp,fp,-14114
  80b844:	050001c4 	movi	r20,7
  80b848:	00000306 	br	80b858 <___vfprintf_internal_r+0x1698>
  80b84c:	18c00204 	addi	r3,r3,8
  80b850:	843ffc04 	addi	r16,r16,-16
  80b854:	9c007a0e 	bge	r19,r16,80ba40 <___vfprintf_internal_r+0x1880>
  80b858:	94800404 	addi	r18,r18,16
  80b85c:	8c400044 	addi	r17,r17,1
  80b860:	1f000015 	stw	fp,0(r3)
  80b864:	1cc00115 	stw	r19,4(r3)
  80b868:	dc800e15 	stw	r18,56(sp)
  80b86c:	dc400d15 	stw	r17,52(sp)
  80b870:	a47ff60e 	bge	r20,r17,80b84c <___vfprintf_internal_r+0x168c>
  80b874:	d9014f17 	ldw	r4,1340(sp)
  80b878:	b00b883a 	mov	r5,r22
  80b87c:	d9800c04 	addi	r6,sp,48
  80b880:	080a1680 	call	80a168 <__sprint_r>
  80b884:	103c061e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80b888:	dc800e17 	ldw	r18,56(sp)
  80b88c:	dc400d17 	ldw	r17,52(sp)
  80b890:	d8c01904 	addi	r3,sp,100
  80b894:	003fee06 	br	80b850 <___vfprintf_internal_r+0x1690>
  80b898:	3c000017 	ldw	r16,0(r7)
  80b89c:	0023883a 	mov	r17,zero
  80b8a0:	39c00104 	addi	r7,r7,4
  80b8a4:	d9c14015 	stw	r7,1280(sp)
  80b8a8:	003e9206 	br	80b2f4 <___vfprintf_internal_r+0x1134>
  80b8ac:	d9401904 	addi	r5,sp,100
  80b8b0:	dd000f04 	addi	r20,sp,60
  80b8b4:	d9414115 	stw	r5,1284(sp)
  80b8b8:	d9814417 	ldw	r6,1296(sp)
  80b8bc:	880a973a 	slli	r5,r17,28
  80b8c0:	8004d13a 	srli	r2,r16,4
  80b8c4:	810003cc 	andi	r4,r16,15
  80b8c8:	3109883a 	add	r4,r6,r4
  80b8cc:	2884b03a 	or	r2,r5,r2
  80b8d0:	21400003 	ldbu	r5,0(r4)
  80b8d4:	d9014117 	ldw	r4,1284(sp)
  80b8d8:	8806d13a 	srli	r3,r17,4
  80b8dc:	1021883a 	mov	r16,r2
  80b8e0:	213fffc4 	addi	r4,r4,-1
  80b8e4:	d9014115 	stw	r4,1284(sp)
  80b8e8:	d9814117 	ldw	r6,1284(sp)
  80b8ec:	10c8b03a 	or	r4,r2,r3
  80b8f0:	1823883a 	mov	r17,r3
  80b8f4:	31400005 	stb	r5,0(r6)
  80b8f8:	203fef1e 	bne	r4,zero,80b8b8 <___vfprintf_internal_r+0x16f8>
  80b8fc:	003ccb06 	br	80ac2c <___vfprintf_internal_r+0xa6c>
  80b900:	00800c04 	movi	r2,48
  80b904:	d98018c4 	addi	r6,sp,99
  80b908:	dd000f04 	addi	r20,sp,60
  80b90c:	d88018c5 	stb	r2,99(sp)
  80b910:	d9814115 	stw	r6,1284(sp)
  80b914:	003cc506 	br	80ac2c <___vfprintf_internal_r+0xa6c>
  80b918:	dc400d17 	ldw	r17,52(sp)
  80b91c:	070020b4 	movhi	fp,130
  80b920:	e7323b84 	addi	fp,fp,-14098
  80b924:	003bc706 	br	80a844 <___vfprintf_internal_r+0x684>
  80b928:	d9414c17 	ldw	r5,1328(sp)
  80b92c:	2880040c 	andi	r2,r5,16
  80b930:	10007c26 	beq	r2,zero,80bb24 <___vfprintf_internal_r+0x1964>
  80b934:	38800017 	ldw	r2,0(r7)
  80b938:	39c00104 	addi	r7,r7,4
  80b93c:	d9c14015 	stw	r7,1280(sp)
  80b940:	d9814b17 	ldw	r6,1324(sp)
  80b944:	d9c14017 	ldw	r7,1280(sp)
  80b948:	11800015 	stw	r6,0(r2)
  80b94c:	003a7806 	br	80a330 <___vfprintf_internal_r+0x170>
  80b950:	d9014f17 	ldw	r4,1340(sp)
  80b954:	b00b883a 	mov	r5,r22
  80b958:	d9800c04 	addi	r6,sp,48
  80b95c:	080a1680 	call	80a168 <__sprint_r>
  80b960:	103bcf1e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80b964:	dc800e17 	ldw	r18,56(sp)
  80b968:	dc400d17 	ldw	r17,52(sp)
  80b96c:	d8c01904 	addi	r3,sp,100
  80b970:	d9014717 	ldw	r4,1308(sp)
  80b974:	d9414117 	ldw	r5,1284(sp)
  80b978:	8c400044 	addi	r17,r17,1
  80b97c:	9125883a 	add	r18,r18,r4
  80b980:	008001c4 	movi	r2,7
  80b984:	19400015 	stw	r5,0(r3)
  80b988:	19000115 	stw	r4,4(r3)
  80b98c:	dc800e15 	stw	r18,56(sp)
  80b990:	dc400d15 	stw	r17,52(sp)
  80b994:	147cee16 	blt	r2,r17,80ad50 <___vfprintf_internal_r+0xb90>
  80b998:	18c00204 	addi	r3,r3,8
  80b99c:	003b8606 	br	80a7b8 <___vfprintf_internal_r+0x5f8>
  80b9a0:	38c00017 	ldw	r3,0(r7)
  80b9a4:	39000204 	addi	r4,r7,8
  80b9a8:	d9014015 	stw	r4,1280(sp)
  80b9ac:	d8c14215 	stw	r3,1288(sp)
  80b9b0:	39c00117 	ldw	r7,4(r7)
  80b9b4:	d9c14315 	stw	r7,1292(sp)
  80b9b8:	003e2006 	br	80b23c <___vfprintf_internal_r+0x107c>
  80b9bc:	0005883a 	mov	r2,zero
  80b9c0:	1409c83a 	sub	r4,r2,r16
  80b9c4:	1105803a 	cmpltu	r2,r2,r4
  80b9c8:	044bc83a 	sub	r5,zero,r17
  80b9cc:	2885c83a 	sub	r2,r5,r2
  80b9d0:	2021883a 	mov	r16,r4
  80b9d4:	1023883a 	mov	r17,r2
  80b9d8:	01000044 	movi	r4,1
  80b9dc:	00800b44 	movi	r2,45
  80b9e0:	d8800405 	stb	r2,16(sp)
  80b9e4:	003c8406 	br	80abf8 <___vfprintf_internal_r+0xa38>
  80b9e8:	d9014f17 	ldw	r4,1340(sp)
  80b9ec:	b00b883a 	mov	r5,r22
  80b9f0:	d9800c04 	addi	r6,sp,48
  80b9f4:	080a1680 	call	80a168 <__sprint_r>
  80b9f8:	103ba91e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80b9fc:	dc800e17 	ldw	r18,56(sp)
  80ba00:	dc400d17 	ldw	r17,52(sp)
  80ba04:	d9000517 	ldw	r4,20(sp)
  80ba08:	d9401904 	addi	r5,sp,100
  80ba0c:	003da706 	br	80b0ac <___vfprintf_internal_r+0xeec>
  80ba10:	d9014f17 	ldw	r4,1340(sp)
  80ba14:	b00b883a 	mov	r5,r22
  80ba18:	d9800c04 	addi	r6,sp,48
  80ba1c:	080a1680 	call	80a168 <__sprint_r>
  80ba20:	103b9f1e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80ba24:	dc800e17 	ldw	r18,56(sp)
  80ba28:	dc400d17 	ldw	r17,52(sp)
  80ba2c:	d9000517 	ldw	r4,20(sp)
  80ba30:	d8c01904 	addi	r3,sp,100
  80ba34:	003d9106 	br	80b07c <___vfprintf_internal_r+0xebc>
  80ba38:	070020b4 	movhi	fp,130
  80ba3c:	e7323784 	addi	fp,fp,-14114
  80ba40:	9425883a 	add	r18,r18,r16
  80ba44:	8c400044 	addi	r17,r17,1
  80ba48:	008001c4 	movi	r2,7
  80ba4c:	1f000015 	stw	fp,0(r3)
  80ba50:	1c000115 	stw	r16,4(r3)
  80ba54:	dc800e15 	stw	r18,56(sp)
  80ba58:	dc400d15 	stw	r17,52(sp)
  80ba5c:	147fbc16 	blt	r2,r17,80b950 <___vfprintf_internal_r+0x1790>
  80ba60:	18c00204 	addi	r3,r3,8
  80ba64:	003fc206 	br	80b970 <___vfprintf_internal_r+0x17b0>
  80ba68:	d9014f17 	ldw	r4,1340(sp)
  80ba6c:	b00b883a 	mov	r5,r22
  80ba70:	d9800c04 	addi	r6,sp,48
  80ba74:	080a1680 	call	80a168 <__sprint_r>
  80ba78:	103b891e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80ba7c:	dc800e17 	ldw	r18,56(sp)
  80ba80:	d9000517 	ldw	r4,20(sp)
  80ba84:	d8c01904 	addi	r3,sp,100
  80ba88:	003d0206 	br	80ae94 <___vfprintf_internal_r+0xcd4>
  80ba8c:	070020b4 	movhi	fp,130
  80ba90:	e7323784 	addi	fp,fp,-14114
  80ba94:	003be406 	br	80aa28 <___vfprintf_internal_r+0x868>
  80ba98:	008020b4 	movhi	r2,130
  80ba9c:	10b22604 	addi	r2,r2,-14184
  80baa0:	d8814115 	stw	r2,1284(sp)
  80baa4:	003df506 	br	80b27c <___vfprintf_internal_r+0x10bc>
  80baa8:	d9014217 	ldw	r4,1288(sp)
  80baac:	d9414317 	ldw	r5,1292(sp)
  80bab0:	08076c40 	call	8076c4 <__isnand>
  80bab4:	10003926 	beq	r2,zero,80bb9c <___vfprintf_internal_r+0x19dc>
  80bab8:	d9414d17 	ldw	r5,1332(sp)
  80babc:	008011c4 	movi	r2,71
  80bac0:	1140ce16 	blt	r2,r5,80bdfc <___vfprintf_internal_r+0x1c3c>
  80bac4:	018020b4 	movhi	r6,130
  80bac8:	31b22704 	addi	r6,r6,-14180
  80bacc:	d9814115 	stw	r6,1284(sp)
  80bad0:	003dea06 	br	80b27c <___vfprintf_internal_r+0x10bc>
  80bad4:	d9014c17 	ldw	r4,1328(sp)
  80bad8:	bdc00044 	addi	r23,r23,1
  80badc:	b8c00007 	ldb	r3,0(r23)
  80bae0:	21000814 	ori	r4,r4,32
  80bae4:	d9014c15 	stw	r4,1328(sp)
  80bae8:	003a3406 	br	80a3bc <___vfprintf_internal_r+0x1fc>
  80baec:	dcc14515 	stw	r19,1300(sp)
  80baf0:	98011016 	blt	r19,zero,80bf34 <___vfprintf_internal_r+0x1d74>
  80baf4:	980f883a 	mov	r7,r19
  80baf8:	d8014615 	stw	zero,1304(sp)
  80bafc:	003c5206 	br	80ac48 <___vfprintf_internal_r+0xa88>
  80bb00:	d9014f17 	ldw	r4,1340(sp)
  80bb04:	b00b883a 	mov	r5,r22
  80bb08:	d9800c04 	addi	r6,sp,48
  80bb0c:	080a1680 	call	80a168 <__sprint_r>
  80bb10:	103b631e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80bb14:	dc800e17 	ldw	r18,56(sp)
  80bb18:	d9000517 	ldw	r4,20(sp)
  80bb1c:	d8c01904 	addi	r3,sp,100
  80bb20:	003f2e06 	br	80b7dc <___vfprintf_internal_r+0x161c>
  80bb24:	d8c14c17 	ldw	r3,1328(sp)
  80bb28:	1880100c 	andi	r2,r3,64
  80bb2c:	1000a026 	beq	r2,zero,80bdb0 <___vfprintf_internal_r+0x1bf0>
  80bb30:	38800017 	ldw	r2,0(r7)
  80bb34:	39c00104 	addi	r7,r7,4
  80bb38:	d9c14015 	stw	r7,1280(sp)
  80bb3c:	d9014b17 	ldw	r4,1324(sp)
  80bb40:	d9c14017 	ldw	r7,1280(sp)
  80bb44:	1100000d 	sth	r4,0(r2)
  80bb48:	0039f906 	br	80a330 <___vfprintf_internal_r+0x170>
  80bb4c:	d9014f17 	ldw	r4,1340(sp)
  80bb50:	b00b883a 	mov	r5,r22
  80bb54:	d9800c04 	addi	r6,sp,48
  80bb58:	080a1680 	call	80a168 <__sprint_r>
  80bb5c:	103b501e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80bb60:	dc800e17 	ldw	r18,56(sp)
  80bb64:	dc400d17 	ldw	r17,52(sp)
  80bb68:	d9000517 	ldw	r4,20(sp)
  80bb6c:	d8c01904 	addi	r3,sp,100
  80bb70:	003f2d06 	br	80b828 <___vfprintf_internal_r+0x1668>
  80bb74:	00800184 	movi	r2,6
  80bb78:	14c09a36 	bltu	r2,r19,80bde4 <___vfprintf_internal_r+0x1c24>
  80bb7c:	dcc14515 	stw	r19,1300(sp)
  80bb80:	9800010e 	bge	r19,zero,80bb88 <___vfprintf_internal_r+0x19c8>
  80bb84:	d8014515 	stw	zero,1300(sp)
  80bb88:	008020b4 	movhi	r2,130
  80bb8c:	10b22904 	addi	r2,r2,-14172
  80bb90:	980f883a 	mov	r7,r19
  80bb94:	d8814115 	stw	r2,1284(sp)
  80bb98:	003a7806 	br	80a57c <___vfprintf_internal_r+0x3bc>
  80bb9c:	00bfffc4 	movi	r2,-1
  80bba0:	9880e226 	beq	r19,r2,80bf2c <___vfprintf_internal_r+0x1d6c>
  80bba4:	d9414d17 	ldw	r5,1332(sp)
  80bba8:	008019c4 	movi	r2,103
  80bbac:	2880dc26 	beq	r5,r2,80bf20 <___vfprintf_internal_r+0x1d60>
  80bbb0:	008011c4 	movi	r2,71
  80bbb4:	2880da26 	beq	r5,r2,80bf20 <___vfprintf_internal_r+0x1d60>
  80bbb8:	d9414c17 	ldw	r5,1328(sp)
  80bbbc:	d9014317 	ldw	r4,1292(sp)
  80bbc0:	d9814217 	ldw	r6,1288(sp)
  80bbc4:	29404014 	ori	r5,r5,256
  80bbc8:	d9414c15 	stw	r5,1328(sp)
  80bbcc:	2000cc16 	blt	r4,zero,80bf00 <___vfprintf_internal_r+0x1d40>
  80bbd0:	3021883a 	mov	r16,r6
  80bbd4:	2023883a 	mov	r17,r4
  80bbd8:	0039883a 	mov	fp,zero
  80bbdc:	d9414d17 	ldw	r5,1332(sp)
  80bbe0:	00801984 	movi	r2,102
  80bbe4:	2880b726 	beq	r5,r2,80bec4 <___vfprintf_internal_r+0x1d04>
  80bbe8:	00801184 	movi	r2,70
  80bbec:	2880b526 	beq	r5,r2,80bec4 <___vfprintf_internal_r+0x1d04>
  80bbf0:	00801944 	movi	r2,101
  80bbf4:	2880c826 	beq	r5,r2,80bf18 <___vfprintf_internal_r+0x1d58>
  80bbf8:	00801144 	movi	r2,69
  80bbfc:	2880c626 	beq	r5,r2,80bf18 <___vfprintf_internal_r+0x1d58>
  80bc00:	9829883a 	mov	r20,r19
  80bc04:	d9014f17 	ldw	r4,1340(sp)
  80bc08:	d8800504 	addi	r2,sp,20
  80bc0c:	880d883a 	mov	r6,r17
  80bc10:	d8800115 	stw	r2,4(sp)
  80bc14:	d8c00604 	addi	r3,sp,24
  80bc18:	d8800704 	addi	r2,sp,28
  80bc1c:	800b883a 	mov	r5,r16
  80bc20:	01c00084 	movi	r7,2
  80bc24:	d8c00215 	stw	r3,8(sp)
  80bc28:	d8800315 	stw	r2,12(sp)
  80bc2c:	dd000015 	stw	r20,0(sp)
  80bc30:	080c3e40 	call	80c3e4 <_dtoa_r>
  80bc34:	d9814d17 	ldw	r6,1332(sp)
  80bc38:	d8814115 	stw	r2,1284(sp)
  80bc3c:	008019c4 	movi	r2,103
  80bc40:	30809526 	beq	r6,r2,80be98 <___vfprintf_internal_r+0x1cd8>
  80bc44:	d8c14d17 	ldw	r3,1332(sp)
  80bc48:	008011c4 	movi	r2,71
  80bc4c:	18809226 	beq	r3,r2,80be98 <___vfprintf_internal_r+0x1cd8>
  80bc50:	d9414117 	ldw	r5,1284(sp)
  80bc54:	d9814d17 	ldw	r6,1332(sp)
  80bc58:	00801984 	movi	r2,102
  80bc5c:	2d25883a 	add	r18,r5,r20
  80bc60:	30808626 	beq	r6,r2,80be7c <___vfprintf_internal_r+0x1cbc>
  80bc64:	00801184 	movi	r2,70
  80bc68:	30808426 	beq	r6,r2,80be7c <___vfprintf_internal_r+0x1cbc>
  80bc6c:	000d883a 	mov	r6,zero
  80bc70:	000f883a 	mov	r7,zero
  80bc74:	880b883a 	mov	r5,r17
  80bc78:	8009883a 	mov	r4,r16
  80bc7c:	08088a00 	call	8088a0 <__eqdf2>
  80bc80:	1000751e 	bne	r2,zero,80be58 <___vfprintf_internal_r+0x1c98>
  80bc84:	9005883a 	mov	r2,r18
  80bc88:	dc800715 	stw	r18,28(sp)
  80bc8c:	d9014117 	ldw	r4,1284(sp)
  80bc90:	d9414d17 	ldw	r5,1332(sp)
  80bc94:	00c019c4 	movi	r3,103
  80bc98:	1125c83a 	sub	r18,r2,r4
  80bc9c:	28c06826 	beq	r5,r3,80be40 <___vfprintf_internal_r+0x1c80>
  80bca0:	008011c4 	movi	r2,71
  80bca4:	28806626 	beq	r5,r2,80be40 <___vfprintf_internal_r+0x1c80>
  80bca8:	d9000517 	ldw	r4,20(sp)
  80bcac:	d8c14d17 	ldw	r3,1332(sp)
  80bcb0:	00801944 	movi	r2,101
  80bcb4:	10c05516 	blt	r2,r3,80be0c <___vfprintf_internal_r+0x1c4c>
  80bcb8:	213fffc4 	addi	r4,r4,-1
  80bcbc:	d9000515 	stw	r4,20(sp)
  80bcc0:	d8c00805 	stb	r3,32(sp)
  80bcc4:	2021883a 	mov	r16,r4
  80bcc8:	2000c116 	blt	r4,zero,80bfd0 <___vfprintf_internal_r+0x1e10>
  80bccc:	00800ac4 	movi	r2,43
  80bcd0:	d8800845 	stb	r2,33(sp)
  80bcd4:	00800244 	movi	r2,9
  80bcd8:	1400af0e 	bge	r2,r16,80bf98 <___vfprintf_internal_r+0x1dd8>
  80bcdc:	1027883a 	mov	r19,r2
  80bce0:	dc400b84 	addi	r17,sp,46
  80bce4:	8009883a 	mov	r4,r16
  80bce8:	01400284 	movi	r5,10
  80bcec:	0808e2c0 	call	808e2c <__modsi3>
  80bcf0:	10800c04 	addi	r2,r2,48
  80bcf4:	8c7fffc4 	addi	r17,r17,-1
  80bcf8:	8009883a 	mov	r4,r16
  80bcfc:	01400284 	movi	r5,10
  80bd00:	88800005 	stb	r2,0(r17)
  80bd04:	0808dcc0 	call	808dcc <__divsi3>
  80bd08:	1021883a 	mov	r16,r2
  80bd0c:	98bff516 	blt	r19,r2,80bce4 <___vfprintf_internal_r+0x1b24>
  80bd10:	10c00c04 	addi	r3,r2,48
  80bd14:	d88009c4 	addi	r2,sp,39
  80bd18:	108001c4 	addi	r2,r2,7
  80bd1c:	897fffc4 	addi	r5,r17,-1
  80bd20:	88ffffc5 	stb	r3,-1(r17)
  80bd24:	2880a72e 	bgeu	r5,r2,80bfc4 <___vfprintf_internal_r+0x1e04>
  80bd28:	1009883a 	mov	r4,r2
  80bd2c:	d9800804 	addi	r6,sp,32
  80bd30:	d8c00884 	addi	r3,sp,34
  80bd34:	28800003 	ldbu	r2,0(r5)
  80bd38:	29400044 	addi	r5,r5,1
  80bd3c:	18800005 	stb	r2,0(r3)
  80bd40:	18c00044 	addi	r3,r3,1
  80bd44:	293ffb36 	bltu	r5,r4,80bd34 <___vfprintf_internal_r+0x1b74>
  80bd48:	1987c83a 	sub	r3,r3,r6
  80bd4c:	00800044 	movi	r2,1
  80bd50:	d8c14815 	stw	r3,1312(sp)
  80bd54:	90cf883a 	add	r7,r18,r3
  80bd58:	1480960e 	bge	r2,r18,80bfb4 <___vfprintf_internal_r+0x1df4>
  80bd5c:	39c00044 	addi	r7,r7,1
  80bd60:	d9c14515 	stw	r7,1300(sp)
  80bd64:	38003416 	blt	r7,zero,80be38 <___vfprintf_internal_r+0x1c78>
  80bd68:	e0803fcc 	andi	r2,fp,255
  80bd6c:	1080201c 	xori	r2,r2,128
  80bd70:	10bfe004 	addi	r2,r2,-128
  80bd74:	10004e26 	beq	r2,zero,80beb0 <___vfprintf_internal_r+0x1cf0>
  80bd78:	00800b44 	movi	r2,45
  80bd7c:	dc814715 	stw	r18,1308(sp)
  80bd80:	d8014615 	stw	zero,1304(sp)
  80bd84:	d8800405 	stb	r2,16(sp)
  80bd88:	003bb106 	br	80ac50 <___vfprintf_internal_r+0xa90>
  80bd8c:	00800b44 	movi	r2,45
  80bd90:	d8800405 	stb	r2,16(sp)
  80bd94:	003d3306 	br	80b264 <___vfprintf_internal_r+0x10a4>
  80bd98:	d9014f17 	ldw	r4,1340(sp)
  80bd9c:	b00b883a 	mov	r5,r22
  80bda0:	d9800c04 	addi	r6,sp,48
  80bda4:	080a1680 	call	80a168 <__sprint_r>
  80bda8:	103abd1e 	bne	r2,zero,80a8a0 <___vfprintf_internal_r+0x6e0>
  80bdac:	003abb06 	br	80a89c <___vfprintf_internal_r+0x6dc>
  80bdb0:	38800017 	ldw	r2,0(r7)
  80bdb4:	39c00104 	addi	r7,r7,4
  80bdb8:	d9c14015 	stw	r7,1280(sp)
  80bdbc:	d9414b17 	ldw	r5,1324(sp)
  80bdc0:	d9c14017 	ldw	r7,1280(sp)
  80bdc4:	11400015 	stw	r5,0(r2)
  80bdc8:	00395906 	br	80a330 <___vfprintf_internal_r+0x170>
  80bdcc:	980f883a 	mov	r7,r19
  80bdd0:	dcc14515 	stw	r19,1300(sp)
  80bdd4:	d8014615 	stw	zero,1304(sp)
  80bdd8:	003b9b06 	br	80ac48 <___vfprintf_internal_r+0xa88>
  80bddc:	0027883a 	mov	r19,zero
  80bde0:	00397806 	br	80a3c4 <___vfprintf_internal_r+0x204>
  80bde4:	00c020b4 	movhi	r3,130
  80bde8:	18f22904 	addi	r3,r3,-14172
  80bdec:	100f883a 	mov	r7,r2
  80bdf0:	d8814515 	stw	r2,1300(sp)
  80bdf4:	d8c14115 	stw	r3,1284(sp)
  80bdf8:	0039e006 	br	80a57c <___vfprintf_internal_r+0x3bc>
  80bdfc:	008020b4 	movhi	r2,130
  80be00:	10b22804 	addi	r2,r2,-14176
  80be04:	d8814115 	stw	r2,1284(sp)
  80be08:	003d1c06 	br	80b27c <___vfprintf_internal_r+0x10bc>
  80be0c:	d9414d17 	ldw	r5,1332(sp)
  80be10:	00801984 	movi	r2,102
  80be14:	28804926 	beq	r5,r2,80bf3c <___vfprintf_internal_r+0x1d7c>
  80be18:	200f883a 	mov	r7,r4
  80be1c:	24805716 	blt	r4,r18,80bf7c <___vfprintf_internal_r+0x1dbc>
  80be20:	d9414c17 	ldw	r5,1328(sp)
  80be24:	2880004c 	andi	r2,r5,1
  80be28:	10000126 	beq	r2,zero,80be30 <___vfprintf_internal_r+0x1c70>
  80be2c:	21c00044 	addi	r7,r4,1
  80be30:	d9c14515 	stw	r7,1300(sp)
  80be34:	383fcc0e 	bge	r7,zero,80bd68 <___vfprintf_internal_r+0x1ba8>
  80be38:	d8014515 	stw	zero,1300(sp)
  80be3c:	003fca06 	br	80bd68 <___vfprintf_internal_r+0x1ba8>
  80be40:	d9000517 	ldw	r4,20(sp)
  80be44:	00bfff04 	movi	r2,-4
  80be48:	1100480e 	bge	r2,r4,80bf6c <___vfprintf_internal_r+0x1dac>
  80be4c:	99004716 	blt	r19,r4,80bf6c <___vfprintf_internal_r+0x1dac>
  80be50:	d8c14d15 	stw	r3,1332(sp)
  80be54:	003ff006 	br	80be18 <___vfprintf_internal_r+0x1c58>
  80be58:	d8800717 	ldw	r2,28(sp)
  80be5c:	14bf8b2e 	bgeu	r2,r18,80bc8c <___vfprintf_internal_r+0x1acc>
  80be60:	9007883a 	mov	r3,r18
  80be64:	01000c04 	movi	r4,48
  80be68:	11000005 	stb	r4,0(r2)
  80be6c:	10800044 	addi	r2,r2,1
  80be70:	d8800715 	stw	r2,28(sp)
  80be74:	18bffc1e 	bne	r3,r2,80be68 <___vfprintf_internal_r+0x1ca8>
  80be78:	003f8406 	br	80bc8c <___vfprintf_internal_r+0x1acc>
  80be7c:	d8814117 	ldw	r2,1284(sp)
  80be80:	10c00007 	ldb	r3,0(r2)
  80be84:	00800c04 	movi	r2,48
  80be88:	18805b26 	beq	r3,r2,80bff8 <___vfprintf_internal_r+0x1e38>
  80be8c:	d9000517 	ldw	r4,20(sp)
  80be90:	9125883a 	add	r18,r18,r4
  80be94:	003f7506 	br	80bc6c <___vfprintf_internal_r+0x1aac>
  80be98:	d9014c17 	ldw	r4,1328(sp)
  80be9c:	2080004c 	andi	r2,r4,1
  80bea0:	1005003a 	cmpeq	r2,r2,zero
  80bea4:	103f6a26 	beq	r2,zero,80bc50 <___vfprintf_internal_r+0x1a90>
  80bea8:	d8800717 	ldw	r2,28(sp)
  80beac:	003f7706 	br	80bc8c <___vfprintf_internal_r+0x1acc>
  80beb0:	d9c14515 	stw	r7,1300(sp)
  80beb4:	38004d16 	blt	r7,zero,80bfec <___vfprintf_internal_r+0x1e2c>
  80beb8:	dc814715 	stw	r18,1308(sp)
  80bebc:	d8014615 	stw	zero,1304(sp)
  80bec0:	003b6106 	br	80ac48 <___vfprintf_internal_r+0xa88>
  80bec4:	d9014f17 	ldw	r4,1340(sp)
  80bec8:	d8800504 	addi	r2,sp,20
  80becc:	d8800115 	stw	r2,4(sp)
  80bed0:	d8c00604 	addi	r3,sp,24
  80bed4:	d8800704 	addi	r2,sp,28
  80bed8:	800b883a 	mov	r5,r16
  80bedc:	880d883a 	mov	r6,r17
  80bee0:	01c000c4 	movi	r7,3
  80bee4:	d8c00215 	stw	r3,8(sp)
  80bee8:	d8800315 	stw	r2,12(sp)
  80beec:	dcc00015 	stw	r19,0(sp)
  80bef0:	9829883a 	mov	r20,r19
  80bef4:	080c3e40 	call	80c3e4 <_dtoa_r>
  80bef8:	d8814115 	stw	r2,1284(sp)
  80befc:	003f5106 	br	80bc44 <___vfprintf_internal_r+0x1a84>
  80bf00:	d8c14217 	ldw	r3,1288(sp)
  80bf04:	d9014317 	ldw	r4,1292(sp)
  80bf08:	07000b44 	movi	fp,45
  80bf0c:	1821883a 	mov	r16,r3
  80bf10:	2460003c 	xorhi	r17,r4,32768
  80bf14:	003f3106 	br	80bbdc <___vfprintf_internal_r+0x1a1c>
  80bf18:	9d000044 	addi	r20,r19,1
  80bf1c:	003f3906 	br	80bc04 <___vfprintf_internal_r+0x1a44>
  80bf20:	983f251e 	bne	r19,zero,80bbb8 <___vfprintf_internal_r+0x19f8>
  80bf24:	04c00044 	movi	r19,1
  80bf28:	003f2306 	br	80bbb8 <___vfprintf_internal_r+0x19f8>
  80bf2c:	04c00184 	movi	r19,6
  80bf30:	003f2106 	br	80bbb8 <___vfprintf_internal_r+0x19f8>
  80bf34:	d8014515 	stw	zero,1300(sp)
  80bf38:	003eee06 	br	80baf4 <___vfprintf_internal_r+0x1934>
  80bf3c:	200f883a 	mov	r7,r4
  80bf40:	0100370e 	bge	zero,r4,80c020 <___vfprintf_internal_r+0x1e60>
  80bf44:	9800031e 	bne	r19,zero,80bf54 <___vfprintf_internal_r+0x1d94>
  80bf48:	d9814c17 	ldw	r6,1328(sp)
  80bf4c:	3080004c 	andi	r2,r6,1
  80bf50:	103fb726 	beq	r2,zero,80be30 <___vfprintf_internal_r+0x1c70>
  80bf54:	20800044 	addi	r2,r4,1
  80bf58:	98a7883a 	add	r19,r19,r2
  80bf5c:	dcc14515 	stw	r19,1300(sp)
  80bf60:	980f883a 	mov	r7,r19
  80bf64:	983f800e 	bge	r19,zero,80bd68 <___vfprintf_internal_r+0x1ba8>
  80bf68:	003fb306 	br	80be38 <___vfprintf_internal_r+0x1c78>
  80bf6c:	d9814d17 	ldw	r6,1332(sp)
  80bf70:	31bfff84 	addi	r6,r6,-2
  80bf74:	d9814d15 	stw	r6,1332(sp)
  80bf78:	003f4c06 	br	80bcac <___vfprintf_internal_r+0x1aec>
  80bf7c:	0100180e 	bge	zero,r4,80bfe0 <___vfprintf_internal_r+0x1e20>
  80bf80:	00800044 	movi	r2,1
  80bf84:	1485883a 	add	r2,r2,r18
  80bf88:	d8814515 	stw	r2,1300(sp)
  80bf8c:	100f883a 	mov	r7,r2
  80bf90:	103f750e 	bge	r2,zero,80bd68 <___vfprintf_internal_r+0x1ba8>
  80bf94:	003fa806 	br	80be38 <___vfprintf_internal_r+0x1c78>
  80bf98:	80c00c04 	addi	r3,r16,48
  80bf9c:	00800c04 	movi	r2,48
  80bfa0:	d8c008c5 	stb	r3,35(sp)
  80bfa4:	d9800804 	addi	r6,sp,32
  80bfa8:	d8c00904 	addi	r3,sp,36
  80bfac:	d8800885 	stb	r2,34(sp)
  80bfb0:	003f6506 	br	80bd48 <___vfprintf_internal_r+0x1b88>
  80bfb4:	d9014c17 	ldw	r4,1328(sp)
  80bfb8:	2084703a 	and	r2,r4,r2
  80bfbc:	103f9c26 	beq	r2,zero,80be30 <___vfprintf_internal_r+0x1c70>
  80bfc0:	003f6606 	br	80bd5c <___vfprintf_internal_r+0x1b9c>
  80bfc4:	d9800804 	addi	r6,sp,32
  80bfc8:	d8c00884 	addi	r3,sp,34
  80bfcc:	003f5e06 	br	80bd48 <___vfprintf_internal_r+0x1b88>
  80bfd0:	00800b44 	movi	r2,45
  80bfd4:	0121c83a 	sub	r16,zero,r4
  80bfd8:	d8800845 	stb	r2,33(sp)
  80bfdc:	003f3d06 	br	80bcd4 <___vfprintf_internal_r+0x1b14>
  80bfe0:	00800084 	movi	r2,2
  80bfe4:	1105c83a 	sub	r2,r2,r4
  80bfe8:	003fe606 	br	80bf84 <___vfprintf_internal_r+0x1dc4>
  80bfec:	d8014515 	stw	zero,1300(sp)
  80bff0:	dc814715 	stw	r18,1308(sp)
  80bff4:	003fb106 	br	80bebc <___vfprintf_internal_r+0x1cfc>
  80bff8:	000d883a 	mov	r6,zero
  80bffc:	000f883a 	mov	r7,zero
  80c000:	8009883a 	mov	r4,r16
  80c004:	880b883a 	mov	r5,r17
  80c008:	08089280 	call	808928 <__nedf2>
  80c00c:	103f9f26 	beq	r2,zero,80be8c <___vfprintf_internal_r+0x1ccc>
  80c010:	00800044 	movi	r2,1
  80c014:	1509c83a 	sub	r4,r2,r20
  80c018:	d9000515 	stw	r4,20(sp)
  80c01c:	003f9b06 	br	80be8c <___vfprintf_internal_r+0x1ccc>
  80c020:	98000d1e 	bne	r19,zero,80c058 <___vfprintf_internal_r+0x1e98>
  80c024:	d8c14c17 	ldw	r3,1328(sp)
  80c028:	1880004c 	andi	r2,r3,1
  80c02c:	10000a1e 	bne	r2,zero,80c058 <___vfprintf_internal_r+0x1e98>
  80c030:	01000044 	movi	r4,1
  80c034:	200f883a 	mov	r7,r4
  80c038:	d9014515 	stw	r4,1300(sp)
  80c03c:	003f4a06 	br	80bd68 <___vfprintf_internal_r+0x1ba8>
  80c040:	3cc00017 	ldw	r19,0(r7)
  80c044:	39c00104 	addi	r7,r7,4
  80c048:	983d0e0e 	bge	r19,zero,80b484 <___vfprintf_internal_r+0x12c4>
  80c04c:	b8c00007 	ldb	r3,0(r23)
  80c050:	04ffffc4 	movi	r19,-1
  80c054:	0038d906 	br	80a3bc <___vfprintf_internal_r+0x1fc>
  80c058:	9cc00084 	addi	r19,r19,2
  80c05c:	dcc14515 	stw	r19,1300(sp)
  80c060:	980f883a 	mov	r7,r19
  80c064:	983f400e 	bge	r19,zero,80bd68 <___vfprintf_internal_r+0x1ba8>
  80c068:	003f7306 	br	80be38 <___vfprintf_internal_r+0x1c78>

0080c06c <__vfprintf_internal>:
  80c06c:	008020b4 	movhi	r2,130
  80c070:	10b9c104 	addi	r2,r2,-6396
  80c074:	2013883a 	mov	r9,r4
  80c078:	11000017 	ldw	r4,0(r2)
  80c07c:	2805883a 	mov	r2,r5
  80c080:	300f883a 	mov	r7,r6
  80c084:	480b883a 	mov	r5,r9
  80c088:	100d883a 	mov	r6,r2
  80c08c:	080a1c01 	jmpi	80a1c0 <___vfprintf_internal_r>

0080c090 <__swsetup_r>:
  80c090:	008020b4 	movhi	r2,130
  80c094:	10b9c104 	addi	r2,r2,-6396
  80c098:	10c00017 	ldw	r3,0(r2)
  80c09c:	defffd04 	addi	sp,sp,-12
  80c0a0:	dc400115 	stw	r17,4(sp)
  80c0a4:	dc000015 	stw	r16,0(sp)
  80c0a8:	dfc00215 	stw	ra,8(sp)
  80c0ac:	2023883a 	mov	r17,r4
  80c0b0:	2821883a 	mov	r16,r5
  80c0b4:	18000226 	beq	r3,zero,80c0c0 <__swsetup_r+0x30>
  80c0b8:	18800e17 	ldw	r2,56(r3)
  80c0bc:	10001f26 	beq	r2,zero,80c13c <__swsetup_r+0xac>
  80c0c0:	8100030b 	ldhu	r4,12(r16)
  80c0c4:	2080020c 	andi	r2,r4,8
  80c0c8:	10002826 	beq	r2,zero,80c16c <__swsetup_r+0xdc>
  80c0cc:	81400417 	ldw	r5,16(r16)
  80c0d0:	28001d26 	beq	r5,zero,80c148 <__swsetup_r+0xb8>
  80c0d4:	2080004c 	andi	r2,r4,1
  80c0d8:	1005003a 	cmpeq	r2,r2,zero
  80c0dc:	10000b26 	beq	r2,zero,80c10c <__swsetup_r+0x7c>
  80c0e0:	2080008c 	andi	r2,r4,2
  80c0e4:	10001226 	beq	r2,zero,80c130 <__swsetup_r+0xa0>
  80c0e8:	0005883a 	mov	r2,zero
  80c0ec:	80800215 	stw	r2,8(r16)
  80c0f0:	28000b26 	beq	r5,zero,80c120 <__swsetup_r+0x90>
  80c0f4:	0005883a 	mov	r2,zero
  80c0f8:	dfc00217 	ldw	ra,8(sp)
  80c0fc:	dc400117 	ldw	r17,4(sp)
  80c100:	dc000017 	ldw	r16,0(sp)
  80c104:	dec00304 	addi	sp,sp,12
  80c108:	f800283a 	ret
  80c10c:	80800517 	ldw	r2,20(r16)
  80c110:	80000215 	stw	zero,8(r16)
  80c114:	0085c83a 	sub	r2,zero,r2
  80c118:	80800615 	stw	r2,24(r16)
  80c11c:	283ff51e 	bne	r5,zero,80c0f4 <__swsetup_r+0x64>
  80c120:	2080200c 	andi	r2,r4,128
  80c124:	103ff326 	beq	r2,zero,80c0f4 <__swsetup_r+0x64>
  80c128:	00bfffc4 	movi	r2,-1
  80c12c:	003ff206 	br	80c0f8 <__swsetup_r+0x68>
  80c130:	80800517 	ldw	r2,20(r16)
  80c134:	80800215 	stw	r2,8(r16)
  80c138:	003fed06 	br	80c0f0 <__swsetup_r+0x60>
  80c13c:	1809883a 	mov	r4,r3
  80c140:	080dc300 	call	80dc30 <__sinit>
  80c144:	003fde06 	br	80c0c0 <__swsetup_r+0x30>
  80c148:	20c0a00c 	andi	r3,r4,640
  80c14c:	00808004 	movi	r2,512
  80c150:	18bfe026 	beq	r3,r2,80c0d4 <__swsetup_r+0x44>
  80c154:	8809883a 	mov	r4,r17
  80c158:	800b883a 	mov	r5,r16
  80c15c:	080ea1c0 	call	80ea1c <__smakebuf_r>
  80c160:	8100030b 	ldhu	r4,12(r16)
  80c164:	81400417 	ldw	r5,16(r16)
  80c168:	003fda06 	br	80c0d4 <__swsetup_r+0x44>
  80c16c:	2080040c 	andi	r2,r4,16
  80c170:	103fed26 	beq	r2,zero,80c128 <__swsetup_r+0x98>
  80c174:	2080010c 	andi	r2,r4,4
  80c178:	10001226 	beq	r2,zero,80c1c4 <__swsetup_r+0x134>
  80c17c:	81400c17 	ldw	r5,48(r16)
  80c180:	28000526 	beq	r5,zero,80c198 <__swsetup_r+0x108>
  80c184:	80801004 	addi	r2,r16,64
  80c188:	28800226 	beq	r5,r2,80c194 <__swsetup_r+0x104>
  80c18c:	8809883a 	mov	r4,r17
  80c190:	080dfb40 	call	80dfb4 <_free_r>
  80c194:	80000c15 	stw	zero,48(r16)
  80c198:	8080030b 	ldhu	r2,12(r16)
  80c19c:	81400417 	ldw	r5,16(r16)
  80c1a0:	80000115 	stw	zero,4(r16)
  80c1a4:	10bff6cc 	andi	r2,r2,65499
  80c1a8:	8080030d 	sth	r2,12(r16)
  80c1ac:	81400015 	stw	r5,0(r16)
  80c1b0:	8080030b 	ldhu	r2,12(r16)
  80c1b4:	10800214 	ori	r2,r2,8
  80c1b8:	113fffcc 	andi	r4,r2,65535
  80c1bc:	8080030d 	sth	r2,12(r16)
  80c1c0:	003fc306 	br	80c0d0 <__swsetup_r+0x40>
  80c1c4:	81400417 	ldw	r5,16(r16)
  80c1c8:	003ff906 	br	80c1b0 <__swsetup_r+0x120>

0080c1cc <quorem>:
  80c1cc:	28c00417 	ldw	r3,16(r5)
  80c1d0:	20800417 	ldw	r2,16(r4)
  80c1d4:	defff604 	addi	sp,sp,-40
  80c1d8:	ddc00715 	stw	r23,28(sp)
  80c1dc:	dd400515 	stw	r21,20(sp)
  80c1e0:	dfc00915 	stw	ra,36(sp)
  80c1e4:	df000815 	stw	fp,32(sp)
  80c1e8:	dd800615 	stw	r22,24(sp)
  80c1ec:	dd000415 	stw	r20,16(sp)
  80c1f0:	dcc00315 	stw	r19,12(sp)
  80c1f4:	dc800215 	stw	r18,8(sp)
  80c1f8:	dc400115 	stw	r17,4(sp)
  80c1fc:	dc000015 	stw	r16,0(sp)
  80c200:	202f883a 	mov	r23,r4
  80c204:	282b883a 	mov	r21,r5
  80c208:	10c07416 	blt	r2,r3,80c3dc <quorem+0x210>
  80c20c:	1c7fffc4 	addi	r17,r3,-1
  80c210:	8c45883a 	add	r2,r17,r17
  80c214:	1085883a 	add	r2,r2,r2
  80c218:	2c000504 	addi	r16,r5,20
  80c21c:	24c00504 	addi	r19,r4,20
  80c220:	14ed883a 	add	r22,r2,r19
  80c224:	80a5883a 	add	r18,r16,r2
  80c228:	b7000017 	ldw	fp,0(r22)
  80c22c:	91400017 	ldw	r5,0(r18)
  80c230:	e009883a 	mov	r4,fp
  80c234:	29400044 	addi	r5,r5,1
  80c238:	0808e8c0 	call	808e8c <__udivsi3>
  80c23c:	1029883a 	mov	r20,r2
  80c240:	10003c1e 	bne	r2,zero,80c334 <quorem+0x168>
  80c244:	a80b883a 	mov	r5,r21
  80c248:	b809883a 	mov	r4,r23
  80c24c:	080f0080 	call	80f008 <__mcmp>
  80c250:	10002b16 	blt	r2,zero,80c300 <quorem+0x134>
  80c254:	a5000044 	addi	r20,r20,1
  80c258:	980f883a 	mov	r7,r19
  80c25c:	0011883a 	mov	r8,zero
  80c260:	0009883a 	mov	r4,zero
  80c264:	81400017 	ldw	r5,0(r16)
  80c268:	38c00017 	ldw	r3,0(r7)
  80c26c:	84000104 	addi	r16,r16,4
  80c270:	28bfffcc 	andi	r2,r5,65535
  80c274:	2085883a 	add	r2,r4,r2
  80c278:	11bfffcc 	andi	r6,r2,65535
  80c27c:	193fffcc 	andi	r4,r3,65535
  80c280:	1004d43a 	srli	r2,r2,16
  80c284:	280ad43a 	srli	r5,r5,16
  80c288:	2189c83a 	sub	r4,r4,r6
  80c28c:	2209883a 	add	r4,r4,r8
  80c290:	1806d43a 	srli	r3,r3,16
  80c294:	288b883a 	add	r5,r5,r2
  80c298:	200dd43a 	srai	r6,r4,16
  80c29c:	28bfffcc 	andi	r2,r5,65535
  80c2a0:	1887c83a 	sub	r3,r3,r2
  80c2a4:	1987883a 	add	r3,r3,r6
  80c2a8:	3900000d 	sth	r4,0(r7)
  80c2ac:	38c0008d 	sth	r3,2(r7)
  80c2b0:	2808d43a 	srli	r4,r5,16
  80c2b4:	39c00104 	addi	r7,r7,4
  80c2b8:	1811d43a 	srai	r8,r3,16
  80c2bc:	943fe92e 	bgeu	r18,r16,80c264 <quorem+0x98>
  80c2c0:	8c45883a 	add	r2,r17,r17
  80c2c4:	1085883a 	add	r2,r2,r2
  80c2c8:	9885883a 	add	r2,r19,r2
  80c2cc:	10c00017 	ldw	r3,0(r2)
  80c2d0:	18000b1e 	bne	r3,zero,80c300 <quorem+0x134>
  80c2d4:	113fff04 	addi	r4,r2,-4
  80c2d8:	9900082e 	bgeu	r19,r4,80c2fc <quorem+0x130>
  80c2dc:	10bfff17 	ldw	r2,-4(r2)
  80c2e0:	10000326 	beq	r2,zero,80c2f0 <quorem+0x124>
  80c2e4:	00000506 	br	80c2fc <quorem+0x130>
  80c2e8:	20800017 	ldw	r2,0(r4)
  80c2ec:	1000031e 	bne	r2,zero,80c2fc <quorem+0x130>
  80c2f0:	213fff04 	addi	r4,r4,-4
  80c2f4:	8c7fffc4 	addi	r17,r17,-1
  80c2f8:	993ffb36 	bltu	r19,r4,80c2e8 <quorem+0x11c>
  80c2fc:	bc400415 	stw	r17,16(r23)
  80c300:	a005883a 	mov	r2,r20
  80c304:	dfc00917 	ldw	ra,36(sp)
  80c308:	df000817 	ldw	fp,32(sp)
  80c30c:	ddc00717 	ldw	r23,28(sp)
  80c310:	dd800617 	ldw	r22,24(sp)
  80c314:	dd400517 	ldw	r21,20(sp)
  80c318:	dd000417 	ldw	r20,16(sp)
  80c31c:	dcc00317 	ldw	r19,12(sp)
  80c320:	dc800217 	ldw	r18,8(sp)
  80c324:	dc400117 	ldw	r17,4(sp)
  80c328:	dc000017 	ldw	r16,0(sp)
  80c32c:	dec00a04 	addi	sp,sp,40
  80c330:	f800283a 	ret
  80c334:	980f883a 	mov	r7,r19
  80c338:	8011883a 	mov	r8,r16
  80c33c:	0013883a 	mov	r9,zero
  80c340:	000d883a 	mov	r6,zero
  80c344:	40c00017 	ldw	r3,0(r8)
  80c348:	39000017 	ldw	r4,0(r7)
  80c34c:	42000104 	addi	r8,r8,4
  80c350:	18bfffcc 	andi	r2,r3,65535
  80c354:	a085383a 	mul	r2,r20,r2
  80c358:	1806d43a 	srli	r3,r3,16
  80c35c:	217fffcc 	andi	r5,r4,65535
  80c360:	3085883a 	add	r2,r6,r2
  80c364:	11bfffcc 	andi	r6,r2,65535
  80c368:	a0c7383a 	mul	r3,r20,r3
  80c36c:	1004d43a 	srli	r2,r2,16
  80c370:	298bc83a 	sub	r5,r5,r6
  80c374:	2a4b883a 	add	r5,r5,r9
  80c378:	2008d43a 	srli	r4,r4,16
  80c37c:	1887883a 	add	r3,r3,r2
  80c380:	280dd43a 	srai	r6,r5,16
  80c384:	18bfffcc 	andi	r2,r3,65535
  80c388:	2089c83a 	sub	r4,r4,r2
  80c38c:	2189883a 	add	r4,r4,r6
  80c390:	3900008d 	sth	r4,2(r7)
  80c394:	3940000d 	sth	r5,0(r7)
  80c398:	180cd43a 	srli	r6,r3,16
  80c39c:	39c00104 	addi	r7,r7,4
  80c3a0:	2013d43a 	srai	r9,r4,16
  80c3a4:	923fe72e 	bgeu	r18,r8,80c344 <quorem+0x178>
  80c3a8:	e03fa61e 	bne	fp,zero,80c244 <quorem+0x78>
  80c3ac:	b0ffff04 	addi	r3,r22,-4
  80c3b0:	98c0082e 	bgeu	r19,r3,80c3d4 <quorem+0x208>
  80c3b4:	b0bfff17 	ldw	r2,-4(r22)
  80c3b8:	10000326 	beq	r2,zero,80c3c8 <quorem+0x1fc>
  80c3bc:	00000506 	br	80c3d4 <quorem+0x208>
  80c3c0:	18800017 	ldw	r2,0(r3)
  80c3c4:	1000031e 	bne	r2,zero,80c3d4 <quorem+0x208>
  80c3c8:	18ffff04 	addi	r3,r3,-4
  80c3cc:	8c7fffc4 	addi	r17,r17,-1
  80c3d0:	98fffb36 	bltu	r19,r3,80c3c0 <quorem+0x1f4>
  80c3d4:	bc400415 	stw	r17,16(r23)
  80c3d8:	003f9a06 	br	80c244 <quorem+0x78>
  80c3dc:	0005883a 	mov	r2,zero
  80c3e0:	003fc806 	br	80c304 <quorem+0x138>

0080c3e4 <_dtoa_r>:
  80c3e4:	22001017 	ldw	r8,64(r4)
  80c3e8:	deffda04 	addi	sp,sp,-152
  80c3ec:	dd402115 	stw	r21,132(sp)
  80c3f0:	dd002015 	stw	r20,128(sp)
  80c3f4:	dc801e15 	stw	r18,120(sp)
  80c3f8:	dc401d15 	stw	r17,116(sp)
  80c3fc:	dfc02515 	stw	ra,148(sp)
  80c400:	df002415 	stw	fp,144(sp)
  80c404:	ddc02315 	stw	r23,140(sp)
  80c408:	dd802215 	stw	r22,136(sp)
  80c40c:	dcc01f15 	stw	r19,124(sp)
  80c410:	dc001c15 	stw	r16,112(sp)
  80c414:	d9001615 	stw	r4,88(sp)
  80c418:	3023883a 	mov	r17,r6
  80c41c:	2829883a 	mov	r20,r5
  80c420:	d9c01715 	stw	r7,92(sp)
  80c424:	dc802817 	ldw	r18,160(sp)
  80c428:	302b883a 	mov	r21,r6
  80c42c:	40000a26 	beq	r8,zero,80c458 <_dtoa_r+0x74>
  80c430:	20801117 	ldw	r2,68(r4)
  80c434:	400b883a 	mov	r5,r8
  80c438:	40800115 	stw	r2,4(r8)
  80c43c:	20c01117 	ldw	r3,68(r4)
  80c440:	00800044 	movi	r2,1
  80c444:	10c4983a 	sll	r2,r2,r3
  80c448:	40800215 	stw	r2,8(r8)
  80c44c:	080eeac0 	call	80eeac <_Bfree>
  80c450:	d8c01617 	ldw	r3,88(sp)
  80c454:	18001015 	stw	zero,64(r3)
  80c458:	8800a316 	blt	r17,zero,80c6e8 <_dtoa_r+0x304>
  80c45c:	90000015 	stw	zero,0(r18)
  80c460:	a8dffc2c 	andhi	r3,r21,32752
  80c464:	009ffc34 	movhi	r2,32752
  80c468:	18809126 	beq	r3,r2,80c6b0 <_dtoa_r+0x2cc>
  80c46c:	000d883a 	mov	r6,zero
  80c470:	000f883a 	mov	r7,zero
  80c474:	a009883a 	mov	r4,r20
  80c478:	a80b883a 	mov	r5,r21
  80c47c:	dd001215 	stw	r20,72(sp)
  80c480:	dd401315 	stw	r21,76(sp)
  80c484:	08089280 	call	808928 <__nedf2>
  80c488:	1000171e 	bne	r2,zero,80c4e8 <_dtoa_r+0x104>
  80c48c:	d9802717 	ldw	r6,156(sp)
  80c490:	00800044 	movi	r2,1
  80c494:	30800015 	stw	r2,0(r6)
  80c498:	d8802917 	ldw	r2,164(sp)
  80c49c:	10029b26 	beq	r2,zero,80cf0c <_dtoa_r+0xb28>
  80c4a0:	d9002917 	ldw	r4,164(sp)
  80c4a4:	008020b4 	movhi	r2,130
  80c4a8:	10b23744 	addi	r2,r2,-14115
  80c4ac:	10ffffc4 	addi	r3,r2,-1
  80c4b0:	20800015 	stw	r2,0(r4)
  80c4b4:	1805883a 	mov	r2,r3
  80c4b8:	dfc02517 	ldw	ra,148(sp)
  80c4bc:	df002417 	ldw	fp,144(sp)
  80c4c0:	ddc02317 	ldw	r23,140(sp)
  80c4c4:	dd802217 	ldw	r22,136(sp)
  80c4c8:	dd402117 	ldw	r21,132(sp)
  80c4cc:	dd002017 	ldw	r20,128(sp)
  80c4d0:	dcc01f17 	ldw	r19,124(sp)
  80c4d4:	dc801e17 	ldw	r18,120(sp)
  80c4d8:	dc401d17 	ldw	r17,116(sp)
  80c4dc:	dc001c17 	ldw	r16,112(sp)
  80c4e0:	dec02604 	addi	sp,sp,152
  80c4e4:	f800283a 	ret
  80c4e8:	d9001617 	ldw	r4,88(sp)
  80c4ec:	d9401217 	ldw	r5,72(sp)
  80c4f0:	d8800104 	addi	r2,sp,4
  80c4f4:	a80d883a 	mov	r6,r21
  80c4f8:	d9c00204 	addi	r7,sp,8
  80c4fc:	d8800015 	stw	r2,0(sp)
  80c500:	080f4e80 	call	80f4e8 <__d2b>
  80c504:	d8800715 	stw	r2,28(sp)
  80c508:	a804d53a 	srli	r2,r21,20
  80c50c:	1101ffcc 	andi	r4,r2,2047
  80c510:	20008626 	beq	r4,zero,80c72c <_dtoa_r+0x348>
  80c514:	d8c01217 	ldw	r3,72(sp)
  80c518:	00800434 	movhi	r2,16
  80c51c:	10bfffc4 	addi	r2,r2,-1
  80c520:	ddc00117 	ldw	r23,4(sp)
  80c524:	a884703a 	and	r2,r21,r2
  80c528:	1811883a 	mov	r8,r3
  80c52c:	124ffc34 	orhi	r9,r2,16368
  80c530:	25bf0044 	addi	r22,r4,-1023
  80c534:	d8000815 	stw	zero,32(sp)
  80c538:	0005883a 	mov	r2,zero
  80c53c:	00cffe34 	movhi	r3,16376
  80c540:	480b883a 	mov	r5,r9
  80c544:	4009883a 	mov	r4,r8
  80c548:	180f883a 	mov	r7,r3
  80c54c:	100d883a 	mov	r6,r2
  80c550:	08081900 	call	808190 <__subdf3>
  80c554:	0218dbf4 	movhi	r8,25455
  80c558:	4210d844 	addi	r8,r8,17249
  80c55c:	024ff4f4 	movhi	r9,16339
  80c560:	4a61e9c4 	addi	r9,r9,-30809
  80c564:	480f883a 	mov	r7,r9
  80c568:	400d883a 	mov	r6,r8
  80c56c:	180b883a 	mov	r5,r3
  80c570:	1009883a 	mov	r4,r2
  80c574:	08082840 	call	808284 <__muldf3>
  80c578:	0222d874 	movhi	r8,35681
  80c57c:	42322cc4 	addi	r8,r8,-14157
  80c580:	024ff1f4 	movhi	r9,16327
  80c584:	4a628a04 	addi	r9,r9,-30168
  80c588:	480f883a 	mov	r7,r9
  80c58c:	400d883a 	mov	r6,r8
  80c590:	180b883a 	mov	r5,r3
  80c594:	1009883a 	mov	r4,r2
  80c598:	08082100 	call	808210 <__adddf3>
  80c59c:	b009883a 	mov	r4,r22
  80c5a0:	1021883a 	mov	r16,r2
  80c5a4:	1823883a 	mov	r17,r3
  80c5a8:	0808b480 	call	808b48 <__floatsidf>
  80c5ac:	021427f4 	movhi	r8,20639
  80c5b0:	421e7ec4 	addi	r8,r8,31227
  80c5b4:	024ff4f4 	movhi	r9,16339
  80c5b8:	4a5104c4 	addi	r9,r9,17427
  80c5bc:	480f883a 	mov	r7,r9
  80c5c0:	400d883a 	mov	r6,r8
  80c5c4:	180b883a 	mov	r5,r3
  80c5c8:	1009883a 	mov	r4,r2
  80c5cc:	08082840 	call	808284 <__muldf3>
  80c5d0:	180f883a 	mov	r7,r3
  80c5d4:	880b883a 	mov	r5,r17
  80c5d8:	100d883a 	mov	r6,r2
  80c5dc:	8009883a 	mov	r4,r16
  80c5e0:	08082100 	call	808210 <__adddf3>
  80c5e4:	1009883a 	mov	r4,r2
  80c5e8:	180b883a 	mov	r5,r3
  80c5ec:	1021883a 	mov	r16,r2
  80c5f0:	1823883a 	mov	r17,r3
  80c5f4:	0808c400 	call	808c40 <__fixdfsi>
  80c5f8:	000d883a 	mov	r6,zero
  80c5fc:	000f883a 	mov	r7,zero
  80c600:	8009883a 	mov	r4,r16
  80c604:	880b883a 	mov	r5,r17
  80c608:	d8800d15 	stw	r2,52(sp)
  80c60c:	0808a380 	call	808a38 <__ltdf2>
  80c610:	10031716 	blt	r2,zero,80d270 <_dtoa_r+0xe8c>
  80c614:	d8c00d17 	ldw	r3,52(sp)
  80c618:	00800584 	movi	r2,22
  80c61c:	10c1482e 	bgeu	r2,r3,80cb40 <_dtoa_r+0x75c>
  80c620:	01000044 	movi	r4,1
  80c624:	d9000c15 	stw	r4,48(sp)
  80c628:	bd85c83a 	sub	r2,r23,r22
  80c62c:	11bfffc4 	addi	r6,r2,-1
  80c630:	30030b16 	blt	r6,zero,80d260 <_dtoa_r+0xe7c>
  80c634:	d9800a15 	stw	r6,40(sp)
  80c638:	d8001115 	stw	zero,68(sp)
  80c63c:	d8c00d17 	ldw	r3,52(sp)
  80c640:	1802ff16 	blt	r3,zero,80d240 <_dtoa_r+0xe5c>
  80c644:	d9000a17 	ldw	r4,40(sp)
  80c648:	d8c00915 	stw	r3,36(sp)
  80c64c:	d8001015 	stw	zero,64(sp)
  80c650:	20c9883a 	add	r4,r4,r3
  80c654:	d9000a15 	stw	r4,40(sp)
  80c658:	d9001717 	ldw	r4,92(sp)
  80c65c:	00800244 	movi	r2,9
  80c660:	11004636 	bltu	r2,r4,80c77c <_dtoa_r+0x398>
  80c664:	00800144 	movi	r2,5
  80c668:	11020416 	blt	r2,r4,80ce7c <_dtoa_r+0xa98>
  80c66c:	04400044 	movi	r17,1
  80c670:	d8c01717 	ldw	r3,92(sp)
  80c674:	00800144 	movi	r2,5
  80c678:	10c1ed36 	bltu	r2,r3,80ce30 <_dtoa_r+0xa4c>
  80c67c:	18c5883a 	add	r2,r3,r3
  80c680:	1085883a 	add	r2,r2,r2
  80c684:	00c02074 	movhi	r3,129
  80c688:	18f1a604 	addi	r3,r3,-14696
  80c68c:	10c5883a 	add	r2,r2,r3
  80c690:	11000017 	ldw	r4,0(r2)
  80c694:	2000683a 	jmp	r4
  80c698:	0080c784 	movi	r2,798
  80c69c:	0080c784 	movi	r2,798
  80c6a0:	0080d184 	movi	r2,838
  80c6a4:	0080d15c 	xori	r2,zero,837
  80c6a8:	0080d1a0 	cmpeqi	r2,zero,838
  80c6ac:	0080d1ac 	andhi	r2,zero,838
  80c6b0:	d9002717 	ldw	r4,156(sp)
  80c6b4:	0089c3c4 	movi	r2,9999
  80c6b8:	20800015 	stw	r2,0(r4)
  80c6bc:	a0001026 	beq	r20,zero,80c700 <_dtoa_r+0x31c>
  80c6c0:	00c020b4 	movhi	r3,130
  80c6c4:	18f24304 	addi	r3,r3,-14068
  80c6c8:	d9802917 	ldw	r6,164(sp)
  80c6cc:	303f7926 	beq	r6,zero,80c4b4 <_dtoa_r+0xd0>
  80c6d0:	188000c7 	ldb	r2,3(r3)
  80c6d4:	190000c4 	addi	r4,r3,3
  80c6d8:	1000101e 	bne	r2,zero,80c71c <_dtoa_r+0x338>
  80c6dc:	d8802917 	ldw	r2,164(sp)
  80c6e0:	11000015 	stw	r4,0(r2)
  80c6e4:	003f7306 	br	80c4b4 <_dtoa_r+0xd0>
  80c6e8:	00a00034 	movhi	r2,32768
  80c6ec:	10bfffc4 	addi	r2,r2,-1
  80c6f0:	00c00044 	movi	r3,1
  80c6f4:	88aa703a 	and	r21,r17,r2
  80c6f8:	90c00015 	stw	r3,0(r18)
  80c6fc:	003f5806 	br	80c460 <_dtoa_r+0x7c>
  80c700:	00800434 	movhi	r2,16
  80c704:	10bfffc4 	addi	r2,r2,-1
  80c708:	a884703a 	and	r2,r21,r2
  80c70c:	103fec1e 	bne	r2,zero,80c6c0 <_dtoa_r+0x2dc>
  80c710:	00c020b4 	movhi	r3,130
  80c714:	18f24004 	addi	r3,r3,-14080
  80c718:	003feb06 	br	80c6c8 <_dtoa_r+0x2e4>
  80c71c:	d8802917 	ldw	r2,164(sp)
  80c720:	19000204 	addi	r4,r3,8
  80c724:	11000015 	stw	r4,0(r2)
  80c728:	003f6206 	br	80c4b4 <_dtoa_r+0xd0>
  80c72c:	ddc00117 	ldw	r23,4(sp)
  80c730:	d8800217 	ldw	r2,8(sp)
  80c734:	01000804 	movi	r4,32
  80c738:	b8c10c84 	addi	r3,r23,1074
  80c73c:	18a3883a 	add	r17,r3,r2
  80c740:	2441b80e 	bge	r4,r17,80ce24 <_dtoa_r+0xa40>
  80c744:	00c01004 	movi	r3,64
  80c748:	1c47c83a 	sub	r3,r3,r17
  80c74c:	88bff804 	addi	r2,r17,-32
  80c750:	a8c6983a 	sll	r3,r21,r3
  80c754:	a084d83a 	srl	r2,r20,r2
  80c758:	1888b03a 	or	r4,r3,r2
  80c75c:	08117840 	call	811784 <__floatunsidf>
  80c760:	1011883a 	mov	r8,r2
  80c764:	00bf8434 	movhi	r2,65040
  80c768:	01000044 	movi	r4,1
  80c76c:	10d3883a 	add	r9,r2,r3
  80c770:	8dbef344 	addi	r22,r17,-1075
  80c774:	d9000815 	stw	r4,32(sp)
  80c778:	003f6f06 	br	80c538 <_dtoa_r+0x154>
  80c77c:	d8001715 	stw	zero,92(sp)
  80c780:	04400044 	movi	r17,1
  80c784:	00bfffc4 	movi	r2,-1
  80c788:	00c00044 	movi	r3,1
  80c78c:	d8800e15 	stw	r2,56(sp)
  80c790:	d8002615 	stw	zero,152(sp)
  80c794:	d8800f15 	stw	r2,60(sp)
  80c798:	d8c00b15 	stw	r3,44(sp)
  80c79c:	1021883a 	mov	r16,r2
  80c7a0:	d8801617 	ldw	r2,88(sp)
  80c7a4:	10001115 	stw	zero,68(r2)
  80c7a8:	d8801617 	ldw	r2,88(sp)
  80c7ac:	11401117 	ldw	r5,68(r2)
  80c7b0:	1009883a 	mov	r4,r2
  80c7b4:	080f42c0 	call	80f42c <_Balloc>
  80c7b8:	d8c01617 	ldw	r3,88(sp)
  80c7bc:	d8800515 	stw	r2,20(sp)
  80c7c0:	18801015 	stw	r2,64(r3)
  80c7c4:	00800384 	movi	r2,14
  80c7c8:	14006836 	bltu	r2,r16,80c96c <_dtoa_r+0x588>
  80c7cc:	8805003a 	cmpeq	r2,r17,zero
  80c7d0:	1000661e 	bne	r2,zero,80c96c <_dtoa_r+0x588>
  80c7d4:	d9000d17 	ldw	r4,52(sp)
  80c7d8:	0102300e 	bge	zero,r4,80d09c <_dtoa_r+0xcb8>
  80c7dc:	208003cc 	andi	r2,r4,15
  80c7e0:	100490fa 	slli	r2,r2,3
  80c7e4:	2025d13a 	srai	r18,r4,4
  80c7e8:	00c020b4 	movhi	r3,130
  80c7ec:	18f25404 	addi	r3,r3,-14000
  80c7f0:	10c5883a 	add	r2,r2,r3
  80c7f4:	90c0040c 	andi	r3,r18,16
  80c7f8:	14000017 	ldw	r16,0(r2)
  80c7fc:	14400117 	ldw	r17,4(r2)
  80c800:	18036a1e 	bne	r3,zero,80d5ac <_dtoa_r+0x11c8>
  80c804:	05800084 	movi	r22,2
  80c808:	90001026 	beq	r18,zero,80c84c <_dtoa_r+0x468>
  80c80c:	04c020b4 	movhi	r19,130
  80c810:	9cf28604 	addi	r19,r19,-13800
  80c814:	9080004c 	andi	r2,r18,1
  80c818:	1005003a 	cmpeq	r2,r2,zero
  80c81c:	1000081e 	bne	r2,zero,80c840 <_dtoa_r+0x45c>
  80c820:	99800017 	ldw	r6,0(r19)
  80c824:	99c00117 	ldw	r7,4(r19)
  80c828:	880b883a 	mov	r5,r17
  80c82c:	8009883a 	mov	r4,r16
  80c830:	08082840 	call	808284 <__muldf3>
  80c834:	1021883a 	mov	r16,r2
  80c838:	b5800044 	addi	r22,r22,1
  80c83c:	1823883a 	mov	r17,r3
  80c840:	9025d07a 	srai	r18,r18,1
  80c844:	9cc00204 	addi	r19,r19,8
  80c848:	903ff21e 	bne	r18,zero,80c814 <_dtoa_r+0x430>
  80c84c:	a80b883a 	mov	r5,r21
  80c850:	a009883a 	mov	r4,r20
  80c854:	880f883a 	mov	r7,r17
  80c858:	800d883a 	mov	r6,r16
  80c85c:	08086480 	call	808648 <__divdf3>
  80c860:	1029883a 	mov	r20,r2
  80c864:	182b883a 	mov	r21,r3
  80c868:	d8c00c17 	ldw	r3,48(sp)
  80c86c:	1805003a 	cmpeq	r2,r3,zero
  80c870:	1000081e 	bne	r2,zero,80c894 <_dtoa_r+0x4b0>
  80c874:	0005883a 	mov	r2,zero
  80c878:	00cffc34 	movhi	r3,16368
  80c87c:	180f883a 	mov	r7,r3
  80c880:	a009883a 	mov	r4,r20
  80c884:	a80b883a 	mov	r5,r21
  80c888:	100d883a 	mov	r6,r2
  80c88c:	0808a380 	call	808a38 <__ltdf2>
  80c890:	1003fe16 	blt	r2,zero,80d88c <_dtoa_r+0x14a8>
  80c894:	b009883a 	mov	r4,r22
  80c898:	0808b480 	call	808b48 <__floatsidf>
  80c89c:	180b883a 	mov	r5,r3
  80c8a0:	1009883a 	mov	r4,r2
  80c8a4:	a00d883a 	mov	r6,r20
  80c8a8:	a80f883a 	mov	r7,r21
  80c8ac:	08082840 	call	808284 <__muldf3>
  80c8b0:	0011883a 	mov	r8,zero
  80c8b4:	02500734 	movhi	r9,16412
  80c8b8:	1009883a 	mov	r4,r2
  80c8bc:	180b883a 	mov	r5,r3
  80c8c0:	480f883a 	mov	r7,r9
  80c8c4:	400d883a 	mov	r6,r8
  80c8c8:	08082100 	call	808210 <__adddf3>
  80c8cc:	d9000f17 	ldw	r4,60(sp)
  80c8d0:	102d883a 	mov	r22,r2
  80c8d4:	00bf3034 	movhi	r2,64704
  80c8d8:	18b9883a 	add	fp,r3,r2
  80c8dc:	e02f883a 	mov	r23,fp
  80c8e0:	20028f1e 	bne	r4,zero,80d320 <_dtoa_r+0xf3c>
  80c8e4:	0005883a 	mov	r2,zero
  80c8e8:	00d00534 	movhi	r3,16404
  80c8ec:	a009883a 	mov	r4,r20
  80c8f0:	a80b883a 	mov	r5,r21
  80c8f4:	180f883a 	mov	r7,r3
  80c8f8:	100d883a 	mov	r6,r2
  80c8fc:	08081900 	call	808190 <__subdf3>
  80c900:	1009883a 	mov	r4,r2
  80c904:	e00f883a 	mov	r7,fp
  80c908:	180b883a 	mov	r5,r3
  80c90c:	b00d883a 	mov	r6,r22
  80c910:	1025883a 	mov	r18,r2
  80c914:	1827883a 	mov	r19,r3
  80c918:	08089b00 	call	8089b0 <__gtdf2>
  80c91c:	00834f16 	blt	zero,r2,80d65c <_dtoa_r+0x1278>
  80c920:	e0e0003c 	xorhi	r3,fp,32768
  80c924:	9009883a 	mov	r4,r18
  80c928:	980b883a 	mov	r5,r19
  80c92c:	180f883a 	mov	r7,r3
  80c930:	b00d883a 	mov	r6,r22
  80c934:	0808a380 	call	808a38 <__ltdf2>
  80c938:	1000080e 	bge	r2,zero,80c95c <_dtoa_r+0x578>
  80c93c:	0027883a 	mov	r19,zero
  80c940:	0025883a 	mov	r18,zero
  80c944:	d8802617 	ldw	r2,152(sp)
  80c948:	df000517 	ldw	fp,20(sp)
  80c94c:	d8000615 	stw	zero,24(sp)
  80c950:	0084303a 	nor	r2,zero,r2
  80c954:	d8800d15 	stw	r2,52(sp)
  80c958:	00019b06 	br	80cfc8 <_dtoa_r+0xbe4>
  80c95c:	d9801217 	ldw	r6,72(sp)
  80c960:	d8801317 	ldw	r2,76(sp)
  80c964:	3029883a 	mov	r20,r6
  80c968:	102b883a 	mov	r21,r2
  80c96c:	d8c00217 	ldw	r3,8(sp)
  80c970:	18008516 	blt	r3,zero,80cb88 <_dtoa_r+0x7a4>
  80c974:	d9000d17 	ldw	r4,52(sp)
  80c978:	00800384 	movi	r2,14
  80c97c:	11008216 	blt	r2,r4,80cb88 <_dtoa_r+0x7a4>
  80c980:	200490fa 	slli	r2,r4,3
  80c984:	d9802617 	ldw	r6,152(sp)
  80c988:	00c020b4 	movhi	r3,130
  80c98c:	18f25404 	addi	r3,r3,-14000
  80c990:	10c5883a 	add	r2,r2,r3
  80c994:	14800017 	ldw	r18,0(r2)
  80c998:	14c00117 	ldw	r19,4(r2)
  80c99c:	30031e16 	blt	r6,zero,80d618 <_dtoa_r+0x1234>
  80c9a0:	d9000517 	ldw	r4,20(sp)
  80c9a4:	d8c00f17 	ldw	r3,60(sp)
  80c9a8:	a823883a 	mov	r17,r21
  80c9ac:	a021883a 	mov	r16,r20
  80c9b0:	192b883a 	add	r21,r3,r4
  80c9b4:	2039883a 	mov	fp,r4
  80c9b8:	00000f06 	br	80c9f8 <_dtoa_r+0x614>
  80c9bc:	0005883a 	mov	r2,zero
  80c9c0:	00d00934 	movhi	r3,16420
  80c9c4:	5009883a 	mov	r4,r10
  80c9c8:	580b883a 	mov	r5,r11
  80c9cc:	180f883a 	mov	r7,r3
  80c9d0:	100d883a 	mov	r6,r2
  80c9d4:	08082840 	call	808284 <__muldf3>
  80c9d8:	180b883a 	mov	r5,r3
  80c9dc:	000d883a 	mov	r6,zero
  80c9e0:	000f883a 	mov	r7,zero
  80c9e4:	1009883a 	mov	r4,r2
  80c9e8:	1021883a 	mov	r16,r2
  80c9ec:	1823883a 	mov	r17,r3
  80c9f0:	08089280 	call	808928 <__nedf2>
  80c9f4:	10004526 	beq	r2,zero,80cb0c <_dtoa_r+0x728>
  80c9f8:	900d883a 	mov	r6,r18
  80c9fc:	980f883a 	mov	r7,r19
  80ca00:	8009883a 	mov	r4,r16
  80ca04:	880b883a 	mov	r5,r17
  80ca08:	08086480 	call	808648 <__divdf3>
  80ca0c:	180b883a 	mov	r5,r3
  80ca10:	1009883a 	mov	r4,r2
  80ca14:	0808c400 	call	808c40 <__fixdfsi>
  80ca18:	1009883a 	mov	r4,r2
  80ca1c:	1029883a 	mov	r20,r2
  80ca20:	0808b480 	call	808b48 <__floatsidf>
  80ca24:	180f883a 	mov	r7,r3
  80ca28:	9009883a 	mov	r4,r18
  80ca2c:	980b883a 	mov	r5,r19
  80ca30:	100d883a 	mov	r6,r2
  80ca34:	08082840 	call	808284 <__muldf3>
  80ca38:	180f883a 	mov	r7,r3
  80ca3c:	880b883a 	mov	r5,r17
  80ca40:	8009883a 	mov	r4,r16
  80ca44:	100d883a 	mov	r6,r2
  80ca48:	08081900 	call	808190 <__subdf3>
  80ca4c:	1015883a 	mov	r10,r2
  80ca50:	a0800c04 	addi	r2,r20,48
  80ca54:	e0800005 	stb	r2,0(fp)
  80ca58:	e7000044 	addi	fp,fp,1
  80ca5c:	1817883a 	mov	r11,r3
  80ca60:	e57fd61e 	bne	fp,r21,80c9bc <_dtoa_r+0x5d8>
  80ca64:	500d883a 	mov	r6,r10
  80ca68:	180f883a 	mov	r7,r3
  80ca6c:	5009883a 	mov	r4,r10
  80ca70:	180b883a 	mov	r5,r3
  80ca74:	08082100 	call	808210 <__adddf3>
  80ca78:	100d883a 	mov	r6,r2
  80ca7c:	9009883a 	mov	r4,r18
  80ca80:	980b883a 	mov	r5,r19
  80ca84:	180f883a 	mov	r7,r3
  80ca88:	1021883a 	mov	r16,r2
  80ca8c:	1823883a 	mov	r17,r3
  80ca90:	0808a380 	call	808a38 <__ltdf2>
  80ca94:	10000816 	blt	r2,zero,80cab8 <_dtoa_r+0x6d4>
  80ca98:	980b883a 	mov	r5,r19
  80ca9c:	800d883a 	mov	r6,r16
  80caa0:	880f883a 	mov	r7,r17
  80caa4:	9009883a 	mov	r4,r18
  80caa8:	08088a00 	call	8088a0 <__eqdf2>
  80caac:	1000171e 	bne	r2,zero,80cb0c <_dtoa_r+0x728>
  80cab0:	a080004c 	andi	r2,r20,1
  80cab4:	10001526 	beq	r2,zero,80cb0c <_dtoa_r+0x728>
  80cab8:	d8800d17 	ldw	r2,52(sp)
  80cabc:	d8800415 	stw	r2,16(sp)
  80cac0:	e009883a 	mov	r4,fp
  80cac4:	213fffc4 	addi	r4,r4,-1
  80cac8:	20c00007 	ldb	r3,0(r4)
  80cacc:	00800e44 	movi	r2,57
  80cad0:	1880081e 	bne	r3,r2,80caf4 <_dtoa_r+0x710>
  80cad4:	d8800517 	ldw	r2,20(sp)
  80cad8:	113ffa1e 	bne	r2,r4,80cac4 <_dtoa_r+0x6e0>
  80cadc:	d8c00417 	ldw	r3,16(sp)
  80cae0:	d9800517 	ldw	r6,20(sp)
  80cae4:	00800c04 	movi	r2,48
  80cae8:	18c00044 	addi	r3,r3,1
  80caec:	d8c00415 	stw	r3,16(sp)
  80caf0:	30800005 	stb	r2,0(r6)
  80caf4:	20800003 	ldbu	r2,0(r4)
  80caf8:	d8c00417 	ldw	r3,16(sp)
  80cafc:	27000044 	addi	fp,r4,1
  80cb00:	10800044 	addi	r2,r2,1
  80cb04:	d8c00d15 	stw	r3,52(sp)
  80cb08:	20800005 	stb	r2,0(r4)
  80cb0c:	d9001617 	ldw	r4,88(sp)
  80cb10:	d9400717 	ldw	r5,28(sp)
  80cb14:	080eeac0 	call	80eeac <_Bfree>
  80cb18:	e0000005 	stb	zero,0(fp)
  80cb1c:	d9800d17 	ldw	r6,52(sp)
  80cb20:	d8c02717 	ldw	r3,156(sp)
  80cb24:	d9002917 	ldw	r4,164(sp)
  80cb28:	30800044 	addi	r2,r6,1
  80cb2c:	18800015 	stw	r2,0(r3)
  80cb30:	20029c26 	beq	r4,zero,80d5a4 <_dtoa_r+0x11c0>
  80cb34:	d8c00517 	ldw	r3,20(sp)
  80cb38:	27000015 	stw	fp,0(r4)
  80cb3c:	003e5d06 	br	80c4b4 <_dtoa_r+0xd0>
  80cb40:	d9800d17 	ldw	r6,52(sp)
  80cb44:	00c020b4 	movhi	r3,130
  80cb48:	18f25404 	addi	r3,r3,-14000
  80cb4c:	d9001217 	ldw	r4,72(sp)
  80cb50:	300490fa 	slli	r2,r6,3
  80cb54:	d9401317 	ldw	r5,76(sp)
  80cb58:	10c5883a 	add	r2,r2,r3
  80cb5c:	12000017 	ldw	r8,0(r2)
  80cb60:	12400117 	ldw	r9,4(r2)
  80cb64:	400d883a 	mov	r6,r8
  80cb68:	480f883a 	mov	r7,r9
  80cb6c:	0808a380 	call	808a38 <__ltdf2>
  80cb70:	1000030e 	bge	r2,zero,80cb80 <_dtoa_r+0x79c>
  80cb74:	d8800d17 	ldw	r2,52(sp)
  80cb78:	10bfffc4 	addi	r2,r2,-1
  80cb7c:	d8800d15 	stw	r2,52(sp)
  80cb80:	d8000c15 	stw	zero,48(sp)
  80cb84:	003ea806 	br	80c628 <_dtoa_r+0x244>
  80cb88:	d9000b17 	ldw	r4,44(sp)
  80cb8c:	202cc03a 	cmpne	r22,r4,zero
  80cb90:	b000c71e 	bne	r22,zero,80ceb0 <_dtoa_r+0xacc>
  80cb94:	dc001117 	ldw	r16,68(sp)
  80cb98:	dc801017 	ldw	r18,64(sp)
  80cb9c:	0027883a 	mov	r19,zero
  80cba0:	04000b0e 	bge	zero,r16,80cbd0 <_dtoa_r+0x7ec>
  80cba4:	d8c00a17 	ldw	r3,40(sp)
  80cba8:	00c0090e 	bge	zero,r3,80cbd0 <_dtoa_r+0x7ec>
  80cbac:	8005883a 	mov	r2,r16
  80cbb0:	1c011316 	blt	r3,r16,80d000 <_dtoa_r+0xc1c>
  80cbb4:	d9000a17 	ldw	r4,40(sp)
  80cbb8:	d9801117 	ldw	r6,68(sp)
  80cbbc:	80a1c83a 	sub	r16,r16,r2
  80cbc0:	2089c83a 	sub	r4,r4,r2
  80cbc4:	308dc83a 	sub	r6,r6,r2
  80cbc8:	d9000a15 	stw	r4,40(sp)
  80cbcc:	d9801115 	stw	r6,68(sp)
  80cbd0:	d8801017 	ldw	r2,64(sp)
  80cbd4:	0080150e 	bge	zero,r2,80cc2c <_dtoa_r+0x848>
  80cbd8:	d8c00b17 	ldw	r3,44(sp)
  80cbdc:	1805003a 	cmpeq	r2,r3,zero
  80cbe0:	1001c91e 	bne	r2,zero,80d308 <_dtoa_r+0xf24>
  80cbe4:	04800e0e 	bge	zero,r18,80cc20 <_dtoa_r+0x83c>
  80cbe8:	d9001617 	ldw	r4,88(sp)
  80cbec:	980b883a 	mov	r5,r19
  80cbf0:	900d883a 	mov	r6,r18
  80cbf4:	080fc600 	call	80fc60 <__pow5mult>
  80cbf8:	d9001617 	ldw	r4,88(sp)
  80cbfc:	d9800717 	ldw	r6,28(sp)
  80cc00:	100b883a 	mov	r5,r2
  80cc04:	1027883a 	mov	r19,r2
  80cc08:	080f93c0 	call	80f93c <__multiply>
  80cc0c:	d9001617 	ldw	r4,88(sp)
  80cc10:	d9400717 	ldw	r5,28(sp)
  80cc14:	1023883a 	mov	r17,r2
  80cc18:	080eeac0 	call	80eeac <_Bfree>
  80cc1c:	dc400715 	stw	r17,28(sp)
  80cc20:	d9001017 	ldw	r4,64(sp)
  80cc24:	248dc83a 	sub	r6,r4,r18
  80cc28:	30010e1e 	bne	r6,zero,80d064 <_dtoa_r+0xc80>
  80cc2c:	d9001617 	ldw	r4,88(sp)
  80cc30:	04400044 	movi	r17,1
  80cc34:	880b883a 	mov	r5,r17
  80cc38:	080fb240 	call	80fb24 <__i2b>
  80cc3c:	d9800917 	ldw	r6,36(sp)
  80cc40:	1025883a 	mov	r18,r2
  80cc44:	0180040e 	bge	zero,r6,80cc58 <_dtoa_r+0x874>
  80cc48:	d9001617 	ldw	r4,88(sp)
  80cc4c:	100b883a 	mov	r5,r2
  80cc50:	080fc600 	call	80fc60 <__pow5mult>
  80cc54:	1025883a 	mov	r18,r2
  80cc58:	d8801717 	ldw	r2,92(sp)
  80cc5c:	8880f30e 	bge	r17,r2,80d02c <_dtoa_r+0xc48>
  80cc60:	0023883a 	mov	r17,zero
  80cc64:	d9800917 	ldw	r6,36(sp)
  80cc68:	30019e1e 	bne	r6,zero,80d2e4 <_dtoa_r+0xf00>
  80cc6c:	00c00044 	movi	r3,1
  80cc70:	d9000a17 	ldw	r4,40(sp)
  80cc74:	20c5883a 	add	r2,r4,r3
  80cc78:	10c007cc 	andi	r3,r2,31
  80cc7c:	1800841e 	bne	r3,zero,80ce90 <_dtoa_r+0xaac>
  80cc80:	00800704 	movi	r2,28
  80cc84:	d9000a17 	ldw	r4,40(sp)
  80cc88:	d9801117 	ldw	r6,68(sp)
  80cc8c:	80a1883a 	add	r16,r16,r2
  80cc90:	2089883a 	add	r4,r4,r2
  80cc94:	308d883a 	add	r6,r6,r2
  80cc98:	d9000a15 	stw	r4,40(sp)
  80cc9c:	d9801115 	stw	r6,68(sp)
  80cca0:	d8801117 	ldw	r2,68(sp)
  80cca4:	0080050e 	bge	zero,r2,80ccbc <_dtoa_r+0x8d8>
  80cca8:	d9400717 	ldw	r5,28(sp)
  80ccac:	d9001617 	ldw	r4,88(sp)
  80ccb0:	100d883a 	mov	r6,r2
  80ccb4:	080f7f00 	call	80f7f0 <__lshift>
  80ccb8:	d8800715 	stw	r2,28(sp)
  80ccbc:	d8c00a17 	ldw	r3,40(sp)
  80ccc0:	00c0050e 	bge	zero,r3,80ccd8 <_dtoa_r+0x8f4>
  80ccc4:	d9001617 	ldw	r4,88(sp)
  80ccc8:	900b883a 	mov	r5,r18
  80cccc:	180d883a 	mov	r6,r3
  80ccd0:	080f7f00 	call	80f7f0 <__lshift>
  80ccd4:	1025883a 	mov	r18,r2
  80ccd8:	d9000c17 	ldw	r4,48(sp)
  80ccdc:	2005003a 	cmpeq	r2,r4,zero
  80cce0:	10016f26 	beq	r2,zero,80d2a0 <_dtoa_r+0xebc>
  80cce4:	d9000f17 	ldw	r4,60(sp)
  80cce8:	0102170e 	bge	zero,r4,80d548 <_dtoa_r+0x1164>
  80ccec:	d9800b17 	ldw	r6,44(sp)
  80ccf0:	3005003a 	cmpeq	r2,r6,zero
  80ccf4:	1000881e 	bne	r2,zero,80cf18 <_dtoa_r+0xb34>
  80ccf8:	0400050e 	bge	zero,r16,80cd10 <_dtoa_r+0x92c>
  80ccfc:	d9001617 	ldw	r4,88(sp)
  80cd00:	980b883a 	mov	r5,r19
  80cd04:	800d883a 	mov	r6,r16
  80cd08:	080f7f00 	call	80f7f0 <__lshift>
  80cd0c:	1027883a 	mov	r19,r2
  80cd10:	8804c03a 	cmpne	r2,r17,zero
  80cd14:	1002541e 	bne	r2,zero,80d668 <_dtoa_r+0x1284>
  80cd18:	980b883a 	mov	r5,r19
  80cd1c:	dd800517 	ldw	r22,20(sp)
  80cd20:	dcc00615 	stw	r19,24(sp)
  80cd24:	a700004c 	andi	fp,r20,1
  80cd28:	2827883a 	mov	r19,r5
  80cd2c:	d9000717 	ldw	r4,28(sp)
  80cd30:	900b883a 	mov	r5,r18
  80cd34:	080c1cc0 	call	80c1cc <quorem>
  80cd38:	d9000717 	ldw	r4,28(sp)
  80cd3c:	d9400617 	ldw	r5,24(sp)
  80cd40:	1023883a 	mov	r17,r2
  80cd44:	8dc00c04 	addi	r23,r17,48
  80cd48:	080f0080 	call	80f008 <__mcmp>
  80cd4c:	d9001617 	ldw	r4,88(sp)
  80cd50:	900b883a 	mov	r5,r18
  80cd54:	980d883a 	mov	r6,r19
  80cd58:	1029883a 	mov	r20,r2
  80cd5c:	080f6640 	call	80f664 <__mdiff>
  80cd60:	102b883a 	mov	r21,r2
  80cd64:	10800317 	ldw	r2,12(r2)
  80cd68:	1001281e 	bne	r2,zero,80d20c <_dtoa_r+0xe28>
  80cd6c:	d9000717 	ldw	r4,28(sp)
  80cd70:	a80b883a 	mov	r5,r21
  80cd74:	080f0080 	call	80f008 <__mcmp>
  80cd78:	d9001617 	ldw	r4,88(sp)
  80cd7c:	1021883a 	mov	r16,r2
  80cd80:	a80b883a 	mov	r5,r21
  80cd84:	080eeac0 	call	80eeac <_Bfree>
  80cd88:	8000041e 	bne	r16,zero,80cd9c <_dtoa_r+0x9b8>
  80cd8c:	d8801717 	ldw	r2,92(sp)
  80cd90:	1000021e 	bne	r2,zero,80cd9c <_dtoa_r+0x9b8>
  80cd94:	e004c03a 	cmpne	r2,fp,zero
  80cd98:	10011726 	beq	r2,zero,80d1f8 <_dtoa_r+0xe14>
  80cd9c:	a0010616 	blt	r20,zero,80d1b8 <_dtoa_r+0xdd4>
  80cda0:	a000041e 	bne	r20,zero,80cdb4 <_dtoa_r+0x9d0>
  80cda4:	d8c01717 	ldw	r3,92(sp)
  80cda8:	1800021e 	bne	r3,zero,80cdb4 <_dtoa_r+0x9d0>
  80cdac:	e004c03a 	cmpne	r2,fp,zero
  80cdb0:	10010126 	beq	r2,zero,80d1b8 <_dtoa_r+0xdd4>
  80cdb4:	04023d16 	blt	zero,r16,80d6ac <_dtoa_r+0x12c8>
  80cdb8:	b5c00005 	stb	r23,0(r22)
  80cdbc:	d9800517 	ldw	r6,20(sp)
  80cdc0:	d9000f17 	ldw	r4,60(sp)
  80cdc4:	b5800044 	addi	r22,r22,1
  80cdc8:	3105883a 	add	r2,r6,r4
  80cdcc:	b0806526 	beq	r22,r2,80cf64 <_dtoa_r+0xb80>
  80cdd0:	d9400717 	ldw	r5,28(sp)
  80cdd4:	d9001617 	ldw	r4,88(sp)
  80cdd8:	01800284 	movi	r6,10
  80cddc:	000f883a 	mov	r7,zero
  80cde0:	080fb600 	call	80fb60 <__multadd>
  80cde4:	d8800715 	stw	r2,28(sp)
  80cde8:	d8800617 	ldw	r2,24(sp)
  80cdec:	14c10c26 	beq	r2,r19,80d220 <_dtoa_r+0xe3c>
  80cdf0:	d9400617 	ldw	r5,24(sp)
  80cdf4:	d9001617 	ldw	r4,88(sp)
  80cdf8:	01800284 	movi	r6,10
  80cdfc:	000f883a 	mov	r7,zero
  80ce00:	080fb600 	call	80fb60 <__multadd>
  80ce04:	d9001617 	ldw	r4,88(sp)
  80ce08:	980b883a 	mov	r5,r19
  80ce0c:	01800284 	movi	r6,10
  80ce10:	000f883a 	mov	r7,zero
  80ce14:	d8800615 	stw	r2,24(sp)
  80ce18:	080fb600 	call	80fb60 <__multadd>
  80ce1c:	1027883a 	mov	r19,r2
  80ce20:	003fc206 	br	80cd2c <_dtoa_r+0x948>
  80ce24:	2445c83a 	sub	r2,r4,r17
  80ce28:	a088983a 	sll	r4,r20,r2
  80ce2c:	003e4b06 	br	80c75c <_dtoa_r+0x378>
  80ce30:	01bfffc4 	movi	r6,-1
  80ce34:	00800044 	movi	r2,1
  80ce38:	d9800e15 	stw	r6,56(sp)
  80ce3c:	d9800f15 	stw	r6,60(sp)
  80ce40:	d8800b15 	stw	r2,44(sp)
  80ce44:	d8c01617 	ldw	r3,88(sp)
  80ce48:	008005c4 	movi	r2,23
  80ce4c:	18001115 	stw	zero,68(r3)
  80ce50:	1580082e 	bgeu	r2,r22,80ce74 <_dtoa_r+0xa90>
  80ce54:	00c00104 	movi	r3,4
  80ce58:	0009883a 	mov	r4,zero
  80ce5c:	18c7883a 	add	r3,r3,r3
  80ce60:	18800504 	addi	r2,r3,20
  80ce64:	21000044 	addi	r4,r4,1
  80ce68:	b0bffc2e 	bgeu	r22,r2,80ce5c <_dtoa_r+0xa78>
  80ce6c:	d9801617 	ldw	r6,88(sp)
  80ce70:	31001115 	stw	r4,68(r6)
  80ce74:	dc000f17 	ldw	r16,60(sp)
  80ce78:	003e4b06 	br	80c7a8 <_dtoa_r+0x3c4>
  80ce7c:	d9801717 	ldw	r6,92(sp)
  80ce80:	0023883a 	mov	r17,zero
  80ce84:	31bfff04 	addi	r6,r6,-4
  80ce88:	d9801715 	stw	r6,92(sp)
  80ce8c:	003df806 	br	80c670 <_dtoa_r+0x28c>
  80ce90:	00800804 	movi	r2,32
  80ce94:	10c9c83a 	sub	r4,r2,r3
  80ce98:	00c00104 	movi	r3,4
  80ce9c:	19005a16 	blt	r3,r4,80d008 <_dtoa_r+0xc24>
  80cea0:	008000c4 	movi	r2,3
  80cea4:	113f7e16 	blt	r2,r4,80cca0 <_dtoa_r+0x8bc>
  80cea8:	20800704 	addi	r2,r4,28
  80ceac:	003f7506 	br	80cc84 <_dtoa_r+0x8a0>
  80ceb0:	d9801717 	ldw	r6,92(sp)
  80ceb4:	00800044 	movi	r2,1
  80ceb8:	1180a10e 	bge	r2,r6,80d140 <_dtoa_r+0xd5c>
  80cebc:	d9800f17 	ldw	r6,60(sp)
  80cec0:	d8c01017 	ldw	r3,64(sp)
  80cec4:	30bfffc4 	addi	r2,r6,-1
  80cec8:	1881c616 	blt	r3,r2,80d5e4 <_dtoa_r+0x1200>
  80cecc:	18a5c83a 	sub	r18,r3,r2
  80ced0:	d8800f17 	ldw	r2,60(sp)
  80ced4:	10026216 	blt	r2,zero,80d860 <_dtoa_r+0x147c>
  80ced8:	dc001117 	ldw	r16,68(sp)
  80cedc:	1007883a 	mov	r3,r2
  80cee0:	d9800a17 	ldw	r6,40(sp)
  80cee4:	d8801117 	ldw	r2,68(sp)
  80cee8:	d9001617 	ldw	r4,88(sp)
  80ceec:	30cd883a 	add	r6,r6,r3
  80cef0:	10c5883a 	add	r2,r2,r3
  80cef4:	01400044 	movi	r5,1
  80cef8:	d9800a15 	stw	r6,40(sp)
  80cefc:	d8801115 	stw	r2,68(sp)
  80cf00:	080fb240 	call	80fb24 <__i2b>
  80cf04:	1027883a 	mov	r19,r2
  80cf08:	003f2506 	br	80cba0 <_dtoa_r+0x7bc>
  80cf0c:	00c020b4 	movhi	r3,130
  80cf10:	18f23704 	addi	r3,r3,-14116
  80cf14:	003d6706 	br	80c4b4 <_dtoa_r+0xd0>
  80cf18:	dd800517 	ldw	r22,20(sp)
  80cf1c:	04000044 	movi	r16,1
  80cf20:	00000706 	br	80cf40 <_dtoa_r+0xb5c>
  80cf24:	d9400717 	ldw	r5,28(sp)
  80cf28:	d9001617 	ldw	r4,88(sp)
  80cf2c:	01800284 	movi	r6,10
  80cf30:	000f883a 	mov	r7,zero
  80cf34:	080fb600 	call	80fb60 <__multadd>
  80cf38:	d8800715 	stw	r2,28(sp)
  80cf3c:	84000044 	addi	r16,r16,1
  80cf40:	d9000717 	ldw	r4,28(sp)
  80cf44:	900b883a 	mov	r5,r18
  80cf48:	080c1cc0 	call	80c1cc <quorem>
  80cf4c:	15c00c04 	addi	r23,r2,48
  80cf50:	b5c00005 	stb	r23,0(r22)
  80cf54:	d8c00f17 	ldw	r3,60(sp)
  80cf58:	b5800044 	addi	r22,r22,1
  80cf5c:	80fff116 	blt	r16,r3,80cf24 <_dtoa_r+0xb40>
  80cf60:	d8000615 	stw	zero,24(sp)
  80cf64:	d9400717 	ldw	r5,28(sp)
  80cf68:	d9001617 	ldw	r4,88(sp)
  80cf6c:	01800044 	movi	r6,1
  80cf70:	080f7f00 	call	80f7f0 <__lshift>
  80cf74:	1009883a 	mov	r4,r2
  80cf78:	900b883a 	mov	r5,r18
  80cf7c:	d8800715 	stw	r2,28(sp)
  80cf80:	080f0080 	call	80f008 <__mcmp>
  80cf84:	00803c0e 	bge	zero,r2,80d078 <_dtoa_r+0xc94>
  80cf88:	b009883a 	mov	r4,r22
  80cf8c:	213fffc4 	addi	r4,r4,-1
  80cf90:	21400003 	ldbu	r5,0(r4)
  80cf94:	00800e44 	movi	r2,57
  80cf98:	28c03fcc 	andi	r3,r5,255
  80cf9c:	18c0201c 	xori	r3,r3,128
  80cfa0:	18ffe004 	addi	r3,r3,-128
  80cfa4:	1881981e 	bne	r3,r2,80d608 <_dtoa_r+0x1224>
  80cfa8:	d9800517 	ldw	r6,20(sp)
  80cfac:	21bff71e 	bne	r4,r6,80cf8c <_dtoa_r+0xba8>
  80cfb0:	d8800d17 	ldw	r2,52(sp)
  80cfb4:	37000044 	addi	fp,r6,1
  80cfb8:	10800044 	addi	r2,r2,1
  80cfbc:	d8800d15 	stw	r2,52(sp)
  80cfc0:	00800c44 	movi	r2,49
  80cfc4:	30800005 	stb	r2,0(r6)
  80cfc8:	d9001617 	ldw	r4,88(sp)
  80cfcc:	900b883a 	mov	r5,r18
  80cfd0:	080eeac0 	call	80eeac <_Bfree>
  80cfd4:	983ecd26 	beq	r19,zero,80cb0c <_dtoa_r+0x728>
  80cfd8:	d8c00617 	ldw	r3,24(sp)
  80cfdc:	18000426 	beq	r3,zero,80cff0 <_dtoa_r+0xc0c>
  80cfe0:	1cc00326 	beq	r3,r19,80cff0 <_dtoa_r+0xc0c>
  80cfe4:	d9001617 	ldw	r4,88(sp)
  80cfe8:	180b883a 	mov	r5,r3
  80cfec:	080eeac0 	call	80eeac <_Bfree>
  80cff0:	d9001617 	ldw	r4,88(sp)
  80cff4:	980b883a 	mov	r5,r19
  80cff8:	080eeac0 	call	80eeac <_Bfree>
  80cffc:	003ec306 	br	80cb0c <_dtoa_r+0x728>
  80d000:	1805883a 	mov	r2,r3
  80d004:	003eeb06 	br	80cbb4 <_dtoa_r+0x7d0>
  80d008:	d9800a17 	ldw	r6,40(sp)
  80d00c:	d8c01117 	ldw	r3,68(sp)
  80d010:	20bfff04 	addi	r2,r4,-4
  80d014:	308d883a 	add	r6,r6,r2
  80d018:	1887883a 	add	r3,r3,r2
  80d01c:	80a1883a 	add	r16,r16,r2
  80d020:	d9800a15 	stw	r6,40(sp)
  80d024:	d8c01115 	stw	r3,68(sp)
  80d028:	003f1d06 	br	80cca0 <_dtoa_r+0x8bc>
  80d02c:	a03f0c1e 	bne	r20,zero,80cc60 <_dtoa_r+0x87c>
  80d030:	00800434 	movhi	r2,16
  80d034:	10bfffc4 	addi	r2,r2,-1
  80d038:	a884703a 	and	r2,r21,r2
  80d03c:	103f081e 	bne	r2,zero,80cc60 <_dtoa_r+0x87c>
  80d040:	a89ffc2c 	andhi	r2,r21,32752
  80d044:	103f0626 	beq	r2,zero,80cc60 <_dtoa_r+0x87c>
  80d048:	d8c01117 	ldw	r3,68(sp)
  80d04c:	d9000a17 	ldw	r4,40(sp)
  80d050:	18c00044 	addi	r3,r3,1
  80d054:	21000044 	addi	r4,r4,1
  80d058:	d8c01115 	stw	r3,68(sp)
  80d05c:	d9000a15 	stw	r4,40(sp)
  80d060:	003f0006 	br	80cc64 <_dtoa_r+0x880>
  80d064:	d9400717 	ldw	r5,28(sp)
  80d068:	d9001617 	ldw	r4,88(sp)
  80d06c:	080fc600 	call	80fc60 <__pow5mult>
  80d070:	d8800715 	stw	r2,28(sp)
  80d074:	003eed06 	br	80cc2c <_dtoa_r+0x848>
  80d078:	1000021e 	bne	r2,zero,80d084 <_dtoa_r+0xca0>
  80d07c:	b880004c 	andi	r2,r23,1
  80d080:	103fc11e 	bne	r2,zero,80cf88 <_dtoa_r+0xba4>
  80d084:	b5bfffc4 	addi	r22,r22,-1
  80d088:	b0c00007 	ldb	r3,0(r22)
  80d08c:	00800c04 	movi	r2,48
  80d090:	18bffc26 	beq	r3,r2,80d084 <_dtoa_r+0xca0>
  80d094:	b7000044 	addi	fp,r22,1
  80d098:	003fcb06 	br	80cfc8 <_dtoa_r+0xbe4>
  80d09c:	d9800d17 	ldw	r6,52(sp)
  80d0a0:	018fc83a 	sub	r7,zero,r6
  80d0a4:	3801f726 	beq	r7,zero,80d884 <_dtoa_r+0x14a0>
  80d0a8:	398003cc 	andi	r6,r7,15
  80d0ac:	300c90fa 	slli	r6,r6,3
  80d0b0:	014020b4 	movhi	r5,130
  80d0b4:	29725404 	addi	r5,r5,-14000
  80d0b8:	d9001217 	ldw	r4,72(sp)
  80d0bc:	314d883a 	add	r6,r6,r5
  80d0c0:	30c00117 	ldw	r3,4(r6)
  80d0c4:	30800017 	ldw	r2,0(r6)
  80d0c8:	d9401317 	ldw	r5,76(sp)
  80d0cc:	3821d13a 	srai	r16,r7,4
  80d0d0:	100d883a 	mov	r6,r2
  80d0d4:	180f883a 	mov	r7,r3
  80d0d8:	08082840 	call	808284 <__muldf3>
  80d0dc:	1011883a 	mov	r8,r2
  80d0e0:	1813883a 	mov	r9,r3
  80d0e4:	1029883a 	mov	r20,r2
  80d0e8:	182b883a 	mov	r21,r3
  80d0ec:	8001e526 	beq	r16,zero,80d884 <_dtoa_r+0x14a0>
  80d0f0:	05800084 	movi	r22,2
  80d0f4:	044020b4 	movhi	r17,130
  80d0f8:	8c728604 	addi	r17,r17,-13800
  80d0fc:	8080004c 	andi	r2,r16,1
  80d100:	1005003a 	cmpeq	r2,r2,zero
  80d104:	1000081e 	bne	r2,zero,80d128 <_dtoa_r+0xd44>
  80d108:	89800017 	ldw	r6,0(r17)
  80d10c:	89c00117 	ldw	r7,4(r17)
  80d110:	480b883a 	mov	r5,r9
  80d114:	4009883a 	mov	r4,r8
  80d118:	08082840 	call	808284 <__muldf3>
  80d11c:	1011883a 	mov	r8,r2
  80d120:	b5800044 	addi	r22,r22,1
  80d124:	1813883a 	mov	r9,r3
  80d128:	8021d07a 	srai	r16,r16,1
  80d12c:	8c400204 	addi	r17,r17,8
  80d130:	803ff21e 	bne	r16,zero,80d0fc <_dtoa_r+0xd18>
  80d134:	4029883a 	mov	r20,r8
  80d138:	482b883a 	mov	r21,r9
  80d13c:	003dca06 	br	80c868 <_dtoa_r+0x484>
  80d140:	d9000817 	ldw	r4,32(sp)
  80d144:	2005003a 	cmpeq	r2,r4,zero
  80d148:	1001f61e 	bne	r2,zero,80d924 <_dtoa_r+0x1540>
  80d14c:	dc001117 	ldw	r16,68(sp)
  80d150:	dc801017 	ldw	r18,64(sp)
  80d154:	18c10cc4 	addi	r3,r3,1075
  80d158:	003f6106 	br	80cee0 <_dtoa_r+0xafc>
  80d15c:	d8000b15 	stw	zero,44(sp)
  80d160:	d9802617 	ldw	r6,152(sp)
  80d164:	d8c00d17 	ldw	r3,52(sp)
  80d168:	30800044 	addi	r2,r6,1
  80d16c:	18ad883a 	add	r22,r3,r2
  80d170:	b13fffc4 	addi	r4,r22,-1
  80d174:	d9000e15 	stw	r4,56(sp)
  80d178:	0581f60e 	bge	zero,r22,80d954 <_dtoa_r+0x1570>
  80d17c:	dd800f15 	stw	r22,60(sp)
  80d180:	003f3006 	br	80ce44 <_dtoa_r+0xa60>
  80d184:	d8000b15 	stw	zero,44(sp)
  80d188:	d9002617 	ldw	r4,152(sp)
  80d18c:	0101eb0e 	bge	zero,r4,80d93c <_dtoa_r+0x1558>
  80d190:	202d883a 	mov	r22,r4
  80d194:	d9000e15 	stw	r4,56(sp)
  80d198:	d9000f15 	stw	r4,60(sp)
  80d19c:	003f2906 	br	80ce44 <_dtoa_r+0xa60>
  80d1a0:	01800044 	movi	r6,1
  80d1a4:	d9800b15 	stw	r6,44(sp)
  80d1a8:	003ff706 	br	80d188 <_dtoa_r+0xda4>
  80d1ac:	01000044 	movi	r4,1
  80d1b0:	d9000b15 	stw	r4,44(sp)
  80d1b4:	003fea06 	br	80d160 <_dtoa_r+0xd7c>
  80d1b8:	04000c0e 	bge	zero,r16,80d1ec <_dtoa_r+0xe08>
  80d1bc:	d9400717 	ldw	r5,28(sp)
  80d1c0:	d9001617 	ldw	r4,88(sp)
  80d1c4:	01800044 	movi	r6,1
  80d1c8:	080f7f00 	call	80f7f0 <__lshift>
  80d1cc:	1009883a 	mov	r4,r2
  80d1d0:	900b883a 	mov	r5,r18
  80d1d4:	d8800715 	stw	r2,28(sp)
  80d1d8:	080f0080 	call	80f008 <__mcmp>
  80d1dc:	0081e00e 	bge	zero,r2,80d960 <_dtoa_r+0x157c>
  80d1e0:	bdc00044 	addi	r23,r23,1
  80d1e4:	00800e84 	movi	r2,58
  80d1e8:	b881a226 	beq	r23,r2,80d874 <_dtoa_r+0x1490>
  80d1ec:	b7000044 	addi	fp,r22,1
  80d1f0:	b5c00005 	stb	r23,0(r22)
  80d1f4:	003f7406 	br	80cfc8 <_dtoa_r+0xbe4>
  80d1f8:	00800e44 	movi	r2,57
  80d1fc:	b8819d26 	beq	r23,r2,80d874 <_dtoa_r+0x1490>
  80d200:	053ffa0e 	bge	zero,r20,80d1ec <_dtoa_r+0xe08>
  80d204:	8dc00c44 	addi	r23,r17,49
  80d208:	003ff806 	br	80d1ec <_dtoa_r+0xe08>
  80d20c:	d9001617 	ldw	r4,88(sp)
  80d210:	a80b883a 	mov	r5,r21
  80d214:	04000044 	movi	r16,1
  80d218:	080eeac0 	call	80eeac <_Bfree>
  80d21c:	003edf06 	br	80cd9c <_dtoa_r+0x9b8>
  80d220:	d9001617 	ldw	r4,88(sp)
  80d224:	980b883a 	mov	r5,r19
  80d228:	01800284 	movi	r6,10
  80d22c:	000f883a 	mov	r7,zero
  80d230:	080fb600 	call	80fb60 <__multadd>
  80d234:	1027883a 	mov	r19,r2
  80d238:	d8800615 	stw	r2,24(sp)
  80d23c:	003ebb06 	br	80cd2c <_dtoa_r+0x948>
  80d240:	d9801117 	ldw	r6,68(sp)
  80d244:	d8800d17 	ldw	r2,52(sp)
  80d248:	d8000915 	stw	zero,36(sp)
  80d24c:	308dc83a 	sub	r6,r6,r2
  80d250:	0087c83a 	sub	r3,zero,r2
  80d254:	d9801115 	stw	r6,68(sp)
  80d258:	d8c01015 	stw	r3,64(sp)
  80d25c:	003cfe06 	br	80c658 <_dtoa_r+0x274>
  80d260:	018dc83a 	sub	r6,zero,r6
  80d264:	d9801115 	stw	r6,68(sp)
  80d268:	d8000a15 	stw	zero,40(sp)
  80d26c:	003cf306 	br	80c63c <_dtoa_r+0x258>
  80d270:	d9000d17 	ldw	r4,52(sp)
  80d274:	0808b480 	call	808b48 <__floatsidf>
  80d278:	880b883a 	mov	r5,r17
  80d27c:	8009883a 	mov	r4,r16
  80d280:	180f883a 	mov	r7,r3
  80d284:	100d883a 	mov	r6,r2
  80d288:	08089280 	call	808928 <__nedf2>
  80d28c:	103ce126 	beq	r2,zero,80c614 <_dtoa_r+0x230>
  80d290:	d9800d17 	ldw	r6,52(sp)
  80d294:	31bfffc4 	addi	r6,r6,-1
  80d298:	d9800d15 	stw	r6,52(sp)
  80d29c:	003cdd06 	br	80c614 <_dtoa_r+0x230>
  80d2a0:	d9000717 	ldw	r4,28(sp)
  80d2a4:	900b883a 	mov	r5,r18
  80d2a8:	080f0080 	call	80f008 <__mcmp>
  80d2ac:	103e8d0e 	bge	r2,zero,80cce4 <_dtoa_r+0x900>
  80d2b0:	d9400717 	ldw	r5,28(sp)
  80d2b4:	d9001617 	ldw	r4,88(sp)
  80d2b8:	01800284 	movi	r6,10
  80d2bc:	000f883a 	mov	r7,zero
  80d2c0:	080fb600 	call	80fb60 <__multadd>
  80d2c4:	d9800d17 	ldw	r6,52(sp)
  80d2c8:	d8800715 	stw	r2,28(sp)
  80d2cc:	31bfffc4 	addi	r6,r6,-1
  80d2d0:	d9800d15 	stw	r6,52(sp)
  80d2d4:	b001a71e 	bne	r22,zero,80d974 <_dtoa_r+0x1590>
  80d2d8:	d8800e17 	ldw	r2,56(sp)
  80d2dc:	d8800f15 	stw	r2,60(sp)
  80d2e0:	003e8006 	br	80cce4 <_dtoa_r+0x900>
  80d2e4:	90800417 	ldw	r2,16(r18)
  80d2e8:	1085883a 	add	r2,r2,r2
  80d2ec:	1085883a 	add	r2,r2,r2
  80d2f0:	1485883a 	add	r2,r2,r18
  80d2f4:	11000417 	ldw	r4,16(r2)
  80d2f8:	080eed40 	call	80eed4 <__hi0bits>
  80d2fc:	00c00804 	movi	r3,32
  80d300:	1887c83a 	sub	r3,r3,r2
  80d304:	003e5a06 	br	80cc70 <_dtoa_r+0x88c>
  80d308:	d9400717 	ldw	r5,28(sp)
  80d30c:	d9801017 	ldw	r6,64(sp)
  80d310:	d9001617 	ldw	r4,88(sp)
  80d314:	080fc600 	call	80fc60 <__pow5mult>
  80d318:	d8800715 	stw	r2,28(sp)
  80d31c:	003e4306 	br	80cc2c <_dtoa_r+0x848>
  80d320:	d9800f17 	ldw	r6,60(sp)
  80d324:	d8800d17 	ldw	r2,52(sp)
  80d328:	d9800315 	stw	r6,12(sp)
  80d32c:	d8800415 	stw	r2,16(sp)
  80d330:	d8c00b17 	ldw	r3,44(sp)
  80d334:	1805003a 	cmpeq	r2,r3,zero
  80d338:	1000e21e 	bne	r2,zero,80d6c4 <_dtoa_r+0x12e0>
  80d33c:	d9000317 	ldw	r4,12(sp)
  80d340:	0005883a 	mov	r2,zero
  80d344:	00cff834 	movhi	r3,16352
  80d348:	200c90fa 	slli	r6,r4,3
  80d34c:	010020b4 	movhi	r4,130
  80d350:	21325404 	addi	r4,r4,-14000
  80d354:	180b883a 	mov	r5,r3
  80d358:	310d883a 	add	r6,r6,r4
  80d35c:	327fff17 	ldw	r9,-4(r6)
  80d360:	323ffe17 	ldw	r8,-8(r6)
  80d364:	1009883a 	mov	r4,r2
  80d368:	480f883a 	mov	r7,r9
  80d36c:	400d883a 	mov	r6,r8
  80d370:	08086480 	call	808648 <__divdf3>
  80d374:	180b883a 	mov	r5,r3
  80d378:	b00d883a 	mov	r6,r22
  80d37c:	b80f883a 	mov	r7,r23
  80d380:	1009883a 	mov	r4,r2
  80d384:	08081900 	call	808190 <__subdf3>
  80d388:	a80b883a 	mov	r5,r21
  80d38c:	a009883a 	mov	r4,r20
  80d390:	d8c01915 	stw	r3,100(sp)
  80d394:	d8801815 	stw	r2,96(sp)
  80d398:	0808c400 	call	808c40 <__fixdfsi>
  80d39c:	1009883a 	mov	r4,r2
  80d3a0:	1027883a 	mov	r19,r2
  80d3a4:	0808b480 	call	808b48 <__floatsidf>
  80d3a8:	a80b883a 	mov	r5,r21
  80d3ac:	a009883a 	mov	r4,r20
  80d3b0:	180f883a 	mov	r7,r3
  80d3b4:	100d883a 	mov	r6,r2
  80d3b8:	08081900 	call	808190 <__subdf3>
  80d3bc:	d9801817 	ldw	r6,96(sp)
  80d3c0:	1823883a 	mov	r17,r3
  80d3c4:	d8801415 	stw	r2,80(sp)
  80d3c8:	302d883a 	mov	r22,r6
  80d3cc:	d9800517 	ldw	r6,20(sp)
  80d3d0:	9cc00c04 	addi	r19,r19,48
  80d3d4:	dc401515 	stw	r17,84(sp)
  80d3d8:	d8c01917 	ldw	r3,100(sp)
  80d3dc:	34c00005 	stb	r19,0(r6)
  80d3e0:	d8800517 	ldw	r2,20(sp)
  80d3e4:	d9401917 	ldw	r5,100(sp)
  80d3e8:	d9801417 	ldw	r6,80(sp)
  80d3ec:	b009883a 	mov	r4,r22
  80d3f0:	880f883a 	mov	r7,r17
  80d3f4:	182f883a 	mov	r23,r3
  80d3f8:	17000044 	addi	fp,r2,1
  80d3fc:	08089b00 	call	8089b0 <__gtdf2>
  80d400:	00804e16 	blt	zero,r2,80d53c <_dtoa_r+0x1158>
  80d404:	d9801417 	ldw	r6,80(sp)
  80d408:	0005883a 	mov	r2,zero
  80d40c:	00cffc34 	movhi	r3,16368
  80d410:	180b883a 	mov	r5,r3
  80d414:	880f883a 	mov	r7,r17
  80d418:	1009883a 	mov	r4,r2
  80d41c:	08081900 	call	808190 <__subdf3>
  80d420:	d9401917 	ldw	r5,100(sp)
  80d424:	180f883a 	mov	r7,r3
  80d428:	b009883a 	mov	r4,r22
  80d42c:	100d883a 	mov	r6,r2
  80d430:	08089b00 	call	8089b0 <__gtdf2>
  80d434:	00bda216 	blt	zero,r2,80cac0 <_dtoa_r+0x6dc>
  80d438:	d8c00317 	ldw	r3,12(sp)
  80d43c:	00800044 	movi	r2,1
  80d440:	10c01216 	blt	r2,r3,80d48c <_dtoa_r+0x10a8>
  80d444:	003d4506 	br	80c95c <_dtoa_r+0x578>
  80d448:	d9801417 	ldw	r6,80(sp)
  80d44c:	0005883a 	mov	r2,zero
  80d450:	00cffc34 	movhi	r3,16368
  80d454:	180b883a 	mov	r5,r3
  80d458:	880f883a 	mov	r7,r17
  80d45c:	1009883a 	mov	r4,r2
  80d460:	08081900 	call	808190 <__subdf3>
  80d464:	d9c01b17 	ldw	r7,108(sp)
  80d468:	180b883a 	mov	r5,r3
  80d46c:	1009883a 	mov	r4,r2
  80d470:	b00d883a 	mov	r6,r22
  80d474:	0808a380 	call	808a38 <__ltdf2>
  80d478:	103d9116 	blt	r2,zero,80cac0 <_dtoa_r+0x6dc>
  80d47c:	d9800517 	ldw	r6,20(sp)
  80d480:	d9000317 	ldw	r4,12(sp)
  80d484:	3105883a 	add	r2,r6,r4
  80d488:	e0bd3426 	beq	fp,r2,80c95c <_dtoa_r+0x578>
  80d48c:	04500934 	movhi	r17,16420
  80d490:	0021883a 	mov	r16,zero
  80d494:	b80b883a 	mov	r5,r23
  80d498:	b009883a 	mov	r4,r22
  80d49c:	800d883a 	mov	r6,r16
  80d4a0:	880f883a 	mov	r7,r17
  80d4a4:	08082840 	call	808284 <__muldf3>
  80d4a8:	d9401517 	ldw	r5,84(sp)
  80d4ac:	d9001417 	ldw	r4,80(sp)
  80d4b0:	880f883a 	mov	r7,r17
  80d4b4:	000d883a 	mov	r6,zero
  80d4b8:	d8801a15 	stw	r2,104(sp)
  80d4bc:	d8c01b15 	stw	r3,108(sp)
  80d4c0:	08082840 	call	808284 <__muldf3>
  80d4c4:	180b883a 	mov	r5,r3
  80d4c8:	1009883a 	mov	r4,r2
  80d4cc:	1823883a 	mov	r17,r3
  80d4d0:	1021883a 	mov	r16,r2
  80d4d4:	0808c400 	call	808c40 <__fixdfsi>
  80d4d8:	1009883a 	mov	r4,r2
  80d4dc:	102b883a 	mov	r21,r2
  80d4e0:	0808b480 	call	808b48 <__floatsidf>
  80d4e4:	880b883a 	mov	r5,r17
  80d4e8:	8009883a 	mov	r4,r16
  80d4ec:	180f883a 	mov	r7,r3
  80d4f0:	100d883a 	mov	r6,r2
  80d4f4:	08081900 	call	808190 <__subdf3>
  80d4f8:	1021883a 	mov	r16,r2
  80d4fc:	d9001b17 	ldw	r4,108(sp)
  80d500:	1823883a 	mov	r17,r3
  80d504:	dc001415 	stw	r16,80(sp)
  80d508:	ad400c04 	addi	r21,r21,48
  80d50c:	dc401515 	stw	r17,84(sp)
  80d510:	d8801a17 	ldw	r2,104(sp)
  80d514:	e5400005 	stb	r21,0(fp)
  80d518:	202f883a 	mov	r23,r4
  80d51c:	d9c01b17 	ldw	r7,108(sp)
  80d520:	d9001417 	ldw	r4,80(sp)
  80d524:	880b883a 	mov	r5,r17
  80d528:	100d883a 	mov	r6,r2
  80d52c:	102d883a 	mov	r22,r2
  80d530:	e7000044 	addi	fp,fp,1
  80d534:	0808a380 	call	808a38 <__ltdf2>
  80d538:	103fc30e 	bge	r2,zero,80d448 <_dtoa_r+0x1064>
  80d53c:	d9000417 	ldw	r4,16(sp)
  80d540:	d9000d15 	stw	r4,52(sp)
  80d544:	003d7106 	br	80cb0c <_dtoa_r+0x728>
  80d548:	d9801717 	ldw	r6,92(sp)
  80d54c:	00800084 	movi	r2,2
  80d550:	11bde60e 	bge	r2,r6,80ccec <_dtoa_r+0x908>
  80d554:	203cfb1e 	bne	r4,zero,80c944 <_dtoa_r+0x560>
  80d558:	d9001617 	ldw	r4,88(sp)
  80d55c:	900b883a 	mov	r5,r18
  80d560:	01800144 	movi	r6,5
  80d564:	000f883a 	mov	r7,zero
  80d568:	080fb600 	call	80fb60 <__multadd>
  80d56c:	d9000717 	ldw	r4,28(sp)
  80d570:	100b883a 	mov	r5,r2
  80d574:	1025883a 	mov	r18,r2
  80d578:	080f0080 	call	80f008 <__mcmp>
  80d57c:	00bcf10e 	bge	zero,r2,80c944 <_dtoa_r+0x560>
  80d580:	d8c00d17 	ldw	r3,52(sp)
  80d584:	d9000517 	ldw	r4,20(sp)
  80d588:	d8000615 	stw	zero,24(sp)
  80d58c:	18c00044 	addi	r3,r3,1
  80d590:	d8c00d15 	stw	r3,52(sp)
  80d594:	00800c44 	movi	r2,49
  80d598:	27000044 	addi	fp,r4,1
  80d59c:	20800005 	stb	r2,0(r4)
  80d5a0:	003e8906 	br	80cfc8 <_dtoa_r+0xbe4>
  80d5a4:	d8c00517 	ldw	r3,20(sp)
  80d5a8:	003bc206 	br	80c4b4 <_dtoa_r+0xd0>
  80d5ac:	018020b4 	movhi	r6,130
  80d5b0:	31b28604 	addi	r6,r6,-13800
  80d5b4:	30c00917 	ldw	r3,36(r6)
  80d5b8:	30800817 	ldw	r2,32(r6)
  80d5bc:	d9001217 	ldw	r4,72(sp)
  80d5c0:	d9401317 	ldw	r5,76(sp)
  80d5c4:	180f883a 	mov	r7,r3
  80d5c8:	100d883a 	mov	r6,r2
  80d5cc:	08086480 	call	808648 <__divdf3>
  80d5d0:	948003cc 	andi	r18,r18,15
  80d5d4:	058000c4 	movi	r22,3
  80d5d8:	1029883a 	mov	r20,r2
  80d5dc:	182b883a 	mov	r21,r3
  80d5e0:	003c8906 	br	80c808 <_dtoa_r+0x424>
  80d5e4:	d9001017 	ldw	r4,64(sp)
  80d5e8:	d9800917 	ldw	r6,36(sp)
  80d5ec:	0025883a 	mov	r18,zero
  80d5f0:	1105c83a 	sub	r2,r2,r4
  80d5f4:	2089883a 	add	r4,r4,r2
  80d5f8:	308d883a 	add	r6,r6,r2
  80d5fc:	d9001015 	stw	r4,64(sp)
  80d600:	d9800915 	stw	r6,36(sp)
  80d604:	003e3206 	br	80ced0 <_dtoa_r+0xaec>
  80d608:	28800044 	addi	r2,r5,1
  80d60c:	27000044 	addi	fp,r4,1
  80d610:	20800005 	stb	r2,0(r4)
  80d614:	003e6c06 	br	80cfc8 <_dtoa_r+0xbe4>
  80d618:	d8800f17 	ldw	r2,60(sp)
  80d61c:	00bce016 	blt	zero,r2,80c9a0 <_dtoa_r+0x5bc>
  80d620:	d9800f17 	ldw	r6,60(sp)
  80d624:	303cc51e 	bne	r6,zero,80c93c <_dtoa_r+0x558>
  80d628:	0005883a 	mov	r2,zero
  80d62c:	00d00534 	movhi	r3,16404
  80d630:	980b883a 	mov	r5,r19
  80d634:	180f883a 	mov	r7,r3
  80d638:	9009883a 	mov	r4,r18
  80d63c:	100d883a 	mov	r6,r2
  80d640:	08082840 	call	808284 <__muldf3>
  80d644:	180b883a 	mov	r5,r3
  80d648:	a80f883a 	mov	r7,r21
  80d64c:	1009883a 	mov	r4,r2
  80d650:	a00d883a 	mov	r6,r20
  80d654:	08116fc0 	call	8116fc <__gedf2>
  80d658:	103cb80e 	bge	r2,zero,80c93c <_dtoa_r+0x558>
  80d65c:	0027883a 	mov	r19,zero
  80d660:	0025883a 	mov	r18,zero
  80d664:	003fc606 	br	80d580 <_dtoa_r+0x119c>
  80d668:	99400117 	ldw	r5,4(r19)
  80d66c:	d9001617 	ldw	r4,88(sp)
  80d670:	080f42c0 	call	80f42c <_Balloc>
  80d674:	99800417 	ldw	r6,16(r19)
  80d678:	11000304 	addi	r4,r2,12
  80d67c:	99400304 	addi	r5,r19,12
  80d680:	318d883a 	add	r6,r6,r6
  80d684:	318d883a 	add	r6,r6,r6
  80d688:	31800204 	addi	r6,r6,8
  80d68c:	1023883a 	mov	r17,r2
  80d690:	080ec940 	call	80ec94 <memcpy>
  80d694:	d9001617 	ldw	r4,88(sp)
  80d698:	880b883a 	mov	r5,r17
  80d69c:	01800044 	movi	r6,1
  80d6a0:	080f7f00 	call	80f7f0 <__lshift>
  80d6a4:	100b883a 	mov	r5,r2
  80d6a8:	003d9c06 	br	80cd1c <_dtoa_r+0x938>
  80d6ac:	00800e44 	movi	r2,57
  80d6b0:	b8807026 	beq	r23,r2,80d874 <_dtoa_r+0x1490>
  80d6b4:	b8800044 	addi	r2,r23,1
  80d6b8:	b7000044 	addi	fp,r22,1
  80d6bc:	b0800005 	stb	r2,0(r22)
  80d6c0:	003e4106 	br	80cfc8 <_dtoa_r+0xbe4>
  80d6c4:	d8800317 	ldw	r2,12(sp)
  80d6c8:	018020b4 	movhi	r6,130
  80d6cc:	31b25404 	addi	r6,r6,-14000
  80d6d0:	b009883a 	mov	r4,r22
  80d6d4:	100e90fa 	slli	r7,r2,3
  80d6d8:	b80b883a 	mov	r5,r23
  80d6dc:	398f883a 	add	r7,r7,r6
  80d6e0:	38bffe17 	ldw	r2,-8(r7)
  80d6e4:	d9800517 	ldw	r6,20(sp)
  80d6e8:	38ffff17 	ldw	r3,-4(r7)
  80d6ec:	37000044 	addi	fp,r6,1
  80d6f0:	180f883a 	mov	r7,r3
  80d6f4:	100d883a 	mov	r6,r2
  80d6f8:	08082840 	call	808284 <__muldf3>
  80d6fc:	a80b883a 	mov	r5,r21
  80d700:	a009883a 	mov	r4,r20
  80d704:	182f883a 	mov	r23,r3
  80d708:	102d883a 	mov	r22,r2
  80d70c:	0808c400 	call	808c40 <__fixdfsi>
  80d710:	1009883a 	mov	r4,r2
  80d714:	1027883a 	mov	r19,r2
  80d718:	0808b480 	call	808b48 <__floatsidf>
  80d71c:	a80b883a 	mov	r5,r21
  80d720:	a009883a 	mov	r4,r20
  80d724:	180f883a 	mov	r7,r3
  80d728:	100d883a 	mov	r6,r2
  80d72c:	08081900 	call	808190 <__subdf3>
  80d730:	180b883a 	mov	r5,r3
  80d734:	d8c00517 	ldw	r3,20(sp)
  80d738:	9cc00c04 	addi	r19,r19,48
  80d73c:	1009883a 	mov	r4,r2
  80d740:	1cc00005 	stb	r19,0(r3)
  80d744:	2021883a 	mov	r16,r4
  80d748:	d9000317 	ldw	r4,12(sp)
  80d74c:	00800044 	movi	r2,1
  80d750:	2823883a 	mov	r17,r5
  80d754:	20802226 	beq	r4,r2,80d7e0 <_dtoa_r+0x13fc>
  80d758:	1029883a 	mov	r20,r2
  80d75c:	0005883a 	mov	r2,zero
  80d760:	00d00934 	movhi	r3,16420
  80d764:	180f883a 	mov	r7,r3
  80d768:	100d883a 	mov	r6,r2
  80d76c:	880b883a 	mov	r5,r17
  80d770:	8009883a 	mov	r4,r16
  80d774:	08082840 	call	808284 <__muldf3>
  80d778:	180b883a 	mov	r5,r3
  80d77c:	1009883a 	mov	r4,r2
  80d780:	1823883a 	mov	r17,r3
  80d784:	1021883a 	mov	r16,r2
  80d788:	0808c400 	call	808c40 <__fixdfsi>
  80d78c:	1009883a 	mov	r4,r2
  80d790:	102b883a 	mov	r21,r2
  80d794:	0808b480 	call	808b48 <__floatsidf>
  80d798:	880b883a 	mov	r5,r17
  80d79c:	8009883a 	mov	r4,r16
  80d7a0:	180f883a 	mov	r7,r3
  80d7a4:	100d883a 	mov	r6,r2
  80d7a8:	08081900 	call	808190 <__subdf3>
  80d7ac:	180b883a 	mov	r5,r3
  80d7b0:	d8c00517 	ldw	r3,20(sp)
  80d7b4:	1009883a 	mov	r4,r2
  80d7b8:	ad400c04 	addi	r21,r21,48
  80d7bc:	1d05883a 	add	r2,r3,r20
  80d7c0:	15400005 	stb	r21,0(r2)
  80d7c4:	2021883a 	mov	r16,r4
  80d7c8:	d9000317 	ldw	r4,12(sp)
  80d7cc:	a5000044 	addi	r20,r20,1
  80d7d0:	2823883a 	mov	r17,r5
  80d7d4:	a13fe11e 	bne	r20,r4,80d75c <_dtoa_r+0x1378>
  80d7d8:	e505883a 	add	r2,fp,r20
  80d7dc:	173fffc4 	addi	fp,r2,-1
  80d7e0:	0025883a 	mov	r18,zero
  80d7e4:	04cff834 	movhi	r19,16352
  80d7e8:	b009883a 	mov	r4,r22
  80d7ec:	b80b883a 	mov	r5,r23
  80d7f0:	900d883a 	mov	r6,r18
  80d7f4:	980f883a 	mov	r7,r19
  80d7f8:	08082100 	call	808210 <__adddf3>
  80d7fc:	180b883a 	mov	r5,r3
  80d800:	1009883a 	mov	r4,r2
  80d804:	800d883a 	mov	r6,r16
  80d808:	880f883a 	mov	r7,r17
  80d80c:	0808a380 	call	808a38 <__ltdf2>
  80d810:	103cab16 	blt	r2,zero,80cac0 <_dtoa_r+0x6dc>
  80d814:	0009883a 	mov	r4,zero
  80d818:	980b883a 	mov	r5,r19
  80d81c:	b80f883a 	mov	r7,r23
  80d820:	b00d883a 	mov	r6,r22
  80d824:	08081900 	call	808190 <__subdf3>
  80d828:	180b883a 	mov	r5,r3
  80d82c:	880f883a 	mov	r7,r17
  80d830:	1009883a 	mov	r4,r2
  80d834:	800d883a 	mov	r6,r16
  80d838:	08089b00 	call	8089b0 <__gtdf2>
  80d83c:	00bc470e 	bge	zero,r2,80c95c <_dtoa_r+0x578>
  80d840:	00c00c04 	movi	r3,48
  80d844:	e73fffc4 	addi	fp,fp,-1
  80d848:	e0800007 	ldb	r2,0(fp)
  80d84c:	10fffd26 	beq	r2,r3,80d844 <_dtoa_r+0x1460>
  80d850:	d9800417 	ldw	r6,16(sp)
  80d854:	e7000044 	addi	fp,fp,1
  80d858:	d9800d15 	stw	r6,52(sp)
  80d85c:	003cab06 	br	80cb0c <_dtoa_r+0x728>
  80d860:	d8c00f17 	ldw	r3,60(sp)
  80d864:	d9001117 	ldw	r4,68(sp)
  80d868:	20e1c83a 	sub	r16,r4,r3
  80d86c:	0007883a 	mov	r3,zero
  80d870:	003d9b06 	br	80cee0 <_dtoa_r+0xafc>
  80d874:	00800e44 	movi	r2,57
  80d878:	b0800005 	stb	r2,0(r22)
  80d87c:	b5800044 	addi	r22,r22,1
  80d880:	003dc106 	br	80cf88 <_dtoa_r+0xba4>
  80d884:	05800084 	movi	r22,2
  80d888:	003bf706 	br	80c868 <_dtoa_r+0x484>
  80d88c:	d9000f17 	ldw	r4,60(sp)
  80d890:	013c000e 	bge	zero,r4,80c894 <_dtoa_r+0x4b0>
  80d894:	d9800e17 	ldw	r6,56(sp)
  80d898:	01bc300e 	bge	zero,r6,80c95c <_dtoa_r+0x578>
  80d89c:	0005883a 	mov	r2,zero
  80d8a0:	00d00934 	movhi	r3,16420
  80d8a4:	a80b883a 	mov	r5,r21
  80d8a8:	180f883a 	mov	r7,r3
  80d8ac:	a009883a 	mov	r4,r20
  80d8b0:	100d883a 	mov	r6,r2
  80d8b4:	08082840 	call	808284 <__muldf3>
  80d8b8:	b1000044 	addi	r4,r22,1
  80d8bc:	1021883a 	mov	r16,r2
  80d8c0:	1823883a 	mov	r17,r3
  80d8c4:	0808b480 	call	808b48 <__floatsidf>
  80d8c8:	880b883a 	mov	r5,r17
  80d8cc:	8009883a 	mov	r4,r16
  80d8d0:	180f883a 	mov	r7,r3
  80d8d4:	100d883a 	mov	r6,r2
  80d8d8:	08082840 	call	808284 <__muldf3>
  80d8dc:	0011883a 	mov	r8,zero
  80d8e0:	02500734 	movhi	r9,16412
  80d8e4:	180b883a 	mov	r5,r3
  80d8e8:	480f883a 	mov	r7,r9
  80d8ec:	1009883a 	mov	r4,r2
  80d8f0:	400d883a 	mov	r6,r8
  80d8f4:	08082100 	call	808210 <__adddf3>
  80d8f8:	102d883a 	mov	r22,r2
  80d8fc:	00bf3034 	movhi	r2,64704
  80d900:	10ef883a 	add	r23,r2,r3
  80d904:	d8800d17 	ldw	r2,52(sp)
  80d908:	d8c00e17 	ldw	r3,56(sp)
  80d90c:	8029883a 	mov	r20,r16
  80d910:	10bfffc4 	addi	r2,r2,-1
  80d914:	882b883a 	mov	r21,r17
  80d918:	d8800415 	stw	r2,16(sp)
  80d91c:	d8c00315 	stw	r3,12(sp)
  80d920:	003e8306 	br	80d330 <_dtoa_r+0xf4c>
  80d924:	d8800117 	ldw	r2,4(sp)
  80d928:	dc001117 	ldw	r16,68(sp)
  80d92c:	dc801017 	ldw	r18,64(sp)
  80d930:	00c00d84 	movi	r3,54
  80d934:	1887c83a 	sub	r3,r3,r2
  80d938:	003d6906 	br	80cee0 <_dtoa_r+0xafc>
  80d93c:	01800044 	movi	r6,1
  80d940:	3021883a 	mov	r16,r6
  80d944:	d9800f15 	stw	r6,60(sp)
  80d948:	d9802615 	stw	r6,152(sp)
  80d94c:	d9800e15 	stw	r6,56(sp)
  80d950:	003b9306 	br	80c7a0 <_dtoa_r+0x3bc>
  80d954:	b021883a 	mov	r16,r22
  80d958:	dd800f15 	stw	r22,60(sp)
  80d95c:	003b9006 	br	80c7a0 <_dtoa_r+0x3bc>
  80d960:	103e221e 	bne	r2,zero,80d1ec <_dtoa_r+0xe08>
  80d964:	b880004c 	andi	r2,r23,1
  80d968:	1005003a 	cmpeq	r2,r2,zero
  80d96c:	103e1f1e 	bne	r2,zero,80d1ec <_dtoa_r+0xe08>
  80d970:	003e1b06 	br	80d1e0 <_dtoa_r+0xdfc>
  80d974:	d9001617 	ldw	r4,88(sp)
  80d978:	980b883a 	mov	r5,r19
  80d97c:	01800284 	movi	r6,10
  80d980:	000f883a 	mov	r7,zero
  80d984:	080fb600 	call	80fb60 <__multadd>
  80d988:	d8c00e17 	ldw	r3,56(sp)
  80d98c:	1027883a 	mov	r19,r2
  80d990:	d8c00f15 	stw	r3,60(sp)
  80d994:	003cd306 	br	80cce4 <_dtoa_r+0x900>

0080d998 <_fflush_r>:
  80d998:	defffb04 	addi	sp,sp,-20
  80d99c:	dcc00315 	stw	r19,12(sp)
  80d9a0:	dc800215 	stw	r18,8(sp)
  80d9a4:	dfc00415 	stw	ra,16(sp)
  80d9a8:	dc400115 	stw	r17,4(sp)
  80d9ac:	dc000015 	stw	r16,0(sp)
  80d9b0:	2027883a 	mov	r19,r4
  80d9b4:	2825883a 	mov	r18,r5
  80d9b8:	20000226 	beq	r4,zero,80d9c4 <_fflush_r+0x2c>
  80d9bc:	20800e17 	ldw	r2,56(r4)
  80d9c0:	10005626 	beq	r2,zero,80db1c <_fflush_r+0x184>
  80d9c4:	9100030b 	ldhu	r4,12(r18)
  80d9c8:	20ffffcc 	andi	r3,r4,65535
  80d9cc:	18e0001c 	xori	r3,r3,32768
  80d9d0:	18e00004 	addi	r3,r3,-32768
  80d9d4:	1880020c 	andi	r2,r3,8
  80d9d8:	1000261e 	bne	r2,zero,80da74 <_fflush_r+0xdc>
  80d9dc:	90c00117 	ldw	r3,4(r18)
  80d9e0:	20820014 	ori	r2,r4,2048
  80d9e4:	9080030d 	sth	r2,12(r18)
  80d9e8:	1009883a 	mov	r4,r2
  80d9ec:	00c0400e 	bge	zero,r3,80daf0 <_fflush_r+0x158>
  80d9f0:	92000a17 	ldw	r8,40(r18)
  80d9f4:	40004026 	beq	r8,zero,80daf8 <_fflush_r+0x160>
  80d9f8:	2084000c 	andi	r2,r4,4096
  80d9fc:	10005326 	beq	r2,zero,80db4c <_fflush_r+0x1b4>
  80da00:	94001417 	ldw	r16,80(r18)
  80da04:	9080030b 	ldhu	r2,12(r18)
  80da08:	1080010c 	andi	r2,r2,4
  80da0c:	1000481e 	bne	r2,zero,80db30 <_fflush_r+0x198>
  80da10:	91400717 	ldw	r5,28(r18)
  80da14:	9809883a 	mov	r4,r19
  80da18:	800d883a 	mov	r6,r16
  80da1c:	000f883a 	mov	r7,zero
  80da20:	403ee83a 	callr	r8
  80da24:	8080261e 	bne	r16,r2,80dac0 <_fflush_r+0x128>
  80da28:	9080030b 	ldhu	r2,12(r18)
  80da2c:	91000417 	ldw	r4,16(r18)
  80da30:	90000115 	stw	zero,4(r18)
  80da34:	10bdffcc 	andi	r2,r2,63487
  80da38:	10ffffcc 	andi	r3,r2,65535
  80da3c:	18c4000c 	andi	r3,r3,4096
  80da40:	9080030d 	sth	r2,12(r18)
  80da44:	91000015 	stw	r4,0(r18)
  80da48:	18002b26 	beq	r3,zero,80daf8 <_fflush_r+0x160>
  80da4c:	0007883a 	mov	r3,zero
  80da50:	1805883a 	mov	r2,r3
  80da54:	94001415 	stw	r16,80(r18)
  80da58:	dfc00417 	ldw	ra,16(sp)
  80da5c:	dcc00317 	ldw	r19,12(sp)
  80da60:	dc800217 	ldw	r18,8(sp)
  80da64:	dc400117 	ldw	r17,4(sp)
  80da68:	dc000017 	ldw	r16,0(sp)
  80da6c:	dec00504 	addi	sp,sp,20
  80da70:	f800283a 	ret
  80da74:	94400417 	ldw	r17,16(r18)
  80da78:	88001f26 	beq	r17,zero,80daf8 <_fflush_r+0x160>
  80da7c:	90800017 	ldw	r2,0(r18)
  80da80:	18c000cc 	andi	r3,r3,3
  80da84:	94400015 	stw	r17,0(r18)
  80da88:	1461c83a 	sub	r16,r2,r17
  80da8c:	18002526 	beq	r3,zero,80db24 <_fflush_r+0x18c>
  80da90:	0005883a 	mov	r2,zero
  80da94:	90800215 	stw	r2,8(r18)
  80da98:	0400170e 	bge	zero,r16,80daf8 <_fflush_r+0x160>
  80da9c:	90c00917 	ldw	r3,36(r18)
  80daa0:	91400717 	ldw	r5,28(r18)
  80daa4:	880d883a 	mov	r6,r17
  80daa8:	800f883a 	mov	r7,r16
  80daac:	9809883a 	mov	r4,r19
  80dab0:	183ee83a 	callr	r3
  80dab4:	88a3883a 	add	r17,r17,r2
  80dab8:	80a1c83a 	sub	r16,r16,r2
  80dabc:	00bff616 	blt	zero,r2,80da98 <_fflush_r+0x100>
  80dac0:	9080030b 	ldhu	r2,12(r18)
  80dac4:	00ffffc4 	movi	r3,-1
  80dac8:	10801014 	ori	r2,r2,64
  80dacc:	9080030d 	sth	r2,12(r18)
  80dad0:	1805883a 	mov	r2,r3
  80dad4:	dfc00417 	ldw	ra,16(sp)
  80dad8:	dcc00317 	ldw	r19,12(sp)
  80dadc:	dc800217 	ldw	r18,8(sp)
  80dae0:	dc400117 	ldw	r17,4(sp)
  80dae4:	dc000017 	ldw	r16,0(sp)
  80dae8:	dec00504 	addi	sp,sp,20
  80daec:	f800283a 	ret
  80daf0:	90800f17 	ldw	r2,60(r18)
  80daf4:	00bfbe16 	blt	zero,r2,80d9f0 <_fflush_r+0x58>
  80daf8:	0007883a 	mov	r3,zero
  80dafc:	1805883a 	mov	r2,r3
  80db00:	dfc00417 	ldw	ra,16(sp)
  80db04:	dcc00317 	ldw	r19,12(sp)
  80db08:	dc800217 	ldw	r18,8(sp)
  80db0c:	dc400117 	ldw	r17,4(sp)
  80db10:	dc000017 	ldw	r16,0(sp)
  80db14:	dec00504 	addi	sp,sp,20
  80db18:	f800283a 	ret
  80db1c:	080dc300 	call	80dc30 <__sinit>
  80db20:	003fa806 	br	80d9c4 <_fflush_r+0x2c>
  80db24:	90800517 	ldw	r2,20(r18)
  80db28:	90800215 	stw	r2,8(r18)
  80db2c:	003fda06 	br	80da98 <_fflush_r+0x100>
  80db30:	90800117 	ldw	r2,4(r18)
  80db34:	90c00c17 	ldw	r3,48(r18)
  80db38:	80a1c83a 	sub	r16,r16,r2
  80db3c:	183fb426 	beq	r3,zero,80da10 <_fflush_r+0x78>
  80db40:	90800f17 	ldw	r2,60(r18)
  80db44:	80a1c83a 	sub	r16,r16,r2
  80db48:	003fb106 	br	80da10 <_fflush_r+0x78>
  80db4c:	91400717 	ldw	r5,28(r18)
  80db50:	9809883a 	mov	r4,r19
  80db54:	000d883a 	mov	r6,zero
  80db58:	01c00044 	movi	r7,1
  80db5c:	403ee83a 	callr	r8
  80db60:	1021883a 	mov	r16,r2
  80db64:	00bfffc4 	movi	r2,-1
  80db68:	80800226 	beq	r16,r2,80db74 <_fflush_r+0x1dc>
  80db6c:	92000a17 	ldw	r8,40(r18)
  80db70:	003fa406 	br	80da04 <_fflush_r+0x6c>
  80db74:	98c00017 	ldw	r3,0(r19)
  80db78:	00800744 	movi	r2,29
  80db7c:	18bfde26 	beq	r3,r2,80daf8 <_fflush_r+0x160>
  80db80:	9080030b 	ldhu	r2,12(r18)
  80db84:	8007883a 	mov	r3,r16
  80db88:	10801014 	ori	r2,r2,64
  80db8c:	9080030d 	sth	r2,12(r18)
  80db90:	003fcf06 	br	80dad0 <_fflush_r+0x138>

0080db94 <fflush>:
  80db94:	01402074 	movhi	r5,129
  80db98:	29766604 	addi	r5,r5,-9832
  80db9c:	2007883a 	mov	r3,r4
  80dba0:	20000526 	beq	r4,zero,80dbb8 <fflush+0x24>
  80dba4:	008020b4 	movhi	r2,130
  80dba8:	10b9c104 	addi	r2,r2,-6396
  80dbac:	11000017 	ldw	r4,0(r2)
  80dbb0:	180b883a 	mov	r5,r3
  80dbb4:	080d9981 	jmpi	80d998 <_fflush_r>
  80dbb8:	008020b4 	movhi	r2,130
  80dbbc:	10b9c204 	addi	r2,r2,-6392
  80dbc0:	11000017 	ldw	r4,0(r2)
  80dbc4:	080e7641 	jmpi	80e764 <_fwalk_reent>

0080dbc8 <std>:
  80dbc8:	00802074 	movhi	r2,129
  80dbcc:	10813504 	addi	r2,r2,1236
  80dbd0:	20800b15 	stw	r2,44(r4)
  80dbd4:	00802074 	movhi	r2,129
  80dbd8:	10817004 	addi	r2,r2,1472
  80dbdc:	20800815 	stw	r2,32(r4)
  80dbe0:	00c02074 	movhi	r3,129
  80dbe4:	18c15104 	addi	r3,r3,1348
  80dbe8:	00802074 	movhi	r2,129
  80dbec:	10813704 	addi	r2,r2,1244
  80dbf0:	2140030d 	sth	r5,12(r4)
  80dbf4:	2180038d 	sth	r6,14(r4)
  80dbf8:	20c00915 	stw	r3,36(r4)
  80dbfc:	20800a15 	stw	r2,40(r4)
  80dc00:	20000015 	stw	zero,0(r4)
  80dc04:	20000115 	stw	zero,4(r4)
  80dc08:	20000215 	stw	zero,8(r4)
  80dc0c:	20000415 	stw	zero,16(r4)
  80dc10:	20000515 	stw	zero,20(r4)
  80dc14:	20000615 	stw	zero,24(r4)
  80dc18:	21000715 	stw	r4,28(r4)
  80dc1c:	f800283a 	ret

0080dc20 <__sfp_lock_acquire>:
  80dc20:	f800283a 	ret

0080dc24 <__sfp_lock_release>:
  80dc24:	f800283a 	ret

0080dc28 <__sinit_lock_acquire>:
  80dc28:	f800283a 	ret

0080dc2c <__sinit_lock_release>:
  80dc2c:	f800283a 	ret

0080dc30 <__sinit>:
  80dc30:	20800e17 	ldw	r2,56(r4)
  80dc34:	defffd04 	addi	sp,sp,-12
  80dc38:	dc400115 	stw	r17,4(sp)
  80dc3c:	dc000015 	stw	r16,0(sp)
  80dc40:	dfc00215 	stw	ra,8(sp)
  80dc44:	04400044 	movi	r17,1
  80dc48:	01400104 	movi	r5,4
  80dc4c:	000d883a 	mov	r6,zero
  80dc50:	2021883a 	mov	r16,r4
  80dc54:	2200bb04 	addi	r8,r4,748
  80dc58:	200f883a 	mov	r7,r4
  80dc5c:	10000526 	beq	r2,zero,80dc74 <__sinit+0x44>
  80dc60:	dfc00217 	ldw	ra,8(sp)
  80dc64:	dc400117 	ldw	r17,4(sp)
  80dc68:	dc000017 	ldw	r16,0(sp)
  80dc6c:	dec00304 	addi	sp,sp,12
  80dc70:	f800283a 	ret
  80dc74:	21000117 	ldw	r4,4(r4)
  80dc78:	00802074 	movhi	r2,129
  80dc7c:	10b74504 	addi	r2,r2,-8940
  80dc80:	00c000c4 	movi	r3,3
  80dc84:	80800f15 	stw	r2,60(r16)
  80dc88:	80c0b915 	stw	r3,740(r16)
  80dc8c:	8200ba15 	stw	r8,744(r16)
  80dc90:	84400e15 	stw	r17,56(r16)
  80dc94:	8000b815 	stw	zero,736(r16)
  80dc98:	080dbc80 	call	80dbc8 <std>
  80dc9c:	81000217 	ldw	r4,8(r16)
  80dca0:	880d883a 	mov	r6,r17
  80dca4:	800f883a 	mov	r7,r16
  80dca8:	01400284 	movi	r5,10
  80dcac:	080dbc80 	call	80dbc8 <std>
  80dcb0:	81000317 	ldw	r4,12(r16)
  80dcb4:	800f883a 	mov	r7,r16
  80dcb8:	01400484 	movi	r5,18
  80dcbc:	01800084 	movi	r6,2
  80dcc0:	dfc00217 	ldw	ra,8(sp)
  80dcc4:	dc400117 	ldw	r17,4(sp)
  80dcc8:	dc000017 	ldw	r16,0(sp)
  80dccc:	dec00304 	addi	sp,sp,12
  80dcd0:	080dbc81 	jmpi	80dbc8 <std>

0080dcd4 <__fp_lock>:
  80dcd4:	0005883a 	mov	r2,zero
  80dcd8:	f800283a 	ret

0080dcdc <__fp_unlock>:
  80dcdc:	0005883a 	mov	r2,zero
  80dce0:	f800283a 	ret

0080dce4 <__fp_unlock_all>:
  80dce4:	008020b4 	movhi	r2,130
  80dce8:	10b9c104 	addi	r2,r2,-6396
  80dcec:	11000017 	ldw	r4,0(r2)
  80dcf0:	01402074 	movhi	r5,129
  80dcf4:	29773704 	addi	r5,r5,-8996
  80dcf8:	080e82c1 	jmpi	80e82c <_fwalk>

0080dcfc <__fp_lock_all>:
  80dcfc:	008020b4 	movhi	r2,130
  80dd00:	10b9c104 	addi	r2,r2,-6396
  80dd04:	11000017 	ldw	r4,0(r2)
  80dd08:	01402074 	movhi	r5,129
  80dd0c:	29773504 	addi	r5,r5,-9004
  80dd10:	080e82c1 	jmpi	80e82c <_fwalk>

0080dd14 <_cleanup_r>:
  80dd14:	01402074 	movhi	r5,129
  80dd18:	29426204 	addi	r5,r5,2440
  80dd1c:	080e82c1 	jmpi	80e82c <_fwalk>

0080dd20 <_cleanup>:
  80dd20:	008020b4 	movhi	r2,130
  80dd24:	10b9c204 	addi	r2,r2,-6392
  80dd28:	11000017 	ldw	r4,0(r2)
  80dd2c:	080dd141 	jmpi	80dd14 <_cleanup_r>

0080dd30 <__sfmoreglue>:
  80dd30:	defffc04 	addi	sp,sp,-16
  80dd34:	dc400115 	stw	r17,4(sp)
  80dd38:	2c401724 	muli	r17,r5,92
  80dd3c:	dc800215 	stw	r18,8(sp)
  80dd40:	2825883a 	mov	r18,r5
  80dd44:	89400304 	addi	r5,r17,12
  80dd48:	dc000015 	stw	r16,0(sp)
  80dd4c:	dfc00315 	stw	ra,12(sp)
  80dd50:	08097280 	call	809728 <_malloc_r>
  80dd54:	0021883a 	mov	r16,zero
  80dd58:	880d883a 	mov	r6,r17
  80dd5c:	000b883a 	mov	r5,zero
  80dd60:	10000626 	beq	r2,zero,80dd7c <__sfmoreglue+0x4c>
  80dd64:	11000304 	addi	r4,r2,12
  80dd68:	14800115 	stw	r18,4(r2)
  80dd6c:	10000015 	stw	zero,0(r2)
  80dd70:	11000215 	stw	r4,8(r2)
  80dd74:	1021883a 	mov	r16,r2
  80dd78:	080ee140 	call	80ee14 <memset>
  80dd7c:	8005883a 	mov	r2,r16
  80dd80:	dfc00317 	ldw	ra,12(sp)
  80dd84:	dc800217 	ldw	r18,8(sp)
  80dd88:	dc400117 	ldw	r17,4(sp)
  80dd8c:	dc000017 	ldw	r16,0(sp)
  80dd90:	dec00404 	addi	sp,sp,16
  80dd94:	f800283a 	ret

0080dd98 <__sfp>:
  80dd98:	defffd04 	addi	sp,sp,-12
  80dd9c:	008020b4 	movhi	r2,130
  80dda0:	10b9c204 	addi	r2,r2,-6392
  80dda4:	dc000015 	stw	r16,0(sp)
  80dda8:	14000017 	ldw	r16,0(r2)
  80ddac:	dc400115 	stw	r17,4(sp)
  80ddb0:	dfc00215 	stw	ra,8(sp)
  80ddb4:	80800e17 	ldw	r2,56(r16)
  80ddb8:	2023883a 	mov	r17,r4
  80ddbc:	10002626 	beq	r2,zero,80de58 <__sfp+0xc0>
  80ddc0:	8400b804 	addi	r16,r16,736
  80ddc4:	80800117 	ldw	r2,4(r16)
  80ddc8:	81000217 	ldw	r4,8(r16)
  80ddcc:	10ffffc4 	addi	r3,r2,-1
  80ddd0:	18000916 	blt	r3,zero,80ddf8 <__sfp+0x60>
  80ddd4:	2080030f 	ldh	r2,12(r4)
  80ddd8:	10000b26 	beq	r2,zero,80de08 <__sfp+0x70>
  80dddc:	017fffc4 	movi	r5,-1
  80dde0:	00000206 	br	80ddec <__sfp+0x54>
  80dde4:	2080030f 	ldh	r2,12(r4)
  80dde8:	10000726 	beq	r2,zero,80de08 <__sfp+0x70>
  80ddec:	18ffffc4 	addi	r3,r3,-1
  80ddf0:	21001704 	addi	r4,r4,92
  80ddf4:	197ffb1e 	bne	r3,r5,80dde4 <__sfp+0x4c>
  80ddf8:	80800017 	ldw	r2,0(r16)
  80ddfc:	10001926 	beq	r2,zero,80de64 <__sfp+0xcc>
  80de00:	1021883a 	mov	r16,r2
  80de04:	003fef06 	br	80ddc4 <__sfp+0x2c>
  80de08:	00bfffc4 	movi	r2,-1
  80de0c:	00c00044 	movi	r3,1
  80de10:	2080038d 	sth	r2,14(r4)
  80de14:	20c0030d 	sth	r3,12(r4)
  80de18:	20000015 	stw	zero,0(r4)
  80de1c:	20000215 	stw	zero,8(r4)
  80de20:	20000115 	stw	zero,4(r4)
  80de24:	20000415 	stw	zero,16(r4)
  80de28:	20000515 	stw	zero,20(r4)
  80de2c:	20000615 	stw	zero,24(r4)
  80de30:	20000c15 	stw	zero,48(r4)
  80de34:	20000d15 	stw	zero,52(r4)
  80de38:	20001115 	stw	zero,68(r4)
  80de3c:	20001215 	stw	zero,72(r4)
  80de40:	2005883a 	mov	r2,r4
  80de44:	dfc00217 	ldw	ra,8(sp)
  80de48:	dc400117 	ldw	r17,4(sp)
  80de4c:	dc000017 	ldw	r16,0(sp)
  80de50:	dec00304 	addi	sp,sp,12
  80de54:	f800283a 	ret
  80de58:	8009883a 	mov	r4,r16
  80de5c:	080dc300 	call	80dc30 <__sinit>
  80de60:	003fd706 	br	80ddc0 <__sfp+0x28>
  80de64:	8809883a 	mov	r4,r17
  80de68:	01400104 	movi	r5,4
  80de6c:	080dd300 	call	80dd30 <__sfmoreglue>
  80de70:	80800015 	stw	r2,0(r16)
  80de74:	103fe21e 	bne	r2,zero,80de00 <__sfp+0x68>
  80de78:	00800304 	movi	r2,12
  80de7c:	0009883a 	mov	r4,zero
  80de80:	88800015 	stw	r2,0(r17)
  80de84:	003fee06 	br	80de40 <__sfp+0xa8>

0080de88 <_malloc_trim_r>:
  80de88:	defffb04 	addi	sp,sp,-20
  80de8c:	dcc00315 	stw	r19,12(sp)
  80de90:	04c020b4 	movhi	r19,130
  80de94:	9cf3df04 	addi	r19,r19,-12420
  80de98:	dc800215 	stw	r18,8(sp)
  80de9c:	dc400115 	stw	r17,4(sp)
  80dea0:	dc000015 	stw	r16,0(sp)
  80dea4:	2823883a 	mov	r17,r5
  80dea8:	2025883a 	mov	r18,r4
  80deac:	dfc00415 	stw	ra,16(sp)
  80deb0:	08123780 	call	812378 <__malloc_lock>
  80deb4:	98800217 	ldw	r2,8(r19)
  80deb8:	9009883a 	mov	r4,r18
  80debc:	000b883a 	mov	r5,zero
  80dec0:	10c00117 	ldw	r3,4(r2)
  80dec4:	00bfff04 	movi	r2,-4
  80dec8:	18a0703a 	and	r16,r3,r2
  80decc:	8463c83a 	sub	r17,r16,r17
  80ded0:	8c43fbc4 	addi	r17,r17,4079
  80ded4:	8822d33a 	srli	r17,r17,12
  80ded8:	0083ffc4 	movi	r2,4095
  80dedc:	8c7fffc4 	addi	r17,r17,-1
  80dee0:	8822933a 	slli	r17,r17,12
  80dee4:	1440060e 	bge	r2,r17,80df00 <_malloc_trim_r+0x78>
  80dee8:	080a0280 	call	80a028 <_sbrk_r>
  80deec:	98c00217 	ldw	r3,8(r19)
  80def0:	9009883a 	mov	r4,r18
  80def4:	044bc83a 	sub	r5,zero,r17
  80def8:	80c7883a 	add	r3,r16,r3
  80defc:	10c00926 	beq	r2,r3,80df24 <_malloc_trim_r+0x9c>
  80df00:	08123980 	call	812398 <__malloc_unlock>
  80df04:	0005883a 	mov	r2,zero
  80df08:	dfc00417 	ldw	ra,16(sp)
  80df0c:	dcc00317 	ldw	r19,12(sp)
  80df10:	dc800217 	ldw	r18,8(sp)
  80df14:	dc400117 	ldw	r17,4(sp)
  80df18:	dc000017 	ldw	r16,0(sp)
  80df1c:	dec00504 	addi	sp,sp,20
  80df20:	f800283a 	ret
  80df24:	9009883a 	mov	r4,r18
  80df28:	080a0280 	call	80a028 <_sbrk_r>
  80df2c:	844dc83a 	sub	r6,r16,r17
  80df30:	00ffffc4 	movi	r3,-1
  80df34:	9009883a 	mov	r4,r18
  80df38:	000b883a 	mov	r5,zero
  80df3c:	01c020b4 	movhi	r7,130
  80df40:	39c10c04 	addi	r7,r7,1072
  80df44:	31800054 	ori	r6,r6,1
  80df48:	10c00926 	beq	r2,r3,80df70 <_malloc_trim_r+0xe8>
  80df4c:	38800017 	ldw	r2,0(r7)
  80df50:	98c00217 	ldw	r3,8(r19)
  80df54:	9009883a 	mov	r4,r18
  80df58:	1445c83a 	sub	r2,r2,r17
  80df5c:	38800015 	stw	r2,0(r7)
  80df60:	19800115 	stw	r6,4(r3)
  80df64:	08123980 	call	812398 <__malloc_unlock>
  80df68:	00800044 	movi	r2,1
  80df6c:	003fe606 	br	80df08 <_malloc_trim_r+0x80>
  80df70:	080a0280 	call	80a028 <_sbrk_r>
  80df74:	99800217 	ldw	r6,8(r19)
  80df78:	100f883a 	mov	r7,r2
  80df7c:	9009883a 	mov	r4,r18
  80df80:	1187c83a 	sub	r3,r2,r6
  80df84:	008003c4 	movi	r2,15
  80df88:	19400054 	ori	r5,r3,1
  80df8c:	10ffdc0e 	bge	r2,r3,80df00 <_malloc_trim_r+0x78>
  80df90:	008020b4 	movhi	r2,130
  80df94:	10b9c404 	addi	r2,r2,-6384
  80df98:	10c00017 	ldw	r3,0(r2)
  80df9c:	008020b4 	movhi	r2,130
  80dfa0:	10810c04 	addi	r2,r2,1072
  80dfa4:	31400115 	stw	r5,4(r6)
  80dfa8:	38c7c83a 	sub	r3,r7,r3
  80dfac:	10c00015 	stw	r3,0(r2)
  80dfb0:	003fd306 	br	80df00 <_malloc_trim_r+0x78>

0080dfb4 <_free_r>:
  80dfb4:	defffd04 	addi	sp,sp,-12
  80dfb8:	dc400115 	stw	r17,4(sp)
  80dfbc:	dc000015 	stw	r16,0(sp)
  80dfc0:	dfc00215 	stw	ra,8(sp)
  80dfc4:	2821883a 	mov	r16,r5
  80dfc8:	2023883a 	mov	r17,r4
  80dfcc:	28005a26 	beq	r5,zero,80e138 <_free_r+0x184>
  80dfd0:	08123780 	call	812378 <__malloc_lock>
  80dfd4:	823ffe04 	addi	r8,r16,-8
  80dfd8:	41400117 	ldw	r5,4(r8)
  80dfdc:	00bfff84 	movi	r2,-2
  80dfe0:	028020b4 	movhi	r10,130
  80dfe4:	52b3df04 	addi	r10,r10,-12420
  80dfe8:	288e703a 	and	r7,r5,r2
  80dfec:	41cd883a 	add	r6,r8,r7
  80dff0:	30c00117 	ldw	r3,4(r6)
  80dff4:	51000217 	ldw	r4,8(r10)
  80dff8:	00bfff04 	movi	r2,-4
  80dffc:	1892703a 	and	r9,r3,r2
  80e000:	5017883a 	mov	r11,r10
  80e004:	31006726 	beq	r6,r4,80e1a4 <_free_r+0x1f0>
  80e008:	2880004c 	andi	r2,r5,1
  80e00c:	1005003a 	cmpeq	r2,r2,zero
  80e010:	32400115 	stw	r9,4(r6)
  80e014:	10001a1e 	bne	r2,zero,80e080 <_free_r+0xcc>
  80e018:	000b883a 	mov	r5,zero
  80e01c:	3247883a 	add	r3,r6,r9
  80e020:	18800117 	ldw	r2,4(r3)
  80e024:	1080004c 	andi	r2,r2,1
  80e028:	1000231e 	bne	r2,zero,80e0b8 <_free_r+0x104>
  80e02c:	280ac03a 	cmpne	r5,r5,zero
  80e030:	3a4f883a 	add	r7,r7,r9
  80e034:	2800451e 	bne	r5,zero,80e14c <_free_r+0x198>
  80e038:	31000217 	ldw	r4,8(r6)
  80e03c:	008020b4 	movhi	r2,130
  80e040:	10b3e104 	addi	r2,r2,-12412
  80e044:	20807b26 	beq	r4,r2,80e234 <_free_r+0x280>
  80e048:	30800317 	ldw	r2,12(r6)
  80e04c:	3a07883a 	add	r3,r7,r8
  80e050:	19c00015 	stw	r7,0(r3)
  80e054:	11000215 	stw	r4,8(r2)
  80e058:	20800315 	stw	r2,12(r4)
  80e05c:	38800054 	ori	r2,r7,1
  80e060:	40800115 	stw	r2,4(r8)
  80e064:	28001a26 	beq	r5,zero,80e0d0 <_free_r+0x11c>
  80e068:	8809883a 	mov	r4,r17
  80e06c:	dfc00217 	ldw	ra,8(sp)
  80e070:	dc400117 	ldw	r17,4(sp)
  80e074:	dc000017 	ldw	r16,0(sp)
  80e078:	dec00304 	addi	sp,sp,12
  80e07c:	08123981 	jmpi	812398 <__malloc_unlock>
  80e080:	80bffe17 	ldw	r2,-8(r16)
  80e084:	50c00204 	addi	r3,r10,8
  80e088:	4091c83a 	sub	r8,r8,r2
  80e08c:	41000217 	ldw	r4,8(r8)
  80e090:	388f883a 	add	r7,r7,r2
  80e094:	20c06126 	beq	r4,r3,80e21c <_free_r+0x268>
  80e098:	40800317 	ldw	r2,12(r8)
  80e09c:	3247883a 	add	r3,r6,r9
  80e0a0:	000b883a 	mov	r5,zero
  80e0a4:	11000215 	stw	r4,8(r2)
  80e0a8:	20800315 	stw	r2,12(r4)
  80e0ac:	18800117 	ldw	r2,4(r3)
  80e0b0:	1080004c 	andi	r2,r2,1
  80e0b4:	103fdd26 	beq	r2,zero,80e02c <_free_r+0x78>
  80e0b8:	38800054 	ori	r2,r7,1
  80e0bc:	3a07883a 	add	r3,r7,r8
  80e0c0:	280ac03a 	cmpne	r5,r5,zero
  80e0c4:	40800115 	stw	r2,4(r8)
  80e0c8:	19c00015 	stw	r7,0(r3)
  80e0cc:	283fe61e 	bne	r5,zero,80e068 <_free_r+0xb4>
  80e0d0:	00807fc4 	movi	r2,511
  80e0d4:	11c01f2e 	bgeu	r2,r7,80e154 <_free_r+0x1a0>
  80e0d8:	3806d27a 	srli	r3,r7,9
  80e0dc:	1800481e 	bne	r3,zero,80e200 <_free_r+0x24c>
  80e0e0:	3804d0fa 	srli	r2,r7,3
  80e0e4:	100690fa 	slli	r3,r2,3
  80e0e8:	1acd883a 	add	r6,r3,r11
  80e0ec:	31400217 	ldw	r5,8(r6)
  80e0f0:	31405926 	beq	r6,r5,80e258 <_free_r+0x2a4>
  80e0f4:	28800117 	ldw	r2,4(r5)
  80e0f8:	00ffff04 	movi	r3,-4
  80e0fc:	10c4703a 	and	r2,r2,r3
  80e100:	3880022e 	bgeu	r7,r2,80e10c <_free_r+0x158>
  80e104:	29400217 	ldw	r5,8(r5)
  80e108:	317ffa1e 	bne	r6,r5,80e0f4 <_free_r+0x140>
  80e10c:	29800317 	ldw	r6,12(r5)
  80e110:	41800315 	stw	r6,12(r8)
  80e114:	41400215 	stw	r5,8(r8)
  80e118:	8809883a 	mov	r4,r17
  80e11c:	2a000315 	stw	r8,12(r5)
  80e120:	32000215 	stw	r8,8(r6)
  80e124:	dfc00217 	ldw	ra,8(sp)
  80e128:	dc400117 	ldw	r17,4(sp)
  80e12c:	dc000017 	ldw	r16,0(sp)
  80e130:	dec00304 	addi	sp,sp,12
  80e134:	08123981 	jmpi	812398 <__malloc_unlock>
  80e138:	dfc00217 	ldw	ra,8(sp)
  80e13c:	dc400117 	ldw	r17,4(sp)
  80e140:	dc000017 	ldw	r16,0(sp)
  80e144:	dec00304 	addi	sp,sp,12
  80e148:	f800283a 	ret
  80e14c:	31000217 	ldw	r4,8(r6)
  80e150:	003fbd06 	br	80e048 <_free_r+0x94>
  80e154:	3806d0fa 	srli	r3,r7,3
  80e158:	00800044 	movi	r2,1
  80e15c:	51400117 	ldw	r5,4(r10)
  80e160:	180890fa 	slli	r4,r3,3
  80e164:	1807d0ba 	srai	r3,r3,2
  80e168:	22c9883a 	add	r4,r4,r11
  80e16c:	21800217 	ldw	r6,8(r4)
  80e170:	10c4983a 	sll	r2,r2,r3
  80e174:	41000315 	stw	r4,12(r8)
  80e178:	41800215 	stw	r6,8(r8)
  80e17c:	288ab03a 	or	r5,r5,r2
  80e180:	22000215 	stw	r8,8(r4)
  80e184:	8809883a 	mov	r4,r17
  80e188:	51400115 	stw	r5,4(r10)
  80e18c:	32000315 	stw	r8,12(r6)
  80e190:	dfc00217 	ldw	ra,8(sp)
  80e194:	dc400117 	ldw	r17,4(sp)
  80e198:	dc000017 	ldw	r16,0(sp)
  80e19c:	dec00304 	addi	sp,sp,12
  80e1a0:	08123981 	jmpi	812398 <__malloc_unlock>
  80e1a4:	2880004c 	andi	r2,r5,1
  80e1a8:	3a4d883a 	add	r6,r7,r9
  80e1ac:	1000071e 	bne	r2,zero,80e1cc <_free_r+0x218>
  80e1b0:	80bffe17 	ldw	r2,-8(r16)
  80e1b4:	4091c83a 	sub	r8,r8,r2
  80e1b8:	41000317 	ldw	r4,12(r8)
  80e1bc:	40c00217 	ldw	r3,8(r8)
  80e1c0:	308d883a 	add	r6,r6,r2
  80e1c4:	20c00215 	stw	r3,8(r4)
  80e1c8:	19000315 	stw	r4,12(r3)
  80e1cc:	008020b4 	movhi	r2,130
  80e1d0:	10b9c304 	addi	r2,r2,-6388
  80e1d4:	11000017 	ldw	r4,0(r2)
  80e1d8:	30c00054 	ori	r3,r6,1
  80e1dc:	52000215 	stw	r8,8(r10)
  80e1e0:	40c00115 	stw	r3,4(r8)
  80e1e4:	313fa036 	bltu	r6,r4,80e068 <_free_r+0xb4>
  80e1e8:	008020b4 	movhi	r2,130
  80e1ec:	1080ec04 	addi	r2,r2,944
  80e1f0:	11400017 	ldw	r5,0(r2)
  80e1f4:	8809883a 	mov	r4,r17
  80e1f8:	080de880 	call	80de88 <_malloc_trim_r>
  80e1fc:	003f9a06 	br	80e068 <_free_r+0xb4>
  80e200:	00800104 	movi	r2,4
  80e204:	10c0072e 	bgeu	r2,r3,80e224 <_free_r+0x270>
  80e208:	00800504 	movi	r2,20
  80e20c:	10c01936 	bltu	r2,r3,80e274 <_free_r+0x2c0>
  80e210:	188016c4 	addi	r2,r3,91
  80e214:	100690fa 	slli	r3,r2,3
  80e218:	003fb306 	br	80e0e8 <_free_r+0x134>
  80e21c:	01400044 	movi	r5,1
  80e220:	003f7e06 	br	80e01c <_free_r+0x68>
  80e224:	3804d1ba 	srli	r2,r7,6
  80e228:	10800e04 	addi	r2,r2,56
  80e22c:	100690fa 	slli	r3,r2,3
  80e230:	003fad06 	br	80e0e8 <_free_r+0x134>
  80e234:	22000315 	stw	r8,12(r4)
  80e238:	22000215 	stw	r8,8(r4)
  80e23c:	3a05883a 	add	r2,r7,r8
  80e240:	38c00054 	ori	r3,r7,1
  80e244:	11c00015 	stw	r7,0(r2)
  80e248:	41000215 	stw	r4,8(r8)
  80e24c:	40c00115 	stw	r3,4(r8)
  80e250:	41000315 	stw	r4,12(r8)
  80e254:	003f8406 	br	80e068 <_free_r+0xb4>
  80e258:	1005d0ba 	srai	r2,r2,2
  80e25c:	00c00044 	movi	r3,1
  80e260:	51000117 	ldw	r4,4(r10)
  80e264:	1886983a 	sll	r3,r3,r2
  80e268:	20c8b03a 	or	r4,r4,r3
  80e26c:	51000115 	stw	r4,4(r10)
  80e270:	003fa706 	br	80e110 <_free_r+0x15c>
  80e274:	00801504 	movi	r2,84
  80e278:	10c00436 	bltu	r2,r3,80e28c <_free_r+0x2d8>
  80e27c:	3804d33a 	srli	r2,r7,12
  80e280:	10801b84 	addi	r2,r2,110
  80e284:	100690fa 	slli	r3,r2,3
  80e288:	003f9706 	br	80e0e8 <_free_r+0x134>
  80e28c:	00805504 	movi	r2,340
  80e290:	10c00436 	bltu	r2,r3,80e2a4 <_free_r+0x2f0>
  80e294:	3804d3fa 	srli	r2,r7,15
  80e298:	10801dc4 	addi	r2,r2,119
  80e29c:	100690fa 	slli	r3,r2,3
  80e2a0:	003f9106 	br	80e0e8 <_free_r+0x134>
  80e2a4:	00815504 	movi	r2,1364
  80e2a8:	10c0032e 	bgeu	r2,r3,80e2b8 <_free_r+0x304>
  80e2ac:	00801f84 	movi	r2,126
  80e2b0:	00c0fc04 	movi	r3,1008
  80e2b4:	003f8c06 	br	80e0e8 <_free_r+0x134>
  80e2b8:	3804d4ba 	srli	r2,r7,18
  80e2bc:	10801f04 	addi	r2,r2,124
  80e2c0:	100690fa 	slli	r3,r2,3
  80e2c4:	003f8806 	br	80e0e8 <_free_r+0x134>

0080e2c8 <__sfvwrite_r>:
  80e2c8:	30800217 	ldw	r2,8(r6)
  80e2cc:	defff504 	addi	sp,sp,-44
  80e2d0:	df000915 	stw	fp,36(sp)
  80e2d4:	dd800715 	stw	r22,28(sp)
  80e2d8:	dc800315 	stw	r18,12(sp)
  80e2dc:	dfc00a15 	stw	ra,40(sp)
  80e2e0:	ddc00815 	stw	r23,32(sp)
  80e2e4:	dd400615 	stw	r21,24(sp)
  80e2e8:	dd000515 	stw	r20,20(sp)
  80e2ec:	dcc00415 	stw	r19,16(sp)
  80e2f0:	dc400215 	stw	r17,8(sp)
  80e2f4:	dc000115 	stw	r16,4(sp)
  80e2f8:	302d883a 	mov	r22,r6
  80e2fc:	2039883a 	mov	fp,r4
  80e300:	2825883a 	mov	r18,r5
  80e304:	10001c26 	beq	r2,zero,80e378 <__sfvwrite_r+0xb0>
  80e308:	29c0030b 	ldhu	r7,12(r5)
  80e30c:	3880020c 	andi	r2,r7,8
  80e310:	10002726 	beq	r2,zero,80e3b0 <__sfvwrite_r+0xe8>
  80e314:	28800417 	ldw	r2,16(r5)
  80e318:	10002526 	beq	r2,zero,80e3b0 <__sfvwrite_r+0xe8>
  80e31c:	3880008c 	andi	r2,r7,2
  80e320:	b5400017 	ldw	r21,0(r22)
  80e324:	10002826 	beq	r2,zero,80e3c8 <__sfvwrite_r+0x100>
  80e328:	0021883a 	mov	r16,zero
  80e32c:	0023883a 	mov	r17,zero
  80e330:	880d883a 	mov	r6,r17
  80e334:	e009883a 	mov	r4,fp
  80e338:	00810004 	movi	r2,1024
  80e33c:	80006e26 	beq	r16,zero,80e4f8 <__sfvwrite_r+0x230>
  80e340:	800f883a 	mov	r7,r16
  80e344:	91400717 	ldw	r5,28(r18)
  80e348:	1400012e 	bgeu	r2,r16,80e350 <__sfvwrite_r+0x88>
  80e34c:	100f883a 	mov	r7,r2
  80e350:	90c00917 	ldw	r3,36(r18)
  80e354:	183ee83a 	callr	r3
  80e358:	1007883a 	mov	r3,r2
  80e35c:	80a1c83a 	sub	r16,r16,r2
  80e360:	88a3883a 	add	r17,r17,r2
  80e364:	00806d0e 	bge	zero,r2,80e51c <__sfvwrite_r+0x254>
  80e368:	b0800217 	ldw	r2,8(r22)
  80e36c:	10c5c83a 	sub	r2,r2,r3
  80e370:	b0800215 	stw	r2,8(r22)
  80e374:	103fee1e 	bne	r2,zero,80e330 <__sfvwrite_r+0x68>
  80e378:	0009883a 	mov	r4,zero
  80e37c:	2005883a 	mov	r2,r4
  80e380:	dfc00a17 	ldw	ra,40(sp)
  80e384:	df000917 	ldw	fp,36(sp)
  80e388:	ddc00817 	ldw	r23,32(sp)
  80e38c:	dd800717 	ldw	r22,28(sp)
  80e390:	dd400617 	ldw	r21,24(sp)
  80e394:	dd000517 	ldw	r20,20(sp)
  80e398:	dcc00417 	ldw	r19,16(sp)
  80e39c:	dc800317 	ldw	r18,12(sp)
  80e3a0:	dc400217 	ldw	r17,8(sp)
  80e3a4:	dc000117 	ldw	r16,4(sp)
  80e3a8:	dec00b04 	addi	sp,sp,44
  80e3ac:	f800283a 	ret
  80e3b0:	080c0900 	call	80c090 <__swsetup_r>
  80e3b4:	1000e41e 	bne	r2,zero,80e748 <__sfvwrite_r+0x480>
  80e3b8:	91c0030b 	ldhu	r7,12(r18)
  80e3bc:	b5400017 	ldw	r21,0(r22)
  80e3c0:	3880008c 	andi	r2,r7,2
  80e3c4:	103fd81e 	bne	r2,zero,80e328 <__sfvwrite_r+0x60>
  80e3c8:	3880004c 	andi	r2,r7,1
  80e3cc:	1005003a 	cmpeq	r2,r2,zero
  80e3d0:	10005726 	beq	r2,zero,80e530 <__sfvwrite_r+0x268>
  80e3d4:	0029883a 	mov	r20,zero
  80e3d8:	002f883a 	mov	r23,zero
  80e3dc:	a0004226 	beq	r20,zero,80e4e8 <__sfvwrite_r+0x220>
  80e3e0:	3880800c 	andi	r2,r7,512
  80e3e4:	94000217 	ldw	r16,8(r18)
  80e3e8:	10008b26 	beq	r2,zero,80e618 <__sfvwrite_r+0x350>
  80e3ec:	800d883a 	mov	r6,r16
  80e3f0:	a400a536 	bltu	r20,r16,80e688 <__sfvwrite_r+0x3c0>
  80e3f4:	3881200c 	andi	r2,r7,1152
  80e3f8:	10002726 	beq	r2,zero,80e498 <__sfvwrite_r+0x1d0>
  80e3fc:	90800517 	ldw	r2,20(r18)
  80e400:	92000417 	ldw	r8,16(r18)
  80e404:	91400017 	ldw	r5,0(r18)
  80e408:	1087883a 	add	r3,r2,r2
  80e40c:	1887883a 	add	r3,r3,r2
  80e410:	1808d7fa 	srli	r4,r3,31
  80e414:	2a21c83a 	sub	r16,r5,r8
  80e418:	80800044 	addi	r2,r16,1
  80e41c:	20c9883a 	add	r4,r4,r3
  80e420:	2027d07a 	srai	r19,r4,1
  80e424:	a085883a 	add	r2,r20,r2
  80e428:	980d883a 	mov	r6,r19
  80e42c:	9880022e 	bgeu	r19,r2,80e438 <__sfvwrite_r+0x170>
  80e430:	1027883a 	mov	r19,r2
  80e434:	100d883a 	mov	r6,r2
  80e438:	3881000c 	andi	r2,r7,1024
  80e43c:	1000b826 	beq	r2,zero,80e720 <__sfvwrite_r+0x458>
  80e440:	300b883a 	mov	r5,r6
  80e444:	e009883a 	mov	r4,fp
  80e448:	08097280 	call	809728 <_malloc_r>
  80e44c:	10003126 	beq	r2,zero,80e514 <__sfvwrite_r+0x24c>
  80e450:	91400417 	ldw	r5,16(r18)
  80e454:	1009883a 	mov	r4,r2
  80e458:	800d883a 	mov	r6,r16
  80e45c:	1023883a 	mov	r17,r2
  80e460:	080ec940 	call	80ec94 <memcpy>
  80e464:	90c0030b 	ldhu	r3,12(r18)
  80e468:	00beffc4 	movi	r2,-1025
  80e46c:	1886703a 	and	r3,r3,r2
  80e470:	18c02014 	ori	r3,r3,128
  80e474:	90c0030d 	sth	r3,12(r18)
  80e478:	9c07c83a 	sub	r3,r19,r16
  80e47c:	8c05883a 	add	r2,r17,r16
  80e480:	a00d883a 	mov	r6,r20
  80e484:	a021883a 	mov	r16,r20
  80e488:	90800015 	stw	r2,0(r18)
  80e48c:	90c00215 	stw	r3,8(r18)
  80e490:	94400415 	stw	r17,16(r18)
  80e494:	94c00515 	stw	r19,20(r18)
  80e498:	91000017 	ldw	r4,0(r18)
  80e49c:	b80b883a 	mov	r5,r23
  80e4a0:	a023883a 	mov	r17,r20
  80e4a4:	080ed340 	call	80ed34 <memmove>
  80e4a8:	90c00217 	ldw	r3,8(r18)
  80e4ac:	90800017 	ldw	r2,0(r18)
  80e4b0:	a027883a 	mov	r19,r20
  80e4b4:	1c07c83a 	sub	r3,r3,r16
  80e4b8:	1405883a 	add	r2,r2,r16
  80e4bc:	90c00215 	stw	r3,8(r18)
  80e4c0:	a021883a 	mov	r16,r20
  80e4c4:	90800015 	stw	r2,0(r18)
  80e4c8:	b0800217 	ldw	r2,8(r22)
  80e4cc:	1405c83a 	sub	r2,r2,r16
  80e4d0:	b0800215 	stw	r2,8(r22)
  80e4d4:	103fa826 	beq	r2,zero,80e378 <__sfvwrite_r+0xb0>
  80e4d8:	a469c83a 	sub	r20,r20,r17
  80e4dc:	91c0030b 	ldhu	r7,12(r18)
  80e4e0:	bcef883a 	add	r23,r23,r19
  80e4e4:	a03fbe1e 	bne	r20,zero,80e3e0 <__sfvwrite_r+0x118>
  80e4e8:	adc00017 	ldw	r23,0(r21)
  80e4ec:	ad000117 	ldw	r20,4(r21)
  80e4f0:	ad400204 	addi	r21,r21,8
  80e4f4:	003fb906 	br	80e3dc <__sfvwrite_r+0x114>
  80e4f8:	ac400017 	ldw	r17,0(r21)
  80e4fc:	ac000117 	ldw	r16,4(r21)
  80e500:	ad400204 	addi	r21,r21,8
  80e504:	003f8a06 	br	80e330 <__sfvwrite_r+0x68>
  80e508:	91400417 	ldw	r5,16(r18)
  80e50c:	e009883a 	mov	r4,fp
  80e510:	080dfb40 	call	80dfb4 <_free_r>
  80e514:	00800304 	movi	r2,12
  80e518:	e0800015 	stw	r2,0(fp)
  80e51c:	9080030b 	ldhu	r2,12(r18)
  80e520:	013fffc4 	movi	r4,-1
  80e524:	10801014 	ori	r2,r2,64
  80e528:	9080030d 	sth	r2,12(r18)
  80e52c:	003f9306 	br	80e37c <__sfvwrite_r+0xb4>
  80e530:	0027883a 	mov	r19,zero
  80e534:	002f883a 	mov	r23,zero
  80e538:	d8000015 	stw	zero,0(sp)
  80e53c:	0029883a 	mov	r20,zero
  80e540:	98001e26 	beq	r19,zero,80e5bc <__sfvwrite_r+0x2f4>
  80e544:	d8c00017 	ldw	r3,0(sp)
  80e548:	1804c03a 	cmpne	r2,r3,zero
  80e54c:	10005e26 	beq	r2,zero,80e6c8 <__sfvwrite_r+0x400>
  80e550:	9821883a 	mov	r16,r19
  80e554:	a4c0012e 	bgeu	r20,r19,80e55c <__sfvwrite_r+0x294>
  80e558:	a021883a 	mov	r16,r20
  80e55c:	91000017 	ldw	r4,0(r18)
  80e560:	90800417 	ldw	r2,16(r18)
  80e564:	91800217 	ldw	r6,8(r18)
  80e568:	91c00517 	ldw	r7,20(r18)
  80e56c:	1100022e 	bgeu	r2,r4,80e578 <__sfvwrite_r+0x2b0>
  80e570:	31e3883a 	add	r17,r6,r7
  80e574:	8c001616 	blt	r17,r16,80e5d0 <__sfvwrite_r+0x308>
  80e578:	81c03816 	blt	r16,r7,80e65c <__sfvwrite_r+0x394>
  80e57c:	90c00917 	ldw	r3,36(r18)
  80e580:	91400717 	ldw	r5,28(r18)
  80e584:	e009883a 	mov	r4,fp
  80e588:	b80d883a 	mov	r6,r23
  80e58c:	183ee83a 	callr	r3
  80e590:	1023883a 	mov	r17,r2
  80e594:	00bfe10e 	bge	zero,r2,80e51c <__sfvwrite_r+0x254>
  80e598:	a469c83a 	sub	r20,r20,r17
  80e59c:	a0001826 	beq	r20,zero,80e600 <__sfvwrite_r+0x338>
  80e5a0:	b0800217 	ldw	r2,8(r22)
  80e5a4:	1445c83a 	sub	r2,r2,r17
  80e5a8:	b0800215 	stw	r2,8(r22)
  80e5ac:	103f7226 	beq	r2,zero,80e378 <__sfvwrite_r+0xb0>
  80e5b0:	9c67c83a 	sub	r19,r19,r17
  80e5b4:	bc6f883a 	add	r23,r23,r17
  80e5b8:	983fe21e 	bne	r19,zero,80e544 <__sfvwrite_r+0x27c>
  80e5bc:	adc00017 	ldw	r23,0(r21)
  80e5c0:	acc00117 	ldw	r19,4(r21)
  80e5c4:	ad400204 	addi	r21,r21,8
  80e5c8:	d8000015 	stw	zero,0(sp)
  80e5cc:	003fdc06 	br	80e540 <__sfvwrite_r+0x278>
  80e5d0:	b80b883a 	mov	r5,r23
  80e5d4:	880d883a 	mov	r6,r17
  80e5d8:	080ed340 	call	80ed34 <memmove>
  80e5dc:	90c00017 	ldw	r3,0(r18)
  80e5e0:	e009883a 	mov	r4,fp
  80e5e4:	900b883a 	mov	r5,r18
  80e5e8:	1c47883a 	add	r3,r3,r17
  80e5ec:	90c00015 	stw	r3,0(r18)
  80e5f0:	080d9980 	call	80d998 <_fflush_r>
  80e5f4:	103fc91e 	bne	r2,zero,80e51c <__sfvwrite_r+0x254>
  80e5f8:	a469c83a 	sub	r20,r20,r17
  80e5fc:	a03fe81e 	bne	r20,zero,80e5a0 <__sfvwrite_r+0x2d8>
  80e600:	e009883a 	mov	r4,fp
  80e604:	900b883a 	mov	r5,r18
  80e608:	080d9980 	call	80d998 <_fflush_r>
  80e60c:	103fc31e 	bne	r2,zero,80e51c <__sfvwrite_r+0x254>
  80e610:	d8000015 	stw	zero,0(sp)
  80e614:	003fe206 	br	80e5a0 <__sfvwrite_r+0x2d8>
  80e618:	91000017 	ldw	r4,0(r18)
  80e61c:	90800417 	ldw	r2,16(r18)
  80e620:	1100022e 	bgeu	r2,r4,80e62c <__sfvwrite_r+0x364>
  80e624:	8023883a 	mov	r17,r16
  80e628:	85003136 	bltu	r16,r20,80e6f0 <__sfvwrite_r+0x428>
  80e62c:	91c00517 	ldw	r7,20(r18)
  80e630:	a1c01836 	bltu	r20,r7,80e694 <__sfvwrite_r+0x3cc>
  80e634:	90c00917 	ldw	r3,36(r18)
  80e638:	91400717 	ldw	r5,28(r18)
  80e63c:	e009883a 	mov	r4,fp
  80e640:	b80d883a 	mov	r6,r23
  80e644:	183ee83a 	callr	r3
  80e648:	1021883a 	mov	r16,r2
  80e64c:	00bfb30e 	bge	zero,r2,80e51c <__sfvwrite_r+0x254>
  80e650:	1023883a 	mov	r17,r2
  80e654:	1027883a 	mov	r19,r2
  80e658:	003f9b06 	br	80e4c8 <__sfvwrite_r+0x200>
  80e65c:	b80b883a 	mov	r5,r23
  80e660:	800d883a 	mov	r6,r16
  80e664:	080ed340 	call	80ed34 <memmove>
  80e668:	90c00217 	ldw	r3,8(r18)
  80e66c:	90800017 	ldw	r2,0(r18)
  80e670:	8023883a 	mov	r17,r16
  80e674:	1c07c83a 	sub	r3,r3,r16
  80e678:	1405883a 	add	r2,r2,r16
  80e67c:	90c00215 	stw	r3,8(r18)
  80e680:	90800015 	stw	r2,0(r18)
  80e684:	003fc406 	br	80e598 <__sfvwrite_r+0x2d0>
  80e688:	a00d883a 	mov	r6,r20
  80e68c:	a021883a 	mov	r16,r20
  80e690:	003f8106 	br	80e498 <__sfvwrite_r+0x1d0>
  80e694:	b80b883a 	mov	r5,r23
  80e698:	a00d883a 	mov	r6,r20
  80e69c:	080ed340 	call	80ed34 <memmove>
  80e6a0:	90c00217 	ldw	r3,8(r18)
  80e6a4:	90800017 	ldw	r2,0(r18)
  80e6a8:	a021883a 	mov	r16,r20
  80e6ac:	1d07c83a 	sub	r3,r3,r20
  80e6b0:	1505883a 	add	r2,r2,r20
  80e6b4:	a023883a 	mov	r17,r20
  80e6b8:	a027883a 	mov	r19,r20
  80e6bc:	90c00215 	stw	r3,8(r18)
  80e6c0:	90800015 	stw	r2,0(r18)
  80e6c4:	003f8006 	br	80e4c8 <__sfvwrite_r+0x200>
  80e6c8:	b809883a 	mov	r4,r23
  80e6cc:	01400284 	movi	r5,10
  80e6d0:	980d883a 	mov	r6,r19
  80e6d4:	080ebb00 	call	80ebb0 <memchr>
  80e6d8:	10001726 	beq	r2,zero,80e738 <__sfvwrite_r+0x470>
  80e6dc:	15c5c83a 	sub	r2,r2,r23
  80e6e0:	15000044 	addi	r20,r2,1
  80e6e4:	00800044 	movi	r2,1
  80e6e8:	d8800015 	stw	r2,0(sp)
  80e6ec:	003f9806 	br	80e550 <__sfvwrite_r+0x288>
  80e6f0:	b80b883a 	mov	r5,r23
  80e6f4:	800d883a 	mov	r6,r16
  80e6f8:	080ed340 	call	80ed34 <memmove>
  80e6fc:	90c00017 	ldw	r3,0(r18)
  80e700:	e009883a 	mov	r4,fp
  80e704:	900b883a 	mov	r5,r18
  80e708:	1c07883a 	add	r3,r3,r16
  80e70c:	90c00015 	stw	r3,0(r18)
  80e710:	8027883a 	mov	r19,r16
  80e714:	080d9980 	call	80d998 <_fflush_r>
  80e718:	103f6b26 	beq	r2,zero,80e4c8 <__sfvwrite_r+0x200>
  80e71c:	003f7f06 	br	80e51c <__sfvwrite_r+0x254>
  80e720:	400b883a 	mov	r5,r8
  80e724:	e009883a 	mov	r4,fp
  80e728:	080fea00 	call	80fea0 <_realloc_r>
  80e72c:	103f7626 	beq	r2,zero,80e508 <__sfvwrite_r+0x240>
  80e730:	1023883a 	mov	r17,r2
  80e734:	003f5006 	br	80e478 <__sfvwrite_r+0x1b0>
  80e738:	00c00044 	movi	r3,1
  80e73c:	9d000044 	addi	r20,r19,1
  80e740:	d8c00015 	stw	r3,0(sp)
  80e744:	003f8206 	br	80e550 <__sfvwrite_r+0x288>
  80e748:	9080030b 	ldhu	r2,12(r18)
  80e74c:	00c00244 	movi	r3,9
  80e750:	013fffc4 	movi	r4,-1
  80e754:	10801014 	ori	r2,r2,64
  80e758:	9080030d 	sth	r2,12(r18)
  80e75c:	e0c00015 	stw	r3,0(fp)
  80e760:	003f0606 	br	80e37c <__sfvwrite_r+0xb4>

0080e764 <_fwalk_reent>:
  80e764:	defff704 	addi	sp,sp,-36
  80e768:	dcc00315 	stw	r19,12(sp)
  80e76c:	24c0b804 	addi	r19,r4,736
  80e770:	dd800615 	stw	r22,24(sp)
  80e774:	dd400515 	stw	r21,20(sp)
  80e778:	dfc00815 	stw	ra,32(sp)
  80e77c:	ddc00715 	stw	r23,28(sp)
  80e780:	dd000415 	stw	r20,16(sp)
  80e784:	dc800215 	stw	r18,8(sp)
  80e788:	dc400115 	stw	r17,4(sp)
  80e78c:	dc000015 	stw	r16,0(sp)
  80e790:	202b883a 	mov	r21,r4
  80e794:	282d883a 	mov	r22,r5
  80e798:	080dc200 	call	80dc20 <__sfp_lock_acquire>
  80e79c:	98002126 	beq	r19,zero,80e824 <_fwalk_reent+0xc0>
  80e7a0:	002f883a 	mov	r23,zero
  80e7a4:	9c800117 	ldw	r18,4(r19)
  80e7a8:	9c000217 	ldw	r16,8(r19)
  80e7ac:	90bfffc4 	addi	r2,r18,-1
  80e7b0:	10000d16 	blt	r2,zero,80e7e8 <_fwalk_reent+0x84>
  80e7b4:	0023883a 	mov	r17,zero
  80e7b8:	053fffc4 	movi	r20,-1
  80e7bc:	8080030f 	ldh	r2,12(r16)
  80e7c0:	8c400044 	addi	r17,r17,1
  80e7c4:	10000626 	beq	r2,zero,80e7e0 <_fwalk_reent+0x7c>
  80e7c8:	8080038f 	ldh	r2,14(r16)
  80e7cc:	800b883a 	mov	r5,r16
  80e7d0:	a809883a 	mov	r4,r21
  80e7d4:	15000226 	beq	r2,r20,80e7e0 <_fwalk_reent+0x7c>
  80e7d8:	b03ee83a 	callr	r22
  80e7dc:	b8aeb03a 	or	r23,r23,r2
  80e7e0:	84001704 	addi	r16,r16,92
  80e7e4:	947ff51e 	bne	r18,r17,80e7bc <_fwalk_reent+0x58>
  80e7e8:	9cc00017 	ldw	r19,0(r19)
  80e7ec:	983fed1e 	bne	r19,zero,80e7a4 <_fwalk_reent+0x40>
  80e7f0:	080dc240 	call	80dc24 <__sfp_lock_release>
  80e7f4:	b805883a 	mov	r2,r23
  80e7f8:	dfc00817 	ldw	ra,32(sp)
  80e7fc:	ddc00717 	ldw	r23,28(sp)
  80e800:	dd800617 	ldw	r22,24(sp)
  80e804:	dd400517 	ldw	r21,20(sp)
  80e808:	dd000417 	ldw	r20,16(sp)
  80e80c:	dcc00317 	ldw	r19,12(sp)
  80e810:	dc800217 	ldw	r18,8(sp)
  80e814:	dc400117 	ldw	r17,4(sp)
  80e818:	dc000017 	ldw	r16,0(sp)
  80e81c:	dec00904 	addi	sp,sp,36
  80e820:	f800283a 	ret
  80e824:	002f883a 	mov	r23,zero
  80e828:	003ff106 	br	80e7f0 <_fwalk_reent+0x8c>

0080e82c <_fwalk>:
  80e82c:	defff804 	addi	sp,sp,-32
  80e830:	dcc00315 	stw	r19,12(sp)
  80e834:	24c0b804 	addi	r19,r4,736
  80e838:	dd400515 	stw	r21,20(sp)
  80e83c:	dfc00715 	stw	ra,28(sp)
  80e840:	dd800615 	stw	r22,24(sp)
  80e844:	dd000415 	stw	r20,16(sp)
  80e848:	dc800215 	stw	r18,8(sp)
  80e84c:	dc400115 	stw	r17,4(sp)
  80e850:	dc000015 	stw	r16,0(sp)
  80e854:	282b883a 	mov	r21,r5
  80e858:	080dc200 	call	80dc20 <__sfp_lock_acquire>
  80e85c:	98001f26 	beq	r19,zero,80e8dc <_fwalk+0xb0>
  80e860:	002d883a 	mov	r22,zero
  80e864:	9c800117 	ldw	r18,4(r19)
  80e868:	9c000217 	ldw	r16,8(r19)
  80e86c:	90bfffc4 	addi	r2,r18,-1
  80e870:	10000c16 	blt	r2,zero,80e8a4 <_fwalk+0x78>
  80e874:	0023883a 	mov	r17,zero
  80e878:	053fffc4 	movi	r20,-1
  80e87c:	8080030f 	ldh	r2,12(r16)
  80e880:	8c400044 	addi	r17,r17,1
  80e884:	10000526 	beq	r2,zero,80e89c <_fwalk+0x70>
  80e888:	8080038f 	ldh	r2,14(r16)
  80e88c:	8009883a 	mov	r4,r16
  80e890:	15000226 	beq	r2,r20,80e89c <_fwalk+0x70>
  80e894:	a83ee83a 	callr	r21
  80e898:	b0acb03a 	or	r22,r22,r2
  80e89c:	84001704 	addi	r16,r16,92
  80e8a0:	947ff61e 	bne	r18,r17,80e87c <_fwalk+0x50>
  80e8a4:	9cc00017 	ldw	r19,0(r19)
  80e8a8:	983fee1e 	bne	r19,zero,80e864 <_fwalk+0x38>
  80e8ac:	080dc240 	call	80dc24 <__sfp_lock_release>
  80e8b0:	b005883a 	mov	r2,r22
  80e8b4:	dfc00717 	ldw	ra,28(sp)
  80e8b8:	dd800617 	ldw	r22,24(sp)
  80e8bc:	dd400517 	ldw	r21,20(sp)
  80e8c0:	dd000417 	ldw	r20,16(sp)
  80e8c4:	dcc00317 	ldw	r19,12(sp)
  80e8c8:	dc800217 	ldw	r18,8(sp)
  80e8cc:	dc400117 	ldw	r17,4(sp)
  80e8d0:	dc000017 	ldw	r16,0(sp)
  80e8d4:	dec00804 	addi	sp,sp,32
  80e8d8:	f800283a 	ret
  80e8dc:	002d883a 	mov	r22,zero
  80e8e0:	003ff206 	br	80e8ac <_fwalk+0x80>

0080e8e4 <_gettimeofday_r>:
  80e8e4:	defffd04 	addi	sp,sp,-12
  80e8e8:	dc000015 	stw	r16,0(sp)
  80e8ec:	040020b4 	movhi	r16,130
  80e8f0:	8400ef04 	addi	r16,r16,956
  80e8f4:	dc400115 	stw	r17,4(sp)
  80e8f8:	80000015 	stw	zero,0(r16)
  80e8fc:	2023883a 	mov	r17,r4
  80e900:	2809883a 	mov	r4,r5
  80e904:	300b883a 	mov	r5,r6
  80e908:	dfc00215 	stw	ra,8(sp)
  80e90c:	0811bd40 	call	811bd4 <gettimeofday>
  80e910:	1007883a 	mov	r3,r2
  80e914:	00bfffc4 	movi	r2,-1
  80e918:	18800626 	beq	r3,r2,80e934 <_gettimeofday_r+0x50>
  80e91c:	1805883a 	mov	r2,r3
  80e920:	dfc00217 	ldw	ra,8(sp)
  80e924:	dc400117 	ldw	r17,4(sp)
  80e928:	dc000017 	ldw	r16,0(sp)
  80e92c:	dec00304 	addi	sp,sp,12
  80e930:	f800283a 	ret
  80e934:	80800017 	ldw	r2,0(r16)
  80e938:	103ff826 	beq	r2,zero,80e91c <_gettimeofday_r+0x38>
  80e93c:	88800015 	stw	r2,0(r17)
  80e940:	1805883a 	mov	r2,r3
  80e944:	dfc00217 	ldw	ra,8(sp)
  80e948:	dc400117 	ldw	r17,4(sp)
  80e94c:	dc000017 	ldw	r16,0(sp)
  80e950:	dec00304 	addi	sp,sp,12
  80e954:	f800283a 	ret

0080e958 <__locale_charset>:
  80e958:	d0a00b17 	ldw	r2,-32724(gp)
  80e95c:	f800283a 	ret

0080e960 <_localeconv_r>:
  80e960:	008020b4 	movhi	r2,130
  80e964:	10b24804 	addi	r2,r2,-14048
  80e968:	f800283a 	ret

0080e96c <localeconv>:
  80e96c:	008020b4 	movhi	r2,130
  80e970:	10b9c104 	addi	r2,r2,-6396
  80e974:	11000017 	ldw	r4,0(r2)
  80e978:	080e9601 	jmpi	80e960 <_localeconv_r>

0080e97c <_setlocale_r>:
  80e97c:	defffc04 	addi	sp,sp,-16
  80e980:	00c020b4 	movhi	r3,130
  80e984:	18f21e04 	addi	r3,r3,-14216
  80e988:	dc800215 	stw	r18,8(sp)
  80e98c:	dc400115 	stw	r17,4(sp)
  80e990:	dc000015 	stw	r16,0(sp)
  80e994:	2023883a 	mov	r17,r4
  80e998:	2825883a 	mov	r18,r5
  80e99c:	dfc00315 	stw	ra,12(sp)
  80e9a0:	3021883a 	mov	r16,r6
  80e9a4:	3009883a 	mov	r4,r6
  80e9a8:	180b883a 	mov	r5,r3
  80e9ac:	30000926 	beq	r6,zero,80e9d4 <_setlocale_r+0x58>
  80e9b0:	08106200 	call	810620 <strcmp>
  80e9b4:	8009883a 	mov	r4,r16
  80e9b8:	014020b4 	movhi	r5,130
  80e9bc:	29722f04 	addi	r5,r5,-14148
  80e9c0:	10000b1e 	bne	r2,zero,80e9f0 <_setlocale_r+0x74>
  80e9c4:	8c000d15 	stw	r16,52(r17)
  80e9c8:	8c800c15 	stw	r18,48(r17)
  80e9cc:	00c020b4 	movhi	r3,130
  80e9d0:	18f21e04 	addi	r3,r3,-14216
  80e9d4:	1805883a 	mov	r2,r3
  80e9d8:	dfc00317 	ldw	ra,12(sp)
  80e9dc:	dc800217 	ldw	r18,8(sp)
  80e9e0:	dc400117 	ldw	r17,4(sp)
  80e9e4:	dc000017 	ldw	r16,0(sp)
  80e9e8:	dec00404 	addi	sp,sp,16
  80e9ec:	f800283a 	ret
  80e9f0:	08106200 	call	810620 <strcmp>
  80e9f4:	0007883a 	mov	r3,zero
  80e9f8:	103ff226 	beq	r2,zero,80e9c4 <_setlocale_r+0x48>
  80e9fc:	003ff506 	br	80e9d4 <_setlocale_r+0x58>

0080ea00 <setlocale>:
  80ea00:	018020b4 	movhi	r6,130
  80ea04:	31b9c104 	addi	r6,r6,-6396
  80ea08:	2007883a 	mov	r3,r4
  80ea0c:	31000017 	ldw	r4,0(r6)
  80ea10:	280d883a 	mov	r6,r5
  80ea14:	180b883a 	mov	r5,r3
  80ea18:	080e97c1 	jmpi	80e97c <_setlocale_r>

0080ea1c <__smakebuf_r>:
  80ea1c:	2880030b 	ldhu	r2,12(r5)
  80ea20:	deffed04 	addi	sp,sp,-76
  80ea24:	dc401015 	stw	r17,64(sp)
  80ea28:	1080008c 	andi	r2,r2,2
  80ea2c:	dc000f15 	stw	r16,60(sp)
  80ea30:	dfc01215 	stw	ra,72(sp)
  80ea34:	dc801115 	stw	r18,68(sp)
  80ea38:	2821883a 	mov	r16,r5
  80ea3c:	2023883a 	mov	r17,r4
  80ea40:	10000b26 	beq	r2,zero,80ea70 <__smakebuf_r+0x54>
  80ea44:	28c010c4 	addi	r3,r5,67
  80ea48:	00800044 	movi	r2,1
  80ea4c:	28800515 	stw	r2,20(r5)
  80ea50:	28c00415 	stw	r3,16(r5)
  80ea54:	28c00015 	stw	r3,0(r5)
  80ea58:	dfc01217 	ldw	ra,72(sp)
  80ea5c:	dc801117 	ldw	r18,68(sp)
  80ea60:	dc401017 	ldw	r17,64(sp)
  80ea64:	dc000f17 	ldw	r16,60(sp)
  80ea68:	dec01304 	addi	sp,sp,76
  80ea6c:	f800283a 	ret
  80ea70:	2940038f 	ldh	r5,14(r5)
  80ea74:	28002116 	blt	r5,zero,80eafc <__smakebuf_r+0xe0>
  80ea78:	d80d883a 	mov	r6,sp
  80ea7c:	081099c0 	call	81099c <_fstat_r>
  80ea80:	10001e16 	blt	r2,zero,80eafc <__smakebuf_r+0xe0>
  80ea84:	d8800117 	ldw	r2,4(sp)
  80ea88:	00e00014 	movui	r3,32768
  80ea8c:	113c000c 	andi	r4,r2,61440
  80ea90:	20c03126 	beq	r4,r3,80eb58 <__smakebuf_r+0x13c>
  80ea94:	8080030b 	ldhu	r2,12(r16)
  80ea98:	00c80004 	movi	r3,8192
  80ea9c:	10820014 	ori	r2,r2,2048
  80eaa0:	8080030d 	sth	r2,12(r16)
  80eaa4:	20c01e26 	beq	r4,r3,80eb20 <__smakebuf_r+0x104>
  80eaa8:	04810004 	movi	r18,1024
  80eaac:	8809883a 	mov	r4,r17
  80eab0:	900b883a 	mov	r5,r18
  80eab4:	08097280 	call	809728 <_malloc_r>
  80eab8:	1009883a 	mov	r4,r2
  80eabc:	10003126 	beq	r2,zero,80eb84 <__smakebuf_r+0x168>
  80eac0:	80c0030b 	ldhu	r3,12(r16)
  80eac4:	00802074 	movhi	r2,129
  80eac8:	10b74504 	addi	r2,r2,-8940
  80eacc:	88800f15 	stw	r2,60(r17)
  80ead0:	18c02014 	ori	r3,r3,128
  80ead4:	84800515 	stw	r18,20(r16)
  80ead8:	80c0030d 	sth	r3,12(r16)
  80eadc:	81000415 	stw	r4,16(r16)
  80eae0:	81000015 	stw	r4,0(r16)
  80eae4:	dfc01217 	ldw	ra,72(sp)
  80eae8:	dc801117 	ldw	r18,68(sp)
  80eaec:	dc401017 	ldw	r17,64(sp)
  80eaf0:	dc000f17 	ldw	r16,60(sp)
  80eaf4:	dec01304 	addi	sp,sp,76
  80eaf8:	f800283a 	ret
  80eafc:	80c0030b 	ldhu	r3,12(r16)
  80eb00:	1880200c 	andi	r2,r3,128
  80eb04:	10000426 	beq	r2,zero,80eb18 <__smakebuf_r+0xfc>
  80eb08:	04801004 	movi	r18,64
  80eb0c:	18820014 	ori	r2,r3,2048
  80eb10:	8080030d 	sth	r2,12(r16)
  80eb14:	003fe506 	br	80eaac <__smakebuf_r+0x90>
  80eb18:	04810004 	movi	r18,1024
  80eb1c:	003ffb06 	br	80eb0c <__smakebuf_r+0xf0>
  80eb20:	8140038f 	ldh	r5,14(r16)
  80eb24:	8809883a 	mov	r4,r17
  80eb28:	0810a100 	call	810a10 <_isatty_r>
  80eb2c:	103fde26 	beq	r2,zero,80eaa8 <__smakebuf_r+0x8c>
  80eb30:	8080030b 	ldhu	r2,12(r16)
  80eb34:	80c010c4 	addi	r3,r16,67
  80eb38:	04810004 	movi	r18,1024
  80eb3c:	10800054 	ori	r2,r2,1
  80eb40:	8080030d 	sth	r2,12(r16)
  80eb44:	00800044 	movi	r2,1
  80eb48:	80c00415 	stw	r3,16(r16)
  80eb4c:	80800515 	stw	r2,20(r16)
  80eb50:	80c00015 	stw	r3,0(r16)
  80eb54:	003fd506 	br	80eaac <__smakebuf_r+0x90>
  80eb58:	80c00a17 	ldw	r3,40(r16)
  80eb5c:	00802074 	movhi	r2,129
  80eb60:	10813704 	addi	r2,r2,1244
  80eb64:	18bfcb1e 	bne	r3,r2,80ea94 <__smakebuf_r+0x78>
  80eb68:	8080030b 	ldhu	r2,12(r16)
  80eb6c:	00c10004 	movi	r3,1024
  80eb70:	1825883a 	mov	r18,r3
  80eb74:	10c4b03a 	or	r2,r2,r3
  80eb78:	8080030d 	sth	r2,12(r16)
  80eb7c:	80c01315 	stw	r3,76(r16)
  80eb80:	003fca06 	br	80eaac <__smakebuf_r+0x90>
  80eb84:	8100030b 	ldhu	r4,12(r16)
  80eb88:	2080800c 	andi	r2,r4,512
  80eb8c:	103fb21e 	bne	r2,zero,80ea58 <__smakebuf_r+0x3c>
  80eb90:	80c010c4 	addi	r3,r16,67
  80eb94:	21000094 	ori	r4,r4,2
  80eb98:	00800044 	movi	r2,1
  80eb9c:	80800515 	stw	r2,20(r16)
  80eba0:	8100030d 	sth	r4,12(r16)
  80eba4:	80c00415 	stw	r3,16(r16)
  80eba8:	80c00015 	stw	r3,0(r16)
  80ebac:	003faa06 	br	80ea58 <__smakebuf_r+0x3c>

0080ebb0 <memchr>:
  80ebb0:	008000c4 	movi	r2,3
  80ebb4:	29403fcc 	andi	r5,r5,255
  80ebb8:	2007883a 	mov	r3,r4
  80ebbc:	1180022e 	bgeu	r2,r6,80ebc8 <memchr+0x18>
  80ebc0:	2084703a 	and	r2,r4,r2
  80ebc4:	10000b26 	beq	r2,zero,80ebf4 <memchr+0x44>
  80ebc8:	313fffc4 	addi	r4,r6,-1
  80ebcc:	3000051e 	bne	r6,zero,80ebe4 <memchr+0x34>
  80ebd0:	00002c06 	br	80ec84 <memchr+0xd4>
  80ebd4:	213fffc4 	addi	r4,r4,-1
  80ebd8:	00bfffc4 	movi	r2,-1
  80ebdc:	18c00044 	addi	r3,r3,1
  80ebe0:	20802826 	beq	r4,r2,80ec84 <memchr+0xd4>
  80ebe4:	18800003 	ldbu	r2,0(r3)
  80ebe8:	28bffa1e 	bne	r5,r2,80ebd4 <memchr+0x24>
  80ebec:	1805883a 	mov	r2,r3
  80ebf0:	f800283a 	ret
  80ebf4:	0011883a 	mov	r8,zero
  80ebf8:	0007883a 	mov	r3,zero
  80ebfc:	01c00104 	movi	r7,4
  80ec00:	4004923a 	slli	r2,r8,8
  80ec04:	18c00044 	addi	r3,r3,1
  80ec08:	1151883a 	add	r8,r2,r5
  80ec0c:	19fffc1e 	bne	r3,r7,80ec00 <memchr+0x50>
  80ec10:	02bfbff4 	movhi	r10,65279
  80ec14:	52bfbfc4 	addi	r10,r10,-257
  80ec18:	02602074 	movhi	r9,32897
  80ec1c:	4a602004 	addi	r9,r9,-32640
  80ec20:	02c000c4 	movi	r11,3
  80ec24:	20800017 	ldw	r2,0(r4)
  80ec28:	31bfff04 	addi	r6,r6,-4
  80ec2c:	200f883a 	mov	r7,r4
  80ec30:	1204f03a 	xor	r2,r2,r8
  80ec34:	1287883a 	add	r3,r2,r10
  80ec38:	1a46703a 	and	r3,r3,r9
  80ec3c:	0084303a 	nor	r2,zero,r2
  80ec40:	10c4703a 	and	r2,r2,r3
  80ec44:	10000b26 	beq	r2,zero,80ec74 <memchr+0xc4>
  80ec48:	20800003 	ldbu	r2,0(r4)
  80ec4c:	28800f26 	beq	r5,r2,80ec8c <memchr+0xdc>
  80ec50:	20800043 	ldbu	r2,1(r4)
  80ec54:	21c00044 	addi	r7,r4,1
  80ec58:	28800c26 	beq	r5,r2,80ec8c <memchr+0xdc>
  80ec5c:	20800083 	ldbu	r2,2(r4)
  80ec60:	21c00084 	addi	r7,r4,2
  80ec64:	28800926 	beq	r5,r2,80ec8c <memchr+0xdc>
  80ec68:	208000c3 	ldbu	r2,3(r4)
  80ec6c:	21c000c4 	addi	r7,r4,3
  80ec70:	28800626 	beq	r5,r2,80ec8c <memchr+0xdc>
  80ec74:	21000104 	addi	r4,r4,4
  80ec78:	59bfea36 	bltu	r11,r6,80ec24 <memchr+0x74>
  80ec7c:	2007883a 	mov	r3,r4
  80ec80:	003fd106 	br	80ebc8 <memchr+0x18>
  80ec84:	0005883a 	mov	r2,zero
  80ec88:	f800283a 	ret
  80ec8c:	3805883a 	mov	r2,r7
  80ec90:	f800283a 	ret

0080ec94 <memcpy>:
  80ec94:	01c003c4 	movi	r7,15
  80ec98:	2007883a 	mov	r3,r4
  80ec9c:	3980032e 	bgeu	r7,r6,80ecac <memcpy+0x18>
  80eca0:	2904b03a 	or	r2,r5,r4
  80eca4:	108000cc 	andi	r2,r2,3
  80eca8:	10000926 	beq	r2,zero,80ecd0 <memcpy+0x3c>
  80ecac:	30000626 	beq	r6,zero,80ecc8 <memcpy+0x34>
  80ecb0:	30cd883a 	add	r6,r6,r3
  80ecb4:	28800003 	ldbu	r2,0(r5)
  80ecb8:	29400044 	addi	r5,r5,1
  80ecbc:	18800005 	stb	r2,0(r3)
  80ecc0:	18c00044 	addi	r3,r3,1
  80ecc4:	30fffb1e 	bne	r6,r3,80ecb4 <memcpy+0x20>
  80ecc8:	2005883a 	mov	r2,r4
  80eccc:	f800283a 	ret
  80ecd0:	3811883a 	mov	r8,r7
  80ecd4:	200f883a 	mov	r7,r4
  80ecd8:	28c00017 	ldw	r3,0(r5)
  80ecdc:	31bffc04 	addi	r6,r6,-16
  80ece0:	38c00015 	stw	r3,0(r7)
  80ece4:	28800117 	ldw	r2,4(r5)
  80ece8:	38800115 	stw	r2,4(r7)
  80ecec:	28c00217 	ldw	r3,8(r5)
  80ecf0:	38c00215 	stw	r3,8(r7)
  80ecf4:	28800317 	ldw	r2,12(r5)
  80ecf8:	29400404 	addi	r5,r5,16
  80ecfc:	38800315 	stw	r2,12(r7)
  80ed00:	39c00404 	addi	r7,r7,16
  80ed04:	41bff436 	bltu	r8,r6,80ecd8 <memcpy+0x44>
  80ed08:	008000c4 	movi	r2,3
  80ed0c:	1180072e 	bgeu	r2,r6,80ed2c <memcpy+0x98>
  80ed10:	1007883a 	mov	r3,r2
  80ed14:	28800017 	ldw	r2,0(r5)
  80ed18:	31bfff04 	addi	r6,r6,-4
  80ed1c:	29400104 	addi	r5,r5,4
  80ed20:	38800015 	stw	r2,0(r7)
  80ed24:	39c00104 	addi	r7,r7,4
  80ed28:	19bffa36 	bltu	r3,r6,80ed14 <memcpy+0x80>
  80ed2c:	3807883a 	mov	r3,r7
  80ed30:	003fde06 	br	80ecac <memcpy+0x18>

0080ed34 <memmove>:
  80ed34:	2807883a 	mov	r3,r5
  80ed38:	2011883a 	mov	r8,r4
  80ed3c:	29000c2e 	bgeu	r5,r4,80ed70 <memmove+0x3c>
  80ed40:	298f883a 	add	r7,r5,r6
  80ed44:	21c00a2e 	bgeu	r4,r7,80ed70 <memmove+0x3c>
  80ed48:	30000726 	beq	r6,zero,80ed68 <memmove+0x34>
  80ed4c:	2187883a 	add	r3,r4,r6
  80ed50:	198dc83a 	sub	r6,r3,r6
  80ed54:	39ffffc4 	addi	r7,r7,-1
  80ed58:	38800003 	ldbu	r2,0(r7)
  80ed5c:	18ffffc4 	addi	r3,r3,-1
  80ed60:	18800005 	stb	r2,0(r3)
  80ed64:	19bffb1e 	bne	r3,r6,80ed54 <memmove+0x20>
  80ed68:	2005883a 	mov	r2,r4
  80ed6c:	f800283a 	ret
  80ed70:	01c003c4 	movi	r7,15
  80ed74:	39800a36 	bltu	r7,r6,80eda0 <memmove+0x6c>
  80ed78:	303ffb26 	beq	r6,zero,80ed68 <memmove+0x34>
  80ed7c:	400f883a 	mov	r7,r8
  80ed80:	320d883a 	add	r6,r6,r8
  80ed84:	28800003 	ldbu	r2,0(r5)
  80ed88:	29400044 	addi	r5,r5,1
  80ed8c:	38800005 	stb	r2,0(r7)
  80ed90:	39c00044 	addi	r7,r7,1
  80ed94:	39bffb1e 	bne	r7,r6,80ed84 <memmove+0x50>
  80ed98:	2005883a 	mov	r2,r4
  80ed9c:	f800283a 	ret
  80eda0:	1904b03a 	or	r2,r3,r4
  80eda4:	108000cc 	andi	r2,r2,3
  80eda8:	103ff31e 	bne	r2,zero,80ed78 <memmove+0x44>
  80edac:	3811883a 	mov	r8,r7
  80edb0:	180b883a 	mov	r5,r3
  80edb4:	200f883a 	mov	r7,r4
  80edb8:	28c00017 	ldw	r3,0(r5)
  80edbc:	31bffc04 	addi	r6,r6,-16
  80edc0:	38c00015 	stw	r3,0(r7)
  80edc4:	28800117 	ldw	r2,4(r5)
  80edc8:	38800115 	stw	r2,4(r7)
  80edcc:	28c00217 	ldw	r3,8(r5)
  80edd0:	38c00215 	stw	r3,8(r7)
  80edd4:	28800317 	ldw	r2,12(r5)
  80edd8:	29400404 	addi	r5,r5,16
  80eddc:	38800315 	stw	r2,12(r7)
  80ede0:	39c00404 	addi	r7,r7,16
  80ede4:	41bff436 	bltu	r8,r6,80edb8 <memmove+0x84>
  80ede8:	008000c4 	movi	r2,3
  80edec:	1180072e 	bgeu	r2,r6,80ee0c <memmove+0xd8>
  80edf0:	1007883a 	mov	r3,r2
  80edf4:	28800017 	ldw	r2,0(r5)
  80edf8:	31bfff04 	addi	r6,r6,-4
  80edfc:	29400104 	addi	r5,r5,4
  80ee00:	38800015 	stw	r2,0(r7)
  80ee04:	39c00104 	addi	r7,r7,4
  80ee08:	19bffa36 	bltu	r3,r6,80edf4 <memmove+0xc0>
  80ee0c:	3811883a 	mov	r8,r7
  80ee10:	003fd906 	br	80ed78 <memmove+0x44>

0080ee14 <memset>:
  80ee14:	008000c4 	movi	r2,3
  80ee18:	29403fcc 	andi	r5,r5,255
  80ee1c:	2007883a 	mov	r3,r4
  80ee20:	1180022e 	bgeu	r2,r6,80ee2c <memset+0x18>
  80ee24:	2084703a 	and	r2,r4,r2
  80ee28:	10000826 	beq	r2,zero,80ee4c <memset+0x38>
  80ee2c:	30000526 	beq	r6,zero,80ee44 <memset+0x30>
  80ee30:	2805883a 	mov	r2,r5
  80ee34:	30cd883a 	add	r6,r6,r3
  80ee38:	18800005 	stb	r2,0(r3)
  80ee3c:	18c00044 	addi	r3,r3,1
  80ee40:	19bffd1e 	bne	r3,r6,80ee38 <memset+0x24>
  80ee44:	2005883a 	mov	r2,r4
  80ee48:	f800283a 	ret
  80ee4c:	2804923a 	slli	r2,r5,8
  80ee50:	020003c4 	movi	r8,15
  80ee54:	200f883a 	mov	r7,r4
  80ee58:	2884b03a 	or	r2,r5,r2
  80ee5c:	1006943a 	slli	r3,r2,16
  80ee60:	10c6b03a 	or	r3,r2,r3
  80ee64:	41800a2e 	bgeu	r8,r6,80ee90 <memset+0x7c>
  80ee68:	4005883a 	mov	r2,r8
  80ee6c:	31bffc04 	addi	r6,r6,-16
  80ee70:	38c00015 	stw	r3,0(r7)
  80ee74:	38c00115 	stw	r3,4(r7)
  80ee78:	38c00215 	stw	r3,8(r7)
  80ee7c:	38c00315 	stw	r3,12(r7)
  80ee80:	39c00404 	addi	r7,r7,16
  80ee84:	11bff936 	bltu	r2,r6,80ee6c <memset+0x58>
  80ee88:	008000c4 	movi	r2,3
  80ee8c:	1180052e 	bgeu	r2,r6,80eea4 <memset+0x90>
  80ee90:	31bfff04 	addi	r6,r6,-4
  80ee94:	008000c4 	movi	r2,3
  80ee98:	38c00015 	stw	r3,0(r7)
  80ee9c:	39c00104 	addi	r7,r7,4
  80eea0:	11bffb36 	bltu	r2,r6,80ee90 <memset+0x7c>
  80eea4:	3807883a 	mov	r3,r7
  80eea8:	003fe006 	br	80ee2c <memset+0x18>

0080eeac <_Bfree>:
  80eeac:	28000826 	beq	r5,zero,80eed0 <_Bfree+0x24>
  80eeb0:	28800117 	ldw	r2,4(r5)
  80eeb4:	21001317 	ldw	r4,76(r4)
  80eeb8:	1085883a 	add	r2,r2,r2
  80eebc:	1085883a 	add	r2,r2,r2
  80eec0:	1105883a 	add	r2,r2,r4
  80eec4:	10c00017 	ldw	r3,0(r2)
  80eec8:	28c00015 	stw	r3,0(r5)
  80eecc:	11400015 	stw	r5,0(r2)
  80eed0:	f800283a 	ret

0080eed4 <__hi0bits>:
  80eed4:	20bfffec 	andhi	r2,r4,65535
  80eed8:	10001426 	beq	r2,zero,80ef2c <__hi0bits+0x58>
  80eedc:	0007883a 	mov	r3,zero
  80eee0:	20bfc02c 	andhi	r2,r4,65280
  80eee4:	1000021e 	bne	r2,zero,80eef0 <__hi0bits+0x1c>
  80eee8:	2008923a 	slli	r4,r4,8
  80eeec:	18c00204 	addi	r3,r3,8
  80eef0:	20bc002c 	andhi	r2,r4,61440
  80eef4:	1000021e 	bne	r2,zero,80ef00 <__hi0bits+0x2c>
  80eef8:	2008913a 	slli	r4,r4,4
  80eefc:	18c00104 	addi	r3,r3,4
  80ef00:	20b0002c 	andhi	r2,r4,49152
  80ef04:	1000031e 	bne	r2,zero,80ef14 <__hi0bits+0x40>
  80ef08:	2105883a 	add	r2,r4,r4
  80ef0c:	18c00084 	addi	r3,r3,2
  80ef10:	1089883a 	add	r4,r2,r2
  80ef14:	20000316 	blt	r4,zero,80ef24 <__hi0bits+0x50>
  80ef18:	2090002c 	andhi	r2,r4,16384
  80ef1c:	10000626 	beq	r2,zero,80ef38 <__hi0bits+0x64>
  80ef20:	18c00044 	addi	r3,r3,1
  80ef24:	1805883a 	mov	r2,r3
  80ef28:	f800283a 	ret
  80ef2c:	2008943a 	slli	r4,r4,16
  80ef30:	00c00404 	movi	r3,16
  80ef34:	003fea06 	br	80eee0 <__hi0bits+0xc>
  80ef38:	00c00804 	movi	r3,32
  80ef3c:	1805883a 	mov	r2,r3
  80ef40:	f800283a 	ret

0080ef44 <__lo0bits>:
  80ef44:	20c00017 	ldw	r3,0(r4)
  80ef48:	188001cc 	andi	r2,r3,7
  80ef4c:	10000a26 	beq	r2,zero,80ef78 <__lo0bits+0x34>
  80ef50:	1880004c 	andi	r2,r3,1
  80ef54:	1005003a 	cmpeq	r2,r2,zero
  80ef58:	10002126 	beq	r2,zero,80efe0 <__lo0bits+0x9c>
  80ef5c:	1880008c 	andi	r2,r3,2
  80ef60:	1000251e 	bne	r2,zero,80eff8 <__lo0bits+0xb4>
  80ef64:	1804d0ba 	srli	r2,r3,2
  80ef68:	01400084 	movi	r5,2
  80ef6c:	20800015 	stw	r2,0(r4)
  80ef70:	2805883a 	mov	r2,r5
  80ef74:	f800283a 	ret
  80ef78:	18bfffcc 	andi	r2,r3,65535
  80ef7c:	10001526 	beq	r2,zero,80efd4 <__lo0bits+0x90>
  80ef80:	000b883a 	mov	r5,zero
  80ef84:	18803fcc 	andi	r2,r3,255
  80ef88:	1000021e 	bne	r2,zero,80ef94 <__lo0bits+0x50>
  80ef8c:	1806d23a 	srli	r3,r3,8
  80ef90:	29400204 	addi	r5,r5,8
  80ef94:	188003cc 	andi	r2,r3,15
  80ef98:	1000021e 	bne	r2,zero,80efa4 <__lo0bits+0x60>
  80ef9c:	1806d13a 	srli	r3,r3,4
  80efa0:	29400104 	addi	r5,r5,4
  80efa4:	188000cc 	andi	r2,r3,3
  80efa8:	1000021e 	bne	r2,zero,80efb4 <__lo0bits+0x70>
  80efac:	1806d0ba 	srli	r3,r3,2
  80efb0:	29400084 	addi	r5,r5,2
  80efb4:	1880004c 	andi	r2,r3,1
  80efb8:	1000031e 	bne	r2,zero,80efc8 <__lo0bits+0x84>
  80efbc:	1806d07a 	srli	r3,r3,1
  80efc0:	18000a26 	beq	r3,zero,80efec <__lo0bits+0xa8>
  80efc4:	29400044 	addi	r5,r5,1
  80efc8:	2805883a 	mov	r2,r5
  80efcc:	20c00015 	stw	r3,0(r4)
  80efd0:	f800283a 	ret
  80efd4:	1806d43a 	srli	r3,r3,16
  80efd8:	01400404 	movi	r5,16
  80efdc:	003fe906 	br	80ef84 <__lo0bits+0x40>
  80efe0:	000b883a 	mov	r5,zero
  80efe4:	2805883a 	mov	r2,r5
  80efe8:	f800283a 	ret
  80efec:	01400804 	movi	r5,32
  80eff0:	2805883a 	mov	r2,r5
  80eff4:	f800283a 	ret
  80eff8:	1804d07a 	srli	r2,r3,1
  80effc:	01400044 	movi	r5,1
  80f000:	20800015 	stw	r2,0(r4)
  80f004:	003fda06 	br	80ef70 <__lo0bits+0x2c>

0080f008 <__mcmp>:
  80f008:	20800417 	ldw	r2,16(r4)
  80f00c:	28c00417 	ldw	r3,16(r5)
  80f010:	10cfc83a 	sub	r7,r2,r3
  80f014:	38000c1e 	bne	r7,zero,80f048 <__mcmp+0x40>
  80f018:	18c5883a 	add	r2,r3,r3
  80f01c:	1085883a 	add	r2,r2,r2
  80f020:	10c00504 	addi	r3,r2,20
  80f024:	21000504 	addi	r4,r4,20
  80f028:	28cb883a 	add	r5,r5,r3
  80f02c:	2085883a 	add	r2,r4,r2
  80f030:	10bfff04 	addi	r2,r2,-4
  80f034:	297fff04 	addi	r5,r5,-4
  80f038:	11800017 	ldw	r6,0(r2)
  80f03c:	28c00017 	ldw	r3,0(r5)
  80f040:	30c0031e 	bne	r6,r3,80f050 <__mcmp+0x48>
  80f044:	20bffa36 	bltu	r4,r2,80f030 <__mcmp+0x28>
  80f048:	3805883a 	mov	r2,r7
  80f04c:	f800283a 	ret
  80f050:	30c00336 	bltu	r6,r3,80f060 <__mcmp+0x58>
  80f054:	01c00044 	movi	r7,1
  80f058:	3805883a 	mov	r2,r7
  80f05c:	f800283a 	ret
  80f060:	01ffffc4 	movi	r7,-1
  80f064:	003ff806 	br	80f048 <__mcmp+0x40>

0080f068 <__ulp>:
  80f068:	295ffc2c 	andhi	r5,r5,32752
  80f06c:	013f3034 	movhi	r4,64704
  80f070:	290b883a 	add	r5,r5,r4
  80f074:	0145c83a 	sub	r2,zero,r5
  80f078:	1007d53a 	srai	r3,r2,20
  80f07c:	000d883a 	mov	r6,zero
  80f080:	0140040e 	bge	zero,r5,80f094 <__ulp+0x2c>
  80f084:	280f883a 	mov	r7,r5
  80f088:	3807883a 	mov	r3,r7
  80f08c:	3005883a 	mov	r2,r6
  80f090:	f800283a 	ret
  80f094:	008004c4 	movi	r2,19
  80f098:	193ffb04 	addi	r4,r3,-20
  80f09c:	10c00c0e 	bge	r2,r3,80f0d0 <__ulp+0x68>
  80f0a0:	008007c4 	movi	r2,31
  80f0a4:	1107c83a 	sub	r3,r2,r4
  80f0a8:	00800784 	movi	r2,30
  80f0ac:	01400044 	movi	r5,1
  80f0b0:	11000216 	blt	r2,r4,80f0bc <__ulp+0x54>
  80f0b4:	00800044 	movi	r2,1
  80f0b8:	10ca983a 	sll	r5,r2,r3
  80f0bc:	000f883a 	mov	r7,zero
  80f0c0:	280d883a 	mov	r6,r5
  80f0c4:	3807883a 	mov	r3,r7
  80f0c8:	3005883a 	mov	r2,r6
  80f0cc:	f800283a 	ret
  80f0d0:	00800234 	movhi	r2,8
  80f0d4:	10cfd83a 	sra	r7,r2,r3
  80f0d8:	000d883a 	mov	r6,zero
  80f0dc:	3005883a 	mov	r2,r6
  80f0e0:	3807883a 	mov	r3,r7
  80f0e4:	f800283a 	ret

0080f0e8 <__b2d>:
  80f0e8:	20800417 	ldw	r2,16(r4)
  80f0ec:	defff904 	addi	sp,sp,-28
  80f0f0:	dd000415 	stw	r20,16(sp)
  80f0f4:	1085883a 	add	r2,r2,r2
  80f0f8:	25000504 	addi	r20,r4,20
  80f0fc:	1085883a 	add	r2,r2,r2
  80f100:	dc000015 	stw	r16,0(sp)
  80f104:	a0a1883a 	add	r16,r20,r2
  80f108:	dd400515 	stw	r21,20(sp)
  80f10c:	857fff17 	ldw	r21,-4(r16)
  80f110:	dc400115 	stw	r17,4(sp)
  80f114:	dfc00615 	stw	ra,24(sp)
  80f118:	a809883a 	mov	r4,r21
  80f11c:	2823883a 	mov	r17,r5
  80f120:	dcc00315 	stw	r19,12(sp)
  80f124:	dc800215 	stw	r18,8(sp)
  80f128:	080eed40 	call	80eed4 <__hi0bits>
  80f12c:	100b883a 	mov	r5,r2
  80f130:	00800804 	movi	r2,32
  80f134:	1145c83a 	sub	r2,r2,r5
  80f138:	88800015 	stw	r2,0(r17)
  80f13c:	00800284 	movi	r2,10
  80f140:	80ffff04 	addi	r3,r16,-4
  80f144:	11401416 	blt	r2,r5,80f198 <__b2d+0xb0>
  80f148:	008002c4 	movi	r2,11
  80f14c:	1149c83a 	sub	r4,r2,r5
  80f150:	a0c02736 	bltu	r20,r3,80f1f0 <__b2d+0x108>
  80f154:	000d883a 	mov	r6,zero
  80f158:	28800544 	addi	r2,r5,21
  80f15c:	a906d83a 	srl	r3,r21,r4
  80f160:	a884983a 	sll	r2,r21,r2
  80f164:	1ccffc34 	orhi	r19,r3,16368
  80f168:	11a4b03a 	or	r18,r2,r6
  80f16c:	9005883a 	mov	r2,r18
  80f170:	9807883a 	mov	r3,r19
  80f174:	dfc00617 	ldw	ra,24(sp)
  80f178:	dd400517 	ldw	r21,20(sp)
  80f17c:	dd000417 	ldw	r20,16(sp)
  80f180:	dcc00317 	ldw	r19,12(sp)
  80f184:	dc800217 	ldw	r18,8(sp)
  80f188:	dc400117 	ldw	r17,4(sp)
  80f18c:	dc000017 	ldw	r16,0(sp)
  80f190:	dec00704 	addi	sp,sp,28
  80f194:	f800283a 	ret
  80f198:	a0c00e36 	bltu	r20,r3,80f1d4 <__b2d+0xec>
  80f19c:	293ffd44 	addi	r4,r5,-11
  80f1a0:	000d883a 	mov	r6,zero
  80f1a4:	20000f26 	beq	r4,zero,80f1e4 <__b2d+0xfc>
  80f1a8:	00800804 	movi	r2,32
  80f1ac:	110bc83a 	sub	r5,r2,r4
  80f1b0:	a0c01236 	bltu	r20,r3,80f1fc <__b2d+0x114>
  80f1b4:	000f883a 	mov	r7,zero
  80f1b8:	a904983a 	sll	r2,r21,r4
  80f1bc:	3146d83a 	srl	r3,r6,r5
  80f1c0:	3108983a 	sll	r4,r6,r4
  80f1c4:	108ffc34 	orhi	r2,r2,16368
  80f1c8:	18a6b03a 	or	r19,r3,r2
  80f1cc:	3924b03a 	or	r18,r7,r4
  80f1d0:	003fe606 	br	80f16c <__b2d+0x84>
  80f1d4:	293ffd44 	addi	r4,r5,-11
  80f1d8:	81bffe17 	ldw	r6,-8(r16)
  80f1dc:	80fffe04 	addi	r3,r16,-8
  80f1e0:	203ff11e 	bne	r4,zero,80f1a8 <__b2d+0xc0>
  80f1e4:	accffc34 	orhi	r19,r21,16368
  80f1e8:	3025883a 	mov	r18,r6
  80f1ec:	003fdf06 	br	80f16c <__b2d+0x84>
  80f1f0:	18bfff17 	ldw	r2,-4(r3)
  80f1f4:	110cd83a 	srl	r6,r2,r4
  80f1f8:	003fd706 	br	80f158 <__b2d+0x70>
  80f1fc:	18bfff17 	ldw	r2,-4(r3)
  80f200:	114ed83a 	srl	r7,r2,r5
  80f204:	003fec06 	br	80f1b8 <__b2d+0xd0>

0080f208 <__ratio>:
  80f208:	defff904 	addi	sp,sp,-28
  80f20c:	dc400215 	stw	r17,8(sp)
  80f210:	2823883a 	mov	r17,r5
  80f214:	d80b883a 	mov	r5,sp
  80f218:	dfc00615 	stw	ra,24(sp)
  80f21c:	dd000515 	stw	r20,20(sp)
  80f220:	dcc00415 	stw	r19,16(sp)
  80f224:	dc800315 	stw	r18,12(sp)
  80f228:	2025883a 	mov	r18,r4
  80f22c:	080f0e80 	call	80f0e8 <__b2d>
  80f230:	8809883a 	mov	r4,r17
  80f234:	d9400104 	addi	r5,sp,4
  80f238:	1027883a 	mov	r19,r2
  80f23c:	1829883a 	mov	r20,r3
  80f240:	080f0e80 	call	80f0e8 <__b2d>
  80f244:	89000417 	ldw	r4,16(r17)
  80f248:	91c00417 	ldw	r7,16(r18)
  80f24c:	d9800117 	ldw	r6,4(sp)
  80f250:	180b883a 	mov	r5,r3
  80f254:	390fc83a 	sub	r7,r7,r4
  80f258:	1009883a 	mov	r4,r2
  80f25c:	d8800017 	ldw	r2,0(sp)
  80f260:	380e917a 	slli	r7,r7,5
  80f264:	2011883a 	mov	r8,r4
  80f268:	1185c83a 	sub	r2,r2,r6
  80f26c:	11c5883a 	add	r2,r2,r7
  80f270:	1006953a 	slli	r3,r2,20
  80f274:	2813883a 	mov	r9,r5
  80f278:	00800d0e 	bge	zero,r2,80f2b0 <__ratio+0xa8>
  80f27c:	1d29883a 	add	r20,r3,r20
  80f280:	a00b883a 	mov	r5,r20
  80f284:	480f883a 	mov	r7,r9
  80f288:	9809883a 	mov	r4,r19
  80f28c:	400d883a 	mov	r6,r8
  80f290:	08086480 	call	808648 <__divdf3>
  80f294:	dfc00617 	ldw	ra,24(sp)
  80f298:	dd000517 	ldw	r20,20(sp)
  80f29c:	dcc00417 	ldw	r19,16(sp)
  80f2a0:	dc800317 	ldw	r18,12(sp)
  80f2a4:	dc400217 	ldw	r17,8(sp)
  80f2a8:	dec00704 	addi	sp,sp,28
  80f2ac:	f800283a 	ret
  80f2b0:	28d3c83a 	sub	r9,r5,r3
  80f2b4:	003ff206 	br	80f280 <__ratio+0x78>

0080f2b8 <_mprec_log10>:
  80f2b8:	defffe04 	addi	sp,sp,-8
  80f2bc:	008005c4 	movi	r2,23
  80f2c0:	dc000015 	stw	r16,0(sp)
  80f2c4:	dfc00115 	stw	ra,4(sp)
  80f2c8:	2021883a 	mov	r16,r4
  80f2cc:	11000c16 	blt	r2,r4,80f300 <_mprec_log10+0x48>
  80f2d0:	200490fa 	slli	r2,r4,3
  80f2d4:	00c020b4 	movhi	r3,130
  80f2d8:	18f25404 	addi	r3,r3,-14000
  80f2dc:	10c5883a 	add	r2,r2,r3
  80f2e0:	12400117 	ldw	r9,4(r2)
  80f2e4:	12000017 	ldw	r8,0(r2)
  80f2e8:	4807883a 	mov	r3,r9
  80f2ec:	4005883a 	mov	r2,r8
  80f2f0:	dfc00117 	ldw	ra,4(sp)
  80f2f4:	dc000017 	ldw	r16,0(sp)
  80f2f8:	dec00204 	addi	sp,sp,8
  80f2fc:	f800283a 	ret
  80f300:	0011883a 	mov	r8,zero
  80f304:	024ffc34 	movhi	r9,16368
  80f308:	0005883a 	mov	r2,zero
  80f30c:	00d00934 	movhi	r3,16420
  80f310:	480b883a 	mov	r5,r9
  80f314:	4009883a 	mov	r4,r8
  80f318:	180f883a 	mov	r7,r3
  80f31c:	100d883a 	mov	r6,r2
  80f320:	08082840 	call	808284 <__muldf3>
  80f324:	843fffc4 	addi	r16,r16,-1
  80f328:	1011883a 	mov	r8,r2
  80f32c:	1813883a 	mov	r9,r3
  80f330:	803ff51e 	bne	r16,zero,80f308 <_mprec_log10+0x50>
  80f334:	4005883a 	mov	r2,r8
  80f338:	4807883a 	mov	r3,r9
  80f33c:	dfc00117 	ldw	ra,4(sp)
  80f340:	dc000017 	ldw	r16,0(sp)
  80f344:	dec00204 	addi	sp,sp,8
  80f348:	f800283a 	ret

0080f34c <__copybits>:
  80f34c:	297fffc4 	addi	r5,r5,-1
  80f350:	30800417 	ldw	r2,16(r6)
  80f354:	280bd17a 	srai	r5,r5,5
  80f358:	31800504 	addi	r6,r6,20
  80f35c:	1085883a 	add	r2,r2,r2
  80f360:	294b883a 	add	r5,r5,r5
  80f364:	294b883a 	add	r5,r5,r5
  80f368:	1085883a 	add	r2,r2,r2
  80f36c:	290b883a 	add	r5,r5,r4
  80f370:	3087883a 	add	r3,r6,r2
  80f374:	29400104 	addi	r5,r5,4
  80f378:	30c0052e 	bgeu	r6,r3,80f390 <__copybits+0x44>
  80f37c:	30800017 	ldw	r2,0(r6)
  80f380:	31800104 	addi	r6,r6,4
  80f384:	20800015 	stw	r2,0(r4)
  80f388:	21000104 	addi	r4,r4,4
  80f38c:	30fffb36 	bltu	r6,r3,80f37c <__copybits+0x30>
  80f390:	2140032e 	bgeu	r4,r5,80f3a0 <__copybits+0x54>
  80f394:	20000015 	stw	zero,0(r4)
  80f398:	21000104 	addi	r4,r4,4
  80f39c:	217ffd36 	bltu	r4,r5,80f394 <__copybits+0x48>
  80f3a0:	f800283a 	ret

0080f3a4 <__any_on>:
  80f3a4:	20800417 	ldw	r2,16(r4)
  80f3a8:	2807d17a 	srai	r3,r5,5
  80f3ac:	21000504 	addi	r4,r4,20
  80f3b0:	10c00d0e 	bge	r2,r3,80f3e8 <__any_on+0x44>
  80f3b4:	1085883a 	add	r2,r2,r2
  80f3b8:	1085883a 	add	r2,r2,r2
  80f3bc:	208d883a 	add	r6,r4,r2
  80f3c0:	2180182e 	bgeu	r4,r6,80f424 <__any_on+0x80>
  80f3c4:	30bfff17 	ldw	r2,-4(r6)
  80f3c8:	30ffff04 	addi	r3,r6,-4
  80f3cc:	1000041e 	bne	r2,zero,80f3e0 <__any_on+0x3c>
  80f3d0:	20c0142e 	bgeu	r4,r3,80f424 <__any_on+0x80>
  80f3d4:	18ffff04 	addi	r3,r3,-4
  80f3d8:	18800017 	ldw	r2,0(r3)
  80f3dc:	103ffc26 	beq	r2,zero,80f3d0 <__any_on+0x2c>
  80f3e0:	00800044 	movi	r2,1
  80f3e4:	f800283a 	ret
  80f3e8:	18800a0e 	bge	r3,r2,80f414 <__any_on+0x70>
  80f3ec:	294007cc 	andi	r5,r5,31
  80f3f0:	28000826 	beq	r5,zero,80f414 <__any_on+0x70>
  80f3f4:	18c5883a 	add	r2,r3,r3
  80f3f8:	1085883a 	add	r2,r2,r2
  80f3fc:	208d883a 	add	r6,r4,r2
  80f400:	30c00017 	ldw	r3,0(r6)
  80f404:	1944d83a 	srl	r2,r3,r5
  80f408:	1144983a 	sll	r2,r2,r5
  80f40c:	18bff41e 	bne	r3,r2,80f3e0 <__any_on+0x3c>
  80f410:	003feb06 	br	80f3c0 <__any_on+0x1c>
  80f414:	18c5883a 	add	r2,r3,r3
  80f418:	1085883a 	add	r2,r2,r2
  80f41c:	208d883a 	add	r6,r4,r2
  80f420:	003fe706 	br	80f3c0 <__any_on+0x1c>
  80f424:	0005883a 	mov	r2,zero
  80f428:	f800283a 	ret

0080f42c <_Balloc>:
  80f42c:	20c01317 	ldw	r3,76(r4)
  80f430:	defffb04 	addi	sp,sp,-20
  80f434:	dcc00315 	stw	r19,12(sp)
  80f438:	dc800215 	stw	r18,8(sp)
  80f43c:	dfc00415 	stw	ra,16(sp)
  80f440:	2825883a 	mov	r18,r5
  80f444:	dc400115 	stw	r17,4(sp)
  80f448:	dc000015 	stw	r16,0(sp)
  80f44c:	2027883a 	mov	r19,r4
  80f450:	01800404 	movi	r6,16
  80f454:	01400104 	movi	r5,4
  80f458:	18001726 	beq	r3,zero,80f4b8 <_Balloc+0x8c>
  80f45c:	01400044 	movi	r5,1
  80f460:	9485883a 	add	r2,r18,r18
  80f464:	2ca2983a 	sll	r17,r5,r18
  80f468:	1085883a 	add	r2,r2,r2
  80f46c:	10c7883a 	add	r3,r2,r3
  80f470:	1c000017 	ldw	r16,0(r3)
  80f474:	8c4d883a 	add	r6,r17,r17
  80f478:	318d883a 	add	r6,r6,r6
  80f47c:	9809883a 	mov	r4,r19
  80f480:	31800504 	addi	r6,r6,20
  80f484:	80001226 	beq	r16,zero,80f4d0 <_Balloc+0xa4>
  80f488:	80800017 	ldw	r2,0(r16)
  80f48c:	18800015 	stw	r2,0(r3)
  80f490:	80000415 	stw	zero,16(r16)
  80f494:	80000315 	stw	zero,12(r16)
  80f498:	8005883a 	mov	r2,r16
  80f49c:	dfc00417 	ldw	ra,16(sp)
  80f4a0:	dcc00317 	ldw	r19,12(sp)
  80f4a4:	dc800217 	ldw	r18,8(sp)
  80f4a8:	dc400117 	ldw	r17,4(sp)
  80f4ac:	dc000017 	ldw	r16,0(sp)
  80f4b0:	dec00504 	addi	sp,sp,20
  80f4b4:	f800283a 	ret
  80f4b8:	08107540 	call	810754 <_calloc_r>
  80f4bc:	1007883a 	mov	r3,r2
  80f4c0:	0021883a 	mov	r16,zero
  80f4c4:	98801315 	stw	r2,76(r19)
  80f4c8:	103fe41e 	bne	r2,zero,80f45c <_Balloc+0x30>
  80f4cc:	003ff206 	br	80f498 <_Balloc+0x6c>
  80f4d0:	08107540 	call	810754 <_calloc_r>
  80f4d4:	103ff026 	beq	r2,zero,80f498 <_Balloc+0x6c>
  80f4d8:	1021883a 	mov	r16,r2
  80f4dc:	14800115 	stw	r18,4(r2)
  80f4e0:	14400215 	stw	r17,8(r2)
  80f4e4:	003fea06 	br	80f490 <_Balloc+0x64>

0080f4e8 <__d2b>:
  80f4e8:	defff504 	addi	sp,sp,-44
  80f4ec:	dcc00515 	stw	r19,20(sp)
  80f4f0:	04c00044 	movi	r19,1
  80f4f4:	dc000215 	stw	r16,8(sp)
  80f4f8:	2821883a 	mov	r16,r5
  80f4fc:	980b883a 	mov	r5,r19
  80f500:	ddc00915 	stw	r23,36(sp)
  80f504:	dd800815 	stw	r22,32(sp)
  80f508:	dd400715 	stw	r21,28(sp)
  80f50c:	dd000615 	stw	r20,24(sp)
  80f510:	dc800415 	stw	r18,16(sp)
  80f514:	dc400315 	stw	r17,12(sp)
  80f518:	dfc00a15 	stw	ra,40(sp)
  80f51c:	3023883a 	mov	r17,r6
  80f520:	382d883a 	mov	r22,r7
  80f524:	ddc00b17 	ldw	r23,44(sp)
  80f528:	080f42c0 	call	80f42c <_Balloc>
  80f52c:	1025883a 	mov	r18,r2
  80f530:	00a00034 	movhi	r2,32768
  80f534:	10bfffc4 	addi	r2,r2,-1
  80f538:	8888703a 	and	r4,r17,r2
  80f53c:	202ad53a 	srli	r21,r4,20
  80f540:	00800434 	movhi	r2,16
  80f544:	10bfffc4 	addi	r2,r2,-1
  80f548:	8886703a 	and	r3,r17,r2
  80f54c:	a829003a 	cmpeq	r20,r21,zero
  80f550:	800b883a 	mov	r5,r16
  80f554:	d8c00115 	stw	r3,4(sp)
  80f558:	94000504 	addi	r16,r18,20
  80f55c:	a000021e 	bne	r20,zero,80f568 <__d2b+0x80>
  80f560:	18c00434 	orhi	r3,r3,16
  80f564:	d8c00115 	stw	r3,4(sp)
  80f568:	28002726 	beq	r5,zero,80f608 <__d2b+0x120>
  80f56c:	d809883a 	mov	r4,sp
  80f570:	d9400015 	stw	r5,0(sp)
  80f574:	080ef440 	call	80ef44 <__lo0bits>
  80f578:	100d883a 	mov	r6,r2
  80f57c:	10003526 	beq	r2,zero,80f654 <__d2b+0x16c>
  80f580:	d8c00117 	ldw	r3,4(sp)
  80f584:	00800804 	movi	r2,32
  80f588:	1185c83a 	sub	r2,r2,r6
  80f58c:	d9000017 	ldw	r4,0(sp)
  80f590:	1886983a 	sll	r3,r3,r2
  80f594:	1906b03a 	or	r3,r3,r4
  80f598:	90c00515 	stw	r3,20(r18)
  80f59c:	d8c00117 	ldw	r3,4(sp)
  80f5a0:	1986d83a 	srl	r3,r3,r6
  80f5a4:	d8c00115 	stw	r3,4(sp)
  80f5a8:	180b003a 	cmpeq	r5,r3,zero
  80f5ac:	00800084 	movi	r2,2
  80f5b0:	114bc83a 	sub	r5,r2,r5
  80f5b4:	80c00115 	stw	r3,4(r16)
  80f5b8:	91400415 	stw	r5,16(r18)
  80f5bc:	a0001a1e 	bne	r20,zero,80f628 <__d2b+0x140>
  80f5c0:	3545883a 	add	r2,r6,r21
  80f5c4:	10bef344 	addi	r2,r2,-1075
  80f5c8:	00c00d44 	movi	r3,53
  80f5cc:	b0800015 	stw	r2,0(r22)
  80f5d0:	1987c83a 	sub	r3,r3,r6
  80f5d4:	b8c00015 	stw	r3,0(r23)
  80f5d8:	9005883a 	mov	r2,r18
  80f5dc:	dfc00a17 	ldw	ra,40(sp)
  80f5e0:	ddc00917 	ldw	r23,36(sp)
  80f5e4:	dd800817 	ldw	r22,32(sp)
  80f5e8:	dd400717 	ldw	r21,28(sp)
  80f5ec:	dd000617 	ldw	r20,24(sp)
  80f5f0:	dcc00517 	ldw	r19,20(sp)
  80f5f4:	dc800417 	ldw	r18,16(sp)
  80f5f8:	dc400317 	ldw	r17,12(sp)
  80f5fc:	dc000217 	ldw	r16,8(sp)
  80f600:	dec00b04 	addi	sp,sp,44
  80f604:	f800283a 	ret
  80f608:	d9000104 	addi	r4,sp,4
  80f60c:	080ef440 	call	80ef44 <__lo0bits>
  80f610:	11800804 	addi	r6,r2,32
  80f614:	d8800117 	ldw	r2,4(sp)
  80f618:	94c00415 	stw	r19,16(r18)
  80f61c:	980b883a 	mov	r5,r19
  80f620:	90800515 	stw	r2,20(r18)
  80f624:	a03fe626 	beq	r20,zero,80f5c0 <__d2b+0xd8>
  80f628:	2945883a 	add	r2,r5,r5
  80f62c:	1085883a 	add	r2,r2,r2
  80f630:	1405883a 	add	r2,r2,r16
  80f634:	113fff17 	ldw	r4,-4(r2)
  80f638:	30fef384 	addi	r3,r6,-1074
  80f63c:	2820917a 	slli	r16,r5,5
  80f640:	b0c00015 	stw	r3,0(r22)
  80f644:	080eed40 	call	80eed4 <__hi0bits>
  80f648:	80a1c83a 	sub	r16,r16,r2
  80f64c:	bc000015 	stw	r16,0(r23)
  80f650:	003fe106 	br	80f5d8 <__d2b+0xf0>
  80f654:	d8800017 	ldw	r2,0(sp)
  80f658:	90800515 	stw	r2,20(r18)
  80f65c:	d8c00117 	ldw	r3,4(sp)
  80f660:	003fd106 	br	80f5a8 <__d2b+0xc0>

0080f664 <__mdiff>:
  80f664:	defffb04 	addi	sp,sp,-20
  80f668:	dc000015 	stw	r16,0(sp)
  80f66c:	2821883a 	mov	r16,r5
  80f670:	dc800215 	stw	r18,8(sp)
  80f674:	300b883a 	mov	r5,r6
  80f678:	2025883a 	mov	r18,r4
  80f67c:	8009883a 	mov	r4,r16
  80f680:	dc400115 	stw	r17,4(sp)
  80f684:	dfc00415 	stw	ra,16(sp)
  80f688:	dcc00315 	stw	r19,12(sp)
  80f68c:	3023883a 	mov	r17,r6
  80f690:	080f0080 	call	80f008 <__mcmp>
  80f694:	10004226 	beq	r2,zero,80f7a0 <__mdiff+0x13c>
  80f698:	10005016 	blt	r2,zero,80f7dc <__mdiff+0x178>
  80f69c:	0027883a 	mov	r19,zero
  80f6a0:	81400117 	ldw	r5,4(r16)
  80f6a4:	9009883a 	mov	r4,r18
  80f6a8:	080f42c0 	call	80f42c <_Balloc>
  80f6ac:	1019883a 	mov	r12,r2
  80f6b0:	82800417 	ldw	r10,16(r16)
  80f6b4:	88800417 	ldw	r2,16(r17)
  80f6b8:	81800504 	addi	r6,r16,20
  80f6bc:	5287883a 	add	r3,r10,r10
  80f6c0:	1085883a 	add	r2,r2,r2
  80f6c4:	18c7883a 	add	r3,r3,r3
  80f6c8:	1085883a 	add	r2,r2,r2
  80f6cc:	8a000504 	addi	r8,r17,20
  80f6d0:	64c00315 	stw	r19,12(r12)
  80f6d4:	30db883a 	add	r13,r6,r3
  80f6d8:	4097883a 	add	r11,r8,r2
  80f6dc:	61c00504 	addi	r7,r12,20
  80f6e0:	0013883a 	mov	r9,zero
  80f6e4:	31000017 	ldw	r4,0(r6)
  80f6e8:	41400017 	ldw	r5,0(r8)
  80f6ec:	42000104 	addi	r8,r8,4
  80f6f0:	20bfffcc 	andi	r2,r4,65535
  80f6f4:	28ffffcc 	andi	r3,r5,65535
  80f6f8:	10c5c83a 	sub	r2,r2,r3
  80f6fc:	1245883a 	add	r2,r2,r9
  80f700:	2008d43a 	srli	r4,r4,16
  80f704:	280ad43a 	srli	r5,r5,16
  80f708:	1007d43a 	srai	r3,r2,16
  80f70c:	3880000d 	sth	r2,0(r7)
  80f710:	2149c83a 	sub	r4,r4,r5
  80f714:	20c9883a 	add	r4,r4,r3
  80f718:	3900008d 	sth	r4,2(r7)
  80f71c:	31800104 	addi	r6,r6,4
  80f720:	39c00104 	addi	r7,r7,4
  80f724:	2013d43a 	srai	r9,r4,16
  80f728:	42ffee36 	bltu	r8,r11,80f6e4 <__mdiff+0x80>
  80f72c:	33400c2e 	bgeu	r6,r13,80f760 <__mdiff+0xfc>
  80f730:	30800017 	ldw	r2,0(r6)
  80f734:	31800104 	addi	r6,r6,4
  80f738:	10ffffcc 	andi	r3,r2,65535
  80f73c:	1a47883a 	add	r3,r3,r9
  80f740:	1004d43a 	srli	r2,r2,16
  80f744:	1809d43a 	srai	r4,r3,16
  80f748:	38c0000d 	sth	r3,0(r7)
  80f74c:	1105883a 	add	r2,r2,r4
  80f750:	3880008d 	sth	r2,2(r7)
  80f754:	1013d43a 	srai	r9,r2,16
  80f758:	39c00104 	addi	r7,r7,4
  80f75c:	337ff436 	bltu	r6,r13,80f730 <__mdiff+0xcc>
  80f760:	38bfff17 	ldw	r2,-4(r7)
  80f764:	38ffff04 	addi	r3,r7,-4
  80f768:	1000041e 	bne	r2,zero,80f77c <__mdiff+0x118>
  80f76c:	18ffff04 	addi	r3,r3,-4
  80f770:	18800017 	ldw	r2,0(r3)
  80f774:	52bfffc4 	addi	r10,r10,-1
  80f778:	103ffc26 	beq	r2,zero,80f76c <__mdiff+0x108>
  80f77c:	6005883a 	mov	r2,r12
  80f780:	62800415 	stw	r10,16(r12)
  80f784:	dfc00417 	ldw	ra,16(sp)
  80f788:	dcc00317 	ldw	r19,12(sp)
  80f78c:	dc800217 	ldw	r18,8(sp)
  80f790:	dc400117 	ldw	r17,4(sp)
  80f794:	dc000017 	ldw	r16,0(sp)
  80f798:	dec00504 	addi	sp,sp,20
  80f79c:	f800283a 	ret
  80f7a0:	9009883a 	mov	r4,r18
  80f7a4:	000b883a 	mov	r5,zero
  80f7a8:	080f42c0 	call	80f42c <_Balloc>
  80f7ac:	1019883a 	mov	r12,r2
  80f7b0:	00800044 	movi	r2,1
  80f7b4:	60800415 	stw	r2,16(r12)
  80f7b8:	6005883a 	mov	r2,r12
  80f7bc:	60000515 	stw	zero,20(r12)
  80f7c0:	dfc00417 	ldw	ra,16(sp)
  80f7c4:	dcc00317 	ldw	r19,12(sp)
  80f7c8:	dc800217 	ldw	r18,8(sp)
  80f7cc:	dc400117 	ldw	r17,4(sp)
  80f7d0:	dc000017 	ldw	r16,0(sp)
  80f7d4:	dec00504 	addi	sp,sp,20
  80f7d8:	f800283a 	ret
  80f7dc:	880d883a 	mov	r6,r17
  80f7e0:	04c00044 	movi	r19,1
  80f7e4:	8023883a 	mov	r17,r16
  80f7e8:	3021883a 	mov	r16,r6
  80f7ec:	003fac06 	br	80f6a0 <__mdiff+0x3c>

0080f7f0 <__lshift>:
  80f7f0:	defff904 	addi	sp,sp,-28
  80f7f4:	28800417 	ldw	r2,16(r5)
  80f7f8:	dc000015 	stw	r16,0(sp)
  80f7fc:	3021d17a 	srai	r16,r6,5
  80f800:	28c00217 	ldw	r3,8(r5)
  80f804:	10800044 	addi	r2,r2,1
  80f808:	dc400115 	stw	r17,4(sp)
  80f80c:	80a3883a 	add	r17,r16,r2
  80f810:	dd400515 	stw	r21,20(sp)
  80f814:	dd000415 	stw	r20,16(sp)
  80f818:	dc800215 	stw	r18,8(sp)
  80f81c:	dfc00615 	stw	ra,24(sp)
  80f820:	2825883a 	mov	r18,r5
  80f824:	dcc00315 	stw	r19,12(sp)
  80f828:	3029883a 	mov	r20,r6
  80f82c:	202b883a 	mov	r21,r4
  80f830:	29400117 	ldw	r5,4(r5)
  80f834:	1c40030e 	bge	r3,r17,80f844 <__lshift+0x54>
  80f838:	18c7883a 	add	r3,r3,r3
  80f83c:	29400044 	addi	r5,r5,1
  80f840:	1c7ffd16 	blt	r3,r17,80f838 <__lshift+0x48>
  80f844:	a809883a 	mov	r4,r21
  80f848:	080f42c0 	call	80f42c <_Balloc>
  80f84c:	1027883a 	mov	r19,r2
  80f850:	11400504 	addi	r5,r2,20
  80f854:	0400090e 	bge	zero,r16,80f87c <__lshift+0x8c>
  80f858:	2805883a 	mov	r2,r5
  80f85c:	0007883a 	mov	r3,zero
  80f860:	18c00044 	addi	r3,r3,1
  80f864:	10000015 	stw	zero,0(r2)
  80f868:	10800104 	addi	r2,r2,4
  80f86c:	80fffc1e 	bne	r16,r3,80f860 <__lshift+0x70>
  80f870:	8405883a 	add	r2,r16,r16
  80f874:	1085883a 	add	r2,r2,r2
  80f878:	288b883a 	add	r5,r5,r2
  80f87c:	90800417 	ldw	r2,16(r18)
  80f880:	91000504 	addi	r4,r18,20
  80f884:	a18007cc 	andi	r6,r20,31
  80f888:	1085883a 	add	r2,r2,r2
  80f88c:	1085883a 	add	r2,r2,r2
  80f890:	208f883a 	add	r7,r4,r2
  80f894:	30001e26 	beq	r6,zero,80f910 <__lshift+0x120>
  80f898:	00800804 	movi	r2,32
  80f89c:	1191c83a 	sub	r8,r2,r6
  80f8a0:	0007883a 	mov	r3,zero
  80f8a4:	20800017 	ldw	r2,0(r4)
  80f8a8:	1184983a 	sll	r2,r2,r6
  80f8ac:	1884b03a 	or	r2,r3,r2
  80f8b0:	28800015 	stw	r2,0(r5)
  80f8b4:	20c00017 	ldw	r3,0(r4)
  80f8b8:	21000104 	addi	r4,r4,4
  80f8bc:	29400104 	addi	r5,r5,4
  80f8c0:	1a06d83a 	srl	r3,r3,r8
  80f8c4:	21fff736 	bltu	r4,r7,80f8a4 <__lshift+0xb4>
  80f8c8:	28c00015 	stw	r3,0(r5)
  80f8cc:	18000126 	beq	r3,zero,80f8d4 <__lshift+0xe4>
  80f8d0:	8c400044 	addi	r17,r17,1
  80f8d4:	88bfffc4 	addi	r2,r17,-1
  80f8d8:	98800415 	stw	r2,16(r19)
  80f8dc:	a809883a 	mov	r4,r21
  80f8e0:	900b883a 	mov	r5,r18
  80f8e4:	080eeac0 	call	80eeac <_Bfree>
  80f8e8:	9805883a 	mov	r2,r19
  80f8ec:	dfc00617 	ldw	ra,24(sp)
  80f8f0:	dd400517 	ldw	r21,20(sp)
  80f8f4:	dd000417 	ldw	r20,16(sp)
  80f8f8:	dcc00317 	ldw	r19,12(sp)
  80f8fc:	dc800217 	ldw	r18,8(sp)
  80f900:	dc400117 	ldw	r17,4(sp)
  80f904:	dc000017 	ldw	r16,0(sp)
  80f908:	dec00704 	addi	sp,sp,28
  80f90c:	f800283a 	ret
  80f910:	20800017 	ldw	r2,0(r4)
  80f914:	21000104 	addi	r4,r4,4
  80f918:	28800015 	stw	r2,0(r5)
  80f91c:	29400104 	addi	r5,r5,4
  80f920:	21ffec2e 	bgeu	r4,r7,80f8d4 <__lshift+0xe4>
  80f924:	20800017 	ldw	r2,0(r4)
  80f928:	21000104 	addi	r4,r4,4
  80f92c:	28800015 	stw	r2,0(r5)
  80f930:	29400104 	addi	r5,r5,4
  80f934:	21fff636 	bltu	r4,r7,80f910 <__lshift+0x120>
  80f938:	003fe606 	br	80f8d4 <__lshift+0xe4>

0080f93c <__multiply>:
  80f93c:	defff904 	addi	sp,sp,-28
  80f940:	dcc00315 	stw	r19,12(sp)
  80f944:	dc800215 	stw	r18,8(sp)
  80f948:	2cc00417 	ldw	r19,16(r5)
  80f94c:	34800417 	ldw	r18,16(r6)
  80f950:	dd000415 	stw	r20,16(sp)
  80f954:	dc400115 	stw	r17,4(sp)
  80f958:	dfc00615 	stw	ra,24(sp)
  80f95c:	dd400515 	stw	r21,20(sp)
  80f960:	dc000015 	stw	r16,0(sp)
  80f964:	2823883a 	mov	r17,r5
  80f968:	3029883a 	mov	r20,r6
  80f96c:	9c80040e 	bge	r19,r18,80f980 <__multiply+0x44>
  80f970:	9027883a 	mov	r19,r18
  80f974:	2c800417 	ldw	r18,16(r5)
  80f978:	2829883a 	mov	r20,r5
  80f97c:	3023883a 	mov	r17,r6
  80f980:	88800217 	ldw	r2,8(r17)
  80f984:	9ca1883a 	add	r16,r19,r18
  80f988:	89400117 	ldw	r5,4(r17)
  80f98c:	1400010e 	bge	r2,r16,80f994 <__multiply+0x58>
  80f990:	29400044 	addi	r5,r5,1
  80f994:	080f42c0 	call	80f42c <_Balloc>
  80f998:	102b883a 	mov	r21,r2
  80f99c:	8405883a 	add	r2,r16,r16
  80f9a0:	1085883a 	add	r2,r2,r2
  80f9a4:	a9000504 	addi	r4,r21,20
  80f9a8:	209d883a 	add	r14,r4,r2
  80f9ac:	2380042e 	bgeu	r4,r14,80f9c0 <__multiply+0x84>
  80f9b0:	2005883a 	mov	r2,r4
  80f9b4:	10000015 	stw	zero,0(r2)
  80f9b8:	10800104 	addi	r2,r2,4
  80f9bc:	13bffd36 	bltu	r2,r14,80f9b4 <__multiply+0x78>
  80f9c0:	9485883a 	add	r2,r18,r18
  80f9c4:	9cc7883a 	add	r3,r19,r19
  80f9c8:	a1800504 	addi	r6,r20,20
  80f9cc:	1085883a 	add	r2,r2,r2
  80f9d0:	8b400504 	addi	r13,r17,20
  80f9d4:	18c7883a 	add	r3,r3,r3
  80f9d8:	309f883a 	add	r15,r6,r2
  80f9dc:	68d7883a 	add	r11,r13,r3
  80f9e0:	33c03b2e 	bgeu	r6,r15,80fad0 <__multiply+0x194>
  80f9e4:	2019883a 	mov	r12,r4
  80f9e8:	30800017 	ldw	r2,0(r6)
  80f9ec:	127fffcc 	andi	r9,r2,65535
  80f9f0:	48001826 	beq	r9,zero,80fa54 <__multiply+0x118>
  80f9f4:	6811883a 	mov	r8,r13
  80f9f8:	600f883a 	mov	r7,r12
  80f9fc:	0015883a 	mov	r10,zero
  80fa00:	40c00017 	ldw	r3,0(r8)
  80fa04:	39400017 	ldw	r5,0(r7)
  80fa08:	42000104 	addi	r8,r8,4
  80fa0c:	193fffcc 	andi	r4,r3,65535
  80fa10:	4909383a 	mul	r4,r9,r4
  80fa14:	1806d43a 	srli	r3,r3,16
  80fa18:	28bfffcc 	andi	r2,r5,65535
  80fa1c:	5085883a 	add	r2,r10,r2
  80fa20:	2089883a 	add	r4,r4,r2
  80fa24:	48c7383a 	mul	r3,r9,r3
  80fa28:	280ad43a 	srli	r5,r5,16
  80fa2c:	2004d43a 	srli	r2,r4,16
  80fa30:	3900000d 	sth	r4,0(r7)
  80fa34:	1947883a 	add	r3,r3,r5
  80fa38:	10c5883a 	add	r2,r2,r3
  80fa3c:	3880008d 	sth	r2,2(r7)
  80fa40:	1014d43a 	srli	r10,r2,16
  80fa44:	39c00104 	addi	r7,r7,4
  80fa48:	42ffed36 	bltu	r8,r11,80fa00 <__multiply+0xc4>
  80fa4c:	3a800015 	stw	r10,0(r7)
  80fa50:	30800017 	ldw	r2,0(r6)
  80fa54:	1012d43a 	srli	r9,r2,16
  80fa58:	48001926 	beq	r9,zero,80fac0 <__multiply+0x184>
  80fa5c:	60800017 	ldw	r2,0(r12)
  80fa60:	6811883a 	mov	r8,r13
  80fa64:	600f883a 	mov	r7,r12
  80fa68:	0015883a 	mov	r10,zero
  80fa6c:	100b883a 	mov	r5,r2
  80fa70:	41000017 	ldw	r4,0(r8)
  80fa74:	2806d43a 	srli	r3,r5,16
  80fa78:	3880000d 	sth	r2,0(r7)
  80fa7c:	20bfffcc 	andi	r2,r4,65535
  80fa80:	4885383a 	mul	r2,r9,r2
  80fa84:	50c7883a 	add	r3,r10,r3
  80fa88:	2008d43a 	srli	r4,r4,16
  80fa8c:	10c5883a 	add	r2,r2,r3
  80fa90:	3880008d 	sth	r2,2(r7)
  80fa94:	39c00104 	addi	r7,r7,4
  80fa98:	39400017 	ldw	r5,0(r7)
  80fa9c:	4909383a 	mul	r4,r9,r4
  80faa0:	1004d43a 	srli	r2,r2,16
  80faa4:	28ffffcc 	andi	r3,r5,65535
  80faa8:	20c9883a 	add	r4,r4,r3
  80faac:	1105883a 	add	r2,r2,r4
  80fab0:	42000104 	addi	r8,r8,4
  80fab4:	1014d43a 	srli	r10,r2,16
  80fab8:	42ffed36 	bltu	r8,r11,80fa70 <__multiply+0x134>
  80fabc:	38800015 	stw	r2,0(r7)
  80fac0:	31800104 	addi	r6,r6,4
  80fac4:	33c0022e 	bgeu	r6,r15,80fad0 <__multiply+0x194>
  80fac8:	63000104 	addi	r12,r12,4
  80facc:	003fc606 	br	80f9e8 <__multiply+0xac>
  80fad0:	0400090e 	bge	zero,r16,80faf8 <__multiply+0x1bc>
  80fad4:	70bfff17 	ldw	r2,-4(r14)
  80fad8:	70ffff04 	addi	r3,r14,-4
  80fadc:	10000326 	beq	r2,zero,80faec <__multiply+0x1b0>
  80fae0:	00000506 	br	80faf8 <__multiply+0x1bc>
  80fae4:	18800017 	ldw	r2,0(r3)
  80fae8:	1000031e 	bne	r2,zero,80faf8 <__multiply+0x1bc>
  80faec:	843fffc4 	addi	r16,r16,-1
  80faf0:	18ffff04 	addi	r3,r3,-4
  80faf4:	803ffb1e 	bne	r16,zero,80fae4 <__multiply+0x1a8>
  80faf8:	a805883a 	mov	r2,r21
  80fafc:	ac000415 	stw	r16,16(r21)
  80fb00:	dfc00617 	ldw	ra,24(sp)
  80fb04:	dd400517 	ldw	r21,20(sp)
  80fb08:	dd000417 	ldw	r20,16(sp)
  80fb0c:	dcc00317 	ldw	r19,12(sp)
  80fb10:	dc800217 	ldw	r18,8(sp)
  80fb14:	dc400117 	ldw	r17,4(sp)
  80fb18:	dc000017 	ldw	r16,0(sp)
  80fb1c:	dec00704 	addi	sp,sp,28
  80fb20:	f800283a 	ret

0080fb24 <__i2b>:
  80fb24:	defffd04 	addi	sp,sp,-12
  80fb28:	dc000015 	stw	r16,0(sp)
  80fb2c:	04000044 	movi	r16,1
  80fb30:	dc800115 	stw	r18,4(sp)
  80fb34:	2825883a 	mov	r18,r5
  80fb38:	800b883a 	mov	r5,r16
  80fb3c:	dfc00215 	stw	ra,8(sp)
  80fb40:	080f42c0 	call	80f42c <_Balloc>
  80fb44:	14000415 	stw	r16,16(r2)
  80fb48:	14800515 	stw	r18,20(r2)
  80fb4c:	dfc00217 	ldw	ra,8(sp)
  80fb50:	dc800117 	ldw	r18,4(sp)
  80fb54:	dc000017 	ldw	r16,0(sp)
  80fb58:	dec00304 	addi	sp,sp,12
  80fb5c:	f800283a 	ret

0080fb60 <__multadd>:
  80fb60:	defffa04 	addi	sp,sp,-24
  80fb64:	dc800215 	stw	r18,8(sp)
  80fb68:	2c800417 	ldw	r18,16(r5)
  80fb6c:	dd000415 	stw	r20,16(sp)
  80fb70:	dcc00315 	stw	r19,12(sp)
  80fb74:	dc000015 	stw	r16,0(sp)
  80fb78:	dfc00515 	stw	ra,20(sp)
  80fb7c:	3821883a 	mov	r16,r7
  80fb80:	dc400115 	stw	r17,4(sp)
  80fb84:	2827883a 	mov	r19,r5
  80fb88:	2029883a 	mov	r20,r4
  80fb8c:	2a000504 	addi	r8,r5,20
  80fb90:	000f883a 	mov	r7,zero
  80fb94:	40800017 	ldw	r2,0(r8)
  80fb98:	39c00044 	addi	r7,r7,1
  80fb9c:	10ffffcc 	andi	r3,r2,65535
  80fba0:	1987383a 	mul	r3,r3,r6
  80fba4:	1004d43a 	srli	r2,r2,16
  80fba8:	1c07883a 	add	r3,r3,r16
  80fbac:	180ad43a 	srli	r5,r3,16
  80fbb0:	1185383a 	mul	r2,r2,r6
  80fbb4:	18ffffcc 	andi	r3,r3,65535
  80fbb8:	1145883a 	add	r2,r2,r5
  80fbbc:	1008943a 	slli	r4,r2,16
  80fbc0:	1020d43a 	srli	r16,r2,16
  80fbc4:	20c9883a 	add	r4,r4,r3
  80fbc8:	41000015 	stw	r4,0(r8)
  80fbcc:	42000104 	addi	r8,r8,4
  80fbd0:	3cbff016 	blt	r7,r18,80fb94 <__multadd+0x34>
  80fbd4:	80000826 	beq	r16,zero,80fbf8 <__multadd+0x98>
  80fbd8:	98800217 	ldw	r2,8(r19)
  80fbdc:	90800f0e 	bge	r18,r2,80fc1c <__multadd+0xbc>
  80fbe0:	9485883a 	add	r2,r18,r18
  80fbe4:	1085883a 	add	r2,r2,r2
  80fbe8:	14c5883a 	add	r2,r2,r19
  80fbec:	90c00044 	addi	r3,r18,1
  80fbf0:	14000515 	stw	r16,20(r2)
  80fbf4:	98c00415 	stw	r3,16(r19)
  80fbf8:	9805883a 	mov	r2,r19
  80fbfc:	dfc00517 	ldw	ra,20(sp)
  80fc00:	dd000417 	ldw	r20,16(sp)
  80fc04:	dcc00317 	ldw	r19,12(sp)
  80fc08:	dc800217 	ldw	r18,8(sp)
  80fc0c:	dc400117 	ldw	r17,4(sp)
  80fc10:	dc000017 	ldw	r16,0(sp)
  80fc14:	dec00604 	addi	sp,sp,24
  80fc18:	f800283a 	ret
  80fc1c:	99400117 	ldw	r5,4(r19)
  80fc20:	a009883a 	mov	r4,r20
  80fc24:	29400044 	addi	r5,r5,1
  80fc28:	080f42c0 	call	80f42c <_Balloc>
  80fc2c:	99800417 	ldw	r6,16(r19)
  80fc30:	99400304 	addi	r5,r19,12
  80fc34:	11000304 	addi	r4,r2,12
  80fc38:	318d883a 	add	r6,r6,r6
  80fc3c:	318d883a 	add	r6,r6,r6
  80fc40:	31800204 	addi	r6,r6,8
  80fc44:	1023883a 	mov	r17,r2
  80fc48:	080ec940 	call	80ec94 <memcpy>
  80fc4c:	980b883a 	mov	r5,r19
  80fc50:	a009883a 	mov	r4,r20
  80fc54:	080eeac0 	call	80eeac <_Bfree>
  80fc58:	8827883a 	mov	r19,r17
  80fc5c:	003fe006 	br	80fbe0 <__multadd+0x80>

0080fc60 <__pow5mult>:
  80fc60:	defffa04 	addi	sp,sp,-24
  80fc64:	308000cc 	andi	r2,r6,3
  80fc68:	dd000415 	stw	r20,16(sp)
  80fc6c:	dcc00315 	stw	r19,12(sp)
  80fc70:	dc000015 	stw	r16,0(sp)
  80fc74:	dfc00515 	stw	ra,20(sp)
  80fc78:	dc800215 	stw	r18,8(sp)
  80fc7c:	dc400115 	stw	r17,4(sp)
  80fc80:	3021883a 	mov	r16,r6
  80fc84:	2027883a 	mov	r19,r4
  80fc88:	2829883a 	mov	r20,r5
  80fc8c:	10002b1e 	bne	r2,zero,80fd3c <__pow5mult+0xdc>
  80fc90:	8025d0ba 	srai	r18,r16,2
  80fc94:	90001b26 	beq	r18,zero,80fd04 <__pow5mult+0xa4>
  80fc98:	9c001217 	ldw	r16,72(r19)
  80fc9c:	8000081e 	bne	r16,zero,80fcc0 <__pow5mult+0x60>
  80fca0:	00003006 	br	80fd64 <__pow5mult+0x104>
  80fca4:	800b883a 	mov	r5,r16
  80fca8:	800d883a 	mov	r6,r16
  80fcac:	9809883a 	mov	r4,r19
  80fcb0:	90001426 	beq	r18,zero,80fd04 <__pow5mult+0xa4>
  80fcb4:	80800017 	ldw	r2,0(r16)
  80fcb8:	10001b26 	beq	r2,zero,80fd28 <__pow5mult+0xc8>
  80fcbc:	1021883a 	mov	r16,r2
  80fcc0:	9080004c 	andi	r2,r18,1
  80fcc4:	1005003a 	cmpeq	r2,r2,zero
  80fcc8:	9025d07a 	srai	r18,r18,1
  80fccc:	800d883a 	mov	r6,r16
  80fcd0:	9809883a 	mov	r4,r19
  80fcd4:	a00b883a 	mov	r5,r20
  80fcd8:	103ff21e 	bne	r2,zero,80fca4 <__pow5mult+0x44>
  80fcdc:	080f93c0 	call	80f93c <__multiply>
  80fce0:	a00b883a 	mov	r5,r20
  80fce4:	9809883a 	mov	r4,r19
  80fce8:	1023883a 	mov	r17,r2
  80fcec:	080eeac0 	call	80eeac <_Bfree>
  80fcf0:	8829883a 	mov	r20,r17
  80fcf4:	800b883a 	mov	r5,r16
  80fcf8:	800d883a 	mov	r6,r16
  80fcfc:	9809883a 	mov	r4,r19
  80fd00:	903fec1e 	bne	r18,zero,80fcb4 <__pow5mult+0x54>
  80fd04:	a005883a 	mov	r2,r20
  80fd08:	dfc00517 	ldw	ra,20(sp)
  80fd0c:	dd000417 	ldw	r20,16(sp)
  80fd10:	dcc00317 	ldw	r19,12(sp)
  80fd14:	dc800217 	ldw	r18,8(sp)
  80fd18:	dc400117 	ldw	r17,4(sp)
  80fd1c:	dc000017 	ldw	r16,0(sp)
  80fd20:	dec00604 	addi	sp,sp,24
  80fd24:	f800283a 	ret
  80fd28:	080f93c0 	call	80f93c <__multiply>
  80fd2c:	80800015 	stw	r2,0(r16)
  80fd30:	1021883a 	mov	r16,r2
  80fd34:	10000015 	stw	zero,0(r2)
  80fd38:	003fe106 	br	80fcc0 <__pow5mult+0x60>
  80fd3c:	1085883a 	add	r2,r2,r2
  80fd40:	00c020b4 	movhi	r3,130
  80fd44:	18f29a04 	addi	r3,r3,-13720
  80fd48:	1085883a 	add	r2,r2,r2
  80fd4c:	10c5883a 	add	r2,r2,r3
  80fd50:	11bfff17 	ldw	r6,-4(r2)
  80fd54:	000f883a 	mov	r7,zero
  80fd58:	080fb600 	call	80fb60 <__multadd>
  80fd5c:	1029883a 	mov	r20,r2
  80fd60:	003fcb06 	br	80fc90 <__pow5mult+0x30>
  80fd64:	9809883a 	mov	r4,r19
  80fd68:	01409c44 	movi	r5,625
  80fd6c:	080fb240 	call	80fb24 <__i2b>
  80fd70:	98801215 	stw	r2,72(r19)
  80fd74:	1021883a 	mov	r16,r2
  80fd78:	10000015 	stw	zero,0(r2)
  80fd7c:	003fd006 	br	80fcc0 <__pow5mult+0x60>

0080fd80 <__s2b>:
  80fd80:	defff904 	addi	sp,sp,-28
  80fd84:	dcc00315 	stw	r19,12(sp)
  80fd88:	dc800215 	stw	r18,8(sp)
  80fd8c:	2827883a 	mov	r19,r5
  80fd90:	2025883a 	mov	r18,r4
  80fd94:	01400244 	movi	r5,9
  80fd98:	39000204 	addi	r4,r7,8
  80fd9c:	dd000415 	stw	r20,16(sp)
  80fda0:	dc400115 	stw	r17,4(sp)
  80fda4:	dfc00615 	stw	ra,24(sp)
  80fda8:	dd400515 	stw	r21,20(sp)
  80fdac:	dc000015 	stw	r16,0(sp)
  80fdb0:	3829883a 	mov	r20,r7
  80fdb4:	3023883a 	mov	r17,r6
  80fdb8:	0808dcc0 	call	808dcc <__divsi3>
  80fdbc:	00c00044 	movi	r3,1
  80fdc0:	1880350e 	bge	r3,r2,80fe98 <__s2b+0x118>
  80fdc4:	000b883a 	mov	r5,zero
  80fdc8:	18c7883a 	add	r3,r3,r3
  80fdcc:	29400044 	addi	r5,r5,1
  80fdd0:	18bffd16 	blt	r3,r2,80fdc8 <__s2b+0x48>
  80fdd4:	9009883a 	mov	r4,r18
  80fdd8:	080f42c0 	call	80f42c <_Balloc>
  80fddc:	1011883a 	mov	r8,r2
  80fde0:	d8800717 	ldw	r2,28(sp)
  80fde4:	00c00044 	movi	r3,1
  80fde8:	01800244 	movi	r6,9
  80fdec:	40800515 	stw	r2,20(r8)
  80fdf0:	40c00415 	stw	r3,16(r8)
  80fdf4:	3440260e 	bge	r6,r17,80fe90 <__s2b+0x110>
  80fdf8:	3021883a 	mov	r16,r6
  80fdfc:	99ab883a 	add	r21,r19,r6
  80fe00:	9c05883a 	add	r2,r19,r16
  80fe04:	11c00007 	ldb	r7,0(r2)
  80fe08:	400b883a 	mov	r5,r8
  80fe0c:	9009883a 	mov	r4,r18
  80fe10:	39fff404 	addi	r7,r7,-48
  80fe14:	01800284 	movi	r6,10
  80fe18:	080fb600 	call	80fb60 <__multadd>
  80fe1c:	84000044 	addi	r16,r16,1
  80fe20:	1011883a 	mov	r8,r2
  80fe24:	8c3ff61e 	bne	r17,r16,80fe00 <__s2b+0x80>
  80fe28:	ac45883a 	add	r2,r21,r17
  80fe2c:	117ffe04 	addi	r5,r2,-8
  80fe30:	880d883a 	mov	r6,r17
  80fe34:	35000c0e 	bge	r6,r20,80fe68 <__s2b+0xe8>
  80fe38:	a185c83a 	sub	r2,r20,r6
  80fe3c:	2821883a 	mov	r16,r5
  80fe40:	28a3883a 	add	r17,r5,r2
  80fe44:	81c00007 	ldb	r7,0(r16)
  80fe48:	400b883a 	mov	r5,r8
  80fe4c:	9009883a 	mov	r4,r18
  80fe50:	39fff404 	addi	r7,r7,-48
  80fe54:	01800284 	movi	r6,10
  80fe58:	080fb600 	call	80fb60 <__multadd>
  80fe5c:	84000044 	addi	r16,r16,1
  80fe60:	1011883a 	mov	r8,r2
  80fe64:	847ff71e 	bne	r16,r17,80fe44 <__s2b+0xc4>
  80fe68:	4005883a 	mov	r2,r8
  80fe6c:	dfc00617 	ldw	ra,24(sp)
  80fe70:	dd400517 	ldw	r21,20(sp)
  80fe74:	dd000417 	ldw	r20,16(sp)
  80fe78:	dcc00317 	ldw	r19,12(sp)
  80fe7c:	dc800217 	ldw	r18,8(sp)
  80fe80:	dc400117 	ldw	r17,4(sp)
  80fe84:	dc000017 	ldw	r16,0(sp)
  80fe88:	dec00704 	addi	sp,sp,28
  80fe8c:	f800283a 	ret
  80fe90:	99400284 	addi	r5,r19,10
  80fe94:	003fe706 	br	80fe34 <__s2b+0xb4>
  80fe98:	000b883a 	mov	r5,zero
  80fe9c:	003fcd06 	br	80fdd4 <__s2b+0x54>

0080fea0 <_realloc_r>:
  80fea0:	defff404 	addi	sp,sp,-48
  80fea4:	dd800815 	stw	r22,32(sp)
  80fea8:	dc800415 	stw	r18,16(sp)
  80feac:	dc400315 	stw	r17,12(sp)
  80feb0:	dfc00b15 	stw	ra,44(sp)
  80feb4:	df000a15 	stw	fp,40(sp)
  80feb8:	ddc00915 	stw	r23,36(sp)
  80febc:	dd400715 	stw	r21,28(sp)
  80fec0:	dd000615 	stw	r20,24(sp)
  80fec4:	dcc00515 	stw	r19,20(sp)
  80fec8:	dc000215 	stw	r16,8(sp)
  80fecc:	2825883a 	mov	r18,r5
  80fed0:	3023883a 	mov	r17,r6
  80fed4:	202d883a 	mov	r22,r4
  80fed8:	2800c926 	beq	r5,zero,810200 <_realloc_r+0x360>
  80fedc:	08123780 	call	812378 <__malloc_lock>
  80fee0:	943ffe04 	addi	r16,r18,-8
  80fee4:	88c002c4 	addi	r3,r17,11
  80fee8:	00800584 	movi	r2,22
  80feec:	82000117 	ldw	r8,4(r16)
  80fef0:	10c01b2e 	bgeu	r2,r3,80ff60 <_realloc_r+0xc0>
  80fef4:	00bffe04 	movi	r2,-8
  80fef8:	188e703a 	and	r7,r3,r2
  80fefc:	3839883a 	mov	fp,r7
  80ff00:	38001a16 	blt	r7,zero,80ff6c <_realloc_r+0xcc>
  80ff04:	e4401936 	bltu	fp,r17,80ff6c <_realloc_r+0xcc>
  80ff08:	013fff04 	movi	r4,-4
  80ff0c:	4126703a 	and	r19,r8,r4
  80ff10:	99c02616 	blt	r19,r7,80ffac <_realloc_r+0x10c>
  80ff14:	802b883a 	mov	r21,r16
  80ff18:	9829883a 	mov	r20,r19
  80ff1c:	84000204 	addi	r16,r16,8
  80ff20:	a80f883a 	mov	r7,r21
  80ff24:	a70dc83a 	sub	r6,r20,fp
  80ff28:	008003c4 	movi	r2,15
  80ff2c:	1180c136 	bltu	r2,r6,810234 <_realloc_r+0x394>
  80ff30:	38800117 	ldw	r2,4(r7)
  80ff34:	a549883a 	add	r4,r20,r21
  80ff38:	1080004c 	andi	r2,r2,1
  80ff3c:	a084b03a 	or	r2,r20,r2
  80ff40:	38800115 	stw	r2,4(r7)
  80ff44:	20c00117 	ldw	r3,4(r4)
  80ff48:	18c00054 	ori	r3,r3,1
  80ff4c:	20c00115 	stw	r3,4(r4)
  80ff50:	b009883a 	mov	r4,r22
  80ff54:	08123980 	call	812398 <__malloc_unlock>
  80ff58:	8023883a 	mov	r17,r16
  80ff5c:	00000606 	br	80ff78 <_realloc_r+0xd8>
  80ff60:	01c00404 	movi	r7,16
  80ff64:	3839883a 	mov	fp,r7
  80ff68:	e47fe72e 	bgeu	fp,r17,80ff08 <_realloc_r+0x68>
  80ff6c:	00800304 	movi	r2,12
  80ff70:	0023883a 	mov	r17,zero
  80ff74:	b0800015 	stw	r2,0(r22)
  80ff78:	8805883a 	mov	r2,r17
  80ff7c:	dfc00b17 	ldw	ra,44(sp)
  80ff80:	df000a17 	ldw	fp,40(sp)
  80ff84:	ddc00917 	ldw	r23,36(sp)
  80ff88:	dd800817 	ldw	r22,32(sp)
  80ff8c:	dd400717 	ldw	r21,28(sp)
  80ff90:	dd000617 	ldw	r20,24(sp)
  80ff94:	dcc00517 	ldw	r19,20(sp)
  80ff98:	dc800417 	ldw	r18,16(sp)
  80ff9c:	dc400317 	ldw	r17,12(sp)
  80ffa0:	dc000217 	ldw	r16,8(sp)
  80ffa4:	dec00c04 	addi	sp,sp,48
  80ffa8:	f800283a 	ret
  80ffac:	008020b4 	movhi	r2,130
  80ffb0:	10b3df04 	addi	r2,r2,-12420
  80ffb4:	12400217 	ldw	r9,8(r2)
  80ffb8:	84cd883a 	add	r6,r16,r19
  80ffbc:	802b883a 	mov	r21,r16
  80ffc0:	3240b926 	beq	r6,r9,8102a8 <_realloc_r+0x408>
  80ffc4:	31400117 	ldw	r5,4(r6)
  80ffc8:	00bfff84 	movi	r2,-2
  80ffcc:	2884703a 	and	r2,r5,r2
  80ffd0:	1185883a 	add	r2,r2,r6
  80ffd4:	10c00117 	ldw	r3,4(r2)
  80ffd8:	18c0004c 	andi	r3,r3,1
  80ffdc:	1807003a 	cmpeq	r3,r3,zero
  80ffe0:	1800a326 	beq	r3,zero,810270 <_realloc_r+0x3d0>
  80ffe4:	2908703a 	and	r4,r5,r4
  80ffe8:	9929883a 	add	r20,r19,r4
  80ffec:	a1c0a30e 	bge	r20,r7,81027c <_realloc_r+0x3dc>
  80fff0:	4080004c 	andi	r2,r8,1
  80fff4:	1000551e 	bne	r2,zero,81014c <_realloc_r+0x2ac>
  80fff8:	80800017 	ldw	r2,0(r16)
  80fffc:	80afc83a 	sub	r23,r16,r2
  810000:	b8c00117 	ldw	r3,4(r23)
  810004:	00bfff04 	movi	r2,-4
  810008:	1884703a 	and	r2,r3,r2
  81000c:	30002e26 	beq	r6,zero,8100c8 <_realloc_r+0x228>
  810010:	3240b926 	beq	r6,r9,8102f8 <_realloc_r+0x458>
  810014:	98a9883a 	add	r20,r19,r2
  810018:	2509883a 	add	r4,r4,r20
  81001c:	d9000015 	stw	r4,0(sp)
  810020:	21c02a16 	blt	r4,r7,8100cc <_realloc_r+0x22c>
  810024:	30800317 	ldw	r2,12(r6)
  810028:	30c00217 	ldw	r3,8(r6)
  81002c:	01400904 	movi	r5,36
  810030:	99bfff04 	addi	r6,r19,-4
  810034:	18800315 	stw	r2,12(r3)
  810038:	10c00215 	stw	r3,8(r2)
  81003c:	b9000317 	ldw	r4,12(r23)
  810040:	b8800217 	ldw	r2,8(r23)
  810044:	b82b883a 	mov	r21,r23
  810048:	bc000204 	addi	r16,r23,8
  81004c:	20800215 	stw	r2,8(r4)
  810050:	11000315 	stw	r4,12(r2)
  810054:	2980e436 	bltu	r5,r6,8103e8 <_realloc_r+0x548>
  810058:	008004c4 	movi	r2,19
  81005c:	9009883a 	mov	r4,r18
  810060:	8011883a 	mov	r8,r16
  810064:	11800f2e 	bgeu	r2,r6,8100a4 <_realloc_r+0x204>
  810068:	90800017 	ldw	r2,0(r18)
  81006c:	ba000404 	addi	r8,r23,16
  810070:	91000204 	addi	r4,r18,8
  810074:	b8800215 	stw	r2,8(r23)
  810078:	90c00117 	ldw	r3,4(r18)
  81007c:	008006c4 	movi	r2,27
  810080:	b8c00315 	stw	r3,12(r23)
  810084:	1180072e 	bgeu	r2,r6,8100a4 <_realloc_r+0x204>
  810088:	90c00217 	ldw	r3,8(r18)
  81008c:	ba000604 	addi	r8,r23,24
  810090:	91000404 	addi	r4,r18,16
  810094:	b8c00415 	stw	r3,16(r23)
  810098:	90800317 	ldw	r2,12(r18)
  81009c:	b8800515 	stw	r2,20(r23)
  8100a0:	3140e726 	beq	r6,r5,810440 <_realloc_r+0x5a0>
  8100a4:	20800017 	ldw	r2,0(r4)
  8100a8:	dd000017 	ldw	r20,0(sp)
  8100ac:	b80f883a 	mov	r7,r23
  8100b0:	40800015 	stw	r2,0(r8)
  8100b4:	20c00117 	ldw	r3,4(r4)
  8100b8:	40c00115 	stw	r3,4(r8)
  8100bc:	20800217 	ldw	r2,8(r4)
  8100c0:	40800215 	stw	r2,8(r8)
  8100c4:	003f9706 	br	80ff24 <_realloc_r+0x84>
  8100c8:	98a9883a 	add	r20,r19,r2
  8100cc:	a1c01f16 	blt	r20,r7,81014c <_realloc_r+0x2ac>
  8100d0:	b8c00317 	ldw	r3,12(r23)
  8100d4:	b8800217 	ldw	r2,8(r23)
  8100d8:	99bfff04 	addi	r6,r19,-4
  8100dc:	01400904 	movi	r5,36
  8100e0:	b82b883a 	mov	r21,r23
  8100e4:	18800215 	stw	r2,8(r3)
  8100e8:	10c00315 	stw	r3,12(r2)
  8100ec:	bc000204 	addi	r16,r23,8
  8100f0:	2980c336 	bltu	r5,r6,810400 <_realloc_r+0x560>
  8100f4:	008004c4 	movi	r2,19
  8100f8:	9009883a 	mov	r4,r18
  8100fc:	8011883a 	mov	r8,r16
  810100:	11800f2e 	bgeu	r2,r6,810140 <_realloc_r+0x2a0>
  810104:	90800017 	ldw	r2,0(r18)
  810108:	ba000404 	addi	r8,r23,16
  81010c:	91000204 	addi	r4,r18,8
  810110:	b8800215 	stw	r2,8(r23)
  810114:	90c00117 	ldw	r3,4(r18)
  810118:	008006c4 	movi	r2,27
  81011c:	b8c00315 	stw	r3,12(r23)
  810120:	1180072e 	bgeu	r2,r6,810140 <_realloc_r+0x2a0>
  810124:	90c00217 	ldw	r3,8(r18)
  810128:	ba000604 	addi	r8,r23,24
  81012c:	91000404 	addi	r4,r18,16
  810130:	b8c00415 	stw	r3,16(r23)
  810134:	90800317 	ldw	r2,12(r18)
  810138:	b8800515 	stw	r2,20(r23)
  81013c:	3140c726 	beq	r6,r5,81045c <_realloc_r+0x5bc>
  810140:	20800017 	ldw	r2,0(r4)
  810144:	b80f883a 	mov	r7,r23
  810148:	003fd906 	br	8100b0 <_realloc_r+0x210>
  81014c:	880b883a 	mov	r5,r17
  810150:	b009883a 	mov	r4,r22
  810154:	08097280 	call	809728 <_malloc_r>
  810158:	1023883a 	mov	r17,r2
  81015c:	10002526 	beq	r2,zero,8101f4 <_realloc_r+0x354>
  810160:	80800117 	ldw	r2,4(r16)
  810164:	00ffff84 	movi	r3,-2
  810168:	893ffe04 	addi	r4,r17,-8
  81016c:	10c4703a 	and	r2,r2,r3
  810170:	8085883a 	add	r2,r16,r2
  810174:	20809526 	beq	r4,r2,8103cc <_realloc_r+0x52c>
  810178:	99bfff04 	addi	r6,r19,-4
  81017c:	01c00904 	movi	r7,36
  810180:	39804536 	bltu	r7,r6,810298 <_realloc_r+0x3f8>
  810184:	008004c4 	movi	r2,19
  810188:	9009883a 	mov	r4,r18
  81018c:	880b883a 	mov	r5,r17
  810190:	11800f2e 	bgeu	r2,r6,8101d0 <_realloc_r+0x330>
  810194:	90800017 	ldw	r2,0(r18)
  810198:	89400204 	addi	r5,r17,8
  81019c:	91000204 	addi	r4,r18,8
  8101a0:	88800015 	stw	r2,0(r17)
  8101a4:	90c00117 	ldw	r3,4(r18)
  8101a8:	008006c4 	movi	r2,27
  8101ac:	88c00115 	stw	r3,4(r17)
  8101b0:	1180072e 	bgeu	r2,r6,8101d0 <_realloc_r+0x330>
  8101b4:	90c00217 	ldw	r3,8(r18)
  8101b8:	89400404 	addi	r5,r17,16
  8101bc:	91000404 	addi	r4,r18,16
  8101c0:	88c00215 	stw	r3,8(r17)
  8101c4:	90800317 	ldw	r2,12(r18)
  8101c8:	88800315 	stw	r2,12(r17)
  8101cc:	31c09126 	beq	r6,r7,810414 <_realloc_r+0x574>
  8101d0:	20800017 	ldw	r2,0(r4)
  8101d4:	28800015 	stw	r2,0(r5)
  8101d8:	20c00117 	ldw	r3,4(r4)
  8101dc:	28c00115 	stw	r3,4(r5)
  8101e0:	20800217 	ldw	r2,8(r4)
  8101e4:	28800215 	stw	r2,8(r5)
  8101e8:	900b883a 	mov	r5,r18
  8101ec:	b009883a 	mov	r4,r22
  8101f0:	080dfb40 	call	80dfb4 <_free_r>
  8101f4:	b009883a 	mov	r4,r22
  8101f8:	08123980 	call	812398 <__malloc_unlock>
  8101fc:	003f5e06 	br	80ff78 <_realloc_r+0xd8>
  810200:	300b883a 	mov	r5,r6
  810204:	dfc00b17 	ldw	ra,44(sp)
  810208:	df000a17 	ldw	fp,40(sp)
  81020c:	ddc00917 	ldw	r23,36(sp)
  810210:	dd800817 	ldw	r22,32(sp)
  810214:	dd400717 	ldw	r21,28(sp)
  810218:	dd000617 	ldw	r20,24(sp)
  81021c:	dcc00517 	ldw	r19,20(sp)
  810220:	dc800417 	ldw	r18,16(sp)
  810224:	dc400317 	ldw	r17,12(sp)
  810228:	dc000217 	ldw	r16,8(sp)
  81022c:	dec00c04 	addi	sp,sp,48
  810230:	08097281 	jmpi	809728 <_malloc_r>
  810234:	38800117 	ldw	r2,4(r7)
  810238:	e54b883a 	add	r5,fp,r21
  81023c:	31000054 	ori	r4,r6,1
  810240:	1080004c 	andi	r2,r2,1
  810244:	1704b03a 	or	r2,r2,fp
  810248:	38800115 	stw	r2,4(r7)
  81024c:	29000115 	stw	r4,4(r5)
  810250:	2987883a 	add	r3,r5,r6
  810254:	18800117 	ldw	r2,4(r3)
  810258:	29400204 	addi	r5,r5,8
  81025c:	b009883a 	mov	r4,r22
  810260:	10800054 	ori	r2,r2,1
  810264:	18800115 	stw	r2,4(r3)
  810268:	080dfb40 	call	80dfb4 <_free_r>
  81026c:	003f3806 	br	80ff50 <_realloc_r+0xb0>
  810270:	000d883a 	mov	r6,zero
  810274:	0009883a 	mov	r4,zero
  810278:	003f5d06 	br	80fff0 <_realloc_r+0x150>
  81027c:	30c00217 	ldw	r3,8(r6)
  810280:	30800317 	ldw	r2,12(r6)
  810284:	800f883a 	mov	r7,r16
  810288:	84000204 	addi	r16,r16,8
  81028c:	10c00215 	stw	r3,8(r2)
  810290:	18800315 	stw	r2,12(r3)
  810294:	003f2306 	br	80ff24 <_realloc_r+0x84>
  810298:	8809883a 	mov	r4,r17
  81029c:	900b883a 	mov	r5,r18
  8102a0:	080ed340 	call	80ed34 <memmove>
  8102a4:	003fd006 	br	8101e8 <_realloc_r+0x348>
  8102a8:	30800117 	ldw	r2,4(r6)
  8102ac:	e0c00404 	addi	r3,fp,16
  8102b0:	1108703a 	and	r4,r2,r4
  8102b4:	9905883a 	add	r2,r19,r4
  8102b8:	10ff4d16 	blt	r2,r3,80fff0 <_realloc_r+0x150>
  8102bc:	1705c83a 	sub	r2,r2,fp
  8102c0:	870b883a 	add	r5,r16,fp
  8102c4:	10800054 	ori	r2,r2,1
  8102c8:	28800115 	stw	r2,4(r5)
  8102cc:	80c00117 	ldw	r3,4(r16)
  8102d0:	008020b4 	movhi	r2,130
  8102d4:	10b3df04 	addi	r2,r2,-12420
  8102d8:	b009883a 	mov	r4,r22
  8102dc:	18c0004c 	andi	r3,r3,1
  8102e0:	e0c6b03a 	or	r3,fp,r3
  8102e4:	11400215 	stw	r5,8(r2)
  8102e8:	80c00115 	stw	r3,4(r16)
  8102ec:	08123980 	call	812398 <__malloc_unlock>
  8102f0:	84400204 	addi	r17,r16,8
  8102f4:	003f2006 	br	80ff78 <_realloc_r+0xd8>
  8102f8:	98a9883a 	add	r20,r19,r2
  8102fc:	2509883a 	add	r4,r4,r20
  810300:	e0800404 	addi	r2,fp,16
  810304:	d9000115 	stw	r4,4(sp)
  810308:	20bf7016 	blt	r4,r2,8100cc <_realloc_r+0x22c>
  81030c:	b8c00317 	ldw	r3,12(r23)
  810310:	b8800217 	ldw	r2,8(r23)
  810314:	99bfff04 	addi	r6,r19,-4
  810318:	01400904 	movi	r5,36
  81031c:	18800215 	stw	r2,8(r3)
  810320:	10c00315 	stw	r3,12(r2)
  810324:	bc400204 	addi	r17,r23,8
  810328:	29804136 	bltu	r5,r6,810430 <_realloc_r+0x590>
  81032c:	008004c4 	movi	r2,19
  810330:	9009883a 	mov	r4,r18
  810334:	880f883a 	mov	r7,r17
  810338:	11800f2e 	bgeu	r2,r6,810378 <_realloc_r+0x4d8>
  81033c:	90800017 	ldw	r2,0(r18)
  810340:	b9c00404 	addi	r7,r23,16
  810344:	91000204 	addi	r4,r18,8
  810348:	b8800215 	stw	r2,8(r23)
  81034c:	90c00117 	ldw	r3,4(r18)
  810350:	008006c4 	movi	r2,27
  810354:	b8c00315 	stw	r3,12(r23)
  810358:	1180072e 	bgeu	r2,r6,810378 <_realloc_r+0x4d8>
  81035c:	90c00217 	ldw	r3,8(r18)
  810360:	b9c00604 	addi	r7,r23,24
  810364:	91000404 	addi	r4,r18,16
  810368:	b8c00415 	stw	r3,16(r23)
  81036c:	90800317 	ldw	r2,12(r18)
  810370:	b8800515 	stw	r2,20(r23)
  810374:	31404026 	beq	r6,r5,810478 <_realloc_r+0x5d8>
  810378:	20800017 	ldw	r2,0(r4)
  81037c:	38800015 	stw	r2,0(r7)
  810380:	20c00117 	ldw	r3,4(r4)
  810384:	38c00115 	stw	r3,4(r7)
  810388:	20800217 	ldw	r2,8(r4)
  81038c:	38800215 	stw	r2,8(r7)
  810390:	d8c00117 	ldw	r3,4(sp)
  810394:	bf0b883a 	add	r5,r23,fp
  810398:	b009883a 	mov	r4,r22
  81039c:	1f05c83a 	sub	r2,r3,fp
  8103a0:	10800054 	ori	r2,r2,1
  8103a4:	28800115 	stw	r2,4(r5)
  8103a8:	b8c00117 	ldw	r3,4(r23)
  8103ac:	008020b4 	movhi	r2,130
  8103b0:	10b3df04 	addi	r2,r2,-12420
  8103b4:	11400215 	stw	r5,8(r2)
  8103b8:	18c0004c 	andi	r3,r3,1
  8103bc:	e0c6b03a 	or	r3,fp,r3
  8103c0:	b8c00115 	stw	r3,4(r23)
  8103c4:	08123980 	call	812398 <__malloc_unlock>
  8103c8:	003eeb06 	br	80ff78 <_realloc_r+0xd8>
  8103cc:	20800117 	ldw	r2,4(r4)
  8103d0:	00ffff04 	movi	r3,-4
  8103d4:	800f883a 	mov	r7,r16
  8103d8:	10c4703a 	and	r2,r2,r3
  8103dc:	98a9883a 	add	r20,r19,r2
  8103e0:	84000204 	addi	r16,r16,8
  8103e4:	003ecf06 	br	80ff24 <_realloc_r+0x84>
  8103e8:	900b883a 	mov	r5,r18
  8103ec:	8009883a 	mov	r4,r16
  8103f0:	080ed340 	call	80ed34 <memmove>
  8103f4:	dd000017 	ldw	r20,0(sp)
  8103f8:	b80f883a 	mov	r7,r23
  8103fc:	003ec906 	br	80ff24 <_realloc_r+0x84>
  810400:	900b883a 	mov	r5,r18
  810404:	8009883a 	mov	r4,r16
  810408:	080ed340 	call	80ed34 <memmove>
  81040c:	b80f883a 	mov	r7,r23
  810410:	003ec406 	br	80ff24 <_realloc_r+0x84>
  810414:	90c00417 	ldw	r3,16(r18)
  810418:	89400604 	addi	r5,r17,24
  81041c:	91000604 	addi	r4,r18,24
  810420:	88c00415 	stw	r3,16(r17)
  810424:	90800517 	ldw	r2,20(r18)
  810428:	88800515 	stw	r2,20(r17)
  81042c:	003f6806 	br	8101d0 <_realloc_r+0x330>
  810430:	900b883a 	mov	r5,r18
  810434:	8809883a 	mov	r4,r17
  810438:	080ed340 	call	80ed34 <memmove>
  81043c:	003fd406 	br	810390 <_realloc_r+0x4f0>
  810440:	90c00417 	ldw	r3,16(r18)
  810444:	91000604 	addi	r4,r18,24
  810448:	ba000804 	addi	r8,r23,32
  81044c:	b8c00615 	stw	r3,24(r23)
  810450:	90800517 	ldw	r2,20(r18)
  810454:	b8800715 	stw	r2,28(r23)
  810458:	003f1206 	br	8100a4 <_realloc_r+0x204>
  81045c:	90c00417 	ldw	r3,16(r18)
  810460:	91000604 	addi	r4,r18,24
  810464:	ba000804 	addi	r8,r23,32
  810468:	b8c00615 	stw	r3,24(r23)
  81046c:	90800517 	ldw	r2,20(r18)
  810470:	b8800715 	stw	r2,28(r23)
  810474:	003f3206 	br	810140 <_realloc_r+0x2a0>
  810478:	90c00417 	ldw	r3,16(r18)
  81047c:	91000604 	addi	r4,r18,24
  810480:	b9c00804 	addi	r7,r23,32
  810484:	b8c00615 	stw	r3,24(r23)
  810488:	90800517 	ldw	r2,20(r18)
  81048c:	b8800715 	stw	r2,28(r23)
  810490:	003fb906 	br	810378 <_realloc_r+0x4d8>

00810494 <__isinfd>:
  810494:	200d883a 	mov	r6,r4
  810498:	0109c83a 	sub	r4,zero,r4
  81049c:	2188b03a 	or	r4,r4,r6
  8104a0:	2008d7fa 	srli	r4,r4,31
  8104a4:	00a00034 	movhi	r2,32768
  8104a8:	10bfffc4 	addi	r2,r2,-1
  8104ac:	1144703a 	and	r2,r2,r5
  8104b0:	2088b03a 	or	r4,r4,r2
  8104b4:	009ffc34 	movhi	r2,32752
  8104b8:	1105c83a 	sub	r2,r2,r4
  8104bc:	0087c83a 	sub	r3,zero,r2
  8104c0:	10c4b03a 	or	r2,r2,r3
  8104c4:	1004d7fa 	srli	r2,r2,31
  8104c8:	00c00044 	movi	r3,1
  8104cc:	1885c83a 	sub	r2,r3,r2
  8104d0:	f800283a 	ret

008104d4 <__sclose>:
  8104d4:	2940038f 	ldh	r5,14(r5)
  8104d8:	08108081 	jmpi	810808 <_close_r>

008104dc <__sseek>:
  8104dc:	defffe04 	addi	sp,sp,-8
  8104e0:	dc000015 	stw	r16,0(sp)
  8104e4:	2821883a 	mov	r16,r5
  8104e8:	2940038f 	ldh	r5,14(r5)
  8104ec:	dfc00115 	stw	ra,4(sp)
  8104f0:	0810a800 	call	810a80 <_lseek_r>
  8104f4:	1007883a 	mov	r3,r2
  8104f8:	00bfffc4 	movi	r2,-1
  8104fc:	18800926 	beq	r3,r2,810524 <__sseek+0x48>
  810500:	8080030b 	ldhu	r2,12(r16)
  810504:	80c01415 	stw	r3,80(r16)
  810508:	10840014 	ori	r2,r2,4096
  81050c:	8080030d 	sth	r2,12(r16)
  810510:	1805883a 	mov	r2,r3
  810514:	dfc00117 	ldw	ra,4(sp)
  810518:	dc000017 	ldw	r16,0(sp)
  81051c:	dec00204 	addi	sp,sp,8
  810520:	f800283a 	ret
  810524:	8080030b 	ldhu	r2,12(r16)
  810528:	10bbffcc 	andi	r2,r2,61439
  81052c:	8080030d 	sth	r2,12(r16)
  810530:	1805883a 	mov	r2,r3
  810534:	dfc00117 	ldw	ra,4(sp)
  810538:	dc000017 	ldw	r16,0(sp)
  81053c:	dec00204 	addi	sp,sp,8
  810540:	f800283a 	ret

00810544 <__swrite>:
  810544:	2880030b 	ldhu	r2,12(r5)
  810548:	defffb04 	addi	sp,sp,-20
  81054c:	dcc00315 	stw	r19,12(sp)
  810550:	1080400c 	andi	r2,r2,256
  810554:	dc800215 	stw	r18,8(sp)
  810558:	dc400115 	stw	r17,4(sp)
  81055c:	dc000015 	stw	r16,0(sp)
  810560:	3027883a 	mov	r19,r6
  810564:	3825883a 	mov	r18,r7
  810568:	dfc00415 	stw	ra,16(sp)
  81056c:	2821883a 	mov	r16,r5
  810570:	000d883a 	mov	r6,zero
  810574:	01c00084 	movi	r7,2
  810578:	2023883a 	mov	r17,r4
  81057c:	10000226 	beq	r2,zero,810588 <__swrite+0x44>
  810580:	2940038f 	ldh	r5,14(r5)
  810584:	0810a800 	call	810a80 <_lseek_r>
  810588:	8080030b 	ldhu	r2,12(r16)
  81058c:	8140038f 	ldh	r5,14(r16)
  810590:	8809883a 	mov	r4,r17
  810594:	10bbffcc 	andi	r2,r2,61439
  810598:	980d883a 	mov	r6,r19
  81059c:	900f883a 	mov	r7,r18
  8105a0:	8080030d 	sth	r2,12(r16)
  8105a4:	dfc00417 	ldw	ra,16(sp)
  8105a8:	dcc00317 	ldw	r19,12(sp)
  8105ac:	dc800217 	ldw	r18,8(sp)
  8105b0:	dc400117 	ldw	r17,4(sp)
  8105b4:	dc000017 	ldw	r16,0(sp)
  8105b8:	dec00504 	addi	sp,sp,20
  8105bc:	08106dc1 	jmpi	8106dc <_write_r>

008105c0 <__sread>:
  8105c0:	defffe04 	addi	sp,sp,-8
  8105c4:	dc000015 	stw	r16,0(sp)
  8105c8:	2821883a 	mov	r16,r5
  8105cc:	2940038f 	ldh	r5,14(r5)
  8105d0:	dfc00115 	stw	ra,4(sp)
  8105d4:	0810af80 	call	810af8 <_read_r>
  8105d8:	1007883a 	mov	r3,r2
  8105dc:	10000816 	blt	r2,zero,810600 <__sread+0x40>
  8105e0:	80801417 	ldw	r2,80(r16)
  8105e4:	10c5883a 	add	r2,r2,r3
  8105e8:	80801415 	stw	r2,80(r16)
  8105ec:	1805883a 	mov	r2,r3
  8105f0:	dfc00117 	ldw	ra,4(sp)
  8105f4:	dc000017 	ldw	r16,0(sp)
  8105f8:	dec00204 	addi	sp,sp,8
  8105fc:	f800283a 	ret
  810600:	8080030b 	ldhu	r2,12(r16)
  810604:	10bbffcc 	andi	r2,r2,61439
  810608:	8080030d 	sth	r2,12(r16)
  81060c:	1805883a 	mov	r2,r3
  810610:	dfc00117 	ldw	ra,4(sp)
  810614:	dc000017 	ldw	r16,0(sp)
  810618:	dec00204 	addi	sp,sp,8
  81061c:	f800283a 	ret

00810620 <strcmp>:
  810620:	2144b03a 	or	r2,r4,r5
  810624:	108000cc 	andi	r2,r2,3
  810628:	10001d1e 	bne	r2,zero,8106a0 <strcmp+0x80>
  81062c:	200f883a 	mov	r7,r4
  810630:	28800017 	ldw	r2,0(r5)
  810634:	21000017 	ldw	r4,0(r4)
  810638:	280d883a 	mov	r6,r5
  81063c:	2080161e 	bne	r4,r2,810698 <strcmp+0x78>
  810640:	023fbff4 	movhi	r8,65279
  810644:	423fbfc4 	addi	r8,r8,-257
  810648:	2207883a 	add	r3,r4,r8
  81064c:	01602074 	movhi	r5,32897
  810650:	29602004 	addi	r5,r5,-32640
  810654:	1946703a 	and	r3,r3,r5
  810658:	0104303a 	nor	r2,zero,r4
  81065c:	10c4703a 	and	r2,r2,r3
  810660:	10001c1e 	bne	r2,zero,8106d4 <strcmp+0xb4>
  810664:	4013883a 	mov	r9,r8
  810668:	2811883a 	mov	r8,r5
  81066c:	00000106 	br	810674 <strcmp+0x54>
  810670:	1800181e 	bne	r3,zero,8106d4 <strcmp+0xb4>
  810674:	39c00104 	addi	r7,r7,4
  810678:	39000017 	ldw	r4,0(r7)
  81067c:	31800104 	addi	r6,r6,4
  810680:	31400017 	ldw	r5,0(r6)
  810684:	2245883a 	add	r2,r4,r9
  810688:	1204703a 	and	r2,r2,r8
  81068c:	0106303a 	nor	r3,zero,r4
  810690:	1886703a 	and	r3,r3,r2
  810694:	217ff626 	beq	r4,r5,810670 <strcmp+0x50>
  810698:	3809883a 	mov	r4,r7
  81069c:	300b883a 	mov	r5,r6
  8106a0:	20c00007 	ldb	r3,0(r4)
  8106a4:	1800051e 	bne	r3,zero,8106bc <strcmp+0x9c>
  8106a8:	00000606 	br	8106c4 <strcmp+0xa4>
  8106ac:	21000044 	addi	r4,r4,1
  8106b0:	20c00007 	ldb	r3,0(r4)
  8106b4:	29400044 	addi	r5,r5,1
  8106b8:	18000226 	beq	r3,zero,8106c4 <strcmp+0xa4>
  8106bc:	28800007 	ldb	r2,0(r5)
  8106c0:	18bffa26 	beq	r3,r2,8106ac <strcmp+0x8c>
  8106c4:	20c00003 	ldbu	r3,0(r4)
  8106c8:	28800003 	ldbu	r2,0(r5)
  8106cc:	1885c83a 	sub	r2,r3,r2
  8106d0:	f800283a 	ret
  8106d4:	0005883a 	mov	r2,zero
  8106d8:	f800283a 	ret

008106dc <_write_r>:
  8106dc:	defffd04 	addi	sp,sp,-12
  8106e0:	dc000015 	stw	r16,0(sp)
  8106e4:	040020b4 	movhi	r16,130
  8106e8:	8400ef04 	addi	r16,r16,956
  8106ec:	dc400115 	stw	r17,4(sp)
  8106f0:	80000015 	stw	zero,0(r16)
  8106f4:	2023883a 	mov	r17,r4
  8106f8:	2809883a 	mov	r4,r5
  8106fc:	300b883a 	mov	r5,r6
  810700:	380d883a 	mov	r6,r7
  810704:	dfc00215 	stw	ra,8(sp)
  810708:	08128280 	call	812828 <write>
  81070c:	1007883a 	mov	r3,r2
  810710:	00bfffc4 	movi	r2,-1
  810714:	18800626 	beq	r3,r2,810730 <_write_r+0x54>
  810718:	1805883a 	mov	r2,r3
  81071c:	dfc00217 	ldw	ra,8(sp)
  810720:	dc400117 	ldw	r17,4(sp)
  810724:	dc000017 	ldw	r16,0(sp)
  810728:	dec00304 	addi	sp,sp,12
  81072c:	f800283a 	ret
  810730:	80800017 	ldw	r2,0(r16)
  810734:	103ff826 	beq	r2,zero,810718 <_write_r+0x3c>
  810738:	88800015 	stw	r2,0(r17)
  81073c:	1805883a 	mov	r2,r3
  810740:	dfc00217 	ldw	ra,8(sp)
  810744:	dc400117 	ldw	r17,4(sp)
  810748:	dc000017 	ldw	r16,0(sp)
  81074c:	dec00304 	addi	sp,sp,12
  810750:	f800283a 	ret

00810754 <_calloc_r>:
  810754:	298b383a 	mul	r5,r5,r6
  810758:	defffe04 	addi	sp,sp,-8
  81075c:	dc000015 	stw	r16,0(sp)
  810760:	dfc00115 	stw	ra,4(sp)
  810764:	08097280 	call	809728 <_malloc_r>
  810768:	1021883a 	mov	r16,r2
  81076c:	01c00904 	movi	r7,36
  810770:	10000d26 	beq	r2,zero,8107a8 <_calloc_r+0x54>
  810774:	10ffff17 	ldw	r3,-4(r2)
  810778:	1009883a 	mov	r4,r2
  81077c:	00bfff04 	movi	r2,-4
  810780:	1886703a 	and	r3,r3,r2
  810784:	1887883a 	add	r3,r3,r2
  810788:	180d883a 	mov	r6,r3
  81078c:	000b883a 	mov	r5,zero
  810790:	38c01736 	bltu	r7,r3,8107f0 <_calloc_r+0x9c>
  810794:	008004c4 	movi	r2,19
  810798:	10c00836 	bltu	r2,r3,8107bc <_calloc_r+0x68>
  81079c:	20000215 	stw	zero,8(r4)
  8107a0:	20000015 	stw	zero,0(r4)
  8107a4:	20000115 	stw	zero,4(r4)
  8107a8:	8005883a 	mov	r2,r16
  8107ac:	dfc00117 	ldw	ra,4(sp)
  8107b0:	dc000017 	ldw	r16,0(sp)
  8107b4:	dec00204 	addi	sp,sp,8
  8107b8:	f800283a 	ret
  8107bc:	008006c4 	movi	r2,27
  8107c0:	80000015 	stw	zero,0(r16)
  8107c4:	80000115 	stw	zero,4(r16)
  8107c8:	81000204 	addi	r4,r16,8
  8107cc:	10fff32e 	bgeu	r2,r3,81079c <_calloc_r+0x48>
  8107d0:	80000215 	stw	zero,8(r16)
  8107d4:	80000315 	stw	zero,12(r16)
  8107d8:	81000404 	addi	r4,r16,16
  8107dc:	19ffef1e 	bne	r3,r7,81079c <_calloc_r+0x48>
  8107e0:	81000604 	addi	r4,r16,24
  8107e4:	80000415 	stw	zero,16(r16)
  8107e8:	80000515 	stw	zero,20(r16)
  8107ec:	003feb06 	br	81079c <_calloc_r+0x48>
  8107f0:	080ee140 	call	80ee14 <memset>
  8107f4:	8005883a 	mov	r2,r16
  8107f8:	dfc00117 	ldw	ra,4(sp)
  8107fc:	dc000017 	ldw	r16,0(sp)
  810800:	dec00204 	addi	sp,sp,8
  810804:	f800283a 	ret

00810808 <_close_r>:
  810808:	defffd04 	addi	sp,sp,-12
  81080c:	dc000015 	stw	r16,0(sp)
  810810:	040020b4 	movhi	r16,130
  810814:	8400ef04 	addi	r16,r16,956
  810818:	dc400115 	stw	r17,4(sp)
  81081c:	80000015 	stw	zero,0(r16)
  810820:	2023883a 	mov	r17,r4
  810824:	2809883a 	mov	r4,r5
  810828:	dfc00215 	stw	ra,8(sp)
  81082c:	08119180 	call	811918 <close>
  810830:	1007883a 	mov	r3,r2
  810834:	00bfffc4 	movi	r2,-1
  810838:	18800626 	beq	r3,r2,810854 <_close_r+0x4c>
  81083c:	1805883a 	mov	r2,r3
  810840:	dfc00217 	ldw	ra,8(sp)
  810844:	dc400117 	ldw	r17,4(sp)
  810848:	dc000017 	ldw	r16,0(sp)
  81084c:	dec00304 	addi	sp,sp,12
  810850:	f800283a 	ret
  810854:	80800017 	ldw	r2,0(r16)
  810858:	103ff826 	beq	r2,zero,81083c <_close_r+0x34>
  81085c:	88800015 	stw	r2,0(r17)
  810860:	1805883a 	mov	r2,r3
  810864:	dfc00217 	ldw	ra,8(sp)
  810868:	dc400117 	ldw	r17,4(sp)
  81086c:	dc000017 	ldw	r16,0(sp)
  810870:	dec00304 	addi	sp,sp,12
  810874:	f800283a 	ret

00810878 <_fclose_r>:
  810878:	defffc04 	addi	sp,sp,-16
  81087c:	dc400115 	stw	r17,4(sp)
  810880:	dc000015 	stw	r16,0(sp)
  810884:	dfc00315 	stw	ra,12(sp)
  810888:	dc800215 	stw	r18,8(sp)
  81088c:	2821883a 	mov	r16,r5
  810890:	2023883a 	mov	r17,r4
  810894:	28002926 	beq	r5,zero,81093c <_fclose_r+0xc4>
  810898:	080dc200 	call	80dc20 <__sfp_lock_acquire>
  81089c:	88000226 	beq	r17,zero,8108a8 <_fclose_r+0x30>
  8108a0:	88800e17 	ldw	r2,56(r17)
  8108a4:	10002d26 	beq	r2,zero,81095c <_fclose_r+0xe4>
  8108a8:	8080030f 	ldh	r2,12(r16)
  8108ac:	10002226 	beq	r2,zero,810938 <_fclose_r+0xc0>
  8108b0:	8809883a 	mov	r4,r17
  8108b4:	800b883a 	mov	r5,r16
  8108b8:	080d9980 	call	80d998 <_fflush_r>
  8108bc:	1025883a 	mov	r18,r2
  8108c0:	80800b17 	ldw	r2,44(r16)
  8108c4:	10000426 	beq	r2,zero,8108d8 <_fclose_r+0x60>
  8108c8:	81400717 	ldw	r5,28(r16)
  8108cc:	8809883a 	mov	r4,r17
  8108d0:	103ee83a 	callr	r2
  8108d4:	10002a16 	blt	r2,zero,810980 <_fclose_r+0x108>
  8108d8:	8080030b 	ldhu	r2,12(r16)
  8108dc:	1080200c 	andi	r2,r2,128
  8108e0:	1000231e 	bne	r2,zero,810970 <_fclose_r+0xf8>
  8108e4:	81400c17 	ldw	r5,48(r16)
  8108e8:	28000526 	beq	r5,zero,810900 <_fclose_r+0x88>
  8108ec:	80801004 	addi	r2,r16,64
  8108f0:	28800226 	beq	r5,r2,8108fc <_fclose_r+0x84>
  8108f4:	8809883a 	mov	r4,r17
  8108f8:	080dfb40 	call	80dfb4 <_free_r>
  8108fc:	80000c15 	stw	zero,48(r16)
  810900:	81401117 	ldw	r5,68(r16)
  810904:	28000326 	beq	r5,zero,810914 <_fclose_r+0x9c>
  810908:	8809883a 	mov	r4,r17
  81090c:	080dfb40 	call	80dfb4 <_free_r>
  810910:	80001115 	stw	zero,68(r16)
  810914:	8000030d 	sth	zero,12(r16)
  810918:	080dc240 	call	80dc24 <__sfp_lock_release>
  81091c:	9005883a 	mov	r2,r18
  810920:	dfc00317 	ldw	ra,12(sp)
  810924:	dc800217 	ldw	r18,8(sp)
  810928:	dc400117 	ldw	r17,4(sp)
  81092c:	dc000017 	ldw	r16,0(sp)
  810930:	dec00404 	addi	sp,sp,16
  810934:	f800283a 	ret
  810938:	080dc240 	call	80dc24 <__sfp_lock_release>
  81093c:	0025883a 	mov	r18,zero
  810940:	9005883a 	mov	r2,r18
  810944:	dfc00317 	ldw	ra,12(sp)
  810948:	dc800217 	ldw	r18,8(sp)
  81094c:	dc400117 	ldw	r17,4(sp)
  810950:	dc000017 	ldw	r16,0(sp)
  810954:	dec00404 	addi	sp,sp,16
  810958:	f800283a 	ret
  81095c:	8809883a 	mov	r4,r17
  810960:	080dc300 	call	80dc30 <__sinit>
  810964:	8080030f 	ldh	r2,12(r16)
  810968:	103fd11e 	bne	r2,zero,8108b0 <_fclose_r+0x38>
  81096c:	003ff206 	br	810938 <_fclose_r+0xc0>
  810970:	81400417 	ldw	r5,16(r16)
  810974:	8809883a 	mov	r4,r17
  810978:	080dfb40 	call	80dfb4 <_free_r>
  81097c:	003fd906 	br	8108e4 <_fclose_r+0x6c>
  810980:	04bfffc4 	movi	r18,-1
  810984:	003fd406 	br	8108d8 <_fclose_r+0x60>

00810988 <fclose>:
  810988:	008020b4 	movhi	r2,130
  81098c:	10b9c104 	addi	r2,r2,-6396
  810990:	200b883a 	mov	r5,r4
  810994:	11000017 	ldw	r4,0(r2)
  810998:	08108781 	jmpi	810878 <_fclose_r>

0081099c <_fstat_r>:
  81099c:	defffd04 	addi	sp,sp,-12
  8109a0:	dc000015 	stw	r16,0(sp)
  8109a4:	040020b4 	movhi	r16,130
  8109a8:	8400ef04 	addi	r16,r16,956
  8109ac:	dc400115 	stw	r17,4(sp)
  8109b0:	80000015 	stw	zero,0(r16)
  8109b4:	2023883a 	mov	r17,r4
  8109b8:	2809883a 	mov	r4,r5
  8109bc:	300b883a 	mov	r5,r6
  8109c0:	dfc00215 	stw	ra,8(sp)
  8109c4:	0811aa00 	call	811aa0 <fstat>
  8109c8:	1007883a 	mov	r3,r2
  8109cc:	00bfffc4 	movi	r2,-1
  8109d0:	18800626 	beq	r3,r2,8109ec <_fstat_r+0x50>
  8109d4:	1805883a 	mov	r2,r3
  8109d8:	dfc00217 	ldw	ra,8(sp)
  8109dc:	dc400117 	ldw	r17,4(sp)
  8109e0:	dc000017 	ldw	r16,0(sp)
  8109e4:	dec00304 	addi	sp,sp,12
  8109e8:	f800283a 	ret
  8109ec:	80800017 	ldw	r2,0(r16)
  8109f0:	103ff826 	beq	r2,zero,8109d4 <_fstat_r+0x38>
  8109f4:	88800015 	stw	r2,0(r17)
  8109f8:	1805883a 	mov	r2,r3
  8109fc:	dfc00217 	ldw	ra,8(sp)
  810a00:	dc400117 	ldw	r17,4(sp)
  810a04:	dc000017 	ldw	r16,0(sp)
  810a08:	dec00304 	addi	sp,sp,12
  810a0c:	f800283a 	ret

00810a10 <_isatty_r>:
  810a10:	defffd04 	addi	sp,sp,-12
  810a14:	dc000015 	stw	r16,0(sp)
  810a18:	040020b4 	movhi	r16,130
  810a1c:	8400ef04 	addi	r16,r16,956
  810a20:	dc400115 	stw	r17,4(sp)
  810a24:	80000015 	stw	zero,0(r16)
  810a28:	2023883a 	mov	r17,r4
  810a2c:	2809883a 	mov	r4,r5
  810a30:	dfc00215 	stw	ra,8(sp)
  810a34:	0811fb00 	call	811fb0 <isatty>
  810a38:	1007883a 	mov	r3,r2
  810a3c:	00bfffc4 	movi	r2,-1
  810a40:	18800626 	beq	r3,r2,810a5c <_isatty_r+0x4c>
  810a44:	1805883a 	mov	r2,r3
  810a48:	dfc00217 	ldw	ra,8(sp)
  810a4c:	dc400117 	ldw	r17,4(sp)
  810a50:	dc000017 	ldw	r16,0(sp)
  810a54:	dec00304 	addi	sp,sp,12
  810a58:	f800283a 	ret
  810a5c:	80800017 	ldw	r2,0(r16)
  810a60:	103ff826 	beq	r2,zero,810a44 <_isatty_r+0x34>
  810a64:	88800015 	stw	r2,0(r17)
  810a68:	1805883a 	mov	r2,r3
  810a6c:	dfc00217 	ldw	ra,8(sp)
  810a70:	dc400117 	ldw	r17,4(sp)
  810a74:	dc000017 	ldw	r16,0(sp)
  810a78:	dec00304 	addi	sp,sp,12
  810a7c:	f800283a 	ret

00810a80 <_lseek_r>:
  810a80:	defffd04 	addi	sp,sp,-12
  810a84:	dc000015 	stw	r16,0(sp)
  810a88:	040020b4 	movhi	r16,130
  810a8c:	8400ef04 	addi	r16,r16,956
  810a90:	dc400115 	stw	r17,4(sp)
  810a94:	80000015 	stw	zero,0(r16)
  810a98:	2023883a 	mov	r17,r4
  810a9c:	2809883a 	mov	r4,r5
  810aa0:	300b883a 	mov	r5,r6
  810aa4:	380d883a 	mov	r6,r7
  810aa8:	dfc00215 	stw	ra,8(sp)
  810aac:	08121bc0 	call	8121bc <lseek>
  810ab0:	1007883a 	mov	r3,r2
  810ab4:	00bfffc4 	movi	r2,-1
  810ab8:	18800626 	beq	r3,r2,810ad4 <_lseek_r+0x54>
  810abc:	1805883a 	mov	r2,r3
  810ac0:	dfc00217 	ldw	ra,8(sp)
  810ac4:	dc400117 	ldw	r17,4(sp)
  810ac8:	dc000017 	ldw	r16,0(sp)
  810acc:	dec00304 	addi	sp,sp,12
  810ad0:	f800283a 	ret
  810ad4:	80800017 	ldw	r2,0(r16)
  810ad8:	103ff826 	beq	r2,zero,810abc <_lseek_r+0x3c>
  810adc:	88800015 	stw	r2,0(r17)
  810ae0:	1805883a 	mov	r2,r3
  810ae4:	dfc00217 	ldw	ra,8(sp)
  810ae8:	dc400117 	ldw	r17,4(sp)
  810aec:	dc000017 	ldw	r16,0(sp)
  810af0:	dec00304 	addi	sp,sp,12
  810af4:	f800283a 	ret

00810af8 <_read_r>:
  810af8:	defffd04 	addi	sp,sp,-12
  810afc:	dc000015 	stw	r16,0(sp)
  810b00:	040020b4 	movhi	r16,130
  810b04:	8400ef04 	addi	r16,r16,956
  810b08:	dc400115 	stw	r17,4(sp)
  810b0c:	80000015 	stw	zero,0(r16)
  810b10:	2023883a 	mov	r17,r4
  810b14:	2809883a 	mov	r4,r5
  810b18:	300b883a 	mov	r5,r6
  810b1c:	380d883a 	mov	r6,r7
  810b20:	dfc00215 	stw	ra,8(sp)
  810b24:	08123b80 	call	8123b8 <read>
  810b28:	1007883a 	mov	r3,r2
  810b2c:	00bfffc4 	movi	r2,-1
  810b30:	18800626 	beq	r3,r2,810b4c <_read_r+0x54>
  810b34:	1805883a 	mov	r2,r3
  810b38:	dfc00217 	ldw	ra,8(sp)
  810b3c:	dc400117 	ldw	r17,4(sp)
  810b40:	dc000017 	ldw	r16,0(sp)
  810b44:	dec00304 	addi	sp,sp,12
  810b48:	f800283a 	ret
  810b4c:	80800017 	ldw	r2,0(r16)
  810b50:	103ff826 	beq	r2,zero,810b34 <_read_r+0x3c>
  810b54:	88800015 	stw	r2,0(r17)
  810b58:	1805883a 	mov	r2,r3
  810b5c:	dfc00217 	ldw	ra,8(sp)
  810b60:	dc400117 	ldw	r17,4(sp)
  810b64:	dc000017 	ldw	r16,0(sp)
  810b68:	dec00304 	addi	sp,sp,12
  810b6c:	f800283a 	ret

00810b70 <__udivdi3>:
  810b70:	defff004 	addi	sp,sp,-64
  810b74:	2005883a 	mov	r2,r4
  810b78:	3011883a 	mov	r8,r6
  810b7c:	df000e15 	stw	fp,56(sp)
  810b80:	dd000a15 	stw	r20,40(sp)
  810b84:	dc000615 	stw	r16,24(sp)
  810b88:	dfc00f15 	stw	ra,60(sp)
  810b8c:	ddc00d15 	stw	r23,52(sp)
  810b90:	dd800c15 	stw	r22,48(sp)
  810b94:	dd400b15 	stw	r21,44(sp)
  810b98:	dcc00915 	stw	r19,36(sp)
  810b9c:	dc800815 	stw	r18,32(sp)
  810ba0:	dc400715 	stw	r17,28(sp)
  810ba4:	4021883a 	mov	r16,r8
  810ba8:	1039883a 	mov	fp,r2
  810bac:	2829883a 	mov	r20,r5
  810bb0:	38003b1e 	bne	r7,zero,810ca0 <__udivdi3+0x130>
  810bb4:	2a005c36 	bltu	r5,r8,810d28 <__udivdi3+0x1b8>
  810bb8:	4000a626 	beq	r8,zero,810e54 <__udivdi3+0x2e4>
  810bbc:	00bfffd4 	movui	r2,65535
  810bc0:	14009e36 	bltu	r2,r16,810e3c <__udivdi3+0x2cc>
  810bc4:	00803fc4 	movi	r2,255
  810bc8:	14013d36 	bltu	r2,r16,8110c0 <__udivdi3+0x550>
  810bcc:	000b883a 	mov	r5,zero
  810bd0:	0005883a 	mov	r2,zero
  810bd4:	8084d83a 	srl	r2,r16,r2
  810bd8:	010020b4 	movhi	r4,130
  810bdc:	2131de04 	addi	r4,r4,-14472
  810be0:	01800804 	movi	r6,32
  810be4:	1105883a 	add	r2,r2,r4
  810be8:	10c00003 	ldbu	r3,0(r2)
  810bec:	28c7883a 	add	r3,r5,r3
  810bf0:	30edc83a 	sub	r22,r6,r3
  810bf4:	b000ee1e 	bne	r22,zero,810fb0 <__udivdi3+0x440>
  810bf8:	802ad43a 	srli	r21,r16,16
  810bfc:	00800044 	movi	r2,1
  810c00:	a423c83a 	sub	r17,r20,r16
  810c04:	85ffffcc 	andi	r23,r16,65535
  810c08:	d8800315 	stw	r2,12(sp)
  810c0c:	8809883a 	mov	r4,r17
  810c10:	a80b883a 	mov	r5,r21
  810c14:	0808e8c0 	call	808e8c <__udivsi3>
  810c18:	8809883a 	mov	r4,r17
  810c1c:	a80b883a 	mov	r5,r21
  810c20:	102d883a 	mov	r22,r2
  810c24:	0808e940 	call	808e94 <__umodsi3>
  810c28:	1004943a 	slli	r2,r2,16
  810c2c:	e006d43a 	srli	r3,fp,16
  810c30:	bda3383a 	mul	r17,r23,r22
  810c34:	10c4b03a 	or	r2,r2,r3
  810c38:	1440042e 	bgeu	r2,r17,810c4c <__udivdi3+0xdc>
  810c3c:	1405883a 	add	r2,r2,r16
  810c40:	b5bfffc4 	addi	r22,r22,-1
  810c44:	14000136 	bltu	r2,r16,810c4c <__udivdi3+0xdc>
  810c48:	14413d36 	bltu	r2,r17,811140 <__udivdi3+0x5d0>
  810c4c:	1463c83a 	sub	r17,r2,r17
  810c50:	8809883a 	mov	r4,r17
  810c54:	a80b883a 	mov	r5,r21
  810c58:	0808e8c0 	call	808e8c <__udivsi3>
  810c5c:	8809883a 	mov	r4,r17
  810c60:	a80b883a 	mov	r5,r21
  810c64:	1029883a 	mov	r20,r2
  810c68:	0808e940 	call	808e94 <__umodsi3>
  810c6c:	1004943a 	slli	r2,r2,16
  810c70:	bd09383a 	mul	r4,r23,r20
  810c74:	e0ffffcc 	andi	r3,fp,65535
  810c78:	10c4b03a 	or	r2,r2,r3
  810c7c:	1100042e 	bgeu	r2,r4,810c90 <__udivdi3+0x120>
  810c80:	8085883a 	add	r2,r16,r2
  810c84:	a53fffc4 	addi	r20,r20,-1
  810c88:	14000136 	bltu	r2,r16,810c90 <__udivdi3+0x120>
  810c8c:	11012036 	bltu	r2,r4,811110 <__udivdi3+0x5a0>
  810c90:	b004943a 	slli	r2,r22,16
  810c94:	d9000317 	ldw	r4,12(sp)
  810c98:	a084b03a 	or	r2,r20,r2
  810c9c:	00001506 	br	810cf4 <__udivdi3+0x184>
  810ca0:	380d883a 	mov	r6,r7
  810ca4:	29c06236 	bltu	r5,r7,810e30 <__udivdi3+0x2c0>
  810ca8:	00bfffd4 	movui	r2,65535
  810cac:	11c05a36 	bltu	r2,r7,810e18 <__udivdi3+0x2a8>
  810cb0:	00803fc4 	movi	r2,255
  810cb4:	11c0fc36 	bltu	r2,r7,8110a8 <__udivdi3+0x538>
  810cb8:	000b883a 	mov	r5,zero
  810cbc:	0005883a 	mov	r2,zero
  810cc0:	3084d83a 	srl	r2,r6,r2
  810cc4:	010020b4 	movhi	r4,130
  810cc8:	2131de04 	addi	r4,r4,-14472
  810ccc:	01c00804 	movi	r7,32
  810cd0:	1105883a 	add	r2,r2,r4
  810cd4:	10c00003 	ldbu	r3,0(r2)
  810cd8:	28c7883a 	add	r3,r5,r3
  810cdc:	38efc83a 	sub	r23,r7,r3
  810ce0:	b800691e 	bne	r23,zero,810e88 <__udivdi3+0x318>
  810ce4:	35000136 	bltu	r6,r20,810cec <__udivdi3+0x17c>
  810ce8:	e4005136 	bltu	fp,r16,810e30 <__udivdi3+0x2c0>
  810cec:	00800044 	movi	r2,1
  810cf0:	0009883a 	mov	r4,zero
  810cf4:	2007883a 	mov	r3,r4
  810cf8:	dfc00f17 	ldw	ra,60(sp)
  810cfc:	df000e17 	ldw	fp,56(sp)
  810d00:	ddc00d17 	ldw	r23,52(sp)
  810d04:	dd800c17 	ldw	r22,48(sp)
  810d08:	dd400b17 	ldw	r21,44(sp)
  810d0c:	dd000a17 	ldw	r20,40(sp)
  810d10:	dcc00917 	ldw	r19,36(sp)
  810d14:	dc800817 	ldw	r18,32(sp)
  810d18:	dc400717 	ldw	r17,28(sp)
  810d1c:	dc000617 	ldw	r16,24(sp)
  810d20:	dec01004 	addi	sp,sp,64
  810d24:	f800283a 	ret
  810d28:	00bfffd4 	movui	r2,65535
  810d2c:	12005036 	bltu	r2,r8,810e70 <__udivdi3+0x300>
  810d30:	00803fc4 	movi	r2,255
  810d34:	1200e836 	bltu	r2,r8,8110d8 <__udivdi3+0x568>
  810d38:	000b883a 	mov	r5,zero
  810d3c:	0005883a 	mov	r2,zero
  810d40:	8084d83a 	srl	r2,r16,r2
  810d44:	010020b4 	movhi	r4,130
  810d48:	2131de04 	addi	r4,r4,-14472
  810d4c:	01800804 	movi	r6,32
  810d50:	1105883a 	add	r2,r2,r4
  810d54:	10c00003 	ldbu	r3,0(r2)
  810d58:	28c7883a 	add	r3,r5,r3
  810d5c:	30cbc83a 	sub	r5,r6,r3
  810d60:	28000626 	beq	r5,zero,810d7c <__udivdi3+0x20c>
  810d64:	3145c83a 	sub	r2,r6,r5
  810d68:	e084d83a 	srl	r2,fp,r2
  810d6c:	a146983a 	sll	r3,r20,r5
  810d70:	e178983a 	sll	fp,fp,r5
  810d74:	8160983a 	sll	r16,r16,r5
  810d78:	18a8b03a 	or	r20,r3,r2
  810d7c:	802ad43a 	srli	r21,r16,16
  810d80:	a009883a 	mov	r4,r20
  810d84:	85ffffcc 	andi	r23,r16,65535
  810d88:	a80b883a 	mov	r5,r21
  810d8c:	0808e8c0 	call	808e8c <__udivsi3>
  810d90:	a009883a 	mov	r4,r20
  810d94:	a80b883a 	mov	r5,r21
  810d98:	102d883a 	mov	r22,r2
  810d9c:	0808e940 	call	808e94 <__umodsi3>
  810da0:	1004943a 	slli	r2,r2,16
  810da4:	e006d43a 	srli	r3,fp,16
  810da8:	bda3383a 	mul	r17,r23,r22
  810dac:	10c4b03a 	or	r2,r2,r3
  810db0:	1440042e 	bgeu	r2,r17,810dc4 <__udivdi3+0x254>
  810db4:	1405883a 	add	r2,r2,r16
  810db8:	b5bfffc4 	addi	r22,r22,-1
  810dbc:	14000136 	bltu	r2,r16,810dc4 <__udivdi3+0x254>
  810dc0:	1440d536 	bltu	r2,r17,811118 <__udivdi3+0x5a8>
  810dc4:	1463c83a 	sub	r17,r2,r17
  810dc8:	8809883a 	mov	r4,r17
  810dcc:	a80b883a 	mov	r5,r21
  810dd0:	0808e8c0 	call	808e8c <__udivsi3>
  810dd4:	8809883a 	mov	r4,r17
  810dd8:	a80b883a 	mov	r5,r21
  810ddc:	1029883a 	mov	r20,r2
  810de0:	0808e940 	call	808e94 <__umodsi3>
  810de4:	1004943a 	slli	r2,r2,16
  810de8:	bd09383a 	mul	r4,r23,r20
  810dec:	e0ffffcc 	andi	r3,fp,65535
  810df0:	10c4b03a 	or	r2,r2,r3
  810df4:	1100042e 	bgeu	r2,r4,810e08 <__udivdi3+0x298>
  810df8:	8085883a 	add	r2,r16,r2
  810dfc:	a53fffc4 	addi	r20,r20,-1
  810e00:	14000136 	bltu	r2,r16,810e08 <__udivdi3+0x298>
  810e04:	1100c736 	bltu	r2,r4,811124 <__udivdi3+0x5b4>
  810e08:	b004943a 	slli	r2,r22,16
  810e0c:	0009883a 	mov	r4,zero
  810e10:	a084b03a 	or	r2,r20,r2
  810e14:	003fb706 	br	810cf4 <__udivdi3+0x184>
  810e18:	00804034 	movhi	r2,256
  810e1c:	10bfffc4 	addi	r2,r2,-1
  810e20:	11c0a436 	bltu	r2,r7,8110b4 <__udivdi3+0x544>
  810e24:	01400404 	movi	r5,16
  810e28:	2805883a 	mov	r2,r5
  810e2c:	003fa406 	br	810cc0 <__udivdi3+0x150>
  810e30:	0005883a 	mov	r2,zero
  810e34:	0009883a 	mov	r4,zero
  810e38:	003fae06 	br	810cf4 <__udivdi3+0x184>
  810e3c:	00804034 	movhi	r2,256
  810e40:	10bfffc4 	addi	r2,r2,-1
  810e44:	1400a136 	bltu	r2,r16,8110cc <__udivdi3+0x55c>
  810e48:	01400404 	movi	r5,16
  810e4c:	2805883a 	mov	r2,r5
  810e50:	003f6006 	br	810bd4 <__udivdi3+0x64>
  810e54:	01000044 	movi	r4,1
  810e58:	000b883a 	mov	r5,zero
  810e5c:	0808e8c0 	call	808e8c <__udivsi3>
  810e60:	1021883a 	mov	r16,r2
  810e64:	00bfffd4 	movui	r2,65535
  810e68:	143ff436 	bltu	r2,r16,810e3c <__udivdi3+0x2cc>
  810e6c:	003f5506 	br	810bc4 <__udivdi3+0x54>
  810e70:	00804034 	movhi	r2,256
  810e74:	10bfffc4 	addi	r2,r2,-1
  810e78:	12009a36 	bltu	r2,r8,8110e4 <__udivdi3+0x574>
  810e7c:	01400404 	movi	r5,16
  810e80:	2805883a 	mov	r2,r5
  810e84:	003fae06 	br	810d40 <__udivdi3+0x1d0>
  810e88:	3dc5c83a 	sub	r2,r7,r23
  810e8c:	35c8983a 	sll	r4,r6,r23
  810e90:	8086d83a 	srl	r3,r16,r2
  810e94:	a0a2d83a 	srl	r17,r20,r2
  810e98:	e084d83a 	srl	r2,fp,r2
  810e9c:	20eab03a 	or	r21,r4,r3
  810ea0:	a82cd43a 	srli	r22,r21,16
  810ea4:	a5c6983a 	sll	r3,r20,r23
  810ea8:	8809883a 	mov	r4,r17
  810eac:	b00b883a 	mov	r5,r22
  810eb0:	1886b03a 	or	r3,r3,r2
  810eb4:	d8c00215 	stw	r3,8(sp)
  810eb8:	0808e8c0 	call	808e8c <__udivsi3>
  810ebc:	8809883a 	mov	r4,r17
  810ec0:	b00b883a 	mov	r5,r22
  810ec4:	1029883a 	mov	r20,r2
  810ec8:	0808e940 	call	808e94 <__umodsi3>
  810ecc:	a8ffffcc 	andi	r3,r21,65535
  810ed0:	d8c00515 	stw	r3,20(sp)
  810ed4:	d9000217 	ldw	r4,8(sp)
  810ed8:	d9400517 	ldw	r5,20(sp)
  810edc:	1004943a 	slli	r2,r2,16
  810ee0:	2006d43a 	srli	r3,r4,16
  810ee4:	85e0983a 	sll	r16,r16,r23
  810ee8:	2d23383a 	mul	r17,r5,r20
  810eec:	10c4b03a 	or	r2,r2,r3
  810ef0:	dc000015 	stw	r16,0(sp)
  810ef4:	1440032e 	bgeu	r2,r17,810f04 <__udivdi3+0x394>
  810ef8:	1545883a 	add	r2,r2,r21
  810efc:	a53fffc4 	addi	r20,r20,-1
  810f00:	15407f2e 	bgeu	r2,r21,811100 <__udivdi3+0x590>
  810f04:	1463c83a 	sub	r17,r2,r17
  810f08:	8809883a 	mov	r4,r17
  810f0c:	b00b883a 	mov	r5,r22
  810f10:	0808e8c0 	call	808e8c <__udivsi3>
  810f14:	8809883a 	mov	r4,r17
  810f18:	b00b883a 	mov	r5,r22
  810f1c:	1021883a 	mov	r16,r2
  810f20:	0808e940 	call	808e94 <__umodsi3>
  810f24:	d8c00517 	ldw	r3,20(sp)
  810f28:	d9000217 	ldw	r4,8(sp)
  810f2c:	1004943a 	slli	r2,r2,16
  810f30:	1c0f383a 	mul	r7,r3,r16
  810f34:	20ffffcc 	andi	r3,r4,65535
  810f38:	10e2b03a 	or	r17,r2,r3
  810f3c:	89c0032e 	bgeu	r17,r7,810f4c <__udivdi3+0x3dc>
  810f40:	8d63883a 	add	r17,r17,r21
  810f44:	843fffc4 	addi	r16,r16,-1
  810f48:	8d40692e 	bgeu	r17,r21,8110f0 <__udivdi3+0x580>
  810f4c:	a008943a 	slli	r4,r20,16
  810f50:	d9400017 	ldw	r5,0(sp)
  810f54:	89e3c83a 	sub	r17,r17,r7
  810f58:	8110b03a 	or	r8,r16,r4
  810f5c:	280cd43a 	srli	r6,r5,16
  810f60:	28ffffcc 	andi	r3,r5,65535
  810f64:	40bfffcc 	andi	r2,r8,65535
  810f68:	400ad43a 	srli	r5,r8,16
  810f6c:	10d3383a 	mul	r9,r2,r3
  810f70:	1185383a 	mul	r2,r2,r6
  810f74:	28c7383a 	mul	r3,r5,r3
  810f78:	4808d43a 	srli	r4,r9,16
  810f7c:	298b383a 	mul	r5,r5,r6
  810f80:	10c5883a 	add	r2,r2,r3
  810f84:	2089883a 	add	r4,r4,r2
  810f88:	20c0022e 	bgeu	r4,r3,810f94 <__udivdi3+0x424>
  810f8c:	00800074 	movhi	r2,1
  810f90:	288b883a 	add	r5,r5,r2
  810f94:	2004d43a 	srli	r2,r4,16
  810f98:	288b883a 	add	r5,r5,r2
  810f9c:	89403f36 	bltu	r17,r5,81109c <__udivdi3+0x52c>
  810fa0:	89403926 	beq	r17,r5,811088 <__udivdi3+0x518>
  810fa4:	4005883a 	mov	r2,r8
  810fa8:	0009883a 	mov	r4,zero
  810fac:	003f5106 	br	810cf4 <__udivdi3+0x184>
  810fb0:	85a0983a 	sll	r16,r16,r22
  810fb4:	3585c83a 	sub	r2,r6,r22
  810fb8:	a0a2d83a 	srl	r17,r20,r2
  810fbc:	802ad43a 	srli	r21,r16,16
  810fc0:	e084d83a 	srl	r2,fp,r2
  810fc4:	a586983a 	sll	r3,r20,r22
  810fc8:	8809883a 	mov	r4,r17
  810fcc:	a80b883a 	mov	r5,r21
  810fd0:	1886b03a 	or	r3,r3,r2
  810fd4:	d8c00115 	stw	r3,4(sp)
  810fd8:	0808e8c0 	call	808e8c <__udivsi3>
  810fdc:	8809883a 	mov	r4,r17
  810fe0:	a80b883a 	mov	r5,r21
  810fe4:	d8800415 	stw	r2,16(sp)
  810fe8:	0808e940 	call	808e94 <__umodsi3>
  810fec:	d9000117 	ldw	r4,4(sp)
  810ff0:	d9400417 	ldw	r5,16(sp)
  810ff4:	1004943a 	slli	r2,r2,16
  810ff8:	85ffffcc 	andi	r23,r16,65535
  810ffc:	2006d43a 	srli	r3,r4,16
  811000:	b963383a 	mul	r17,r23,r5
  811004:	10c4b03a 	or	r2,r2,r3
  811008:	1440042e 	bgeu	r2,r17,81101c <__udivdi3+0x4ac>
  81100c:	297fffc4 	addi	r5,r5,-1
  811010:	1405883a 	add	r2,r2,r16
  811014:	d9400415 	stw	r5,16(sp)
  811018:	1400442e 	bgeu	r2,r16,81112c <__udivdi3+0x5bc>
  81101c:	1463c83a 	sub	r17,r2,r17
  811020:	8809883a 	mov	r4,r17
  811024:	a80b883a 	mov	r5,r21
  811028:	0808e8c0 	call	808e8c <__udivsi3>
  81102c:	8809883a 	mov	r4,r17
  811030:	a80b883a 	mov	r5,r21
  811034:	1029883a 	mov	r20,r2
  811038:	0808e940 	call	808e94 <__umodsi3>
  81103c:	d9400117 	ldw	r5,4(sp)
  811040:	1004943a 	slli	r2,r2,16
  811044:	bd09383a 	mul	r4,r23,r20
  811048:	28ffffcc 	andi	r3,r5,65535
  81104c:	10c6b03a 	or	r3,r2,r3
  811050:	1900062e 	bgeu	r3,r4,81106c <__udivdi3+0x4fc>
  811054:	1c07883a 	add	r3,r3,r16
  811058:	a53fffc4 	addi	r20,r20,-1
  81105c:	1c000336 	bltu	r3,r16,81106c <__udivdi3+0x4fc>
  811060:	1900022e 	bgeu	r3,r4,81106c <__udivdi3+0x4fc>
  811064:	a53fffc4 	addi	r20,r20,-1
  811068:	1c07883a 	add	r3,r3,r16
  81106c:	d9400417 	ldw	r5,16(sp)
  811070:	e5b8983a 	sll	fp,fp,r22
  811074:	1923c83a 	sub	r17,r3,r4
  811078:	2804943a 	slli	r2,r5,16
  81107c:	a0a8b03a 	or	r20,r20,r2
  811080:	dd000315 	stw	r20,12(sp)
  811084:	003ee106 	br	810c0c <__udivdi3+0x9c>
  811088:	2004943a 	slli	r2,r4,16
  81108c:	e5c8983a 	sll	r4,fp,r23
  811090:	48ffffcc 	andi	r3,r9,65535
  811094:	10c5883a 	add	r2,r2,r3
  811098:	20bfc22e 	bgeu	r4,r2,810fa4 <__udivdi3+0x434>
  81109c:	40bfffc4 	addi	r2,r8,-1
  8110a0:	0009883a 	mov	r4,zero
  8110a4:	003f1306 	br	810cf4 <__udivdi3+0x184>
  8110a8:	01400204 	movi	r5,8
  8110ac:	2805883a 	mov	r2,r5
  8110b0:	003f0306 	br	810cc0 <__udivdi3+0x150>
  8110b4:	01400604 	movi	r5,24
  8110b8:	2805883a 	mov	r2,r5
  8110bc:	003f0006 	br	810cc0 <__udivdi3+0x150>
  8110c0:	01400204 	movi	r5,8
  8110c4:	2805883a 	mov	r2,r5
  8110c8:	003ec206 	br	810bd4 <__udivdi3+0x64>
  8110cc:	01400604 	movi	r5,24
  8110d0:	2805883a 	mov	r2,r5
  8110d4:	003ebf06 	br	810bd4 <__udivdi3+0x64>
  8110d8:	01400204 	movi	r5,8
  8110dc:	2805883a 	mov	r2,r5
  8110e0:	003f1706 	br	810d40 <__udivdi3+0x1d0>
  8110e4:	01400604 	movi	r5,24
  8110e8:	2805883a 	mov	r2,r5
  8110ec:	003f1406 	br	810d40 <__udivdi3+0x1d0>
  8110f0:	89ff962e 	bgeu	r17,r7,810f4c <__udivdi3+0x3dc>
  8110f4:	8d63883a 	add	r17,r17,r21
  8110f8:	843fffc4 	addi	r16,r16,-1
  8110fc:	003f9306 	br	810f4c <__udivdi3+0x3dc>
  811100:	147f802e 	bgeu	r2,r17,810f04 <__udivdi3+0x394>
  811104:	a53fffc4 	addi	r20,r20,-1
  811108:	1545883a 	add	r2,r2,r21
  81110c:	003f7d06 	br	810f04 <__udivdi3+0x394>
  811110:	a53fffc4 	addi	r20,r20,-1
  811114:	003ede06 	br	810c90 <__udivdi3+0x120>
  811118:	b5bfffc4 	addi	r22,r22,-1
  81111c:	1405883a 	add	r2,r2,r16
  811120:	003f2806 	br	810dc4 <__udivdi3+0x254>
  811124:	a53fffc4 	addi	r20,r20,-1
  811128:	003f3706 	br	810e08 <__udivdi3+0x298>
  81112c:	147fbb2e 	bgeu	r2,r17,81101c <__udivdi3+0x4ac>
  811130:	297fffc4 	addi	r5,r5,-1
  811134:	1405883a 	add	r2,r2,r16
  811138:	d9400415 	stw	r5,16(sp)
  81113c:	003fb706 	br	81101c <__udivdi3+0x4ac>
  811140:	b5bfffc4 	addi	r22,r22,-1
  811144:	1405883a 	add	r2,r2,r16
  811148:	003ec006 	br	810c4c <__udivdi3+0xdc>

0081114c <__umoddi3>:
  81114c:	defff104 	addi	sp,sp,-60
  811150:	dd800b15 	stw	r22,44(sp)
  811154:	dd000915 	stw	r20,36(sp)
  811158:	dc000515 	stw	r16,20(sp)
  81115c:	dfc00e15 	stw	ra,56(sp)
  811160:	df000d15 	stw	fp,52(sp)
  811164:	ddc00c15 	stw	r23,48(sp)
  811168:	dd400a15 	stw	r21,40(sp)
  81116c:	dcc00815 	stw	r19,32(sp)
  811170:	dc800715 	stw	r18,28(sp)
  811174:	dc400615 	stw	r17,24(sp)
  811178:	3021883a 	mov	r16,r6
  81117c:	202d883a 	mov	r22,r4
  811180:	2829883a 	mov	r20,r5
  811184:	38002b1e 	bne	r7,zero,811234 <__umoddi3+0xe8>
  811188:	29805036 	bltu	r5,r6,8112cc <__umoddi3+0x180>
  81118c:	30008a26 	beq	r6,zero,8113b8 <__umoddi3+0x26c>
  811190:	00bfffd4 	movui	r2,65535
  811194:	14008236 	bltu	r2,r16,8113a0 <__umoddi3+0x254>
  811198:	00803fc4 	movi	r2,255
  81119c:	14013636 	bltu	r2,r16,811678 <__umoddi3+0x52c>
  8111a0:	000b883a 	mov	r5,zero
  8111a4:	0005883a 	mov	r2,zero
  8111a8:	8084d83a 	srl	r2,r16,r2
  8111ac:	010020b4 	movhi	r4,130
  8111b0:	2131de04 	addi	r4,r4,-14472
  8111b4:	01800804 	movi	r6,32
  8111b8:	1105883a 	add	r2,r2,r4
  8111bc:	10c00003 	ldbu	r3,0(r2)
  8111c0:	28c7883a 	add	r3,r5,r3
  8111c4:	30efc83a 	sub	r23,r6,r3
  8111c8:	b800941e 	bne	r23,zero,81141c <__umoddi3+0x2d0>
  8111cc:	802ad43a 	srli	r21,r16,16
  8111d0:	a423c83a 	sub	r17,r20,r16
  8111d4:	0039883a 	mov	fp,zero
  8111d8:	853fffcc 	andi	r20,r16,65535
  8111dc:	8809883a 	mov	r4,r17
  8111e0:	a80b883a 	mov	r5,r21
  8111e4:	0808e8c0 	call	808e8c <__udivsi3>
  8111e8:	8809883a 	mov	r4,r17
  8111ec:	a80b883a 	mov	r5,r21
  8111f0:	a0a3383a 	mul	r17,r20,r2
  8111f4:	0808e940 	call	808e94 <__umodsi3>
  8111f8:	1004943a 	slli	r2,r2,16
  8111fc:	b006d43a 	srli	r3,r22,16
  811200:	10c4b03a 	or	r2,r2,r3
  811204:	1440032e 	bgeu	r2,r17,811214 <__umoddi3+0xc8>
  811208:	1405883a 	add	r2,r2,r16
  81120c:	14000136 	bltu	r2,r16,811214 <__umoddi3+0xc8>
  811210:	14413536 	bltu	r2,r17,8116e8 <__umoddi3+0x59c>
  811214:	1463c83a 	sub	r17,r2,r17
  811218:	8809883a 	mov	r4,r17
  81121c:	a80b883a 	mov	r5,r21
  811220:	0808e8c0 	call	808e8c <__udivsi3>
  811224:	8809883a 	mov	r4,r17
  811228:	a0a3383a 	mul	r17,r20,r2
  81122c:	a80b883a 	mov	r5,r21
  811230:	00004d06 	br	811368 <__umoddi3+0x21c>
  811234:	380d883a 	mov	r6,r7
  811238:	29c0102e 	bgeu	r5,r7,81127c <__umoddi3+0x130>
  81123c:	2011883a 	mov	r8,r4
  811240:	2813883a 	mov	r9,r5
  811244:	4005883a 	mov	r2,r8
  811248:	4807883a 	mov	r3,r9
  81124c:	dfc00e17 	ldw	ra,56(sp)
  811250:	df000d17 	ldw	fp,52(sp)
  811254:	ddc00c17 	ldw	r23,48(sp)
  811258:	dd800b17 	ldw	r22,44(sp)
  81125c:	dd400a17 	ldw	r21,40(sp)
  811260:	dd000917 	ldw	r20,36(sp)
  811264:	dcc00817 	ldw	r19,32(sp)
  811268:	dc800717 	ldw	r18,28(sp)
  81126c:	dc400617 	ldw	r17,24(sp)
  811270:	dc000517 	ldw	r16,20(sp)
  811274:	dec00f04 	addi	sp,sp,60
  811278:	f800283a 	ret
  81127c:	00bfffd4 	movui	r2,65535
  811280:	11c05a36 	bltu	r2,r7,8113ec <__umoddi3+0x2a0>
  811284:	00803fc4 	movi	r2,255
  811288:	11c0fe36 	bltu	r2,r7,811684 <__umoddi3+0x538>
  81128c:	000b883a 	mov	r5,zero
  811290:	0005883a 	mov	r2,zero
  811294:	3084d83a 	srl	r2,r6,r2
  811298:	010020b4 	movhi	r4,130
  81129c:	2131de04 	addi	r4,r4,-14472
  8112a0:	01c00804 	movi	r7,32
  8112a4:	1105883a 	add	r2,r2,r4
  8112a8:	10c00003 	ldbu	r3,0(r2)
  8112ac:	28c7883a 	add	r3,r5,r3
  8112b0:	38ebc83a 	sub	r21,r7,r3
  8112b4:	a800851e 	bne	r21,zero,8114cc <__umoddi3+0x380>
  8112b8:	35005236 	bltu	r6,r20,811404 <__umoddi3+0x2b8>
  8112bc:	b400512e 	bgeu	r22,r16,811404 <__umoddi3+0x2b8>
  8112c0:	b011883a 	mov	r8,r22
  8112c4:	a013883a 	mov	r9,r20
  8112c8:	003fde06 	br	811244 <__umoddi3+0xf8>
  8112cc:	00bfffd4 	movui	r2,65535
  8112d0:	11804036 	bltu	r2,r6,8113d4 <__umoddi3+0x288>
  8112d4:	00803fc4 	movi	r2,255
  8112d8:	1180ed36 	bltu	r2,r6,811690 <__umoddi3+0x544>
  8112dc:	000b883a 	mov	r5,zero
  8112e0:	0005883a 	mov	r2,zero
  8112e4:	8084d83a 	srl	r2,r16,r2
  8112e8:	010020b4 	movhi	r4,130
  8112ec:	2131de04 	addi	r4,r4,-14472
  8112f0:	01800804 	movi	r6,32
  8112f4:	1105883a 	add	r2,r2,r4
  8112f8:	10c00003 	ldbu	r3,0(r2)
  8112fc:	28c7883a 	add	r3,r5,r3
  811300:	30c7c83a 	sub	r3,r6,r3
  811304:	1800bf1e 	bne	r3,zero,811604 <__umoddi3+0x4b8>
  811308:	0039883a 	mov	fp,zero
  81130c:	802ad43a 	srli	r21,r16,16
  811310:	a009883a 	mov	r4,r20
  811314:	85ffffcc 	andi	r23,r16,65535
  811318:	a80b883a 	mov	r5,r21
  81131c:	0808e8c0 	call	808e8c <__udivsi3>
  811320:	a009883a 	mov	r4,r20
  811324:	a80b883a 	mov	r5,r21
  811328:	b8a3383a 	mul	r17,r23,r2
  81132c:	0808e940 	call	808e94 <__umodsi3>
  811330:	1004943a 	slli	r2,r2,16
  811334:	b006d43a 	srli	r3,r22,16
  811338:	10c4b03a 	or	r2,r2,r3
  81133c:	1440032e 	bgeu	r2,r17,81134c <__umoddi3+0x200>
  811340:	1405883a 	add	r2,r2,r16
  811344:	14000136 	bltu	r2,r16,81134c <__umoddi3+0x200>
  811348:	1440e536 	bltu	r2,r17,8116e0 <__umoddi3+0x594>
  81134c:	1463c83a 	sub	r17,r2,r17
  811350:	8809883a 	mov	r4,r17
  811354:	a80b883a 	mov	r5,r21
  811358:	0808e8c0 	call	808e8c <__udivsi3>
  81135c:	8809883a 	mov	r4,r17
  811360:	b8a3383a 	mul	r17,r23,r2
  811364:	a80b883a 	mov	r5,r21
  811368:	0808e940 	call	808e94 <__umodsi3>
  81136c:	1004943a 	slli	r2,r2,16
  811370:	b0ffffcc 	andi	r3,r22,65535
  811374:	10c4b03a 	or	r2,r2,r3
  811378:	1440042e 	bgeu	r2,r17,81138c <__umoddi3+0x240>
  81137c:	1405883a 	add	r2,r2,r16
  811380:	14000236 	bltu	r2,r16,81138c <__umoddi3+0x240>
  811384:	1440012e 	bgeu	r2,r17,81138c <__umoddi3+0x240>
  811388:	1405883a 	add	r2,r2,r16
  81138c:	1445c83a 	sub	r2,r2,r17
  811390:	1724d83a 	srl	r18,r2,fp
  811394:	0013883a 	mov	r9,zero
  811398:	9011883a 	mov	r8,r18
  81139c:	003fa906 	br	811244 <__umoddi3+0xf8>
  8113a0:	00804034 	movhi	r2,256
  8113a4:	10bfffc4 	addi	r2,r2,-1
  8113a8:	1400b036 	bltu	r2,r16,81166c <__umoddi3+0x520>
  8113ac:	01400404 	movi	r5,16
  8113b0:	2805883a 	mov	r2,r5
  8113b4:	003f7c06 	br	8111a8 <__umoddi3+0x5c>
  8113b8:	01000044 	movi	r4,1
  8113bc:	000b883a 	mov	r5,zero
  8113c0:	0808e8c0 	call	808e8c <__udivsi3>
  8113c4:	1021883a 	mov	r16,r2
  8113c8:	00bfffd4 	movui	r2,65535
  8113cc:	143ff436 	bltu	r2,r16,8113a0 <__umoddi3+0x254>
  8113d0:	003f7106 	br	811198 <__umoddi3+0x4c>
  8113d4:	00804034 	movhi	r2,256
  8113d8:	10bfffc4 	addi	r2,r2,-1
  8113dc:	1180af36 	bltu	r2,r6,81169c <__umoddi3+0x550>
  8113e0:	01400404 	movi	r5,16
  8113e4:	2805883a 	mov	r2,r5
  8113e8:	003fbe06 	br	8112e4 <__umoddi3+0x198>
  8113ec:	00804034 	movhi	r2,256
  8113f0:	10bfffc4 	addi	r2,r2,-1
  8113f4:	11c0ac36 	bltu	r2,r7,8116a8 <__umoddi3+0x55c>
  8113f8:	01400404 	movi	r5,16
  8113fc:	2805883a 	mov	r2,r5
  811400:	003fa406 	br	811294 <__umoddi3+0x148>
  811404:	b409c83a 	sub	r4,r22,r16
  811408:	b105803a 	cmpltu	r2,r22,r4
  81140c:	a187c83a 	sub	r3,r20,r6
  811410:	18a9c83a 	sub	r20,r3,r2
  811414:	202d883a 	mov	r22,r4
  811418:	003fa906 	br	8112c0 <__umoddi3+0x174>
  81141c:	85e0983a 	sll	r16,r16,r23
  811420:	35c5c83a 	sub	r2,r6,r23
  811424:	a0a2d83a 	srl	r17,r20,r2
  811428:	802ad43a 	srli	r21,r16,16
  81142c:	b084d83a 	srl	r2,r22,r2
  811430:	a5c6983a 	sll	r3,r20,r23
  811434:	8809883a 	mov	r4,r17
  811438:	a80b883a 	mov	r5,r21
  81143c:	1886b03a 	or	r3,r3,r2
  811440:	d8c00115 	stw	r3,4(sp)
  811444:	853fffcc 	andi	r20,r16,65535
  811448:	0808e8c0 	call	808e8c <__udivsi3>
  81144c:	8809883a 	mov	r4,r17
  811450:	a80b883a 	mov	r5,r21
  811454:	a0a3383a 	mul	r17,r20,r2
  811458:	0808e940 	call	808e94 <__umodsi3>
  81145c:	d9000117 	ldw	r4,4(sp)
  811460:	1004943a 	slli	r2,r2,16
  811464:	b839883a 	mov	fp,r23
  811468:	2006d43a 	srli	r3,r4,16
  81146c:	10c4b03a 	or	r2,r2,r3
  811470:	1440022e 	bgeu	r2,r17,81147c <__umoddi3+0x330>
  811474:	1405883a 	add	r2,r2,r16
  811478:	1400962e 	bgeu	r2,r16,8116d4 <__umoddi3+0x588>
  81147c:	1463c83a 	sub	r17,r2,r17
  811480:	8809883a 	mov	r4,r17
  811484:	a80b883a 	mov	r5,r21
  811488:	0808e8c0 	call	808e8c <__udivsi3>
  81148c:	8809883a 	mov	r4,r17
  811490:	a80b883a 	mov	r5,r21
  811494:	a0a3383a 	mul	r17,r20,r2
  811498:	0808e940 	call	808e94 <__umodsi3>
  81149c:	d9400117 	ldw	r5,4(sp)
  8114a0:	1004943a 	slli	r2,r2,16
  8114a4:	28ffffcc 	andi	r3,r5,65535
  8114a8:	10c4b03a 	or	r2,r2,r3
  8114ac:	1440042e 	bgeu	r2,r17,8114c0 <__umoddi3+0x374>
  8114b0:	1405883a 	add	r2,r2,r16
  8114b4:	14000236 	bltu	r2,r16,8114c0 <__umoddi3+0x374>
  8114b8:	1440012e 	bgeu	r2,r17,8114c0 <__umoddi3+0x374>
  8114bc:	1405883a 	add	r2,r2,r16
  8114c0:	b5ec983a 	sll	r22,r22,r23
  8114c4:	1463c83a 	sub	r17,r2,r17
  8114c8:	003f4406 	br	8111dc <__umoddi3+0x90>
  8114cc:	3d4fc83a 	sub	r7,r7,r21
  8114d0:	3546983a 	sll	r3,r6,r21
  8114d4:	81c4d83a 	srl	r2,r16,r7
  8114d8:	a1e2d83a 	srl	r17,r20,r7
  8114dc:	a54c983a 	sll	r6,r20,r21
  8114e0:	18aeb03a 	or	r23,r3,r2
  8114e4:	b828d43a 	srli	r20,r23,16
  8114e8:	b1c4d83a 	srl	r2,r22,r7
  8114ec:	8809883a 	mov	r4,r17
  8114f0:	a00b883a 	mov	r5,r20
  8114f4:	308cb03a 	or	r6,r6,r2
  8114f8:	d9c00315 	stw	r7,12(sp)
  8114fc:	d9800215 	stw	r6,8(sp)
  811500:	0808e8c0 	call	808e8c <__udivsi3>
  811504:	8809883a 	mov	r4,r17
  811508:	a00b883a 	mov	r5,r20
  81150c:	1039883a 	mov	fp,r2
  811510:	0808e940 	call	808e94 <__umodsi3>
  811514:	b8ffffcc 	andi	r3,r23,65535
  811518:	d8c00415 	stw	r3,16(sp)
  81151c:	d9000217 	ldw	r4,8(sp)
  811520:	d9400417 	ldw	r5,16(sp)
  811524:	1004943a 	slli	r2,r2,16
  811528:	2006d43a 	srli	r3,r4,16
  81152c:	8560983a 	sll	r16,r16,r21
  811530:	2f23383a 	mul	r17,r5,fp
  811534:	10c4b03a 	or	r2,r2,r3
  811538:	dc000015 	stw	r16,0(sp)
  81153c:	b56c983a 	sll	r22,r22,r21
  811540:	1440032e 	bgeu	r2,r17,811550 <__umoddi3+0x404>
  811544:	15c5883a 	add	r2,r2,r23
  811548:	e73fffc4 	addi	fp,fp,-1
  81154c:	15c05d2e 	bgeu	r2,r23,8116c4 <__umoddi3+0x578>
  811550:	1463c83a 	sub	r17,r2,r17
  811554:	8809883a 	mov	r4,r17
  811558:	a00b883a 	mov	r5,r20
  81155c:	0808e8c0 	call	808e8c <__udivsi3>
  811560:	8809883a 	mov	r4,r17
  811564:	a00b883a 	mov	r5,r20
  811568:	1021883a 	mov	r16,r2
  81156c:	0808e940 	call	808e94 <__umodsi3>
  811570:	d8c00417 	ldw	r3,16(sp)
  811574:	d9000217 	ldw	r4,8(sp)
  811578:	1004943a 	slli	r2,r2,16
  81157c:	1c23383a 	mul	r17,r3,r16
  811580:	20ffffcc 	andi	r3,r4,65535
  811584:	10ceb03a 	or	r7,r2,r3
  811588:	3c40032e 	bgeu	r7,r17,811598 <__umoddi3+0x44c>
  81158c:	3dcf883a 	add	r7,r7,r23
  811590:	843fffc4 	addi	r16,r16,-1
  811594:	3dc0472e 	bgeu	r7,r23,8116b4 <__umoddi3+0x568>
  811598:	e004943a 	slli	r2,fp,16
  81159c:	d9400017 	ldw	r5,0(sp)
  8115a0:	3c4fc83a 	sub	r7,r7,r17
  8115a4:	8084b03a 	or	r2,r16,r2
  8115a8:	28ffffcc 	andi	r3,r5,65535
  8115ac:	280cd43a 	srli	r6,r5,16
  8115b0:	100ad43a 	srli	r5,r2,16
  8115b4:	10bfffcc 	andi	r2,r2,65535
  8115b8:	10d1383a 	mul	r8,r2,r3
  8115bc:	28c7383a 	mul	r3,r5,r3
  8115c0:	1185383a 	mul	r2,r2,r6
  8115c4:	4008d43a 	srli	r4,r8,16
  8115c8:	298b383a 	mul	r5,r5,r6
  8115cc:	10c5883a 	add	r2,r2,r3
  8115d0:	2089883a 	add	r4,r4,r2
  8115d4:	20c0022e 	bgeu	r4,r3,8115e0 <__umoddi3+0x494>
  8115d8:	00800074 	movhi	r2,1
  8115dc:	288b883a 	add	r5,r5,r2
  8115e0:	2004d43a 	srli	r2,r4,16
  8115e4:	2008943a 	slli	r4,r4,16
  8115e8:	40ffffcc 	andi	r3,r8,65535
  8115ec:	288b883a 	add	r5,r5,r2
  8115f0:	20c9883a 	add	r4,r4,r3
  8115f4:	39400b36 	bltu	r7,r5,811624 <__umoddi3+0x4d8>
  8115f8:	39403d26 	beq	r7,r5,8116f0 <__umoddi3+0x5a4>
  8115fc:	394bc83a 	sub	r5,r7,r5
  811600:	00000f06 	br	811640 <__umoddi3+0x4f4>
  811604:	30c5c83a 	sub	r2,r6,r3
  811608:	1839883a 	mov	fp,r3
  81160c:	b084d83a 	srl	r2,r22,r2
  811610:	a0c6983a 	sll	r3,r20,r3
  811614:	8720983a 	sll	r16,r16,fp
  811618:	b72c983a 	sll	r22,r22,fp
  81161c:	18a8b03a 	or	r20,r3,r2
  811620:	003f3a06 	br	81130c <__umoddi3+0x1c0>
  811624:	d8c00017 	ldw	r3,0(sp)
  811628:	20c5c83a 	sub	r2,r4,r3
  81162c:	2089803a 	cmpltu	r4,r4,r2
  811630:	2dc7c83a 	sub	r3,r5,r23
  811634:	1907c83a 	sub	r3,r3,r4
  811638:	38cbc83a 	sub	r5,r7,r3
  81163c:	1009883a 	mov	r4,r2
  811640:	b105c83a 	sub	r2,r22,r4
  811644:	b087803a 	cmpltu	r3,r22,r2
  811648:	28c7c83a 	sub	r3,r5,r3
  81164c:	d9400317 	ldw	r5,12(sp)
  811650:	1544d83a 	srl	r2,r2,r21
  811654:	1948983a 	sll	r4,r3,r5
  811658:	1d46d83a 	srl	r3,r3,r21
  81165c:	20a4b03a 	or	r18,r4,r2
  811660:	9011883a 	mov	r8,r18
  811664:	1813883a 	mov	r9,r3
  811668:	003ef606 	br	811244 <__umoddi3+0xf8>
  81166c:	01400604 	movi	r5,24
  811670:	2805883a 	mov	r2,r5
  811674:	003ecc06 	br	8111a8 <__umoddi3+0x5c>
  811678:	01400204 	movi	r5,8
  81167c:	2805883a 	mov	r2,r5
  811680:	003ec906 	br	8111a8 <__umoddi3+0x5c>
  811684:	01400204 	movi	r5,8
  811688:	2805883a 	mov	r2,r5
  81168c:	003f0106 	br	811294 <__umoddi3+0x148>
  811690:	01400204 	movi	r5,8
  811694:	2805883a 	mov	r2,r5
  811698:	003f1206 	br	8112e4 <__umoddi3+0x198>
  81169c:	01400604 	movi	r5,24
  8116a0:	2805883a 	mov	r2,r5
  8116a4:	003f0f06 	br	8112e4 <__umoddi3+0x198>
  8116a8:	01400604 	movi	r5,24
  8116ac:	2805883a 	mov	r2,r5
  8116b0:	003ef806 	br	811294 <__umoddi3+0x148>
  8116b4:	3c7fb82e 	bgeu	r7,r17,811598 <__umoddi3+0x44c>
  8116b8:	843fffc4 	addi	r16,r16,-1
  8116bc:	3dcf883a 	add	r7,r7,r23
  8116c0:	003fb506 	br	811598 <__umoddi3+0x44c>
  8116c4:	147fa22e 	bgeu	r2,r17,811550 <__umoddi3+0x404>
  8116c8:	e73fffc4 	addi	fp,fp,-1
  8116cc:	15c5883a 	add	r2,r2,r23
  8116d0:	003f9f06 	br	811550 <__umoddi3+0x404>
  8116d4:	147f692e 	bgeu	r2,r17,81147c <__umoddi3+0x330>
  8116d8:	1405883a 	add	r2,r2,r16
  8116dc:	003f6706 	br	81147c <__umoddi3+0x330>
  8116e0:	1405883a 	add	r2,r2,r16
  8116e4:	003f1906 	br	81134c <__umoddi3+0x200>
  8116e8:	1405883a 	add	r2,r2,r16
  8116ec:	003ec906 	br	811214 <__umoddi3+0xc8>
  8116f0:	b13fcc36 	bltu	r22,r4,811624 <__umoddi3+0x4d8>
  8116f4:	000b883a 	mov	r5,zero
  8116f8:	003fd106 	br	811640 <__umoddi3+0x4f4>

008116fc <__gedf2>:
  8116fc:	deffef04 	addi	sp,sp,-68
  811700:	dc400f15 	stw	r17,60(sp)
  811704:	dc400404 	addi	r17,sp,16
  811708:	2005883a 	mov	r2,r4
  81170c:	2807883a 	mov	r3,r5
  811710:	dc000e15 	stw	r16,56(sp)
  811714:	d809883a 	mov	r4,sp
  811718:	880b883a 	mov	r5,r17
  81171c:	dc000904 	addi	r16,sp,36
  811720:	d8c00115 	stw	r3,4(sp)
  811724:	d8800015 	stw	r2,0(sp)
  811728:	d9800215 	stw	r6,8(sp)
  81172c:	dfc01015 	stw	ra,64(sp)
  811730:	d9c00315 	stw	r7,12(sp)
  811734:	08094f00 	call	8094f0 <__unpack_d>
  811738:	d9000204 	addi	r4,sp,8
  81173c:	800b883a 	mov	r5,r16
  811740:	08094f00 	call	8094f0 <__unpack_d>
  811744:	d8800417 	ldw	r2,16(sp)
  811748:	00c00044 	movi	r3,1
  81174c:	01bfffc4 	movi	r6,-1
  811750:	1880062e 	bgeu	r3,r2,81176c <__gedf2+0x70>
  811754:	d8800917 	ldw	r2,36(sp)
  811758:	8809883a 	mov	r4,r17
  81175c:	800b883a 	mov	r5,r16
  811760:	1880022e 	bgeu	r3,r2,81176c <__gedf2+0x70>
  811764:	08096280 	call	809628 <__fpcmp_parts_d>
  811768:	100d883a 	mov	r6,r2
  81176c:	3005883a 	mov	r2,r6
  811770:	dfc01017 	ldw	ra,64(sp)
  811774:	dc400f17 	ldw	r17,60(sp)
  811778:	dc000e17 	ldw	r16,56(sp)
  81177c:	dec01104 	addi	sp,sp,68
  811780:	f800283a 	ret

00811784 <__floatunsidf>:
  811784:	defff204 	addi	sp,sp,-56
  811788:	dfc00d15 	stw	ra,52(sp)
  81178c:	ddc00c15 	stw	r23,48(sp)
  811790:	dd800b15 	stw	r22,44(sp)
  811794:	dd400a15 	stw	r21,40(sp)
  811798:	dd000915 	stw	r20,36(sp)
  81179c:	dcc00815 	stw	r19,32(sp)
  8117a0:	dc800715 	stw	r18,28(sp)
  8117a4:	dc400615 	stw	r17,24(sp)
  8117a8:	dc000515 	stw	r16,20(sp)
  8117ac:	d8000115 	stw	zero,4(sp)
  8117b0:	20000f1e 	bne	r4,zero,8117f0 <__floatunsidf+0x6c>
  8117b4:	00800084 	movi	r2,2
  8117b8:	d8800015 	stw	r2,0(sp)
  8117bc:	d809883a 	mov	r4,sp
  8117c0:	08091dc0 	call	8091dc <__pack_d>
  8117c4:	dfc00d17 	ldw	ra,52(sp)
  8117c8:	ddc00c17 	ldw	r23,48(sp)
  8117cc:	dd800b17 	ldw	r22,44(sp)
  8117d0:	dd400a17 	ldw	r21,40(sp)
  8117d4:	dd000917 	ldw	r20,36(sp)
  8117d8:	dcc00817 	ldw	r19,32(sp)
  8117dc:	dc800717 	ldw	r18,28(sp)
  8117e0:	dc400617 	ldw	r17,24(sp)
  8117e4:	dc000517 	ldw	r16,20(sp)
  8117e8:	dec00e04 	addi	sp,sp,56
  8117ec:	f800283a 	ret
  8117f0:	008000c4 	movi	r2,3
  8117f4:	00c00f04 	movi	r3,60
  8117f8:	002f883a 	mov	r23,zero
  8117fc:	202d883a 	mov	r22,r4
  811800:	d8800015 	stw	r2,0(sp)
  811804:	d8c00215 	stw	r3,8(sp)
  811808:	d9000315 	stw	r4,12(sp)
  81180c:	ddc00415 	stw	r23,16(sp)
  811810:	0808f340 	call	808f34 <__clzsi2>
  811814:	12400744 	addi	r9,r2,29
  811818:	48000b16 	blt	r9,zero,811848 <__floatunsidf+0xc4>
  81181c:	483fe726 	beq	r9,zero,8117bc <__floatunsidf+0x38>
  811820:	10bfff44 	addi	r2,r2,-3
  811824:	10002e16 	blt	r2,zero,8118e0 <__floatunsidf+0x15c>
  811828:	b0a2983a 	sll	r17,r22,r2
  81182c:	0021883a 	mov	r16,zero
  811830:	d8800217 	ldw	r2,8(sp)
  811834:	dc400415 	stw	r17,16(sp)
  811838:	dc000315 	stw	r16,12(sp)
  81183c:	1245c83a 	sub	r2,r2,r9
  811840:	d8800215 	stw	r2,8(sp)
  811844:	003fdd06 	br	8117bc <__floatunsidf+0x38>
  811848:	0255c83a 	sub	r10,zero,r9
  81184c:	51bff804 	addi	r6,r10,-32
  811850:	30001b16 	blt	r6,zero,8118c0 <__floatunsidf+0x13c>
  811854:	b9a8d83a 	srl	r20,r23,r6
  811858:	002b883a 	mov	r21,zero
  81185c:	000f883a 	mov	r7,zero
  811860:	01000044 	movi	r4,1
  811864:	0011883a 	mov	r8,zero
  811868:	30002516 	blt	r6,zero,811900 <__floatunsidf+0x17c>
  81186c:	21a6983a 	sll	r19,r4,r6
  811870:	0025883a 	mov	r18,zero
  811874:	00bfffc4 	movi	r2,-1
  811878:	9089883a 	add	r4,r18,r2
  81187c:	988b883a 	add	r5,r19,r2
  811880:	248d803a 	cmpltu	r6,r4,r18
  811884:	314b883a 	add	r5,r6,r5
  811888:	b104703a 	and	r2,r22,r4
  81188c:	b946703a 	and	r3,r23,r5
  811890:	10c4b03a 	or	r2,r2,r3
  811894:	10000226 	beq	r2,zero,8118a0 <__floatunsidf+0x11c>
  811898:	01c00044 	movi	r7,1
  81189c:	0011883a 	mov	r8,zero
  8118a0:	d9000217 	ldw	r4,8(sp)
  8118a4:	a1c4b03a 	or	r2,r20,r7
  8118a8:	aa06b03a 	or	r3,r21,r8
  8118ac:	2249c83a 	sub	r4,r4,r9
  8118b0:	d8c00415 	stw	r3,16(sp)
  8118b4:	d9000215 	stw	r4,8(sp)
  8118b8:	d8800315 	stw	r2,12(sp)
  8118bc:	003fbf06 	br	8117bc <__floatunsidf+0x38>
  8118c0:	bdc7883a 	add	r3,r23,r23
  8118c4:	008007c4 	movi	r2,31
  8118c8:	1285c83a 	sub	r2,r2,r10
  8118cc:	1886983a 	sll	r3,r3,r2
  8118d0:	b2a8d83a 	srl	r20,r22,r10
  8118d4:	baaad83a 	srl	r21,r23,r10
  8118d8:	1d28b03a 	or	r20,r3,r20
  8118dc:	003fdf06 	br	81185c <__floatunsidf+0xd8>
  8118e0:	b006d07a 	srli	r3,r22,1
  8118e4:	008007c4 	movi	r2,31
  8118e8:	1245c83a 	sub	r2,r2,r9
  8118ec:	1886d83a 	srl	r3,r3,r2
  8118f0:	ba62983a 	sll	r17,r23,r9
  8118f4:	b260983a 	sll	r16,r22,r9
  8118f8:	1c62b03a 	or	r17,r3,r17
  8118fc:	003fcc06 	br	811830 <__floatunsidf+0xac>
  811900:	2006d07a 	srli	r3,r4,1
  811904:	008007c4 	movi	r2,31
  811908:	1285c83a 	sub	r2,r2,r10
  81190c:	18a6d83a 	srl	r19,r3,r2
  811910:	22a4983a 	sll	r18,r4,r10
  811914:	003fd706 	br	811874 <__floatunsidf+0xf0>

00811918 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  811918:	defff804 	addi	sp,sp,-32
  81191c:	dfc00715 	stw	ra,28(sp)
  811920:	df000615 	stw	fp,24(sp)
  811924:	df000604 	addi	fp,sp,24
  811928:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  81192c:	e0bffc17 	ldw	r2,-16(fp)
  811930:	1004803a 	cmplt	r2,r2,zero
  811934:	1000081e 	bne	r2,zero,811958 <close+0x40>
  811938:	e0bffc17 	ldw	r2,-16(fp)
  81193c:	10800324 	muli	r2,r2,12
  811940:	1007883a 	mov	r3,r2
  811944:	008020b4 	movhi	r2,130
  811948:	10b4ee04 	addi	r2,r2,-11336
  81194c:	1887883a 	add	r3,r3,r2
  811950:	e0ffff15 	stw	r3,-4(fp)
  811954:	00000106 	br	81195c <close+0x44>
  811958:	e03fff15 	stw	zero,-4(fp)
  81195c:	e0bfff17 	ldw	r2,-4(fp)
  811960:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  811964:	e0bffb17 	ldw	r2,-20(fp)
  811968:	1005003a 	cmpeq	r2,r2,zero
  81196c:	10001d1e 	bne	r2,zero,8119e4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  811970:	e0bffb17 	ldw	r2,-20(fp)
  811974:	10800017 	ldw	r2,0(r2)
  811978:	10800417 	ldw	r2,16(r2)
  81197c:	1005003a 	cmpeq	r2,r2,zero
  811980:	1000071e 	bne	r2,zero,8119a0 <close+0x88>
  811984:	e0bffb17 	ldw	r2,-20(fp)
  811988:	10800017 	ldw	r2,0(r2)
  81198c:	10800417 	ldw	r2,16(r2)
  811990:	e13ffb17 	ldw	r4,-20(fp)
  811994:	103ee83a 	callr	r2
  811998:	e0bffe15 	stw	r2,-8(fp)
  81199c:	00000106 	br	8119a4 <close+0x8c>
  8119a0:	e03ffe15 	stw	zero,-8(fp)
  8119a4:	e0bffe17 	ldw	r2,-8(fp)
  8119a8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8119ac:	e13ffc17 	ldw	r4,-16(fp)
  8119b0:	08125380 	call	812538 <alt_release_fd>
    if (rval < 0)
  8119b4:	e0bffa17 	ldw	r2,-24(fp)
  8119b8:	1004403a 	cmpge	r2,r2,zero
  8119bc:	1000071e 	bne	r2,zero,8119dc <close+0xc4>
    {
      ALT_ERRNO = -rval;
  8119c0:	0811a140 	call	811a14 <alt_get_errno>
  8119c4:	e0fffa17 	ldw	r3,-24(fp)
  8119c8:	00c7c83a 	sub	r3,zero,r3
  8119cc:	10c00015 	stw	r3,0(r2)
      return -1;
  8119d0:	00bfffc4 	movi	r2,-1
  8119d4:	e0bffd15 	stw	r2,-12(fp)
  8119d8:	00000806 	br	8119fc <close+0xe4>
    }
    return 0;
  8119dc:	e03ffd15 	stw	zero,-12(fp)
  8119e0:	00000606 	br	8119fc <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8119e4:	0811a140 	call	811a14 <alt_get_errno>
  8119e8:	1007883a 	mov	r3,r2
  8119ec:	00801444 	movi	r2,81
  8119f0:	18800015 	stw	r2,0(r3)
    return -1;
  8119f4:	00bfffc4 	movi	r2,-1
  8119f8:	e0bffd15 	stw	r2,-12(fp)
  8119fc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  811a00:	e037883a 	mov	sp,fp
  811a04:	dfc00117 	ldw	ra,4(sp)
  811a08:	df000017 	ldw	fp,0(sp)
  811a0c:	dec00204 	addi	sp,sp,8
  811a10:	f800283a 	ret

00811a14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811a14:	defffd04 	addi	sp,sp,-12
  811a18:	dfc00215 	stw	ra,8(sp)
  811a1c:	df000115 	stw	fp,4(sp)
  811a20:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811a24:	008020b4 	movhi	r2,130
  811a28:	10b9cc04 	addi	r2,r2,-6352
  811a2c:	10800017 	ldw	r2,0(r2)
  811a30:	1005003a 	cmpeq	r2,r2,zero
  811a34:	1000061e 	bne	r2,zero,811a50 <alt_get_errno+0x3c>
  811a38:	008020b4 	movhi	r2,130
  811a3c:	10b9cc04 	addi	r2,r2,-6352
  811a40:	10800017 	ldw	r2,0(r2)
  811a44:	103ee83a 	callr	r2
  811a48:	e0bfff15 	stw	r2,-4(fp)
  811a4c:	00000306 	br	811a5c <alt_get_errno+0x48>
  811a50:	008020b4 	movhi	r2,130
  811a54:	1080ef04 	addi	r2,r2,956
  811a58:	e0bfff15 	stw	r2,-4(fp)
  811a5c:	e0bfff17 	ldw	r2,-4(fp)
}
  811a60:	e037883a 	mov	sp,fp
  811a64:	dfc00117 	ldw	ra,4(sp)
  811a68:	df000017 	ldw	fp,0(sp)
  811a6c:	dec00204 	addi	sp,sp,8
  811a70:	f800283a 	ret

00811a74 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  811a74:	defffc04 	addi	sp,sp,-16
  811a78:	df000315 	stw	fp,12(sp)
  811a7c:	df000304 	addi	fp,sp,12
  811a80:	e13ffd15 	stw	r4,-12(fp)
  811a84:	e17ffe15 	stw	r5,-8(fp)
  811a88:	e1bfff15 	stw	r6,-4(fp)
  return len;
  811a8c:	e0bfff17 	ldw	r2,-4(fp)
}
  811a90:	e037883a 	mov	sp,fp
  811a94:	df000017 	ldw	fp,0(sp)
  811a98:	dec00104 	addi	sp,sp,4
  811a9c:	f800283a 	ret

00811aa0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  811aa0:	defff904 	addi	sp,sp,-28
  811aa4:	dfc00615 	stw	ra,24(sp)
  811aa8:	df000515 	stw	fp,20(sp)
  811aac:	df000504 	addi	fp,sp,20
  811ab0:	e13ffc15 	stw	r4,-16(fp)
  811ab4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811ab8:	e0bffc17 	ldw	r2,-16(fp)
  811abc:	1004803a 	cmplt	r2,r2,zero
  811ac0:	1000081e 	bne	r2,zero,811ae4 <fstat+0x44>
  811ac4:	e0bffc17 	ldw	r2,-16(fp)
  811ac8:	10800324 	muli	r2,r2,12
  811acc:	1007883a 	mov	r3,r2
  811ad0:	008020b4 	movhi	r2,130
  811ad4:	10b4ee04 	addi	r2,r2,-11336
  811ad8:	1887883a 	add	r3,r3,r2
  811adc:	e0ffff15 	stw	r3,-4(fp)
  811ae0:	00000106 	br	811ae8 <fstat+0x48>
  811ae4:	e03fff15 	stw	zero,-4(fp)
  811ae8:	e0bfff17 	ldw	r2,-4(fp)
  811aec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  811af0:	e0bffb17 	ldw	r2,-20(fp)
  811af4:	1005003a 	cmpeq	r2,r2,zero
  811af8:	1000121e 	bne	r2,zero,811b44 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  811afc:	e0bffb17 	ldw	r2,-20(fp)
  811b00:	10800017 	ldw	r2,0(r2)
  811b04:	10800817 	ldw	r2,32(r2)
  811b08:	1005003a 	cmpeq	r2,r2,zero
  811b0c:	1000081e 	bne	r2,zero,811b30 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  811b10:	e0bffb17 	ldw	r2,-20(fp)
  811b14:	10800017 	ldw	r2,0(r2)
  811b18:	10800817 	ldw	r2,32(r2)
  811b1c:	e13ffb17 	ldw	r4,-20(fp)
  811b20:	e17ffd17 	ldw	r5,-12(fp)
  811b24:	103ee83a 	callr	r2
  811b28:	e0bffe15 	stw	r2,-8(fp)
  811b2c:	00000b06 	br	811b5c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  811b30:	e0fffd17 	ldw	r3,-12(fp)
  811b34:	00880004 	movi	r2,8192
  811b38:	18800115 	stw	r2,4(r3)
      return 0;
  811b3c:	e03ffe15 	stw	zero,-8(fp)
  811b40:	00000606 	br	811b5c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  811b44:	0811b740 	call	811b74 <alt_get_errno>
  811b48:	1007883a 	mov	r3,r2
  811b4c:	00801444 	movi	r2,81
  811b50:	18800015 	stw	r2,0(r3)
    return -1;
  811b54:	00bfffc4 	movi	r2,-1
  811b58:	e0bffe15 	stw	r2,-8(fp)
  811b5c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  811b60:	e037883a 	mov	sp,fp
  811b64:	dfc00117 	ldw	ra,4(sp)
  811b68:	df000017 	ldw	fp,0(sp)
  811b6c:	dec00204 	addi	sp,sp,8
  811b70:	f800283a 	ret

00811b74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811b74:	defffd04 	addi	sp,sp,-12
  811b78:	dfc00215 	stw	ra,8(sp)
  811b7c:	df000115 	stw	fp,4(sp)
  811b80:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811b84:	008020b4 	movhi	r2,130
  811b88:	10b9cc04 	addi	r2,r2,-6352
  811b8c:	10800017 	ldw	r2,0(r2)
  811b90:	1005003a 	cmpeq	r2,r2,zero
  811b94:	1000061e 	bne	r2,zero,811bb0 <alt_get_errno+0x3c>
  811b98:	008020b4 	movhi	r2,130
  811b9c:	10b9cc04 	addi	r2,r2,-6352
  811ba0:	10800017 	ldw	r2,0(r2)
  811ba4:	103ee83a 	callr	r2
  811ba8:	e0bfff15 	stw	r2,-4(fp)
  811bac:	00000306 	br	811bbc <alt_get_errno+0x48>
  811bb0:	008020b4 	movhi	r2,130
  811bb4:	1080ef04 	addi	r2,r2,956
  811bb8:	e0bfff15 	stw	r2,-4(fp)
  811bbc:	e0bfff17 	ldw	r2,-4(fp)
}
  811bc0:	e037883a 	mov	sp,fp
  811bc4:	dfc00117 	ldw	ra,4(sp)
  811bc8:	df000017 	ldw	fp,0(sp)
  811bcc:	dec00204 	addi	sp,sp,8
  811bd0:	f800283a 	ret

00811bd4 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
  811bd4:	defff504 	addi	sp,sp,-44
  811bd8:	dfc00a15 	stw	ra,40(sp)
  811bdc:	df000915 	stw	fp,36(sp)
  811be0:	dc800815 	stw	r18,32(sp)
  811be4:	dc400715 	stw	r17,28(sp)
  811be8:	dc000615 	stw	r16,24(sp)
  811bec:	df000604 	addi	fp,sp,24
  811bf0:	e13ffd15 	stw	r4,-12(fp)
  811bf4:	e17ffe15 	stw	r5,-8(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
  811bf8:	e0bffe17 	ldw	r2,-8(fp)
  811bfc:	e0bffc15 	stw	r2,-16(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  811c00:	008020b4 	movhi	r2,130
  811c04:	1080fc04 	addi	r2,r2,1008
  811c08:	10800017 	ldw	r2,0(r2)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
  811c0c:	e0bffb15 	stw	r2,-20(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  811c10:	008020b4 	movhi	r2,130
  811c14:	1080fb04 	addi	r2,r2,1004
  811c18:	10800017 	ldw	r2,0(r2)
  alt_u32 tick_rate = alt_ticks_per_second ();
  811c1c:	e0bffa15 	stw	r2,-24(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
  811c20:	e0bffa17 	ldw	r2,-24(fp)
  811c24:	1005003a 	cmpeq	r2,r2,zero
  811c28:	1000661e 	bne	r2,zero,811dc4 <gettimeofday+0x1f0>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
  811c2c:	d0a73a17 	ldw	r2,-25368(gp)
  811c30:	1021883a 	mov	r16,r2
  811c34:	e13ffb17 	ldw	r4,-20(fp)
  811c38:	e17ffa17 	ldw	r5,-24(fp)
  811c3c:	0808e8c0 	call	808e8c <__udivsi3>
  811c40:	8085883a 	add	r2,r16,r2
  811c44:	1007883a 	mov	r3,r2
  811c48:	e0bffd17 	ldw	r2,-12(fp)
  811c4c:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
  811c50:	008020b4 	movhi	r2,130
  811c54:	1080f604 	addi	r2,r2,984
  811c58:	10800017 	ldw	r2,0(r2)
  811c5c:	1025883a 	mov	r18,r2
  811c60:	e43ffb17 	ldw	r16,-20(fp)
  811c64:	0023883a 	mov	r17,zero
  811c68:	010003f4 	movhi	r4,15
  811c6c:	21109004 	addi	r4,r4,16960
  811c70:	e17ffa17 	ldw	r5,-24(fp)
  811c74:	0808e8c0 	call	808e8c <__udivsi3>
  811c78:	1009883a 	mov	r4,r2
  811c7c:	2005883a 	mov	r2,r4
  811c80:	0007883a 	mov	r3,zero
  811c84:	8009883a 	mov	r4,r16
  811c88:	880b883a 	mov	r5,r17
  811c8c:	100d883a 	mov	r6,r2
  811c90:	180f883a 	mov	r7,r3
  811c94:	0808e9c0 	call	808e9c <__muldi3>
  811c98:	1009883a 	mov	r4,r2
  811c9c:	180b883a 	mov	r5,r3
  811ca0:	2005883a 	mov	r2,r4
  811ca4:	2807883a 	mov	r3,r5
  811ca8:	1009883a 	mov	r4,r2
  811cac:	180b883a 	mov	r5,r3
  811cb0:	018003f4 	movhi	r6,15
  811cb4:	31909004 	addi	r6,r6,16960
  811cb8:	000f883a 	mov	r7,zero
  811cbc:	081114c0 	call	81114c <__umoddi3>
  811cc0:	1009883a 	mov	r4,r2
  811cc4:	180b883a 	mov	r5,r3
  811cc8:	2005883a 	mov	r2,r4
  811ccc:	2807883a 	mov	r3,r5
  811cd0:	9085883a 	add	r2,r18,r2
  811cd4:	1007883a 	mov	r3,r2
  811cd8:	e0bffd17 	ldw	r2,-12(fp)
  811cdc:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
  811ce0:	00001506 	br	811d38 <gettimeofday+0x164>
      if (ptimeval->tv_sec <= 0)
  811ce4:	e0bffd17 	ldw	r2,-12(fp)
  811ce8:	10800017 	ldw	r2,0(r2)
  811cec:	10800048 	cmpgei	r2,r2,1
  811cf0:	1000051e 	bne	r2,zero,811d08 <gettimeofday+0x134>
      {
          ptimeval->tv_sec = 0;
  811cf4:	e0bffd17 	ldw	r2,-12(fp)
  811cf8:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
  811cfc:	e0bffd17 	ldw	r2,-12(fp)
  811d00:	10000115 	stw	zero,4(r2)
          break;
  811d04:	00001d06 	br	811d7c <gettimeofday+0x1a8>
      }
      else
      {
          ptimeval->tv_sec--;
  811d08:	e0bffd17 	ldw	r2,-12(fp)
  811d0c:	10800017 	ldw	r2,0(r2)
  811d10:	10ffffc4 	addi	r3,r2,-1
  811d14:	e0bffd17 	ldw	r2,-12(fp)
  811d18:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
  811d1c:	e0bffd17 	ldw	r2,-12(fp)
  811d20:	10c00117 	ldw	r3,4(r2)
  811d24:	008003f4 	movhi	r2,15
  811d28:	10909004 	addi	r2,r2,16960
  811d2c:	1887883a 	add	r3,r3,r2
  811d30:	e0bffd17 	ldw	r2,-12(fp)
  811d34:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
  811d38:	e0bffd17 	ldw	r2,-12(fp)
  811d3c:	10800117 	ldw	r2,4(r2)
  811d40:	1004803a 	cmplt	r2,r2,zero
  811d44:	103fe71e 	bne	r2,zero,811ce4 <gettimeofday+0x110>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
  811d48:	00000c06 	br	811d7c <gettimeofday+0x1a8>
      ptimeval->tv_sec++;
  811d4c:	e0bffd17 	ldw	r2,-12(fp)
  811d50:	10800017 	ldw	r2,0(r2)
  811d54:	10c00044 	addi	r3,r2,1
  811d58:	e0bffd17 	ldw	r2,-12(fp)
  811d5c:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
  811d60:	e0bffd17 	ldw	r2,-12(fp)
  811d64:	10c00117 	ldw	r3,4(r2)
  811d68:	00bffc74 	movhi	r2,65521
  811d6c:	10af7004 	addi	r2,r2,-16960
  811d70:	1887883a 	add	r3,r3,r2
  811d74:	e0bffd17 	ldw	r2,-12(fp)
  811d78:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
  811d7c:	e0bffd17 	ldw	r2,-12(fp)
  811d80:	10c00117 	ldw	r3,4(r2)
  811d84:	008003f4 	movhi	r2,15
  811d88:	10908fc4 	addi	r2,r2,16959
  811d8c:	10ffef16 	blt	r2,r3,811d4c <gettimeofday+0x178>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
  811d90:	e0bffc17 	ldw	r2,-16(fp)
  811d94:	1005003a 	cmpeq	r2,r2,zero
  811d98:	1000081e 	bne	r2,zero,811dbc <gettimeofday+0x1e8>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
  811d9c:	d0e73817 	ldw	r3,-25376(gp)
  811da0:	e0bffc17 	ldw	r2,-16(fp)
  811da4:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
  811da8:	008020b4 	movhi	r2,130
  811dac:	1080f404 	addi	r2,r2,976
  811db0:	10c00017 	ldw	r3,0(r2)
  811db4:	e0bffc17 	ldw	r2,-16(fp)
  811db8:	10c00115 	stw	r3,4(r2)
    }

    return 0;
  811dbc:	e03fff15 	stw	zero,-4(fp)
  811dc0:	00000206 	br	811dcc <gettimeofday+0x1f8>
  }

  return -ENOTSUP;
  811dc4:	00bfde84 	movi	r2,-134
  811dc8:	e0bfff15 	stw	r2,-4(fp)
  811dcc:	e0bfff17 	ldw	r2,-4(fp)
}
  811dd0:	e037883a 	mov	sp,fp
  811dd4:	dfc00417 	ldw	ra,16(sp)
  811dd8:	df000317 	ldw	fp,12(sp)
  811ddc:	dc800217 	ldw	r18,8(sp)
  811de0:	dc400117 	ldw	r17,4(sp)
  811de4:	dc000017 	ldw	r16,0(sp)
  811de8:	dec00504 	addi	sp,sp,20
  811dec:	f800283a 	ret

00811df0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  811df0:	deffef04 	addi	sp,sp,-68
  811df4:	df001015 	stw	fp,64(sp)
  811df8:	df001004 	addi	fp,sp,64
  811dfc:	e13ffc15 	stw	r4,-16(fp)
  811e00:	e17ffd15 	stw	r5,-12(fp)
  811e04:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  811e08:	00bffa84 	movi	r2,-22
  811e0c:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  811e10:	e0bffc17 	ldw	r2,-16(fp)
  811e14:	10800828 	cmpgeui	r2,r2,32
  811e18:	1000601e 	bne	r2,zero,811f9c <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811e1c:	0005303a 	rdctl	r2,status
  811e20:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811e24:	e0fff917 	ldw	r3,-28(fp)
  811e28:	00bfff84 	movi	r2,-2
  811e2c:	1884703a 	and	r2,r3,r2
  811e30:	1001703a 	wrctl	status,r2
  
  return context;
  811e34:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  811e38:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  811e3c:	e0bffc17 	ldw	r2,-16(fp)
  811e40:	00c020b4 	movhi	r3,130
  811e44:	18d29204 	addi	r3,r3,19016
  811e48:	100490fa 	slli	r2,r2,3
  811e4c:	10c7883a 	add	r3,r2,r3
  811e50:	e0bffe17 	ldw	r2,-8(fp)
  811e54:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  811e58:	e0bffc17 	ldw	r2,-16(fp)
  811e5c:	00c020b4 	movhi	r3,130
  811e60:	18d29204 	addi	r3,r3,19016
  811e64:	100490fa 	slli	r2,r2,3
  811e68:	10c5883a 	add	r2,r2,r3
  811e6c:	10c00104 	addi	r3,r2,4
  811e70:	e0bffd17 	ldw	r2,-12(fp)
  811e74:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  811e78:	e0bffe17 	ldw	r2,-8(fp)
  811e7c:	1005003a 	cmpeq	r2,r2,zero
  811e80:	1000201e 	bne	r2,zero,811f04 <alt_irq_register+0x114>
  811e84:	e0bffc17 	ldw	r2,-16(fp)
  811e88:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811e8c:	0005303a 	rdctl	r2,status
  811e90:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811e94:	e0fff617 	ldw	r3,-40(fp)
  811e98:	00bfff84 	movi	r2,-2
  811e9c:	1884703a 	and	r2,r3,r2
  811ea0:	1001703a 	wrctl	status,r2
  
  return context;
  811ea4:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  811ea8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  811eac:	e0fff717 	ldw	r3,-36(fp)
  811eb0:	00800044 	movi	r2,1
  811eb4:	10c4983a 	sll	r2,r2,r3
  811eb8:	1007883a 	mov	r3,r2
  811ebc:	008020b4 	movhi	r2,130
  811ec0:	1080f704 	addi	r2,r2,988
  811ec4:	10800017 	ldw	r2,0(r2)
  811ec8:	1886b03a 	or	r3,r3,r2
  811ecc:	008020b4 	movhi	r2,130
  811ed0:	1080f704 	addi	r2,r2,988
  811ed4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  811ed8:	008020b4 	movhi	r2,130
  811edc:	1080f704 	addi	r2,r2,988
  811ee0:	10800017 	ldw	r2,0(r2)
  811ee4:	100170fa 	wrctl	ienable,r2
  811ee8:	e0bff817 	ldw	r2,-32(fp)
  811eec:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811ef0:	e0bff517 	ldw	r2,-44(fp)
  811ef4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  811ef8:	0005883a 	mov	r2,zero
  811efc:	e0bfff15 	stw	r2,-4(fp)
  811f00:	00002006 	br	811f84 <alt_irq_register+0x194>
  811f04:	e0bffc17 	ldw	r2,-16(fp)
  811f08:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811f0c:	0005303a 	rdctl	r2,status
  811f10:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811f14:	e0fff217 	ldw	r3,-56(fp)
  811f18:	00bfff84 	movi	r2,-2
  811f1c:	1884703a 	and	r2,r3,r2
  811f20:	1001703a 	wrctl	status,r2
  
  return context;
  811f24:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  811f28:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  811f2c:	e0fff317 	ldw	r3,-52(fp)
  811f30:	00800044 	movi	r2,1
  811f34:	10c4983a 	sll	r2,r2,r3
  811f38:	0084303a 	nor	r2,zero,r2
  811f3c:	1007883a 	mov	r3,r2
  811f40:	008020b4 	movhi	r2,130
  811f44:	1080f704 	addi	r2,r2,988
  811f48:	10800017 	ldw	r2,0(r2)
  811f4c:	1886703a 	and	r3,r3,r2
  811f50:	008020b4 	movhi	r2,130
  811f54:	1080f704 	addi	r2,r2,988
  811f58:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  811f5c:	008020b4 	movhi	r2,130
  811f60:	1080f704 	addi	r2,r2,988
  811f64:	10800017 	ldw	r2,0(r2)
  811f68:	100170fa 	wrctl	ienable,r2
  811f6c:	e0bff417 	ldw	r2,-48(fp)
  811f70:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811f74:	e0bff117 	ldw	r2,-60(fp)
  811f78:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  811f7c:	0005883a 	mov	r2,zero
  811f80:	e0bfff15 	stw	r2,-4(fp)
  811f84:	e0bfff17 	ldw	r2,-4(fp)
  811f88:	e0bffb15 	stw	r2,-20(fp)
  811f8c:	e0bffa17 	ldw	r2,-24(fp)
  811f90:	e0bff015 	stw	r2,-64(fp)
  811f94:	e0bff017 	ldw	r2,-64(fp)
  811f98:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  811f9c:	e0bffb17 	ldw	r2,-20(fp)
}
  811fa0:	e037883a 	mov	sp,fp
  811fa4:	df000017 	ldw	fp,0(sp)
  811fa8:	dec00104 	addi	sp,sp,4
  811fac:	f800283a 	ret

00811fb0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  811fb0:	deffeb04 	addi	sp,sp,-84
  811fb4:	dfc01415 	stw	ra,80(sp)
  811fb8:	df001315 	stw	fp,76(sp)
  811fbc:	df001304 	addi	fp,sp,76
  811fc0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811fc4:	e0bffd17 	ldw	r2,-12(fp)
  811fc8:	1004803a 	cmplt	r2,r2,zero
  811fcc:	1000081e 	bne	r2,zero,811ff0 <isatty+0x40>
  811fd0:	e0bffd17 	ldw	r2,-12(fp)
  811fd4:	10800324 	muli	r2,r2,12
  811fd8:	1007883a 	mov	r3,r2
  811fdc:	008020b4 	movhi	r2,130
  811fe0:	10b4ee04 	addi	r2,r2,-11336
  811fe4:	1887883a 	add	r3,r3,r2
  811fe8:	e0ffff15 	stw	r3,-4(fp)
  811fec:	00000106 	br	811ff4 <isatty+0x44>
  811ff0:	e03fff15 	stw	zero,-4(fp)
  811ff4:	e0bfff17 	ldw	r2,-4(fp)
  811ff8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  811ffc:	e0bfed17 	ldw	r2,-76(fp)
  812000:	1005003a 	cmpeq	r2,r2,zero
  812004:	10000f1e 	bne	r2,zero,812044 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  812008:	e0bfed17 	ldw	r2,-76(fp)
  81200c:	10800017 	ldw	r2,0(r2)
  812010:	10800817 	ldw	r2,32(r2)
  812014:	1004c03a 	cmpne	r2,r2,zero
  812018:	1000031e 	bne	r2,zero,812028 <isatty+0x78>
    {
      return 1;
  81201c:	00800044 	movi	r2,1
  812020:	e0bffe15 	stw	r2,-8(fp)
  812024:	00000c06 	br	812058 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  812028:	e17fee04 	addi	r5,fp,-72
  81202c:	e13ffd17 	ldw	r4,-12(fp)
  812030:	0811aa00 	call	811aa0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  812034:	e0bfef17 	ldw	r2,-68(fp)
  812038:	10880020 	cmpeqi	r2,r2,8192
  81203c:	e0bffe15 	stw	r2,-8(fp)
  812040:	00000506 	br	812058 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  812044:	08120700 	call	812070 <alt_get_errno>
  812048:	1007883a 	mov	r3,r2
  81204c:	00801444 	movi	r2,81
  812050:	18800015 	stw	r2,0(r3)
    return 0;
  812054:	e03ffe15 	stw	zero,-8(fp)
  812058:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  81205c:	e037883a 	mov	sp,fp
  812060:	dfc00117 	ldw	ra,4(sp)
  812064:	df000017 	ldw	fp,0(sp)
  812068:	dec00204 	addi	sp,sp,8
  81206c:	f800283a 	ret

00812070 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812070:	defffd04 	addi	sp,sp,-12
  812074:	dfc00215 	stw	ra,8(sp)
  812078:	df000115 	stw	fp,4(sp)
  81207c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812080:	008020b4 	movhi	r2,130
  812084:	10b9cc04 	addi	r2,r2,-6352
  812088:	10800017 	ldw	r2,0(r2)
  81208c:	1005003a 	cmpeq	r2,r2,zero
  812090:	1000061e 	bne	r2,zero,8120ac <alt_get_errno+0x3c>
  812094:	008020b4 	movhi	r2,130
  812098:	10b9cc04 	addi	r2,r2,-6352
  81209c:	10800017 	ldw	r2,0(r2)
  8120a0:	103ee83a 	callr	r2
  8120a4:	e0bfff15 	stw	r2,-4(fp)
  8120a8:	00000306 	br	8120b8 <alt_get_errno+0x48>
  8120ac:	008020b4 	movhi	r2,130
  8120b0:	1080ef04 	addi	r2,r2,956
  8120b4:	e0bfff15 	stw	r2,-4(fp)
  8120b8:	e0bfff17 	ldw	r2,-4(fp)
}
  8120bc:	e037883a 	mov	sp,fp
  8120c0:	dfc00117 	ldw	ra,4(sp)
  8120c4:	df000017 	ldw	fp,0(sp)
  8120c8:	dec00204 	addi	sp,sp,8
  8120cc:	f800283a 	ret

008120d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8120d0:	defffe04 	addi	sp,sp,-8
  8120d4:	dfc00115 	stw	ra,4(sp)
  8120d8:	df000015 	stw	fp,0(sp)
  8120dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8120e0:	010020b4 	movhi	r4,130
  8120e4:	2139d104 	addi	r4,r4,-6332
  8120e8:	014020b4 	movhi	r5,130
  8120ec:	2972df04 	addi	r5,r5,-13444
  8120f0:	018020b4 	movhi	r6,130
  8120f4:	31b9d104 	addi	r6,r6,-6332
  8120f8:	08121500 	call	812150 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8120fc:	01002034 	movhi	r4,128
  812100:	21000804 	addi	r4,r4,32
  812104:	01402034 	movhi	r5,128
  812108:	29400804 	addi	r5,r5,32
  81210c:	01802034 	movhi	r6,128
  812110:	31806e04 	addi	r6,r6,440
  812114:	08121500 	call	812150 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  812118:	010020b4 	movhi	r4,130
  81211c:	212f8304 	addi	r4,r4,-16884
  812120:	014020b4 	movhi	r5,130
  812124:	296f8304 	addi	r5,r5,-16884
  812128:	018020b4 	movhi	r6,130
  81212c:	31b2df04 	addi	r6,r6,-13444
  812130:	08121500 	call	812150 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  812134:	081b0280 	call	81b028 <alt_dcache_flush_all>
  alt_icache_flush_all();
  812138:	081b2dc0 	call	81b2dc <alt_icache_flush_all>
}
  81213c:	e037883a 	mov	sp,fp
  812140:	dfc00117 	ldw	ra,4(sp)
  812144:	df000017 	ldw	fp,0(sp)
  812148:	dec00204 	addi	sp,sp,8
  81214c:	f800283a 	ret

00812150 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  812150:	defffc04 	addi	sp,sp,-16
  812154:	df000315 	stw	fp,12(sp)
  812158:	df000304 	addi	fp,sp,12
  81215c:	e13ffd15 	stw	r4,-12(fp)
  812160:	e17ffe15 	stw	r5,-8(fp)
  812164:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  812168:	e0fffe17 	ldw	r3,-8(fp)
  81216c:	e0bffd17 	ldw	r2,-12(fp)
  812170:	18800e26 	beq	r3,r2,8121ac <alt_load_section+0x5c>
  {
    while( to != end )
  812174:	00000a06 	br	8121a0 <alt_load_section+0x50>
    {
      *to++ = *from++;
  812178:	e0bffd17 	ldw	r2,-12(fp)
  81217c:	10c00017 	ldw	r3,0(r2)
  812180:	e0bffe17 	ldw	r2,-8(fp)
  812184:	10c00015 	stw	r3,0(r2)
  812188:	e0bffe17 	ldw	r2,-8(fp)
  81218c:	10800104 	addi	r2,r2,4
  812190:	e0bffe15 	stw	r2,-8(fp)
  812194:	e0bffd17 	ldw	r2,-12(fp)
  812198:	10800104 	addi	r2,r2,4
  81219c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  8121a0:	e0fffe17 	ldw	r3,-8(fp)
  8121a4:	e0bfff17 	ldw	r2,-4(fp)
  8121a8:	18bff31e 	bne	r3,r2,812178 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  8121ac:	e037883a 	mov	sp,fp
  8121b0:	df000017 	ldw	fp,0(sp)
  8121b4:	dec00104 	addi	sp,sp,4
  8121b8:	f800283a 	ret

008121bc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  8121bc:	defff804 	addi	sp,sp,-32
  8121c0:	dfc00715 	stw	ra,28(sp)
  8121c4:	df000615 	stw	fp,24(sp)
  8121c8:	df000604 	addi	fp,sp,24
  8121cc:	e13ffc15 	stw	r4,-16(fp)
  8121d0:	e17ffd15 	stw	r5,-12(fp)
  8121d4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  8121d8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8121dc:	e0bffc17 	ldw	r2,-16(fp)
  8121e0:	1004803a 	cmplt	r2,r2,zero
  8121e4:	1000081e 	bne	r2,zero,812208 <lseek+0x4c>
  8121e8:	e0bffc17 	ldw	r2,-16(fp)
  8121ec:	10800324 	muli	r2,r2,12
  8121f0:	1007883a 	mov	r3,r2
  8121f4:	008020b4 	movhi	r2,130
  8121f8:	10b4ee04 	addi	r2,r2,-11336
  8121fc:	1887883a 	add	r3,r3,r2
  812200:	e0ffff15 	stw	r3,-4(fp)
  812204:	00000106 	br	81220c <lseek+0x50>
  812208:	e03fff15 	stw	zero,-4(fp)
  81220c:	e0bfff17 	ldw	r2,-4(fp)
  812210:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  812214:	e0bffb17 	ldw	r2,-20(fp)
  812218:	1005003a 	cmpeq	r2,r2,zero
  81221c:	1000111e 	bne	r2,zero,812264 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  812220:	e0bffb17 	ldw	r2,-20(fp)
  812224:	10800017 	ldw	r2,0(r2)
  812228:	10800717 	ldw	r2,28(r2)
  81222c:	1005003a 	cmpeq	r2,r2,zero
  812230:	1000091e 	bne	r2,zero,812258 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  812234:	e0bffb17 	ldw	r2,-20(fp)
  812238:	10800017 	ldw	r2,0(r2)
  81223c:	10800717 	ldw	r2,28(r2)
  812240:	e13ffb17 	ldw	r4,-20(fp)
  812244:	e17ffd17 	ldw	r5,-12(fp)
  812248:	e1bffe17 	ldw	r6,-8(fp)
  81224c:	103ee83a 	callr	r2
  812250:	e0bffa15 	stw	r2,-24(fp)
  812254:	00000506 	br	81226c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  812258:	00bfde84 	movi	r2,-134
  81225c:	e0bffa15 	stw	r2,-24(fp)
  812260:	00000206 	br	81226c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  812264:	00bfebc4 	movi	r2,-81
  812268:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  81226c:	e0bffa17 	ldw	r2,-24(fp)
  812270:	1004403a 	cmpge	r2,r2,zero
  812274:	1000071e 	bne	r2,zero,812294 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  812278:	08122ac0 	call	8122ac <alt_get_errno>
  81227c:	1007883a 	mov	r3,r2
  812280:	e0bffa17 	ldw	r2,-24(fp)
  812284:	0085c83a 	sub	r2,zero,r2
  812288:	18800015 	stw	r2,0(r3)
    rc = -1;
  81228c:	00bfffc4 	movi	r2,-1
  812290:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  812294:	e0bffa17 	ldw	r2,-24(fp)
}
  812298:	e037883a 	mov	sp,fp
  81229c:	dfc00117 	ldw	ra,4(sp)
  8122a0:	df000017 	ldw	fp,0(sp)
  8122a4:	dec00204 	addi	sp,sp,8
  8122a8:	f800283a 	ret

008122ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8122ac:	defffd04 	addi	sp,sp,-12
  8122b0:	dfc00215 	stw	ra,8(sp)
  8122b4:	df000115 	stw	fp,4(sp)
  8122b8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8122bc:	008020b4 	movhi	r2,130
  8122c0:	10b9cc04 	addi	r2,r2,-6352
  8122c4:	10800017 	ldw	r2,0(r2)
  8122c8:	1005003a 	cmpeq	r2,r2,zero
  8122cc:	1000061e 	bne	r2,zero,8122e8 <alt_get_errno+0x3c>
  8122d0:	008020b4 	movhi	r2,130
  8122d4:	10b9cc04 	addi	r2,r2,-6352
  8122d8:	10800017 	ldw	r2,0(r2)
  8122dc:	103ee83a 	callr	r2
  8122e0:	e0bfff15 	stw	r2,-4(fp)
  8122e4:	00000306 	br	8122f4 <alt_get_errno+0x48>
  8122e8:	008020b4 	movhi	r2,130
  8122ec:	1080ef04 	addi	r2,r2,956
  8122f0:	e0bfff15 	stw	r2,-4(fp)
  8122f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8122f8:	e037883a 	mov	sp,fp
  8122fc:	dfc00117 	ldw	ra,4(sp)
  812300:	df000017 	ldw	fp,0(sp)
  812304:	dec00204 	addi	sp,sp,8
  812308:	f800283a 	ret

0081230c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  81230c:	defffd04 	addi	sp,sp,-12
  812310:	dfc00215 	stw	ra,8(sp)
  812314:	df000115 	stw	fp,4(sp)
  812318:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  81231c:	0009883a 	mov	r4,zero
  812320:	08129a80 	call	8129a8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  812324:	08129dc0 	call	8129dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  812328:	010020b4 	movhi	r4,130
  81232c:	2132a004 	addi	r4,r4,-13696
  812330:	014020b4 	movhi	r5,130
  812334:	2972a004 	addi	r5,r5,-13696
  812338:	018020b4 	movhi	r6,130
  81233c:	31b2a004 	addi	r6,r6,-13696
  812340:	081b3d00 	call	81b3d0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  812344:	081b1800 	call	81b180 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  812348:	010020b4 	movhi	r4,130
  81234c:	212c7904 	addi	r4,r4,-19996
  812350:	081b9940 	call	81b994 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  812354:	d1273d17 	ldw	r4,-25356(gp)
  812358:	d1673e17 	ldw	r5,-25352(gp)
  81235c:	d1a73f17 	ldw	r6,-25348(gp)
  812360:	08033b80 	call	8033b8 <main>
  812364:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  812368:	01000044 	movi	r4,1
  81236c:	08119180 	call	811918 <close>
  exit (result);
  812370:	e13fff17 	ldw	r4,-4(fp)
  812374:	081b9a80 	call	81b9a8 <exit>

00812378 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  812378:	defffe04 	addi	sp,sp,-8
  81237c:	df000115 	stw	fp,4(sp)
  812380:	df000104 	addi	fp,sp,4
  812384:	e13fff15 	stw	r4,-4(fp)
}
  812388:	e037883a 	mov	sp,fp
  81238c:	df000017 	ldw	fp,0(sp)
  812390:	dec00104 	addi	sp,sp,4
  812394:	f800283a 	ret

00812398 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  812398:	defffe04 	addi	sp,sp,-8
  81239c:	df000115 	stw	fp,4(sp)
  8123a0:	df000104 	addi	fp,sp,4
  8123a4:	e13fff15 	stw	r4,-4(fp)
}
  8123a8:	e037883a 	mov	sp,fp
  8123ac:	df000017 	ldw	fp,0(sp)
  8123b0:	dec00104 	addi	sp,sp,4
  8123b4:	f800283a 	ret

008123b8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8123b8:	defff704 	addi	sp,sp,-36
  8123bc:	dfc00815 	stw	ra,32(sp)
  8123c0:	df000715 	stw	fp,28(sp)
  8123c4:	df000704 	addi	fp,sp,28
  8123c8:	e13ffb15 	stw	r4,-20(fp)
  8123cc:	e17ffc15 	stw	r5,-16(fp)
  8123d0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8123d4:	e0bffb17 	ldw	r2,-20(fp)
  8123d8:	1004803a 	cmplt	r2,r2,zero
  8123dc:	1000081e 	bne	r2,zero,812400 <read+0x48>
  8123e0:	e0bffb17 	ldw	r2,-20(fp)
  8123e4:	10800324 	muli	r2,r2,12
  8123e8:	1007883a 	mov	r3,r2
  8123ec:	008020b4 	movhi	r2,130
  8123f0:	10b4ee04 	addi	r2,r2,-11336
  8123f4:	1887883a 	add	r3,r3,r2
  8123f8:	e0ffff15 	stw	r3,-4(fp)
  8123fc:	00000106 	br	812404 <read+0x4c>
  812400:	e03fff15 	stw	zero,-4(fp)
  812404:	e0bfff17 	ldw	r2,-4(fp)
  812408:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  81240c:	e0bffa17 	ldw	r2,-24(fp)
  812410:	1005003a 	cmpeq	r2,r2,zero
  812414:	1000241e 	bne	r2,zero,8124a8 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  812418:	e0bffa17 	ldw	r2,-24(fp)
  81241c:	10800217 	ldw	r2,8(r2)
  812420:	108000cc 	andi	r2,r2,3
  812424:	10800060 	cmpeqi	r2,r2,1
  812428:	10001a1e 	bne	r2,zero,812494 <read+0xdc>
  81242c:	e0bffa17 	ldw	r2,-24(fp)
  812430:	10800017 	ldw	r2,0(r2)
  812434:	10800517 	ldw	r2,20(r2)
  812438:	1005003a 	cmpeq	r2,r2,zero
  81243c:	1000151e 	bne	r2,zero,812494 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  812440:	e0bffa17 	ldw	r2,-24(fp)
  812444:	10800017 	ldw	r2,0(r2)
  812448:	10800517 	ldw	r2,20(r2)
  81244c:	e17ffc17 	ldw	r5,-16(fp)
  812450:	e1bffd17 	ldw	r6,-12(fp)
  812454:	e13ffa17 	ldw	r4,-24(fp)
  812458:	103ee83a 	callr	r2
  81245c:	e0bff915 	stw	r2,-28(fp)
  812460:	e0bff917 	ldw	r2,-28(fp)
  812464:	1004403a 	cmpge	r2,r2,zero
  812468:	1000071e 	bne	r2,zero,812488 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  81246c:	08124d80 	call	8124d8 <alt_get_errno>
  812470:	e0fff917 	ldw	r3,-28(fp)
  812474:	00c7c83a 	sub	r3,zero,r3
  812478:	10c00015 	stw	r3,0(r2)
          return -1;
  81247c:	00bfffc4 	movi	r2,-1
  812480:	e0bffe15 	stw	r2,-8(fp)
  812484:	00000e06 	br	8124c0 <read+0x108>
        }
        return rval;
  812488:	e0bff917 	ldw	r2,-28(fp)
  81248c:	e0bffe15 	stw	r2,-8(fp)
  812490:	00000b06 	br	8124c0 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  812494:	08124d80 	call	8124d8 <alt_get_errno>
  812498:	1007883a 	mov	r3,r2
  81249c:	00800344 	movi	r2,13
  8124a0:	18800015 	stw	r2,0(r3)
  8124a4:	00000406 	br	8124b8 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8124a8:	08124d80 	call	8124d8 <alt_get_errno>
  8124ac:	1007883a 	mov	r3,r2
  8124b0:	00801444 	movi	r2,81
  8124b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8124b8:	00bfffc4 	movi	r2,-1
  8124bc:	e0bffe15 	stw	r2,-8(fp)
  8124c0:	e0bffe17 	ldw	r2,-8(fp)
}
  8124c4:	e037883a 	mov	sp,fp
  8124c8:	dfc00117 	ldw	ra,4(sp)
  8124cc:	df000017 	ldw	fp,0(sp)
  8124d0:	dec00204 	addi	sp,sp,8
  8124d4:	f800283a 	ret

008124d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8124d8:	defffd04 	addi	sp,sp,-12
  8124dc:	dfc00215 	stw	ra,8(sp)
  8124e0:	df000115 	stw	fp,4(sp)
  8124e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8124e8:	008020b4 	movhi	r2,130
  8124ec:	10b9cc04 	addi	r2,r2,-6352
  8124f0:	10800017 	ldw	r2,0(r2)
  8124f4:	1005003a 	cmpeq	r2,r2,zero
  8124f8:	1000061e 	bne	r2,zero,812514 <alt_get_errno+0x3c>
  8124fc:	008020b4 	movhi	r2,130
  812500:	10b9cc04 	addi	r2,r2,-6352
  812504:	10800017 	ldw	r2,0(r2)
  812508:	103ee83a 	callr	r2
  81250c:	e0bfff15 	stw	r2,-4(fp)
  812510:	00000306 	br	812520 <alt_get_errno+0x48>
  812514:	008020b4 	movhi	r2,130
  812518:	1080ef04 	addi	r2,r2,956
  81251c:	e0bfff15 	stw	r2,-4(fp)
  812520:	e0bfff17 	ldw	r2,-4(fp)
}
  812524:	e037883a 	mov	sp,fp
  812528:	dfc00117 	ldw	ra,4(sp)
  81252c:	df000017 	ldw	fp,0(sp)
  812530:	dec00204 	addi	sp,sp,8
  812534:	f800283a 	ret

00812538 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  812538:	defffe04 	addi	sp,sp,-8
  81253c:	df000115 	stw	fp,4(sp)
  812540:	df000104 	addi	fp,sp,4
  812544:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  812548:	e0bfff17 	ldw	r2,-4(fp)
  81254c:	108000d0 	cmplti	r2,r2,3
  812550:	10000d1e 	bne	r2,zero,812588 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  812554:	e0bfff17 	ldw	r2,-4(fp)
  812558:	00c020b4 	movhi	r3,130
  81255c:	18f4ee04 	addi	r3,r3,-11336
  812560:	10800324 	muli	r2,r2,12
  812564:	10c5883a 	add	r2,r2,r3
  812568:	10800204 	addi	r2,r2,8
  81256c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  812570:	e0bfff17 	ldw	r2,-4(fp)
  812574:	00c020b4 	movhi	r3,130
  812578:	18f4ee04 	addi	r3,r3,-11336
  81257c:	10800324 	muli	r2,r2,12
  812580:	10c5883a 	add	r2,r2,r3
  812584:	10000015 	stw	zero,0(r2)
  }
}
  812588:	e037883a 	mov	sp,fp
  81258c:	df000017 	ldw	fp,0(sp)
  812590:	dec00104 	addi	sp,sp,4
  812594:	f800283a 	ret

00812598 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  812598:	defff804 	addi	sp,sp,-32
  81259c:	df000715 	stw	fp,28(sp)
  8125a0:	df000704 	addi	fp,sp,28
  8125a4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8125a8:	0005303a 	rdctl	r2,status
  8125ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8125b0:	e0fffb17 	ldw	r3,-20(fp)
  8125b4:	00bfff84 	movi	r2,-2
  8125b8:	1884703a 	and	r2,r3,r2
  8125bc:	1001703a 	wrctl	status,r2
  
  return context;
  8125c0:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  8125c4:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  8125c8:	d0a01317 	ldw	r2,-32692(gp)
  8125cc:	10c000c4 	addi	r3,r2,3
  8125d0:	00bfff04 	movi	r2,-4
  8125d4:	1884703a 	and	r2,r3,r2
  8125d8:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  8125dc:	d0e01317 	ldw	r3,-32692(gp)
  8125e0:	e0bffe17 	ldw	r2,-8(fp)
  8125e4:	1887883a 	add	r3,r3,r2
  8125e8:	00804034 	movhi	r2,256
  8125ec:	10800004 	addi	r2,r2,0
  8125f0:	10c0072e 	bgeu	r2,r3,812610 <sbrk+0x78>
  8125f4:	e0bffd17 	ldw	r2,-12(fp)
  8125f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8125fc:	e0bffa17 	ldw	r2,-24(fp)
  812600:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  812604:	00bfffc4 	movi	r2,-1
  812608:	e0bfff15 	stw	r2,-4(fp)
  81260c:	00000c06 	br	812640 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  812610:	d0a01317 	ldw	r2,-32692(gp)
  812614:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  812618:	d0e01317 	ldw	r3,-32692(gp)
  81261c:	e0bffe17 	ldw	r2,-8(fp)
  812620:	1885883a 	add	r2,r3,r2
  812624:	d0a01315 	stw	r2,-32692(gp)
  812628:	e0bffd17 	ldw	r2,-12(fp)
  81262c:	e0bff915 	stw	r2,-28(fp)
  812630:	e0bff917 	ldw	r2,-28(fp)
  812634:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  812638:	e0bffc17 	ldw	r2,-16(fp)
  81263c:	e0bfff15 	stw	r2,-4(fp)
  812640:	e0bfff17 	ldw	r2,-4(fp)
} 
  812644:	e037883a 	mov	sp,fp
  812648:	df000017 	ldw	fp,0(sp)
  81264c:	dec00104 	addi	sp,sp,4
  812650:	f800283a 	ret

00812654 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  812654:	defffa04 	addi	sp,sp,-24
  812658:	df000515 	stw	fp,20(sp)
  81265c:	df000504 	addi	fp,sp,20
  812660:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812664:	0005303a 	rdctl	r2,status
  812668:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81266c:	e0fffd17 	ldw	r3,-12(fp)
  812670:	00bfff84 	movi	r2,-2
  812674:	1884703a 	and	r2,r3,r2
  812678:	1001703a 	wrctl	status,r2
  
  return context;
  81267c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  812680:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  812684:	e0bfff17 	ldw	r2,-4(fp)
  812688:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  81268c:	e0bffc17 	ldw	r2,-16(fp)
  812690:	10c00017 	ldw	r3,0(r2)
  812694:	e0bffc17 	ldw	r2,-16(fp)
  812698:	10800117 	ldw	r2,4(r2)
  81269c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  8126a0:	e0bffc17 	ldw	r2,-16(fp)
  8126a4:	10c00117 	ldw	r3,4(r2)
  8126a8:	e0bffc17 	ldw	r2,-16(fp)
  8126ac:	10800017 	ldw	r2,0(r2)
  8126b0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8126b4:	e0fffc17 	ldw	r3,-16(fp)
  8126b8:	e0bffc17 	ldw	r2,-16(fp)
  8126bc:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  8126c0:	e0fffc17 	ldw	r3,-16(fp)
  8126c4:	e0bffc17 	ldw	r2,-16(fp)
  8126c8:	18800015 	stw	r2,0(r3)
  8126cc:	e0bffe17 	ldw	r2,-8(fp)
  8126d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8126d4:	e0bffb17 	ldw	r2,-20(fp)
  8126d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8126dc:	e037883a 	mov	sp,fp
  8126e0:	df000017 	ldw	fp,0(sp)
  8126e4:	dec00104 	addi	sp,sp,4
  8126e8:	f800283a 	ret

008126ec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8126ec:	defffb04 	addi	sp,sp,-20
  8126f0:	dfc00415 	stw	ra,16(sp)
  8126f4:	df000315 	stw	fp,12(sp)
  8126f8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8126fc:	d0a01417 	ldw	r2,-32688(gp)
  812700:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  812704:	d0a74117 	ldw	r2,-25340(gp)
  812708:	10800044 	addi	r2,r2,1
  81270c:	d0a74115 	stw	r2,-25340(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  812710:	00003106 	br	8127d8 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  812714:	e0bffe17 	ldw	r2,-8(fp)
  812718:	10800017 	ldw	r2,0(r2)
  81271c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  812720:	e0bffe17 	ldw	r2,-8(fp)
  812724:	10800403 	ldbu	r2,16(r2)
  812728:	10803fcc 	andi	r2,r2,255
  81272c:	1005003a 	cmpeq	r2,r2,zero
  812730:	1000051e 	bne	r2,zero,812748 <alt_tick+0x5c>
  812734:	d0a74117 	ldw	r2,-25340(gp)
  812738:	1004c03a 	cmpne	r2,r2,zero
  81273c:	1000021e 	bne	r2,zero,812748 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  812740:	e0bffe17 	ldw	r2,-8(fp)
  812744:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  812748:	e0bffe17 	ldw	r2,-8(fp)
  81274c:	10c00217 	ldw	r3,8(r2)
  812750:	d0a74117 	ldw	r2,-25340(gp)
  812754:	10c01e36 	bltu	r2,r3,8127d0 <alt_tick+0xe4>
  812758:	e0bffe17 	ldw	r2,-8(fp)
  81275c:	10800403 	ldbu	r2,16(r2)
  812760:	10803fcc 	andi	r2,r2,255
  812764:	1004c03a 	cmpne	r2,r2,zero
  812768:	1000191e 	bne	r2,zero,8127d0 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  81276c:	e0bffe17 	ldw	r2,-8(fp)
  812770:	10c00317 	ldw	r3,12(r2)
  812774:	e0bffe17 	ldw	r2,-8(fp)
  812778:	11000517 	ldw	r4,20(r2)
  81277c:	183ee83a 	callr	r3
  812780:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  812784:	e0bffd17 	ldw	r2,-12(fp)
  812788:	1004c03a 	cmpne	r2,r2,zero
  81278c:	1000031e 	bne	r2,zero,81279c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  812790:	e13ffe17 	ldw	r4,-8(fp)
  812794:	08126540 	call	812654 <alt_alarm_stop>
  812798:	00000d06 	br	8127d0 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  81279c:	e0bffe17 	ldw	r2,-8(fp)
  8127a0:	10c00217 	ldw	r3,8(r2)
  8127a4:	e0bffd17 	ldw	r2,-12(fp)
  8127a8:	1887883a 	add	r3,r3,r2
  8127ac:	e0bffe17 	ldw	r2,-8(fp)
  8127b0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8127b4:	e0bffe17 	ldw	r2,-8(fp)
  8127b8:	10c00217 	ldw	r3,8(r2)
  8127bc:	d0a74117 	ldw	r2,-25340(gp)
  8127c0:	1880032e 	bgeu	r3,r2,8127d0 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  8127c4:	e0fffe17 	ldw	r3,-8(fp)
  8127c8:	00800044 	movi	r2,1
  8127cc:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  8127d0:	e0bfff17 	ldw	r2,-4(fp)
  8127d4:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8127d8:	d0e01404 	addi	r3,gp,-32688
  8127dc:	e0bffe17 	ldw	r2,-8(fp)
  8127e0:	10ffcc1e 	bne	r2,r3,812714 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  8127e4:	e037883a 	mov	sp,fp
  8127e8:	dfc00117 	ldw	ra,4(sp)
  8127ec:	df000017 	ldw	fp,0(sp)
  8127f0:	dec00204 	addi	sp,sp,8
  8127f4:	f800283a 	ret

008127f8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  8127f8:	defffd04 	addi	sp,sp,-12
  8127fc:	dfc00215 	stw	ra,8(sp)
  812800:	df000115 	stw	fp,4(sp)
  812804:	df000104 	addi	fp,sp,4
  812808:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  81280c:	e13fff17 	ldw	r4,-4(fp)
  812810:	081aedc0 	call	81aedc <alt_busy_sleep>
}
  812814:	e037883a 	mov	sp,fp
  812818:	dfc00117 	ldw	ra,4(sp)
  81281c:	df000017 	ldw	fp,0(sp)
  812820:	dec00204 	addi	sp,sp,8
  812824:	f800283a 	ret

00812828 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  812828:	defff704 	addi	sp,sp,-36
  81282c:	dfc00815 	stw	ra,32(sp)
  812830:	df000715 	stw	fp,28(sp)
  812834:	df000704 	addi	fp,sp,28
  812838:	e13ffb15 	stw	r4,-20(fp)
  81283c:	e17ffc15 	stw	r5,-16(fp)
  812840:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812844:	e0bffb17 	ldw	r2,-20(fp)
  812848:	1004803a 	cmplt	r2,r2,zero
  81284c:	1000081e 	bne	r2,zero,812870 <write+0x48>
  812850:	e0bffb17 	ldw	r2,-20(fp)
  812854:	10800324 	muli	r2,r2,12
  812858:	1007883a 	mov	r3,r2
  81285c:	008020b4 	movhi	r2,130
  812860:	10b4ee04 	addi	r2,r2,-11336
  812864:	1887883a 	add	r3,r3,r2
  812868:	e0ffff15 	stw	r3,-4(fp)
  81286c:	00000106 	br	812874 <write+0x4c>
  812870:	e03fff15 	stw	zero,-4(fp)
  812874:	e0bfff17 	ldw	r2,-4(fp)
  812878:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  81287c:	e0bffa17 	ldw	r2,-24(fp)
  812880:	1005003a 	cmpeq	r2,r2,zero
  812884:	1000241e 	bne	r2,zero,812918 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  812888:	e0bffa17 	ldw	r2,-24(fp)
  81288c:	10800217 	ldw	r2,8(r2)
  812890:	108000cc 	andi	r2,r2,3
  812894:	1005003a 	cmpeq	r2,r2,zero
  812898:	10001a1e 	bne	r2,zero,812904 <write+0xdc>
  81289c:	e0bffa17 	ldw	r2,-24(fp)
  8128a0:	10800017 	ldw	r2,0(r2)
  8128a4:	10800617 	ldw	r2,24(r2)
  8128a8:	1005003a 	cmpeq	r2,r2,zero
  8128ac:	1000151e 	bne	r2,zero,812904 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8128b0:	e0bffa17 	ldw	r2,-24(fp)
  8128b4:	10800017 	ldw	r2,0(r2)
  8128b8:	10800617 	ldw	r2,24(r2)
  8128bc:	e17ffc17 	ldw	r5,-16(fp)
  8128c0:	e1bffd17 	ldw	r6,-12(fp)
  8128c4:	e13ffa17 	ldw	r4,-24(fp)
  8128c8:	103ee83a 	callr	r2
  8128cc:	e0bff915 	stw	r2,-28(fp)
  8128d0:	e0bff917 	ldw	r2,-28(fp)
  8128d4:	1004403a 	cmpge	r2,r2,zero
  8128d8:	1000071e 	bne	r2,zero,8128f8 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  8128dc:	08129480 	call	812948 <alt_get_errno>
  8128e0:	e0fff917 	ldw	r3,-28(fp)
  8128e4:	00c7c83a 	sub	r3,zero,r3
  8128e8:	10c00015 	stw	r3,0(r2)
        return -1;
  8128ec:	00bfffc4 	movi	r2,-1
  8128f0:	e0bffe15 	stw	r2,-8(fp)
  8128f4:	00000e06 	br	812930 <write+0x108>
      }
      return rval;
  8128f8:	e0bff917 	ldw	r2,-28(fp)
  8128fc:	e0bffe15 	stw	r2,-8(fp)
  812900:	00000b06 	br	812930 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  812904:	08129480 	call	812948 <alt_get_errno>
  812908:	1007883a 	mov	r3,r2
  81290c:	00800344 	movi	r2,13
  812910:	18800015 	stw	r2,0(r3)
  812914:	00000406 	br	812928 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  812918:	08129480 	call	812948 <alt_get_errno>
  81291c:	1007883a 	mov	r3,r2
  812920:	00801444 	movi	r2,81
  812924:	18800015 	stw	r2,0(r3)
  }
  return -1;
  812928:	00bfffc4 	movi	r2,-1
  81292c:	e0bffe15 	stw	r2,-8(fp)
  812930:	e0bffe17 	ldw	r2,-8(fp)
}
  812934:	e037883a 	mov	sp,fp
  812938:	dfc00117 	ldw	ra,4(sp)
  81293c:	df000017 	ldw	fp,0(sp)
  812940:	dec00204 	addi	sp,sp,8
  812944:	f800283a 	ret

00812948 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812948:	defffd04 	addi	sp,sp,-12
  81294c:	dfc00215 	stw	ra,8(sp)
  812950:	df000115 	stw	fp,4(sp)
  812954:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812958:	008020b4 	movhi	r2,130
  81295c:	10b9cc04 	addi	r2,r2,-6352
  812960:	10800017 	ldw	r2,0(r2)
  812964:	1005003a 	cmpeq	r2,r2,zero
  812968:	1000061e 	bne	r2,zero,812984 <alt_get_errno+0x3c>
  81296c:	008020b4 	movhi	r2,130
  812970:	10b9cc04 	addi	r2,r2,-6352
  812974:	10800017 	ldw	r2,0(r2)
  812978:	103ee83a 	callr	r2
  81297c:	e0bfff15 	stw	r2,-4(fp)
  812980:	00000306 	br	812990 <alt_get_errno+0x48>
  812984:	008020b4 	movhi	r2,130
  812988:	1080ef04 	addi	r2,r2,956
  81298c:	e0bfff15 	stw	r2,-4(fp)
  812990:	e0bfff17 	ldw	r2,-4(fp)
}
  812994:	e037883a 	mov	sp,fp
  812998:	dfc00117 	ldw	ra,4(sp)
  81299c:	df000017 	ldw	fp,0(sp)
  8129a0:	dec00204 	addi	sp,sp,8
  8129a4:	f800283a 	ret

008129a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8129a8:	defffd04 	addi	sp,sp,-12
  8129ac:	dfc00215 	stw	ra,8(sp)
  8129b0:	df000115 	stw	fp,4(sp)
  8129b4:	df000104 	addi	fp,sp,4
  8129b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  8129bc:	081b70c0 	call	81b70c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8129c0:	00800044 	movi	r2,1
  8129c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8129c8:	e037883a 	mov	sp,fp
  8129cc:	dfc00117 	ldw	ra,4(sp)
  8129d0:	df000017 	ldw	fp,0(sp)
  8129d4:	dec00204 	addi	sp,sp,8
  8129d8:	f800283a 	ret

008129dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8129dc:	defffd04 	addi	sp,sp,-12
  8129e0:	dfc00215 	stw	ra,8(sp)
  8129e4:	df000115 	stw	fp,4(sp)
  8129e8:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( HAL_SYSTEM_TIMER, HAL_system_timer);
  8129ec:	01004034 	movhi	r4,256
  8129f0:	21040004 	addi	r4,r4,4096
  8129f4:	000b883a 	mov	r5,zero
  8129f8:	000d883a 	mov	r6,zero
  8129fc:	01c0fa04 	movi	r7,1000
  812a00:	08138a40 	call	8138a4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( HARDWARE_TIMER, hardware_timer);
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
  812a04:	00c020b4 	movhi	r3,130
  812a08:	18c0fd04 	addi	r3,r3,1012
  812a0c:	00804034 	movhi	r2,256
  812a10:	10840804 	addi	r2,r2,4128
  812a14:	18800015 	stw	r2,0(r3)
  812a18:	00c020b4 	movhi	r3,130
  812a1c:	18c0fe04 	addi	r3,r3,1016
  812a20:	0080bef4 	movhi	r2,763
  812a24:	10bc2004 	addi	r2,r2,-3968
  812a28:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  812a2c:	010020b4 	movhi	r4,130
  812a30:	21355804 	addi	r4,r4,-10912
  812a34:	000b883a 	mov	r5,zero
  812a38:	01800144 	movi	r6,5
  812a3c:	0812ed00 	call	812ed0 <altera_avalon_jtag_uart_init>
  812a40:	010020b4 	movhi	r4,130
  812a44:	21354e04 	addi	r4,r4,-10952
  812a48:	0812d500 	call	812d50 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
  812a4c:	010020b4 	movhi	r4,130
  812a50:	21396604 	addi	r4,r4,-6760
  812a54:	0812d500 	call	812d50 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
  812a58:	010020b4 	movhi	r4,130
  812a5c:	21397204 	addi	r4,r4,-6712
  812a60:	0812d500 	call	812d50 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  812a64:	010020b4 	movhi	r4,130
  812a68:	21397e04 	addi	r4,r4,-6664
  812a6c:	0814ad80 	call	814ad8 <alt_up_character_lcd_init>
  812a70:	010020b4 	movhi	r4,130
  812a74:	21397e04 	addi	r4,r4,-6664
  812a78:	0812d500 	call	812d50 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_DRAWER, char_drawer);
  812a7c:	008020b4 	movhi	r2,130
  812a80:	10b98904 	addi	r2,r2,-6620
  812a84:	10800a17 	ldw	r2,40(r2)
  812a88:	10800104 	addi	r2,r2,4
  812a8c:	10800017 	ldw	r2,0(r2)
  812a90:	10ffffcc 	andi	r3,r2,65535
  812a94:	008020b4 	movhi	r2,130
  812a98:	10b98904 	addi	r2,r2,-6620
  812a9c:	10c00c15 	stw	r3,48(r2)
  812aa0:	008020b4 	movhi	r2,130
  812aa4:	10b98904 	addi	r2,r2,-6620
  812aa8:	10800a17 	ldw	r2,40(r2)
  812aac:	10800104 	addi	r2,r2,4
  812ab0:	10800017 	ldw	r2,0(r2)
  812ab4:	1005d43a 	srai	r2,r2,16
  812ab8:	10ffffcc 	andi	r3,r2,65535
  812abc:	008020b4 	movhi	r2,130
  812ac0:	10b98904 	addi	r2,r2,-6620
  812ac4:	10c00d15 	stw	r3,52(r2)
  812ac8:	008020b4 	movhi	r2,130
  812acc:	10b98904 	addi	r2,r2,-6620
  812ad0:	10800c17 	ldw	r2,48(r2)
  812ad4:	10801068 	cmpgeui	r2,r2,65
  812ad8:	1000081e 	bne	r2,zero,812afc <alt_sys_init+0x120>
  812adc:	00c020b4 	movhi	r3,130
  812ae0:	18f98904 	addi	r3,r3,-6620
  812ae4:	00800fc4 	movi	r2,63
  812ae8:	18800f15 	stw	r2,60(r3)
  812aec:	00c020b4 	movhi	r3,130
  812af0:	18f98904 	addi	r3,r3,-6620
  812af4:	00800184 	movi	r2,6
  812af8:	18801015 	stw	r2,64(r3)
  812afc:	008020b4 	movhi	r2,130
  812b00:	10b98904 	addi	r2,r2,-6620
  812b04:	10800d17 	ldw	r2,52(r2)
  812b08:	10800868 	cmpgeui	r2,r2,33
  812b0c:	1000041e 	bne	r2,zero,812b20 <alt_sys_init+0x144>
  812b10:	00c020b4 	movhi	r3,130
  812b14:	18f98904 	addi	r3,r3,-6620
  812b18:	008007c4 	movi	r2,31
  812b1c:	18801115 	stw	r2,68(r3)
  812b20:	010020b4 	movhi	r4,130
  812b24:	21398904 	addi	r4,r4,-6620
  812b28:	0814f580 	call	814f58 <alt_up_char_buffer_init>
  812b2c:	010020b4 	movhi	r4,130
  812b30:	21398904 	addi	r4,r4,-6620
  812b34:	0812d500 	call	812d50 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, pixel_buffer_dma);
  812b38:	008020b4 	movhi	r2,130
  812b3c:	10b99b04 	addi	r2,r2,-6548
  812b40:	10800a17 	ldw	r2,40(r2)
  812b44:	10800017 	ldw	r2,0(r2)
  812b48:	1007883a 	mov	r3,r2
  812b4c:	008020b4 	movhi	r2,130
  812b50:	10b99b04 	addi	r2,r2,-6548
  812b54:	10c00b15 	stw	r3,44(r2)
  812b58:	008020b4 	movhi	r2,130
  812b5c:	10b99b04 	addi	r2,r2,-6548
  812b60:	10800a17 	ldw	r2,40(r2)
  812b64:	10800104 	addi	r2,r2,4
  812b68:	10800017 	ldw	r2,0(r2)
  812b6c:	1007883a 	mov	r3,r2
  812b70:	008020b4 	movhi	r2,130
  812b74:	10b99b04 	addi	r2,r2,-6548
  812b78:	10c00c15 	stw	r3,48(r2)
  812b7c:	008020b4 	movhi	r2,130
  812b80:	10b99b04 	addi	r2,r2,-6548
  812b84:	10800a17 	ldw	r2,40(r2)
  812b88:	10800204 	addi	r2,r2,8
  812b8c:	10800017 	ldw	r2,0(r2)
  812b90:	10ffffcc 	andi	r3,r2,65535
  812b94:	008020b4 	movhi	r2,130
  812b98:	10b99b04 	addi	r2,r2,-6548
  812b9c:	10c00f15 	stw	r3,60(r2)
  812ba0:	008020b4 	movhi	r2,130
  812ba4:	10b99b04 	addi	r2,r2,-6548
  812ba8:	10800a17 	ldw	r2,40(r2)
  812bac:	10800204 	addi	r2,r2,8
  812bb0:	10800017 	ldw	r2,0(r2)
  812bb4:	1005d43a 	srai	r2,r2,16
  812bb8:	10ffffcc 	andi	r3,r2,65535
  812bbc:	008020b4 	movhi	r2,130
  812bc0:	10b99b04 	addi	r2,r2,-6548
  812bc4:	10c01015 	stw	r3,64(r2)
  812bc8:	008020b4 	movhi	r2,130
  812bcc:	10b99b04 	addi	r2,r2,-6548
  812bd0:	10800a17 	ldw	r2,40(r2)
  812bd4:	10800304 	addi	r2,r2,12
  812bd8:	10800017 	ldw	r2,0(r2)
  812bdc:	1005d07a 	srai	r2,r2,1
  812be0:	10c0004c 	andi	r3,r2,1
  812be4:	008020b4 	movhi	r2,130
  812be8:	10b99b04 	addi	r2,r2,-6548
  812bec:	10c00d15 	stw	r3,52(r2)
  812bf0:	008020b4 	movhi	r2,130
  812bf4:	10b99b04 	addi	r2,r2,-6548
  812bf8:	10800a17 	ldw	r2,40(r2)
  812bfc:	10800304 	addi	r2,r2,12
  812c00:	10800017 	ldw	r2,0(r2)
  812c04:	1005d13a 	srai	r2,r2,4
  812c08:	10c003cc 	andi	r3,r2,15
  812c0c:	008020b4 	movhi	r2,130
  812c10:	10b99b04 	addi	r2,r2,-6548
  812c14:	10c00e15 	stw	r3,56(r2)
  812c18:	008020b4 	movhi	r2,130
  812c1c:	10b99b04 	addi	r2,r2,-6548
  812c20:	10800a17 	ldw	r2,40(r2)
  812c24:	10800304 	addi	r2,r2,12
  812c28:	10800017 	ldw	r2,0(r2)
  812c2c:	1005d43a 	srai	r2,r2,16
  812c30:	1007883a 	mov	r3,r2
  812c34:	00bfffc4 	movi	r2,-1
  812c38:	1884703a 	and	r2,r3,r2
  812c3c:	e0bfff45 	stb	r2,-3(fp)
  812c40:	008020b4 	movhi	r2,130
  812c44:	10b99b04 	addi	r2,r2,-6548
  812c48:	10800a17 	ldw	r2,40(r2)
  812c4c:	10800304 	addi	r2,r2,12
  812c50:	10800017 	ldw	r2,0(r2)
  812c54:	1005d63a 	srai	r2,r2,24
  812c58:	1007883a 	mov	r3,r2
  812c5c:	00bfffc4 	movi	r2,-1
  812c60:	1884703a 	and	r2,r3,r2
  812c64:	e0bfff05 	stb	r2,-4(fp)
  812c68:	008020b4 	movhi	r2,130
  812c6c:	10b99b04 	addi	r2,r2,-6548
  812c70:	10800e17 	ldw	r2,56(r2)
  812c74:	10800058 	cmpnei	r2,r2,1
  812c78:	1000041e 	bne	r2,zero,812c8c <alt_sys_init+0x2b0>
  812c7c:	008020b4 	movhi	r2,130
  812c80:	10b99b04 	addi	r2,r2,-6548
  812c84:	10001115 	stw	zero,68(r2)
  812c88:	00000e06 	br	812cc4 <alt_sys_init+0x2e8>
  812c8c:	008020b4 	movhi	r2,130
  812c90:	10b99b04 	addi	r2,r2,-6548
  812c94:	10800e17 	ldw	r2,56(r2)
  812c98:	10800098 	cmpnei	r2,r2,2
  812c9c:	1000051e 	bne	r2,zero,812cb4 <alt_sys_init+0x2d8>
  812ca0:	00c020b4 	movhi	r3,130
  812ca4:	18f99b04 	addi	r3,r3,-6548
  812ca8:	00800044 	movi	r2,1
  812cac:	18801115 	stw	r2,68(r3)
  812cb0:	00000406 	br	812cc4 <alt_sys_init+0x2e8>
  812cb4:	00c020b4 	movhi	r3,130
  812cb8:	18f99b04 	addi	r3,r3,-6548
  812cbc:	00800084 	movi	r2,2
  812cc0:	18801115 	stw	r2,68(r3)
  812cc4:	e0ffff43 	ldbu	r3,-3(fp)
  812cc8:	00800804 	movi	r2,32
  812ccc:	10c7c83a 	sub	r3,r2,r3
  812cd0:	00bfffc4 	movi	r2,-1
  812cd4:	10c6d83a 	srl	r3,r2,r3
  812cd8:	008020b4 	movhi	r2,130
  812cdc:	10b99b04 	addi	r2,r2,-6548
  812ce0:	10c01215 	stw	r3,72(r2)
  812ce4:	e0ffff43 	ldbu	r3,-3(fp)
  812ce8:	008020b4 	movhi	r2,130
  812cec:	10b99b04 	addi	r2,r2,-6548
  812cf0:	10801117 	ldw	r2,68(r2)
  812cf4:	1887883a 	add	r3,r3,r2
  812cf8:	008020b4 	movhi	r2,130
  812cfc:	10b99b04 	addi	r2,r2,-6548
  812d00:	10c01315 	stw	r3,76(r2)
  812d04:	e0ffff03 	ldbu	r3,-4(fp)
  812d08:	00800804 	movi	r2,32
  812d0c:	10c7c83a 	sub	r3,r2,r3
  812d10:	00bfffc4 	movi	r2,-1
  812d14:	10c6d83a 	srl	r3,r2,r3
  812d18:	008020b4 	movhi	r2,130
  812d1c:	10b99b04 	addi	r2,r2,-6548
  812d20:	10c01415 	stw	r3,80(r2)
  812d24:	010020b4 	movhi	r4,130
  812d28:	21399b04 	addi	r4,r4,-6548
  812d2c:	0812d500 	call	812d50 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
  812d30:	010020b4 	movhi	r4,130
  812d34:	2139b004 	addi	r4,r4,-6464
  812d38:	0812d500 	call	812d50 <alt_dev_reg>
}
  812d3c:	e037883a 	mov	sp,fp
  812d40:	dfc00117 	ldw	ra,4(sp)
  812d44:	df000017 	ldw	fp,0(sp)
  812d48:	dec00204 	addi	sp,sp,8
  812d4c:	f800283a 	ret

00812d50 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  812d50:	defffd04 	addi	sp,sp,-12
  812d54:	dfc00215 	stw	ra,8(sp)
  812d58:	df000115 	stw	fp,4(sp)
  812d5c:	df000104 	addi	fp,sp,4
  812d60:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  812d64:	e13fff17 	ldw	r4,-4(fp)
  812d68:	014020b4 	movhi	r5,130
  812d6c:	2979c904 	addi	r5,r5,-6364
  812d70:	081b06c0 	call	81b06c <alt_dev_llist_insert>
}
  812d74:	e037883a 	mov	sp,fp
  812d78:	dfc00117 	ldw	ra,4(sp)
  812d7c:	df000017 	ldw	fp,0(sp)
  812d80:	dec00204 	addi	sp,sp,8
  812d84:	f800283a 	ret

00812d88 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  812d88:	defffa04 	addi	sp,sp,-24
  812d8c:	dfc00515 	stw	ra,20(sp)
  812d90:	df000415 	stw	fp,16(sp)
  812d94:	df000404 	addi	fp,sp,16
  812d98:	e13ffd15 	stw	r4,-12(fp)
  812d9c:	e17ffe15 	stw	r5,-8(fp)
  812da0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  812da4:	e0bffd17 	ldw	r2,-12(fp)
  812da8:	10800017 	ldw	r2,0(r2)
  812dac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  812db0:	e0bffc17 	ldw	r2,-16(fp)
  812db4:	11000a04 	addi	r4,r2,40
  812db8:	e0bffd17 	ldw	r2,-12(fp)
  812dbc:	11c00217 	ldw	r7,8(r2)
  812dc0:	e17ffe17 	ldw	r5,-8(fp)
  812dc4:	e1bfff17 	ldw	r6,-4(fp)
  812dc8:	08133cc0 	call	8133cc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  812dcc:	e037883a 	mov	sp,fp
  812dd0:	dfc00117 	ldw	ra,4(sp)
  812dd4:	df000017 	ldw	fp,0(sp)
  812dd8:	dec00204 	addi	sp,sp,8
  812ddc:	f800283a 	ret

00812de0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  812de0:	defffa04 	addi	sp,sp,-24
  812de4:	dfc00515 	stw	ra,20(sp)
  812de8:	df000415 	stw	fp,16(sp)
  812dec:	df000404 	addi	fp,sp,16
  812df0:	e13ffd15 	stw	r4,-12(fp)
  812df4:	e17ffe15 	stw	r5,-8(fp)
  812df8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  812dfc:	e0bffd17 	ldw	r2,-12(fp)
  812e00:	10800017 	ldw	r2,0(r2)
  812e04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  812e08:	e0bffc17 	ldw	r2,-16(fp)
  812e0c:	11000a04 	addi	r4,r2,40
  812e10:	e0bffd17 	ldw	r2,-12(fp)
  812e14:	11c00217 	ldw	r7,8(r2)
  812e18:	e17ffe17 	ldw	r5,-8(fp)
  812e1c:	e1bfff17 	ldw	r6,-4(fp)
  812e20:	08135f00 	call	8135f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  812e24:	e037883a 	mov	sp,fp
  812e28:	dfc00117 	ldw	ra,4(sp)
  812e2c:	df000017 	ldw	fp,0(sp)
  812e30:	dec00204 	addi	sp,sp,8
  812e34:	f800283a 	ret

00812e38 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  812e38:	defffc04 	addi	sp,sp,-16
  812e3c:	dfc00315 	stw	ra,12(sp)
  812e40:	df000215 	stw	fp,8(sp)
  812e44:	df000204 	addi	fp,sp,8
  812e48:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  812e4c:	e0bfff17 	ldw	r2,-4(fp)
  812e50:	10800017 	ldw	r2,0(r2)
  812e54:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  812e58:	e0bffe17 	ldw	r2,-8(fp)
  812e5c:	11000a04 	addi	r4,r2,40
  812e60:	e0bfff17 	ldw	r2,-4(fp)
  812e64:	11400217 	ldw	r5,8(r2)
  812e68:	08132640 	call	813264 <altera_avalon_jtag_uart_close>
}
  812e6c:	e037883a 	mov	sp,fp
  812e70:	dfc00117 	ldw	ra,4(sp)
  812e74:	df000017 	ldw	fp,0(sp)
  812e78:	dec00204 	addi	sp,sp,8
  812e7c:	f800283a 	ret

00812e80 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  812e80:	defffa04 	addi	sp,sp,-24
  812e84:	dfc00515 	stw	ra,20(sp)
  812e88:	df000415 	stw	fp,16(sp)
  812e8c:	df000404 	addi	fp,sp,16
  812e90:	e13ffd15 	stw	r4,-12(fp)
  812e94:	e17ffe15 	stw	r5,-8(fp)
  812e98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  812e9c:	e0bffd17 	ldw	r2,-12(fp)
  812ea0:	10800017 	ldw	r2,0(r2)
  812ea4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  812ea8:	e0bffc17 	ldw	r2,-16(fp)
  812eac:	11000a04 	addi	r4,r2,40
  812eb0:	e17ffe17 	ldw	r5,-8(fp)
  812eb4:	e1bfff17 	ldw	r6,-4(fp)
  812eb8:	08132d80 	call	8132d8 <altera_avalon_jtag_uart_ioctl>
}
  812ebc:	e037883a 	mov	sp,fp
  812ec0:	dfc00117 	ldw	ra,4(sp)
  812ec4:	df000017 	ldw	fp,0(sp)
  812ec8:	dec00204 	addi	sp,sp,8
  812ecc:	f800283a 	ret

00812ed0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  812ed0:	defffb04 	addi	sp,sp,-20
  812ed4:	dfc00415 	stw	ra,16(sp)
  812ed8:	df000315 	stw	fp,12(sp)
  812edc:	df000304 	addi	fp,sp,12
  812ee0:	e13ffd15 	stw	r4,-12(fp)
  812ee4:	e17ffe15 	stw	r5,-8(fp)
  812ee8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  812eec:	e0fffd17 	ldw	r3,-12(fp)
  812ef0:	00800044 	movi	r2,1
  812ef4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  812ef8:	e0bffd17 	ldw	r2,-12(fp)
  812efc:	10800017 	ldw	r2,0(r2)
  812f00:	11000104 	addi	r4,r2,4
  812f04:	e0bffd17 	ldw	r2,-12(fp)
  812f08:	10800817 	ldw	r2,32(r2)
  812f0c:	1007883a 	mov	r3,r2
  812f10:	2005883a 	mov	r2,r4
  812f14:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  812f18:	e13fff17 	ldw	r4,-4(fp)
  812f1c:	e17ffd17 	ldw	r5,-12(fp)
  812f20:	01802074 	movhi	r6,129
  812f24:	318be204 	addi	r6,r6,12168
  812f28:	0811df00 	call	811df0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  812f2c:	e0bffd17 	ldw	r2,-12(fp)
  812f30:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  812f34:	e0bffd17 	ldw	r2,-12(fp)
  812f38:	11000204 	addi	r4,r2,8
  812f3c:	008020b4 	movhi	r2,130
  812f40:	1080fb04 	addi	r2,r2,1004
  812f44:	10800017 	ldw	r2,0(r2)
  812f48:	100b883a 	mov	r5,r2
  812f4c:	01802074 	movhi	r6,129
  812f50:	318c6d04 	addi	r6,r6,12724
  812f54:	e1fffd17 	ldw	r7,-12(fp)
  812f58:	081ad880 	call	81ad88 <alt_alarm_start>
  812f5c:	1004403a 	cmpge	r2,r2,zero
  812f60:	1000041e 	bne	r2,zero,812f74 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  812f64:	e0fffd17 	ldw	r3,-12(fp)
  812f68:	00a00034 	movhi	r2,32768
  812f6c:	10bfffc4 	addi	r2,r2,-1
  812f70:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  812f74:	e037883a 	mov	sp,fp
  812f78:	dfc00117 	ldw	ra,4(sp)
  812f7c:	df000017 	ldw	fp,0(sp)
  812f80:	dec00204 	addi	sp,sp,8
  812f84:	f800283a 	ret

00812f88 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  812f88:	defff704 	addi	sp,sp,-36
  812f8c:	df000815 	stw	fp,32(sp)
  812f90:	df000804 	addi	fp,sp,32
  812f94:	e13ffe15 	stw	r4,-8(fp)
  812f98:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  812f9c:	e0bffe17 	ldw	r2,-8(fp)
  812fa0:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  812fa4:	e0bffd17 	ldw	r2,-12(fp)
  812fa8:	10800017 	ldw	r2,0(r2)
  812fac:	e0bffc15 	stw	r2,-16(fp)
  812fb0:	00000006 	br	812fb4 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  812fb4:	e0bffc17 	ldw	r2,-16(fp)
  812fb8:	10800104 	addi	r2,r2,4
  812fbc:	10800037 	ldwio	r2,0(r2)
  812fc0:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  812fc4:	e0bffb17 	ldw	r2,-20(fp)
  812fc8:	1080c00c 	andi	r2,r2,768
  812fcc:	1005003a 	cmpeq	r2,r2,zero
  812fd0:	1000741e 	bne	r2,zero,8131a4 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  812fd4:	e0bffb17 	ldw	r2,-20(fp)
  812fd8:	1080400c 	andi	r2,r2,256
  812fdc:	1005003a 	cmpeq	r2,r2,zero
  812fe0:	1000351e 	bne	r2,zero,8130b8 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  812fe4:	00800074 	movhi	r2,1
  812fe8:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812fec:	e0bffd17 	ldw	r2,-12(fp)
  812ff0:	10800a17 	ldw	r2,40(r2)
  812ff4:	10800044 	addi	r2,r2,1
  812ff8:	1081ffcc 	andi	r2,r2,2047
  812ffc:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  813000:	e0bffd17 	ldw	r2,-12(fp)
  813004:	10c00b17 	ldw	r3,44(r2)
  813008:	e0bff917 	ldw	r2,-28(fp)
  81300c:	18801626 	beq	r3,r2,813068 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  813010:	e0bffc17 	ldw	r2,-16(fp)
  813014:	10800037 	ldwio	r2,0(r2)
  813018:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  81301c:	e0bffa17 	ldw	r2,-24(fp)
  813020:	10a0000c 	andi	r2,r2,32768
  813024:	1005003a 	cmpeq	r2,r2,zero
  813028:	10000f1e 	bne	r2,zero,813068 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  81302c:	e0bffd17 	ldw	r2,-12(fp)
  813030:	10c00a17 	ldw	r3,40(r2)
  813034:	e0bffa17 	ldw	r2,-24(fp)
  813038:	1009883a 	mov	r4,r2
  81303c:	e0bffd17 	ldw	r2,-12(fp)
  813040:	1885883a 	add	r2,r3,r2
  813044:	10800e04 	addi	r2,r2,56
  813048:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81304c:	e0bffd17 	ldw	r2,-12(fp)
  813050:	10800a17 	ldw	r2,40(r2)
  813054:	10800044 	addi	r2,r2,1
  813058:	10c1ffcc 	andi	r3,r2,2047
  81305c:	e0bffd17 	ldw	r2,-12(fp)
  813060:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  813064:	003fe106 	br	812fec <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  813068:	e0bffa17 	ldw	r2,-24(fp)
  81306c:	10bfffec 	andhi	r2,r2,65535
  813070:	1005003a 	cmpeq	r2,r2,zero
  813074:	1000101e 	bne	r2,zero,8130b8 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  813078:	e0bffd17 	ldw	r2,-12(fp)
  81307c:	10c00817 	ldw	r3,32(r2)
  813080:	00bfff84 	movi	r2,-2
  813084:	1886703a 	and	r3,r3,r2
  813088:	e0bffd17 	ldw	r2,-12(fp)
  81308c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  813090:	e0bffc17 	ldw	r2,-16(fp)
  813094:	11000104 	addi	r4,r2,4
  813098:	e0bffd17 	ldw	r2,-12(fp)
  81309c:	10800817 	ldw	r2,32(r2)
  8130a0:	1007883a 	mov	r3,r2
  8130a4:	2005883a 	mov	r2,r4
  8130a8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8130ac:	e0bffc17 	ldw	r2,-16(fp)
  8130b0:	10800104 	addi	r2,r2,4
  8130b4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  8130b8:	e0bffb17 	ldw	r2,-20(fp)
  8130bc:	1080800c 	andi	r2,r2,512
  8130c0:	1005003a 	cmpeq	r2,r2,zero
  8130c4:	103fbb1e 	bne	r2,zero,812fb4 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  8130c8:	e0bffb17 	ldw	r2,-20(fp)
  8130cc:	10bfffec 	andhi	r2,r2,65535
  8130d0:	1004d43a 	srli	r2,r2,16
  8130d4:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  8130d8:	00001506 	br	813130 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  8130dc:	e13ffc17 	ldw	r4,-16(fp)
  8130e0:	e0bffd17 	ldw	r2,-12(fp)
  8130e4:	10c00d17 	ldw	r3,52(r2)
  8130e8:	e0bffd17 	ldw	r2,-12(fp)
  8130ec:	1885883a 	add	r2,r3,r2
  8130f0:	10820e04 	addi	r2,r2,2104
  8130f4:	10800003 	ldbu	r2,0(r2)
  8130f8:	10c03fcc 	andi	r3,r2,255
  8130fc:	18c0201c 	xori	r3,r3,128
  813100:	18ffe004 	addi	r3,r3,-128
  813104:	2005883a 	mov	r2,r4
  813108:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81310c:	e0bffd17 	ldw	r2,-12(fp)
  813110:	10800d17 	ldw	r2,52(r2)
  813114:	10800044 	addi	r2,r2,1
  813118:	10c1ffcc 	andi	r3,r2,2047
  81311c:	e0bffd17 	ldw	r2,-12(fp)
  813120:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  813124:	e0bff817 	ldw	r2,-32(fp)
  813128:	10bfffc4 	addi	r2,r2,-1
  81312c:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  813130:	e0bff817 	ldw	r2,-32(fp)
  813134:	1005003a 	cmpeq	r2,r2,zero
  813138:	1000051e 	bne	r2,zero,813150 <altera_avalon_jtag_uart_irq+0x1c8>
  81313c:	e0bffd17 	ldw	r2,-12(fp)
  813140:	10c00d17 	ldw	r3,52(r2)
  813144:	e0bffd17 	ldw	r2,-12(fp)
  813148:	10800c17 	ldw	r2,48(r2)
  81314c:	18bfe31e 	bne	r3,r2,8130dc <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  813150:	e0bff817 	ldw	r2,-32(fp)
  813154:	1005003a 	cmpeq	r2,r2,zero
  813158:	103f961e 	bne	r2,zero,812fb4 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81315c:	e0bffd17 	ldw	r2,-12(fp)
  813160:	10c00817 	ldw	r3,32(r2)
  813164:	00bfff44 	movi	r2,-3
  813168:	1886703a 	and	r3,r3,r2
  81316c:	e0bffd17 	ldw	r2,-12(fp)
  813170:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  813174:	e0bffd17 	ldw	r2,-12(fp)
  813178:	10800017 	ldw	r2,0(r2)
  81317c:	11000104 	addi	r4,r2,4
  813180:	e0bffd17 	ldw	r2,-12(fp)
  813184:	10800817 	ldw	r2,32(r2)
  813188:	1007883a 	mov	r3,r2
  81318c:	2005883a 	mov	r2,r4
  813190:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813194:	e0bffc17 	ldw	r2,-16(fp)
  813198:	10800104 	addi	r2,r2,4
  81319c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  8131a0:	003f8406 	br	812fb4 <altera_avalon_jtag_uart_irq+0x2c>
}
  8131a4:	e037883a 	mov	sp,fp
  8131a8:	df000017 	ldw	fp,0(sp)
  8131ac:	dec00104 	addi	sp,sp,4
  8131b0:	f800283a 	ret

008131b4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  8131b4:	defffc04 	addi	sp,sp,-16
  8131b8:	df000315 	stw	fp,12(sp)
  8131bc:	df000304 	addi	fp,sp,12
  8131c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  8131c4:	e0bfff17 	ldw	r2,-4(fp)
  8131c8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  8131cc:	e0bffe17 	ldw	r2,-8(fp)
  8131d0:	10800017 	ldw	r2,0(r2)
  8131d4:	10800104 	addi	r2,r2,4
  8131d8:	10800037 	ldwio	r2,0(r2)
  8131dc:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  8131e0:	e0bffd17 	ldw	r2,-12(fp)
  8131e4:	1081000c 	andi	r2,r2,1024
  8131e8:	1005003a 	cmpeq	r2,r2,zero
  8131ec:	10000c1e 	bne	r2,zero,813220 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  8131f0:	e0bffe17 	ldw	r2,-8(fp)
  8131f4:	10800017 	ldw	r2,0(r2)
  8131f8:	11000104 	addi	r4,r2,4
  8131fc:	e0bffe17 	ldw	r2,-8(fp)
  813200:	10800817 	ldw	r2,32(r2)
  813204:	10810014 	ori	r2,r2,1024
  813208:	1007883a 	mov	r3,r2
  81320c:	2005883a 	mov	r2,r4
  813210:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  813214:	e0bffe17 	ldw	r2,-8(fp)
  813218:	10000915 	stw	zero,36(r2)
  81321c:	00000a06 	br	813248 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  813220:	e0bffe17 	ldw	r2,-8(fp)
  813224:	10c00917 	ldw	r3,36(r2)
  813228:	00a00034 	movhi	r2,32768
  81322c:	10bfff04 	addi	r2,r2,-4
  813230:	10c00536 	bltu	r2,r3,813248 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  813234:	e0bffe17 	ldw	r2,-8(fp)
  813238:	10800917 	ldw	r2,36(r2)
  81323c:	10c00044 	addi	r3,r2,1
  813240:	e0bffe17 	ldw	r2,-8(fp)
  813244:	10c00915 	stw	r3,36(r2)
  813248:	008020b4 	movhi	r2,130
  81324c:	1080fb04 	addi	r2,r2,1004
  813250:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  813254:	e037883a 	mov	sp,fp
  813258:	df000017 	ldw	fp,0(sp)
  81325c:	dec00104 	addi	sp,sp,4
  813260:	f800283a 	ret

00813264 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  813264:	defffc04 	addi	sp,sp,-16
  813268:	df000315 	stw	fp,12(sp)
  81326c:	df000304 	addi	fp,sp,12
  813270:	e13ffd15 	stw	r4,-12(fp)
  813274:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  813278:	00000706 	br	813298 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  81327c:	e0bffe17 	ldw	r2,-8(fp)
  813280:	1090000c 	andi	r2,r2,16384
  813284:	1005003a 	cmpeq	r2,r2,zero
  813288:	1000031e 	bne	r2,zero,813298 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  81328c:	00bffd44 	movi	r2,-11
  813290:	e0bfff15 	stw	r2,-4(fp)
  813294:	00000b06 	br	8132c4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  813298:	e0bffd17 	ldw	r2,-12(fp)
  81329c:	10c00d17 	ldw	r3,52(r2)
  8132a0:	e0bffd17 	ldw	r2,-12(fp)
  8132a4:	10800c17 	ldw	r2,48(r2)
  8132a8:	18800526 	beq	r3,r2,8132c0 <altera_avalon_jtag_uart_close+0x5c>
  8132ac:	e0bffd17 	ldw	r2,-12(fp)
  8132b0:	10c00917 	ldw	r3,36(r2)
  8132b4:	e0bffd17 	ldw	r2,-12(fp)
  8132b8:	10800117 	ldw	r2,4(r2)
  8132bc:	18bfef36 	bltu	r3,r2,81327c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8132c0:	e03fff15 	stw	zero,-4(fp)
  8132c4:	e0bfff17 	ldw	r2,-4(fp)
}
  8132c8:	e037883a 	mov	sp,fp
  8132cc:	df000017 	ldw	fp,0(sp)
  8132d0:	dec00104 	addi	sp,sp,4
  8132d4:	f800283a 	ret

008132d8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  8132d8:	defff804 	addi	sp,sp,-32
  8132dc:	df000715 	stw	fp,28(sp)
  8132e0:	df000704 	addi	fp,sp,28
  8132e4:	e13ffb15 	stw	r4,-20(fp)
  8132e8:	e17ffc15 	stw	r5,-16(fp)
  8132ec:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  8132f0:	00bff9c4 	movi	r2,-25
  8132f4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  8132f8:	e0bffc17 	ldw	r2,-16(fp)
  8132fc:	e0bfff15 	stw	r2,-4(fp)
  813300:	e0ffff17 	ldw	r3,-4(fp)
  813304:	189a8060 	cmpeqi	r2,r3,27137
  813308:	1000041e 	bne	r2,zero,81331c <altera_avalon_jtag_uart_ioctl+0x44>
  81330c:	e0ffff17 	ldw	r3,-4(fp)
  813310:	189a80a0 	cmpeqi	r2,r3,27138
  813314:	10001b1e 	bne	r2,zero,813384 <altera_avalon_jtag_uart_ioctl+0xac>
  813318:	00002706 	br	8133b8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  81331c:	e0bffb17 	ldw	r2,-20(fp)
  813320:	10c00117 	ldw	r3,4(r2)
  813324:	00a00034 	movhi	r2,32768
  813328:	10bfffc4 	addi	r2,r2,-1
  81332c:	18802226 	beq	r3,r2,8133b8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  813330:	e0bffd17 	ldw	r2,-12(fp)
  813334:	10800017 	ldw	r2,0(r2)
  813338:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  81333c:	e0bff917 	ldw	r2,-28(fp)
  813340:	10800090 	cmplti	r2,r2,2
  813344:	1000071e 	bne	r2,zero,813364 <altera_avalon_jtag_uart_ioctl+0x8c>
  813348:	e0fff917 	ldw	r3,-28(fp)
  81334c:	00a00034 	movhi	r2,32768
  813350:	10bfffc4 	addi	r2,r2,-1
  813354:	18800326 	beq	r3,r2,813364 <altera_avalon_jtag_uart_ioctl+0x8c>
  813358:	e0bff917 	ldw	r2,-28(fp)
  81335c:	e0bffe15 	stw	r2,-8(fp)
  813360:	00000306 	br	813370 <altera_avalon_jtag_uart_ioctl+0x98>
  813364:	00e00034 	movhi	r3,32768
  813368:	18ffff84 	addi	r3,r3,-2
  81336c:	e0fffe15 	stw	r3,-8(fp)
  813370:	e0bffb17 	ldw	r2,-20(fp)
  813374:	e0fffe17 	ldw	r3,-8(fp)
  813378:	10c00115 	stw	r3,4(r2)
      rc = 0;
  81337c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  813380:	00000d06 	br	8133b8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  813384:	e0bffb17 	ldw	r2,-20(fp)
  813388:	10c00117 	ldw	r3,4(r2)
  81338c:	00a00034 	movhi	r2,32768
  813390:	10bfffc4 	addi	r2,r2,-1
  813394:	18800826 	beq	r3,r2,8133b8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  813398:	e13ffd17 	ldw	r4,-12(fp)
  81339c:	e0bffb17 	ldw	r2,-20(fp)
  8133a0:	10c00917 	ldw	r3,36(r2)
  8133a4:	e0bffb17 	ldw	r2,-20(fp)
  8133a8:	10800117 	ldw	r2,4(r2)
  8133ac:	1885803a 	cmpltu	r2,r3,r2
  8133b0:	20800015 	stw	r2,0(r4)
      rc = 0;
  8133b4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  8133b8:	e0bffa17 	ldw	r2,-24(fp)
}
  8133bc:	e037883a 	mov	sp,fp
  8133c0:	df000017 	ldw	fp,0(sp)
  8133c4:	dec00104 	addi	sp,sp,4
  8133c8:	f800283a 	ret

008133cc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8133cc:	defff204 	addi	sp,sp,-56
  8133d0:	dfc00d15 	stw	ra,52(sp)
  8133d4:	df000c15 	stw	fp,48(sp)
  8133d8:	df000c04 	addi	fp,sp,48
  8133dc:	e13ffb15 	stw	r4,-20(fp)
  8133e0:	e17ffc15 	stw	r5,-16(fp)
  8133e4:	e1bffd15 	stw	r6,-12(fp)
  8133e8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  8133ec:	e0bffc17 	ldw	r2,-16(fp)
  8133f0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8133f4:	00004806 	br	813518 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8133f8:	e0bffb17 	ldw	r2,-20(fp)
  8133fc:	10800a17 	ldw	r2,40(r2)
  813400:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  813404:	e0bffb17 	ldw	r2,-20(fp)
  813408:	10800b17 	ldw	r2,44(r2)
  81340c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  813410:	e0fff717 	ldw	r3,-36(fp)
  813414:	e0bff617 	ldw	r2,-40(fp)
  813418:	18800536 	bltu	r3,r2,813430 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  81341c:	e0bff717 	ldw	r2,-36(fp)
  813420:	e0fff617 	ldw	r3,-40(fp)
  813424:	10c5c83a 	sub	r2,r2,r3
  813428:	e0bff815 	stw	r2,-32(fp)
  81342c:	00000406 	br	813440 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  813430:	00820004 	movi	r2,2048
  813434:	e0fff617 	ldw	r3,-40(fp)
  813438:	10c5c83a 	sub	r2,r2,r3
  81343c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  813440:	e0bff817 	ldw	r2,-32(fp)
  813444:	1005003a 	cmpeq	r2,r2,zero
  813448:	10001f1e 	bne	r2,zero,8134c8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  81344c:	e0fffd17 	ldw	r3,-12(fp)
  813450:	e0bff817 	ldw	r2,-32(fp)
  813454:	1880022e 	bgeu	r3,r2,813460 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  813458:	e0bffd17 	ldw	r2,-12(fp)
  81345c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  813460:	e0bffb17 	ldw	r2,-20(fp)
  813464:	10c00e04 	addi	r3,r2,56
  813468:	e0bff617 	ldw	r2,-40(fp)
  81346c:	1887883a 	add	r3,r3,r2
  813470:	e0bffa17 	ldw	r2,-24(fp)
  813474:	1009883a 	mov	r4,r2
  813478:	180b883a 	mov	r5,r3
  81347c:	e1bff817 	ldw	r6,-32(fp)
  813480:	080ec940 	call	80ec94 <memcpy>
      ptr   += n;
  813484:	e0fff817 	ldw	r3,-32(fp)
  813488:	e0bffa17 	ldw	r2,-24(fp)
  81348c:	10c5883a 	add	r2,r2,r3
  813490:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  813494:	e0fffd17 	ldw	r3,-12(fp)
  813498:	e0bff817 	ldw	r2,-32(fp)
  81349c:	1885c83a 	sub	r2,r3,r2
  8134a0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8134a4:	e0fff617 	ldw	r3,-40(fp)
  8134a8:	e0bff817 	ldw	r2,-32(fp)
  8134ac:	1885883a 	add	r2,r3,r2
  8134b0:	10c1ffcc 	andi	r3,r2,2047
  8134b4:	e0bffb17 	ldw	r2,-20(fp)
  8134b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8134bc:	e0bffd17 	ldw	r2,-12(fp)
  8134c0:	10800048 	cmpgei	r2,r2,1
  8134c4:	103fcc1e 	bne	r2,zero,8133f8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  8134c8:	e0fffa17 	ldw	r3,-24(fp)
  8134cc:	e0bffc17 	ldw	r2,-16(fp)
  8134d0:	1880141e 	bne	r3,r2,813524 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8134d4:	e0bffe17 	ldw	r2,-8(fp)
  8134d8:	1090000c 	andi	r2,r2,16384
  8134dc:	1004c03a 	cmpne	r2,r2,zero
  8134e0:	1000101e 	bne	r2,zero,813524 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8134e4:	e0bffb17 	ldw	r2,-20(fp)
  8134e8:	10c00a17 	ldw	r3,40(r2)
  8134ec:	e0bff717 	ldw	r2,-36(fp)
  8134f0:	1880051e 	bne	r3,r2,813508 <altera_avalon_jtag_uart_read+0x13c>
  8134f4:	e0bffb17 	ldw	r2,-20(fp)
  8134f8:	10c00917 	ldw	r3,36(r2)
  8134fc:	e0bffb17 	ldw	r2,-20(fp)
  813500:	10800117 	ldw	r2,4(r2)
  813504:	18bff736 	bltu	r3,r2,8134e4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  813508:	e0bffb17 	ldw	r2,-20(fp)
  81350c:	10c00a17 	ldw	r3,40(r2)
  813510:	e0bff717 	ldw	r2,-36(fp)
  813514:	18800326 	beq	r3,r2,813524 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  813518:	e0bffd17 	ldw	r2,-12(fp)
  81351c:	10800048 	cmpgei	r2,r2,1
  813520:	103fb51e 	bne	r2,zero,8133f8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  813524:	e0fffa17 	ldw	r3,-24(fp)
  813528:	e0bffc17 	ldw	r2,-16(fp)
  81352c:	18801926 	beq	r3,r2,813594 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813530:	0005303a 	rdctl	r2,status
  813534:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813538:	e0fff517 	ldw	r3,-44(fp)
  81353c:	00bfff84 	movi	r2,-2
  813540:	1884703a 	and	r2,r3,r2
  813544:	1001703a 	wrctl	status,r2
  
  return context;
  813548:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  81354c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  813550:	e0bffb17 	ldw	r2,-20(fp)
  813554:	10800817 	ldw	r2,32(r2)
  813558:	10c00054 	ori	r3,r2,1
  81355c:	e0bffb17 	ldw	r2,-20(fp)
  813560:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  813564:	e0bffb17 	ldw	r2,-20(fp)
  813568:	10800017 	ldw	r2,0(r2)
  81356c:	11000104 	addi	r4,r2,4
  813570:	e0bffb17 	ldw	r2,-20(fp)
  813574:	10800817 	ldw	r2,32(r2)
  813578:	1007883a 	mov	r3,r2
  81357c:	2005883a 	mov	r2,r4
  813580:	10c00035 	stwio	r3,0(r2)
  813584:	e0bff917 	ldw	r2,-28(fp)
  813588:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81358c:	e0bff417 	ldw	r2,-48(fp)
  813590:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  813594:	e0fffa17 	ldw	r3,-24(fp)
  813598:	e0bffc17 	ldw	r2,-16(fp)
  81359c:	18800526 	beq	r3,r2,8135b4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  8135a0:	e0fffa17 	ldw	r3,-24(fp)
  8135a4:	e0bffc17 	ldw	r2,-16(fp)
  8135a8:	1887c83a 	sub	r3,r3,r2
  8135ac:	e0ffff15 	stw	r3,-4(fp)
  8135b0:	00000906 	br	8135d8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  8135b4:	e0bffe17 	ldw	r2,-8(fp)
  8135b8:	1090000c 	andi	r2,r2,16384
  8135bc:	1005003a 	cmpeq	r2,r2,zero
  8135c0:	1000031e 	bne	r2,zero,8135d0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  8135c4:	00bffd44 	movi	r2,-11
  8135c8:	e0bfff15 	stw	r2,-4(fp)
  8135cc:	00000206 	br	8135d8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  8135d0:	00bffec4 	movi	r2,-5
  8135d4:	e0bfff15 	stw	r2,-4(fp)
  8135d8:	e0bfff17 	ldw	r2,-4(fp)
}
  8135dc:	e037883a 	mov	sp,fp
  8135e0:	dfc00117 	ldw	ra,4(sp)
  8135e4:	df000017 	ldw	fp,0(sp)
  8135e8:	dec00204 	addi	sp,sp,8
  8135ec:	f800283a 	ret

008135f0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8135f0:	defff204 	addi	sp,sp,-56
  8135f4:	dfc00d15 	stw	ra,52(sp)
  8135f8:	df000c15 	stw	fp,48(sp)
  8135fc:	df000c04 	addi	fp,sp,48
  813600:	e13ffb15 	stw	r4,-20(fp)
  813604:	e17ffc15 	stw	r5,-16(fp)
  813608:	e1bffd15 	stw	r6,-12(fp)
  81360c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  813610:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  813614:	e0bffc17 	ldw	r2,-16(fp)
  813618:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  81361c:	00003a06 	br	813708 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  813620:	e0bffb17 	ldw	r2,-20(fp)
  813624:	10800c17 	ldw	r2,48(r2)
  813628:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  81362c:	e0bffb17 	ldw	r2,-20(fp)
  813630:	10800d17 	ldw	r2,52(r2)
  813634:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  813638:	e0fffa17 	ldw	r3,-24(fp)
  81363c:	e0bff917 	ldw	r2,-28(fp)
  813640:	1880062e 	bgeu	r3,r2,81365c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  813644:	e0fff917 	ldw	r3,-28(fp)
  813648:	e0bffa17 	ldw	r2,-24(fp)
  81364c:	1885c83a 	sub	r2,r3,r2
  813650:	10bfffc4 	addi	r2,r2,-1
  813654:	e0bff815 	stw	r2,-32(fp)
  813658:	00000c06 	br	81368c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  81365c:	e0bff917 	ldw	r2,-28(fp)
  813660:	1005003a 	cmpeq	r2,r2,zero
  813664:	1000051e 	bne	r2,zero,81367c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  813668:	00820004 	movi	r2,2048
  81366c:	e0fffa17 	ldw	r3,-24(fp)
  813670:	10c5c83a 	sub	r2,r2,r3
  813674:	e0bff815 	stw	r2,-32(fp)
  813678:	00000406 	br	81368c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  81367c:	0081ffc4 	movi	r2,2047
  813680:	e0fffa17 	ldw	r3,-24(fp)
  813684:	10c5c83a 	sub	r2,r2,r3
  813688:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  81368c:	e0bff817 	ldw	r2,-32(fp)
  813690:	1005003a 	cmpeq	r2,r2,zero
  813694:	10001f1e 	bne	r2,zero,813714 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  813698:	e0fffd17 	ldw	r3,-12(fp)
  81369c:	e0bff817 	ldw	r2,-32(fp)
  8136a0:	1880022e 	bgeu	r3,r2,8136ac <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  8136a4:	e0bffd17 	ldw	r2,-12(fp)
  8136a8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8136ac:	e0bffb17 	ldw	r2,-20(fp)
  8136b0:	10c20e04 	addi	r3,r2,2104
  8136b4:	e0bffa17 	ldw	r2,-24(fp)
  8136b8:	1885883a 	add	r2,r3,r2
  8136bc:	e0fffc17 	ldw	r3,-16(fp)
  8136c0:	1009883a 	mov	r4,r2
  8136c4:	180b883a 	mov	r5,r3
  8136c8:	e1bff817 	ldw	r6,-32(fp)
  8136cc:	080ec940 	call	80ec94 <memcpy>
      ptr   += n;
  8136d0:	e0fff817 	ldw	r3,-32(fp)
  8136d4:	e0bffc17 	ldw	r2,-16(fp)
  8136d8:	10c5883a 	add	r2,r2,r3
  8136dc:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  8136e0:	e0fffd17 	ldw	r3,-12(fp)
  8136e4:	e0bff817 	ldw	r2,-32(fp)
  8136e8:	1885c83a 	sub	r2,r3,r2
  8136ec:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8136f0:	e0fffa17 	ldw	r3,-24(fp)
  8136f4:	e0bff817 	ldw	r2,-32(fp)
  8136f8:	1885883a 	add	r2,r3,r2
  8136fc:	10c1ffcc 	andi	r3,r2,2047
  813700:	e0bffb17 	ldw	r2,-20(fp)
  813704:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  813708:	e0bffd17 	ldw	r2,-12(fp)
  81370c:	10800048 	cmpgei	r2,r2,1
  813710:	103fc31e 	bne	r2,zero,813620 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813714:	0005303a 	rdctl	r2,status
  813718:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81371c:	e0fff517 	ldw	r3,-44(fp)
  813720:	00bfff84 	movi	r2,-2
  813724:	1884703a 	and	r2,r3,r2
  813728:	1001703a 	wrctl	status,r2
  
  return context;
  81372c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  813730:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  813734:	e0bffb17 	ldw	r2,-20(fp)
  813738:	10800817 	ldw	r2,32(r2)
  81373c:	10c00094 	ori	r3,r2,2
  813740:	e0bffb17 	ldw	r2,-20(fp)
  813744:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  813748:	e0bffb17 	ldw	r2,-20(fp)
  81374c:	10800017 	ldw	r2,0(r2)
  813750:	11000104 	addi	r4,r2,4
  813754:	e0bffb17 	ldw	r2,-20(fp)
  813758:	10800817 	ldw	r2,32(r2)
  81375c:	1007883a 	mov	r3,r2
  813760:	2005883a 	mov	r2,r4
  813764:	10c00035 	stwio	r3,0(r2)
  813768:	e0bff717 	ldw	r2,-36(fp)
  81376c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813770:	e0bff417 	ldw	r2,-48(fp)
  813774:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  813778:	e0bffd17 	ldw	r2,-12(fp)
  81377c:	10800050 	cmplti	r2,r2,1
  813780:	1000111e 	bne	r2,zero,8137c8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  813784:	e0bffe17 	ldw	r2,-8(fp)
  813788:	1090000c 	andi	r2,r2,16384
  81378c:	1004c03a 	cmpne	r2,r2,zero
  813790:	1000101e 	bne	r2,zero,8137d4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  813794:	e0bffb17 	ldw	r2,-20(fp)
  813798:	10c00d17 	ldw	r3,52(r2)
  81379c:	e0bff917 	ldw	r2,-28(fp)
  8137a0:	1880051e 	bne	r3,r2,8137b8 <altera_avalon_jtag_uart_write+0x1c8>
  8137a4:	e0bffb17 	ldw	r2,-20(fp)
  8137a8:	10c00917 	ldw	r3,36(r2)
  8137ac:	e0bffb17 	ldw	r2,-20(fp)
  8137b0:	10800117 	ldw	r2,4(r2)
  8137b4:	18bff736 	bltu	r3,r2,813794 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  8137b8:	e0bffb17 	ldw	r2,-20(fp)
  8137bc:	10c00d17 	ldw	r3,52(r2)
  8137c0:	e0bff917 	ldw	r2,-28(fp)
  8137c4:	18800326 	beq	r3,r2,8137d4 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  8137c8:	e0bffd17 	ldw	r2,-12(fp)
  8137cc:	10800048 	cmpgei	r2,r2,1
  8137d0:	103fcd1e 	bne	r2,zero,813708 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8137d4:	e0fffc17 	ldw	r3,-16(fp)
  8137d8:	e0bff617 	ldw	r2,-40(fp)
  8137dc:	18800526 	beq	r3,r2,8137f4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  8137e0:	e0fffc17 	ldw	r3,-16(fp)
  8137e4:	e0bff617 	ldw	r2,-40(fp)
  8137e8:	1887c83a 	sub	r3,r3,r2
  8137ec:	e0ffff15 	stw	r3,-4(fp)
  8137f0:	00000906 	br	813818 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  8137f4:	e0bffe17 	ldw	r2,-8(fp)
  8137f8:	1090000c 	andi	r2,r2,16384
  8137fc:	1005003a 	cmpeq	r2,r2,zero
  813800:	1000031e 	bne	r2,zero,813810 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  813804:	00bffd44 	movi	r2,-11
  813808:	e0bfff15 	stw	r2,-4(fp)
  81380c:	00000206 	br	813818 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  813810:	00bffec4 	movi	r2,-5
  813814:	e0bfff15 	stw	r2,-4(fp)
  813818:	e0bfff17 	ldw	r2,-4(fp)
}
  81381c:	e037883a 	mov	sp,fp
  813820:	dfc00117 	ldw	ra,4(sp)
  813824:	df000017 	ldw	fp,0(sp)
  813828:	dec00204 	addi	sp,sp,8
  81382c:	f800283a 	ret

00813830 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  813830:	defff904 	addi	sp,sp,-28
  813834:	dfc00615 	stw	ra,24(sp)
  813838:	df000515 	stw	fp,20(sp)
  81383c:	df000504 	addi	fp,sp,20
  813840:	e13ffe15 	stw	r4,-8(fp)
  813844:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  813848:	e0bffe17 	ldw	r2,-8(fp)
  81384c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  813850:	e0bffe17 	ldw	r2,-8(fp)
  813854:	10800104 	addi	r2,r2,4
  813858:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81385c:	0005303a 	rdctl	r2,status
  813860:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813864:	e0fffc17 	ldw	r3,-16(fp)
  813868:	00bfff84 	movi	r2,-2
  81386c:	1884703a 	and	r2,r3,r2
  813870:	1001703a 	wrctl	status,r2
  
  return context;
  813874:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  813878:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
  81387c:	08126ec0 	call	8126ec <alt_tick>
  813880:	e0bffd17 	ldw	r2,-12(fp)
  813884:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813888:	e0bffb17 	ldw	r2,-20(fp)
  81388c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  813890:	e037883a 	mov	sp,fp
  813894:	dfc00117 	ldw	ra,4(sp)
  813898:	df000017 	ldw	fp,0(sp)
  81389c:	dec00204 	addi	sp,sp,8
  8138a0:	f800283a 	ret

008138a4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8138a4:	defff904 	addi	sp,sp,-28
  8138a8:	dfc00615 	stw	ra,24(sp)
  8138ac:	df000515 	stw	fp,20(sp)
  8138b0:	df000504 	addi	fp,sp,20
  8138b4:	e13ffc15 	stw	r4,-16(fp)
  8138b8:	e17ffd15 	stw	r5,-12(fp)
  8138bc:	e1bffe15 	stw	r6,-8(fp)
  8138c0:	e1ffff15 	stw	r7,-4(fp)
  8138c4:	e0bfff17 	ldw	r2,-4(fp)
  8138c8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8138cc:	008020b4 	movhi	r2,130
  8138d0:	1080fb04 	addi	r2,r2,1004
  8138d4:	10800017 	ldw	r2,0(r2)
  8138d8:	1004c03a 	cmpne	r2,r2,zero
  8138dc:	1000041e 	bne	r2,zero,8138f0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  8138e0:	00c020b4 	movhi	r3,130
  8138e4:	18c0fb04 	addi	r3,r3,1004
  8138e8:	e0bffb17 	ldw	r2,-20(fp)
  8138ec:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8138f0:	e0bffc17 	ldw	r2,-16(fp)
  8138f4:	10800104 	addi	r2,r2,4
  8138f8:	1007883a 	mov	r3,r2
  8138fc:	008001c4 	movi	r2,7
  813900:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  813904:	e13ffe17 	ldw	r4,-8(fp)
  813908:	e17ffc17 	ldw	r5,-16(fp)
  81390c:	01802074 	movhi	r6,129
  813910:	318e0c04 	addi	r6,r6,14384
  813914:	0811df00 	call	811df0 <alt_irq_register>
#endif  
}
  813918:	e037883a 	mov	sp,fp
  81391c:	dfc00117 	ldw	ra,4(sp)
  813920:	df000017 	ldw	fp,0(sp)
  813924:	dec00204 	addi	sp,sp,8
  813928:	f800283a 	ret

0081392c <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  81392c:	defffd04 	addi	sp,sp,-12
  813930:	df000215 	stw	fp,8(sp)
  813934:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
  813938:	008020b4 	movhi	r2,130
  81393c:	1080fd04 	addi	r2,r2,1012
  813940:	10800017 	ldw	r2,0(r2)
  813944:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
  813948:	008020b4 	movhi	r2,130
  81394c:	1080fe04 	addi	r2,r2,1016
  813950:	10800017 	ldw	r2,0(r2)
  813954:	1004c03a 	cmpne	r2,r2,zero
  813958:	1000031e 	bne	r2,zero,813968 <alt_timestamp_start+0x3c>
  {
    return -1;
  81395c:	00bfffc4 	movi	r2,-1
  813960:	e0bfff15 	stw	r2,-4(fp)
  813964:	00001506 	br	8139bc <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
  813968:	e0bffe17 	ldw	r2,-8(fp)
  81396c:	10800104 	addi	r2,r2,4
  813970:	1007883a 	mov	r3,r2
  813974:	00800204 	movi	r2,8
  813978:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
  81397c:	e0bffe17 	ldw	r2,-8(fp)
  813980:	10800204 	addi	r2,r2,8
  813984:	1007883a 	mov	r3,r2
  813988:	00bfffd4 	movui	r2,65535
  81398c:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
  813990:	e0bffe17 	ldw	r2,-8(fp)
  813994:	10800304 	addi	r2,r2,12
  813998:	1007883a 	mov	r3,r2
  81399c:	00bfffd4 	movui	r2,65535
  8139a0:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
  8139a4:	e0bffe17 	ldw	r2,-8(fp)
  8139a8:	10800104 	addi	r2,r2,4
  8139ac:	1007883a 	mov	r3,r2
  8139b0:	00800104 	movi	r2,4
  8139b4:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
  8139b8:	e03fff15 	stw	zero,-4(fp)
  8139bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8139c0:	e037883a 	mov	sp,fp
  8139c4:	df000017 	ldw	fp,0(sp)
  8139c8:	dec00104 	addi	sp,sp,4
  8139cc:	f800283a 	ret

008139d0 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
  8139d0:	defffb04 	addi	sp,sp,-20
  8139d4:	df000415 	stw	fp,16(sp)
  8139d8:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
  8139dc:	008020b4 	movhi	r2,130
  8139e0:	1080fd04 	addi	r2,r2,1012
  8139e4:	10800017 	ldw	r2,0(r2)
  8139e8:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
  8139ec:	008020b4 	movhi	r2,130
  8139f0:	1080fe04 	addi	r2,r2,1016
  8139f4:	10800017 	ldw	r2,0(r2)
  8139f8:	1004c03a 	cmpne	r2,r2,zero
  8139fc:	1000031e 	bne	r2,zero,813a0c <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
  813a00:	00bfffc4 	movi	r2,-1
  813a04:	e0bfff15 	stw	r2,-4(fp)
  813a08:	00001306 	br	813a58 <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
  813a0c:	e0bffe17 	ldw	r2,-8(fp)
  813a10:	10800404 	addi	r2,r2,16
  813a14:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
  813a18:	e0bffe17 	ldw	r2,-8(fp)
  813a1c:	10800404 	addi	r2,r2,16
  813a20:	10800037 	ldwio	r2,0(r2)
  813a24:	10bfffcc 	andi	r2,r2,65535
  813a28:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
  813a2c:	e0bffe17 	ldw	r2,-8(fp)
  813a30:	10800504 	addi	r2,r2,20
  813a34:	10800037 	ldwio	r2,0(r2)
  813a38:	10bfffcc 	andi	r2,r2,65535
  813a3c:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
  813a40:	e0bffc17 	ldw	r2,-16(fp)
  813a44:	1006943a 	slli	r3,r2,16
  813a48:	e0bffd17 	ldw	r2,-12(fp)
  813a4c:	1884b03a 	or	r2,r3,r2
  813a50:	0084303a 	nor	r2,zero,r2
  813a54:	e0bfff15 	stw	r2,-4(fp)
  813a58:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
  813a5c:	e037883a 	mov	sp,fp
  813a60:	df000017 	ldw	fp,0(sp)
  813a64:	dec00104 	addi	sp,sp,4
  813a68:	f800283a 	ret

00813a6c <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
  813a6c:	deffff04 	addi	sp,sp,-4
  813a70:	df000015 	stw	fp,0(sp)
  813a74:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
  813a78:	008020b4 	movhi	r2,130
  813a7c:	1080fe04 	addi	r2,r2,1016
  813a80:	10800017 	ldw	r2,0(r2)
}
  813a84:	e037883a 	mov	sp,fp
  813a88:	df000017 	ldw	fp,0(sp)
  813a8c:	dec00104 	addi	sp,sp,4
  813a90:	f800283a 	ret

00813a94 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
  813a94:	defffc04 	addi	sp,sp,-16
  813a98:	dfc00315 	stw	ra,12(sp)
  813a9c:	df000215 	stw	fp,8(sp)
  813aa0:	df000204 	addi	fp,sp,8
  813aa4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  813aa8:	e13fff17 	ldw	r4,-4(fp)
  813aac:	014020b4 	movhi	r5,130
  813ab0:	2979c904 	addi	r5,r5,-6364
  813ab4:	081b2480 	call	81b248 <alt_find_dev>
  813ab8:	e0bffe15 	stw	r2,-8(fp)
  return dev;
  813abc:	e0bffe17 	ldw	r2,-8(fp)
}
  813ac0:	e037883a 	mov	sp,fp
  813ac4:	dfc00117 	ldw	ra,4(sp)
  813ac8:	df000017 	ldw	fp,0(sp)
  813acc:	dec00204 	addi	sp,sp,8
  813ad0:	f800283a 	ret

00813ad4 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
  813ad4:	defffd04 	addi	sp,sp,-12
  813ad8:	df000215 	stw	fp,8(sp)
  813adc:	df000204 	addi	fp,sp,8
  813ae0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  813ae4:	e0bfff17 	ldw	r2,-4(fp)
  813ae8:	10800a17 	ldw	r2,40(r2)
  813aec:	10800037 	ldwio	r2,0(r2)
  813af0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
  813af4:	e0bffe17 	ldw	r2,-8(fp)
  813af8:	10800054 	ori	r2,r2,1
  813afc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  813b00:	e0bfff17 	ldw	r2,-4(fp)
  813b04:	10800a17 	ldw	r2,40(r2)
  813b08:	e0fffe17 	ldw	r3,-8(fp)
  813b0c:	10c00035 	stwio	r3,0(r2)
}
  813b10:	e037883a 	mov	sp,fp
  813b14:	df000017 	ldw	fp,0(sp)
  813b18:	dec00104 	addi	sp,sp,4
  813b1c:	f800283a 	ret

00813b20 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
  813b20:	defffd04 	addi	sp,sp,-12
  813b24:	df000215 	stw	fp,8(sp)
  813b28:	df000204 	addi	fp,sp,8
  813b2c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  813b30:	e0bfff17 	ldw	r2,-4(fp)
  813b34:	10800a17 	ldw	r2,40(r2)
  813b38:	10800037 	ldwio	r2,0(r2)
  813b3c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
  813b40:	e0fffe17 	ldw	r3,-8(fp)
  813b44:	00bfff84 	movi	r2,-2
  813b48:	1884703a 	and	r2,r3,r2
  813b4c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  813b50:	e0bfff17 	ldw	r2,-4(fp)
  813b54:	10800a17 	ldw	r2,40(r2)
  813b58:	e0fffe17 	ldw	r3,-8(fp)
  813b5c:	10c00035 	stwio	r3,0(r2)
}
  813b60:	e037883a 	mov	sp,fp
  813b64:	df000017 	ldw	fp,0(sp)
  813b68:	dec00104 	addi	sp,sp,4
  813b6c:	f800283a 	ret

00813b70 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
  813b70:	defffd04 	addi	sp,sp,-12
  813b74:	df000215 	stw	fp,8(sp)
  813b78:	df000204 	addi	fp,sp,8
  813b7c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  813b80:	e0bfff17 	ldw	r2,-4(fp)
  813b84:	10800a17 	ldw	r2,40(r2)
  813b88:	10800037 	ldwio	r2,0(r2)
  813b8c:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
  813b90:	e0bffe17 	ldw	r2,-8(fp)
  813b94:	10800094 	ori	r2,r2,2
  813b98:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  813b9c:	e0bfff17 	ldw	r2,-4(fp)
  813ba0:	10800a17 	ldw	r2,40(r2)
  813ba4:	e0fffe17 	ldw	r3,-8(fp)
  813ba8:	10c00035 	stwio	r3,0(r2)
}
  813bac:	e037883a 	mov	sp,fp
  813bb0:	df000017 	ldw	fp,0(sp)
  813bb4:	dec00104 	addi	sp,sp,4
  813bb8:	f800283a 	ret

00813bbc <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
  813bbc:	defffd04 	addi	sp,sp,-12
  813bc0:	df000215 	stw	fp,8(sp)
  813bc4:	df000204 	addi	fp,sp,8
  813bc8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  813bcc:	e0bfff17 	ldw	r2,-4(fp)
  813bd0:	10800a17 	ldw	r2,40(r2)
  813bd4:	10800037 	ldwio	r2,0(r2)
  813bd8:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
  813bdc:	e0fffe17 	ldw	r3,-8(fp)
  813be0:	00bfff44 	movi	r2,-3
  813be4:	1884703a 	and	r2,r3,r2
  813be8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  813bec:	e0bfff17 	ldw	r2,-4(fp)
  813bf0:	10800a17 	ldw	r2,40(r2)
  813bf4:	e0fffe17 	ldw	r3,-8(fp)
  813bf8:	10c00035 	stwio	r3,0(r2)
}
  813bfc:	e037883a 	mov	sp,fp
  813c00:	df000017 	ldw	fp,0(sp)
  813c04:	dec00104 	addi	sp,sp,4
  813c08:	f800283a 	ret

00813c0c <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
  813c0c:	defffd04 	addi	sp,sp,-12
  813c10:	df000215 	stw	fp,8(sp)
  813c14:	df000204 	addi	fp,sp,8
  813c18:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  813c1c:	e0bfff17 	ldw	r2,-4(fp)
  813c20:	10800a17 	ldw	r2,40(r2)
  813c24:	10800037 	ldwio	r2,0(r2)
  813c28:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
  813c2c:	e0bffe17 	ldw	r2,-8(fp)
  813c30:	1080400c 	andi	r2,r2,256
  813c34:	1004c03a 	cmpne	r2,r2,zero
}
  813c38:	e037883a 	mov	sp,fp
  813c3c:	df000017 	ldw	fp,0(sp)
  813c40:	dec00104 	addi	sp,sp,4
  813c44:	f800283a 	ret

00813c48 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
  813c48:	defffd04 	addi	sp,sp,-12
  813c4c:	df000215 	stw	fp,8(sp)
  813c50:	df000204 	addi	fp,sp,8
  813c54:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  813c58:	e0bfff17 	ldw	r2,-4(fp)
  813c5c:	10800a17 	ldw	r2,40(r2)
  813c60:	10800037 	ldwio	r2,0(r2)
  813c64:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
  813c68:	e0bffe17 	ldw	r2,-8(fp)
  813c6c:	1080800c 	andi	r2,r2,512
  813c70:	1004c03a 	cmpne	r2,r2,zero
}
  813c74:	e037883a 	mov	sp,fp
  813c78:	df000017 	ldw	fp,0(sp)
  813c7c:	dec00104 	addi	sp,sp,4
  813c80:	f800283a 	ret

00813c84 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
  813c84:	defffd04 	addi	sp,sp,-12
  813c88:	df000215 	stw	fp,8(sp)
  813c8c:	df000204 	addi	fp,sp,8
  813c90:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  813c94:	e0bfff17 	ldw	r2,-4(fp)
  813c98:	10800a17 	ldw	r2,40(r2)
  813c9c:	10800037 	ldwio	r2,0(r2)
  813ca0:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
  813ca4:	e0bffe17 	ldw	r2,-8(fp)
  813ca8:	10800114 	ori	r2,r2,4
  813cac:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  813cb0:	e0bffe17 	ldw	r2,-8(fp)
  813cb4:	10800214 	ori	r2,r2,8
  813cb8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  813cbc:	e0bfff17 	ldw	r2,-4(fp)
  813cc0:	10800a17 	ldw	r2,40(r2)
  813cc4:	e0fffe17 	ldw	r3,-8(fp)
  813cc8:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
  813ccc:	e0fffe17 	ldw	r3,-8(fp)
  813cd0:	00bffec4 	movi	r2,-5
  813cd4:	1884703a 	and	r2,r3,r2
  813cd8:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
  813cdc:	e0fffe17 	ldw	r3,-8(fp)
  813ce0:	00bffdc4 	movi	r2,-9
  813ce4:	1884703a 	and	r2,r3,r2
  813ce8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  813cec:	e0bfff17 	ldw	r2,-4(fp)
  813cf0:	10800a17 	ldw	r2,40(r2)
  813cf4:	e0fffe17 	ldw	r3,-8(fp)
  813cf8:	10c00035 	stwio	r3,0(r2)
}
  813cfc:	e037883a 	mov	sp,fp
  813d00:	df000017 	ldw	fp,0(sp)
  813d04:	dec00104 	addi	sp,sp,4
  813d08:	f800283a 	ret

00813d0c <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
  813d0c:	defffb04 	addi	sp,sp,-20
  813d10:	df000415 	stw	fp,16(sp)
  813d14:	df000404 	addi	fp,sp,16
  813d18:	e13ffd15 	stw	r4,-12(fp)
  813d1c:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  813d20:	e0bffd17 	ldw	r2,-12(fp)
  813d24:	10800a17 	ldw	r2,40(r2)
  813d28:	10800104 	addi	r2,r2,4
  813d2c:	10800037 	ldwio	r2,0(r2)
  813d30:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  813d34:	e0bffe17 	ldw	r2,-8(fp)
  813d38:	1004c03a 	cmpne	r2,r2,zero
  813d3c:	1000051e 	bne	r2,zero,813d54 <alt_up_audio_read_fifo_avail+0x48>
  813d40:	e0bffc17 	ldw	r2,-16(fp)
  813d44:	10bfc00c 	andi	r2,r2,65280
  813d48:	1004d23a 	srli	r2,r2,8
  813d4c:	e0bfff15 	stw	r2,-4(fp)
  813d50:	00000306 	br	813d60 <alt_up_audio_read_fifo_avail+0x54>
  813d54:	e0bffc17 	ldw	r2,-16(fp)
  813d58:	10803fcc 	andi	r2,r2,255
  813d5c:	e0bfff15 	stw	r2,-4(fp)
  813d60:	e0bfff17 	ldw	r2,-4(fp)
  813d64:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
  813d68:	e0bffc17 	ldw	r2,-16(fp)
}
  813d6c:	e037883a 	mov	sp,fp
  813d70:	df000017 	ldw	fp,0(sp)
  813d74:	dec00104 	addi	sp,sp,4
  813d78:	f800283a 	ret

00813d7c <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  813d7c:	defff904 	addi	sp,sp,-28
  813d80:	dfc00615 	stw	ra,24(sp)
  813d84:	df000515 	stw	fp,20(sp)
  813d88:	df000504 	addi	fp,sp,20
  813d8c:	e13ffc15 	stw	r4,-16(fp)
  813d90:	e17ffd15 	stw	r5,-12(fp)
  813d94:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
  813d98:	e13ffc17 	ldw	r4,-16(fp)
  813d9c:	01400044 	movi	r5,1
  813da0:	0813d0c0 	call	813d0c <alt_up_audio_read_fifo_avail>
  813da4:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  813da8:	e0bffb17 	ldw	r2,-20(fp)
  813dac:	10801868 	cmpgeui	r2,r2,97
  813db0:	1000021e 	bne	r2,zero,813dbc <alt_up_audio_record_r+0x40>
		return 0;
  813db4:	e03fff15 	stw	zero,-4(fp)
  813db8:	00000606 	br	813dd4 <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  813dbc:	e13ffc17 	ldw	r4,-16(fp)
  813dc0:	e17ffd17 	ldw	r5,-12(fp)
  813dc4:	e1bffe17 	ldw	r6,-8(fp)
  813dc8:	01c00044 	movi	r7,1
  813dcc:	0813fb00 	call	813fb0 <alt_up_audio_read_fifo>
  813dd0:	e0bfff15 	stw	r2,-4(fp)
  813dd4:	e0bfff17 	ldw	r2,-4(fp)
}
  813dd8:	e037883a 	mov	sp,fp
  813ddc:	dfc00117 	ldw	ra,4(sp)
  813de0:	df000017 	ldw	fp,0(sp)
  813de4:	dec00204 	addi	sp,sp,8
  813de8:	f800283a 	ret

00813dec <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  813dec:	defff904 	addi	sp,sp,-28
  813df0:	dfc00615 	stw	ra,24(sp)
  813df4:	df000515 	stw	fp,20(sp)
  813df8:	df000504 	addi	fp,sp,20
  813dfc:	e13ffc15 	stw	r4,-16(fp)
  813e00:	e17ffd15 	stw	r5,-12(fp)
  813e04:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
  813e08:	e13ffc17 	ldw	r4,-16(fp)
  813e0c:	000b883a 	mov	r5,zero
  813e10:	0813d0c0 	call	813d0c <alt_up_audio_read_fifo_avail>
  813e14:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  813e18:	e0bffb17 	ldw	r2,-20(fp)
  813e1c:	10801868 	cmpgeui	r2,r2,97
  813e20:	1000021e 	bne	r2,zero,813e2c <alt_up_audio_record_l+0x40>
		return 0;
  813e24:	e03fff15 	stw	zero,-4(fp)
  813e28:	00000606 	br	813e44 <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  813e2c:	e13ffc17 	ldw	r4,-16(fp)
  813e30:	e17ffd17 	ldw	r5,-12(fp)
  813e34:	e1bffe17 	ldw	r6,-8(fp)
  813e38:	000f883a 	mov	r7,zero
  813e3c:	0813fb00 	call	813fb0 <alt_up_audio_read_fifo>
  813e40:	e0bfff15 	stw	r2,-4(fp)
  813e44:	e0bfff17 	ldw	r2,-4(fp)
}
  813e48:	e037883a 	mov	sp,fp
  813e4c:	dfc00117 	ldw	ra,4(sp)
  813e50:	df000017 	ldw	fp,0(sp)
  813e54:	dec00204 	addi	sp,sp,8
  813e58:	f800283a 	ret

00813e5c <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
  813e5c:	defffb04 	addi	sp,sp,-20
  813e60:	df000415 	stw	fp,16(sp)
  813e64:	df000404 	addi	fp,sp,16
  813e68:	e13ffd15 	stw	r4,-12(fp)
  813e6c:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  813e70:	e0bffd17 	ldw	r2,-12(fp)
  813e74:	10800a17 	ldw	r2,40(r2)
  813e78:	10800104 	addi	r2,r2,4
  813e7c:	10800037 	ldwio	r2,0(r2)
  813e80:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  813e84:	e0bffe17 	ldw	r2,-8(fp)
  813e88:	1004c03a 	cmpne	r2,r2,zero
  813e8c:	1000051e 	bne	r2,zero,813ea4 <alt_up_audio_write_fifo_space+0x48>
  813e90:	e0bffc17 	ldw	r2,-16(fp)
  813e94:	10bfc02c 	andhi	r2,r2,65280
  813e98:	1004d63a 	srli	r2,r2,24
  813e9c:	e0bfff15 	stw	r2,-4(fp)
  813ea0:	00000406 	br	813eb4 <alt_up_audio_write_fifo_space+0x58>
  813ea4:	e0bffc17 	ldw	r2,-16(fp)
  813ea8:	10803fec 	andhi	r2,r2,255
  813eac:	1004d43a 	srli	r2,r2,16
  813eb0:	e0bfff15 	stw	r2,-4(fp)
  813eb4:	e0bfff17 	ldw	r2,-4(fp)
  813eb8:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
  813ebc:	e0bffc17 	ldw	r2,-16(fp)
}
  813ec0:	e037883a 	mov	sp,fp
  813ec4:	df000017 	ldw	fp,0(sp)
  813ec8:	dec00104 	addi	sp,sp,4
  813ecc:	f800283a 	ret

00813ed0 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  813ed0:	defff904 	addi	sp,sp,-28
  813ed4:	dfc00615 	stw	ra,24(sp)
  813ed8:	df000515 	stw	fp,20(sp)
  813edc:	df000504 	addi	fp,sp,20
  813ee0:	e13ffc15 	stw	r4,-16(fp)
  813ee4:	e17ffd15 	stw	r5,-12(fp)
  813ee8:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
  813eec:	e13ffc17 	ldw	r4,-16(fp)
  813ef0:	01400044 	movi	r5,1
  813ef4:	0813e5c0 	call	813e5c <alt_up_audio_write_fifo_space>
  813ef8:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  813efc:	e0bffb17 	ldw	r2,-20(fp)
  813f00:	10801868 	cmpgeui	r2,r2,97
  813f04:	1000021e 	bne	r2,zero,813f10 <alt_up_audio_play_r+0x40>
		return 0;
  813f08:	e03fff15 	stw	zero,-4(fp)
  813f0c:	00000606 	br	813f28 <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  813f10:	e13ffc17 	ldw	r4,-16(fp)
  813f14:	e17ffd17 	ldw	r5,-12(fp)
  813f18:	e1bffe17 	ldw	r6,-8(fp)
  813f1c:	01c00044 	movi	r7,1
  813f20:	08140b40 	call	8140b4 <alt_up_audio_write_fifo>
  813f24:	e0bfff15 	stw	r2,-4(fp)
  813f28:	e0bfff17 	ldw	r2,-4(fp)
}
  813f2c:	e037883a 	mov	sp,fp
  813f30:	dfc00117 	ldw	ra,4(sp)
  813f34:	df000017 	ldw	fp,0(sp)
  813f38:	dec00204 	addi	sp,sp,8
  813f3c:	f800283a 	ret

00813f40 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  813f40:	defff904 	addi	sp,sp,-28
  813f44:	dfc00615 	stw	ra,24(sp)
  813f48:	df000515 	stw	fp,20(sp)
  813f4c:	df000504 	addi	fp,sp,20
  813f50:	e13ffc15 	stw	r4,-16(fp)
  813f54:	e17ffd15 	stw	r5,-12(fp)
  813f58:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
  813f5c:	e13ffc17 	ldw	r4,-16(fp)
  813f60:	000b883a 	mov	r5,zero
  813f64:	0813e5c0 	call	813e5c <alt_up_audio_write_fifo_space>
  813f68:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  813f6c:	e0bffb17 	ldw	r2,-20(fp)
  813f70:	10801868 	cmpgeui	r2,r2,97
  813f74:	1000021e 	bne	r2,zero,813f80 <alt_up_audio_play_l+0x40>
		return 0;
  813f78:	e03fff15 	stw	zero,-4(fp)
  813f7c:	00000606 	br	813f98 <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  813f80:	e13ffc17 	ldw	r4,-16(fp)
  813f84:	e17ffd17 	ldw	r5,-12(fp)
  813f88:	e1bffe17 	ldw	r6,-8(fp)
  813f8c:	000f883a 	mov	r7,zero
  813f90:	08140b40 	call	8140b4 <alt_up_audio_write_fifo>
  813f94:	e0bfff15 	stw	r2,-4(fp)
  813f98:	e0bfff17 	ldw	r2,-4(fp)
}
  813f9c:	e037883a 	mov	sp,fp
  813fa0:	dfc00117 	ldw	ra,4(sp)
  813fa4:	df000017 	ldw	fp,0(sp)
  813fa8:	dec00204 	addi	sp,sp,8
  813fac:	f800283a 	ret

00813fb0 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  813fb0:	defff604 	addi	sp,sp,-40
  813fb4:	df000915 	stw	fp,36(sp)
  813fb8:	df000904 	addi	fp,sp,36
  813fbc:	e13ff915 	stw	r4,-28(fp)
  813fc0:	e17ffa15 	stw	r5,-24(fp)
  813fc4:	e1bffb15 	stw	r6,-20(fp)
  813fc8:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
  813fcc:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
  813fd0:	00003006 	br	814094 <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  813fd4:	e0bff917 	ldw	r2,-28(fp)
  813fd8:	10800a17 	ldw	r2,40(r2)
  813fdc:	10800104 	addi	r2,r2,4
  813fe0:	10800037 	ldwio	r2,0(r2)
  813fe4:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  813fe8:	e0bffc17 	ldw	r2,-16(fp)
  813fec:	1004c03a 	cmpne	r2,r2,zero
  813ff0:	1000051e 	bne	r2,zero,814008 <alt_up_audio_read_fifo+0x58>
  813ff4:	e0bff817 	ldw	r2,-32(fp)
  813ff8:	10bfc00c 	andi	r2,r2,65280
  813ffc:	1004d23a 	srli	r2,r2,8
  814000:	e0bfff15 	stw	r2,-4(fp)
  814004:	00000306 	br	814014 <alt_up_audio_read_fifo+0x64>
  814008:	e0bff817 	ldw	r2,-32(fp)
  81400c:	10803fcc 	andi	r2,r2,255
  814010:	e0bfff15 	stw	r2,-4(fp)
  814014:	e0bfff17 	ldw	r2,-4(fp)
  814018:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  81401c:	e0bff817 	ldw	r2,-32(fp)
  814020:	1005003a 	cmpeq	r2,r2,zero
  814024:	10001e1e 	bne	r2,zero,8140a0 <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  814028:	e0bff717 	ldw	r2,-36(fp)
  81402c:	1085883a 	add	r2,r2,r2
  814030:	1085883a 	add	r2,r2,r2
  814034:	1007883a 	mov	r3,r2
  814038:	e0bffa17 	ldw	r2,-24(fp)
  81403c:	1887883a 	add	r3,r3,r2
  814040:	e0fffe15 	stw	r3,-8(fp)
  814044:	e0bffc17 	ldw	r2,-16(fp)
  814048:	1004c03a 	cmpne	r2,r2,zero
  81404c:	1000061e 	bne	r2,zero,814068 <alt_up_audio_read_fifo+0xb8>
  814050:	e0bff917 	ldw	r2,-28(fp)
  814054:	10800a17 	ldw	r2,40(r2)
  814058:	10800204 	addi	r2,r2,8
  81405c:	10800037 	ldwio	r2,0(r2)
  814060:	e0bffd15 	stw	r2,-12(fp)
  814064:	00000506 	br	81407c <alt_up_audio_read_fifo+0xcc>
  814068:	e0bff917 	ldw	r2,-28(fp)
  81406c:	10800a17 	ldw	r2,40(r2)
  814070:	10800304 	addi	r2,r2,12
  814074:	10800037 	ldwio	r2,0(r2)
  814078:	e0bffd15 	stw	r2,-12(fp)
  81407c:	e0fffd17 	ldw	r3,-12(fp)
  814080:	e0bffe17 	ldw	r2,-8(fp)
  814084:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  814088:	e0bff717 	ldw	r2,-36(fp)
  81408c:	10800044 	addi	r2,r2,1
  814090:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  814094:	e0fff717 	ldw	r3,-36(fp)
  814098:	e0bffb17 	ldw	r2,-20(fp)
  81409c:	18bfcd16 	blt	r3,r2,813fd4 <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
  8140a0:	e0bff717 	ldw	r2,-36(fp)
}
  8140a4:	e037883a 	mov	sp,fp
  8140a8:	df000017 	ldw	fp,0(sp)
  8140ac:	dec00104 	addi	sp,sp,4
  8140b0:	f800283a 	ret

008140b4 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  8140b4:	defff804 	addi	sp,sp,-32
  8140b8:	df000715 	stw	fp,28(sp)
  8140bc:	df000704 	addi	fp,sp,28
  8140c0:	e13ffb15 	stw	r4,-20(fp)
  8140c4:	e17ffc15 	stw	r5,-16(fp)
  8140c8:	e1bffd15 	stw	r6,-12(fp)
  8140cc:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
  8140d0:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
  8140d4:	00003a06 	br	8141c0 <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  8140d8:	e0bffb17 	ldw	r2,-20(fp)
  8140dc:	10800a17 	ldw	r2,40(r2)
  8140e0:	10800104 	addi	r2,r2,4
  8140e4:	10800037 	ldwio	r2,0(r2)
  8140e8:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  8140ec:	e0bffe17 	ldw	r2,-8(fp)
  8140f0:	1004c03a 	cmpne	r2,r2,zero
  8140f4:	1000051e 	bne	r2,zero,81410c <alt_up_audio_write_fifo+0x58>
  8140f8:	e0bffa17 	ldw	r2,-24(fp)
  8140fc:	10bfc02c 	andhi	r2,r2,65280
  814100:	1004d63a 	srli	r2,r2,24
  814104:	e0bfff15 	stw	r2,-4(fp)
  814108:	00000406 	br	81411c <alt_up_audio_write_fifo+0x68>
  81410c:	e0bffa17 	ldw	r2,-24(fp)
  814110:	10803fec 	andhi	r2,r2,255
  814114:	1004d43a 	srli	r2,r2,16
  814118:	e0bfff15 	stw	r2,-4(fp)
  81411c:	e0bfff17 	ldw	r2,-4(fp)
  814120:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  814124:	e0bffa17 	ldw	r2,-24(fp)
  814128:	1005003a 	cmpeq	r2,r2,zero
  81412c:	1000271e 	bne	r2,zero,8141cc <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
  814130:	e0bffe17 	ldw	r2,-8(fp)
  814134:	1004c03a 	cmpne	r2,r2,zero
  814138:	1000111e 	bne	r2,zero,814180 <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  81413c:	e0bffb17 	ldw	r2,-20(fp)
  814140:	10800a17 	ldw	r2,40(r2)
  814144:	11000204 	addi	r4,r2,8
  814148:	e0bff917 	ldw	r2,-28(fp)
  81414c:	1085883a 	add	r2,r2,r2
  814150:	1085883a 	add	r2,r2,r2
  814154:	1007883a 	mov	r3,r2
  814158:	e0bffc17 	ldw	r2,-16(fp)
  81415c:	1885883a 	add	r2,r3,r2
  814160:	10800017 	ldw	r2,0(r2)
  814164:	1007883a 	mov	r3,r2
  814168:	e0bff917 	ldw	r2,-28(fp)
  81416c:	10800044 	addi	r2,r2,1
  814170:	e0bff915 	stw	r2,-28(fp)
  814174:	2005883a 	mov	r2,r4
  814178:	10c00035 	stwio	r3,0(r2)
  81417c:	00001006 	br	8141c0 <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  814180:	e0bffb17 	ldw	r2,-20(fp)
  814184:	10800a17 	ldw	r2,40(r2)
  814188:	11000304 	addi	r4,r2,12
  81418c:	e0bff917 	ldw	r2,-28(fp)
  814190:	1085883a 	add	r2,r2,r2
  814194:	1085883a 	add	r2,r2,r2
  814198:	1007883a 	mov	r3,r2
  81419c:	e0bffc17 	ldw	r2,-16(fp)
  8141a0:	1885883a 	add	r2,r3,r2
  8141a4:	10800017 	ldw	r2,0(r2)
  8141a8:	1007883a 	mov	r3,r2
  8141ac:	e0bff917 	ldw	r2,-28(fp)
  8141b0:	10800044 	addi	r2,r2,1
  8141b4:	e0bff915 	stw	r2,-28(fp)
  8141b8:	2005883a 	mov	r2,r4
  8141bc:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  8141c0:	e0fff917 	ldw	r3,-28(fp)
  8141c4:	e0bffd17 	ldw	r2,-12(fp)
  8141c8:	18bfc316 	blt	r3,r2,8140d8 <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
  8141cc:	e0bff917 	ldw	r2,-28(fp)
}
  8141d0:	e037883a 	mov	sp,fp
  8141d4:	df000017 	ldw	fp,0(sp)
  8141d8:	dec00104 	addi	sp,sp,4
  8141dc:	f800283a 	ret

008141e0 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
  8141e0:	defffc04 	addi	sp,sp,-16
  8141e4:	df000315 	stw	fp,12(sp)
  8141e8:	df000304 	addi	fp,sp,12
  8141ec:	e13ffd15 	stw	r4,-12(fp)
  8141f0:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  8141f4:	e0bffe17 	ldw	r2,-8(fp)
  8141f8:	1004c03a 	cmpne	r2,r2,zero
  8141fc:	1000061e 	bne	r2,zero,814218 <alt_up_audio_read_fifo_head+0x38>
  814200:	e0bffd17 	ldw	r2,-12(fp)
  814204:	10800a17 	ldw	r2,40(r2)
  814208:	10800204 	addi	r2,r2,8
  81420c:	10800037 	ldwio	r2,0(r2)
  814210:	e0bfff15 	stw	r2,-4(fp)
  814214:	00000506 	br	81422c <alt_up_audio_read_fifo_head+0x4c>
  814218:	e0bffd17 	ldw	r2,-12(fp)
  81421c:	10800a17 	ldw	r2,40(r2)
  814220:	10800304 	addi	r2,r2,12
  814224:	10800037 	ldwio	r2,0(r2)
  814228:	e0bfff15 	stw	r2,-4(fp)
  81422c:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
  814230:	e037883a 	mov	sp,fp
  814234:	df000017 	ldw	fp,0(sp)
  814238:	dec00104 	addi	sp,sp,4
  81423c:	f800283a 	ret

00814240 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
  814240:	defffc04 	addi	sp,sp,-16
  814244:	df000315 	stw	fp,12(sp)
  814248:	df000304 	addi	fp,sp,12
  81424c:	e13ffd15 	stw	r4,-12(fp)
  814250:	e17ffe15 	stw	r5,-8(fp)
  814254:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
  814258:	e0bfff17 	ldw	r2,-4(fp)
  81425c:	1004c03a 	cmpne	r2,r2,zero
  814260:	1000061e 	bne	r2,zero,81427c <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  814264:	e0bffd17 	ldw	r2,-12(fp)
  814268:	10800a17 	ldw	r2,40(r2)
  81426c:	10800204 	addi	r2,r2,8
  814270:	e0fffe17 	ldw	r3,-8(fp)
  814274:	10c00035 	stwio	r3,0(r2)
  814278:	00000506 	br	814290 <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  81427c:	e0bffd17 	ldw	r2,-12(fp)
  814280:	10800a17 	ldw	r2,40(r2)
  814284:	10800304 	addi	r2,r2,12
  814288:	e0fffe17 	ldw	r3,-8(fp)
  81428c:	10c00035 	stwio	r3,0(r2)
}
  814290:	e037883a 	mov	sp,fp
  814294:	df000017 	ldw	fp,0(sp)
  814298:	dec00104 	addi	sp,sp,4
  81429c:	f800283a 	ret

008142a0 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
  8142a0:	defffc04 	addi	sp,sp,-16
  8142a4:	dfc00315 	stw	ra,12(sp)
  8142a8:	df000215 	stw	fp,8(sp)
  8142ac:	df000204 	addi	fp,sp,8
  8142b0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
  8142b4:	e13fff17 	ldw	r4,-4(fp)
  8142b8:	014020b4 	movhi	r5,130
  8142bc:	2979c904 	addi	r5,r5,-6364
  8142c0:	081b2480 	call	81b248 <alt_find_dev>
  8142c4:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
  8142c8:	e0bffe17 	ldw	r2,-8(fp)
  8142cc:	10800a17 	ldw	r2,40(r2)
  8142d0:	10800104 	addi	r2,r2,4
  8142d4:	10800037 	ldwio	r2,0(r2)
  8142d8:	10803fec 	andhi	r2,r2,255
  8142dc:	1005d43a 	srai	r2,r2,16
  8142e0:	1007883a 	mov	r3,r2
  8142e4:	e0bffe17 	ldw	r2,-8(fp)
  8142e8:	10c00b15 	stw	r3,44(r2)

  return dev;
  8142ec:	e0bffe17 	ldw	r2,-8(fp)
}
  8142f0:	e037883a 	mov	sp,fp
  8142f4:	dfc00117 	ldw	ra,4(sp)
  8142f8:	df000017 	ldw	fp,0(sp)
  8142fc:	dec00204 	addi	sp,sp,8
  814300:	f800283a 	ret

00814304 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  814304:	defffc04 	addi	sp,sp,-16
  814308:	df000315 	stw	fp,12(sp)
  81430c:	df000304 	addi	fp,sp,12
  814310:	e13ffd15 	stw	r4,-12(fp)
  814314:	e17ffe15 	stw	r5,-8(fp)
  814318:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  81431c:	e0bffd17 	ldw	r2,-12(fp)
  814320:	10800a17 	ldw	r2,40(r2)
  814324:	11000204 	addi	r4,r2,8
  814328:	e0bffe17 	ldw	r2,-8(fp)
  81432c:	10c03fcc 	andi	r3,r2,255
  814330:	2005883a 	mov	r2,r4
  814334:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
  814338:	e0bffd17 	ldw	r2,-12(fp)
  81433c:	10800a17 	ldw	r2,40(r2)
  814340:	11000304 	addi	r4,r2,12
  814344:	e0bfff17 	ldw	r2,-4(fp)
  814348:	10ffffcc 	andi	r3,r2,65535
  81434c:	2005883a 	mov	r2,r4
  814350:	10c00035 	stwio	r3,0(r2)

	return 0;
  814354:	0005883a 	mov	r2,zero
}
  814358:	e037883a 	mov	sp,fp
  81435c:	df000017 	ldw	fp,0(sp)
  814360:	dec00104 	addi	sp,sp,4
  814364:	f800283a 	ret

00814368 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
  814368:	defffa04 	addi	sp,sp,-24
  81436c:	dfc00515 	stw	ra,20(sp)
  814370:	df000415 	stw	fp,16(sp)
  814374:	df000404 	addi	fp,sp,16
  814378:	e13ffc15 	stw	r4,-16(fp)
  81437c:	e17ffd15 	stw	r5,-12(fp)
  814380:	e1bffe15 	stw	r6,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  814384:	e0bffc17 	ldw	r2,-16(fp)
  814388:	10800a17 	ldw	r2,40(r2)
  81438c:	11000204 	addi	r4,r2,8
  814390:	e0bffd17 	ldw	r2,-12(fp)
  814394:	10c03fcc 	andi	r3,r2,255
  814398:	2005883a 	mov	r2,r4
  81439c:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
  8143a0:	e0bffc17 	ldw	r2,-16(fp)
  8143a4:	10800a17 	ldw	r2,40(r2)
  8143a8:	10800304 	addi	r2,r2,12
  8143ac:	10800037 	ldwio	r2,0(r2)
  8143b0:	1007883a 	mov	r3,r2
  8143b4:	e0bffe17 	ldw	r2,-8(fp)
  8143b8:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
  8143bc:	e13ffc17 	ldw	r4,-16(fp)
  8143c0:	08144940 	call	814494 <alt_up_av_config_read_acknowledge>
  8143c4:	1005003a 	cmpeq	r2,r2,zero
  8143c8:	1000031e 	bne	r2,zero,8143d8 <alt_up_av_config_read_data+0x70>
		return -1;
  8143cc:	00bfffc4 	movi	r2,-1
  8143d0:	e0bfff15 	stw	r2,-4(fp)
  8143d4:	00000106 	br	8143dc <alt_up_av_config_read_data+0x74>

	return 0;
  8143d8:	e03fff15 	stw	zero,-4(fp)
  8143dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8143e0:	e037883a 	mov	sp,fp
  8143e4:	dfc00117 	ldw	ra,4(sp)
  8143e8:	df000017 	ldw	fp,0(sp)
  8143ec:	dec00204 	addi	sp,sp,8
  8143f0:	f800283a 	ret

008143f4 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
  8143f4:	defffe04 	addi	sp,sp,-8
  8143f8:	df000115 	stw	fp,4(sp)
  8143fc:	df000104 	addi	fp,sp,4
  814400:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
  814404:	e0bfff17 	ldw	r2,-4(fp)
  814408:	10800a17 	ldw	r2,40(r2)
  81440c:	1007883a 	mov	r3,r2
  814410:	00800044 	movi	r2,1
  814414:	18800025 	stbio	r2,0(r3)
	return 0;
  814418:	0005883a 	mov	r2,zero
}
  81441c:	e037883a 	mov	sp,fp
  814420:	df000017 	ldw	fp,0(sp)
  814424:	dec00104 	addi	sp,sp,4
  814428:	f800283a 	ret

0081442c <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
  81442c:	defffe04 	addi	sp,sp,-8
  814430:	df000115 	stw	fp,4(sp)
  814434:	df000104 	addi	fp,sp,4
  814438:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
  81443c:	e0bfff17 	ldw	r2,-4(fp)
  814440:	10800a17 	ldw	r2,40(r2)
  814444:	1007883a 	mov	r3,r2
  814448:	00800084 	movi	r2,2
  81444c:	18800025 	stbio	r2,0(r3)
	return 0;
  814450:	0005883a 	mov	r2,zero
}
  814454:	e037883a 	mov	sp,fp
  814458:	df000017 	ldw	fp,0(sp)
  81445c:	dec00104 	addi	sp,sp,4
  814460:	f800283a 	ret

00814464 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
  814464:	defffe04 	addi	sp,sp,-8
  814468:	df000115 	stw	fp,4(sp)
  81446c:	df000104 	addi	fp,sp,4
  814470:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
  814474:	e0bfff17 	ldw	r2,-4(fp)
  814478:	10800a17 	ldw	r2,40(r2)
  81447c:	10000025 	stbio	zero,0(r2)
	return 0;
  814480:	0005883a 	mov	r2,zero
}
  814484:	e037883a 	mov	sp,fp
  814488:	df000017 	ldw	fp,0(sp)
  81448c:	dec00104 	addi	sp,sp,4
  814490:	f800283a 	ret

00814494 <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
  814494:	defffd04 	addi	sp,sp,-12
  814498:	df000215 	stw	fp,8(sp)
  81449c:	df000204 	addi	fp,sp,8
  8144a0:	e13ffe15 	stw	r4,-8(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
  8144a4:	e0bffe17 	ldw	r2,-8(fp)
  8144a8:	10800a17 	ldw	r2,40(r2)
  8144ac:	10800104 	addi	r2,r2,4
  8144b0:	10800037 	ldwio	r2,0(r2)
  8144b4:	1080008c 	andi	r2,r2,2
  8144b8:	1005d07a 	srai	r2,r2,1
  8144bc:	1005003a 	cmpeq	r2,r2,zero
  8144c0:	1000071e 	bne	r2,zero,8144e0 <alt_up_av_config_read_acknowledge+0x4c>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
  8144c4:	e0bffe17 	ldw	r2,-8(fp)
  8144c8:	10800a17 	ldw	r2,40(r2)
  8144cc:	10800104 	addi	r2,r2,4
  8144d0:	10800037 	ldwio	r2,0(r2)
  8144d4:	1080004c 	andi	r2,r2,1
  8144d8:	e0bfff15 	stw	r2,-4(fp)
  8144dc:	00000206 	br	8144e8 <alt_up_av_config_read_acknowledge+0x54>
	return -1;
  8144e0:	00bfffc4 	movi	r2,-1
  8144e4:	e0bfff15 	stw	r2,-4(fp)
  8144e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8144ec:	e037883a 	mov	sp,fp
  8144f0:	df000017 	ldw	fp,0(sp)
  8144f4:	dec00104 	addi	sp,sp,4
  8144f8:	f800283a 	ret

008144fc <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
  8144fc:	defffe04 	addi	sp,sp,-8
  814500:	df000115 	stw	fp,4(sp)
  814504:	df000104 	addi	fp,sp,4
  814508:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
  81450c:	e0bfff17 	ldw	r2,-4(fp)
  814510:	10800a17 	ldw	r2,40(r2)
  814514:	10800104 	addi	r2,r2,4
  814518:	10800037 	ldwio	r2,0(r2)
  81451c:	1080008c 	andi	r2,r2,2
  814520:	1005d07a 	srai	r2,r2,1
}
  814524:	e037883a 	mov	sp,fp
  814528:	df000017 	ldw	fp,0(sp)
  81452c:	dec00104 	addi	sp,sp,4
  814530:	f800283a 	ret

00814534 <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  814534:	defff904 	addi	sp,sp,-28
  814538:	dfc00615 	stw	ra,24(sp)
  81453c:	df000515 	stw	fp,20(sp)
  814540:	df000504 	addi	fp,sp,20
  814544:	e13ffc15 	stw	r4,-16(fp)
  814548:	e17ffd15 	stw	r5,-12(fp)
  81454c:	e1bffe15 	stw	r6,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  814550:	e0bffc17 	ldw	r2,-16(fp)
  814554:	10800b17 	ldw	r2,44(r2)
  814558:	10800060 	cmpeqi	r2,r2,1
  81455c:	10000f1e 	bne	r2,zero,81459c <alt_up_av_config_write_audio_cfg_register+0x68>
  814560:	e0bffc17 	ldw	r2,-16(fp)
  814564:	10800b17 	ldw	r2,44(r2)
  814568:	108000a0 	cmpeqi	r2,r2,2
  81456c:	10000b1e 	bne	r2,zero,81459c <alt_up_av_config_write_audio_cfg_register+0x68>
  814570:	e0bffc17 	ldw	r2,-16(fp)
  814574:	10800b17 	ldw	r2,44(r2)
  814578:	108000e0 	cmpeqi	r2,r2,3
  81457c:	1000071e 	bne	r2,zero,81459c <alt_up_av_config_write_audio_cfg_register+0x68>
  814580:	e0bffc17 	ldw	r2,-16(fp)
  814584:	10800b17 	ldw	r2,44(r2)
  814588:	10800120 	cmpeqi	r2,r2,4
  81458c:	1000031e 	bne	r2,zero,81459c <alt_up_av_config_write_audio_cfg_register+0x68>
		return -EINVAL;
  814590:	00bffa84 	movi	r2,-22
  814594:	e0bfff15 	stw	r2,-4(fp)
  814598:	00000b06 	br	8145c8 <alt_up_av_config_write_audio_cfg_register+0x94>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
  81459c:	e03ffb15 	stw	zero,-20(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
  8145a0:	e0bffc17 	ldw	r2,-16(fp)
  8145a4:	10800a17 	ldw	r2,40(r2)
  8145a8:	10800084 	addi	r2,r2,2
  8145ac:	e0fffb17 	ldw	r3,-20(fp)
  8145b0:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  8145b4:	e13ffc17 	ldw	r4,-16(fp)
  8145b8:	e17ffd17 	ldw	r5,-12(fp)
  8145bc:	e1bffe17 	ldw	r6,-8(fp)
  8145c0:	08143040 	call	814304 <alt_up_av_config_write_data>
  8145c4:	e0bfff15 	stw	r2,-4(fp)
  8145c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8145cc:	e037883a 	mov	sp,fp
  8145d0:	dfc00117 	ldw	ra,4(sp)
  8145d4:	df000017 	ldw	fp,0(sp)
  8145d8:	dec00204 	addi	sp,sp,8
  8145dc:	f800283a 	ret

008145e0 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
  8145e0:	defff904 	addi	sp,sp,-28
  8145e4:	dfc00615 	stw	ra,24(sp)
  8145e8:	df000515 	stw	fp,20(sp)
  8145ec:	df000504 	addi	fp,sp,20
  8145f0:	e13ffb15 	stw	r4,-20(fp)
  8145f4:	e17ffc15 	stw	r5,-16(fp)
  8145f8:	e1bffd15 	stw	r6,-12(fp)
  8145fc:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  814600:	e0bffb17 	ldw	r2,-20(fp)
  814604:	10800b17 	ldw	r2,44(r2)
  814608:	108000a0 	cmpeqi	r2,r2,2
  81460c:	10000b1e 	bne	r2,zero,81463c <alt_up_av_config_read_video_cfg_register+0x5c>
  814610:	e0bffb17 	ldw	r2,-20(fp)
  814614:	10800b17 	ldw	r2,44(r2)
  814618:	108000e0 	cmpeqi	r2,r2,3
  81461c:	1000071e 	bne	r2,zero,81463c <alt_up_av_config_read_video_cfg_register+0x5c>
  814620:	e0bffb17 	ldw	r2,-20(fp)
  814624:	10800b17 	ldw	r2,44(r2)
  814628:	10800120 	cmpeqi	r2,r2,4
  81462c:	1000031e 	bne	r2,zero,81463c <alt_up_av_config_read_video_cfg_register+0x5c>
		return -EINVAL;
  814630:	00bffa84 	movi	r2,-22
  814634:	e0bfff15 	stw	r2,-4(fp)
  814638:	00002106 	br	8146c0 <alt_up_av_config_read_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  81463c:	e0bffb17 	ldw	r2,-20(fp)
  814640:	10800b17 	ldw	r2,44(r2)
  814644:	108000a0 	cmpeqi	r2,r2,2
  814648:	1000041e 	bne	r2,zero,81465c <alt_up_av_config_read_video_cfg_register+0x7c>
  81464c:	e0bffb17 	ldw	r2,-20(fp)
  814650:	10800b17 	ldw	r2,44(r2)
  814654:	10800118 	cmpnei	r2,r2,4
  814658:	1000061e 	bne	r2,zero,814674 <alt_up_av_config_read_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  81465c:	e0bffe17 	ldw	r2,-8(fp)
  814660:	10800060 	cmpeqi	r2,r2,1
  814664:	10000c1e 	bne	r2,zero,814698 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  814668:	00bffa84 	movi	r2,-22
  81466c:	e0bfff15 	stw	r2,-4(fp)
  814670:	00001306 	br	8146c0 <alt_up_av_config_read_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  814674:	e0bffe17 	ldw	r2,-8(fp)
  814678:	10800060 	cmpeqi	r2,r2,1
  81467c:	1000061e 	bne	r2,zero,814698 <alt_up_av_config_read_video_cfg_register+0xb8>
  814680:	e0bffe17 	ldw	r2,-8(fp)
  814684:	108000a0 	cmpeqi	r2,r2,2
  814688:	1000031e 	bne	r2,zero,814698 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  81468c:	00bffa84 	movi	r2,-22
  814690:	e0bfff15 	stw	r2,-4(fp)
  814694:	00000a06 	br	8146c0 <alt_up_av_config_read_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  814698:	e0bffb17 	ldw	r2,-20(fp)
  81469c:	10800a17 	ldw	r2,40(r2)
  8146a0:	10800084 	addi	r2,r2,2
  8146a4:	e0fffe17 	ldw	r3,-8(fp)
  8146a8:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_read_data(av_config, addr, data);
  8146ac:	e13ffb17 	ldw	r4,-20(fp)
  8146b0:	e17ffc17 	ldw	r5,-16(fp)
  8146b4:	e1bffd17 	ldw	r6,-12(fp)
  8146b8:	08143680 	call	814368 <alt_up_av_config_read_data>
  8146bc:	e0bfff15 	stw	r2,-4(fp)
  8146c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8146c4:	e037883a 	mov	sp,fp
  8146c8:	dfc00117 	ldw	ra,4(sp)
  8146cc:	df000017 	ldw	fp,0(sp)
  8146d0:	dec00204 	addi	sp,sp,8
  8146d4:	f800283a 	ret

008146d8 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
  8146d8:	defff904 	addi	sp,sp,-28
  8146dc:	dfc00615 	stw	ra,24(sp)
  8146e0:	df000515 	stw	fp,20(sp)
  8146e4:	df000504 	addi	fp,sp,20
  8146e8:	e13ffb15 	stw	r4,-20(fp)
  8146ec:	e17ffc15 	stw	r5,-16(fp)
  8146f0:	e1bffd15 	stw	r6,-12(fp)
  8146f4:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  8146f8:	e0bffb17 	ldw	r2,-20(fp)
  8146fc:	10800b17 	ldw	r2,44(r2)
  814700:	108000a0 	cmpeqi	r2,r2,2
  814704:	10000b1e 	bne	r2,zero,814734 <alt_up_av_config_write_video_cfg_register+0x5c>
  814708:	e0bffb17 	ldw	r2,-20(fp)
  81470c:	10800b17 	ldw	r2,44(r2)
  814710:	108000e0 	cmpeqi	r2,r2,3
  814714:	1000071e 	bne	r2,zero,814734 <alt_up_av_config_write_video_cfg_register+0x5c>
  814718:	e0bffb17 	ldw	r2,-20(fp)
  81471c:	10800b17 	ldw	r2,44(r2)
  814720:	10800120 	cmpeqi	r2,r2,4
  814724:	1000031e 	bne	r2,zero,814734 <alt_up_av_config_write_video_cfg_register+0x5c>
		return -EINVAL;
  814728:	00bffa84 	movi	r2,-22
  81472c:	e0bfff15 	stw	r2,-4(fp)
  814730:	00002106 	br	8147b8 <alt_up_av_config_write_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  814734:	e0bffb17 	ldw	r2,-20(fp)
  814738:	10800b17 	ldw	r2,44(r2)
  81473c:	108000a0 	cmpeqi	r2,r2,2
  814740:	1000041e 	bne	r2,zero,814754 <alt_up_av_config_write_video_cfg_register+0x7c>
  814744:	e0bffb17 	ldw	r2,-20(fp)
  814748:	10800b17 	ldw	r2,44(r2)
  81474c:	10800118 	cmpnei	r2,r2,4
  814750:	1000061e 	bne	r2,zero,81476c <alt_up_av_config_write_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  814754:	e0bffe17 	ldw	r2,-8(fp)
  814758:	10800060 	cmpeqi	r2,r2,1
  81475c:	10000c1e 	bne	r2,zero,814790 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  814760:	00bffa84 	movi	r2,-22
  814764:	e0bfff15 	stw	r2,-4(fp)
  814768:	00001306 	br	8147b8 <alt_up_av_config_write_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  81476c:	e0bffe17 	ldw	r2,-8(fp)
  814770:	10800060 	cmpeqi	r2,r2,1
  814774:	1000061e 	bne	r2,zero,814790 <alt_up_av_config_write_video_cfg_register+0xb8>
  814778:	e0bffe17 	ldw	r2,-8(fp)
  81477c:	108000a0 	cmpeqi	r2,r2,2
  814780:	1000031e 	bne	r2,zero,814790 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  814784:	00bffa84 	movi	r2,-22
  814788:	e0bfff15 	stw	r2,-4(fp)
  81478c:	00000a06 	br	8147b8 <alt_up_av_config_write_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  814790:	e0bffb17 	ldw	r2,-20(fp)
  814794:	10800a17 	ldw	r2,40(r2)
  814798:	10800084 	addi	r2,r2,2
  81479c:	e0fffe17 	ldw	r3,-8(fp)
  8147a0:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  8147a4:	e13ffb17 	ldw	r4,-20(fp)
  8147a8:	e17ffc17 	ldw	r5,-16(fp)
  8147ac:	e1bffd17 	ldw	r6,-12(fp)
  8147b0:	08143040 	call	814304 <alt_up_av_config_write_data>
  8147b4:	e0bfff15 	stw	r2,-4(fp)
  8147b8:	e0bfff17 	ldw	r2,-4(fp)
}
  8147bc:	e037883a 	mov	sp,fp
  8147c0:	dfc00117 	ldw	ra,4(sp)
  8147c4:	df000017 	ldw	fp,0(sp)
  8147c8:	dec00204 	addi	sp,sp,8
  8147cc:	f800283a 	ret

008147d0 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  8147d0:	defffa04 	addi	sp,sp,-24
  8147d4:	dfc00515 	stw	ra,20(sp)
  8147d8:	df000415 	stw	fp,16(sp)
  8147dc:	df000404 	addi	fp,sp,16
  8147e0:	e13ffc15 	stw	r4,-16(fp)
  8147e4:	e17ffd15 	stw	r5,-12(fp)
  8147e8:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  8147ec:	e0bffc17 	ldw	r2,-16(fp)
  8147f0:	10800b17 	ldw	r2,44(r2)
  8147f4:	10800220 	cmpeqi	r2,r2,8
  8147f8:	1000031e 	bne	r2,zero,814808 <alt_up_av_config_read_DC2_cfg_register+0x38>
		return -EINVAL;
  8147fc:	00bffa84 	movi	r2,-22
  814800:	e0bfff15 	stw	r2,-4(fp)
  814804:	00000506 	br	81481c <alt_up_av_config_read_DC2_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  814808:	e13ffc17 	ldw	r4,-16(fp)
  81480c:	e17ffd17 	ldw	r5,-12(fp)
  814810:	e1bffe17 	ldw	r6,-8(fp)
  814814:	08143680 	call	814368 <alt_up_av_config_read_data>
  814818:	e0bfff15 	stw	r2,-4(fp)
  81481c:	e0bfff17 	ldw	r2,-4(fp)
}
  814820:	e037883a 	mov	sp,fp
  814824:	dfc00117 	ldw	ra,4(sp)
  814828:	df000017 	ldw	fp,0(sp)
  81482c:	dec00204 	addi	sp,sp,8
  814830:	f800283a 	ret

00814834 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  814834:	defffa04 	addi	sp,sp,-24
  814838:	dfc00515 	stw	ra,20(sp)
  81483c:	df000415 	stw	fp,16(sp)
  814840:	df000404 	addi	fp,sp,16
  814844:	e13ffc15 	stw	r4,-16(fp)
  814848:	e17ffd15 	stw	r5,-12(fp)
  81484c:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  814850:	e0bffc17 	ldw	r2,-16(fp)
  814854:	10800b17 	ldw	r2,44(r2)
  814858:	10800220 	cmpeqi	r2,r2,8
  81485c:	1000031e 	bne	r2,zero,81486c <alt_up_av_config_write_DC2_cfg_register+0x38>
		return -EINVAL;
  814860:	00bffa84 	movi	r2,-22
  814864:	e0bfff15 	stw	r2,-4(fp)
  814868:	00000506 	br	814880 <alt_up_av_config_write_DC2_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  81486c:	e13ffc17 	ldw	r4,-16(fp)
  814870:	e17ffd17 	ldw	r5,-12(fp)
  814874:	e1bffe17 	ldw	r6,-8(fp)
  814878:	08143040 	call	814304 <alt_up_av_config_write_data>
  81487c:	e0bfff15 	stw	r2,-4(fp)
  814880:	e0bfff17 	ldw	r2,-4(fp)
}
  814884:	e037883a 	mov	sp,fp
  814888:	dfc00117 	ldw	ra,4(sp)
  81488c:	df000017 	ldw	fp,0(sp)
  814890:	dec00204 	addi	sp,sp,8
  814894:	f800283a 	ret

00814898 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  814898:	defffa04 	addi	sp,sp,-24
  81489c:	dfc00515 	stw	ra,20(sp)
  8148a0:	df000415 	stw	fp,16(sp)
  8148a4:	df000404 	addi	fp,sp,16
  8148a8:	e13ffc15 	stw	r4,-16(fp)
  8148ac:	e17ffd15 	stw	r5,-12(fp)
  8148b0:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  8148b4:	e0bffc17 	ldw	r2,-16(fp)
  8148b8:	10800b17 	ldw	r2,44(r2)
  8148bc:	10800260 	cmpeqi	r2,r2,9
  8148c0:	1000031e 	bne	r2,zero,8148d0 <alt_up_av_config_read_D5M_cfg_register+0x38>
		return -EINVAL;
  8148c4:	00bffa84 	movi	r2,-22
  8148c8:	e0bfff15 	stw	r2,-4(fp)
  8148cc:	00000506 	br	8148e4 <alt_up_av_config_read_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_read_data(av_config, addr, data);
  8148d0:	e13ffc17 	ldw	r4,-16(fp)
  8148d4:	e17ffd17 	ldw	r5,-12(fp)
  8148d8:	e1bffe17 	ldw	r6,-8(fp)
  8148dc:	08143680 	call	814368 <alt_up_av_config_read_data>
  8148e0:	e0bfff15 	stw	r2,-4(fp)
  8148e4:	e0bfff17 	ldw	r2,-4(fp)
}
  8148e8:	e037883a 	mov	sp,fp
  8148ec:	dfc00117 	ldw	ra,4(sp)
  8148f0:	df000017 	ldw	fp,0(sp)
  8148f4:	dec00204 	addi	sp,sp,8
  8148f8:	f800283a 	ret

008148fc <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  8148fc:	defffa04 	addi	sp,sp,-24
  814900:	dfc00515 	stw	ra,20(sp)
  814904:	df000415 	stw	fp,16(sp)
  814908:	df000404 	addi	fp,sp,16
  81490c:	e13ffc15 	stw	r4,-16(fp)
  814910:	e17ffd15 	stw	r5,-12(fp)
  814914:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  814918:	e0bffc17 	ldw	r2,-16(fp)
  81491c:	10800b17 	ldw	r2,44(r2)
  814920:	10800260 	cmpeqi	r2,r2,9
  814924:	1000031e 	bne	r2,zero,814934 <alt_up_av_config_write_D5M_cfg_register+0x38>
		return -EINVAL;
  814928:	00bffa84 	movi	r2,-22
  81492c:	e0bfff15 	stw	r2,-4(fp)
  814930:	00000506 	br	814948 <alt_up_av_config_write_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_write_data(av_config, addr, data);
  814934:	e13ffc17 	ldw	r4,-16(fp)
  814938:	e17ffd17 	ldw	r5,-12(fp)
  81493c:	e1bffe17 	ldw	r6,-8(fp)
  814940:	08143040 	call	814304 <alt_up_av_config_write_data>
  814944:	e0bfff15 	stw	r2,-4(fp)
  814948:	e0bfff17 	ldw	r2,-4(fp)
}
  81494c:	e037883a 	mov	sp,fp
  814950:	dfc00117 	ldw	ra,4(sp)
  814954:	df000017 	ldw	fp,0(sp)
  814958:	dec00204 	addi	sp,sp,8
  81495c:	f800283a 	ret

00814960 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  814960:	defffa04 	addi	sp,sp,-24
  814964:	dfc00515 	stw	ra,20(sp)
  814968:	df000415 	stw	fp,16(sp)
  81496c:	df000404 	addi	fp,sp,16
  814970:	e13ffc15 	stw	r4,-16(fp)
  814974:	e17ffd15 	stw	r5,-12(fp)
  814978:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  81497c:	e0bffc17 	ldw	r2,-16(fp)
  814980:	10800b17 	ldw	r2,44(r2)
  814984:	108002a0 	cmpeqi	r2,r2,10
  814988:	1000031e 	bne	r2,zero,814998 <alt_up_av_config_read_LTM_cfg_register+0x38>
		return -EINVAL;
  81498c:	00bffa84 	movi	r2,-22
  814990:	e0bfff15 	stw	r2,-4(fp)
  814994:	00000506 	br	8149ac <alt_up_av_config_read_LTM_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  814998:	e13ffc17 	ldw	r4,-16(fp)
  81499c:	e17ffd17 	ldw	r5,-12(fp)
  8149a0:	e1bffe17 	ldw	r6,-8(fp)
  8149a4:	08143680 	call	814368 <alt_up_av_config_read_data>
  8149a8:	e0bfff15 	stw	r2,-4(fp)
  8149ac:	e0bfff17 	ldw	r2,-4(fp)
}
  8149b0:	e037883a 	mov	sp,fp
  8149b4:	dfc00117 	ldw	ra,4(sp)
  8149b8:	df000017 	ldw	fp,0(sp)
  8149bc:	dec00204 	addi	sp,sp,8
  8149c0:	f800283a 	ret

008149c4 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  8149c4:	defffa04 	addi	sp,sp,-24
  8149c8:	dfc00515 	stw	ra,20(sp)
  8149cc:	df000415 	stw	fp,16(sp)
  8149d0:	df000404 	addi	fp,sp,16
  8149d4:	e13ffc15 	stw	r4,-16(fp)
  8149d8:	e17ffd15 	stw	r5,-12(fp)
  8149dc:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  8149e0:	e0bffc17 	ldw	r2,-16(fp)
  8149e4:	10800b17 	ldw	r2,44(r2)
  8149e8:	108002a0 	cmpeqi	r2,r2,10
  8149ec:	1000031e 	bne	r2,zero,8149fc <alt_up_av_config_write_LTM_cfg_register+0x38>
		return -EINVAL;
  8149f0:	00bffa84 	movi	r2,-22
  8149f4:	e0bfff15 	stw	r2,-4(fp)
  8149f8:	00000506 	br	814a10 <alt_up_av_config_write_LTM_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  8149fc:	e13ffc17 	ldw	r4,-16(fp)
  814a00:	e17ffd17 	ldw	r5,-12(fp)
  814a04:	e1bffe17 	ldw	r6,-8(fp)
  814a08:	08143040 	call	814304 <alt_up_av_config_write_data>
  814a0c:	e0bfff15 	stw	r2,-4(fp)
  814a10:	e0bfff17 	ldw	r2,-4(fp)
}
  814a14:	e037883a 	mov	sp,fp
  814a18:	dfc00117 	ldw	ra,4(sp)
  814a1c:	df000017 	ldw	fp,0(sp)
  814a20:	dec00204 	addi	sp,sp,8
  814a24:	f800283a 	ret

00814a28 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  814a28:	defffc04 	addi	sp,sp,-16
  814a2c:	df000315 	stw	fp,12(sp)
  814a30:	df000304 	addi	fp,sp,12
  814a34:	e13ffe15 	stw	r4,-8(fp)
  814a38:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  814a3c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  814a40:	e0bfff17 	ldw	r2,-4(fp)
  814a44:	1004c03a 	cmpne	r2,r2,zero
  814a48:	1000061e 	bne	r2,zero,814a64 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  814a4c:	e0bffe17 	ldw	r2,-8(fp)
  814a50:	1007883a 	mov	r3,r2
  814a54:	e0bffd03 	ldbu	r2,-12(fp)
  814a58:	10c4b03a 	or	r2,r2,r3
  814a5c:	e0bffd05 	stb	r2,-12(fp)
  814a60:	00000806 	br	814a84 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  814a64:	e0bffe17 	ldw	r2,-8(fp)
  814a68:	1007883a 	mov	r3,r2
  814a6c:	e0bffd03 	ldbu	r2,-12(fp)
  814a70:	10c4b03a 	or	r2,r2,r3
  814a74:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  814a78:	e0bffd03 	ldbu	r2,-12(fp)
  814a7c:	10801014 	ori	r2,r2,64
  814a80:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  814a84:	e0fffd03 	ldbu	r3,-12(fp)
  814a88:	00bfe004 	movi	r2,-128
  814a8c:	1884b03a 	or	r2,r3,r2
  814a90:	10803fcc 	andi	r2,r2,255
}
  814a94:	e037883a 	mov	sp,fp
  814a98:	df000017 	ldw	fp,0(sp)
  814a9c:	dec00104 	addi	sp,sp,4
  814aa0:	f800283a 	ret

00814aa4 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  814aa4:	defffd04 	addi	sp,sp,-12
  814aa8:	df000215 	stw	fp,8(sp)
  814aac:	df000204 	addi	fp,sp,8
  814ab0:	e13ffe15 	stw	r4,-8(fp)
  814ab4:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  814ab8:	e0bffe17 	ldw	r2,-8(fp)
  814abc:	10800a17 	ldw	r2,40(r2)
  814ac0:	e0ffff03 	ldbu	r3,-4(fp)
  814ac4:	10c00025 	stbio	r3,0(r2)
}
  814ac8:	e037883a 	mov	sp,fp
  814acc:	df000017 	ldw	fp,0(sp)
  814ad0:	dec00104 	addi	sp,sp,4
  814ad4:	f800283a 	ret

00814ad8 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  814ad8:	defffe04 	addi	sp,sp,-8
  814adc:	df000115 	stw	fp,4(sp)
  814ae0:	df000104 	addi	fp,sp,4
  814ae4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  814ae8:	e0bfff17 	ldw	r2,-4(fp)
  814aec:	10800a17 	ldw	r2,40(r2)
  814af0:	1007883a 	mov	r3,r2
  814af4:	00800044 	movi	r2,1
  814af8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  814afc:	e037883a 	mov	sp,fp
  814b00:	df000017 	ldw	fp,0(sp)
  814b04:	dec00104 	addi	sp,sp,4
  814b08:	f800283a 	ret

00814b0c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  814b0c:	defffc04 	addi	sp,sp,-16
  814b10:	dfc00315 	stw	ra,12(sp)
  814b14:	df000215 	stw	fp,8(sp)
  814b18:	df000204 	addi	fp,sp,8
  814b1c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  814b20:	e13fff17 	ldw	r4,-4(fp)
  814b24:	014020b4 	movhi	r5,130
  814b28:	2979c904 	addi	r5,r5,-6364
  814b2c:	081b2480 	call	81b248 <alt_find_dev>
  814b30:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  814b34:	e0bffe17 	ldw	r2,-8(fp)
}
  814b38:	e037883a 	mov	sp,fp
  814b3c:	dfc00117 	ldw	ra,4(sp)
  814b40:	df000017 	ldw	fp,0(sp)
  814b44:	dec00204 	addi	sp,sp,8
  814b48:	f800283a 	ret

00814b4c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  814b4c:	defffb04 	addi	sp,sp,-20
  814b50:	df000415 	stw	fp,16(sp)
  814b54:	df000404 	addi	fp,sp,16
  814b58:	e13ffd15 	stw	r4,-12(fp)
  814b5c:	e17ffe15 	stw	r5,-8(fp)
  814b60:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  814b64:	e03ffc15 	stw	zero,-16(fp)
  814b68:	00000f06 	br	814ba8 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  814b6c:	e0bffd17 	ldw	r2,-12(fp)
  814b70:	10800a17 	ldw	r2,40(r2)
  814b74:	11000044 	addi	r4,r2,1
  814b78:	e0fffc17 	ldw	r3,-16(fp)
  814b7c:	e0bffe17 	ldw	r2,-8(fp)
  814b80:	1885883a 	add	r2,r3,r2
  814b84:	10800003 	ldbu	r2,0(r2)
  814b88:	10c03fcc 	andi	r3,r2,255
  814b8c:	18c0201c 	xori	r3,r3,128
  814b90:	18ffe004 	addi	r3,r3,-128
  814b94:	2005883a 	mov	r2,r4
  814b98:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  814b9c:	e0bffc17 	ldw	r2,-16(fp)
  814ba0:	10800044 	addi	r2,r2,1
  814ba4:	e0bffc15 	stw	r2,-16(fp)
  814ba8:	e0fffc17 	ldw	r3,-16(fp)
  814bac:	e0bfff17 	ldw	r2,-4(fp)
  814bb0:	18bfee36 	bltu	r3,r2,814b6c <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  814bb4:	e037883a 	mov	sp,fp
  814bb8:	df000017 	ldw	fp,0(sp)
  814bbc:	dec00104 	addi	sp,sp,4
  814bc0:	f800283a 	ret

00814bc4 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  814bc4:	defffd04 	addi	sp,sp,-12
  814bc8:	df000215 	stw	fp,8(sp)
  814bcc:	df000204 	addi	fp,sp,8
  814bd0:	e13ffe15 	stw	r4,-8(fp)
  814bd4:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  814bd8:	00000d06 	br	814c10 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  814bdc:	e0bffe17 	ldw	r2,-8(fp)
  814be0:	10800a17 	ldw	r2,40(r2)
  814be4:	11000044 	addi	r4,r2,1
  814be8:	e0bfff17 	ldw	r2,-4(fp)
  814bec:	10800003 	ldbu	r2,0(r2)
  814bf0:	10c03fcc 	andi	r3,r2,255
  814bf4:	18c0201c 	xori	r3,r3,128
  814bf8:	18ffe004 	addi	r3,r3,-128
  814bfc:	2005883a 	mov	r2,r4
  814c00:	10c00025 	stbio	r3,0(r2)
		++ptr;
  814c04:	e0bfff17 	ldw	r2,-4(fp)
  814c08:	10800044 	addi	r2,r2,1
  814c0c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  814c10:	e0bfff17 	ldw	r2,-4(fp)
  814c14:	10800003 	ldbu	r2,0(r2)
  814c18:	10803fcc 	andi	r2,r2,255
  814c1c:	1080201c 	xori	r2,r2,128
  814c20:	10bfe004 	addi	r2,r2,-128
  814c24:	1004c03a 	cmpne	r2,r2,zero
  814c28:	103fec1e 	bne	r2,zero,814bdc <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  814c2c:	e037883a 	mov	sp,fp
  814c30:	df000017 	ldw	fp,0(sp)
  814c34:	dec00104 	addi	sp,sp,4
  814c38:	f800283a 	ret

00814c3c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  814c3c:	defffb04 	addi	sp,sp,-20
  814c40:	dfc00415 	stw	ra,16(sp)
  814c44:	df000315 	stw	fp,12(sp)
  814c48:	df000304 	addi	fp,sp,12
  814c4c:	e13ffd15 	stw	r4,-12(fp)
  814c50:	e17ffe15 	stw	r5,-8(fp)
  814c54:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  814c58:	e0bffd17 	ldw	r2,-12(fp)
  814c5c:	10800017 	ldw	r2,0(r2)
  814c60:	1009883a 	mov	r4,r2
  814c64:	e1bfff17 	ldw	r6,-4(fp)
  814c68:	e17ffe17 	ldw	r5,-8(fp)
  814c6c:	0814b4c0 	call	814b4c <alt_up_character_lcd_write>
	return 0;
  814c70:	0005883a 	mov	r2,zero
}
  814c74:	e037883a 	mov	sp,fp
  814c78:	dfc00117 	ldw	ra,4(sp)
  814c7c:	df000017 	ldw	fp,0(sp)
  814c80:	dec00204 	addi	sp,sp,8
  814c84:	f800283a 	ret

00814c88 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  814c88:	defff904 	addi	sp,sp,-28
  814c8c:	dfc00615 	stw	ra,24(sp)
  814c90:	df000515 	stw	fp,20(sp)
  814c94:	df000504 	addi	fp,sp,20
  814c98:	e13ffc15 	stw	r4,-16(fp)
  814c9c:	e17ffd15 	stw	r5,-12(fp)
  814ca0:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  814ca4:	e0bffd17 	ldw	r2,-12(fp)
  814ca8:	10800a28 	cmpgeui	r2,r2,40
  814cac:	1000031e 	bne	r2,zero,814cbc <alt_up_character_lcd_set_cursor_pos+0x34>
  814cb0:	e0bffe17 	ldw	r2,-8(fp)
  814cb4:	108000b0 	cmpltui	r2,r2,2
  814cb8:	1000031e 	bne	r2,zero,814cc8 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  814cbc:	00bfffc4 	movi	r2,-1
  814cc0:	e0bfff15 	stw	r2,-4(fp)
  814cc4:	00000806 	br	814ce8 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  814cc8:	e13ffd17 	ldw	r4,-12(fp)
  814ccc:	e17ffe17 	ldw	r5,-8(fp)
  814cd0:	0814a280 	call	814a28 <get_DDRAM_addr>
  814cd4:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  814cd8:	e17ffb03 	ldbu	r5,-20(fp)
  814cdc:	e13ffc17 	ldw	r4,-16(fp)
  814ce0:	0814aa40 	call	814aa4 <alt_up_character_lcd_send_cmd>
	return 0;
  814ce4:	e03fff15 	stw	zero,-4(fp)
  814ce8:	e0bfff17 	ldw	r2,-4(fp)
}
  814cec:	e037883a 	mov	sp,fp
  814cf0:	dfc00117 	ldw	ra,4(sp)
  814cf4:	df000017 	ldw	fp,0(sp)
  814cf8:	dec00204 	addi	sp,sp,8
  814cfc:	f800283a 	ret

00814d00 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  814d00:	defff904 	addi	sp,sp,-28
  814d04:	dfc00615 	stw	ra,24(sp)
  814d08:	df000515 	stw	fp,20(sp)
  814d0c:	df000504 	addi	fp,sp,20
  814d10:	e13ffc15 	stw	r4,-16(fp)
  814d14:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  814d18:	e0bffd17 	ldw	r2,-12(fp)
  814d1c:	1005003a 	cmpeq	r2,r2,zero
  814d20:	10001e1e 	bne	r2,zero,814d9c <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  814d24:	e0bffd17 	ldw	r2,-12(fp)
  814d28:	10800050 	cmplti	r2,r2,1
  814d2c:	1000031e 	bne	r2,zero,814d3c <alt_up_character_lcd_shift_cursor+0x3c>
  814d30:	00800504 	movi	r2,20
  814d34:	e0bfff05 	stb	r2,-4(fp)
  814d38:	00000206 	br	814d44 <alt_up_character_lcd_shift_cursor+0x44>
  814d3c:	00c00404 	movi	r3,16
  814d40:	e0ffff05 	stb	r3,-4(fp)
  814d44:	e0bfff03 	ldbu	r2,-4(fp)
  814d48:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  814d4c:	e0fffd17 	ldw	r3,-12(fp)
  814d50:	e0fffe15 	stw	r3,-8(fp)
  814d54:	e0fffe17 	ldw	r3,-8(fp)
  814d58:	1804403a 	cmpge	r2,r3,zero
  814d5c:	1000031e 	bne	r2,zero,814d6c <alt_up_character_lcd_shift_cursor+0x6c>
  814d60:	e0bffe17 	ldw	r2,-8(fp)
  814d64:	0085c83a 	sub	r2,zero,r2
  814d68:	e0bffe15 	stw	r2,-8(fp)
  814d6c:	e0fffe17 	ldw	r3,-8(fp)
  814d70:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  814d74:	00000306 	br	814d84 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  814d78:	e17ffb43 	ldbu	r5,-19(fp)
  814d7c:	e13ffc17 	ldw	r4,-16(fp)
  814d80:	0814aa40 	call	814aa4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  814d84:	e0bffb03 	ldbu	r2,-20(fp)
  814d88:	10bfffc4 	addi	r2,r2,-1
  814d8c:	e0bffb05 	stb	r2,-20(fp)
  814d90:	e0bffb03 	ldbu	r2,-20(fp)
  814d94:	10803fd8 	cmpnei	r2,r2,255
  814d98:	103ff71e 	bne	r2,zero,814d78 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  814d9c:	e037883a 	mov	sp,fp
  814da0:	dfc00117 	ldw	ra,4(sp)
  814da4:	df000017 	ldw	fp,0(sp)
  814da8:	dec00204 	addi	sp,sp,8
  814dac:	f800283a 	ret

00814db0 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  814db0:	defff904 	addi	sp,sp,-28
  814db4:	dfc00615 	stw	ra,24(sp)
  814db8:	df000515 	stw	fp,20(sp)
  814dbc:	df000504 	addi	fp,sp,20
  814dc0:	e13ffc15 	stw	r4,-16(fp)
  814dc4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  814dc8:	e0bffd17 	ldw	r2,-12(fp)
  814dcc:	1005003a 	cmpeq	r2,r2,zero
  814dd0:	10001e1e 	bne	r2,zero,814e4c <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  814dd4:	e0bffd17 	ldw	r2,-12(fp)
  814dd8:	10800050 	cmplti	r2,r2,1
  814ddc:	1000031e 	bne	r2,zero,814dec <alt_up_character_lcd_shift_display+0x3c>
  814de0:	00800704 	movi	r2,28
  814de4:	e0bfff05 	stb	r2,-4(fp)
  814de8:	00000206 	br	814df4 <alt_up_character_lcd_shift_display+0x44>
  814dec:	00c00604 	movi	r3,24
  814df0:	e0ffff05 	stb	r3,-4(fp)
  814df4:	e0bfff03 	ldbu	r2,-4(fp)
  814df8:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  814dfc:	e0fffd17 	ldw	r3,-12(fp)
  814e00:	e0fffe15 	stw	r3,-8(fp)
  814e04:	e0fffe17 	ldw	r3,-8(fp)
  814e08:	1804403a 	cmpge	r2,r3,zero
  814e0c:	1000031e 	bne	r2,zero,814e1c <alt_up_character_lcd_shift_display+0x6c>
  814e10:	e0bffe17 	ldw	r2,-8(fp)
  814e14:	0085c83a 	sub	r2,zero,r2
  814e18:	e0bffe15 	stw	r2,-8(fp)
  814e1c:	e0fffe17 	ldw	r3,-8(fp)
  814e20:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  814e24:	00000306 	br	814e34 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  814e28:	e17ffb43 	ldbu	r5,-19(fp)
  814e2c:	e13ffc17 	ldw	r4,-16(fp)
  814e30:	0814aa40 	call	814aa4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  814e34:	e0bffb03 	ldbu	r2,-20(fp)
  814e38:	10bfffc4 	addi	r2,r2,-1
  814e3c:	e0bffb05 	stb	r2,-20(fp)
  814e40:	e0bffb03 	ldbu	r2,-20(fp)
  814e44:	10803fd8 	cmpnei	r2,r2,255
  814e48:	103ff71e 	bne	r2,zero,814e28 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  814e4c:	e037883a 	mov	sp,fp
  814e50:	dfc00117 	ldw	ra,4(sp)
  814e54:	df000017 	ldw	fp,0(sp)
  814e58:	dec00204 	addi	sp,sp,8
  814e5c:	f800283a 	ret

00814e60 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  814e60:	defff904 	addi	sp,sp,-28
  814e64:	dfc00615 	stw	ra,24(sp)
  814e68:	df000515 	stw	fp,20(sp)
  814e6c:	df000504 	addi	fp,sp,20
  814e70:	e13ffc15 	stw	r4,-16(fp)
  814e74:	e17ffd15 	stw	r5,-12(fp)
  814e78:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  814e7c:	e0bffd17 	ldw	r2,-12(fp)
  814e80:	10800a28 	cmpgeui	r2,r2,40
  814e84:	1000031e 	bne	r2,zero,814e94 <alt_up_character_lcd_erase_pos+0x34>
  814e88:	e0bffe17 	ldw	r2,-8(fp)
  814e8c:	108000b0 	cmpltui	r2,r2,2
  814e90:	1000031e 	bne	r2,zero,814ea0 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  814e94:	00bfffc4 	movi	r2,-1
  814e98:	e0bfff15 	stw	r2,-4(fp)
  814e9c:	00000e06 	br	814ed8 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  814ea0:	e13ffd17 	ldw	r4,-12(fp)
  814ea4:	e17ffe17 	ldw	r5,-8(fp)
  814ea8:	0814a280 	call	814a28 <get_DDRAM_addr>
  814eac:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  814eb0:	e17ffb03 	ldbu	r5,-20(fp)
  814eb4:	e13ffc17 	ldw	r4,-16(fp)
  814eb8:	0814aa40 	call	814aa4 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
  814ebc:	e0bffc17 	ldw	r2,-16(fp)
  814ec0:	10800a17 	ldw	r2,40(r2)
  814ec4:	10800044 	addi	r2,r2,1
  814ec8:	1007883a 	mov	r3,r2
  814ecc:	00800084 	movi	r2,2
  814ed0:	18800025 	stbio	r2,0(r3)
	return 0;
  814ed4:	e03fff15 	stw	zero,-4(fp)
  814ed8:	e0bfff17 	ldw	r2,-4(fp)
}
  814edc:	e037883a 	mov	sp,fp
  814ee0:	dfc00117 	ldw	ra,4(sp)
  814ee4:	df000017 	ldw	fp,0(sp)
  814ee8:	dec00204 	addi	sp,sp,8
  814eec:	f800283a 	ret

00814ef0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  814ef0:	defffd04 	addi	sp,sp,-12
  814ef4:	dfc00215 	stw	ra,8(sp)
  814ef8:	df000115 	stw	fp,4(sp)
  814efc:	df000104 	addi	fp,sp,4
  814f00:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  814f04:	e13fff17 	ldw	r4,-4(fp)
  814f08:	01400304 	movi	r5,12
  814f0c:	0814aa40 	call	814aa4 <alt_up_character_lcd_send_cmd>
}
  814f10:	e037883a 	mov	sp,fp
  814f14:	dfc00117 	ldw	ra,4(sp)
  814f18:	df000017 	ldw	fp,0(sp)
  814f1c:	dec00204 	addi	sp,sp,8
  814f20:	f800283a 	ret

00814f24 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  814f24:	defffd04 	addi	sp,sp,-12
  814f28:	dfc00215 	stw	ra,8(sp)
  814f2c:	df000115 	stw	fp,4(sp)
  814f30:	df000104 	addi	fp,sp,4
  814f34:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  814f38:	e13fff17 	ldw	r4,-4(fp)
  814f3c:	014003c4 	movi	r5,15
  814f40:	0814aa40 	call	814aa4 <alt_up_character_lcd_send_cmd>
}
  814f44:	e037883a 	mov	sp,fp
  814f48:	dfc00117 	ldw	ra,4(sp)
  814f4c:	df000017 	ldw	fp,0(sp)
  814f50:	dec00204 	addi	sp,sp,8
  814f54:	f800283a 	ret

00814f58 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
  814f58:	defffc04 	addi	sp,sp,-16
  814f5c:	dfc00315 	stw	ra,12(sp)
  814f60:	df000215 	stw	fp,8(sp)
  814f64:	df000204 	addi	fp,sp,8
  814f68:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
  814f6c:	e0bfff17 	ldw	r2,-4(fp)
  814f70:	10800217 	ldw	r2,8(r2)
  814f74:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
  814f78:	00000c06 	br	814fac <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
  814f7c:	e13ffe17 	ldw	r4,-8(fp)
  814f80:	014020b4 	movhi	r5,130
  814f84:	2972d804 	addi	r5,r5,-13472
  814f88:	08106200 	call	810620 <strcmp>
  814f8c:	1004c03a 	cmpne	r2,r2,zero
  814f90:	1000031e 	bne	r2,zero,814fa0 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
  814f94:	e0bffe17 	ldw	r2,-8(fp)
  814f98:	10000005 	stb	zero,0(r2)
			break;
  814f9c:	00000a06 	br	814fc8 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
  814fa0:	e0bffe17 	ldw	r2,-8(fp)
  814fa4:	10800044 	addi	r2,r2,1
  814fa8:	e0bffe15 	stw	r2,-8(fp)
  814fac:	e0bffe17 	ldw	r2,-8(fp)
  814fb0:	10800003 	ldbu	r2,0(r2)
  814fb4:	10803fcc 	andi	r2,r2,255
  814fb8:	1080201c 	xori	r2,r2,128
  814fbc:	10bfe004 	addi	r2,r2,-128
  814fc0:	1004c03a 	cmpne	r2,r2,zero
  814fc4:	103fed1e 	bne	r2,zero,814f7c <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
  814fc8:	e037883a 	mov	sp,fp
  814fcc:	dfc00117 	ldw	ra,4(sp)
  814fd0:	df000017 	ldw	fp,0(sp)
  814fd4:	dec00204 	addi	sp,sp,8
  814fd8:	f800283a 	ret

00814fdc <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
  814fdc:	defffc04 	addi	sp,sp,-16
  814fe0:	dfc00315 	stw	ra,12(sp)
  814fe4:	df000215 	stw	fp,8(sp)
  814fe8:	df000204 	addi	fp,sp,8
  814fec:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
  814ff0:	e13fff17 	ldw	r4,-4(fp)
  814ff4:	014020b4 	movhi	r5,130
  814ff8:	2979c904 	addi	r5,r5,-6364
  814ffc:	081b2480 	call	81b248 <alt_find_dev>
  815000:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  815004:	e0bffe17 	ldw	r2,-8(fp)
}
  815008:	e037883a 	mov	sp,fp
  81500c:	dfc00117 	ldw	ra,4(sp)
  815010:	df000017 	ldw	fp,0(sp)
  815014:	dec00204 	addi	sp,sp,8
  815018:	f800283a 	ret

0081501c <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
  81501c:	defff904 	addi	sp,sp,-28
  815020:	df000615 	stw	fp,24(sp)
  815024:	df000604 	addi	fp,sp,24
  815028:	e13ffb15 	stw	r4,-20(fp)
  81502c:	e1bffd15 	stw	r6,-12(fp)
  815030:	e1fffe15 	stw	r7,-8(fp)
  815034:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  815038:	e0bffb17 	ldw	r2,-20(fp)
  81503c:	10c00c17 	ldw	r3,48(r2)
  815040:	e0bffd17 	ldw	r2,-12(fp)
  815044:	10c0042e 	bgeu	r2,r3,815058 <alt_up_char_buffer_draw+0x3c>
  815048:	e0bffb17 	ldw	r2,-20(fp)
  81504c:	10c00d17 	ldw	r3,52(r2)
  815050:	e0bffe17 	ldw	r2,-8(fp)
  815054:	10c00336 	bltu	r2,r3,815064 <alt_up_char_buffer_draw+0x48>
		return -1;
  815058:	00bfffc4 	movi	r2,-1
  81505c:	e0bfff15 	stw	r2,-4(fp)
  815060:	00001d06 	br	8150d8 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
  815064:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
  815068:	e0bffb17 	ldw	r2,-20(fp)
  81506c:	10c00f17 	ldw	r3,60(r2)
  815070:	e0bffd17 	ldw	r2,-12(fp)
  815074:	1886703a 	and	r3,r3,r2
  815078:	e0bffb17 	ldw	r2,-20(fp)
  81507c:	10800e17 	ldw	r2,56(r2)
  815080:	1886983a 	sll	r3,r3,r2
  815084:	e0bffa17 	ldw	r2,-24(fp)
  815088:	10c4b03a 	or	r2,r2,r3
  81508c:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
  815090:	e0bffb17 	ldw	r2,-20(fp)
  815094:	10c01117 	ldw	r3,68(r2)
  815098:	e0bffe17 	ldw	r2,-8(fp)
  81509c:	1886703a 	and	r3,r3,r2
  8150a0:	e0bffb17 	ldw	r2,-20(fp)
  8150a4:	10801017 	ldw	r2,64(r2)
  8150a8:	1886983a 	sll	r3,r3,r2
  8150ac:	e0bffa17 	ldw	r2,-24(fp)
  8150b0:	10c4b03a 	or	r2,r2,r3
  8150b4:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
  8150b8:	e0bffb17 	ldw	r2,-20(fp)
  8150bc:	10800b17 	ldw	r2,44(r2)
  8150c0:	1007883a 	mov	r3,r2
  8150c4:	e0bffa17 	ldw	r2,-24(fp)
  8150c8:	1885883a 	add	r2,r3,r2
  8150cc:	e0fffc03 	ldbu	r3,-16(fp)
  8150d0:	10c00025 	stbio	r3,0(r2)

	return 0;
  8150d4:	e03fff15 	stw	zero,-4(fp)
  8150d8:	e0bfff17 	ldw	r2,-4(fp)
}
  8150dc:	e037883a 	mov	sp,fp
  8150e0:	df000017 	ldw	fp,0(sp)
  8150e4:	dec00104 	addi	sp,sp,4
  8150e8:	f800283a 	ret

008150ec <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
  8150ec:	defff904 	addi	sp,sp,-28
  8150f0:	df000615 	stw	fp,24(sp)
  8150f4:	df000604 	addi	fp,sp,24
  8150f8:	e13ffb15 	stw	r4,-20(fp)
  8150fc:	e17ffc15 	stw	r5,-16(fp)
  815100:	e1bffd15 	stw	r6,-12(fp)
  815104:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  815108:	e0bffb17 	ldw	r2,-20(fp)
  81510c:	10c00c17 	ldw	r3,48(r2)
  815110:	e0bffd17 	ldw	r2,-12(fp)
  815114:	10c0042e 	bgeu	r2,r3,815128 <alt_up_char_buffer_string+0x3c>
  815118:	e0bffb17 	ldw	r2,-20(fp)
  81511c:	10c00d17 	ldw	r3,52(r2)
  815120:	e0bffe17 	ldw	r2,-8(fp)
  815124:	10c00336 	bltu	r2,r3,815134 <alt_up_char_buffer_string+0x48>
		return -1;
  815128:	00bfffc4 	movi	r2,-1
  81512c:	e0bfff15 	stw	r2,-4(fp)
  815130:	00002e06 	br	8151ec <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
  815134:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
  815138:	e0bffb17 	ldw	r2,-20(fp)
  81513c:	10801017 	ldw	r2,64(r2)
  815140:	1007883a 	mov	r3,r2
  815144:	e0bffe17 	ldw	r2,-8(fp)
  815148:	10c6983a 	sll	r3,r2,r3
  81514c:	e0bffd17 	ldw	r2,-12(fp)
  815150:	1885883a 	add	r2,r3,r2
  815154:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
  815158:	00001c06 	br	8151cc <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
  81515c:	e0bffb17 	ldw	r2,-20(fp)
  815160:	10800b17 	ldw	r2,44(r2)
  815164:	1007883a 	mov	r3,r2
  815168:	e0bffa17 	ldw	r2,-24(fp)
  81516c:	1889883a 	add	r4,r3,r2
  815170:	e0bffc17 	ldw	r2,-16(fp)
  815174:	10800003 	ldbu	r2,0(r2)
  815178:	10c03fcc 	andi	r3,r2,255
  81517c:	18c0201c 	xori	r3,r3,128
  815180:	18ffe004 	addi	r3,r3,-128
  815184:	2005883a 	mov	r2,r4
  815188:	10c00025 	stbio	r3,0(r2)
		++ptr;
  81518c:	e0bffc17 	ldw	r2,-16(fp)
  815190:	10800044 	addi	r2,r2,1
  815194:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
  815198:	e0bffd17 	ldw	r2,-12(fp)
  81519c:	10800044 	addi	r2,r2,1
  8151a0:	e0bffd15 	stw	r2,-12(fp)
  8151a4:	e0bffb17 	ldw	r2,-20(fp)
  8151a8:	10c00c17 	ldw	r3,48(r2)
  8151ac:	e0bffd17 	ldw	r2,-12(fp)
  8151b0:	10c00336 	bltu	r2,r3,8151c0 <alt_up_char_buffer_string+0xd4>
			return -1;
  8151b4:	00bfffc4 	movi	r2,-1
  8151b8:	e0bfff15 	stw	r2,-4(fp)
  8151bc:	00000b06 	br	8151ec <alt_up_char_buffer_string+0x100>
		++offset;
  8151c0:	e0bffa17 	ldw	r2,-24(fp)
  8151c4:	10800044 	addi	r2,r2,1
  8151c8:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
  8151cc:	e0bffc17 	ldw	r2,-16(fp)
  8151d0:	10800003 	ldbu	r2,0(r2)
  8151d4:	10803fcc 	andi	r2,r2,255
  8151d8:	1080201c 	xori	r2,r2,128
  8151dc:	10bfe004 	addi	r2,r2,-128
  8151e0:	1004c03a 	cmpne	r2,r2,zero
  8151e4:	103fdd1e 	bne	r2,zero,81515c <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
  8151e8:	e03fff15 	stw	zero,-4(fp)
  8151ec:	e0bfff17 	ldw	r2,-4(fp)
}
  8151f0:	e037883a 	mov	sp,fp
  8151f4:	df000017 	ldw	fp,0(sp)
  8151f8:	dec00104 	addi	sp,sp,4
  8151fc:	f800283a 	ret

00815200 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
  815200:	defffe04 	addi	sp,sp,-8
  815204:	df000115 	stw	fp,4(sp)
  815208:	df000104 	addi	fp,sp,4
  81520c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
  815210:	e0bfff17 	ldw	r2,-4(fp)
  815214:	10800a17 	ldw	r2,40(r2)
  815218:	10800084 	addi	r2,r2,2
  81521c:	1007883a 	mov	r3,r2
  815220:	00800044 	movi	r2,1
  815224:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
  815228:	e0bfff17 	ldw	r2,-4(fp)
  81522c:	10800a17 	ldw	r2,40(r2)
  815230:	10800084 	addi	r2,r2,2
  815234:	10800023 	ldbuio	r2,0(r2)
  815238:	1080004c 	andi	r2,r2,1
  81523c:	10803fcc 	andi	r2,r2,255
  815240:	1004c03a 	cmpne	r2,r2,zero
  815244:	103ff81e 	bne	r2,zero,815228 <alt_up_char_buffer_clear+0x28>
	return 0;
  815248:	0005883a 	mov	r2,zero
}
  81524c:	e037883a 	mov	sp,fp
  815250:	df000017 	ldw	fp,0(sp)
  815254:	dec00104 	addi	sp,sp,4
  815258:	f800283a 	ret

0081525c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  81525c:	defffc04 	addi	sp,sp,-16
  815260:	dfc00315 	stw	ra,12(sp)
  815264:	df000215 	stw	fp,8(sp)
  815268:	df000204 	addi	fp,sp,8
  81526c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  815270:	e13fff17 	ldw	r4,-4(fp)
  815274:	014020b4 	movhi	r5,130
  815278:	2979c904 	addi	r5,r5,-6364
  81527c:	081b2480 	call	81b248 <alt_find_dev>
  815280:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  815284:	e0bffe17 	ldw	r2,-8(fp)
}
  815288:	e037883a 	mov	sp,fp
  81528c:	dfc00117 	ldw	ra,4(sp)
  815290:	df000017 	ldw	fp,0(sp)
  815294:	dec00204 	addi	sp,sp,8
  815298:	f800283a 	ret

0081529c <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  81529c:	defff904 	addi	sp,sp,-28
  8152a0:	df000615 	stw	fp,24(sp)
  8152a4:	df000604 	addi	fp,sp,24
  8152a8:	e13ffb15 	stw	r4,-20(fp)
  8152ac:	e17ffc15 	stw	r5,-16(fp)
  8152b0:	e1bffd15 	stw	r6,-12(fp)
  8152b4:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  8152b8:	e0bffb17 	ldw	r2,-20(fp)
  8152bc:	10c00f17 	ldw	r3,60(r2)
  8152c0:	e0bffd17 	ldw	r2,-12(fp)
  8152c4:	10c0042e 	bgeu	r2,r3,8152d8 <alt_up_pixel_buffer_dma_draw+0x3c>
  8152c8:	e0bffb17 	ldw	r2,-20(fp)
  8152cc:	10c01017 	ldw	r3,64(r2)
  8152d0:	e0bffe17 	ldw	r2,-8(fp)
  8152d4:	10c00336 	bltu	r2,r3,8152e4 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
  8152d8:	00bfffc4 	movi	r2,-1
  8152dc:	e0bfff15 	stw	r2,-4(fp)
  8152e0:	00005106 	br	815428 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
  8152e4:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  8152e8:	e0bffb17 	ldw	r2,-20(fp)
  8152ec:	10800d17 	ldw	r2,52(r2)
  8152f0:	1004c03a 	cmpne	r2,r2,zero
  8152f4:	1000151e 	bne	r2,zero,81534c <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  8152f8:	e0bffb17 	ldw	r2,-20(fp)
  8152fc:	10c01217 	ldw	r3,72(r2)
  815300:	e0bffd17 	ldw	r2,-12(fp)
  815304:	1886703a 	and	r3,r3,r2
  815308:	e0bffb17 	ldw	r2,-20(fp)
  81530c:	10801117 	ldw	r2,68(r2)
  815310:	1886983a 	sll	r3,r3,r2
  815314:	e0bffa17 	ldw	r2,-24(fp)
  815318:	10c4b03a 	or	r2,r2,r3
  81531c:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  815320:	e0bffb17 	ldw	r2,-20(fp)
  815324:	10c01417 	ldw	r3,80(r2)
  815328:	e0bffe17 	ldw	r2,-8(fp)
  81532c:	1886703a 	and	r3,r3,r2
  815330:	e0bffb17 	ldw	r2,-20(fp)
  815334:	10801317 	ldw	r2,76(r2)
  815338:	1886983a 	sll	r3,r3,r2
  81533c:	e0bffa17 	ldw	r2,-24(fp)
  815340:	10c4b03a 	or	r2,r2,r3
  815344:	e0bffa15 	stw	r2,-24(fp)
  815348:	00001706 	br	8153a8 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  81534c:	e0bffb17 	ldw	r2,-20(fp)
  815350:	10c01217 	ldw	r3,72(r2)
  815354:	e0bffd17 	ldw	r2,-12(fp)
  815358:	1886703a 	and	r3,r3,r2
  81535c:	e0bffb17 	ldw	r2,-20(fp)
  815360:	10801117 	ldw	r2,68(r2)
  815364:	1886983a 	sll	r3,r3,r2
  815368:	e0bffa17 	ldw	r2,-24(fp)
  81536c:	10c5883a 	add	r2,r2,r3
  815370:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  815374:	e0bffb17 	ldw	r2,-20(fp)
  815378:	10c01417 	ldw	r3,80(r2)
  81537c:	e0bffe17 	ldw	r2,-8(fp)
  815380:	1886703a 	and	r3,r3,r2
  815384:	e0bffb17 	ldw	r2,-20(fp)
  815388:	10800f17 	ldw	r2,60(r2)
  81538c:	1887383a 	mul	r3,r3,r2
  815390:	e0bffb17 	ldw	r2,-20(fp)
  815394:	10801117 	ldw	r2,68(r2)
  815398:	1886983a 	sll	r3,r3,r2
  81539c:	e0bffa17 	ldw	r2,-24(fp)
  8153a0:	10c5883a 	add	r2,r2,r3
  8153a4:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  8153a8:	e0bffb17 	ldw	r2,-20(fp)
  8153ac:	10800e17 	ldw	r2,56(r2)
  8153b0:	10800058 	cmpnei	r2,r2,1
  8153b4:	1000081e 	bne	r2,zero,8153d8 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  8153b8:	e0bffb17 	ldw	r2,-20(fp)
  8153bc:	10800c17 	ldw	r2,48(r2)
  8153c0:	1007883a 	mov	r3,r2
  8153c4:	e0bffa17 	ldw	r2,-24(fp)
  8153c8:	1885883a 	add	r2,r3,r2
  8153cc:	e0fffc17 	ldw	r3,-16(fp)
  8153d0:	10c00025 	stbio	r3,0(r2)
  8153d4:	00001306 	br	815424 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  8153d8:	e0bffb17 	ldw	r2,-20(fp)
  8153dc:	10800e17 	ldw	r2,56(r2)
  8153e0:	10800098 	cmpnei	r2,r2,2
  8153e4:	1000081e 	bne	r2,zero,815408 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  8153e8:	e0bffb17 	ldw	r2,-20(fp)
  8153ec:	10800c17 	ldw	r2,48(r2)
  8153f0:	1007883a 	mov	r3,r2
  8153f4:	e0bffa17 	ldw	r2,-24(fp)
  8153f8:	1885883a 	add	r2,r3,r2
  8153fc:	e0fffc17 	ldw	r3,-16(fp)
  815400:	10c0002d 	sthio	r3,0(r2)
  815404:	00000706 	br	815424 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  815408:	e0bffb17 	ldw	r2,-20(fp)
  81540c:	10800c17 	ldw	r2,48(r2)
  815410:	1007883a 	mov	r3,r2
  815414:	e0bffa17 	ldw	r2,-24(fp)
  815418:	1885883a 	add	r2,r3,r2
  81541c:	e0fffc17 	ldw	r3,-16(fp)
  815420:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  815424:	e03fff15 	stw	zero,-4(fp)
  815428:	e0bfff17 	ldw	r2,-4(fp)
}
  81542c:	e037883a 	mov	sp,fp
  815430:	df000017 	ldw	fp,0(sp)
  815434:	dec00104 	addi	sp,sp,4
  815438:	f800283a 	ret

0081543c <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  81543c:	defffd04 	addi	sp,sp,-12
  815440:	df000215 	stw	fp,8(sp)
  815444:	df000204 	addi	fp,sp,8
  815448:	e13ffe15 	stw	r4,-8(fp)
  81544c:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  815450:	e0bffe17 	ldw	r2,-8(fp)
  815454:	10800a17 	ldw	r2,40(r2)
  815458:	10800104 	addi	r2,r2,4
  81545c:	e0ffff17 	ldw	r3,-4(fp)
  815460:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  815464:	e0bffe17 	ldw	r2,-8(fp)
  815468:	10800a17 	ldw	r2,40(r2)
  81546c:	10800104 	addi	r2,r2,4
  815470:	10800037 	ldwio	r2,0(r2)
  815474:	1007883a 	mov	r3,r2
  815478:	e0bffe17 	ldw	r2,-8(fp)
  81547c:	10c00c15 	stw	r3,48(r2)
	return 0;
  815480:	0005883a 	mov	r2,zero
}
  815484:	e037883a 	mov	sp,fp
  815488:	df000017 	ldw	fp,0(sp)
  81548c:	dec00104 	addi	sp,sp,4
  815490:	f800283a 	ret

00815494 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  815494:	defffe04 	addi	sp,sp,-8
  815498:	df000115 	stw	fp,4(sp)
  81549c:	df000104 	addi	fp,sp,4
  8154a0:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  8154a4:	e0bfff17 	ldw	r2,-4(fp)
  8154a8:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  8154ac:	e0bfff17 	ldw	r2,-4(fp)
  8154b0:	10800a17 	ldw	r2,40(r2)
  8154b4:	1007883a 	mov	r3,r2
  8154b8:	00800044 	movi	r2,1
  8154bc:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  8154c0:	e0bfff17 	ldw	r2,-4(fp)
  8154c4:	10c00b17 	ldw	r3,44(r2)
  8154c8:	e0bfff17 	ldw	r2,-4(fp)
  8154cc:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  8154d0:	e0bfff17 	ldw	r2,-4(fp)
  8154d4:	11000b15 	stw	r4,44(r2)
	return 0;
  8154d8:	0005883a 	mov	r2,zero
}
  8154dc:	e037883a 	mov	sp,fp
  8154e0:	df000017 	ldw	fp,0(sp)
  8154e4:	dec00104 	addi	sp,sp,4
  8154e8:	f800283a 	ret

008154ec <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  8154ec:	defffe04 	addi	sp,sp,-8
  8154f0:	df000115 	stw	fp,4(sp)
  8154f4:	df000104 	addi	fp,sp,4
  8154f8:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  8154fc:	e0bfff17 	ldw	r2,-4(fp)
  815500:	10800a17 	ldw	r2,40(r2)
  815504:	10800304 	addi	r2,r2,12
  815508:	10800037 	ldwio	r2,0(r2)
  81550c:	1080004c 	andi	r2,r2,1
}
  815510:	e037883a 	mov	sp,fp
  815514:	df000017 	ldw	fp,0(sp)
  815518:	dec00104 	addi	sp,sp,4
  81551c:	f800283a 	ret

00815520 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  815520:	defff604 	addi	sp,sp,-40
  815524:	df000915 	stw	fp,36(sp)
  815528:	df000904 	addi	fp,sp,36
  81552c:	e13ff715 	stw	r4,-36(fp)
  815530:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  815534:	e0bff817 	ldw	r2,-32(fp)
  815538:	10800058 	cmpnei	r2,r2,1
  81553c:	1000041e 	bne	r2,zero,815550 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  815540:	e0bff717 	ldw	r2,-36(fp)
  815544:	10800c17 	ldw	r2,48(r2)
  815548:	e0bfff15 	stw	r2,-4(fp)
  81554c:	00000306 	br	81555c <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  815550:	e0bff717 	ldw	r2,-36(fp)
  815554:	10800b17 	ldw	r2,44(r2)
  815558:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  81555c:	e0bff717 	ldw	r2,-36(fp)
  815560:	10800f17 	ldw	r2,60(r2)
  815564:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  815568:	e0bff717 	ldw	r2,-36(fp)
  81556c:	10800e17 	ldw	r2,56(r2)
  815570:	10800098 	cmpnei	r2,r2,2
  815574:	1000051e 	bne	r2,zero,81558c <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
  815578:	e0fffe17 	ldw	r3,-8(fp)
  81557c:	e0fffe17 	ldw	r3,-8(fp)
  815580:	18c5883a 	add	r2,r3,r3
  815584:	e0bffe15 	stw	r2,-8(fp)
  815588:	00000506 	br	8155a0 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
  81558c:	e13ffe17 	ldw	r4,-8(fp)
  815590:	e13ffe17 	ldw	r4,-8(fp)
  815594:	2105883a 	add	r2,r4,r4
  815598:	1085883a 	add	r2,r2,r2
  81559c:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  8155a0:	e0bff717 	ldw	r2,-36(fp)
  8155a4:	10801017 	ldw	r2,64(r2)
  8155a8:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  8155ac:	e0bff717 	ldw	r2,-36(fp)
  8155b0:	10800d17 	ldw	r2,52(r2)
  8155b4:	1004c03a 	cmpne	r2,r2,zero
  8155b8:	10001e1e 	bne	r2,zero,815634 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  8155bc:	e0bff717 	ldw	r2,-36(fp)
  8155c0:	10801317 	ldw	r2,76(r2)
  8155c4:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  8155c8:	e03ffb15 	stw	zero,-20(fp)
  8155cc:	00001506 	br	815624 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
  8155d0:	e03ffc15 	stw	zero,-16(fp)
  8155d4:	00000706 	br	8155f4 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
  8155d8:	e0ffff17 	ldw	r3,-4(fp)
  8155dc:	e0bffc17 	ldw	r2,-16(fp)
  8155e0:	1885883a 	add	r2,r3,r2
  8155e4:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  8155e8:	e0bffc17 	ldw	r2,-16(fp)
  8155ec:	10800104 	addi	r2,r2,4
  8155f0:	e0bffc15 	stw	r2,-16(fp)
  8155f4:	e0fffc17 	ldw	r3,-16(fp)
  8155f8:	e13ffe17 	ldw	r4,-8(fp)
  8155fc:	193ff636 	bltu	r3,r4,8155d8 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  815600:	e0fffa17 	ldw	r3,-24(fp)
  815604:	00800044 	movi	r2,1
  815608:	10c4983a 	sll	r2,r2,r3
  81560c:	e0ffff17 	ldw	r3,-4(fp)
  815610:	1887883a 	add	r3,r3,r2
  815614:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  815618:	e13ffb17 	ldw	r4,-20(fp)
  81561c:	21000044 	addi	r4,r4,1
  815620:	e13ffb15 	stw	r4,-20(fp)
  815624:	e0bffb17 	ldw	r2,-20(fp)
  815628:	e0fffd17 	ldw	r3,-12(fp)
  81562c:	10ffe836 	bltu	r2,r3,8155d0 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
  815630:	00001006 	br	815674 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  815634:	e13ffd17 	ldw	r4,-12(fp)
  815638:	e0bffe17 	ldw	r2,-8(fp)
  81563c:	2089383a 	mul	r4,r4,r2
  815640:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  815644:	e03ff915 	stw	zero,-28(fp)
  815648:	00000706 	br	815668 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
  81564c:	e0ffff17 	ldw	r3,-4(fp)
  815650:	e0bff917 	ldw	r2,-28(fp)
  815654:	1885883a 	add	r2,r3,r2
  815658:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  81565c:	e0fff917 	ldw	r3,-28(fp)
  815660:	18c00104 	addi	r3,r3,4
  815664:	e0fff915 	stw	r3,-28(fp)
  815668:	e0bff917 	ldw	r2,-28(fp)
  81566c:	e13ffd17 	ldw	r4,-12(fp)
  815670:	113ff636 	bltu	r2,r4,81564c <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  815674:	e037883a 	mov	sp,fp
  815678:	df000017 	ldw	fp,0(sp)
  81567c:	dec00104 	addi	sp,sp,4
  815680:	f800283a 	ret

00815684 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  815684:	deffed04 	addi	sp,sp,-76
  815688:	df001215 	stw	fp,72(sp)
  81568c:	df001204 	addi	fp,sp,72
  815690:	e13fee15 	stw	r4,-72(fp)
  815694:	e17fef15 	stw	r5,-68(fp)
  815698:	e1bff015 	stw	r6,-64(fp)
  81569c:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  8156a0:	e0bfee17 	ldw	r2,-72(fp)
  8156a4:	10800f17 	ldw	r2,60(r2)
  8156a8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  8156ac:	e0bfee17 	ldw	r2,-72(fp)
  8156b0:	10801017 	ldw	r2,64(r2)
  8156b4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  8156b8:	e0bfef17 	ldw	r2,-68(fp)
  8156bc:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  8156c0:	e0fff117 	ldw	r3,-60(fp)
  8156c4:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  8156c8:	e13ff017 	ldw	r4,-64(fp)
  8156cc:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  8156d0:	e0800117 	ldw	r2,4(fp)
  8156d4:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  8156d8:	e0c00217 	ldw	r3,8(fp)
  8156dc:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  8156e0:	e13ffa17 	ldw	r4,-24(fp)
  8156e4:	e0bffb17 	ldw	r2,-20(fp)
  8156e8:	2080062e 	bgeu	r4,r2,815704 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
  8156ec:	e0fffb17 	ldw	r3,-20(fp)
  8156f0:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  8156f4:	e13ffa17 	ldw	r4,-24(fp)
  8156f8:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  8156fc:	e0bffc17 	ldw	r2,-16(fp)
  815700:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  815704:	e0fff817 	ldw	r3,-32(fp)
  815708:	e13ff917 	ldw	r4,-28(fp)
  81570c:	1900062e 	bgeu	r3,r4,815728 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
  815710:	e0bff917 	ldw	r2,-28(fp)
  815714:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  815718:	e0fff817 	ldw	r3,-32(fp)
  81571c:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  815720:	e13ffc17 	ldw	r4,-16(fp)
  815724:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  815728:	e0bffb17 	ldw	r2,-20(fp)
  81572c:	e0fffe17 	ldw	r3,-8(fp)
  815730:	10c10d2e 	bgeu	r2,r3,815b68 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
  815734:	e13ff917 	ldw	r4,-28(fp)
  815738:	e0bffd17 	ldw	r2,-12(fp)
  81573c:	20800136 	bltu	r4,r2,815744 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  815740:	00010906 	br	815b68 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  815744:	e0fffa17 	ldw	r3,-24(fp)
  815748:	e13ffe17 	ldw	r4,-8(fp)
  81574c:	19000336 	bltu	r3,r4,81575c <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
  815750:	e0bffe17 	ldw	r2,-8(fp)
  815754:	10bfffc4 	addi	r2,r2,-1
  815758:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  81575c:	e0fff817 	ldw	r3,-32(fp)
  815760:	e13ffd17 	ldw	r4,-12(fp)
  815764:	19000336 	bltu	r3,r4,815774 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
  815768:	e0bffd17 	ldw	r2,-12(fp)
  81576c:	10bfffc4 	addi	r2,r2,-1
  815770:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  815774:	e0800317 	ldw	r2,12(fp)
  815778:	10800058 	cmpnei	r2,r2,1
  81577c:	1000041e 	bne	r2,zero,815790 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
  815780:	e0bfee17 	ldw	r2,-72(fp)
  815784:	10800c17 	ldw	r2,48(r2)
  815788:	e0bfff15 	stw	r2,-4(fp)
  81578c:	00000306 	br	81579c <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
  815790:	e0bfee17 	ldw	r2,-72(fp)
  815794:	10800b17 	ldw	r2,44(r2)
  815798:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  81579c:	e0bfee17 	ldw	r2,-72(fp)
  8157a0:	10800d17 	ldw	r2,52(r2)
  8157a4:	1004c03a 	cmpne	r2,r2,zero
  8157a8:	1000721e 	bne	r2,zero,815974 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  8157ac:	e0bfee17 	ldw	r2,-72(fp)
  8157b0:	10801317 	ldw	r2,76(r2)
  8157b4:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  8157b8:	e0bff417 	ldw	r2,-48(fp)
  8157bc:	e0fff917 	ldw	r3,-28(fp)
  8157c0:	1884983a 	sll	r2,r3,r2
  8157c4:	e13fff17 	ldw	r4,-4(fp)
  8157c8:	2089883a 	add	r4,r4,r2
  8157cc:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  8157d0:	e0bfee17 	ldw	r2,-72(fp)
  8157d4:	10800e17 	ldw	r2,56(r2)
  8157d8:	10800058 	cmpnei	r2,r2,1
  8157dc:	10001e1e 	bne	r2,zero,815858 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
  8157e0:	e0bff917 	ldw	r2,-28(fp)
  8157e4:	e0bff515 	stw	r2,-44(fp)
  8157e8:	00001706 	br	815848 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
  8157ec:	e0fffb17 	ldw	r3,-20(fp)
  8157f0:	e0fff615 	stw	r3,-40(fp)
  8157f4:	00000806 	br	815818 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
  8157f8:	e0ffff17 	ldw	r3,-4(fp)
  8157fc:	e0bff617 	ldw	r2,-40(fp)
  815800:	1885883a 	add	r2,r3,r2
  815804:	e0fff717 	ldw	r3,-36(fp)
  815808:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  81580c:	e13ff617 	ldw	r4,-40(fp)
  815810:	21000044 	addi	r4,r4,1
  815814:	e13ff615 	stw	r4,-40(fp)
  815818:	e0bffa17 	ldw	r2,-24(fp)
  81581c:	e0fff617 	ldw	r3,-40(fp)
  815820:	10fff52e 	bgeu	r2,r3,8157f8 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  815824:	e0fff417 	ldw	r3,-48(fp)
  815828:	00800044 	movi	r2,1
  81582c:	10c4983a 	sll	r2,r2,r3
  815830:	e13fff17 	ldw	r4,-4(fp)
  815834:	2089883a 	add	r4,r4,r2
  815838:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  81583c:	e0bff517 	ldw	r2,-44(fp)
  815840:	10800044 	addi	r2,r2,1
  815844:	e0bff515 	stw	r2,-44(fp)
  815848:	e0fff817 	ldw	r3,-32(fp)
  81584c:	e13ff517 	ldw	r4,-44(fp)
  815850:	193fe62e 	bgeu	r3,r4,8157ec <alt_up_pixel_buffer_dma_draw_box+0x168>
  815854:	0000c406 	br	815b68 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  815858:	e0bfee17 	ldw	r2,-72(fp)
  81585c:	10800e17 	ldw	r2,56(r2)
  815860:	10800098 	cmpnei	r2,r2,2
  815864:	1000211e 	bne	r2,zero,8158ec <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
  815868:	e0bff917 	ldw	r2,-28(fp)
  81586c:	e0bff515 	stw	r2,-44(fp)
  815870:	00001a06 	br	8158dc <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
  815874:	e0fffb17 	ldw	r3,-20(fp)
  815878:	e0fff615 	stw	r3,-40(fp)
  81587c:	00000b06 	br	8158ac <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  815880:	e13ff617 	ldw	r4,-40(fp)
  815884:	e13ff617 	ldw	r4,-40(fp)
  815888:	2105883a 	add	r2,r4,r4
  81588c:	1007883a 	mov	r3,r2
  815890:	e0bfff17 	ldw	r2,-4(fp)
  815894:	1885883a 	add	r2,r3,r2
  815898:	e0fff717 	ldw	r3,-36(fp)
  81589c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  8158a0:	e0bff617 	ldw	r2,-40(fp)
  8158a4:	10800044 	addi	r2,r2,1
  8158a8:	e0bff615 	stw	r2,-40(fp)
  8158ac:	e0fffa17 	ldw	r3,-24(fp)
  8158b0:	e13ff617 	ldw	r4,-40(fp)
  8158b4:	193ff22e 	bgeu	r3,r4,815880 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  8158b8:	e0fff417 	ldw	r3,-48(fp)
  8158bc:	00800044 	movi	r2,1
  8158c0:	10c4983a 	sll	r2,r2,r3
  8158c4:	e0ffff17 	ldw	r3,-4(fp)
  8158c8:	1887883a 	add	r3,r3,r2
  8158cc:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  8158d0:	e13ff517 	ldw	r4,-44(fp)
  8158d4:	21000044 	addi	r4,r4,1
  8158d8:	e13ff515 	stw	r4,-44(fp)
  8158dc:	e0bff817 	ldw	r2,-32(fp)
  8158e0:	e0fff517 	ldw	r3,-44(fp)
  8158e4:	10ffe32e 	bgeu	r2,r3,815874 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
  8158e8:	00009f06 	br	815b68 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  8158ec:	e13ff917 	ldw	r4,-28(fp)
  8158f0:	e13ff515 	stw	r4,-44(fp)
  8158f4:	00001b06 	br	815964 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
  8158f8:	e0bffb17 	ldw	r2,-20(fp)
  8158fc:	e0bff615 	stw	r2,-40(fp)
  815900:	00000c06 	br	815934 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  815904:	e0fff617 	ldw	r3,-40(fp)
  815908:	e0fff617 	ldw	r3,-40(fp)
  81590c:	18c5883a 	add	r2,r3,r3
  815910:	1085883a 	add	r2,r2,r2
  815914:	1007883a 	mov	r3,r2
  815918:	e0bfff17 	ldw	r2,-4(fp)
  81591c:	1885883a 	add	r2,r3,r2
  815920:	e0fff717 	ldw	r3,-36(fp)
  815924:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  815928:	e13ff617 	ldw	r4,-40(fp)
  81592c:	21000044 	addi	r4,r4,1
  815930:	e13ff615 	stw	r4,-40(fp)
  815934:	e0bffa17 	ldw	r2,-24(fp)
  815938:	e0fff617 	ldw	r3,-40(fp)
  81593c:	10fff12e 	bgeu	r2,r3,815904 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  815940:	e0fff417 	ldw	r3,-48(fp)
  815944:	00800044 	movi	r2,1
  815948:	10c4983a 	sll	r2,r2,r3
  81594c:	e13fff17 	ldw	r4,-4(fp)
  815950:	2089883a 	add	r4,r4,r2
  815954:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  815958:	e0bff517 	ldw	r2,-44(fp)
  81595c:	10800044 	addi	r2,r2,1
  815960:	e0bff515 	stw	r2,-44(fp)
  815964:	e0fff817 	ldw	r3,-32(fp)
  815968:	e13ff517 	ldw	r4,-44(fp)
  81596c:	193fe22e 	bgeu	r3,r4,8158f8 <alt_up_pixel_buffer_dma_draw_box+0x274>
  815970:	00007d06 	br	815b68 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  815974:	e0bfee17 	ldw	r2,-72(fp)
  815978:	10800e17 	ldw	r2,56(r2)
  81597c:	10800058 	cmpnei	r2,r2,1
  815980:	1000221e 	bne	r2,zero,815a0c <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
  815984:	e0fff917 	ldw	r3,-28(fp)
  815988:	e13ffe17 	ldw	r4,-8(fp)
  81598c:	1905383a 	mul	r2,r3,r4
  815990:	e0ffff17 	ldw	r3,-4(fp)
  815994:	1887883a 	add	r3,r3,r2
  815998:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  81599c:	e13ff917 	ldw	r4,-28(fp)
  8159a0:	e13ff215 	stw	r4,-56(fp)
  8159a4:	00001506 	br	8159fc <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
  8159a8:	e0bffb17 	ldw	r2,-20(fp)
  8159ac:	e0bff315 	stw	r2,-52(fp)
  8159b0:	00000806 	br	8159d4 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
  8159b4:	e0ffff17 	ldw	r3,-4(fp)
  8159b8:	e0bff317 	ldw	r2,-52(fp)
  8159bc:	1885883a 	add	r2,r3,r2
  8159c0:	e0fff717 	ldw	r3,-36(fp)
  8159c4:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  8159c8:	e0fff317 	ldw	r3,-52(fp)
  8159cc:	18c00044 	addi	r3,r3,1
  8159d0:	e0fff315 	stw	r3,-52(fp)
  8159d4:	e13ffa17 	ldw	r4,-24(fp)
  8159d8:	e0bff317 	ldw	r2,-52(fp)
  8159dc:	20bff52e 	bgeu	r4,r2,8159b4 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  8159e0:	e0ffff17 	ldw	r3,-4(fp)
  8159e4:	e13ffe17 	ldw	r4,-8(fp)
  8159e8:	1907883a 	add	r3,r3,r4
  8159ec:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  8159f0:	e0bff217 	ldw	r2,-56(fp)
  8159f4:	10800044 	addi	r2,r2,1
  8159f8:	e0bff215 	stw	r2,-56(fp)
  8159fc:	e0fff817 	ldw	r3,-32(fp)
  815a00:	e13ff217 	ldw	r4,-56(fp)
  815a04:	193fe82e 	bgeu	r3,r4,8159a8 <alt_up_pixel_buffer_dma_draw_box+0x324>
  815a08:	00005706 	br	815b68 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  815a0c:	e0bfee17 	ldw	r2,-72(fp)
  815a10:	10800e17 	ldw	r2,56(r2)
  815a14:	10800098 	cmpnei	r2,r2,2
  815a18:	1000291e 	bne	r2,zero,815ac0 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
  815a1c:	e0fffe17 	ldw	r3,-8(fp)
  815a20:	e0fffe17 	ldw	r3,-8(fp)
  815a24:	18c5883a 	add	r2,r3,r3
  815a28:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  815a2c:	e13ff917 	ldw	r4,-28(fp)
  815a30:	e0fffe17 	ldw	r3,-8(fp)
  815a34:	20c5383a 	mul	r2,r4,r3
  815a38:	e13fff17 	ldw	r4,-4(fp)
  815a3c:	2089883a 	add	r4,r4,r2
  815a40:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  815a44:	e0bff917 	ldw	r2,-28(fp)
  815a48:	e0bff215 	stw	r2,-56(fp)
  815a4c:	00001806 	br	815ab0 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
  815a50:	e0fffb17 	ldw	r3,-20(fp)
  815a54:	e0fff315 	stw	r3,-52(fp)
  815a58:	00000b06 	br	815a88 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  815a5c:	e13ff317 	ldw	r4,-52(fp)
  815a60:	e13ff317 	ldw	r4,-52(fp)
  815a64:	2105883a 	add	r2,r4,r4
  815a68:	1007883a 	mov	r3,r2
  815a6c:	e0bfff17 	ldw	r2,-4(fp)
  815a70:	1885883a 	add	r2,r3,r2
  815a74:	e0fff717 	ldw	r3,-36(fp)
  815a78:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  815a7c:	e0bff317 	ldw	r2,-52(fp)
  815a80:	10800044 	addi	r2,r2,1
  815a84:	e0bff315 	stw	r2,-52(fp)
  815a88:	e0fffa17 	ldw	r3,-24(fp)
  815a8c:	e13ff317 	ldw	r4,-52(fp)
  815a90:	193ff22e 	bgeu	r3,r4,815a5c <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  815a94:	e0bfff17 	ldw	r2,-4(fp)
  815a98:	e0fffe17 	ldw	r3,-8(fp)
  815a9c:	10c5883a 	add	r2,r2,r3
  815aa0:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  815aa4:	e13ff217 	ldw	r4,-56(fp)
  815aa8:	21000044 	addi	r4,r4,1
  815aac:	e13ff215 	stw	r4,-56(fp)
  815ab0:	e0bff817 	ldw	r2,-32(fp)
  815ab4:	e0fff217 	ldw	r3,-56(fp)
  815ab8:	10ffe52e 	bgeu	r2,r3,815a50 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
  815abc:	00002a06 	br	815b68 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  815ac0:	e13ffe17 	ldw	r4,-8(fp)
  815ac4:	e13ffe17 	ldw	r4,-8(fp)
  815ac8:	2105883a 	add	r2,r4,r4
  815acc:	1085883a 	add	r2,r2,r2
  815ad0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  815ad4:	e0fff917 	ldw	r3,-28(fp)
  815ad8:	e13ffe17 	ldw	r4,-8(fp)
  815adc:	1905383a 	mul	r2,r3,r4
  815ae0:	e0ffff17 	ldw	r3,-4(fp)
  815ae4:	1887883a 	add	r3,r3,r2
  815ae8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  815aec:	e13ff917 	ldw	r4,-28(fp)
  815af0:	e13ff215 	stw	r4,-56(fp)
  815af4:	00001906 	br	815b5c <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
  815af8:	e0bffb17 	ldw	r2,-20(fp)
  815afc:	e0bff315 	stw	r2,-52(fp)
  815b00:	00000c06 	br	815b34 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  815b04:	e0fff317 	ldw	r3,-52(fp)
  815b08:	e0fff317 	ldw	r3,-52(fp)
  815b0c:	18c5883a 	add	r2,r3,r3
  815b10:	1085883a 	add	r2,r2,r2
  815b14:	1007883a 	mov	r3,r2
  815b18:	e0bfff17 	ldw	r2,-4(fp)
  815b1c:	1885883a 	add	r2,r3,r2
  815b20:	e0fff717 	ldw	r3,-36(fp)
  815b24:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  815b28:	e13ff317 	ldw	r4,-52(fp)
  815b2c:	21000044 	addi	r4,r4,1
  815b30:	e13ff315 	stw	r4,-52(fp)
  815b34:	e0bffa17 	ldw	r2,-24(fp)
  815b38:	e0fff317 	ldw	r3,-52(fp)
  815b3c:	10fff12e 	bgeu	r2,r3,815b04 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  815b40:	e13fff17 	ldw	r4,-4(fp)
  815b44:	e0bffe17 	ldw	r2,-8(fp)
  815b48:	2089883a 	add	r4,r4,r2
  815b4c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  815b50:	e0fff217 	ldw	r3,-56(fp)
  815b54:	18c00044 	addi	r3,r3,1
  815b58:	e0fff215 	stw	r3,-56(fp)
  815b5c:	e13ff817 	ldw	r4,-32(fp)
  815b60:	e0bff217 	ldw	r2,-56(fp)
  815b64:	20bfe42e 	bgeu	r4,r2,815af8 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  815b68:	e037883a 	mov	sp,fp
  815b6c:	df000017 	ldw	fp,0(sp)
  815b70:	dec00104 	addi	sp,sp,4
  815b74:	f800283a 	ret

00815b78 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  815b78:	defff204 	addi	sp,sp,-56
  815b7c:	df000d15 	stw	fp,52(sp)
  815b80:	df000d04 	addi	fp,sp,52
  815b84:	e13ff315 	stw	r4,-52(fp)
  815b88:	e17ff415 	stw	r5,-48(fp)
  815b8c:	e1bff515 	stw	r6,-44(fp)
  815b90:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  815b94:	e0bff317 	ldw	r2,-52(fp)
  815b98:	10800f17 	ldw	r2,60(r2)
  815b9c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  815ba0:	e0bff317 	ldw	r2,-52(fp)
  815ba4:	10801017 	ldw	r2,64(r2)
  815ba8:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  815bac:	e0bff417 	ldw	r2,-48(fp)
  815bb0:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  815bb4:	e0fff517 	ldw	r3,-44(fp)
  815bb8:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  815bbc:	e13ff617 	ldw	r4,-40(fp)
  815bc0:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  815bc4:	e0800117 	ldw	r2,4(fp)
  815bc8:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  815bcc:	e0fffb17 	ldw	r3,-20(fp)
  815bd0:	e13ffc17 	ldw	r4,-16(fp)
  815bd4:	1900042e 	bgeu	r3,r4,815be8 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
  815bd8:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  815bdc:	e0fffb17 	ldw	r3,-20(fp)
  815be0:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  815be4:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  815be8:	e13ffc17 	ldw	r4,-16(fp)
  815bec:	e0bffe17 	ldw	r2,-8(fp)
  815bf0:	2080b12e 	bgeu	r4,r2,815eb8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
  815bf4:	e0fffa17 	ldw	r3,-24(fp)
  815bf8:	e13ffd17 	ldw	r4,-12(fp)
  815bfc:	19000136 	bltu	r3,r4,815c04 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  815c00:	0000ad06 	br	815eb8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  815c04:	e0bffb17 	ldw	r2,-20(fp)
  815c08:	e0fffe17 	ldw	r3,-8(fp)
  815c0c:	10c00336 	bltu	r2,r3,815c1c <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
  815c10:	e13ffe17 	ldw	r4,-8(fp)
  815c14:	213fffc4 	addi	r4,r4,-1
  815c18:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  815c1c:	e0800217 	ldw	r2,8(fp)
  815c20:	10800058 	cmpnei	r2,r2,1
  815c24:	1000041e 	bne	r2,zero,815c38 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  815c28:	e0bff317 	ldw	r2,-52(fp)
  815c2c:	10800c17 	ldw	r2,48(r2)
  815c30:	e0bfff15 	stw	r2,-4(fp)
  815c34:	00000306 	br	815c44 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  815c38:	e0bff317 	ldw	r2,-52(fp)
  815c3c:	10800b17 	ldw	r2,44(r2)
  815c40:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  815c44:	e0bff317 	ldw	r2,-52(fp)
  815c48:	10800d17 	ldw	r2,52(r2)
  815c4c:	1004c03a 	cmpne	r2,r2,zero
  815c50:	1000431e 	bne	r2,zero,815d60 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  815c54:	e0bff317 	ldw	r2,-52(fp)
  815c58:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  815c5c:	e0fffa17 	ldw	r3,-24(fp)
  815c60:	1884983a 	sll	r2,r3,r2
  815c64:	e13fff17 	ldw	r4,-4(fp)
  815c68:	2089883a 	add	r4,r4,r2
  815c6c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  815c70:	e0bff317 	ldw	r2,-52(fp)
  815c74:	10800e17 	ldw	r2,56(r2)
  815c78:	10800058 	cmpnei	r2,r2,1
  815c7c:	10000f1e 	bne	r2,zero,815cbc <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
  815c80:	e0bffc17 	ldw	r2,-16(fp)
  815c84:	e0bff815 	stw	r2,-32(fp)
  815c88:	00000806 	br	815cac <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
  815c8c:	e0ffff17 	ldw	r3,-4(fp)
  815c90:	e0bff817 	ldw	r2,-32(fp)
  815c94:	1885883a 	add	r2,r3,r2
  815c98:	e0fff917 	ldw	r3,-28(fp)
  815c9c:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  815ca0:	e0fff817 	ldw	r3,-32(fp)
  815ca4:	18c00044 	addi	r3,r3,1
  815ca8:	e0fff815 	stw	r3,-32(fp)
  815cac:	e13ffb17 	ldw	r4,-20(fp)
  815cb0:	e0bff817 	ldw	r2,-32(fp)
  815cb4:	20bff52e 	bgeu	r4,r2,815c8c <alt_up_pixel_buffer_dma_draw_hline+0x114>
  815cb8:	00007f06 	br	815eb8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  815cbc:	e0bff317 	ldw	r2,-52(fp)
  815cc0:	10800e17 	ldw	r2,56(r2)
  815cc4:	10800098 	cmpnei	r2,r2,2
  815cc8:	1000121e 	bne	r2,zero,815d14 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
  815ccc:	e0fffc17 	ldw	r3,-16(fp)
  815cd0:	e0fff815 	stw	r3,-32(fp)
  815cd4:	00000b06 	br	815d04 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  815cd8:	e13ff817 	ldw	r4,-32(fp)
  815cdc:	e13ff817 	ldw	r4,-32(fp)
  815ce0:	2105883a 	add	r2,r4,r4
  815ce4:	1007883a 	mov	r3,r2
  815ce8:	e0bfff17 	ldw	r2,-4(fp)
  815cec:	1885883a 	add	r2,r3,r2
  815cf0:	e0fff917 	ldw	r3,-28(fp)
  815cf4:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  815cf8:	e0bff817 	ldw	r2,-32(fp)
  815cfc:	10800044 	addi	r2,r2,1
  815d00:	e0bff815 	stw	r2,-32(fp)
  815d04:	e0fffb17 	ldw	r3,-20(fp)
  815d08:	e13ff817 	ldw	r4,-32(fp)
  815d0c:	193ff22e 	bgeu	r3,r4,815cd8 <alt_up_pixel_buffer_dma_draw_hline+0x160>
  815d10:	00006906 	br	815eb8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  815d14:	e0bffc17 	ldw	r2,-16(fp)
  815d18:	e0bff815 	stw	r2,-32(fp)
  815d1c:	00000c06 	br	815d50 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  815d20:	e0fff817 	ldw	r3,-32(fp)
  815d24:	e0fff817 	ldw	r3,-32(fp)
  815d28:	18c5883a 	add	r2,r3,r3
  815d2c:	1085883a 	add	r2,r2,r2
  815d30:	1007883a 	mov	r3,r2
  815d34:	e0bfff17 	ldw	r2,-4(fp)
  815d38:	1885883a 	add	r2,r3,r2
  815d3c:	e0fff917 	ldw	r3,-28(fp)
  815d40:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  815d44:	e13ff817 	ldw	r4,-32(fp)
  815d48:	21000044 	addi	r4,r4,1
  815d4c:	e13ff815 	stw	r4,-32(fp)
  815d50:	e0bffb17 	ldw	r2,-20(fp)
  815d54:	e0fff817 	ldw	r3,-32(fp)
  815d58:	10fff12e 	bgeu	r2,r3,815d20 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
  815d5c:	00005606 	br	815eb8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  815d60:	e0bff317 	ldw	r2,-52(fp)
  815d64:	10800e17 	ldw	r2,56(r2)
  815d68:	10800058 	cmpnei	r2,r2,1
  815d6c:	1000151e 	bne	r2,zero,815dc4 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
  815d70:	e13ffa17 	ldw	r4,-24(fp)
  815d74:	e0fffe17 	ldw	r3,-8(fp)
  815d78:	20c5383a 	mul	r2,r4,r3
  815d7c:	e13fff17 	ldw	r4,-4(fp)
  815d80:	2089883a 	add	r4,r4,r2
  815d84:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  815d88:	e0bffc17 	ldw	r2,-16(fp)
  815d8c:	e0bff715 	stw	r2,-36(fp)
  815d90:	00000806 	br	815db4 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  815d94:	e0ffff17 	ldw	r3,-4(fp)
  815d98:	e0bff717 	ldw	r2,-36(fp)
  815d9c:	1885883a 	add	r2,r3,r2
  815da0:	e0fff917 	ldw	r3,-28(fp)
  815da4:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  815da8:	e0fff717 	ldw	r3,-36(fp)
  815dac:	18c00044 	addi	r3,r3,1
  815db0:	e0fff715 	stw	r3,-36(fp)
  815db4:	e13ffb17 	ldw	r4,-20(fp)
  815db8:	e0bff717 	ldw	r2,-36(fp)
  815dbc:	20bff52e 	bgeu	r4,r2,815d94 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
  815dc0:	00003d06 	br	815eb8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  815dc4:	e0bff317 	ldw	r2,-52(fp)
  815dc8:	10800e17 	ldw	r2,56(r2)
  815dcc:	10800098 	cmpnei	r2,r2,2
  815dd0:	10001c1e 	bne	r2,zero,815e44 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
  815dd4:	e0fffe17 	ldw	r3,-8(fp)
  815dd8:	e0fffe17 	ldw	r3,-8(fp)
  815ddc:	18c5883a 	add	r2,r3,r3
  815de0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  815de4:	e13ffa17 	ldw	r4,-24(fp)
  815de8:	e0fffe17 	ldw	r3,-8(fp)
  815dec:	20c5383a 	mul	r2,r4,r3
  815df0:	e13fff17 	ldw	r4,-4(fp)
  815df4:	2089883a 	add	r4,r4,r2
  815df8:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  815dfc:	e0bffc17 	ldw	r2,-16(fp)
  815e00:	e0bff715 	stw	r2,-36(fp)
  815e04:	00000b06 	br	815e34 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  815e08:	e0fff717 	ldw	r3,-36(fp)
  815e0c:	e0fff717 	ldw	r3,-36(fp)
  815e10:	18c5883a 	add	r2,r3,r3
  815e14:	1007883a 	mov	r3,r2
  815e18:	e0bfff17 	ldw	r2,-4(fp)
  815e1c:	1885883a 	add	r2,r3,r2
  815e20:	e0fff917 	ldw	r3,-28(fp)
  815e24:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  815e28:	e13ff717 	ldw	r4,-36(fp)
  815e2c:	21000044 	addi	r4,r4,1
  815e30:	e13ff715 	stw	r4,-36(fp)
  815e34:	e0bffb17 	ldw	r2,-20(fp)
  815e38:	e0fff717 	ldw	r3,-36(fp)
  815e3c:	10fff22e 	bgeu	r2,r3,815e08 <alt_up_pixel_buffer_dma_draw_hline+0x290>
  815e40:	00001d06 	br	815eb8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  815e44:	e13ffe17 	ldw	r4,-8(fp)
  815e48:	e13ffe17 	ldw	r4,-8(fp)
  815e4c:	2105883a 	add	r2,r4,r4
  815e50:	1085883a 	add	r2,r2,r2
  815e54:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  815e58:	e0fffa17 	ldw	r3,-24(fp)
  815e5c:	e13ffe17 	ldw	r4,-8(fp)
  815e60:	1905383a 	mul	r2,r3,r4
  815e64:	e0ffff17 	ldw	r3,-4(fp)
  815e68:	1887883a 	add	r3,r3,r2
  815e6c:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  815e70:	e13ffc17 	ldw	r4,-16(fp)
  815e74:	e13ff715 	stw	r4,-36(fp)
  815e78:	00000c06 	br	815eac <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  815e7c:	e0fff717 	ldw	r3,-36(fp)
  815e80:	e0fff717 	ldw	r3,-36(fp)
  815e84:	18c5883a 	add	r2,r3,r3
  815e88:	1085883a 	add	r2,r2,r2
  815e8c:	1007883a 	mov	r3,r2
  815e90:	e0bfff17 	ldw	r2,-4(fp)
  815e94:	1885883a 	add	r2,r3,r2
  815e98:	e0fff917 	ldw	r3,-28(fp)
  815e9c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  815ea0:	e13ff717 	ldw	r4,-36(fp)
  815ea4:	21000044 	addi	r4,r4,1
  815ea8:	e13ff715 	stw	r4,-36(fp)
  815eac:	e0bffb17 	ldw	r2,-20(fp)
  815eb0:	e0fff717 	ldw	r3,-36(fp)
  815eb4:	10fff12e 	bgeu	r2,r3,815e7c <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  815eb8:	e037883a 	mov	sp,fp
  815ebc:	df000017 	ldw	fp,0(sp)
  815ec0:	dec00104 	addi	sp,sp,4
  815ec4:	f800283a 	ret

00815ec8 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  815ec8:	defff104 	addi	sp,sp,-60
  815ecc:	df000e15 	stw	fp,56(sp)
  815ed0:	df000e04 	addi	fp,sp,56
  815ed4:	e13ff215 	stw	r4,-56(fp)
  815ed8:	e17ff315 	stw	r5,-52(fp)
  815edc:	e1bff415 	stw	r6,-48(fp)
  815ee0:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  815ee4:	e0bff217 	ldw	r2,-56(fp)
  815ee8:	10800f17 	ldw	r2,60(r2)
  815eec:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  815ef0:	e0bff217 	ldw	r2,-56(fp)
  815ef4:	10801017 	ldw	r2,64(r2)
  815ef8:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  815efc:	e0bff317 	ldw	r2,-52(fp)
  815f00:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  815f04:	e0fff417 	ldw	r3,-48(fp)
  815f08:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  815f0c:	e13ff517 	ldw	r4,-44(fp)
  815f10:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  815f14:	e0800117 	ldw	r2,4(fp)
  815f18:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  815f1c:	e0fffa17 	ldw	r3,-24(fp)
  815f20:	e13ffb17 	ldw	r4,-20(fp)
  815f24:	1900042e 	bgeu	r3,r4,815f38 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
  815f28:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  815f2c:	e0fffa17 	ldw	r3,-24(fp)
  815f30:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  815f34:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  815f38:	e13ffc17 	ldw	r4,-16(fp)
  815f3c:	e0bffe17 	ldw	r2,-8(fp)
  815f40:	2080d12e 	bgeu	r4,r2,816288 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
  815f44:	e0fffb17 	ldw	r3,-20(fp)
  815f48:	e13ffd17 	ldw	r4,-12(fp)
  815f4c:	19000136 	bltu	r3,r4,815f54 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  815f50:	0000cd06 	br	816288 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  815f54:	e0bffa17 	ldw	r2,-24(fp)
  815f58:	e0fffd17 	ldw	r3,-12(fp)
  815f5c:	10c00336 	bltu	r2,r3,815f6c <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
  815f60:	e13ffd17 	ldw	r4,-12(fp)
  815f64:	213fffc4 	addi	r4,r4,-1
  815f68:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  815f6c:	e0800217 	ldw	r2,8(fp)
  815f70:	10800058 	cmpnei	r2,r2,1
  815f74:	1000041e 	bne	r2,zero,815f88 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  815f78:	e0bff217 	ldw	r2,-56(fp)
  815f7c:	10800c17 	ldw	r2,48(r2)
  815f80:	e0bfff15 	stw	r2,-4(fp)
  815f84:	00000306 	br	815f94 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  815f88:	e0bff217 	ldw	r2,-56(fp)
  815f8c:	10800b17 	ldw	r2,44(r2)
  815f90:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  815f94:	e0bff217 	ldw	r2,-56(fp)
  815f98:	10800d17 	ldw	r2,52(r2)
  815f9c:	1004c03a 	cmpne	r2,r2,zero
  815fa0:	1000571e 	bne	r2,zero,816100 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  815fa4:	e0bff217 	ldw	r2,-56(fp)
  815fa8:	10801317 	ldw	r2,76(r2)
  815fac:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  815fb0:	e0bff717 	ldw	r2,-36(fp)
  815fb4:	e0fffb17 	ldw	r3,-20(fp)
  815fb8:	1884983a 	sll	r2,r3,r2
  815fbc:	e13fff17 	ldw	r4,-4(fp)
  815fc0:	2089883a 	add	r4,r4,r2
  815fc4:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  815fc8:	e0bff217 	ldw	r2,-56(fp)
  815fcc:	10800e17 	ldw	r2,56(r2)
  815fd0:	10800058 	cmpnei	r2,r2,1
  815fd4:	1000151e 	bne	r2,zero,81602c <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
  815fd8:	e0bffb17 	ldw	r2,-20(fp)
  815fdc:	e0bff815 	stw	r2,-32(fp)
  815fe0:	00000e06 	br	81601c <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  815fe4:	e0ffff17 	ldw	r3,-4(fp)
  815fe8:	e0bffc17 	ldw	r2,-16(fp)
  815fec:	1885883a 	add	r2,r3,r2
  815ff0:	e0fff917 	ldw	r3,-28(fp)
  815ff4:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  815ff8:	e0fff717 	ldw	r3,-36(fp)
  815ffc:	00800044 	movi	r2,1
  816000:	10c4983a 	sll	r2,r2,r3
  816004:	e0ffff17 	ldw	r3,-4(fp)
  816008:	1887883a 	add	r3,r3,r2
  81600c:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  816010:	e13ff817 	ldw	r4,-32(fp)
  816014:	21000044 	addi	r4,r4,1
  816018:	e13ff815 	stw	r4,-32(fp)
  81601c:	e0bffa17 	ldw	r2,-24(fp)
  816020:	e0fff817 	ldw	r3,-32(fp)
  816024:	10ffef2e 	bgeu	r2,r3,815fe4 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
  816028:	00009706 	br	816288 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  81602c:	e0bff217 	ldw	r2,-56(fp)
  816030:	10800e17 	ldw	r2,56(r2)
  816034:	10800098 	cmpnei	r2,r2,2
  816038:	1000181e 	bne	r2,zero,81609c <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
  81603c:	e13ffb17 	ldw	r4,-20(fp)
  816040:	e13ff815 	stw	r4,-32(fp)
  816044:	00001106 	br	81608c <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  816048:	e0fffc17 	ldw	r3,-16(fp)
  81604c:	e0fffc17 	ldw	r3,-16(fp)
  816050:	18c5883a 	add	r2,r3,r3
  816054:	1007883a 	mov	r3,r2
  816058:	e0bfff17 	ldw	r2,-4(fp)
  81605c:	1885883a 	add	r2,r3,r2
  816060:	e0fff917 	ldw	r3,-28(fp)
  816064:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  816068:	e0fff717 	ldw	r3,-36(fp)
  81606c:	00800044 	movi	r2,1
  816070:	10c4983a 	sll	r2,r2,r3
  816074:	e13fff17 	ldw	r4,-4(fp)
  816078:	2089883a 	add	r4,r4,r2
  81607c:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  816080:	e0bff817 	ldw	r2,-32(fp)
  816084:	10800044 	addi	r2,r2,1
  816088:	e0bff815 	stw	r2,-32(fp)
  81608c:	e0fffa17 	ldw	r3,-24(fp)
  816090:	e13ff817 	ldw	r4,-32(fp)
  816094:	193fec2e 	bgeu	r3,r4,816048 <alt_up_pixel_buffer_dma_draw_vline+0x180>
  816098:	00007b06 	br	816288 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  81609c:	e0bffb17 	ldw	r2,-20(fp)
  8160a0:	e0bff815 	stw	r2,-32(fp)
  8160a4:	00001206 	br	8160f0 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  8160a8:	e0fffc17 	ldw	r3,-16(fp)
  8160ac:	e0fffc17 	ldw	r3,-16(fp)
  8160b0:	18c5883a 	add	r2,r3,r3
  8160b4:	1085883a 	add	r2,r2,r2
  8160b8:	1007883a 	mov	r3,r2
  8160bc:	e0bfff17 	ldw	r2,-4(fp)
  8160c0:	1885883a 	add	r2,r3,r2
  8160c4:	e0fff917 	ldw	r3,-28(fp)
  8160c8:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  8160cc:	e0fff717 	ldw	r3,-36(fp)
  8160d0:	00800044 	movi	r2,1
  8160d4:	10c4983a 	sll	r2,r2,r3
  8160d8:	e13fff17 	ldw	r4,-4(fp)
  8160dc:	2089883a 	add	r4,r4,r2
  8160e0:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  8160e4:	e0bff817 	ldw	r2,-32(fp)
  8160e8:	10800044 	addi	r2,r2,1
  8160ec:	e0bff815 	stw	r2,-32(fp)
  8160f0:	e0fffa17 	ldw	r3,-24(fp)
  8160f4:	e13ff817 	ldw	r4,-32(fp)
  8160f8:	193feb2e 	bgeu	r3,r4,8160a8 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
  8160fc:	00006206 	br	816288 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  816100:	e0bff217 	ldw	r2,-56(fp)
  816104:	10800e17 	ldw	r2,56(r2)
  816108:	10800058 	cmpnei	r2,r2,1
  81610c:	1000191e 	bne	r2,zero,816174 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
  816110:	e0fffb17 	ldw	r3,-20(fp)
  816114:	e13ffe17 	ldw	r4,-8(fp)
  816118:	1905383a 	mul	r2,r3,r4
  81611c:	e0ffff17 	ldw	r3,-4(fp)
  816120:	1887883a 	add	r3,r3,r2
  816124:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  816128:	e13ffb17 	ldw	r4,-20(fp)
  81612c:	e13ff615 	stw	r4,-40(fp)
  816130:	00000c06 	br	816164 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  816134:	e0ffff17 	ldw	r3,-4(fp)
  816138:	e0bffc17 	ldw	r2,-16(fp)
  81613c:	1885883a 	add	r2,r3,r2
  816140:	e0fff917 	ldw	r3,-28(fp)
  816144:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  816148:	e0bfff17 	ldw	r2,-4(fp)
  81614c:	e0fffe17 	ldw	r3,-8(fp)
  816150:	10c5883a 	add	r2,r2,r3
  816154:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  816158:	e13ff617 	ldw	r4,-40(fp)
  81615c:	21000044 	addi	r4,r4,1
  816160:	e13ff615 	stw	r4,-40(fp)
  816164:	e0bffa17 	ldw	r2,-24(fp)
  816168:	e0fff617 	ldw	r3,-40(fp)
  81616c:	10fff12e 	bgeu	r2,r3,816134 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
  816170:	00004506 	br	816288 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  816174:	e0bff217 	ldw	r2,-56(fp)
  816178:	10800e17 	ldw	r2,56(r2)
  81617c:	10800098 	cmpnei	r2,r2,2
  816180:	1000201e 	bne	r2,zero,816204 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
  816184:	e13ffe17 	ldw	r4,-8(fp)
  816188:	e13ffe17 	ldw	r4,-8(fp)
  81618c:	2105883a 	add	r2,r4,r4
  816190:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  816194:	e0fffb17 	ldw	r3,-20(fp)
  816198:	e13ffe17 	ldw	r4,-8(fp)
  81619c:	1905383a 	mul	r2,r3,r4
  8161a0:	e0ffff17 	ldw	r3,-4(fp)
  8161a4:	1887883a 	add	r3,r3,r2
  8161a8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  8161ac:	e13ffb17 	ldw	r4,-20(fp)
  8161b0:	e13ff615 	stw	r4,-40(fp)
  8161b4:	00000f06 	br	8161f4 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  8161b8:	e0fffc17 	ldw	r3,-16(fp)
  8161bc:	e0fffc17 	ldw	r3,-16(fp)
  8161c0:	18c5883a 	add	r2,r3,r3
  8161c4:	1007883a 	mov	r3,r2
  8161c8:	e0bfff17 	ldw	r2,-4(fp)
  8161cc:	1885883a 	add	r2,r3,r2
  8161d0:	e0fff917 	ldw	r3,-28(fp)
  8161d4:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  8161d8:	e13fff17 	ldw	r4,-4(fp)
  8161dc:	e0bffe17 	ldw	r2,-8(fp)
  8161e0:	2089883a 	add	r4,r4,r2
  8161e4:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  8161e8:	e0fff617 	ldw	r3,-40(fp)
  8161ec:	18c00044 	addi	r3,r3,1
  8161f0:	e0fff615 	stw	r3,-40(fp)
  8161f4:	e13ffa17 	ldw	r4,-24(fp)
  8161f8:	e0bff617 	ldw	r2,-40(fp)
  8161fc:	20bfee2e 	bgeu	r4,r2,8161b8 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
  816200:	00002106 	br	816288 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  816204:	e0fffe17 	ldw	r3,-8(fp)
  816208:	e0fffe17 	ldw	r3,-8(fp)
  81620c:	18c5883a 	add	r2,r3,r3
  816210:	1085883a 	add	r2,r2,r2
  816214:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  816218:	e13ffb17 	ldw	r4,-20(fp)
  81621c:	e0fffe17 	ldw	r3,-8(fp)
  816220:	20c5383a 	mul	r2,r4,r3
  816224:	e13fff17 	ldw	r4,-4(fp)
  816228:	2089883a 	add	r4,r4,r2
  81622c:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  816230:	e0bffb17 	ldw	r2,-20(fp)
  816234:	e0bff615 	stw	r2,-40(fp)
  816238:	00001006 	br	81627c <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  81623c:	e0fffc17 	ldw	r3,-16(fp)
  816240:	e0fffc17 	ldw	r3,-16(fp)
  816244:	18c5883a 	add	r2,r3,r3
  816248:	1085883a 	add	r2,r2,r2
  81624c:	1007883a 	mov	r3,r2
  816250:	e0bfff17 	ldw	r2,-4(fp)
  816254:	1885883a 	add	r2,r3,r2
  816258:	e0fff917 	ldw	r3,-28(fp)
  81625c:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  816260:	e13fff17 	ldw	r4,-4(fp)
  816264:	e0bffe17 	ldw	r2,-8(fp)
  816268:	2089883a 	add	r4,r4,r2
  81626c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  816270:	e0fff617 	ldw	r3,-40(fp)
  816274:	18c00044 	addi	r3,r3,1
  816278:	e0fff615 	stw	r3,-40(fp)
  81627c:	e13ffa17 	ldw	r4,-24(fp)
  816280:	e0bff617 	ldw	r2,-40(fp)
  816284:	20bfed2e 	bgeu	r4,r2,81623c <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  816288:	e037883a 	mov	sp,fp
  81628c:	df000017 	ldw	fp,0(sp)
  816290:	dec00104 	addi	sp,sp,4
  816294:	f800283a 	ret

00816298 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  816298:	defff804 	addi	sp,sp,-32
  81629c:	dfc00715 	stw	ra,28(sp)
  8162a0:	df000615 	stw	fp,24(sp)
  8162a4:	df000604 	addi	fp,sp,24
  8162a8:	e13ffc15 	stw	r4,-16(fp)
  8162ac:	e17ffd15 	stw	r5,-12(fp)
  8162b0:	e1bffe15 	stw	r6,-8(fp)
  8162b4:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  8162b8:	e0800317 	ldw	r2,12(fp)
  8162bc:	d8800015 	stw	r2,0(sp)
  8162c0:	e0800417 	ldw	r2,16(fp)
  8162c4:	d8800115 	stw	r2,4(sp)
  8162c8:	e13ffc17 	ldw	r4,-16(fp)
  8162cc:	e17ffd17 	ldw	r5,-12(fp)
  8162d0:	e1bfff17 	ldw	r6,-4(fp)
  8162d4:	e1fffe17 	ldw	r7,-8(fp)
  8162d8:	0815b780 	call	815b78 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  8162dc:	e0800317 	ldw	r2,12(fp)
  8162e0:	d8800015 	stw	r2,0(sp)
  8162e4:	e0800417 	ldw	r2,16(fp)
  8162e8:	d8800115 	stw	r2,4(sp)
  8162ec:	e13ffc17 	ldw	r4,-16(fp)
  8162f0:	e17ffd17 	ldw	r5,-12(fp)
  8162f4:	e1bfff17 	ldw	r6,-4(fp)
  8162f8:	e1c00217 	ldw	r7,8(fp)
  8162fc:	0815b780 	call	815b78 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  816300:	e0800317 	ldw	r2,12(fp)
  816304:	d8800015 	stw	r2,0(sp)
  816308:	e0800417 	ldw	r2,16(fp)
  81630c:	d8800115 	stw	r2,4(sp)
  816310:	e13ffc17 	ldw	r4,-16(fp)
  816314:	e17ffd17 	ldw	r5,-12(fp)
  816318:	e1bffe17 	ldw	r6,-8(fp)
  81631c:	e1c00217 	ldw	r7,8(fp)
  816320:	0815ec80 	call	815ec8 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  816324:	e0800317 	ldw	r2,12(fp)
  816328:	d8800015 	stw	r2,0(sp)
  81632c:	e0800417 	ldw	r2,16(fp)
  816330:	d8800115 	stw	r2,4(sp)
  816334:	e13ffc17 	ldw	r4,-16(fp)
  816338:	e17fff17 	ldw	r5,-4(fp)
  81633c:	e1bffe17 	ldw	r6,-8(fp)
  816340:	e1c00217 	ldw	r7,8(fp)
  816344:	0815ec80 	call	815ec8 <alt_up_pixel_buffer_dma_draw_vline>
}
  816348:	e037883a 	mov	sp,fp
  81634c:	dfc00117 	ldw	ra,4(sp)
  816350:	df000017 	ldw	fp,0(sp)
  816354:	dec00204 	addi	sp,sp,8
  816358:	f800283a 	ret

0081635c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  81635c:	defffb04 	addi	sp,sp,-20
  816360:	df000415 	stw	fp,16(sp)
  816364:	df000404 	addi	fp,sp,16
  816368:	e13ffc15 	stw	r4,-16(fp)
  81636c:	e17ffd15 	stw	r5,-12(fp)
  816370:	e1bffe15 	stw	r6,-8(fp)
  816374:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  816378:	e0c00217 	ldw	r3,8(fp)
  81637c:	1804c03a 	cmpne	r2,r3,zero
  816380:	10000b1e 	bne	r2,zero,8163b0 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  816384:	e13ffd17 	ldw	r4,-12(fp)
  816388:	e0ffff17 	ldw	r3,-4(fp)
  81638c:	20c5383a 	mul	r2,r4,r3
  816390:	e13ffe17 	ldw	r4,-8(fp)
  816394:	1105883a 	add	r2,r2,r4
  816398:	1007883a 	mov	r3,r2
  81639c:	e0bffc17 	ldw	r2,-16(fp)
  8163a0:	1885883a 	add	r2,r3,r2
  8163a4:	e0c00117 	ldw	r3,4(fp)
  8163a8:	10c00025 	stbio	r3,0(r2)
  8163ac:	00001b06 	br	81641c <helper_plot_pixel+0xc0>
	else if (mode == 1)
  8163b0:	e1000217 	ldw	r4,8(fp)
  8163b4:	20800058 	cmpnei	r2,r4,1
  8163b8:	10000c1e 	bne	r2,zero,8163ec <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  8163bc:	e0fffd17 	ldw	r3,-12(fp)
  8163c0:	e13fff17 	ldw	r4,-4(fp)
  8163c4:	1905383a 	mul	r2,r3,r4
  8163c8:	e0fffe17 	ldw	r3,-8(fp)
  8163cc:	10c5883a 	add	r2,r2,r3
  8163d0:	1085883a 	add	r2,r2,r2
  8163d4:	1007883a 	mov	r3,r2
  8163d8:	e0bffc17 	ldw	r2,-16(fp)
  8163dc:	1885883a 	add	r2,r3,r2
  8163e0:	e1000117 	ldw	r4,4(fp)
  8163e4:	1100002d 	sthio	r4,0(r2)
  8163e8:	00000c06 	br	81641c <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  8163ec:	e0fffd17 	ldw	r3,-12(fp)
  8163f0:	e13fff17 	ldw	r4,-4(fp)
  8163f4:	1905383a 	mul	r2,r3,r4
  8163f8:	e0fffe17 	ldw	r3,-8(fp)
  8163fc:	10c5883a 	add	r2,r2,r3
  816400:	1085883a 	add	r2,r2,r2
  816404:	1085883a 	add	r2,r2,r2
  816408:	1007883a 	mov	r3,r2
  81640c:	e0bffc17 	ldw	r2,-16(fp)
  816410:	1885883a 	add	r2,r3,r2
  816414:	e1000117 	ldw	r4,4(fp)
  816418:	11000035 	stwio	r4,0(r2)
}
  81641c:	e037883a 	mov	sp,fp
  816420:	df000017 	ldw	fp,0(sp)
  816424:	dec00104 	addi	sp,sp,4
  816428:	f800283a 	ret

0081642c <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  81642c:	deffe404 	addi	sp,sp,-112
  816430:	dfc01b15 	stw	ra,108(sp)
  816434:	df001a15 	stw	fp,104(sp)
  816438:	df001a04 	addi	fp,sp,104
  81643c:	e13fe815 	stw	r4,-96(fp)
  816440:	e17fe915 	stw	r5,-92(fp)
  816444:	e1bfea15 	stw	r6,-88(fp)
  816448:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  81644c:	e0bfe917 	ldw	r2,-92(fp)
  816450:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  816454:	e0ffea17 	ldw	r3,-88(fp)
  816458:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  81645c:	e13feb17 	ldw	r4,-84(fp)
  816460:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  816464:	e0800217 	ldw	r2,8(fp)
  816468:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  81646c:	e0fff717 	ldw	r3,-36(fp)
  816470:	e13ff917 	ldw	r4,-28(fp)
  816474:	1905c83a 	sub	r2,r3,r4
  816478:	e0bfff15 	stw	r2,-4(fp)
  81647c:	e0ffff17 	ldw	r3,-4(fp)
  816480:	1804403a 	cmpge	r2,r3,zero
  816484:	1000031e 	bne	r2,zero,816494 <alt_up_pixel_buffer_dma_draw_line+0x68>
  816488:	e13fff17 	ldw	r4,-4(fp)
  81648c:	0109c83a 	sub	r4,zero,r4
  816490:	e13fff15 	stw	r4,-4(fp)
  816494:	e0fff817 	ldw	r3,-32(fp)
  816498:	e13ffa17 	ldw	r4,-24(fp)
  81649c:	1905c83a 	sub	r2,r3,r4
  8164a0:	e0bffe15 	stw	r2,-8(fp)
  8164a4:	e0fffe17 	ldw	r3,-8(fp)
  8164a8:	1804403a 	cmpge	r2,r3,zero
  8164ac:	1000031e 	bne	r2,zero,8164bc <alt_up_pixel_buffer_dma_draw_line+0x90>
  8164b0:	e13ffe17 	ldw	r4,-8(fp)
  8164b4:	0109c83a 	sub	r4,zero,r4
  8164b8:	e13ffe15 	stw	r4,-8(fp)
  8164bc:	e0fffe17 	ldw	r3,-8(fp)
  8164c0:	e13fff17 	ldw	r4,-4(fp)
  8164c4:	1904803a 	cmplt	r2,r3,r4
  8164c8:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  8164cc:	e0bfe817 	ldw	r2,-96(fp)
  8164d0:	10800e17 	ldw	r2,56(r2)
  8164d4:	10800060 	cmpeqi	r2,r2,1
  8164d8:	10000c1e 	bne	r2,zero,81650c <alt_up_pixel_buffer_dma_draw_line+0xe0>
  8164dc:	e0bfe817 	ldw	r2,-96(fp)
  8164e0:	10800e17 	ldw	r2,56(r2)
  8164e4:	10800098 	cmpnei	r2,r2,2
  8164e8:	1000031e 	bne	r2,zero,8164f8 <alt_up_pixel_buffer_dma_draw_line+0xcc>
  8164ec:	00800044 	movi	r2,1
  8164f0:	e0bffc15 	stw	r2,-16(fp)
  8164f4:	00000206 	br	816500 <alt_up_pixel_buffer_dma_draw_line+0xd4>
  8164f8:	00c00084 	movi	r3,2
  8164fc:	e0fffc15 	stw	r3,-16(fp)
  816500:	e13ffc17 	ldw	r4,-16(fp)
  816504:	e13ffd15 	stw	r4,-12(fp)
  816508:	00000106 	br	816510 <alt_up_pixel_buffer_dma_draw_line+0xe4>
  81650c:	e03ffd15 	stw	zero,-12(fp)
  816510:	e0bffd17 	ldw	r2,-12(fp)
  816514:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  816518:	e0c00317 	ldw	r3,12(fp)
  81651c:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  816520:	e0bfe817 	ldw	r2,-96(fp)
  816524:	10800d17 	ldw	r2,52(r2)
  816528:	1004c03a 	cmpne	r2,r2,zero
  81652c:	1000091e 	bne	r2,zero,816554 <alt_up_pixel_buffer_dma_draw_line+0x128>
  816530:	e0bfe817 	ldw	r2,-96(fp)
  816534:	10c01317 	ldw	r3,76(r2)
  816538:	e0bfef17 	ldw	r2,-68(fp)
  81653c:	1885c83a 	sub	r2,r3,r2
  816540:	1007883a 	mov	r3,r2
  816544:	00800044 	movi	r2,1
  816548:	10c4983a 	sll	r2,r2,r3
  81654c:	e0bffb15 	stw	r2,-20(fp)
  816550:	00000306 	br	816560 <alt_up_pixel_buffer_dma_draw_line+0x134>
  816554:	e0bfe817 	ldw	r2,-96(fp)
  816558:	10800f17 	ldw	r2,60(r2)
  81655c:	e0bffb15 	stw	r2,-20(fp)
  816560:	e13ffb17 	ldw	r4,-20(fp)
  816564:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  816568:	e0800417 	ldw	r2,16(fp)
  81656c:	10800058 	cmpnei	r2,r2,1
  816570:	1000041e 	bne	r2,zero,816584 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  816574:	e0bfe817 	ldw	r2,-96(fp)
  816578:	10800c17 	ldw	r2,48(r2)
  81657c:	e0bfed15 	stw	r2,-76(fp)
  816580:	00000306 	br	816590 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  816584:	e0bfe817 	ldw	r2,-96(fp)
  816588:	10800b17 	ldw	r2,44(r2)
  81658c:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  816590:	e0fff603 	ldbu	r3,-40(fp)
  816594:	18803fcc 	andi	r2,r3,255
  816598:	1080201c 	xori	r2,r2,128
  81659c:	10bfe004 	addi	r2,r2,-128
  8165a0:	10800050 	cmplti	r2,r2,1
  8165a4:	10000c1e 	bne	r2,zero,8165d8 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  8165a8:	e13ffa17 	ldw	r4,-24(fp)
  8165ac:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  8165b0:	e0bff917 	ldw	r2,-28(fp)
  8165b4:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  8165b8:	e0fff317 	ldw	r3,-52(fp)
  8165bc:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  8165c0:	e13ff817 	ldw	r4,-32(fp)
  8165c4:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  8165c8:	e0bff717 	ldw	r2,-36(fp)
  8165cc:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  8165d0:	e0fff317 	ldw	r3,-52(fp)
  8165d4:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  8165d8:	e13ff817 	ldw	r4,-32(fp)
  8165dc:	e0bffa17 	ldw	r2,-24(fp)
  8165e0:	20800c0e 	bge	r4,r2,816614 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  8165e4:	e0fffa17 	ldw	r3,-24(fp)
  8165e8:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  8165ec:	e13ff817 	ldw	r4,-32(fp)
  8165f0:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  8165f4:	e0bff317 	ldw	r2,-52(fp)
  8165f8:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  8165fc:	e0fff917 	ldw	r3,-28(fp)
  816600:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  816604:	e13ff717 	ldw	r4,-36(fp)
  816608:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  81660c:	e0bff317 	ldw	r2,-52(fp)
  816610:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  816614:	e0fff817 	ldw	r3,-32(fp)
  816618:	e13ffa17 	ldw	r4,-24(fp)
  81661c:	1907c83a 	sub	r3,r3,r4
  816620:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  816624:	e0fff717 	ldw	r3,-36(fp)
  816628:	e13ff917 	ldw	r4,-28(fp)
  81662c:	1905c83a 	sub	r2,r3,r4
  816630:	e0bff415 	stw	r2,-48(fp)
  816634:	e0fff417 	ldw	r3,-48(fp)
  816638:	1804403a 	cmpge	r2,r3,zero
  81663c:	1000031e 	bne	r2,zero,81664c <alt_up_pixel_buffer_dma_draw_line+0x220>
  816640:	e13ff417 	ldw	r4,-48(fp)
  816644:	0109c83a 	sub	r4,zero,r4
  816648:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  81664c:	e0fff517 	ldw	r3,-44(fp)
  816650:	1804d7fa 	srli	r2,r3,31
  816654:	e13ff517 	ldw	r4,-44(fp)
  816658:	1105883a 	add	r2,r2,r4
  81665c:	1005d07a 	srai	r2,r2,1
  816660:	0085c83a 	sub	r2,zero,r2
  816664:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  816668:	e0bff917 	ldw	r2,-28(fp)
  81666c:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  816670:	e0fff917 	ldw	r3,-28(fp)
  816674:	e13ff717 	ldw	r4,-36(fp)
  816678:	1900030e 	bge	r3,r4,816688 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  81667c:	00800044 	movi	r2,1
  816680:	e0bff215 	stw	r2,-56(fp)
  816684:	00000206 	br	816690 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  816688:	00ffffc4 	movi	r3,-1
  81668c:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  816690:	e13ff603 	ldbu	r4,-40(fp)
  816694:	20803fcc 	andi	r2,r4,255
  816698:	1080201c 	xori	r2,r2,128
  81669c:	10bfe004 	addi	r2,r2,-128
  8166a0:	10800058 	cmpnei	r2,r2,1
  8166a4:	1000221e 	bne	r2,zero,816730 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  8166a8:	e0bffa17 	ldw	r2,-24(fp)
  8166ac:	e0bff115 	stw	r2,-60(fp)
  8166b0:	00001b06 	br	816720 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  8166b4:	e0ffee17 	ldw	r3,-72(fp)
  8166b8:	d8c00015 	stw	r3,0(sp)
  8166bc:	e13fef17 	ldw	r4,-68(fp)
  8166c0:	d9000115 	stw	r4,4(sp)
  8166c4:	e13fed17 	ldw	r4,-76(fp)
  8166c8:	e17fec17 	ldw	r5,-80(fp)
  8166cc:	e1bff017 	ldw	r6,-64(fp)
  8166d0:	e1fff117 	ldw	r7,-60(fp)
  8166d4:	081635c0 	call	81635c <helper_plot_pixel>
			error = error + deltay;
  8166d8:	e0bff317 	ldw	r2,-52(fp)
  8166dc:	e0fff417 	ldw	r3,-48(fp)
  8166e0:	10c5883a 	add	r2,r2,r3
  8166e4:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  8166e8:	e13ff317 	ldw	r4,-52(fp)
  8166ec:	20800050 	cmplti	r2,r4,1
  8166f0:	1000081e 	bne	r2,zero,816714 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  8166f4:	e0bff017 	ldw	r2,-64(fp)
  8166f8:	e0fff217 	ldw	r3,-56(fp)
  8166fc:	10c5883a 	add	r2,r2,r3
  816700:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  816704:	e13ff317 	ldw	r4,-52(fp)
  816708:	e0bff517 	ldw	r2,-44(fp)
  81670c:	2089c83a 	sub	r4,r4,r2
  816710:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  816714:	e0fff117 	ldw	r3,-60(fp)
  816718:	18c00044 	addi	r3,r3,1
  81671c:	e0fff115 	stw	r3,-60(fp)
  816720:	e13ff817 	ldw	r4,-32(fp)
  816724:	e0bff117 	ldw	r2,-60(fp)
  816728:	20bfe20e 	bge	r4,r2,8166b4 <alt_up_pixel_buffer_dma_draw_line+0x288>
  81672c:	00002106 	br	8167b4 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  816730:	e0fffa17 	ldw	r3,-24(fp)
  816734:	e0fff115 	stw	r3,-60(fp)
  816738:	00001b06 	br	8167a8 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  81673c:	e13fee17 	ldw	r4,-72(fp)
  816740:	d9000015 	stw	r4,0(sp)
  816744:	e0bfef17 	ldw	r2,-68(fp)
  816748:	d8800115 	stw	r2,4(sp)
  81674c:	e13fed17 	ldw	r4,-76(fp)
  816750:	e17fec17 	ldw	r5,-80(fp)
  816754:	e1bff117 	ldw	r6,-60(fp)
  816758:	e1fff017 	ldw	r7,-64(fp)
  81675c:	081635c0 	call	81635c <helper_plot_pixel>
			error = error + deltay;
  816760:	e0fff317 	ldw	r3,-52(fp)
  816764:	e13ff417 	ldw	r4,-48(fp)
  816768:	1907883a 	add	r3,r3,r4
  81676c:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  816770:	e0fff317 	ldw	r3,-52(fp)
  816774:	18800050 	cmplti	r2,r3,1
  816778:	1000081e 	bne	r2,zero,81679c <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  81677c:	e13ff017 	ldw	r4,-64(fp)
  816780:	e0bff217 	ldw	r2,-56(fp)
  816784:	2089883a 	add	r4,r4,r2
  816788:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  81678c:	e0fff317 	ldw	r3,-52(fp)
  816790:	e13ff517 	ldw	r4,-44(fp)
  816794:	1907c83a 	sub	r3,r3,r4
  816798:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  81679c:	e0bff117 	ldw	r2,-60(fp)
  8167a0:	10800044 	addi	r2,r2,1
  8167a4:	e0bff115 	stw	r2,-60(fp)
  8167a8:	e0fff817 	ldw	r3,-32(fp)
  8167ac:	e13ff117 	ldw	r4,-60(fp)
  8167b0:	193fe20e 	bge	r3,r4,81673c <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  8167b4:	e037883a 	mov	sp,fp
  8167b8:	dfc00117 	ldw	ra,4(sp)
  8167bc:	df000017 	ldw	fp,0(sp)
  8167c0:	dec00204 	addi	sp,sp,8
  8167c4:	f800283a 	ret

008167c8 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset);

bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
  8167c8:	defffa04 	addi	sp,sp,-24
  8167cc:	dfc00515 	stw	ra,20(sp)
  8167d0:	df000415 	stw	fp,16(sp)
  8167d4:	df000404 	addi	fp,sp,16
  8167d8:	e13ffe15 	stw	r4,-8(fp)
  8167dc:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
  8167e0:	e03ffd15 	stw	zero,-12(fp)

	if (alt_up_sd_card_is_Present()) {
  8167e4:	08195f40 	call	8195f4 <alt_up_sd_card_is_Present>
  8167e8:	1005003a 	cmpeq	r2,r2,zero
  8167ec:	1000221e 	bne	r2,zero,816878 <Write_Sector_Data+0xb0>
		short int reg_state = 0xff;
  8167f0:	00803fc4 	movi	r2,255
  8167f4:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  8167f8:	d0a74a17 	ldw	r2,-25304(gp)
  8167fc:	1009883a 	mov	r4,r2
  816800:	e0fffe17 	ldw	r3,-8(fp)
  816804:	e0bfff17 	ldw	r2,-4(fp)
  816808:	1885883a 	add	r2,r3,r2
  81680c:	1006927a 	slli	r3,r2,9
  816810:	2005883a 	mov	r2,r4
  816814:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  816818:	d0a74917 	ldw	r2,-25308(gp)
  81681c:	1007883a 	mov	r3,r2
  816820:	00800604 	movi	r2,24
  816824:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  816828:	d0a74617 	ldw	r2,-25320(gp)
  81682c:	1080002b 	ldhuio	r2,0(r2)
  816830:	e0bffc0d 	sth	r2,-16(fp)
		} while ((reg_state & 0x04) != 0);
  816834:	e0bffc0b 	ldhu	r2,-16(fp)
  816838:	10bfffcc 	andi	r2,r2,65535
  81683c:	1080010c 	andi	r2,r2,4
  816840:	1004c03a 	cmpne	r2,r2,zero
  816844:	103ff81e 	bne	r2,zero,816828 <Write_Sector_Data+0x60>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
  816848:	e0bffc0b 	ldhu	r2,-16(fp)
  81684c:	10bfffcc 	andi	r2,r2,65535
  816850:	1080040c 	andi	r2,r2,16
  816854:	1004c03a 	cmpne	r2,r2,zero
  816858:	1000071e 	bne	r2,zero,816878 <Write_Sector_Data+0xb0>
			result = true;
  81685c:	00800044 	movi	r2,1
  816860:	e0bffd15 	stw	r2,-12(fp)
			current_sector_modified = false;
  816864:	d0274f15 	stw	zero,-25284(gp)
			current_sector_index = sector_index + partition_offset;
  816868:	e0fffe17 	ldw	r3,-8(fp)
  81686c:	e0bfff17 	ldw	r2,-4(fp)
  816870:	1885883a 	add	r2,r3,r2
  816874:	d0a75015 	stw	r2,-25280(gp)
		}
	}
	return result;
  816878:	e0bffd17 	ldw	r2,-12(fp)
}
  81687c:	e037883a 	mov	sp,fp
  816880:	dfc00117 	ldw	ra,4(sp)
  816884:	df000017 	ldw	fp,0(sp)
  816888:	dec00204 	addi	sp,sp,8
  81688c:	f800283a 	ret

00816890 <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
  816890:	defffd04 	addi	sp,sp,-12
  816894:	dfc00215 	stw	ra,8(sp)
  816898:	df000115 	stw	fp,4(sp)
  81689c:	df000104 	addi	fp,sp,4
	bool result = true;
  8168a0:	00800044 	movi	r2,1
  8168a4:	e0bfff15 	stw	r2,-4(fp)
	if (current_sector_modified) {
  8168a8:	d0a74f17 	ldw	r2,-25284(gp)
  8168ac:	1005003a 	cmpeq	r2,r2,zero
  8168b0:	1000051e 	bne	r2,zero,8168c8 <Save_Modified_Sector+0x38>
		result = Write_Sector_Data(current_sector_index, 0);
  8168b4:	d0a75017 	ldw	r2,-25280(gp)
  8168b8:	1009883a 	mov	r4,r2
  8168bc:	000b883a 	mov	r5,zero
  8168c0:	08167c80 	call	8167c8 <Write_Sector_Data>
  8168c4:	e0bfff15 	stw	r2,-4(fp)
	}
	return result;
  8168c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8168cc:	e037883a 	mov	sp,fp
  8168d0:	dfc00117 	ldw	ra,4(sp)
  8168d4:	df000017 	ldw	fp,0(sp)
  8168d8:	dec00204 	addi	sp,sp,8
  8168dc:	f800283a 	ret

008168e0 <Read_Sector_Data>:

bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  8168e0:	defff904 	addi	sp,sp,-28
  8168e4:	dfc00615 	stw	ra,24(sp)
  8168e8:	df000515 	stw	fp,20(sp)
  8168ec:	df000504 	addi	fp,sp,20
  8168f0:	e13ffd15 	stw	r4,-12(fp)
  8168f4:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
  8168f8:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
  8168fc:	08195f40 	call	8195f4 <alt_up_sd_card_is_Present>
  816900:	1005003a 	cmpeq	r2,r2,zero
  816904:	10002d1e 	bne	r2,zero,8169bc <Read_Sector_Data+0xdc>
		short int reg_state = 0xff;
  816908:	00803fc4 	movi	r2,255
  81690c:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
  816910:	d0a74f17 	ldw	r2,-25284(gp)
  816914:	1005003a 	cmpeq	r2,r2,zero
  816918:	1000081e 	bne	r2,zero,81693c <Read_Sector_Data+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
  81691c:	d0a75017 	ldw	r2,-25280(gp)
  816920:	1009883a 	mov	r4,r2
  816924:	000b883a 	mov	r5,zero
  816928:	08167c80 	call	8167c8 <Write_Sector_Data>
  81692c:	1004c03a 	cmpne	r2,r2,zero
  816930:	1000021e 	bne	r2,zero,81693c <Read_Sector_Data+0x5c>
				return false;
  816934:	e03fff15 	stw	zero,-4(fp)
  816938:	00002206 	br	8169c4 <Read_Sector_Data+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  81693c:	d0a74a17 	ldw	r2,-25304(gp)
  816940:	1009883a 	mov	r4,r2
  816944:	e0fffd17 	ldw	r3,-12(fp)
  816948:	e0bffe17 	ldw	r2,-8(fp)
  81694c:	1885883a 	add	r2,r3,r2
  816950:	1006927a 	slli	r3,r2,9
  816954:	2005883a 	mov	r2,r4
  816958:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  81695c:	d0a74917 	ldw	r2,-25308(gp)
  816960:	1007883a 	mov	r3,r2
  816964:	00800444 	movi	r2,17
  816968:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  81696c:	d0a74617 	ldw	r2,-25320(gp)
  816970:	1080002b 	ldhuio	r2,0(r2)
  816974:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
  816978:	e0bffb0b 	ldhu	r2,-20(fp)
  81697c:	10bfffcc 	andi	r2,r2,65535
  816980:	1080010c 	andi	r2,r2,4
  816984:	1004c03a 	cmpne	r2,r2,zero
  816988:	103ff81e 	bne	r2,zero,81696c <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
  81698c:	e0bffb0b 	ldhu	r2,-20(fp)
  816990:	10bfffcc 	andi	r2,r2,65535
  816994:	1080040c 	andi	r2,r2,16
  816998:	1004c03a 	cmpne	r2,r2,zero
  81699c:	1000071e 	bne	r2,zero,8169bc <Read_Sector_Data+0xdc>
			result = true;
  8169a0:	00800044 	movi	r2,1
  8169a4:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
  8169a8:	d0274f15 	stw	zero,-25284(gp)
			current_sector_index = sector_index + partition_offset;
  8169ac:	e0fffd17 	ldw	r3,-12(fp)
  8169b0:	e0bffe17 	ldw	r2,-8(fp)
  8169b4:	1885883a 	add	r2,r3,r2
  8169b8:	d0a75015 	stw	r2,-25280(gp)
		}
	}
	return result;
  8169bc:	e0bffc17 	ldw	r2,-16(fp)
  8169c0:	e0bfff15 	stw	r2,-4(fp)
  8169c4:	e0bfff17 	ldw	r2,-4(fp)
}
  8169c8:	e037883a 	mov	sp,fp
  8169cc:	dfc00117 	ldw	ra,4(sp)
  8169d0:	df000017 	ldw	fp,0(sp)
  8169d4:	dec00204 	addi	sp,sp,8
  8169d8:	f800283a 	ret

008169dc <get_cluster_flag>:

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  8169dc:	defffa04 	addi	sp,sp,-24
  8169e0:	dfc00515 	stw	ra,20(sp)
  8169e4:	df000415 	stw	fp,16(sp)
  8169e8:	df000404 	addi	fp,sp,16
  8169ec:	e13ffd15 	stw	r4,-12(fp)
  8169f0:	e17ffe15 	stw	r5,-8(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  8169f4:	e0bffd17 	ldw	r2,-12(fp)
  8169f8:	1006d23a 	srli	r3,r2,8
  8169fc:	d0a74c17 	ldw	r2,-25296(gp)
  816a00:	1885883a 	add	r2,r3,r2
  816a04:	e0bffc15 	stw	r2,-16(fp)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  816a08:	008020b4 	movhi	r2,130
  816a0c:	10913d04 	addi	r2,r2,17652
  816a10:	10c01117 	ldw	r3,68(r2)
  816a14:	e0bffc17 	ldw	r2,-16(fp)
  816a18:	10c5883a 	add	r2,r2,r3
  816a1c:	e0bffc15 	stw	r2,-16(fp)

	if (sector_index != current_sector_index) {
  816a20:	d0e75017 	ldw	r3,-25280(gp)
  816a24:	e0bffc17 	ldw	r2,-16(fp)
  816a28:	10c00726 	beq	r2,r3,816a48 <get_cluster_flag+0x6c>
		if (Read_Sector_Data(sector_index, 0) == false) {
  816a2c:	e13ffc17 	ldw	r4,-16(fp)
  816a30:	000b883a 	mov	r5,zero
  816a34:	08168e00 	call	8168e0 <Read_Sector_Data>
  816a38:	1004c03a 	cmpne	r2,r2,zero
  816a3c:	1000021e 	bne	r2,zero,816a48 <get_cluster_flag+0x6c>
			return false;
  816a40:	e03fff15 	stw	zero,-4(fp)
  816a44:	00000d06 	br	816a7c <get_cluster_flag+0xa0>
		}
	}
	*flag
  816a48:	d0a74e17 	ldw	r2,-25288(gp)
  816a4c:	10800a17 	ldw	r2,40(r2)
  816a50:	1007883a 	mov	r3,r2
  816a54:	e0bffd17 	ldw	r2,-12(fp)
  816a58:	10803fcc 	andi	r2,r2,255
  816a5c:	1085883a 	add	r2,r2,r2
  816a60:	1885883a 	add	r2,r3,r2
  816a64:	1080002b 	ldhuio	r2,0(r2)
  816a68:	1007883a 	mov	r3,r2
  816a6c:	e0bffe17 	ldw	r2,-8(fp)
  816a70:	10c0000d 	sth	r3,0(r2)
			= (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
	return true;
  816a74:	00800044 	movi	r2,1
  816a78:	e0bfff15 	stw	r2,-4(fp)
  816a7c:	e0bfff17 	ldw	r2,-4(fp)
}
  816a80:	e037883a 	mov	sp,fp
  816a84:	dfc00117 	ldw	ra,4(sp)
  816a88:	df000017 	ldw	fp,0(sp)
  816a8c:	dec00204 	addi	sp,sp,8
  816a90:	f800283a 	ret

00816a94 <mark_cluster>:

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
  816a94:	defff904 	addi	sp,sp,-28
  816a98:	dfc00615 	stw	ra,24(sp)
  816a9c:	df000515 	stw	fp,20(sp)
  816aa0:	df000504 	addi	fp,sp,20
  816aa4:	e13ffc15 	stw	r4,-16(fp)
  816aa8:	e1bffe15 	stw	r6,-8(fp)
  816aac:	e17ffd0d 	sth	r5,-12(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  816ab0:	e0bffc17 	ldw	r2,-16(fp)
  816ab4:	1006d23a 	srli	r3,r2,8
  816ab8:	d0a74c17 	ldw	r2,-25296(gp)
  816abc:	1885883a 	add	r2,r3,r2
  816ac0:	e0bffb15 	stw	r2,-20(fp)

	if (first_fat) {
  816ac4:	e0bffe17 	ldw	r2,-8(fp)
  816ac8:	1005003a 	cmpeq	r2,r2,zero
  816acc:	1000071e 	bne	r2,zero,816aec <mark_cluster+0x58>
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  816ad0:	008020b4 	movhi	r2,130
  816ad4:	10913d04 	addi	r2,r2,17652
  816ad8:	10c01117 	ldw	r3,68(r2)
  816adc:	e0bffb17 	ldw	r2,-20(fp)
  816ae0:	10c5883a 	add	r2,r2,r3
  816ae4:	e0bffb15 	stw	r2,-20(fp)
  816ae8:	00000606 	br	816b04 <mark_cluster+0x70>
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
  816aec:	008020b4 	movhi	r2,130
  816af0:	10913d04 	addi	r2,r2,17652
  816af4:	10c01217 	ldw	r3,72(r2)
  816af8:	e0bffb17 	ldw	r2,-20(fp)
  816afc:	10c5883a 	add	r2,r2,r3
  816b00:	e0bffb15 	stw	r2,-20(fp)
	}

	if (sector_index != current_sector_index) {
  816b04:	d0e75017 	ldw	r3,-25280(gp)
  816b08:	e0bffb17 	ldw	r2,-20(fp)
  816b0c:	10c00726 	beq	r2,r3,816b2c <mark_cluster+0x98>
		if (Read_Sector_Data(sector_index, 0) == false) {
  816b10:	e13ffb17 	ldw	r4,-20(fp)
  816b14:	000b883a 	mov	r5,zero
  816b18:	08168e00 	call	8168e0 <Read_Sector_Data>
  816b1c:	1004c03a 	cmpne	r2,r2,zero
  816b20:	1000021e 	bne	r2,zero,816b2c <mark_cluster+0x98>
			return false;
  816b24:	e03fff15 	stw	zero,-4(fp)
  816b28:	00000d06 	br	816b60 <mark_cluster+0xcc>
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  816b2c:	d0a74e17 	ldw	r2,-25288(gp)
  816b30:	10800a17 	ldw	r2,40(r2)
  816b34:	1007883a 	mov	r3,r2
  816b38:	e0bffc17 	ldw	r2,-16(fp)
  816b3c:	10803fcc 	andi	r2,r2,255
  816b40:	1085883a 	add	r2,r2,r2
  816b44:	1885883a 	add	r2,r3,r2
  816b48:	e0fffd0f 	ldh	r3,-12(fp)
  816b4c:	10c0002d 	sthio	r3,0(r2)
	current_sector_modified = true;
  816b50:	00800044 	movi	r2,1
  816b54:	d0a74f15 	stw	r2,-25284(gp)
	return true;
  816b58:	00800044 	movi	r2,1
  816b5c:	e0bfff15 	stw	r2,-4(fp)
  816b60:	e0bfff17 	ldw	r2,-4(fp)
}
  816b64:	e037883a 	mov	sp,fp
  816b68:	dfc00117 	ldw	ra,4(sp)
  816b6c:	df000017 	ldw	fp,0(sp)
  816b70:	dec00204 	addi	sp,sp,8
  816b74:	f800283a 	ret

00816b78 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
  816b78:	defff704 	addi	sp,sp,-36
  816b7c:	dfc00815 	stw	ra,32(sp)
  816b80:	df000715 	stw	fp,28(sp)
  816b84:	df000704 	addi	fp,sp,28
	bool result = false;
  816b88:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data_Attempt_CRC(0, 0)) {
  816b8c:	0009883a 	mov	r4,zero
  816b90:	000b883a 	mov	r5,zero
  816b94:	081acf80 	call	81acf8 <Read_Sector_Data_Attempt_CRC>
  816b98:	1005003a 	cmpeq	r2,r2,zero
  816b9c:	10005c1e 	bne	r2,zero,816d10 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
  816ba0:	d0a74e17 	ldw	r2,-25288(gp)
  816ba4:	10800a17 	ldw	r2,40(r2)
  816ba8:	10807f84 	addi	r2,r2,510
  816bac:	1080002b 	ldhuio	r2,0(r2)
  816bb0:	10bfffcc 	andi	r2,r2,65535
  816bb4:	10a0001c 	xori	r2,r2,32768
  816bb8:	10a00004 	addi	r2,r2,-32768
  816bbc:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
  816bc0:	e0bffd17 	ldw	r2,-12(fp)
  816bc4:	10ffffcc 	andi	r3,r2,65535
  816bc8:	00aa9554 	movui	r2,43605
  816bcc:	1880501e 	bne	r3,r2,816d10 <Check_for_Master_Boot_Record+0x198>
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
  816bd0:	e03ffe15 	stw	zero,-8(fp)
  816bd4:	00004b06 	br	816d04 <Check_for_Master_Boot_Record+0x18c>
				int partition_data_offset = (index * 16) + 0x01be;
  816bd8:	e0bffe17 	ldw	r2,-8(fp)
  816bdc:	1004913a 	slli	r2,r2,4
  816be0:	10806f84 	addi	r2,r2,446
  816be4:	e0bffa15 	stw	r2,-24(fp)
				char type;

				// Read Partition type
				type
  816be8:	d0a74e17 	ldw	r2,-25288(gp)
  816bec:	10800a17 	ldw	r2,40(r2)
  816bf0:	1007883a 	mov	r3,r2
  816bf4:	e0bffa17 	ldw	r2,-24(fp)
  816bf8:	1885883a 	add	r2,r3,r2
  816bfc:	10800104 	addi	r2,r2,4
  816c00:	10800023 	ldbuio	r2,0(r2)
  816c04:	e0bff905 	stb	r2,-28(fp)
						= (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14)) {
  816c08:	e0bff907 	ldb	r2,-28(fp)
  816c0c:	10800060 	cmpeqi	r2,r2,1
  816c10:	1000091e 	bne	r2,zero,816c38 <Check_for_Master_Boot_Record+0xc0>
  816c14:	e0bff907 	ldb	r2,-28(fp)
  816c18:	10800120 	cmpeqi	r2,r2,4
  816c1c:	1000061e 	bne	r2,zero,816c38 <Check_for_Master_Boot_Record+0xc0>
  816c20:	e0bff907 	ldb	r2,-28(fp)
  816c24:	108001a0 	cmpeqi	r2,r2,6
  816c28:	1000031e 	bne	r2,zero,816c38 <Check_for_Master_Boot_Record+0xc0>
  816c2c:	e0bff907 	ldb	r2,-28(fp)
  816c30:	10800398 	cmpnei	r2,r2,14
  816c34:	1000301e 	bne	r2,zero,816cf8 <Check_for_Master_Boot_Record+0x180>
					// Get partition offset and size.
					offset
  816c38:	d0a74e17 	ldw	r2,-25288(gp)
  816c3c:	10800a17 	ldw	r2,40(r2)
  816c40:	1007883a 	mov	r3,r2
  816c44:	e0bffa17 	ldw	r2,-24(fp)
  816c48:	1885883a 	add	r2,r3,r2
  816c4c:	10800284 	addi	r2,r2,10
  816c50:	1080002b 	ldhuio	r2,0(r2)
  816c54:	10bfffcc 	andi	r2,r2,65535
  816c58:	1008943a 	slli	r4,r2,16
  816c5c:	d0a74e17 	ldw	r2,-25288(gp)
  816c60:	10800a17 	ldw	r2,40(r2)
  816c64:	1007883a 	mov	r3,r2
  816c68:	e0bffa17 	ldw	r2,-24(fp)
  816c6c:	1885883a 	add	r2,r3,r2
  816c70:	10800204 	addi	r2,r2,8
  816c74:	1080002b 	ldhuio	r2,0(r2)
  816c78:	10bfffcc 	andi	r2,r2,65535
  816c7c:	2084b03a 	or	r2,r4,r2
  816c80:	e0bffc15 	stw	r2,-16(fp)
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
					partition_size
  816c84:	d0a74e17 	ldw	r2,-25288(gp)
  816c88:	10800a17 	ldw	r2,40(r2)
  816c8c:	1007883a 	mov	r3,r2
  816c90:	e0bffa17 	ldw	r2,-24(fp)
  816c94:	1885883a 	add	r2,r3,r2
  816c98:	10800384 	addi	r2,r2,14
  816c9c:	1080002b 	ldhuio	r2,0(r2)
  816ca0:	10bfffcc 	andi	r2,r2,65535
  816ca4:	1008943a 	slli	r4,r2,16
  816ca8:	d0a74e17 	ldw	r2,-25288(gp)
  816cac:	10800a17 	ldw	r2,40(r2)
  816cb0:	1007883a 	mov	r3,r2
  816cb4:	e0bffa17 	ldw	r2,-24(fp)
  816cb8:	1885883a 	add	r2,r3,r2
  816cbc:	10800304 	addi	r2,r2,12
  816cc0:	1080002b 	ldhuio	r2,0(r2)
  816cc4:	10bfffcc 	andi	r2,r2,65535
  816cc8:	2084b03a 	or	r2,r4,r2
  816ccc:	e0bffb15 	stw	r2,-20(fp)
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
  816cd0:	e0bffb17 	ldw	r2,-20(fp)
  816cd4:	10800050 	cmplti	r2,r2,1
  816cd8:	1000071e 	bne	r2,zero,816cf8 <Check_for_Master_Boot_Record+0x180>
						result = true;
  816cdc:	00800044 	movi	r2,1
  816ce0:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
  816ce4:	e0bffb17 	ldw	r2,-20(fp)
  816ce8:	d0a74d15 	stw	r2,-25292(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
  816cec:	e0bffc17 	ldw	r2,-16(fp)
  816cf0:	d0a74c15 	stw	r2,-25296(gp)
						break;
  816cf4:	00000606 	br	816d10 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
  816cf8:	e0bffe17 	ldw	r2,-8(fp)
  816cfc:	10800044 	addi	r2,r2,1
  816d00:	e0bffe15 	stw	r2,-8(fp)
  816d04:	e0bffe17 	ldw	r2,-8(fp)
  816d08:	10800110 	cmplti	r2,r2,4
  816d0c:	103fb21e 	bne	r2,zero,816bd8 <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
  816d10:	e0bfff17 	ldw	r2,-4(fp)
}
  816d14:	e037883a 	mov	sp,fp
  816d18:	dfc00117 	ldw	ra,4(sp)
  816d1c:	df000017 	ldw	fp,0(sp)
  816d20:	dec00204 	addi	sp,sp,8
  816d24:	f800283a 	ret

00816d28 <Read_File_Record_At_Offset>:

bool Read_File_Record_At_Offset(int offset, t_file_record *record,
		unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
  816d28:	defff804 	addi	sp,sp,-32
  816d2c:	dfc00715 	stw	ra,28(sp)
  816d30:	df000615 	stw	fp,24(sp)
  816d34:	df000604 	addi	fp,sp,24
  816d38:	e13ffc15 	stw	r4,-16(fp)
  816d3c:	e17ffd15 	stw	r5,-12(fp)
  816d40:	e1bffe15 	stw	r6,-8(fp)
  816d44:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
  816d48:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  816d4c:	e0bffc17 	ldw	r2,-16(fp)
  816d50:	108007cc 	andi	r2,r2,31
  816d54:	1004c03a 	cmpne	r2,r2,zero
  816d58:	10008e1e 	bne	r2,zero,816f94 <Read_File_Record_At_Offset+0x26c>
  816d5c:	08195f40 	call	8195f4 <alt_up_sd_card_is_Present>
  816d60:	1005003a 	cmpeq	r2,r2,zero
  816d64:	10008b1e 	bne	r2,zero,816f94 <Read_File_Record_At_Offset+0x26c>
  816d68:	d0a74517 	ldw	r2,-25324(gp)
  816d6c:	1005003a 	cmpeq	r2,r2,zero
  816d70:	1000881e 	bne	r2,zero,816f94 <Read_File_Record_At_Offset+0x26c>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
  816d74:	e03ffa15 	stw	zero,-24(fp)
  816d78:	00001006 	br	816dbc <Read_File_Record_At_Offset+0x94>
			record->name[counter]
  816d7c:	e17ffa17 	ldw	r5,-24(fp)
  816d80:	d0a74e17 	ldw	r2,-25288(gp)
  816d84:	10800a17 	ldw	r2,40(r2)
  816d88:	1009883a 	mov	r4,r2
  816d8c:	e0fffc17 	ldw	r3,-16(fp)
  816d90:	e0bffa17 	ldw	r2,-24(fp)
  816d94:	1885883a 	add	r2,r3,r2
  816d98:	2085883a 	add	r2,r4,r2
  816d9c:	10800023 	ldbuio	r2,0(r2)
  816da0:	1007883a 	mov	r3,r2
  816da4:	e0bffd17 	ldw	r2,-12(fp)
  816da8:	1145883a 	add	r2,r2,r5
  816dac:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
  816db0:	e0bffa17 	ldw	r2,-24(fp)
  816db4:	10800044 	addi	r2,r2,1
  816db8:	e0bffa15 	stw	r2,-24(fp)
  816dbc:	e0bffa17 	ldw	r2,-24(fp)
  816dc0:	10800210 	cmplti	r2,r2,8
  816dc4:	103fed1e 	bne	r2,zero,816d7c <Read_File_Record_At_Offset+0x54>
			record->name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
  816dc8:	e03ffa15 	stw	zero,-24(fp)
  816dcc:	00001206 	br	816e18 <Read_File_Record_At_Offset+0xf0>
			record->extension[counter]
  816dd0:	e17ffa17 	ldw	r5,-24(fp)
  816dd4:	d0a74e17 	ldw	r2,-25288(gp)
  816dd8:	10800a17 	ldw	r2,40(r2)
  816ddc:	1009883a 	mov	r4,r2
  816de0:	e0fffc17 	ldw	r3,-16(fp)
  816de4:	e0bffa17 	ldw	r2,-24(fp)
  816de8:	1885883a 	add	r2,r3,r2
  816dec:	2085883a 	add	r2,r4,r2
  816df0:	10800204 	addi	r2,r2,8
  816df4:	10800023 	ldbuio	r2,0(r2)
  816df8:	1007883a 	mov	r3,r2
  816dfc:	e0bffd17 	ldw	r2,-12(fp)
  816e00:	2885883a 	add	r2,r5,r2
  816e04:	10800204 	addi	r2,r2,8
  816e08:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++) {
			record->name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
  816e0c:	e0bffa17 	ldw	r2,-24(fp)
  816e10:	10800044 	addi	r2,r2,1
  816e14:	e0bffa15 	stw	r2,-24(fp)
  816e18:	e0bffa17 	ldw	r2,-24(fp)
  816e1c:	108000d0 	cmplti	r2,r2,3
  816e20:	103feb1e 	bne	r2,zero,816dd0 <Read_File_Record_At_Offset+0xa8>
			record->extension[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}
		record->attributes
  816e24:	d0a74e17 	ldw	r2,-25288(gp)
  816e28:	10800a17 	ldw	r2,40(r2)
  816e2c:	1007883a 	mov	r3,r2
  816e30:	e0bffc17 	ldw	r2,-16(fp)
  816e34:	1885883a 	add	r2,r3,r2
  816e38:	108002c4 	addi	r2,r2,11
  816e3c:	10800023 	ldbuio	r2,0(r2)
  816e40:	1007883a 	mov	r3,r2
  816e44:	e0bffd17 	ldw	r2,-12(fp)
  816e48:	10c002c5 	stb	r3,11(r2)
				= (char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time
  816e4c:	d0a74e17 	ldw	r2,-25288(gp)
  816e50:	10800a17 	ldw	r2,40(r2)
  816e54:	1007883a 	mov	r3,r2
  816e58:	e0bffc17 	ldw	r2,-16(fp)
  816e5c:	1885883a 	add	r2,r3,r2
  816e60:	10800384 	addi	r2,r2,14
  816e64:	1080002b 	ldhuio	r2,0(r2)
  816e68:	1007883a 	mov	r3,r2
  816e6c:	e0bffd17 	ldw	r2,-12(fp)
  816e70:	10c0030d 	sth	r3,12(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date
  816e74:	d0a74e17 	ldw	r2,-25288(gp)
  816e78:	10800a17 	ldw	r2,40(r2)
  816e7c:	1007883a 	mov	r3,r2
  816e80:	e0bffc17 	ldw	r2,-16(fp)
  816e84:	1885883a 	add	r2,r3,r2
  816e88:	10800404 	addi	r2,r2,16
  816e8c:	1080002b 	ldhuio	r2,0(r2)
  816e90:	1007883a 	mov	r3,r2
  816e94:	e0bffd17 	ldw	r2,-12(fp)
  816e98:	10c0038d 	sth	r3,14(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date
  816e9c:	d0a74e17 	ldw	r2,-25288(gp)
  816ea0:	10800a17 	ldw	r2,40(r2)
  816ea4:	1007883a 	mov	r3,r2
  816ea8:	e0bffc17 	ldw	r2,-16(fp)
  816eac:	1885883a 	add	r2,r3,r2
  816eb0:	10800484 	addi	r2,r2,18
  816eb4:	1080002b 	ldhuio	r2,0(r2)
  816eb8:	1007883a 	mov	r3,r2
  816ebc:	e0bffd17 	ldw	r2,-12(fp)
  816ec0:	10c0040d 	sth	r3,16(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time
  816ec4:	d0a74e17 	ldw	r2,-25288(gp)
  816ec8:	10800a17 	ldw	r2,40(r2)
  816ecc:	1007883a 	mov	r3,r2
  816ed0:	e0bffc17 	ldw	r2,-16(fp)
  816ed4:	1885883a 	add	r2,r3,r2
  816ed8:	10800584 	addi	r2,r2,22
  816edc:	1080002b 	ldhuio	r2,0(r2)
  816ee0:	1007883a 	mov	r3,r2
  816ee4:	e0bffd17 	ldw	r2,-12(fp)
  816ee8:	10c0048d 	sth	r3,18(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date
  816eec:	d0a74e17 	ldw	r2,-25288(gp)
  816ef0:	10800a17 	ldw	r2,40(r2)
  816ef4:	1007883a 	mov	r3,r2
  816ef8:	e0bffc17 	ldw	r2,-16(fp)
  816efc:	1885883a 	add	r2,r3,r2
  816f00:	10800604 	addi	r2,r2,24
  816f04:	1080002b 	ldhuio	r2,0(r2)
  816f08:	1007883a 	mov	r3,r2
  816f0c:	e0bffd17 	ldw	r2,-12(fp)
  816f10:	10c0050d 	sth	r3,20(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index
  816f14:	d0a74e17 	ldw	r2,-25288(gp)
  816f18:	10800a17 	ldw	r2,40(r2)
  816f1c:	1007883a 	mov	r3,r2
  816f20:	e0bffc17 	ldw	r2,-16(fp)
  816f24:	1885883a 	add	r2,r3,r2
  816f28:	10800684 	addi	r2,r2,26
  816f2c:	1080002b 	ldhuio	r2,0(r2)
  816f30:	1007883a 	mov	r3,r2
  816f34:	e0bffd17 	ldw	r2,-12(fp)
  816f38:	10c0058d 	sth	r3,22(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes
  816f3c:	d0a74e17 	ldw	r2,-25288(gp)
  816f40:	10800a17 	ldw	r2,40(r2)
  816f44:	1007883a 	mov	r3,r2
  816f48:	e0bffc17 	ldw	r2,-16(fp)
  816f4c:	1885883a 	add	r2,r3,r2
  816f50:	10800704 	addi	r2,r2,28
  816f54:	10800037 	ldwio	r2,0(r2)
  816f58:	1007883a 	mov	r3,r2
  816f5c:	e0bffd17 	ldw	r2,-12(fp)
  816f60:	10c00615 	stw	r3,24(r2)
				= (unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
  816f64:	e0fffd17 	ldw	r3,-12(fp)
  816f68:	e0bffe17 	ldw	r2,-8(fp)
  816f6c:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
  816f70:	e0fffd17 	ldw	r3,-12(fp)
  816f74:	e0bfff17 	ldw	r2,-4(fp)
  816f78:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
  816f7c:	e0bffc17 	ldw	r2,-16(fp)
  816f80:	1007883a 	mov	r3,r2
  816f84:	e0bffd17 	ldw	r2,-12(fp)
  816f88:	10c00c0d 	sth	r3,48(r2)
		result = true;
  816f8c:	00800044 	movi	r2,1
  816f90:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
  816f94:	e0bffb17 	ldw	r2,-20(fp)
}
  816f98:	e037883a 	mov	sp,fp
  816f9c:	dfc00117 	ldw	ra,4(sp)
  816fa0:	df000017 	ldw	fp,0(sp)
  816fa4:	dec00204 	addi	sp,sp,8
  816fa8:	f800283a 	ret

00816fac <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
  816fac:	defff904 	addi	sp,sp,-28
  816fb0:	dfc00615 	stw	ra,24(sp)
  816fb4:	df000515 	stw	fp,20(sp)
  816fb8:	df000504 	addi	fp,sp,20
  816fbc:	e13ffe15 	stw	r4,-8(fp)
  816fc0:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
  816fc4:	e03ffd15 	stw	zero,-12(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  816fc8:	e0bffe17 	ldw	r2,-8(fp)
  816fcc:	108007cc 	andi	r2,r2,31
  816fd0:	1004c03a 	cmpne	r2,r2,zero
  816fd4:	10009d1e 	bne	r2,zero,81724c <Write_File_Record_At_Offset+0x2a0>
  816fd8:	08195f40 	call	8195f4 <alt_up_sd_card_is_Present>
  816fdc:	1005003a 	cmpeq	r2,r2,zero
  816fe0:	10009a1e 	bne	r2,zero,81724c <Write_File_Record_At_Offset+0x2a0>
  816fe4:	d0a74517 	ldw	r2,-25324(gp)
  816fe8:	1005003a 	cmpeq	r2,r2,zero
  816fec:	1000971e 	bne	r2,zero,81724c <Write_File_Record_At_Offset+0x2a0>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
  816ff0:	e03ffc15 	stw	zero,-16(fp)
  816ff4:	00001e06 	br	817070 <Write_File_Record_At_Offset+0xc4>
			short int two_chars = (short int) record->name[counter + 1];
  816ff8:	e0bffc17 	ldw	r2,-16(fp)
  816ffc:	10c00044 	addi	r3,r2,1
  817000:	e0bfff17 	ldw	r2,-4(fp)
  817004:	10c5883a 	add	r2,r2,r3
  817008:	10800003 	ldbu	r2,0(r2)
  81700c:	10803fcc 	andi	r2,r2,255
  817010:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars << 8;
  817014:	e0bffb0f 	ldh	r2,-20(fp)
  817018:	1004923a 	slli	r2,r2,8
  81701c:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars | record->name[counter];
  817020:	e0fffc17 	ldw	r3,-16(fp)
  817024:	e0bfff17 	ldw	r2,-4(fp)
  817028:	10c5883a 	add	r2,r2,r3
  81702c:	10800003 	ldbu	r2,0(r2)
  817030:	10c03fcc 	andi	r3,r2,255
  817034:	e0bffb0b 	ldhu	r2,-20(fp)
  817038:	10c4b03a 	or	r2,r2,r3
  81703c:	e0bffb0d 	sth	r2,-20(fp)
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  817040:	d0a74e17 	ldw	r2,-25288(gp)
  817044:	10800a17 	ldw	r2,40(r2)
  817048:	1009883a 	mov	r4,r2
  81704c:	e0fffe17 	ldw	r3,-8(fp)
  817050:	e0bffc17 	ldw	r2,-16(fp)
  817054:	1885883a 	add	r2,r3,r2
  817058:	2085883a 	add	r2,r4,r2
  81705c:	e0fffb0f 	ldh	r3,-20(fp)
  817060:	10c0002d 	sthio	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
  817064:	e0bffc17 	ldw	r2,-16(fp)
  817068:	10800084 	addi	r2,r2,2
  81706c:	e0bffc15 	stw	r2,-16(fp)
  817070:	e0bffc17 	ldw	r2,-16(fp)
  817074:	10800210 	cmplti	r2,r2,8
  817078:	103fdf1e 	bne	r2,zero,816ff8 <Write_File_Record_At_Offset+0x4c>
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
  81707c:	e03ffc15 	stw	zero,-16(fp)
  817080:	00001306 	br	8170d0 <Write_File_Record_At_Offset+0x124>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
  817084:	d0a74e17 	ldw	r2,-25288(gp)
  817088:	10800a17 	ldw	r2,40(r2)
  81708c:	1009883a 	mov	r4,r2
  817090:	e0fffe17 	ldw	r3,-8(fp)
  817094:	e0bffc17 	ldw	r2,-16(fp)
  817098:	1885883a 	add	r2,r3,r2
  81709c:	2085883a 	add	r2,r4,r2
  8170a0:	11000204 	addi	r4,r2,8
  8170a4:	e0fffc17 	ldw	r3,-16(fp)
  8170a8:	e0bfff17 	ldw	r2,-4(fp)
  8170ac:	1885883a 	add	r2,r3,r2
  8170b0:	10800204 	addi	r2,r2,8
  8170b4:	10800003 	ldbu	r2,0(r2)
  8170b8:	10c03fcc 	andi	r3,r2,255
  8170bc:	2005883a 	mov	r2,r4
  8170c0:	10c00025 	stbio	r3,0(r2)
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
  8170c4:	e0bffc17 	ldw	r2,-16(fp)
  8170c8:	10800044 	addi	r2,r2,1
  8170cc:	e0bffc15 	stw	r2,-16(fp)
  8170d0:	e0bffc17 	ldw	r2,-16(fp)
  8170d4:	108000d0 	cmplti	r2,r2,3
  8170d8:	103fea1e 	bne	r2,zero,817084 <Write_File_Record_At_Offset+0xd8>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
		}
		IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
  8170dc:	d0a74e17 	ldw	r2,-25288(gp)
  8170e0:	10800a17 	ldw	r2,40(r2)
  8170e4:	1007883a 	mov	r3,r2
  8170e8:	e0bffe17 	ldw	r2,-8(fp)
  8170ec:	1885883a 	add	r2,r3,r2
  8170f0:	110002c4 	addi	r4,r2,11
  8170f4:	e0bfff17 	ldw	r2,-4(fp)
  8170f8:	108002c3 	ldbu	r2,11(r2)
  8170fc:	10c03fcc 	andi	r3,r2,255
  817100:	2005883a 	mov	r2,r4
  817104:	10c00025 	stbio	r3,0(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
  817108:	d0a74e17 	ldw	r2,-25288(gp)
  81710c:	10800a17 	ldw	r2,40(r2)
  817110:	1007883a 	mov	r3,r2
  817114:	e0bffe17 	ldw	r2,-8(fp)
  817118:	1885883a 	add	r2,r3,r2
  81711c:	11000384 	addi	r4,r2,14
  817120:	e0bfff17 	ldw	r2,-4(fp)
  817124:	1080030b 	ldhu	r2,12(r2)
  817128:	10ffffcc 	andi	r3,r2,65535
  81712c:	2005883a 	mov	r2,r4
  817130:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
  817134:	d0a74e17 	ldw	r2,-25288(gp)
  817138:	10800a17 	ldw	r2,40(r2)
  81713c:	1007883a 	mov	r3,r2
  817140:	e0bffe17 	ldw	r2,-8(fp)
  817144:	1885883a 	add	r2,r3,r2
  817148:	11000404 	addi	r4,r2,16
  81714c:	e0bfff17 	ldw	r2,-4(fp)
  817150:	1080038b 	ldhu	r2,14(r2)
  817154:	10ffffcc 	andi	r3,r2,65535
  817158:	2005883a 	mov	r2,r4
  81715c:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
  817160:	d0a74e17 	ldw	r2,-25288(gp)
  817164:	10800a17 	ldw	r2,40(r2)
  817168:	1007883a 	mov	r3,r2
  81716c:	e0bffe17 	ldw	r2,-8(fp)
  817170:	1885883a 	add	r2,r3,r2
  817174:	11000484 	addi	r4,r2,18
  817178:	e0bfff17 	ldw	r2,-4(fp)
  81717c:	1080040b 	ldhu	r2,16(r2)
  817180:	10ffffcc 	andi	r3,r2,65535
  817184:	2005883a 	mov	r2,r4
  817188:	10c0002d 	sthio	r3,0(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
  81718c:	d0a74e17 	ldw	r2,-25288(gp)
  817190:	10800a17 	ldw	r2,40(r2)
  817194:	1007883a 	mov	r3,r2
  817198:	e0bffe17 	ldw	r2,-8(fp)
  81719c:	1885883a 	add	r2,r3,r2
  8171a0:	11000584 	addi	r4,r2,22
  8171a4:	e0bfff17 	ldw	r2,-4(fp)
  8171a8:	1080048b 	ldhu	r2,18(r2)
  8171ac:	10ffffcc 	andi	r3,r2,65535
  8171b0:	2005883a 	mov	r2,r4
  8171b4:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
  8171b8:	d0a74e17 	ldw	r2,-25288(gp)
  8171bc:	10800a17 	ldw	r2,40(r2)
  8171c0:	1007883a 	mov	r3,r2
  8171c4:	e0bffe17 	ldw	r2,-8(fp)
  8171c8:	1885883a 	add	r2,r3,r2
  8171cc:	11000604 	addi	r4,r2,24
  8171d0:	e0bfff17 	ldw	r2,-4(fp)
  8171d4:	1080050b 	ldhu	r2,20(r2)
  8171d8:	10ffffcc 	andi	r3,r2,65535
  8171dc:	2005883a 	mov	r2,r4
  8171e0:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
  8171e4:	d0a74e17 	ldw	r2,-25288(gp)
  8171e8:	10800a17 	ldw	r2,40(r2)
  8171ec:	1007883a 	mov	r3,r2
  8171f0:	e0bffe17 	ldw	r2,-8(fp)
  8171f4:	1885883a 	add	r2,r3,r2
  8171f8:	11000684 	addi	r4,r2,26
  8171fc:	e0bfff17 	ldw	r2,-4(fp)
  817200:	1080058b 	ldhu	r2,22(r2)
  817204:	10ffffcc 	andi	r3,r2,65535
  817208:	2005883a 	mov	r2,r4
  81720c:	10c0002d 	sthio	r3,0(r2)
		IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
  817210:	d0a74e17 	ldw	r2,-25288(gp)
  817214:	10800a17 	ldw	r2,40(r2)
  817218:	1007883a 	mov	r3,r2
  81721c:	e0bffe17 	ldw	r2,-8(fp)
  817220:	1885883a 	add	r2,r3,r2
  817224:	11000704 	addi	r4,r2,28
  817228:	e0bfff17 	ldw	r2,-4(fp)
  81722c:	10800617 	ldw	r2,24(r2)
  817230:	1007883a 	mov	r3,r2
  817234:	2005883a 	mov	r2,r4
  817238:	10c00035 	stwio	r3,0(r2)
		current_sector_modified = true;
  81723c:	00800044 	movi	r2,1
  817240:	d0a74f15 	stw	r2,-25284(gp)
		result = true;
  817244:	00800044 	movi	r2,1
  817248:	e0bffd15 	stw	r2,-12(fp)
	}
	return result;
  81724c:	e0bffd17 	ldw	r2,-12(fp)
}
  817250:	e037883a 	mov	sp,fp
  817254:	dfc00117 	ldw	ra,4(sp)
  817258:	df000017 	ldw	fp,0(sp)
  81725c:	dec00204 	addi	sp,sp,8
  817260:	f800283a 	ret

00817264 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
  817264:	defff804 	addi	sp,sp,-32
  817268:	dfc00715 	stw	ra,28(sp)
  81726c:	df000615 	stw	fp,24(sp)
  817270:	dc000515 	stw	r16,20(sp)
  817274:	df000504 	addi	fp,sp,20
  817278:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
  81727c:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
  817280:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
  817284:	0009883a 	mov	r4,zero
  817288:	e17fff17 	ldw	r5,-4(fp)
  81728c:	081acf80 	call	81acf8 <Read_Sector_Data_Attempt_CRC>
  817290:	e0bffe15 	stw	r2,-8(fp)
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
  817294:	d0a74e17 	ldw	r2,-25288(gp)
  817298:	10800a17 	ldw	r2,40(r2)
  81729c:	10807f84 	addi	r2,r2,510
  8172a0:	1080002b 	ldhuio	r2,0(r2)
  8172a4:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
  8172a8:	e0bffc0f 	ldh	r2,-16(fp)
  8172ac:	10ffffcc 	andi	r3,r2,65535
  8172b0:	00aa9554 	movui	r2,43605
  8172b4:	1881751e 	bne	r3,r2,81788c <Check_for_DOS_FAT+0x628>
  8172b8:	e0bffe17 	ldw	r2,-8(fp)
  8172bc:	1005003a 	cmpeq	r2,r2,zero
  8172c0:	1001721e 	bne	r2,zero,81788c <Check_for_DOS_FAT+0x628>
		int num_clusters = 0;
  8172c4:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0]
  8172c8:	d0a74e17 	ldw	r2,-25288(gp)
  8172cc:	10800a17 	ldw	r2,40(r2)
  8172d0:	10800023 	ldbuio	r2,0(r2)
  8172d4:	1007883a 	mov	r3,r2
  8172d8:	008020b4 	movhi	r2,130
  8172dc:	10913d04 	addi	r2,r2,17652
  8172e0:	10c00005 	stb	r3,0(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1]
  8172e4:	d0a74e17 	ldw	r2,-25288(gp)
  8172e8:	10800a17 	ldw	r2,40(r2)
  8172ec:	10800044 	addi	r2,r2,1
  8172f0:	10800023 	ldbuio	r2,0(r2)
  8172f4:	1007883a 	mov	r3,r2
  8172f8:	008020b4 	movhi	r2,130
  8172fc:	10913d04 	addi	r2,r2,17652
  817300:	10c00045 	stb	r3,1(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2]
  817304:	d0a74e17 	ldw	r2,-25288(gp)
  817308:	10800a17 	ldw	r2,40(r2)
  81730c:	10800084 	addi	r2,r2,2
  817310:	10800023 	ldbuio	r2,0(r2)
  817314:	1007883a 	mov	r3,r2
  817318:	008020b4 	movhi	r2,130
  81731c:	10913d04 	addi	r2,r2,17652
  817320:	10c00085 	stb	r3,2(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
  817324:	e03ffd15 	stw	zero,-12(fp)
  817328:	00001006 	br	81736c <Check_for_DOS_FAT+0x108>
			boot_sector_data.OEM_name[counter]
  81732c:	e13ffd17 	ldw	r4,-12(fp)
  817330:	d0a74e17 	ldw	r2,-25288(gp)
  817334:	10800a17 	ldw	r2,40(r2)
  817338:	1007883a 	mov	r3,r2
  81733c:	e0bffd17 	ldw	r2,-12(fp)
  817340:	1885883a 	add	r2,r3,r2
  817344:	108000c4 	addi	r2,r2,3
  817348:	10800023 	ldbuio	r2,0(r2)
  81734c:	1007883a 	mov	r3,r2
  817350:	008020b4 	movhi	r2,130
  817354:	10913d04 	addi	r2,r2,17652
  817358:	1105883a 	add	r2,r2,r4
  81735c:	10c000c5 	stb	r3,3(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1]
				= (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2]
				= (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
  817360:	e0bffd17 	ldw	r2,-12(fp)
  817364:	10800044 	addi	r2,r2,1
  817368:	e0bffd15 	stw	r2,-12(fp)
  81736c:	e0bffd17 	ldw	r2,-12(fp)
  817370:	10800210 	cmplti	r2,r2,8
  817374:	103fed1e 	bne	r2,zero,81732c <Check_for_DOS_FAT+0xc8>
			boot_sector_data.OEM_name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes
  817378:	d0a74e17 	ldw	r2,-25288(gp)
  81737c:	10800a17 	ldw	r2,40(r2)
  817380:	10800304 	addi	r2,r2,12
  817384:	10800023 	ldbuio	r2,0(r2)
  817388:	10803fcc 	andi	r2,r2,255
  81738c:	1004923a 	slli	r2,r2,8
  817390:	1007883a 	mov	r3,r2
  817394:	d0a74e17 	ldw	r2,-25288(gp)
  817398:	10800a17 	ldw	r2,40(r2)
  81739c:	108002c4 	addi	r2,r2,11
  8173a0:	10800023 	ldbuio	r2,0(r2)
  8173a4:	10803fcc 	andi	r2,r2,255
  8173a8:	1080201c 	xori	r2,r2,128
  8173ac:	10bfe004 	addi	r2,r2,-128
  8173b0:	1884b03a 	or	r2,r3,r2
  8173b4:	1007883a 	mov	r3,r2
  8173b8:	008020b4 	movhi	r2,130
  8173bc:	10913d04 	addi	r2,r2,17652
  8173c0:	10c0030d 	sth	r3,12(r2)
				= (((unsigned char) IORD_8DIRECT(device_pointer->base, 12))
						<< 8) | ((char) IORD_8DIRECT(device_pointer->base, 11));
		boot_sector_data.sectors_per_cluster
  8173c4:	d0a74e17 	ldw	r2,-25288(gp)
  8173c8:	10800a17 	ldw	r2,40(r2)
  8173cc:	10800344 	addi	r2,r2,13
  8173d0:	10800023 	ldbuio	r2,0(r2)
  8173d4:	1007883a 	mov	r3,r2
  8173d8:	008020b4 	movhi	r2,130
  8173dc:	10913d04 	addi	r2,r2,17652
  8173e0:	10c00385 	stb	r3,14(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
		boot_sector_data.reserved_sectors
  8173e4:	d0a74e17 	ldw	r2,-25288(gp)
  8173e8:	10800a17 	ldw	r2,40(r2)
  8173ec:	10800384 	addi	r2,r2,14
  8173f0:	1080002b 	ldhuio	r2,0(r2)
  8173f4:	1007883a 	mov	r3,r2
  8173f8:	008020b4 	movhi	r2,130
  8173fc:	10913d04 	addi	r2,r2,17652
  817400:	10c0040d 	sth	r3,16(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
		boot_sector_data.number_of_FATs
  817404:	d0a74e17 	ldw	r2,-25288(gp)
  817408:	10800a17 	ldw	r2,40(r2)
  81740c:	10800404 	addi	r2,r2,16
  817410:	10800023 	ldbuio	r2,0(r2)
  817414:	1007883a 	mov	r3,r2
  817418:	008020b4 	movhi	r2,130
  81741c:	10913d04 	addi	r2,r2,17652
  817420:	10c00485 	stb	r3,18(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
		boot_sector_data.max_number_of_dir_entires
  817424:	d0a74e17 	ldw	r2,-25288(gp)
  817428:	10800a17 	ldw	r2,40(r2)
  81742c:	10800484 	addi	r2,r2,18
  817430:	10800023 	ldbuio	r2,0(r2)
  817434:	10803fcc 	andi	r2,r2,255
  817438:	1004923a 	slli	r2,r2,8
  81743c:	1007883a 	mov	r3,r2
  817440:	d0a74e17 	ldw	r2,-25288(gp)
  817444:	10800a17 	ldw	r2,40(r2)
  817448:	10800444 	addi	r2,r2,17
  81744c:	10800023 	ldbuio	r2,0(r2)
  817450:	10803fcc 	andi	r2,r2,255
  817454:	1884b03a 	or	r2,r3,r2
  817458:	1007883a 	mov	r3,r2
  81745c:	008020b4 	movhi	r2,130
  817460:	10913d04 	addi	r2,r2,17652
  817464:	10c0050d 	sth	r3,20(r2)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 18))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
		boot_sector_data.number_of_sectors_in_partition
  817468:	d0a74e17 	ldw	r2,-25288(gp)
  81746c:	10800a17 	ldw	r2,40(r2)
  817470:	10800504 	addi	r2,r2,20
  817474:	10800023 	ldbuio	r2,0(r2)
  817478:	10803fcc 	andi	r2,r2,255
  81747c:	1004923a 	slli	r2,r2,8
  817480:	1007883a 	mov	r3,r2
  817484:	d0a74e17 	ldw	r2,-25288(gp)
  817488:	10800a17 	ldw	r2,40(r2)
  81748c:	108004c4 	addi	r2,r2,19
  817490:	10800023 	ldbuio	r2,0(r2)
  817494:	10803fcc 	andi	r2,r2,255
  817498:	1884b03a 	or	r2,r3,r2
  81749c:	1007883a 	mov	r3,r2
  8174a0:	008020b4 	movhi	r2,130
  8174a4:	10913d04 	addi	r2,r2,17652
  8174a8:	10c0058d 	sth	r3,22(r2)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 20))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
		boot_sector_data.media_descriptor
  8174ac:	d0a74e17 	ldw	r2,-25288(gp)
  8174b0:	10800a17 	ldw	r2,40(r2)
  8174b4:	10800544 	addi	r2,r2,21
  8174b8:	10800023 	ldbuio	r2,0(r2)
  8174bc:	1007883a 	mov	r3,r2
  8174c0:	008020b4 	movhi	r2,130
  8174c4:	10913d04 	addi	r2,r2,17652
  8174c8:	10c00605 	stb	r3,24(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
		boot_sector_data.number_of_sectors_per_table
  8174cc:	d0a74e17 	ldw	r2,-25288(gp)
  8174d0:	10800a17 	ldw	r2,40(r2)
  8174d4:	10800584 	addi	r2,r2,22
  8174d8:	1080002b 	ldhuio	r2,0(r2)
  8174dc:	1007883a 	mov	r3,r2
  8174e0:	008020b4 	movhi	r2,130
  8174e4:	10913d04 	addi	r2,r2,17652
  8174e8:	10c0068d 	sth	r3,26(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
		boot_sector_data.number_of_sectors_per_track
  8174ec:	d0a74e17 	ldw	r2,-25288(gp)
  8174f0:	10800a17 	ldw	r2,40(r2)
  8174f4:	10800604 	addi	r2,r2,24
  8174f8:	1080002b 	ldhuio	r2,0(r2)
  8174fc:	1007883a 	mov	r3,r2
  817500:	008020b4 	movhi	r2,130
  817504:	10913d04 	addi	r2,r2,17652
  817508:	10c0070d 	sth	r3,28(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
		boot_sector_data.number_of_heads
  81750c:	d0a74e17 	ldw	r2,-25288(gp)
  817510:	10800a17 	ldw	r2,40(r2)
  817514:	10800684 	addi	r2,r2,26
  817518:	1080002b 	ldhuio	r2,0(r2)
  81751c:	1007883a 	mov	r3,r2
  817520:	008020b4 	movhi	r2,130
  817524:	10913d04 	addi	r2,r2,17652
  817528:	10c0078d 	sth	r3,30(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors
  81752c:	d0a74e17 	ldw	r2,-25288(gp)
  817530:	10800a17 	ldw	r2,40(r2)
  817534:	10800704 	addi	r2,r2,28
  817538:	10800037 	ldwio	r2,0(r2)
  81753c:	1007883a 	mov	r3,r2
  817540:	008020b4 	movhi	r2,130
  817544:	10913d04 	addi	r2,r2,17652
  817548:	10c00815 	stw	r3,32(r2)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB
  81754c:	d0a74e17 	ldw	r2,-25288(gp)
  817550:	10800a17 	ldw	r2,40(r2)
  817554:	10800804 	addi	r2,r2,32
  817558:	10800037 	ldwio	r2,0(r2)
  81755c:	1007883a 	mov	r3,r2
  817560:	008020b4 	movhi	r2,130
  817564:	10913d04 	addi	r2,r2,17652
  817568:	10c00915 	stw	r3,36(r2)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number
  81756c:	d0a74e17 	ldw	r2,-25288(gp)
  817570:	10800a17 	ldw	r2,40(r2)
  817574:	10800904 	addi	r2,r2,36
  817578:	10800023 	ldbuio	r2,0(r2)
  81757c:	1007883a 	mov	r3,r2
  817580:	008020b4 	movhi	r2,130
  817584:	10913d04 	addi	r2,r2,17652
  817588:	10c00a05 	stb	r3,40(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head
  81758c:	d0a74e17 	ldw	r2,-25288(gp)
  817590:	10800a17 	ldw	r2,40(r2)
  817594:	10800944 	addi	r2,r2,37
  817598:	10800023 	ldbuio	r2,0(r2)
  81759c:	1007883a 	mov	r3,r2
  8175a0:	008020b4 	movhi	r2,130
  8175a4:	10913d04 	addi	r2,r2,17652
  8175a8:	10c00a45 	stb	r3,41(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature
  8175ac:	d0a74e17 	ldw	r2,-25288(gp)
  8175b0:	10800a17 	ldw	r2,40(r2)
  8175b4:	10800984 	addi	r2,r2,38
  8175b8:	10800023 	ldbuio	r2,0(r2)
  8175bc:	1007883a 	mov	r3,r2
  8175c0:	008020b4 	movhi	r2,130
  8175c4:	10913d04 	addi	r2,r2,17652
  8175c8:	10c00a85 	stb	r3,42(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset
  8175cc:	008020b4 	movhi	r2,130
  8175d0:	10913d04 	addi	r2,r2,17652
  8175d4:	1080040b 	ldhu	r2,16(r2)
  8175d8:	10ffffcc 	andi	r3,r2,65535
  8175dc:	008020b4 	movhi	r2,130
  8175e0:	10913d04 	addi	r2,r2,17652
  8175e4:	10c01115 	stw	r3,68(r2)
				= boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset
  8175e8:	008020b4 	movhi	r2,130
  8175ec:	10913d04 	addi	r2,r2,17652
  8175f0:	10c01117 	ldw	r3,68(r2)
  8175f4:	008020b4 	movhi	r2,130
  8175f8:	10913d04 	addi	r2,r2,17652
  8175fc:	1080068b 	ldhu	r2,26(r2)
  817600:	10bfffcc 	andi	r2,r2,65535
  817604:	1887883a 	add	r3,r3,r2
  817608:	008020b4 	movhi	r2,130
  81760c:	10913d04 	addi	r2,r2,17652
  817610:	10c01215 	stw	r3,72(r2)
				= boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset
  817614:	008020b4 	movhi	r2,130
  817618:	10913d04 	addi	r2,r2,17652
  81761c:	10c01217 	ldw	r3,72(r2)
  817620:	008020b4 	movhi	r2,130
  817624:	10913d04 	addi	r2,r2,17652
  817628:	1080068b 	ldhu	r2,26(r2)
  81762c:	10bfffcc 	andi	r2,r2,65535
  817630:	1887883a 	add	r3,r3,r2
  817634:	008020b4 	movhi	r2,130
  817638:	10913d04 	addi	r2,r2,17652
  81763c:	10c01315 	stw	r3,76(r2)
				= boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset
  817640:	008020b4 	movhi	r2,130
  817644:	10913d04 	addi	r2,r2,17652
  817648:	14001317 	ldw	r16,76(r2)
  81764c:	008020b4 	movhi	r2,130
  817650:	10913d04 	addi	r2,r2,17652
  817654:	1080050b 	ldhu	r2,20(r2)
  817658:	10bfffcc 	andi	r2,r2,65535
  81765c:	1008917a 	slli	r4,r2,5
  817660:	008020b4 	movhi	r2,130
  817664:	10913d04 	addi	r2,r2,17652
  817668:	1080030b 	ldhu	r2,12(r2)
  81766c:	117fffcc 	andi	r5,r2,65535
  817670:	0808dcc0 	call	808dcc <__divsi3>
  817674:	8087883a 	add	r3,r16,r2
  817678:	008020b4 	movhi	r2,130
  81767c:	10913d04 	addi	r2,r2,17652
  817680:	10c01415 	stw	r3,80(r2)
				= boot_sector_data.root_directory_sector_offset + (32
						* boot_sector_data.max_number_of_dir_entires
						/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
  817684:	008020b4 	movhi	r2,130
  817688:	10913d04 	addi	r2,r2,17652
  81768c:	1080058b 	ldhu	r2,22(r2)
  817690:	10bfffcc 	andi	r2,r2,65535
  817694:	1005003a 	cmpeq	r2,r2,zero
  817698:	10000b1e 	bne	r2,zero,8176c8 <Check_for_DOS_FAT+0x464>
			num_clusters = (boot_sector_data.number_of_sectors_in_partition
  81769c:	008020b4 	movhi	r2,130
  8176a0:	10913d04 	addi	r2,r2,17652
  8176a4:	1080058b 	ldhu	r2,22(r2)
  8176a8:	113fffcc 	andi	r4,r2,65535
  8176ac:	008020b4 	movhi	r2,130
  8176b0:	10913d04 	addi	r2,r2,17652
  8176b4:	10800383 	ldbu	r2,14(r2)
  8176b8:	11403fcc 	andi	r5,r2,255
  8176bc:	0808dcc0 	call	808dcc <__divsi3>
  8176c0:	e0bffb15 	stw	r2,-20(fp)
  8176c4:	00000906 	br	8176ec <Check_for_DOS_FAT+0x488>
					/ boot_sector_data.sectors_per_cluster);
		} else {
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB
  8176c8:	008020b4 	movhi	r2,130
  8176cc:	10913d04 	addi	r2,r2,17652
  8176d0:	11000917 	ldw	r4,36(r2)
  8176d4:	008020b4 	movhi	r2,130
  8176d8:	10913d04 	addi	r2,r2,17652
  8176dc:	10800383 	ldbu	r2,14(r2)
  8176e0:	11403fcc 	andi	r5,r2,255
  8176e4:	0808e8c0 	call	808e8c <__udivsi3>
  8176e8:	e0bffb15 	stw	r2,-20(fp)
					/ boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087) {
  8176ec:	e0bffb17 	ldw	r2,-20(fp)
  8176f0:	1083fdc8 	cmpgei	r2,r2,4087
  8176f4:	1000051e 	bne	r2,zero,81770c <Check_for_DOS_FAT+0x4a8>
			boot_sector_data.bits_for_cluster_index = 12;
  8176f8:	00c020b4 	movhi	r3,130
  8176fc:	18d13d04 	addi	r3,r3,17652
  817700:	00800304 	movi	r2,12
  817704:	18801085 	stb	r2,66(r3)
  817708:	00000c06 	br	81773c <Check_for_DOS_FAT+0x4d8>
		} else if (num_clusters <= 65517) {
  81770c:	e0fffb17 	ldw	r3,-20(fp)
  817710:	00bffb54 	movui	r2,65517
  817714:	10c00516 	blt	r2,r3,81772c <Check_for_DOS_FAT+0x4c8>
			boot_sector_data.bits_for_cluster_index = 16;
  817718:	00c020b4 	movhi	r3,130
  81771c:	18d13d04 	addi	r3,r3,17652
  817720:	00800404 	movi	r2,16
  817724:	18801085 	stb	r2,66(r3)
  817728:	00000406 	br	81773c <Check_for_DOS_FAT+0x4d8>
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
  81772c:	00c020b4 	movhi	r3,130
  817730:	18d13d04 	addi	r3,r3,17652
  817734:	00800804 	movi	r2,32
  817738:	18801085 	stb	r2,66(r3)
		}

		for (counter = 0; counter < 4; counter++) {
  81773c:	e03ffd15 	stw	zero,-12(fp)
  817740:	00001106 	br	817788 <Check_for_DOS_FAT+0x524>
			boot_sector_data.volume_id[counter]
  817744:	e13ffd17 	ldw	r4,-12(fp)
  817748:	d0a74e17 	ldw	r2,-25288(gp)
  81774c:	10800a17 	ldw	r2,40(r2)
  817750:	1007883a 	mov	r3,r2
  817754:	e0bffd17 	ldw	r2,-12(fp)
  817758:	1885883a 	add	r2,r3,r2
  81775c:	108009c4 	addi	r2,r2,39
  817760:	10800023 	ldbuio	r2,0(r2)
  817764:	1007883a 	mov	r3,r2
  817768:	008020b4 	movhi	r2,130
  81776c:	10913d04 	addi	r2,r2,17652
  817770:	2085883a 	add	r2,r4,r2
  817774:	10800a04 	addi	r2,r2,40
  817778:	10c000c5 	stb	r3,3(r2)
			boot_sector_data.bits_for_cluster_index = 16;
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
		}

		for (counter = 0; counter < 4; counter++) {
  81777c:	e0bffd17 	ldw	r2,-12(fp)
  817780:	10800044 	addi	r2,r2,1
  817784:	e0bffd15 	stw	r2,-12(fp)
  817788:	e0bffd17 	ldw	r2,-12(fp)
  81778c:	10800110 	cmplti	r2,r2,4
  817790:	103fec1e 	bne	r2,zero,817744 <Check_for_DOS_FAT+0x4e0>
			boot_sector_data.volume_id[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
  817794:	e03ffd15 	stw	zero,-12(fp)
  817798:	00001106 	br	8177e0 <Check_for_DOS_FAT+0x57c>
			boot_sector_data.volume_label[counter]
  81779c:	e13ffd17 	ldw	r4,-12(fp)
  8177a0:	d0a74e17 	ldw	r2,-25288(gp)
  8177a4:	10800a17 	ldw	r2,40(r2)
  8177a8:	1007883a 	mov	r3,r2
  8177ac:	e0bffd17 	ldw	r2,-12(fp)
  8177b0:	1885883a 	add	r2,r3,r2
  8177b4:	10800ac4 	addi	r2,r2,43
  8177b8:	10800023 	ldbuio	r2,0(r2)
  8177bc:	1007883a 	mov	r3,r2
  8177c0:	008020b4 	movhi	r2,130
  8177c4:	10913d04 	addi	r2,r2,17652
  8177c8:	2085883a 	add	r2,r4,r2
  8177cc:	10800b04 	addi	r2,r2,44
  8177d0:	10c000c5 	stb	r3,3(r2)

		for (counter = 0; counter < 4; counter++) {
			boot_sector_data.volume_id[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
  8177d4:	e0bffd17 	ldw	r2,-12(fp)
  8177d8:	10800044 	addi	r2,r2,1
  8177dc:	e0bffd15 	stw	r2,-12(fp)
  8177e0:	e0bffd17 	ldw	r2,-12(fp)
  8177e4:	108002d0 	cmplti	r2,r2,11
  8177e8:	103fec1e 	bne	r2,zero,81779c <Check_for_DOS_FAT+0x538>
			boot_sector_data.volume_label[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
  8177ec:	e03ffd15 	stw	zero,-12(fp)
  8177f0:	00001106 	br	817838 <Check_for_DOS_FAT+0x5d4>
			boot_sector_data.file_system_type[counter]
  8177f4:	e13ffd17 	ldw	r4,-12(fp)
  8177f8:	d0a74e17 	ldw	r2,-25288(gp)
  8177fc:	10800a17 	ldw	r2,40(r2)
  817800:	1007883a 	mov	r3,r2
  817804:	e0bffd17 	ldw	r2,-12(fp)
  817808:	1885883a 	add	r2,r3,r2
  81780c:	10800d84 	addi	r2,r2,54
  817810:	10800023 	ldbuio	r2,0(r2)
  817814:	1007883a 	mov	r3,r2
  817818:	008020b4 	movhi	r2,130
  81781c:	10913d04 	addi	r2,r2,17652
  817820:	2085883a 	add	r2,r4,r2
  817824:	10800e04 	addi	r2,r2,56
  817828:	10c00085 	stb	r3,2(r2)
		}
		for (counter = 0; counter < 11; counter++) {
			boot_sector_data.volume_label[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
  81782c:	e0bffd17 	ldw	r2,-12(fp)
  817830:	10800044 	addi	r2,r2,1
  817834:	e0bffd15 	stw	r2,-12(fp)
  817838:	e0bffd17 	ldw	r2,-12(fp)
  81783c:	10800210 	cmplti	r2,r2,8
  817840:	103fec1e 	bne	r2,zero,8177f4 <Check_for_DOS_FAT+0x590>
			boot_sector_data.file_system_type[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
  817844:	e03ffd15 	stw	zero,-12(fp)
  817848:	00000a06 	br	817874 <Check_for_DOS_FAT+0x610>
			active_files[counter].in_use = false;
  81784c:	e0bffd17 	ldw	r2,-12(fp)
  817850:	00c020b4 	movhi	r3,130
  817854:	18d15204 	addi	r3,r3,17736
  817858:	100491ba 	slli	r2,r2,6
  81785c:	10c5883a 	add	r2,r2,r3
  817860:	10800f04 	addi	r2,r2,60
  817864:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++) {
			boot_sector_data.file_system_type[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
  817868:	e0bffd17 	ldw	r2,-12(fp)
  81786c:	10800044 	addi	r2,r2,1
  817870:	e0bffd15 	stw	r2,-12(fp)
  817874:	e0bffd17 	ldw	r2,-12(fp)
  817878:	10800510 	cmplti	r2,r2,20
  81787c:	103ff31e 	bne	r2,zero,81784c <Check_for_DOS_FAT+0x5e8>
			active_files[counter].in_use = false;
		}
		result = true;
  817880:	00800044 	movi	r2,1
  817884:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
  817888:	00000106 	br	817890 <Check_for_DOS_FAT+0x62c>
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
			active_files[counter].in_use = false;
		}
		result = true;
	} else {
		result = false;
  81788c:	e03ffe15 	stw	zero,-8(fp)
	}
	return result;
  817890:	e0bffe17 	ldw	r2,-8(fp)
}
  817894:	e037883a 	mov	sp,fp
  817898:	dfc00217 	ldw	ra,8(sp)
  81789c:	df000117 	ldw	fp,4(sp)
  8178a0:	dc000017 	ldw	r16,0(sp)
  8178a4:	dec00304 	addi	sp,sp,12
  8178a8:	f800283a 	ret

008178ac <Look_for_FAT16>:

bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
  8178ac:	defffc04 	addi	sp,sp,-16
  8178b0:	dfc00315 	stw	ra,12(sp)
  8178b4:	df000215 	stw	fp,8(sp)
  8178b8:	df000204 	addi	fp,sp,8
	bool result = false;
  8178bc:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
  8178c0:	08195f40 	call	8195f4 <alt_up_sd_card_is_Present>
  8178c4:	1005003a 	cmpeq	r2,r2,zero
  8178c8:	1000331e 	bne	r2,zero,817998 <Look_for_FAT16+0xec>
		Read_Sector_Data_Attempt_CRC(0, 0);
  8178cc:	0009883a 	mov	r4,zero
  8178d0:	000b883a 	mov	r5,zero
  8178d4:	081acf80 	call	81acf8 <Read_Sector_Data_Attempt_CRC>

		short int csd_file_format = *CSD_register_w0;
  8178d8:	d0a74817 	ldw	r2,-25312(gp)
  8178dc:	1080000b 	ldhu	r2,0(r2)
  8178e0:	e0bffe0d 	sth	r2,-8(fp)

		fat_partition_offset_in_512_byte_sectors = 0;
  8178e4:	d0274c15 	stw	zero,-25296(gp)
		fat_partition_size_in_512_byte_sectors = 0;
  8178e8:	d0274d15 	stw	zero,-25292(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00)
  8178ec:	e0bffe0f 	ldh	r2,-8(fp)
  8178f0:	1004803a 	cmplt	r2,r2,zero
  8178f4:	1000281e 	bne	r2,zero,817998 <Look_for_FAT16+0xec>
  8178f8:	e0bffe0b 	ldhu	r2,-8(fp)
  8178fc:	10bfffcc 	andi	r2,r2,65535
  817900:	1083000c 	andi	r2,r2,3072
  817904:	10830020 	cmpeqi	r2,r2,3072
  817908:	1000231e 	bne	r2,zero,817998 <Look_for_FAT16+0xec>
				!= 0x0c00)) {
			if ((csd_file_format & 0x0c00) == 0x0400) {
  81790c:	e0bffe0b 	ldhu	r2,-8(fp)
  817910:	10bfffcc 	andi	r2,r2,65535
  817914:	1083000c 	andi	r2,r2,3072
  817918:	10810018 	cmpnei	r2,r2,1024
  81791c:	1000031e 	bne	r2,zero,81792c <Look_for_FAT16+0x80>
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
  817920:	0009883a 	mov	r4,zero
  817924:	08172640 	call	817264 <Check_for_DOS_FAT>
  817928:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000) {
  81792c:	e0bffe0b 	ldhu	r2,-8(fp)
  817930:	10bfffcc 	andi	r2,r2,65535
  817934:	1083000c 	andi	r2,r2,3072
  817938:	1004c03a 	cmpne	r2,r2,zero
  81793c:	1000061e 	bne	r2,zero,817958 <Look_for_FAT16+0xac>
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record()) {
  817940:	0816b780 	call	816b78 <Check_for_Master_Boot_Record>
  817944:	1005003a 	cmpeq	r2,r2,zero
  817948:	1000031e 	bne	r2,zero,817958 <Look_for_FAT16+0xac>
					result = Check_for_DOS_FAT(
  81794c:	d1274c17 	ldw	r4,-25296(gp)
  817950:	08172640 	call	817264 <Check_for_DOS_FAT>
  817954:	e0bfff15 	stw	r2,-4(fp)
							fat_partition_offset_in_512_byte_sectors);
				}
			}
			if (result == true) {
  817958:	e0bfff17 	ldw	r2,-4(fp)
  81795c:	10800058 	cmpnei	r2,r2,1
  817960:	10000d1e 	bne	r2,zero,817998 <Look_for_FAT16+0xec>
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16) {
  817964:	008020b4 	movhi	r2,130
  817968:	10913d04 	addi	r2,r2,17652
  81796c:	10801083 	ldbu	r2,66(r2)
  817970:	10803fcc 	andi	r2,r2,255
  817974:	10800420 	cmpeqi	r2,r2,16
  817978:	1000021e 	bne	r2,zero,817984 <Look_for_FAT16+0xd8>
					result = false;
  81797c:	e03fff15 	stw	zero,-4(fp)
  817980:	00000506 	br	817998 <Look_for_FAT16+0xec>
				} else {
					fat_partition_size_in_512_byte_sectors
  817984:	008020b4 	movhi	r2,130
  817988:	10913d04 	addi	r2,r2,17652
  81798c:	1080058b 	ldhu	r2,22(r2)
  817990:	10bfffcc 	andi	r2,r2,65535
  817994:	d0a74d15 	stw	r2,-25292(gp)
							= boot_sector_data.number_of_sectors_in_partition;
				}
			}
		}
	}
	return result;
  817998:	e0bfff17 	ldw	r2,-4(fp)
}
  81799c:	e037883a 	mov	sp,fp
  8179a0:	dfc00117 	ldw	ra,4(sp)
  8179a4:	df000017 	ldw	fp,0(sp)
  8179a8:	dec00204 	addi	sp,sp,8
  8179ac:	f800283a 	ret

008179b0 <filename_to_upper_case>:

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
  8179b0:	defffb04 	addi	sp,sp,-20
  8179b4:	dfc00415 	stw	ra,16(sp)
  8179b8:	df000315 	stw	fp,12(sp)
  8179bc:	df000304 	addi	fp,sp,12
  8179c0:	e13fff15 	stw	r4,-4(fp)
	int index;
	int length = strlen(file_name);
  8179c4:	e13fff17 	ldw	r4,-4(fp)
  8179c8:	080a0980 	call	80a098 <strlen>
  8179cc:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
  8179d0:	e03ffe15 	stw	zero,-8(fp)
  8179d4:	00002206 	br	817a60 <filename_to_upper_case+0xb0>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
  8179d8:	e0bffe17 	ldw	r2,-8(fp)
  8179dc:	1007883a 	mov	r3,r2
  8179e0:	e0bfff17 	ldw	r2,-4(fp)
  8179e4:	1885883a 	add	r2,r3,r2
  8179e8:	10800003 	ldbu	r2,0(r2)
  8179ec:	10803fcc 	andi	r2,r2,255
  8179f0:	1080201c 	xori	r2,r2,128
  8179f4:	10bfe004 	addi	r2,r2,-128
  8179f8:	10801850 	cmplti	r2,r2,97
  8179fc:	1000151e 	bne	r2,zero,817a54 <filename_to_upper_case+0xa4>
  817a00:	e0bffe17 	ldw	r2,-8(fp)
  817a04:	1007883a 	mov	r3,r2
  817a08:	e0bfff17 	ldw	r2,-4(fp)
  817a0c:	1885883a 	add	r2,r3,r2
  817a10:	10800003 	ldbu	r2,0(r2)
  817a14:	10803fcc 	andi	r2,r2,255
  817a18:	1080201c 	xori	r2,r2,128
  817a1c:	10bfe004 	addi	r2,r2,-128
  817a20:	10801ec8 	cmpgei	r2,r2,123
  817a24:	10000b1e 	bne	r2,zero,817a54 <filename_to_upper_case+0xa4>
			file_name[index] = (file_name[index] - 'a') + 'A';
  817a28:	e0bffe17 	ldw	r2,-8(fp)
  817a2c:	1007883a 	mov	r3,r2
  817a30:	e0bfff17 	ldw	r2,-4(fp)
  817a34:	1889883a 	add	r4,r3,r2
  817a38:	e0bffe17 	ldw	r2,-8(fp)
  817a3c:	1007883a 	mov	r3,r2
  817a40:	e0bfff17 	ldw	r2,-4(fp)
  817a44:	1885883a 	add	r2,r3,r2
  817a48:	10800003 	ldbu	r2,0(r2)
  817a4c:	10bff804 	addi	r2,r2,-32
  817a50:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
  817a54:	e0bffe17 	ldw	r2,-8(fp)
  817a58:	10800044 	addi	r2,r2,1
  817a5c:	e0bffe15 	stw	r2,-8(fp)
  817a60:	e0fffe17 	ldw	r3,-8(fp)
  817a64:	e0bffd17 	ldw	r2,-12(fp)
  817a68:	18bfdb16 	blt	r3,r2,8179d8 <filename_to_upper_case+0x28>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
			file_name[index] = (file_name[index] - 'a') + 'A';
		}
	}
}
  817a6c:	e037883a 	mov	sp,fp
  817a70:	dfc00117 	ldw	ra,4(sp)
  817a74:	df000017 	ldw	fp,0(sp)
  817a78:	dec00204 	addi	sp,sp,8
  817a7c:	f800283a 	ret

00817a80 <check_file_name_for_FAT16_compliance>:

bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
  817a80:	defff804 	addi	sp,sp,-32
  817a84:	dfc00715 	stw	ra,28(sp)
  817a88:	df000615 	stw	fp,24(sp)
  817a8c:	df000604 	addi	fp,sp,24
  817a90:	e13fff15 	stw	r4,-4(fp)
	int length = strlen(file_name);
  817a94:	e13fff17 	ldw	r4,-4(fp)
  817a98:	080a0980 	call	80a098 <strlen>
  817a9c:	e0bffe15 	stw	r2,-8(fp)
	int index;
	int last_dir_break_position = -1;
  817aa0:	00bfffc4 	movi	r2,-1
  817aa4:	e0bffc15 	stw	r2,-16(fp)
	int last_period = -1;
  817aa8:	00bfffc4 	movi	r2,-1
  817aac:	e0bffb15 	stw	r2,-20(fp)
	bool result = true;
  817ab0:	00800044 	movi	r2,1
  817ab4:	e0bffa15 	stw	r2,-24(fp)

	for (index = 0; index < length; index++) {
  817ab8:	e03ffd15 	stw	zero,-12(fp)
  817abc:	00007606 	br	817c98 <check_file_name_for_FAT16_compliance+0x218>
		if ((file_name[index] == ' ') || ((last_dir_break_position == (index
  817ac0:	e0bffd17 	ldw	r2,-12(fp)
  817ac4:	1007883a 	mov	r3,r2
  817ac8:	e0bfff17 	ldw	r2,-4(fp)
  817acc:	1885883a 	add	r2,r3,r2
  817ad0:	10800003 	ldbu	r2,0(r2)
  817ad4:	10803fcc 	andi	r2,r2,255
  817ad8:	1080201c 	xori	r2,r2,128
  817adc:	10bfe004 	addi	r2,r2,-128
  817ae0:	10800820 	cmpeqi	r2,r2,32
  817ae4:	1000431e 	bne	r2,zero,817bf4 <check_file_name_for_FAT16_compliance+0x174>
  817ae8:	e0bffd17 	ldw	r2,-12(fp)
  817aec:	10ffffc4 	addi	r3,r2,-1
  817af0:	e0bffc17 	ldw	r2,-16(fp)
  817af4:	1880141e 	bne	r3,r2,817b48 <check_file_name_for_FAT16_compliance+0xc8>
  817af8:	e0bffd17 	ldw	r2,-12(fp)
  817afc:	1007883a 	mov	r3,r2
  817b00:	e0bfff17 	ldw	r2,-4(fp)
  817b04:	1885883a 	add	r2,r3,r2
  817b08:	10800003 	ldbu	r2,0(r2)
  817b0c:	10803fcc 	andi	r2,r2,255
  817b10:	1080201c 	xori	r2,r2,128
  817b14:	10bfe004 	addi	r2,r2,-128
  817b18:	10801720 	cmpeqi	r2,r2,92
  817b1c:	1000351e 	bne	r2,zero,817bf4 <check_file_name_for_FAT16_compliance+0x174>
  817b20:	e0bffd17 	ldw	r2,-12(fp)
  817b24:	1007883a 	mov	r3,r2
  817b28:	e0bfff17 	ldw	r2,-4(fp)
  817b2c:	1885883a 	add	r2,r3,r2
  817b30:	10800003 	ldbu	r2,0(r2)
  817b34:	10803fcc 	andi	r2,r2,255
  817b38:	1080201c 	xori	r2,r2,128
  817b3c:	10bfe004 	addi	r2,r2,-128
  817b40:	10800be0 	cmpeqi	r2,r2,47
  817b44:	10002b1e 	bne	r2,zero,817bf4 <check_file_name_for_FAT16_compliance+0x174>
  817b48:	e0fffd17 	ldw	r3,-12(fp)
  817b4c:	e0bffb17 	ldw	r2,-20(fp)
  817b50:	1885c83a 	sub	r2,r3,r2
  817b54:	10800258 	cmpnei	r2,r2,9
  817b58:	10000a1e 	bne	r2,zero,817b84 <check_file_name_for_FAT16_compliance+0x104>
  817b5c:	e0bffd17 	ldw	r2,-12(fp)
  817b60:	1007883a 	mov	r3,r2
  817b64:	e0bfff17 	ldw	r2,-4(fp)
  817b68:	1885883a 	add	r2,r3,r2
  817b6c:	10800003 	ldbu	r2,0(r2)
  817b70:	10803fcc 	andi	r2,r2,255
  817b74:	1080201c 	xori	r2,r2,128
  817b78:	10bfe004 	addi	r2,r2,-128
  817b7c:	10800b98 	cmpnei	r2,r2,46
  817b80:	10001c1e 	bne	r2,zero,817bf4 <check_file_name_for_FAT16_compliance+0x174>
  817b84:	e0fffc17 	ldw	r3,-16(fp)
  817b88:	e0bffb17 	ldw	r2,-20(fp)
  817b8c:	18801b26 	beq	r3,r2,817bfc <check_file_name_for_FAT16_compliance+0x17c>
  817b90:	e0fffd17 	ldw	r3,-12(fp)
  817b94:	e0bffb17 	ldw	r2,-20(fp)
  817b98:	1885c83a 	sub	r2,r3,r2
  817b9c:	10800110 	cmplti	r2,r2,4
  817ba0:	1000161e 	bne	r2,zero,817bfc <check_file_name_for_FAT16_compliance+0x17c>
  817ba4:	e0bffd17 	ldw	r2,-12(fp)
  817ba8:	1007883a 	mov	r3,r2
  817bac:	e0bfff17 	ldw	r2,-4(fp)
  817bb0:	1885883a 	add	r2,r3,r2
  817bb4:	10800003 	ldbu	r2,0(r2)
  817bb8:	10803fcc 	andi	r2,r2,255
  817bbc:	1080201c 	xori	r2,r2,128
  817bc0:	10bfe004 	addi	r2,r2,-128
  817bc4:	10801720 	cmpeqi	r2,r2,92
  817bc8:	10000c1e 	bne	r2,zero,817bfc <check_file_name_for_FAT16_compliance+0x17c>
  817bcc:	e0bffd17 	ldw	r2,-12(fp)
  817bd0:	1007883a 	mov	r3,r2
  817bd4:	e0bfff17 	ldw	r2,-4(fp)
  817bd8:	1885883a 	add	r2,r3,r2
  817bdc:	10800003 	ldbu	r2,0(r2)
  817be0:	10803fcc 	andi	r2,r2,255
  817be4:	1080201c 	xori	r2,r2,128
  817be8:	10bfe004 	addi	r2,r2,-128
  817bec:	10800be0 	cmpeqi	r2,r2,47
  817bf0:	1000021e 	bne	r2,zero,817bfc <check_file_name_for_FAT16_compliance+0x17c>
				- 1)) && ((file_name[index] == '\\') || (file_name[index]
				== '/'))) || ((index - last_period == 9) && (file_name[index]
				!= '.')) || ((last_dir_break_position != last_period) && (index
				- last_period > 3) && (file_name[index] != '\\')
				&& (file_name[index] != '/'))) {
			result = false;
  817bf4:	e03ffa15 	stw	zero,-24(fp)
			break;
  817bf8:	00002a06 	br	817ca4 <check_file_name_for_FAT16_compliance+0x224>
		}
		if ((file_name[index] == '\\') || (file_name[index] == '/')) {
  817bfc:	e0bffd17 	ldw	r2,-12(fp)
  817c00:	1007883a 	mov	r3,r2
  817c04:	e0bfff17 	ldw	r2,-4(fp)
  817c08:	1885883a 	add	r2,r3,r2
  817c0c:	10800003 	ldbu	r2,0(r2)
  817c10:	10803fcc 	andi	r2,r2,255
  817c14:	1080201c 	xori	r2,r2,128
  817c18:	10bfe004 	addi	r2,r2,-128
  817c1c:	10801720 	cmpeqi	r2,r2,92
  817c20:	10000a1e 	bne	r2,zero,817c4c <check_file_name_for_FAT16_compliance+0x1cc>
  817c24:	e0bffd17 	ldw	r2,-12(fp)
  817c28:	1007883a 	mov	r3,r2
  817c2c:	e0bfff17 	ldw	r2,-4(fp)
  817c30:	1885883a 	add	r2,r3,r2
  817c34:	10800003 	ldbu	r2,0(r2)
  817c38:	10803fcc 	andi	r2,r2,255
  817c3c:	1080201c 	xori	r2,r2,128
  817c40:	10bfe004 	addi	r2,r2,-128
  817c44:	10800bd8 	cmpnei	r2,r2,47
  817c48:	1000041e 	bne	r2,zero,817c5c <check_file_name_for_FAT16_compliance+0x1dc>
			last_period = index;
  817c4c:	e0bffd17 	ldw	r2,-12(fp)
  817c50:	e0bffb15 	stw	r2,-20(fp)
			last_dir_break_position = index;
  817c54:	e0bffd17 	ldw	r2,-12(fp)
  817c58:	e0bffc15 	stw	r2,-16(fp)
		}
		if (file_name[index] == '.') {
  817c5c:	e0bffd17 	ldw	r2,-12(fp)
  817c60:	1007883a 	mov	r3,r2
  817c64:	e0bfff17 	ldw	r2,-4(fp)
  817c68:	1885883a 	add	r2,r3,r2
  817c6c:	10800003 	ldbu	r2,0(r2)
  817c70:	10803fcc 	andi	r2,r2,255
  817c74:	1080201c 	xori	r2,r2,128
  817c78:	10bfe004 	addi	r2,r2,-128
  817c7c:	10800b98 	cmpnei	r2,r2,46
  817c80:	1000021e 	bne	r2,zero,817c8c <check_file_name_for_FAT16_compliance+0x20c>
			last_period = index;
  817c84:	e0bffd17 	ldw	r2,-12(fp)
  817c88:	e0bffb15 	stw	r2,-20(fp)
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
  817c8c:	e0bffd17 	ldw	r2,-12(fp)
  817c90:	10800044 	addi	r2,r2,1
  817c94:	e0bffd15 	stw	r2,-12(fp)
  817c98:	e0fffd17 	ldw	r3,-12(fp)
  817c9c:	e0bffe17 	ldw	r2,-8(fp)
  817ca0:	18bf8716 	blt	r3,r2,817ac0 <check_file_name_for_FAT16_compliance+0x40>
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
  817ca4:	e0fffe17 	ldw	r3,-8(fp)
  817ca8:	e0bfff17 	ldw	r2,-4(fp)
  817cac:	1885883a 	add	r2,r3,r2
  817cb0:	10bfffc4 	addi	r2,r2,-1
  817cb4:	10800003 	ldbu	r2,0(r2)
  817cb8:	10803fcc 	andi	r2,r2,255
  817cbc:	1080201c 	xori	r2,r2,128
  817cc0:	10bfe004 	addi	r2,r2,-128
  817cc4:	10801720 	cmpeqi	r2,r2,92
  817cc8:	10000a1e 	bne	r2,zero,817cf4 <check_file_name_for_FAT16_compliance+0x274>
  817ccc:	e0fffe17 	ldw	r3,-8(fp)
  817cd0:	e0bfff17 	ldw	r2,-4(fp)
  817cd4:	1885883a 	add	r2,r3,r2
  817cd8:	10bfffc4 	addi	r2,r2,-1
  817cdc:	10800003 	ldbu	r2,0(r2)
  817ce0:	10803fcc 	andi	r2,r2,255
  817ce4:	1080201c 	xori	r2,r2,128
  817ce8:	10bfe004 	addi	r2,r2,-128
  817cec:	10800bd8 	cmpnei	r2,r2,47
  817cf0:	1000011e 	bne	r2,zero,817cf8 <check_file_name_for_FAT16_compliance+0x278>
		result = false;
  817cf4:	e03ffa15 	stw	zero,-24(fp)
	}
	return result;
  817cf8:	e0bffa17 	ldw	r2,-24(fp)
}
  817cfc:	e037883a 	mov	sp,fp
  817d00:	dfc00117 	ldw	ra,4(sp)
  817d04:	df000017 	ldw	fp,0(sp)
  817d08:	dec00204 	addi	sp,sp,8
  817d0c:	f800283a 	ret

00817d10 <get_dir_divider_location>:

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
  817d10:	defffb04 	addi	sp,sp,-20
  817d14:	dfc00415 	stw	ra,16(sp)
  817d18:	df000315 	stw	fp,12(sp)
  817d1c:	df000304 	addi	fp,sp,12
  817d20:	e13fff15 	stw	r4,-4(fp)
	int index = 0;
  817d24:	e03ffe15 	stw	zero,-8(fp)
	int length = strlen(name);
  817d28:	e13fff17 	ldw	r4,-4(fp)
  817d2c:	080a0980 	call	80a098 <strlen>
  817d30:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
  817d34:	e03ffe15 	stw	zero,-8(fp)
  817d38:	00001706 	br	817d98 <get_dir_divider_location+0x88>
		if ((name[index] == '\\') || (name[index] == '/')) {
  817d3c:	e0bffe17 	ldw	r2,-8(fp)
  817d40:	1007883a 	mov	r3,r2
  817d44:	e0bfff17 	ldw	r2,-4(fp)
  817d48:	1885883a 	add	r2,r3,r2
  817d4c:	10800003 	ldbu	r2,0(r2)
  817d50:	10803fcc 	andi	r2,r2,255
  817d54:	1080201c 	xori	r2,r2,128
  817d58:	10bfe004 	addi	r2,r2,-128
  817d5c:	10801720 	cmpeqi	r2,r2,92
  817d60:	1000101e 	bne	r2,zero,817da4 <get_dir_divider_location+0x94>
  817d64:	e0bffe17 	ldw	r2,-8(fp)
  817d68:	1007883a 	mov	r3,r2
  817d6c:	e0bfff17 	ldw	r2,-4(fp)
  817d70:	1885883a 	add	r2,r3,r2
  817d74:	10800003 	ldbu	r2,0(r2)
  817d78:	10803fcc 	andi	r2,r2,255
  817d7c:	1080201c 	xori	r2,r2,128
  817d80:	10bfe004 	addi	r2,r2,-128
  817d84:	10800be0 	cmpeqi	r2,r2,47
  817d88:	1000061e 	bne	r2,zero,817da4 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  817d8c:	e0bffe17 	ldw	r2,-8(fp)
  817d90:	10800044 	addi	r2,r2,1
  817d94:	e0bffe15 	stw	r2,-8(fp)
  817d98:	e0fffe17 	ldw	r3,-8(fp)
  817d9c:	e0bffd17 	ldw	r2,-12(fp)
  817da0:	18bfe616 	blt	r3,r2,817d3c <get_dir_divider_location+0x2c>
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
  817da4:	e0fffe17 	ldw	r3,-8(fp)
  817da8:	e0bffd17 	ldw	r2,-12(fp)
  817dac:	1880021e 	bne	r3,r2,817db8 <get_dir_divider_location+0xa8>
		index = -1;
  817db0:	00bfffc4 	movi	r2,-1
  817db4:	e0bffe15 	stw	r2,-8(fp)
	}

	return index;
  817db8:	e0bffe17 	ldw	r2,-8(fp)
}
  817dbc:	e037883a 	mov	sp,fp
  817dc0:	dfc00117 	ldw	ra,4(sp)
  817dc4:	df000017 	ldw	fp,0(sp)
  817dc8:	dec00204 	addi	sp,sp,8
  817dcc:	f800283a 	ret

00817dd0 <match_file_record_to_name_ext>:

bool match_file_record_to_name_ext(t_file_record *file_record, char *name,
		char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
  817dd0:	defff604 	addi	sp,sp,-40
  817dd4:	df000915 	stw	fp,36(sp)
  817dd8:	df000904 	addi	fp,sp,36
  817ddc:	e13ff915 	stw	r4,-28(fp)
  817de0:	e17ffa15 	stw	r5,-24(fp)
  817de4:	e1bffb15 	stw	r6,-20(fp)
	bool match = true;
  817de8:	00800044 	movi	r2,1
  817dec:	e0bff815 	stw	r2,-32(fp)
	int index;

	for (index = 0; index < 8; index++) {
  817df0:	e03ff715 	stw	zero,-36(fp)
  817df4:	00005006 	br	817f38 <match_file_record_to_name_ext+0x168>
		if (CHAR_TO_UPPER(file_record->name[index])
  817df8:	e0fff717 	ldw	r3,-36(fp)
  817dfc:	e0bff917 	ldw	r2,-28(fp)
  817e00:	10c5883a 	add	r2,r2,r3
  817e04:	10800003 	ldbu	r2,0(r2)
  817e08:	10803fcc 	andi	r2,r2,255
  817e0c:	10801870 	cmpltui	r2,r2,97
  817e10:	1000111e 	bne	r2,zero,817e58 <match_file_record_to_name_ext+0x88>
  817e14:	e0fff717 	ldw	r3,-36(fp)
  817e18:	e0bff917 	ldw	r2,-28(fp)
  817e1c:	10c5883a 	add	r2,r2,r3
  817e20:	10800003 	ldbu	r2,0(r2)
  817e24:	10803fcc 	andi	r2,r2,255
  817e28:	10801ee8 	cmpgeui	r2,r2,123
  817e2c:	10000a1e 	bne	r2,zero,817e58 <match_file_record_to_name_ext+0x88>
  817e30:	e0fff717 	ldw	r3,-36(fp)
  817e34:	e0bff917 	ldw	r2,-28(fp)
  817e38:	10c5883a 	add	r2,r2,r3
  817e3c:	10800003 	ldbu	r2,0(r2)
  817e40:	10bff804 	addi	r2,r2,-32
  817e44:	10803fcc 	andi	r2,r2,255
  817e48:	1080201c 	xori	r2,r2,128
  817e4c:	10bfe004 	addi	r2,r2,-128
  817e50:	e0bfff15 	stw	r2,-4(fp)
  817e54:	00000806 	br	817e78 <match_file_record_to_name_ext+0xa8>
  817e58:	e0fff717 	ldw	r3,-36(fp)
  817e5c:	e0bff917 	ldw	r2,-28(fp)
  817e60:	10c5883a 	add	r2,r2,r3
  817e64:	10800003 	ldbu	r2,0(r2)
  817e68:	10803fcc 	andi	r2,r2,255
  817e6c:	1080201c 	xori	r2,r2,128
  817e70:	10bfe004 	addi	r2,r2,-128
  817e74:	e0bfff15 	stw	r2,-4(fp)
  817e78:	e0bff717 	ldw	r2,-36(fp)
  817e7c:	1007883a 	mov	r3,r2
  817e80:	e0bffa17 	ldw	r2,-24(fp)
  817e84:	1885883a 	add	r2,r3,r2
  817e88:	10800003 	ldbu	r2,0(r2)
  817e8c:	10803fcc 	andi	r2,r2,255
  817e90:	1080201c 	xori	r2,r2,128
  817e94:	10bfe004 	addi	r2,r2,-128
  817e98:	10801850 	cmplti	r2,r2,97
  817e9c:	1000151e 	bne	r2,zero,817ef4 <match_file_record_to_name_ext+0x124>
  817ea0:	e0bff717 	ldw	r2,-36(fp)
  817ea4:	1007883a 	mov	r3,r2
  817ea8:	e0bffa17 	ldw	r2,-24(fp)
  817eac:	1885883a 	add	r2,r3,r2
  817eb0:	10800003 	ldbu	r2,0(r2)
  817eb4:	10803fcc 	andi	r2,r2,255
  817eb8:	1080201c 	xori	r2,r2,128
  817ebc:	10bfe004 	addi	r2,r2,-128
  817ec0:	10801ec8 	cmpgei	r2,r2,123
  817ec4:	10000b1e 	bne	r2,zero,817ef4 <match_file_record_to_name_ext+0x124>
  817ec8:	e0bff717 	ldw	r2,-36(fp)
  817ecc:	1007883a 	mov	r3,r2
  817ed0:	e0bffa17 	ldw	r2,-24(fp)
  817ed4:	1885883a 	add	r2,r3,r2
  817ed8:	10800003 	ldbu	r2,0(r2)
  817edc:	10bff804 	addi	r2,r2,-32
  817ee0:	10803fcc 	andi	r2,r2,255
  817ee4:	1080201c 	xori	r2,r2,128
  817ee8:	10bfe004 	addi	r2,r2,-128
  817eec:	e0bffe15 	stw	r2,-8(fp)
  817ef0:	00000906 	br	817f18 <match_file_record_to_name_ext+0x148>
  817ef4:	e0bff717 	ldw	r2,-36(fp)
  817ef8:	1007883a 	mov	r3,r2
  817efc:	e0bffa17 	ldw	r2,-24(fp)
  817f00:	1885883a 	add	r2,r3,r2
  817f04:	10800003 	ldbu	r2,0(r2)
  817f08:	10803fcc 	andi	r2,r2,255
  817f0c:	1080201c 	xori	r2,r2,128
  817f10:	10bfe004 	addi	r2,r2,-128
  817f14:	e0bffe15 	stw	r2,-8(fp)
  817f18:	e0bfff17 	ldw	r2,-4(fp)
  817f1c:	e0fffe17 	ldw	r3,-8(fp)
  817f20:	10c00226 	beq	r2,r3,817f2c <match_file_record_to_name_ext+0x15c>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
  817f24:	e03ff815 	stw	zero,-32(fp)
			break;
  817f28:	00000606 	br	817f44 <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
  817f2c:	e0bff717 	ldw	r2,-36(fp)
  817f30:	10800044 	addi	r2,r2,1
  817f34:	e0bff715 	stw	r2,-36(fp)
  817f38:	e0bff717 	ldw	r2,-36(fp)
  817f3c:	10800210 	cmplti	r2,r2,8
  817f40:	103fad1e 	bne	r2,zero,817df8 <match_file_record_to_name_ext+0x28>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
  817f44:	e03ff715 	stw	zero,-36(fp)
  817f48:	00005406 	br	81809c <match_file_record_to_name_ext+0x2cc>
		if (CHAR_TO_UPPER(file_record->extension[index])
  817f4c:	e0fff717 	ldw	r3,-36(fp)
  817f50:	e0bff917 	ldw	r2,-28(fp)
  817f54:	1885883a 	add	r2,r3,r2
  817f58:	10800204 	addi	r2,r2,8
  817f5c:	10800003 	ldbu	r2,0(r2)
  817f60:	10803fcc 	andi	r2,r2,255
  817f64:	10801870 	cmpltui	r2,r2,97
  817f68:	1000131e 	bne	r2,zero,817fb8 <match_file_record_to_name_ext+0x1e8>
  817f6c:	e0fff717 	ldw	r3,-36(fp)
  817f70:	e0bff917 	ldw	r2,-28(fp)
  817f74:	1885883a 	add	r2,r3,r2
  817f78:	10800204 	addi	r2,r2,8
  817f7c:	10800003 	ldbu	r2,0(r2)
  817f80:	10803fcc 	andi	r2,r2,255
  817f84:	10801ee8 	cmpgeui	r2,r2,123
  817f88:	10000b1e 	bne	r2,zero,817fb8 <match_file_record_to_name_ext+0x1e8>
  817f8c:	e0fff717 	ldw	r3,-36(fp)
  817f90:	e0bff917 	ldw	r2,-28(fp)
  817f94:	1885883a 	add	r2,r3,r2
  817f98:	10800204 	addi	r2,r2,8
  817f9c:	10800003 	ldbu	r2,0(r2)
  817fa0:	10bff804 	addi	r2,r2,-32
  817fa4:	10803fcc 	andi	r2,r2,255
  817fa8:	1080201c 	xori	r2,r2,128
  817fac:	10bfe004 	addi	r2,r2,-128
  817fb0:	e0bffd15 	stw	r2,-12(fp)
  817fb4:	00000906 	br	817fdc <match_file_record_to_name_ext+0x20c>
  817fb8:	e0fff717 	ldw	r3,-36(fp)
  817fbc:	e0bff917 	ldw	r2,-28(fp)
  817fc0:	1885883a 	add	r2,r3,r2
  817fc4:	10800204 	addi	r2,r2,8
  817fc8:	10800003 	ldbu	r2,0(r2)
  817fcc:	10803fcc 	andi	r2,r2,255
  817fd0:	1080201c 	xori	r2,r2,128
  817fd4:	10bfe004 	addi	r2,r2,-128
  817fd8:	e0bffd15 	stw	r2,-12(fp)
  817fdc:	e0bff717 	ldw	r2,-36(fp)
  817fe0:	1007883a 	mov	r3,r2
  817fe4:	e0bffb17 	ldw	r2,-20(fp)
  817fe8:	1885883a 	add	r2,r3,r2
  817fec:	10800003 	ldbu	r2,0(r2)
  817ff0:	10803fcc 	andi	r2,r2,255
  817ff4:	1080201c 	xori	r2,r2,128
  817ff8:	10bfe004 	addi	r2,r2,-128
  817ffc:	10801850 	cmplti	r2,r2,97
  818000:	1000151e 	bne	r2,zero,818058 <match_file_record_to_name_ext+0x288>
  818004:	e0bff717 	ldw	r2,-36(fp)
  818008:	1007883a 	mov	r3,r2
  81800c:	e0bffb17 	ldw	r2,-20(fp)
  818010:	1885883a 	add	r2,r3,r2
  818014:	10800003 	ldbu	r2,0(r2)
  818018:	10803fcc 	andi	r2,r2,255
  81801c:	1080201c 	xori	r2,r2,128
  818020:	10bfe004 	addi	r2,r2,-128
  818024:	10801ec8 	cmpgei	r2,r2,123
  818028:	10000b1e 	bne	r2,zero,818058 <match_file_record_to_name_ext+0x288>
  81802c:	e0bff717 	ldw	r2,-36(fp)
  818030:	1007883a 	mov	r3,r2
  818034:	e0bffb17 	ldw	r2,-20(fp)
  818038:	1885883a 	add	r2,r3,r2
  81803c:	10800003 	ldbu	r2,0(r2)
  818040:	10bff804 	addi	r2,r2,-32
  818044:	10803fcc 	andi	r2,r2,255
  818048:	1080201c 	xori	r2,r2,128
  81804c:	10bfe004 	addi	r2,r2,-128
  818050:	e0bffc15 	stw	r2,-16(fp)
  818054:	00000906 	br	81807c <match_file_record_to_name_ext+0x2ac>
  818058:	e0bff717 	ldw	r2,-36(fp)
  81805c:	1007883a 	mov	r3,r2
  818060:	e0bffb17 	ldw	r2,-20(fp)
  818064:	1885883a 	add	r2,r3,r2
  818068:	10800003 	ldbu	r2,0(r2)
  81806c:	10803fcc 	andi	r2,r2,255
  818070:	1080201c 	xori	r2,r2,128
  818074:	10bfe004 	addi	r2,r2,-128
  818078:	e0bffc15 	stw	r2,-16(fp)
  81807c:	e0bffd17 	ldw	r2,-12(fp)
  818080:	e0fffc17 	ldw	r3,-16(fp)
  818084:	10c00226 	beq	r2,r3,818090 <match_file_record_to_name_ext+0x2c0>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
  818088:	e03ff815 	stw	zero,-32(fp)
			break;
  81808c:	00000606 	br	8180a8 <match_file_record_to_name_ext+0x2d8>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
  818090:	e0bff717 	ldw	r2,-36(fp)
  818094:	10800044 	addi	r2,r2,1
  818098:	e0bff715 	stw	r2,-36(fp)
  81809c:	e0bff717 	ldw	r2,-36(fp)
  8180a0:	108000d0 	cmplti	r2,r2,3
  8180a4:	103fa91e 	bne	r2,zero,817f4c <match_file_record_to_name_ext+0x17c>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
			break;
		}
	}
	return match;
  8180a8:	e0bff817 	ldw	r2,-32(fp)
}
  8180ac:	e037883a 	mov	sp,fp
  8180b0:	df000017 	ldw	fp,0(sp)
  8180b4:	dec00104 	addi	sp,sp,4
  8180b8:	f800283a 	ret

008180bc <get_home_directory_cluster_for_file>:

bool get_home_directory_cluster_for_file(char *file_name,
		int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
  8180bc:	deffe604 	addi	sp,sp,-104
  8180c0:	dfc01915 	stw	ra,100(sp)
  8180c4:	df001815 	stw	fp,96(sp)
  8180c8:	df001804 	addi	fp,sp,96
  8180cc:	e13ffc15 	stw	r4,-16(fp)
  8180d0:	e17ffd15 	stw	r5,-12(fp)
  8180d4:	e1bffe15 	stw	r6,-8(fp)
	bool result = false;
  8180d8:	e03ff715 	stw	zero,-36(fp)
	int home_dir_cluster = 0;
  8180dc:	e03ff615 	stw	zero,-40(fp)
	int location, index;
	int start_location = 0;
  8180e0:	e03ff315 	stw	zero,-52(fp)

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
  8180e4:	e13ffc17 	ldw	r4,-16(fp)
  8180e8:	0817d100 	call	817d10 <get_dir_divider_location>
  8180ec:	e0bff515 	stw	r2,-44(fp)
	while (location > 0) {
  8180f0:	00012206 	br	81857c <get_home_directory_cluster_for_file+0x4c0>
		char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  8180f4:	00800804 	movi	r2,32
  8180f8:	e0bff805 	stb	r2,-32(fp)
  8180fc:	00800804 	movi	r2,32
  818100:	e0bff845 	stb	r2,-31(fp)
  818104:	00800804 	movi	r2,32
  818108:	e0bff885 	stb	r2,-30(fp)
  81810c:	00800804 	movi	r2,32
  818110:	e0bff8c5 	stb	r2,-29(fp)
  818114:	00800804 	movi	r2,32
  818118:	e0bff905 	stb	r2,-28(fp)
  81811c:	00800804 	movi	r2,32
  818120:	e0bff945 	stb	r2,-27(fp)
  818124:	00800804 	movi	r2,32
  818128:	e0bff985 	stb	r2,-26(fp)
  81812c:	00800804 	movi	r2,32
  818130:	e0bff9c5 	stb	r2,-25(fp)
		char extension[3] = { ' ', ' ', ' ' };
  818134:	00800804 	movi	r2,32
  818138:	e0bffa05 	stb	r2,-24(fp)
  81813c:	00800804 	movi	r2,32
  818140:	e0bffa45 	stb	r2,-23(fp)
  818144:	00800804 	movi	r2,32
  818148:	e0bffa85 	stb	r2,-22(fp)
		int ext_index = -1;
  81814c:	00bfffc4 	movi	r2,-1
  818150:	e0bff215 	stw	r2,-56(fp)
		int new_cluster = home_dir_cluster;
  818154:	e0bff617 	ldw	r2,-40(fp)
  818158:	e0bff115 	stw	r2,-60(fp)

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
  81815c:	e03ff415 	stw	zero,-48(fp)
  818160:	00002e06 	br	81821c <get_home_directory_cluster_for_file+0x160>
			if (file_name[index + start_location] == '.') {
  818164:	e0fff417 	ldw	r3,-48(fp)
  818168:	e0bff317 	ldw	r2,-52(fp)
  81816c:	1885883a 	add	r2,r3,r2
  818170:	1007883a 	mov	r3,r2
  818174:	e0bffc17 	ldw	r2,-16(fp)
  818178:	1885883a 	add	r2,r3,r2
  81817c:	10800003 	ldbu	r2,0(r2)
  818180:	10803fcc 	andi	r2,r2,255
  818184:	1080201c 	xori	r2,r2,128
  818188:	10bfe004 	addi	r2,r2,-128
  81818c:	10800b98 	cmpnei	r2,r2,46
  818190:	1000031e 	bne	r2,zero,8181a0 <get_home_directory_cluster_for_file+0xe4>
				ext_index = index;
  818194:	e0bff417 	ldw	r2,-48(fp)
  818198:	e0bff215 	stw	r2,-56(fp)
  81819c:	00001c06 	br	818210 <get_home_directory_cluster_for_file+0x154>
			} else if (ext_index < 0) {
  8181a0:	e0bff217 	ldw	r2,-56(fp)
  8181a4:	1004403a 	cmpge	r2,r2,zero
  8181a8:	10000c1e 	bne	r2,zero,8181dc <get_home_directory_cluster_for_file+0x120>
				name[index] = file_name[index + start_location];
  8181ac:	e13ff417 	ldw	r4,-48(fp)
  8181b0:	e0fff417 	ldw	r3,-48(fp)
  8181b4:	e0bff317 	ldw	r2,-52(fp)
  8181b8:	1885883a 	add	r2,r3,r2
  8181bc:	1007883a 	mov	r3,r2
  8181c0:	e0bffc17 	ldw	r2,-16(fp)
  8181c4:	1885883a 	add	r2,r3,r2
  8181c8:	10c00003 	ldbu	r3,0(r2)
  8181cc:	e0bff804 	addi	r2,fp,-32
  8181d0:	1105883a 	add	r2,r2,r4
  8181d4:	10c00005 	stb	r3,0(r2)
  8181d8:	00000d06 	br	818210 <get_home_directory_cluster_for_file+0x154>
			} else {
				extension[index - ext_index]
  8181dc:	e0fff417 	ldw	r3,-48(fp)
  8181e0:	e0bff217 	ldw	r2,-56(fp)
  8181e4:	1889c83a 	sub	r4,r3,r2
  8181e8:	e0fff417 	ldw	r3,-48(fp)
  8181ec:	e0bff317 	ldw	r2,-52(fp)
  8181f0:	1885883a 	add	r2,r3,r2
  8181f4:	1007883a 	mov	r3,r2
  8181f8:	e0bffc17 	ldw	r2,-16(fp)
  8181fc:	1885883a 	add	r2,r3,r2
  818200:	10c00003 	ldbu	r3,0(r2)
  818204:	e0bffa04 	addi	r2,fp,-24
  818208:	1105883a 	add	r2,r2,r4
  81820c:	10c00005 	stb	r3,0(r2)
		char extension[3] = { ' ', ' ', ' ' };
		int ext_index = -1;
		int new_cluster = home_dir_cluster;

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
  818210:	e0bff417 	ldw	r2,-48(fp)
  818214:	10800044 	addi	r2,r2,1
  818218:	e0bff415 	stw	r2,-48(fp)
  81821c:	e0fff417 	ldw	r3,-48(fp)
  818220:	e0bff517 	ldw	r2,-44(fp)
  818224:	18bfcf16 	blt	r3,r2,818164 <get_home_directory_cluster_for_file+0xa8>
				extension[index - ext_index]
						= file_name[index + start_location];
			}
		}

		if (home_dir_cluster == 0) {
  818228:	e0bff617 	ldw	r2,-40(fp)
  81822c:	1004c03a 	cmpne	r2,r2,zero
  818230:	1000551e 	bne	r2,zero,818388 <get_home_directory_cluster_for_file+0x2cc>
			/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
  818234:	008020b4 	movhi	r2,130
  818238:	10913d04 	addi	r2,r2,17652
  81823c:	1080050b 	ldhu	r2,20(r2)
  818240:	10bfffcc 	andi	r2,r2,65535
  818244:	1008917a 	slli	r4,r2,5
  818248:	008020b4 	movhi	r2,130
  81824c:	10913d04 	addi	r2,r2,17652
  818250:	1080030b 	ldhu	r2,12(r2)
  818254:	117fffcc 	andi	r5,r2,65535
  818258:	0808dcc0 	call	808dcc <__divsi3>
  81825c:	e0bff015 	stw	r2,-64(fp)
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  818260:	e03fef15 	stw	zero,-68(fp)
  818264:	00003806 	br	818348 <get_home_directory_cluster_for_file+0x28c>
				if (Read_Sector_Data(sector_index
  818268:	008020b4 	movhi	r2,130
  81826c:	10913d04 	addi	r2,r2,17652
  818270:	10c01317 	ldw	r3,76(r2)
  818274:	e0bfef17 	ldw	r2,-68(fp)
  818278:	1885883a 	add	r2,r3,r2
  81827c:	1009883a 	mov	r4,r2
  818280:	d1674c17 	ldw	r5,-25296(gp)
  818284:	08168e00 	call	8168e0 <Read_Sector_Data>
  818288:	1005003a 	cmpeq	r2,r2,zero
  81828c:	1000311e 	bne	r2,zero,818354 <get_home_directory_cluster_for_file+0x298>
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  818290:	e03fee15 	stw	zero,-72(fp)
  818294:	00002306 	br	818324 <get_home_directory_cluster_for_file+0x268>

						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
  818298:	e0bfee17 	ldw	r2,-72(fp)
  81829c:	1008917a 	slli	r4,r2,5
  8182a0:	e1ffef17 	ldw	r7,-68(fp)
  8182a4:	e17ffe17 	ldw	r5,-8(fp)
  8182a8:	000d883a 	mov	r6,zero
  8182ac:	0816d280 	call	816d28 <Read_File_Record_At_Offset>
								file_record, 0, sector_index);
						if ((file_record->name[0] != 0xe5)
  8182b0:	e0bffe17 	ldw	r2,-8(fp)
  8182b4:	10800003 	ldbu	r2,0(r2)
  8182b8:	10803fcc 	andi	r2,r2,255
  8182bc:	10803960 	cmpeqi	r2,r2,229
  8182c0:	1000151e 	bne	r2,zero,818318 <get_home_directory_cluster_for_file+0x25c>
  8182c4:	e0bffe17 	ldw	r2,-8(fp)
  8182c8:	10800003 	ldbu	r2,0(r2)
  8182cc:	10803fcc 	andi	r2,r2,255
  8182d0:	1005003a 	cmpeq	r2,r2,zero
  8182d4:	1000101e 	bne	r2,zero,818318 <get_home_directory_cluster_for_file+0x25c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
  8182d8:	e17ff804 	addi	r5,fp,-32
  8182dc:	e1bffa04 	addi	r6,fp,-24
  8182e0:	e13ffe17 	ldw	r4,-8(fp)
  8182e4:	0817dd00 	call	817dd0 <match_file_record_to_name_ext>
  8182e8:	e0bfed15 	stw	r2,-76(fp)
							if (match) {
  8182ec:	e0bfed17 	ldw	r2,-76(fp)
  8182f0:	1005003a 	cmpeq	r2,r2,zero
  8182f4:	1000081e 	bne	r2,zero,818318 <get_home_directory_cluster_for_file+0x25c>
								new_cluster = file_record->start_cluster_index;
  8182f8:	e0bffe17 	ldw	r2,-8(fp)
  8182fc:	1080058b 	ldhu	r2,22(r2)
  818300:	10bfffcc 	andi	r2,r2,65535
  818304:	e0bff115 	stw	r2,-60(fp)
								file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
  818308:	e0fffe17 	ldw	r3,-8(fp)
  81830c:	00800044 	movi	r2,1
  818310:	18800a15 	stw	r2,40(r3)
								break;
  818314:	00000606 	br	818330 <get_home_directory_cluster_for_file+0x274>
				if (Read_Sector_Data(sector_index
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  818318:	e0bfee17 	ldw	r2,-72(fp)
  81831c:	10800044 	addi	r2,r2,1
  818320:	e0bfee15 	stw	r2,-72(fp)
  818324:	e0bfee17 	ldw	r2,-72(fp)
  818328:	10800410 	cmplti	r2,r2,16
  81832c:	103fda1e 	bne	r2,zero,818298 <get_home_directory_cluster_for_file+0x1dc>
						}
					}
				} else {
					break;
				}
				if (new_cluster != home_dir_cluster) {
  818330:	e0fff117 	ldw	r3,-60(fp)
  818334:	e0bff617 	ldw	r2,-40(fp)
  818338:	1880061e 	bne	r3,r2,818354 <get_home_directory_cluster_for_file+0x298>
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  81833c:	e0bfef17 	ldw	r2,-68(fp)
  818340:	10800044 	addi	r2,r2,1
  818344:	e0bfef15 	stw	r2,-68(fp)
  818348:	e0ffef17 	ldw	r3,-68(fp)
  81834c:	e0bff017 	ldw	r2,-64(fp)
  818350:	18bfc516 	blt	r3,r2,818268 <get_home_directory_cluster_for_file+0x1ac>
				}
				if (new_cluster != home_dir_cluster) {
					break;
				}
			}
			if (new_cluster != home_dir_cluster) {
  818354:	e0fff117 	ldw	r3,-60(fp)
  818358:	e0bff617 	ldw	r2,-40(fp)
  81835c:	18800826 	beq	r3,r2,818380 <get_home_directory_cluster_for_file+0x2c4>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
  818360:	e0bff117 	ldw	r2,-60(fp)
  818364:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
  818368:	e0fff317 	ldw	r3,-52(fp)
  81836c:	e0bff517 	ldw	r2,-44(fp)
  818370:	1885883a 	add	r2,r3,r2
  818374:	10800044 	addi	r2,r2,1
  818378:	e0bff315 	stw	r2,-52(fp)
  81837c:	00007406 	br	818550 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
  818380:	e03fff15 	stw	zero,-4(fp)
  818384:	00008c06 	br	8185b8 <get_home_directory_cluster_for_file+0x4fc>
			}
		} else {
			// This is a subdirectory that can have any number of elements. So scan through it as though it was a file
			// and see if you can find the directory of interest.
			int cluster = home_dir_cluster;
  818388:	e0bff617 	ldw	r2,-40(fp)
  81838c:	e0bfec15 	stw	r2,-80(fp)

			do {
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
  818390:	e0bfec17 	ldw	r2,-80(fp)
  818394:	10ffff84 	addi	r3,r2,-2
  818398:	008020b4 	movhi	r2,130
  81839c:	10913d04 	addi	r2,r2,17652
  8183a0:	10800383 	ldbu	r2,14(r2)
  8183a4:	10803fcc 	andi	r2,r2,255
  8183a8:	1885383a 	mul	r2,r3,r2
  8183ac:	1007883a 	mov	r3,r2
  8183b0:	008020b4 	movhi	r2,130
  8183b4:	10913d04 	addi	r2,r2,17652
  8183b8:	10801417 	ldw	r2,80(r2)
  8183bc:	1885883a 	add	r2,r3,r2
  8183c0:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index;

				for (sector_index = 0; sector_index
  8183c4:	e03fea15 	stw	zero,-88(fp)
  8183c8:	00003206 	br	818494 <get_home_directory_cluster_for_file+0x3d8>
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
  8183cc:	e0ffea17 	ldw	r3,-88(fp)
  8183d0:	e0bfeb17 	ldw	r2,-84(fp)
  8183d4:	1889883a 	add	r4,r3,r2
  8183d8:	d1674c17 	ldw	r5,-25296(gp)
  8183dc:	08168e00 	call	8168e0 <Read_Sector_Data>
  8183e0:	1005003a 	cmpeq	r2,r2,zero
  8183e4:	1000311e 	bne	r2,zero,8184ac <get_home_directory_cluster_for_file+0x3f0>
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
  8183e8:	e03fe915 	stw	zero,-92(fp)
  8183ec:	00002006 	br	818470 <get_home_directory_cluster_for_file+0x3b4>
							// Read file record.
							Read_File_Record_At_Offset(file_counter * 32,
  8183f0:	e0bfe917 	ldw	r2,-92(fp)
  8183f4:	1008917a 	slli	r4,r2,5
  8183f8:	e1bfec17 	ldw	r6,-80(fp)
  8183fc:	e1ffea17 	ldw	r7,-88(fp)
  818400:	e17ffe17 	ldw	r5,-8(fp)
  818404:	0816d280 	call	816d28 <Read_File_Record_At_Offset>
									file_record, cluster, sector_index);
							if ((file_record->name[0] != 0xe5)
  818408:	e0bffe17 	ldw	r2,-8(fp)
  81840c:	10800003 	ldbu	r2,0(r2)
  818410:	10803fcc 	andi	r2,r2,255
  818414:	10803960 	cmpeqi	r2,r2,229
  818418:	1000121e 	bne	r2,zero,818464 <get_home_directory_cluster_for_file+0x3a8>
  81841c:	e0bffe17 	ldw	r2,-8(fp)
  818420:	10800003 	ldbu	r2,0(r2)
  818424:	10803fcc 	andi	r2,r2,255
  818428:	1005003a 	cmpeq	r2,r2,zero
  81842c:	10000d1e 	bne	r2,zero,818464 <get_home_directory_cluster_for_file+0x3a8>
									&& (file_record->name[0] != 0x00)) {
								bool match = match_file_record_to_name_ext(
										file_record, name, extension);
  818430:	e17ff804 	addi	r5,fp,-32
  818434:	e1bffa04 	addi	r6,fp,-24
  818438:	e13ffe17 	ldw	r4,-8(fp)
  81843c:	0817dd00 	call	817dd0 <match_file_record_to_name_ext>
  818440:	e0bfe815 	stw	r2,-96(fp)
								if (match) {
  818444:	e0bfe817 	ldw	r2,-96(fp)
  818448:	1005003a 	cmpeq	r2,r2,zero
  81844c:	1000051e 	bne	r2,zero,818464 <get_home_directory_cluster_for_file+0x3a8>
									new_cluster
  818450:	e0bffe17 	ldw	r2,-8(fp)
  818454:	1080058b 	ldhu	r2,22(r2)
  818458:	10bfffcc 	andi	r2,r2,65535
  81845c:	e0bff115 	stw	r2,-60(fp)
											= file_record->start_cluster_index;
									break;
  818460:	00000606 	br	81847c <get_home_directory_cluster_for_file+0x3c0>
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
  818464:	e0bfe917 	ldw	r2,-92(fp)
  818468:	10800044 	addi	r2,r2,1
  81846c:	e0bfe915 	stw	r2,-92(fp)
  818470:	e0bfe917 	ldw	r2,-92(fp)
  818474:	10800410 	cmplti	r2,r2,16
  818478:	103fdd1e 	bne	r2,zero,8183f0 <get_home_directory_cluster_for_file+0x334>
							}
						}
					} else {
						break;
					}
					if (new_cluster != home_dir_cluster) {
  81847c:	e0fff117 	ldw	r3,-60(fp)
  818480:	e0bff617 	ldw	r2,-40(fp)
  818484:	1880091e 	bne	r3,r2,8184ac <get_home_directory_cluster_for_file+0x3f0>
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
						< boot_sector_data.sectors_per_cluster; sector_index++) {
  818488:	e0bfea17 	ldw	r2,-88(fp)
  81848c:	10800044 	addi	r2,r2,1
  818490:	e0bfea15 	stw	r2,-88(fp)
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
  818494:	008020b4 	movhi	r2,130
  818498:	10913d04 	addi	r2,r2,17652
  81849c:	10800383 	ldbu	r2,14(r2)
  8184a0:	10c03fcc 	andi	r3,r2,255
  8184a4:	e0bfea17 	ldw	r2,-88(fp)
  8184a8:	10ffc816 	blt	r2,r3,8183cc <get_home_directory_cluster_for_file+0x310>
						break;
					}
				}
				// If this is the end of the cluster and the directory has not been found, then see if there is another cluster
				// that holds data for the current directory.
				if (new_cluster == home_dir_cluster) {
  8184ac:	e0fff117 	ldw	r3,-60(fp)
  8184b0:	e0bff617 	ldw	r2,-40(fp)
  8184b4:	1880131e 	bne	r3,r2,818504 <get_home_directory_cluster_for_file+0x448>
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster)) {
  8184b8:	e13ff117 	ldw	r4,-60(fp)
  8184bc:	e17ffb04 	addi	r5,fp,-20
  8184c0:	08169dc0 	call	8169dc <get_cluster_flag>
  8184c4:	1005003a 	cmpeq	r2,r2,zero
  8184c8:	10000c1e 	bne	r2,zero,8184fc <get_home_directory_cluster_for_file+0x440>
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
  8184cc:	e0bffb0b 	ldhu	r2,-20(fp)
  8184d0:	10bfffcc 	andi	r2,r2,65535
  8184d4:	10fffe0c 	andi	r3,r2,65528
  8184d8:	00bffe14 	movui	r2,65528
  8184dc:	1880021e 	bne	r3,r2,8184e8 <get_home_directory_cluster_for_file+0x42c>
							return false;
  8184e0:	e03fff15 	stw	zero,-4(fp)
  8184e4:	00003406 	br	8185b8 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
  8184e8:	e0bffb0b 	ldhu	r2,-20(fp)
  8184ec:	10bfffcc 	andi	r2,r2,65535
  8184f0:	10bffe0c 	andi	r2,r2,65528
  8184f4:	e0bff115 	stw	r2,-60(fp)
  8184f8:	00000206 	br	818504 <get_home_directory_cluster_for_file+0x448>
					} else {
						// Directory path is invalid.                 
						return false;
  8184fc:	e03fff15 	stw	zero,-4(fp)
  818500:	00002d06 	br	8185b8 <get_home_directory_cluster_for_file+0x4fc>
					}
				}
			} while ((cluster < 0x0000fff8)
					&& (new_cluster == home_dir_cluster));
  818504:	e0ffec17 	ldw	r3,-80(fp)
  818508:	00bffdd4 	movui	r2,65527
  81850c:	10c00316 	blt	r2,r3,81851c <get_home_directory_cluster_for_file+0x460>
  818510:	e0fff117 	ldw	r3,-60(fp)
  818514:	e0bff617 	ldw	r2,-40(fp)
  818518:	18bf9d26 	beq	r3,r2,818390 <get_home_directory_cluster_for_file+0x2d4>
			if (new_cluster != home_dir_cluster) {
  81851c:	e0fff117 	ldw	r3,-60(fp)
  818520:	e0bff617 	ldw	r2,-40(fp)
  818524:	18800826 	beq	r3,r2,818548 <get_home_directory_cluster_for_file+0x48c>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
  818528:	e0bff117 	ldw	r2,-60(fp)
  81852c:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
  818530:	e0fff317 	ldw	r3,-52(fp)
  818534:	e0bff517 	ldw	r2,-44(fp)
  818538:	1885883a 	add	r2,r3,r2
  81853c:	10800044 	addi	r2,r2,1
  818540:	e0bff315 	stw	r2,-52(fp)
  818544:	00000206 	br	818550 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
  818548:	e03fff15 	stw	zero,-4(fp)
  81854c:	00001a06 	br	8185b8 <get_home_directory_cluster_for_file+0x4fc>
			}
		}
		location = get_dir_divider_location(&(file_name[start_location]));
  818550:	e0bff317 	ldw	r2,-52(fp)
  818554:	1007883a 	mov	r3,r2
  818558:	e0bffc17 	ldw	r2,-16(fp)
  81855c:	1889883a 	add	r4,r3,r2
  818560:	0817d100 	call	817d10 <get_dir_divider_location>
  818564:	e0bff515 	stw	r2,-44(fp)
		if (location < 0) {
  818568:	e0bff517 	ldw	r2,-44(fp)
  81856c:	1004403a 	cmpge	r2,r2,zero
  818570:	1000021e 	bne	r2,zero,81857c <get_home_directory_cluster_for_file+0x4c0>
			// Directory has been located.
			result = true;
  818574:	00800044 	movi	r2,1
  818578:	e0bff715 	stw	r2,-36(fp)
	int location, index;
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
  81857c:	e0bff517 	ldw	r2,-44(fp)
  818580:	10800048 	cmpgei	r2,r2,1
  818584:	103edb1e 	bne	r2,zero,8180f4 <get_home_directory_cluster_for_file+0x38>
			// Directory has been located.
			result = true;
		}
	}

	*home_directory_cluster = home_dir_cluster;
  818588:	e0fffd17 	ldw	r3,-12(fp)
  81858c:	e0bff617 	ldw	r2,-40(fp)
  818590:	18800015 	stw	r2,0(r3)
	if (home_dir_cluster == 0) {
  818594:	e0bff617 	ldw	r2,-40(fp)
  818598:	1004c03a 	cmpne	r2,r2,zero
  81859c:	1000041e 	bne	r2,zero,8185b0 <get_home_directory_cluster_for_file+0x4f4>
		file_record->file_record_cluster = 0; // Home directory is the root directory.
  8185a0:	e0bffe17 	ldw	r2,-8(fp)
  8185a4:	10000a15 	stw	zero,40(r2)
		result = true;
  8185a8:	00800044 	movi	r2,1
  8185ac:	e0bff715 	stw	r2,-36(fp)
	}
	return result;
  8185b0:	e0bff717 	ldw	r2,-36(fp)
  8185b4:	e0bfff15 	stw	r2,-4(fp)
  8185b8:	e0bfff17 	ldw	r2,-4(fp)
}
  8185bc:	e037883a 	mov	sp,fp
  8185c0:	dfc00117 	ldw	ra,4(sp)
  8185c4:	df000017 	ldw	fp,0(sp)
  8185c8:	dec00204 	addi	sp,sp,8
  8185cc:	f800283a 	ret

008185d0 <find_file_in_directory>:

bool find_file_in_directory(int directory_start_cluster, char *file_name,
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  8185d0:	deffe704 	addi	sp,sp,-100
  8185d4:	dfc01815 	stw	ra,96(sp)
  8185d8:	df001715 	stw	fp,92(sp)
  8185dc:	df001704 	addi	fp,sp,92
  8185e0:	e13ffc15 	stw	r4,-16(fp)
  8185e4:	e17ffd15 	stw	r5,-12(fp)
  8185e8:	e1bffe15 	stw	r6,-8(fp)
	int location = get_dir_divider_location(file_name);
  8185ec:	e13ffd17 	ldw	r4,-12(fp)
  8185f0:	0817d100 	call	817d10 <get_dir_divider_location>
  8185f4:	e0bff715 	stw	r2,-36(fp)
	int last_dir_separator = 0;
  8185f8:	e03ff615 	stw	zero,-40(fp)
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  8185fc:	00800804 	movi	r2,32
  818600:	e0bff805 	stb	r2,-32(fp)
  818604:	00800804 	movi	r2,32
  818608:	e0bff845 	stb	r2,-31(fp)
  81860c:	00800804 	movi	r2,32
  818610:	e0bff885 	stb	r2,-30(fp)
  818614:	00800804 	movi	r2,32
  818618:	e0bff8c5 	stb	r2,-29(fp)
  81861c:	00800804 	movi	r2,32
  818620:	e0bff905 	stb	r2,-28(fp)
  818624:	00800804 	movi	r2,32
  818628:	e0bff945 	stb	r2,-27(fp)
  81862c:	00800804 	movi	r2,32
  818630:	e0bff985 	stb	r2,-26(fp)
  818634:	00800804 	movi	r2,32
  818638:	e0bff9c5 	stb	r2,-25(fp)
	char extension[3] = { ' ', ' ', ' ' };
  81863c:	00800804 	movi	r2,32
  818640:	e0bffa05 	stb	r2,-24(fp)
  818644:	00800804 	movi	r2,32
  818648:	e0bffa45 	stb	r2,-23(fp)
  81864c:	00800804 	movi	r2,32
  818650:	e0bffa85 	stb	r2,-22(fp)
	int ext_index = -1;
  818654:	00bfffc4 	movi	r2,-1
  818658:	e0bff515 	stw	r2,-44(fp)
	int cluster = directory_start_cluster;
  81865c:	e0bffc17 	ldw	r2,-16(fp)
  818660:	e0bff415 	stw	r2,-48(fp)
	int index;
	int length = strlen(file_name);
  818664:	e13ffd17 	ldw	r4,-12(fp)
  818668:	080a0980 	call	80a098 <strlen>
  81866c:	e0bff215 	stw	r2,-56(fp)
	bool result = false;
  818670:	e03ff115 	stw	zero,-60(fp)

	// Skip through all directory separators.
	while (location > 0) {
  818674:	00000b06 	br	8186a4 <find_file_in_directory+0xd4>
		last_dir_separator = last_dir_separator + location + 1;
  818678:	e0fff617 	ldw	r3,-40(fp)
  81867c:	e0bff717 	ldw	r2,-36(fp)
  818680:	1885883a 	add	r2,r3,r2
  818684:	10800044 	addi	r2,r2,1
  818688:	e0bff615 	stw	r2,-40(fp)
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
  81868c:	e0bff617 	ldw	r2,-40(fp)
  818690:	1007883a 	mov	r3,r2
  818694:	e0bffd17 	ldw	r2,-12(fp)
  818698:	1889883a 	add	r4,r3,r2
  81869c:	0817d100 	call	817d10 <get_dir_divider_location>
  8186a0:	e0bff715 	stw	r2,-36(fp)
	int index;
	int length = strlen(file_name);
	bool result = false;

	// Skip through all directory separators.
	while (location > 0) {
  8186a4:	e0bff717 	ldw	r2,-36(fp)
  8186a8:	10800048 	cmpgei	r2,r2,1
  8186ac:	103ff21e 	bne	r2,zero,818678 <find_file_in_directory+0xa8>
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
  8186b0:	e0bff617 	ldw	r2,-40(fp)
  8186b4:	e0bff315 	stw	r2,-52(fp)
  8186b8:	00002b06 	br	818768 <find_file_in_directory+0x198>
		if (file_name[index] == '.') {
  8186bc:	e0bff317 	ldw	r2,-52(fp)
  8186c0:	1007883a 	mov	r3,r2
  8186c4:	e0bffd17 	ldw	r2,-12(fp)
  8186c8:	1885883a 	add	r2,r3,r2
  8186cc:	10800003 	ldbu	r2,0(r2)
  8186d0:	10803fcc 	andi	r2,r2,255
  8186d4:	1080201c 	xori	r2,r2,128
  8186d8:	10bfe004 	addi	r2,r2,-128
  8186dc:	10800b98 	cmpnei	r2,r2,46
  8186e0:	1000031e 	bne	r2,zero,8186f0 <find_file_in_directory+0x120>
			ext_index = index;
  8186e4:	e0bff317 	ldw	r2,-52(fp)
  8186e8:	e0bff515 	stw	r2,-44(fp)
  8186ec:	00001b06 	br	81875c <find_file_in_directory+0x18c>
		} else if (ext_index < 0) {
  8186f0:	e0bff517 	ldw	r2,-44(fp)
  8186f4:	1004403a 	cmpge	r2,r2,zero
  8186f8:	10000c1e 	bne	r2,zero,81872c <find_file_in_directory+0x15c>
			name[index - last_dir_separator] = file_name[index];
  8186fc:	e0fff317 	ldw	r3,-52(fp)
  818700:	e0bff617 	ldw	r2,-40(fp)
  818704:	1889c83a 	sub	r4,r3,r2
  818708:	e0bff317 	ldw	r2,-52(fp)
  81870c:	1007883a 	mov	r3,r2
  818710:	e0bffd17 	ldw	r2,-12(fp)
  818714:	1885883a 	add	r2,r3,r2
  818718:	10c00003 	ldbu	r3,0(r2)
  81871c:	e0bff804 	addi	r2,fp,-32
  818720:	1105883a 	add	r2,r2,r4
  818724:	10c00005 	stb	r3,0(r2)
  818728:	00000c06 	br	81875c <find_file_in_directory+0x18c>
		} else {
			extension[index - ext_index - 1] = file_name[index];
  81872c:	e0fff317 	ldw	r3,-52(fp)
  818730:	e0bff517 	ldw	r2,-44(fp)
  818734:	1885c83a 	sub	r2,r3,r2
  818738:	113fffc4 	addi	r4,r2,-1
  81873c:	e0bff317 	ldw	r2,-52(fp)
  818740:	1007883a 	mov	r3,r2
  818744:	e0bffd17 	ldw	r2,-12(fp)
  818748:	1885883a 	add	r2,r3,r2
  81874c:	10c00003 	ldbu	r3,0(r2)
  818750:	e0bffa04 	addi	r2,fp,-24
  818754:	1105883a 	add	r2,r2,r4
  818758:	10c00005 	stb	r3,0(r2)
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
  81875c:	e0bff317 	ldw	r2,-52(fp)
  818760:	10800044 	addi	r2,r2,1
  818764:	e0bff315 	stw	r2,-52(fp)
  818768:	e0fff317 	ldw	r3,-52(fp)
  81876c:	e0bff217 	ldw	r2,-56(fp)
  818770:	18bfd216 	blt	r3,r2,8186bc <find_file_in_directory+0xec>
			extension[index - ext_index - 1] = file_name[index];
		}
	}

	// Look for the file.
	if (directory_start_cluster == 0) {
  818774:	e0bffc17 	ldw	r2,-16(fp)
  818778:	1004c03a 	cmpne	r2,r2,zero
  81877c:	1000441e 	bne	r2,zero,818890 <find_file_in_directory+0x2c0>
		/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
  818780:	008020b4 	movhi	r2,130
  818784:	10913d04 	addi	r2,r2,17652
  818788:	1080050b 	ldhu	r2,20(r2)
  81878c:	10bfffcc 	andi	r2,r2,65535
  818790:	1008917a 	slli	r4,r2,5
  818794:	008020b4 	movhi	r2,130
  818798:	10913d04 	addi	r2,r2,17652
  81879c:	1080030b 	ldhu	r2,12(r2)
  8187a0:	117fffcc 	andi	r5,r2,65535
  8187a4:	0808dcc0 	call	808dcc <__divsi3>
  8187a8:	e0bff015 	stw	r2,-64(fp)
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  8187ac:	e03fef15 	stw	zero,-68(fp)
  8187b0:	00003306 	br	818880 <find_file_in_directory+0x2b0>
			if (Read_Sector_Data(sector_index
  8187b4:	008020b4 	movhi	r2,130
  8187b8:	10913d04 	addi	r2,r2,17652
  8187bc:	10c01317 	ldw	r3,76(r2)
  8187c0:	e0bfef17 	ldw	r2,-68(fp)
  8187c4:	1885883a 	add	r2,r3,r2
  8187c8:	1009883a 	mov	r4,r2
  8187cc:	d1674c17 	ldw	r5,-25296(gp)
  8187d0:	08168e00 	call	8168e0 <Read_Sector_Data>
  8187d4:	1005003a 	cmpeq	r2,r2,zero
  8187d8:	10008e1e 	bne	r2,zero,818a14 <find_file_in_directory+0x444>
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  8187dc:	e03fee15 	stw	zero,-72(fp)
  8187e0:	00001e06 	br	81885c <find_file_in_directory+0x28c>
					// Read file record.
					Read_File_Record_At_Offset(file_counter * 32, file_record,
  8187e4:	e0bfee17 	ldw	r2,-72(fp)
  8187e8:	1008917a 	slli	r4,r2,5
  8187ec:	e1ffef17 	ldw	r7,-68(fp)
  8187f0:	e17ffe17 	ldw	r5,-8(fp)
  8187f4:	000d883a 	mov	r6,zero
  8187f8:	0816d280 	call	816d28 <Read_File_Record_At_Offset>
							0, sector_index);
					if ((file_record->name[0] != 0xe5) && (file_record->name[0]
  8187fc:	e0bffe17 	ldw	r2,-8(fp)
  818800:	10800003 	ldbu	r2,0(r2)
  818804:	10803fcc 	andi	r2,r2,255
  818808:	10803960 	cmpeqi	r2,r2,229
  81880c:	1000101e 	bne	r2,zero,818850 <find_file_in_directory+0x280>
  818810:	e0bffe17 	ldw	r2,-8(fp)
  818814:	10800003 	ldbu	r2,0(r2)
  818818:	10803fcc 	andi	r2,r2,255
  81881c:	1005003a 	cmpeq	r2,r2,zero
  818820:	10000b1e 	bne	r2,zero,818850 <find_file_in_directory+0x280>
							!= 0x00)) {
						bool match = match_file_record_to_name_ext(file_record,
								name, extension);
  818824:	e17ff804 	addi	r5,fp,-32
  818828:	e1bffa04 	addi	r6,fp,-24
  81882c:	e13ffe17 	ldw	r4,-8(fp)
  818830:	0817dd00 	call	817dd0 <match_file_record_to_name_ext>
  818834:	e0bfed15 	stw	r2,-76(fp)

						if (match) {
  818838:	e0bfed17 	ldw	r2,-76(fp)
  81883c:	1005003a 	cmpeq	r2,r2,zero
  818840:	1000031e 	bne	r2,zero,818850 <find_file_in_directory+0x280>
							result = true;
  818844:	00800044 	movi	r2,1
  818848:	e0bff115 	stw	r2,-60(fp)
							break;
  81884c:	00000606 	br	818868 <find_file_in_directory+0x298>
			if (Read_Sector_Data(sector_index
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  818850:	e0bfee17 	ldw	r2,-72(fp)
  818854:	10800044 	addi	r2,r2,1
  818858:	e0bfee15 	stw	r2,-72(fp)
  81885c:	e0bfee17 	ldw	r2,-72(fp)
  818860:	10800410 	cmplti	r2,r2,16
  818864:	103fdf1e 	bne	r2,zero,8187e4 <find_file_in_directory+0x214>
					}
				}
			} else {
				break;
			}
			if (result) {
  818868:	e0bff117 	ldw	r2,-60(fp)
  81886c:	1004c03a 	cmpne	r2,r2,zero
  818870:	1000681e 	bne	r2,zero,818a14 <find_file_in_directory+0x444>
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  818874:	e0bfef17 	ldw	r2,-68(fp)
  818878:	10800044 	addi	r2,r2,1
  81887c:	e0bfef15 	stw	r2,-68(fp)
  818880:	e0ffef17 	ldw	r3,-68(fp)
  818884:	e0bff017 	ldw	r2,-64(fp)
  818888:	18bfca16 	blt	r3,r2,8187b4 <find_file_in_directory+0x1e4>
  81888c:	00006106 	br	818a14 <find_file_in_directory+0x444>
		}
	} else {
		do {
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
  818890:	e0bff417 	ldw	r2,-48(fp)
  818894:	10ffff84 	addi	r3,r2,-2
  818898:	008020b4 	movhi	r2,130
  81889c:	10913d04 	addi	r2,r2,17652
  8188a0:	10800383 	ldbu	r2,14(r2)
  8188a4:	10803fcc 	andi	r2,r2,255
  8188a8:	1885383a 	mul	r2,r3,r2
  8188ac:	1007883a 	mov	r3,r2
  8188b0:	008020b4 	movhi	r2,130
  8188b4:	10913d04 	addi	r2,r2,17652
  8188b8:	10801417 	ldw	r2,80(r2)
  8188bc:	1885883a 	add	r2,r3,r2
  8188c0:	e0bfec15 	stw	r2,-80(fp)
			int sector_index;

			for (sector_index = 0; sector_index
  8188c4:	e03feb15 	stw	zero,-84(fp)
  8188c8:	00003006 	br	81898c <find_file_in_directory+0x3bc>
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
  8188cc:	e0ffeb17 	ldw	r3,-84(fp)
  8188d0:	e0bfec17 	ldw	r2,-80(fp)
  8188d4:	1889883a 	add	r4,r3,r2
  8188d8:	d1674c17 	ldw	r5,-25296(gp)
  8188dc:	08168e00 	call	8168e0 <Read_Sector_Data>
  8188e0:	1005003a 	cmpeq	r2,r2,zero
  8188e4:	10002f1e 	bne	r2,zero,8189a4 <find_file_in_directory+0x3d4>
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  8188e8:	e03fea15 	stw	zero,-88(fp)
  8188ec:	00001e06 	br	818968 <find_file_in_directory+0x398>
						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
  8188f0:	e0bfea17 	ldw	r2,-88(fp)
  8188f4:	1008917a 	slli	r4,r2,5
  8188f8:	e1bff417 	ldw	r6,-48(fp)
  8188fc:	e1ffeb17 	ldw	r7,-84(fp)
  818900:	e17ffe17 	ldw	r5,-8(fp)
  818904:	0816d280 	call	816d28 <Read_File_Record_At_Offset>
								file_record, cluster, sector_index);
						if ((file_record->name[0] != 0xe5)
  818908:	e0bffe17 	ldw	r2,-8(fp)
  81890c:	10800003 	ldbu	r2,0(r2)
  818910:	10803fcc 	andi	r2,r2,255
  818914:	10803960 	cmpeqi	r2,r2,229
  818918:	1000101e 	bne	r2,zero,81895c <find_file_in_directory+0x38c>
  81891c:	e0bffe17 	ldw	r2,-8(fp)
  818920:	10800003 	ldbu	r2,0(r2)
  818924:	10803fcc 	andi	r2,r2,255
  818928:	1005003a 	cmpeq	r2,r2,zero
  81892c:	10000b1e 	bne	r2,zero,81895c <find_file_in_directory+0x38c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
  818930:	e17ff804 	addi	r5,fp,-32
  818934:	e1bffa04 	addi	r6,fp,-24
  818938:	e13ffe17 	ldw	r4,-8(fp)
  81893c:	0817dd00 	call	817dd0 <match_file_record_to_name_ext>
  818940:	e0bfe915 	stw	r2,-92(fp)

							if (match) {
  818944:	e0bfe917 	ldw	r2,-92(fp)
  818948:	1005003a 	cmpeq	r2,r2,zero
  81894c:	1000031e 	bne	r2,zero,81895c <find_file_in_directory+0x38c>
								result = true;
  818950:	00800044 	movi	r2,1
  818954:	e0bff115 	stw	r2,-60(fp)
								break;
  818958:	00000606 	br	818974 <find_file_in_directory+0x3a4>
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  81895c:	e0bfea17 	ldw	r2,-88(fp)
  818960:	10800044 	addi	r2,r2,1
  818964:	e0bfea15 	stw	r2,-88(fp)
  818968:	e0bfea17 	ldw	r2,-88(fp)
  81896c:	10800410 	cmplti	r2,r2,16
  818970:	103fdf1e 	bne	r2,zero,8188f0 <find_file_in_directory+0x320>
						}
					}
				} else {
					break;
				}
				if (result) {
  818974:	e0bff117 	ldw	r2,-60(fp)
  818978:	1004c03a 	cmpne	r2,r2,zero
  81897c:	1000091e 	bne	r2,zero,8189a4 <find_file_in_directory+0x3d4>
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
					< boot_sector_data.sectors_per_cluster; sector_index++) {
  818980:	e0bfeb17 	ldw	r2,-84(fp)
  818984:	10800044 	addi	r2,r2,1
  818988:	e0bfeb15 	stw	r2,-84(fp)
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
  81898c:	008020b4 	movhi	r2,130
  818990:	10913d04 	addi	r2,r2,17652
  818994:	10800383 	ldbu	r2,14(r2)
  818998:	10c03fcc 	andi	r3,r2,255
  81899c:	e0bfeb17 	ldw	r2,-84(fp)
  8189a0:	10ffca16 	blt	r2,r3,8188cc <find_file_in_directory+0x2fc>
					break;
				}
			}
			// If this is the end of the cluster and the file has not been found, then see if there is another cluster
			// that holds data for the current directory.
			if (result == false) {
  8189a4:	e0bff117 	ldw	r2,-60(fp)
  8189a8:	1004c03a 	cmpne	r2,r2,zero
  8189ac:	1000131e 	bne	r2,zero,8189fc <find_file_in_directory+0x42c>
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster)) {
  8189b0:	e13ff417 	ldw	r4,-48(fp)
  8189b4:	e17ffb04 	addi	r5,fp,-20
  8189b8:	08169dc0 	call	8169dc <get_cluster_flag>
  8189bc:	1005003a 	cmpeq	r2,r2,zero
  8189c0:	10000c1e 	bne	r2,zero,8189f4 <find_file_in_directory+0x424>
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  8189c4:	e0bffb0b 	ldhu	r2,-20(fp)
  8189c8:	10bfffcc 	andi	r2,r2,65535
  8189cc:	10fffe0c 	andi	r3,r2,65528
  8189d0:	00bffe14 	movui	r2,65528
  8189d4:	1880021e 	bne	r3,r2,8189e0 <find_file_in_directory+0x410>
						return false;
  8189d8:	e03fff15 	stw	zero,-4(fp)
  8189dc:	00000f06 	br	818a1c <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
  8189e0:	e0bffb0b 	ldhu	r2,-20(fp)
  8189e4:	10bfffcc 	andi	r2,r2,65535
  8189e8:	10bffe0c 	andi	r2,r2,65528
  8189ec:	e0bff415 	stw	r2,-48(fp)
  8189f0:	00000206 	br	8189fc <find_file_in_directory+0x42c>
				} else {
					// Directory path is invalid.
					return false;
  8189f4:	e03fff15 	stw	zero,-4(fp)
  8189f8:	00000806 	br	818a1c <find_file_in_directory+0x44c>
				}
			}
		} while ((cluster < 0x0000fff8) && (result == false));
  8189fc:	e0fff417 	ldw	r3,-48(fp)
  818a00:	00bffdd4 	movui	r2,65527
  818a04:	10c00316 	blt	r2,r3,818a14 <find_file_in_directory+0x444>
  818a08:	e0bff117 	ldw	r2,-60(fp)
  818a0c:	1005003a 	cmpeq	r2,r2,zero
  818a10:	103f9f1e 	bne	r2,zero,818890 <find_file_in_directory+0x2c0>
	}

	return result;
  818a14:	e0bff117 	ldw	r2,-60(fp)
  818a18:	e0bfff15 	stw	r2,-4(fp)
  818a1c:	e0bfff17 	ldw	r2,-4(fp)
}
  818a20:	e037883a 	mov	sp,fp
  818a24:	dfc00117 	ldw	ra,4(sp)
  818a28:	df000017 	ldw	fp,0(sp)
  818a2c:	dec00204 	addi	sp,sp,8
  818a30:	f800283a 	ret

00818a34 <find_first_empty_cluster>:

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  818a34:	defff504 	addi	sp,sp,-44
  818a38:	dfc00a15 	stw	ra,40(sp)
  818a3c:	df000915 	stw	fp,36(sp)
  818a40:	df000904 	addi	fp,sp,36
  818a44:	e13fff15 	stw	r4,-4(fp)
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
  818a48:	008020b4 	movhi	r2,130
  818a4c:	10913d04 	addi	r2,r2,17652
  818a50:	10801117 	ldw	r2,68(r2)
  818a54:	e0bffe15 	stw	r2,-8(fp)
	unsigned int cluster_index = 2;
  818a58:	00800084 	movi	r2,2
  818a5c:	e0bffd15 	stw	r2,-12(fp)
	short int cluster = -1;
  818a60:	00bfffc4 	movi	r2,-1
  818a64:	e0bffc0d 	sth	r2,-16(fp)
	bool result = false;
  818a68:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
  818a6c:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
  818a70:	008020b4 	movhi	r2,130
  818a74:	10913d04 	addi	r2,r2,17652
  818a78:	10801417 	ldw	r2,80(r2)
  818a7c:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
  818a80:	008020b4 	movhi	r2,130
  818a84:	10913d04 	addi	r2,r2,17652
  818a88:	1080058b 	ldhu	r2,22(r2)
  818a8c:	10bfffcc 	andi	r2,r2,65535
  818a90:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 =
			boot_sector_data.total_sector_count_if_above_32MB;
  818a94:	008020b4 	movhi	r2,130
  818a98:	10913d04 	addi	r2,r2,17652
  818a9c:	10800917 	ldw	r2,36(r2)
  818aa0:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32) {
  818aa4:	e0fff817 	ldw	r3,-32(fp)
  818aa8:	e0bff717 	ldw	r2,-36(fp)
  818aac:	10c00b2e 	bgeu	r2,r3,818adc <find_first_empty_cluster+0xa8>
		max_cluster_index = ((less_than_32 - non_data_sectors)
  818ab0:	e0fff817 	ldw	r3,-32(fp)
  818ab4:	e0bff917 	ldw	r2,-28(fp)
  818ab8:	1889c83a 	sub	r4,r3,r2
  818abc:	008020b4 	movhi	r2,130
  818ac0:	10913d04 	addi	r2,r2,17652
  818ac4:	10800383 	ldbu	r2,14(r2)
  818ac8:	11403fcc 	andi	r5,r2,255
  818acc:	0808e8c0 	call	808e8c <__udivsi3>
  818ad0:	10800044 	addi	r2,r2,1
  818ad4:	e0bffa15 	stw	r2,-24(fp)
  818ad8:	00002906 	br	818b80 <find_first_empty_cluster+0x14c>
				/ boot_sector_data.sectors_per_cluster) + 1;
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
  818adc:	e0fff717 	ldw	r3,-36(fp)
  818ae0:	e0bff917 	ldw	r2,-28(fp)
  818ae4:	1889c83a 	sub	r4,r3,r2
  818ae8:	008020b4 	movhi	r2,130
  818aec:	10913d04 	addi	r2,r2,17652
  818af0:	10800383 	ldbu	r2,14(r2)
  818af4:	11403fcc 	andi	r5,r2,255
  818af8:	0808e8c0 	call	808e8c <__udivsi3>
  818afc:	10800044 	addi	r2,r2,1
  818b00:	e0bffa15 	stw	r2,-24(fp)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  818b04:	00001e06 	br	818b80 <find_first_empty_cluster+0x14c>
		if (Read_Sector_Data(sector, fat_partition_offset_in_512_byte_sectors)) {
  818b08:	e13ffe17 	ldw	r4,-8(fp)
  818b0c:	d1674c17 	ldw	r5,-25296(gp)
  818b10:	08168e00 	call	8168e0 <Read_Sector_Data>
  818b14:	1005003a 	cmpeq	r2,r2,zero
  818b18:	1000131e 	bne	r2,zero,818b68 <find_first_empty_cluster+0x134>
			do {
				cluster
  818b1c:	d0a74e17 	ldw	r2,-25288(gp)
  818b20:	10800a17 	ldw	r2,40(r2)
  818b24:	1007883a 	mov	r3,r2
  818b28:	e0bffd17 	ldw	r2,-12(fp)
  818b2c:	10803fcc 	andi	r2,r2,255
  818b30:	1085883a 	add	r2,r2,r2
  818b34:	1885883a 	add	r2,r3,r2
  818b38:	1080002b 	ldhuio	r2,0(r2)
  818b3c:	e0bffc0d 	sth	r2,-16(fp)
						= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
  818b40:	e0bffc0f 	ldh	r2,-16(fp)
  818b44:	1005003a 	cmpeq	r2,r2,zero
  818b48:	1000071e 	bne	r2,zero,818b68 <find_first_empty_cluster+0x134>
					// Free cluster found.
					break;
				} else {
					cluster_index++;
  818b4c:	e0bffd17 	ldw	r2,-12(fp)
  818b50:	10800044 	addi	r2,r2,1
  818b54:	e0bffd15 	stw	r2,-12(fp)
				}
			} while ((cluster_index % 256) != 0);
  818b58:	e0bffd17 	ldw	r2,-12(fp)
  818b5c:	10803fcc 	andi	r2,r2,255
  818b60:	1004c03a 	cmpne	r2,r2,zero
  818b64:	103fed1e 	bne	r2,zero,818b1c <find_first_empty_cluster+0xe8>
		}
		if (cluster == 0) {
  818b68:	e0bffc0f 	ldh	r2,-16(fp)
  818b6c:	1005003a 	cmpeq	r2,r2,zero
  818b70:	1000081e 	bne	r2,zero,818b94 <find_first_empty_cluster+0x160>
			break;
		}
		sector++;
  818b74:	e0bffe17 	ldw	r2,-8(fp)
  818b78:	10800044 	addi	r2,r2,1
  818b7c:	e0bffe15 	stw	r2,-8(fp)
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  818b80:	008020b4 	movhi	r2,130
  818b84:	10913d04 	addi	r2,r2,17652
  818b88:	10c01217 	ldw	r3,72(r2)
  818b8c:	e0bffe17 	ldw	r2,-8(fp)
  818b90:	18bfdd1e 	bne	r3,r2,818b08 <find_first_empty_cluster+0xd4>
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
  818b94:	e0bffc0f 	ldh	r2,-16(fp)
  818b98:	1004c03a 	cmpne	r2,r2,zero
  818b9c:	1000081e 	bne	r2,zero,818bc0 <find_first_empty_cluster+0x18c>
  818ba0:	e0fffc0f 	ldh	r3,-16(fp)
  818ba4:	e0bffa17 	ldw	r2,-24(fp)
  818ba8:	10c00536 	bltu	r2,r3,818bc0 <find_first_empty_cluster+0x18c>
		*cluster_number = cluster_index;
  818bac:	e0bfff17 	ldw	r2,-4(fp)
  818bb0:	e0fffd17 	ldw	r3,-12(fp)
  818bb4:	10c00015 	stw	r3,0(r2)
		result = true;
  818bb8:	00800044 	movi	r2,1
  818bbc:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
  818bc0:	e0bffb17 	ldw	r2,-20(fp)
}
  818bc4:	e037883a 	mov	sp,fp
  818bc8:	dfc00117 	ldw	ra,4(sp)
  818bcc:	df000017 	ldw	fp,0(sp)
  818bd0:	dec00204 	addi	sp,sp,8
  818bd4:	f800283a 	ret

00818bd8 <find_first_empty_record_in_a_subdirectory>:

int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
  818bd8:	defff404 	addi	sp,sp,-48
  818bdc:	dfc00b15 	stw	ra,44(sp)
  818be0:	df000a15 	stw	fp,40(sp)
  818be4:	df000a04 	addi	fp,sp,40
  818be8:	e13ffe15 	stw	r4,-8(fp)
	int result = -1;
  818bec:	00bfffc4 	movi	r2,-1
  818bf0:	e0bffb15 	stw	r2,-20(fp)
	int cluster = start_cluster_index;
  818bf4:	e0bffe17 	ldw	r2,-8(fp)
  818bf8:	e0bffa15 	stw	r2,-24(fp)
	do {
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
  818bfc:	e0bffa17 	ldw	r2,-24(fp)
  818c00:	10ffff84 	addi	r3,r2,-2
  818c04:	008020b4 	movhi	r2,130
  818c08:	10913d04 	addi	r2,r2,17652
  818c0c:	10800383 	ldbu	r2,14(r2)
  818c10:	10803fcc 	andi	r2,r2,255
  818c14:	1885383a 	mul	r2,r3,r2
  818c18:	1007883a 	mov	r3,r2
  818c1c:	008020b4 	movhi	r2,130
  818c20:	10913d04 	addi	r2,r2,17652
  818c24:	10801417 	ldw	r2,80(r2)
  818c28:	1885883a 	add	r2,r3,r2
  818c2c:	e0bff915 	stw	r2,-28(fp)
		int sector_index;

		for (sector_index = 0; sector_index
  818c30:	e03ff815 	stw	zero,-32(fp)
  818c34:	00002c06 	br	818ce8 <find_first_empty_record_in_a_subdirectory+0x110>
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
  818c38:	e0fff817 	ldw	r3,-32(fp)
  818c3c:	e0bff917 	ldw	r2,-28(fp)
  818c40:	1889883a 	add	r4,r3,r2
  818c44:	d1674c17 	ldw	r5,-25296(gp)
  818c48:	08168e00 	call	8168e0 <Read_Sector_Data>
  818c4c:	1005003a 	cmpeq	r2,r2,zero
  818c50:	10002b1e 	bne	r2,zero,818d00 <find_first_empty_record_in_a_subdirectory+0x128>
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  818c54:	e03ff715 	stw	zero,-36(fp)
  818c58:	00001d06 	br	818cd0 <find_first_empty_record_in_a_subdirectory+0xf8>
					unsigned short int leading_char;

					// Read file record.
					leading_char
  818c5c:	d0a74e17 	ldw	r2,-25288(gp)
  818c60:	10800a17 	ldw	r2,40(r2)
  818c64:	1007883a 	mov	r3,r2
  818c68:	e0bff717 	ldw	r2,-36(fp)
  818c6c:	1004917a 	slli	r2,r2,5
  818c70:	1885883a 	add	r2,r3,r2
  818c74:	10800023 	ldbuio	r2,0(r2)
  818c78:	10803fcc 	andi	r2,r2,255
  818c7c:	e0bff60d 	sth	r2,-40(fp)
							= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
					if ((leading_char == 0x00e5) || (leading_char == 0)) {
  818c80:	e0bff60b 	ldhu	r2,-40(fp)
  818c84:	10803960 	cmpeqi	r2,r2,229
  818c88:	1000031e 	bne	r2,zero,818c98 <find_first_empty_record_in_a_subdirectory+0xc0>
  818c8c:	e0bff60b 	ldhu	r2,-40(fp)
  818c90:	1004c03a 	cmpne	r2,r2,zero
  818c94:	10000b1e 	bne	r2,zero,818cc4 <find_first_empty_record_in_a_subdirectory+0xec>
						result = (cluster)
  818c98:	e0bff817 	ldw	r2,-32(fp)
  818c9c:	1006913a 	slli	r3,r2,4
  818ca0:	e0bff717 	ldw	r2,-36(fp)
  818ca4:	1885883a 	add	r2,r3,r2
  818ca8:	1006943a 	slli	r3,r2,16
  818cac:	e0bffa17 	ldw	r2,-24(fp)
  818cb0:	1884b03a 	or	r2,r3,r2
  818cb4:	e0bffb15 	stw	r2,-20(fp)
								| ((sector_index * 16 + file_counter) << 16);
						return result;
  818cb8:	e0bffb17 	ldw	r2,-20(fp)
  818cbc:	e0bfff15 	stw	r2,-4(fp)
  818cc0:	00005206 	br	818e0c <find_first_empty_record_in_a_subdirectory+0x234>
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  818cc4:	e0bff717 	ldw	r2,-36(fp)
  818cc8:	10800044 	addi	r2,r2,1
  818ccc:	e0bff715 	stw	r2,-36(fp)
  818cd0:	e0bff717 	ldw	r2,-36(fp)
  818cd4:	10800410 	cmplti	r2,r2,16
  818cd8:	103fe01e 	bne	r2,zero,818c5c <find_first_empty_record_in_a_subdirectory+0x84>
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
				< boot_sector_data.sectors_per_cluster; sector_index++) {
  818cdc:	e0bff817 	ldw	r2,-32(fp)
  818ce0:	10800044 	addi	r2,r2,1
  818ce4:	e0bff815 	stw	r2,-32(fp)
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
  818ce8:	008020b4 	movhi	r2,130
  818cec:	10913d04 	addi	r2,r2,17652
  818cf0:	10800383 	ldbu	r2,14(r2)
  818cf4:	10c03fcc 	andi	r3,r2,255
  818cf8:	e0bff817 	ldw	r2,-32(fp)
  818cfc:	10ffce16 	blt	r2,r3,818c38 <find_first_empty_record_in_a_subdirectory+0x60>
				break;
			}
		}
		// If this is the end of the cluster and the file has not been found, then see if there is another cluster
		// that holds data for the current directory.
		if (result < 0) {
  818d00:	e0bffb17 	ldw	r2,-20(fp)
  818d04:	1004403a 	cmpge	r2,r2,zero
  818d08:	1000381e 	bne	r2,zero,818dec <find_first_empty_record_in_a_subdirectory+0x214>
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster)) {
  818d0c:	e13ffa17 	ldw	r4,-24(fp)
  818d10:	e17ffc04 	addi	r5,fp,-16
  818d14:	08169dc0 	call	8169dc <get_cluster_flag>
  818d18:	1005003a 	cmpeq	r2,r2,zero
  818d1c:	1000311e 	bne	r2,zero,818de4 <find_first_empty_record_in_a_subdirectory+0x20c>
				// The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  818d20:	e0bffc0b 	ldhu	r2,-16(fp)
  818d24:	10bfffcc 	andi	r2,r2,65535
  818d28:	10fffe0c 	andi	r3,r2,65528
  818d2c:	00bffe14 	movui	r2,65528
  818d30:	18802e1e 	bne	r3,r2,818dec <find_first_empty_record_in_a_subdirectory+0x214>
					int new_dir_cluster;
					if (find_first_empty_cluster(&new_dir_cluster)) {
  818d34:	e13ffd04 	addi	r4,fp,-12
  818d38:	0818a340 	call	818a34 <find_first_empty_cluster>
  818d3c:	1005003a 	cmpeq	r2,r2,zero
  818d40:	1000231e 	bne	r2,zero,818dd0 <find_first_empty_record_in_a_subdirectory+0x1f8>
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster,
  818d44:	e13ffa17 	ldw	r4,-24(fp)
  818d48:	e0bffd17 	ldw	r2,-12(fp)
  818d4c:	117fffcc 	andi	r5,r2,65535
  818d50:	2960001c 	xori	r5,r5,32768
  818d54:	29600004 	addi	r5,r5,-32768
  818d58:	01800044 	movi	r6,1
  818d5c:	0816a940 	call	816a94 <mark_cluster>
  818d60:	1005003a 	cmpeq	r2,r2,zero
  818d64:	10001a1e 	bne	r2,zero,818dd0 <find_first_empty_record_in_a_subdirectory+0x1f8>
  818d68:	e0bffd17 	ldw	r2,-12(fp)
  818d6c:	1009883a 	mov	r4,r2
  818d70:	017fffc4 	movi	r5,-1
  818d74:	01800044 	movi	r6,1
  818d78:	0816a940 	call	816a94 <mark_cluster>
  818d7c:	1005003a 	cmpeq	r2,r2,zero
  818d80:	1000131e 	bne	r2,zero,818dd0 <find_first_empty_record_in_a_subdirectory+0x1f8>
  818d84:	e13ffa17 	ldw	r4,-24(fp)
  818d88:	e0bffd17 	ldw	r2,-12(fp)
  818d8c:	117fffcc 	andi	r5,r2,65535
  818d90:	2960001c 	xori	r5,r5,32768
  818d94:	29600004 	addi	r5,r5,-32768
  818d98:	000d883a 	mov	r6,zero
  818d9c:	0816a940 	call	816a94 <mark_cluster>
  818da0:	1005003a 	cmpeq	r2,r2,zero
  818da4:	10000a1e 	bne	r2,zero,818dd0 <find_first_empty_record_in_a_subdirectory+0x1f8>
  818da8:	e0bffd17 	ldw	r2,-12(fp)
  818dac:	1009883a 	mov	r4,r2
  818db0:	017fffc4 	movi	r5,-1
  818db4:	000d883a 	mov	r6,zero
  818db8:	0816a940 	call	816a94 <mark_cluster>
  818dbc:	1005003a 	cmpeq	r2,r2,zero
  818dc0:	1000031e 	bne	r2,zero,818dd0 <find_first_empty_record_in_a_subdirectory+0x1f8>
										((short int) (0xffff)), true)
								&& mark_cluster(cluster,
										((short int) (new_dir_cluster)), false)
								&& mark_cluster(new_dir_cluster,
										((short int) (0xffff)), false)) {
							Save_Modified_Sector();
  818dc4:	08168900 	call	816890 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;
  818dc8:	e0bffd17 	ldw	r2,-12(fp)
  818dcc:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
  818dd0:	e0bffc0b 	ldhu	r2,-16(fp)
  818dd4:	10bfffcc 	andi	r2,r2,65535
  818dd8:	10bffe0c 	andi	r2,r2,65528
  818ddc:	e0bffa15 	stw	r2,-24(fp)
  818de0:	00000206 	br	818dec <find_first_empty_record_in_a_subdirectory+0x214>
				}
			} else {
				// Error encountered.                 
				result = -1;
  818de4:	00bfffc4 	movi	r2,-1
  818de8:	e0bffb15 	stw	r2,-20(fp)
			}
		}
	} while ((cluster < 0x0000fff8) && (result == -1));
  818dec:	e0fffa17 	ldw	r3,-24(fp)
  818df0:	00bffdd4 	movui	r2,65527
  818df4:	10c00316 	blt	r2,r3,818e04 <find_first_empty_record_in_a_subdirectory+0x22c>
  818df8:	e0bffb17 	ldw	r2,-20(fp)
  818dfc:	10bfffe0 	cmpeqi	r2,r2,-1
  818e00:	103f7e1e 	bne	r2,zero,818bfc <find_first_empty_record_in_a_subdirectory+0x24>
	return result;
  818e04:	e0bffb17 	ldw	r2,-20(fp)
  818e08:	e0bfff15 	stw	r2,-4(fp)
  818e0c:	e0bfff17 	ldw	r2,-4(fp)
}
  818e10:	e037883a 	mov	sp,fp
  818e14:	dfc00117 	ldw	ra,4(sp)
  818e18:	df000017 	ldw	fp,0(sp)
  818e1c:	dec00204 	addi	sp,sp,8
  818e20:	f800283a 	ret

00818e24 <find_first_empty_record_in_root_directory>:

int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  818e24:	defff804 	addi	sp,sp,-32
  818e28:	dfc00715 	stw	ra,28(sp)
  818e2c:	df000615 	stw	fp,24(sp)
  818e30:	df000604 	addi	fp,sp,24
	int max_root_dir_sectors = ((32
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
  818e34:	008020b4 	movhi	r2,130
  818e38:	10913d04 	addi	r2,r2,17652
  818e3c:	1080050b 	ldhu	r2,20(r2)
  818e40:	10bfffcc 	andi	r2,r2,65535
  818e44:	1008917a 	slli	r4,r2,5
  818e48:	008020b4 	movhi	r2,130
  818e4c:	10913d04 	addi	r2,r2,17652
  818e50:	1080030b 	ldhu	r2,12(r2)
  818e54:	117fffcc 	andi	r5,r2,65535
  818e58:	0808dcc0 	call	808dcc <__divsi3>
  818e5c:	e0bffe15 	stw	r2,-8(fp)
	int sector_index;
	int result = -1;
  818e60:	00bfffc4 	movi	r2,-1
  818e64:	e0bffc15 	stw	r2,-16(fp)

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  818e68:	e03ffd15 	stw	zero,-12(fp)
  818e6c:	00002d06 	br	818f24 <find_first_empty_record_in_root_directory+0x100>
		if (Read_Sector_Data(sector_index
  818e70:	008020b4 	movhi	r2,130
  818e74:	10913d04 	addi	r2,r2,17652
  818e78:	10c01317 	ldw	r3,76(r2)
  818e7c:	e0bffd17 	ldw	r2,-12(fp)
  818e80:	1885883a 	add	r2,r3,r2
  818e84:	1009883a 	mov	r4,r2
  818e88:	d1674c17 	ldw	r5,-25296(gp)
  818e8c:	08168e00 	call	8168e0 <Read_Sector_Data>
  818e90:	1005003a 	cmpeq	r2,r2,zero
  818e94:	1000261e 	bne	r2,zero,818f30 <find_first_empty_record_in_root_directory+0x10c>
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
  818e98:	e03ffb15 	stw	zero,-20(fp)
  818e9c:	00001b06 	br	818f0c <find_first_empty_record_in_root_directory+0xe8>
				unsigned short int leading_char;

				// Read first character of the file record.
				leading_char
  818ea0:	d0a74e17 	ldw	r2,-25288(gp)
  818ea4:	10800a17 	ldw	r2,40(r2)
  818ea8:	1007883a 	mov	r3,r2
  818eac:	e0bffb17 	ldw	r2,-20(fp)
  818eb0:	1004917a 	slli	r2,r2,5
  818eb4:	1885883a 	add	r2,r3,r2
  818eb8:	10800023 	ldbuio	r2,0(r2)
  818ebc:	10803fcc 	andi	r2,r2,255
  818ec0:	e0bffa0d 	sth	r2,-24(fp)
						= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
  818ec4:	e0bffa0b 	ldhu	r2,-24(fp)
  818ec8:	10803960 	cmpeqi	r2,r2,229
  818ecc:	1000031e 	bne	r2,zero,818edc <find_first_empty_record_in_root_directory+0xb8>
  818ed0:	e0bffa0b 	ldhu	r2,-24(fp)
  818ed4:	1004c03a 	cmpne	r2,r2,zero
  818ed8:	1000091e 	bne	r2,zero,818f00 <find_first_empty_record_in_root_directory+0xdc>
					result = (sector_index * 16 + file_counter) << 16;
  818edc:	e0bffd17 	ldw	r2,-12(fp)
  818ee0:	1006913a 	slli	r3,r2,4
  818ee4:	e0bffb17 	ldw	r2,-20(fp)
  818ee8:	1885883a 	add	r2,r3,r2
  818eec:	1004943a 	slli	r2,r2,16
  818ef0:	e0bffc15 	stw	r2,-16(fp)
					return result;
  818ef4:	e0bffc17 	ldw	r2,-16(fp)
  818ef8:	e0bfff15 	stw	r2,-4(fp)
  818efc:	00000e06 	br	818f38 <find_first_empty_record_in_root_directory+0x114>
		if (Read_Sector_Data(sector_index
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
  818f00:	e0bffb17 	ldw	r2,-20(fp)
  818f04:	10800044 	addi	r2,r2,1
  818f08:	e0bffb15 	stw	r2,-20(fp)
  818f0c:	e0bffb17 	ldw	r2,-20(fp)
  818f10:	10800410 	cmplti	r2,r2,16
  818f14:	103fe21e 	bne	r2,zero,818ea0 <find_first_empty_record_in_root_directory+0x7c>
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  818f18:	e0bffd17 	ldw	r2,-12(fp)
  818f1c:	10800044 	addi	r2,r2,1
  818f20:	e0bffd15 	stw	r2,-12(fp)
  818f24:	e0fffd17 	ldw	r3,-12(fp)
  818f28:	e0bffe17 	ldw	r2,-8(fp)
  818f2c:	18bfd016 	blt	r3,r2,818e70 <find_first_empty_record_in_root_directory+0x4c>
			}
		} else {
			break;
		}
	}
	return result;
  818f30:	e0bffc17 	ldw	r2,-16(fp)
  818f34:	e0bfff15 	stw	r2,-4(fp)
  818f38:	e0bfff17 	ldw	r2,-4(fp)
}
  818f3c:	e037883a 	mov	sp,fp
  818f40:	dfc00117 	ldw	ra,4(sp)
  818f44:	df000017 	ldw	fp,0(sp)
  818f48:	dec00204 	addi	sp,sp,8
  818f4c:	f800283a 	ret

00818f50 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name,
		char *extension)
// This function converts the file name into a name . extension format.
{
  818f50:	defffa04 	addi	sp,sp,-24
  818f54:	df000515 	stw	fp,20(sp)
  818f58:	df000504 	addi	fp,sp,20
  818f5c:	e13ffd15 	stw	r4,-12(fp)
  818f60:	e17ffe15 	stw	r5,-8(fp)
  818f64:	e1bfff15 	stw	r6,-4(fp)
	int counter;
	int local = 0;
  818f68:	e03ffb15 	stw	zero,-20(fp)

	for (counter = 0; counter < 8; counter++) {
  818f6c:	e03ffc15 	stw	zero,-16(fp)
  818f70:	00002b06 	br	819020 <convert_filename_to_name_extension+0xd0>
		if (filename[local] != '.') {
  818f74:	e0bffb17 	ldw	r2,-20(fp)
  818f78:	1007883a 	mov	r3,r2
  818f7c:	e0bffd17 	ldw	r2,-12(fp)
  818f80:	1885883a 	add	r2,r3,r2
  818f84:	10800003 	ldbu	r2,0(r2)
  818f88:	10803fcc 	andi	r2,r2,255
  818f8c:	1080201c 	xori	r2,r2,128
  818f90:	10bfe004 	addi	r2,r2,-128
  818f94:	10800ba0 	cmpeqi	r2,r2,46
  818f98:	1000181e 	bne	r2,zero,818ffc <convert_filename_to_name_extension+0xac>
			name[counter] = filename[local];
  818f9c:	e0bffc17 	ldw	r2,-16(fp)
  818fa0:	1007883a 	mov	r3,r2
  818fa4:	e0bffe17 	ldw	r2,-8(fp)
  818fa8:	1889883a 	add	r4,r3,r2
  818fac:	e0bffb17 	ldw	r2,-20(fp)
  818fb0:	1007883a 	mov	r3,r2
  818fb4:	e0bffd17 	ldw	r2,-12(fp)
  818fb8:	1885883a 	add	r2,r3,r2
  818fbc:	10800003 	ldbu	r2,0(r2)
  818fc0:	20800005 	stb	r2,0(r4)
			if (filename[local] != 0)
  818fc4:	e0bffb17 	ldw	r2,-20(fp)
  818fc8:	1007883a 	mov	r3,r2
  818fcc:	e0bffd17 	ldw	r2,-12(fp)
  818fd0:	1885883a 	add	r2,r3,r2
  818fd4:	10800003 	ldbu	r2,0(r2)
  818fd8:	10803fcc 	andi	r2,r2,255
  818fdc:	1080201c 	xori	r2,r2,128
  818fe0:	10bfe004 	addi	r2,r2,-128
  818fe4:	1005003a 	cmpeq	r2,r2,zero
  818fe8:	10000a1e 	bne	r2,zero,819014 <convert_filename_to_name_extension+0xc4>
				local++;
  818fec:	e0bffb17 	ldw	r2,-20(fp)
  818ff0:	10800044 	addi	r2,r2,1
  818ff4:	e0bffb15 	stw	r2,-20(fp)
  818ff8:	00000606 	br	819014 <convert_filename_to_name_extension+0xc4>
		} else {
			name[counter] = ' ';
  818ffc:	e0bffc17 	ldw	r2,-16(fp)
  819000:	1007883a 	mov	r3,r2
  819004:	e0bffe17 	ldw	r2,-8(fp)
  819008:	1887883a 	add	r3,r3,r2
  81900c:	00800804 	movi	r2,32
  819010:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
  819014:	e0bffc17 	ldw	r2,-16(fp)
  819018:	10800044 	addi	r2,r2,1
  81901c:	e0bffc15 	stw	r2,-16(fp)
  819020:	e0bffc17 	ldw	r2,-16(fp)
  819024:	10800210 	cmplti	r2,r2,8
  819028:	103fd21e 	bne	r2,zero,818f74 <convert_filename_to_name_extension+0x24>
				local++;
		} else {
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
  81902c:	e0bffb17 	ldw	r2,-20(fp)
  819030:	1007883a 	mov	r3,r2
  819034:	e0bffd17 	ldw	r2,-12(fp)
  819038:	1885883a 	add	r2,r3,r2
  81903c:	10800003 	ldbu	r2,0(r2)
  819040:	10803fcc 	andi	r2,r2,255
  819044:	1080201c 	xori	r2,r2,128
  819048:	10bfe004 	addi	r2,r2,-128
  81904c:	10800b98 	cmpnei	r2,r2,46
  819050:	1000031e 	bne	r2,zero,819060 <convert_filename_to_name_extension+0x110>
		local++;
  819054:	e0bffb17 	ldw	r2,-20(fp)
  819058:	10800044 	addi	r2,r2,1
  81905c:	e0bffb15 	stw	r2,-20(fp)
	for (counter = 0; counter < 3; counter++) {
  819060:	e03ffc15 	stw	zero,-16(fp)
  819064:	00002106 	br	8190ec <convert_filename_to_name_extension+0x19c>
		if (filename[local] != 0) {
  819068:	e0bffb17 	ldw	r2,-20(fp)
  81906c:	1007883a 	mov	r3,r2
  819070:	e0bffd17 	ldw	r2,-12(fp)
  819074:	1885883a 	add	r2,r3,r2
  819078:	10800003 	ldbu	r2,0(r2)
  81907c:	10803fcc 	andi	r2,r2,255
  819080:	1080201c 	xori	r2,r2,128
  819084:	10bfe004 	addi	r2,r2,-128
  819088:	1005003a 	cmpeq	r2,r2,zero
  81908c:	10000e1e 	bne	r2,zero,8190c8 <convert_filename_to_name_extension+0x178>
			extension[counter] = filename[local];
  819090:	e0bffc17 	ldw	r2,-16(fp)
  819094:	1007883a 	mov	r3,r2
  819098:	e0bfff17 	ldw	r2,-4(fp)
  81909c:	1889883a 	add	r4,r3,r2
  8190a0:	e0bffb17 	ldw	r2,-20(fp)
  8190a4:	1007883a 	mov	r3,r2
  8190a8:	e0bffd17 	ldw	r2,-12(fp)
  8190ac:	1885883a 	add	r2,r3,r2
  8190b0:	10800003 	ldbu	r2,0(r2)
  8190b4:	20800005 	stb	r2,0(r4)
			local++;
  8190b8:	e0bffb17 	ldw	r2,-20(fp)
  8190bc:	10800044 	addi	r2,r2,1
  8190c0:	e0bffb15 	stw	r2,-20(fp)
  8190c4:	00000606 	br	8190e0 <convert_filename_to_name_extension+0x190>
		} else {
			extension[counter] = ' ';
  8190c8:	e0bffc17 	ldw	r2,-16(fp)
  8190cc:	1007883a 	mov	r3,r2
  8190d0:	e0bfff17 	ldw	r2,-4(fp)
  8190d4:	1887883a 	add	r3,r3,r2
  8190d8:	00800804 	movi	r2,32
  8190dc:	18800005 	stb	r2,0(r3)
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
  8190e0:	e0bffc17 	ldw	r2,-16(fp)
  8190e4:	10800044 	addi	r2,r2,1
  8190e8:	e0bffc15 	stw	r2,-16(fp)
  8190ec:	e0bffc17 	ldw	r2,-16(fp)
  8190f0:	108000d0 	cmplti	r2,r2,3
  8190f4:	103fdc1e 	bne	r2,zero,819068 <convert_filename_to_name_extension+0x118>
		} else {
			extension[counter] = ' ';
		}
	}

}
  8190f8:	e037883a 	mov	sp,fp
  8190fc:	df000017 	ldw	fp,0(sp)
  819100:	dec00104 	addi	sp,sp,4
  819104:	f800283a 	ret

00819108 <create_file>:

bool create_file(char *name, t_file_record *file_record,
		t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  819108:	defff304 	addi	sp,sp,-52
  81910c:	dfc00c15 	stw	ra,48(sp)
  819110:	df000b15 	stw	fp,44(sp)
  819114:	df000b04 	addi	fp,sp,44
  819118:	e13ffb15 	stw	r4,-20(fp)
  81911c:	e17ffc15 	stw	r5,-16(fp)
  819120:	e1bffd15 	stw	r6,-12(fp)
	unsigned int cluster_number;
	bool result = false;
  819124:	e03ff915 	stw	zero,-28(fp)

	if (find_first_empty_cluster(&cluster_number)) {
  819128:	e13ffa04 	addi	r4,fp,-24
  81912c:	0818a340 	call	818a34 <find_first_empty_cluster>
  819130:	1005003a 	cmpeq	r2,r2,zero
  819134:	1000a31e 	bne	r2,zero,8193c4 <create_file+0x2bc>
		int record_index;

		if (home_dir->file_record_cluster == 0) {
  819138:	e0bffd17 	ldw	r2,-12(fp)
  81913c:	10800a17 	ldw	r2,40(r2)
  819140:	1004c03a 	cmpne	r2,r2,zero
  819144:	1000031e 	bne	r2,zero,819154 <create_file+0x4c>
			// Put a file in the root directory.
			record_index = find_first_empty_record_in_root_directory();
  819148:	0818e240 	call	818e24 <find_first_empty_record_in_root_directory>
  81914c:	e0bff815 	stw	r2,-32(fp)
  819150:	00000506 	br	819168 <create_file+0x60>
		} else {
			// Put a file in a subdirectory.
			record_index = find_first_empty_record_in_a_subdirectory(
  819154:	e0bffd17 	ldw	r2,-12(fp)
  819158:	1080058b 	ldhu	r2,22(r2)
  81915c:	113fffcc 	andi	r4,r2,65535
  819160:	0818bd80 	call	818bd8 <find_first_empty_record_in_a_subdirectory>
  819164:	e0bff815 	stw	r2,-32(fp)
					home_dir->start_cluster_index);
		}
		if (record_index >= 0) {
  819168:	e0bff817 	ldw	r2,-32(fp)
  81916c:	1004803a 	cmplt	r2,r2,zero
  819170:	1000941e 	bne	r2,zero,8193c4 <create_file+0x2bc>
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
  819174:	e13ffb17 	ldw	r4,-20(fp)
  819178:	0817d100 	call	817d10 <get_dir_divider_location>
  81917c:	e0bff615 	stw	r2,-40(fp)
			int last_dir_separator = 0;
  819180:	e03ff515 	stw	zero,-44(fp)

			// Skip through all directory separators.
			while (location > 0) {
  819184:	00000b06 	br	8191b4 <create_file+0xac>
				last_dir_separator = last_dir_separator + location + 1;
  819188:	e0fff517 	ldw	r3,-44(fp)
  81918c:	e0bff617 	ldw	r2,-40(fp)
  819190:	1885883a 	add	r2,r3,r2
  819194:	10800044 	addi	r2,r2,1
  819198:	e0bff515 	stw	r2,-44(fp)
				location
  81919c:	e0bff517 	ldw	r2,-44(fp)
  8191a0:	1007883a 	mov	r3,r2
  8191a4:	e0bffb17 	ldw	r2,-20(fp)
  8191a8:	1889883a 	add	r4,r3,r2
  8191ac:	0817d100 	call	817d10 <get_dir_divider_location>
  8191b0:	e0bff615 	stw	r2,-40(fp)
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
			int last_dir_separator = 0;

			// Skip through all directory separators.
			while (location > 0) {
  8191b4:	e0bff617 	ldw	r2,-40(fp)
  8191b8:	10800048 	cmpgei	r2,r2,1
  8191bc:	103ff21e 	bne	r2,zero,819188 <create_file+0x80>
				last_dir_separator = last_dir_separator + location + 1;
				location
						= get_dir_divider_location(&(name[last_dir_separator]));
			}

			convert_filename_to_name_extension(&(name[last_dir_separator]),
  8191c0:	e0bff517 	ldw	r2,-44(fp)
  8191c4:	1007883a 	mov	r3,r2
  8191c8:	e0bffb17 	ldw	r2,-20(fp)
  8191cc:	1889883a 	add	r4,r3,r2
  8191d0:	e0bffc17 	ldw	r2,-16(fp)
  8191d4:	100b883a 	mov	r5,r2
  8191d8:	e0bffc17 	ldw	r2,-16(fp)
  8191dc:	10800204 	addi	r2,r2,8
  8191e0:	100d883a 	mov	r6,r2
  8191e4:	0818f500 	call	818f50 <convert_filename_to_name_extension>
					file_record->name, file_record->extension);

			file_record->attributes = 0;
  8191e8:	e0bffc17 	ldw	r2,-16(fp)
  8191ec:	100002c5 	stb	zero,11(r2)
			file_record->create_time = 0;
  8191f0:	e0bffc17 	ldw	r2,-16(fp)
  8191f4:	1000030d 	sth	zero,12(r2)
			file_record->create_date = 0;
  8191f8:	e0bffc17 	ldw	r2,-16(fp)
  8191fc:	1000038d 	sth	zero,14(r2)
			file_record->last_access_date = 0;
  819200:	e0bffc17 	ldw	r2,-16(fp)
  819204:	1000040d 	sth	zero,16(r2)
			file_record->last_modified_time = 0;
  819208:	e0bffc17 	ldw	r2,-16(fp)
  81920c:	1000048d 	sth	zero,18(r2)
			file_record->last_modified_date = 0;
  819210:	e0bffc17 	ldw	r2,-16(fp)
  819214:	1000050d 	sth	zero,20(r2)
			file_record->start_cluster_index = cluster_number;
  819218:	e0bffa17 	ldw	r2,-24(fp)
  81921c:	1007883a 	mov	r3,r2
  819220:	e0bffc17 	ldw	r2,-16(fp)
  819224:	10c0058d 	sth	r3,22(r2)
			file_record->file_size_in_bytes = 0;
  819228:	e0bffc17 	ldw	r2,-16(fp)
  81922c:	10000615 	stw	zero,24(r2)
			file_record->current_cluster_index = cluster_number;
  819230:	e0fffa17 	ldw	r3,-24(fp)
  819234:	e0bffc17 	ldw	r2,-16(fp)
  819238:	10c00715 	stw	r3,28(r2)
			file_record->current_sector_in_cluster = 0;
  81923c:	e0bffc17 	ldw	r2,-16(fp)
  819240:	10000815 	stw	zero,32(r2)
			file_record->current_byte_position = 0;
  819244:	e0bffc17 	ldw	r2,-16(fp)
  819248:	10000915 	stw	zero,36(r2)
			file_record->file_record_cluster = record_index & 0x0000ffff;
  81924c:	e0bff817 	ldw	r2,-32(fp)
  819250:	10ffffcc 	andi	r3,r2,65535
  819254:	e0bffc17 	ldw	r2,-16(fp)
  819258:	10c00a15 	stw	r3,40(r2)
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
  81925c:	e0bff817 	ldw	r2,-32(fp)
  819260:	1005d43a 	srai	r2,r2,16
  819264:	10bfffcc 	andi	r2,r2,65535
  819268:	e0bfff15 	stw	r2,-4(fp)
  81926c:	e0ffff17 	ldw	r3,-4(fp)
  819270:	1804403a 	cmpge	r2,r3,zero
  819274:	1000031e 	bne	r2,zero,819284 <create_file+0x17c>
  819278:	e0bfff17 	ldw	r2,-4(fp)
  81927c:	108003c4 	addi	r2,r2,15
  819280:	e0bfff15 	stw	r2,-4(fp)
  819284:	e0ffff17 	ldw	r3,-4(fp)
  819288:	1805d13a 	srai	r2,r3,4
  81928c:	1007883a 	mov	r3,r2
  819290:	e0bffc17 	ldw	r2,-16(fp)
  819294:	10c00b15 	stw	r3,44(r2)
					& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
  819298:	e0bff817 	ldw	r2,-32(fp)
  81929c:	1005d43a 	srai	r2,r2,16
  8192a0:	108003cc 	andi	r2,r2,15
  8192a4:	1004917a 	slli	r2,r2,5
  8192a8:	1007883a 	mov	r3,r2
  8192ac:	e0bffc17 	ldw	r2,-16(fp)
  8192b0:	10c00c0d 	sth	r3,48(r2)
					& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
  8192b4:	e0bffd17 	ldw	r2,-12(fp)
  8192b8:	1080058b 	ldhu	r2,22(r2)
  8192bc:	10ffffcc 	andi	r3,r2,65535
  8192c0:	e0bffc17 	ldw	r2,-16(fp)
  8192c4:	10c00d15 	stw	r3,52(r2)
			file_record->in_use = true;
  8192c8:	e0fffc17 	ldw	r3,-16(fp)
  8192cc:	00800044 	movi	r2,1
  8192d0:	18800f15 	stw	r2,60(r3)
			file_record->modified = true;
  8192d4:	e0fffc17 	ldw	r3,-16(fp)
  8192d8:	00800044 	movi	r2,1
  8192dc:	18800e15 	stw	r2,56(r3)
			// Now write the record at the specified location.
			file_record_sector
  8192e0:	e0bffc17 	ldw	r2,-16(fp)
  8192e4:	10800a17 	ldw	r2,40(r2)
  8192e8:	1004c03a 	cmpne	r2,r2,zero
  8192ec:	1000081e 	bne	r2,zero,819310 <create_file+0x208>
  8192f0:	008020b4 	movhi	r2,130
  8192f4:	10913d04 	addi	r2,r2,17652
  8192f8:	10c01317 	ldw	r3,76(r2)
  8192fc:	e0bffc17 	ldw	r2,-16(fp)
  819300:	10800b17 	ldw	r2,44(r2)
  819304:	1887883a 	add	r3,r3,r2
  819308:	e0fffe15 	stw	r3,-8(fp)
  81930c:	00001006 	br	819350 <create_file+0x248>
  819310:	008020b4 	movhi	r2,130
  819314:	10913d04 	addi	r2,r2,17652
  819318:	11001417 	ldw	r4,80(r2)
  81931c:	e0bffc17 	ldw	r2,-16(fp)
  819320:	10800a17 	ldw	r2,40(r2)
  819324:	10ffff84 	addi	r3,r2,-2
  819328:	008020b4 	movhi	r2,130
  81932c:	10913d04 	addi	r2,r2,17652
  819330:	10800383 	ldbu	r2,14(r2)
  819334:	10803fcc 	andi	r2,r2,255
  819338:	1885383a 	mul	r2,r3,r2
  81933c:	2087883a 	add	r3,r4,r2
  819340:	e0bffc17 	ldw	r2,-16(fp)
  819344:	10800b17 	ldw	r2,44(r2)
  819348:	1887883a 	add	r3,r3,r2
  81934c:	e0fffe15 	stw	r3,-8(fp)
  819350:	e0bffe17 	ldw	r2,-8(fp)
  819354:	e0bff715 	stw	r2,-36(fp)
							: (boot_sector_data.data_sector_offset
									+ (file_record->file_record_cluster - 2)
											* boot_sector_data.sectors_per_cluster
									+ file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector,
  819358:	e13ff717 	ldw	r4,-36(fp)
  81935c:	d1674c17 	ldw	r5,-25296(gp)
  819360:	08168e00 	call	8168e0 <Read_Sector_Data>
  819364:	1005003a 	cmpeq	r2,r2,zero
  819368:	1000161e 	bne	r2,zero,8193c4 <create_file+0x2bc>
					fat_partition_offset_in_512_byte_sectors)) {
				if (Write_File_Record_At_Offset(
  81936c:	e0bffc17 	ldw	r2,-16(fp)
  819370:	10800c0b 	ldhu	r2,48(r2)
  819374:	113fffcc 	andi	r4,r2,65535
  819378:	2120001c 	xori	r4,r4,32768
  81937c:	21200004 	addi	r4,r4,-32768
  819380:	e17ffc17 	ldw	r5,-16(fp)
  819384:	0816fac0 	call	816fac <Write_File_Record_At_Offset>
  819388:	1005003a 	cmpeq	r2,r2,zero
  81938c:	10000d1e 	bne	r2,zero,8193c4 <create_file+0x2bc>
						file_record->file_record_offset, file_record)) {
					Save_Modified_Sector();
  819390:	08168900 	call	816890 <Save_Modified_Sector>
					// Mark the first cluster of the file as the last cluster at first.
					mark_cluster(cluster_number, ((short int) (0xffff)), true);
  819394:	e13ffa17 	ldw	r4,-24(fp)
  819398:	017fffc4 	movi	r5,-1
  81939c:	01800044 	movi	r6,1
  8193a0:	0816a940 	call	816a94 <mark_cluster>
					if (mark_cluster(cluster_number, ((short int) (0xffff)),
  8193a4:	e13ffa17 	ldw	r4,-24(fp)
  8193a8:	017fffc4 	movi	r5,-1
  8193ac:	000d883a 	mov	r6,zero
  8193b0:	0816a940 	call	816a94 <mark_cluster>
  8193b4:	1005003a 	cmpeq	r2,r2,zero
  8193b8:	1000021e 	bne	r2,zero,8193c4 <create_file+0x2bc>
							false)) {
						result = true;
  8193bc:	00800044 	movi	r2,1
  8193c0:	e0bff915 	stw	r2,-28(fp)
				}
			}
		}

	}
	return result;
  8193c4:	e0bff917 	ldw	r2,-28(fp)
}
  8193c8:	e037883a 	mov	sp,fp
  8193cc:	dfc00117 	ldw	ra,4(sp)
  8193d0:	df000017 	ldw	fp,0(sp)
  8193d4:	dec00204 	addi	sp,sp,8
  8193d8:	f800283a 	ret

008193dc <copy_file_record_name_to_string>:

void copy_file_record_name_to_string(t_file_record *file_record,
		char *file_name)
/* Copy a file name from the file record to a given string */
{
  8193dc:	defffb04 	addi	sp,sp,-20
  8193e0:	df000415 	stw	fp,16(sp)
  8193e4:	df000404 	addi	fp,sp,16
  8193e8:	e13ffe15 	stw	r4,-8(fp)
  8193ec:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
  8193f0:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
  8193f4:	e03ffd15 	stw	zero,-12(fp)
  8193f8:	00001606 	br	819454 <copy_file_record_name_to_string+0x78>
		if (file_record->name[index] != ' ') {
  8193fc:	e0fffd17 	ldw	r3,-12(fp)
  819400:	e0bffe17 	ldw	r2,-8(fp)
  819404:	10c5883a 	add	r2,r2,r3
  819408:	10800003 	ldbu	r2,0(r2)
  81940c:	10803fcc 	andi	r2,r2,255
  819410:	10800820 	cmpeqi	r2,r2,32
  819414:	10000c1e 	bne	r2,zero,819448 <copy_file_record_name_to_string+0x6c>
			file_name[flength] = file_record->name[index];
  819418:	e0bffc17 	ldw	r2,-16(fp)
  81941c:	1007883a 	mov	r3,r2
  819420:	e0bfff17 	ldw	r2,-4(fp)
  819424:	1889883a 	add	r4,r3,r2
  819428:	e0fffd17 	ldw	r3,-12(fp)
  81942c:	e0bffe17 	ldw	r2,-8(fp)
  819430:	10c5883a 	add	r2,r2,r3
  819434:	10800003 	ldbu	r2,0(r2)
  819438:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
  81943c:	e0bffc17 	ldw	r2,-16(fp)
  819440:	10800044 	addi	r2,r2,1
  819444:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
  819448:	e0bffd17 	ldw	r2,-12(fp)
  81944c:	10800044 	addi	r2,r2,1
  819450:	e0bffd15 	stw	r2,-12(fp)
  819454:	e0bffd17 	ldw	r2,-12(fp)
  819458:	10800210 	cmplti	r2,r2,8
  81945c:	103fe71e 	bne	r2,zero,8193fc <copy_file_record_name_to_string+0x20>
		if (file_record->name[index] != ' ') {
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ') {
  819460:	e0bffe17 	ldw	r2,-8(fp)
  819464:	10800203 	ldbu	r2,8(r2)
  819468:	10803fcc 	andi	r2,r2,255
  81946c:	10800820 	cmpeqi	r2,r2,32
  819470:	1000261e 	bne	r2,zero,81950c <copy_file_record_name_to_string+0x130>
		file_name[flength] = '.';
  819474:	e0bffc17 	ldw	r2,-16(fp)
  819478:	1007883a 	mov	r3,r2
  81947c:	e0bfff17 	ldw	r2,-4(fp)
  819480:	1887883a 	add	r3,r3,r2
  819484:	00800b84 	movi	r2,46
  819488:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
  81948c:	e0bffc17 	ldw	r2,-16(fp)
  819490:	10800044 	addi	r2,r2,1
  819494:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++) {
  819498:	e03ffd15 	stw	zero,-12(fp)
  81949c:	00001806 	br	819500 <copy_file_record_name_to_string+0x124>
			if (file_record->extension[index] != ' ') {
  8194a0:	e0fffd17 	ldw	r3,-12(fp)
  8194a4:	e0bffe17 	ldw	r2,-8(fp)
  8194a8:	1885883a 	add	r2,r3,r2
  8194ac:	10800204 	addi	r2,r2,8
  8194b0:	10800003 	ldbu	r2,0(r2)
  8194b4:	10803fcc 	andi	r2,r2,255
  8194b8:	10800820 	cmpeqi	r2,r2,32
  8194bc:	10000d1e 	bne	r2,zero,8194f4 <copy_file_record_name_to_string+0x118>
				file_name[flength] = file_record->extension[index];
  8194c0:	e0bffc17 	ldw	r2,-16(fp)
  8194c4:	1007883a 	mov	r3,r2
  8194c8:	e0bfff17 	ldw	r2,-4(fp)
  8194cc:	1889883a 	add	r4,r3,r2
  8194d0:	e0fffd17 	ldw	r3,-12(fp)
  8194d4:	e0bffe17 	ldw	r2,-8(fp)
  8194d8:	1885883a 	add	r2,r3,r2
  8194dc:	10800204 	addi	r2,r2,8
  8194e0:	10800003 	ldbu	r2,0(r2)
  8194e4:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
  8194e8:	e0bffc17 	ldw	r2,-16(fp)
  8194ec:	10800044 	addi	r2,r2,1
  8194f0:	e0bffc15 	stw	r2,-16(fp)
		}
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
  8194f4:	e0bffd17 	ldw	r2,-12(fp)
  8194f8:	10800044 	addi	r2,r2,1
  8194fc:	e0bffd15 	stw	r2,-12(fp)
  819500:	e0bffd17 	ldw	r2,-12(fp)
  819504:	108000d0 	cmplti	r2,r2,3
  819508:	103fe51e 	bne	r2,zero,8194a0 <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
  81950c:	e0bffc17 	ldw	r2,-16(fp)
  819510:	1007883a 	mov	r3,r2
  819514:	e0bfff17 	ldw	r2,-4(fp)
  819518:	1885883a 	add	r2,r3,r2
  81951c:	10000005 	stb	zero,0(r2)
}
  819520:	e037883a 	mov	sp,fp
  819524:	df000017 	ldw	fp,0(sp)
  819528:	dec00104 	addi	sp,sp,4
  81952c:	f800283a 	ret

00819530 <alt_up_sd_card_open_dev>:
///////////////////////////////////////////////////////////////////////////
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name) {
  819530:	defffc04 	addi	sp,sp,-16
  819534:	dfc00315 	stw	ra,12(sp)
  819538:	df000215 	stw	fp,8(sp)
  81953c:	df000204 	addi	fp,sp,8
  819540:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name,
			&alt_dev_list);
  819544:	e13fff17 	ldw	r4,-4(fp)
  819548:	014020b4 	movhi	r5,130
  81954c:	2979c904 	addi	r5,r5,-6364
  819550:	081b2480 	call	81b248 <alt_find_dev>
  819554:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL) {
  819558:	e0bffe17 	ldw	r2,-8(fp)
  81955c:	1005003a 	cmpeq	r2,r2,zero
  819560:	10001e1e 	bne	r2,zero,8195dc <alt_up_sd_card_open_dev+0xac>
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  819564:	e0bffe17 	ldw	r2,-8(fp)
  819568:	10800a17 	ldw	r2,40(r2)
  81956c:	10808d04 	addi	r2,r2,564
  819570:	d0a74615 	stw	r2,-25320(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
  819574:	e0bffe17 	ldw	r2,-8(fp)
  819578:	10800a17 	ldw	r2,40(r2)
  81957c:	10808904 	addi	r2,r2,548
  819580:	d0a74715 	stw	r2,-25316(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
  819584:	e0bffe17 	ldw	r2,-8(fp)
  819588:	10800a17 	ldw	r2,40(r2)
  81958c:	10808404 	addi	r2,r2,528
  819590:	d0a74815 	stw	r2,-25312(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
  819594:	e0bffe17 	ldw	r2,-8(fp)
  819598:	10800a17 	ldw	r2,40(r2)
  81959c:	10808c04 	addi	r2,r2,560
  8195a0:	d0a74915 	stw	r2,-25308(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
  8195a4:	e0bffe17 	ldw	r2,-8(fp)
  8195a8:	10800a17 	ldw	r2,40(r2)
  8195ac:	10808b04 	addi	r2,r2,556
  8195b0:	d0a74a15 	stw	r2,-25304(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
  8195b4:	e0bffe17 	ldw	r2,-8(fp)
  8195b8:	10800a17 	ldw	r2,40(r2)
  8195bc:	d0a74b15 	stw	r2,-25300(gp)
		device_pointer = dev;
  8195c0:	e0bffe17 	ldw	r2,-8(fp)
  8195c4:	d0a74e15 	stw	r2,-25288(gp)
		initialized = false;
  8195c8:	d0274415 	stw	zero,-25328(gp)
		is_sd_card_formated_as_FAT16 = false;
  8195cc:	d0274515 	stw	zero,-25324(gp)
		search_data.valid = false;
  8195d0:	008020b4 	movhi	r2,130
  8195d4:	10913804 	addi	r2,r2,17632
  8195d8:	10000415 	stw	zero,16(r2)
	}
	return dev;
  8195dc:	e0bffe17 	ldw	r2,-8(fp)
}
  8195e0:	e037883a 	mov	sp,fp
  8195e4:	dfc00117 	ldw	ra,4(sp)
  8195e8:	df000017 	ldw	fp,0(sp)
  8195ec:	dec00204 	addi	sp,sp,8
  8195f0:	f800283a 	ret

008195f4 <alt_up_sd_card_is_Present>:

bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
  8195f4:	defffd04 	addi	sp,sp,-12
  8195f8:	df000215 	stw	fp,8(sp)
  8195fc:	df000204 	addi	fp,sp,8
	bool result = false;
  819600:	e03fff15 	stw	zero,-4(fp)

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  819604:	d0a74e17 	ldw	r2,-25288(gp)
  819608:	1005003a 	cmpeq	r2,r2,zero
  81960c:	1000081e 	bne	r2,zero,819630 <alt_up_sd_card_is_Present+0x3c>
  819610:	d0a74617 	ldw	r2,-25320(gp)
  819614:	1080002b 	ldhuio	r2,0(r2)
  819618:	1080008c 	andi	r2,r2,2
  81961c:	1005003a 	cmpeq	r2,r2,zero
  819620:	1000031e 	bne	r2,zero,819630 <alt_up_sd_card_is_Present+0x3c>
			& 0x02) != 0)) {
		result = true;
  819624:	00800044 	movi	r2,1
  819628:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  81962c:	00001e06 	br	8196a8 <alt_up_sd_card_is_Present+0xb4>
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
  819630:	d0a74417 	ldw	r2,-25328(gp)
  819634:	10800058 	cmpnei	r2,r2,1
  819638:	10001b1e 	bne	r2,zero,8196a8 <alt_up_sd_card_is_Present+0xb4>
		int index;

		initialized = false;
  81963c:	d0274415 	stw	zero,-25328(gp)
		search_data.valid = false;
  819640:	008020b4 	movhi	r2,130
  819644:	10913804 	addi	r2,r2,17632
  819648:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
  81964c:	d0274515 	stw	zero,-25324(gp)

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  819650:	e03ffe15 	stw	zero,-8(fp)
  819654:	00001106 	br	81969c <alt_up_sd_card_is_Present+0xa8>
			active_files[index].in_use = false;
  819658:	e0bffe17 	ldw	r2,-8(fp)
  81965c:	00c020b4 	movhi	r3,130
  819660:	18d15204 	addi	r3,r3,17736
  819664:	100491ba 	slli	r2,r2,6
  819668:	10c5883a 	add	r2,r2,r3
  81966c:	10800f04 	addi	r2,r2,60
  819670:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
  819674:	e0bffe17 	ldw	r2,-8(fp)
  819678:	00c020b4 	movhi	r3,130
  81967c:	18d15204 	addi	r3,r3,17736
  819680:	100491ba 	slli	r2,r2,6
  819684:	10c5883a 	add	r2,r2,r3
  819688:	10800e04 	addi	r2,r2,56
  81968c:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  819690:	e0bffe17 	ldw	r2,-8(fp)
  819694:	10800044 	addi	r2,r2,1
  819698:	e0bffe15 	stw	r2,-8(fp)
  81969c:	e0bffe17 	ldw	r2,-8(fp)
  8196a0:	10800510 	cmplti	r2,r2,20
  8196a4:	103fec1e 	bne	r2,zero,819658 <alt_up_sd_card_is_Present+0x64>
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
	return result;
  8196a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8196ac:	e037883a 	mov	sp,fp
  8196b0:	df000017 	ldw	fp,0(sp)
  8196b4:	dec00104 	addi	sp,sp,4
  8196b8:	f800283a 	ret

008196bc <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
  8196bc:	defffd04 	addi	sp,sp,-12
  8196c0:	dfc00215 	stw	ra,8(sp)
  8196c4:	df000115 	stw	fp,4(sp)
  8196c8:	df000104 	addi	fp,sp,4
	bool result = false;
  8196cc:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
  8196d0:	08195f40 	call	8195f4 <alt_up_sd_card_is_Present>
  8196d4:	1005003a 	cmpeq	r2,r2,zero
  8196d8:	10000d1e 	bne	r2,zero,819710 <alt_up_sd_card_is_FAT16+0x54>
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false) {
  8196dc:	d0a74417 	ldw	r2,-25328(gp)
  8196e0:	1004c03a 	cmpne	r2,r2,zero
  8196e4:	1000071e 	bne	r2,zero,819704 <alt_up_sd_card_is_FAT16+0x48>
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
  8196e8:	08178ac0 	call	8178ac <Look_for_FAT16>
  8196ec:	d0a74515 	stw	r2,-25324(gp)
			initialized = is_sd_card_formated_as_FAT16;
  8196f0:	d0a74517 	ldw	r2,-25324(gp)
  8196f4:	d0a74415 	stw	r2,-25328(gp)
			search_data.valid = false;
  8196f8:	008020b4 	movhi	r2,130
  8196fc:	10913804 	addi	r2,r2,17632
  819700:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
  819704:	d0a74517 	ldw	r2,-25324(gp)
  819708:	e0bfff15 	stw	r2,-4(fp)
  81970c:	00000206 	br	819718 <alt_up_sd_card_is_FAT16+0x5c>
	} else {
		// If not then you may as well not open the device.
		initialized = false;
  819710:	d0274415 	stw	zero,-25328(gp)
		is_sd_card_formated_as_FAT16 = false;
  819714:	d0274515 	stw	zero,-25324(gp)
	}

	return result;
  819718:	e0bfff17 	ldw	r2,-4(fp)
}
  81971c:	e037883a 	mov	sp,fp
  819720:	dfc00117 	ldw	ra,4(sp)
  819724:	df000017 	ldw	fp,0(sp)
  819728:	dec00204 	addi	sp,sp,8
  81972c:	f800283a 	ret

00819730 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
  819730:	deffea04 	addi	sp,sp,-88
  819734:	dfc01515 	stw	ra,84(sp)
  819738:	df001415 	stw	fp,80(sp)
  81973c:	df001404 	addi	fp,sp,80
  819740:	e13ffe15 	stw	r4,-8(fp)
  819744:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
  819748:	00800084 	movi	r2,2
  81974c:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  819750:	08195f40 	call	8195f4 <alt_up_sd_card_is_Present>
  819754:	1005003a 	cmpeq	r2,r2,zero
  819758:	1000241e 	bne	r2,zero,8197ec <alt_up_sd_card_find_first+0xbc>
  81975c:	d0a74517 	ldw	r2,-25324(gp)
  819760:	1005003a 	cmpeq	r2,r2,zero
  819764:	1000211e 	bne	r2,zero,8197ec <alt_up_sd_card_find_first+0xbc>
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through,
  819768:	e17fed04 	addi	r5,fp,-76
  81976c:	e1bfee04 	addi	r6,fp,-72
  819770:	e13ffe17 	ldw	r4,-8(fp)
  819774:	08180bc0 	call	8180bc <get_home_directory_cluster_for_file>
  819778:	1005003a 	cmpeq	r2,r2,zero
  81977c:	1000191e 	bne	r2,zero,8197e4 <alt_up_sd_card_find_first+0xb4>
				&home_directory_cluster, &file_record)) {
			search_data.directory_root_cluster = home_directory_cluster;
  819780:	e0bfed17 	ldw	r2,-76(fp)
  819784:	1007883a 	mov	r3,r2
  819788:	008020b4 	movhi	r2,130
  81978c:	10913804 	addi	r2,r2,17632
  819790:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
  819794:	e0bfed17 	ldw	r2,-76(fp)
  819798:	1007883a 	mov	r3,r2
  81979c:	008020b4 	movhi	r2,130
  8197a0:	10913804 	addi	r2,r2,17632
  8197a4:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
  8197a8:	008020b4 	movhi	r2,130
  8197ac:	10913804 	addi	r2,r2,17632
  8197b0:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
  8197b4:	00c020b4 	movhi	r3,130
  8197b8:	18d13804 	addi	r3,r3,17632
  8197bc:	00bfffc4 	movi	r2,-1
  8197c0:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
  8197c4:	00c020b4 	movhi	r3,130
  8197c8:	18d13804 	addi	r3,r3,17632
  8197cc:	00800044 	movi	r2,1
  8197d0:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
  8197d4:	e13fff17 	ldw	r4,-4(fp)
  8197d8:	08198040 	call	819804 <alt_up_sd_card_find_next>
  8197dc:	e0bfec0d 	sth	r2,-80(fp)
  8197e0:	00000206 	br	8197ec <alt_up_sd_card_find_first+0xbc>
		} else {
			result = 1;
  8197e4:	00800044 	movi	r2,1
  8197e8:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
  8197ec:	e0bfec0f 	ldh	r2,-80(fp)
}
  8197f0:	e037883a 	mov	sp,fp
  8197f4:	dfc00117 	ldw	ra,4(sp)
  8197f8:	df000017 	ldw	fp,0(sp)
  8197fc:	dec00204 	addi	sp,sp,8
  819800:	f800283a 	ret

00819804 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
  819804:	deffe404 	addi	sp,sp,-112
  819808:	dfc01b15 	stw	ra,108(sp)
  81980c:	df001a15 	stw	fp,104(sp)
  819810:	df001a04 	addi	fp,sp,104
  819814:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
  819818:	00800084 	movi	r2,2
  81981c:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  819820:	08195f40 	call	8195f4 <alt_up_sd_card_is_Present>
  819824:	1005003a 	cmpeq	r2,r2,zero
  819828:	1000da1e 	bne	r2,zero,819b94 <alt_up_sd_card_find_next+0x390>
  81982c:	d0a74517 	ldw	r2,-25324(gp)
  819830:	1005003a 	cmpeq	r2,r2,zero
  819834:	1000d71e 	bne	r2,zero,819b94 <alt_up_sd_card_find_next+0x390>
		if (search_data.valid) {
  819838:	008020b4 	movhi	r2,130
  81983c:	10913804 	addi	r2,r2,17632
  819840:	10800417 	ldw	r2,16(r2)
  819844:	1005003a 	cmpeq	r2,r2,zero
  819848:	1000d01e 	bne	r2,zero,819b8c <alt_up_sd_card_find_next+0x388>
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
  81984c:	008020b4 	movhi	r2,130
  819850:	10913804 	addi	r2,r2,17632
  819854:	10800117 	ldw	r2,4(r2)
  819858:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0) {
  81985c:	e0bfec17 	ldw	r2,-80(fp)
  819860:	1004c03a 	cmpne	r2,r2,zero
  819864:	1000511e 	bne	r2,zero,8199ac <alt_up_sd_card_find_next+0x1a8>
				// Searching through the root directory
				int max_root_dir_sectors = ((32
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
  819868:	008020b4 	movhi	r2,130
  81986c:	10913d04 	addi	r2,r2,17652
  819870:	1080050b 	ldhu	r2,20(r2)
  819874:	10bfffcc 	andi	r2,r2,65535
  819878:	1008917a 	slli	r4,r2,5
  81987c:	008020b4 	movhi	r2,130
  819880:	10913d04 	addi	r2,r2,17652
  819884:	1080030b 	ldhu	r2,12(r2)
  819888:	117fffcc 	andi	r5,r2,65535
  81988c:	0808dcc0 	call	808dcc <__divsi3>
  819890:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
  819894:	008020b4 	movhi	r2,130
  819898:	10913804 	addi	r2,r2,17632
  81989c:	10800217 	ldw	r2,8(r2)
  8198a0:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector + 1;
  8198a4:	008020b4 	movhi	r2,130
  8198a8:	10913804 	addi	r2,r2,17632
  8198ac:	1080030b 	ldhu	r2,12(r2)
  8198b0:	10bfffcc 	andi	r2,r2,65535
  8198b4:	10a0001c 	xori	r2,r2,32768
  8198b8:	10a00004 	addi	r2,r2,-32768
  8198bc:	10800044 	addi	r2,r2,1
  8198c0:	e0bfe915 	stw	r2,-92(fp)

				for (; sector_index < max_root_dir_sectors; sector_index++) {
  8198c4:	00003306 	br	819994 <alt_up_sd_card_find_next+0x190>
					if (Read_Sector_Data(sector_index
  8198c8:	008020b4 	movhi	r2,130
  8198cc:	10913d04 	addi	r2,r2,17652
  8198d0:	10c01317 	ldw	r3,76(r2)
  8198d4:	e0bfea17 	ldw	r2,-88(fp)
  8198d8:	1885883a 	add	r2,r3,r2
  8198dc:	1009883a 	mov	r4,r2
  8198e0:	d1674c17 	ldw	r5,-25296(gp)
  8198e4:	08168e00 	call	8168e0 <Read_Sector_Data>
  8198e8:	1005003a 	cmpeq	r2,r2,zero
  8198ec:	10002c1e 	bne	r2,zero,8199a0 <alt_up_sd_card_find_next+0x19c>
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
  8198f0:	00002106 	br	819978 <alt_up_sd_card_find_next+0x174>
							if (Read_File_Record_At_Offset(file_counter * 32,
  8198f4:	e0bfe917 	ldw	r2,-92(fp)
  8198f8:	1008917a 	slli	r4,r2,5
  8198fc:	e1ffea17 	ldw	r7,-88(fp)
  819900:	e17fee04 	addi	r5,fp,-72
  819904:	000d883a 	mov	r6,zero
  819908:	0816d280 	call	816d28 <Read_File_Record_At_Offset>
  81990c:	1005003a 	cmpeq	r2,r2,zero
  819910:	1000161e 	bne	r2,zero,81996c <alt_up_sd_card_find_next+0x168>
									&file_record, 0, sector_index)) {
								if ((file_record.name[0] != 0)
  819914:	e0bfee03 	ldbu	r2,-72(fp)
  819918:	10803fcc 	andi	r2,r2,255
  81991c:	1005003a 	cmpeq	r2,r2,zero
  819920:	1000121e 	bne	r2,zero,81996c <alt_up_sd_card_find_next+0x168>
  819924:	e0bfee03 	ldbu	r2,-72(fp)
  819928:	10803fcc 	andi	r2,r2,255
  81992c:	10803960 	cmpeqi	r2,r2,229
  819930:	10000e1e 	bne	r2,zero,81996c <alt_up_sd_card_find_next+0x168>
										&& (file_record.name[0] != 0xe5)) {
									/* Update search structure. */
									search_data.file_index_in_sector
  819934:	e0bfe917 	ldw	r2,-92(fp)
  819938:	1007883a 	mov	r3,r2
  81993c:	008020b4 	movhi	r2,130
  819940:	10913804 	addi	r2,r2,17632
  819944:	10c0030d 	sth	r3,12(r2)
											= file_counter;
									search_data.current_sector_in_cluster
  819948:	e0ffea17 	ldw	r3,-88(fp)
  81994c:	008020b4 	movhi	r2,130
  819950:	10913804 	addi	r2,r2,17632
  819954:	10c00215 	stw	r3,8(r2)
											= sector_index;

									/* Copy file name.*/
									copy_file_record_name_to_string(
  819958:	e13fee04 	addi	r4,fp,-72
  81995c:	e17ffe17 	ldw	r5,-8(fp)
  819960:	08193dc0 	call	8193dc <copy_file_record_name_to_string>
											&file_record, file_name);
									return 0;
  819964:	e03fff15 	stw	zero,-4(fp)
  819968:	00008c06 	br	819b9c <alt_up_sd_card_find_next+0x398>

				for (; sector_index < max_root_dir_sectors; sector_index++) {
					if (Read_Sector_Data(sector_index
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
  81996c:	e0bfe917 	ldw	r2,-92(fp)
  819970:	10800044 	addi	r2,r2,1
  819974:	e0bfe915 	stw	r2,-92(fp)
  819978:	e0bfe917 	ldw	r2,-92(fp)
  81997c:	10800410 	cmplti	r2,r2,16
  819980:	103fdc1e 	bne	r2,zero,8198f4 <alt_up_sd_card_find_next+0xf0>
											&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
  819984:	e03fe915 	stw	zero,-92(fp)
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector + 1;

				for (; sector_index < max_root_dir_sectors; sector_index++) {
  819988:	e0bfea17 	ldw	r2,-88(fp)
  81998c:	10800044 	addi	r2,r2,1
  819990:	e0bfea15 	stw	r2,-88(fp)
  819994:	e0ffea17 	ldw	r3,-88(fp)
  819998:	e0bfeb17 	ldw	r2,-84(fp)
  81999c:	18bfca16 	blt	r3,r2,8198c8 <alt_up_sd_card_find_next+0xc4>
						file_counter = 0;
					} else {
						break;
					}
				}
				result = -1;
  8199a0:	00bfffc4 	movi	r2,-1
  8199a4:	e0bfed0d 	sth	r2,-76(fp)
  8199a8:	00007a06 	br	819b94 <alt_up_sd_card_find_next+0x390>
			} else {
				int file_counter = search_data.file_index_in_sector + 1;
  8199ac:	008020b4 	movhi	r2,130
  8199b0:	10913804 	addi	r2,r2,17632
  8199b4:	1080030b 	ldhu	r2,12(r2)
  8199b8:	10bfffcc 	andi	r2,r2,65535
  8199bc:	10a0001c 	xori	r2,r2,32768
  8199c0:	10a00004 	addi	r2,r2,-32768
  8199c4:	10800044 	addi	r2,r2,1
  8199c8:	e0bfe815 	stw	r2,-96(fp)
				do {
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
  8199cc:	e0bfec17 	ldw	r2,-80(fp)
  8199d0:	10ffff84 	addi	r3,r2,-2
  8199d4:	008020b4 	movhi	r2,130
  8199d8:	10913d04 	addi	r2,r2,17652
  8199dc:	10800383 	ldbu	r2,14(r2)
  8199e0:	10803fcc 	andi	r2,r2,255
  8199e4:	1885383a 	mul	r2,r3,r2
  8199e8:	1007883a 	mov	r3,r2
  8199ec:	008020b4 	movhi	r2,130
  8199f0:	10913d04 	addi	r2,r2,17652
  8199f4:	10801417 	ldw	r2,80(r2)
  8199f8:	1885883a 	add	r2,r3,r2
  8199fc:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
  819a00:	008020b4 	movhi	r2,130
  819a04:	10913804 	addi	r2,r2,17632
  819a08:	10800217 	ldw	r2,8(r2)
  819a0c:	e0bfe615 	stw	r2,-104(fp)

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
  819a10:	00003406 	br	819ae4 <alt_up_sd_card_find_next+0x2e0>
						if (Read_Sector_Data(sector_index + start_sector,
  819a14:	e0ffe617 	ldw	r3,-104(fp)
  819a18:	e0bfe717 	ldw	r2,-100(fp)
  819a1c:	1889883a 	add	r4,r3,r2
  819a20:	d1674c17 	ldw	r5,-25296(gp)
  819a24:	08168e00 	call	8168e0 <Read_Sector_Data>
  819a28:	1005003a 	cmpeq	r2,r2,zero
  819a2c:	1000331e 	bne	r2,zero,819afc <alt_up_sd_card_find_next+0x2f8>
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
  819a30:	00002506 	br	819ac8 <alt_up_sd_card_find_next+0x2c4>
								if (Read_File_Record_At_Offset(file_counter
  819a34:	e0bfe817 	ldw	r2,-96(fp)
  819a38:	1008917a 	slli	r4,r2,5
  819a3c:	e1bfec17 	ldw	r6,-80(fp)
  819a40:	e1ffe617 	ldw	r7,-104(fp)
  819a44:	e17fee04 	addi	r5,fp,-72
  819a48:	0816d280 	call	816d28 <Read_File_Record_At_Offset>
  819a4c:	1005003a 	cmpeq	r2,r2,zero
  819a50:	10001a1e 	bne	r2,zero,819abc <alt_up_sd_card_find_next+0x2b8>
										* 32, &file_record, cluster,
										sector_index)) {
									if ((file_record.name[0] != 0)
  819a54:	e0bfee03 	ldbu	r2,-72(fp)
  819a58:	10803fcc 	andi	r2,r2,255
  819a5c:	1005003a 	cmpeq	r2,r2,zero
  819a60:	1000161e 	bne	r2,zero,819abc <alt_up_sd_card_find_next+0x2b8>
  819a64:	e0bfee03 	ldbu	r2,-72(fp)
  819a68:	10803fcc 	andi	r2,r2,255
  819a6c:	10803960 	cmpeqi	r2,r2,229
  819a70:	1000121e 	bne	r2,zero,819abc <alt_up_sd_card_find_next+0x2b8>
											&& (file_record.name[0] != 0xe5)) {
										/* Update search structure. */
										search_data.current_cluster_index
  819a74:	e0ffec17 	ldw	r3,-80(fp)
  819a78:	008020b4 	movhi	r2,130
  819a7c:	10913804 	addi	r2,r2,17632
  819a80:	10c00115 	stw	r3,4(r2)
												= cluster;
										search_data.file_index_in_sector
  819a84:	e0bfe817 	ldw	r2,-96(fp)
  819a88:	1007883a 	mov	r3,r2
  819a8c:	008020b4 	movhi	r2,130
  819a90:	10913804 	addi	r2,r2,17632
  819a94:	10c0030d 	sth	r3,12(r2)
												= file_counter;
										search_data.current_sector_in_cluster
  819a98:	e0ffe617 	ldw	r3,-104(fp)
  819a9c:	008020b4 	movhi	r2,130
  819aa0:	10913804 	addi	r2,r2,17632
  819aa4:	10c00215 	stw	r3,8(r2)
												= sector_index;

										/* Copy file name.*/
										copy_file_record_name_to_string(
  819aa8:	e13fee04 	addi	r4,fp,-72
  819aac:	e17ffe17 	ldw	r5,-8(fp)
  819ab0:	08193dc0 	call	8193dc <copy_file_record_name_to_string>
												&file_record, file_name);
										return 0;
  819ab4:	e03fff15 	stw	zero,-4(fp)
  819ab8:	00003806 	br	819b9c <alt_up_sd_card_find_next+0x398>
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
  819abc:	e0bfe817 	ldw	r2,-96(fp)
  819ac0:	10800044 	addi	r2,r2,1
  819ac4:	e0bfe815 	stw	r2,-96(fp)
  819ac8:	e0bfe817 	ldw	r2,-96(fp)
  819acc:	10800410 	cmplti	r2,r2,16
  819ad0:	103fd81e 	bne	r2,zero,819a34 <alt_up_sd_card_find_next+0x230>
												&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
  819ad4:	e03fe815 	stw	zero,-96(fp)
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
  819ad8:	e0bfe617 	ldw	r2,-104(fp)
  819adc:	10800044 	addi	r2,r2,1
  819ae0:	e0bfe615 	stw	r2,-104(fp)
  819ae4:	008020b4 	movhi	r2,130
  819ae8:	10913d04 	addi	r2,r2,17652
  819aec:	10800383 	ldbu	r2,14(r2)
  819af0:	10c03fcc 	andi	r3,r2,255
  819af4:	e0bfe617 	ldw	r2,-104(fp)
  819af8:	10ffc616 	blt	r2,r3,819a14 <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster) {
  819afc:	008020b4 	movhi	r2,130
  819b00:	10913d04 	addi	r2,r2,17652
  819b04:	10800383 	ldbu	r2,14(r2)
  819b08:	10c03fcc 	andi	r3,r2,255
  819b0c:	e0bfe617 	ldw	r2,-104(fp)
  819b10:	10c01a16 	blt	r2,r3,819b7c <alt_up_sd_card_find_next+0x378>
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster)) {
  819b14:	e13fec17 	ldw	r4,-80(fp)
  819b18:	e17fed84 	addi	r5,fp,-74
  819b1c:	08169dc0 	call	8169dc <get_cluster_flag>
  819b20:	1005003a 	cmpeq	r2,r2,zero
  819b24:	1000131e 	bne	r2,zero,819b74 <alt_up_sd_card_find_next+0x370>
							if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  819b28:	e0bfed8b 	ldhu	r2,-74(fp)
  819b2c:	10bfffcc 	andi	r2,r2,65535
  819b30:	10a0001c 	xori	r2,r2,32768
  819b34:	10a00004 	addi	r2,r2,-32768
  819b38:	10fffe0c 	andi	r3,r2,65528
  819b3c:	00bffe14 	movui	r2,65528
  819b40:	1880051e 	bne	r3,r2,819b58 <alt_up_sd_card_find_next+0x354>
								result = -1;
  819b44:	00bfffc4 	movi	r2,-1
  819b48:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
  819b4c:	008020b4 	movhi	r2,130
  819b50:	10913804 	addi	r2,r2,17632
  819b54:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
  819b58:	e0bfed8b 	ldhu	r2,-74(fp)
  819b5c:	10bfffcc 	andi	r2,r2,65535
  819b60:	10a0001c 	xori	r2,r2,32768
  819b64:	10a00004 	addi	r2,r2,-32768
  819b68:	10bffe0c 	andi	r2,r2,65528
  819b6c:	e0bfec15 	stw	r2,-80(fp)
  819b70:	00000206 	br	819b7c <alt_up_sd_card_find_next+0x378>
						} else {
							// Error encountered.                 
							result = -1;
  819b74:	00bfffc4 	movi	r2,-1
  819b78:	e0bfed0d 	sth	r2,-76(fp)
						}
					}
				} while (cluster < 0x0000fff8);
  819b7c:	e0ffec17 	ldw	r3,-80(fp)
  819b80:	00bffdd4 	movui	r2,65527
  819b84:	10ff910e 	bge	r2,r3,8199cc <alt_up_sd_card_find_next+0x1c8>
  819b88:	00000206 	br	819b94 <alt_up_sd_card_find_next+0x390>
			}
		} else {
			// Call Find_First first.
			result = 3;
  819b8c:	008000c4 	movi	r2,3
  819b90:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
  819b94:	e0bfed0f 	ldh	r2,-76(fp)
  819b98:	e0bfff15 	stw	r2,-4(fp)
  819b9c:	e0bfff17 	ldw	r2,-4(fp)
}
  819ba0:	e037883a 	mov	sp,fp
  819ba4:	dfc00117 	ldw	ra,4(sp)
  819ba8:	df000017 	ldw	fp,0(sp)
  819bac:	dec00204 	addi	sp,sp,8
  819bb0:	f800283a 	ret

00819bb4 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
  819bb4:	deffe804 	addi	sp,sp,-96
  819bb8:	dfc01715 	stw	ra,92(sp)
  819bbc:	df001615 	stw	fp,88(sp)
  819bc0:	df001604 	addi	fp,sp,88
  819bc4:	e13ffd15 	stw	r4,-12(fp)
  819bc8:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
  819bcc:	00bfffc4 	movi	r2,-1
  819bd0:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  819bd4:	08195f40 	call	8195f4 <alt_up_sd_card_is_Present>
  819bd8:	1005003a 	cmpeq	r2,r2,zero
  819bdc:	1000d71e 	bne	r2,zero,819f3c <alt_up_sd_card_fopen+0x388>
  819be0:	d0a74517 	ldw	r2,-25324(gp)
  819be4:	1005003a 	cmpeq	r2,r2,zero
  819be8:	1000d41e 	bne	r2,zero,819f3c <alt_up_sd_card_fopen+0x388>
		unsigned int home_directory_cluster = 0;
  819bec:	e03fec15 	stw	zero,-80(fp)
		 * Rules:
		 *  - no spaces
		 *  - at most 12 chatacters per name, with a period in 9th position.
		 *  - a / or a \ every at most 12 characters.
		 */
		filename_to_upper_case(name);
  819bf0:	e13ffd17 	ldw	r4,-12(fp)
  819bf4:	08179b00 	call	8179b0 <filename_to_upper_case>
		if (check_file_name_for_FAT16_compliance(name)) {
  819bf8:	e13ffd17 	ldw	r4,-12(fp)
  819bfc:	0817a800 	call	817a80 <check_file_name_for_FAT16_compliance>
  819c00:	1005003a 	cmpeq	r2,r2,zero
  819c04:	1000cd1e 	bne	r2,zero,819f3c <alt_up_sd_card_fopen+0x388>
			int index;

			/* Get home directory cluster location for the specified file. 0 means root directory. */
			if (!get_home_directory_cluster_for_file(name,
  819c08:	e17fec04 	addi	r5,fp,-80
  819c0c:	e1bfed04 	addi	r6,fp,-76
  819c10:	e13ffd17 	ldw	r4,-12(fp)
  819c14:	08180bc0 	call	8180bc <get_home_directory_cluster_for_file>
  819c18:	1004c03a 	cmpne	r2,r2,zero
  819c1c:	1000031e 	bne	r2,zero,819c2c <alt_up_sd_card_fopen+0x78>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
  819c20:	e0bfeb0f 	ldh	r2,-84(fp)
  819c24:	e0bfff15 	stw	r2,-4(fp)
  819c28:	0000c606 	br	819f44 <alt_up_sd_card_fopen+0x390>
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
  819c2c:	e03fea15 	stw	zero,-88(fp)
  819c30:	00000f06 	br	819c70 <alt_up_sd_card_fopen+0xbc>
				if (active_files[index].in_use == false) {
  819c34:	e0bfea17 	ldw	r2,-88(fp)
  819c38:	00c020b4 	movhi	r3,130
  819c3c:	18d15204 	addi	r3,r3,17736
  819c40:	100491ba 	slli	r2,r2,6
  819c44:	10c5883a 	add	r2,r2,r3
  819c48:	10800f04 	addi	r2,r2,60
  819c4c:	10800017 	ldw	r2,0(r2)
  819c50:	1004c03a 	cmpne	r2,r2,zero
  819c54:	1000031e 	bne	r2,zero,819c64 <alt_up_sd_card_fopen+0xb0>
					file_record_index = index;
  819c58:	e0bfea17 	ldw	r2,-88(fp)
  819c5c:	e0bfeb0d 	sth	r2,-84(fp)
					break;
  819c60:	00000606 	br	819c7c <alt_up_sd_card_fopen+0xc8>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
  819c64:	e0bfea17 	ldw	r2,-88(fp)
  819c68:	10800044 	addi	r2,r2,1
  819c6c:	e0bfea15 	stw	r2,-88(fp)
  819c70:	e0bfea17 	ldw	r2,-88(fp)
  819c74:	10800510 	cmplti	r2,r2,20
  819c78:	103fee1e 	bne	r2,zero,819c34 <alt_up_sd_card_fopen+0x80>
				if (active_files[index].in_use == false) {
					file_record_index = index;
					break;
				}
			}
			if (file_record_index >= 0) {
  819c7c:	e0bfeb0f 	ldh	r2,-84(fp)
  819c80:	1004803a 	cmplt	r2,r2,zero
  819c84:	1000ad1e 	bne	r2,zero,819f3c <alt_up_sd_card_fopen+0x388>
				/* If file record is found, then look for the specified file. If the create flag is set to true
				 * and the file is not found, then it should be created in the current directory.
				 */

				if (find_file_in_directory(home_directory_cluster, name,
  819c88:	e0bfec17 	ldw	r2,-80(fp)
  819c8c:	1009883a 	mov	r4,r2
  819c90:	e0bfeb0f 	ldh	r2,-84(fp)
  819c94:	100491ba 	slli	r2,r2,6
  819c98:	1007883a 	mov	r3,r2
  819c9c:	008020b4 	movhi	r2,130
  819ca0:	10915204 	addi	r2,r2,17736
  819ca4:	188d883a 	add	r6,r3,r2
  819ca8:	e17ffd17 	ldw	r5,-12(fp)
  819cac:	08185d00 	call	8185d0 <find_file_in_directory>
  819cb0:	1005003a 	cmpeq	r2,r2,zero
  819cb4:	10007d1e 	bne	r2,zero,819eac <alt_up_sd_card_fopen+0x2f8>
						&(active_files[file_record_index]))) {
					if (create) {
  819cb8:	e0bffe17 	ldw	r2,-8(fp)
  819cbc:	1005003a 	cmpeq	r2,r2,zero
  819cc0:	1000031e 	bne	r2,zero,819cd0 <alt_up_sd_card_fopen+0x11c>
						/* Do not allow overwriting existing files for now. */
						return -1;
  819cc4:	00bfffc4 	movi	r2,-1
  819cc8:	e0bfff15 	stw	r2,-4(fp)
  819ccc:	00009d06 	br	819f44 <alt_up_sd_card_fopen+0x390>
					}
					active_files[file_record_index].current_cluster_index
  819cd0:	e17feb0f 	ldh	r5,-84(fp)
  819cd4:	e0bfeb0f 	ldh	r2,-84(fp)
  819cd8:	00c020b4 	movhi	r3,130
  819cdc:	18d15204 	addi	r3,r3,17736
  819ce0:	100491ba 	slli	r2,r2,6
  819ce4:	10c5883a 	add	r2,r2,r3
  819ce8:	10800504 	addi	r2,r2,20
  819cec:	1080008b 	ldhu	r2,2(r2)
  819cf0:	113fffcc 	andi	r4,r2,65535
  819cf4:	00c020b4 	movhi	r3,130
  819cf8:	18d15204 	addi	r3,r3,17736
  819cfc:	280491ba 	slli	r2,r5,6
  819d00:	10c5883a 	add	r2,r2,r3
  819d04:	10800704 	addi	r2,r2,28
  819d08:	11000015 	stw	r4,0(r2)
							= active_files[file_record_index].start_cluster_index;
					active_files[file_record_index].current_sector_in_cluster
  819d0c:	e0bfeb0f 	ldh	r2,-84(fp)
  819d10:	00c020b4 	movhi	r3,130
  819d14:	18d15204 	addi	r3,r3,17736
  819d18:	100491ba 	slli	r2,r2,6
  819d1c:	10c5883a 	add	r2,r2,r3
  819d20:	10800804 	addi	r2,r2,32
  819d24:	10000015 	stw	zero,0(r2)
							= 0;
					active_files[file_record_index].current_byte_position = 0;
  819d28:	e0bfeb0f 	ldh	r2,-84(fp)
  819d2c:	00c020b4 	movhi	r3,130
  819d30:	18d15204 	addi	r3,r3,17736
  819d34:	100491ba 	slli	r2,r2,6
  819d38:	10c5883a 	add	r2,r2,r3
  819d3c:	10800904 	addi	r2,r2,36
  819d40:	10000015 	stw	zero,0(r2)
					active_files[file_record_index].in_use = true;
  819d44:	e0bfeb0f 	ldh	r2,-84(fp)
  819d48:	00c020b4 	movhi	r3,130
  819d4c:	18d15204 	addi	r3,r3,17736
  819d50:	100491ba 	slli	r2,r2,6
  819d54:	10c5883a 	add	r2,r2,r3
  819d58:	10c00f04 	addi	r3,r2,60
  819d5c:	00800044 	movi	r2,1
  819d60:	18800015 	stw	r2,0(r3)
					active_files[file_record_index].modified = false;
  819d64:	e0bfeb0f 	ldh	r2,-84(fp)
  819d68:	00c020b4 	movhi	r3,130
  819d6c:	18d15204 	addi	r3,r3,17736
  819d70:	100491ba 	slli	r2,r2,6
  819d74:	10c5883a 	add	r2,r2,r3
  819d78:	10800e04 	addi	r2,r2,56
  819d7c:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
  819d80:	e03fea15 	stw	zero,-88(fp)
  819d84:	00004506 	br	819e9c <alt_up_sd_card_fopen+0x2e8>
						if ((file_record_index != index)
  819d88:	e0ffeb0f 	ldh	r3,-84(fp)
  819d8c:	e0bfea17 	ldw	r2,-88(fp)
  819d90:	18803f26 	beq	r3,r2,819e90 <alt_up_sd_card_fopen+0x2dc>
  819d94:	e0bfea17 	ldw	r2,-88(fp)
  819d98:	00c020b4 	movhi	r3,130
  819d9c:	18d15204 	addi	r3,r3,17736
  819da0:	100491ba 	slli	r2,r2,6
  819da4:	10c5883a 	add	r2,r2,r3
  819da8:	10800f04 	addi	r2,r2,60
  819dac:	10800017 	ldw	r2,0(r2)
  819db0:	10800058 	cmpnei	r2,r2,1
  819db4:	1000361e 	bne	r2,zero,819e90 <alt_up_sd_card_fopen+0x2dc>
								&& (active_files[index].in_use == true)) {
							if ((active_files[file_record_index].file_record_cluster
  819db8:	e0bfeb0f 	ldh	r2,-84(fp)
  819dbc:	00c020b4 	movhi	r3,130
  819dc0:	18d15204 	addi	r3,r3,17736
  819dc4:	100491ba 	slli	r2,r2,6
  819dc8:	10c5883a 	add	r2,r2,r3
  819dcc:	10800a04 	addi	r2,r2,40
  819dd0:	11000017 	ldw	r4,0(r2)
  819dd4:	e0bfea17 	ldw	r2,-88(fp)
  819dd8:	00c020b4 	movhi	r3,130
  819ddc:	18d15204 	addi	r3,r3,17736
  819de0:	100491ba 	slli	r2,r2,6
  819de4:	10c5883a 	add	r2,r2,r3
  819de8:	10800a04 	addi	r2,r2,40
  819dec:	10800017 	ldw	r2,0(r2)
  819df0:	2080271e 	bne	r4,r2,819e90 <alt_up_sd_card_fopen+0x2dc>
  819df4:	e0bfeb0f 	ldh	r2,-84(fp)
  819df8:	00c020b4 	movhi	r3,130
  819dfc:	18d15204 	addi	r3,r3,17736
  819e00:	100491ba 	slli	r2,r2,6
  819e04:	10c5883a 	add	r2,r2,r3
  819e08:	10800b04 	addi	r2,r2,44
  819e0c:	11000017 	ldw	r4,0(r2)
  819e10:	e0bfea17 	ldw	r2,-88(fp)
  819e14:	00c020b4 	movhi	r3,130
  819e18:	18d15204 	addi	r3,r3,17736
  819e1c:	100491ba 	slli	r2,r2,6
  819e20:	10c5883a 	add	r2,r2,r3
  819e24:	10800b04 	addi	r2,r2,44
  819e28:	10800017 	ldw	r2,0(r2)
  819e2c:	2080181e 	bne	r4,r2,819e90 <alt_up_sd_card_fopen+0x2dc>
  819e30:	e0bfeb0f 	ldh	r2,-84(fp)
  819e34:	00c020b4 	movhi	r3,130
  819e38:	18d15204 	addi	r3,r3,17736
  819e3c:	100491ba 	slli	r2,r2,6
  819e40:	10c5883a 	add	r2,r2,r3
  819e44:	10800c04 	addi	r2,r2,48
  819e48:	1100000b 	ldhu	r4,0(r2)
  819e4c:	e0bfea17 	ldw	r2,-88(fp)
  819e50:	00c020b4 	movhi	r3,130
  819e54:	18d15204 	addi	r3,r3,17736
  819e58:	100491ba 	slli	r2,r2,6
  819e5c:	10c5883a 	add	r2,r2,r3
  819e60:	10800c04 	addi	r2,r2,48
  819e64:	1080000b 	ldhu	r2,0(r2)
  819e68:	20ffffcc 	andi	r3,r4,65535
  819e6c:	18e0001c 	xori	r3,r3,32768
  819e70:	18e00004 	addi	r3,r3,-32768
  819e74:	10bfffcc 	andi	r2,r2,65535
  819e78:	10a0001c 	xori	r2,r2,32768
  819e7c:	10a00004 	addi	r2,r2,-32768
  819e80:	1880031e 	bne	r3,r2,819e90 <alt_up_sd_card_fopen+0x2dc>
									&& (active_files[file_record_index].file_record_sector_in_cluster
											== active_files[index].file_record_sector_in_cluster)
									&& (active_files[file_record_index].file_record_offset
											== active_files[index].file_record_offset)) {
								// file already in use.
								file_record_index = -2;
  819e84:	00bfff84 	movi	r2,-2
  819e88:	e0bfeb0d 	sth	r2,-84(fp)
								break;
  819e8c:	00002b06 	br	819f3c <alt_up_sd_card_fopen+0x388>
					active_files[file_record_index].current_byte_position = 0;
					active_files[file_record_index].in_use = true;
					active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
  819e90:	e0bfea17 	ldw	r2,-88(fp)
  819e94:	10800044 	addi	r2,r2,1
  819e98:	e0bfea15 	stw	r2,-88(fp)
  819e9c:	e0bfea17 	ldw	r2,-88(fp)
  819ea0:	10800510 	cmplti	r2,r2,20
  819ea4:	103fb81e 	bne	r2,zero,819d88 <alt_up_sd_card_fopen+0x1d4>
  819ea8:	00002406 	br	819f3c <alt_up_sd_card_fopen+0x388>
								break;
							}
						}
					}

				} else if (create) {
  819eac:	e0bffe17 	ldw	r2,-8(fp)
  819eb0:	1005003a 	cmpeq	r2,r2,zero
  819eb4:	10001f1e 	bne	r2,zero,819f34 <alt_up_sd_card_fopen+0x380>
					/* Create file if needed. */
					if (create_file(name, &(active_files[file_record_index]),
  819eb8:	e0bfeb0f 	ldh	r2,-84(fp)
  819ebc:	100491ba 	slli	r2,r2,6
  819ec0:	1007883a 	mov	r3,r2
  819ec4:	008020b4 	movhi	r2,130
  819ec8:	10915204 	addi	r2,r2,17736
  819ecc:	188b883a 	add	r5,r3,r2
  819ed0:	e1bfed04 	addi	r6,fp,-76
  819ed4:	e13ffd17 	ldw	r4,-12(fp)
  819ed8:	08191080 	call	819108 <create_file>
  819edc:	1005003a 	cmpeq	r2,r2,zero
  819ee0:	1000111e 	bne	r2,zero,819f28 <alt_up_sd_card_fopen+0x374>
							&home_dir)) {
						active_files[file_record_index].in_use = true;
  819ee4:	e0bfeb0f 	ldh	r2,-84(fp)
  819ee8:	00c020b4 	movhi	r3,130
  819eec:	18d15204 	addi	r3,r3,17736
  819ef0:	100491ba 	slli	r2,r2,6
  819ef4:	10c5883a 	add	r2,r2,r3
  819ef8:	10c00f04 	addi	r3,r2,60
  819efc:	00800044 	movi	r2,1
  819f00:	18800015 	stw	r2,0(r3)
						active_files[file_record_index].modified = true;
  819f04:	e0bfeb0f 	ldh	r2,-84(fp)
  819f08:	00c020b4 	movhi	r3,130
  819f0c:	18d15204 	addi	r3,r3,17736
  819f10:	100491ba 	slli	r2,r2,6
  819f14:	10c5883a 	add	r2,r2,r3
  819f18:	10c00e04 	addi	r3,r2,56
  819f1c:	00800044 	movi	r2,1
  819f20:	18800015 	stw	r2,0(r3)
  819f24:	00000506 	br	819f3c <alt_up_sd_card_fopen+0x388>
					} else {
						/* If file creation fails then return an invalid file handle. */
						file_record_index = -1;
  819f28:	00bfffc4 	movi	r2,-1
  819f2c:	e0bfeb0d 	sth	r2,-84(fp)
  819f30:	00000206 	br	819f3c <alt_up_sd_card_fopen+0x388>
					}
				} else {
					/* Otherwise the file could not be opened.*/
					file_record_index = -1;
  819f34:	00bfffc4 	movi	r2,-1
  819f38:	e0bfeb0d 	sth	r2,-84(fp)
				}
			}
		}
	}

	return file_record_index;
  819f3c:	e0bfeb0f 	ldh	r2,-84(fp)
  819f40:	e0bfff15 	stw	r2,-4(fp)
  819f44:	e0bfff17 	ldw	r2,-4(fp)
}
  819f48:	e037883a 	mov	sp,fp
  819f4c:	dfc00117 	ldw	ra,4(sp)
  819f50:	df000017 	ldw	fp,0(sp)
  819f54:	dec00204 	addi	sp,sp,8
  819f58:	f800283a 	ret

00819f5c <alt_up_sd_card_set_attributes>:

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  819f5c:	defffd04 	addi	sp,sp,-12
  819f60:	df000215 	stw	fp,8(sp)
  819f64:	df000204 	addi	fp,sp,8
  819f68:	e13ffe0d 	sth	r4,-8(fp)
  819f6c:	e17fff0d 	sth	r5,-4(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  819f70:	e0bffe0f 	ldh	r2,-8(fp)
  819f74:	1004803a 	cmplt	r2,r2,zero
  819f78:	1000181e 	bne	r2,zero,819fdc <alt_up_sd_card_set_attributes+0x80>
  819f7c:	e0bffe0f 	ldh	r2,-8(fp)
  819f80:	10800508 	cmpgei	r2,r2,20
  819f84:	1000151e 	bne	r2,zero,819fdc <alt_up_sd_card_set_attributes+0x80>
		if (active_files[file_handle].in_use) {
  819f88:	e0bffe0f 	ldh	r2,-8(fp)
  819f8c:	00c020b4 	movhi	r3,130
  819f90:	18d15204 	addi	r3,r3,17736
  819f94:	100491ba 	slli	r2,r2,6
  819f98:	10c5883a 	add	r2,r2,r3
  819f9c:	10800f04 	addi	r2,r2,60
  819fa0:	10800017 	ldw	r2,0(r2)
  819fa4:	1005003a 	cmpeq	r2,r2,zero
  819fa8:	10000c1e 	bne	r2,zero,819fdc <alt_up_sd_card_set_attributes+0x80>
			active_files[file_handle].attributes
  819fac:	e17ffe0f 	ldh	r5,-8(fp)
  819fb0:	e0bfff0b 	ldhu	r2,-4(fp)
  819fb4:	1007883a 	mov	r3,r2
  819fb8:	00bfffc4 	movi	r2,-1
  819fbc:	1884703a 	and	r2,r3,r2
  819fc0:	1009883a 	mov	r4,r2
  819fc4:	00c020b4 	movhi	r3,130
  819fc8:	18d15204 	addi	r3,r3,17736
  819fcc:	280491ba 	slli	r2,r5,6
  819fd0:	10c5883a 	add	r2,r2,r3
  819fd4:	10800204 	addi	r2,r2,8
  819fd8:	110000c5 	stb	r4,3(r2)
					= ((char) (attributes & 0x00ff));
		}
	}
}
  819fdc:	e037883a 	mov	sp,fp
  819fe0:	df000017 	ldw	fp,0(sp)
  819fe4:	dec00104 	addi	sp,sp,4
  819fe8:	f800283a 	ret

00819fec <alt_up_sd_card_get_attributes>:

short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  819fec:	defffd04 	addi	sp,sp,-12
  819ff0:	df000215 	stw	fp,8(sp)
  819ff4:	df000204 	addi	fp,sp,8
  819ff8:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
  819ffc:	00bfffc4 	movi	r2,-1
  81a000:	e0bffe0d 	sth	r2,-8(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  81a004:	e0bfff0f 	ldh	r2,-4(fp)
  81a008:	1004803a 	cmplt	r2,r2,zero
  81a00c:	1000151e 	bne	r2,zero,81a064 <alt_up_sd_card_get_attributes+0x78>
  81a010:	e0bfff0f 	ldh	r2,-4(fp)
  81a014:	10800508 	cmpgei	r2,r2,20
  81a018:	1000121e 	bne	r2,zero,81a064 <alt_up_sd_card_get_attributes+0x78>
		if (active_files[file_handle].in_use) {
  81a01c:	e0bfff0f 	ldh	r2,-4(fp)
  81a020:	00c020b4 	movhi	r3,130
  81a024:	18d15204 	addi	r3,r3,17736
  81a028:	100491ba 	slli	r2,r2,6
  81a02c:	10c5883a 	add	r2,r2,r3
  81a030:	10800f04 	addi	r2,r2,60
  81a034:	10800017 	ldw	r2,0(r2)
  81a038:	1005003a 	cmpeq	r2,r2,zero
  81a03c:	1000091e 	bne	r2,zero,81a064 <alt_up_sd_card_get_attributes+0x78>
			result = ((active_files[file_handle].attributes) & 0x00ff);
  81a040:	e0bfff0f 	ldh	r2,-4(fp)
  81a044:	00c020b4 	movhi	r3,130
  81a048:	18d15204 	addi	r3,r3,17736
  81a04c:	100491ba 	slli	r2,r2,6
  81a050:	10c5883a 	add	r2,r2,r3
  81a054:	10800204 	addi	r2,r2,8
  81a058:	108000c3 	ldbu	r2,3(r2)
  81a05c:	10803fcc 	andi	r2,r2,255
  81a060:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
  81a064:	e0bffe0f 	ldh	r2,-8(fp)
}
  81a068:	e037883a 	mov	sp,fp
  81a06c:	df000017 	ldw	fp,0(sp)
  81a070:	dec00104 	addi	sp,sp,4
  81a074:	f800283a 	ret

0081a078 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
  81a078:	defffa04 	addi	sp,sp,-24
  81a07c:	dfc00515 	stw	ra,20(sp)
  81a080:	df000415 	stw	fp,16(sp)
  81a084:	df000404 	addi	fp,sp,16
  81a088:	e13ffe0d 	sth	r4,-8(fp)
	short int ch = -1;
  81a08c:	00bfffc4 	movi	r2,-1
  81a090:	e0bffd0d 	sth	r2,-12(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  81a094:	e0bffe0f 	ldh	r2,-8(fp)
  81a098:	1004803a 	cmplt	r2,r2,zero
  81a09c:	1000d31e 	bne	r2,zero,81a3ec <alt_up_sd_card_read+0x374>
  81a0a0:	e0bffe0f 	ldh	r2,-8(fp)
  81a0a4:	10800508 	cmpgei	r2,r2,20
  81a0a8:	1000d01e 	bne	r2,zero,81a3ec <alt_up_sd_card_read+0x374>
		if (active_files[file_handle].in_use) {
  81a0ac:	e0bffe0f 	ldh	r2,-8(fp)
  81a0b0:	00c020b4 	movhi	r3,130
  81a0b4:	18d15204 	addi	r3,r3,17736
  81a0b8:	100491ba 	slli	r2,r2,6
  81a0bc:	10c5883a 	add	r2,r2,r3
  81a0c0:	10800f04 	addi	r2,r2,60
  81a0c4:	10800017 	ldw	r2,0(r2)
  81a0c8:	1005003a 	cmpeq	r2,r2,zero
  81a0cc:	1000c71e 	bne	r2,zero,81a3ec <alt_up_sd_card_read+0x374>
			if (active_files[file_handle].current_byte_position
  81a0d0:	e0bffe0f 	ldh	r2,-8(fp)
  81a0d4:	00c020b4 	movhi	r3,130
  81a0d8:	18d15204 	addi	r3,r3,17736
  81a0dc:	100491ba 	slli	r2,r2,6
  81a0e0:	10c5883a 	add	r2,r2,r3
  81a0e4:	10800904 	addi	r2,r2,36
  81a0e8:	11000017 	ldw	r4,0(r2)
  81a0ec:	e0bffe0f 	ldh	r2,-8(fp)
  81a0f0:	00c020b4 	movhi	r3,130
  81a0f4:	18d15204 	addi	r3,r3,17736
  81a0f8:	100491ba 	slli	r2,r2,6
  81a0fc:	10c5883a 	add	r2,r2,r3
  81a100:	10800604 	addi	r2,r2,24
  81a104:	10800017 	ldw	r2,0(r2)
  81a108:	2080b82e 	bgeu	r4,r2,81a3ec <alt_up_sd_card_read+0x374>
					< active_files[file_handle].file_size_in_bytes) {
				int data_sector = boot_sector_data.data_sector_offset
						+ (active_files[file_handle].current_cluster_index - 2)
								* boot_sector_data.sectors_per_cluster
						+ active_files[file_handle].current_sector_in_cluster;
  81a10c:	008020b4 	movhi	r2,130
  81a110:	10913d04 	addi	r2,r2,17652
  81a114:	11001417 	ldw	r4,80(r2)
  81a118:	e0bffe0f 	ldh	r2,-8(fp)
  81a11c:	00c020b4 	movhi	r3,130
  81a120:	18d15204 	addi	r3,r3,17736
  81a124:	100491ba 	slli	r2,r2,6
  81a128:	10c5883a 	add	r2,r2,r3
  81a12c:	10800704 	addi	r2,r2,28
  81a130:	10800017 	ldw	r2,0(r2)
  81a134:	10ffff84 	addi	r3,r2,-2
  81a138:	008020b4 	movhi	r2,130
  81a13c:	10913d04 	addi	r2,r2,17652
  81a140:	10800383 	ldbu	r2,14(r2)
  81a144:	10803fcc 	andi	r2,r2,255
  81a148:	1885383a 	mul	r2,r3,r2
  81a14c:	2089883a 	add	r4,r4,r2
  81a150:	e0bffe0f 	ldh	r2,-8(fp)
  81a154:	00c020b4 	movhi	r3,130
  81a158:	18d15204 	addi	r3,r3,17736
  81a15c:	100491ba 	slli	r2,r2,6
  81a160:	10c5883a 	add	r2,r2,r3
  81a164:	10800804 	addi	r2,r2,32
  81a168:	10800017 	ldw	r2,0(r2)
  81a16c:	2085883a 	add	r2,r4,r2
  81a170:	e0bffc15 	stw	r2,-16(fp)

				if ((active_files[file_handle].current_byte_position > 0)
  81a174:	e0bffe0f 	ldh	r2,-8(fp)
  81a178:	00c020b4 	movhi	r3,130
  81a17c:	18d15204 	addi	r3,r3,17736
  81a180:	100491ba 	slli	r2,r2,6
  81a184:	10c5883a 	add	r2,r2,r3
  81a188:	10800904 	addi	r2,r2,36
  81a18c:	10800017 	ldw	r2,0(r2)
  81a190:	1005003a 	cmpeq	r2,r2,zero
  81a194:	10006a1e 	bne	r2,zero,81a340 <alt_up_sd_card_read+0x2c8>
  81a198:	e0bffe0f 	ldh	r2,-8(fp)
  81a19c:	00c020b4 	movhi	r3,130
  81a1a0:	18d15204 	addi	r3,r3,17736
  81a1a4:	100491ba 	slli	r2,r2,6
  81a1a8:	10c5883a 	add	r2,r2,r3
  81a1ac:	10800904 	addi	r2,r2,36
  81a1b0:	10800017 	ldw	r2,0(r2)
  81a1b4:	10807fcc 	andi	r2,r2,511
  81a1b8:	1004c03a 	cmpne	r2,r2,zero
  81a1bc:	1000601e 	bne	r2,zero,81a340 <alt_up_sd_card_read+0x2c8>
						&& ((active_files[file_handle].current_byte_position
								% 512) == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
  81a1c0:	e0bffe0f 	ldh	r2,-8(fp)
  81a1c4:	00c020b4 	movhi	r3,130
  81a1c8:	18d15204 	addi	r3,r3,17736
  81a1cc:	100491ba 	slli	r2,r2,6
  81a1d0:	10c5883a 	add	r2,r2,r3
  81a1d4:	10800804 	addi	r2,r2,32
  81a1d8:	10c00017 	ldw	r3,0(r2)
  81a1dc:	008020b4 	movhi	r2,130
  81a1e0:	10913d04 	addi	r2,r2,17652
  81a1e4:	10800383 	ldbu	r2,14(r2)
  81a1e8:	10803fcc 	andi	r2,r2,255
  81a1ec:	10bfffc4 	addi	r2,r2,-1
  81a1f0:	1880411e 	bne	r3,r2,81a2f8 <alt_up_sd_card_read+0x280>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
  81a1f4:	e0bffe0f 	ldh	r2,-8(fp)
  81a1f8:	00c020b4 	movhi	r3,130
  81a1fc:	18d15204 	addi	r3,r3,17736
  81a200:	100491ba 	slli	r2,r2,6
  81a204:	10c5883a 	add	r2,r2,r3
  81a208:	10800704 	addi	r2,r2,28
  81a20c:	11000017 	ldw	r4,0(r2)
  81a210:	e17ffd84 	addi	r5,fp,-10
  81a214:	08169dc0 	call	8169dc <get_cluster_flag>
  81a218:	1005003a 	cmpeq	r2,r2,zero
  81a21c:	1000331e 	bne	r2,zero,81a2ec <alt_up_sd_card_read+0x274>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
  81a220:	e0bffd8b 	ldhu	r2,-10(fp)
  81a224:	10bfffcc 	andi	r2,r2,65535
  81a228:	10fffe0c 	andi	r3,r2,65528
  81a22c:	00bffe14 	movui	r2,65528
  81a230:	1880031e 	bne	r3,r2,81a240 <alt_up_sd_card_read+0x1c8>
								/* End of file */
								return -1;
  81a234:	00bfffc4 	movi	r2,-1
  81a238:	e0bfff15 	stw	r2,-4(fp)
  81a23c:	00006d06 	br	81a3f4 <alt_up_sd_card_read+0x37c>
							} else {
								active_files[file_handle].current_cluster_index
  81a240:	e13ffe0f 	ldh	r4,-8(fp)
  81a244:	e0bffd8b 	ldhu	r2,-10(fp)
  81a248:	117fffcc 	andi	r5,r2,65535
  81a24c:	00c020b4 	movhi	r3,130
  81a250:	18d15204 	addi	r3,r3,17736
  81a254:	200491ba 	slli	r2,r4,6
  81a258:	10c5883a 	add	r2,r2,r3
  81a25c:	10800704 	addi	r2,r2,28
  81a260:	11400015 	stw	r5,0(r2)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
  81a264:	e0bffe0f 	ldh	r2,-8(fp)
  81a268:	00c020b4 	movhi	r3,130
  81a26c:	18d15204 	addi	r3,r3,17736
  81a270:	100491ba 	slli	r2,r2,6
  81a274:	10c5883a 	add	r2,r2,r3
  81a278:	10800804 	addi	r2,r2,32
  81a27c:	10000015 	stw	zero,0(r2)
										= 0;
								data_sector
  81a280:	008020b4 	movhi	r2,130
  81a284:	10913d04 	addi	r2,r2,17652
  81a288:	11001417 	ldw	r4,80(r2)
  81a28c:	e0bffe0f 	ldh	r2,-8(fp)
  81a290:	00c020b4 	movhi	r3,130
  81a294:	18d15204 	addi	r3,r3,17736
  81a298:	100491ba 	slli	r2,r2,6
  81a29c:	10c5883a 	add	r2,r2,r3
  81a2a0:	10800704 	addi	r2,r2,28
  81a2a4:	10800017 	ldw	r2,0(r2)
  81a2a8:	10ffff84 	addi	r3,r2,-2
  81a2ac:	008020b4 	movhi	r2,130
  81a2b0:	10913d04 	addi	r2,r2,17652
  81a2b4:	10800383 	ldbu	r2,14(r2)
  81a2b8:	10803fcc 	andi	r2,r2,255
  81a2bc:	1885383a 	mul	r2,r3,r2
  81a2c0:	2089883a 	add	r4,r4,r2
  81a2c4:	e0bffe0f 	ldh	r2,-8(fp)
  81a2c8:	00c020b4 	movhi	r3,130
  81a2cc:	18d15204 	addi	r3,r3,17736
  81a2d0:	100491ba 	slli	r2,r2,6
  81a2d4:	10c5883a 	add	r2,r2,r3
  81a2d8:	10800804 	addi	r2,r2,32
  81a2dc:	10800017 	ldw	r2,0(r2)
  81a2e0:	2085883a 	add	r2,r4,r2
  81a2e4:	e0bffc15 	stw	r2,-16(fp)
  81a2e8:	00001506 	br	81a340 <alt_up_sd_card_read+0x2c8>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return -2;
  81a2ec:	00bfff84 	movi	r2,-2
  81a2f0:	e0bfff15 	stw	r2,-4(fp)
  81a2f4:	00003f06 	br	81a3f4 <alt_up_sd_card_read+0x37c>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
  81a2f8:	e17ffe0f 	ldh	r5,-8(fp)
  81a2fc:	e0bffe0f 	ldh	r2,-8(fp)
  81a300:	00c020b4 	movhi	r3,130
  81a304:	18d15204 	addi	r3,r3,17736
  81a308:	100491ba 	slli	r2,r2,6
  81a30c:	10c5883a 	add	r2,r2,r3
  81a310:	10800804 	addi	r2,r2,32
  81a314:	10800017 	ldw	r2,0(r2)
  81a318:	11000044 	addi	r4,r2,1
  81a31c:	00c020b4 	movhi	r3,130
  81a320:	18d15204 	addi	r3,r3,17736
  81a324:	280491ba 	slli	r2,r5,6
  81a328:	10c5883a 	add	r2,r2,r3
  81a32c:	10800804 	addi	r2,r2,32
  81a330:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
  81a334:	e0bffc17 	ldw	r2,-16(fp)
  81a338:	10800044 	addi	r2,r2,1
  81a33c:	e0bffc15 	stw	r2,-16(fp)
					}
				}
				// Reading te first byte of the file.
				if (current_sector_index != (data_sector
  81a340:	d0e74c17 	ldw	r3,-25296(gp)
  81a344:	e0bffc17 	ldw	r2,-16(fp)
  81a348:	1885883a 	add	r2,r3,r2
  81a34c:	1007883a 	mov	r3,r2
  81a350:	d0a75017 	ldw	r2,-25280(gp)
  81a354:	18800826 	beq	r3,r2,81a378 <alt_up_sd_card_read+0x300>
						+ fat_partition_offset_in_512_byte_sectors)) {
					if (!Read_Sector_Data(data_sector,
  81a358:	d1674c17 	ldw	r5,-25296(gp)
  81a35c:	e13ffc17 	ldw	r4,-16(fp)
  81a360:	08168e00 	call	8168e0 <Read_Sector_Data>
  81a364:	1004c03a 	cmpne	r2,r2,zero
  81a368:	1000031e 	bne	r2,zero,81a378 <alt_up_sd_card_read+0x300>
							fat_partition_offset_in_512_byte_sectors)) {
						return -2;
  81a36c:	00bfff84 	movi	r2,-2
  81a370:	e0bfff15 	stw	r2,-4(fp)
  81a374:	00001f06 	br	81a3f4 <alt_up_sd_card_read+0x37c>
					}
				}

				ch
  81a378:	e0bffe0f 	ldh	r2,-8(fp)
  81a37c:	00c020b4 	movhi	r3,130
  81a380:	18d15204 	addi	r3,r3,17736
  81a384:	100491ba 	slli	r2,r2,6
  81a388:	10c5883a 	add	r2,r2,r3
  81a38c:	10800904 	addi	r2,r2,36
  81a390:	10800017 	ldw	r2,0(r2)
  81a394:	10807fcc 	andi	r2,r2,511
  81a398:	1007883a 	mov	r3,r2
  81a39c:	d0a74b17 	ldw	r2,-25300(gp)
  81a3a0:	1885883a 	add	r2,r3,r2
  81a3a4:	10800023 	ldbuio	r2,0(r2)
  81a3a8:	10803fcc 	andi	r2,r2,255
  81a3ac:	e0bffd0d 	sth	r2,-12(fp)
						= (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
				active_files[file_handle].current_byte_position
  81a3b0:	e17ffe0f 	ldh	r5,-8(fp)
  81a3b4:	e0bffe0f 	ldh	r2,-8(fp)
  81a3b8:	00c020b4 	movhi	r3,130
  81a3bc:	18d15204 	addi	r3,r3,17736
  81a3c0:	100491ba 	slli	r2,r2,6
  81a3c4:	10c5883a 	add	r2,r2,r3
  81a3c8:	10800904 	addi	r2,r2,36
  81a3cc:	10800017 	ldw	r2,0(r2)
  81a3d0:	11000044 	addi	r4,r2,1
  81a3d4:	00c020b4 	movhi	r3,130
  81a3d8:	18d15204 	addi	r3,r3,17736
  81a3dc:	280491ba 	slli	r2,r5,6
  81a3e0:	10c5883a 	add	r2,r2,r3
  81a3e4:	10800904 	addi	r2,r2,36
  81a3e8:	11000015 	stw	r4,0(r2)
						= active_files[file_handle].current_byte_position + 1;
			}
		}
	}

	return ch;
  81a3ec:	e0bffd0f 	ldh	r2,-12(fp)
  81a3f0:	e0bfff15 	stw	r2,-4(fp)
  81a3f4:	e0bfff17 	ldw	r2,-4(fp)
}
  81a3f8:	e037883a 	mov	sp,fp
  81a3fc:	dfc00117 	ldw	ra,4(sp)
  81a400:	df000017 	ldw	fp,0(sp)
  81a404:	dec00204 	addi	sp,sp,8
  81a408:	f800283a 	ret

0081a40c <alt_up_sd_card_write>:

bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
  81a40c:	defff504 	addi	sp,sp,-44
  81a410:	dfc00a15 	stw	ra,40(sp)
  81a414:	df000915 	stw	fp,36(sp)
  81a418:	dc000815 	stw	r16,32(sp)
  81a41c:	df000804 	addi	fp,sp,32
  81a420:	e13ffd0d 	sth	r4,-12(fp)
  81a424:	e17ffe05 	stb	r5,-8(fp)
	bool result = false;
  81a428:	e03ffa15 	stw	zero,-24(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  81a42c:	e0bffd0f 	ldh	r2,-12(fp)
  81a430:	1004803a 	cmplt	r2,r2,zero
  81a434:	1001751e 	bne	r2,zero,81aa0c <alt_up_sd_card_write+0x600>
  81a438:	e0bffd0f 	ldh	r2,-12(fp)
  81a43c:	10800508 	cmpgei	r2,r2,20
  81a440:	1001721e 	bne	r2,zero,81aa0c <alt_up_sd_card_write+0x600>
		if (active_files[file_handle].in_use) {
  81a444:	e0bffd0f 	ldh	r2,-12(fp)
  81a448:	00c020b4 	movhi	r3,130
  81a44c:	18d15204 	addi	r3,r3,17736
  81a450:	100491ba 	slli	r2,r2,6
  81a454:	10c5883a 	add	r2,r2,r3
  81a458:	10800f04 	addi	r2,r2,60
  81a45c:	10800017 	ldw	r2,0(r2)
  81a460:	1005003a 	cmpeq	r2,r2,zero
  81a464:	1001691e 	bne	r2,zero,81aa0c <alt_up_sd_card_write+0x600>
			int data_sector = boot_sector_data.data_sector_offset
					+ (active_files[file_handle].current_cluster_index - 2)
							* boot_sector_data.sectors_per_cluster
					+ active_files[file_handle].current_sector_in_cluster;
  81a468:	008020b4 	movhi	r2,130
  81a46c:	10913d04 	addi	r2,r2,17652
  81a470:	11001417 	ldw	r4,80(r2)
  81a474:	e0bffd0f 	ldh	r2,-12(fp)
  81a478:	00c020b4 	movhi	r3,130
  81a47c:	18d15204 	addi	r3,r3,17736
  81a480:	100491ba 	slli	r2,r2,6
  81a484:	10c5883a 	add	r2,r2,r3
  81a488:	10800704 	addi	r2,r2,28
  81a48c:	10800017 	ldw	r2,0(r2)
  81a490:	10ffff84 	addi	r3,r2,-2
  81a494:	008020b4 	movhi	r2,130
  81a498:	10913d04 	addi	r2,r2,17652
  81a49c:	10800383 	ldbu	r2,14(r2)
  81a4a0:	10803fcc 	andi	r2,r2,255
  81a4a4:	1885383a 	mul	r2,r3,r2
  81a4a8:	2089883a 	add	r4,r4,r2
  81a4ac:	e0bffd0f 	ldh	r2,-12(fp)
  81a4b0:	00c020b4 	movhi	r3,130
  81a4b4:	18d15204 	addi	r3,r3,17736
  81a4b8:	100491ba 	slli	r2,r2,6
  81a4bc:	10c5883a 	add	r2,r2,r3
  81a4c0:	10800804 	addi	r2,r2,32
  81a4c4:	10800017 	ldw	r2,0(r2)
  81a4c8:	2085883a 	add	r2,r4,r2
  81a4cc:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset =
					active_files[file_handle].current_byte_position
							% boot_sector_data.sector_size_in_bytes;
  81a4d0:	e0bffd0f 	ldh	r2,-12(fp)
  81a4d4:	00c020b4 	movhi	r3,130
  81a4d8:	18d15204 	addi	r3,r3,17736
  81a4dc:	100491ba 	slli	r2,r2,6
  81a4e0:	10c5883a 	add	r2,r2,r3
  81a4e4:	10800904 	addi	r2,r2,36
  81a4e8:	11000017 	ldw	r4,0(r2)
  81a4ec:	008020b4 	movhi	r2,130
  81a4f0:	10913d04 	addi	r2,r2,17652
  81a4f4:	1080030b 	ldhu	r2,12(r2)
  81a4f8:	117fffcc 	andi	r5,r2,65535
  81a4fc:	0808e940 	call	808e94 <__umodsi3>
  81a500:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position
  81a504:	e0bffd0f 	ldh	r2,-12(fp)
  81a508:	00c020b4 	movhi	r3,130
  81a50c:	18d15204 	addi	r3,r3,17736
  81a510:	100491ba 	slli	r2,r2,6
  81a514:	10c5883a 	add	r2,r2,r3
  81a518:	10800904 	addi	r2,r2,36
  81a51c:	11000017 	ldw	r4,0(r2)
  81a520:	e0bffd0f 	ldh	r2,-12(fp)
  81a524:	00c020b4 	movhi	r3,130
  81a528:	18d15204 	addi	r3,r3,17736
  81a52c:	100491ba 	slli	r2,r2,6
  81a530:	10c5883a 	add	r2,r2,r3
  81a534:	10800604 	addi	r2,r2,24
  81a538:	10800017 	ldw	r2,0(r2)
  81a53c:	2080682e 	bgeu	r4,r2,81a6e0 <alt_up_sd_card_write+0x2d4>
					< active_files[file_handle].file_size_in_bytes) {
				if ((active_files[file_handle].current_byte_position > 0)
  81a540:	e0bffd0f 	ldh	r2,-12(fp)
  81a544:	00c020b4 	movhi	r3,130
  81a548:	18d15204 	addi	r3,r3,17736
  81a54c:	100491ba 	slli	r2,r2,6
  81a550:	10c5883a 	add	r2,r2,r3
  81a554:	10800904 	addi	r2,r2,36
  81a558:	10800017 	ldw	r2,0(r2)
  81a55c:	1005003a 	cmpeq	r2,r2,zero
  81a560:	1000de1e 	bne	r2,zero,81a8dc <alt_up_sd_card_write+0x4d0>
  81a564:	e0bff80f 	ldh	r2,-32(fp)
  81a568:	1004c03a 	cmpne	r2,r2,zero
  81a56c:	1000db1e 	bne	r2,zero,81a8dc <alt_up_sd_card_write+0x4d0>
						&& (buffer_offset == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
  81a570:	e0bffd0f 	ldh	r2,-12(fp)
  81a574:	00c020b4 	movhi	r3,130
  81a578:	18d15204 	addi	r3,r3,17736
  81a57c:	100491ba 	slli	r2,r2,6
  81a580:	10c5883a 	add	r2,r2,r3
  81a584:	10800804 	addi	r2,r2,32
  81a588:	10c00017 	ldw	r3,0(r2)
  81a58c:	008020b4 	movhi	r2,130
  81a590:	10913d04 	addi	r2,r2,17652
  81a594:	10800383 	ldbu	r2,14(r2)
  81a598:	10803fcc 	andi	r2,r2,255
  81a59c:	10bfffc4 	addi	r2,r2,-1
  81a5a0:	18803c1e 	bne	r3,r2,81a694 <alt_up_sd_card_write+0x288>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
  81a5a4:	e0bffd0f 	ldh	r2,-12(fp)
  81a5a8:	00c020b4 	movhi	r3,130
  81a5ac:	18d15204 	addi	r3,r3,17736
  81a5b0:	100491ba 	slli	r2,r2,6
  81a5b4:	10c5883a 	add	r2,r2,r3
  81a5b8:	10800704 	addi	r2,r2,28
  81a5bc:	11000017 	ldw	r4,0(r2)
  81a5c0:	e17ffb04 	addi	r5,fp,-20
  81a5c4:	08169dc0 	call	8169dc <get_cluster_flag>
  81a5c8:	1005003a 	cmpeq	r2,r2,zero
  81a5cc:	10002f1e 	bne	r2,zero,81a68c <alt_up_sd_card_write+0x280>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if (next_cluster < 0x0000fff8) {
  81a5d0:	e0bffb0b 	ldhu	r2,-20(fp)
  81a5d4:	10ffffcc 	andi	r3,r2,65535
  81a5d8:	00bffdd4 	movui	r2,65527
  81a5dc:	10c0bf36 	bltu	r2,r3,81a8dc <alt_up_sd_card_write+0x4d0>
								active_files[file_handle].current_cluster_index
  81a5e0:	e13ffd0f 	ldh	r4,-12(fp)
  81a5e4:	e0bffb0b 	ldhu	r2,-20(fp)
  81a5e8:	117fffcc 	andi	r5,r2,65535
  81a5ec:	00c020b4 	movhi	r3,130
  81a5f0:	18d15204 	addi	r3,r3,17736
  81a5f4:	200491ba 	slli	r2,r4,6
  81a5f8:	10c5883a 	add	r2,r2,r3
  81a5fc:	10800704 	addi	r2,r2,28
  81a600:	11400015 	stw	r5,0(r2)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
  81a604:	e0bffd0f 	ldh	r2,-12(fp)
  81a608:	00c020b4 	movhi	r3,130
  81a60c:	18d15204 	addi	r3,r3,17736
  81a610:	100491ba 	slli	r2,r2,6
  81a614:	10c5883a 	add	r2,r2,r3
  81a618:	10800804 	addi	r2,r2,32
  81a61c:	10000015 	stw	zero,0(r2)
										= 0;
								data_sector
  81a620:	008020b4 	movhi	r2,130
  81a624:	10913d04 	addi	r2,r2,17652
  81a628:	11001417 	ldw	r4,80(r2)
  81a62c:	e0bffd0f 	ldh	r2,-12(fp)
  81a630:	00c020b4 	movhi	r3,130
  81a634:	18d15204 	addi	r3,r3,17736
  81a638:	100491ba 	slli	r2,r2,6
  81a63c:	10c5883a 	add	r2,r2,r3
  81a640:	10800704 	addi	r2,r2,28
  81a644:	10800017 	ldw	r2,0(r2)
  81a648:	10ffff84 	addi	r3,r2,-2
  81a64c:	008020b4 	movhi	r2,130
  81a650:	10913d04 	addi	r2,r2,17652
  81a654:	10800383 	ldbu	r2,14(r2)
  81a658:	10803fcc 	andi	r2,r2,255
  81a65c:	1885383a 	mul	r2,r3,r2
  81a660:	2089883a 	add	r4,r4,r2
  81a664:	e0bffd0f 	ldh	r2,-12(fp)
  81a668:	00c020b4 	movhi	r3,130
  81a66c:	18d15204 	addi	r3,r3,17736
  81a670:	100491ba 	slli	r2,r2,6
  81a674:	10c5883a 	add	r2,r2,r3
  81a678:	10800804 	addi	r2,r2,32
  81a67c:	10800017 	ldw	r2,0(r2)
  81a680:	2085883a 	add	r2,r4,r2
  81a684:	e0bff915 	stw	r2,-28(fp)
  81a688:	00009406 	br	81a8dc <alt_up_sd_card_write+0x4d0>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return false;
  81a68c:	e03fff15 	stw	zero,-4(fp)
  81a690:	0000e006 	br	81aa14 <alt_up_sd_card_write+0x608>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
  81a694:	e17ffd0f 	ldh	r5,-12(fp)
  81a698:	e0bffd0f 	ldh	r2,-12(fp)
  81a69c:	00c020b4 	movhi	r3,130
  81a6a0:	18d15204 	addi	r3,r3,17736
  81a6a4:	100491ba 	slli	r2,r2,6
  81a6a8:	10c5883a 	add	r2,r2,r3
  81a6ac:	10800804 	addi	r2,r2,32
  81a6b0:	10800017 	ldw	r2,0(r2)
  81a6b4:	11000044 	addi	r4,r2,1
  81a6b8:	00c020b4 	movhi	r3,130
  81a6bc:	18d15204 	addi	r3,r3,17736
  81a6c0:	280491ba 	slli	r2,r5,6
  81a6c4:	10c5883a 	add	r2,r2,r3
  81a6c8:	10800804 	addi	r2,r2,32
  81a6cc:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
  81a6d0:	e0bff917 	ldw	r2,-28(fp)
  81a6d4:	10800044 	addi	r2,r2,1
  81a6d8:	e0bff915 	stw	r2,-28(fp)
  81a6dc:	00007f06 	br	81a8dc <alt_up_sd_card_write+0x4d0>
					}
				}
			} else {
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0)
  81a6e0:	e0bffd0f 	ldh	r2,-12(fp)
  81a6e4:	00c020b4 	movhi	r3,130
  81a6e8:	18d15204 	addi	r3,r3,17736
  81a6ec:	100491ba 	slli	r2,r2,6
  81a6f0:	10c5883a 	add	r2,r2,r3
  81a6f4:	10800904 	addi	r2,r2,36
  81a6f8:	10800017 	ldw	r2,0(r2)
  81a6fc:	1005003a 	cmpeq	r2,r2,zero
  81a700:	1000761e 	bne	r2,zero,81a8dc <alt_up_sd_card_write+0x4d0>
  81a704:	e0bff80f 	ldh	r2,-32(fp)
  81a708:	1004c03a 	cmpne	r2,r2,zero
  81a70c:	1000731e 	bne	r2,zero,81a8dc <alt_up_sd_card_write+0x4d0>
						&& (buffer_offset == 0)) {
					if (active_files[file_handle].current_sector_in_cluster
  81a710:	e0bffd0f 	ldh	r2,-12(fp)
  81a714:	00c020b4 	movhi	r3,130
  81a718:	18d15204 	addi	r3,r3,17736
  81a71c:	100491ba 	slli	r2,r2,6
  81a720:	10c5883a 	add	r2,r2,r3
  81a724:	10800804 	addi	r2,r2,32
  81a728:	10c00017 	ldw	r3,0(r2)
  81a72c:	008020b4 	movhi	r2,130
  81a730:	10913d04 	addi	r2,r2,17652
  81a734:	10800383 	ldbu	r2,14(r2)
  81a738:	10803fcc 	andi	r2,r2,255
  81a73c:	10bfffc4 	addi	r2,r2,-1
  81a740:	1880381e 	bne	r3,r2,81a824 <alt_up_sd_card_write+0x418>
							== boot_sector_data.sectors_per_cluster - 1) {
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number)) {
  81a744:	e13ffc04 	addi	r4,fp,-16
  81a748:	0818a340 	call	818a34 <find_first_empty_cluster>
  81a74c:	1005003a 	cmpeq	r2,r2,zero
  81a750:	1000321e 	bne	r2,zero,81a81c <alt_up_sd_card_write+0x410>
							// mark clusters in both File Allocation Tables.
							mark_cluster(
  81a754:	e0bffd0f 	ldh	r2,-12(fp)
  81a758:	00c020b4 	movhi	r3,130
  81a75c:	18d15204 	addi	r3,r3,17736
  81a760:	100491ba 	slli	r2,r2,6
  81a764:	10c5883a 	add	r2,r2,r3
  81a768:	10800704 	addi	r2,r2,28
  81a76c:	11000017 	ldw	r4,0(r2)
  81a770:	e0bffc17 	ldw	r2,-16(fp)
  81a774:	117fffcc 	andi	r5,r2,65535
  81a778:	2960001c 	xori	r5,r5,32768
  81a77c:	29600004 	addi	r5,r5,-32768
  81a780:	01800044 	movi	r6,1
  81a784:	0816a940 	call	816a94 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
  81a788:	e13ffc17 	ldw	r4,-16(fp)
  81a78c:	017fffc4 	movi	r5,-1
  81a790:	01800044 	movi	r6,1
  81a794:	0816a940 	call	816a94 <mark_cluster>
							mark_cluster(
  81a798:	e0bffd0f 	ldh	r2,-12(fp)
  81a79c:	00c020b4 	movhi	r3,130
  81a7a0:	18d15204 	addi	r3,r3,17736
  81a7a4:	100491ba 	slli	r2,r2,6
  81a7a8:	10c5883a 	add	r2,r2,r3
  81a7ac:	10800704 	addi	r2,r2,28
  81a7b0:	11000017 	ldw	r4,0(r2)
  81a7b4:	e0bffc17 	ldw	r2,-16(fp)
  81a7b8:	117fffcc 	andi	r5,r2,65535
  81a7bc:	2960001c 	xori	r5,r5,32768
  81a7c0:	29600004 	addi	r5,r5,-32768
  81a7c4:	000d883a 	mov	r6,zero
  81a7c8:	0816a940 	call	816a94 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
  81a7cc:	e13ffc17 	ldw	r4,-16(fp)
  81a7d0:	017fffc4 	movi	r5,-1
  81a7d4:	000d883a 	mov	r6,zero
  81a7d8:	0816a940 	call	816a94 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index
  81a7dc:	e0bffd0f 	ldh	r2,-12(fp)
  81a7e0:	e13ffc17 	ldw	r4,-16(fp)
  81a7e4:	00c020b4 	movhi	r3,130
  81a7e8:	18d15204 	addi	r3,r3,17736
  81a7ec:	100491ba 	slli	r2,r2,6
  81a7f0:	10c5883a 	add	r2,r2,r3
  81a7f4:	10800704 	addi	r2,r2,28
  81a7f8:	11000015 	stw	r4,0(r2)
									= cluster_number;
							active_files[file_handle].current_sector_in_cluster
  81a7fc:	e0bffd0f 	ldh	r2,-12(fp)
  81a800:	00c020b4 	movhi	r3,130
  81a804:	18d15204 	addi	r3,r3,17736
  81a808:	100491ba 	slli	r2,r2,6
  81a80c:	10c5883a 	add	r2,r2,r3
  81a810:	10800804 	addi	r2,r2,32
  81a814:	10000015 	stw	zero,0(r2)
  81a818:	00001606 	br	81a874 <alt_up_sd_card_write+0x468>
									= 0;
						} else {
							return false;
  81a81c:	e03fff15 	stw	zero,-4(fp)
  81a820:	00007c06 	br	81aa14 <alt_up_sd_card_write+0x608>
						}
					} else {
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster
  81a824:	e43ffd0f 	ldh	r16,-12(fp)
  81a828:	e0bffd0f 	ldh	r2,-12(fp)
  81a82c:	00c020b4 	movhi	r3,130
  81a830:	18d15204 	addi	r3,r3,17736
  81a834:	100491ba 	slli	r2,r2,6
  81a838:	10c5883a 	add	r2,r2,r3
  81a83c:	10800904 	addi	r2,r2,36
  81a840:	11000017 	ldw	r4,0(r2)
  81a844:	008020b4 	movhi	r2,130
  81a848:	10913d04 	addi	r2,r2,17652
  81a84c:	1080030b 	ldhu	r2,12(r2)
  81a850:	117fffcc 	andi	r5,r2,65535
  81a854:	0808e8c0 	call	808e8c <__udivsi3>
  81a858:	1009883a 	mov	r4,r2
  81a85c:	00c020b4 	movhi	r3,130
  81a860:	18d15204 	addi	r3,r3,17736
  81a864:	800491ba 	slli	r2,r16,6
  81a868:	10c5883a 	add	r2,r2,r3
  81a86c:	10800804 	addi	r2,r2,32
  81a870:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_byte_position
										/ boot_sector_data.sector_size_in_bytes;
					}
					data_sector
  81a874:	008020b4 	movhi	r2,130
  81a878:	10913d04 	addi	r2,r2,17652
  81a87c:	11001417 	ldw	r4,80(r2)
  81a880:	e0bffd0f 	ldh	r2,-12(fp)
  81a884:	00c020b4 	movhi	r3,130
  81a888:	18d15204 	addi	r3,r3,17736
  81a88c:	100491ba 	slli	r2,r2,6
  81a890:	10c5883a 	add	r2,r2,r3
  81a894:	10800704 	addi	r2,r2,28
  81a898:	10800017 	ldw	r2,0(r2)
  81a89c:	10ffff84 	addi	r3,r2,-2
  81a8a0:	008020b4 	movhi	r2,130
  81a8a4:	10913d04 	addi	r2,r2,17652
  81a8a8:	10800383 	ldbu	r2,14(r2)
  81a8ac:	10803fcc 	andi	r2,r2,255
  81a8b0:	1885383a 	mul	r2,r3,r2
  81a8b4:	2089883a 	add	r4,r4,r2
  81a8b8:	e0bffd0f 	ldh	r2,-12(fp)
  81a8bc:	00c020b4 	movhi	r3,130
  81a8c0:	18d15204 	addi	r3,r3,17736
  81a8c4:	100491ba 	slli	r2,r2,6
  81a8c8:	10c5883a 	add	r2,r2,r3
  81a8cc:	10800804 	addi	r2,r2,32
  81a8d0:	10800017 	ldw	r2,0(r2)
  81a8d4:	2085883a 	add	r2,r4,r2
  81a8d8:	e0bff915 	stw	r2,-28(fp)
									+ active_files[file_handle].current_sector_in_cluster;
				}
			}
			// Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
			if (current_sector_index != data_sector
  81a8dc:	d0e74c17 	ldw	r3,-25296(gp)
  81a8e0:	e0bff917 	ldw	r2,-28(fp)
  81a8e4:	1885883a 	add	r2,r3,r2
  81a8e8:	1007883a 	mov	r3,r2
  81a8ec:	d0a75017 	ldw	r2,-25280(gp)
  81a8f0:	18800726 	beq	r3,r2,81a910 <alt_up_sd_card_write+0x504>
					+ fat_partition_offset_in_512_byte_sectors) {
				if (!Read_Sector_Data(data_sector,
  81a8f4:	d1674c17 	ldw	r5,-25296(gp)
  81a8f8:	e13ff917 	ldw	r4,-28(fp)
  81a8fc:	08168e00 	call	8168e0 <Read_Sector_Data>
  81a900:	1004c03a 	cmpne	r2,r2,zero
  81a904:	1000021e 	bne	r2,zero,81a910 <alt_up_sd_card_write+0x504>
						fat_partition_offset_in_512_byte_sectors)) {
					return false;
  81a908:	e03fff15 	stw	zero,-4(fp)
  81a90c:	00004106 	br	81aa14 <alt_up_sd_card_write+0x608>
				}
			}
			// Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
  81a910:	e0bff80f 	ldh	r2,-32(fp)
  81a914:	1007883a 	mov	r3,r2
  81a918:	d0a74b17 	ldw	r2,-25300(gp)
  81a91c:	1885883a 	add	r2,r3,r2
  81a920:	e0fffe07 	ldb	r3,-8(fp)
  81a924:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position
  81a928:	e17ffd0f 	ldh	r5,-12(fp)
  81a92c:	e0bffd0f 	ldh	r2,-12(fp)
  81a930:	00c020b4 	movhi	r3,130
  81a934:	18d15204 	addi	r3,r3,17736
  81a938:	100491ba 	slli	r2,r2,6
  81a93c:	10c5883a 	add	r2,r2,r3
  81a940:	10800904 	addi	r2,r2,36
  81a944:	10800017 	ldw	r2,0(r2)
  81a948:	11000044 	addi	r4,r2,1
  81a94c:	00c020b4 	movhi	r3,130
  81a950:	18d15204 	addi	r3,r3,17736
  81a954:	280491ba 	slli	r2,r5,6
  81a958:	10c5883a 	add	r2,r2,r3
  81a95c:	10800904 	addi	r2,r2,36
  81a960:	11000015 	stw	r4,0(r2)
					= active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position
  81a964:	e0bffd0f 	ldh	r2,-12(fp)
  81a968:	00c020b4 	movhi	r3,130
  81a96c:	18d15204 	addi	r3,r3,17736
  81a970:	100491ba 	slli	r2,r2,6
  81a974:	10c5883a 	add	r2,r2,r3
  81a978:	10800904 	addi	r2,r2,36
  81a97c:	11000017 	ldw	r4,0(r2)
  81a980:	e0bffd0f 	ldh	r2,-12(fp)
  81a984:	00c020b4 	movhi	r3,130
  81a988:	18d15204 	addi	r3,r3,17736
  81a98c:	100491ba 	slli	r2,r2,6
  81a990:	10c5883a 	add	r2,r2,r3
  81a994:	10800604 	addi	r2,r2,24
  81a998:	10800017 	ldw	r2,0(r2)
  81a99c:	20801736 	bltu	r4,r2,81a9fc <alt_up_sd_card_write+0x5f0>
					>= active_files[file_handle].file_size_in_bytes) {
				active_files[file_handle].file_size_in_bytes
  81a9a0:	e17ffd0f 	ldh	r5,-12(fp)
  81a9a4:	e0bffd0f 	ldh	r2,-12(fp)
  81a9a8:	00c020b4 	movhi	r3,130
  81a9ac:	18d15204 	addi	r3,r3,17736
  81a9b0:	100491ba 	slli	r2,r2,6
  81a9b4:	10c5883a 	add	r2,r2,r3
  81a9b8:	10800604 	addi	r2,r2,24
  81a9bc:	10800017 	ldw	r2,0(r2)
  81a9c0:	11000044 	addi	r4,r2,1
  81a9c4:	00c020b4 	movhi	r3,130
  81a9c8:	18d15204 	addi	r3,r3,17736
  81a9cc:	280491ba 	slli	r2,r5,6
  81a9d0:	10c5883a 	add	r2,r2,r3
  81a9d4:	10800604 	addi	r2,r2,24
  81a9d8:	11000015 	stw	r4,0(r2)
						= active_files[file_handle].file_size_in_bytes + 1;
				active_files[file_handle].modified = true;
  81a9dc:	e0bffd0f 	ldh	r2,-12(fp)
  81a9e0:	00c020b4 	movhi	r3,130
  81a9e4:	18d15204 	addi	r3,r3,17736
  81a9e8:	100491ba 	slli	r2,r2,6
  81a9ec:	10c5883a 	add	r2,r2,r3
  81a9f0:	10c00e04 	addi	r3,r2,56
  81a9f4:	00800044 	movi	r2,1
  81a9f8:	18800015 	stw	r2,0(r3)
			}
			// Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
			current_sector_modified = true;
  81a9fc:	00800044 	movi	r2,1
  81aa00:	d0a74f15 	stw	r2,-25284(gp)
			result = true;
  81aa04:	00800044 	movi	r2,1
  81aa08:	e0bffa15 	stw	r2,-24(fp)
		}
	}

	return result;
  81aa0c:	e0bffa17 	ldw	r2,-24(fp)
  81aa10:	e0bfff15 	stw	r2,-4(fp)
  81aa14:	e0bfff17 	ldw	r2,-4(fp)
}
  81aa18:	e037883a 	mov	sp,fp
  81aa1c:	dfc00217 	ldw	ra,8(sp)
  81aa20:	df000117 	ldw	fp,4(sp)
  81aa24:	dc000017 	ldw	r16,0(sp)
  81aa28:	dec00304 	addi	sp,sp,12
  81aa2c:	f800283a 	ret

0081aa30 <alt_up_sd_card_fclose>:

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
  81aa30:	defffb04 	addi	sp,sp,-20
  81aa34:	dfc00415 	stw	ra,16(sp)
  81aa38:	df000315 	stw	fp,12(sp)
  81aa3c:	df000304 	addi	fp,sp,12
  81aa40:	e13fff0d 	sth	r4,-4(fp)
	bool result = false;
  81aa44:	e03ffe15 	stw	zero,-8(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  81aa48:	08195f40 	call	8195f4 <alt_up_sd_card_is_Present>
  81aa4c:	1005003a 	cmpeq	r2,r2,zero
  81aa50:	1000641e 	bne	r2,zero,81abe4 <alt_up_sd_card_fclose+0x1b4>
  81aa54:	d0a74517 	ldw	r2,-25324(gp)
  81aa58:	1005003a 	cmpeq	r2,r2,zero
  81aa5c:	1000611e 	bne	r2,zero,81abe4 <alt_up_sd_card_fclose+0x1b4>
		if (active_files[file_handle].in_use) {
  81aa60:	e0bfff0f 	ldh	r2,-4(fp)
  81aa64:	00c020b4 	movhi	r3,130
  81aa68:	18d15204 	addi	r3,r3,17736
  81aa6c:	100491ba 	slli	r2,r2,6
  81aa70:	10c5883a 	add	r2,r2,r3
  81aa74:	10800f04 	addi	r2,r2,60
  81aa78:	10800017 	ldw	r2,0(r2)
  81aa7c:	1005003a 	cmpeq	r2,r2,zero
  81aa80:	1000581e 	bne	r2,zero,81abe4 <alt_up_sd_card_fclose+0x1b4>
			if (active_files[file_handle].modified) {
  81aa84:	e0bfff0f 	ldh	r2,-4(fp)
  81aa88:	00c020b4 	movhi	r3,130
  81aa8c:	18d15204 	addi	r3,r3,17736
  81aa90:	100491ba 	slli	r2,r2,6
  81aa94:	10c5883a 	add	r2,r2,r3
  81aa98:	10800e04 	addi	r2,r2,56
  81aa9c:	10800017 	ldw	r2,0(r2)
  81aaa0:	1005003a 	cmpeq	r2,r2,zero
  81aaa4:	1000461e 	bne	r2,zero,81abc0 <alt_up_sd_card_fclose+0x190>
				unsigned int record_sector =
						active_files[file_handle].file_record_sector_in_cluster;
  81aaa8:	e0bfff0f 	ldh	r2,-4(fp)
  81aaac:	00c020b4 	movhi	r3,130
  81aab0:	18d15204 	addi	r3,r3,17736
  81aab4:	100491ba 	slli	r2,r2,6
  81aab8:	10c5883a 	add	r2,r2,r3
  81aabc:	10800b04 	addi	r2,r2,44
  81aac0:	10800017 	ldw	r2,0(r2)
  81aac4:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0) {
  81aac8:	e0bfff0f 	ldh	r2,-4(fp)
  81aacc:	00c020b4 	movhi	r3,130
  81aad0:	18d15204 	addi	r3,r3,17736
  81aad4:	100491ba 	slli	r2,r2,6
  81aad8:	10c5883a 	add	r2,r2,r3
  81aadc:	10800a04 	addi	r2,r2,40
  81aae0:	10800017 	ldw	r2,0(r2)
  81aae4:	1004c03a 	cmpne	r2,r2,zero
  81aae8:	1000071e 	bne	r2,zero,81ab08 <alt_up_sd_card_fclose+0xd8>
					record_sector = record_sector
  81aaec:	008020b4 	movhi	r2,130
  81aaf0:	10913d04 	addi	r2,r2,17652
  81aaf4:	10c01317 	ldw	r3,76(r2)
  81aaf8:	e0bffd17 	ldw	r2,-12(fp)
  81aafc:	10c5883a 	add	r2,r2,r3
  81ab00:	e0bffd15 	stw	r2,-12(fp)
  81ab04:	00001406 	br	81ab58 <alt_up_sd_card_fclose+0x128>
							+ boot_sector_data.root_directory_sector_offset;
				} else {
					record_sector = record_sector
  81ab08:	008020b4 	movhi	r2,130
  81ab0c:	10913d04 	addi	r2,r2,17652
  81ab10:	10c01417 	ldw	r3,80(r2)
  81ab14:	e0bffd17 	ldw	r2,-12(fp)
  81ab18:	1889883a 	add	r4,r3,r2
  81ab1c:	e0bfff0f 	ldh	r2,-4(fp)
  81ab20:	00c020b4 	movhi	r3,130
  81ab24:	18d15204 	addi	r3,r3,17736
  81ab28:	100491ba 	slli	r2,r2,6
  81ab2c:	10c5883a 	add	r2,r2,r3
  81ab30:	10800a04 	addi	r2,r2,40
  81ab34:	10800017 	ldw	r2,0(r2)
  81ab38:	10ffff84 	addi	r3,r2,-2
  81ab3c:	008020b4 	movhi	r2,130
  81ab40:	10913d04 	addi	r2,r2,17652
  81ab44:	10800383 	ldbu	r2,14(r2)
  81ab48:	10803fcc 	andi	r2,r2,255
  81ab4c:	1885383a 	mul	r2,r3,r2
  81ab50:	2085883a 	add	r2,r4,r2
  81ab54:	e0bffd15 	stw	r2,-12(fp)
							+ boot_sector_data.data_sector_offset
							+ (active_files[file_handle].file_record_cluster
									- 2) * boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector,
  81ab58:	e13ffd17 	ldw	r4,-12(fp)
  81ab5c:	d1674c17 	ldw	r5,-25296(gp)
  81ab60:	08168e00 	call	8168e0 <Read_Sector_Data>
  81ab64:	1005003a 	cmpeq	r2,r2,zero
  81ab68:	1000151e 	bne	r2,zero,81abc0 <alt_up_sd_card_fclose+0x190>
						fat_partition_offset_in_512_byte_sectors)) {
					if (Write_File_Record_At_Offset(
  81ab6c:	e0bfff0f 	ldh	r2,-4(fp)
  81ab70:	00c020b4 	movhi	r3,130
  81ab74:	18d15204 	addi	r3,r3,17736
  81ab78:	100491ba 	slli	r2,r2,6
  81ab7c:	10c5883a 	add	r2,r2,r3
  81ab80:	10800c04 	addi	r2,r2,48
  81ab84:	1080000b 	ldhu	r2,0(r2)
  81ab88:	113fffcc 	andi	r4,r2,65535
  81ab8c:	2120001c 	xori	r4,r4,32768
  81ab90:	21200004 	addi	r4,r4,-32768
  81ab94:	e0bfff0f 	ldh	r2,-4(fp)
  81ab98:	100491ba 	slli	r2,r2,6
  81ab9c:	1007883a 	mov	r3,r2
  81aba0:	008020b4 	movhi	r2,130
  81aba4:	10915204 	addi	r2,r2,17736
  81aba8:	188b883a 	add	r5,r3,r2
  81abac:	0816fac0 	call	816fac <Write_File_Record_At_Offset>
  81abb0:	1005003a 	cmpeq	r2,r2,zero
  81abb4:	1000021e 	bne	r2,zero,81abc0 <alt_up_sd_card_fclose+0x190>
							active_files[file_handle].file_record_offset,
							&(active_files[file_handle]))) {
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
  81abb8:	08168900 	call	816890 <Save_Modified_Sector>
  81abbc:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
  81abc0:	e0bfff0f 	ldh	r2,-4(fp)
  81abc4:	00c020b4 	movhi	r3,130
  81abc8:	18d15204 	addi	r3,r3,17736
  81abcc:	100491ba 	slli	r2,r2,6
  81abd0:	10c5883a 	add	r2,r2,r3
  81abd4:	10800f04 	addi	r2,r2,60
  81abd8:	10000015 	stw	zero,0(r2)
			result = true;
  81abdc:	00800044 	movi	r2,1
  81abe0:	e0bffe15 	stw	r2,-8(fp)
		}
	}

	return result;
  81abe4:	e0bffe17 	ldw	r2,-8(fp)
}
  81abe8:	e037883a 	mov	sp,fp
  81abec:	dfc00117 	ldw	ra,4(sp)
  81abf0:	df000017 	ldw	fp,0(sp)
  81abf4:	dec00204 	addi	sp,sp,8
  81abf8:	f800283a 	ret

0081abfc <Read_Sector_Data_CRC>:

bool Read_Sector_Data_CRC(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  81abfc:	defff904 	addi	sp,sp,-28
  81ac00:	dfc00615 	stw	ra,24(sp)
  81ac04:	df000515 	stw	fp,20(sp)
  81ac08:	df000504 	addi	fp,sp,20
  81ac0c:	e13ffd15 	stw	r4,-12(fp)
  81ac10:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
  81ac14:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
  81ac18:	08195f40 	call	8195f4 <alt_up_sd_card_is_Present>
  81ac1c:	1005003a 	cmpeq	r2,r2,zero
  81ac20:	10002d1e 	bne	r2,zero,81acd8 <Read_Sector_Data_CRC+0xdc>
		short int reg_state = 0xff;
  81ac24:	00803fc4 	movi	r2,255
  81ac28:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
  81ac2c:	d0a74f17 	ldw	r2,-25284(gp)
  81ac30:	1005003a 	cmpeq	r2,r2,zero
  81ac34:	1000081e 	bne	r2,zero,81ac58 <Read_Sector_Data_CRC+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
  81ac38:	d0a75017 	ldw	r2,-25280(gp)
  81ac3c:	1009883a 	mov	r4,r2
  81ac40:	000b883a 	mov	r5,zero
  81ac44:	08167c80 	call	8167c8 <Write_Sector_Data>
  81ac48:	1004c03a 	cmpne	r2,r2,zero
  81ac4c:	1000021e 	bne	r2,zero,81ac58 <Read_Sector_Data_CRC+0x5c>
				return false;
  81ac50:	e03fff15 	stw	zero,-4(fp)
  81ac54:	00002206 	br	81ace0 <Read_Sector_Data_CRC+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  81ac58:	d0a74a17 	ldw	r2,-25304(gp)
  81ac5c:	1009883a 	mov	r4,r2
  81ac60:	e0fffd17 	ldw	r3,-12(fp)
  81ac64:	e0bffe17 	ldw	r2,-8(fp)
  81ac68:	1885883a 	add	r2,r3,r2
  81ac6c:	1006927a 	slli	r3,r2,9
  81ac70:	2005883a 	mov	r2,r4
  81ac74:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  81ac78:	d0a74917 	ldw	r2,-25308(gp)
  81ac7c:	1007883a 	mov	r3,r2
  81ac80:	00800444 	movi	r2,17
  81ac84:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  81ac88:	d0a74617 	ldw	r2,-25320(gp)
  81ac8c:	1080002b 	ldhuio	r2,0(r2)
  81ac90:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
  81ac94:	e0bffb0b 	ldhu	r2,-20(fp)
  81ac98:	10bfffcc 	andi	r2,r2,65535
  81ac9c:	1080010c 	andi	r2,r2,4
  81aca0:	1004c03a 	cmpne	r2,r2,zero
  81aca4:	103ff81e 	bne	r2,zero,81ac88 <Read_Sector_Data_CRC+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x30) == 0) {
  81aca8:	e0bffb0b 	ldhu	r2,-20(fp)
  81acac:	10bfffcc 	andi	r2,r2,65535
  81acb0:	10800c0c 	andi	r2,r2,48
  81acb4:	1004c03a 	cmpne	r2,r2,zero
  81acb8:	1000071e 	bne	r2,zero,81acd8 <Read_Sector_Data_CRC+0xdc>
			result = true;
  81acbc:	00800044 	movi	r2,1
  81acc0:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
  81acc4:	d0274f15 	stw	zero,-25284(gp)
			current_sector_index = sector_index + partition_offset;
  81acc8:	e0fffd17 	ldw	r3,-12(fp)
  81accc:	e0bffe17 	ldw	r2,-8(fp)
  81acd0:	1885883a 	add	r2,r3,r2
  81acd4:	d0a75015 	stw	r2,-25280(gp)
		}
	}
	return result;
  81acd8:	e0bffc17 	ldw	r2,-16(fp)
  81acdc:	e0bfff15 	stw	r2,-4(fp)
  81ace0:	e0bfff17 	ldw	r2,-4(fp)
}
  81ace4:	e037883a 	mov	sp,fp
  81ace8:	dfc00117 	ldw	ra,4(sp)
  81acec:	df000017 	ldw	fp,0(sp)
  81acf0:	dec00204 	addi	sp,sp,8
  81acf4:	f800283a 	ret

0081acf8 <Read_Sector_Data_Attempt_CRC>:

bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
  81acf8:	defff804 	addi	sp,sp,-32
  81acfc:	dfc00715 	stw	ra,28(sp)
  81ad00:	df000615 	stw	fp,24(sp)
  81ad04:	df000604 	addi	fp,sp,24
  81ad08:	e13ffd15 	stw	r4,-12(fp)
  81ad0c:	e17ffe15 	stw	r5,-8(fp)
	int i;
	bool correct;
	const int attempts = 100;
  81ad10:	00801904 	movi	r2,100
  81ad14:	e0bffa15 	stw	r2,-24(fp)

	for (i = 0; i < attempts; i++) {
  81ad18:	e03ffc15 	stw	zero,-16(fp)
  81ad1c:	00000d06 	br	81ad54 <Read_Sector_Data_Attempt_CRC+0x5c>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
  81ad20:	e13ffd17 	ldw	r4,-12(fp)
  81ad24:	e17ffe17 	ldw	r5,-8(fp)
  81ad28:	081abfc0 	call	81abfc <Read_Sector_Data_CRC>
  81ad2c:	e0bffb15 	stw	r2,-20(fp)
		if (correct) {
  81ad30:	e0bffb17 	ldw	r2,-20(fp)
  81ad34:	1005003a 	cmpeq	r2,r2,zero
  81ad38:	1000031e 	bne	r2,zero,81ad48 <Read_Sector_Data_Attempt_CRC+0x50>
			return true;
  81ad3c:	00800044 	movi	r2,1
  81ad40:	e0bfff15 	stw	r2,-4(fp)
  81ad44:	00000a06 	br	81ad70 <Read_Sector_Data_Attempt_CRC+0x78>
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
  81ad48:	e0bffc17 	ldw	r2,-16(fp)
  81ad4c:	10800044 	addi	r2,r2,1
  81ad50:	e0bffc15 	stw	r2,-16(fp)
  81ad54:	e0fffc17 	ldw	r3,-16(fp)
  81ad58:	e0bffa17 	ldw	r2,-24(fp)
  81ad5c:	18bff016 	blt	r3,r2,81ad20 <Read_Sector_Data_Attempt_CRC+0x28>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
  81ad60:	e13ffd17 	ldw	r4,-12(fp)
  81ad64:	e17ffe17 	ldw	r5,-8(fp)
  81ad68:	08168e00 	call	8168e0 <Read_Sector_Data>
  81ad6c:	e0bfff15 	stw	r2,-4(fp)
  81ad70:	e0bfff17 	ldw	r2,-4(fp)
}
  81ad74:	e037883a 	mov	sp,fp
  81ad78:	dfc00117 	ldw	ra,4(sp)
  81ad7c:	df000017 	ldw	fp,0(sp)
  81ad80:	dec00204 	addi	sp,sp,8
  81ad84:	f800283a 	ret

0081ad88 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  81ad88:	defff404 	addi	sp,sp,-48
  81ad8c:	df000b15 	stw	fp,44(sp)
  81ad90:	df000b04 	addi	fp,sp,44
  81ad94:	e13ffb15 	stw	r4,-20(fp)
  81ad98:	e17ffc15 	stw	r5,-16(fp)
  81ad9c:	e1bffd15 	stw	r6,-12(fp)
  81ada0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  81ada4:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81ada8:	008020b4 	movhi	r2,130
  81adac:	1080fb04 	addi	r2,r2,1004
  81adb0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  81adb4:	1005003a 	cmpeq	r2,r2,zero
  81adb8:	1000411e 	bne	r2,zero,81aec0 <alt_alarm_start+0x138>
  {
    if (alarm)
  81adbc:	e0bffb17 	ldw	r2,-20(fp)
  81adc0:	1005003a 	cmpeq	r2,r2,zero
  81adc4:	10003b1e 	bne	r2,zero,81aeb4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  81adc8:	e0fffb17 	ldw	r3,-20(fp)
  81adcc:	e0bffd17 	ldw	r2,-12(fp)
  81add0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  81add4:	e0fffb17 	ldw	r3,-20(fp)
  81add8:	e0bffe17 	ldw	r2,-8(fp)
  81addc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ade0:	0005303a 	rdctl	r2,status
  81ade4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ade8:	e0fff817 	ldw	r3,-32(fp)
  81adec:	00bfff84 	movi	r2,-2
  81adf0:	1884703a 	and	r2,r3,r2
  81adf4:	1001703a 	wrctl	status,r2
  
  return context;
  81adf8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  81adfc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  81ae00:	008020b4 	movhi	r2,130
  81ae04:	1080fc04 	addi	r2,r2,1008
  81ae08:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  81ae0c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  81ae10:	e0fffc17 	ldw	r3,-16(fp)
  81ae14:	e0bff917 	ldw	r2,-28(fp)
  81ae18:	1885883a 	add	r2,r3,r2
  81ae1c:	10c00044 	addi	r3,r2,1
  81ae20:	e0bffb17 	ldw	r2,-20(fp)
  81ae24:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  81ae28:	e0bffb17 	ldw	r2,-20(fp)
  81ae2c:	10c00217 	ldw	r3,8(r2)
  81ae30:	e0bff917 	ldw	r2,-28(fp)
  81ae34:	1880042e 	bgeu	r3,r2,81ae48 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  81ae38:	e0fffb17 	ldw	r3,-20(fp)
  81ae3c:	00800044 	movi	r2,1
  81ae40:	18800405 	stb	r2,16(r3)
  81ae44:	00000206 	br	81ae50 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  81ae48:	e0bffb17 	ldw	r2,-20(fp)
  81ae4c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  81ae50:	e0fffb17 	ldw	r3,-20(fp)
  81ae54:	008020b4 	movhi	r2,130
  81ae58:	10b9cf04 	addi	r2,r2,-6340
  81ae5c:	e0bff615 	stw	r2,-40(fp)
  81ae60:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81ae64:	e0fff717 	ldw	r3,-36(fp)
  81ae68:	e0bff617 	ldw	r2,-40(fp)
  81ae6c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81ae70:	e0bff617 	ldw	r2,-40(fp)
  81ae74:	10c00017 	ldw	r3,0(r2)
  81ae78:	e0bff717 	ldw	r2,-36(fp)
  81ae7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81ae80:	e0bff617 	ldw	r2,-40(fp)
  81ae84:	10c00017 	ldw	r3,0(r2)
  81ae88:	e0bff717 	ldw	r2,-36(fp)
  81ae8c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81ae90:	e0fff617 	ldw	r3,-40(fp)
  81ae94:	e0bff717 	ldw	r2,-36(fp)
  81ae98:	18800015 	stw	r2,0(r3)
  81ae9c:	e0bffa17 	ldw	r2,-24(fp)
  81aea0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81aea4:	e0bff517 	ldw	r2,-44(fp)
  81aea8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  81aeac:	e03fff15 	stw	zero,-4(fp)
  81aeb0:	00000506 	br	81aec8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  81aeb4:	00bffa84 	movi	r2,-22
  81aeb8:	e0bfff15 	stw	r2,-4(fp)
  81aebc:	00000206 	br	81aec8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  81aec0:	00bfde84 	movi	r2,-134
  81aec4:	e0bfff15 	stw	r2,-4(fp)
  81aec8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  81aecc:	e037883a 	mov	sp,fp
  81aed0:	df000017 	ldw	fp,0(sp)
  81aed4:	dec00104 	addi	sp,sp,4
  81aed8:	f800283a 	ret

0081aedc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  81aedc:	defffa04 	addi	sp,sp,-24
  81aee0:	dfc00515 	stw	ra,20(sp)
  81aee4:	df000415 	stw	fp,16(sp)
  81aee8:	df000404 	addi	fp,sp,16
  81aeec:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  81aef0:	008000c4 	movi	r2,3
  81aef4:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  81aef8:	e0fffc17 	ldw	r3,-16(fp)
  81aefc:	008003f4 	movhi	r2,15
  81af00:	10909004 	addi	r2,r2,16960
  81af04:	188b383a 	mul	r5,r3,r2
  81af08:	0100bef4 	movhi	r4,763
  81af0c:	213c2004 	addi	r4,r4,-3968
  81af10:	0808e8c0 	call	808e8c <__udivsi3>
  81af14:	100b883a 	mov	r5,r2
  81af18:	01200034 	movhi	r4,32768
  81af1c:	213fffc4 	addi	r4,r4,-1
  81af20:	0808e8c0 	call	808e8c <__udivsi3>
  81af24:	100b883a 	mov	r5,r2
  81af28:	e13fff17 	ldw	r4,-4(fp)
  81af2c:	0808e8c0 	call	808e8c <__udivsi3>
  81af30:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  81af34:	e0bffd17 	ldw	r2,-12(fp)
  81af38:	1005003a 	cmpeq	r2,r2,zero
  81af3c:	1000281e 	bne	r2,zero,81afe0 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  81af40:	e03ffe15 	stw	zero,-8(fp)
  81af44:	00001606 	br	81afa0 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  81af48:	00a00034 	movhi	r2,32768
  81af4c:	10bfffc4 	addi	r2,r2,-1
  81af50:	10bfffc4 	addi	r2,r2,-1
  81af54:	103ffe1e 	bne	r2,zero,81af50 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  81af58:	e0fffc17 	ldw	r3,-16(fp)
  81af5c:	008003f4 	movhi	r2,15
  81af60:	10909004 	addi	r2,r2,16960
  81af64:	188b383a 	mul	r5,r3,r2
  81af68:	0100bef4 	movhi	r4,763
  81af6c:	213c2004 	addi	r4,r4,-3968
  81af70:	0808e8c0 	call	808e8c <__udivsi3>
  81af74:	100b883a 	mov	r5,r2
  81af78:	01200034 	movhi	r4,32768
  81af7c:	213fffc4 	addi	r4,r4,-1
  81af80:	0808e8c0 	call	808e8c <__udivsi3>
  81af84:	1007883a 	mov	r3,r2
  81af88:	e0bfff17 	ldw	r2,-4(fp)
  81af8c:	10c5c83a 	sub	r2,r2,r3
  81af90:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  81af94:	e0bffe17 	ldw	r2,-8(fp)
  81af98:	10800044 	addi	r2,r2,1
  81af9c:	e0bffe15 	stw	r2,-8(fp)
  81afa0:	e0fffe17 	ldw	r3,-8(fp)
  81afa4:	e0bffd17 	ldw	r2,-12(fp)
  81afa8:	18bfe716 	blt	r3,r2,81af48 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81afac:	e0fffc17 	ldw	r3,-16(fp)
  81afb0:	008003f4 	movhi	r2,15
  81afb4:	10909004 	addi	r2,r2,16960
  81afb8:	188b383a 	mul	r5,r3,r2
  81afbc:	0100bef4 	movhi	r4,763
  81afc0:	213c2004 	addi	r4,r4,-3968
  81afc4:	0808e8c0 	call	808e8c <__udivsi3>
  81afc8:	1007883a 	mov	r3,r2
  81afcc:	e0bfff17 	ldw	r2,-4(fp)
  81afd0:	1885383a 	mul	r2,r3,r2
  81afd4:	10bfffc4 	addi	r2,r2,-1
  81afd8:	103ffe1e 	bne	r2,zero,81afd4 <alt_busy_sleep+0xf8>
  81afdc:	00000c06 	br	81b010 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81afe0:	e0fffc17 	ldw	r3,-16(fp)
  81afe4:	008003f4 	movhi	r2,15
  81afe8:	10909004 	addi	r2,r2,16960
  81afec:	188b383a 	mul	r5,r3,r2
  81aff0:	0100bef4 	movhi	r4,763
  81aff4:	213c2004 	addi	r4,r4,-3968
  81aff8:	0808e8c0 	call	808e8c <__udivsi3>
  81affc:	1007883a 	mov	r3,r2
  81b000:	e0bfff17 	ldw	r2,-4(fp)
  81b004:	1885383a 	mul	r2,r3,r2
  81b008:	10bfffc4 	addi	r2,r2,-1
  81b00c:	00bffe16 	blt	zero,r2,81b008 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  81b010:	0005883a 	mov	r2,zero
}
  81b014:	e037883a 	mov	sp,fp
  81b018:	dfc00117 	ldw	ra,4(sp)
  81b01c:	df000017 	ldw	fp,0(sp)
  81b020:	dec00204 	addi	sp,sp,8
  81b024:	f800283a 	ret

0081b028 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  81b028:	defffe04 	addi	sp,sp,-8
  81b02c:	df000115 	stw	fp,4(sp)
  81b030:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81b034:	e03fff15 	stw	zero,-4(fp)
  81b038:	00000506 	br	81b050 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  81b03c:	e0bfff17 	ldw	r2,-4(fp)
  81b040:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81b044:	e0bfff17 	ldw	r2,-4(fp)
  81b048:	10800804 	addi	r2,r2,32
  81b04c:	e0bfff15 	stw	r2,-4(fp)
  81b050:	e0bfff17 	ldw	r2,-4(fp)
  81b054:	10900030 	cmpltui	r2,r2,16384
  81b058:	103ff81e 	bne	r2,zero,81b03c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  81b05c:	e037883a 	mov	sp,fp
  81b060:	df000017 	ldw	fp,0(sp)
  81b064:	dec00104 	addi	sp,sp,4
  81b068:	f800283a 	ret

0081b06c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  81b06c:	defff904 	addi	sp,sp,-28
  81b070:	dfc00615 	stw	ra,24(sp)
  81b074:	df000515 	stw	fp,20(sp)
  81b078:	df000504 	addi	fp,sp,20
  81b07c:	e13ffd15 	stw	r4,-12(fp)
  81b080:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  81b084:	e0bffd17 	ldw	r2,-12(fp)
  81b088:	1005003a 	cmpeq	r2,r2,zero
  81b08c:	1000041e 	bne	r2,zero,81b0a0 <alt_dev_llist_insert+0x34>
  81b090:	e0bffd17 	ldw	r2,-12(fp)
  81b094:	10800217 	ldw	r2,8(r2)
  81b098:	1004c03a 	cmpne	r2,r2,zero
  81b09c:	1000071e 	bne	r2,zero,81b0bc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  81b0a0:	081b1200 	call	81b120 <alt_get_errno>
  81b0a4:	1007883a 	mov	r3,r2
  81b0a8:	00800584 	movi	r2,22
  81b0ac:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  81b0b0:	00bffa84 	movi	r2,-22
  81b0b4:	e0bfff15 	stw	r2,-4(fp)
  81b0b8:	00001306 	br	81b108 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  81b0bc:	e0fffd17 	ldw	r3,-12(fp)
  81b0c0:	e0bffe17 	ldw	r2,-8(fp)
  81b0c4:	e0bffb15 	stw	r2,-20(fp)
  81b0c8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81b0cc:	e0fffc17 	ldw	r3,-16(fp)
  81b0d0:	e0bffb17 	ldw	r2,-20(fp)
  81b0d4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81b0d8:	e0bffb17 	ldw	r2,-20(fp)
  81b0dc:	10c00017 	ldw	r3,0(r2)
  81b0e0:	e0bffc17 	ldw	r2,-16(fp)
  81b0e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81b0e8:	e0bffb17 	ldw	r2,-20(fp)
  81b0ec:	10c00017 	ldw	r3,0(r2)
  81b0f0:	e0bffc17 	ldw	r2,-16(fp)
  81b0f4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81b0f8:	e0fffb17 	ldw	r3,-20(fp)
  81b0fc:	e0bffc17 	ldw	r2,-16(fp)
  81b100:	18800015 	stw	r2,0(r3)

  return 0;  
  81b104:	e03fff15 	stw	zero,-4(fp)
  81b108:	e0bfff17 	ldw	r2,-4(fp)
}
  81b10c:	e037883a 	mov	sp,fp
  81b110:	dfc00117 	ldw	ra,4(sp)
  81b114:	df000017 	ldw	fp,0(sp)
  81b118:	dec00204 	addi	sp,sp,8
  81b11c:	f800283a 	ret

0081b120 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81b120:	defffd04 	addi	sp,sp,-12
  81b124:	dfc00215 	stw	ra,8(sp)
  81b128:	df000115 	stw	fp,4(sp)
  81b12c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81b130:	008020b4 	movhi	r2,130
  81b134:	10b9cc04 	addi	r2,r2,-6352
  81b138:	10800017 	ldw	r2,0(r2)
  81b13c:	1005003a 	cmpeq	r2,r2,zero
  81b140:	1000061e 	bne	r2,zero,81b15c <alt_get_errno+0x3c>
  81b144:	008020b4 	movhi	r2,130
  81b148:	10b9cc04 	addi	r2,r2,-6352
  81b14c:	10800017 	ldw	r2,0(r2)
  81b150:	103ee83a 	callr	r2
  81b154:	e0bfff15 	stw	r2,-4(fp)
  81b158:	00000306 	br	81b168 <alt_get_errno+0x48>
  81b15c:	008020b4 	movhi	r2,130
  81b160:	1080ef04 	addi	r2,r2,956
  81b164:	e0bfff15 	stw	r2,-4(fp)
  81b168:	e0bfff17 	ldw	r2,-4(fp)
}
  81b16c:	e037883a 	mov	sp,fp
  81b170:	dfc00117 	ldw	ra,4(sp)
  81b174:	df000017 	ldw	fp,0(sp)
  81b178:	dec00204 	addi	sp,sp,8
  81b17c:	f800283a 	ret

0081b180 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  81b180:	defffd04 	addi	sp,sp,-12
  81b184:	dfc00215 	stw	ra,8(sp)
  81b188:	df000115 	stw	fp,4(sp)
  81b18c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81b190:	00bfff04 	movi	r2,-4
  81b194:	00c020b4 	movhi	r3,130
  81b198:	18ef8304 	addi	r3,r3,-16884
  81b19c:	1885883a 	add	r2,r3,r2
  81b1a0:	e0bfff15 	stw	r2,-4(fp)
  81b1a4:	00000606 	br	81b1c0 <_do_ctors+0x40>
        (*ctor) (); 
  81b1a8:	e0bfff17 	ldw	r2,-4(fp)
  81b1ac:	10800017 	ldw	r2,0(r2)
  81b1b0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81b1b4:	e0bfff17 	ldw	r2,-4(fp)
  81b1b8:	10bfff04 	addi	r2,r2,-4
  81b1bc:	e0bfff15 	stw	r2,-4(fp)
  81b1c0:	e0ffff17 	ldw	r3,-4(fp)
  81b1c4:	008020b4 	movhi	r2,130
  81b1c8:	10af8204 	addi	r2,r2,-16888
  81b1cc:	18bff62e 	bgeu	r3,r2,81b1a8 <_do_ctors+0x28>
        (*ctor) (); 
}
  81b1d0:	e037883a 	mov	sp,fp
  81b1d4:	dfc00117 	ldw	ra,4(sp)
  81b1d8:	df000017 	ldw	fp,0(sp)
  81b1dc:	dec00204 	addi	sp,sp,8
  81b1e0:	f800283a 	ret

0081b1e4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  81b1e4:	defffd04 	addi	sp,sp,-12
  81b1e8:	dfc00215 	stw	ra,8(sp)
  81b1ec:	df000115 	stw	fp,4(sp)
  81b1f0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81b1f4:	00bfff04 	movi	r2,-4
  81b1f8:	00c020b4 	movhi	r3,130
  81b1fc:	18ef8304 	addi	r3,r3,-16884
  81b200:	1885883a 	add	r2,r3,r2
  81b204:	e0bfff15 	stw	r2,-4(fp)
  81b208:	00000606 	br	81b224 <_do_dtors+0x40>
        (*dtor) (); 
  81b20c:	e0bfff17 	ldw	r2,-4(fp)
  81b210:	10800017 	ldw	r2,0(r2)
  81b214:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81b218:	e0bfff17 	ldw	r2,-4(fp)
  81b21c:	10bfff04 	addi	r2,r2,-4
  81b220:	e0bfff15 	stw	r2,-4(fp)
  81b224:	e0ffff17 	ldw	r3,-4(fp)
  81b228:	008020b4 	movhi	r2,130
  81b22c:	10af8304 	addi	r2,r2,-16884
  81b230:	18bff62e 	bgeu	r3,r2,81b20c <_do_dtors+0x28>
        (*dtor) (); 
}
  81b234:	e037883a 	mov	sp,fp
  81b238:	dfc00117 	ldw	ra,4(sp)
  81b23c:	df000017 	ldw	fp,0(sp)
  81b240:	dec00204 	addi	sp,sp,8
  81b244:	f800283a 	ret

0081b248 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81b248:	defff904 	addi	sp,sp,-28
  81b24c:	dfc00615 	stw	ra,24(sp)
  81b250:	df000515 	stw	fp,20(sp)
  81b254:	df000504 	addi	fp,sp,20
  81b258:	e13ffd15 	stw	r4,-12(fp)
  81b25c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  81b260:	e0bffe17 	ldw	r2,-8(fp)
  81b264:	10800017 	ldw	r2,0(r2)
  81b268:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81b26c:	e13ffd17 	ldw	r4,-12(fp)
  81b270:	080a0980 	call	80a098 <strlen>
  81b274:	10800044 	addi	r2,r2,1
  81b278:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81b27c:	00000d06 	br	81b2b4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  81b280:	e0bffc17 	ldw	r2,-16(fp)
  81b284:	11000217 	ldw	r4,8(r2)
  81b288:	e1bffb17 	ldw	r6,-20(fp)
  81b28c:	e17ffd17 	ldw	r5,-12(fp)
  81b290:	081b9e00 	call	81b9e0 <memcmp>
  81b294:	1004c03a 	cmpne	r2,r2,zero
  81b298:	1000031e 	bne	r2,zero,81b2a8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  81b29c:	e0bffc17 	ldw	r2,-16(fp)
  81b2a0:	e0bfff15 	stw	r2,-4(fp)
  81b2a4:	00000706 	br	81b2c4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  81b2a8:	e0bffc17 	ldw	r2,-16(fp)
  81b2ac:	10800017 	ldw	r2,0(r2)
  81b2b0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81b2b4:	e0fffe17 	ldw	r3,-8(fp)
  81b2b8:	e0bffc17 	ldw	r2,-16(fp)
  81b2bc:	10fff01e 	bne	r2,r3,81b280 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  81b2c0:	e03fff15 	stw	zero,-4(fp)
  81b2c4:	e0bfff17 	ldw	r2,-4(fp)
}
  81b2c8:	e037883a 	mov	sp,fp
  81b2cc:	dfc00117 	ldw	ra,4(sp)
  81b2d0:	df000017 	ldw	fp,0(sp)
  81b2d4:	dec00204 	addi	sp,sp,8
  81b2d8:	f800283a 	ret

0081b2dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  81b2dc:	defffe04 	addi	sp,sp,-8
  81b2e0:	dfc00115 	stw	ra,4(sp)
  81b2e4:	df000015 	stw	fp,0(sp)
  81b2e8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  81b2ec:	0009883a 	mov	r4,zero
  81b2f0:	01440004 	movi	r5,4096
  81b2f4:	081b9040 	call	81b904 <alt_icache_flush>
#endif
}
  81b2f8:	e037883a 	mov	sp,fp
  81b2fc:	dfc00117 	ldw	ra,4(sp)
  81b300:	df000017 	ldw	fp,0(sp)
  81b304:	dec00204 	addi	sp,sp,8
  81b308:	f800283a 	ret

0081b30c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  81b30c:	defff904 	addi	sp,sp,-28
  81b310:	dfc00615 	stw	ra,24(sp)
  81b314:	df000515 	stw	fp,20(sp)
  81b318:	df000504 	addi	fp,sp,20
  81b31c:	e13ffc15 	stw	r4,-16(fp)
  81b320:	e17ffd15 	stw	r5,-12(fp)
  81b324:	e1bffe15 	stw	r6,-8(fp)
  81b328:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  81b32c:	e13ffd17 	ldw	r4,-12(fp)
  81b330:	e17ffe17 	ldw	r5,-8(fp)
  81b334:	e1bfff17 	ldw	r6,-4(fp)
  81b338:	081b5240 	call	81b524 <open>
  81b33c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  81b340:	e0bffb17 	ldw	r2,-20(fp)
  81b344:	1004803a 	cmplt	r2,r2,zero
  81b348:	10001c1e 	bne	r2,zero,81b3bc <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  81b34c:	e0bffb17 	ldw	r2,-20(fp)
  81b350:	00c020b4 	movhi	r3,130
  81b354:	18f4ee04 	addi	r3,r3,-11336
  81b358:	10800324 	muli	r2,r2,12
  81b35c:	10c5883a 	add	r2,r2,r3
  81b360:	10c00017 	ldw	r3,0(r2)
  81b364:	e0bffc17 	ldw	r2,-16(fp)
  81b368:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  81b36c:	e0bffb17 	ldw	r2,-20(fp)
  81b370:	00c020b4 	movhi	r3,130
  81b374:	18f4ee04 	addi	r3,r3,-11336
  81b378:	10800324 	muli	r2,r2,12
  81b37c:	10c5883a 	add	r2,r2,r3
  81b380:	10800104 	addi	r2,r2,4
  81b384:	10c00017 	ldw	r3,0(r2)
  81b388:	e0bffc17 	ldw	r2,-16(fp)
  81b38c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81b390:	e0bffb17 	ldw	r2,-20(fp)
  81b394:	00c020b4 	movhi	r3,130
  81b398:	18f4ee04 	addi	r3,r3,-11336
  81b39c:	10800324 	muli	r2,r2,12
  81b3a0:	10c5883a 	add	r2,r2,r3
  81b3a4:	10800204 	addi	r2,r2,8
  81b3a8:	10c00017 	ldw	r3,0(r2)
  81b3ac:	e0bffc17 	ldw	r2,-16(fp)
  81b3b0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81b3b4:	e13ffb17 	ldw	r4,-20(fp)
  81b3b8:	08125380 	call	812538 <alt_release_fd>
  }
} 
  81b3bc:	e037883a 	mov	sp,fp
  81b3c0:	dfc00117 	ldw	ra,4(sp)
  81b3c4:	df000017 	ldw	fp,0(sp)
  81b3c8:	dec00204 	addi	sp,sp,8
  81b3cc:	f800283a 	ret

0081b3d0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81b3d0:	defffb04 	addi	sp,sp,-20
  81b3d4:	dfc00415 	stw	ra,16(sp)
  81b3d8:	df000315 	stw	fp,12(sp)
  81b3dc:	df000304 	addi	fp,sp,12
  81b3e0:	e13ffd15 	stw	r4,-12(fp)
  81b3e4:	e17ffe15 	stw	r5,-8(fp)
  81b3e8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81b3ec:	010020b4 	movhi	r4,130
  81b3f0:	2134f104 	addi	r4,r4,-11324
  81b3f4:	e17ffd17 	ldw	r5,-12(fp)
  81b3f8:	01800044 	movi	r6,1
  81b3fc:	01c07fc4 	movi	r7,511
  81b400:	081b30c0 	call	81b30c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  81b404:	010020b4 	movhi	r4,130
  81b408:	2134ee04 	addi	r4,r4,-11336
  81b40c:	e17ffe17 	ldw	r5,-8(fp)
  81b410:	000d883a 	mov	r6,zero
  81b414:	01c07fc4 	movi	r7,511
  81b418:	081b30c0 	call	81b30c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81b41c:	010020b4 	movhi	r4,130
  81b420:	2134f404 	addi	r4,r4,-11312
  81b424:	e17fff17 	ldw	r5,-4(fp)
  81b428:	01800044 	movi	r6,1
  81b42c:	01c07fc4 	movi	r7,511
  81b430:	081b30c0 	call	81b30c <alt_open_fd>
}  
  81b434:	e037883a 	mov	sp,fp
  81b438:	dfc00117 	ldw	ra,4(sp)
  81b43c:	df000017 	ldw	fp,0(sp)
  81b440:	dec00204 	addi	sp,sp,8
  81b444:	f800283a 	ret

0081b448 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  81b448:	defffc04 	addi	sp,sp,-16
  81b44c:	df000315 	stw	fp,12(sp)
  81b450:	df000304 	addi	fp,sp,12
  81b454:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  81b458:	e0bffe17 	ldw	r2,-8(fp)
  81b45c:	10800217 	ldw	r2,8(r2)
  81b460:	10d00034 	orhi	r3,r2,16384
  81b464:	e0bffe17 	ldw	r2,-8(fp)
  81b468:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81b46c:	e03ffd15 	stw	zero,-12(fp)
  81b470:	00002006 	br	81b4f4 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81b474:	e0bffd17 	ldw	r2,-12(fp)
  81b478:	00c020b4 	movhi	r3,130
  81b47c:	18f4ee04 	addi	r3,r3,-11336
  81b480:	10800324 	muli	r2,r2,12
  81b484:	10c5883a 	add	r2,r2,r3
  81b488:	10c00017 	ldw	r3,0(r2)
  81b48c:	e0bffe17 	ldw	r2,-8(fp)
  81b490:	10800017 	ldw	r2,0(r2)
  81b494:	1880141e 	bne	r3,r2,81b4e8 <alt_file_locked+0xa0>
  81b498:	e0bffd17 	ldw	r2,-12(fp)
  81b49c:	00c020b4 	movhi	r3,130
  81b4a0:	18f4ee04 	addi	r3,r3,-11336
  81b4a4:	10800324 	muli	r2,r2,12
  81b4a8:	10c5883a 	add	r2,r2,r3
  81b4ac:	10800204 	addi	r2,r2,8
  81b4b0:	10800017 	ldw	r2,0(r2)
  81b4b4:	1004403a 	cmpge	r2,r2,zero
  81b4b8:	10000b1e 	bne	r2,zero,81b4e8 <alt_file_locked+0xa0>
  81b4bc:	e0bffd17 	ldw	r2,-12(fp)
  81b4c0:	10800324 	muli	r2,r2,12
  81b4c4:	1007883a 	mov	r3,r2
  81b4c8:	008020b4 	movhi	r2,130
  81b4cc:	10b4ee04 	addi	r2,r2,-11336
  81b4d0:	1887883a 	add	r3,r3,r2
  81b4d4:	e0bffe17 	ldw	r2,-8(fp)
  81b4d8:	18800326 	beq	r3,r2,81b4e8 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81b4dc:	00bffcc4 	movi	r2,-13
  81b4e0:	e0bfff15 	stw	r2,-4(fp)
  81b4e4:	00000a06 	br	81b510 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81b4e8:	e0bffd17 	ldw	r2,-12(fp)
  81b4ec:	10800044 	addi	r2,r2,1
  81b4f0:	e0bffd15 	stw	r2,-12(fp)
  81b4f4:	008020b4 	movhi	r2,130
  81b4f8:	10b9cb04 	addi	r2,r2,-6356
  81b4fc:	10800017 	ldw	r2,0(r2)
  81b500:	1007883a 	mov	r3,r2
  81b504:	e0bffd17 	ldw	r2,-12(fp)
  81b508:	18bfda2e 	bgeu	r3,r2,81b474 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  81b50c:	e03fff15 	stw	zero,-4(fp)
  81b510:	e0bfff17 	ldw	r2,-4(fp)
}
  81b514:	e037883a 	mov	sp,fp
  81b518:	df000017 	ldw	fp,0(sp)
  81b51c:	dec00104 	addi	sp,sp,4
  81b520:	f800283a 	ret

0081b524 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  81b524:	defff404 	addi	sp,sp,-48
  81b528:	dfc00b15 	stw	ra,44(sp)
  81b52c:	df000a15 	stw	fp,40(sp)
  81b530:	df000a04 	addi	fp,sp,40
  81b534:	e13ffb15 	stw	r4,-20(fp)
  81b538:	e17ffc15 	stw	r5,-16(fp)
  81b53c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81b540:	00bfffc4 	movi	r2,-1
  81b544:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  81b548:	00bffb44 	movi	r2,-19
  81b54c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  81b550:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  81b554:	e13ffb17 	ldw	r4,-20(fp)
  81b558:	014020b4 	movhi	r5,130
  81b55c:	2979c904 	addi	r5,r5,-6364
  81b560:	081b2480 	call	81b248 <alt_find_dev>
  81b564:	e0bffa15 	stw	r2,-24(fp)
  81b568:	e0bffa17 	ldw	r2,-24(fp)
  81b56c:	1004c03a 	cmpne	r2,r2,zero
  81b570:	1000051e 	bne	r2,zero,81b588 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  81b574:	e13ffb17 	ldw	r4,-20(fp)
  81b578:	081b72c0 	call	81b72c <alt_find_file>
  81b57c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  81b580:	00800044 	movi	r2,1
  81b584:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  81b588:	e0bffa17 	ldw	r2,-24(fp)
  81b58c:	1005003a 	cmpeq	r2,r2,zero
  81b590:	1000301e 	bne	r2,zero,81b654 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  81b594:	e13ffa17 	ldw	r4,-24(fp)
  81b598:	081b84c0 	call	81b84c <alt_get_fd>
  81b59c:	e0bff815 	stw	r2,-32(fp)
  81b5a0:	e0bff817 	ldw	r2,-32(fp)
  81b5a4:	1004403a 	cmpge	r2,r2,zero
  81b5a8:	1000031e 	bne	r2,zero,81b5b8 <open+0x94>
    {
      status = index;
  81b5ac:	e0bff817 	ldw	r2,-32(fp)
  81b5b0:	e0bff715 	stw	r2,-36(fp)
  81b5b4:	00002906 	br	81b65c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  81b5b8:	e0bff817 	ldw	r2,-32(fp)
  81b5bc:	10800324 	muli	r2,r2,12
  81b5c0:	1007883a 	mov	r3,r2
  81b5c4:	008020b4 	movhi	r2,130
  81b5c8:	10b4ee04 	addi	r2,r2,-11336
  81b5cc:	1885883a 	add	r2,r3,r2
  81b5d0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  81b5d4:	e0fffc17 	ldw	r3,-16(fp)
  81b5d8:	00900034 	movhi	r2,16384
  81b5dc:	10bfffc4 	addi	r2,r2,-1
  81b5e0:	1886703a 	and	r3,r3,r2
  81b5e4:	e0bff917 	ldw	r2,-28(fp)
  81b5e8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81b5ec:	e0bff617 	ldw	r2,-40(fp)
  81b5f0:	1004c03a 	cmpne	r2,r2,zero
  81b5f4:	1000061e 	bne	r2,zero,81b610 <open+0xec>
  81b5f8:	e13ff917 	ldw	r4,-28(fp)
  81b5fc:	081b4480 	call	81b448 <alt_file_locked>
  81b600:	e0bff715 	stw	r2,-36(fp)
  81b604:	e0bff717 	ldw	r2,-36(fp)
  81b608:	1004803a 	cmplt	r2,r2,zero
  81b60c:	1000131e 	bne	r2,zero,81b65c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  81b610:	e0bffa17 	ldw	r2,-24(fp)
  81b614:	10800317 	ldw	r2,12(r2)
  81b618:	1005003a 	cmpeq	r2,r2,zero
  81b61c:	1000091e 	bne	r2,zero,81b644 <open+0x120>
  81b620:	e0bffa17 	ldw	r2,-24(fp)
  81b624:	10800317 	ldw	r2,12(r2)
  81b628:	e13ff917 	ldw	r4,-28(fp)
  81b62c:	e17ffb17 	ldw	r5,-20(fp)
  81b630:	e1bffc17 	ldw	r6,-16(fp)
  81b634:	e1fffd17 	ldw	r7,-12(fp)
  81b638:	103ee83a 	callr	r2
  81b63c:	e0bfff15 	stw	r2,-4(fp)
  81b640:	00000106 	br	81b648 <open+0x124>
  81b644:	e03fff15 	stw	zero,-4(fp)
  81b648:	e0bfff17 	ldw	r2,-4(fp)
  81b64c:	e0bff715 	stw	r2,-36(fp)
  81b650:	00000206 	br	81b65c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81b654:	00bffb44 	movi	r2,-19
  81b658:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81b65c:	e0bff717 	ldw	r2,-36(fp)
  81b660:	1004403a 	cmpge	r2,r2,zero
  81b664:	1000091e 	bne	r2,zero,81b68c <open+0x168>
  {
    alt_release_fd (index);  
  81b668:	e13ff817 	ldw	r4,-32(fp)
  81b66c:	08125380 	call	812538 <alt_release_fd>
    ALT_ERRNO = -status;
  81b670:	081b6ac0 	call	81b6ac <alt_get_errno>
  81b674:	e0fff717 	ldw	r3,-36(fp)
  81b678:	00c7c83a 	sub	r3,zero,r3
  81b67c:	10c00015 	stw	r3,0(r2)
    return -1;
  81b680:	00bfffc4 	movi	r2,-1
  81b684:	e0bffe15 	stw	r2,-8(fp)
  81b688:	00000206 	br	81b694 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  81b68c:	e0bff817 	ldw	r2,-32(fp)
  81b690:	e0bffe15 	stw	r2,-8(fp)
  81b694:	e0bffe17 	ldw	r2,-8(fp)
}
  81b698:	e037883a 	mov	sp,fp
  81b69c:	dfc00117 	ldw	ra,4(sp)
  81b6a0:	df000017 	ldw	fp,0(sp)
  81b6a4:	dec00204 	addi	sp,sp,8
  81b6a8:	f800283a 	ret

0081b6ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81b6ac:	defffd04 	addi	sp,sp,-12
  81b6b0:	dfc00215 	stw	ra,8(sp)
  81b6b4:	df000115 	stw	fp,4(sp)
  81b6b8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81b6bc:	008020b4 	movhi	r2,130
  81b6c0:	10b9cc04 	addi	r2,r2,-6352
  81b6c4:	10800017 	ldw	r2,0(r2)
  81b6c8:	1005003a 	cmpeq	r2,r2,zero
  81b6cc:	1000061e 	bne	r2,zero,81b6e8 <alt_get_errno+0x3c>
  81b6d0:	008020b4 	movhi	r2,130
  81b6d4:	10b9cc04 	addi	r2,r2,-6352
  81b6d8:	10800017 	ldw	r2,0(r2)
  81b6dc:	103ee83a 	callr	r2
  81b6e0:	e0bfff15 	stw	r2,-4(fp)
  81b6e4:	00000306 	br	81b6f4 <alt_get_errno+0x48>
  81b6e8:	008020b4 	movhi	r2,130
  81b6ec:	1080ef04 	addi	r2,r2,956
  81b6f0:	e0bfff15 	stw	r2,-4(fp)
  81b6f4:	e0bfff17 	ldw	r2,-4(fp)
}
  81b6f8:	e037883a 	mov	sp,fp
  81b6fc:	dfc00117 	ldw	ra,4(sp)
  81b700:	df000017 	ldw	fp,0(sp)
  81b704:	dec00204 	addi	sp,sp,8
  81b708:	f800283a 	ret

0081b70c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  81b70c:	deffff04 	addi	sp,sp,-4
  81b710:	df000015 	stw	fp,0(sp)
  81b714:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81b718:	000170fa 	wrctl	ienable,zero
}
  81b71c:	e037883a 	mov	sp,fp
  81b720:	df000017 	ldw	fp,0(sp)
  81b724:	dec00104 	addi	sp,sp,4
  81b728:	f800283a 	ret

0081b72c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81b72c:	defffa04 	addi	sp,sp,-24
  81b730:	dfc00515 	stw	ra,20(sp)
  81b734:	df000415 	stw	fp,16(sp)
  81b738:	df000404 	addi	fp,sp,16
  81b73c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81b740:	008020b4 	movhi	r2,130
  81b744:	10b9c704 	addi	r2,r2,-6372
  81b748:	10800017 	ldw	r2,0(r2)
  81b74c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81b750:	00003306 	br	81b820 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  81b754:	e0bffd17 	ldw	r2,-12(fp)
  81b758:	11000217 	ldw	r4,8(r2)
  81b75c:	080a0980 	call	80a098 <strlen>
  81b760:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  81b764:	e0bffd17 	ldw	r2,-12(fp)
  81b768:	10c00217 	ldw	r3,8(r2)
  81b76c:	e0bffc17 	ldw	r2,-16(fp)
  81b770:	1885883a 	add	r2,r3,r2
  81b774:	10bfffc4 	addi	r2,r2,-1
  81b778:	10800003 	ldbu	r2,0(r2)
  81b77c:	10803fcc 	andi	r2,r2,255
  81b780:	1080201c 	xori	r2,r2,128
  81b784:	10bfe004 	addi	r2,r2,-128
  81b788:	10800bd8 	cmpnei	r2,r2,47
  81b78c:	1000031e 	bne	r2,zero,81b79c <alt_find_file+0x70>
    {
      len -= 1;
  81b790:	e0bffc17 	ldw	r2,-16(fp)
  81b794:	10bfffc4 	addi	r2,r2,-1
  81b798:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81b79c:	e0bffc17 	ldw	r2,-16(fp)
  81b7a0:	1007883a 	mov	r3,r2
  81b7a4:	e0bffe17 	ldw	r2,-8(fp)
  81b7a8:	1885883a 	add	r2,r3,r2
  81b7ac:	10800003 	ldbu	r2,0(r2)
  81b7b0:	10803fcc 	andi	r2,r2,255
  81b7b4:	1080201c 	xori	r2,r2,128
  81b7b8:	10bfe004 	addi	r2,r2,-128
  81b7bc:	10800be0 	cmpeqi	r2,r2,47
  81b7c0:	10000a1e 	bne	r2,zero,81b7ec <alt_find_file+0xc0>
  81b7c4:	e0bffc17 	ldw	r2,-16(fp)
  81b7c8:	1007883a 	mov	r3,r2
  81b7cc:	e0bffe17 	ldw	r2,-8(fp)
  81b7d0:	1885883a 	add	r2,r3,r2
  81b7d4:	10800003 	ldbu	r2,0(r2)
  81b7d8:	10803fcc 	andi	r2,r2,255
  81b7dc:	1080201c 	xori	r2,r2,128
  81b7e0:	10bfe004 	addi	r2,r2,-128
  81b7e4:	1004c03a 	cmpne	r2,r2,zero
  81b7e8:	10000a1e 	bne	r2,zero,81b814 <alt_find_file+0xe8>
  81b7ec:	e0bffd17 	ldw	r2,-12(fp)
  81b7f0:	11000217 	ldw	r4,8(r2)
  81b7f4:	e1bffc17 	ldw	r6,-16(fp)
  81b7f8:	e17ffe17 	ldw	r5,-8(fp)
  81b7fc:	081b9e00 	call	81b9e0 <memcmp>
  81b800:	1004c03a 	cmpne	r2,r2,zero
  81b804:	1000031e 	bne	r2,zero,81b814 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  81b808:	e0bffd17 	ldw	r2,-12(fp)
  81b80c:	e0bfff15 	stw	r2,-4(fp)
  81b810:	00000806 	br	81b834 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  81b814:	e0bffd17 	ldw	r2,-12(fp)
  81b818:	10800017 	ldw	r2,0(r2)
  81b81c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81b820:	00c020b4 	movhi	r3,130
  81b824:	18f9c704 	addi	r3,r3,-6372
  81b828:	e0bffd17 	ldw	r2,-12(fp)
  81b82c:	10ffc91e 	bne	r2,r3,81b754 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  81b830:	e03fff15 	stw	zero,-4(fp)
  81b834:	e0bfff17 	ldw	r2,-4(fp)
}
  81b838:	e037883a 	mov	sp,fp
  81b83c:	dfc00117 	ldw	ra,4(sp)
  81b840:	df000017 	ldw	fp,0(sp)
  81b844:	dec00204 	addi	sp,sp,8
  81b848:	f800283a 	ret

0081b84c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81b84c:	defffc04 	addi	sp,sp,-16
  81b850:	df000315 	stw	fp,12(sp)
  81b854:	df000304 	addi	fp,sp,12
  81b858:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81b85c:	00bffa04 	movi	r2,-24
  81b860:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81b864:	e03ffe15 	stw	zero,-8(fp)
  81b868:	00001e06 	br	81b8e4 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  81b86c:	e0bffe17 	ldw	r2,-8(fp)
  81b870:	00c020b4 	movhi	r3,130
  81b874:	18f4ee04 	addi	r3,r3,-11336
  81b878:	10800324 	muli	r2,r2,12
  81b87c:	10c5883a 	add	r2,r2,r3
  81b880:	10800017 	ldw	r2,0(r2)
  81b884:	1004c03a 	cmpne	r2,r2,zero
  81b888:	1000131e 	bne	r2,zero,81b8d8 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  81b88c:	e0bffe17 	ldw	r2,-8(fp)
  81b890:	00c020b4 	movhi	r3,130
  81b894:	18f4ee04 	addi	r3,r3,-11336
  81b898:	10800324 	muli	r2,r2,12
  81b89c:	10c7883a 	add	r3,r2,r3
  81b8a0:	e0bfff17 	ldw	r2,-4(fp)
  81b8a4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  81b8a8:	008020b4 	movhi	r2,130
  81b8ac:	10b9cb04 	addi	r2,r2,-6356
  81b8b0:	10c00017 	ldw	r3,0(r2)
  81b8b4:	e0bffe17 	ldw	r2,-8(fp)
  81b8b8:	1880040e 	bge	r3,r2,81b8cc <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  81b8bc:	00c020b4 	movhi	r3,130
  81b8c0:	18f9cb04 	addi	r3,r3,-6356
  81b8c4:	e0bffe17 	ldw	r2,-8(fp)
  81b8c8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  81b8cc:	e0bffe17 	ldw	r2,-8(fp)
  81b8d0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  81b8d4:	00000606 	br	81b8f0 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81b8d8:	e0bffe17 	ldw	r2,-8(fp)
  81b8dc:	10800044 	addi	r2,r2,1
  81b8e0:	e0bffe15 	stw	r2,-8(fp)
  81b8e4:	e0bffe17 	ldw	r2,-8(fp)
  81b8e8:	10800810 	cmplti	r2,r2,32
  81b8ec:	103fdf1e 	bne	r2,zero,81b86c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  81b8f0:	e0bffd17 	ldw	r2,-12(fp)
}
  81b8f4:	e037883a 	mov	sp,fp
  81b8f8:	df000017 	ldw	fp,0(sp)
  81b8fc:	dec00104 	addi	sp,sp,4
  81b900:	f800283a 	ret

0081b904 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  81b904:	defffb04 	addi	sp,sp,-20
  81b908:	df000415 	stw	fp,16(sp)
  81b90c:	df000404 	addi	fp,sp,16
  81b910:	e13ffe15 	stw	r4,-8(fp)
  81b914:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  81b918:	e0bfff17 	ldw	r2,-4(fp)
  81b91c:	10840070 	cmpltui	r2,r2,4097
  81b920:	1000021e 	bne	r2,zero,81b92c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  81b924:	00840004 	movi	r2,4096
  81b928:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  81b92c:	e0fffe17 	ldw	r3,-8(fp)
  81b930:	e0bfff17 	ldw	r2,-4(fp)
  81b934:	1885883a 	add	r2,r3,r2
  81b938:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81b93c:	e0bffe17 	ldw	r2,-8(fp)
  81b940:	e0bffd15 	stw	r2,-12(fp)
  81b944:	00000506 	br	81b95c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  81b948:	e0bffd17 	ldw	r2,-12(fp)
  81b94c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81b950:	e0bffd17 	ldw	r2,-12(fp)
  81b954:	10800804 	addi	r2,r2,32
  81b958:	e0bffd15 	stw	r2,-12(fp)
  81b95c:	e0fffd17 	ldw	r3,-12(fp)
  81b960:	e0bffc17 	ldw	r2,-16(fp)
  81b964:	18bff836 	bltu	r3,r2,81b948 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  81b968:	e0bffe17 	ldw	r2,-8(fp)
  81b96c:	108007cc 	andi	r2,r2,31
  81b970:	1005003a 	cmpeq	r2,r2,zero
  81b974:	1000021e 	bne	r2,zero,81b980 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  81b978:	e0bffd17 	ldw	r2,-12(fp)
  81b97c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  81b980:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  81b984:	e037883a 	mov	sp,fp
  81b988:	df000017 	ldw	fp,0(sp)
  81b98c:	dec00104 	addi	sp,sp,4
  81b990:	f800283a 	ret

0081b994 <atexit>:
  81b994:	200b883a 	mov	r5,r4
  81b998:	000d883a 	mov	r6,zero
  81b99c:	0009883a 	mov	r4,zero
  81b9a0:	000f883a 	mov	r7,zero
  81b9a4:	081ba541 	jmpi	81ba54 <__register_exitproc>

0081b9a8 <exit>:
  81b9a8:	defffe04 	addi	sp,sp,-8
  81b9ac:	000b883a 	mov	r5,zero
  81b9b0:	dc000015 	stw	r16,0(sp)
  81b9b4:	dfc00115 	stw	ra,4(sp)
  81b9b8:	2021883a 	mov	r16,r4
  81b9bc:	081bb8c0 	call	81bb8c <__call_exitprocs>
  81b9c0:	008020b4 	movhi	r2,130
  81b9c4:	10b9c204 	addi	r2,r2,-6392
  81b9c8:	11000017 	ldw	r4,0(r2)
  81b9cc:	20800f17 	ldw	r2,60(r4)
  81b9d0:	10000126 	beq	r2,zero,81b9d8 <exit+0x30>
  81b9d4:	103ee83a 	callr	r2
  81b9d8:	8009883a 	mov	r4,r16
  81b9dc:	081bd7c0 	call	81bd7c <_exit>

0081b9e0 <memcmp>:
  81b9e0:	00c000c4 	movi	r3,3
  81b9e4:	1980032e 	bgeu	r3,r6,81b9f4 <memcmp+0x14>
  81b9e8:	2144b03a 	or	r2,r4,r5
  81b9ec:	10c4703a 	and	r2,r2,r3
  81b9f0:	10000f26 	beq	r2,zero,81ba30 <memcmp+0x50>
  81b9f4:	31ffffc4 	addi	r7,r6,-1
  81b9f8:	3000061e 	bne	r6,zero,81ba14 <memcmp+0x34>
  81b9fc:	00000a06 	br	81ba28 <memcmp+0x48>
  81ba00:	39ffffc4 	addi	r7,r7,-1
  81ba04:	00bfffc4 	movi	r2,-1
  81ba08:	21000044 	addi	r4,r4,1
  81ba0c:	29400044 	addi	r5,r5,1
  81ba10:	38800526 	beq	r7,r2,81ba28 <memcmp+0x48>
  81ba14:	20c00003 	ldbu	r3,0(r4)
  81ba18:	28800003 	ldbu	r2,0(r5)
  81ba1c:	18bff826 	beq	r3,r2,81ba00 <memcmp+0x20>
  81ba20:	1885c83a 	sub	r2,r3,r2
  81ba24:	f800283a 	ret
  81ba28:	0005883a 	mov	r2,zero
  81ba2c:	f800283a 	ret
  81ba30:	180f883a 	mov	r7,r3
  81ba34:	20c00017 	ldw	r3,0(r4)
  81ba38:	28800017 	ldw	r2,0(r5)
  81ba3c:	18bfed1e 	bne	r3,r2,81b9f4 <memcmp+0x14>
  81ba40:	31bfff04 	addi	r6,r6,-4
  81ba44:	21000104 	addi	r4,r4,4
  81ba48:	29400104 	addi	r5,r5,4
  81ba4c:	39bff936 	bltu	r7,r6,81ba34 <memcmp+0x54>
  81ba50:	003fe806 	br	81b9f4 <memcmp+0x14>

0081ba54 <__register_exitproc>:
  81ba54:	defffa04 	addi	sp,sp,-24
  81ba58:	008020b4 	movhi	r2,130
  81ba5c:	10b9c204 	addi	r2,r2,-6392
  81ba60:	dc000015 	stw	r16,0(sp)
  81ba64:	14000017 	ldw	r16,0(r2)
  81ba68:	dd000415 	stw	r20,16(sp)
  81ba6c:	2829883a 	mov	r20,r5
  81ba70:	81405217 	ldw	r5,328(r16)
  81ba74:	dcc00315 	stw	r19,12(sp)
  81ba78:	dc800215 	stw	r18,8(sp)
  81ba7c:	dc400115 	stw	r17,4(sp)
  81ba80:	dfc00515 	stw	ra,20(sp)
  81ba84:	2023883a 	mov	r17,r4
  81ba88:	3027883a 	mov	r19,r6
  81ba8c:	3825883a 	mov	r18,r7
  81ba90:	28002526 	beq	r5,zero,81bb28 <__register_exitproc+0xd4>
  81ba94:	29000117 	ldw	r4,4(r5)
  81ba98:	008007c4 	movi	r2,31
  81ba9c:	11002716 	blt	r2,r4,81bb3c <__register_exitproc+0xe8>
  81baa0:	8800101e 	bne	r17,zero,81bae4 <__register_exitproc+0x90>
  81baa4:	2105883a 	add	r2,r4,r4
  81baa8:	1085883a 	add	r2,r2,r2
  81baac:	20c00044 	addi	r3,r4,1
  81bab0:	1145883a 	add	r2,r2,r5
  81bab4:	0009883a 	mov	r4,zero
  81bab8:	15000215 	stw	r20,8(r2)
  81babc:	28c00115 	stw	r3,4(r5)
  81bac0:	2005883a 	mov	r2,r4
  81bac4:	dfc00517 	ldw	ra,20(sp)
  81bac8:	dd000417 	ldw	r20,16(sp)
  81bacc:	dcc00317 	ldw	r19,12(sp)
  81bad0:	dc800217 	ldw	r18,8(sp)
  81bad4:	dc400117 	ldw	r17,4(sp)
  81bad8:	dc000017 	ldw	r16,0(sp)
  81badc:	dec00604 	addi	sp,sp,24
  81bae0:	f800283a 	ret
  81bae4:	29802204 	addi	r6,r5,136
  81bae8:	00800044 	movi	r2,1
  81baec:	110e983a 	sll	r7,r2,r4
  81baf0:	30c04017 	ldw	r3,256(r6)
  81baf4:	2105883a 	add	r2,r4,r4
  81baf8:	1085883a 	add	r2,r2,r2
  81bafc:	1185883a 	add	r2,r2,r6
  81bb00:	19c6b03a 	or	r3,r3,r7
  81bb04:	14802015 	stw	r18,128(r2)
  81bb08:	14c00015 	stw	r19,0(r2)
  81bb0c:	00800084 	movi	r2,2
  81bb10:	30c04015 	stw	r3,256(r6)
  81bb14:	88bfe31e 	bne	r17,r2,81baa4 <__register_exitproc+0x50>
  81bb18:	30804117 	ldw	r2,260(r6)
  81bb1c:	11c4b03a 	or	r2,r2,r7
  81bb20:	30804115 	stw	r2,260(r6)
  81bb24:	003fdf06 	br	81baa4 <__register_exitproc+0x50>
  81bb28:	008020b4 	movhi	r2,130
  81bb2c:	1092d204 	addi	r2,r2,19272
  81bb30:	100b883a 	mov	r5,r2
  81bb34:	80805215 	stw	r2,328(r16)
  81bb38:	003fd606 	br	81ba94 <__register_exitproc+0x40>
  81bb3c:	00802074 	movhi	r2,129
  81bb40:	10a5c504 	addi	r2,r2,-26860
  81bb44:	1000021e 	bne	r2,zero,81bb50 <__register_exitproc+0xfc>
  81bb48:	013fffc4 	movi	r4,-1
  81bb4c:	003fdc06 	br	81bac0 <__register_exitproc+0x6c>
  81bb50:	01006404 	movi	r4,400
  81bb54:	103ee83a 	callr	r2
  81bb58:	1007883a 	mov	r3,r2
  81bb5c:	103ffa26 	beq	r2,zero,81bb48 <__register_exitproc+0xf4>
  81bb60:	80805217 	ldw	r2,328(r16)
  81bb64:	180b883a 	mov	r5,r3
  81bb68:	18000115 	stw	zero,4(r3)
  81bb6c:	18800015 	stw	r2,0(r3)
  81bb70:	80c05215 	stw	r3,328(r16)
  81bb74:	18006215 	stw	zero,392(r3)
  81bb78:	18006315 	stw	zero,396(r3)
  81bb7c:	0009883a 	mov	r4,zero
  81bb80:	883fc826 	beq	r17,zero,81baa4 <__register_exitproc+0x50>
  81bb84:	003fd706 	br	81bae4 <__register_exitproc+0x90>

0081bb88 <register_fini>:
  81bb88:	f800283a 	ret

0081bb8c <__call_exitprocs>:
  81bb8c:	008020b4 	movhi	r2,130
  81bb90:	10b9c204 	addi	r2,r2,-6392
  81bb94:	10800017 	ldw	r2,0(r2)
  81bb98:	defff304 	addi	sp,sp,-52
  81bb9c:	df000b15 	stw	fp,44(sp)
  81bba0:	d8800115 	stw	r2,4(sp)
  81bba4:	00802074 	movhi	r2,129
  81bba8:	10a5c004 	addi	r2,r2,-26880
  81bbac:	1005003a 	cmpeq	r2,r2,zero
  81bbb0:	d8800215 	stw	r2,8(sp)
  81bbb4:	d8800117 	ldw	r2,4(sp)
  81bbb8:	dd400815 	stw	r21,32(sp)
  81bbbc:	dd000715 	stw	r20,28(sp)
  81bbc0:	10805204 	addi	r2,r2,328
  81bbc4:	dfc00c15 	stw	ra,48(sp)
  81bbc8:	ddc00a15 	stw	r23,40(sp)
  81bbcc:	dd800915 	stw	r22,36(sp)
  81bbd0:	dcc00615 	stw	r19,24(sp)
  81bbd4:	dc800515 	stw	r18,20(sp)
  81bbd8:	dc400415 	stw	r17,16(sp)
  81bbdc:	dc000315 	stw	r16,12(sp)
  81bbe0:	282b883a 	mov	r21,r5
  81bbe4:	2039883a 	mov	fp,r4
  81bbe8:	d8800015 	stw	r2,0(sp)
  81bbec:	2829003a 	cmpeq	r20,r5,zero
  81bbf0:	d8800117 	ldw	r2,4(sp)
  81bbf4:	14405217 	ldw	r17,328(r2)
  81bbf8:	88001026 	beq	r17,zero,81bc3c <__call_exitprocs+0xb0>
  81bbfc:	ddc00017 	ldw	r23,0(sp)
  81bc00:	88800117 	ldw	r2,4(r17)
  81bc04:	8c802204 	addi	r18,r17,136
  81bc08:	143fffc4 	addi	r16,r2,-1
  81bc0c:	80000916 	blt	r16,zero,81bc34 <__call_exitprocs+0xa8>
  81bc10:	05bfffc4 	movi	r22,-1
  81bc14:	a000151e 	bne	r20,zero,81bc6c <__call_exitprocs+0xe0>
  81bc18:	8409883a 	add	r4,r16,r16
  81bc1c:	2105883a 	add	r2,r4,r4
  81bc20:	1485883a 	add	r2,r2,r18
  81bc24:	10c02017 	ldw	r3,128(r2)
  81bc28:	a8c01126 	beq	r21,r3,81bc70 <__call_exitprocs+0xe4>
  81bc2c:	843fffc4 	addi	r16,r16,-1
  81bc30:	85bff81e 	bne	r16,r22,81bc14 <__call_exitprocs+0x88>
  81bc34:	d8800217 	ldw	r2,8(sp)
  81bc38:	10003126 	beq	r2,zero,81bd00 <__call_exitprocs+0x174>
  81bc3c:	dfc00c17 	ldw	ra,48(sp)
  81bc40:	df000b17 	ldw	fp,44(sp)
  81bc44:	ddc00a17 	ldw	r23,40(sp)
  81bc48:	dd800917 	ldw	r22,36(sp)
  81bc4c:	dd400817 	ldw	r21,32(sp)
  81bc50:	dd000717 	ldw	r20,28(sp)
  81bc54:	dcc00617 	ldw	r19,24(sp)
  81bc58:	dc800517 	ldw	r18,20(sp)
  81bc5c:	dc400417 	ldw	r17,16(sp)
  81bc60:	dc000317 	ldw	r16,12(sp)
  81bc64:	dec00d04 	addi	sp,sp,52
  81bc68:	f800283a 	ret
  81bc6c:	8409883a 	add	r4,r16,r16
  81bc70:	88c00117 	ldw	r3,4(r17)
  81bc74:	2105883a 	add	r2,r4,r4
  81bc78:	1445883a 	add	r2,r2,r17
  81bc7c:	18ffffc4 	addi	r3,r3,-1
  81bc80:	11800217 	ldw	r6,8(r2)
  81bc84:	1c001526 	beq	r3,r16,81bcdc <__call_exitprocs+0x150>
  81bc88:	10000215 	stw	zero,8(r2)
  81bc8c:	303fe726 	beq	r6,zero,81bc2c <__call_exitprocs+0xa0>
  81bc90:	00c00044 	movi	r3,1
  81bc94:	1c06983a 	sll	r3,r3,r16
  81bc98:	90804017 	ldw	r2,256(r18)
  81bc9c:	8cc00117 	ldw	r19,4(r17)
  81bca0:	1884703a 	and	r2,r3,r2
  81bca4:	10001426 	beq	r2,zero,81bcf8 <__call_exitprocs+0x16c>
  81bca8:	90804117 	ldw	r2,260(r18)
  81bcac:	1884703a 	and	r2,r3,r2
  81bcb0:	10000c1e 	bne	r2,zero,81bce4 <__call_exitprocs+0x158>
  81bcb4:	2105883a 	add	r2,r4,r4
  81bcb8:	1485883a 	add	r2,r2,r18
  81bcbc:	11400017 	ldw	r5,0(r2)
  81bcc0:	e009883a 	mov	r4,fp
  81bcc4:	303ee83a 	callr	r6
  81bcc8:	88800117 	ldw	r2,4(r17)
  81bccc:	98bfc81e 	bne	r19,r2,81bbf0 <__call_exitprocs+0x64>
  81bcd0:	b8800017 	ldw	r2,0(r23)
  81bcd4:	147fd526 	beq	r2,r17,81bc2c <__call_exitprocs+0xa0>
  81bcd8:	003fc506 	br	81bbf0 <__call_exitprocs+0x64>
  81bcdc:	8c000115 	stw	r16,4(r17)
  81bce0:	003fea06 	br	81bc8c <__call_exitprocs+0x100>
  81bce4:	2105883a 	add	r2,r4,r4
  81bce8:	1485883a 	add	r2,r2,r18
  81bcec:	11000017 	ldw	r4,0(r2)
  81bcf0:	303ee83a 	callr	r6
  81bcf4:	003ff406 	br	81bcc8 <__call_exitprocs+0x13c>
  81bcf8:	303ee83a 	callr	r6
  81bcfc:	003ff206 	br	81bcc8 <__call_exitprocs+0x13c>
  81bd00:	88800117 	ldw	r2,4(r17)
  81bd04:	1000081e 	bne	r2,zero,81bd28 <__call_exitprocs+0x19c>
  81bd08:	89000017 	ldw	r4,0(r17)
  81bd0c:	20000726 	beq	r4,zero,81bd2c <__call_exitprocs+0x1a0>
  81bd10:	b9000015 	stw	r4,0(r23)
  81bd14:	8809883a 	mov	r4,r17
  81bd18:	08097000 	call	809700 <free>
  81bd1c:	bc400017 	ldw	r17,0(r23)
  81bd20:	883fb71e 	bne	r17,zero,81bc00 <__call_exitprocs+0x74>
  81bd24:	003fc506 	br	81bc3c <__call_exitprocs+0xb0>
  81bd28:	89000017 	ldw	r4,0(r17)
  81bd2c:	882f883a 	mov	r23,r17
  81bd30:	2023883a 	mov	r17,r4
  81bd34:	883fb21e 	bne	r17,zero,81bc00 <__call_exitprocs+0x74>
  81bd38:	003fc006 	br	81bc3c <__call_exitprocs+0xb0>

0081bd3c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  81bd3c:	defffd04 	addi	sp,sp,-12
  81bd40:	df000215 	stw	fp,8(sp)
  81bd44:	df000204 	addi	fp,sp,8
  81bd48:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  81bd4c:	e0bfff17 	ldw	r2,-4(fp)
  81bd50:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81bd54:	e0bffe17 	ldw	r2,-8(fp)
  81bd58:	1005003a 	cmpeq	r2,r2,zero
  81bd5c:	1000021e 	bne	r2,zero,81bd68 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  81bd60:	002af070 	cmpltui	zero,zero,43969
  81bd64:	00000106 	br	81bd6c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  81bd68:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  81bd6c:	e037883a 	mov	sp,fp
  81bd70:	df000017 	ldw	fp,0(sp)
  81bd74:	dec00104 	addi	sp,sp,4
  81bd78:	f800283a 	ret

0081bd7c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  81bd7c:	defffd04 	addi	sp,sp,-12
  81bd80:	dfc00215 	stw	ra,8(sp)
  81bd84:	df000115 	stw	fp,4(sp)
  81bd88:	df000104 	addi	fp,sp,4
  81bd8c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  81bd90:	e13fff17 	ldw	r4,-4(fp)
  81bd94:	081bd3c0 	call	81bd3c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81bd98:	003fff06 	br	81bd98 <_exit+0x1c>
  81bd9c:	00000010 	cmplti	zero,zero,0
  81bda0:	00000000 	call	0 <__reset-0x800000>
  81bda4:	00527a01 	jmpi	527a0 <__reset-0x7ad860>
  81bda8:	011f7c01 	jmpi	11f7c0 <__reset-0x6e0840>
  81bdac:	001b0c0b 	ldhu	zero,27696(zero)
  81bdb0:	00000028 	cmpgeui	zero,zero,0
  81bdb4:	00000018 	cmpnei	zero,zero,0
  81bdb8:	00810b70 	cmpltui	r2,zero,1069
  81bdbc:	000005dc 	xori	zero,zero,23
  81bdc0:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  81bdc4:	92099170 	cmpltui	r8,r18,9797
  81bdc8:	95079308 	cmpgei	r20,r18,7756
  81bdcc:	97049605 	stb	fp,4696(r18)
  81bdd0:	90019f03 	ldbu	zero,1660(r18)
  81bdd4:	9c06940a 	0x9c06940a
  81bdd8:	00000002 	0x2
  81bddc:	00000028 	cmpgeui	zero,zero,0
  81bde0:	00000044 	movi	zero,1
  81bde4:	0081114c 	andi	r2,zero,1093
  81bde8:	000005b0 	cmpltui	zero,zero,22
  81bdec:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  81bdf0:	92099168 	cmpgeui	r8,r18,9797
  81bdf4:	95079308 	cmpgei	r20,r18,7756
  81bdf8:	9c039705 	stb	r16,3676(r19)
  81bdfc:	90019f02 	0x90019f02
  81be00:	9606940a 	0x9606940a
  81be04:	00000004 	movi	zero,0
  81be08:	0081bb88 	cmpgei	r2,zero,1774
