
LSN.elf:     file format elf32-littlenios2
LSN.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001d53c memsz 0x0001d53c flags r-x
    LOAD off    0x0001e55c vaddr 0x0081d55c paddr 0x0081f124 align 2**12
         filesz 0x00001bc8 memsz 0x00001bc8 flags rw-
    LOAD off    0x00020cec vaddr 0x00820cec paddr 0x00820cec align 2**12
         filesz 0x00000000 memsz 0x0000a818 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001c604  008001b8  008001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000da0  0081c7bc  0081c7bc  0001d7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bc8  0081d55c  0081f124  0001e55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000a818  00820cec  00820cec  00020cec  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001238  00000000  00000000  00020150  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00003e10  00000000  00000000  00021388  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00039dec  00000000  00000000  00025198  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b499  00000000  00000000  0005ef84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00021be7  00000000  00000000  0006a41d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003690  00000000  00000000  0008c004  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000376a  00000000  00000000  0008f694  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000103cf  00000000  00000000  00092dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000a31d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c78  00000000  00000000  000a3230  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000aa2a0  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000aa2a3  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000aa2af  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000aa2b0  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000aa2b1  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000aa2bc  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000aa2c7  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000aa2d2  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003b  00000000  00000000  000aa2dd  2**0
                  CONTENTS, READONLY
 26 .jdi          000057f2  00000000  00000000  000aa318  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00096040  00000000  00000000  000afb0a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b8 l    d  .text	00000000 .text
0081c7bc l    d  .rodata	00000000 .rodata
0081d55c l    d  .rwdata	00000000 .rwdata
00820cec l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00800200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 audio.c
00800c74 l     F .text	00000170 playSoundISR
00820cf8 l     O .bss	00000004 audioBuffer
00820cfc l     O .bss	00000004 audioVolumeBuffer
00000000 l    df *ABS*	00000000 bmp.c
00000000 l    df *ABS*	00000000 bullet.c
00000000 l    df *ABS*	00000000 collision.c
00000000 l    df *ABS*	00000000 displacement.c
00820d64 l     O .bss	00000008 right
00820d6c l     O .bss	00000008 left
00820d74 l     O .bss	00000008 up
00820d7c l     O .bss	00000008 down
00000000 l    df *ABS*	00000000 gameEnd.c
00000000 l    df *ABS*	00000000 input.c
00820d84 l     O .bss	00000002 edgeDetect3.3814
00820d86 l     O .bss	00000002 edgeDetect2.3813
00820d88 l     O .bss	00000002 edgeDetect1.3812
00820d8a l     O .bss	00000002 edgeDetect0.3811
00820d8c l     O .bss	00000001 keyInput.3810
00820d8e l     O .bss	00000002 scoresShown.3849
0081f0d4 l     O .rwdata	00000001 prevSwInput.3848
00820d90 l     O .bss	00000002 edgeDetect.3847
00820d92 l     O .bss	00000001 SWInput.3846
00820d94 l     O .bss	00000002 edgeDetect.3881
00820d96 l     O .bss	00000001 atariFire.3880
00820d97 l     O .bss	00000001 atariDown.3879
00820d98 l     O .bss	00000001 atariUp.3878
00820d99 l     O .bss	00000001 atariButtons.3877
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 nado.c
00000000 l    df *ABS*	00000000 player.c
00000000 l    df *ABS*	00000000 score.c
00820da0 l     O .bss	00000001 atariFire.3428
00820da1 l     O .bss	00000001 atariDown.3427
00820da2 l     O .bss	00000001 atariUp.3426
00820da3 l     O .bss	00000001 atariButtons.3425
00000000 l    df *ABS*	00000000 sd_card.c
00000000 l    df *ABS*	00000000 shark.c
00000000 l    df *ABS*	00000000 splash.c
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
0081d0f4 l     O .rodata	00000010 bp
0081d104 l     O .rodata	00000010 dp_l
0081d114 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
0081d124 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00808730 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00809700 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0081d55c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080ab18 l     F .text	00000058 __sprint_r
0081d2ce l     O .rodata	00000010 blanks.3452
0081d2be l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0080cb7c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080e578 l     F .text	00000058 std
0080e684 l     F .text	00000008 __fp_lock
0080e68c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0081f0f8 l     O .rwdata	00000004 charset
0081d300 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0081d448 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
008123c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00812424 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00812524 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00812a20 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00812b00 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00812c5c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00812e88 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081f118 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
008132f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0081df18 l     O .rwdata	00001060 jtag_uart_0
0081ef78 l     O .rwdata	00000030 audio_and_video_config_0
0081efa8 l     O .rwdata	00000030 audio_0
0081efd8 l     O .rwdata	0000002c character_lcd_0
0081f004 l     O .rwdata	00000048 char_drawer
0081f04c l     O .rwdata	00000054 pixel_buffer_dma
0081f0a0 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00813700 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00813938 l     F .text	0000022c altera_avalon_jtag_uart_irq
00813b64 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008141e0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 altera_up_sd_card_avalon_interface.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0081bad0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0081bcbc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0081bdf8 l     F .text	000000dc alt_file_locked
0081c05c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0081c538 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0081c6ec l     F .text	00000040 alt_sim_halt
00800f1c g     F .text	000001e8 changeBufferVolume
00814da4 g     F .text	00000038 alt_up_av_config_reset
00820e08 g     O .bss	00000004 aux_status_register
00820da8 g     O .bss	00000004 sharkList
0080fc68 g     F .text	00000094 _mprec_log10
00815248 g     F .text	00000064 alt_up_av_config_read_D5M_cfg_register
008004c4 g     F .text	000000cc loadPlayerDeath
0080fd54 g     F .text	00000088 __any_on
008113c0 g     F .text	00000070 _isatty_r
0081d420 g     O .rodata	00000028 __mprec_tinytens
00814e14 g     F .text	00000030 alt_up_av_config_disable_interrupt
00812cbc g     F .text	0000006c alt_main
00816878 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
0080a890 g     F .text	000000a0 _puts_r
0082b274 g     O .bss	00000100 alt_irq
00808040 g     F .text	00000018 fabs
00811430 g     F .text	00000078 _lseek_r
0081f124 g       *ABS*	00000000 __flash_rwdata_start
00815454 g     F .text	00000034 alt_up_character_lcd_send_cmd
00806140 g     F .text	00000048 setHardwareTimerPeriod
00809250 g     F .text	00000088 __eqdf2
008018d0 g     F .text	000000bc initBullets
00817528 g     F .text	000001b0 Check_for_Master_Boot_Record
0080f294 g     F .text	00000074 _gettimeofday_r
008146bc g     F .text	00000070 alt_up_audio_read_fifo_avail
00814ee4 g     F .text	000000ac alt_up_av_config_write_audio_cfg_register
0082b504 g       *ABS*	00000000 __alt_heap_start
00804b94 g     F .text	00000024 getCurrentPlayerScore
008035b4 g     F .text	000001c4 handleAtariInput
0081f0dc g     O .rwdata	00000004 scoreFileName
0081b3e0 g     F .text	000001cc alt_up_sd_card_fclose
0080a818 g     F .text	00000044 printf
00804c08 g     F .text	00000238 drawScore
0081472c g     F .text	00000070 alt_up_audio_record_r
00820d1c g     O .bss	00000004 nnadobBmp
00810e8c g     F .text	00000068 __sseek
0080e5e0 g     F .text	000000a4 __sinit
00815a9c g     F .text	00000114 alt_up_char_buffer_string
0081f0cc g     O .rwdata	00000004 CONFIG_NAME
0080f32c g     F .text	00000084 _setlocale_r
0080e6e0 g     F .text	00000068 __sfmoreglue
00812d48 g     F .text	00000020 __malloc_unlock
008084d0 g     F .text	00000174 __divsf3
00820e2c g     O .bss	00000004 current_sector_modified
008159cc g     F .text	000000d0 alt_up_char_buffer_draw
00814634 g     F .text	00000088 alt_up_audio_reset_audio_core
0081b6a8 g     F .text	00000090 Read_Sector_Data_Attempt_CRC
00820dfc g     O .bss	00000004 altera_avalon_timer_ts_freq
00800bcc g     F .text	00000044 playSharkDeath
0080f6e4 g     F .text	000000e0 memmove
0082938c g     O .bss	00000400 verticalDisplacementFunctionDown
00803ea8 g     F .text	0000001c killPlayer
0080e6d0 g     F .text	00000010 _cleanup
0080fddc g     F .text	000000bc _Balloc
00805648 g     F .text	0000020c moveShark
00819fa4 g     F .text	000000c8 alt_up_sd_card_is_Present
00817240 g     F .text	00000050 Save_Modified_Sector
008015f4 g     F .text	00000038 freeSplash
00803ec4 g     F .text	00000064 initScoreBoard
00815c4c g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00803d54 g     F .text	0000008c moveDownPlayer
00809360 g     F .text	00000088 __gtdf2
0080a0a0 g     F .text	00000010 __errno
008153d8 g     F .text	0000007c get_DDRAM_addr
00805128 g     F .text	00000040 openFile
00800858 g     F .text	000001a0 audioTest
00815c0c g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
008064f8 g     F .text	00000060 drawBox
00800000 g     F .entry	0000001c __reset
00820e24 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
00801dcc g     F .text	00000084 drawAllBullets
00800020 g       *ABS*	00000000 __flash_exceptions_start
0081134c g     F .text	00000074 _fstat_r
00820dc0 g     O .bss	00000004 errno
008096c8 g     F .text	00000038 __make_dp
00805e58 g     F .text	00000028 clearSplashScreen
008145f8 g     F .text	0000003c alt_up_audio_write_interrupt_pending
00820d20 g     O .bss	00000004 pixel_buffer_addr1
00820d24 g     O .bss	00000004 char_buffer
00820de8 g     O .bss	00000004 alt_argv
008021e0 g     F .text	000000c0 moveBulletLeft
008270cc g       *ABS*	00000000 _gp
008131a8 g     F .text	00000030 usleep
0081a564 g     F .text	000003a8 alt_up_sd_card_fopen
00820e8c g     O .bss	00000010 player
0081a0e0 g     F .text	000000d4 alt_up_sd_card_find_first
00820e18 g     O .bss	00000004 command_argument_register
00815dec g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
008047bc g     F .text	00000374 obtainUserInitials
00803fd0 g     F .text	00000354 readHighScoreBoardFromSD
0081dd98 g     O .rwdata	00000180 alt_fd_list
00820db0 g     O .bss	00000004 sharkCount
00820d5c g     O .bss	00000004 sharkLaserColor
008197d4 g     F .text	0000012c find_first_empty_record_in_root_directory
0081bbf8 g     F .text	00000094 alt_find_dev
0080f644 g     F .text	000000a0 memcpy
008155ec g     F .text	0000004c alt_up_character_lcd_write_fd
00815bb0 g     F .text	0000005c alt_up_char_buffer_clear
00803b74 g     F .text	0000002c eraseBNado
0080e6c4 g     F .text	0000000c _cleanup_r
008094f8 g     F .text	000000f8 __floatsidf
0081bd80 g     F .text	00000078 alt_io_redirect
008093e8 g     F .text	00000088 __ltdf2
00820d28 g     O .bss	00000004 loadBmp
0080311c g     F .text	00000040 makeUp
0081c7bc g       *ABS*	00000000 __DTOR_END__
0080a930 g     F .text	00000014 puts
00802b58 g     F .text	000000a4 doPlayerBulletCollision
008026e0 g     F .text	000000a0 findSharkIfHit
008193e4 g     F .text	000001a4 find_first_empty_cluster
0080fbb8 g     F .text	000000b0 __ratio
00819ee0 g     F .text	000000c4 alt_up_sd_card_open_dev
00814b90 g     F .text	00000060 alt_up_audio_read_fifo_head
00815e9c g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00813d7c g     F .text	00000224 altera_avalon_jtag_uart_read
008015a8 g     F .text	0000004c freeBmps
0080a0c4 g     F .text	00000014 malloc
0080a85c g     F .text	00000034 _printf_r
0080983c g     F .text	00000008 __udivsi3
00812960 g     F .text	000000c0 isatty
0081d330 g     O .rodata	000000c8 __mprec_tens
00816528 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
0080f308 g     F .text	00000008 __locale_charset
00820dd0 g     O .bss	00000008 alt_timezone
0081c2b4 g     F .text	00000090 alt_icache_flush
00820db4 g     O .bss	00000004 __malloc_top_pad
00814d18 g     F .text	0000008c alt_up_av_config_read_data
0081f0f4 g     O .rwdata	00000004 __mb_cur_max
0080f310 g     F .text	0000000c _localeconv_r
008104d4 g     F .text	0000003c __i2b
0080ec78 g     F .text	0000049c __sfvwrite_r
008186c0 g     F .text	000000c0 get_dir_divider_location
00805e80 g     F .text	00000290 timer_test
00803c84 g     F .text	00000044 erasePlayer
0080a9d8 g     F .text	00000070 _sbrk_r
00816d0c g     F .text	000000d0 helper_plot_pixel
008061bc g     F .text	00000028 hasHardwareTimerExpired
00818360 g     F .text	000000d0 filename_to_upper_case
00820d60 g     O .bss	00000004 playerLaserColor
0081a90c g     F .text	00000090 alt_up_sd_card_set_attributes
008176d8 g     F .text	00000284 Read_File_Record_At_Offset
008031dc g     F .text	00000040 makeDownLeft
008114a8 g     F .text	00000078 _read_r
00820d54 g     O .bss	00000004 playerBulletList
0081dd64 g     O .rwdata	0000000c __lc_ctype
0081f10c g     O .rwdata	00000004 alt_max_fd
00814bf0 g     F .text	00000060 alt_up_audio_write_fifo_head
00809ea0 g     F .text	00000138 __unpack_d
00818f80 g     F .text	00000464 find_file_in_directory
00811228 g     F .text	00000110 _fclose_r
00820e5c g     O .bss	0000000c sharkDeath
0080e544 g     F .text	00000034 fflush
00820db8 g     O .bss	00000004 __malloc_max_sbrked_mem
008051cc g     F .text	00000094 readWord
00804b68 g     F .text	0000002c setCurrentPlayerScore
008127a0 g     F .text	000001c0 alt_irq_register
00804324 g     F .text	00000498 updateHighScoreBoard
008086dc g     F .text	00000054 __extendsfdf2
0081a06c g     F .text	00000074 alt_up_sd_card_is_FAT16
00808bc0 g     F .text	00000074 __adddf3
0080fa98 g     F .text	00000120 __b2d
00815ed0 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
00811afc g     F .text	000005b0 __umoddi3
00812b6c g     F .text	000000f0 lseek
0081f0e0 g     O .rwdata	00000004 __fdlib_version
0081f0e8 g     O .rwdata	00000004 _global_impure_ptr
00818a6c g     F .text	00000514 get_home_directory_cluster_for_file
00810850 g     F .text	000005f4 _realloc_r
0082b504 g       *ABS*	00000000 __bss_end
00816034 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
0081309c g     F .text	0000010c alt_tick
00800c54 g     F .text	00000020 stopTheme
00805c38 g     F .text	0000011c cleanupDeadSharks
00811520 g     F .text	000005dc __udivdi3
0081d3f8 g     O .rodata	00000028 __mprec_bigtens
00810730 g     F .text	00000120 __s2b
00820e9c g     O .bss	00001400 bulletArray
00812134 g     F .text	00000194 __floatunsidf
0080f9b8 g     F .text	00000060 __mcmp
00820e30 g     O .bss	00000004 current_sector_index
00814444 g     F .text	00000040 alt_up_audio_open_dev
00802f20 g     F .text	000000ec setupArcDisplacementFunction
0082229c g     O .bss	00006540 relativeNadoHit
008034e0 g     F .text	000000d4 handleSwitchInput
0080e6ac g     F .text	00000018 __fp_lock_all
00805334 g     F .text	000000b8 getWavFileLength
008003f8 g     F .text	000000cc loadLaser
00814880 g     F .text	00000070 alt_up_audio_play_r
00813004 g     F .text	00000098 alt_alarm_stop
00817444 g     F .text	000000e4 mark_cluster
00820de0 g     O .bss	00000004 alt_irq_active
0081f0d0 g     O .rwdata	00000004 AUDIO_NAME
008000ec g     F .exceptions	000000cc alt_irq_handler
0081dd70 g     O .rwdata	00000028 alt_dev_null
00819900 g     F .text	000001b8 convert_filename_to_name_extension
00805b70 g     F .text	000000c8 killShark
008080bc g     F .text	00000210 rint
00809ac4 g     F .text	000000c8 __unpack_f
00805854 g     F .text	00000050 moveAllSharks
008158d4 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00820d58 g     O .bss	00000004 sharkBulletList
0081b9d8 g     F .text	00000044 alt_dcache_flush_all
0080f884 g     F .text	00000070 __hi0bits
00820e04 g     O .bss	00000004 is_sd_card_formated_as_FAT16
00816c48 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
008095f0 g     F .text	000000d8 __fixdfsi
00819588 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
0081f124 g       *ABS*	00000000 __ram_rwdata_end
00803b1c g     F .text	0000002c eraseANado
00803420 g     F .text	000000c0 handleKeyInput
0081f104 g     O .rwdata	00000008 alt_dev_list
008131d8 g     F .text	00000120 write
00820e28 g     O .bss	00000004 device_pointer
0081441c g     F .text	00000028 alt_timestamp_freq
00816ddc g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
008050c8 g     F .text	00000060 openSdCard
00820e68 g     O .bss	0000000c laser
0081d55c g       *ABS*	00000000 __ram_rodata_end
00820cf4 g     O .bss	00000004 DEBUG
00812450 g     F .text	000000d4 fstat
00809470 g     F .text	00000088 __ledf2
00820d2c g     O .bss	00000004 pressBmp
00810610 g     F .text	00000120 __pow5mult
00820dc4 g     O .bss	00000004 __nlocale_changed
00809844 g     F .text	00000008 __umodsi3
008058a4 g     F .text	00000050 drawAllSharks
0082b504 g       *ABS*	00000000 end
00820d30 g     O .bss	00000004 pnadoaBmp
00809964 g     F .text	00000160 __pack_f
00815908 g     F .text	00000084 alt_up_char_buffer_init
00803a8c g     F .text	00000038 drawNado
00806188 g     F .text	00000034 isHardwareTimerRunning
00813880 g     F .text	000000b8 altera_avalon_jtag_uart_init
0081c7b8 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00803a70 g     F .text	0000001c initNado
00814254 g     F .text	00000088 alt_avalon_timer_sc_init
008098e4 g     F .text	00000080 __clzsi2
00820d00 g     O .bss	00000002 loaded
0081f0d8 g     O .rwdata	00000004 nadoDrawX
00813fa0 g     F .text	00000240 altera_avalon_jtag_uart_write
00805560 g     F .text	0000008c drawShark
0080e5d0 g     F .text	00000004 __sfp_lock_acquire
0080f560 g     F .text	000000e4 memchr
008154fc g     F .text	00000078 alt_up_character_lcd_write
0080ab70 g     F .text	00001eac ___vfprintf_internal_r
008064b4 g     F .text	00000044 printLine
0080e964 g     F .text	00000314 _free_r
00806210 g     F .text	00000094 initVga
00802c9c g     F .text	00000090 setupDisplacement
00802a08 g     F .text	000000a8 isBulletCollidingWithNado
0081c53c g     F .text	000001b0 __call_exitprocs
00820dc8 g     O .bss	00000004 __mlocale_changed
0081f0f0 g     O .rwdata	00000004 __malloc_sbrk_base
008001b8 g     F .text	0000004c _start
00803ac4 g     F .text	0000002c drawCommonNado
00820df0 g     O .bss	00000004 _alt_tick_rate
0080a960 g     F .text	00000078 rand
00802bfc g     F .text	000000a0 doNadoBulletCollision
00814a64 g     F .text	0000012c alt_up_audio_write_fifo
00801794 g     F .text	0000013c eraseBmp
008101a0 g     F .text	0000014c __lshift
00814cb4 g     F .text	00000064 alt_up_av_config_write_data
00820df4 g     O .bss	00000004 _alt_nticks
00812d68 g     F .text	00000120 read
0081338c g     F .text	00000374 alt_sys_init
00815760 g     F .text	000000b0 alt_up_character_lcd_shift_display
00808644 g     F .text	00000098 __floatsisf
0082978c g     O .bss	00000400 verticalDisplacementFunctionUp
00814960 g     F .text	00000104 alt_up_audio_read_fifo
00820dac g     O .bss	00000004 deadSharkList
008054cc g     F .text	00000094 getFreeShark
0081c404 g     F .text	00000134 __register_exitproc
00815374 g     F .text	00000064 alt_up_av_config_write_LTM_cfg_register
0081456c g     F .text	00000050 alt_up_audio_disable_write_interrupt
00802ab0 g     F .text	000000a8 doSharkBulletCollision
00820d34 g     O .bss	00000004 pixel_buffer_addr2
00820d38 g     O .bss	00000004 sharkBmp
00800b2c g     F .text	0000005c playLaser
008102ec g     F .text	000001e8 __multiply
00815810 g     F .text	00000090 alt_up_character_lcd_erase_pos
00806a78 g     F .text	00001300 __ieee754_pow
00813c14 g     F .text	00000074 altera_avalon_jtag_uart_close
008065f0 g     F .text	00000488 pow
0081d55c g       *ABS*	00000000 __ram_rwdata_start
0081c7bc g       *ABS*	00000000 __ram_rodata_start
00820e34 g     O .bss	00000028 __malloc_current_mallinfo
0080fe98 g     F .text	0000017c __d2b
00820e00 g     O .bss	00000004 initialized
00801c4c g     F .text	00000180 moveAllBullets
00813738 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0081c1fc g     F .text	000000b8 alt_get_fd
0082ad0c g     O .bss	00000014 search_data
0081b88c g     F .text	0000014c alt_busy_sleep
00809fd8 g     F .text	000000c8 __fpcmp_parts_d
00820e74 g     O .bss	0000000c theme
008287dc g     O .bss	000005c8 relativeSharkHit
008111b8 g     F .text	00000070 _close_r
008033c0 g     F .text	00000060 gameEndSequence
00820d04 g     O .bss	00000004 audioFileWordLength
00814520 g     F .text	0000004c alt_up_audio_enable_write_interrupt
00800b88 g     F .text	00000044 playPlayerDeath
0081c390 g     F .text	00000074 memcmp
008137e8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0082b504 g       *ABS*	00000000 __alt_stack_base
00813830 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
008028c4 g     F .text	00000144 isBulletCollidingWithPlayer
0080ca40 g     F .text	0000013c __swsetup_r
00803878 g     F .text	0000008c init
00820d3c g     O .bss	00000004 splashBmp
00808ff8 g     F .text	00000258 __divdf3
00805260 g     F .text	000000d4 readDWord
008144d0 g     F .text	00000050 alt_up_audio_disable_read_interrupt
0080e748 g     F .text	000000f0 __sfp
0082ad20 g     O .bss	00000054 boot_sector_data
0080fcfc g     F .text	00000058 __copybits
0081d95c g     O .rwdata	00000408 __malloc_av_
0080e5dc g     F .text	00000004 __sinit_lock_release
00808c34 g     F .text	000003c4 __muldf3
00810f70 g     F .text	00000060 __sread
008058f4 g     F .text	00000050 eraseAllSharks
0081d134 g     O .rodata	00000010 __thenan_sf
0081c0dc g     F .text	00000120 alt_find_file
0081ba1c g     F .text	000000b4 alt_dev_llist_insert
00812d28 g     F .text	00000020 __malloc_lock
00812f48 g     F .text	000000bc sbrk
00802780 g     F .text	00000144 isBulletCollidingWithShark
0080e348 g     F .text	000001fc _fflush_r
00811104 g     F .text	000000b4 _calloc_r
008007bc g     F .text	0000009c playAudio
00812584 g     F .text	0000021c gettimeofday
00820d40 g     O .bss	00000004 nnadoaBmp
00820da4 g     O .bss	00000004 gameScores
008061e4 g     F .text	0000002c startHardwareTimer
00820cec g       *ABS*	00000000 __bss_start
00820d44 g     O .bss	00000004 pnadobBmp
0080f7c4 g     F .text	00000098 memset
008062e8 g     F .text	0000003c swapBuffers
00803904 g     F .text	0000016c main
0081480c g     F .text	00000074 alt_up_audio_write_fifo_space
00820dec g     O .bss	00000004 alt_envp
00820dbc g     O .bss	00000004 __malloc_max_total_mem
00815e44 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0081598c g     F .text	00000040 alt_up_char_buffer_open_dev
00813790 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080a944 g     F .text	0000001c srand
0080315c g     F .text	00000040 makeDown
0081a99c g     F .text	0000008c alt_up_sd_card_get_attributes
00803778 g     F .text	00000078 delayUntilUPAndButtonPressed
00817178 g     F .text	000000c8 Write_Sector_Data
0081adbc g     F .text	00000624 alt_up_sd_card_write
008156b0 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
00810e84 g     F .text	00000008 __sclose
008080a4 g     F .text	00000008 matherr
01000000 g       *ABS*	00000000 __alt_heap_limit
00811338 g     F .text	00000014 fclose
0080309c g     F .text	00000040 makeRight
008142dc g     F .text	000000a4 alt_timestamp_start
0082b374 g     O .bss	00000190 _atexit0
0080cd94 g     F .text	000015b4 _dtoa_r
0080a0d8 g     F .text	00000740 _malloc_r
0080aabc g     F .text	0000005c time
0081f110 g     O .rwdata	00000004 alt_errno
00803ba0 g     F .text	00000044 drawInitialNado
00804bb8 g     F .text	0000002c setCurrentPlayerLives
0080f1dc g     F .text	000000b8 _fwalk
00801e50 g     F .text	00000084 eraseAllBullets
00801ed4 g     F .text	000000ac drawBullet
0080977c g     F .text	00000060 __divsi3
0081d144 g     O .rodata	00000014 __thenan_df
008154bc g     F .text	00000040 alt_up_character_lcd_open_dev
00820d08 g     O .bss	00000004 sdDev
0080e838 g     F .text	0000012c _malloc_trim_r
0081c7bc g       *ABS*	00000000 __CTOR_END__
00803f28 g     F .text	000000a8 defaultHighScoreBoard
00808058 g     F .text	0000001c finite
00820cec g     O .bss	00000004 audio
00820e0c g     O .bss	00000004 status_register
00815488 g     F .text	00000034 alt_up_character_lcd_init
008022a0 g     F .text	00000440 initCollision
008009f8 g     F .text	00000134 readWavFile
00810fd0 g     F .text	000000bc strcmp
008055ec g     F .text	0000005c eraseShark
00820e14 g     O .bss	00000004 command_register
00820d9c g     O .bss	00000004 nadoDrawY
0080300c g     F .text	00000090 setupNoDisplcementFunction
0081c7bc g       *ABS*	00000000 __flash_rodata_start
00803af0 g     F .text	0000002c drawANado
0081c7bc g       *ABS*	00000000 __DTOR_LIST__
0080329c g     F .text	00000124 setToRandomDisplacement
00804e6c g     F .text	0000025c drawInGameInfo
008084ac g     F .text	00000024 copysign
008092d8 g     F .text	00000088 __nedf2
00801f80 g     F .text	0000010c eraseBullet
00814c50 g     F .text	00000064 alt_up_av_config_open_dev
00813358 g     F .text	00000034 alt_irq_init
008063ec g     F .text	000000c8 drawLine
00812ee8 g     F .text	00000060 alt_release_fd
0080065c g     F .text	000000d0 loadTheme
0081738c g     F .text	000000b8 get_cluster_flag
008158a0 g     F .text	00000034 alt_up_character_lcd_cursor_off
0081d158 g     O .rodata	00000100 __clz_tab
0081795c g     F .text	000002b8 Write_File_Record_At_Offset
00820dcc g     O .bss	00000004 _PathLocale
00820d0c g     O .bss	00000004 somethingForIrq
00820d48 g     O .bss	00000004 pixel_buffer
0081c344 g     F .text	00000014 atexit
0081108c g     F .text	00000078 _write_r
00814eac g     F .text	00000038 alt_up_av_config_read_ready
0080543c g     F .text	00000090 initSharks
0080f3b0 g     F .text	0000001c setlocale
00817c14 g     F .text	00000648 Check_for_DOS_FAT
00819ab8 g     F .text	000002d4 create_file
00802e30 g     F .text	000000f0 setupCircularDisplacementFunction
0081f0e4 g     O .rwdata	00000004 _impure_ptr
00820e10 g     O .bss	00000004 CSD_register_w0
0080198c g     F .text	000002c0 createBullet
00820de4 g     O .bss	00000004 alt_argc
008082cc g     F .text	000001e0 scalbn
00820df8 g     O .bss	00000004 altera_avalon_timer_ts_base
0081bb94 g     F .text	00000064 _do_dtors
00829b8c g     O .bss	00000400 circularDisplacementFunction
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
0080fa18 g     F .text	00000080 __ulp
00810e44 g     F .text	00000040 __isinfd
0080e694 g     F .text	00000018 __fp_unlock_all
00804e40 g     F .text	0000002c clearScore
0081f0fc g     O .rwdata	00000008 alt_fs_list
00828da4 g     O .bss	000005e8 relativePlayerHit
00818430 g     F .text	00000290 check_file_name_for_FAT16_compliance
00820d4c g     O .bss	00000004 cnadoBmp
00820e80 g     O .bss	0000000c playerDeath
00820e1c g     O .bss	00000004 buffer_memory
00805168 g     F .text	00000030 closeFile
0081479c g     F .text	00000070 alt_up_audio_record_l
00829f8c g     O .bss	00000400 doNotMove
00806324 g     F .text	00000044 drawPixel
00820dd8 g     O .bss	00000008 alt_resettime
008080ac g     F .text	00000010 nan
00803de0 g     F .text	0000005c keepPlayerStationary
00800020 g       *ABS*	00000000 __ram_exceptions_start
00806110 g     F .text	00000030 initHardwareTimer
0080f31c g     F .text	00000010 localeconv
00814380 g     F .text	0000009c alt_timestamp
00803cc8 g     F .text	0000008c moveUpPlayer
00807d78 g     F .text	000002c8 __ieee754_sqrt
00814ddc g     F .text	00000038 alt_up_av_config_enable_interrupt
008014a4 g     F .text	00000104 parseBmps
0080162c g     F .text	00000168 drawBmp
00820e20 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
00814e44 g     F .text	00000068 alt_up_av_config_read_acknowledge
008151e4 g     F .text	00000064 alt_up_av_config_write_DC2_cfg_register
0081f124 g       *ABS*	00000000 _edata
0082b504 g       *ABS*	00000000 _end
00806558 g     F .text	00000098 convert24BitRgbTo16
0082ad74 g     O .bss	00000500 active_files
008001b8 g       *ABS*	00000000 __ram_exceptions_end
00804be4 g     F .text	00000024 getCurrentPlayerLives
00819d8c g     F .text	00000154 copy_file_record_name_to_string
00813c88 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080072c g     F .text	00000090 playAudioMono
0081825c g     F .text	00000104 Look_for_FAT16
008148f0 g     F .text	00000070 alt_up_audio_play_l
00810ef4 g     F .text	0000007c __swrite
0081f0ec g     O .rwdata	00000004 __malloc_trim_threshold
0081c0bc g     F .text	00000020 altera_nios2_qsys_irq_init
0081c358 g     F .text	00000038 exit
0080321c g     F .text	00000040 makeUpRight
00805d54 g     F .text	00000084 drawSplashScreen
0081a1b4 g     F .text	000003b0 alt_up_sd_card_find_next
0080f114 g     F .text	000000c8 _fwalk_reent
00810014 g     F .text	0000018c __mdiff
00815310 g     F .text	00000064 alt_up_av_config_read_LTM_cfg_register
0082a78c g     O .bss	00000580 sharkArray
008097dc g     F .text	00000060 __modsi3
0080319c g     F .text	00000040 makeDownRight
00817290 g     F .text	000000fc Read_Sector_Data
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080e5d4 g     F .text	00000004 __sfp_lock_release
00815574 g     F .text	00000078 alt_up_character_lcd_string
00820d10 g     O .bss	00000004 playedWords
00803e3c g     F .text	0000006c hitPlayer
00805dd8 g     F .text	00000080 swapSplashScreenText
0081c72c g     F .text	00000020 _exit
00808074 g     F .text	00000030 __isnand
0081b738 g     F .text	00000154 alt_alarm_start
00800590 g     F .text	000000cc loadSharkDeath
0080984c g     F .text	00000098 __muldi3
0081b5ac g     F .text	000000fc Read_Sector_Data_CRC
0081aa28 g     F .text	00000394 alt_up_sd_card_read
0080f3cc g     F .text	00000194 __smakebuf_r
0080aa48 g     F .text	00000074 strlen
0081bed4 g     F .text	00000188 open
00803c40 g     F .text	00000044 drawPlayer
008030dc g     F .text	00000040 makeLeft
008120ac g     F .text	00000088 __gedf2
0082a38c g     O .bss	00000400 arcDisplacementFunction
008062a4 g     F .text	00000044 clearScreen
00814f90 g     F .text	000000f8 alt_up_av_config_read_video_cfg_register
00804b30 g     F .text	00000038 updateCurrentPlayerScore
0081bc8c g     F .text	00000030 alt_icache_flush_all
00803b48 g     F .text	0000002c drawBNado
00800204 g     F .text	0000019c setupAudio
00815638 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0081f114 g     O .rwdata	00000004 alt_priority_mask
00820d50 g     O .bss	00000004 playerBmp
00805198 g     F .text	00000034 readByte
0080212c g     F .text	000000b4 deleteBullet
00801104 g     F .text	000003a0 parseBmp
00802d2c g     F .text	00000104 setupVerticalDisplacementFunction
008053ec g     F .text	00000050 readPastWavHeader
0080ca1c g     F .text	00000024 __vfprintf_internal
008152ac g     F .text	00000064 alt_up_av_config_write_D5M_cfg_register
00808b40 g     F .text	00000080 __subdf3
00820d14 g     O .bss	00000004 playCursor
0080325c g     F .text	00000040 makeUpLeft
0080f8f4 g     F .text	000000c4 __lo0bits
0081f11c g     O .rwdata	00000008 alt_alarm_list
00800de4 g     F .text	00000138 updateAudioWithVolume
0081bb30 g     F .text	00000064 _do_ctors
0080208c g     F .text	000000a0 moveBulletRight
008003a0 g     F .text	00000058 setupAudioInterrupt
00820d18 g     O .bss	00000002 status
00803be4 g     F .text	0000005c initPlayer
00806368 g     F .text	00000084 drawPixelFast
008122c8 g     F .text	000000fc close
00820cf0 g     O .bss	00000004 config
00800c10 g     F .text	00000044 playTheme
00812a80 g     F .text	00000080 alt_load
00814484 g     F .text	0000004c alt_up_audio_enable_read_interrupt
00815088 g     F .text	000000f8 alt_up_av_config_write_video_cfg_register
00809b8c g     F .text	00000314 __pack_d
008037f0 g     F .text	00000088 gameStart
00805944 g     F .text	0000022c createShark
00818780 g     F .text	000002ec match_file_record_to_name_ext
0080a0b0 g     F .text	00000014 free
0080e5d8 g     F .text	00000004 __sinit_lock_acquire
00810510 g     F .text	00000100 __multadd
0080f85c g     F .text	00000028 _Bfree
00815180 g     F .text	00000064 alt_up_av_config_read_DC2_cfg_register
008145bc g     F .text	0000003c alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406e14 	ori	at,at,440
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000171e 	bne	r2,zero,800188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c020f4 	movhi	r3,131
  800134:	18ec9d04 	addi	r3,r3,-19852
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11800017 	ldw	r6,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c020f4 	movhi	r3,131
  80014c:	18ec9d04 	addi	r3,r3,-19852
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	e17ffd17 	ldw	r5,-12(fp)
  800164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800168:	0005313a 	rdctl	r2,ipending
  80016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
  800170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800178:	e0bfff17 	ldw	r2,-4(fp)
  80017c:	1004c03a 	cmpne	r2,r2,zero
  800180:	103fe21e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800184:	00000706 	br	8001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800188:	e0bffe17 	ldw	r2,-8(fp)
  80018c:	1085883a 	add	r2,r2,r2
  800190:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800194:	e0bffd17 	ldw	r2,-12(fp)
  800198:	10800044 	addi	r2,r2,1
  80019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a0:	003fdd06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a4:	e037883a 	mov	sp,fp
  8001a8:	dfc00117 	ldw	ra,4(sp)
  8001ac:	df000017 	ldw	fp,0(sp)
  8001b0:	dec00204 	addi	sp,sp,8
  8001b4:	f800283a 	ret

Disassembly of section .text:

008001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b8:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
  8001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c4:	00bffd16 	blt	zero,r2,8001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c8:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001d0:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  8001d4:	d69c3314 	ori	gp,gp,28876
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d8:	008020b4 	movhi	r2,130
    ori r2, r2, %lo(__bss_start)
  8001dc:	10833b14 	ori	r2,r2,3308

    movhi r3, %hi(__bss_end)
  8001e0:	00c020b4 	movhi	r3,130
    ori r3, r3, %lo(__bss_end)
  8001e4:	18ed4114 	ori	r3,r3,46340

    beq r2, r3, 1f
  8001e8:	10c00326 	beq	r2,r3,8001f8 <_start+0x40>

0:
    stw zero, (r2)
  8001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f4:	10fffd36 	bltu	r2,r3,8001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f8:	0812a800 	call	812a80 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001fc:	0812cbc0 	call	812cbc <alt_main>

00800200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800200:	003fff06 	br	800200 <alt_after_alt_main>

00800204 <setupAudio>:
struct audioInfo theme;

volatile int somethingForIrq;

void setupAudio()
{
  800204:	defffc04 	addi	sp,sp,-16
  800208:	dfc00315 	stw	ra,12(sp)
  80020c:	df000215 	stw	fp,8(sp)
  800210:	df000204 	addi	fp,sp,8
	bool error = false;
  800214:	e03fff15 	stw	zero,-4(fp)
	config = (alt_up_av_config_dev *)alt_up_av_config_open_dev(CONFIG_NAME);
  800218:	d1200017 	ldw	r4,-32768(gp)
  80021c:	0814c500 	call	814c50 <alt_up_av_config_open_dev>
  800220:	d0a70915 	stw	r2,-25564(gp)
	if (config == NULL) {
  800224:	d0a70917 	ldw	r2,-25564(gp)
  800228:	1004c03a 	cmpne	r2,r2,zero
  80022c:	1000051e 	bne	r2,zero,800244 <setupAudio+0x40>
		printf("Error: audio video config could not be opened.\n");
  800230:	010020b4 	movhi	r4,130
  800234:	2131fb04 	addi	r4,r4,-14356
  800238:	080a9300 	call	80a930 <puts>
		error = true;
  80023c:	00800044 	movi	r2,1
  800240:	e0bfff15 	stw	r2,-4(fp)
	}
	while (!alt_up_av_config_read_ready(config)) {
  800244:	d1270917 	ldw	r4,-25564(gp)
  800248:	0814eac0 	call	814eac <alt_up_av_config_read_ready>
  80024c:	1005003a 	cmpeq	r2,r2,zero
  800250:	103ffc1e 	bne	r2,zero,800244 <setupAudio+0x40>
	}

	audio = (alt_up_audio_dev *)alt_up_audio_open_dev(AUDIO_NAME);
  800254:	d1200117 	ldw	r4,-32764(gp)
  800258:	08144440 	call	814444 <alt_up_audio_open_dev>
  80025c:	d0a70815 	stw	r2,-25568(gp)
	if (config == NULL) {
  800260:	d0a70917 	ldw	r2,-25564(gp)
  800264:	1004c03a 	cmpne	r2,r2,zero
  800268:	1000061e 	bne	r2,zero,800284 <setupAudio+0x80>
		printf("Error: audio codec could not be opened.\n");
  80026c:	010020b4 	movhi	r4,130
  800270:	21320704 	addi	r4,r4,-14308
  800274:	080a9300 	call	80a930 <puts>
		error = true;
  800278:	00800044 	movi	r2,1
  80027c:	e0bfff15 	stw	r2,-4(fp)
  800280:	00000606 	br	80029c <setupAudio+0x98>
	} else if (DEBUG == 1) {
  800284:	d0a70a17 	ldw	r2,-25560(gp)
  800288:	10800058 	cmpnei	r2,r2,1
  80028c:	1000031e 	bne	r2,zero,80029c <setupAudio+0x98>
		printf("Successfully opened audio codec.\n");
  800290:	010020b4 	movhi	r4,130
  800294:	21321104 	addi	r4,r4,-14268
  800298:	080a9300 	call	80a930 <puts>
	}
    int interruptStatus = setupAudioInterrupt(audio, somethingForIrq);
  80029c:	d1270817 	ldw	r4,-25568(gp)
  8002a0:	d1671017 	ldw	r5,-25536(gp)
  8002a4:	08003a00 	call	8003a0 <setupAudioInterrupt>
  8002a8:	e0bffe15 	stw	r2,-8(fp)

    if (interruptStatus < 0) {
  8002ac:	e0bffe17 	ldw	r2,-8(fp)
  8002b0:	1004403a 	cmpge	r2,r2,zero
  8002b4:	1000061e 	bne	r2,zero,8002d0 <setupAudio+0xcc>
		printf("Error: audio interrupt could not be setup.\n");
  8002b8:	010020b4 	movhi	r4,130
  8002bc:	21321a04 	addi	r4,r4,-14232
  8002c0:	080a9300 	call	80a930 <puts>
		error = true;
  8002c4:	00800044 	movi	r2,1
  8002c8:	e0bfff15 	stw	r2,-4(fp)
  8002cc:	00000606 	br	8002e8 <setupAudio+0xe4>
	} else if (DEBUG == 1) {
  8002d0:	d0a70a17 	ldw	r2,-25560(gp)
  8002d4:	10800058 	cmpnei	r2,r2,1
  8002d8:	1000031e 	bne	r2,zero,8002e8 <setupAudio+0xe4>
		printf("Successfully setup audio interrupts.\n");
  8002dc:	010020b4 	movhi	r4,130
  8002e0:	21322504 	addi	r4,r4,-14188
  8002e4:	080a9300 	call	80a930 <puts>
	}

    laser.mainBuffer = NULL;
  8002e8:	008020b4 	movhi	r2,130
  8002ec:	10839a04 	addi	r2,r2,3688
  8002f0:	10000015 	stw	zero,0(r2)
    laser.volumeBuffer = NULL;
  8002f4:	008020b4 	movhi	r2,130
  8002f8:	10839a04 	addi	r2,r2,3688
  8002fc:	10000115 	stw	zero,4(r2)
    loadLaser();
  800300:	08003f80 	call	8003f8 <loadLaser>
    playerDeath.mainBuffer = NULL;
  800304:	008020b4 	movhi	r2,130
  800308:	1083a004 	addi	r2,r2,3712
  80030c:	10000015 	stw	zero,0(r2)
    playerDeath.volumeBuffer = NULL;
  800310:	008020b4 	movhi	r2,130
  800314:	1083a004 	addi	r2,r2,3712
  800318:	10000115 	stw	zero,4(r2)
    loadPlayerDeath();
  80031c:	08004c40 	call	8004c4 <loadPlayerDeath>
    sharkDeath.mainBuffer = NULL;
  800320:	008020b4 	movhi	r2,130
  800324:	10839704 	addi	r2,r2,3676
  800328:	10000015 	stw	zero,0(r2)
    sharkDeath.volumeBuffer = NULL;
  80032c:	008020b4 	movhi	r2,130
  800330:	10839704 	addi	r2,r2,3676
  800334:	10000115 	stw	zero,4(r2)
    loadSharkDeath();
  800338:	08005900 	call	800590 <loadSharkDeath>
    theme.mainBuffer = NULL;
  80033c:	008020b4 	movhi	r2,130
  800340:	10839d04 	addi	r2,r2,3700
  800344:	10000015 	stw	zero,0(r2)
    theme.volumeBuffer = NULL;
  800348:	008020b4 	movhi	r2,130
  80034c:	10839d04 	addi	r2,r2,3700
  800350:	10000115 	stw	zero,4(r2)
    loadTheme();
  800354:	080065c0 	call	80065c <loadTheme>
    printf("finised loading sound buffers.\n");
  800358:	010020b4 	movhi	r4,130
  80035c:	21322f04 	addi	r4,r4,-14148
  800360:	080a9300 	call	80a930 <puts>

	status = NONE;
  800364:	d027130d 	sth	zero,-25524(gp)

	if (DEBUG == 1 && error == false) {
  800368:	d0a70a17 	ldw	r2,-25560(gp)
  80036c:	10800058 	cmpnei	r2,r2,1
  800370:	1000061e 	bne	r2,zero,80038c <setupAudio+0x188>
  800374:	e0bfff17 	ldw	r2,-4(fp)
  800378:	1004c03a 	cmpne	r2,r2,zero
  80037c:	1000031e 	bne	r2,zero,80038c <setupAudio+0x188>
		printf("Successfully setup sound.\n");
  800380:	010020b4 	movhi	r4,130
  800384:	21323704 	addi	r4,r4,-14116
  800388:	080a9300 	call	80a930 <puts>
	}
}
  80038c:	e037883a 	mov	sp,fp
  800390:	dfc00117 	ldw	ra,4(sp)
  800394:	df000017 	ldw	fp,0(sp)
  800398:	dec00204 	addi	sp,sp,8
  80039c:	f800283a 	ret

008003a0 <setupAudioInterrupt>:

int setupAudioInterrupt(alt_up_audio_dev *audio, volatile int somethingForIrq)
{
  8003a0:	defffb04 	addi	sp,sp,-20
  8003a4:	dfc00415 	stw	ra,16(sp)
  8003a8:	df000315 	stw	fp,12(sp)
  8003ac:	df000304 	addi	fp,sp,12
  8003b0:	e13ffe15 	stw	r4,-8(fp)
  8003b4:	e17fff15 	stw	r5,-4(fp)
    // Need to disable both audio interrupts before setting them up
    // otherwise you get stuck in them when they are setup
    alt_up_audio_disable_read_interrupt(audio);
  8003b8:	e13ffe17 	ldw	r4,-8(fp)
  8003bc:	08144d00 	call	8144d0 <alt_up_audio_disable_read_interrupt>
    alt_up_audio_disable_write_interrupt(audio);
  8003c0:	e13ffe17 	ldw	r4,-8(fp)
  8003c4:	081456c0 	call	81456c <alt_up_audio_disable_write_interrupt>

    void *irqInt = (void*)&somethingForIrq;
  8003c8:	e0bfff04 	addi	r2,fp,-4
  8003cc:	e0bffd15 	stw	r2,-12(fp)

	#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	return alt_ic_isr_register(AUDIO_0_IRQ_INTERRUPT_CONTROLLER_ID, AUDIO_0_IRQ, playSoundISR, irqInt, 0x0);
	#else
	return alt_irq_register(AUDIO_0_IRQ, irqInt, playSoundISR);
  8003d0:	010000c4 	movi	r4,3
  8003d4:	e17ffd17 	ldw	r5,-12(fp)
  8003d8:	01802034 	movhi	r6,128
  8003dc:	31831d04 	addi	r6,r6,3188
  8003e0:	08127a00 	call	8127a0 <alt_irq_register>
	#endif
}
  8003e4:	e037883a 	mov	sp,fp
  8003e8:	dfc00117 	ldw	ra,4(sp)
  8003ec:	df000017 	ldw	fp,0(sp)
  8003f0:	dec00204 	addi	sp,sp,8
  8003f4:	f800283a 	ret

008003f8 <loadLaser>:

void loadLaser() {
  8003f8:	defffe04 	addi	sp,sp,-8
  8003fc:	dfc00115 	stw	ra,4(sp)
  800400:	df000015 	stw	fp,0(sp)
  800404:	d839883a 	mov	fp,sp
    laser.bufferLength = 38384;
  800408:	00c020b4 	movhi	r3,130
  80040c:	18c39a04 	addi	r3,r3,3688
  800410:	00a57c14 	movui	r2,38384
  800414:	18800215 	stw	r2,8(r3)
	audioFileWordLength = laser.bufferLength;
  800418:	008020b4 	movhi	r2,130
  80041c:	10839a04 	addi	r2,r2,3688
  800420:	10800217 	ldw	r2,8(r2)
  800424:	d0a70e15 	stw	r2,-25544(gp)
	if (laser.mainBuffer == NULL || laser.volumeBuffer == NULL) {
  800428:	008020b4 	movhi	r2,130
  80042c:	10839a04 	addi	r2,r2,3688
  800430:	10800017 	ldw	r2,0(r2)
  800434:	1005003a 	cmpeq	r2,r2,zero
  800438:	1000051e 	bne	r2,zero,800450 <loadLaser+0x58>
  80043c:	008020b4 	movhi	r2,130
  800440:	10839a04 	addi	r2,r2,3688
  800444:	10800117 	ldw	r2,4(r2)
  800448:	1004c03a 	cmpne	r2,r2,zero
  80044c:	10000e1e 	bne	r2,zero,800488 <loadLaser+0x90>
		readWavFile("laserii.wav", laser.bufferLength);
  800450:	008020b4 	movhi	r2,130
  800454:	10839a04 	addi	r2,r2,3688
  800458:	11400217 	ldw	r5,8(r2)
  80045c:	010020b4 	movhi	r4,130
  800460:	21323e04 	addi	r4,r4,-14088
  800464:	08009f80 	call	8009f8 <readWavFile>
		//laserBuffer = audioBuffer;
		laser.mainBuffer = audioBuffer;
  800468:	d0e70b17 	ldw	r3,-25556(gp)
  80046c:	008020b4 	movhi	r2,130
  800470:	10839a04 	addi	r2,r2,3688
  800474:	10c00015 	stw	r3,0(r2)
		laser.volumeBuffer = audioVolumeBuffer;
  800478:	d0e70c17 	ldw	r3,-25552(gp)
  80047c:	008020b4 	movhi	r2,130
  800480:	10839a04 	addi	r2,r2,3688
  800484:	10c00115 	stw	r3,4(r2)
	}
	//audioBuffer = laserBuffer;
	audioBuffer = laser.mainBuffer;
  800488:	008020b4 	movhi	r2,130
  80048c:	10839a04 	addi	r2,r2,3688
  800490:	10800017 	ldw	r2,0(r2)
  800494:	d0a70b15 	stw	r2,-25556(gp)
	audioVolumeBuffer = laser.volumeBuffer;
  800498:	008020b4 	movhi	r2,130
  80049c:	10839a04 	addi	r2,r2,3688
  8004a0:	10800117 	ldw	r2,4(r2)
  8004a4:	d0a70c15 	stw	r2,-25552(gp)
	loaded = LASER;
  8004a8:	00800044 	movi	r2,1
  8004ac:	d0a70d0d 	sth	r2,-25548(gp)
}
  8004b0:	e037883a 	mov	sp,fp
  8004b4:	dfc00117 	ldw	ra,4(sp)
  8004b8:	df000017 	ldw	fp,0(sp)
  8004bc:	dec00204 	addi	sp,sp,8
  8004c0:	f800283a 	ret

008004c4 <loadPlayerDeath>:

void loadPlayerDeath() {
  8004c4:	defffe04 	addi	sp,sp,-8
  8004c8:	dfc00115 	stw	ra,4(sp)
  8004cc:	df000015 	stw	fp,0(sp)
  8004d0:	d839883a 	mov	fp,sp
	playerDeath.bufferLength = 0x0000DAFF / 2;
  8004d4:	00c020b4 	movhi	r3,130
  8004d8:	18c3a004 	addi	r3,r3,3712
  8004dc:	009b5fc4 	movi	r2,28031
  8004e0:	18800215 	stw	r2,8(r3)
	audioFileWordLength = playerDeath.bufferLength;
  8004e4:	008020b4 	movhi	r2,130
  8004e8:	1083a004 	addi	r2,r2,3712
  8004ec:	10800217 	ldw	r2,8(r2)
  8004f0:	d0a70e15 	stw	r2,-25544(gp)
	if (playerDeath.mainBuffer == NULL || playerDeath.volumeBuffer == NULL) {
  8004f4:	008020b4 	movhi	r2,130
  8004f8:	1083a004 	addi	r2,r2,3712
  8004fc:	10800017 	ldw	r2,0(r2)
  800500:	1005003a 	cmpeq	r2,r2,zero
  800504:	1000051e 	bne	r2,zero,80051c <loadPlayerDeath+0x58>
  800508:	008020b4 	movhi	r2,130
  80050c:	1083a004 	addi	r2,r2,3712
  800510:	10800117 	ldw	r2,4(r2)
  800514:	1004c03a 	cmpne	r2,r2,zero
  800518:	10000e1e 	bne	r2,zero,800554 <loadPlayerDeath+0x90>
		readWavFile("pdie.wav", playerDeath.bufferLength);
  80051c:	008020b4 	movhi	r2,130
  800520:	1083a004 	addi	r2,r2,3712
  800524:	11400217 	ldw	r5,8(r2)
  800528:	010020b4 	movhi	r4,130
  80052c:	21324104 	addi	r4,r4,-14076
  800530:	08009f80 	call	8009f8 <readWavFile>
		//playerDeathBuffer = audioBuffer;
		playerDeath.mainBuffer = audioBuffer;
  800534:	d0e70b17 	ldw	r3,-25556(gp)
  800538:	008020b4 	movhi	r2,130
  80053c:	1083a004 	addi	r2,r2,3712
  800540:	10c00015 	stw	r3,0(r2)
		playerDeath.volumeBuffer = audioVolumeBuffer;
  800544:	d0e70c17 	ldw	r3,-25552(gp)
  800548:	008020b4 	movhi	r2,130
  80054c:	1083a004 	addi	r2,r2,3712
  800550:	10c00115 	stw	r3,4(r2)
	}
	//audioBuffer = playerDeathBuffer;
	audioBuffer = playerDeath.mainBuffer;
  800554:	008020b4 	movhi	r2,130
  800558:	1083a004 	addi	r2,r2,3712
  80055c:	10800017 	ldw	r2,0(r2)
  800560:	d0a70b15 	stw	r2,-25556(gp)
	audioVolumeBuffer = playerDeath.volumeBuffer;
  800564:	008020b4 	movhi	r2,130
  800568:	1083a004 	addi	r2,r2,3712
  80056c:	10800117 	ldw	r2,4(r2)
  800570:	d0a70c15 	stw	r2,-25552(gp)
	loaded = PLAYER_DEATH;
  800574:	00800084 	movi	r2,2
  800578:	d0a70d0d 	sth	r2,-25548(gp)
}
  80057c:	e037883a 	mov	sp,fp
  800580:	dfc00117 	ldw	ra,4(sp)
  800584:	df000017 	ldw	fp,0(sp)
  800588:	dec00204 	addi	sp,sp,8
  80058c:	f800283a 	ret

00800590 <loadSharkDeath>:

void loadSharkDeath() {
  800590:	defffe04 	addi	sp,sp,-8
  800594:	dfc00115 	stw	ra,4(sp)
  800598:	df000015 	stw	fp,0(sp)
  80059c:	d839883a 	mov	fp,sp
	sharkDeath.bufferLength = 0x0000DAFF / 2;
  8005a0:	00c020b4 	movhi	r3,130
  8005a4:	18c39704 	addi	r3,r3,3676
  8005a8:	009b5fc4 	movi	r2,28031
  8005ac:	18800215 	stw	r2,8(r3)
	audioFileWordLength = sharkDeath.bufferLength;
  8005b0:	008020b4 	movhi	r2,130
  8005b4:	10839704 	addi	r2,r2,3676
  8005b8:	10800217 	ldw	r2,8(r2)
  8005bc:	d0a70e15 	stw	r2,-25544(gp)
	if (sharkDeath.mainBuffer == NULL || sharkDeath.volumeBuffer == NULL) {
  8005c0:	008020b4 	movhi	r2,130
  8005c4:	10839704 	addi	r2,r2,3676
  8005c8:	10800017 	ldw	r2,0(r2)
  8005cc:	1005003a 	cmpeq	r2,r2,zero
  8005d0:	1000051e 	bne	r2,zero,8005e8 <loadSharkDeath+0x58>
  8005d4:	008020b4 	movhi	r2,130
  8005d8:	10839704 	addi	r2,r2,3676
  8005dc:	10800117 	ldw	r2,4(r2)
  8005e0:	1004c03a 	cmpne	r2,r2,zero
  8005e4:	10000e1e 	bne	r2,zero,800620 <loadSharkDeath+0x90>
		readWavFile("sdie.wav", sharkDeath.bufferLength);
  8005e8:	008020b4 	movhi	r2,130
  8005ec:	10839704 	addi	r2,r2,3676
  8005f0:	11400217 	ldw	r5,8(r2)
  8005f4:	010020b4 	movhi	r4,130
  8005f8:	21324404 	addi	r4,r4,-14064
  8005fc:	08009f80 	call	8009f8 <readWavFile>
		//sharkDeathBuffer = audioBuffer;
		sharkDeath.mainBuffer = audioBuffer;
  800600:	d0e70b17 	ldw	r3,-25556(gp)
  800604:	008020b4 	movhi	r2,130
  800608:	10839704 	addi	r2,r2,3676
  80060c:	10c00015 	stw	r3,0(r2)
		sharkDeath.volumeBuffer = audioVolumeBuffer;
  800610:	d0e70c17 	ldw	r3,-25552(gp)
  800614:	008020b4 	movhi	r2,130
  800618:	10839704 	addi	r2,r2,3676
  80061c:	10c00115 	stw	r3,4(r2)
	}
	//audioBuffer = sharkDeathBuffer;
	audioBuffer = sharkDeath.mainBuffer;
  800620:	008020b4 	movhi	r2,130
  800624:	10839704 	addi	r2,r2,3676
  800628:	10800017 	ldw	r2,0(r2)
  80062c:	d0a70b15 	stw	r2,-25556(gp)
	audioVolumeBuffer = sharkDeath.volumeBuffer;
  800630:	008020b4 	movhi	r2,130
  800634:	10839704 	addi	r2,r2,3676
  800638:	10800117 	ldw	r2,4(r2)
  80063c:	d0a70c15 	stw	r2,-25552(gp)
	loaded = SHARK_DEATH;
  800640:	008000c4 	movi	r2,3
  800644:	d0a70d0d 	sth	r2,-25548(gp)
}
  800648:	e037883a 	mov	sp,fp
  80064c:	dfc00117 	ldw	ra,4(sp)
  800650:	df000017 	ldw	fp,0(sp)
  800654:	dec00204 	addi	sp,sp,8
  800658:	f800283a 	ret

0080065c <loadTheme>:

void loadTheme() {
  80065c:	defffe04 	addi	sp,sp,-8
  800660:	dfc00115 	stw	ra,4(sp)
  800664:	df000015 	stw	fp,0(sp)
  800668:	d839883a 	mov	fp,sp
	theme.bufferLength = 0x00063E00 / 2;
  80066c:	00c020b4 	movhi	r3,130
  800670:	18c39d04 	addi	r3,r3,3700
  800674:	008000f4 	movhi	r2,3
  800678:	1087c004 	addi	r2,r2,7936
  80067c:	18800215 	stw	r2,8(r3)
	audioFileWordLength = theme.bufferLength;
  800680:	008020b4 	movhi	r2,130
  800684:	10839d04 	addi	r2,r2,3700
  800688:	10800217 	ldw	r2,8(r2)
  80068c:	d0a70e15 	stw	r2,-25544(gp)
	if (theme.mainBuffer == NULL || theme.volumeBuffer == NULL) {
  800690:	008020b4 	movhi	r2,130
  800694:	10839d04 	addi	r2,r2,3700
  800698:	10800017 	ldw	r2,0(r2)
  80069c:	1005003a 	cmpeq	r2,r2,zero
  8006a0:	1000051e 	bne	r2,zero,8006b8 <loadTheme+0x5c>
  8006a4:	008020b4 	movhi	r2,130
  8006a8:	10839d04 	addi	r2,r2,3700
  8006ac:	10800117 	ldw	r2,4(r2)
  8006b0:	1004c03a 	cmpne	r2,r2,zero
  8006b4:	10000e1e 	bne	r2,zero,8006f0 <loadTheme+0x94>
		readWavFile("theme.wav", theme.bufferLength);
  8006b8:	008020b4 	movhi	r2,130
  8006bc:	10839d04 	addi	r2,r2,3700
  8006c0:	11400217 	ldw	r5,8(r2)
  8006c4:	010020b4 	movhi	r4,130
  8006c8:	21324704 	addi	r4,r4,-14052
  8006cc:	08009f80 	call	8009f8 <readWavFile>
		//themeBuffer = audioBuffer;
		theme.mainBuffer = audioBuffer;
  8006d0:	d0e70b17 	ldw	r3,-25556(gp)
  8006d4:	008020b4 	movhi	r2,130
  8006d8:	10839d04 	addi	r2,r2,3700
  8006dc:	10c00015 	stw	r3,0(r2)
		theme.volumeBuffer = audioVolumeBuffer;
  8006e0:	d0e70c17 	ldw	r3,-25552(gp)
  8006e4:	008020b4 	movhi	r2,130
  8006e8:	10839d04 	addi	r2,r2,3700
  8006ec:	10c00115 	stw	r3,4(r2)
	}
	//audioBuffer = themeBuffer;
	audioBuffer = theme.mainBuffer;
  8006f0:	008020b4 	movhi	r2,130
  8006f4:	10839d04 	addi	r2,r2,3700
  8006f8:	10800017 	ldw	r2,0(r2)
  8006fc:	d0a70b15 	stw	r2,-25556(gp)
	audioVolumeBuffer = theme.volumeBuffer;
  800700:	008020b4 	movhi	r2,130
  800704:	10839d04 	addi	r2,r2,3700
  800708:	10800117 	ldw	r2,4(r2)
  80070c:	d0a70c15 	stw	r2,-25552(gp)
	loaded = THEME;
  800710:	00800104 	movi	r2,4
  800714:	d0a70d0d 	sth	r2,-25548(gp)
}
  800718:	e037883a 	mov	sp,fp
  80071c:	dfc00117 	ldw	ra,4(sp)
  800720:	df000017 	ldw	fp,0(sp)
  800724:	dec00204 	addi	sp,sp,8
  800728:	f800283a 	ret

0080072c <playAudioMono>:

void playAudioMono(int length) {
  80072c:	defffb04 	addi	sp,sp,-20
  800730:	dfc00415 	stw	ra,16(sp)
  800734:	df000315 	stw	fp,12(sp)
  800738:	df000304 	addi	fp,sp,12
  80073c:	e13fff15 	stw	r4,-4(fp)
	if (DEBUG == 1) {
  800740:	d0a70a17 	ldw	r2,-25560(gp)
  800744:	10800058 	cmpnei	r2,r2,1
  800748:	1000031e 	bne	r2,zero,800758 <playAudioMono+0x2c>
		printf("Playing audio.\n");
  80074c:	010020b4 	movhi	r4,130
  800750:	21324a04 	addi	r4,r4,-14040
  800754:	080a9300 	call	80a930 <puts>
	}
	int left = alt_up_audio_write_fifo(audio, (unsigned int *)playCursor, length, ALT_UP_AUDIO_LEFT);
  800758:	d1270817 	ldw	r4,-25568(gp)
  80075c:	d0a71217 	ldw	r2,-25528(gp)
  800760:	100b883a 	mov	r5,r2
  800764:	e1bfff17 	ldw	r6,-4(fp)
  800768:	000f883a 	mov	r7,zero
  80076c:	0814a640 	call	814a64 <alt_up_audio_write_fifo>
  800770:	e0bffe15 	stw	r2,-8(fp)
	int right = alt_up_audio_write_fifo(audio, (unsigned int *)playCursor, length, ALT_UP_AUDIO_RIGHT);
  800774:	d1270817 	ldw	r4,-25568(gp)
  800778:	d0a71217 	ldw	r2,-25528(gp)
  80077c:	100b883a 	mov	r5,r2
  800780:	e1bfff17 	ldw	r6,-4(fp)
  800784:	01c00044 	movi	r7,1
  800788:	0814a640 	call	814a64 <alt_up_audio_write_fifo>
  80078c:	e0bffd15 	stw	r2,-12(fp)
	left++;
  800790:	e0bffe17 	ldw	r2,-8(fp)
  800794:	10800044 	addi	r2,r2,1
  800798:	e0bffe15 	stw	r2,-8(fp)
	right++;
  80079c:	e0bffd17 	ldw	r2,-12(fp)
  8007a0:	10800044 	addi	r2,r2,1
  8007a4:	e0bffd15 	stw	r2,-12(fp)
	//playAudio(buffer, length, buffer, length);
}
  8007a8:	e037883a 	mov	sp,fp
  8007ac:	dfc00117 	ldw	ra,4(sp)
  8007b0:	df000017 	ldw	fp,0(sp)
  8007b4:	dec00204 	addi	sp,sp,8
  8007b8:	f800283a 	ret

008007bc <playAudio>:

void playAudio(unsigned int *leftBuffer, int leftLength, unsigned int *rightBuffer, int rightLength) {
  8007bc:	defff804 	addi	sp,sp,-32
  8007c0:	dfc00715 	stw	ra,28(sp)
  8007c4:	df000615 	stw	fp,24(sp)
  8007c8:	df000604 	addi	fp,sp,24
  8007cc:	e13ffc15 	stw	r4,-16(fp)
  8007d0:	e17ffd15 	stw	r5,-12(fp)
  8007d4:	e1bffe15 	stw	r6,-8(fp)
  8007d8:	e1ffff15 	stw	r7,-4(fp)
	int leftWritten = alt_up_audio_write_fifo(audio, leftBuffer, leftLength, ALT_UP_AUDIO_LEFT);
  8007dc:	d1270817 	ldw	r4,-25568(gp)
  8007e0:	e17ffc17 	ldw	r5,-16(fp)
  8007e4:	e1bffd17 	ldw	r6,-12(fp)
  8007e8:	000f883a 	mov	r7,zero
  8007ec:	0814a640 	call	814a64 <alt_up_audio_write_fifo>
  8007f0:	e0bffb15 	stw	r2,-20(fp)
	if (DEBUG == 1) {
  8007f4:	d0a70a17 	ldw	r2,-25560(gp)
  8007f8:	10800058 	cmpnei	r2,r2,1
  8007fc:	1000041e 	bne	r2,zero,800810 <playAudio+0x54>
		printf("Wrote %d to left audio FIFO. with value\n", leftWritten);
  800800:	010020b4 	movhi	r4,130
  800804:	21324e04 	addi	r4,r4,-14024
  800808:	e17ffb17 	ldw	r5,-20(fp)
  80080c:	080a8180 	call	80a818 <printf>
	}

	int rightWritten = alt_up_audio_write_fifo(audio, rightBuffer, rightLength, ALT_UP_AUDIO_RIGHT);
  800810:	d1270817 	ldw	r4,-25568(gp)
  800814:	e17ffe17 	ldw	r5,-8(fp)
  800818:	e1bfff17 	ldw	r6,-4(fp)
  80081c:	01c00044 	movi	r7,1
  800820:	0814a640 	call	814a64 <alt_up_audio_write_fifo>
  800824:	e0bffa15 	stw	r2,-24(fp)
	if (DEBUG == 1) {
  800828:	d0a70a17 	ldw	r2,-25560(gp)
  80082c:	10800058 	cmpnei	r2,r2,1
  800830:	1000041e 	bne	r2,zero,800844 <playAudio+0x88>
		printf("Wrote %d to right audio FIFO.\n", rightWritten);
  800834:	010020b4 	movhi	r4,130
  800838:	21325904 	addi	r4,r4,-13980
  80083c:	e17ffa17 	ldw	r5,-24(fp)
  800840:	080a8180 	call	80a818 <printf>
	}
}
  800844:	e037883a 	mov	sp,fp
  800848:	dfc00117 	ldw	ra,4(sp)
  80084c:	df000017 	ldw	fp,0(sp)
  800850:	dec00204 	addi	sp,sp,8
  800854:	f800283a 	ret

00800858 <audioTest>:

void audioTest()
{
  800858:	defff504 	addi	sp,sp,-44
  80085c:	dfc00a15 	stw	ra,40(sp)
  800860:	df000915 	stw	fp,36(sp)
  800864:	df000904 	addi	fp,sp,36
	setupAudio();
  800868:	08002040 	call	800204 <setupAudio>
	printf("Starting audio test\n");
  80086c:	010020b4 	movhi	r4,130
  800870:	21326104 	addi	r4,r4,-13948
  800874:	080a9300 	call	80a930 <puts>
	int length = 8;
  800878:	00800204 	movi	r2,8
  80087c:	e0bffb15 	stw	r2,-20(fp)
	unsigned int right [length];
  800880:	e0bffb17 	ldw	r2,-20(fp)
  800884:	1085883a 	add	r2,r2,r2
  800888:	1085883a 	add	r2,r2,r2
  80088c:	108000c4 	addi	r2,r2,3
  800890:	108000c4 	addi	r2,r2,3
  800894:	1004d0ba 	srli	r2,r2,2
  800898:	1085883a 	add	r2,r2,r2
  80089c:	1085883a 	add	r2,r2,r2
  8008a0:	d8b7c83a 	sub	sp,sp,r2
  8008a4:	e6ffff15 	stw	sp,-4(fp)
  8008a8:	e0ffff17 	ldw	r3,-4(fp)
  8008ac:	188000c4 	addi	r2,r3,3
  8008b0:	1004d0ba 	srli	r2,r2,2
  8008b4:	1085883a 	add	r2,r2,r2
  8008b8:	1085883a 	add	r2,r2,r2
  8008bc:	e0bfff15 	stw	r2,-4(fp)
  8008c0:	e0bfff17 	ldw	r2,-4(fp)
  8008c4:	e0bffd15 	stw	r2,-12(fp)
	unsigned int left [length];
  8008c8:	e0bffb17 	ldw	r2,-20(fp)
  8008cc:	1085883a 	add	r2,r2,r2
  8008d0:	1085883a 	add	r2,r2,r2
  8008d4:	108000c4 	addi	r2,r2,3
  8008d8:	108000c4 	addi	r2,r2,3
  8008dc:	1004d0ba 	srli	r2,r2,2
  8008e0:	1085883a 	add	r2,r2,r2
  8008e4:	1085883a 	add	r2,r2,r2
  8008e8:	d8b7c83a 	sub	sp,sp,r2
  8008ec:	e6fffe15 	stw	sp,-8(fp)
  8008f0:	e0fffe17 	ldw	r3,-8(fp)
  8008f4:	188000c4 	addi	r2,r3,3
  8008f8:	1004d0ba 	srli	r2,r2,2
  8008fc:	1085883a 	add	r2,r2,r2
  800900:	1085883a 	add	r2,r2,r2
  800904:	e0bffe15 	stw	r2,-8(fp)
  800908:	e0bffe17 	ldw	r2,-8(fp)
  80090c:	e0bffc15 	stw	r2,-16(fp)
	int i;

	for (i = 0; i < length; i++) {
  800910:	e03ffa15 	stw	zero,-24(fp)
  800914:	00001b06 	br	800984 <audioTest+0x12c>
		right[i] = (i * i * i) & 0x0000FFFF;
  800918:	e17ffa17 	ldw	r5,-24(fp)
  80091c:	e0fffa17 	ldw	r3,-24(fp)
  800920:	e0bffa17 	ldw	r2,-24(fp)
  800924:	1887383a 	mul	r3,r3,r2
  800928:	e0bffa17 	ldw	r2,-24(fp)
  80092c:	1885383a 	mul	r2,r3,r2
  800930:	113fffcc 	andi	r4,r2,65535
  800934:	e0fffd17 	ldw	r3,-12(fp)
  800938:	2945883a 	add	r2,r5,r5
  80093c:	1085883a 	add	r2,r2,r2
  800940:	10c5883a 	add	r2,r2,r3
  800944:	11000015 	stw	r4,0(r2)
		left[i] = right[i];
  800948:	e17ffa17 	ldw	r5,-24(fp)
  80094c:	e0bffa17 	ldw	r2,-24(fp)
  800950:	e0fffd17 	ldw	r3,-12(fp)
  800954:	1085883a 	add	r2,r2,r2
  800958:	1085883a 	add	r2,r2,r2
  80095c:	10c5883a 	add	r2,r2,r3
  800960:	11000017 	ldw	r4,0(r2)
  800964:	e0fffc17 	ldw	r3,-16(fp)
  800968:	2945883a 	add	r2,r5,r5
  80096c:	1085883a 	add	r2,r2,r2
  800970:	10c5883a 	add	r2,r2,r3
  800974:	11000015 	stw	r4,0(r2)
	int length = 8;
	unsigned int right [length];
	unsigned int left [length];
	int i;

	for (i = 0; i < length; i++) {
  800978:	e0bffa17 	ldw	r2,-24(fp)
  80097c:	10800044 	addi	r2,r2,1
  800980:	e0bffa15 	stw	r2,-24(fp)
  800984:	e0fffa17 	ldw	r3,-24(fp)
  800988:	e0bffb17 	ldw	r2,-20(fp)
  80098c:	18bfe216 	blt	r3,r2,800918 <audioTest+0xc0>
		right[i] = (i * i * i) & 0x0000FFFF;
		left[i] = right[i];
	}

	unsigned int *rightBuffer = right;
  800990:	e0bffd17 	ldw	r2,-12(fp)
  800994:	e0bff915 	stw	r2,-28(fp)
	unsigned int *leftBuffer = left;
  800998:	e0bffc17 	ldw	r2,-16(fp)
  80099c:	e0bff815 	stw	r2,-32(fp)

	//sin (param*PI/180); for degrees, it uses radians

	int free = alt_up_audio_write_fifo_space(audio, ALT_UP_AUDIO_RIGHT);
  8009a0:	d1270817 	ldw	r4,-25568(gp)
  8009a4:	01400044 	movi	r5,1
  8009a8:	081480c0 	call	81480c <alt_up_audio_write_fifo_space>
  8009ac:	e0bff715 	stw	r2,-36(fp)
	printf("%d words free in right FIFO\n", free);
  8009b0:	010020b4 	movhi	r4,130
  8009b4:	21326604 	addi	r4,r4,-13928
  8009b8:	e17ff717 	ldw	r5,-36(fp)
  8009bc:	080a8180 	call	80a818 <printf>
  8009c0:	00000006 	br	8009c4 <audioTest+0x16c>

	for (;;) {
		free = alt_up_audio_write_fifo_space(audio, ALT_UP_AUDIO_RIGHT);
  8009c4:	d1270817 	ldw	r4,-25568(gp)
  8009c8:	01400044 	movi	r5,1
  8009cc:	081480c0 	call	81480c <alt_up_audio_write_fifo_space>
  8009d0:	e0bff715 	stw	r2,-36(fp)
		//printf("%d words free in right FIFO\n", free);
		if (free >= length) {
  8009d4:	e0fff717 	ldw	r3,-36(fp)
  8009d8:	e0bffb17 	ldw	r2,-20(fp)
  8009dc:	18bff916 	blt	r3,r2,8009c4 <audioTest+0x16c>
			//printf("Playing audio\n");
			playAudio(leftBuffer, length, rightBuffer, length);
  8009e0:	e13ff817 	ldw	r4,-32(fp)
  8009e4:	e17ffb17 	ldw	r5,-20(fp)
  8009e8:	e1bff917 	ldw	r6,-28(fp)
  8009ec:	e1fffb17 	ldw	r7,-20(fp)
  8009f0:	08007bc0 	call	8007bc <playAudio>
		}
	}
  8009f4:	003ff306 	br	8009c4 <audioTest+0x16c>

008009f8 <readWavFile>:
}

void readWavFile(char *wavFileName, unsigned int fileWordLength) {
  8009f8:	defff904 	addi	sp,sp,-28
  8009fc:	dfc00615 	stw	ra,24(sp)
  800a00:	df000515 	stw	fp,20(sp)
  800a04:	df000504 	addi	fp,sp,20
  800a08:	e13ffe15 	stw	r4,-8(fp)
  800a0c:	e17fff15 	stw	r5,-4(fp)
	audioBuffer = malloc(sizeof(unsigned int) * fileWordLength);
  800a10:	e0bfff17 	ldw	r2,-4(fp)
  800a14:	1085883a 	add	r2,r2,r2
  800a18:	1085883a 	add	r2,r2,r2
  800a1c:	1009883a 	mov	r4,r2
  800a20:	080a0c40 	call	80a0c4 <malloc>
  800a24:	d0a70b15 	stw	r2,-25556(gp)
	audioVolumeBuffer = malloc(sizeof(unsigned int) * fileWordLength);
  800a28:	e0bfff17 	ldw	r2,-4(fp)
  800a2c:	1085883a 	add	r2,r2,r2
  800a30:	1085883a 	add	r2,r2,r2
  800a34:	1009883a 	mov	r4,r2
  800a38:	080a0c40 	call	80a0c4 <malloc>
  800a3c:	d0a70c15 	stw	r2,-25552(gp)
	if (audioBuffer == NULL || audioVolumeBuffer == NULL) {
  800a40:	d0a70b17 	ldw	r2,-25556(gp)
  800a44:	1005003a 	cmpeq	r2,r2,zero
  800a48:	1000031e 	bne	r2,zero,800a58 <readWavFile+0x60>
  800a4c:	d0a70c17 	ldw	r2,-25552(gp)
  800a50:	1004c03a 	cmpne	r2,r2,zero
  800a54:	1000031e 	bne	r2,zero,800a64 <readWavFile+0x6c>
		printf("Error: insufficient memory to load audio file into memory.\n");
  800a58:	010020b4 	movhi	r4,130
  800a5c:	21326e04 	addi	r4,r4,-13896
  800a60:	080a9300 	call	80a930 <puts>
	}

	short int fileHandle = openFile(wavFileName);
  800a64:	e13ffe17 	ldw	r4,-8(fp)
  800a68:	08051280 	call	805128 <openFile>
  800a6c:	e0bffd0d 	sth	r2,-12(fp)
	if (fileHandle == -1) {
  800a70:	e0bffd0f 	ldh	r2,-12(fp)
  800a74:	10bfffd8 	cmpnei	r2,r2,-1
  800a78:	1000051e 	bne	r2,zero,800a90 <readWavFile+0x98>
		printf("Error opening %s\n", wavFileName);
  800a7c:	010020b4 	movhi	r4,130
  800a80:	21327d04 	addi	r4,r4,-13836
  800a84:	e17ffe17 	ldw	r5,-8(fp)
  800a88:	080a8180 	call	80a818 <printf>
		return;
  800a8c:	00002206 	br	800b18 <readWavFile+0x120>
	}

	readPastWavHeader(fileHandle);
  800a90:	e13ffd0f 	ldh	r4,-12(fp)
  800a94:	08053ec0 	call	8053ec <readPastWavHeader>

	unsigned int i;
	unsigned int word;
	for (i = 0; i < fileWordLength; i++) {
  800a98:	e03ffc15 	stw	zero,-16(fp)
  800a9c:	00001906 	br	800b04 <readWavFile+0x10c>
		word = readWord(fileHandle);
  800aa0:	e13ffd0f 	ldh	r4,-12(fp)
  800aa4:	08051cc0 	call	8051cc <readWord>
  800aa8:	10bfffcc 	andi	r2,r2,65535
  800aac:	10a0001c 	xori	r2,r2,32768
  800ab0:	10a00004 	addi	r2,r2,-32768
  800ab4:	e0bffb15 	stw	r2,-20(fp)
		audioBuffer[i] = word;
  800ab8:	e0bffc17 	ldw	r2,-16(fp)
  800abc:	1085883a 	add	r2,r2,r2
  800ac0:	1085883a 	add	r2,r2,r2
  800ac4:	1007883a 	mov	r3,r2
  800ac8:	d0a70b17 	ldw	r2,-25556(gp)
  800acc:	1887883a 	add	r3,r3,r2
  800ad0:	e0bffb17 	ldw	r2,-20(fp)
  800ad4:	18800015 	stw	r2,0(r3)
		audioVolumeBuffer[i] = word;
  800ad8:	e0bffc17 	ldw	r2,-16(fp)
  800adc:	1085883a 	add	r2,r2,r2
  800ae0:	1085883a 	add	r2,r2,r2
  800ae4:	1007883a 	mov	r3,r2
  800ae8:	d0a70c17 	ldw	r2,-25552(gp)
  800aec:	1887883a 	add	r3,r3,r2
  800af0:	e0bffb17 	ldw	r2,-20(fp)
  800af4:	18800015 	stw	r2,0(r3)

	readPastWavHeader(fileHandle);

	unsigned int i;
	unsigned int word;
	for (i = 0; i < fileWordLength; i++) {
  800af8:	e0bffc17 	ldw	r2,-16(fp)
  800afc:	10800044 	addi	r2,r2,1
  800b00:	e0bffc15 	stw	r2,-16(fp)
  800b04:	e0fffc17 	ldw	r3,-16(fp)
  800b08:	e0bfff17 	ldw	r2,-4(fp)
  800b0c:	18bfe436 	bltu	r3,r2,800aa0 <readWavFile+0xa8>
		audioVolumeBuffer[i] = word;
		//printf("0x%x ", (int)word > 0 ? word : -1 * word);
	}
	//printf("reached EOF\n");

	closeFile(fileHandle);
  800b10:	e13ffd0f 	ldh	r4,-12(fp)
  800b14:	08051680 	call	805168 <closeFile>
	return;
}
  800b18:	e037883a 	mov	sp,fp
  800b1c:	dfc00117 	ldw	ra,4(sp)
  800b20:	df000017 	ldw	fp,0(sp)
  800b24:	dec00204 	addi	sp,sp,8
  800b28:	f800283a 	ret

00800b2c <playLaser>:

// Plays laser once, using interrupts
void playLaser(void) {
  800b2c:	defffe04 	addi	sp,sp,-8
  800b30:	dfc00115 	stw	ra,4(sp)
  800b34:	df000015 	stw	fp,0(sp)
  800b38:	d839883a 	mov	fp,sp
	if (DEBUG == 1) {
  800b3c:	d0a70a17 	ldw	r2,-25560(gp)
  800b40:	10800058 	cmpnei	r2,r2,1
  800b44:	1000031e 	bne	r2,zero,800b54 <playLaser+0x28>
		printf("Playing laser via interrupt.\n");
  800b48:	010020b4 	movhi	r4,130
  800b4c:	21328204 	addi	r4,r4,-13816
  800b50:	080a9300 	call	80a930 <puts>
	}
	loadLaser();
  800b54:	08003f80 	call	8003f8 <loadLaser>
	status = LASER;
  800b58:	00800044 	movi	r2,1
  800b5c:	d0a7130d 	sth	r2,-25524(gp)
	playCursor = audioVolumeBuffer;
  800b60:	d0a70c17 	ldw	r2,-25552(gp)
  800b64:	d0a71215 	stw	r2,-25528(gp)
	playedWords = 0;
  800b68:	d0271115 	stw	zero,-25532(gp)
	alt_up_audio_enable_write_interrupt(audio);
  800b6c:	d1270817 	ldw	r4,-25568(gp)
  800b70:	08145200 	call	814520 <alt_up_audio_enable_write_interrupt>
}
  800b74:	e037883a 	mov	sp,fp
  800b78:	dfc00117 	ldw	ra,4(sp)
  800b7c:	df000017 	ldw	fp,0(sp)
  800b80:	dec00204 	addi	sp,sp,8
  800b84:	f800283a 	ret

00800b88 <playPlayerDeath>:

void playPlayerDeath(void) {
  800b88:	defffe04 	addi	sp,sp,-8
  800b8c:	dfc00115 	stw	ra,4(sp)
  800b90:	df000015 	stw	fp,0(sp)
  800b94:	d839883a 	mov	fp,sp
	loadPlayerDeath();
  800b98:	08004c40 	call	8004c4 <loadPlayerDeath>
	status = PLAYER_DEATH;
  800b9c:	00800084 	movi	r2,2
  800ba0:	d0a7130d 	sth	r2,-25524(gp)
	playCursor = audioVolumeBuffer;
  800ba4:	d0a70c17 	ldw	r2,-25552(gp)
  800ba8:	d0a71215 	stw	r2,-25528(gp)
	playedWords = 0;
  800bac:	d0271115 	stw	zero,-25532(gp)
	alt_up_audio_enable_write_interrupt(audio);
  800bb0:	d1270817 	ldw	r4,-25568(gp)
  800bb4:	08145200 	call	814520 <alt_up_audio_enable_write_interrupt>
}
  800bb8:	e037883a 	mov	sp,fp
  800bbc:	dfc00117 	ldw	ra,4(sp)
  800bc0:	df000017 	ldw	fp,0(sp)
  800bc4:	dec00204 	addi	sp,sp,8
  800bc8:	f800283a 	ret

00800bcc <playSharkDeath>:

void playSharkDeath(void) {
  800bcc:	defffe04 	addi	sp,sp,-8
  800bd0:	dfc00115 	stw	ra,4(sp)
  800bd4:	df000015 	stw	fp,0(sp)
  800bd8:	d839883a 	mov	fp,sp
	loadSharkDeath();
  800bdc:	08005900 	call	800590 <loadSharkDeath>
	status = SHARK_DEATH;
  800be0:	008000c4 	movi	r2,3
  800be4:	d0a7130d 	sth	r2,-25524(gp)
	playCursor = audioVolumeBuffer;
  800be8:	d0a70c17 	ldw	r2,-25552(gp)
  800bec:	d0a71215 	stw	r2,-25528(gp)
	playedWords = 0;
  800bf0:	d0271115 	stw	zero,-25532(gp)
	alt_up_audio_enable_write_interrupt(audio);
  800bf4:	d1270817 	ldw	r4,-25568(gp)
  800bf8:	08145200 	call	814520 <alt_up_audio_enable_write_interrupt>
}
  800bfc:	e037883a 	mov	sp,fp
  800c00:	dfc00117 	ldw	ra,4(sp)
  800c04:	df000017 	ldw	fp,0(sp)
  800c08:	dec00204 	addi	sp,sp,8
  800c0c:	f800283a 	ret

00800c10 <playTheme>:

void playTheme(void) {
  800c10:	defffe04 	addi	sp,sp,-8
  800c14:	dfc00115 	stw	ra,4(sp)
  800c18:	df000015 	stw	fp,0(sp)
  800c1c:	d839883a 	mov	fp,sp
	loadTheme();
  800c20:	080065c0 	call	80065c <loadTheme>
	status = THEME;
  800c24:	00800104 	movi	r2,4
  800c28:	d0a7130d 	sth	r2,-25524(gp)
	playCursor = audioVolumeBuffer;
  800c2c:	d0a70c17 	ldw	r2,-25552(gp)
  800c30:	d0a71215 	stw	r2,-25528(gp)
	playedWords = 0;
  800c34:	d0271115 	stw	zero,-25532(gp)
	alt_up_audio_enable_write_interrupt(audio);
  800c38:	d1270817 	ldw	r4,-25568(gp)
  800c3c:	08145200 	call	814520 <alt_up_audio_enable_write_interrupt>
}
  800c40:	e037883a 	mov	sp,fp
  800c44:	dfc00117 	ldw	ra,4(sp)
  800c48:	df000017 	ldw	fp,0(sp)
  800c4c:	dec00204 	addi	sp,sp,8
  800c50:	f800283a 	ret

00800c54 <stopTheme>:

void stopTheme(void) {
  800c54:	deffff04 	addi	sp,sp,-4
  800c58:	df000015 	stw	fp,0(sp)
  800c5c:	d839883a 	mov	fp,sp
	status = NONE;
  800c60:	d027130d 	sth	zero,-25524(gp)
}
  800c64:	e037883a 	mov	sp,fp
  800c68:	df000017 	ldw	fp,0(sp)
  800c6c:	dec00104 	addi	sp,sp,4
  800c70:	f800283a 	ret

00800c74 <playSoundISR>:

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void playSoundISR(void* isr_context) {
#else
static void playSoundISR(void* isr_context, alt_u32 id) {
  800c74:	defff704 	addi	sp,sp,-36
  800c78:	dfc00815 	stw	ra,32(sp)
  800c7c:	df000715 	stw	fp,28(sp)
  800c80:	df000704 	addi	fp,sp,28
  800c84:	e13ffc15 	stw	r4,-16(fp)
  800c88:	e17ffd15 	stw	r5,-12(fp)
#endif
	if (status == NONE) {
  800c8c:	d0a7130b 	ldhu	r2,-25524(gp)
  800c90:	10bfffcc 	andi	r2,r2,65535
  800c94:	10a0001c 	xori	r2,r2,32768
  800c98:	10a00004 	addi	r2,r2,-32768
  800c9c:	1004c03a 	cmpne	r2,r2,zero
  800ca0:	1000031e 	bne	r2,zero,800cb0 <playSoundISR+0x3c>
		alt_up_audio_disable_write_interrupt(audio);
  800ca4:	d1270817 	ldw	r4,-25568(gp)
  800ca8:	081456c0 	call	81456c <alt_up_audio_disable_write_interrupt>
		return;
  800cac:	00004806 	br	800dd0 <playSoundISR+0x15c>
	}
	int len;
	unsigned int free = alt_up_audio_write_fifo_space(audio, ALT_UP_AUDIO_LEFT);
  800cb0:	d1270817 	ldw	r4,-25568(gp)
  800cb4:	000b883a 	mov	r5,zero
  800cb8:	081480c0 	call	81480c <alt_up_audio_write_fifo_space>
  800cbc:	e0bffa15 	stw	r2,-24(fp)
	unsigned end = (unsigned)(audioVolumeBuffer) + (2 * audioFileWordLength);
  800cc0:	d0a70e17 	ldw	r2,-25544(gp)
  800cc4:	1085883a 	add	r2,r2,r2
  800cc8:	1007883a 	mov	r3,r2
  800ccc:	d0a70c17 	ldw	r2,-25552(gp)
  800cd0:	1885883a 	add	r2,r3,r2
  800cd4:	e0bff915 	stw	r2,-28(fp)
	if (free >= 1) {
  800cd8:	e0bffa17 	ldw	r2,-24(fp)
  800cdc:	1005003a 	cmpeq	r2,r2,zero
  800ce0:	1000391e 	bne	r2,zero,800dc8 <playSoundISR+0x154>
		if (((int)playCursor + free >= end) ||
  800ce4:	d0a71217 	ldw	r2,-25528(gp)
  800ce8:	1007883a 	mov	r3,r2
  800cec:	e0bffa17 	ldw	r2,-24(fp)
  800cf0:	1887883a 	add	r3,r3,r2
  800cf4:	e0bff917 	ldw	r2,-28(fp)
  800cf8:	1880052e 	bgeu	r3,r2,800d10 <playSoundISR+0x9c>
  800cfc:	d0e71117 	ldw	r3,-25532(gp)
  800d00:	e0bffa17 	ldw	r2,-24(fp)
  800d04:	1887883a 	add	r3,r3,r2
  800d08:	d0a70e17 	ldw	r2,-25544(gp)
  800d0c:	18801336 	bltu	r3,r2,800d5c <playSoundISR+0xe8>
			 (playedWords + free) >= audioFileWordLength) {
			// Last chunk to play
			len = end - (int)playCursor;
  800d10:	d0a71217 	ldw	r2,-25528(gp)
  800d14:	1007883a 	mov	r3,r2
  800d18:	e0bff917 	ldw	r2,-28(fp)
  800d1c:	10c5c83a 	sub	r2,r2,r3
  800d20:	e0bffb15 	stw	r2,-20(fp)
			if (status == THEME) {
  800d24:	d0a7130b 	ldhu	r2,-25524(gp)
  800d28:	10bfffcc 	andi	r2,r2,65535
  800d2c:	10a0001c 	xori	r2,r2,32768
  800d30:	10a00004 	addi	r2,r2,-32768
  800d34:	10800118 	cmpnei	r2,r2,4
  800d38:	1000051e 	bne	r2,zero,800d50 <playSoundISR+0xdc>
				loadTheme();
  800d3c:	080065c0 	call	80065c <loadTheme>
				playCursor = audioVolumeBuffer;
  800d40:	d0a70c17 	ldw	r2,-25552(gp)
  800d44:	d0a71215 	stw	r2,-25528(gp)
				playedWords = 0;
  800d48:	d0271115 	stw	zero,-25532(gp)
  800d4c:	00000506 	br	800d64 <playSoundISR+0xf0>
			} else {
				alt_up_audio_disable_write_interrupt(audio);
  800d50:	d1270817 	ldw	r4,-25568(gp)
  800d54:	081456c0 	call	81456c <alt_up_audio_disable_write_interrupt>
	}
	int len;
	unsigned int free = alt_up_audio_write_fifo_space(audio, ALT_UP_AUDIO_LEFT);
	unsigned end = (unsigned)(audioVolumeBuffer) + (2 * audioFileWordLength);
	if (free >= 1) {
		if (((int)playCursor + free >= end) ||
  800d58:	00000206 	br	800d64 <playSoundISR+0xf0>
				playedWords = 0;
			} else {
				alt_up_audio_disable_write_interrupt(audio);
			}
		} else {
			len = free;
  800d5c:	e0bffa17 	ldw	r2,-24(fp)
  800d60:	e0bffb15 	stw	r2,-20(fp)
		}
		len = len > free ? free : len;
  800d64:	e0bffb17 	ldw	r2,-20(fp)
  800d68:	e0fffa17 	ldw	r3,-24(fp)
  800d6c:	e0ffff15 	stw	r3,-4(fp)
  800d70:	e0bffe15 	stw	r2,-8(fp)
  800d74:	e0bfff17 	ldw	r2,-4(fp)
  800d78:	e0fffe17 	ldw	r3,-8(fp)
  800d7c:	10c0022e 	bgeu	r2,r3,800d88 <playSoundISR+0x114>
  800d80:	e0bfff17 	ldw	r2,-4(fp)
  800d84:	e0bffe15 	stw	r2,-8(fp)
  800d88:	e0fffe17 	ldw	r3,-8(fp)
  800d8c:	e0fffb15 	stw	r3,-20(fp)
		playAudioMono(len);
  800d90:	e13ffb17 	ldw	r4,-20(fp)
  800d94:	080072c0 	call	80072c <playAudioMono>
		playedWords += len;
  800d98:	d0e71117 	ldw	r3,-25532(gp)
  800d9c:	e0bffb17 	ldw	r2,-20(fp)
  800da0:	1885883a 	add	r2,r3,r2
  800da4:	d0a71115 	stw	r2,-25532(gp)
		playCursor += len;
  800da8:	e0bffb17 	ldw	r2,-20(fp)
  800dac:	1085883a 	add	r2,r2,r2
  800db0:	1085883a 	add	r2,r2,r2
  800db4:	1007883a 	mov	r3,r2
  800db8:	d0a71217 	ldw	r2,-25528(gp)
  800dbc:	1885883a 	add	r2,r3,r2
  800dc0:	d0a71215 	stw	r2,-25528(gp)
  800dc4:	00000206 	br	800dd0 <playSoundISR+0x15c>
	} else {
		// Interrupt should not be triggered if there is no space
		alt_up_audio_disable_write_interrupt(audio);
  800dc8:	d1270817 	ldw	r4,-25568(gp)
  800dcc:	081456c0 	call	81456c <alt_up_audio_disable_write_interrupt>
	}
}
  800dd0:	e037883a 	mov	sp,fp
  800dd4:	dfc00117 	ldw	ra,4(sp)
  800dd8:	df000017 	ldw	fp,0(sp)
  800ddc:	dec00204 	addi	sp,sp,8
  800de0:	f800283a 	ret

00800de4 <updateAudioWithVolume>:

void updateAudioWithVolume(char switchValues) {
  800de4:	defffd04 	addi	sp,sp,-12
  800de8:	dfc00215 	stw	ra,8(sp)
  800dec:	df000115 	stw	fp,4(sp)
  800df0:	df000104 	addi	fp,sp,4
  800df4:	e13fff05 	stb	r4,-4(fp)
	if (laser.mainBuffer != NULL && laser.volumeBuffer != NULL){
  800df8:	008020b4 	movhi	r2,130
  800dfc:	10839a04 	addi	r2,r2,3688
  800e00:	10800017 	ldw	r2,0(r2)
  800e04:	1005003a 	cmpeq	r2,r2,zero
  800e08:	10000c1e 	bne	r2,zero,800e3c <updateAudioWithVolume+0x58>
  800e0c:	008020b4 	movhi	r2,130
  800e10:	10839a04 	addi	r2,r2,3688
  800e14:	10800117 	ldw	r2,4(r2)
  800e18:	1005003a 	cmpeq	r2,r2,zero
  800e1c:	1000071e 	bne	r2,zero,800e3c <updateAudioWithVolume+0x58>
		changeBufferVolume(laser, switchValues);
  800e20:	e1ffff07 	ldb	r7,-4(fp)
  800e24:	008020b4 	movhi	r2,130
  800e28:	10839a04 	addi	r2,r2,3688
  800e2c:	11000017 	ldw	r4,0(r2)
  800e30:	11400117 	ldw	r5,4(r2)
  800e34:	11800217 	ldw	r6,8(r2)
  800e38:	0800f1c0 	call	800f1c <changeBufferVolume>
	}
	if (playerDeath.mainBuffer != NULL && playerDeath.volumeBuffer != NULL){
  800e3c:	008020b4 	movhi	r2,130
  800e40:	1083a004 	addi	r2,r2,3712
  800e44:	10800017 	ldw	r2,0(r2)
  800e48:	1005003a 	cmpeq	r2,r2,zero
  800e4c:	10000c1e 	bne	r2,zero,800e80 <updateAudioWithVolume+0x9c>
  800e50:	008020b4 	movhi	r2,130
  800e54:	1083a004 	addi	r2,r2,3712
  800e58:	10800117 	ldw	r2,4(r2)
  800e5c:	1005003a 	cmpeq	r2,r2,zero
  800e60:	1000071e 	bne	r2,zero,800e80 <updateAudioWithVolume+0x9c>
		changeBufferVolume(playerDeath, switchValues);
  800e64:	e1ffff07 	ldb	r7,-4(fp)
  800e68:	008020b4 	movhi	r2,130
  800e6c:	1083a004 	addi	r2,r2,3712
  800e70:	11000017 	ldw	r4,0(r2)
  800e74:	11400117 	ldw	r5,4(r2)
  800e78:	11800217 	ldw	r6,8(r2)
  800e7c:	0800f1c0 	call	800f1c <changeBufferVolume>
	}
	if (sharkDeath.mainBuffer != NULL && sharkDeath.volumeBuffer != NULL) {
  800e80:	008020b4 	movhi	r2,130
  800e84:	10839704 	addi	r2,r2,3676
  800e88:	10800017 	ldw	r2,0(r2)
  800e8c:	1005003a 	cmpeq	r2,r2,zero
  800e90:	10000c1e 	bne	r2,zero,800ec4 <updateAudioWithVolume+0xe0>
  800e94:	008020b4 	movhi	r2,130
  800e98:	10839704 	addi	r2,r2,3676
  800e9c:	10800117 	ldw	r2,4(r2)
  800ea0:	1005003a 	cmpeq	r2,r2,zero
  800ea4:	1000071e 	bne	r2,zero,800ec4 <updateAudioWithVolume+0xe0>
		changeBufferVolume(sharkDeath, switchValues);
  800ea8:	e1ffff07 	ldb	r7,-4(fp)
  800eac:	008020b4 	movhi	r2,130
  800eb0:	10839704 	addi	r2,r2,3676
  800eb4:	11000017 	ldw	r4,0(r2)
  800eb8:	11400117 	ldw	r5,4(r2)
  800ebc:	11800217 	ldw	r6,8(r2)
  800ec0:	0800f1c0 	call	800f1c <changeBufferVolume>
	}
	if (theme.mainBuffer != NULL && theme.volumeBuffer != NULL) {
  800ec4:	008020b4 	movhi	r2,130
  800ec8:	10839d04 	addi	r2,r2,3700
  800ecc:	10800017 	ldw	r2,0(r2)
  800ed0:	1005003a 	cmpeq	r2,r2,zero
  800ed4:	10000c1e 	bne	r2,zero,800f08 <updateAudioWithVolume+0x124>
  800ed8:	008020b4 	movhi	r2,130
  800edc:	10839d04 	addi	r2,r2,3700
  800ee0:	10800117 	ldw	r2,4(r2)
  800ee4:	1005003a 	cmpeq	r2,r2,zero
  800ee8:	1000071e 	bne	r2,zero,800f08 <updateAudioWithVolume+0x124>
		changeBufferVolume(theme, switchValues);
  800eec:	e1ffff07 	ldb	r7,-4(fp)
  800ef0:	008020b4 	movhi	r2,130
  800ef4:	10839d04 	addi	r2,r2,3700
  800ef8:	11000017 	ldw	r4,0(r2)
  800efc:	11400117 	ldw	r5,4(r2)
  800f00:	11800217 	ldw	r6,8(r2)
  800f04:	0800f1c0 	call	800f1c <changeBufferVolume>
	}

	return;
}
  800f08:	e037883a 	mov	sp,fp
  800f0c:	dfc00117 	ldw	ra,4(sp)
  800f10:	df000017 	ldw	fp,0(sp)
  800f14:	dec00204 	addi	sp,sp,8
  800f18:	f800283a 	ret

00800f1c <changeBufferVolume>:

void changeBufferVolume(struct audioInfo currentAudioInfo, char switchValues) {
  800f1c:	defff704 	addi	sp,sp,-36
  800f20:	dfc00815 	stw	ra,32(sp)
  800f24:	df000715 	stw	fp,28(sp)
  800f28:	df000704 	addi	fp,sp,28
  800f2c:	e13ffc15 	stw	r4,-16(fp)
  800f30:	e17ffd15 	stw	r5,-12(fp)
  800f34:	e1bffe15 	stw	r6,-8(fp)
  800f38:	e1ffff05 	stb	r7,-4(fp)
	int i;
	short volumeKeys = switchValues & 0x0F;
  800f3c:	e0bfff03 	ldbu	r2,-4(fp)
  800f40:	10803fcc 	andi	r2,r2,255
  800f44:	108003cc 	andi	r2,r2,15
  800f48:	e0bffa0d 	sth	r2,-24(fp)
	if(volumeKeys == 0x00 || volumeKeys == 0x01) {
  800f4c:	e0bffa0f 	ldh	r2,-24(fp)
  800f50:	1005003a 	cmpeq	r2,r2,zero
  800f54:	1000031e 	bne	r2,zero,800f64 <changeBufferVolume+0x48>
  800f58:	e0bffa0f 	ldh	r2,-24(fp)
  800f5c:	10800058 	cmpnei	r2,r2,1
  800f60:	10001b1e 	bne	r2,zero,800fd0 <changeBufferVolume+0xb4>
		short shiftLength = 2 - volumeKeys;
  800f64:	e0fffa0b 	ldhu	r3,-24(fp)
  800f68:	00800084 	movi	r2,2
  800f6c:	10c5c83a 	sub	r2,r2,r3
  800f70:	e0bff98d 	sth	r2,-26(fp)
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  800f74:	e03ffb15 	stw	zero,-20(fp)
  800f78:	00001106 	br	800fc0 <changeBufferVolume+0xa4>
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) >> shiftLength;
  800f7c:	e0fffd17 	ldw	r3,-12(fp)
  800f80:	e0bffb17 	ldw	r2,-20(fp)
  800f84:	1085883a 	add	r2,r2,r2
  800f88:	1085883a 	add	r2,r2,r2
  800f8c:	1889883a 	add	r4,r3,r2
  800f90:	e0fffc17 	ldw	r3,-16(fp)
  800f94:	e0bffb17 	ldw	r2,-20(fp)
  800f98:	1085883a 	add	r2,r2,r2
  800f9c:	1085883a 	add	r2,r2,r2
  800fa0:	1885883a 	add	r2,r3,r2
  800fa4:	10c00017 	ldw	r3,0(r2)
  800fa8:	e0bff98f 	ldh	r2,-26(fp)
  800fac:	1884d83a 	srl	r2,r3,r2
  800fb0:	20800015 	stw	r2,0(r4)
void changeBufferVolume(struct audioInfo currentAudioInfo, char switchValues) {
	int i;
	short volumeKeys = switchValues & 0x0F;
	if(volumeKeys == 0x00 || volumeKeys == 0x01) {
		short shiftLength = 2 - volumeKeys;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  800fb4:	e0bffb17 	ldw	r2,-20(fp)
  800fb8:	10800044 	addi	r2,r2,1
  800fbc:	e0bffb15 	stw	r2,-20(fp)
  800fc0:	e0fffb17 	ldw	r3,-20(fp)
  800fc4:	e0bffe17 	ldw	r2,-8(fp)
  800fc8:	18bfec36 	bltu	r3,r2,800f7c <changeBufferVolume+0x60>
}

void changeBufferVolume(struct audioInfo currentAudioInfo, char switchValues) {
	int i;
	short volumeKeys = switchValues & 0x0F;
	if(volumeKeys == 0x00 || volumeKeys == 0x01) {
  800fcc:	00004806 	br	8010f0 <changeBufferVolume+0x1d4>
		short shiftLength = 2 - volumeKeys;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) >> shiftLength;
		}
	} else if(volumeKeys == 0x07 || volumeKeys == 0x0F) {
  800fd0:	e0bffa0f 	ldh	r2,-24(fp)
  800fd4:	108001e0 	cmpeqi	r2,r2,7
  800fd8:	1000031e 	bne	r2,zero,800fe8 <changeBufferVolume+0xcc>
  800fdc:	e0bffa0f 	ldh	r2,-24(fp)
  800fe0:	108003d8 	cmpnei	r2,r2,15
  800fe4:	10001c1e 	bne	r2,zero,801058 <changeBufferVolume+0x13c>
		short shiftLength = (volumeKeys % 7) + 1;
  800fe8:	e13ffa0f 	ldh	r4,-24(fp)
  800fec:	014001c4 	movi	r5,7
  800ff0:	08097dc0 	call	8097dc <__modsi3>
  800ff4:	10800044 	addi	r2,r2,1
  800ff8:	e0bff90d 	sth	r2,-28(fp)
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  800ffc:	e03ffb15 	stw	zero,-20(fp)
  801000:	00001106 	br	801048 <changeBufferVolume+0x12c>
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) << shiftLength;
  801004:	e0fffd17 	ldw	r3,-12(fp)
  801008:	e0bffb17 	ldw	r2,-20(fp)
  80100c:	1085883a 	add	r2,r2,r2
  801010:	1085883a 	add	r2,r2,r2
  801014:	1889883a 	add	r4,r3,r2
  801018:	e0fffc17 	ldw	r3,-16(fp)
  80101c:	e0bffb17 	ldw	r2,-20(fp)
  801020:	1085883a 	add	r2,r2,r2
  801024:	1085883a 	add	r2,r2,r2
  801028:	1885883a 	add	r2,r3,r2
  80102c:	10c00017 	ldw	r3,0(r2)
  801030:	e0bff90f 	ldh	r2,-28(fp)
  801034:	1884983a 	sll	r2,r3,r2
  801038:	20800015 	stw	r2,0(r4)
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) >> shiftLength;
		}
	} else if(volumeKeys == 0x07 || volumeKeys == 0x0F) {
		short shiftLength = (volumeKeys % 7) + 1;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  80103c:	e0bffb17 	ldw	r2,-20(fp)
  801040:	10800044 	addi	r2,r2,1
  801044:	e0bffb15 	stw	r2,-20(fp)
  801048:	e0fffb17 	ldw	r3,-20(fp)
  80104c:	e0bffe17 	ldw	r2,-8(fp)
  801050:	18bfec36 	bltu	r3,r2,801004 <changeBufferVolume+0xe8>
	if(volumeKeys == 0x00 || volumeKeys == 0x01) {
		short shiftLength = 2 - volumeKeys;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) >> shiftLength;
		}
	} else if(volumeKeys == 0x07 || volumeKeys == 0x0F) {
  801054:	00002606 	br	8010f0 <changeBufferVolume+0x1d4>
		short shiftLength = (volumeKeys % 7) + 1;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) << shiftLength;
		}
	} else if(volumeKeys == 0x03) {
  801058:	e0bffa0f 	ldh	r2,-24(fp)
  80105c:	108000d8 	cmpnei	r2,r2,3
  801060:	1000151e 	bne	r2,zero,8010b8 <changeBufferVolume+0x19c>
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  801064:	e03ffb15 	stw	zero,-20(fp)
  801068:	00000f06 	br	8010a8 <changeBufferVolume+0x18c>
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i);
  80106c:	e0fffd17 	ldw	r3,-12(fp)
  801070:	e0bffb17 	ldw	r2,-20(fp)
  801074:	1085883a 	add	r2,r2,r2
  801078:	1085883a 	add	r2,r2,r2
  80107c:	1887883a 	add	r3,r3,r2
  801080:	e13ffc17 	ldw	r4,-16(fp)
  801084:	e0bffb17 	ldw	r2,-20(fp)
  801088:	1085883a 	add	r2,r2,r2
  80108c:	1085883a 	add	r2,r2,r2
  801090:	2085883a 	add	r2,r4,r2
  801094:	10800017 	ldw	r2,0(r2)
  801098:	18800015 	stw	r2,0(r3)
		short shiftLength = (volumeKeys % 7) + 1;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) << shiftLength;
		}
	} else if(volumeKeys == 0x03) {
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  80109c:	e0bffb17 	ldw	r2,-20(fp)
  8010a0:	10800044 	addi	r2,r2,1
  8010a4:	e0bffb15 	stw	r2,-20(fp)
  8010a8:	e0fffb17 	ldw	r3,-20(fp)
  8010ac:	e0bffe17 	ldw	r2,-8(fp)
  8010b0:	18bfee36 	bltu	r3,r2,80106c <changeBufferVolume+0x150>
  8010b4:	00000e06 	br	8010f0 <changeBufferVolume+0x1d4>
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i);
		}
	} else {
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  8010b8:	e03ffb15 	stw	zero,-20(fp)
  8010bc:	00000906 	br	8010e4 <changeBufferVolume+0x1c8>
			*(currentAudioInfo.volumeBuffer + i) = 0; //mute on all other combos
  8010c0:	e0fffd17 	ldw	r3,-12(fp)
  8010c4:	e0bffb17 	ldw	r2,-20(fp)
  8010c8:	1085883a 	add	r2,r2,r2
  8010cc:	1085883a 	add	r2,r2,r2
  8010d0:	1885883a 	add	r2,r3,r2
  8010d4:	10000015 	stw	zero,0(r2)
	} else if(volumeKeys == 0x03) {
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i);
		}
	} else {
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  8010d8:	e0bffb17 	ldw	r2,-20(fp)
  8010dc:	10800044 	addi	r2,r2,1
  8010e0:	e0bffb15 	stw	r2,-20(fp)
  8010e4:	e0fffb17 	ldw	r3,-20(fp)
  8010e8:	e0bffe17 	ldw	r2,-8(fp)
  8010ec:	18bff436 	bltu	r3,r2,8010c0 <changeBufferVolume+0x1a4>
			*(currentAudioInfo.volumeBuffer + i) = 0; //mute on all other combos
		}
	}

	return;
}
  8010f0:	e037883a 	mov	sp,fp
  8010f4:	dfc00117 	ldw	ra,4(sp)
  8010f8:	df000017 	ldw	fp,0(sp)
  8010fc:	dec00204 	addi	sp,sp,8
  801100:	f800283a 	ret

00801104 <parseBmp>:
#include "bmp.h"

void parseBmp (char *fileName, BMP *bmp) {
  801104:	defff304 	addi	sp,sp,-52
  801108:	dfc00c15 	stw	ra,48(sp)
  80110c:	df000b15 	stw	fp,44(sp)
  801110:	df000b04 	addi	fp,sp,44
  801114:	e13ffd15 	stw	r4,-12(fp)
  801118:	e17ffe15 	stw	r5,-8(fp)
	int i, j, k;
	char b, g, r;
	int pixels, rowOffset, offset;
	short int fh;

	fh = openFile(fileName);
  80111c:	e13ffd17 	ldw	r4,-12(fp)
  801120:	08051280 	call	805128 <openFile>
  801124:	e0bff50d 	sth	r2,-44(fp)

	bmp->header.type = readWord(fh);
  801128:	e13ff50f 	ldh	r4,-44(fp)
  80112c:	08051cc0 	call	8051cc <readWord>
  801130:	1007883a 	mov	r3,r2
  801134:	e0bffe17 	ldw	r2,-8(fp)
  801138:	10c0000d 	sth	r3,0(r2)
	bmp->header.size = readDWord(fh);
  80113c:	e13ff50f 	ldh	r4,-44(fp)
  801140:	08052600 	call	805260 <readDWord>
  801144:	1007883a 	mov	r3,r2
  801148:	e0bffe17 	ldw	r2,-8(fp)
  80114c:	10c00115 	stw	r3,4(r2)
	bmp->header.reserved1 = readWord(fh);
  801150:	e13ff50f 	ldh	r4,-44(fp)
  801154:	08051cc0 	call	8051cc <readWord>
  801158:	1007883a 	mov	r3,r2
  80115c:	e0bffe17 	ldw	r2,-8(fp)
  801160:	10c0020d 	sth	r3,8(r2)
	bmp->header.reserved2 = readWord(fh);
  801164:	e13ff50f 	ldh	r4,-44(fp)
  801168:	08051cc0 	call	8051cc <readWord>
  80116c:	1007883a 	mov	r3,r2
  801170:	e0bffe17 	ldw	r2,-8(fp)
  801174:	10c0028d 	sth	r3,10(r2)
	bmp->header.offset = readDWord(fh);
  801178:	e13ff50f 	ldh	r4,-44(fp)
  80117c:	08052600 	call	805260 <readDWord>
  801180:	1007883a 	mov	r3,r2
  801184:	e0bffe17 	ldw	r2,-8(fp)
  801188:	10c00315 	stw	r3,12(r2)

	bmp->infoheader.size = readDWord(fh);
  80118c:	e13ff50f 	ldh	r4,-44(fp)
  801190:	08052600 	call	805260 <readDWord>
  801194:	1007883a 	mov	r3,r2
  801198:	e0bffe17 	ldw	r2,-8(fp)
  80119c:	10c00415 	stw	r3,16(r2)
	bmp->infoheader.width = readDWord(fh);
  8011a0:	e13ff50f 	ldh	r4,-44(fp)
  8011a4:	08052600 	call	805260 <readDWord>
  8011a8:	1007883a 	mov	r3,r2
  8011ac:	e0bffe17 	ldw	r2,-8(fp)
  8011b0:	10c00515 	stw	r3,20(r2)
	bmp->infoheader.height = readDWord(fh);
  8011b4:	e13ff50f 	ldh	r4,-44(fp)
  8011b8:	08052600 	call	805260 <readDWord>
  8011bc:	1007883a 	mov	r3,r2
  8011c0:	e0bffe17 	ldw	r2,-8(fp)
  8011c4:	10c00615 	stw	r3,24(r2)
	bmp->infoheader.planes = readWord(fh);
  8011c8:	e13ff50f 	ldh	r4,-44(fp)
  8011cc:	08051cc0 	call	8051cc <readWord>
  8011d0:	1007883a 	mov	r3,r2
  8011d4:	e0bffe17 	ldw	r2,-8(fp)
  8011d8:	10c0070d 	sth	r3,28(r2)
	bmp->infoheader.bits = readWord(fh);
  8011dc:	e13ff50f 	ldh	r4,-44(fp)
  8011e0:	08051cc0 	call	8051cc <readWord>
  8011e4:	1007883a 	mov	r3,r2
  8011e8:	e0bffe17 	ldw	r2,-8(fp)
  8011ec:	10c0078d 	sth	r3,30(r2)
	bmp->infoheader.compression = readDWord(fh);
  8011f0:	e13ff50f 	ldh	r4,-44(fp)
  8011f4:	08052600 	call	805260 <readDWord>
  8011f8:	1007883a 	mov	r3,r2
  8011fc:	e0bffe17 	ldw	r2,-8(fp)
  801200:	10c00815 	stw	r3,32(r2)
	bmp->infoheader.imagesize = readDWord(fh);
  801204:	e13ff50f 	ldh	r4,-44(fp)
  801208:	08052600 	call	805260 <readDWord>
  80120c:	1007883a 	mov	r3,r2
  801210:	e0bffe17 	ldw	r2,-8(fp)
  801214:	10c00915 	stw	r3,36(r2)
	bmp->infoheader.xresolution = readDWord(fh);
  801218:	e13ff50f 	ldh	r4,-44(fp)
  80121c:	08052600 	call	805260 <readDWord>
  801220:	1007883a 	mov	r3,r2
  801224:	e0bffe17 	ldw	r2,-8(fp)
  801228:	10c00a15 	stw	r3,40(r2)
	bmp->infoheader.yresolution = readDWord(fh);
  80122c:	e13ff50f 	ldh	r4,-44(fp)
  801230:	08052600 	call	805260 <readDWord>
  801234:	1007883a 	mov	r3,r2
  801238:	e0bffe17 	ldw	r2,-8(fp)
  80123c:	10c00b15 	stw	r3,44(r2)
	bmp->infoheader.ncolors = readDWord(fh);
  801240:	e13ff50f 	ldh	r4,-44(fp)
  801244:	08052600 	call	805260 <readDWord>
  801248:	1007883a 	mov	r3,r2
  80124c:	e0bffe17 	ldw	r2,-8(fp)
  801250:	10c00c15 	stw	r3,48(r2)
	bmp->infoheader.importantcolors = readDWord(fh);
  801254:	e13ff50f 	ldh	r4,-44(fp)
  801258:	08052600 	call	805260 <readDWord>
  80125c:	1007883a 	mov	r3,r2
  801260:	e0bffe17 	ldw	r2,-8(fp)
  801264:	10c00d15 	stw	r3,52(r2)

	pixels = bmp->infoheader.width * bmp->infoheader.height;
  801268:	e0bffe17 	ldw	r2,-8(fp)
  80126c:	10c00517 	ldw	r3,20(r2)
  801270:	e0bffe17 	ldw	r2,-8(fp)
  801274:	10800617 	ldw	r2,24(r2)
  801278:	1885383a 	mul	r2,r3,r2
  80127c:	e0bff815 	stw	r2,-32(fp)
	bmp->color = malloc(BYTES_PER_PIXEL * pixels);
  801280:	e0fff817 	ldw	r3,-32(fp)
  801284:	1805883a 	mov	r2,r3
  801288:	1085883a 	add	r2,r2,r2
  80128c:	10c5883a 	add	r2,r2,r3
  801290:	1009883a 	mov	r4,r2
  801294:	080a0c40 	call	80a0c4 <malloc>
  801298:	1007883a 	mov	r3,r2
  80129c:	e0bffe17 	ldw	r2,-8(fp)
  8012a0:	10c00e15 	stw	r3,56(r2)

	for(i = 0; i < bmp->infoheader.height; i++) {
  8012a4:	e03ffc15 	stw	zero,-16(fp)
  8012a8:	00007306 	br	801478 <parseBmp+0x374>
		rowOffset = i*bmp->infoheader.width;
  8012ac:	e0bffe17 	ldw	r2,-8(fp)
  8012b0:	10c00517 	ldw	r3,20(r2)
  8012b4:	e0bffc17 	ldw	r2,-16(fp)
  8012b8:	1885383a 	mul	r2,r3,r2
  8012bc:	e0bff715 	stw	r2,-36(fp)
		for(j = 0; j < bmp->infoheader.width; j++ ){
  8012c0:	e03ffb15 	stw	zero,-20(fp)
  8012c4:	00003b06 	br	8013b4 <parseBmp+0x2b0>
			offset = pixels - rowOffset - j - 1;
  8012c8:	e0fff817 	ldw	r3,-32(fp)
  8012cc:	e0bff717 	ldw	r2,-36(fp)
  8012d0:	1887c83a 	sub	r3,r3,r2
  8012d4:	e0bffb17 	ldw	r2,-20(fp)
  8012d8:	1885c83a 	sub	r2,r3,r2
  8012dc:	10bfffc4 	addi	r2,r2,-1
  8012e0:	e0bff615 	stw	r2,-40(fp)

			b = (readByte(fh) & 0xF1) >> 3;
  8012e4:	e13ff50f 	ldh	r4,-44(fp)
  8012e8:	08051980 	call	805198 <readByte>
  8012ec:	10803fcc 	andi	r2,r2,255
  8012f0:	10803c4c 	andi	r2,r2,241
  8012f4:	1005d0fa 	srai	r2,r2,3
  8012f8:	e0bff985 	stb	r2,-26(fp)
			g = (readByte(fh) & 0xFC) >> 2;
  8012fc:	e13ff50f 	ldh	r4,-44(fp)
  801300:	08051980 	call	805198 <readByte>
  801304:	10803fcc 	andi	r2,r2,255
  801308:	10803f0c 	andi	r2,r2,252
  80130c:	1005d0ba 	srai	r2,r2,2
  801310:	e0bff945 	stb	r2,-27(fp)
			r = (readByte(fh) & 0xF1) >> 3;
  801314:	e13ff50f 	ldh	r4,-44(fp)
  801318:	08051980 	call	805198 <readByte>
  80131c:	10803fcc 	andi	r2,r2,255
  801320:	10803c4c 	andi	r2,r2,241
  801324:	1005d0fa 	srai	r2,r2,3
  801328:	e0bff905 	stb	r2,-28(fp)

			//Filter out the pink pixels
			if(b == 0x1E && g == 0 && r == 0x1E) {
  80132c:	e0bff987 	ldb	r2,-26(fp)
  801330:	10800798 	cmpnei	r2,r2,30
  801334:	10000d1e 	bne	r2,zero,80136c <parseBmp+0x268>
  801338:	e0bff947 	ldb	r2,-27(fp)
  80133c:	1004c03a 	cmpne	r2,r2,zero
  801340:	10000a1e 	bne	r2,zero,80136c <parseBmp+0x268>
  801344:	e0bff907 	ldb	r2,-28(fp)
  801348:	10800798 	cmpnei	r2,r2,30
  80134c:	1000071e 	bne	r2,zero,80136c <parseBmp+0x268>
				bmp->color[offset] = 0x0;
  801350:	e0bffe17 	ldw	r2,-8(fp)
  801354:	10c00e17 	ldw	r3,56(r2)
  801358:	e0bff617 	ldw	r2,-40(fp)
  80135c:	1085883a 	add	r2,r2,r2
  801360:	1885883a 	add	r2,r3,r2
  801364:	1000000d 	sth	zero,0(r2)
			b = (readByte(fh) & 0xF1) >> 3;
			g = (readByte(fh) & 0xFC) >> 2;
			r = (readByte(fh) & 0xF1) >> 3;

			//Filter out the pink pixels
			if(b == 0x1E && g == 0 && r == 0x1E) {
  801368:	00000f06 	br	8013a8 <parseBmp+0x2a4>
				bmp->color[offset] = 0x0;
			} else {
				bmp->color[offset] = (r << 11) | (g << 5) | b;
  80136c:	e0bffe17 	ldw	r2,-8(fp)
  801370:	10c00e17 	ldw	r3,56(r2)
  801374:	e0bff617 	ldw	r2,-40(fp)
  801378:	1085883a 	add	r2,r2,r2
  80137c:	1889883a 	add	r4,r3,r2
  801380:	e0bff907 	ldb	r2,-28(fp)
  801384:	100492fa 	slli	r2,r2,11
  801388:	1007883a 	mov	r3,r2
  80138c:	e0bff947 	ldb	r2,-27(fp)
  801390:	1004917a 	slli	r2,r2,5
  801394:	1884b03a 	or	r2,r3,r2
  801398:	1007883a 	mov	r3,r2
  80139c:	e0bff987 	ldb	r2,-26(fp)
  8013a0:	1884b03a 	or	r2,r3,r2
  8013a4:	2080000d 	sth	r2,0(r4)
	pixels = bmp->infoheader.width * bmp->infoheader.height;
	bmp->color = malloc(BYTES_PER_PIXEL * pixels);

	for(i = 0; i < bmp->infoheader.height; i++) {
		rowOffset = i*bmp->infoheader.width;
		for(j = 0; j < bmp->infoheader.width; j++ ){
  8013a8:	e0bffb17 	ldw	r2,-20(fp)
  8013ac:	10800044 	addi	r2,r2,1
  8013b0:	e0bffb15 	stw	r2,-20(fp)
  8013b4:	e0bffe17 	ldw	r2,-8(fp)
  8013b8:	10c00517 	ldw	r3,20(r2)
  8013bc:	e0bffb17 	ldw	r2,-20(fp)
  8013c0:	10ffc116 	blt	r2,r3,8012c8 <parseBmp+0x1c4>
			} else {
				bmp->color[offset] = (r << 11) | (g << 5) | b;
			}
		}

		if((BYTES_PER_PIXEL*bmp->infoheader.width) % 4 != 0) {
  8013c4:	e0bffe17 	ldw	r2,-8(fp)
  8013c8:	10c00517 	ldw	r3,20(r2)
  8013cc:	1805883a 	mov	r2,r3
  8013d0:	1085883a 	add	r2,r2,r2
  8013d4:	10c5883a 	add	r2,r2,r3
  8013d8:	108000cc 	andi	r2,r2,3
  8013dc:	1005003a 	cmpeq	r2,r2,zero
  8013e0:	1000221e 	bne	r2,zero,80146c <parseBmp+0x368>
			for (k = 0; k <  (4 - ((BYTES_PER_PIXEL*bmp->infoheader.width) % 4)); k++) {
  8013e4:	e03ffa15 	stw	zero,-24(fp)
  8013e8:	00000506 	br	801400 <parseBmp+0x2fc>
				readByte(fh);
  8013ec:	e13ff50f 	ldh	r4,-44(fp)
  8013f0:	08051980 	call	805198 <readByte>
				bmp->color[offset] = (r << 11) | (g << 5) | b;
			}
		}

		if((BYTES_PER_PIXEL*bmp->infoheader.width) % 4 != 0) {
			for (k = 0; k <  (4 - ((BYTES_PER_PIXEL*bmp->infoheader.width) % 4)); k++) {
  8013f4:	e0bffa17 	ldw	r2,-24(fp)
  8013f8:	10800044 	addi	r2,r2,1
  8013fc:	e0bffa15 	stw	r2,-24(fp)
  801400:	e0bffe17 	ldw	r2,-8(fp)
  801404:	10c00517 	ldw	r3,20(r2)
  801408:	1805883a 	mov	r2,r3
  80140c:	1085883a 	add	r2,r2,r2
  801410:	10c7883a 	add	r3,r2,r3
  801414:	00a00034 	movhi	r2,32768
  801418:	108000c4 	addi	r2,r2,3
  80141c:	1886703a 	and	r3,r3,r2
  801420:	e0ffff15 	stw	r3,-4(fp)
  801424:	e0ffff17 	ldw	r3,-4(fp)
  801428:	1804403a 	cmpge	r2,r3,zero
  80142c:	10000a1e 	bne	r2,zero,801458 <parseBmp+0x354>
  801430:	e0bfff17 	ldw	r2,-4(fp)
  801434:	10bfffc4 	addi	r2,r2,-1
  801438:	e0bfff15 	stw	r2,-4(fp)
  80143c:	00bfff04 	movi	r2,-4
  801440:	e0ffff17 	ldw	r3,-4(fp)
  801444:	1886b03a 	or	r3,r3,r2
  801448:	e0ffff15 	stw	r3,-4(fp)
  80144c:	e0bfff17 	ldw	r2,-4(fp)
  801450:	10800044 	addi	r2,r2,1
  801454:	e0bfff15 	stw	r2,-4(fp)
  801458:	e0ffff17 	ldw	r3,-4(fp)
  80145c:	00800104 	movi	r2,4
  801460:	10c7c83a 	sub	r3,r2,r3
  801464:	e0bffa17 	ldw	r2,-24(fp)
  801468:	10ffe016 	blt	r2,r3,8013ec <parseBmp+0x2e8>
	bmp->infoheader.importantcolors = readDWord(fh);

	pixels = bmp->infoheader.width * bmp->infoheader.height;
	bmp->color = malloc(BYTES_PER_PIXEL * pixels);

	for(i = 0; i < bmp->infoheader.height; i++) {
  80146c:	e0bffc17 	ldw	r2,-16(fp)
  801470:	10800044 	addi	r2,r2,1
  801474:	e0bffc15 	stw	r2,-16(fp)
  801478:	e0bffe17 	ldw	r2,-8(fp)
  80147c:	10c00617 	ldw	r3,24(r2)
  801480:	e0bffc17 	ldw	r2,-16(fp)
  801484:	10ff8916 	blt	r2,r3,8012ac <parseBmp+0x1a8>
				readByte(fh);
			}
		}
	}

	closeFile(fh);
  801488:	e13ff50f 	ldh	r4,-44(fp)
  80148c:	08051680 	call	805168 <closeFile>
}
  801490:	e037883a 	mov	sp,fp
  801494:	dfc00117 	ldw	ra,4(sp)
  801498:	df000017 	ldw	fp,0(sp)
  80149c:	dec00204 	addi	sp,sp,8
  8014a0:	f800283a 	ret

008014a4 <parseBmps>:

void parseBmps() {
  8014a4:	defffe04 	addi	sp,sp,-8
  8014a8:	dfc00115 	stw	ra,4(sp)
  8014ac:	df000015 	stw	fp,0(sp)
  8014b0:	d839883a 	mov	fp,sp
	splashBmp = malloc(sizeof(BMP));
  8014b4:	01000f04 	movi	r4,60
  8014b8:	080a0c40 	call	80a0c4 <malloc>
  8014bc:	d0a71c15 	stw	r2,-25488(gp)
	loadBmp = malloc(sizeof(BMP));
  8014c0:	01000f04 	movi	r4,60
  8014c4:	080a0c40 	call	80a0c4 <malloc>
  8014c8:	d0a71715 	stw	r2,-25508(gp)
	pressBmp = malloc(sizeof(BMP));
  8014cc:	01000f04 	movi	r4,60
  8014d0:	080a0c40 	call	80a0c4 <malloc>
  8014d4:	d0a71815 	stw	r2,-25504(gp)
	sharkBmp = malloc(sizeof(BMP));
  8014d8:	01000f04 	movi	r4,60
  8014dc:	080a0c40 	call	80a0c4 <malloc>
  8014e0:	d0a71b15 	stw	r2,-25492(gp)
	playerBmp = malloc(sizeof(BMP));
  8014e4:	01000f04 	movi	r4,60
  8014e8:	080a0c40 	call	80a0c4 <malloc>
  8014ec:	d0a72115 	stw	r2,-25468(gp)

	cnadoBmp = malloc(sizeof(BMP));
  8014f0:	01000f04 	movi	r4,60
  8014f4:	080a0c40 	call	80a0c4 <malloc>
  8014f8:	d0a72015 	stw	r2,-25472(gp)
	pnadoaBmp = malloc(sizeof(BMP));
  8014fc:	01000f04 	movi	r4,60
  801500:	080a0c40 	call	80a0c4 <malloc>
  801504:	d0a71915 	stw	r2,-25500(gp)
	pnadobBmp = malloc(sizeof(BMP));
  801508:	01000f04 	movi	r4,60
  80150c:	080a0c40 	call	80a0c4 <malloc>
  801510:	d0a71e15 	stw	r2,-25480(gp)
	//nnadoaBmp = malloc(sizeof(BMP));
	//nnadobBmp = malloc(sizeof(BMP));

	parseBmp("splash.bmp", splashBmp);
  801514:	d1671c17 	ldw	r5,-25488(gp)
  801518:	010020b4 	movhi	r4,130
  80151c:	21328a04 	addi	r4,r4,-13784
  801520:	08011040 	call	801104 <parseBmp>
	parseBmp("loadtx.bmp", loadBmp);
  801524:	d1671717 	ldw	r5,-25508(gp)
  801528:	010020b4 	movhi	r4,130
  80152c:	21328d04 	addi	r4,r4,-13772
  801530:	08011040 	call	801104 <parseBmp>
	parseBmp("press.bmp", pressBmp);
  801534:	d1671817 	ldw	r5,-25504(gp)
  801538:	010020b4 	movhi	r4,130
  80153c:	21329004 	addi	r4,r4,-13760
  801540:	08011040 	call	801104 <parseBmp>
	parseBmp("shark.bmp", sharkBmp);
  801544:	d1671b17 	ldw	r5,-25492(gp)
  801548:	010020b4 	movhi	r4,130
  80154c:	21329304 	addi	r4,r4,-13748
  801550:	08011040 	call	801104 <parseBmp>
	parseBmp("player.bmp", playerBmp);
  801554:	d1672117 	ldw	r5,-25468(gp)
  801558:	010020b4 	movhi	r4,130
  80155c:	21329604 	addi	r4,r4,-13736
  801560:	08011040 	call	801104 <parseBmp>

	parseBmp("cnado.bmp", cnadoBmp);
  801564:	d1672017 	ldw	r5,-25472(gp)
  801568:	010020b4 	movhi	r4,130
  80156c:	21329904 	addi	r4,r4,-13724
  801570:	08011040 	call	801104 <parseBmp>
	parseBmp("pnadoa.bmp", pnadoaBmp);
  801574:	d1671917 	ldw	r5,-25500(gp)
  801578:	010020b4 	movhi	r4,130
  80157c:	21329c04 	addi	r4,r4,-13712
  801580:	08011040 	call	801104 <parseBmp>
	parseBmp("pnadob.bmp", pnadobBmp);
  801584:	d1671e17 	ldw	r5,-25480(gp)
  801588:	010020b4 	movhi	r4,130
  80158c:	21329f04 	addi	r4,r4,-13700
  801590:	08011040 	call	801104 <parseBmp>
	//parseBmp("nnadoa.bmp", nnadoaBmp);
	//parseBmp("nnadob.bmp", nnadobBmp);
}
  801594:	e037883a 	mov	sp,fp
  801598:	dfc00117 	ldw	ra,4(sp)
  80159c:	df000017 	ldw	fp,0(sp)
  8015a0:	dec00204 	addi	sp,sp,8
  8015a4:	f800283a 	ret

008015a8 <freeBmps>:

void freeBmps(){
  8015a8:	defffe04 	addi	sp,sp,-8
  8015ac:	dfc00115 	stw	ra,4(sp)
  8015b0:	df000015 	stw	fp,0(sp)
  8015b4:	d839883a 	mov	fp,sp
	free(playerBmp->color);
  8015b8:	d0a72117 	ldw	r2,-25468(gp)
  8015bc:	11000e17 	ldw	r4,56(r2)
  8015c0:	080a0b00 	call	80a0b0 <free>
	free(sharkBmp->color);
  8015c4:	d0a71b17 	ldw	r2,-25492(gp)
  8015c8:	11000e17 	ldw	r4,56(r2)
  8015cc:	080a0b00 	call	80a0b0 <free>

	free(sharkBmp);
  8015d0:	d1271b17 	ldw	r4,-25492(gp)
  8015d4:	080a0b00 	call	80a0b0 <free>
	free(playerBmp);
  8015d8:	d1272117 	ldw	r4,-25468(gp)
  8015dc:	080a0b00 	call	80a0b0 <free>
}
  8015e0:	e037883a 	mov	sp,fp
  8015e4:	dfc00117 	ldw	ra,4(sp)
  8015e8:	df000017 	ldw	fp,0(sp)
  8015ec:	dec00204 	addi	sp,sp,8
  8015f0:	f800283a 	ret

008015f4 <freeSplash>:

void freeSplash() {
  8015f4:	defffe04 	addi	sp,sp,-8
  8015f8:	dfc00115 	stw	ra,4(sp)
  8015fc:	df000015 	stw	fp,0(sp)
  801600:	d839883a 	mov	fp,sp
	free(splashBmp->color);
  801604:	d0a71c17 	ldw	r2,-25488(gp)
  801608:	11000e17 	ldw	r4,56(r2)
  80160c:	080a0b00 	call	80a0b0 <free>
	free(splashBmp);
  801610:	d1271c17 	ldw	r4,-25488(gp)
  801614:	080a0b00 	call	80a0b0 <free>
}
  801618:	e037883a 	mov	sp,fp
  80161c:	dfc00117 	ldw	ra,4(sp)
  801620:	df000017 	ldw	fp,0(sp)
  801624:	dec00204 	addi	sp,sp,8
  801628:	f800283a 	ret

0080162c <drawBmp>:


void drawBmp (BMP *bmp, int x, int y) {
  80162c:	defff804 	addi	sp,sp,-32
  801630:	dfc00715 	stw	ra,28(sp)
  801634:	df000615 	stw	fp,24(sp)
  801638:	df000604 	addi	fp,sp,24
  80163c:	e13ffd15 	stw	r4,-12(fp)
  801640:	e17ffe15 	stw	r5,-8(fp)
  801644:	e1bfff15 	stw	r6,-4(fp)
	int i,j;
	int offset;

	for(i = 0; i < bmp->infoheader.height; i++) {
  801648:	e03ffc15 	stw	zero,-16(fp)
  80164c:	00004806 	br	801770 <drawBmp+0x144>
		offset = i * bmp->infoheader.width;
  801650:	e0bffd17 	ldw	r2,-12(fp)
  801654:	10c00517 	ldw	r3,20(r2)
  801658:	e0bffc17 	ldw	r2,-16(fp)
  80165c:	1885383a 	mul	r2,r3,r2
  801660:	e0bffa15 	stw	r2,-24(fp)
		if(y + i < SCREEN_HEIGHT && y + i > 0) {
  801664:	e0ffff17 	ldw	r3,-4(fp)
  801668:	e0bffc17 	ldw	r2,-16(fp)
  80166c:	1885883a 	add	r2,r3,r2
  801670:	10803c08 	cmpgei	r2,r2,240
  801674:	10003b1e 	bne	r2,zero,801764 <drawBmp+0x138>
  801678:	e0ffff17 	ldw	r3,-4(fp)
  80167c:	e0bffc17 	ldw	r2,-16(fp)
  801680:	1885883a 	add	r2,r3,r2
  801684:	10800050 	cmplti	r2,r2,1
  801688:	1000361e 	bne	r2,zero,801764 <drawBmp+0x138>
			for(j = 0; j < bmp->infoheader.width; j++){
  80168c:	e03ffb15 	stw	zero,-20(fp)
  801690:	00003006 	br	801754 <drawBmp+0x128>
				if(bmp->color[offset + j] == 0 || x + j >= SCREEN_WIDTH || x + j <= 0)
  801694:	e0bffd17 	ldw	r2,-12(fp)
  801698:	11000e17 	ldw	r4,56(r2)
  80169c:	e0fffa17 	ldw	r3,-24(fp)
  8016a0:	e0bffb17 	ldw	r2,-20(fp)
  8016a4:	1885883a 	add	r2,r3,r2
  8016a8:	1085883a 	add	r2,r2,r2
  8016ac:	2085883a 	add	r2,r4,r2
  8016b0:	1080000b 	ldhu	r2,0(r2)
  8016b4:	10bfffcc 	andi	r2,r2,65535
  8016b8:	10a0001c 	xori	r2,r2,32768
  8016bc:	10a00004 	addi	r2,r2,-32768
  8016c0:	1005003a 	cmpeq	r2,r2,zero
  8016c4:	1000201e 	bne	r2,zero,801748 <drawBmp+0x11c>
  8016c8:	e0fffe17 	ldw	r3,-8(fp)
  8016cc:	e0bffb17 	ldw	r2,-20(fp)
  8016d0:	1885883a 	add	r2,r3,r2
  8016d4:	10805508 	cmpgei	r2,r2,340
  8016d8:	10001b1e 	bne	r2,zero,801748 <drawBmp+0x11c>
  8016dc:	e0fffe17 	ldw	r3,-8(fp)
  8016e0:	e0bffb17 	ldw	r2,-20(fp)
  8016e4:	1885883a 	add	r2,r3,r2
  8016e8:	10800050 	cmplti	r2,r2,1
  8016ec:	1000161e 	bne	r2,zero,801748 <drawBmp+0x11c>
					continue;

				drawPixelFast(x + j, y + i, bmp->color[offset +j]);
  8016f0:	e0fffe17 	ldw	r3,-8(fp)
  8016f4:	e0bffb17 	ldw	r2,-20(fp)
  8016f8:	1885883a 	add	r2,r3,r2
  8016fc:	100b883a 	mov	r5,r2
  801700:	e0ffff17 	ldw	r3,-4(fp)
  801704:	e0bffc17 	ldw	r2,-16(fp)
  801708:	1885883a 	add	r2,r3,r2
  80170c:	100f883a 	mov	r7,r2
  801710:	e0bffd17 	ldw	r2,-12(fp)
  801714:	11000e17 	ldw	r4,56(r2)
  801718:	e0fffa17 	ldw	r3,-24(fp)
  80171c:	e0bffb17 	ldw	r2,-20(fp)
  801720:	1885883a 	add	r2,r3,r2
  801724:	1085883a 	add	r2,r2,r2
  801728:	2085883a 	add	r2,r4,r2
  80172c:	1080000b 	ldhu	r2,0(r2)
  801730:	11bfffcc 	andi	r6,r2,65535
  801734:	31a0001c 	xori	r6,r6,32768
  801738:	31a00004 	addi	r6,r6,-32768
  80173c:	2809883a 	mov	r4,r5
  801740:	380b883a 	mov	r5,r7
  801744:	08063680 	call	806368 <drawPixelFast>
	int offset;

	for(i = 0; i < bmp->infoheader.height; i++) {
		offset = i * bmp->infoheader.width;
		if(y + i < SCREEN_HEIGHT && y + i > 0) {
			for(j = 0; j < bmp->infoheader.width; j++){
  801748:	e0bffb17 	ldw	r2,-20(fp)
  80174c:	10800044 	addi	r2,r2,1
  801750:	e0bffb15 	stw	r2,-20(fp)
  801754:	e0bffd17 	ldw	r2,-12(fp)
  801758:	10c00517 	ldw	r3,20(r2)
  80175c:	e0bffb17 	ldw	r2,-20(fp)
  801760:	10ffcc16 	blt	r2,r3,801694 <drawBmp+0x68>

void drawBmp (BMP *bmp, int x, int y) {
	int i,j;
	int offset;

	for(i = 0; i < bmp->infoheader.height; i++) {
  801764:	e0bffc17 	ldw	r2,-16(fp)
  801768:	10800044 	addi	r2,r2,1
  80176c:	e0bffc15 	stw	r2,-16(fp)
  801770:	e0bffd17 	ldw	r2,-12(fp)
  801774:	10c00617 	ldw	r3,24(r2)
  801778:	e0bffc17 	ldw	r2,-16(fp)
  80177c:	10ffb416 	blt	r2,r3,801650 <drawBmp+0x24>

				drawPixelFast(x + j, y + i, bmp->color[offset +j]);
			}
		}
	}
}
  801780:	e037883a 	mov	sp,fp
  801784:	dfc00117 	ldw	ra,4(sp)
  801788:	df000017 	ldw	fp,0(sp)
  80178c:	dec00204 	addi	sp,sp,8
  801790:	f800283a 	ret

00801794 <eraseBmp>:

void eraseBmp (BMP *bmp, int x, int y) {
  801794:	defffa04 	addi	sp,sp,-24
  801798:	dfc00515 	stw	ra,20(sp)
  80179c:	df000415 	stw	fp,16(sp)
  8017a0:	df000404 	addi	fp,sp,16
  8017a4:	e13ffd15 	stw	r4,-12(fp)
  8017a8:	e17ffe15 	stw	r5,-8(fp)
  8017ac:	e1bfff15 	stw	r6,-4(fp)
	if (x >= 0 && x < SCREEN_WIDTH && y >= 0 && y < SCREEN_HEIGHT) {
  8017b0:	e0bffe17 	ldw	r2,-8(fp)
  8017b4:	1004803a 	cmplt	r2,r2,zero
  8017b8:	1000161e 	bne	r2,zero,801814 <eraseBmp+0x80>
  8017bc:	e0bffe17 	ldw	r2,-8(fp)
  8017c0:	10805508 	cmpgei	r2,r2,340
  8017c4:	1000131e 	bne	r2,zero,801814 <eraseBmp+0x80>
  8017c8:	e0bfff17 	ldw	r2,-4(fp)
  8017cc:	1004803a 	cmplt	r2,r2,zero
  8017d0:	1000101e 	bne	r2,zero,801814 <eraseBmp+0x80>
  8017d4:	e0bfff17 	ldw	r2,-4(fp)
  8017d8:	10803c08 	cmpgei	r2,r2,240
  8017dc:	10000d1e 	bne	r2,zero,801814 <eraseBmp+0x80>
		drawBox(x, y, x + bmp->infoheader.width, y + bmp->infoheader.height, 0);
  8017e0:	e0bffd17 	ldw	r2,-12(fp)
  8017e4:	10c00517 	ldw	r3,20(r2)
  8017e8:	e0bffe17 	ldw	r2,-8(fp)
  8017ec:	188d883a 	add	r6,r3,r2
  8017f0:	e0bffd17 	ldw	r2,-12(fp)
  8017f4:	10c00617 	ldw	r3,24(r2)
  8017f8:	e0bfff17 	ldw	r2,-4(fp)
  8017fc:	188f883a 	add	r7,r3,r2
  801800:	d8000015 	stw	zero,0(sp)
  801804:	e13ffe17 	ldw	r4,-8(fp)
  801808:	e17fff17 	ldw	r5,-4(fp)
  80180c:	08064f80 	call	8064f8 <drawBox>
		}
	}
}

void eraseBmp (BMP *bmp, int x, int y) {
	if (x >= 0 && x < SCREEN_WIDTH && y >= 0 && y < SCREEN_HEIGHT) {
  801810:	00002a06 	br	8018bc <eraseBmp+0x128>
		drawBox(x, y, x + bmp->infoheader.width, y + bmp->infoheader.height, 0);
	} else {
		if (x < 0 && x > -(bmp->infoheader.width)) {
  801814:	e0bffe17 	ldw	r2,-8(fp)
  801818:	1004403a 	cmpge	r2,r2,zero
  80181c:	1000111e 	bne	r2,zero,801864 <eraseBmp+0xd0>
  801820:	e0bffd17 	ldw	r2,-12(fp)
  801824:	10800517 	ldw	r2,20(r2)
  801828:	0087c83a 	sub	r3,zero,r2
  80182c:	e0bffe17 	ldw	r2,-8(fp)
  801830:	18800c0e 	bge	r3,r2,801864 <eraseBmp+0xd0>
			drawBox(0, y, x + bmp->infoheader.width, y + bmp->infoheader.height, 0);
  801834:	e0bffd17 	ldw	r2,-12(fp)
  801838:	10c00517 	ldw	r3,20(r2)
  80183c:	e0bffe17 	ldw	r2,-8(fp)
  801840:	188d883a 	add	r6,r3,r2
  801844:	e0bffd17 	ldw	r2,-12(fp)
  801848:	10c00617 	ldw	r3,24(r2)
  80184c:	e0bfff17 	ldw	r2,-4(fp)
  801850:	188f883a 	add	r7,r3,r2
  801854:	d8000015 	stw	zero,0(sp)
  801858:	0009883a 	mov	r4,zero
  80185c:	e17fff17 	ldw	r5,-4(fp)
  801860:	08064f80 	call	8064f8 <drawBox>
		}
		if (y < 0 && y > -(bmp->infoheader.height)) {
  801864:	e0bfff17 	ldw	r2,-4(fp)
  801868:	1004403a 	cmpge	r2,r2,zero
  80186c:	1000131e 	bne	r2,zero,8018bc <eraseBmp+0x128>
  801870:	e0bffd17 	ldw	r2,-12(fp)
  801874:	10800617 	ldw	r2,24(r2)
  801878:	0087c83a 	sub	r3,zero,r2
  80187c:	e0bfff17 	ldw	r2,-4(fp)
  801880:	18800e0e 	bge	r3,r2,8018bc <eraseBmp+0x128>
			drawBox(x, 0, x + bmp->infoheader.width, (y + bmp->infoheader.height + y), 0);
  801884:	e0bffd17 	ldw	r2,-12(fp)
  801888:	10c00517 	ldw	r3,20(r2)
  80188c:	e0bffe17 	ldw	r2,-8(fp)
  801890:	188d883a 	add	r6,r3,r2
  801894:	e0bffd17 	ldw	r2,-12(fp)
  801898:	10c00617 	ldw	r3,24(r2)
  80189c:	e0bfff17 	ldw	r2,-4(fp)
  8018a0:	1887883a 	add	r3,r3,r2
  8018a4:	e0bfff17 	ldw	r2,-4(fp)
  8018a8:	188f883a 	add	r7,r3,r2
  8018ac:	d8000015 	stw	zero,0(sp)
  8018b0:	e13ffe17 	ldw	r4,-8(fp)
  8018b4:	000b883a 	mov	r5,zero
  8018b8:	08064f80 	call	8064f8 <drawBox>
		}
	}
}
  8018bc:	e037883a 	mov	sp,fp
  8018c0:	dfc00117 	ldw	ra,4(sp)
  8018c4:	df000017 	ldw	fp,0(sp)
  8018c8:	dec00204 	addi	sp,sp,8
  8018cc:	f800283a 	ret

008018d0 <initBullets>:
Bullet *playerBulletList = NULL;
Bullet *sharkBulletList = NULL;
int playerLaserColor;
int sharkLaserColor;

void initBullets() {
  8018d0:	defffd04 	addi	sp,sp,-12
  8018d4:	dfc00215 	stw	ra,8(sp)
  8018d8:	df000115 	stw	fp,4(sp)
  8018dc:	df000104 	addi	fp,sp,4
	int i = 0;
  8018e0:	e03fff15 	stw	zero,-4(fp)
	for (i = 0; i < NUM_BULLETS; i++) {
  8018e4:	e03fff15 	stw	zero,-4(fp)
  8018e8:	00001906 	br	801950 <initBullets+0x80>
		bulletArray[i].type = NOTACTIVE;
  8018ec:	e0bfff17 	ldw	r2,-4(fp)
  8018f0:	00c020b4 	movhi	r3,130
  8018f4:	18c3a704 	addi	r3,r3,3740
  8018f8:	10800a24 	muli	r2,r2,40
  8018fc:	10c5883a 	add	r2,r2,r3
  801900:	10c00404 	addi	r3,r2,16
  801904:	00800084 	movi	r2,2
  801908:	18800015 	stw	r2,0(r3)
		bulletArray[i].next = NULL;
  80190c:	e0bfff17 	ldw	r2,-4(fp)
  801910:	00c020b4 	movhi	r3,130
  801914:	18c3a704 	addi	r3,r3,3740
  801918:	10800a24 	muli	r2,r2,40
  80191c:	10c5883a 	add	r2,r2,r3
  801920:	10800804 	addi	r2,r2,32
  801924:	10000015 	stw	zero,0(r2)
		bulletArray[i].prev = NULL;
  801928:	e0bfff17 	ldw	r2,-4(fp)
  80192c:	00c020b4 	movhi	r3,130
  801930:	18c3a704 	addi	r3,r3,3740
  801934:	10800a24 	muli	r2,r2,40
  801938:	10c5883a 	add	r2,r2,r3
  80193c:	10800904 	addi	r2,r2,36
  801940:	10000015 	stw	zero,0(r2)
int playerLaserColor;
int sharkLaserColor;

void initBullets() {
	int i = 0;
	for (i = 0; i < NUM_BULLETS; i++) {
  801944:	e0bfff17 	ldw	r2,-4(fp)
  801948:	10800044 	addi	r2,r2,1
  80194c:	e0bfff15 	stw	r2,-4(fp)
  801950:	e0bfff17 	ldw	r2,-4(fp)
  801954:	10802010 	cmplti	r2,r2,128
  801958:	103fe41e 	bne	r2,zero,8018ec <initBullets+0x1c>
		bulletArray[i].type = NOTACTIVE;
		bulletArray[i].next = NULL;
		bulletArray[i].prev = NULL;
	}

	playerLaserColor = convert24BitRgbTo16(0xFF0000);
  80195c:	01003ff4 	movhi	r4,255
  801960:	08065580 	call	806558 <convert24BitRgbTo16>
  801964:	d0a72515 	stw	r2,-25452(gp)
	sharkLaserColor = convert24BitRgbTo16(0x66FFCC);
  801968:	010019f4 	movhi	r4,103
  80196c:	213ff304 	addi	r4,r4,-52
  801970:	08065580 	call	806558 <convert24BitRgbTo16>
  801974:	d0a72415 	stw	r2,-25456(gp)
}
  801978:	e037883a 	mov	sp,fp
  80197c:	dfc00117 	ldw	ra,4(sp)
  801980:	df000017 	ldw	fp,0(sp)
  801984:	dec00204 	addi	sp,sp,8
  801988:	f800283a 	ret

0080198c <createBullet>:

void createBullet(bullettype type, int x, int y, int sudoRandomSeed) {
  80198c:	defff404 	addi	sp,sp,-48
  801990:	dfc00b15 	stw	ra,44(sp)
  801994:	df000a15 	stw	fp,40(sp)
  801998:	dcc00915 	stw	r19,36(sp)
  80199c:	dc800815 	stw	r18,32(sp)
  8019a0:	dc400715 	stw	r17,28(sp)
  8019a4:	dc000615 	stw	r16,24(sp)
  8019a8:	df000604 	addi	fp,sp,24
  8019ac:	e13ffc15 	stw	r4,-16(fp)
  8019b0:	e17ffd15 	stw	r5,-12(fp)
  8019b4:	e1bffe15 	stw	r6,-8(fp)
  8019b8:	e1ffff15 	stw	r7,-4(fp)
	int index;
	Bullet *newBullet = NULL;
  8019bc:	e03ffa15 	stw	zero,-24(fp)
	for (index = 0; index < NUM_BULLETS; index++) {
  8019c0:	e03ffb15 	stw	zero,-20(fp)
  8019c4:	00002306 	br	801a54 <createBullet+0xc8>
		if (bulletArray[index].type == NOTACTIVE)	{
  8019c8:	e0bffb17 	ldw	r2,-20(fp)
  8019cc:	00c020b4 	movhi	r3,130
  8019d0:	18c3a704 	addi	r3,r3,3740
  8019d4:	10800a24 	muli	r2,r2,40
  8019d8:	10c5883a 	add	r2,r2,r3
  8019dc:	10800404 	addi	r2,r2,16
  8019e0:	10800017 	ldw	r2,0(r2)
  8019e4:	10800098 	cmpnei	r2,r2,2
  8019e8:	1000171e 	bne	r2,zero,801a48 <createBullet+0xbc>
			newBullet = &(bulletArray[index]);
  8019ec:	e0bffb17 	ldw	r2,-20(fp)
  8019f0:	10800a24 	muli	r2,r2,40
  8019f4:	1007883a 	mov	r3,r2
  8019f8:	008020b4 	movhi	r2,130
  8019fc:	1083a704 	addi	r2,r2,3740
  801a00:	1885883a 	add	r2,r3,r2
  801a04:	e0bffa15 	stw	r2,-24(fp)
			newBullet->x = x;
  801a08:	e0fffa17 	ldw	r3,-24(fp)
  801a0c:	e0bffd17 	ldw	r2,-12(fp)
  801a10:	18800015 	stw	r2,0(r3)
			newBullet->y = y;
  801a14:	e0fffa17 	ldw	r3,-24(fp)
  801a18:	e0bffe17 	ldw	r2,-8(fp)
  801a1c:	18800215 	stw	r2,8(r3)
			newBullet->prevX = x;
  801a20:	e0fffa17 	ldw	r3,-24(fp)
  801a24:	e0bffd17 	ldw	r2,-12(fp)
  801a28:	18800115 	stw	r2,4(r3)
			newBullet->prevY = y;
  801a2c:	e0fffa17 	ldw	r3,-24(fp)
  801a30:	e0bffe17 	ldw	r2,-8(fp)
  801a34:	18800315 	stw	r2,12(r3)
			newBullet->type = type;
  801a38:	e0fffa17 	ldw	r3,-24(fp)
  801a3c:	e0bffc17 	ldw	r2,-16(fp)
  801a40:	18800415 	stw	r2,16(r3)

			break;
  801a44:	00000606 	br	801a60 <createBullet+0xd4>
}

void createBullet(bullettype type, int x, int y, int sudoRandomSeed) {
	int index;
	Bullet *newBullet = NULL;
	for (index = 0; index < NUM_BULLETS; index++) {
  801a48:	e0bffb17 	ldw	r2,-20(fp)
  801a4c:	10800044 	addi	r2,r2,1
  801a50:	e0bffb15 	stw	r2,-20(fp)
  801a54:	e0bffb17 	ldw	r2,-20(fp)
  801a58:	10802010 	cmplti	r2,r2,128
  801a5c:	103fda1e 	bne	r2,zero,8019c8 <createBullet+0x3c>

			break;
		}
	}

	if (type == PLAYERBULLET) {
  801a60:	e0bffc17 	ldw	r2,-16(fp)
  801a64:	1004c03a 	cmpne	r2,r2,zero
  801a68:	1000131e 	bne	r2,zero,801ab8 <createBullet+0x12c>
		if (playerBulletList != NULL) {
  801a6c:	d0a72217 	ldw	r2,-25464(gp)
  801a70:	1005003a 	cmpeq	r2,r2,zero
  801a74:	1000031e 	bne	r2,zero,801a84 <createBullet+0xf8>
			playerBulletList->prev = newBullet;
  801a78:	d0e72217 	ldw	r3,-25464(gp)
  801a7c:	e0bffa17 	ldw	r2,-24(fp)
  801a80:	18800915 	stw	r2,36(r3)
		}
		newBullet->next = playerBulletList;
  801a84:	d0e72217 	ldw	r3,-25464(gp)
  801a88:	e0bffa17 	ldw	r2,-24(fp)
  801a8c:	10c00815 	stw	r3,32(r2)
		newBullet->laserColor = playerLaserColor;
  801a90:	d0e72517 	ldw	r3,-25452(gp)
  801a94:	e0bffa17 	ldw	r2,-24(fp)
  801a98:	10c00715 	stw	r3,28(r2)
		newBullet->isAimed = 0;
  801a9c:	e0bffa17 	ldw	r2,-24(fp)
  801aa0:	10000505 	stb	zero,20(r2)
		newBullet->slope = 0;
  801aa4:	e0bffa17 	ldw	r2,-24(fp)
  801aa8:	10000615 	stw	zero,24(r2)
		playerBulletList = newBullet;
  801aac:	e0bffa17 	ldw	r2,-24(fp)
  801ab0:	d0a72215 	stw	r2,-25464(gp)
  801ab4:	00005b06 	br	801c24 <createBullet+0x298>
	} else if (type == SHARKBULLET) {
  801ab8:	e0bffc17 	ldw	r2,-16(fp)
  801abc:	10800058 	cmpnei	r2,r2,1
  801ac0:	1000581e 	bne	r2,zero,801c24 <createBullet+0x298>
		if (sharkBulletList != NULL) {
  801ac4:	d0a72317 	ldw	r2,-25460(gp)
  801ac8:	1005003a 	cmpeq	r2,r2,zero
  801acc:	1000031e 	bne	r2,zero,801adc <createBullet+0x150>
			sharkBulletList->prev = newBullet;
  801ad0:	d0e72317 	ldw	r3,-25460(gp)
  801ad4:	e0bffa17 	ldw	r2,-24(fp)
  801ad8:	18800915 	stw	r2,36(r3)
		}
		newBullet->next = sharkBulletList;
  801adc:	d0e72317 	ldw	r3,-25460(gp)
  801ae0:	e0bffa17 	ldw	r2,-24(fp)
  801ae4:	10c00815 	stw	r3,32(r2)
		newBullet->laserColor = sharkLaserColor;
  801ae8:	d0e72417 	ldw	r3,-25456(gp)
  801aec:	e0bffa17 	ldw	r2,-24(fp)
  801af0:	10c00715 	stw	r3,28(r2)
		newBullet->isAimed = 1;
  801af4:	e0fffa17 	ldw	r3,-24(fp)
  801af8:	00800044 	movi	r2,1
  801afc:	18800505 	stb	r2,20(r3)
		//newBullet->isAimed = sudoRandomSeed%2;
		newBullet->slope = (y - (player.y + 0.5*PLAYER_HEIGHT))/(x - (player.x + 0.5*PLAYER_WIDTH));
  801b00:	e13ffe17 	ldw	r4,-8(fp)
  801b04:	08094f80 	call	8094f8 <__floatsidf>
  801b08:	1021883a 	mov	r16,r2
  801b0c:	1823883a 	mov	r17,r3
  801b10:	008020b4 	movhi	r2,130
  801b14:	1083a304 	addi	r2,r2,3724
  801b18:	11000217 	ldw	r4,8(r2)
  801b1c:	08094f80 	call	8094f8 <__floatsidf>
  801b20:	100b883a 	mov	r5,r2
  801b24:	180d883a 	mov	r6,r3
  801b28:	2809883a 	mov	r4,r5
  801b2c:	300b883a 	mov	r5,r6
  801b30:	000d883a 	mov	r6,zero
  801b34:	01d00af4 	movhi	r7,16427
  801b38:	0808bc00 	call	808bc0 <__adddf3>
  801b3c:	1009883a 	mov	r4,r2
  801b40:	180b883a 	mov	r5,r3
  801b44:	2005883a 	mov	r2,r4
  801b48:	2807883a 	mov	r3,r5
  801b4c:	8009883a 	mov	r4,r16
  801b50:	880b883a 	mov	r5,r17
  801b54:	100d883a 	mov	r6,r2
  801b58:	180f883a 	mov	r7,r3
  801b5c:	0808b400 	call	808b40 <__subdf3>
  801b60:	1009883a 	mov	r4,r2
  801b64:	180b883a 	mov	r5,r3
  801b68:	2025883a 	mov	r18,r4
  801b6c:	2827883a 	mov	r19,r5
  801b70:	e13ffd17 	ldw	r4,-12(fp)
  801b74:	08094f80 	call	8094f8 <__floatsidf>
  801b78:	1021883a 	mov	r16,r2
  801b7c:	1823883a 	mov	r17,r3
  801b80:	008020b4 	movhi	r2,130
  801b84:	1083a304 	addi	r2,r2,3724
  801b88:	11000017 	ldw	r4,0(r2)
  801b8c:	08094f80 	call	8094f8 <__floatsidf>
  801b90:	100b883a 	mov	r5,r2
  801b94:	180d883a 	mov	r6,r3
  801b98:	2809883a 	mov	r4,r5
  801b9c:	300b883a 	mov	r5,r6
  801ba0:	000d883a 	mov	r6,zero
  801ba4:	01d00b34 	movhi	r7,16428
  801ba8:	0808bc00 	call	808bc0 <__adddf3>
  801bac:	1009883a 	mov	r4,r2
  801bb0:	180b883a 	mov	r5,r3
  801bb4:	2005883a 	mov	r2,r4
  801bb8:	2807883a 	mov	r3,r5
  801bbc:	8009883a 	mov	r4,r16
  801bc0:	880b883a 	mov	r5,r17
  801bc4:	100d883a 	mov	r6,r2
  801bc8:	180f883a 	mov	r7,r3
  801bcc:	0808b400 	call	808b40 <__subdf3>
  801bd0:	1009883a 	mov	r4,r2
  801bd4:	180b883a 	mov	r5,r3
  801bd8:	2005883a 	mov	r2,r4
  801bdc:	2807883a 	mov	r3,r5
  801be0:	9009883a 	mov	r4,r18
  801be4:	980b883a 	mov	r5,r19
  801be8:	100d883a 	mov	r6,r2
  801bec:	180f883a 	mov	r7,r3
  801bf0:	0808ff80 	call	808ff8 <__divdf3>
  801bf4:	1009883a 	mov	r4,r2
  801bf8:	180b883a 	mov	r5,r3
  801bfc:	2005883a 	mov	r2,r4
  801c00:	2807883a 	mov	r3,r5
  801c04:	1009883a 	mov	r4,r2
  801c08:	180b883a 	mov	r5,r3
  801c0c:	08095f00 	call	8095f0 <__fixdfsi>
  801c10:	1007883a 	mov	r3,r2
  801c14:	e0bffa17 	ldw	r2,-24(fp)
  801c18:	10c00615 	stw	r3,24(r2)
		sharkBulletList = newBullet;
  801c1c:	e0bffa17 	ldw	r2,-24(fp)
  801c20:	d0a72315 	stw	r2,-25460(gp)
	}

	playLaser();
  801c24:	0800b2c0 	call	800b2c <playLaser>
}
  801c28:	e037883a 	mov	sp,fp
  801c2c:	dfc00517 	ldw	ra,20(sp)
  801c30:	df000417 	ldw	fp,16(sp)
  801c34:	dcc00317 	ldw	r19,12(sp)
  801c38:	dc800217 	ldw	r18,8(sp)
  801c3c:	dc400117 	ldw	r17,4(sp)
  801c40:	dc000017 	ldw	r16,0(sp)
  801c44:	dec00604 	addi	sp,sp,24
  801c48:	f800283a 	ret

00801c4c <moveAllBullets>:

void moveAllBullets() {
  801c4c:	defffd04 	addi	sp,sp,-12
  801c50:	dfc00215 	stw	ra,8(sp)
  801c54:	df000115 	stw	fp,4(sp)
  801c58:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801c5c:	e03fff15 	stw	zero,-4(fp)
  801c60:	00005206 	br	801dac <moveAllBullets+0x160>
		if (bulletArray[i].type == PLAYERBULLET) {
  801c64:	e0bfff17 	ldw	r2,-4(fp)
  801c68:	00c020b4 	movhi	r3,130
  801c6c:	18c3a704 	addi	r3,r3,3740
  801c70:	10800a24 	muli	r2,r2,40
  801c74:	10c5883a 	add	r2,r2,r3
  801c78:	10800404 	addi	r2,r2,16
  801c7c:	10800017 	ldw	r2,0(r2)
  801c80:	1004c03a 	cmpne	r2,r2,zero
  801c84:	1000081e 	bne	r2,zero,801ca8 <moveAllBullets+0x5c>
			moveBulletRight(&bulletArray[i]);
  801c88:	e0bfff17 	ldw	r2,-4(fp)
  801c8c:	10800a24 	muli	r2,r2,40
  801c90:	1007883a 	mov	r3,r2
  801c94:	008020b4 	movhi	r2,130
  801c98:	1083a704 	addi	r2,r2,3740
  801c9c:	1889883a 	add	r4,r3,r2
  801ca0:	080208c0 	call	80208c <moveBulletRight>
  801ca4:	00003e06 	br	801da0 <moveAllBullets+0x154>
		} else if (bulletArray[i].type == SHARKBULLET) {
  801ca8:	e0bfff17 	ldw	r2,-4(fp)
  801cac:	00c020b4 	movhi	r3,130
  801cb0:	18c3a704 	addi	r3,r3,3740
  801cb4:	10800a24 	muli	r2,r2,40
  801cb8:	10c5883a 	add	r2,r2,r3
  801cbc:	10800404 	addi	r2,r2,16
  801cc0:	10800017 	ldw	r2,0(r2)
  801cc4:	10800058 	cmpnei	r2,r2,1
  801cc8:	1000081e 	bne	r2,zero,801cec <moveAllBullets+0xa0>
			moveBulletLeft(&bulletArray[i]);
  801ccc:	e0bfff17 	ldw	r2,-4(fp)
  801cd0:	10800a24 	muli	r2,r2,40
  801cd4:	1007883a 	mov	r3,r2
  801cd8:	008020b4 	movhi	r2,130
  801cdc:	1083a704 	addi	r2,r2,3740
  801ce0:	1889883a 	add	r4,r3,r2
  801ce4:	08021e00 	call	8021e0 <moveBulletLeft>
  801ce8:	00002d06 	br	801da0 <moveAllBullets+0x154>
		} else if (bulletArray[i].type == DELETED || bulletArray[i].type == ONEMORE) {
  801cec:	e0bfff17 	ldw	r2,-4(fp)
  801cf0:	00c020b4 	movhi	r3,130
  801cf4:	18c3a704 	addi	r3,r3,3740
  801cf8:	10800a24 	muli	r2,r2,40
  801cfc:	10c5883a 	add	r2,r2,r3
  801d00:	10800404 	addi	r2,r2,16
  801d04:	10800017 	ldw	r2,0(r2)
  801d08:	108000e0 	cmpeqi	r2,r2,3
  801d0c:	1000091e 	bne	r2,zero,801d34 <moveAllBullets+0xe8>
  801d10:	e0bfff17 	ldw	r2,-4(fp)
  801d14:	00c020b4 	movhi	r3,130
  801d18:	18c3a704 	addi	r3,r3,3740
  801d1c:	10800a24 	muli	r2,r2,40
  801d20:	10c5883a 	add	r2,r2,r3
  801d24:	10800404 	addi	r2,r2,16
  801d28:	10800017 	ldw	r2,0(r2)
  801d2c:	10800118 	cmpnei	r2,r2,4
  801d30:	10001b1e 	bne	r2,zero,801da0 <moveAllBullets+0x154>
			bulletArray[i].prevX = bulletArray[i].x;
  801d34:	e17fff17 	ldw	r5,-4(fp)
  801d38:	e0bfff17 	ldw	r2,-4(fp)
  801d3c:	00c020b4 	movhi	r3,130
  801d40:	18c3a704 	addi	r3,r3,3740
  801d44:	10800a24 	muli	r2,r2,40
  801d48:	10c5883a 	add	r2,r2,r3
  801d4c:	11000017 	ldw	r4,0(r2)
  801d50:	00c020b4 	movhi	r3,130
  801d54:	18c3a704 	addi	r3,r3,3740
  801d58:	28800a24 	muli	r2,r5,40
  801d5c:	10c5883a 	add	r2,r2,r3
  801d60:	10800104 	addi	r2,r2,4
  801d64:	11000015 	stw	r4,0(r2)
			bulletArray[i].prevY = bulletArray[i].y;
  801d68:	e17fff17 	ldw	r5,-4(fp)
  801d6c:	e0bfff17 	ldw	r2,-4(fp)
  801d70:	00c020b4 	movhi	r3,130
  801d74:	18c3a704 	addi	r3,r3,3740
  801d78:	10800a24 	muli	r2,r2,40
  801d7c:	10c5883a 	add	r2,r2,r3
  801d80:	10800204 	addi	r2,r2,8
  801d84:	11000017 	ldw	r4,0(r2)
  801d88:	00c020b4 	movhi	r3,130
  801d8c:	18c3a704 	addi	r3,r3,3740
  801d90:	28800a24 	muli	r2,r5,40
  801d94:	10c5883a 	add	r2,r2,r3
  801d98:	10800304 	addi	r2,r2,12
  801d9c:	11000015 	stw	r4,0(r2)
	playLaser();
}

void moveAllBullets() {
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801da0:	e0bfff17 	ldw	r2,-4(fp)
  801da4:	10800044 	addi	r2,r2,1
  801da8:	e0bfff15 	stw	r2,-4(fp)
  801dac:	e0bfff17 	ldw	r2,-4(fp)
  801db0:	10802010 	cmplti	r2,r2,128
  801db4:	103fab1e 	bne	r2,zero,801c64 <moveAllBullets+0x18>
		} else if (bulletArray[i].type == DELETED || bulletArray[i].type == ONEMORE) {
			bulletArray[i].prevX = bulletArray[i].x;
			bulletArray[i].prevY = bulletArray[i].y;
		}
	}
}
  801db8:	e037883a 	mov	sp,fp
  801dbc:	dfc00117 	ldw	ra,4(sp)
  801dc0:	df000017 	ldw	fp,0(sp)
  801dc4:	dec00204 	addi	sp,sp,8
  801dc8:	f800283a 	ret

00801dcc <drawAllBullets>:

void drawAllBullets() {
  801dcc:	defffd04 	addi	sp,sp,-12
  801dd0:	dfc00215 	stw	ra,8(sp)
  801dd4:	df000115 	stw	fp,4(sp)
  801dd8:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801ddc:	e03fff15 	stw	zero,-4(fp)
  801de0:	00001306 	br	801e30 <drawAllBullets+0x64>
		if (bulletArray[i].type != NOTACTIVE) {
  801de4:	e0bfff17 	ldw	r2,-4(fp)
  801de8:	00c020b4 	movhi	r3,130
  801dec:	18c3a704 	addi	r3,r3,3740
  801df0:	10800a24 	muli	r2,r2,40
  801df4:	10c5883a 	add	r2,r2,r3
  801df8:	10800404 	addi	r2,r2,16
  801dfc:	10800017 	ldw	r2,0(r2)
  801e00:	108000a0 	cmpeqi	r2,r2,2
  801e04:	1000071e 	bne	r2,zero,801e24 <drawAllBullets+0x58>
			drawBullet(&bulletArray[i]);
  801e08:	e0bfff17 	ldw	r2,-4(fp)
  801e0c:	10800a24 	muli	r2,r2,40
  801e10:	1007883a 	mov	r3,r2
  801e14:	008020b4 	movhi	r2,130
  801e18:	1083a704 	addi	r2,r2,3740
  801e1c:	1889883a 	add	r4,r3,r2
  801e20:	0801ed40 	call	801ed4 <drawBullet>
	}
}

void drawAllBullets() {
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801e24:	e0bfff17 	ldw	r2,-4(fp)
  801e28:	10800044 	addi	r2,r2,1
  801e2c:	e0bfff15 	stw	r2,-4(fp)
  801e30:	e0bfff17 	ldw	r2,-4(fp)
  801e34:	10802010 	cmplti	r2,r2,128
  801e38:	103fea1e 	bne	r2,zero,801de4 <drawAllBullets+0x18>
		if (bulletArray[i].type != NOTACTIVE) {
			drawBullet(&bulletArray[i]);
		}
	}
}
  801e3c:	e037883a 	mov	sp,fp
  801e40:	dfc00117 	ldw	ra,4(sp)
  801e44:	df000017 	ldw	fp,0(sp)
  801e48:	dec00204 	addi	sp,sp,8
  801e4c:	f800283a 	ret

00801e50 <eraseAllBullets>:

void eraseAllBullets() {
  801e50:	defffd04 	addi	sp,sp,-12
  801e54:	dfc00215 	stw	ra,8(sp)
  801e58:	df000115 	stw	fp,4(sp)
  801e5c:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801e60:	e03fff15 	stw	zero,-4(fp)
  801e64:	00001306 	br	801eb4 <eraseAllBullets+0x64>
		if (bulletArray[i].type != NOTACTIVE) {
  801e68:	e0bfff17 	ldw	r2,-4(fp)
  801e6c:	00c020b4 	movhi	r3,130
  801e70:	18c3a704 	addi	r3,r3,3740
  801e74:	10800a24 	muli	r2,r2,40
  801e78:	10c5883a 	add	r2,r2,r3
  801e7c:	10800404 	addi	r2,r2,16
  801e80:	10800017 	ldw	r2,0(r2)
  801e84:	108000a0 	cmpeqi	r2,r2,2
  801e88:	1000071e 	bne	r2,zero,801ea8 <eraseAllBullets+0x58>
			eraseBullet(&bulletArray[i]);
  801e8c:	e0bfff17 	ldw	r2,-4(fp)
  801e90:	10800a24 	muli	r2,r2,40
  801e94:	1007883a 	mov	r3,r2
  801e98:	008020b4 	movhi	r2,130
  801e9c:	1083a704 	addi	r2,r2,3740
  801ea0:	1889883a 	add	r4,r3,r2
  801ea4:	0801f800 	call	801f80 <eraseBullet>
	}
}

void eraseAllBullets() {
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801ea8:	e0bfff17 	ldw	r2,-4(fp)
  801eac:	10800044 	addi	r2,r2,1
  801eb0:	e0bfff15 	stw	r2,-4(fp)
  801eb4:	e0bfff17 	ldw	r2,-4(fp)
  801eb8:	10802010 	cmplti	r2,r2,128
  801ebc:	103fea1e 	bne	r2,zero,801e68 <eraseAllBullets+0x18>
		if (bulletArray[i].type != NOTACTIVE) {
			eraseBullet(&bulletArray[i]);
		}
	}
}
  801ec0:	e037883a 	mov	sp,fp
  801ec4:	dfc00117 	ldw	ra,4(sp)
  801ec8:	df000017 	ldw	fp,0(sp)
  801ecc:	dec00204 	addi	sp,sp,8
  801ed0:	f800283a 	ret

00801ed4 <drawBullet>:

void drawBullet(Bullet *bullet) {
  801ed4:	defffc04 	addi	sp,sp,-16
  801ed8:	dfc00315 	stw	ra,12(sp)
  801edc:	df000215 	stw	fp,8(sp)
  801ee0:	df000204 	addi	fp,sp,8
  801ee4:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = 0; i < BULLET_LENGTH; i++) {
  801ee8:	e03ffe15 	stw	zero,-8(fp)
  801eec:	00001c06 	br	801f60 <drawBullet+0x8c>
		if (bullet != NULL) {
  801ef0:	e0bfff17 	ldw	r2,-4(fp)
  801ef4:	1005003a 	cmpeq	r2,r2,zero
  801ef8:	1000131e 	bne	r2,zero,801f48 <drawBullet+0x74>
			drawPixelFast(bullet->x + i, bullet->y + i*bullet->slope, bullet->laserColor);
  801efc:	e0bfff17 	ldw	r2,-4(fp)
  801f00:	10c00017 	ldw	r3,0(r2)
  801f04:	e0bffe17 	ldw	r2,-8(fp)
  801f08:	1885883a 	add	r2,r3,r2
  801f0c:	100f883a 	mov	r7,r2
  801f10:	e0bfff17 	ldw	r2,-4(fp)
  801f14:	11000217 	ldw	r4,8(r2)
  801f18:	e0bfff17 	ldw	r2,-4(fp)
  801f1c:	10c00617 	ldw	r3,24(r2)
  801f20:	e0bffe17 	ldw	r2,-8(fp)
  801f24:	1885383a 	mul	r2,r3,r2
  801f28:	2085883a 	add	r2,r4,r2
  801f2c:	100b883a 	mov	r5,r2
  801f30:	e0bfff17 	ldw	r2,-4(fp)
  801f34:	10800717 	ldw	r2,28(r2)
  801f38:	100d883a 	mov	r6,r2
  801f3c:	3809883a 	mov	r4,r7
  801f40:	08063680 	call	806368 <drawPixelFast>
  801f44:	00000306 	br	801f54 <drawBullet+0x80>
		} else {
			printf("Attempt to draw null bullet.\n");
  801f48:	010020b4 	movhi	r4,130
  801f4c:	2132a204 	addi	r4,r4,-13688
  801f50:	080a9300 	call	80a930 <puts>
	}
}

void drawBullet(Bullet *bullet) {
	int i;
	for (i = 0; i < BULLET_LENGTH; i++) {
  801f54:	e0bffe17 	ldw	r2,-8(fp)
  801f58:	10800044 	addi	r2,r2,1
  801f5c:	e0bffe15 	stw	r2,-8(fp)
  801f60:	e0bffe17 	ldw	r2,-8(fp)
  801f64:	108000d0 	cmplti	r2,r2,3
  801f68:	103fe11e 	bne	r2,zero,801ef0 <drawBullet+0x1c>
			drawPixelFast(bullet->x + i, bullet->y + i*bullet->slope, bullet->laserColor);
		} else {
			printf("Attempt to draw null bullet.\n");
		}
	}
}
  801f6c:	e037883a 	mov	sp,fp
  801f70:	dfc00117 	ldw	ra,4(sp)
  801f74:	df000017 	ldw	fp,0(sp)
  801f78:	dec00204 	addi	sp,sp,8
  801f7c:	f800283a 	ret

00801f80 <eraseBullet>:

void eraseBullet(Bullet *bullet) {
  801f80:	defffa04 	addi	sp,sp,-24
  801f84:	dfc00515 	stw	ra,20(sp)
  801f88:	df000415 	stw	fp,16(sp)
  801f8c:	df000404 	addi	fp,sp,16
  801f90:	e13ffd15 	stw	r4,-12(fp)
	int i;
	for (i = 0; i < BULLET_LENGTH; i++) {
  801f94:	e03ffc15 	stw	zero,-16(fp)
  801f98:	00003406 	br	80206c <eraseBullet+0xec>
		if (bullet != NULL) {
  801f9c:	e0bffd17 	ldw	r2,-12(fp)
  801fa0:	1005003a 	cmpeq	r2,r2,zero
  801fa4:	10002b1e 	bne	r2,zero,802054 <eraseBullet+0xd4>
			drawPixelFast(bullet->prevX + i, bullet->prevY + i*bullet->slope, 0x0000);
  801fa8:	e0bffd17 	ldw	r2,-12(fp)
  801fac:	10c00117 	ldw	r3,4(r2)
  801fb0:	e0bffc17 	ldw	r2,-16(fp)
  801fb4:	1885883a 	add	r2,r3,r2
  801fb8:	100d883a 	mov	r6,r2
  801fbc:	e0bffd17 	ldw	r2,-12(fp)
  801fc0:	11000317 	ldw	r4,12(r2)
  801fc4:	e0bffd17 	ldw	r2,-12(fp)
  801fc8:	10c00617 	ldw	r3,24(r2)
  801fcc:	e0bffc17 	ldw	r2,-16(fp)
  801fd0:	1885383a 	mul	r2,r3,r2
  801fd4:	2085883a 	add	r2,r4,r2
  801fd8:	100b883a 	mov	r5,r2
  801fdc:	3009883a 	mov	r4,r6
  801fe0:	000d883a 	mov	r6,zero
  801fe4:	08063680 	call	806368 <drawPixelFast>
			bullet->type = bullet->type == DELETED ? ONEMORE : bullet->type;
  801fe8:	e0bffd17 	ldw	r2,-12(fp)
  801fec:	10800417 	ldw	r2,16(r2)
  801ff0:	108000e0 	cmpeqi	r2,r2,3
  801ff4:	1000041e 	bne	r2,zero,802008 <eraseBullet+0x88>
  801ff8:	e0bffd17 	ldw	r2,-12(fp)
  801ffc:	10800417 	ldw	r2,16(r2)
  802000:	e0bfff15 	stw	r2,-4(fp)
  802004:	00000206 	br	802010 <eraseBullet+0x90>
  802008:	00800104 	movi	r2,4
  80200c:	e0bfff15 	stw	r2,-4(fp)
  802010:	e0bffd17 	ldw	r2,-12(fp)
  802014:	e0ffff17 	ldw	r3,-4(fp)
  802018:	10c00415 	stw	r3,16(r2)
			bullet->type = bullet->type == ONEMORE ? NOTACTIVE : bullet->type;
  80201c:	e0bffd17 	ldw	r2,-12(fp)
  802020:	10800417 	ldw	r2,16(r2)
  802024:	10800120 	cmpeqi	r2,r2,4
  802028:	1000041e 	bne	r2,zero,80203c <eraseBullet+0xbc>
  80202c:	e0bffd17 	ldw	r2,-12(fp)
  802030:	10800417 	ldw	r2,16(r2)
  802034:	e0bffe15 	stw	r2,-8(fp)
  802038:	00000206 	br	802044 <eraseBullet+0xc4>
  80203c:	00800084 	movi	r2,2
  802040:	e0bffe15 	stw	r2,-8(fp)
  802044:	e0bffd17 	ldw	r2,-12(fp)
  802048:	e0fffe17 	ldw	r3,-8(fp)
  80204c:	10c00415 	stw	r3,16(r2)
  802050:	00000306 	br	802060 <eraseBullet+0xe0>
		} else {
			printf("Attempt to draw null bullet.\n");
  802054:	010020b4 	movhi	r4,130
  802058:	2132a204 	addi	r4,r4,-13688
  80205c:	080a9300 	call	80a930 <puts>
	}
}

void eraseBullet(Bullet *bullet) {
	int i;
	for (i = 0; i < BULLET_LENGTH; i++) {
  802060:	e0bffc17 	ldw	r2,-16(fp)
  802064:	10800044 	addi	r2,r2,1
  802068:	e0bffc15 	stw	r2,-16(fp)
  80206c:	e0bffc17 	ldw	r2,-16(fp)
  802070:	108000d0 	cmplti	r2,r2,3
  802074:	103fc91e 	bne	r2,zero,801f9c <eraseBullet+0x1c>
			bullet->type = bullet->type == ONEMORE ? NOTACTIVE : bullet->type;
		} else {
			printf("Attempt to draw null bullet.\n");
		}
	}
}
  802078:	e037883a 	mov	sp,fp
  80207c:	dfc00117 	ldw	ra,4(sp)
  802080:	df000017 	ldw	fp,0(sp)
  802084:	dec00204 	addi	sp,sp,8
  802088:	f800283a 	ret

0080208c <moveBulletRight>:

void moveBulletRight(Bullet *bullet) {
  80208c:	defffd04 	addi	sp,sp,-12
  802090:	dfc00215 	stw	ra,8(sp)
  802094:	df000115 	stw	fp,4(sp)
  802098:	df000104 	addi	fp,sp,4
  80209c:	e13fff15 	stw	r4,-4(fp)
	if (bullet == NULL) {
  8020a0:	e0bfff17 	ldw	r2,-4(fp)
  8020a4:	1004c03a 	cmpne	r2,r2,zero
  8020a8:	1000041e 	bne	r2,zero,8020bc <moveBulletRight+0x30>
		printf("Attempt to move null bullet right.\n");
  8020ac:	010020b4 	movhi	r4,130
  8020b0:	2132aa04 	addi	r4,r4,-13656
  8020b4:	080a9300 	call	80a930 <puts>
		return;
  8020b8:	00001706 	br	802118 <moveBulletRight+0x8c>
	}

	bullet->prevX = bullet->x;
  8020bc:	e0bfff17 	ldw	r2,-4(fp)
  8020c0:	10c00017 	ldw	r3,0(r2)
  8020c4:	e0bfff17 	ldw	r2,-4(fp)
  8020c8:	10c00115 	stw	r3,4(r2)
	bullet->prevY = bullet->y;
  8020cc:	e0bfff17 	ldw	r2,-4(fp)
  8020d0:	10c00217 	ldw	r3,8(r2)
  8020d4:	e0bfff17 	ldw	r2,-4(fp)
  8020d8:	10c00315 	stw	r3,12(r2)

	bullet->x = bullet->x + 2;
  8020dc:	e0bfff17 	ldw	r2,-4(fp)
  8020e0:	10800017 	ldw	r2,0(r2)
  8020e4:	10c00084 	addi	r3,r2,2
  8020e8:	e0bfff17 	ldw	r2,-4(fp)
  8020ec:	10c00015 	stw	r3,0(r2)

	if ((bullet->x >= SCREEN_WIDTH) || (bullet->x <= -BULLET_LENGTH - 1)) {
  8020f0:	e0bfff17 	ldw	r2,-4(fp)
  8020f4:	10800017 	ldw	r2,0(r2)
  8020f8:	10805508 	cmpgei	r2,r2,340
  8020fc:	1000041e 	bne	r2,zero,802110 <moveBulletRight+0x84>
  802100:	e0bfff17 	ldw	r2,-4(fp)
  802104:	10800017 	ldw	r2,0(r2)
  802108:	10bfff48 	cmpgei	r2,r2,-3
  80210c:	1000021e 	bne	r2,zero,802118 <moveBulletRight+0x8c>
		deleteBullet(bullet);
  802110:	e13fff17 	ldw	r4,-4(fp)
  802114:	080212c0 	call	80212c <deleteBullet>
	}
}
  802118:	e037883a 	mov	sp,fp
  80211c:	dfc00117 	ldw	ra,4(sp)
  802120:	df000017 	ldw	fp,0(sp)
  802124:	dec00204 	addi	sp,sp,8
  802128:	f800283a 	ret

0080212c <deleteBullet>:

void deleteBullet(Bullet *bullet) {
  80212c:	defffb04 	addi	sp,sp,-20
  802130:	dfc00415 	stw	ra,16(sp)
  802134:	df000315 	stw	fp,12(sp)
  802138:	df000304 	addi	fp,sp,12
  80213c:	e13fff15 	stw	r4,-4(fp)
	eraseBullet(bullet);
  802140:	e13fff17 	ldw	r4,-4(fp)
  802144:	0801f800 	call	801f80 <eraseBullet>
	bullet->type = DELETED;
  802148:	e0ffff17 	ldw	r3,-4(fp)
  80214c:	008000c4 	movi	r2,3
  802150:	18800415 	stw	r2,16(r3)
	bullet->prevX = bullet->x;
  802154:	e0bfff17 	ldw	r2,-4(fp)
  802158:	10c00017 	ldw	r3,0(r2)
  80215c:	e0bfff17 	ldw	r2,-4(fp)
  802160:	10c00115 	stw	r3,4(r2)
	bullet->prevY = bullet->y;
  802164:	e0bfff17 	ldw	r2,-4(fp)
  802168:	10c00217 	ldw	r3,8(r2)
  80216c:	e0bfff17 	ldw	r2,-4(fp)
  802170:	10c00315 	stw	r3,12(r2)
	Bullet *nextBullet = bullet->next;
  802174:	e0bfff17 	ldw	r2,-4(fp)
  802178:	10800817 	ldw	r2,32(r2)
  80217c:	e0bffe15 	stw	r2,-8(fp)
	Bullet *prevBullet = bullet->prev;
  802180:	e0bfff17 	ldw	r2,-4(fp)
  802184:	10800917 	ldw	r2,36(r2)
  802188:	e0bffd15 	stw	r2,-12(fp)
	bullet->next = NULL;
  80218c:	e0bfff17 	ldw	r2,-4(fp)
  802190:	10000815 	stw	zero,32(r2)
	bullet->prev = NULL;
  802194:	e0bfff17 	ldw	r2,-4(fp)
  802198:	10000915 	stw	zero,36(r2)

	if (nextBullet != NULL) {
  80219c:	e0bffe17 	ldw	r2,-8(fp)
  8021a0:	1005003a 	cmpeq	r2,r2,zero
  8021a4:	1000031e 	bne	r2,zero,8021b4 <deleteBullet+0x88>
		nextBullet->prev = prevBullet;
  8021a8:	e0fffe17 	ldw	r3,-8(fp)
  8021ac:	e0bffd17 	ldw	r2,-12(fp)
  8021b0:	18800915 	stw	r2,36(r3)
	}
	if (prevBullet != NULL) {
  8021b4:	e0bffd17 	ldw	r2,-12(fp)
  8021b8:	1005003a 	cmpeq	r2,r2,zero
  8021bc:	1000031e 	bne	r2,zero,8021cc <deleteBullet+0xa0>
		prevBullet->next = nextBullet;
  8021c0:	e0fffd17 	ldw	r3,-12(fp)
  8021c4:	e0bffe17 	ldw	r2,-8(fp)
  8021c8:	18800815 	stw	r2,32(r3)
	}
}
  8021cc:	e037883a 	mov	sp,fp
  8021d0:	dfc00117 	ldw	ra,4(sp)
  8021d4:	df000017 	ldw	fp,0(sp)
  8021d8:	dec00204 	addi	sp,sp,8
  8021dc:	f800283a 	ret

008021e0 <moveBulletLeft>:

void moveBulletLeft(Bullet *bullet) {
  8021e0:	defffd04 	addi	sp,sp,-12
  8021e4:	dfc00215 	stw	ra,8(sp)
  8021e8:	df000115 	stw	fp,4(sp)
  8021ec:	df000104 	addi	fp,sp,4
  8021f0:	e13fff15 	stw	r4,-4(fp)
	if (bullet == NULL) {
  8021f4:	e0bfff17 	ldw	r2,-4(fp)
  8021f8:	1004c03a 	cmpne	r2,r2,zero
  8021fc:	1000041e 	bne	r2,zero,802210 <moveBulletLeft+0x30>
		printf("Attempt to move null bullet left.\n");
  802200:	010020b4 	movhi	r4,130
  802204:	2132b304 	addi	r4,r4,-13620
  802208:	080a9300 	call	80a930 <puts>
		return;
  80220c:	00001f06 	br	80228c <moveBulletLeft+0xac>
	}

	bullet->prevX = bullet->x;
  802210:	e0bfff17 	ldw	r2,-4(fp)
  802214:	10c00017 	ldw	r3,0(r2)
  802218:	e0bfff17 	ldw	r2,-4(fp)
  80221c:	10c00115 	stw	r3,4(r2)
	bullet->prevY = bullet->y;
  802220:	e0bfff17 	ldw	r2,-4(fp)
  802224:	10c00217 	ldw	r3,8(r2)
  802228:	e0bfff17 	ldw	r2,-4(fp)
  80222c:	10c00315 	stw	r3,12(r2)

	bullet->x = bullet->x - 2;
  802230:	e0bfff17 	ldw	r2,-4(fp)
  802234:	10800017 	ldw	r2,0(r2)
  802238:	10ffff84 	addi	r3,r2,-2
  80223c:	e0bfff17 	ldw	r2,-4(fp)
  802240:	10c00015 	stw	r3,0(r2)
	bullet->y = bullet->y - 2*bullet->slope;
  802244:	e0bfff17 	ldw	r2,-4(fp)
  802248:	10c00217 	ldw	r3,8(r2)
  80224c:	e0bfff17 	ldw	r2,-4(fp)
  802250:	10800617 	ldw	r2,24(r2)
  802254:	1085883a 	add	r2,r2,r2
  802258:	1887c83a 	sub	r3,r3,r2
  80225c:	e0bfff17 	ldw	r2,-4(fp)
  802260:	10c00215 	stw	r3,8(r2)

	if ((bullet->x >= SCREEN_WIDTH) || (bullet->x <= -BULLET_LENGTH - 1)) {
  802264:	e0bfff17 	ldw	r2,-4(fp)
  802268:	10800017 	ldw	r2,0(r2)
  80226c:	10805508 	cmpgei	r2,r2,340
  802270:	1000041e 	bne	r2,zero,802284 <moveBulletLeft+0xa4>
  802274:	e0bfff17 	ldw	r2,-4(fp)
  802278:	10800017 	ldw	r2,0(r2)
  80227c:	10bfff48 	cmpgei	r2,r2,-3
  802280:	1000021e 	bne	r2,zero,80228c <moveBulletLeft+0xac>
		deleteBullet(bullet);
  802284:	e13fff17 	ldw	r4,-4(fp)
  802288:	080212c0 	call	80212c <deleteBullet>
	}
}
  80228c:	e037883a 	mov	sp,fp
  802290:	dfc00117 	ldw	ra,4(sp)
  802294:	df000017 	ldw	fp,0(sp)
  802298:	dec00204 	addi	sp,sp,8
  80229c:	f800283a 	ret

008022a0 <initCollision>:

short int relativeSharkHit[SHARK_WIDTH][SHARK_HEIGHT];
short int relativePlayerHit[PLAYER_WIDTH][PLAYER_HEIGHT];
short int relativeNadoHit[NADO_WIDTH][NADO_HEIGHT];

void initCollision(void) {
  8022a0:	defffa04 	addi	sp,sp,-24
  8022a4:	df000515 	stw	fp,20(sp)
  8022a8:	df000504 	addi	fp,sp,20
	short int *colourArray;
	short int *cursor;
	colourArray = sharkBmp->color;
  8022ac:	d0a71b17 	ldw	r2,-25492(gp)
  8022b0:	10800e17 	ldw	r2,56(r2)
  8022b4:	e0bfff15 	stw	r2,-4(fp)
	int x, y;
	int yOffset;

	for (y = 0; y < SHARK_HEIGHT; y++) {
  8022b8:	e03ffc15 	stw	zero,-16(fp)
  8022bc:	00003106 	br	802384 <initCollision+0xe4>
		yOffset = SHARK_WIDTH * y;
  8022c0:	e0bffc17 	ldw	r2,-16(fp)
  8022c4:	10800964 	muli	r2,r2,37
  8022c8:	e0bffb15 	stw	r2,-20(fp)
		for (x = 0; x < SHARK_WIDTH; x++) {
  8022cc:	e03ffd15 	stw	zero,-12(fp)
  8022d0:	00002606 	br	80236c <initCollision+0xcc>
			cursor = &colourArray[yOffset + x];
  8022d4:	e0fffb17 	ldw	r3,-20(fp)
  8022d8:	e0bffd17 	ldw	r2,-12(fp)
  8022dc:	1885883a 	add	r2,r3,r2
  8022e0:	1085883a 	add	r2,r2,r2
  8022e4:	1007883a 	mov	r3,r2
  8022e8:	e0bfff17 	ldw	r2,-4(fp)
  8022ec:	1885883a 	add	r2,r3,r2
  8022f0:	e0bffe15 	stw	r2,-8(fp)
			if (*cursor != 0) {
  8022f4:	e0bffe17 	ldw	r2,-8(fp)
  8022f8:	1080000b 	ldhu	r2,0(r2)
  8022fc:	10bfffcc 	andi	r2,r2,65535
  802300:	10a0001c 	xori	r2,r2,32768
  802304:	10a00004 	addi	r2,r2,-32768
  802308:	1005003a 	cmpeq	r2,r2,zero
  80230c:	10000b1e 	bne	r2,zero,80233c <initCollision+0x9c>
				relativeSharkHit[x][y] = TRUE;
  802310:	e0bffd17 	ldw	r2,-12(fp)
  802314:	e0fffc17 	ldw	r3,-16(fp)
  802318:	010020f4 	movhi	r4,131
  80231c:	2121f704 	addi	r4,r4,-30756
  802320:	10800524 	muli	r2,r2,20
  802324:	10c5883a 	add	r2,r2,r3
  802328:	1085883a 	add	r2,r2,r2
  80232c:	1107883a 	add	r3,r2,r4
  802330:	00800044 	movi	r2,1
  802334:	1880000d 	sth	r2,0(r3)
  802338:	00000906 	br	802360 <initCollision+0xc0>
			} else {
				relativeSharkHit[x][y] = FALSE;
  80233c:	e0bffd17 	ldw	r2,-12(fp)
  802340:	e0fffc17 	ldw	r3,-16(fp)
  802344:	010020f4 	movhi	r4,131
  802348:	2121f704 	addi	r4,r4,-30756
  80234c:	10800524 	muli	r2,r2,20
  802350:	10c5883a 	add	r2,r2,r3
  802354:	1085883a 	add	r2,r2,r2
  802358:	1105883a 	add	r2,r2,r4
  80235c:	1000000d 	sth	zero,0(r2)
	int x, y;
	int yOffset;

	for (y = 0; y < SHARK_HEIGHT; y++) {
		yOffset = SHARK_WIDTH * y;
		for (x = 0; x < SHARK_WIDTH; x++) {
  802360:	e0bffd17 	ldw	r2,-12(fp)
  802364:	10800044 	addi	r2,r2,1
  802368:	e0bffd15 	stw	r2,-12(fp)
  80236c:	e0bffd17 	ldw	r2,-12(fp)
  802370:	10800950 	cmplti	r2,r2,37
  802374:	103fd71e 	bne	r2,zero,8022d4 <initCollision+0x34>
	short int *cursor;
	colourArray = sharkBmp->color;
	int x, y;
	int yOffset;

	for (y = 0; y < SHARK_HEIGHT; y++) {
  802378:	e0bffc17 	ldw	r2,-16(fp)
  80237c:	10800044 	addi	r2,r2,1
  802380:	e0bffc15 	stw	r2,-16(fp)
  802384:	e0bffc17 	ldw	r2,-16(fp)
  802388:	10800510 	cmplti	r2,r2,20
  80238c:	103fcc1e 	bne	r2,zero,8022c0 <initCollision+0x20>
				relativeSharkHit[x][y] = FALSE;
			}
		}
	}

	colourArray = playerBmp->color;
  802390:	d0a72117 	ldw	r2,-25468(gp)
  802394:	10800e17 	ldw	r2,56(r2)
  802398:	e0bfff15 	stw	r2,-4(fp)
	for (y = 0; y < PLAYER_HEIGHT; y++) {
  80239c:	e03ffc15 	stw	zero,-16(fp)
  8023a0:	00003106 	br	802468 <initCollision+0x1c8>
		yOffset = PLAYER_WIDTH * y;
  8023a4:	e0bffc17 	ldw	r2,-16(fp)
  8023a8:	10800724 	muli	r2,r2,28
  8023ac:	e0bffb15 	stw	r2,-20(fp)
		for (x = 0; x < PLAYER_WIDTH; x++) {
  8023b0:	e03ffd15 	stw	zero,-12(fp)
  8023b4:	00002606 	br	802450 <initCollision+0x1b0>
			cursor = &colourArray[yOffset + x];
  8023b8:	e0fffb17 	ldw	r3,-20(fp)
  8023bc:	e0bffd17 	ldw	r2,-12(fp)
  8023c0:	1885883a 	add	r2,r3,r2
  8023c4:	1085883a 	add	r2,r2,r2
  8023c8:	1007883a 	mov	r3,r2
  8023cc:	e0bfff17 	ldw	r2,-4(fp)
  8023d0:	1885883a 	add	r2,r3,r2
  8023d4:	e0bffe15 	stw	r2,-8(fp)
			//printf("r: 0x%x; g: 0x%x; b: 0x%x\n", cursor->r, cursor->g, cursor->b);

			if (*cursor != 0) {
  8023d8:	e0bffe17 	ldw	r2,-8(fp)
  8023dc:	1080000b 	ldhu	r2,0(r2)
  8023e0:	10bfffcc 	andi	r2,r2,65535
  8023e4:	10a0001c 	xori	r2,r2,32768
  8023e8:	10a00004 	addi	r2,r2,-32768
  8023ec:	1005003a 	cmpeq	r2,r2,zero
  8023f0:	10000b1e 	bne	r2,zero,802420 <initCollision+0x180>
				relativePlayerHit[x][y] = TRUE;
  8023f4:	e0bffd17 	ldw	r2,-12(fp)
  8023f8:	e0fffc17 	ldw	r3,-16(fp)
  8023fc:	010020f4 	movhi	r4,131
  802400:	21236904 	addi	r4,r4,-29276
  802404:	108006e4 	muli	r2,r2,27
  802408:	10c5883a 	add	r2,r2,r3
  80240c:	1085883a 	add	r2,r2,r2
  802410:	1107883a 	add	r3,r2,r4
  802414:	00800044 	movi	r2,1
  802418:	1880000d 	sth	r2,0(r3)
  80241c:	00000906 	br	802444 <initCollision+0x1a4>
			} else {
				relativePlayerHit[x][y] = FALSE;
  802420:	e0bffd17 	ldw	r2,-12(fp)
  802424:	e0fffc17 	ldw	r3,-16(fp)
  802428:	010020f4 	movhi	r4,131
  80242c:	21236904 	addi	r4,r4,-29276
  802430:	108006e4 	muli	r2,r2,27
  802434:	10c5883a 	add	r2,r2,r3
  802438:	1085883a 	add	r2,r2,r2
  80243c:	1105883a 	add	r2,r2,r4
  802440:	1000000d 	sth	zero,0(r2)
	}

	colourArray = playerBmp->color;
	for (y = 0; y < PLAYER_HEIGHT; y++) {
		yOffset = PLAYER_WIDTH * y;
		for (x = 0; x < PLAYER_WIDTH; x++) {
  802444:	e0bffd17 	ldw	r2,-12(fp)
  802448:	10800044 	addi	r2,r2,1
  80244c:	e0bffd15 	stw	r2,-12(fp)
  802450:	e0bffd17 	ldw	r2,-12(fp)
  802454:	10800710 	cmplti	r2,r2,28
  802458:	103fd71e 	bne	r2,zero,8023b8 <initCollision+0x118>
			}
		}
	}

	colourArray = playerBmp->color;
	for (y = 0; y < PLAYER_HEIGHT; y++) {
  80245c:	e0bffc17 	ldw	r2,-16(fp)
  802460:	10800044 	addi	r2,r2,1
  802464:	e0bffc15 	stw	r2,-16(fp)
  802468:	e0bffc17 	ldw	r2,-16(fp)
  80246c:	108006d0 	cmplti	r2,r2,27
  802470:	103fcc1e 	bne	r2,zero,8023a4 <initCollision+0x104>
				relativePlayerHit[x][y] = FALSE;
			}
		}
	}

	colourArray = cnadoBmp->color;
  802474:	d0a72017 	ldw	r2,-25472(gp)
  802478:	10800e17 	ldw	r2,56(r2)
  80247c:	e0bfff15 	stw	r2,-4(fp)
	for (y = 0; y < NADO_HEIGHT; y++) {
  802480:	e03ffc15 	stw	zero,-16(fp)
  802484:	00003106 	br	80254c <initCollision+0x2ac>
		yOffset = NADO_WIDTH * y;
  802488:	e0bffc17 	ldw	r2,-16(fp)
  80248c:	10800da4 	muli	r2,r2,54
  802490:	e0bffb15 	stw	r2,-20(fp)
		for (x = 0; x < NADO_WIDTH; x++) {
  802494:	e03ffd15 	stw	zero,-12(fp)
  802498:	00002606 	br	802534 <initCollision+0x294>
			cursor = &colourArray[yOffset + x];
  80249c:	e0fffb17 	ldw	r3,-20(fp)
  8024a0:	e0bffd17 	ldw	r2,-12(fp)
  8024a4:	1885883a 	add	r2,r3,r2
  8024a8:	1085883a 	add	r2,r2,r2
  8024ac:	1007883a 	mov	r3,r2
  8024b0:	e0bfff17 	ldw	r2,-4(fp)
  8024b4:	1885883a 	add	r2,r3,r2
  8024b8:	e0bffe15 	stw	r2,-8(fp)
			if (*cursor != 0) {
  8024bc:	e0bffe17 	ldw	r2,-8(fp)
  8024c0:	1080000b 	ldhu	r2,0(r2)
  8024c4:	10bfffcc 	andi	r2,r2,65535
  8024c8:	10a0001c 	xori	r2,r2,32768
  8024cc:	10a00004 	addi	r2,r2,-32768
  8024d0:	1005003a 	cmpeq	r2,r2,zero
  8024d4:	10000b1e 	bne	r2,zero,802504 <initCollision+0x264>
				relativeNadoHit[x][y] = TRUE;
  8024d8:	e0bffd17 	ldw	r2,-12(fp)
  8024dc:	e0fffc17 	ldw	r3,-16(fp)
  8024e0:	010020b4 	movhi	r4,130
  8024e4:	2108a704 	addi	r4,r4,8860
  8024e8:	10803c24 	muli	r2,r2,240
  8024ec:	10c5883a 	add	r2,r2,r3
  8024f0:	1085883a 	add	r2,r2,r2
  8024f4:	1107883a 	add	r3,r2,r4
  8024f8:	00800044 	movi	r2,1
  8024fc:	1880000d 	sth	r2,0(r3)
  802500:	00000906 	br	802528 <initCollision+0x288>
			} else {
				relativeNadoHit[x][y] = FALSE;
  802504:	e0bffd17 	ldw	r2,-12(fp)
  802508:	e0fffc17 	ldw	r3,-16(fp)
  80250c:	010020b4 	movhi	r4,130
  802510:	2108a704 	addi	r4,r4,8860
  802514:	10803c24 	muli	r2,r2,240
  802518:	10c5883a 	add	r2,r2,r3
  80251c:	1085883a 	add	r2,r2,r2
  802520:	1105883a 	add	r2,r2,r4
  802524:	1000000d 	sth	zero,0(r2)
	}

	colourArray = cnadoBmp->color;
	for (y = 0; y < NADO_HEIGHT; y++) {
		yOffset = NADO_WIDTH * y;
		for (x = 0; x < NADO_WIDTH; x++) {
  802528:	e0bffd17 	ldw	r2,-12(fp)
  80252c:	10800044 	addi	r2,r2,1
  802530:	e0bffd15 	stw	r2,-12(fp)
  802534:	e0bffd17 	ldw	r2,-12(fp)
  802538:	10800d90 	cmplti	r2,r2,54
  80253c:	103fd71e 	bne	r2,zero,80249c <initCollision+0x1fc>
			}
		}
	}

	colourArray = cnadoBmp->color;
	for (y = 0; y < NADO_HEIGHT; y++) {
  802540:	e0bffc17 	ldw	r2,-16(fp)
  802544:	10800044 	addi	r2,r2,1
  802548:	e0bffc15 	stw	r2,-16(fp)
  80254c:	e0bffc17 	ldw	r2,-16(fp)
  802550:	10803c10 	cmplti	r2,r2,240
  802554:	103fcc1e 	bne	r2,zero,802488 <initCollision+0x1e8>
				relativeNadoHit[x][y] = FALSE;
			}
		}
	}

	colourArray = pnadoaBmp->color;
  802558:	d0a71917 	ldw	r2,-25500(gp)
  80255c:	10800e17 	ldw	r2,56(r2)
  802560:	e0bfff15 	stw	r2,-4(fp)
	for (y = 0; y < NADO_HEIGHT; y++) {
  802564:	e03ffc15 	stw	zero,-16(fp)
  802568:	00002706 	br	802608 <initCollision+0x368>
		yOffset = NADO_WIDTH * y;
  80256c:	e0bffc17 	ldw	r2,-16(fp)
  802570:	10800da4 	muli	r2,r2,54
  802574:	e0bffb15 	stw	r2,-20(fp)
		for (x = 0; x < NADO_WIDTH; x++) {
  802578:	e03ffd15 	stw	zero,-12(fp)
  80257c:	00001c06 	br	8025f0 <initCollision+0x350>
			cursor = &colourArray[yOffset + x];
  802580:	e0fffb17 	ldw	r3,-20(fp)
  802584:	e0bffd17 	ldw	r2,-12(fp)
  802588:	1885883a 	add	r2,r3,r2
  80258c:	1085883a 	add	r2,r2,r2
  802590:	1007883a 	mov	r3,r2
  802594:	e0bfff17 	ldw	r2,-4(fp)
  802598:	1885883a 	add	r2,r3,r2
  80259c:	e0bffe15 	stw	r2,-8(fp)
			if (*cursor != 0) {
  8025a0:	e0bffe17 	ldw	r2,-8(fp)
  8025a4:	1080000b 	ldhu	r2,0(r2)
  8025a8:	10bfffcc 	andi	r2,r2,65535
  8025ac:	10a0001c 	xori	r2,r2,32768
  8025b0:	10a00004 	addi	r2,r2,-32768
  8025b4:	1005003a 	cmpeq	r2,r2,zero
  8025b8:	10000a1e 	bne	r2,zero,8025e4 <initCollision+0x344>
				relativeNadoHit[x][y] = TRUE;
  8025bc:	e0bffd17 	ldw	r2,-12(fp)
  8025c0:	e0fffc17 	ldw	r3,-16(fp)
  8025c4:	010020b4 	movhi	r4,130
  8025c8:	2108a704 	addi	r4,r4,8860
  8025cc:	10803c24 	muli	r2,r2,240
  8025d0:	10c5883a 	add	r2,r2,r3
  8025d4:	1085883a 	add	r2,r2,r2
  8025d8:	1107883a 	add	r3,r2,r4
  8025dc:	00800044 	movi	r2,1
  8025e0:	1880000d 	sth	r2,0(r3)
	}

	colourArray = pnadoaBmp->color;
	for (y = 0; y < NADO_HEIGHT; y++) {
		yOffset = NADO_WIDTH * y;
		for (x = 0; x < NADO_WIDTH; x++) {
  8025e4:	e0bffd17 	ldw	r2,-12(fp)
  8025e8:	10800044 	addi	r2,r2,1
  8025ec:	e0bffd15 	stw	r2,-12(fp)
  8025f0:	e0bffd17 	ldw	r2,-12(fp)
  8025f4:	10800d90 	cmplti	r2,r2,54
  8025f8:	103fe11e 	bne	r2,zero,802580 <initCollision+0x2e0>
			}
		}
	}

	colourArray = pnadoaBmp->color;
	for (y = 0; y < NADO_HEIGHT; y++) {
  8025fc:	e0bffc17 	ldw	r2,-16(fp)
  802600:	10800044 	addi	r2,r2,1
  802604:	e0bffc15 	stw	r2,-16(fp)
  802608:	e0bffc17 	ldw	r2,-16(fp)
  80260c:	10803c10 	cmplti	r2,r2,240
  802610:	103fd61e 	bne	r2,zero,80256c <initCollision+0x2cc>
				relativeNadoHit[x][y] = TRUE;
			}
		}
	}

	colourArray = pnadobBmp->color;
  802614:	d0a71e17 	ldw	r2,-25480(gp)
  802618:	10800e17 	ldw	r2,56(r2)
  80261c:	e0bfff15 	stw	r2,-4(fp)
	for (y = 0; y < NADO_HEIGHT; y++) {
  802620:	e03ffc15 	stw	zero,-16(fp)
  802624:	00002706 	br	8026c4 <initCollision+0x424>
		yOffset = NADO_WIDTH * y;
  802628:	e0bffc17 	ldw	r2,-16(fp)
  80262c:	10800da4 	muli	r2,r2,54
  802630:	e0bffb15 	stw	r2,-20(fp)
		for (x = 0; x < NADO_WIDTH; x++) {
  802634:	e03ffd15 	stw	zero,-12(fp)
  802638:	00001c06 	br	8026ac <initCollision+0x40c>
			cursor = &colourArray[yOffset + x];
  80263c:	e0fffb17 	ldw	r3,-20(fp)
  802640:	e0bffd17 	ldw	r2,-12(fp)
  802644:	1885883a 	add	r2,r3,r2
  802648:	1085883a 	add	r2,r2,r2
  80264c:	1007883a 	mov	r3,r2
  802650:	e0bfff17 	ldw	r2,-4(fp)
  802654:	1885883a 	add	r2,r3,r2
  802658:	e0bffe15 	stw	r2,-8(fp)
			if (*cursor != 0) {
  80265c:	e0bffe17 	ldw	r2,-8(fp)
  802660:	1080000b 	ldhu	r2,0(r2)
  802664:	10bfffcc 	andi	r2,r2,65535
  802668:	10a0001c 	xori	r2,r2,32768
  80266c:	10a00004 	addi	r2,r2,-32768
  802670:	1005003a 	cmpeq	r2,r2,zero
  802674:	10000a1e 	bne	r2,zero,8026a0 <initCollision+0x400>
				relativeNadoHit[x][y] = TRUE;
  802678:	e0bffd17 	ldw	r2,-12(fp)
  80267c:	e0fffc17 	ldw	r3,-16(fp)
  802680:	010020b4 	movhi	r4,130
  802684:	2108a704 	addi	r4,r4,8860
  802688:	10803c24 	muli	r2,r2,240
  80268c:	10c5883a 	add	r2,r2,r3
  802690:	1085883a 	add	r2,r2,r2
  802694:	1107883a 	add	r3,r2,r4
  802698:	00800044 	movi	r2,1
  80269c:	1880000d 	sth	r2,0(r3)
	}

	colourArray = pnadobBmp->color;
	for (y = 0; y < NADO_HEIGHT; y++) {
		yOffset = NADO_WIDTH * y;
		for (x = 0; x < NADO_WIDTH; x++) {
  8026a0:	e0bffd17 	ldw	r2,-12(fp)
  8026a4:	10800044 	addi	r2,r2,1
  8026a8:	e0bffd15 	stw	r2,-12(fp)
  8026ac:	e0bffd17 	ldw	r2,-12(fp)
  8026b0:	10800d90 	cmplti	r2,r2,54
  8026b4:	103fe11e 	bne	r2,zero,80263c <initCollision+0x39c>
			}
		}
	}

	colourArray = pnadobBmp->color;
	for (y = 0; y < NADO_HEIGHT; y++) {
  8026b8:	e0bffc17 	ldw	r2,-16(fp)
  8026bc:	10800044 	addi	r2,r2,1
  8026c0:	e0bffc15 	stw	r2,-16(fp)
  8026c4:	e0bffc17 	ldw	r2,-16(fp)
  8026c8:	10803c10 	cmplti	r2,r2,240
  8026cc:	103fd61e 	bne	r2,zero,802628 <initCollision+0x388>
			if (*cursor != 0) {
				relativeNadoHit[x][y] = TRUE;
			}
		}
	}
}
  8026d0:	e037883a 	mov	sp,fp
  8026d4:	df000017 	ldw	fp,0(sp)
  8026d8:	dec00104 	addi	sp,sp,4
  8026dc:	f800283a 	ret

008026e0 <findSharkIfHit>:

Shark *findSharkIfHit(Bullet *bullet) {
  8026e0:	defffa04 	addi	sp,sp,-24
  8026e4:	dfc00515 	stw	ra,20(sp)
  8026e8:	df000415 	stw	fp,16(sp)
  8026ec:	df000404 	addi	fp,sp,16
  8026f0:	e13ffe15 	stw	r4,-8(fp)
	Shark *cursor = sharkList;
  8026f4:	008020b4 	movhi	r2,130
  8026f8:	10836a04 	addi	r2,r2,3496
  8026fc:	10800017 	ldw	r2,0(r2)
  802700:	e0bffd15 	stw	r2,-12(fp)
	int i = 0;
  802704:	e03ffc15 	stw	zero,-16(fp)
	while (cursor != NULL
  802708:	00000e06 	br	802744 <findSharkIfHit+0x64>
			&& i < sharkCount) {
		if (isBulletCollidingWithShark(cursor, bullet) == TRUE) {
  80270c:	e13ffd17 	ldw	r4,-12(fp)
  802710:	e17ffe17 	ldw	r5,-8(fp)
  802714:	08027800 	call	802780 <isBulletCollidingWithShark>
  802718:	10800058 	cmpnei	r2,r2,1
  80271c:	1000031e 	bne	r2,zero,80272c <findSharkIfHit+0x4c>
			return cursor;
  802720:	e0bffd17 	ldw	r2,-12(fp)
  802724:	e0bfff15 	stw	r2,-4(fp)
  802728:	00000f06 	br	802768 <findSharkIfHit+0x88>
		}
		cursor = cursor->next;
  80272c:	e0bffd17 	ldw	r2,-12(fp)
  802730:	10800617 	ldw	r2,24(r2)
  802734:	e0bffd15 	stw	r2,-12(fp)
		i++;
  802738:	e0bffc17 	ldw	r2,-16(fp)
  80273c:	10800044 	addi	r2,r2,1
  802740:	e0bffc15 	stw	r2,-16(fp)
}

Shark *findSharkIfHit(Bullet *bullet) {
	Shark *cursor = sharkList;
	int i = 0;
	while (cursor != NULL
  802744:	e0bffd17 	ldw	r2,-12(fp)
  802748:	1005003a 	cmpeq	r2,r2,zero
  80274c:	1000051e 	bne	r2,zero,802764 <findSharkIfHit+0x84>
  802750:	e0bffc17 	ldw	r2,-16(fp)
  802754:	00c020b4 	movhi	r3,130
  802758:	18c36c04 	addi	r3,r3,3504
  80275c:	18c00017 	ldw	r3,0(r3)
  802760:	10ffea36 	bltu	r2,r3,80270c <findSharkIfHit+0x2c>
			return cursor;
		}
		cursor = cursor->next;
		i++;
	}
	return NULL;
  802764:	e03fff15 	stw	zero,-4(fp)
  802768:	e0bfff17 	ldw	r2,-4(fp)
}
  80276c:	e037883a 	mov	sp,fp
  802770:	dfc00117 	ldw	ra,4(sp)
  802774:	df000017 	ldw	fp,0(sp)
  802778:	dec00204 	addi	sp,sp,8
  80277c:	f800283a 	ret

00802780 <isBulletCollidingWithShark>:

int isBulletCollidingWithShark(Shark *shark, Bullet *bullet) {
  802780:	defff904 	addi	sp,sp,-28
  802784:	dfc00615 	stw	ra,24(sp)
  802788:	df000515 	stw	fp,20(sp)
  80278c:	df000504 	addi	fp,sp,20
  802790:	e13ffd15 	stw	r4,-12(fp)
  802794:	e17ffe15 	stw	r5,-8(fp)
	if (bullet == NULL || shark == NULL) {
  802798:	e0bffe17 	ldw	r2,-8(fp)
  80279c:	1005003a 	cmpeq	r2,r2,zero
  8027a0:	1000031e 	bne	r2,zero,8027b0 <isBulletCollidingWithShark+0x30>
  8027a4:	e0bffd17 	ldw	r2,-12(fp)
  8027a8:	1004c03a 	cmpne	r2,r2,zero
  8027ac:	1000051e 	bne	r2,zero,8027c4 <isBulletCollidingWithShark+0x44>
		printf("Attempt to do player/bullet collision with null member.\n");
  8027b0:	010020b4 	movhi	r4,130
  8027b4:	2132bc04 	addi	r4,r4,-13584
  8027b8:	080a9300 	call	80a930 <puts>
		return FALSE;
  8027bc:	e03fff15 	stw	zero,-4(fp)
  8027c0:	00003a06 	br	8028ac <isBulletCollidingWithShark+0x12c>
	}

	if (bullet->type == SHARKBULLET) {
  8027c4:	e0bffe17 	ldw	r2,-8(fp)
  8027c8:	10800417 	ldw	r2,16(r2)
  8027cc:	10800058 	cmpnei	r2,r2,1
  8027d0:	1000051e 	bne	r2,zero,8027e8 <isBulletCollidingWithShark+0x68>
		// No friendly fire
		printf("Error: sharkbullet present in player bullet list.\n");
  8027d4:	010020b4 	movhi	r4,130
  8027d8:	2132ca04 	addi	r4,r4,-13528
  8027dc:	080a9300 	call	80a930 <puts>
		return FALSE;
  8027e0:	e03fff15 	stw	zero,-4(fp)
  8027e4:	00003106 	br	8028ac <isBulletCollidingWithShark+0x12c>
	}

	if (bullet->x >= shark->x &&
  8027e8:	e0bffe17 	ldw	r2,-8(fp)
  8027ec:	10c00017 	ldw	r3,0(r2)
  8027f0:	e0bffd17 	ldw	r2,-12(fp)
  8027f4:	10800017 	ldw	r2,0(r2)
  8027f8:	18802b16 	blt	r3,r2,8028a8 <isBulletCollidingWithShark+0x128>
  8027fc:	e0bffe17 	ldw	r2,-8(fp)
  802800:	10c00017 	ldw	r3,0(r2)
  802804:	e0bffd17 	ldw	r2,-12(fp)
  802808:	10800017 	ldw	r2,0(r2)
  80280c:	10800944 	addi	r2,r2,37
  802810:	10c02516 	blt	r2,r3,8028a8 <isBulletCollidingWithShark+0x128>
		bullet->x <= shark->x + SHARK_WIDTH) {
		// Have x region correct
		//printf("x-hit\n");

		if (bullet->y >= shark->y &&
  802814:	e0bffe17 	ldw	r2,-8(fp)
  802818:	10c00217 	ldw	r3,8(r2)
  80281c:	e0bffd17 	ldw	r2,-12(fp)
  802820:	10800217 	ldw	r2,8(r2)
  802824:	18802016 	blt	r3,r2,8028a8 <isBulletCollidingWithShark+0x128>
  802828:	e0bffe17 	ldw	r2,-8(fp)
  80282c:	10c00217 	ldw	r3,8(r2)
  802830:	e0bffd17 	ldw	r2,-12(fp)
  802834:	10800217 	ldw	r2,8(r2)
  802838:	10800504 	addi	r2,r2,20
  80283c:	10c01a16 	blt	r2,r3,8028a8 <isBulletCollidingWithShark+0x128>
			bullet->y <= shark->y + SHARK_HEIGHT) {
			// Have y region correct
			//printf("y-hit\n");
			int yRelative = bullet->y - shark->y;
  802840:	e0bffe17 	ldw	r2,-8(fp)
  802844:	10c00217 	ldw	r3,8(r2)
  802848:	e0bffd17 	ldw	r2,-12(fp)
  80284c:	10800217 	ldw	r2,8(r2)
  802850:	1885c83a 	sub	r2,r3,r2
  802854:	e0bffc15 	stw	r2,-16(fp)
			int xRelative = bullet->x - shark->x;
  802858:	e0bffe17 	ldw	r2,-8(fp)
  80285c:	10c00017 	ldw	r3,0(r2)
  802860:	e0bffd17 	ldw	r2,-12(fp)
  802864:	10800017 	ldw	r2,0(r2)
  802868:	1885c83a 	sub	r2,r3,r2
  80286c:	e0bffb15 	stw	r2,-20(fp)
			return relativeSharkHit[xRelative][yRelative];
  802870:	e0bffb17 	ldw	r2,-20(fp)
  802874:	e0fffc17 	ldw	r3,-16(fp)
  802878:	010020f4 	movhi	r4,131
  80287c:	2121f704 	addi	r4,r4,-30756
  802880:	10800524 	muli	r2,r2,20
  802884:	10c5883a 	add	r2,r2,r3
  802888:	1085883a 	add	r2,r2,r2
  80288c:	1105883a 	add	r2,r2,r4
  802890:	1080000b 	ldhu	r2,0(r2)
  802894:	10bfffcc 	andi	r2,r2,65535
  802898:	10a0001c 	xori	r2,r2,32768
  80289c:	10a00004 	addi	r2,r2,-32768
  8028a0:	e0bfff15 	stw	r2,-4(fp)
  8028a4:	00000106 	br	8028ac <isBulletCollidingWithShark+0x12c>
		}
	}
	//printf("Miss\n");
	return FALSE;
  8028a8:	e03fff15 	stw	zero,-4(fp)
  8028ac:	e0bfff17 	ldw	r2,-4(fp)
}
  8028b0:	e037883a 	mov	sp,fp
  8028b4:	dfc00117 	ldw	ra,4(sp)
  8028b8:	df000017 	ldw	fp,0(sp)
  8028bc:	dec00204 	addi	sp,sp,8
  8028c0:	f800283a 	ret

008028c4 <isBulletCollidingWithPlayer>:

int isBulletCollidingWithPlayer(Player *player, Bullet *bullet) {
  8028c4:	defff904 	addi	sp,sp,-28
  8028c8:	dfc00615 	stw	ra,24(sp)
  8028cc:	df000515 	stw	fp,20(sp)
  8028d0:	df000504 	addi	fp,sp,20
  8028d4:	e13ffd15 	stw	r4,-12(fp)
  8028d8:	e17ffe15 	stw	r5,-8(fp)
	if (player == NULL || bullet == NULL) {
  8028dc:	e0bffd17 	ldw	r2,-12(fp)
  8028e0:	1005003a 	cmpeq	r2,r2,zero
  8028e4:	1000031e 	bne	r2,zero,8028f4 <isBulletCollidingWithPlayer+0x30>
  8028e8:	e0bffe17 	ldw	r2,-8(fp)
  8028ec:	1004c03a 	cmpne	r2,r2,zero
  8028f0:	1000051e 	bne	r2,zero,802908 <isBulletCollidingWithPlayer+0x44>
		printf("Attempt to do player/bullet collision with null member.\n");
  8028f4:	010020b4 	movhi	r4,130
  8028f8:	2132bc04 	addi	r4,r4,-13584
  8028fc:	080a9300 	call	80a930 <puts>
		return FALSE;
  802900:	e03fff15 	stw	zero,-4(fp)
  802904:	00003a06 	br	8029f0 <isBulletCollidingWithPlayer+0x12c>
	}

	if (bullet->type == PLAYERBULLET) {
  802908:	e0bffe17 	ldw	r2,-8(fp)
  80290c:	10800417 	ldw	r2,16(r2)
  802910:	1004c03a 	cmpne	r2,r2,zero
  802914:	1000051e 	bne	r2,zero,80292c <isBulletCollidingWithPlayer+0x68>
		// No friendly fire
		printf("Error: player bullet in shark bullet list.\n");
  802918:	010020b4 	movhi	r4,130
  80291c:	2132d704 	addi	r4,r4,-13476
  802920:	080a9300 	call	80a930 <puts>
		return FALSE;
  802924:	e03fff15 	stw	zero,-4(fp)
  802928:	00003106 	br	8029f0 <isBulletCollidingWithPlayer+0x12c>
	}

	if (bullet->x >= player->x &&
  80292c:	e0bffe17 	ldw	r2,-8(fp)
  802930:	10c00017 	ldw	r3,0(r2)
  802934:	e0bffd17 	ldw	r2,-12(fp)
  802938:	10800017 	ldw	r2,0(r2)
  80293c:	18802b16 	blt	r3,r2,8029ec <isBulletCollidingWithPlayer+0x128>
  802940:	e0bffe17 	ldw	r2,-8(fp)
  802944:	10c00017 	ldw	r3,0(r2)
  802948:	e0bffd17 	ldw	r2,-12(fp)
  80294c:	10800017 	ldw	r2,0(r2)
  802950:	10800704 	addi	r2,r2,28
  802954:	10c02516 	blt	r2,r3,8029ec <isBulletCollidingWithPlayer+0x128>
		bullet->x <= player->x + PLAYER_WIDTH) {
		// Have x region

		if (bullet->y >= player->y &&
  802958:	e0bffe17 	ldw	r2,-8(fp)
  80295c:	10c00217 	ldw	r3,8(r2)
  802960:	e0bffd17 	ldw	r2,-12(fp)
  802964:	10800217 	ldw	r2,8(r2)
  802968:	18802016 	blt	r3,r2,8029ec <isBulletCollidingWithPlayer+0x128>
  80296c:	e0bffe17 	ldw	r2,-8(fp)
  802970:	10c00217 	ldw	r3,8(r2)
  802974:	e0bffd17 	ldw	r2,-12(fp)
  802978:	10800217 	ldw	r2,8(r2)
  80297c:	108006c4 	addi	r2,r2,27
  802980:	10c01a16 	blt	r2,r3,8029ec <isBulletCollidingWithPlayer+0x128>
			bullet->y <= player->y + PLAYER_HEIGHT) {
			// Have y
			int yRelative = bullet->y - player->y;
  802984:	e0bffe17 	ldw	r2,-8(fp)
  802988:	10c00217 	ldw	r3,8(r2)
  80298c:	e0bffd17 	ldw	r2,-12(fp)
  802990:	10800217 	ldw	r2,8(r2)
  802994:	1885c83a 	sub	r2,r3,r2
  802998:	e0bffc15 	stw	r2,-16(fp)
			int xRelative = bullet->x - player->x;
  80299c:	e0bffe17 	ldw	r2,-8(fp)
  8029a0:	10c00017 	ldw	r3,0(r2)
  8029a4:	e0bffd17 	ldw	r2,-12(fp)
  8029a8:	10800017 	ldw	r2,0(r2)
  8029ac:	1885c83a 	sub	r2,r3,r2
  8029b0:	e0bffb15 	stw	r2,-20(fp)
			return relativePlayerHit[xRelative][yRelative];
  8029b4:	e0bffb17 	ldw	r2,-20(fp)
  8029b8:	e0fffc17 	ldw	r3,-16(fp)
  8029bc:	010020f4 	movhi	r4,131
  8029c0:	21236904 	addi	r4,r4,-29276
  8029c4:	108006e4 	muli	r2,r2,27
  8029c8:	10c5883a 	add	r2,r2,r3
  8029cc:	1085883a 	add	r2,r2,r2
  8029d0:	1105883a 	add	r2,r2,r4
  8029d4:	1080000b 	ldhu	r2,0(r2)
  8029d8:	10bfffcc 	andi	r2,r2,65535
  8029dc:	10a0001c 	xori	r2,r2,32768
  8029e0:	10a00004 	addi	r2,r2,-32768
  8029e4:	e0bfff15 	stw	r2,-4(fp)
  8029e8:	00000106 	br	8029f0 <isBulletCollidingWithPlayer+0x12c>
		}
	}
	return FALSE;
  8029ec:	e03fff15 	stw	zero,-4(fp)
  8029f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8029f4:	e037883a 	mov	sp,fp
  8029f8:	dfc00117 	ldw	ra,4(sp)
  8029fc:	df000017 	ldw	fp,0(sp)
  802a00:	dec00204 	addi	sp,sp,8
  802a04:	f800283a 	ret

00802a08 <isBulletCollidingWithNado>:

short int isBulletCollidingWithNado(Bullet *bullet) {
  802a08:	defffb04 	addi	sp,sp,-20
  802a0c:	df000415 	stw	fp,16(sp)
  802a10:	df000404 	addi	fp,sp,16
  802a14:	e13ffe15 	stw	r4,-8(fp)
	if (bullet->x >= nadoDrawX - 6) {
  802a18:	e0bffe17 	ldw	r2,-8(fp)
  802a1c:	10c00017 	ldw	r3,0(r2)
  802a20:	008020b4 	movhi	r2,130
  802a24:	10bc3604 	addi	r2,r2,-3880
  802a28:	10800017 	ldw	r2,0(r2)
  802a2c:	10bffe84 	addi	r2,r2,-6
  802a30:	18801916 	blt	r3,r2,802a98 <isBulletCollidingWithNado+0x90>
		int xRelative = bullet->x - nadoDrawX + 4;
  802a34:	e0bffe17 	ldw	r2,-8(fp)
  802a38:	10c00017 	ldw	r3,0(r2)
  802a3c:	008020b4 	movhi	r2,130
  802a40:	10bc3604 	addi	r2,r2,-3880
  802a44:	10800017 	ldw	r2,0(r2)
  802a48:	1885c83a 	sub	r2,r3,r2
  802a4c:	10800104 	addi	r2,r2,4
  802a50:	e0bffd15 	stw	r2,-12(fp)
		int yRelative = bullet->y;
  802a54:	e0bffe17 	ldw	r2,-8(fp)
  802a58:	10800217 	ldw	r2,8(r2)
  802a5c:	e0bffc15 	stw	r2,-16(fp)
		return relativeNadoHit[xRelative][yRelative];
  802a60:	e0bffd17 	ldw	r2,-12(fp)
  802a64:	e0fffc17 	ldw	r3,-16(fp)
  802a68:	010020b4 	movhi	r4,130
  802a6c:	2108a704 	addi	r4,r4,8860
  802a70:	10803c24 	muli	r2,r2,240
  802a74:	10c5883a 	add	r2,r2,r3
  802a78:	1085883a 	add	r2,r2,r2
  802a7c:	1105883a 	add	r2,r2,r4
  802a80:	1080000b 	ldhu	r2,0(r2)
  802a84:	10bfffcc 	andi	r2,r2,65535
  802a88:	10a0001c 	xori	r2,r2,32768
  802a8c:	10a00004 	addi	r2,r2,-32768
  802a90:	e0bfff15 	stw	r2,-4(fp)
  802a94:	00000106 	br	802a9c <isBulletCollidingWithNado+0x94>
	}
	return FALSE;
  802a98:	e03fff15 	stw	zero,-4(fp)
  802a9c:	e0bfff17 	ldw	r2,-4(fp)
}
  802aa0:	e037883a 	mov	sp,fp
  802aa4:	df000017 	ldw	fp,0(sp)
  802aa8:	dec00104 	addi	sp,sp,4
  802aac:	f800283a 	ret

00802ab0 <doSharkBulletCollision>:

void doSharkBulletCollision(void) {
  802ab0:	defffb04 	addi	sp,sp,-20
  802ab4:	dfc00415 	stw	ra,16(sp)
  802ab8:	df000315 	stw	fp,12(sp)
  802abc:	df000304 	addi	fp,sp,12
	Bullet *bulletCursor = playerBulletList;
  802ac0:	008020b4 	movhi	r2,130
  802ac4:	10835504 	addi	r2,r2,3412
  802ac8:	10800017 	ldw	r2,0(r2)
  802acc:	e0bfff15 	stw	r2,-4(fp)
	Shark *toKill = NULL;
  802ad0:	e03ffe15 	stw	zero,-8(fp)
	int i = 0;
  802ad4:	e03ffd15 	stw	zero,-12(fp)
	while (bulletCursor != NULL
  802ad8:	00001006 	br	802b1c <doSharkBulletCollision+0x6c>
			&& bulletCursor->type == PLAYERBULLET
			&& i < NUM_BULLETS) {
		toKill = findSharkIfHit(bulletCursor);
  802adc:	e13fff17 	ldw	r4,-4(fp)
  802ae0:	08026e00 	call	8026e0 <findSharkIfHit>
  802ae4:	e0bffe15 	stw	r2,-8(fp)
		if (toKill != NULL) {
  802ae8:	e0bffe17 	ldw	r2,-8(fp)
  802aec:	1005003a 	cmpeq	r2,r2,zero
  802af0:	1000041e 	bne	r2,zero,802b04 <doSharkBulletCollision+0x54>
			killShark(toKill);
  802af4:	e13ffe17 	ldw	r4,-8(fp)
  802af8:	0805b700 	call	805b70 <killShark>
			deleteBullet(bulletCursor);
  802afc:	e13fff17 	ldw	r4,-4(fp)
  802b00:	080212c0 	call	80212c <deleteBullet>
		}
		bulletCursor = bulletCursor->next;
  802b04:	e0bfff17 	ldw	r2,-4(fp)
  802b08:	10800817 	ldw	r2,32(r2)
  802b0c:	e0bfff15 	stw	r2,-4(fp)
		i++;
  802b10:	e0bffd17 	ldw	r2,-12(fp)
  802b14:	10800044 	addi	r2,r2,1
  802b18:	e0bffd15 	stw	r2,-12(fp)

void doSharkBulletCollision(void) {
	Bullet *bulletCursor = playerBulletList;
	Shark *toKill = NULL;
	int i = 0;
	while (bulletCursor != NULL
  802b1c:	e0bfff17 	ldw	r2,-4(fp)
  802b20:	1005003a 	cmpeq	r2,r2,zero
  802b24:	1000071e 	bne	r2,zero,802b44 <doSharkBulletCollision+0x94>
  802b28:	e0bfff17 	ldw	r2,-4(fp)
  802b2c:	10800417 	ldw	r2,16(r2)
  802b30:	1004c03a 	cmpne	r2,r2,zero
  802b34:	1000031e 	bne	r2,zero,802b44 <doSharkBulletCollision+0x94>
  802b38:	e0bffd17 	ldw	r2,-12(fp)
  802b3c:	10802010 	cmplti	r2,r2,128
  802b40:	103fe61e 	bne	r2,zero,802adc <doSharkBulletCollision+0x2c>
			deleteBullet(bulletCursor);
		}
		bulletCursor = bulletCursor->next;
		i++;
	}
}
  802b44:	e037883a 	mov	sp,fp
  802b48:	dfc00117 	ldw	ra,4(sp)
  802b4c:	df000017 	ldw	fp,0(sp)
  802b50:	dec00204 	addi	sp,sp,8
  802b54:	f800283a 	ret

00802b58 <doPlayerBulletCollision>:

void doPlayerBulletCollision(void) {
  802b58:	defffc04 	addi	sp,sp,-16
  802b5c:	dfc00315 	stw	ra,12(sp)
  802b60:	df000215 	stw	fp,8(sp)
  802b64:	df000204 	addi	fp,sp,8
	Bullet *bulletCursor = sharkBulletList;
  802b68:	008020b4 	movhi	r2,130
  802b6c:	10835604 	addi	r2,r2,3416
  802b70:	10800017 	ldw	r2,0(r2)
  802b74:	e0bfff15 	stw	r2,-4(fp)
	int i = 0;
  802b78:	e03ffe15 	stw	zero,-8(fp)
	while (bulletCursor != NULL
  802b7c:	00001006 	br	802bc0 <doPlayerBulletCollision+0x68>
			&& bulletCursor->type == SHARKBULLET
			&& i < NUM_BULLETS) {
		if (isBulletCollidingWithPlayer(&player, bulletCursor) == TRUE) {
  802b80:	010020b4 	movhi	r4,130
  802b84:	2103a304 	addi	r4,r4,3724
  802b88:	e17fff17 	ldw	r5,-4(fp)
  802b8c:	08028c40 	call	8028c4 <isBulletCollidingWithPlayer>
  802b90:	10800058 	cmpnei	r2,r2,1
  802b94:	1000041e 	bne	r2,zero,802ba8 <doPlayerBulletCollision+0x50>
			hitPlayer();
  802b98:	0803e3c0 	call	803e3c <hitPlayer>
			deleteBullet(bulletCursor);
  802b9c:	e13fff17 	ldw	r4,-4(fp)
  802ba0:	080212c0 	call	80212c <deleteBullet>
			break;
  802ba4:	00001006 	br	802be8 <doPlayerBulletCollision+0x90>
		}
		i++;
  802ba8:	e0bffe17 	ldw	r2,-8(fp)
  802bac:	10800044 	addi	r2,r2,1
  802bb0:	e0bffe15 	stw	r2,-8(fp)
		bulletCursor = bulletCursor->next;
  802bb4:	e0bfff17 	ldw	r2,-4(fp)
  802bb8:	10800817 	ldw	r2,32(r2)
  802bbc:	e0bfff15 	stw	r2,-4(fp)
}

void doPlayerBulletCollision(void) {
	Bullet *bulletCursor = sharkBulletList;
	int i = 0;
	while (bulletCursor != NULL
  802bc0:	e0bfff17 	ldw	r2,-4(fp)
  802bc4:	1005003a 	cmpeq	r2,r2,zero
  802bc8:	1000071e 	bne	r2,zero,802be8 <doPlayerBulletCollision+0x90>
  802bcc:	e0bfff17 	ldw	r2,-4(fp)
  802bd0:	10800417 	ldw	r2,16(r2)
  802bd4:	10800058 	cmpnei	r2,r2,1
  802bd8:	1000031e 	bne	r2,zero,802be8 <doPlayerBulletCollision+0x90>
  802bdc:	e0bffe17 	ldw	r2,-8(fp)
  802be0:	10802010 	cmplti	r2,r2,128
  802be4:	103fe61e 	bne	r2,zero,802b80 <doPlayerBulletCollision+0x28>
			break;
		}
		i++;
		bulletCursor = bulletCursor->next;
	}
}
  802be8:	e037883a 	mov	sp,fp
  802bec:	dfc00117 	ldw	ra,4(sp)
  802bf0:	df000017 	ldw	fp,0(sp)
  802bf4:	dec00204 	addi	sp,sp,8
  802bf8:	f800283a 	ret

00802bfc <doNadoBulletCollision>:

void doNadoBulletCollision(void) {
  802bfc:	defffc04 	addi	sp,sp,-16
  802c00:	dfc00315 	stw	ra,12(sp)
  802c04:	df000215 	stw	fp,8(sp)
  802c08:	df000204 	addi	fp,sp,8
	Bullet *bulletCursor = playerBulletList;
  802c0c:	008020b4 	movhi	r2,130
  802c10:	10835504 	addi	r2,r2,3412
  802c14:	10800017 	ldw	r2,0(r2)
  802c18:	e0bfff15 	stw	r2,-4(fp)
	int i = 0;
  802c1c:	e03ffe15 	stw	zero,-8(fp)
	while (bulletCursor != NULL
  802c20:	00000f06 	br	802c60 <doNadoBulletCollision+0x64>
			&& bulletCursor->type == PLAYERBULLET
			&& i < NUM_BULLETS) {
		if (isBulletCollidingWithNado(bulletCursor) == TRUE) {
  802c24:	e13fff17 	ldw	r4,-4(fp)
  802c28:	0802a080 	call	802a08 <isBulletCollidingWithNado>
  802c2c:	10bfffcc 	andi	r2,r2,65535
  802c30:	10a0001c 	xori	r2,r2,32768
  802c34:	10a00004 	addi	r2,r2,-32768
  802c38:	10800058 	cmpnei	r2,r2,1
  802c3c:	1000021e 	bne	r2,zero,802c48 <doNadoBulletCollision+0x4c>
			deleteBullet(bulletCursor);
  802c40:	e13fff17 	ldw	r4,-4(fp)
  802c44:	080212c0 	call	80212c <deleteBullet>
		}
		i++;
  802c48:	e0bffe17 	ldw	r2,-8(fp)
  802c4c:	10800044 	addi	r2,r2,1
  802c50:	e0bffe15 	stw	r2,-8(fp)
		bulletCursor = bulletCursor->next;
  802c54:	e0bfff17 	ldw	r2,-4(fp)
  802c58:	10800817 	ldw	r2,32(r2)
  802c5c:	e0bfff15 	stw	r2,-4(fp)
}

void doNadoBulletCollision(void) {
	Bullet *bulletCursor = playerBulletList;
	int i = 0;
	while (bulletCursor != NULL
  802c60:	e0bfff17 	ldw	r2,-4(fp)
  802c64:	1005003a 	cmpeq	r2,r2,zero
  802c68:	1000071e 	bne	r2,zero,802c88 <doNadoBulletCollision+0x8c>
  802c6c:	e0bfff17 	ldw	r2,-4(fp)
  802c70:	10800417 	ldw	r2,16(r2)
  802c74:	1004c03a 	cmpne	r2,r2,zero
  802c78:	1000031e 	bne	r2,zero,802c88 <doNadoBulletCollision+0x8c>
  802c7c:	e0bffe17 	ldw	r2,-8(fp)
  802c80:	10802010 	cmplti	r2,r2,128
  802c84:	103fe71e 	bne	r2,zero,802c24 <doNadoBulletCollision+0x28>
			deleteBullet(bulletCursor);
		}
		i++;
		bulletCursor = bulletCursor->next;
	}
}
  802c88:	e037883a 	mov	sp,fp
  802c8c:	dfc00117 	ldw	ra,4(sp)
  802c90:	df000017 	ldw	fp,0(sp)
  802c94:	dec00204 	addi	sp,sp,8
  802c98:	f800283a 	ret

00802c9c <setupDisplacement>:
static Displacement right;
static Displacement left;
static Displacement up;
static Displacement down;

void setupDisplacement(void) {
  802c9c:	defffe04 	addi	sp,sp,-8
  802ca0:	dfc00115 	stw	ra,4(sp)
  802ca4:	df000015 	stw	fp,0(sp)
  802ca8:	d839883a 	mov	fp,sp
	right.dx = 1;
  802cac:	00800044 	movi	r2,1
  802cb0:	d0a7260d 	sth	r2,-25448(gp)
	right.dy = 0;
  802cb4:	008020b4 	movhi	r2,130
  802cb8:	10835984 	addi	r2,r2,3430
  802cbc:	1000000d 	sth	zero,0(r2)

	left.dx = -1;
  802cc0:	00bfffc4 	movi	r2,-1
  802cc4:	d0a7280d 	sth	r2,-25440(gp)
	left.dy = 0;
  802cc8:	008020b4 	movhi	r2,130
  802ccc:	10835b84 	addi	r2,r2,3438
  802cd0:	1000000d 	sth	zero,0(r2)

	up.dx = 0;
  802cd4:	d0272a0d 	sth	zero,-25432(gp)
	up.dy = -1;
  802cd8:	00c020b4 	movhi	r3,130
  802cdc:	18c35d84 	addi	r3,r3,3446
  802ce0:	00bfffc4 	movi	r2,-1
  802ce4:	1880000d 	sth	r2,0(r3)

	down.dx = 0;
  802ce8:	d0272c0d 	sth	zero,-25424(gp)
	down.dy = 1;
  802cec:	00c020b4 	movhi	r3,130
  802cf0:	18c35f84 	addi	r3,r3,3454
  802cf4:	00800044 	movi	r2,1
  802cf8:	1880000d 	sth	r2,0(r3)

	setupVerticalDisplacementFunction();
  802cfc:	0802d2c0 	call	802d2c <setupVerticalDisplacementFunction>
	setupCircularDisplacementFunction();
  802d00:	0802e300 	call	802e30 <setupCircularDisplacementFunction>
	setupArcDisplacementFunction();
  802d04:	0802f200 	call	802f20 <setupArcDisplacementFunction>
	setupNoDisplcementFunction();
  802d08:	080300c0 	call	80300c <setupNoDisplcementFunction>

	printf("Setup displacement functions.\n");
  802d0c:	010020b4 	movhi	r4,130
  802d10:	2132e204 	addi	r4,r4,-13432
  802d14:	080a9300 	call	80a930 <puts>
}
  802d18:	e037883a 	mov	sp,fp
  802d1c:	dfc00117 	ldw	ra,4(sp)
  802d20:	df000017 	ldw	fp,0(sp)
  802d24:	dec00204 	addi	sp,sp,8
  802d28:	f800283a 	ret

00802d2c <setupVerticalDisplacementFunction>:

void setupVerticalDisplacementFunction(void) {
  802d2c:	defffc04 	addi	sp,sp,-16
  802d30:	dfc00315 	stw	ra,12(sp)
  802d34:	df000215 	stw	fp,8(sp)
  802d38:	df000204 	addi	fp,sp,8
	int i;
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  802d3c:	e03fff15 	stw	zero,-4(fp)
  802d40:	00002506 	br	802dd8 <setupVerticalDisplacementFunction+0xac>
		ptr = &verticalDisplacementFunctionUp[i];
  802d44:	e0bfff17 	ldw	r2,-4(fp)
  802d48:	100490fa 	slli	r2,r2,3
  802d4c:	1007883a 	mov	r3,r2
  802d50:	008020f4 	movhi	r2,131
  802d54:	10a5e304 	addi	r2,r2,-26740
  802d58:	1885883a 	add	r2,r3,r2
  802d5c:	e0bffe15 	stw	r2,-8(fp)
		makeUp(ptr);
  802d60:	e13ffe17 	ldw	r4,-8(fp)
  802d64:	080311c0 	call	80311c <makeUp>
		ptr->next = &verticalDisplacementFunctionUp[i + 1];
  802d68:	e0bfff17 	ldw	r2,-4(fp)
  802d6c:	100490fa 	slli	r2,r2,3
  802d70:	1007883a 	mov	r3,r2
  802d74:	008020f4 	movhi	r2,131
  802d78:	10a5e504 	addi	r2,r2,-26732
  802d7c:	1887883a 	add	r3,r3,r2
  802d80:	e0bffe17 	ldw	r2,-8(fp)
  802d84:	10c00115 	stw	r3,4(r2)

		ptr = &verticalDisplacementFunctionDown[i];
  802d88:	e0bfff17 	ldw	r2,-4(fp)
  802d8c:	100490fa 	slli	r2,r2,3
  802d90:	1007883a 	mov	r3,r2
  802d94:	008020f4 	movhi	r2,131
  802d98:	10a4e304 	addi	r2,r2,-27764
  802d9c:	1885883a 	add	r2,r3,r2
  802da0:	e0bffe15 	stw	r2,-8(fp)
		makeDown(ptr);
  802da4:	e13ffe17 	ldw	r4,-8(fp)
  802da8:	080315c0 	call	80315c <makeDown>
		ptr-> next = &verticalDisplacementFunctionDown[i + 1];
  802dac:	e0bfff17 	ldw	r2,-4(fp)
  802db0:	100490fa 	slli	r2,r2,3
  802db4:	1007883a 	mov	r3,r2
  802db8:	008020f4 	movhi	r2,131
  802dbc:	10a4e504 	addi	r2,r2,-27756
  802dc0:	1887883a 	add	r3,r3,r2
  802dc4:	e0bffe17 	ldw	r2,-8(fp)
  802dc8:	10c00115 	stw	r3,4(r2)
}

void setupVerticalDisplacementFunction(void) {
	int i;
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  802dcc:	e0bfff17 	ldw	r2,-4(fp)
  802dd0:	10800044 	addi	r2,r2,1
  802dd4:	e0bfff15 	stw	r2,-4(fp)
  802dd8:	e0bfff17 	ldw	r2,-4(fp)
  802ddc:	10802010 	cmplti	r2,r2,128
  802de0:	103fd81e 	bne	r2,zero,802d44 <setupVerticalDisplacementFunction+0x18>

		ptr = &verticalDisplacementFunctionDown[i];
		makeDown(ptr);
		ptr-> next = &verticalDisplacementFunctionDown[i + 1];
	}
	ptr = &verticalDisplacementFunctionUp[DISPLACEMENT_LENGTH - 1];
  802de4:	008020f4 	movhi	r2,131
  802de8:	10a6e104 	addi	r2,r2,-25724
  802dec:	e0bffe15 	stw	r2,-8(fp)
	ptr->next = verticalDisplacementFunctionDown;
  802df0:	e0fffe17 	ldw	r3,-8(fp)
  802df4:	008020f4 	movhi	r2,131
  802df8:	10a4e304 	addi	r2,r2,-27764
  802dfc:	18800115 	stw	r2,4(r3)
	ptr = &verticalDisplacementFunctionDown[DISPLACEMENT_LENGTH - 1];
  802e00:	008020f4 	movhi	r2,131
  802e04:	10a5e104 	addi	r2,r2,-26748
  802e08:	e0bffe15 	stw	r2,-8(fp)
	ptr->next = verticalDisplacementFunctionUp;
  802e0c:	e0fffe17 	ldw	r3,-8(fp)
  802e10:	008020f4 	movhi	r2,131
  802e14:	10a5e304 	addi	r2,r2,-26740
  802e18:	18800115 	stw	r2,4(r3)
}
  802e1c:	e037883a 	mov	sp,fp
  802e20:	dfc00117 	ldw	ra,4(sp)
  802e24:	df000017 	ldw	fp,0(sp)
  802e28:	dec00204 	addi	sp,sp,8
  802e2c:	f800283a 	ret

00802e30 <setupCircularDisplacementFunction>:

void setupCircularDisplacementFunction(void) {
  802e30:	defffc04 	addi	sp,sp,-16
  802e34:	dfc00315 	stw	ra,12(sp)
  802e38:	df000215 	stw	fp,8(sp)
  802e3c:	df000204 	addi	fp,sp,8
	int i = 0;
  802e40:	e03fff15 	stw	zero,-4(fp)
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  802e44:	e03fff15 	stw	zero,-4(fp)
  802e48:	00002606 	br	802ee4 <setupCircularDisplacementFunction+0xb4>
		ptr = &circularDisplacementFunction[i];
  802e4c:	e0bfff17 	ldw	r2,-4(fp)
  802e50:	100490fa 	slli	r2,r2,3
  802e54:	1007883a 	mov	r3,r2
  802e58:	008020f4 	movhi	r2,131
  802e5c:	10a6e304 	addi	r2,r2,-25716
  802e60:	1885883a 	add	r2,r3,r2
  802e64:	e0bffe15 	stw	r2,-8(fp)
		if (i < DISPLACEMENT_LENGTH / 4) {
  802e68:	e0bfff17 	ldw	r2,-4(fp)
  802e6c:	10800808 	cmpgei	r2,r2,32
  802e70:	1000031e 	bne	r2,zero,802e80 <setupCircularDisplacementFunction+0x50>
			makeRight(ptr);
  802e74:	e13ffe17 	ldw	r4,-8(fp)
  802e78:	080309c0 	call	80309c <makeRight>
  802e7c:	00000e06 	br	802eb8 <setupCircularDisplacementFunction+0x88>
		} else if (i < DISPLACEMENT_LENGTH / 2) {
  802e80:	e0bfff17 	ldw	r2,-4(fp)
  802e84:	10801008 	cmpgei	r2,r2,64
  802e88:	1000031e 	bne	r2,zero,802e98 <setupCircularDisplacementFunction+0x68>
			makeDown(ptr);
  802e8c:	e13ffe17 	ldw	r4,-8(fp)
  802e90:	080315c0 	call	80315c <makeDown>
  802e94:	00000806 	br	802eb8 <setupCircularDisplacementFunction+0x88>
		} else if (i < 3 * DISPLACEMENT_LENGTH / 4) {
  802e98:	e0bfff17 	ldw	r2,-4(fp)
  802e9c:	10801808 	cmpgei	r2,r2,96
  802ea0:	1000031e 	bne	r2,zero,802eb0 <setupCircularDisplacementFunction+0x80>
			makeLeft(ptr);
  802ea4:	e13ffe17 	ldw	r4,-8(fp)
  802ea8:	08030dc0 	call	8030dc <makeLeft>
  802eac:	00000206 	br	802eb8 <setupCircularDisplacementFunction+0x88>
		} else {
			makeUp(ptr);
  802eb0:	e13ffe17 	ldw	r4,-8(fp)
  802eb4:	080311c0 	call	80311c <makeUp>
		}
		ptr->next = &circularDisplacementFunction[i + 1];
  802eb8:	e0bfff17 	ldw	r2,-4(fp)
  802ebc:	100490fa 	slli	r2,r2,3
  802ec0:	1007883a 	mov	r3,r2
  802ec4:	008020f4 	movhi	r2,131
  802ec8:	10a6e504 	addi	r2,r2,-25708
  802ecc:	1887883a 	add	r3,r3,r2
  802ed0:	e0bffe17 	ldw	r2,-8(fp)
  802ed4:	10c00115 	stw	r3,4(r2)
}

void setupCircularDisplacementFunction(void) {
	int i = 0;
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  802ed8:	e0bfff17 	ldw	r2,-4(fp)
  802edc:	10800044 	addi	r2,r2,1
  802ee0:	e0bfff15 	stw	r2,-4(fp)
  802ee4:	e0bfff17 	ldw	r2,-4(fp)
  802ee8:	10802010 	cmplti	r2,r2,128
  802eec:	103fd71e 	bne	r2,zero,802e4c <setupCircularDisplacementFunction+0x1c>
		} else {
			makeUp(ptr);
		}
		ptr->next = &circularDisplacementFunction[i + 1];
	}
	ptr = &circularDisplacementFunction[DISPLACEMENT_LENGTH - 1];
  802ef0:	008020f4 	movhi	r2,131
  802ef4:	10a7e104 	addi	r2,r2,-24700
  802ef8:	e0bffe15 	stw	r2,-8(fp)
	ptr->next = circularDisplacementFunction;
  802efc:	e0fffe17 	ldw	r3,-8(fp)
  802f00:	008020f4 	movhi	r2,131
  802f04:	10a6e304 	addi	r2,r2,-25716
  802f08:	18800115 	stw	r2,4(r3)
}
  802f0c:	e037883a 	mov	sp,fp
  802f10:	dfc00117 	ldw	ra,4(sp)
  802f14:	df000017 	ldw	fp,0(sp)
  802f18:	dec00204 	addi	sp,sp,8
  802f1c:	f800283a 	ret

00802f20 <setupArcDisplacementFunction>:

void setupArcDisplacementFunction(void) {
  802f20:	defffc04 	addi	sp,sp,-16
  802f24:	dfc00315 	stw	ra,12(sp)
  802f28:	df000215 	stw	fp,8(sp)
  802f2c:	df000204 	addi	fp,sp,8
	int i;
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  802f30:	e03fff15 	stw	zero,-4(fp)
  802f34:	00002606 	br	802fd0 <setupArcDisplacementFunction+0xb0>
		ptr = &arcDisplacementFunction[i];
  802f38:	e0bfff17 	ldw	r2,-4(fp)
  802f3c:	100490fa 	slli	r2,r2,3
  802f40:	1007883a 	mov	r3,r2
  802f44:	008020f4 	movhi	r2,131
  802f48:	10a8e304 	addi	r2,r2,-23668
  802f4c:	1885883a 	add	r2,r3,r2
  802f50:	e0bffe15 	stw	r2,-8(fp)
		if (i < DISPLACEMENT_LENGTH / 4) {
  802f54:	e0bfff17 	ldw	r2,-4(fp)
  802f58:	10800808 	cmpgei	r2,r2,32
  802f5c:	1000031e 	bne	r2,zero,802f6c <setupArcDisplacementFunction+0x4c>
			makeDownRight(ptr);
  802f60:	e13ffe17 	ldw	r4,-8(fp)
  802f64:	080319c0 	call	80319c <makeDownRight>
  802f68:	00000e06 	br	802fa4 <setupArcDisplacementFunction+0x84>
		} else if (i < DISPLACEMENT_LENGTH / 2) {
  802f6c:	e0bfff17 	ldw	r2,-4(fp)
  802f70:	10801008 	cmpgei	r2,r2,64
  802f74:	1000031e 	bne	r2,zero,802f84 <setupArcDisplacementFunction+0x64>
			makeDownLeft(ptr);
  802f78:	e13ffe17 	ldw	r4,-8(fp)
  802f7c:	08031dc0 	call	8031dc <makeDownLeft>
  802f80:	00000806 	br	802fa4 <setupArcDisplacementFunction+0x84>
		} else if (i < 3 * DISPLACEMENT_LENGTH / 4) {
  802f84:	e0bfff17 	ldw	r2,-4(fp)
  802f88:	10801808 	cmpgei	r2,r2,96
  802f8c:	1000031e 	bne	r2,zero,802f9c <setupArcDisplacementFunction+0x7c>
			makeUpRight(ptr);
  802f90:	e13ffe17 	ldw	r4,-8(fp)
  802f94:	080321c0 	call	80321c <makeUpRight>
  802f98:	00000206 	br	802fa4 <setupArcDisplacementFunction+0x84>
		} else {
			makeUpLeft(ptr);
  802f9c:	e13ffe17 	ldw	r4,-8(fp)
  802fa0:	080325c0 	call	80325c <makeUpLeft>
		}
		ptr->next = &arcDisplacementFunction[i + 1];
  802fa4:	e0bfff17 	ldw	r2,-4(fp)
  802fa8:	100490fa 	slli	r2,r2,3
  802fac:	1007883a 	mov	r3,r2
  802fb0:	008020f4 	movhi	r2,131
  802fb4:	10a8e504 	addi	r2,r2,-23660
  802fb8:	1887883a 	add	r3,r3,r2
  802fbc:	e0bffe17 	ldw	r2,-8(fp)
  802fc0:	10c00115 	stw	r3,4(r2)
}

void setupArcDisplacementFunction(void) {
	int i;
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  802fc4:	e0bfff17 	ldw	r2,-4(fp)
  802fc8:	10800044 	addi	r2,r2,1
  802fcc:	e0bfff15 	stw	r2,-4(fp)
  802fd0:	e0bfff17 	ldw	r2,-4(fp)
  802fd4:	10802010 	cmplti	r2,r2,128
  802fd8:	103fd71e 	bne	r2,zero,802f38 <setupArcDisplacementFunction+0x18>
		} else {
			makeUpLeft(ptr);
		}
		ptr->next = &arcDisplacementFunction[i + 1];
	}
	ptr = &arcDisplacementFunction[DISPLACEMENT_LENGTH - 1];
  802fdc:	008020f4 	movhi	r2,131
  802fe0:	10a9e104 	addi	r2,r2,-22652
  802fe4:	e0bffe15 	stw	r2,-8(fp)
	ptr->next = arcDisplacementFunction;
  802fe8:	e0fffe17 	ldw	r3,-8(fp)
  802fec:	008020f4 	movhi	r2,131
  802ff0:	10a8e304 	addi	r2,r2,-23668
  802ff4:	18800115 	stw	r2,4(r3)
}
  802ff8:	e037883a 	mov	sp,fp
  802ffc:	dfc00117 	ldw	ra,4(sp)
  803000:	df000017 	ldw	fp,0(sp)
  803004:	dec00204 	addi	sp,sp,8
  803008:	f800283a 	ret

0080300c <setupNoDisplcementFunction>:

void setupNoDisplcementFunction(void) {
  80300c:	defffe04 	addi	sp,sp,-8
  803010:	df000115 	stw	fp,4(sp)
  803014:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  803018:	e03fff15 	stw	zero,-4(fp)
  80301c:	00001806 	br	803080 <setupNoDisplcementFunction+0x74>
		doNotMove[i].dx = 0;
  803020:	e0bfff17 	ldw	r2,-4(fp)
  803024:	00c020f4 	movhi	r3,131
  803028:	18e7e304 	addi	r3,r3,-24692
  80302c:	100490fa 	slli	r2,r2,3
  803030:	10c5883a 	add	r2,r2,r3
  803034:	1000000d 	sth	zero,0(r2)
		doNotMove[i].dy = 0;
  803038:	e0bfff17 	ldw	r2,-4(fp)
  80303c:	00c020f4 	movhi	r3,131
  803040:	18e7e304 	addi	r3,r3,-24692
  803044:	100490fa 	slli	r2,r2,3
  803048:	10c5883a 	add	r2,r2,r3
  80304c:	1000008d 	sth	zero,2(r2)
		doNotMove[i].next = doNotMove;
  803050:	e0bfff17 	ldw	r2,-4(fp)
  803054:	00c020f4 	movhi	r3,131
  803058:	18e7e304 	addi	r3,r3,-24692
  80305c:	100490fa 	slli	r2,r2,3
  803060:	10c5883a 	add	r2,r2,r3
  803064:	10c00104 	addi	r3,r2,4
  803068:	008020f4 	movhi	r2,131
  80306c:	10a7e304 	addi	r2,r2,-24692
  803070:	18800015 	stw	r2,0(r3)
	ptr->next = arcDisplacementFunction;
}

void setupNoDisplcementFunction(void) {
	int i;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  803074:	e0bfff17 	ldw	r2,-4(fp)
  803078:	10800044 	addi	r2,r2,1
  80307c:	e0bfff15 	stw	r2,-4(fp)
  803080:	e0bfff17 	ldw	r2,-4(fp)
  803084:	10802010 	cmplti	r2,r2,128
  803088:	103fe51e 	bne	r2,zero,803020 <setupNoDisplcementFunction+0x14>
		doNotMove[i].dx = 0;
		doNotMove[i].dy = 0;
		doNotMove[i].next = doNotMove;
	}
}
  80308c:	e037883a 	mov	sp,fp
  803090:	df000017 	ldw	fp,0(sp)
  803094:	dec00104 	addi	sp,sp,4
  803098:	f800283a 	ret

0080309c <makeRight>:

void makeRight(Displacement *disp) {
  80309c:	defffe04 	addi	sp,sp,-8
  8030a0:	df000115 	stw	fp,4(sp)
  8030a4:	df000104 	addi	fp,sp,4
  8030a8:	e13fff15 	stw	r4,-4(fp)
	disp->dx = right.dx;
  8030ac:	d0e7260b 	ldhu	r3,-25448(gp)
  8030b0:	e0bfff17 	ldw	r2,-4(fp)
  8030b4:	10c0000d 	sth	r3,0(r2)
	disp->dy = right.dy;
  8030b8:	008020b4 	movhi	r2,130
  8030bc:	10835984 	addi	r2,r2,3430
  8030c0:	10c0000b 	ldhu	r3,0(r2)
  8030c4:	e0bfff17 	ldw	r2,-4(fp)
  8030c8:	10c0008d 	sth	r3,2(r2)
}
  8030cc:	e037883a 	mov	sp,fp
  8030d0:	df000017 	ldw	fp,0(sp)
  8030d4:	dec00104 	addi	sp,sp,4
  8030d8:	f800283a 	ret

008030dc <makeLeft>:
void makeLeft(Displacement *disp) {
  8030dc:	defffe04 	addi	sp,sp,-8
  8030e0:	df000115 	stw	fp,4(sp)
  8030e4:	df000104 	addi	fp,sp,4
  8030e8:	e13fff15 	stw	r4,-4(fp)
	disp->dx = left.dx;
  8030ec:	d0e7280b 	ldhu	r3,-25440(gp)
  8030f0:	e0bfff17 	ldw	r2,-4(fp)
  8030f4:	10c0000d 	sth	r3,0(r2)
	disp->dy = left.dy;
  8030f8:	008020b4 	movhi	r2,130
  8030fc:	10835b84 	addi	r2,r2,3438
  803100:	10c0000b 	ldhu	r3,0(r2)
  803104:	e0bfff17 	ldw	r2,-4(fp)
  803108:	10c0008d 	sth	r3,2(r2)
}
  80310c:	e037883a 	mov	sp,fp
  803110:	df000017 	ldw	fp,0(sp)
  803114:	dec00104 	addi	sp,sp,4
  803118:	f800283a 	ret

0080311c <makeUp>:
void makeUp(Displacement *disp) {
  80311c:	defffe04 	addi	sp,sp,-8
  803120:	df000115 	stw	fp,4(sp)
  803124:	df000104 	addi	fp,sp,4
  803128:	e13fff15 	stw	r4,-4(fp)
	disp->dx = up.dx;
  80312c:	d0e72a0b 	ldhu	r3,-25432(gp)
  803130:	e0bfff17 	ldw	r2,-4(fp)
  803134:	10c0000d 	sth	r3,0(r2)
	disp->dy = up.dy;
  803138:	008020b4 	movhi	r2,130
  80313c:	10835d84 	addi	r2,r2,3446
  803140:	10c0000b 	ldhu	r3,0(r2)
  803144:	e0bfff17 	ldw	r2,-4(fp)
  803148:	10c0008d 	sth	r3,2(r2)
}
  80314c:	e037883a 	mov	sp,fp
  803150:	df000017 	ldw	fp,0(sp)
  803154:	dec00104 	addi	sp,sp,4
  803158:	f800283a 	ret

0080315c <makeDown>:

void makeDown(Displacement *disp) {
  80315c:	defffe04 	addi	sp,sp,-8
  803160:	df000115 	stw	fp,4(sp)
  803164:	df000104 	addi	fp,sp,4
  803168:	e13fff15 	stw	r4,-4(fp)
	disp->dx = down.dx;
  80316c:	d0e72c0b 	ldhu	r3,-25424(gp)
  803170:	e0bfff17 	ldw	r2,-4(fp)
  803174:	10c0000d 	sth	r3,0(r2)
	disp->dy = down.dy;
  803178:	008020b4 	movhi	r2,130
  80317c:	10835f84 	addi	r2,r2,3454
  803180:	10c0000b 	ldhu	r3,0(r2)
  803184:	e0bfff17 	ldw	r2,-4(fp)
  803188:	10c0008d 	sth	r3,2(r2)
}
  80318c:	e037883a 	mov	sp,fp
  803190:	df000017 	ldw	fp,0(sp)
  803194:	dec00104 	addi	sp,sp,4
  803198:	f800283a 	ret

0080319c <makeDownRight>:

void makeDownRight(Displacement *disp) {
  80319c:	defffe04 	addi	sp,sp,-8
  8031a0:	df000115 	stw	fp,4(sp)
  8031a4:	df000104 	addi	fp,sp,4
  8031a8:	e13fff15 	stw	r4,-4(fp)
	disp->dx = right.dx;
  8031ac:	d0e7260b 	ldhu	r3,-25448(gp)
  8031b0:	e0bfff17 	ldw	r2,-4(fp)
  8031b4:	10c0000d 	sth	r3,0(r2)
	disp->dy = down.dy;
  8031b8:	008020b4 	movhi	r2,130
  8031bc:	10835f84 	addi	r2,r2,3454
  8031c0:	10c0000b 	ldhu	r3,0(r2)
  8031c4:	e0bfff17 	ldw	r2,-4(fp)
  8031c8:	10c0008d 	sth	r3,2(r2)
}
  8031cc:	e037883a 	mov	sp,fp
  8031d0:	df000017 	ldw	fp,0(sp)
  8031d4:	dec00104 	addi	sp,sp,4
  8031d8:	f800283a 	ret

008031dc <makeDownLeft>:

void makeDownLeft(Displacement *disp) {
  8031dc:	defffe04 	addi	sp,sp,-8
  8031e0:	df000115 	stw	fp,4(sp)
  8031e4:	df000104 	addi	fp,sp,4
  8031e8:	e13fff15 	stw	r4,-4(fp)
	disp->dx = left.dx;
  8031ec:	d0e7280b 	ldhu	r3,-25440(gp)
  8031f0:	e0bfff17 	ldw	r2,-4(fp)
  8031f4:	10c0000d 	sth	r3,0(r2)
	disp->dy = down.dy;
  8031f8:	008020b4 	movhi	r2,130
  8031fc:	10835f84 	addi	r2,r2,3454
  803200:	10c0000b 	ldhu	r3,0(r2)
  803204:	e0bfff17 	ldw	r2,-4(fp)
  803208:	10c0008d 	sth	r3,2(r2)
}
  80320c:	e037883a 	mov	sp,fp
  803210:	df000017 	ldw	fp,0(sp)
  803214:	dec00104 	addi	sp,sp,4
  803218:	f800283a 	ret

0080321c <makeUpRight>:

void makeUpRight(Displacement *disp) {
  80321c:	defffe04 	addi	sp,sp,-8
  803220:	df000115 	stw	fp,4(sp)
  803224:	df000104 	addi	fp,sp,4
  803228:	e13fff15 	stw	r4,-4(fp)
	disp->dx = right.dx;
  80322c:	d0e7260b 	ldhu	r3,-25448(gp)
  803230:	e0bfff17 	ldw	r2,-4(fp)
  803234:	10c0000d 	sth	r3,0(r2)
	disp->dy = up.dy;
  803238:	008020b4 	movhi	r2,130
  80323c:	10835d84 	addi	r2,r2,3446
  803240:	10c0000b 	ldhu	r3,0(r2)
  803244:	e0bfff17 	ldw	r2,-4(fp)
  803248:	10c0008d 	sth	r3,2(r2)
}
  80324c:	e037883a 	mov	sp,fp
  803250:	df000017 	ldw	fp,0(sp)
  803254:	dec00104 	addi	sp,sp,4
  803258:	f800283a 	ret

0080325c <makeUpLeft>:

void makeUpLeft(Displacement *disp) {
  80325c:	defffe04 	addi	sp,sp,-8
  803260:	df000115 	stw	fp,4(sp)
  803264:	df000104 	addi	fp,sp,4
  803268:	e13fff15 	stw	r4,-4(fp)
	disp->dx = left.dx;
  80326c:	d0e7280b 	ldhu	r3,-25440(gp)
  803270:	e0bfff17 	ldw	r2,-4(fp)
  803274:	10c0000d 	sth	r3,0(r2)
	disp->dy = up.dy;
  803278:	008020b4 	movhi	r2,130
  80327c:	10835d84 	addi	r2,r2,3446
  803280:	10c0000b 	ldhu	r3,0(r2)
  803284:	e0bfff17 	ldw	r2,-4(fp)
  803288:	10c0008d 	sth	r3,2(r2)
}
  80328c:	e037883a 	mov	sp,fp
  803290:	df000017 	ldw	fp,0(sp)
  803294:	dec00104 	addi	sp,sp,4
  803298:	f800283a 	ret

0080329c <setToRandomDisplacement>:

void setToRandomDisplacement(Shark *shark) {
  80329c:	defff804 	addi	sp,sp,-32
  8032a0:	dfc00715 	stw	ra,28(sp)
  8032a4:	df000615 	stw	fp,24(sp)
  8032a8:	df000604 	addi	fp,sp,24
  8032ac:	e13ffd15 	stw	r4,-12(fp)
	srand(time(NULL));
  8032b0:	0009883a 	mov	r4,zero
  8032b4:	080aabc0 	call	80aabc <time>
  8032b8:	1009883a 	mov	r4,r2
  8032bc:	080a9440 	call	80a944 <srand>
	int r = rand();
  8032c0:	080a9600 	call	80a960 <rand>
  8032c4:	e0bffc15 	stw	r2,-16(fp)
	short int select = r % 4;
  8032c8:	e0fffc17 	ldw	r3,-16(fp)
  8032cc:	00a00034 	movhi	r2,32768
  8032d0:	108000c4 	addi	r2,r2,3
  8032d4:	1886703a 	and	r3,r3,r2
  8032d8:	e0ffff15 	stw	r3,-4(fp)
  8032dc:	e0ffff17 	ldw	r3,-4(fp)
  8032e0:	1804403a 	cmpge	r2,r3,zero
  8032e4:	10000a1e 	bne	r2,zero,803310 <setToRandomDisplacement+0x74>
  8032e8:	e0bfff17 	ldw	r2,-4(fp)
  8032ec:	10bfffc4 	addi	r2,r2,-1
  8032f0:	e0bfff15 	stw	r2,-4(fp)
  8032f4:	00bfff04 	movi	r2,-4
  8032f8:	e0ffff17 	ldw	r3,-4(fp)
  8032fc:	1886b03a 	or	r3,r3,r2
  803300:	e0ffff15 	stw	r3,-4(fp)
  803304:	e0bfff17 	ldw	r2,-4(fp)
  803308:	10800044 	addi	r2,r2,1
  80330c:	e0bfff15 	stw	r2,-4(fp)
  803310:	e0bfff17 	ldw	r2,-4(fp)
  803314:	e0bffb0d 	sth	r2,-20(fp)
	Displacement *ptr;
	switch (select) {
  803318:	e0fffb0f 	ldh	r3,-20(fp)
  80331c:	e0fffe15 	stw	r3,-8(fp)
  803320:	e0fffe17 	ldw	r3,-8(fp)
  803324:	18800060 	cmpeqi	r2,r3,1
  803328:	1000121e 	bne	r2,zero,803374 <setToRandomDisplacement+0xd8>
  80332c:	e0fffe17 	ldw	r3,-8(fp)
  803330:	18800088 	cmpgei	r2,r3,2
  803334:	1000041e 	bne	r2,zero,803348 <setToRandomDisplacement+0xac>
  803338:	e0fffe17 	ldw	r3,-8(fp)
  80333c:	1805003a 	cmpeq	r2,r3,zero
  803340:	1000081e 	bne	r2,zero,803364 <setToRandomDisplacement+0xc8>
  803344:	00001606 	br	8033a0 <setToRandomDisplacement+0x104>
  803348:	e0fffe17 	ldw	r3,-8(fp)
  80334c:	188000a0 	cmpeqi	r2,r3,2
  803350:	10000c1e 	bne	r2,zero,803384 <setToRandomDisplacement+0xe8>
  803354:	e0fffe17 	ldw	r3,-8(fp)
  803358:	188000e0 	cmpeqi	r2,r3,3
  80335c:	10000d1e 	bne	r2,zero,803394 <setToRandomDisplacement+0xf8>
  803360:	00000f06 	br	8033a0 <setToRandomDisplacement+0x104>
	case 0:
		ptr = verticalDisplacementFunctionUp;
  803364:	008020f4 	movhi	r2,131
  803368:	10a5e304 	addi	r2,r2,-26740
  80336c:	e0bffa15 	stw	r2,-24(fp)
		break;
  803370:	00000b06 	br	8033a0 <setToRandomDisplacement+0x104>
	case 1:
		ptr = verticalDisplacementFunctionDown;
  803374:	008020f4 	movhi	r2,131
  803378:	10a4e304 	addi	r2,r2,-27764
  80337c:	e0bffa15 	stw	r2,-24(fp)
		break;
  803380:	00000706 	br	8033a0 <setToRandomDisplacement+0x104>
	case 2:
		ptr = circularDisplacementFunction;
  803384:	008020f4 	movhi	r2,131
  803388:	10a6e304 	addi	r2,r2,-25716
  80338c:	e0bffa15 	stw	r2,-24(fp)
		break;
  803390:	00000306 	br	8033a0 <setToRandomDisplacement+0x104>
	case 3:
		ptr = arcDisplacementFunction;
  803394:	008020f4 	movhi	r2,131
  803398:	10a8e304 	addi	r2,r2,-23668
  80339c:	e0bffa15 	stw	r2,-24(fp)
		break;
	}
	shark->displacement = ptr;
  8033a0:	e0fffd17 	ldw	r3,-12(fp)
  8033a4:	e0bffa17 	ldw	r2,-24(fp)
  8033a8:	18800815 	stw	r2,32(r3)
}
  8033ac:	e037883a 	mov	sp,fp
  8033b0:	dfc00117 	ldw	ra,4(sp)
  8033b4:	df000017 	ldw	fp,0(sp)
  8033b8:	dec00204 	addi	sp,sp,8
  8033bc:	f800283a 	ret

008033c0 <gameEndSequence>:
#include "gameEnd.h"

void gameEndSequence(void) {
  8033c0:	defffe04 	addi	sp,sp,-8
  8033c4:	dfc00115 	stw	ra,4(sp)
  8033c8:	df000015 	stw	fp,0(sp)
  8033cc:	d839883a 	mov	fp,sp
	updateHighScoreBoard();
  8033d0:	08043240 	call	804324 <updateHighScoreBoard>

	clearScreen();
  8033d4:	08062a40 	call	8062a4 <clearScreen>

	readHighScoreBoardFromSD();
  8033d8:	0803fd00 	call	803fd0 <readHighScoreBoardFromSD>
	drawScore();
  8033dc:	0804c080 	call	804c08 <drawScore>
	delayUntilUPAndButtonPressed();
  8033e0:	08037780 	call	803778 <delayUntilUPAndButtonPressed>

	clearScreen();
  8033e4:	08062a40 	call	8062a4 <clearScreen>

	initPlayer();
  8033e8:	0803be40 	call	803be4 <initPlayer>
	setCurrentPlayerLives(3);
  8033ec:	010000c4 	movi	r4,3
  8033f0:	0804bb80 	call	804bb8 <setCurrentPlayerLives>
	setCurrentPlayerScore(0);
  8033f4:	0009883a 	mov	r4,zero
  8033f8:	0804b680 	call	804b68 <setCurrentPlayerScore>


	initSharks();
  8033fc:	080543c0 	call	80543c <initSharks>
	//DO ALL SHARK CLEARING/INITIALIZATION STUFF
	initBullets();
  803400:	08018d00 	call	8018d0 <initBullets>
	//DO ALL BULLET CLEARING/INITIALIZATION STUFF

	drawSplashScreen();
  803404:	0805d540 	call	805d54 <drawSplashScreen>
	swapSplashScreenText();
  803408:	0805dd80 	call	805dd8 <swapSplashScreenText>
	//delayUntilUPAndButtonPressed();

	//clearScreen();
}
  80340c:	e037883a 	mov	sp,fp
  803410:	dfc00117 	ldw	ra,4(sp)
  803414:	df000017 	ldw	fp,0(sp)
  803418:	dec00204 	addi	sp,sp,8
  80341c:	f800283a 	ret

00803420 <handleKeyInput>:
#include "input.h"


void handleKeyInput(void){
  803420:	defffd04 	addi	sp,sp,-12
  803424:	dfc00215 	stw	ra,8(sp)
  803428:	df000115 	stw	fp,4(sp)
  80342c:	df000104 	addi	fp,sp,4
	static short int edgeDetect0 = 0;
	static short int edgeDetect1 = 0;
	static short int edgeDetect2 = 0;
	static short int edgeDetect3 = 0;

	keyInput = IORD_8DIRECT(KEYS_BASE, 0);
  803430:	00804034 	movhi	r2,256
  803434:	10842004 	addi	r2,r2,4224
  803438:	10800023 	ldbuio	r2,0(r2)
  80343c:	d0a73005 	stb	r2,-25408(gp)
	char key0 = keyInput & 0x01;
  803440:	d0a73003 	ldbu	r2,-25408(gp)
  803444:	1080004c 	andi	r2,r2,1
  803448:	e0bfffc5 	stb	r2,-1(fp)
	char key1 = keyInput & 0x02;
  80344c:	d0a73003 	ldbu	r2,-25408(gp)
  803450:	1080008c 	andi	r2,r2,2
  803454:	e0bfff85 	stb	r2,-2(fp)
	char key2 = keyInput & 0x04;
  803458:	d0a73003 	ldbu	r2,-25408(gp)
  80345c:	1080010c 	andi	r2,r2,4
  803460:	e0bfff45 	stb	r2,-3(fp)
	char key3 = keyInput & 0x08;
  803464:	d0a73003 	ldbu	r2,-25408(gp)
  803468:	1080020c 	andi	r2,r2,8
  80346c:	e0bfff05 	stb	r2,-4(fp)
		edgeDetect2 = 0;
		//updateHighScoreBoard();
		//playTheme();
	} //
*/
	if (!key3 && (edgeDetect3 == 0)) {
  803470:	e0bfff07 	ldb	r2,-4(fp)
  803474:	1004c03a 	cmpne	r2,r2,zero
  803478:	1000091e 	bne	r2,zero,8034a0 <handleKeyInput+0x80>
  80347c:	d0a72e0b 	ldhu	r2,-25416(gp)
  803480:	10bfffcc 	andi	r2,r2,65535
  803484:	10a0001c 	xori	r2,r2,32768
  803488:	10a00004 	addi	r2,r2,-32768
  80348c:	1004c03a 	cmpne	r2,r2,zero
  803490:	1000031e 	bne	r2,zero,8034a0 <handleKeyInput+0x80>
		edgeDetect3 = 1;
  803494:	00800044 	movi	r2,1
  803498:	d0a72e0d 	sth	r2,-25416(gp)
		edgeDetect2 = 0;
		//updateHighScoreBoard();
		//playTheme();
	} //
*/
	if (!key3 && (edgeDetect3 == 0)) {
  80349c:	00000b06 	br	8034cc <handleKeyInput+0xac>
		edgeDetect3 = 1;
	} else if (key3 && (edgeDetect3 == 1)) {
  8034a0:	e0bfff07 	ldb	r2,-4(fp)
  8034a4:	1005003a 	cmpeq	r2,r2,zero
  8034a8:	1000081e 	bne	r2,zero,8034cc <handleKeyInput+0xac>
  8034ac:	d0a72e0b 	ldhu	r2,-25416(gp)
  8034b0:	10bfffcc 	andi	r2,r2,65535
  8034b4:	10a0001c 	xori	r2,r2,32768
  8034b8:	10a00004 	addi	r2,r2,-32768
  8034bc:	10800058 	cmpnei	r2,r2,1
  8034c0:	1000021e 	bne	r2,zero,8034cc <handleKeyInput+0xac>
		edgeDetect3 = 0;
  8034c4:	d0272e0d 	sth	zero,-25416(gp)
		hitPlayer();
  8034c8:	0803e3c0 	call	803e3c <hitPlayer>
	}

}
  8034cc:	e037883a 	mov	sp,fp
  8034d0:	dfc00117 	ldw	ra,4(sp)
  8034d4:	df000017 	ldw	fp,0(sp)
  8034d8:	dec00204 	addi	sp,sp,8
  8034dc:	f800283a 	ret

008034e0 <handleSwitchInput>:

void handleSwitchInput(void){
  8034e0:	defffe04 	addi	sp,sp,-8
  8034e4:	dfc00115 	stw	ra,4(sp)
  8034e8:	df000015 	stw	fp,0(sp)
  8034ec:	d839883a 	mov	fp,sp
	static char SWInput;
	static short int edgeDetect = 0;
	static char prevSwInput = 0x03;
	static short int scoresShown = 0;
	SWInput = IORD_8DIRECT(SWITCHES_BASE, 0);
  8034f0:	00804034 	movhi	r2,256
  8034f4:	10841804 	addi	r2,r2,4192
  8034f8:	10800023 	ldbuio	r2,0(r2)
  8034fc:	d0a73185 	stb	r2,-25402(gp)

	if((SWInput & 0x0F) != (prevSwInput & 0x0F)) {
  803500:	d0a73183 	ldbu	r2,-25402(gp)
  803504:	10803fcc 	andi	r2,r2,255
  803508:	10c003cc 	andi	r3,r2,15
  80350c:	d0a00203 	ldbu	r2,-32760(gp)
  803510:	10803fcc 	andi	r2,r2,255
  803514:	108003cc 	andi	r2,r2,15
  803518:	18800526 	beq	r3,r2,803530 <handleSwitchInput+0x50>
		updateAudioWithVolume(SWInput);
  80351c:	d0a73183 	ldbu	r2,-25402(gp)
  803520:	11003fcc 	andi	r4,r2,255
  803524:	2100201c 	xori	r4,r4,128
  803528:	213fe004 	addi	r4,r4,-128
  80352c:	0800de40 	call	800de4 <updateAudioWithVolume>
	}
	prevSwInput = SWInput;
  803530:	d0a73183 	ldbu	r2,-25402(gp)
  803534:	d0a00205 	stb	r2,-32760(gp)

	if ((SWInput & 0x80) != 0) {
  803538:	d0a73183 	ldbu	r2,-25402(gp)
  80353c:	10803fcc 	andi	r2,r2,255
  803540:	1080201c 	xori	r2,r2,128
  803544:	10bfe004 	addi	r2,r2,-128
  803548:	1004403a 	cmpge	r2,r2,zero
  80354c:	10000b1e 	bne	r2,zero,80357c <handleSwitchInput+0x9c>
		if(scoresShown == 0){
  803550:	d0a7308b 	ldhu	r2,-25406(gp)
  803554:	10bfffcc 	andi	r2,r2,65535
  803558:	10a0001c 	xori	r2,r2,32768
  80355c:	10a00004 	addi	r2,r2,-32768
  803560:	1004c03a 	cmpne	r2,r2,zero
  803564:	1000021e 	bne	r2,zero,803570 <handleSwitchInput+0x90>
			readHighScoreBoardFromSD();
  803568:	0803fd00 	call	803fd0 <readHighScoreBoardFromSD>
			drawScore();
  80356c:	0804c080 	call	804c08 <drawScore>
		}
		scoresShown = 1;
  803570:	00800044 	movi	r2,1
  803574:	d0a7308d 	sth	r2,-25406(gp)
  803578:	00000906 	br	8035a0 <handleSwitchInput+0xc0>
	} else {
		if(scoresShown == 1){
  80357c:	d0a7308b 	ldhu	r2,-25406(gp)
  803580:	10bfffcc 	andi	r2,r2,65535
  803584:	10a0001c 	xori	r2,r2,32768
  803588:	10a00004 	addi	r2,r2,-32768
  80358c:	10800058 	cmpnei	r2,r2,1
  803590:	1000021e 	bne	r2,zero,80359c <handleSwitchInput+0xbc>
			clearScore();
  803594:	0804e400 	call	804e40 <clearScore>
			drawInGameInfo();
  803598:	0804e6c0 	call	804e6c <drawInGameInfo>
		}
		scoresShown = 0;
  80359c:	d027308d 	sth	zero,-25406(gp)
	}

}
  8035a0:	e037883a 	mov	sp,fp
  8035a4:	dfc00117 	ldw	ra,4(sp)
  8035a8:	df000017 	ldw	fp,0(sp)
  8035ac:	dec00204 	addi	sp,sp,8
  8035b0:	f800283a 	ret

008035b4 <handleAtariInput>:

void handleAtariInput(){
  8035b4:	defffd04 	addi	sp,sp,-12
  8035b8:	dfc00215 	stw	ra,8(sp)
  8035bc:	df000115 	stw	fp,4(sp)
  8035c0:	dc000015 	stw	r16,0(sp)
  8035c4:	d839883a 	mov	fp,sp
	static char atariUp;
	static char atariDown;
	static char atariFire;
	static short int edgeDetect = 0;

	atariButtons = (IORD_8DIRECT(PROCESSORGPIN_BASE, 0) & 0x0F);
  8035c8:	00804034 	movhi	r2,256
  8035cc:	10842c04 	addi	r2,r2,4272
  8035d0:	10800023 	ldbuio	r2,0(r2)
  8035d4:	108003cc 	andi	r2,r2,15
  8035d8:	d0a73345 	stb	r2,-25395(gp)
	atariFire = atariButtons & 0x08;
  8035dc:	d0a73343 	ldbu	r2,-25395(gp)
  8035e0:	1080020c 	andi	r2,r2,8
  8035e4:	d0a73285 	stb	r2,-25398(gp)
	atariUp = atariButtons & 0x02;
  8035e8:	d0a73343 	ldbu	r2,-25395(gp)
  8035ec:	1080008c 	andi	r2,r2,2
  8035f0:	d0a73305 	stb	r2,-25396(gp)
	atariDown = atariButtons & 0x04;
  8035f4:	d0a73343 	ldbu	r2,-25395(gp)
  8035f8:	1080010c 	andi	r2,r2,4
  8035fc:	d0a732c5 	stb	r2,-25397(gp)
	IOWR_16DIRECT(LEDS_BASE, 0, atariButtons);
  803600:	d0a73343 	ldbu	r2,-25395(gp)
  803604:	10c03fcc 	andi	r3,r2,255
  803608:	18c0201c 	xori	r3,r3,128
  80360c:	18ffe004 	addi	r3,r3,-128
  803610:	00804034 	movhi	r2,256
  803614:	10841c04 	addi	r2,r2,4208
  803618:	10c0002d 	sthio	r3,0(r2)

	if ((atariFire == 0x00) && (edgeDetect == 0)) {
  80361c:	d0a73283 	ldbu	r2,-25398(gp)
  803620:	10803fcc 	andi	r2,r2,255
  803624:	1080201c 	xori	r2,r2,128
  803628:	10bfe004 	addi	r2,r2,-128
  80362c:	1004c03a 	cmpne	r2,r2,zero
  803630:	1000091e 	bne	r2,zero,803658 <handleAtariInput+0xa4>
  803634:	d0a7320b 	ldhu	r2,-25400(gp)
  803638:	10bfffcc 	andi	r2,r2,65535
  80363c:	10a0001c 	xori	r2,r2,32768
  803640:	10a00004 	addi	r2,r2,-32768
  803644:	1004c03a 	cmpne	r2,r2,zero
  803648:	1000031e 	bne	r2,zero,803658 <handleAtariInput+0xa4>
		edgeDetect = 1;
  80364c:	00800044 	movi	r2,1
  803650:	d0a7320d 	sth	r2,-25400(gp)
	atariFire = atariButtons & 0x08;
	atariUp = atariButtons & 0x02;
	atariDown = atariButtons & 0x04;
	IOWR_16DIRECT(LEDS_BASE, 0, atariButtons);

	if ((atariFire == 0x00) && (edgeDetect == 0)) {
  803654:	00003106 	br	80371c <handleAtariInput+0x168>
		edgeDetect = 1;
	} else if ((atariFire != 0x00) && (edgeDetect == 1)) {
  803658:	d0a73283 	ldbu	r2,-25398(gp)
  80365c:	10803fcc 	andi	r2,r2,255
  803660:	1080201c 	xori	r2,r2,128
  803664:	10bfe004 	addi	r2,r2,-128
  803668:	1005003a 	cmpeq	r2,r2,zero
  80366c:	10002b1e 	bne	r2,zero,80371c <handleAtariInput+0x168>
  803670:	d0a7320b 	ldhu	r2,-25400(gp)
  803674:	10bfffcc 	andi	r2,r2,65535
  803678:	10a0001c 	xori	r2,r2,32768
  80367c:	10a00004 	addi	r2,r2,-32768
  803680:	10800058 	cmpnei	r2,r2,1
  803684:	1000251e 	bne	r2,zero,80371c <handleAtariInput+0x168>
		edgeDetect = 0;
  803688:	d027320d 	sth	zero,-25400(gp)
		createBullet(PLAYERBULLET, player.x + PLAYER_WIDTH - 1, player.y + 0.5 * PLAYER_HEIGHT - GUN_OFFSET, 0);
  80368c:	008020b4 	movhi	r2,130
  803690:	1083a304 	addi	r2,r2,3724
  803694:	10800017 	ldw	r2,0(r2)
  803698:	140006c4 	addi	r16,r2,27
  80369c:	008020b4 	movhi	r2,130
  8036a0:	1083a304 	addi	r2,r2,3724
  8036a4:	11000217 	ldw	r4,8(r2)
  8036a8:	08094f80 	call	8094f8 <__floatsidf>
  8036ac:	100b883a 	mov	r5,r2
  8036b0:	180d883a 	mov	r6,r3
  8036b4:	2809883a 	mov	r4,r5
  8036b8:	300b883a 	mov	r5,r6
  8036bc:	000d883a 	mov	r6,zero
  8036c0:	01d00af4 	movhi	r7,16427
  8036c4:	0808bc00 	call	808bc0 <__adddf3>
  8036c8:	1009883a 	mov	r4,r2
  8036cc:	180b883a 	mov	r5,r3
  8036d0:	2005883a 	mov	r2,r4
  8036d4:	2807883a 	mov	r3,r5
  8036d8:	1009883a 	mov	r4,r2
  8036dc:	180b883a 	mov	r5,r3
  8036e0:	000d883a 	mov	r6,zero
  8036e4:	01d00634 	movhi	r7,16408
  8036e8:	0808b400 	call	808b40 <__subdf3>
  8036ec:	1009883a 	mov	r4,r2
  8036f0:	180b883a 	mov	r5,r3
  8036f4:	2005883a 	mov	r2,r4
  8036f8:	2807883a 	mov	r3,r5
  8036fc:	1009883a 	mov	r4,r2
  803700:	180b883a 	mov	r5,r3
  803704:	08095f00 	call	8095f0 <__fixdfsi>
  803708:	100d883a 	mov	r6,r2
  80370c:	0009883a 	mov	r4,zero
  803710:	800b883a 	mov	r5,r16
  803714:	000f883a 	mov	r7,zero
  803718:	080198c0 	call	80198c <createBullet>
	}

	//movements - no edge detect
	if (atariUp != 0x00) {
  80371c:	d0a73303 	ldbu	r2,-25396(gp)
  803720:	10803fcc 	andi	r2,r2,255
  803724:	1080201c 	xori	r2,r2,128
  803728:	10bfe004 	addi	r2,r2,-128
  80372c:	1005003a 	cmpeq	r2,r2,zero
  803730:	1000021e 	bne	r2,zero,80373c <handleAtariInput+0x188>
		moveUpPlayer();
  803734:	0803cc80 	call	803cc8 <moveUpPlayer>
  803738:	00000906 	br	803760 <handleAtariInput+0x1ac>
	} else if (atariDown != 0x00) {
  80373c:	d0a732c3 	ldbu	r2,-25397(gp)
  803740:	10803fcc 	andi	r2,r2,255
  803744:	1080201c 	xori	r2,r2,128
  803748:	10bfe004 	addi	r2,r2,-128
  80374c:	1005003a 	cmpeq	r2,r2,zero
  803750:	1000021e 	bne	r2,zero,80375c <handleAtariInput+0x1a8>
		moveDownPlayer();
  803754:	0803d540 	call	803d54 <moveDownPlayer>
  803758:	00000106 	br	803760 <handleAtariInput+0x1ac>
	} else {
		keepPlayerStationary();
  80375c:	0803de00 	call	803de0 <keepPlayerStationary>
	}
}
  803760:	e037883a 	mov	sp,fp
  803764:	dfc00217 	ldw	ra,8(sp)
  803768:	df000117 	ldw	fp,4(sp)
  80376c:	dc000017 	ldw	r16,0(sp)
  803770:	dec00304 	addi	sp,sp,12
  803774:	f800283a 	ret

00803778 <delayUntilUPAndButtonPressed>:

void delayUntilUPAndButtonPressed(void) {
  803778:	defffe04 	addi	sp,sp,-8
  80377c:	df000115 	stw	fp,4(sp)
  803780:	df000104 	addi	fp,sp,4
	char atariFire;
	char keys;
	char key4;
	
	while(1) {
		atariButtons = (IORD_8DIRECT(PROCESSORGPIN_BASE, 0) & 0x0F);
  803784:	00804034 	movhi	r2,256
  803788:	10842c04 	addi	r2,r2,4272
  80378c:	10800023 	ldbuio	r2,0(r2)
  803790:	108003cc 	andi	r2,r2,15
  803794:	e0bfffc5 	stb	r2,-1(fp)
		keys = (IORD_8DIRECT(KEYS_BASE, 0) & 0x0F);
  803798:	00804034 	movhi	r2,256
  80379c:	10842004 	addi	r2,r2,4224
  8037a0:	10800023 	ldbuio	r2,0(r2)
  8037a4:	108003cc 	andi	r2,r2,15
  8037a8:	e0bfff45 	stb	r2,-3(fp)
		atariFire = atariButtons & 0x8;
  8037ac:	e0bfffc3 	ldbu	r2,-1(fp)
  8037b0:	1080020c 	andi	r2,r2,8
  8037b4:	e0bfff85 	stb	r2,-2(fp)
		key4 = keys & 0x8;
  8037b8:	e0bfff43 	ldbu	r2,-3(fp)
  8037bc:	1080020c 	andi	r2,r2,8
  8037c0:	e0bfff05 	stb	r2,-4(fp)
		if (atariFire || key4) {
  8037c4:	e0bfff87 	ldb	r2,-2(fp)
  8037c8:	1004c03a 	cmpne	r2,r2,zero
  8037cc:	1000041e 	bne	r2,zero,8037e0 <delayUntilUPAndButtonPressed+0x68>
  8037d0:	e0bfff07 	ldb	r2,-4(fp)
  8037d4:	1004c03a 	cmpne	r2,r2,zero
  8037d8:	1000011e 	bne	r2,zero,8037e0 <delayUntilUPAndButtonPressed+0x68>
			break;
		}
	}
  8037dc:	003fe906 	br	803784 <delayUntilUPAndButtonPressed+0xc>
}
  8037e0:	e037883a 	mov	sp,fp
  8037e4:	df000017 	ldw	fp,0(sp)
  8037e8:	dec00104 	addi	sp,sp,4
  8037ec:	f800283a 	ret

008037f0 <gameStart>:

int gameStart(void){
  8037f0:	defffd04 	addi	sp,sp,-12
  8037f4:	df000215 	stw	fp,8(sp)
  8037f8:	df000204 	addi	fp,sp,8
	char atariButtons;
	char atariFire;
	char keys;
	char key4;

	atariButtons = (IORD_8DIRECT(PROCESSORGPIN_BASE, 0) & 0x0F);
  8037fc:	00804034 	movhi	r2,256
  803800:	10842c04 	addi	r2,r2,4272
  803804:	10800023 	ldbuio	r2,0(r2)
  803808:	108003cc 	andi	r2,r2,15
  80380c:	e0bffec5 	stb	r2,-5(fp)
	keys = (IORD_8DIRECT(KEYS_BASE, 0) & 0x0F);
  803810:	00804034 	movhi	r2,256
  803814:	10842004 	addi	r2,r2,4224
  803818:	10800023 	ldbuio	r2,0(r2)
  80381c:	108003cc 	andi	r2,r2,15
  803820:	e0bffe45 	stb	r2,-7(fp)
	atariFire = atariButtons & 0x8;
  803824:	e0bffec3 	ldbu	r2,-5(fp)
  803828:	1080020c 	andi	r2,r2,8
  80382c:	e0bffe85 	stb	r2,-6(fp)
	key4 = keys & 0x8;
  803830:	e0bffe43 	ldbu	r2,-7(fp)
  803834:	1080020c 	andi	r2,r2,8
  803838:	e0bffe05 	stb	r2,-8(fp)

	if (atariFire || key4) {
  80383c:	e0bffe87 	ldb	r2,-6(fp)
  803840:	1004c03a 	cmpne	r2,r2,zero
  803844:	1000031e 	bne	r2,zero,803854 <gameStart+0x64>
  803848:	e0bffe07 	ldb	r2,-8(fp)
  80384c:	1005003a 	cmpeq	r2,r2,zero
  803850:	1000031e 	bne	r2,zero,803860 <gameStart+0x70>
		return 1;
  803854:	00800044 	movi	r2,1
  803858:	e0bfff15 	stw	r2,-4(fp)
  80385c:	00000106 	br	803864 <gameStart+0x74>
	} else {
		return 0;
  803860:	e03fff15 	stw	zero,-4(fp)
  803864:	e0bfff17 	ldw	r2,-4(fp)
	}
}
  803868:	e037883a 	mov	sp,fp
  80386c:	df000017 	ldw	fp,0(sp)
  803870:	dec00104 	addi	sp,sp,4
  803874:	f800283a 	ret

00803878 <init>:
#include "input.h"
#include "splash.h"
#include "gameEnd.h"
#include "nado.h"

int init(void) {
  803878:	defffd04 	addi	sp,sp,-12
  80387c:	dfc00215 	stw	ra,8(sp)
  803880:	df000115 	stw	fp,4(sp)
  803884:	df000104 	addi	fp,sp,4
	if (openSdCard() == -1) {
  803888:	08050c80 	call	8050c8 <openSdCard>
  80388c:	10bfffd8 	cmpnei	r2,r2,-1
  803890:	1000061e 	bne	r2,zero,8038ac <init+0x34>
		printf("Error: Failed to open sd card\n");
  803894:	010020b4 	movhi	r4,130
  803898:	2132ea04 	addi	r4,r4,-13400
  80389c:	080a9300 	call	80a930 <puts>
		return -1;
  8038a0:	00bfffc4 	movi	r2,-1
  8038a4:	e0bfff15 	stw	r2,-4(fp)
  8038a8:	00001006 	br	8038ec <init+0x74>
	} else {
		printf("Opened SD card\n");
  8038ac:	010020b4 	movhi	r4,130
  8038b0:	2132f204 	addi	r4,r4,-13368
  8038b4:	080a9300 	call	80a930 <puts>
	}

	initVga();
  8038b8:	08062100 	call	806210 <initVga>
	parseBmps();
  8038bc:	08014a40 	call	8014a4 <parseBmps>
	drawSplashScreen();
  8038c0:	0805d540 	call	805d54 <drawSplashScreen>
	setupAudio();
  8038c4:	08002040 	call	800204 <setupAudio>
	setupDisplacement();
  8038c8:	0802c9c0 	call	802c9c <setupDisplacement>
	initScoreBoard();
  8038cc:	0803ec40 	call	803ec4 <initScoreBoard>

	initBullets();
  8038d0:	08018d00 	call	8018d0 <initBullets>
	initPlayer();
  8038d4:	0803be40 	call	803be4 <initPlayer>
	initSharks();
  8038d8:	080543c0 	call	80543c <initSharks>
	initCollision();
  8038dc:	08022a00 	call	8022a0 <initCollision>

	initHardwareTimer();
  8038e0:	08061100 	call	806110 <initHardwareTimer>

	swapSplashScreenText();
  8038e4:	0805dd80 	call	805dd8 <swapSplashScreenText>

	return 0;
  8038e8:	e03fff15 	stw	zero,-4(fp)
  8038ec:	e0bfff17 	ldw	r2,-4(fp)
}
  8038f0:	e037883a 	mov	sp,fp
  8038f4:	dfc00117 	ldw	ra,4(sp)
  8038f8:	df000017 	ldw	fp,0(sp)
  8038fc:	dec00204 	addi	sp,sp,8
  803900:	f800283a 	ret

00803904 <main>:

int main() {
  803904:	defff904 	addi	sp,sp,-28
  803908:	dfc00615 	stw	ra,24(sp)
  80390c:	df000515 	stw	fp,20(sp)
  803910:	df000504 	addi	fp,sp,20
	int count = 0;
  803914:	e03ffe15 	stw	zero,-8(fp)
	int nadoCounter = 0;
  803918:	e03ffd15 	stw	zero,-12(fp)
	short int displaySplashScreen = 1;
  80391c:	00800044 	movi	r2,1
  803920:	e0bffc0d 	sth	r2,-16(fp)

	if (init() == -1)
  803924:	08038780 	call	803878 <init>
  803928:	10bfffd8 	cmpnei	r2,r2,-1
  80392c:	1000031e 	bne	r2,zero,80393c <main+0x38>
		return -1;
  803930:	00bfffc4 	movi	r2,-1
  803934:	e0bfff15 	stw	r2,-4(fp)
  803938:	00004706 	br	803a58 <main+0x154>
	//createShark(22, 100, 0, (Displacement *)&doNotMove);
	//createShark(45, 200, 200, (Displacement *)&doNotMove);
	//createShark(22, 100, 0, (Displacement *)&arcDisplacementFunction, TOPWALL);
	//createShark(45, 200, 200, (Displacement *)&arcDisplacementFunction, RIGHTWALL);

	drawAllSharks();
  80393c:	08058a40 	call	8058a4 <drawAllSharks>
	startHardwareTimer();
  803940:	08061e40 	call	8061e4 <startHardwareTimer>

	playTheme();
  803944:	0800c100 	call	800c10 <playTheme>
  803948:	00000006 	br	80394c <main+0x48>

	// main game loop;
	while(1) {
		if (hasHardwareTimerExpired() == 1) {
  80394c:	08061bc0 	call	8061bc <hasHardwareTimerExpired>
  803950:	10800058 	cmpnei	r2,r2,1
  803954:	103ffd1e 	bne	r2,zero,80394c <main+0x48>
			startHardwareTimer();
  803958:	08061e40 	call	8061e4 <startHardwareTimer>

			if (displaySplashScreen) {
  80395c:	e0bffc0f 	ldh	r2,-16(fp)
  803960:	1005003a 	cmpeq	r2,r2,zero
  803964:	1000191e 	bne	r2,zero,8039cc <main+0xc8>
				if(gameStart()) {
  803968:	08037f00 	call	8037f0 <gameStart>
  80396c:	1005003a 	cmpeq	r2,r2,zero
  803970:	103ff61e 	bne	r2,zero,80394c <main+0x48>
					clearSplashScreen();
  803974:	0805e580 	call	805e58 <clearSplashScreen>
					stopTheme();
  803978:	0800c540 	call	800c54 <stopTheme>
					displaySplashScreen = 0;	
  80397c:	e03ffc0d 	sth	zero,-16(fp)
					drawInGameInfo();
  803980:	0804e6c0 	call	804e6c <drawInGameInfo>
					nadoCounter = 0;
  803984:	e03ffd15 	stw	zero,-12(fp)
					createShark(22, 100, 0, (Displacement *)&arcDisplacementFunction, BOTTOMWALL);
  803988:	00800084 	movi	r2,2
  80398c:	d8800015 	stw	r2,0(sp)
  803990:	01000584 	movi	r4,22
  803994:	01401904 	movi	r5,100
  803998:	000d883a 	mov	r6,zero
  80399c:	01c020f4 	movhi	r7,131
  8039a0:	39e8e304 	addi	r7,r7,-23668
  8039a4:	08059440 	call	805944 <createShark>
					createShark(45, 200, 100, (Displacement *)&verticalDisplacementFunctionUp, RIGHTWALL);
  8039a8:	00800044 	movi	r2,1
  8039ac:	d8800015 	stw	r2,0(sp)
  8039b0:	01000b44 	movi	r4,45
  8039b4:	01403204 	movi	r5,200
  8039b8:	01801904 	movi	r6,100
  8039bc:	01c020f4 	movhi	r7,131
  8039c0:	39e5e304 	addi	r7,r7,-26740
  8039c4:	08059440 	call	805944 <createShark>
  8039c8:	003fe006 	br	80394c <main+0x48>
				}
			} else {
				if (nadoCounter < 2) {
  8039cc:	e0bffd17 	ldw	r2,-12(fp)
  8039d0:	10800088 	cmpgei	r2,r2,2
  8039d4:	1000051e 	bne	r2,zero,8039ec <main+0xe8>
					drawInitialNado(nadoCounter);
  8039d8:	e13ffd17 	ldw	r4,-12(fp)
  8039dc:	0803ba00 	call	803ba0 <drawInitialNado>
					nadoCounter++;
  8039e0:	e0bffd17 	ldw	r2,-12(fp)
  8039e4:	10800044 	addi	r2,r2,1
  8039e8:	e0bffd15 	stw	r2,-12(fp)
				}
				count++;
  8039ec:	e0bffe17 	ldw	r2,-8(fp)
  8039f0:	10800044 	addi	r2,r2,1
  8039f4:	e0bffe15 	stw	r2,-8(fp)

				moveAllSharks();
  8039f8:	08058540 	call	805854 <moveAllSharks>
				drawAllSharks();
  8039fc:	08058a40 	call	8058a4 <drawAllSharks>
				//drawInGameInfo(); // TBD: in actual game loop, only call this function when an event happens (like score inc/dec, or lives inc/dec)

				handleKeyInput();
  803a00:	08034200 	call	803420 <handleKeyInput>
				handleSwitchInput();
  803a04:	08034e00 	call	8034e0 <handleSwitchInput>
				handleAtariInput();
  803a08:	08035b40 	call	8035b4 <handleAtariInput>

				moveAllBullets();
  803a0c:	0801c4c0 	call	801c4c <moveAllBullets>

				cleanupDeadSharks();
  803a10:	0805c380 	call	805c38 <cleanupDeadSharks>

				doSharkBulletCollision();
  803a14:	0802ab00 	call	802ab0 <doSharkBulletCollision>
				doPlayerBulletCollision();
  803a18:	0802b580 	call	802b58 <doPlayerBulletCollision>
				doNadoBulletCollision();
  803a1c:	0802bfc0 	call	802bfc <doNadoBulletCollision>
				if(getCurrentPlayerLives() == 0) {
  803a20:	0804be40 	call	804be4 <getCurrentPlayerLives>
  803a24:	1004c03a 	cmpne	r2,r2,zero
  803a28:	1000041e 	bne	r2,zero,803a3c <main+0x138>
					gameEndSequence();
  803a2c:	08033c00 	call	8033c0 <gameEndSequence>
					displaySplashScreen = 1;
  803a30:	00800044 	movi	r2,1
  803a34:	e0bffc0d 	sth	r2,-16(fp)
					continue;
  803a38:	003fc406 	br	80394c <main+0x48>
				}

				drawAllBullets();
  803a3c:	0801dcc0 	call	801dcc <drawAllBullets>

				swapBuffers();
  803a40:	08062e80 	call	8062e8 <swapBuffers>

				cleanupDeadSharks();
  803a44:	0805c380 	call	805c38 <cleanupDeadSharks>
				eraseAllSharks();
  803a48:	08058f40 	call	8058f4 <eraseAllSharks>
				eraseAllBullets();
  803a4c:	0801e500 	call	801e50 <eraseAllBullets>
				erasePlayer();
  803a50:	0803c840 	call	803c84 <erasePlayer>
			}
		}
	}
  803a54:	003fbd06 	br	80394c <main+0x48>

	freeBmps();
	return 0;
}
  803a58:	e0bfff17 	ldw	r2,-4(fp)
  803a5c:	e037883a 	mov	sp,fp
  803a60:	dfc00117 	ldw	ra,4(sp)
  803a64:	df000017 	ldw	fp,0(sp)
  803a68:	dec00204 	addi	sp,sp,8
  803a6c:	f800283a 	ret

00803a70 <initNado>:
#include "nado.h"

int nadoDrawX = SCREEN_WIDTH - NADO_WIDTH - 24;
int nadoDrawY = 0;

void initNado() {
  803a70:	deffff04 	addi	sp,sp,-4
  803a74:	df000015 	stw	fp,0(sp)
  803a78:	d839883a 	mov	fp,sp
}
  803a7c:	e037883a 	mov	sp,fp
  803a80:	df000017 	ldw	fp,0(sp)
  803a84:	dec00104 	addi	sp,sp,4
  803a88:	f800283a 	ret

00803a8c <drawNado>:

void drawNado(BMP *nado) {
  803a8c:	defffd04 	addi	sp,sp,-12
  803a90:	dfc00215 	stw	ra,8(sp)
  803a94:	df000115 	stw	fp,4(sp)
  803a98:	df000104 	addi	fp,sp,4
  803a9c:	e13fff15 	stw	r4,-4(fp)
	drawBmp(nado, nadoDrawX, nadoDrawY);
  803aa0:	d1600317 	ldw	r5,-32756(gp)
  803aa4:	d1a73417 	ldw	r6,-25392(gp)
  803aa8:	e13fff17 	ldw	r4,-4(fp)
  803aac:	080162c0 	call	80162c <drawBmp>
}
  803ab0:	e037883a 	mov	sp,fp
  803ab4:	dfc00117 	ldw	ra,4(sp)
  803ab8:	df000017 	ldw	fp,0(sp)
  803abc:	dec00204 	addi	sp,sp,8
  803ac0:	f800283a 	ret

00803ac4 <drawCommonNado>:

void drawCommonNado(void) {
  803ac4:	defffe04 	addi	sp,sp,-8
  803ac8:	dfc00115 	stw	ra,4(sp)
  803acc:	df000015 	stw	fp,0(sp)
  803ad0:	d839883a 	mov	fp,sp
	drawNado(cnadoBmp);
  803ad4:	d1272017 	ldw	r4,-25472(gp)
  803ad8:	0803a8c0 	call	803a8c <drawNado>
}
  803adc:	e037883a 	mov	sp,fp
  803ae0:	dfc00117 	ldw	ra,4(sp)
  803ae4:	df000017 	ldw	fp,0(sp)
  803ae8:	dec00204 	addi	sp,sp,8
  803aec:	f800283a 	ret

00803af0 <drawANado>:

void drawANado(void) {
  803af0:	defffe04 	addi	sp,sp,-8
  803af4:	dfc00115 	stw	ra,4(sp)
  803af8:	df000015 	stw	fp,0(sp)
  803afc:	d839883a 	mov	fp,sp
	drawNado(pnadoaBmp);
  803b00:	d1271917 	ldw	r4,-25500(gp)
  803b04:	0803a8c0 	call	803a8c <drawNado>
}
  803b08:	e037883a 	mov	sp,fp
  803b0c:	dfc00117 	ldw	ra,4(sp)
  803b10:	df000017 	ldw	fp,0(sp)
  803b14:	dec00204 	addi	sp,sp,8
  803b18:	f800283a 	ret

00803b1c <eraseANado>:

void eraseANado(void) {
  803b1c:	defffe04 	addi	sp,sp,-8
  803b20:	dfc00115 	stw	ra,4(sp)
  803b24:	df000015 	stw	fp,0(sp)
  803b28:	d839883a 	mov	fp,sp
	drawNado(nnadoaBmp);
  803b2c:	d1271d17 	ldw	r4,-25484(gp)
  803b30:	0803a8c0 	call	803a8c <drawNado>
}
  803b34:	e037883a 	mov	sp,fp
  803b38:	dfc00117 	ldw	ra,4(sp)
  803b3c:	df000017 	ldw	fp,0(sp)
  803b40:	dec00204 	addi	sp,sp,8
  803b44:	f800283a 	ret

00803b48 <drawBNado>:

void drawBNado(void) {
  803b48:	defffe04 	addi	sp,sp,-8
  803b4c:	dfc00115 	stw	ra,4(sp)
  803b50:	df000015 	stw	fp,0(sp)
  803b54:	d839883a 	mov	fp,sp
	drawNado(pnadobBmp);
  803b58:	d1271e17 	ldw	r4,-25480(gp)
  803b5c:	0803a8c0 	call	803a8c <drawNado>
}
  803b60:	e037883a 	mov	sp,fp
  803b64:	dfc00117 	ldw	ra,4(sp)
  803b68:	df000017 	ldw	fp,0(sp)
  803b6c:	dec00204 	addi	sp,sp,8
  803b70:	f800283a 	ret

00803b74 <eraseBNado>:

void eraseBNado(void) {
  803b74:	defffe04 	addi	sp,sp,-8
  803b78:	dfc00115 	stw	ra,4(sp)
  803b7c:	df000015 	stw	fp,0(sp)
  803b80:	d839883a 	mov	fp,sp
	drawNado(nnadobBmp);
  803b84:	d1271417 	ldw	r4,-25520(gp)
  803b88:	0803a8c0 	call	803a8c <drawNado>
}
  803b8c:	e037883a 	mov	sp,fp
  803b90:	dfc00117 	ldw	ra,4(sp)
  803b94:	df000017 	ldw	fp,0(sp)
  803b98:	dec00204 	addi	sp,sp,8
  803b9c:	f800283a 	ret

00803ba0 <drawInitialNado>:

// Needs to be called once per buffer
// nadoCounter should be incremented
void drawInitialNado(int nadoCounter) {
  803ba0:	defffd04 	addi	sp,sp,-12
  803ba4:	dfc00215 	stw	ra,8(sp)
  803ba8:	df000115 	stw	fp,4(sp)
  803bac:	df000104 	addi	fp,sp,4
  803bb0:	e13fff15 	stw	r4,-4(fp)
	drawCommonNado();
  803bb4:	0803ac40 	call	803ac4 <drawCommonNado>
	if (nadoCounter == 0) {
  803bb8:	e0bfff17 	ldw	r2,-4(fp)
  803bbc:	1004c03a 	cmpne	r2,r2,zero
  803bc0:	1000021e 	bne	r2,zero,803bcc <drawInitialNado+0x2c>
		drawANado();
  803bc4:	0803af00 	call	803af0 <drawANado>
  803bc8:	00000106 	br	803bd0 <drawInitialNado+0x30>
	} else {
		drawBNado();
  803bcc:	0803b480 	call	803b48 <drawBNado>
	}
}
  803bd0:	e037883a 	mov	sp,fp
  803bd4:	dfc00117 	ldw	ra,4(sp)
  803bd8:	df000017 	ldw	fp,0(sp)
  803bdc:	dec00204 	addi	sp,sp,8
  803be0:	f800283a 	ret

00803be4 <initPlayer>:
#include "player.h"
#include "audio.h"
#include "score.h"

void initPlayer() {
  803be4:	deffff04 	addi	sp,sp,-4
  803be8:	df000015 	stw	fp,0(sp)
  803bec:	d839883a 	mov	fp,sp
	player.x = 10;
  803bf0:	00c020b4 	movhi	r3,130
  803bf4:	18c3a304 	addi	r3,r3,3724
  803bf8:	00800284 	movi	r2,10
  803bfc:	18800015 	stw	r2,0(r3)
	player.y = 90;
  803c00:	00c020b4 	movhi	r3,130
  803c04:	18c3a304 	addi	r3,r3,3724
  803c08:	00801684 	movi	r2,90
  803c0c:	18800215 	stw	r2,8(r3)
	player.prevX = 10;
  803c10:	00c020b4 	movhi	r3,130
  803c14:	18c3a304 	addi	r3,r3,3724
  803c18:	00800284 	movi	r2,10
  803c1c:	18800115 	stw	r2,4(r3)
	player.prevY = 90;
  803c20:	00c020b4 	movhi	r3,130
  803c24:	18c3a304 	addi	r3,r3,3724
  803c28:	00801684 	movi	r2,90
  803c2c:	18800315 	stw	r2,12(r3)
}
  803c30:	e037883a 	mov	sp,fp
  803c34:	df000017 	ldw	fp,0(sp)
  803c38:	dec00104 	addi	sp,sp,4
  803c3c:	f800283a 	ret

00803c40 <drawPlayer>:

void drawPlayer() {
  803c40:	defffe04 	addi	sp,sp,-8
  803c44:	dfc00115 	stw	ra,4(sp)
  803c48:	df000015 	stw	fp,0(sp)
  803c4c:	d839883a 	mov	fp,sp
	drawBmp(playerBmp, player.x, player.y);
  803c50:	d1272117 	ldw	r4,-25468(gp)
  803c54:	008020b4 	movhi	r2,130
  803c58:	1083a304 	addi	r2,r2,3724
  803c5c:	11400017 	ldw	r5,0(r2)
  803c60:	008020b4 	movhi	r2,130
  803c64:	1083a304 	addi	r2,r2,3724
  803c68:	11800217 	ldw	r6,8(r2)
  803c6c:	080162c0 	call	80162c <drawBmp>
}
  803c70:	e037883a 	mov	sp,fp
  803c74:	dfc00117 	ldw	ra,4(sp)
  803c78:	df000017 	ldw	fp,0(sp)
  803c7c:	dec00204 	addi	sp,sp,8
  803c80:	f800283a 	ret

00803c84 <erasePlayer>:

void erasePlayer() {
  803c84:	defffe04 	addi	sp,sp,-8
  803c88:	dfc00115 	stw	ra,4(sp)
  803c8c:	df000015 	stw	fp,0(sp)
  803c90:	d839883a 	mov	fp,sp
	eraseBmp(playerBmp, player.prevX, player.prevY);
  803c94:	d1272117 	ldw	r4,-25468(gp)
  803c98:	008020b4 	movhi	r2,130
  803c9c:	1083a304 	addi	r2,r2,3724
  803ca0:	11400117 	ldw	r5,4(r2)
  803ca4:	008020b4 	movhi	r2,130
  803ca8:	1083a304 	addi	r2,r2,3724
  803cac:	11800317 	ldw	r6,12(r2)
  803cb0:	08017940 	call	801794 <eraseBmp>
}
  803cb4:	e037883a 	mov	sp,fp
  803cb8:	dfc00117 	ldw	ra,4(sp)
  803cbc:	df000017 	ldw	fp,0(sp)
  803cc0:	dec00204 	addi	sp,sp,8
  803cc4:	f800283a 	ret

00803cc8 <moveUpPlayer>:

void moveUpPlayer() {
  803cc8:	defffe04 	addi	sp,sp,-8
  803ccc:	dfc00115 	stw	ra,4(sp)
  803cd0:	df000015 	stw	fp,0(sp)
  803cd4:	d839883a 	mov	fp,sp
	player.prevY = player.y;
  803cd8:	008020b4 	movhi	r2,130
  803cdc:	1083a304 	addi	r2,r2,3724
  803ce0:	10c00217 	ldw	r3,8(r2)
  803ce4:	008020b4 	movhi	r2,130
  803ce8:	1083a304 	addi	r2,r2,3724
  803cec:	10c00315 	stw	r3,12(r2)

	if (player.y > 0)
  803cf0:	008020b4 	movhi	r2,130
  803cf4:	1083a304 	addi	r2,r2,3724
  803cf8:	10800217 	ldw	r2,8(r2)
  803cfc:	10800050 	cmplti	r2,r2,1
  803d00:	1000071e 	bne	r2,zero,803d20 <moveUpPlayer+0x58>
		player.y = player.y - 2;
  803d04:	008020b4 	movhi	r2,130
  803d08:	1083a304 	addi	r2,r2,3724
  803d0c:	10800217 	ldw	r2,8(r2)
  803d10:	10ffff84 	addi	r3,r2,-2
  803d14:	008020b4 	movhi	r2,130
  803d18:	1083a304 	addi	r2,r2,3724
  803d1c:	10c00215 	stw	r3,8(r2)

	drawBmp(playerBmp, player.x, player.y);
  803d20:	d1272117 	ldw	r4,-25468(gp)
  803d24:	008020b4 	movhi	r2,130
  803d28:	1083a304 	addi	r2,r2,3724
  803d2c:	11400017 	ldw	r5,0(r2)
  803d30:	008020b4 	movhi	r2,130
  803d34:	1083a304 	addi	r2,r2,3724
  803d38:	11800217 	ldw	r6,8(r2)
  803d3c:	080162c0 	call	80162c <drawBmp>
}
  803d40:	e037883a 	mov	sp,fp
  803d44:	dfc00117 	ldw	ra,4(sp)
  803d48:	df000017 	ldw	fp,0(sp)
  803d4c:	dec00204 	addi	sp,sp,8
  803d50:	f800283a 	ret

00803d54 <moveDownPlayer>:
void moveDownPlayer()
{
  803d54:	defffe04 	addi	sp,sp,-8
  803d58:	dfc00115 	stw	ra,4(sp)
  803d5c:	df000015 	stw	fp,0(sp)
  803d60:	d839883a 	mov	fp,sp
	player.prevY = player.y;
  803d64:	008020b4 	movhi	r2,130
  803d68:	1083a304 	addi	r2,r2,3724
  803d6c:	10c00217 	ldw	r3,8(r2)
  803d70:	008020b4 	movhi	r2,130
  803d74:	1083a304 	addi	r2,r2,3724
  803d78:	10c00315 	stw	r3,12(r2)

	if (player.y < SCREEN_HEIGHT - PLAYER_HEIGHT)
  803d7c:	008020b4 	movhi	r2,130
  803d80:	1083a304 	addi	r2,r2,3724
  803d84:	10800217 	ldw	r2,8(r2)
  803d88:	10803548 	cmpgei	r2,r2,213
  803d8c:	1000071e 	bne	r2,zero,803dac <moveDownPlayer+0x58>
		player.y = player.y + 2;
  803d90:	008020b4 	movhi	r2,130
  803d94:	1083a304 	addi	r2,r2,3724
  803d98:	10800217 	ldw	r2,8(r2)
  803d9c:	10c00084 	addi	r3,r2,2
  803da0:	008020b4 	movhi	r2,130
  803da4:	1083a304 	addi	r2,r2,3724
  803da8:	10c00215 	stw	r3,8(r2)

	drawBmp(playerBmp, player.x, player.y);
  803dac:	d1272117 	ldw	r4,-25468(gp)
  803db0:	008020b4 	movhi	r2,130
  803db4:	1083a304 	addi	r2,r2,3724
  803db8:	11400017 	ldw	r5,0(r2)
  803dbc:	008020b4 	movhi	r2,130
  803dc0:	1083a304 	addi	r2,r2,3724
  803dc4:	11800217 	ldw	r6,8(r2)
  803dc8:	080162c0 	call	80162c <drawBmp>
}
  803dcc:	e037883a 	mov	sp,fp
  803dd0:	dfc00117 	ldw	ra,4(sp)
  803dd4:	df000017 	ldw	fp,0(sp)
  803dd8:	dec00204 	addi	sp,sp,8
  803ddc:	f800283a 	ret

00803de0 <keepPlayerStationary>:

void keepPlayerStationary() {
  803de0:	defffe04 	addi	sp,sp,-8
  803de4:	dfc00115 	stw	ra,4(sp)
  803de8:	df000015 	stw	fp,0(sp)
  803dec:	d839883a 	mov	fp,sp
	player.prevY = player.y;
  803df0:	008020b4 	movhi	r2,130
  803df4:	1083a304 	addi	r2,r2,3724
  803df8:	10c00217 	ldw	r3,8(r2)
  803dfc:	008020b4 	movhi	r2,130
  803e00:	1083a304 	addi	r2,r2,3724
  803e04:	10c00315 	stw	r3,12(r2)
	drawBmp(playerBmp, player.x, player.y);
  803e08:	d1272117 	ldw	r4,-25468(gp)
  803e0c:	008020b4 	movhi	r2,130
  803e10:	1083a304 	addi	r2,r2,3724
  803e14:	11400017 	ldw	r5,0(r2)
  803e18:	008020b4 	movhi	r2,130
  803e1c:	1083a304 	addi	r2,r2,3724
  803e20:	11800217 	ldw	r6,8(r2)
  803e24:	080162c0 	call	80162c <drawBmp>
}
  803e28:	e037883a 	mov	sp,fp
  803e2c:	dfc00117 	ldw	ra,4(sp)
  803e30:	df000017 	ldw	fp,0(sp)
  803e34:	dec00204 	addi	sp,sp,8
  803e38:	f800283a 	ret

00803e3c <hitPlayer>:

void hitPlayer() {
  803e3c:	defffd04 	addi	sp,sp,-12
  803e40:	dfc00215 	stw	ra,8(sp)
  803e44:	df000115 	stw	fp,4(sp)
  803e48:	df000104 	addi	fp,sp,4
	playPlayerDeath();
  803e4c:	0800b880 	call	800b88 <playPlayerDeath>
	int playerLives = getCurrentPlayerLives();
  803e50:	0804be40 	call	804be4 <getCurrentPlayerLives>
  803e54:	e0bfff15 	stw	r2,-4(fp)
	if (playerLives > 1) {
  803e58:	e0bfff17 	ldw	r2,-4(fp)
  803e5c:	10800090 	cmplti	r2,r2,2
  803e60:	1000041e 	bne	r2,zero,803e74 <hitPlayer+0x38>
		setCurrentPlayerLives(playerLives - 1);
  803e64:	e0bfff17 	ldw	r2,-4(fp)
  803e68:	113fffc4 	addi	r4,r2,-1
  803e6c:	0804bb80 	call	804bb8 <setCurrentPlayerLives>
  803e70:	00000706 	br	803e90 <hitPlayer+0x54>
	} else if (playerLives == 1) {
  803e74:	e0bfff17 	ldw	r2,-4(fp)
  803e78:	10800058 	cmpnei	r2,r2,1
  803e7c:	1000041e 	bne	r2,zero,803e90 <hitPlayer+0x54>
		setCurrentPlayerLives(playerLives - 1);
  803e80:	e0bfff17 	ldw	r2,-4(fp)
  803e84:	113fffc4 	addi	r4,r2,-1
  803e88:	0804bb80 	call	804bb8 <setCurrentPlayerLives>
		killPlayer();
  803e8c:	0803ea80 	call	803ea8 <killPlayer>
	}
	drawInGameInfo();
  803e90:	0804e6c0 	call	804e6c <drawInGameInfo>
}
  803e94:	e037883a 	mov	sp,fp
  803e98:	dfc00117 	ldw	ra,4(sp)
  803e9c:	df000017 	ldw	fp,0(sp)
  803ea0:	dec00204 	addi	sp,sp,8
  803ea4:	f800283a 	ret

00803ea8 <killPlayer>:

void killPlayer() {
  803ea8:	deffff04 	addi	sp,sp,-4
  803eac:	df000015 	stw	fp,0(sp)
  803eb0:	d839883a 	mov	fp,sp
	//playPlayerDeath();
	//updateHighScoreBoard();
	// Some game over stuff
}
  803eb4:	e037883a 	mov	sp,fp
  803eb8:	df000017 	ldw	fp,0(sp)
  803ebc:	dec00104 	addi	sp,sp,4
  803ec0:	f800283a 	ret

00803ec4 <initScoreBoard>:

char * scoreFileName = "scores.txt";
struct scores * gameScores;

//set all gameScores values to initial values - read all high score board info from SD card.
void initScoreBoard(void) {
  803ec4:	defffe04 	addi	sp,sp,-8
  803ec8:	dfc00115 	stw	ra,4(sp)
  803ecc:	df000015 	stw	fp,0(sp)
  803ed0:	d839883a 	mov	fp,sp
	alt_up_char_buffer_clear(char_buffer); // clear screen
  803ed4:	d1271617 	ldw	r4,-25512(gp)
  803ed8:	0815bb00 	call	815bb0 <alt_up_char_buffer_clear>
	gameScores = malloc(sizeof(struct scores));
  803edc:	01001404 	movi	r4,80
  803ee0:	080a0c40 	call	80a0c4 <malloc>
  803ee4:	d0a73615 	stw	r2,-25384(gp)
	printf("gameScoresTemp is at: %x\n", (unsigned int)gameScores);
  803ee8:	d0a73617 	ldw	r2,-25384(gp)
  803eec:	100b883a 	mov	r5,r2
  803ef0:	010020b4 	movhi	r4,130
  803ef4:	2132f904 	addi	r4,r4,-13340
  803ef8:	080a8180 	call	80a818 <printf>

	gameScores->currentPlayerScore = 0; // TBD - set to 0 - testing code by setting to other values.
  803efc:	d0a73617 	ldw	r2,-25384(gp)
  803f00:	10000015 	stw	zero,0(r2)
	gameScores->currentPlayerLives = INITIALLIVES;
  803f04:	d0e73617 	ldw	r3,-25384(gp)
  803f08:	008000c4 	movi	r2,3
  803f0c:	18800115 	stw	r2,4(r3)
	readHighScoreBoardFromSD();
  803f10:	0803fd00 	call	803fd0 <readHighScoreBoardFromSD>
}
  803f14:	e037883a 	mov	sp,fp
  803f18:	dfc00117 	ldw	ra,4(sp)
  803f1c:	df000017 	ldw	fp,0(sp)
  803f20:	dec00204 	addi	sp,sp,8
  803f24:	f800283a 	ret

00803f28 <defaultHighScoreBoard>:

//set high score values to defaults - used if reading the SD card fails.s
void defaultHighScoreBoard(void) {
  803f28:	defffd04 	addi	sp,sp,-12
  803f2c:	df000215 	stw	fp,8(sp)
  803f30:	df000204 	addi	fp,sp,8
	int i,j;
	for(i = 0; i < NUMSCORES; i++) {
  803f34:	e03fff15 	stw	zero,-4(fp)
  803f38:	00001e06 	br	803fb4 <defaultHighScoreBoard+0x8c>
		gameScores->highScoreBoard[i] = 1;
  803f3c:	d0e73617 	ldw	r3,-25384(gp)
  803f40:	e0bfff17 	ldw	r2,-4(fp)
  803f44:	1085883a 	add	r2,r2,r2
  803f48:	1085883a 	add	r2,r2,r2
  803f4c:	10c5883a 	add	r2,r2,r3
  803f50:	10c00204 	addi	r3,r2,8
  803f54:	00800044 	movi	r2,1
  803f58:	18800015 	stw	r2,0(r3)
		for(j = 0; j < NUMINITIALS; j++) {
  803f5c:	e03ffe15 	stw	zero,-8(fp)
  803f60:	00000e06 	br	803f9c <defaultHighScoreBoard+0x74>
			gameScores->highScoreBoardInits[i][j] = 'X';
  803f64:	d1673617 	ldw	r5,-25384(gp)
  803f68:	e0ffff17 	ldw	r3,-4(fp)
  803f6c:	e13ffe17 	ldw	r4,-8(fp)
  803f70:	1805883a 	mov	r2,r3
  803f74:	1085883a 	add	r2,r2,r2
  803f78:	10c5883a 	add	r2,r2,r3
  803f7c:	1145883a 	add	r2,r2,r5
  803f80:	1105883a 	add	r2,r2,r4
  803f84:	10c00c04 	addi	r3,r2,48
  803f88:	00801604 	movi	r2,88
  803f8c:	18800005 	stb	r2,0(r3)
//set high score values to defaults - used if reading the SD card fails.s
void defaultHighScoreBoard(void) {
	int i,j;
	for(i = 0; i < NUMSCORES; i++) {
		gameScores->highScoreBoard[i] = 1;
		for(j = 0; j < NUMINITIALS; j++) {
  803f90:	e0bffe17 	ldw	r2,-8(fp)
  803f94:	10800044 	addi	r2,r2,1
  803f98:	e0bffe15 	stw	r2,-8(fp)
  803f9c:	e0bffe17 	ldw	r2,-8(fp)
  803fa0:	108000d0 	cmplti	r2,r2,3
  803fa4:	103fef1e 	bne	r2,zero,803f64 <defaultHighScoreBoard+0x3c>
}

//set high score values to defaults - used if reading the SD card fails.s
void defaultHighScoreBoard(void) {
	int i,j;
	for(i = 0; i < NUMSCORES; i++) {
  803fa8:	e0bfff17 	ldw	r2,-4(fp)
  803fac:	10800044 	addi	r2,r2,1
  803fb0:	e0bfff15 	stw	r2,-4(fp)
  803fb4:	e0bfff17 	ldw	r2,-4(fp)
  803fb8:	10800290 	cmplti	r2,r2,10
  803fbc:	103fdf1e 	bne	r2,zero,803f3c <defaultHighScoreBoard+0x14>
		for(j = 0; j < NUMINITIALS; j++) {
			gameScores->highScoreBoardInits[i][j] = 'X';
		}
	}
	return;
}
  803fc0:	e037883a 	mov	sp,fp
  803fc4:	df000017 	ldw	fp,0(sp)
  803fc8:	dec00104 	addi	sp,sp,4
  803fcc:	f800283a 	ret

00803fd0 <readHighScoreBoardFromSD>:

//returns -1 on error in reading scoreboard (and also defaults all current values), returns 0 on success.
//function updates all gameScores' variables so that reading them have the most up to date values
int readHighScoreBoardFromSD(void) {
  803fd0:	deffe904 	addi	sp,sp,-92
  803fd4:	dfc01615 	stw	ra,88(sp)
  803fd8:	df001515 	stw	fp,84(sp)
  803fdc:	dcc01415 	stw	r19,80(sp)
  803fe0:	dc801315 	stw	r18,76(sp)
  803fe4:	dc401215 	stw	r17,72(sp)
  803fe8:	dc001115 	stw	r16,68(sp)
  803fec:	df001104 	addi	fp,sp,68
	gameScores->currentScoreBoardCorrupt = 0;
  803ff0:	d0a73617 	ldw	r2,-25384(gp)
  803ff4:	10001385 	stb	zero,78(r2)

	short int fileHandle = openFile(scoreFileName);
  803ff8:	d1200417 	ldw	r4,-32752(gp)
  803ffc:	08051280 	call	805128 <openFile>
  804000:	e0bff48d 	sth	r2,-46(fp)
	if (fileHandle == -1) {
  804004:	e0bff48f 	ldh	r2,-46(fp)
  804008:	10bfffd8 	cmpnei	r2,r2,-1
  80400c:	10000b1e 	bne	r2,zero,80403c <readHighScoreBoardFromSD+0x6c>
		printf("Error opening %s\n", scoreFileName);
  804010:	d1600417 	ldw	r5,-32752(gp)
  804014:	010020b4 	movhi	r4,130
  804018:	21330004 	addi	r4,r4,-13312
  80401c:	080a8180 	call	80a818 <printf>
		defaultHighScoreBoard();
  804020:	0803f280 	call	803f28 <defaultHighScoreBoard>
		gameScores->currentScoreBoardCorrupt = 1;
  804024:	d0e73617 	ldw	r3,-25384(gp)
  804028:	00800044 	movi	r2,1
  80402c:	18801385 	stb	r2,78(r3)
		return -1;
  804030:	00bfffc4 	movi	r2,-1
  804034:	e0bfff15 	stw	r2,-4(fp)
  804038:	0000b006 	br	8042fc <readHighScoreBoardFromSD+0x32c>
	char readValue;
	int currentScore;
	int numDigits;
	int scoreBuffer[MAXSCOREDIGITS];
	int i,j,k;
	for(i = 0; i < NUMSCORES; i++) {
  80403c:	e03ff115 	stw	zero,-60(fp)
  804040:	0000a806 	br	8042e4 <readHighScoreBoardFromSD+0x314>
		for(j = 0; j < NUMINITIALS; j++){
  804044:	e03ff015 	stw	zero,-64(fp)
  804048:	00001106 	br	804090 <readHighScoreBoardFromSD+0xc0>
			readValue = readByte(fileHandle);
  80404c:	e13ff48f 	ldh	r4,-46(fp)
  804050:	08051980 	call	805198 <readByte>
  804054:	e0bff405 	stb	r2,-48(fp)
			gameScores->highScoreBoardInits[i][j] = readValue;
  804058:	d1273617 	ldw	r4,-25384(gp)
  80405c:	e0fff117 	ldw	r3,-60(fp)
  804060:	e17ff017 	ldw	r5,-64(fp)
  804064:	e1bff403 	ldbu	r6,-48(fp)
  804068:	1805883a 	mov	r2,r3
  80406c:	1085883a 	add	r2,r2,r2
  804070:	10c5883a 	add	r2,r2,r3
  804074:	1105883a 	add	r2,r2,r4
  804078:	1145883a 	add	r2,r2,r5
  80407c:	10800c04 	addi	r2,r2,48
  804080:	11800005 	stb	r6,0(r2)
	int currentScore;
	int numDigits;
	int scoreBuffer[MAXSCOREDIGITS];
	int i,j,k;
	for(i = 0; i < NUMSCORES; i++) {
		for(j = 0; j < NUMINITIALS; j++){
  804084:	e0bff017 	ldw	r2,-64(fp)
  804088:	10800044 	addi	r2,r2,1
  80408c:	e0bff015 	stw	r2,-64(fp)
  804090:	e0bff017 	ldw	r2,-64(fp)
  804094:	108000d0 	cmplti	r2,r2,3
  804098:	103fec1e 	bne	r2,zero,80404c <readHighScoreBoardFromSD+0x7c>
			readValue = readByte(fileHandle);
			gameScores->highScoreBoardInits[i][j] = readValue;
		}
		readValue = readByte(fileHandle);
  80409c:	e13ff48f 	ldh	r4,-46(fp)
  8040a0:	08051980 	call	805198 <readByte>
  8040a4:	e0bff405 	stb	r2,-48(fp)

		if(readValue != 0x20) {
  8040a8:	e0bff407 	ldb	r2,-48(fp)
  8040ac:	10800820 	cmpeqi	r2,r2,32
  8040b0:	10000d1e 	bne	r2,zero,8040e8 <readHighScoreBoardFromSD+0x118>
			closeFile(fileHandle);
  8040b4:	e13ff48f 	ldh	r4,-46(fp)
  8040b8:	08051680 	call	805168 <closeFile>
			printf("Error within %s - file not initialized to proper format. Scoreboard defaulted.", scoreFileName);
  8040bc:	d1600417 	ldw	r5,-32752(gp)
  8040c0:	010020b4 	movhi	r4,130
  8040c4:	21330504 	addi	r4,r4,-13292
  8040c8:	080a8180 	call	80a818 <printf>
			defaultHighScoreBoard();
  8040cc:	0803f280 	call	803f28 <defaultHighScoreBoard>
			gameScores->currentScoreBoardCorrupt = 1;
  8040d0:	d0e73617 	ldw	r3,-25384(gp)
  8040d4:	00800044 	movi	r2,1
  8040d8:	18801385 	stb	r2,78(r3)
			return -1;
  8040dc:	00ffffc4 	movi	r3,-1
  8040e0:	e0ffff15 	stw	r3,-4(fp)
  8040e4:	00008506 	br	8042fc <readHighScoreBoardFromSD+0x32c>
		}

		//clear score buffer - which is used in order to convert unknown number of chars into an int.
		for(k = 0; k < MAXSCOREDIGITS; k++){
  8040e8:	e03fef15 	stw	zero,-68(fp)
  8040ec:	00000b06 	br	80411c <readHighScoreBoardFromSD+0x14c>
			scoreBuffer[k] = -1;
  8040f0:	e0bfef17 	ldw	r2,-68(fp)
  8040f4:	1085883a 	add	r2,r2,r2
  8040f8:	1085883a 	add	r2,r2,r2
  8040fc:	e13fef04 	addi	r4,fp,-68
  804100:	1105883a 	add	r2,r2,r4
  804104:	10c00604 	addi	r3,r2,24
  804108:	00bfffc4 	movi	r2,-1
  80410c:	18800015 	stw	r2,0(r3)
			gameScores->currentScoreBoardCorrupt = 1;
			return -1;
		}

		//clear score buffer - which is used in order to convert unknown number of chars into an int.
		for(k = 0; k < MAXSCOREDIGITS; k++){
  804110:	e0bfef17 	ldw	r2,-68(fp)
  804114:	10800044 	addi	r2,r2,1
  804118:	e0bfef15 	stw	r2,-68(fp)
  80411c:	e0bfef17 	ldw	r2,-68(fp)
  804120:	10800290 	cmplti	r2,r2,10
  804124:	103ff21e 	bne	r2,zero,8040f0 <readHighScoreBoardFromSD+0x120>
			scoreBuffer[k] = -1;
		}

		numDigits = 0;
  804128:	e03ff215 	stw	zero,-56(fp)
		while((readValue = readByte(fileHandle)) != 0x20 && numDigits < MAXSCOREDIGITS) { //loop until space found
  80412c:	00000b06 	br	80415c <readHighScoreBoardFromSD+0x18c>
			scoreBuffer[numDigits] = readValue;
  804130:	e0bff217 	ldw	r2,-56(fp)
  804134:	e0fff407 	ldb	r3,-48(fp)
  804138:	1085883a 	add	r2,r2,r2
  80413c:	1085883a 	add	r2,r2,r2
  804140:	e13fef04 	addi	r4,fp,-68
  804144:	1105883a 	add	r2,r2,r4
  804148:	10800604 	addi	r2,r2,24
  80414c:	10c00015 	stw	r3,0(r2)
			numDigits++;
  804150:	e0bff217 	ldw	r2,-56(fp)
  804154:	10800044 	addi	r2,r2,1
  804158:	e0bff215 	stw	r2,-56(fp)
		for(k = 0; k < MAXSCOREDIGITS; k++){
			scoreBuffer[k] = -1;
		}

		numDigits = 0;
		while((readValue = readByte(fileHandle)) != 0x20 && numDigits < MAXSCOREDIGITS) { //loop until space found
  80415c:	e13ff48f 	ldh	r4,-46(fp)
  804160:	08051980 	call	805198 <readByte>
  804164:	e0bff405 	stb	r2,-48(fp)
  804168:	e0bff407 	ldb	r2,-48(fp)
  80416c:	10800820 	cmpeqi	r2,r2,32
  804170:	1000031e 	bne	r2,zero,804180 <readHighScoreBoardFromSD+0x1b0>
  804174:	e0bff217 	ldw	r2,-56(fp)
  804178:	10800290 	cmplti	r2,r2,10
  80417c:	103fec1e 	bne	r2,zero,804130 <readHighScoreBoardFromSD+0x160>
			scoreBuffer[numDigits] = readValue;
			numDigits++;
		}
		if(readValue != 0x20) {
  804180:	e0bff407 	ldb	r2,-48(fp)
  804184:	10800820 	cmpeqi	r2,r2,32
  804188:	10000d1e 	bne	r2,zero,8041c0 <readHighScoreBoardFromSD+0x1f0>
			closeFile(fileHandle);
  80418c:	e13ff48f 	ldh	r4,-46(fp)
  804190:	08051680 	call	805168 <closeFile>
			printf("Error within %s - file not initialized to proper format. Scoreboard defaulted.", scoreFileName);
  804194:	d1600417 	ldw	r5,-32752(gp)
  804198:	010020b4 	movhi	r4,130
  80419c:	21330504 	addi	r4,r4,-13292
  8041a0:	080a8180 	call	80a818 <printf>
			defaultHighScoreBoard();
  8041a4:	0803f280 	call	803f28 <defaultHighScoreBoard>
			gameScores->currentScoreBoardCorrupt = 1;
  8041a8:	d0e73617 	ldw	r3,-25384(gp)
  8041ac:	00800044 	movi	r2,1
  8041b0:	18801385 	stb	r2,78(r3)
			return -1;
  8041b4:	00bfffc4 	movi	r2,-1
  8041b8:	e0bfff15 	stw	r2,-4(fp)
  8041bc:	00004f06 	br	8042fc <readHighScoreBoardFromSD+0x32c>
		}

		//use scoreBuffer values (stored in char values) into a meaningful integer, currentScore.
		currentScore = 0;
  8041c0:	e03ff315 	stw	zero,-52(fp)
		for(k = 0; k < numDigits; k++) {
  8041c4:	e03fef15 	stw	zero,-68(fp)
  8041c8:	00003806 	br	8042ac <readHighScoreBoardFromSD+0x2dc>
			currentScore += (scoreBuffer[k] - '0') * pow(10,(numDigits - 1 - k));
  8041cc:	e13ff317 	ldw	r4,-52(fp)
  8041d0:	08094f80 	call	8094f8 <__floatsidf>
  8041d4:	1025883a 	mov	r18,r2
  8041d8:	1827883a 	mov	r19,r3
  8041dc:	e0bfef17 	ldw	r2,-68(fp)
  8041e0:	1085883a 	add	r2,r2,r2
  8041e4:	1085883a 	add	r2,r2,r2
  8041e8:	e0ffef04 	addi	r3,fp,-68
  8041ec:	10c5883a 	add	r2,r2,r3
  8041f0:	10800604 	addi	r2,r2,24
  8041f4:	10800017 	ldw	r2,0(r2)
  8041f8:	113ff404 	addi	r4,r2,-48
  8041fc:	08094f80 	call	8094f8 <__floatsidf>
  804200:	1021883a 	mov	r16,r2
  804204:	1823883a 	mov	r17,r3
  804208:	e0fff217 	ldw	r3,-56(fp)
  80420c:	e0bfef17 	ldw	r2,-68(fp)
  804210:	1885c83a 	sub	r2,r3,r2
  804214:	113fffc4 	addi	r4,r2,-1
  804218:	08094f80 	call	8094f8 <__floatsidf>
  80421c:	100f883a 	mov	r7,r2
  804220:	1811883a 	mov	r8,r3
  804224:	0009883a 	mov	r4,zero
  804228:	01500934 	movhi	r5,16420
  80422c:	380d883a 	mov	r6,r7
  804230:	400f883a 	mov	r7,r8
  804234:	08065f00 	call	8065f0 <pow>
  804238:	1009883a 	mov	r4,r2
  80423c:	180b883a 	mov	r5,r3
  804240:	2005883a 	mov	r2,r4
  804244:	2807883a 	mov	r3,r5
  804248:	8009883a 	mov	r4,r16
  80424c:	880b883a 	mov	r5,r17
  804250:	100d883a 	mov	r6,r2
  804254:	180f883a 	mov	r7,r3
  804258:	0808c340 	call	808c34 <__muldf3>
  80425c:	1009883a 	mov	r4,r2
  804260:	180b883a 	mov	r5,r3
  804264:	2005883a 	mov	r2,r4
  804268:	2807883a 	mov	r3,r5
  80426c:	9009883a 	mov	r4,r18
  804270:	980b883a 	mov	r5,r19
  804274:	100d883a 	mov	r6,r2
  804278:	180f883a 	mov	r7,r3
  80427c:	0808bc00 	call	808bc0 <__adddf3>
  804280:	1009883a 	mov	r4,r2
  804284:	180b883a 	mov	r5,r3
  804288:	2005883a 	mov	r2,r4
  80428c:	2807883a 	mov	r3,r5
  804290:	1009883a 	mov	r4,r2
  804294:	180b883a 	mov	r5,r3
  804298:	08095f00 	call	8095f0 <__fixdfsi>
  80429c:	e0bff315 	stw	r2,-52(fp)
			return -1;
		}

		//use scoreBuffer values (stored in char values) into a meaningful integer, currentScore.
		currentScore = 0;
		for(k = 0; k < numDigits; k++) {
  8042a0:	e0bfef17 	ldw	r2,-68(fp)
  8042a4:	10800044 	addi	r2,r2,1
  8042a8:	e0bfef15 	stw	r2,-68(fp)
  8042ac:	e0ffef17 	ldw	r3,-68(fp)
  8042b0:	e0bff217 	ldw	r2,-56(fp)
  8042b4:	18bfc516 	blt	r3,r2,8041cc <readHighScoreBoardFromSD+0x1fc>
			currentScore += (scoreBuffer[k] - '0') * pow(10,(numDigits - 1 - k));
		}
		gameScores->highScoreBoard[i] = currentScore;
  8042b8:	d0e73617 	ldw	r3,-25384(gp)
  8042bc:	e0bff117 	ldw	r2,-60(fp)
  8042c0:	1085883a 	add	r2,r2,r2
  8042c4:	1085883a 	add	r2,r2,r2
  8042c8:	10c5883a 	add	r2,r2,r3
  8042cc:	10c00204 	addi	r3,r2,8
  8042d0:	e0bff317 	ldw	r2,-52(fp)
  8042d4:	18800015 	stw	r2,0(r3)
	char readValue;
	int currentScore;
	int numDigits;
	int scoreBuffer[MAXSCOREDIGITS];
	int i,j,k;
	for(i = 0; i < NUMSCORES; i++) {
  8042d8:	e0bff117 	ldw	r2,-60(fp)
  8042dc:	10800044 	addi	r2,r2,1
  8042e0:	e0bff115 	stw	r2,-60(fp)
  8042e4:	e0bff117 	ldw	r2,-60(fp)
  8042e8:	10800290 	cmplti	r2,r2,10
  8042ec:	103f551e 	bne	r2,zero,804044 <readHighScoreBoardFromSD+0x74>
			currentScore += (scoreBuffer[k] - '0') * pow(10,(numDigits - 1 - k));
		}
		gameScores->highScoreBoard[i] = currentScore;
	}

	closeFile(fileHandle);
  8042f0:	e13ff48f 	ldh	r4,-46(fp)
  8042f4:	08051680 	call	805168 <closeFile>
	return 0;
  8042f8:	e03fff15 	stw	zero,-4(fp)
  8042fc:	e0bfff17 	ldw	r2,-4(fp)
}
  804300:	e037883a 	mov	sp,fp
  804304:	dfc00517 	ldw	ra,20(sp)
  804308:	df000417 	ldw	fp,16(sp)
  80430c:	dcc00317 	ldw	r19,12(sp)
  804310:	dc800217 	ldw	r18,8(sp)
  804314:	dc400117 	ldw	r17,4(sp)
  804318:	dc000017 	ldw	r16,0(sp)
  80431c:	dec00604 	addi	sp,sp,24
  804320:	f800283a 	ret

00804324 <updateHighScoreBoard>:

//function writes to the SD card, and places current players score into the high scores if
//it exceeds any of the current high scores.
//function returns if the highScore file doesnt open in memory, or if the currentScoreBoard is corrupt.
void updateHighScoreBoard(void) {
  804324:	defff604 	addi	sp,sp,-40
  804328:	dfc00915 	stw	ra,36(sp)
  80432c:	df000815 	stw	fp,32(sp)
  804330:	dc400715 	stw	r17,28(sp)
  804334:	dc000615 	stw	r16,24(sp)
  804338:	df000604 	addi	fp,sp,24
	int playerScore = getCurrentPlayerScore();
  80433c:	0804b940 	call	804b94 <getCurrentPlayerScore>
  804340:	e0bfff15 	stw	r2,-4(fp)
	unsigned short i,j;
	short scoreReplaceIndex = -1;
  804344:	00bfffc4 	movi	r2,-1
  804348:	e0bffd8d 	sth	r2,-10(fp)
	unsigned short firstDigitFound = 0;
  80434c:	e03ffd0d 	sth	zero,-12(fp)
	unsigned short digit;
	short int fileHandle = openFile(scoreFileName);
  804350:	d1200417 	ldw	r4,-32752(gp)
  804354:	08051280 	call	805128 <openFile>
  804358:	e0bffc0d 	sth	r2,-16(fp)
	if (fileHandle == -1 || gameScores == NULL || gameScores->currentScoreBoardCorrupt == 1) {
  80435c:	e0bffc0f 	ldh	r2,-16(fp)
  804360:	10bfffe0 	cmpeqi	r2,r2,-1
  804364:	1000081e 	bne	r2,zero,804388 <updateHighScoreBoard+0x64>
  804368:	d0a73617 	ldw	r2,-25384(gp)
  80436c:	1005003a 	cmpeq	r2,r2,zero
  804370:	1000051e 	bne	r2,zero,804388 <updateHighScoreBoard+0x64>
  804374:	d0a73617 	ldw	r2,-25384(gp)
  804378:	10801383 	ldbu	r2,78(r2)
  80437c:	10803fcc 	andi	r2,r2,255
  804380:	10800058 	cmpnei	r2,r2,1
  804384:	1000051e 	bne	r2,zero,80439c <updateHighScoreBoard+0x78>
		printf("Error opening %s\n", scoreFileName);
  804388:	d1600417 	ldw	r5,-32752(gp)
  80438c:	010020b4 	movhi	r4,130
  804390:	21330004 	addi	r4,r4,-13312
  804394:	080a8180 	call	80a818 <printf>
		return;
  804398:	00010106 	br	8047a0 <updateHighScoreBoard+0x47c>
	}

	//determine if playerScore is better than any high scores
	for(i = 0; i < NUMSCORES; i++) {
  80439c:	e03ffe8d 	sth	zero,-6(fp)
  8043a0:	00001406 	br	8043f4 <updateHighScoreBoard+0xd0>
		if(playerScore > gameScores->highScoreBoard[i]) {
  8043a4:	d0e73617 	ldw	r3,-25384(gp)
  8043a8:	e0bffe8b 	ldhu	r2,-6(fp)
  8043ac:	1085883a 	add	r2,r2,r2
  8043b0:	1085883a 	add	r2,r2,r2
  8043b4:	10c5883a 	add	r2,r2,r3
  8043b8:	10800204 	addi	r2,r2,8
  8043bc:	10c00017 	ldw	r3,0(r2)
  8043c0:	e0bfff17 	ldw	r2,-4(fp)
  8043c4:	1880080e 	bge	r3,r2,8043e8 <updateHighScoreBoard+0xc4>
			printf("I found a score, %d, that is higher than other scores. Index %d\n", playerScore, i);
  8043c8:	e1bffe8b 	ldhu	r6,-6(fp)
  8043cc:	010020b4 	movhi	r4,130
  8043d0:	21331904 	addi	r4,r4,-13212
  8043d4:	e17fff17 	ldw	r5,-4(fp)
  8043d8:	080a8180 	call	80a818 <printf>
			scoreReplaceIndex = i;
  8043dc:	e0bffe8b 	ldhu	r2,-6(fp)
  8043e0:	e0bffd8d 	sth	r2,-10(fp)
			break; // current index needs to be replaced by
  8043e4:	00000606 	br	804400 <updateHighScoreBoard+0xdc>
		printf("Error opening %s\n", scoreFileName);
		return;
	}

	//determine if playerScore is better than any high scores
	for(i = 0; i < NUMSCORES; i++) {
  8043e8:	e0bffe8b 	ldhu	r2,-6(fp)
  8043ec:	10800044 	addi	r2,r2,1
  8043f0:	e0bffe8d 	sth	r2,-6(fp)
  8043f4:	e0bffe8b 	ldhu	r2,-6(fp)
  8043f8:	108002b0 	cmpltui	r2,r2,10
  8043fc:	103fe91e 	bne	r2,zero,8043a4 <updateHighScoreBoard+0x80>
			break; // current index needs to be replaced by
		}
	}

	//if playerScore is better than a high score, re-write to the SD card, placing currentPlayerScore in the file.
	if(scoreReplaceIndex != -1) {
  804400:	e0bffd8f 	ldh	r2,-10(fp)
  804404:	10bfffe0 	cmpeqi	r2,r2,-1
  804408:	1000e21e 	bne	r2,zero,804794 <updateHighScoreBoard+0x470>
		int loopCount = NUMSCORES;
  80440c:	00800284 	movi	r2,10
  804410:	e0bffb15 	stw	r2,-20(fp)
		for(i = 0; i < loopCount; i++) {
  804414:	e03ffe8d 	sth	zero,-6(fp)
  804418:	0000db06 	br	804788 <updateHighScoreBoard+0x464>
			if(i == scoreReplaceIndex){
  80441c:	e0fffe8b 	ldhu	r3,-6(fp)
  804420:	e0bffd8f 	ldh	r2,-10(fp)
  804424:	1880711e 	bne	r3,r2,8045ec <updateHighScoreBoard+0x2c8>
				printf("replacing score code at index %d\n", i);
  804428:	e17ffe8b 	ldhu	r5,-6(fp)
  80442c:	010020b4 	movhi	r4,130
  804430:	21332a04 	addi	r4,r4,-13144
  804434:	080a8180 	call	80a818 <printf>

				char * newInitials = malloc(4*sizeof(char));
  804438:	01000104 	movi	r4,4
  80443c:	080a0c40 	call	80a0c4 <malloc>
  804440:	e0bffa15 	stw	r2,-24(fp)
				*newInitials = '-';
  804444:	e0fffa17 	ldw	r3,-24(fp)
  804448:	00800b44 	movi	r2,45
  80444c:	18800005 	stb	r2,0(r3)
				*(newInitials + 1) = '-';
  804450:	e0bffa17 	ldw	r2,-24(fp)
  804454:	10c00044 	addi	r3,r2,1
  804458:	00800b44 	movi	r2,45
  80445c:	18800005 	stb	r2,0(r3)
				*(newInitials + 2) = '-';
  804460:	e0bffa17 	ldw	r2,-24(fp)
  804464:	10c00084 	addi	r3,r2,2
  804468:	00800b44 	movi	r2,45
  80446c:	18800005 	stb	r2,0(r3)
				*(newInitials + 3) = '\0';
  804470:	e0bffa17 	ldw	r2,-24(fp)
  804474:	108000c4 	addi	r2,r2,3
  804478:	10000005 	stb	zero,0(r2)
				obtainUserInitials(newInitials);
  80447c:	e13ffa17 	ldw	r4,-24(fp)
  804480:	08047bc0 	call	8047bc <obtainUserInitials>
				for(j = 0; j < NUMINITIALS; j++){
  804484:	e03ffe0d 	sth	zero,-8(fp)
  804488:	00000d06 	br	8044c0 <updateHighScoreBoard+0x19c>
					alt_up_sd_card_write(fileHandle, newInitials[j]);
  80448c:	e13ffc0f 	ldh	r4,-16(fp)
  804490:	e0bffe0b 	ldhu	r2,-8(fp)
  804494:	1007883a 	mov	r3,r2
  804498:	e0bffa17 	ldw	r2,-24(fp)
  80449c:	1885883a 	add	r2,r3,r2
  8044a0:	10800003 	ldbu	r2,0(r2)
  8044a4:	11403fcc 	andi	r5,r2,255
  8044a8:	2940201c 	xori	r5,r5,128
  8044ac:	297fe004 	addi	r5,r5,-128
  8044b0:	081adbc0 	call	81adbc <alt_up_sd_card_write>
				*newInitials = '-';
				*(newInitials + 1) = '-';
				*(newInitials + 2) = '-';
				*(newInitials + 3) = '\0';
				obtainUserInitials(newInitials);
				for(j = 0; j < NUMINITIALS; j++){
  8044b4:	e0bffe0b 	ldhu	r2,-8(fp)
  8044b8:	10800044 	addi	r2,r2,1
  8044bc:	e0bffe0d 	sth	r2,-8(fp)
  8044c0:	e0bffe0b 	ldhu	r2,-8(fp)
  8044c4:	108000f0 	cmpltui	r2,r2,3
  8044c8:	103ff01e 	bne	r2,zero,80448c <updateHighScoreBoard+0x168>
					alt_up_sd_card_write(fileHandle, newInitials[j]);
				}
				free(newInitials);
  8044cc:	e13ffa17 	ldw	r4,-24(fp)
  8044d0:	080a0b00 	call	80a0b0 <free>

				alt_up_sd_card_write(fileHandle, ' ');
  8044d4:	e13ffc0f 	ldh	r4,-16(fp)
  8044d8:	01400804 	movi	r5,32
  8044dc:	081adbc0 	call	81adbc <alt_up_sd_card_write>
				firstDigitFound = 0;
  8044e0:	e03ffd0d 	sth	zero,-12(fp)
				for(j = 0; j < MAXSCOREDIGITS; j++){
  8044e4:	e03ffe0d 	sth	zero,-8(fp)
  8044e8:	00003706 	br	8045c8 <updateHighScoreBoard+0x2a4>
					digit = ((int)(gameScores->currentPlayerScore / pow(10,(MAXSCOREDIGITS - 1 - j)))%10);
  8044ec:	d0a73617 	ldw	r2,-25384(gp)
  8044f0:	11000017 	ldw	r4,0(r2)
  8044f4:	08094f80 	call	8094f8 <__floatsidf>
  8044f8:	1021883a 	mov	r16,r2
  8044fc:	1823883a 	mov	r17,r3
  804500:	e0fffe0b 	ldhu	r3,-8(fp)
  804504:	00800244 	movi	r2,9
  804508:	10c9c83a 	sub	r4,r2,r3
  80450c:	08094f80 	call	8094f8 <__floatsidf>
  804510:	100f883a 	mov	r7,r2
  804514:	1811883a 	mov	r8,r3
  804518:	0009883a 	mov	r4,zero
  80451c:	01500934 	movhi	r5,16420
  804520:	380d883a 	mov	r6,r7
  804524:	400f883a 	mov	r7,r8
  804528:	08065f00 	call	8065f0 <pow>
  80452c:	100f883a 	mov	r7,r2
  804530:	1811883a 	mov	r8,r3
  804534:	8009883a 	mov	r4,r16
  804538:	880b883a 	mov	r5,r17
  80453c:	380d883a 	mov	r6,r7
  804540:	400f883a 	mov	r7,r8
  804544:	0808ff80 	call	808ff8 <__divdf3>
  804548:	1009883a 	mov	r4,r2
  80454c:	180b883a 	mov	r5,r3
  804550:	2005883a 	mov	r2,r4
  804554:	2807883a 	mov	r3,r5
  804558:	1009883a 	mov	r4,r2
  80455c:	180b883a 	mov	r5,r3
  804560:	08095f00 	call	8095f0 <__fixdfsi>
  804564:	1009883a 	mov	r4,r2
  804568:	01400284 	movi	r5,10
  80456c:	08097dc0 	call	8097dc <__modsi3>
  804570:	e0bffc8d 	sth	r2,-14(fp)
					if(digit != 0 && firstDigitFound == 0){
  804574:	e0bffc8b 	ldhu	r2,-14(fp)
  804578:	1005003a 	cmpeq	r2,r2,zero
  80457c:	1000051e 	bne	r2,zero,804594 <updateHighScoreBoard+0x270>
  804580:	e0bffd0b 	ldhu	r2,-12(fp)
  804584:	1004c03a 	cmpne	r2,r2,zero
  804588:	1000021e 	bne	r2,zero,804594 <updateHighScoreBoard+0x270>
						firstDigitFound = 1;
  80458c:	00800044 	movi	r2,1
  804590:	e0bffd0d 	sth	r2,-12(fp)
					}
					if(firstDigitFound == 1){
  804594:	e0bffd0b 	ldhu	r2,-12(fp)
  804598:	10800058 	cmpnei	r2,r2,1
  80459c:	1000071e 	bne	r2,zero,8045bc <updateHighScoreBoard+0x298>
						alt_up_sd_card_write(fileHandle, (digit + '0'));
  8045a0:	e13ffc0f 	ldh	r4,-16(fp)
  8045a4:	e0bffc8b 	ldhu	r2,-14(fp)
  8045a8:	10800c04 	addi	r2,r2,48
  8045ac:	11403fcc 	andi	r5,r2,255
  8045b0:	2940201c 	xori	r5,r5,128
  8045b4:	297fe004 	addi	r5,r5,-128
  8045b8:	081adbc0 	call	81adbc <alt_up_sd_card_write>
				}
				free(newInitials);

				alt_up_sd_card_write(fileHandle, ' ');
				firstDigitFound = 0;
				for(j = 0; j < MAXSCOREDIGITS; j++){
  8045bc:	e0bffe0b 	ldhu	r2,-8(fp)
  8045c0:	10800044 	addi	r2,r2,1
  8045c4:	e0bffe0d 	sth	r2,-8(fp)
  8045c8:	e0bffe0b 	ldhu	r2,-8(fp)
  8045cc:	108002b0 	cmpltui	r2,r2,10
  8045d0:	103fc61e 	bne	r2,zero,8044ec <updateHighScoreBoard+0x1c8>
					}
					if(firstDigitFound == 1){
						alt_up_sd_card_write(fileHandle, (digit + '0'));
					}
				}
				alt_up_sd_card_write(fileHandle, ' ');
  8045d4:	e13ffc0f 	ldh	r4,-16(fp)
  8045d8:	01400804 	movi	r5,32
  8045dc:	081adbc0 	call	81adbc <alt_up_sd_card_write>
				loopCount--;
  8045e0:	e0bffb17 	ldw	r2,-20(fp)
  8045e4:	10bfffc4 	addi	r2,r2,-1
  8045e8:	e0bffb15 	stw	r2,-20(fp)
			}

			printf("writing high scores, in main loop, i = %d\n", i);
  8045ec:	e17ffe8b 	ldhu	r5,-6(fp)
  8045f0:	010020b4 	movhi	r4,130
  8045f4:	21333304 	addi	r4,r4,-13108
  8045f8:	080a8180 	call	80a818 <printf>
			//write scores that are currently saved as high scores back to SD card in correct position.
			for(j = 0; j < NUMINITIALS; j++){
  8045fc:	e03ffe0d 	sth	zero,-8(fp)
  804600:	00001306 	br	804650 <updateHighScoreBoard+0x32c>
				alt_up_sd_card_write(fileHandle, gameScores->highScoreBoardInits[i][j]);
  804604:	e1bffc0f 	ldh	r6,-16(fp)
  804608:	d1673617 	ldw	r5,-25384(gp)
  80460c:	e0fffe8b 	ldhu	r3,-6(fp)
  804610:	e13ffe0b 	ldhu	r4,-8(fp)
  804614:	1805883a 	mov	r2,r3
  804618:	1085883a 	add	r2,r2,r2
  80461c:	10c5883a 	add	r2,r2,r3
  804620:	1145883a 	add	r2,r2,r5
  804624:	1105883a 	add	r2,r2,r4
  804628:	10800c04 	addi	r2,r2,48
  80462c:	10800003 	ldbu	r2,0(r2)
  804630:	11403fcc 	andi	r5,r2,255
  804634:	2940201c 	xori	r5,r5,128
  804638:	297fe004 	addi	r5,r5,-128
  80463c:	3009883a 	mov	r4,r6
  804640:	081adbc0 	call	81adbc <alt_up_sd_card_write>
				loopCount--;
			}

			printf("writing high scores, in main loop, i = %d\n", i);
			//write scores that are currently saved as high scores back to SD card in correct position.
			for(j = 0; j < NUMINITIALS; j++){
  804644:	e0bffe0b 	ldhu	r2,-8(fp)
  804648:	10800044 	addi	r2,r2,1
  80464c:	e0bffe0d 	sth	r2,-8(fp)
  804650:	e0bffe0b 	ldhu	r2,-8(fp)
  804654:	108000f0 	cmpltui	r2,r2,3
  804658:	103fea1e 	bne	r2,zero,804604 <updateHighScoreBoard+0x2e0>
				alt_up_sd_card_write(fileHandle, gameScores->highScoreBoardInits[i][j]);
			}
			alt_up_sd_card_write(fileHandle, ' ');
  80465c:	e13ffc0f 	ldh	r4,-16(fp)
  804660:	01400804 	movi	r5,32
  804664:	081adbc0 	call	81adbc <alt_up_sd_card_write>
			firstDigitFound = 0;
  804668:	e03ffd0d 	sth	zero,-12(fp)
			for(j = 0; j < MAXSCOREDIGITS; j++){
  80466c:	e03ffe0d 	sth	zero,-8(fp)
  804670:	00003c06 	br	804764 <updateHighScoreBoard+0x440>
				digit = ((int)(gameScores->highScoreBoard[i] / pow(10,(MAXSCOREDIGITS - 1 - j)))%10);
  804674:	d0e73617 	ldw	r3,-25384(gp)
  804678:	e0bffe8b 	ldhu	r2,-6(fp)
  80467c:	1085883a 	add	r2,r2,r2
  804680:	1085883a 	add	r2,r2,r2
  804684:	10c5883a 	add	r2,r2,r3
  804688:	10800204 	addi	r2,r2,8
  80468c:	11000017 	ldw	r4,0(r2)
  804690:	08094f80 	call	8094f8 <__floatsidf>
  804694:	1021883a 	mov	r16,r2
  804698:	1823883a 	mov	r17,r3
  80469c:	e0fffe0b 	ldhu	r3,-8(fp)
  8046a0:	00800244 	movi	r2,9
  8046a4:	10c9c83a 	sub	r4,r2,r3
  8046a8:	08094f80 	call	8094f8 <__floatsidf>
  8046ac:	100f883a 	mov	r7,r2
  8046b0:	1811883a 	mov	r8,r3
  8046b4:	0009883a 	mov	r4,zero
  8046b8:	01500934 	movhi	r5,16420
  8046bc:	380d883a 	mov	r6,r7
  8046c0:	400f883a 	mov	r7,r8
  8046c4:	08065f00 	call	8065f0 <pow>
  8046c8:	100f883a 	mov	r7,r2
  8046cc:	1811883a 	mov	r8,r3
  8046d0:	8009883a 	mov	r4,r16
  8046d4:	880b883a 	mov	r5,r17
  8046d8:	380d883a 	mov	r6,r7
  8046dc:	400f883a 	mov	r7,r8
  8046e0:	0808ff80 	call	808ff8 <__divdf3>
  8046e4:	1009883a 	mov	r4,r2
  8046e8:	180b883a 	mov	r5,r3
  8046ec:	2005883a 	mov	r2,r4
  8046f0:	2807883a 	mov	r3,r5
  8046f4:	1009883a 	mov	r4,r2
  8046f8:	180b883a 	mov	r5,r3
  8046fc:	08095f00 	call	8095f0 <__fixdfsi>
  804700:	1009883a 	mov	r4,r2
  804704:	01400284 	movi	r5,10
  804708:	08097dc0 	call	8097dc <__modsi3>
  80470c:	e0bffc8d 	sth	r2,-14(fp)
				if(digit != 0 && firstDigitFound == 0){
  804710:	e0bffc8b 	ldhu	r2,-14(fp)
  804714:	1005003a 	cmpeq	r2,r2,zero
  804718:	1000051e 	bne	r2,zero,804730 <updateHighScoreBoard+0x40c>
  80471c:	e0bffd0b 	ldhu	r2,-12(fp)
  804720:	1004c03a 	cmpne	r2,r2,zero
  804724:	1000021e 	bne	r2,zero,804730 <updateHighScoreBoard+0x40c>
					firstDigitFound = 1;
  804728:	00800044 	movi	r2,1
  80472c:	e0bffd0d 	sth	r2,-12(fp)
				}
				if(firstDigitFound == 1){
  804730:	e0bffd0b 	ldhu	r2,-12(fp)
  804734:	10800058 	cmpnei	r2,r2,1
  804738:	1000071e 	bne	r2,zero,804758 <updateHighScoreBoard+0x434>
					alt_up_sd_card_write(fileHandle, (digit + '0'));
  80473c:	e13ffc0f 	ldh	r4,-16(fp)
  804740:	e0bffc8b 	ldhu	r2,-14(fp)
  804744:	10800c04 	addi	r2,r2,48
  804748:	11403fcc 	andi	r5,r2,255
  80474c:	2940201c 	xori	r5,r5,128
  804750:	297fe004 	addi	r5,r5,-128
  804754:	081adbc0 	call	81adbc <alt_up_sd_card_write>
			for(j = 0; j < NUMINITIALS; j++){
				alt_up_sd_card_write(fileHandle, gameScores->highScoreBoardInits[i][j]);
			}
			alt_up_sd_card_write(fileHandle, ' ');
			firstDigitFound = 0;
			for(j = 0; j < MAXSCOREDIGITS; j++){
  804758:	e0bffe0b 	ldhu	r2,-8(fp)
  80475c:	10800044 	addi	r2,r2,1
  804760:	e0bffe0d 	sth	r2,-8(fp)
  804764:	e0bffe0b 	ldhu	r2,-8(fp)
  804768:	108002b0 	cmpltui	r2,r2,10
  80476c:	103fc11e 	bne	r2,zero,804674 <updateHighScoreBoard+0x350>
				}
				if(firstDigitFound == 1){
					alt_up_sd_card_write(fileHandle, (digit + '0'));
				}
			}
			alt_up_sd_card_write(fileHandle, ' ');
  804770:	e13ffc0f 	ldh	r4,-16(fp)
  804774:	01400804 	movi	r5,32
  804778:	081adbc0 	call	81adbc <alt_up_sd_card_write>
	}

	//if playerScore is better than a high score, re-write to the SD card, placing currentPlayerScore in the file.
	if(scoreReplaceIndex != -1) {
		int loopCount = NUMSCORES;
		for(i = 0; i < loopCount; i++) {
  80477c:	e0bffe8b 	ldhu	r2,-6(fp)
  804780:	10800044 	addi	r2,r2,1
  804784:	e0bffe8d 	sth	r2,-6(fp)
  804788:	e0fffe8b 	ldhu	r3,-6(fp)
  80478c:	e0bffb17 	ldw	r2,-20(fp)
  804790:	18bf2216 	blt	r3,r2,80441c <updateHighScoreBoard+0xf8>
			}
			alt_up_sd_card_write(fileHandle, ' ');
		}
	}

	closeFile(fileHandle);
  804794:	e13ffc0f 	ldh	r4,-16(fp)
  804798:	08051680 	call	805168 <closeFile>

	//reload new written data back into game memory.
	readHighScoreBoardFromSD();
  80479c:	0803fd00 	call	803fd0 <readHighScoreBoardFromSD>

	return;
}
  8047a0:	e037883a 	mov	sp,fp
  8047a4:	dfc00317 	ldw	ra,12(sp)
  8047a8:	df000217 	ldw	fp,8(sp)
  8047ac:	dc400117 	ldw	r17,4(sp)
  8047b0:	dc000017 	ldw	r16,0(sp)
  8047b4:	dec00404 	addi	sp,sp,16
  8047b8:	f800283a 	ret

008047bc <obtainUserInitials>:

//get user input for initials if they are on the high score board
void obtainUserInitials(char * initials){
  8047bc:	defff504 	addi	sp,sp,-44
  8047c0:	dfc00a15 	stw	ra,40(sp)
  8047c4:	df000915 	stw	fp,36(sp)
  8047c8:	df000904 	addi	fp,sp,36
  8047cc:	e13fff15 	stw	r4,-4(fp)

	int numInitials = 3;
  8047d0:	008000c4 	movi	r2,3
  8047d4:	e0bffe15 	stw	r2,-8(fp)
	unsigned int charChoice = 0;
  8047d8:	e03ffd15 	stw	zero,-12(fp)
	int i;
	char keyInput;
	short int edgeDetect0 = 0;
  8047dc:	e03ffb0d 	sth	zero,-20(fp)
	short int edgeDetect1 = 0;
  8047e0:	e03ffa8d 	sth	zero,-22(fp)
	short int edgeDetect2 = 0;
  8047e4:	e03ffa0d 	sth	zero,-24(fp)
	keyInput = IORD_8DIRECT(KEYS_BASE, 0);
  8047e8:	00804034 	movhi	r2,256
  8047ec:	10842004 	addi	r2,r2,4224
  8047f0:	10800023 	ldbuio	r2,0(r2)
  8047f4:	e0bffb85 	stb	r2,-18(fp)
	static char atariButtons;
	static char atariUp;
	static char atariDown;
	static char atariFire;
	char key0 = keyInput & 0x01;
  8047f8:	e0bffb83 	ldbu	r2,-18(fp)
  8047fc:	1080004c 	andi	r2,r2,1
  804800:	e0bff985 	stb	r2,-26(fp)
	char key1 = keyInput & 0x02;
  804804:	e0bffb83 	ldbu	r2,-18(fp)
  804808:	1080008c 	andi	r2,r2,2
  80480c:	e0bff945 	stb	r2,-27(fp)
	char key2 = keyInput & 0x04;
  804810:	e0bffb83 	ldbu	r2,-18(fp)
  804814:	1080010c 	andi	r2,r2,4
  804818:	e0bff905 	stb	r2,-28(fp)
	int xPos = 20;
  80481c:	00800504 	movi	r2,20
  804820:	e0bff815 	stw	r2,-32(fp)
	int yPos = 20;
  804824:	00800504 	movi	r2,20
  804828:	e0bff715 	stw	r2,-36(fp)

	//0x41 + x(0-25) is alphabet in ascii.
	alt_up_char_buffer_string(char_buffer, "NEW HIGH SCORE!!!", xPos, yPos-3);
  80482c:	d1271617 	ldw	r4,-25512(gp)
  804830:	e1bff817 	ldw	r6,-32(fp)
  804834:	e0bff717 	ldw	r2,-36(fp)
  804838:	10bfff44 	addi	r2,r2,-3
  80483c:	100f883a 	mov	r7,r2
  804840:	014020b4 	movhi	r5,130
  804844:	29733e04 	addi	r5,r5,-13064
  804848:	0815a9c0 	call	815a9c <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "use key1 to go up, key2 to go down,", xPos, yPos-2);
  80484c:	d1271617 	ldw	r4,-25512(gp)
  804850:	e1bff817 	ldw	r6,-32(fp)
  804854:	e0bff717 	ldw	r2,-36(fp)
  804858:	10bfff84 	addi	r2,r2,-2
  80485c:	100f883a 	mov	r7,r2
  804860:	014020b4 	movhi	r5,130
  804864:	29734304 	addi	r5,r5,-13044
  804868:	0815a9c0 	call	815a9c <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "and key0 to lock in choice:", xPos, yPos-1);
  80486c:	d1271617 	ldw	r4,-25512(gp)
  804870:	e1bff817 	ldw	r6,-32(fp)
  804874:	e0bff717 	ldw	r2,-36(fp)
  804878:	10bfffc4 	addi	r2,r2,-1
  80487c:	100f883a 	mov	r7,r2
  804880:	014020b4 	movhi	r5,130
  804884:	29734c04 	addi	r5,r5,-13008
  804888:	0815a9c0 	call	815a9c <alt_up_char_buffer_string>
	for(i = 0; i < numInitials; i++) {
  80488c:	e03ffc15 	stw	zero,-16(fp)
  804890:	00008906 	br	804ab8 <obtainUserInitials+0x2fc>
		charChoice = 0;
  804894:	e03ffd15 	stw	zero,-12(fp)
		while(1) {
			keyInput = IORD_8DIRECT(KEYS_BASE, 0);
  804898:	00804034 	movhi	r2,256
  80489c:	10842004 	addi	r2,r2,4224
  8048a0:	10800023 	ldbuio	r2,0(r2)
  8048a4:	e0bffb85 	stb	r2,-18(fp)
			key0 = keyInput & 0x01;
  8048a8:	e0bffb83 	ldbu	r2,-18(fp)
  8048ac:	1080004c 	andi	r2,r2,1
  8048b0:	e0bff985 	stb	r2,-26(fp)
			key1 = keyInput & 0x02;
  8048b4:	e0bffb83 	ldbu	r2,-18(fp)
  8048b8:	1080008c 	andi	r2,r2,2
  8048bc:	e0bff945 	stb	r2,-27(fp)
			key2 = keyInput & 0x04;
  8048c0:	e0bffb83 	ldbu	r2,-18(fp)
  8048c4:	1080010c 	andi	r2,r2,4
  8048c8:	e0bff905 	stb	r2,-28(fp)
			atariButtons = (IORD_8DIRECT(PROCESSORGPIN_BASE, 0) & 0x0F);
  8048cc:	00804034 	movhi	r2,256
  8048d0:	10842c04 	addi	r2,r2,4272
  8048d4:	10800023 	ldbuio	r2,0(r2)
  8048d8:	108003cc 	andi	r2,r2,15
  8048dc:	d0a735c5 	stb	r2,-25385(gp)
			atariFire = atariButtons & 0x08;
  8048e0:	d0a735c3 	ldbu	r2,-25385(gp)
  8048e4:	1080020c 	andi	r2,r2,8
  8048e8:	d0a73505 	stb	r2,-25388(gp)
			atariUp = atariButtons & 0x02;
  8048ec:	d0a735c3 	ldbu	r2,-25385(gp)
  8048f0:	1080008c 	andi	r2,r2,2
  8048f4:	d0a73585 	stb	r2,-25386(gp)
			atariDown = atariButtons & 0x04;
  8048f8:	d0a735c3 	ldbu	r2,-25385(gp)
  8048fc:	1080010c 	andi	r2,r2,4
  804900:	d0a73545 	stb	r2,-25387(gp)

			alt_up_char_buffer_string(char_buffer, initials, xPos, yPos);
  804904:	d1271617 	ldw	r4,-25512(gp)
  804908:	e1bff817 	ldw	r6,-32(fp)
  80490c:	e1fff717 	ldw	r7,-36(fp)
  804910:	e17fff17 	ldw	r5,-4(fp)
  804914:	0815a9c0 	call	815a9c <alt_up_char_buffer_string>
			if ((!key0 && !atariFire) && (edgeDetect0 == 0)) {
  804918:	e0bff987 	ldb	r2,-26(fp)
  80491c:	1004c03a 	cmpne	r2,r2,zero
  804920:	10000c1e 	bne	r2,zero,804954 <obtainUserInitials+0x198>
  804924:	d0a73503 	ldbu	r2,-25388(gp)
  804928:	10803fcc 	andi	r2,r2,255
  80492c:	1080201c 	xori	r2,r2,128
  804930:	10bfe004 	addi	r2,r2,-128
  804934:	1004c03a 	cmpne	r2,r2,zero
  804938:	1000061e 	bne	r2,zero,804954 <obtainUserInitials+0x198>
  80493c:	e0bffb0f 	ldh	r2,-20(fp)
  804940:	1004c03a 	cmpne	r2,r2,zero
  804944:	1000031e 	bne	r2,zero,804954 <obtainUserInitials+0x198>
				edgeDetect0 = 1;
  804948:	00800044 	movi	r2,1
  80494c:	e0bffb0d 	sth	r2,-20(fp)
			atariFire = atariButtons & 0x08;
			atariUp = atariButtons & 0x02;
			atariDown = atariButtons & 0x04;

			alt_up_char_buffer_string(char_buffer, initials, xPos, yPos);
			if ((!key0 && !atariFire) && (edgeDetect0 == 0)) {
  804950:	00000e06 	br	80498c <obtainUserInitials+0x1d0>
				edgeDetect0 = 1;
			} else if ((key0 ^ atariFire) && (edgeDetect0 == 1)) {
  804954:	d0a73503 	ldbu	r2,-25388(gp)
  804958:	e0fff987 	ldb	r3,-26(fp)
  80495c:	10803fcc 	andi	r2,r2,255
  804960:	1080201c 	xori	r2,r2,128
  804964:	10bfe004 	addi	r2,r2,-128
  804968:	18800826 	beq	r3,r2,80498c <obtainUserInitials+0x1d0>
  80496c:	e0bffb0f 	ldh	r2,-20(fp)
  804970:	10800058 	cmpnei	r2,r2,1
  804974:	1000051e 	bne	r2,zero,80498c <obtainUserInitials+0x1d0>
				edgeDetect0 = 0;
  804978:	e03ffb0d 	sth	zero,-20(fp)

	//0x41 + x(0-25) is alphabet in ascii.
	alt_up_char_buffer_string(char_buffer, "NEW HIGH SCORE!!!", xPos, yPos-3);
	alt_up_char_buffer_string(char_buffer, "use key1 to go up, key2 to go down,", xPos, yPos-2);
	alt_up_char_buffer_string(char_buffer, "and key0 to lock in choice:", xPos, yPos-1);
	for(i = 0; i < numInitials; i++) {
  80497c:	e0bffc17 	ldw	r2,-16(fp)
  804980:	10800044 	addi	r2,r2,1
  804984:	e0bffc15 	stw	r2,-16(fp)
  804988:	00004b06 	br	804ab8 <obtainUserInitials+0x2fc>
				edgeDetect0 = 1;
			} else if ((key0 ^ atariFire) && (edgeDetect0 == 1)) {
				edgeDetect0 = 0;
				break;
			}
			if ((!key1 && !atariUp) && (edgeDetect1 == 0)) {
  80498c:	e0bff947 	ldb	r2,-27(fp)
  804990:	1004c03a 	cmpne	r2,r2,zero
  804994:	10000c1e 	bne	r2,zero,8049c8 <obtainUserInitials+0x20c>
  804998:	d0a73583 	ldbu	r2,-25386(gp)
  80499c:	10803fcc 	andi	r2,r2,255
  8049a0:	1080201c 	xori	r2,r2,128
  8049a4:	10bfe004 	addi	r2,r2,-128
  8049a8:	1004c03a 	cmpne	r2,r2,zero
  8049ac:	1000061e 	bne	r2,zero,8049c8 <obtainUserInitials+0x20c>
  8049b0:	e0bffa8f 	ldh	r2,-22(fp)
  8049b4:	1004c03a 	cmpne	r2,r2,zero
  8049b8:	1000031e 	bne	r2,zero,8049c8 <obtainUserInitials+0x20c>
				edgeDetect1 = 1;
  8049bc:	00800044 	movi	r2,1
  8049c0:	e0bffa8d 	sth	r2,-22(fp)
				edgeDetect0 = 1;
			} else if ((key0 ^ atariFire) && (edgeDetect0 == 1)) {
				edgeDetect0 = 0;
				break;
			}
			if ((!key1 && !atariUp) && (edgeDetect1 == 0)) {
  8049c4:	00001206 	br	804a10 <obtainUserInitials+0x254>
				edgeDetect1 = 1;
			} else if ((key1 ^ atariUp) && (edgeDetect1 == 1)) {
  8049c8:	d0a73583 	ldbu	r2,-25386(gp)
  8049cc:	e0fff947 	ldb	r3,-27(fp)
  8049d0:	10803fcc 	andi	r2,r2,255
  8049d4:	1080201c 	xori	r2,r2,128
  8049d8:	10bfe004 	addi	r2,r2,-128
  8049dc:	18800c26 	beq	r3,r2,804a10 <obtainUserInitials+0x254>
  8049e0:	e0bffa8f 	ldh	r2,-22(fp)
  8049e4:	10800058 	cmpnei	r2,r2,1
  8049e8:	1000091e 	bne	r2,zero,804a10 <obtainUserInitials+0x254>
				edgeDetect1 = 0;
  8049ec:	e03ffa8d 	sth	zero,-22(fp)
				if(charChoice < 25){
  8049f0:	e0bffd17 	ldw	r2,-12(fp)
  8049f4:	10800668 	cmpgeui	r2,r2,25
  8049f8:	1000041e 	bne	r2,zero,804a0c <obtainUserInitials+0x250>
					charChoice++;
  8049fc:	e0bffd17 	ldw	r2,-12(fp)
  804a00:	10800044 	addi	r2,r2,1
  804a04:	e0bffd15 	stw	r2,-12(fp)
  804a08:	00000106 	br	804a10 <obtainUserInitials+0x254>
				} else {
					charChoice = 0;
  804a0c:	e03ffd15 	stw	zero,-12(fp)
				}
			}
			if ((!key2 && !atariDown) && (edgeDetect2 == 0)) {
  804a10:	e0bff907 	ldb	r2,-28(fp)
  804a14:	1004c03a 	cmpne	r2,r2,zero
  804a18:	10000c1e 	bne	r2,zero,804a4c <obtainUserInitials+0x290>
  804a1c:	d0a73543 	ldbu	r2,-25387(gp)
  804a20:	10803fcc 	andi	r2,r2,255
  804a24:	1080201c 	xori	r2,r2,128
  804a28:	10bfe004 	addi	r2,r2,-128
  804a2c:	1004c03a 	cmpne	r2,r2,zero
  804a30:	1000061e 	bne	r2,zero,804a4c <obtainUserInitials+0x290>
  804a34:	e0bffa0f 	ldh	r2,-24(fp)
  804a38:	1004c03a 	cmpne	r2,r2,zero
  804a3c:	1000031e 	bne	r2,zero,804a4c <obtainUserInitials+0x290>
				edgeDetect2 = 1;
  804a40:	00800044 	movi	r2,1
  804a44:	e0bffa0d 	sth	r2,-24(fp)
					charChoice++;
				} else {
					charChoice = 0;
				}
			}
			if ((!key2 && !atariDown) && (edgeDetect2 == 0)) {
  804a48:	00001306 	br	804a98 <obtainUserInitials+0x2dc>
				edgeDetect2 = 1;
			} else if ((key2 ^ atariDown) && (edgeDetect2 == 1)) {
  804a4c:	d0a73543 	ldbu	r2,-25387(gp)
  804a50:	e0fff907 	ldb	r3,-28(fp)
  804a54:	10803fcc 	andi	r2,r2,255
  804a58:	1080201c 	xori	r2,r2,128
  804a5c:	10bfe004 	addi	r2,r2,-128
  804a60:	18800d26 	beq	r3,r2,804a98 <obtainUserInitials+0x2dc>
  804a64:	e0bffa0f 	ldh	r2,-24(fp)
  804a68:	10800058 	cmpnei	r2,r2,1
  804a6c:	10000a1e 	bne	r2,zero,804a98 <obtainUserInitials+0x2dc>
				edgeDetect2 = 0;
  804a70:	e03ffa0d 	sth	zero,-24(fp)
				if(charChoice > 0) {
  804a74:	e0bffd17 	ldw	r2,-12(fp)
  804a78:	1005003a 	cmpeq	r2,r2,zero
  804a7c:	1000041e 	bne	r2,zero,804a90 <obtainUserInitials+0x2d4>
					charChoice--;
  804a80:	e0bffd17 	ldw	r2,-12(fp)
  804a84:	10bfffc4 	addi	r2,r2,-1
  804a88:	e0bffd15 	stw	r2,-12(fp)
  804a8c:	00000206 	br	804a98 <obtainUserInitials+0x2dc>
				} else {
					charChoice = 25;
  804a90:	00800644 	movi	r2,25
  804a94:	e0bffd15 	stw	r2,-12(fp)
				}

			}
			initials[i] = 0x41 + charChoice;
  804a98:	e0bffc17 	ldw	r2,-16(fp)
  804a9c:	1007883a 	mov	r3,r2
  804aa0:	e0bfff17 	ldw	r2,-4(fp)
  804aa4:	1887883a 	add	r3,r3,r2
  804aa8:	e0bffd17 	ldw	r2,-12(fp)
  804aac:	10801044 	addi	r2,r2,65
  804ab0:	18800005 	stb	r2,0(r3)
		}
  804ab4:	003f7806 	br	804898 <obtainUserInitials+0xdc>

	//0x41 + x(0-25) is alphabet in ascii.
	alt_up_char_buffer_string(char_buffer, "NEW HIGH SCORE!!!", xPos, yPos-3);
	alt_up_char_buffer_string(char_buffer, "use key1 to go up, key2 to go down,", xPos, yPos-2);
	alt_up_char_buffer_string(char_buffer, "and key0 to lock in choice:", xPos, yPos-1);
	for(i = 0; i < numInitials; i++) {
  804ab8:	e0fffc17 	ldw	r3,-16(fp)
  804abc:	e0bffe17 	ldw	r2,-8(fp)
  804ac0:	18bf7416 	blt	r3,r2,804894 <obtainUserInitials+0xd8>
			}
			initials[i] = 0x41 + charChoice;
		}
	}

	alt_up_char_buffer_clear(char_buffer); // clear screen
  804ac4:	d1271617 	ldw	r4,-25512(gp)
  804ac8:	0815bb00 	call	815bb0 <alt_up_char_buffer_clear>

	printf("initials read as: %c%c%c", initials[0], initials[1], initials[2]);
  804acc:	e0bfff17 	ldw	r2,-4(fp)
  804ad0:	10800003 	ldbu	r2,0(r2)
  804ad4:	11403fcc 	andi	r5,r2,255
  804ad8:	2940201c 	xori	r5,r5,128
  804adc:	297fe004 	addi	r5,r5,-128
  804ae0:	e0bfff17 	ldw	r2,-4(fp)
  804ae4:	10800044 	addi	r2,r2,1
  804ae8:	10800003 	ldbu	r2,0(r2)
  804aec:	11803fcc 	andi	r6,r2,255
  804af0:	3180201c 	xori	r6,r6,128
  804af4:	31bfe004 	addi	r6,r6,-128
  804af8:	e0bfff17 	ldw	r2,-4(fp)
  804afc:	10800084 	addi	r2,r2,2
  804b00:	10800003 	ldbu	r2,0(r2)
  804b04:	11c03fcc 	andi	r7,r2,255
  804b08:	39c0201c 	xori	r7,r7,128
  804b0c:	39ffe004 	addi	r7,r7,-128
  804b10:	010020b4 	movhi	r4,130
  804b14:	21335304 	addi	r4,r4,-12980
  804b18:	080a8180 	call	80a818 <printf>

	return;
}
  804b1c:	e037883a 	mov	sp,fp
  804b20:	dfc00117 	ldw	ra,4(sp)
  804b24:	df000017 	ldw	fp,0(sp)
  804b28:	dec00204 	addi	sp,sp,8
  804b2c:	f800283a 	ret

00804b30 <updateCurrentPlayerScore>:


//increment player score by deltaScore
void updateCurrentPlayerScore(int deltaScore) {
  804b30:	defffe04 	addi	sp,sp,-8
  804b34:	df000115 	stw	fp,4(sp)
  804b38:	df000104 	addi	fp,sp,4
  804b3c:	e13fff15 	stw	r4,-4(fp)
	gameScores->currentPlayerScore += deltaScore;
  804b40:	d1273617 	ldw	r4,-25384(gp)
  804b44:	d0a73617 	ldw	r2,-25384(gp)
  804b48:	10c00017 	ldw	r3,0(r2)
  804b4c:	e0bfff17 	ldw	r2,-4(fp)
  804b50:	1885883a 	add	r2,r3,r2
  804b54:	20800015 	stw	r2,0(r4)
	return;
}
  804b58:	e037883a 	mov	sp,fp
  804b5c:	df000017 	ldw	fp,0(sp)
  804b60:	dec00104 	addi	sp,sp,4
  804b64:	f800283a 	ret

00804b68 <setCurrentPlayerScore>:

//mutator: set playerScore to score
void setCurrentPlayerScore(int score) {
  804b68:	defffe04 	addi	sp,sp,-8
  804b6c:	df000115 	stw	fp,4(sp)
  804b70:	df000104 	addi	fp,sp,4
  804b74:	e13fff15 	stw	r4,-4(fp)
	gameScores->currentPlayerScore = score;
  804b78:	d0e73617 	ldw	r3,-25384(gp)
  804b7c:	e0bfff17 	ldw	r2,-4(fp)
  804b80:	18800015 	stw	r2,0(r3)
	return;
}
  804b84:	e037883a 	mov	sp,fp
  804b88:	df000017 	ldw	fp,0(sp)
  804b8c:	dec00104 	addi	sp,sp,4
  804b90:	f800283a 	ret

00804b94 <getCurrentPlayerScore>:

//accessor: get score
int getCurrentPlayerScore() {
  804b94:	deffff04 	addi	sp,sp,-4
  804b98:	df000015 	stw	fp,0(sp)
  804b9c:	d839883a 	mov	fp,sp
	return gameScores->currentPlayerScore;
  804ba0:	d0a73617 	ldw	r2,-25384(gp)
  804ba4:	10800017 	ldw	r2,0(r2)
}
  804ba8:	e037883a 	mov	sp,fp
  804bac:	df000017 	ldw	fp,0(sp)
  804bb0:	dec00104 	addi	sp,sp,4
  804bb4:	f800283a 	ret

00804bb8 <setCurrentPlayerLives>:

//mutator: set lives to newNumLives
void setCurrentPlayerLives(int newNumLives){
  804bb8:	defffe04 	addi	sp,sp,-8
  804bbc:	df000115 	stw	fp,4(sp)
  804bc0:	df000104 	addi	fp,sp,4
  804bc4:	e13fff15 	stw	r4,-4(fp)
	gameScores->currentPlayerLives = newNumLives;
  804bc8:	d0e73617 	ldw	r3,-25384(gp)
  804bcc:	e0bfff17 	ldw	r2,-4(fp)
  804bd0:	18800115 	stw	r2,4(r3)
}
  804bd4:	e037883a 	mov	sp,fp
  804bd8:	df000017 	ldw	fp,0(sp)
  804bdc:	dec00104 	addi	sp,sp,4
  804be0:	f800283a 	ret

00804be4 <getCurrentPlayerLives>:

//accessor: get lives
int getCurrentPlayerLives(void) {
  804be4:	deffff04 	addi	sp,sp,-4
  804be8:	df000015 	stw	fp,0(sp)
  804bec:	d839883a 	mov	fp,sp
	return gameScores->currentPlayerLives;
  804bf0:	d0a73617 	ldw	r2,-25384(gp)
  804bf4:	10800117 	ldw	r2,4(r2)
}
  804bf8:	e037883a 	mov	sp,fp
  804bfc:	df000017 	ldw	fp,0(sp)
  804c00:	dec00104 	addi	sp,sp,4
  804c04:	f800283a 	ret

00804c08 <drawScore>:

//purpose: overlay current scoreboard values onto the screen.
void drawScore(void){
  804c08:	deffee04 	addi	sp,sp,-72
  804c0c:	dfc01115 	stw	ra,68(sp)
  804c10:	df001015 	stw	fp,64(sp)
  804c14:	dc400f15 	stw	r17,60(sp)
  804c18:	dc000e15 	stw	r16,56(sp)
  804c1c:	df000e04 	addi	fp,sp,56
	char scoreValues[32];// = malloc(sizeof(char) * NUMINITIALS); // scores wont exceed 10, and names are 3
	int i,j;
	int digit;
	int firstNonZeroDig;
	int xPos = 35;
  804c20:	008008c4 	movi	r2,35
  804c24:	e0bff315 	stw	r2,-52(fp)
	int ypos = 25;
  804c28:	00800644 	movi	r2,25
  804c2c:	e0bff215 	stw	r2,-56(fp)

	alt_up_char_buffer_string(char_buffer, "**HIGH SCORES**" , xPos, ypos - 2);
  804c30:	d1271617 	ldw	r4,-25512(gp)
  804c34:	e1bff317 	ldw	r6,-52(fp)
  804c38:	e0bff217 	ldw	r2,-56(fp)
  804c3c:	10bfff84 	addi	r2,r2,-2
  804c40:	100f883a 	mov	r7,r2
  804c44:	014020b4 	movhi	r5,130
  804c48:	29735a04 	addi	r5,r5,-12952
  804c4c:	0815a9c0 	call	815a9c <alt_up_char_buffer_string>

	for(i = 0; i < NUMSCORES; i++) {
  804c50:	e03ff715 	stw	zero,-36(fp)
  804c54:	00007006 	br	804e18 <drawScore+0x210>
		scoreValues[0] = gameScores->highScoreBoardInits[i][0];
  804c58:	d1273617 	ldw	r4,-25384(gp)
  804c5c:	e0fff717 	ldw	r3,-36(fp)
  804c60:	1805883a 	mov	r2,r3
  804c64:	1085883a 	add	r2,r2,r2
  804c68:	10c5883a 	add	r2,r2,r3
  804c6c:	1105883a 	add	r2,r2,r4
  804c70:	10800c04 	addi	r2,r2,48
  804c74:	10800003 	ldbu	r2,0(r2)
  804c78:	e0bff805 	stb	r2,-32(fp)
		scoreValues[1] = gameScores->highScoreBoardInits[i][1];
  804c7c:	d1273617 	ldw	r4,-25384(gp)
  804c80:	e0fff717 	ldw	r3,-36(fp)
  804c84:	1805883a 	mov	r2,r3
  804c88:	1085883a 	add	r2,r2,r2
  804c8c:	10c5883a 	add	r2,r2,r3
  804c90:	1105883a 	add	r2,r2,r4
  804c94:	10800c44 	addi	r2,r2,49
  804c98:	10800003 	ldbu	r2,0(r2)
  804c9c:	e0bff845 	stb	r2,-31(fp)
		scoreValues[2] = gameScores->highScoreBoardInits[i][2];
  804ca0:	d1273617 	ldw	r4,-25384(gp)
  804ca4:	e0fff717 	ldw	r3,-36(fp)
  804ca8:	1805883a 	mov	r2,r3
  804cac:	1085883a 	add	r2,r2,r2
  804cb0:	10c5883a 	add	r2,r2,r3
  804cb4:	1105883a 	add	r2,r2,r4
  804cb8:	10800c84 	addi	r2,r2,50
  804cbc:	10800003 	ldbu	r2,0(r2)
  804cc0:	e0bff885 	stb	r2,-30(fp)

		scoreValues[3] = ' ';
  804cc4:	00800804 	movi	r2,32
  804cc8:	e0bff8c5 	stb	r2,-29(fp)

		firstNonZeroDig = 0;
  804ccc:	e03ff415 	stw	zero,-48(fp)
		for(j = 0; j < MAXSCOREDIGITS; j++){
  804cd0:	e03ff615 	stw	zero,-40(fp)
  804cd4:	00004106 	br	804ddc <drawScore+0x1d4>
			digit = ((int)(gameScores->highScoreBoard[i] / pow(10,(MAXSCOREDIGITS - 1 - j))) % 10);
  804cd8:	d0e73617 	ldw	r3,-25384(gp)
  804cdc:	e0bff717 	ldw	r2,-36(fp)
  804ce0:	1085883a 	add	r2,r2,r2
  804ce4:	1085883a 	add	r2,r2,r2
  804ce8:	10c5883a 	add	r2,r2,r3
  804cec:	10800204 	addi	r2,r2,8
  804cf0:	11000017 	ldw	r4,0(r2)
  804cf4:	08094f80 	call	8094f8 <__floatsidf>
  804cf8:	1021883a 	mov	r16,r2
  804cfc:	1823883a 	mov	r17,r3
  804d00:	00c00244 	movi	r3,9
  804d04:	e0bff617 	ldw	r2,-40(fp)
  804d08:	1889c83a 	sub	r4,r3,r2
  804d0c:	08094f80 	call	8094f8 <__floatsidf>
  804d10:	100f883a 	mov	r7,r2
  804d14:	1811883a 	mov	r8,r3
  804d18:	0009883a 	mov	r4,zero
  804d1c:	01500934 	movhi	r5,16420
  804d20:	380d883a 	mov	r6,r7
  804d24:	400f883a 	mov	r7,r8
  804d28:	08065f00 	call	8065f0 <pow>
  804d2c:	100f883a 	mov	r7,r2
  804d30:	1811883a 	mov	r8,r3
  804d34:	8009883a 	mov	r4,r16
  804d38:	880b883a 	mov	r5,r17
  804d3c:	380d883a 	mov	r6,r7
  804d40:	400f883a 	mov	r7,r8
  804d44:	0808ff80 	call	808ff8 <__divdf3>
  804d48:	1009883a 	mov	r4,r2
  804d4c:	180b883a 	mov	r5,r3
  804d50:	2005883a 	mov	r2,r4
  804d54:	2807883a 	mov	r3,r5
  804d58:	1009883a 	mov	r4,r2
  804d5c:	180b883a 	mov	r5,r3
  804d60:	08095f00 	call	8095f0 <__fixdfsi>
  804d64:	1009883a 	mov	r4,r2
  804d68:	01400284 	movi	r5,10
  804d6c:	08097dc0 	call	8097dc <__modsi3>
  804d70:	e0bff515 	stw	r2,-44(fp)
			//printf("digit: %d\n", digit);
			if(digit == 0 && firstNonZeroDig == 0){
  804d74:	e0bff517 	ldw	r2,-44(fp)
  804d78:	1004c03a 	cmpne	r2,r2,zero
  804d7c:	10000a1e 	bne	r2,zero,804da8 <drawScore+0x1a0>
  804d80:	e0bff417 	ldw	r2,-48(fp)
  804d84:	1004c03a 	cmpne	r2,r2,zero
  804d88:	1000071e 	bne	r2,zero,804da8 <drawScore+0x1a0>
				scoreValues[4+j] = ' ';
  804d8c:	e0bff617 	ldw	r2,-40(fp)
  804d90:	10c00104 	addi	r3,r2,4
  804d94:	e0bff804 	addi	r2,fp,-32
  804d98:	10c7883a 	add	r3,r2,r3
  804d9c:	00800804 	movi	r2,32
  804da0:	18800005 	stb	r2,0(r3)

		firstNonZeroDig = 0;
		for(j = 0; j < MAXSCOREDIGITS; j++){
			digit = ((int)(gameScores->highScoreBoard[i] / pow(10,(MAXSCOREDIGITS - 1 - j))) % 10);
			//printf("digit: %d\n", digit);
			if(digit == 0 && firstNonZeroDig == 0){
  804da4:	00000a06 	br	804dd0 <drawScore+0x1c8>
				scoreValues[4+j] = ' ';
			} else {
				firstNonZeroDig = 1;
  804da8:	00800044 	movi	r2,1
  804dac:	e0bff415 	stw	r2,-48(fp)
				scoreValues[4+j] = (digit + '0');
  804db0:	e0bff617 	ldw	r2,-40(fp)
  804db4:	11000104 	addi	r4,r2,4
  804db8:	e0bff517 	ldw	r2,-44(fp)
  804dbc:	10800c04 	addi	r2,r2,48
  804dc0:	1007883a 	mov	r3,r2
  804dc4:	e0bff804 	addi	r2,fp,-32
  804dc8:	1105883a 	add	r2,r2,r4
  804dcc:	10c00005 	stb	r3,0(r2)
		scoreValues[2] = gameScores->highScoreBoardInits[i][2];

		scoreValues[3] = ' ';

		firstNonZeroDig = 0;
		for(j = 0; j < MAXSCOREDIGITS; j++){
  804dd0:	e0bff617 	ldw	r2,-40(fp)
  804dd4:	10800044 	addi	r2,r2,1
  804dd8:	e0bff615 	stw	r2,-40(fp)
  804ddc:	e0bff617 	ldw	r2,-40(fp)
  804de0:	10800290 	cmplti	r2,r2,10
  804de4:	103fbc1e 	bne	r2,zero,804cd8 <drawScore+0xd0>
			} else {
				firstNonZeroDig = 1;
				scoreValues[4+j] = (digit + '0');
			}
		}
		scoreValues[4+MAXSCOREDIGITS] = '\0';
  804de8:	e03ffb85 	stb	zero,-18(fp)

		alt_up_char_buffer_string(char_buffer, scoreValues , xPos, ypos + i);
  804dec:	d1271617 	ldw	r4,-25512(gp)
  804df0:	e1bff317 	ldw	r6,-52(fp)
  804df4:	e0fff217 	ldw	r3,-56(fp)
  804df8:	e0bff717 	ldw	r2,-36(fp)
  804dfc:	1885883a 	add	r2,r3,r2
  804e00:	100f883a 	mov	r7,r2
  804e04:	e17ff804 	addi	r5,fp,-32
  804e08:	0815a9c0 	call	815a9c <alt_up_char_buffer_string>
	int xPos = 35;
	int ypos = 25;

	alt_up_char_buffer_string(char_buffer, "**HIGH SCORES**" , xPos, ypos - 2);

	for(i = 0; i < NUMSCORES; i++) {
  804e0c:	e0bff717 	ldw	r2,-36(fp)
  804e10:	10800044 	addi	r2,r2,1
  804e14:	e0bff715 	stw	r2,-36(fp)
  804e18:	e0bff717 	ldw	r2,-36(fp)
  804e1c:	10800290 	cmplti	r2,r2,10
  804e20:	103f8d1e 	bne	r2,zero,804c58 <drawScore+0x50>
		}
		scoreValues[4+MAXSCOREDIGITS] = '\0';

		alt_up_char_buffer_string(char_buffer, scoreValues , xPos, ypos + i);
	}
}
  804e24:	e037883a 	mov	sp,fp
  804e28:	dfc00317 	ldw	ra,12(sp)
  804e2c:	df000217 	ldw	fp,8(sp)
  804e30:	dc400117 	ldw	r17,4(sp)
  804e34:	dc000017 	ldw	r16,0(sp)
  804e38:	dec00404 	addi	sp,sp,16
  804e3c:	f800283a 	ret

00804e40 <clearScore>:

void clearScore(void) {
  804e40:	defffe04 	addi	sp,sp,-8
  804e44:	dfc00115 	stw	ra,4(sp)
  804e48:	df000015 	stw	fp,0(sp)
  804e4c:	d839883a 	mov	fp,sp
	alt_up_char_buffer_clear(char_buffer);
  804e50:	d1271617 	ldw	r4,-25512(gp)
  804e54:	0815bb00 	call	815bb0 <alt_up_char_buffer_clear>
}
  804e58:	e037883a 	mov	sp,fp
  804e5c:	dfc00117 	ldw	ra,4(sp)
  804e60:	df000017 	ldw	fp,0(sp)
  804e64:	dec00204 	addi	sp,sp,8
  804e68:	f800283a 	ret

00804e6c <drawInGameInfo>:

//draws current lives and playerScore
void drawInGameInfo(void) {
  804e6c:	defff204 	addi	sp,sp,-56
  804e70:	dfc00d15 	stw	ra,52(sp)
  804e74:	df000c15 	stw	fp,48(sp)
  804e78:	dc400b15 	stw	r17,44(sp)
  804e7c:	dc000a15 	stw	r16,40(sp)
  804e80:	df000a04 	addi	fp,sp,40
	char livesLeft[2] = {' ', '\0'};
  804e84:	00800804 	movi	r2,32
  804e88:	e0bffc05 	stb	r2,-16(fp)
  804e8c:	e03ffc45 	stb	zero,-15(fp)
	livesLeft[0] = (getCurrentPlayerLives() + '0');
  804e90:	0804be40 	call	804be4 <getCurrentPlayerLives>
  804e94:	10800c04 	addi	r2,r2,48
  804e98:	e0bffc05 	stb	r2,-16(fp)
	int xPos = 1;
  804e9c:	00800044 	movi	r2,1
  804ea0:	e0bffb15 	stw	r2,-20(fp)
	int yPos = 1;
  804ea4:	00800044 	movi	r2,1
  804ea8:	e0bffa15 	stw	r2,-24(fp)
	int i;
	int digit = 0;
  804eac:	e03ff815 	stw	zero,-32(fp)
	int firstDigitFound = 0;
  804eb0:	e03ff715 	stw	zero,-36(fp)
	int currentScore = getCurrentPlayerScore();
  804eb4:	0804b940 	call	804b94 <getCurrentPlayerScore>
  804eb8:	e0bff615 	stw	r2,-40(fp)
	char currentCharScore[MAXSCOREDIGITS + 1];
	currentCharScore[MAXSCOREDIGITS] = '\0'; //end of string
  804ebc:	e03fff05 	stb	zero,-4(fp)

	//populate currentCharScore;
	for(i = 0; i < MAXSCOREDIGITS; i++) {
  804ec0:	e03ff915 	stw	zero,-28(fp)
  804ec4:	00003e06 	br	804fc0 <drawInGameInfo+0x154>
		digit = ((int)(currentScore / pow(10,(MAXSCOREDIGITS - 1 - i)))%10);
  804ec8:	e13ff617 	ldw	r4,-40(fp)
  804ecc:	08094f80 	call	8094f8 <__floatsidf>
  804ed0:	1021883a 	mov	r16,r2
  804ed4:	1823883a 	mov	r17,r3
  804ed8:	00c00244 	movi	r3,9
  804edc:	e0bff917 	ldw	r2,-28(fp)
  804ee0:	1889c83a 	sub	r4,r3,r2
  804ee4:	08094f80 	call	8094f8 <__floatsidf>
  804ee8:	100f883a 	mov	r7,r2
  804eec:	1811883a 	mov	r8,r3
  804ef0:	0009883a 	mov	r4,zero
  804ef4:	01500934 	movhi	r5,16420
  804ef8:	380d883a 	mov	r6,r7
  804efc:	400f883a 	mov	r7,r8
  804f00:	08065f00 	call	8065f0 <pow>
  804f04:	100f883a 	mov	r7,r2
  804f08:	1811883a 	mov	r8,r3
  804f0c:	8009883a 	mov	r4,r16
  804f10:	880b883a 	mov	r5,r17
  804f14:	380d883a 	mov	r6,r7
  804f18:	400f883a 	mov	r7,r8
  804f1c:	0808ff80 	call	808ff8 <__divdf3>
  804f20:	1009883a 	mov	r4,r2
  804f24:	180b883a 	mov	r5,r3
  804f28:	2005883a 	mov	r2,r4
  804f2c:	2807883a 	mov	r3,r5
  804f30:	1009883a 	mov	r4,r2
  804f34:	180b883a 	mov	r5,r3
  804f38:	08095f00 	call	8095f0 <__fixdfsi>
  804f3c:	1009883a 	mov	r4,r2
  804f40:	01400284 	movi	r5,10
  804f44:	08097dc0 	call	8097dc <__modsi3>
  804f48:	e0bff815 	stw	r2,-32(fp)
		currentCharScore[i] = '0';
  804f4c:	e0fff917 	ldw	r3,-28(fp)
  804f50:	e0bffc84 	addi	r2,fp,-14
  804f54:	10c7883a 	add	r3,r2,r3
  804f58:	00800c04 	movi	r2,48
  804f5c:	18800005 	stb	r2,0(r3)
		if(digit != 0 && firstDigitFound == 0) {
  804f60:	e0bff817 	ldw	r2,-32(fp)
  804f64:	1005003a 	cmpeq	r2,r2,zero
  804f68:	1000051e 	bne	r2,zero,804f80 <drawInGameInfo+0x114>
  804f6c:	e0bff717 	ldw	r2,-36(fp)
  804f70:	1004c03a 	cmpne	r2,r2,zero
  804f74:	1000021e 	bne	r2,zero,804f80 <drawInGameInfo+0x114>
			firstDigitFound = 1;
  804f78:	00800044 	movi	r2,1
  804f7c:	e0bff715 	stw	r2,-36(fp)
		}
		if(firstDigitFound == 1 || i == (MAXSCOREDIGITS - 1)) {
  804f80:	e0bff717 	ldw	r2,-36(fp)
  804f84:	10800060 	cmpeqi	r2,r2,1
  804f88:	1000031e 	bne	r2,zero,804f98 <drawInGameInfo+0x12c>
  804f8c:	e0bff917 	ldw	r2,-28(fp)
  804f90:	10800258 	cmpnei	r2,r2,9
  804f94:	1000071e 	bne	r2,zero,804fb4 <drawInGameInfo+0x148>
			currentCharScore[i] = (digit + '0');
  804f98:	e13ff917 	ldw	r4,-28(fp)
  804f9c:	e0bff817 	ldw	r2,-32(fp)
  804fa0:	10800c04 	addi	r2,r2,48
  804fa4:	1007883a 	mov	r3,r2
  804fa8:	e0bffc84 	addi	r2,fp,-14
  804fac:	1105883a 	add	r2,r2,r4
  804fb0:	10c00005 	stb	r3,0(r2)
	int currentScore = getCurrentPlayerScore();
	char currentCharScore[MAXSCOREDIGITS + 1];
	currentCharScore[MAXSCOREDIGITS] = '\0'; //end of string

	//populate currentCharScore;
	for(i = 0; i < MAXSCOREDIGITS; i++) {
  804fb4:	e0bff917 	ldw	r2,-28(fp)
  804fb8:	10800044 	addi	r2,r2,1
  804fbc:	e0bff915 	stw	r2,-28(fp)
  804fc0:	e0bff917 	ldw	r2,-28(fp)
  804fc4:	10800290 	cmplti	r2,r2,10
  804fc8:	103fbf1e 	bne	r2,zero,804ec8 <drawInGameInfo+0x5c>
			currentCharScore[i] = (digit + '0');
		}
	}

	//print info to screen
	if(livesLeft[0] == '1') {
  804fcc:	e0bffc03 	ldbu	r2,-16(fp)
  804fd0:	10803fcc 	andi	r2,r2,255
  804fd4:	1080201c 	xori	r2,r2,128
  804fd8:	10bfe004 	addi	r2,r2,-128
  804fdc:	10800c58 	cmpnei	r2,r2,49
  804fe0:	1000071e 	bne	r2,zero,805000 <drawInGameInfo+0x194>
		alt_up_char_buffer_string(char_buffer, "Lives: YOLO" , xPos, yPos);
  804fe4:	d1271617 	ldw	r4,-25512(gp)
  804fe8:	e1bffb17 	ldw	r6,-20(fp)
  804fec:	e1fffa17 	ldw	r7,-24(fp)
  804ff0:	014020b4 	movhi	r5,130
  804ff4:	29735e04 	addi	r5,r5,-12936
  804ff8:	0815a9c0 	call	815a9c <alt_up_char_buffer_string>
  804ffc:	00001a06 	br	805068 <drawInGameInfo+0x1fc>

	} else if(livesLeft[0] == '0') {
  805000:	e0bffc03 	ldbu	r2,-16(fp)
  805004:	10803fcc 	andi	r2,r2,255
  805008:	1080201c 	xori	r2,r2,128
  80500c:	10bfe004 	addi	r2,r2,-128
  805010:	10800c18 	cmpnei	r2,r2,48
  805014:	1000071e 	bne	r2,zero,805034 <drawInGameInfo+0x1c8>
		alt_up_char_buffer_string(char_buffer, "Lives: DEAD" , xPos, yPos);
  805018:	d1271617 	ldw	r4,-25512(gp)
  80501c:	e1bffb17 	ldw	r6,-20(fp)
  805020:	e1fffa17 	ldw	r7,-24(fp)
  805024:	014020b4 	movhi	r5,130
  805028:	29736104 	addi	r5,r5,-12924
  80502c:	0815a9c0 	call	815a9c <alt_up_char_buffer_string>
  805030:	00000d06 	br	805068 <drawInGameInfo+0x1fc>
	} else {
		alt_up_char_buffer_string(char_buffer, "Lives: " , xPos, yPos);
  805034:	d1271617 	ldw	r4,-25512(gp)
  805038:	e1bffb17 	ldw	r6,-20(fp)
  80503c:	e1fffa17 	ldw	r7,-24(fp)
  805040:	014020b4 	movhi	r5,130
  805044:	29736404 	addi	r5,r5,-12912
  805048:	0815a9c0 	call	815a9c <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buffer, livesLeft , xPos + 7, yPos);
  80504c:	d1271617 	ldw	r4,-25512(gp)
  805050:	e0bffb17 	ldw	r2,-20(fp)
  805054:	108001c4 	addi	r2,r2,7
  805058:	100d883a 	mov	r6,r2
  80505c:	e1fffa17 	ldw	r7,-24(fp)
  805060:	e17ffc04 	addi	r5,fp,-16
  805064:	0815a9c0 	call	815a9c <alt_up_char_buffer_string>
	}
	alt_up_char_buffer_string(char_buffer, "Score: " , xPos, yPos+1);
  805068:	d1271617 	ldw	r4,-25512(gp)
  80506c:	e1bffb17 	ldw	r6,-20(fp)
  805070:	e0bffa17 	ldw	r2,-24(fp)
  805074:	10800044 	addi	r2,r2,1
  805078:	100f883a 	mov	r7,r2
  80507c:	014020b4 	movhi	r5,130
  805080:	29736604 	addi	r5,r5,-12904
  805084:	0815a9c0 	call	815a9c <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, currentCharScore , xPos + 7, yPos+1);
  805088:	d1271617 	ldw	r4,-25512(gp)
  80508c:	e0bffb17 	ldw	r2,-20(fp)
  805090:	108001c4 	addi	r2,r2,7
  805094:	100d883a 	mov	r6,r2
  805098:	e0bffa17 	ldw	r2,-24(fp)
  80509c:	10800044 	addi	r2,r2,1
  8050a0:	100f883a 	mov	r7,r2
  8050a4:	e17ffc84 	addi	r5,fp,-14
  8050a8:	0815a9c0 	call	815a9c <alt_up_char_buffer_string>

	return;
}
  8050ac:	e037883a 	mov	sp,fp
  8050b0:	dfc00317 	ldw	ra,12(sp)
  8050b4:	df000217 	ldw	fp,8(sp)
  8050b8:	dc400117 	ldw	r17,4(sp)
  8050bc:	dc000017 	ldw	r16,0(sp)
  8050c0:	dec00404 	addi	sp,sp,16
  8050c4:	f800283a 	ret

008050c8 <openSdCard>:
#include <stdio.h>
#include <stdlib.h>
#include "sd_card.h"

int openSdCard(){
  8050c8:	defffd04 	addi	sp,sp,-12
  8050cc:	dfc00215 	stw	ra,8(sp)
  8050d0:	df000115 	stw	fp,4(sp)
  8050d4:	df000104 	addi	fp,sp,4
	sdDev = alt_up_sd_card_open_dev("/dev/Altera_UP_SD_Card_Avalon_Interface_0");
  8050d8:	010020b4 	movhi	r4,130
  8050dc:	21336804 	addi	r4,r4,-12896
  8050e0:	0819ee00 	call	819ee0 <alt_up_sd_card_open_dev>
  8050e4:	d0a70f15 	stw	r2,-25540(gp)

	if(sdDev != NULL && alt_up_sd_card_is_FAT16()){
  8050e8:	d0a70f17 	ldw	r2,-25540(gp)
  8050ec:	1005003a 	cmpeq	r2,r2,zero
  8050f0:	1000051e 	bne	r2,zero,805108 <openSdCard+0x40>
  8050f4:	081a06c0 	call	81a06c <alt_up_sd_card_is_FAT16>
  8050f8:	1005003a 	cmpeq	r2,r2,zero
  8050fc:	1000021e 	bne	r2,zero,805108 <openSdCard+0x40>
		return 0;
  805100:	e03fff15 	stw	zero,-4(fp)
  805104:	00000206 	br	805110 <openSdCard+0x48>
	} else {
		return -1;
  805108:	00bfffc4 	movi	r2,-1
  80510c:	e0bfff15 	stw	r2,-4(fp)
  805110:	e0bfff17 	ldw	r2,-4(fp)
	}
}
  805114:	e037883a 	mov	sp,fp
  805118:	dfc00117 	ldw	ra,4(sp)
  80511c:	df000017 	ldw	fp,0(sp)
  805120:	dec00204 	addi	sp,sp,8
  805124:	f800283a 	ret

00805128 <openFile>:

short int openFile(char *fileName) {
  805128:	defffd04 	addi	sp,sp,-12
  80512c:	dfc00215 	stw	ra,8(sp)
  805130:	df000115 	stw	fp,4(sp)
  805134:	df000104 	addi	fp,sp,4
  805138:	e13fff15 	stw	r4,-4(fp)
	return alt_up_sd_card_fopen(fileName, 0);
  80513c:	e13fff17 	ldw	r4,-4(fp)
  805140:	000b883a 	mov	r5,zero
  805144:	081a5640 	call	81a564 <alt_up_sd_card_fopen>
  805148:	10bfffcc 	andi	r2,r2,65535
  80514c:	10a0001c 	xori	r2,r2,32768
  805150:	10a00004 	addi	r2,r2,-32768
}
  805154:	e037883a 	mov	sp,fp
  805158:	dfc00117 	ldw	ra,4(sp)
  80515c:	df000017 	ldw	fp,0(sp)
  805160:	dec00204 	addi	sp,sp,8
  805164:	f800283a 	ret

00805168 <closeFile>:

int closeFile(short int fh) {
  805168:	defffd04 	addi	sp,sp,-12
  80516c:	dfc00215 	stw	ra,8(sp)
  805170:	df000115 	stw	fp,4(sp)
  805174:	df000104 	addi	fp,sp,4
  805178:	e13fff0d 	sth	r4,-4(fp)
	return alt_up_sd_card_fclose(fh);
  80517c:	e13fff0f 	ldh	r4,-4(fp)
  805180:	081b3e00 	call	81b3e0 <alt_up_sd_card_fclose>
}
  805184:	e037883a 	mov	sp,fp
  805188:	dfc00117 	ldw	ra,4(sp)
  80518c:	df000017 	ldw	fp,0(sp)
  805190:	dec00204 	addi	sp,sp,8
  805194:	f800283a 	ret

00805198 <readByte>:

unsigned char readByte(short int fh) {
  805198:	defffd04 	addi	sp,sp,-12
  80519c:	dfc00215 	stw	ra,8(sp)
  8051a0:	df000115 	stw	fp,4(sp)
  8051a4:	df000104 	addi	fp,sp,4
  8051a8:	e13fff0d 	sth	r4,-4(fp)
	return (unsigned char) alt_up_sd_card_read(fh);
  8051ac:	e13fff0f 	ldh	r4,-4(fp)
  8051b0:	081aa280 	call	81aa28 <alt_up_sd_card_read>
  8051b4:	10803fcc 	andi	r2,r2,255
}
  8051b8:	e037883a 	mov	sp,fp
  8051bc:	dfc00117 	ldw	ra,4(sp)
  8051c0:	df000017 	ldw	fp,0(sp)
  8051c4:	dec00204 	addi	sp,sp,8
  8051c8:	f800283a 	ret

008051cc <readWord>:
short int readWord(short int fh) {
  8051cc:	defffb04 	addi	sp,sp,-20
  8051d0:	dfc00415 	stw	ra,16(sp)
  8051d4:	df000315 	stw	fp,12(sp)
  8051d8:	df000304 	addi	fp,sp,12
  8051dc:	e13ffe0d 	sth	r4,-8(fp)
	short int byte1, byte2;

	byte1 = alt_up_sd_card_read(fh);
  8051e0:	e13ffe0f 	ldh	r4,-8(fp)
  8051e4:	081aa280 	call	81aa28 <alt_up_sd_card_read>
  8051e8:	e0bffd8d 	sth	r2,-10(fp)
	byte2 = alt_up_sd_card_read(fh);
  8051ec:	e13ffe0f 	ldh	r4,-8(fp)
  8051f0:	081aa280 	call	81aa28 <alt_up_sd_card_read>
  8051f4:	e0bffd0d 	sth	r2,-12(fp)

	if (byte1 == -1 || byte2 == -1)
  8051f8:	e0bffd8f 	ldh	r2,-10(fp)
  8051fc:	10bfffe0 	cmpeqi	r2,r2,-1
  805200:	1000031e 	bne	r2,zero,805210 <readWord+0x44>
  805204:	e0bffd0f 	ldh	r2,-12(fp)
  805208:	10bfffd8 	cmpnei	r2,r2,-1
  80520c:	1000031e 	bne	r2,zero,80521c <readWord+0x50>
		return -1;
  805210:	00bfffc4 	movi	r2,-1
  805214:	e0bfff15 	stw	r2,-4(fp)
  805218:	00000b06 	br	805248 <readWord+0x7c>

	return ((unsigned short int)byte2 << 8) | ((unsigned short int)byte1 & 0x00FF);
  80521c:	e0bffd0b 	ldhu	r2,-12(fp)
  805220:	10bfffcc 	andi	r2,r2,65535
  805224:	1004923a 	slli	r2,r2,8
  805228:	1007883a 	mov	r3,r2
  80522c:	e0bffd8b 	ldhu	r2,-10(fp)
  805230:	10803fcc 	andi	r2,r2,255
  805234:	1884b03a 	or	r2,r3,r2
  805238:	10bfffcc 	andi	r2,r2,65535
  80523c:	10a0001c 	xori	r2,r2,32768
  805240:	10a00004 	addi	r2,r2,-32768
  805244:	e0bfff15 	stw	r2,-4(fp)
  805248:	e0bfff17 	ldw	r2,-4(fp)
}
  80524c:	e037883a 	mov	sp,fp
  805250:	dfc00117 	ldw	ra,4(sp)
  805254:	df000017 	ldw	fp,0(sp)
  805258:	dec00204 	addi	sp,sp,8
  80525c:	f800283a 	ret

00805260 <readDWord>:

int readDWord(short int fh) {
  805260:	defffa04 	addi	sp,sp,-24
  805264:	dfc00515 	stw	ra,20(sp)
  805268:	df000415 	stw	fp,16(sp)
  80526c:	df000404 	addi	fp,sp,16
  805270:	e13ffe0d 	sth	r4,-8(fp)
	short int byte1, byte2, byte3, byte4;

	byte1 = alt_up_sd_card_read(fh);
  805274:	e13ffe0f 	ldh	r4,-8(fp)
  805278:	081aa280 	call	81aa28 <alt_up_sd_card_read>
  80527c:	e0bffd8d 	sth	r2,-10(fp)
	byte2 = alt_up_sd_card_read(fh);
  805280:	e13ffe0f 	ldh	r4,-8(fp)
  805284:	081aa280 	call	81aa28 <alt_up_sd_card_read>
  805288:	e0bffd0d 	sth	r2,-12(fp)
	byte3 = alt_up_sd_card_read(fh);
  80528c:	e13ffe0f 	ldh	r4,-8(fp)
  805290:	081aa280 	call	81aa28 <alt_up_sd_card_read>
  805294:	e0bffc8d 	sth	r2,-14(fp)
	byte4 = alt_up_sd_card_read(fh);
  805298:	e13ffe0f 	ldh	r4,-8(fp)
  80529c:	081aa280 	call	81aa28 <alt_up_sd_card_read>
  8052a0:	e0bffc0d 	sth	r2,-16(fp)

	if (byte1 == -1 || byte2 == -1 || byte3 == -1 || byte4 == -1)
  8052a4:	e0bffd8f 	ldh	r2,-10(fp)
  8052a8:	10bfffe0 	cmpeqi	r2,r2,-1
  8052ac:	1000091e 	bne	r2,zero,8052d4 <readDWord+0x74>
  8052b0:	e0bffd0f 	ldh	r2,-12(fp)
  8052b4:	10bfffe0 	cmpeqi	r2,r2,-1
  8052b8:	1000061e 	bne	r2,zero,8052d4 <readDWord+0x74>
  8052bc:	e0bffc8f 	ldh	r2,-14(fp)
  8052c0:	10bfffe0 	cmpeqi	r2,r2,-1
  8052c4:	1000031e 	bne	r2,zero,8052d4 <readDWord+0x74>
  8052c8:	e0bffc0f 	ldh	r2,-16(fp)
  8052cc:	10bfffd8 	cmpnei	r2,r2,-1
  8052d0:	1000031e 	bne	r2,zero,8052e0 <readDWord+0x80>
			return -1;
  8052d4:	00bfffc4 	movi	r2,-1
  8052d8:	e0bfff15 	stw	r2,-4(fp)
  8052dc:	00000f06 	br	80531c <readDWord+0xbc>

	return ((unsigned short int)byte4 << 24) | ((unsigned short int)byte3 << 16) | ((unsigned short int)byte2 << 8) | (unsigned short int)byte1;
  8052e0:	e0bffc0b 	ldhu	r2,-16(fp)
  8052e4:	10bfffcc 	andi	r2,r2,65535
  8052e8:	1006963a 	slli	r3,r2,24
  8052ec:	e0bffc8b 	ldhu	r2,-14(fp)
  8052f0:	10bfffcc 	andi	r2,r2,65535
  8052f4:	1004943a 	slli	r2,r2,16
  8052f8:	1886b03a 	or	r3,r3,r2
  8052fc:	e0bffd0b 	ldhu	r2,-12(fp)
  805300:	10bfffcc 	andi	r2,r2,65535
  805304:	1004923a 	slli	r2,r2,8
  805308:	1886b03a 	or	r3,r3,r2
  80530c:	e0bffd8b 	ldhu	r2,-10(fp)
  805310:	10bfffcc 	andi	r2,r2,65535
  805314:	1886b03a 	or	r3,r3,r2
  805318:	e0ffff15 	stw	r3,-4(fp)
  80531c:	e0bfff17 	ldw	r2,-4(fp)
}
  805320:	e037883a 	mov	sp,fp
  805324:	dfc00117 	ldw	ra,4(sp)
  805328:	df000017 	ldw	fp,0(sp)
  80532c:	dec00204 	addi	sp,sp,8
  805330:	f800283a 	ret

00805334 <getWavFileLength>:

unsigned int getWavFileLength(char *fileName) { // TBD: This function MUST be fixed - it currently returns an incorrect value, becuase - vals dont always mean it's done.
  805334:	defffb04 	addi	sp,sp,-20
  805338:	dfc00415 	stw	ra,16(sp)
  80533c:	df000315 	stw	fp,12(sp)
  805340:	df000304 	addi	fp,sp,12
  805344:	e13fff15 	stw	r4,-4(fp)
	unsigned int fileLength = 0;
  805348:	e03ffe15 	stw	zero,-8(fp)

	short int fileHandle = openFile(fileName);
  80534c:	e13fff17 	ldw	r4,-4(fp)
  805350:	08051280 	call	805128 <openFile>
  805354:	e0bffd8d 	sth	r2,-10(fp)
	if (fileHandle == -1) {
  805358:	e0bffd8f 	ldh	r2,-10(fp)
  80535c:	10bfffd8 	cmpnei	r2,r2,-1
  805360:	1000041e 	bne	r2,zero,805374 <getWavFileLength+0x40>
		printf("Error occurred, unable to open file in 'getFileLength' with name: %s", fileName);
  805364:	010020b4 	movhi	r4,130
  805368:	21337304 	addi	r4,r4,-12852
  80536c:	e17fff17 	ldw	r5,-4(fp)
  805370:	080a8180 	call	80a818 <printf>
	}

	readPastWavHeader(fileHandle); // to get wav file length, dont bypass header i think..
  805374:	e13ffd8f 	ldh	r4,-10(fp)
  805378:	08053ec0 	call	8053ec <readPastWavHeader>

	short int wordRead = readWord(fileHandle);
  80537c:	e13ffd8f 	ldh	r4,-10(fp)
  805380:	08051cc0 	call	8051cc <readWord>
  805384:	e0bffd0d 	sth	r2,-12(fp)
	//unsigned char firstByte = 0x0000FFFF | wordRead;
	//unsigned char secondByte = 0x0000FFFF | (wordRead >> 8);
	while ((short int)wordRead >= 0) {
  805388:	00000606 	br	8053a4 <getWavFileLength+0x70>
		//printf("%c", (unsigned char)byteRead);
		fileLength += 2;
  80538c:	e0bffe17 	ldw	r2,-8(fp)
  805390:	10800084 	addi	r2,r2,2
  805394:	e0bffe15 	stw	r2,-8(fp)
		wordRead = readWord(fileHandle);
  805398:	e13ffd8f 	ldh	r4,-10(fp)
  80539c:	08051cc0 	call	8051cc <readWord>
  8053a0:	e0bffd0d 	sth	r2,-12(fp)
	readPastWavHeader(fileHandle); // to get wav file length, dont bypass header i think..

	short int wordRead = readWord(fileHandle);
	//unsigned char firstByte = 0x0000FFFF | wordRead;
	//unsigned char secondByte = 0x0000FFFF | (wordRead >> 8);
	while ((short int)wordRead >= 0) {
  8053a4:	e0bffd0f 	ldh	r2,-12(fp)
  8053a8:	1004403a 	cmpge	r2,r2,zero
  8053ac:	103ff71e 	bne	r2,zero,80538c <getWavFileLength+0x58>
		//printf("%c", (unsigned char)byteRead);
		fileLength += 2;
		wordRead = readWord(fileHandle);
	}
	if ((short int)wordRead <= -1) {
  8053b0:	e0bffd0f 	ldh	r2,-12(fp)
  8053b4:	1004403a 	cmpge	r2,r2,zero
  8053b8:	1000041e 	bne	r2,zero,8053cc <getWavFileLength+0x98>
		printf("Error reading bytes from %s\n", fileName);
  8053bc:	010020b4 	movhi	r4,130
  8053c0:	21338504 	addi	r4,r4,-12780
  8053c4:	e17fff17 	ldw	r5,-4(fp)
  8053c8:	080a8180 	call	80a818 <printf>
	}

	closeFile(fileHandle);
  8053cc:	e13ffd8f 	ldh	r4,-10(fp)
  8053d0:	08051680 	call	805168 <closeFile>
	return fileLength;
  8053d4:	e0bffe17 	ldw	r2,-8(fp)
}
  8053d8:	e037883a 	mov	sp,fp
  8053dc:	dfc00117 	ldw	ra,4(sp)
  8053e0:	df000017 	ldw	fp,0(sp)
  8053e4:	dec00204 	addi	sp,sp,8
  8053e8:	f800283a 	ret

008053ec <readPastWavHeader>:

void readPastWavHeader(short int handle) {
  8053ec:	defffc04 	addi	sp,sp,-16
  8053f0:	dfc00315 	stw	ra,12(sp)
  8053f4:	df000215 	stw	fp,8(sp)
  8053f8:	df000204 	addi	fp,sp,8
  8053fc:	e13fff0d 	sth	r4,-4(fp)
	int i;
	for (i = 0; i < 44; i++) {
  805400:	e03ffe15 	stw	zero,-8(fp)
  805404:	00000506 	br	80541c <readPastWavHeader+0x30>
		readByte(handle);
  805408:	e13fff0f 	ldh	r4,-4(fp)
  80540c:	08051980 	call	805198 <readByte>
	return fileLength;
}

void readPastWavHeader(short int handle) {
	int i;
	for (i = 0; i < 44; i++) {
  805410:	e0bffe17 	ldw	r2,-8(fp)
  805414:	10800044 	addi	r2,r2,1
  805418:	e0bffe15 	stw	r2,-8(fp)
  80541c:	e0bffe17 	ldw	r2,-8(fp)
  805420:	10800b10 	cmplti	r2,r2,44
  805424:	103ff81e 	bne	r2,zero,805408 <readPastWavHeader+0x1c>
		readByte(handle);
	}
}
  805428:	e037883a 	mov	sp,fp
  80542c:	dfc00117 	ldw	ra,4(sp)
  805430:	df000017 	ldw	fp,0(sp)
  805434:	dec00204 	addi	sp,sp,8
  805438:	f800283a 	ret

0080543c <initSharks>:
Shark *sharkList = NULL;
Shark *deadSharkList = NULL;
unsigned int sharkCount = 0;
Shark sharkArray[NUM_SHARKS];

void initSharks(void) {
  80543c:	defffd04 	addi	sp,sp,-12
  805440:	df000215 	stw	fp,8(sp)
  805444:	df000204 	addi	fp,sp,8
	int i;
	Shark *cursor;
	sharkList = NULL;
  805448:	d0273715 	stw	zero,-25380(gp)
	deadSharkList = NULL;
  80544c:	d0273815 	stw	zero,-25376(gp)
	sharkCount = 0;
  805450:	d0273915 	stw	zero,-25372(gp)
	for (i = 0; i < NUM_SHARKS; i++) {
  805454:	e03fff15 	stw	zero,-4(fp)
  805458:	00001506 	br	8054b0 <initSharks+0x74>
		cursor = &(sharkArray[i]);
  80545c:	e0bfff17 	ldw	r2,-4(fp)
  805460:	10800b24 	muli	r2,r2,44
  805464:	1007883a 	mov	r3,r2
  805468:	008020f4 	movhi	r2,131
  80546c:	10a9e304 	addi	r2,r2,-22644
  805470:	1885883a 	add	r2,r3,r2
  805474:	e0bffe15 	stw	r2,-8(fp)
		cursor->state = DEAD;
  805478:	e0fffe17 	ldw	r3,-8(fp)
  80547c:	008000c4 	movi	r2,3
  805480:	18800a0d 	sth	r2,40(r3)
		cursor->next = NULL;
  805484:	e0bffe17 	ldw	r2,-8(fp)
  805488:	10000615 	stw	zero,24(r2)
		cursor->prev = NULL;
  80548c:	e0bffe17 	ldw	r2,-8(fp)
  805490:	10000715 	stw	zero,28(r2)
		cursor->displacement = NULL;
  805494:	e0bffe17 	ldw	r2,-8(fp)
  805498:	10000815 	stw	zero,32(r2)
		cursor->entranceCount = 0;
  80549c:	e0bffe17 	ldw	r2,-8(fp)
  8054a0:	1000098d 	sth	zero,38(r2)
	int i;
	Shark *cursor;
	sharkList = NULL;
	deadSharkList = NULL;
	sharkCount = 0;
	for (i = 0; i < NUM_SHARKS; i++) {
  8054a4:	e0bfff17 	ldw	r2,-4(fp)
  8054a8:	10800044 	addi	r2,r2,1
  8054ac:	e0bfff15 	stw	r2,-4(fp)
  8054b0:	e0bfff17 	ldw	r2,-4(fp)
  8054b4:	10800810 	cmplti	r2,r2,32
  8054b8:	103fe81e 	bne	r2,zero,80545c <initSharks+0x20>
		cursor->next = NULL;
		cursor->prev = NULL;
		cursor->displacement = NULL;
		cursor->entranceCount = 0;
	}
}
  8054bc:	e037883a 	mov	sp,fp
  8054c0:	df000017 	ldw	fp,0(sp)
  8054c4:	dec00104 	addi	sp,sp,4
  8054c8:	f800283a 	ret

008054cc <getFreeShark>:

Shark *getFreeShark(void) {
  8054cc:	defffd04 	addi	sp,sp,-12
  8054d0:	df000215 	stw	fp,8(sp)
  8054d4:	df000204 	addi	fp,sp,8
	int i;
	for (i = 0; i < NUM_SHARKS; i++) {
  8054d8:	e03ffe15 	stw	zero,-8(fp)
  8054dc:	00001706 	br	80553c <getFreeShark+0x70>
		if (sharkArray[i].state == DEAD) {
  8054e0:	e0bffe17 	ldw	r2,-8(fp)
  8054e4:	00c020f4 	movhi	r3,131
  8054e8:	18e9e304 	addi	r3,r3,-22644
  8054ec:	10800b24 	muli	r2,r2,44
  8054f0:	10c5883a 	add	r2,r2,r3
  8054f4:	10800a04 	addi	r2,r2,40
  8054f8:	1080000b 	ldhu	r2,0(r2)
  8054fc:	10bfffcc 	andi	r2,r2,65535
  805500:	10a0001c 	xori	r2,r2,32768
  805504:	10a00004 	addi	r2,r2,-32768
  805508:	108000d8 	cmpnei	r2,r2,3
  80550c:	1000081e 	bne	r2,zero,805530 <getFreeShark+0x64>
			return &(sharkArray[i]);
  805510:	e0bffe17 	ldw	r2,-8(fp)
  805514:	10800b24 	muli	r2,r2,44
  805518:	1007883a 	mov	r3,r2
  80551c:	008020f4 	movhi	r2,131
  805520:	10a9e304 	addi	r2,r2,-22644
  805524:	1887883a 	add	r3,r3,r2
  805528:	e0ffff15 	stw	r3,-4(fp)
  80552c:	00000706 	br	80554c <getFreeShark+0x80>
	}
}

Shark *getFreeShark(void) {
	int i;
	for (i = 0; i < NUM_SHARKS; i++) {
  805530:	e0bffe17 	ldw	r2,-8(fp)
  805534:	10800044 	addi	r2,r2,1
  805538:	e0bffe15 	stw	r2,-8(fp)
  80553c:	e0bffe17 	ldw	r2,-8(fp)
  805540:	10800810 	cmplti	r2,r2,32
  805544:	103fe61e 	bne	r2,zero,8054e0 <getFreeShark+0x14>
		if (sharkArray[i].state == DEAD) {
			return &(sharkArray[i]);
		}
	}
	return NULL;
  805548:	e03fff15 	stw	zero,-4(fp)
  80554c:	e0bfff17 	ldw	r2,-4(fp)
}
  805550:	e037883a 	mov	sp,fp
  805554:	df000017 	ldw	fp,0(sp)
  805558:	dec00104 	addi	sp,sp,4
  80555c:	f800283a 	ret

00805560 <drawShark>:

void drawShark(Shark *shark) {
  805560:	defffd04 	addi	sp,sp,-12
  805564:	dfc00215 	stw	ra,8(sp)
  805568:	df000115 	stw	fp,4(sp)
  80556c:	df000104 	addi	fp,sp,4
  805570:	e13fff15 	stw	r4,-4(fp)
	if (shark != NULL) {
  805574:	e0bfff17 	ldw	r2,-4(fp)
  805578:	1005003a 	cmpeq	r2,r2,zero
  80557c:	1000131e 	bne	r2,zero,8055cc <drawShark+0x6c>
		if(shark->x > (SCREEN_WIDTH + SHARK_WIDTH) || shark->y < (-SHARK_HEIGHT) || shark->y > (SCREEN_WIDTH + SHARK_HEIGHT)) {
  805580:	e0bfff17 	ldw	r2,-4(fp)
  805584:	10800017 	ldw	r2,0(r2)
  805588:	10805e88 	cmpgei	r2,r2,378
  80558c:	1000121e 	bne	r2,zero,8055d8 <drawShark+0x78>
  805590:	e0bfff17 	ldw	r2,-4(fp)
  805594:	10800217 	ldw	r2,8(r2)
  805598:	10bffb10 	cmplti	r2,r2,-20
  80559c:	10000e1e 	bne	r2,zero,8055d8 <drawShark+0x78>
  8055a0:	e0bfff17 	ldw	r2,-4(fp)
  8055a4:	10800217 	ldw	r2,8(r2)
  8055a8:	10805a48 	cmpgei	r2,r2,361
  8055ac:	10000a1e 	bne	r2,zero,8055d8 <drawShark+0x78>
		} else {
			drawBmp(sharkBmp, shark->x, shark->y);
  8055b0:	d1271b17 	ldw	r4,-25492(gp)
  8055b4:	e0bfff17 	ldw	r2,-4(fp)
  8055b8:	11400017 	ldw	r5,0(r2)
  8055bc:	e0bfff17 	ldw	r2,-4(fp)
  8055c0:	11800217 	ldw	r6,8(r2)
  8055c4:	080162c0 	call	80162c <drawBmp>
  8055c8:	00000306 	br	8055d8 <drawShark+0x78>
		}
	} else {
		printf("Attempt to draw null shark.\n");
  8055cc:	010020b4 	movhi	r4,130
  8055d0:	21338d04 	addi	r4,r4,-12748
  8055d4:	080a9300 	call	80a930 <puts>
	}
}
  8055d8:	e037883a 	mov	sp,fp
  8055dc:	dfc00117 	ldw	ra,4(sp)
  8055e0:	df000017 	ldw	fp,0(sp)
  8055e4:	dec00204 	addi	sp,sp,8
  8055e8:	f800283a 	ret

008055ec <eraseShark>:

void eraseShark(Shark *shark){
  8055ec:	defffd04 	addi	sp,sp,-12
  8055f0:	dfc00215 	stw	ra,8(sp)
  8055f4:	df000115 	stw	fp,4(sp)
  8055f8:	df000104 	addi	fp,sp,4
  8055fc:	e13fff15 	stw	r4,-4(fp)
	if (shark != NULL) {
  805600:	e0bfff17 	ldw	r2,-4(fp)
  805604:	1005003a 	cmpeq	r2,r2,zero
  805608:	1000071e 	bne	r2,zero,805628 <eraseShark+0x3c>
		eraseBmp(sharkBmp, shark->prevX, shark->prevY);
  80560c:	d1271b17 	ldw	r4,-25492(gp)
  805610:	e0bfff17 	ldw	r2,-4(fp)
  805614:	11400117 	ldw	r5,4(r2)
  805618:	e0bfff17 	ldw	r2,-4(fp)
  80561c:	11800317 	ldw	r6,12(r2)
  805620:	08017940 	call	801794 <eraseBmp>
  805624:	00000306 	br	805634 <eraseShark+0x48>
	} else {
		printf("Attempt to erase null shark.\n");
  805628:	010020b4 	movhi	r4,130
  80562c:	21339404 	addi	r4,r4,-12720
  805630:	080a9300 	call	80a930 <puts>
	}
}
  805634:	e037883a 	mov	sp,fp
  805638:	dfc00117 	ldw	ra,4(sp)
  80563c:	df000017 	ldw	fp,0(sp)
  805640:	dec00204 	addi	sp,sp,8
  805644:	f800283a 	ret

00805648 <moveShark>:

void moveShark(Shark *shark) {
  805648:	defffc04 	addi	sp,sp,-16
  80564c:	dfc00315 	stw	ra,12(sp)
  805650:	df000215 	stw	fp,8(sp)
  805654:	df000204 	addi	fp,sp,8
  805658:	e13fff15 	stw	r4,-4(fp)
	if (shark == NULL) {
  80565c:	e0bfff17 	ldw	r2,-4(fp)
  805660:	1004c03a 	cmpne	r2,r2,zero
  805664:	1000041e 	bne	r2,zero,805678 <moveShark+0x30>
		printf("Attempt to move null shark.\n");
  805668:	010020b4 	movhi	r4,130
  80566c:	21339c04 	addi	r4,r4,-12688
  805670:	080a9300 	call	80a930 <puts>
		return;
  805674:	00007206 	br	805840 <moveShark+0x1f8>
	}

	shark->prevX = shark->x;
  805678:	e0bfff17 	ldw	r2,-4(fp)
  80567c:	10c00017 	ldw	r3,0(r2)
  805680:	e0bfff17 	ldw	r2,-4(fp)
  805684:	10c00115 	stw	r3,4(r2)
	shark->prevY = shark->y;
  805688:	e0bfff17 	ldw	r2,-4(fp)
  80568c:	10c00217 	ldw	r3,8(r2)
  805690:	e0bfff17 	ldw	r2,-4(fp)
  805694:	10c00315 	stw	r3,12(r2)

	shark->count++;
  805698:	e0bfff17 	ldw	r2,-4(fp)
  80569c:	10800517 	ldw	r2,20(r2)
  8056a0:	10c00044 	addi	r3,r2,1
  8056a4:	e0bfff17 	ldw	r2,-4(fp)
  8056a8:	10c00515 	stw	r3,20(r2)

	if (shark->count >= shark->freq) {
  8056ac:	e0bfff17 	ldw	r2,-4(fp)
  8056b0:	10c00517 	ldw	r3,20(r2)
  8056b4:	e0bfff17 	ldw	r2,-4(fp)
  8056b8:	10800417 	ldw	r2,16(r2)
  8056bc:	18800c16 	blt	r3,r2,8056f0 <moveShark+0xa8>
		shark->count = 0;
  8056c0:	e0bfff17 	ldw	r2,-4(fp)
  8056c4:	10000515 	stw	zero,20(r2)
		createBullet(SHARKBULLET, shark->x + BULLET_LENGTH, shark->y + SHARK_LASER_LOCATION, shark->count);
  8056c8:	e0bfff17 	ldw	r2,-4(fp)
  8056cc:	10800017 	ldw	r2,0(r2)
  8056d0:	114000c4 	addi	r5,r2,3
  8056d4:	e0bfff17 	ldw	r2,-4(fp)
  8056d8:	10800217 	ldw	r2,8(r2)
  8056dc:	11800344 	addi	r6,r2,13
  8056e0:	e0bfff17 	ldw	r2,-4(fp)
  8056e4:	11c00517 	ldw	r7,20(r2)
  8056e8:	01000044 	movi	r4,1
  8056ec:	080198c0 	call	80198c <createBullet>
//		shark->type = RECENTLYDEAD;
//	} else if ((shark->y >= SCREEN_HEIGHT) || (shark->y <= -SHARK_HEIGHT)) {
//		shark->type = RECENTLYDEAD;
//	}

	if(shark->entranceCount >= ENTRANCESTEPS) {
  8056f0:	e0bfff17 	ldw	r2,-4(fp)
  8056f4:	1080098b 	ldhu	r2,38(r2)
  8056f8:	10bfffcc 	andi	r2,r2,65535
  8056fc:	10802030 	cmpltui	r2,r2,128
  805700:	10001d1e 	bne	r2,zero,805778 <moveShark+0x130>
		Displacement *disp = shark->displacement;
  805704:	e0bfff17 	ldw	r2,-4(fp)
  805708:	10800817 	ldw	r2,32(r2)
  80570c:	e0bffe15 	stw	r2,-8(fp)
		shark->x += disp->dx;
  805710:	e0bfff17 	ldw	r2,-4(fp)
  805714:	10c00017 	ldw	r3,0(r2)
  805718:	e0bffe17 	ldw	r2,-8(fp)
  80571c:	1080000b 	ldhu	r2,0(r2)
  805720:	10bfffcc 	andi	r2,r2,65535
  805724:	10a0001c 	xori	r2,r2,32768
  805728:	10a00004 	addi	r2,r2,-32768
  80572c:	1887883a 	add	r3,r3,r2
  805730:	e0bfff17 	ldw	r2,-4(fp)
  805734:	10c00015 	stw	r3,0(r2)
		shark->y += disp->dy;
  805738:	e0bfff17 	ldw	r2,-4(fp)
  80573c:	10c00217 	ldw	r3,8(r2)
  805740:	e0bffe17 	ldw	r2,-8(fp)
  805744:	1080008b 	ldhu	r2,2(r2)
  805748:	10bfffcc 	andi	r2,r2,65535
  80574c:	10a0001c 	xori	r2,r2,32768
  805750:	10a00004 	addi	r2,r2,-32768
  805754:	1887883a 	add	r3,r3,r2
  805758:	e0bfff17 	ldw	r2,-4(fp)
  80575c:	10c00215 	stw	r3,8(r2)
		shark->displacement = shark->displacement->next;
  805760:	e0bfff17 	ldw	r2,-4(fp)
  805764:	10800817 	ldw	r2,32(r2)
  805768:	10c00117 	ldw	r3,4(r2)
  80576c:	e0bfff17 	ldw	r2,-4(fp)
  805770:	10c00815 	stw	r3,32(r2)
  805774:	00003206 	br	805840 <moveShark+0x1f8>
	} else {
		shark->entranceCount++;
  805778:	e0bfff17 	ldw	r2,-4(fp)
  80577c:	1080098b 	ldhu	r2,38(r2)
  805780:	10800044 	addi	r2,r2,1
  805784:	1007883a 	mov	r3,r2
  805788:	e0bfff17 	ldw	r2,-4(fp)
  80578c:	10c0098d 	sth	r3,38(r2)
		if(shark->initialWall == TOPWALL) {
  805790:	e0bfff17 	ldw	r2,-4(fp)
  805794:	1080090b 	ldhu	r2,36(r2)
  805798:	10bfffcc 	andi	r2,r2,65535
  80579c:	1004c03a 	cmpne	r2,r2,zero
  8057a0:	10000a1e 	bne	r2,zero,8057cc <moveShark+0x184>
			shark->x += 0;
  8057a4:	e0bfff17 	ldw	r2,-4(fp)
  8057a8:	10c00017 	ldw	r3,0(r2)
  8057ac:	e0bfff17 	ldw	r2,-4(fp)
  8057b0:	10c00015 	stw	r3,0(r2)
			shark->y += 1;
  8057b4:	e0bfff17 	ldw	r2,-4(fp)
  8057b8:	10800217 	ldw	r2,8(r2)
  8057bc:	10c00044 	addi	r3,r2,1
  8057c0:	e0bfff17 	ldw	r2,-4(fp)
  8057c4:	10c00215 	stw	r3,8(r2)
  8057c8:	00001d06 	br	805840 <moveShark+0x1f8>
		} else if(shark->initialWall == RIGHTWALL) {
  8057cc:	e0bfff17 	ldw	r2,-4(fp)
  8057d0:	1080090b 	ldhu	r2,36(r2)
  8057d4:	10bfffcc 	andi	r2,r2,65535
  8057d8:	10800058 	cmpnei	r2,r2,1
  8057dc:	10000a1e 	bne	r2,zero,805808 <moveShark+0x1c0>
			shark->x += -1;
  8057e0:	e0bfff17 	ldw	r2,-4(fp)
  8057e4:	10800017 	ldw	r2,0(r2)
  8057e8:	10ffffc4 	addi	r3,r2,-1
  8057ec:	e0bfff17 	ldw	r2,-4(fp)
  8057f0:	10c00015 	stw	r3,0(r2)
			shark->y += 0;
  8057f4:	e0bfff17 	ldw	r2,-4(fp)
  8057f8:	10c00217 	ldw	r3,8(r2)
  8057fc:	e0bfff17 	ldw	r2,-4(fp)
  805800:	10c00215 	stw	r3,8(r2)
  805804:	00000e06 	br	805840 <moveShark+0x1f8>
		} else if(shark->initialWall == BOTTOMWALL) {
  805808:	e0bfff17 	ldw	r2,-4(fp)
  80580c:	1080090b 	ldhu	r2,36(r2)
  805810:	10bfffcc 	andi	r2,r2,65535
  805814:	10800098 	cmpnei	r2,r2,2
  805818:	1000091e 	bne	r2,zero,805840 <moveShark+0x1f8>
			shark->x += 0;
  80581c:	e0bfff17 	ldw	r2,-4(fp)
  805820:	10c00017 	ldw	r3,0(r2)
  805824:	e0bfff17 	ldw	r2,-4(fp)
  805828:	10c00015 	stw	r3,0(r2)
			shark->y += -1;
  80582c:	e0bfff17 	ldw	r2,-4(fp)
  805830:	10800217 	ldw	r2,8(r2)
  805834:	10ffffc4 	addi	r3,r2,-1
  805838:	e0bfff17 	ldw	r2,-4(fp)
  80583c:	10c00215 	stw	r3,8(r2)
		}
	}
}
  805840:	e037883a 	mov	sp,fp
  805844:	dfc00117 	ldw	ra,4(sp)
  805848:	df000017 	ldw	fp,0(sp)
  80584c:	dec00204 	addi	sp,sp,8
  805850:	f800283a 	ret

00805854 <moveAllSharks>:

void moveAllSharks(void) {
  805854:	defffd04 	addi	sp,sp,-12
  805858:	dfc00215 	stw	ra,8(sp)
  80585c:	df000115 	stw	fp,4(sp)
  805860:	df000104 	addi	fp,sp,4
	Shark *cursor = sharkList;
  805864:	d0a73717 	ldw	r2,-25380(gp)
  805868:	e0bfff15 	stw	r2,-4(fp)
	while (cursor != NULL) {
  80586c:	00000506 	br	805884 <moveAllSharks+0x30>
		moveShark(cursor);
  805870:	e13fff17 	ldw	r4,-4(fp)
  805874:	08056480 	call	805648 <moveShark>
		cursor = cursor->next;
  805878:	e0bfff17 	ldw	r2,-4(fp)
  80587c:	10800617 	ldw	r2,24(r2)
  805880:	e0bfff15 	stw	r2,-4(fp)
	}
}

void moveAllSharks(void) {
	Shark *cursor = sharkList;
	while (cursor != NULL) {
  805884:	e0bfff17 	ldw	r2,-4(fp)
  805888:	1004c03a 	cmpne	r2,r2,zero
  80588c:	103ff81e 	bne	r2,zero,805870 <moveAllSharks+0x1c>
		moveShark(cursor);
		cursor = cursor->next;
	}
}
  805890:	e037883a 	mov	sp,fp
  805894:	dfc00117 	ldw	ra,4(sp)
  805898:	df000017 	ldw	fp,0(sp)
  80589c:	dec00204 	addi	sp,sp,8
  8058a0:	f800283a 	ret

008058a4 <drawAllSharks>:

void drawAllSharks(void) {
  8058a4:	defffd04 	addi	sp,sp,-12
  8058a8:	dfc00215 	stw	ra,8(sp)
  8058ac:	df000115 	stw	fp,4(sp)
  8058b0:	df000104 	addi	fp,sp,4
	Shark *cursor = sharkList;
  8058b4:	d0a73717 	ldw	r2,-25380(gp)
  8058b8:	e0bfff15 	stw	r2,-4(fp)
	while (cursor != NULL) {
  8058bc:	00000506 	br	8058d4 <drawAllSharks+0x30>
		drawShark(cursor);
  8058c0:	e13fff17 	ldw	r4,-4(fp)
  8058c4:	08055600 	call	805560 <drawShark>
		cursor = cursor->next;
  8058c8:	e0bfff17 	ldw	r2,-4(fp)
  8058cc:	10800617 	ldw	r2,24(r2)
  8058d0:	e0bfff15 	stw	r2,-4(fp)
	}
}

void drawAllSharks(void) {
	Shark *cursor = sharkList;
	while (cursor != NULL) {
  8058d4:	e0bfff17 	ldw	r2,-4(fp)
  8058d8:	1004c03a 	cmpne	r2,r2,zero
  8058dc:	103ff81e 	bne	r2,zero,8058c0 <drawAllSharks+0x1c>
		drawShark(cursor);
		cursor = cursor->next;
	}
}
  8058e0:	e037883a 	mov	sp,fp
  8058e4:	dfc00117 	ldw	ra,4(sp)
  8058e8:	df000017 	ldw	fp,0(sp)
  8058ec:	dec00204 	addi	sp,sp,8
  8058f0:	f800283a 	ret

008058f4 <eraseAllSharks>:

void eraseAllSharks(void) {
  8058f4:	defffd04 	addi	sp,sp,-12
  8058f8:	dfc00215 	stw	ra,8(sp)
  8058fc:	df000115 	stw	fp,4(sp)
  805900:	df000104 	addi	fp,sp,4
	Shark *cursor = sharkList;
  805904:	d0a73717 	ldw	r2,-25380(gp)
  805908:	e0bfff15 	stw	r2,-4(fp)
	// TODO: erase recently dead list
	while (cursor != NULL) {
  80590c:	00000506 	br	805924 <eraseAllSharks+0x30>
		eraseShark(cursor);
  805910:	e13fff17 	ldw	r4,-4(fp)
  805914:	08055ec0 	call	8055ec <eraseShark>
		cursor = cursor->next;
  805918:	e0bfff17 	ldw	r2,-4(fp)
  80591c:	10800617 	ldw	r2,24(r2)
  805920:	e0bfff15 	stw	r2,-4(fp)
}

void eraseAllSharks(void) {
	Shark *cursor = sharkList;
	// TODO: erase recently dead list
	while (cursor != NULL) {
  805924:	e0bfff17 	ldw	r2,-4(fp)
  805928:	1004c03a 	cmpne	r2,r2,zero
  80592c:	103ff81e 	bne	r2,zero,805910 <eraseAllSharks+0x1c>
		eraseShark(cursor);
		cursor = cursor->next;
	}
}
  805930:	e037883a 	mov	sp,fp
  805934:	dfc00117 	ldw	ra,4(sp)
  805938:	df000017 	ldw	fp,0(sp)
  80593c:	dec00204 	addi	sp,sp,8
  805940:	f800283a 	ret

00805944 <createShark>:

void createShark(int sudoRandomSeed, int x, int y, Displacement *displacement, unsigned short wall) {
  805944:	defff804 	addi	sp,sp,-32
  805948:	dfc00715 	stw	ra,28(sp)
  80594c:	df000615 	stw	fp,24(sp)
  805950:	df000604 	addi	fp,sp,24
  805954:	e13ffb15 	stw	r4,-20(fp)
  805958:	e17ffc15 	stw	r5,-16(fp)
  80595c:	e1bffd15 	stw	r6,-12(fp)
  805960:	e1fffe15 	stw	r7,-8(fp)
  805964:	e0800217 	ldw	r2,8(fp)
  805968:	e0bfff0d 	sth	r2,-4(fp)
	if (displacement == NULL) {
  80596c:	e0bffe17 	ldw	r2,-8(fp)
  805970:	1004c03a 	cmpne	r2,r2,zero
  805974:	1000041e 	bne	r2,zero,805988 <createShark+0x44>
		printf("Attempt to create shark with null displacement.\n");
  805978:	010020b4 	movhi	r4,130
  80597c:	2133a304 	addi	r4,r4,-12660
  805980:	080a9300 	call	80a930 <puts>
		return;
  805984:	00007506 	br	805b5c <createShark+0x218>
	}

	//Shark *newShark = malloc(sizeof(Shark));
	Shark *newShark = getFreeShark();
  805988:	08054cc0 	call	8054cc <getFreeShark>
  80598c:	e0bffa15 	stw	r2,-24(fp)
	if (newShark == NULL) {
  805990:	e0bffa17 	ldw	r2,-24(fp)
  805994:	1005003a 	cmpeq	r2,r2,zero
  805998:	1000701e 	bne	r2,zero,805b5c <createShark+0x218>
		return;
	}

	newShark->state = LIVE;
  80599c:	e0fffa17 	ldw	r3,-24(fp)
  8059a0:	00800044 	movi	r2,1
  8059a4:	18800a0d 	sth	r2,40(r3)
	newShark->initialWall = wall % 3; //% 3 to ensure that value is always between 0-2, even if caller messes up.
  8059a8:	e13fff0b 	ldhu	r4,-4(fp)
  8059ac:	014000c4 	movi	r5,3
  8059b0:	08098440 	call	809844 <__umodsi3>
  8059b4:	1007883a 	mov	r3,r2
  8059b8:	e0bffa17 	ldw	r2,-24(fp)
  8059bc:	10c0090d 	sth	r3,36(r2)
	if(newShark->initialWall == TOPWALL) {
  8059c0:	e0bffa17 	ldw	r2,-24(fp)
  8059c4:	1080090b 	ldhu	r2,36(r2)
  8059c8:	10bfffcc 	andi	r2,r2,65535
  8059cc:	1004c03a 	cmpne	r2,r2,zero
  8059d0:	1000071e 	bne	r2,zero,8059f0 <createShark+0xac>
		newShark->x = x;
  8059d4:	e0fffa17 	ldw	r3,-24(fp)
  8059d8:	e0bffc17 	ldw	r2,-16(fp)
  8059dc:	18800015 	stw	r2,0(r3)
		newShark->y = 0 - SHARK_HEIGHT;
  8059e0:	e0fffa17 	ldw	r3,-24(fp)
  8059e4:	00bffb04 	movi	r2,-20
  8059e8:	18800215 	stw	r2,8(r3)
  8059ec:	00001706 	br	805a4c <createShark+0x108>
	} else if(newShark->initialWall == BOTTOMWALL) {
  8059f0:	e0bffa17 	ldw	r2,-24(fp)
  8059f4:	1080090b 	ldhu	r2,36(r2)
  8059f8:	10bfffcc 	andi	r2,r2,65535
  8059fc:	10800098 	cmpnei	r2,r2,2
  805a00:	1000071e 	bne	r2,zero,805a20 <createShark+0xdc>
		newShark->x = x;
  805a04:	e0fffa17 	ldw	r3,-24(fp)
  805a08:	e0bffc17 	ldw	r2,-16(fp)
  805a0c:	18800015 	stw	r2,0(r3)
		newShark->y = SCREEN_HEIGHT + SHARK_HEIGHT;
  805a10:	e0fffa17 	ldw	r3,-24(fp)
  805a14:	00804104 	movi	r2,260
  805a18:	18800215 	stw	r2,8(r3)
  805a1c:	00000b06 	br	805a4c <createShark+0x108>
	} else if(newShark->initialWall == RIGHTWALL) {
  805a20:	e0bffa17 	ldw	r2,-24(fp)
  805a24:	1080090b 	ldhu	r2,36(r2)
  805a28:	10bfffcc 	andi	r2,r2,65535
  805a2c:	10800058 	cmpnei	r2,r2,1
  805a30:	1000061e 	bne	r2,zero,805a4c <createShark+0x108>
		newShark->x = SCREEN_WIDTH - (NADO_WIDTH * 1.5) - SHARK_WIDTH;
  805a34:	e0fffa17 	ldw	r3,-24(fp)
  805a38:	00803784 	movi	r2,222
  805a3c:	18800015 	stw	r2,0(r3)
		newShark->y = y;
  805a40:	e0fffa17 	ldw	r3,-24(fp)
  805a44:	e0bffd17 	ldw	r2,-12(fp)
  805a48:	18800215 	stw	r2,8(r3)
	}
	newShark->prevX = newShark->x;
  805a4c:	e0bffa17 	ldw	r2,-24(fp)
  805a50:	10c00017 	ldw	r3,0(r2)
  805a54:	e0bffa17 	ldw	r2,-24(fp)
  805a58:	10c00115 	stw	r3,4(r2)
	newShark->prevY = newShark->y;
  805a5c:	e0bffa17 	ldw	r2,-24(fp)
  805a60:	10c00217 	ldw	r3,8(r2)
  805a64:	e0bffa17 	ldw	r2,-24(fp)
  805a68:	10c00315 	stw	r3,12(r2)

	newShark->displacement = displacement;
  805a6c:	e0fffa17 	ldw	r3,-24(fp)
  805a70:	e0bffe17 	ldw	r2,-8(fp)
  805a74:	18800815 	stw	r2,32(r3)
	newShark->prev = NULL;
  805a78:	e0bffa17 	ldw	r2,-24(fp)
  805a7c:	10000715 	stw	zero,28(r2)
	if (sharkList == NULL) {
  805a80:	d0a73717 	ldw	r2,-25380(gp)
  805a84:	1004c03a 	cmpne	r2,r2,zero
  805a88:	1000051e 	bne	r2,zero,805aa0 <createShark+0x15c>
		sharkList = newShark;
  805a8c:	e0bffa17 	ldw	r2,-24(fp)
  805a90:	d0a73715 	stw	r2,-25380(gp)
		newShark->next = NULL;
  805a94:	e0bffa17 	ldw	r2,-24(fp)
  805a98:	10000615 	stw	zero,24(r2)
  805a9c:	00000806 	br	805ac0 <createShark+0x17c>
	} else {
		sharkList->prev = newShark;
  805aa0:	d0e73717 	ldw	r3,-25380(gp)
  805aa4:	e0bffa17 	ldw	r2,-24(fp)
  805aa8:	18800715 	stw	r2,28(r3)
		newShark->next = sharkList;
  805aac:	d0e73717 	ldw	r3,-25380(gp)
  805ab0:	e0bffa17 	ldw	r2,-24(fp)
  805ab4:	10c00615 	stw	r3,24(r2)
		sharkList = newShark;
  805ab8:	e0bffa17 	ldw	r2,-24(fp)
  805abc:	d0a73715 	stw	r2,-25380(gp)
	}
	newShark->freq = (sudoRandomSeed % 20) + 1.5*PLAYER_HEIGHT + 1;
  805ac0:	e13ffb17 	ldw	r4,-20(fp)
  805ac4:	01400504 	movi	r5,20
  805ac8:	08097dc0 	call	8097dc <__modsi3>
  805acc:	1009883a 	mov	r4,r2
  805ad0:	08094f80 	call	8094f8 <__floatsidf>
  805ad4:	100b883a 	mov	r5,r2
  805ad8:	180d883a 	mov	r6,r3
  805adc:	2809883a 	mov	r4,r5
  805ae0:	300b883a 	mov	r5,r6
  805ae4:	000d883a 	mov	r6,zero
  805ae8:	01d01134 	movhi	r7,16452
  805aec:	39d00004 	addi	r7,r7,16384
  805af0:	0808bc00 	call	808bc0 <__adddf3>
  805af4:	1009883a 	mov	r4,r2
  805af8:	180b883a 	mov	r5,r3
  805afc:	2005883a 	mov	r2,r4
  805b00:	2807883a 	mov	r3,r5
  805b04:	1009883a 	mov	r4,r2
  805b08:	180b883a 	mov	r5,r3
  805b0c:	000d883a 	mov	r6,zero
  805b10:	01cffc34 	movhi	r7,16368
  805b14:	0808bc00 	call	808bc0 <__adddf3>
  805b18:	1009883a 	mov	r4,r2
  805b1c:	180b883a 	mov	r5,r3
  805b20:	2005883a 	mov	r2,r4
  805b24:	2807883a 	mov	r3,r5
  805b28:	1009883a 	mov	r4,r2
  805b2c:	180b883a 	mov	r5,r3
  805b30:	08095f00 	call	8095f0 <__fixdfsi>
  805b34:	1007883a 	mov	r3,r2
  805b38:	e0bffa17 	ldw	r2,-24(fp)
  805b3c:	10c00415 	stw	r3,16(r2)
	newShark->count = 0;
  805b40:	e0bffa17 	ldw	r2,-24(fp)
  805b44:	10000515 	stw	zero,20(r2)
	newShark->entranceCount = 0;
  805b48:	e0bffa17 	ldw	r2,-24(fp)
  805b4c:	1000098d 	sth	zero,38(r2)
	sharkCount++;
  805b50:	d0a73917 	ldw	r2,-25372(gp)
  805b54:	10800044 	addi	r2,r2,1
  805b58:	d0a73915 	stw	r2,-25372(gp)
}
  805b5c:	e037883a 	mov	sp,fp
  805b60:	dfc00117 	ldw	ra,4(sp)
  805b64:	df000017 	ldw	fp,0(sp)
  805b68:	dec00204 	addi	sp,sp,8
  805b6c:	f800283a 	ret

00805b70 <killShark>:

void killShark(Shark *shark) {
  805b70:	defffb04 	addi	sp,sp,-20
  805b74:	dfc00415 	stw	ra,16(sp)
  805b78:	df000315 	stw	fp,12(sp)
  805b7c:	df000304 	addi	fp,sp,12
  805b80:	e13fff15 	stw	r4,-4(fp)
	if (shark == NULL) {
  805b84:	e0bfff17 	ldw	r2,-4(fp)
  805b88:	1004c03a 	cmpne	r2,r2,zero
  805b8c:	1000041e 	bne	r2,zero,805ba0 <killShark+0x30>
		printf("Attempt to kill null shark.\n");
  805b90:	010020b4 	movhi	r4,130
  805b94:	2133af04 	addi	r4,r4,-12612
  805b98:	080a9300 	call	80a930 <puts>
		return;
  805b9c:	00002106 	br	805c24 <killShark+0xb4>
	}

	shark->state = RECENTLY_DEAD;
  805ba0:	e0ffff17 	ldw	r3,-4(fp)
  805ba4:	00800084 	movi	r2,2
  805ba8:	18800a0d 	sth	r2,40(r3)

	Shark *previousShark = shark->prev;
  805bac:	e0bfff17 	ldw	r2,-4(fp)
  805bb0:	10800717 	ldw	r2,28(r2)
  805bb4:	e0bffe15 	stw	r2,-8(fp)
	Shark *nextShark = shark->next;
  805bb8:	e0bfff17 	ldw	r2,-4(fp)
  805bbc:	10800617 	ldw	r2,24(r2)
  805bc0:	e0bffd15 	stw	r2,-12(fp)
//		deadSharkList->prev = shark;
//		shark->next = deadSharkList;
//		deadSharkList = shark;
//	}

	playSharkDeath();
  805bc4:	0800bcc0 	call	800bcc <playSharkDeath>
	// Need to erase now because we free the shark
	eraseShark(shark);
  805bc8:	e13fff17 	ldw	r4,-4(fp)
  805bcc:	08055ec0 	call	8055ec <eraseShark>
	// TODO: increase player score

	if (previousShark != NULL) {
  805bd0:	e0bffe17 	ldw	r2,-8(fp)
  805bd4:	1005003a 	cmpeq	r2,r2,zero
  805bd8:	1000041e 	bne	r2,zero,805bec <killShark+0x7c>
		// Not killing first shark
		previousShark->next = nextShark;
  805bdc:	e0fffe17 	ldw	r3,-8(fp)
  805be0:	e0bffd17 	ldw	r2,-12(fp)
  805be4:	18800615 	stw	r2,24(r3)
  805be8:	00000206 	br	805bf4 <killShark+0x84>
	} else {
		// Killing first shark
		sharkList = nextShark;
  805bec:	e0bffd17 	ldw	r2,-12(fp)
  805bf0:	d0a73715 	stw	r2,-25380(gp)
	}

	if (nextShark != NULL) {
  805bf4:	e0bffd17 	ldw	r2,-12(fp)
  805bf8:	1005003a 	cmpeq	r2,r2,zero
  805bfc:	1000031e 	bne	r2,zero,805c0c <killShark+0x9c>
		// Not killing last shark
		nextShark->prev = previousShark;
  805c00:	e0fffd17 	ldw	r3,-12(fp)
  805c04:	e0bffe17 	ldw	r2,-8(fp)
  805c08:	18800715 	stw	r2,28(r3)
	} else {
		// Killing last shark
	}
	sharkCount--;
  805c0c:	d0a73917 	ldw	r2,-25372(gp)
  805c10:	10bfffc4 	addi	r2,r2,-1
  805c14:	d0a73915 	stw	r2,-25372(gp)
	updateCurrentPlayerScore(250);
  805c18:	01003e84 	movi	r4,250
  805c1c:	0804b300 	call	804b30 <updateCurrentPlayerScore>
	drawInGameInfo();
  805c20:	0804e6c0 	call	804e6c <drawInGameInfo>
}
  805c24:	e037883a 	mov	sp,fp
  805c28:	dfc00117 	ldw	ra,4(sp)
  805c2c:	df000017 	ldw	fp,0(sp)
  805c30:	dec00204 	addi	sp,sp,8
  805c34:	f800283a 	ret

00805c38 <cleanupDeadSharks>:

void cleanupDeadSharks() {
  805c38:	defffd04 	addi	sp,sp,-12
  805c3c:	dfc00215 	stw	ra,8(sp)
  805c40:	df000115 	stw	fp,4(sp)
  805c44:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < NUM_SHARKS; i++) {
  805c48:	e03fff15 	stw	zero,-4(fp)
  805c4c:	00003906 	br	805d34 <cleanupDeadSharks+0xfc>
		if (sharkArray[i].state == RECENTLY_DEAD) {
  805c50:	e0bfff17 	ldw	r2,-4(fp)
  805c54:	00c020f4 	movhi	r3,131
  805c58:	18e9e304 	addi	r3,r3,-22644
  805c5c:	10800b24 	muli	r2,r2,44
  805c60:	10c5883a 	add	r2,r2,r3
  805c64:	10800a04 	addi	r2,r2,40
  805c68:	1080000b 	ldhu	r2,0(r2)
  805c6c:	10bfffcc 	andi	r2,r2,65535
  805c70:	10a0001c 	xori	r2,r2,32768
  805c74:	10a00004 	addi	r2,r2,-32768
  805c78:	10800098 	cmpnei	r2,r2,2
  805c7c:	10002a1e 	bne	r2,zero,805d28 <cleanupDeadSharks+0xf0>
			sharkArray[i].state = DEAD;
  805c80:	e0bfff17 	ldw	r2,-4(fp)
  805c84:	00c020f4 	movhi	r3,131
  805c88:	18e9e304 	addi	r3,r3,-22644
  805c8c:	10800b24 	muli	r2,r2,44
  805c90:	10c5883a 	add	r2,r2,r3
  805c94:	10c00a04 	addi	r3,r2,40
  805c98:	008000c4 	movi	r2,3
  805c9c:	1880000d 	sth	r2,0(r3)
			sharkArray[i].prevX = sharkArray[i].x;
  805ca0:	e17fff17 	ldw	r5,-4(fp)
  805ca4:	e0bfff17 	ldw	r2,-4(fp)
  805ca8:	00c020f4 	movhi	r3,131
  805cac:	18e9e304 	addi	r3,r3,-22644
  805cb0:	10800b24 	muli	r2,r2,44
  805cb4:	10c5883a 	add	r2,r2,r3
  805cb8:	11000017 	ldw	r4,0(r2)
  805cbc:	00c020f4 	movhi	r3,131
  805cc0:	18e9e304 	addi	r3,r3,-22644
  805cc4:	28800b24 	muli	r2,r5,44
  805cc8:	10c5883a 	add	r2,r2,r3
  805ccc:	10800104 	addi	r2,r2,4
  805cd0:	11000015 	stw	r4,0(r2)
			sharkArray[i].prevY = sharkArray[i].y;
  805cd4:	e17fff17 	ldw	r5,-4(fp)
  805cd8:	e0bfff17 	ldw	r2,-4(fp)
  805cdc:	00c020f4 	movhi	r3,131
  805ce0:	18e9e304 	addi	r3,r3,-22644
  805ce4:	10800b24 	muli	r2,r2,44
  805ce8:	10c5883a 	add	r2,r2,r3
  805cec:	10800204 	addi	r2,r2,8
  805cf0:	11000017 	ldw	r4,0(r2)
  805cf4:	00c020f4 	movhi	r3,131
  805cf8:	18e9e304 	addi	r3,r3,-22644
  805cfc:	28800b24 	muli	r2,r5,44
  805d00:	10c5883a 	add	r2,r2,r3
  805d04:	10800304 	addi	r2,r2,12
  805d08:	11000015 	stw	r4,0(r2)
			eraseShark(&(sharkArray[i]));
  805d0c:	e0bfff17 	ldw	r2,-4(fp)
  805d10:	10800b24 	muli	r2,r2,44
  805d14:	1007883a 	mov	r3,r2
  805d18:	008020f4 	movhi	r2,131
  805d1c:	10a9e304 	addi	r2,r2,-22644
  805d20:	1889883a 	add	r4,r3,r2
  805d24:	08055ec0 	call	8055ec <eraseShark>
	drawInGameInfo();
}

void cleanupDeadSharks() {
	int i;
	for (i = 0; i < NUM_SHARKS; i++) {
  805d28:	e0bfff17 	ldw	r2,-4(fp)
  805d2c:	10800044 	addi	r2,r2,1
  805d30:	e0bfff15 	stw	r2,-4(fp)
  805d34:	e0bfff17 	ldw	r2,-4(fp)
  805d38:	10800810 	cmplti	r2,r2,32
  805d3c:	103fc41e 	bne	r2,zero,805c50 <cleanupDeadSharks+0x18>
//		//free(cursor);
//		cursor = next;
//		i++;
//	}
//	deadSharkList = NULL;
}
  805d40:	e037883a 	mov	sp,fp
  805d44:	dfc00117 	ldw	ra,4(sp)
  805d48:	df000017 	ldw	fp,0(sp)
  805d4c:	dec00204 	addi	sp,sp,8
  805d50:	f800283a 	ret

00805d54 <drawSplashScreen>:
#include "splash.h"

void drawSplashScreen() {
  805d54:	defffc04 	addi	sp,sp,-16
  805d58:	dfc00315 	stw	ra,12(sp)
  805d5c:	df000215 	stw	fp,8(sp)
  805d60:	df000204 	addi	fp,sp,8
	int loadXPosition, loadYPosition;

	loadXPosition = (SCREEN_WIDTH - loadBmp->infoheader.width)/2;
  805d64:	d0a71717 	ldw	r2,-25508(gp)
  805d68:	10c00517 	ldw	r3,20(r2)
  805d6c:	00805504 	movi	r2,340
  805d70:	10c7c83a 	sub	r3,r2,r3
  805d74:	1804d7fa 	srli	r2,r3,31
  805d78:	10c5883a 	add	r2,r2,r3
  805d7c:	1005d07a 	srai	r2,r2,1
  805d80:	e0bfff15 	stw	r2,-4(fp)
	loadYPosition = SCREEN_HEIGHT - 8*loadBmp->infoheader.height;
  805d84:	d0a71717 	ldw	r2,-25508(gp)
  805d88:	10800617 	ldw	r2,24(r2)
  805d8c:	100690fa 	slli	r3,r2,3
  805d90:	00803c04 	movi	r2,240
  805d94:	10c5c83a 	sub	r2,r2,r3
  805d98:	e0bffe15 	stw	r2,-8(fp)

	clearScreen();
  805d9c:	08062a40 	call	8062a4 <clearScreen>
	drawBmp(splashBmp, 0, 0);
  805da0:	d1271c17 	ldw	r4,-25488(gp)
  805da4:	000b883a 	mov	r5,zero
  805da8:	000d883a 	mov	r6,zero
  805dac:	080162c0 	call	80162c <drawBmp>
	drawBmp(loadBmp, loadXPosition, loadYPosition);
  805db0:	d1271717 	ldw	r4,-25508(gp)
  805db4:	e17fff17 	ldw	r5,-4(fp)
  805db8:	e1bffe17 	ldw	r6,-8(fp)
  805dbc:	080162c0 	call	80162c <drawBmp>

	swapBuffers();
  805dc0:	08062e80 	call	8062e8 <swapBuffers>
}
  805dc4:	e037883a 	mov	sp,fp
  805dc8:	dfc00117 	ldw	ra,4(sp)
  805dcc:	df000017 	ldw	fp,0(sp)
  805dd0:	dec00204 	addi	sp,sp,8
  805dd4:	f800283a 	ret

00805dd8 <swapSplashScreenText>:

void swapSplashScreenText() {
  805dd8:	defffc04 	addi	sp,sp,-16
  805ddc:	dfc00315 	stw	ra,12(sp)
  805de0:	df000215 	stw	fp,8(sp)
  805de4:	df000204 	addi	fp,sp,8
	int pressXPosition, pressYPosition;

	pressXPosition = (SCREEN_WIDTH - pressBmp->infoheader.width)/2;
  805de8:	d0a71817 	ldw	r2,-25504(gp)
  805dec:	10c00517 	ldw	r3,20(r2)
  805df0:	00805504 	movi	r2,340
  805df4:	10c7c83a 	sub	r3,r2,r3
  805df8:	1804d7fa 	srli	r2,r3,31
  805dfc:	10c5883a 	add	r2,r2,r3
  805e00:	1005d07a 	srai	r2,r2,1
  805e04:	e0bfff15 	stw	r2,-4(fp)
	pressYPosition = SCREEN_HEIGHT - 8*pressBmp->infoheader.height;
  805e08:	d0a71817 	ldw	r2,-25504(gp)
  805e0c:	10800617 	ldw	r2,24(r2)
  805e10:	100690fa 	slli	r3,r2,3
  805e14:	00803c04 	movi	r2,240
  805e18:	10c5c83a 	sub	r2,r2,r3
  805e1c:	e0bffe15 	stw	r2,-8(fp)

	drawBmp(splashBmp, 0, 0);
  805e20:	d1271c17 	ldw	r4,-25488(gp)
  805e24:	000b883a 	mov	r5,zero
  805e28:	000d883a 	mov	r6,zero
  805e2c:	080162c0 	call	80162c <drawBmp>
	drawBmp(pressBmp, pressXPosition, pressYPosition);
  805e30:	d1271817 	ldw	r4,-25504(gp)
  805e34:	e17fff17 	ldw	r5,-4(fp)
  805e38:	e1bffe17 	ldw	r6,-8(fp)
  805e3c:	080162c0 	call	80162c <drawBmp>

	swapBuffers();
  805e40:	08062e80 	call	8062e8 <swapBuffers>
}
  805e44:	e037883a 	mov	sp,fp
  805e48:	dfc00117 	ldw	ra,4(sp)
  805e4c:	df000017 	ldw	fp,0(sp)
  805e50:	dec00204 	addi	sp,sp,8
  805e54:	f800283a 	ret

00805e58 <clearSplashScreen>:

void clearSplashScreen() {
  805e58:	defffe04 	addi	sp,sp,-8
  805e5c:	dfc00115 	stw	ra,4(sp)
  805e60:	df000015 	stw	fp,0(sp)
  805e64:	d839883a 	mov	fp,sp
	clearScreen();
  805e68:	08062a40 	call	8062a4 <clearScreen>

	//freeSplash();
}
  805e6c:	e037883a 	mov	sp,fp
  805e70:	dfc00117 	ldw	ra,4(sp)
  805e74:	df000017 	ldw	fp,0(sp)
  805e78:	dec00204 	addi	sp,sp,8
  805e7c:	f800283a 	ret

00805e80 <timer_test>:
#include "sys/alt_alarm.h"
#include "system.h"
#include "timer.h"

// Test code from lab
void timer_test(void) {
  805e80:	defff304 	addi	sp,sp,-52
  805e84:	dfc00c15 	stw	ra,48(sp)
  805e88:	df000b15 	stw	fp,44(sp)
  805e8c:	dc000a15 	stw	r16,40(sp)
  805e90:	df000a04 	addi	fp,sp,40
	int ticks_duration;
	int timer_period;
	int status;
	int done;

	printf("Timers\n");
  805e94:	010020b4 	movhi	r4,130
  805e98:	2133b604 	addi	r4,r4,-12584
  805e9c:	080a9300 	call	80a930 <puts>
	printf(" Sys Clock Timer\n");
  805ea0:	010020b4 	movhi	r4,130
  805ea4:	2133b804 	addi	r4,r4,-12576
  805ea8:	080a9300 	call	80a930 <puts>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  805eac:	008020b4 	movhi	r2,130
  805eb0:	10837c04 	addi	r2,r2,3568
  805eb4:	10800017 	ldw	r2,0(r2)
	ticks_per_s = alt_ticks_per_second();
  805eb8:	e0bffa15 	stw	r2,-24(fp)
	printf("Tick Freq: %d\n", ticks_per_s);
  805ebc:	010020b4 	movhi	r4,130
  805ec0:	2133bd04 	addi	r4,r4,-12556
  805ec4:	e17ffa17 	ldw	r5,-24(fp)
  805ec8:	080a8180 	call	80a818 <printf>
	printf(" Recording starting ticks\n");
  805ecc:	010020b4 	movhi	r4,130
  805ed0:	2133c104 	addi	r4,r4,-12540
  805ed4:	080a9300 	call	80a930 <puts>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  805ed8:	008020b4 	movhi	r2,130
  805edc:	10837d04 	addi	r2,r2,3572
  805ee0:	10800017 	ldw	r2,0(r2)
	ticks_start = alt_nticks();
  805ee4:	e0bffc15 	stw	r2,-16(fp)
	printf(" Sleeping for 5 seconds\n");
  805ee8:	010020b4 	movhi	r4,130
  805eec:	2133c804 	addi	r4,r4,-12512
  805ef0:	080a9300 	call	80a930 <puts>
	usleep(5000000);
  805ef4:	01001334 	movhi	r4,76
  805ef8:	2112d004 	addi	r4,r4,19264
  805efc:	08131a80 	call	8131a8 <usleep>
	printf(" Recording ending ticks\n");
  805f00:	010020b4 	movhi	r4,130
  805f04:	2133ce04 	addi	r4,r4,-12488
  805f08:	080a9300 	call	80a930 <puts>
  805f0c:	008020b4 	movhi	r2,130
  805f10:	10837d04 	addi	r2,r2,3572
  805f14:	10800017 	ldw	r2,0(r2)
	ticks_end = alt_nticks();
  805f18:	e0bffb15 	stw	r2,-20(fp)
	ticks_duration = ticks_end -ticks_start;
  805f1c:	e0fffb17 	ldw	r3,-20(fp)
  805f20:	e0bffc17 	ldw	r2,-16(fp)
  805f24:	1885c83a 	sub	r2,r3,r2
  805f28:	e0bff915 	stw	r2,-28(fp)
	duration = (float) ticks_duration / (float) ticks_per_s;
  805f2c:	e13ff917 	ldw	r4,-28(fp)
  805f30:	08086440 	call	808644 <__floatsisf>
  805f34:	1021883a 	mov	r16,r2
  805f38:	e13ffa17 	ldw	r4,-24(fp)
  805f3c:	08086440 	call	808644 <__floatsisf>
  805f40:	8009883a 	mov	r4,r16
  805f44:	100b883a 	mov	r5,r2
  805f48:	08084d00 	call	8084d0 <__divsf3>
  805f4c:	e0bffd15 	stw	r2,-12(fp)
	printf(" The program slept for %d ticks (%f seconds)\n\n", ticks_duration,
  805f50:	e13ffd17 	ldw	r4,-12(fp)
  805f54:	08086dc0 	call	8086dc <__extendsfdf2>
  805f58:	100f883a 	mov	r7,r2
  805f5c:	1811883a 	mov	r8,r3
  805f60:	010020b4 	movhi	r4,130
  805f64:	2133d404 	addi	r4,r4,-12464
  805f68:	e17ff917 	ldw	r5,-28(fp)
  805f6c:	380d883a 	mov	r6,r7
  805f70:	400f883a 	mov	r7,r8
  805f74:	080a8180 	call	80a818 <printf>
	duration);

	printf(" Timestamp Timer\n");
  805f78:	010020b4 	movhi	r4,130
  805f7c:	2133e004 	addi	r4,r4,-12416
  805f80:	080a9300 	call	80a930 <puts>
	freq = alt_timestamp_freq();
  805f84:	081441c0 	call	81441c <alt_timestamp_freq>
  805f88:	e0bfff15 	stw	r2,-4(fp)
	printf(" CPU Freq: %d\n", freq);
  805f8c:	010020b4 	movhi	r4,130
  805f90:	2133e504 	addi	r4,r4,-12396
  805f94:	e17fff17 	ldw	r5,-4(fp)
  805f98:	080a8180 	call	80a818 <printf>
	printf(" Resetting Timestamp timer\n");
  805f9c:	010020b4 	movhi	r4,130
  805fa0:	2133e904 	addi	r4,r4,-12380
  805fa4:	080a9300 	call	80a930 <puts>
	alt_timestamp_start();
  805fa8:	08142dc0 	call	8142dc <alt_timestamp_start>
	printf(" ...Timing the print of this statement...\n");
  805fac:	010020b4 	movhi	r4,130
  805fb0:	2133f004 	addi	r4,r4,-12352
  805fb4:	080a9300 	call	80a930 <puts>
	cycles = alt_timestamp();
  805fb8:	08143800 	call	814380 <alt_timestamp>
  805fbc:	e0bffe15 	stw	r2,-8(fp)
	duration = (float) cycles / (float) freq;
  805fc0:	e13ffe17 	ldw	r4,-8(fp)
  805fc4:	08086440 	call	808644 <__floatsisf>
  805fc8:	1021883a 	mov	r16,r2
  805fcc:	e13fff17 	ldw	r4,-4(fp)
  805fd0:	08086440 	call	808644 <__floatsisf>
  805fd4:	8009883a 	mov	r4,r16
  805fd8:	100b883a 	mov	r5,r2
  805fdc:	08084d00 	call	8084d0 <__divsf3>
  805fe0:	e0bffd15 	stw	r2,-12(fp)
	printf(" It took %d cycles (%f seconds) to print the statement\n\n",
  805fe4:	e13ffd17 	ldw	r4,-12(fp)
  805fe8:	08086dc0 	call	8086dc <__extendsfdf2>
  805fec:	100f883a 	mov	r7,r2
  805ff0:	1811883a 	mov	r8,r3
  805ff4:	010020b4 	movhi	r4,130
  805ff8:	2133fb04 	addi	r4,r4,-12308
  805ffc:	e17ffe17 	ldw	r5,-8(fp)
  806000:	380d883a 	mov	r6,r7
  806004:	400f883a 	mov	r7,r8
  806008:	080a8180 	call	80a818 <printf>
	cycles, duration);

	printf(" Hardware-Only Timer\n");
  80600c:	010020b4 	movhi	r4,130
  806010:	21340a04 	addi	r4,r4,-12248
  806014:	080a9300 	call	80a930 <puts>
	printf(" Setting timer period to 5 seconds.\n");
  806018:	010020b4 	movhi	r4,130
  80601c:	21341004 	addi	r4,r4,-12224
  806020:	080a9300 	call	80a930 <puts>
	timer_period = 5 * CLOCK_FREQ;
  806024:	0083b9f4 	movhi	r2,3815
  806028:	10aca004 	addi	r2,r2,-19840
  80602c:	e0bff815 	stw	r2,-32(fp)
	// Setting the period registers must be done in 2 steps as they are only 16 bits wide
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 8, timer_period & 0xFFFF); // less significant word
  806030:	e0bff817 	ldw	r2,-32(fp)
  806034:	10ffffcc 	andi	r3,r2,65535
  806038:	00804034 	movhi	r2,256
  80603c:	10840204 	addi	r2,r2,4104
  806040:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE,12, timer_period >> 16); // more significant word
  806044:	e0bff817 	ldw	r2,-32(fp)
  806048:	1007d43a 	srai	r3,r2,16
  80604c:	00804034 	movhi	r2,256
  806050:	10840304 	addi	r2,r2,4108
  806054:	10c0002d 	sthio	r3,0(r2)
	printf(" Stopping Timer\n");
  806058:	010020b4 	movhi	r4,130
  80605c:	21341904 	addi	r4,r4,-12188
  806060:	080a9300 	call	80a930 <puts>
	status = IORD_16DIRECT(HAL_SYSTEM_TIMER_BASE, 0); // read status registers
  806064:	00804034 	movhi	r2,256
  806068:	10840004 	addi	r2,r2,4096
  80606c:	1080002b 	ldhuio	r2,0(r2)
  806070:	e0bff715 	stw	r2,-36(fp)
	// Write the control registers
	if(status & 0x2) {
  806074:	e0bff717 	ldw	r2,-36(fp)
  806078:	1080008c 	andi	r2,r2,2
  80607c:	1005003a 	cmpeq	r2,r2,zero
  806080:	1000041e 	bne	r2,zero,806094 <timer_test+0x214>
		IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 4, 1 << 3); // stop the timer if it was started
  806084:	00c04034 	movhi	r3,256
  806088:	18c40104 	addi	r3,r3,4100
  80608c:	00800204 	movi	r2,8
  806090:	1880002d 	sthio	r2,0(r3)
	}
	printf(" Starting Timer\n");
  806094:	010020b4 	movhi	r4,130
  806098:	21341d04 	addi	r4,r4,-12172
  80609c:	080a9300 	call	80a930 <puts>
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 4, 1 << 2); // start the timer
  8060a0:	00c04034 	movhi	r3,256
  8060a4:	18c40104 	addi	r3,r3,4100
  8060a8:	00800104 	movi	r2,4
  8060ac:	1880002d 	sthio	r2,0(r3)

	printf("  Waiting for timer to expire...\n");
  8060b0:	010020b4 	movhi	r4,130
  8060b4:	21342104 	addi	r4,r4,-12156
  8060b8:	080a9300 	call	80a930 <puts>
	done = 0;
  8060bc:	e03ff615 	stw	zero,-40(fp)
	while(! done) {
  8060c0:	00000706 	br	8060e0 <timer_test+0x260>
		status = IORD_16DIRECT(HAL_SYSTEM_TIMER_BASE, 0); // read status registers
  8060c4:	00804034 	movhi	r2,256
  8060c8:	10840004 	addi	r2,r2,4096
  8060cc:	1080002b 	ldhuio	r2,0(r2)
  8060d0:	e0bff715 	stw	r2,-36(fp)
		done = status & 0x1;
  8060d4:	e0bff717 	ldw	r2,-36(fp)
  8060d8:	1080004c 	andi	r2,r2,1
  8060dc:	e0bff615 	stw	r2,-40(fp)
	printf(" Starting Timer\n");
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 4, 1 << 2); // start the timer

	printf("  Waiting for timer to expire...\n");
	done = 0;
	while(! done) {
  8060e0:	e0bff617 	ldw	r2,-40(fp)
  8060e4:	1005003a 	cmpeq	r2,r2,zero
  8060e8:	103ff61e 	bne	r2,zero,8060c4 <timer_test+0x244>
		status = IORD_16DIRECT(HAL_SYSTEM_TIMER_BASE, 0); // read status registers
		done = status & 0x1;
	}
	printf(" 5 seconds timer is done\n");
  8060ec:	010020b4 	movhi	r4,130
  8060f0:	21342a04 	addi	r4,r4,-12120
  8060f4:	080a9300 	call	80a930 <puts>
}
  8060f8:	e037883a 	mov	sp,fp
  8060fc:	dfc00217 	ldw	ra,8(sp)
  806100:	df000117 	ldw	fp,4(sp)
  806104:	dc000017 	ldw	r16,0(sp)
  806108:	dec00304 	addi	sp,sp,12
  80610c:	f800283a 	ret

00806110 <initHardwareTimer>:

void initHardwareTimer() {
  806110:	defffe04 	addi	sp,sp,-8
  806114:	dfc00115 	stw	ra,4(sp)
  806118:	df000015 	stw	fp,0(sp)
  80611c:	d839883a 	mov	fp,sp
	setHardwareTimerPeriod(CLOCK_FREQ/30);
  806120:	01000674 	movhi	r4,25
  806124:	211b9a84 	addi	r4,r4,28266
  806128:	08061400 	call	806140 <setHardwareTimerPeriod>
}
  80612c:	e037883a 	mov	sp,fp
  806130:	dfc00117 	ldw	ra,4(sp)
  806134:	df000017 	ldw	fp,0(sp)
  806138:	dec00204 	addi	sp,sp,8
  80613c:	f800283a 	ret

00806140 <setHardwareTimerPeriod>:

// Period is in clock cycles
// ie 5 seconds would be 5 * CLOCK_FREQ
void setHardwareTimerPeriod(int period)
{
  806140:	defffe04 	addi	sp,sp,-8
  806144:	df000115 	stw	fp,4(sp)
  806148:	df000104 	addi	fp,sp,4
  80614c:	e13fff15 	stw	r4,-4(fp)
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 8, period & 0xFFFF); // less significant word
  806150:	e0bfff17 	ldw	r2,-4(fp)
  806154:	10ffffcc 	andi	r3,r2,65535
  806158:	00804034 	movhi	r2,256
  80615c:	10840204 	addi	r2,r2,4104
  806160:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE,12, period >> 16); // more significant word
  806164:	e0bfff17 	ldw	r2,-4(fp)
  806168:	1007d43a 	srai	r3,r2,16
  80616c:	00804034 	movhi	r2,256
  806170:	10840304 	addi	r2,r2,4108
  806174:	10c0002d 	sthio	r3,0(r2)
}
  806178:	e037883a 	mov	sp,fp
  80617c:	df000017 	ldw	fp,0(sp)
  806180:	dec00104 	addi	sp,sp,4
  806184:	f800283a 	ret

00806188 <isHardwareTimerRunning>:

int isHardwareTimerRunning(void)
{
  806188:	defffe04 	addi	sp,sp,-8
  80618c:	df000115 	stw	fp,4(sp)
  806190:	df000104 	addi	fp,sp,4
	int status = IORD_16DIRECT(HAL_SYSTEM_TIMER_BASE, 0);
  806194:	00804034 	movhi	r2,256
  806198:	10840004 	addi	r2,r2,4096
  80619c:	1080002b 	ldhuio	r2,0(r2)
  8061a0:	e0bfff15 	stw	r2,-4(fp)
	return status & 0x2; // not totally sure on this
  8061a4:	e0bfff17 	ldw	r2,-4(fp)
  8061a8:	1080008c 	andi	r2,r2,2
}
  8061ac:	e037883a 	mov	sp,fp
  8061b0:	df000017 	ldw	fp,0(sp)
  8061b4:	dec00104 	addi	sp,sp,4
  8061b8:	f800283a 	ret

008061bc <hasHardwareTimerExpired>:

int hasHardwareTimerExpired(void)
{
  8061bc:	deffff04 	addi	sp,sp,-4
  8061c0:	df000015 	stw	fp,0(sp)
  8061c4:	d839883a 	mov	fp,sp
	return IORD_16DIRECT(HAL_SYSTEM_TIMER_BASE, 0);
  8061c8:	00804034 	movhi	r2,256
  8061cc:	10840004 	addi	r2,r2,4096
  8061d0:	1080002b 	ldhuio	r2,0(r2)
}
  8061d4:	e037883a 	mov	sp,fp
  8061d8:	df000017 	ldw	fp,0(sp)
  8061dc:	dec00104 	addi	sp,sp,4
  8061e0:	f800283a 	ret

008061e4 <startHardwareTimer>:

void startHardwareTimer(void)
{
  8061e4:	deffff04 	addi	sp,sp,-4
  8061e8:	df000015 	stw	fp,0(sp)
  8061ec:	d839883a 	mov	fp,sp
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 4, 1 << 2);
  8061f0:	00c04034 	movhi	r3,256
  8061f4:	18c40104 	addi	r3,r3,4100
  8061f8:	00800104 	movi	r2,4
  8061fc:	1880002d 	sthio	r2,0(r3)
}
  806200:	e037883a 	mov	sp,fp
  806204:	df000017 	ldw	fp,0(sp)
  806208:	dec00104 	addi	sp,sp,4
  80620c:	f800283a 	ret

00806210 <initVga>:
#include "vga.h"

void initVga()
{
  806210:	defffe04 	addi	sp,sp,-8
  806214:	dfc00115 	stw	ra,4(sp)
  806218:	df000015 	stw	fp,0(sp)
  80621c:	d839883a 	mov	fp,sp
	pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma");
  806220:	010020b4 	movhi	r4,130
  806224:	21343104 	addi	r4,r4,-12092
  806228:	0815c0c0 	call	815c0c <alt_up_pixel_buffer_dma_open_dev>
  80622c:	d0a71f15 	stw	r2,-25476(gp)
	pixel_buffer_addr1 = PIXEL_BUFFER_BASE;
  806230:	00804234 	movhi	r2,264
  806234:	d0a71515 	stw	r2,-25516(gp)
	pixel_buffer_addr2 = PIXEL_BUFFER_BASE + (320 * 240 * 2);
  806238:	008042b4 	movhi	r2,266
  80623c:	10960004 	addi	r2,r2,22528
  806240:	d0a71a15 	stw	r2,-25496(gp)

	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer, pixel_buffer_addr1);
  806244:	d1271f17 	ldw	r4,-25476(gp)
  806248:	d1671517 	ldw	r5,-25516(gp)
  80624c:	0815dec0 	call	815dec <alt_up_pixel_buffer_dma_change_back_buffer_address>

	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  806250:	d1271f17 	ldw	r4,-25476(gp)
  806254:	0815e440 	call	815e44 <alt_up_pixel_buffer_dma_swap_buffers>
	while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  806258:	d1271f17 	ldw	r4,-25476(gp)
  80625c:	0815e9c0 	call	815e9c <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  806260:	1004c03a 	cmpne	r2,r2,zero
  806264:	103ffc1e 	bne	r2,zero,806258 <initVga+0x48>

	// Set the 2nd buffer address
	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer, pixel_buffer_addr2);
  806268:	d1271f17 	ldw	r4,-25476(gp)
  80626c:	d1671a17 	ldw	r5,-25496(gp)
  806270:	0815dec0 	call	815dec <alt_up_pixel_buffer_dma_change_back_buffer_address>

	char_buffer = alt_up_char_buffer_open_dev("/dev/char_drawer");
  806274:	010020b4 	movhi	r4,130
  806278:	21343704 	addi	r4,r4,-12068
  80627c:	081598c0 	call	81598c <alt_up_char_buffer_open_dev>
  806280:	d0a71615 	stw	r2,-25512(gp)
	alt_up_char_buffer_init(char_buffer);
  806284:	d1271617 	ldw	r4,-25512(gp)
  806288:	08159080 	call	815908 <alt_up_char_buffer_init>

	clearScreen();
  80628c:	08062a40 	call	8062a4 <clearScreen>
}
  806290:	e037883a 	mov	sp,fp
  806294:	dfc00117 	ldw	ra,4(sp)
  806298:	df000017 	ldw	fp,0(sp)
  80629c:	dec00204 	addi	sp,sp,8
  8062a0:	f800283a 	ret

008062a4 <clearScreen>:

void clearScreen()
{
  8062a4:	defffe04 	addi	sp,sp,-8
  8062a8:	dfc00115 	stw	ra,4(sp)
  8062ac:	df000015 	stw	fp,0(sp)
  8062b0:	d839883a 	mov	fp,sp
	alt_up_char_buffer_clear(char_buffer);
  8062b4:	d1271617 	ldw	r4,-25512(gp)
  8062b8:	0815bb00 	call	815bb0 <alt_up_char_buffer_clear>
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  8062bc:	d1271f17 	ldw	r4,-25476(gp)
  8062c0:	000b883a 	mov	r5,zero
  8062c4:	0815ed00 	call	815ed0 <alt_up_pixel_buffer_dma_clear_screen>
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 1);
  8062c8:	d1271f17 	ldw	r4,-25476(gp)
  8062cc:	01400044 	movi	r5,1
  8062d0:	0815ed00 	call	815ed0 <alt_up_pixel_buffer_dma_clear_screen>
}
  8062d4:	e037883a 	mov	sp,fp
  8062d8:	dfc00117 	ldw	ra,4(sp)
  8062dc:	df000017 	ldw	fp,0(sp)
  8062e0:	dec00204 	addi	sp,sp,8
  8062e4:	f800283a 	ret

008062e8 <swapBuffers>:

void swapBuffers() {
  8062e8:	defffe04 	addi	sp,sp,-8
  8062ec:	dfc00115 	stw	ra,4(sp)
  8062f0:	df000015 	stw	fp,0(sp)
  8062f4:	d839883a 	mov	fp,sp
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  8062f8:	d1271f17 	ldw	r4,-25476(gp)
  8062fc:	0815e440 	call	815e44 <alt_up_pixel_buffer_dma_swap_buffers>
	while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  806300:	d1271f17 	ldw	r4,-25476(gp)
  806304:	0815e9c0 	call	815e9c <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  806308:	1004c03a 	cmpne	r2,r2,zero
  80630c:	103ffc1e 	bne	r2,zero,806300 <swapBuffers+0x18>
}
  806310:	e037883a 	mov	sp,fp
  806314:	dfc00117 	ldw	ra,4(sp)
  806318:	df000017 	ldw	fp,0(sp)
  80631c:	dec00204 	addi	sp,sp,8
  806320:	f800283a 	ret

00806324 <drawPixel>:

void drawPixel(int x, int y, int color) {
  806324:	defffb04 	addi	sp,sp,-20
  806328:	dfc00415 	stw	ra,16(sp)
  80632c:	df000315 	stw	fp,12(sp)
  806330:	df000304 	addi	fp,sp,12
  806334:	e13ffd15 	stw	r4,-12(fp)
  806338:	e17ffe15 	stw	r5,-8(fp)
  80633c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_pixel_buffer_dma_draw(pixel_buffer, color, x, y);
  806340:	d1271f17 	ldw	r4,-25476(gp)
  806344:	e17fff17 	ldw	r5,-4(fp)
  806348:	e1bffd17 	ldw	r6,-12(fp)
  80634c:	e1fffe17 	ldw	r7,-8(fp)
  806350:	0815c4c0 	call	815c4c <alt_up_pixel_buffer_dma_draw>
}
  806354:	e037883a 	mov	sp,fp
  806358:	dfc00117 	ldw	ra,4(sp)
  80635c:	df000017 	ldw	fp,0(sp)
  806360:	dec00204 	addi	sp,sp,8
  806364:	f800283a 	ret

00806368 <drawPixelFast>:
 *
 * DO NOT USE THIS FUNCTION IF ANY OF THE ABOVE ARE NOT GUARANATEED, OR YOU
 * MAY WRITE TO INVALID MEMORY LOCATIONS, CRASHING YOUR PROGRAM, OR
 * CAUSING UNEXPECTED BEHAVIOR.
 */
void drawPixelFast(unsigned int x, unsigned int y, unsigned int color) {
  806368:	defffb04 	addi	sp,sp,-20
  80636c:	df000415 	stw	fp,16(sp)
  806370:	df000404 	addi	fp,sp,16
  806374:	e13ffd15 	stw	r4,-12(fp)
  806378:	e17ffe15 	stw	r5,-8(fp)
  80637c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int addr;

	addr = ((x & pixel_buffer->x_coord_mask) << 1);
  806380:	d0a71f17 	ldw	r2,-25476(gp)
  806384:	10c01217 	ldw	r3,72(r2)
  806388:	e0bffd17 	ldw	r2,-12(fp)
  80638c:	1884703a 	and	r2,r3,r2
  806390:	1085883a 	add	r2,r2,r2
  806394:	e0bffc15 	stw	r2,-16(fp)
	addr += (((y & pixel_buffer->y_coord_mask) * 320) << 1);
  806398:	d0a71f17 	ldw	r2,-25476(gp)
  80639c:	10c01417 	ldw	r3,80(r2)
  8063a0:	e0bffe17 	ldw	r2,-8(fp)
  8063a4:	1884703a 	and	r2,r3,r2
  8063a8:	10805024 	muli	r2,r2,320
  8063ac:	1085883a 	add	r2,r2,r2
  8063b0:	1007883a 	mov	r3,r2
  8063b4:	e0bffc17 	ldw	r2,-16(fp)
  8063b8:	10c5883a 	add	r2,r2,r3
  8063bc:	e0bffc15 	stw	r2,-16(fp)

	IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  8063c0:	d0a71f17 	ldw	r2,-25476(gp)
  8063c4:	10800c17 	ldw	r2,48(r2)
  8063c8:	1007883a 	mov	r3,r2
  8063cc:	e0bffc17 	ldw	r2,-16(fp)
  8063d0:	1885883a 	add	r2,r3,r2
  8063d4:	e0ffff17 	ldw	r3,-4(fp)
  8063d8:	10c0002d 	sthio	r3,0(r2)
}
  8063dc:	e037883a 	mov	sp,fp
  8063e0:	df000017 	ldw	fp,0(sp)
  8063e4:	dec00104 	addi	sp,sp,4
  8063e8:	f800283a 	ret

008063ec <drawLine>:

void drawLine(int x0, int y0, int x1, int y1, int color)
{
  8063ec:	defff704 	addi	sp,sp,-36
  8063f0:	dfc00815 	stw	ra,32(sp)
  8063f4:	df000715 	stw	fp,28(sp)
  8063f8:	df000704 	addi	fp,sp,28
  8063fc:	e13ffc15 	stw	r4,-16(fp)
  806400:	e17ffd15 	stw	r5,-12(fp)
  806404:	e1bffe15 	stw	r6,-8(fp)
  806408:	e1ffff15 	stw	r7,-4(fp)
	if (y0 == y1)
  80640c:	e0fffd17 	ldw	r3,-12(fp)
  806410:	e0bfff17 	ldw	r2,-4(fp)
  806414:	18800a1e 	bne	r3,r2,806440 <drawLine+0x54>
	{
		alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, 1);
  806418:	d1271f17 	ldw	r4,-25476(gp)
  80641c:	e0800217 	ldw	r2,8(fp)
  806420:	d8800015 	stw	r2,0(sp)
  806424:	00800044 	movi	r2,1
  806428:	d8800115 	stw	r2,4(sp)
  80642c:	e17ffc17 	ldw	r5,-16(fp)
  806430:	e1bffe17 	ldw	r6,-8(fp)
  806434:	e1fffd17 	ldw	r7,-12(fp)
  806438:	08165280 	call	816528 <alt_up_pixel_buffer_dma_draw_hline>
  80643c:	00001806 	br	8064a0 <drawLine+0xb4>
	}
	else if (x0 == x1)
  806440:	e0fffc17 	ldw	r3,-16(fp)
  806444:	e0bffe17 	ldw	r2,-8(fp)
  806448:	18800a1e 	bne	r3,r2,806474 <drawLine+0x88>
	{
		alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, y0, y1, color, 1);
  80644c:	d1271f17 	ldw	r4,-25476(gp)
  806450:	e0800217 	ldw	r2,8(fp)
  806454:	d8800015 	stw	r2,0(sp)
  806458:	00800044 	movi	r2,1
  80645c:	d8800115 	stw	r2,4(sp)
  806460:	e17ffc17 	ldw	r5,-16(fp)
  806464:	e1bffd17 	ldw	r6,-12(fp)
  806468:	e1ffff17 	ldw	r7,-4(fp)
  80646c:	08165280 	call	816528 <alt_up_pixel_buffer_dma_draw_hline>
  806470:	00000b06 	br	8064a0 <drawLine+0xb4>
	}
	else
	{
		alt_up_pixel_buffer_dma_draw_line(pixel_buffer, x0, y0, x1, y1, color, 1);
  806474:	d1271f17 	ldw	r4,-25476(gp)
  806478:	e0bfff17 	ldw	r2,-4(fp)
  80647c:	d8800015 	stw	r2,0(sp)
  806480:	e0800217 	ldw	r2,8(fp)
  806484:	d8800115 	stw	r2,4(sp)
  806488:	00800044 	movi	r2,1
  80648c:	d8800215 	stw	r2,8(sp)
  806490:	e17ffc17 	ldw	r5,-16(fp)
  806494:	e1bffd17 	ldw	r6,-12(fp)
  806498:	e1fffe17 	ldw	r7,-8(fp)
  80649c:	0816ddc0 	call	816ddc <alt_up_pixel_buffer_dma_draw_line>
	}
}
  8064a0:	e037883a 	mov	sp,fp
  8064a4:	dfc00117 	ldw	ra,4(sp)
  8064a8:	df000017 	ldw	fp,0(sp)
  8064ac:	dec00204 	addi	sp,sp,8
  8064b0:	f800283a 	ret

008064b4 <printLine>:

void printLine(char *str, int x, int y)
{
  8064b4:	defffb04 	addi	sp,sp,-20
  8064b8:	dfc00415 	stw	ra,16(sp)
  8064bc:	df000315 	stw	fp,12(sp)
  8064c0:	df000304 	addi	fp,sp,12
  8064c4:	e13ffd15 	stw	r4,-12(fp)
  8064c8:	e17ffe15 	stw	r5,-8(fp)
  8064cc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_char_buffer_string(char_buffer, str, x, y);
  8064d0:	d1271617 	ldw	r4,-25512(gp)
  8064d4:	e1bffe17 	ldw	r6,-8(fp)
  8064d8:	e1ffff17 	ldw	r7,-4(fp)
  8064dc:	e17ffd17 	ldw	r5,-12(fp)
  8064e0:	0815a9c0 	call	815a9c <alt_up_char_buffer_string>
}
  8064e4:	e037883a 	mov	sp,fp
  8064e8:	dfc00117 	ldw	ra,4(sp)
  8064ec:	df000017 	ldw	fp,0(sp)
  8064f0:	dec00204 	addi	sp,sp,8
  8064f4:	f800283a 	ret

008064f8 <drawBox>:

void drawBox(int x0, int y0, int x1, int y1, int color)
{
  8064f8:	defff704 	addi	sp,sp,-36
  8064fc:	dfc00815 	stw	ra,32(sp)
  806500:	df000715 	stw	fp,28(sp)
  806504:	df000704 	addi	fp,sp,28
  806508:	e13ffc15 	stw	r4,-16(fp)
  80650c:	e17ffd15 	stw	r5,-12(fp)
  806510:	e1bffe15 	stw	r6,-8(fp)
  806514:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer, x0, y0, x1, y1, color, 1);
  806518:	d1271f17 	ldw	r4,-25476(gp)
  80651c:	e0bfff17 	ldw	r2,-4(fp)
  806520:	d8800015 	stw	r2,0(sp)
  806524:	e0800217 	ldw	r2,8(fp)
  806528:	d8800115 	stw	r2,4(sp)
  80652c:	00800044 	movi	r2,1
  806530:	d8800215 	stw	r2,8(sp)
  806534:	e17ffc17 	ldw	r5,-16(fp)
  806538:	e1bffd17 	ldw	r6,-12(fp)
  80653c:	e1fffe17 	ldw	r7,-8(fp)
  806540:	08160340 	call	816034 <alt_up_pixel_buffer_dma_draw_box>
}
  806544:	e037883a 	mov	sp,fp
  806548:	dfc00117 	ldw	ra,4(sp)
  80654c:	df000017 	ldw	fp,0(sp)
  806550:	dec00204 	addi	sp,sp,8
  806554:	f800283a 	ret

00806558 <convert24BitRgbTo16>:

int convert24BitRgbTo16(unsigned int rgb24bit)
{
  806558:	defff804 	addi	sp,sp,-32
  80655c:	df000715 	stw	fp,28(sp)
  806560:	df000704 	addi	fp,sp,28
  806564:	e13fff15 	stw	r4,-4(fp)
	unsigned int R8bit = (rgb24bit >> 16) & 0xFF;
  806568:	e0bfff17 	ldw	r2,-4(fp)
  80656c:	1004d43a 	srli	r2,r2,16
  806570:	10803fcc 	andi	r2,r2,255
  806574:	e0bffe15 	stw	r2,-8(fp)
	unsigned int G8bit = (rgb24bit >> 8)  & 0xFF;
  806578:	e0bfff17 	ldw	r2,-4(fp)
  80657c:	1004d23a 	srli	r2,r2,8
  806580:	10803fcc 	andi	r2,r2,255
  806584:	e0bffd15 	stw	r2,-12(fp)
	unsigned int B8bit = (rgb24bit)	      & 0xFF;
  806588:	e0bfff17 	ldw	r2,-4(fp)
  80658c:	10803fcc 	andi	r2,r2,255
  806590:	e0bffc15 	stw	r2,-16(fp)
	unsigned int R5bit = R8bit >> 3 & 0x1F;
  806594:	e0bffe17 	ldw	r2,-8(fp)
  806598:	1004d0fa 	srli	r2,r2,3
  80659c:	108007cc 	andi	r2,r2,31
  8065a0:	e0bffb15 	stw	r2,-20(fp)
	unsigned int G6bit = G8bit >> 2 & 0x3F;
  8065a4:	e0bffd17 	ldw	r2,-12(fp)
  8065a8:	1004d0ba 	srli	r2,r2,2
  8065ac:	10800fcc 	andi	r2,r2,63
  8065b0:	e0bffa15 	stw	r2,-24(fp)
	unsigned int B5bit = B8bit >> 3 & 0x1F;
  8065b4:	e0bffc17 	ldw	r2,-16(fp)
  8065b8:	1004d0fa 	srli	r2,r2,3
  8065bc:	108007cc 	andi	r2,r2,31
  8065c0:	e0bff915 	stw	r2,-28(fp)
	return (R5bit << 11 | G6bit << 5 | B5bit);
  8065c4:	e0bffb17 	ldw	r2,-20(fp)
  8065c8:	100692fa 	slli	r3,r2,11
  8065cc:	e0bffa17 	ldw	r2,-24(fp)
  8065d0:	1004917a 	slli	r2,r2,5
  8065d4:	1886b03a 	or	r3,r3,r2
  8065d8:	e0bff917 	ldw	r2,-28(fp)
  8065dc:	1884b03a 	or	r2,r3,r2
}
  8065e0:	e037883a 	mov	sp,fp
  8065e4:	df000017 	ldw	fp,0(sp)
  8065e8:	dec00104 	addi	sp,sp,4
  8065ec:	f800283a 	ret

008065f0 <pow>:
  8065f0:	deffee04 	addi	sp,sp,-72
  8065f4:	ddc01015 	stw	r23,64(sp)
  8065f8:	05c020b4 	movhi	r23,130
  8065fc:	bdfc3804 	addi	r23,r23,-3872
  806600:	dd800f15 	stw	r22,60(sp)
  806604:	dd400e15 	stw	r21,56(sp)
  806608:	dd000d15 	stw	r20,52(sp)
  80660c:	dcc00c15 	stw	r19,48(sp)
  806610:	dc800b15 	stw	r18,44(sp)
  806614:	dc400a15 	stw	r17,40(sp)
  806618:	dc000915 	stw	r16,36(sp)
  80661c:	2029883a 	mov	r20,r4
  806620:	dfc01115 	stw	ra,68(sp)
  806624:	3025883a 	mov	r18,r6
  806628:	282b883a 	mov	r21,r5
  80662c:	3827883a 	mov	r19,r7
  806630:	0806a780 	call	806a78 <__ieee754_pow>
  806634:	b9000017 	ldw	r4,0(r23)
  806638:	05bfffc4 	movi	r22,-1
  80663c:	1021883a 	mov	r16,r2
  806640:	1823883a 	mov	r17,r3
  806644:	25800426 	beq	r4,r22,806658 <pow+0x68>
  806648:	9009883a 	mov	r4,r18
  80664c:	980b883a 	mov	r5,r19
  806650:	08080740 	call	808074 <__isnand>
  806654:	10000d26 	beq	r2,zero,80668c <pow+0x9c>
  806658:	8005883a 	mov	r2,r16
  80665c:	8807883a 	mov	r3,r17
  806660:	dfc01117 	ldw	ra,68(sp)
  806664:	ddc01017 	ldw	r23,64(sp)
  806668:	dd800f17 	ldw	r22,60(sp)
  80666c:	dd400e17 	ldw	r21,56(sp)
  806670:	dd000d17 	ldw	r20,52(sp)
  806674:	dcc00c17 	ldw	r19,48(sp)
  806678:	dc800b17 	ldw	r18,44(sp)
  80667c:	dc400a17 	ldw	r17,40(sp)
  806680:	dc000917 	ldw	r16,36(sp)
  806684:	dec01204 	addi	sp,sp,72
  806688:	f800283a 	ret
  80668c:	a009883a 	mov	r4,r20
  806690:	a80b883a 	mov	r5,r21
  806694:	08080740 	call	808074 <__isnand>
  806698:	1000151e 	bne	r2,zero,8066f0 <pow+0x100>
  80669c:	000d883a 	mov	r6,zero
  8066a0:	000f883a 	mov	r7,zero
  8066a4:	a009883a 	mov	r4,r20
  8066a8:	a80b883a 	mov	r5,r21
  8066ac:	08092500 	call	809250 <__eqdf2>
  8066b0:	1000541e 	bne	r2,zero,806804 <pow+0x214>
  8066b4:	000d883a 	mov	r6,zero
  8066b8:	000f883a 	mov	r7,zero
  8066bc:	9009883a 	mov	r4,r18
  8066c0:	980b883a 	mov	r5,r19
  8066c4:	08092500 	call	809250 <__eqdf2>
  8066c8:	10002c1e 	bne	r2,zero,80677c <pow+0x18c>
  8066cc:	b8800017 	ldw	r2,0(r23)
  8066d0:	d8000615 	stw	zero,24(sp)
  8066d4:	d8000715 	stw	zero,28(sp)
  8066d8:	10001226 	beq	r2,zero,806724 <pow+0x134>
  8066dc:	008ffc34 	movhi	r2,16368
  8066e0:	d8800715 	stw	r2,28(sp)
  8066e4:	dc000617 	ldw	r16,24(sp)
  8066e8:	dc400717 	ldw	r17,28(sp)
  8066ec:	003fda06 	br	806658 <pow+0x68>
  8066f0:	000d883a 	mov	r6,zero
  8066f4:	000f883a 	mov	r7,zero
  8066f8:	9009883a 	mov	r4,r18
  8066fc:	980b883a 	mov	r5,r19
  806700:	08092500 	call	809250 <__eqdf2>
  806704:	103fd41e 	bne	r2,zero,806658 <pow+0x68>
  806708:	b8c00017 	ldw	r3,0(r23)
  80670c:	010ffc34 	movhi	r4,16368
  806710:	d8000615 	stw	zero,24(sp)
  806714:	d9000715 	stw	r4,28(sp)
  806718:	1d801526 	beq	r3,r22,806770 <pow+0x180>
  80671c:	00800084 	movi	r2,2
  806720:	18801326 	beq	r3,r2,806770 <pow+0x180>
  806724:	008020b4 	movhi	r2,130
  806728:	10b43c04 	addi	r2,r2,-12048
  80672c:	00c00044 	movi	r3,1
  806730:	d809883a 	mov	r4,sp
  806734:	dcc00515 	stw	r19,20(sp)
  806738:	dd400315 	stw	r21,12(sp)
  80673c:	d8800115 	stw	r2,4(sp)
  806740:	d8c00015 	stw	r3,0(sp)
  806744:	dc800415 	stw	r18,16(sp)
  806748:	dd000215 	stw	r20,8(sp)
  80674c:	d8000815 	stw	zero,32(sp)
  806750:	08080a40 	call	8080a4 <matherr>
  806754:	10002726 	beq	r2,zero,8067f4 <pow+0x204>
  806758:	d8800817 	ldw	r2,32(sp)
  80675c:	103fe126 	beq	r2,zero,8066e4 <pow+0xf4>
  806760:	080a0a00 	call	80a0a0 <__errno>
  806764:	d8c00817 	ldw	r3,32(sp)
  806768:	10c00015 	stw	r3,0(r2)
  80676c:	003fdd06 	br	8066e4 <pow+0xf4>
  806770:	d9000715 	stw	r4,28(sp)
  806774:	d8000615 	stw	zero,24(sp)
  806778:	003fda06 	br	8066e4 <pow+0xf4>
  80677c:	9009883a 	mov	r4,r18
  806780:	980b883a 	mov	r5,r19
  806784:	08080580 	call	808058 <finite>
  806788:	103fb326 	beq	r2,zero,806658 <pow+0x68>
  80678c:	000d883a 	mov	r6,zero
  806790:	000f883a 	mov	r7,zero
  806794:	9009883a 	mov	r4,r18
  806798:	980b883a 	mov	r5,r19
  80679c:	08093e80 	call	8093e8 <__ltdf2>
  8067a0:	103fad0e 	bge	r2,zero,806658 <pow+0x68>
  8067a4:	b9000017 	ldw	r4,0(r23)
  8067a8:	00800044 	movi	r2,1
  8067ac:	00c020b4 	movhi	r3,130
  8067b0:	18f43c04 	addi	r3,r3,-12048
  8067b4:	d8800015 	stw	r2,0(sp)
  8067b8:	d8c00115 	stw	r3,4(sp)
  8067bc:	dd400315 	stw	r21,12(sp)
  8067c0:	dcc00515 	stw	r19,20(sp)
  8067c4:	d8000815 	stw	zero,32(sp)
  8067c8:	dd000215 	stw	r20,8(sp)
  8067cc:	dc800415 	stw	r18,16(sp)
  8067d0:	20005626 	beq	r4,zero,80692c <pow+0x33c>
  8067d4:	00bffc34 	movhi	r2,65520
  8067d8:	d8800715 	stw	r2,28(sp)
  8067dc:	00800084 	movi	r2,2
  8067e0:	d8000615 	stw	zero,24(sp)
  8067e4:	20800326 	beq	r4,r2,8067f4 <pow+0x204>
  8067e8:	d809883a 	mov	r4,sp
  8067ec:	08080a40 	call	8080a4 <matherr>
  8067f0:	103fd91e 	bne	r2,zero,806758 <pow+0x168>
  8067f4:	080a0a00 	call	80a0a0 <__errno>
  8067f8:	00c00844 	movi	r3,33
  8067fc:	10c00015 	stw	r3,0(r2)
  806800:	003fd506 	br	806758 <pow+0x168>
  806804:	8009883a 	mov	r4,r16
  806808:	880b883a 	mov	r5,r17
  80680c:	08080580 	call	808058 <finite>
  806810:	10002426 	beq	r2,zero,8068a4 <pow+0x2b4>
  806814:	000d883a 	mov	r6,zero
  806818:	000f883a 	mov	r7,zero
  80681c:	8009883a 	mov	r4,r16
  806820:	880b883a 	mov	r5,r17
  806824:	08092500 	call	809250 <__eqdf2>
  806828:	103f8b1e 	bne	r2,zero,806658 <pow+0x68>
  80682c:	a009883a 	mov	r4,r20
  806830:	a80b883a 	mov	r5,r21
  806834:	08080580 	call	808058 <finite>
  806838:	103f8726 	beq	r2,zero,806658 <pow+0x68>
  80683c:	9009883a 	mov	r4,r18
  806840:	980b883a 	mov	r5,r19
  806844:	08080580 	call	808058 <finite>
  806848:	103f8326 	beq	r2,zero,806658 <pow+0x68>
  80684c:	b9000017 	ldw	r4,0(r23)
  806850:	00800104 	movi	r2,4
  806854:	d8800015 	stw	r2,0(sp)
  806858:	00c020b4 	movhi	r3,130
  80685c:	18f43c04 	addi	r3,r3,-12048
  806860:	00800084 	movi	r2,2
  806864:	d8c00115 	stw	r3,4(sp)
  806868:	dd400315 	stw	r21,12(sp)
  80686c:	dcc00515 	stw	r19,20(sp)
  806870:	d8000815 	stw	zero,32(sp)
  806874:	dd000215 	stw	r20,8(sp)
  806878:	dc800415 	stw	r18,16(sp)
  80687c:	d8000615 	stw	zero,24(sp)
  806880:	d8000715 	stw	zero,28(sp)
  806884:	20800326 	beq	r4,r2,806894 <pow+0x2a4>
  806888:	d809883a 	mov	r4,sp
  80688c:	08080a40 	call	8080a4 <matherr>
  806890:	103fb11e 	bne	r2,zero,806758 <pow+0x168>
  806894:	080a0a00 	call	80a0a0 <__errno>
  806898:	00c00884 	movi	r3,34
  80689c:	10c00015 	stw	r3,0(r2)
  8068a0:	003fad06 	br	806758 <pow+0x168>
  8068a4:	a009883a 	mov	r4,r20
  8068a8:	a80b883a 	mov	r5,r21
  8068ac:	08080580 	call	808058 <finite>
  8068b0:	103fd826 	beq	r2,zero,806814 <pow+0x224>
  8068b4:	9009883a 	mov	r4,r18
  8068b8:	980b883a 	mov	r5,r19
  8068bc:	08080580 	call	808058 <finite>
  8068c0:	103fd426 	beq	r2,zero,806814 <pow+0x224>
  8068c4:	880b883a 	mov	r5,r17
  8068c8:	8009883a 	mov	r4,r16
  8068cc:	08080740 	call	808074 <__isnand>
  8068d0:	10001926 	beq	r2,zero,806938 <pow+0x348>
  8068d4:	bc000017 	ldw	r16,0(r23)
  8068d8:	00800044 	movi	r2,1
  8068dc:	00c020b4 	movhi	r3,130
  8068e0:	18f43c04 	addi	r3,r3,-12048
  8068e4:	d8800015 	stw	r2,0(sp)
  8068e8:	d8c00115 	stw	r3,4(sp)
  8068ec:	dd400315 	stw	r21,12(sp)
  8068f0:	dcc00515 	stw	r19,20(sp)
  8068f4:	d8000815 	stw	zero,32(sp)
  8068f8:	dd000215 	stw	r20,8(sp)
  8068fc:	dc800415 	stw	r18,16(sp)
  806900:	80000a26 	beq	r16,zero,80692c <pow+0x33c>
  806904:	0009883a 	mov	r4,zero
  806908:	000d883a 	mov	r6,zero
  80690c:	000b883a 	mov	r5,zero
  806910:	000f883a 	mov	r7,zero
  806914:	0808ff80 	call	808ff8 <__divdf3>
  806918:	d8800615 	stw	r2,24(sp)
  80691c:	00800084 	movi	r2,2
  806920:	d8c00715 	stw	r3,28(sp)
  806924:	80bfb01e 	bne	r16,r2,8067e8 <pow+0x1f8>
  806928:	003fb206 	br	8067f4 <pow+0x204>
  80692c:	d8000615 	stw	zero,24(sp)
  806930:	d8000715 	stw	zero,28(sp)
  806934:	003fac06 	br	8067e8 <pow+0x1f8>
  806938:	b8800017 	ldw	r2,0(r23)
  80693c:	00c000c4 	movi	r3,3
  806940:	010020b4 	movhi	r4,130
  806944:	21343c04 	addi	r4,r4,-12048
  806948:	d8c00015 	stw	r3,0(sp)
  80694c:	d9000115 	stw	r4,4(sp)
  806950:	d8000815 	stw	zero,32(sp)
  806954:	dd000215 	stw	r20,8(sp)
  806958:	dd400315 	stw	r21,12(sp)
  80695c:	dc800415 	stw	r18,16(sp)
  806960:	dcc00515 	stw	r19,20(sp)
  806964:	1000251e 	bne	r2,zero,8069fc <pow+0x40c>
  806968:	05b80034 	movhi	r22,57344
  80696c:	0091fc34 	movhi	r2,18416
  806970:	10bfffc4 	addi	r2,r2,-1
  806974:	000d883a 	mov	r6,zero
  806978:	000f883a 	mov	r7,zero
  80697c:	a80b883a 	mov	r5,r21
  806980:	a009883a 	mov	r4,r20
  806984:	d8800715 	stw	r2,28(sp)
  806988:	dd800615 	stw	r22,24(sp)
  80698c:	08093e80 	call	8093e8 <__ltdf2>
  806990:	103fbd0e 	bge	r2,zero,806888 <pow+0x298>
  806994:	0005883a 	mov	r2,zero
  806998:	00cff834 	movhi	r3,16352
  80699c:	180f883a 	mov	r7,r3
  8069a0:	100d883a 	mov	r6,r2
  8069a4:	980b883a 	mov	r5,r19
  8069a8:	9009883a 	mov	r4,r18
  8069ac:	0808c340 	call	808c34 <__muldf3>
  8069b0:	1009883a 	mov	r4,r2
  8069b4:	180b883a 	mov	r5,r3
  8069b8:	1021883a 	mov	r16,r2
  8069bc:	1823883a 	mov	r17,r3
  8069c0:	08080bc0 	call	8080bc <rint>
  8069c4:	180f883a 	mov	r7,r3
  8069c8:	8009883a 	mov	r4,r16
  8069cc:	880b883a 	mov	r5,r17
  8069d0:	100d883a 	mov	r6,r2
  8069d4:	08092d80 	call	8092d8 <__nedf2>
  8069d8:	10000426 	beq	r2,zero,8069ec <pow+0x3fc>
  8069dc:	00b1fc34 	movhi	r2,51184
  8069e0:	10bfffc4 	addi	r2,r2,-1
  8069e4:	dd800615 	stw	r22,24(sp)
  8069e8:	d8800715 	stw	r2,28(sp)
  8069ec:	b8c00017 	ldw	r3,0(r23)
  8069f0:	00800084 	movi	r2,2
  8069f4:	18bfa41e 	bne	r3,r2,806888 <pow+0x298>
  8069f8:	003fa606 	br	806894 <pow+0x2a4>
  8069fc:	009ffc34 	movhi	r2,32752
  806a00:	000d883a 	mov	r6,zero
  806a04:	000f883a 	mov	r7,zero
  806a08:	a80b883a 	mov	r5,r21
  806a0c:	a009883a 	mov	r4,r20
  806a10:	d8800715 	stw	r2,28(sp)
  806a14:	d8000615 	stw	zero,24(sp)
  806a18:	08093e80 	call	8093e8 <__ltdf2>
  806a1c:	103ff30e 	bge	r2,zero,8069ec <pow+0x3fc>
  806a20:	0005883a 	mov	r2,zero
  806a24:	00cff834 	movhi	r3,16352
  806a28:	180f883a 	mov	r7,r3
  806a2c:	100d883a 	mov	r6,r2
  806a30:	980b883a 	mov	r5,r19
  806a34:	9009883a 	mov	r4,r18
  806a38:	0808c340 	call	808c34 <__muldf3>
  806a3c:	1009883a 	mov	r4,r2
  806a40:	180b883a 	mov	r5,r3
  806a44:	1021883a 	mov	r16,r2
  806a48:	1823883a 	mov	r17,r3
  806a4c:	08080bc0 	call	8080bc <rint>
  806a50:	180f883a 	mov	r7,r3
  806a54:	8009883a 	mov	r4,r16
  806a58:	880b883a 	mov	r5,r17
  806a5c:	100d883a 	mov	r6,r2
  806a60:	08092d80 	call	8092d8 <__nedf2>
  806a64:	103fe126 	beq	r2,zero,8069ec <pow+0x3fc>
  806a68:	00bffc34 	movhi	r2,65520
  806a6c:	d8800715 	stw	r2,28(sp)
  806a70:	d8000615 	stw	zero,24(sp)
  806a74:	003fdd06 	br	8069ec <pow+0x3fc>

00806a78 <__ieee754_pow>:
  806a78:	deffbb04 	addi	sp,sp,-276
  806a7c:	3005883a 	mov	r2,r6
  806a80:	dd404015 	stw	r21,256(sp)
  806a84:	dd003f15 	stw	r20,252(sp)
  806a88:	d9802815 	stw	r6,160(sp)
  806a8c:	2029883a 	mov	r20,r4
  806a90:	282b883a 	mov	r21,r5
  806a94:	3009883a 	mov	r4,r6
  806a98:	380b883a 	mov	r5,r7
  806a9c:	01a00034 	movhi	r6,32768
  806aa0:	31bfffc4 	addi	r6,r6,-1
  806aa4:	dc003b15 	stw	r16,236(sp)
  806aa8:	29a0703a 	and	r16,r5,r6
  806aac:	1404b03a 	or	r2,r2,r16
  806ab0:	dd804115 	stw	r22,260(sp)
  806ab4:	dc403c15 	stw	r17,240(sp)
  806ab8:	d9c02915 	stw	r7,164(sp)
  806abc:	382d883a 	mov	r22,r7
  806ac0:	dfc04415 	stw	ra,272(sp)
  806ac4:	200f883a 	mov	r7,r4
  806ac8:	df004315 	stw	fp,268(sp)
  806acc:	ddc04215 	stw	r23,264(sp)
  806ad0:	dcc03e15 	stw	r19,248(sp)
  806ad4:	dc803d15 	stw	r18,244(sp)
  806ad8:	a023883a 	mov	r17,r20
  806adc:	2809883a 	mov	r4,r5
  806ae0:	10000826 	beq	r2,zero,806b04 <__ieee754_pow+0x8c>
  806ae4:	a9a4703a 	and	r18,r21,r6
  806ae8:	009ffc34 	movhi	r2,32752
  806aec:	a827883a 	mov	r19,r21
  806af0:	1480180e 	bge	r2,r18,806b54 <__ieee754_pow+0xdc>
  806af4:	00b00434 	movhi	r2,49168
  806af8:	9085883a 	add	r2,r18,r2
  806afc:	8884b03a 	or	r2,r17,r2
  806b00:	1000321e 	bne	r2,zero,806bcc <__ieee754_pow+0x154>
  806b04:	0009883a 	mov	r4,zero
  806b08:	014ffc34 	movhi	r5,16368
  806b0c:	d9002815 	stw	r4,160(sp)
  806b10:	d9402915 	stw	r5,164(sp)
  806b14:	d9002817 	ldw	r4,160(sp)
  806b18:	d9402917 	ldw	r5,164(sp)
  806b1c:	2005883a 	mov	r2,r4
  806b20:	2807883a 	mov	r3,r5
  806b24:	dfc04417 	ldw	ra,272(sp)
  806b28:	df004317 	ldw	fp,268(sp)
  806b2c:	ddc04217 	ldw	r23,264(sp)
  806b30:	dd804117 	ldw	r22,260(sp)
  806b34:	dd404017 	ldw	r21,256(sp)
  806b38:	dd003f17 	ldw	r20,252(sp)
  806b3c:	dcc03e17 	ldw	r19,248(sp)
  806b40:	dc803d17 	ldw	r18,244(sp)
  806b44:	dc403c17 	ldw	r17,240(sp)
  806b48:	dc003b17 	ldw	r16,236(sp)
  806b4c:	dec04504 	addi	sp,sp,276
  806b50:	f800283a 	ret
  806b54:	90802b26 	beq	r18,r2,806c04 <__ieee754_pow+0x18c>
  806b58:	143fe616 	blt	r2,r16,806af4 <__ieee754_pow+0x7c>
  806b5c:	80806126 	beq	r16,r2,806ce4 <__ieee754_pow+0x26c>
  806b60:	982e403a 	cmpge	r23,r19,zero
  806b64:	b8004e26 	beq	r23,zero,806ca0 <__ieee754_pow+0x228>
  806b68:	0039883a 	mov	fp,zero
  806b6c:	3800281e 	bne	r7,zero,806c10 <__ieee754_pow+0x198>
  806b70:	009ffc34 	movhi	r2,32752
  806b74:	80804f26 	beq	r16,r2,806cb4 <__ieee754_pow+0x23c>
  806b78:	008ffc34 	movhi	r2,16368
  806b7c:	80808226 	beq	r16,r2,806d88 <__ieee754_pow+0x310>
  806b80:	00900034 	movhi	r2,16384
  806b84:	20828426 	beq	r4,r2,807598 <__ieee754_pow+0xb20>
  806b88:	008ff834 	movhi	r2,16352
  806b8c:	2080201e 	bne	r4,r2,806c10 <__ieee754_pow+0x198>
  806b90:	98001f16 	blt	r19,zero,806c10 <__ieee754_pow+0x198>
  806b94:	a80b883a 	mov	r5,r21
  806b98:	a009883a 	mov	r4,r20
  806b9c:	dfc04417 	ldw	ra,272(sp)
  806ba0:	df004317 	ldw	fp,268(sp)
  806ba4:	ddc04217 	ldw	r23,264(sp)
  806ba8:	dd804117 	ldw	r22,260(sp)
  806bac:	dd404017 	ldw	r21,256(sp)
  806bb0:	dd003f17 	ldw	r20,252(sp)
  806bb4:	dcc03e17 	ldw	r19,248(sp)
  806bb8:	dc803d17 	ldw	r18,244(sp)
  806bbc:	dc403c17 	ldw	r17,240(sp)
  806bc0:	dc003b17 	ldw	r16,236(sp)
  806bc4:	dec04504 	addi	sp,sp,276
  806bc8:	0807d781 	jmpi	807d78 <__ieee754_sqrt>
  806bcc:	010020b4 	movhi	r4,130
  806bd0:	2134a704 	addi	r4,r4,-11620
  806bd4:	dfc04417 	ldw	ra,272(sp)
  806bd8:	df004317 	ldw	fp,268(sp)
  806bdc:	ddc04217 	ldw	r23,264(sp)
  806be0:	dd804117 	ldw	r22,260(sp)
  806be4:	dd404017 	ldw	r21,256(sp)
  806be8:	dd003f17 	ldw	r20,252(sp)
  806bec:	dcc03e17 	ldw	r19,248(sp)
  806bf0:	dc803d17 	ldw	r18,244(sp)
  806bf4:	dc403c17 	ldw	r17,240(sp)
  806bf8:	dc003b17 	ldw	r16,236(sp)
  806bfc:	dec04504 	addi	sp,sp,276
  806c00:	08080ac1 	jmpi	8080ac <nan>
  806c04:	a03fbb1e 	bne	r20,zero,806af4 <__ieee754_pow+0x7c>
  806c08:	003fd306 	br	806b58 <__ieee754_pow+0xe0>
  806c0c:	0039883a 	mov	fp,zero
  806c10:	a009883a 	mov	r4,r20
  806c14:	a80b883a 	mov	r5,r21
  806c18:	08080400 	call	808040 <fabs>
  806c1c:	1015883a 	mov	r10,r2
  806c20:	1817883a 	mov	r11,r3
  806c24:	88001226 	beq	r17,zero,806c70 <__ieee754_pow+0x1f8>
  806c28:	9804d7fa 	srli	r2,r19,31
  806c2c:	10bfffc4 	addi	r2,r2,-1
  806c30:	1706b03a 	or	r3,r2,fp
  806c34:	d8802515 	stw	r2,148(sp)
  806c38:	18002c1e 	bne	r3,zero,806cec <__ieee754_pow+0x274>
  806c3c:	a80f883a 	mov	r7,r21
  806c40:	a009883a 	mov	r4,r20
  806c44:	a80b883a 	mov	r5,r21
  806c48:	a00d883a 	mov	r6,r20
  806c4c:	0808b400 	call	808b40 <__subdf3>
  806c50:	1009883a 	mov	r4,r2
  806c54:	180b883a 	mov	r5,r3
  806c58:	100d883a 	mov	r6,r2
  806c5c:	180f883a 	mov	r7,r3
  806c60:	0808ff80 	call	808ff8 <__divdf3>
  806c64:	d8802815 	stw	r2,160(sp)
  806c68:	d8c02915 	stw	r3,164(sp)
  806c6c:	003fa906 	br	806b14 <__ieee754_pow+0x9c>
  806c70:	009ffc34 	movhi	r2,32752
  806c74:	90800326 	beq	r18,r2,806c84 <__ieee754_pow+0x20c>
  806c78:	90000226 	beq	r18,zero,806c84 <__ieee754_pow+0x20c>
  806c7c:	008ffc34 	movhi	r2,16368
  806c80:	90bfe91e 	bne	r18,r2,806c28 <__ieee754_pow+0x1b0>
  806c84:	b0026316 	blt	r22,zero,807614 <__ieee754_pow+0xb9c>
  806c88:	5011883a 	mov	r8,r10
  806c8c:	5813883a 	mov	r9,r11
  806c90:	b8023126 	beq	r23,zero,807558 <__ieee754_pow+0xae0>
  806c94:	da002815 	stw	r8,160(sp)
  806c98:	da402915 	stw	r9,164(sp)
  806c9c:	003f9d06 	br	806b14 <__ieee754_pow+0x9c>
  806ca0:	0090d034 	movhi	r2,17216
  806ca4:	10bfffc4 	addi	r2,r2,-1
  806ca8:	1400270e 	bge	r2,r16,806d48 <__ieee754_pow+0x2d0>
  806cac:	07000084 	movi	fp,2
  806cb0:	003fae06 	br	806b6c <__ieee754_pow+0xf4>
  806cb4:	00b00434 	movhi	r2,49168
  806cb8:	9085883a 	add	r2,r18,r2
  806cbc:	8884b03a 	or	r2,r17,r2
  806cc0:	103f9026 	beq	r2,zero,806b04 <__ieee754_pow+0x8c>
  806cc4:	008ffc34 	movhi	r2,16368
  806cc8:	10bfffc4 	addi	r2,r2,-1
  806ccc:	1482d00e 	bge	r2,r18,807810 <__ieee754_pow+0xd98>
  806cd0:	b03f900e 	bge	r22,zero,806b14 <__ieee754_pow+0x9c>
  806cd4:	0005883a 	mov	r2,zero
  806cd8:	d8802815 	stw	r2,160(sp)
  806cdc:	d8802915 	stw	r2,164(sp)
  806ce0:	003f8c06 	br	806b14 <__ieee754_pow+0x9c>
  806ce4:	383f9e26 	beq	r7,zero,806b60 <__ieee754_pow+0xe8>
  806ce8:	003f8206 	br	806af4 <__ieee754_pow+0x7c>
  806cec:	00907834 	movhi	r2,16864
  806cf0:	1400290e 	bge	r2,r16,806d98 <__ieee754_pow+0x320>
  806cf4:	0090fc34 	movhi	r2,17392
  806cf8:	1402500e 	bge	r2,r16,80763c <__ieee754_pow+0xbc4>
  806cfc:	008ffc34 	movhi	r2,16368
  806d00:	10bfffc4 	addi	r2,r2,-1
  806d04:	14800b0e 	bge	r2,r18,806d34 <__ieee754_pow+0x2bc>
  806d08:	05800b0e 	bge	zero,r22,806d38 <__ieee754_pow+0x2c0>
  806d0c:	00a20034 	movhi	r2,34816
  806d10:	109d6704 	addi	r2,r2,30108
  806d14:	00df8e34 	movhi	r3,32312
  806d18:	18f90f04 	addi	r3,r3,-7108
  806d1c:	100d883a 	mov	r6,r2
  806d20:	180f883a 	mov	r7,r3
  806d24:	1009883a 	mov	r4,r2
  806d28:	180b883a 	mov	r5,r3
  806d2c:	0808c340 	call	808c34 <__muldf3>
  806d30:	003fcc06 	br	806c64 <__ieee754_pow+0x1ec>
  806d34:	b03ff516 	blt	r22,zero,806d0c <__ieee754_pow+0x294>
  806d38:	0007883a 	mov	r3,zero
  806d3c:	d8c02815 	stw	r3,160(sp)
  806d40:	d8c02915 	stw	r3,164(sp)
  806d44:	003f7306 	br	806b14 <__ieee754_pow+0x9c>
  806d48:	008ffc34 	movhi	r2,16368
  806d4c:	10bfffc4 	addi	r2,r2,-1
  806d50:	143f850e 	bge	r2,r16,806b68 <__ieee754_pow+0xf0>
  806d54:	8005d53a 	srai	r2,r16,20
  806d58:	01400504 	movi	r5,20
  806d5c:	10ff0044 	addi	r3,r2,-1023
  806d60:	28c3e10e 	bge	r5,r3,807ce8 <__ieee754_pow+0x1270>
  806d64:	00800d04 	movi	r2,52
  806d68:	10c5c83a 	sub	r2,r2,r3
  806d6c:	3886d83a 	srl	r3,r7,r2
  806d70:	1884983a 	sll	r2,r3,r2
  806d74:	38bf7c1e 	bne	r7,r2,806b68 <__ieee754_pow+0xf0>
  806d78:	18c0004c 	andi	r3,r3,1
  806d7c:	00800084 	movi	r2,2
  806d80:	10f9c83a 	sub	fp,r2,r3
  806d84:	003f7906 	br	806b6c <__ieee754_pow+0xf4>
  806d88:	b0038516 	blt	r22,zero,807ba0 <__ieee754_pow+0x1128>
  806d8c:	dd002815 	stw	r20,160(sp)
  806d90:	dd402915 	stw	r21,164(sp)
  806d94:	003f5f06 	br	806b14 <__ieee754_pow+0x9c>
  806d98:	00800434 	movhi	r2,16
  806d9c:	10bfffc4 	addi	r2,r2,-1
  806da0:	1482900e 	bge	r2,r18,8077e4 <__ieee754_pow+0xd6c>
  806da4:	000b883a 	mov	r5,zero
  806da8:	9005d53a 	srai	r2,r18,20
  806dac:	00c00434 	movhi	r3,16
  806db0:	18ffffc4 	addi	r3,r3,-1
  806db4:	90c8703a 	and	r4,r18,r3
  806db8:	2887883a 	add	r3,r5,r2
  806dbc:	18bf0044 	addi	r2,r3,-1023
  806dc0:	d8800015 	stw	r2,0(sp)
  806dc4:	00800134 	movhi	r2,4
  806dc8:	10a62384 	addi	r2,r2,-26482
  806dcc:	250ffc34 	orhi	r20,r4,16368
  806dd0:	1101ee0e 	bge	r2,r4,80758c <__ieee754_pow+0xb14>
  806dd4:	00800334 	movhi	r2,12
  806dd8:	10ad9e44 	addi	r2,r2,-18823
  806ddc:	1101e716 	blt	r2,r4,80757c <__ieee754_pow+0xb04>
  806de0:	01000044 	movi	r4,1
  806de4:	04000334 	movhi	r16,12
  806de8:	200890fa 	slli	r4,r4,3
  806dec:	da800115 	stw	r10,4(sp)
  806df0:	dd000215 	stw	r20,8(sp)
  806df4:	d9002c15 	stw	r4,176(sp)
  806df8:	d9402c17 	ldw	r5,176(sp)
  806dfc:	010020b4 	movhi	r4,130
  806e00:	21343d04 	addi	r4,r4,-12044
  806e04:	a02bd07a 	srai	r21,r20,1
  806e08:	2909883a 	add	r4,r5,r4
  806e0c:	25800017 	ldw	r22,0(r4)
  806e10:	25c00117 	ldw	r23,4(r4)
  806e14:	a00b883a 	mov	r5,r20
  806e18:	5009883a 	mov	r4,r10
  806e1c:	b00d883a 	mov	r6,r22
  806e20:	b80f883a 	mov	r7,r23
  806e24:	0808b400 	call	808b40 <__subdf3>
  806e28:	d9000117 	ldw	r4,4(sp)
  806e2c:	a00b883a 	mov	r5,r20
  806e30:	b00d883a 	mov	r6,r22
  806e34:	b80f883a 	mov	r7,r23
  806e38:	1025883a 	mov	r18,r2
  806e3c:	1827883a 	mov	r19,r3
  806e40:	0808bc00 	call	808bc0 <__adddf3>
  806e44:	0011883a 	mov	r8,zero
  806e48:	024ffc34 	movhi	r9,16368
  806e4c:	480b883a 	mov	r5,r9
  806e50:	4009883a 	mov	r4,r8
  806e54:	180f883a 	mov	r7,r3
  806e58:	100d883a 	mov	r6,r2
  806e5c:	0808ff80 	call	808ff8 <__divdf3>
  806e60:	d8c02e15 	stw	r3,184(sp)
  806e64:	d8800f15 	stw	r2,60(sp)
  806e68:	d8802d15 	stw	r2,180(sp)
  806e6c:	d8802e17 	ldw	r2,184(sp)
  806e70:	d9800f17 	ldw	r6,60(sp)
  806e74:	9009883a 	mov	r4,r18
  806e78:	980b883a 	mov	r5,r19
  806e7c:	100f883a 	mov	r7,r2
  806e80:	dc800b15 	stw	r18,44(sp)
  806e84:	dcc00c15 	stw	r19,48(sp)
  806e88:	d8801015 	stw	r2,64(sp)
  806e8c:	0808c340 	call	808c34 <__muldf3>
  806e90:	d8c03015 	stw	r3,192(sp)
  806e94:	d9003017 	ldw	r4,192(sp)
  806e98:	d8802f15 	stw	r2,188(sp)
  806e9c:	d8800315 	stw	r2,12(sp)
  806ea0:	ad480034 	orhi	r21,r21,8192
  806ea4:	0005883a 	mov	r2,zero
  806ea8:	ac2b883a 	add	r21,r21,r16
  806eac:	000b883a 	mov	r5,zero
  806eb0:	1021883a 	mov	r16,r2
  806eb4:	2005883a 	mov	r2,r4
  806eb8:	800d883a 	mov	r6,r16
  806ebc:	a80f883a 	mov	r7,r21
  806ec0:	d9000415 	stw	r4,16(sp)
  806ec4:	d9002715 	stw	r4,156(sp)
  806ec8:	d9402615 	stw	r5,152(sp)
  806ecc:	d9401615 	stw	r5,88(sp)
  806ed0:	d9001715 	stw	r4,92(sp)
  806ed4:	100b883a 	mov	r5,r2
  806ed8:	0009883a 	mov	r4,zero
  806edc:	0808c340 	call	808c34 <__muldf3>
  806ee0:	d9000b17 	ldw	r4,44(sp)
  806ee4:	980b883a 	mov	r5,r19
  806ee8:	180f883a 	mov	r7,r3
  806eec:	100d883a 	mov	r6,r2
  806ef0:	0808b400 	call	808b40 <__subdf3>
  806ef4:	8009883a 	mov	r4,r16
  806ef8:	a80b883a 	mov	r5,r21
  806efc:	b80f883a 	mov	r7,r23
  806f00:	b00d883a 	mov	r6,r22
  806f04:	1021883a 	mov	r16,r2
  806f08:	1823883a 	mov	r17,r3
  806f0c:	0808b400 	call	808b40 <__subdf3>
  806f10:	d9000117 	ldw	r4,4(sp)
  806f14:	a00b883a 	mov	r5,r20
  806f18:	180f883a 	mov	r7,r3
  806f1c:	100d883a 	mov	r6,r2
  806f20:	0808b400 	call	808b40 <__subdf3>
  806f24:	d9001617 	ldw	r4,88(sp)
  806f28:	d9402717 	ldw	r5,156(sp)
  806f2c:	180f883a 	mov	r7,r3
  806f30:	100d883a 	mov	r6,r2
  806f34:	0808c340 	call	808c34 <__muldf3>
  806f38:	180f883a 	mov	r7,r3
  806f3c:	880b883a 	mov	r5,r17
  806f40:	8009883a 	mov	r4,r16
  806f44:	100d883a 	mov	r6,r2
  806f48:	0808b400 	call	808b40 <__subdf3>
  806f4c:	d9000f17 	ldw	r4,60(sp)
  806f50:	d9402e17 	ldw	r5,184(sp)
  806f54:	180f883a 	mov	r7,r3
  806f58:	100d883a 	mov	r6,r2
  806f5c:	0808c340 	call	808c34 <__muldf3>
  806f60:	d9000317 	ldw	r4,12(sp)
  806f64:	d9403017 	ldw	r5,192(sp)
  806f68:	d8803115 	stw	r2,196(sp)
  806f6c:	200d883a 	mov	r6,r4
  806f70:	280f883a 	mov	r7,r5
  806f74:	d8c03215 	stw	r3,200(sp)
  806f78:	0808c340 	call	808c34 <__muldf3>
  806f7c:	1009883a 	mov	r4,r2
  806f80:	180b883a 	mov	r5,r3
  806f84:	100d883a 	mov	r6,r2
  806f88:	180f883a 	mov	r7,r3
  806f8c:	1021883a 	mov	r16,r2
  806f90:	1823883a 	mov	r17,r3
  806f94:	0808c340 	call	808c34 <__muldf3>
  806f98:	02129174 	movhi	r8,19013
  806f9c:	4213bbc4 	addi	r8,r8,20207
  806fa0:	024ff2b4 	movhi	r9,16330
  806fa4:	4a5f8a04 	addi	r9,r9,32296
  806fa8:	480f883a 	mov	r7,r9
  806fac:	8009883a 	mov	r4,r16
  806fb0:	880b883a 	mov	r5,r17
  806fb4:	400d883a 	mov	r6,r8
  806fb8:	1029883a 	mov	r20,r2
  806fbc:	182b883a 	mov	r21,r3
  806fc0:	0808c340 	call	808c34 <__muldf3>
  806fc4:	0224f2b4 	movhi	r8,37834
  806fc8:	4236d944 	addi	r8,r8,-9371
  806fcc:	024ff3b4 	movhi	r9,16334
  806fd0:	4a619284 	addi	r9,r9,-31158
  806fd4:	480f883a 	mov	r7,r9
  806fd8:	400d883a 	mov	r6,r8
  806fdc:	180b883a 	mov	r5,r3
  806fe0:	1009883a 	mov	r4,r2
  806fe4:	0808bc00 	call	808bc0 <__adddf3>
  806fe8:	180f883a 	mov	r7,r3
  806fec:	8009883a 	mov	r4,r16
  806ff0:	880b883a 	mov	r5,r17
  806ff4:	100d883a 	mov	r6,r2
  806ff8:	0808c340 	call	808c34 <__muldf3>
  806ffc:	022a4774 	movhi	r8,43293
  807000:	42104044 	addi	r8,r8,16641
  807004:	024ff474 	movhi	r9,16337
  807008:	4a5d1804 	addi	r9,r9,29792
  80700c:	480f883a 	mov	r7,r9
  807010:	400d883a 	mov	r6,r8
  807014:	180b883a 	mov	r5,r3
  807018:	1009883a 	mov	r4,r2
  80701c:	0808bc00 	call	808bc0 <__adddf3>
  807020:	180f883a 	mov	r7,r3
  807024:	8009883a 	mov	r4,r16
  807028:	880b883a 	mov	r5,r17
  80702c:	100d883a 	mov	r6,r2
  807030:	0808c340 	call	808c34 <__muldf3>
  807034:	021463f4 	movhi	r8,20879
  807038:	42099344 	addi	r8,r8,9805
  80703c:	024ff574 	movhi	r9,16341
  807040:	4a555544 	addi	r9,r9,21845
  807044:	480f883a 	mov	r7,r9
  807048:	400d883a 	mov	r6,r8
  80704c:	180b883a 	mov	r5,r3
  807050:	1009883a 	mov	r4,r2
  807054:	0808bc00 	call	808bc0 <__adddf3>
  807058:	180f883a 	mov	r7,r3
  80705c:	8009883a 	mov	r4,r16
  807060:	880b883a 	mov	r5,r17
  807064:	100d883a 	mov	r6,r2
  807068:	0808c340 	call	808c34 <__muldf3>
  80706c:	0236dc34 	movhi	r8,56176
  807070:	422affc4 	addi	r8,r8,-21505
  807074:	024ff6f4 	movhi	r9,16347
  807078:	4a5b6d84 	addi	r9,r9,28086
  80707c:	480f883a 	mov	r7,r9
  807080:	400d883a 	mov	r6,r8
  807084:	180b883a 	mov	r5,r3
  807088:	1009883a 	mov	r4,r2
  80708c:	0808bc00 	call	808bc0 <__adddf3>
  807090:	180f883a 	mov	r7,r3
  807094:	8009883a 	mov	r4,r16
  807098:	880b883a 	mov	r5,r17
  80709c:	100d883a 	mov	r6,r2
  8070a0:	0808c340 	call	808c34 <__muldf3>
  8070a4:	020cccf4 	movhi	r8,13107
  8070a8:	420cc0c4 	addi	r8,r8,13059
  8070ac:	024ff8f4 	movhi	r9,16355
  8070b0:	4a4cccc4 	addi	r9,r9,13107
  8070b4:	480f883a 	mov	r7,r9
  8070b8:	400d883a 	mov	r6,r8
  8070bc:	180b883a 	mov	r5,r3
  8070c0:	1009883a 	mov	r4,r2
  8070c4:	0808bc00 	call	808bc0 <__adddf3>
  8070c8:	180f883a 	mov	r7,r3
  8070cc:	a80b883a 	mov	r5,r21
  8070d0:	a009883a 	mov	r4,r20
  8070d4:	100d883a 	mov	r6,r2
  8070d8:	0808c340 	call	808c34 <__muldf3>
  8070dc:	d9000317 	ldw	r4,12(sp)
  8070e0:	d9403017 	ldw	r5,192(sp)
  8070e4:	d9801617 	ldw	r6,88(sp)
  8070e8:	d9c02717 	ldw	r7,156(sp)
  8070ec:	1021883a 	mov	r16,r2
  8070f0:	1823883a 	mov	r17,r3
  8070f4:	0808bc00 	call	808bc0 <__adddf3>
  8070f8:	d9003117 	ldw	r4,196(sp)
  8070fc:	d9403217 	ldw	r5,200(sp)
  807100:	180f883a 	mov	r7,r3
  807104:	100d883a 	mov	r6,r2
  807108:	d9001415 	stw	r4,80(sp)
  80710c:	d9401515 	stw	r5,84(sp)
  807110:	0808c340 	call	808c34 <__muldf3>
  807114:	180f883a 	mov	r7,r3
  807118:	8009883a 	mov	r4,r16
  80711c:	880b883a 	mov	r5,r17
  807120:	100d883a 	mov	r6,r2
  807124:	0808bc00 	call	808bc0 <__adddf3>
  807128:	d9001617 	ldw	r4,88(sp)
  80712c:	d9402717 	ldw	r5,156(sp)
  807130:	d8803315 	stw	r2,204(sp)
  807134:	200d883a 	mov	r6,r4
  807138:	280f883a 	mov	r7,r5
  80713c:	d8c03415 	stw	r3,208(sp)
  807140:	0808c340 	call	808c34 <__muldf3>
  807144:	182f883a 	mov	r23,r3
  807148:	05500234 	movhi	r21,16392
  80714c:	0029883a 	mov	r20,zero
  807150:	b80b883a 	mov	r5,r23
  807154:	a00d883a 	mov	r6,r20
  807158:	a80f883a 	mov	r7,r21
  80715c:	1009883a 	mov	r4,r2
  807160:	d8800715 	stw	r2,28(sp)
  807164:	d8c00815 	stw	r3,32(sp)
  807168:	0808bc00 	call	808bc0 <__adddf3>
  80716c:	d9003317 	ldw	r4,204(sp)
  807170:	d9403417 	ldw	r5,208(sp)
  807174:	180f883a 	mov	r7,r3
  807178:	100d883a 	mov	r6,r2
  80717c:	d9000515 	stw	r4,20(sp)
  807180:	d9400615 	stw	r5,24(sp)
  807184:	0808bc00 	call	808bc0 <__adddf3>
  807188:	d9001617 	ldw	r4,88(sp)
  80718c:	d9402717 	ldw	r5,156(sp)
  807190:	0025883a 	mov	r18,zero
  807194:	900d883a 	mov	r6,r18
  807198:	180f883a 	mov	r7,r3
  80719c:	1823883a 	mov	r17,r3
  8071a0:	0808c340 	call	808c34 <__muldf3>
  8071a4:	d9001417 	ldw	r4,80(sp)
  8071a8:	d9403217 	ldw	r5,200(sp)
  8071ac:	880f883a 	mov	r7,r17
  8071b0:	900d883a 	mov	r6,r18
  8071b4:	d8803515 	stw	r2,212(sp)
  8071b8:	d8c03615 	stw	r3,216(sp)
  8071bc:	0808c340 	call	808c34 <__muldf3>
  8071c0:	a80f883a 	mov	r7,r21
  8071c4:	880b883a 	mov	r5,r17
  8071c8:	000d883a 	mov	r6,zero
  8071cc:	9009883a 	mov	r4,r18
  8071d0:	1021883a 	mov	r16,r2
  8071d4:	1823883a 	mov	r17,r3
  8071d8:	0808b400 	call	808b40 <__subdf3>
  8071dc:	d9800717 	ldw	r6,28(sp)
  8071e0:	b80f883a 	mov	r7,r23
  8071e4:	180b883a 	mov	r5,r3
  8071e8:	1009883a 	mov	r4,r2
  8071ec:	0808b400 	call	808b40 <__subdf3>
  8071f0:	d9000517 	ldw	r4,20(sp)
  8071f4:	d9403417 	ldw	r5,208(sp)
  8071f8:	180f883a 	mov	r7,r3
  8071fc:	100d883a 	mov	r6,r2
  807200:	0808b400 	call	808b40 <__subdf3>
  807204:	d9000317 	ldw	r4,12(sp)
  807208:	d9403017 	ldw	r5,192(sp)
  80720c:	180f883a 	mov	r7,r3
  807210:	100d883a 	mov	r6,r2
  807214:	0808c340 	call	808c34 <__muldf3>
  807218:	180f883a 	mov	r7,r3
  80721c:	880b883a 	mov	r5,r17
  807220:	8009883a 	mov	r4,r16
  807224:	100d883a 	mov	r6,r2
  807228:	0808bc00 	call	808bc0 <__adddf3>
  80722c:	102d883a 	mov	r22,r2
  807230:	d9003617 	ldw	r4,216(sp)
  807234:	d8803517 	ldw	r2,212(sp)
  807238:	d9403617 	ldw	r5,216(sp)
  80723c:	182f883a 	mov	r23,r3
  807240:	b00d883a 	mov	r6,r22
  807244:	b80f883a 	mov	r7,r23
  807248:	d9000a15 	stw	r4,40(sp)
  80724c:	1009883a 	mov	r4,r2
  807250:	054ffbf4 	movhi	r21,16367
  807254:	ad71c244 	addi	r21,r21,-14583
  807258:	dd800d15 	stw	r22,52(sp)
  80725c:	ddc00e15 	stw	r23,56(sp)
  807260:	05380034 	movhi	r20,57344
  807264:	d8800915 	stw	r2,36(sp)
  807268:	0808bc00 	call	808bc0 <__adddf3>
  80726c:	180b883a 	mov	r5,r3
  807270:	a00d883a 	mov	r6,r20
  807274:	a80f883a 	mov	r7,r21
  807278:	9009883a 	mov	r4,r18
  80727c:	1823883a 	mov	r17,r3
  807280:	0808c340 	call	808c34 <__muldf3>
  807284:	020516f4 	movhi	r8,5211
  807288:	42007d44 	addi	r8,r8,501
  80728c:	026f8fb4 	movhi	r9,48702
  807290:	4a4bf804 	addi	r9,r9,12256
  807294:	480f883a 	mov	r7,r9
  807298:	400d883a 	mov	r6,r8
  80729c:	880b883a 	mov	r5,r17
  8072a0:	9009883a 	mov	r4,r18
  8072a4:	d8803715 	stw	r2,220(sp)
  8072a8:	d8c03815 	stw	r3,224(sp)
  8072ac:	0808c340 	call	808c34 <__muldf3>
  8072b0:	d9800917 	ldw	r6,36(sp)
  8072b4:	d9c03617 	ldw	r7,216(sp)
  8072b8:	880b883a 	mov	r5,r17
  8072bc:	9009883a 	mov	r4,r18
  8072c0:	1021883a 	mov	r16,r2
  8072c4:	1823883a 	mov	r17,r3
  8072c8:	0808b400 	call	808b40 <__subdf3>
  8072cc:	d9000d17 	ldw	r4,52(sp)
  8072d0:	b80b883a 	mov	r5,r23
  8072d4:	180f883a 	mov	r7,r3
  8072d8:	100d883a 	mov	r6,r2
  8072dc:	0808b400 	call	808b40 <__subdf3>
  8072e0:	180b883a 	mov	r5,r3
  8072e4:	a80f883a 	mov	r7,r21
  8072e8:	01b70eb4 	movhi	r6,56378
  8072ec:	3180ff44 	addi	r6,r6,1021
  8072f0:	1009883a 	mov	r4,r2
  8072f4:	0808c340 	call	808c34 <__muldf3>
  8072f8:	180f883a 	mov	r7,r3
  8072fc:	880b883a 	mov	r5,r17
  807300:	8009883a 	mov	r4,r16
  807304:	100d883a 	mov	r6,r2
  807308:	0808bc00 	call	808bc0 <__adddf3>
  80730c:	d9402c17 	ldw	r5,176(sp)
  807310:	010020b4 	movhi	r4,130
  807314:	21344104 	addi	r4,r4,-12028
  807318:	2909883a 	add	r4,r5,r4
  80731c:	22400117 	ldw	r9,4(r4)
  807320:	22000017 	ldw	r8,0(r4)
  807324:	180b883a 	mov	r5,r3
  807328:	480f883a 	mov	r7,r9
  80732c:	400d883a 	mov	r6,r8
  807330:	1009883a 	mov	r4,r2
  807334:	0808bc00 	call	808bc0 <__adddf3>
  807338:	d9000017 	ldw	r4,0(sp)
  80733c:	182f883a 	mov	r23,r3
  807340:	102d883a 	mov	r22,r2
  807344:	08094f80 	call	8094f8 <__floatsidf>
  807348:	d9402c17 	ldw	r5,176(sp)
  80734c:	010020b4 	movhi	r4,130
  807350:	21344504 	addi	r4,r4,-12012
  807354:	b00d883a 	mov	r6,r22
  807358:	2911883a 	add	r8,r5,r4
  80735c:	d9003717 	ldw	r4,220(sp)
  807360:	d9403817 	ldw	r5,224(sp)
  807364:	45000017 	ldw	r20,0(r8)
  807368:	d9002315 	stw	r4,140(sp)
  80736c:	d9003817 	ldw	r4,224(sp)
  807370:	45400117 	ldw	r21,4(r8)
  807374:	b80f883a 	mov	r7,r23
  807378:	d9002415 	stw	r4,144(sp)
  80737c:	d9002317 	ldw	r4,140(sp)
  807380:	1021883a 	mov	r16,r2
  807384:	1823883a 	mov	r17,r3
  807388:	dd802115 	stw	r22,132(sp)
  80738c:	ddc02215 	stw	r23,136(sp)
  807390:	0808bc00 	call	808bc0 <__adddf3>
  807394:	180b883a 	mov	r5,r3
  807398:	1009883a 	mov	r4,r2
  80739c:	a00d883a 	mov	r6,r20
  8073a0:	a80f883a 	mov	r7,r21
  8073a4:	0808bc00 	call	808bc0 <__adddf3>
  8073a8:	180f883a 	mov	r7,r3
  8073ac:	8009883a 	mov	r4,r16
  8073b0:	880b883a 	mov	r5,r17
  8073b4:	100d883a 	mov	r6,r2
  8073b8:	0808bc00 	call	808bc0 <__adddf3>
  8073bc:	180b883a 	mov	r5,r3
  8073c0:	0009883a 	mov	r4,zero
  8073c4:	800d883a 	mov	r6,r16
  8073c8:	880f883a 	mov	r7,r17
  8073cc:	d9001b15 	stw	r4,108(sp)
  8073d0:	d8c01c15 	stw	r3,112(sp)
  8073d4:	0808b400 	call	808b40 <__subdf3>
  8073d8:	180b883a 	mov	r5,r3
  8073dc:	a80f883a 	mov	r7,r21
  8073e0:	1009883a 	mov	r4,r2
  8073e4:	a00d883a 	mov	r6,r20
  8073e8:	0808b400 	call	808b40 <__subdf3>
  8073ec:	d9802317 	ldw	r6,140(sp)
  8073f0:	d9c03817 	ldw	r7,224(sp)
  8073f4:	180b883a 	mov	r5,r3
  8073f8:	1009883a 	mov	r4,r2
  8073fc:	0808b400 	call	808b40 <__subdf3>
  807400:	d9002117 	ldw	r4,132(sp)
  807404:	1011883a 	mov	r8,r2
  807408:	1813883a 	mov	r9,r3
  80740c:	b80b883a 	mov	r5,r23
  807410:	480f883a 	mov	r7,r9
  807414:	400d883a 	mov	r6,r8
  807418:	0808b400 	call	808b40 <__subdf3>
  80741c:	1823883a 	mov	r17,r3
  807420:	d8c02517 	ldw	r3,148(sp)
  807424:	1021883a 	mov	r16,r2
  807428:	e0bfffc4 	addi	r2,fp,-1
  80742c:	1884b03a 	or	r2,r3,r2
  807430:	1000731e 	bne	r2,zero,807600 <__ieee754_pow+0xb88>
  807434:	0009883a 	mov	r4,zero
  807438:	016ffc34 	movhi	r5,49136
  80743c:	d9001915 	stw	r4,100(sp)
  807440:	d9401a15 	stw	r5,104(sp)
  807444:	d9402917 	ldw	r5,164(sp)
  807448:	d9002817 	ldw	r4,160(sp)
  80744c:	0029883a 	mov	r20,zero
  807450:	a00d883a 	mov	r6,r20
  807454:	280f883a 	mov	r7,r5
  807458:	2827883a 	mov	r19,r5
  80745c:	0808b400 	call	808b40 <__subdf3>
  807460:	d9001b17 	ldw	r4,108(sp)
  807464:	d9401c17 	ldw	r5,112(sp)
  807468:	180f883a 	mov	r7,r3
  80746c:	100d883a 	mov	r6,r2
  807470:	0808c340 	call	808c34 <__muldf3>
  807474:	d9c02917 	ldw	r7,164(sp)
  807478:	d9802817 	ldw	r6,160(sp)
  80747c:	880b883a 	mov	r5,r17
  807480:	8009883a 	mov	r4,r16
  807484:	1823883a 	mov	r17,r3
  807488:	1021883a 	mov	r16,r2
  80748c:	0808c340 	call	808c34 <__muldf3>
  807490:	180f883a 	mov	r7,r3
  807494:	880b883a 	mov	r5,r17
  807498:	8009883a 	mov	r4,r16
  80749c:	100d883a 	mov	r6,r2
  8074a0:	0808bc00 	call	808bc0 <__adddf3>
  8074a4:	d9401c17 	ldw	r5,112(sp)
  8074a8:	d9001b17 	ldw	r4,108(sp)
  8074ac:	a00d883a 	mov	r6,r20
  8074b0:	980f883a 	mov	r7,r19
  8074b4:	1029883a 	mov	r20,r2
  8074b8:	182b883a 	mov	r21,r3
  8074bc:	0808c340 	call	808c34 <__muldf3>
  8074c0:	1025883a 	mov	r18,r2
  8074c4:	1827883a 	mov	r19,r3
  8074c8:	a009883a 	mov	r4,r20
  8074cc:	a80b883a 	mov	r5,r21
  8074d0:	900d883a 	mov	r6,r18
  8074d4:	980f883a 	mov	r7,r19
  8074d8:	dd001d15 	stw	r20,116(sp)
  8074dc:	dc801f15 	stw	r18,124(sp)
  8074e0:	dd401e15 	stw	r21,120(sp)
  8074e4:	dcc02015 	stw	r19,128(sp)
  8074e8:	0808bc00 	call	808bc0 <__adddf3>
  8074ec:	1823883a 	mov	r17,r3
  8074f0:	01102434 	movhi	r4,16528
  8074f4:	213fffc4 	addi	r4,r4,-1
  8074f8:	1021883a 	mov	r16,r2
  8074fc:	182f883a 	mov	r23,r3
  807500:	dc401815 	stw	r17,96(sp)
  807504:	100b883a 	mov	r5,r2
  807508:	20c02c0e 	bge	r4,r3,8075bc <__ieee754_pow+0xb44>
  80750c:	00afdc34 	movhi	r2,49008
  807510:	1885883a 	add	r2,r3,r2
  807514:	2884b03a 	or	r2,r5,r2
  807518:	1001a626 	beq	r2,zero,807bb4 <__ieee754_pow+0x113c>
  80751c:	04220034 	movhi	r16,34816
  807520:	841d6704 	addi	r16,r16,30108
  807524:	045f8e34 	movhi	r17,32312
  807528:	8c790f04 	addi	r17,r17,-7108
  80752c:	d9401a17 	ldw	r5,104(sp)
  807530:	d9001917 	ldw	r4,100(sp)
  807534:	800d883a 	mov	r6,r16
  807538:	880f883a 	mov	r7,r17
  80753c:	0808c340 	call	808c34 <__muldf3>
  807540:	180b883a 	mov	r5,r3
  807544:	800d883a 	mov	r6,r16
  807548:	880f883a 	mov	r7,r17
  80754c:	1009883a 	mov	r4,r2
  807550:	0808c340 	call	808c34 <__muldf3>
  807554:	003dc306 	br	806c64 <__ieee754_pow+0x1ec>
  807558:	00b00434 	movhi	r2,49168
  80755c:	9085883a 	add	r2,r18,r2
  807560:	e084b03a 	or	r2,fp,r2
  807564:	1000af1e 	bne	r2,zero,807824 <__ieee754_pow+0xdac>
  807568:	480f883a 	mov	r7,r9
  80756c:	4009883a 	mov	r4,r8
  807570:	480b883a 	mov	r5,r9
  807574:	400d883a 	mov	r6,r8
  807578:	003db406 	br	806c4c <__ieee754_pow+0x1d4>
  80757c:	00bffc34 	movhi	r2,65520
  807580:	18ff0084 	addi	r3,r3,-1022
  807584:	a0a9883a 	add	r20,r20,r2
  807588:	d8c00015 	stw	r3,0(sp)
  80758c:	0009883a 	mov	r4,zero
  807590:	04000234 	movhi	r16,8
  807594:	003e1406 	br	806de8 <__ieee754_pow+0x370>
  807598:	a80f883a 	mov	r7,r21
  80759c:	a009883a 	mov	r4,r20
  8075a0:	a80b883a 	mov	r5,r21
  8075a4:	a00d883a 	mov	r6,r20
  8075a8:	0808c340 	call	808c34 <__muldf3>
  8075ac:	180b883a 	mov	r5,r3
  8075b0:	d8802815 	stw	r2,160(sp)
  8075b4:	d9402915 	stw	r5,164(sp)
  8075b8:	003d5606 	br	806b14 <__ieee754_pow+0x9c>
  8075bc:	d9001817 	ldw	r4,96(sp)
  8075c0:	00a00034 	movhi	r2,32768
  8075c4:	10bfffc4 	addi	r2,r2,-1
  8075c8:	00d02474 	movhi	r3,16529
  8075cc:	18f2ffc4 	addi	r3,r3,-13313
  8075d0:	20b8703a 	and	fp,r4,r2
  8075d4:	1f009d0e 	bge	r3,fp,80784c <__ieee754_pow+0xdd4>
  8075d8:	008fdbf4 	movhi	r2,16239
  8075dc:	108d0004 	addi	r2,r2,13312
  8075e0:	2085883a 	add	r2,r4,r2
  8075e4:	1144b03a 	or	r2,r2,r5
  8075e8:	1001c626 	beq	r2,zero,807d04 <__ieee754_pow+0x128c>
  8075ec:	0430be74 	movhi	r16,49913
  8075f0:	843cd644 	addi	r16,r16,-3239
  8075f4:	04406974 	movhi	r17,421
  8075f8:	8c5b87c4 	addi	r17,r17,28191
  8075fc:	003fcb06 	br	80752c <__ieee754_pow+0xab4>
  807600:	0005883a 	mov	r2,zero
  807604:	00cffc34 	movhi	r3,16368
  807608:	d8801915 	stw	r2,100(sp)
  80760c:	d8c01a15 	stw	r3,104(sp)
  807610:	003f8c06 	br	807444 <__ieee754_pow+0x9cc>
  807614:	0005883a 	mov	r2,zero
  807618:	00cffc34 	movhi	r3,16368
  80761c:	180b883a 	mov	r5,r3
  807620:	580f883a 	mov	r7,r11
  807624:	1009883a 	mov	r4,r2
  807628:	500d883a 	mov	r6,r10
  80762c:	0808ff80 	call	808ff8 <__divdf3>
  807630:	1011883a 	mov	r8,r2
  807634:	1813883a 	mov	r9,r3
  807638:	003d9506 	br	806c90 <__ieee754_pow+0x218>
  80763c:	008ffc34 	movhi	r2,16368
  807640:	10bfff84 	addi	r2,r2,-2
  807644:	14bdbb0e 	bge	r2,r18,806d34 <__ieee754_pow+0x2bc>
  807648:	008ffc34 	movhi	r2,16368
  80764c:	14bdae16 	blt	r2,r18,806d08 <__ieee754_pow+0x290>
  807650:	580b883a 	mov	r5,r11
  807654:	5009883a 	mov	r4,r10
  807658:	000d883a 	mov	r6,zero
  80765c:	100f883a 	mov	r7,r2
  807660:	0808b400 	call	808b40 <__subdf3>
  807664:	1021883a 	mov	r16,r2
  807668:	1823883a 	mov	r17,r3
  80766c:	00980034 	movhi	r2,24576
  807670:	00cffdf4 	movhi	r3,16375
  807674:	18c551c4 	addi	r3,r3,5447
  807678:	8009883a 	mov	r4,r16
  80767c:	880b883a 	mov	r5,r17
  807680:	180f883a 	mov	r7,r3
  807684:	100d883a 	mov	r6,r2
  807688:	0808c340 	call	808c34 <__muldf3>
  80768c:	023e17b4 	movhi	r8,63582
  807690:	4237d104 	addi	r8,r8,-8380
  807694:	024f9574 	movhi	r9,15957
  807698:	4a6b82c4 	addi	r9,r9,-20981
  80769c:	480f883a 	mov	r7,r9
  8076a0:	400d883a 	mov	r6,r8
  8076a4:	8009883a 	mov	r4,r16
  8076a8:	880b883a 	mov	r5,r17
  8076ac:	102d883a 	mov	r22,r2
  8076b0:	182f883a 	mov	r23,r3
  8076b4:	0808c340 	call	808c34 <__muldf3>
  8076b8:	8009883a 	mov	r4,r16
  8076bc:	880b883a 	mov	r5,r17
  8076c0:	800d883a 	mov	r6,r16
  8076c4:	880f883a 	mov	r7,r17
  8076c8:	d8802a15 	stw	r2,168(sp)
  8076cc:	d8c02b15 	stw	r3,172(sp)
  8076d0:	0808c340 	call	808c34 <__muldf3>
  8076d4:	0011883a 	mov	r8,zero
  8076d8:	026ff434 	movhi	r9,49104
  8076dc:	480f883a 	mov	r7,r9
  8076e0:	8009883a 	mov	r4,r16
  8076e4:	880b883a 	mov	r5,r17
  8076e8:	400d883a 	mov	r6,r8
  8076ec:	1029883a 	mov	r20,r2
  8076f0:	182b883a 	mov	r21,r3
  8076f4:	0808c340 	call	808c34 <__muldf3>
  8076f8:	02155574 	movhi	r8,21845
  8076fc:	42155544 	addi	r8,r8,21845
  807700:	024ff574 	movhi	r9,16341
  807704:	4a555544 	addi	r9,r9,21845
  807708:	480f883a 	mov	r7,r9
  80770c:	400d883a 	mov	r6,r8
  807710:	180b883a 	mov	r5,r3
  807714:	1009883a 	mov	r4,r2
  807718:	0808bc00 	call	808bc0 <__adddf3>
  80771c:	180f883a 	mov	r7,r3
  807720:	8009883a 	mov	r4,r16
  807724:	880b883a 	mov	r5,r17
  807728:	100d883a 	mov	r6,r2
  80772c:	0808c340 	call	808c34 <__muldf3>
  807730:	0011883a 	mov	r8,zero
  807734:	024ff834 	movhi	r9,16352
  807738:	480b883a 	mov	r5,r9
  80773c:	4009883a 	mov	r4,r8
  807740:	180f883a 	mov	r7,r3
  807744:	100d883a 	mov	r6,r2
  807748:	0808b400 	call	808b40 <__subdf3>
  80774c:	180f883a 	mov	r7,r3
  807750:	a80b883a 	mov	r5,r21
  807754:	a009883a 	mov	r4,r20
  807758:	100d883a 	mov	r6,r2
  80775c:	0808c340 	call	808c34 <__muldf3>
  807760:	02194b34 	movhi	r8,25900
  807764:	4220bf84 	addi	r8,r8,-32002
  807768:	026ffdf4 	movhi	r9,49143
  80776c:	4a4551c4 	addi	r9,r9,5447
  807770:	480f883a 	mov	r7,r9
  807774:	400d883a 	mov	r6,r8
  807778:	180b883a 	mov	r5,r3
  80777c:	1009883a 	mov	r4,r2
  807780:	0808c340 	call	808c34 <__muldf3>
  807784:	d9402b17 	ldw	r5,172(sp)
  807788:	d9002a17 	ldw	r4,168(sp)
  80778c:	180f883a 	mov	r7,r3
  807790:	100d883a 	mov	r6,r2
  807794:	0808bc00 	call	808bc0 <__adddf3>
  807798:	100d883a 	mov	r6,r2
  80779c:	b009883a 	mov	r4,r22
  8077a0:	b80b883a 	mov	r5,r23
  8077a4:	180f883a 	mov	r7,r3
  8077a8:	1021883a 	mov	r16,r2
  8077ac:	1823883a 	mov	r17,r3
  8077b0:	0808bc00 	call	808bc0 <__adddf3>
  8077b4:	180b883a 	mov	r5,r3
  8077b8:	0009883a 	mov	r4,zero
  8077bc:	b00d883a 	mov	r6,r22
  8077c0:	b80f883a 	mov	r7,r23
  8077c4:	d9001b15 	stw	r4,108(sp)
  8077c8:	d8c01c15 	stw	r3,112(sp)
  8077cc:	0808b400 	call	808b40 <__subdf3>
  8077d0:	1011883a 	mov	r8,r2
  8077d4:	1813883a 	mov	r9,r3
  8077d8:	8009883a 	mov	r4,r16
  8077dc:	880b883a 	mov	r5,r17
  8077e0:	003f0b06 	br	807410 <__ieee754_pow+0x998>
  8077e4:	0005883a 	mov	r2,zero
  8077e8:	00d0d034 	movhi	r3,17216
  8077ec:	580b883a 	mov	r5,r11
  8077f0:	5009883a 	mov	r4,r10
  8077f4:	180f883a 	mov	r7,r3
  8077f8:	100d883a 	mov	r6,r2
  8077fc:	0808c340 	call	808c34 <__muldf3>
  807800:	1015883a 	mov	r10,r2
  807804:	1825883a 	mov	r18,r3
  807808:	017ff2c4 	movi	r5,-53
  80780c:	003d6606 	br	806da8 <__ieee754_pow+0x330>
  807810:	b03d300e 	bge	r22,zero,806cd4 <__ieee754_pow+0x25c>
  807814:	d9402917 	ldw	r5,164(sp)
  807818:	28e0003c 	xorhi	r3,r5,32768
  80781c:	d8c02915 	stw	r3,164(sp)
  807820:	003cbc06 	br	806b14 <__ieee754_pow+0x9c>
  807824:	00800044 	movi	r2,1
  807828:	e0bd1a1e 	bne	fp,r2,806c94 <__ieee754_pow+0x21c>
  80782c:	48e0003c 	xorhi	r3,r9,32768
  807830:	da002815 	stw	r8,160(sp)
  807834:	d8c02915 	stw	r3,164(sp)
  807838:	003cb606 	br	806b14 <__ieee754_pow+0x9c>
  80783c:	d9001817 	ldw	r4,96(sp)
  807840:	00a00034 	movhi	r2,32768
  807844:	10bfffc4 	addi	r2,r2,-1
  807848:	20b8703a 	and	fp,r4,r2
  80784c:	008ff834 	movhi	r2,16352
  807850:	1700fc16 	blt	r2,fp,807c44 <__ieee754_pow+0x11cc>
  807854:	0039883a 	mov	fp,zero
  807858:	d8001315 	stw	zero,76(sp)
  80785c:	0025883a 	mov	r18,zero
  807860:	0005883a 	mov	r2,zero
  807864:	00cff9b4 	movhi	r3,16358
  807868:	18cb90c4 	addi	r3,r3,11843
  80786c:	9009883a 	mov	r4,r18
  807870:	b80b883a 	mov	r5,r23
  807874:	180f883a 	mov	r7,r3
  807878:	100d883a 	mov	r6,r2
  80787c:	0808c340 	call	808c34 <__muldf3>
  807880:	d9c02017 	ldw	r7,128(sp)
  807884:	d9801f17 	ldw	r6,124(sp)
  807888:	9009883a 	mov	r4,r18
  80788c:	b80b883a 	mov	r5,r23
  807890:	b823883a 	mov	r17,r23
  807894:	102d883a 	mov	r22,r2
  807898:	182f883a 	mov	r23,r3
  80789c:	0808b400 	call	808b40 <__subdf3>
  8078a0:	d9401e17 	ldw	r5,120(sp)
  8078a4:	d9001d17 	ldw	r4,116(sp)
  8078a8:	180f883a 	mov	r7,r3
  8078ac:	100d883a 	mov	r6,r2
  8078b0:	0808b400 	call	808b40 <__subdf3>
  8078b4:	023fbeb4 	movhi	r8,65274
  8078b8:	420e7bc4 	addi	r8,r8,14831
  8078bc:	024ff9b4 	movhi	r9,16358
  8078c0:	4a4b9084 	addi	r9,r9,11842
  8078c4:	480f883a 	mov	r7,r9
  8078c8:	400d883a 	mov	r6,r8
  8078cc:	180b883a 	mov	r5,r3
  8078d0:	1009883a 	mov	r4,r2
  8078d4:	0808c340 	call	808c34 <__muldf3>
  8078d8:	02032a34 	movhi	r8,3240
  8078dc:	421b0e44 	addi	r8,r8,27705
  8078e0:	026f8834 	movhi	r9,48672
  8078e4:	4a571844 	addi	r9,r9,23649
  8078e8:	480f883a 	mov	r7,r9
  8078ec:	400d883a 	mov	r6,r8
  8078f0:	9009883a 	mov	r4,r18
  8078f4:	880b883a 	mov	r5,r17
  8078f8:	1021883a 	mov	r16,r2
  8078fc:	1823883a 	mov	r17,r3
  807900:	0808c340 	call	808c34 <__muldf3>
  807904:	180f883a 	mov	r7,r3
  807908:	880b883a 	mov	r5,r17
  80790c:	8009883a 	mov	r4,r16
  807910:	100d883a 	mov	r6,r2
  807914:	0808bc00 	call	808bc0 <__adddf3>
  807918:	100d883a 	mov	r6,r2
  80791c:	b009883a 	mov	r4,r22
  807920:	b80b883a 	mov	r5,r23
  807924:	180f883a 	mov	r7,r3
  807928:	1021883a 	mov	r16,r2
  80792c:	1823883a 	mov	r17,r3
  807930:	0808bc00 	call	808bc0 <__adddf3>
  807934:	1009883a 	mov	r4,r2
  807938:	180b883a 	mov	r5,r3
  80793c:	b00d883a 	mov	r6,r22
  807940:	b80f883a 	mov	r7,r23
  807944:	d8803915 	stw	r2,228(sp)
  807948:	d8c03a15 	stw	r3,232(sp)
  80794c:	d8801115 	stw	r2,68(sp)
  807950:	d8c01215 	stw	r3,72(sp)
  807954:	0808b400 	call	808b40 <__subdf3>
  807958:	180f883a 	mov	r7,r3
  80795c:	8009883a 	mov	r4,r16
  807960:	880b883a 	mov	r5,r17
  807964:	100d883a 	mov	r6,r2
  807968:	0808b400 	call	808b40 <__subdf3>
  80796c:	d9001117 	ldw	r4,68(sp)
  807970:	d9403a17 	ldw	r5,232(sp)
  807974:	1029883a 	mov	r20,r2
  807978:	200d883a 	mov	r6,r4
  80797c:	280f883a 	mov	r7,r5
  807980:	182b883a 	mov	r21,r3
  807984:	0808c340 	call	808c34 <__muldf3>
  807988:	1021883a 	mov	r16,r2
  80798c:	1823883a 	mov	r17,r3
  807990:	009caff4 	movhi	r2,29375
  807994:	10a93404 	addi	r2,r2,-23344
  807998:	00cf99b4 	movhi	r3,15974
  80799c:	18cdda44 	addi	r3,r3,14185
  8079a0:	8009883a 	mov	r4,r16
  8079a4:	880b883a 	mov	r5,r17
  8079a8:	180f883a 	mov	r7,r3
  8079ac:	100d883a 	mov	r6,r2
  8079b0:	0808c340 	call	808c34 <__muldf3>
  8079b4:	023174b4 	movhi	r8,50642
  8079b8:	421afc44 	addi	r8,r8,27633
  8079bc:	024faf34 	movhi	r9,16060
  8079c0:	4a6f5044 	addi	r9,r9,-17087
  8079c4:	480f883a 	mov	r7,r9
  8079c8:	400d883a 	mov	r6,r8
  8079cc:	180b883a 	mov	r5,r3
  8079d0:	1009883a 	mov	r4,r2
  8079d4:	0808b400 	call	808b40 <__subdf3>
  8079d8:	180f883a 	mov	r7,r3
  8079dc:	8009883a 	mov	r4,r16
  8079e0:	880b883a 	mov	r5,r17
  8079e4:	100d883a 	mov	r6,r2
  8079e8:	0808c340 	call	808c34 <__muldf3>
  8079ec:	022bc9b4 	movhi	r8,44838
  8079f0:	42378b04 	addi	r8,r8,-8660
  8079f4:	024fc474 	movhi	r9,16145
  8079f8:	4a559a84 	addi	r9,r9,22122
  8079fc:	480f883a 	mov	r7,r9
  807a00:	400d883a 	mov	r6,r8
  807a04:	180b883a 	mov	r5,r3
  807a08:	1009883a 	mov	r4,r2
  807a0c:	0808bc00 	call	808bc0 <__adddf3>
  807a10:	180f883a 	mov	r7,r3
  807a14:	8009883a 	mov	r4,r16
  807a18:	880b883a 	mov	r5,r17
  807a1c:	100d883a 	mov	r6,r2
  807a20:	0808c340 	call	808c34 <__muldf3>
  807a24:	0205aff4 	movhi	r8,5823
  807a28:	422f64c4 	addi	r8,r8,-17005
  807a2c:	024fd9f4 	movhi	r9,16231
  807a30:	4a705b04 	addi	r9,r9,-16020
  807a34:	480f883a 	mov	r7,r9
  807a38:	400d883a 	mov	r6,r8
  807a3c:	180b883a 	mov	r5,r3
  807a40:	1009883a 	mov	r4,r2
  807a44:	0808b400 	call	808b40 <__subdf3>
  807a48:	180f883a 	mov	r7,r3
  807a4c:	8009883a 	mov	r4,r16
  807a50:	880b883a 	mov	r5,r17
  807a54:	100d883a 	mov	r6,r2
  807a58:	0808c340 	call	808c34 <__muldf3>
  807a5c:	02155574 	movhi	r8,21845
  807a60:	42154f84 	addi	r8,r8,21822
  807a64:	024ff174 	movhi	r9,16325
  807a68:	4a555544 	addi	r9,r9,21845
  807a6c:	480f883a 	mov	r7,r9
  807a70:	400d883a 	mov	r6,r8
  807a74:	180b883a 	mov	r5,r3
  807a78:	1009883a 	mov	r4,r2
  807a7c:	0808bc00 	call	808bc0 <__adddf3>
  807a80:	180f883a 	mov	r7,r3
  807a84:	8009883a 	mov	r4,r16
  807a88:	880b883a 	mov	r5,r17
  807a8c:	100d883a 	mov	r6,r2
  807a90:	0808c340 	call	808c34 <__muldf3>
  807a94:	d9001117 	ldw	r4,68(sp)
  807a98:	d9403a17 	ldw	r5,232(sp)
  807a9c:	180f883a 	mov	r7,r3
  807aa0:	100d883a 	mov	r6,r2
  807aa4:	0808b400 	call	808b40 <__subdf3>
  807aa8:	d9001117 	ldw	r4,68(sp)
  807aac:	d9403a17 	ldw	r5,232(sp)
  807ab0:	100d883a 	mov	r6,r2
  807ab4:	180f883a 	mov	r7,r3
  807ab8:	1021883a 	mov	r16,r2
  807abc:	1823883a 	mov	r17,r3
  807ac0:	0808c340 	call	808c34 <__muldf3>
  807ac4:	0011883a 	mov	r8,zero
  807ac8:	02500034 	movhi	r9,16384
  807acc:	480f883a 	mov	r7,r9
  807ad0:	400d883a 	mov	r6,r8
  807ad4:	8009883a 	mov	r4,r16
  807ad8:	880b883a 	mov	r5,r17
  807adc:	1021883a 	mov	r16,r2
  807ae0:	1823883a 	mov	r17,r3
  807ae4:	0808b400 	call	808b40 <__subdf3>
  807ae8:	180f883a 	mov	r7,r3
  807aec:	880b883a 	mov	r5,r17
  807af0:	8009883a 	mov	r4,r16
  807af4:	100d883a 	mov	r6,r2
  807af8:	0808ff80 	call	808ff8 <__divdf3>
  807afc:	d9001117 	ldw	r4,68(sp)
  807b00:	d9403a17 	ldw	r5,232(sp)
  807b04:	a00d883a 	mov	r6,r20
  807b08:	a80f883a 	mov	r7,r21
  807b0c:	1025883a 	mov	r18,r2
  807b10:	1827883a 	mov	r19,r3
  807b14:	0808c340 	call	808c34 <__muldf3>
  807b18:	180f883a 	mov	r7,r3
  807b1c:	a009883a 	mov	r4,r20
  807b20:	a80b883a 	mov	r5,r21
  807b24:	100d883a 	mov	r6,r2
  807b28:	0808bc00 	call	808bc0 <__adddf3>
  807b2c:	180f883a 	mov	r7,r3
  807b30:	980b883a 	mov	r5,r19
  807b34:	9009883a 	mov	r4,r18
  807b38:	100d883a 	mov	r6,r2
  807b3c:	0808b400 	call	808b40 <__subdf3>
  807b40:	d9801117 	ldw	r6,68(sp)
  807b44:	d9c03a17 	ldw	r7,232(sp)
  807b48:	180b883a 	mov	r5,r3
  807b4c:	1009883a 	mov	r4,r2
  807b50:	0808b400 	call	808b40 <__subdf3>
  807b54:	0011883a 	mov	r8,zero
  807b58:	024ffc34 	movhi	r9,16368
  807b5c:	480b883a 	mov	r5,r9
  807b60:	180f883a 	mov	r7,r3
  807b64:	4009883a 	mov	r4,r8
  807b68:	100d883a 	mov	r6,r2
  807b6c:	0808b400 	call	808b40 <__subdf3>
  807b70:	100b883a 	mov	r5,r2
  807b74:	d8801317 	ldw	r2,76(sp)
  807b78:	10d5883a 	add	r10,r2,r3
  807b7c:	5005d53a 	srai	r2,r10,20
  807b80:	0080720e 	bge	zero,r2,807d4c <__ieee754_pow+0x12d4>
  807b84:	2811883a 	mov	r8,r5
  807b88:	5013883a 	mov	r9,r10
  807b8c:	d9c01a17 	ldw	r7,104(sp)
  807b90:	d9801917 	ldw	r6,100(sp)
  807b94:	480b883a 	mov	r5,r9
  807b98:	4009883a 	mov	r4,r8
  807b9c:	003e8206 	br	8075a8 <__ieee754_pow+0xb30>
  807ba0:	0009883a 	mov	r4,zero
  807ba4:	800b883a 	mov	r5,r16
  807ba8:	a80f883a 	mov	r7,r21
  807bac:	a00d883a 	mov	r6,r20
  807bb0:	003c2b06 	br	806c60 <__ieee754_pow+0x1e8>
  807bb4:	d9001d17 	ldw	r4,116(sp)
  807bb8:	00994b34 	movhi	r2,25900
  807bbc:	10a0bf84 	addi	r2,r2,-32002
  807bc0:	00cf25f4 	movhi	r3,15511
  807bc4:	18c551c4 	addi	r3,r3,5447
  807bc8:	a80b883a 	mov	r5,r21
  807bcc:	180f883a 	mov	r7,r3
  807bd0:	100d883a 	mov	r6,r2
  807bd4:	0808bc00 	call	808bc0 <__adddf3>
  807bd8:	d9801f17 	ldw	r6,124(sp)
  807bdc:	880b883a 	mov	r5,r17
  807be0:	8009883a 	mov	r4,r16
  807be4:	980f883a 	mov	r7,r19
  807be8:	1021883a 	mov	r16,r2
  807bec:	1823883a 	mov	r17,r3
  807bf0:	0808b400 	call	808b40 <__subdf3>
  807bf4:	180f883a 	mov	r7,r3
  807bf8:	880b883a 	mov	r5,r17
  807bfc:	8009883a 	mov	r4,r16
  807c00:	100d883a 	mov	r6,r2
  807c04:	08093600 	call	809360 <__gtdf2>
  807c08:	00bf0c0e 	bge	zero,r2,80783c <__ieee754_pow+0xdc4>
  807c0c:	04220034 	movhi	r16,34816
  807c10:	841d6704 	addi	r16,r16,30108
  807c14:	045f8e34 	movhi	r17,32312
  807c18:	8c790f04 	addi	r17,r17,-7108
  807c1c:	d9401a17 	ldw	r5,104(sp)
  807c20:	d9001917 	ldw	r4,100(sp)
  807c24:	800d883a 	mov	r6,r16
  807c28:	880f883a 	mov	r7,r17
  807c2c:	0808c340 	call	808c34 <__muldf3>
  807c30:	180b883a 	mov	r5,r3
  807c34:	800d883a 	mov	r6,r16
  807c38:	880f883a 	mov	r7,r17
  807c3c:	1009883a 	mov	r4,r2
  807c40:	003e5906 	br	8075a8 <__ieee754_pow+0xb30>
  807c44:	e005d53a 	srai	r2,fp,20
  807c48:	01800434 	movhi	r6,16
  807c4c:	d9401817 	ldw	r5,96(sp)
  807c50:	10bf0084 	addi	r2,r2,-1022
  807c54:	308dd83a 	sra	r6,r6,r2
  807c58:	02000434 	movhi	r8,16
  807c5c:	423fffc4 	addi	r8,r8,-1
  807c60:	0005883a 	mov	r2,zero
  807c64:	298d883a 	add	r6,r5,r6
  807c68:	318b883a 	add	r5,r6,r6
  807c6c:	320e703a 	and	r7,r6,r8
  807c70:	1013883a 	mov	r9,r2
  807c74:	280ad57a 	srli	r5,r5,21
  807c78:	d8801817 	ldw	r2,96(sp)
  807c7c:	01000504 	movi	r4,20
  807c80:	297f0044 	addi	r5,r5,-1023
  807c84:	4151d83a 	sra	r8,r8,r5
  807c88:	39c00434 	orhi	r7,r7,16
  807c8c:	2149c83a 	sub	r4,r4,r5
  807c90:	0210303a 	nor	r8,zero,r8
  807c94:	3939d83a 	sra	fp,r7,r4
  807c98:	320e703a 	and	r7,r6,r8
  807c9c:	10002916 	blt	r2,zero,807d44 <__ieee754_pow+0x12cc>
  807ca0:	d9402017 	ldw	r5,128(sp)
  807ca4:	d9001f17 	ldw	r4,124(sp)
  807ca8:	480d883a 	mov	r6,r9
  807cac:	0808b400 	call	808b40 <__subdf3>
  807cb0:	180b883a 	mov	r5,r3
  807cb4:	d9402015 	stw	r5,128(sp)
  807cb8:	280f883a 	mov	r7,r5
  807cbc:	d9001d17 	ldw	r4,116(sp)
  807cc0:	d9401e17 	ldw	r5,120(sp)
  807cc4:	1007883a 	mov	r3,r2
  807cc8:	180d883a 	mov	r6,r3
  807ccc:	d8801f15 	stw	r2,124(sp)
  807cd0:	0808bc00 	call	808bc0 <__adddf3>
  807cd4:	180b883a 	mov	r5,r3
  807cd8:	e006953a 	slli	r3,fp,20
  807cdc:	282f883a 	mov	r23,r5
  807ce0:	d8c01315 	stw	r3,76(sp)
  807ce4:	003edd06 	br	80785c <__ieee754_pow+0xde4>
  807ce8:	383bc81e 	bne	r7,zero,806c0c <__ieee754_pow+0x194>
  807cec:	28c5c83a 	sub	r2,r5,r3
  807cf0:	8087d83a 	sra	r3,r16,r2
  807cf4:	1884983a 	sll	r2,r3,r2
  807cf8:	80801b26 	beq	r16,r2,807d68 <__ieee754_pow+0x12f0>
  807cfc:	0039883a 	mov	fp,zero
  807d00:	003b9d06 	br	806b78 <__ieee754_pow+0x100>
  807d04:	d9801f17 	ldw	r6,124(sp)
  807d08:	8009883a 	mov	r4,r16
  807d0c:	880b883a 	mov	r5,r17
  807d10:	980f883a 	mov	r7,r19
  807d14:	0808b400 	call	808b40 <__subdf3>
  807d18:	d9001d17 	ldw	r4,116(sp)
  807d1c:	a80b883a 	mov	r5,r21
  807d20:	180f883a 	mov	r7,r3
  807d24:	100d883a 	mov	r6,r2
  807d28:	08094700 	call	809470 <__ledf2>
  807d2c:	00bfc516 	blt	zero,r2,807c44 <__ieee754_pow+0x11cc>
  807d30:	0430be74 	movhi	r16,49913
  807d34:	843cd644 	addi	r16,r16,-3239
  807d38:	04406974 	movhi	r17,421
  807d3c:	8c5b87c4 	addi	r17,r17,28191
  807d40:	003fb606 	br	807c1c <__ieee754_pow+0x11a4>
  807d44:	0739c83a 	sub	fp,zero,fp
  807d48:	003fd506 	br	807ca0 <__ieee754_pow+0x1228>
  807d4c:	2809883a 	mov	r4,r5
  807d50:	e00d883a 	mov	r6,fp
  807d54:	180b883a 	mov	r5,r3
  807d58:	08082cc0 	call	8082cc <scalbn>
  807d5c:	1011883a 	mov	r8,r2
  807d60:	1813883a 	mov	r9,r3
  807d64:	003f8906 	br	807b8c <__ieee754_pow+0x1114>
  807d68:	18c0004c 	andi	r3,r3,1
  807d6c:	00800084 	movi	r2,2
  807d70:	10f9c83a 	sub	fp,r2,r3
  807d74:	003b8006 	br	806b78 <__ieee754_pow+0x100>

00807d78 <__ieee754_sqrt>:
  807d78:	defffd04 	addi	sp,sp,-12
  807d7c:	dc000015 	stw	r16,0(sp)
  807d80:	009ffc34 	movhi	r2,32752
  807d84:	2021883a 	mov	r16,r4
  807d88:	291ffc2c 	andhi	r4,r5,32752
  807d8c:	dc400115 	stw	r17,4(sp)
  807d90:	dfc00215 	stw	ra,8(sp)
  807d94:	2823883a 	mov	r17,r5
  807d98:	280f883a 	mov	r7,r5
  807d9c:	2807883a 	mov	r3,r5
  807da0:	8011883a 	mov	r8,r16
  807da4:	20807d26 	beq	r4,r2,807f9c <__ieee754_sqrt+0x224>
  807da8:	01408d0e 	bge	zero,r5,807fe0 <__ieee754_sqrt+0x268>
  807dac:	380dd53a 	srai	r6,r7,20
  807db0:	3000131e 	bne	r6,zero,807e00 <__ieee754_sqrt+0x88>
  807db4:	1800041e 	bne	r3,zero,807dc8 <__ieee754_sqrt+0x50>
  807db8:	400ed2fa 	srli	r7,r8,11
  807dbc:	31bffac4 	addi	r6,r6,-21
  807dc0:	4010957a 	slli	r8,r8,21
  807dc4:	383ffc26 	beq	r7,zero,807db8 <__ieee754_sqrt+0x40>
  807dc8:	3880042c 	andhi	r2,r7,16
  807dcc:	1000991e 	bne	r2,zero,808034 <__ieee754_sqrt+0x2bc>
  807dd0:	0009883a 	mov	r4,zero
  807dd4:	39cf883a 	add	r7,r7,r7
  807dd8:	3880042c 	andhi	r2,r7,16
  807ddc:	21000044 	addi	r4,r4,1
  807de0:	103ffc26 	beq	r2,zero,807dd4 <__ieee754_sqrt+0x5c>
  807de4:	00800804 	movi	r2,32
  807de8:	1105c83a 	sub	r2,r2,r4
  807dec:	4086d83a 	srl	r3,r8,r2
  807df0:	4110983a 	sll	r8,r8,r4
  807df4:	3105c83a 	sub	r2,r6,r4
  807df8:	38ceb03a 	or	r7,r7,r3
  807dfc:	11800044 	addi	r6,r2,1
  807e00:	31bf0044 	addi	r6,r6,-1023
  807e04:	30c0004c 	andi	r3,r6,1
  807e08:	00800434 	movhi	r2,16
  807e0c:	10bfffc4 	addi	r2,r2,-1
  807e10:	3884703a 	and	r2,r7,r2
  807e14:	1807003a 	cmpeq	r3,r3,zero
  807e18:	11000434 	orhi	r4,r2,16
  807e1c:	18005426 	beq	r3,zero,807f70 <__ieee754_sqrt+0x1f8>
  807e20:	4004d7fa 	srli	r2,r8,31
  807e24:	4207883a 	add	r3,r8,r8
  807e28:	02800834 	movhi	r10,32
  807e2c:	1105883a 	add	r2,r2,r4
  807e30:	2089883a 	add	r4,r4,r2
  807e34:	0011883a 	mov	r8,zero
  807e38:	000b883a 	mov	r5,zero
  807e3c:	0013883a 	mov	r9,zero
  807e40:	02c00584 	movi	r11,22
  807e44:	520f883a 	add	r7,r10,r8
  807e48:	1804d7fa 	srli	r2,r3,31
  807e4c:	4a400044 	addi	r9,r9,1
  807e50:	18c7883a 	add	r3,r3,r3
  807e54:	21c00316 	blt	r4,r7,807e64 <__ieee754_sqrt+0xec>
  807e58:	21c9c83a 	sub	r4,r4,r7
  807e5c:	2a8b883a 	add	r5,r5,r10
  807e60:	51d1883a 	add	r8,r10,r7
  807e64:	1105883a 	add	r2,r2,r4
  807e68:	5014d07a 	srli	r10,r10,1
  807e6c:	2089883a 	add	r4,r4,r2
  807e70:	4afff41e 	bne	r9,r11,807e44 <__ieee754_sqrt+0xcc>
  807e74:	02600034 	movhi	r9,32768
  807e78:	0017883a 	mov	r11,zero
  807e7c:	0019883a 	mov	r12,zero
  807e80:	0015883a 	mov	r10,zero
  807e84:	4821883a 	mov	r16,r9
  807e88:	03c00804 	movi	r15,32
  807e8c:	00000806 	br	807eb0 <__ieee754_sqrt+0x138>
  807e90:	22003426 	beq	r4,r8,807f64 <__ieee754_sqrt+0x1ec>
  807e94:	1804d7fa 	srli	r2,r3,31
  807e98:	52800044 	addi	r10,r10,1
  807e9c:	18c7883a 	add	r3,r3,r3
  807ea0:	1105883a 	add	r2,r2,r4
  807ea4:	2089883a 	add	r4,r4,r2
  807ea8:	4812d07a 	srli	r9,r9,1
  807eac:	53c01326 	beq	r10,r15,807efc <__ieee754_sqrt+0x184>
  807eb0:	4acf883a 	add	r7,r9,r11
  807eb4:	413ff60e 	bge	r8,r4,807e90 <__ieee754_sqrt+0x118>
  807eb8:	38a0002c 	andhi	r2,r7,32768
  807ebc:	3a57883a 	add	r11,r7,r9
  807ec0:	14002426 	beq	r2,r16,807f54 <__ieee754_sqrt+0x1dc>
  807ec4:	4005883a 	mov	r2,r8
  807ec8:	2209c83a 	sub	r4,r4,r8
  807ecc:	19c0012e 	bgeu	r3,r7,807ed4 <__ieee754_sqrt+0x15c>
  807ed0:	213fffc4 	addi	r4,r4,-1
  807ed4:	19c7c83a 	sub	r3,r3,r7
  807ed8:	1011883a 	mov	r8,r2
  807edc:	1804d7fa 	srli	r2,r3,31
  807ee0:	52800044 	addi	r10,r10,1
  807ee4:	6259883a 	add	r12,r12,r9
  807ee8:	1105883a 	add	r2,r2,r4
  807eec:	18c7883a 	add	r3,r3,r3
  807ef0:	2089883a 	add	r4,r4,r2
  807ef4:	4812d07a 	srli	r9,r9,1
  807ef8:	53ffed1e 	bne	r10,r15,807eb0 <__ieee754_sqrt+0x138>
  807efc:	20c4b03a 	or	r2,r4,r3
  807f00:	1000201e 	bne	r2,zero,807f84 <__ieee754_sqrt+0x20c>
  807f04:	600ed07a 	srli	r7,r12,1
  807f08:	2880004c 	andi	r2,r5,1
  807f0c:	1005003a 	cmpeq	r2,r2,zero
  807f10:	1000011e 	bne	r2,zero,807f18 <__ieee754_sqrt+0x1a0>
  807f14:	39e00034 	orhi	r7,r7,32768
  807f18:	300dd07a 	srai	r6,r6,1
  807f1c:	280bd07a 	srai	r5,r5,1
  807f20:	010ff834 	movhi	r4,16352
  807f24:	300c953a 	slli	r6,r6,20
  807f28:	290b883a 	add	r5,r5,r4
  807f2c:	3821883a 	mov	r16,r7
  807f30:	299d883a 	add	r14,r5,r6
  807f34:	7023883a 	mov	r17,r14
  807f38:	8005883a 	mov	r2,r16
  807f3c:	8807883a 	mov	r3,r17
  807f40:	dfc00217 	ldw	ra,8(sp)
  807f44:	dc400117 	ldw	r17,4(sp)
  807f48:	dc000017 	ldw	r16,0(sp)
  807f4c:	dec00304 	addi	sp,sp,12
  807f50:	f800283a 	ret
  807f54:	5884703a 	and	r2,r11,r2
  807f58:	103fda1e 	bne	r2,zero,807ec4 <__ieee754_sqrt+0x14c>
  807f5c:	40800044 	addi	r2,r8,1
  807f60:	003fd906 	br	807ec8 <__ieee754_sqrt+0x150>
  807f64:	19ffd42e 	bgeu	r3,r7,807eb8 <__ieee754_sqrt+0x140>
  807f68:	2011883a 	mov	r8,r4
  807f6c:	003fc906 	br	807e94 <__ieee754_sqrt+0x11c>
  807f70:	4004d7fa 	srli	r2,r8,31
  807f74:	4211883a 	add	r8,r8,r8
  807f78:	1105883a 	add	r2,r2,r4
  807f7c:	2089883a 	add	r4,r4,r2
  807f80:	003fa706 	br	807e20 <__ieee754_sqrt+0xa8>
  807f84:	00bfffc4 	movi	r2,-1
  807f88:	60802726 	beq	r12,r2,808028 <__ieee754_sqrt+0x2b0>
  807f8c:	6080004c 	andi	r2,r12,1
  807f90:	6085883a 	add	r2,r12,r2
  807f94:	100ed07a 	srli	r7,r2,1
  807f98:	003fdb06 	br	807f08 <__ieee754_sqrt+0x190>
  807f9c:	8009883a 	mov	r4,r16
  807fa0:	800d883a 	mov	r6,r16
  807fa4:	0808c340 	call	808c34 <__muldf3>
  807fa8:	180f883a 	mov	r7,r3
  807fac:	880b883a 	mov	r5,r17
  807fb0:	8009883a 	mov	r4,r16
  807fb4:	100d883a 	mov	r6,r2
  807fb8:	0808bc00 	call	808bc0 <__adddf3>
  807fbc:	1021883a 	mov	r16,r2
  807fc0:	1823883a 	mov	r17,r3
  807fc4:	8005883a 	mov	r2,r16
  807fc8:	8807883a 	mov	r3,r17
  807fcc:	dfc00217 	ldw	ra,8(sp)
  807fd0:	dc400117 	ldw	r17,4(sp)
  807fd4:	dc000017 	ldw	r16,0(sp)
  807fd8:	dec00304 	addi	sp,sp,12
  807fdc:	f800283a 	ret
  807fe0:	00a00034 	movhi	r2,32768
  807fe4:	10bfffc4 	addi	r2,r2,-1
  807fe8:	2884703a 	and	r2,r5,r2
  807fec:	8084b03a 	or	r2,r16,r2
  807ff0:	103fd126 	beq	r2,zero,807f38 <__ieee754_sqrt+0x1c0>
  807ff4:	283f6d26 	beq	r5,zero,807dac <__ieee754_sqrt+0x34>
  807ff8:	280f883a 	mov	r7,r5
  807ffc:	8009883a 	mov	r4,r16
  808000:	800d883a 	mov	r6,r16
  808004:	0808b400 	call	808b40 <__subdf3>
  808008:	1009883a 	mov	r4,r2
  80800c:	180b883a 	mov	r5,r3
  808010:	100d883a 	mov	r6,r2
  808014:	180f883a 	mov	r7,r3
  808018:	0808ff80 	call	808ff8 <__divdf3>
  80801c:	1021883a 	mov	r16,r2
  808020:	1823883a 	mov	r17,r3
  808024:	003fc406 	br	807f38 <__ieee754_sqrt+0x1c0>
  808028:	29400044 	addi	r5,r5,1
  80802c:	000f883a 	mov	r7,zero
  808030:	003fb506 	br	807f08 <__ieee754_sqrt+0x190>
  808034:	0009883a 	mov	r4,zero
  808038:	00800804 	movi	r2,32
  80803c:	003f6b06 	br	807dec <__ieee754_sqrt+0x74>

00808040 <fabs>:
  808040:	01e00034 	movhi	r7,32768
  808044:	39ffffc4 	addi	r7,r7,-1
  808048:	394e703a 	and	r7,r7,r5
  80804c:	2005883a 	mov	r2,r4
  808050:	3807883a 	mov	r3,r7
  808054:	f800283a 	ret

00808058 <finite>:
  808058:	00a00034 	movhi	r2,32768
  80805c:	10bfffc4 	addi	r2,r2,-1
  808060:	2884703a 	and	r2,r5,r2
  808064:	01600434 	movhi	r5,32784
  808068:	1145883a 	add	r2,r2,r5
  80806c:	1004d7fa 	srli	r2,r2,31
  808070:	f800283a 	ret

00808074 <__isnand>:
  808074:	200d883a 	mov	r6,r4
  808078:	0109c83a 	sub	r4,zero,r4
  80807c:	2188b03a 	or	r4,r4,r6
  808080:	2008d7fa 	srli	r4,r4,31
  808084:	00a00034 	movhi	r2,32768
  808088:	10bfffc4 	addi	r2,r2,-1
  80808c:	1144703a 	and	r2,r2,r5
  808090:	2088b03a 	or	r4,r4,r2
  808094:	009ffc34 	movhi	r2,32752
  808098:	1105c83a 	sub	r2,r2,r4
  80809c:	1004d7fa 	srli	r2,r2,31
  8080a0:	f800283a 	ret

008080a4 <matherr>:
  8080a4:	0005883a 	mov	r2,zero
  8080a8:	f800283a 	ret

008080ac <nan>:
  8080ac:	015ffe34 	movhi	r5,32760
  8080b0:	0005883a 	mov	r2,zero
  8080b4:	2807883a 	mov	r3,r5
  8080b8:	f800283a 	ret

008080bc <rint>:
  8080bc:	2015883a 	mov	r10,r4
  8080c0:	2809d53a 	srai	r4,r5,20
  8080c4:	defff904 	addi	sp,sp,-28
  8080c8:	034004c4 	movi	r13,19
  8080cc:	2101ffcc 	andi	r4,r4,2047
  8080d0:	227f0044 	addi	r9,r4,-1023
  8080d4:	dc800415 	stw	r18,16(sp)
  8080d8:	dfc00615 	stw	ra,24(sp)
  8080dc:	dcc00515 	stw	r19,20(sp)
  8080e0:	dc400315 	stw	r17,12(sp)
  8080e4:	dc000215 	stw	r16,8(sp)
  8080e8:	2817883a 	mov	r11,r5
  8080ec:	500d883a 	mov	r6,r10
  8080f0:	2824d7fa 	srli	r18,r5,31
  8080f4:	6a403016 	blt	r13,r9,8081b8 <rint+0xfc>
  8080f8:	48004916 	blt	r9,zero,808220 <rint+0x164>
  8080fc:	00800434 	movhi	r2,16
  808100:	10bfffc4 	addi	r2,r2,-1
  808104:	1247d83a 	sra	r3,r2,r9
  808108:	2809883a 	mov	r4,r5
  80810c:	1944703a 	and	r2,r3,r5
  808110:	5084b03a 	or	r2,r10,r2
  808114:	10001f26 	beq	r2,zero,808194 <rint+0xd8>
  808118:	180ad07a 	srli	r5,r3,1
  80811c:	5944703a 	and	r2,r11,r5
  808120:	5084b03a 	or	r2,r10,r2
  808124:	10000626 	beq	r2,zero,808140 <rint+0x84>
  808128:	4b406626 	beq	r9,r13,8082c4 <rint+0x208>
  80812c:	00c000b4 	movhi	r3,2
  808130:	1a47d83a 	sra	r3,r3,r9
  808134:	0144303a 	nor	r2,zero,r5
  808138:	5884703a 	and	r2,r11,r2
  80813c:	10c8b03a 	or	r4,r2,r3
  808140:	900690fa 	slli	r3,r18,3
  808144:	008020b4 	movhi	r2,130
  808148:	10b44904 	addi	r2,r2,-11996
  80814c:	200f883a 	mov	r7,r4
  808150:	1887883a 	add	r3,r3,r2
  808154:	1c000017 	ldw	r16,0(r3)
  808158:	1c400117 	ldw	r17,4(r3)
  80815c:	8009883a 	mov	r4,r16
  808160:	880b883a 	mov	r5,r17
  808164:	0808bc00 	call	808bc0 <__adddf3>
  808168:	d8800015 	stw	r2,0(sp)
  80816c:	d8c00115 	stw	r3,4(sp)
  808170:	d8800017 	ldw	r2,0(sp)
  808174:	d8c00117 	ldw	r3,4(sp)
  808178:	880f883a 	mov	r7,r17
  80817c:	800d883a 	mov	r6,r16
  808180:	180b883a 	mov	r5,r3
  808184:	1009883a 	mov	r4,r2
  808188:	0808b400 	call	808b40 <__subdf3>
  80818c:	1015883a 	mov	r10,r2
  808190:	1817883a 	mov	r11,r3
  808194:	5005883a 	mov	r2,r10
  808198:	5807883a 	mov	r3,r11
  80819c:	dfc00617 	ldw	ra,24(sp)
  8081a0:	dcc00517 	ldw	r19,20(sp)
  8081a4:	dc800417 	ldw	r18,16(sp)
  8081a8:	dc400317 	ldw	r17,12(sp)
  8081ac:	dc000217 	ldw	r16,8(sp)
  8081b0:	dec00704 	addi	sp,sp,28
  8081b4:	f800283a 	ret
  8081b8:	00800cc4 	movi	r2,51
  8081bc:	12400f16 	blt	r2,r9,8081fc <rint+0x140>
  8081c0:	213efb44 	addi	r4,r4,-1043
  8081c4:	00bfffc4 	movi	r2,-1
  8081c8:	1104d83a 	srl	r2,r2,r4
  8081cc:	5086703a 	and	r3,r10,r2
  8081d0:	183ff026 	beq	r3,zero,808194 <rint+0xd8>
  8081d4:	100ad07a 	srli	r5,r2,1
  8081d8:	5144703a 	and	r2,r10,r5
  8081dc:	10000526 	beq	r2,zero,8081f4 <rint+0x138>
  8081e0:	00d00034 	movhi	r3,16384
  8081e4:	1907d83a 	sra	r3,r3,r4
  8081e8:	0144303a 	nor	r2,zero,r5
  8081ec:	5084703a 	and	r2,r10,r2
  8081f0:	10ccb03a 	or	r6,r2,r3
  8081f4:	5809883a 	mov	r4,r11
  8081f8:	003fd106 	br	808140 <rint+0x84>
  8081fc:	00810004 	movi	r2,1024
  808200:	48bfe41e 	bne	r9,r2,808194 <rint+0xd8>
  808204:	5009883a 	mov	r4,r10
  808208:	500d883a 	mov	r6,r10
  80820c:	280f883a 	mov	r7,r5
  808210:	0808bc00 	call	808bc0 <__adddf3>
  808214:	1015883a 	mov	r10,r2
  808218:	1817883a 	mov	r11,r3
  80821c:	003fdd06 	br	808194 <rint+0xd8>
  808220:	04e00034 	movhi	r19,32768
  808224:	9cffffc4 	addi	r19,r19,-1
  808228:	2cc4703a 	and	r2,r5,r19
  80822c:	5084b03a 	or	r2,r10,r2
  808230:	103fd826 	beq	r2,zero,808194 <rint+0xd8>
  808234:	00c00434 	movhi	r3,16
  808238:	18ffffc4 	addi	r3,r3,-1
  80823c:	28c6703a 	and	r3,r5,r3
  808240:	50c6b03a 	or	r3,r10,r3
  808244:	00cdc83a 	sub	r6,zero,r3
  808248:	900a90fa 	slli	r5,r18,3
  80824c:	1986b03a 	or	r3,r3,r6
  808250:	010020b4 	movhi	r4,130
  808254:	21344904 	addi	r4,r4,-11996
  808258:	1806d33a 	srli	r3,r3,12
  80825c:	290b883a 	add	r5,r5,r4
  808260:	2c000017 	ldw	r16,0(r5)
  808264:	2c400117 	ldw	r17,4(r5)
  808268:	593fffac 	andhi	r4,r11,65534
  80826c:	18c0022c 	andhi	r3,r3,8
  808270:	1906b03a 	or	r3,r3,r4
  808274:	500d883a 	mov	r6,r10
  808278:	180f883a 	mov	r7,r3
  80827c:	8009883a 	mov	r4,r16
  808280:	880b883a 	mov	r5,r17
  808284:	0808bc00 	call	808bc0 <__adddf3>
  808288:	d8800015 	stw	r2,0(sp)
  80828c:	d8c00115 	stw	r3,4(sp)
  808290:	d8800017 	ldw	r2,0(sp)
  808294:	d8c00117 	ldw	r3,4(sp)
  808298:	880f883a 	mov	r7,r17
  80829c:	800d883a 	mov	r6,r16
  8082a0:	180b883a 	mov	r5,r3
  8082a4:	1009883a 	mov	r4,r2
  8082a8:	0808b400 	call	808b40 <__subdf3>
  8082ac:	901297fa 	slli	r9,r18,31
  8082b0:	98d0703a 	and	r8,r19,r3
  8082b4:	1015883a 	mov	r10,r2
  8082b8:	4250b03a 	or	r8,r8,r9
  8082bc:	4017883a 	mov	r11,r8
  8082c0:	003fb406 	br	808194 <rint+0xd8>
  8082c4:	01900034 	movhi	r6,16384
  8082c8:	003f9d06 	br	808140 <rint+0x84>

008082cc <scalbn>:
  8082cc:	2011883a 	mov	r8,r4
  8082d0:	291ffc2c 	andhi	r4,r5,32752
  8082d4:	2009d53a 	srai	r4,r4,20
  8082d8:	defffd04 	addi	sp,sp,-12
  8082dc:	dc000015 	stw	r16,0(sp)
  8082e0:	dfc00215 	stw	ra,8(sp)
  8082e4:	dc400115 	stw	r17,4(sp)
  8082e8:	2813883a 	mov	r9,r5
  8082ec:	2815883a 	mov	r10,r5
  8082f0:	3021883a 	mov	r16,r6
  8082f4:	2000281e 	bne	r4,zero,808398 <scalbn+0xcc>
  8082f8:	00a00034 	movhi	r2,32768
  8082fc:	10bfffc4 	addi	r2,r2,-1
  808300:	2884703a 	and	r2,r5,r2
  808304:	4084b03a 	or	r2,r8,r2
  808308:	10001826 	beq	r2,zero,80836c <scalbn+0xa0>
  80830c:	0005883a 	mov	r2,zero
  808310:	00d0d434 	movhi	r3,17232
  808314:	4009883a 	mov	r4,r8
  808318:	100d883a 	mov	r6,r2
  80831c:	180f883a 	mov	r7,r3
  808320:	0808c340 	call	808c34 <__muldf3>
  808324:	100b883a 	mov	r5,r2
  808328:	1011883a 	mov	r8,r2
  80832c:	00bffff4 	movhi	r2,65535
  808330:	108f2c04 	addi	r2,r2,15536
  808334:	180d883a 	mov	r6,r3
  808338:	1813883a 	mov	r9,r3
  80833c:	8080120e 	bge	r16,r2,808388 <scalbn+0xbc>
  808340:	00b0be74 	movhi	r2,49913
  808344:	10bcd644 	addi	r2,r2,-3239
  808348:	00c06974 	movhi	r3,421
  80834c:	18db87c4 	addi	r3,r3,28191
  808350:	2809883a 	mov	r4,r5
  808354:	180f883a 	mov	r7,r3
  808358:	300b883a 	mov	r5,r6
  80835c:	100d883a 	mov	r6,r2
  808360:	0808c340 	call	808c34 <__muldf3>
  808364:	1011883a 	mov	r8,r2
  808368:	1813883a 	mov	r9,r3
  80836c:	4005883a 	mov	r2,r8
  808370:	4807883a 	mov	r3,r9
  808374:	dfc00217 	ldw	ra,8(sp)
  808378:	dc400117 	ldw	r17,4(sp)
  80837c:	dc000017 	ldw	r16,0(sp)
  808380:	dec00304 	addi	sp,sp,12
  808384:	f800283a 	ret
  808388:	189ffc2c 	andhi	r2,r3,32752
  80838c:	1005d53a 	srai	r2,r2,20
  808390:	1815883a 	mov	r10,r3
  808394:	113ff284 	addi	r4,r2,-54
  808398:	0081ffc4 	movi	r2,2047
  80839c:	20801126 	beq	r4,r2,8083e4 <scalbn+0x118>
  8083a0:	2409883a 	add	r4,r4,r16
  8083a4:	0081ff84 	movi	r2,2046
  8083a8:	11001c16 	blt	r2,r4,80841c <scalbn+0x150>
  8083ac:	0100290e 	bge	zero,r4,808454 <scalbn+0x188>
  8083b0:	200a953a 	slli	r5,r4,20
  8083b4:	01200434 	movhi	r4,32784
  8083b8:	213fffc4 	addi	r4,r4,-1
  8083bc:	5108703a 	and	r4,r10,r4
  8083c0:	2148b03a 	or	r4,r4,r5
  8083c4:	2013883a 	mov	r9,r4
  8083c8:	4005883a 	mov	r2,r8
  8083cc:	4807883a 	mov	r3,r9
  8083d0:	dfc00217 	ldw	ra,8(sp)
  8083d4:	dc400117 	ldw	r17,4(sp)
  8083d8:	dc000017 	ldw	r16,0(sp)
  8083dc:	dec00304 	addi	sp,sp,12
  8083e0:	f800283a 	ret
  8083e4:	480f883a 	mov	r7,r9
  8083e8:	4009883a 	mov	r4,r8
  8083ec:	480b883a 	mov	r5,r9
  8083f0:	400d883a 	mov	r6,r8
  8083f4:	0808bc00 	call	808bc0 <__adddf3>
  8083f8:	1011883a 	mov	r8,r2
  8083fc:	1813883a 	mov	r9,r3
  808400:	4005883a 	mov	r2,r8
  808404:	4807883a 	mov	r3,r9
  808408:	dfc00217 	ldw	ra,8(sp)
  80840c:	dc400117 	ldw	r17,4(sp)
  808410:	dc000017 	ldw	r16,0(sp)
  808414:	dec00304 	addi	sp,sp,12
  808418:	f800283a 	ret
  80841c:	04220034 	movhi	r16,34816
  808420:	841d6704 	addi	r16,r16,30108
  808424:	045f8e34 	movhi	r17,32312
  808428:	8c790f04 	addi	r17,r17,-7108
  80842c:	480f883a 	mov	r7,r9
  808430:	400d883a 	mov	r6,r8
  808434:	8009883a 	mov	r4,r16
  808438:	880b883a 	mov	r5,r17
  80843c:	08084ac0 	call	8084ac <copysign>
  808440:	180b883a 	mov	r5,r3
  808444:	800d883a 	mov	r6,r16
  808448:	880f883a 	mov	r7,r17
  80844c:	1009883a 	mov	r4,r2
  808450:	003fc306 	br	808360 <scalbn+0x94>
  808454:	00bff284 	movi	r2,-54
  808458:	11000716 	blt	r2,r4,808478 <scalbn+0x1ac>
  80845c:	00b0d414 	movui	r2,50000
  808460:	143fee16 	blt	r2,r16,80841c <scalbn+0x150>
  808464:	0430be74 	movhi	r16,49913
  808468:	843cd644 	addi	r16,r16,-3239
  80846c:	04406974 	movhi	r17,421
  808470:	8c5b87c4 	addi	r17,r17,28191
  808474:	003fed06 	br	80842c <scalbn+0x160>
  808478:	21000d84 	addi	r4,r4,54
  80847c:	2008953a 	slli	r4,r4,20
  808480:	01e00434 	movhi	r7,32784
  808484:	39ffffc4 	addi	r7,r7,-1
  808488:	51ce703a 	and	r7,r10,r7
  80848c:	390eb03a 	or	r7,r7,r4
  808490:	024f2434 	movhi	r9,15504
  808494:	4009883a 	mov	r4,r8
  808498:	0011883a 	mov	r8,zero
  80849c:	380b883a 	mov	r5,r7
  8084a0:	400d883a 	mov	r6,r8
  8084a4:	480f883a 	mov	r7,r9
  8084a8:	003fad06 	br	808360 <scalbn+0x94>

008084ac <copysign>:
  8084ac:	3813883a 	mov	r9,r7
  8084b0:	01e00034 	movhi	r7,32768
  8084b4:	39ffffc4 	addi	r7,r7,-1
  8084b8:	394e703a 	and	r7,r7,r5
  8084bc:	4aa0002c 	andhi	r10,r9,32768
  8084c0:	3a8eb03a 	or	r7,r7,r10
  8084c4:	2005883a 	mov	r2,r4
  8084c8:	3807883a 	mov	r3,r7
  8084cc:	f800283a 	ret

008084d0 <__divsf3>:
  8084d0:	defff304 	addi	sp,sp,-52
  8084d4:	dc400b15 	stw	r17,44(sp)
  8084d8:	dc400204 	addi	r17,sp,8
  8084dc:	dc000a15 	stw	r16,40(sp)
  8084e0:	d9000015 	stw	r4,0(sp)
  8084e4:	d9400115 	stw	r5,4(sp)
  8084e8:	d809883a 	mov	r4,sp
  8084ec:	880b883a 	mov	r5,r17
  8084f0:	dc000604 	addi	r16,sp,24
  8084f4:	dfc00c15 	stw	ra,48(sp)
  8084f8:	0809ac40 	call	809ac4 <__unpack_f>
  8084fc:	d9000104 	addi	r4,sp,4
  808500:	800b883a 	mov	r5,r16
  808504:	0809ac40 	call	809ac4 <__unpack_f>
  808508:	d9000217 	ldw	r4,8(sp)
  80850c:	00800044 	movi	r2,1
  808510:	01800104 	movi	r6,4
  808514:	11000a2e 	bgeu	r2,r4,808540 <__divsf3+0x70>
  808518:	d9400617 	ldw	r5,24(sp)
  80851c:	1140432e 	bgeu	r2,r5,80862c <__divsf3+0x15c>
  808520:	d8800317 	ldw	r2,12(sp)
  808524:	d8c00717 	ldw	r3,28(sp)
  808528:	10c4f03a 	xor	r2,r2,r3
  80852c:	d8800315 	stw	r2,12(sp)
  808530:	21800226 	beq	r4,r6,80853c <__divsf3+0x6c>
  808534:	00800084 	movi	r2,2
  808538:	2080101e 	bne	r4,r2,80857c <__divsf3+0xac>
  80853c:	29000726 	beq	r5,r4,80855c <__divsf3+0x8c>
  808540:	8809883a 	mov	r4,r17
  808544:	08099640 	call	809964 <__pack_f>
  808548:	dfc00c17 	ldw	ra,48(sp)
  80854c:	dc400b17 	ldw	r17,44(sp)
  808550:	dc000a17 	ldw	r16,40(sp)
  808554:	dec00d04 	addi	sp,sp,52
  808558:	f800283a 	ret
  80855c:	010020b4 	movhi	r4,130
  808560:	21344d04 	addi	r4,r4,-11980
  808564:	08099640 	call	809964 <__pack_f>
  808568:	dfc00c17 	ldw	ra,48(sp)
  80856c:	dc400b17 	ldw	r17,44(sp)
  808570:	dc000a17 	ldw	r16,40(sp)
  808574:	dec00d04 	addi	sp,sp,52
  808578:	f800283a 	ret
  80857c:	29802d26 	beq	r5,r6,808634 <__divsf3+0x164>
  808580:	28801a26 	beq	r5,r2,8085ec <__divsf3+0x11c>
  808584:	d8c00417 	ldw	r3,16(sp)
  808588:	d8800817 	ldw	r2,32(sp)
  80858c:	d9000517 	ldw	r4,20(sp)
  808590:	d9800917 	ldw	r6,36(sp)
  808594:	1885c83a 	sub	r2,r3,r2
  808598:	d8800415 	stw	r2,16(sp)
  80859c:	2180032e 	bgeu	r4,r6,8085ac <__divsf3+0xdc>
  8085a0:	10bfffc4 	addi	r2,r2,-1
  8085a4:	d8800415 	stw	r2,16(sp)
  8085a8:	2109883a 	add	r4,r4,r4
  8085ac:	01500034 	movhi	r5,16384
  8085b0:	0007883a 	mov	r3,zero
  8085b4:	0005883a 	mov	r2,zero
  8085b8:	01c007c4 	movi	r7,31
  8085bc:	10800044 	addi	r2,r2,1
  8085c0:	21800236 	bltu	r4,r6,8085cc <__divsf3+0xfc>
  8085c4:	1946b03a 	or	r3,r3,r5
  8085c8:	2189c83a 	sub	r4,r4,r6
  8085cc:	280ad07a 	srli	r5,r5,1
  8085d0:	2109883a 	add	r4,r4,r4
  8085d4:	11fff91e 	bne	r2,r7,8085bc <__divsf3+0xec>
  8085d8:	19401fcc 	andi	r5,r3,127
  8085dc:	00801004 	movi	r2,64
  8085e0:	28800a26 	beq	r5,r2,80860c <__divsf3+0x13c>
  8085e4:	d8c00515 	stw	r3,20(sp)
  8085e8:	003fd506 	br	808540 <__divsf3+0x70>
  8085ec:	8809883a 	mov	r4,r17
  8085f0:	d9800215 	stw	r6,8(sp)
  8085f4:	08099640 	call	809964 <__pack_f>
  8085f8:	dfc00c17 	ldw	ra,48(sp)
  8085fc:	dc400b17 	ldw	r17,44(sp)
  808600:	dc000a17 	ldw	r16,40(sp)
  808604:	dec00d04 	addi	sp,sp,52
  808608:	f800283a 	ret
  80860c:	1880200c 	andi	r2,r3,128
  808610:	103ff41e 	bne	r2,zero,8085e4 <__divsf3+0x114>
  808614:	203ff326 	beq	r4,zero,8085e4 <__divsf3+0x114>
  808618:	1947883a 	add	r3,r3,r5
  80861c:	00bfe004 	movi	r2,-128
  808620:	1886703a 	and	r3,r3,r2
  808624:	d8c00515 	stw	r3,20(sp)
  808628:	003fc506 	br	808540 <__divsf3+0x70>
  80862c:	8009883a 	mov	r4,r16
  808630:	003fc406 	br	808544 <__divsf3+0x74>
  808634:	8809883a 	mov	r4,r17
  808638:	d8000515 	stw	zero,20(sp)
  80863c:	d8000415 	stw	zero,16(sp)
  808640:	003fc006 	br	808544 <__divsf3+0x74>

00808644 <__floatsisf>:
  808644:	2006d7fa 	srli	r3,r4,31
  808648:	defffa04 	addi	sp,sp,-24
  80864c:	008000c4 	movi	r2,3
  808650:	dfc00515 	stw	ra,20(sp)
  808654:	dc000415 	stw	r16,16(sp)
  808658:	d8800015 	stw	r2,0(sp)
  80865c:	d8c00115 	stw	r3,4(sp)
  808660:	2000081e 	bne	r4,zero,808684 <__floatsisf+0x40>
  808664:	00800084 	movi	r2,2
  808668:	d8800015 	stw	r2,0(sp)
  80866c:	d809883a 	mov	r4,sp
  808670:	08099640 	call	809964 <__pack_f>
  808674:	dfc00517 	ldw	ra,20(sp)
  808678:	dc000417 	ldw	r16,16(sp)
  80867c:	dec00604 	addi	sp,sp,24
  808680:	f800283a 	ret
  808684:	00800784 	movi	r2,30
  808688:	1807003a 	cmpeq	r3,r3,zero
  80868c:	d8800215 	stw	r2,8(sp)
  808690:	18000e1e 	bne	r3,zero,8086cc <__floatsisf+0x88>
  808694:	00a00034 	movhi	r2,32768
  808698:	20800e26 	beq	r4,r2,8086d4 <__floatsisf+0x90>
  80869c:	0121c83a 	sub	r16,zero,r4
  8086a0:	8009883a 	mov	r4,r16
  8086a4:	dc000315 	stw	r16,12(sp)
  8086a8:	08098e40 	call	8098e4 <__clzsi2>
  8086ac:	117fffc4 	addi	r5,r2,-1
  8086b0:	017fee0e 	bge	zero,r5,80866c <__floatsisf+0x28>
  8086b4:	d8800217 	ldw	r2,8(sp)
  8086b8:	8146983a 	sll	r3,r16,r5
  8086bc:	1145c83a 	sub	r2,r2,r5
  8086c0:	d8c00315 	stw	r3,12(sp)
  8086c4:	d8800215 	stw	r2,8(sp)
  8086c8:	003fe806 	br	80866c <__floatsisf+0x28>
  8086cc:	2021883a 	mov	r16,r4
  8086d0:	003ff306 	br	8086a0 <__floatsisf+0x5c>
  8086d4:	00b3c034 	movhi	r2,52992
  8086d8:	003fe606 	br	808674 <__floatsisf+0x30>

008086dc <__extendsfdf2>:
  8086dc:	defff904 	addi	sp,sp,-28
  8086e0:	d9000115 	stw	r4,4(sp)
  8086e4:	d9400204 	addi	r5,sp,8
  8086e8:	d9000104 	addi	r4,sp,4
  8086ec:	dfc00615 	stw	ra,24(sp)
  8086f0:	0809ac40 	call	809ac4 <__unpack_f>
  8086f4:	d9c00517 	ldw	r7,20(sp)
  8086f8:	0011883a 	mov	r8,zero
  8086fc:	400697ba 	slli	r3,r8,30
  808700:	3812d0ba 	srli	r9,r7,2
  808704:	380497ba 	slli	r2,r7,30
  808708:	d9000217 	ldw	r4,8(sp)
  80870c:	d9400317 	ldw	r5,12(sp)
  808710:	d9800417 	ldw	r6,16(sp)
  808714:	48c6b03a 	or	r3,r9,r3
  808718:	100f883a 	mov	r7,r2
  80871c:	d8c00015 	stw	r3,0(sp)
  808720:	08096c80 	call	8096c8 <__make_dp>
  808724:	dfc00617 	ldw	ra,24(sp)
  808728:	dec00704 	addi	sp,sp,28
  80872c:	f800283a 	ret

00808730 <_fpadd_parts>:
  808730:	defff804 	addi	sp,sp,-32
  808734:	dcc00315 	stw	r19,12(sp)
  808738:	2027883a 	mov	r19,r4
  80873c:	21000017 	ldw	r4,0(r4)
  808740:	00c00044 	movi	r3,1
  808744:	dd400515 	stw	r21,20(sp)
  808748:	dd000415 	stw	r20,16(sp)
  80874c:	ddc00715 	stw	r23,28(sp)
  808750:	dd800615 	stw	r22,24(sp)
  808754:	dc800215 	stw	r18,8(sp)
  808758:	dc400115 	stw	r17,4(sp)
  80875c:	dc000015 	stw	r16,0(sp)
  808760:	282b883a 	mov	r21,r5
  808764:	3029883a 	mov	r20,r6
  808768:	1900632e 	bgeu	r3,r4,8088f8 <_fpadd_parts+0x1c8>
  80876c:	28800017 	ldw	r2,0(r5)
  808770:	1880812e 	bgeu	r3,r2,808978 <_fpadd_parts+0x248>
  808774:	00c00104 	movi	r3,4
  808778:	20c0dc26 	beq	r4,r3,808aec <_fpadd_parts+0x3bc>
  80877c:	10c07e26 	beq	r2,r3,808978 <_fpadd_parts+0x248>
  808780:	00c00084 	movi	r3,2
  808784:	10c06726 	beq	r2,r3,808924 <_fpadd_parts+0x1f4>
  808788:	20c07b26 	beq	r4,r3,808978 <_fpadd_parts+0x248>
  80878c:	9dc00217 	ldw	r23,8(r19)
  808790:	28c00217 	ldw	r3,8(r5)
  808794:	9c400317 	ldw	r17,12(r19)
  808798:	2bc00317 	ldw	r15,12(r5)
  80879c:	b8cdc83a 	sub	r6,r23,r3
  8087a0:	9c800417 	ldw	r18,16(r19)
  8087a4:	2c000417 	ldw	r16,16(r5)
  8087a8:	3009883a 	mov	r4,r6
  8087ac:	30009716 	blt	r6,zero,808a0c <_fpadd_parts+0x2dc>
  8087b0:	00800fc4 	movi	r2,63
  8087b4:	11806b16 	blt	r2,r6,808964 <_fpadd_parts+0x234>
  8087b8:	0100a40e 	bge	zero,r4,808a4c <_fpadd_parts+0x31c>
  8087bc:	35bff804 	addi	r22,r6,-32
  8087c0:	b000bc16 	blt	r22,zero,808ab4 <_fpadd_parts+0x384>
  8087c4:	8596d83a 	srl	r11,r16,r22
  8087c8:	0019883a 	mov	r12,zero
  8087cc:	0013883a 	mov	r9,zero
  8087d0:	01000044 	movi	r4,1
  8087d4:	0015883a 	mov	r10,zero
  8087d8:	b000be16 	blt	r22,zero,808ad4 <_fpadd_parts+0x3a4>
  8087dc:	2590983a 	sll	r8,r4,r22
  8087e0:	000f883a 	mov	r7,zero
  8087e4:	00bfffc4 	movi	r2,-1
  8087e8:	3889883a 	add	r4,r7,r2
  8087ec:	408b883a 	add	r5,r8,r2
  8087f0:	21cd803a 	cmpltu	r6,r4,r7
  8087f4:	314b883a 	add	r5,r6,r5
  8087f8:	7904703a 	and	r2,r15,r4
  8087fc:	8146703a 	and	r3,r16,r5
  808800:	10c4b03a 	or	r2,r2,r3
  808804:	10000226 	beq	r2,zero,808810 <_fpadd_parts+0xe0>
  808808:	02400044 	movi	r9,1
  80880c:	0015883a 	mov	r10,zero
  808810:	5a5eb03a 	or	r15,r11,r9
  808814:	62a0b03a 	or	r16,r12,r10
  808818:	99400117 	ldw	r5,4(r19)
  80881c:	a8800117 	ldw	r2,4(r21)
  808820:	28806e26 	beq	r5,r2,8089dc <_fpadd_parts+0x2ac>
  808824:	28006626 	beq	r5,zero,8089c0 <_fpadd_parts+0x290>
  808828:	7c45c83a 	sub	r2,r15,r17
  80882c:	7889803a 	cmpltu	r4,r15,r2
  808830:	8487c83a 	sub	r3,r16,r18
  808834:	1909c83a 	sub	r4,r3,r4
  808838:	100d883a 	mov	r6,r2
  80883c:	200f883a 	mov	r7,r4
  808840:	38007716 	blt	r7,zero,808a20 <_fpadd_parts+0x2f0>
  808844:	a5c00215 	stw	r23,8(r20)
  808848:	a1c00415 	stw	r7,16(r20)
  80884c:	a0000115 	stw	zero,4(r20)
  808850:	a1800315 	stw	r6,12(r20)
  808854:	a2000317 	ldw	r8,12(r20)
  808858:	a2400417 	ldw	r9,16(r20)
  80885c:	00bfffc4 	movi	r2,-1
  808860:	408b883a 	add	r5,r8,r2
  808864:	2a09803a 	cmpltu	r4,r5,r8
  808868:	488d883a 	add	r6,r9,r2
  80886c:	01c40034 	movhi	r7,4096
  808870:	39ffffc4 	addi	r7,r7,-1
  808874:	218d883a 	add	r6,r4,r6
  808878:	39801736 	bltu	r7,r6,8088d8 <_fpadd_parts+0x1a8>
  80887c:	31c06526 	beq	r6,r7,808a14 <_fpadd_parts+0x2e4>
  808880:	a3000217 	ldw	r12,8(r20)
  808884:	4209883a 	add	r4,r8,r8
  808888:	00bfffc4 	movi	r2,-1
  80888c:	220f803a 	cmpltu	r7,r4,r8
  808890:	4a4b883a 	add	r5,r9,r9
  808894:	394f883a 	add	r7,r7,r5
  808898:	2095883a 	add	r10,r4,r2
  80889c:	3897883a 	add	r11,r7,r2
  8088a0:	510d803a 	cmpltu	r6,r10,r4
  8088a4:	6099883a 	add	r12,r12,r2
  8088a8:	32d7883a 	add	r11,r6,r11
  8088ac:	00840034 	movhi	r2,4096
  8088b0:	10bfffc4 	addi	r2,r2,-1
  8088b4:	2011883a 	mov	r8,r4
  8088b8:	3813883a 	mov	r9,r7
  8088bc:	a1000315 	stw	r4,12(r20)
  8088c0:	a1c00415 	stw	r7,16(r20)
  8088c4:	a3000215 	stw	r12,8(r20)
  8088c8:	12c00336 	bltu	r2,r11,8088d8 <_fpadd_parts+0x1a8>
  8088cc:	58bfed1e 	bne	r11,r2,808884 <_fpadd_parts+0x154>
  8088d0:	00bfff84 	movi	r2,-2
  8088d4:	12bfeb2e 	bgeu	r2,r10,808884 <_fpadd_parts+0x154>
  8088d8:	a2800417 	ldw	r10,16(r20)
  8088dc:	008000c4 	movi	r2,3
  8088e0:	00c80034 	movhi	r3,8192
  8088e4:	18ffffc4 	addi	r3,r3,-1
  8088e8:	a2400317 	ldw	r9,12(r20)
  8088ec:	a0800015 	stw	r2,0(r20)
  8088f0:	1a802336 	bltu	r3,r10,808980 <_fpadd_parts+0x250>
  8088f4:	a027883a 	mov	r19,r20
  8088f8:	9805883a 	mov	r2,r19
  8088fc:	ddc00717 	ldw	r23,28(sp)
  808900:	dd800617 	ldw	r22,24(sp)
  808904:	dd400517 	ldw	r21,20(sp)
  808908:	dd000417 	ldw	r20,16(sp)
  80890c:	dcc00317 	ldw	r19,12(sp)
  808910:	dc800217 	ldw	r18,8(sp)
  808914:	dc400117 	ldw	r17,4(sp)
  808918:	dc000017 	ldw	r16,0(sp)
  80891c:	dec00804 	addi	sp,sp,32
  808920:	f800283a 	ret
  808924:	20fff41e 	bne	r4,r3,8088f8 <_fpadd_parts+0x1c8>
  808928:	31000015 	stw	r4,0(r6)
  80892c:	98800117 	ldw	r2,4(r19)
  808930:	30800115 	stw	r2,4(r6)
  808934:	98c00217 	ldw	r3,8(r19)
  808938:	30c00215 	stw	r3,8(r6)
  80893c:	98800317 	ldw	r2,12(r19)
  808940:	30800315 	stw	r2,12(r6)
  808944:	98c00417 	ldw	r3,16(r19)
  808948:	30c00415 	stw	r3,16(r6)
  80894c:	98800117 	ldw	r2,4(r19)
  808950:	28c00117 	ldw	r3,4(r5)
  808954:	3027883a 	mov	r19,r6
  808958:	10c4703a 	and	r2,r2,r3
  80895c:	30800115 	stw	r2,4(r6)
  808960:	003fe506 	br	8088f8 <_fpadd_parts+0x1c8>
  808964:	1dc02616 	blt	r3,r23,808a00 <_fpadd_parts+0x2d0>
  808968:	0023883a 	mov	r17,zero
  80896c:	182f883a 	mov	r23,r3
  808970:	0025883a 	mov	r18,zero
  808974:	003fa806 	br	808818 <_fpadd_parts+0xe8>
  808978:	a827883a 	mov	r19,r21
  80897c:	003fde06 	br	8088f8 <_fpadd_parts+0x1c8>
  808980:	01800044 	movi	r6,1
  808984:	500497fa 	slli	r2,r10,31
  808988:	4808d07a 	srli	r4,r9,1
  80898c:	518ad83a 	srl	r5,r10,r6
  808990:	a2000217 	ldw	r8,8(r20)
  808994:	1108b03a 	or	r4,r2,r4
  808998:	0007883a 	mov	r3,zero
  80899c:	4984703a 	and	r2,r9,r6
  8089a0:	208cb03a 	or	r6,r4,r2
  8089a4:	28ceb03a 	or	r7,r5,r3
  8089a8:	42000044 	addi	r8,r8,1
  8089ac:	a027883a 	mov	r19,r20
  8089b0:	a1c00415 	stw	r7,16(r20)
  8089b4:	a2000215 	stw	r8,8(r20)
  8089b8:	a1800315 	stw	r6,12(r20)
  8089bc:	003fce06 	br	8088f8 <_fpadd_parts+0x1c8>
  8089c0:	8bc5c83a 	sub	r2,r17,r15
  8089c4:	8889803a 	cmpltu	r4,r17,r2
  8089c8:	9407c83a 	sub	r3,r18,r16
  8089cc:	1909c83a 	sub	r4,r3,r4
  8089d0:	100d883a 	mov	r6,r2
  8089d4:	200f883a 	mov	r7,r4
  8089d8:	003f9906 	br	808840 <_fpadd_parts+0x110>
  8089dc:	7c45883a 	add	r2,r15,r17
  8089e0:	13c9803a 	cmpltu	r4,r2,r15
  8089e4:	8487883a 	add	r3,r16,r18
  8089e8:	20c9883a 	add	r4,r4,r3
  8089ec:	a1400115 	stw	r5,4(r20)
  8089f0:	a5c00215 	stw	r23,8(r20)
  8089f4:	a0800315 	stw	r2,12(r20)
  8089f8:	a1000415 	stw	r4,16(r20)
  8089fc:	003fb606 	br	8088d8 <_fpadd_parts+0x1a8>
  808a00:	001f883a 	mov	r15,zero
  808a04:	0021883a 	mov	r16,zero
  808a08:	003f8306 	br	808818 <_fpadd_parts+0xe8>
  808a0c:	018dc83a 	sub	r6,zero,r6
  808a10:	003f6706 	br	8087b0 <_fpadd_parts+0x80>
  808a14:	00bfff84 	movi	r2,-2
  808a18:	117faf36 	bltu	r2,r5,8088d8 <_fpadd_parts+0x1a8>
  808a1c:	003f9806 	br	808880 <_fpadd_parts+0x150>
  808a20:	0005883a 	mov	r2,zero
  808a24:	1189c83a 	sub	r4,r2,r6
  808a28:	1105803a 	cmpltu	r2,r2,r4
  808a2c:	01cbc83a 	sub	r5,zero,r7
  808a30:	2885c83a 	sub	r2,r5,r2
  808a34:	01800044 	movi	r6,1
  808a38:	a1800115 	stw	r6,4(r20)
  808a3c:	a5c00215 	stw	r23,8(r20)
  808a40:	a1000315 	stw	r4,12(r20)
  808a44:	a0800415 	stw	r2,16(r20)
  808a48:	003f8206 	br	808854 <_fpadd_parts+0x124>
  808a4c:	203f7226 	beq	r4,zero,808818 <_fpadd_parts+0xe8>
  808a50:	35bff804 	addi	r22,r6,-32
  808a54:	b9af883a 	add	r23,r23,r6
  808a58:	b0003116 	blt	r22,zero,808b20 <_fpadd_parts+0x3f0>
  808a5c:	959ad83a 	srl	r13,r18,r22
  808a60:	001d883a 	mov	r14,zero
  808a64:	000f883a 	mov	r7,zero
  808a68:	01000044 	movi	r4,1
  808a6c:	0011883a 	mov	r8,zero
  808a70:	b0002516 	blt	r22,zero,808b08 <_fpadd_parts+0x3d8>
  808a74:	2594983a 	sll	r10,r4,r22
  808a78:	0013883a 	mov	r9,zero
  808a7c:	00bfffc4 	movi	r2,-1
  808a80:	4889883a 	add	r4,r9,r2
  808a84:	508b883a 	add	r5,r10,r2
  808a88:	224d803a 	cmpltu	r6,r4,r9
  808a8c:	314b883a 	add	r5,r6,r5
  808a90:	8904703a 	and	r2,r17,r4
  808a94:	9146703a 	and	r3,r18,r5
  808a98:	10c4b03a 	or	r2,r2,r3
  808a9c:	10000226 	beq	r2,zero,808aa8 <_fpadd_parts+0x378>
  808aa0:	01c00044 	movi	r7,1
  808aa4:	0011883a 	mov	r8,zero
  808aa8:	69e2b03a 	or	r17,r13,r7
  808aac:	7224b03a 	or	r18,r14,r8
  808ab0:	003f5906 	br	808818 <_fpadd_parts+0xe8>
  808ab4:	8407883a 	add	r3,r16,r16
  808ab8:	008007c4 	movi	r2,31
  808abc:	1185c83a 	sub	r2,r2,r6
  808ac0:	1886983a 	sll	r3,r3,r2
  808ac4:	7996d83a 	srl	r11,r15,r6
  808ac8:	8198d83a 	srl	r12,r16,r6
  808acc:	1ad6b03a 	or	r11,r3,r11
  808ad0:	003f3e06 	br	8087cc <_fpadd_parts+0x9c>
  808ad4:	2006d07a 	srli	r3,r4,1
  808ad8:	008007c4 	movi	r2,31
  808adc:	1185c83a 	sub	r2,r2,r6
  808ae0:	1890d83a 	srl	r8,r3,r2
  808ae4:	218e983a 	sll	r7,r4,r6
  808ae8:	003f3e06 	br	8087e4 <_fpadd_parts+0xb4>
  808aec:	113f821e 	bne	r2,r4,8088f8 <_fpadd_parts+0x1c8>
  808af0:	28c00117 	ldw	r3,4(r5)
  808af4:	98800117 	ldw	r2,4(r19)
  808af8:	10ff7f26 	beq	r2,r3,8088f8 <_fpadd_parts+0x1c8>
  808afc:	04c020b4 	movhi	r19,130
  808b00:	9cf45104 	addi	r19,r19,-11964
  808b04:	003f7c06 	br	8088f8 <_fpadd_parts+0x1c8>
  808b08:	2006d07a 	srli	r3,r4,1
  808b0c:	008007c4 	movi	r2,31
  808b10:	1185c83a 	sub	r2,r2,r6
  808b14:	1894d83a 	srl	r10,r3,r2
  808b18:	2192983a 	sll	r9,r4,r6
  808b1c:	003fd706 	br	808a7c <_fpadd_parts+0x34c>
  808b20:	9487883a 	add	r3,r18,r18
  808b24:	008007c4 	movi	r2,31
  808b28:	1185c83a 	sub	r2,r2,r6
  808b2c:	1886983a 	sll	r3,r3,r2
  808b30:	899ad83a 	srl	r13,r17,r6
  808b34:	919cd83a 	srl	r14,r18,r6
  808b38:	1b5ab03a 	or	r13,r3,r13
  808b3c:	003fc906 	br	808a64 <_fpadd_parts+0x334>

00808b40 <__subdf3>:
  808b40:	deffea04 	addi	sp,sp,-88
  808b44:	dcc01415 	stw	r19,80(sp)
  808b48:	dcc00404 	addi	r19,sp,16
  808b4c:	2011883a 	mov	r8,r4
  808b50:	2813883a 	mov	r9,r5
  808b54:	dc401315 	stw	r17,76(sp)
  808b58:	d809883a 	mov	r4,sp
  808b5c:	980b883a 	mov	r5,r19
  808b60:	dc400904 	addi	r17,sp,36
  808b64:	dfc01515 	stw	ra,84(sp)
  808b68:	da400115 	stw	r9,4(sp)
  808b6c:	d9c00315 	stw	r7,12(sp)
  808b70:	da000015 	stw	r8,0(sp)
  808b74:	d9800215 	stw	r6,8(sp)
  808b78:	0809ea00 	call	809ea0 <__unpack_d>
  808b7c:	d9000204 	addi	r4,sp,8
  808b80:	880b883a 	mov	r5,r17
  808b84:	0809ea00 	call	809ea0 <__unpack_d>
  808b88:	d8800a17 	ldw	r2,40(sp)
  808b8c:	880b883a 	mov	r5,r17
  808b90:	9809883a 	mov	r4,r19
  808b94:	d9800e04 	addi	r6,sp,56
  808b98:	1080005c 	xori	r2,r2,1
  808b9c:	d8800a15 	stw	r2,40(sp)
  808ba0:	08087300 	call	808730 <_fpadd_parts>
  808ba4:	1009883a 	mov	r4,r2
  808ba8:	0809b8c0 	call	809b8c <__pack_d>
  808bac:	dfc01517 	ldw	ra,84(sp)
  808bb0:	dcc01417 	ldw	r19,80(sp)
  808bb4:	dc401317 	ldw	r17,76(sp)
  808bb8:	dec01604 	addi	sp,sp,88
  808bbc:	f800283a 	ret

00808bc0 <__adddf3>:
  808bc0:	deffea04 	addi	sp,sp,-88
  808bc4:	dcc01415 	stw	r19,80(sp)
  808bc8:	dcc00404 	addi	r19,sp,16
  808bcc:	2011883a 	mov	r8,r4
  808bd0:	2813883a 	mov	r9,r5
  808bd4:	dc401315 	stw	r17,76(sp)
  808bd8:	d809883a 	mov	r4,sp
  808bdc:	980b883a 	mov	r5,r19
  808be0:	dc400904 	addi	r17,sp,36
  808be4:	dfc01515 	stw	ra,84(sp)
  808be8:	da400115 	stw	r9,4(sp)
  808bec:	d9c00315 	stw	r7,12(sp)
  808bf0:	da000015 	stw	r8,0(sp)
  808bf4:	d9800215 	stw	r6,8(sp)
  808bf8:	0809ea00 	call	809ea0 <__unpack_d>
  808bfc:	d9000204 	addi	r4,sp,8
  808c00:	880b883a 	mov	r5,r17
  808c04:	0809ea00 	call	809ea0 <__unpack_d>
  808c08:	d9800e04 	addi	r6,sp,56
  808c0c:	9809883a 	mov	r4,r19
  808c10:	880b883a 	mov	r5,r17
  808c14:	08087300 	call	808730 <_fpadd_parts>
  808c18:	1009883a 	mov	r4,r2
  808c1c:	0809b8c0 	call	809b8c <__pack_d>
  808c20:	dfc01517 	ldw	ra,84(sp)
  808c24:	dcc01417 	ldw	r19,80(sp)
  808c28:	dc401317 	ldw	r17,76(sp)
  808c2c:	dec01604 	addi	sp,sp,88
  808c30:	f800283a 	ret

00808c34 <__muldf3>:
  808c34:	deffe004 	addi	sp,sp,-128
  808c38:	dc401815 	stw	r17,96(sp)
  808c3c:	dc400404 	addi	r17,sp,16
  808c40:	2011883a 	mov	r8,r4
  808c44:	2813883a 	mov	r9,r5
  808c48:	dc001715 	stw	r16,92(sp)
  808c4c:	d809883a 	mov	r4,sp
  808c50:	880b883a 	mov	r5,r17
  808c54:	dc000904 	addi	r16,sp,36
  808c58:	dfc01f15 	stw	ra,124(sp)
  808c5c:	da400115 	stw	r9,4(sp)
  808c60:	d9c00315 	stw	r7,12(sp)
  808c64:	da000015 	stw	r8,0(sp)
  808c68:	d9800215 	stw	r6,8(sp)
  808c6c:	ddc01e15 	stw	r23,120(sp)
  808c70:	dd801d15 	stw	r22,116(sp)
  808c74:	dd401c15 	stw	r21,112(sp)
  808c78:	dd001b15 	stw	r20,108(sp)
  808c7c:	dcc01a15 	stw	r19,104(sp)
  808c80:	dc801915 	stw	r18,100(sp)
  808c84:	0809ea00 	call	809ea0 <__unpack_d>
  808c88:	d9000204 	addi	r4,sp,8
  808c8c:	800b883a 	mov	r5,r16
  808c90:	0809ea00 	call	809ea0 <__unpack_d>
  808c94:	d9000417 	ldw	r4,16(sp)
  808c98:	00800044 	movi	r2,1
  808c9c:	1100102e 	bgeu	r2,r4,808ce0 <__muldf3+0xac>
  808ca0:	d8c00917 	ldw	r3,36(sp)
  808ca4:	10c0062e 	bgeu	r2,r3,808cc0 <__muldf3+0x8c>
  808ca8:	00800104 	movi	r2,4
  808cac:	20800a26 	beq	r4,r2,808cd8 <__muldf3+0xa4>
  808cb0:	1880cc26 	beq	r3,r2,808fe4 <__muldf3+0x3b0>
  808cb4:	00800084 	movi	r2,2
  808cb8:	20800926 	beq	r4,r2,808ce0 <__muldf3+0xac>
  808cbc:	1880191e 	bne	r3,r2,808d24 <__muldf3+0xf0>
  808cc0:	d8c00a17 	ldw	r3,40(sp)
  808cc4:	d8800517 	ldw	r2,20(sp)
  808cc8:	8009883a 	mov	r4,r16
  808ccc:	10c4c03a 	cmpne	r2,r2,r3
  808cd0:	d8800a15 	stw	r2,40(sp)
  808cd4:	00000706 	br	808cf4 <__muldf3+0xc0>
  808cd8:	00800084 	movi	r2,2
  808cdc:	1880c326 	beq	r3,r2,808fec <__muldf3+0x3b8>
  808ce0:	d8800517 	ldw	r2,20(sp)
  808ce4:	d8c00a17 	ldw	r3,40(sp)
  808ce8:	8809883a 	mov	r4,r17
  808cec:	10c4c03a 	cmpne	r2,r2,r3
  808cf0:	d8800515 	stw	r2,20(sp)
  808cf4:	0809b8c0 	call	809b8c <__pack_d>
  808cf8:	dfc01f17 	ldw	ra,124(sp)
  808cfc:	ddc01e17 	ldw	r23,120(sp)
  808d00:	dd801d17 	ldw	r22,116(sp)
  808d04:	dd401c17 	ldw	r21,112(sp)
  808d08:	dd001b17 	ldw	r20,108(sp)
  808d0c:	dcc01a17 	ldw	r19,104(sp)
  808d10:	dc801917 	ldw	r18,100(sp)
  808d14:	dc401817 	ldw	r17,96(sp)
  808d18:	dc001717 	ldw	r16,92(sp)
  808d1c:	dec02004 	addi	sp,sp,128
  808d20:	f800283a 	ret
  808d24:	dd800717 	ldw	r22,28(sp)
  808d28:	dc800c17 	ldw	r18,48(sp)
  808d2c:	002b883a 	mov	r21,zero
  808d30:	0023883a 	mov	r17,zero
  808d34:	a80b883a 	mov	r5,r21
  808d38:	b00d883a 	mov	r6,r22
  808d3c:	880f883a 	mov	r7,r17
  808d40:	ddc00817 	ldw	r23,32(sp)
  808d44:	dcc00d17 	ldw	r19,52(sp)
  808d48:	9009883a 	mov	r4,r18
  808d4c:	080984c0 	call	80984c <__muldi3>
  808d50:	001b883a 	mov	r13,zero
  808d54:	680f883a 	mov	r7,r13
  808d58:	b009883a 	mov	r4,r22
  808d5c:	000b883a 	mov	r5,zero
  808d60:	980d883a 	mov	r6,r19
  808d64:	b82d883a 	mov	r22,r23
  808d68:	002f883a 	mov	r23,zero
  808d6c:	db401615 	stw	r13,88(sp)
  808d70:	d8801315 	stw	r2,76(sp)
  808d74:	d8c01415 	stw	r3,80(sp)
  808d78:	dcc01515 	stw	r19,84(sp)
  808d7c:	080984c0 	call	80984c <__muldi3>
  808d80:	b00d883a 	mov	r6,r22
  808d84:	000b883a 	mov	r5,zero
  808d88:	9009883a 	mov	r4,r18
  808d8c:	b80f883a 	mov	r7,r23
  808d90:	1021883a 	mov	r16,r2
  808d94:	1823883a 	mov	r17,r3
  808d98:	080984c0 	call	80984c <__muldi3>
  808d9c:	8085883a 	add	r2,r16,r2
  808da0:	140d803a 	cmpltu	r6,r2,r16
  808da4:	88c7883a 	add	r3,r17,r3
  808da8:	30cd883a 	add	r6,r6,r3
  808dac:	1029883a 	mov	r20,r2
  808db0:	302b883a 	mov	r21,r6
  808db4:	da801317 	ldw	r10,76(sp)
  808db8:	dac01417 	ldw	r11,80(sp)
  808dbc:	db001517 	ldw	r12,84(sp)
  808dc0:	db401617 	ldw	r13,88(sp)
  808dc4:	3440612e 	bgeu	r6,r17,808f4c <__muldf3+0x318>
  808dc8:	0009883a 	mov	r4,zero
  808dcc:	5105883a 	add	r2,r10,r4
  808dd0:	128d803a 	cmpltu	r6,r2,r10
  808dd4:	5d07883a 	add	r3,r11,r20
  808dd8:	30cd883a 	add	r6,r6,r3
  808ddc:	0021883a 	mov	r16,zero
  808de0:	04400044 	movi	r17,1
  808de4:	1025883a 	mov	r18,r2
  808de8:	3027883a 	mov	r19,r6
  808dec:	32c06236 	bltu	r6,r11,808f78 <__muldf3+0x344>
  808df0:	59807a26 	beq	r11,r6,808fdc <__muldf3+0x3a8>
  808df4:	680b883a 	mov	r5,r13
  808df8:	b80f883a 	mov	r7,r23
  808dfc:	6009883a 	mov	r4,r12
  808e00:	b00d883a 	mov	r6,r22
  808e04:	080984c0 	call	80984c <__muldi3>
  808e08:	1009883a 	mov	r4,r2
  808e0c:	000f883a 	mov	r7,zero
  808e10:	1545883a 	add	r2,r2,r21
  808e14:	1111803a 	cmpltu	r8,r2,r4
  808e18:	19c7883a 	add	r3,r3,r7
  808e1c:	40c7883a 	add	r3,r8,r3
  808e20:	88cb883a 	add	r5,r17,r3
  808e24:	d8c00617 	ldw	r3,24(sp)
  808e28:	8089883a 	add	r4,r16,r2
  808e2c:	d8800b17 	ldw	r2,44(sp)
  808e30:	18c00104 	addi	r3,r3,4
  808e34:	240d803a 	cmpltu	r6,r4,r16
  808e38:	10c7883a 	add	r3,r2,r3
  808e3c:	2013883a 	mov	r9,r4
  808e40:	d8800a17 	ldw	r2,40(sp)
  808e44:	d9000517 	ldw	r4,20(sp)
  808e48:	314d883a 	add	r6,r6,r5
  808e4c:	3015883a 	mov	r10,r6
  808e50:	2088c03a 	cmpne	r4,r4,r2
  808e54:	00880034 	movhi	r2,8192
  808e58:	10bfffc4 	addi	r2,r2,-1
  808e5c:	d9000f15 	stw	r4,60(sp)
  808e60:	d8c01015 	stw	r3,64(sp)
  808e64:	1180162e 	bgeu	r2,r6,808ec0 <__muldf3+0x28c>
  808e68:	1811883a 	mov	r8,r3
  808e6c:	101f883a 	mov	r15,r2
  808e70:	980497fa 	slli	r2,r19,31
  808e74:	9016d07a 	srli	r11,r18,1
  808e78:	500697fa 	slli	r3,r10,31
  808e7c:	480cd07a 	srli	r6,r9,1
  808e80:	500ed07a 	srli	r7,r10,1
  808e84:	12d6b03a 	or	r11,r2,r11
  808e88:	00800044 	movi	r2,1
  808e8c:	198cb03a 	or	r6,r3,r6
  808e90:	4888703a 	and	r4,r9,r2
  808e94:	9818d07a 	srli	r12,r19,1
  808e98:	001b883a 	mov	r13,zero
  808e9c:	03a00034 	movhi	r14,32768
  808ea0:	3013883a 	mov	r9,r6
  808ea4:	3815883a 	mov	r10,r7
  808ea8:	4091883a 	add	r8,r8,r2
  808eac:	20000226 	beq	r4,zero,808eb8 <__muldf3+0x284>
  808eb0:	5b64b03a 	or	r18,r11,r13
  808eb4:	63a6b03a 	or	r19,r12,r14
  808eb8:	7abfed36 	bltu	r15,r10,808e70 <__muldf3+0x23c>
  808ebc:	da001015 	stw	r8,64(sp)
  808ec0:	00840034 	movhi	r2,4096
  808ec4:	10bfffc4 	addi	r2,r2,-1
  808ec8:	12801436 	bltu	r2,r10,808f1c <__muldf3+0x2e8>
  808ecc:	da001017 	ldw	r8,64(sp)
  808ed0:	101f883a 	mov	r15,r2
  808ed4:	4a45883a 	add	r2,r9,r9
  808ed8:	124d803a 	cmpltu	r6,r2,r9
  808edc:	5287883a 	add	r3,r10,r10
  808ee0:	9497883a 	add	r11,r18,r18
  808ee4:	5c8f803a 	cmpltu	r7,r11,r18
  808ee8:	9cd9883a 	add	r12,r19,r19
  808eec:	01000044 	movi	r4,1
  808ef0:	30cd883a 	add	r6,r6,r3
  808ef4:	3b0f883a 	add	r7,r7,r12
  808ef8:	423fffc4 	addi	r8,r8,-1
  808efc:	1013883a 	mov	r9,r2
  808f00:	3015883a 	mov	r10,r6
  808f04:	111ab03a 	or	r13,r2,r4
  808f08:	98003016 	blt	r19,zero,808fcc <__muldf3+0x398>
  808f0c:	5825883a 	mov	r18,r11
  808f10:	3827883a 	mov	r19,r7
  808f14:	7abfef2e 	bgeu	r15,r10,808ed4 <__muldf3+0x2a0>
  808f18:	da001015 	stw	r8,64(sp)
  808f1c:	00803fc4 	movi	r2,255
  808f20:	488e703a 	and	r7,r9,r2
  808f24:	00802004 	movi	r2,128
  808f28:	0007883a 	mov	r3,zero
  808f2c:	0011883a 	mov	r8,zero
  808f30:	38801826 	beq	r7,r2,808f94 <__muldf3+0x360>
  808f34:	008000c4 	movi	r2,3
  808f38:	d9000e04 	addi	r4,sp,56
  808f3c:	da801215 	stw	r10,72(sp)
  808f40:	d8800e15 	stw	r2,56(sp)
  808f44:	da401115 	stw	r9,68(sp)
  808f48:	003f6a06 	br	808cf4 <__muldf3+0xc0>
  808f4c:	89802126 	beq	r17,r6,808fd4 <__muldf3+0x3a0>
  808f50:	0009883a 	mov	r4,zero
  808f54:	5105883a 	add	r2,r10,r4
  808f58:	128d803a 	cmpltu	r6,r2,r10
  808f5c:	5d07883a 	add	r3,r11,r20
  808f60:	30cd883a 	add	r6,r6,r3
  808f64:	0021883a 	mov	r16,zero
  808f68:	0023883a 	mov	r17,zero
  808f6c:	1025883a 	mov	r18,r2
  808f70:	3027883a 	mov	r19,r6
  808f74:	32ff9e2e 	bgeu	r6,r11,808df0 <__muldf3+0x1bc>
  808f78:	00800044 	movi	r2,1
  808f7c:	8089883a 	add	r4,r16,r2
  808f80:	240d803a 	cmpltu	r6,r4,r16
  808f84:	344d883a 	add	r6,r6,r17
  808f88:	2021883a 	mov	r16,r4
  808f8c:	3023883a 	mov	r17,r6
  808f90:	003f9806 	br	808df4 <__muldf3+0x1c0>
  808f94:	403fe71e 	bne	r8,zero,808f34 <__muldf3+0x300>
  808f98:	01004004 	movi	r4,256
  808f9c:	4904703a 	and	r2,r9,r4
  808fa0:	10c4b03a 	or	r2,r2,r3
  808fa4:	103fe31e 	bne	r2,zero,808f34 <__muldf3+0x300>
  808fa8:	94c4b03a 	or	r2,r18,r19
  808fac:	103fe126 	beq	r2,zero,808f34 <__muldf3+0x300>
  808fb0:	49c5883a 	add	r2,r9,r7
  808fb4:	1251803a 	cmpltu	r8,r2,r9
  808fb8:	4291883a 	add	r8,r8,r10
  808fbc:	013fc004 	movi	r4,-256
  808fc0:	1112703a 	and	r9,r2,r4
  808fc4:	4015883a 	mov	r10,r8
  808fc8:	003fda06 	br	808f34 <__muldf3+0x300>
  808fcc:	6813883a 	mov	r9,r13
  808fd0:	003fce06 	br	808f0c <__muldf3+0x2d8>
  808fd4:	143f7c36 	bltu	r2,r16,808dc8 <__muldf3+0x194>
  808fd8:	003fdd06 	br	808f50 <__muldf3+0x31c>
  808fdc:	12bf852e 	bgeu	r2,r10,808df4 <__muldf3+0x1c0>
  808fe0:	003fe506 	br	808f78 <__muldf3+0x344>
  808fe4:	00800084 	movi	r2,2
  808fe8:	20bf351e 	bne	r4,r2,808cc0 <__muldf3+0x8c>
  808fec:	010020b4 	movhi	r4,130
  808ff0:	21345104 	addi	r4,r4,-11964
  808ff4:	003f3f06 	br	808cf4 <__muldf3+0xc0>

00808ff8 <__divdf3>:
  808ff8:	deffed04 	addi	sp,sp,-76
  808ffc:	dcc01115 	stw	r19,68(sp)
  809000:	dcc00404 	addi	r19,sp,16
  809004:	2011883a 	mov	r8,r4
  809008:	2813883a 	mov	r9,r5
  80900c:	dc000e15 	stw	r16,56(sp)
  809010:	d809883a 	mov	r4,sp
  809014:	980b883a 	mov	r5,r19
  809018:	dc000904 	addi	r16,sp,36
  80901c:	dfc01215 	stw	ra,72(sp)
  809020:	da400115 	stw	r9,4(sp)
  809024:	d9c00315 	stw	r7,12(sp)
  809028:	da000015 	stw	r8,0(sp)
  80902c:	d9800215 	stw	r6,8(sp)
  809030:	dc801015 	stw	r18,64(sp)
  809034:	dc400f15 	stw	r17,60(sp)
  809038:	0809ea00 	call	809ea0 <__unpack_d>
  80903c:	d9000204 	addi	r4,sp,8
  809040:	800b883a 	mov	r5,r16
  809044:	0809ea00 	call	809ea0 <__unpack_d>
  809048:	d9000417 	ldw	r4,16(sp)
  80904c:	00800044 	movi	r2,1
  809050:	11000b2e 	bgeu	r2,r4,809080 <__divdf3+0x88>
  809054:	d9400917 	ldw	r5,36(sp)
  809058:	1140762e 	bgeu	r2,r5,809234 <__divdf3+0x23c>
  80905c:	d8800517 	ldw	r2,20(sp)
  809060:	d8c00a17 	ldw	r3,40(sp)
  809064:	01800104 	movi	r6,4
  809068:	10c4f03a 	xor	r2,r2,r3
  80906c:	d8800515 	stw	r2,20(sp)
  809070:	21800226 	beq	r4,r6,80907c <__divdf3+0x84>
  809074:	00800084 	movi	r2,2
  809078:	2080141e 	bne	r4,r2,8090cc <__divdf3+0xd4>
  80907c:	29000926 	beq	r5,r4,8090a4 <__divdf3+0xac>
  809080:	9809883a 	mov	r4,r19
  809084:	0809b8c0 	call	809b8c <__pack_d>
  809088:	dfc01217 	ldw	ra,72(sp)
  80908c:	dcc01117 	ldw	r19,68(sp)
  809090:	dc801017 	ldw	r18,64(sp)
  809094:	dc400f17 	ldw	r17,60(sp)
  809098:	dc000e17 	ldw	r16,56(sp)
  80909c:	dec01304 	addi	sp,sp,76
  8090a0:	f800283a 	ret
  8090a4:	010020b4 	movhi	r4,130
  8090a8:	21345104 	addi	r4,r4,-11964
  8090ac:	0809b8c0 	call	809b8c <__pack_d>
  8090b0:	dfc01217 	ldw	ra,72(sp)
  8090b4:	dcc01117 	ldw	r19,68(sp)
  8090b8:	dc801017 	ldw	r18,64(sp)
  8090bc:	dc400f17 	ldw	r17,60(sp)
  8090c0:	dc000e17 	ldw	r16,56(sp)
  8090c4:	dec01304 	addi	sp,sp,76
  8090c8:	f800283a 	ret
  8090cc:	29805b26 	beq	r5,r6,80923c <__divdf3+0x244>
  8090d0:	28802d26 	beq	r5,r2,809188 <__divdf3+0x190>
  8090d4:	d8c00617 	ldw	r3,24(sp)
  8090d8:	d8800b17 	ldw	r2,44(sp)
  8090dc:	d9c00817 	ldw	r7,32(sp)
  8090e0:	dc400d17 	ldw	r17,52(sp)
  8090e4:	188bc83a 	sub	r5,r3,r2
  8090e8:	d9800717 	ldw	r6,28(sp)
  8090ec:	dc000c17 	ldw	r16,48(sp)
  8090f0:	d9400615 	stw	r5,24(sp)
  8090f4:	3c403836 	bltu	r7,r17,8091d8 <__divdf3+0x1e0>
  8090f8:	89c03626 	beq	r17,r7,8091d4 <__divdf3+0x1dc>
  8090fc:	0015883a 	mov	r10,zero
  809100:	001d883a 	mov	r14,zero
  809104:	02c40034 	movhi	r11,4096
  809108:	001f883a 	mov	r15,zero
  80910c:	003f883a 	mov	ra,zero
  809110:	04800f44 	movi	r18,61
  809114:	00000f06 	br	809154 <__divdf3+0x15c>
  809118:	601d883a 	mov	r14,r12
  80911c:	681f883a 	mov	r15,r13
  809120:	400d883a 	mov	r6,r8
  809124:	100f883a 	mov	r7,r2
  809128:	3191883a 	add	r8,r6,r6
  80912c:	5808d07a 	srli	r4,r11,1
  809130:	4185803a 	cmpltu	r2,r8,r6
  809134:	39d3883a 	add	r9,r7,r7
  809138:	28c6b03a 	or	r3,r5,r3
  80913c:	1245883a 	add	r2,r2,r9
  809140:	1815883a 	mov	r10,r3
  809144:	2017883a 	mov	r11,r4
  809148:	400d883a 	mov	r6,r8
  80914c:	100f883a 	mov	r7,r2
  809150:	fc801726 	beq	ra,r18,8091b0 <__divdf3+0x1b8>
  809154:	580a97fa 	slli	r5,r11,31
  809158:	5006d07a 	srli	r3,r10,1
  80915c:	ffc00044 	addi	ra,ra,1
  809160:	3c7ff136 	bltu	r7,r17,809128 <__divdf3+0x130>
  809164:	3411c83a 	sub	r8,r6,r16
  809168:	3205803a 	cmpltu	r2,r6,r8
  80916c:	3c53c83a 	sub	r9,r7,r17
  809170:	7298b03a 	or	r12,r14,r10
  809174:	7adab03a 	or	r13,r15,r11
  809178:	4885c83a 	sub	r2,r9,r2
  80917c:	89ffe61e 	bne	r17,r7,809118 <__divdf3+0x120>
  809180:	343fe936 	bltu	r6,r16,809128 <__divdf3+0x130>
  809184:	003fe406 	br	809118 <__divdf3+0x120>
  809188:	9809883a 	mov	r4,r19
  80918c:	d9800415 	stw	r6,16(sp)
  809190:	0809b8c0 	call	809b8c <__pack_d>
  809194:	dfc01217 	ldw	ra,72(sp)
  809198:	dcc01117 	ldw	r19,68(sp)
  80919c:	dc801017 	ldw	r18,64(sp)
  8091a0:	dc400f17 	ldw	r17,60(sp)
  8091a4:	dc000e17 	ldw	r16,56(sp)
  8091a8:	dec01304 	addi	sp,sp,76
  8091ac:	f800283a 	ret
  8091b0:	00803fc4 	movi	r2,255
  8091b4:	7090703a 	and	r8,r14,r2
  8091b8:	00802004 	movi	r2,128
  8091bc:	0007883a 	mov	r3,zero
  8091c0:	0013883a 	mov	r9,zero
  8091c4:	40800d26 	beq	r8,r2,8091fc <__divdf3+0x204>
  8091c8:	dbc00815 	stw	r15,32(sp)
  8091cc:	db800715 	stw	r14,28(sp)
  8091d0:	003fab06 	br	809080 <__divdf3+0x88>
  8091d4:	343fc92e 	bgeu	r6,r16,8090fc <__divdf3+0x104>
  8091d8:	3185883a 	add	r2,r6,r6
  8091dc:	1189803a 	cmpltu	r4,r2,r6
  8091e0:	39c7883a 	add	r3,r7,r7
  8091e4:	20c9883a 	add	r4,r4,r3
  8091e8:	297fffc4 	addi	r5,r5,-1
  8091ec:	100d883a 	mov	r6,r2
  8091f0:	200f883a 	mov	r7,r4
  8091f4:	d9400615 	stw	r5,24(sp)
  8091f8:	003fc006 	br	8090fc <__divdf3+0x104>
  8091fc:	483ff21e 	bne	r9,zero,8091c8 <__divdf3+0x1d0>
  809200:	01004004 	movi	r4,256
  809204:	7104703a 	and	r2,r14,r4
  809208:	10c4b03a 	or	r2,r2,r3
  80920c:	103fee1e 	bne	r2,zero,8091c8 <__divdf3+0x1d0>
  809210:	31c4b03a 	or	r2,r6,r7
  809214:	103fec26 	beq	r2,zero,8091c8 <__divdf3+0x1d0>
  809218:	7205883a 	add	r2,r14,r8
  80921c:	1391803a 	cmpltu	r8,r2,r14
  809220:	43d1883a 	add	r8,r8,r15
  809224:	013fc004 	movi	r4,-256
  809228:	111c703a 	and	r14,r2,r4
  80922c:	401f883a 	mov	r15,r8
  809230:	003fe506 	br	8091c8 <__divdf3+0x1d0>
  809234:	8009883a 	mov	r4,r16
  809238:	003f9206 	br	809084 <__divdf3+0x8c>
  80923c:	9809883a 	mov	r4,r19
  809240:	d8000715 	stw	zero,28(sp)
  809244:	d8000815 	stw	zero,32(sp)
  809248:	d8000615 	stw	zero,24(sp)
  80924c:	003f8d06 	br	809084 <__divdf3+0x8c>

00809250 <__eqdf2>:
  809250:	deffef04 	addi	sp,sp,-68
  809254:	dc400f15 	stw	r17,60(sp)
  809258:	dc400404 	addi	r17,sp,16
  80925c:	2005883a 	mov	r2,r4
  809260:	2807883a 	mov	r3,r5
  809264:	dc000e15 	stw	r16,56(sp)
  809268:	d809883a 	mov	r4,sp
  80926c:	880b883a 	mov	r5,r17
  809270:	dc000904 	addi	r16,sp,36
  809274:	d8c00115 	stw	r3,4(sp)
  809278:	d8800015 	stw	r2,0(sp)
  80927c:	d9800215 	stw	r6,8(sp)
  809280:	dfc01015 	stw	ra,64(sp)
  809284:	d9c00315 	stw	r7,12(sp)
  809288:	0809ea00 	call	809ea0 <__unpack_d>
  80928c:	d9000204 	addi	r4,sp,8
  809290:	800b883a 	mov	r5,r16
  809294:	0809ea00 	call	809ea0 <__unpack_d>
  809298:	d8800417 	ldw	r2,16(sp)
  80929c:	00c00044 	movi	r3,1
  8092a0:	180d883a 	mov	r6,r3
  8092a4:	1880062e 	bgeu	r3,r2,8092c0 <__eqdf2+0x70>
  8092a8:	d8800917 	ldw	r2,36(sp)
  8092ac:	8809883a 	mov	r4,r17
  8092b0:	800b883a 	mov	r5,r16
  8092b4:	1880022e 	bgeu	r3,r2,8092c0 <__eqdf2+0x70>
  8092b8:	0809fd80 	call	809fd8 <__fpcmp_parts_d>
  8092bc:	100d883a 	mov	r6,r2
  8092c0:	3005883a 	mov	r2,r6
  8092c4:	dfc01017 	ldw	ra,64(sp)
  8092c8:	dc400f17 	ldw	r17,60(sp)
  8092cc:	dc000e17 	ldw	r16,56(sp)
  8092d0:	dec01104 	addi	sp,sp,68
  8092d4:	f800283a 	ret

008092d8 <__nedf2>:
  8092d8:	deffef04 	addi	sp,sp,-68
  8092dc:	dc400f15 	stw	r17,60(sp)
  8092e0:	dc400404 	addi	r17,sp,16
  8092e4:	2005883a 	mov	r2,r4
  8092e8:	2807883a 	mov	r3,r5
  8092ec:	dc000e15 	stw	r16,56(sp)
  8092f0:	d809883a 	mov	r4,sp
  8092f4:	880b883a 	mov	r5,r17
  8092f8:	dc000904 	addi	r16,sp,36
  8092fc:	d8c00115 	stw	r3,4(sp)
  809300:	d8800015 	stw	r2,0(sp)
  809304:	d9800215 	stw	r6,8(sp)
  809308:	dfc01015 	stw	ra,64(sp)
  80930c:	d9c00315 	stw	r7,12(sp)
  809310:	0809ea00 	call	809ea0 <__unpack_d>
  809314:	d9000204 	addi	r4,sp,8
  809318:	800b883a 	mov	r5,r16
  80931c:	0809ea00 	call	809ea0 <__unpack_d>
  809320:	d8800417 	ldw	r2,16(sp)
  809324:	00c00044 	movi	r3,1
  809328:	180d883a 	mov	r6,r3
  80932c:	1880062e 	bgeu	r3,r2,809348 <__nedf2+0x70>
  809330:	d8800917 	ldw	r2,36(sp)
  809334:	8809883a 	mov	r4,r17
  809338:	800b883a 	mov	r5,r16
  80933c:	1880022e 	bgeu	r3,r2,809348 <__nedf2+0x70>
  809340:	0809fd80 	call	809fd8 <__fpcmp_parts_d>
  809344:	100d883a 	mov	r6,r2
  809348:	3005883a 	mov	r2,r6
  80934c:	dfc01017 	ldw	ra,64(sp)
  809350:	dc400f17 	ldw	r17,60(sp)
  809354:	dc000e17 	ldw	r16,56(sp)
  809358:	dec01104 	addi	sp,sp,68
  80935c:	f800283a 	ret

00809360 <__gtdf2>:
  809360:	deffef04 	addi	sp,sp,-68
  809364:	dc400f15 	stw	r17,60(sp)
  809368:	dc400404 	addi	r17,sp,16
  80936c:	2005883a 	mov	r2,r4
  809370:	2807883a 	mov	r3,r5
  809374:	dc000e15 	stw	r16,56(sp)
  809378:	d809883a 	mov	r4,sp
  80937c:	880b883a 	mov	r5,r17
  809380:	dc000904 	addi	r16,sp,36
  809384:	d8c00115 	stw	r3,4(sp)
  809388:	d8800015 	stw	r2,0(sp)
  80938c:	d9800215 	stw	r6,8(sp)
  809390:	dfc01015 	stw	ra,64(sp)
  809394:	d9c00315 	stw	r7,12(sp)
  809398:	0809ea00 	call	809ea0 <__unpack_d>
  80939c:	d9000204 	addi	r4,sp,8
  8093a0:	800b883a 	mov	r5,r16
  8093a4:	0809ea00 	call	809ea0 <__unpack_d>
  8093a8:	d8800417 	ldw	r2,16(sp)
  8093ac:	00c00044 	movi	r3,1
  8093b0:	01bfffc4 	movi	r6,-1
  8093b4:	1880062e 	bgeu	r3,r2,8093d0 <__gtdf2+0x70>
  8093b8:	d8800917 	ldw	r2,36(sp)
  8093bc:	8809883a 	mov	r4,r17
  8093c0:	800b883a 	mov	r5,r16
  8093c4:	1880022e 	bgeu	r3,r2,8093d0 <__gtdf2+0x70>
  8093c8:	0809fd80 	call	809fd8 <__fpcmp_parts_d>
  8093cc:	100d883a 	mov	r6,r2
  8093d0:	3005883a 	mov	r2,r6
  8093d4:	dfc01017 	ldw	ra,64(sp)
  8093d8:	dc400f17 	ldw	r17,60(sp)
  8093dc:	dc000e17 	ldw	r16,56(sp)
  8093e0:	dec01104 	addi	sp,sp,68
  8093e4:	f800283a 	ret

008093e8 <__ltdf2>:
  8093e8:	deffef04 	addi	sp,sp,-68
  8093ec:	dc400f15 	stw	r17,60(sp)
  8093f0:	dc400404 	addi	r17,sp,16
  8093f4:	2005883a 	mov	r2,r4
  8093f8:	2807883a 	mov	r3,r5
  8093fc:	dc000e15 	stw	r16,56(sp)
  809400:	d809883a 	mov	r4,sp
  809404:	880b883a 	mov	r5,r17
  809408:	dc000904 	addi	r16,sp,36
  80940c:	d8c00115 	stw	r3,4(sp)
  809410:	d8800015 	stw	r2,0(sp)
  809414:	d9800215 	stw	r6,8(sp)
  809418:	dfc01015 	stw	ra,64(sp)
  80941c:	d9c00315 	stw	r7,12(sp)
  809420:	0809ea00 	call	809ea0 <__unpack_d>
  809424:	d9000204 	addi	r4,sp,8
  809428:	800b883a 	mov	r5,r16
  80942c:	0809ea00 	call	809ea0 <__unpack_d>
  809430:	d8800417 	ldw	r2,16(sp)
  809434:	00c00044 	movi	r3,1
  809438:	180d883a 	mov	r6,r3
  80943c:	1880062e 	bgeu	r3,r2,809458 <__ltdf2+0x70>
  809440:	d8800917 	ldw	r2,36(sp)
  809444:	8809883a 	mov	r4,r17
  809448:	800b883a 	mov	r5,r16
  80944c:	1880022e 	bgeu	r3,r2,809458 <__ltdf2+0x70>
  809450:	0809fd80 	call	809fd8 <__fpcmp_parts_d>
  809454:	100d883a 	mov	r6,r2
  809458:	3005883a 	mov	r2,r6
  80945c:	dfc01017 	ldw	ra,64(sp)
  809460:	dc400f17 	ldw	r17,60(sp)
  809464:	dc000e17 	ldw	r16,56(sp)
  809468:	dec01104 	addi	sp,sp,68
  80946c:	f800283a 	ret

00809470 <__ledf2>:
  809470:	deffef04 	addi	sp,sp,-68
  809474:	dc400f15 	stw	r17,60(sp)
  809478:	dc400404 	addi	r17,sp,16
  80947c:	2005883a 	mov	r2,r4
  809480:	2807883a 	mov	r3,r5
  809484:	dc000e15 	stw	r16,56(sp)
  809488:	d809883a 	mov	r4,sp
  80948c:	880b883a 	mov	r5,r17
  809490:	dc000904 	addi	r16,sp,36
  809494:	d8c00115 	stw	r3,4(sp)
  809498:	d8800015 	stw	r2,0(sp)
  80949c:	d9800215 	stw	r6,8(sp)
  8094a0:	dfc01015 	stw	ra,64(sp)
  8094a4:	d9c00315 	stw	r7,12(sp)
  8094a8:	0809ea00 	call	809ea0 <__unpack_d>
  8094ac:	d9000204 	addi	r4,sp,8
  8094b0:	800b883a 	mov	r5,r16
  8094b4:	0809ea00 	call	809ea0 <__unpack_d>
  8094b8:	d8800417 	ldw	r2,16(sp)
  8094bc:	00c00044 	movi	r3,1
  8094c0:	180d883a 	mov	r6,r3
  8094c4:	1880062e 	bgeu	r3,r2,8094e0 <__ledf2+0x70>
  8094c8:	d8800917 	ldw	r2,36(sp)
  8094cc:	8809883a 	mov	r4,r17
  8094d0:	800b883a 	mov	r5,r16
  8094d4:	1880022e 	bgeu	r3,r2,8094e0 <__ledf2+0x70>
  8094d8:	0809fd80 	call	809fd8 <__fpcmp_parts_d>
  8094dc:	100d883a 	mov	r6,r2
  8094e0:	3005883a 	mov	r2,r6
  8094e4:	dfc01017 	ldw	ra,64(sp)
  8094e8:	dc400f17 	ldw	r17,60(sp)
  8094ec:	dc000e17 	ldw	r16,56(sp)
  8094f0:	dec01104 	addi	sp,sp,68
  8094f4:	f800283a 	ret

008094f8 <__floatsidf>:
  8094f8:	2006d7fa 	srli	r3,r4,31
  8094fc:	defff604 	addi	sp,sp,-40
  809500:	008000c4 	movi	r2,3
  809504:	dfc00915 	stw	ra,36(sp)
  809508:	dcc00815 	stw	r19,32(sp)
  80950c:	dc800715 	stw	r18,28(sp)
  809510:	dc400615 	stw	r17,24(sp)
  809514:	dc000515 	stw	r16,20(sp)
  809518:	d8800015 	stw	r2,0(sp)
  80951c:	d8c00115 	stw	r3,4(sp)
  809520:	20000f1e 	bne	r4,zero,809560 <__floatsidf+0x68>
  809524:	00800084 	movi	r2,2
  809528:	d8800015 	stw	r2,0(sp)
  80952c:	d809883a 	mov	r4,sp
  809530:	0809b8c0 	call	809b8c <__pack_d>
  809534:	1009883a 	mov	r4,r2
  809538:	180b883a 	mov	r5,r3
  80953c:	2005883a 	mov	r2,r4
  809540:	2807883a 	mov	r3,r5
  809544:	dfc00917 	ldw	ra,36(sp)
  809548:	dcc00817 	ldw	r19,32(sp)
  80954c:	dc800717 	ldw	r18,28(sp)
  809550:	dc400617 	ldw	r17,24(sp)
  809554:	dc000517 	ldw	r16,20(sp)
  809558:	dec00a04 	addi	sp,sp,40
  80955c:	f800283a 	ret
  809560:	00800f04 	movi	r2,60
  809564:	1807003a 	cmpeq	r3,r3,zero
  809568:	d8800215 	stw	r2,8(sp)
  80956c:	18001126 	beq	r3,zero,8095b4 <__floatsidf+0xbc>
  809570:	0027883a 	mov	r19,zero
  809574:	2025883a 	mov	r18,r4
  809578:	d9000315 	stw	r4,12(sp)
  80957c:	dcc00415 	stw	r19,16(sp)
  809580:	08098e40 	call	8098e4 <__clzsi2>
  809584:	11000744 	addi	r4,r2,29
  809588:	013fe80e 	bge	zero,r4,80952c <__floatsidf+0x34>
  80958c:	10bfff44 	addi	r2,r2,-3
  809590:	10000c16 	blt	r2,zero,8095c4 <__floatsidf+0xcc>
  809594:	90a2983a 	sll	r17,r18,r2
  809598:	0021883a 	mov	r16,zero
  80959c:	d8800217 	ldw	r2,8(sp)
  8095a0:	dc400415 	stw	r17,16(sp)
  8095a4:	dc000315 	stw	r16,12(sp)
  8095a8:	1105c83a 	sub	r2,r2,r4
  8095ac:	d8800215 	stw	r2,8(sp)
  8095b0:	003fde06 	br	80952c <__floatsidf+0x34>
  8095b4:	00a00034 	movhi	r2,32768
  8095b8:	20800a26 	beq	r4,r2,8095e4 <__floatsidf+0xec>
  8095bc:	0109c83a 	sub	r4,zero,r4
  8095c0:	003feb06 	br	809570 <__floatsidf+0x78>
  8095c4:	9006d07a 	srli	r3,r18,1
  8095c8:	008007c4 	movi	r2,31
  8095cc:	1105c83a 	sub	r2,r2,r4
  8095d0:	1886d83a 	srl	r3,r3,r2
  8095d4:	9922983a 	sll	r17,r19,r4
  8095d8:	9120983a 	sll	r16,r18,r4
  8095dc:	1c62b03a 	or	r17,r3,r17
  8095e0:	003fee06 	br	80959c <__floatsidf+0xa4>
  8095e4:	0009883a 	mov	r4,zero
  8095e8:	01707834 	movhi	r5,49632
  8095ec:	003fd306 	br	80953c <__floatsidf+0x44>

008095f0 <__fixdfsi>:
  8095f0:	defff804 	addi	sp,sp,-32
  8095f4:	2005883a 	mov	r2,r4
  8095f8:	2807883a 	mov	r3,r5
  8095fc:	d809883a 	mov	r4,sp
  809600:	d9400204 	addi	r5,sp,8
  809604:	d8c00115 	stw	r3,4(sp)
  809608:	d8800015 	stw	r2,0(sp)
  80960c:	dfc00715 	stw	ra,28(sp)
  809610:	0809ea00 	call	809ea0 <__unpack_d>
  809614:	d8c00217 	ldw	r3,8(sp)
  809618:	00800084 	movi	r2,2
  80961c:	1880051e 	bne	r3,r2,809634 <__fixdfsi+0x44>
  809620:	0007883a 	mov	r3,zero
  809624:	1805883a 	mov	r2,r3
  809628:	dfc00717 	ldw	ra,28(sp)
  80962c:	dec00804 	addi	sp,sp,32
  809630:	f800283a 	ret
  809634:	00800044 	movi	r2,1
  809638:	10fff92e 	bgeu	r2,r3,809620 <__fixdfsi+0x30>
  80963c:	00800104 	movi	r2,4
  809640:	18800426 	beq	r3,r2,809654 <__fixdfsi+0x64>
  809644:	d8c00417 	ldw	r3,16(sp)
  809648:	183ff516 	blt	r3,zero,809620 <__fixdfsi+0x30>
  80964c:	00800784 	movi	r2,30
  809650:	10c0080e 	bge	r2,r3,809674 <__fixdfsi+0x84>
  809654:	d8800317 	ldw	r2,12(sp)
  809658:	1000121e 	bne	r2,zero,8096a4 <__fixdfsi+0xb4>
  80965c:	00e00034 	movhi	r3,32768
  809660:	18ffffc4 	addi	r3,r3,-1
  809664:	1805883a 	mov	r2,r3
  809668:	dfc00717 	ldw	ra,28(sp)
  80966c:	dec00804 	addi	sp,sp,32
  809670:	f800283a 	ret
  809674:	00800f04 	movi	r2,60
  809678:	10d1c83a 	sub	r8,r2,r3
  80967c:	40bff804 	addi	r2,r8,-32
  809680:	d9800517 	ldw	r6,20(sp)
  809684:	d9c00617 	ldw	r7,24(sp)
  809688:	10000816 	blt	r2,zero,8096ac <__fixdfsi+0xbc>
  80968c:	3888d83a 	srl	r4,r7,r2
  809690:	d8800317 	ldw	r2,12(sp)
  809694:	2007883a 	mov	r3,r4
  809698:	103fe226 	beq	r2,zero,809624 <__fixdfsi+0x34>
  80969c:	0107c83a 	sub	r3,zero,r4
  8096a0:	003fe006 	br	809624 <__fixdfsi+0x34>
  8096a4:	00e00034 	movhi	r3,32768
  8096a8:	003fde06 	br	809624 <__fixdfsi+0x34>
  8096ac:	39c7883a 	add	r3,r7,r7
  8096b0:	008007c4 	movi	r2,31
  8096b4:	1205c83a 	sub	r2,r2,r8
  8096b8:	1886983a 	sll	r3,r3,r2
  8096bc:	3208d83a 	srl	r4,r6,r8
  8096c0:	1908b03a 	or	r4,r3,r4
  8096c4:	003ff206 	br	809690 <__fixdfsi+0xa0>

008096c8 <__make_dp>:
  8096c8:	defff904 	addi	sp,sp,-28
  8096cc:	d8c00717 	ldw	r3,28(sp)
  8096d0:	d9000015 	stw	r4,0(sp)
  8096d4:	d809883a 	mov	r4,sp
  8096d8:	dfc00515 	stw	ra,20(sp)
  8096dc:	d9c00615 	stw	r7,24(sp)
  8096e0:	d9400115 	stw	r5,4(sp)
  8096e4:	d9800215 	stw	r6,8(sp)
  8096e8:	d8c00415 	stw	r3,16(sp)
  8096ec:	d9c00315 	stw	r7,12(sp)
  8096f0:	0809b8c0 	call	809b8c <__pack_d>
  8096f4:	dfc00517 	ldw	ra,20(sp)
  8096f8:	dec00704 	addi	sp,sp,28
  8096fc:	f800283a 	ret

00809700 <udivmodsi4>:
  809700:	29001b2e 	bgeu	r5,r4,809770 <udivmodsi4+0x70>
  809704:	28001a16 	blt	r5,zero,809770 <udivmodsi4+0x70>
  809708:	00800044 	movi	r2,1
  80970c:	0007883a 	mov	r3,zero
  809710:	01c007c4 	movi	r7,31
  809714:	00000306 	br	809724 <udivmodsi4+0x24>
  809718:	19c01326 	beq	r3,r7,809768 <udivmodsi4+0x68>
  80971c:	18c00044 	addi	r3,r3,1
  809720:	28000416 	blt	r5,zero,809734 <udivmodsi4+0x34>
  809724:	294b883a 	add	r5,r5,r5
  809728:	1085883a 	add	r2,r2,r2
  80972c:	293ffa36 	bltu	r5,r4,809718 <udivmodsi4+0x18>
  809730:	10000d26 	beq	r2,zero,809768 <udivmodsi4+0x68>
  809734:	0007883a 	mov	r3,zero
  809738:	21400236 	bltu	r4,r5,809744 <udivmodsi4+0x44>
  80973c:	2149c83a 	sub	r4,r4,r5
  809740:	1886b03a 	or	r3,r3,r2
  809744:	1004d07a 	srli	r2,r2,1
  809748:	280ad07a 	srli	r5,r5,1
  80974c:	103ffa1e 	bne	r2,zero,809738 <udivmodsi4+0x38>
  809750:	30000226 	beq	r6,zero,80975c <udivmodsi4+0x5c>
  809754:	2005883a 	mov	r2,r4
  809758:	f800283a 	ret
  80975c:	1809883a 	mov	r4,r3
  809760:	2005883a 	mov	r2,r4
  809764:	f800283a 	ret
  809768:	0007883a 	mov	r3,zero
  80976c:	003ff806 	br	809750 <udivmodsi4+0x50>
  809770:	00800044 	movi	r2,1
  809774:	0007883a 	mov	r3,zero
  809778:	003fef06 	br	809738 <udivmodsi4+0x38>

0080977c <__divsi3>:
  80977c:	defffe04 	addi	sp,sp,-8
  809780:	dc000015 	stw	r16,0(sp)
  809784:	dfc00115 	stw	ra,4(sp)
  809788:	0021883a 	mov	r16,zero
  80978c:	20000c16 	blt	r4,zero,8097c0 <__divsi3+0x44>
  809790:	000d883a 	mov	r6,zero
  809794:	28000e16 	blt	r5,zero,8097d0 <__divsi3+0x54>
  809798:	08097000 	call	809700 <udivmodsi4>
  80979c:	1007883a 	mov	r3,r2
  8097a0:	8005003a 	cmpeq	r2,r16,zero
  8097a4:	1000011e 	bne	r2,zero,8097ac <__divsi3+0x30>
  8097a8:	00c7c83a 	sub	r3,zero,r3
  8097ac:	1805883a 	mov	r2,r3
  8097b0:	dfc00117 	ldw	ra,4(sp)
  8097b4:	dc000017 	ldw	r16,0(sp)
  8097b8:	dec00204 	addi	sp,sp,8
  8097bc:	f800283a 	ret
  8097c0:	0109c83a 	sub	r4,zero,r4
  8097c4:	04000044 	movi	r16,1
  8097c8:	000d883a 	mov	r6,zero
  8097cc:	283ff20e 	bge	r5,zero,809798 <__divsi3+0x1c>
  8097d0:	014bc83a 	sub	r5,zero,r5
  8097d4:	8021003a 	cmpeq	r16,r16,zero
  8097d8:	003fef06 	br	809798 <__divsi3+0x1c>

008097dc <__modsi3>:
  8097dc:	deffff04 	addi	sp,sp,-4
  8097e0:	dfc00015 	stw	ra,0(sp)
  8097e4:	01800044 	movi	r6,1
  8097e8:	2807883a 	mov	r3,r5
  8097ec:	20000416 	blt	r4,zero,809800 <__modsi3+0x24>
  8097f0:	28000c16 	blt	r5,zero,809824 <__modsi3+0x48>
  8097f4:	dfc00017 	ldw	ra,0(sp)
  8097f8:	dec00104 	addi	sp,sp,4
  8097fc:	08097001 	jmpi	809700 <udivmodsi4>
  809800:	0109c83a 	sub	r4,zero,r4
  809804:	28000b16 	blt	r5,zero,809834 <__modsi3+0x58>
  809808:	180b883a 	mov	r5,r3
  80980c:	01800044 	movi	r6,1
  809810:	08097000 	call	809700 <udivmodsi4>
  809814:	0085c83a 	sub	r2,zero,r2
  809818:	dfc00017 	ldw	ra,0(sp)
  80981c:	dec00104 	addi	sp,sp,4
  809820:	f800283a 	ret
  809824:	014bc83a 	sub	r5,zero,r5
  809828:	dfc00017 	ldw	ra,0(sp)
  80982c:	dec00104 	addi	sp,sp,4
  809830:	08097001 	jmpi	809700 <udivmodsi4>
  809834:	0147c83a 	sub	r3,zero,r5
  809838:	003ff306 	br	809808 <__modsi3+0x2c>

0080983c <__udivsi3>:
  80983c:	000d883a 	mov	r6,zero
  809840:	08097001 	jmpi	809700 <udivmodsi4>

00809844 <__umodsi3>:
  809844:	01800044 	movi	r6,1
  809848:	08097001 	jmpi	809700 <udivmodsi4>

0080984c <__muldi3>:
  80984c:	2011883a 	mov	r8,r4
  809850:	427fffcc 	andi	r9,r8,65535
  809854:	4018d43a 	srli	r12,r8,16
  809858:	32bfffcc 	andi	r10,r6,65535
  80985c:	3016d43a 	srli	r11,r6,16
  809860:	4a85383a 	mul	r2,r9,r10
  809864:	6295383a 	mul	r10,r12,r10
  809868:	4ad3383a 	mul	r9,r9,r11
  80986c:	113fffcc 	andi	r4,r2,65535
  809870:	1004d43a 	srli	r2,r2,16
  809874:	4a93883a 	add	r9,r9,r10
  809878:	3807883a 	mov	r3,r7
  80987c:	1245883a 	add	r2,r2,r9
  809880:	280f883a 	mov	r7,r5
  809884:	180b883a 	mov	r5,r3
  809888:	1006943a 	slli	r3,r2,16
  80988c:	defffd04 	addi	sp,sp,-12
  809890:	dc800215 	stw	r18,8(sp)
  809894:	1907883a 	add	r3,r3,r4
  809898:	dc400115 	stw	r17,4(sp)
  80989c:	dc000015 	stw	r16,0(sp)
  8098a0:	4165383a 	mul	r18,r8,r5
  8098a4:	31e3383a 	mul	r17,r6,r7
  8098a8:	1012d43a 	srli	r9,r2,16
  8098ac:	62d9383a 	mul	r12,r12,r11
  8098b0:	181f883a 	mov	r15,r3
  8098b4:	1280022e 	bgeu	r2,r10,8098c0 <__muldi3+0x74>
  8098b8:	00800074 	movhi	r2,1
  8098bc:	6099883a 	add	r12,r12,r2
  8098c0:	624d883a 	add	r6,r12,r9
  8098c4:	9187883a 	add	r3,r18,r6
  8098c8:	88c7883a 	add	r3,r17,r3
  8098cc:	7805883a 	mov	r2,r15
  8098d0:	dc800217 	ldw	r18,8(sp)
  8098d4:	dc400117 	ldw	r17,4(sp)
  8098d8:	dc000017 	ldw	r16,0(sp)
  8098dc:	dec00304 	addi	sp,sp,12
  8098e0:	f800283a 	ret

008098e4 <__clzsi2>:
  8098e4:	00bfffd4 	movui	r2,65535
  8098e8:	11000e36 	bltu	r2,r4,809924 <__clzsi2+0x40>
  8098ec:	00803fc4 	movi	r2,255
  8098f0:	01400204 	movi	r5,8
  8098f4:	0007883a 	mov	r3,zero
  8098f8:	11001036 	bltu	r2,r4,80993c <__clzsi2+0x58>
  8098fc:	000b883a 	mov	r5,zero
  809900:	20c6d83a 	srl	r3,r4,r3
  809904:	008020b4 	movhi	r2,130
  809908:	10b45604 	addi	r2,r2,-11944
  80990c:	1887883a 	add	r3,r3,r2
  809910:	18800003 	ldbu	r2,0(r3)
  809914:	00c00804 	movi	r3,32
  809918:	2885883a 	add	r2,r5,r2
  80991c:	1885c83a 	sub	r2,r3,r2
  809920:	f800283a 	ret
  809924:	01400404 	movi	r5,16
  809928:	00804034 	movhi	r2,256
  80992c:	10bfffc4 	addi	r2,r2,-1
  809930:	2807883a 	mov	r3,r5
  809934:	113ff22e 	bgeu	r2,r4,809900 <__clzsi2+0x1c>
  809938:	01400604 	movi	r5,24
  80993c:	2807883a 	mov	r3,r5
  809940:	20c6d83a 	srl	r3,r4,r3
  809944:	008020b4 	movhi	r2,130
  809948:	10b45604 	addi	r2,r2,-11944
  80994c:	1887883a 	add	r3,r3,r2
  809950:	18800003 	ldbu	r2,0(r3)
  809954:	00c00804 	movi	r3,32
  809958:	2885883a 	add	r2,r5,r2
  80995c:	1885c83a 	sub	r2,r3,r2
  809960:	f800283a 	ret

00809964 <__pack_f>:
  809964:	20c00017 	ldw	r3,0(r4)
  809968:	01c00044 	movi	r7,1
  80996c:	21800317 	ldw	r6,12(r4)
  809970:	21400117 	ldw	r5,4(r4)
  809974:	38c02d2e 	bgeu	r7,r3,809a2c <__pack_f+0xc8>
  809978:	00800104 	movi	r2,4
  80997c:	18802826 	beq	r3,r2,809a20 <__pack_f+0xbc>
  809980:	00800084 	movi	r2,2
  809984:	18800126 	beq	r3,r2,80998c <__pack_f+0x28>
  809988:	3000101e 	bne	r6,zero,8099cc <__pack_f+0x68>
  80998c:	000d883a 	mov	r6,zero
  809990:	0007883a 	mov	r3,zero
  809994:	19003fcc 	andi	r4,r3,255
  809998:	200895fa 	slli	r4,r4,23
  80999c:	00c02034 	movhi	r3,128
  8099a0:	18ffffc4 	addi	r3,r3,-1
  8099a4:	30c6703a 	and	r3,r6,r3
  8099a8:	10a0002c 	andhi	r2,r2,32768
  8099ac:	10c4b03a 	or	r2,r2,r3
  8099b0:	280a97fa 	slli	r5,r5,31
  8099b4:	1104b03a 	or	r2,r2,r4
  8099b8:	00e00034 	movhi	r3,32768
  8099bc:	18ffffc4 	addi	r3,r3,-1
  8099c0:	10c4703a 	and	r2,r2,r3
  8099c4:	1144b03a 	or	r2,r2,r5
  8099c8:	f800283a 	ret
  8099cc:	21000217 	ldw	r4,8(r4)
  8099d0:	00bfe084 	movi	r2,-126
  8099d4:	20801b16 	blt	r4,r2,809a44 <__pack_f+0xe0>
  8099d8:	00801fc4 	movi	r2,127
  8099dc:	11001016 	blt	r2,r4,809a20 <__pack_f+0xbc>
  8099e0:	308e703a 	and	r7,r6,r2
  8099e4:	2087883a 	add	r3,r4,r2
  8099e8:	00801004 	movi	r2,64
  8099ec:	38800526 	beq	r7,r2,809a04 <__pack_f+0xa0>
  8099f0:	31800fc4 	addi	r6,r6,63
  8099f4:	30000716 	blt	r6,zero,809a14 <__pack_f+0xb0>
  8099f8:	300490ba 	slli	r2,r6,2
  8099fc:	100cd27a 	srli	r6,r2,9
  809a00:	003fe406 	br	809994 <__pack_f+0x30>
  809a04:	3080200c 	andi	r2,r6,128
  809a08:	103ffa26 	beq	r2,zero,8099f4 <__pack_f+0x90>
  809a0c:	31cd883a 	add	r6,r6,r7
  809a10:	003ff806 	br	8099f4 <__pack_f+0x90>
  809a14:	300cd07a 	srli	r6,r6,1
  809a18:	18c00044 	addi	r3,r3,1
  809a1c:	003ff606 	br	8099f8 <__pack_f+0x94>
  809a20:	000d883a 	mov	r6,zero
  809a24:	00ffffc4 	movi	r3,-1
  809a28:	003fda06 	br	809994 <__pack_f+0x30>
  809a2c:	31800434 	orhi	r6,r6,16
  809a30:	00802034 	movhi	r2,128
  809a34:	10bfffc4 	addi	r2,r2,-1
  809a38:	308c703a 	and	r6,r6,r2
  809a3c:	00ffffc4 	movi	r3,-1
  809a40:	003fd406 	br	809994 <__pack_f+0x30>
  809a44:	1109c83a 	sub	r4,r2,r4
  809a48:	00800644 	movi	r2,25
  809a4c:	11001216 	blt	r2,r4,809a98 <__pack_f+0x134>
  809a50:	3904983a 	sll	r2,r7,r4
  809a54:	3106d83a 	srl	r3,r6,r4
  809a58:	10bfffc4 	addi	r2,r2,-1
  809a5c:	3084703a 	and	r2,r6,r2
  809a60:	1004c03a 	cmpne	r2,r2,zero
  809a64:	1886b03a 	or	r3,r3,r2
  809a68:	19001fcc 	andi	r4,r3,127
  809a6c:	00801004 	movi	r2,64
  809a70:	20800c26 	beq	r4,r2,809aa4 <__pack_f+0x140>
  809a74:	18c00fc4 	addi	r3,r3,63
  809a78:	00900034 	movhi	r2,16384
  809a7c:	10bfffc4 	addi	r2,r2,-1
  809a80:	180cd1fa 	srli	r6,r3,7
  809a84:	10c7803a 	cmpltu	r3,r2,r3
  809a88:	00802034 	movhi	r2,128
  809a8c:	10bfffc4 	addi	r2,r2,-1
  809a90:	308c703a 	and	r6,r6,r2
  809a94:	003fbf06 	br	809994 <__pack_f+0x30>
  809a98:	0007883a 	mov	r3,zero
  809a9c:	000d883a 	mov	r6,zero
  809aa0:	003ff906 	br	809a88 <__pack_f+0x124>
  809aa4:	1880200c 	andi	r2,r3,128
  809aa8:	10000126 	beq	r2,zero,809ab0 <__pack_f+0x14c>
  809aac:	1907883a 	add	r3,r3,r4
  809ab0:	180cd1fa 	srli	r6,r3,7
  809ab4:	00900034 	movhi	r2,16384
  809ab8:	10bfffc4 	addi	r2,r2,-1
  809abc:	10c7803a 	cmpltu	r3,r2,r3
  809ac0:	003ff106 	br	809a88 <__pack_f+0x124>

00809ac4 <__unpack_f>:
  809ac4:	21800017 	ldw	r6,0(r4)
  809ac8:	00c02034 	movhi	r3,128
  809acc:	18ffffc4 	addi	r3,r3,-1
  809ad0:	3004d5fa 	srli	r2,r6,23
  809ad4:	3008d7fa 	srli	r4,r6,31
  809ad8:	30ce703a 	and	r7,r6,r3
  809adc:	10c03fcc 	andi	r3,r2,255
  809ae0:	29000115 	stw	r4,4(r5)
  809ae4:	1800131e 	bne	r3,zero,809b34 <__unpack_f+0x70>
  809ae8:	38000f26 	beq	r7,zero,809b28 <__unpack_f+0x64>
  809aec:	380691fa 	slli	r3,r7,7
  809af0:	01bfe084 	movi	r6,-126
  809af4:	008000c4 	movi	r2,3
  809af8:	01100034 	movhi	r4,16384
  809afc:	213fffc4 	addi	r4,r4,-1
  809b00:	28800015 	stw	r2,0(r5)
  809b04:	29800215 	stw	r6,8(r5)
  809b08:	20c00536 	bltu	r4,r3,809b20 <__unpack_f+0x5c>
  809b0c:	3005883a 	mov	r2,r6
  809b10:	18c7883a 	add	r3,r3,r3
  809b14:	10bfffc4 	addi	r2,r2,-1
  809b18:	20fffd2e 	bgeu	r4,r3,809b10 <__unpack_f+0x4c>
  809b1c:	28800215 	stw	r2,8(r5)
  809b20:	28c00315 	stw	r3,12(r5)
  809b24:	f800283a 	ret
  809b28:	00800084 	movi	r2,2
  809b2c:	28800015 	stw	r2,0(r5)
  809b30:	f800283a 	ret
  809b34:	00803fc4 	movi	r2,255
  809b38:	18800826 	beq	r3,r2,809b5c <__unpack_f+0x98>
  809b3c:	380491fa 	slli	r2,r7,7
  809b40:	18ffe044 	addi	r3,r3,-127
  809b44:	28c00215 	stw	r3,8(r5)
  809b48:	10900034 	orhi	r2,r2,16384
  809b4c:	28800315 	stw	r2,12(r5)
  809b50:	008000c4 	movi	r2,3
  809b54:	28800015 	stw	r2,0(r5)
  809b58:	f800283a 	ret
  809b5c:	3800031e 	bne	r7,zero,809b6c <__unpack_f+0xa8>
  809b60:	00800104 	movi	r2,4
  809b64:	28800015 	stw	r2,0(r5)
  809b68:	f800283a 	ret
  809b6c:	3080042c 	andhi	r2,r6,16
  809b70:	10000426 	beq	r2,zero,809b84 <__unpack_f+0xc0>
  809b74:	00800044 	movi	r2,1
  809b78:	28800015 	stw	r2,0(r5)
  809b7c:	29c00315 	stw	r7,12(r5)
  809b80:	f800283a 	ret
  809b84:	28000015 	stw	zero,0(r5)
  809b88:	003ffc06 	br	809b7c <__unpack_f+0xb8>

00809b8c <__pack_d>:
  809b8c:	20c00017 	ldw	r3,0(r4)
  809b90:	defffd04 	addi	sp,sp,-12
  809b94:	dc000015 	stw	r16,0(sp)
  809b98:	dc800215 	stw	r18,8(sp)
  809b9c:	dc400115 	stw	r17,4(sp)
  809ba0:	00800044 	movi	r2,1
  809ba4:	22000317 	ldw	r8,12(r4)
  809ba8:	001f883a 	mov	r15,zero
  809bac:	22400417 	ldw	r9,16(r4)
  809bb0:	24000117 	ldw	r16,4(r4)
  809bb4:	10c0552e 	bgeu	r2,r3,809d0c <__pack_d+0x180>
  809bb8:	00800104 	movi	r2,4
  809bbc:	18804f26 	beq	r3,r2,809cfc <__pack_d+0x170>
  809bc0:	00800084 	movi	r2,2
  809bc4:	18800226 	beq	r3,r2,809bd0 <__pack_d+0x44>
  809bc8:	4244b03a 	or	r2,r8,r9
  809bcc:	10001a1e 	bne	r2,zero,809c38 <__pack_d+0xac>
  809bd0:	000d883a 	mov	r6,zero
  809bd4:	000f883a 	mov	r7,zero
  809bd8:	0011883a 	mov	r8,zero
  809bdc:	00800434 	movhi	r2,16
  809be0:	10bfffc4 	addi	r2,r2,-1
  809be4:	301d883a 	mov	r14,r6
  809be8:	3884703a 	and	r2,r7,r2
  809bec:	400a953a 	slli	r5,r8,20
  809bf0:	79bffc2c 	andhi	r6,r15,65520
  809bf4:	308cb03a 	or	r6,r6,r2
  809bf8:	00e00434 	movhi	r3,32784
  809bfc:	18ffffc4 	addi	r3,r3,-1
  809c00:	800497fa 	slli	r2,r16,31
  809c04:	30c6703a 	and	r3,r6,r3
  809c08:	1946b03a 	or	r3,r3,r5
  809c0c:	01600034 	movhi	r5,32768
  809c10:	297fffc4 	addi	r5,r5,-1
  809c14:	194a703a 	and	r5,r3,r5
  809c18:	288ab03a 	or	r5,r5,r2
  809c1c:	2807883a 	mov	r3,r5
  809c20:	7005883a 	mov	r2,r14
  809c24:	dc800217 	ldw	r18,8(sp)
  809c28:	dc400117 	ldw	r17,4(sp)
  809c2c:	dc000017 	ldw	r16,0(sp)
  809c30:	dec00304 	addi	sp,sp,12
  809c34:	f800283a 	ret
  809c38:	21000217 	ldw	r4,8(r4)
  809c3c:	00bf0084 	movi	r2,-1022
  809c40:	20803f16 	blt	r4,r2,809d40 <__pack_d+0x1b4>
  809c44:	0080ffc4 	movi	r2,1023
  809c48:	11002c16 	blt	r2,r4,809cfc <__pack_d+0x170>
  809c4c:	00803fc4 	movi	r2,255
  809c50:	408c703a 	and	r6,r8,r2
  809c54:	00802004 	movi	r2,128
  809c58:	0007883a 	mov	r3,zero
  809c5c:	000f883a 	mov	r7,zero
  809c60:	2280ffc4 	addi	r10,r4,1023
  809c64:	30801e26 	beq	r6,r2,809ce0 <__pack_d+0x154>
  809c68:	00801fc4 	movi	r2,127
  809c6c:	4089883a 	add	r4,r8,r2
  809c70:	220d803a 	cmpltu	r6,r4,r8
  809c74:	324d883a 	add	r6,r6,r9
  809c78:	2011883a 	mov	r8,r4
  809c7c:	3013883a 	mov	r9,r6
  809c80:	00880034 	movhi	r2,8192
  809c84:	10bfffc4 	addi	r2,r2,-1
  809c88:	12400d36 	bltu	r2,r9,809cc0 <__pack_d+0x134>
  809c8c:	4804963a 	slli	r2,r9,24
  809c90:	400cd23a 	srli	r6,r8,8
  809c94:	480ed23a 	srli	r7,r9,8
  809c98:	013fffc4 	movi	r4,-1
  809c9c:	118cb03a 	or	r6,r2,r6
  809ca0:	01400434 	movhi	r5,16
  809ca4:	297fffc4 	addi	r5,r5,-1
  809ca8:	3104703a 	and	r2,r6,r4
  809cac:	3946703a 	and	r3,r7,r5
  809cb0:	5201ffcc 	andi	r8,r10,2047
  809cb4:	100d883a 	mov	r6,r2
  809cb8:	180f883a 	mov	r7,r3
  809cbc:	003fc706 	br	809bdc <__pack_d+0x50>
  809cc0:	480897fa 	slli	r4,r9,31
  809cc4:	4004d07a 	srli	r2,r8,1
  809cc8:	4806d07a 	srli	r3,r9,1
  809ccc:	52800044 	addi	r10,r10,1
  809cd0:	2084b03a 	or	r2,r4,r2
  809cd4:	1011883a 	mov	r8,r2
  809cd8:	1813883a 	mov	r9,r3
  809cdc:	003feb06 	br	809c8c <__pack_d+0x100>
  809ce0:	383fe11e 	bne	r7,zero,809c68 <__pack_d+0xdc>
  809ce4:	01004004 	movi	r4,256
  809ce8:	4104703a 	and	r2,r8,r4
  809cec:	10c4b03a 	or	r2,r2,r3
  809cf0:	103fe326 	beq	r2,zero,809c80 <__pack_d+0xf4>
  809cf4:	3005883a 	mov	r2,r6
  809cf8:	003fdc06 	br	809c6c <__pack_d+0xe0>
  809cfc:	000d883a 	mov	r6,zero
  809d00:	000f883a 	mov	r7,zero
  809d04:	0201ffc4 	movi	r8,2047
  809d08:	003fb406 	br	809bdc <__pack_d+0x50>
  809d0c:	0005883a 	mov	r2,zero
  809d10:	00c00234 	movhi	r3,8
  809d14:	408cb03a 	or	r6,r8,r2
  809d18:	48ceb03a 	or	r7,r9,r3
  809d1c:	013fffc4 	movi	r4,-1
  809d20:	01400434 	movhi	r5,16
  809d24:	297fffc4 	addi	r5,r5,-1
  809d28:	3104703a 	and	r2,r6,r4
  809d2c:	3946703a 	and	r3,r7,r5
  809d30:	100d883a 	mov	r6,r2
  809d34:	180f883a 	mov	r7,r3
  809d38:	0201ffc4 	movi	r8,2047
  809d3c:	003fa706 	br	809bdc <__pack_d+0x50>
  809d40:	1109c83a 	sub	r4,r2,r4
  809d44:	00800e04 	movi	r2,56
  809d48:	11004316 	blt	r2,r4,809e58 <__pack_d+0x2cc>
  809d4c:	21fff804 	addi	r7,r4,-32
  809d50:	38004516 	blt	r7,zero,809e68 <__pack_d+0x2dc>
  809d54:	49d8d83a 	srl	r12,r9,r7
  809d58:	001b883a 	mov	r13,zero
  809d5c:	0023883a 	mov	r17,zero
  809d60:	01400044 	movi	r5,1
  809d64:	0025883a 	mov	r18,zero
  809d68:	38004716 	blt	r7,zero,809e88 <__pack_d+0x2fc>
  809d6c:	29d6983a 	sll	r11,r5,r7
  809d70:	0015883a 	mov	r10,zero
  809d74:	00bfffc4 	movi	r2,-1
  809d78:	5089883a 	add	r4,r10,r2
  809d7c:	588b883a 	add	r5,r11,r2
  809d80:	228d803a 	cmpltu	r6,r4,r10
  809d84:	314b883a 	add	r5,r6,r5
  809d88:	4104703a 	and	r2,r8,r4
  809d8c:	4946703a 	and	r3,r9,r5
  809d90:	10c4b03a 	or	r2,r2,r3
  809d94:	10000226 	beq	r2,zero,809da0 <__pack_d+0x214>
  809d98:	04400044 	movi	r17,1
  809d9c:	0025883a 	mov	r18,zero
  809da0:	00803fc4 	movi	r2,255
  809da4:	644eb03a 	or	r7,r12,r17
  809da8:	3892703a 	and	r9,r7,r2
  809dac:	00802004 	movi	r2,128
  809db0:	6c90b03a 	or	r8,r13,r18
  809db4:	0015883a 	mov	r10,zero
  809db8:	48801626 	beq	r9,r2,809e14 <__pack_d+0x288>
  809dbc:	01001fc4 	movi	r4,127
  809dc0:	3905883a 	add	r2,r7,r4
  809dc4:	11cd803a 	cmpltu	r6,r2,r7
  809dc8:	320d883a 	add	r6,r6,r8
  809dcc:	100f883a 	mov	r7,r2
  809dd0:	00840034 	movhi	r2,4096
  809dd4:	10bfffc4 	addi	r2,r2,-1
  809dd8:	3011883a 	mov	r8,r6
  809ddc:	0007883a 	mov	r3,zero
  809de0:	11801b36 	bltu	r2,r6,809e50 <__pack_d+0x2c4>
  809de4:	4004963a 	slli	r2,r8,24
  809de8:	3808d23a 	srli	r4,r7,8
  809dec:	400ad23a 	srli	r5,r8,8
  809df0:	1813883a 	mov	r9,r3
  809df4:	1108b03a 	or	r4,r2,r4
  809df8:	00bfffc4 	movi	r2,-1
  809dfc:	00c00434 	movhi	r3,16
  809e00:	18ffffc4 	addi	r3,r3,-1
  809e04:	208c703a 	and	r6,r4,r2
  809e08:	28ce703a 	and	r7,r5,r3
  809e0c:	4a01ffcc 	andi	r8,r9,2047
  809e10:	003f7206 	br	809bdc <__pack_d+0x50>
  809e14:	503fe91e 	bne	r10,zero,809dbc <__pack_d+0x230>
  809e18:	01004004 	movi	r4,256
  809e1c:	3904703a 	and	r2,r7,r4
  809e20:	0007883a 	mov	r3,zero
  809e24:	10c4b03a 	or	r2,r2,r3
  809e28:	10000626 	beq	r2,zero,809e44 <__pack_d+0x2b8>
  809e2c:	3a45883a 	add	r2,r7,r9
  809e30:	11cd803a 	cmpltu	r6,r2,r7
  809e34:	320d883a 	add	r6,r6,r8
  809e38:	100f883a 	mov	r7,r2
  809e3c:	3011883a 	mov	r8,r6
  809e40:	0007883a 	mov	r3,zero
  809e44:	00840034 	movhi	r2,4096
  809e48:	10bfffc4 	addi	r2,r2,-1
  809e4c:	123fe52e 	bgeu	r2,r8,809de4 <__pack_d+0x258>
  809e50:	00c00044 	movi	r3,1
  809e54:	003fe306 	br	809de4 <__pack_d+0x258>
  809e58:	0009883a 	mov	r4,zero
  809e5c:	0013883a 	mov	r9,zero
  809e60:	000b883a 	mov	r5,zero
  809e64:	003fe406 	br	809df8 <__pack_d+0x26c>
  809e68:	4a47883a 	add	r3,r9,r9
  809e6c:	008007c4 	movi	r2,31
  809e70:	1105c83a 	sub	r2,r2,r4
  809e74:	1886983a 	sll	r3,r3,r2
  809e78:	4118d83a 	srl	r12,r8,r4
  809e7c:	491ad83a 	srl	r13,r9,r4
  809e80:	1b18b03a 	or	r12,r3,r12
  809e84:	003fb506 	br	809d5c <__pack_d+0x1d0>
  809e88:	2806d07a 	srli	r3,r5,1
  809e8c:	008007c4 	movi	r2,31
  809e90:	1105c83a 	sub	r2,r2,r4
  809e94:	1896d83a 	srl	r11,r3,r2
  809e98:	2914983a 	sll	r10,r5,r4
  809e9c:	003fb506 	br	809d74 <__pack_d+0x1e8>

00809ea0 <__unpack_d>:
  809ea0:	20c00117 	ldw	r3,4(r4)
  809ea4:	22400017 	ldw	r9,0(r4)
  809ea8:	00800434 	movhi	r2,16
  809eac:	10bfffc4 	addi	r2,r2,-1
  809eb0:	1808d53a 	srli	r4,r3,20
  809eb4:	180cd7fa 	srli	r6,r3,31
  809eb8:	1894703a 	and	r10,r3,r2
  809ebc:	2201ffcc 	andi	r8,r4,2047
  809ec0:	281b883a 	mov	r13,r5
  809ec4:	4817883a 	mov	r11,r9
  809ec8:	29800115 	stw	r6,4(r5)
  809ecc:	5019883a 	mov	r12,r10
  809ed0:	40001e1e 	bne	r8,zero,809f4c <__unpack_d+0xac>
  809ed4:	4a84b03a 	or	r2,r9,r10
  809ed8:	10001926 	beq	r2,zero,809f40 <__unpack_d+0xa0>
  809edc:	4804d63a 	srli	r2,r9,24
  809ee0:	500c923a 	slli	r6,r10,8
  809ee4:	013f0084 	movi	r4,-1022
  809ee8:	00c40034 	movhi	r3,4096
  809eec:	18ffffc4 	addi	r3,r3,-1
  809ef0:	118cb03a 	or	r6,r2,r6
  809ef4:	008000c4 	movi	r2,3
  809ef8:	480a923a 	slli	r5,r9,8
  809efc:	68800015 	stw	r2,0(r13)
  809f00:	69000215 	stw	r4,8(r13)
  809f04:	19800b36 	bltu	r3,r6,809f34 <__unpack_d+0x94>
  809f08:	200f883a 	mov	r7,r4
  809f0c:	1811883a 	mov	r8,r3
  809f10:	2945883a 	add	r2,r5,r5
  809f14:	1149803a 	cmpltu	r4,r2,r5
  809f18:	3187883a 	add	r3,r6,r6
  809f1c:	20c9883a 	add	r4,r4,r3
  809f20:	100b883a 	mov	r5,r2
  809f24:	200d883a 	mov	r6,r4
  809f28:	39ffffc4 	addi	r7,r7,-1
  809f2c:	413ff82e 	bgeu	r8,r4,809f10 <__unpack_d+0x70>
  809f30:	69c00215 	stw	r7,8(r13)
  809f34:	69800415 	stw	r6,16(r13)
  809f38:	69400315 	stw	r5,12(r13)
  809f3c:	f800283a 	ret
  809f40:	00800084 	movi	r2,2
  809f44:	28800015 	stw	r2,0(r5)
  809f48:	f800283a 	ret
  809f4c:	0081ffc4 	movi	r2,2047
  809f50:	40800f26 	beq	r8,r2,809f90 <__unpack_d+0xf0>
  809f54:	480cd63a 	srli	r6,r9,24
  809f58:	5006923a 	slli	r3,r10,8
  809f5c:	4804923a 	slli	r2,r9,8
  809f60:	0009883a 	mov	r4,zero
  809f64:	30c6b03a 	or	r3,r6,r3
  809f68:	01440034 	movhi	r5,4096
  809f6c:	110cb03a 	or	r6,r2,r4
  809f70:	423f0044 	addi	r8,r8,-1023
  809f74:	194eb03a 	or	r7,r3,r5
  809f78:	008000c4 	movi	r2,3
  809f7c:	69c00415 	stw	r7,16(r13)
  809f80:	6a000215 	stw	r8,8(r13)
  809f84:	68800015 	stw	r2,0(r13)
  809f88:	69800315 	stw	r6,12(r13)
  809f8c:	f800283a 	ret
  809f90:	4a84b03a 	or	r2,r9,r10
  809f94:	1000031e 	bne	r2,zero,809fa4 <__unpack_d+0x104>
  809f98:	00800104 	movi	r2,4
  809f9c:	28800015 	stw	r2,0(r5)
  809fa0:	f800283a 	ret
  809fa4:	0009883a 	mov	r4,zero
  809fa8:	01400234 	movhi	r5,8
  809fac:	4904703a 	and	r2,r9,r4
  809fb0:	5146703a 	and	r3,r10,r5
  809fb4:	10c4b03a 	or	r2,r2,r3
  809fb8:	10000526 	beq	r2,zero,809fd0 <__unpack_d+0x130>
  809fbc:	00800044 	movi	r2,1
  809fc0:	68800015 	stw	r2,0(r13)
  809fc4:	6b000415 	stw	r12,16(r13)
  809fc8:	6ac00315 	stw	r11,12(r13)
  809fcc:	f800283a 	ret
  809fd0:	68000015 	stw	zero,0(r13)
  809fd4:	003ffb06 	br	809fc4 <__unpack_d+0x124>

00809fd8 <__fpcmp_parts_d>:
  809fd8:	21800017 	ldw	r6,0(r4)
  809fdc:	00c00044 	movi	r3,1
  809fe0:	19800a2e 	bgeu	r3,r6,80a00c <__fpcmp_parts_d+0x34>
  809fe4:	28800017 	ldw	r2,0(r5)
  809fe8:	1880082e 	bgeu	r3,r2,80a00c <__fpcmp_parts_d+0x34>
  809fec:	00c00104 	movi	r3,4
  809ff0:	30c02626 	beq	r6,r3,80a08c <__fpcmp_parts_d+0xb4>
  809ff4:	10c02226 	beq	r2,r3,80a080 <__fpcmp_parts_d+0xa8>
  809ff8:	00c00084 	movi	r3,2
  809ffc:	30c00526 	beq	r6,r3,80a014 <__fpcmp_parts_d+0x3c>
  80a000:	10c0071e 	bne	r2,r3,80a020 <__fpcmp_parts_d+0x48>
  80a004:	20800117 	ldw	r2,4(r4)
  80a008:	1000091e 	bne	r2,zero,80a030 <__fpcmp_parts_d+0x58>
  80a00c:	00800044 	movi	r2,1
  80a010:	f800283a 	ret
  80a014:	10c01a1e 	bne	r2,r3,80a080 <__fpcmp_parts_d+0xa8>
  80a018:	0005883a 	mov	r2,zero
  80a01c:	f800283a 	ret
  80a020:	22000117 	ldw	r8,4(r4)
  80a024:	28800117 	ldw	r2,4(r5)
  80a028:	40800326 	beq	r8,r2,80a038 <__fpcmp_parts_d+0x60>
  80a02c:	403ff726 	beq	r8,zero,80a00c <__fpcmp_parts_d+0x34>
  80a030:	00bfffc4 	movi	r2,-1
  80a034:	f800283a 	ret
  80a038:	20c00217 	ldw	r3,8(r4)
  80a03c:	28800217 	ldw	r2,8(r5)
  80a040:	10fffa16 	blt	r2,r3,80a02c <__fpcmp_parts_d+0x54>
  80a044:	18800916 	blt	r3,r2,80a06c <__fpcmp_parts_d+0x94>
  80a048:	21c00417 	ldw	r7,16(r4)
  80a04c:	28c00417 	ldw	r3,16(r5)
  80a050:	21800317 	ldw	r6,12(r4)
  80a054:	28800317 	ldw	r2,12(r5)
  80a058:	19fff436 	bltu	r3,r7,80a02c <__fpcmp_parts_d+0x54>
  80a05c:	38c00526 	beq	r7,r3,80a074 <__fpcmp_parts_d+0x9c>
  80a060:	38c00236 	bltu	r7,r3,80a06c <__fpcmp_parts_d+0x94>
  80a064:	19ffec1e 	bne	r3,r7,80a018 <__fpcmp_parts_d+0x40>
  80a068:	30bfeb2e 	bgeu	r6,r2,80a018 <__fpcmp_parts_d+0x40>
  80a06c:	403fe71e 	bne	r8,zero,80a00c <__fpcmp_parts_d+0x34>
  80a070:	003fef06 	br	80a030 <__fpcmp_parts_d+0x58>
  80a074:	11bffa2e 	bgeu	r2,r6,80a060 <__fpcmp_parts_d+0x88>
  80a078:	403fe426 	beq	r8,zero,80a00c <__fpcmp_parts_d+0x34>
  80a07c:	003fec06 	br	80a030 <__fpcmp_parts_d+0x58>
  80a080:	28800117 	ldw	r2,4(r5)
  80a084:	103fe11e 	bne	r2,zero,80a00c <__fpcmp_parts_d+0x34>
  80a088:	003fe906 	br	80a030 <__fpcmp_parts_d+0x58>
  80a08c:	11bfdd1e 	bne	r2,r6,80a004 <__fpcmp_parts_d+0x2c>
  80a090:	28c00117 	ldw	r3,4(r5)
  80a094:	20800117 	ldw	r2,4(r4)
  80a098:	1885c83a 	sub	r2,r3,r2
  80a09c:	f800283a 	ret

0080a0a0 <__errno>:
  80a0a0:	00c020b4 	movhi	r3,130
  80a0a4:	18fc3904 	addi	r3,r3,-3868
  80a0a8:	18800017 	ldw	r2,0(r3)
  80a0ac:	f800283a 	ret

0080a0b0 <free>:
  80a0b0:	008020b4 	movhi	r2,130
  80a0b4:	10bc3904 	addi	r2,r2,-3868
  80a0b8:	200b883a 	mov	r5,r4
  80a0bc:	11000017 	ldw	r4,0(r2)
  80a0c0:	080e9641 	jmpi	80e964 <_free_r>

0080a0c4 <malloc>:
  80a0c4:	008020b4 	movhi	r2,130
  80a0c8:	10bc3904 	addi	r2,r2,-3868
  80a0cc:	200b883a 	mov	r5,r4
  80a0d0:	11000017 	ldw	r4,0(r2)
  80a0d4:	080a0d81 	jmpi	80a0d8 <_malloc_r>

0080a0d8 <_malloc_r>:
  80a0d8:	defff604 	addi	sp,sp,-40
  80a0dc:	28c002c4 	addi	r3,r5,11
  80a0e0:	00800584 	movi	r2,22
  80a0e4:	dc800215 	stw	r18,8(sp)
  80a0e8:	dfc00915 	stw	ra,36(sp)
  80a0ec:	df000815 	stw	fp,32(sp)
  80a0f0:	ddc00715 	stw	r23,28(sp)
  80a0f4:	dd800615 	stw	r22,24(sp)
  80a0f8:	dd400515 	stw	r21,20(sp)
  80a0fc:	dd000415 	stw	r20,16(sp)
  80a100:	dcc00315 	stw	r19,12(sp)
  80a104:	dc400115 	stw	r17,4(sp)
  80a108:	dc000015 	stw	r16,0(sp)
  80a10c:	2025883a 	mov	r18,r4
  80a110:	10c01236 	bltu	r2,r3,80a15c <_malloc_r+0x84>
  80a114:	04400404 	movi	r17,16
  80a118:	8940142e 	bgeu	r17,r5,80a16c <_malloc_r+0x94>
  80a11c:	00800304 	movi	r2,12
  80a120:	0007883a 	mov	r3,zero
  80a124:	90800015 	stw	r2,0(r18)
  80a128:	1805883a 	mov	r2,r3
  80a12c:	dfc00917 	ldw	ra,36(sp)
  80a130:	df000817 	ldw	fp,32(sp)
  80a134:	ddc00717 	ldw	r23,28(sp)
  80a138:	dd800617 	ldw	r22,24(sp)
  80a13c:	dd400517 	ldw	r21,20(sp)
  80a140:	dd000417 	ldw	r20,16(sp)
  80a144:	dcc00317 	ldw	r19,12(sp)
  80a148:	dc800217 	ldw	r18,8(sp)
  80a14c:	dc400117 	ldw	r17,4(sp)
  80a150:	dc000017 	ldw	r16,0(sp)
  80a154:	dec00a04 	addi	sp,sp,40
  80a158:	f800283a 	ret
  80a15c:	00bffe04 	movi	r2,-8
  80a160:	18a2703a 	and	r17,r3,r2
  80a164:	883fed16 	blt	r17,zero,80a11c <_malloc_r+0x44>
  80a168:	897fec36 	bltu	r17,r5,80a11c <_malloc_r+0x44>
  80a16c:	9009883a 	mov	r4,r18
  80a170:	0812d280 	call	812d28 <__malloc_lock>
  80a174:	00807dc4 	movi	r2,503
  80a178:	14402b2e 	bgeu	r2,r17,80a228 <_malloc_r+0x150>
  80a17c:	8806d27a 	srli	r3,r17,9
  80a180:	18003f1e 	bne	r3,zero,80a280 <_malloc_r+0x1a8>
  80a184:	880cd0fa 	srli	r6,r17,3
  80a188:	300490fa 	slli	r2,r6,3
  80a18c:	02c020b4 	movhi	r11,130
  80a190:	5af65704 	addi	r11,r11,-9892
  80a194:	12cb883a 	add	r5,r2,r11
  80a198:	2c000317 	ldw	r16,12(r5)
  80a19c:	580f883a 	mov	r7,r11
  80a1a0:	2c00041e 	bne	r5,r16,80a1b4 <_malloc_r+0xdc>
  80a1a4:	00000a06 	br	80a1d0 <_malloc_r+0xf8>
  80a1a8:	1800860e 	bge	r3,zero,80a3c4 <_malloc_r+0x2ec>
  80a1ac:	84000317 	ldw	r16,12(r16)
  80a1b0:	2c000726 	beq	r5,r16,80a1d0 <_malloc_r+0xf8>
  80a1b4:	80800117 	ldw	r2,4(r16)
  80a1b8:	00ffff04 	movi	r3,-4
  80a1bc:	10c8703a 	and	r4,r2,r3
  80a1c0:	2447c83a 	sub	r3,r4,r17
  80a1c4:	008003c4 	movi	r2,15
  80a1c8:	10fff70e 	bge	r2,r3,80a1a8 <_malloc_r+0xd0>
  80a1cc:	31bfffc4 	addi	r6,r6,-1
  80a1d0:	32400044 	addi	r9,r6,1
  80a1d4:	028020b4 	movhi	r10,130
  80a1d8:	52b65904 	addi	r10,r10,-9884
  80a1dc:	54000217 	ldw	r16,8(r10)
  80a1e0:	8280a026 	beq	r16,r10,80a464 <_malloc_r+0x38c>
  80a1e4:	80800117 	ldw	r2,4(r16)
  80a1e8:	00ffff04 	movi	r3,-4
  80a1ec:	10ca703a 	and	r5,r2,r3
  80a1f0:	2c4dc83a 	sub	r6,r5,r17
  80a1f4:	008003c4 	movi	r2,15
  80a1f8:	11808316 	blt	r2,r6,80a408 <_malloc_r+0x330>
  80a1fc:	52800315 	stw	r10,12(r10)
  80a200:	52800215 	stw	r10,8(r10)
  80a204:	30002916 	blt	r6,zero,80a2ac <_malloc_r+0x1d4>
  80a208:	8147883a 	add	r3,r16,r5
  80a20c:	18800117 	ldw	r2,4(r3)
  80a210:	9009883a 	mov	r4,r18
  80a214:	10800054 	ori	r2,r2,1
  80a218:	18800115 	stw	r2,4(r3)
  80a21c:	0812d480 	call	812d48 <__malloc_unlock>
  80a220:	80c00204 	addi	r3,r16,8
  80a224:	003fc006 	br	80a128 <_malloc_r+0x50>
  80a228:	02c020b4 	movhi	r11,130
  80a22c:	5af65704 	addi	r11,r11,-9892
  80a230:	8ac5883a 	add	r2,r17,r11
  80a234:	14000317 	ldw	r16,12(r2)
  80a238:	580f883a 	mov	r7,r11
  80a23c:	8806d0fa 	srli	r3,r17,3
  80a240:	14006c26 	beq	r2,r16,80a3f4 <_malloc_r+0x31c>
  80a244:	80c00117 	ldw	r3,4(r16)
  80a248:	00bfff04 	movi	r2,-4
  80a24c:	81800317 	ldw	r6,12(r16)
  80a250:	1886703a 	and	r3,r3,r2
  80a254:	80c7883a 	add	r3,r16,r3
  80a258:	18800117 	ldw	r2,4(r3)
  80a25c:	81400217 	ldw	r5,8(r16)
  80a260:	9009883a 	mov	r4,r18
  80a264:	10800054 	ori	r2,r2,1
  80a268:	18800115 	stw	r2,4(r3)
  80a26c:	31400215 	stw	r5,8(r6)
  80a270:	29800315 	stw	r6,12(r5)
  80a274:	0812d480 	call	812d48 <__malloc_unlock>
  80a278:	80c00204 	addi	r3,r16,8
  80a27c:	003faa06 	br	80a128 <_malloc_r+0x50>
  80a280:	00800104 	movi	r2,4
  80a284:	10c0052e 	bgeu	r2,r3,80a29c <_malloc_r+0x1c4>
  80a288:	00800504 	movi	r2,20
  80a28c:	10c07836 	bltu	r2,r3,80a470 <_malloc_r+0x398>
  80a290:	198016c4 	addi	r6,r3,91
  80a294:	300490fa 	slli	r2,r6,3
  80a298:	003fbc06 	br	80a18c <_malloc_r+0xb4>
  80a29c:	8804d1ba 	srli	r2,r17,6
  80a2a0:	11800e04 	addi	r6,r2,56
  80a2a4:	300490fa 	slli	r2,r6,3
  80a2a8:	003fb806 	br	80a18c <_malloc_r+0xb4>
  80a2ac:	00807fc4 	movi	r2,511
  80a2b0:	1140bb36 	bltu	r2,r5,80a5a0 <_malloc_r+0x4c8>
  80a2b4:	2806d0fa 	srli	r3,r5,3
  80a2b8:	573ffe04 	addi	fp,r10,-8
  80a2bc:	00800044 	movi	r2,1
  80a2c0:	180890fa 	slli	r4,r3,3
  80a2c4:	1807d0ba 	srai	r3,r3,2
  80a2c8:	e1c00117 	ldw	r7,4(fp)
  80a2cc:	5909883a 	add	r4,r11,r4
  80a2d0:	21400217 	ldw	r5,8(r4)
  80a2d4:	10c4983a 	sll	r2,r2,r3
  80a2d8:	81000315 	stw	r4,12(r16)
  80a2dc:	81400215 	stw	r5,8(r16)
  80a2e0:	388eb03a 	or	r7,r7,r2
  80a2e4:	2c000315 	stw	r16,12(r5)
  80a2e8:	24000215 	stw	r16,8(r4)
  80a2ec:	e1c00115 	stw	r7,4(fp)
  80a2f0:	4807883a 	mov	r3,r9
  80a2f4:	4800cd16 	blt	r9,zero,80a62c <_malloc_r+0x554>
  80a2f8:	1807d0ba 	srai	r3,r3,2
  80a2fc:	00800044 	movi	r2,1
  80a300:	10c8983a 	sll	r4,r2,r3
  80a304:	39004436 	bltu	r7,r4,80a418 <_malloc_r+0x340>
  80a308:	21c4703a 	and	r2,r4,r7
  80a30c:	10000a1e 	bne	r2,zero,80a338 <_malloc_r+0x260>
  80a310:	2109883a 	add	r4,r4,r4
  80a314:	00bfff04 	movi	r2,-4
  80a318:	4884703a 	and	r2,r9,r2
  80a31c:	3906703a 	and	r3,r7,r4
  80a320:	12400104 	addi	r9,r2,4
  80a324:	1800041e 	bne	r3,zero,80a338 <_malloc_r+0x260>
  80a328:	2109883a 	add	r4,r4,r4
  80a32c:	3904703a 	and	r2,r7,r4
  80a330:	4a400104 	addi	r9,r9,4
  80a334:	103ffc26 	beq	r2,zero,80a328 <_malloc_r+0x250>
  80a338:	480490fa 	slli	r2,r9,3
  80a33c:	4819883a 	mov	r12,r9
  80a340:	023fff04 	movi	r8,-4
  80a344:	589b883a 	add	r13,r11,r2
  80a348:	6807883a 	mov	r3,r13
  80a34c:	014003c4 	movi	r5,15
  80a350:	1c000317 	ldw	r16,12(r3)
  80a354:	1c00041e 	bne	r3,r16,80a368 <_malloc_r+0x290>
  80a358:	0000a706 	br	80a5f8 <_malloc_r+0x520>
  80a35c:	3000ab0e 	bge	r6,zero,80a60c <_malloc_r+0x534>
  80a360:	84000317 	ldw	r16,12(r16)
  80a364:	1c00a426 	beq	r3,r16,80a5f8 <_malloc_r+0x520>
  80a368:	80800117 	ldw	r2,4(r16)
  80a36c:	1204703a 	and	r2,r2,r8
  80a370:	144dc83a 	sub	r6,r2,r17
  80a374:	29bff90e 	bge	r5,r6,80a35c <_malloc_r+0x284>
  80a378:	81000317 	ldw	r4,12(r16)
  80a37c:	80c00217 	ldw	r3,8(r16)
  80a380:	89400054 	ori	r5,r17,1
  80a384:	8445883a 	add	r2,r16,r17
  80a388:	20c00215 	stw	r3,8(r4)
  80a38c:	19000315 	stw	r4,12(r3)
  80a390:	81400115 	stw	r5,4(r16)
  80a394:	1187883a 	add	r3,r2,r6
  80a398:	31000054 	ori	r4,r6,1
  80a39c:	50800315 	stw	r2,12(r10)
  80a3a0:	50800215 	stw	r2,8(r10)
  80a3a4:	19800015 	stw	r6,0(r3)
  80a3a8:	11000115 	stw	r4,4(r2)
  80a3ac:	12800215 	stw	r10,8(r2)
  80a3b0:	12800315 	stw	r10,12(r2)
  80a3b4:	9009883a 	mov	r4,r18
  80a3b8:	0812d480 	call	812d48 <__malloc_unlock>
  80a3bc:	80c00204 	addi	r3,r16,8
  80a3c0:	003f5906 	br	80a128 <_malloc_r+0x50>
  80a3c4:	8109883a 	add	r4,r16,r4
  80a3c8:	20800117 	ldw	r2,4(r4)
  80a3cc:	80c00217 	ldw	r3,8(r16)
  80a3d0:	81400317 	ldw	r5,12(r16)
  80a3d4:	10800054 	ori	r2,r2,1
  80a3d8:	20800115 	stw	r2,4(r4)
  80a3dc:	28c00215 	stw	r3,8(r5)
  80a3e0:	19400315 	stw	r5,12(r3)
  80a3e4:	9009883a 	mov	r4,r18
  80a3e8:	0812d480 	call	812d48 <__malloc_unlock>
  80a3ec:	80c00204 	addi	r3,r16,8
  80a3f0:	003f4d06 	br	80a128 <_malloc_r+0x50>
  80a3f4:	80800204 	addi	r2,r16,8
  80a3f8:	14000317 	ldw	r16,12(r2)
  80a3fc:	143f911e 	bne	r2,r16,80a244 <_malloc_r+0x16c>
  80a400:	1a400084 	addi	r9,r3,2
  80a404:	003f7306 	br	80a1d4 <_malloc_r+0xfc>
  80a408:	88c00054 	ori	r3,r17,1
  80a40c:	8445883a 	add	r2,r16,r17
  80a410:	80c00115 	stw	r3,4(r16)
  80a414:	003fdf06 	br	80a394 <_malloc_r+0x2bc>
  80a418:	e4000217 	ldw	r16,8(fp)
  80a41c:	00bfff04 	movi	r2,-4
  80a420:	80c00117 	ldw	r3,4(r16)
  80a424:	802d883a 	mov	r22,r16
  80a428:	18aa703a 	and	r21,r3,r2
  80a42c:	ac401636 	bltu	r21,r17,80a488 <_malloc_r+0x3b0>
  80a430:	ac49c83a 	sub	r4,r21,r17
  80a434:	008003c4 	movi	r2,15
  80a438:	1100130e 	bge	r2,r4,80a488 <_malloc_r+0x3b0>
  80a43c:	88800054 	ori	r2,r17,1
  80a440:	8447883a 	add	r3,r16,r17
  80a444:	80800115 	stw	r2,4(r16)
  80a448:	20800054 	ori	r2,r4,1
  80a44c:	18800115 	stw	r2,4(r3)
  80a450:	e0c00215 	stw	r3,8(fp)
  80a454:	9009883a 	mov	r4,r18
  80a458:	0812d480 	call	812d48 <__malloc_unlock>
  80a45c:	80c00204 	addi	r3,r16,8
  80a460:	003f3106 	br	80a128 <_malloc_r+0x50>
  80a464:	39c00117 	ldw	r7,4(r7)
  80a468:	573ffe04 	addi	fp,r10,-8
  80a46c:	003fa006 	br	80a2f0 <_malloc_r+0x218>
  80a470:	00801504 	movi	r2,84
  80a474:	10c06736 	bltu	r2,r3,80a614 <_malloc_r+0x53c>
  80a478:	8804d33a 	srli	r2,r17,12
  80a47c:	11801b84 	addi	r6,r2,110
  80a480:	300490fa 	slli	r2,r6,3
  80a484:	003f4106 	br	80a18c <_malloc_r+0xb4>
  80a488:	d0a73a17 	ldw	r2,-25368(gp)
  80a48c:	d0e00917 	ldw	r3,-32732(gp)
  80a490:	053fffc4 	movi	r20,-1
  80a494:	10800404 	addi	r2,r2,16
  80a498:	88a7883a 	add	r19,r17,r2
  80a49c:	1d000326 	beq	r3,r20,80a4ac <_malloc_r+0x3d4>
  80a4a0:	98c3ffc4 	addi	r3,r19,4095
  80a4a4:	00bc0004 	movi	r2,-4096
  80a4a8:	18a6703a 	and	r19,r3,r2
  80a4ac:	9009883a 	mov	r4,r18
  80a4b0:	980b883a 	mov	r5,r19
  80a4b4:	080a9d80 	call	80a9d8 <_sbrk_r>
  80a4b8:	1009883a 	mov	r4,r2
  80a4bc:	15000426 	beq	r2,r20,80a4d0 <_malloc_r+0x3f8>
  80a4c0:	854b883a 	add	r5,r16,r21
  80a4c4:	1029883a 	mov	r20,r2
  80a4c8:	11405a2e 	bgeu	r2,r5,80a634 <_malloc_r+0x55c>
  80a4cc:	87000c26 	beq	r16,fp,80a500 <_malloc_r+0x428>
  80a4d0:	e4000217 	ldw	r16,8(fp)
  80a4d4:	80c00117 	ldw	r3,4(r16)
  80a4d8:	00bfff04 	movi	r2,-4
  80a4dc:	1884703a 	and	r2,r3,r2
  80a4e0:	14400336 	bltu	r2,r17,80a4f0 <_malloc_r+0x418>
  80a4e4:	1449c83a 	sub	r4,r2,r17
  80a4e8:	008003c4 	movi	r2,15
  80a4ec:	113fd316 	blt	r2,r4,80a43c <_malloc_r+0x364>
  80a4f0:	9009883a 	mov	r4,r18
  80a4f4:	0812d480 	call	812d48 <__malloc_unlock>
  80a4f8:	0007883a 	mov	r3,zero
  80a4fc:	003f0a06 	br	80a128 <_malloc_r+0x50>
  80a500:	05c020b4 	movhi	r23,130
  80a504:	bdc38d04 	addi	r23,r23,3636
  80a508:	b8800017 	ldw	r2,0(r23)
  80a50c:	988d883a 	add	r6,r19,r2
  80a510:	b9800015 	stw	r6,0(r23)
  80a514:	d0e00917 	ldw	r3,-32732(gp)
  80a518:	00bfffc4 	movi	r2,-1
  80a51c:	18808e26 	beq	r3,r2,80a758 <_malloc_r+0x680>
  80a520:	2145c83a 	sub	r2,r4,r5
  80a524:	3085883a 	add	r2,r6,r2
  80a528:	b8800015 	stw	r2,0(r23)
  80a52c:	20c001cc 	andi	r3,r4,7
  80a530:	18005f1e 	bne	r3,zero,80a6b0 <_malloc_r+0x5d8>
  80a534:	000b883a 	mov	r5,zero
  80a538:	a4c5883a 	add	r2,r20,r19
  80a53c:	1083ffcc 	andi	r2,r2,4095
  80a540:	00c40004 	movi	r3,4096
  80a544:	1887c83a 	sub	r3,r3,r2
  80a548:	28e7883a 	add	r19,r5,r3
  80a54c:	9009883a 	mov	r4,r18
  80a550:	980b883a 	mov	r5,r19
  80a554:	080a9d80 	call	80a9d8 <_sbrk_r>
  80a558:	1007883a 	mov	r3,r2
  80a55c:	00bfffc4 	movi	r2,-1
  80a560:	18807a26 	beq	r3,r2,80a74c <_malloc_r+0x674>
  80a564:	1d05c83a 	sub	r2,r3,r20
  80a568:	9885883a 	add	r2,r19,r2
  80a56c:	10c00054 	ori	r3,r2,1
  80a570:	b8800017 	ldw	r2,0(r23)
  80a574:	a021883a 	mov	r16,r20
  80a578:	a0c00115 	stw	r3,4(r20)
  80a57c:	9885883a 	add	r2,r19,r2
  80a580:	b8800015 	stw	r2,0(r23)
  80a584:	e5000215 	stw	r20,8(fp)
  80a588:	b7003626 	beq	r22,fp,80a664 <_malloc_r+0x58c>
  80a58c:	018003c4 	movi	r6,15
  80a590:	35404b36 	bltu	r6,r21,80a6c0 <_malloc_r+0x5e8>
  80a594:	00800044 	movi	r2,1
  80a598:	a0800115 	stw	r2,4(r20)
  80a59c:	003fcd06 	br	80a4d4 <_malloc_r+0x3fc>
  80a5a0:	2808d27a 	srli	r4,r5,9
  80a5a4:	2000371e 	bne	r4,zero,80a684 <_malloc_r+0x5ac>
  80a5a8:	2808d0fa 	srli	r4,r5,3
  80a5ac:	200690fa 	slli	r3,r4,3
  80a5b0:	1ad1883a 	add	r8,r3,r11
  80a5b4:	41800217 	ldw	r6,8(r8)
  80a5b8:	41805b26 	beq	r8,r6,80a728 <_malloc_r+0x650>
  80a5bc:	30800117 	ldw	r2,4(r6)
  80a5c0:	00ffff04 	movi	r3,-4
  80a5c4:	10c4703a 	and	r2,r2,r3
  80a5c8:	2880022e 	bgeu	r5,r2,80a5d4 <_malloc_r+0x4fc>
  80a5cc:	31800217 	ldw	r6,8(r6)
  80a5d0:	41bffa1e 	bne	r8,r6,80a5bc <_malloc_r+0x4e4>
  80a5d4:	32000317 	ldw	r8,12(r6)
  80a5d8:	39c00117 	ldw	r7,4(r7)
  80a5dc:	82000315 	stw	r8,12(r16)
  80a5e0:	81800215 	stw	r6,8(r16)
  80a5e4:	070020b4 	movhi	fp,130
  80a5e8:	e7365704 	addi	fp,fp,-9892
  80a5ec:	34000315 	stw	r16,12(r6)
  80a5f0:	44000215 	stw	r16,8(r8)
  80a5f4:	003f3e06 	br	80a2f0 <_malloc_r+0x218>
  80a5f8:	63000044 	addi	r12,r12,1
  80a5fc:	608000cc 	andi	r2,r12,3
  80a600:	10005d26 	beq	r2,zero,80a778 <_malloc_r+0x6a0>
  80a604:	18c00204 	addi	r3,r3,8
  80a608:	003f5106 	br	80a350 <_malloc_r+0x278>
  80a60c:	8089883a 	add	r4,r16,r2
  80a610:	003f6d06 	br	80a3c8 <_malloc_r+0x2f0>
  80a614:	00805504 	movi	r2,340
  80a618:	10c02036 	bltu	r2,r3,80a69c <_malloc_r+0x5c4>
  80a61c:	8804d3fa 	srli	r2,r17,15
  80a620:	11801dc4 	addi	r6,r2,119
  80a624:	300490fa 	slli	r2,r6,3
  80a628:	003ed806 	br	80a18c <_malloc_r+0xb4>
  80a62c:	48c000c4 	addi	r3,r9,3
  80a630:	003f3106 	br	80a2f8 <_malloc_r+0x220>
  80a634:	05c020b4 	movhi	r23,130
  80a638:	bdc38d04 	addi	r23,r23,3636
  80a63c:	b8800017 	ldw	r2,0(r23)
  80a640:	988d883a 	add	r6,r19,r2
  80a644:	b9800015 	stw	r6,0(r23)
  80a648:	293fb21e 	bne	r5,r4,80a514 <_malloc_r+0x43c>
  80a64c:	2083ffcc 	andi	r2,r4,4095
  80a650:	103fb01e 	bne	r2,zero,80a514 <_malloc_r+0x43c>
  80a654:	e4000217 	ldw	r16,8(fp)
  80a658:	9d45883a 	add	r2,r19,r21
  80a65c:	10800054 	ori	r2,r2,1
  80a660:	80800115 	stw	r2,4(r16)
  80a664:	b8c00017 	ldw	r3,0(r23)
  80a668:	d0a73b17 	ldw	r2,-25364(gp)
  80a66c:	10c0012e 	bgeu	r2,r3,80a674 <_malloc_r+0x59c>
  80a670:	d0e73b15 	stw	r3,-25364(gp)
  80a674:	d0a73c17 	ldw	r2,-25360(gp)
  80a678:	10ff962e 	bgeu	r2,r3,80a4d4 <_malloc_r+0x3fc>
  80a67c:	d0e73c15 	stw	r3,-25360(gp)
  80a680:	003f9406 	br	80a4d4 <_malloc_r+0x3fc>
  80a684:	00800104 	movi	r2,4
  80a688:	11001e36 	bltu	r2,r4,80a704 <_malloc_r+0x62c>
  80a68c:	2804d1ba 	srli	r2,r5,6
  80a690:	11000e04 	addi	r4,r2,56
  80a694:	200690fa 	slli	r3,r4,3
  80a698:	003fc506 	br	80a5b0 <_malloc_r+0x4d8>
  80a69c:	00815504 	movi	r2,1364
  80a6a0:	10c01d2e 	bgeu	r2,r3,80a718 <_malloc_r+0x640>
  80a6a4:	01801f84 	movi	r6,126
  80a6a8:	0080fc04 	movi	r2,1008
  80a6ac:	003eb706 	br	80a18c <_malloc_r+0xb4>
  80a6b0:	00800204 	movi	r2,8
  80a6b4:	10cbc83a 	sub	r5,r2,r3
  80a6b8:	2169883a 	add	r20,r4,r5
  80a6bc:	003f9e06 	br	80a538 <_malloc_r+0x460>
  80a6c0:	00bffe04 	movi	r2,-8
  80a6c4:	a93ffd04 	addi	r4,r21,-12
  80a6c8:	2088703a 	and	r4,r4,r2
  80a6cc:	b10b883a 	add	r5,r22,r4
  80a6d0:	00c00144 	movi	r3,5
  80a6d4:	28c00215 	stw	r3,8(r5)
  80a6d8:	28c00115 	stw	r3,4(r5)
  80a6dc:	b0800117 	ldw	r2,4(r22)
  80a6e0:	1080004c 	andi	r2,r2,1
  80a6e4:	2084b03a 	or	r2,r4,r2
  80a6e8:	b0800115 	stw	r2,4(r22)
  80a6ec:	313fdd2e 	bgeu	r6,r4,80a664 <_malloc_r+0x58c>
  80a6f0:	b1400204 	addi	r5,r22,8
  80a6f4:	9009883a 	mov	r4,r18
  80a6f8:	080e9640 	call	80e964 <_free_r>
  80a6fc:	e4000217 	ldw	r16,8(fp)
  80a700:	003fd806 	br	80a664 <_malloc_r+0x58c>
  80a704:	00800504 	movi	r2,20
  80a708:	11001536 	bltu	r2,r4,80a760 <_malloc_r+0x688>
  80a70c:	210016c4 	addi	r4,r4,91
  80a710:	200690fa 	slli	r3,r4,3
  80a714:	003fa606 	br	80a5b0 <_malloc_r+0x4d8>
  80a718:	8804d4ba 	srli	r2,r17,18
  80a71c:	11801f04 	addi	r6,r2,124
  80a720:	300490fa 	slli	r2,r6,3
  80a724:	003e9906 	br	80a18c <_malloc_r+0xb4>
  80a728:	2009d0ba 	srai	r4,r4,2
  80a72c:	014020b4 	movhi	r5,130
  80a730:	29765704 	addi	r5,r5,-9892
  80a734:	00c00044 	movi	r3,1
  80a738:	28800117 	ldw	r2,4(r5)
  80a73c:	1906983a 	sll	r3,r3,r4
  80a740:	10c4b03a 	or	r2,r2,r3
  80a744:	28800115 	stw	r2,4(r5)
  80a748:	003fa306 	br	80a5d8 <_malloc_r+0x500>
  80a74c:	0027883a 	mov	r19,zero
  80a750:	00c00044 	movi	r3,1
  80a754:	003f8606 	br	80a570 <_malloc_r+0x498>
  80a758:	d1200915 	stw	r4,-32732(gp)
  80a75c:	003f7306 	br	80a52c <_malloc_r+0x454>
  80a760:	00801504 	movi	r2,84
  80a764:	11001936 	bltu	r2,r4,80a7cc <_malloc_r+0x6f4>
  80a768:	2804d33a 	srli	r2,r5,12
  80a76c:	11001b84 	addi	r4,r2,110
  80a770:	200690fa 	slli	r3,r4,3
  80a774:	003f8e06 	br	80a5b0 <_malloc_r+0x4d8>
  80a778:	480b883a 	mov	r5,r9
  80a77c:	6807883a 	mov	r3,r13
  80a780:	288000cc 	andi	r2,r5,3
  80a784:	18fffe04 	addi	r3,r3,-8
  80a788:	297fffc4 	addi	r5,r5,-1
  80a78c:	10001526 	beq	r2,zero,80a7e4 <_malloc_r+0x70c>
  80a790:	18800217 	ldw	r2,8(r3)
  80a794:	10fffa26 	beq	r2,r3,80a780 <_malloc_r+0x6a8>
  80a798:	2109883a 	add	r4,r4,r4
  80a79c:	393f1e36 	bltu	r7,r4,80a418 <_malloc_r+0x340>
  80a7a0:	203f1d26 	beq	r4,zero,80a418 <_malloc_r+0x340>
  80a7a4:	21c4703a 	and	r2,r4,r7
  80a7a8:	10000226 	beq	r2,zero,80a7b4 <_malloc_r+0x6dc>
  80a7ac:	6013883a 	mov	r9,r12
  80a7b0:	003ee106 	br	80a338 <_malloc_r+0x260>
  80a7b4:	2109883a 	add	r4,r4,r4
  80a7b8:	3904703a 	and	r2,r7,r4
  80a7bc:	63000104 	addi	r12,r12,4
  80a7c0:	103ffc26 	beq	r2,zero,80a7b4 <_malloc_r+0x6dc>
  80a7c4:	6013883a 	mov	r9,r12
  80a7c8:	003edb06 	br	80a338 <_malloc_r+0x260>
  80a7cc:	00805504 	movi	r2,340
  80a7d0:	11000836 	bltu	r2,r4,80a7f4 <_malloc_r+0x71c>
  80a7d4:	2804d3fa 	srli	r2,r5,15
  80a7d8:	11001dc4 	addi	r4,r2,119
  80a7dc:	200690fa 	slli	r3,r4,3
  80a7e0:	003f7306 	br	80a5b0 <_malloc_r+0x4d8>
  80a7e4:	0104303a 	nor	r2,zero,r4
  80a7e8:	388e703a 	and	r7,r7,r2
  80a7ec:	e1c00115 	stw	r7,4(fp)
  80a7f0:	003fe906 	br	80a798 <_malloc_r+0x6c0>
  80a7f4:	00815504 	movi	r2,1364
  80a7f8:	1100032e 	bgeu	r2,r4,80a808 <_malloc_r+0x730>
  80a7fc:	01001f84 	movi	r4,126
  80a800:	00c0fc04 	movi	r3,1008
  80a804:	003f6a06 	br	80a5b0 <_malloc_r+0x4d8>
  80a808:	2804d4ba 	srli	r2,r5,18
  80a80c:	11001f04 	addi	r4,r2,124
  80a810:	200690fa 	slli	r3,r4,3
  80a814:	003f6606 	br	80a5b0 <_malloc_r+0x4d8>

0080a818 <printf>:
  80a818:	defffb04 	addi	sp,sp,-20
  80a81c:	dfc00115 	stw	ra,4(sp)
  80a820:	d9400215 	stw	r5,8(sp)
  80a824:	d9800315 	stw	r6,12(sp)
  80a828:	d9c00415 	stw	r7,16(sp)
  80a82c:	008020b4 	movhi	r2,130
  80a830:	10bc3904 	addi	r2,r2,-3868
  80a834:	10c00017 	ldw	r3,0(r2)
  80a838:	200b883a 	mov	r5,r4
  80a83c:	d8800204 	addi	r2,sp,8
  80a840:	19000217 	ldw	r4,8(r3)
  80a844:	100d883a 	mov	r6,r2
  80a848:	d8800015 	stw	r2,0(sp)
  80a84c:	080ca1c0 	call	80ca1c <__vfprintf_internal>
  80a850:	dfc00117 	ldw	ra,4(sp)
  80a854:	dec00504 	addi	sp,sp,20
  80a858:	f800283a 	ret

0080a85c <_printf_r>:
  80a85c:	defffc04 	addi	sp,sp,-16
  80a860:	dfc00115 	stw	ra,4(sp)
  80a864:	d9800215 	stw	r6,8(sp)
  80a868:	d9c00315 	stw	r7,12(sp)
  80a86c:	280d883a 	mov	r6,r5
  80a870:	21400217 	ldw	r5,8(r4)
  80a874:	d8c00204 	addi	r3,sp,8
  80a878:	180f883a 	mov	r7,r3
  80a87c:	d8c00015 	stw	r3,0(sp)
  80a880:	080ab700 	call	80ab70 <___vfprintf_internal_r>
  80a884:	dfc00117 	ldw	ra,4(sp)
  80a888:	dec00404 	addi	sp,sp,16
  80a88c:	f800283a 	ret

0080a890 <_puts_r>:
  80a890:	defff604 	addi	sp,sp,-40
  80a894:	dc400715 	stw	r17,28(sp)
  80a898:	2023883a 	mov	r17,r4
  80a89c:	2809883a 	mov	r4,r5
  80a8a0:	dfc00915 	stw	ra,36(sp)
  80a8a4:	dcc00815 	stw	r19,32(sp)
  80a8a8:	2827883a 	mov	r19,r5
  80a8ac:	080aa480 	call	80aa48 <strlen>
  80a8b0:	89400217 	ldw	r5,8(r17)
  80a8b4:	00c020b4 	movhi	r3,130
  80a8b8:	18f49704 	addi	r3,r3,-11684
  80a8bc:	01c00044 	movi	r7,1
  80a8c0:	12000044 	addi	r8,r2,1
  80a8c4:	d8c00515 	stw	r3,20(sp)
  80a8c8:	d9c00615 	stw	r7,24(sp)
  80a8cc:	d8c00304 	addi	r3,sp,12
  80a8d0:	01c00084 	movi	r7,2
  80a8d4:	8809883a 	mov	r4,r17
  80a8d8:	d80d883a 	mov	r6,sp
  80a8dc:	d8c00015 	stw	r3,0(sp)
  80a8e0:	dcc00315 	stw	r19,12(sp)
  80a8e4:	da000215 	stw	r8,8(sp)
  80a8e8:	d9c00115 	stw	r7,4(sp)
  80a8ec:	d8800415 	stw	r2,16(sp)
  80a8f0:	080ec780 	call	80ec78 <__sfvwrite_r>
  80a8f4:	00ffffc4 	movi	r3,-1
  80a8f8:	10000626 	beq	r2,zero,80a914 <_puts_r+0x84>
  80a8fc:	1805883a 	mov	r2,r3
  80a900:	dfc00917 	ldw	ra,36(sp)
  80a904:	dcc00817 	ldw	r19,32(sp)
  80a908:	dc400717 	ldw	r17,28(sp)
  80a90c:	dec00a04 	addi	sp,sp,40
  80a910:	f800283a 	ret
  80a914:	00c00284 	movi	r3,10
  80a918:	1805883a 	mov	r2,r3
  80a91c:	dfc00917 	ldw	ra,36(sp)
  80a920:	dcc00817 	ldw	r19,32(sp)
  80a924:	dc400717 	ldw	r17,28(sp)
  80a928:	dec00a04 	addi	sp,sp,40
  80a92c:	f800283a 	ret

0080a930 <puts>:
  80a930:	008020b4 	movhi	r2,130
  80a934:	10bc3904 	addi	r2,r2,-3868
  80a938:	200b883a 	mov	r5,r4
  80a93c:	11000017 	ldw	r4,0(r2)
  80a940:	080a8901 	jmpi	80a890 <_puts_r>

0080a944 <srand>:
  80a944:	008020b4 	movhi	r2,130
  80a948:	10bc3904 	addi	r2,r2,-3868
  80a94c:	11400017 	ldw	r5,0(r2)
  80a950:	0007883a 	mov	r3,zero
  80a954:	28c02a15 	stw	r3,168(r5)
  80a958:	29002915 	stw	r4,164(r5)
  80a95c:	f800283a 	ret

0080a960 <rand>:
  80a960:	defffe04 	addi	sp,sp,-8
  80a964:	008020b4 	movhi	r2,130
  80a968:	10bc3904 	addi	r2,r2,-3868
  80a96c:	dc000015 	stw	r16,0(sp)
  80a970:	14000017 	ldw	r16,0(r2)
  80a974:	dfc00115 	stw	ra,4(sp)
  80a978:	00932574 	movhi	r2,19605
  80a97c:	109fcb44 	addi	r2,r2,32557
  80a980:	82002917 	ldw	r8,164(r16)
  80a984:	82402a17 	ldw	r9,168(r16)
  80a988:	00d614b4 	movhi	r3,22610
  80a98c:	18fd0b44 	addi	r3,r3,-3027
  80a990:	4009883a 	mov	r4,r8
  80a994:	180f883a 	mov	r7,r3
  80a998:	100d883a 	mov	r6,r2
  80a99c:	480b883a 	mov	r5,r9
  80a9a0:	080984c0 	call	80984c <__muldi3>
  80a9a4:	02000044 	movi	r8,1
  80a9a8:	1209883a 	add	r4,r2,r8
  80a9ac:	2095803a 	cmpltu	r10,r4,r2
  80a9b0:	50d5883a 	add	r10,r10,r3
  80a9b4:	81002915 	stw	r4,164(r16)
  80a9b8:	01200034 	movhi	r4,32768
  80a9bc:	213fffc4 	addi	r4,r4,-1
  80a9c0:	2284703a 	and	r2,r4,r10
  80a9c4:	82802a15 	stw	r10,168(r16)
  80a9c8:	dfc00117 	ldw	ra,4(sp)
  80a9cc:	dc000017 	ldw	r16,0(sp)
  80a9d0:	dec00204 	addi	sp,sp,8
  80a9d4:	f800283a 	ret

0080a9d8 <_sbrk_r>:
  80a9d8:	defffd04 	addi	sp,sp,-12
  80a9dc:	dc000015 	stw	r16,0(sp)
  80a9e0:	040020b4 	movhi	r16,130
  80a9e4:	84037004 	addi	r16,r16,3520
  80a9e8:	dc400115 	stw	r17,4(sp)
  80a9ec:	80000015 	stw	zero,0(r16)
  80a9f0:	2023883a 	mov	r17,r4
  80a9f4:	2809883a 	mov	r4,r5
  80a9f8:	dfc00215 	stw	ra,8(sp)
  80a9fc:	0812f480 	call	812f48 <sbrk>
  80aa00:	1007883a 	mov	r3,r2
  80aa04:	00bfffc4 	movi	r2,-1
  80aa08:	18800626 	beq	r3,r2,80aa24 <_sbrk_r+0x4c>
  80aa0c:	1805883a 	mov	r2,r3
  80aa10:	dfc00217 	ldw	ra,8(sp)
  80aa14:	dc400117 	ldw	r17,4(sp)
  80aa18:	dc000017 	ldw	r16,0(sp)
  80aa1c:	dec00304 	addi	sp,sp,12
  80aa20:	f800283a 	ret
  80aa24:	80800017 	ldw	r2,0(r16)
  80aa28:	103ff826 	beq	r2,zero,80aa0c <_sbrk_r+0x34>
  80aa2c:	88800015 	stw	r2,0(r17)
  80aa30:	1805883a 	mov	r2,r3
  80aa34:	dfc00217 	ldw	ra,8(sp)
  80aa38:	dc400117 	ldw	r17,4(sp)
  80aa3c:	dc000017 	ldw	r16,0(sp)
  80aa40:	dec00304 	addi	sp,sp,12
  80aa44:	f800283a 	ret

0080aa48 <strlen>:
  80aa48:	208000cc 	andi	r2,r4,3
  80aa4c:	2011883a 	mov	r8,r4
  80aa50:	1000161e 	bne	r2,zero,80aaac <strlen+0x64>
  80aa54:	20c00017 	ldw	r3,0(r4)
  80aa58:	017fbff4 	movhi	r5,65279
  80aa5c:	297fbfc4 	addi	r5,r5,-257
  80aa60:	01e02074 	movhi	r7,32897
  80aa64:	39e02004 	addi	r7,r7,-32640
  80aa68:	1945883a 	add	r2,r3,r5
  80aa6c:	11c4703a 	and	r2,r2,r7
  80aa70:	00c6303a 	nor	r3,zero,r3
  80aa74:	1886703a 	and	r3,r3,r2
  80aa78:	18000c1e 	bne	r3,zero,80aaac <strlen+0x64>
  80aa7c:	280d883a 	mov	r6,r5
  80aa80:	380b883a 	mov	r5,r7
  80aa84:	21000104 	addi	r4,r4,4
  80aa88:	20800017 	ldw	r2,0(r4)
  80aa8c:	1187883a 	add	r3,r2,r6
  80aa90:	1946703a 	and	r3,r3,r5
  80aa94:	0084303a 	nor	r2,zero,r2
  80aa98:	10c4703a 	and	r2,r2,r3
  80aa9c:	103ff926 	beq	r2,zero,80aa84 <strlen+0x3c>
  80aaa0:	20800007 	ldb	r2,0(r4)
  80aaa4:	10000326 	beq	r2,zero,80aab4 <strlen+0x6c>
  80aaa8:	21000044 	addi	r4,r4,1
  80aaac:	20800007 	ldb	r2,0(r4)
  80aab0:	103ffd1e 	bne	r2,zero,80aaa8 <strlen+0x60>
  80aab4:	2205c83a 	sub	r2,r4,r8
  80aab8:	f800283a 	ret

0080aabc <time>:
  80aabc:	defffc04 	addi	sp,sp,-16
  80aac0:	008020b4 	movhi	r2,130
  80aac4:	10bc3904 	addi	r2,r2,-3868
  80aac8:	dc000215 	stw	r16,8(sp)
  80aacc:	2021883a 	mov	r16,r4
  80aad0:	11000017 	ldw	r4,0(r2)
  80aad4:	d80b883a 	mov	r5,sp
  80aad8:	000d883a 	mov	r6,zero
  80aadc:	dfc00315 	stw	ra,12(sp)
  80aae0:	080f2940 	call	80f294 <_gettimeofday_r>
  80aae4:	00ffffc4 	movi	r3,-1
  80aae8:	10000416 	blt	r2,zero,80aafc <time+0x40>
  80aaec:	80000826 	beq	r16,zero,80ab10 <time+0x54>
  80aaf0:	d8800017 	ldw	r2,0(sp)
  80aaf4:	80800015 	stw	r2,0(r16)
  80aaf8:	1007883a 	mov	r3,r2
  80aafc:	1805883a 	mov	r2,r3
  80ab00:	dfc00317 	ldw	ra,12(sp)
  80ab04:	dc000217 	ldw	r16,8(sp)
  80ab08:	dec00404 	addi	sp,sp,16
  80ab0c:	f800283a 	ret
  80ab10:	d8800017 	ldw	r2,0(sp)
  80ab14:	003ff806 	br	80aaf8 <time+0x3c>

0080ab18 <__sprint_r>:
  80ab18:	30800217 	ldw	r2,8(r6)
  80ab1c:	defffe04 	addi	sp,sp,-8
  80ab20:	dc000015 	stw	r16,0(sp)
  80ab24:	dfc00115 	stw	ra,4(sp)
  80ab28:	3021883a 	mov	r16,r6
  80ab2c:	0007883a 	mov	r3,zero
  80ab30:	1000061e 	bne	r2,zero,80ab4c <__sprint_r+0x34>
  80ab34:	1805883a 	mov	r2,r3
  80ab38:	30000115 	stw	zero,4(r6)
  80ab3c:	dfc00117 	ldw	ra,4(sp)
  80ab40:	dc000017 	ldw	r16,0(sp)
  80ab44:	dec00204 	addi	sp,sp,8
  80ab48:	f800283a 	ret
  80ab4c:	080ec780 	call	80ec78 <__sfvwrite_r>
  80ab50:	1007883a 	mov	r3,r2
  80ab54:	1805883a 	mov	r2,r3
  80ab58:	80000115 	stw	zero,4(r16)
  80ab5c:	80000215 	stw	zero,8(r16)
  80ab60:	dfc00117 	ldw	ra,4(sp)
  80ab64:	dc000017 	ldw	r16,0(sp)
  80ab68:	dec00204 	addi	sp,sp,8
  80ab6c:	f800283a 	ret

0080ab70 <___vfprintf_internal_r>:
  80ab70:	defea404 	addi	sp,sp,-1392
  80ab74:	dd815815 	stw	r22,1376(sp)
  80ab78:	dc015215 	stw	r16,1352(sp)
  80ab7c:	d9c15115 	stw	r7,1348(sp)
  80ab80:	dfc15b15 	stw	ra,1388(sp)
  80ab84:	df015a15 	stw	fp,1384(sp)
  80ab88:	ddc15915 	stw	r23,1380(sp)
  80ab8c:	dd415715 	stw	r21,1372(sp)
  80ab90:	dd015615 	stw	r20,1368(sp)
  80ab94:	dcc15515 	stw	r19,1364(sp)
  80ab98:	dc815415 	stw	r18,1360(sp)
  80ab9c:	dc415315 	stw	r17,1356(sp)
  80aba0:	282d883a 	mov	r22,r5
  80aba4:	3021883a 	mov	r16,r6
  80aba8:	d9014f15 	stw	r4,1340(sp)
  80abac:	080f3100 	call	80f310 <_localeconv_r>
  80abb0:	10800017 	ldw	r2,0(r2)
  80abb4:	d9c15117 	ldw	r7,1348(sp)
  80abb8:	d8814915 	stw	r2,1316(sp)
  80abbc:	d8814f17 	ldw	r2,1340(sp)
  80abc0:	10000226 	beq	r2,zero,80abcc <___vfprintf_internal_r+0x5c>
  80abc4:	10800e17 	ldw	r2,56(r2)
  80abc8:	10020d26 	beq	r2,zero,80b400 <___vfprintf_internal_r+0x890>
  80abcc:	b080030b 	ldhu	r2,12(r22)
  80abd0:	1080020c 	andi	r2,r2,8
  80abd4:	10020e26 	beq	r2,zero,80b410 <___vfprintf_internal_r+0x8a0>
  80abd8:	b0800417 	ldw	r2,16(r22)
  80abdc:	10020c26 	beq	r2,zero,80b410 <___vfprintf_internal_r+0x8a0>
  80abe0:	b200030b 	ldhu	r8,12(r22)
  80abe4:	00800284 	movi	r2,10
  80abe8:	40c0068c 	andi	r3,r8,26
  80abec:	18802f1e 	bne	r3,r2,80acac <___vfprintf_internal_r+0x13c>
  80abf0:	b080038f 	ldh	r2,14(r22)
  80abf4:	10002d16 	blt	r2,zero,80acac <___vfprintf_internal_r+0x13c>
  80abf8:	b240038b 	ldhu	r9,14(r22)
  80abfc:	b2800717 	ldw	r10,28(r22)
  80ac00:	b2c00917 	ldw	r11,36(r22)
  80ac04:	d9014f17 	ldw	r4,1340(sp)
  80ac08:	dc402904 	addi	r17,sp,164
  80ac0c:	d8804004 	addi	r2,sp,256
  80ac10:	00c10004 	movi	r3,1024
  80ac14:	423fff4c 	andi	r8,r8,65533
  80ac18:	800d883a 	mov	r6,r16
  80ac1c:	880b883a 	mov	r5,r17
  80ac20:	da002c0d 	sth	r8,176(sp)
  80ac24:	da402c8d 	sth	r9,178(sp)
  80ac28:	da803015 	stw	r10,192(sp)
  80ac2c:	dac03215 	stw	r11,200(sp)
  80ac30:	d8802d15 	stw	r2,180(sp)
  80ac34:	d8c02e15 	stw	r3,184(sp)
  80ac38:	d8802915 	stw	r2,164(sp)
  80ac3c:	d8c02b15 	stw	r3,172(sp)
  80ac40:	d8002f15 	stw	zero,188(sp)
  80ac44:	080ab700 	call	80ab70 <___vfprintf_internal_r>
  80ac48:	d8814b15 	stw	r2,1324(sp)
  80ac4c:	10000416 	blt	r2,zero,80ac60 <___vfprintf_internal_r+0xf0>
  80ac50:	d9014f17 	ldw	r4,1340(sp)
  80ac54:	880b883a 	mov	r5,r17
  80ac58:	080e3480 	call	80e348 <_fflush_r>
  80ac5c:	1002321e 	bne	r2,zero,80b528 <___vfprintf_internal_r+0x9b8>
  80ac60:	d8802c0b 	ldhu	r2,176(sp)
  80ac64:	1080100c 	andi	r2,r2,64
  80ac68:	10000326 	beq	r2,zero,80ac78 <___vfprintf_internal_r+0x108>
  80ac6c:	b080030b 	ldhu	r2,12(r22)
  80ac70:	10801014 	ori	r2,r2,64
  80ac74:	b080030d 	sth	r2,12(r22)
  80ac78:	d8814b17 	ldw	r2,1324(sp)
  80ac7c:	dfc15b17 	ldw	ra,1388(sp)
  80ac80:	df015a17 	ldw	fp,1384(sp)
  80ac84:	ddc15917 	ldw	r23,1380(sp)
  80ac88:	dd815817 	ldw	r22,1376(sp)
  80ac8c:	dd415717 	ldw	r21,1372(sp)
  80ac90:	dd015617 	ldw	r20,1368(sp)
  80ac94:	dcc15517 	ldw	r19,1364(sp)
  80ac98:	dc815417 	ldw	r18,1360(sp)
  80ac9c:	dc415317 	ldw	r17,1356(sp)
  80aca0:	dc015217 	ldw	r16,1352(sp)
  80aca4:	dec15c04 	addi	sp,sp,1392
  80aca8:	f800283a 	ret
  80acac:	0005883a 	mov	r2,zero
  80acb0:	0007883a 	mov	r3,zero
  80acb4:	dd401904 	addi	r21,sp,100
  80acb8:	d8814215 	stw	r2,1288(sp)
  80acbc:	802f883a 	mov	r23,r16
  80acc0:	d8c14315 	stw	r3,1292(sp)
  80acc4:	d8014b15 	stw	zero,1324(sp)
  80acc8:	d8014815 	stw	zero,1312(sp)
  80accc:	d8014415 	stw	zero,1296(sp)
  80acd0:	d8014715 	stw	zero,1308(sp)
  80acd4:	dd400c15 	stw	r21,48(sp)
  80acd8:	d8000e15 	stw	zero,56(sp)
  80acdc:	d8000d15 	stw	zero,52(sp)
  80ace0:	b8800007 	ldb	r2,0(r23)
  80ace4:	10001926 	beq	r2,zero,80ad4c <___vfprintf_internal_r+0x1dc>
  80ace8:	00c00944 	movi	r3,37
  80acec:	10c01726 	beq	r2,r3,80ad4c <___vfprintf_internal_r+0x1dc>
  80acf0:	b821883a 	mov	r16,r23
  80acf4:	00000106 	br	80acfc <___vfprintf_internal_r+0x18c>
  80acf8:	10c00326 	beq	r2,r3,80ad08 <___vfprintf_internal_r+0x198>
  80acfc:	84000044 	addi	r16,r16,1
  80ad00:	80800007 	ldb	r2,0(r16)
  80ad04:	103ffc1e 	bne	r2,zero,80acf8 <___vfprintf_internal_r+0x188>
  80ad08:	85e7c83a 	sub	r19,r16,r23
  80ad0c:	98000e26 	beq	r19,zero,80ad48 <___vfprintf_internal_r+0x1d8>
  80ad10:	dc800e17 	ldw	r18,56(sp)
  80ad14:	dc400d17 	ldw	r17,52(sp)
  80ad18:	008001c4 	movi	r2,7
  80ad1c:	94e5883a 	add	r18,r18,r19
  80ad20:	8c400044 	addi	r17,r17,1
  80ad24:	adc00015 	stw	r23,0(r21)
  80ad28:	dc800e15 	stw	r18,56(sp)
  80ad2c:	acc00115 	stw	r19,4(r21)
  80ad30:	dc400d15 	stw	r17,52(sp)
  80ad34:	14428b16 	blt	r2,r17,80b764 <___vfprintf_internal_r+0xbf4>
  80ad38:	ad400204 	addi	r21,r21,8
  80ad3c:	d9014b17 	ldw	r4,1324(sp)
  80ad40:	24c9883a 	add	r4,r4,r19
  80ad44:	d9014b15 	stw	r4,1324(sp)
  80ad48:	802f883a 	mov	r23,r16
  80ad4c:	b8800007 	ldb	r2,0(r23)
  80ad50:	10013c26 	beq	r2,zero,80b244 <___vfprintf_internal_r+0x6d4>
  80ad54:	bdc00044 	addi	r23,r23,1
  80ad58:	d8000405 	stb	zero,16(sp)
  80ad5c:	b8c00007 	ldb	r3,0(r23)
  80ad60:	04ffffc4 	movi	r19,-1
  80ad64:	d8014c15 	stw	zero,1328(sp)
  80ad68:	d8014a15 	stw	zero,1320(sp)
  80ad6c:	d8c14d15 	stw	r3,1332(sp)
  80ad70:	bdc00044 	addi	r23,r23,1
  80ad74:	d9414d17 	ldw	r5,1332(sp)
  80ad78:	00801604 	movi	r2,88
  80ad7c:	28fff804 	addi	r3,r5,-32
  80ad80:	10c06036 	bltu	r2,r3,80af04 <___vfprintf_internal_r+0x394>
  80ad84:	18c5883a 	add	r2,r3,r3
  80ad88:	1085883a 	add	r2,r2,r2
  80ad8c:	00c02074 	movhi	r3,129
  80ad90:	18eb6804 	addi	r3,r3,-21088
  80ad94:	10c5883a 	add	r2,r2,r3
  80ad98:	11000017 	ldw	r4,0(r2)
  80ad9c:	2000683a 	jmp	r4
  80ada0:	0080bd14 	movui	r2,756
  80ada4:	0080af04 	movi	r2,700
  80ada8:	0080af04 	movi	r2,700
  80adac:	0080bd00 	call	80bd0 <__reset-0x77f430>
  80adb0:	0080af04 	movi	r2,700
  80adb4:	0080af04 	movi	r2,700
  80adb8:	0080af04 	movi	r2,700
  80adbc:	0080af04 	movi	r2,700
  80adc0:	0080af04 	movi	r2,700
  80adc4:	0080af04 	movi	r2,700
  80adc8:	0080bae0 	cmpeqi	r2,zero,747
  80adcc:	0080bcf0 	cmpltui	r2,zero,755
  80add0:	0080af04 	movi	r2,700
  80add4:	0080baf8 	rdprs	r2,zero,747
  80add8:	0080bd8c 	andi	r2,zero,758
  80addc:	0080af04 	movi	r2,700
  80ade0:	0080bd78 	rdprs	r2,zero,757
  80ade4:	0080bd40 	call	80bd4 <__reset-0x77f42c>
  80ade8:	0080bd40 	call	80bd4 <__reset-0x77f42c>
  80adec:	0080bd40 	call	80bd4 <__reset-0x77f42c>
  80adf0:	0080bd40 	call	80bd4 <__reset-0x77f42c>
  80adf4:	0080bd40 	call	80bd4 <__reset-0x77f42c>
  80adf8:	0080bd40 	call	80bd4 <__reset-0x77f42c>
  80adfc:	0080bd40 	call	80bd4 <__reset-0x77f42c>
  80ae00:	0080bd40 	call	80bd4 <__reset-0x77f42c>
  80ae04:	0080bd40 	call	80bd4 <__reset-0x77f42c>
  80ae08:	0080af04 	movi	r2,700
  80ae0c:	0080af04 	movi	r2,700
  80ae10:	0080af04 	movi	r2,700
  80ae14:	0080af04 	movi	r2,700
  80ae18:	0080af04 	movi	r2,700
  80ae1c:	0080af04 	movi	r2,700
  80ae20:	0080af04 	movi	r2,700
  80ae24:	0080af04 	movi	r2,700
  80ae28:	0080af04 	movi	r2,700
  80ae2c:	0080af04 	movi	r2,700
  80ae30:	0080b55c 	xori	r2,zero,725
  80ae34:	0080bbc8 	cmpgei	r2,zero,751
  80ae38:	0080af04 	movi	r2,700
  80ae3c:	0080bbc8 	cmpgei	r2,zero,751
  80ae40:	0080af04 	movi	r2,700
  80ae44:	0080af04 	movi	r2,700
  80ae48:	0080af04 	movi	r2,700
  80ae4c:	0080af04 	movi	r2,700
  80ae50:	0080bd2c 	andhi	r2,zero,756
  80ae54:	0080af04 	movi	r2,700
  80ae58:	0080af04 	movi	r2,700
  80ae5c:	0080b610 	cmplti	r2,zero,728
  80ae60:	0080af04 	movi	r2,700
  80ae64:	0080af04 	movi	r2,700
  80ae68:	0080af04 	movi	r2,700
  80ae6c:	0080af04 	movi	r2,700
  80ae70:	0080af04 	movi	r2,700
  80ae74:	0080b65c 	xori	r2,zero,729
  80ae78:	0080af04 	movi	r2,700
  80ae7c:	0080af04 	movi	r2,700
  80ae80:	0080bc7c 	xorhi	r2,zero,753
  80ae84:	0080af04 	movi	r2,700
  80ae88:	0080af04 	movi	r2,700
  80ae8c:	0080af04 	movi	r2,700
  80ae90:	0080af04 	movi	r2,700
  80ae94:	0080af04 	movi	r2,700
  80ae98:	0080af04 	movi	r2,700
  80ae9c:	0080af04 	movi	r2,700
  80aea0:	0080af04 	movi	r2,700
  80aea4:	0080af04 	movi	r2,700
  80aea8:	0080af04 	movi	r2,700
  80aeac:	0080bc50 	cmplti	r2,zero,753
  80aeb0:	0080b568 	cmpgeui	r2,zero,725
  80aeb4:	0080bbc8 	cmpgei	r2,zero,751
  80aeb8:	0080bbc8 	cmpgei	r2,zero,751
  80aebc:	0080bbc8 	cmpgei	r2,zero,751
  80aec0:	0080bbb4 	movhi	r2,750
  80aec4:	0080b568 	cmpgeui	r2,zero,725
  80aec8:	0080af04 	movi	r2,700
  80aecc:	0080af04 	movi	r2,700
  80aed0:	0080bb3c 	xorhi	r2,zero,748
  80aed4:	0080af04 	movi	r2,700
  80aed8:	0080bb0c 	andi	r2,zero,748
  80aedc:	0080b61c 	xori	r2,zero,728
  80aee0:	0080bb6c 	andhi	r2,zero,749
  80aee4:	0080bb58 	cmpnei	r2,zero,749
  80aee8:	0080af04 	movi	r2,700
  80aeec:	0080bde8 	cmpgeui	r2,zero,759
  80aef0:	0080af04 	movi	r2,700
  80aef4:	0080b668 	cmpgeui	r2,zero,729
  80aef8:	0080af04 	movi	r2,700
  80aefc:	0080af04 	movi	r2,700
  80af00:	0080bce0 	cmpeqi	r2,zero,755
  80af04:	d9014d17 	ldw	r4,1332(sp)
  80af08:	2000ce26 	beq	r4,zero,80b244 <___vfprintf_internal_r+0x6d4>
  80af0c:	01400044 	movi	r5,1
  80af10:	d9800f04 	addi	r6,sp,60
  80af14:	d9c14015 	stw	r7,1280(sp)
  80af18:	d9414515 	stw	r5,1300(sp)
  80af1c:	d9814115 	stw	r6,1284(sp)
  80af20:	280f883a 	mov	r7,r5
  80af24:	d9000f05 	stb	r4,60(sp)
  80af28:	d8000405 	stb	zero,16(sp)
  80af2c:	d8014615 	stw	zero,1304(sp)
  80af30:	d8c14c17 	ldw	r3,1328(sp)
  80af34:	1880008c 	andi	r2,r3,2
  80af38:	1005003a 	cmpeq	r2,r2,zero
  80af3c:	d8815015 	stw	r2,1344(sp)
  80af40:	1000031e 	bne	r2,zero,80af50 <___vfprintf_internal_r+0x3e0>
  80af44:	d9014517 	ldw	r4,1300(sp)
  80af48:	21000084 	addi	r4,r4,2
  80af4c:	d9014515 	stw	r4,1300(sp)
  80af50:	d9414c17 	ldw	r5,1328(sp)
  80af54:	2940210c 	andi	r5,r5,132
  80af58:	d9414e15 	stw	r5,1336(sp)
  80af5c:	28002d1e 	bne	r5,zero,80b014 <___vfprintf_internal_r+0x4a4>
  80af60:	d9814a17 	ldw	r6,1320(sp)
  80af64:	d8814517 	ldw	r2,1300(sp)
  80af68:	30a1c83a 	sub	r16,r6,r2
  80af6c:	0400290e 	bge	zero,r16,80b014 <___vfprintf_internal_r+0x4a4>
  80af70:	00800404 	movi	r2,16
  80af74:	1404580e 	bge	r2,r16,80c0d8 <___vfprintf_internal_r+0x1568>
  80af78:	dc800e17 	ldw	r18,56(sp)
  80af7c:	dc400d17 	ldw	r17,52(sp)
  80af80:	1027883a 	mov	r19,r2
  80af84:	070020b4 	movhi	fp,130
  80af88:	e734b384 	addi	fp,fp,-11570
  80af8c:	050001c4 	movi	r20,7
  80af90:	00000306 	br	80afa0 <___vfprintf_internal_r+0x430>
  80af94:	843ffc04 	addi	r16,r16,-16
  80af98:	ad400204 	addi	r21,r21,8
  80af9c:	9c00130e 	bge	r19,r16,80afec <___vfprintf_internal_r+0x47c>
  80afa0:	94800404 	addi	r18,r18,16
  80afa4:	8c400044 	addi	r17,r17,1
  80afa8:	af000015 	stw	fp,0(r21)
  80afac:	acc00115 	stw	r19,4(r21)
  80afb0:	dc800e15 	stw	r18,56(sp)
  80afb4:	dc400d15 	stw	r17,52(sp)
  80afb8:	a47ff60e 	bge	r20,r17,80af94 <___vfprintf_internal_r+0x424>
  80afbc:	d9014f17 	ldw	r4,1340(sp)
  80afc0:	b00b883a 	mov	r5,r22
  80afc4:	d9800c04 	addi	r6,sp,48
  80afc8:	d9c15115 	stw	r7,1348(sp)
  80afcc:	080ab180 	call	80ab18 <__sprint_r>
  80afd0:	d9c15117 	ldw	r7,1348(sp)
  80afd4:	10009e1e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80afd8:	843ffc04 	addi	r16,r16,-16
  80afdc:	dc800e17 	ldw	r18,56(sp)
  80afe0:	dc400d17 	ldw	r17,52(sp)
  80afe4:	dd401904 	addi	r21,sp,100
  80afe8:	9c3fed16 	blt	r19,r16,80afa0 <___vfprintf_internal_r+0x430>
  80afec:	9425883a 	add	r18,r18,r16
  80aff0:	8c400044 	addi	r17,r17,1
  80aff4:	008001c4 	movi	r2,7
  80aff8:	af000015 	stw	fp,0(r21)
  80affc:	ac000115 	stw	r16,4(r21)
  80b000:	dc800e15 	stw	r18,56(sp)
  80b004:	dc400d15 	stw	r17,52(sp)
  80b008:	1441f516 	blt	r2,r17,80b7e0 <___vfprintf_internal_r+0xc70>
  80b00c:	ad400204 	addi	r21,r21,8
  80b010:	00000206 	br	80b01c <___vfprintf_internal_r+0x4ac>
  80b014:	dc800e17 	ldw	r18,56(sp)
  80b018:	dc400d17 	ldw	r17,52(sp)
  80b01c:	d8800407 	ldb	r2,16(sp)
  80b020:	10000b26 	beq	r2,zero,80b050 <___vfprintf_internal_r+0x4e0>
  80b024:	00800044 	movi	r2,1
  80b028:	94800044 	addi	r18,r18,1
  80b02c:	8c400044 	addi	r17,r17,1
  80b030:	a8800115 	stw	r2,4(r21)
  80b034:	d8c00404 	addi	r3,sp,16
  80b038:	008001c4 	movi	r2,7
  80b03c:	a8c00015 	stw	r3,0(r21)
  80b040:	dc800e15 	stw	r18,56(sp)
  80b044:	dc400d15 	stw	r17,52(sp)
  80b048:	1441da16 	blt	r2,r17,80b7b4 <___vfprintf_internal_r+0xc44>
  80b04c:	ad400204 	addi	r21,r21,8
  80b050:	d9015017 	ldw	r4,1344(sp)
  80b054:	20000b1e 	bne	r4,zero,80b084 <___vfprintf_internal_r+0x514>
  80b058:	d8800444 	addi	r2,sp,17
  80b05c:	94800084 	addi	r18,r18,2
  80b060:	8c400044 	addi	r17,r17,1
  80b064:	a8800015 	stw	r2,0(r21)
  80b068:	00c00084 	movi	r3,2
  80b06c:	008001c4 	movi	r2,7
  80b070:	a8c00115 	stw	r3,4(r21)
  80b074:	dc800e15 	stw	r18,56(sp)
  80b078:	dc400d15 	stw	r17,52(sp)
  80b07c:	1441c216 	blt	r2,r17,80b788 <___vfprintf_internal_r+0xc18>
  80b080:	ad400204 	addi	r21,r21,8
  80b084:	d9414e17 	ldw	r5,1336(sp)
  80b088:	00802004 	movi	r2,128
  80b08c:	2880b126 	beq	r5,r2,80b354 <___vfprintf_internal_r+0x7e4>
  80b090:	d8c14617 	ldw	r3,1304(sp)
  80b094:	19e1c83a 	sub	r16,r3,r7
  80b098:	0400260e 	bge	zero,r16,80b134 <___vfprintf_internal_r+0x5c4>
  80b09c:	00800404 	movi	r2,16
  80b0a0:	1403c90e 	bge	r2,r16,80bfc8 <___vfprintf_internal_r+0x1458>
  80b0a4:	1027883a 	mov	r19,r2
  80b0a8:	070020b4 	movhi	fp,130
  80b0ac:	e734af84 	addi	fp,fp,-11586
  80b0b0:	050001c4 	movi	r20,7
  80b0b4:	00000306 	br	80b0c4 <___vfprintf_internal_r+0x554>
  80b0b8:	843ffc04 	addi	r16,r16,-16
  80b0bc:	ad400204 	addi	r21,r21,8
  80b0c0:	9c00130e 	bge	r19,r16,80b110 <___vfprintf_internal_r+0x5a0>
  80b0c4:	94800404 	addi	r18,r18,16
  80b0c8:	8c400044 	addi	r17,r17,1
  80b0cc:	af000015 	stw	fp,0(r21)
  80b0d0:	acc00115 	stw	r19,4(r21)
  80b0d4:	dc800e15 	stw	r18,56(sp)
  80b0d8:	dc400d15 	stw	r17,52(sp)
  80b0dc:	a47ff60e 	bge	r20,r17,80b0b8 <___vfprintf_internal_r+0x548>
  80b0e0:	d9014f17 	ldw	r4,1340(sp)
  80b0e4:	b00b883a 	mov	r5,r22
  80b0e8:	d9800c04 	addi	r6,sp,48
  80b0ec:	d9c15115 	stw	r7,1348(sp)
  80b0f0:	080ab180 	call	80ab18 <__sprint_r>
  80b0f4:	d9c15117 	ldw	r7,1348(sp)
  80b0f8:	1000551e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80b0fc:	843ffc04 	addi	r16,r16,-16
  80b100:	dc800e17 	ldw	r18,56(sp)
  80b104:	dc400d17 	ldw	r17,52(sp)
  80b108:	dd401904 	addi	r21,sp,100
  80b10c:	9c3fed16 	blt	r19,r16,80b0c4 <___vfprintf_internal_r+0x554>
  80b110:	9425883a 	add	r18,r18,r16
  80b114:	8c400044 	addi	r17,r17,1
  80b118:	008001c4 	movi	r2,7
  80b11c:	af000015 	stw	fp,0(r21)
  80b120:	ac000115 	stw	r16,4(r21)
  80b124:	dc800e15 	stw	r18,56(sp)
  80b128:	dc400d15 	stw	r17,52(sp)
  80b12c:	14418216 	blt	r2,r17,80b738 <___vfprintf_internal_r+0xbc8>
  80b130:	ad400204 	addi	r21,r21,8
  80b134:	d9014c17 	ldw	r4,1328(sp)
  80b138:	2080400c 	andi	r2,r4,256
  80b13c:	10004a1e 	bne	r2,zero,80b268 <___vfprintf_internal_r+0x6f8>
  80b140:	d9414117 	ldw	r5,1284(sp)
  80b144:	91e5883a 	add	r18,r18,r7
  80b148:	8c400044 	addi	r17,r17,1
  80b14c:	008001c4 	movi	r2,7
  80b150:	a9400015 	stw	r5,0(r21)
  80b154:	a9c00115 	stw	r7,4(r21)
  80b158:	dc800e15 	stw	r18,56(sp)
  80b15c:	dc400d15 	stw	r17,52(sp)
  80b160:	14416716 	blt	r2,r17,80b700 <___vfprintf_internal_r+0xb90>
  80b164:	a8c00204 	addi	r3,r21,8
  80b168:	d9814c17 	ldw	r6,1328(sp)
  80b16c:	3080010c 	andi	r2,r6,4
  80b170:	10002826 	beq	r2,zero,80b214 <___vfprintf_internal_r+0x6a4>
  80b174:	d8814a17 	ldw	r2,1320(sp)
  80b178:	d9014517 	ldw	r4,1300(sp)
  80b17c:	1121c83a 	sub	r16,r2,r4
  80b180:	0400240e 	bge	zero,r16,80b214 <___vfprintf_internal_r+0x6a4>
  80b184:	00800404 	movi	r2,16
  80b188:	14044f0e 	bge	r2,r16,80c2c8 <___vfprintf_internal_r+0x1758>
  80b18c:	dc400d17 	ldw	r17,52(sp)
  80b190:	1027883a 	mov	r19,r2
  80b194:	070020b4 	movhi	fp,130
  80b198:	e734b384 	addi	fp,fp,-11570
  80b19c:	050001c4 	movi	r20,7
  80b1a0:	00000306 	br	80b1b0 <___vfprintf_internal_r+0x640>
  80b1a4:	843ffc04 	addi	r16,r16,-16
  80b1a8:	18c00204 	addi	r3,r3,8
  80b1ac:	9c00110e 	bge	r19,r16,80b1f4 <___vfprintf_internal_r+0x684>
  80b1b0:	94800404 	addi	r18,r18,16
  80b1b4:	8c400044 	addi	r17,r17,1
  80b1b8:	1f000015 	stw	fp,0(r3)
  80b1bc:	1cc00115 	stw	r19,4(r3)
  80b1c0:	dc800e15 	stw	r18,56(sp)
  80b1c4:	dc400d15 	stw	r17,52(sp)
  80b1c8:	a47ff60e 	bge	r20,r17,80b1a4 <___vfprintf_internal_r+0x634>
  80b1cc:	d9014f17 	ldw	r4,1340(sp)
  80b1d0:	b00b883a 	mov	r5,r22
  80b1d4:	d9800c04 	addi	r6,sp,48
  80b1d8:	080ab180 	call	80ab18 <__sprint_r>
  80b1dc:	10001c1e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80b1e0:	843ffc04 	addi	r16,r16,-16
  80b1e4:	dc800e17 	ldw	r18,56(sp)
  80b1e8:	dc400d17 	ldw	r17,52(sp)
  80b1ec:	d8c01904 	addi	r3,sp,100
  80b1f0:	9c3fef16 	blt	r19,r16,80b1b0 <___vfprintf_internal_r+0x640>
  80b1f4:	9425883a 	add	r18,r18,r16
  80b1f8:	8c400044 	addi	r17,r17,1
  80b1fc:	008001c4 	movi	r2,7
  80b200:	1f000015 	stw	fp,0(r3)
  80b204:	1c000115 	stw	r16,4(r3)
  80b208:	dc800e15 	stw	r18,56(sp)
  80b20c:	dc400d15 	stw	r17,52(sp)
  80b210:	1440cb16 	blt	r2,r17,80b540 <___vfprintf_internal_r+0x9d0>
  80b214:	d8814a17 	ldw	r2,1320(sp)
  80b218:	d9414517 	ldw	r5,1300(sp)
  80b21c:	1140010e 	bge	r2,r5,80b224 <___vfprintf_internal_r+0x6b4>
  80b220:	2805883a 	mov	r2,r5
  80b224:	d9814b17 	ldw	r6,1324(sp)
  80b228:	308d883a 	add	r6,r6,r2
  80b22c:	d9814b15 	stw	r6,1324(sp)
  80b230:	90013b1e 	bne	r18,zero,80b720 <___vfprintf_internal_r+0xbb0>
  80b234:	d9c14017 	ldw	r7,1280(sp)
  80b238:	dd401904 	addi	r21,sp,100
  80b23c:	d8000d15 	stw	zero,52(sp)
  80b240:	003ea706 	br	80ace0 <___vfprintf_internal_r+0x170>
  80b244:	d8800e17 	ldw	r2,56(sp)
  80b248:	10053f1e 	bne	r2,zero,80c748 <___vfprintf_internal_r+0x1bd8>
  80b24c:	d8000d15 	stw	zero,52(sp)
  80b250:	b080030b 	ldhu	r2,12(r22)
  80b254:	1080100c 	andi	r2,r2,64
  80b258:	103e8726 	beq	r2,zero,80ac78 <___vfprintf_internal_r+0x108>
  80b25c:	00bfffc4 	movi	r2,-1
  80b260:	d8814b15 	stw	r2,1324(sp)
  80b264:	003e8406 	br	80ac78 <___vfprintf_internal_r+0x108>
  80b268:	d9814d17 	ldw	r6,1332(sp)
  80b26c:	00801944 	movi	r2,101
  80b270:	11806e16 	blt	r2,r6,80b42c <___vfprintf_internal_r+0x8bc>
  80b274:	d9414717 	ldw	r5,1308(sp)
  80b278:	00c00044 	movi	r3,1
  80b27c:	1943430e 	bge	r3,r5,80bf8c <___vfprintf_internal_r+0x141c>
  80b280:	d8814117 	ldw	r2,1284(sp)
  80b284:	94800044 	addi	r18,r18,1
  80b288:	8c400044 	addi	r17,r17,1
  80b28c:	a8800015 	stw	r2,0(r21)
  80b290:	008001c4 	movi	r2,7
  80b294:	a8c00115 	stw	r3,4(r21)
  80b298:	dc800e15 	stw	r18,56(sp)
  80b29c:	dc400d15 	stw	r17,52(sp)
  80b2a0:	1441ca16 	blt	r2,r17,80b9cc <___vfprintf_internal_r+0xe5c>
  80b2a4:	a8c00204 	addi	r3,r21,8
  80b2a8:	d9014917 	ldw	r4,1316(sp)
  80b2ac:	00800044 	movi	r2,1
  80b2b0:	94800044 	addi	r18,r18,1
  80b2b4:	8c400044 	addi	r17,r17,1
  80b2b8:	18800115 	stw	r2,4(r3)
  80b2bc:	008001c4 	movi	r2,7
  80b2c0:	19000015 	stw	r4,0(r3)
  80b2c4:	dc800e15 	stw	r18,56(sp)
  80b2c8:	dc400d15 	stw	r17,52(sp)
  80b2cc:	1441b616 	blt	r2,r17,80b9a8 <___vfprintf_internal_r+0xe38>
  80b2d0:	1cc00204 	addi	r19,r3,8
  80b2d4:	d9014217 	ldw	r4,1288(sp)
  80b2d8:	d9414317 	ldw	r5,1292(sp)
  80b2dc:	000d883a 	mov	r6,zero
  80b2e0:	000f883a 	mov	r7,zero
  80b2e4:	08092d80 	call	8092d8 <__nedf2>
  80b2e8:	10017426 	beq	r2,zero,80b8bc <___vfprintf_internal_r+0xd4c>
  80b2ec:	d9414717 	ldw	r5,1308(sp)
  80b2f0:	d9814117 	ldw	r6,1284(sp)
  80b2f4:	8c400044 	addi	r17,r17,1
  80b2f8:	2c85883a 	add	r2,r5,r18
  80b2fc:	14bfffc4 	addi	r18,r2,-1
  80b300:	28bfffc4 	addi	r2,r5,-1
  80b304:	30c00044 	addi	r3,r6,1
  80b308:	98800115 	stw	r2,4(r19)
  80b30c:	008001c4 	movi	r2,7
  80b310:	98c00015 	stw	r3,0(r19)
  80b314:	dc800e15 	stw	r18,56(sp)
  80b318:	dc400d15 	stw	r17,52(sp)
  80b31c:	14418e16 	blt	r2,r17,80b958 <___vfprintf_internal_r+0xde8>
  80b320:	9cc00204 	addi	r19,r19,8
  80b324:	d9414817 	ldw	r5,1312(sp)
  80b328:	d8800804 	addi	r2,sp,32
  80b32c:	8c400044 	addi	r17,r17,1
  80b330:	9165883a 	add	r18,r18,r5
  80b334:	98800015 	stw	r2,0(r19)
  80b338:	008001c4 	movi	r2,7
  80b33c:	99400115 	stw	r5,4(r19)
  80b340:	dc800e15 	stw	r18,56(sp)
  80b344:	dc400d15 	stw	r17,52(sp)
  80b348:	1440ed16 	blt	r2,r17,80b700 <___vfprintf_internal_r+0xb90>
  80b34c:	98c00204 	addi	r3,r19,8
  80b350:	003f8506 	br	80b168 <___vfprintf_internal_r+0x5f8>
  80b354:	d9814a17 	ldw	r6,1320(sp)
  80b358:	d8814517 	ldw	r2,1300(sp)
  80b35c:	30a1c83a 	sub	r16,r6,r2
  80b360:	043f4b0e 	bge	zero,r16,80b090 <___vfprintf_internal_r+0x520>
  80b364:	00800404 	movi	r2,16
  80b368:	1404340e 	bge	r2,r16,80c43c <___vfprintf_internal_r+0x18cc>
  80b36c:	1027883a 	mov	r19,r2
  80b370:	070020b4 	movhi	fp,130
  80b374:	e734af84 	addi	fp,fp,-11586
  80b378:	050001c4 	movi	r20,7
  80b37c:	00000306 	br	80b38c <___vfprintf_internal_r+0x81c>
  80b380:	843ffc04 	addi	r16,r16,-16
  80b384:	ad400204 	addi	r21,r21,8
  80b388:	9c00130e 	bge	r19,r16,80b3d8 <___vfprintf_internal_r+0x868>
  80b38c:	94800404 	addi	r18,r18,16
  80b390:	8c400044 	addi	r17,r17,1
  80b394:	af000015 	stw	fp,0(r21)
  80b398:	acc00115 	stw	r19,4(r21)
  80b39c:	dc800e15 	stw	r18,56(sp)
  80b3a0:	dc400d15 	stw	r17,52(sp)
  80b3a4:	a47ff60e 	bge	r20,r17,80b380 <___vfprintf_internal_r+0x810>
  80b3a8:	d9014f17 	ldw	r4,1340(sp)
  80b3ac:	b00b883a 	mov	r5,r22
  80b3b0:	d9800c04 	addi	r6,sp,48
  80b3b4:	d9c15115 	stw	r7,1348(sp)
  80b3b8:	080ab180 	call	80ab18 <__sprint_r>
  80b3bc:	d9c15117 	ldw	r7,1348(sp)
  80b3c0:	103fa31e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80b3c4:	843ffc04 	addi	r16,r16,-16
  80b3c8:	dc800e17 	ldw	r18,56(sp)
  80b3cc:	dc400d17 	ldw	r17,52(sp)
  80b3d0:	dd401904 	addi	r21,sp,100
  80b3d4:	9c3fed16 	blt	r19,r16,80b38c <___vfprintf_internal_r+0x81c>
  80b3d8:	9425883a 	add	r18,r18,r16
  80b3dc:	8c400044 	addi	r17,r17,1
  80b3e0:	008001c4 	movi	r2,7
  80b3e4:	af000015 	stw	fp,0(r21)
  80b3e8:	ac000115 	stw	r16,4(r21)
  80b3ec:	dc800e15 	stw	r18,56(sp)
  80b3f0:	dc400d15 	stw	r17,52(sp)
  80b3f4:	14416116 	blt	r2,r17,80b97c <___vfprintf_internal_r+0xe0c>
  80b3f8:	ad400204 	addi	r21,r21,8
  80b3fc:	003f2406 	br	80b090 <___vfprintf_internal_r+0x520>
  80b400:	d9014f17 	ldw	r4,1340(sp)
  80b404:	080e5e00 	call	80e5e0 <__sinit>
  80b408:	d9c15117 	ldw	r7,1348(sp)
  80b40c:	003def06 	br	80abcc <___vfprintf_internal_r+0x5c>
  80b410:	d9014f17 	ldw	r4,1340(sp)
  80b414:	b00b883a 	mov	r5,r22
  80b418:	d9c15115 	stw	r7,1348(sp)
  80b41c:	080ca400 	call	80ca40 <__swsetup_r>
  80b420:	d9c15117 	ldw	r7,1348(sp)
  80b424:	103dee26 	beq	r2,zero,80abe0 <___vfprintf_internal_r+0x70>
  80b428:	003f8c06 	br	80b25c <___vfprintf_internal_r+0x6ec>
  80b42c:	d9014217 	ldw	r4,1288(sp)
  80b430:	d9414317 	ldw	r5,1292(sp)
  80b434:	000d883a 	mov	r6,zero
  80b438:	000f883a 	mov	r7,zero
  80b43c:	08092500 	call	809250 <__eqdf2>
  80b440:	1000f21e 	bne	r2,zero,80b80c <___vfprintf_internal_r+0xc9c>
  80b444:	008020b4 	movhi	r2,130
  80b448:	10b4af04 	addi	r2,r2,-11588
  80b44c:	94800044 	addi	r18,r18,1
  80b450:	8c400044 	addi	r17,r17,1
  80b454:	a8800015 	stw	r2,0(r21)
  80b458:	00c00044 	movi	r3,1
  80b45c:	008001c4 	movi	r2,7
  80b460:	a8c00115 	stw	r3,4(r21)
  80b464:	dc800e15 	stw	r18,56(sp)
  80b468:	dc400d15 	stw	r17,52(sp)
  80b46c:	1442fa16 	blt	r2,r17,80c058 <___vfprintf_internal_r+0x14e8>
  80b470:	a8c00204 	addi	r3,r21,8
  80b474:	d8800517 	ldw	r2,20(sp)
  80b478:	d9014717 	ldw	r4,1308(sp)
  80b47c:	11015c0e 	bge	r2,r4,80b9f0 <___vfprintf_internal_r+0xe80>
  80b480:	dc400d17 	ldw	r17,52(sp)
  80b484:	d9814917 	ldw	r6,1316(sp)
  80b488:	00800044 	movi	r2,1
  80b48c:	94800044 	addi	r18,r18,1
  80b490:	8c400044 	addi	r17,r17,1
  80b494:	18800115 	stw	r2,4(r3)
  80b498:	008001c4 	movi	r2,7
  80b49c:	19800015 	stw	r6,0(r3)
  80b4a0:	dc800e15 	stw	r18,56(sp)
  80b4a4:	dc400d15 	stw	r17,52(sp)
  80b4a8:	14431016 	blt	r2,r17,80c0ec <___vfprintf_internal_r+0x157c>
  80b4ac:	18c00204 	addi	r3,r3,8
  80b4b0:	d8814717 	ldw	r2,1308(sp)
  80b4b4:	143fffc4 	addi	r16,r2,-1
  80b4b8:	043f2b0e 	bge	zero,r16,80b168 <___vfprintf_internal_r+0x5f8>
  80b4bc:	00800404 	movi	r2,16
  80b4c0:	1402a20e 	bge	r2,r16,80bf4c <___vfprintf_internal_r+0x13dc>
  80b4c4:	dc400d17 	ldw	r17,52(sp)
  80b4c8:	1027883a 	mov	r19,r2
  80b4cc:	070020b4 	movhi	fp,130
  80b4d0:	e734af84 	addi	fp,fp,-11586
  80b4d4:	050001c4 	movi	r20,7
  80b4d8:	00000306 	br	80b4e8 <___vfprintf_internal_r+0x978>
  80b4dc:	18c00204 	addi	r3,r3,8
  80b4e0:	843ffc04 	addi	r16,r16,-16
  80b4e4:	9c029c0e 	bge	r19,r16,80bf58 <___vfprintf_internal_r+0x13e8>
  80b4e8:	94800404 	addi	r18,r18,16
  80b4ec:	8c400044 	addi	r17,r17,1
  80b4f0:	1f000015 	stw	fp,0(r3)
  80b4f4:	1cc00115 	stw	r19,4(r3)
  80b4f8:	dc800e15 	stw	r18,56(sp)
  80b4fc:	dc400d15 	stw	r17,52(sp)
  80b500:	a47ff60e 	bge	r20,r17,80b4dc <___vfprintf_internal_r+0x96c>
  80b504:	d9014f17 	ldw	r4,1340(sp)
  80b508:	b00b883a 	mov	r5,r22
  80b50c:	d9800c04 	addi	r6,sp,48
  80b510:	080ab180 	call	80ab18 <__sprint_r>
  80b514:	103f4e1e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80b518:	dc800e17 	ldw	r18,56(sp)
  80b51c:	dc400d17 	ldw	r17,52(sp)
  80b520:	d8c01904 	addi	r3,sp,100
  80b524:	003fee06 	br	80b4e0 <___vfprintf_internal_r+0x970>
  80b528:	d8802c0b 	ldhu	r2,176(sp)
  80b52c:	00ffffc4 	movi	r3,-1
  80b530:	d8c14b15 	stw	r3,1324(sp)
  80b534:	1080100c 	andi	r2,r2,64
  80b538:	103dcc1e 	bne	r2,zero,80ac6c <___vfprintf_internal_r+0xfc>
  80b53c:	003dce06 	br	80ac78 <___vfprintf_internal_r+0x108>
  80b540:	d9014f17 	ldw	r4,1340(sp)
  80b544:	b00b883a 	mov	r5,r22
  80b548:	d9800c04 	addi	r6,sp,48
  80b54c:	080ab180 	call	80ab18 <__sprint_r>
  80b550:	103f3f1e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80b554:	dc800e17 	ldw	r18,56(sp)
  80b558:	003f2e06 	br	80b214 <___vfprintf_internal_r+0x6a4>
  80b55c:	d9414c17 	ldw	r5,1328(sp)
  80b560:	29400414 	ori	r5,r5,16
  80b564:	d9414c15 	stw	r5,1328(sp)
  80b568:	d9814c17 	ldw	r6,1328(sp)
  80b56c:	3080080c 	andi	r2,r6,32
  80b570:	10014f1e 	bne	r2,zero,80bab0 <___vfprintf_internal_r+0xf40>
  80b574:	d8c14c17 	ldw	r3,1328(sp)
  80b578:	1880040c 	andi	r2,r3,16
  80b57c:	1002ea1e 	bne	r2,zero,80c128 <___vfprintf_internal_r+0x15b8>
  80b580:	d9014c17 	ldw	r4,1328(sp)
  80b584:	2080100c 	andi	r2,r4,64
  80b588:	1002e726 	beq	r2,zero,80c128 <___vfprintf_internal_r+0x15b8>
  80b58c:	3880000f 	ldh	r2,0(r7)
  80b590:	39c00104 	addi	r7,r7,4
  80b594:	d9c14015 	stw	r7,1280(sp)
  80b598:	1023d7fa 	srai	r17,r2,31
  80b59c:	1021883a 	mov	r16,r2
  80b5a0:	88037216 	blt	r17,zero,80c36c <___vfprintf_internal_r+0x17fc>
  80b5a4:	01000044 	movi	r4,1
  80b5a8:	98000416 	blt	r19,zero,80b5bc <___vfprintf_internal_r+0xa4c>
  80b5ac:	d8c14c17 	ldw	r3,1328(sp)
  80b5b0:	00bfdfc4 	movi	r2,-129
  80b5b4:	1886703a 	and	r3,r3,r2
  80b5b8:	d8c14c15 	stw	r3,1328(sp)
  80b5bc:	8444b03a 	or	r2,r16,r17
  80b5c0:	1002261e 	bne	r2,zero,80be5c <___vfprintf_internal_r+0x12ec>
  80b5c4:	9802251e 	bne	r19,zero,80be5c <___vfprintf_internal_r+0x12ec>
  80b5c8:	20803fcc 	andi	r2,r4,255
  80b5cc:	10029b26 	beq	r2,zero,80c03c <___vfprintf_internal_r+0x14cc>
  80b5d0:	d8c01904 	addi	r3,sp,100
  80b5d4:	dd000f04 	addi	r20,sp,60
  80b5d8:	d8c14115 	stw	r3,1284(sp)
  80b5dc:	d8c14117 	ldw	r3,1284(sp)
  80b5e0:	dcc14515 	stw	r19,1300(sp)
  80b5e4:	a0c5c83a 	sub	r2,r20,r3
  80b5e8:	11c00a04 	addi	r7,r2,40
  80b5ec:	99c0010e 	bge	r19,r7,80b5f4 <___vfprintf_internal_r+0xa84>
  80b5f0:	d9c14515 	stw	r7,1300(sp)
  80b5f4:	dcc14615 	stw	r19,1304(sp)
  80b5f8:	d8800407 	ldb	r2,16(sp)
  80b5fc:	103e4c26 	beq	r2,zero,80af30 <___vfprintf_internal_r+0x3c0>
  80b600:	d8814517 	ldw	r2,1300(sp)
  80b604:	10800044 	addi	r2,r2,1
  80b608:	d8814515 	stw	r2,1300(sp)
  80b60c:	003e4806 	br	80af30 <___vfprintf_internal_r+0x3c0>
  80b610:	d9814c17 	ldw	r6,1328(sp)
  80b614:	31800414 	ori	r6,r6,16
  80b618:	d9814c15 	stw	r6,1328(sp)
  80b61c:	d8c14c17 	ldw	r3,1328(sp)
  80b620:	1880080c 	andi	r2,r3,32
  80b624:	1001271e 	bne	r2,zero,80bac4 <___vfprintf_internal_r+0xf54>
  80b628:	d9414c17 	ldw	r5,1328(sp)
  80b62c:	2880040c 	andi	r2,r5,16
  80b630:	1002b61e 	bne	r2,zero,80c10c <___vfprintf_internal_r+0x159c>
  80b634:	d9814c17 	ldw	r6,1328(sp)
  80b638:	3080100c 	andi	r2,r6,64
  80b63c:	1002b326 	beq	r2,zero,80c10c <___vfprintf_internal_r+0x159c>
  80b640:	3c00000b 	ldhu	r16,0(r7)
  80b644:	0009883a 	mov	r4,zero
  80b648:	39c00104 	addi	r7,r7,4
  80b64c:	0023883a 	mov	r17,zero
  80b650:	d9c14015 	stw	r7,1280(sp)
  80b654:	d8000405 	stb	zero,16(sp)
  80b658:	003fd306 	br	80b5a8 <___vfprintf_internal_r+0xa38>
  80b65c:	d9014c17 	ldw	r4,1328(sp)
  80b660:	21000414 	ori	r4,r4,16
  80b664:	d9014c15 	stw	r4,1328(sp)
  80b668:	d9414c17 	ldw	r5,1328(sp)
  80b66c:	2880080c 	andi	r2,r5,32
  80b670:	1001081e 	bne	r2,zero,80ba94 <___vfprintf_internal_r+0xf24>
  80b674:	d8c14c17 	ldw	r3,1328(sp)
  80b678:	1880040c 	andi	r2,r3,16
  80b67c:	1002b01e 	bne	r2,zero,80c140 <___vfprintf_internal_r+0x15d0>
  80b680:	d9014c17 	ldw	r4,1328(sp)
  80b684:	2080100c 	andi	r2,r4,64
  80b688:	1002ad26 	beq	r2,zero,80c140 <___vfprintf_internal_r+0x15d0>
  80b68c:	3c00000b 	ldhu	r16,0(r7)
  80b690:	01000044 	movi	r4,1
  80b694:	39c00104 	addi	r7,r7,4
  80b698:	0023883a 	mov	r17,zero
  80b69c:	d9c14015 	stw	r7,1280(sp)
  80b6a0:	d8000405 	stb	zero,16(sp)
  80b6a4:	003fc006 	br	80b5a8 <___vfprintf_internal_r+0xa38>
  80b6a8:	d9014f17 	ldw	r4,1340(sp)
  80b6ac:	b00b883a 	mov	r5,r22
  80b6b0:	d9800c04 	addi	r6,sp,48
  80b6b4:	080ab180 	call	80ab18 <__sprint_r>
  80b6b8:	103ee51e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80b6bc:	dc800e17 	ldw	r18,56(sp)
  80b6c0:	d8c01904 	addi	r3,sp,100
  80b6c4:	d9814c17 	ldw	r6,1328(sp)
  80b6c8:	3080004c 	andi	r2,r6,1
  80b6cc:	1005003a 	cmpeq	r2,r2,zero
  80b6d0:	103ea51e 	bne	r2,zero,80b168 <___vfprintf_internal_r+0x5f8>
  80b6d4:	00800044 	movi	r2,1
  80b6d8:	dc400d17 	ldw	r17,52(sp)
  80b6dc:	18800115 	stw	r2,4(r3)
  80b6e0:	d8814917 	ldw	r2,1316(sp)
  80b6e4:	94800044 	addi	r18,r18,1
  80b6e8:	8c400044 	addi	r17,r17,1
  80b6ec:	18800015 	stw	r2,0(r3)
  80b6f0:	008001c4 	movi	r2,7
  80b6f4:	dc800e15 	stw	r18,56(sp)
  80b6f8:	dc400d15 	stw	r17,52(sp)
  80b6fc:	14421e0e 	bge	r2,r17,80bf78 <___vfprintf_internal_r+0x1408>
  80b700:	d9014f17 	ldw	r4,1340(sp)
  80b704:	b00b883a 	mov	r5,r22
  80b708:	d9800c04 	addi	r6,sp,48
  80b70c:	080ab180 	call	80ab18 <__sprint_r>
  80b710:	103ecf1e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80b714:	dc800e17 	ldw	r18,56(sp)
  80b718:	d8c01904 	addi	r3,sp,100
  80b71c:	003e9206 	br	80b168 <___vfprintf_internal_r+0x5f8>
  80b720:	d9014f17 	ldw	r4,1340(sp)
  80b724:	b00b883a 	mov	r5,r22
  80b728:	d9800c04 	addi	r6,sp,48
  80b72c:	080ab180 	call	80ab18 <__sprint_r>
  80b730:	103ec026 	beq	r2,zero,80b234 <___vfprintf_internal_r+0x6c4>
  80b734:	003ec606 	br	80b250 <___vfprintf_internal_r+0x6e0>
  80b738:	d9014f17 	ldw	r4,1340(sp)
  80b73c:	b00b883a 	mov	r5,r22
  80b740:	d9800c04 	addi	r6,sp,48
  80b744:	d9c15115 	stw	r7,1348(sp)
  80b748:	080ab180 	call	80ab18 <__sprint_r>
  80b74c:	d9c15117 	ldw	r7,1348(sp)
  80b750:	103ebf1e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80b754:	dc800e17 	ldw	r18,56(sp)
  80b758:	dc400d17 	ldw	r17,52(sp)
  80b75c:	dd401904 	addi	r21,sp,100
  80b760:	003e7406 	br	80b134 <___vfprintf_internal_r+0x5c4>
  80b764:	d9014f17 	ldw	r4,1340(sp)
  80b768:	b00b883a 	mov	r5,r22
  80b76c:	d9800c04 	addi	r6,sp,48
  80b770:	d9c15115 	stw	r7,1348(sp)
  80b774:	080ab180 	call	80ab18 <__sprint_r>
  80b778:	d9c15117 	ldw	r7,1348(sp)
  80b77c:	103eb41e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80b780:	dd401904 	addi	r21,sp,100
  80b784:	003d6d06 	br	80ad3c <___vfprintf_internal_r+0x1cc>
  80b788:	d9014f17 	ldw	r4,1340(sp)
  80b78c:	b00b883a 	mov	r5,r22
  80b790:	d9800c04 	addi	r6,sp,48
  80b794:	d9c15115 	stw	r7,1348(sp)
  80b798:	080ab180 	call	80ab18 <__sprint_r>
  80b79c:	d9c15117 	ldw	r7,1348(sp)
  80b7a0:	103eab1e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80b7a4:	dc800e17 	ldw	r18,56(sp)
  80b7a8:	dc400d17 	ldw	r17,52(sp)
  80b7ac:	dd401904 	addi	r21,sp,100
  80b7b0:	003e3406 	br	80b084 <___vfprintf_internal_r+0x514>
  80b7b4:	d9014f17 	ldw	r4,1340(sp)
  80b7b8:	b00b883a 	mov	r5,r22
  80b7bc:	d9800c04 	addi	r6,sp,48
  80b7c0:	d9c15115 	stw	r7,1348(sp)
  80b7c4:	080ab180 	call	80ab18 <__sprint_r>
  80b7c8:	d9c15117 	ldw	r7,1348(sp)
  80b7cc:	103ea01e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80b7d0:	dc800e17 	ldw	r18,56(sp)
  80b7d4:	dc400d17 	ldw	r17,52(sp)
  80b7d8:	dd401904 	addi	r21,sp,100
  80b7dc:	003e1c06 	br	80b050 <___vfprintf_internal_r+0x4e0>
  80b7e0:	d9014f17 	ldw	r4,1340(sp)
  80b7e4:	b00b883a 	mov	r5,r22
  80b7e8:	d9800c04 	addi	r6,sp,48
  80b7ec:	d9c15115 	stw	r7,1348(sp)
  80b7f0:	080ab180 	call	80ab18 <__sprint_r>
  80b7f4:	d9c15117 	ldw	r7,1348(sp)
  80b7f8:	103e951e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80b7fc:	dc800e17 	ldw	r18,56(sp)
  80b800:	dc400d17 	ldw	r17,52(sp)
  80b804:	dd401904 	addi	r21,sp,100
  80b808:	003e0406 	br	80b01c <___vfprintf_internal_r+0x4ac>
  80b80c:	d9000517 	ldw	r4,20(sp)
  80b810:	0102520e 	bge	zero,r4,80c15c <___vfprintf_internal_r+0x15ec>
  80b814:	d9814717 	ldw	r6,1308(sp)
  80b818:	21807a16 	blt	r4,r6,80ba04 <___vfprintf_internal_r+0xe94>
  80b81c:	d8814117 	ldw	r2,1284(sp)
  80b820:	91a5883a 	add	r18,r18,r6
  80b824:	8c400044 	addi	r17,r17,1
  80b828:	a8800015 	stw	r2,0(r21)
  80b82c:	008001c4 	movi	r2,7
  80b830:	a9800115 	stw	r6,4(r21)
  80b834:	dc800e15 	stw	r18,56(sp)
  80b838:	dc400d15 	stw	r17,52(sp)
  80b83c:	1442f616 	blt	r2,r17,80c418 <___vfprintf_internal_r+0x18a8>
  80b840:	a8c00204 	addi	r3,r21,8
  80b844:	d9414717 	ldw	r5,1308(sp)
  80b848:	2161c83a 	sub	r16,r4,r5
  80b84c:	043f9d0e 	bge	zero,r16,80b6c4 <___vfprintf_internal_r+0xb54>
  80b850:	00800404 	movi	r2,16
  80b854:	1402130e 	bge	r2,r16,80c0a4 <___vfprintf_internal_r+0x1534>
  80b858:	dc400d17 	ldw	r17,52(sp)
  80b85c:	1027883a 	mov	r19,r2
  80b860:	070020b4 	movhi	fp,130
  80b864:	e734af84 	addi	fp,fp,-11586
  80b868:	050001c4 	movi	r20,7
  80b86c:	00000306 	br	80b87c <___vfprintf_internal_r+0xd0c>
  80b870:	18c00204 	addi	r3,r3,8
  80b874:	843ffc04 	addi	r16,r16,-16
  80b878:	9c020d0e 	bge	r19,r16,80c0b0 <___vfprintf_internal_r+0x1540>
  80b87c:	94800404 	addi	r18,r18,16
  80b880:	8c400044 	addi	r17,r17,1
  80b884:	1f000015 	stw	fp,0(r3)
  80b888:	1cc00115 	stw	r19,4(r3)
  80b88c:	dc800e15 	stw	r18,56(sp)
  80b890:	dc400d15 	stw	r17,52(sp)
  80b894:	a47ff60e 	bge	r20,r17,80b870 <___vfprintf_internal_r+0xd00>
  80b898:	d9014f17 	ldw	r4,1340(sp)
  80b89c:	b00b883a 	mov	r5,r22
  80b8a0:	d9800c04 	addi	r6,sp,48
  80b8a4:	080ab180 	call	80ab18 <__sprint_r>
  80b8a8:	103e691e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80b8ac:	dc800e17 	ldw	r18,56(sp)
  80b8b0:	dc400d17 	ldw	r17,52(sp)
  80b8b4:	d8c01904 	addi	r3,sp,100
  80b8b8:	003fee06 	br	80b874 <___vfprintf_internal_r+0xd04>
  80b8bc:	d8814717 	ldw	r2,1308(sp)
  80b8c0:	143fffc4 	addi	r16,r2,-1
  80b8c4:	043e970e 	bge	zero,r16,80b324 <___vfprintf_internal_r+0x7b4>
  80b8c8:	00800404 	movi	r2,16
  80b8cc:	1400180e 	bge	r2,r16,80b930 <___vfprintf_internal_r+0xdc0>
  80b8d0:	1029883a 	mov	r20,r2
  80b8d4:	070020b4 	movhi	fp,130
  80b8d8:	e734af84 	addi	fp,fp,-11586
  80b8dc:	054001c4 	movi	r21,7
  80b8e0:	00000306 	br	80b8f0 <___vfprintf_internal_r+0xd80>
  80b8e4:	9cc00204 	addi	r19,r19,8
  80b8e8:	843ffc04 	addi	r16,r16,-16
  80b8ec:	a400120e 	bge	r20,r16,80b938 <___vfprintf_internal_r+0xdc8>
  80b8f0:	94800404 	addi	r18,r18,16
  80b8f4:	8c400044 	addi	r17,r17,1
  80b8f8:	9f000015 	stw	fp,0(r19)
  80b8fc:	9d000115 	stw	r20,4(r19)
  80b900:	dc800e15 	stw	r18,56(sp)
  80b904:	dc400d15 	stw	r17,52(sp)
  80b908:	ac7ff60e 	bge	r21,r17,80b8e4 <___vfprintf_internal_r+0xd74>
  80b90c:	d9014f17 	ldw	r4,1340(sp)
  80b910:	b00b883a 	mov	r5,r22
  80b914:	d9800c04 	addi	r6,sp,48
  80b918:	080ab180 	call	80ab18 <__sprint_r>
  80b91c:	103e4c1e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80b920:	dc800e17 	ldw	r18,56(sp)
  80b924:	dc400d17 	ldw	r17,52(sp)
  80b928:	dcc01904 	addi	r19,sp,100
  80b92c:	003fee06 	br	80b8e8 <___vfprintf_internal_r+0xd78>
  80b930:	070020b4 	movhi	fp,130
  80b934:	e734af84 	addi	fp,fp,-11586
  80b938:	9425883a 	add	r18,r18,r16
  80b93c:	8c400044 	addi	r17,r17,1
  80b940:	008001c4 	movi	r2,7
  80b944:	9f000015 	stw	fp,0(r19)
  80b948:	9c000115 	stw	r16,4(r19)
  80b94c:	dc800e15 	stw	r18,56(sp)
  80b950:	dc400d15 	stw	r17,52(sp)
  80b954:	147e720e 	bge	r2,r17,80b320 <___vfprintf_internal_r+0x7b0>
  80b958:	d9014f17 	ldw	r4,1340(sp)
  80b95c:	b00b883a 	mov	r5,r22
  80b960:	d9800c04 	addi	r6,sp,48
  80b964:	080ab180 	call	80ab18 <__sprint_r>
  80b968:	103e391e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80b96c:	dc800e17 	ldw	r18,56(sp)
  80b970:	dc400d17 	ldw	r17,52(sp)
  80b974:	dcc01904 	addi	r19,sp,100
  80b978:	003e6a06 	br	80b324 <___vfprintf_internal_r+0x7b4>
  80b97c:	d9014f17 	ldw	r4,1340(sp)
  80b980:	b00b883a 	mov	r5,r22
  80b984:	d9800c04 	addi	r6,sp,48
  80b988:	d9c15115 	stw	r7,1348(sp)
  80b98c:	080ab180 	call	80ab18 <__sprint_r>
  80b990:	d9c15117 	ldw	r7,1348(sp)
  80b994:	103e2e1e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80b998:	dc800e17 	ldw	r18,56(sp)
  80b99c:	dc400d17 	ldw	r17,52(sp)
  80b9a0:	dd401904 	addi	r21,sp,100
  80b9a4:	003dba06 	br	80b090 <___vfprintf_internal_r+0x520>
  80b9a8:	d9014f17 	ldw	r4,1340(sp)
  80b9ac:	b00b883a 	mov	r5,r22
  80b9b0:	d9800c04 	addi	r6,sp,48
  80b9b4:	080ab180 	call	80ab18 <__sprint_r>
  80b9b8:	103e251e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80b9bc:	dc800e17 	ldw	r18,56(sp)
  80b9c0:	dc400d17 	ldw	r17,52(sp)
  80b9c4:	dcc01904 	addi	r19,sp,100
  80b9c8:	003e4206 	br	80b2d4 <___vfprintf_internal_r+0x764>
  80b9cc:	d9014f17 	ldw	r4,1340(sp)
  80b9d0:	b00b883a 	mov	r5,r22
  80b9d4:	d9800c04 	addi	r6,sp,48
  80b9d8:	080ab180 	call	80ab18 <__sprint_r>
  80b9dc:	103e1c1e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80b9e0:	dc800e17 	ldw	r18,56(sp)
  80b9e4:	dc400d17 	ldw	r17,52(sp)
  80b9e8:	d8c01904 	addi	r3,sp,100
  80b9ec:	003e2e06 	br	80b2a8 <___vfprintf_internal_r+0x738>
  80b9f0:	d9414c17 	ldw	r5,1328(sp)
  80b9f4:	2880004c 	andi	r2,r5,1
  80b9f8:	1005003a 	cmpeq	r2,r2,zero
  80b9fc:	103dda1e 	bne	r2,zero,80b168 <___vfprintf_internal_r+0x5f8>
  80ba00:	003e9f06 	br	80b480 <___vfprintf_internal_r+0x910>
  80ba04:	d8c14117 	ldw	r3,1284(sp)
  80ba08:	9125883a 	add	r18,r18,r4
  80ba0c:	8c400044 	addi	r17,r17,1
  80ba10:	008001c4 	movi	r2,7
  80ba14:	a8c00015 	stw	r3,0(r21)
  80ba18:	a9000115 	stw	r4,4(r21)
  80ba1c:	dc800e15 	stw	r18,56(sp)
  80ba20:	dc400d15 	stw	r17,52(sp)
  80ba24:	14426616 	blt	r2,r17,80c3c0 <___vfprintf_internal_r+0x1850>
  80ba28:	a8c00204 	addi	r3,r21,8
  80ba2c:	d9414917 	ldw	r5,1316(sp)
  80ba30:	00800044 	movi	r2,1
  80ba34:	94800044 	addi	r18,r18,1
  80ba38:	8c400044 	addi	r17,r17,1
  80ba3c:	18800115 	stw	r2,4(r3)
  80ba40:	008001c4 	movi	r2,7
  80ba44:	19400015 	stw	r5,0(r3)
  80ba48:	dc800e15 	stw	r18,56(sp)
  80ba4c:	dc400d15 	stw	r17,52(sp)
  80ba50:	2021883a 	mov	r16,r4
  80ba54:	14425016 	blt	r2,r17,80c398 <___vfprintf_internal_r+0x1828>
  80ba58:	19400204 	addi	r5,r3,8
  80ba5c:	d9814717 	ldw	r6,1308(sp)
  80ba60:	8c400044 	addi	r17,r17,1
  80ba64:	dc400d15 	stw	r17,52(sp)
  80ba68:	3107c83a 	sub	r3,r6,r4
  80ba6c:	d9014117 	ldw	r4,1284(sp)
  80ba70:	90e5883a 	add	r18,r18,r3
  80ba74:	28c00115 	stw	r3,4(r5)
  80ba78:	8105883a 	add	r2,r16,r4
  80ba7c:	28800015 	stw	r2,0(r5)
  80ba80:	008001c4 	movi	r2,7
  80ba84:	dc800e15 	stw	r18,56(sp)
  80ba88:	147f1d16 	blt	r2,r17,80b700 <___vfprintf_internal_r+0xb90>
  80ba8c:	28c00204 	addi	r3,r5,8
  80ba90:	003db506 	br	80b168 <___vfprintf_internal_r+0x5f8>
  80ba94:	3c000017 	ldw	r16,0(r7)
  80ba98:	3c400117 	ldw	r17,4(r7)
  80ba9c:	39800204 	addi	r6,r7,8
  80baa0:	01000044 	movi	r4,1
  80baa4:	d9814015 	stw	r6,1280(sp)
  80baa8:	d8000405 	stb	zero,16(sp)
  80baac:	003ebe06 	br	80b5a8 <___vfprintf_internal_r+0xa38>
  80bab0:	3c000017 	ldw	r16,0(r7)
  80bab4:	3c400117 	ldw	r17,4(r7)
  80bab8:	38800204 	addi	r2,r7,8
  80babc:	d8814015 	stw	r2,1280(sp)
  80bac0:	003eb706 	br	80b5a0 <___vfprintf_internal_r+0xa30>
  80bac4:	3c000017 	ldw	r16,0(r7)
  80bac8:	3c400117 	ldw	r17,4(r7)
  80bacc:	39000204 	addi	r4,r7,8
  80bad0:	d9014015 	stw	r4,1280(sp)
  80bad4:	0009883a 	mov	r4,zero
  80bad8:	d8000405 	stb	zero,16(sp)
  80badc:	003eb206 	br	80b5a8 <___vfprintf_internal_r+0xa38>
  80bae0:	38c00017 	ldw	r3,0(r7)
  80bae4:	39c00104 	addi	r7,r7,4
  80bae8:	d8c14a15 	stw	r3,1320(sp)
  80baec:	1800d10e 	bge	r3,zero,80be34 <___vfprintf_internal_r+0x12c4>
  80baf0:	00c7c83a 	sub	r3,zero,r3
  80baf4:	d8c14a15 	stw	r3,1320(sp)
  80baf8:	d9014c17 	ldw	r4,1328(sp)
  80bafc:	b8c00007 	ldb	r3,0(r23)
  80bb00:	21000114 	ori	r4,r4,4
  80bb04:	d9014c15 	stw	r4,1328(sp)
  80bb08:	003c9806 	br	80ad6c <___vfprintf_internal_r+0x1fc>
  80bb0c:	d9814c17 	ldw	r6,1328(sp)
  80bb10:	3080080c 	andi	r2,r6,32
  80bb14:	1001f026 	beq	r2,zero,80c2d8 <___vfprintf_internal_r+0x1768>
  80bb18:	d9014b17 	ldw	r4,1324(sp)
  80bb1c:	38800017 	ldw	r2,0(r7)
  80bb20:	39c00104 	addi	r7,r7,4
  80bb24:	d9c14015 	stw	r7,1280(sp)
  80bb28:	2007d7fa 	srai	r3,r4,31
  80bb2c:	d9c14017 	ldw	r7,1280(sp)
  80bb30:	11000015 	stw	r4,0(r2)
  80bb34:	10c00115 	stw	r3,4(r2)
  80bb38:	003c6906 	br	80ace0 <___vfprintf_internal_r+0x170>
  80bb3c:	b8c00007 	ldb	r3,0(r23)
  80bb40:	00801b04 	movi	r2,108
  80bb44:	18824f26 	beq	r3,r2,80c484 <___vfprintf_internal_r+0x1914>
  80bb48:	d9414c17 	ldw	r5,1328(sp)
  80bb4c:	29400414 	ori	r5,r5,16
  80bb50:	d9414c15 	stw	r5,1328(sp)
  80bb54:	003c8506 	br	80ad6c <___vfprintf_internal_r+0x1fc>
  80bb58:	d9814c17 	ldw	r6,1328(sp)
  80bb5c:	b8c00007 	ldb	r3,0(r23)
  80bb60:	31800814 	ori	r6,r6,32
  80bb64:	d9814c15 	stw	r6,1328(sp)
  80bb68:	003c8006 	br	80ad6c <___vfprintf_internal_r+0x1fc>
  80bb6c:	d8814c17 	ldw	r2,1328(sp)
  80bb70:	3c000017 	ldw	r16,0(r7)
  80bb74:	00c01e04 	movi	r3,120
  80bb78:	10800094 	ori	r2,r2,2
  80bb7c:	d8814c15 	stw	r2,1328(sp)
  80bb80:	39c00104 	addi	r7,r7,4
  80bb84:	014020b4 	movhi	r5,130
  80bb88:	29749804 	addi	r5,r5,-11680
  80bb8c:	00800c04 	movi	r2,48
  80bb90:	0023883a 	mov	r17,zero
  80bb94:	01000084 	movi	r4,2
  80bb98:	d9c14015 	stw	r7,1280(sp)
  80bb9c:	d8c14d15 	stw	r3,1332(sp)
  80bba0:	d9414415 	stw	r5,1296(sp)
  80bba4:	d8800445 	stb	r2,17(sp)
  80bba8:	d8c00485 	stb	r3,18(sp)
  80bbac:	d8000405 	stb	zero,16(sp)
  80bbb0:	003e7d06 	br	80b5a8 <___vfprintf_internal_r+0xa38>
  80bbb4:	d8814c17 	ldw	r2,1328(sp)
  80bbb8:	b8c00007 	ldb	r3,0(r23)
  80bbbc:	10801014 	ori	r2,r2,64
  80bbc0:	d8814c15 	stw	r2,1328(sp)
  80bbc4:	003c6906 	br	80ad6c <___vfprintf_internal_r+0x1fc>
  80bbc8:	d9414c17 	ldw	r5,1328(sp)
  80bbcc:	2880020c 	andi	r2,r5,8
  80bbd0:	1001df26 	beq	r2,zero,80c350 <___vfprintf_internal_r+0x17e0>
  80bbd4:	39800017 	ldw	r6,0(r7)
  80bbd8:	38800204 	addi	r2,r7,8
  80bbdc:	d8814015 	stw	r2,1280(sp)
  80bbe0:	d9814215 	stw	r6,1288(sp)
  80bbe4:	39c00117 	ldw	r7,4(r7)
  80bbe8:	d9c14315 	stw	r7,1292(sp)
  80bbec:	d9014217 	ldw	r4,1288(sp)
  80bbf0:	d9414317 	ldw	r5,1292(sp)
  80bbf4:	0810e440 	call	810e44 <__isinfd>
  80bbf8:	10021726 	beq	r2,zero,80c458 <___vfprintf_internal_r+0x18e8>
  80bbfc:	d9014217 	ldw	r4,1288(sp)
  80bc00:	d9414317 	ldw	r5,1292(sp)
  80bc04:	000d883a 	mov	r6,zero
  80bc08:	000f883a 	mov	r7,zero
  80bc0c:	08093e80 	call	8093e8 <__ltdf2>
  80bc10:	1002ca16 	blt	r2,zero,80c73c <___vfprintf_internal_r+0x1bcc>
  80bc14:	d9414d17 	ldw	r5,1332(sp)
  80bc18:	008011c4 	movi	r2,71
  80bc1c:	11420a16 	blt	r2,r5,80c448 <___vfprintf_internal_r+0x18d8>
  80bc20:	018020b4 	movhi	r6,130
  80bc24:	31b49d04 	addi	r6,r6,-11660
  80bc28:	d9814115 	stw	r6,1284(sp)
  80bc2c:	d9014c17 	ldw	r4,1328(sp)
  80bc30:	00c000c4 	movi	r3,3
  80bc34:	00bfdfc4 	movi	r2,-129
  80bc38:	2088703a 	and	r4,r4,r2
  80bc3c:	180f883a 	mov	r7,r3
  80bc40:	d8c14515 	stw	r3,1300(sp)
  80bc44:	d9014c15 	stw	r4,1328(sp)
  80bc48:	d8014615 	stw	zero,1304(sp)
  80bc4c:	003e6a06 	br	80b5f8 <___vfprintf_internal_r+0xa88>
  80bc50:	38800017 	ldw	r2,0(r7)
  80bc54:	00c00044 	movi	r3,1
  80bc58:	39c00104 	addi	r7,r7,4
  80bc5c:	d9c14015 	stw	r7,1280(sp)
  80bc60:	d9000f04 	addi	r4,sp,60
  80bc64:	180f883a 	mov	r7,r3
  80bc68:	d8c14515 	stw	r3,1300(sp)
  80bc6c:	d9014115 	stw	r4,1284(sp)
  80bc70:	d8800f05 	stb	r2,60(sp)
  80bc74:	d8000405 	stb	zero,16(sp)
  80bc78:	003cac06 	br	80af2c <___vfprintf_internal_r+0x3bc>
  80bc7c:	014020b4 	movhi	r5,130
  80bc80:	2974a304 	addi	r5,r5,-11636
  80bc84:	d9414415 	stw	r5,1296(sp)
  80bc88:	d9814c17 	ldw	r6,1328(sp)
  80bc8c:	3080080c 	andi	r2,r6,32
  80bc90:	1000f926 	beq	r2,zero,80c078 <___vfprintf_internal_r+0x1508>
  80bc94:	3c000017 	ldw	r16,0(r7)
  80bc98:	3c400117 	ldw	r17,4(r7)
  80bc9c:	38800204 	addi	r2,r7,8
  80bca0:	d8814015 	stw	r2,1280(sp)
  80bca4:	d9414c17 	ldw	r5,1328(sp)
  80bca8:	2880004c 	andi	r2,r5,1
  80bcac:	1005003a 	cmpeq	r2,r2,zero
  80bcb0:	1000b31e 	bne	r2,zero,80bf80 <___vfprintf_internal_r+0x1410>
  80bcb4:	8444b03a 	or	r2,r16,r17
  80bcb8:	1000b126 	beq	r2,zero,80bf80 <___vfprintf_internal_r+0x1410>
  80bcbc:	d9814d17 	ldw	r6,1332(sp)
  80bcc0:	29400094 	ori	r5,r5,2
  80bcc4:	00800c04 	movi	r2,48
  80bcc8:	01000084 	movi	r4,2
  80bccc:	d9414c15 	stw	r5,1328(sp)
  80bcd0:	d8800445 	stb	r2,17(sp)
  80bcd4:	d9800485 	stb	r6,18(sp)
  80bcd8:	d8000405 	stb	zero,16(sp)
  80bcdc:	003e3206 	br	80b5a8 <___vfprintf_internal_r+0xa38>
  80bce0:	018020b4 	movhi	r6,130
  80bce4:	31b49804 	addi	r6,r6,-11680
  80bce8:	d9814415 	stw	r6,1296(sp)
  80bcec:	003fe606 	br	80bc88 <___vfprintf_internal_r+0x1118>
  80bcf0:	00800ac4 	movi	r2,43
  80bcf4:	d8800405 	stb	r2,16(sp)
  80bcf8:	b8c00007 	ldb	r3,0(r23)
  80bcfc:	003c1b06 	br	80ad6c <___vfprintf_internal_r+0x1fc>
  80bd00:	d8814c17 	ldw	r2,1328(sp)
  80bd04:	b8c00007 	ldb	r3,0(r23)
  80bd08:	10800054 	ori	r2,r2,1
  80bd0c:	d8814c15 	stw	r2,1328(sp)
  80bd10:	003c1606 	br	80ad6c <___vfprintf_internal_r+0x1fc>
  80bd14:	d8800407 	ldb	r2,16(sp)
  80bd18:	1000461e 	bne	r2,zero,80be34 <___vfprintf_internal_r+0x12c4>
  80bd1c:	00800804 	movi	r2,32
  80bd20:	d8800405 	stb	r2,16(sp)
  80bd24:	b8c00007 	ldb	r3,0(r23)
  80bd28:	003c1006 	br	80ad6c <___vfprintf_internal_r+0x1fc>
  80bd2c:	d9814c17 	ldw	r6,1328(sp)
  80bd30:	b8c00007 	ldb	r3,0(r23)
  80bd34:	31800214 	ori	r6,r6,8
  80bd38:	d9814c15 	stw	r6,1328(sp)
  80bd3c:	003c0b06 	br	80ad6c <___vfprintf_internal_r+0x1fc>
  80bd40:	0007883a 	mov	r3,zero
  80bd44:	01000244 	movi	r4,9
  80bd48:	188002a4 	muli	r2,r3,10
  80bd4c:	b8c00007 	ldb	r3,0(r23)
  80bd50:	d9814d17 	ldw	r6,1332(sp)
  80bd54:	bdc00044 	addi	r23,r23,1
  80bd58:	d8c14d15 	stw	r3,1332(sp)
  80bd5c:	d9414d17 	ldw	r5,1332(sp)
  80bd60:	3085883a 	add	r2,r6,r2
  80bd64:	10fff404 	addi	r3,r2,-48
  80bd68:	28bff404 	addi	r2,r5,-48
  80bd6c:	20bff62e 	bgeu	r4,r2,80bd48 <___vfprintf_internal_r+0x11d8>
  80bd70:	d8c14a15 	stw	r3,1320(sp)
  80bd74:	003bff06 	br	80ad74 <___vfprintf_internal_r+0x204>
  80bd78:	d9414c17 	ldw	r5,1328(sp)
  80bd7c:	b8c00007 	ldb	r3,0(r23)
  80bd80:	29402014 	ori	r5,r5,128
  80bd84:	d9414c15 	stw	r5,1328(sp)
  80bd88:	003bf806 	br	80ad6c <___vfprintf_internal_r+0x1fc>
  80bd8c:	b8c00007 	ldb	r3,0(r23)
  80bd90:	00800a84 	movi	r2,42
  80bd94:	bdc00044 	addi	r23,r23,1
  80bd98:	18831526 	beq	r3,r2,80c9f0 <___vfprintf_internal_r+0x1e80>
  80bd9c:	d8c14d15 	stw	r3,1332(sp)
  80bda0:	18bff404 	addi	r2,r3,-48
  80bda4:	00c00244 	movi	r3,9
  80bda8:	18827836 	bltu	r3,r2,80c78c <___vfprintf_internal_r+0x1c1c>
  80bdac:	000d883a 	mov	r6,zero
  80bdb0:	308002a4 	muli	r2,r6,10
  80bdb4:	b9800007 	ldb	r6,0(r23)
  80bdb8:	d9414d17 	ldw	r5,1332(sp)
  80bdbc:	bdc00044 	addi	r23,r23,1
  80bdc0:	d9814d15 	stw	r6,1332(sp)
  80bdc4:	d9014d17 	ldw	r4,1332(sp)
  80bdc8:	1145883a 	add	r2,r2,r5
  80bdcc:	11bff404 	addi	r6,r2,-48
  80bdd0:	20bff404 	addi	r2,r4,-48
  80bdd4:	18bff62e 	bgeu	r3,r2,80bdb0 <___vfprintf_internal_r+0x1240>
  80bdd8:	3027883a 	mov	r19,r6
  80bddc:	303be50e 	bge	r6,zero,80ad74 <___vfprintf_internal_r+0x204>
  80bde0:	04ffffc4 	movi	r19,-1
  80bde4:	003be306 	br	80ad74 <___vfprintf_internal_r+0x204>
  80bde8:	d8000405 	stb	zero,16(sp)
  80bdec:	39800017 	ldw	r6,0(r7)
  80bdf0:	39c00104 	addi	r7,r7,4
  80bdf4:	d9c14015 	stw	r7,1280(sp)
  80bdf8:	d9814115 	stw	r6,1284(sp)
  80bdfc:	3001c926 	beq	r6,zero,80c524 <___vfprintf_internal_r+0x19b4>
  80be00:	98000e16 	blt	r19,zero,80be3c <___vfprintf_internal_r+0x12cc>
  80be04:	d9014117 	ldw	r4,1284(sp)
  80be08:	000b883a 	mov	r5,zero
  80be0c:	980d883a 	mov	r6,r19
  80be10:	080f5600 	call	80f560 <memchr>
  80be14:	10025926 	beq	r2,zero,80c77c <___vfprintf_internal_r+0x1c0c>
  80be18:	d8c14117 	ldw	r3,1284(sp)
  80be1c:	10cfc83a 	sub	r7,r2,r3
  80be20:	99c19e16 	blt	r19,r7,80c49c <___vfprintf_internal_r+0x192c>
  80be24:	d9c14515 	stw	r7,1300(sp)
  80be28:	38000916 	blt	r7,zero,80be50 <___vfprintf_internal_r+0x12e0>
  80be2c:	d8014615 	stw	zero,1304(sp)
  80be30:	003df106 	br	80b5f8 <___vfprintf_internal_r+0xa88>
  80be34:	b8c00007 	ldb	r3,0(r23)
  80be38:	003bcc06 	br	80ad6c <___vfprintf_internal_r+0x1fc>
  80be3c:	d9014117 	ldw	r4,1284(sp)
  80be40:	080aa480 	call	80aa48 <strlen>
  80be44:	d8814515 	stw	r2,1300(sp)
  80be48:	100f883a 	mov	r7,r2
  80be4c:	103ff70e 	bge	r2,zero,80be2c <___vfprintf_internal_r+0x12bc>
  80be50:	d8014515 	stw	zero,1300(sp)
  80be54:	d8014615 	stw	zero,1304(sp)
  80be58:	003de706 	br	80b5f8 <___vfprintf_internal_r+0xa88>
  80be5c:	20c03fcc 	andi	r3,r4,255
  80be60:	00800044 	movi	r2,1
  80be64:	18802d26 	beq	r3,r2,80bf1c <___vfprintf_internal_r+0x13ac>
  80be68:	18800e36 	bltu	r3,r2,80bea4 <___vfprintf_internal_r+0x1334>
  80be6c:	00800084 	movi	r2,2
  80be70:	1880fa26 	beq	r3,r2,80c25c <___vfprintf_internal_r+0x16ec>
  80be74:	010020b4 	movhi	r4,130
  80be78:	2134a804 	addi	r4,r4,-11616
  80be7c:	080aa480 	call	80aa48 <strlen>
  80be80:	100f883a 	mov	r7,r2
  80be84:	dcc14515 	stw	r19,1300(sp)
  80be88:	9880010e 	bge	r19,r2,80be90 <___vfprintf_internal_r+0x1320>
  80be8c:	d8814515 	stw	r2,1300(sp)
  80be90:	008020b4 	movhi	r2,130
  80be94:	10b4a804 	addi	r2,r2,-11616
  80be98:	dcc14615 	stw	r19,1304(sp)
  80be9c:	d8814115 	stw	r2,1284(sp)
  80bea0:	003dd506 	br	80b5f8 <___vfprintf_internal_r+0xa88>
  80bea4:	d9401904 	addi	r5,sp,100
  80bea8:	dd000f04 	addi	r20,sp,60
  80beac:	d9414115 	stw	r5,1284(sp)
  80beb0:	880a977a 	slli	r5,r17,29
  80beb4:	d9814117 	ldw	r6,1284(sp)
  80beb8:	8004d0fa 	srli	r2,r16,3
  80bebc:	8806d0fa 	srli	r3,r17,3
  80bec0:	810001cc 	andi	r4,r16,7
  80bec4:	2884b03a 	or	r2,r5,r2
  80bec8:	31bfffc4 	addi	r6,r6,-1
  80becc:	21000c04 	addi	r4,r4,48
  80bed0:	d9814115 	stw	r6,1284(sp)
  80bed4:	10cab03a 	or	r5,r2,r3
  80bed8:	31000005 	stb	r4,0(r6)
  80bedc:	1021883a 	mov	r16,r2
  80bee0:	1823883a 	mov	r17,r3
  80bee4:	283ff21e 	bne	r5,zero,80beb0 <___vfprintf_internal_r+0x1340>
  80bee8:	d8c14c17 	ldw	r3,1328(sp)
  80beec:	1880004c 	andi	r2,r3,1
  80bef0:	1005003a 	cmpeq	r2,r2,zero
  80bef4:	103db91e 	bne	r2,zero,80b5dc <___vfprintf_internal_r+0xa6c>
  80bef8:	20803fcc 	andi	r2,r4,255
  80befc:	1080201c 	xori	r2,r2,128
  80bf00:	10bfe004 	addi	r2,r2,-128
  80bf04:	00c00c04 	movi	r3,48
  80bf08:	10fdb426 	beq	r2,r3,80b5dc <___vfprintf_internal_r+0xa6c>
  80bf0c:	31bfffc4 	addi	r6,r6,-1
  80bf10:	d9814115 	stw	r6,1284(sp)
  80bf14:	30c00005 	stb	r3,0(r6)
  80bf18:	003db006 	br	80b5dc <___vfprintf_internal_r+0xa6c>
  80bf1c:	88800068 	cmpgeui	r2,r17,1
  80bf20:	10002c1e 	bne	r2,zero,80bfd4 <___vfprintf_internal_r+0x1464>
  80bf24:	8800021e 	bne	r17,zero,80bf30 <___vfprintf_internal_r+0x13c0>
  80bf28:	00800244 	movi	r2,9
  80bf2c:	14002936 	bltu	r2,r16,80bfd4 <___vfprintf_internal_r+0x1464>
  80bf30:	d90018c4 	addi	r4,sp,99
  80bf34:	dd000f04 	addi	r20,sp,60
  80bf38:	d9014115 	stw	r4,1284(sp)
  80bf3c:	d9014117 	ldw	r4,1284(sp)
  80bf40:	80800c04 	addi	r2,r16,48
  80bf44:	20800005 	stb	r2,0(r4)
  80bf48:	003da406 	br	80b5dc <___vfprintf_internal_r+0xa6c>
  80bf4c:	dc400d17 	ldw	r17,52(sp)
  80bf50:	070020b4 	movhi	fp,130
  80bf54:	e734af84 	addi	fp,fp,-11586
  80bf58:	9425883a 	add	r18,r18,r16
  80bf5c:	8c400044 	addi	r17,r17,1
  80bf60:	008001c4 	movi	r2,7
  80bf64:	1f000015 	stw	fp,0(r3)
  80bf68:	1c000115 	stw	r16,4(r3)
  80bf6c:	dc800e15 	stw	r18,56(sp)
  80bf70:	dc400d15 	stw	r17,52(sp)
  80bf74:	147de216 	blt	r2,r17,80b700 <___vfprintf_internal_r+0xb90>
  80bf78:	18c00204 	addi	r3,r3,8
  80bf7c:	003c7a06 	br	80b168 <___vfprintf_internal_r+0x5f8>
  80bf80:	01000084 	movi	r4,2
  80bf84:	d8000405 	stb	zero,16(sp)
  80bf88:	003d8706 	br	80b5a8 <___vfprintf_internal_r+0xa38>
  80bf8c:	d9814c17 	ldw	r6,1328(sp)
  80bf90:	30c4703a 	and	r2,r6,r3
  80bf94:	1005003a 	cmpeq	r2,r2,zero
  80bf98:	103cb926 	beq	r2,zero,80b280 <___vfprintf_internal_r+0x710>
  80bf9c:	d9014117 	ldw	r4,1284(sp)
  80bfa0:	94800044 	addi	r18,r18,1
  80bfa4:	8c400044 	addi	r17,r17,1
  80bfa8:	008001c4 	movi	r2,7
  80bfac:	a9000015 	stw	r4,0(r21)
  80bfb0:	a8c00115 	stw	r3,4(r21)
  80bfb4:	dc800e15 	stw	r18,56(sp)
  80bfb8:	dc400d15 	stw	r17,52(sp)
  80bfbc:	147e6616 	blt	r2,r17,80b958 <___vfprintf_internal_r+0xde8>
  80bfc0:	acc00204 	addi	r19,r21,8
  80bfc4:	003cd706 	br	80b324 <___vfprintf_internal_r+0x7b4>
  80bfc8:	070020b4 	movhi	fp,130
  80bfcc:	e734af84 	addi	fp,fp,-11586
  80bfd0:	003c4f06 	br	80b110 <___vfprintf_internal_r+0x5a0>
  80bfd4:	dd000f04 	addi	r20,sp,60
  80bfd8:	dc801904 	addi	r18,sp,100
  80bfdc:	8009883a 	mov	r4,r16
  80bfe0:	880b883a 	mov	r5,r17
  80bfe4:	01800284 	movi	r6,10
  80bfe8:	000f883a 	mov	r7,zero
  80bfec:	0811afc0 	call	811afc <__umoddi3>
  80bff0:	12000c04 	addi	r8,r2,48
  80bff4:	94bfffc4 	addi	r18,r18,-1
  80bff8:	8009883a 	mov	r4,r16
  80bffc:	880b883a 	mov	r5,r17
  80c000:	01800284 	movi	r6,10
  80c004:	000f883a 	mov	r7,zero
  80c008:	92000005 	stb	r8,0(r18)
  80c00c:	08115200 	call	811520 <__udivdi3>
  80c010:	1009883a 	mov	r4,r2
  80c014:	1021883a 	mov	r16,r2
  80c018:	18800068 	cmpgeui	r2,r3,1
  80c01c:	1823883a 	mov	r17,r3
  80c020:	103fee1e 	bne	r2,zero,80bfdc <___vfprintf_internal_r+0x146c>
  80c024:	1800021e 	bne	r3,zero,80c030 <___vfprintf_internal_r+0x14c0>
  80c028:	00800244 	movi	r2,9
  80c02c:	113feb36 	bltu	r2,r4,80bfdc <___vfprintf_internal_r+0x146c>
  80c030:	94bfffc4 	addi	r18,r18,-1
  80c034:	dc814115 	stw	r18,1284(sp)
  80c038:	003fc006 	br	80bf3c <___vfprintf_internal_r+0x13cc>
  80c03c:	d9014c17 	ldw	r4,1328(sp)
  80c040:	2080004c 	andi	r2,r4,1
  80c044:	10009a1e 	bne	r2,zero,80c2b0 <___vfprintf_internal_r+0x1740>
  80c048:	d9401904 	addi	r5,sp,100
  80c04c:	dd000f04 	addi	r20,sp,60
  80c050:	d9414115 	stw	r5,1284(sp)
  80c054:	003d6106 	br	80b5dc <___vfprintf_internal_r+0xa6c>
  80c058:	d9014f17 	ldw	r4,1340(sp)
  80c05c:	b00b883a 	mov	r5,r22
  80c060:	d9800c04 	addi	r6,sp,48
  80c064:	080ab180 	call	80ab18 <__sprint_r>
  80c068:	103c791e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80c06c:	dc800e17 	ldw	r18,56(sp)
  80c070:	d8c01904 	addi	r3,sp,100
  80c074:	003cff06 	br	80b474 <___vfprintf_internal_r+0x904>
  80c078:	d8c14c17 	ldw	r3,1328(sp)
  80c07c:	1880040c 	andi	r2,r3,16
  80c080:	1000711e 	bne	r2,zero,80c248 <___vfprintf_internal_r+0x16d8>
  80c084:	d9014c17 	ldw	r4,1328(sp)
  80c088:	2080100c 	andi	r2,r4,64
  80c08c:	10006e26 	beq	r2,zero,80c248 <___vfprintf_internal_r+0x16d8>
  80c090:	3c00000b 	ldhu	r16,0(r7)
  80c094:	0023883a 	mov	r17,zero
  80c098:	39c00104 	addi	r7,r7,4
  80c09c:	d9c14015 	stw	r7,1280(sp)
  80c0a0:	003f0006 	br	80bca4 <___vfprintf_internal_r+0x1134>
  80c0a4:	dc400d17 	ldw	r17,52(sp)
  80c0a8:	070020b4 	movhi	fp,130
  80c0ac:	e734af84 	addi	fp,fp,-11586
  80c0b0:	9425883a 	add	r18,r18,r16
  80c0b4:	8c400044 	addi	r17,r17,1
  80c0b8:	008001c4 	movi	r2,7
  80c0bc:	1f000015 	stw	fp,0(r3)
  80c0c0:	1c000115 	stw	r16,4(r3)
  80c0c4:	dc800e15 	stw	r18,56(sp)
  80c0c8:	dc400d15 	stw	r17,52(sp)
  80c0cc:	147d7616 	blt	r2,r17,80b6a8 <___vfprintf_internal_r+0xb38>
  80c0d0:	18c00204 	addi	r3,r3,8
  80c0d4:	003d7b06 	br	80b6c4 <___vfprintf_internal_r+0xb54>
  80c0d8:	dc800e17 	ldw	r18,56(sp)
  80c0dc:	dc400d17 	ldw	r17,52(sp)
  80c0e0:	070020b4 	movhi	fp,130
  80c0e4:	e734b384 	addi	fp,fp,-11570
  80c0e8:	003bc006 	br	80afec <___vfprintf_internal_r+0x47c>
  80c0ec:	d9014f17 	ldw	r4,1340(sp)
  80c0f0:	b00b883a 	mov	r5,r22
  80c0f4:	d9800c04 	addi	r6,sp,48
  80c0f8:	080ab180 	call	80ab18 <__sprint_r>
  80c0fc:	103c541e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80c100:	dc800e17 	ldw	r18,56(sp)
  80c104:	d8c01904 	addi	r3,sp,100
  80c108:	003ce906 	br	80b4b0 <___vfprintf_internal_r+0x940>
  80c10c:	3c000017 	ldw	r16,0(r7)
  80c110:	0009883a 	mov	r4,zero
  80c114:	39c00104 	addi	r7,r7,4
  80c118:	0023883a 	mov	r17,zero
  80c11c:	d9c14015 	stw	r7,1280(sp)
  80c120:	d8000405 	stb	zero,16(sp)
  80c124:	003d2006 	br	80b5a8 <___vfprintf_internal_r+0xa38>
  80c128:	38800017 	ldw	r2,0(r7)
  80c12c:	39c00104 	addi	r7,r7,4
  80c130:	d9c14015 	stw	r7,1280(sp)
  80c134:	1023d7fa 	srai	r17,r2,31
  80c138:	1021883a 	mov	r16,r2
  80c13c:	003d1806 	br	80b5a0 <___vfprintf_internal_r+0xa30>
  80c140:	3c000017 	ldw	r16,0(r7)
  80c144:	01000044 	movi	r4,1
  80c148:	39c00104 	addi	r7,r7,4
  80c14c:	0023883a 	mov	r17,zero
  80c150:	d9c14015 	stw	r7,1280(sp)
  80c154:	d8000405 	stb	zero,16(sp)
  80c158:	003d1306 	br	80b5a8 <___vfprintf_internal_r+0xa38>
  80c15c:	008020b4 	movhi	r2,130
  80c160:	10b4af04 	addi	r2,r2,-11588
  80c164:	94800044 	addi	r18,r18,1
  80c168:	8c400044 	addi	r17,r17,1
  80c16c:	a8800015 	stw	r2,0(r21)
  80c170:	00c00044 	movi	r3,1
  80c174:	008001c4 	movi	r2,7
  80c178:	a8c00115 	stw	r3,4(r21)
  80c17c:	dc800e15 	stw	r18,56(sp)
  80c180:	dc400d15 	stw	r17,52(sp)
  80c184:	1440ca16 	blt	r2,r17,80c4b0 <___vfprintf_internal_r+0x1940>
  80c188:	a8c00204 	addi	r3,r21,8
  80c18c:	2000061e 	bne	r4,zero,80c1a8 <___vfprintf_internal_r+0x1638>
  80c190:	d9414717 	ldw	r5,1308(sp)
  80c194:	2800041e 	bne	r5,zero,80c1a8 <___vfprintf_internal_r+0x1638>
  80c198:	d9814c17 	ldw	r6,1328(sp)
  80c19c:	3080004c 	andi	r2,r6,1
  80c1a0:	1005003a 	cmpeq	r2,r2,zero
  80c1a4:	103bf01e 	bne	r2,zero,80b168 <___vfprintf_internal_r+0x5f8>
  80c1a8:	00800044 	movi	r2,1
  80c1ac:	dc400d17 	ldw	r17,52(sp)
  80c1b0:	18800115 	stw	r2,4(r3)
  80c1b4:	d8814917 	ldw	r2,1316(sp)
  80c1b8:	94800044 	addi	r18,r18,1
  80c1bc:	8c400044 	addi	r17,r17,1
  80c1c0:	18800015 	stw	r2,0(r3)
  80c1c4:	008001c4 	movi	r2,7
  80c1c8:	dc800e15 	stw	r18,56(sp)
  80c1cc:	dc400d15 	stw	r17,52(sp)
  80c1d0:	1440ca16 	blt	r2,r17,80c4fc <___vfprintf_internal_r+0x198c>
  80c1d4:	18c00204 	addi	r3,r3,8
  80c1d8:	0121c83a 	sub	r16,zero,r4
  80c1dc:	0400500e 	bge	zero,r16,80c320 <___vfprintf_internal_r+0x17b0>
  80c1e0:	00800404 	movi	r2,16
  80c1e4:	1400800e 	bge	r2,r16,80c3e8 <___vfprintf_internal_r+0x1878>
  80c1e8:	1027883a 	mov	r19,r2
  80c1ec:	070020b4 	movhi	fp,130
  80c1f0:	e734af84 	addi	fp,fp,-11586
  80c1f4:	050001c4 	movi	r20,7
  80c1f8:	00000306 	br	80c208 <___vfprintf_internal_r+0x1698>
  80c1fc:	18c00204 	addi	r3,r3,8
  80c200:	843ffc04 	addi	r16,r16,-16
  80c204:	9c007a0e 	bge	r19,r16,80c3f0 <___vfprintf_internal_r+0x1880>
  80c208:	94800404 	addi	r18,r18,16
  80c20c:	8c400044 	addi	r17,r17,1
  80c210:	1f000015 	stw	fp,0(r3)
  80c214:	1cc00115 	stw	r19,4(r3)
  80c218:	dc800e15 	stw	r18,56(sp)
  80c21c:	dc400d15 	stw	r17,52(sp)
  80c220:	a47ff60e 	bge	r20,r17,80c1fc <___vfprintf_internal_r+0x168c>
  80c224:	d9014f17 	ldw	r4,1340(sp)
  80c228:	b00b883a 	mov	r5,r22
  80c22c:	d9800c04 	addi	r6,sp,48
  80c230:	080ab180 	call	80ab18 <__sprint_r>
  80c234:	103c061e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80c238:	dc800e17 	ldw	r18,56(sp)
  80c23c:	dc400d17 	ldw	r17,52(sp)
  80c240:	d8c01904 	addi	r3,sp,100
  80c244:	003fee06 	br	80c200 <___vfprintf_internal_r+0x1690>
  80c248:	3c000017 	ldw	r16,0(r7)
  80c24c:	0023883a 	mov	r17,zero
  80c250:	39c00104 	addi	r7,r7,4
  80c254:	d9c14015 	stw	r7,1280(sp)
  80c258:	003e9206 	br	80bca4 <___vfprintf_internal_r+0x1134>
  80c25c:	d9401904 	addi	r5,sp,100
  80c260:	dd000f04 	addi	r20,sp,60
  80c264:	d9414115 	stw	r5,1284(sp)
  80c268:	d9814417 	ldw	r6,1296(sp)
  80c26c:	880a973a 	slli	r5,r17,28
  80c270:	8004d13a 	srli	r2,r16,4
  80c274:	810003cc 	andi	r4,r16,15
  80c278:	3109883a 	add	r4,r6,r4
  80c27c:	2884b03a 	or	r2,r5,r2
  80c280:	21400003 	ldbu	r5,0(r4)
  80c284:	d9014117 	ldw	r4,1284(sp)
  80c288:	8806d13a 	srli	r3,r17,4
  80c28c:	1021883a 	mov	r16,r2
  80c290:	213fffc4 	addi	r4,r4,-1
  80c294:	d9014115 	stw	r4,1284(sp)
  80c298:	d9814117 	ldw	r6,1284(sp)
  80c29c:	10c8b03a 	or	r4,r2,r3
  80c2a0:	1823883a 	mov	r17,r3
  80c2a4:	31400005 	stb	r5,0(r6)
  80c2a8:	203fef1e 	bne	r4,zero,80c268 <___vfprintf_internal_r+0x16f8>
  80c2ac:	003ccb06 	br	80b5dc <___vfprintf_internal_r+0xa6c>
  80c2b0:	00800c04 	movi	r2,48
  80c2b4:	d98018c4 	addi	r6,sp,99
  80c2b8:	dd000f04 	addi	r20,sp,60
  80c2bc:	d88018c5 	stb	r2,99(sp)
  80c2c0:	d9814115 	stw	r6,1284(sp)
  80c2c4:	003cc506 	br	80b5dc <___vfprintf_internal_r+0xa6c>
  80c2c8:	dc400d17 	ldw	r17,52(sp)
  80c2cc:	070020b4 	movhi	fp,130
  80c2d0:	e734b384 	addi	fp,fp,-11570
  80c2d4:	003bc706 	br	80b1f4 <___vfprintf_internal_r+0x684>
  80c2d8:	d9414c17 	ldw	r5,1328(sp)
  80c2dc:	2880040c 	andi	r2,r5,16
  80c2e0:	10007c26 	beq	r2,zero,80c4d4 <___vfprintf_internal_r+0x1964>
  80c2e4:	38800017 	ldw	r2,0(r7)
  80c2e8:	39c00104 	addi	r7,r7,4
  80c2ec:	d9c14015 	stw	r7,1280(sp)
  80c2f0:	d9814b17 	ldw	r6,1324(sp)
  80c2f4:	d9c14017 	ldw	r7,1280(sp)
  80c2f8:	11800015 	stw	r6,0(r2)
  80c2fc:	003a7806 	br	80ace0 <___vfprintf_internal_r+0x170>
  80c300:	d9014f17 	ldw	r4,1340(sp)
  80c304:	b00b883a 	mov	r5,r22
  80c308:	d9800c04 	addi	r6,sp,48
  80c30c:	080ab180 	call	80ab18 <__sprint_r>
  80c310:	103bcf1e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80c314:	dc800e17 	ldw	r18,56(sp)
  80c318:	dc400d17 	ldw	r17,52(sp)
  80c31c:	d8c01904 	addi	r3,sp,100
  80c320:	d9014717 	ldw	r4,1308(sp)
  80c324:	d9414117 	ldw	r5,1284(sp)
  80c328:	8c400044 	addi	r17,r17,1
  80c32c:	9125883a 	add	r18,r18,r4
  80c330:	008001c4 	movi	r2,7
  80c334:	19400015 	stw	r5,0(r3)
  80c338:	19000115 	stw	r4,4(r3)
  80c33c:	dc800e15 	stw	r18,56(sp)
  80c340:	dc400d15 	stw	r17,52(sp)
  80c344:	147cee16 	blt	r2,r17,80b700 <___vfprintf_internal_r+0xb90>
  80c348:	18c00204 	addi	r3,r3,8
  80c34c:	003b8606 	br	80b168 <___vfprintf_internal_r+0x5f8>
  80c350:	38c00017 	ldw	r3,0(r7)
  80c354:	39000204 	addi	r4,r7,8
  80c358:	d9014015 	stw	r4,1280(sp)
  80c35c:	d8c14215 	stw	r3,1288(sp)
  80c360:	39c00117 	ldw	r7,4(r7)
  80c364:	d9c14315 	stw	r7,1292(sp)
  80c368:	003e2006 	br	80bbec <___vfprintf_internal_r+0x107c>
  80c36c:	0005883a 	mov	r2,zero
  80c370:	1409c83a 	sub	r4,r2,r16
  80c374:	1105803a 	cmpltu	r2,r2,r4
  80c378:	044bc83a 	sub	r5,zero,r17
  80c37c:	2885c83a 	sub	r2,r5,r2
  80c380:	2021883a 	mov	r16,r4
  80c384:	1023883a 	mov	r17,r2
  80c388:	01000044 	movi	r4,1
  80c38c:	00800b44 	movi	r2,45
  80c390:	d8800405 	stb	r2,16(sp)
  80c394:	003c8406 	br	80b5a8 <___vfprintf_internal_r+0xa38>
  80c398:	d9014f17 	ldw	r4,1340(sp)
  80c39c:	b00b883a 	mov	r5,r22
  80c3a0:	d9800c04 	addi	r6,sp,48
  80c3a4:	080ab180 	call	80ab18 <__sprint_r>
  80c3a8:	103ba91e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80c3ac:	dc800e17 	ldw	r18,56(sp)
  80c3b0:	dc400d17 	ldw	r17,52(sp)
  80c3b4:	d9000517 	ldw	r4,20(sp)
  80c3b8:	d9401904 	addi	r5,sp,100
  80c3bc:	003da706 	br	80ba5c <___vfprintf_internal_r+0xeec>
  80c3c0:	d9014f17 	ldw	r4,1340(sp)
  80c3c4:	b00b883a 	mov	r5,r22
  80c3c8:	d9800c04 	addi	r6,sp,48
  80c3cc:	080ab180 	call	80ab18 <__sprint_r>
  80c3d0:	103b9f1e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80c3d4:	dc800e17 	ldw	r18,56(sp)
  80c3d8:	dc400d17 	ldw	r17,52(sp)
  80c3dc:	d9000517 	ldw	r4,20(sp)
  80c3e0:	d8c01904 	addi	r3,sp,100
  80c3e4:	003d9106 	br	80ba2c <___vfprintf_internal_r+0xebc>
  80c3e8:	070020b4 	movhi	fp,130
  80c3ec:	e734af84 	addi	fp,fp,-11586
  80c3f0:	9425883a 	add	r18,r18,r16
  80c3f4:	8c400044 	addi	r17,r17,1
  80c3f8:	008001c4 	movi	r2,7
  80c3fc:	1f000015 	stw	fp,0(r3)
  80c400:	1c000115 	stw	r16,4(r3)
  80c404:	dc800e15 	stw	r18,56(sp)
  80c408:	dc400d15 	stw	r17,52(sp)
  80c40c:	147fbc16 	blt	r2,r17,80c300 <___vfprintf_internal_r+0x1790>
  80c410:	18c00204 	addi	r3,r3,8
  80c414:	003fc206 	br	80c320 <___vfprintf_internal_r+0x17b0>
  80c418:	d9014f17 	ldw	r4,1340(sp)
  80c41c:	b00b883a 	mov	r5,r22
  80c420:	d9800c04 	addi	r6,sp,48
  80c424:	080ab180 	call	80ab18 <__sprint_r>
  80c428:	103b891e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80c42c:	dc800e17 	ldw	r18,56(sp)
  80c430:	d9000517 	ldw	r4,20(sp)
  80c434:	d8c01904 	addi	r3,sp,100
  80c438:	003d0206 	br	80b844 <___vfprintf_internal_r+0xcd4>
  80c43c:	070020b4 	movhi	fp,130
  80c440:	e734af84 	addi	fp,fp,-11586
  80c444:	003be406 	br	80b3d8 <___vfprintf_internal_r+0x868>
  80c448:	008020b4 	movhi	r2,130
  80c44c:	10b49e04 	addi	r2,r2,-11656
  80c450:	d8814115 	stw	r2,1284(sp)
  80c454:	003df506 	br	80bc2c <___vfprintf_internal_r+0x10bc>
  80c458:	d9014217 	ldw	r4,1288(sp)
  80c45c:	d9414317 	ldw	r5,1292(sp)
  80c460:	08080740 	call	808074 <__isnand>
  80c464:	10003926 	beq	r2,zero,80c54c <___vfprintf_internal_r+0x19dc>
  80c468:	d9414d17 	ldw	r5,1332(sp)
  80c46c:	008011c4 	movi	r2,71
  80c470:	1140ce16 	blt	r2,r5,80c7ac <___vfprintf_internal_r+0x1c3c>
  80c474:	018020b4 	movhi	r6,130
  80c478:	31b49f04 	addi	r6,r6,-11652
  80c47c:	d9814115 	stw	r6,1284(sp)
  80c480:	003dea06 	br	80bc2c <___vfprintf_internal_r+0x10bc>
  80c484:	d9014c17 	ldw	r4,1328(sp)
  80c488:	bdc00044 	addi	r23,r23,1
  80c48c:	b8c00007 	ldb	r3,0(r23)
  80c490:	21000814 	ori	r4,r4,32
  80c494:	d9014c15 	stw	r4,1328(sp)
  80c498:	003a3406 	br	80ad6c <___vfprintf_internal_r+0x1fc>
  80c49c:	dcc14515 	stw	r19,1300(sp)
  80c4a0:	98011016 	blt	r19,zero,80c8e4 <___vfprintf_internal_r+0x1d74>
  80c4a4:	980f883a 	mov	r7,r19
  80c4a8:	d8014615 	stw	zero,1304(sp)
  80c4ac:	003c5206 	br	80b5f8 <___vfprintf_internal_r+0xa88>
  80c4b0:	d9014f17 	ldw	r4,1340(sp)
  80c4b4:	b00b883a 	mov	r5,r22
  80c4b8:	d9800c04 	addi	r6,sp,48
  80c4bc:	080ab180 	call	80ab18 <__sprint_r>
  80c4c0:	103b631e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80c4c4:	dc800e17 	ldw	r18,56(sp)
  80c4c8:	d9000517 	ldw	r4,20(sp)
  80c4cc:	d8c01904 	addi	r3,sp,100
  80c4d0:	003f2e06 	br	80c18c <___vfprintf_internal_r+0x161c>
  80c4d4:	d8c14c17 	ldw	r3,1328(sp)
  80c4d8:	1880100c 	andi	r2,r3,64
  80c4dc:	1000a026 	beq	r2,zero,80c760 <___vfprintf_internal_r+0x1bf0>
  80c4e0:	38800017 	ldw	r2,0(r7)
  80c4e4:	39c00104 	addi	r7,r7,4
  80c4e8:	d9c14015 	stw	r7,1280(sp)
  80c4ec:	d9014b17 	ldw	r4,1324(sp)
  80c4f0:	d9c14017 	ldw	r7,1280(sp)
  80c4f4:	1100000d 	sth	r4,0(r2)
  80c4f8:	0039f906 	br	80ace0 <___vfprintf_internal_r+0x170>
  80c4fc:	d9014f17 	ldw	r4,1340(sp)
  80c500:	b00b883a 	mov	r5,r22
  80c504:	d9800c04 	addi	r6,sp,48
  80c508:	080ab180 	call	80ab18 <__sprint_r>
  80c50c:	103b501e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80c510:	dc800e17 	ldw	r18,56(sp)
  80c514:	dc400d17 	ldw	r17,52(sp)
  80c518:	d9000517 	ldw	r4,20(sp)
  80c51c:	d8c01904 	addi	r3,sp,100
  80c520:	003f2d06 	br	80c1d8 <___vfprintf_internal_r+0x1668>
  80c524:	00800184 	movi	r2,6
  80c528:	14c09a36 	bltu	r2,r19,80c794 <___vfprintf_internal_r+0x1c24>
  80c52c:	dcc14515 	stw	r19,1300(sp)
  80c530:	9800010e 	bge	r19,zero,80c538 <___vfprintf_internal_r+0x19c8>
  80c534:	d8014515 	stw	zero,1300(sp)
  80c538:	008020b4 	movhi	r2,130
  80c53c:	10b4a104 	addi	r2,r2,-11644
  80c540:	980f883a 	mov	r7,r19
  80c544:	d8814115 	stw	r2,1284(sp)
  80c548:	003a7806 	br	80af2c <___vfprintf_internal_r+0x3bc>
  80c54c:	00bfffc4 	movi	r2,-1
  80c550:	9880e226 	beq	r19,r2,80c8dc <___vfprintf_internal_r+0x1d6c>
  80c554:	d9414d17 	ldw	r5,1332(sp)
  80c558:	008019c4 	movi	r2,103
  80c55c:	2880dc26 	beq	r5,r2,80c8d0 <___vfprintf_internal_r+0x1d60>
  80c560:	008011c4 	movi	r2,71
  80c564:	2880da26 	beq	r5,r2,80c8d0 <___vfprintf_internal_r+0x1d60>
  80c568:	d9414c17 	ldw	r5,1328(sp)
  80c56c:	d9014317 	ldw	r4,1292(sp)
  80c570:	d9814217 	ldw	r6,1288(sp)
  80c574:	29404014 	ori	r5,r5,256
  80c578:	d9414c15 	stw	r5,1328(sp)
  80c57c:	2000cc16 	blt	r4,zero,80c8b0 <___vfprintf_internal_r+0x1d40>
  80c580:	3021883a 	mov	r16,r6
  80c584:	2023883a 	mov	r17,r4
  80c588:	0039883a 	mov	fp,zero
  80c58c:	d9414d17 	ldw	r5,1332(sp)
  80c590:	00801984 	movi	r2,102
  80c594:	2880b726 	beq	r5,r2,80c874 <___vfprintf_internal_r+0x1d04>
  80c598:	00801184 	movi	r2,70
  80c59c:	2880b526 	beq	r5,r2,80c874 <___vfprintf_internal_r+0x1d04>
  80c5a0:	00801944 	movi	r2,101
  80c5a4:	2880c826 	beq	r5,r2,80c8c8 <___vfprintf_internal_r+0x1d58>
  80c5a8:	00801144 	movi	r2,69
  80c5ac:	2880c626 	beq	r5,r2,80c8c8 <___vfprintf_internal_r+0x1d58>
  80c5b0:	9829883a 	mov	r20,r19
  80c5b4:	d9014f17 	ldw	r4,1340(sp)
  80c5b8:	d8800504 	addi	r2,sp,20
  80c5bc:	880d883a 	mov	r6,r17
  80c5c0:	d8800115 	stw	r2,4(sp)
  80c5c4:	d8c00604 	addi	r3,sp,24
  80c5c8:	d8800704 	addi	r2,sp,28
  80c5cc:	800b883a 	mov	r5,r16
  80c5d0:	01c00084 	movi	r7,2
  80c5d4:	d8c00215 	stw	r3,8(sp)
  80c5d8:	d8800315 	stw	r2,12(sp)
  80c5dc:	dd000015 	stw	r20,0(sp)
  80c5e0:	080cd940 	call	80cd94 <_dtoa_r>
  80c5e4:	d9814d17 	ldw	r6,1332(sp)
  80c5e8:	d8814115 	stw	r2,1284(sp)
  80c5ec:	008019c4 	movi	r2,103
  80c5f0:	30809526 	beq	r6,r2,80c848 <___vfprintf_internal_r+0x1cd8>
  80c5f4:	d8c14d17 	ldw	r3,1332(sp)
  80c5f8:	008011c4 	movi	r2,71
  80c5fc:	18809226 	beq	r3,r2,80c848 <___vfprintf_internal_r+0x1cd8>
  80c600:	d9414117 	ldw	r5,1284(sp)
  80c604:	d9814d17 	ldw	r6,1332(sp)
  80c608:	00801984 	movi	r2,102
  80c60c:	2d25883a 	add	r18,r5,r20
  80c610:	30808626 	beq	r6,r2,80c82c <___vfprintf_internal_r+0x1cbc>
  80c614:	00801184 	movi	r2,70
  80c618:	30808426 	beq	r6,r2,80c82c <___vfprintf_internal_r+0x1cbc>
  80c61c:	000d883a 	mov	r6,zero
  80c620:	000f883a 	mov	r7,zero
  80c624:	880b883a 	mov	r5,r17
  80c628:	8009883a 	mov	r4,r16
  80c62c:	08092500 	call	809250 <__eqdf2>
  80c630:	1000751e 	bne	r2,zero,80c808 <___vfprintf_internal_r+0x1c98>
  80c634:	9005883a 	mov	r2,r18
  80c638:	dc800715 	stw	r18,28(sp)
  80c63c:	d9014117 	ldw	r4,1284(sp)
  80c640:	d9414d17 	ldw	r5,1332(sp)
  80c644:	00c019c4 	movi	r3,103
  80c648:	1125c83a 	sub	r18,r2,r4
  80c64c:	28c06826 	beq	r5,r3,80c7f0 <___vfprintf_internal_r+0x1c80>
  80c650:	008011c4 	movi	r2,71
  80c654:	28806626 	beq	r5,r2,80c7f0 <___vfprintf_internal_r+0x1c80>
  80c658:	d9000517 	ldw	r4,20(sp)
  80c65c:	d8c14d17 	ldw	r3,1332(sp)
  80c660:	00801944 	movi	r2,101
  80c664:	10c05516 	blt	r2,r3,80c7bc <___vfprintf_internal_r+0x1c4c>
  80c668:	213fffc4 	addi	r4,r4,-1
  80c66c:	d9000515 	stw	r4,20(sp)
  80c670:	d8c00805 	stb	r3,32(sp)
  80c674:	2021883a 	mov	r16,r4
  80c678:	2000c116 	blt	r4,zero,80c980 <___vfprintf_internal_r+0x1e10>
  80c67c:	00800ac4 	movi	r2,43
  80c680:	d8800845 	stb	r2,33(sp)
  80c684:	00800244 	movi	r2,9
  80c688:	1400af0e 	bge	r2,r16,80c948 <___vfprintf_internal_r+0x1dd8>
  80c68c:	1027883a 	mov	r19,r2
  80c690:	dc400b84 	addi	r17,sp,46
  80c694:	8009883a 	mov	r4,r16
  80c698:	01400284 	movi	r5,10
  80c69c:	08097dc0 	call	8097dc <__modsi3>
  80c6a0:	10800c04 	addi	r2,r2,48
  80c6a4:	8c7fffc4 	addi	r17,r17,-1
  80c6a8:	8009883a 	mov	r4,r16
  80c6ac:	01400284 	movi	r5,10
  80c6b0:	88800005 	stb	r2,0(r17)
  80c6b4:	080977c0 	call	80977c <__divsi3>
  80c6b8:	1021883a 	mov	r16,r2
  80c6bc:	98bff516 	blt	r19,r2,80c694 <___vfprintf_internal_r+0x1b24>
  80c6c0:	10c00c04 	addi	r3,r2,48
  80c6c4:	d88009c4 	addi	r2,sp,39
  80c6c8:	108001c4 	addi	r2,r2,7
  80c6cc:	897fffc4 	addi	r5,r17,-1
  80c6d0:	88ffffc5 	stb	r3,-1(r17)
  80c6d4:	2880a72e 	bgeu	r5,r2,80c974 <___vfprintf_internal_r+0x1e04>
  80c6d8:	1009883a 	mov	r4,r2
  80c6dc:	d9800804 	addi	r6,sp,32
  80c6e0:	d8c00884 	addi	r3,sp,34
  80c6e4:	28800003 	ldbu	r2,0(r5)
  80c6e8:	29400044 	addi	r5,r5,1
  80c6ec:	18800005 	stb	r2,0(r3)
  80c6f0:	18c00044 	addi	r3,r3,1
  80c6f4:	293ffb36 	bltu	r5,r4,80c6e4 <___vfprintf_internal_r+0x1b74>
  80c6f8:	1987c83a 	sub	r3,r3,r6
  80c6fc:	00800044 	movi	r2,1
  80c700:	d8c14815 	stw	r3,1312(sp)
  80c704:	90cf883a 	add	r7,r18,r3
  80c708:	1480960e 	bge	r2,r18,80c964 <___vfprintf_internal_r+0x1df4>
  80c70c:	39c00044 	addi	r7,r7,1
  80c710:	d9c14515 	stw	r7,1300(sp)
  80c714:	38003416 	blt	r7,zero,80c7e8 <___vfprintf_internal_r+0x1c78>
  80c718:	e0803fcc 	andi	r2,fp,255
  80c71c:	1080201c 	xori	r2,r2,128
  80c720:	10bfe004 	addi	r2,r2,-128
  80c724:	10004e26 	beq	r2,zero,80c860 <___vfprintf_internal_r+0x1cf0>
  80c728:	00800b44 	movi	r2,45
  80c72c:	dc814715 	stw	r18,1308(sp)
  80c730:	d8014615 	stw	zero,1304(sp)
  80c734:	d8800405 	stb	r2,16(sp)
  80c738:	003bb106 	br	80b600 <___vfprintf_internal_r+0xa90>
  80c73c:	00800b44 	movi	r2,45
  80c740:	d8800405 	stb	r2,16(sp)
  80c744:	003d3306 	br	80bc14 <___vfprintf_internal_r+0x10a4>
  80c748:	d9014f17 	ldw	r4,1340(sp)
  80c74c:	b00b883a 	mov	r5,r22
  80c750:	d9800c04 	addi	r6,sp,48
  80c754:	080ab180 	call	80ab18 <__sprint_r>
  80c758:	103abd1e 	bne	r2,zero,80b250 <___vfprintf_internal_r+0x6e0>
  80c75c:	003abb06 	br	80b24c <___vfprintf_internal_r+0x6dc>
  80c760:	38800017 	ldw	r2,0(r7)
  80c764:	39c00104 	addi	r7,r7,4
  80c768:	d9c14015 	stw	r7,1280(sp)
  80c76c:	d9414b17 	ldw	r5,1324(sp)
  80c770:	d9c14017 	ldw	r7,1280(sp)
  80c774:	11400015 	stw	r5,0(r2)
  80c778:	00395906 	br	80ace0 <___vfprintf_internal_r+0x170>
  80c77c:	980f883a 	mov	r7,r19
  80c780:	dcc14515 	stw	r19,1300(sp)
  80c784:	d8014615 	stw	zero,1304(sp)
  80c788:	003b9b06 	br	80b5f8 <___vfprintf_internal_r+0xa88>
  80c78c:	0027883a 	mov	r19,zero
  80c790:	00397806 	br	80ad74 <___vfprintf_internal_r+0x204>
  80c794:	00c020b4 	movhi	r3,130
  80c798:	18f4a104 	addi	r3,r3,-11644
  80c79c:	100f883a 	mov	r7,r2
  80c7a0:	d8814515 	stw	r2,1300(sp)
  80c7a4:	d8c14115 	stw	r3,1284(sp)
  80c7a8:	0039e006 	br	80af2c <___vfprintf_internal_r+0x3bc>
  80c7ac:	008020b4 	movhi	r2,130
  80c7b0:	10b4a004 	addi	r2,r2,-11648
  80c7b4:	d8814115 	stw	r2,1284(sp)
  80c7b8:	003d1c06 	br	80bc2c <___vfprintf_internal_r+0x10bc>
  80c7bc:	d9414d17 	ldw	r5,1332(sp)
  80c7c0:	00801984 	movi	r2,102
  80c7c4:	28804926 	beq	r5,r2,80c8ec <___vfprintf_internal_r+0x1d7c>
  80c7c8:	200f883a 	mov	r7,r4
  80c7cc:	24805716 	blt	r4,r18,80c92c <___vfprintf_internal_r+0x1dbc>
  80c7d0:	d9414c17 	ldw	r5,1328(sp)
  80c7d4:	2880004c 	andi	r2,r5,1
  80c7d8:	10000126 	beq	r2,zero,80c7e0 <___vfprintf_internal_r+0x1c70>
  80c7dc:	21c00044 	addi	r7,r4,1
  80c7e0:	d9c14515 	stw	r7,1300(sp)
  80c7e4:	383fcc0e 	bge	r7,zero,80c718 <___vfprintf_internal_r+0x1ba8>
  80c7e8:	d8014515 	stw	zero,1300(sp)
  80c7ec:	003fca06 	br	80c718 <___vfprintf_internal_r+0x1ba8>
  80c7f0:	d9000517 	ldw	r4,20(sp)
  80c7f4:	00bfff04 	movi	r2,-4
  80c7f8:	1100480e 	bge	r2,r4,80c91c <___vfprintf_internal_r+0x1dac>
  80c7fc:	99004716 	blt	r19,r4,80c91c <___vfprintf_internal_r+0x1dac>
  80c800:	d8c14d15 	stw	r3,1332(sp)
  80c804:	003ff006 	br	80c7c8 <___vfprintf_internal_r+0x1c58>
  80c808:	d8800717 	ldw	r2,28(sp)
  80c80c:	14bf8b2e 	bgeu	r2,r18,80c63c <___vfprintf_internal_r+0x1acc>
  80c810:	9007883a 	mov	r3,r18
  80c814:	01000c04 	movi	r4,48
  80c818:	11000005 	stb	r4,0(r2)
  80c81c:	10800044 	addi	r2,r2,1
  80c820:	d8800715 	stw	r2,28(sp)
  80c824:	18bffc1e 	bne	r3,r2,80c818 <___vfprintf_internal_r+0x1ca8>
  80c828:	003f8406 	br	80c63c <___vfprintf_internal_r+0x1acc>
  80c82c:	d8814117 	ldw	r2,1284(sp)
  80c830:	10c00007 	ldb	r3,0(r2)
  80c834:	00800c04 	movi	r2,48
  80c838:	18805b26 	beq	r3,r2,80c9a8 <___vfprintf_internal_r+0x1e38>
  80c83c:	d9000517 	ldw	r4,20(sp)
  80c840:	9125883a 	add	r18,r18,r4
  80c844:	003f7506 	br	80c61c <___vfprintf_internal_r+0x1aac>
  80c848:	d9014c17 	ldw	r4,1328(sp)
  80c84c:	2080004c 	andi	r2,r4,1
  80c850:	1005003a 	cmpeq	r2,r2,zero
  80c854:	103f6a26 	beq	r2,zero,80c600 <___vfprintf_internal_r+0x1a90>
  80c858:	d8800717 	ldw	r2,28(sp)
  80c85c:	003f7706 	br	80c63c <___vfprintf_internal_r+0x1acc>
  80c860:	d9c14515 	stw	r7,1300(sp)
  80c864:	38004d16 	blt	r7,zero,80c99c <___vfprintf_internal_r+0x1e2c>
  80c868:	dc814715 	stw	r18,1308(sp)
  80c86c:	d8014615 	stw	zero,1304(sp)
  80c870:	003b6106 	br	80b5f8 <___vfprintf_internal_r+0xa88>
  80c874:	d9014f17 	ldw	r4,1340(sp)
  80c878:	d8800504 	addi	r2,sp,20
  80c87c:	d8800115 	stw	r2,4(sp)
  80c880:	d8c00604 	addi	r3,sp,24
  80c884:	d8800704 	addi	r2,sp,28
  80c888:	800b883a 	mov	r5,r16
  80c88c:	880d883a 	mov	r6,r17
  80c890:	01c000c4 	movi	r7,3
  80c894:	d8c00215 	stw	r3,8(sp)
  80c898:	d8800315 	stw	r2,12(sp)
  80c89c:	dcc00015 	stw	r19,0(sp)
  80c8a0:	9829883a 	mov	r20,r19
  80c8a4:	080cd940 	call	80cd94 <_dtoa_r>
  80c8a8:	d8814115 	stw	r2,1284(sp)
  80c8ac:	003f5106 	br	80c5f4 <___vfprintf_internal_r+0x1a84>
  80c8b0:	d8c14217 	ldw	r3,1288(sp)
  80c8b4:	d9014317 	ldw	r4,1292(sp)
  80c8b8:	07000b44 	movi	fp,45
  80c8bc:	1821883a 	mov	r16,r3
  80c8c0:	2460003c 	xorhi	r17,r4,32768
  80c8c4:	003f3106 	br	80c58c <___vfprintf_internal_r+0x1a1c>
  80c8c8:	9d000044 	addi	r20,r19,1
  80c8cc:	003f3906 	br	80c5b4 <___vfprintf_internal_r+0x1a44>
  80c8d0:	983f251e 	bne	r19,zero,80c568 <___vfprintf_internal_r+0x19f8>
  80c8d4:	04c00044 	movi	r19,1
  80c8d8:	003f2306 	br	80c568 <___vfprintf_internal_r+0x19f8>
  80c8dc:	04c00184 	movi	r19,6
  80c8e0:	003f2106 	br	80c568 <___vfprintf_internal_r+0x19f8>
  80c8e4:	d8014515 	stw	zero,1300(sp)
  80c8e8:	003eee06 	br	80c4a4 <___vfprintf_internal_r+0x1934>
  80c8ec:	200f883a 	mov	r7,r4
  80c8f0:	0100370e 	bge	zero,r4,80c9d0 <___vfprintf_internal_r+0x1e60>
  80c8f4:	9800031e 	bne	r19,zero,80c904 <___vfprintf_internal_r+0x1d94>
  80c8f8:	d9814c17 	ldw	r6,1328(sp)
  80c8fc:	3080004c 	andi	r2,r6,1
  80c900:	103fb726 	beq	r2,zero,80c7e0 <___vfprintf_internal_r+0x1c70>
  80c904:	20800044 	addi	r2,r4,1
  80c908:	98a7883a 	add	r19,r19,r2
  80c90c:	dcc14515 	stw	r19,1300(sp)
  80c910:	980f883a 	mov	r7,r19
  80c914:	983f800e 	bge	r19,zero,80c718 <___vfprintf_internal_r+0x1ba8>
  80c918:	003fb306 	br	80c7e8 <___vfprintf_internal_r+0x1c78>
  80c91c:	d9814d17 	ldw	r6,1332(sp)
  80c920:	31bfff84 	addi	r6,r6,-2
  80c924:	d9814d15 	stw	r6,1332(sp)
  80c928:	003f4c06 	br	80c65c <___vfprintf_internal_r+0x1aec>
  80c92c:	0100180e 	bge	zero,r4,80c990 <___vfprintf_internal_r+0x1e20>
  80c930:	00800044 	movi	r2,1
  80c934:	1485883a 	add	r2,r2,r18
  80c938:	d8814515 	stw	r2,1300(sp)
  80c93c:	100f883a 	mov	r7,r2
  80c940:	103f750e 	bge	r2,zero,80c718 <___vfprintf_internal_r+0x1ba8>
  80c944:	003fa806 	br	80c7e8 <___vfprintf_internal_r+0x1c78>
  80c948:	80c00c04 	addi	r3,r16,48
  80c94c:	00800c04 	movi	r2,48
  80c950:	d8c008c5 	stb	r3,35(sp)
  80c954:	d9800804 	addi	r6,sp,32
  80c958:	d8c00904 	addi	r3,sp,36
  80c95c:	d8800885 	stb	r2,34(sp)
  80c960:	003f6506 	br	80c6f8 <___vfprintf_internal_r+0x1b88>
  80c964:	d9014c17 	ldw	r4,1328(sp)
  80c968:	2084703a 	and	r2,r4,r2
  80c96c:	103f9c26 	beq	r2,zero,80c7e0 <___vfprintf_internal_r+0x1c70>
  80c970:	003f6606 	br	80c70c <___vfprintf_internal_r+0x1b9c>
  80c974:	d9800804 	addi	r6,sp,32
  80c978:	d8c00884 	addi	r3,sp,34
  80c97c:	003f5e06 	br	80c6f8 <___vfprintf_internal_r+0x1b88>
  80c980:	00800b44 	movi	r2,45
  80c984:	0121c83a 	sub	r16,zero,r4
  80c988:	d8800845 	stb	r2,33(sp)
  80c98c:	003f3d06 	br	80c684 <___vfprintf_internal_r+0x1b14>
  80c990:	00800084 	movi	r2,2
  80c994:	1105c83a 	sub	r2,r2,r4
  80c998:	003fe606 	br	80c934 <___vfprintf_internal_r+0x1dc4>
  80c99c:	d8014515 	stw	zero,1300(sp)
  80c9a0:	dc814715 	stw	r18,1308(sp)
  80c9a4:	003fb106 	br	80c86c <___vfprintf_internal_r+0x1cfc>
  80c9a8:	000d883a 	mov	r6,zero
  80c9ac:	000f883a 	mov	r7,zero
  80c9b0:	8009883a 	mov	r4,r16
  80c9b4:	880b883a 	mov	r5,r17
  80c9b8:	08092d80 	call	8092d8 <__nedf2>
  80c9bc:	103f9f26 	beq	r2,zero,80c83c <___vfprintf_internal_r+0x1ccc>
  80c9c0:	00800044 	movi	r2,1
  80c9c4:	1509c83a 	sub	r4,r2,r20
  80c9c8:	d9000515 	stw	r4,20(sp)
  80c9cc:	003f9b06 	br	80c83c <___vfprintf_internal_r+0x1ccc>
  80c9d0:	98000d1e 	bne	r19,zero,80ca08 <___vfprintf_internal_r+0x1e98>
  80c9d4:	d8c14c17 	ldw	r3,1328(sp)
  80c9d8:	1880004c 	andi	r2,r3,1
  80c9dc:	10000a1e 	bne	r2,zero,80ca08 <___vfprintf_internal_r+0x1e98>
  80c9e0:	01000044 	movi	r4,1
  80c9e4:	200f883a 	mov	r7,r4
  80c9e8:	d9014515 	stw	r4,1300(sp)
  80c9ec:	003f4a06 	br	80c718 <___vfprintf_internal_r+0x1ba8>
  80c9f0:	3cc00017 	ldw	r19,0(r7)
  80c9f4:	39c00104 	addi	r7,r7,4
  80c9f8:	983d0e0e 	bge	r19,zero,80be34 <___vfprintf_internal_r+0x12c4>
  80c9fc:	b8c00007 	ldb	r3,0(r23)
  80ca00:	04ffffc4 	movi	r19,-1
  80ca04:	0038d906 	br	80ad6c <___vfprintf_internal_r+0x1fc>
  80ca08:	9cc00084 	addi	r19,r19,2
  80ca0c:	dcc14515 	stw	r19,1300(sp)
  80ca10:	980f883a 	mov	r7,r19
  80ca14:	983f400e 	bge	r19,zero,80c718 <___vfprintf_internal_r+0x1ba8>
  80ca18:	003f7306 	br	80c7e8 <___vfprintf_internal_r+0x1c78>

0080ca1c <__vfprintf_internal>:
  80ca1c:	008020b4 	movhi	r2,130
  80ca20:	10bc3904 	addi	r2,r2,-3868
  80ca24:	2013883a 	mov	r9,r4
  80ca28:	11000017 	ldw	r4,0(r2)
  80ca2c:	2805883a 	mov	r2,r5
  80ca30:	300f883a 	mov	r7,r6
  80ca34:	480b883a 	mov	r5,r9
  80ca38:	100d883a 	mov	r6,r2
  80ca3c:	080ab701 	jmpi	80ab70 <___vfprintf_internal_r>

0080ca40 <__swsetup_r>:
  80ca40:	008020b4 	movhi	r2,130
  80ca44:	10bc3904 	addi	r2,r2,-3868
  80ca48:	10c00017 	ldw	r3,0(r2)
  80ca4c:	defffd04 	addi	sp,sp,-12
  80ca50:	dc400115 	stw	r17,4(sp)
  80ca54:	dc000015 	stw	r16,0(sp)
  80ca58:	dfc00215 	stw	ra,8(sp)
  80ca5c:	2023883a 	mov	r17,r4
  80ca60:	2821883a 	mov	r16,r5
  80ca64:	18000226 	beq	r3,zero,80ca70 <__swsetup_r+0x30>
  80ca68:	18800e17 	ldw	r2,56(r3)
  80ca6c:	10001f26 	beq	r2,zero,80caec <__swsetup_r+0xac>
  80ca70:	8100030b 	ldhu	r4,12(r16)
  80ca74:	2080020c 	andi	r2,r4,8
  80ca78:	10002826 	beq	r2,zero,80cb1c <__swsetup_r+0xdc>
  80ca7c:	81400417 	ldw	r5,16(r16)
  80ca80:	28001d26 	beq	r5,zero,80caf8 <__swsetup_r+0xb8>
  80ca84:	2080004c 	andi	r2,r4,1
  80ca88:	1005003a 	cmpeq	r2,r2,zero
  80ca8c:	10000b26 	beq	r2,zero,80cabc <__swsetup_r+0x7c>
  80ca90:	2080008c 	andi	r2,r4,2
  80ca94:	10001226 	beq	r2,zero,80cae0 <__swsetup_r+0xa0>
  80ca98:	0005883a 	mov	r2,zero
  80ca9c:	80800215 	stw	r2,8(r16)
  80caa0:	28000b26 	beq	r5,zero,80cad0 <__swsetup_r+0x90>
  80caa4:	0005883a 	mov	r2,zero
  80caa8:	dfc00217 	ldw	ra,8(sp)
  80caac:	dc400117 	ldw	r17,4(sp)
  80cab0:	dc000017 	ldw	r16,0(sp)
  80cab4:	dec00304 	addi	sp,sp,12
  80cab8:	f800283a 	ret
  80cabc:	80800517 	ldw	r2,20(r16)
  80cac0:	80000215 	stw	zero,8(r16)
  80cac4:	0085c83a 	sub	r2,zero,r2
  80cac8:	80800615 	stw	r2,24(r16)
  80cacc:	283ff51e 	bne	r5,zero,80caa4 <__swsetup_r+0x64>
  80cad0:	2080200c 	andi	r2,r4,128
  80cad4:	103ff326 	beq	r2,zero,80caa4 <__swsetup_r+0x64>
  80cad8:	00bfffc4 	movi	r2,-1
  80cadc:	003ff206 	br	80caa8 <__swsetup_r+0x68>
  80cae0:	80800517 	ldw	r2,20(r16)
  80cae4:	80800215 	stw	r2,8(r16)
  80cae8:	003fed06 	br	80caa0 <__swsetup_r+0x60>
  80caec:	1809883a 	mov	r4,r3
  80caf0:	080e5e00 	call	80e5e0 <__sinit>
  80caf4:	003fde06 	br	80ca70 <__swsetup_r+0x30>
  80caf8:	20c0a00c 	andi	r3,r4,640
  80cafc:	00808004 	movi	r2,512
  80cb00:	18bfe026 	beq	r3,r2,80ca84 <__swsetup_r+0x44>
  80cb04:	8809883a 	mov	r4,r17
  80cb08:	800b883a 	mov	r5,r16
  80cb0c:	080f3cc0 	call	80f3cc <__smakebuf_r>
  80cb10:	8100030b 	ldhu	r4,12(r16)
  80cb14:	81400417 	ldw	r5,16(r16)
  80cb18:	003fda06 	br	80ca84 <__swsetup_r+0x44>
  80cb1c:	2080040c 	andi	r2,r4,16
  80cb20:	103fed26 	beq	r2,zero,80cad8 <__swsetup_r+0x98>
  80cb24:	2080010c 	andi	r2,r4,4
  80cb28:	10001226 	beq	r2,zero,80cb74 <__swsetup_r+0x134>
  80cb2c:	81400c17 	ldw	r5,48(r16)
  80cb30:	28000526 	beq	r5,zero,80cb48 <__swsetup_r+0x108>
  80cb34:	80801004 	addi	r2,r16,64
  80cb38:	28800226 	beq	r5,r2,80cb44 <__swsetup_r+0x104>
  80cb3c:	8809883a 	mov	r4,r17
  80cb40:	080e9640 	call	80e964 <_free_r>
  80cb44:	80000c15 	stw	zero,48(r16)
  80cb48:	8080030b 	ldhu	r2,12(r16)
  80cb4c:	81400417 	ldw	r5,16(r16)
  80cb50:	80000115 	stw	zero,4(r16)
  80cb54:	10bff6cc 	andi	r2,r2,65499
  80cb58:	8080030d 	sth	r2,12(r16)
  80cb5c:	81400015 	stw	r5,0(r16)
  80cb60:	8080030b 	ldhu	r2,12(r16)
  80cb64:	10800214 	ori	r2,r2,8
  80cb68:	113fffcc 	andi	r4,r2,65535
  80cb6c:	8080030d 	sth	r2,12(r16)
  80cb70:	003fc306 	br	80ca80 <__swsetup_r+0x40>
  80cb74:	81400417 	ldw	r5,16(r16)
  80cb78:	003ff906 	br	80cb60 <__swsetup_r+0x120>

0080cb7c <quorem>:
  80cb7c:	28c00417 	ldw	r3,16(r5)
  80cb80:	20800417 	ldw	r2,16(r4)
  80cb84:	defff604 	addi	sp,sp,-40
  80cb88:	ddc00715 	stw	r23,28(sp)
  80cb8c:	dd400515 	stw	r21,20(sp)
  80cb90:	dfc00915 	stw	ra,36(sp)
  80cb94:	df000815 	stw	fp,32(sp)
  80cb98:	dd800615 	stw	r22,24(sp)
  80cb9c:	dd000415 	stw	r20,16(sp)
  80cba0:	dcc00315 	stw	r19,12(sp)
  80cba4:	dc800215 	stw	r18,8(sp)
  80cba8:	dc400115 	stw	r17,4(sp)
  80cbac:	dc000015 	stw	r16,0(sp)
  80cbb0:	202f883a 	mov	r23,r4
  80cbb4:	282b883a 	mov	r21,r5
  80cbb8:	10c07416 	blt	r2,r3,80cd8c <quorem+0x210>
  80cbbc:	1c7fffc4 	addi	r17,r3,-1
  80cbc0:	8c45883a 	add	r2,r17,r17
  80cbc4:	1085883a 	add	r2,r2,r2
  80cbc8:	2c000504 	addi	r16,r5,20
  80cbcc:	24c00504 	addi	r19,r4,20
  80cbd0:	14ed883a 	add	r22,r2,r19
  80cbd4:	80a5883a 	add	r18,r16,r2
  80cbd8:	b7000017 	ldw	fp,0(r22)
  80cbdc:	91400017 	ldw	r5,0(r18)
  80cbe0:	e009883a 	mov	r4,fp
  80cbe4:	29400044 	addi	r5,r5,1
  80cbe8:	080983c0 	call	80983c <__udivsi3>
  80cbec:	1029883a 	mov	r20,r2
  80cbf0:	10003c1e 	bne	r2,zero,80cce4 <quorem+0x168>
  80cbf4:	a80b883a 	mov	r5,r21
  80cbf8:	b809883a 	mov	r4,r23
  80cbfc:	080f9b80 	call	80f9b8 <__mcmp>
  80cc00:	10002b16 	blt	r2,zero,80ccb0 <quorem+0x134>
  80cc04:	a5000044 	addi	r20,r20,1
  80cc08:	980f883a 	mov	r7,r19
  80cc0c:	0011883a 	mov	r8,zero
  80cc10:	0009883a 	mov	r4,zero
  80cc14:	81400017 	ldw	r5,0(r16)
  80cc18:	38c00017 	ldw	r3,0(r7)
  80cc1c:	84000104 	addi	r16,r16,4
  80cc20:	28bfffcc 	andi	r2,r5,65535
  80cc24:	2085883a 	add	r2,r4,r2
  80cc28:	11bfffcc 	andi	r6,r2,65535
  80cc2c:	193fffcc 	andi	r4,r3,65535
  80cc30:	1004d43a 	srli	r2,r2,16
  80cc34:	280ad43a 	srli	r5,r5,16
  80cc38:	2189c83a 	sub	r4,r4,r6
  80cc3c:	2209883a 	add	r4,r4,r8
  80cc40:	1806d43a 	srli	r3,r3,16
  80cc44:	288b883a 	add	r5,r5,r2
  80cc48:	200dd43a 	srai	r6,r4,16
  80cc4c:	28bfffcc 	andi	r2,r5,65535
  80cc50:	1887c83a 	sub	r3,r3,r2
  80cc54:	1987883a 	add	r3,r3,r6
  80cc58:	3900000d 	sth	r4,0(r7)
  80cc5c:	38c0008d 	sth	r3,2(r7)
  80cc60:	2808d43a 	srli	r4,r5,16
  80cc64:	39c00104 	addi	r7,r7,4
  80cc68:	1811d43a 	srai	r8,r3,16
  80cc6c:	943fe92e 	bgeu	r18,r16,80cc14 <quorem+0x98>
  80cc70:	8c45883a 	add	r2,r17,r17
  80cc74:	1085883a 	add	r2,r2,r2
  80cc78:	9885883a 	add	r2,r19,r2
  80cc7c:	10c00017 	ldw	r3,0(r2)
  80cc80:	18000b1e 	bne	r3,zero,80ccb0 <quorem+0x134>
  80cc84:	113fff04 	addi	r4,r2,-4
  80cc88:	9900082e 	bgeu	r19,r4,80ccac <quorem+0x130>
  80cc8c:	10bfff17 	ldw	r2,-4(r2)
  80cc90:	10000326 	beq	r2,zero,80cca0 <quorem+0x124>
  80cc94:	00000506 	br	80ccac <quorem+0x130>
  80cc98:	20800017 	ldw	r2,0(r4)
  80cc9c:	1000031e 	bne	r2,zero,80ccac <quorem+0x130>
  80cca0:	213fff04 	addi	r4,r4,-4
  80cca4:	8c7fffc4 	addi	r17,r17,-1
  80cca8:	993ffb36 	bltu	r19,r4,80cc98 <quorem+0x11c>
  80ccac:	bc400415 	stw	r17,16(r23)
  80ccb0:	a005883a 	mov	r2,r20
  80ccb4:	dfc00917 	ldw	ra,36(sp)
  80ccb8:	df000817 	ldw	fp,32(sp)
  80ccbc:	ddc00717 	ldw	r23,28(sp)
  80ccc0:	dd800617 	ldw	r22,24(sp)
  80ccc4:	dd400517 	ldw	r21,20(sp)
  80ccc8:	dd000417 	ldw	r20,16(sp)
  80cccc:	dcc00317 	ldw	r19,12(sp)
  80ccd0:	dc800217 	ldw	r18,8(sp)
  80ccd4:	dc400117 	ldw	r17,4(sp)
  80ccd8:	dc000017 	ldw	r16,0(sp)
  80ccdc:	dec00a04 	addi	sp,sp,40
  80cce0:	f800283a 	ret
  80cce4:	980f883a 	mov	r7,r19
  80cce8:	8011883a 	mov	r8,r16
  80ccec:	0013883a 	mov	r9,zero
  80ccf0:	000d883a 	mov	r6,zero
  80ccf4:	40c00017 	ldw	r3,0(r8)
  80ccf8:	39000017 	ldw	r4,0(r7)
  80ccfc:	42000104 	addi	r8,r8,4
  80cd00:	18bfffcc 	andi	r2,r3,65535
  80cd04:	a085383a 	mul	r2,r20,r2
  80cd08:	1806d43a 	srli	r3,r3,16
  80cd0c:	217fffcc 	andi	r5,r4,65535
  80cd10:	3085883a 	add	r2,r6,r2
  80cd14:	11bfffcc 	andi	r6,r2,65535
  80cd18:	a0c7383a 	mul	r3,r20,r3
  80cd1c:	1004d43a 	srli	r2,r2,16
  80cd20:	298bc83a 	sub	r5,r5,r6
  80cd24:	2a4b883a 	add	r5,r5,r9
  80cd28:	2008d43a 	srli	r4,r4,16
  80cd2c:	1887883a 	add	r3,r3,r2
  80cd30:	280dd43a 	srai	r6,r5,16
  80cd34:	18bfffcc 	andi	r2,r3,65535
  80cd38:	2089c83a 	sub	r4,r4,r2
  80cd3c:	2189883a 	add	r4,r4,r6
  80cd40:	3900008d 	sth	r4,2(r7)
  80cd44:	3940000d 	sth	r5,0(r7)
  80cd48:	180cd43a 	srli	r6,r3,16
  80cd4c:	39c00104 	addi	r7,r7,4
  80cd50:	2013d43a 	srai	r9,r4,16
  80cd54:	923fe72e 	bgeu	r18,r8,80ccf4 <quorem+0x178>
  80cd58:	e03fa61e 	bne	fp,zero,80cbf4 <quorem+0x78>
  80cd5c:	b0ffff04 	addi	r3,r22,-4
  80cd60:	98c0082e 	bgeu	r19,r3,80cd84 <quorem+0x208>
  80cd64:	b0bfff17 	ldw	r2,-4(r22)
  80cd68:	10000326 	beq	r2,zero,80cd78 <quorem+0x1fc>
  80cd6c:	00000506 	br	80cd84 <quorem+0x208>
  80cd70:	18800017 	ldw	r2,0(r3)
  80cd74:	1000031e 	bne	r2,zero,80cd84 <quorem+0x208>
  80cd78:	18ffff04 	addi	r3,r3,-4
  80cd7c:	8c7fffc4 	addi	r17,r17,-1
  80cd80:	98fffb36 	bltu	r19,r3,80cd70 <quorem+0x1f4>
  80cd84:	bc400415 	stw	r17,16(r23)
  80cd88:	003f9a06 	br	80cbf4 <quorem+0x78>
  80cd8c:	0005883a 	mov	r2,zero
  80cd90:	003fc806 	br	80ccb4 <quorem+0x138>

0080cd94 <_dtoa_r>:
  80cd94:	22001017 	ldw	r8,64(r4)
  80cd98:	deffda04 	addi	sp,sp,-152
  80cd9c:	dd402115 	stw	r21,132(sp)
  80cda0:	dd002015 	stw	r20,128(sp)
  80cda4:	dc801e15 	stw	r18,120(sp)
  80cda8:	dc401d15 	stw	r17,116(sp)
  80cdac:	dfc02515 	stw	ra,148(sp)
  80cdb0:	df002415 	stw	fp,144(sp)
  80cdb4:	ddc02315 	stw	r23,140(sp)
  80cdb8:	dd802215 	stw	r22,136(sp)
  80cdbc:	dcc01f15 	stw	r19,124(sp)
  80cdc0:	dc001c15 	stw	r16,112(sp)
  80cdc4:	d9001615 	stw	r4,88(sp)
  80cdc8:	3023883a 	mov	r17,r6
  80cdcc:	2829883a 	mov	r20,r5
  80cdd0:	d9c01715 	stw	r7,92(sp)
  80cdd4:	dc802817 	ldw	r18,160(sp)
  80cdd8:	302b883a 	mov	r21,r6
  80cddc:	40000a26 	beq	r8,zero,80ce08 <_dtoa_r+0x74>
  80cde0:	20801117 	ldw	r2,68(r4)
  80cde4:	400b883a 	mov	r5,r8
  80cde8:	40800115 	stw	r2,4(r8)
  80cdec:	20c01117 	ldw	r3,68(r4)
  80cdf0:	00800044 	movi	r2,1
  80cdf4:	10c4983a 	sll	r2,r2,r3
  80cdf8:	40800215 	stw	r2,8(r8)
  80cdfc:	080f85c0 	call	80f85c <_Bfree>
  80ce00:	d8c01617 	ldw	r3,88(sp)
  80ce04:	18001015 	stw	zero,64(r3)
  80ce08:	8800a316 	blt	r17,zero,80d098 <_dtoa_r+0x304>
  80ce0c:	90000015 	stw	zero,0(r18)
  80ce10:	a8dffc2c 	andhi	r3,r21,32752
  80ce14:	009ffc34 	movhi	r2,32752
  80ce18:	18809126 	beq	r3,r2,80d060 <_dtoa_r+0x2cc>
  80ce1c:	000d883a 	mov	r6,zero
  80ce20:	000f883a 	mov	r7,zero
  80ce24:	a009883a 	mov	r4,r20
  80ce28:	a80b883a 	mov	r5,r21
  80ce2c:	dd001215 	stw	r20,72(sp)
  80ce30:	dd401315 	stw	r21,76(sp)
  80ce34:	08092d80 	call	8092d8 <__nedf2>
  80ce38:	1000171e 	bne	r2,zero,80ce98 <_dtoa_r+0x104>
  80ce3c:	d9802717 	ldw	r6,156(sp)
  80ce40:	00800044 	movi	r2,1
  80ce44:	30800015 	stw	r2,0(r6)
  80ce48:	d8802917 	ldw	r2,164(sp)
  80ce4c:	10029b26 	beq	r2,zero,80d8bc <_dtoa_r+0xb28>
  80ce50:	d9002917 	ldw	r4,164(sp)
  80ce54:	008020b4 	movhi	r2,130
  80ce58:	10b4af44 	addi	r2,r2,-11587
  80ce5c:	10ffffc4 	addi	r3,r2,-1
  80ce60:	20800015 	stw	r2,0(r4)
  80ce64:	1805883a 	mov	r2,r3
  80ce68:	dfc02517 	ldw	ra,148(sp)
  80ce6c:	df002417 	ldw	fp,144(sp)
  80ce70:	ddc02317 	ldw	r23,140(sp)
  80ce74:	dd802217 	ldw	r22,136(sp)
  80ce78:	dd402117 	ldw	r21,132(sp)
  80ce7c:	dd002017 	ldw	r20,128(sp)
  80ce80:	dcc01f17 	ldw	r19,124(sp)
  80ce84:	dc801e17 	ldw	r18,120(sp)
  80ce88:	dc401d17 	ldw	r17,116(sp)
  80ce8c:	dc001c17 	ldw	r16,112(sp)
  80ce90:	dec02604 	addi	sp,sp,152
  80ce94:	f800283a 	ret
  80ce98:	d9001617 	ldw	r4,88(sp)
  80ce9c:	d9401217 	ldw	r5,72(sp)
  80cea0:	d8800104 	addi	r2,sp,4
  80cea4:	a80d883a 	mov	r6,r21
  80cea8:	d9c00204 	addi	r7,sp,8
  80ceac:	d8800015 	stw	r2,0(sp)
  80ceb0:	080fe980 	call	80fe98 <__d2b>
  80ceb4:	d8800715 	stw	r2,28(sp)
  80ceb8:	a804d53a 	srli	r2,r21,20
  80cebc:	1101ffcc 	andi	r4,r2,2047
  80cec0:	20008626 	beq	r4,zero,80d0dc <_dtoa_r+0x348>
  80cec4:	d8c01217 	ldw	r3,72(sp)
  80cec8:	00800434 	movhi	r2,16
  80cecc:	10bfffc4 	addi	r2,r2,-1
  80ced0:	ddc00117 	ldw	r23,4(sp)
  80ced4:	a884703a 	and	r2,r21,r2
  80ced8:	1811883a 	mov	r8,r3
  80cedc:	124ffc34 	orhi	r9,r2,16368
  80cee0:	25bf0044 	addi	r22,r4,-1023
  80cee4:	d8000815 	stw	zero,32(sp)
  80cee8:	0005883a 	mov	r2,zero
  80ceec:	00cffe34 	movhi	r3,16376
  80cef0:	480b883a 	mov	r5,r9
  80cef4:	4009883a 	mov	r4,r8
  80cef8:	180f883a 	mov	r7,r3
  80cefc:	100d883a 	mov	r6,r2
  80cf00:	0808b400 	call	808b40 <__subdf3>
  80cf04:	0218dbf4 	movhi	r8,25455
  80cf08:	4210d844 	addi	r8,r8,17249
  80cf0c:	024ff4f4 	movhi	r9,16339
  80cf10:	4a61e9c4 	addi	r9,r9,-30809
  80cf14:	480f883a 	mov	r7,r9
  80cf18:	400d883a 	mov	r6,r8
  80cf1c:	180b883a 	mov	r5,r3
  80cf20:	1009883a 	mov	r4,r2
  80cf24:	0808c340 	call	808c34 <__muldf3>
  80cf28:	0222d874 	movhi	r8,35681
  80cf2c:	42322cc4 	addi	r8,r8,-14157
  80cf30:	024ff1f4 	movhi	r9,16327
  80cf34:	4a628a04 	addi	r9,r9,-30168
  80cf38:	480f883a 	mov	r7,r9
  80cf3c:	400d883a 	mov	r6,r8
  80cf40:	180b883a 	mov	r5,r3
  80cf44:	1009883a 	mov	r4,r2
  80cf48:	0808bc00 	call	808bc0 <__adddf3>
  80cf4c:	b009883a 	mov	r4,r22
  80cf50:	1021883a 	mov	r16,r2
  80cf54:	1823883a 	mov	r17,r3
  80cf58:	08094f80 	call	8094f8 <__floatsidf>
  80cf5c:	021427f4 	movhi	r8,20639
  80cf60:	421e7ec4 	addi	r8,r8,31227
  80cf64:	024ff4f4 	movhi	r9,16339
  80cf68:	4a5104c4 	addi	r9,r9,17427
  80cf6c:	480f883a 	mov	r7,r9
  80cf70:	400d883a 	mov	r6,r8
  80cf74:	180b883a 	mov	r5,r3
  80cf78:	1009883a 	mov	r4,r2
  80cf7c:	0808c340 	call	808c34 <__muldf3>
  80cf80:	180f883a 	mov	r7,r3
  80cf84:	880b883a 	mov	r5,r17
  80cf88:	100d883a 	mov	r6,r2
  80cf8c:	8009883a 	mov	r4,r16
  80cf90:	0808bc00 	call	808bc0 <__adddf3>
  80cf94:	1009883a 	mov	r4,r2
  80cf98:	180b883a 	mov	r5,r3
  80cf9c:	1021883a 	mov	r16,r2
  80cfa0:	1823883a 	mov	r17,r3
  80cfa4:	08095f00 	call	8095f0 <__fixdfsi>
  80cfa8:	000d883a 	mov	r6,zero
  80cfac:	000f883a 	mov	r7,zero
  80cfb0:	8009883a 	mov	r4,r16
  80cfb4:	880b883a 	mov	r5,r17
  80cfb8:	d8800d15 	stw	r2,52(sp)
  80cfbc:	08093e80 	call	8093e8 <__ltdf2>
  80cfc0:	10031716 	blt	r2,zero,80dc20 <_dtoa_r+0xe8c>
  80cfc4:	d8c00d17 	ldw	r3,52(sp)
  80cfc8:	00800584 	movi	r2,22
  80cfcc:	10c1482e 	bgeu	r2,r3,80d4f0 <_dtoa_r+0x75c>
  80cfd0:	01000044 	movi	r4,1
  80cfd4:	d9000c15 	stw	r4,48(sp)
  80cfd8:	bd85c83a 	sub	r2,r23,r22
  80cfdc:	11bfffc4 	addi	r6,r2,-1
  80cfe0:	30030b16 	blt	r6,zero,80dc10 <_dtoa_r+0xe7c>
  80cfe4:	d9800a15 	stw	r6,40(sp)
  80cfe8:	d8001115 	stw	zero,68(sp)
  80cfec:	d8c00d17 	ldw	r3,52(sp)
  80cff0:	1802ff16 	blt	r3,zero,80dbf0 <_dtoa_r+0xe5c>
  80cff4:	d9000a17 	ldw	r4,40(sp)
  80cff8:	d8c00915 	stw	r3,36(sp)
  80cffc:	d8001015 	stw	zero,64(sp)
  80d000:	20c9883a 	add	r4,r4,r3
  80d004:	d9000a15 	stw	r4,40(sp)
  80d008:	d9001717 	ldw	r4,92(sp)
  80d00c:	00800244 	movi	r2,9
  80d010:	11004636 	bltu	r2,r4,80d12c <_dtoa_r+0x398>
  80d014:	00800144 	movi	r2,5
  80d018:	11020416 	blt	r2,r4,80d82c <_dtoa_r+0xa98>
  80d01c:	04400044 	movi	r17,1
  80d020:	d8c01717 	ldw	r3,92(sp)
  80d024:	00800144 	movi	r2,5
  80d028:	10c1ed36 	bltu	r2,r3,80d7e0 <_dtoa_r+0xa4c>
  80d02c:	18c5883a 	add	r2,r3,r3
  80d030:	1085883a 	add	r2,r2,r2
  80d034:	00c02074 	movhi	r3,129
  80d038:	18f41204 	addi	r3,r3,-12216
  80d03c:	10c5883a 	add	r2,r2,r3
  80d040:	11000017 	ldw	r4,0(r2)
  80d044:	2000683a 	jmp	r4
  80d048:	0080d134 	movhi	r2,836
  80d04c:	0080d134 	movhi	r2,836
  80d050:	0080db34 	movhi	r2,876
  80d054:	0080db0c 	andi	r2,zero,876
  80d058:	0080db50 	cmplti	r2,zero,877
  80d05c:	0080db5c 	xori	r2,zero,877
  80d060:	d9002717 	ldw	r4,156(sp)
  80d064:	0089c3c4 	movi	r2,9999
  80d068:	20800015 	stw	r2,0(r4)
  80d06c:	a0001026 	beq	r20,zero,80d0b0 <_dtoa_r+0x31c>
  80d070:	00c020b4 	movhi	r3,130
  80d074:	18f4bb04 	addi	r3,r3,-11540
  80d078:	d9802917 	ldw	r6,164(sp)
  80d07c:	303f7926 	beq	r6,zero,80ce64 <_dtoa_r+0xd0>
  80d080:	188000c7 	ldb	r2,3(r3)
  80d084:	190000c4 	addi	r4,r3,3
  80d088:	1000101e 	bne	r2,zero,80d0cc <_dtoa_r+0x338>
  80d08c:	d8802917 	ldw	r2,164(sp)
  80d090:	11000015 	stw	r4,0(r2)
  80d094:	003f7306 	br	80ce64 <_dtoa_r+0xd0>
  80d098:	00a00034 	movhi	r2,32768
  80d09c:	10bfffc4 	addi	r2,r2,-1
  80d0a0:	00c00044 	movi	r3,1
  80d0a4:	88aa703a 	and	r21,r17,r2
  80d0a8:	90c00015 	stw	r3,0(r18)
  80d0ac:	003f5806 	br	80ce10 <_dtoa_r+0x7c>
  80d0b0:	00800434 	movhi	r2,16
  80d0b4:	10bfffc4 	addi	r2,r2,-1
  80d0b8:	a884703a 	and	r2,r21,r2
  80d0bc:	103fec1e 	bne	r2,zero,80d070 <_dtoa_r+0x2dc>
  80d0c0:	00c020b4 	movhi	r3,130
  80d0c4:	18f4b804 	addi	r3,r3,-11552
  80d0c8:	003feb06 	br	80d078 <_dtoa_r+0x2e4>
  80d0cc:	d8802917 	ldw	r2,164(sp)
  80d0d0:	19000204 	addi	r4,r3,8
  80d0d4:	11000015 	stw	r4,0(r2)
  80d0d8:	003f6206 	br	80ce64 <_dtoa_r+0xd0>
  80d0dc:	ddc00117 	ldw	r23,4(sp)
  80d0e0:	d8800217 	ldw	r2,8(sp)
  80d0e4:	01000804 	movi	r4,32
  80d0e8:	b8c10c84 	addi	r3,r23,1074
  80d0ec:	18a3883a 	add	r17,r3,r2
  80d0f0:	2441b80e 	bge	r4,r17,80d7d4 <_dtoa_r+0xa40>
  80d0f4:	00c01004 	movi	r3,64
  80d0f8:	1c47c83a 	sub	r3,r3,r17
  80d0fc:	88bff804 	addi	r2,r17,-32
  80d100:	a8c6983a 	sll	r3,r21,r3
  80d104:	a084d83a 	srl	r2,r20,r2
  80d108:	1888b03a 	or	r4,r3,r2
  80d10c:	08121340 	call	812134 <__floatunsidf>
  80d110:	1011883a 	mov	r8,r2
  80d114:	00bf8434 	movhi	r2,65040
  80d118:	01000044 	movi	r4,1
  80d11c:	10d3883a 	add	r9,r2,r3
  80d120:	8dbef344 	addi	r22,r17,-1075
  80d124:	d9000815 	stw	r4,32(sp)
  80d128:	003f6f06 	br	80cee8 <_dtoa_r+0x154>
  80d12c:	d8001715 	stw	zero,92(sp)
  80d130:	04400044 	movi	r17,1
  80d134:	00bfffc4 	movi	r2,-1
  80d138:	00c00044 	movi	r3,1
  80d13c:	d8800e15 	stw	r2,56(sp)
  80d140:	d8002615 	stw	zero,152(sp)
  80d144:	d8800f15 	stw	r2,60(sp)
  80d148:	d8c00b15 	stw	r3,44(sp)
  80d14c:	1021883a 	mov	r16,r2
  80d150:	d8801617 	ldw	r2,88(sp)
  80d154:	10001115 	stw	zero,68(r2)
  80d158:	d8801617 	ldw	r2,88(sp)
  80d15c:	11401117 	ldw	r5,68(r2)
  80d160:	1009883a 	mov	r4,r2
  80d164:	080fddc0 	call	80fddc <_Balloc>
  80d168:	d8c01617 	ldw	r3,88(sp)
  80d16c:	d8800515 	stw	r2,20(sp)
  80d170:	18801015 	stw	r2,64(r3)
  80d174:	00800384 	movi	r2,14
  80d178:	14006836 	bltu	r2,r16,80d31c <_dtoa_r+0x588>
  80d17c:	8805003a 	cmpeq	r2,r17,zero
  80d180:	1000661e 	bne	r2,zero,80d31c <_dtoa_r+0x588>
  80d184:	d9000d17 	ldw	r4,52(sp)
  80d188:	0102300e 	bge	zero,r4,80da4c <_dtoa_r+0xcb8>
  80d18c:	208003cc 	andi	r2,r4,15
  80d190:	100490fa 	slli	r2,r2,3
  80d194:	2025d13a 	srai	r18,r4,4
  80d198:	00c020b4 	movhi	r3,130
  80d19c:	18f4cc04 	addi	r3,r3,-11472
  80d1a0:	10c5883a 	add	r2,r2,r3
  80d1a4:	90c0040c 	andi	r3,r18,16
  80d1a8:	14000017 	ldw	r16,0(r2)
  80d1ac:	14400117 	ldw	r17,4(r2)
  80d1b0:	18036a1e 	bne	r3,zero,80df5c <_dtoa_r+0x11c8>
  80d1b4:	05800084 	movi	r22,2
  80d1b8:	90001026 	beq	r18,zero,80d1fc <_dtoa_r+0x468>
  80d1bc:	04c020b4 	movhi	r19,130
  80d1c0:	9cf4fe04 	addi	r19,r19,-11272
  80d1c4:	9080004c 	andi	r2,r18,1
  80d1c8:	1005003a 	cmpeq	r2,r2,zero
  80d1cc:	1000081e 	bne	r2,zero,80d1f0 <_dtoa_r+0x45c>
  80d1d0:	99800017 	ldw	r6,0(r19)
  80d1d4:	99c00117 	ldw	r7,4(r19)
  80d1d8:	880b883a 	mov	r5,r17
  80d1dc:	8009883a 	mov	r4,r16
  80d1e0:	0808c340 	call	808c34 <__muldf3>
  80d1e4:	1021883a 	mov	r16,r2
  80d1e8:	b5800044 	addi	r22,r22,1
  80d1ec:	1823883a 	mov	r17,r3
  80d1f0:	9025d07a 	srai	r18,r18,1
  80d1f4:	9cc00204 	addi	r19,r19,8
  80d1f8:	903ff21e 	bne	r18,zero,80d1c4 <_dtoa_r+0x430>
  80d1fc:	a80b883a 	mov	r5,r21
  80d200:	a009883a 	mov	r4,r20
  80d204:	880f883a 	mov	r7,r17
  80d208:	800d883a 	mov	r6,r16
  80d20c:	0808ff80 	call	808ff8 <__divdf3>
  80d210:	1029883a 	mov	r20,r2
  80d214:	182b883a 	mov	r21,r3
  80d218:	d8c00c17 	ldw	r3,48(sp)
  80d21c:	1805003a 	cmpeq	r2,r3,zero
  80d220:	1000081e 	bne	r2,zero,80d244 <_dtoa_r+0x4b0>
  80d224:	0005883a 	mov	r2,zero
  80d228:	00cffc34 	movhi	r3,16368
  80d22c:	180f883a 	mov	r7,r3
  80d230:	a009883a 	mov	r4,r20
  80d234:	a80b883a 	mov	r5,r21
  80d238:	100d883a 	mov	r6,r2
  80d23c:	08093e80 	call	8093e8 <__ltdf2>
  80d240:	1003fe16 	blt	r2,zero,80e23c <_dtoa_r+0x14a8>
  80d244:	b009883a 	mov	r4,r22
  80d248:	08094f80 	call	8094f8 <__floatsidf>
  80d24c:	180b883a 	mov	r5,r3
  80d250:	1009883a 	mov	r4,r2
  80d254:	a00d883a 	mov	r6,r20
  80d258:	a80f883a 	mov	r7,r21
  80d25c:	0808c340 	call	808c34 <__muldf3>
  80d260:	0011883a 	mov	r8,zero
  80d264:	02500734 	movhi	r9,16412
  80d268:	1009883a 	mov	r4,r2
  80d26c:	180b883a 	mov	r5,r3
  80d270:	480f883a 	mov	r7,r9
  80d274:	400d883a 	mov	r6,r8
  80d278:	0808bc00 	call	808bc0 <__adddf3>
  80d27c:	d9000f17 	ldw	r4,60(sp)
  80d280:	102d883a 	mov	r22,r2
  80d284:	00bf3034 	movhi	r2,64704
  80d288:	18b9883a 	add	fp,r3,r2
  80d28c:	e02f883a 	mov	r23,fp
  80d290:	20028f1e 	bne	r4,zero,80dcd0 <_dtoa_r+0xf3c>
  80d294:	0005883a 	mov	r2,zero
  80d298:	00d00534 	movhi	r3,16404
  80d29c:	a009883a 	mov	r4,r20
  80d2a0:	a80b883a 	mov	r5,r21
  80d2a4:	180f883a 	mov	r7,r3
  80d2a8:	100d883a 	mov	r6,r2
  80d2ac:	0808b400 	call	808b40 <__subdf3>
  80d2b0:	1009883a 	mov	r4,r2
  80d2b4:	e00f883a 	mov	r7,fp
  80d2b8:	180b883a 	mov	r5,r3
  80d2bc:	b00d883a 	mov	r6,r22
  80d2c0:	1025883a 	mov	r18,r2
  80d2c4:	1827883a 	mov	r19,r3
  80d2c8:	08093600 	call	809360 <__gtdf2>
  80d2cc:	00834f16 	blt	zero,r2,80e00c <_dtoa_r+0x1278>
  80d2d0:	e0e0003c 	xorhi	r3,fp,32768
  80d2d4:	9009883a 	mov	r4,r18
  80d2d8:	980b883a 	mov	r5,r19
  80d2dc:	180f883a 	mov	r7,r3
  80d2e0:	b00d883a 	mov	r6,r22
  80d2e4:	08093e80 	call	8093e8 <__ltdf2>
  80d2e8:	1000080e 	bge	r2,zero,80d30c <_dtoa_r+0x578>
  80d2ec:	0027883a 	mov	r19,zero
  80d2f0:	0025883a 	mov	r18,zero
  80d2f4:	d8802617 	ldw	r2,152(sp)
  80d2f8:	df000517 	ldw	fp,20(sp)
  80d2fc:	d8000615 	stw	zero,24(sp)
  80d300:	0084303a 	nor	r2,zero,r2
  80d304:	d8800d15 	stw	r2,52(sp)
  80d308:	00019b06 	br	80d978 <_dtoa_r+0xbe4>
  80d30c:	d9801217 	ldw	r6,72(sp)
  80d310:	d8801317 	ldw	r2,76(sp)
  80d314:	3029883a 	mov	r20,r6
  80d318:	102b883a 	mov	r21,r2
  80d31c:	d8c00217 	ldw	r3,8(sp)
  80d320:	18008516 	blt	r3,zero,80d538 <_dtoa_r+0x7a4>
  80d324:	d9000d17 	ldw	r4,52(sp)
  80d328:	00800384 	movi	r2,14
  80d32c:	11008216 	blt	r2,r4,80d538 <_dtoa_r+0x7a4>
  80d330:	200490fa 	slli	r2,r4,3
  80d334:	d9802617 	ldw	r6,152(sp)
  80d338:	00c020b4 	movhi	r3,130
  80d33c:	18f4cc04 	addi	r3,r3,-11472
  80d340:	10c5883a 	add	r2,r2,r3
  80d344:	14800017 	ldw	r18,0(r2)
  80d348:	14c00117 	ldw	r19,4(r2)
  80d34c:	30031e16 	blt	r6,zero,80dfc8 <_dtoa_r+0x1234>
  80d350:	d9000517 	ldw	r4,20(sp)
  80d354:	d8c00f17 	ldw	r3,60(sp)
  80d358:	a823883a 	mov	r17,r21
  80d35c:	a021883a 	mov	r16,r20
  80d360:	192b883a 	add	r21,r3,r4
  80d364:	2039883a 	mov	fp,r4
  80d368:	00000f06 	br	80d3a8 <_dtoa_r+0x614>
  80d36c:	0005883a 	mov	r2,zero
  80d370:	00d00934 	movhi	r3,16420
  80d374:	5009883a 	mov	r4,r10
  80d378:	580b883a 	mov	r5,r11
  80d37c:	180f883a 	mov	r7,r3
  80d380:	100d883a 	mov	r6,r2
  80d384:	0808c340 	call	808c34 <__muldf3>
  80d388:	180b883a 	mov	r5,r3
  80d38c:	000d883a 	mov	r6,zero
  80d390:	000f883a 	mov	r7,zero
  80d394:	1009883a 	mov	r4,r2
  80d398:	1021883a 	mov	r16,r2
  80d39c:	1823883a 	mov	r17,r3
  80d3a0:	08092d80 	call	8092d8 <__nedf2>
  80d3a4:	10004526 	beq	r2,zero,80d4bc <_dtoa_r+0x728>
  80d3a8:	900d883a 	mov	r6,r18
  80d3ac:	980f883a 	mov	r7,r19
  80d3b0:	8009883a 	mov	r4,r16
  80d3b4:	880b883a 	mov	r5,r17
  80d3b8:	0808ff80 	call	808ff8 <__divdf3>
  80d3bc:	180b883a 	mov	r5,r3
  80d3c0:	1009883a 	mov	r4,r2
  80d3c4:	08095f00 	call	8095f0 <__fixdfsi>
  80d3c8:	1009883a 	mov	r4,r2
  80d3cc:	1029883a 	mov	r20,r2
  80d3d0:	08094f80 	call	8094f8 <__floatsidf>
  80d3d4:	180f883a 	mov	r7,r3
  80d3d8:	9009883a 	mov	r4,r18
  80d3dc:	980b883a 	mov	r5,r19
  80d3e0:	100d883a 	mov	r6,r2
  80d3e4:	0808c340 	call	808c34 <__muldf3>
  80d3e8:	180f883a 	mov	r7,r3
  80d3ec:	880b883a 	mov	r5,r17
  80d3f0:	8009883a 	mov	r4,r16
  80d3f4:	100d883a 	mov	r6,r2
  80d3f8:	0808b400 	call	808b40 <__subdf3>
  80d3fc:	1015883a 	mov	r10,r2
  80d400:	a0800c04 	addi	r2,r20,48
  80d404:	e0800005 	stb	r2,0(fp)
  80d408:	e7000044 	addi	fp,fp,1
  80d40c:	1817883a 	mov	r11,r3
  80d410:	e57fd61e 	bne	fp,r21,80d36c <_dtoa_r+0x5d8>
  80d414:	500d883a 	mov	r6,r10
  80d418:	180f883a 	mov	r7,r3
  80d41c:	5009883a 	mov	r4,r10
  80d420:	180b883a 	mov	r5,r3
  80d424:	0808bc00 	call	808bc0 <__adddf3>
  80d428:	100d883a 	mov	r6,r2
  80d42c:	9009883a 	mov	r4,r18
  80d430:	980b883a 	mov	r5,r19
  80d434:	180f883a 	mov	r7,r3
  80d438:	1021883a 	mov	r16,r2
  80d43c:	1823883a 	mov	r17,r3
  80d440:	08093e80 	call	8093e8 <__ltdf2>
  80d444:	10000816 	blt	r2,zero,80d468 <_dtoa_r+0x6d4>
  80d448:	980b883a 	mov	r5,r19
  80d44c:	800d883a 	mov	r6,r16
  80d450:	880f883a 	mov	r7,r17
  80d454:	9009883a 	mov	r4,r18
  80d458:	08092500 	call	809250 <__eqdf2>
  80d45c:	1000171e 	bne	r2,zero,80d4bc <_dtoa_r+0x728>
  80d460:	a080004c 	andi	r2,r20,1
  80d464:	10001526 	beq	r2,zero,80d4bc <_dtoa_r+0x728>
  80d468:	d8800d17 	ldw	r2,52(sp)
  80d46c:	d8800415 	stw	r2,16(sp)
  80d470:	e009883a 	mov	r4,fp
  80d474:	213fffc4 	addi	r4,r4,-1
  80d478:	20c00007 	ldb	r3,0(r4)
  80d47c:	00800e44 	movi	r2,57
  80d480:	1880081e 	bne	r3,r2,80d4a4 <_dtoa_r+0x710>
  80d484:	d8800517 	ldw	r2,20(sp)
  80d488:	113ffa1e 	bne	r2,r4,80d474 <_dtoa_r+0x6e0>
  80d48c:	d8c00417 	ldw	r3,16(sp)
  80d490:	d9800517 	ldw	r6,20(sp)
  80d494:	00800c04 	movi	r2,48
  80d498:	18c00044 	addi	r3,r3,1
  80d49c:	d8c00415 	stw	r3,16(sp)
  80d4a0:	30800005 	stb	r2,0(r6)
  80d4a4:	20800003 	ldbu	r2,0(r4)
  80d4a8:	d8c00417 	ldw	r3,16(sp)
  80d4ac:	27000044 	addi	fp,r4,1
  80d4b0:	10800044 	addi	r2,r2,1
  80d4b4:	d8c00d15 	stw	r3,52(sp)
  80d4b8:	20800005 	stb	r2,0(r4)
  80d4bc:	d9001617 	ldw	r4,88(sp)
  80d4c0:	d9400717 	ldw	r5,28(sp)
  80d4c4:	080f85c0 	call	80f85c <_Bfree>
  80d4c8:	e0000005 	stb	zero,0(fp)
  80d4cc:	d9800d17 	ldw	r6,52(sp)
  80d4d0:	d8c02717 	ldw	r3,156(sp)
  80d4d4:	d9002917 	ldw	r4,164(sp)
  80d4d8:	30800044 	addi	r2,r6,1
  80d4dc:	18800015 	stw	r2,0(r3)
  80d4e0:	20029c26 	beq	r4,zero,80df54 <_dtoa_r+0x11c0>
  80d4e4:	d8c00517 	ldw	r3,20(sp)
  80d4e8:	27000015 	stw	fp,0(r4)
  80d4ec:	003e5d06 	br	80ce64 <_dtoa_r+0xd0>
  80d4f0:	d9800d17 	ldw	r6,52(sp)
  80d4f4:	00c020b4 	movhi	r3,130
  80d4f8:	18f4cc04 	addi	r3,r3,-11472
  80d4fc:	d9001217 	ldw	r4,72(sp)
  80d500:	300490fa 	slli	r2,r6,3
  80d504:	d9401317 	ldw	r5,76(sp)
  80d508:	10c5883a 	add	r2,r2,r3
  80d50c:	12000017 	ldw	r8,0(r2)
  80d510:	12400117 	ldw	r9,4(r2)
  80d514:	400d883a 	mov	r6,r8
  80d518:	480f883a 	mov	r7,r9
  80d51c:	08093e80 	call	8093e8 <__ltdf2>
  80d520:	1000030e 	bge	r2,zero,80d530 <_dtoa_r+0x79c>
  80d524:	d8800d17 	ldw	r2,52(sp)
  80d528:	10bfffc4 	addi	r2,r2,-1
  80d52c:	d8800d15 	stw	r2,52(sp)
  80d530:	d8000c15 	stw	zero,48(sp)
  80d534:	003ea806 	br	80cfd8 <_dtoa_r+0x244>
  80d538:	d9000b17 	ldw	r4,44(sp)
  80d53c:	202cc03a 	cmpne	r22,r4,zero
  80d540:	b000c71e 	bne	r22,zero,80d860 <_dtoa_r+0xacc>
  80d544:	dc001117 	ldw	r16,68(sp)
  80d548:	dc801017 	ldw	r18,64(sp)
  80d54c:	0027883a 	mov	r19,zero
  80d550:	04000b0e 	bge	zero,r16,80d580 <_dtoa_r+0x7ec>
  80d554:	d8c00a17 	ldw	r3,40(sp)
  80d558:	00c0090e 	bge	zero,r3,80d580 <_dtoa_r+0x7ec>
  80d55c:	8005883a 	mov	r2,r16
  80d560:	1c011316 	blt	r3,r16,80d9b0 <_dtoa_r+0xc1c>
  80d564:	d9000a17 	ldw	r4,40(sp)
  80d568:	d9801117 	ldw	r6,68(sp)
  80d56c:	80a1c83a 	sub	r16,r16,r2
  80d570:	2089c83a 	sub	r4,r4,r2
  80d574:	308dc83a 	sub	r6,r6,r2
  80d578:	d9000a15 	stw	r4,40(sp)
  80d57c:	d9801115 	stw	r6,68(sp)
  80d580:	d8801017 	ldw	r2,64(sp)
  80d584:	0080150e 	bge	zero,r2,80d5dc <_dtoa_r+0x848>
  80d588:	d8c00b17 	ldw	r3,44(sp)
  80d58c:	1805003a 	cmpeq	r2,r3,zero
  80d590:	1001c91e 	bne	r2,zero,80dcb8 <_dtoa_r+0xf24>
  80d594:	04800e0e 	bge	zero,r18,80d5d0 <_dtoa_r+0x83c>
  80d598:	d9001617 	ldw	r4,88(sp)
  80d59c:	980b883a 	mov	r5,r19
  80d5a0:	900d883a 	mov	r6,r18
  80d5a4:	08106100 	call	810610 <__pow5mult>
  80d5a8:	d9001617 	ldw	r4,88(sp)
  80d5ac:	d9800717 	ldw	r6,28(sp)
  80d5b0:	100b883a 	mov	r5,r2
  80d5b4:	1027883a 	mov	r19,r2
  80d5b8:	08102ec0 	call	8102ec <__multiply>
  80d5bc:	d9001617 	ldw	r4,88(sp)
  80d5c0:	d9400717 	ldw	r5,28(sp)
  80d5c4:	1023883a 	mov	r17,r2
  80d5c8:	080f85c0 	call	80f85c <_Bfree>
  80d5cc:	dc400715 	stw	r17,28(sp)
  80d5d0:	d9001017 	ldw	r4,64(sp)
  80d5d4:	248dc83a 	sub	r6,r4,r18
  80d5d8:	30010e1e 	bne	r6,zero,80da14 <_dtoa_r+0xc80>
  80d5dc:	d9001617 	ldw	r4,88(sp)
  80d5e0:	04400044 	movi	r17,1
  80d5e4:	880b883a 	mov	r5,r17
  80d5e8:	08104d40 	call	8104d4 <__i2b>
  80d5ec:	d9800917 	ldw	r6,36(sp)
  80d5f0:	1025883a 	mov	r18,r2
  80d5f4:	0180040e 	bge	zero,r6,80d608 <_dtoa_r+0x874>
  80d5f8:	d9001617 	ldw	r4,88(sp)
  80d5fc:	100b883a 	mov	r5,r2
  80d600:	08106100 	call	810610 <__pow5mult>
  80d604:	1025883a 	mov	r18,r2
  80d608:	d8801717 	ldw	r2,92(sp)
  80d60c:	8880f30e 	bge	r17,r2,80d9dc <_dtoa_r+0xc48>
  80d610:	0023883a 	mov	r17,zero
  80d614:	d9800917 	ldw	r6,36(sp)
  80d618:	30019e1e 	bne	r6,zero,80dc94 <_dtoa_r+0xf00>
  80d61c:	00c00044 	movi	r3,1
  80d620:	d9000a17 	ldw	r4,40(sp)
  80d624:	20c5883a 	add	r2,r4,r3
  80d628:	10c007cc 	andi	r3,r2,31
  80d62c:	1800841e 	bne	r3,zero,80d840 <_dtoa_r+0xaac>
  80d630:	00800704 	movi	r2,28
  80d634:	d9000a17 	ldw	r4,40(sp)
  80d638:	d9801117 	ldw	r6,68(sp)
  80d63c:	80a1883a 	add	r16,r16,r2
  80d640:	2089883a 	add	r4,r4,r2
  80d644:	308d883a 	add	r6,r6,r2
  80d648:	d9000a15 	stw	r4,40(sp)
  80d64c:	d9801115 	stw	r6,68(sp)
  80d650:	d8801117 	ldw	r2,68(sp)
  80d654:	0080050e 	bge	zero,r2,80d66c <_dtoa_r+0x8d8>
  80d658:	d9400717 	ldw	r5,28(sp)
  80d65c:	d9001617 	ldw	r4,88(sp)
  80d660:	100d883a 	mov	r6,r2
  80d664:	08101a00 	call	8101a0 <__lshift>
  80d668:	d8800715 	stw	r2,28(sp)
  80d66c:	d8c00a17 	ldw	r3,40(sp)
  80d670:	00c0050e 	bge	zero,r3,80d688 <_dtoa_r+0x8f4>
  80d674:	d9001617 	ldw	r4,88(sp)
  80d678:	900b883a 	mov	r5,r18
  80d67c:	180d883a 	mov	r6,r3
  80d680:	08101a00 	call	8101a0 <__lshift>
  80d684:	1025883a 	mov	r18,r2
  80d688:	d9000c17 	ldw	r4,48(sp)
  80d68c:	2005003a 	cmpeq	r2,r4,zero
  80d690:	10016f26 	beq	r2,zero,80dc50 <_dtoa_r+0xebc>
  80d694:	d9000f17 	ldw	r4,60(sp)
  80d698:	0102170e 	bge	zero,r4,80def8 <_dtoa_r+0x1164>
  80d69c:	d9800b17 	ldw	r6,44(sp)
  80d6a0:	3005003a 	cmpeq	r2,r6,zero
  80d6a4:	1000881e 	bne	r2,zero,80d8c8 <_dtoa_r+0xb34>
  80d6a8:	0400050e 	bge	zero,r16,80d6c0 <_dtoa_r+0x92c>
  80d6ac:	d9001617 	ldw	r4,88(sp)
  80d6b0:	980b883a 	mov	r5,r19
  80d6b4:	800d883a 	mov	r6,r16
  80d6b8:	08101a00 	call	8101a0 <__lshift>
  80d6bc:	1027883a 	mov	r19,r2
  80d6c0:	8804c03a 	cmpne	r2,r17,zero
  80d6c4:	1002541e 	bne	r2,zero,80e018 <_dtoa_r+0x1284>
  80d6c8:	980b883a 	mov	r5,r19
  80d6cc:	dd800517 	ldw	r22,20(sp)
  80d6d0:	dcc00615 	stw	r19,24(sp)
  80d6d4:	a700004c 	andi	fp,r20,1
  80d6d8:	2827883a 	mov	r19,r5
  80d6dc:	d9000717 	ldw	r4,28(sp)
  80d6e0:	900b883a 	mov	r5,r18
  80d6e4:	080cb7c0 	call	80cb7c <quorem>
  80d6e8:	d9000717 	ldw	r4,28(sp)
  80d6ec:	d9400617 	ldw	r5,24(sp)
  80d6f0:	1023883a 	mov	r17,r2
  80d6f4:	8dc00c04 	addi	r23,r17,48
  80d6f8:	080f9b80 	call	80f9b8 <__mcmp>
  80d6fc:	d9001617 	ldw	r4,88(sp)
  80d700:	900b883a 	mov	r5,r18
  80d704:	980d883a 	mov	r6,r19
  80d708:	1029883a 	mov	r20,r2
  80d70c:	08100140 	call	810014 <__mdiff>
  80d710:	102b883a 	mov	r21,r2
  80d714:	10800317 	ldw	r2,12(r2)
  80d718:	1001281e 	bne	r2,zero,80dbbc <_dtoa_r+0xe28>
  80d71c:	d9000717 	ldw	r4,28(sp)
  80d720:	a80b883a 	mov	r5,r21
  80d724:	080f9b80 	call	80f9b8 <__mcmp>
  80d728:	d9001617 	ldw	r4,88(sp)
  80d72c:	1021883a 	mov	r16,r2
  80d730:	a80b883a 	mov	r5,r21
  80d734:	080f85c0 	call	80f85c <_Bfree>
  80d738:	8000041e 	bne	r16,zero,80d74c <_dtoa_r+0x9b8>
  80d73c:	d8801717 	ldw	r2,92(sp)
  80d740:	1000021e 	bne	r2,zero,80d74c <_dtoa_r+0x9b8>
  80d744:	e004c03a 	cmpne	r2,fp,zero
  80d748:	10011726 	beq	r2,zero,80dba8 <_dtoa_r+0xe14>
  80d74c:	a0010616 	blt	r20,zero,80db68 <_dtoa_r+0xdd4>
  80d750:	a000041e 	bne	r20,zero,80d764 <_dtoa_r+0x9d0>
  80d754:	d8c01717 	ldw	r3,92(sp)
  80d758:	1800021e 	bne	r3,zero,80d764 <_dtoa_r+0x9d0>
  80d75c:	e004c03a 	cmpne	r2,fp,zero
  80d760:	10010126 	beq	r2,zero,80db68 <_dtoa_r+0xdd4>
  80d764:	04023d16 	blt	zero,r16,80e05c <_dtoa_r+0x12c8>
  80d768:	b5c00005 	stb	r23,0(r22)
  80d76c:	d9800517 	ldw	r6,20(sp)
  80d770:	d9000f17 	ldw	r4,60(sp)
  80d774:	b5800044 	addi	r22,r22,1
  80d778:	3105883a 	add	r2,r6,r4
  80d77c:	b0806526 	beq	r22,r2,80d914 <_dtoa_r+0xb80>
  80d780:	d9400717 	ldw	r5,28(sp)
  80d784:	d9001617 	ldw	r4,88(sp)
  80d788:	01800284 	movi	r6,10
  80d78c:	000f883a 	mov	r7,zero
  80d790:	08105100 	call	810510 <__multadd>
  80d794:	d8800715 	stw	r2,28(sp)
  80d798:	d8800617 	ldw	r2,24(sp)
  80d79c:	14c10c26 	beq	r2,r19,80dbd0 <_dtoa_r+0xe3c>
  80d7a0:	d9400617 	ldw	r5,24(sp)
  80d7a4:	d9001617 	ldw	r4,88(sp)
  80d7a8:	01800284 	movi	r6,10
  80d7ac:	000f883a 	mov	r7,zero
  80d7b0:	08105100 	call	810510 <__multadd>
  80d7b4:	d9001617 	ldw	r4,88(sp)
  80d7b8:	980b883a 	mov	r5,r19
  80d7bc:	01800284 	movi	r6,10
  80d7c0:	000f883a 	mov	r7,zero
  80d7c4:	d8800615 	stw	r2,24(sp)
  80d7c8:	08105100 	call	810510 <__multadd>
  80d7cc:	1027883a 	mov	r19,r2
  80d7d0:	003fc206 	br	80d6dc <_dtoa_r+0x948>
  80d7d4:	2445c83a 	sub	r2,r4,r17
  80d7d8:	a088983a 	sll	r4,r20,r2
  80d7dc:	003e4b06 	br	80d10c <_dtoa_r+0x378>
  80d7e0:	01bfffc4 	movi	r6,-1
  80d7e4:	00800044 	movi	r2,1
  80d7e8:	d9800e15 	stw	r6,56(sp)
  80d7ec:	d9800f15 	stw	r6,60(sp)
  80d7f0:	d8800b15 	stw	r2,44(sp)
  80d7f4:	d8c01617 	ldw	r3,88(sp)
  80d7f8:	008005c4 	movi	r2,23
  80d7fc:	18001115 	stw	zero,68(r3)
  80d800:	1580082e 	bgeu	r2,r22,80d824 <_dtoa_r+0xa90>
  80d804:	00c00104 	movi	r3,4
  80d808:	0009883a 	mov	r4,zero
  80d80c:	18c7883a 	add	r3,r3,r3
  80d810:	18800504 	addi	r2,r3,20
  80d814:	21000044 	addi	r4,r4,1
  80d818:	b0bffc2e 	bgeu	r22,r2,80d80c <_dtoa_r+0xa78>
  80d81c:	d9801617 	ldw	r6,88(sp)
  80d820:	31001115 	stw	r4,68(r6)
  80d824:	dc000f17 	ldw	r16,60(sp)
  80d828:	003e4b06 	br	80d158 <_dtoa_r+0x3c4>
  80d82c:	d9801717 	ldw	r6,92(sp)
  80d830:	0023883a 	mov	r17,zero
  80d834:	31bfff04 	addi	r6,r6,-4
  80d838:	d9801715 	stw	r6,92(sp)
  80d83c:	003df806 	br	80d020 <_dtoa_r+0x28c>
  80d840:	00800804 	movi	r2,32
  80d844:	10c9c83a 	sub	r4,r2,r3
  80d848:	00c00104 	movi	r3,4
  80d84c:	19005a16 	blt	r3,r4,80d9b8 <_dtoa_r+0xc24>
  80d850:	008000c4 	movi	r2,3
  80d854:	113f7e16 	blt	r2,r4,80d650 <_dtoa_r+0x8bc>
  80d858:	20800704 	addi	r2,r4,28
  80d85c:	003f7506 	br	80d634 <_dtoa_r+0x8a0>
  80d860:	d9801717 	ldw	r6,92(sp)
  80d864:	00800044 	movi	r2,1
  80d868:	1180a10e 	bge	r2,r6,80daf0 <_dtoa_r+0xd5c>
  80d86c:	d9800f17 	ldw	r6,60(sp)
  80d870:	d8c01017 	ldw	r3,64(sp)
  80d874:	30bfffc4 	addi	r2,r6,-1
  80d878:	1881c616 	blt	r3,r2,80df94 <_dtoa_r+0x1200>
  80d87c:	18a5c83a 	sub	r18,r3,r2
  80d880:	d8800f17 	ldw	r2,60(sp)
  80d884:	10026216 	blt	r2,zero,80e210 <_dtoa_r+0x147c>
  80d888:	dc001117 	ldw	r16,68(sp)
  80d88c:	1007883a 	mov	r3,r2
  80d890:	d9800a17 	ldw	r6,40(sp)
  80d894:	d8801117 	ldw	r2,68(sp)
  80d898:	d9001617 	ldw	r4,88(sp)
  80d89c:	30cd883a 	add	r6,r6,r3
  80d8a0:	10c5883a 	add	r2,r2,r3
  80d8a4:	01400044 	movi	r5,1
  80d8a8:	d9800a15 	stw	r6,40(sp)
  80d8ac:	d8801115 	stw	r2,68(sp)
  80d8b0:	08104d40 	call	8104d4 <__i2b>
  80d8b4:	1027883a 	mov	r19,r2
  80d8b8:	003f2506 	br	80d550 <_dtoa_r+0x7bc>
  80d8bc:	00c020b4 	movhi	r3,130
  80d8c0:	18f4af04 	addi	r3,r3,-11588
  80d8c4:	003d6706 	br	80ce64 <_dtoa_r+0xd0>
  80d8c8:	dd800517 	ldw	r22,20(sp)
  80d8cc:	04000044 	movi	r16,1
  80d8d0:	00000706 	br	80d8f0 <_dtoa_r+0xb5c>
  80d8d4:	d9400717 	ldw	r5,28(sp)
  80d8d8:	d9001617 	ldw	r4,88(sp)
  80d8dc:	01800284 	movi	r6,10
  80d8e0:	000f883a 	mov	r7,zero
  80d8e4:	08105100 	call	810510 <__multadd>
  80d8e8:	d8800715 	stw	r2,28(sp)
  80d8ec:	84000044 	addi	r16,r16,1
  80d8f0:	d9000717 	ldw	r4,28(sp)
  80d8f4:	900b883a 	mov	r5,r18
  80d8f8:	080cb7c0 	call	80cb7c <quorem>
  80d8fc:	15c00c04 	addi	r23,r2,48
  80d900:	b5c00005 	stb	r23,0(r22)
  80d904:	d8c00f17 	ldw	r3,60(sp)
  80d908:	b5800044 	addi	r22,r22,1
  80d90c:	80fff116 	blt	r16,r3,80d8d4 <_dtoa_r+0xb40>
  80d910:	d8000615 	stw	zero,24(sp)
  80d914:	d9400717 	ldw	r5,28(sp)
  80d918:	d9001617 	ldw	r4,88(sp)
  80d91c:	01800044 	movi	r6,1
  80d920:	08101a00 	call	8101a0 <__lshift>
  80d924:	1009883a 	mov	r4,r2
  80d928:	900b883a 	mov	r5,r18
  80d92c:	d8800715 	stw	r2,28(sp)
  80d930:	080f9b80 	call	80f9b8 <__mcmp>
  80d934:	00803c0e 	bge	zero,r2,80da28 <_dtoa_r+0xc94>
  80d938:	b009883a 	mov	r4,r22
  80d93c:	213fffc4 	addi	r4,r4,-1
  80d940:	21400003 	ldbu	r5,0(r4)
  80d944:	00800e44 	movi	r2,57
  80d948:	28c03fcc 	andi	r3,r5,255
  80d94c:	18c0201c 	xori	r3,r3,128
  80d950:	18ffe004 	addi	r3,r3,-128
  80d954:	1881981e 	bne	r3,r2,80dfb8 <_dtoa_r+0x1224>
  80d958:	d9800517 	ldw	r6,20(sp)
  80d95c:	21bff71e 	bne	r4,r6,80d93c <_dtoa_r+0xba8>
  80d960:	d8800d17 	ldw	r2,52(sp)
  80d964:	37000044 	addi	fp,r6,1
  80d968:	10800044 	addi	r2,r2,1
  80d96c:	d8800d15 	stw	r2,52(sp)
  80d970:	00800c44 	movi	r2,49
  80d974:	30800005 	stb	r2,0(r6)
  80d978:	d9001617 	ldw	r4,88(sp)
  80d97c:	900b883a 	mov	r5,r18
  80d980:	080f85c0 	call	80f85c <_Bfree>
  80d984:	983ecd26 	beq	r19,zero,80d4bc <_dtoa_r+0x728>
  80d988:	d8c00617 	ldw	r3,24(sp)
  80d98c:	18000426 	beq	r3,zero,80d9a0 <_dtoa_r+0xc0c>
  80d990:	1cc00326 	beq	r3,r19,80d9a0 <_dtoa_r+0xc0c>
  80d994:	d9001617 	ldw	r4,88(sp)
  80d998:	180b883a 	mov	r5,r3
  80d99c:	080f85c0 	call	80f85c <_Bfree>
  80d9a0:	d9001617 	ldw	r4,88(sp)
  80d9a4:	980b883a 	mov	r5,r19
  80d9a8:	080f85c0 	call	80f85c <_Bfree>
  80d9ac:	003ec306 	br	80d4bc <_dtoa_r+0x728>
  80d9b0:	1805883a 	mov	r2,r3
  80d9b4:	003eeb06 	br	80d564 <_dtoa_r+0x7d0>
  80d9b8:	d9800a17 	ldw	r6,40(sp)
  80d9bc:	d8c01117 	ldw	r3,68(sp)
  80d9c0:	20bfff04 	addi	r2,r4,-4
  80d9c4:	308d883a 	add	r6,r6,r2
  80d9c8:	1887883a 	add	r3,r3,r2
  80d9cc:	80a1883a 	add	r16,r16,r2
  80d9d0:	d9800a15 	stw	r6,40(sp)
  80d9d4:	d8c01115 	stw	r3,68(sp)
  80d9d8:	003f1d06 	br	80d650 <_dtoa_r+0x8bc>
  80d9dc:	a03f0c1e 	bne	r20,zero,80d610 <_dtoa_r+0x87c>
  80d9e0:	00800434 	movhi	r2,16
  80d9e4:	10bfffc4 	addi	r2,r2,-1
  80d9e8:	a884703a 	and	r2,r21,r2
  80d9ec:	103f081e 	bne	r2,zero,80d610 <_dtoa_r+0x87c>
  80d9f0:	a89ffc2c 	andhi	r2,r21,32752
  80d9f4:	103f0626 	beq	r2,zero,80d610 <_dtoa_r+0x87c>
  80d9f8:	d8c01117 	ldw	r3,68(sp)
  80d9fc:	d9000a17 	ldw	r4,40(sp)
  80da00:	18c00044 	addi	r3,r3,1
  80da04:	21000044 	addi	r4,r4,1
  80da08:	d8c01115 	stw	r3,68(sp)
  80da0c:	d9000a15 	stw	r4,40(sp)
  80da10:	003f0006 	br	80d614 <_dtoa_r+0x880>
  80da14:	d9400717 	ldw	r5,28(sp)
  80da18:	d9001617 	ldw	r4,88(sp)
  80da1c:	08106100 	call	810610 <__pow5mult>
  80da20:	d8800715 	stw	r2,28(sp)
  80da24:	003eed06 	br	80d5dc <_dtoa_r+0x848>
  80da28:	1000021e 	bne	r2,zero,80da34 <_dtoa_r+0xca0>
  80da2c:	b880004c 	andi	r2,r23,1
  80da30:	103fc11e 	bne	r2,zero,80d938 <_dtoa_r+0xba4>
  80da34:	b5bfffc4 	addi	r22,r22,-1
  80da38:	b0c00007 	ldb	r3,0(r22)
  80da3c:	00800c04 	movi	r2,48
  80da40:	18bffc26 	beq	r3,r2,80da34 <_dtoa_r+0xca0>
  80da44:	b7000044 	addi	fp,r22,1
  80da48:	003fcb06 	br	80d978 <_dtoa_r+0xbe4>
  80da4c:	d9800d17 	ldw	r6,52(sp)
  80da50:	018fc83a 	sub	r7,zero,r6
  80da54:	3801f726 	beq	r7,zero,80e234 <_dtoa_r+0x14a0>
  80da58:	398003cc 	andi	r6,r7,15
  80da5c:	300c90fa 	slli	r6,r6,3
  80da60:	014020b4 	movhi	r5,130
  80da64:	2974cc04 	addi	r5,r5,-11472
  80da68:	d9001217 	ldw	r4,72(sp)
  80da6c:	314d883a 	add	r6,r6,r5
  80da70:	30c00117 	ldw	r3,4(r6)
  80da74:	30800017 	ldw	r2,0(r6)
  80da78:	d9401317 	ldw	r5,76(sp)
  80da7c:	3821d13a 	srai	r16,r7,4
  80da80:	100d883a 	mov	r6,r2
  80da84:	180f883a 	mov	r7,r3
  80da88:	0808c340 	call	808c34 <__muldf3>
  80da8c:	1011883a 	mov	r8,r2
  80da90:	1813883a 	mov	r9,r3
  80da94:	1029883a 	mov	r20,r2
  80da98:	182b883a 	mov	r21,r3
  80da9c:	8001e526 	beq	r16,zero,80e234 <_dtoa_r+0x14a0>
  80daa0:	05800084 	movi	r22,2
  80daa4:	044020b4 	movhi	r17,130
  80daa8:	8c74fe04 	addi	r17,r17,-11272
  80daac:	8080004c 	andi	r2,r16,1
  80dab0:	1005003a 	cmpeq	r2,r2,zero
  80dab4:	1000081e 	bne	r2,zero,80dad8 <_dtoa_r+0xd44>
  80dab8:	89800017 	ldw	r6,0(r17)
  80dabc:	89c00117 	ldw	r7,4(r17)
  80dac0:	480b883a 	mov	r5,r9
  80dac4:	4009883a 	mov	r4,r8
  80dac8:	0808c340 	call	808c34 <__muldf3>
  80dacc:	1011883a 	mov	r8,r2
  80dad0:	b5800044 	addi	r22,r22,1
  80dad4:	1813883a 	mov	r9,r3
  80dad8:	8021d07a 	srai	r16,r16,1
  80dadc:	8c400204 	addi	r17,r17,8
  80dae0:	803ff21e 	bne	r16,zero,80daac <_dtoa_r+0xd18>
  80dae4:	4029883a 	mov	r20,r8
  80dae8:	482b883a 	mov	r21,r9
  80daec:	003dca06 	br	80d218 <_dtoa_r+0x484>
  80daf0:	d9000817 	ldw	r4,32(sp)
  80daf4:	2005003a 	cmpeq	r2,r4,zero
  80daf8:	1001f61e 	bne	r2,zero,80e2d4 <_dtoa_r+0x1540>
  80dafc:	dc001117 	ldw	r16,68(sp)
  80db00:	dc801017 	ldw	r18,64(sp)
  80db04:	18c10cc4 	addi	r3,r3,1075
  80db08:	003f6106 	br	80d890 <_dtoa_r+0xafc>
  80db0c:	d8000b15 	stw	zero,44(sp)
  80db10:	d9802617 	ldw	r6,152(sp)
  80db14:	d8c00d17 	ldw	r3,52(sp)
  80db18:	30800044 	addi	r2,r6,1
  80db1c:	18ad883a 	add	r22,r3,r2
  80db20:	b13fffc4 	addi	r4,r22,-1
  80db24:	d9000e15 	stw	r4,56(sp)
  80db28:	0581f60e 	bge	zero,r22,80e304 <_dtoa_r+0x1570>
  80db2c:	dd800f15 	stw	r22,60(sp)
  80db30:	003f3006 	br	80d7f4 <_dtoa_r+0xa60>
  80db34:	d8000b15 	stw	zero,44(sp)
  80db38:	d9002617 	ldw	r4,152(sp)
  80db3c:	0101eb0e 	bge	zero,r4,80e2ec <_dtoa_r+0x1558>
  80db40:	202d883a 	mov	r22,r4
  80db44:	d9000e15 	stw	r4,56(sp)
  80db48:	d9000f15 	stw	r4,60(sp)
  80db4c:	003f2906 	br	80d7f4 <_dtoa_r+0xa60>
  80db50:	01800044 	movi	r6,1
  80db54:	d9800b15 	stw	r6,44(sp)
  80db58:	003ff706 	br	80db38 <_dtoa_r+0xda4>
  80db5c:	01000044 	movi	r4,1
  80db60:	d9000b15 	stw	r4,44(sp)
  80db64:	003fea06 	br	80db10 <_dtoa_r+0xd7c>
  80db68:	04000c0e 	bge	zero,r16,80db9c <_dtoa_r+0xe08>
  80db6c:	d9400717 	ldw	r5,28(sp)
  80db70:	d9001617 	ldw	r4,88(sp)
  80db74:	01800044 	movi	r6,1
  80db78:	08101a00 	call	8101a0 <__lshift>
  80db7c:	1009883a 	mov	r4,r2
  80db80:	900b883a 	mov	r5,r18
  80db84:	d8800715 	stw	r2,28(sp)
  80db88:	080f9b80 	call	80f9b8 <__mcmp>
  80db8c:	0081e00e 	bge	zero,r2,80e310 <_dtoa_r+0x157c>
  80db90:	bdc00044 	addi	r23,r23,1
  80db94:	00800e84 	movi	r2,58
  80db98:	b881a226 	beq	r23,r2,80e224 <_dtoa_r+0x1490>
  80db9c:	b7000044 	addi	fp,r22,1
  80dba0:	b5c00005 	stb	r23,0(r22)
  80dba4:	003f7406 	br	80d978 <_dtoa_r+0xbe4>
  80dba8:	00800e44 	movi	r2,57
  80dbac:	b8819d26 	beq	r23,r2,80e224 <_dtoa_r+0x1490>
  80dbb0:	053ffa0e 	bge	zero,r20,80db9c <_dtoa_r+0xe08>
  80dbb4:	8dc00c44 	addi	r23,r17,49
  80dbb8:	003ff806 	br	80db9c <_dtoa_r+0xe08>
  80dbbc:	d9001617 	ldw	r4,88(sp)
  80dbc0:	a80b883a 	mov	r5,r21
  80dbc4:	04000044 	movi	r16,1
  80dbc8:	080f85c0 	call	80f85c <_Bfree>
  80dbcc:	003edf06 	br	80d74c <_dtoa_r+0x9b8>
  80dbd0:	d9001617 	ldw	r4,88(sp)
  80dbd4:	980b883a 	mov	r5,r19
  80dbd8:	01800284 	movi	r6,10
  80dbdc:	000f883a 	mov	r7,zero
  80dbe0:	08105100 	call	810510 <__multadd>
  80dbe4:	1027883a 	mov	r19,r2
  80dbe8:	d8800615 	stw	r2,24(sp)
  80dbec:	003ebb06 	br	80d6dc <_dtoa_r+0x948>
  80dbf0:	d9801117 	ldw	r6,68(sp)
  80dbf4:	d8800d17 	ldw	r2,52(sp)
  80dbf8:	d8000915 	stw	zero,36(sp)
  80dbfc:	308dc83a 	sub	r6,r6,r2
  80dc00:	0087c83a 	sub	r3,zero,r2
  80dc04:	d9801115 	stw	r6,68(sp)
  80dc08:	d8c01015 	stw	r3,64(sp)
  80dc0c:	003cfe06 	br	80d008 <_dtoa_r+0x274>
  80dc10:	018dc83a 	sub	r6,zero,r6
  80dc14:	d9801115 	stw	r6,68(sp)
  80dc18:	d8000a15 	stw	zero,40(sp)
  80dc1c:	003cf306 	br	80cfec <_dtoa_r+0x258>
  80dc20:	d9000d17 	ldw	r4,52(sp)
  80dc24:	08094f80 	call	8094f8 <__floatsidf>
  80dc28:	880b883a 	mov	r5,r17
  80dc2c:	8009883a 	mov	r4,r16
  80dc30:	180f883a 	mov	r7,r3
  80dc34:	100d883a 	mov	r6,r2
  80dc38:	08092d80 	call	8092d8 <__nedf2>
  80dc3c:	103ce126 	beq	r2,zero,80cfc4 <_dtoa_r+0x230>
  80dc40:	d9800d17 	ldw	r6,52(sp)
  80dc44:	31bfffc4 	addi	r6,r6,-1
  80dc48:	d9800d15 	stw	r6,52(sp)
  80dc4c:	003cdd06 	br	80cfc4 <_dtoa_r+0x230>
  80dc50:	d9000717 	ldw	r4,28(sp)
  80dc54:	900b883a 	mov	r5,r18
  80dc58:	080f9b80 	call	80f9b8 <__mcmp>
  80dc5c:	103e8d0e 	bge	r2,zero,80d694 <_dtoa_r+0x900>
  80dc60:	d9400717 	ldw	r5,28(sp)
  80dc64:	d9001617 	ldw	r4,88(sp)
  80dc68:	01800284 	movi	r6,10
  80dc6c:	000f883a 	mov	r7,zero
  80dc70:	08105100 	call	810510 <__multadd>
  80dc74:	d9800d17 	ldw	r6,52(sp)
  80dc78:	d8800715 	stw	r2,28(sp)
  80dc7c:	31bfffc4 	addi	r6,r6,-1
  80dc80:	d9800d15 	stw	r6,52(sp)
  80dc84:	b001a71e 	bne	r22,zero,80e324 <_dtoa_r+0x1590>
  80dc88:	d8800e17 	ldw	r2,56(sp)
  80dc8c:	d8800f15 	stw	r2,60(sp)
  80dc90:	003e8006 	br	80d694 <_dtoa_r+0x900>
  80dc94:	90800417 	ldw	r2,16(r18)
  80dc98:	1085883a 	add	r2,r2,r2
  80dc9c:	1085883a 	add	r2,r2,r2
  80dca0:	1485883a 	add	r2,r2,r18
  80dca4:	11000417 	ldw	r4,16(r2)
  80dca8:	080f8840 	call	80f884 <__hi0bits>
  80dcac:	00c00804 	movi	r3,32
  80dcb0:	1887c83a 	sub	r3,r3,r2
  80dcb4:	003e5a06 	br	80d620 <_dtoa_r+0x88c>
  80dcb8:	d9400717 	ldw	r5,28(sp)
  80dcbc:	d9801017 	ldw	r6,64(sp)
  80dcc0:	d9001617 	ldw	r4,88(sp)
  80dcc4:	08106100 	call	810610 <__pow5mult>
  80dcc8:	d8800715 	stw	r2,28(sp)
  80dccc:	003e4306 	br	80d5dc <_dtoa_r+0x848>
  80dcd0:	d9800f17 	ldw	r6,60(sp)
  80dcd4:	d8800d17 	ldw	r2,52(sp)
  80dcd8:	d9800315 	stw	r6,12(sp)
  80dcdc:	d8800415 	stw	r2,16(sp)
  80dce0:	d8c00b17 	ldw	r3,44(sp)
  80dce4:	1805003a 	cmpeq	r2,r3,zero
  80dce8:	1000e21e 	bne	r2,zero,80e074 <_dtoa_r+0x12e0>
  80dcec:	d9000317 	ldw	r4,12(sp)
  80dcf0:	0005883a 	mov	r2,zero
  80dcf4:	00cff834 	movhi	r3,16352
  80dcf8:	200c90fa 	slli	r6,r4,3
  80dcfc:	010020b4 	movhi	r4,130
  80dd00:	2134cc04 	addi	r4,r4,-11472
  80dd04:	180b883a 	mov	r5,r3
  80dd08:	310d883a 	add	r6,r6,r4
  80dd0c:	327fff17 	ldw	r9,-4(r6)
  80dd10:	323ffe17 	ldw	r8,-8(r6)
  80dd14:	1009883a 	mov	r4,r2
  80dd18:	480f883a 	mov	r7,r9
  80dd1c:	400d883a 	mov	r6,r8
  80dd20:	0808ff80 	call	808ff8 <__divdf3>
  80dd24:	180b883a 	mov	r5,r3
  80dd28:	b00d883a 	mov	r6,r22
  80dd2c:	b80f883a 	mov	r7,r23
  80dd30:	1009883a 	mov	r4,r2
  80dd34:	0808b400 	call	808b40 <__subdf3>
  80dd38:	a80b883a 	mov	r5,r21
  80dd3c:	a009883a 	mov	r4,r20
  80dd40:	d8c01915 	stw	r3,100(sp)
  80dd44:	d8801815 	stw	r2,96(sp)
  80dd48:	08095f00 	call	8095f0 <__fixdfsi>
  80dd4c:	1009883a 	mov	r4,r2
  80dd50:	1027883a 	mov	r19,r2
  80dd54:	08094f80 	call	8094f8 <__floatsidf>
  80dd58:	a80b883a 	mov	r5,r21
  80dd5c:	a009883a 	mov	r4,r20
  80dd60:	180f883a 	mov	r7,r3
  80dd64:	100d883a 	mov	r6,r2
  80dd68:	0808b400 	call	808b40 <__subdf3>
  80dd6c:	d9801817 	ldw	r6,96(sp)
  80dd70:	1823883a 	mov	r17,r3
  80dd74:	d8801415 	stw	r2,80(sp)
  80dd78:	302d883a 	mov	r22,r6
  80dd7c:	d9800517 	ldw	r6,20(sp)
  80dd80:	9cc00c04 	addi	r19,r19,48
  80dd84:	dc401515 	stw	r17,84(sp)
  80dd88:	d8c01917 	ldw	r3,100(sp)
  80dd8c:	34c00005 	stb	r19,0(r6)
  80dd90:	d8800517 	ldw	r2,20(sp)
  80dd94:	d9401917 	ldw	r5,100(sp)
  80dd98:	d9801417 	ldw	r6,80(sp)
  80dd9c:	b009883a 	mov	r4,r22
  80dda0:	880f883a 	mov	r7,r17
  80dda4:	182f883a 	mov	r23,r3
  80dda8:	17000044 	addi	fp,r2,1
  80ddac:	08093600 	call	809360 <__gtdf2>
  80ddb0:	00804e16 	blt	zero,r2,80deec <_dtoa_r+0x1158>
  80ddb4:	d9801417 	ldw	r6,80(sp)
  80ddb8:	0005883a 	mov	r2,zero
  80ddbc:	00cffc34 	movhi	r3,16368
  80ddc0:	180b883a 	mov	r5,r3
  80ddc4:	880f883a 	mov	r7,r17
  80ddc8:	1009883a 	mov	r4,r2
  80ddcc:	0808b400 	call	808b40 <__subdf3>
  80ddd0:	d9401917 	ldw	r5,100(sp)
  80ddd4:	180f883a 	mov	r7,r3
  80ddd8:	b009883a 	mov	r4,r22
  80dddc:	100d883a 	mov	r6,r2
  80dde0:	08093600 	call	809360 <__gtdf2>
  80dde4:	00bda216 	blt	zero,r2,80d470 <_dtoa_r+0x6dc>
  80dde8:	d8c00317 	ldw	r3,12(sp)
  80ddec:	00800044 	movi	r2,1
  80ddf0:	10c01216 	blt	r2,r3,80de3c <_dtoa_r+0x10a8>
  80ddf4:	003d4506 	br	80d30c <_dtoa_r+0x578>
  80ddf8:	d9801417 	ldw	r6,80(sp)
  80ddfc:	0005883a 	mov	r2,zero
  80de00:	00cffc34 	movhi	r3,16368
  80de04:	180b883a 	mov	r5,r3
  80de08:	880f883a 	mov	r7,r17
  80de0c:	1009883a 	mov	r4,r2
  80de10:	0808b400 	call	808b40 <__subdf3>
  80de14:	d9c01b17 	ldw	r7,108(sp)
  80de18:	180b883a 	mov	r5,r3
  80de1c:	1009883a 	mov	r4,r2
  80de20:	b00d883a 	mov	r6,r22
  80de24:	08093e80 	call	8093e8 <__ltdf2>
  80de28:	103d9116 	blt	r2,zero,80d470 <_dtoa_r+0x6dc>
  80de2c:	d9800517 	ldw	r6,20(sp)
  80de30:	d9000317 	ldw	r4,12(sp)
  80de34:	3105883a 	add	r2,r6,r4
  80de38:	e0bd3426 	beq	fp,r2,80d30c <_dtoa_r+0x578>
  80de3c:	04500934 	movhi	r17,16420
  80de40:	0021883a 	mov	r16,zero
  80de44:	b80b883a 	mov	r5,r23
  80de48:	b009883a 	mov	r4,r22
  80de4c:	800d883a 	mov	r6,r16
  80de50:	880f883a 	mov	r7,r17
  80de54:	0808c340 	call	808c34 <__muldf3>
  80de58:	d9401517 	ldw	r5,84(sp)
  80de5c:	d9001417 	ldw	r4,80(sp)
  80de60:	880f883a 	mov	r7,r17
  80de64:	000d883a 	mov	r6,zero
  80de68:	d8801a15 	stw	r2,104(sp)
  80de6c:	d8c01b15 	stw	r3,108(sp)
  80de70:	0808c340 	call	808c34 <__muldf3>
  80de74:	180b883a 	mov	r5,r3
  80de78:	1009883a 	mov	r4,r2
  80de7c:	1823883a 	mov	r17,r3
  80de80:	1021883a 	mov	r16,r2
  80de84:	08095f00 	call	8095f0 <__fixdfsi>
  80de88:	1009883a 	mov	r4,r2
  80de8c:	102b883a 	mov	r21,r2
  80de90:	08094f80 	call	8094f8 <__floatsidf>
  80de94:	880b883a 	mov	r5,r17
  80de98:	8009883a 	mov	r4,r16
  80de9c:	180f883a 	mov	r7,r3
  80dea0:	100d883a 	mov	r6,r2
  80dea4:	0808b400 	call	808b40 <__subdf3>
  80dea8:	1021883a 	mov	r16,r2
  80deac:	d9001b17 	ldw	r4,108(sp)
  80deb0:	1823883a 	mov	r17,r3
  80deb4:	dc001415 	stw	r16,80(sp)
  80deb8:	ad400c04 	addi	r21,r21,48
  80debc:	dc401515 	stw	r17,84(sp)
  80dec0:	d8801a17 	ldw	r2,104(sp)
  80dec4:	e5400005 	stb	r21,0(fp)
  80dec8:	202f883a 	mov	r23,r4
  80decc:	d9c01b17 	ldw	r7,108(sp)
  80ded0:	d9001417 	ldw	r4,80(sp)
  80ded4:	880b883a 	mov	r5,r17
  80ded8:	100d883a 	mov	r6,r2
  80dedc:	102d883a 	mov	r22,r2
  80dee0:	e7000044 	addi	fp,fp,1
  80dee4:	08093e80 	call	8093e8 <__ltdf2>
  80dee8:	103fc30e 	bge	r2,zero,80ddf8 <_dtoa_r+0x1064>
  80deec:	d9000417 	ldw	r4,16(sp)
  80def0:	d9000d15 	stw	r4,52(sp)
  80def4:	003d7106 	br	80d4bc <_dtoa_r+0x728>
  80def8:	d9801717 	ldw	r6,92(sp)
  80defc:	00800084 	movi	r2,2
  80df00:	11bde60e 	bge	r2,r6,80d69c <_dtoa_r+0x908>
  80df04:	203cfb1e 	bne	r4,zero,80d2f4 <_dtoa_r+0x560>
  80df08:	d9001617 	ldw	r4,88(sp)
  80df0c:	900b883a 	mov	r5,r18
  80df10:	01800144 	movi	r6,5
  80df14:	000f883a 	mov	r7,zero
  80df18:	08105100 	call	810510 <__multadd>
  80df1c:	d9000717 	ldw	r4,28(sp)
  80df20:	100b883a 	mov	r5,r2
  80df24:	1025883a 	mov	r18,r2
  80df28:	080f9b80 	call	80f9b8 <__mcmp>
  80df2c:	00bcf10e 	bge	zero,r2,80d2f4 <_dtoa_r+0x560>
  80df30:	d8c00d17 	ldw	r3,52(sp)
  80df34:	d9000517 	ldw	r4,20(sp)
  80df38:	d8000615 	stw	zero,24(sp)
  80df3c:	18c00044 	addi	r3,r3,1
  80df40:	d8c00d15 	stw	r3,52(sp)
  80df44:	00800c44 	movi	r2,49
  80df48:	27000044 	addi	fp,r4,1
  80df4c:	20800005 	stb	r2,0(r4)
  80df50:	003e8906 	br	80d978 <_dtoa_r+0xbe4>
  80df54:	d8c00517 	ldw	r3,20(sp)
  80df58:	003bc206 	br	80ce64 <_dtoa_r+0xd0>
  80df5c:	018020b4 	movhi	r6,130
  80df60:	31b4fe04 	addi	r6,r6,-11272
  80df64:	30c00917 	ldw	r3,36(r6)
  80df68:	30800817 	ldw	r2,32(r6)
  80df6c:	d9001217 	ldw	r4,72(sp)
  80df70:	d9401317 	ldw	r5,76(sp)
  80df74:	180f883a 	mov	r7,r3
  80df78:	100d883a 	mov	r6,r2
  80df7c:	0808ff80 	call	808ff8 <__divdf3>
  80df80:	948003cc 	andi	r18,r18,15
  80df84:	058000c4 	movi	r22,3
  80df88:	1029883a 	mov	r20,r2
  80df8c:	182b883a 	mov	r21,r3
  80df90:	003c8906 	br	80d1b8 <_dtoa_r+0x424>
  80df94:	d9001017 	ldw	r4,64(sp)
  80df98:	d9800917 	ldw	r6,36(sp)
  80df9c:	0025883a 	mov	r18,zero
  80dfa0:	1105c83a 	sub	r2,r2,r4
  80dfa4:	2089883a 	add	r4,r4,r2
  80dfa8:	308d883a 	add	r6,r6,r2
  80dfac:	d9001015 	stw	r4,64(sp)
  80dfb0:	d9800915 	stw	r6,36(sp)
  80dfb4:	003e3206 	br	80d880 <_dtoa_r+0xaec>
  80dfb8:	28800044 	addi	r2,r5,1
  80dfbc:	27000044 	addi	fp,r4,1
  80dfc0:	20800005 	stb	r2,0(r4)
  80dfc4:	003e6c06 	br	80d978 <_dtoa_r+0xbe4>
  80dfc8:	d8800f17 	ldw	r2,60(sp)
  80dfcc:	00bce016 	blt	zero,r2,80d350 <_dtoa_r+0x5bc>
  80dfd0:	d9800f17 	ldw	r6,60(sp)
  80dfd4:	303cc51e 	bne	r6,zero,80d2ec <_dtoa_r+0x558>
  80dfd8:	0005883a 	mov	r2,zero
  80dfdc:	00d00534 	movhi	r3,16404
  80dfe0:	980b883a 	mov	r5,r19
  80dfe4:	180f883a 	mov	r7,r3
  80dfe8:	9009883a 	mov	r4,r18
  80dfec:	100d883a 	mov	r6,r2
  80dff0:	0808c340 	call	808c34 <__muldf3>
  80dff4:	180b883a 	mov	r5,r3
  80dff8:	a80f883a 	mov	r7,r21
  80dffc:	1009883a 	mov	r4,r2
  80e000:	a00d883a 	mov	r6,r20
  80e004:	08120ac0 	call	8120ac <__gedf2>
  80e008:	103cb80e 	bge	r2,zero,80d2ec <_dtoa_r+0x558>
  80e00c:	0027883a 	mov	r19,zero
  80e010:	0025883a 	mov	r18,zero
  80e014:	003fc606 	br	80df30 <_dtoa_r+0x119c>
  80e018:	99400117 	ldw	r5,4(r19)
  80e01c:	d9001617 	ldw	r4,88(sp)
  80e020:	080fddc0 	call	80fddc <_Balloc>
  80e024:	99800417 	ldw	r6,16(r19)
  80e028:	11000304 	addi	r4,r2,12
  80e02c:	99400304 	addi	r5,r19,12
  80e030:	318d883a 	add	r6,r6,r6
  80e034:	318d883a 	add	r6,r6,r6
  80e038:	31800204 	addi	r6,r6,8
  80e03c:	1023883a 	mov	r17,r2
  80e040:	080f6440 	call	80f644 <memcpy>
  80e044:	d9001617 	ldw	r4,88(sp)
  80e048:	880b883a 	mov	r5,r17
  80e04c:	01800044 	movi	r6,1
  80e050:	08101a00 	call	8101a0 <__lshift>
  80e054:	100b883a 	mov	r5,r2
  80e058:	003d9c06 	br	80d6cc <_dtoa_r+0x938>
  80e05c:	00800e44 	movi	r2,57
  80e060:	b8807026 	beq	r23,r2,80e224 <_dtoa_r+0x1490>
  80e064:	b8800044 	addi	r2,r23,1
  80e068:	b7000044 	addi	fp,r22,1
  80e06c:	b0800005 	stb	r2,0(r22)
  80e070:	003e4106 	br	80d978 <_dtoa_r+0xbe4>
  80e074:	d8800317 	ldw	r2,12(sp)
  80e078:	018020b4 	movhi	r6,130
  80e07c:	31b4cc04 	addi	r6,r6,-11472
  80e080:	b009883a 	mov	r4,r22
  80e084:	100e90fa 	slli	r7,r2,3
  80e088:	b80b883a 	mov	r5,r23
  80e08c:	398f883a 	add	r7,r7,r6
  80e090:	38bffe17 	ldw	r2,-8(r7)
  80e094:	d9800517 	ldw	r6,20(sp)
  80e098:	38ffff17 	ldw	r3,-4(r7)
  80e09c:	37000044 	addi	fp,r6,1
  80e0a0:	180f883a 	mov	r7,r3
  80e0a4:	100d883a 	mov	r6,r2
  80e0a8:	0808c340 	call	808c34 <__muldf3>
  80e0ac:	a80b883a 	mov	r5,r21
  80e0b0:	a009883a 	mov	r4,r20
  80e0b4:	182f883a 	mov	r23,r3
  80e0b8:	102d883a 	mov	r22,r2
  80e0bc:	08095f00 	call	8095f0 <__fixdfsi>
  80e0c0:	1009883a 	mov	r4,r2
  80e0c4:	1027883a 	mov	r19,r2
  80e0c8:	08094f80 	call	8094f8 <__floatsidf>
  80e0cc:	a80b883a 	mov	r5,r21
  80e0d0:	a009883a 	mov	r4,r20
  80e0d4:	180f883a 	mov	r7,r3
  80e0d8:	100d883a 	mov	r6,r2
  80e0dc:	0808b400 	call	808b40 <__subdf3>
  80e0e0:	180b883a 	mov	r5,r3
  80e0e4:	d8c00517 	ldw	r3,20(sp)
  80e0e8:	9cc00c04 	addi	r19,r19,48
  80e0ec:	1009883a 	mov	r4,r2
  80e0f0:	1cc00005 	stb	r19,0(r3)
  80e0f4:	2021883a 	mov	r16,r4
  80e0f8:	d9000317 	ldw	r4,12(sp)
  80e0fc:	00800044 	movi	r2,1
  80e100:	2823883a 	mov	r17,r5
  80e104:	20802226 	beq	r4,r2,80e190 <_dtoa_r+0x13fc>
  80e108:	1029883a 	mov	r20,r2
  80e10c:	0005883a 	mov	r2,zero
  80e110:	00d00934 	movhi	r3,16420
  80e114:	180f883a 	mov	r7,r3
  80e118:	100d883a 	mov	r6,r2
  80e11c:	880b883a 	mov	r5,r17
  80e120:	8009883a 	mov	r4,r16
  80e124:	0808c340 	call	808c34 <__muldf3>
  80e128:	180b883a 	mov	r5,r3
  80e12c:	1009883a 	mov	r4,r2
  80e130:	1823883a 	mov	r17,r3
  80e134:	1021883a 	mov	r16,r2
  80e138:	08095f00 	call	8095f0 <__fixdfsi>
  80e13c:	1009883a 	mov	r4,r2
  80e140:	102b883a 	mov	r21,r2
  80e144:	08094f80 	call	8094f8 <__floatsidf>
  80e148:	880b883a 	mov	r5,r17
  80e14c:	8009883a 	mov	r4,r16
  80e150:	180f883a 	mov	r7,r3
  80e154:	100d883a 	mov	r6,r2
  80e158:	0808b400 	call	808b40 <__subdf3>
  80e15c:	180b883a 	mov	r5,r3
  80e160:	d8c00517 	ldw	r3,20(sp)
  80e164:	1009883a 	mov	r4,r2
  80e168:	ad400c04 	addi	r21,r21,48
  80e16c:	1d05883a 	add	r2,r3,r20
  80e170:	15400005 	stb	r21,0(r2)
  80e174:	2021883a 	mov	r16,r4
  80e178:	d9000317 	ldw	r4,12(sp)
  80e17c:	a5000044 	addi	r20,r20,1
  80e180:	2823883a 	mov	r17,r5
  80e184:	a13fe11e 	bne	r20,r4,80e10c <_dtoa_r+0x1378>
  80e188:	e505883a 	add	r2,fp,r20
  80e18c:	173fffc4 	addi	fp,r2,-1
  80e190:	0025883a 	mov	r18,zero
  80e194:	04cff834 	movhi	r19,16352
  80e198:	b009883a 	mov	r4,r22
  80e19c:	b80b883a 	mov	r5,r23
  80e1a0:	900d883a 	mov	r6,r18
  80e1a4:	980f883a 	mov	r7,r19
  80e1a8:	0808bc00 	call	808bc0 <__adddf3>
  80e1ac:	180b883a 	mov	r5,r3
  80e1b0:	1009883a 	mov	r4,r2
  80e1b4:	800d883a 	mov	r6,r16
  80e1b8:	880f883a 	mov	r7,r17
  80e1bc:	08093e80 	call	8093e8 <__ltdf2>
  80e1c0:	103cab16 	blt	r2,zero,80d470 <_dtoa_r+0x6dc>
  80e1c4:	0009883a 	mov	r4,zero
  80e1c8:	980b883a 	mov	r5,r19
  80e1cc:	b80f883a 	mov	r7,r23
  80e1d0:	b00d883a 	mov	r6,r22
  80e1d4:	0808b400 	call	808b40 <__subdf3>
  80e1d8:	180b883a 	mov	r5,r3
  80e1dc:	880f883a 	mov	r7,r17
  80e1e0:	1009883a 	mov	r4,r2
  80e1e4:	800d883a 	mov	r6,r16
  80e1e8:	08093600 	call	809360 <__gtdf2>
  80e1ec:	00bc470e 	bge	zero,r2,80d30c <_dtoa_r+0x578>
  80e1f0:	00c00c04 	movi	r3,48
  80e1f4:	e73fffc4 	addi	fp,fp,-1
  80e1f8:	e0800007 	ldb	r2,0(fp)
  80e1fc:	10fffd26 	beq	r2,r3,80e1f4 <_dtoa_r+0x1460>
  80e200:	d9800417 	ldw	r6,16(sp)
  80e204:	e7000044 	addi	fp,fp,1
  80e208:	d9800d15 	stw	r6,52(sp)
  80e20c:	003cab06 	br	80d4bc <_dtoa_r+0x728>
  80e210:	d8c00f17 	ldw	r3,60(sp)
  80e214:	d9001117 	ldw	r4,68(sp)
  80e218:	20e1c83a 	sub	r16,r4,r3
  80e21c:	0007883a 	mov	r3,zero
  80e220:	003d9b06 	br	80d890 <_dtoa_r+0xafc>
  80e224:	00800e44 	movi	r2,57
  80e228:	b0800005 	stb	r2,0(r22)
  80e22c:	b5800044 	addi	r22,r22,1
  80e230:	003dc106 	br	80d938 <_dtoa_r+0xba4>
  80e234:	05800084 	movi	r22,2
  80e238:	003bf706 	br	80d218 <_dtoa_r+0x484>
  80e23c:	d9000f17 	ldw	r4,60(sp)
  80e240:	013c000e 	bge	zero,r4,80d244 <_dtoa_r+0x4b0>
  80e244:	d9800e17 	ldw	r6,56(sp)
  80e248:	01bc300e 	bge	zero,r6,80d30c <_dtoa_r+0x578>
  80e24c:	0005883a 	mov	r2,zero
  80e250:	00d00934 	movhi	r3,16420
  80e254:	a80b883a 	mov	r5,r21
  80e258:	180f883a 	mov	r7,r3
  80e25c:	a009883a 	mov	r4,r20
  80e260:	100d883a 	mov	r6,r2
  80e264:	0808c340 	call	808c34 <__muldf3>
  80e268:	b1000044 	addi	r4,r22,1
  80e26c:	1021883a 	mov	r16,r2
  80e270:	1823883a 	mov	r17,r3
  80e274:	08094f80 	call	8094f8 <__floatsidf>
  80e278:	880b883a 	mov	r5,r17
  80e27c:	8009883a 	mov	r4,r16
  80e280:	180f883a 	mov	r7,r3
  80e284:	100d883a 	mov	r6,r2
  80e288:	0808c340 	call	808c34 <__muldf3>
  80e28c:	0011883a 	mov	r8,zero
  80e290:	02500734 	movhi	r9,16412
  80e294:	180b883a 	mov	r5,r3
  80e298:	480f883a 	mov	r7,r9
  80e29c:	1009883a 	mov	r4,r2
  80e2a0:	400d883a 	mov	r6,r8
  80e2a4:	0808bc00 	call	808bc0 <__adddf3>
  80e2a8:	102d883a 	mov	r22,r2
  80e2ac:	00bf3034 	movhi	r2,64704
  80e2b0:	10ef883a 	add	r23,r2,r3
  80e2b4:	d8800d17 	ldw	r2,52(sp)
  80e2b8:	d8c00e17 	ldw	r3,56(sp)
  80e2bc:	8029883a 	mov	r20,r16
  80e2c0:	10bfffc4 	addi	r2,r2,-1
  80e2c4:	882b883a 	mov	r21,r17
  80e2c8:	d8800415 	stw	r2,16(sp)
  80e2cc:	d8c00315 	stw	r3,12(sp)
  80e2d0:	003e8306 	br	80dce0 <_dtoa_r+0xf4c>
  80e2d4:	d8800117 	ldw	r2,4(sp)
  80e2d8:	dc001117 	ldw	r16,68(sp)
  80e2dc:	dc801017 	ldw	r18,64(sp)
  80e2e0:	00c00d84 	movi	r3,54
  80e2e4:	1887c83a 	sub	r3,r3,r2
  80e2e8:	003d6906 	br	80d890 <_dtoa_r+0xafc>
  80e2ec:	01800044 	movi	r6,1
  80e2f0:	3021883a 	mov	r16,r6
  80e2f4:	d9800f15 	stw	r6,60(sp)
  80e2f8:	d9802615 	stw	r6,152(sp)
  80e2fc:	d9800e15 	stw	r6,56(sp)
  80e300:	003b9306 	br	80d150 <_dtoa_r+0x3bc>
  80e304:	b021883a 	mov	r16,r22
  80e308:	dd800f15 	stw	r22,60(sp)
  80e30c:	003b9006 	br	80d150 <_dtoa_r+0x3bc>
  80e310:	103e221e 	bne	r2,zero,80db9c <_dtoa_r+0xe08>
  80e314:	b880004c 	andi	r2,r23,1
  80e318:	1005003a 	cmpeq	r2,r2,zero
  80e31c:	103e1f1e 	bne	r2,zero,80db9c <_dtoa_r+0xe08>
  80e320:	003e1b06 	br	80db90 <_dtoa_r+0xdfc>
  80e324:	d9001617 	ldw	r4,88(sp)
  80e328:	980b883a 	mov	r5,r19
  80e32c:	01800284 	movi	r6,10
  80e330:	000f883a 	mov	r7,zero
  80e334:	08105100 	call	810510 <__multadd>
  80e338:	d8c00e17 	ldw	r3,56(sp)
  80e33c:	1027883a 	mov	r19,r2
  80e340:	d8c00f15 	stw	r3,60(sp)
  80e344:	003cd306 	br	80d694 <_dtoa_r+0x900>

0080e348 <_fflush_r>:
  80e348:	defffb04 	addi	sp,sp,-20
  80e34c:	dcc00315 	stw	r19,12(sp)
  80e350:	dc800215 	stw	r18,8(sp)
  80e354:	dfc00415 	stw	ra,16(sp)
  80e358:	dc400115 	stw	r17,4(sp)
  80e35c:	dc000015 	stw	r16,0(sp)
  80e360:	2027883a 	mov	r19,r4
  80e364:	2825883a 	mov	r18,r5
  80e368:	20000226 	beq	r4,zero,80e374 <_fflush_r+0x2c>
  80e36c:	20800e17 	ldw	r2,56(r4)
  80e370:	10005626 	beq	r2,zero,80e4cc <_fflush_r+0x184>
  80e374:	9100030b 	ldhu	r4,12(r18)
  80e378:	20ffffcc 	andi	r3,r4,65535
  80e37c:	18e0001c 	xori	r3,r3,32768
  80e380:	18e00004 	addi	r3,r3,-32768
  80e384:	1880020c 	andi	r2,r3,8
  80e388:	1000261e 	bne	r2,zero,80e424 <_fflush_r+0xdc>
  80e38c:	90c00117 	ldw	r3,4(r18)
  80e390:	20820014 	ori	r2,r4,2048
  80e394:	9080030d 	sth	r2,12(r18)
  80e398:	1009883a 	mov	r4,r2
  80e39c:	00c0400e 	bge	zero,r3,80e4a0 <_fflush_r+0x158>
  80e3a0:	92000a17 	ldw	r8,40(r18)
  80e3a4:	40004026 	beq	r8,zero,80e4a8 <_fflush_r+0x160>
  80e3a8:	2084000c 	andi	r2,r4,4096
  80e3ac:	10005326 	beq	r2,zero,80e4fc <_fflush_r+0x1b4>
  80e3b0:	94001417 	ldw	r16,80(r18)
  80e3b4:	9080030b 	ldhu	r2,12(r18)
  80e3b8:	1080010c 	andi	r2,r2,4
  80e3bc:	1000481e 	bne	r2,zero,80e4e0 <_fflush_r+0x198>
  80e3c0:	91400717 	ldw	r5,28(r18)
  80e3c4:	9809883a 	mov	r4,r19
  80e3c8:	800d883a 	mov	r6,r16
  80e3cc:	000f883a 	mov	r7,zero
  80e3d0:	403ee83a 	callr	r8
  80e3d4:	8080261e 	bne	r16,r2,80e470 <_fflush_r+0x128>
  80e3d8:	9080030b 	ldhu	r2,12(r18)
  80e3dc:	91000417 	ldw	r4,16(r18)
  80e3e0:	90000115 	stw	zero,4(r18)
  80e3e4:	10bdffcc 	andi	r2,r2,63487
  80e3e8:	10ffffcc 	andi	r3,r2,65535
  80e3ec:	18c4000c 	andi	r3,r3,4096
  80e3f0:	9080030d 	sth	r2,12(r18)
  80e3f4:	91000015 	stw	r4,0(r18)
  80e3f8:	18002b26 	beq	r3,zero,80e4a8 <_fflush_r+0x160>
  80e3fc:	0007883a 	mov	r3,zero
  80e400:	1805883a 	mov	r2,r3
  80e404:	94001415 	stw	r16,80(r18)
  80e408:	dfc00417 	ldw	ra,16(sp)
  80e40c:	dcc00317 	ldw	r19,12(sp)
  80e410:	dc800217 	ldw	r18,8(sp)
  80e414:	dc400117 	ldw	r17,4(sp)
  80e418:	dc000017 	ldw	r16,0(sp)
  80e41c:	dec00504 	addi	sp,sp,20
  80e420:	f800283a 	ret
  80e424:	94400417 	ldw	r17,16(r18)
  80e428:	88001f26 	beq	r17,zero,80e4a8 <_fflush_r+0x160>
  80e42c:	90800017 	ldw	r2,0(r18)
  80e430:	18c000cc 	andi	r3,r3,3
  80e434:	94400015 	stw	r17,0(r18)
  80e438:	1461c83a 	sub	r16,r2,r17
  80e43c:	18002526 	beq	r3,zero,80e4d4 <_fflush_r+0x18c>
  80e440:	0005883a 	mov	r2,zero
  80e444:	90800215 	stw	r2,8(r18)
  80e448:	0400170e 	bge	zero,r16,80e4a8 <_fflush_r+0x160>
  80e44c:	90c00917 	ldw	r3,36(r18)
  80e450:	91400717 	ldw	r5,28(r18)
  80e454:	880d883a 	mov	r6,r17
  80e458:	800f883a 	mov	r7,r16
  80e45c:	9809883a 	mov	r4,r19
  80e460:	183ee83a 	callr	r3
  80e464:	88a3883a 	add	r17,r17,r2
  80e468:	80a1c83a 	sub	r16,r16,r2
  80e46c:	00bff616 	blt	zero,r2,80e448 <_fflush_r+0x100>
  80e470:	9080030b 	ldhu	r2,12(r18)
  80e474:	00ffffc4 	movi	r3,-1
  80e478:	10801014 	ori	r2,r2,64
  80e47c:	9080030d 	sth	r2,12(r18)
  80e480:	1805883a 	mov	r2,r3
  80e484:	dfc00417 	ldw	ra,16(sp)
  80e488:	dcc00317 	ldw	r19,12(sp)
  80e48c:	dc800217 	ldw	r18,8(sp)
  80e490:	dc400117 	ldw	r17,4(sp)
  80e494:	dc000017 	ldw	r16,0(sp)
  80e498:	dec00504 	addi	sp,sp,20
  80e49c:	f800283a 	ret
  80e4a0:	90800f17 	ldw	r2,60(r18)
  80e4a4:	00bfbe16 	blt	zero,r2,80e3a0 <_fflush_r+0x58>
  80e4a8:	0007883a 	mov	r3,zero
  80e4ac:	1805883a 	mov	r2,r3
  80e4b0:	dfc00417 	ldw	ra,16(sp)
  80e4b4:	dcc00317 	ldw	r19,12(sp)
  80e4b8:	dc800217 	ldw	r18,8(sp)
  80e4bc:	dc400117 	ldw	r17,4(sp)
  80e4c0:	dc000017 	ldw	r16,0(sp)
  80e4c4:	dec00504 	addi	sp,sp,20
  80e4c8:	f800283a 	ret
  80e4cc:	080e5e00 	call	80e5e0 <__sinit>
  80e4d0:	003fa806 	br	80e374 <_fflush_r+0x2c>
  80e4d4:	90800517 	ldw	r2,20(r18)
  80e4d8:	90800215 	stw	r2,8(r18)
  80e4dc:	003fda06 	br	80e448 <_fflush_r+0x100>
  80e4e0:	90800117 	ldw	r2,4(r18)
  80e4e4:	90c00c17 	ldw	r3,48(r18)
  80e4e8:	80a1c83a 	sub	r16,r16,r2
  80e4ec:	183fb426 	beq	r3,zero,80e3c0 <_fflush_r+0x78>
  80e4f0:	90800f17 	ldw	r2,60(r18)
  80e4f4:	80a1c83a 	sub	r16,r16,r2
  80e4f8:	003fb106 	br	80e3c0 <_fflush_r+0x78>
  80e4fc:	91400717 	ldw	r5,28(r18)
  80e500:	9809883a 	mov	r4,r19
  80e504:	000d883a 	mov	r6,zero
  80e508:	01c00044 	movi	r7,1
  80e50c:	403ee83a 	callr	r8
  80e510:	1021883a 	mov	r16,r2
  80e514:	00bfffc4 	movi	r2,-1
  80e518:	80800226 	beq	r16,r2,80e524 <_fflush_r+0x1dc>
  80e51c:	92000a17 	ldw	r8,40(r18)
  80e520:	003fa406 	br	80e3b4 <_fflush_r+0x6c>
  80e524:	98c00017 	ldw	r3,0(r19)
  80e528:	00800744 	movi	r2,29
  80e52c:	18bfde26 	beq	r3,r2,80e4a8 <_fflush_r+0x160>
  80e530:	9080030b 	ldhu	r2,12(r18)
  80e534:	8007883a 	mov	r3,r16
  80e538:	10801014 	ori	r2,r2,64
  80e53c:	9080030d 	sth	r2,12(r18)
  80e540:	003fcf06 	br	80e480 <_fflush_r+0x138>

0080e544 <fflush>:
  80e544:	01402074 	movhi	r5,129
  80e548:	2978d204 	addi	r5,r5,-7352
  80e54c:	2007883a 	mov	r3,r4
  80e550:	20000526 	beq	r4,zero,80e568 <fflush+0x24>
  80e554:	008020b4 	movhi	r2,130
  80e558:	10bc3904 	addi	r2,r2,-3868
  80e55c:	11000017 	ldw	r4,0(r2)
  80e560:	180b883a 	mov	r5,r3
  80e564:	080e3481 	jmpi	80e348 <_fflush_r>
  80e568:	008020b4 	movhi	r2,130
  80e56c:	10bc3a04 	addi	r2,r2,-3864
  80e570:	11000017 	ldw	r4,0(r2)
  80e574:	080f1141 	jmpi	80f114 <_fwalk_reent>

0080e578 <std>:
  80e578:	00802074 	movhi	r2,129
  80e57c:	1083a104 	addi	r2,r2,3716
  80e580:	20800b15 	stw	r2,44(r4)
  80e584:	00802074 	movhi	r2,129
  80e588:	1083dc04 	addi	r2,r2,3952
  80e58c:	20800815 	stw	r2,32(r4)
  80e590:	00c02074 	movhi	r3,129
  80e594:	18c3bd04 	addi	r3,r3,3828
  80e598:	00802074 	movhi	r2,129
  80e59c:	1083a304 	addi	r2,r2,3724
  80e5a0:	2140030d 	sth	r5,12(r4)
  80e5a4:	2180038d 	sth	r6,14(r4)
  80e5a8:	20c00915 	stw	r3,36(r4)
  80e5ac:	20800a15 	stw	r2,40(r4)
  80e5b0:	20000015 	stw	zero,0(r4)
  80e5b4:	20000115 	stw	zero,4(r4)
  80e5b8:	20000215 	stw	zero,8(r4)
  80e5bc:	20000415 	stw	zero,16(r4)
  80e5c0:	20000515 	stw	zero,20(r4)
  80e5c4:	20000615 	stw	zero,24(r4)
  80e5c8:	21000715 	stw	r4,28(r4)
  80e5cc:	f800283a 	ret

0080e5d0 <__sfp_lock_acquire>:
  80e5d0:	f800283a 	ret

0080e5d4 <__sfp_lock_release>:
  80e5d4:	f800283a 	ret

0080e5d8 <__sinit_lock_acquire>:
  80e5d8:	f800283a 	ret

0080e5dc <__sinit_lock_release>:
  80e5dc:	f800283a 	ret

0080e5e0 <__sinit>:
  80e5e0:	20800e17 	ldw	r2,56(r4)
  80e5e4:	defffd04 	addi	sp,sp,-12
  80e5e8:	dc400115 	stw	r17,4(sp)
  80e5ec:	dc000015 	stw	r16,0(sp)
  80e5f0:	dfc00215 	stw	ra,8(sp)
  80e5f4:	04400044 	movi	r17,1
  80e5f8:	01400104 	movi	r5,4
  80e5fc:	000d883a 	mov	r6,zero
  80e600:	2021883a 	mov	r16,r4
  80e604:	2200bb04 	addi	r8,r4,748
  80e608:	200f883a 	mov	r7,r4
  80e60c:	10000526 	beq	r2,zero,80e624 <__sinit+0x44>
  80e610:	dfc00217 	ldw	ra,8(sp)
  80e614:	dc400117 	ldw	r17,4(sp)
  80e618:	dc000017 	ldw	r16,0(sp)
  80e61c:	dec00304 	addi	sp,sp,12
  80e620:	f800283a 	ret
  80e624:	21000117 	ldw	r4,4(r4)
  80e628:	00802074 	movhi	r2,129
  80e62c:	10b9b104 	addi	r2,r2,-6460
  80e630:	00c000c4 	movi	r3,3
  80e634:	80800f15 	stw	r2,60(r16)
  80e638:	80c0b915 	stw	r3,740(r16)
  80e63c:	8200ba15 	stw	r8,744(r16)
  80e640:	84400e15 	stw	r17,56(r16)
  80e644:	8000b815 	stw	zero,736(r16)
  80e648:	080e5780 	call	80e578 <std>
  80e64c:	81000217 	ldw	r4,8(r16)
  80e650:	880d883a 	mov	r6,r17
  80e654:	800f883a 	mov	r7,r16
  80e658:	01400284 	movi	r5,10
  80e65c:	080e5780 	call	80e578 <std>
  80e660:	81000317 	ldw	r4,12(r16)
  80e664:	800f883a 	mov	r7,r16
  80e668:	01400484 	movi	r5,18
  80e66c:	01800084 	movi	r6,2
  80e670:	dfc00217 	ldw	ra,8(sp)
  80e674:	dc400117 	ldw	r17,4(sp)
  80e678:	dc000017 	ldw	r16,0(sp)
  80e67c:	dec00304 	addi	sp,sp,12
  80e680:	080e5781 	jmpi	80e578 <std>

0080e684 <__fp_lock>:
  80e684:	0005883a 	mov	r2,zero
  80e688:	f800283a 	ret

0080e68c <__fp_unlock>:
  80e68c:	0005883a 	mov	r2,zero
  80e690:	f800283a 	ret

0080e694 <__fp_unlock_all>:
  80e694:	008020b4 	movhi	r2,130
  80e698:	10bc3904 	addi	r2,r2,-3868
  80e69c:	11000017 	ldw	r4,0(r2)
  80e6a0:	01402074 	movhi	r5,129
  80e6a4:	2979a304 	addi	r5,r5,-6516
  80e6a8:	080f1dc1 	jmpi	80f1dc <_fwalk>

0080e6ac <__fp_lock_all>:
  80e6ac:	008020b4 	movhi	r2,130
  80e6b0:	10bc3904 	addi	r2,r2,-3868
  80e6b4:	11000017 	ldw	r4,0(r2)
  80e6b8:	01402074 	movhi	r5,129
  80e6bc:	2979a104 	addi	r5,r5,-6524
  80e6c0:	080f1dc1 	jmpi	80f1dc <_fwalk>

0080e6c4 <_cleanup_r>:
  80e6c4:	01402074 	movhi	r5,129
  80e6c8:	2944ce04 	addi	r5,r5,4920
  80e6cc:	080f1dc1 	jmpi	80f1dc <_fwalk>

0080e6d0 <_cleanup>:
  80e6d0:	008020b4 	movhi	r2,130
  80e6d4:	10bc3a04 	addi	r2,r2,-3864
  80e6d8:	11000017 	ldw	r4,0(r2)
  80e6dc:	080e6c41 	jmpi	80e6c4 <_cleanup_r>

0080e6e0 <__sfmoreglue>:
  80e6e0:	defffc04 	addi	sp,sp,-16
  80e6e4:	dc400115 	stw	r17,4(sp)
  80e6e8:	2c401724 	muli	r17,r5,92
  80e6ec:	dc800215 	stw	r18,8(sp)
  80e6f0:	2825883a 	mov	r18,r5
  80e6f4:	89400304 	addi	r5,r17,12
  80e6f8:	dc000015 	stw	r16,0(sp)
  80e6fc:	dfc00315 	stw	ra,12(sp)
  80e700:	080a0d80 	call	80a0d8 <_malloc_r>
  80e704:	0021883a 	mov	r16,zero
  80e708:	880d883a 	mov	r6,r17
  80e70c:	000b883a 	mov	r5,zero
  80e710:	10000626 	beq	r2,zero,80e72c <__sfmoreglue+0x4c>
  80e714:	11000304 	addi	r4,r2,12
  80e718:	14800115 	stw	r18,4(r2)
  80e71c:	10000015 	stw	zero,0(r2)
  80e720:	11000215 	stw	r4,8(r2)
  80e724:	1021883a 	mov	r16,r2
  80e728:	080f7c40 	call	80f7c4 <memset>
  80e72c:	8005883a 	mov	r2,r16
  80e730:	dfc00317 	ldw	ra,12(sp)
  80e734:	dc800217 	ldw	r18,8(sp)
  80e738:	dc400117 	ldw	r17,4(sp)
  80e73c:	dc000017 	ldw	r16,0(sp)
  80e740:	dec00404 	addi	sp,sp,16
  80e744:	f800283a 	ret

0080e748 <__sfp>:
  80e748:	defffd04 	addi	sp,sp,-12
  80e74c:	008020b4 	movhi	r2,130
  80e750:	10bc3a04 	addi	r2,r2,-3864
  80e754:	dc000015 	stw	r16,0(sp)
  80e758:	14000017 	ldw	r16,0(r2)
  80e75c:	dc400115 	stw	r17,4(sp)
  80e760:	dfc00215 	stw	ra,8(sp)
  80e764:	80800e17 	ldw	r2,56(r16)
  80e768:	2023883a 	mov	r17,r4
  80e76c:	10002626 	beq	r2,zero,80e808 <__sfp+0xc0>
  80e770:	8400b804 	addi	r16,r16,736
  80e774:	80800117 	ldw	r2,4(r16)
  80e778:	81000217 	ldw	r4,8(r16)
  80e77c:	10ffffc4 	addi	r3,r2,-1
  80e780:	18000916 	blt	r3,zero,80e7a8 <__sfp+0x60>
  80e784:	2080030f 	ldh	r2,12(r4)
  80e788:	10000b26 	beq	r2,zero,80e7b8 <__sfp+0x70>
  80e78c:	017fffc4 	movi	r5,-1
  80e790:	00000206 	br	80e79c <__sfp+0x54>
  80e794:	2080030f 	ldh	r2,12(r4)
  80e798:	10000726 	beq	r2,zero,80e7b8 <__sfp+0x70>
  80e79c:	18ffffc4 	addi	r3,r3,-1
  80e7a0:	21001704 	addi	r4,r4,92
  80e7a4:	197ffb1e 	bne	r3,r5,80e794 <__sfp+0x4c>
  80e7a8:	80800017 	ldw	r2,0(r16)
  80e7ac:	10001926 	beq	r2,zero,80e814 <__sfp+0xcc>
  80e7b0:	1021883a 	mov	r16,r2
  80e7b4:	003fef06 	br	80e774 <__sfp+0x2c>
  80e7b8:	00bfffc4 	movi	r2,-1
  80e7bc:	00c00044 	movi	r3,1
  80e7c0:	2080038d 	sth	r2,14(r4)
  80e7c4:	20c0030d 	sth	r3,12(r4)
  80e7c8:	20000015 	stw	zero,0(r4)
  80e7cc:	20000215 	stw	zero,8(r4)
  80e7d0:	20000115 	stw	zero,4(r4)
  80e7d4:	20000415 	stw	zero,16(r4)
  80e7d8:	20000515 	stw	zero,20(r4)
  80e7dc:	20000615 	stw	zero,24(r4)
  80e7e0:	20000c15 	stw	zero,48(r4)
  80e7e4:	20000d15 	stw	zero,52(r4)
  80e7e8:	20001115 	stw	zero,68(r4)
  80e7ec:	20001215 	stw	zero,72(r4)
  80e7f0:	2005883a 	mov	r2,r4
  80e7f4:	dfc00217 	ldw	ra,8(sp)
  80e7f8:	dc400117 	ldw	r17,4(sp)
  80e7fc:	dc000017 	ldw	r16,0(sp)
  80e800:	dec00304 	addi	sp,sp,12
  80e804:	f800283a 	ret
  80e808:	8009883a 	mov	r4,r16
  80e80c:	080e5e00 	call	80e5e0 <__sinit>
  80e810:	003fd706 	br	80e770 <__sfp+0x28>
  80e814:	8809883a 	mov	r4,r17
  80e818:	01400104 	movi	r5,4
  80e81c:	080e6e00 	call	80e6e0 <__sfmoreglue>
  80e820:	80800015 	stw	r2,0(r16)
  80e824:	103fe21e 	bne	r2,zero,80e7b0 <__sfp+0x68>
  80e828:	00800304 	movi	r2,12
  80e82c:	0009883a 	mov	r4,zero
  80e830:	88800015 	stw	r2,0(r17)
  80e834:	003fee06 	br	80e7f0 <__sfp+0xa8>

0080e838 <_malloc_trim_r>:
  80e838:	defffb04 	addi	sp,sp,-20
  80e83c:	dcc00315 	stw	r19,12(sp)
  80e840:	04c020b4 	movhi	r19,130
  80e844:	9cf65704 	addi	r19,r19,-9892
  80e848:	dc800215 	stw	r18,8(sp)
  80e84c:	dc400115 	stw	r17,4(sp)
  80e850:	dc000015 	stw	r16,0(sp)
  80e854:	2823883a 	mov	r17,r5
  80e858:	2025883a 	mov	r18,r4
  80e85c:	dfc00415 	stw	ra,16(sp)
  80e860:	0812d280 	call	812d28 <__malloc_lock>
  80e864:	98800217 	ldw	r2,8(r19)
  80e868:	9009883a 	mov	r4,r18
  80e86c:	000b883a 	mov	r5,zero
  80e870:	10c00117 	ldw	r3,4(r2)
  80e874:	00bfff04 	movi	r2,-4
  80e878:	18a0703a 	and	r16,r3,r2
  80e87c:	8463c83a 	sub	r17,r16,r17
  80e880:	8c43fbc4 	addi	r17,r17,4079
  80e884:	8822d33a 	srli	r17,r17,12
  80e888:	0083ffc4 	movi	r2,4095
  80e88c:	8c7fffc4 	addi	r17,r17,-1
  80e890:	8822933a 	slli	r17,r17,12
  80e894:	1440060e 	bge	r2,r17,80e8b0 <_malloc_trim_r+0x78>
  80e898:	080a9d80 	call	80a9d8 <_sbrk_r>
  80e89c:	98c00217 	ldw	r3,8(r19)
  80e8a0:	9009883a 	mov	r4,r18
  80e8a4:	044bc83a 	sub	r5,zero,r17
  80e8a8:	80c7883a 	add	r3,r16,r3
  80e8ac:	10c00926 	beq	r2,r3,80e8d4 <_malloc_trim_r+0x9c>
  80e8b0:	0812d480 	call	812d48 <__malloc_unlock>
  80e8b4:	0005883a 	mov	r2,zero
  80e8b8:	dfc00417 	ldw	ra,16(sp)
  80e8bc:	dcc00317 	ldw	r19,12(sp)
  80e8c0:	dc800217 	ldw	r18,8(sp)
  80e8c4:	dc400117 	ldw	r17,4(sp)
  80e8c8:	dc000017 	ldw	r16,0(sp)
  80e8cc:	dec00504 	addi	sp,sp,20
  80e8d0:	f800283a 	ret
  80e8d4:	9009883a 	mov	r4,r18
  80e8d8:	080a9d80 	call	80a9d8 <_sbrk_r>
  80e8dc:	844dc83a 	sub	r6,r16,r17
  80e8e0:	00ffffc4 	movi	r3,-1
  80e8e4:	9009883a 	mov	r4,r18
  80e8e8:	000b883a 	mov	r5,zero
  80e8ec:	01c020b4 	movhi	r7,130
  80e8f0:	39c38d04 	addi	r7,r7,3636
  80e8f4:	31800054 	ori	r6,r6,1
  80e8f8:	10c00926 	beq	r2,r3,80e920 <_malloc_trim_r+0xe8>
  80e8fc:	38800017 	ldw	r2,0(r7)
  80e900:	98c00217 	ldw	r3,8(r19)
  80e904:	9009883a 	mov	r4,r18
  80e908:	1445c83a 	sub	r2,r2,r17
  80e90c:	38800015 	stw	r2,0(r7)
  80e910:	19800115 	stw	r6,4(r3)
  80e914:	0812d480 	call	812d48 <__malloc_unlock>
  80e918:	00800044 	movi	r2,1
  80e91c:	003fe606 	br	80e8b8 <_malloc_trim_r+0x80>
  80e920:	080a9d80 	call	80a9d8 <_sbrk_r>
  80e924:	99800217 	ldw	r6,8(r19)
  80e928:	100f883a 	mov	r7,r2
  80e92c:	9009883a 	mov	r4,r18
  80e930:	1187c83a 	sub	r3,r2,r6
  80e934:	008003c4 	movi	r2,15
  80e938:	19400054 	ori	r5,r3,1
  80e93c:	10ffdc0e 	bge	r2,r3,80e8b0 <_malloc_trim_r+0x78>
  80e940:	008020b4 	movhi	r2,130
  80e944:	10bc3c04 	addi	r2,r2,-3856
  80e948:	10c00017 	ldw	r3,0(r2)
  80e94c:	008020b4 	movhi	r2,130
  80e950:	10838d04 	addi	r2,r2,3636
  80e954:	31400115 	stw	r5,4(r6)
  80e958:	38c7c83a 	sub	r3,r7,r3
  80e95c:	10c00015 	stw	r3,0(r2)
  80e960:	003fd306 	br	80e8b0 <_malloc_trim_r+0x78>

0080e964 <_free_r>:
  80e964:	defffd04 	addi	sp,sp,-12
  80e968:	dc400115 	stw	r17,4(sp)
  80e96c:	dc000015 	stw	r16,0(sp)
  80e970:	dfc00215 	stw	ra,8(sp)
  80e974:	2821883a 	mov	r16,r5
  80e978:	2023883a 	mov	r17,r4
  80e97c:	28005a26 	beq	r5,zero,80eae8 <_free_r+0x184>
  80e980:	0812d280 	call	812d28 <__malloc_lock>
  80e984:	823ffe04 	addi	r8,r16,-8
  80e988:	41400117 	ldw	r5,4(r8)
  80e98c:	00bfff84 	movi	r2,-2
  80e990:	028020b4 	movhi	r10,130
  80e994:	52b65704 	addi	r10,r10,-9892
  80e998:	288e703a 	and	r7,r5,r2
  80e99c:	41cd883a 	add	r6,r8,r7
  80e9a0:	30c00117 	ldw	r3,4(r6)
  80e9a4:	51000217 	ldw	r4,8(r10)
  80e9a8:	00bfff04 	movi	r2,-4
  80e9ac:	1892703a 	and	r9,r3,r2
  80e9b0:	5017883a 	mov	r11,r10
  80e9b4:	31006726 	beq	r6,r4,80eb54 <_free_r+0x1f0>
  80e9b8:	2880004c 	andi	r2,r5,1
  80e9bc:	1005003a 	cmpeq	r2,r2,zero
  80e9c0:	32400115 	stw	r9,4(r6)
  80e9c4:	10001a1e 	bne	r2,zero,80ea30 <_free_r+0xcc>
  80e9c8:	000b883a 	mov	r5,zero
  80e9cc:	3247883a 	add	r3,r6,r9
  80e9d0:	18800117 	ldw	r2,4(r3)
  80e9d4:	1080004c 	andi	r2,r2,1
  80e9d8:	1000231e 	bne	r2,zero,80ea68 <_free_r+0x104>
  80e9dc:	280ac03a 	cmpne	r5,r5,zero
  80e9e0:	3a4f883a 	add	r7,r7,r9
  80e9e4:	2800451e 	bne	r5,zero,80eafc <_free_r+0x198>
  80e9e8:	31000217 	ldw	r4,8(r6)
  80e9ec:	008020b4 	movhi	r2,130
  80e9f0:	10b65904 	addi	r2,r2,-9884
  80e9f4:	20807b26 	beq	r4,r2,80ebe4 <_free_r+0x280>
  80e9f8:	30800317 	ldw	r2,12(r6)
  80e9fc:	3a07883a 	add	r3,r7,r8
  80ea00:	19c00015 	stw	r7,0(r3)
  80ea04:	11000215 	stw	r4,8(r2)
  80ea08:	20800315 	stw	r2,12(r4)
  80ea0c:	38800054 	ori	r2,r7,1
  80ea10:	40800115 	stw	r2,4(r8)
  80ea14:	28001a26 	beq	r5,zero,80ea80 <_free_r+0x11c>
  80ea18:	8809883a 	mov	r4,r17
  80ea1c:	dfc00217 	ldw	ra,8(sp)
  80ea20:	dc400117 	ldw	r17,4(sp)
  80ea24:	dc000017 	ldw	r16,0(sp)
  80ea28:	dec00304 	addi	sp,sp,12
  80ea2c:	0812d481 	jmpi	812d48 <__malloc_unlock>
  80ea30:	80bffe17 	ldw	r2,-8(r16)
  80ea34:	50c00204 	addi	r3,r10,8
  80ea38:	4091c83a 	sub	r8,r8,r2
  80ea3c:	41000217 	ldw	r4,8(r8)
  80ea40:	388f883a 	add	r7,r7,r2
  80ea44:	20c06126 	beq	r4,r3,80ebcc <_free_r+0x268>
  80ea48:	40800317 	ldw	r2,12(r8)
  80ea4c:	3247883a 	add	r3,r6,r9
  80ea50:	000b883a 	mov	r5,zero
  80ea54:	11000215 	stw	r4,8(r2)
  80ea58:	20800315 	stw	r2,12(r4)
  80ea5c:	18800117 	ldw	r2,4(r3)
  80ea60:	1080004c 	andi	r2,r2,1
  80ea64:	103fdd26 	beq	r2,zero,80e9dc <_free_r+0x78>
  80ea68:	38800054 	ori	r2,r7,1
  80ea6c:	3a07883a 	add	r3,r7,r8
  80ea70:	280ac03a 	cmpne	r5,r5,zero
  80ea74:	40800115 	stw	r2,4(r8)
  80ea78:	19c00015 	stw	r7,0(r3)
  80ea7c:	283fe61e 	bne	r5,zero,80ea18 <_free_r+0xb4>
  80ea80:	00807fc4 	movi	r2,511
  80ea84:	11c01f2e 	bgeu	r2,r7,80eb04 <_free_r+0x1a0>
  80ea88:	3806d27a 	srli	r3,r7,9
  80ea8c:	1800481e 	bne	r3,zero,80ebb0 <_free_r+0x24c>
  80ea90:	3804d0fa 	srli	r2,r7,3
  80ea94:	100690fa 	slli	r3,r2,3
  80ea98:	1acd883a 	add	r6,r3,r11
  80ea9c:	31400217 	ldw	r5,8(r6)
  80eaa0:	31405926 	beq	r6,r5,80ec08 <_free_r+0x2a4>
  80eaa4:	28800117 	ldw	r2,4(r5)
  80eaa8:	00ffff04 	movi	r3,-4
  80eaac:	10c4703a 	and	r2,r2,r3
  80eab0:	3880022e 	bgeu	r7,r2,80eabc <_free_r+0x158>
  80eab4:	29400217 	ldw	r5,8(r5)
  80eab8:	317ffa1e 	bne	r6,r5,80eaa4 <_free_r+0x140>
  80eabc:	29800317 	ldw	r6,12(r5)
  80eac0:	41800315 	stw	r6,12(r8)
  80eac4:	41400215 	stw	r5,8(r8)
  80eac8:	8809883a 	mov	r4,r17
  80eacc:	2a000315 	stw	r8,12(r5)
  80ead0:	32000215 	stw	r8,8(r6)
  80ead4:	dfc00217 	ldw	ra,8(sp)
  80ead8:	dc400117 	ldw	r17,4(sp)
  80eadc:	dc000017 	ldw	r16,0(sp)
  80eae0:	dec00304 	addi	sp,sp,12
  80eae4:	0812d481 	jmpi	812d48 <__malloc_unlock>
  80eae8:	dfc00217 	ldw	ra,8(sp)
  80eaec:	dc400117 	ldw	r17,4(sp)
  80eaf0:	dc000017 	ldw	r16,0(sp)
  80eaf4:	dec00304 	addi	sp,sp,12
  80eaf8:	f800283a 	ret
  80eafc:	31000217 	ldw	r4,8(r6)
  80eb00:	003fbd06 	br	80e9f8 <_free_r+0x94>
  80eb04:	3806d0fa 	srli	r3,r7,3
  80eb08:	00800044 	movi	r2,1
  80eb0c:	51400117 	ldw	r5,4(r10)
  80eb10:	180890fa 	slli	r4,r3,3
  80eb14:	1807d0ba 	srai	r3,r3,2
  80eb18:	22c9883a 	add	r4,r4,r11
  80eb1c:	21800217 	ldw	r6,8(r4)
  80eb20:	10c4983a 	sll	r2,r2,r3
  80eb24:	41000315 	stw	r4,12(r8)
  80eb28:	41800215 	stw	r6,8(r8)
  80eb2c:	288ab03a 	or	r5,r5,r2
  80eb30:	22000215 	stw	r8,8(r4)
  80eb34:	8809883a 	mov	r4,r17
  80eb38:	51400115 	stw	r5,4(r10)
  80eb3c:	32000315 	stw	r8,12(r6)
  80eb40:	dfc00217 	ldw	ra,8(sp)
  80eb44:	dc400117 	ldw	r17,4(sp)
  80eb48:	dc000017 	ldw	r16,0(sp)
  80eb4c:	dec00304 	addi	sp,sp,12
  80eb50:	0812d481 	jmpi	812d48 <__malloc_unlock>
  80eb54:	2880004c 	andi	r2,r5,1
  80eb58:	3a4d883a 	add	r6,r7,r9
  80eb5c:	1000071e 	bne	r2,zero,80eb7c <_free_r+0x218>
  80eb60:	80bffe17 	ldw	r2,-8(r16)
  80eb64:	4091c83a 	sub	r8,r8,r2
  80eb68:	41000317 	ldw	r4,12(r8)
  80eb6c:	40c00217 	ldw	r3,8(r8)
  80eb70:	308d883a 	add	r6,r6,r2
  80eb74:	20c00215 	stw	r3,8(r4)
  80eb78:	19000315 	stw	r4,12(r3)
  80eb7c:	008020b4 	movhi	r2,130
  80eb80:	10bc3b04 	addi	r2,r2,-3860
  80eb84:	11000017 	ldw	r4,0(r2)
  80eb88:	30c00054 	ori	r3,r6,1
  80eb8c:	52000215 	stw	r8,8(r10)
  80eb90:	40c00115 	stw	r3,4(r8)
  80eb94:	313fa036 	bltu	r6,r4,80ea18 <_free_r+0xb4>
  80eb98:	008020b4 	movhi	r2,130
  80eb9c:	10836d04 	addi	r2,r2,3508
  80eba0:	11400017 	ldw	r5,0(r2)
  80eba4:	8809883a 	mov	r4,r17
  80eba8:	080e8380 	call	80e838 <_malloc_trim_r>
  80ebac:	003f9a06 	br	80ea18 <_free_r+0xb4>
  80ebb0:	00800104 	movi	r2,4
  80ebb4:	10c0072e 	bgeu	r2,r3,80ebd4 <_free_r+0x270>
  80ebb8:	00800504 	movi	r2,20
  80ebbc:	10c01936 	bltu	r2,r3,80ec24 <_free_r+0x2c0>
  80ebc0:	188016c4 	addi	r2,r3,91
  80ebc4:	100690fa 	slli	r3,r2,3
  80ebc8:	003fb306 	br	80ea98 <_free_r+0x134>
  80ebcc:	01400044 	movi	r5,1
  80ebd0:	003f7e06 	br	80e9cc <_free_r+0x68>
  80ebd4:	3804d1ba 	srli	r2,r7,6
  80ebd8:	10800e04 	addi	r2,r2,56
  80ebdc:	100690fa 	slli	r3,r2,3
  80ebe0:	003fad06 	br	80ea98 <_free_r+0x134>
  80ebe4:	22000315 	stw	r8,12(r4)
  80ebe8:	22000215 	stw	r8,8(r4)
  80ebec:	3a05883a 	add	r2,r7,r8
  80ebf0:	38c00054 	ori	r3,r7,1
  80ebf4:	11c00015 	stw	r7,0(r2)
  80ebf8:	41000215 	stw	r4,8(r8)
  80ebfc:	40c00115 	stw	r3,4(r8)
  80ec00:	41000315 	stw	r4,12(r8)
  80ec04:	003f8406 	br	80ea18 <_free_r+0xb4>
  80ec08:	1005d0ba 	srai	r2,r2,2
  80ec0c:	00c00044 	movi	r3,1
  80ec10:	51000117 	ldw	r4,4(r10)
  80ec14:	1886983a 	sll	r3,r3,r2
  80ec18:	20c8b03a 	or	r4,r4,r3
  80ec1c:	51000115 	stw	r4,4(r10)
  80ec20:	003fa706 	br	80eac0 <_free_r+0x15c>
  80ec24:	00801504 	movi	r2,84
  80ec28:	10c00436 	bltu	r2,r3,80ec3c <_free_r+0x2d8>
  80ec2c:	3804d33a 	srli	r2,r7,12
  80ec30:	10801b84 	addi	r2,r2,110
  80ec34:	100690fa 	slli	r3,r2,3
  80ec38:	003f9706 	br	80ea98 <_free_r+0x134>
  80ec3c:	00805504 	movi	r2,340
  80ec40:	10c00436 	bltu	r2,r3,80ec54 <_free_r+0x2f0>
  80ec44:	3804d3fa 	srli	r2,r7,15
  80ec48:	10801dc4 	addi	r2,r2,119
  80ec4c:	100690fa 	slli	r3,r2,3
  80ec50:	003f9106 	br	80ea98 <_free_r+0x134>
  80ec54:	00815504 	movi	r2,1364
  80ec58:	10c0032e 	bgeu	r2,r3,80ec68 <_free_r+0x304>
  80ec5c:	00801f84 	movi	r2,126
  80ec60:	00c0fc04 	movi	r3,1008
  80ec64:	003f8c06 	br	80ea98 <_free_r+0x134>
  80ec68:	3804d4ba 	srli	r2,r7,18
  80ec6c:	10801f04 	addi	r2,r2,124
  80ec70:	100690fa 	slli	r3,r2,3
  80ec74:	003f8806 	br	80ea98 <_free_r+0x134>

0080ec78 <__sfvwrite_r>:
  80ec78:	30800217 	ldw	r2,8(r6)
  80ec7c:	defff504 	addi	sp,sp,-44
  80ec80:	df000915 	stw	fp,36(sp)
  80ec84:	dd800715 	stw	r22,28(sp)
  80ec88:	dc800315 	stw	r18,12(sp)
  80ec8c:	dfc00a15 	stw	ra,40(sp)
  80ec90:	ddc00815 	stw	r23,32(sp)
  80ec94:	dd400615 	stw	r21,24(sp)
  80ec98:	dd000515 	stw	r20,20(sp)
  80ec9c:	dcc00415 	stw	r19,16(sp)
  80eca0:	dc400215 	stw	r17,8(sp)
  80eca4:	dc000115 	stw	r16,4(sp)
  80eca8:	302d883a 	mov	r22,r6
  80ecac:	2039883a 	mov	fp,r4
  80ecb0:	2825883a 	mov	r18,r5
  80ecb4:	10001c26 	beq	r2,zero,80ed28 <__sfvwrite_r+0xb0>
  80ecb8:	29c0030b 	ldhu	r7,12(r5)
  80ecbc:	3880020c 	andi	r2,r7,8
  80ecc0:	10002726 	beq	r2,zero,80ed60 <__sfvwrite_r+0xe8>
  80ecc4:	28800417 	ldw	r2,16(r5)
  80ecc8:	10002526 	beq	r2,zero,80ed60 <__sfvwrite_r+0xe8>
  80eccc:	3880008c 	andi	r2,r7,2
  80ecd0:	b5400017 	ldw	r21,0(r22)
  80ecd4:	10002826 	beq	r2,zero,80ed78 <__sfvwrite_r+0x100>
  80ecd8:	0021883a 	mov	r16,zero
  80ecdc:	0023883a 	mov	r17,zero
  80ece0:	880d883a 	mov	r6,r17
  80ece4:	e009883a 	mov	r4,fp
  80ece8:	00810004 	movi	r2,1024
  80ecec:	80006e26 	beq	r16,zero,80eea8 <__sfvwrite_r+0x230>
  80ecf0:	800f883a 	mov	r7,r16
  80ecf4:	91400717 	ldw	r5,28(r18)
  80ecf8:	1400012e 	bgeu	r2,r16,80ed00 <__sfvwrite_r+0x88>
  80ecfc:	100f883a 	mov	r7,r2
  80ed00:	90c00917 	ldw	r3,36(r18)
  80ed04:	183ee83a 	callr	r3
  80ed08:	1007883a 	mov	r3,r2
  80ed0c:	80a1c83a 	sub	r16,r16,r2
  80ed10:	88a3883a 	add	r17,r17,r2
  80ed14:	00806d0e 	bge	zero,r2,80eecc <__sfvwrite_r+0x254>
  80ed18:	b0800217 	ldw	r2,8(r22)
  80ed1c:	10c5c83a 	sub	r2,r2,r3
  80ed20:	b0800215 	stw	r2,8(r22)
  80ed24:	103fee1e 	bne	r2,zero,80ece0 <__sfvwrite_r+0x68>
  80ed28:	0009883a 	mov	r4,zero
  80ed2c:	2005883a 	mov	r2,r4
  80ed30:	dfc00a17 	ldw	ra,40(sp)
  80ed34:	df000917 	ldw	fp,36(sp)
  80ed38:	ddc00817 	ldw	r23,32(sp)
  80ed3c:	dd800717 	ldw	r22,28(sp)
  80ed40:	dd400617 	ldw	r21,24(sp)
  80ed44:	dd000517 	ldw	r20,20(sp)
  80ed48:	dcc00417 	ldw	r19,16(sp)
  80ed4c:	dc800317 	ldw	r18,12(sp)
  80ed50:	dc400217 	ldw	r17,8(sp)
  80ed54:	dc000117 	ldw	r16,4(sp)
  80ed58:	dec00b04 	addi	sp,sp,44
  80ed5c:	f800283a 	ret
  80ed60:	080ca400 	call	80ca40 <__swsetup_r>
  80ed64:	1000e41e 	bne	r2,zero,80f0f8 <__sfvwrite_r+0x480>
  80ed68:	91c0030b 	ldhu	r7,12(r18)
  80ed6c:	b5400017 	ldw	r21,0(r22)
  80ed70:	3880008c 	andi	r2,r7,2
  80ed74:	103fd81e 	bne	r2,zero,80ecd8 <__sfvwrite_r+0x60>
  80ed78:	3880004c 	andi	r2,r7,1
  80ed7c:	1005003a 	cmpeq	r2,r2,zero
  80ed80:	10005726 	beq	r2,zero,80eee0 <__sfvwrite_r+0x268>
  80ed84:	0029883a 	mov	r20,zero
  80ed88:	002f883a 	mov	r23,zero
  80ed8c:	a0004226 	beq	r20,zero,80ee98 <__sfvwrite_r+0x220>
  80ed90:	3880800c 	andi	r2,r7,512
  80ed94:	94000217 	ldw	r16,8(r18)
  80ed98:	10008b26 	beq	r2,zero,80efc8 <__sfvwrite_r+0x350>
  80ed9c:	800d883a 	mov	r6,r16
  80eda0:	a400a536 	bltu	r20,r16,80f038 <__sfvwrite_r+0x3c0>
  80eda4:	3881200c 	andi	r2,r7,1152
  80eda8:	10002726 	beq	r2,zero,80ee48 <__sfvwrite_r+0x1d0>
  80edac:	90800517 	ldw	r2,20(r18)
  80edb0:	92000417 	ldw	r8,16(r18)
  80edb4:	91400017 	ldw	r5,0(r18)
  80edb8:	1087883a 	add	r3,r2,r2
  80edbc:	1887883a 	add	r3,r3,r2
  80edc0:	1808d7fa 	srli	r4,r3,31
  80edc4:	2a21c83a 	sub	r16,r5,r8
  80edc8:	80800044 	addi	r2,r16,1
  80edcc:	20c9883a 	add	r4,r4,r3
  80edd0:	2027d07a 	srai	r19,r4,1
  80edd4:	a085883a 	add	r2,r20,r2
  80edd8:	980d883a 	mov	r6,r19
  80eddc:	9880022e 	bgeu	r19,r2,80ede8 <__sfvwrite_r+0x170>
  80ede0:	1027883a 	mov	r19,r2
  80ede4:	100d883a 	mov	r6,r2
  80ede8:	3881000c 	andi	r2,r7,1024
  80edec:	1000b826 	beq	r2,zero,80f0d0 <__sfvwrite_r+0x458>
  80edf0:	300b883a 	mov	r5,r6
  80edf4:	e009883a 	mov	r4,fp
  80edf8:	080a0d80 	call	80a0d8 <_malloc_r>
  80edfc:	10003126 	beq	r2,zero,80eec4 <__sfvwrite_r+0x24c>
  80ee00:	91400417 	ldw	r5,16(r18)
  80ee04:	1009883a 	mov	r4,r2
  80ee08:	800d883a 	mov	r6,r16
  80ee0c:	1023883a 	mov	r17,r2
  80ee10:	080f6440 	call	80f644 <memcpy>
  80ee14:	90c0030b 	ldhu	r3,12(r18)
  80ee18:	00beffc4 	movi	r2,-1025
  80ee1c:	1886703a 	and	r3,r3,r2
  80ee20:	18c02014 	ori	r3,r3,128
  80ee24:	90c0030d 	sth	r3,12(r18)
  80ee28:	9c07c83a 	sub	r3,r19,r16
  80ee2c:	8c05883a 	add	r2,r17,r16
  80ee30:	a00d883a 	mov	r6,r20
  80ee34:	a021883a 	mov	r16,r20
  80ee38:	90800015 	stw	r2,0(r18)
  80ee3c:	90c00215 	stw	r3,8(r18)
  80ee40:	94400415 	stw	r17,16(r18)
  80ee44:	94c00515 	stw	r19,20(r18)
  80ee48:	91000017 	ldw	r4,0(r18)
  80ee4c:	b80b883a 	mov	r5,r23
  80ee50:	a023883a 	mov	r17,r20
  80ee54:	080f6e40 	call	80f6e4 <memmove>
  80ee58:	90c00217 	ldw	r3,8(r18)
  80ee5c:	90800017 	ldw	r2,0(r18)
  80ee60:	a027883a 	mov	r19,r20
  80ee64:	1c07c83a 	sub	r3,r3,r16
  80ee68:	1405883a 	add	r2,r2,r16
  80ee6c:	90c00215 	stw	r3,8(r18)
  80ee70:	a021883a 	mov	r16,r20
  80ee74:	90800015 	stw	r2,0(r18)
  80ee78:	b0800217 	ldw	r2,8(r22)
  80ee7c:	1405c83a 	sub	r2,r2,r16
  80ee80:	b0800215 	stw	r2,8(r22)
  80ee84:	103fa826 	beq	r2,zero,80ed28 <__sfvwrite_r+0xb0>
  80ee88:	a469c83a 	sub	r20,r20,r17
  80ee8c:	91c0030b 	ldhu	r7,12(r18)
  80ee90:	bcef883a 	add	r23,r23,r19
  80ee94:	a03fbe1e 	bne	r20,zero,80ed90 <__sfvwrite_r+0x118>
  80ee98:	adc00017 	ldw	r23,0(r21)
  80ee9c:	ad000117 	ldw	r20,4(r21)
  80eea0:	ad400204 	addi	r21,r21,8
  80eea4:	003fb906 	br	80ed8c <__sfvwrite_r+0x114>
  80eea8:	ac400017 	ldw	r17,0(r21)
  80eeac:	ac000117 	ldw	r16,4(r21)
  80eeb0:	ad400204 	addi	r21,r21,8
  80eeb4:	003f8a06 	br	80ece0 <__sfvwrite_r+0x68>
  80eeb8:	91400417 	ldw	r5,16(r18)
  80eebc:	e009883a 	mov	r4,fp
  80eec0:	080e9640 	call	80e964 <_free_r>
  80eec4:	00800304 	movi	r2,12
  80eec8:	e0800015 	stw	r2,0(fp)
  80eecc:	9080030b 	ldhu	r2,12(r18)
  80eed0:	013fffc4 	movi	r4,-1
  80eed4:	10801014 	ori	r2,r2,64
  80eed8:	9080030d 	sth	r2,12(r18)
  80eedc:	003f9306 	br	80ed2c <__sfvwrite_r+0xb4>
  80eee0:	0027883a 	mov	r19,zero
  80eee4:	002f883a 	mov	r23,zero
  80eee8:	d8000015 	stw	zero,0(sp)
  80eeec:	0029883a 	mov	r20,zero
  80eef0:	98001e26 	beq	r19,zero,80ef6c <__sfvwrite_r+0x2f4>
  80eef4:	d8c00017 	ldw	r3,0(sp)
  80eef8:	1804c03a 	cmpne	r2,r3,zero
  80eefc:	10005e26 	beq	r2,zero,80f078 <__sfvwrite_r+0x400>
  80ef00:	9821883a 	mov	r16,r19
  80ef04:	a4c0012e 	bgeu	r20,r19,80ef0c <__sfvwrite_r+0x294>
  80ef08:	a021883a 	mov	r16,r20
  80ef0c:	91000017 	ldw	r4,0(r18)
  80ef10:	90800417 	ldw	r2,16(r18)
  80ef14:	91800217 	ldw	r6,8(r18)
  80ef18:	91c00517 	ldw	r7,20(r18)
  80ef1c:	1100022e 	bgeu	r2,r4,80ef28 <__sfvwrite_r+0x2b0>
  80ef20:	31e3883a 	add	r17,r6,r7
  80ef24:	8c001616 	blt	r17,r16,80ef80 <__sfvwrite_r+0x308>
  80ef28:	81c03816 	blt	r16,r7,80f00c <__sfvwrite_r+0x394>
  80ef2c:	90c00917 	ldw	r3,36(r18)
  80ef30:	91400717 	ldw	r5,28(r18)
  80ef34:	e009883a 	mov	r4,fp
  80ef38:	b80d883a 	mov	r6,r23
  80ef3c:	183ee83a 	callr	r3
  80ef40:	1023883a 	mov	r17,r2
  80ef44:	00bfe10e 	bge	zero,r2,80eecc <__sfvwrite_r+0x254>
  80ef48:	a469c83a 	sub	r20,r20,r17
  80ef4c:	a0001826 	beq	r20,zero,80efb0 <__sfvwrite_r+0x338>
  80ef50:	b0800217 	ldw	r2,8(r22)
  80ef54:	1445c83a 	sub	r2,r2,r17
  80ef58:	b0800215 	stw	r2,8(r22)
  80ef5c:	103f7226 	beq	r2,zero,80ed28 <__sfvwrite_r+0xb0>
  80ef60:	9c67c83a 	sub	r19,r19,r17
  80ef64:	bc6f883a 	add	r23,r23,r17
  80ef68:	983fe21e 	bne	r19,zero,80eef4 <__sfvwrite_r+0x27c>
  80ef6c:	adc00017 	ldw	r23,0(r21)
  80ef70:	acc00117 	ldw	r19,4(r21)
  80ef74:	ad400204 	addi	r21,r21,8
  80ef78:	d8000015 	stw	zero,0(sp)
  80ef7c:	003fdc06 	br	80eef0 <__sfvwrite_r+0x278>
  80ef80:	b80b883a 	mov	r5,r23
  80ef84:	880d883a 	mov	r6,r17
  80ef88:	080f6e40 	call	80f6e4 <memmove>
  80ef8c:	90c00017 	ldw	r3,0(r18)
  80ef90:	e009883a 	mov	r4,fp
  80ef94:	900b883a 	mov	r5,r18
  80ef98:	1c47883a 	add	r3,r3,r17
  80ef9c:	90c00015 	stw	r3,0(r18)
  80efa0:	080e3480 	call	80e348 <_fflush_r>
  80efa4:	103fc91e 	bne	r2,zero,80eecc <__sfvwrite_r+0x254>
  80efa8:	a469c83a 	sub	r20,r20,r17
  80efac:	a03fe81e 	bne	r20,zero,80ef50 <__sfvwrite_r+0x2d8>
  80efb0:	e009883a 	mov	r4,fp
  80efb4:	900b883a 	mov	r5,r18
  80efb8:	080e3480 	call	80e348 <_fflush_r>
  80efbc:	103fc31e 	bne	r2,zero,80eecc <__sfvwrite_r+0x254>
  80efc0:	d8000015 	stw	zero,0(sp)
  80efc4:	003fe206 	br	80ef50 <__sfvwrite_r+0x2d8>
  80efc8:	91000017 	ldw	r4,0(r18)
  80efcc:	90800417 	ldw	r2,16(r18)
  80efd0:	1100022e 	bgeu	r2,r4,80efdc <__sfvwrite_r+0x364>
  80efd4:	8023883a 	mov	r17,r16
  80efd8:	85003136 	bltu	r16,r20,80f0a0 <__sfvwrite_r+0x428>
  80efdc:	91c00517 	ldw	r7,20(r18)
  80efe0:	a1c01836 	bltu	r20,r7,80f044 <__sfvwrite_r+0x3cc>
  80efe4:	90c00917 	ldw	r3,36(r18)
  80efe8:	91400717 	ldw	r5,28(r18)
  80efec:	e009883a 	mov	r4,fp
  80eff0:	b80d883a 	mov	r6,r23
  80eff4:	183ee83a 	callr	r3
  80eff8:	1021883a 	mov	r16,r2
  80effc:	00bfb30e 	bge	zero,r2,80eecc <__sfvwrite_r+0x254>
  80f000:	1023883a 	mov	r17,r2
  80f004:	1027883a 	mov	r19,r2
  80f008:	003f9b06 	br	80ee78 <__sfvwrite_r+0x200>
  80f00c:	b80b883a 	mov	r5,r23
  80f010:	800d883a 	mov	r6,r16
  80f014:	080f6e40 	call	80f6e4 <memmove>
  80f018:	90c00217 	ldw	r3,8(r18)
  80f01c:	90800017 	ldw	r2,0(r18)
  80f020:	8023883a 	mov	r17,r16
  80f024:	1c07c83a 	sub	r3,r3,r16
  80f028:	1405883a 	add	r2,r2,r16
  80f02c:	90c00215 	stw	r3,8(r18)
  80f030:	90800015 	stw	r2,0(r18)
  80f034:	003fc406 	br	80ef48 <__sfvwrite_r+0x2d0>
  80f038:	a00d883a 	mov	r6,r20
  80f03c:	a021883a 	mov	r16,r20
  80f040:	003f8106 	br	80ee48 <__sfvwrite_r+0x1d0>
  80f044:	b80b883a 	mov	r5,r23
  80f048:	a00d883a 	mov	r6,r20
  80f04c:	080f6e40 	call	80f6e4 <memmove>
  80f050:	90c00217 	ldw	r3,8(r18)
  80f054:	90800017 	ldw	r2,0(r18)
  80f058:	a021883a 	mov	r16,r20
  80f05c:	1d07c83a 	sub	r3,r3,r20
  80f060:	1505883a 	add	r2,r2,r20
  80f064:	a023883a 	mov	r17,r20
  80f068:	a027883a 	mov	r19,r20
  80f06c:	90c00215 	stw	r3,8(r18)
  80f070:	90800015 	stw	r2,0(r18)
  80f074:	003f8006 	br	80ee78 <__sfvwrite_r+0x200>
  80f078:	b809883a 	mov	r4,r23
  80f07c:	01400284 	movi	r5,10
  80f080:	980d883a 	mov	r6,r19
  80f084:	080f5600 	call	80f560 <memchr>
  80f088:	10001726 	beq	r2,zero,80f0e8 <__sfvwrite_r+0x470>
  80f08c:	15c5c83a 	sub	r2,r2,r23
  80f090:	15000044 	addi	r20,r2,1
  80f094:	00800044 	movi	r2,1
  80f098:	d8800015 	stw	r2,0(sp)
  80f09c:	003f9806 	br	80ef00 <__sfvwrite_r+0x288>
  80f0a0:	b80b883a 	mov	r5,r23
  80f0a4:	800d883a 	mov	r6,r16
  80f0a8:	080f6e40 	call	80f6e4 <memmove>
  80f0ac:	90c00017 	ldw	r3,0(r18)
  80f0b0:	e009883a 	mov	r4,fp
  80f0b4:	900b883a 	mov	r5,r18
  80f0b8:	1c07883a 	add	r3,r3,r16
  80f0bc:	90c00015 	stw	r3,0(r18)
  80f0c0:	8027883a 	mov	r19,r16
  80f0c4:	080e3480 	call	80e348 <_fflush_r>
  80f0c8:	103f6b26 	beq	r2,zero,80ee78 <__sfvwrite_r+0x200>
  80f0cc:	003f7f06 	br	80eecc <__sfvwrite_r+0x254>
  80f0d0:	400b883a 	mov	r5,r8
  80f0d4:	e009883a 	mov	r4,fp
  80f0d8:	08108500 	call	810850 <_realloc_r>
  80f0dc:	103f7626 	beq	r2,zero,80eeb8 <__sfvwrite_r+0x240>
  80f0e0:	1023883a 	mov	r17,r2
  80f0e4:	003f5006 	br	80ee28 <__sfvwrite_r+0x1b0>
  80f0e8:	00c00044 	movi	r3,1
  80f0ec:	9d000044 	addi	r20,r19,1
  80f0f0:	d8c00015 	stw	r3,0(sp)
  80f0f4:	003f8206 	br	80ef00 <__sfvwrite_r+0x288>
  80f0f8:	9080030b 	ldhu	r2,12(r18)
  80f0fc:	00c00244 	movi	r3,9
  80f100:	013fffc4 	movi	r4,-1
  80f104:	10801014 	ori	r2,r2,64
  80f108:	9080030d 	sth	r2,12(r18)
  80f10c:	e0c00015 	stw	r3,0(fp)
  80f110:	003f0606 	br	80ed2c <__sfvwrite_r+0xb4>

0080f114 <_fwalk_reent>:
  80f114:	defff704 	addi	sp,sp,-36
  80f118:	dcc00315 	stw	r19,12(sp)
  80f11c:	24c0b804 	addi	r19,r4,736
  80f120:	dd800615 	stw	r22,24(sp)
  80f124:	dd400515 	stw	r21,20(sp)
  80f128:	dfc00815 	stw	ra,32(sp)
  80f12c:	ddc00715 	stw	r23,28(sp)
  80f130:	dd000415 	stw	r20,16(sp)
  80f134:	dc800215 	stw	r18,8(sp)
  80f138:	dc400115 	stw	r17,4(sp)
  80f13c:	dc000015 	stw	r16,0(sp)
  80f140:	202b883a 	mov	r21,r4
  80f144:	282d883a 	mov	r22,r5
  80f148:	080e5d00 	call	80e5d0 <__sfp_lock_acquire>
  80f14c:	98002126 	beq	r19,zero,80f1d4 <_fwalk_reent+0xc0>
  80f150:	002f883a 	mov	r23,zero
  80f154:	9c800117 	ldw	r18,4(r19)
  80f158:	9c000217 	ldw	r16,8(r19)
  80f15c:	90bfffc4 	addi	r2,r18,-1
  80f160:	10000d16 	blt	r2,zero,80f198 <_fwalk_reent+0x84>
  80f164:	0023883a 	mov	r17,zero
  80f168:	053fffc4 	movi	r20,-1
  80f16c:	8080030f 	ldh	r2,12(r16)
  80f170:	8c400044 	addi	r17,r17,1
  80f174:	10000626 	beq	r2,zero,80f190 <_fwalk_reent+0x7c>
  80f178:	8080038f 	ldh	r2,14(r16)
  80f17c:	800b883a 	mov	r5,r16
  80f180:	a809883a 	mov	r4,r21
  80f184:	15000226 	beq	r2,r20,80f190 <_fwalk_reent+0x7c>
  80f188:	b03ee83a 	callr	r22
  80f18c:	b8aeb03a 	or	r23,r23,r2
  80f190:	84001704 	addi	r16,r16,92
  80f194:	947ff51e 	bne	r18,r17,80f16c <_fwalk_reent+0x58>
  80f198:	9cc00017 	ldw	r19,0(r19)
  80f19c:	983fed1e 	bne	r19,zero,80f154 <_fwalk_reent+0x40>
  80f1a0:	080e5d40 	call	80e5d4 <__sfp_lock_release>
  80f1a4:	b805883a 	mov	r2,r23
  80f1a8:	dfc00817 	ldw	ra,32(sp)
  80f1ac:	ddc00717 	ldw	r23,28(sp)
  80f1b0:	dd800617 	ldw	r22,24(sp)
  80f1b4:	dd400517 	ldw	r21,20(sp)
  80f1b8:	dd000417 	ldw	r20,16(sp)
  80f1bc:	dcc00317 	ldw	r19,12(sp)
  80f1c0:	dc800217 	ldw	r18,8(sp)
  80f1c4:	dc400117 	ldw	r17,4(sp)
  80f1c8:	dc000017 	ldw	r16,0(sp)
  80f1cc:	dec00904 	addi	sp,sp,36
  80f1d0:	f800283a 	ret
  80f1d4:	002f883a 	mov	r23,zero
  80f1d8:	003ff106 	br	80f1a0 <_fwalk_reent+0x8c>

0080f1dc <_fwalk>:
  80f1dc:	defff804 	addi	sp,sp,-32
  80f1e0:	dcc00315 	stw	r19,12(sp)
  80f1e4:	24c0b804 	addi	r19,r4,736
  80f1e8:	dd400515 	stw	r21,20(sp)
  80f1ec:	dfc00715 	stw	ra,28(sp)
  80f1f0:	dd800615 	stw	r22,24(sp)
  80f1f4:	dd000415 	stw	r20,16(sp)
  80f1f8:	dc800215 	stw	r18,8(sp)
  80f1fc:	dc400115 	stw	r17,4(sp)
  80f200:	dc000015 	stw	r16,0(sp)
  80f204:	282b883a 	mov	r21,r5
  80f208:	080e5d00 	call	80e5d0 <__sfp_lock_acquire>
  80f20c:	98001f26 	beq	r19,zero,80f28c <_fwalk+0xb0>
  80f210:	002d883a 	mov	r22,zero
  80f214:	9c800117 	ldw	r18,4(r19)
  80f218:	9c000217 	ldw	r16,8(r19)
  80f21c:	90bfffc4 	addi	r2,r18,-1
  80f220:	10000c16 	blt	r2,zero,80f254 <_fwalk+0x78>
  80f224:	0023883a 	mov	r17,zero
  80f228:	053fffc4 	movi	r20,-1
  80f22c:	8080030f 	ldh	r2,12(r16)
  80f230:	8c400044 	addi	r17,r17,1
  80f234:	10000526 	beq	r2,zero,80f24c <_fwalk+0x70>
  80f238:	8080038f 	ldh	r2,14(r16)
  80f23c:	8009883a 	mov	r4,r16
  80f240:	15000226 	beq	r2,r20,80f24c <_fwalk+0x70>
  80f244:	a83ee83a 	callr	r21
  80f248:	b0acb03a 	or	r22,r22,r2
  80f24c:	84001704 	addi	r16,r16,92
  80f250:	947ff61e 	bne	r18,r17,80f22c <_fwalk+0x50>
  80f254:	9cc00017 	ldw	r19,0(r19)
  80f258:	983fee1e 	bne	r19,zero,80f214 <_fwalk+0x38>
  80f25c:	080e5d40 	call	80e5d4 <__sfp_lock_release>
  80f260:	b005883a 	mov	r2,r22
  80f264:	dfc00717 	ldw	ra,28(sp)
  80f268:	dd800617 	ldw	r22,24(sp)
  80f26c:	dd400517 	ldw	r21,20(sp)
  80f270:	dd000417 	ldw	r20,16(sp)
  80f274:	dcc00317 	ldw	r19,12(sp)
  80f278:	dc800217 	ldw	r18,8(sp)
  80f27c:	dc400117 	ldw	r17,4(sp)
  80f280:	dc000017 	ldw	r16,0(sp)
  80f284:	dec00804 	addi	sp,sp,32
  80f288:	f800283a 	ret
  80f28c:	002d883a 	mov	r22,zero
  80f290:	003ff206 	br	80f25c <_fwalk+0x80>

0080f294 <_gettimeofday_r>:
  80f294:	defffd04 	addi	sp,sp,-12
  80f298:	dc000015 	stw	r16,0(sp)
  80f29c:	040020b4 	movhi	r16,130
  80f2a0:	84037004 	addi	r16,r16,3520
  80f2a4:	dc400115 	stw	r17,4(sp)
  80f2a8:	80000015 	stw	zero,0(r16)
  80f2ac:	2023883a 	mov	r17,r4
  80f2b0:	2809883a 	mov	r4,r5
  80f2b4:	300b883a 	mov	r5,r6
  80f2b8:	dfc00215 	stw	ra,8(sp)
  80f2bc:	08125840 	call	812584 <gettimeofday>
  80f2c0:	1007883a 	mov	r3,r2
  80f2c4:	00bfffc4 	movi	r2,-1
  80f2c8:	18800626 	beq	r3,r2,80f2e4 <_gettimeofday_r+0x50>
  80f2cc:	1805883a 	mov	r2,r3
  80f2d0:	dfc00217 	ldw	ra,8(sp)
  80f2d4:	dc400117 	ldw	r17,4(sp)
  80f2d8:	dc000017 	ldw	r16,0(sp)
  80f2dc:	dec00304 	addi	sp,sp,12
  80f2e0:	f800283a 	ret
  80f2e4:	80800017 	ldw	r2,0(r16)
  80f2e8:	103ff826 	beq	r2,zero,80f2cc <_gettimeofday_r+0x38>
  80f2ec:	88800015 	stw	r2,0(r17)
  80f2f0:	1805883a 	mov	r2,r3
  80f2f4:	dfc00217 	ldw	ra,8(sp)
  80f2f8:	dc400117 	ldw	r17,4(sp)
  80f2fc:	dc000017 	ldw	r16,0(sp)
  80f300:	dec00304 	addi	sp,sp,12
  80f304:	f800283a 	ret

0080f308 <__locale_charset>:
  80f308:	d0a00b17 	ldw	r2,-32724(gp)
  80f30c:	f800283a 	ret

0080f310 <_localeconv_r>:
  80f310:	008020b4 	movhi	r2,130
  80f314:	10b4c004 	addi	r2,r2,-11520
  80f318:	f800283a 	ret

0080f31c <localeconv>:
  80f31c:	008020b4 	movhi	r2,130
  80f320:	10bc3904 	addi	r2,r2,-3868
  80f324:	11000017 	ldw	r4,0(r2)
  80f328:	080f3101 	jmpi	80f310 <_localeconv_r>

0080f32c <_setlocale_r>:
  80f32c:	defffc04 	addi	sp,sp,-16
  80f330:	00c020b4 	movhi	r3,130
  80f334:	18f49604 	addi	r3,r3,-11688
  80f338:	dc800215 	stw	r18,8(sp)
  80f33c:	dc400115 	stw	r17,4(sp)
  80f340:	dc000015 	stw	r16,0(sp)
  80f344:	2023883a 	mov	r17,r4
  80f348:	2825883a 	mov	r18,r5
  80f34c:	dfc00315 	stw	ra,12(sp)
  80f350:	3021883a 	mov	r16,r6
  80f354:	3009883a 	mov	r4,r6
  80f358:	180b883a 	mov	r5,r3
  80f35c:	30000926 	beq	r6,zero,80f384 <_setlocale_r+0x58>
  80f360:	0810fd00 	call	810fd0 <strcmp>
  80f364:	8009883a 	mov	r4,r16
  80f368:	014020b4 	movhi	r5,130
  80f36c:	2974a704 	addi	r5,r5,-11620
  80f370:	10000b1e 	bne	r2,zero,80f3a0 <_setlocale_r+0x74>
  80f374:	8c000d15 	stw	r16,52(r17)
  80f378:	8c800c15 	stw	r18,48(r17)
  80f37c:	00c020b4 	movhi	r3,130
  80f380:	18f49604 	addi	r3,r3,-11688
  80f384:	1805883a 	mov	r2,r3
  80f388:	dfc00317 	ldw	ra,12(sp)
  80f38c:	dc800217 	ldw	r18,8(sp)
  80f390:	dc400117 	ldw	r17,4(sp)
  80f394:	dc000017 	ldw	r16,0(sp)
  80f398:	dec00404 	addi	sp,sp,16
  80f39c:	f800283a 	ret
  80f3a0:	0810fd00 	call	810fd0 <strcmp>
  80f3a4:	0007883a 	mov	r3,zero
  80f3a8:	103ff226 	beq	r2,zero,80f374 <_setlocale_r+0x48>
  80f3ac:	003ff506 	br	80f384 <_setlocale_r+0x58>

0080f3b0 <setlocale>:
  80f3b0:	018020b4 	movhi	r6,130
  80f3b4:	31bc3904 	addi	r6,r6,-3868
  80f3b8:	2007883a 	mov	r3,r4
  80f3bc:	31000017 	ldw	r4,0(r6)
  80f3c0:	280d883a 	mov	r6,r5
  80f3c4:	180b883a 	mov	r5,r3
  80f3c8:	080f32c1 	jmpi	80f32c <_setlocale_r>

0080f3cc <__smakebuf_r>:
  80f3cc:	2880030b 	ldhu	r2,12(r5)
  80f3d0:	deffed04 	addi	sp,sp,-76
  80f3d4:	dc401015 	stw	r17,64(sp)
  80f3d8:	1080008c 	andi	r2,r2,2
  80f3dc:	dc000f15 	stw	r16,60(sp)
  80f3e0:	dfc01215 	stw	ra,72(sp)
  80f3e4:	dc801115 	stw	r18,68(sp)
  80f3e8:	2821883a 	mov	r16,r5
  80f3ec:	2023883a 	mov	r17,r4
  80f3f0:	10000b26 	beq	r2,zero,80f420 <__smakebuf_r+0x54>
  80f3f4:	28c010c4 	addi	r3,r5,67
  80f3f8:	00800044 	movi	r2,1
  80f3fc:	28800515 	stw	r2,20(r5)
  80f400:	28c00415 	stw	r3,16(r5)
  80f404:	28c00015 	stw	r3,0(r5)
  80f408:	dfc01217 	ldw	ra,72(sp)
  80f40c:	dc801117 	ldw	r18,68(sp)
  80f410:	dc401017 	ldw	r17,64(sp)
  80f414:	dc000f17 	ldw	r16,60(sp)
  80f418:	dec01304 	addi	sp,sp,76
  80f41c:	f800283a 	ret
  80f420:	2940038f 	ldh	r5,14(r5)
  80f424:	28002116 	blt	r5,zero,80f4ac <__smakebuf_r+0xe0>
  80f428:	d80d883a 	mov	r6,sp
  80f42c:	081134c0 	call	81134c <_fstat_r>
  80f430:	10001e16 	blt	r2,zero,80f4ac <__smakebuf_r+0xe0>
  80f434:	d8800117 	ldw	r2,4(sp)
  80f438:	00e00014 	movui	r3,32768
  80f43c:	113c000c 	andi	r4,r2,61440
  80f440:	20c03126 	beq	r4,r3,80f508 <__smakebuf_r+0x13c>
  80f444:	8080030b 	ldhu	r2,12(r16)
  80f448:	00c80004 	movi	r3,8192
  80f44c:	10820014 	ori	r2,r2,2048
  80f450:	8080030d 	sth	r2,12(r16)
  80f454:	20c01e26 	beq	r4,r3,80f4d0 <__smakebuf_r+0x104>
  80f458:	04810004 	movi	r18,1024
  80f45c:	8809883a 	mov	r4,r17
  80f460:	900b883a 	mov	r5,r18
  80f464:	080a0d80 	call	80a0d8 <_malloc_r>
  80f468:	1009883a 	mov	r4,r2
  80f46c:	10003126 	beq	r2,zero,80f534 <__smakebuf_r+0x168>
  80f470:	80c0030b 	ldhu	r3,12(r16)
  80f474:	00802074 	movhi	r2,129
  80f478:	10b9b104 	addi	r2,r2,-6460
  80f47c:	88800f15 	stw	r2,60(r17)
  80f480:	18c02014 	ori	r3,r3,128
  80f484:	84800515 	stw	r18,20(r16)
  80f488:	80c0030d 	sth	r3,12(r16)
  80f48c:	81000415 	stw	r4,16(r16)
  80f490:	81000015 	stw	r4,0(r16)
  80f494:	dfc01217 	ldw	ra,72(sp)
  80f498:	dc801117 	ldw	r18,68(sp)
  80f49c:	dc401017 	ldw	r17,64(sp)
  80f4a0:	dc000f17 	ldw	r16,60(sp)
  80f4a4:	dec01304 	addi	sp,sp,76
  80f4a8:	f800283a 	ret
  80f4ac:	80c0030b 	ldhu	r3,12(r16)
  80f4b0:	1880200c 	andi	r2,r3,128
  80f4b4:	10000426 	beq	r2,zero,80f4c8 <__smakebuf_r+0xfc>
  80f4b8:	04801004 	movi	r18,64
  80f4bc:	18820014 	ori	r2,r3,2048
  80f4c0:	8080030d 	sth	r2,12(r16)
  80f4c4:	003fe506 	br	80f45c <__smakebuf_r+0x90>
  80f4c8:	04810004 	movi	r18,1024
  80f4cc:	003ffb06 	br	80f4bc <__smakebuf_r+0xf0>
  80f4d0:	8140038f 	ldh	r5,14(r16)
  80f4d4:	8809883a 	mov	r4,r17
  80f4d8:	08113c00 	call	8113c0 <_isatty_r>
  80f4dc:	103fde26 	beq	r2,zero,80f458 <__smakebuf_r+0x8c>
  80f4e0:	8080030b 	ldhu	r2,12(r16)
  80f4e4:	80c010c4 	addi	r3,r16,67
  80f4e8:	04810004 	movi	r18,1024
  80f4ec:	10800054 	ori	r2,r2,1
  80f4f0:	8080030d 	sth	r2,12(r16)
  80f4f4:	00800044 	movi	r2,1
  80f4f8:	80c00415 	stw	r3,16(r16)
  80f4fc:	80800515 	stw	r2,20(r16)
  80f500:	80c00015 	stw	r3,0(r16)
  80f504:	003fd506 	br	80f45c <__smakebuf_r+0x90>
  80f508:	80c00a17 	ldw	r3,40(r16)
  80f50c:	00802074 	movhi	r2,129
  80f510:	1083a304 	addi	r2,r2,3724
  80f514:	18bfcb1e 	bne	r3,r2,80f444 <__smakebuf_r+0x78>
  80f518:	8080030b 	ldhu	r2,12(r16)
  80f51c:	00c10004 	movi	r3,1024
  80f520:	1825883a 	mov	r18,r3
  80f524:	10c4b03a 	or	r2,r2,r3
  80f528:	8080030d 	sth	r2,12(r16)
  80f52c:	80c01315 	stw	r3,76(r16)
  80f530:	003fca06 	br	80f45c <__smakebuf_r+0x90>
  80f534:	8100030b 	ldhu	r4,12(r16)
  80f538:	2080800c 	andi	r2,r4,512
  80f53c:	103fb21e 	bne	r2,zero,80f408 <__smakebuf_r+0x3c>
  80f540:	80c010c4 	addi	r3,r16,67
  80f544:	21000094 	ori	r4,r4,2
  80f548:	00800044 	movi	r2,1
  80f54c:	80800515 	stw	r2,20(r16)
  80f550:	8100030d 	sth	r4,12(r16)
  80f554:	80c00415 	stw	r3,16(r16)
  80f558:	80c00015 	stw	r3,0(r16)
  80f55c:	003faa06 	br	80f408 <__smakebuf_r+0x3c>

0080f560 <memchr>:
  80f560:	008000c4 	movi	r2,3
  80f564:	29403fcc 	andi	r5,r5,255
  80f568:	2007883a 	mov	r3,r4
  80f56c:	1180022e 	bgeu	r2,r6,80f578 <memchr+0x18>
  80f570:	2084703a 	and	r2,r4,r2
  80f574:	10000b26 	beq	r2,zero,80f5a4 <memchr+0x44>
  80f578:	313fffc4 	addi	r4,r6,-1
  80f57c:	3000051e 	bne	r6,zero,80f594 <memchr+0x34>
  80f580:	00002c06 	br	80f634 <memchr+0xd4>
  80f584:	213fffc4 	addi	r4,r4,-1
  80f588:	00bfffc4 	movi	r2,-1
  80f58c:	18c00044 	addi	r3,r3,1
  80f590:	20802826 	beq	r4,r2,80f634 <memchr+0xd4>
  80f594:	18800003 	ldbu	r2,0(r3)
  80f598:	28bffa1e 	bne	r5,r2,80f584 <memchr+0x24>
  80f59c:	1805883a 	mov	r2,r3
  80f5a0:	f800283a 	ret
  80f5a4:	0011883a 	mov	r8,zero
  80f5a8:	0007883a 	mov	r3,zero
  80f5ac:	01c00104 	movi	r7,4
  80f5b0:	4004923a 	slli	r2,r8,8
  80f5b4:	18c00044 	addi	r3,r3,1
  80f5b8:	1151883a 	add	r8,r2,r5
  80f5bc:	19fffc1e 	bne	r3,r7,80f5b0 <memchr+0x50>
  80f5c0:	02bfbff4 	movhi	r10,65279
  80f5c4:	52bfbfc4 	addi	r10,r10,-257
  80f5c8:	02602074 	movhi	r9,32897
  80f5cc:	4a602004 	addi	r9,r9,-32640
  80f5d0:	02c000c4 	movi	r11,3
  80f5d4:	20800017 	ldw	r2,0(r4)
  80f5d8:	31bfff04 	addi	r6,r6,-4
  80f5dc:	200f883a 	mov	r7,r4
  80f5e0:	1204f03a 	xor	r2,r2,r8
  80f5e4:	1287883a 	add	r3,r2,r10
  80f5e8:	1a46703a 	and	r3,r3,r9
  80f5ec:	0084303a 	nor	r2,zero,r2
  80f5f0:	10c4703a 	and	r2,r2,r3
  80f5f4:	10000b26 	beq	r2,zero,80f624 <memchr+0xc4>
  80f5f8:	20800003 	ldbu	r2,0(r4)
  80f5fc:	28800f26 	beq	r5,r2,80f63c <memchr+0xdc>
  80f600:	20800043 	ldbu	r2,1(r4)
  80f604:	21c00044 	addi	r7,r4,1
  80f608:	28800c26 	beq	r5,r2,80f63c <memchr+0xdc>
  80f60c:	20800083 	ldbu	r2,2(r4)
  80f610:	21c00084 	addi	r7,r4,2
  80f614:	28800926 	beq	r5,r2,80f63c <memchr+0xdc>
  80f618:	208000c3 	ldbu	r2,3(r4)
  80f61c:	21c000c4 	addi	r7,r4,3
  80f620:	28800626 	beq	r5,r2,80f63c <memchr+0xdc>
  80f624:	21000104 	addi	r4,r4,4
  80f628:	59bfea36 	bltu	r11,r6,80f5d4 <memchr+0x74>
  80f62c:	2007883a 	mov	r3,r4
  80f630:	003fd106 	br	80f578 <memchr+0x18>
  80f634:	0005883a 	mov	r2,zero
  80f638:	f800283a 	ret
  80f63c:	3805883a 	mov	r2,r7
  80f640:	f800283a 	ret

0080f644 <memcpy>:
  80f644:	01c003c4 	movi	r7,15
  80f648:	2007883a 	mov	r3,r4
  80f64c:	3980032e 	bgeu	r7,r6,80f65c <memcpy+0x18>
  80f650:	2904b03a 	or	r2,r5,r4
  80f654:	108000cc 	andi	r2,r2,3
  80f658:	10000926 	beq	r2,zero,80f680 <memcpy+0x3c>
  80f65c:	30000626 	beq	r6,zero,80f678 <memcpy+0x34>
  80f660:	30cd883a 	add	r6,r6,r3
  80f664:	28800003 	ldbu	r2,0(r5)
  80f668:	29400044 	addi	r5,r5,1
  80f66c:	18800005 	stb	r2,0(r3)
  80f670:	18c00044 	addi	r3,r3,1
  80f674:	30fffb1e 	bne	r6,r3,80f664 <memcpy+0x20>
  80f678:	2005883a 	mov	r2,r4
  80f67c:	f800283a 	ret
  80f680:	3811883a 	mov	r8,r7
  80f684:	200f883a 	mov	r7,r4
  80f688:	28c00017 	ldw	r3,0(r5)
  80f68c:	31bffc04 	addi	r6,r6,-16
  80f690:	38c00015 	stw	r3,0(r7)
  80f694:	28800117 	ldw	r2,4(r5)
  80f698:	38800115 	stw	r2,4(r7)
  80f69c:	28c00217 	ldw	r3,8(r5)
  80f6a0:	38c00215 	stw	r3,8(r7)
  80f6a4:	28800317 	ldw	r2,12(r5)
  80f6a8:	29400404 	addi	r5,r5,16
  80f6ac:	38800315 	stw	r2,12(r7)
  80f6b0:	39c00404 	addi	r7,r7,16
  80f6b4:	41bff436 	bltu	r8,r6,80f688 <memcpy+0x44>
  80f6b8:	008000c4 	movi	r2,3
  80f6bc:	1180072e 	bgeu	r2,r6,80f6dc <memcpy+0x98>
  80f6c0:	1007883a 	mov	r3,r2
  80f6c4:	28800017 	ldw	r2,0(r5)
  80f6c8:	31bfff04 	addi	r6,r6,-4
  80f6cc:	29400104 	addi	r5,r5,4
  80f6d0:	38800015 	stw	r2,0(r7)
  80f6d4:	39c00104 	addi	r7,r7,4
  80f6d8:	19bffa36 	bltu	r3,r6,80f6c4 <memcpy+0x80>
  80f6dc:	3807883a 	mov	r3,r7
  80f6e0:	003fde06 	br	80f65c <memcpy+0x18>

0080f6e4 <memmove>:
  80f6e4:	2807883a 	mov	r3,r5
  80f6e8:	2011883a 	mov	r8,r4
  80f6ec:	29000c2e 	bgeu	r5,r4,80f720 <memmove+0x3c>
  80f6f0:	298f883a 	add	r7,r5,r6
  80f6f4:	21c00a2e 	bgeu	r4,r7,80f720 <memmove+0x3c>
  80f6f8:	30000726 	beq	r6,zero,80f718 <memmove+0x34>
  80f6fc:	2187883a 	add	r3,r4,r6
  80f700:	198dc83a 	sub	r6,r3,r6
  80f704:	39ffffc4 	addi	r7,r7,-1
  80f708:	38800003 	ldbu	r2,0(r7)
  80f70c:	18ffffc4 	addi	r3,r3,-1
  80f710:	18800005 	stb	r2,0(r3)
  80f714:	19bffb1e 	bne	r3,r6,80f704 <memmove+0x20>
  80f718:	2005883a 	mov	r2,r4
  80f71c:	f800283a 	ret
  80f720:	01c003c4 	movi	r7,15
  80f724:	39800a36 	bltu	r7,r6,80f750 <memmove+0x6c>
  80f728:	303ffb26 	beq	r6,zero,80f718 <memmove+0x34>
  80f72c:	400f883a 	mov	r7,r8
  80f730:	320d883a 	add	r6,r6,r8
  80f734:	28800003 	ldbu	r2,0(r5)
  80f738:	29400044 	addi	r5,r5,1
  80f73c:	38800005 	stb	r2,0(r7)
  80f740:	39c00044 	addi	r7,r7,1
  80f744:	39bffb1e 	bne	r7,r6,80f734 <memmove+0x50>
  80f748:	2005883a 	mov	r2,r4
  80f74c:	f800283a 	ret
  80f750:	1904b03a 	or	r2,r3,r4
  80f754:	108000cc 	andi	r2,r2,3
  80f758:	103ff31e 	bne	r2,zero,80f728 <memmove+0x44>
  80f75c:	3811883a 	mov	r8,r7
  80f760:	180b883a 	mov	r5,r3
  80f764:	200f883a 	mov	r7,r4
  80f768:	28c00017 	ldw	r3,0(r5)
  80f76c:	31bffc04 	addi	r6,r6,-16
  80f770:	38c00015 	stw	r3,0(r7)
  80f774:	28800117 	ldw	r2,4(r5)
  80f778:	38800115 	stw	r2,4(r7)
  80f77c:	28c00217 	ldw	r3,8(r5)
  80f780:	38c00215 	stw	r3,8(r7)
  80f784:	28800317 	ldw	r2,12(r5)
  80f788:	29400404 	addi	r5,r5,16
  80f78c:	38800315 	stw	r2,12(r7)
  80f790:	39c00404 	addi	r7,r7,16
  80f794:	41bff436 	bltu	r8,r6,80f768 <memmove+0x84>
  80f798:	008000c4 	movi	r2,3
  80f79c:	1180072e 	bgeu	r2,r6,80f7bc <memmove+0xd8>
  80f7a0:	1007883a 	mov	r3,r2
  80f7a4:	28800017 	ldw	r2,0(r5)
  80f7a8:	31bfff04 	addi	r6,r6,-4
  80f7ac:	29400104 	addi	r5,r5,4
  80f7b0:	38800015 	stw	r2,0(r7)
  80f7b4:	39c00104 	addi	r7,r7,4
  80f7b8:	19bffa36 	bltu	r3,r6,80f7a4 <memmove+0xc0>
  80f7bc:	3811883a 	mov	r8,r7
  80f7c0:	003fd906 	br	80f728 <memmove+0x44>

0080f7c4 <memset>:
  80f7c4:	008000c4 	movi	r2,3
  80f7c8:	29403fcc 	andi	r5,r5,255
  80f7cc:	2007883a 	mov	r3,r4
  80f7d0:	1180022e 	bgeu	r2,r6,80f7dc <memset+0x18>
  80f7d4:	2084703a 	and	r2,r4,r2
  80f7d8:	10000826 	beq	r2,zero,80f7fc <memset+0x38>
  80f7dc:	30000526 	beq	r6,zero,80f7f4 <memset+0x30>
  80f7e0:	2805883a 	mov	r2,r5
  80f7e4:	30cd883a 	add	r6,r6,r3
  80f7e8:	18800005 	stb	r2,0(r3)
  80f7ec:	18c00044 	addi	r3,r3,1
  80f7f0:	19bffd1e 	bne	r3,r6,80f7e8 <memset+0x24>
  80f7f4:	2005883a 	mov	r2,r4
  80f7f8:	f800283a 	ret
  80f7fc:	2804923a 	slli	r2,r5,8
  80f800:	020003c4 	movi	r8,15
  80f804:	200f883a 	mov	r7,r4
  80f808:	2884b03a 	or	r2,r5,r2
  80f80c:	1006943a 	slli	r3,r2,16
  80f810:	10c6b03a 	or	r3,r2,r3
  80f814:	41800a2e 	bgeu	r8,r6,80f840 <memset+0x7c>
  80f818:	4005883a 	mov	r2,r8
  80f81c:	31bffc04 	addi	r6,r6,-16
  80f820:	38c00015 	stw	r3,0(r7)
  80f824:	38c00115 	stw	r3,4(r7)
  80f828:	38c00215 	stw	r3,8(r7)
  80f82c:	38c00315 	stw	r3,12(r7)
  80f830:	39c00404 	addi	r7,r7,16
  80f834:	11bff936 	bltu	r2,r6,80f81c <memset+0x58>
  80f838:	008000c4 	movi	r2,3
  80f83c:	1180052e 	bgeu	r2,r6,80f854 <memset+0x90>
  80f840:	31bfff04 	addi	r6,r6,-4
  80f844:	008000c4 	movi	r2,3
  80f848:	38c00015 	stw	r3,0(r7)
  80f84c:	39c00104 	addi	r7,r7,4
  80f850:	11bffb36 	bltu	r2,r6,80f840 <memset+0x7c>
  80f854:	3807883a 	mov	r3,r7
  80f858:	003fe006 	br	80f7dc <memset+0x18>

0080f85c <_Bfree>:
  80f85c:	28000826 	beq	r5,zero,80f880 <_Bfree+0x24>
  80f860:	28800117 	ldw	r2,4(r5)
  80f864:	21001317 	ldw	r4,76(r4)
  80f868:	1085883a 	add	r2,r2,r2
  80f86c:	1085883a 	add	r2,r2,r2
  80f870:	1105883a 	add	r2,r2,r4
  80f874:	10c00017 	ldw	r3,0(r2)
  80f878:	28c00015 	stw	r3,0(r5)
  80f87c:	11400015 	stw	r5,0(r2)
  80f880:	f800283a 	ret

0080f884 <__hi0bits>:
  80f884:	20bfffec 	andhi	r2,r4,65535
  80f888:	10001426 	beq	r2,zero,80f8dc <__hi0bits+0x58>
  80f88c:	0007883a 	mov	r3,zero
  80f890:	20bfc02c 	andhi	r2,r4,65280
  80f894:	1000021e 	bne	r2,zero,80f8a0 <__hi0bits+0x1c>
  80f898:	2008923a 	slli	r4,r4,8
  80f89c:	18c00204 	addi	r3,r3,8
  80f8a0:	20bc002c 	andhi	r2,r4,61440
  80f8a4:	1000021e 	bne	r2,zero,80f8b0 <__hi0bits+0x2c>
  80f8a8:	2008913a 	slli	r4,r4,4
  80f8ac:	18c00104 	addi	r3,r3,4
  80f8b0:	20b0002c 	andhi	r2,r4,49152
  80f8b4:	1000031e 	bne	r2,zero,80f8c4 <__hi0bits+0x40>
  80f8b8:	2105883a 	add	r2,r4,r4
  80f8bc:	18c00084 	addi	r3,r3,2
  80f8c0:	1089883a 	add	r4,r2,r2
  80f8c4:	20000316 	blt	r4,zero,80f8d4 <__hi0bits+0x50>
  80f8c8:	2090002c 	andhi	r2,r4,16384
  80f8cc:	10000626 	beq	r2,zero,80f8e8 <__hi0bits+0x64>
  80f8d0:	18c00044 	addi	r3,r3,1
  80f8d4:	1805883a 	mov	r2,r3
  80f8d8:	f800283a 	ret
  80f8dc:	2008943a 	slli	r4,r4,16
  80f8e0:	00c00404 	movi	r3,16
  80f8e4:	003fea06 	br	80f890 <__hi0bits+0xc>
  80f8e8:	00c00804 	movi	r3,32
  80f8ec:	1805883a 	mov	r2,r3
  80f8f0:	f800283a 	ret

0080f8f4 <__lo0bits>:
  80f8f4:	20c00017 	ldw	r3,0(r4)
  80f8f8:	188001cc 	andi	r2,r3,7
  80f8fc:	10000a26 	beq	r2,zero,80f928 <__lo0bits+0x34>
  80f900:	1880004c 	andi	r2,r3,1
  80f904:	1005003a 	cmpeq	r2,r2,zero
  80f908:	10002126 	beq	r2,zero,80f990 <__lo0bits+0x9c>
  80f90c:	1880008c 	andi	r2,r3,2
  80f910:	1000251e 	bne	r2,zero,80f9a8 <__lo0bits+0xb4>
  80f914:	1804d0ba 	srli	r2,r3,2
  80f918:	01400084 	movi	r5,2
  80f91c:	20800015 	stw	r2,0(r4)
  80f920:	2805883a 	mov	r2,r5
  80f924:	f800283a 	ret
  80f928:	18bfffcc 	andi	r2,r3,65535
  80f92c:	10001526 	beq	r2,zero,80f984 <__lo0bits+0x90>
  80f930:	000b883a 	mov	r5,zero
  80f934:	18803fcc 	andi	r2,r3,255
  80f938:	1000021e 	bne	r2,zero,80f944 <__lo0bits+0x50>
  80f93c:	1806d23a 	srli	r3,r3,8
  80f940:	29400204 	addi	r5,r5,8
  80f944:	188003cc 	andi	r2,r3,15
  80f948:	1000021e 	bne	r2,zero,80f954 <__lo0bits+0x60>
  80f94c:	1806d13a 	srli	r3,r3,4
  80f950:	29400104 	addi	r5,r5,4
  80f954:	188000cc 	andi	r2,r3,3
  80f958:	1000021e 	bne	r2,zero,80f964 <__lo0bits+0x70>
  80f95c:	1806d0ba 	srli	r3,r3,2
  80f960:	29400084 	addi	r5,r5,2
  80f964:	1880004c 	andi	r2,r3,1
  80f968:	1000031e 	bne	r2,zero,80f978 <__lo0bits+0x84>
  80f96c:	1806d07a 	srli	r3,r3,1
  80f970:	18000a26 	beq	r3,zero,80f99c <__lo0bits+0xa8>
  80f974:	29400044 	addi	r5,r5,1
  80f978:	2805883a 	mov	r2,r5
  80f97c:	20c00015 	stw	r3,0(r4)
  80f980:	f800283a 	ret
  80f984:	1806d43a 	srli	r3,r3,16
  80f988:	01400404 	movi	r5,16
  80f98c:	003fe906 	br	80f934 <__lo0bits+0x40>
  80f990:	000b883a 	mov	r5,zero
  80f994:	2805883a 	mov	r2,r5
  80f998:	f800283a 	ret
  80f99c:	01400804 	movi	r5,32
  80f9a0:	2805883a 	mov	r2,r5
  80f9a4:	f800283a 	ret
  80f9a8:	1804d07a 	srli	r2,r3,1
  80f9ac:	01400044 	movi	r5,1
  80f9b0:	20800015 	stw	r2,0(r4)
  80f9b4:	003fda06 	br	80f920 <__lo0bits+0x2c>

0080f9b8 <__mcmp>:
  80f9b8:	20800417 	ldw	r2,16(r4)
  80f9bc:	28c00417 	ldw	r3,16(r5)
  80f9c0:	10cfc83a 	sub	r7,r2,r3
  80f9c4:	38000c1e 	bne	r7,zero,80f9f8 <__mcmp+0x40>
  80f9c8:	18c5883a 	add	r2,r3,r3
  80f9cc:	1085883a 	add	r2,r2,r2
  80f9d0:	10c00504 	addi	r3,r2,20
  80f9d4:	21000504 	addi	r4,r4,20
  80f9d8:	28cb883a 	add	r5,r5,r3
  80f9dc:	2085883a 	add	r2,r4,r2
  80f9e0:	10bfff04 	addi	r2,r2,-4
  80f9e4:	297fff04 	addi	r5,r5,-4
  80f9e8:	11800017 	ldw	r6,0(r2)
  80f9ec:	28c00017 	ldw	r3,0(r5)
  80f9f0:	30c0031e 	bne	r6,r3,80fa00 <__mcmp+0x48>
  80f9f4:	20bffa36 	bltu	r4,r2,80f9e0 <__mcmp+0x28>
  80f9f8:	3805883a 	mov	r2,r7
  80f9fc:	f800283a 	ret
  80fa00:	30c00336 	bltu	r6,r3,80fa10 <__mcmp+0x58>
  80fa04:	01c00044 	movi	r7,1
  80fa08:	3805883a 	mov	r2,r7
  80fa0c:	f800283a 	ret
  80fa10:	01ffffc4 	movi	r7,-1
  80fa14:	003ff806 	br	80f9f8 <__mcmp+0x40>

0080fa18 <__ulp>:
  80fa18:	295ffc2c 	andhi	r5,r5,32752
  80fa1c:	013f3034 	movhi	r4,64704
  80fa20:	290b883a 	add	r5,r5,r4
  80fa24:	0145c83a 	sub	r2,zero,r5
  80fa28:	1007d53a 	srai	r3,r2,20
  80fa2c:	000d883a 	mov	r6,zero
  80fa30:	0140040e 	bge	zero,r5,80fa44 <__ulp+0x2c>
  80fa34:	280f883a 	mov	r7,r5
  80fa38:	3807883a 	mov	r3,r7
  80fa3c:	3005883a 	mov	r2,r6
  80fa40:	f800283a 	ret
  80fa44:	008004c4 	movi	r2,19
  80fa48:	193ffb04 	addi	r4,r3,-20
  80fa4c:	10c00c0e 	bge	r2,r3,80fa80 <__ulp+0x68>
  80fa50:	008007c4 	movi	r2,31
  80fa54:	1107c83a 	sub	r3,r2,r4
  80fa58:	00800784 	movi	r2,30
  80fa5c:	01400044 	movi	r5,1
  80fa60:	11000216 	blt	r2,r4,80fa6c <__ulp+0x54>
  80fa64:	00800044 	movi	r2,1
  80fa68:	10ca983a 	sll	r5,r2,r3
  80fa6c:	000f883a 	mov	r7,zero
  80fa70:	280d883a 	mov	r6,r5
  80fa74:	3807883a 	mov	r3,r7
  80fa78:	3005883a 	mov	r2,r6
  80fa7c:	f800283a 	ret
  80fa80:	00800234 	movhi	r2,8
  80fa84:	10cfd83a 	sra	r7,r2,r3
  80fa88:	000d883a 	mov	r6,zero
  80fa8c:	3005883a 	mov	r2,r6
  80fa90:	3807883a 	mov	r3,r7
  80fa94:	f800283a 	ret

0080fa98 <__b2d>:
  80fa98:	20800417 	ldw	r2,16(r4)
  80fa9c:	defff904 	addi	sp,sp,-28
  80faa0:	dd000415 	stw	r20,16(sp)
  80faa4:	1085883a 	add	r2,r2,r2
  80faa8:	25000504 	addi	r20,r4,20
  80faac:	1085883a 	add	r2,r2,r2
  80fab0:	dc000015 	stw	r16,0(sp)
  80fab4:	a0a1883a 	add	r16,r20,r2
  80fab8:	dd400515 	stw	r21,20(sp)
  80fabc:	857fff17 	ldw	r21,-4(r16)
  80fac0:	dc400115 	stw	r17,4(sp)
  80fac4:	dfc00615 	stw	ra,24(sp)
  80fac8:	a809883a 	mov	r4,r21
  80facc:	2823883a 	mov	r17,r5
  80fad0:	dcc00315 	stw	r19,12(sp)
  80fad4:	dc800215 	stw	r18,8(sp)
  80fad8:	080f8840 	call	80f884 <__hi0bits>
  80fadc:	100b883a 	mov	r5,r2
  80fae0:	00800804 	movi	r2,32
  80fae4:	1145c83a 	sub	r2,r2,r5
  80fae8:	88800015 	stw	r2,0(r17)
  80faec:	00800284 	movi	r2,10
  80faf0:	80ffff04 	addi	r3,r16,-4
  80faf4:	11401416 	blt	r2,r5,80fb48 <__b2d+0xb0>
  80faf8:	008002c4 	movi	r2,11
  80fafc:	1149c83a 	sub	r4,r2,r5
  80fb00:	a0c02736 	bltu	r20,r3,80fba0 <__b2d+0x108>
  80fb04:	000d883a 	mov	r6,zero
  80fb08:	28800544 	addi	r2,r5,21
  80fb0c:	a906d83a 	srl	r3,r21,r4
  80fb10:	a884983a 	sll	r2,r21,r2
  80fb14:	1ccffc34 	orhi	r19,r3,16368
  80fb18:	11a4b03a 	or	r18,r2,r6
  80fb1c:	9005883a 	mov	r2,r18
  80fb20:	9807883a 	mov	r3,r19
  80fb24:	dfc00617 	ldw	ra,24(sp)
  80fb28:	dd400517 	ldw	r21,20(sp)
  80fb2c:	dd000417 	ldw	r20,16(sp)
  80fb30:	dcc00317 	ldw	r19,12(sp)
  80fb34:	dc800217 	ldw	r18,8(sp)
  80fb38:	dc400117 	ldw	r17,4(sp)
  80fb3c:	dc000017 	ldw	r16,0(sp)
  80fb40:	dec00704 	addi	sp,sp,28
  80fb44:	f800283a 	ret
  80fb48:	a0c00e36 	bltu	r20,r3,80fb84 <__b2d+0xec>
  80fb4c:	293ffd44 	addi	r4,r5,-11
  80fb50:	000d883a 	mov	r6,zero
  80fb54:	20000f26 	beq	r4,zero,80fb94 <__b2d+0xfc>
  80fb58:	00800804 	movi	r2,32
  80fb5c:	110bc83a 	sub	r5,r2,r4
  80fb60:	a0c01236 	bltu	r20,r3,80fbac <__b2d+0x114>
  80fb64:	000f883a 	mov	r7,zero
  80fb68:	a904983a 	sll	r2,r21,r4
  80fb6c:	3146d83a 	srl	r3,r6,r5
  80fb70:	3108983a 	sll	r4,r6,r4
  80fb74:	108ffc34 	orhi	r2,r2,16368
  80fb78:	18a6b03a 	or	r19,r3,r2
  80fb7c:	3924b03a 	or	r18,r7,r4
  80fb80:	003fe606 	br	80fb1c <__b2d+0x84>
  80fb84:	293ffd44 	addi	r4,r5,-11
  80fb88:	81bffe17 	ldw	r6,-8(r16)
  80fb8c:	80fffe04 	addi	r3,r16,-8
  80fb90:	203ff11e 	bne	r4,zero,80fb58 <__b2d+0xc0>
  80fb94:	accffc34 	orhi	r19,r21,16368
  80fb98:	3025883a 	mov	r18,r6
  80fb9c:	003fdf06 	br	80fb1c <__b2d+0x84>
  80fba0:	18bfff17 	ldw	r2,-4(r3)
  80fba4:	110cd83a 	srl	r6,r2,r4
  80fba8:	003fd706 	br	80fb08 <__b2d+0x70>
  80fbac:	18bfff17 	ldw	r2,-4(r3)
  80fbb0:	114ed83a 	srl	r7,r2,r5
  80fbb4:	003fec06 	br	80fb68 <__b2d+0xd0>

0080fbb8 <__ratio>:
  80fbb8:	defff904 	addi	sp,sp,-28
  80fbbc:	dc400215 	stw	r17,8(sp)
  80fbc0:	2823883a 	mov	r17,r5
  80fbc4:	d80b883a 	mov	r5,sp
  80fbc8:	dfc00615 	stw	ra,24(sp)
  80fbcc:	dd000515 	stw	r20,20(sp)
  80fbd0:	dcc00415 	stw	r19,16(sp)
  80fbd4:	dc800315 	stw	r18,12(sp)
  80fbd8:	2025883a 	mov	r18,r4
  80fbdc:	080fa980 	call	80fa98 <__b2d>
  80fbe0:	8809883a 	mov	r4,r17
  80fbe4:	d9400104 	addi	r5,sp,4
  80fbe8:	1027883a 	mov	r19,r2
  80fbec:	1829883a 	mov	r20,r3
  80fbf0:	080fa980 	call	80fa98 <__b2d>
  80fbf4:	89000417 	ldw	r4,16(r17)
  80fbf8:	91c00417 	ldw	r7,16(r18)
  80fbfc:	d9800117 	ldw	r6,4(sp)
  80fc00:	180b883a 	mov	r5,r3
  80fc04:	390fc83a 	sub	r7,r7,r4
  80fc08:	1009883a 	mov	r4,r2
  80fc0c:	d8800017 	ldw	r2,0(sp)
  80fc10:	380e917a 	slli	r7,r7,5
  80fc14:	2011883a 	mov	r8,r4
  80fc18:	1185c83a 	sub	r2,r2,r6
  80fc1c:	11c5883a 	add	r2,r2,r7
  80fc20:	1006953a 	slli	r3,r2,20
  80fc24:	2813883a 	mov	r9,r5
  80fc28:	00800d0e 	bge	zero,r2,80fc60 <__ratio+0xa8>
  80fc2c:	1d29883a 	add	r20,r3,r20
  80fc30:	a00b883a 	mov	r5,r20
  80fc34:	480f883a 	mov	r7,r9
  80fc38:	9809883a 	mov	r4,r19
  80fc3c:	400d883a 	mov	r6,r8
  80fc40:	0808ff80 	call	808ff8 <__divdf3>
  80fc44:	dfc00617 	ldw	ra,24(sp)
  80fc48:	dd000517 	ldw	r20,20(sp)
  80fc4c:	dcc00417 	ldw	r19,16(sp)
  80fc50:	dc800317 	ldw	r18,12(sp)
  80fc54:	dc400217 	ldw	r17,8(sp)
  80fc58:	dec00704 	addi	sp,sp,28
  80fc5c:	f800283a 	ret
  80fc60:	28d3c83a 	sub	r9,r5,r3
  80fc64:	003ff206 	br	80fc30 <__ratio+0x78>

0080fc68 <_mprec_log10>:
  80fc68:	defffe04 	addi	sp,sp,-8
  80fc6c:	008005c4 	movi	r2,23
  80fc70:	dc000015 	stw	r16,0(sp)
  80fc74:	dfc00115 	stw	ra,4(sp)
  80fc78:	2021883a 	mov	r16,r4
  80fc7c:	11000c16 	blt	r2,r4,80fcb0 <_mprec_log10+0x48>
  80fc80:	200490fa 	slli	r2,r4,3
  80fc84:	00c020b4 	movhi	r3,130
  80fc88:	18f4cc04 	addi	r3,r3,-11472
  80fc8c:	10c5883a 	add	r2,r2,r3
  80fc90:	12400117 	ldw	r9,4(r2)
  80fc94:	12000017 	ldw	r8,0(r2)
  80fc98:	4807883a 	mov	r3,r9
  80fc9c:	4005883a 	mov	r2,r8
  80fca0:	dfc00117 	ldw	ra,4(sp)
  80fca4:	dc000017 	ldw	r16,0(sp)
  80fca8:	dec00204 	addi	sp,sp,8
  80fcac:	f800283a 	ret
  80fcb0:	0011883a 	mov	r8,zero
  80fcb4:	024ffc34 	movhi	r9,16368
  80fcb8:	0005883a 	mov	r2,zero
  80fcbc:	00d00934 	movhi	r3,16420
  80fcc0:	480b883a 	mov	r5,r9
  80fcc4:	4009883a 	mov	r4,r8
  80fcc8:	180f883a 	mov	r7,r3
  80fccc:	100d883a 	mov	r6,r2
  80fcd0:	0808c340 	call	808c34 <__muldf3>
  80fcd4:	843fffc4 	addi	r16,r16,-1
  80fcd8:	1011883a 	mov	r8,r2
  80fcdc:	1813883a 	mov	r9,r3
  80fce0:	803ff51e 	bne	r16,zero,80fcb8 <_mprec_log10+0x50>
  80fce4:	4005883a 	mov	r2,r8
  80fce8:	4807883a 	mov	r3,r9
  80fcec:	dfc00117 	ldw	ra,4(sp)
  80fcf0:	dc000017 	ldw	r16,0(sp)
  80fcf4:	dec00204 	addi	sp,sp,8
  80fcf8:	f800283a 	ret

0080fcfc <__copybits>:
  80fcfc:	297fffc4 	addi	r5,r5,-1
  80fd00:	30800417 	ldw	r2,16(r6)
  80fd04:	280bd17a 	srai	r5,r5,5
  80fd08:	31800504 	addi	r6,r6,20
  80fd0c:	1085883a 	add	r2,r2,r2
  80fd10:	294b883a 	add	r5,r5,r5
  80fd14:	294b883a 	add	r5,r5,r5
  80fd18:	1085883a 	add	r2,r2,r2
  80fd1c:	290b883a 	add	r5,r5,r4
  80fd20:	3087883a 	add	r3,r6,r2
  80fd24:	29400104 	addi	r5,r5,4
  80fd28:	30c0052e 	bgeu	r6,r3,80fd40 <__copybits+0x44>
  80fd2c:	30800017 	ldw	r2,0(r6)
  80fd30:	31800104 	addi	r6,r6,4
  80fd34:	20800015 	stw	r2,0(r4)
  80fd38:	21000104 	addi	r4,r4,4
  80fd3c:	30fffb36 	bltu	r6,r3,80fd2c <__copybits+0x30>
  80fd40:	2140032e 	bgeu	r4,r5,80fd50 <__copybits+0x54>
  80fd44:	20000015 	stw	zero,0(r4)
  80fd48:	21000104 	addi	r4,r4,4
  80fd4c:	217ffd36 	bltu	r4,r5,80fd44 <__copybits+0x48>
  80fd50:	f800283a 	ret

0080fd54 <__any_on>:
  80fd54:	20800417 	ldw	r2,16(r4)
  80fd58:	2807d17a 	srai	r3,r5,5
  80fd5c:	21000504 	addi	r4,r4,20
  80fd60:	10c00d0e 	bge	r2,r3,80fd98 <__any_on+0x44>
  80fd64:	1085883a 	add	r2,r2,r2
  80fd68:	1085883a 	add	r2,r2,r2
  80fd6c:	208d883a 	add	r6,r4,r2
  80fd70:	2180182e 	bgeu	r4,r6,80fdd4 <__any_on+0x80>
  80fd74:	30bfff17 	ldw	r2,-4(r6)
  80fd78:	30ffff04 	addi	r3,r6,-4
  80fd7c:	1000041e 	bne	r2,zero,80fd90 <__any_on+0x3c>
  80fd80:	20c0142e 	bgeu	r4,r3,80fdd4 <__any_on+0x80>
  80fd84:	18ffff04 	addi	r3,r3,-4
  80fd88:	18800017 	ldw	r2,0(r3)
  80fd8c:	103ffc26 	beq	r2,zero,80fd80 <__any_on+0x2c>
  80fd90:	00800044 	movi	r2,1
  80fd94:	f800283a 	ret
  80fd98:	18800a0e 	bge	r3,r2,80fdc4 <__any_on+0x70>
  80fd9c:	294007cc 	andi	r5,r5,31
  80fda0:	28000826 	beq	r5,zero,80fdc4 <__any_on+0x70>
  80fda4:	18c5883a 	add	r2,r3,r3
  80fda8:	1085883a 	add	r2,r2,r2
  80fdac:	208d883a 	add	r6,r4,r2
  80fdb0:	30c00017 	ldw	r3,0(r6)
  80fdb4:	1944d83a 	srl	r2,r3,r5
  80fdb8:	1144983a 	sll	r2,r2,r5
  80fdbc:	18bff41e 	bne	r3,r2,80fd90 <__any_on+0x3c>
  80fdc0:	003feb06 	br	80fd70 <__any_on+0x1c>
  80fdc4:	18c5883a 	add	r2,r3,r3
  80fdc8:	1085883a 	add	r2,r2,r2
  80fdcc:	208d883a 	add	r6,r4,r2
  80fdd0:	003fe706 	br	80fd70 <__any_on+0x1c>
  80fdd4:	0005883a 	mov	r2,zero
  80fdd8:	f800283a 	ret

0080fddc <_Balloc>:
  80fddc:	20c01317 	ldw	r3,76(r4)
  80fde0:	defffb04 	addi	sp,sp,-20
  80fde4:	dcc00315 	stw	r19,12(sp)
  80fde8:	dc800215 	stw	r18,8(sp)
  80fdec:	dfc00415 	stw	ra,16(sp)
  80fdf0:	2825883a 	mov	r18,r5
  80fdf4:	dc400115 	stw	r17,4(sp)
  80fdf8:	dc000015 	stw	r16,0(sp)
  80fdfc:	2027883a 	mov	r19,r4
  80fe00:	01800404 	movi	r6,16
  80fe04:	01400104 	movi	r5,4
  80fe08:	18001726 	beq	r3,zero,80fe68 <_Balloc+0x8c>
  80fe0c:	01400044 	movi	r5,1
  80fe10:	9485883a 	add	r2,r18,r18
  80fe14:	2ca2983a 	sll	r17,r5,r18
  80fe18:	1085883a 	add	r2,r2,r2
  80fe1c:	10c7883a 	add	r3,r2,r3
  80fe20:	1c000017 	ldw	r16,0(r3)
  80fe24:	8c4d883a 	add	r6,r17,r17
  80fe28:	318d883a 	add	r6,r6,r6
  80fe2c:	9809883a 	mov	r4,r19
  80fe30:	31800504 	addi	r6,r6,20
  80fe34:	80001226 	beq	r16,zero,80fe80 <_Balloc+0xa4>
  80fe38:	80800017 	ldw	r2,0(r16)
  80fe3c:	18800015 	stw	r2,0(r3)
  80fe40:	80000415 	stw	zero,16(r16)
  80fe44:	80000315 	stw	zero,12(r16)
  80fe48:	8005883a 	mov	r2,r16
  80fe4c:	dfc00417 	ldw	ra,16(sp)
  80fe50:	dcc00317 	ldw	r19,12(sp)
  80fe54:	dc800217 	ldw	r18,8(sp)
  80fe58:	dc400117 	ldw	r17,4(sp)
  80fe5c:	dc000017 	ldw	r16,0(sp)
  80fe60:	dec00504 	addi	sp,sp,20
  80fe64:	f800283a 	ret
  80fe68:	08111040 	call	811104 <_calloc_r>
  80fe6c:	1007883a 	mov	r3,r2
  80fe70:	0021883a 	mov	r16,zero
  80fe74:	98801315 	stw	r2,76(r19)
  80fe78:	103fe41e 	bne	r2,zero,80fe0c <_Balloc+0x30>
  80fe7c:	003ff206 	br	80fe48 <_Balloc+0x6c>
  80fe80:	08111040 	call	811104 <_calloc_r>
  80fe84:	103ff026 	beq	r2,zero,80fe48 <_Balloc+0x6c>
  80fe88:	1021883a 	mov	r16,r2
  80fe8c:	14800115 	stw	r18,4(r2)
  80fe90:	14400215 	stw	r17,8(r2)
  80fe94:	003fea06 	br	80fe40 <_Balloc+0x64>

0080fe98 <__d2b>:
  80fe98:	defff504 	addi	sp,sp,-44
  80fe9c:	dcc00515 	stw	r19,20(sp)
  80fea0:	04c00044 	movi	r19,1
  80fea4:	dc000215 	stw	r16,8(sp)
  80fea8:	2821883a 	mov	r16,r5
  80feac:	980b883a 	mov	r5,r19
  80feb0:	ddc00915 	stw	r23,36(sp)
  80feb4:	dd800815 	stw	r22,32(sp)
  80feb8:	dd400715 	stw	r21,28(sp)
  80febc:	dd000615 	stw	r20,24(sp)
  80fec0:	dc800415 	stw	r18,16(sp)
  80fec4:	dc400315 	stw	r17,12(sp)
  80fec8:	dfc00a15 	stw	ra,40(sp)
  80fecc:	3023883a 	mov	r17,r6
  80fed0:	382d883a 	mov	r22,r7
  80fed4:	ddc00b17 	ldw	r23,44(sp)
  80fed8:	080fddc0 	call	80fddc <_Balloc>
  80fedc:	1025883a 	mov	r18,r2
  80fee0:	00a00034 	movhi	r2,32768
  80fee4:	10bfffc4 	addi	r2,r2,-1
  80fee8:	8888703a 	and	r4,r17,r2
  80feec:	202ad53a 	srli	r21,r4,20
  80fef0:	00800434 	movhi	r2,16
  80fef4:	10bfffc4 	addi	r2,r2,-1
  80fef8:	8886703a 	and	r3,r17,r2
  80fefc:	a829003a 	cmpeq	r20,r21,zero
  80ff00:	800b883a 	mov	r5,r16
  80ff04:	d8c00115 	stw	r3,4(sp)
  80ff08:	94000504 	addi	r16,r18,20
  80ff0c:	a000021e 	bne	r20,zero,80ff18 <__d2b+0x80>
  80ff10:	18c00434 	orhi	r3,r3,16
  80ff14:	d8c00115 	stw	r3,4(sp)
  80ff18:	28002726 	beq	r5,zero,80ffb8 <__d2b+0x120>
  80ff1c:	d809883a 	mov	r4,sp
  80ff20:	d9400015 	stw	r5,0(sp)
  80ff24:	080f8f40 	call	80f8f4 <__lo0bits>
  80ff28:	100d883a 	mov	r6,r2
  80ff2c:	10003526 	beq	r2,zero,810004 <__d2b+0x16c>
  80ff30:	d8c00117 	ldw	r3,4(sp)
  80ff34:	00800804 	movi	r2,32
  80ff38:	1185c83a 	sub	r2,r2,r6
  80ff3c:	d9000017 	ldw	r4,0(sp)
  80ff40:	1886983a 	sll	r3,r3,r2
  80ff44:	1906b03a 	or	r3,r3,r4
  80ff48:	90c00515 	stw	r3,20(r18)
  80ff4c:	d8c00117 	ldw	r3,4(sp)
  80ff50:	1986d83a 	srl	r3,r3,r6
  80ff54:	d8c00115 	stw	r3,4(sp)
  80ff58:	180b003a 	cmpeq	r5,r3,zero
  80ff5c:	00800084 	movi	r2,2
  80ff60:	114bc83a 	sub	r5,r2,r5
  80ff64:	80c00115 	stw	r3,4(r16)
  80ff68:	91400415 	stw	r5,16(r18)
  80ff6c:	a0001a1e 	bne	r20,zero,80ffd8 <__d2b+0x140>
  80ff70:	3545883a 	add	r2,r6,r21
  80ff74:	10bef344 	addi	r2,r2,-1075
  80ff78:	00c00d44 	movi	r3,53
  80ff7c:	b0800015 	stw	r2,0(r22)
  80ff80:	1987c83a 	sub	r3,r3,r6
  80ff84:	b8c00015 	stw	r3,0(r23)
  80ff88:	9005883a 	mov	r2,r18
  80ff8c:	dfc00a17 	ldw	ra,40(sp)
  80ff90:	ddc00917 	ldw	r23,36(sp)
  80ff94:	dd800817 	ldw	r22,32(sp)
  80ff98:	dd400717 	ldw	r21,28(sp)
  80ff9c:	dd000617 	ldw	r20,24(sp)
  80ffa0:	dcc00517 	ldw	r19,20(sp)
  80ffa4:	dc800417 	ldw	r18,16(sp)
  80ffa8:	dc400317 	ldw	r17,12(sp)
  80ffac:	dc000217 	ldw	r16,8(sp)
  80ffb0:	dec00b04 	addi	sp,sp,44
  80ffb4:	f800283a 	ret
  80ffb8:	d9000104 	addi	r4,sp,4
  80ffbc:	080f8f40 	call	80f8f4 <__lo0bits>
  80ffc0:	11800804 	addi	r6,r2,32
  80ffc4:	d8800117 	ldw	r2,4(sp)
  80ffc8:	94c00415 	stw	r19,16(r18)
  80ffcc:	980b883a 	mov	r5,r19
  80ffd0:	90800515 	stw	r2,20(r18)
  80ffd4:	a03fe626 	beq	r20,zero,80ff70 <__d2b+0xd8>
  80ffd8:	2945883a 	add	r2,r5,r5
  80ffdc:	1085883a 	add	r2,r2,r2
  80ffe0:	1405883a 	add	r2,r2,r16
  80ffe4:	113fff17 	ldw	r4,-4(r2)
  80ffe8:	30fef384 	addi	r3,r6,-1074
  80ffec:	2820917a 	slli	r16,r5,5
  80fff0:	b0c00015 	stw	r3,0(r22)
  80fff4:	080f8840 	call	80f884 <__hi0bits>
  80fff8:	80a1c83a 	sub	r16,r16,r2
  80fffc:	bc000015 	stw	r16,0(r23)
  810000:	003fe106 	br	80ff88 <__d2b+0xf0>
  810004:	d8800017 	ldw	r2,0(sp)
  810008:	90800515 	stw	r2,20(r18)
  81000c:	d8c00117 	ldw	r3,4(sp)
  810010:	003fd106 	br	80ff58 <__d2b+0xc0>

00810014 <__mdiff>:
  810014:	defffb04 	addi	sp,sp,-20
  810018:	dc000015 	stw	r16,0(sp)
  81001c:	2821883a 	mov	r16,r5
  810020:	dc800215 	stw	r18,8(sp)
  810024:	300b883a 	mov	r5,r6
  810028:	2025883a 	mov	r18,r4
  81002c:	8009883a 	mov	r4,r16
  810030:	dc400115 	stw	r17,4(sp)
  810034:	dfc00415 	stw	ra,16(sp)
  810038:	dcc00315 	stw	r19,12(sp)
  81003c:	3023883a 	mov	r17,r6
  810040:	080f9b80 	call	80f9b8 <__mcmp>
  810044:	10004226 	beq	r2,zero,810150 <__mdiff+0x13c>
  810048:	10005016 	blt	r2,zero,81018c <__mdiff+0x178>
  81004c:	0027883a 	mov	r19,zero
  810050:	81400117 	ldw	r5,4(r16)
  810054:	9009883a 	mov	r4,r18
  810058:	080fddc0 	call	80fddc <_Balloc>
  81005c:	1019883a 	mov	r12,r2
  810060:	82800417 	ldw	r10,16(r16)
  810064:	88800417 	ldw	r2,16(r17)
  810068:	81800504 	addi	r6,r16,20
  81006c:	5287883a 	add	r3,r10,r10
  810070:	1085883a 	add	r2,r2,r2
  810074:	18c7883a 	add	r3,r3,r3
  810078:	1085883a 	add	r2,r2,r2
  81007c:	8a000504 	addi	r8,r17,20
  810080:	64c00315 	stw	r19,12(r12)
  810084:	30db883a 	add	r13,r6,r3
  810088:	4097883a 	add	r11,r8,r2
  81008c:	61c00504 	addi	r7,r12,20
  810090:	0013883a 	mov	r9,zero
  810094:	31000017 	ldw	r4,0(r6)
  810098:	41400017 	ldw	r5,0(r8)
  81009c:	42000104 	addi	r8,r8,4
  8100a0:	20bfffcc 	andi	r2,r4,65535
  8100a4:	28ffffcc 	andi	r3,r5,65535
  8100a8:	10c5c83a 	sub	r2,r2,r3
  8100ac:	1245883a 	add	r2,r2,r9
  8100b0:	2008d43a 	srli	r4,r4,16
  8100b4:	280ad43a 	srli	r5,r5,16
  8100b8:	1007d43a 	srai	r3,r2,16
  8100bc:	3880000d 	sth	r2,0(r7)
  8100c0:	2149c83a 	sub	r4,r4,r5
  8100c4:	20c9883a 	add	r4,r4,r3
  8100c8:	3900008d 	sth	r4,2(r7)
  8100cc:	31800104 	addi	r6,r6,4
  8100d0:	39c00104 	addi	r7,r7,4
  8100d4:	2013d43a 	srai	r9,r4,16
  8100d8:	42ffee36 	bltu	r8,r11,810094 <__mdiff+0x80>
  8100dc:	33400c2e 	bgeu	r6,r13,810110 <__mdiff+0xfc>
  8100e0:	30800017 	ldw	r2,0(r6)
  8100e4:	31800104 	addi	r6,r6,4
  8100e8:	10ffffcc 	andi	r3,r2,65535
  8100ec:	1a47883a 	add	r3,r3,r9
  8100f0:	1004d43a 	srli	r2,r2,16
  8100f4:	1809d43a 	srai	r4,r3,16
  8100f8:	38c0000d 	sth	r3,0(r7)
  8100fc:	1105883a 	add	r2,r2,r4
  810100:	3880008d 	sth	r2,2(r7)
  810104:	1013d43a 	srai	r9,r2,16
  810108:	39c00104 	addi	r7,r7,4
  81010c:	337ff436 	bltu	r6,r13,8100e0 <__mdiff+0xcc>
  810110:	38bfff17 	ldw	r2,-4(r7)
  810114:	38ffff04 	addi	r3,r7,-4
  810118:	1000041e 	bne	r2,zero,81012c <__mdiff+0x118>
  81011c:	18ffff04 	addi	r3,r3,-4
  810120:	18800017 	ldw	r2,0(r3)
  810124:	52bfffc4 	addi	r10,r10,-1
  810128:	103ffc26 	beq	r2,zero,81011c <__mdiff+0x108>
  81012c:	6005883a 	mov	r2,r12
  810130:	62800415 	stw	r10,16(r12)
  810134:	dfc00417 	ldw	ra,16(sp)
  810138:	dcc00317 	ldw	r19,12(sp)
  81013c:	dc800217 	ldw	r18,8(sp)
  810140:	dc400117 	ldw	r17,4(sp)
  810144:	dc000017 	ldw	r16,0(sp)
  810148:	dec00504 	addi	sp,sp,20
  81014c:	f800283a 	ret
  810150:	9009883a 	mov	r4,r18
  810154:	000b883a 	mov	r5,zero
  810158:	080fddc0 	call	80fddc <_Balloc>
  81015c:	1019883a 	mov	r12,r2
  810160:	00800044 	movi	r2,1
  810164:	60800415 	stw	r2,16(r12)
  810168:	6005883a 	mov	r2,r12
  81016c:	60000515 	stw	zero,20(r12)
  810170:	dfc00417 	ldw	ra,16(sp)
  810174:	dcc00317 	ldw	r19,12(sp)
  810178:	dc800217 	ldw	r18,8(sp)
  81017c:	dc400117 	ldw	r17,4(sp)
  810180:	dc000017 	ldw	r16,0(sp)
  810184:	dec00504 	addi	sp,sp,20
  810188:	f800283a 	ret
  81018c:	880d883a 	mov	r6,r17
  810190:	04c00044 	movi	r19,1
  810194:	8023883a 	mov	r17,r16
  810198:	3021883a 	mov	r16,r6
  81019c:	003fac06 	br	810050 <__mdiff+0x3c>

008101a0 <__lshift>:
  8101a0:	defff904 	addi	sp,sp,-28
  8101a4:	28800417 	ldw	r2,16(r5)
  8101a8:	dc000015 	stw	r16,0(sp)
  8101ac:	3021d17a 	srai	r16,r6,5
  8101b0:	28c00217 	ldw	r3,8(r5)
  8101b4:	10800044 	addi	r2,r2,1
  8101b8:	dc400115 	stw	r17,4(sp)
  8101bc:	80a3883a 	add	r17,r16,r2
  8101c0:	dd400515 	stw	r21,20(sp)
  8101c4:	dd000415 	stw	r20,16(sp)
  8101c8:	dc800215 	stw	r18,8(sp)
  8101cc:	dfc00615 	stw	ra,24(sp)
  8101d0:	2825883a 	mov	r18,r5
  8101d4:	dcc00315 	stw	r19,12(sp)
  8101d8:	3029883a 	mov	r20,r6
  8101dc:	202b883a 	mov	r21,r4
  8101e0:	29400117 	ldw	r5,4(r5)
  8101e4:	1c40030e 	bge	r3,r17,8101f4 <__lshift+0x54>
  8101e8:	18c7883a 	add	r3,r3,r3
  8101ec:	29400044 	addi	r5,r5,1
  8101f0:	1c7ffd16 	blt	r3,r17,8101e8 <__lshift+0x48>
  8101f4:	a809883a 	mov	r4,r21
  8101f8:	080fddc0 	call	80fddc <_Balloc>
  8101fc:	1027883a 	mov	r19,r2
  810200:	11400504 	addi	r5,r2,20
  810204:	0400090e 	bge	zero,r16,81022c <__lshift+0x8c>
  810208:	2805883a 	mov	r2,r5
  81020c:	0007883a 	mov	r3,zero
  810210:	18c00044 	addi	r3,r3,1
  810214:	10000015 	stw	zero,0(r2)
  810218:	10800104 	addi	r2,r2,4
  81021c:	80fffc1e 	bne	r16,r3,810210 <__lshift+0x70>
  810220:	8405883a 	add	r2,r16,r16
  810224:	1085883a 	add	r2,r2,r2
  810228:	288b883a 	add	r5,r5,r2
  81022c:	90800417 	ldw	r2,16(r18)
  810230:	91000504 	addi	r4,r18,20
  810234:	a18007cc 	andi	r6,r20,31
  810238:	1085883a 	add	r2,r2,r2
  81023c:	1085883a 	add	r2,r2,r2
  810240:	208f883a 	add	r7,r4,r2
  810244:	30001e26 	beq	r6,zero,8102c0 <__lshift+0x120>
  810248:	00800804 	movi	r2,32
  81024c:	1191c83a 	sub	r8,r2,r6
  810250:	0007883a 	mov	r3,zero
  810254:	20800017 	ldw	r2,0(r4)
  810258:	1184983a 	sll	r2,r2,r6
  81025c:	1884b03a 	or	r2,r3,r2
  810260:	28800015 	stw	r2,0(r5)
  810264:	20c00017 	ldw	r3,0(r4)
  810268:	21000104 	addi	r4,r4,4
  81026c:	29400104 	addi	r5,r5,4
  810270:	1a06d83a 	srl	r3,r3,r8
  810274:	21fff736 	bltu	r4,r7,810254 <__lshift+0xb4>
  810278:	28c00015 	stw	r3,0(r5)
  81027c:	18000126 	beq	r3,zero,810284 <__lshift+0xe4>
  810280:	8c400044 	addi	r17,r17,1
  810284:	88bfffc4 	addi	r2,r17,-1
  810288:	98800415 	stw	r2,16(r19)
  81028c:	a809883a 	mov	r4,r21
  810290:	900b883a 	mov	r5,r18
  810294:	080f85c0 	call	80f85c <_Bfree>
  810298:	9805883a 	mov	r2,r19
  81029c:	dfc00617 	ldw	ra,24(sp)
  8102a0:	dd400517 	ldw	r21,20(sp)
  8102a4:	dd000417 	ldw	r20,16(sp)
  8102a8:	dcc00317 	ldw	r19,12(sp)
  8102ac:	dc800217 	ldw	r18,8(sp)
  8102b0:	dc400117 	ldw	r17,4(sp)
  8102b4:	dc000017 	ldw	r16,0(sp)
  8102b8:	dec00704 	addi	sp,sp,28
  8102bc:	f800283a 	ret
  8102c0:	20800017 	ldw	r2,0(r4)
  8102c4:	21000104 	addi	r4,r4,4
  8102c8:	28800015 	stw	r2,0(r5)
  8102cc:	29400104 	addi	r5,r5,4
  8102d0:	21ffec2e 	bgeu	r4,r7,810284 <__lshift+0xe4>
  8102d4:	20800017 	ldw	r2,0(r4)
  8102d8:	21000104 	addi	r4,r4,4
  8102dc:	28800015 	stw	r2,0(r5)
  8102e0:	29400104 	addi	r5,r5,4
  8102e4:	21fff636 	bltu	r4,r7,8102c0 <__lshift+0x120>
  8102e8:	003fe606 	br	810284 <__lshift+0xe4>

008102ec <__multiply>:
  8102ec:	defff904 	addi	sp,sp,-28
  8102f0:	dcc00315 	stw	r19,12(sp)
  8102f4:	dc800215 	stw	r18,8(sp)
  8102f8:	2cc00417 	ldw	r19,16(r5)
  8102fc:	34800417 	ldw	r18,16(r6)
  810300:	dd000415 	stw	r20,16(sp)
  810304:	dc400115 	stw	r17,4(sp)
  810308:	dfc00615 	stw	ra,24(sp)
  81030c:	dd400515 	stw	r21,20(sp)
  810310:	dc000015 	stw	r16,0(sp)
  810314:	2823883a 	mov	r17,r5
  810318:	3029883a 	mov	r20,r6
  81031c:	9c80040e 	bge	r19,r18,810330 <__multiply+0x44>
  810320:	9027883a 	mov	r19,r18
  810324:	2c800417 	ldw	r18,16(r5)
  810328:	2829883a 	mov	r20,r5
  81032c:	3023883a 	mov	r17,r6
  810330:	88800217 	ldw	r2,8(r17)
  810334:	9ca1883a 	add	r16,r19,r18
  810338:	89400117 	ldw	r5,4(r17)
  81033c:	1400010e 	bge	r2,r16,810344 <__multiply+0x58>
  810340:	29400044 	addi	r5,r5,1
  810344:	080fddc0 	call	80fddc <_Balloc>
  810348:	102b883a 	mov	r21,r2
  81034c:	8405883a 	add	r2,r16,r16
  810350:	1085883a 	add	r2,r2,r2
  810354:	a9000504 	addi	r4,r21,20
  810358:	209d883a 	add	r14,r4,r2
  81035c:	2380042e 	bgeu	r4,r14,810370 <__multiply+0x84>
  810360:	2005883a 	mov	r2,r4
  810364:	10000015 	stw	zero,0(r2)
  810368:	10800104 	addi	r2,r2,4
  81036c:	13bffd36 	bltu	r2,r14,810364 <__multiply+0x78>
  810370:	9485883a 	add	r2,r18,r18
  810374:	9cc7883a 	add	r3,r19,r19
  810378:	a1800504 	addi	r6,r20,20
  81037c:	1085883a 	add	r2,r2,r2
  810380:	8b400504 	addi	r13,r17,20
  810384:	18c7883a 	add	r3,r3,r3
  810388:	309f883a 	add	r15,r6,r2
  81038c:	68d7883a 	add	r11,r13,r3
  810390:	33c03b2e 	bgeu	r6,r15,810480 <__multiply+0x194>
  810394:	2019883a 	mov	r12,r4
  810398:	30800017 	ldw	r2,0(r6)
  81039c:	127fffcc 	andi	r9,r2,65535
  8103a0:	48001826 	beq	r9,zero,810404 <__multiply+0x118>
  8103a4:	6811883a 	mov	r8,r13
  8103a8:	600f883a 	mov	r7,r12
  8103ac:	0015883a 	mov	r10,zero
  8103b0:	40c00017 	ldw	r3,0(r8)
  8103b4:	39400017 	ldw	r5,0(r7)
  8103b8:	42000104 	addi	r8,r8,4
  8103bc:	193fffcc 	andi	r4,r3,65535
  8103c0:	4909383a 	mul	r4,r9,r4
  8103c4:	1806d43a 	srli	r3,r3,16
  8103c8:	28bfffcc 	andi	r2,r5,65535
  8103cc:	5085883a 	add	r2,r10,r2
  8103d0:	2089883a 	add	r4,r4,r2
  8103d4:	48c7383a 	mul	r3,r9,r3
  8103d8:	280ad43a 	srli	r5,r5,16
  8103dc:	2004d43a 	srli	r2,r4,16
  8103e0:	3900000d 	sth	r4,0(r7)
  8103e4:	1947883a 	add	r3,r3,r5
  8103e8:	10c5883a 	add	r2,r2,r3
  8103ec:	3880008d 	sth	r2,2(r7)
  8103f0:	1014d43a 	srli	r10,r2,16
  8103f4:	39c00104 	addi	r7,r7,4
  8103f8:	42ffed36 	bltu	r8,r11,8103b0 <__multiply+0xc4>
  8103fc:	3a800015 	stw	r10,0(r7)
  810400:	30800017 	ldw	r2,0(r6)
  810404:	1012d43a 	srli	r9,r2,16
  810408:	48001926 	beq	r9,zero,810470 <__multiply+0x184>
  81040c:	60800017 	ldw	r2,0(r12)
  810410:	6811883a 	mov	r8,r13
  810414:	600f883a 	mov	r7,r12
  810418:	0015883a 	mov	r10,zero
  81041c:	100b883a 	mov	r5,r2
  810420:	41000017 	ldw	r4,0(r8)
  810424:	2806d43a 	srli	r3,r5,16
  810428:	3880000d 	sth	r2,0(r7)
  81042c:	20bfffcc 	andi	r2,r4,65535
  810430:	4885383a 	mul	r2,r9,r2
  810434:	50c7883a 	add	r3,r10,r3
  810438:	2008d43a 	srli	r4,r4,16
  81043c:	10c5883a 	add	r2,r2,r3
  810440:	3880008d 	sth	r2,2(r7)
  810444:	39c00104 	addi	r7,r7,4
  810448:	39400017 	ldw	r5,0(r7)
  81044c:	4909383a 	mul	r4,r9,r4
  810450:	1004d43a 	srli	r2,r2,16
  810454:	28ffffcc 	andi	r3,r5,65535
  810458:	20c9883a 	add	r4,r4,r3
  81045c:	1105883a 	add	r2,r2,r4
  810460:	42000104 	addi	r8,r8,4
  810464:	1014d43a 	srli	r10,r2,16
  810468:	42ffed36 	bltu	r8,r11,810420 <__multiply+0x134>
  81046c:	38800015 	stw	r2,0(r7)
  810470:	31800104 	addi	r6,r6,4
  810474:	33c0022e 	bgeu	r6,r15,810480 <__multiply+0x194>
  810478:	63000104 	addi	r12,r12,4
  81047c:	003fc606 	br	810398 <__multiply+0xac>
  810480:	0400090e 	bge	zero,r16,8104a8 <__multiply+0x1bc>
  810484:	70bfff17 	ldw	r2,-4(r14)
  810488:	70ffff04 	addi	r3,r14,-4
  81048c:	10000326 	beq	r2,zero,81049c <__multiply+0x1b0>
  810490:	00000506 	br	8104a8 <__multiply+0x1bc>
  810494:	18800017 	ldw	r2,0(r3)
  810498:	1000031e 	bne	r2,zero,8104a8 <__multiply+0x1bc>
  81049c:	843fffc4 	addi	r16,r16,-1
  8104a0:	18ffff04 	addi	r3,r3,-4
  8104a4:	803ffb1e 	bne	r16,zero,810494 <__multiply+0x1a8>
  8104a8:	a805883a 	mov	r2,r21
  8104ac:	ac000415 	stw	r16,16(r21)
  8104b0:	dfc00617 	ldw	ra,24(sp)
  8104b4:	dd400517 	ldw	r21,20(sp)
  8104b8:	dd000417 	ldw	r20,16(sp)
  8104bc:	dcc00317 	ldw	r19,12(sp)
  8104c0:	dc800217 	ldw	r18,8(sp)
  8104c4:	dc400117 	ldw	r17,4(sp)
  8104c8:	dc000017 	ldw	r16,0(sp)
  8104cc:	dec00704 	addi	sp,sp,28
  8104d0:	f800283a 	ret

008104d4 <__i2b>:
  8104d4:	defffd04 	addi	sp,sp,-12
  8104d8:	dc000015 	stw	r16,0(sp)
  8104dc:	04000044 	movi	r16,1
  8104e0:	dc800115 	stw	r18,4(sp)
  8104e4:	2825883a 	mov	r18,r5
  8104e8:	800b883a 	mov	r5,r16
  8104ec:	dfc00215 	stw	ra,8(sp)
  8104f0:	080fddc0 	call	80fddc <_Balloc>
  8104f4:	14000415 	stw	r16,16(r2)
  8104f8:	14800515 	stw	r18,20(r2)
  8104fc:	dfc00217 	ldw	ra,8(sp)
  810500:	dc800117 	ldw	r18,4(sp)
  810504:	dc000017 	ldw	r16,0(sp)
  810508:	dec00304 	addi	sp,sp,12
  81050c:	f800283a 	ret

00810510 <__multadd>:
  810510:	defffa04 	addi	sp,sp,-24
  810514:	dc800215 	stw	r18,8(sp)
  810518:	2c800417 	ldw	r18,16(r5)
  81051c:	dd000415 	stw	r20,16(sp)
  810520:	dcc00315 	stw	r19,12(sp)
  810524:	dc000015 	stw	r16,0(sp)
  810528:	dfc00515 	stw	ra,20(sp)
  81052c:	3821883a 	mov	r16,r7
  810530:	dc400115 	stw	r17,4(sp)
  810534:	2827883a 	mov	r19,r5
  810538:	2029883a 	mov	r20,r4
  81053c:	2a000504 	addi	r8,r5,20
  810540:	000f883a 	mov	r7,zero
  810544:	40800017 	ldw	r2,0(r8)
  810548:	39c00044 	addi	r7,r7,1
  81054c:	10ffffcc 	andi	r3,r2,65535
  810550:	1987383a 	mul	r3,r3,r6
  810554:	1004d43a 	srli	r2,r2,16
  810558:	1c07883a 	add	r3,r3,r16
  81055c:	180ad43a 	srli	r5,r3,16
  810560:	1185383a 	mul	r2,r2,r6
  810564:	18ffffcc 	andi	r3,r3,65535
  810568:	1145883a 	add	r2,r2,r5
  81056c:	1008943a 	slli	r4,r2,16
  810570:	1020d43a 	srli	r16,r2,16
  810574:	20c9883a 	add	r4,r4,r3
  810578:	41000015 	stw	r4,0(r8)
  81057c:	42000104 	addi	r8,r8,4
  810580:	3cbff016 	blt	r7,r18,810544 <__multadd+0x34>
  810584:	80000826 	beq	r16,zero,8105a8 <__multadd+0x98>
  810588:	98800217 	ldw	r2,8(r19)
  81058c:	90800f0e 	bge	r18,r2,8105cc <__multadd+0xbc>
  810590:	9485883a 	add	r2,r18,r18
  810594:	1085883a 	add	r2,r2,r2
  810598:	14c5883a 	add	r2,r2,r19
  81059c:	90c00044 	addi	r3,r18,1
  8105a0:	14000515 	stw	r16,20(r2)
  8105a4:	98c00415 	stw	r3,16(r19)
  8105a8:	9805883a 	mov	r2,r19
  8105ac:	dfc00517 	ldw	ra,20(sp)
  8105b0:	dd000417 	ldw	r20,16(sp)
  8105b4:	dcc00317 	ldw	r19,12(sp)
  8105b8:	dc800217 	ldw	r18,8(sp)
  8105bc:	dc400117 	ldw	r17,4(sp)
  8105c0:	dc000017 	ldw	r16,0(sp)
  8105c4:	dec00604 	addi	sp,sp,24
  8105c8:	f800283a 	ret
  8105cc:	99400117 	ldw	r5,4(r19)
  8105d0:	a009883a 	mov	r4,r20
  8105d4:	29400044 	addi	r5,r5,1
  8105d8:	080fddc0 	call	80fddc <_Balloc>
  8105dc:	99800417 	ldw	r6,16(r19)
  8105e0:	99400304 	addi	r5,r19,12
  8105e4:	11000304 	addi	r4,r2,12
  8105e8:	318d883a 	add	r6,r6,r6
  8105ec:	318d883a 	add	r6,r6,r6
  8105f0:	31800204 	addi	r6,r6,8
  8105f4:	1023883a 	mov	r17,r2
  8105f8:	080f6440 	call	80f644 <memcpy>
  8105fc:	980b883a 	mov	r5,r19
  810600:	a009883a 	mov	r4,r20
  810604:	080f85c0 	call	80f85c <_Bfree>
  810608:	8827883a 	mov	r19,r17
  81060c:	003fe006 	br	810590 <__multadd+0x80>

00810610 <__pow5mult>:
  810610:	defffa04 	addi	sp,sp,-24
  810614:	308000cc 	andi	r2,r6,3
  810618:	dd000415 	stw	r20,16(sp)
  81061c:	dcc00315 	stw	r19,12(sp)
  810620:	dc000015 	stw	r16,0(sp)
  810624:	dfc00515 	stw	ra,20(sp)
  810628:	dc800215 	stw	r18,8(sp)
  81062c:	dc400115 	stw	r17,4(sp)
  810630:	3021883a 	mov	r16,r6
  810634:	2027883a 	mov	r19,r4
  810638:	2829883a 	mov	r20,r5
  81063c:	10002b1e 	bne	r2,zero,8106ec <__pow5mult+0xdc>
  810640:	8025d0ba 	srai	r18,r16,2
  810644:	90001b26 	beq	r18,zero,8106b4 <__pow5mult+0xa4>
  810648:	9c001217 	ldw	r16,72(r19)
  81064c:	8000081e 	bne	r16,zero,810670 <__pow5mult+0x60>
  810650:	00003006 	br	810714 <__pow5mult+0x104>
  810654:	800b883a 	mov	r5,r16
  810658:	800d883a 	mov	r6,r16
  81065c:	9809883a 	mov	r4,r19
  810660:	90001426 	beq	r18,zero,8106b4 <__pow5mult+0xa4>
  810664:	80800017 	ldw	r2,0(r16)
  810668:	10001b26 	beq	r2,zero,8106d8 <__pow5mult+0xc8>
  81066c:	1021883a 	mov	r16,r2
  810670:	9080004c 	andi	r2,r18,1
  810674:	1005003a 	cmpeq	r2,r2,zero
  810678:	9025d07a 	srai	r18,r18,1
  81067c:	800d883a 	mov	r6,r16
  810680:	9809883a 	mov	r4,r19
  810684:	a00b883a 	mov	r5,r20
  810688:	103ff21e 	bne	r2,zero,810654 <__pow5mult+0x44>
  81068c:	08102ec0 	call	8102ec <__multiply>
  810690:	a00b883a 	mov	r5,r20
  810694:	9809883a 	mov	r4,r19
  810698:	1023883a 	mov	r17,r2
  81069c:	080f85c0 	call	80f85c <_Bfree>
  8106a0:	8829883a 	mov	r20,r17
  8106a4:	800b883a 	mov	r5,r16
  8106a8:	800d883a 	mov	r6,r16
  8106ac:	9809883a 	mov	r4,r19
  8106b0:	903fec1e 	bne	r18,zero,810664 <__pow5mult+0x54>
  8106b4:	a005883a 	mov	r2,r20
  8106b8:	dfc00517 	ldw	ra,20(sp)
  8106bc:	dd000417 	ldw	r20,16(sp)
  8106c0:	dcc00317 	ldw	r19,12(sp)
  8106c4:	dc800217 	ldw	r18,8(sp)
  8106c8:	dc400117 	ldw	r17,4(sp)
  8106cc:	dc000017 	ldw	r16,0(sp)
  8106d0:	dec00604 	addi	sp,sp,24
  8106d4:	f800283a 	ret
  8106d8:	08102ec0 	call	8102ec <__multiply>
  8106dc:	80800015 	stw	r2,0(r16)
  8106e0:	1021883a 	mov	r16,r2
  8106e4:	10000015 	stw	zero,0(r2)
  8106e8:	003fe106 	br	810670 <__pow5mult+0x60>
  8106ec:	1085883a 	add	r2,r2,r2
  8106f0:	00c020b4 	movhi	r3,130
  8106f4:	18f51204 	addi	r3,r3,-11192
  8106f8:	1085883a 	add	r2,r2,r2
  8106fc:	10c5883a 	add	r2,r2,r3
  810700:	11bfff17 	ldw	r6,-4(r2)
  810704:	000f883a 	mov	r7,zero
  810708:	08105100 	call	810510 <__multadd>
  81070c:	1029883a 	mov	r20,r2
  810710:	003fcb06 	br	810640 <__pow5mult+0x30>
  810714:	9809883a 	mov	r4,r19
  810718:	01409c44 	movi	r5,625
  81071c:	08104d40 	call	8104d4 <__i2b>
  810720:	98801215 	stw	r2,72(r19)
  810724:	1021883a 	mov	r16,r2
  810728:	10000015 	stw	zero,0(r2)
  81072c:	003fd006 	br	810670 <__pow5mult+0x60>

00810730 <__s2b>:
  810730:	defff904 	addi	sp,sp,-28
  810734:	dcc00315 	stw	r19,12(sp)
  810738:	dc800215 	stw	r18,8(sp)
  81073c:	2827883a 	mov	r19,r5
  810740:	2025883a 	mov	r18,r4
  810744:	01400244 	movi	r5,9
  810748:	39000204 	addi	r4,r7,8
  81074c:	dd000415 	stw	r20,16(sp)
  810750:	dc400115 	stw	r17,4(sp)
  810754:	dfc00615 	stw	ra,24(sp)
  810758:	dd400515 	stw	r21,20(sp)
  81075c:	dc000015 	stw	r16,0(sp)
  810760:	3829883a 	mov	r20,r7
  810764:	3023883a 	mov	r17,r6
  810768:	080977c0 	call	80977c <__divsi3>
  81076c:	00c00044 	movi	r3,1
  810770:	1880350e 	bge	r3,r2,810848 <__s2b+0x118>
  810774:	000b883a 	mov	r5,zero
  810778:	18c7883a 	add	r3,r3,r3
  81077c:	29400044 	addi	r5,r5,1
  810780:	18bffd16 	blt	r3,r2,810778 <__s2b+0x48>
  810784:	9009883a 	mov	r4,r18
  810788:	080fddc0 	call	80fddc <_Balloc>
  81078c:	1011883a 	mov	r8,r2
  810790:	d8800717 	ldw	r2,28(sp)
  810794:	00c00044 	movi	r3,1
  810798:	01800244 	movi	r6,9
  81079c:	40800515 	stw	r2,20(r8)
  8107a0:	40c00415 	stw	r3,16(r8)
  8107a4:	3440260e 	bge	r6,r17,810840 <__s2b+0x110>
  8107a8:	3021883a 	mov	r16,r6
  8107ac:	99ab883a 	add	r21,r19,r6
  8107b0:	9c05883a 	add	r2,r19,r16
  8107b4:	11c00007 	ldb	r7,0(r2)
  8107b8:	400b883a 	mov	r5,r8
  8107bc:	9009883a 	mov	r4,r18
  8107c0:	39fff404 	addi	r7,r7,-48
  8107c4:	01800284 	movi	r6,10
  8107c8:	08105100 	call	810510 <__multadd>
  8107cc:	84000044 	addi	r16,r16,1
  8107d0:	1011883a 	mov	r8,r2
  8107d4:	8c3ff61e 	bne	r17,r16,8107b0 <__s2b+0x80>
  8107d8:	ac45883a 	add	r2,r21,r17
  8107dc:	117ffe04 	addi	r5,r2,-8
  8107e0:	880d883a 	mov	r6,r17
  8107e4:	35000c0e 	bge	r6,r20,810818 <__s2b+0xe8>
  8107e8:	a185c83a 	sub	r2,r20,r6
  8107ec:	2821883a 	mov	r16,r5
  8107f0:	28a3883a 	add	r17,r5,r2
  8107f4:	81c00007 	ldb	r7,0(r16)
  8107f8:	400b883a 	mov	r5,r8
  8107fc:	9009883a 	mov	r4,r18
  810800:	39fff404 	addi	r7,r7,-48
  810804:	01800284 	movi	r6,10
  810808:	08105100 	call	810510 <__multadd>
  81080c:	84000044 	addi	r16,r16,1
  810810:	1011883a 	mov	r8,r2
  810814:	847ff71e 	bne	r16,r17,8107f4 <__s2b+0xc4>
  810818:	4005883a 	mov	r2,r8
  81081c:	dfc00617 	ldw	ra,24(sp)
  810820:	dd400517 	ldw	r21,20(sp)
  810824:	dd000417 	ldw	r20,16(sp)
  810828:	dcc00317 	ldw	r19,12(sp)
  81082c:	dc800217 	ldw	r18,8(sp)
  810830:	dc400117 	ldw	r17,4(sp)
  810834:	dc000017 	ldw	r16,0(sp)
  810838:	dec00704 	addi	sp,sp,28
  81083c:	f800283a 	ret
  810840:	99400284 	addi	r5,r19,10
  810844:	003fe706 	br	8107e4 <__s2b+0xb4>
  810848:	000b883a 	mov	r5,zero
  81084c:	003fcd06 	br	810784 <__s2b+0x54>

00810850 <_realloc_r>:
  810850:	defff404 	addi	sp,sp,-48
  810854:	dd800815 	stw	r22,32(sp)
  810858:	dc800415 	stw	r18,16(sp)
  81085c:	dc400315 	stw	r17,12(sp)
  810860:	dfc00b15 	stw	ra,44(sp)
  810864:	df000a15 	stw	fp,40(sp)
  810868:	ddc00915 	stw	r23,36(sp)
  81086c:	dd400715 	stw	r21,28(sp)
  810870:	dd000615 	stw	r20,24(sp)
  810874:	dcc00515 	stw	r19,20(sp)
  810878:	dc000215 	stw	r16,8(sp)
  81087c:	2825883a 	mov	r18,r5
  810880:	3023883a 	mov	r17,r6
  810884:	202d883a 	mov	r22,r4
  810888:	2800c926 	beq	r5,zero,810bb0 <_realloc_r+0x360>
  81088c:	0812d280 	call	812d28 <__malloc_lock>
  810890:	943ffe04 	addi	r16,r18,-8
  810894:	88c002c4 	addi	r3,r17,11
  810898:	00800584 	movi	r2,22
  81089c:	82000117 	ldw	r8,4(r16)
  8108a0:	10c01b2e 	bgeu	r2,r3,810910 <_realloc_r+0xc0>
  8108a4:	00bffe04 	movi	r2,-8
  8108a8:	188e703a 	and	r7,r3,r2
  8108ac:	3839883a 	mov	fp,r7
  8108b0:	38001a16 	blt	r7,zero,81091c <_realloc_r+0xcc>
  8108b4:	e4401936 	bltu	fp,r17,81091c <_realloc_r+0xcc>
  8108b8:	013fff04 	movi	r4,-4
  8108bc:	4126703a 	and	r19,r8,r4
  8108c0:	99c02616 	blt	r19,r7,81095c <_realloc_r+0x10c>
  8108c4:	802b883a 	mov	r21,r16
  8108c8:	9829883a 	mov	r20,r19
  8108cc:	84000204 	addi	r16,r16,8
  8108d0:	a80f883a 	mov	r7,r21
  8108d4:	a70dc83a 	sub	r6,r20,fp
  8108d8:	008003c4 	movi	r2,15
  8108dc:	1180c136 	bltu	r2,r6,810be4 <_realloc_r+0x394>
  8108e0:	38800117 	ldw	r2,4(r7)
  8108e4:	a549883a 	add	r4,r20,r21
  8108e8:	1080004c 	andi	r2,r2,1
  8108ec:	a084b03a 	or	r2,r20,r2
  8108f0:	38800115 	stw	r2,4(r7)
  8108f4:	20c00117 	ldw	r3,4(r4)
  8108f8:	18c00054 	ori	r3,r3,1
  8108fc:	20c00115 	stw	r3,4(r4)
  810900:	b009883a 	mov	r4,r22
  810904:	0812d480 	call	812d48 <__malloc_unlock>
  810908:	8023883a 	mov	r17,r16
  81090c:	00000606 	br	810928 <_realloc_r+0xd8>
  810910:	01c00404 	movi	r7,16
  810914:	3839883a 	mov	fp,r7
  810918:	e47fe72e 	bgeu	fp,r17,8108b8 <_realloc_r+0x68>
  81091c:	00800304 	movi	r2,12
  810920:	0023883a 	mov	r17,zero
  810924:	b0800015 	stw	r2,0(r22)
  810928:	8805883a 	mov	r2,r17
  81092c:	dfc00b17 	ldw	ra,44(sp)
  810930:	df000a17 	ldw	fp,40(sp)
  810934:	ddc00917 	ldw	r23,36(sp)
  810938:	dd800817 	ldw	r22,32(sp)
  81093c:	dd400717 	ldw	r21,28(sp)
  810940:	dd000617 	ldw	r20,24(sp)
  810944:	dcc00517 	ldw	r19,20(sp)
  810948:	dc800417 	ldw	r18,16(sp)
  81094c:	dc400317 	ldw	r17,12(sp)
  810950:	dc000217 	ldw	r16,8(sp)
  810954:	dec00c04 	addi	sp,sp,48
  810958:	f800283a 	ret
  81095c:	008020b4 	movhi	r2,130
  810960:	10b65704 	addi	r2,r2,-9892
  810964:	12400217 	ldw	r9,8(r2)
  810968:	84cd883a 	add	r6,r16,r19
  81096c:	802b883a 	mov	r21,r16
  810970:	3240b926 	beq	r6,r9,810c58 <_realloc_r+0x408>
  810974:	31400117 	ldw	r5,4(r6)
  810978:	00bfff84 	movi	r2,-2
  81097c:	2884703a 	and	r2,r5,r2
  810980:	1185883a 	add	r2,r2,r6
  810984:	10c00117 	ldw	r3,4(r2)
  810988:	18c0004c 	andi	r3,r3,1
  81098c:	1807003a 	cmpeq	r3,r3,zero
  810990:	1800a326 	beq	r3,zero,810c20 <_realloc_r+0x3d0>
  810994:	2908703a 	and	r4,r5,r4
  810998:	9929883a 	add	r20,r19,r4
  81099c:	a1c0a30e 	bge	r20,r7,810c2c <_realloc_r+0x3dc>
  8109a0:	4080004c 	andi	r2,r8,1
  8109a4:	1000551e 	bne	r2,zero,810afc <_realloc_r+0x2ac>
  8109a8:	80800017 	ldw	r2,0(r16)
  8109ac:	80afc83a 	sub	r23,r16,r2
  8109b0:	b8c00117 	ldw	r3,4(r23)
  8109b4:	00bfff04 	movi	r2,-4
  8109b8:	1884703a 	and	r2,r3,r2
  8109bc:	30002e26 	beq	r6,zero,810a78 <_realloc_r+0x228>
  8109c0:	3240b926 	beq	r6,r9,810ca8 <_realloc_r+0x458>
  8109c4:	98a9883a 	add	r20,r19,r2
  8109c8:	2509883a 	add	r4,r4,r20
  8109cc:	d9000015 	stw	r4,0(sp)
  8109d0:	21c02a16 	blt	r4,r7,810a7c <_realloc_r+0x22c>
  8109d4:	30800317 	ldw	r2,12(r6)
  8109d8:	30c00217 	ldw	r3,8(r6)
  8109dc:	01400904 	movi	r5,36
  8109e0:	99bfff04 	addi	r6,r19,-4
  8109e4:	18800315 	stw	r2,12(r3)
  8109e8:	10c00215 	stw	r3,8(r2)
  8109ec:	b9000317 	ldw	r4,12(r23)
  8109f0:	b8800217 	ldw	r2,8(r23)
  8109f4:	b82b883a 	mov	r21,r23
  8109f8:	bc000204 	addi	r16,r23,8
  8109fc:	20800215 	stw	r2,8(r4)
  810a00:	11000315 	stw	r4,12(r2)
  810a04:	2980e436 	bltu	r5,r6,810d98 <_realloc_r+0x548>
  810a08:	008004c4 	movi	r2,19
  810a0c:	9009883a 	mov	r4,r18
  810a10:	8011883a 	mov	r8,r16
  810a14:	11800f2e 	bgeu	r2,r6,810a54 <_realloc_r+0x204>
  810a18:	90800017 	ldw	r2,0(r18)
  810a1c:	ba000404 	addi	r8,r23,16
  810a20:	91000204 	addi	r4,r18,8
  810a24:	b8800215 	stw	r2,8(r23)
  810a28:	90c00117 	ldw	r3,4(r18)
  810a2c:	008006c4 	movi	r2,27
  810a30:	b8c00315 	stw	r3,12(r23)
  810a34:	1180072e 	bgeu	r2,r6,810a54 <_realloc_r+0x204>
  810a38:	90c00217 	ldw	r3,8(r18)
  810a3c:	ba000604 	addi	r8,r23,24
  810a40:	91000404 	addi	r4,r18,16
  810a44:	b8c00415 	stw	r3,16(r23)
  810a48:	90800317 	ldw	r2,12(r18)
  810a4c:	b8800515 	stw	r2,20(r23)
  810a50:	3140e726 	beq	r6,r5,810df0 <_realloc_r+0x5a0>
  810a54:	20800017 	ldw	r2,0(r4)
  810a58:	dd000017 	ldw	r20,0(sp)
  810a5c:	b80f883a 	mov	r7,r23
  810a60:	40800015 	stw	r2,0(r8)
  810a64:	20c00117 	ldw	r3,4(r4)
  810a68:	40c00115 	stw	r3,4(r8)
  810a6c:	20800217 	ldw	r2,8(r4)
  810a70:	40800215 	stw	r2,8(r8)
  810a74:	003f9706 	br	8108d4 <_realloc_r+0x84>
  810a78:	98a9883a 	add	r20,r19,r2
  810a7c:	a1c01f16 	blt	r20,r7,810afc <_realloc_r+0x2ac>
  810a80:	b8c00317 	ldw	r3,12(r23)
  810a84:	b8800217 	ldw	r2,8(r23)
  810a88:	99bfff04 	addi	r6,r19,-4
  810a8c:	01400904 	movi	r5,36
  810a90:	b82b883a 	mov	r21,r23
  810a94:	18800215 	stw	r2,8(r3)
  810a98:	10c00315 	stw	r3,12(r2)
  810a9c:	bc000204 	addi	r16,r23,8
  810aa0:	2980c336 	bltu	r5,r6,810db0 <_realloc_r+0x560>
  810aa4:	008004c4 	movi	r2,19
  810aa8:	9009883a 	mov	r4,r18
  810aac:	8011883a 	mov	r8,r16
  810ab0:	11800f2e 	bgeu	r2,r6,810af0 <_realloc_r+0x2a0>
  810ab4:	90800017 	ldw	r2,0(r18)
  810ab8:	ba000404 	addi	r8,r23,16
  810abc:	91000204 	addi	r4,r18,8
  810ac0:	b8800215 	stw	r2,8(r23)
  810ac4:	90c00117 	ldw	r3,4(r18)
  810ac8:	008006c4 	movi	r2,27
  810acc:	b8c00315 	stw	r3,12(r23)
  810ad0:	1180072e 	bgeu	r2,r6,810af0 <_realloc_r+0x2a0>
  810ad4:	90c00217 	ldw	r3,8(r18)
  810ad8:	ba000604 	addi	r8,r23,24
  810adc:	91000404 	addi	r4,r18,16
  810ae0:	b8c00415 	stw	r3,16(r23)
  810ae4:	90800317 	ldw	r2,12(r18)
  810ae8:	b8800515 	stw	r2,20(r23)
  810aec:	3140c726 	beq	r6,r5,810e0c <_realloc_r+0x5bc>
  810af0:	20800017 	ldw	r2,0(r4)
  810af4:	b80f883a 	mov	r7,r23
  810af8:	003fd906 	br	810a60 <_realloc_r+0x210>
  810afc:	880b883a 	mov	r5,r17
  810b00:	b009883a 	mov	r4,r22
  810b04:	080a0d80 	call	80a0d8 <_malloc_r>
  810b08:	1023883a 	mov	r17,r2
  810b0c:	10002526 	beq	r2,zero,810ba4 <_realloc_r+0x354>
  810b10:	80800117 	ldw	r2,4(r16)
  810b14:	00ffff84 	movi	r3,-2
  810b18:	893ffe04 	addi	r4,r17,-8
  810b1c:	10c4703a 	and	r2,r2,r3
  810b20:	8085883a 	add	r2,r16,r2
  810b24:	20809526 	beq	r4,r2,810d7c <_realloc_r+0x52c>
  810b28:	99bfff04 	addi	r6,r19,-4
  810b2c:	01c00904 	movi	r7,36
  810b30:	39804536 	bltu	r7,r6,810c48 <_realloc_r+0x3f8>
  810b34:	008004c4 	movi	r2,19
  810b38:	9009883a 	mov	r4,r18
  810b3c:	880b883a 	mov	r5,r17
  810b40:	11800f2e 	bgeu	r2,r6,810b80 <_realloc_r+0x330>
  810b44:	90800017 	ldw	r2,0(r18)
  810b48:	89400204 	addi	r5,r17,8
  810b4c:	91000204 	addi	r4,r18,8
  810b50:	88800015 	stw	r2,0(r17)
  810b54:	90c00117 	ldw	r3,4(r18)
  810b58:	008006c4 	movi	r2,27
  810b5c:	88c00115 	stw	r3,4(r17)
  810b60:	1180072e 	bgeu	r2,r6,810b80 <_realloc_r+0x330>
  810b64:	90c00217 	ldw	r3,8(r18)
  810b68:	89400404 	addi	r5,r17,16
  810b6c:	91000404 	addi	r4,r18,16
  810b70:	88c00215 	stw	r3,8(r17)
  810b74:	90800317 	ldw	r2,12(r18)
  810b78:	88800315 	stw	r2,12(r17)
  810b7c:	31c09126 	beq	r6,r7,810dc4 <_realloc_r+0x574>
  810b80:	20800017 	ldw	r2,0(r4)
  810b84:	28800015 	stw	r2,0(r5)
  810b88:	20c00117 	ldw	r3,4(r4)
  810b8c:	28c00115 	stw	r3,4(r5)
  810b90:	20800217 	ldw	r2,8(r4)
  810b94:	28800215 	stw	r2,8(r5)
  810b98:	900b883a 	mov	r5,r18
  810b9c:	b009883a 	mov	r4,r22
  810ba0:	080e9640 	call	80e964 <_free_r>
  810ba4:	b009883a 	mov	r4,r22
  810ba8:	0812d480 	call	812d48 <__malloc_unlock>
  810bac:	003f5e06 	br	810928 <_realloc_r+0xd8>
  810bb0:	300b883a 	mov	r5,r6
  810bb4:	dfc00b17 	ldw	ra,44(sp)
  810bb8:	df000a17 	ldw	fp,40(sp)
  810bbc:	ddc00917 	ldw	r23,36(sp)
  810bc0:	dd800817 	ldw	r22,32(sp)
  810bc4:	dd400717 	ldw	r21,28(sp)
  810bc8:	dd000617 	ldw	r20,24(sp)
  810bcc:	dcc00517 	ldw	r19,20(sp)
  810bd0:	dc800417 	ldw	r18,16(sp)
  810bd4:	dc400317 	ldw	r17,12(sp)
  810bd8:	dc000217 	ldw	r16,8(sp)
  810bdc:	dec00c04 	addi	sp,sp,48
  810be0:	080a0d81 	jmpi	80a0d8 <_malloc_r>
  810be4:	38800117 	ldw	r2,4(r7)
  810be8:	e54b883a 	add	r5,fp,r21
  810bec:	31000054 	ori	r4,r6,1
  810bf0:	1080004c 	andi	r2,r2,1
  810bf4:	1704b03a 	or	r2,r2,fp
  810bf8:	38800115 	stw	r2,4(r7)
  810bfc:	29000115 	stw	r4,4(r5)
  810c00:	2987883a 	add	r3,r5,r6
  810c04:	18800117 	ldw	r2,4(r3)
  810c08:	29400204 	addi	r5,r5,8
  810c0c:	b009883a 	mov	r4,r22
  810c10:	10800054 	ori	r2,r2,1
  810c14:	18800115 	stw	r2,4(r3)
  810c18:	080e9640 	call	80e964 <_free_r>
  810c1c:	003f3806 	br	810900 <_realloc_r+0xb0>
  810c20:	000d883a 	mov	r6,zero
  810c24:	0009883a 	mov	r4,zero
  810c28:	003f5d06 	br	8109a0 <_realloc_r+0x150>
  810c2c:	30c00217 	ldw	r3,8(r6)
  810c30:	30800317 	ldw	r2,12(r6)
  810c34:	800f883a 	mov	r7,r16
  810c38:	84000204 	addi	r16,r16,8
  810c3c:	10c00215 	stw	r3,8(r2)
  810c40:	18800315 	stw	r2,12(r3)
  810c44:	003f2306 	br	8108d4 <_realloc_r+0x84>
  810c48:	8809883a 	mov	r4,r17
  810c4c:	900b883a 	mov	r5,r18
  810c50:	080f6e40 	call	80f6e4 <memmove>
  810c54:	003fd006 	br	810b98 <_realloc_r+0x348>
  810c58:	30800117 	ldw	r2,4(r6)
  810c5c:	e0c00404 	addi	r3,fp,16
  810c60:	1108703a 	and	r4,r2,r4
  810c64:	9905883a 	add	r2,r19,r4
  810c68:	10ff4d16 	blt	r2,r3,8109a0 <_realloc_r+0x150>
  810c6c:	1705c83a 	sub	r2,r2,fp
  810c70:	870b883a 	add	r5,r16,fp
  810c74:	10800054 	ori	r2,r2,1
  810c78:	28800115 	stw	r2,4(r5)
  810c7c:	80c00117 	ldw	r3,4(r16)
  810c80:	008020b4 	movhi	r2,130
  810c84:	10b65704 	addi	r2,r2,-9892
  810c88:	b009883a 	mov	r4,r22
  810c8c:	18c0004c 	andi	r3,r3,1
  810c90:	e0c6b03a 	or	r3,fp,r3
  810c94:	11400215 	stw	r5,8(r2)
  810c98:	80c00115 	stw	r3,4(r16)
  810c9c:	0812d480 	call	812d48 <__malloc_unlock>
  810ca0:	84400204 	addi	r17,r16,8
  810ca4:	003f2006 	br	810928 <_realloc_r+0xd8>
  810ca8:	98a9883a 	add	r20,r19,r2
  810cac:	2509883a 	add	r4,r4,r20
  810cb0:	e0800404 	addi	r2,fp,16
  810cb4:	d9000115 	stw	r4,4(sp)
  810cb8:	20bf7016 	blt	r4,r2,810a7c <_realloc_r+0x22c>
  810cbc:	b8c00317 	ldw	r3,12(r23)
  810cc0:	b8800217 	ldw	r2,8(r23)
  810cc4:	99bfff04 	addi	r6,r19,-4
  810cc8:	01400904 	movi	r5,36
  810ccc:	18800215 	stw	r2,8(r3)
  810cd0:	10c00315 	stw	r3,12(r2)
  810cd4:	bc400204 	addi	r17,r23,8
  810cd8:	29804136 	bltu	r5,r6,810de0 <_realloc_r+0x590>
  810cdc:	008004c4 	movi	r2,19
  810ce0:	9009883a 	mov	r4,r18
  810ce4:	880f883a 	mov	r7,r17
  810ce8:	11800f2e 	bgeu	r2,r6,810d28 <_realloc_r+0x4d8>
  810cec:	90800017 	ldw	r2,0(r18)
  810cf0:	b9c00404 	addi	r7,r23,16
  810cf4:	91000204 	addi	r4,r18,8
  810cf8:	b8800215 	stw	r2,8(r23)
  810cfc:	90c00117 	ldw	r3,4(r18)
  810d00:	008006c4 	movi	r2,27
  810d04:	b8c00315 	stw	r3,12(r23)
  810d08:	1180072e 	bgeu	r2,r6,810d28 <_realloc_r+0x4d8>
  810d0c:	90c00217 	ldw	r3,8(r18)
  810d10:	b9c00604 	addi	r7,r23,24
  810d14:	91000404 	addi	r4,r18,16
  810d18:	b8c00415 	stw	r3,16(r23)
  810d1c:	90800317 	ldw	r2,12(r18)
  810d20:	b8800515 	stw	r2,20(r23)
  810d24:	31404026 	beq	r6,r5,810e28 <_realloc_r+0x5d8>
  810d28:	20800017 	ldw	r2,0(r4)
  810d2c:	38800015 	stw	r2,0(r7)
  810d30:	20c00117 	ldw	r3,4(r4)
  810d34:	38c00115 	stw	r3,4(r7)
  810d38:	20800217 	ldw	r2,8(r4)
  810d3c:	38800215 	stw	r2,8(r7)
  810d40:	d8c00117 	ldw	r3,4(sp)
  810d44:	bf0b883a 	add	r5,r23,fp
  810d48:	b009883a 	mov	r4,r22
  810d4c:	1f05c83a 	sub	r2,r3,fp
  810d50:	10800054 	ori	r2,r2,1
  810d54:	28800115 	stw	r2,4(r5)
  810d58:	b8c00117 	ldw	r3,4(r23)
  810d5c:	008020b4 	movhi	r2,130
  810d60:	10b65704 	addi	r2,r2,-9892
  810d64:	11400215 	stw	r5,8(r2)
  810d68:	18c0004c 	andi	r3,r3,1
  810d6c:	e0c6b03a 	or	r3,fp,r3
  810d70:	b8c00115 	stw	r3,4(r23)
  810d74:	0812d480 	call	812d48 <__malloc_unlock>
  810d78:	003eeb06 	br	810928 <_realloc_r+0xd8>
  810d7c:	20800117 	ldw	r2,4(r4)
  810d80:	00ffff04 	movi	r3,-4
  810d84:	800f883a 	mov	r7,r16
  810d88:	10c4703a 	and	r2,r2,r3
  810d8c:	98a9883a 	add	r20,r19,r2
  810d90:	84000204 	addi	r16,r16,8
  810d94:	003ecf06 	br	8108d4 <_realloc_r+0x84>
  810d98:	900b883a 	mov	r5,r18
  810d9c:	8009883a 	mov	r4,r16
  810da0:	080f6e40 	call	80f6e4 <memmove>
  810da4:	dd000017 	ldw	r20,0(sp)
  810da8:	b80f883a 	mov	r7,r23
  810dac:	003ec906 	br	8108d4 <_realloc_r+0x84>
  810db0:	900b883a 	mov	r5,r18
  810db4:	8009883a 	mov	r4,r16
  810db8:	080f6e40 	call	80f6e4 <memmove>
  810dbc:	b80f883a 	mov	r7,r23
  810dc0:	003ec406 	br	8108d4 <_realloc_r+0x84>
  810dc4:	90c00417 	ldw	r3,16(r18)
  810dc8:	89400604 	addi	r5,r17,24
  810dcc:	91000604 	addi	r4,r18,24
  810dd0:	88c00415 	stw	r3,16(r17)
  810dd4:	90800517 	ldw	r2,20(r18)
  810dd8:	88800515 	stw	r2,20(r17)
  810ddc:	003f6806 	br	810b80 <_realloc_r+0x330>
  810de0:	900b883a 	mov	r5,r18
  810de4:	8809883a 	mov	r4,r17
  810de8:	080f6e40 	call	80f6e4 <memmove>
  810dec:	003fd406 	br	810d40 <_realloc_r+0x4f0>
  810df0:	90c00417 	ldw	r3,16(r18)
  810df4:	91000604 	addi	r4,r18,24
  810df8:	ba000804 	addi	r8,r23,32
  810dfc:	b8c00615 	stw	r3,24(r23)
  810e00:	90800517 	ldw	r2,20(r18)
  810e04:	b8800715 	stw	r2,28(r23)
  810e08:	003f1206 	br	810a54 <_realloc_r+0x204>
  810e0c:	90c00417 	ldw	r3,16(r18)
  810e10:	91000604 	addi	r4,r18,24
  810e14:	ba000804 	addi	r8,r23,32
  810e18:	b8c00615 	stw	r3,24(r23)
  810e1c:	90800517 	ldw	r2,20(r18)
  810e20:	b8800715 	stw	r2,28(r23)
  810e24:	003f3206 	br	810af0 <_realloc_r+0x2a0>
  810e28:	90c00417 	ldw	r3,16(r18)
  810e2c:	91000604 	addi	r4,r18,24
  810e30:	b9c00804 	addi	r7,r23,32
  810e34:	b8c00615 	stw	r3,24(r23)
  810e38:	90800517 	ldw	r2,20(r18)
  810e3c:	b8800715 	stw	r2,28(r23)
  810e40:	003fb906 	br	810d28 <_realloc_r+0x4d8>

00810e44 <__isinfd>:
  810e44:	200d883a 	mov	r6,r4
  810e48:	0109c83a 	sub	r4,zero,r4
  810e4c:	2188b03a 	or	r4,r4,r6
  810e50:	2008d7fa 	srli	r4,r4,31
  810e54:	00a00034 	movhi	r2,32768
  810e58:	10bfffc4 	addi	r2,r2,-1
  810e5c:	1144703a 	and	r2,r2,r5
  810e60:	2088b03a 	or	r4,r4,r2
  810e64:	009ffc34 	movhi	r2,32752
  810e68:	1105c83a 	sub	r2,r2,r4
  810e6c:	0087c83a 	sub	r3,zero,r2
  810e70:	10c4b03a 	or	r2,r2,r3
  810e74:	1004d7fa 	srli	r2,r2,31
  810e78:	00c00044 	movi	r3,1
  810e7c:	1885c83a 	sub	r2,r3,r2
  810e80:	f800283a 	ret

00810e84 <__sclose>:
  810e84:	2940038f 	ldh	r5,14(r5)
  810e88:	08111b81 	jmpi	8111b8 <_close_r>

00810e8c <__sseek>:
  810e8c:	defffe04 	addi	sp,sp,-8
  810e90:	dc000015 	stw	r16,0(sp)
  810e94:	2821883a 	mov	r16,r5
  810e98:	2940038f 	ldh	r5,14(r5)
  810e9c:	dfc00115 	stw	ra,4(sp)
  810ea0:	08114300 	call	811430 <_lseek_r>
  810ea4:	1007883a 	mov	r3,r2
  810ea8:	00bfffc4 	movi	r2,-1
  810eac:	18800926 	beq	r3,r2,810ed4 <__sseek+0x48>
  810eb0:	8080030b 	ldhu	r2,12(r16)
  810eb4:	80c01415 	stw	r3,80(r16)
  810eb8:	10840014 	ori	r2,r2,4096
  810ebc:	8080030d 	sth	r2,12(r16)
  810ec0:	1805883a 	mov	r2,r3
  810ec4:	dfc00117 	ldw	ra,4(sp)
  810ec8:	dc000017 	ldw	r16,0(sp)
  810ecc:	dec00204 	addi	sp,sp,8
  810ed0:	f800283a 	ret
  810ed4:	8080030b 	ldhu	r2,12(r16)
  810ed8:	10bbffcc 	andi	r2,r2,61439
  810edc:	8080030d 	sth	r2,12(r16)
  810ee0:	1805883a 	mov	r2,r3
  810ee4:	dfc00117 	ldw	ra,4(sp)
  810ee8:	dc000017 	ldw	r16,0(sp)
  810eec:	dec00204 	addi	sp,sp,8
  810ef0:	f800283a 	ret

00810ef4 <__swrite>:
  810ef4:	2880030b 	ldhu	r2,12(r5)
  810ef8:	defffb04 	addi	sp,sp,-20
  810efc:	dcc00315 	stw	r19,12(sp)
  810f00:	1080400c 	andi	r2,r2,256
  810f04:	dc800215 	stw	r18,8(sp)
  810f08:	dc400115 	stw	r17,4(sp)
  810f0c:	dc000015 	stw	r16,0(sp)
  810f10:	3027883a 	mov	r19,r6
  810f14:	3825883a 	mov	r18,r7
  810f18:	dfc00415 	stw	ra,16(sp)
  810f1c:	2821883a 	mov	r16,r5
  810f20:	000d883a 	mov	r6,zero
  810f24:	01c00084 	movi	r7,2
  810f28:	2023883a 	mov	r17,r4
  810f2c:	10000226 	beq	r2,zero,810f38 <__swrite+0x44>
  810f30:	2940038f 	ldh	r5,14(r5)
  810f34:	08114300 	call	811430 <_lseek_r>
  810f38:	8080030b 	ldhu	r2,12(r16)
  810f3c:	8140038f 	ldh	r5,14(r16)
  810f40:	8809883a 	mov	r4,r17
  810f44:	10bbffcc 	andi	r2,r2,61439
  810f48:	980d883a 	mov	r6,r19
  810f4c:	900f883a 	mov	r7,r18
  810f50:	8080030d 	sth	r2,12(r16)
  810f54:	dfc00417 	ldw	ra,16(sp)
  810f58:	dcc00317 	ldw	r19,12(sp)
  810f5c:	dc800217 	ldw	r18,8(sp)
  810f60:	dc400117 	ldw	r17,4(sp)
  810f64:	dc000017 	ldw	r16,0(sp)
  810f68:	dec00504 	addi	sp,sp,20
  810f6c:	081108c1 	jmpi	81108c <_write_r>

00810f70 <__sread>:
  810f70:	defffe04 	addi	sp,sp,-8
  810f74:	dc000015 	stw	r16,0(sp)
  810f78:	2821883a 	mov	r16,r5
  810f7c:	2940038f 	ldh	r5,14(r5)
  810f80:	dfc00115 	stw	ra,4(sp)
  810f84:	08114a80 	call	8114a8 <_read_r>
  810f88:	1007883a 	mov	r3,r2
  810f8c:	10000816 	blt	r2,zero,810fb0 <__sread+0x40>
  810f90:	80801417 	ldw	r2,80(r16)
  810f94:	10c5883a 	add	r2,r2,r3
  810f98:	80801415 	stw	r2,80(r16)
  810f9c:	1805883a 	mov	r2,r3
  810fa0:	dfc00117 	ldw	ra,4(sp)
  810fa4:	dc000017 	ldw	r16,0(sp)
  810fa8:	dec00204 	addi	sp,sp,8
  810fac:	f800283a 	ret
  810fb0:	8080030b 	ldhu	r2,12(r16)
  810fb4:	10bbffcc 	andi	r2,r2,61439
  810fb8:	8080030d 	sth	r2,12(r16)
  810fbc:	1805883a 	mov	r2,r3
  810fc0:	dfc00117 	ldw	ra,4(sp)
  810fc4:	dc000017 	ldw	r16,0(sp)
  810fc8:	dec00204 	addi	sp,sp,8
  810fcc:	f800283a 	ret

00810fd0 <strcmp>:
  810fd0:	2144b03a 	or	r2,r4,r5
  810fd4:	108000cc 	andi	r2,r2,3
  810fd8:	10001d1e 	bne	r2,zero,811050 <strcmp+0x80>
  810fdc:	200f883a 	mov	r7,r4
  810fe0:	28800017 	ldw	r2,0(r5)
  810fe4:	21000017 	ldw	r4,0(r4)
  810fe8:	280d883a 	mov	r6,r5
  810fec:	2080161e 	bne	r4,r2,811048 <strcmp+0x78>
  810ff0:	023fbff4 	movhi	r8,65279
  810ff4:	423fbfc4 	addi	r8,r8,-257
  810ff8:	2207883a 	add	r3,r4,r8
  810ffc:	01602074 	movhi	r5,32897
  811000:	29602004 	addi	r5,r5,-32640
  811004:	1946703a 	and	r3,r3,r5
  811008:	0104303a 	nor	r2,zero,r4
  81100c:	10c4703a 	and	r2,r2,r3
  811010:	10001c1e 	bne	r2,zero,811084 <strcmp+0xb4>
  811014:	4013883a 	mov	r9,r8
  811018:	2811883a 	mov	r8,r5
  81101c:	00000106 	br	811024 <strcmp+0x54>
  811020:	1800181e 	bne	r3,zero,811084 <strcmp+0xb4>
  811024:	39c00104 	addi	r7,r7,4
  811028:	39000017 	ldw	r4,0(r7)
  81102c:	31800104 	addi	r6,r6,4
  811030:	31400017 	ldw	r5,0(r6)
  811034:	2245883a 	add	r2,r4,r9
  811038:	1204703a 	and	r2,r2,r8
  81103c:	0106303a 	nor	r3,zero,r4
  811040:	1886703a 	and	r3,r3,r2
  811044:	217ff626 	beq	r4,r5,811020 <strcmp+0x50>
  811048:	3809883a 	mov	r4,r7
  81104c:	300b883a 	mov	r5,r6
  811050:	20c00007 	ldb	r3,0(r4)
  811054:	1800051e 	bne	r3,zero,81106c <strcmp+0x9c>
  811058:	00000606 	br	811074 <strcmp+0xa4>
  81105c:	21000044 	addi	r4,r4,1
  811060:	20c00007 	ldb	r3,0(r4)
  811064:	29400044 	addi	r5,r5,1
  811068:	18000226 	beq	r3,zero,811074 <strcmp+0xa4>
  81106c:	28800007 	ldb	r2,0(r5)
  811070:	18bffa26 	beq	r3,r2,81105c <strcmp+0x8c>
  811074:	20c00003 	ldbu	r3,0(r4)
  811078:	28800003 	ldbu	r2,0(r5)
  81107c:	1885c83a 	sub	r2,r3,r2
  811080:	f800283a 	ret
  811084:	0005883a 	mov	r2,zero
  811088:	f800283a 	ret

0081108c <_write_r>:
  81108c:	defffd04 	addi	sp,sp,-12
  811090:	dc000015 	stw	r16,0(sp)
  811094:	040020b4 	movhi	r16,130
  811098:	84037004 	addi	r16,r16,3520
  81109c:	dc400115 	stw	r17,4(sp)
  8110a0:	80000015 	stw	zero,0(r16)
  8110a4:	2023883a 	mov	r17,r4
  8110a8:	2809883a 	mov	r4,r5
  8110ac:	300b883a 	mov	r5,r6
  8110b0:	380d883a 	mov	r6,r7
  8110b4:	dfc00215 	stw	ra,8(sp)
  8110b8:	08131d80 	call	8131d8 <write>
  8110bc:	1007883a 	mov	r3,r2
  8110c0:	00bfffc4 	movi	r2,-1
  8110c4:	18800626 	beq	r3,r2,8110e0 <_write_r+0x54>
  8110c8:	1805883a 	mov	r2,r3
  8110cc:	dfc00217 	ldw	ra,8(sp)
  8110d0:	dc400117 	ldw	r17,4(sp)
  8110d4:	dc000017 	ldw	r16,0(sp)
  8110d8:	dec00304 	addi	sp,sp,12
  8110dc:	f800283a 	ret
  8110e0:	80800017 	ldw	r2,0(r16)
  8110e4:	103ff826 	beq	r2,zero,8110c8 <_write_r+0x3c>
  8110e8:	88800015 	stw	r2,0(r17)
  8110ec:	1805883a 	mov	r2,r3
  8110f0:	dfc00217 	ldw	ra,8(sp)
  8110f4:	dc400117 	ldw	r17,4(sp)
  8110f8:	dc000017 	ldw	r16,0(sp)
  8110fc:	dec00304 	addi	sp,sp,12
  811100:	f800283a 	ret

00811104 <_calloc_r>:
  811104:	298b383a 	mul	r5,r5,r6
  811108:	defffe04 	addi	sp,sp,-8
  81110c:	dc000015 	stw	r16,0(sp)
  811110:	dfc00115 	stw	ra,4(sp)
  811114:	080a0d80 	call	80a0d8 <_malloc_r>
  811118:	1021883a 	mov	r16,r2
  81111c:	01c00904 	movi	r7,36
  811120:	10000d26 	beq	r2,zero,811158 <_calloc_r+0x54>
  811124:	10ffff17 	ldw	r3,-4(r2)
  811128:	1009883a 	mov	r4,r2
  81112c:	00bfff04 	movi	r2,-4
  811130:	1886703a 	and	r3,r3,r2
  811134:	1887883a 	add	r3,r3,r2
  811138:	180d883a 	mov	r6,r3
  81113c:	000b883a 	mov	r5,zero
  811140:	38c01736 	bltu	r7,r3,8111a0 <_calloc_r+0x9c>
  811144:	008004c4 	movi	r2,19
  811148:	10c00836 	bltu	r2,r3,81116c <_calloc_r+0x68>
  81114c:	20000215 	stw	zero,8(r4)
  811150:	20000015 	stw	zero,0(r4)
  811154:	20000115 	stw	zero,4(r4)
  811158:	8005883a 	mov	r2,r16
  81115c:	dfc00117 	ldw	ra,4(sp)
  811160:	dc000017 	ldw	r16,0(sp)
  811164:	dec00204 	addi	sp,sp,8
  811168:	f800283a 	ret
  81116c:	008006c4 	movi	r2,27
  811170:	80000015 	stw	zero,0(r16)
  811174:	80000115 	stw	zero,4(r16)
  811178:	81000204 	addi	r4,r16,8
  81117c:	10fff32e 	bgeu	r2,r3,81114c <_calloc_r+0x48>
  811180:	80000215 	stw	zero,8(r16)
  811184:	80000315 	stw	zero,12(r16)
  811188:	81000404 	addi	r4,r16,16
  81118c:	19ffef1e 	bne	r3,r7,81114c <_calloc_r+0x48>
  811190:	81000604 	addi	r4,r16,24
  811194:	80000415 	stw	zero,16(r16)
  811198:	80000515 	stw	zero,20(r16)
  81119c:	003feb06 	br	81114c <_calloc_r+0x48>
  8111a0:	080f7c40 	call	80f7c4 <memset>
  8111a4:	8005883a 	mov	r2,r16
  8111a8:	dfc00117 	ldw	ra,4(sp)
  8111ac:	dc000017 	ldw	r16,0(sp)
  8111b0:	dec00204 	addi	sp,sp,8
  8111b4:	f800283a 	ret

008111b8 <_close_r>:
  8111b8:	defffd04 	addi	sp,sp,-12
  8111bc:	dc000015 	stw	r16,0(sp)
  8111c0:	040020b4 	movhi	r16,130
  8111c4:	84037004 	addi	r16,r16,3520
  8111c8:	dc400115 	stw	r17,4(sp)
  8111cc:	80000015 	stw	zero,0(r16)
  8111d0:	2023883a 	mov	r17,r4
  8111d4:	2809883a 	mov	r4,r5
  8111d8:	dfc00215 	stw	ra,8(sp)
  8111dc:	08122c80 	call	8122c8 <close>
  8111e0:	1007883a 	mov	r3,r2
  8111e4:	00bfffc4 	movi	r2,-1
  8111e8:	18800626 	beq	r3,r2,811204 <_close_r+0x4c>
  8111ec:	1805883a 	mov	r2,r3
  8111f0:	dfc00217 	ldw	ra,8(sp)
  8111f4:	dc400117 	ldw	r17,4(sp)
  8111f8:	dc000017 	ldw	r16,0(sp)
  8111fc:	dec00304 	addi	sp,sp,12
  811200:	f800283a 	ret
  811204:	80800017 	ldw	r2,0(r16)
  811208:	103ff826 	beq	r2,zero,8111ec <_close_r+0x34>
  81120c:	88800015 	stw	r2,0(r17)
  811210:	1805883a 	mov	r2,r3
  811214:	dfc00217 	ldw	ra,8(sp)
  811218:	dc400117 	ldw	r17,4(sp)
  81121c:	dc000017 	ldw	r16,0(sp)
  811220:	dec00304 	addi	sp,sp,12
  811224:	f800283a 	ret

00811228 <_fclose_r>:
  811228:	defffc04 	addi	sp,sp,-16
  81122c:	dc400115 	stw	r17,4(sp)
  811230:	dc000015 	stw	r16,0(sp)
  811234:	dfc00315 	stw	ra,12(sp)
  811238:	dc800215 	stw	r18,8(sp)
  81123c:	2821883a 	mov	r16,r5
  811240:	2023883a 	mov	r17,r4
  811244:	28002926 	beq	r5,zero,8112ec <_fclose_r+0xc4>
  811248:	080e5d00 	call	80e5d0 <__sfp_lock_acquire>
  81124c:	88000226 	beq	r17,zero,811258 <_fclose_r+0x30>
  811250:	88800e17 	ldw	r2,56(r17)
  811254:	10002d26 	beq	r2,zero,81130c <_fclose_r+0xe4>
  811258:	8080030f 	ldh	r2,12(r16)
  81125c:	10002226 	beq	r2,zero,8112e8 <_fclose_r+0xc0>
  811260:	8809883a 	mov	r4,r17
  811264:	800b883a 	mov	r5,r16
  811268:	080e3480 	call	80e348 <_fflush_r>
  81126c:	1025883a 	mov	r18,r2
  811270:	80800b17 	ldw	r2,44(r16)
  811274:	10000426 	beq	r2,zero,811288 <_fclose_r+0x60>
  811278:	81400717 	ldw	r5,28(r16)
  81127c:	8809883a 	mov	r4,r17
  811280:	103ee83a 	callr	r2
  811284:	10002a16 	blt	r2,zero,811330 <_fclose_r+0x108>
  811288:	8080030b 	ldhu	r2,12(r16)
  81128c:	1080200c 	andi	r2,r2,128
  811290:	1000231e 	bne	r2,zero,811320 <_fclose_r+0xf8>
  811294:	81400c17 	ldw	r5,48(r16)
  811298:	28000526 	beq	r5,zero,8112b0 <_fclose_r+0x88>
  81129c:	80801004 	addi	r2,r16,64
  8112a0:	28800226 	beq	r5,r2,8112ac <_fclose_r+0x84>
  8112a4:	8809883a 	mov	r4,r17
  8112a8:	080e9640 	call	80e964 <_free_r>
  8112ac:	80000c15 	stw	zero,48(r16)
  8112b0:	81401117 	ldw	r5,68(r16)
  8112b4:	28000326 	beq	r5,zero,8112c4 <_fclose_r+0x9c>
  8112b8:	8809883a 	mov	r4,r17
  8112bc:	080e9640 	call	80e964 <_free_r>
  8112c0:	80001115 	stw	zero,68(r16)
  8112c4:	8000030d 	sth	zero,12(r16)
  8112c8:	080e5d40 	call	80e5d4 <__sfp_lock_release>
  8112cc:	9005883a 	mov	r2,r18
  8112d0:	dfc00317 	ldw	ra,12(sp)
  8112d4:	dc800217 	ldw	r18,8(sp)
  8112d8:	dc400117 	ldw	r17,4(sp)
  8112dc:	dc000017 	ldw	r16,0(sp)
  8112e0:	dec00404 	addi	sp,sp,16
  8112e4:	f800283a 	ret
  8112e8:	080e5d40 	call	80e5d4 <__sfp_lock_release>
  8112ec:	0025883a 	mov	r18,zero
  8112f0:	9005883a 	mov	r2,r18
  8112f4:	dfc00317 	ldw	ra,12(sp)
  8112f8:	dc800217 	ldw	r18,8(sp)
  8112fc:	dc400117 	ldw	r17,4(sp)
  811300:	dc000017 	ldw	r16,0(sp)
  811304:	dec00404 	addi	sp,sp,16
  811308:	f800283a 	ret
  81130c:	8809883a 	mov	r4,r17
  811310:	080e5e00 	call	80e5e0 <__sinit>
  811314:	8080030f 	ldh	r2,12(r16)
  811318:	103fd11e 	bne	r2,zero,811260 <_fclose_r+0x38>
  81131c:	003ff206 	br	8112e8 <_fclose_r+0xc0>
  811320:	81400417 	ldw	r5,16(r16)
  811324:	8809883a 	mov	r4,r17
  811328:	080e9640 	call	80e964 <_free_r>
  81132c:	003fd906 	br	811294 <_fclose_r+0x6c>
  811330:	04bfffc4 	movi	r18,-1
  811334:	003fd406 	br	811288 <_fclose_r+0x60>

00811338 <fclose>:
  811338:	008020b4 	movhi	r2,130
  81133c:	10bc3904 	addi	r2,r2,-3868
  811340:	200b883a 	mov	r5,r4
  811344:	11000017 	ldw	r4,0(r2)
  811348:	08112281 	jmpi	811228 <_fclose_r>

0081134c <_fstat_r>:
  81134c:	defffd04 	addi	sp,sp,-12
  811350:	dc000015 	stw	r16,0(sp)
  811354:	040020b4 	movhi	r16,130
  811358:	84037004 	addi	r16,r16,3520
  81135c:	dc400115 	stw	r17,4(sp)
  811360:	80000015 	stw	zero,0(r16)
  811364:	2023883a 	mov	r17,r4
  811368:	2809883a 	mov	r4,r5
  81136c:	300b883a 	mov	r5,r6
  811370:	dfc00215 	stw	ra,8(sp)
  811374:	08124500 	call	812450 <fstat>
  811378:	1007883a 	mov	r3,r2
  81137c:	00bfffc4 	movi	r2,-1
  811380:	18800626 	beq	r3,r2,81139c <_fstat_r+0x50>
  811384:	1805883a 	mov	r2,r3
  811388:	dfc00217 	ldw	ra,8(sp)
  81138c:	dc400117 	ldw	r17,4(sp)
  811390:	dc000017 	ldw	r16,0(sp)
  811394:	dec00304 	addi	sp,sp,12
  811398:	f800283a 	ret
  81139c:	80800017 	ldw	r2,0(r16)
  8113a0:	103ff826 	beq	r2,zero,811384 <_fstat_r+0x38>
  8113a4:	88800015 	stw	r2,0(r17)
  8113a8:	1805883a 	mov	r2,r3
  8113ac:	dfc00217 	ldw	ra,8(sp)
  8113b0:	dc400117 	ldw	r17,4(sp)
  8113b4:	dc000017 	ldw	r16,0(sp)
  8113b8:	dec00304 	addi	sp,sp,12
  8113bc:	f800283a 	ret

008113c0 <_isatty_r>:
  8113c0:	defffd04 	addi	sp,sp,-12
  8113c4:	dc000015 	stw	r16,0(sp)
  8113c8:	040020b4 	movhi	r16,130
  8113cc:	84037004 	addi	r16,r16,3520
  8113d0:	dc400115 	stw	r17,4(sp)
  8113d4:	80000015 	stw	zero,0(r16)
  8113d8:	2023883a 	mov	r17,r4
  8113dc:	2809883a 	mov	r4,r5
  8113e0:	dfc00215 	stw	ra,8(sp)
  8113e4:	08129600 	call	812960 <isatty>
  8113e8:	1007883a 	mov	r3,r2
  8113ec:	00bfffc4 	movi	r2,-1
  8113f0:	18800626 	beq	r3,r2,81140c <_isatty_r+0x4c>
  8113f4:	1805883a 	mov	r2,r3
  8113f8:	dfc00217 	ldw	ra,8(sp)
  8113fc:	dc400117 	ldw	r17,4(sp)
  811400:	dc000017 	ldw	r16,0(sp)
  811404:	dec00304 	addi	sp,sp,12
  811408:	f800283a 	ret
  81140c:	80800017 	ldw	r2,0(r16)
  811410:	103ff826 	beq	r2,zero,8113f4 <_isatty_r+0x34>
  811414:	88800015 	stw	r2,0(r17)
  811418:	1805883a 	mov	r2,r3
  81141c:	dfc00217 	ldw	ra,8(sp)
  811420:	dc400117 	ldw	r17,4(sp)
  811424:	dc000017 	ldw	r16,0(sp)
  811428:	dec00304 	addi	sp,sp,12
  81142c:	f800283a 	ret

00811430 <_lseek_r>:
  811430:	defffd04 	addi	sp,sp,-12
  811434:	dc000015 	stw	r16,0(sp)
  811438:	040020b4 	movhi	r16,130
  81143c:	84037004 	addi	r16,r16,3520
  811440:	dc400115 	stw	r17,4(sp)
  811444:	80000015 	stw	zero,0(r16)
  811448:	2023883a 	mov	r17,r4
  81144c:	2809883a 	mov	r4,r5
  811450:	300b883a 	mov	r5,r6
  811454:	380d883a 	mov	r6,r7
  811458:	dfc00215 	stw	ra,8(sp)
  81145c:	0812b6c0 	call	812b6c <lseek>
  811460:	1007883a 	mov	r3,r2
  811464:	00bfffc4 	movi	r2,-1
  811468:	18800626 	beq	r3,r2,811484 <_lseek_r+0x54>
  81146c:	1805883a 	mov	r2,r3
  811470:	dfc00217 	ldw	ra,8(sp)
  811474:	dc400117 	ldw	r17,4(sp)
  811478:	dc000017 	ldw	r16,0(sp)
  81147c:	dec00304 	addi	sp,sp,12
  811480:	f800283a 	ret
  811484:	80800017 	ldw	r2,0(r16)
  811488:	103ff826 	beq	r2,zero,81146c <_lseek_r+0x3c>
  81148c:	88800015 	stw	r2,0(r17)
  811490:	1805883a 	mov	r2,r3
  811494:	dfc00217 	ldw	ra,8(sp)
  811498:	dc400117 	ldw	r17,4(sp)
  81149c:	dc000017 	ldw	r16,0(sp)
  8114a0:	dec00304 	addi	sp,sp,12
  8114a4:	f800283a 	ret

008114a8 <_read_r>:
  8114a8:	defffd04 	addi	sp,sp,-12
  8114ac:	dc000015 	stw	r16,0(sp)
  8114b0:	040020b4 	movhi	r16,130
  8114b4:	84037004 	addi	r16,r16,3520
  8114b8:	dc400115 	stw	r17,4(sp)
  8114bc:	80000015 	stw	zero,0(r16)
  8114c0:	2023883a 	mov	r17,r4
  8114c4:	2809883a 	mov	r4,r5
  8114c8:	300b883a 	mov	r5,r6
  8114cc:	380d883a 	mov	r6,r7
  8114d0:	dfc00215 	stw	ra,8(sp)
  8114d4:	0812d680 	call	812d68 <read>
  8114d8:	1007883a 	mov	r3,r2
  8114dc:	00bfffc4 	movi	r2,-1
  8114e0:	18800626 	beq	r3,r2,8114fc <_read_r+0x54>
  8114e4:	1805883a 	mov	r2,r3
  8114e8:	dfc00217 	ldw	ra,8(sp)
  8114ec:	dc400117 	ldw	r17,4(sp)
  8114f0:	dc000017 	ldw	r16,0(sp)
  8114f4:	dec00304 	addi	sp,sp,12
  8114f8:	f800283a 	ret
  8114fc:	80800017 	ldw	r2,0(r16)
  811500:	103ff826 	beq	r2,zero,8114e4 <_read_r+0x3c>
  811504:	88800015 	stw	r2,0(r17)
  811508:	1805883a 	mov	r2,r3
  81150c:	dfc00217 	ldw	ra,8(sp)
  811510:	dc400117 	ldw	r17,4(sp)
  811514:	dc000017 	ldw	r16,0(sp)
  811518:	dec00304 	addi	sp,sp,12
  81151c:	f800283a 	ret

00811520 <__udivdi3>:
  811520:	defff004 	addi	sp,sp,-64
  811524:	2005883a 	mov	r2,r4
  811528:	3011883a 	mov	r8,r6
  81152c:	df000e15 	stw	fp,56(sp)
  811530:	dd000a15 	stw	r20,40(sp)
  811534:	dc000615 	stw	r16,24(sp)
  811538:	dfc00f15 	stw	ra,60(sp)
  81153c:	ddc00d15 	stw	r23,52(sp)
  811540:	dd800c15 	stw	r22,48(sp)
  811544:	dd400b15 	stw	r21,44(sp)
  811548:	dcc00915 	stw	r19,36(sp)
  81154c:	dc800815 	stw	r18,32(sp)
  811550:	dc400715 	stw	r17,28(sp)
  811554:	4021883a 	mov	r16,r8
  811558:	1039883a 	mov	fp,r2
  81155c:	2829883a 	mov	r20,r5
  811560:	38003b1e 	bne	r7,zero,811650 <__udivdi3+0x130>
  811564:	2a005c36 	bltu	r5,r8,8116d8 <__udivdi3+0x1b8>
  811568:	4000a626 	beq	r8,zero,811804 <__udivdi3+0x2e4>
  81156c:	00bfffd4 	movui	r2,65535
  811570:	14009e36 	bltu	r2,r16,8117ec <__udivdi3+0x2cc>
  811574:	00803fc4 	movi	r2,255
  811578:	14013d36 	bltu	r2,r16,811a70 <__udivdi3+0x550>
  81157c:	000b883a 	mov	r5,zero
  811580:	0005883a 	mov	r2,zero
  811584:	8084d83a 	srl	r2,r16,r2
  811588:	010020b4 	movhi	r4,130
  81158c:	21345604 	addi	r4,r4,-11944
  811590:	01800804 	movi	r6,32
  811594:	1105883a 	add	r2,r2,r4
  811598:	10c00003 	ldbu	r3,0(r2)
  81159c:	28c7883a 	add	r3,r5,r3
  8115a0:	30edc83a 	sub	r22,r6,r3
  8115a4:	b000ee1e 	bne	r22,zero,811960 <__udivdi3+0x440>
  8115a8:	802ad43a 	srli	r21,r16,16
  8115ac:	00800044 	movi	r2,1
  8115b0:	a423c83a 	sub	r17,r20,r16
  8115b4:	85ffffcc 	andi	r23,r16,65535
  8115b8:	d8800315 	stw	r2,12(sp)
  8115bc:	8809883a 	mov	r4,r17
  8115c0:	a80b883a 	mov	r5,r21
  8115c4:	080983c0 	call	80983c <__udivsi3>
  8115c8:	8809883a 	mov	r4,r17
  8115cc:	a80b883a 	mov	r5,r21
  8115d0:	102d883a 	mov	r22,r2
  8115d4:	08098440 	call	809844 <__umodsi3>
  8115d8:	1004943a 	slli	r2,r2,16
  8115dc:	e006d43a 	srli	r3,fp,16
  8115e0:	bda3383a 	mul	r17,r23,r22
  8115e4:	10c4b03a 	or	r2,r2,r3
  8115e8:	1440042e 	bgeu	r2,r17,8115fc <__udivdi3+0xdc>
  8115ec:	1405883a 	add	r2,r2,r16
  8115f0:	b5bfffc4 	addi	r22,r22,-1
  8115f4:	14000136 	bltu	r2,r16,8115fc <__udivdi3+0xdc>
  8115f8:	14413d36 	bltu	r2,r17,811af0 <__udivdi3+0x5d0>
  8115fc:	1463c83a 	sub	r17,r2,r17
  811600:	8809883a 	mov	r4,r17
  811604:	a80b883a 	mov	r5,r21
  811608:	080983c0 	call	80983c <__udivsi3>
  81160c:	8809883a 	mov	r4,r17
  811610:	a80b883a 	mov	r5,r21
  811614:	1029883a 	mov	r20,r2
  811618:	08098440 	call	809844 <__umodsi3>
  81161c:	1004943a 	slli	r2,r2,16
  811620:	bd09383a 	mul	r4,r23,r20
  811624:	e0ffffcc 	andi	r3,fp,65535
  811628:	10c4b03a 	or	r2,r2,r3
  81162c:	1100042e 	bgeu	r2,r4,811640 <__udivdi3+0x120>
  811630:	8085883a 	add	r2,r16,r2
  811634:	a53fffc4 	addi	r20,r20,-1
  811638:	14000136 	bltu	r2,r16,811640 <__udivdi3+0x120>
  81163c:	11012036 	bltu	r2,r4,811ac0 <__udivdi3+0x5a0>
  811640:	b004943a 	slli	r2,r22,16
  811644:	d9000317 	ldw	r4,12(sp)
  811648:	a084b03a 	or	r2,r20,r2
  81164c:	00001506 	br	8116a4 <__udivdi3+0x184>
  811650:	380d883a 	mov	r6,r7
  811654:	29c06236 	bltu	r5,r7,8117e0 <__udivdi3+0x2c0>
  811658:	00bfffd4 	movui	r2,65535
  81165c:	11c05a36 	bltu	r2,r7,8117c8 <__udivdi3+0x2a8>
  811660:	00803fc4 	movi	r2,255
  811664:	11c0fc36 	bltu	r2,r7,811a58 <__udivdi3+0x538>
  811668:	000b883a 	mov	r5,zero
  81166c:	0005883a 	mov	r2,zero
  811670:	3084d83a 	srl	r2,r6,r2
  811674:	010020b4 	movhi	r4,130
  811678:	21345604 	addi	r4,r4,-11944
  81167c:	01c00804 	movi	r7,32
  811680:	1105883a 	add	r2,r2,r4
  811684:	10c00003 	ldbu	r3,0(r2)
  811688:	28c7883a 	add	r3,r5,r3
  81168c:	38efc83a 	sub	r23,r7,r3
  811690:	b800691e 	bne	r23,zero,811838 <__udivdi3+0x318>
  811694:	35000136 	bltu	r6,r20,81169c <__udivdi3+0x17c>
  811698:	e4005136 	bltu	fp,r16,8117e0 <__udivdi3+0x2c0>
  81169c:	00800044 	movi	r2,1
  8116a0:	0009883a 	mov	r4,zero
  8116a4:	2007883a 	mov	r3,r4
  8116a8:	dfc00f17 	ldw	ra,60(sp)
  8116ac:	df000e17 	ldw	fp,56(sp)
  8116b0:	ddc00d17 	ldw	r23,52(sp)
  8116b4:	dd800c17 	ldw	r22,48(sp)
  8116b8:	dd400b17 	ldw	r21,44(sp)
  8116bc:	dd000a17 	ldw	r20,40(sp)
  8116c0:	dcc00917 	ldw	r19,36(sp)
  8116c4:	dc800817 	ldw	r18,32(sp)
  8116c8:	dc400717 	ldw	r17,28(sp)
  8116cc:	dc000617 	ldw	r16,24(sp)
  8116d0:	dec01004 	addi	sp,sp,64
  8116d4:	f800283a 	ret
  8116d8:	00bfffd4 	movui	r2,65535
  8116dc:	12005036 	bltu	r2,r8,811820 <__udivdi3+0x300>
  8116e0:	00803fc4 	movi	r2,255
  8116e4:	1200e836 	bltu	r2,r8,811a88 <__udivdi3+0x568>
  8116e8:	000b883a 	mov	r5,zero
  8116ec:	0005883a 	mov	r2,zero
  8116f0:	8084d83a 	srl	r2,r16,r2
  8116f4:	010020b4 	movhi	r4,130
  8116f8:	21345604 	addi	r4,r4,-11944
  8116fc:	01800804 	movi	r6,32
  811700:	1105883a 	add	r2,r2,r4
  811704:	10c00003 	ldbu	r3,0(r2)
  811708:	28c7883a 	add	r3,r5,r3
  81170c:	30cbc83a 	sub	r5,r6,r3
  811710:	28000626 	beq	r5,zero,81172c <__udivdi3+0x20c>
  811714:	3145c83a 	sub	r2,r6,r5
  811718:	e084d83a 	srl	r2,fp,r2
  81171c:	a146983a 	sll	r3,r20,r5
  811720:	e178983a 	sll	fp,fp,r5
  811724:	8160983a 	sll	r16,r16,r5
  811728:	18a8b03a 	or	r20,r3,r2
  81172c:	802ad43a 	srli	r21,r16,16
  811730:	a009883a 	mov	r4,r20
  811734:	85ffffcc 	andi	r23,r16,65535
  811738:	a80b883a 	mov	r5,r21
  81173c:	080983c0 	call	80983c <__udivsi3>
  811740:	a009883a 	mov	r4,r20
  811744:	a80b883a 	mov	r5,r21
  811748:	102d883a 	mov	r22,r2
  81174c:	08098440 	call	809844 <__umodsi3>
  811750:	1004943a 	slli	r2,r2,16
  811754:	e006d43a 	srli	r3,fp,16
  811758:	bda3383a 	mul	r17,r23,r22
  81175c:	10c4b03a 	or	r2,r2,r3
  811760:	1440042e 	bgeu	r2,r17,811774 <__udivdi3+0x254>
  811764:	1405883a 	add	r2,r2,r16
  811768:	b5bfffc4 	addi	r22,r22,-1
  81176c:	14000136 	bltu	r2,r16,811774 <__udivdi3+0x254>
  811770:	1440d536 	bltu	r2,r17,811ac8 <__udivdi3+0x5a8>
  811774:	1463c83a 	sub	r17,r2,r17
  811778:	8809883a 	mov	r4,r17
  81177c:	a80b883a 	mov	r5,r21
  811780:	080983c0 	call	80983c <__udivsi3>
  811784:	8809883a 	mov	r4,r17
  811788:	a80b883a 	mov	r5,r21
  81178c:	1029883a 	mov	r20,r2
  811790:	08098440 	call	809844 <__umodsi3>
  811794:	1004943a 	slli	r2,r2,16
  811798:	bd09383a 	mul	r4,r23,r20
  81179c:	e0ffffcc 	andi	r3,fp,65535
  8117a0:	10c4b03a 	or	r2,r2,r3
  8117a4:	1100042e 	bgeu	r2,r4,8117b8 <__udivdi3+0x298>
  8117a8:	8085883a 	add	r2,r16,r2
  8117ac:	a53fffc4 	addi	r20,r20,-1
  8117b0:	14000136 	bltu	r2,r16,8117b8 <__udivdi3+0x298>
  8117b4:	1100c736 	bltu	r2,r4,811ad4 <__udivdi3+0x5b4>
  8117b8:	b004943a 	slli	r2,r22,16
  8117bc:	0009883a 	mov	r4,zero
  8117c0:	a084b03a 	or	r2,r20,r2
  8117c4:	003fb706 	br	8116a4 <__udivdi3+0x184>
  8117c8:	00804034 	movhi	r2,256
  8117cc:	10bfffc4 	addi	r2,r2,-1
  8117d0:	11c0a436 	bltu	r2,r7,811a64 <__udivdi3+0x544>
  8117d4:	01400404 	movi	r5,16
  8117d8:	2805883a 	mov	r2,r5
  8117dc:	003fa406 	br	811670 <__udivdi3+0x150>
  8117e0:	0005883a 	mov	r2,zero
  8117e4:	0009883a 	mov	r4,zero
  8117e8:	003fae06 	br	8116a4 <__udivdi3+0x184>
  8117ec:	00804034 	movhi	r2,256
  8117f0:	10bfffc4 	addi	r2,r2,-1
  8117f4:	1400a136 	bltu	r2,r16,811a7c <__udivdi3+0x55c>
  8117f8:	01400404 	movi	r5,16
  8117fc:	2805883a 	mov	r2,r5
  811800:	003f6006 	br	811584 <__udivdi3+0x64>
  811804:	01000044 	movi	r4,1
  811808:	000b883a 	mov	r5,zero
  81180c:	080983c0 	call	80983c <__udivsi3>
  811810:	1021883a 	mov	r16,r2
  811814:	00bfffd4 	movui	r2,65535
  811818:	143ff436 	bltu	r2,r16,8117ec <__udivdi3+0x2cc>
  81181c:	003f5506 	br	811574 <__udivdi3+0x54>
  811820:	00804034 	movhi	r2,256
  811824:	10bfffc4 	addi	r2,r2,-1
  811828:	12009a36 	bltu	r2,r8,811a94 <__udivdi3+0x574>
  81182c:	01400404 	movi	r5,16
  811830:	2805883a 	mov	r2,r5
  811834:	003fae06 	br	8116f0 <__udivdi3+0x1d0>
  811838:	3dc5c83a 	sub	r2,r7,r23
  81183c:	35c8983a 	sll	r4,r6,r23
  811840:	8086d83a 	srl	r3,r16,r2
  811844:	a0a2d83a 	srl	r17,r20,r2
  811848:	e084d83a 	srl	r2,fp,r2
  81184c:	20eab03a 	or	r21,r4,r3
  811850:	a82cd43a 	srli	r22,r21,16
  811854:	a5c6983a 	sll	r3,r20,r23
  811858:	8809883a 	mov	r4,r17
  81185c:	b00b883a 	mov	r5,r22
  811860:	1886b03a 	or	r3,r3,r2
  811864:	d8c00215 	stw	r3,8(sp)
  811868:	080983c0 	call	80983c <__udivsi3>
  81186c:	8809883a 	mov	r4,r17
  811870:	b00b883a 	mov	r5,r22
  811874:	1029883a 	mov	r20,r2
  811878:	08098440 	call	809844 <__umodsi3>
  81187c:	a8ffffcc 	andi	r3,r21,65535
  811880:	d8c00515 	stw	r3,20(sp)
  811884:	d9000217 	ldw	r4,8(sp)
  811888:	d9400517 	ldw	r5,20(sp)
  81188c:	1004943a 	slli	r2,r2,16
  811890:	2006d43a 	srli	r3,r4,16
  811894:	85e0983a 	sll	r16,r16,r23
  811898:	2d23383a 	mul	r17,r5,r20
  81189c:	10c4b03a 	or	r2,r2,r3
  8118a0:	dc000015 	stw	r16,0(sp)
  8118a4:	1440032e 	bgeu	r2,r17,8118b4 <__udivdi3+0x394>
  8118a8:	1545883a 	add	r2,r2,r21
  8118ac:	a53fffc4 	addi	r20,r20,-1
  8118b0:	15407f2e 	bgeu	r2,r21,811ab0 <__udivdi3+0x590>
  8118b4:	1463c83a 	sub	r17,r2,r17
  8118b8:	8809883a 	mov	r4,r17
  8118bc:	b00b883a 	mov	r5,r22
  8118c0:	080983c0 	call	80983c <__udivsi3>
  8118c4:	8809883a 	mov	r4,r17
  8118c8:	b00b883a 	mov	r5,r22
  8118cc:	1021883a 	mov	r16,r2
  8118d0:	08098440 	call	809844 <__umodsi3>
  8118d4:	d8c00517 	ldw	r3,20(sp)
  8118d8:	d9000217 	ldw	r4,8(sp)
  8118dc:	1004943a 	slli	r2,r2,16
  8118e0:	1c0f383a 	mul	r7,r3,r16
  8118e4:	20ffffcc 	andi	r3,r4,65535
  8118e8:	10e2b03a 	or	r17,r2,r3
  8118ec:	89c0032e 	bgeu	r17,r7,8118fc <__udivdi3+0x3dc>
  8118f0:	8d63883a 	add	r17,r17,r21
  8118f4:	843fffc4 	addi	r16,r16,-1
  8118f8:	8d40692e 	bgeu	r17,r21,811aa0 <__udivdi3+0x580>
  8118fc:	a008943a 	slli	r4,r20,16
  811900:	d9400017 	ldw	r5,0(sp)
  811904:	89e3c83a 	sub	r17,r17,r7
  811908:	8110b03a 	or	r8,r16,r4
  81190c:	280cd43a 	srli	r6,r5,16
  811910:	28ffffcc 	andi	r3,r5,65535
  811914:	40bfffcc 	andi	r2,r8,65535
  811918:	400ad43a 	srli	r5,r8,16
  81191c:	10d3383a 	mul	r9,r2,r3
  811920:	1185383a 	mul	r2,r2,r6
  811924:	28c7383a 	mul	r3,r5,r3
  811928:	4808d43a 	srli	r4,r9,16
  81192c:	298b383a 	mul	r5,r5,r6
  811930:	10c5883a 	add	r2,r2,r3
  811934:	2089883a 	add	r4,r4,r2
  811938:	20c0022e 	bgeu	r4,r3,811944 <__udivdi3+0x424>
  81193c:	00800074 	movhi	r2,1
  811940:	288b883a 	add	r5,r5,r2
  811944:	2004d43a 	srli	r2,r4,16
  811948:	288b883a 	add	r5,r5,r2
  81194c:	89403f36 	bltu	r17,r5,811a4c <__udivdi3+0x52c>
  811950:	89403926 	beq	r17,r5,811a38 <__udivdi3+0x518>
  811954:	4005883a 	mov	r2,r8
  811958:	0009883a 	mov	r4,zero
  81195c:	003f5106 	br	8116a4 <__udivdi3+0x184>
  811960:	85a0983a 	sll	r16,r16,r22
  811964:	3585c83a 	sub	r2,r6,r22
  811968:	a0a2d83a 	srl	r17,r20,r2
  81196c:	802ad43a 	srli	r21,r16,16
  811970:	e084d83a 	srl	r2,fp,r2
  811974:	a586983a 	sll	r3,r20,r22
  811978:	8809883a 	mov	r4,r17
  81197c:	a80b883a 	mov	r5,r21
  811980:	1886b03a 	or	r3,r3,r2
  811984:	d8c00115 	stw	r3,4(sp)
  811988:	080983c0 	call	80983c <__udivsi3>
  81198c:	8809883a 	mov	r4,r17
  811990:	a80b883a 	mov	r5,r21
  811994:	d8800415 	stw	r2,16(sp)
  811998:	08098440 	call	809844 <__umodsi3>
  81199c:	d9000117 	ldw	r4,4(sp)
  8119a0:	d9400417 	ldw	r5,16(sp)
  8119a4:	1004943a 	slli	r2,r2,16
  8119a8:	85ffffcc 	andi	r23,r16,65535
  8119ac:	2006d43a 	srli	r3,r4,16
  8119b0:	b963383a 	mul	r17,r23,r5
  8119b4:	10c4b03a 	or	r2,r2,r3
  8119b8:	1440042e 	bgeu	r2,r17,8119cc <__udivdi3+0x4ac>
  8119bc:	297fffc4 	addi	r5,r5,-1
  8119c0:	1405883a 	add	r2,r2,r16
  8119c4:	d9400415 	stw	r5,16(sp)
  8119c8:	1400442e 	bgeu	r2,r16,811adc <__udivdi3+0x5bc>
  8119cc:	1463c83a 	sub	r17,r2,r17
  8119d0:	8809883a 	mov	r4,r17
  8119d4:	a80b883a 	mov	r5,r21
  8119d8:	080983c0 	call	80983c <__udivsi3>
  8119dc:	8809883a 	mov	r4,r17
  8119e0:	a80b883a 	mov	r5,r21
  8119e4:	1029883a 	mov	r20,r2
  8119e8:	08098440 	call	809844 <__umodsi3>
  8119ec:	d9400117 	ldw	r5,4(sp)
  8119f0:	1004943a 	slli	r2,r2,16
  8119f4:	bd09383a 	mul	r4,r23,r20
  8119f8:	28ffffcc 	andi	r3,r5,65535
  8119fc:	10c6b03a 	or	r3,r2,r3
  811a00:	1900062e 	bgeu	r3,r4,811a1c <__udivdi3+0x4fc>
  811a04:	1c07883a 	add	r3,r3,r16
  811a08:	a53fffc4 	addi	r20,r20,-1
  811a0c:	1c000336 	bltu	r3,r16,811a1c <__udivdi3+0x4fc>
  811a10:	1900022e 	bgeu	r3,r4,811a1c <__udivdi3+0x4fc>
  811a14:	a53fffc4 	addi	r20,r20,-1
  811a18:	1c07883a 	add	r3,r3,r16
  811a1c:	d9400417 	ldw	r5,16(sp)
  811a20:	e5b8983a 	sll	fp,fp,r22
  811a24:	1923c83a 	sub	r17,r3,r4
  811a28:	2804943a 	slli	r2,r5,16
  811a2c:	a0a8b03a 	or	r20,r20,r2
  811a30:	dd000315 	stw	r20,12(sp)
  811a34:	003ee106 	br	8115bc <__udivdi3+0x9c>
  811a38:	2004943a 	slli	r2,r4,16
  811a3c:	e5c8983a 	sll	r4,fp,r23
  811a40:	48ffffcc 	andi	r3,r9,65535
  811a44:	10c5883a 	add	r2,r2,r3
  811a48:	20bfc22e 	bgeu	r4,r2,811954 <__udivdi3+0x434>
  811a4c:	40bfffc4 	addi	r2,r8,-1
  811a50:	0009883a 	mov	r4,zero
  811a54:	003f1306 	br	8116a4 <__udivdi3+0x184>
  811a58:	01400204 	movi	r5,8
  811a5c:	2805883a 	mov	r2,r5
  811a60:	003f0306 	br	811670 <__udivdi3+0x150>
  811a64:	01400604 	movi	r5,24
  811a68:	2805883a 	mov	r2,r5
  811a6c:	003f0006 	br	811670 <__udivdi3+0x150>
  811a70:	01400204 	movi	r5,8
  811a74:	2805883a 	mov	r2,r5
  811a78:	003ec206 	br	811584 <__udivdi3+0x64>
  811a7c:	01400604 	movi	r5,24
  811a80:	2805883a 	mov	r2,r5
  811a84:	003ebf06 	br	811584 <__udivdi3+0x64>
  811a88:	01400204 	movi	r5,8
  811a8c:	2805883a 	mov	r2,r5
  811a90:	003f1706 	br	8116f0 <__udivdi3+0x1d0>
  811a94:	01400604 	movi	r5,24
  811a98:	2805883a 	mov	r2,r5
  811a9c:	003f1406 	br	8116f0 <__udivdi3+0x1d0>
  811aa0:	89ff962e 	bgeu	r17,r7,8118fc <__udivdi3+0x3dc>
  811aa4:	8d63883a 	add	r17,r17,r21
  811aa8:	843fffc4 	addi	r16,r16,-1
  811aac:	003f9306 	br	8118fc <__udivdi3+0x3dc>
  811ab0:	147f802e 	bgeu	r2,r17,8118b4 <__udivdi3+0x394>
  811ab4:	a53fffc4 	addi	r20,r20,-1
  811ab8:	1545883a 	add	r2,r2,r21
  811abc:	003f7d06 	br	8118b4 <__udivdi3+0x394>
  811ac0:	a53fffc4 	addi	r20,r20,-1
  811ac4:	003ede06 	br	811640 <__udivdi3+0x120>
  811ac8:	b5bfffc4 	addi	r22,r22,-1
  811acc:	1405883a 	add	r2,r2,r16
  811ad0:	003f2806 	br	811774 <__udivdi3+0x254>
  811ad4:	a53fffc4 	addi	r20,r20,-1
  811ad8:	003f3706 	br	8117b8 <__udivdi3+0x298>
  811adc:	147fbb2e 	bgeu	r2,r17,8119cc <__udivdi3+0x4ac>
  811ae0:	297fffc4 	addi	r5,r5,-1
  811ae4:	1405883a 	add	r2,r2,r16
  811ae8:	d9400415 	stw	r5,16(sp)
  811aec:	003fb706 	br	8119cc <__udivdi3+0x4ac>
  811af0:	b5bfffc4 	addi	r22,r22,-1
  811af4:	1405883a 	add	r2,r2,r16
  811af8:	003ec006 	br	8115fc <__udivdi3+0xdc>

00811afc <__umoddi3>:
  811afc:	defff104 	addi	sp,sp,-60
  811b00:	dd800b15 	stw	r22,44(sp)
  811b04:	dd000915 	stw	r20,36(sp)
  811b08:	dc000515 	stw	r16,20(sp)
  811b0c:	dfc00e15 	stw	ra,56(sp)
  811b10:	df000d15 	stw	fp,52(sp)
  811b14:	ddc00c15 	stw	r23,48(sp)
  811b18:	dd400a15 	stw	r21,40(sp)
  811b1c:	dcc00815 	stw	r19,32(sp)
  811b20:	dc800715 	stw	r18,28(sp)
  811b24:	dc400615 	stw	r17,24(sp)
  811b28:	3021883a 	mov	r16,r6
  811b2c:	202d883a 	mov	r22,r4
  811b30:	2829883a 	mov	r20,r5
  811b34:	38002b1e 	bne	r7,zero,811be4 <__umoddi3+0xe8>
  811b38:	29805036 	bltu	r5,r6,811c7c <__umoddi3+0x180>
  811b3c:	30008a26 	beq	r6,zero,811d68 <__umoddi3+0x26c>
  811b40:	00bfffd4 	movui	r2,65535
  811b44:	14008236 	bltu	r2,r16,811d50 <__umoddi3+0x254>
  811b48:	00803fc4 	movi	r2,255
  811b4c:	14013636 	bltu	r2,r16,812028 <__umoddi3+0x52c>
  811b50:	000b883a 	mov	r5,zero
  811b54:	0005883a 	mov	r2,zero
  811b58:	8084d83a 	srl	r2,r16,r2
  811b5c:	010020b4 	movhi	r4,130
  811b60:	21345604 	addi	r4,r4,-11944
  811b64:	01800804 	movi	r6,32
  811b68:	1105883a 	add	r2,r2,r4
  811b6c:	10c00003 	ldbu	r3,0(r2)
  811b70:	28c7883a 	add	r3,r5,r3
  811b74:	30efc83a 	sub	r23,r6,r3
  811b78:	b800941e 	bne	r23,zero,811dcc <__umoddi3+0x2d0>
  811b7c:	802ad43a 	srli	r21,r16,16
  811b80:	a423c83a 	sub	r17,r20,r16
  811b84:	0039883a 	mov	fp,zero
  811b88:	853fffcc 	andi	r20,r16,65535
  811b8c:	8809883a 	mov	r4,r17
  811b90:	a80b883a 	mov	r5,r21
  811b94:	080983c0 	call	80983c <__udivsi3>
  811b98:	8809883a 	mov	r4,r17
  811b9c:	a80b883a 	mov	r5,r21
  811ba0:	a0a3383a 	mul	r17,r20,r2
  811ba4:	08098440 	call	809844 <__umodsi3>
  811ba8:	1004943a 	slli	r2,r2,16
  811bac:	b006d43a 	srli	r3,r22,16
  811bb0:	10c4b03a 	or	r2,r2,r3
  811bb4:	1440032e 	bgeu	r2,r17,811bc4 <__umoddi3+0xc8>
  811bb8:	1405883a 	add	r2,r2,r16
  811bbc:	14000136 	bltu	r2,r16,811bc4 <__umoddi3+0xc8>
  811bc0:	14413536 	bltu	r2,r17,812098 <__umoddi3+0x59c>
  811bc4:	1463c83a 	sub	r17,r2,r17
  811bc8:	8809883a 	mov	r4,r17
  811bcc:	a80b883a 	mov	r5,r21
  811bd0:	080983c0 	call	80983c <__udivsi3>
  811bd4:	8809883a 	mov	r4,r17
  811bd8:	a0a3383a 	mul	r17,r20,r2
  811bdc:	a80b883a 	mov	r5,r21
  811be0:	00004d06 	br	811d18 <__umoddi3+0x21c>
  811be4:	380d883a 	mov	r6,r7
  811be8:	29c0102e 	bgeu	r5,r7,811c2c <__umoddi3+0x130>
  811bec:	2011883a 	mov	r8,r4
  811bf0:	2813883a 	mov	r9,r5
  811bf4:	4005883a 	mov	r2,r8
  811bf8:	4807883a 	mov	r3,r9
  811bfc:	dfc00e17 	ldw	ra,56(sp)
  811c00:	df000d17 	ldw	fp,52(sp)
  811c04:	ddc00c17 	ldw	r23,48(sp)
  811c08:	dd800b17 	ldw	r22,44(sp)
  811c0c:	dd400a17 	ldw	r21,40(sp)
  811c10:	dd000917 	ldw	r20,36(sp)
  811c14:	dcc00817 	ldw	r19,32(sp)
  811c18:	dc800717 	ldw	r18,28(sp)
  811c1c:	dc400617 	ldw	r17,24(sp)
  811c20:	dc000517 	ldw	r16,20(sp)
  811c24:	dec00f04 	addi	sp,sp,60
  811c28:	f800283a 	ret
  811c2c:	00bfffd4 	movui	r2,65535
  811c30:	11c05a36 	bltu	r2,r7,811d9c <__umoddi3+0x2a0>
  811c34:	00803fc4 	movi	r2,255
  811c38:	11c0fe36 	bltu	r2,r7,812034 <__umoddi3+0x538>
  811c3c:	000b883a 	mov	r5,zero
  811c40:	0005883a 	mov	r2,zero
  811c44:	3084d83a 	srl	r2,r6,r2
  811c48:	010020b4 	movhi	r4,130
  811c4c:	21345604 	addi	r4,r4,-11944
  811c50:	01c00804 	movi	r7,32
  811c54:	1105883a 	add	r2,r2,r4
  811c58:	10c00003 	ldbu	r3,0(r2)
  811c5c:	28c7883a 	add	r3,r5,r3
  811c60:	38ebc83a 	sub	r21,r7,r3
  811c64:	a800851e 	bne	r21,zero,811e7c <__umoddi3+0x380>
  811c68:	35005236 	bltu	r6,r20,811db4 <__umoddi3+0x2b8>
  811c6c:	b400512e 	bgeu	r22,r16,811db4 <__umoddi3+0x2b8>
  811c70:	b011883a 	mov	r8,r22
  811c74:	a013883a 	mov	r9,r20
  811c78:	003fde06 	br	811bf4 <__umoddi3+0xf8>
  811c7c:	00bfffd4 	movui	r2,65535
  811c80:	11804036 	bltu	r2,r6,811d84 <__umoddi3+0x288>
  811c84:	00803fc4 	movi	r2,255
  811c88:	1180ed36 	bltu	r2,r6,812040 <__umoddi3+0x544>
  811c8c:	000b883a 	mov	r5,zero
  811c90:	0005883a 	mov	r2,zero
  811c94:	8084d83a 	srl	r2,r16,r2
  811c98:	010020b4 	movhi	r4,130
  811c9c:	21345604 	addi	r4,r4,-11944
  811ca0:	01800804 	movi	r6,32
  811ca4:	1105883a 	add	r2,r2,r4
  811ca8:	10c00003 	ldbu	r3,0(r2)
  811cac:	28c7883a 	add	r3,r5,r3
  811cb0:	30c7c83a 	sub	r3,r6,r3
  811cb4:	1800bf1e 	bne	r3,zero,811fb4 <__umoddi3+0x4b8>
  811cb8:	0039883a 	mov	fp,zero
  811cbc:	802ad43a 	srli	r21,r16,16
  811cc0:	a009883a 	mov	r4,r20
  811cc4:	85ffffcc 	andi	r23,r16,65535
  811cc8:	a80b883a 	mov	r5,r21
  811ccc:	080983c0 	call	80983c <__udivsi3>
  811cd0:	a009883a 	mov	r4,r20
  811cd4:	a80b883a 	mov	r5,r21
  811cd8:	b8a3383a 	mul	r17,r23,r2
  811cdc:	08098440 	call	809844 <__umodsi3>
  811ce0:	1004943a 	slli	r2,r2,16
  811ce4:	b006d43a 	srli	r3,r22,16
  811ce8:	10c4b03a 	or	r2,r2,r3
  811cec:	1440032e 	bgeu	r2,r17,811cfc <__umoddi3+0x200>
  811cf0:	1405883a 	add	r2,r2,r16
  811cf4:	14000136 	bltu	r2,r16,811cfc <__umoddi3+0x200>
  811cf8:	1440e536 	bltu	r2,r17,812090 <__umoddi3+0x594>
  811cfc:	1463c83a 	sub	r17,r2,r17
  811d00:	8809883a 	mov	r4,r17
  811d04:	a80b883a 	mov	r5,r21
  811d08:	080983c0 	call	80983c <__udivsi3>
  811d0c:	8809883a 	mov	r4,r17
  811d10:	b8a3383a 	mul	r17,r23,r2
  811d14:	a80b883a 	mov	r5,r21
  811d18:	08098440 	call	809844 <__umodsi3>
  811d1c:	1004943a 	slli	r2,r2,16
  811d20:	b0ffffcc 	andi	r3,r22,65535
  811d24:	10c4b03a 	or	r2,r2,r3
  811d28:	1440042e 	bgeu	r2,r17,811d3c <__umoddi3+0x240>
  811d2c:	1405883a 	add	r2,r2,r16
  811d30:	14000236 	bltu	r2,r16,811d3c <__umoddi3+0x240>
  811d34:	1440012e 	bgeu	r2,r17,811d3c <__umoddi3+0x240>
  811d38:	1405883a 	add	r2,r2,r16
  811d3c:	1445c83a 	sub	r2,r2,r17
  811d40:	1724d83a 	srl	r18,r2,fp
  811d44:	0013883a 	mov	r9,zero
  811d48:	9011883a 	mov	r8,r18
  811d4c:	003fa906 	br	811bf4 <__umoddi3+0xf8>
  811d50:	00804034 	movhi	r2,256
  811d54:	10bfffc4 	addi	r2,r2,-1
  811d58:	1400b036 	bltu	r2,r16,81201c <__umoddi3+0x520>
  811d5c:	01400404 	movi	r5,16
  811d60:	2805883a 	mov	r2,r5
  811d64:	003f7c06 	br	811b58 <__umoddi3+0x5c>
  811d68:	01000044 	movi	r4,1
  811d6c:	000b883a 	mov	r5,zero
  811d70:	080983c0 	call	80983c <__udivsi3>
  811d74:	1021883a 	mov	r16,r2
  811d78:	00bfffd4 	movui	r2,65535
  811d7c:	143ff436 	bltu	r2,r16,811d50 <__umoddi3+0x254>
  811d80:	003f7106 	br	811b48 <__umoddi3+0x4c>
  811d84:	00804034 	movhi	r2,256
  811d88:	10bfffc4 	addi	r2,r2,-1
  811d8c:	1180af36 	bltu	r2,r6,81204c <__umoddi3+0x550>
  811d90:	01400404 	movi	r5,16
  811d94:	2805883a 	mov	r2,r5
  811d98:	003fbe06 	br	811c94 <__umoddi3+0x198>
  811d9c:	00804034 	movhi	r2,256
  811da0:	10bfffc4 	addi	r2,r2,-1
  811da4:	11c0ac36 	bltu	r2,r7,812058 <__umoddi3+0x55c>
  811da8:	01400404 	movi	r5,16
  811dac:	2805883a 	mov	r2,r5
  811db0:	003fa406 	br	811c44 <__umoddi3+0x148>
  811db4:	b409c83a 	sub	r4,r22,r16
  811db8:	b105803a 	cmpltu	r2,r22,r4
  811dbc:	a187c83a 	sub	r3,r20,r6
  811dc0:	18a9c83a 	sub	r20,r3,r2
  811dc4:	202d883a 	mov	r22,r4
  811dc8:	003fa906 	br	811c70 <__umoddi3+0x174>
  811dcc:	85e0983a 	sll	r16,r16,r23
  811dd0:	35c5c83a 	sub	r2,r6,r23
  811dd4:	a0a2d83a 	srl	r17,r20,r2
  811dd8:	802ad43a 	srli	r21,r16,16
  811ddc:	b084d83a 	srl	r2,r22,r2
  811de0:	a5c6983a 	sll	r3,r20,r23
  811de4:	8809883a 	mov	r4,r17
  811de8:	a80b883a 	mov	r5,r21
  811dec:	1886b03a 	or	r3,r3,r2
  811df0:	d8c00115 	stw	r3,4(sp)
  811df4:	853fffcc 	andi	r20,r16,65535
  811df8:	080983c0 	call	80983c <__udivsi3>
  811dfc:	8809883a 	mov	r4,r17
  811e00:	a80b883a 	mov	r5,r21
  811e04:	a0a3383a 	mul	r17,r20,r2
  811e08:	08098440 	call	809844 <__umodsi3>
  811e0c:	d9000117 	ldw	r4,4(sp)
  811e10:	1004943a 	slli	r2,r2,16
  811e14:	b839883a 	mov	fp,r23
  811e18:	2006d43a 	srli	r3,r4,16
  811e1c:	10c4b03a 	or	r2,r2,r3
  811e20:	1440022e 	bgeu	r2,r17,811e2c <__umoddi3+0x330>
  811e24:	1405883a 	add	r2,r2,r16
  811e28:	1400962e 	bgeu	r2,r16,812084 <__umoddi3+0x588>
  811e2c:	1463c83a 	sub	r17,r2,r17
  811e30:	8809883a 	mov	r4,r17
  811e34:	a80b883a 	mov	r5,r21
  811e38:	080983c0 	call	80983c <__udivsi3>
  811e3c:	8809883a 	mov	r4,r17
  811e40:	a80b883a 	mov	r5,r21
  811e44:	a0a3383a 	mul	r17,r20,r2
  811e48:	08098440 	call	809844 <__umodsi3>
  811e4c:	d9400117 	ldw	r5,4(sp)
  811e50:	1004943a 	slli	r2,r2,16
  811e54:	28ffffcc 	andi	r3,r5,65535
  811e58:	10c4b03a 	or	r2,r2,r3
  811e5c:	1440042e 	bgeu	r2,r17,811e70 <__umoddi3+0x374>
  811e60:	1405883a 	add	r2,r2,r16
  811e64:	14000236 	bltu	r2,r16,811e70 <__umoddi3+0x374>
  811e68:	1440012e 	bgeu	r2,r17,811e70 <__umoddi3+0x374>
  811e6c:	1405883a 	add	r2,r2,r16
  811e70:	b5ec983a 	sll	r22,r22,r23
  811e74:	1463c83a 	sub	r17,r2,r17
  811e78:	003f4406 	br	811b8c <__umoddi3+0x90>
  811e7c:	3d4fc83a 	sub	r7,r7,r21
  811e80:	3546983a 	sll	r3,r6,r21
  811e84:	81c4d83a 	srl	r2,r16,r7
  811e88:	a1e2d83a 	srl	r17,r20,r7
  811e8c:	a54c983a 	sll	r6,r20,r21
  811e90:	18aeb03a 	or	r23,r3,r2
  811e94:	b828d43a 	srli	r20,r23,16
  811e98:	b1c4d83a 	srl	r2,r22,r7
  811e9c:	8809883a 	mov	r4,r17
  811ea0:	a00b883a 	mov	r5,r20
  811ea4:	308cb03a 	or	r6,r6,r2
  811ea8:	d9c00315 	stw	r7,12(sp)
  811eac:	d9800215 	stw	r6,8(sp)
  811eb0:	080983c0 	call	80983c <__udivsi3>
  811eb4:	8809883a 	mov	r4,r17
  811eb8:	a00b883a 	mov	r5,r20
  811ebc:	1039883a 	mov	fp,r2
  811ec0:	08098440 	call	809844 <__umodsi3>
  811ec4:	b8ffffcc 	andi	r3,r23,65535
  811ec8:	d8c00415 	stw	r3,16(sp)
  811ecc:	d9000217 	ldw	r4,8(sp)
  811ed0:	d9400417 	ldw	r5,16(sp)
  811ed4:	1004943a 	slli	r2,r2,16
  811ed8:	2006d43a 	srli	r3,r4,16
  811edc:	8560983a 	sll	r16,r16,r21
  811ee0:	2f23383a 	mul	r17,r5,fp
  811ee4:	10c4b03a 	or	r2,r2,r3
  811ee8:	dc000015 	stw	r16,0(sp)
  811eec:	b56c983a 	sll	r22,r22,r21
  811ef0:	1440032e 	bgeu	r2,r17,811f00 <__umoddi3+0x404>
  811ef4:	15c5883a 	add	r2,r2,r23
  811ef8:	e73fffc4 	addi	fp,fp,-1
  811efc:	15c05d2e 	bgeu	r2,r23,812074 <__umoddi3+0x578>
  811f00:	1463c83a 	sub	r17,r2,r17
  811f04:	8809883a 	mov	r4,r17
  811f08:	a00b883a 	mov	r5,r20
  811f0c:	080983c0 	call	80983c <__udivsi3>
  811f10:	8809883a 	mov	r4,r17
  811f14:	a00b883a 	mov	r5,r20
  811f18:	1021883a 	mov	r16,r2
  811f1c:	08098440 	call	809844 <__umodsi3>
  811f20:	d8c00417 	ldw	r3,16(sp)
  811f24:	d9000217 	ldw	r4,8(sp)
  811f28:	1004943a 	slli	r2,r2,16
  811f2c:	1c23383a 	mul	r17,r3,r16
  811f30:	20ffffcc 	andi	r3,r4,65535
  811f34:	10ceb03a 	or	r7,r2,r3
  811f38:	3c40032e 	bgeu	r7,r17,811f48 <__umoddi3+0x44c>
  811f3c:	3dcf883a 	add	r7,r7,r23
  811f40:	843fffc4 	addi	r16,r16,-1
  811f44:	3dc0472e 	bgeu	r7,r23,812064 <__umoddi3+0x568>
  811f48:	e004943a 	slli	r2,fp,16
  811f4c:	d9400017 	ldw	r5,0(sp)
  811f50:	3c4fc83a 	sub	r7,r7,r17
  811f54:	8084b03a 	or	r2,r16,r2
  811f58:	28ffffcc 	andi	r3,r5,65535
  811f5c:	280cd43a 	srli	r6,r5,16
  811f60:	100ad43a 	srli	r5,r2,16
  811f64:	10bfffcc 	andi	r2,r2,65535
  811f68:	10d1383a 	mul	r8,r2,r3
  811f6c:	28c7383a 	mul	r3,r5,r3
  811f70:	1185383a 	mul	r2,r2,r6
  811f74:	4008d43a 	srli	r4,r8,16
  811f78:	298b383a 	mul	r5,r5,r6
  811f7c:	10c5883a 	add	r2,r2,r3
  811f80:	2089883a 	add	r4,r4,r2
  811f84:	20c0022e 	bgeu	r4,r3,811f90 <__umoddi3+0x494>
  811f88:	00800074 	movhi	r2,1
  811f8c:	288b883a 	add	r5,r5,r2
  811f90:	2004d43a 	srli	r2,r4,16
  811f94:	2008943a 	slli	r4,r4,16
  811f98:	40ffffcc 	andi	r3,r8,65535
  811f9c:	288b883a 	add	r5,r5,r2
  811fa0:	20c9883a 	add	r4,r4,r3
  811fa4:	39400b36 	bltu	r7,r5,811fd4 <__umoddi3+0x4d8>
  811fa8:	39403d26 	beq	r7,r5,8120a0 <__umoddi3+0x5a4>
  811fac:	394bc83a 	sub	r5,r7,r5
  811fb0:	00000f06 	br	811ff0 <__umoddi3+0x4f4>
  811fb4:	30c5c83a 	sub	r2,r6,r3
  811fb8:	1839883a 	mov	fp,r3
  811fbc:	b084d83a 	srl	r2,r22,r2
  811fc0:	a0c6983a 	sll	r3,r20,r3
  811fc4:	8720983a 	sll	r16,r16,fp
  811fc8:	b72c983a 	sll	r22,r22,fp
  811fcc:	18a8b03a 	or	r20,r3,r2
  811fd0:	003f3a06 	br	811cbc <__umoddi3+0x1c0>
  811fd4:	d8c00017 	ldw	r3,0(sp)
  811fd8:	20c5c83a 	sub	r2,r4,r3
  811fdc:	2089803a 	cmpltu	r4,r4,r2
  811fe0:	2dc7c83a 	sub	r3,r5,r23
  811fe4:	1907c83a 	sub	r3,r3,r4
  811fe8:	38cbc83a 	sub	r5,r7,r3
  811fec:	1009883a 	mov	r4,r2
  811ff0:	b105c83a 	sub	r2,r22,r4
  811ff4:	b087803a 	cmpltu	r3,r22,r2
  811ff8:	28c7c83a 	sub	r3,r5,r3
  811ffc:	d9400317 	ldw	r5,12(sp)
  812000:	1544d83a 	srl	r2,r2,r21
  812004:	1948983a 	sll	r4,r3,r5
  812008:	1d46d83a 	srl	r3,r3,r21
  81200c:	20a4b03a 	or	r18,r4,r2
  812010:	9011883a 	mov	r8,r18
  812014:	1813883a 	mov	r9,r3
  812018:	003ef606 	br	811bf4 <__umoddi3+0xf8>
  81201c:	01400604 	movi	r5,24
  812020:	2805883a 	mov	r2,r5
  812024:	003ecc06 	br	811b58 <__umoddi3+0x5c>
  812028:	01400204 	movi	r5,8
  81202c:	2805883a 	mov	r2,r5
  812030:	003ec906 	br	811b58 <__umoddi3+0x5c>
  812034:	01400204 	movi	r5,8
  812038:	2805883a 	mov	r2,r5
  81203c:	003f0106 	br	811c44 <__umoddi3+0x148>
  812040:	01400204 	movi	r5,8
  812044:	2805883a 	mov	r2,r5
  812048:	003f1206 	br	811c94 <__umoddi3+0x198>
  81204c:	01400604 	movi	r5,24
  812050:	2805883a 	mov	r2,r5
  812054:	003f0f06 	br	811c94 <__umoddi3+0x198>
  812058:	01400604 	movi	r5,24
  81205c:	2805883a 	mov	r2,r5
  812060:	003ef806 	br	811c44 <__umoddi3+0x148>
  812064:	3c7fb82e 	bgeu	r7,r17,811f48 <__umoddi3+0x44c>
  812068:	843fffc4 	addi	r16,r16,-1
  81206c:	3dcf883a 	add	r7,r7,r23
  812070:	003fb506 	br	811f48 <__umoddi3+0x44c>
  812074:	147fa22e 	bgeu	r2,r17,811f00 <__umoddi3+0x404>
  812078:	e73fffc4 	addi	fp,fp,-1
  81207c:	15c5883a 	add	r2,r2,r23
  812080:	003f9f06 	br	811f00 <__umoddi3+0x404>
  812084:	147f692e 	bgeu	r2,r17,811e2c <__umoddi3+0x330>
  812088:	1405883a 	add	r2,r2,r16
  81208c:	003f6706 	br	811e2c <__umoddi3+0x330>
  812090:	1405883a 	add	r2,r2,r16
  812094:	003f1906 	br	811cfc <__umoddi3+0x200>
  812098:	1405883a 	add	r2,r2,r16
  81209c:	003ec906 	br	811bc4 <__umoddi3+0xc8>
  8120a0:	b13fcc36 	bltu	r22,r4,811fd4 <__umoddi3+0x4d8>
  8120a4:	000b883a 	mov	r5,zero
  8120a8:	003fd106 	br	811ff0 <__umoddi3+0x4f4>

008120ac <__gedf2>:
  8120ac:	deffef04 	addi	sp,sp,-68
  8120b0:	dc400f15 	stw	r17,60(sp)
  8120b4:	dc400404 	addi	r17,sp,16
  8120b8:	2005883a 	mov	r2,r4
  8120bc:	2807883a 	mov	r3,r5
  8120c0:	dc000e15 	stw	r16,56(sp)
  8120c4:	d809883a 	mov	r4,sp
  8120c8:	880b883a 	mov	r5,r17
  8120cc:	dc000904 	addi	r16,sp,36
  8120d0:	d8c00115 	stw	r3,4(sp)
  8120d4:	d8800015 	stw	r2,0(sp)
  8120d8:	d9800215 	stw	r6,8(sp)
  8120dc:	dfc01015 	stw	ra,64(sp)
  8120e0:	d9c00315 	stw	r7,12(sp)
  8120e4:	0809ea00 	call	809ea0 <__unpack_d>
  8120e8:	d9000204 	addi	r4,sp,8
  8120ec:	800b883a 	mov	r5,r16
  8120f0:	0809ea00 	call	809ea0 <__unpack_d>
  8120f4:	d8800417 	ldw	r2,16(sp)
  8120f8:	00c00044 	movi	r3,1
  8120fc:	01bfffc4 	movi	r6,-1
  812100:	1880062e 	bgeu	r3,r2,81211c <__gedf2+0x70>
  812104:	d8800917 	ldw	r2,36(sp)
  812108:	8809883a 	mov	r4,r17
  81210c:	800b883a 	mov	r5,r16
  812110:	1880022e 	bgeu	r3,r2,81211c <__gedf2+0x70>
  812114:	0809fd80 	call	809fd8 <__fpcmp_parts_d>
  812118:	100d883a 	mov	r6,r2
  81211c:	3005883a 	mov	r2,r6
  812120:	dfc01017 	ldw	ra,64(sp)
  812124:	dc400f17 	ldw	r17,60(sp)
  812128:	dc000e17 	ldw	r16,56(sp)
  81212c:	dec01104 	addi	sp,sp,68
  812130:	f800283a 	ret

00812134 <__floatunsidf>:
  812134:	defff204 	addi	sp,sp,-56
  812138:	dfc00d15 	stw	ra,52(sp)
  81213c:	ddc00c15 	stw	r23,48(sp)
  812140:	dd800b15 	stw	r22,44(sp)
  812144:	dd400a15 	stw	r21,40(sp)
  812148:	dd000915 	stw	r20,36(sp)
  81214c:	dcc00815 	stw	r19,32(sp)
  812150:	dc800715 	stw	r18,28(sp)
  812154:	dc400615 	stw	r17,24(sp)
  812158:	dc000515 	stw	r16,20(sp)
  81215c:	d8000115 	stw	zero,4(sp)
  812160:	20000f1e 	bne	r4,zero,8121a0 <__floatunsidf+0x6c>
  812164:	00800084 	movi	r2,2
  812168:	d8800015 	stw	r2,0(sp)
  81216c:	d809883a 	mov	r4,sp
  812170:	0809b8c0 	call	809b8c <__pack_d>
  812174:	dfc00d17 	ldw	ra,52(sp)
  812178:	ddc00c17 	ldw	r23,48(sp)
  81217c:	dd800b17 	ldw	r22,44(sp)
  812180:	dd400a17 	ldw	r21,40(sp)
  812184:	dd000917 	ldw	r20,36(sp)
  812188:	dcc00817 	ldw	r19,32(sp)
  81218c:	dc800717 	ldw	r18,28(sp)
  812190:	dc400617 	ldw	r17,24(sp)
  812194:	dc000517 	ldw	r16,20(sp)
  812198:	dec00e04 	addi	sp,sp,56
  81219c:	f800283a 	ret
  8121a0:	008000c4 	movi	r2,3
  8121a4:	00c00f04 	movi	r3,60
  8121a8:	002f883a 	mov	r23,zero
  8121ac:	202d883a 	mov	r22,r4
  8121b0:	d8800015 	stw	r2,0(sp)
  8121b4:	d8c00215 	stw	r3,8(sp)
  8121b8:	d9000315 	stw	r4,12(sp)
  8121bc:	ddc00415 	stw	r23,16(sp)
  8121c0:	08098e40 	call	8098e4 <__clzsi2>
  8121c4:	12400744 	addi	r9,r2,29
  8121c8:	48000b16 	blt	r9,zero,8121f8 <__floatunsidf+0xc4>
  8121cc:	483fe726 	beq	r9,zero,81216c <__floatunsidf+0x38>
  8121d0:	10bfff44 	addi	r2,r2,-3
  8121d4:	10002e16 	blt	r2,zero,812290 <__floatunsidf+0x15c>
  8121d8:	b0a2983a 	sll	r17,r22,r2
  8121dc:	0021883a 	mov	r16,zero
  8121e0:	d8800217 	ldw	r2,8(sp)
  8121e4:	dc400415 	stw	r17,16(sp)
  8121e8:	dc000315 	stw	r16,12(sp)
  8121ec:	1245c83a 	sub	r2,r2,r9
  8121f0:	d8800215 	stw	r2,8(sp)
  8121f4:	003fdd06 	br	81216c <__floatunsidf+0x38>
  8121f8:	0255c83a 	sub	r10,zero,r9
  8121fc:	51bff804 	addi	r6,r10,-32
  812200:	30001b16 	blt	r6,zero,812270 <__floatunsidf+0x13c>
  812204:	b9a8d83a 	srl	r20,r23,r6
  812208:	002b883a 	mov	r21,zero
  81220c:	000f883a 	mov	r7,zero
  812210:	01000044 	movi	r4,1
  812214:	0011883a 	mov	r8,zero
  812218:	30002516 	blt	r6,zero,8122b0 <__floatunsidf+0x17c>
  81221c:	21a6983a 	sll	r19,r4,r6
  812220:	0025883a 	mov	r18,zero
  812224:	00bfffc4 	movi	r2,-1
  812228:	9089883a 	add	r4,r18,r2
  81222c:	988b883a 	add	r5,r19,r2
  812230:	248d803a 	cmpltu	r6,r4,r18
  812234:	314b883a 	add	r5,r6,r5
  812238:	b104703a 	and	r2,r22,r4
  81223c:	b946703a 	and	r3,r23,r5
  812240:	10c4b03a 	or	r2,r2,r3
  812244:	10000226 	beq	r2,zero,812250 <__floatunsidf+0x11c>
  812248:	01c00044 	movi	r7,1
  81224c:	0011883a 	mov	r8,zero
  812250:	d9000217 	ldw	r4,8(sp)
  812254:	a1c4b03a 	or	r2,r20,r7
  812258:	aa06b03a 	or	r3,r21,r8
  81225c:	2249c83a 	sub	r4,r4,r9
  812260:	d8c00415 	stw	r3,16(sp)
  812264:	d9000215 	stw	r4,8(sp)
  812268:	d8800315 	stw	r2,12(sp)
  81226c:	003fbf06 	br	81216c <__floatunsidf+0x38>
  812270:	bdc7883a 	add	r3,r23,r23
  812274:	008007c4 	movi	r2,31
  812278:	1285c83a 	sub	r2,r2,r10
  81227c:	1886983a 	sll	r3,r3,r2
  812280:	b2a8d83a 	srl	r20,r22,r10
  812284:	baaad83a 	srl	r21,r23,r10
  812288:	1d28b03a 	or	r20,r3,r20
  81228c:	003fdf06 	br	81220c <__floatunsidf+0xd8>
  812290:	b006d07a 	srli	r3,r22,1
  812294:	008007c4 	movi	r2,31
  812298:	1245c83a 	sub	r2,r2,r9
  81229c:	1886d83a 	srl	r3,r3,r2
  8122a0:	ba62983a 	sll	r17,r23,r9
  8122a4:	b260983a 	sll	r16,r22,r9
  8122a8:	1c62b03a 	or	r17,r3,r17
  8122ac:	003fcc06 	br	8121e0 <__floatunsidf+0xac>
  8122b0:	2006d07a 	srli	r3,r4,1
  8122b4:	008007c4 	movi	r2,31
  8122b8:	1285c83a 	sub	r2,r2,r10
  8122bc:	18a6d83a 	srl	r19,r3,r2
  8122c0:	22a4983a 	sll	r18,r4,r10
  8122c4:	003fd706 	br	812224 <__floatunsidf+0xf0>

008122c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  8122c8:	defff804 	addi	sp,sp,-32
  8122cc:	dfc00715 	stw	ra,28(sp)
  8122d0:	df000615 	stw	fp,24(sp)
  8122d4:	df000604 	addi	fp,sp,24
  8122d8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  8122dc:	e0bffc17 	ldw	r2,-16(fp)
  8122e0:	1004803a 	cmplt	r2,r2,zero
  8122e4:	1000081e 	bne	r2,zero,812308 <close+0x40>
  8122e8:	e0bffc17 	ldw	r2,-16(fp)
  8122ec:	10800324 	muli	r2,r2,12
  8122f0:	1007883a 	mov	r3,r2
  8122f4:	008020b4 	movhi	r2,130
  8122f8:	10b76604 	addi	r2,r2,-8808
  8122fc:	1887883a 	add	r3,r3,r2
  812300:	e0ffff15 	stw	r3,-4(fp)
  812304:	00000106 	br	81230c <close+0x44>
  812308:	e03fff15 	stw	zero,-4(fp)
  81230c:	e0bfff17 	ldw	r2,-4(fp)
  812310:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  812314:	e0bffb17 	ldw	r2,-20(fp)
  812318:	1005003a 	cmpeq	r2,r2,zero
  81231c:	10001d1e 	bne	r2,zero,812394 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  812320:	e0bffb17 	ldw	r2,-20(fp)
  812324:	10800017 	ldw	r2,0(r2)
  812328:	10800417 	ldw	r2,16(r2)
  81232c:	1005003a 	cmpeq	r2,r2,zero
  812330:	1000071e 	bne	r2,zero,812350 <close+0x88>
  812334:	e0bffb17 	ldw	r2,-20(fp)
  812338:	10800017 	ldw	r2,0(r2)
  81233c:	10800417 	ldw	r2,16(r2)
  812340:	e13ffb17 	ldw	r4,-20(fp)
  812344:	103ee83a 	callr	r2
  812348:	e0bffe15 	stw	r2,-8(fp)
  81234c:	00000106 	br	812354 <close+0x8c>
  812350:	e03ffe15 	stw	zero,-8(fp)
  812354:	e0bffe17 	ldw	r2,-8(fp)
  812358:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  81235c:	e13ffc17 	ldw	r4,-16(fp)
  812360:	0812ee80 	call	812ee8 <alt_release_fd>
    if (rval < 0)
  812364:	e0bffa17 	ldw	r2,-24(fp)
  812368:	1004403a 	cmpge	r2,r2,zero
  81236c:	1000071e 	bne	r2,zero,81238c <close+0xc4>
    {
      ALT_ERRNO = -rval;
  812370:	08123c40 	call	8123c4 <alt_get_errno>
  812374:	e0fffa17 	ldw	r3,-24(fp)
  812378:	00c7c83a 	sub	r3,zero,r3
  81237c:	10c00015 	stw	r3,0(r2)
      return -1;
  812380:	00bfffc4 	movi	r2,-1
  812384:	e0bffd15 	stw	r2,-12(fp)
  812388:	00000806 	br	8123ac <close+0xe4>
    }
    return 0;
  81238c:	e03ffd15 	stw	zero,-12(fp)
  812390:	00000606 	br	8123ac <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  812394:	08123c40 	call	8123c4 <alt_get_errno>
  812398:	1007883a 	mov	r3,r2
  81239c:	00801444 	movi	r2,81
  8123a0:	18800015 	stw	r2,0(r3)
    return -1;
  8123a4:	00bfffc4 	movi	r2,-1
  8123a8:	e0bffd15 	stw	r2,-12(fp)
  8123ac:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  8123b0:	e037883a 	mov	sp,fp
  8123b4:	dfc00117 	ldw	ra,4(sp)
  8123b8:	df000017 	ldw	fp,0(sp)
  8123bc:	dec00204 	addi	sp,sp,8
  8123c0:	f800283a 	ret

008123c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8123c4:	defffd04 	addi	sp,sp,-12
  8123c8:	dfc00215 	stw	ra,8(sp)
  8123cc:	df000115 	stw	fp,4(sp)
  8123d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8123d4:	008020b4 	movhi	r2,130
  8123d8:	10bc4404 	addi	r2,r2,-3824
  8123dc:	10800017 	ldw	r2,0(r2)
  8123e0:	1005003a 	cmpeq	r2,r2,zero
  8123e4:	1000061e 	bne	r2,zero,812400 <alt_get_errno+0x3c>
  8123e8:	008020b4 	movhi	r2,130
  8123ec:	10bc4404 	addi	r2,r2,-3824
  8123f0:	10800017 	ldw	r2,0(r2)
  8123f4:	103ee83a 	callr	r2
  8123f8:	e0bfff15 	stw	r2,-4(fp)
  8123fc:	00000306 	br	81240c <alt_get_errno+0x48>
  812400:	008020b4 	movhi	r2,130
  812404:	10837004 	addi	r2,r2,3520
  812408:	e0bfff15 	stw	r2,-4(fp)
  81240c:	e0bfff17 	ldw	r2,-4(fp)
}
  812410:	e037883a 	mov	sp,fp
  812414:	dfc00117 	ldw	ra,4(sp)
  812418:	df000017 	ldw	fp,0(sp)
  81241c:	dec00204 	addi	sp,sp,8
  812420:	f800283a 	ret

00812424 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  812424:	defffc04 	addi	sp,sp,-16
  812428:	df000315 	stw	fp,12(sp)
  81242c:	df000304 	addi	fp,sp,12
  812430:	e13ffd15 	stw	r4,-12(fp)
  812434:	e17ffe15 	stw	r5,-8(fp)
  812438:	e1bfff15 	stw	r6,-4(fp)
  return len;
  81243c:	e0bfff17 	ldw	r2,-4(fp)
}
  812440:	e037883a 	mov	sp,fp
  812444:	df000017 	ldw	fp,0(sp)
  812448:	dec00104 	addi	sp,sp,4
  81244c:	f800283a 	ret

00812450 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  812450:	defff904 	addi	sp,sp,-28
  812454:	dfc00615 	stw	ra,24(sp)
  812458:	df000515 	stw	fp,20(sp)
  81245c:	df000504 	addi	fp,sp,20
  812460:	e13ffc15 	stw	r4,-16(fp)
  812464:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812468:	e0bffc17 	ldw	r2,-16(fp)
  81246c:	1004803a 	cmplt	r2,r2,zero
  812470:	1000081e 	bne	r2,zero,812494 <fstat+0x44>
  812474:	e0bffc17 	ldw	r2,-16(fp)
  812478:	10800324 	muli	r2,r2,12
  81247c:	1007883a 	mov	r3,r2
  812480:	008020b4 	movhi	r2,130
  812484:	10b76604 	addi	r2,r2,-8808
  812488:	1887883a 	add	r3,r3,r2
  81248c:	e0ffff15 	stw	r3,-4(fp)
  812490:	00000106 	br	812498 <fstat+0x48>
  812494:	e03fff15 	stw	zero,-4(fp)
  812498:	e0bfff17 	ldw	r2,-4(fp)
  81249c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8124a0:	e0bffb17 	ldw	r2,-20(fp)
  8124a4:	1005003a 	cmpeq	r2,r2,zero
  8124a8:	1000121e 	bne	r2,zero,8124f4 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8124ac:	e0bffb17 	ldw	r2,-20(fp)
  8124b0:	10800017 	ldw	r2,0(r2)
  8124b4:	10800817 	ldw	r2,32(r2)
  8124b8:	1005003a 	cmpeq	r2,r2,zero
  8124bc:	1000081e 	bne	r2,zero,8124e0 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  8124c0:	e0bffb17 	ldw	r2,-20(fp)
  8124c4:	10800017 	ldw	r2,0(r2)
  8124c8:	10800817 	ldw	r2,32(r2)
  8124cc:	e13ffb17 	ldw	r4,-20(fp)
  8124d0:	e17ffd17 	ldw	r5,-12(fp)
  8124d4:	103ee83a 	callr	r2
  8124d8:	e0bffe15 	stw	r2,-8(fp)
  8124dc:	00000b06 	br	81250c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  8124e0:	e0fffd17 	ldw	r3,-12(fp)
  8124e4:	00880004 	movi	r2,8192
  8124e8:	18800115 	stw	r2,4(r3)
      return 0;
  8124ec:	e03ffe15 	stw	zero,-8(fp)
  8124f0:	00000606 	br	81250c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8124f4:	08125240 	call	812524 <alt_get_errno>
  8124f8:	1007883a 	mov	r3,r2
  8124fc:	00801444 	movi	r2,81
  812500:	18800015 	stw	r2,0(r3)
    return -1;
  812504:	00bfffc4 	movi	r2,-1
  812508:	e0bffe15 	stw	r2,-8(fp)
  81250c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  812510:	e037883a 	mov	sp,fp
  812514:	dfc00117 	ldw	ra,4(sp)
  812518:	df000017 	ldw	fp,0(sp)
  81251c:	dec00204 	addi	sp,sp,8
  812520:	f800283a 	ret

00812524 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812524:	defffd04 	addi	sp,sp,-12
  812528:	dfc00215 	stw	ra,8(sp)
  81252c:	df000115 	stw	fp,4(sp)
  812530:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812534:	008020b4 	movhi	r2,130
  812538:	10bc4404 	addi	r2,r2,-3824
  81253c:	10800017 	ldw	r2,0(r2)
  812540:	1005003a 	cmpeq	r2,r2,zero
  812544:	1000061e 	bne	r2,zero,812560 <alt_get_errno+0x3c>
  812548:	008020b4 	movhi	r2,130
  81254c:	10bc4404 	addi	r2,r2,-3824
  812550:	10800017 	ldw	r2,0(r2)
  812554:	103ee83a 	callr	r2
  812558:	e0bfff15 	stw	r2,-4(fp)
  81255c:	00000306 	br	81256c <alt_get_errno+0x48>
  812560:	008020b4 	movhi	r2,130
  812564:	10837004 	addi	r2,r2,3520
  812568:	e0bfff15 	stw	r2,-4(fp)
  81256c:	e0bfff17 	ldw	r2,-4(fp)
}
  812570:	e037883a 	mov	sp,fp
  812574:	dfc00117 	ldw	ra,4(sp)
  812578:	df000017 	ldw	fp,0(sp)
  81257c:	dec00204 	addi	sp,sp,8
  812580:	f800283a 	ret

00812584 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
  812584:	defff504 	addi	sp,sp,-44
  812588:	dfc00a15 	stw	ra,40(sp)
  81258c:	df000915 	stw	fp,36(sp)
  812590:	dc800815 	stw	r18,32(sp)
  812594:	dc400715 	stw	r17,28(sp)
  812598:	dc000615 	stw	r16,24(sp)
  81259c:	df000604 	addi	fp,sp,24
  8125a0:	e13ffd15 	stw	r4,-12(fp)
  8125a4:	e17ffe15 	stw	r5,-8(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
  8125a8:	e0bffe17 	ldw	r2,-8(fp)
  8125ac:	e0bffc15 	stw	r2,-16(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8125b0:	008020b4 	movhi	r2,130
  8125b4:	10837d04 	addi	r2,r2,3572
  8125b8:	10800017 	ldw	r2,0(r2)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
  8125bc:	e0bffb15 	stw	r2,-20(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8125c0:	008020b4 	movhi	r2,130
  8125c4:	10837c04 	addi	r2,r2,3568
  8125c8:	10800017 	ldw	r2,0(r2)
  alt_u32 tick_rate = alt_ticks_per_second ();
  8125cc:	e0bffa15 	stw	r2,-24(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
  8125d0:	e0bffa17 	ldw	r2,-24(fp)
  8125d4:	1005003a 	cmpeq	r2,r2,zero
  8125d8:	1000661e 	bne	r2,zero,812774 <gettimeofday+0x1f0>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
  8125dc:	d0a74317 	ldw	r2,-25332(gp)
  8125e0:	1021883a 	mov	r16,r2
  8125e4:	e13ffb17 	ldw	r4,-20(fp)
  8125e8:	e17ffa17 	ldw	r5,-24(fp)
  8125ec:	080983c0 	call	80983c <__udivsi3>
  8125f0:	8085883a 	add	r2,r16,r2
  8125f4:	1007883a 	mov	r3,r2
  8125f8:	e0bffd17 	ldw	r2,-12(fp)
  8125fc:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
  812600:	008020b4 	movhi	r2,130
  812604:	10837704 	addi	r2,r2,3548
  812608:	10800017 	ldw	r2,0(r2)
  81260c:	1025883a 	mov	r18,r2
  812610:	e43ffb17 	ldw	r16,-20(fp)
  812614:	0023883a 	mov	r17,zero
  812618:	010003f4 	movhi	r4,15
  81261c:	21109004 	addi	r4,r4,16960
  812620:	e17ffa17 	ldw	r5,-24(fp)
  812624:	080983c0 	call	80983c <__udivsi3>
  812628:	1009883a 	mov	r4,r2
  81262c:	2005883a 	mov	r2,r4
  812630:	0007883a 	mov	r3,zero
  812634:	8009883a 	mov	r4,r16
  812638:	880b883a 	mov	r5,r17
  81263c:	100d883a 	mov	r6,r2
  812640:	180f883a 	mov	r7,r3
  812644:	080984c0 	call	80984c <__muldi3>
  812648:	1009883a 	mov	r4,r2
  81264c:	180b883a 	mov	r5,r3
  812650:	2005883a 	mov	r2,r4
  812654:	2807883a 	mov	r3,r5
  812658:	1009883a 	mov	r4,r2
  81265c:	180b883a 	mov	r5,r3
  812660:	018003f4 	movhi	r6,15
  812664:	31909004 	addi	r6,r6,16960
  812668:	000f883a 	mov	r7,zero
  81266c:	0811afc0 	call	811afc <__umoddi3>
  812670:	1009883a 	mov	r4,r2
  812674:	180b883a 	mov	r5,r3
  812678:	2005883a 	mov	r2,r4
  81267c:	2807883a 	mov	r3,r5
  812680:	9085883a 	add	r2,r18,r2
  812684:	1007883a 	mov	r3,r2
  812688:	e0bffd17 	ldw	r2,-12(fp)
  81268c:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
  812690:	00001506 	br	8126e8 <gettimeofday+0x164>
      if (ptimeval->tv_sec <= 0)
  812694:	e0bffd17 	ldw	r2,-12(fp)
  812698:	10800017 	ldw	r2,0(r2)
  81269c:	10800048 	cmpgei	r2,r2,1
  8126a0:	1000051e 	bne	r2,zero,8126b8 <gettimeofday+0x134>
      {
          ptimeval->tv_sec = 0;
  8126a4:	e0bffd17 	ldw	r2,-12(fp)
  8126a8:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
  8126ac:	e0bffd17 	ldw	r2,-12(fp)
  8126b0:	10000115 	stw	zero,4(r2)
          break;
  8126b4:	00001d06 	br	81272c <gettimeofday+0x1a8>
      }
      else
      {
          ptimeval->tv_sec--;
  8126b8:	e0bffd17 	ldw	r2,-12(fp)
  8126bc:	10800017 	ldw	r2,0(r2)
  8126c0:	10ffffc4 	addi	r3,r2,-1
  8126c4:	e0bffd17 	ldw	r2,-12(fp)
  8126c8:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
  8126cc:	e0bffd17 	ldw	r2,-12(fp)
  8126d0:	10c00117 	ldw	r3,4(r2)
  8126d4:	008003f4 	movhi	r2,15
  8126d8:	10909004 	addi	r2,r2,16960
  8126dc:	1887883a 	add	r3,r3,r2
  8126e0:	e0bffd17 	ldw	r2,-12(fp)
  8126e4:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
  8126e8:	e0bffd17 	ldw	r2,-12(fp)
  8126ec:	10800117 	ldw	r2,4(r2)
  8126f0:	1004803a 	cmplt	r2,r2,zero
  8126f4:	103fe71e 	bne	r2,zero,812694 <gettimeofday+0x110>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
  8126f8:	00000c06 	br	81272c <gettimeofday+0x1a8>
      ptimeval->tv_sec++;
  8126fc:	e0bffd17 	ldw	r2,-12(fp)
  812700:	10800017 	ldw	r2,0(r2)
  812704:	10c00044 	addi	r3,r2,1
  812708:	e0bffd17 	ldw	r2,-12(fp)
  81270c:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
  812710:	e0bffd17 	ldw	r2,-12(fp)
  812714:	10c00117 	ldw	r3,4(r2)
  812718:	00bffc74 	movhi	r2,65521
  81271c:	10af7004 	addi	r2,r2,-16960
  812720:	1887883a 	add	r3,r3,r2
  812724:	e0bffd17 	ldw	r2,-12(fp)
  812728:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
  81272c:	e0bffd17 	ldw	r2,-12(fp)
  812730:	10c00117 	ldw	r3,4(r2)
  812734:	008003f4 	movhi	r2,15
  812738:	10908fc4 	addi	r2,r2,16959
  81273c:	10ffef16 	blt	r2,r3,8126fc <gettimeofday+0x178>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
  812740:	e0bffc17 	ldw	r2,-16(fp)
  812744:	1005003a 	cmpeq	r2,r2,zero
  812748:	1000081e 	bne	r2,zero,81276c <gettimeofday+0x1e8>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
  81274c:	d0e74117 	ldw	r3,-25340(gp)
  812750:	e0bffc17 	ldw	r2,-16(fp)
  812754:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
  812758:	008020b4 	movhi	r2,130
  81275c:	10837504 	addi	r2,r2,3540
  812760:	10c00017 	ldw	r3,0(r2)
  812764:	e0bffc17 	ldw	r2,-16(fp)
  812768:	10c00115 	stw	r3,4(r2)
    }

    return 0;
  81276c:	e03fff15 	stw	zero,-4(fp)
  812770:	00000206 	br	81277c <gettimeofday+0x1f8>
  }

  return -ENOTSUP;
  812774:	00bfde84 	movi	r2,-134
  812778:	e0bfff15 	stw	r2,-4(fp)
  81277c:	e0bfff17 	ldw	r2,-4(fp)
}
  812780:	e037883a 	mov	sp,fp
  812784:	dfc00417 	ldw	ra,16(sp)
  812788:	df000317 	ldw	fp,12(sp)
  81278c:	dc800217 	ldw	r18,8(sp)
  812790:	dc400117 	ldw	r17,4(sp)
  812794:	dc000017 	ldw	r16,0(sp)
  812798:	dec00504 	addi	sp,sp,20
  81279c:	f800283a 	ret

008127a0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  8127a0:	deffef04 	addi	sp,sp,-68
  8127a4:	df001015 	stw	fp,64(sp)
  8127a8:	df001004 	addi	fp,sp,64
  8127ac:	e13ffc15 	stw	r4,-16(fp)
  8127b0:	e17ffd15 	stw	r5,-12(fp)
  8127b4:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  8127b8:	00bffa84 	movi	r2,-22
  8127bc:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8127c0:	e0bffc17 	ldw	r2,-16(fp)
  8127c4:	10800828 	cmpgeui	r2,r2,32
  8127c8:	1000601e 	bne	r2,zero,81294c <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8127cc:	0005303a 	rdctl	r2,status
  8127d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8127d4:	e0fff917 	ldw	r3,-28(fp)
  8127d8:	00bfff84 	movi	r2,-2
  8127dc:	1884703a 	and	r2,r3,r2
  8127e0:	1001703a 	wrctl	status,r2
  
  return context;
  8127e4:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  8127e8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  8127ec:	e0bffc17 	ldw	r2,-16(fp)
  8127f0:	00c020f4 	movhi	r3,131
  8127f4:	18ec9d04 	addi	r3,r3,-19852
  8127f8:	100490fa 	slli	r2,r2,3
  8127fc:	10c7883a 	add	r3,r2,r3
  812800:	e0bffe17 	ldw	r2,-8(fp)
  812804:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  812808:	e0bffc17 	ldw	r2,-16(fp)
  81280c:	00c020f4 	movhi	r3,131
  812810:	18ec9d04 	addi	r3,r3,-19852
  812814:	100490fa 	slli	r2,r2,3
  812818:	10c5883a 	add	r2,r2,r3
  81281c:	10c00104 	addi	r3,r2,4
  812820:	e0bffd17 	ldw	r2,-12(fp)
  812824:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  812828:	e0bffe17 	ldw	r2,-8(fp)
  81282c:	1005003a 	cmpeq	r2,r2,zero
  812830:	1000201e 	bne	r2,zero,8128b4 <alt_irq_register+0x114>
  812834:	e0bffc17 	ldw	r2,-16(fp)
  812838:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81283c:	0005303a 	rdctl	r2,status
  812840:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812844:	e0fff617 	ldw	r3,-40(fp)
  812848:	00bfff84 	movi	r2,-2
  81284c:	1884703a 	and	r2,r3,r2
  812850:	1001703a 	wrctl	status,r2
  
  return context;
  812854:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  812858:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  81285c:	e0fff717 	ldw	r3,-36(fp)
  812860:	00800044 	movi	r2,1
  812864:	10c4983a 	sll	r2,r2,r3
  812868:	1007883a 	mov	r3,r2
  81286c:	008020b4 	movhi	r2,130
  812870:	10837804 	addi	r2,r2,3552
  812874:	10800017 	ldw	r2,0(r2)
  812878:	1886b03a 	or	r3,r3,r2
  81287c:	008020b4 	movhi	r2,130
  812880:	10837804 	addi	r2,r2,3552
  812884:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  812888:	008020b4 	movhi	r2,130
  81288c:	10837804 	addi	r2,r2,3552
  812890:	10800017 	ldw	r2,0(r2)
  812894:	100170fa 	wrctl	ienable,r2
  812898:	e0bff817 	ldw	r2,-32(fp)
  81289c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8128a0:	e0bff517 	ldw	r2,-44(fp)
  8128a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8128a8:	0005883a 	mov	r2,zero
  8128ac:	e0bfff15 	stw	r2,-4(fp)
  8128b0:	00002006 	br	812934 <alt_irq_register+0x194>
  8128b4:	e0bffc17 	ldw	r2,-16(fp)
  8128b8:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8128bc:	0005303a 	rdctl	r2,status
  8128c0:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8128c4:	e0fff217 	ldw	r3,-56(fp)
  8128c8:	00bfff84 	movi	r2,-2
  8128cc:	1884703a 	and	r2,r3,r2
  8128d0:	1001703a 	wrctl	status,r2
  
  return context;
  8128d4:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8128d8:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  8128dc:	e0fff317 	ldw	r3,-52(fp)
  8128e0:	00800044 	movi	r2,1
  8128e4:	10c4983a 	sll	r2,r2,r3
  8128e8:	0084303a 	nor	r2,zero,r2
  8128ec:	1007883a 	mov	r3,r2
  8128f0:	008020b4 	movhi	r2,130
  8128f4:	10837804 	addi	r2,r2,3552
  8128f8:	10800017 	ldw	r2,0(r2)
  8128fc:	1886703a 	and	r3,r3,r2
  812900:	008020b4 	movhi	r2,130
  812904:	10837804 	addi	r2,r2,3552
  812908:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81290c:	008020b4 	movhi	r2,130
  812910:	10837804 	addi	r2,r2,3552
  812914:	10800017 	ldw	r2,0(r2)
  812918:	100170fa 	wrctl	ienable,r2
  81291c:	e0bff417 	ldw	r2,-48(fp)
  812920:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812924:	e0bff117 	ldw	r2,-60(fp)
  812928:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81292c:	0005883a 	mov	r2,zero
  812930:	e0bfff15 	stw	r2,-4(fp)
  812934:	e0bfff17 	ldw	r2,-4(fp)
  812938:	e0bffb15 	stw	r2,-20(fp)
  81293c:	e0bffa17 	ldw	r2,-24(fp)
  812940:	e0bff015 	stw	r2,-64(fp)
  812944:	e0bff017 	ldw	r2,-64(fp)
  812948:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  81294c:	e0bffb17 	ldw	r2,-20(fp)
}
  812950:	e037883a 	mov	sp,fp
  812954:	df000017 	ldw	fp,0(sp)
  812958:	dec00104 	addi	sp,sp,4
  81295c:	f800283a 	ret

00812960 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  812960:	deffeb04 	addi	sp,sp,-84
  812964:	dfc01415 	stw	ra,80(sp)
  812968:	df001315 	stw	fp,76(sp)
  81296c:	df001304 	addi	fp,sp,76
  812970:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812974:	e0bffd17 	ldw	r2,-12(fp)
  812978:	1004803a 	cmplt	r2,r2,zero
  81297c:	1000081e 	bne	r2,zero,8129a0 <isatty+0x40>
  812980:	e0bffd17 	ldw	r2,-12(fp)
  812984:	10800324 	muli	r2,r2,12
  812988:	1007883a 	mov	r3,r2
  81298c:	008020b4 	movhi	r2,130
  812990:	10b76604 	addi	r2,r2,-8808
  812994:	1887883a 	add	r3,r3,r2
  812998:	e0ffff15 	stw	r3,-4(fp)
  81299c:	00000106 	br	8129a4 <isatty+0x44>
  8129a0:	e03fff15 	stw	zero,-4(fp)
  8129a4:	e0bfff17 	ldw	r2,-4(fp)
  8129a8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  8129ac:	e0bfed17 	ldw	r2,-76(fp)
  8129b0:	1005003a 	cmpeq	r2,r2,zero
  8129b4:	10000f1e 	bne	r2,zero,8129f4 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  8129b8:	e0bfed17 	ldw	r2,-76(fp)
  8129bc:	10800017 	ldw	r2,0(r2)
  8129c0:	10800817 	ldw	r2,32(r2)
  8129c4:	1004c03a 	cmpne	r2,r2,zero
  8129c8:	1000031e 	bne	r2,zero,8129d8 <isatty+0x78>
    {
      return 1;
  8129cc:	00800044 	movi	r2,1
  8129d0:	e0bffe15 	stw	r2,-8(fp)
  8129d4:	00000c06 	br	812a08 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  8129d8:	e17fee04 	addi	r5,fp,-72
  8129dc:	e13ffd17 	ldw	r4,-12(fp)
  8129e0:	08124500 	call	812450 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  8129e4:	e0bfef17 	ldw	r2,-68(fp)
  8129e8:	10880020 	cmpeqi	r2,r2,8192
  8129ec:	e0bffe15 	stw	r2,-8(fp)
  8129f0:	00000506 	br	812a08 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8129f4:	0812a200 	call	812a20 <alt_get_errno>
  8129f8:	1007883a 	mov	r3,r2
  8129fc:	00801444 	movi	r2,81
  812a00:	18800015 	stw	r2,0(r3)
    return 0;
  812a04:	e03ffe15 	stw	zero,-8(fp)
  812a08:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  812a0c:	e037883a 	mov	sp,fp
  812a10:	dfc00117 	ldw	ra,4(sp)
  812a14:	df000017 	ldw	fp,0(sp)
  812a18:	dec00204 	addi	sp,sp,8
  812a1c:	f800283a 	ret

00812a20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812a20:	defffd04 	addi	sp,sp,-12
  812a24:	dfc00215 	stw	ra,8(sp)
  812a28:	df000115 	stw	fp,4(sp)
  812a2c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812a30:	008020b4 	movhi	r2,130
  812a34:	10bc4404 	addi	r2,r2,-3824
  812a38:	10800017 	ldw	r2,0(r2)
  812a3c:	1005003a 	cmpeq	r2,r2,zero
  812a40:	1000061e 	bne	r2,zero,812a5c <alt_get_errno+0x3c>
  812a44:	008020b4 	movhi	r2,130
  812a48:	10bc4404 	addi	r2,r2,-3824
  812a4c:	10800017 	ldw	r2,0(r2)
  812a50:	103ee83a 	callr	r2
  812a54:	e0bfff15 	stw	r2,-4(fp)
  812a58:	00000306 	br	812a68 <alt_get_errno+0x48>
  812a5c:	008020b4 	movhi	r2,130
  812a60:	10837004 	addi	r2,r2,3520
  812a64:	e0bfff15 	stw	r2,-4(fp)
  812a68:	e0bfff17 	ldw	r2,-4(fp)
}
  812a6c:	e037883a 	mov	sp,fp
  812a70:	dfc00117 	ldw	ra,4(sp)
  812a74:	df000017 	ldw	fp,0(sp)
  812a78:	dec00204 	addi	sp,sp,8
  812a7c:	f800283a 	ret

00812a80 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  812a80:	defffe04 	addi	sp,sp,-8
  812a84:	dfc00115 	stw	ra,4(sp)
  812a88:	df000015 	stw	fp,0(sp)
  812a8c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  812a90:	010020b4 	movhi	r4,130
  812a94:	213c4904 	addi	r4,r4,-3804
  812a98:	014020b4 	movhi	r5,130
  812a9c:	29755704 	addi	r5,r5,-10916
  812aa0:	018020b4 	movhi	r6,130
  812aa4:	31bc4904 	addi	r6,r6,-3804
  812aa8:	0812b000 	call	812b00 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  812aac:	01002034 	movhi	r4,128
  812ab0:	21000804 	addi	r4,r4,32
  812ab4:	01402034 	movhi	r5,128
  812ab8:	29400804 	addi	r5,r5,32
  812abc:	01802034 	movhi	r6,128
  812ac0:	31806e04 	addi	r6,r6,440
  812ac4:	0812b000 	call	812b00 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  812ac8:	010020b4 	movhi	r4,130
  812acc:	2131ef04 	addi	r4,r4,-14404
  812ad0:	014020b4 	movhi	r5,130
  812ad4:	2971ef04 	addi	r5,r5,-14404
  812ad8:	018020b4 	movhi	r6,130
  812adc:	31b55704 	addi	r6,r6,-10916
  812ae0:	0812b000 	call	812b00 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  812ae4:	081b9d80 	call	81b9d8 <alt_dcache_flush_all>
  alt_icache_flush_all();
  812ae8:	081bc8c0 	call	81bc8c <alt_icache_flush_all>
}
  812aec:	e037883a 	mov	sp,fp
  812af0:	dfc00117 	ldw	ra,4(sp)
  812af4:	df000017 	ldw	fp,0(sp)
  812af8:	dec00204 	addi	sp,sp,8
  812afc:	f800283a 	ret

00812b00 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  812b00:	defffc04 	addi	sp,sp,-16
  812b04:	df000315 	stw	fp,12(sp)
  812b08:	df000304 	addi	fp,sp,12
  812b0c:	e13ffd15 	stw	r4,-12(fp)
  812b10:	e17ffe15 	stw	r5,-8(fp)
  812b14:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  812b18:	e0fffe17 	ldw	r3,-8(fp)
  812b1c:	e0bffd17 	ldw	r2,-12(fp)
  812b20:	18800e26 	beq	r3,r2,812b5c <alt_load_section+0x5c>
  {
    while( to != end )
  812b24:	00000a06 	br	812b50 <alt_load_section+0x50>
    {
      *to++ = *from++;
  812b28:	e0bffd17 	ldw	r2,-12(fp)
  812b2c:	10c00017 	ldw	r3,0(r2)
  812b30:	e0bffe17 	ldw	r2,-8(fp)
  812b34:	10c00015 	stw	r3,0(r2)
  812b38:	e0bffe17 	ldw	r2,-8(fp)
  812b3c:	10800104 	addi	r2,r2,4
  812b40:	e0bffe15 	stw	r2,-8(fp)
  812b44:	e0bffd17 	ldw	r2,-12(fp)
  812b48:	10800104 	addi	r2,r2,4
  812b4c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  812b50:	e0fffe17 	ldw	r3,-8(fp)
  812b54:	e0bfff17 	ldw	r2,-4(fp)
  812b58:	18bff31e 	bne	r3,r2,812b28 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  812b5c:	e037883a 	mov	sp,fp
  812b60:	df000017 	ldw	fp,0(sp)
  812b64:	dec00104 	addi	sp,sp,4
  812b68:	f800283a 	ret

00812b6c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  812b6c:	defff804 	addi	sp,sp,-32
  812b70:	dfc00715 	stw	ra,28(sp)
  812b74:	df000615 	stw	fp,24(sp)
  812b78:	df000604 	addi	fp,sp,24
  812b7c:	e13ffc15 	stw	r4,-16(fp)
  812b80:	e17ffd15 	stw	r5,-12(fp)
  812b84:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  812b88:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812b8c:	e0bffc17 	ldw	r2,-16(fp)
  812b90:	1004803a 	cmplt	r2,r2,zero
  812b94:	1000081e 	bne	r2,zero,812bb8 <lseek+0x4c>
  812b98:	e0bffc17 	ldw	r2,-16(fp)
  812b9c:	10800324 	muli	r2,r2,12
  812ba0:	1007883a 	mov	r3,r2
  812ba4:	008020b4 	movhi	r2,130
  812ba8:	10b76604 	addi	r2,r2,-8808
  812bac:	1887883a 	add	r3,r3,r2
  812bb0:	e0ffff15 	stw	r3,-4(fp)
  812bb4:	00000106 	br	812bbc <lseek+0x50>
  812bb8:	e03fff15 	stw	zero,-4(fp)
  812bbc:	e0bfff17 	ldw	r2,-4(fp)
  812bc0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  812bc4:	e0bffb17 	ldw	r2,-20(fp)
  812bc8:	1005003a 	cmpeq	r2,r2,zero
  812bcc:	1000111e 	bne	r2,zero,812c14 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  812bd0:	e0bffb17 	ldw	r2,-20(fp)
  812bd4:	10800017 	ldw	r2,0(r2)
  812bd8:	10800717 	ldw	r2,28(r2)
  812bdc:	1005003a 	cmpeq	r2,r2,zero
  812be0:	1000091e 	bne	r2,zero,812c08 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  812be4:	e0bffb17 	ldw	r2,-20(fp)
  812be8:	10800017 	ldw	r2,0(r2)
  812bec:	10800717 	ldw	r2,28(r2)
  812bf0:	e13ffb17 	ldw	r4,-20(fp)
  812bf4:	e17ffd17 	ldw	r5,-12(fp)
  812bf8:	e1bffe17 	ldw	r6,-8(fp)
  812bfc:	103ee83a 	callr	r2
  812c00:	e0bffa15 	stw	r2,-24(fp)
  812c04:	00000506 	br	812c1c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  812c08:	00bfde84 	movi	r2,-134
  812c0c:	e0bffa15 	stw	r2,-24(fp)
  812c10:	00000206 	br	812c1c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  812c14:	00bfebc4 	movi	r2,-81
  812c18:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  812c1c:	e0bffa17 	ldw	r2,-24(fp)
  812c20:	1004403a 	cmpge	r2,r2,zero
  812c24:	1000071e 	bne	r2,zero,812c44 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  812c28:	0812c5c0 	call	812c5c <alt_get_errno>
  812c2c:	1007883a 	mov	r3,r2
  812c30:	e0bffa17 	ldw	r2,-24(fp)
  812c34:	0085c83a 	sub	r2,zero,r2
  812c38:	18800015 	stw	r2,0(r3)
    rc = -1;
  812c3c:	00bfffc4 	movi	r2,-1
  812c40:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  812c44:	e0bffa17 	ldw	r2,-24(fp)
}
  812c48:	e037883a 	mov	sp,fp
  812c4c:	dfc00117 	ldw	ra,4(sp)
  812c50:	df000017 	ldw	fp,0(sp)
  812c54:	dec00204 	addi	sp,sp,8
  812c58:	f800283a 	ret

00812c5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812c5c:	defffd04 	addi	sp,sp,-12
  812c60:	dfc00215 	stw	ra,8(sp)
  812c64:	df000115 	stw	fp,4(sp)
  812c68:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812c6c:	008020b4 	movhi	r2,130
  812c70:	10bc4404 	addi	r2,r2,-3824
  812c74:	10800017 	ldw	r2,0(r2)
  812c78:	1005003a 	cmpeq	r2,r2,zero
  812c7c:	1000061e 	bne	r2,zero,812c98 <alt_get_errno+0x3c>
  812c80:	008020b4 	movhi	r2,130
  812c84:	10bc4404 	addi	r2,r2,-3824
  812c88:	10800017 	ldw	r2,0(r2)
  812c8c:	103ee83a 	callr	r2
  812c90:	e0bfff15 	stw	r2,-4(fp)
  812c94:	00000306 	br	812ca4 <alt_get_errno+0x48>
  812c98:	008020b4 	movhi	r2,130
  812c9c:	10837004 	addi	r2,r2,3520
  812ca0:	e0bfff15 	stw	r2,-4(fp)
  812ca4:	e0bfff17 	ldw	r2,-4(fp)
}
  812ca8:	e037883a 	mov	sp,fp
  812cac:	dfc00117 	ldw	ra,4(sp)
  812cb0:	df000017 	ldw	fp,0(sp)
  812cb4:	dec00204 	addi	sp,sp,8
  812cb8:	f800283a 	ret

00812cbc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  812cbc:	defffd04 	addi	sp,sp,-12
  812cc0:	dfc00215 	stw	ra,8(sp)
  812cc4:	df000115 	stw	fp,4(sp)
  812cc8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  812ccc:	0009883a 	mov	r4,zero
  812cd0:	08133580 	call	813358 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  812cd4:	081338c0 	call	81338c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  812cd8:	010020b4 	movhi	r4,130
  812cdc:	21351804 	addi	r4,r4,-11168
  812ce0:	014020b4 	movhi	r5,130
  812ce4:	29751804 	addi	r5,r5,-11168
  812ce8:	018020b4 	movhi	r6,130
  812cec:	31b51804 	addi	r6,r6,-11168
  812cf0:	081bd800 	call	81bd80 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  812cf4:	081bb300 	call	81bb30 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  812cf8:	010020b4 	movhi	r4,130
  812cfc:	212ee504 	addi	r4,r4,-17516
  812d00:	081c3440 	call	81c344 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  812d04:	d1274617 	ldw	r4,-25320(gp)
  812d08:	d1674717 	ldw	r5,-25316(gp)
  812d0c:	d1a74817 	ldw	r6,-25312(gp)
  812d10:	08039040 	call	803904 <main>
  812d14:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  812d18:	01000044 	movi	r4,1
  812d1c:	08122c80 	call	8122c8 <close>
  exit (result);
  812d20:	e13fff17 	ldw	r4,-4(fp)
  812d24:	081c3580 	call	81c358 <exit>

00812d28 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  812d28:	defffe04 	addi	sp,sp,-8
  812d2c:	df000115 	stw	fp,4(sp)
  812d30:	df000104 	addi	fp,sp,4
  812d34:	e13fff15 	stw	r4,-4(fp)
}
  812d38:	e037883a 	mov	sp,fp
  812d3c:	df000017 	ldw	fp,0(sp)
  812d40:	dec00104 	addi	sp,sp,4
  812d44:	f800283a 	ret

00812d48 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  812d48:	defffe04 	addi	sp,sp,-8
  812d4c:	df000115 	stw	fp,4(sp)
  812d50:	df000104 	addi	fp,sp,4
  812d54:	e13fff15 	stw	r4,-4(fp)
}
  812d58:	e037883a 	mov	sp,fp
  812d5c:	df000017 	ldw	fp,0(sp)
  812d60:	dec00104 	addi	sp,sp,4
  812d64:	f800283a 	ret

00812d68 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  812d68:	defff704 	addi	sp,sp,-36
  812d6c:	dfc00815 	stw	ra,32(sp)
  812d70:	df000715 	stw	fp,28(sp)
  812d74:	df000704 	addi	fp,sp,28
  812d78:	e13ffb15 	stw	r4,-20(fp)
  812d7c:	e17ffc15 	stw	r5,-16(fp)
  812d80:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812d84:	e0bffb17 	ldw	r2,-20(fp)
  812d88:	1004803a 	cmplt	r2,r2,zero
  812d8c:	1000081e 	bne	r2,zero,812db0 <read+0x48>
  812d90:	e0bffb17 	ldw	r2,-20(fp)
  812d94:	10800324 	muli	r2,r2,12
  812d98:	1007883a 	mov	r3,r2
  812d9c:	008020b4 	movhi	r2,130
  812da0:	10b76604 	addi	r2,r2,-8808
  812da4:	1887883a 	add	r3,r3,r2
  812da8:	e0ffff15 	stw	r3,-4(fp)
  812dac:	00000106 	br	812db4 <read+0x4c>
  812db0:	e03fff15 	stw	zero,-4(fp)
  812db4:	e0bfff17 	ldw	r2,-4(fp)
  812db8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  812dbc:	e0bffa17 	ldw	r2,-24(fp)
  812dc0:	1005003a 	cmpeq	r2,r2,zero
  812dc4:	1000241e 	bne	r2,zero,812e58 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  812dc8:	e0bffa17 	ldw	r2,-24(fp)
  812dcc:	10800217 	ldw	r2,8(r2)
  812dd0:	108000cc 	andi	r2,r2,3
  812dd4:	10800060 	cmpeqi	r2,r2,1
  812dd8:	10001a1e 	bne	r2,zero,812e44 <read+0xdc>
  812ddc:	e0bffa17 	ldw	r2,-24(fp)
  812de0:	10800017 	ldw	r2,0(r2)
  812de4:	10800517 	ldw	r2,20(r2)
  812de8:	1005003a 	cmpeq	r2,r2,zero
  812dec:	1000151e 	bne	r2,zero,812e44 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  812df0:	e0bffa17 	ldw	r2,-24(fp)
  812df4:	10800017 	ldw	r2,0(r2)
  812df8:	10800517 	ldw	r2,20(r2)
  812dfc:	e17ffc17 	ldw	r5,-16(fp)
  812e00:	e1bffd17 	ldw	r6,-12(fp)
  812e04:	e13ffa17 	ldw	r4,-24(fp)
  812e08:	103ee83a 	callr	r2
  812e0c:	e0bff915 	stw	r2,-28(fp)
  812e10:	e0bff917 	ldw	r2,-28(fp)
  812e14:	1004403a 	cmpge	r2,r2,zero
  812e18:	1000071e 	bne	r2,zero,812e38 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  812e1c:	0812e880 	call	812e88 <alt_get_errno>
  812e20:	e0fff917 	ldw	r3,-28(fp)
  812e24:	00c7c83a 	sub	r3,zero,r3
  812e28:	10c00015 	stw	r3,0(r2)
          return -1;
  812e2c:	00bfffc4 	movi	r2,-1
  812e30:	e0bffe15 	stw	r2,-8(fp)
  812e34:	00000e06 	br	812e70 <read+0x108>
        }
        return rval;
  812e38:	e0bff917 	ldw	r2,-28(fp)
  812e3c:	e0bffe15 	stw	r2,-8(fp)
  812e40:	00000b06 	br	812e70 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  812e44:	0812e880 	call	812e88 <alt_get_errno>
  812e48:	1007883a 	mov	r3,r2
  812e4c:	00800344 	movi	r2,13
  812e50:	18800015 	stw	r2,0(r3)
  812e54:	00000406 	br	812e68 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  812e58:	0812e880 	call	812e88 <alt_get_errno>
  812e5c:	1007883a 	mov	r3,r2
  812e60:	00801444 	movi	r2,81
  812e64:	18800015 	stw	r2,0(r3)
  }
  return -1;
  812e68:	00bfffc4 	movi	r2,-1
  812e6c:	e0bffe15 	stw	r2,-8(fp)
  812e70:	e0bffe17 	ldw	r2,-8(fp)
}
  812e74:	e037883a 	mov	sp,fp
  812e78:	dfc00117 	ldw	ra,4(sp)
  812e7c:	df000017 	ldw	fp,0(sp)
  812e80:	dec00204 	addi	sp,sp,8
  812e84:	f800283a 	ret

00812e88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812e88:	defffd04 	addi	sp,sp,-12
  812e8c:	dfc00215 	stw	ra,8(sp)
  812e90:	df000115 	stw	fp,4(sp)
  812e94:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812e98:	008020b4 	movhi	r2,130
  812e9c:	10bc4404 	addi	r2,r2,-3824
  812ea0:	10800017 	ldw	r2,0(r2)
  812ea4:	1005003a 	cmpeq	r2,r2,zero
  812ea8:	1000061e 	bne	r2,zero,812ec4 <alt_get_errno+0x3c>
  812eac:	008020b4 	movhi	r2,130
  812eb0:	10bc4404 	addi	r2,r2,-3824
  812eb4:	10800017 	ldw	r2,0(r2)
  812eb8:	103ee83a 	callr	r2
  812ebc:	e0bfff15 	stw	r2,-4(fp)
  812ec0:	00000306 	br	812ed0 <alt_get_errno+0x48>
  812ec4:	008020b4 	movhi	r2,130
  812ec8:	10837004 	addi	r2,r2,3520
  812ecc:	e0bfff15 	stw	r2,-4(fp)
  812ed0:	e0bfff17 	ldw	r2,-4(fp)
}
  812ed4:	e037883a 	mov	sp,fp
  812ed8:	dfc00117 	ldw	ra,4(sp)
  812edc:	df000017 	ldw	fp,0(sp)
  812ee0:	dec00204 	addi	sp,sp,8
  812ee4:	f800283a 	ret

00812ee8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  812ee8:	defffe04 	addi	sp,sp,-8
  812eec:	df000115 	stw	fp,4(sp)
  812ef0:	df000104 	addi	fp,sp,4
  812ef4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  812ef8:	e0bfff17 	ldw	r2,-4(fp)
  812efc:	108000d0 	cmplti	r2,r2,3
  812f00:	10000d1e 	bne	r2,zero,812f38 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  812f04:	e0bfff17 	ldw	r2,-4(fp)
  812f08:	00c020b4 	movhi	r3,130
  812f0c:	18f76604 	addi	r3,r3,-8808
  812f10:	10800324 	muli	r2,r2,12
  812f14:	10c5883a 	add	r2,r2,r3
  812f18:	10800204 	addi	r2,r2,8
  812f1c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  812f20:	e0bfff17 	ldw	r2,-4(fp)
  812f24:	00c020b4 	movhi	r3,130
  812f28:	18f76604 	addi	r3,r3,-8808
  812f2c:	10800324 	muli	r2,r2,12
  812f30:	10c5883a 	add	r2,r2,r3
  812f34:	10000015 	stw	zero,0(r2)
  }
}
  812f38:	e037883a 	mov	sp,fp
  812f3c:	df000017 	ldw	fp,0(sp)
  812f40:	dec00104 	addi	sp,sp,4
  812f44:	f800283a 	ret

00812f48 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  812f48:	defff804 	addi	sp,sp,-32
  812f4c:	df000715 	stw	fp,28(sp)
  812f50:	df000704 	addi	fp,sp,28
  812f54:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812f58:	0005303a 	rdctl	r2,status
  812f5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812f60:	e0fffb17 	ldw	r3,-20(fp)
  812f64:	00bfff84 	movi	r2,-2
  812f68:	1884703a 	and	r2,r3,r2
  812f6c:	1001703a 	wrctl	status,r2
  
  return context;
  812f70:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  812f74:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  812f78:	d0a01317 	ldw	r2,-32692(gp)
  812f7c:	10c000c4 	addi	r3,r2,3
  812f80:	00bfff04 	movi	r2,-4
  812f84:	1884703a 	and	r2,r3,r2
  812f88:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  812f8c:	d0e01317 	ldw	r3,-32692(gp)
  812f90:	e0bffe17 	ldw	r2,-8(fp)
  812f94:	1887883a 	add	r3,r3,r2
  812f98:	00804034 	movhi	r2,256
  812f9c:	10800004 	addi	r2,r2,0
  812fa0:	10c0072e 	bgeu	r2,r3,812fc0 <sbrk+0x78>
  812fa4:	e0bffd17 	ldw	r2,-12(fp)
  812fa8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812fac:	e0bffa17 	ldw	r2,-24(fp)
  812fb0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  812fb4:	00bfffc4 	movi	r2,-1
  812fb8:	e0bfff15 	stw	r2,-4(fp)
  812fbc:	00000c06 	br	812ff0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  812fc0:	d0a01317 	ldw	r2,-32692(gp)
  812fc4:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  812fc8:	d0e01317 	ldw	r3,-32692(gp)
  812fcc:	e0bffe17 	ldw	r2,-8(fp)
  812fd0:	1885883a 	add	r2,r3,r2
  812fd4:	d0a01315 	stw	r2,-32692(gp)
  812fd8:	e0bffd17 	ldw	r2,-12(fp)
  812fdc:	e0bff915 	stw	r2,-28(fp)
  812fe0:	e0bff917 	ldw	r2,-28(fp)
  812fe4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  812fe8:	e0bffc17 	ldw	r2,-16(fp)
  812fec:	e0bfff15 	stw	r2,-4(fp)
  812ff0:	e0bfff17 	ldw	r2,-4(fp)
} 
  812ff4:	e037883a 	mov	sp,fp
  812ff8:	df000017 	ldw	fp,0(sp)
  812ffc:	dec00104 	addi	sp,sp,4
  813000:	f800283a 	ret

00813004 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  813004:	defffa04 	addi	sp,sp,-24
  813008:	df000515 	stw	fp,20(sp)
  81300c:	df000504 	addi	fp,sp,20
  813010:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813014:	0005303a 	rdctl	r2,status
  813018:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81301c:	e0fffd17 	ldw	r3,-12(fp)
  813020:	00bfff84 	movi	r2,-2
  813024:	1884703a 	and	r2,r3,r2
  813028:	1001703a 	wrctl	status,r2
  
  return context;
  81302c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  813030:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  813034:	e0bfff17 	ldw	r2,-4(fp)
  813038:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  81303c:	e0bffc17 	ldw	r2,-16(fp)
  813040:	10c00017 	ldw	r3,0(r2)
  813044:	e0bffc17 	ldw	r2,-16(fp)
  813048:	10800117 	ldw	r2,4(r2)
  81304c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  813050:	e0bffc17 	ldw	r2,-16(fp)
  813054:	10c00117 	ldw	r3,4(r2)
  813058:	e0bffc17 	ldw	r2,-16(fp)
  81305c:	10800017 	ldw	r2,0(r2)
  813060:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  813064:	e0fffc17 	ldw	r3,-16(fp)
  813068:	e0bffc17 	ldw	r2,-16(fp)
  81306c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  813070:	e0fffc17 	ldw	r3,-16(fp)
  813074:	e0bffc17 	ldw	r2,-16(fp)
  813078:	18800015 	stw	r2,0(r3)
  81307c:	e0bffe17 	ldw	r2,-8(fp)
  813080:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813084:	e0bffb17 	ldw	r2,-20(fp)
  813088:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  81308c:	e037883a 	mov	sp,fp
  813090:	df000017 	ldw	fp,0(sp)
  813094:	dec00104 	addi	sp,sp,4
  813098:	f800283a 	ret

0081309c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  81309c:	defffb04 	addi	sp,sp,-20
  8130a0:	dfc00415 	stw	ra,16(sp)
  8130a4:	df000315 	stw	fp,12(sp)
  8130a8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8130ac:	d0a01417 	ldw	r2,-32688(gp)
  8130b0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8130b4:	d0a74a17 	ldw	r2,-25304(gp)
  8130b8:	10800044 	addi	r2,r2,1
  8130bc:	d0a74a15 	stw	r2,-25304(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8130c0:	00003106 	br	813188 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  8130c4:	e0bffe17 	ldw	r2,-8(fp)
  8130c8:	10800017 	ldw	r2,0(r2)
  8130cc:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8130d0:	e0bffe17 	ldw	r2,-8(fp)
  8130d4:	10800403 	ldbu	r2,16(r2)
  8130d8:	10803fcc 	andi	r2,r2,255
  8130dc:	1005003a 	cmpeq	r2,r2,zero
  8130e0:	1000051e 	bne	r2,zero,8130f8 <alt_tick+0x5c>
  8130e4:	d0a74a17 	ldw	r2,-25304(gp)
  8130e8:	1004c03a 	cmpne	r2,r2,zero
  8130ec:	1000021e 	bne	r2,zero,8130f8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  8130f0:	e0bffe17 	ldw	r2,-8(fp)
  8130f4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8130f8:	e0bffe17 	ldw	r2,-8(fp)
  8130fc:	10c00217 	ldw	r3,8(r2)
  813100:	d0a74a17 	ldw	r2,-25304(gp)
  813104:	10c01e36 	bltu	r2,r3,813180 <alt_tick+0xe4>
  813108:	e0bffe17 	ldw	r2,-8(fp)
  81310c:	10800403 	ldbu	r2,16(r2)
  813110:	10803fcc 	andi	r2,r2,255
  813114:	1004c03a 	cmpne	r2,r2,zero
  813118:	1000191e 	bne	r2,zero,813180 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  81311c:	e0bffe17 	ldw	r2,-8(fp)
  813120:	10c00317 	ldw	r3,12(r2)
  813124:	e0bffe17 	ldw	r2,-8(fp)
  813128:	11000517 	ldw	r4,20(r2)
  81312c:	183ee83a 	callr	r3
  813130:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  813134:	e0bffd17 	ldw	r2,-12(fp)
  813138:	1004c03a 	cmpne	r2,r2,zero
  81313c:	1000031e 	bne	r2,zero,81314c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  813140:	e13ffe17 	ldw	r4,-8(fp)
  813144:	08130040 	call	813004 <alt_alarm_stop>
  813148:	00000d06 	br	813180 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  81314c:	e0bffe17 	ldw	r2,-8(fp)
  813150:	10c00217 	ldw	r3,8(r2)
  813154:	e0bffd17 	ldw	r2,-12(fp)
  813158:	1887883a 	add	r3,r3,r2
  81315c:	e0bffe17 	ldw	r2,-8(fp)
  813160:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  813164:	e0bffe17 	ldw	r2,-8(fp)
  813168:	10c00217 	ldw	r3,8(r2)
  81316c:	d0a74a17 	ldw	r2,-25304(gp)
  813170:	1880032e 	bgeu	r3,r2,813180 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  813174:	e0fffe17 	ldw	r3,-8(fp)
  813178:	00800044 	movi	r2,1
  81317c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  813180:	e0bfff17 	ldw	r2,-4(fp)
  813184:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  813188:	d0e01404 	addi	r3,gp,-32688
  81318c:	e0bffe17 	ldw	r2,-8(fp)
  813190:	10ffcc1e 	bne	r2,r3,8130c4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  813194:	e037883a 	mov	sp,fp
  813198:	dfc00117 	ldw	ra,4(sp)
  81319c:	df000017 	ldw	fp,0(sp)
  8131a0:	dec00204 	addi	sp,sp,8
  8131a4:	f800283a 	ret

008131a8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  8131a8:	defffd04 	addi	sp,sp,-12
  8131ac:	dfc00215 	stw	ra,8(sp)
  8131b0:	df000115 	stw	fp,4(sp)
  8131b4:	df000104 	addi	fp,sp,4
  8131b8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  8131bc:	e13fff17 	ldw	r4,-4(fp)
  8131c0:	081b88c0 	call	81b88c <alt_busy_sleep>
}
  8131c4:	e037883a 	mov	sp,fp
  8131c8:	dfc00117 	ldw	ra,4(sp)
  8131cc:	df000017 	ldw	fp,0(sp)
  8131d0:	dec00204 	addi	sp,sp,8
  8131d4:	f800283a 	ret

008131d8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  8131d8:	defff704 	addi	sp,sp,-36
  8131dc:	dfc00815 	stw	ra,32(sp)
  8131e0:	df000715 	stw	fp,28(sp)
  8131e4:	df000704 	addi	fp,sp,28
  8131e8:	e13ffb15 	stw	r4,-20(fp)
  8131ec:	e17ffc15 	stw	r5,-16(fp)
  8131f0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8131f4:	e0bffb17 	ldw	r2,-20(fp)
  8131f8:	1004803a 	cmplt	r2,r2,zero
  8131fc:	1000081e 	bne	r2,zero,813220 <write+0x48>
  813200:	e0bffb17 	ldw	r2,-20(fp)
  813204:	10800324 	muli	r2,r2,12
  813208:	1007883a 	mov	r3,r2
  81320c:	008020b4 	movhi	r2,130
  813210:	10b76604 	addi	r2,r2,-8808
  813214:	1887883a 	add	r3,r3,r2
  813218:	e0ffff15 	stw	r3,-4(fp)
  81321c:	00000106 	br	813224 <write+0x4c>
  813220:	e03fff15 	stw	zero,-4(fp)
  813224:	e0bfff17 	ldw	r2,-4(fp)
  813228:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  81322c:	e0bffa17 	ldw	r2,-24(fp)
  813230:	1005003a 	cmpeq	r2,r2,zero
  813234:	1000241e 	bne	r2,zero,8132c8 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  813238:	e0bffa17 	ldw	r2,-24(fp)
  81323c:	10800217 	ldw	r2,8(r2)
  813240:	108000cc 	andi	r2,r2,3
  813244:	1005003a 	cmpeq	r2,r2,zero
  813248:	10001a1e 	bne	r2,zero,8132b4 <write+0xdc>
  81324c:	e0bffa17 	ldw	r2,-24(fp)
  813250:	10800017 	ldw	r2,0(r2)
  813254:	10800617 	ldw	r2,24(r2)
  813258:	1005003a 	cmpeq	r2,r2,zero
  81325c:	1000151e 	bne	r2,zero,8132b4 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  813260:	e0bffa17 	ldw	r2,-24(fp)
  813264:	10800017 	ldw	r2,0(r2)
  813268:	10800617 	ldw	r2,24(r2)
  81326c:	e17ffc17 	ldw	r5,-16(fp)
  813270:	e1bffd17 	ldw	r6,-12(fp)
  813274:	e13ffa17 	ldw	r4,-24(fp)
  813278:	103ee83a 	callr	r2
  81327c:	e0bff915 	stw	r2,-28(fp)
  813280:	e0bff917 	ldw	r2,-28(fp)
  813284:	1004403a 	cmpge	r2,r2,zero
  813288:	1000071e 	bne	r2,zero,8132a8 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  81328c:	08132f80 	call	8132f8 <alt_get_errno>
  813290:	e0fff917 	ldw	r3,-28(fp)
  813294:	00c7c83a 	sub	r3,zero,r3
  813298:	10c00015 	stw	r3,0(r2)
        return -1;
  81329c:	00bfffc4 	movi	r2,-1
  8132a0:	e0bffe15 	stw	r2,-8(fp)
  8132a4:	00000e06 	br	8132e0 <write+0x108>
      }
      return rval;
  8132a8:	e0bff917 	ldw	r2,-28(fp)
  8132ac:	e0bffe15 	stw	r2,-8(fp)
  8132b0:	00000b06 	br	8132e0 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8132b4:	08132f80 	call	8132f8 <alt_get_errno>
  8132b8:	1007883a 	mov	r3,r2
  8132bc:	00800344 	movi	r2,13
  8132c0:	18800015 	stw	r2,0(r3)
  8132c4:	00000406 	br	8132d8 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8132c8:	08132f80 	call	8132f8 <alt_get_errno>
  8132cc:	1007883a 	mov	r3,r2
  8132d0:	00801444 	movi	r2,81
  8132d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8132d8:	00bfffc4 	movi	r2,-1
  8132dc:	e0bffe15 	stw	r2,-8(fp)
  8132e0:	e0bffe17 	ldw	r2,-8(fp)
}
  8132e4:	e037883a 	mov	sp,fp
  8132e8:	dfc00117 	ldw	ra,4(sp)
  8132ec:	df000017 	ldw	fp,0(sp)
  8132f0:	dec00204 	addi	sp,sp,8
  8132f4:	f800283a 	ret

008132f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8132f8:	defffd04 	addi	sp,sp,-12
  8132fc:	dfc00215 	stw	ra,8(sp)
  813300:	df000115 	stw	fp,4(sp)
  813304:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813308:	008020b4 	movhi	r2,130
  81330c:	10bc4404 	addi	r2,r2,-3824
  813310:	10800017 	ldw	r2,0(r2)
  813314:	1005003a 	cmpeq	r2,r2,zero
  813318:	1000061e 	bne	r2,zero,813334 <alt_get_errno+0x3c>
  81331c:	008020b4 	movhi	r2,130
  813320:	10bc4404 	addi	r2,r2,-3824
  813324:	10800017 	ldw	r2,0(r2)
  813328:	103ee83a 	callr	r2
  81332c:	e0bfff15 	stw	r2,-4(fp)
  813330:	00000306 	br	813340 <alt_get_errno+0x48>
  813334:	008020b4 	movhi	r2,130
  813338:	10837004 	addi	r2,r2,3520
  81333c:	e0bfff15 	stw	r2,-4(fp)
  813340:	e0bfff17 	ldw	r2,-4(fp)
}
  813344:	e037883a 	mov	sp,fp
  813348:	dfc00117 	ldw	ra,4(sp)
  81334c:	df000017 	ldw	fp,0(sp)
  813350:	dec00204 	addi	sp,sp,8
  813354:	f800283a 	ret

00813358 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  813358:	defffd04 	addi	sp,sp,-12
  81335c:	dfc00215 	stw	ra,8(sp)
  813360:	df000115 	stw	fp,4(sp)
  813364:	df000104 	addi	fp,sp,4
  813368:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  81336c:	081c0bc0 	call	81c0bc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  813370:	00800044 	movi	r2,1
  813374:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  813378:	e037883a 	mov	sp,fp
  81337c:	dfc00117 	ldw	ra,4(sp)
  813380:	df000017 	ldw	fp,0(sp)
  813384:	dec00204 	addi	sp,sp,8
  813388:	f800283a 	ret

0081338c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  81338c:	defffd04 	addi	sp,sp,-12
  813390:	dfc00215 	stw	ra,8(sp)
  813394:	df000115 	stw	fp,4(sp)
  813398:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( HAL_SYSTEM_TIMER, HAL_system_timer);
  81339c:	01004034 	movhi	r4,256
  8133a0:	21040004 	addi	r4,r4,4096
  8133a4:	000b883a 	mov	r5,zero
  8133a8:	000d883a 	mov	r6,zero
  8133ac:	01c0fa04 	movi	r7,1000
  8133b0:	08142540 	call	814254 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( HARDWARE_TIMER, hardware_timer);
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
  8133b4:	00c020b4 	movhi	r3,130
  8133b8:	18c37e04 	addi	r3,r3,3576
  8133bc:	00804034 	movhi	r2,256
  8133c0:	10840804 	addi	r2,r2,4128
  8133c4:	18800015 	stw	r2,0(r3)
  8133c8:	00c020b4 	movhi	r3,130
  8133cc:	18c37f04 	addi	r3,r3,3580
  8133d0:	0080bef4 	movhi	r2,763
  8133d4:	10bc2004 	addi	r2,r2,-3968
  8133d8:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  8133dc:	010020b4 	movhi	r4,130
  8133e0:	2137d004 	addi	r4,r4,-8384
  8133e4:	000b883a 	mov	r5,zero
  8133e8:	01800144 	movi	r6,5
  8133ec:	08138800 	call	813880 <altera_avalon_jtag_uart_init>
  8133f0:	010020b4 	movhi	r4,130
  8133f4:	2137c604 	addi	r4,r4,-8424
  8133f8:	08137000 	call	813700 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
  8133fc:	010020b4 	movhi	r4,130
  813400:	213bde04 	addi	r4,r4,-4232
  813404:	08137000 	call	813700 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
  813408:	010020b4 	movhi	r4,130
  81340c:	213bea04 	addi	r4,r4,-4184
  813410:	08137000 	call	813700 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  813414:	010020b4 	movhi	r4,130
  813418:	213bf604 	addi	r4,r4,-4136
  81341c:	08154880 	call	815488 <alt_up_character_lcd_init>
  813420:	010020b4 	movhi	r4,130
  813424:	213bf604 	addi	r4,r4,-4136
  813428:	08137000 	call	813700 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_DRAWER, char_drawer);
  81342c:	008020b4 	movhi	r2,130
  813430:	10bc0104 	addi	r2,r2,-4092
  813434:	10800a17 	ldw	r2,40(r2)
  813438:	10800104 	addi	r2,r2,4
  81343c:	10800017 	ldw	r2,0(r2)
  813440:	10ffffcc 	andi	r3,r2,65535
  813444:	008020b4 	movhi	r2,130
  813448:	10bc0104 	addi	r2,r2,-4092
  81344c:	10c00c15 	stw	r3,48(r2)
  813450:	008020b4 	movhi	r2,130
  813454:	10bc0104 	addi	r2,r2,-4092
  813458:	10800a17 	ldw	r2,40(r2)
  81345c:	10800104 	addi	r2,r2,4
  813460:	10800017 	ldw	r2,0(r2)
  813464:	1005d43a 	srai	r2,r2,16
  813468:	10ffffcc 	andi	r3,r2,65535
  81346c:	008020b4 	movhi	r2,130
  813470:	10bc0104 	addi	r2,r2,-4092
  813474:	10c00d15 	stw	r3,52(r2)
  813478:	008020b4 	movhi	r2,130
  81347c:	10bc0104 	addi	r2,r2,-4092
  813480:	10800c17 	ldw	r2,48(r2)
  813484:	10801068 	cmpgeui	r2,r2,65
  813488:	1000081e 	bne	r2,zero,8134ac <alt_sys_init+0x120>
  81348c:	00c020b4 	movhi	r3,130
  813490:	18fc0104 	addi	r3,r3,-4092
  813494:	00800fc4 	movi	r2,63
  813498:	18800f15 	stw	r2,60(r3)
  81349c:	00c020b4 	movhi	r3,130
  8134a0:	18fc0104 	addi	r3,r3,-4092
  8134a4:	00800184 	movi	r2,6
  8134a8:	18801015 	stw	r2,64(r3)
  8134ac:	008020b4 	movhi	r2,130
  8134b0:	10bc0104 	addi	r2,r2,-4092
  8134b4:	10800d17 	ldw	r2,52(r2)
  8134b8:	10800868 	cmpgeui	r2,r2,33
  8134bc:	1000041e 	bne	r2,zero,8134d0 <alt_sys_init+0x144>
  8134c0:	00c020b4 	movhi	r3,130
  8134c4:	18fc0104 	addi	r3,r3,-4092
  8134c8:	008007c4 	movi	r2,31
  8134cc:	18801115 	stw	r2,68(r3)
  8134d0:	010020b4 	movhi	r4,130
  8134d4:	213c0104 	addi	r4,r4,-4092
  8134d8:	08159080 	call	815908 <alt_up_char_buffer_init>
  8134dc:	010020b4 	movhi	r4,130
  8134e0:	213c0104 	addi	r4,r4,-4092
  8134e4:	08137000 	call	813700 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, pixel_buffer_dma);
  8134e8:	008020b4 	movhi	r2,130
  8134ec:	10bc1304 	addi	r2,r2,-4020
  8134f0:	10800a17 	ldw	r2,40(r2)
  8134f4:	10800017 	ldw	r2,0(r2)
  8134f8:	1007883a 	mov	r3,r2
  8134fc:	008020b4 	movhi	r2,130
  813500:	10bc1304 	addi	r2,r2,-4020
  813504:	10c00b15 	stw	r3,44(r2)
  813508:	008020b4 	movhi	r2,130
  81350c:	10bc1304 	addi	r2,r2,-4020
  813510:	10800a17 	ldw	r2,40(r2)
  813514:	10800104 	addi	r2,r2,4
  813518:	10800017 	ldw	r2,0(r2)
  81351c:	1007883a 	mov	r3,r2
  813520:	008020b4 	movhi	r2,130
  813524:	10bc1304 	addi	r2,r2,-4020
  813528:	10c00c15 	stw	r3,48(r2)
  81352c:	008020b4 	movhi	r2,130
  813530:	10bc1304 	addi	r2,r2,-4020
  813534:	10800a17 	ldw	r2,40(r2)
  813538:	10800204 	addi	r2,r2,8
  81353c:	10800017 	ldw	r2,0(r2)
  813540:	10ffffcc 	andi	r3,r2,65535
  813544:	008020b4 	movhi	r2,130
  813548:	10bc1304 	addi	r2,r2,-4020
  81354c:	10c00f15 	stw	r3,60(r2)
  813550:	008020b4 	movhi	r2,130
  813554:	10bc1304 	addi	r2,r2,-4020
  813558:	10800a17 	ldw	r2,40(r2)
  81355c:	10800204 	addi	r2,r2,8
  813560:	10800017 	ldw	r2,0(r2)
  813564:	1005d43a 	srai	r2,r2,16
  813568:	10ffffcc 	andi	r3,r2,65535
  81356c:	008020b4 	movhi	r2,130
  813570:	10bc1304 	addi	r2,r2,-4020
  813574:	10c01015 	stw	r3,64(r2)
  813578:	008020b4 	movhi	r2,130
  81357c:	10bc1304 	addi	r2,r2,-4020
  813580:	10800a17 	ldw	r2,40(r2)
  813584:	10800304 	addi	r2,r2,12
  813588:	10800017 	ldw	r2,0(r2)
  81358c:	1005d07a 	srai	r2,r2,1
  813590:	10c0004c 	andi	r3,r2,1
  813594:	008020b4 	movhi	r2,130
  813598:	10bc1304 	addi	r2,r2,-4020
  81359c:	10c00d15 	stw	r3,52(r2)
  8135a0:	008020b4 	movhi	r2,130
  8135a4:	10bc1304 	addi	r2,r2,-4020
  8135a8:	10800a17 	ldw	r2,40(r2)
  8135ac:	10800304 	addi	r2,r2,12
  8135b0:	10800017 	ldw	r2,0(r2)
  8135b4:	1005d13a 	srai	r2,r2,4
  8135b8:	10c003cc 	andi	r3,r2,15
  8135bc:	008020b4 	movhi	r2,130
  8135c0:	10bc1304 	addi	r2,r2,-4020
  8135c4:	10c00e15 	stw	r3,56(r2)
  8135c8:	008020b4 	movhi	r2,130
  8135cc:	10bc1304 	addi	r2,r2,-4020
  8135d0:	10800a17 	ldw	r2,40(r2)
  8135d4:	10800304 	addi	r2,r2,12
  8135d8:	10800017 	ldw	r2,0(r2)
  8135dc:	1005d43a 	srai	r2,r2,16
  8135e0:	1007883a 	mov	r3,r2
  8135e4:	00bfffc4 	movi	r2,-1
  8135e8:	1884703a 	and	r2,r3,r2
  8135ec:	e0bfff45 	stb	r2,-3(fp)
  8135f0:	008020b4 	movhi	r2,130
  8135f4:	10bc1304 	addi	r2,r2,-4020
  8135f8:	10800a17 	ldw	r2,40(r2)
  8135fc:	10800304 	addi	r2,r2,12
  813600:	10800017 	ldw	r2,0(r2)
  813604:	1005d63a 	srai	r2,r2,24
  813608:	1007883a 	mov	r3,r2
  81360c:	00bfffc4 	movi	r2,-1
  813610:	1884703a 	and	r2,r3,r2
  813614:	e0bfff05 	stb	r2,-4(fp)
  813618:	008020b4 	movhi	r2,130
  81361c:	10bc1304 	addi	r2,r2,-4020
  813620:	10800e17 	ldw	r2,56(r2)
  813624:	10800058 	cmpnei	r2,r2,1
  813628:	1000041e 	bne	r2,zero,81363c <alt_sys_init+0x2b0>
  81362c:	008020b4 	movhi	r2,130
  813630:	10bc1304 	addi	r2,r2,-4020
  813634:	10001115 	stw	zero,68(r2)
  813638:	00000e06 	br	813674 <alt_sys_init+0x2e8>
  81363c:	008020b4 	movhi	r2,130
  813640:	10bc1304 	addi	r2,r2,-4020
  813644:	10800e17 	ldw	r2,56(r2)
  813648:	10800098 	cmpnei	r2,r2,2
  81364c:	1000051e 	bne	r2,zero,813664 <alt_sys_init+0x2d8>
  813650:	00c020b4 	movhi	r3,130
  813654:	18fc1304 	addi	r3,r3,-4020
  813658:	00800044 	movi	r2,1
  81365c:	18801115 	stw	r2,68(r3)
  813660:	00000406 	br	813674 <alt_sys_init+0x2e8>
  813664:	00c020b4 	movhi	r3,130
  813668:	18fc1304 	addi	r3,r3,-4020
  81366c:	00800084 	movi	r2,2
  813670:	18801115 	stw	r2,68(r3)
  813674:	e0ffff43 	ldbu	r3,-3(fp)
  813678:	00800804 	movi	r2,32
  81367c:	10c7c83a 	sub	r3,r2,r3
  813680:	00bfffc4 	movi	r2,-1
  813684:	10c6d83a 	srl	r3,r2,r3
  813688:	008020b4 	movhi	r2,130
  81368c:	10bc1304 	addi	r2,r2,-4020
  813690:	10c01215 	stw	r3,72(r2)
  813694:	e0ffff43 	ldbu	r3,-3(fp)
  813698:	008020b4 	movhi	r2,130
  81369c:	10bc1304 	addi	r2,r2,-4020
  8136a0:	10801117 	ldw	r2,68(r2)
  8136a4:	1887883a 	add	r3,r3,r2
  8136a8:	008020b4 	movhi	r2,130
  8136ac:	10bc1304 	addi	r2,r2,-4020
  8136b0:	10c01315 	stw	r3,76(r2)
  8136b4:	e0ffff03 	ldbu	r3,-4(fp)
  8136b8:	00800804 	movi	r2,32
  8136bc:	10c7c83a 	sub	r3,r2,r3
  8136c0:	00bfffc4 	movi	r2,-1
  8136c4:	10c6d83a 	srl	r3,r2,r3
  8136c8:	008020b4 	movhi	r2,130
  8136cc:	10bc1304 	addi	r2,r2,-4020
  8136d0:	10c01415 	stw	r3,80(r2)
  8136d4:	010020b4 	movhi	r4,130
  8136d8:	213c1304 	addi	r4,r4,-4020
  8136dc:	08137000 	call	813700 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
  8136e0:	010020b4 	movhi	r4,130
  8136e4:	213c2804 	addi	r4,r4,-3936
  8136e8:	08137000 	call	813700 <alt_dev_reg>
}
  8136ec:	e037883a 	mov	sp,fp
  8136f0:	dfc00117 	ldw	ra,4(sp)
  8136f4:	df000017 	ldw	fp,0(sp)
  8136f8:	dec00204 	addi	sp,sp,8
  8136fc:	f800283a 	ret

00813700 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  813700:	defffd04 	addi	sp,sp,-12
  813704:	dfc00215 	stw	ra,8(sp)
  813708:	df000115 	stw	fp,4(sp)
  81370c:	df000104 	addi	fp,sp,4
  813710:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  813714:	e13fff17 	ldw	r4,-4(fp)
  813718:	014020b4 	movhi	r5,130
  81371c:	297c4104 	addi	r5,r5,-3836
  813720:	081ba1c0 	call	81ba1c <alt_dev_llist_insert>
}
  813724:	e037883a 	mov	sp,fp
  813728:	dfc00117 	ldw	ra,4(sp)
  81372c:	df000017 	ldw	fp,0(sp)
  813730:	dec00204 	addi	sp,sp,8
  813734:	f800283a 	ret

00813738 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  813738:	defffa04 	addi	sp,sp,-24
  81373c:	dfc00515 	stw	ra,20(sp)
  813740:	df000415 	stw	fp,16(sp)
  813744:	df000404 	addi	fp,sp,16
  813748:	e13ffd15 	stw	r4,-12(fp)
  81374c:	e17ffe15 	stw	r5,-8(fp)
  813750:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  813754:	e0bffd17 	ldw	r2,-12(fp)
  813758:	10800017 	ldw	r2,0(r2)
  81375c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  813760:	e0bffc17 	ldw	r2,-16(fp)
  813764:	11000a04 	addi	r4,r2,40
  813768:	e0bffd17 	ldw	r2,-12(fp)
  81376c:	11c00217 	ldw	r7,8(r2)
  813770:	e17ffe17 	ldw	r5,-8(fp)
  813774:	e1bfff17 	ldw	r6,-4(fp)
  813778:	0813d7c0 	call	813d7c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  81377c:	e037883a 	mov	sp,fp
  813780:	dfc00117 	ldw	ra,4(sp)
  813784:	df000017 	ldw	fp,0(sp)
  813788:	dec00204 	addi	sp,sp,8
  81378c:	f800283a 	ret

00813790 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  813790:	defffa04 	addi	sp,sp,-24
  813794:	dfc00515 	stw	ra,20(sp)
  813798:	df000415 	stw	fp,16(sp)
  81379c:	df000404 	addi	fp,sp,16
  8137a0:	e13ffd15 	stw	r4,-12(fp)
  8137a4:	e17ffe15 	stw	r5,-8(fp)
  8137a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8137ac:	e0bffd17 	ldw	r2,-12(fp)
  8137b0:	10800017 	ldw	r2,0(r2)
  8137b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8137b8:	e0bffc17 	ldw	r2,-16(fp)
  8137bc:	11000a04 	addi	r4,r2,40
  8137c0:	e0bffd17 	ldw	r2,-12(fp)
  8137c4:	11c00217 	ldw	r7,8(r2)
  8137c8:	e17ffe17 	ldw	r5,-8(fp)
  8137cc:	e1bfff17 	ldw	r6,-4(fp)
  8137d0:	0813fa00 	call	813fa0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8137d4:	e037883a 	mov	sp,fp
  8137d8:	dfc00117 	ldw	ra,4(sp)
  8137dc:	df000017 	ldw	fp,0(sp)
  8137e0:	dec00204 	addi	sp,sp,8
  8137e4:	f800283a 	ret

008137e8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  8137e8:	defffc04 	addi	sp,sp,-16
  8137ec:	dfc00315 	stw	ra,12(sp)
  8137f0:	df000215 	stw	fp,8(sp)
  8137f4:	df000204 	addi	fp,sp,8
  8137f8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8137fc:	e0bfff17 	ldw	r2,-4(fp)
  813800:	10800017 	ldw	r2,0(r2)
  813804:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  813808:	e0bffe17 	ldw	r2,-8(fp)
  81380c:	11000a04 	addi	r4,r2,40
  813810:	e0bfff17 	ldw	r2,-4(fp)
  813814:	11400217 	ldw	r5,8(r2)
  813818:	0813c140 	call	813c14 <altera_avalon_jtag_uart_close>
}
  81381c:	e037883a 	mov	sp,fp
  813820:	dfc00117 	ldw	ra,4(sp)
  813824:	df000017 	ldw	fp,0(sp)
  813828:	dec00204 	addi	sp,sp,8
  81382c:	f800283a 	ret

00813830 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  813830:	defffa04 	addi	sp,sp,-24
  813834:	dfc00515 	stw	ra,20(sp)
  813838:	df000415 	stw	fp,16(sp)
  81383c:	df000404 	addi	fp,sp,16
  813840:	e13ffd15 	stw	r4,-12(fp)
  813844:	e17ffe15 	stw	r5,-8(fp)
  813848:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  81384c:	e0bffd17 	ldw	r2,-12(fp)
  813850:	10800017 	ldw	r2,0(r2)
  813854:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  813858:	e0bffc17 	ldw	r2,-16(fp)
  81385c:	11000a04 	addi	r4,r2,40
  813860:	e17ffe17 	ldw	r5,-8(fp)
  813864:	e1bfff17 	ldw	r6,-4(fp)
  813868:	0813c880 	call	813c88 <altera_avalon_jtag_uart_ioctl>
}
  81386c:	e037883a 	mov	sp,fp
  813870:	dfc00117 	ldw	ra,4(sp)
  813874:	df000017 	ldw	fp,0(sp)
  813878:	dec00204 	addi	sp,sp,8
  81387c:	f800283a 	ret

00813880 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  813880:	defffb04 	addi	sp,sp,-20
  813884:	dfc00415 	stw	ra,16(sp)
  813888:	df000315 	stw	fp,12(sp)
  81388c:	df000304 	addi	fp,sp,12
  813890:	e13ffd15 	stw	r4,-12(fp)
  813894:	e17ffe15 	stw	r5,-8(fp)
  813898:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81389c:	e0fffd17 	ldw	r3,-12(fp)
  8138a0:	00800044 	movi	r2,1
  8138a4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8138a8:	e0bffd17 	ldw	r2,-12(fp)
  8138ac:	10800017 	ldw	r2,0(r2)
  8138b0:	11000104 	addi	r4,r2,4
  8138b4:	e0bffd17 	ldw	r2,-12(fp)
  8138b8:	10800817 	ldw	r2,32(r2)
  8138bc:	1007883a 	mov	r3,r2
  8138c0:	2005883a 	mov	r2,r4
  8138c4:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  8138c8:	e13fff17 	ldw	r4,-4(fp)
  8138cc:	e17ffd17 	ldw	r5,-12(fp)
  8138d0:	01802074 	movhi	r6,129
  8138d4:	318e4e04 	addi	r6,r6,14648
  8138d8:	08127a00 	call	8127a0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8138dc:	e0bffd17 	ldw	r2,-12(fp)
  8138e0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8138e4:	e0bffd17 	ldw	r2,-12(fp)
  8138e8:	11000204 	addi	r4,r2,8
  8138ec:	008020b4 	movhi	r2,130
  8138f0:	10837c04 	addi	r2,r2,3568
  8138f4:	10800017 	ldw	r2,0(r2)
  8138f8:	100b883a 	mov	r5,r2
  8138fc:	01802074 	movhi	r6,129
  813900:	318ed904 	addi	r6,r6,15204
  813904:	e1fffd17 	ldw	r7,-12(fp)
  813908:	081b7380 	call	81b738 <alt_alarm_start>
  81390c:	1004403a 	cmpge	r2,r2,zero
  813910:	1000041e 	bne	r2,zero,813924 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  813914:	e0fffd17 	ldw	r3,-12(fp)
  813918:	00a00034 	movhi	r2,32768
  81391c:	10bfffc4 	addi	r2,r2,-1
  813920:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  813924:	e037883a 	mov	sp,fp
  813928:	dfc00117 	ldw	ra,4(sp)
  81392c:	df000017 	ldw	fp,0(sp)
  813930:	dec00204 	addi	sp,sp,8
  813934:	f800283a 	ret

00813938 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  813938:	defff704 	addi	sp,sp,-36
  81393c:	df000815 	stw	fp,32(sp)
  813940:	df000804 	addi	fp,sp,32
  813944:	e13ffe15 	stw	r4,-8(fp)
  813948:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  81394c:	e0bffe17 	ldw	r2,-8(fp)
  813950:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  813954:	e0bffd17 	ldw	r2,-12(fp)
  813958:	10800017 	ldw	r2,0(r2)
  81395c:	e0bffc15 	stw	r2,-16(fp)
  813960:	00000006 	br	813964 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813964:	e0bffc17 	ldw	r2,-16(fp)
  813968:	10800104 	addi	r2,r2,4
  81396c:	10800037 	ldwio	r2,0(r2)
  813970:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  813974:	e0bffb17 	ldw	r2,-20(fp)
  813978:	1080c00c 	andi	r2,r2,768
  81397c:	1005003a 	cmpeq	r2,r2,zero
  813980:	1000741e 	bne	r2,zero,813b54 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  813984:	e0bffb17 	ldw	r2,-20(fp)
  813988:	1080400c 	andi	r2,r2,256
  81398c:	1005003a 	cmpeq	r2,r2,zero
  813990:	1000351e 	bne	r2,zero,813a68 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  813994:	00800074 	movhi	r2,1
  813998:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81399c:	e0bffd17 	ldw	r2,-12(fp)
  8139a0:	10800a17 	ldw	r2,40(r2)
  8139a4:	10800044 	addi	r2,r2,1
  8139a8:	1081ffcc 	andi	r2,r2,2047
  8139ac:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  8139b0:	e0bffd17 	ldw	r2,-12(fp)
  8139b4:	10c00b17 	ldw	r3,44(r2)
  8139b8:	e0bff917 	ldw	r2,-28(fp)
  8139bc:	18801626 	beq	r3,r2,813a18 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8139c0:	e0bffc17 	ldw	r2,-16(fp)
  8139c4:	10800037 	ldwio	r2,0(r2)
  8139c8:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  8139cc:	e0bffa17 	ldw	r2,-24(fp)
  8139d0:	10a0000c 	andi	r2,r2,32768
  8139d4:	1005003a 	cmpeq	r2,r2,zero
  8139d8:	10000f1e 	bne	r2,zero,813a18 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8139dc:	e0bffd17 	ldw	r2,-12(fp)
  8139e0:	10c00a17 	ldw	r3,40(r2)
  8139e4:	e0bffa17 	ldw	r2,-24(fp)
  8139e8:	1009883a 	mov	r4,r2
  8139ec:	e0bffd17 	ldw	r2,-12(fp)
  8139f0:	1885883a 	add	r2,r3,r2
  8139f4:	10800e04 	addi	r2,r2,56
  8139f8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8139fc:	e0bffd17 	ldw	r2,-12(fp)
  813a00:	10800a17 	ldw	r2,40(r2)
  813a04:	10800044 	addi	r2,r2,1
  813a08:	10c1ffcc 	andi	r3,r2,2047
  813a0c:	e0bffd17 	ldw	r2,-12(fp)
  813a10:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  813a14:	003fe106 	br	81399c <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  813a18:	e0bffa17 	ldw	r2,-24(fp)
  813a1c:	10bfffec 	andhi	r2,r2,65535
  813a20:	1005003a 	cmpeq	r2,r2,zero
  813a24:	1000101e 	bne	r2,zero,813a68 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  813a28:	e0bffd17 	ldw	r2,-12(fp)
  813a2c:	10c00817 	ldw	r3,32(r2)
  813a30:	00bfff84 	movi	r2,-2
  813a34:	1886703a 	and	r3,r3,r2
  813a38:	e0bffd17 	ldw	r2,-12(fp)
  813a3c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  813a40:	e0bffc17 	ldw	r2,-16(fp)
  813a44:	11000104 	addi	r4,r2,4
  813a48:	e0bffd17 	ldw	r2,-12(fp)
  813a4c:	10800817 	ldw	r2,32(r2)
  813a50:	1007883a 	mov	r3,r2
  813a54:	2005883a 	mov	r2,r4
  813a58:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813a5c:	e0bffc17 	ldw	r2,-16(fp)
  813a60:	10800104 	addi	r2,r2,4
  813a64:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  813a68:	e0bffb17 	ldw	r2,-20(fp)
  813a6c:	1080800c 	andi	r2,r2,512
  813a70:	1005003a 	cmpeq	r2,r2,zero
  813a74:	103fbb1e 	bne	r2,zero,813964 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  813a78:	e0bffb17 	ldw	r2,-20(fp)
  813a7c:	10bfffec 	andhi	r2,r2,65535
  813a80:	1004d43a 	srli	r2,r2,16
  813a84:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  813a88:	00001506 	br	813ae0 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  813a8c:	e13ffc17 	ldw	r4,-16(fp)
  813a90:	e0bffd17 	ldw	r2,-12(fp)
  813a94:	10c00d17 	ldw	r3,52(r2)
  813a98:	e0bffd17 	ldw	r2,-12(fp)
  813a9c:	1885883a 	add	r2,r3,r2
  813aa0:	10820e04 	addi	r2,r2,2104
  813aa4:	10800003 	ldbu	r2,0(r2)
  813aa8:	10c03fcc 	andi	r3,r2,255
  813aac:	18c0201c 	xori	r3,r3,128
  813ab0:	18ffe004 	addi	r3,r3,-128
  813ab4:	2005883a 	mov	r2,r4
  813ab8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813abc:	e0bffd17 	ldw	r2,-12(fp)
  813ac0:	10800d17 	ldw	r2,52(r2)
  813ac4:	10800044 	addi	r2,r2,1
  813ac8:	10c1ffcc 	andi	r3,r2,2047
  813acc:	e0bffd17 	ldw	r2,-12(fp)
  813ad0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  813ad4:	e0bff817 	ldw	r2,-32(fp)
  813ad8:	10bfffc4 	addi	r2,r2,-1
  813adc:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  813ae0:	e0bff817 	ldw	r2,-32(fp)
  813ae4:	1005003a 	cmpeq	r2,r2,zero
  813ae8:	1000051e 	bne	r2,zero,813b00 <altera_avalon_jtag_uart_irq+0x1c8>
  813aec:	e0bffd17 	ldw	r2,-12(fp)
  813af0:	10c00d17 	ldw	r3,52(r2)
  813af4:	e0bffd17 	ldw	r2,-12(fp)
  813af8:	10800c17 	ldw	r2,48(r2)
  813afc:	18bfe31e 	bne	r3,r2,813a8c <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  813b00:	e0bff817 	ldw	r2,-32(fp)
  813b04:	1005003a 	cmpeq	r2,r2,zero
  813b08:	103f961e 	bne	r2,zero,813964 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  813b0c:	e0bffd17 	ldw	r2,-12(fp)
  813b10:	10c00817 	ldw	r3,32(r2)
  813b14:	00bfff44 	movi	r2,-3
  813b18:	1886703a 	and	r3,r3,r2
  813b1c:	e0bffd17 	ldw	r2,-12(fp)
  813b20:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  813b24:	e0bffd17 	ldw	r2,-12(fp)
  813b28:	10800017 	ldw	r2,0(r2)
  813b2c:	11000104 	addi	r4,r2,4
  813b30:	e0bffd17 	ldw	r2,-12(fp)
  813b34:	10800817 	ldw	r2,32(r2)
  813b38:	1007883a 	mov	r3,r2
  813b3c:	2005883a 	mov	r2,r4
  813b40:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813b44:	e0bffc17 	ldw	r2,-16(fp)
  813b48:	10800104 	addi	r2,r2,4
  813b4c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  813b50:	003f8406 	br	813964 <altera_avalon_jtag_uart_irq+0x2c>
}
  813b54:	e037883a 	mov	sp,fp
  813b58:	df000017 	ldw	fp,0(sp)
  813b5c:	dec00104 	addi	sp,sp,4
  813b60:	f800283a 	ret

00813b64 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  813b64:	defffc04 	addi	sp,sp,-16
  813b68:	df000315 	stw	fp,12(sp)
  813b6c:	df000304 	addi	fp,sp,12
  813b70:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  813b74:	e0bfff17 	ldw	r2,-4(fp)
  813b78:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  813b7c:	e0bffe17 	ldw	r2,-8(fp)
  813b80:	10800017 	ldw	r2,0(r2)
  813b84:	10800104 	addi	r2,r2,4
  813b88:	10800037 	ldwio	r2,0(r2)
  813b8c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  813b90:	e0bffd17 	ldw	r2,-12(fp)
  813b94:	1081000c 	andi	r2,r2,1024
  813b98:	1005003a 	cmpeq	r2,r2,zero
  813b9c:	10000c1e 	bne	r2,zero,813bd0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  813ba0:	e0bffe17 	ldw	r2,-8(fp)
  813ba4:	10800017 	ldw	r2,0(r2)
  813ba8:	11000104 	addi	r4,r2,4
  813bac:	e0bffe17 	ldw	r2,-8(fp)
  813bb0:	10800817 	ldw	r2,32(r2)
  813bb4:	10810014 	ori	r2,r2,1024
  813bb8:	1007883a 	mov	r3,r2
  813bbc:	2005883a 	mov	r2,r4
  813bc0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  813bc4:	e0bffe17 	ldw	r2,-8(fp)
  813bc8:	10000915 	stw	zero,36(r2)
  813bcc:	00000a06 	br	813bf8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  813bd0:	e0bffe17 	ldw	r2,-8(fp)
  813bd4:	10c00917 	ldw	r3,36(r2)
  813bd8:	00a00034 	movhi	r2,32768
  813bdc:	10bfff04 	addi	r2,r2,-4
  813be0:	10c00536 	bltu	r2,r3,813bf8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  813be4:	e0bffe17 	ldw	r2,-8(fp)
  813be8:	10800917 	ldw	r2,36(r2)
  813bec:	10c00044 	addi	r3,r2,1
  813bf0:	e0bffe17 	ldw	r2,-8(fp)
  813bf4:	10c00915 	stw	r3,36(r2)
  813bf8:	008020b4 	movhi	r2,130
  813bfc:	10837c04 	addi	r2,r2,3568
  813c00:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  813c04:	e037883a 	mov	sp,fp
  813c08:	df000017 	ldw	fp,0(sp)
  813c0c:	dec00104 	addi	sp,sp,4
  813c10:	f800283a 	ret

00813c14 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  813c14:	defffc04 	addi	sp,sp,-16
  813c18:	df000315 	stw	fp,12(sp)
  813c1c:	df000304 	addi	fp,sp,12
  813c20:	e13ffd15 	stw	r4,-12(fp)
  813c24:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  813c28:	00000706 	br	813c48 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  813c2c:	e0bffe17 	ldw	r2,-8(fp)
  813c30:	1090000c 	andi	r2,r2,16384
  813c34:	1005003a 	cmpeq	r2,r2,zero
  813c38:	1000031e 	bne	r2,zero,813c48 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  813c3c:	00bffd44 	movi	r2,-11
  813c40:	e0bfff15 	stw	r2,-4(fp)
  813c44:	00000b06 	br	813c74 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  813c48:	e0bffd17 	ldw	r2,-12(fp)
  813c4c:	10c00d17 	ldw	r3,52(r2)
  813c50:	e0bffd17 	ldw	r2,-12(fp)
  813c54:	10800c17 	ldw	r2,48(r2)
  813c58:	18800526 	beq	r3,r2,813c70 <altera_avalon_jtag_uart_close+0x5c>
  813c5c:	e0bffd17 	ldw	r2,-12(fp)
  813c60:	10c00917 	ldw	r3,36(r2)
  813c64:	e0bffd17 	ldw	r2,-12(fp)
  813c68:	10800117 	ldw	r2,4(r2)
  813c6c:	18bfef36 	bltu	r3,r2,813c2c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  813c70:	e03fff15 	stw	zero,-4(fp)
  813c74:	e0bfff17 	ldw	r2,-4(fp)
}
  813c78:	e037883a 	mov	sp,fp
  813c7c:	df000017 	ldw	fp,0(sp)
  813c80:	dec00104 	addi	sp,sp,4
  813c84:	f800283a 	ret

00813c88 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  813c88:	defff804 	addi	sp,sp,-32
  813c8c:	df000715 	stw	fp,28(sp)
  813c90:	df000704 	addi	fp,sp,28
  813c94:	e13ffb15 	stw	r4,-20(fp)
  813c98:	e17ffc15 	stw	r5,-16(fp)
  813c9c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  813ca0:	00bff9c4 	movi	r2,-25
  813ca4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  813ca8:	e0bffc17 	ldw	r2,-16(fp)
  813cac:	e0bfff15 	stw	r2,-4(fp)
  813cb0:	e0ffff17 	ldw	r3,-4(fp)
  813cb4:	189a8060 	cmpeqi	r2,r3,27137
  813cb8:	1000041e 	bne	r2,zero,813ccc <altera_avalon_jtag_uart_ioctl+0x44>
  813cbc:	e0ffff17 	ldw	r3,-4(fp)
  813cc0:	189a80a0 	cmpeqi	r2,r3,27138
  813cc4:	10001b1e 	bne	r2,zero,813d34 <altera_avalon_jtag_uart_ioctl+0xac>
  813cc8:	00002706 	br	813d68 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  813ccc:	e0bffb17 	ldw	r2,-20(fp)
  813cd0:	10c00117 	ldw	r3,4(r2)
  813cd4:	00a00034 	movhi	r2,32768
  813cd8:	10bfffc4 	addi	r2,r2,-1
  813cdc:	18802226 	beq	r3,r2,813d68 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  813ce0:	e0bffd17 	ldw	r2,-12(fp)
  813ce4:	10800017 	ldw	r2,0(r2)
  813ce8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  813cec:	e0bff917 	ldw	r2,-28(fp)
  813cf0:	10800090 	cmplti	r2,r2,2
  813cf4:	1000071e 	bne	r2,zero,813d14 <altera_avalon_jtag_uart_ioctl+0x8c>
  813cf8:	e0fff917 	ldw	r3,-28(fp)
  813cfc:	00a00034 	movhi	r2,32768
  813d00:	10bfffc4 	addi	r2,r2,-1
  813d04:	18800326 	beq	r3,r2,813d14 <altera_avalon_jtag_uart_ioctl+0x8c>
  813d08:	e0bff917 	ldw	r2,-28(fp)
  813d0c:	e0bffe15 	stw	r2,-8(fp)
  813d10:	00000306 	br	813d20 <altera_avalon_jtag_uart_ioctl+0x98>
  813d14:	00e00034 	movhi	r3,32768
  813d18:	18ffff84 	addi	r3,r3,-2
  813d1c:	e0fffe15 	stw	r3,-8(fp)
  813d20:	e0bffb17 	ldw	r2,-20(fp)
  813d24:	e0fffe17 	ldw	r3,-8(fp)
  813d28:	10c00115 	stw	r3,4(r2)
      rc = 0;
  813d2c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  813d30:	00000d06 	br	813d68 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  813d34:	e0bffb17 	ldw	r2,-20(fp)
  813d38:	10c00117 	ldw	r3,4(r2)
  813d3c:	00a00034 	movhi	r2,32768
  813d40:	10bfffc4 	addi	r2,r2,-1
  813d44:	18800826 	beq	r3,r2,813d68 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  813d48:	e13ffd17 	ldw	r4,-12(fp)
  813d4c:	e0bffb17 	ldw	r2,-20(fp)
  813d50:	10c00917 	ldw	r3,36(r2)
  813d54:	e0bffb17 	ldw	r2,-20(fp)
  813d58:	10800117 	ldw	r2,4(r2)
  813d5c:	1885803a 	cmpltu	r2,r3,r2
  813d60:	20800015 	stw	r2,0(r4)
      rc = 0;
  813d64:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  813d68:	e0bffa17 	ldw	r2,-24(fp)
}
  813d6c:	e037883a 	mov	sp,fp
  813d70:	df000017 	ldw	fp,0(sp)
  813d74:	dec00104 	addi	sp,sp,4
  813d78:	f800283a 	ret

00813d7c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  813d7c:	defff204 	addi	sp,sp,-56
  813d80:	dfc00d15 	stw	ra,52(sp)
  813d84:	df000c15 	stw	fp,48(sp)
  813d88:	df000c04 	addi	fp,sp,48
  813d8c:	e13ffb15 	stw	r4,-20(fp)
  813d90:	e17ffc15 	stw	r5,-16(fp)
  813d94:	e1bffd15 	stw	r6,-12(fp)
  813d98:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  813d9c:	e0bffc17 	ldw	r2,-16(fp)
  813da0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  813da4:	00004806 	br	813ec8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  813da8:	e0bffb17 	ldw	r2,-20(fp)
  813dac:	10800a17 	ldw	r2,40(r2)
  813db0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  813db4:	e0bffb17 	ldw	r2,-20(fp)
  813db8:	10800b17 	ldw	r2,44(r2)
  813dbc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  813dc0:	e0fff717 	ldw	r3,-36(fp)
  813dc4:	e0bff617 	ldw	r2,-40(fp)
  813dc8:	18800536 	bltu	r3,r2,813de0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  813dcc:	e0bff717 	ldw	r2,-36(fp)
  813dd0:	e0fff617 	ldw	r3,-40(fp)
  813dd4:	10c5c83a 	sub	r2,r2,r3
  813dd8:	e0bff815 	stw	r2,-32(fp)
  813ddc:	00000406 	br	813df0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  813de0:	00820004 	movi	r2,2048
  813de4:	e0fff617 	ldw	r3,-40(fp)
  813de8:	10c5c83a 	sub	r2,r2,r3
  813dec:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  813df0:	e0bff817 	ldw	r2,-32(fp)
  813df4:	1005003a 	cmpeq	r2,r2,zero
  813df8:	10001f1e 	bne	r2,zero,813e78 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  813dfc:	e0fffd17 	ldw	r3,-12(fp)
  813e00:	e0bff817 	ldw	r2,-32(fp)
  813e04:	1880022e 	bgeu	r3,r2,813e10 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  813e08:	e0bffd17 	ldw	r2,-12(fp)
  813e0c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  813e10:	e0bffb17 	ldw	r2,-20(fp)
  813e14:	10c00e04 	addi	r3,r2,56
  813e18:	e0bff617 	ldw	r2,-40(fp)
  813e1c:	1887883a 	add	r3,r3,r2
  813e20:	e0bffa17 	ldw	r2,-24(fp)
  813e24:	1009883a 	mov	r4,r2
  813e28:	180b883a 	mov	r5,r3
  813e2c:	e1bff817 	ldw	r6,-32(fp)
  813e30:	080f6440 	call	80f644 <memcpy>
      ptr   += n;
  813e34:	e0fff817 	ldw	r3,-32(fp)
  813e38:	e0bffa17 	ldw	r2,-24(fp)
  813e3c:	10c5883a 	add	r2,r2,r3
  813e40:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  813e44:	e0fffd17 	ldw	r3,-12(fp)
  813e48:	e0bff817 	ldw	r2,-32(fp)
  813e4c:	1885c83a 	sub	r2,r3,r2
  813e50:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813e54:	e0fff617 	ldw	r3,-40(fp)
  813e58:	e0bff817 	ldw	r2,-32(fp)
  813e5c:	1885883a 	add	r2,r3,r2
  813e60:	10c1ffcc 	andi	r3,r2,2047
  813e64:	e0bffb17 	ldw	r2,-20(fp)
  813e68:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  813e6c:	e0bffd17 	ldw	r2,-12(fp)
  813e70:	10800048 	cmpgei	r2,r2,1
  813e74:	103fcc1e 	bne	r2,zero,813da8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  813e78:	e0fffa17 	ldw	r3,-24(fp)
  813e7c:	e0bffc17 	ldw	r2,-16(fp)
  813e80:	1880141e 	bne	r3,r2,813ed4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  813e84:	e0bffe17 	ldw	r2,-8(fp)
  813e88:	1090000c 	andi	r2,r2,16384
  813e8c:	1004c03a 	cmpne	r2,r2,zero
  813e90:	1000101e 	bne	r2,zero,813ed4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  813e94:	e0bffb17 	ldw	r2,-20(fp)
  813e98:	10c00a17 	ldw	r3,40(r2)
  813e9c:	e0bff717 	ldw	r2,-36(fp)
  813ea0:	1880051e 	bne	r3,r2,813eb8 <altera_avalon_jtag_uart_read+0x13c>
  813ea4:	e0bffb17 	ldw	r2,-20(fp)
  813ea8:	10c00917 	ldw	r3,36(r2)
  813eac:	e0bffb17 	ldw	r2,-20(fp)
  813eb0:	10800117 	ldw	r2,4(r2)
  813eb4:	18bff736 	bltu	r3,r2,813e94 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  813eb8:	e0bffb17 	ldw	r2,-20(fp)
  813ebc:	10c00a17 	ldw	r3,40(r2)
  813ec0:	e0bff717 	ldw	r2,-36(fp)
  813ec4:	18800326 	beq	r3,r2,813ed4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  813ec8:	e0bffd17 	ldw	r2,-12(fp)
  813ecc:	10800048 	cmpgei	r2,r2,1
  813ed0:	103fb51e 	bne	r2,zero,813da8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  813ed4:	e0fffa17 	ldw	r3,-24(fp)
  813ed8:	e0bffc17 	ldw	r2,-16(fp)
  813edc:	18801926 	beq	r3,r2,813f44 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813ee0:	0005303a 	rdctl	r2,status
  813ee4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813ee8:	e0fff517 	ldw	r3,-44(fp)
  813eec:	00bfff84 	movi	r2,-2
  813ef0:	1884703a 	and	r2,r3,r2
  813ef4:	1001703a 	wrctl	status,r2
  
  return context;
  813ef8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  813efc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  813f00:	e0bffb17 	ldw	r2,-20(fp)
  813f04:	10800817 	ldw	r2,32(r2)
  813f08:	10c00054 	ori	r3,r2,1
  813f0c:	e0bffb17 	ldw	r2,-20(fp)
  813f10:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  813f14:	e0bffb17 	ldw	r2,-20(fp)
  813f18:	10800017 	ldw	r2,0(r2)
  813f1c:	11000104 	addi	r4,r2,4
  813f20:	e0bffb17 	ldw	r2,-20(fp)
  813f24:	10800817 	ldw	r2,32(r2)
  813f28:	1007883a 	mov	r3,r2
  813f2c:	2005883a 	mov	r2,r4
  813f30:	10c00035 	stwio	r3,0(r2)
  813f34:	e0bff917 	ldw	r2,-28(fp)
  813f38:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813f3c:	e0bff417 	ldw	r2,-48(fp)
  813f40:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  813f44:	e0fffa17 	ldw	r3,-24(fp)
  813f48:	e0bffc17 	ldw	r2,-16(fp)
  813f4c:	18800526 	beq	r3,r2,813f64 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  813f50:	e0fffa17 	ldw	r3,-24(fp)
  813f54:	e0bffc17 	ldw	r2,-16(fp)
  813f58:	1887c83a 	sub	r3,r3,r2
  813f5c:	e0ffff15 	stw	r3,-4(fp)
  813f60:	00000906 	br	813f88 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  813f64:	e0bffe17 	ldw	r2,-8(fp)
  813f68:	1090000c 	andi	r2,r2,16384
  813f6c:	1005003a 	cmpeq	r2,r2,zero
  813f70:	1000031e 	bne	r2,zero,813f80 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  813f74:	00bffd44 	movi	r2,-11
  813f78:	e0bfff15 	stw	r2,-4(fp)
  813f7c:	00000206 	br	813f88 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  813f80:	00bffec4 	movi	r2,-5
  813f84:	e0bfff15 	stw	r2,-4(fp)
  813f88:	e0bfff17 	ldw	r2,-4(fp)
}
  813f8c:	e037883a 	mov	sp,fp
  813f90:	dfc00117 	ldw	ra,4(sp)
  813f94:	df000017 	ldw	fp,0(sp)
  813f98:	dec00204 	addi	sp,sp,8
  813f9c:	f800283a 	ret

00813fa0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  813fa0:	defff204 	addi	sp,sp,-56
  813fa4:	dfc00d15 	stw	ra,52(sp)
  813fa8:	df000c15 	stw	fp,48(sp)
  813fac:	df000c04 	addi	fp,sp,48
  813fb0:	e13ffb15 	stw	r4,-20(fp)
  813fb4:	e17ffc15 	stw	r5,-16(fp)
  813fb8:	e1bffd15 	stw	r6,-12(fp)
  813fbc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  813fc0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  813fc4:	e0bffc17 	ldw	r2,-16(fp)
  813fc8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  813fcc:	00003a06 	br	8140b8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  813fd0:	e0bffb17 	ldw	r2,-20(fp)
  813fd4:	10800c17 	ldw	r2,48(r2)
  813fd8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  813fdc:	e0bffb17 	ldw	r2,-20(fp)
  813fe0:	10800d17 	ldw	r2,52(r2)
  813fe4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  813fe8:	e0fffa17 	ldw	r3,-24(fp)
  813fec:	e0bff917 	ldw	r2,-28(fp)
  813ff0:	1880062e 	bgeu	r3,r2,81400c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  813ff4:	e0fff917 	ldw	r3,-28(fp)
  813ff8:	e0bffa17 	ldw	r2,-24(fp)
  813ffc:	1885c83a 	sub	r2,r3,r2
  814000:	10bfffc4 	addi	r2,r2,-1
  814004:	e0bff815 	stw	r2,-32(fp)
  814008:	00000c06 	br	81403c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  81400c:	e0bff917 	ldw	r2,-28(fp)
  814010:	1005003a 	cmpeq	r2,r2,zero
  814014:	1000051e 	bne	r2,zero,81402c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  814018:	00820004 	movi	r2,2048
  81401c:	e0fffa17 	ldw	r3,-24(fp)
  814020:	10c5c83a 	sub	r2,r2,r3
  814024:	e0bff815 	stw	r2,-32(fp)
  814028:	00000406 	br	81403c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  81402c:	0081ffc4 	movi	r2,2047
  814030:	e0fffa17 	ldw	r3,-24(fp)
  814034:	10c5c83a 	sub	r2,r2,r3
  814038:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  81403c:	e0bff817 	ldw	r2,-32(fp)
  814040:	1005003a 	cmpeq	r2,r2,zero
  814044:	10001f1e 	bne	r2,zero,8140c4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  814048:	e0fffd17 	ldw	r3,-12(fp)
  81404c:	e0bff817 	ldw	r2,-32(fp)
  814050:	1880022e 	bgeu	r3,r2,81405c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  814054:	e0bffd17 	ldw	r2,-12(fp)
  814058:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  81405c:	e0bffb17 	ldw	r2,-20(fp)
  814060:	10c20e04 	addi	r3,r2,2104
  814064:	e0bffa17 	ldw	r2,-24(fp)
  814068:	1885883a 	add	r2,r3,r2
  81406c:	e0fffc17 	ldw	r3,-16(fp)
  814070:	1009883a 	mov	r4,r2
  814074:	180b883a 	mov	r5,r3
  814078:	e1bff817 	ldw	r6,-32(fp)
  81407c:	080f6440 	call	80f644 <memcpy>
      ptr   += n;
  814080:	e0fff817 	ldw	r3,-32(fp)
  814084:	e0bffc17 	ldw	r2,-16(fp)
  814088:	10c5883a 	add	r2,r2,r3
  81408c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  814090:	e0fffd17 	ldw	r3,-12(fp)
  814094:	e0bff817 	ldw	r2,-32(fp)
  814098:	1885c83a 	sub	r2,r3,r2
  81409c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8140a0:	e0fffa17 	ldw	r3,-24(fp)
  8140a4:	e0bff817 	ldw	r2,-32(fp)
  8140a8:	1885883a 	add	r2,r3,r2
  8140ac:	10c1ffcc 	andi	r3,r2,2047
  8140b0:	e0bffb17 	ldw	r2,-20(fp)
  8140b4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8140b8:	e0bffd17 	ldw	r2,-12(fp)
  8140bc:	10800048 	cmpgei	r2,r2,1
  8140c0:	103fc31e 	bne	r2,zero,813fd0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8140c4:	0005303a 	rdctl	r2,status
  8140c8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8140cc:	e0fff517 	ldw	r3,-44(fp)
  8140d0:	00bfff84 	movi	r2,-2
  8140d4:	1884703a 	and	r2,r3,r2
  8140d8:	1001703a 	wrctl	status,r2
  
  return context;
  8140dc:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8140e0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8140e4:	e0bffb17 	ldw	r2,-20(fp)
  8140e8:	10800817 	ldw	r2,32(r2)
  8140ec:	10c00094 	ori	r3,r2,2
  8140f0:	e0bffb17 	ldw	r2,-20(fp)
  8140f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8140f8:	e0bffb17 	ldw	r2,-20(fp)
  8140fc:	10800017 	ldw	r2,0(r2)
  814100:	11000104 	addi	r4,r2,4
  814104:	e0bffb17 	ldw	r2,-20(fp)
  814108:	10800817 	ldw	r2,32(r2)
  81410c:	1007883a 	mov	r3,r2
  814110:	2005883a 	mov	r2,r4
  814114:	10c00035 	stwio	r3,0(r2)
  814118:	e0bff717 	ldw	r2,-36(fp)
  81411c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814120:	e0bff417 	ldw	r2,-48(fp)
  814124:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  814128:	e0bffd17 	ldw	r2,-12(fp)
  81412c:	10800050 	cmplti	r2,r2,1
  814130:	1000111e 	bne	r2,zero,814178 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  814134:	e0bffe17 	ldw	r2,-8(fp)
  814138:	1090000c 	andi	r2,r2,16384
  81413c:	1004c03a 	cmpne	r2,r2,zero
  814140:	1000101e 	bne	r2,zero,814184 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  814144:	e0bffb17 	ldw	r2,-20(fp)
  814148:	10c00d17 	ldw	r3,52(r2)
  81414c:	e0bff917 	ldw	r2,-28(fp)
  814150:	1880051e 	bne	r3,r2,814168 <altera_avalon_jtag_uart_write+0x1c8>
  814154:	e0bffb17 	ldw	r2,-20(fp)
  814158:	10c00917 	ldw	r3,36(r2)
  81415c:	e0bffb17 	ldw	r2,-20(fp)
  814160:	10800117 	ldw	r2,4(r2)
  814164:	18bff736 	bltu	r3,r2,814144 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  814168:	e0bffb17 	ldw	r2,-20(fp)
  81416c:	10c00d17 	ldw	r3,52(r2)
  814170:	e0bff917 	ldw	r2,-28(fp)
  814174:	18800326 	beq	r3,r2,814184 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  814178:	e0bffd17 	ldw	r2,-12(fp)
  81417c:	10800048 	cmpgei	r2,r2,1
  814180:	103fcd1e 	bne	r2,zero,8140b8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  814184:	e0fffc17 	ldw	r3,-16(fp)
  814188:	e0bff617 	ldw	r2,-40(fp)
  81418c:	18800526 	beq	r3,r2,8141a4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  814190:	e0fffc17 	ldw	r3,-16(fp)
  814194:	e0bff617 	ldw	r2,-40(fp)
  814198:	1887c83a 	sub	r3,r3,r2
  81419c:	e0ffff15 	stw	r3,-4(fp)
  8141a0:	00000906 	br	8141c8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  8141a4:	e0bffe17 	ldw	r2,-8(fp)
  8141a8:	1090000c 	andi	r2,r2,16384
  8141ac:	1005003a 	cmpeq	r2,r2,zero
  8141b0:	1000031e 	bne	r2,zero,8141c0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  8141b4:	00bffd44 	movi	r2,-11
  8141b8:	e0bfff15 	stw	r2,-4(fp)
  8141bc:	00000206 	br	8141c8 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  8141c0:	00bffec4 	movi	r2,-5
  8141c4:	e0bfff15 	stw	r2,-4(fp)
  8141c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8141cc:	e037883a 	mov	sp,fp
  8141d0:	dfc00117 	ldw	ra,4(sp)
  8141d4:	df000017 	ldw	fp,0(sp)
  8141d8:	dec00204 	addi	sp,sp,8
  8141dc:	f800283a 	ret

008141e0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8141e0:	defff904 	addi	sp,sp,-28
  8141e4:	dfc00615 	stw	ra,24(sp)
  8141e8:	df000515 	stw	fp,20(sp)
  8141ec:	df000504 	addi	fp,sp,20
  8141f0:	e13ffe15 	stw	r4,-8(fp)
  8141f4:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8141f8:	e0bffe17 	ldw	r2,-8(fp)
  8141fc:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  814200:	e0bffe17 	ldw	r2,-8(fp)
  814204:	10800104 	addi	r2,r2,4
  814208:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81420c:	0005303a 	rdctl	r2,status
  814210:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814214:	e0fffc17 	ldw	r3,-16(fp)
  814218:	00bfff84 	movi	r2,-2
  81421c:	1884703a 	and	r2,r3,r2
  814220:	1001703a 	wrctl	status,r2
  
  return context;
  814224:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  814228:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
  81422c:	081309c0 	call	81309c <alt_tick>
  814230:	e0bffd17 	ldw	r2,-12(fp)
  814234:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814238:	e0bffb17 	ldw	r2,-20(fp)
  81423c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  814240:	e037883a 	mov	sp,fp
  814244:	dfc00117 	ldw	ra,4(sp)
  814248:	df000017 	ldw	fp,0(sp)
  81424c:	dec00204 	addi	sp,sp,8
  814250:	f800283a 	ret

00814254 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  814254:	defff904 	addi	sp,sp,-28
  814258:	dfc00615 	stw	ra,24(sp)
  81425c:	df000515 	stw	fp,20(sp)
  814260:	df000504 	addi	fp,sp,20
  814264:	e13ffc15 	stw	r4,-16(fp)
  814268:	e17ffd15 	stw	r5,-12(fp)
  81426c:	e1bffe15 	stw	r6,-8(fp)
  814270:	e1ffff15 	stw	r7,-4(fp)
  814274:	e0bfff17 	ldw	r2,-4(fp)
  814278:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  81427c:	008020b4 	movhi	r2,130
  814280:	10837c04 	addi	r2,r2,3568
  814284:	10800017 	ldw	r2,0(r2)
  814288:	1004c03a 	cmpne	r2,r2,zero
  81428c:	1000041e 	bne	r2,zero,8142a0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  814290:	00c020b4 	movhi	r3,130
  814294:	18c37c04 	addi	r3,r3,3568
  814298:	e0bffb17 	ldw	r2,-20(fp)
  81429c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8142a0:	e0bffc17 	ldw	r2,-16(fp)
  8142a4:	10800104 	addi	r2,r2,4
  8142a8:	1007883a 	mov	r3,r2
  8142ac:	008001c4 	movi	r2,7
  8142b0:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  8142b4:	e13ffe17 	ldw	r4,-8(fp)
  8142b8:	e17ffc17 	ldw	r5,-16(fp)
  8142bc:	01802074 	movhi	r6,129
  8142c0:	31907804 	addi	r6,r6,16864
  8142c4:	08127a00 	call	8127a0 <alt_irq_register>
#endif  
}
  8142c8:	e037883a 	mov	sp,fp
  8142cc:	dfc00117 	ldw	ra,4(sp)
  8142d0:	df000017 	ldw	fp,0(sp)
  8142d4:	dec00204 	addi	sp,sp,8
  8142d8:	f800283a 	ret

008142dc <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  8142dc:	defffd04 	addi	sp,sp,-12
  8142e0:	df000215 	stw	fp,8(sp)
  8142e4:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
  8142e8:	008020b4 	movhi	r2,130
  8142ec:	10837e04 	addi	r2,r2,3576
  8142f0:	10800017 	ldw	r2,0(r2)
  8142f4:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
  8142f8:	008020b4 	movhi	r2,130
  8142fc:	10837f04 	addi	r2,r2,3580
  814300:	10800017 	ldw	r2,0(r2)
  814304:	1004c03a 	cmpne	r2,r2,zero
  814308:	1000031e 	bne	r2,zero,814318 <alt_timestamp_start+0x3c>
  {
    return -1;
  81430c:	00bfffc4 	movi	r2,-1
  814310:	e0bfff15 	stw	r2,-4(fp)
  814314:	00001506 	br	81436c <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
  814318:	e0bffe17 	ldw	r2,-8(fp)
  81431c:	10800104 	addi	r2,r2,4
  814320:	1007883a 	mov	r3,r2
  814324:	00800204 	movi	r2,8
  814328:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
  81432c:	e0bffe17 	ldw	r2,-8(fp)
  814330:	10800204 	addi	r2,r2,8
  814334:	1007883a 	mov	r3,r2
  814338:	00bfffd4 	movui	r2,65535
  81433c:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
  814340:	e0bffe17 	ldw	r2,-8(fp)
  814344:	10800304 	addi	r2,r2,12
  814348:	1007883a 	mov	r3,r2
  81434c:	00bfffd4 	movui	r2,65535
  814350:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
  814354:	e0bffe17 	ldw	r2,-8(fp)
  814358:	10800104 	addi	r2,r2,4
  81435c:	1007883a 	mov	r3,r2
  814360:	00800104 	movi	r2,4
  814364:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
  814368:	e03fff15 	stw	zero,-4(fp)
  81436c:	e0bfff17 	ldw	r2,-4(fp)
}
  814370:	e037883a 	mov	sp,fp
  814374:	df000017 	ldw	fp,0(sp)
  814378:	dec00104 	addi	sp,sp,4
  81437c:	f800283a 	ret

00814380 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
  814380:	defffb04 	addi	sp,sp,-20
  814384:	df000415 	stw	fp,16(sp)
  814388:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
  81438c:	008020b4 	movhi	r2,130
  814390:	10837e04 	addi	r2,r2,3576
  814394:	10800017 	ldw	r2,0(r2)
  814398:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
  81439c:	008020b4 	movhi	r2,130
  8143a0:	10837f04 	addi	r2,r2,3580
  8143a4:	10800017 	ldw	r2,0(r2)
  8143a8:	1004c03a 	cmpne	r2,r2,zero
  8143ac:	1000031e 	bne	r2,zero,8143bc <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
  8143b0:	00bfffc4 	movi	r2,-1
  8143b4:	e0bfff15 	stw	r2,-4(fp)
  8143b8:	00001306 	br	814408 <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
  8143bc:	e0bffe17 	ldw	r2,-8(fp)
  8143c0:	10800404 	addi	r2,r2,16
  8143c4:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
  8143c8:	e0bffe17 	ldw	r2,-8(fp)
  8143cc:	10800404 	addi	r2,r2,16
  8143d0:	10800037 	ldwio	r2,0(r2)
  8143d4:	10bfffcc 	andi	r2,r2,65535
  8143d8:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
  8143dc:	e0bffe17 	ldw	r2,-8(fp)
  8143e0:	10800504 	addi	r2,r2,20
  8143e4:	10800037 	ldwio	r2,0(r2)
  8143e8:	10bfffcc 	andi	r2,r2,65535
  8143ec:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
  8143f0:	e0bffc17 	ldw	r2,-16(fp)
  8143f4:	1006943a 	slli	r3,r2,16
  8143f8:	e0bffd17 	ldw	r2,-12(fp)
  8143fc:	1884b03a 	or	r2,r3,r2
  814400:	0084303a 	nor	r2,zero,r2
  814404:	e0bfff15 	stw	r2,-4(fp)
  814408:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
  81440c:	e037883a 	mov	sp,fp
  814410:	df000017 	ldw	fp,0(sp)
  814414:	dec00104 	addi	sp,sp,4
  814418:	f800283a 	ret

0081441c <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
  81441c:	deffff04 	addi	sp,sp,-4
  814420:	df000015 	stw	fp,0(sp)
  814424:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
  814428:	008020b4 	movhi	r2,130
  81442c:	10837f04 	addi	r2,r2,3580
  814430:	10800017 	ldw	r2,0(r2)
}
  814434:	e037883a 	mov	sp,fp
  814438:	df000017 	ldw	fp,0(sp)
  81443c:	dec00104 	addi	sp,sp,4
  814440:	f800283a 	ret

00814444 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
  814444:	defffc04 	addi	sp,sp,-16
  814448:	dfc00315 	stw	ra,12(sp)
  81444c:	df000215 	stw	fp,8(sp)
  814450:	df000204 	addi	fp,sp,8
  814454:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  814458:	e13fff17 	ldw	r4,-4(fp)
  81445c:	014020b4 	movhi	r5,130
  814460:	297c4104 	addi	r5,r5,-3836
  814464:	081bbf80 	call	81bbf8 <alt_find_dev>
  814468:	e0bffe15 	stw	r2,-8(fp)
  return dev;
  81446c:	e0bffe17 	ldw	r2,-8(fp)
}
  814470:	e037883a 	mov	sp,fp
  814474:	dfc00117 	ldw	ra,4(sp)
  814478:	df000017 	ldw	fp,0(sp)
  81447c:	dec00204 	addi	sp,sp,8
  814480:	f800283a 	ret

00814484 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
  814484:	defffd04 	addi	sp,sp,-12
  814488:	df000215 	stw	fp,8(sp)
  81448c:	df000204 	addi	fp,sp,8
  814490:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  814494:	e0bfff17 	ldw	r2,-4(fp)
  814498:	10800a17 	ldw	r2,40(r2)
  81449c:	10800037 	ldwio	r2,0(r2)
  8144a0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
  8144a4:	e0bffe17 	ldw	r2,-8(fp)
  8144a8:	10800054 	ori	r2,r2,1
  8144ac:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8144b0:	e0bfff17 	ldw	r2,-4(fp)
  8144b4:	10800a17 	ldw	r2,40(r2)
  8144b8:	e0fffe17 	ldw	r3,-8(fp)
  8144bc:	10c00035 	stwio	r3,0(r2)
}
  8144c0:	e037883a 	mov	sp,fp
  8144c4:	df000017 	ldw	fp,0(sp)
  8144c8:	dec00104 	addi	sp,sp,4
  8144cc:	f800283a 	ret

008144d0 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
  8144d0:	defffd04 	addi	sp,sp,-12
  8144d4:	df000215 	stw	fp,8(sp)
  8144d8:	df000204 	addi	fp,sp,8
  8144dc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8144e0:	e0bfff17 	ldw	r2,-4(fp)
  8144e4:	10800a17 	ldw	r2,40(r2)
  8144e8:	10800037 	ldwio	r2,0(r2)
  8144ec:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
  8144f0:	e0fffe17 	ldw	r3,-8(fp)
  8144f4:	00bfff84 	movi	r2,-2
  8144f8:	1884703a 	and	r2,r3,r2
  8144fc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  814500:	e0bfff17 	ldw	r2,-4(fp)
  814504:	10800a17 	ldw	r2,40(r2)
  814508:	e0fffe17 	ldw	r3,-8(fp)
  81450c:	10c00035 	stwio	r3,0(r2)
}
  814510:	e037883a 	mov	sp,fp
  814514:	df000017 	ldw	fp,0(sp)
  814518:	dec00104 	addi	sp,sp,4
  81451c:	f800283a 	ret

00814520 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
  814520:	defffd04 	addi	sp,sp,-12
  814524:	df000215 	stw	fp,8(sp)
  814528:	df000204 	addi	fp,sp,8
  81452c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  814530:	e0bfff17 	ldw	r2,-4(fp)
  814534:	10800a17 	ldw	r2,40(r2)
  814538:	10800037 	ldwio	r2,0(r2)
  81453c:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
  814540:	e0bffe17 	ldw	r2,-8(fp)
  814544:	10800094 	ori	r2,r2,2
  814548:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81454c:	e0bfff17 	ldw	r2,-4(fp)
  814550:	10800a17 	ldw	r2,40(r2)
  814554:	e0fffe17 	ldw	r3,-8(fp)
  814558:	10c00035 	stwio	r3,0(r2)
}
  81455c:	e037883a 	mov	sp,fp
  814560:	df000017 	ldw	fp,0(sp)
  814564:	dec00104 	addi	sp,sp,4
  814568:	f800283a 	ret

0081456c <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
  81456c:	defffd04 	addi	sp,sp,-12
  814570:	df000215 	stw	fp,8(sp)
  814574:	df000204 	addi	fp,sp,8
  814578:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81457c:	e0bfff17 	ldw	r2,-4(fp)
  814580:	10800a17 	ldw	r2,40(r2)
  814584:	10800037 	ldwio	r2,0(r2)
  814588:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
  81458c:	e0fffe17 	ldw	r3,-8(fp)
  814590:	00bfff44 	movi	r2,-3
  814594:	1884703a 	and	r2,r3,r2
  814598:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81459c:	e0bfff17 	ldw	r2,-4(fp)
  8145a0:	10800a17 	ldw	r2,40(r2)
  8145a4:	e0fffe17 	ldw	r3,-8(fp)
  8145a8:	10c00035 	stwio	r3,0(r2)
}
  8145ac:	e037883a 	mov	sp,fp
  8145b0:	df000017 	ldw	fp,0(sp)
  8145b4:	dec00104 	addi	sp,sp,4
  8145b8:	f800283a 	ret

008145bc <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
  8145bc:	defffd04 	addi	sp,sp,-12
  8145c0:	df000215 	stw	fp,8(sp)
  8145c4:	df000204 	addi	fp,sp,8
  8145c8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8145cc:	e0bfff17 	ldw	r2,-4(fp)
  8145d0:	10800a17 	ldw	r2,40(r2)
  8145d4:	10800037 	ldwio	r2,0(r2)
  8145d8:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
  8145dc:	e0bffe17 	ldw	r2,-8(fp)
  8145e0:	1080400c 	andi	r2,r2,256
  8145e4:	1004c03a 	cmpne	r2,r2,zero
}
  8145e8:	e037883a 	mov	sp,fp
  8145ec:	df000017 	ldw	fp,0(sp)
  8145f0:	dec00104 	addi	sp,sp,4
  8145f4:	f800283a 	ret

008145f8 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
  8145f8:	defffd04 	addi	sp,sp,-12
  8145fc:	df000215 	stw	fp,8(sp)
  814600:	df000204 	addi	fp,sp,8
  814604:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  814608:	e0bfff17 	ldw	r2,-4(fp)
  81460c:	10800a17 	ldw	r2,40(r2)
  814610:	10800037 	ldwio	r2,0(r2)
  814614:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
  814618:	e0bffe17 	ldw	r2,-8(fp)
  81461c:	1080800c 	andi	r2,r2,512
  814620:	1004c03a 	cmpne	r2,r2,zero
}
  814624:	e037883a 	mov	sp,fp
  814628:	df000017 	ldw	fp,0(sp)
  81462c:	dec00104 	addi	sp,sp,4
  814630:	f800283a 	ret

00814634 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
  814634:	defffd04 	addi	sp,sp,-12
  814638:	df000215 	stw	fp,8(sp)
  81463c:	df000204 	addi	fp,sp,8
  814640:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  814644:	e0bfff17 	ldw	r2,-4(fp)
  814648:	10800a17 	ldw	r2,40(r2)
  81464c:	10800037 	ldwio	r2,0(r2)
  814650:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
  814654:	e0bffe17 	ldw	r2,-8(fp)
  814658:	10800114 	ori	r2,r2,4
  81465c:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  814660:	e0bffe17 	ldw	r2,-8(fp)
  814664:	10800214 	ori	r2,r2,8
  814668:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81466c:	e0bfff17 	ldw	r2,-4(fp)
  814670:	10800a17 	ldw	r2,40(r2)
  814674:	e0fffe17 	ldw	r3,-8(fp)
  814678:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
  81467c:	e0fffe17 	ldw	r3,-8(fp)
  814680:	00bffec4 	movi	r2,-5
  814684:	1884703a 	and	r2,r3,r2
  814688:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
  81468c:	e0fffe17 	ldw	r3,-8(fp)
  814690:	00bffdc4 	movi	r2,-9
  814694:	1884703a 	and	r2,r3,r2
  814698:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81469c:	e0bfff17 	ldw	r2,-4(fp)
  8146a0:	10800a17 	ldw	r2,40(r2)
  8146a4:	e0fffe17 	ldw	r3,-8(fp)
  8146a8:	10c00035 	stwio	r3,0(r2)
}
  8146ac:	e037883a 	mov	sp,fp
  8146b0:	df000017 	ldw	fp,0(sp)
  8146b4:	dec00104 	addi	sp,sp,4
  8146b8:	f800283a 	ret

008146bc <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
  8146bc:	defffb04 	addi	sp,sp,-20
  8146c0:	df000415 	stw	fp,16(sp)
  8146c4:	df000404 	addi	fp,sp,16
  8146c8:	e13ffd15 	stw	r4,-12(fp)
  8146cc:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  8146d0:	e0bffd17 	ldw	r2,-12(fp)
  8146d4:	10800a17 	ldw	r2,40(r2)
  8146d8:	10800104 	addi	r2,r2,4
  8146dc:	10800037 	ldwio	r2,0(r2)
  8146e0:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  8146e4:	e0bffe17 	ldw	r2,-8(fp)
  8146e8:	1004c03a 	cmpne	r2,r2,zero
  8146ec:	1000051e 	bne	r2,zero,814704 <alt_up_audio_read_fifo_avail+0x48>
  8146f0:	e0bffc17 	ldw	r2,-16(fp)
  8146f4:	10bfc00c 	andi	r2,r2,65280
  8146f8:	1004d23a 	srli	r2,r2,8
  8146fc:	e0bfff15 	stw	r2,-4(fp)
  814700:	00000306 	br	814710 <alt_up_audio_read_fifo_avail+0x54>
  814704:	e0bffc17 	ldw	r2,-16(fp)
  814708:	10803fcc 	andi	r2,r2,255
  81470c:	e0bfff15 	stw	r2,-4(fp)
  814710:	e0bfff17 	ldw	r2,-4(fp)
  814714:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
  814718:	e0bffc17 	ldw	r2,-16(fp)
}
  81471c:	e037883a 	mov	sp,fp
  814720:	df000017 	ldw	fp,0(sp)
  814724:	dec00104 	addi	sp,sp,4
  814728:	f800283a 	ret

0081472c <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  81472c:	defff904 	addi	sp,sp,-28
  814730:	dfc00615 	stw	ra,24(sp)
  814734:	df000515 	stw	fp,20(sp)
  814738:	df000504 	addi	fp,sp,20
  81473c:	e13ffc15 	stw	r4,-16(fp)
  814740:	e17ffd15 	stw	r5,-12(fp)
  814744:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
  814748:	e13ffc17 	ldw	r4,-16(fp)
  81474c:	01400044 	movi	r5,1
  814750:	08146bc0 	call	8146bc <alt_up_audio_read_fifo_avail>
  814754:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  814758:	e0bffb17 	ldw	r2,-20(fp)
  81475c:	10801868 	cmpgeui	r2,r2,97
  814760:	1000021e 	bne	r2,zero,81476c <alt_up_audio_record_r+0x40>
		return 0;
  814764:	e03fff15 	stw	zero,-4(fp)
  814768:	00000606 	br	814784 <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  81476c:	e13ffc17 	ldw	r4,-16(fp)
  814770:	e17ffd17 	ldw	r5,-12(fp)
  814774:	e1bffe17 	ldw	r6,-8(fp)
  814778:	01c00044 	movi	r7,1
  81477c:	08149600 	call	814960 <alt_up_audio_read_fifo>
  814780:	e0bfff15 	stw	r2,-4(fp)
  814784:	e0bfff17 	ldw	r2,-4(fp)
}
  814788:	e037883a 	mov	sp,fp
  81478c:	dfc00117 	ldw	ra,4(sp)
  814790:	df000017 	ldw	fp,0(sp)
  814794:	dec00204 	addi	sp,sp,8
  814798:	f800283a 	ret

0081479c <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  81479c:	defff904 	addi	sp,sp,-28
  8147a0:	dfc00615 	stw	ra,24(sp)
  8147a4:	df000515 	stw	fp,20(sp)
  8147a8:	df000504 	addi	fp,sp,20
  8147ac:	e13ffc15 	stw	r4,-16(fp)
  8147b0:	e17ffd15 	stw	r5,-12(fp)
  8147b4:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
  8147b8:	e13ffc17 	ldw	r4,-16(fp)
  8147bc:	000b883a 	mov	r5,zero
  8147c0:	08146bc0 	call	8146bc <alt_up_audio_read_fifo_avail>
  8147c4:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  8147c8:	e0bffb17 	ldw	r2,-20(fp)
  8147cc:	10801868 	cmpgeui	r2,r2,97
  8147d0:	1000021e 	bne	r2,zero,8147dc <alt_up_audio_record_l+0x40>
		return 0;
  8147d4:	e03fff15 	stw	zero,-4(fp)
  8147d8:	00000606 	br	8147f4 <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  8147dc:	e13ffc17 	ldw	r4,-16(fp)
  8147e0:	e17ffd17 	ldw	r5,-12(fp)
  8147e4:	e1bffe17 	ldw	r6,-8(fp)
  8147e8:	000f883a 	mov	r7,zero
  8147ec:	08149600 	call	814960 <alt_up_audio_read_fifo>
  8147f0:	e0bfff15 	stw	r2,-4(fp)
  8147f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8147f8:	e037883a 	mov	sp,fp
  8147fc:	dfc00117 	ldw	ra,4(sp)
  814800:	df000017 	ldw	fp,0(sp)
  814804:	dec00204 	addi	sp,sp,8
  814808:	f800283a 	ret

0081480c <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
  81480c:	defffb04 	addi	sp,sp,-20
  814810:	df000415 	stw	fp,16(sp)
  814814:	df000404 	addi	fp,sp,16
  814818:	e13ffd15 	stw	r4,-12(fp)
  81481c:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  814820:	e0bffd17 	ldw	r2,-12(fp)
  814824:	10800a17 	ldw	r2,40(r2)
  814828:	10800104 	addi	r2,r2,4
  81482c:	10800037 	ldwio	r2,0(r2)
  814830:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  814834:	e0bffe17 	ldw	r2,-8(fp)
  814838:	1004c03a 	cmpne	r2,r2,zero
  81483c:	1000051e 	bne	r2,zero,814854 <alt_up_audio_write_fifo_space+0x48>
  814840:	e0bffc17 	ldw	r2,-16(fp)
  814844:	10bfc02c 	andhi	r2,r2,65280
  814848:	1004d63a 	srli	r2,r2,24
  81484c:	e0bfff15 	stw	r2,-4(fp)
  814850:	00000406 	br	814864 <alt_up_audio_write_fifo_space+0x58>
  814854:	e0bffc17 	ldw	r2,-16(fp)
  814858:	10803fec 	andhi	r2,r2,255
  81485c:	1004d43a 	srli	r2,r2,16
  814860:	e0bfff15 	stw	r2,-4(fp)
  814864:	e0bfff17 	ldw	r2,-4(fp)
  814868:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
  81486c:	e0bffc17 	ldw	r2,-16(fp)
}
  814870:	e037883a 	mov	sp,fp
  814874:	df000017 	ldw	fp,0(sp)
  814878:	dec00104 	addi	sp,sp,4
  81487c:	f800283a 	ret

00814880 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  814880:	defff904 	addi	sp,sp,-28
  814884:	dfc00615 	stw	ra,24(sp)
  814888:	df000515 	stw	fp,20(sp)
  81488c:	df000504 	addi	fp,sp,20
  814890:	e13ffc15 	stw	r4,-16(fp)
  814894:	e17ffd15 	stw	r5,-12(fp)
  814898:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
  81489c:	e13ffc17 	ldw	r4,-16(fp)
  8148a0:	01400044 	movi	r5,1
  8148a4:	081480c0 	call	81480c <alt_up_audio_write_fifo_space>
  8148a8:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  8148ac:	e0bffb17 	ldw	r2,-20(fp)
  8148b0:	10801868 	cmpgeui	r2,r2,97
  8148b4:	1000021e 	bne	r2,zero,8148c0 <alt_up_audio_play_r+0x40>
		return 0;
  8148b8:	e03fff15 	stw	zero,-4(fp)
  8148bc:	00000606 	br	8148d8 <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  8148c0:	e13ffc17 	ldw	r4,-16(fp)
  8148c4:	e17ffd17 	ldw	r5,-12(fp)
  8148c8:	e1bffe17 	ldw	r6,-8(fp)
  8148cc:	01c00044 	movi	r7,1
  8148d0:	0814a640 	call	814a64 <alt_up_audio_write_fifo>
  8148d4:	e0bfff15 	stw	r2,-4(fp)
  8148d8:	e0bfff17 	ldw	r2,-4(fp)
}
  8148dc:	e037883a 	mov	sp,fp
  8148e0:	dfc00117 	ldw	ra,4(sp)
  8148e4:	df000017 	ldw	fp,0(sp)
  8148e8:	dec00204 	addi	sp,sp,8
  8148ec:	f800283a 	ret

008148f0 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  8148f0:	defff904 	addi	sp,sp,-28
  8148f4:	dfc00615 	stw	ra,24(sp)
  8148f8:	df000515 	stw	fp,20(sp)
  8148fc:	df000504 	addi	fp,sp,20
  814900:	e13ffc15 	stw	r4,-16(fp)
  814904:	e17ffd15 	stw	r5,-12(fp)
  814908:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
  81490c:	e13ffc17 	ldw	r4,-16(fp)
  814910:	000b883a 	mov	r5,zero
  814914:	081480c0 	call	81480c <alt_up_audio_write_fifo_space>
  814918:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  81491c:	e0bffb17 	ldw	r2,-20(fp)
  814920:	10801868 	cmpgeui	r2,r2,97
  814924:	1000021e 	bne	r2,zero,814930 <alt_up_audio_play_l+0x40>
		return 0;
  814928:	e03fff15 	stw	zero,-4(fp)
  81492c:	00000606 	br	814948 <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  814930:	e13ffc17 	ldw	r4,-16(fp)
  814934:	e17ffd17 	ldw	r5,-12(fp)
  814938:	e1bffe17 	ldw	r6,-8(fp)
  81493c:	000f883a 	mov	r7,zero
  814940:	0814a640 	call	814a64 <alt_up_audio_write_fifo>
  814944:	e0bfff15 	stw	r2,-4(fp)
  814948:	e0bfff17 	ldw	r2,-4(fp)
}
  81494c:	e037883a 	mov	sp,fp
  814950:	dfc00117 	ldw	ra,4(sp)
  814954:	df000017 	ldw	fp,0(sp)
  814958:	dec00204 	addi	sp,sp,8
  81495c:	f800283a 	ret

00814960 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  814960:	defff604 	addi	sp,sp,-40
  814964:	df000915 	stw	fp,36(sp)
  814968:	df000904 	addi	fp,sp,36
  81496c:	e13ff915 	stw	r4,-28(fp)
  814970:	e17ffa15 	stw	r5,-24(fp)
  814974:	e1bffb15 	stw	r6,-20(fp)
  814978:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
  81497c:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
  814980:	00003006 	br	814a44 <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  814984:	e0bff917 	ldw	r2,-28(fp)
  814988:	10800a17 	ldw	r2,40(r2)
  81498c:	10800104 	addi	r2,r2,4
  814990:	10800037 	ldwio	r2,0(r2)
  814994:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  814998:	e0bffc17 	ldw	r2,-16(fp)
  81499c:	1004c03a 	cmpne	r2,r2,zero
  8149a0:	1000051e 	bne	r2,zero,8149b8 <alt_up_audio_read_fifo+0x58>
  8149a4:	e0bff817 	ldw	r2,-32(fp)
  8149a8:	10bfc00c 	andi	r2,r2,65280
  8149ac:	1004d23a 	srli	r2,r2,8
  8149b0:	e0bfff15 	stw	r2,-4(fp)
  8149b4:	00000306 	br	8149c4 <alt_up_audio_read_fifo+0x64>
  8149b8:	e0bff817 	ldw	r2,-32(fp)
  8149bc:	10803fcc 	andi	r2,r2,255
  8149c0:	e0bfff15 	stw	r2,-4(fp)
  8149c4:	e0bfff17 	ldw	r2,-4(fp)
  8149c8:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  8149cc:	e0bff817 	ldw	r2,-32(fp)
  8149d0:	1005003a 	cmpeq	r2,r2,zero
  8149d4:	10001e1e 	bne	r2,zero,814a50 <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  8149d8:	e0bff717 	ldw	r2,-36(fp)
  8149dc:	1085883a 	add	r2,r2,r2
  8149e0:	1085883a 	add	r2,r2,r2
  8149e4:	1007883a 	mov	r3,r2
  8149e8:	e0bffa17 	ldw	r2,-24(fp)
  8149ec:	1887883a 	add	r3,r3,r2
  8149f0:	e0fffe15 	stw	r3,-8(fp)
  8149f4:	e0bffc17 	ldw	r2,-16(fp)
  8149f8:	1004c03a 	cmpne	r2,r2,zero
  8149fc:	1000061e 	bne	r2,zero,814a18 <alt_up_audio_read_fifo+0xb8>
  814a00:	e0bff917 	ldw	r2,-28(fp)
  814a04:	10800a17 	ldw	r2,40(r2)
  814a08:	10800204 	addi	r2,r2,8
  814a0c:	10800037 	ldwio	r2,0(r2)
  814a10:	e0bffd15 	stw	r2,-12(fp)
  814a14:	00000506 	br	814a2c <alt_up_audio_read_fifo+0xcc>
  814a18:	e0bff917 	ldw	r2,-28(fp)
  814a1c:	10800a17 	ldw	r2,40(r2)
  814a20:	10800304 	addi	r2,r2,12
  814a24:	10800037 	ldwio	r2,0(r2)
  814a28:	e0bffd15 	stw	r2,-12(fp)
  814a2c:	e0fffd17 	ldw	r3,-12(fp)
  814a30:	e0bffe17 	ldw	r2,-8(fp)
  814a34:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  814a38:	e0bff717 	ldw	r2,-36(fp)
  814a3c:	10800044 	addi	r2,r2,1
  814a40:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  814a44:	e0fff717 	ldw	r3,-36(fp)
  814a48:	e0bffb17 	ldw	r2,-20(fp)
  814a4c:	18bfcd16 	blt	r3,r2,814984 <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
  814a50:	e0bff717 	ldw	r2,-36(fp)
}
  814a54:	e037883a 	mov	sp,fp
  814a58:	df000017 	ldw	fp,0(sp)
  814a5c:	dec00104 	addi	sp,sp,4
  814a60:	f800283a 	ret

00814a64 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  814a64:	defff804 	addi	sp,sp,-32
  814a68:	df000715 	stw	fp,28(sp)
  814a6c:	df000704 	addi	fp,sp,28
  814a70:	e13ffb15 	stw	r4,-20(fp)
  814a74:	e17ffc15 	stw	r5,-16(fp)
  814a78:	e1bffd15 	stw	r6,-12(fp)
  814a7c:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
  814a80:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
  814a84:	00003a06 	br	814b70 <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  814a88:	e0bffb17 	ldw	r2,-20(fp)
  814a8c:	10800a17 	ldw	r2,40(r2)
  814a90:	10800104 	addi	r2,r2,4
  814a94:	10800037 	ldwio	r2,0(r2)
  814a98:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  814a9c:	e0bffe17 	ldw	r2,-8(fp)
  814aa0:	1004c03a 	cmpne	r2,r2,zero
  814aa4:	1000051e 	bne	r2,zero,814abc <alt_up_audio_write_fifo+0x58>
  814aa8:	e0bffa17 	ldw	r2,-24(fp)
  814aac:	10bfc02c 	andhi	r2,r2,65280
  814ab0:	1004d63a 	srli	r2,r2,24
  814ab4:	e0bfff15 	stw	r2,-4(fp)
  814ab8:	00000406 	br	814acc <alt_up_audio_write_fifo+0x68>
  814abc:	e0bffa17 	ldw	r2,-24(fp)
  814ac0:	10803fec 	andhi	r2,r2,255
  814ac4:	1004d43a 	srli	r2,r2,16
  814ac8:	e0bfff15 	stw	r2,-4(fp)
  814acc:	e0bfff17 	ldw	r2,-4(fp)
  814ad0:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  814ad4:	e0bffa17 	ldw	r2,-24(fp)
  814ad8:	1005003a 	cmpeq	r2,r2,zero
  814adc:	1000271e 	bne	r2,zero,814b7c <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
  814ae0:	e0bffe17 	ldw	r2,-8(fp)
  814ae4:	1004c03a 	cmpne	r2,r2,zero
  814ae8:	1000111e 	bne	r2,zero,814b30 <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  814aec:	e0bffb17 	ldw	r2,-20(fp)
  814af0:	10800a17 	ldw	r2,40(r2)
  814af4:	11000204 	addi	r4,r2,8
  814af8:	e0bff917 	ldw	r2,-28(fp)
  814afc:	1085883a 	add	r2,r2,r2
  814b00:	1085883a 	add	r2,r2,r2
  814b04:	1007883a 	mov	r3,r2
  814b08:	e0bffc17 	ldw	r2,-16(fp)
  814b0c:	1885883a 	add	r2,r3,r2
  814b10:	10800017 	ldw	r2,0(r2)
  814b14:	1007883a 	mov	r3,r2
  814b18:	e0bff917 	ldw	r2,-28(fp)
  814b1c:	10800044 	addi	r2,r2,1
  814b20:	e0bff915 	stw	r2,-28(fp)
  814b24:	2005883a 	mov	r2,r4
  814b28:	10c00035 	stwio	r3,0(r2)
  814b2c:	00001006 	br	814b70 <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  814b30:	e0bffb17 	ldw	r2,-20(fp)
  814b34:	10800a17 	ldw	r2,40(r2)
  814b38:	11000304 	addi	r4,r2,12
  814b3c:	e0bff917 	ldw	r2,-28(fp)
  814b40:	1085883a 	add	r2,r2,r2
  814b44:	1085883a 	add	r2,r2,r2
  814b48:	1007883a 	mov	r3,r2
  814b4c:	e0bffc17 	ldw	r2,-16(fp)
  814b50:	1885883a 	add	r2,r3,r2
  814b54:	10800017 	ldw	r2,0(r2)
  814b58:	1007883a 	mov	r3,r2
  814b5c:	e0bff917 	ldw	r2,-28(fp)
  814b60:	10800044 	addi	r2,r2,1
  814b64:	e0bff915 	stw	r2,-28(fp)
  814b68:	2005883a 	mov	r2,r4
  814b6c:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  814b70:	e0fff917 	ldw	r3,-28(fp)
  814b74:	e0bffd17 	ldw	r2,-12(fp)
  814b78:	18bfc316 	blt	r3,r2,814a88 <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
  814b7c:	e0bff917 	ldw	r2,-28(fp)
}
  814b80:	e037883a 	mov	sp,fp
  814b84:	df000017 	ldw	fp,0(sp)
  814b88:	dec00104 	addi	sp,sp,4
  814b8c:	f800283a 	ret

00814b90 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
  814b90:	defffc04 	addi	sp,sp,-16
  814b94:	df000315 	stw	fp,12(sp)
  814b98:	df000304 	addi	fp,sp,12
  814b9c:	e13ffd15 	stw	r4,-12(fp)
  814ba0:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  814ba4:	e0bffe17 	ldw	r2,-8(fp)
  814ba8:	1004c03a 	cmpne	r2,r2,zero
  814bac:	1000061e 	bne	r2,zero,814bc8 <alt_up_audio_read_fifo_head+0x38>
  814bb0:	e0bffd17 	ldw	r2,-12(fp)
  814bb4:	10800a17 	ldw	r2,40(r2)
  814bb8:	10800204 	addi	r2,r2,8
  814bbc:	10800037 	ldwio	r2,0(r2)
  814bc0:	e0bfff15 	stw	r2,-4(fp)
  814bc4:	00000506 	br	814bdc <alt_up_audio_read_fifo_head+0x4c>
  814bc8:	e0bffd17 	ldw	r2,-12(fp)
  814bcc:	10800a17 	ldw	r2,40(r2)
  814bd0:	10800304 	addi	r2,r2,12
  814bd4:	10800037 	ldwio	r2,0(r2)
  814bd8:	e0bfff15 	stw	r2,-4(fp)
  814bdc:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
  814be0:	e037883a 	mov	sp,fp
  814be4:	df000017 	ldw	fp,0(sp)
  814be8:	dec00104 	addi	sp,sp,4
  814bec:	f800283a 	ret

00814bf0 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
  814bf0:	defffc04 	addi	sp,sp,-16
  814bf4:	df000315 	stw	fp,12(sp)
  814bf8:	df000304 	addi	fp,sp,12
  814bfc:	e13ffd15 	stw	r4,-12(fp)
  814c00:	e17ffe15 	stw	r5,-8(fp)
  814c04:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
  814c08:	e0bfff17 	ldw	r2,-4(fp)
  814c0c:	1004c03a 	cmpne	r2,r2,zero
  814c10:	1000061e 	bne	r2,zero,814c2c <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  814c14:	e0bffd17 	ldw	r2,-12(fp)
  814c18:	10800a17 	ldw	r2,40(r2)
  814c1c:	10800204 	addi	r2,r2,8
  814c20:	e0fffe17 	ldw	r3,-8(fp)
  814c24:	10c00035 	stwio	r3,0(r2)
  814c28:	00000506 	br	814c40 <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  814c2c:	e0bffd17 	ldw	r2,-12(fp)
  814c30:	10800a17 	ldw	r2,40(r2)
  814c34:	10800304 	addi	r2,r2,12
  814c38:	e0fffe17 	ldw	r3,-8(fp)
  814c3c:	10c00035 	stwio	r3,0(r2)
}
  814c40:	e037883a 	mov	sp,fp
  814c44:	df000017 	ldw	fp,0(sp)
  814c48:	dec00104 	addi	sp,sp,4
  814c4c:	f800283a 	ret

00814c50 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
  814c50:	defffc04 	addi	sp,sp,-16
  814c54:	dfc00315 	stw	ra,12(sp)
  814c58:	df000215 	stw	fp,8(sp)
  814c5c:	df000204 	addi	fp,sp,8
  814c60:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
  814c64:	e13fff17 	ldw	r4,-4(fp)
  814c68:	014020b4 	movhi	r5,130
  814c6c:	297c4104 	addi	r5,r5,-3836
  814c70:	081bbf80 	call	81bbf8 <alt_find_dev>
  814c74:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
  814c78:	e0bffe17 	ldw	r2,-8(fp)
  814c7c:	10800a17 	ldw	r2,40(r2)
  814c80:	10800104 	addi	r2,r2,4
  814c84:	10800037 	ldwio	r2,0(r2)
  814c88:	10803fec 	andhi	r2,r2,255
  814c8c:	1005d43a 	srai	r2,r2,16
  814c90:	1007883a 	mov	r3,r2
  814c94:	e0bffe17 	ldw	r2,-8(fp)
  814c98:	10c00b15 	stw	r3,44(r2)

  return dev;
  814c9c:	e0bffe17 	ldw	r2,-8(fp)
}
  814ca0:	e037883a 	mov	sp,fp
  814ca4:	dfc00117 	ldw	ra,4(sp)
  814ca8:	df000017 	ldw	fp,0(sp)
  814cac:	dec00204 	addi	sp,sp,8
  814cb0:	f800283a 	ret

00814cb4 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  814cb4:	defffc04 	addi	sp,sp,-16
  814cb8:	df000315 	stw	fp,12(sp)
  814cbc:	df000304 	addi	fp,sp,12
  814cc0:	e13ffd15 	stw	r4,-12(fp)
  814cc4:	e17ffe15 	stw	r5,-8(fp)
  814cc8:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  814ccc:	e0bffd17 	ldw	r2,-12(fp)
  814cd0:	10800a17 	ldw	r2,40(r2)
  814cd4:	11000204 	addi	r4,r2,8
  814cd8:	e0bffe17 	ldw	r2,-8(fp)
  814cdc:	10c03fcc 	andi	r3,r2,255
  814ce0:	2005883a 	mov	r2,r4
  814ce4:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
  814ce8:	e0bffd17 	ldw	r2,-12(fp)
  814cec:	10800a17 	ldw	r2,40(r2)
  814cf0:	11000304 	addi	r4,r2,12
  814cf4:	e0bfff17 	ldw	r2,-4(fp)
  814cf8:	10ffffcc 	andi	r3,r2,65535
  814cfc:	2005883a 	mov	r2,r4
  814d00:	10c00035 	stwio	r3,0(r2)

	return 0;
  814d04:	0005883a 	mov	r2,zero
}
  814d08:	e037883a 	mov	sp,fp
  814d0c:	df000017 	ldw	fp,0(sp)
  814d10:	dec00104 	addi	sp,sp,4
  814d14:	f800283a 	ret

00814d18 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
  814d18:	defffa04 	addi	sp,sp,-24
  814d1c:	dfc00515 	stw	ra,20(sp)
  814d20:	df000415 	stw	fp,16(sp)
  814d24:	df000404 	addi	fp,sp,16
  814d28:	e13ffc15 	stw	r4,-16(fp)
  814d2c:	e17ffd15 	stw	r5,-12(fp)
  814d30:	e1bffe15 	stw	r6,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  814d34:	e0bffc17 	ldw	r2,-16(fp)
  814d38:	10800a17 	ldw	r2,40(r2)
  814d3c:	11000204 	addi	r4,r2,8
  814d40:	e0bffd17 	ldw	r2,-12(fp)
  814d44:	10c03fcc 	andi	r3,r2,255
  814d48:	2005883a 	mov	r2,r4
  814d4c:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
  814d50:	e0bffc17 	ldw	r2,-16(fp)
  814d54:	10800a17 	ldw	r2,40(r2)
  814d58:	10800304 	addi	r2,r2,12
  814d5c:	10800037 	ldwio	r2,0(r2)
  814d60:	1007883a 	mov	r3,r2
  814d64:	e0bffe17 	ldw	r2,-8(fp)
  814d68:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
  814d6c:	e13ffc17 	ldw	r4,-16(fp)
  814d70:	0814e440 	call	814e44 <alt_up_av_config_read_acknowledge>
  814d74:	1005003a 	cmpeq	r2,r2,zero
  814d78:	1000031e 	bne	r2,zero,814d88 <alt_up_av_config_read_data+0x70>
		return -1;
  814d7c:	00bfffc4 	movi	r2,-1
  814d80:	e0bfff15 	stw	r2,-4(fp)
  814d84:	00000106 	br	814d8c <alt_up_av_config_read_data+0x74>

	return 0;
  814d88:	e03fff15 	stw	zero,-4(fp)
  814d8c:	e0bfff17 	ldw	r2,-4(fp)
}
  814d90:	e037883a 	mov	sp,fp
  814d94:	dfc00117 	ldw	ra,4(sp)
  814d98:	df000017 	ldw	fp,0(sp)
  814d9c:	dec00204 	addi	sp,sp,8
  814da0:	f800283a 	ret

00814da4 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
  814da4:	defffe04 	addi	sp,sp,-8
  814da8:	df000115 	stw	fp,4(sp)
  814dac:	df000104 	addi	fp,sp,4
  814db0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
  814db4:	e0bfff17 	ldw	r2,-4(fp)
  814db8:	10800a17 	ldw	r2,40(r2)
  814dbc:	1007883a 	mov	r3,r2
  814dc0:	00800044 	movi	r2,1
  814dc4:	18800025 	stbio	r2,0(r3)
	return 0;
  814dc8:	0005883a 	mov	r2,zero
}
  814dcc:	e037883a 	mov	sp,fp
  814dd0:	df000017 	ldw	fp,0(sp)
  814dd4:	dec00104 	addi	sp,sp,4
  814dd8:	f800283a 	ret

00814ddc <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
  814ddc:	defffe04 	addi	sp,sp,-8
  814de0:	df000115 	stw	fp,4(sp)
  814de4:	df000104 	addi	fp,sp,4
  814de8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
  814dec:	e0bfff17 	ldw	r2,-4(fp)
  814df0:	10800a17 	ldw	r2,40(r2)
  814df4:	1007883a 	mov	r3,r2
  814df8:	00800084 	movi	r2,2
  814dfc:	18800025 	stbio	r2,0(r3)
	return 0;
  814e00:	0005883a 	mov	r2,zero
}
  814e04:	e037883a 	mov	sp,fp
  814e08:	df000017 	ldw	fp,0(sp)
  814e0c:	dec00104 	addi	sp,sp,4
  814e10:	f800283a 	ret

00814e14 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
  814e14:	defffe04 	addi	sp,sp,-8
  814e18:	df000115 	stw	fp,4(sp)
  814e1c:	df000104 	addi	fp,sp,4
  814e20:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
  814e24:	e0bfff17 	ldw	r2,-4(fp)
  814e28:	10800a17 	ldw	r2,40(r2)
  814e2c:	10000025 	stbio	zero,0(r2)
	return 0;
  814e30:	0005883a 	mov	r2,zero
}
  814e34:	e037883a 	mov	sp,fp
  814e38:	df000017 	ldw	fp,0(sp)
  814e3c:	dec00104 	addi	sp,sp,4
  814e40:	f800283a 	ret

00814e44 <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
  814e44:	defffd04 	addi	sp,sp,-12
  814e48:	df000215 	stw	fp,8(sp)
  814e4c:	df000204 	addi	fp,sp,8
  814e50:	e13ffe15 	stw	r4,-8(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
  814e54:	e0bffe17 	ldw	r2,-8(fp)
  814e58:	10800a17 	ldw	r2,40(r2)
  814e5c:	10800104 	addi	r2,r2,4
  814e60:	10800037 	ldwio	r2,0(r2)
  814e64:	1080008c 	andi	r2,r2,2
  814e68:	1005d07a 	srai	r2,r2,1
  814e6c:	1005003a 	cmpeq	r2,r2,zero
  814e70:	1000071e 	bne	r2,zero,814e90 <alt_up_av_config_read_acknowledge+0x4c>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
  814e74:	e0bffe17 	ldw	r2,-8(fp)
  814e78:	10800a17 	ldw	r2,40(r2)
  814e7c:	10800104 	addi	r2,r2,4
  814e80:	10800037 	ldwio	r2,0(r2)
  814e84:	1080004c 	andi	r2,r2,1
  814e88:	e0bfff15 	stw	r2,-4(fp)
  814e8c:	00000206 	br	814e98 <alt_up_av_config_read_acknowledge+0x54>
	return -1;
  814e90:	00bfffc4 	movi	r2,-1
  814e94:	e0bfff15 	stw	r2,-4(fp)
  814e98:	e0bfff17 	ldw	r2,-4(fp)
}
  814e9c:	e037883a 	mov	sp,fp
  814ea0:	df000017 	ldw	fp,0(sp)
  814ea4:	dec00104 	addi	sp,sp,4
  814ea8:	f800283a 	ret

00814eac <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
  814eac:	defffe04 	addi	sp,sp,-8
  814eb0:	df000115 	stw	fp,4(sp)
  814eb4:	df000104 	addi	fp,sp,4
  814eb8:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
  814ebc:	e0bfff17 	ldw	r2,-4(fp)
  814ec0:	10800a17 	ldw	r2,40(r2)
  814ec4:	10800104 	addi	r2,r2,4
  814ec8:	10800037 	ldwio	r2,0(r2)
  814ecc:	1080008c 	andi	r2,r2,2
  814ed0:	1005d07a 	srai	r2,r2,1
}
  814ed4:	e037883a 	mov	sp,fp
  814ed8:	df000017 	ldw	fp,0(sp)
  814edc:	dec00104 	addi	sp,sp,4
  814ee0:	f800283a 	ret

00814ee4 <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  814ee4:	defff904 	addi	sp,sp,-28
  814ee8:	dfc00615 	stw	ra,24(sp)
  814eec:	df000515 	stw	fp,20(sp)
  814ef0:	df000504 	addi	fp,sp,20
  814ef4:	e13ffc15 	stw	r4,-16(fp)
  814ef8:	e17ffd15 	stw	r5,-12(fp)
  814efc:	e1bffe15 	stw	r6,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  814f00:	e0bffc17 	ldw	r2,-16(fp)
  814f04:	10800b17 	ldw	r2,44(r2)
  814f08:	10800060 	cmpeqi	r2,r2,1
  814f0c:	10000f1e 	bne	r2,zero,814f4c <alt_up_av_config_write_audio_cfg_register+0x68>
  814f10:	e0bffc17 	ldw	r2,-16(fp)
  814f14:	10800b17 	ldw	r2,44(r2)
  814f18:	108000a0 	cmpeqi	r2,r2,2
  814f1c:	10000b1e 	bne	r2,zero,814f4c <alt_up_av_config_write_audio_cfg_register+0x68>
  814f20:	e0bffc17 	ldw	r2,-16(fp)
  814f24:	10800b17 	ldw	r2,44(r2)
  814f28:	108000e0 	cmpeqi	r2,r2,3
  814f2c:	1000071e 	bne	r2,zero,814f4c <alt_up_av_config_write_audio_cfg_register+0x68>
  814f30:	e0bffc17 	ldw	r2,-16(fp)
  814f34:	10800b17 	ldw	r2,44(r2)
  814f38:	10800120 	cmpeqi	r2,r2,4
  814f3c:	1000031e 	bne	r2,zero,814f4c <alt_up_av_config_write_audio_cfg_register+0x68>
		return -EINVAL;
  814f40:	00bffa84 	movi	r2,-22
  814f44:	e0bfff15 	stw	r2,-4(fp)
  814f48:	00000b06 	br	814f78 <alt_up_av_config_write_audio_cfg_register+0x94>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
  814f4c:	e03ffb15 	stw	zero,-20(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
  814f50:	e0bffc17 	ldw	r2,-16(fp)
  814f54:	10800a17 	ldw	r2,40(r2)
  814f58:	10800084 	addi	r2,r2,2
  814f5c:	e0fffb17 	ldw	r3,-20(fp)
  814f60:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  814f64:	e13ffc17 	ldw	r4,-16(fp)
  814f68:	e17ffd17 	ldw	r5,-12(fp)
  814f6c:	e1bffe17 	ldw	r6,-8(fp)
  814f70:	0814cb40 	call	814cb4 <alt_up_av_config_write_data>
  814f74:	e0bfff15 	stw	r2,-4(fp)
  814f78:	e0bfff17 	ldw	r2,-4(fp)
}
  814f7c:	e037883a 	mov	sp,fp
  814f80:	dfc00117 	ldw	ra,4(sp)
  814f84:	df000017 	ldw	fp,0(sp)
  814f88:	dec00204 	addi	sp,sp,8
  814f8c:	f800283a 	ret

00814f90 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
  814f90:	defff904 	addi	sp,sp,-28
  814f94:	dfc00615 	stw	ra,24(sp)
  814f98:	df000515 	stw	fp,20(sp)
  814f9c:	df000504 	addi	fp,sp,20
  814fa0:	e13ffb15 	stw	r4,-20(fp)
  814fa4:	e17ffc15 	stw	r5,-16(fp)
  814fa8:	e1bffd15 	stw	r6,-12(fp)
  814fac:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  814fb0:	e0bffb17 	ldw	r2,-20(fp)
  814fb4:	10800b17 	ldw	r2,44(r2)
  814fb8:	108000a0 	cmpeqi	r2,r2,2
  814fbc:	10000b1e 	bne	r2,zero,814fec <alt_up_av_config_read_video_cfg_register+0x5c>
  814fc0:	e0bffb17 	ldw	r2,-20(fp)
  814fc4:	10800b17 	ldw	r2,44(r2)
  814fc8:	108000e0 	cmpeqi	r2,r2,3
  814fcc:	1000071e 	bne	r2,zero,814fec <alt_up_av_config_read_video_cfg_register+0x5c>
  814fd0:	e0bffb17 	ldw	r2,-20(fp)
  814fd4:	10800b17 	ldw	r2,44(r2)
  814fd8:	10800120 	cmpeqi	r2,r2,4
  814fdc:	1000031e 	bne	r2,zero,814fec <alt_up_av_config_read_video_cfg_register+0x5c>
		return -EINVAL;
  814fe0:	00bffa84 	movi	r2,-22
  814fe4:	e0bfff15 	stw	r2,-4(fp)
  814fe8:	00002106 	br	815070 <alt_up_av_config_read_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  814fec:	e0bffb17 	ldw	r2,-20(fp)
  814ff0:	10800b17 	ldw	r2,44(r2)
  814ff4:	108000a0 	cmpeqi	r2,r2,2
  814ff8:	1000041e 	bne	r2,zero,81500c <alt_up_av_config_read_video_cfg_register+0x7c>
  814ffc:	e0bffb17 	ldw	r2,-20(fp)
  815000:	10800b17 	ldw	r2,44(r2)
  815004:	10800118 	cmpnei	r2,r2,4
  815008:	1000061e 	bne	r2,zero,815024 <alt_up_av_config_read_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  81500c:	e0bffe17 	ldw	r2,-8(fp)
  815010:	10800060 	cmpeqi	r2,r2,1
  815014:	10000c1e 	bne	r2,zero,815048 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  815018:	00bffa84 	movi	r2,-22
  81501c:	e0bfff15 	stw	r2,-4(fp)
  815020:	00001306 	br	815070 <alt_up_av_config_read_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  815024:	e0bffe17 	ldw	r2,-8(fp)
  815028:	10800060 	cmpeqi	r2,r2,1
  81502c:	1000061e 	bne	r2,zero,815048 <alt_up_av_config_read_video_cfg_register+0xb8>
  815030:	e0bffe17 	ldw	r2,-8(fp)
  815034:	108000a0 	cmpeqi	r2,r2,2
  815038:	1000031e 	bne	r2,zero,815048 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  81503c:	00bffa84 	movi	r2,-22
  815040:	e0bfff15 	stw	r2,-4(fp)
  815044:	00000a06 	br	815070 <alt_up_av_config_read_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  815048:	e0bffb17 	ldw	r2,-20(fp)
  81504c:	10800a17 	ldw	r2,40(r2)
  815050:	10800084 	addi	r2,r2,2
  815054:	e0fffe17 	ldw	r3,-8(fp)
  815058:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_read_data(av_config, addr, data);
  81505c:	e13ffb17 	ldw	r4,-20(fp)
  815060:	e17ffc17 	ldw	r5,-16(fp)
  815064:	e1bffd17 	ldw	r6,-12(fp)
  815068:	0814d180 	call	814d18 <alt_up_av_config_read_data>
  81506c:	e0bfff15 	stw	r2,-4(fp)
  815070:	e0bfff17 	ldw	r2,-4(fp)
}
  815074:	e037883a 	mov	sp,fp
  815078:	dfc00117 	ldw	ra,4(sp)
  81507c:	df000017 	ldw	fp,0(sp)
  815080:	dec00204 	addi	sp,sp,8
  815084:	f800283a 	ret

00815088 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
  815088:	defff904 	addi	sp,sp,-28
  81508c:	dfc00615 	stw	ra,24(sp)
  815090:	df000515 	stw	fp,20(sp)
  815094:	df000504 	addi	fp,sp,20
  815098:	e13ffb15 	stw	r4,-20(fp)
  81509c:	e17ffc15 	stw	r5,-16(fp)
  8150a0:	e1bffd15 	stw	r6,-12(fp)
  8150a4:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  8150a8:	e0bffb17 	ldw	r2,-20(fp)
  8150ac:	10800b17 	ldw	r2,44(r2)
  8150b0:	108000a0 	cmpeqi	r2,r2,2
  8150b4:	10000b1e 	bne	r2,zero,8150e4 <alt_up_av_config_write_video_cfg_register+0x5c>
  8150b8:	e0bffb17 	ldw	r2,-20(fp)
  8150bc:	10800b17 	ldw	r2,44(r2)
  8150c0:	108000e0 	cmpeqi	r2,r2,3
  8150c4:	1000071e 	bne	r2,zero,8150e4 <alt_up_av_config_write_video_cfg_register+0x5c>
  8150c8:	e0bffb17 	ldw	r2,-20(fp)
  8150cc:	10800b17 	ldw	r2,44(r2)
  8150d0:	10800120 	cmpeqi	r2,r2,4
  8150d4:	1000031e 	bne	r2,zero,8150e4 <alt_up_av_config_write_video_cfg_register+0x5c>
		return -EINVAL;
  8150d8:	00bffa84 	movi	r2,-22
  8150dc:	e0bfff15 	stw	r2,-4(fp)
  8150e0:	00002106 	br	815168 <alt_up_av_config_write_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  8150e4:	e0bffb17 	ldw	r2,-20(fp)
  8150e8:	10800b17 	ldw	r2,44(r2)
  8150ec:	108000a0 	cmpeqi	r2,r2,2
  8150f0:	1000041e 	bne	r2,zero,815104 <alt_up_av_config_write_video_cfg_register+0x7c>
  8150f4:	e0bffb17 	ldw	r2,-20(fp)
  8150f8:	10800b17 	ldw	r2,44(r2)
  8150fc:	10800118 	cmpnei	r2,r2,4
  815100:	1000061e 	bne	r2,zero,81511c <alt_up_av_config_write_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  815104:	e0bffe17 	ldw	r2,-8(fp)
  815108:	10800060 	cmpeqi	r2,r2,1
  81510c:	10000c1e 	bne	r2,zero,815140 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  815110:	00bffa84 	movi	r2,-22
  815114:	e0bfff15 	stw	r2,-4(fp)
  815118:	00001306 	br	815168 <alt_up_av_config_write_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  81511c:	e0bffe17 	ldw	r2,-8(fp)
  815120:	10800060 	cmpeqi	r2,r2,1
  815124:	1000061e 	bne	r2,zero,815140 <alt_up_av_config_write_video_cfg_register+0xb8>
  815128:	e0bffe17 	ldw	r2,-8(fp)
  81512c:	108000a0 	cmpeqi	r2,r2,2
  815130:	1000031e 	bne	r2,zero,815140 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  815134:	00bffa84 	movi	r2,-22
  815138:	e0bfff15 	stw	r2,-4(fp)
  81513c:	00000a06 	br	815168 <alt_up_av_config_write_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  815140:	e0bffb17 	ldw	r2,-20(fp)
  815144:	10800a17 	ldw	r2,40(r2)
  815148:	10800084 	addi	r2,r2,2
  81514c:	e0fffe17 	ldw	r3,-8(fp)
  815150:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  815154:	e13ffb17 	ldw	r4,-20(fp)
  815158:	e17ffc17 	ldw	r5,-16(fp)
  81515c:	e1bffd17 	ldw	r6,-12(fp)
  815160:	0814cb40 	call	814cb4 <alt_up_av_config_write_data>
  815164:	e0bfff15 	stw	r2,-4(fp)
  815168:	e0bfff17 	ldw	r2,-4(fp)
}
  81516c:	e037883a 	mov	sp,fp
  815170:	dfc00117 	ldw	ra,4(sp)
  815174:	df000017 	ldw	fp,0(sp)
  815178:	dec00204 	addi	sp,sp,8
  81517c:	f800283a 	ret

00815180 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  815180:	defffa04 	addi	sp,sp,-24
  815184:	dfc00515 	stw	ra,20(sp)
  815188:	df000415 	stw	fp,16(sp)
  81518c:	df000404 	addi	fp,sp,16
  815190:	e13ffc15 	stw	r4,-16(fp)
  815194:	e17ffd15 	stw	r5,-12(fp)
  815198:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  81519c:	e0bffc17 	ldw	r2,-16(fp)
  8151a0:	10800b17 	ldw	r2,44(r2)
  8151a4:	10800220 	cmpeqi	r2,r2,8
  8151a8:	1000031e 	bne	r2,zero,8151b8 <alt_up_av_config_read_DC2_cfg_register+0x38>
		return -EINVAL;
  8151ac:	00bffa84 	movi	r2,-22
  8151b0:	e0bfff15 	stw	r2,-4(fp)
  8151b4:	00000506 	br	8151cc <alt_up_av_config_read_DC2_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  8151b8:	e13ffc17 	ldw	r4,-16(fp)
  8151bc:	e17ffd17 	ldw	r5,-12(fp)
  8151c0:	e1bffe17 	ldw	r6,-8(fp)
  8151c4:	0814d180 	call	814d18 <alt_up_av_config_read_data>
  8151c8:	e0bfff15 	stw	r2,-4(fp)
  8151cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8151d0:	e037883a 	mov	sp,fp
  8151d4:	dfc00117 	ldw	ra,4(sp)
  8151d8:	df000017 	ldw	fp,0(sp)
  8151dc:	dec00204 	addi	sp,sp,8
  8151e0:	f800283a 	ret

008151e4 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  8151e4:	defffa04 	addi	sp,sp,-24
  8151e8:	dfc00515 	stw	ra,20(sp)
  8151ec:	df000415 	stw	fp,16(sp)
  8151f0:	df000404 	addi	fp,sp,16
  8151f4:	e13ffc15 	stw	r4,-16(fp)
  8151f8:	e17ffd15 	stw	r5,-12(fp)
  8151fc:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  815200:	e0bffc17 	ldw	r2,-16(fp)
  815204:	10800b17 	ldw	r2,44(r2)
  815208:	10800220 	cmpeqi	r2,r2,8
  81520c:	1000031e 	bne	r2,zero,81521c <alt_up_av_config_write_DC2_cfg_register+0x38>
		return -EINVAL;
  815210:	00bffa84 	movi	r2,-22
  815214:	e0bfff15 	stw	r2,-4(fp)
  815218:	00000506 	br	815230 <alt_up_av_config_write_DC2_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  81521c:	e13ffc17 	ldw	r4,-16(fp)
  815220:	e17ffd17 	ldw	r5,-12(fp)
  815224:	e1bffe17 	ldw	r6,-8(fp)
  815228:	0814cb40 	call	814cb4 <alt_up_av_config_write_data>
  81522c:	e0bfff15 	stw	r2,-4(fp)
  815230:	e0bfff17 	ldw	r2,-4(fp)
}
  815234:	e037883a 	mov	sp,fp
  815238:	dfc00117 	ldw	ra,4(sp)
  81523c:	df000017 	ldw	fp,0(sp)
  815240:	dec00204 	addi	sp,sp,8
  815244:	f800283a 	ret

00815248 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  815248:	defffa04 	addi	sp,sp,-24
  81524c:	dfc00515 	stw	ra,20(sp)
  815250:	df000415 	stw	fp,16(sp)
  815254:	df000404 	addi	fp,sp,16
  815258:	e13ffc15 	stw	r4,-16(fp)
  81525c:	e17ffd15 	stw	r5,-12(fp)
  815260:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  815264:	e0bffc17 	ldw	r2,-16(fp)
  815268:	10800b17 	ldw	r2,44(r2)
  81526c:	10800260 	cmpeqi	r2,r2,9
  815270:	1000031e 	bne	r2,zero,815280 <alt_up_av_config_read_D5M_cfg_register+0x38>
		return -EINVAL;
  815274:	00bffa84 	movi	r2,-22
  815278:	e0bfff15 	stw	r2,-4(fp)
  81527c:	00000506 	br	815294 <alt_up_av_config_read_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_read_data(av_config, addr, data);
  815280:	e13ffc17 	ldw	r4,-16(fp)
  815284:	e17ffd17 	ldw	r5,-12(fp)
  815288:	e1bffe17 	ldw	r6,-8(fp)
  81528c:	0814d180 	call	814d18 <alt_up_av_config_read_data>
  815290:	e0bfff15 	stw	r2,-4(fp)
  815294:	e0bfff17 	ldw	r2,-4(fp)
}
  815298:	e037883a 	mov	sp,fp
  81529c:	dfc00117 	ldw	ra,4(sp)
  8152a0:	df000017 	ldw	fp,0(sp)
  8152a4:	dec00204 	addi	sp,sp,8
  8152a8:	f800283a 	ret

008152ac <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  8152ac:	defffa04 	addi	sp,sp,-24
  8152b0:	dfc00515 	stw	ra,20(sp)
  8152b4:	df000415 	stw	fp,16(sp)
  8152b8:	df000404 	addi	fp,sp,16
  8152bc:	e13ffc15 	stw	r4,-16(fp)
  8152c0:	e17ffd15 	stw	r5,-12(fp)
  8152c4:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  8152c8:	e0bffc17 	ldw	r2,-16(fp)
  8152cc:	10800b17 	ldw	r2,44(r2)
  8152d0:	10800260 	cmpeqi	r2,r2,9
  8152d4:	1000031e 	bne	r2,zero,8152e4 <alt_up_av_config_write_D5M_cfg_register+0x38>
		return -EINVAL;
  8152d8:	00bffa84 	movi	r2,-22
  8152dc:	e0bfff15 	stw	r2,-4(fp)
  8152e0:	00000506 	br	8152f8 <alt_up_av_config_write_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_write_data(av_config, addr, data);
  8152e4:	e13ffc17 	ldw	r4,-16(fp)
  8152e8:	e17ffd17 	ldw	r5,-12(fp)
  8152ec:	e1bffe17 	ldw	r6,-8(fp)
  8152f0:	0814cb40 	call	814cb4 <alt_up_av_config_write_data>
  8152f4:	e0bfff15 	stw	r2,-4(fp)
  8152f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8152fc:	e037883a 	mov	sp,fp
  815300:	dfc00117 	ldw	ra,4(sp)
  815304:	df000017 	ldw	fp,0(sp)
  815308:	dec00204 	addi	sp,sp,8
  81530c:	f800283a 	ret

00815310 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  815310:	defffa04 	addi	sp,sp,-24
  815314:	dfc00515 	stw	ra,20(sp)
  815318:	df000415 	stw	fp,16(sp)
  81531c:	df000404 	addi	fp,sp,16
  815320:	e13ffc15 	stw	r4,-16(fp)
  815324:	e17ffd15 	stw	r5,-12(fp)
  815328:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  81532c:	e0bffc17 	ldw	r2,-16(fp)
  815330:	10800b17 	ldw	r2,44(r2)
  815334:	108002a0 	cmpeqi	r2,r2,10
  815338:	1000031e 	bne	r2,zero,815348 <alt_up_av_config_read_LTM_cfg_register+0x38>
		return -EINVAL;
  81533c:	00bffa84 	movi	r2,-22
  815340:	e0bfff15 	stw	r2,-4(fp)
  815344:	00000506 	br	81535c <alt_up_av_config_read_LTM_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  815348:	e13ffc17 	ldw	r4,-16(fp)
  81534c:	e17ffd17 	ldw	r5,-12(fp)
  815350:	e1bffe17 	ldw	r6,-8(fp)
  815354:	0814d180 	call	814d18 <alt_up_av_config_read_data>
  815358:	e0bfff15 	stw	r2,-4(fp)
  81535c:	e0bfff17 	ldw	r2,-4(fp)
}
  815360:	e037883a 	mov	sp,fp
  815364:	dfc00117 	ldw	ra,4(sp)
  815368:	df000017 	ldw	fp,0(sp)
  81536c:	dec00204 	addi	sp,sp,8
  815370:	f800283a 	ret

00815374 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  815374:	defffa04 	addi	sp,sp,-24
  815378:	dfc00515 	stw	ra,20(sp)
  81537c:	df000415 	stw	fp,16(sp)
  815380:	df000404 	addi	fp,sp,16
  815384:	e13ffc15 	stw	r4,-16(fp)
  815388:	e17ffd15 	stw	r5,-12(fp)
  81538c:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  815390:	e0bffc17 	ldw	r2,-16(fp)
  815394:	10800b17 	ldw	r2,44(r2)
  815398:	108002a0 	cmpeqi	r2,r2,10
  81539c:	1000031e 	bne	r2,zero,8153ac <alt_up_av_config_write_LTM_cfg_register+0x38>
		return -EINVAL;
  8153a0:	00bffa84 	movi	r2,-22
  8153a4:	e0bfff15 	stw	r2,-4(fp)
  8153a8:	00000506 	br	8153c0 <alt_up_av_config_write_LTM_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  8153ac:	e13ffc17 	ldw	r4,-16(fp)
  8153b0:	e17ffd17 	ldw	r5,-12(fp)
  8153b4:	e1bffe17 	ldw	r6,-8(fp)
  8153b8:	0814cb40 	call	814cb4 <alt_up_av_config_write_data>
  8153bc:	e0bfff15 	stw	r2,-4(fp)
  8153c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8153c4:	e037883a 	mov	sp,fp
  8153c8:	dfc00117 	ldw	ra,4(sp)
  8153cc:	df000017 	ldw	fp,0(sp)
  8153d0:	dec00204 	addi	sp,sp,8
  8153d4:	f800283a 	ret

008153d8 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  8153d8:	defffc04 	addi	sp,sp,-16
  8153dc:	df000315 	stw	fp,12(sp)
  8153e0:	df000304 	addi	fp,sp,12
  8153e4:	e13ffe15 	stw	r4,-8(fp)
  8153e8:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  8153ec:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  8153f0:	e0bfff17 	ldw	r2,-4(fp)
  8153f4:	1004c03a 	cmpne	r2,r2,zero
  8153f8:	1000061e 	bne	r2,zero,815414 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  8153fc:	e0bffe17 	ldw	r2,-8(fp)
  815400:	1007883a 	mov	r3,r2
  815404:	e0bffd03 	ldbu	r2,-12(fp)
  815408:	10c4b03a 	or	r2,r2,r3
  81540c:	e0bffd05 	stb	r2,-12(fp)
  815410:	00000806 	br	815434 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  815414:	e0bffe17 	ldw	r2,-8(fp)
  815418:	1007883a 	mov	r3,r2
  81541c:	e0bffd03 	ldbu	r2,-12(fp)
  815420:	10c4b03a 	or	r2,r2,r3
  815424:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  815428:	e0bffd03 	ldbu	r2,-12(fp)
  81542c:	10801014 	ori	r2,r2,64
  815430:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  815434:	e0fffd03 	ldbu	r3,-12(fp)
  815438:	00bfe004 	movi	r2,-128
  81543c:	1884b03a 	or	r2,r3,r2
  815440:	10803fcc 	andi	r2,r2,255
}
  815444:	e037883a 	mov	sp,fp
  815448:	df000017 	ldw	fp,0(sp)
  81544c:	dec00104 	addi	sp,sp,4
  815450:	f800283a 	ret

00815454 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  815454:	defffd04 	addi	sp,sp,-12
  815458:	df000215 	stw	fp,8(sp)
  81545c:	df000204 	addi	fp,sp,8
  815460:	e13ffe15 	stw	r4,-8(fp)
  815464:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  815468:	e0bffe17 	ldw	r2,-8(fp)
  81546c:	10800a17 	ldw	r2,40(r2)
  815470:	e0ffff03 	ldbu	r3,-4(fp)
  815474:	10c00025 	stbio	r3,0(r2)
}
  815478:	e037883a 	mov	sp,fp
  81547c:	df000017 	ldw	fp,0(sp)
  815480:	dec00104 	addi	sp,sp,4
  815484:	f800283a 	ret

00815488 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  815488:	defffe04 	addi	sp,sp,-8
  81548c:	df000115 	stw	fp,4(sp)
  815490:	df000104 	addi	fp,sp,4
  815494:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  815498:	e0bfff17 	ldw	r2,-4(fp)
  81549c:	10800a17 	ldw	r2,40(r2)
  8154a0:	1007883a 	mov	r3,r2
  8154a4:	00800044 	movi	r2,1
  8154a8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  8154ac:	e037883a 	mov	sp,fp
  8154b0:	df000017 	ldw	fp,0(sp)
  8154b4:	dec00104 	addi	sp,sp,4
  8154b8:	f800283a 	ret

008154bc <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  8154bc:	defffc04 	addi	sp,sp,-16
  8154c0:	dfc00315 	stw	ra,12(sp)
  8154c4:	df000215 	stw	fp,8(sp)
  8154c8:	df000204 	addi	fp,sp,8
  8154cc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  8154d0:	e13fff17 	ldw	r4,-4(fp)
  8154d4:	014020b4 	movhi	r5,130
  8154d8:	297c4104 	addi	r5,r5,-3836
  8154dc:	081bbf80 	call	81bbf8 <alt_find_dev>
  8154e0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  8154e4:	e0bffe17 	ldw	r2,-8(fp)
}
  8154e8:	e037883a 	mov	sp,fp
  8154ec:	dfc00117 	ldw	ra,4(sp)
  8154f0:	df000017 	ldw	fp,0(sp)
  8154f4:	dec00204 	addi	sp,sp,8
  8154f8:	f800283a 	ret

008154fc <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  8154fc:	defffb04 	addi	sp,sp,-20
  815500:	df000415 	stw	fp,16(sp)
  815504:	df000404 	addi	fp,sp,16
  815508:	e13ffd15 	stw	r4,-12(fp)
  81550c:	e17ffe15 	stw	r5,-8(fp)
  815510:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  815514:	e03ffc15 	stw	zero,-16(fp)
  815518:	00000f06 	br	815558 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  81551c:	e0bffd17 	ldw	r2,-12(fp)
  815520:	10800a17 	ldw	r2,40(r2)
  815524:	11000044 	addi	r4,r2,1
  815528:	e0fffc17 	ldw	r3,-16(fp)
  81552c:	e0bffe17 	ldw	r2,-8(fp)
  815530:	1885883a 	add	r2,r3,r2
  815534:	10800003 	ldbu	r2,0(r2)
  815538:	10c03fcc 	andi	r3,r2,255
  81553c:	18c0201c 	xori	r3,r3,128
  815540:	18ffe004 	addi	r3,r3,-128
  815544:	2005883a 	mov	r2,r4
  815548:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  81554c:	e0bffc17 	ldw	r2,-16(fp)
  815550:	10800044 	addi	r2,r2,1
  815554:	e0bffc15 	stw	r2,-16(fp)
  815558:	e0fffc17 	ldw	r3,-16(fp)
  81555c:	e0bfff17 	ldw	r2,-4(fp)
  815560:	18bfee36 	bltu	r3,r2,81551c <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  815564:	e037883a 	mov	sp,fp
  815568:	df000017 	ldw	fp,0(sp)
  81556c:	dec00104 	addi	sp,sp,4
  815570:	f800283a 	ret

00815574 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  815574:	defffd04 	addi	sp,sp,-12
  815578:	df000215 	stw	fp,8(sp)
  81557c:	df000204 	addi	fp,sp,8
  815580:	e13ffe15 	stw	r4,-8(fp)
  815584:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  815588:	00000d06 	br	8155c0 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  81558c:	e0bffe17 	ldw	r2,-8(fp)
  815590:	10800a17 	ldw	r2,40(r2)
  815594:	11000044 	addi	r4,r2,1
  815598:	e0bfff17 	ldw	r2,-4(fp)
  81559c:	10800003 	ldbu	r2,0(r2)
  8155a0:	10c03fcc 	andi	r3,r2,255
  8155a4:	18c0201c 	xori	r3,r3,128
  8155a8:	18ffe004 	addi	r3,r3,-128
  8155ac:	2005883a 	mov	r2,r4
  8155b0:	10c00025 	stbio	r3,0(r2)
		++ptr;
  8155b4:	e0bfff17 	ldw	r2,-4(fp)
  8155b8:	10800044 	addi	r2,r2,1
  8155bc:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  8155c0:	e0bfff17 	ldw	r2,-4(fp)
  8155c4:	10800003 	ldbu	r2,0(r2)
  8155c8:	10803fcc 	andi	r2,r2,255
  8155cc:	1080201c 	xori	r2,r2,128
  8155d0:	10bfe004 	addi	r2,r2,-128
  8155d4:	1004c03a 	cmpne	r2,r2,zero
  8155d8:	103fec1e 	bne	r2,zero,81558c <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  8155dc:	e037883a 	mov	sp,fp
  8155e0:	df000017 	ldw	fp,0(sp)
  8155e4:	dec00104 	addi	sp,sp,4
  8155e8:	f800283a 	ret

008155ec <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  8155ec:	defffb04 	addi	sp,sp,-20
  8155f0:	dfc00415 	stw	ra,16(sp)
  8155f4:	df000315 	stw	fp,12(sp)
  8155f8:	df000304 	addi	fp,sp,12
  8155fc:	e13ffd15 	stw	r4,-12(fp)
  815600:	e17ffe15 	stw	r5,-8(fp)
  815604:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  815608:	e0bffd17 	ldw	r2,-12(fp)
  81560c:	10800017 	ldw	r2,0(r2)
  815610:	1009883a 	mov	r4,r2
  815614:	e1bfff17 	ldw	r6,-4(fp)
  815618:	e17ffe17 	ldw	r5,-8(fp)
  81561c:	08154fc0 	call	8154fc <alt_up_character_lcd_write>
	return 0;
  815620:	0005883a 	mov	r2,zero
}
  815624:	e037883a 	mov	sp,fp
  815628:	dfc00117 	ldw	ra,4(sp)
  81562c:	df000017 	ldw	fp,0(sp)
  815630:	dec00204 	addi	sp,sp,8
  815634:	f800283a 	ret

00815638 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  815638:	defff904 	addi	sp,sp,-28
  81563c:	dfc00615 	stw	ra,24(sp)
  815640:	df000515 	stw	fp,20(sp)
  815644:	df000504 	addi	fp,sp,20
  815648:	e13ffc15 	stw	r4,-16(fp)
  81564c:	e17ffd15 	stw	r5,-12(fp)
  815650:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  815654:	e0bffd17 	ldw	r2,-12(fp)
  815658:	10800a28 	cmpgeui	r2,r2,40
  81565c:	1000031e 	bne	r2,zero,81566c <alt_up_character_lcd_set_cursor_pos+0x34>
  815660:	e0bffe17 	ldw	r2,-8(fp)
  815664:	108000b0 	cmpltui	r2,r2,2
  815668:	1000031e 	bne	r2,zero,815678 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  81566c:	00bfffc4 	movi	r2,-1
  815670:	e0bfff15 	stw	r2,-4(fp)
  815674:	00000806 	br	815698 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  815678:	e13ffd17 	ldw	r4,-12(fp)
  81567c:	e17ffe17 	ldw	r5,-8(fp)
  815680:	08153d80 	call	8153d8 <get_DDRAM_addr>
  815684:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  815688:	e17ffb03 	ldbu	r5,-20(fp)
  81568c:	e13ffc17 	ldw	r4,-16(fp)
  815690:	08154540 	call	815454 <alt_up_character_lcd_send_cmd>
	return 0;
  815694:	e03fff15 	stw	zero,-4(fp)
  815698:	e0bfff17 	ldw	r2,-4(fp)
}
  81569c:	e037883a 	mov	sp,fp
  8156a0:	dfc00117 	ldw	ra,4(sp)
  8156a4:	df000017 	ldw	fp,0(sp)
  8156a8:	dec00204 	addi	sp,sp,8
  8156ac:	f800283a 	ret

008156b0 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  8156b0:	defff904 	addi	sp,sp,-28
  8156b4:	dfc00615 	stw	ra,24(sp)
  8156b8:	df000515 	stw	fp,20(sp)
  8156bc:	df000504 	addi	fp,sp,20
  8156c0:	e13ffc15 	stw	r4,-16(fp)
  8156c4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  8156c8:	e0bffd17 	ldw	r2,-12(fp)
  8156cc:	1005003a 	cmpeq	r2,r2,zero
  8156d0:	10001e1e 	bne	r2,zero,81574c <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  8156d4:	e0bffd17 	ldw	r2,-12(fp)
  8156d8:	10800050 	cmplti	r2,r2,1
  8156dc:	1000031e 	bne	r2,zero,8156ec <alt_up_character_lcd_shift_cursor+0x3c>
  8156e0:	00800504 	movi	r2,20
  8156e4:	e0bfff05 	stb	r2,-4(fp)
  8156e8:	00000206 	br	8156f4 <alt_up_character_lcd_shift_cursor+0x44>
  8156ec:	00c00404 	movi	r3,16
  8156f0:	e0ffff05 	stb	r3,-4(fp)
  8156f4:	e0bfff03 	ldbu	r2,-4(fp)
  8156f8:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  8156fc:	e0fffd17 	ldw	r3,-12(fp)
  815700:	e0fffe15 	stw	r3,-8(fp)
  815704:	e0fffe17 	ldw	r3,-8(fp)
  815708:	1804403a 	cmpge	r2,r3,zero
  81570c:	1000031e 	bne	r2,zero,81571c <alt_up_character_lcd_shift_cursor+0x6c>
  815710:	e0bffe17 	ldw	r2,-8(fp)
  815714:	0085c83a 	sub	r2,zero,r2
  815718:	e0bffe15 	stw	r2,-8(fp)
  81571c:	e0fffe17 	ldw	r3,-8(fp)
  815720:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  815724:	00000306 	br	815734 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  815728:	e17ffb43 	ldbu	r5,-19(fp)
  81572c:	e13ffc17 	ldw	r4,-16(fp)
  815730:	08154540 	call	815454 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  815734:	e0bffb03 	ldbu	r2,-20(fp)
  815738:	10bfffc4 	addi	r2,r2,-1
  81573c:	e0bffb05 	stb	r2,-20(fp)
  815740:	e0bffb03 	ldbu	r2,-20(fp)
  815744:	10803fd8 	cmpnei	r2,r2,255
  815748:	103ff71e 	bne	r2,zero,815728 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  81574c:	e037883a 	mov	sp,fp
  815750:	dfc00117 	ldw	ra,4(sp)
  815754:	df000017 	ldw	fp,0(sp)
  815758:	dec00204 	addi	sp,sp,8
  81575c:	f800283a 	ret

00815760 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  815760:	defff904 	addi	sp,sp,-28
  815764:	dfc00615 	stw	ra,24(sp)
  815768:	df000515 	stw	fp,20(sp)
  81576c:	df000504 	addi	fp,sp,20
  815770:	e13ffc15 	stw	r4,-16(fp)
  815774:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  815778:	e0bffd17 	ldw	r2,-12(fp)
  81577c:	1005003a 	cmpeq	r2,r2,zero
  815780:	10001e1e 	bne	r2,zero,8157fc <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  815784:	e0bffd17 	ldw	r2,-12(fp)
  815788:	10800050 	cmplti	r2,r2,1
  81578c:	1000031e 	bne	r2,zero,81579c <alt_up_character_lcd_shift_display+0x3c>
  815790:	00800704 	movi	r2,28
  815794:	e0bfff05 	stb	r2,-4(fp)
  815798:	00000206 	br	8157a4 <alt_up_character_lcd_shift_display+0x44>
  81579c:	00c00604 	movi	r3,24
  8157a0:	e0ffff05 	stb	r3,-4(fp)
  8157a4:	e0bfff03 	ldbu	r2,-4(fp)
  8157a8:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  8157ac:	e0fffd17 	ldw	r3,-12(fp)
  8157b0:	e0fffe15 	stw	r3,-8(fp)
  8157b4:	e0fffe17 	ldw	r3,-8(fp)
  8157b8:	1804403a 	cmpge	r2,r3,zero
  8157bc:	1000031e 	bne	r2,zero,8157cc <alt_up_character_lcd_shift_display+0x6c>
  8157c0:	e0bffe17 	ldw	r2,-8(fp)
  8157c4:	0085c83a 	sub	r2,zero,r2
  8157c8:	e0bffe15 	stw	r2,-8(fp)
  8157cc:	e0fffe17 	ldw	r3,-8(fp)
  8157d0:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  8157d4:	00000306 	br	8157e4 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  8157d8:	e17ffb43 	ldbu	r5,-19(fp)
  8157dc:	e13ffc17 	ldw	r4,-16(fp)
  8157e0:	08154540 	call	815454 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  8157e4:	e0bffb03 	ldbu	r2,-20(fp)
  8157e8:	10bfffc4 	addi	r2,r2,-1
  8157ec:	e0bffb05 	stb	r2,-20(fp)
  8157f0:	e0bffb03 	ldbu	r2,-20(fp)
  8157f4:	10803fd8 	cmpnei	r2,r2,255
  8157f8:	103ff71e 	bne	r2,zero,8157d8 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  8157fc:	e037883a 	mov	sp,fp
  815800:	dfc00117 	ldw	ra,4(sp)
  815804:	df000017 	ldw	fp,0(sp)
  815808:	dec00204 	addi	sp,sp,8
  81580c:	f800283a 	ret

00815810 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  815810:	defff904 	addi	sp,sp,-28
  815814:	dfc00615 	stw	ra,24(sp)
  815818:	df000515 	stw	fp,20(sp)
  81581c:	df000504 	addi	fp,sp,20
  815820:	e13ffc15 	stw	r4,-16(fp)
  815824:	e17ffd15 	stw	r5,-12(fp)
  815828:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  81582c:	e0bffd17 	ldw	r2,-12(fp)
  815830:	10800a28 	cmpgeui	r2,r2,40
  815834:	1000031e 	bne	r2,zero,815844 <alt_up_character_lcd_erase_pos+0x34>
  815838:	e0bffe17 	ldw	r2,-8(fp)
  81583c:	108000b0 	cmpltui	r2,r2,2
  815840:	1000031e 	bne	r2,zero,815850 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  815844:	00bfffc4 	movi	r2,-1
  815848:	e0bfff15 	stw	r2,-4(fp)
  81584c:	00000e06 	br	815888 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  815850:	e13ffd17 	ldw	r4,-12(fp)
  815854:	e17ffe17 	ldw	r5,-8(fp)
  815858:	08153d80 	call	8153d8 <get_DDRAM_addr>
  81585c:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  815860:	e17ffb03 	ldbu	r5,-20(fp)
  815864:	e13ffc17 	ldw	r4,-16(fp)
  815868:	08154540 	call	815454 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
  81586c:	e0bffc17 	ldw	r2,-16(fp)
  815870:	10800a17 	ldw	r2,40(r2)
  815874:	10800044 	addi	r2,r2,1
  815878:	1007883a 	mov	r3,r2
  81587c:	00800084 	movi	r2,2
  815880:	18800025 	stbio	r2,0(r3)
	return 0;
  815884:	e03fff15 	stw	zero,-4(fp)
  815888:	e0bfff17 	ldw	r2,-4(fp)
}
  81588c:	e037883a 	mov	sp,fp
  815890:	dfc00117 	ldw	ra,4(sp)
  815894:	df000017 	ldw	fp,0(sp)
  815898:	dec00204 	addi	sp,sp,8
  81589c:	f800283a 	ret

008158a0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  8158a0:	defffd04 	addi	sp,sp,-12
  8158a4:	dfc00215 	stw	ra,8(sp)
  8158a8:	df000115 	stw	fp,4(sp)
  8158ac:	df000104 	addi	fp,sp,4
  8158b0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  8158b4:	e13fff17 	ldw	r4,-4(fp)
  8158b8:	01400304 	movi	r5,12
  8158bc:	08154540 	call	815454 <alt_up_character_lcd_send_cmd>
}
  8158c0:	e037883a 	mov	sp,fp
  8158c4:	dfc00117 	ldw	ra,4(sp)
  8158c8:	df000017 	ldw	fp,0(sp)
  8158cc:	dec00204 	addi	sp,sp,8
  8158d0:	f800283a 	ret

008158d4 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  8158d4:	defffd04 	addi	sp,sp,-12
  8158d8:	dfc00215 	stw	ra,8(sp)
  8158dc:	df000115 	stw	fp,4(sp)
  8158e0:	df000104 	addi	fp,sp,4
  8158e4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  8158e8:	e13fff17 	ldw	r4,-4(fp)
  8158ec:	014003c4 	movi	r5,15
  8158f0:	08154540 	call	815454 <alt_up_character_lcd_send_cmd>
}
  8158f4:	e037883a 	mov	sp,fp
  8158f8:	dfc00117 	ldw	ra,4(sp)
  8158fc:	df000017 	ldw	fp,0(sp)
  815900:	dec00204 	addi	sp,sp,8
  815904:	f800283a 	ret

00815908 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
  815908:	defffc04 	addi	sp,sp,-16
  81590c:	dfc00315 	stw	ra,12(sp)
  815910:	df000215 	stw	fp,8(sp)
  815914:	df000204 	addi	fp,sp,8
  815918:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
  81591c:	e0bfff17 	ldw	r2,-4(fp)
  815920:	10800217 	ldw	r2,8(r2)
  815924:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
  815928:	00000c06 	br	81595c <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
  81592c:	e13ffe17 	ldw	r4,-8(fp)
  815930:	014020b4 	movhi	r5,130
  815934:	29755004 	addi	r5,r5,-10944
  815938:	0810fd00 	call	810fd0 <strcmp>
  81593c:	1004c03a 	cmpne	r2,r2,zero
  815940:	1000031e 	bne	r2,zero,815950 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
  815944:	e0bffe17 	ldw	r2,-8(fp)
  815948:	10000005 	stb	zero,0(r2)
			break;
  81594c:	00000a06 	br	815978 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
  815950:	e0bffe17 	ldw	r2,-8(fp)
  815954:	10800044 	addi	r2,r2,1
  815958:	e0bffe15 	stw	r2,-8(fp)
  81595c:	e0bffe17 	ldw	r2,-8(fp)
  815960:	10800003 	ldbu	r2,0(r2)
  815964:	10803fcc 	andi	r2,r2,255
  815968:	1080201c 	xori	r2,r2,128
  81596c:	10bfe004 	addi	r2,r2,-128
  815970:	1004c03a 	cmpne	r2,r2,zero
  815974:	103fed1e 	bne	r2,zero,81592c <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
  815978:	e037883a 	mov	sp,fp
  81597c:	dfc00117 	ldw	ra,4(sp)
  815980:	df000017 	ldw	fp,0(sp)
  815984:	dec00204 	addi	sp,sp,8
  815988:	f800283a 	ret

0081598c <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
  81598c:	defffc04 	addi	sp,sp,-16
  815990:	dfc00315 	stw	ra,12(sp)
  815994:	df000215 	stw	fp,8(sp)
  815998:	df000204 	addi	fp,sp,8
  81599c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
  8159a0:	e13fff17 	ldw	r4,-4(fp)
  8159a4:	014020b4 	movhi	r5,130
  8159a8:	297c4104 	addi	r5,r5,-3836
  8159ac:	081bbf80 	call	81bbf8 <alt_find_dev>
  8159b0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  8159b4:	e0bffe17 	ldw	r2,-8(fp)
}
  8159b8:	e037883a 	mov	sp,fp
  8159bc:	dfc00117 	ldw	ra,4(sp)
  8159c0:	df000017 	ldw	fp,0(sp)
  8159c4:	dec00204 	addi	sp,sp,8
  8159c8:	f800283a 	ret

008159cc <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
  8159cc:	defff904 	addi	sp,sp,-28
  8159d0:	df000615 	stw	fp,24(sp)
  8159d4:	df000604 	addi	fp,sp,24
  8159d8:	e13ffb15 	stw	r4,-20(fp)
  8159dc:	e1bffd15 	stw	r6,-12(fp)
  8159e0:	e1fffe15 	stw	r7,-8(fp)
  8159e4:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  8159e8:	e0bffb17 	ldw	r2,-20(fp)
  8159ec:	10c00c17 	ldw	r3,48(r2)
  8159f0:	e0bffd17 	ldw	r2,-12(fp)
  8159f4:	10c0042e 	bgeu	r2,r3,815a08 <alt_up_char_buffer_draw+0x3c>
  8159f8:	e0bffb17 	ldw	r2,-20(fp)
  8159fc:	10c00d17 	ldw	r3,52(r2)
  815a00:	e0bffe17 	ldw	r2,-8(fp)
  815a04:	10c00336 	bltu	r2,r3,815a14 <alt_up_char_buffer_draw+0x48>
		return -1;
  815a08:	00bfffc4 	movi	r2,-1
  815a0c:	e0bfff15 	stw	r2,-4(fp)
  815a10:	00001d06 	br	815a88 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
  815a14:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
  815a18:	e0bffb17 	ldw	r2,-20(fp)
  815a1c:	10c00f17 	ldw	r3,60(r2)
  815a20:	e0bffd17 	ldw	r2,-12(fp)
  815a24:	1886703a 	and	r3,r3,r2
  815a28:	e0bffb17 	ldw	r2,-20(fp)
  815a2c:	10800e17 	ldw	r2,56(r2)
  815a30:	1886983a 	sll	r3,r3,r2
  815a34:	e0bffa17 	ldw	r2,-24(fp)
  815a38:	10c4b03a 	or	r2,r2,r3
  815a3c:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
  815a40:	e0bffb17 	ldw	r2,-20(fp)
  815a44:	10c01117 	ldw	r3,68(r2)
  815a48:	e0bffe17 	ldw	r2,-8(fp)
  815a4c:	1886703a 	and	r3,r3,r2
  815a50:	e0bffb17 	ldw	r2,-20(fp)
  815a54:	10801017 	ldw	r2,64(r2)
  815a58:	1886983a 	sll	r3,r3,r2
  815a5c:	e0bffa17 	ldw	r2,-24(fp)
  815a60:	10c4b03a 	or	r2,r2,r3
  815a64:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
  815a68:	e0bffb17 	ldw	r2,-20(fp)
  815a6c:	10800b17 	ldw	r2,44(r2)
  815a70:	1007883a 	mov	r3,r2
  815a74:	e0bffa17 	ldw	r2,-24(fp)
  815a78:	1885883a 	add	r2,r3,r2
  815a7c:	e0fffc03 	ldbu	r3,-16(fp)
  815a80:	10c00025 	stbio	r3,0(r2)

	return 0;
  815a84:	e03fff15 	stw	zero,-4(fp)
  815a88:	e0bfff17 	ldw	r2,-4(fp)
}
  815a8c:	e037883a 	mov	sp,fp
  815a90:	df000017 	ldw	fp,0(sp)
  815a94:	dec00104 	addi	sp,sp,4
  815a98:	f800283a 	ret

00815a9c <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
  815a9c:	defff904 	addi	sp,sp,-28
  815aa0:	df000615 	stw	fp,24(sp)
  815aa4:	df000604 	addi	fp,sp,24
  815aa8:	e13ffb15 	stw	r4,-20(fp)
  815aac:	e17ffc15 	stw	r5,-16(fp)
  815ab0:	e1bffd15 	stw	r6,-12(fp)
  815ab4:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  815ab8:	e0bffb17 	ldw	r2,-20(fp)
  815abc:	10c00c17 	ldw	r3,48(r2)
  815ac0:	e0bffd17 	ldw	r2,-12(fp)
  815ac4:	10c0042e 	bgeu	r2,r3,815ad8 <alt_up_char_buffer_string+0x3c>
  815ac8:	e0bffb17 	ldw	r2,-20(fp)
  815acc:	10c00d17 	ldw	r3,52(r2)
  815ad0:	e0bffe17 	ldw	r2,-8(fp)
  815ad4:	10c00336 	bltu	r2,r3,815ae4 <alt_up_char_buffer_string+0x48>
		return -1;
  815ad8:	00bfffc4 	movi	r2,-1
  815adc:	e0bfff15 	stw	r2,-4(fp)
  815ae0:	00002e06 	br	815b9c <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
  815ae4:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
  815ae8:	e0bffb17 	ldw	r2,-20(fp)
  815aec:	10801017 	ldw	r2,64(r2)
  815af0:	1007883a 	mov	r3,r2
  815af4:	e0bffe17 	ldw	r2,-8(fp)
  815af8:	10c6983a 	sll	r3,r2,r3
  815afc:	e0bffd17 	ldw	r2,-12(fp)
  815b00:	1885883a 	add	r2,r3,r2
  815b04:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
  815b08:	00001c06 	br	815b7c <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
  815b0c:	e0bffb17 	ldw	r2,-20(fp)
  815b10:	10800b17 	ldw	r2,44(r2)
  815b14:	1007883a 	mov	r3,r2
  815b18:	e0bffa17 	ldw	r2,-24(fp)
  815b1c:	1889883a 	add	r4,r3,r2
  815b20:	e0bffc17 	ldw	r2,-16(fp)
  815b24:	10800003 	ldbu	r2,0(r2)
  815b28:	10c03fcc 	andi	r3,r2,255
  815b2c:	18c0201c 	xori	r3,r3,128
  815b30:	18ffe004 	addi	r3,r3,-128
  815b34:	2005883a 	mov	r2,r4
  815b38:	10c00025 	stbio	r3,0(r2)
		++ptr;
  815b3c:	e0bffc17 	ldw	r2,-16(fp)
  815b40:	10800044 	addi	r2,r2,1
  815b44:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
  815b48:	e0bffd17 	ldw	r2,-12(fp)
  815b4c:	10800044 	addi	r2,r2,1
  815b50:	e0bffd15 	stw	r2,-12(fp)
  815b54:	e0bffb17 	ldw	r2,-20(fp)
  815b58:	10c00c17 	ldw	r3,48(r2)
  815b5c:	e0bffd17 	ldw	r2,-12(fp)
  815b60:	10c00336 	bltu	r2,r3,815b70 <alt_up_char_buffer_string+0xd4>
			return -1;
  815b64:	00bfffc4 	movi	r2,-1
  815b68:	e0bfff15 	stw	r2,-4(fp)
  815b6c:	00000b06 	br	815b9c <alt_up_char_buffer_string+0x100>
		++offset;
  815b70:	e0bffa17 	ldw	r2,-24(fp)
  815b74:	10800044 	addi	r2,r2,1
  815b78:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
  815b7c:	e0bffc17 	ldw	r2,-16(fp)
  815b80:	10800003 	ldbu	r2,0(r2)
  815b84:	10803fcc 	andi	r2,r2,255
  815b88:	1080201c 	xori	r2,r2,128
  815b8c:	10bfe004 	addi	r2,r2,-128
  815b90:	1004c03a 	cmpne	r2,r2,zero
  815b94:	103fdd1e 	bne	r2,zero,815b0c <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
  815b98:	e03fff15 	stw	zero,-4(fp)
  815b9c:	e0bfff17 	ldw	r2,-4(fp)
}
  815ba0:	e037883a 	mov	sp,fp
  815ba4:	df000017 	ldw	fp,0(sp)
  815ba8:	dec00104 	addi	sp,sp,4
  815bac:	f800283a 	ret

00815bb0 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
  815bb0:	defffe04 	addi	sp,sp,-8
  815bb4:	df000115 	stw	fp,4(sp)
  815bb8:	df000104 	addi	fp,sp,4
  815bbc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
  815bc0:	e0bfff17 	ldw	r2,-4(fp)
  815bc4:	10800a17 	ldw	r2,40(r2)
  815bc8:	10800084 	addi	r2,r2,2
  815bcc:	1007883a 	mov	r3,r2
  815bd0:	00800044 	movi	r2,1
  815bd4:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
  815bd8:	e0bfff17 	ldw	r2,-4(fp)
  815bdc:	10800a17 	ldw	r2,40(r2)
  815be0:	10800084 	addi	r2,r2,2
  815be4:	10800023 	ldbuio	r2,0(r2)
  815be8:	1080004c 	andi	r2,r2,1
  815bec:	10803fcc 	andi	r2,r2,255
  815bf0:	1004c03a 	cmpne	r2,r2,zero
  815bf4:	103ff81e 	bne	r2,zero,815bd8 <alt_up_char_buffer_clear+0x28>
	return 0;
  815bf8:	0005883a 	mov	r2,zero
}
  815bfc:	e037883a 	mov	sp,fp
  815c00:	df000017 	ldw	fp,0(sp)
  815c04:	dec00104 	addi	sp,sp,4
  815c08:	f800283a 	ret

00815c0c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  815c0c:	defffc04 	addi	sp,sp,-16
  815c10:	dfc00315 	stw	ra,12(sp)
  815c14:	df000215 	stw	fp,8(sp)
  815c18:	df000204 	addi	fp,sp,8
  815c1c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  815c20:	e13fff17 	ldw	r4,-4(fp)
  815c24:	014020b4 	movhi	r5,130
  815c28:	297c4104 	addi	r5,r5,-3836
  815c2c:	081bbf80 	call	81bbf8 <alt_find_dev>
  815c30:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  815c34:	e0bffe17 	ldw	r2,-8(fp)
}
  815c38:	e037883a 	mov	sp,fp
  815c3c:	dfc00117 	ldw	ra,4(sp)
  815c40:	df000017 	ldw	fp,0(sp)
  815c44:	dec00204 	addi	sp,sp,8
  815c48:	f800283a 	ret

00815c4c <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  815c4c:	defff904 	addi	sp,sp,-28
  815c50:	df000615 	stw	fp,24(sp)
  815c54:	df000604 	addi	fp,sp,24
  815c58:	e13ffb15 	stw	r4,-20(fp)
  815c5c:	e17ffc15 	stw	r5,-16(fp)
  815c60:	e1bffd15 	stw	r6,-12(fp)
  815c64:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  815c68:	e0bffb17 	ldw	r2,-20(fp)
  815c6c:	10c00f17 	ldw	r3,60(r2)
  815c70:	e0bffd17 	ldw	r2,-12(fp)
  815c74:	10c0042e 	bgeu	r2,r3,815c88 <alt_up_pixel_buffer_dma_draw+0x3c>
  815c78:	e0bffb17 	ldw	r2,-20(fp)
  815c7c:	10c01017 	ldw	r3,64(r2)
  815c80:	e0bffe17 	ldw	r2,-8(fp)
  815c84:	10c00336 	bltu	r2,r3,815c94 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
  815c88:	00bfffc4 	movi	r2,-1
  815c8c:	e0bfff15 	stw	r2,-4(fp)
  815c90:	00005106 	br	815dd8 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
  815c94:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  815c98:	e0bffb17 	ldw	r2,-20(fp)
  815c9c:	10800d17 	ldw	r2,52(r2)
  815ca0:	1004c03a 	cmpne	r2,r2,zero
  815ca4:	1000151e 	bne	r2,zero,815cfc <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  815ca8:	e0bffb17 	ldw	r2,-20(fp)
  815cac:	10c01217 	ldw	r3,72(r2)
  815cb0:	e0bffd17 	ldw	r2,-12(fp)
  815cb4:	1886703a 	and	r3,r3,r2
  815cb8:	e0bffb17 	ldw	r2,-20(fp)
  815cbc:	10801117 	ldw	r2,68(r2)
  815cc0:	1886983a 	sll	r3,r3,r2
  815cc4:	e0bffa17 	ldw	r2,-24(fp)
  815cc8:	10c4b03a 	or	r2,r2,r3
  815ccc:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  815cd0:	e0bffb17 	ldw	r2,-20(fp)
  815cd4:	10c01417 	ldw	r3,80(r2)
  815cd8:	e0bffe17 	ldw	r2,-8(fp)
  815cdc:	1886703a 	and	r3,r3,r2
  815ce0:	e0bffb17 	ldw	r2,-20(fp)
  815ce4:	10801317 	ldw	r2,76(r2)
  815ce8:	1886983a 	sll	r3,r3,r2
  815cec:	e0bffa17 	ldw	r2,-24(fp)
  815cf0:	10c4b03a 	or	r2,r2,r3
  815cf4:	e0bffa15 	stw	r2,-24(fp)
  815cf8:	00001706 	br	815d58 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  815cfc:	e0bffb17 	ldw	r2,-20(fp)
  815d00:	10c01217 	ldw	r3,72(r2)
  815d04:	e0bffd17 	ldw	r2,-12(fp)
  815d08:	1886703a 	and	r3,r3,r2
  815d0c:	e0bffb17 	ldw	r2,-20(fp)
  815d10:	10801117 	ldw	r2,68(r2)
  815d14:	1886983a 	sll	r3,r3,r2
  815d18:	e0bffa17 	ldw	r2,-24(fp)
  815d1c:	10c5883a 	add	r2,r2,r3
  815d20:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  815d24:	e0bffb17 	ldw	r2,-20(fp)
  815d28:	10c01417 	ldw	r3,80(r2)
  815d2c:	e0bffe17 	ldw	r2,-8(fp)
  815d30:	1886703a 	and	r3,r3,r2
  815d34:	e0bffb17 	ldw	r2,-20(fp)
  815d38:	10800f17 	ldw	r2,60(r2)
  815d3c:	1887383a 	mul	r3,r3,r2
  815d40:	e0bffb17 	ldw	r2,-20(fp)
  815d44:	10801117 	ldw	r2,68(r2)
  815d48:	1886983a 	sll	r3,r3,r2
  815d4c:	e0bffa17 	ldw	r2,-24(fp)
  815d50:	10c5883a 	add	r2,r2,r3
  815d54:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  815d58:	e0bffb17 	ldw	r2,-20(fp)
  815d5c:	10800e17 	ldw	r2,56(r2)
  815d60:	10800058 	cmpnei	r2,r2,1
  815d64:	1000081e 	bne	r2,zero,815d88 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  815d68:	e0bffb17 	ldw	r2,-20(fp)
  815d6c:	10800c17 	ldw	r2,48(r2)
  815d70:	1007883a 	mov	r3,r2
  815d74:	e0bffa17 	ldw	r2,-24(fp)
  815d78:	1885883a 	add	r2,r3,r2
  815d7c:	e0fffc17 	ldw	r3,-16(fp)
  815d80:	10c00025 	stbio	r3,0(r2)
  815d84:	00001306 	br	815dd4 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  815d88:	e0bffb17 	ldw	r2,-20(fp)
  815d8c:	10800e17 	ldw	r2,56(r2)
  815d90:	10800098 	cmpnei	r2,r2,2
  815d94:	1000081e 	bne	r2,zero,815db8 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  815d98:	e0bffb17 	ldw	r2,-20(fp)
  815d9c:	10800c17 	ldw	r2,48(r2)
  815da0:	1007883a 	mov	r3,r2
  815da4:	e0bffa17 	ldw	r2,-24(fp)
  815da8:	1885883a 	add	r2,r3,r2
  815dac:	e0fffc17 	ldw	r3,-16(fp)
  815db0:	10c0002d 	sthio	r3,0(r2)
  815db4:	00000706 	br	815dd4 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  815db8:	e0bffb17 	ldw	r2,-20(fp)
  815dbc:	10800c17 	ldw	r2,48(r2)
  815dc0:	1007883a 	mov	r3,r2
  815dc4:	e0bffa17 	ldw	r2,-24(fp)
  815dc8:	1885883a 	add	r2,r3,r2
  815dcc:	e0fffc17 	ldw	r3,-16(fp)
  815dd0:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  815dd4:	e03fff15 	stw	zero,-4(fp)
  815dd8:	e0bfff17 	ldw	r2,-4(fp)
}
  815ddc:	e037883a 	mov	sp,fp
  815de0:	df000017 	ldw	fp,0(sp)
  815de4:	dec00104 	addi	sp,sp,4
  815de8:	f800283a 	ret

00815dec <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  815dec:	defffd04 	addi	sp,sp,-12
  815df0:	df000215 	stw	fp,8(sp)
  815df4:	df000204 	addi	fp,sp,8
  815df8:	e13ffe15 	stw	r4,-8(fp)
  815dfc:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  815e00:	e0bffe17 	ldw	r2,-8(fp)
  815e04:	10800a17 	ldw	r2,40(r2)
  815e08:	10800104 	addi	r2,r2,4
  815e0c:	e0ffff17 	ldw	r3,-4(fp)
  815e10:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  815e14:	e0bffe17 	ldw	r2,-8(fp)
  815e18:	10800a17 	ldw	r2,40(r2)
  815e1c:	10800104 	addi	r2,r2,4
  815e20:	10800037 	ldwio	r2,0(r2)
  815e24:	1007883a 	mov	r3,r2
  815e28:	e0bffe17 	ldw	r2,-8(fp)
  815e2c:	10c00c15 	stw	r3,48(r2)
	return 0;
  815e30:	0005883a 	mov	r2,zero
}
  815e34:	e037883a 	mov	sp,fp
  815e38:	df000017 	ldw	fp,0(sp)
  815e3c:	dec00104 	addi	sp,sp,4
  815e40:	f800283a 	ret

00815e44 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  815e44:	defffe04 	addi	sp,sp,-8
  815e48:	df000115 	stw	fp,4(sp)
  815e4c:	df000104 	addi	fp,sp,4
  815e50:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  815e54:	e0bfff17 	ldw	r2,-4(fp)
  815e58:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  815e5c:	e0bfff17 	ldw	r2,-4(fp)
  815e60:	10800a17 	ldw	r2,40(r2)
  815e64:	1007883a 	mov	r3,r2
  815e68:	00800044 	movi	r2,1
  815e6c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  815e70:	e0bfff17 	ldw	r2,-4(fp)
  815e74:	10c00b17 	ldw	r3,44(r2)
  815e78:	e0bfff17 	ldw	r2,-4(fp)
  815e7c:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  815e80:	e0bfff17 	ldw	r2,-4(fp)
  815e84:	11000b15 	stw	r4,44(r2)
	return 0;
  815e88:	0005883a 	mov	r2,zero
}
  815e8c:	e037883a 	mov	sp,fp
  815e90:	df000017 	ldw	fp,0(sp)
  815e94:	dec00104 	addi	sp,sp,4
  815e98:	f800283a 	ret

00815e9c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  815e9c:	defffe04 	addi	sp,sp,-8
  815ea0:	df000115 	stw	fp,4(sp)
  815ea4:	df000104 	addi	fp,sp,4
  815ea8:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  815eac:	e0bfff17 	ldw	r2,-4(fp)
  815eb0:	10800a17 	ldw	r2,40(r2)
  815eb4:	10800304 	addi	r2,r2,12
  815eb8:	10800037 	ldwio	r2,0(r2)
  815ebc:	1080004c 	andi	r2,r2,1
}
  815ec0:	e037883a 	mov	sp,fp
  815ec4:	df000017 	ldw	fp,0(sp)
  815ec8:	dec00104 	addi	sp,sp,4
  815ecc:	f800283a 	ret

00815ed0 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  815ed0:	defff604 	addi	sp,sp,-40
  815ed4:	df000915 	stw	fp,36(sp)
  815ed8:	df000904 	addi	fp,sp,36
  815edc:	e13ff715 	stw	r4,-36(fp)
  815ee0:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  815ee4:	e0bff817 	ldw	r2,-32(fp)
  815ee8:	10800058 	cmpnei	r2,r2,1
  815eec:	1000041e 	bne	r2,zero,815f00 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  815ef0:	e0bff717 	ldw	r2,-36(fp)
  815ef4:	10800c17 	ldw	r2,48(r2)
  815ef8:	e0bfff15 	stw	r2,-4(fp)
  815efc:	00000306 	br	815f0c <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  815f00:	e0bff717 	ldw	r2,-36(fp)
  815f04:	10800b17 	ldw	r2,44(r2)
  815f08:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  815f0c:	e0bff717 	ldw	r2,-36(fp)
  815f10:	10800f17 	ldw	r2,60(r2)
  815f14:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  815f18:	e0bff717 	ldw	r2,-36(fp)
  815f1c:	10800e17 	ldw	r2,56(r2)
  815f20:	10800098 	cmpnei	r2,r2,2
  815f24:	1000051e 	bne	r2,zero,815f3c <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
  815f28:	e0fffe17 	ldw	r3,-8(fp)
  815f2c:	e0fffe17 	ldw	r3,-8(fp)
  815f30:	18c5883a 	add	r2,r3,r3
  815f34:	e0bffe15 	stw	r2,-8(fp)
  815f38:	00000506 	br	815f50 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
  815f3c:	e13ffe17 	ldw	r4,-8(fp)
  815f40:	e13ffe17 	ldw	r4,-8(fp)
  815f44:	2105883a 	add	r2,r4,r4
  815f48:	1085883a 	add	r2,r2,r2
  815f4c:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  815f50:	e0bff717 	ldw	r2,-36(fp)
  815f54:	10801017 	ldw	r2,64(r2)
  815f58:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  815f5c:	e0bff717 	ldw	r2,-36(fp)
  815f60:	10800d17 	ldw	r2,52(r2)
  815f64:	1004c03a 	cmpne	r2,r2,zero
  815f68:	10001e1e 	bne	r2,zero,815fe4 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  815f6c:	e0bff717 	ldw	r2,-36(fp)
  815f70:	10801317 	ldw	r2,76(r2)
  815f74:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  815f78:	e03ffb15 	stw	zero,-20(fp)
  815f7c:	00001506 	br	815fd4 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
  815f80:	e03ffc15 	stw	zero,-16(fp)
  815f84:	00000706 	br	815fa4 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
  815f88:	e0ffff17 	ldw	r3,-4(fp)
  815f8c:	e0bffc17 	ldw	r2,-16(fp)
  815f90:	1885883a 	add	r2,r3,r2
  815f94:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  815f98:	e0bffc17 	ldw	r2,-16(fp)
  815f9c:	10800104 	addi	r2,r2,4
  815fa0:	e0bffc15 	stw	r2,-16(fp)
  815fa4:	e0fffc17 	ldw	r3,-16(fp)
  815fa8:	e13ffe17 	ldw	r4,-8(fp)
  815fac:	193ff636 	bltu	r3,r4,815f88 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  815fb0:	e0fffa17 	ldw	r3,-24(fp)
  815fb4:	00800044 	movi	r2,1
  815fb8:	10c4983a 	sll	r2,r2,r3
  815fbc:	e0ffff17 	ldw	r3,-4(fp)
  815fc0:	1887883a 	add	r3,r3,r2
  815fc4:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  815fc8:	e13ffb17 	ldw	r4,-20(fp)
  815fcc:	21000044 	addi	r4,r4,1
  815fd0:	e13ffb15 	stw	r4,-20(fp)
  815fd4:	e0bffb17 	ldw	r2,-20(fp)
  815fd8:	e0fffd17 	ldw	r3,-12(fp)
  815fdc:	10ffe836 	bltu	r2,r3,815f80 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
  815fe0:	00001006 	br	816024 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  815fe4:	e13ffd17 	ldw	r4,-12(fp)
  815fe8:	e0bffe17 	ldw	r2,-8(fp)
  815fec:	2089383a 	mul	r4,r4,r2
  815ff0:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  815ff4:	e03ff915 	stw	zero,-28(fp)
  815ff8:	00000706 	br	816018 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
  815ffc:	e0ffff17 	ldw	r3,-4(fp)
  816000:	e0bff917 	ldw	r2,-28(fp)
  816004:	1885883a 	add	r2,r3,r2
  816008:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  81600c:	e0fff917 	ldw	r3,-28(fp)
  816010:	18c00104 	addi	r3,r3,4
  816014:	e0fff915 	stw	r3,-28(fp)
  816018:	e0bff917 	ldw	r2,-28(fp)
  81601c:	e13ffd17 	ldw	r4,-12(fp)
  816020:	113ff636 	bltu	r2,r4,815ffc <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  816024:	e037883a 	mov	sp,fp
  816028:	df000017 	ldw	fp,0(sp)
  81602c:	dec00104 	addi	sp,sp,4
  816030:	f800283a 	ret

00816034 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  816034:	deffed04 	addi	sp,sp,-76
  816038:	df001215 	stw	fp,72(sp)
  81603c:	df001204 	addi	fp,sp,72
  816040:	e13fee15 	stw	r4,-72(fp)
  816044:	e17fef15 	stw	r5,-68(fp)
  816048:	e1bff015 	stw	r6,-64(fp)
  81604c:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  816050:	e0bfee17 	ldw	r2,-72(fp)
  816054:	10800f17 	ldw	r2,60(r2)
  816058:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  81605c:	e0bfee17 	ldw	r2,-72(fp)
  816060:	10801017 	ldw	r2,64(r2)
  816064:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  816068:	e0bfef17 	ldw	r2,-68(fp)
  81606c:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  816070:	e0fff117 	ldw	r3,-60(fp)
  816074:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  816078:	e13ff017 	ldw	r4,-64(fp)
  81607c:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  816080:	e0800117 	ldw	r2,4(fp)
  816084:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  816088:	e0c00217 	ldw	r3,8(fp)
  81608c:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  816090:	e13ffa17 	ldw	r4,-24(fp)
  816094:	e0bffb17 	ldw	r2,-20(fp)
  816098:	2080062e 	bgeu	r4,r2,8160b4 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
  81609c:	e0fffb17 	ldw	r3,-20(fp)
  8160a0:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  8160a4:	e13ffa17 	ldw	r4,-24(fp)
  8160a8:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  8160ac:	e0bffc17 	ldw	r2,-16(fp)
  8160b0:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  8160b4:	e0fff817 	ldw	r3,-32(fp)
  8160b8:	e13ff917 	ldw	r4,-28(fp)
  8160bc:	1900062e 	bgeu	r3,r4,8160d8 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
  8160c0:	e0bff917 	ldw	r2,-28(fp)
  8160c4:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  8160c8:	e0fff817 	ldw	r3,-32(fp)
  8160cc:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  8160d0:	e13ffc17 	ldw	r4,-16(fp)
  8160d4:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  8160d8:	e0bffb17 	ldw	r2,-20(fp)
  8160dc:	e0fffe17 	ldw	r3,-8(fp)
  8160e0:	10c10d2e 	bgeu	r2,r3,816518 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
  8160e4:	e13ff917 	ldw	r4,-28(fp)
  8160e8:	e0bffd17 	ldw	r2,-12(fp)
  8160ec:	20800136 	bltu	r4,r2,8160f4 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  8160f0:	00010906 	br	816518 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  8160f4:	e0fffa17 	ldw	r3,-24(fp)
  8160f8:	e13ffe17 	ldw	r4,-8(fp)
  8160fc:	19000336 	bltu	r3,r4,81610c <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
  816100:	e0bffe17 	ldw	r2,-8(fp)
  816104:	10bfffc4 	addi	r2,r2,-1
  816108:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  81610c:	e0fff817 	ldw	r3,-32(fp)
  816110:	e13ffd17 	ldw	r4,-12(fp)
  816114:	19000336 	bltu	r3,r4,816124 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
  816118:	e0bffd17 	ldw	r2,-12(fp)
  81611c:	10bfffc4 	addi	r2,r2,-1
  816120:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  816124:	e0800317 	ldw	r2,12(fp)
  816128:	10800058 	cmpnei	r2,r2,1
  81612c:	1000041e 	bne	r2,zero,816140 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
  816130:	e0bfee17 	ldw	r2,-72(fp)
  816134:	10800c17 	ldw	r2,48(r2)
  816138:	e0bfff15 	stw	r2,-4(fp)
  81613c:	00000306 	br	81614c <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
  816140:	e0bfee17 	ldw	r2,-72(fp)
  816144:	10800b17 	ldw	r2,44(r2)
  816148:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  81614c:	e0bfee17 	ldw	r2,-72(fp)
  816150:	10800d17 	ldw	r2,52(r2)
  816154:	1004c03a 	cmpne	r2,r2,zero
  816158:	1000721e 	bne	r2,zero,816324 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  81615c:	e0bfee17 	ldw	r2,-72(fp)
  816160:	10801317 	ldw	r2,76(r2)
  816164:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  816168:	e0bff417 	ldw	r2,-48(fp)
  81616c:	e0fff917 	ldw	r3,-28(fp)
  816170:	1884983a 	sll	r2,r3,r2
  816174:	e13fff17 	ldw	r4,-4(fp)
  816178:	2089883a 	add	r4,r4,r2
  81617c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  816180:	e0bfee17 	ldw	r2,-72(fp)
  816184:	10800e17 	ldw	r2,56(r2)
  816188:	10800058 	cmpnei	r2,r2,1
  81618c:	10001e1e 	bne	r2,zero,816208 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
  816190:	e0bff917 	ldw	r2,-28(fp)
  816194:	e0bff515 	stw	r2,-44(fp)
  816198:	00001706 	br	8161f8 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
  81619c:	e0fffb17 	ldw	r3,-20(fp)
  8161a0:	e0fff615 	stw	r3,-40(fp)
  8161a4:	00000806 	br	8161c8 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
  8161a8:	e0ffff17 	ldw	r3,-4(fp)
  8161ac:	e0bff617 	ldw	r2,-40(fp)
  8161b0:	1885883a 	add	r2,r3,r2
  8161b4:	e0fff717 	ldw	r3,-36(fp)
  8161b8:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  8161bc:	e13ff617 	ldw	r4,-40(fp)
  8161c0:	21000044 	addi	r4,r4,1
  8161c4:	e13ff615 	stw	r4,-40(fp)
  8161c8:	e0bffa17 	ldw	r2,-24(fp)
  8161cc:	e0fff617 	ldw	r3,-40(fp)
  8161d0:	10fff52e 	bgeu	r2,r3,8161a8 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  8161d4:	e0fff417 	ldw	r3,-48(fp)
  8161d8:	00800044 	movi	r2,1
  8161dc:	10c4983a 	sll	r2,r2,r3
  8161e0:	e13fff17 	ldw	r4,-4(fp)
  8161e4:	2089883a 	add	r4,r4,r2
  8161e8:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  8161ec:	e0bff517 	ldw	r2,-44(fp)
  8161f0:	10800044 	addi	r2,r2,1
  8161f4:	e0bff515 	stw	r2,-44(fp)
  8161f8:	e0fff817 	ldw	r3,-32(fp)
  8161fc:	e13ff517 	ldw	r4,-44(fp)
  816200:	193fe62e 	bgeu	r3,r4,81619c <alt_up_pixel_buffer_dma_draw_box+0x168>
  816204:	0000c406 	br	816518 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  816208:	e0bfee17 	ldw	r2,-72(fp)
  81620c:	10800e17 	ldw	r2,56(r2)
  816210:	10800098 	cmpnei	r2,r2,2
  816214:	1000211e 	bne	r2,zero,81629c <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
  816218:	e0bff917 	ldw	r2,-28(fp)
  81621c:	e0bff515 	stw	r2,-44(fp)
  816220:	00001a06 	br	81628c <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
  816224:	e0fffb17 	ldw	r3,-20(fp)
  816228:	e0fff615 	stw	r3,-40(fp)
  81622c:	00000b06 	br	81625c <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  816230:	e13ff617 	ldw	r4,-40(fp)
  816234:	e13ff617 	ldw	r4,-40(fp)
  816238:	2105883a 	add	r2,r4,r4
  81623c:	1007883a 	mov	r3,r2
  816240:	e0bfff17 	ldw	r2,-4(fp)
  816244:	1885883a 	add	r2,r3,r2
  816248:	e0fff717 	ldw	r3,-36(fp)
  81624c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  816250:	e0bff617 	ldw	r2,-40(fp)
  816254:	10800044 	addi	r2,r2,1
  816258:	e0bff615 	stw	r2,-40(fp)
  81625c:	e0fffa17 	ldw	r3,-24(fp)
  816260:	e13ff617 	ldw	r4,-40(fp)
  816264:	193ff22e 	bgeu	r3,r4,816230 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  816268:	e0fff417 	ldw	r3,-48(fp)
  81626c:	00800044 	movi	r2,1
  816270:	10c4983a 	sll	r2,r2,r3
  816274:	e0ffff17 	ldw	r3,-4(fp)
  816278:	1887883a 	add	r3,r3,r2
  81627c:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  816280:	e13ff517 	ldw	r4,-44(fp)
  816284:	21000044 	addi	r4,r4,1
  816288:	e13ff515 	stw	r4,-44(fp)
  81628c:	e0bff817 	ldw	r2,-32(fp)
  816290:	e0fff517 	ldw	r3,-44(fp)
  816294:	10ffe32e 	bgeu	r2,r3,816224 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
  816298:	00009f06 	br	816518 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  81629c:	e13ff917 	ldw	r4,-28(fp)
  8162a0:	e13ff515 	stw	r4,-44(fp)
  8162a4:	00001b06 	br	816314 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
  8162a8:	e0bffb17 	ldw	r2,-20(fp)
  8162ac:	e0bff615 	stw	r2,-40(fp)
  8162b0:	00000c06 	br	8162e4 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  8162b4:	e0fff617 	ldw	r3,-40(fp)
  8162b8:	e0fff617 	ldw	r3,-40(fp)
  8162bc:	18c5883a 	add	r2,r3,r3
  8162c0:	1085883a 	add	r2,r2,r2
  8162c4:	1007883a 	mov	r3,r2
  8162c8:	e0bfff17 	ldw	r2,-4(fp)
  8162cc:	1885883a 	add	r2,r3,r2
  8162d0:	e0fff717 	ldw	r3,-36(fp)
  8162d4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  8162d8:	e13ff617 	ldw	r4,-40(fp)
  8162dc:	21000044 	addi	r4,r4,1
  8162e0:	e13ff615 	stw	r4,-40(fp)
  8162e4:	e0bffa17 	ldw	r2,-24(fp)
  8162e8:	e0fff617 	ldw	r3,-40(fp)
  8162ec:	10fff12e 	bgeu	r2,r3,8162b4 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  8162f0:	e0fff417 	ldw	r3,-48(fp)
  8162f4:	00800044 	movi	r2,1
  8162f8:	10c4983a 	sll	r2,r2,r3
  8162fc:	e13fff17 	ldw	r4,-4(fp)
  816300:	2089883a 	add	r4,r4,r2
  816304:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  816308:	e0bff517 	ldw	r2,-44(fp)
  81630c:	10800044 	addi	r2,r2,1
  816310:	e0bff515 	stw	r2,-44(fp)
  816314:	e0fff817 	ldw	r3,-32(fp)
  816318:	e13ff517 	ldw	r4,-44(fp)
  81631c:	193fe22e 	bgeu	r3,r4,8162a8 <alt_up_pixel_buffer_dma_draw_box+0x274>
  816320:	00007d06 	br	816518 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  816324:	e0bfee17 	ldw	r2,-72(fp)
  816328:	10800e17 	ldw	r2,56(r2)
  81632c:	10800058 	cmpnei	r2,r2,1
  816330:	1000221e 	bne	r2,zero,8163bc <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
  816334:	e0fff917 	ldw	r3,-28(fp)
  816338:	e13ffe17 	ldw	r4,-8(fp)
  81633c:	1905383a 	mul	r2,r3,r4
  816340:	e0ffff17 	ldw	r3,-4(fp)
  816344:	1887883a 	add	r3,r3,r2
  816348:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  81634c:	e13ff917 	ldw	r4,-28(fp)
  816350:	e13ff215 	stw	r4,-56(fp)
  816354:	00001506 	br	8163ac <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
  816358:	e0bffb17 	ldw	r2,-20(fp)
  81635c:	e0bff315 	stw	r2,-52(fp)
  816360:	00000806 	br	816384 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
  816364:	e0ffff17 	ldw	r3,-4(fp)
  816368:	e0bff317 	ldw	r2,-52(fp)
  81636c:	1885883a 	add	r2,r3,r2
  816370:	e0fff717 	ldw	r3,-36(fp)
  816374:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  816378:	e0fff317 	ldw	r3,-52(fp)
  81637c:	18c00044 	addi	r3,r3,1
  816380:	e0fff315 	stw	r3,-52(fp)
  816384:	e13ffa17 	ldw	r4,-24(fp)
  816388:	e0bff317 	ldw	r2,-52(fp)
  81638c:	20bff52e 	bgeu	r4,r2,816364 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  816390:	e0ffff17 	ldw	r3,-4(fp)
  816394:	e13ffe17 	ldw	r4,-8(fp)
  816398:	1907883a 	add	r3,r3,r4
  81639c:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  8163a0:	e0bff217 	ldw	r2,-56(fp)
  8163a4:	10800044 	addi	r2,r2,1
  8163a8:	e0bff215 	stw	r2,-56(fp)
  8163ac:	e0fff817 	ldw	r3,-32(fp)
  8163b0:	e13ff217 	ldw	r4,-56(fp)
  8163b4:	193fe82e 	bgeu	r3,r4,816358 <alt_up_pixel_buffer_dma_draw_box+0x324>
  8163b8:	00005706 	br	816518 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  8163bc:	e0bfee17 	ldw	r2,-72(fp)
  8163c0:	10800e17 	ldw	r2,56(r2)
  8163c4:	10800098 	cmpnei	r2,r2,2
  8163c8:	1000291e 	bne	r2,zero,816470 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
  8163cc:	e0fffe17 	ldw	r3,-8(fp)
  8163d0:	e0fffe17 	ldw	r3,-8(fp)
  8163d4:	18c5883a 	add	r2,r3,r3
  8163d8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  8163dc:	e13ff917 	ldw	r4,-28(fp)
  8163e0:	e0fffe17 	ldw	r3,-8(fp)
  8163e4:	20c5383a 	mul	r2,r4,r3
  8163e8:	e13fff17 	ldw	r4,-4(fp)
  8163ec:	2089883a 	add	r4,r4,r2
  8163f0:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  8163f4:	e0bff917 	ldw	r2,-28(fp)
  8163f8:	e0bff215 	stw	r2,-56(fp)
  8163fc:	00001806 	br	816460 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
  816400:	e0fffb17 	ldw	r3,-20(fp)
  816404:	e0fff315 	stw	r3,-52(fp)
  816408:	00000b06 	br	816438 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  81640c:	e13ff317 	ldw	r4,-52(fp)
  816410:	e13ff317 	ldw	r4,-52(fp)
  816414:	2105883a 	add	r2,r4,r4
  816418:	1007883a 	mov	r3,r2
  81641c:	e0bfff17 	ldw	r2,-4(fp)
  816420:	1885883a 	add	r2,r3,r2
  816424:	e0fff717 	ldw	r3,-36(fp)
  816428:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  81642c:	e0bff317 	ldw	r2,-52(fp)
  816430:	10800044 	addi	r2,r2,1
  816434:	e0bff315 	stw	r2,-52(fp)
  816438:	e0fffa17 	ldw	r3,-24(fp)
  81643c:	e13ff317 	ldw	r4,-52(fp)
  816440:	193ff22e 	bgeu	r3,r4,81640c <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  816444:	e0bfff17 	ldw	r2,-4(fp)
  816448:	e0fffe17 	ldw	r3,-8(fp)
  81644c:	10c5883a 	add	r2,r2,r3
  816450:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  816454:	e13ff217 	ldw	r4,-56(fp)
  816458:	21000044 	addi	r4,r4,1
  81645c:	e13ff215 	stw	r4,-56(fp)
  816460:	e0bff817 	ldw	r2,-32(fp)
  816464:	e0fff217 	ldw	r3,-56(fp)
  816468:	10ffe52e 	bgeu	r2,r3,816400 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
  81646c:	00002a06 	br	816518 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  816470:	e13ffe17 	ldw	r4,-8(fp)
  816474:	e13ffe17 	ldw	r4,-8(fp)
  816478:	2105883a 	add	r2,r4,r4
  81647c:	1085883a 	add	r2,r2,r2
  816480:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  816484:	e0fff917 	ldw	r3,-28(fp)
  816488:	e13ffe17 	ldw	r4,-8(fp)
  81648c:	1905383a 	mul	r2,r3,r4
  816490:	e0ffff17 	ldw	r3,-4(fp)
  816494:	1887883a 	add	r3,r3,r2
  816498:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  81649c:	e13ff917 	ldw	r4,-28(fp)
  8164a0:	e13ff215 	stw	r4,-56(fp)
  8164a4:	00001906 	br	81650c <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
  8164a8:	e0bffb17 	ldw	r2,-20(fp)
  8164ac:	e0bff315 	stw	r2,-52(fp)
  8164b0:	00000c06 	br	8164e4 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  8164b4:	e0fff317 	ldw	r3,-52(fp)
  8164b8:	e0fff317 	ldw	r3,-52(fp)
  8164bc:	18c5883a 	add	r2,r3,r3
  8164c0:	1085883a 	add	r2,r2,r2
  8164c4:	1007883a 	mov	r3,r2
  8164c8:	e0bfff17 	ldw	r2,-4(fp)
  8164cc:	1885883a 	add	r2,r3,r2
  8164d0:	e0fff717 	ldw	r3,-36(fp)
  8164d4:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  8164d8:	e13ff317 	ldw	r4,-52(fp)
  8164dc:	21000044 	addi	r4,r4,1
  8164e0:	e13ff315 	stw	r4,-52(fp)
  8164e4:	e0bffa17 	ldw	r2,-24(fp)
  8164e8:	e0fff317 	ldw	r3,-52(fp)
  8164ec:	10fff12e 	bgeu	r2,r3,8164b4 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  8164f0:	e13fff17 	ldw	r4,-4(fp)
  8164f4:	e0bffe17 	ldw	r2,-8(fp)
  8164f8:	2089883a 	add	r4,r4,r2
  8164fc:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  816500:	e0fff217 	ldw	r3,-56(fp)
  816504:	18c00044 	addi	r3,r3,1
  816508:	e0fff215 	stw	r3,-56(fp)
  81650c:	e13ff817 	ldw	r4,-32(fp)
  816510:	e0bff217 	ldw	r2,-56(fp)
  816514:	20bfe42e 	bgeu	r4,r2,8164a8 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  816518:	e037883a 	mov	sp,fp
  81651c:	df000017 	ldw	fp,0(sp)
  816520:	dec00104 	addi	sp,sp,4
  816524:	f800283a 	ret

00816528 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  816528:	defff204 	addi	sp,sp,-56
  81652c:	df000d15 	stw	fp,52(sp)
  816530:	df000d04 	addi	fp,sp,52
  816534:	e13ff315 	stw	r4,-52(fp)
  816538:	e17ff415 	stw	r5,-48(fp)
  81653c:	e1bff515 	stw	r6,-44(fp)
  816540:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  816544:	e0bff317 	ldw	r2,-52(fp)
  816548:	10800f17 	ldw	r2,60(r2)
  81654c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  816550:	e0bff317 	ldw	r2,-52(fp)
  816554:	10801017 	ldw	r2,64(r2)
  816558:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  81655c:	e0bff417 	ldw	r2,-48(fp)
  816560:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  816564:	e0fff517 	ldw	r3,-44(fp)
  816568:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  81656c:	e13ff617 	ldw	r4,-40(fp)
  816570:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  816574:	e0800117 	ldw	r2,4(fp)
  816578:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  81657c:	e0fffb17 	ldw	r3,-20(fp)
  816580:	e13ffc17 	ldw	r4,-16(fp)
  816584:	1900042e 	bgeu	r3,r4,816598 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
  816588:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  81658c:	e0fffb17 	ldw	r3,-20(fp)
  816590:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  816594:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  816598:	e13ffc17 	ldw	r4,-16(fp)
  81659c:	e0bffe17 	ldw	r2,-8(fp)
  8165a0:	2080b12e 	bgeu	r4,r2,816868 <alt_up_pixel_buffer_dma_draw_hline+0x340>
  8165a4:	e0fffa17 	ldw	r3,-24(fp)
  8165a8:	e13ffd17 	ldw	r4,-12(fp)
  8165ac:	19000136 	bltu	r3,r4,8165b4 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  8165b0:	0000ad06 	br	816868 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  8165b4:	e0bffb17 	ldw	r2,-20(fp)
  8165b8:	e0fffe17 	ldw	r3,-8(fp)
  8165bc:	10c00336 	bltu	r2,r3,8165cc <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
  8165c0:	e13ffe17 	ldw	r4,-8(fp)
  8165c4:	213fffc4 	addi	r4,r4,-1
  8165c8:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  8165cc:	e0800217 	ldw	r2,8(fp)
  8165d0:	10800058 	cmpnei	r2,r2,1
  8165d4:	1000041e 	bne	r2,zero,8165e8 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  8165d8:	e0bff317 	ldw	r2,-52(fp)
  8165dc:	10800c17 	ldw	r2,48(r2)
  8165e0:	e0bfff15 	stw	r2,-4(fp)
  8165e4:	00000306 	br	8165f4 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  8165e8:	e0bff317 	ldw	r2,-52(fp)
  8165ec:	10800b17 	ldw	r2,44(r2)
  8165f0:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  8165f4:	e0bff317 	ldw	r2,-52(fp)
  8165f8:	10800d17 	ldw	r2,52(r2)
  8165fc:	1004c03a 	cmpne	r2,r2,zero
  816600:	1000431e 	bne	r2,zero,816710 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  816604:	e0bff317 	ldw	r2,-52(fp)
  816608:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  81660c:	e0fffa17 	ldw	r3,-24(fp)
  816610:	1884983a 	sll	r2,r3,r2
  816614:	e13fff17 	ldw	r4,-4(fp)
  816618:	2089883a 	add	r4,r4,r2
  81661c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  816620:	e0bff317 	ldw	r2,-52(fp)
  816624:	10800e17 	ldw	r2,56(r2)
  816628:	10800058 	cmpnei	r2,r2,1
  81662c:	10000f1e 	bne	r2,zero,81666c <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
  816630:	e0bffc17 	ldw	r2,-16(fp)
  816634:	e0bff815 	stw	r2,-32(fp)
  816638:	00000806 	br	81665c <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
  81663c:	e0ffff17 	ldw	r3,-4(fp)
  816640:	e0bff817 	ldw	r2,-32(fp)
  816644:	1885883a 	add	r2,r3,r2
  816648:	e0fff917 	ldw	r3,-28(fp)
  81664c:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  816650:	e0fff817 	ldw	r3,-32(fp)
  816654:	18c00044 	addi	r3,r3,1
  816658:	e0fff815 	stw	r3,-32(fp)
  81665c:	e13ffb17 	ldw	r4,-20(fp)
  816660:	e0bff817 	ldw	r2,-32(fp)
  816664:	20bff52e 	bgeu	r4,r2,81663c <alt_up_pixel_buffer_dma_draw_hline+0x114>
  816668:	00007f06 	br	816868 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  81666c:	e0bff317 	ldw	r2,-52(fp)
  816670:	10800e17 	ldw	r2,56(r2)
  816674:	10800098 	cmpnei	r2,r2,2
  816678:	1000121e 	bne	r2,zero,8166c4 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
  81667c:	e0fffc17 	ldw	r3,-16(fp)
  816680:	e0fff815 	stw	r3,-32(fp)
  816684:	00000b06 	br	8166b4 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  816688:	e13ff817 	ldw	r4,-32(fp)
  81668c:	e13ff817 	ldw	r4,-32(fp)
  816690:	2105883a 	add	r2,r4,r4
  816694:	1007883a 	mov	r3,r2
  816698:	e0bfff17 	ldw	r2,-4(fp)
  81669c:	1885883a 	add	r2,r3,r2
  8166a0:	e0fff917 	ldw	r3,-28(fp)
  8166a4:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  8166a8:	e0bff817 	ldw	r2,-32(fp)
  8166ac:	10800044 	addi	r2,r2,1
  8166b0:	e0bff815 	stw	r2,-32(fp)
  8166b4:	e0fffb17 	ldw	r3,-20(fp)
  8166b8:	e13ff817 	ldw	r4,-32(fp)
  8166bc:	193ff22e 	bgeu	r3,r4,816688 <alt_up_pixel_buffer_dma_draw_hline+0x160>
  8166c0:	00006906 	br	816868 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  8166c4:	e0bffc17 	ldw	r2,-16(fp)
  8166c8:	e0bff815 	stw	r2,-32(fp)
  8166cc:	00000c06 	br	816700 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  8166d0:	e0fff817 	ldw	r3,-32(fp)
  8166d4:	e0fff817 	ldw	r3,-32(fp)
  8166d8:	18c5883a 	add	r2,r3,r3
  8166dc:	1085883a 	add	r2,r2,r2
  8166e0:	1007883a 	mov	r3,r2
  8166e4:	e0bfff17 	ldw	r2,-4(fp)
  8166e8:	1885883a 	add	r2,r3,r2
  8166ec:	e0fff917 	ldw	r3,-28(fp)
  8166f0:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  8166f4:	e13ff817 	ldw	r4,-32(fp)
  8166f8:	21000044 	addi	r4,r4,1
  8166fc:	e13ff815 	stw	r4,-32(fp)
  816700:	e0bffb17 	ldw	r2,-20(fp)
  816704:	e0fff817 	ldw	r3,-32(fp)
  816708:	10fff12e 	bgeu	r2,r3,8166d0 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
  81670c:	00005606 	br	816868 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  816710:	e0bff317 	ldw	r2,-52(fp)
  816714:	10800e17 	ldw	r2,56(r2)
  816718:	10800058 	cmpnei	r2,r2,1
  81671c:	1000151e 	bne	r2,zero,816774 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
  816720:	e13ffa17 	ldw	r4,-24(fp)
  816724:	e0fffe17 	ldw	r3,-8(fp)
  816728:	20c5383a 	mul	r2,r4,r3
  81672c:	e13fff17 	ldw	r4,-4(fp)
  816730:	2089883a 	add	r4,r4,r2
  816734:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  816738:	e0bffc17 	ldw	r2,-16(fp)
  81673c:	e0bff715 	stw	r2,-36(fp)
  816740:	00000806 	br	816764 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  816744:	e0ffff17 	ldw	r3,-4(fp)
  816748:	e0bff717 	ldw	r2,-36(fp)
  81674c:	1885883a 	add	r2,r3,r2
  816750:	e0fff917 	ldw	r3,-28(fp)
  816754:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  816758:	e0fff717 	ldw	r3,-36(fp)
  81675c:	18c00044 	addi	r3,r3,1
  816760:	e0fff715 	stw	r3,-36(fp)
  816764:	e13ffb17 	ldw	r4,-20(fp)
  816768:	e0bff717 	ldw	r2,-36(fp)
  81676c:	20bff52e 	bgeu	r4,r2,816744 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
  816770:	00003d06 	br	816868 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  816774:	e0bff317 	ldw	r2,-52(fp)
  816778:	10800e17 	ldw	r2,56(r2)
  81677c:	10800098 	cmpnei	r2,r2,2
  816780:	10001c1e 	bne	r2,zero,8167f4 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
  816784:	e0fffe17 	ldw	r3,-8(fp)
  816788:	e0fffe17 	ldw	r3,-8(fp)
  81678c:	18c5883a 	add	r2,r3,r3
  816790:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  816794:	e13ffa17 	ldw	r4,-24(fp)
  816798:	e0fffe17 	ldw	r3,-8(fp)
  81679c:	20c5383a 	mul	r2,r4,r3
  8167a0:	e13fff17 	ldw	r4,-4(fp)
  8167a4:	2089883a 	add	r4,r4,r2
  8167a8:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  8167ac:	e0bffc17 	ldw	r2,-16(fp)
  8167b0:	e0bff715 	stw	r2,-36(fp)
  8167b4:	00000b06 	br	8167e4 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  8167b8:	e0fff717 	ldw	r3,-36(fp)
  8167bc:	e0fff717 	ldw	r3,-36(fp)
  8167c0:	18c5883a 	add	r2,r3,r3
  8167c4:	1007883a 	mov	r3,r2
  8167c8:	e0bfff17 	ldw	r2,-4(fp)
  8167cc:	1885883a 	add	r2,r3,r2
  8167d0:	e0fff917 	ldw	r3,-28(fp)
  8167d4:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  8167d8:	e13ff717 	ldw	r4,-36(fp)
  8167dc:	21000044 	addi	r4,r4,1
  8167e0:	e13ff715 	stw	r4,-36(fp)
  8167e4:	e0bffb17 	ldw	r2,-20(fp)
  8167e8:	e0fff717 	ldw	r3,-36(fp)
  8167ec:	10fff22e 	bgeu	r2,r3,8167b8 <alt_up_pixel_buffer_dma_draw_hline+0x290>
  8167f0:	00001d06 	br	816868 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  8167f4:	e13ffe17 	ldw	r4,-8(fp)
  8167f8:	e13ffe17 	ldw	r4,-8(fp)
  8167fc:	2105883a 	add	r2,r4,r4
  816800:	1085883a 	add	r2,r2,r2
  816804:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  816808:	e0fffa17 	ldw	r3,-24(fp)
  81680c:	e13ffe17 	ldw	r4,-8(fp)
  816810:	1905383a 	mul	r2,r3,r4
  816814:	e0ffff17 	ldw	r3,-4(fp)
  816818:	1887883a 	add	r3,r3,r2
  81681c:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  816820:	e13ffc17 	ldw	r4,-16(fp)
  816824:	e13ff715 	stw	r4,-36(fp)
  816828:	00000c06 	br	81685c <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  81682c:	e0fff717 	ldw	r3,-36(fp)
  816830:	e0fff717 	ldw	r3,-36(fp)
  816834:	18c5883a 	add	r2,r3,r3
  816838:	1085883a 	add	r2,r2,r2
  81683c:	1007883a 	mov	r3,r2
  816840:	e0bfff17 	ldw	r2,-4(fp)
  816844:	1885883a 	add	r2,r3,r2
  816848:	e0fff917 	ldw	r3,-28(fp)
  81684c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  816850:	e13ff717 	ldw	r4,-36(fp)
  816854:	21000044 	addi	r4,r4,1
  816858:	e13ff715 	stw	r4,-36(fp)
  81685c:	e0bffb17 	ldw	r2,-20(fp)
  816860:	e0fff717 	ldw	r3,-36(fp)
  816864:	10fff12e 	bgeu	r2,r3,81682c <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  816868:	e037883a 	mov	sp,fp
  81686c:	df000017 	ldw	fp,0(sp)
  816870:	dec00104 	addi	sp,sp,4
  816874:	f800283a 	ret

00816878 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  816878:	defff104 	addi	sp,sp,-60
  81687c:	df000e15 	stw	fp,56(sp)
  816880:	df000e04 	addi	fp,sp,56
  816884:	e13ff215 	stw	r4,-56(fp)
  816888:	e17ff315 	stw	r5,-52(fp)
  81688c:	e1bff415 	stw	r6,-48(fp)
  816890:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  816894:	e0bff217 	ldw	r2,-56(fp)
  816898:	10800f17 	ldw	r2,60(r2)
  81689c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  8168a0:	e0bff217 	ldw	r2,-56(fp)
  8168a4:	10801017 	ldw	r2,64(r2)
  8168a8:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  8168ac:	e0bff317 	ldw	r2,-52(fp)
  8168b0:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  8168b4:	e0fff417 	ldw	r3,-48(fp)
  8168b8:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  8168bc:	e13ff517 	ldw	r4,-44(fp)
  8168c0:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  8168c4:	e0800117 	ldw	r2,4(fp)
  8168c8:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  8168cc:	e0fffa17 	ldw	r3,-24(fp)
  8168d0:	e13ffb17 	ldw	r4,-20(fp)
  8168d4:	1900042e 	bgeu	r3,r4,8168e8 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
  8168d8:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  8168dc:	e0fffa17 	ldw	r3,-24(fp)
  8168e0:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  8168e4:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  8168e8:	e13ffc17 	ldw	r4,-16(fp)
  8168ec:	e0bffe17 	ldw	r2,-8(fp)
  8168f0:	2080d12e 	bgeu	r4,r2,816c38 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
  8168f4:	e0fffb17 	ldw	r3,-20(fp)
  8168f8:	e13ffd17 	ldw	r4,-12(fp)
  8168fc:	19000136 	bltu	r3,r4,816904 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  816900:	0000cd06 	br	816c38 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  816904:	e0bffa17 	ldw	r2,-24(fp)
  816908:	e0fffd17 	ldw	r3,-12(fp)
  81690c:	10c00336 	bltu	r2,r3,81691c <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
  816910:	e13ffd17 	ldw	r4,-12(fp)
  816914:	213fffc4 	addi	r4,r4,-1
  816918:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  81691c:	e0800217 	ldw	r2,8(fp)
  816920:	10800058 	cmpnei	r2,r2,1
  816924:	1000041e 	bne	r2,zero,816938 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  816928:	e0bff217 	ldw	r2,-56(fp)
  81692c:	10800c17 	ldw	r2,48(r2)
  816930:	e0bfff15 	stw	r2,-4(fp)
  816934:	00000306 	br	816944 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  816938:	e0bff217 	ldw	r2,-56(fp)
  81693c:	10800b17 	ldw	r2,44(r2)
  816940:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  816944:	e0bff217 	ldw	r2,-56(fp)
  816948:	10800d17 	ldw	r2,52(r2)
  81694c:	1004c03a 	cmpne	r2,r2,zero
  816950:	1000571e 	bne	r2,zero,816ab0 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  816954:	e0bff217 	ldw	r2,-56(fp)
  816958:	10801317 	ldw	r2,76(r2)
  81695c:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  816960:	e0bff717 	ldw	r2,-36(fp)
  816964:	e0fffb17 	ldw	r3,-20(fp)
  816968:	1884983a 	sll	r2,r3,r2
  81696c:	e13fff17 	ldw	r4,-4(fp)
  816970:	2089883a 	add	r4,r4,r2
  816974:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  816978:	e0bff217 	ldw	r2,-56(fp)
  81697c:	10800e17 	ldw	r2,56(r2)
  816980:	10800058 	cmpnei	r2,r2,1
  816984:	1000151e 	bne	r2,zero,8169dc <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
  816988:	e0bffb17 	ldw	r2,-20(fp)
  81698c:	e0bff815 	stw	r2,-32(fp)
  816990:	00000e06 	br	8169cc <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  816994:	e0ffff17 	ldw	r3,-4(fp)
  816998:	e0bffc17 	ldw	r2,-16(fp)
  81699c:	1885883a 	add	r2,r3,r2
  8169a0:	e0fff917 	ldw	r3,-28(fp)
  8169a4:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  8169a8:	e0fff717 	ldw	r3,-36(fp)
  8169ac:	00800044 	movi	r2,1
  8169b0:	10c4983a 	sll	r2,r2,r3
  8169b4:	e0ffff17 	ldw	r3,-4(fp)
  8169b8:	1887883a 	add	r3,r3,r2
  8169bc:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  8169c0:	e13ff817 	ldw	r4,-32(fp)
  8169c4:	21000044 	addi	r4,r4,1
  8169c8:	e13ff815 	stw	r4,-32(fp)
  8169cc:	e0bffa17 	ldw	r2,-24(fp)
  8169d0:	e0fff817 	ldw	r3,-32(fp)
  8169d4:	10ffef2e 	bgeu	r2,r3,816994 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
  8169d8:	00009706 	br	816c38 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  8169dc:	e0bff217 	ldw	r2,-56(fp)
  8169e0:	10800e17 	ldw	r2,56(r2)
  8169e4:	10800098 	cmpnei	r2,r2,2
  8169e8:	1000181e 	bne	r2,zero,816a4c <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
  8169ec:	e13ffb17 	ldw	r4,-20(fp)
  8169f0:	e13ff815 	stw	r4,-32(fp)
  8169f4:	00001106 	br	816a3c <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  8169f8:	e0fffc17 	ldw	r3,-16(fp)
  8169fc:	e0fffc17 	ldw	r3,-16(fp)
  816a00:	18c5883a 	add	r2,r3,r3
  816a04:	1007883a 	mov	r3,r2
  816a08:	e0bfff17 	ldw	r2,-4(fp)
  816a0c:	1885883a 	add	r2,r3,r2
  816a10:	e0fff917 	ldw	r3,-28(fp)
  816a14:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  816a18:	e0fff717 	ldw	r3,-36(fp)
  816a1c:	00800044 	movi	r2,1
  816a20:	10c4983a 	sll	r2,r2,r3
  816a24:	e13fff17 	ldw	r4,-4(fp)
  816a28:	2089883a 	add	r4,r4,r2
  816a2c:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  816a30:	e0bff817 	ldw	r2,-32(fp)
  816a34:	10800044 	addi	r2,r2,1
  816a38:	e0bff815 	stw	r2,-32(fp)
  816a3c:	e0fffa17 	ldw	r3,-24(fp)
  816a40:	e13ff817 	ldw	r4,-32(fp)
  816a44:	193fec2e 	bgeu	r3,r4,8169f8 <alt_up_pixel_buffer_dma_draw_vline+0x180>
  816a48:	00007b06 	br	816c38 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  816a4c:	e0bffb17 	ldw	r2,-20(fp)
  816a50:	e0bff815 	stw	r2,-32(fp)
  816a54:	00001206 	br	816aa0 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  816a58:	e0fffc17 	ldw	r3,-16(fp)
  816a5c:	e0fffc17 	ldw	r3,-16(fp)
  816a60:	18c5883a 	add	r2,r3,r3
  816a64:	1085883a 	add	r2,r2,r2
  816a68:	1007883a 	mov	r3,r2
  816a6c:	e0bfff17 	ldw	r2,-4(fp)
  816a70:	1885883a 	add	r2,r3,r2
  816a74:	e0fff917 	ldw	r3,-28(fp)
  816a78:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  816a7c:	e0fff717 	ldw	r3,-36(fp)
  816a80:	00800044 	movi	r2,1
  816a84:	10c4983a 	sll	r2,r2,r3
  816a88:	e13fff17 	ldw	r4,-4(fp)
  816a8c:	2089883a 	add	r4,r4,r2
  816a90:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  816a94:	e0bff817 	ldw	r2,-32(fp)
  816a98:	10800044 	addi	r2,r2,1
  816a9c:	e0bff815 	stw	r2,-32(fp)
  816aa0:	e0fffa17 	ldw	r3,-24(fp)
  816aa4:	e13ff817 	ldw	r4,-32(fp)
  816aa8:	193feb2e 	bgeu	r3,r4,816a58 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
  816aac:	00006206 	br	816c38 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  816ab0:	e0bff217 	ldw	r2,-56(fp)
  816ab4:	10800e17 	ldw	r2,56(r2)
  816ab8:	10800058 	cmpnei	r2,r2,1
  816abc:	1000191e 	bne	r2,zero,816b24 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
  816ac0:	e0fffb17 	ldw	r3,-20(fp)
  816ac4:	e13ffe17 	ldw	r4,-8(fp)
  816ac8:	1905383a 	mul	r2,r3,r4
  816acc:	e0ffff17 	ldw	r3,-4(fp)
  816ad0:	1887883a 	add	r3,r3,r2
  816ad4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  816ad8:	e13ffb17 	ldw	r4,-20(fp)
  816adc:	e13ff615 	stw	r4,-40(fp)
  816ae0:	00000c06 	br	816b14 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  816ae4:	e0ffff17 	ldw	r3,-4(fp)
  816ae8:	e0bffc17 	ldw	r2,-16(fp)
  816aec:	1885883a 	add	r2,r3,r2
  816af0:	e0fff917 	ldw	r3,-28(fp)
  816af4:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  816af8:	e0bfff17 	ldw	r2,-4(fp)
  816afc:	e0fffe17 	ldw	r3,-8(fp)
  816b00:	10c5883a 	add	r2,r2,r3
  816b04:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  816b08:	e13ff617 	ldw	r4,-40(fp)
  816b0c:	21000044 	addi	r4,r4,1
  816b10:	e13ff615 	stw	r4,-40(fp)
  816b14:	e0bffa17 	ldw	r2,-24(fp)
  816b18:	e0fff617 	ldw	r3,-40(fp)
  816b1c:	10fff12e 	bgeu	r2,r3,816ae4 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
  816b20:	00004506 	br	816c38 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  816b24:	e0bff217 	ldw	r2,-56(fp)
  816b28:	10800e17 	ldw	r2,56(r2)
  816b2c:	10800098 	cmpnei	r2,r2,2
  816b30:	1000201e 	bne	r2,zero,816bb4 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
  816b34:	e13ffe17 	ldw	r4,-8(fp)
  816b38:	e13ffe17 	ldw	r4,-8(fp)
  816b3c:	2105883a 	add	r2,r4,r4
  816b40:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  816b44:	e0fffb17 	ldw	r3,-20(fp)
  816b48:	e13ffe17 	ldw	r4,-8(fp)
  816b4c:	1905383a 	mul	r2,r3,r4
  816b50:	e0ffff17 	ldw	r3,-4(fp)
  816b54:	1887883a 	add	r3,r3,r2
  816b58:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  816b5c:	e13ffb17 	ldw	r4,-20(fp)
  816b60:	e13ff615 	stw	r4,-40(fp)
  816b64:	00000f06 	br	816ba4 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  816b68:	e0fffc17 	ldw	r3,-16(fp)
  816b6c:	e0fffc17 	ldw	r3,-16(fp)
  816b70:	18c5883a 	add	r2,r3,r3
  816b74:	1007883a 	mov	r3,r2
  816b78:	e0bfff17 	ldw	r2,-4(fp)
  816b7c:	1885883a 	add	r2,r3,r2
  816b80:	e0fff917 	ldw	r3,-28(fp)
  816b84:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  816b88:	e13fff17 	ldw	r4,-4(fp)
  816b8c:	e0bffe17 	ldw	r2,-8(fp)
  816b90:	2089883a 	add	r4,r4,r2
  816b94:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  816b98:	e0fff617 	ldw	r3,-40(fp)
  816b9c:	18c00044 	addi	r3,r3,1
  816ba0:	e0fff615 	stw	r3,-40(fp)
  816ba4:	e13ffa17 	ldw	r4,-24(fp)
  816ba8:	e0bff617 	ldw	r2,-40(fp)
  816bac:	20bfee2e 	bgeu	r4,r2,816b68 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
  816bb0:	00002106 	br	816c38 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  816bb4:	e0fffe17 	ldw	r3,-8(fp)
  816bb8:	e0fffe17 	ldw	r3,-8(fp)
  816bbc:	18c5883a 	add	r2,r3,r3
  816bc0:	1085883a 	add	r2,r2,r2
  816bc4:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  816bc8:	e13ffb17 	ldw	r4,-20(fp)
  816bcc:	e0fffe17 	ldw	r3,-8(fp)
  816bd0:	20c5383a 	mul	r2,r4,r3
  816bd4:	e13fff17 	ldw	r4,-4(fp)
  816bd8:	2089883a 	add	r4,r4,r2
  816bdc:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  816be0:	e0bffb17 	ldw	r2,-20(fp)
  816be4:	e0bff615 	stw	r2,-40(fp)
  816be8:	00001006 	br	816c2c <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  816bec:	e0fffc17 	ldw	r3,-16(fp)
  816bf0:	e0fffc17 	ldw	r3,-16(fp)
  816bf4:	18c5883a 	add	r2,r3,r3
  816bf8:	1085883a 	add	r2,r2,r2
  816bfc:	1007883a 	mov	r3,r2
  816c00:	e0bfff17 	ldw	r2,-4(fp)
  816c04:	1885883a 	add	r2,r3,r2
  816c08:	e0fff917 	ldw	r3,-28(fp)
  816c0c:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  816c10:	e13fff17 	ldw	r4,-4(fp)
  816c14:	e0bffe17 	ldw	r2,-8(fp)
  816c18:	2089883a 	add	r4,r4,r2
  816c1c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  816c20:	e0fff617 	ldw	r3,-40(fp)
  816c24:	18c00044 	addi	r3,r3,1
  816c28:	e0fff615 	stw	r3,-40(fp)
  816c2c:	e13ffa17 	ldw	r4,-24(fp)
  816c30:	e0bff617 	ldw	r2,-40(fp)
  816c34:	20bfed2e 	bgeu	r4,r2,816bec <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  816c38:	e037883a 	mov	sp,fp
  816c3c:	df000017 	ldw	fp,0(sp)
  816c40:	dec00104 	addi	sp,sp,4
  816c44:	f800283a 	ret

00816c48 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  816c48:	defff804 	addi	sp,sp,-32
  816c4c:	dfc00715 	stw	ra,28(sp)
  816c50:	df000615 	stw	fp,24(sp)
  816c54:	df000604 	addi	fp,sp,24
  816c58:	e13ffc15 	stw	r4,-16(fp)
  816c5c:	e17ffd15 	stw	r5,-12(fp)
  816c60:	e1bffe15 	stw	r6,-8(fp)
  816c64:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  816c68:	e0800317 	ldw	r2,12(fp)
  816c6c:	d8800015 	stw	r2,0(sp)
  816c70:	e0800417 	ldw	r2,16(fp)
  816c74:	d8800115 	stw	r2,4(sp)
  816c78:	e13ffc17 	ldw	r4,-16(fp)
  816c7c:	e17ffd17 	ldw	r5,-12(fp)
  816c80:	e1bfff17 	ldw	r6,-4(fp)
  816c84:	e1fffe17 	ldw	r7,-8(fp)
  816c88:	08165280 	call	816528 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  816c8c:	e0800317 	ldw	r2,12(fp)
  816c90:	d8800015 	stw	r2,0(sp)
  816c94:	e0800417 	ldw	r2,16(fp)
  816c98:	d8800115 	stw	r2,4(sp)
  816c9c:	e13ffc17 	ldw	r4,-16(fp)
  816ca0:	e17ffd17 	ldw	r5,-12(fp)
  816ca4:	e1bfff17 	ldw	r6,-4(fp)
  816ca8:	e1c00217 	ldw	r7,8(fp)
  816cac:	08165280 	call	816528 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  816cb0:	e0800317 	ldw	r2,12(fp)
  816cb4:	d8800015 	stw	r2,0(sp)
  816cb8:	e0800417 	ldw	r2,16(fp)
  816cbc:	d8800115 	stw	r2,4(sp)
  816cc0:	e13ffc17 	ldw	r4,-16(fp)
  816cc4:	e17ffd17 	ldw	r5,-12(fp)
  816cc8:	e1bffe17 	ldw	r6,-8(fp)
  816ccc:	e1c00217 	ldw	r7,8(fp)
  816cd0:	08168780 	call	816878 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  816cd4:	e0800317 	ldw	r2,12(fp)
  816cd8:	d8800015 	stw	r2,0(sp)
  816cdc:	e0800417 	ldw	r2,16(fp)
  816ce0:	d8800115 	stw	r2,4(sp)
  816ce4:	e13ffc17 	ldw	r4,-16(fp)
  816ce8:	e17fff17 	ldw	r5,-4(fp)
  816cec:	e1bffe17 	ldw	r6,-8(fp)
  816cf0:	e1c00217 	ldw	r7,8(fp)
  816cf4:	08168780 	call	816878 <alt_up_pixel_buffer_dma_draw_vline>
}
  816cf8:	e037883a 	mov	sp,fp
  816cfc:	dfc00117 	ldw	ra,4(sp)
  816d00:	df000017 	ldw	fp,0(sp)
  816d04:	dec00204 	addi	sp,sp,8
  816d08:	f800283a 	ret

00816d0c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  816d0c:	defffb04 	addi	sp,sp,-20
  816d10:	df000415 	stw	fp,16(sp)
  816d14:	df000404 	addi	fp,sp,16
  816d18:	e13ffc15 	stw	r4,-16(fp)
  816d1c:	e17ffd15 	stw	r5,-12(fp)
  816d20:	e1bffe15 	stw	r6,-8(fp)
  816d24:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  816d28:	e0c00217 	ldw	r3,8(fp)
  816d2c:	1804c03a 	cmpne	r2,r3,zero
  816d30:	10000b1e 	bne	r2,zero,816d60 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  816d34:	e13ffd17 	ldw	r4,-12(fp)
  816d38:	e0ffff17 	ldw	r3,-4(fp)
  816d3c:	20c5383a 	mul	r2,r4,r3
  816d40:	e13ffe17 	ldw	r4,-8(fp)
  816d44:	1105883a 	add	r2,r2,r4
  816d48:	1007883a 	mov	r3,r2
  816d4c:	e0bffc17 	ldw	r2,-16(fp)
  816d50:	1885883a 	add	r2,r3,r2
  816d54:	e0c00117 	ldw	r3,4(fp)
  816d58:	10c00025 	stbio	r3,0(r2)
  816d5c:	00001b06 	br	816dcc <helper_plot_pixel+0xc0>
	else if (mode == 1)
  816d60:	e1000217 	ldw	r4,8(fp)
  816d64:	20800058 	cmpnei	r2,r4,1
  816d68:	10000c1e 	bne	r2,zero,816d9c <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  816d6c:	e0fffd17 	ldw	r3,-12(fp)
  816d70:	e13fff17 	ldw	r4,-4(fp)
  816d74:	1905383a 	mul	r2,r3,r4
  816d78:	e0fffe17 	ldw	r3,-8(fp)
  816d7c:	10c5883a 	add	r2,r2,r3
  816d80:	1085883a 	add	r2,r2,r2
  816d84:	1007883a 	mov	r3,r2
  816d88:	e0bffc17 	ldw	r2,-16(fp)
  816d8c:	1885883a 	add	r2,r3,r2
  816d90:	e1000117 	ldw	r4,4(fp)
  816d94:	1100002d 	sthio	r4,0(r2)
  816d98:	00000c06 	br	816dcc <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  816d9c:	e0fffd17 	ldw	r3,-12(fp)
  816da0:	e13fff17 	ldw	r4,-4(fp)
  816da4:	1905383a 	mul	r2,r3,r4
  816da8:	e0fffe17 	ldw	r3,-8(fp)
  816dac:	10c5883a 	add	r2,r2,r3
  816db0:	1085883a 	add	r2,r2,r2
  816db4:	1085883a 	add	r2,r2,r2
  816db8:	1007883a 	mov	r3,r2
  816dbc:	e0bffc17 	ldw	r2,-16(fp)
  816dc0:	1885883a 	add	r2,r3,r2
  816dc4:	e1000117 	ldw	r4,4(fp)
  816dc8:	11000035 	stwio	r4,0(r2)
}
  816dcc:	e037883a 	mov	sp,fp
  816dd0:	df000017 	ldw	fp,0(sp)
  816dd4:	dec00104 	addi	sp,sp,4
  816dd8:	f800283a 	ret

00816ddc <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  816ddc:	deffe404 	addi	sp,sp,-112
  816de0:	dfc01b15 	stw	ra,108(sp)
  816de4:	df001a15 	stw	fp,104(sp)
  816de8:	df001a04 	addi	fp,sp,104
  816dec:	e13fe815 	stw	r4,-96(fp)
  816df0:	e17fe915 	stw	r5,-92(fp)
  816df4:	e1bfea15 	stw	r6,-88(fp)
  816df8:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  816dfc:	e0bfe917 	ldw	r2,-92(fp)
  816e00:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  816e04:	e0ffea17 	ldw	r3,-88(fp)
  816e08:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  816e0c:	e13feb17 	ldw	r4,-84(fp)
  816e10:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  816e14:	e0800217 	ldw	r2,8(fp)
  816e18:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  816e1c:	e0fff717 	ldw	r3,-36(fp)
  816e20:	e13ff917 	ldw	r4,-28(fp)
  816e24:	1905c83a 	sub	r2,r3,r4
  816e28:	e0bfff15 	stw	r2,-4(fp)
  816e2c:	e0ffff17 	ldw	r3,-4(fp)
  816e30:	1804403a 	cmpge	r2,r3,zero
  816e34:	1000031e 	bne	r2,zero,816e44 <alt_up_pixel_buffer_dma_draw_line+0x68>
  816e38:	e13fff17 	ldw	r4,-4(fp)
  816e3c:	0109c83a 	sub	r4,zero,r4
  816e40:	e13fff15 	stw	r4,-4(fp)
  816e44:	e0fff817 	ldw	r3,-32(fp)
  816e48:	e13ffa17 	ldw	r4,-24(fp)
  816e4c:	1905c83a 	sub	r2,r3,r4
  816e50:	e0bffe15 	stw	r2,-8(fp)
  816e54:	e0fffe17 	ldw	r3,-8(fp)
  816e58:	1804403a 	cmpge	r2,r3,zero
  816e5c:	1000031e 	bne	r2,zero,816e6c <alt_up_pixel_buffer_dma_draw_line+0x90>
  816e60:	e13ffe17 	ldw	r4,-8(fp)
  816e64:	0109c83a 	sub	r4,zero,r4
  816e68:	e13ffe15 	stw	r4,-8(fp)
  816e6c:	e0fffe17 	ldw	r3,-8(fp)
  816e70:	e13fff17 	ldw	r4,-4(fp)
  816e74:	1904803a 	cmplt	r2,r3,r4
  816e78:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  816e7c:	e0bfe817 	ldw	r2,-96(fp)
  816e80:	10800e17 	ldw	r2,56(r2)
  816e84:	10800060 	cmpeqi	r2,r2,1
  816e88:	10000c1e 	bne	r2,zero,816ebc <alt_up_pixel_buffer_dma_draw_line+0xe0>
  816e8c:	e0bfe817 	ldw	r2,-96(fp)
  816e90:	10800e17 	ldw	r2,56(r2)
  816e94:	10800098 	cmpnei	r2,r2,2
  816e98:	1000031e 	bne	r2,zero,816ea8 <alt_up_pixel_buffer_dma_draw_line+0xcc>
  816e9c:	00800044 	movi	r2,1
  816ea0:	e0bffc15 	stw	r2,-16(fp)
  816ea4:	00000206 	br	816eb0 <alt_up_pixel_buffer_dma_draw_line+0xd4>
  816ea8:	00c00084 	movi	r3,2
  816eac:	e0fffc15 	stw	r3,-16(fp)
  816eb0:	e13ffc17 	ldw	r4,-16(fp)
  816eb4:	e13ffd15 	stw	r4,-12(fp)
  816eb8:	00000106 	br	816ec0 <alt_up_pixel_buffer_dma_draw_line+0xe4>
  816ebc:	e03ffd15 	stw	zero,-12(fp)
  816ec0:	e0bffd17 	ldw	r2,-12(fp)
  816ec4:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  816ec8:	e0c00317 	ldw	r3,12(fp)
  816ecc:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  816ed0:	e0bfe817 	ldw	r2,-96(fp)
  816ed4:	10800d17 	ldw	r2,52(r2)
  816ed8:	1004c03a 	cmpne	r2,r2,zero
  816edc:	1000091e 	bne	r2,zero,816f04 <alt_up_pixel_buffer_dma_draw_line+0x128>
  816ee0:	e0bfe817 	ldw	r2,-96(fp)
  816ee4:	10c01317 	ldw	r3,76(r2)
  816ee8:	e0bfef17 	ldw	r2,-68(fp)
  816eec:	1885c83a 	sub	r2,r3,r2
  816ef0:	1007883a 	mov	r3,r2
  816ef4:	00800044 	movi	r2,1
  816ef8:	10c4983a 	sll	r2,r2,r3
  816efc:	e0bffb15 	stw	r2,-20(fp)
  816f00:	00000306 	br	816f10 <alt_up_pixel_buffer_dma_draw_line+0x134>
  816f04:	e0bfe817 	ldw	r2,-96(fp)
  816f08:	10800f17 	ldw	r2,60(r2)
  816f0c:	e0bffb15 	stw	r2,-20(fp)
  816f10:	e13ffb17 	ldw	r4,-20(fp)
  816f14:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  816f18:	e0800417 	ldw	r2,16(fp)
  816f1c:	10800058 	cmpnei	r2,r2,1
  816f20:	1000041e 	bne	r2,zero,816f34 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  816f24:	e0bfe817 	ldw	r2,-96(fp)
  816f28:	10800c17 	ldw	r2,48(r2)
  816f2c:	e0bfed15 	stw	r2,-76(fp)
  816f30:	00000306 	br	816f40 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  816f34:	e0bfe817 	ldw	r2,-96(fp)
  816f38:	10800b17 	ldw	r2,44(r2)
  816f3c:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  816f40:	e0fff603 	ldbu	r3,-40(fp)
  816f44:	18803fcc 	andi	r2,r3,255
  816f48:	1080201c 	xori	r2,r2,128
  816f4c:	10bfe004 	addi	r2,r2,-128
  816f50:	10800050 	cmplti	r2,r2,1
  816f54:	10000c1e 	bne	r2,zero,816f88 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  816f58:	e13ffa17 	ldw	r4,-24(fp)
  816f5c:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  816f60:	e0bff917 	ldw	r2,-28(fp)
  816f64:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  816f68:	e0fff317 	ldw	r3,-52(fp)
  816f6c:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  816f70:	e13ff817 	ldw	r4,-32(fp)
  816f74:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  816f78:	e0bff717 	ldw	r2,-36(fp)
  816f7c:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  816f80:	e0fff317 	ldw	r3,-52(fp)
  816f84:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  816f88:	e13ff817 	ldw	r4,-32(fp)
  816f8c:	e0bffa17 	ldw	r2,-24(fp)
  816f90:	20800c0e 	bge	r4,r2,816fc4 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  816f94:	e0fffa17 	ldw	r3,-24(fp)
  816f98:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  816f9c:	e13ff817 	ldw	r4,-32(fp)
  816fa0:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  816fa4:	e0bff317 	ldw	r2,-52(fp)
  816fa8:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  816fac:	e0fff917 	ldw	r3,-28(fp)
  816fb0:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  816fb4:	e13ff717 	ldw	r4,-36(fp)
  816fb8:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  816fbc:	e0bff317 	ldw	r2,-52(fp)
  816fc0:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  816fc4:	e0fff817 	ldw	r3,-32(fp)
  816fc8:	e13ffa17 	ldw	r4,-24(fp)
  816fcc:	1907c83a 	sub	r3,r3,r4
  816fd0:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  816fd4:	e0fff717 	ldw	r3,-36(fp)
  816fd8:	e13ff917 	ldw	r4,-28(fp)
  816fdc:	1905c83a 	sub	r2,r3,r4
  816fe0:	e0bff415 	stw	r2,-48(fp)
  816fe4:	e0fff417 	ldw	r3,-48(fp)
  816fe8:	1804403a 	cmpge	r2,r3,zero
  816fec:	1000031e 	bne	r2,zero,816ffc <alt_up_pixel_buffer_dma_draw_line+0x220>
  816ff0:	e13ff417 	ldw	r4,-48(fp)
  816ff4:	0109c83a 	sub	r4,zero,r4
  816ff8:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  816ffc:	e0fff517 	ldw	r3,-44(fp)
  817000:	1804d7fa 	srli	r2,r3,31
  817004:	e13ff517 	ldw	r4,-44(fp)
  817008:	1105883a 	add	r2,r2,r4
  81700c:	1005d07a 	srai	r2,r2,1
  817010:	0085c83a 	sub	r2,zero,r2
  817014:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  817018:	e0bff917 	ldw	r2,-28(fp)
  81701c:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  817020:	e0fff917 	ldw	r3,-28(fp)
  817024:	e13ff717 	ldw	r4,-36(fp)
  817028:	1900030e 	bge	r3,r4,817038 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  81702c:	00800044 	movi	r2,1
  817030:	e0bff215 	stw	r2,-56(fp)
  817034:	00000206 	br	817040 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  817038:	00ffffc4 	movi	r3,-1
  81703c:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  817040:	e13ff603 	ldbu	r4,-40(fp)
  817044:	20803fcc 	andi	r2,r4,255
  817048:	1080201c 	xori	r2,r2,128
  81704c:	10bfe004 	addi	r2,r2,-128
  817050:	10800058 	cmpnei	r2,r2,1
  817054:	1000221e 	bne	r2,zero,8170e0 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  817058:	e0bffa17 	ldw	r2,-24(fp)
  81705c:	e0bff115 	stw	r2,-60(fp)
  817060:	00001b06 	br	8170d0 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  817064:	e0ffee17 	ldw	r3,-72(fp)
  817068:	d8c00015 	stw	r3,0(sp)
  81706c:	e13fef17 	ldw	r4,-68(fp)
  817070:	d9000115 	stw	r4,4(sp)
  817074:	e13fed17 	ldw	r4,-76(fp)
  817078:	e17fec17 	ldw	r5,-80(fp)
  81707c:	e1bff017 	ldw	r6,-64(fp)
  817080:	e1fff117 	ldw	r7,-60(fp)
  817084:	0816d0c0 	call	816d0c <helper_plot_pixel>
			error = error + deltay;
  817088:	e0bff317 	ldw	r2,-52(fp)
  81708c:	e0fff417 	ldw	r3,-48(fp)
  817090:	10c5883a 	add	r2,r2,r3
  817094:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  817098:	e13ff317 	ldw	r4,-52(fp)
  81709c:	20800050 	cmplti	r2,r4,1
  8170a0:	1000081e 	bne	r2,zero,8170c4 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  8170a4:	e0bff017 	ldw	r2,-64(fp)
  8170a8:	e0fff217 	ldw	r3,-56(fp)
  8170ac:	10c5883a 	add	r2,r2,r3
  8170b0:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  8170b4:	e13ff317 	ldw	r4,-52(fp)
  8170b8:	e0bff517 	ldw	r2,-44(fp)
  8170bc:	2089c83a 	sub	r4,r4,r2
  8170c0:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  8170c4:	e0fff117 	ldw	r3,-60(fp)
  8170c8:	18c00044 	addi	r3,r3,1
  8170cc:	e0fff115 	stw	r3,-60(fp)
  8170d0:	e13ff817 	ldw	r4,-32(fp)
  8170d4:	e0bff117 	ldw	r2,-60(fp)
  8170d8:	20bfe20e 	bge	r4,r2,817064 <alt_up_pixel_buffer_dma_draw_line+0x288>
  8170dc:	00002106 	br	817164 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  8170e0:	e0fffa17 	ldw	r3,-24(fp)
  8170e4:	e0fff115 	stw	r3,-60(fp)
  8170e8:	00001b06 	br	817158 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  8170ec:	e13fee17 	ldw	r4,-72(fp)
  8170f0:	d9000015 	stw	r4,0(sp)
  8170f4:	e0bfef17 	ldw	r2,-68(fp)
  8170f8:	d8800115 	stw	r2,4(sp)
  8170fc:	e13fed17 	ldw	r4,-76(fp)
  817100:	e17fec17 	ldw	r5,-80(fp)
  817104:	e1bff117 	ldw	r6,-60(fp)
  817108:	e1fff017 	ldw	r7,-64(fp)
  81710c:	0816d0c0 	call	816d0c <helper_plot_pixel>
			error = error + deltay;
  817110:	e0fff317 	ldw	r3,-52(fp)
  817114:	e13ff417 	ldw	r4,-48(fp)
  817118:	1907883a 	add	r3,r3,r4
  81711c:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  817120:	e0fff317 	ldw	r3,-52(fp)
  817124:	18800050 	cmplti	r2,r3,1
  817128:	1000081e 	bne	r2,zero,81714c <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  81712c:	e13ff017 	ldw	r4,-64(fp)
  817130:	e0bff217 	ldw	r2,-56(fp)
  817134:	2089883a 	add	r4,r4,r2
  817138:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  81713c:	e0fff317 	ldw	r3,-52(fp)
  817140:	e13ff517 	ldw	r4,-44(fp)
  817144:	1907c83a 	sub	r3,r3,r4
  817148:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  81714c:	e0bff117 	ldw	r2,-60(fp)
  817150:	10800044 	addi	r2,r2,1
  817154:	e0bff115 	stw	r2,-60(fp)
  817158:	e0fff817 	ldw	r3,-32(fp)
  81715c:	e13ff117 	ldw	r4,-60(fp)
  817160:	193fe20e 	bge	r3,r4,8170ec <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  817164:	e037883a 	mov	sp,fp
  817168:	dfc00117 	ldw	ra,4(sp)
  81716c:	df000017 	ldw	fp,0(sp)
  817170:	dec00204 	addi	sp,sp,8
  817174:	f800283a 	ret

00817178 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset);

bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
  817178:	defffa04 	addi	sp,sp,-24
  81717c:	dfc00515 	stw	ra,20(sp)
  817180:	df000415 	stw	fp,16(sp)
  817184:	df000404 	addi	fp,sp,16
  817188:	e13ffe15 	stw	r4,-8(fp)
  81718c:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
  817190:	e03ffd15 	stw	zero,-12(fp)

	if (alt_up_sd_card_is_Present()) {
  817194:	0819fa40 	call	819fa4 <alt_up_sd_card_is_Present>
  817198:	1005003a 	cmpeq	r2,r2,zero
  81719c:	1000221e 	bne	r2,zero,817228 <Write_Sector_Data+0xb0>
		short int reg_state = 0xff;
  8171a0:	00803fc4 	movi	r2,255
  8171a4:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  8171a8:	d0a75317 	ldw	r2,-25268(gp)
  8171ac:	1009883a 	mov	r4,r2
  8171b0:	e0fffe17 	ldw	r3,-8(fp)
  8171b4:	e0bfff17 	ldw	r2,-4(fp)
  8171b8:	1885883a 	add	r2,r3,r2
  8171bc:	1006927a 	slli	r3,r2,9
  8171c0:	2005883a 	mov	r2,r4
  8171c4:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  8171c8:	d0a75217 	ldw	r2,-25272(gp)
  8171cc:	1007883a 	mov	r3,r2
  8171d0:	00800604 	movi	r2,24
  8171d4:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  8171d8:	d0a74f17 	ldw	r2,-25284(gp)
  8171dc:	1080002b 	ldhuio	r2,0(r2)
  8171e0:	e0bffc0d 	sth	r2,-16(fp)
		} while ((reg_state & 0x04) != 0);
  8171e4:	e0bffc0b 	ldhu	r2,-16(fp)
  8171e8:	10bfffcc 	andi	r2,r2,65535
  8171ec:	1080010c 	andi	r2,r2,4
  8171f0:	1004c03a 	cmpne	r2,r2,zero
  8171f4:	103ff81e 	bne	r2,zero,8171d8 <Write_Sector_Data+0x60>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
  8171f8:	e0bffc0b 	ldhu	r2,-16(fp)
  8171fc:	10bfffcc 	andi	r2,r2,65535
  817200:	1080040c 	andi	r2,r2,16
  817204:	1004c03a 	cmpne	r2,r2,zero
  817208:	1000071e 	bne	r2,zero,817228 <Write_Sector_Data+0xb0>
			result = true;
  81720c:	00800044 	movi	r2,1
  817210:	e0bffd15 	stw	r2,-12(fp)
			current_sector_modified = false;
  817214:	d0275815 	stw	zero,-25248(gp)
			current_sector_index = sector_index + partition_offset;
  817218:	e0fffe17 	ldw	r3,-8(fp)
  81721c:	e0bfff17 	ldw	r2,-4(fp)
  817220:	1885883a 	add	r2,r3,r2
  817224:	d0a75915 	stw	r2,-25244(gp)
		}
	}
	return result;
  817228:	e0bffd17 	ldw	r2,-12(fp)
}
  81722c:	e037883a 	mov	sp,fp
  817230:	dfc00117 	ldw	ra,4(sp)
  817234:	df000017 	ldw	fp,0(sp)
  817238:	dec00204 	addi	sp,sp,8
  81723c:	f800283a 	ret

00817240 <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
  817240:	defffd04 	addi	sp,sp,-12
  817244:	dfc00215 	stw	ra,8(sp)
  817248:	df000115 	stw	fp,4(sp)
  81724c:	df000104 	addi	fp,sp,4
	bool result = true;
  817250:	00800044 	movi	r2,1
  817254:	e0bfff15 	stw	r2,-4(fp)
	if (current_sector_modified) {
  817258:	d0a75817 	ldw	r2,-25248(gp)
  81725c:	1005003a 	cmpeq	r2,r2,zero
  817260:	1000051e 	bne	r2,zero,817278 <Save_Modified_Sector+0x38>
		result = Write_Sector_Data(current_sector_index, 0);
  817264:	d0a75917 	ldw	r2,-25244(gp)
  817268:	1009883a 	mov	r4,r2
  81726c:	000b883a 	mov	r5,zero
  817270:	08171780 	call	817178 <Write_Sector_Data>
  817274:	e0bfff15 	stw	r2,-4(fp)
	}
	return result;
  817278:	e0bfff17 	ldw	r2,-4(fp)
}
  81727c:	e037883a 	mov	sp,fp
  817280:	dfc00117 	ldw	ra,4(sp)
  817284:	df000017 	ldw	fp,0(sp)
  817288:	dec00204 	addi	sp,sp,8
  81728c:	f800283a 	ret

00817290 <Read_Sector_Data>:

bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  817290:	defff904 	addi	sp,sp,-28
  817294:	dfc00615 	stw	ra,24(sp)
  817298:	df000515 	stw	fp,20(sp)
  81729c:	df000504 	addi	fp,sp,20
  8172a0:	e13ffd15 	stw	r4,-12(fp)
  8172a4:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
  8172a8:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
  8172ac:	0819fa40 	call	819fa4 <alt_up_sd_card_is_Present>
  8172b0:	1005003a 	cmpeq	r2,r2,zero
  8172b4:	10002d1e 	bne	r2,zero,81736c <Read_Sector_Data+0xdc>
		short int reg_state = 0xff;
  8172b8:	00803fc4 	movi	r2,255
  8172bc:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
  8172c0:	d0a75817 	ldw	r2,-25248(gp)
  8172c4:	1005003a 	cmpeq	r2,r2,zero
  8172c8:	1000081e 	bne	r2,zero,8172ec <Read_Sector_Data+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
  8172cc:	d0a75917 	ldw	r2,-25244(gp)
  8172d0:	1009883a 	mov	r4,r2
  8172d4:	000b883a 	mov	r5,zero
  8172d8:	08171780 	call	817178 <Write_Sector_Data>
  8172dc:	1004c03a 	cmpne	r2,r2,zero
  8172e0:	1000021e 	bne	r2,zero,8172ec <Read_Sector_Data+0x5c>
				return false;
  8172e4:	e03fff15 	stw	zero,-4(fp)
  8172e8:	00002206 	br	817374 <Read_Sector_Data+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  8172ec:	d0a75317 	ldw	r2,-25268(gp)
  8172f0:	1009883a 	mov	r4,r2
  8172f4:	e0fffd17 	ldw	r3,-12(fp)
  8172f8:	e0bffe17 	ldw	r2,-8(fp)
  8172fc:	1885883a 	add	r2,r3,r2
  817300:	1006927a 	slli	r3,r2,9
  817304:	2005883a 	mov	r2,r4
  817308:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  81730c:	d0a75217 	ldw	r2,-25272(gp)
  817310:	1007883a 	mov	r3,r2
  817314:	00800444 	movi	r2,17
  817318:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  81731c:	d0a74f17 	ldw	r2,-25284(gp)
  817320:	1080002b 	ldhuio	r2,0(r2)
  817324:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
  817328:	e0bffb0b 	ldhu	r2,-20(fp)
  81732c:	10bfffcc 	andi	r2,r2,65535
  817330:	1080010c 	andi	r2,r2,4
  817334:	1004c03a 	cmpne	r2,r2,zero
  817338:	103ff81e 	bne	r2,zero,81731c <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
  81733c:	e0bffb0b 	ldhu	r2,-20(fp)
  817340:	10bfffcc 	andi	r2,r2,65535
  817344:	1080040c 	andi	r2,r2,16
  817348:	1004c03a 	cmpne	r2,r2,zero
  81734c:	1000071e 	bne	r2,zero,81736c <Read_Sector_Data+0xdc>
			result = true;
  817350:	00800044 	movi	r2,1
  817354:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
  817358:	d0275815 	stw	zero,-25248(gp)
			current_sector_index = sector_index + partition_offset;
  81735c:	e0fffd17 	ldw	r3,-12(fp)
  817360:	e0bffe17 	ldw	r2,-8(fp)
  817364:	1885883a 	add	r2,r3,r2
  817368:	d0a75915 	stw	r2,-25244(gp)
		}
	}
	return result;
  81736c:	e0bffc17 	ldw	r2,-16(fp)
  817370:	e0bfff15 	stw	r2,-4(fp)
  817374:	e0bfff17 	ldw	r2,-4(fp)
}
  817378:	e037883a 	mov	sp,fp
  81737c:	dfc00117 	ldw	ra,4(sp)
  817380:	df000017 	ldw	fp,0(sp)
  817384:	dec00204 	addi	sp,sp,8
  817388:	f800283a 	ret

0081738c <get_cluster_flag>:

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  81738c:	defffa04 	addi	sp,sp,-24
  817390:	dfc00515 	stw	ra,20(sp)
  817394:	df000415 	stw	fp,16(sp)
  817398:	df000404 	addi	fp,sp,16
  81739c:	e13ffd15 	stw	r4,-12(fp)
  8173a0:	e17ffe15 	stw	r5,-8(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  8173a4:	e0bffd17 	ldw	r2,-12(fp)
  8173a8:	1006d23a 	srli	r3,r2,8
  8173ac:	d0a75517 	ldw	r2,-25260(gp)
  8173b0:	1885883a 	add	r2,r3,r2
  8173b4:	e0bffc15 	stw	r2,-16(fp)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  8173b8:	008020f4 	movhi	r2,131
  8173bc:	10ab4804 	addi	r2,r2,-21216
  8173c0:	10c01117 	ldw	r3,68(r2)
  8173c4:	e0bffc17 	ldw	r2,-16(fp)
  8173c8:	10c5883a 	add	r2,r2,r3
  8173cc:	e0bffc15 	stw	r2,-16(fp)

	if (sector_index != current_sector_index) {
  8173d0:	d0e75917 	ldw	r3,-25244(gp)
  8173d4:	e0bffc17 	ldw	r2,-16(fp)
  8173d8:	10c00726 	beq	r2,r3,8173f8 <get_cluster_flag+0x6c>
		if (Read_Sector_Data(sector_index, 0) == false) {
  8173dc:	e13ffc17 	ldw	r4,-16(fp)
  8173e0:	000b883a 	mov	r5,zero
  8173e4:	08172900 	call	817290 <Read_Sector_Data>
  8173e8:	1004c03a 	cmpne	r2,r2,zero
  8173ec:	1000021e 	bne	r2,zero,8173f8 <get_cluster_flag+0x6c>
			return false;
  8173f0:	e03fff15 	stw	zero,-4(fp)
  8173f4:	00000d06 	br	81742c <get_cluster_flag+0xa0>
		}
	}
	*flag
  8173f8:	d0a75717 	ldw	r2,-25252(gp)
  8173fc:	10800a17 	ldw	r2,40(r2)
  817400:	1007883a 	mov	r3,r2
  817404:	e0bffd17 	ldw	r2,-12(fp)
  817408:	10803fcc 	andi	r2,r2,255
  81740c:	1085883a 	add	r2,r2,r2
  817410:	1885883a 	add	r2,r3,r2
  817414:	1080002b 	ldhuio	r2,0(r2)
  817418:	1007883a 	mov	r3,r2
  81741c:	e0bffe17 	ldw	r2,-8(fp)
  817420:	10c0000d 	sth	r3,0(r2)
			= (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
	return true;
  817424:	00800044 	movi	r2,1
  817428:	e0bfff15 	stw	r2,-4(fp)
  81742c:	e0bfff17 	ldw	r2,-4(fp)
}
  817430:	e037883a 	mov	sp,fp
  817434:	dfc00117 	ldw	ra,4(sp)
  817438:	df000017 	ldw	fp,0(sp)
  81743c:	dec00204 	addi	sp,sp,8
  817440:	f800283a 	ret

00817444 <mark_cluster>:

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
  817444:	defff904 	addi	sp,sp,-28
  817448:	dfc00615 	stw	ra,24(sp)
  81744c:	df000515 	stw	fp,20(sp)
  817450:	df000504 	addi	fp,sp,20
  817454:	e13ffc15 	stw	r4,-16(fp)
  817458:	e1bffe15 	stw	r6,-8(fp)
  81745c:	e17ffd0d 	sth	r5,-12(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  817460:	e0bffc17 	ldw	r2,-16(fp)
  817464:	1006d23a 	srli	r3,r2,8
  817468:	d0a75517 	ldw	r2,-25260(gp)
  81746c:	1885883a 	add	r2,r3,r2
  817470:	e0bffb15 	stw	r2,-20(fp)

	if (first_fat) {
  817474:	e0bffe17 	ldw	r2,-8(fp)
  817478:	1005003a 	cmpeq	r2,r2,zero
  81747c:	1000071e 	bne	r2,zero,81749c <mark_cluster+0x58>
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  817480:	008020f4 	movhi	r2,131
  817484:	10ab4804 	addi	r2,r2,-21216
  817488:	10c01117 	ldw	r3,68(r2)
  81748c:	e0bffb17 	ldw	r2,-20(fp)
  817490:	10c5883a 	add	r2,r2,r3
  817494:	e0bffb15 	stw	r2,-20(fp)
  817498:	00000606 	br	8174b4 <mark_cluster+0x70>
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
  81749c:	008020f4 	movhi	r2,131
  8174a0:	10ab4804 	addi	r2,r2,-21216
  8174a4:	10c01217 	ldw	r3,72(r2)
  8174a8:	e0bffb17 	ldw	r2,-20(fp)
  8174ac:	10c5883a 	add	r2,r2,r3
  8174b0:	e0bffb15 	stw	r2,-20(fp)
	}

	if (sector_index != current_sector_index) {
  8174b4:	d0e75917 	ldw	r3,-25244(gp)
  8174b8:	e0bffb17 	ldw	r2,-20(fp)
  8174bc:	10c00726 	beq	r2,r3,8174dc <mark_cluster+0x98>
		if (Read_Sector_Data(sector_index, 0) == false) {
  8174c0:	e13ffb17 	ldw	r4,-20(fp)
  8174c4:	000b883a 	mov	r5,zero
  8174c8:	08172900 	call	817290 <Read_Sector_Data>
  8174cc:	1004c03a 	cmpne	r2,r2,zero
  8174d0:	1000021e 	bne	r2,zero,8174dc <mark_cluster+0x98>
			return false;
  8174d4:	e03fff15 	stw	zero,-4(fp)
  8174d8:	00000d06 	br	817510 <mark_cluster+0xcc>
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  8174dc:	d0a75717 	ldw	r2,-25252(gp)
  8174e0:	10800a17 	ldw	r2,40(r2)
  8174e4:	1007883a 	mov	r3,r2
  8174e8:	e0bffc17 	ldw	r2,-16(fp)
  8174ec:	10803fcc 	andi	r2,r2,255
  8174f0:	1085883a 	add	r2,r2,r2
  8174f4:	1885883a 	add	r2,r3,r2
  8174f8:	e0fffd0f 	ldh	r3,-12(fp)
  8174fc:	10c0002d 	sthio	r3,0(r2)
	current_sector_modified = true;
  817500:	00800044 	movi	r2,1
  817504:	d0a75815 	stw	r2,-25248(gp)
	return true;
  817508:	00800044 	movi	r2,1
  81750c:	e0bfff15 	stw	r2,-4(fp)
  817510:	e0bfff17 	ldw	r2,-4(fp)
}
  817514:	e037883a 	mov	sp,fp
  817518:	dfc00117 	ldw	ra,4(sp)
  81751c:	df000017 	ldw	fp,0(sp)
  817520:	dec00204 	addi	sp,sp,8
  817524:	f800283a 	ret

00817528 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
  817528:	defff704 	addi	sp,sp,-36
  81752c:	dfc00815 	stw	ra,32(sp)
  817530:	df000715 	stw	fp,28(sp)
  817534:	df000704 	addi	fp,sp,28
	bool result = false;
  817538:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data_Attempt_CRC(0, 0)) {
  81753c:	0009883a 	mov	r4,zero
  817540:	000b883a 	mov	r5,zero
  817544:	081b6a80 	call	81b6a8 <Read_Sector_Data_Attempt_CRC>
  817548:	1005003a 	cmpeq	r2,r2,zero
  81754c:	10005c1e 	bne	r2,zero,8176c0 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
  817550:	d0a75717 	ldw	r2,-25252(gp)
  817554:	10800a17 	ldw	r2,40(r2)
  817558:	10807f84 	addi	r2,r2,510
  81755c:	1080002b 	ldhuio	r2,0(r2)
  817560:	10bfffcc 	andi	r2,r2,65535
  817564:	10a0001c 	xori	r2,r2,32768
  817568:	10a00004 	addi	r2,r2,-32768
  81756c:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
  817570:	e0bffd17 	ldw	r2,-12(fp)
  817574:	10ffffcc 	andi	r3,r2,65535
  817578:	00aa9554 	movui	r2,43605
  81757c:	1880501e 	bne	r3,r2,8176c0 <Check_for_Master_Boot_Record+0x198>
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
  817580:	e03ffe15 	stw	zero,-8(fp)
  817584:	00004b06 	br	8176b4 <Check_for_Master_Boot_Record+0x18c>
				int partition_data_offset = (index * 16) + 0x01be;
  817588:	e0bffe17 	ldw	r2,-8(fp)
  81758c:	1004913a 	slli	r2,r2,4
  817590:	10806f84 	addi	r2,r2,446
  817594:	e0bffa15 	stw	r2,-24(fp)
				char type;

				// Read Partition type
				type
  817598:	d0a75717 	ldw	r2,-25252(gp)
  81759c:	10800a17 	ldw	r2,40(r2)
  8175a0:	1007883a 	mov	r3,r2
  8175a4:	e0bffa17 	ldw	r2,-24(fp)
  8175a8:	1885883a 	add	r2,r3,r2
  8175ac:	10800104 	addi	r2,r2,4
  8175b0:	10800023 	ldbuio	r2,0(r2)
  8175b4:	e0bff905 	stb	r2,-28(fp)
						= (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14)) {
  8175b8:	e0bff907 	ldb	r2,-28(fp)
  8175bc:	10800060 	cmpeqi	r2,r2,1
  8175c0:	1000091e 	bne	r2,zero,8175e8 <Check_for_Master_Boot_Record+0xc0>
  8175c4:	e0bff907 	ldb	r2,-28(fp)
  8175c8:	10800120 	cmpeqi	r2,r2,4
  8175cc:	1000061e 	bne	r2,zero,8175e8 <Check_for_Master_Boot_Record+0xc0>
  8175d0:	e0bff907 	ldb	r2,-28(fp)
  8175d4:	108001a0 	cmpeqi	r2,r2,6
  8175d8:	1000031e 	bne	r2,zero,8175e8 <Check_for_Master_Boot_Record+0xc0>
  8175dc:	e0bff907 	ldb	r2,-28(fp)
  8175e0:	10800398 	cmpnei	r2,r2,14
  8175e4:	1000301e 	bne	r2,zero,8176a8 <Check_for_Master_Boot_Record+0x180>
					// Get partition offset and size.
					offset
  8175e8:	d0a75717 	ldw	r2,-25252(gp)
  8175ec:	10800a17 	ldw	r2,40(r2)
  8175f0:	1007883a 	mov	r3,r2
  8175f4:	e0bffa17 	ldw	r2,-24(fp)
  8175f8:	1885883a 	add	r2,r3,r2
  8175fc:	10800284 	addi	r2,r2,10
  817600:	1080002b 	ldhuio	r2,0(r2)
  817604:	10bfffcc 	andi	r2,r2,65535
  817608:	1008943a 	slli	r4,r2,16
  81760c:	d0a75717 	ldw	r2,-25252(gp)
  817610:	10800a17 	ldw	r2,40(r2)
  817614:	1007883a 	mov	r3,r2
  817618:	e0bffa17 	ldw	r2,-24(fp)
  81761c:	1885883a 	add	r2,r3,r2
  817620:	10800204 	addi	r2,r2,8
  817624:	1080002b 	ldhuio	r2,0(r2)
  817628:	10bfffcc 	andi	r2,r2,65535
  81762c:	2084b03a 	or	r2,r4,r2
  817630:	e0bffc15 	stw	r2,-16(fp)
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
					partition_size
  817634:	d0a75717 	ldw	r2,-25252(gp)
  817638:	10800a17 	ldw	r2,40(r2)
  81763c:	1007883a 	mov	r3,r2
  817640:	e0bffa17 	ldw	r2,-24(fp)
  817644:	1885883a 	add	r2,r3,r2
  817648:	10800384 	addi	r2,r2,14
  81764c:	1080002b 	ldhuio	r2,0(r2)
  817650:	10bfffcc 	andi	r2,r2,65535
  817654:	1008943a 	slli	r4,r2,16
  817658:	d0a75717 	ldw	r2,-25252(gp)
  81765c:	10800a17 	ldw	r2,40(r2)
  817660:	1007883a 	mov	r3,r2
  817664:	e0bffa17 	ldw	r2,-24(fp)
  817668:	1885883a 	add	r2,r3,r2
  81766c:	10800304 	addi	r2,r2,12
  817670:	1080002b 	ldhuio	r2,0(r2)
  817674:	10bfffcc 	andi	r2,r2,65535
  817678:	2084b03a 	or	r2,r4,r2
  81767c:	e0bffb15 	stw	r2,-20(fp)
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
  817680:	e0bffb17 	ldw	r2,-20(fp)
  817684:	10800050 	cmplti	r2,r2,1
  817688:	1000071e 	bne	r2,zero,8176a8 <Check_for_Master_Boot_Record+0x180>
						result = true;
  81768c:	00800044 	movi	r2,1
  817690:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
  817694:	e0bffb17 	ldw	r2,-20(fp)
  817698:	d0a75615 	stw	r2,-25256(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
  81769c:	e0bffc17 	ldw	r2,-16(fp)
  8176a0:	d0a75515 	stw	r2,-25260(gp)
						break;
  8176a4:	00000606 	br	8176c0 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
  8176a8:	e0bffe17 	ldw	r2,-8(fp)
  8176ac:	10800044 	addi	r2,r2,1
  8176b0:	e0bffe15 	stw	r2,-8(fp)
  8176b4:	e0bffe17 	ldw	r2,-8(fp)
  8176b8:	10800110 	cmplti	r2,r2,4
  8176bc:	103fb21e 	bne	r2,zero,817588 <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
  8176c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8176c4:	e037883a 	mov	sp,fp
  8176c8:	dfc00117 	ldw	ra,4(sp)
  8176cc:	df000017 	ldw	fp,0(sp)
  8176d0:	dec00204 	addi	sp,sp,8
  8176d4:	f800283a 	ret

008176d8 <Read_File_Record_At_Offset>:

bool Read_File_Record_At_Offset(int offset, t_file_record *record,
		unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
  8176d8:	defff804 	addi	sp,sp,-32
  8176dc:	dfc00715 	stw	ra,28(sp)
  8176e0:	df000615 	stw	fp,24(sp)
  8176e4:	df000604 	addi	fp,sp,24
  8176e8:	e13ffc15 	stw	r4,-16(fp)
  8176ec:	e17ffd15 	stw	r5,-12(fp)
  8176f0:	e1bffe15 	stw	r6,-8(fp)
  8176f4:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
  8176f8:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  8176fc:	e0bffc17 	ldw	r2,-16(fp)
  817700:	108007cc 	andi	r2,r2,31
  817704:	1004c03a 	cmpne	r2,r2,zero
  817708:	10008e1e 	bne	r2,zero,817944 <Read_File_Record_At_Offset+0x26c>
  81770c:	0819fa40 	call	819fa4 <alt_up_sd_card_is_Present>
  817710:	1005003a 	cmpeq	r2,r2,zero
  817714:	10008b1e 	bne	r2,zero,817944 <Read_File_Record_At_Offset+0x26c>
  817718:	d0a74e17 	ldw	r2,-25288(gp)
  81771c:	1005003a 	cmpeq	r2,r2,zero
  817720:	1000881e 	bne	r2,zero,817944 <Read_File_Record_At_Offset+0x26c>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
  817724:	e03ffa15 	stw	zero,-24(fp)
  817728:	00001006 	br	81776c <Read_File_Record_At_Offset+0x94>
			record->name[counter]
  81772c:	e17ffa17 	ldw	r5,-24(fp)
  817730:	d0a75717 	ldw	r2,-25252(gp)
  817734:	10800a17 	ldw	r2,40(r2)
  817738:	1009883a 	mov	r4,r2
  81773c:	e0fffc17 	ldw	r3,-16(fp)
  817740:	e0bffa17 	ldw	r2,-24(fp)
  817744:	1885883a 	add	r2,r3,r2
  817748:	2085883a 	add	r2,r4,r2
  81774c:	10800023 	ldbuio	r2,0(r2)
  817750:	1007883a 	mov	r3,r2
  817754:	e0bffd17 	ldw	r2,-12(fp)
  817758:	1145883a 	add	r2,r2,r5
  81775c:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
  817760:	e0bffa17 	ldw	r2,-24(fp)
  817764:	10800044 	addi	r2,r2,1
  817768:	e0bffa15 	stw	r2,-24(fp)
  81776c:	e0bffa17 	ldw	r2,-24(fp)
  817770:	10800210 	cmplti	r2,r2,8
  817774:	103fed1e 	bne	r2,zero,81772c <Read_File_Record_At_Offset+0x54>
			record->name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
  817778:	e03ffa15 	stw	zero,-24(fp)
  81777c:	00001206 	br	8177c8 <Read_File_Record_At_Offset+0xf0>
			record->extension[counter]
  817780:	e17ffa17 	ldw	r5,-24(fp)
  817784:	d0a75717 	ldw	r2,-25252(gp)
  817788:	10800a17 	ldw	r2,40(r2)
  81778c:	1009883a 	mov	r4,r2
  817790:	e0fffc17 	ldw	r3,-16(fp)
  817794:	e0bffa17 	ldw	r2,-24(fp)
  817798:	1885883a 	add	r2,r3,r2
  81779c:	2085883a 	add	r2,r4,r2
  8177a0:	10800204 	addi	r2,r2,8
  8177a4:	10800023 	ldbuio	r2,0(r2)
  8177a8:	1007883a 	mov	r3,r2
  8177ac:	e0bffd17 	ldw	r2,-12(fp)
  8177b0:	2885883a 	add	r2,r5,r2
  8177b4:	10800204 	addi	r2,r2,8
  8177b8:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++) {
			record->name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
  8177bc:	e0bffa17 	ldw	r2,-24(fp)
  8177c0:	10800044 	addi	r2,r2,1
  8177c4:	e0bffa15 	stw	r2,-24(fp)
  8177c8:	e0bffa17 	ldw	r2,-24(fp)
  8177cc:	108000d0 	cmplti	r2,r2,3
  8177d0:	103feb1e 	bne	r2,zero,817780 <Read_File_Record_At_Offset+0xa8>
			record->extension[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}
		record->attributes
  8177d4:	d0a75717 	ldw	r2,-25252(gp)
  8177d8:	10800a17 	ldw	r2,40(r2)
  8177dc:	1007883a 	mov	r3,r2
  8177e0:	e0bffc17 	ldw	r2,-16(fp)
  8177e4:	1885883a 	add	r2,r3,r2
  8177e8:	108002c4 	addi	r2,r2,11
  8177ec:	10800023 	ldbuio	r2,0(r2)
  8177f0:	1007883a 	mov	r3,r2
  8177f4:	e0bffd17 	ldw	r2,-12(fp)
  8177f8:	10c002c5 	stb	r3,11(r2)
				= (char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time
  8177fc:	d0a75717 	ldw	r2,-25252(gp)
  817800:	10800a17 	ldw	r2,40(r2)
  817804:	1007883a 	mov	r3,r2
  817808:	e0bffc17 	ldw	r2,-16(fp)
  81780c:	1885883a 	add	r2,r3,r2
  817810:	10800384 	addi	r2,r2,14
  817814:	1080002b 	ldhuio	r2,0(r2)
  817818:	1007883a 	mov	r3,r2
  81781c:	e0bffd17 	ldw	r2,-12(fp)
  817820:	10c0030d 	sth	r3,12(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date
  817824:	d0a75717 	ldw	r2,-25252(gp)
  817828:	10800a17 	ldw	r2,40(r2)
  81782c:	1007883a 	mov	r3,r2
  817830:	e0bffc17 	ldw	r2,-16(fp)
  817834:	1885883a 	add	r2,r3,r2
  817838:	10800404 	addi	r2,r2,16
  81783c:	1080002b 	ldhuio	r2,0(r2)
  817840:	1007883a 	mov	r3,r2
  817844:	e0bffd17 	ldw	r2,-12(fp)
  817848:	10c0038d 	sth	r3,14(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date
  81784c:	d0a75717 	ldw	r2,-25252(gp)
  817850:	10800a17 	ldw	r2,40(r2)
  817854:	1007883a 	mov	r3,r2
  817858:	e0bffc17 	ldw	r2,-16(fp)
  81785c:	1885883a 	add	r2,r3,r2
  817860:	10800484 	addi	r2,r2,18
  817864:	1080002b 	ldhuio	r2,0(r2)
  817868:	1007883a 	mov	r3,r2
  81786c:	e0bffd17 	ldw	r2,-12(fp)
  817870:	10c0040d 	sth	r3,16(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time
  817874:	d0a75717 	ldw	r2,-25252(gp)
  817878:	10800a17 	ldw	r2,40(r2)
  81787c:	1007883a 	mov	r3,r2
  817880:	e0bffc17 	ldw	r2,-16(fp)
  817884:	1885883a 	add	r2,r3,r2
  817888:	10800584 	addi	r2,r2,22
  81788c:	1080002b 	ldhuio	r2,0(r2)
  817890:	1007883a 	mov	r3,r2
  817894:	e0bffd17 	ldw	r2,-12(fp)
  817898:	10c0048d 	sth	r3,18(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date
  81789c:	d0a75717 	ldw	r2,-25252(gp)
  8178a0:	10800a17 	ldw	r2,40(r2)
  8178a4:	1007883a 	mov	r3,r2
  8178a8:	e0bffc17 	ldw	r2,-16(fp)
  8178ac:	1885883a 	add	r2,r3,r2
  8178b0:	10800604 	addi	r2,r2,24
  8178b4:	1080002b 	ldhuio	r2,0(r2)
  8178b8:	1007883a 	mov	r3,r2
  8178bc:	e0bffd17 	ldw	r2,-12(fp)
  8178c0:	10c0050d 	sth	r3,20(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index
  8178c4:	d0a75717 	ldw	r2,-25252(gp)
  8178c8:	10800a17 	ldw	r2,40(r2)
  8178cc:	1007883a 	mov	r3,r2
  8178d0:	e0bffc17 	ldw	r2,-16(fp)
  8178d4:	1885883a 	add	r2,r3,r2
  8178d8:	10800684 	addi	r2,r2,26
  8178dc:	1080002b 	ldhuio	r2,0(r2)
  8178e0:	1007883a 	mov	r3,r2
  8178e4:	e0bffd17 	ldw	r2,-12(fp)
  8178e8:	10c0058d 	sth	r3,22(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes
  8178ec:	d0a75717 	ldw	r2,-25252(gp)
  8178f0:	10800a17 	ldw	r2,40(r2)
  8178f4:	1007883a 	mov	r3,r2
  8178f8:	e0bffc17 	ldw	r2,-16(fp)
  8178fc:	1885883a 	add	r2,r3,r2
  817900:	10800704 	addi	r2,r2,28
  817904:	10800037 	ldwio	r2,0(r2)
  817908:	1007883a 	mov	r3,r2
  81790c:	e0bffd17 	ldw	r2,-12(fp)
  817910:	10c00615 	stw	r3,24(r2)
				= (unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
  817914:	e0fffd17 	ldw	r3,-12(fp)
  817918:	e0bffe17 	ldw	r2,-8(fp)
  81791c:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
  817920:	e0fffd17 	ldw	r3,-12(fp)
  817924:	e0bfff17 	ldw	r2,-4(fp)
  817928:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
  81792c:	e0bffc17 	ldw	r2,-16(fp)
  817930:	1007883a 	mov	r3,r2
  817934:	e0bffd17 	ldw	r2,-12(fp)
  817938:	10c00c0d 	sth	r3,48(r2)
		result = true;
  81793c:	00800044 	movi	r2,1
  817940:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
  817944:	e0bffb17 	ldw	r2,-20(fp)
}
  817948:	e037883a 	mov	sp,fp
  81794c:	dfc00117 	ldw	ra,4(sp)
  817950:	df000017 	ldw	fp,0(sp)
  817954:	dec00204 	addi	sp,sp,8
  817958:	f800283a 	ret

0081795c <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
  81795c:	defff904 	addi	sp,sp,-28
  817960:	dfc00615 	stw	ra,24(sp)
  817964:	df000515 	stw	fp,20(sp)
  817968:	df000504 	addi	fp,sp,20
  81796c:	e13ffe15 	stw	r4,-8(fp)
  817970:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
  817974:	e03ffd15 	stw	zero,-12(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  817978:	e0bffe17 	ldw	r2,-8(fp)
  81797c:	108007cc 	andi	r2,r2,31
  817980:	1004c03a 	cmpne	r2,r2,zero
  817984:	10009d1e 	bne	r2,zero,817bfc <Write_File_Record_At_Offset+0x2a0>
  817988:	0819fa40 	call	819fa4 <alt_up_sd_card_is_Present>
  81798c:	1005003a 	cmpeq	r2,r2,zero
  817990:	10009a1e 	bne	r2,zero,817bfc <Write_File_Record_At_Offset+0x2a0>
  817994:	d0a74e17 	ldw	r2,-25288(gp)
  817998:	1005003a 	cmpeq	r2,r2,zero
  81799c:	1000971e 	bne	r2,zero,817bfc <Write_File_Record_At_Offset+0x2a0>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
  8179a0:	e03ffc15 	stw	zero,-16(fp)
  8179a4:	00001e06 	br	817a20 <Write_File_Record_At_Offset+0xc4>
			short int two_chars = (short int) record->name[counter + 1];
  8179a8:	e0bffc17 	ldw	r2,-16(fp)
  8179ac:	10c00044 	addi	r3,r2,1
  8179b0:	e0bfff17 	ldw	r2,-4(fp)
  8179b4:	10c5883a 	add	r2,r2,r3
  8179b8:	10800003 	ldbu	r2,0(r2)
  8179bc:	10803fcc 	andi	r2,r2,255
  8179c0:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars << 8;
  8179c4:	e0bffb0f 	ldh	r2,-20(fp)
  8179c8:	1004923a 	slli	r2,r2,8
  8179cc:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars | record->name[counter];
  8179d0:	e0fffc17 	ldw	r3,-16(fp)
  8179d4:	e0bfff17 	ldw	r2,-4(fp)
  8179d8:	10c5883a 	add	r2,r2,r3
  8179dc:	10800003 	ldbu	r2,0(r2)
  8179e0:	10c03fcc 	andi	r3,r2,255
  8179e4:	e0bffb0b 	ldhu	r2,-20(fp)
  8179e8:	10c4b03a 	or	r2,r2,r3
  8179ec:	e0bffb0d 	sth	r2,-20(fp)
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  8179f0:	d0a75717 	ldw	r2,-25252(gp)
  8179f4:	10800a17 	ldw	r2,40(r2)
  8179f8:	1009883a 	mov	r4,r2
  8179fc:	e0fffe17 	ldw	r3,-8(fp)
  817a00:	e0bffc17 	ldw	r2,-16(fp)
  817a04:	1885883a 	add	r2,r3,r2
  817a08:	2085883a 	add	r2,r4,r2
  817a0c:	e0fffb0f 	ldh	r3,-20(fp)
  817a10:	10c0002d 	sthio	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
  817a14:	e0bffc17 	ldw	r2,-16(fp)
  817a18:	10800084 	addi	r2,r2,2
  817a1c:	e0bffc15 	stw	r2,-16(fp)
  817a20:	e0bffc17 	ldw	r2,-16(fp)
  817a24:	10800210 	cmplti	r2,r2,8
  817a28:	103fdf1e 	bne	r2,zero,8179a8 <Write_File_Record_At_Offset+0x4c>
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
  817a2c:	e03ffc15 	stw	zero,-16(fp)
  817a30:	00001306 	br	817a80 <Write_File_Record_At_Offset+0x124>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
  817a34:	d0a75717 	ldw	r2,-25252(gp)
  817a38:	10800a17 	ldw	r2,40(r2)
  817a3c:	1009883a 	mov	r4,r2
  817a40:	e0fffe17 	ldw	r3,-8(fp)
  817a44:	e0bffc17 	ldw	r2,-16(fp)
  817a48:	1885883a 	add	r2,r3,r2
  817a4c:	2085883a 	add	r2,r4,r2
  817a50:	11000204 	addi	r4,r2,8
  817a54:	e0fffc17 	ldw	r3,-16(fp)
  817a58:	e0bfff17 	ldw	r2,-4(fp)
  817a5c:	1885883a 	add	r2,r3,r2
  817a60:	10800204 	addi	r2,r2,8
  817a64:	10800003 	ldbu	r2,0(r2)
  817a68:	10c03fcc 	andi	r3,r2,255
  817a6c:	2005883a 	mov	r2,r4
  817a70:	10c00025 	stbio	r3,0(r2)
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
  817a74:	e0bffc17 	ldw	r2,-16(fp)
  817a78:	10800044 	addi	r2,r2,1
  817a7c:	e0bffc15 	stw	r2,-16(fp)
  817a80:	e0bffc17 	ldw	r2,-16(fp)
  817a84:	108000d0 	cmplti	r2,r2,3
  817a88:	103fea1e 	bne	r2,zero,817a34 <Write_File_Record_At_Offset+0xd8>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
		}
		IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
  817a8c:	d0a75717 	ldw	r2,-25252(gp)
  817a90:	10800a17 	ldw	r2,40(r2)
  817a94:	1007883a 	mov	r3,r2
  817a98:	e0bffe17 	ldw	r2,-8(fp)
  817a9c:	1885883a 	add	r2,r3,r2
  817aa0:	110002c4 	addi	r4,r2,11
  817aa4:	e0bfff17 	ldw	r2,-4(fp)
  817aa8:	108002c3 	ldbu	r2,11(r2)
  817aac:	10c03fcc 	andi	r3,r2,255
  817ab0:	2005883a 	mov	r2,r4
  817ab4:	10c00025 	stbio	r3,0(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
  817ab8:	d0a75717 	ldw	r2,-25252(gp)
  817abc:	10800a17 	ldw	r2,40(r2)
  817ac0:	1007883a 	mov	r3,r2
  817ac4:	e0bffe17 	ldw	r2,-8(fp)
  817ac8:	1885883a 	add	r2,r3,r2
  817acc:	11000384 	addi	r4,r2,14
  817ad0:	e0bfff17 	ldw	r2,-4(fp)
  817ad4:	1080030b 	ldhu	r2,12(r2)
  817ad8:	10ffffcc 	andi	r3,r2,65535
  817adc:	2005883a 	mov	r2,r4
  817ae0:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
  817ae4:	d0a75717 	ldw	r2,-25252(gp)
  817ae8:	10800a17 	ldw	r2,40(r2)
  817aec:	1007883a 	mov	r3,r2
  817af0:	e0bffe17 	ldw	r2,-8(fp)
  817af4:	1885883a 	add	r2,r3,r2
  817af8:	11000404 	addi	r4,r2,16
  817afc:	e0bfff17 	ldw	r2,-4(fp)
  817b00:	1080038b 	ldhu	r2,14(r2)
  817b04:	10ffffcc 	andi	r3,r2,65535
  817b08:	2005883a 	mov	r2,r4
  817b0c:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
  817b10:	d0a75717 	ldw	r2,-25252(gp)
  817b14:	10800a17 	ldw	r2,40(r2)
  817b18:	1007883a 	mov	r3,r2
  817b1c:	e0bffe17 	ldw	r2,-8(fp)
  817b20:	1885883a 	add	r2,r3,r2
  817b24:	11000484 	addi	r4,r2,18
  817b28:	e0bfff17 	ldw	r2,-4(fp)
  817b2c:	1080040b 	ldhu	r2,16(r2)
  817b30:	10ffffcc 	andi	r3,r2,65535
  817b34:	2005883a 	mov	r2,r4
  817b38:	10c0002d 	sthio	r3,0(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
  817b3c:	d0a75717 	ldw	r2,-25252(gp)
  817b40:	10800a17 	ldw	r2,40(r2)
  817b44:	1007883a 	mov	r3,r2
  817b48:	e0bffe17 	ldw	r2,-8(fp)
  817b4c:	1885883a 	add	r2,r3,r2
  817b50:	11000584 	addi	r4,r2,22
  817b54:	e0bfff17 	ldw	r2,-4(fp)
  817b58:	1080048b 	ldhu	r2,18(r2)
  817b5c:	10ffffcc 	andi	r3,r2,65535
  817b60:	2005883a 	mov	r2,r4
  817b64:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
  817b68:	d0a75717 	ldw	r2,-25252(gp)
  817b6c:	10800a17 	ldw	r2,40(r2)
  817b70:	1007883a 	mov	r3,r2
  817b74:	e0bffe17 	ldw	r2,-8(fp)
  817b78:	1885883a 	add	r2,r3,r2
  817b7c:	11000604 	addi	r4,r2,24
  817b80:	e0bfff17 	ldw	r2,-4(fp)
  817b84:	1080050b 	ldhu	r2,20(r2)
  817b88:	10ffffcc 	andi	r3,r2,65535
  817b8c:	2005883a 	mov	r2,r4
  817b90:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
  817b94:	d0a75717 	ldw	r2,-25252(gp)
  817b98:	10800a17 	ldw	r2,40(r2)
  817b9c:	1007883a 	mov	r3,r2
  817ba0:	e0bffe17 	ldw	r2,-8(fp)
  817ba4:	1885883a 	add	r2,r3,r2
  817ba8:	11000684 	addi	r4,r2,26
  817bac:	e0bfff17 	ldw	r2,-4(fp)
  817bb0:	1080058b 	ldhu	r2,22(r2)
  817bb4:	10ffffcc 	andi	r3,r2,65535
  817bb8:	2005883a 	mov	r2,r4
  817bbc:	10c0002d 	sthio	r3,0(r2)
		IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
  817bc0:	d0a75717 	ldw	r2,-25252(gp)
  817bc4:	10800a17 	ldw	r2,40(r2)
  817bc8:	1007883a 	mov	r3,r2
  817bcc:	e0bffe17 	ldw	r2,-8(fp)
  817bd0:	1885883a 	add	r2,r3,r2
  817bd4:	11000704 	addi	r4,r2,28
  817bd8:	e0bfff17 	ldw	r2,-4(fp)
  817bdc:	10800617 	ldw	r2,24(r2)
  817be0:	1007883a 	mov	r3,r2
  817be4:	2005883a 	mov	r2,r4
  817be8:	10c00035 	stwio	r3,0(r2)
		current_sector_modified = true;
  817bec:	00800044 	movi	r2,1
  817bf0:	d0a75815 	stw	r2,-25248(gp)
		result = true;
  817bf4:	00800044 	movi	r2,1
  817bf8:	e0bffd15 	stw	r2,-12(fp)
	}
	return result;
  817bfc:	e0bffd17 	ldw	r2,-12(fp)
}
  817c00:	e037883a 	mov	sp,fp
  817c04:	dfc00117 	ldw	ra,4(sp)
  817c08:	df000017 	ldw	fp,0(sp)
  817c0c:	dec00204 	addi	sp,sp,8
  817c10:	f800283a 	ret

00817c14 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
  817c14:	defff804 	addi	sp,sp,-32
  817c18:	dfc00715 	stw	ra,28(sp)
  817c1c:	df000615 	stw	fp,24(sp)
  817c20:	dc000515 	stw	r16,20(sp)
  817c24:	df000504 	addi	fp,sp,20
  817c28:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
  817c2c:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
  817c30:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
  817c34:	0009883a 	mov	r4,zero
  817c38:	e17fff17 	ldw	r5,-4(fp)
  817c3c:	081b6a80 	call	81b6a8 <Read_Sector_Data_Attempt_CRC>
  817c40:	e0bffe15 	stw	r2,-8(fp)
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
  817c44:	d0a75717 	ldw	r2,-25252(gp)
  817c48:	10800a17 	ldw	r2,40(r2)
  817c4c:	10807f84 	addi	r2,r2,510
  817c50:	1080002b 	ldhuio	r2,0(r2)
  817c54:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
  817c58:	e0bffc0f 	ldh	r2,-16(fp)
  817c5c:	10ffffcc 	andi	r3,r2,65535
  817c60:	00aa9554 	movui	r2,43605
  817c64:	1881751e 	bne	r3,r2,81823c <Check_for_DOS_FAT+0x628>
  817c68:	e0bffe17 	ldw	r2,-8(fp)
  817c6c:	1005003a 	cmpeq	r2,r2,zero
  817c70:	1001721e 	bne	r2,zero,81823c <Check_for_DOS_FAT+0x628>
		int num_clusters = 0;
  817c74:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0]
  817c78:	d0a75717 	ldw	r2,-25252(gp)
  817c7c:	10800a17 	ldw	r2,40(r2)
  817c80:	10800023 	ldbuio	r2,0(r2)
  817c84:	1007883a 	mov	r3,r2
  817c88:	008020f4 	movhi	r2,131
  817c8c:	10ab4804 	addi	r2,r2,-21216
  817c90:	10c00005 	stb	r3,0(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1]
  817c94:	d0a75717 	ldw	r2,-25252(gp)
  817c98:	10800a17 	ldw	r2,40(r2)
  817c9c:	10800044 	addi	r2,r2,1
  817ca0:	10800023 	ldbuio	r2,0(r2)
  817ca4:	1007883a 	mov	r3,r2
  817ca8:	008020f4 	movhi	r2,131
  817cac:	10ab4804 	addi	r2,r2,-21216
  817cb0:	10c00045 	stb	r3,1(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2]
  817cb4:	d0a75717 	ldw	r2,-25252(gp)
  817cb8:	10800a17 	ldw	r2,40(r2)
  817cbc:	10800084 	addi	r2,r2,2
  817cc0:	10800023 	ldbuio	r2,0(r2)
  817cc4:	1007883a 	mov	r3,r2
  817cc8:	008020f4 	movhi	r2,131
  817ccc:	10ab4804 	addi	r2,r2,-21216
  817cd0:	10c00085 	stb	r3,2(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
  817cd4:	e03ffd15 	stw	zero,-12(fp)
  817cd8:	00001006 	br	817d1c <Check_for_DOS_FAT+0x108>
			boot_sector_data.OEM_name[counter]
  817cdc:	e13ffd17 	ldw	r4,-12(fp)
  817ce0:	d0a75717 	ldw	r2,-25252(gp)
  817ce4:	10800a17 	ldw	r2,40(r2)
  817ce8:	1007883a 	mov	r3,r2
  817cec:	e0bffd17 	ldw	r2,-12(fp)
  817cf0:	1885883a 	add	r2,r3,r2
  817cf4:	108000c4 	addi	r2,r2,3
  817cf8:	10800023 	ldbuio	r2,0(r2)
  817cfc:	1007883a 	mov	r3,r2
  817d00:	008020f4 	movhi	r2,131
  817d04:	10ab4804 	addi	r2,r2,-21216
  817d08:	1105883a 	add	r2,r2,r4
  817d0c:	10c000c5 	stb	r3,3(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1]
				= (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2]
				= (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
  817d10:	e0bffd17 	ldw	r2,-12(fp)
  817d14:	10800044 	addi	r2,r2,1
  817d18:	e0bffd15 	stw	r2,-12(fp)
  817d1c:	e0bffd17 	ldw	r2,-12(fp)
  817d20:	10800210 	cmplti	r2,r2,8
  817d24:	103fed1e 	bne	r2,zero,817cdc <Check_for_DOS_FAT+0xc8>
			boot_sector_data.OEM_name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes
  817d28:	d0a75717 	ldw	r2,-25252(gp)
  817d2c:	10800a17 	ldw	r2,40(r2)
  817d30:	10800304 	addi	r2,r2,12
  817d34:	10800023 	ldbuio	r2,0(r2)
  817d38:	10803fcc 	andi	r2,r2,255
  817d3c:	1004923a 	slli	r2,r2,8
  817d40:	1007883a 	mov	r3,r2
  817d44:	d0a75717 	ldw	r2,-25252(gp)
  817d48:	10800a17 	ldw	r2,40(r2)
  817d4c:	108002c4 	addi	r2,r2,11
  817d50:	10800023 	ldbuio	r2,0(r2)
  817d54:	10803fcc 	andi	r2,r2,255
  817d58:	1080201c 	xori	r2,r2,128
  817d5c:	10bfe004 	addi	r2,r2,-128
  817d60:	1884b03a 	or	r2,r3,r2
  817d64:	1007883a 	mov	r3,r2
  817d68:	008020f4 	movhi	r2,131
  817d6c:	10ab4804 	addi	r2,r2,-21216
  817d70:	10c0030d 	sth	r3,12(r2)
				= (((unsigned char) IORD_8DIRECT(device_pointer->base, 12))
						<< 8) | ((char) IORD_8DIRECT(device_pointer->base, 11));
		boot_sector_data.sectors_per_cluster
  817d74:	d0a75717 	ldw	r2,-25252(gp)
  817d78:	10800a17 	ldw	r2,40(r2)
  817d7c:	10800344 	addi	r2,r2,13
  817d80:	10800023 	ldbuio	r2,0(r2)
  817d84:	1007883a 	mov	r3,r2
  817d88:	008020f4 	movhi	r2,131
  817d8c:	10ab4804 	addi	r2,r2,-21216
  817d90:	10c00385 	stb	r3,14(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
		boot_sector_data.reserved_sectors
  817d94:	d0a75717 	ldw	r2,-25252(gp)
  817d98:	10800a17 	ldw	r2,40(r2)
  817d9c:	10800384 	addi	r2,r2,14
  817da0:	1080002b 	ldhuio	r2,0(r2)
  817da4:	1007883a 	mov	r3,r2
  817da8:	008020f4 	movhi	r2,131
  817dac:	10ab4804 	addi	r2,r2,-21216
  817db0:	10c0040d 	sth	r3,16(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
		boot_sector_data.number_of_FATs
  817db4:	d0a75717 	ldw	r2,-25252(gp)
  817db8:	10800a17 	ldw	r2,40(r2)
  817dbc:	10800404 	addi	r2,r2,16
  817dc0:	10800023 	ldbuio	r2,0(r2)
  817dc4:	1007883a 	mov	r3,r2
  817dc8:	008020f4 	movhi	r2,131
  817dcc:	10ab4804 	addi	r2,r2,-21216
  817dd0:	10c00485 	stb	r3,18(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
		boot_sector_data.max_number_of_dir_entires
  817dd4:	d0a75717 	ldw	r2,-25252(gp)
  817dd8:	10800a17 	ldw	r2,40(r2)
  817ddc:	10800484 	addi	r2,r2,18
  817de0:	10800023 	ldbuio	r2,0(r2)
  817de4:	10803fcc 	andi	r2,r2,255
  817de8:	1004923a 	slli	r2,r2,8
  817dec:	1007883a 	mov	r3,r2
  817df0:	d0a75717 	ldw	r2,-25252(gp)
  817df4:	10800a17 	ldw	r2,40(r2)
  817df8:	10800444 	addi	r2,r2,17
  817dfc:	10800023 	ldbuio	r2,0(r2)
  817e00:	10803fcc 	andi	r2,r2,255
  817e04:	1884b03a 	or	r2,r3,r2
  817e08:	1007883a 	mov	r3,r2
  817e0c:	008020f4 	movhi	r2,131
  817e10:	10ab4804 	addi	r2,r2,-21216
  817e14:	10c0050d 	sth	r3,20(r2)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 18))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
		boot_sector_data.number_of_sectors_in_partition
  817e18:	d0a75717 	ldw	r2,-25252(gp)
  817e1c:	10800a17 	ldw	r2,40(r2)
  817e20:	10800504 	addi	r2,r2,20
  817e24:	10800023 	ldbuio	r2,0(r2)
  817e28:	10803fcc 	andi	r2,r2,255
  817e2c:	1004923a 	slli	r2,r2,8
  817e30:	1007883a 	mov	r3,r2
  817e34:	d0a75717 	ldw	r2,-25252(gp)
  817e38:	10800a17 	ldw	r2,40(r2)
  817e3c:	108004c4 	addi	r2,r2,19
  817e40:	10800023 	ldbuio	r2,0(r2)
  817e44:	10803fcc 	andi	r2,r2,255
  817e48:	1884b03a 	or	r2,r3,r2
  817e4c:	1007883a 	mov	r3,r2
  817e50:	008020f4 	movhi	r2,131
  817e54:	10ab4804 	addi	r2,r2,-21216
  817e58:	10c0058d 	sth	r3,22(r2)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 20))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
		boot_sector_data.media_descriptor
  817e5c:	d0a75717 	ldw	r2,-25252(gp)
  817e60:	10800a17 	ldw	r2,40(r2)
  817e64:	10800544 	addi	r2,r2,21
  817e68:	10800023 	ldbuio	r2,0(r2)
  817e6c:	1007883a 	mov	r3,r2
  817e70:	008020f4 	movhi	r2,131
  817e74:	10ab4804 	addi	r2,r2,-21216
  817e78:	10c00605 	stb	r3,24(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
		boot_sector_data.number_of_sectors_per_table
  817e7c:	d0a75717 	ldw	r2,-25252(gp)
  817e80:	10800a17 	ldw	r2,40(r2)
  817e84:	10800584 	addi	r2,r2,22
  817e88:	1080002b 	ldhuio	r2,0(r2)
  817e8c:	1007883a 	mov	r3,r2
  817e90:	008020f4 	movhi	r2,131
  817e94:	10ab4804 	addi	r2,r2,-21216
  817e98:	10c0068d 	sth	r3,26(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
		boot_sector_data.number_of_sectors_per_track
  817e9c:	d0a75717 	ldw	r2,-25252(gp)
  817ea0:	10800a17 	ldw	r2,40(r2)
  817ea4:	10800604 	addi	r2,r2,24
  817ea8:	1080002b 	ldhuio	r2,0(r2)
  817eac:	1007883a 	mov	r3,r2
  817eb0:	008020f4 	movhi	r2,131
  817eb4:	10ab4804 	addi	r2,r2,-21216
  817eb8:	10c0070d 	sth	r3,28(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
		boot_sector_data.number_of_heads
  817ebc:	d0a75717 	ldw	r2,-25252(gp)
  817ec0:	10800a17 	ldw	r2,40(r2)
  817ec4:	10800684 	addi	r2,r2,26
  817ec8:	1080002b 	ldhuio	r2,0(r2)
  817ecc:	1007883a 	mov	r3,r2
  817ed0:	008020f4 	movhi	r2,131
  817ed4:	10ab4804 	addi	r2,r2,-21216
  817ed8:	10c0078d 	sth	r3,30(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors
  817edc:	d0a75717 	ldw	r2,-25252(gp)
  817ee0:	10800a17 	ldw	r2,40(r2)
  817ee4:	10800704 	addi	r2,r2,28
  817ee8:	10800037 	ldwio	r2,0(r2)
  817eec:	1007883a 	mov	r3,r2
  817ef0:	008020f4 	movhi	r2,131
  817ef4:	10ab4804 	addi	r2,r2,-21216
  817ef8:	10c00815 	stw	r3,32(r2)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB
  817efc:	d0a75717 	ldw	r2,-25252(gp)
  817f00:	10800a17 	ldw	r2,40(r2)
  817f04:	10800804 	addi	r2,r2,32
  817f08:	10800037 	ldwio	r2,0(r2)
  817f0c:	1007883a 	mov	r3,r2
  817f10:	008020f4 	movhi	r2,131
  817f14:	10ab4804 	addi	r2,r2,-21216
  817f18:	10c00915 	stw	r3,36(r2)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number
  817f1c:	d0a75717 	ldw	r2,-25252(gp)
  817f20:	10800a17 	ldw	r2,40(r2)
  817f24:	10800904 	addi	r2,r2,36
  817f28:	10800023 	ldbuio	r2,0(r2)
  817f2c:	1007883a 	mov	r3,r2
  817f30:	008020f4 	movhi	r2,131
  817f34:	10ab4804 	addi	r2,r2,-21216
  817f38:	10c00a05 	stb	r3,40(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head
  817f3c:	d0a75717 	ldw	r2,-25252(gp)
  817f40:	10800a17 	ldw	r2,40(r2)
  817f44:	10800944 	addi	r2,r2,37
  817f48:	10800023 	ldbuio	r2,0(r2)
  817f4c:	1007883a 	mov	r3,r2
  817f50:	008020f4 	movhi	r2,131
  817f54:	10ab4804 	addi	r2,r2,-21216
  817f58:	10c00a45 	stb	r3,41(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature
  817f5c:	d0a75717 	ldw	r2,-25252(gp)
  817f60:	10800a17 	ldw	r2,40(r2)
  817f64:	10800984 	addi	r2,r2,38
  817f68:	10800023 	ldbuio	r2,0(r2)
  817f6c:	1007883a 	mov	r3,r2
  817f70:	008020f4 	movhi	r2,131
  817f74:	10ab4804 	addi	r2,r2,-21216
  817f78:	10c00a85 	stb	r3,42(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset
  817f7c:	008020f4 	movhi	r2,131
  817f80:	10ab4804 	addi	r2,r2,-21216
  817f84:	1080040b 	ldhu	r2,16(r2)
  817f88:	10ffffcc 	andi	r3,r2,65535
  817f8c:	008020f4 	movhi	r2,131
  817f90:	10ab4804 	addi	r2,r2,-21216
  817f94:	10c01115 	stw	r3,68(r2)
				= boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset
  817f98:	008020f4 	movhi	r2,131
  817f9c:	10ab4804 	addi	r2,r2,-21216
  817fa0:	10c01117 	ldw	r3,68(r2)
  817fa4:	008020f4 	movhi	r2,131
  817fa8:	10ab4804 	addi	r2,r2,-21216
  817fac:	1080068b 	ldhu	r2,26(r2)
  817fb0:	10bfffcc 	andi	r2,r2,65535
  817fb4:	1887883a 	add	r3,r3,r2
  817fb8:	008020f4 	movhi	r2,131
  817fbc:	10ab4804 	addi	r2,r2,-21216
  817fc0:	10c01215 	stw	r3,72(r2)
				= boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset
  817fc4:	008020f4 	movhi	r2,131
  817fc8:	10ab4804 	addi	r2,r2,-21216
  817fcc:	10c01217 	ldw	r3,72(r2)
  817fd0:	008020f4 	movhi	r2,131
  817fd4:	10ab4804 	addi	r2,r2,-21216
  817fd8:	1080068b 	ldhu	r2,26(r2)
  817fdc:	10bfffcc 	andi	r2,r2,65535
  817fe0:	1887883a 	add	r3,r3,r2
  817fe4:	008020f4 	movhi	r2,131
  817fe8:	10ab4804 	addi	r2,r2,-21216
  817fec:	10c01315 	stw	r3,76(r2)
				= boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset
  817ff0:	008020f4 	movhi	r2,131
  817ff4:	10ab4804 	addi	r2,r2,-21216
  817ff8:	14001317 	ldw	r16,76(r2)
  817ffc:	008020f4 	movhi	r2,131
  818000:	10ab4804 	addi	r2,r2,-21216
  818004:	1080050b 	ldhu	r2,20(r2)
  818008:	10bfffcc 	andi	r2,r2,65535
  81800c:	1008917a 	slli	r4,r2,5
  818010:	008020f4 	movhi	r2,131
  818014:	10ab4804 	addi	r2,r2,-21216
  818018:	1080030b 	ldhu	r2,12(r2)
  81801c:	117fffcc 	andi	r5,r2,65535
  818020:	080977c0 	call	80977c <__divsi3>
  818024:	8087883a 	add	r3,r16,r2
  818028:	008020f4 	movhi	r2,131
  81802c:	10ab4804 	addi	r2,r2,-21216
  818030:	10c01415 	stw	r3,80(r2)
				= boot_sector_data.root_directory_sector_offset + (32
						* boot_sector_data.max_number_of_dir_entires
						/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
  818034:	008020f4 	movhi	r2,131
  818038:	10ab4804 	addi	r2,r2,-21216
  81803c:	1080058b 	ldhu	r2,22(r2)
  818040:	10bfffcc 	andi	r2,r2,65535
  818044:	1005003a 	cmpeq	r2,r2,zero
  818048:	10000b1e 	bne	r2,zero,818078 <Check_for_DOS_FAT+0x464>
			num_clusters = (boot_sector_data.number_of_sectors_in_partition
  81804c:	008020f4 	movhi	r2,131
  818050:	10ab4804 	addi	r2,r2,-21216
  818054:	1080058b 	ldhu	r2,22(r2)
  818058:	113fffcc 	andi	r4,r2,65535
  81805c:	008020f4 	movhi	r2,131
  818060:	10ab4804 	addi	r2,r2,-21216
  818064:	10800383 	ldbu	r2,14(r2)
  818068:	11403fcc 	andi	r5,r2,255
  81806c:	080977c0 	call	80977c <__divsi3>
  818070:	e0bffb15 	stw	r2,-20(fp)
  818074:	00000906 	br	81809c <Check_for_DOS_FAT+0x488>
					/ boot_sector_data.sectors_per_cluster);
		} else {
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB
  818078:	008020f4 	movhi	r2,131
  81807c:	10ab4804 	addi	r2,r2,-21216
  818080:	11000917 	ldw	r4,36(r2)
  818084:	008020f4 	movhi	r2,131
  818088:	10ab4804 	addi	r2,r2,-21216
  81808c:	10800383 	ldbu	r2,14(r2)
  818090:	11403fcc 	andi	r5,r2,255
  818094:	080983c0 	call	80983c <__udivsi3>
  818098:	e0bffb15 	stw	r2,-20(fp)
					/ boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087) {
  81809c:	e0bffb17 	ldw	r2,-20(fp)
  8180a0:	1083fdc8 	cmpgei	r2,r2,4087
  8180a4:	1000051e 	bne	r2,zero,8180bc <Check_for_DOS_FAT+0x4a8>
			boot_sector_data.bits_for_cluster_index = 12;
  8180a8:	00c020f4 	movhi	r3,131
  8180ac:	18eb4804 	addi	r3,r3,-21216
  8180b0:	00800304 	movi	r2,12
  8180b4:	18801085 	stb	r2,66(r3)
  8180b8:	00000c06 	br	8180ec <Check_for_DOS_FAT+0x4d8>
		} else if (num_clusters <= 65517) {
  8180bc:	e0fffb17 	ldw	r3,-20(fp)
  8180c0:	00bffb54 	movui	r2,65517
  8180c4:	10c00516 	blt	r2,r3,8180dc <Check_for_DOS_FAT+0x4c8>
			boot_sector_data.bits_for_cluster_index = 16;
  8180c8:	00c020f4 	movhi	r3,131
  8180cc:	18eb4804 	addi	r3,r3,-21216
  8180d0:	00800404 	movi	r2,16
  8180d4:	18801085 	stb	r2,66(r3)
  8180d8:	00000406 	br	8180ec <Check_for_DOS_FAT+0x4d8>
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
  8180dc:	00c020f4 	movhi	r3,131
  8180e0:	18eb4804 	addi	r3,r3,-21216
  8180e4:	00800804 	movi	r2,32
  8180e8:	18801085 	stb	r2,66(r3)
		}

		for (counter = 0; counter < 4; counter++) {
  8180ec:	e03ffd15 	stw	zero,-12(fp)
  8180f0:	00001106 	br	818138 <Check_for_DOS_FAT+0x524>
			boot_sector_data.volume_id[counter]
  8180f4:	e13ffd17 	ldw	r4,-12(fp)
  8180f8:	d0a75717 	ldw	r2,-25252(gp)
  8180fc:	10800a17 	ldw	r2,40(r2)
  818100:	1007883a 	mov	r3,r2
  818104:	e0bffd17 	ldw	r2,-12(fp)
  818108:	1885883a 	add	r2,r3,r2
  81810c:	108009c4 	addi	r2,r2,39
  818110:	10800023 	ldbuio	r2,0(r2)
  818114:	1007883a 	mov	r3,r2
  818118:	008020f4 	movhi	r2,131
  81811c:	10ab4804 	addi	r2,r2,-21216
  818120:	2085883a 	add	r2,r4,r2
  818124:	10800a04 	addi	r2,r2,40
  818128:	10c000c5 	stb	r3,3(r2)
			boot_sector_data.bits_for_cluster_index = 16;
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
		}

		for (counter = 0; counter < 4; counter++) {
  81812c:	e0bffd17 	ldw	r2,-12(fp)
  818130:	10800044 	addi	r2,r2,1
  818134:	e0bffd15 	stw	r2,-12(fp)
  818138:	e0bffd17 	ldw	r2,-12(fp)
  81813c:	10800110 	cmplti	r2,r2,4
  818140:	103fec1e 	bne	r2,zero,8180f4 <Check_for_DOS_FAT+0x4e0>
			boot_sector_data.volume_id[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
  818144:	e03ffd15 	stw	zero,-12(fp)
  818148:	00001106 	br	818190 <Check_for_DOS_FAT+0x57c>
			boot_sector_data.volume_label[counter]
  81814c:	e13ffd17 	ldw	r4,-12(fp)
  818150:	d0a75717 	ldw	r2,-25252(gp)
  818154:	10800a17 	ldw	r2,40(r2)
  818158:	1007883a 	mov	r3,r2
  81815c:	e0bffd17 	ldw	r2,-12(fp)
  818160:	1885883a 	add	r2,r3,r2
  818164:	10800ac4 	addi	r2,r2,43
  818168:	10800023 	ldbuio	r2,0(r2)
  81816c:	1007883a 	mov	r3,r2
  818170:	008020f4 	movhi	r2,131
  818174:	10ab4804 	addi	r2,r2,-21216
  818178:	2085883a 	add	r2,r4,r2
  81817c:	10800b04 	addi	r2,r2,44
  818180:	10c000c5 	stb	r3,3(r2)

		for (counter = 0; counter < 4; counter++) {
			boot_sector_data.volume_id[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
  818184:	e0bffd17 	ldw	r2,-12(fp)
  818188:	10800044 	addi	r2,r2,1
  81818c:	e0bffd15 	stw	r2,-12(fp)
  818190:	e0bffd17 	ldw	r2,-12(fp)
  818194:	108002d0 	cmplti	r2,r2,11
  818198:	103fec1e 	bne	r2,zero,81814c <Check_for_DOS_FAT+0x538>
			boot_sector_data.volume_label[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
  81819c:	e03ffd15 	stw	zero,-12(fp)
  8181a0:	00001106 	br	8181e8 <Check_for_DOS_FAT+0x5d4>
			boot_sector_data.file_system_type[counter]
  8181a4:	e13ffd17 	ldw	r4,-12(fp)
  8181a8:	d0a75717 	ldw	r2,-25252(gp)
  8181ac:	10800a17 	ldw	r2,40(r2)
  8181b0:	1007883a 	mov	r3,r2
  8181b4:	e0bffd17 	ldw	r2,-12(fp)
  8181b8:	1885883a 	add	r2,r3,r2
  8181bc:	10800d84 	addi	r2,r2,54
  8181c0:	10800023 	ldbuio	r2,0(r2)
  8181c4:	1007883a 	mov	r3,r2
  8181c8:	008020f4 	movhi	r2,131
  8181cc:	10ab4804 	addi	r2,r2,-21216
  8181d0:	2085883a 	add	r2,r4,r2
  8181d4:	10800e04 	addi	r2,r2,56
  8181d8:	10c00085 	stb	r3,2(r2)
		}
		for (counter = 0; counter < 11; counter++) {
			boot_sector_data.volume_label[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
  8181dc:	e0bffd17 	ldw	r2,-12(fp)
  8181e0:	10800044 	addi	r2,r2,1
  8181e4:	e0bffd15 	stw	r2,-12(fp)
  8181e8:	e0bffd17 	ldw	r2,-12(fp)
  8181ec:	10800210 	cmplti	r2,r2,8
  8181f0:	103fec1e 	bne	r2,zero,8181a4 <Check_for_DOS_FAT+0x590>
			boot_sector_data.file_system_type[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
  8181f4:	e03ffd15 	stw	zero,-12(fp)
  8181f8:	00000a06 	br	818224 <Check_for_DOS_FAT+0x610>
			active_files[counter].in_use = false;
  8181fc:	e0bffd17 	ldw	r2,-12(fp)
  818200:	00c020f4 	movhi	r3,131
  818204:	18eb5d04 	addi	r3,r3,-21132
  818208:	100491ba 	slli	r2,r2,6
  81820c:	10c5883a 	add	r2,r2,r3
  818210:	10800f04 	addi	r2,r2,60
  818214:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++) {
			boot_sector_data.file_system_type[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
  818218:	e0bffd17 	ldw	r2,-12(fp)
  81821c:	10800044 	addi	r2,r2,1
  818220:	e0bffd15 	stw	r2,-12(fp)
  818224:	e0bffd17 	ldw	r2,-12(fp)
  818228:	10800510 	cmplti	r2,r2,20
  81822c:	103ff31e 	bne	r2,zero,8181fc <Check_for_DOS_FAT+0x5e8>
			active_files[counter].in_use = false;
		}
		result = true;
  818230:	00800044 	movi	r2,1
  818234:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
  818238:	00000106 	br	818240 <Check_for_DOS_FAT+0x62c>
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
			active_files[counter].in_use = false;
		}
		result = true;
	} else {
		result = false;
  81823c:	e03ffe15 	stw	zero,-8(fp)
	}
	return result;
  818240:	e0bffe17 	ldw	r2,-8(fp)
}
  818244:	e037883a 	mov	sp,fp
  818248:	dfc00217 	ldw	ra,8(sp)
  81824c:	df000117 	ldw	fp,4(sp)
  818250:	dc000017 	ldw	r16,0(sp)
  818254:	dec00304 	addi	sp,sp,12
  818258:	f800283a 	ret

0081825c <Look_for_FAT16>:

bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
  81825c:	defffc04 	addi	sp,sp,-16
  818260:	dfc00315 	stw	ra,12(sp)
  818264:	df000215 	stw	fp,8(sp)
  818268:	df000204 	addi	fp,sp,8
	bool result = false;
  81826c:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
  818270:	0819fa40 	call	819fa4 <alt_up_sd_card_is_Present>
  818274:	1005003a 	cmpeq	r2,r2,zero
  818278:	1000331e 	bne	r2,zero,818348 <Look_for_FAT16+0xec>
		Read_Sector_Data_Attempt_CRC(0, 0);
  81827c:	0009883a 	mov	r4,zero
  818280:	000b883a 	mov	r5,zero
  818284:	081b6a80 	call	81b6a8 <Read_Sector_Data_Attempt_CRC>

		short int csd_file_format = *CSD_register_w0;
  818288:	d0a75117 	ldw	r2,-25276(gp)
  81828c:	1080000b 	ldhu	r2,0(r2)
  818290:	e0bffe0d 	sth	r2,-8(fp)

		fat_partition_offset_in_512_byte_sectors = 0;
  818294:	d0275515 	stw	zero,-25260(gp)
		fat_partition_size_in_512_byte_sectors = 0;
  818298:	d0275615 	stw	zero,-25256(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00)
  81829c:	e0bffe0f 	ldh	r2,-8(fp)
  8182a0:	1004803a 	cmplt	r2,r2,zero
  8182a4:	1000281e 	bne	r2,zero,818348 <Look_for_FAT16+0xec>
  8182a8:	e0bffe0b 	ldhu	r2,-8(fp)
  8182ac:	10bfffcc 	andi	r2,r2,65535
  8182b0:	1083000c 	andi	r2,r2,3072
  8182b4:	10830020 	cmpeqi	r2,r2,3072
  8182b8:	1000231e 	bne	r2,zero,818348 <Look_for_FAT16+0xec>
				!= 0x0c00)) {
			if ((csd_file_format & 0x0c00) == 0x0400) {
  8182bc:	e0bffe0b 	ldhu	r2,-8(fp)
  8182c0:	10bfffcc 	andi	r2,r2,65535
  8182c4:	1083000c 	andi	r2,r2,3072
  8182c8:	10810018 	cmpnei	r2,r2,1024
  8182cc:	1000031e 	bne	r2,zero,8182dc <Look_for_FAT16+0x80>
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
  8182d0:	0009883a 	mov	r4,zero
  8182d4:	0817c140 	call	817c14 <Check_for_DOS_FAT>
  8182d8:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000) {
  8182dc:	e0bffe0b 	ldhu	r2,-8(fp)
  8182e0:	10bfffcc 	andi	r2,r2,65535
  8182e4:	1083000c 	andi	r2,r2,3072
  8182e8:	1004c03a 	cmpne	r2,r2,zero
  8182ec:	1000061e 	bne	r2,zero,818308 <Look_for_FAT16+0xac>
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record()) {
  8182f0:	08175280 	call	817528 <Check_for_Master_Boot_Record>
  8182f4:	1005003a 	cmpeq	r2,r2,zero
  8182f8:	1000031e 	bne	r2,zero,818308 <Look_for_FAT16+0xac>
					result = Check_for_DOS_FAT(
  8182fc:	d1275517 	ldw	r4,-25260(gp)
  818300:	0817c140 	call	817c14 <Check_for_DOS_FAT>
  818304:	e0bfff15 	stw	r2,-4(fp)
							fat_partition_offset_in_512_byte_sectors);
				}
			}
			if (result == true) {
  818308:	e0bfff17 	ldw	r2,-4(fp)
  81830c:	10800058 	cmpnei	r2,r2,1
  818310:	10000d1e 	bne	r2,zero,818348 <Look_for_FAT16+0xec>
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16) {
  818314:	008020f4 	movhi	r2,131
  818318:	10ab4804 	addi	r2,r2,-21216
  81831c:	10801083 	ldbu	r2,66(r2)
  818320:	10803fcc 	andi	r2,r2,255
  818324:	10800420 	cmpeqi	r2,r2,16
  818328:	1000021e 	bne	r2,zero,818334 <Look_for_FAT16+0xd8>
					result = false;
  81832c:	e03fff15 	stw	zero,-4(fp)
  818330:	00000506 	br	818348 <Look_for_FAT16+0xec>
				} else {
					fat_partition_size_in_512_byte_sectors
  818334:	008020f4 	movhi	r2,131
  818338:	10ab4804 	addi	r2,r2,-21216
  81833c:	1080058b 	ldhu	r2,22(r2)
  818340:	10bfffcc 	andi	r2,r2,65535
  818344:	d0a75615 	stw	r2,-25256(gp)
							= boot_sector_data.number_of_sectors_in_partition;
				}
			}
		}
	}
	return result;
  818348:	e0bfff17 	ldw	r2,-4(fp)
}
  81834c:	e037883a 	mov	sp,fp
  818350:	dfc00117 	ldw	ra,4(sp)
  818354:	df000017 	ldw	fp,0(sp)
  818358:	dec00204 	addi	sp,sp,8
  81835c:	f800283a 	ret

00818360 <filename_to_upper_case>:

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
  818360:	defffb04 	addi	sp,sp,-20
  818364:	dfc00415 	stw	ra,16(sp)
  818368:	df000315 	stw	fp,12(sp)
  81836c:	df000304 	addi	fp,sp,12
  818370:	e13fff15 	stw	r4,-4(fp)
	int index;
	int length = strlen(file_name);
  818374:	e13fff17 	ldw	r4,-4(fp)
  818378:	080aa480 	call	80aa48 <strlen>
  81837c:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
  818380:	e03ffe15 	stw	zero,-8(fp)
  818384:	00002206 	br	818410 <filename_to_upper_case+0xb0>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
  818388:	e0bffe17 	ldw	r2,-8(fp)
  81838c:	1007883a 	mov	r3,r2
  818390:	e0bfff17 	ldw	r2,-4(fp)
  818394:	1885883a 	add	r2,r3,r2
  818398:	10800003 	ldbu	r2,0(r2)
  81839c:	10803fcc 	andi	r2,r2,255
  8183a0:	1080201c 	xori	r2,r2,128
  8183a4:	10bfe004 	addi	r2,r2,-128
  8183a8:	10801850 	cmplti	r2,r2,97
  8183ac:	1000151e 	bne	r2,zero,818404 <filename_to_upper_case+0xa4>
  8183b0:	e0bffe17 	ldw	r2,-8(fp)
  8183b4:	1007883a 	mov	r3,r2
  8183b8:	e0bfff17 	ldw	r2,-4(fp)
  8183bc:	1885883a 	add	r2,r3,r2
  8183c0:	10800003 	ldbu	r2,0(r2)
  8183c4:	10803fcc 	andi	r2,r2,255
  8183c8:	1080201c 	xori	r2,r2,128
  8183cc:	10bfe004 	addi	r2,r2,-128
  8183d0:	10801ec8 	cmpgei	r2,r2,123
  8183d4:	10000b1e 	bne	r2,zero,818404 <filename_to_upper_case+0xa4>
			file_name[index] = (file_name[index] - 'a') + 'A';
  8183d8:	e0bffe17 	ldw	r2,-8(fp)
  8183dc:	1007883a 	mov	r3,r2
  8183e0:	e0bfff17 	ldw	r2,-4(fp)
  8183e4:	1889883a 	add	r4,r3,r2
  8183e8:	e0bffe17 	ldw	r2,-8(fp)
  8183ec:	1007883a 	mov	r3,r2
  8183f0:	e0bfff17 	ldw	r2,-4(fp)
  8183f4:	1885883a 	add	r2,r3,r2
  8183f8:	10800003 	ldbu	r2,0(r2)
  8183fc:	10bff804 	addi	r2,r2,-32
  818400:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
  818404:	e0bffe17 	ldw	r2,-8(fp)
  818408:	10800044 	addi	r2,r2,1
  81840c:	e0bffe15 	stw	r2,-8(fp)
  818410:	e0fffe17 	ldw	r3,-8(fp)
  818414:	e0bffd17 	ldw	r2,-12(fp)
  818418:	18bfdb16 	blt	r3,r2,818388 <filename_to_upper_case+0x28>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
			file_name[index] = (file_name[index] - 'a') + 'A';
		}
	}
}
  81841c:	e037883a 	mov	sp,fp
  818420:	dfc00117 	ldw	ra,4(sp)
  818424:	df000017 	ldw	fp,0(sp)
  818428:	dec00204 	addi	sp,sp,8
  81842c:	f800283a 	ret

00818430 <check_file_name_for_FAT16_compliance>:

bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
  818430:	defff804 	addi	sp,sp,-32
  818434:	dfc00715 	stw	ra,28(sp)
  818438:	df000615 	stw	fp,24(sp)
  81843c:	df000604 	addi	fp,sp,24
  818440:	e13fff15 	stw	r4,-4(fp)
	int length = strlen(file_name);
  818444:	e13fff17 	ldw	r4,-4(fp)
  818448:	080aa480 	call	80aa48 <strlen>
  81844c:	e0bffe15 	stw	r2,-8(fp)
	int index;
	int last_dir_break_position = -1;
  818450:	00bfffc4 	movi	r2,-1
  818454:	e0bffc15 	stw	r2,-16(fp)
	int last_period = -1;
  818458:	00bfffc4 	movi	r2,-1
  81845c:	e0bffb15 	stw	r2,-20(fp)
	bool result = true;
  818460:	00800044 	movi	r2,1
  818464:	e0bffa15 	stw	r2,-24(fp)

	for (index = 0; index < length; index++) {
  818468:	e03ffd15 	stw	zero,-12(fp)
  81846c:	00007606 	br	818648 <check_file_name_for_FAT16_compliance+0x218>
		if ((file_name[index] == ' ') || ((last_dir_break_position == (index
  818470:	e0bffd17 	ldw	r2,-12(fp)
  818474:	1007883a 	mov	r3,r2
  818478:	e0bfff17 	ldw	r2,-4(fp)
  81847c:	1885883a 	add	r2,r3,r2
  818480:	10800003 	ldbu	r2,0(r2)
  818484:	10803fcc 	andi	r2,r2,255
  818488:	1080201c 	xori	r2,r2,128
  81848c:	10bfe004 	addi	r2,r2,-128
  818490:	10800820 	cmpeqi	r2,r2,32
  818494:	1000431e 	bne	r2,zero,8185a4 <check_file_name_for_FAT16_compliance+0x174>
  818498:	e0bffd17 	ldw	r2,-12(fp)
  81849c:	10ffffc4 	addi	r3,r2,-1
  8184a0:	e0bffc17 	ldw	r2,-16(fp)
  8184a4:	1880141e 	bne	r3,r2,8184f8 <check_file_name_for_FAT16_compliance+0xc8>
  8184a8:	e0bffd17 	ldw	r2,-12(fp)
  8184ac:	1007883a 	mov	r3,r2
  8184b0:	e0bfff17 	ldw	r2,-4(fp)
  8184b4:	1885883a 	add	r2,r3,r2
  8184b8:	10800003 	ldbu	r2,0(r2)
  8184bc:	10803fcc 	andi	r2,r2,255
  8184c0:	1080201c 	xori	r2,r2,128
  8184c4:	10bfe004 	addi	r2,r2,-128
  8184c8:	10801720 	cmpeqi	r2,r2,92
  8184cc:	1000351e 	bne	r2,zero,8185a4 <check_file_name_for_FAT16_compliance+0x174>
  8184d0:	e0bffd17 	ldw	r2,-12(fp)
  8184d4:	1007883a 	mov	r3,r2
  8184d8:	e0bfff17 	ldw	r2,-4(fp)
  8184dc:	1885883a 	add	r2,r3,r2
  8184e0:	10800003 	ldbu	r2,0(r2)
  8184e4:	10803fcc 	andi	r2,r2,255
  8184e8:	1080201c 	xori	r2,r2,128
  8184ec:	10bfe004 	addi	r2,r2,-128
  8184f0:	10800be0 	cmpeqi	r2,r2,47
  8184f4:	10002b1e 	bne	r2,zero,8185a4 <check_file_name_for_FAT16_compliance+0x174>
  8184f8:	e0fffd17 	ldw	r3,-12(fp)
  8184fc:	e0bffb17 	ldw	r2,-20(fp)
  818500:	1885c83a 	sub	r2,r3,r2
  818504:	10800258 	cmpnei	r2,r2,9
  818508:	10000a1e 	bne	r2,zero,818534 <check_file_name_for_FAT16_compliance+0x104>
  81850c:	e0bffd17 	ldw	r2,-12(fp)
  818510:	1007883a 	mov	r3,r2
  818514:	e0bfff17 	ldw	r2,-4(fp)
  818518:	1885883a 	add	r2,r3,r2
  81851c:	10800003 	ldbu	r2,0(r2)
  818520:	10803fcc 	andi	r2,r2,255
  818524:	1080201c 	xori	r2,r2,128
  818528:	10bfe004 	addi	r2,r2,-128
  81852c:	10800b98 	cmpnei	r2,r2,46
  818530:	10001c1e 	bne	r2,zero,8185a4 <check_file_name_for_FAT16_compliance+0x174>
  818534:	e0fffc17 	ldw	r3,-16(fp)
  818538:	e0bffb17 	ldw	r2,-20(fp)
  81853c:	18801b26 	beq	r3,r2,8185ac <check_file_name_for_FAT16_compliance+0x17c>
  818540:	e0fffd17 	ldw	r3,-12(fp)
  818544:	e0bffb17 	ldw	r2,-20(fp)
  818548:	1885c83a 	sub	r2,r3,r2
  81854c:	10800110 	cmplti	r2,r2,4
  818550:	1000161e 	bne	r2,zero,8185ac <check_file_name_for_FAT16_compliance+0x17c>
  818554:	e0bffd17 	ldw	r2,-12(fp)
  818558:	1007883a 	mov	r3,r2
  81855c:	e0bfff17 	ldw	r2,-4(fp)
  818560:	1885883a 	add	r2,r3,r2
  818564:	10800003 	ldbu	r2,0(r2)
  818568:	10803fcc 	andi	r2,r2,255
  81856c:	1080201c 	xori	r2,r2,128
  818570:	10bfe004 	addi	r2,r2,-128
  818574:	10801720 	cmpeqi	r2,r2,92
  818578:	10000c1e 	bne	r2,zero,8185ac <check_file_name_for_FAT16_compliance+0x17c>
  81857c:	e0bffd17 	ldw	r2,-12(fp)
  818580:	1007883a 	mov	r3,r2
  818584:	e0bfff17 	ldw	r2,-4(fp)
  818588:	1885883a 	add	r2,r3,r2
  81858c:	10800003 	ldbu	r2,0(r2)
  818590:	10803fcc 	andi	r2,r2,255
  818594:	1080201c 	xori	r2,r2,128
  818598:	10bfe004 	addi	r2,r2,-128
  81859c:	10800be0 	cmpeqi	r2,r2,47
  8185a0:	1000021e 	bne	r2,zero,8185ac <check_file_name_for_FAT16_compliance+0x17c>
				- 1)) && ((file_name[index] == '\\') || (file_name[index]
				== '/'))) || ((index - last_period == 9) && (file_name[index]
				!= '.')) || ((last_dir_break_position != last_period) && (index
				- last_period > 3) && (file_name[index] != '\\')
				&& (file_name[index] != '/'))) {
			result = false;
  8185a4:	e03ffa15 	stw	zero,-24(fp)
			break;
  8185a8:	00002a06 	br	818654 <check_file_name_for_FAT16_compliance+0x224>
		}
		if ((file_name[index] == '\\') || (file_name[index] == '/')) {
  8185ac:	e0bffd17 	ldw	r2,-12(fp)
  8185b0:	1007883a 	mov	r3,r2
  8185b4:	e0bfff17 	ldw	r2,-4(fp)
  8185b8:	1885883a 	add	r2,r3,r2
  8185bc:	10800003 	ldbu	r2,0(r2)
  8185c0:	10803fcc 	andi	r2,r2,255
  8185c4:	1080201c 	xori	r2,r2,128
  8185c8:	10bfe004 	addi	r2,r2,-128
  8185cc:	10801720 	cmpeqi	r2,r2,92
  8185d0:	10000a1e 	bne	r2,zero,8185fc <check_file_name_for_FAT16_compliance+0x1cc>
  8185d4:	e0bffd17 	ldw	r2,-12(fp)
  8185d8:	1007883a 	mov	r3,r2
  8185dc:	e0bfff17 	ldw	r2,-4(fp)
  8185e0:	1885883a 	add	r2,r3,r2
  8185e4:	10800003 	ldbu	r2,0(r2)
  8185e8:	10803fcc 	andi	r2,r2,255
  8185ec:	1080201c 	xori	r2,r2,128
  8185f0:	10bfe004 	addi	r2,r2,-128
  8185f4:	10800bd8 	cmpnei	r2,r2,47
  8185f8:	1000041e 	bne	r2,zero,81860c <check_file_name_for_FAT16_compliance+0x1dc>
			last_period = index;
  8185fc:	e0bffd17 	ldw	r2,-12(fp)
  818600:	e0bffb15 	stw	r2,-20(fp)
			last_dir_break_position = index;
  818604:	e0bffd17 	ldw	r2,-12(fp)
  818608:	e0bffc15 	stw	r2,-16(fp)
		}
		if (file_name[index] == '.') {
  81860c:	e0bffd17 	ldw	r2,-12(fp)
  818610:	1007883a 	mov	r3,r2
  818614:	e0bfff17 	ldw	r2,-4(fp)
  818618:	1885883a 	add	r2,r3,r2
  81861c:	10800003 	ldbu	r2,0(r2)
  818620:	10803fcc 	andi	r2,r2,255
  818624:	1080201c 	xori	r2,r2,128
  818628:	10bfe004 	addi	r2,r2,-128
  81862c:	10800b98 	cmpnei	r2,r2,46
  818630:	1000021e 	bne	r2,zero,81863c <check_file_name_for_FAT16_compliance+0x20c>
			last_period = index;
  818634:	e0bffd17 	ldw	r2,-12(fp)
  818638:	e0bffb15 	stw	r2,-20(fp)
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
  81863c:	e0bffd17 	ldw	r2,-12(fp)
  818640:	10800044 	addi	r2,r2,1
  818644:	e0bffd15 	stw	r2,-12(fp)
  818648:	e0fffd17 	ldw	r3,-12(fp)
  81864c:	e0bffe17 	ldw	r2,-8(fp)
  818650:	18bf8716 	blt	r3,r2,818470 <check_file_name_for_FAT16_compliance+0x40>
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
  818654:	e0fffe17 	ldw	r3,-8(fp)
  818658:	e0bfff17 	ldw	r2,-4(fp)
  81865c:	1885883a 	add	r2,r3,r2
  818660:	10bfffc4 	addi	r2,r2,-1
  818664:	10800003 	ldbu	r2,0(r2)
  818668:	10803fcc 	andi	r2,r2,255
  81866c:	1080201c 	xori	r2,r2,128
  818670:	10bfe004 	addi	r2,r2,-128
  818674:	10801720 	cmpeqi	r2,r2,92
  818678:	10000a1e 	bne	r2,zero,8186a4 <check_file_name_for_FAT16_compliance+0x274>
  81867c:	e0fffe17 	ldw	r3,-8(fp)
  818680:	e0bfff17 	ldw	r2,-4(fp)
  818684:	1885883a 	add	r2,r3,r2
  818688:	10bfffc4 	addi	r2,r2,-1
  81868c:	10800003 	ldbu	r2,0(r2)
  818690:	10803fcc 	andi	r2,r2,255
  818694:	1080201c 	xori	r2,r2,128
  818698:	10bfe004 	addi	r2,r2,-128
  81869c:	10800bd8 	cmpnei	r2,r2,47
  8186a0:	1000011e 	bne	r2,zero,8186a8 <check_file_name_for_FAT16_compliance+0x278>
		result = false;
  8186a4:	e03ffa15 	stw	zero,-24(fp)
	}
	return result;
  8186a8:	e0bffa17 	ldw	r2,-24(fp)
}
  8186ac:	e037883a 	mov	sp,fp
  8186b0:	dfc00117 	ldw	ra,4(sp)
  8186b4:	df000017 	ldw	fp,0(sp)
  8186b8:	dec00204 	addi	sp,sp,8
  8186bc:	f800283a 	ret

008186c0 <get_dir_divider_location>:

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
  8186c0:	defffb04 	addi	sp,sp,-20
  8186c4:	dfc00415 	stw	ra,16(sp)
  8186c8:	df000315 	stw	fp,12(sp)
  8186cc:	df000304 	addi	fp,sp,12
  8186d0:	e13fff15 	stw	r4,-4(fp)
	int index = 0;
  8186d4:	e03ffe15 	stw	zero,-8(fp)
	int length = strlen(name);
  8186d8:	e13fff17 	ldw	r4,-4(fp)
  8186dc:	080aa480 	call	80aa48 <strlen>
  8186e0:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
  8186e4:	e03ffe15 	stw	zero,-8(fp)
  8186e8:	00001706 	br	818748 <get_dir_divider_location+0x88>
		if ((name[index] == '\\') || (name[index] == '/')) {
  8186ec:	e0bffe17 	ldw	r2,-8(fp)
  8186f0:	1007883a 	mov	r3,r2
  8186f4:	e0bfff17 	ldw	r2,-4(fp)
  8186f8:	1885883a 	add	r2,r3,r2
  8186fc:	10800003 	ldbu	r2,0(r2)
  818700:	10803fcc 	andi	r2,r2,255
  818704:	1080201c 	xori	r2,r2,128
  818708:	10bfe004 	addi	r2,r2,-128
  81870c:	10801720 	cmpeqi	r2,r2,92
  818710:	1000101e 	bne	r2,zero,818754 <get_dir_divider_location+0x94>
  818714:	e0bffe17 	ldw	r2,-8(fp)
  818718:	1007883a 	mov	r3,r2
  81871c:	e0bfff17 	ldw	r2,-4(fp)
  818720:	1885883a 	add	r2,r3,r2
  818724:	10800003 	ldbu	r2,0(r2)
  818728:	10803fcc 	andi	r2,r2,255
  81872c:	1080201c 	xori	r2,r2,128
  818730:	10bfe004 	addi	r2,r2,-128
  818734:	10800be0 	cmpeqi	r2,r2,47
  818738:	1000061e 	bne	r2,zero,818754 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  81873c:	e0bffe17 	ldw	r2,-8(fp)
  818740:	10800044 	addi	r2,r2,1
  818744:	e0bffe15 	stw	r2,-8(fp)
  818748:	e0fffe17 	ldw	r3,-8(fp)
  81874c:	e0bffd17 	ldw	r2,-12(fp)
  818750:	18bfe616 	blt	r3,r2,8186ec <get_dir_divider_location+0x2c>
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
  818754:	e0fffe17 	ldw	r3,-8(fp)
  818758:	e0bffd17 	ldw	r2,-12(fp)
  81875c:	1880021e 	bne	r3,r2,818768 <get_dir_divider_location+0xa8>
		index = -1;
  818760:	00bfffc4 	movi	r2,-1
  818764:	e0bffe15 	stw	r2,-8(fp)
	}

	return index;
  818768:	e0bffe17 	ldw	r2,-8(fp)
}
  81876c:	e037883a 	mov	sp,fp
  818770:	dfc00117 	ldw	ra,4(sp)
  818774:	df000017 	ldw	fp,0(sp)
  818778:	dec00204 	addi	sp,sp,8
  81877c:	f800283a 	ret

00818780 <match_file_record_to_name_ext>:

bool match_file_record_to_name_ext(t_file_record *file_record, char *name,
		char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
  818780:	defff604 	addi	sp,sp,-40
  818784:	df000915 	stw	fp,36(sp)
  818788:	df000904 	addi	fp,sp,36
  81878c:	e13ff915 	stw	r4,-28(fp)
  818790:	e17ffa15 	stw	r5,-24(fp)
  818794:	e1bffb15 	stw	r6,-20(fp)
	bool match = true;
  818798:	00800044 	movi	r2,1
  81879c:	e0bff815 	stw	r2,-32(fp)
	int index;

	for (index = 0; index < 8; index++) {
  8187a0:	e03ff715 	stw	zero,-36(fp)
  8187a4:	00005006 	br	8188e8 <match_file_record_to_name_ext+0x168>
		if (CHAR_TO_UPPER(file_record->name[index])
  8187a8:	e0fff717 	ldw	r3,-36(fp)
  8187ac:	e0bff917 	ldw	r2,-28(fp)
  8187b0:	10c5883a 	add	r2,r2,r3
  8187b4:	10800003 	ldbu	r2,0(r2)
  8187b8:	10803fcc 	andi	r2,r2,255
  8187bc:	10801870 	cmpltui	r2,r2,97
  8187c0:	1000111e 	bne	r2,zero,818808 <match_file_record_to_name_ext+0x88>
  8187c4:	e0fff717 	ldw	r3,-36(fp)
  8187c8:	e0bff917 	ldw	r2,-28(fp)
  8187cc:	10c5883a 	add	r2,r2,r3
  8187d0:	10800003 	ldbu	r2,0(r2)
  8187d4:	10803fcc 	andi	r2,r2,255
  8187d8:	10801ee8 	cmpgeui	r2,r2,123
  8187dc:	10000a1e 	bne	r2,zero,818808 <match_file_record_to_name_ext+0x88>
  8187e0:	e0fff717 	ldw	r3,-36(fp)
  8187e4:	e0bff917 	ldw	r2,-28(fp)
  8187e8:	10c5883a 	add	r2,r2,r3
  8187ec:	10800003 	ldbu	r2,0(r2)
  8187f0:	10bff804 	addi	r2,r2,-32
  8187f4:	10803fcc 	andi	r2,r2,255
  8187f8:	1080201c 	xori	r2,r2,128
  8187fc:	10bfe004 	addi	r2,r2,-128
  818800:	e0bfff15 	stw	r2,-4(fp)
  818804:	00000806 	br	818828 <match_file_record_to_name_ext+0xa8>
  818808:	e0fff717 	ldw	r3,-36(fp)
  81880c:	e0bff917 	ldw	r2,-28(fp)
  818810:	10c5883a 	add	r2,r2,r3
  818814:	10800003 	ldbu	r2,0(r2)
  818818:	10803fcc 	andi	r2,r2,255
  81881c:	1080201c 	xori	r2,r2,128
  818820:	10bfe004 	addi	r2,r2,-128
  818824:	e0bfff15 	stw	r2,-4(fp)
  818828:	e0bff717 	ldw	r2,-36(fp)
  81882c:	1007883a 	mov	r3,r2
  818830:	e0bffa17 	ldw	r2,-24(fp)
  818834:	1885883a 	add	r2,r3,r2
  818838:	10800003 	ldbu	r2,0(r2)
  81883c:	10803fcc 	andi	r2,r2,255
  818840:	1080201c 	xori	r2,r2,128
  818844:	10bfe004 	addi	r2,r2,-128
  818848:	10801850 	cmplti	r2,r2,97
  81884c:	1000151e 	bne	r2,zero,8188a4 <match_file_record_to_name_ext+0x124>
  818850:	e0bff717 	ldw	r2,-36(fp)
  818854:	1007883a 	mov	r3,r2
  818858:	e0bffa17 	ldw	r2,-24(fp)
  81885c:	1885883a 	add	r2,r3,r2
  818860:	10800003 	ldbu	r2,0(r2)
  818864:	10803fcc 	andi	r2,r2,255
  818868:	1080201c 	xori	r2,r2,128
  81886c:	10bfe004 	addi	r2,r2,-128
  818870:	10801ec8 	cmpgei	r2,r2,123
  818874:	10000b1e 	bne	r2,zero,8188a4 <match_file_record_to_name_ext+0x124>
  818878:	e0bff717 	ldw	r2,-36(fp)
  81887c:	1007883a 	mov	r3,r2
  818880:	e0bffa17 	ldw	r2,-24(fp)
  818884:	1885883a 	add	r2,r3,r2
  818888:	10800003 	ldbu	r2,0(r2)
  81888c:	10bff804 	addi	r2,r2,-32
  818890:	10803fcc 	andi	r2,r2,255
  818894:	1080201c 	xori	r2,r2,128
  818898:	10bfe004 	addi	r2,r2,-128
  81889c:	e0bffe15 	stw	r2,-8(fp)
  8188a0:	00000906 	br	8188c8 <match_file_record_to_name_ext+0x148>
  8188a4:	e0bff717 	ldw	r2,-36(fp)
  8188a8:	1007883a 	mov	r3,r2
  8188ac:	e0bffa17 	ldw	r2,-24(fp)
  8188b0:	1885883a 	add	r2,r3,r2
  8188b4:	10800003 	ldbu	r2,0(r2)
  8188b8:	10803fcc 	andi	r2,r2,255
  8188bc:	1080201c 	xori	r2,r2,128
  8188c0:	10bfe004 	addi	r2,r2,-128
  8188c4:	e0bffe15 	stw	r2,-8(fp)
  8188c8:	e0bfff17 	ldw	r2,-4(fp)
  8188cc:	e0fffe17 	ldw	r3,-8(fp)
  8188d0:	10c00226 	beq	r2,r3,8188dc <match_file_record_to_name_ext+0x15c>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
  8188d4:	e03ff815 	stw	zero,-32(fp)
			break;
  8188d8:	00000606 	br	8188f4 <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
  8188dc:	e0bff717 	ldw	r2,-36(fp)
  8188e0:	10800044 	addi	r2,r2,1
  8188e4:	e0bff715 	stw	r2,-36(fp)
  8188e8:	e0bff717 	ldw	r2,-36(fp)
  8188ec:	10800210 	cmplti	r2,r2,8
  8188f0:	103fad1e 	bne	r2,zero,8187a8 <match_file_record_to_name_ext+0x28>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
  8188f4:	e03ff715 	stw	zero,-36(fp)
  8188f8:	00005406 	br	818a4c <match_file_record_to_name_ext+0x2cc>
		if (CHAR_TO_UPPER(file_record->extension[index])
  8188fc:	e0fff717 	ldw	r3,-36(fp)
  818900:	e0bff917 	ldw	r2,-28(fp)
  818904:	1885883a 	add	r2,r3,r2
  818908:	10800204 	addi	r2,r2,8
  81890c:	10800003 	ldbu	r2,0(r2)
  818910:	10803fcc 	andi	r2,r2,255
  818914:	10801870 	cmpltui	r2,r2,97
  818918:	1000131e 	bne	r2,zero,818968 <match_file_record_to_name_ext+0x1e8>
  81891c:	e0fff717 	ldw	r3,-36(fp)
  818920:	e0bff917 	ldw	r2,-28(fp)
  818924:	1885883a 	add	r2,r3,r2
  818928:	10800204 	addi	r2,r2,8
  81892c:	10800003 	ldbu	r2,0(r2)
  818930:	10803fcc 	andi	r2,r2,255
  818934:	10801ee8 	cmpgeui	r2,r2,123
  818938:	10000b1e 	bne	r2,zero,818968 <match_file_record_to_name_ext+0x1e8>
  81893c:	e0fff717 	ldw	r3,-36(fp)
  818940:	e0bff917 	ldw	r2,-28(fp)
  818944:	1885883a 	add	r2,r3,r2
  818948:	10800204 	addi	r2,r2,8
  81894c:	10800003 	ldbu	r2,0(r2)
  818950:	10bff804 	addi	r2,r2,-32
  818954:	10803fcc 	andi	r2,r2,255
  818958:	1080201c 	xori	r2,r2,128
  81895c:	10bfe004 	addi	r2,r2,-128
  818960:	e0bffd15 	stw	r2,-12(fp)
  818964:	00000906 	br	81898c <match_file_record_to_name_ext+0x20c>
  818968:	e0fff717 	ldw	r3,-36(fp)
  81896c:	e0bff917 	ldw	r2,-28(fp)
  818970:	1885883a 	add	r2,r3,r2
  818974:	10800204 	addi	r2,r2,8
  818978:	10800003 	ldbu	r2,0(r2)
  81897c:	10803fcc 	andi	r2,r2,255
  818980:	1080201c 	xori	r2,r2,128
  818984:	10bfe004 	addi	r2,r2,-128
  818988:	e0bffd15 	stw	r2,-12(fp)
  81898c:	e0bff717 	ldw	r2,-36(fp)
  818990:	1007883a 	mov	r3,r2
  818994:	e0bffb17 	ldw	r2,-20(fp)
  818998:	1885883a 	add	r2,r3,r2
  81899c:	10800003 	ldbu	r2,0(r2)
  8189a0:	10803fcc 	andi	r2,r2,255
  8189a4:	1080201c 	xori	r2,r2,128
  8189a8:	10bfe004 	addi	r2,r2,-128
  8189ac:	10801850 	cmplti	r2,r2,97
  8189b0:	1000151e 	bne	r2,zero,818a08 <match_file_record_to_name_ext+0x288>
  8189b4:	e0bff717 	ldw	r2,-36(fp)
  8189b8:	1007883a 	mov	r3,r2
  8189bc:	e0bffb17 	ldw	r2,-20(fp)
  8189c0:	1885883a 	add	r2,r3,r2
  8189c4:	10800003 	ldbu	r2,0(r2)
  8189c8:	10803fcc 	andi	r2,r2,255
  8189cc:	1080201c 	xori	r2,r2,128
  8189d0:	10bfe004 	addi	r2,r2,-128
  8189d4:	10801ec8 	cmpgei	r2,r2,123
  8189d8:	10000b1e 	bne	r2,zero,818a08 <match_file_record_to_name_ext+0x288>
  8189dc:	e0bff717 	ldw	r2,-36(fp)
  8189e0:	1007883a 	mov	r3,r2
  8189e4:	e0bffb17 	ldw	r2,-20(fp)
  8189e8:	1885883a 	add	r2,r3,r2
  8189ec:	10800003 	ldbu	r2,0(r2)
  8189f0:	10bff804 	addi	r2,r2,-32
  8189f4:	10803fcc 	andi	r2,r2,255
  8189f8:	1080201c 	xori	r2,r2,128
  8189fc:	10bfe004 	addi	r2,r2,-128
  818a00:	e0bffc15 	stw	r2,-16(fp)
  818a04:	00000906 	br	818a2c <match_file_record_to_name_ext+0x2ac>
  818a08:	e0bff717 	ldw	r2,-36(fp)
  818a0c:	1007883a 	mov	r3,r2
  818a10:	e0bffb17 	ldw	r2,-20(fp)
  818a14:	1885883a 	add	r2,r3,r2
  818a18:	10800003 	ldbu	r2,0(r2)
  818a1c:	10803fcc 	andi	r2,r2,255
  818a20:	1080201c 	xori	r2,r2,128
  818a24:	10bfe004 	addi	r2,r2,-128
  818a28:	e0bffc15 	stw	r2,-16(fp)
  818a2c:	e0bffd17 	ldw	r2,-12(fp)
  818a30:	e0fffc17 	ldw	r3,-16(fp)
  818a34:	10c00226 	beq	r2,r3,818a40 <match_file_record_to_name_ext+0x2c0>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
  818a38:	e03ff815 	stw	zero,-32(fp)
			break;
  818a3c:	00000606 	br	818a58 <match_file_record_to_name_ext+0x2d8>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
  818a40:	e0bff717 	ldw	r2,-36(fp)
  818a44:	10800044 	addi	r2,r2,1
  818a48:	e0bff715 	stw	r2,-36(fp)
  818a4c:	e0bff717 	ldw	r2,-36(fp)
  818a50:	108000d0 	cmplti	r2,r2,3
  818a54:	103fa91e 	bne	r2,zero,8188fc <match_file_record_to_name_ext+0x17c>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
			break;
		}
	}
	return match;
  818a58:	e0bff817 	ldw	r2,-32(fp)
}
  818a5c:	e037883a 	mov	sp,fp
  818a60:	df000017 	ldw	fp,0(sp)
  818a64:	dec00104 	addi	sp,sp,4
  818a68:	f800283a 	ret

00818a6c <get_home_directory_cluster_for_file>:

bool get_home_directory_cluster_for_file(char *file_name,
		int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
  818a6c:	deffe604 	addi	sp,sp,-104
  818a70:	dfc01915 	stw	ra,100(sp)
  818a74:	df001815 	stw	fp,96(sp)
  818a78:	df001804 	addi	fp,sp,96
  818a7c:	e13ffc15 	stw	r4,-16(fp)
  818a80:	e17ffd15 	stw	r5,-12(fp)
  818a84:	e1bffe15 	stw	r6,-8(fp)
	bool result = false;
  818a88:	e03ff715 	stw	zero,-36(fp)
	int home_dir_cluster = 0;
  818a8c:	e03ff615 	stw	zero,-40(fp)
	int location, index;
	int start_location = 0;
  818a90:	e03ff315 	stw	zero,-52(fp)

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
  818a94:	e13ffc17 	ldw	r4,-16(fp)
  818a98:	08186c00 	call	8186c0 <get_dir_divider_location>
  818a9c:	e0bff515 	stw	r2,-44(fp)
	while (location > 0) {
  818aa0:	00012206 	br	818f2c <get_home_directory_cluster_for_file+0x4c0>
		char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  818aa4:	00800804 	movi	r2,32
  818aa8:	e0bff805 	stb	r2,-32(fp)
  818aac:	00800804 	movi	r2,32
  818ab0:	e0bff845 	stb	r2,-31(fp)
  818ab4:	00800804 	movi	r2,32
  818ab8:	e0bff885 	stb	r2,-30(fp)
  818abc:	00800804 	movi	r2,32
  818ac0:	e0bff8c5 	stb	r2,-29(fp)
  818ac4:	00800804 	movi	r2,32
  818ac8:	e0bff905 	stb	r2,-28(fp)
  818acc:	00800804 	movi	r2,32
  818ad0:	e0bff945 	stb	r2,-27(fp)
  818ad4:	00800804 	movi	r2,32
  818ad8:	e0bff985 	stb	r2,-26(fp)
  818adc:	00800804 	movi	r2,32
  818ae0:	e0bff9c5 	stb	r2,-25(fp)
		char extension[3] = { ' ', ' ', ' ' };
  818ae4:	00800804 	movi	r2,32
  818ae8:	e0bffa05 	stb	r2,-24(fp)
  818aec:	00800804 	movi	r2,32
  818af0:	e0bffa45 	stb	r2,-23(fp)
  818af4:	00800804 	movi	r2,32
  818af8:	e0bffa85 	stb	r2,-22(fp)
		int ext_index = -1;
  818afc:	00bfffc4 	movi	r2,-1
  818b00:	e0bff215 	stw	r2,-56(fp)
		int new_cluster = home_dir_cluster;
  818b04:	e0bff617 	ldw	r2,-40(fp)
  818b08:	e0bff115 	stw	r2,-60(fp)

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
  818b0c:	e03ff415 	stw	zero,-48(fp)
  818b10:	00002e06 	br	818bcc <get_home_directory_cluster_for_file+0x160>
			if (file_name[index + start_location] == '.') {
  818b14:	e0fff417 	ldw	r3,-48(fp)
  818b18:	e0bff317 	ldw	r2,-52(fp)
  818b1c:	1885883a 	add	r2,r3,r2
  818b20:	1007883a 	mov	r3,r2
  818b24:	e0bffc17 	ldw	r2,-16(fp)
  818b28:	1885883a 	add	r2,r3,r2
  818b2c:	10800003 	ldbu	r2,0(r2)
  818b30:	10803fcc 	andi	r2,r2,255
  818b34:	1080201c 	xori	r2,r2,128
  818b38:	10bfe004 	addi	r2,r2,-128
  818b3c:	10800b98 	cmpnei	r2,r2,46
  818b40:	1000031e 	bne	r2,zero,818b50 <get_home_directory_cluster_for_file+0xe4>
				ext_index = index;
  818b44:	e0bff417 	ldw	r2,-48(fp)
  818b48:	e0bff215 	stw	r2,-56(fp)
  818b4c:	00001c06 	br	818bc0 <get_home_directory_cluster_for_file+0x154>
			} else if (ext_index < 0) {
  818b50:	e0bff217 	ldw	r2,-56(fp)
  818b54:	1004403a 	cmpge	r2,r2,zero
  818b58:	10000c1e 	bne	r2,zero,818b8c <get_home_directory_cluster_for_file+0x120>
				name[index] = file_name[index + start_location];
  818b5c:	e13ff417 	ldw	r4,-48(fp)
  818b60:	e0fff417 	ldw	r3,-48(fp)
  818b64:	e0bff317 	ldw	r2,-52(fp)
  818b68:	1885883a 	add	r2,r3,r2
  818b6c:	1007883a 	mov	r3,r2
  818b70:	e0bffc17 	ldw	r2,-16(fp)
  818b74:	1885883a 	add	r2,r3,r2
  818b78:	10c00003 	ldbu	r3,0(r2)
  818b7c:	e0bff804 	addi	r2,fp,-32
  818b80:	1105883a 	add	r2,r2,r4
  818b84:	10c00005 	stb	r3,0(r2)
  818b88:	00000d06 	br	818bc0 <get_home_directory_cluster_for_file+0x154>
			} else {
				extension[index - ext_index]
  818b8c:	e0fff417 	ldw	r3,-48(fp)
  818b90:	e0bff217 	ldw	r2,-56(fp)
  818b94:	1889c83a 	sub	r4,r3,r2
  818b98:	e0fff417 	ldw	r3,-48(fp)
  818b9c:	e0bff317 	ldw	r2,-52(fp)
  818ba0:	1885883a 	add	r2,r3,r2
  818ba4:	1007883a 	mov	r3,r2
  818ba8:	e0bffc17 	ldw	r2,-16(fp)
  818bac:	1885883a 	add	r2,r3,r2
  818bb0:	10c00003 	ldbu	r3,0(r2)
  818bb4:	e0bffa04 	addi	r2,fp,-24
  818bb8:	1105883a 	add	r2,r2,r4
  818bbc:	10c00005 	stb	r3,0(r2)
		char extension[3] = { ' ', ' ', ' ' };
		int ext_index = -1;
		int new_cluster = home_dir_cluster;

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
  818bc0:	e0bff417 	ldw	r2,-48(fp)
  818bc4:	10800044 	addi	r2,r2,1
  818bc8:	e0bff415 	stw	r2,-48(fp)
  818bcc:	e0fff417 	ldw	r3,-48(fp)
  818bd0:	e0bff517 	ldw	r2,-44(fp)
  818bd4:	18bfcf16 	blt	r3,r2,818b14 <get_home_directory_cluster_for_file+0xa8>
				extension[index - ext_index]
						= file_name[index + start_location];
			}
		}

		if (home_dir_cluster == 0) {
  818bd8:	e0bff617 	ldw	r2,-40(fp)
  818bdc:	1004c03a 	cmpne	r2,r2,zero
  818be0:	1000551e 	bne	r2,zero,818d38 <get_home_directory_cluster_for_file+0x2cc>
			/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
  818be4:	008020f4 	movhi	r2,131
  818be8:	10ab4804 	addi	r2,r2,-21216
  818bec:	1080050b 	ldhu	r2,20(r2)
  818bf0:	10bfffcc 	andi	r2,r2,65535
  818bf4:	1008917a 	slli	r4,r2,5
  818bf8:	008020f4 	movhi	r2,131
  818bfc:	10ab4804 	addi	r2,r2,-21216
  818c00:	1080030b 	ldhu	r2,12(r2)
  818c04:	117fffcc 	andi	r5,r2,65535
  818c08:	080977c0 	call	80977c <__divsi3>
  818c0c:	e0bff015 	stw	r2,-64(fp)
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  818c10:	e03fef15 	stw	zero,-68(fp)
  818c14:	00003806 	br	818cf8 <get_home_directory_cluster_for_file+0x28c>
				if (Read_Sector_Data(sector_index
  818c18:	008020f4 	movhi	r2,131
  818c1c:	10ab4804 	addi	r2,r2,-21216
  818c20:	10c01317 	ldw	r3,76(r2)
  818c24:	e0bfef17 	ldw	r2,-68(fp)
  818c28:	1885883a 	add	r2,r3,r2
  818c2c:	1009883a 	mov	r4,r2
  818c30:	d1675517 	ldw	r5,-25260(gp)
  818c34:	08172900 	call	817290 <Read_Sector_Data>
  818c38:	1005003a 	cmpeq	r2,r2,zero
  818c3c:	1000311e 	bne	r2,zero,818d04 <get_home_directory_cluster_for_file+0x298>
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  818c40:	e03fee15 	stw	zero,-72(fp)
  818c44:	00002306 	br	818cd4 <get_home_directory_cluster_for_file+0x268>

						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
  818c48:	e0bfee17 	ldw	r2,-72(fp)
  818c4c:	1008917a 	slli	r4,r2,5
  818c50:	e1ffef17 	ldw	r7,-68(fp)
  818c54:	e17ffe17 	ldw	r5,-8(fp)
  818c58:	000d883a 	mov	r6,zero
  818c5c:	08176d80 	call	8176d8 <Read_File_Record_At_Offset>
								file_record, 0, sector_index);
						if ((file_record->name[0] != 0xe5)
  818c60:	e0bffe17 	ldw	r2,-8(fp)
  818c64:	10800003 	ldbu	r2,0(r2)
  818c68:	10803fcc 	andi	r2,r2,255
  818c6c:	10803960 	cmpeqi	r2,r2,229
  818c70:	1000151e 	bne	r2,zero,818cc8 <get_home_directory_cluster_for_file+0x25c>
  818c74:	e0bffe17 	ldw	r2,-8(fp)
  818c78:	10800003 	ldbu	r2,0(r2)
  818c7c:	10803fcc 	andi	r2,r2,255
  818c80:	1005003a 	cmpeq	r2,r2,zero
  818c84:	1000101e 	bne	r2,zero,818cc8 <get_home_directory_cluster_for_file+0x25c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
  818c88:	e17ff804 	addi	r5,fp,-32
  818c8c:	e1bffa04 	addi	r6,fp,-24
  818c90:	e13ffe17 	ldw	r4,-8(fp)
  818c94:	08187800 	call	818780 <match_file_record_to_name_ext>
  818c98:	e0bfed15 	stw	r2,-76(fp)
							if (match) {
  818c9c:	e0bfed17 	ldw	r2,-76(fp)
  818ca0:	1005003a 	cmpeq	r2,r2,zero
  818ca4:	1000081e 	bne	r2,zero,818cc8 <get_home_directory_cluster_for_file+0x25c>
								new_cluster = file_record->start_cluster_index;
  818ca8:	e0bffe17 	ldw	r2,-8(fp)
  818cac:	1080058b 	ldhu	r2,22(r2)
  818cb0:	10bfffcc 	andi	r2,r2,65535
  818cb4:	e0bff115 	stw	r2,-60(fp)
								file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
  818cb8:	e0fffe17 	ldw	r3,-8(fp)
  818cbc:	00800044 	movi	r2,1
  818cc0:	18800a15 	stw	r2,40(r3)
								break;
  818cc4:	00000606 	br	818ce0 <get_home_directory_cluster_for_file+0x274>
				if (Read_Sector_Data(sector_index
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  818cc8:	e0bfee17 	ldw	r2,-72(fp)
  818ccc:	10800044 	addi	r2,r2,1
  818cd0:	e0bfee15 	stw	r2,-72(fp)
  818cd4:	e0bfee17 	ldw	r2,-72(fp)
  818cd8:	10800410 	cmplti	r2,r2,16
  818cdc:	103fda1e 	bne	r2,zero,818c48 <get_home_directory_cluster_for_file+0x1dc>
						}
					}
				} else {
					break;
				}
				if (new_cluster != home_dir_cluster) {
  818ce0:	e0fff117 	ldw	r3,-60(fp)
  818ce4:	e0bff617 	ldw	r2,-40(fp)
  818ce8:	1880061e 	bne	r3,r2,818d04 <get_home_directory_cluster_for_file+0x298>
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  818cec:	e0bfef17 	ldw	r2,-68(fp)
  818cf0:	10800044 	addi	r2,r2,1
  818cf4:	e0bfef15 	stw	r2,-68(fp)
  818cf8:	e0ffef17 	ldw	r3,-68(fp)
  818cfc:	e0bff017 	ldw	r2,-64(fp)
  818d00:	18bfc516 	blt	r3,r2,818c18 <get_home_directory_cluster_for_file+0x1ac>
				}
				if (new_cluster != home_dir_cluster) {
					break;
				}
			}
			if (new_cluster != home_dir_cluster) {
  818d04:	e0fff117 	ldw	r3,-60(fp)
  818d08:	e0bff617 	ldw	r2,-40(fp)
  818d0c:	18800826 	beq	r3,r2,818d30 <get_home_directory_cluster_for_file+0x2c4>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
  818d10:	e0bff117 	ldw	r2,-60(fp)
  818d14:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
  818d18:	e0fff317 	ldw	r3,-52(fp)
  818d1c:	e0bff517 	ldw	r2,-44(fp)
  818d20:	1885883a 	add	r2,r3,r2
  818d24:	10800044 	addi	r2,r2,1
  818d28:	e0bff315 	stw	r2,-52(fp)
  818d2c:	00007406 	br	818f00 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
  818d30:	e03fff15 	stw	zero,-4(fp)
  818d34:	00008c06 	br	818f68 <get_home_directory_cluster_for_file+0x4fc>
			}
		} else {
			// This is a subdirectory that can have any number of elements. So scan through it as though it was a file
			// and see if you can find the directory of interest.
			int cluster = home_dir_cluster;
  818d38:	e0bff617 	ldw	r2,-40(fp)
  818d3c:	e0bfec15 	stw	r2,-80(fp)

			do {
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
  818d40:	e0bfec17 	ldw	r2,-80(fp)
  818d44:	10ffff84 	addi	r3,r2,-2
  818d48:	008020f4 	movhi	r2,131
  818d4c:	10ab4804 	addi	r2,r2,-21216
  818d50:	10800383 	ldbu	r2,14(r2)
  818d54:	10803fcc 	andi	r2,r2,255
  818d58:	1885383a 	mul	r2,r3,r2
  818d5c:	1007883a 	mov	r3,r2
  818d60:	008020f4 	movhi	r2,131
  818d64:	10ab4804 	addi	r2,r2,-21216
  818d68:	10801417 	ldw	r2,80(r2)
  818d6c:	1885883a 	add	r2,r3,r2
  818d70:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index;

				for (sector_index = 0; sector_index
  818d74:	e03fea15 	stw	zero,-88(fp)
  818d78:	00003206 	br	818e44 <get_home_directory_cluster_for_file+0x3d8>
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
  818d7c:	e0ffea17 	ldw	r3,-88(fp)
  818d80:	e0bfeb17 	ldw	r2,-84(fp)
  818d84:	1889883a 	add	r4,r3,r2
  818d88:	d1675517 	ldw	r5,-25260(gp)
  818d8c:	08172900 	call	817290 <Read_Sector_Data>
  818d90:	1005003a 	cmpeq	r2,r2,zero
  818d94:	1000311e 	bne	r2,zero,818e5c <get_home_directory_cluster_for_file+0x3f0>
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
  818d98:	e03fe915 	stw	zero,-92(fp)
  818d9c:	00002006 	br	818e20 <get_home_directory_cluster_for_file+0x3b4>
							// Read file record.
							Read_File_Record_At_Offset(file_counter * 32,
  818da0:	e0bfe917 	ldw	r2,-92(fp)
  818da4:	1008917a 	slli	r4,r2,5
  818da8:	e1bfec17 	ldw	r6,-80(fp)
  818dac:	e1ffea17 	ldw	r7,-88(fp)
  818db0:	e17ffe17 	ldw	r5,-8(fp)
  818db4:	08176d80 	call	8176d8 <Read_File_Record_At_Offset>
									file_record, cluster, sector_index);
							if ((file_record->name[0] != 0xe5)
  818db8:	e0bffe17 	ldw	r2,-8(fp)
  818dbc:	10800003 	ldbu	r2,0(r2)
  818dc0:	10803fcc 	andi	r2,r2,255
  818dc4:	10803960 	cmpeqi	r2,r2,229
  818dc8:	1000121e 	bne	r2,zero,818e14 <get_home_directory_cluster_for_file+0x3a8>
  818dcc:	e0bffe17 	ldw	r2,-8(fp)
  818dd0:	10800003 	ldbu	r2,0(r2)
  818dd4:	10803fcc 	andi	r2,r2,255
  818dd8:	1005003a 	cmpeq	r2,r2,zero
  818ddc:	10000d1e 	bne	r2,zero,818e14 <get_home_directory_cluster_for_file+0x3a8>
									&& (file_record->name[0] != 0x00)) {
								bool match = match_file_record_to_name_ext(
										file_record, name, extension);
  818de0:	e17ff804 	addi	r5,fp,-32
  818de4:	e1bffa04 	addi	r6,fp,-24
  818de8:	e13ffe17 	ldw	r4,-8(fp)
  818dec:	08187800 	call	818780 <match_file_record_to_name_ext>
  818df0:	e0bfe815 	stw	r2,-96(fp)
								if (match) {
  818df4:	e0bfe817 	ldw	r2,-96(fp)
  818df8:	1005003a 	cmpeq	r2,r2,zero
  818dfc:	1000051e 	bne	r2,zero,818e14 <get_home_directory_cluster_for_file+0x3a8>
									new_cluster
  818e00:	e0bffe17 	ldw	r2,-8(fp)
  818e04:	1080058b 	ldhu	r2,22(r2)
  818e08:	10bfffcc 	andi	r2,r2,65535
  818e0c:	e0bff115 	stw	r2,-60(fp)
											= file_record->start_cluster_index;
									break;
  818e10:	00000606 	br	818e2c <get_home_directory_cluster_for_file+0x3c0>
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
  818e14:	e0bfe917 	ldw	r2,-92(fp)
  818e18:	10800044 	addi	r2,r2,1
  818e1c:	e0bfe915 	stw	r2,-92(fp)
  818e20:	e0bfe917 	ldw	r2,-92(fp)
  818e24:	10800410 	cmplti	r2,r2,16
  818e28:	103fdd1e 	bne	r2,zero,818da0 <get_home_directory_cluster_for_file+0x334>
							}
						}
					} else {
						break;
					}
					if (new_cluster != home_dir_cluster) {
  818e2c:	e0fff117 	ldw	r3,-60(fp)
  818e30:	e0bff617 	ldw	r2,-40(fp)
  818e34:	1880091e 	bne	r3,r2,818e5c <get_home_directory_cluster_for_file+0x3f0>
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
						< boot_sector_data.sectors_per_cluster; sector_index++) {
  818e38:	e0bfea17 	ldw	r2,-88(fp)
  818e3c:	10800044 	addi	r2,r2,1
  818e40:	e0bfea15 	stw	r2,-88(fp)
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
  818e44:	008020f4 	movhi	r2,131
  818e48:	10ab4804 	addi	r2,r2,-21216
  818e4c:	10800383 	ldbu	r2,14(r2)
  818e50:	10c03fcc 	andi	r3,r2,255
  818e54:	e0bfea17 	ldw	r2,-88(fp)
  818e58:	10ffc816 	blt	r2,r3,818d7c <get_home_directory_cluster_for_file+0x310>
						break;
					}
				}
				// If this is the end of the cluster and the directory has not been found, then see if there is another cluster
				// that holds data for the current directory.
				if (new_cluster == home_dir_cluster) {
  818e5c:	e0fff117 	ldw	r3,-60(fp)
  818e60:	e0bff617 	ldw	r2,-40(fp)
  818e64:	1880131e 	bne	r3,r2,818eb4 <get_home_directory_cluster_for_file+0x448>
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster)) {
  818e68:	e13ff117 	ldw	r4,-60(fp)
  818e6c:	e17ffb04 	addi	r5,fp,-20
  818e70:	081738c0 	call	81738c <get_cluster_flag>
  818e74:	1005003a 	cmpeq	r2,r2,zero
  818e78:	10000c1e 	bne	r2,zero,818eac <get_home_directory_cluster_for_file+0x440>
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
  818e7c:	e0bffb0b 	ldhu	r2,-20(fp)
  818e80:	10bfffcc 	andi	r2,r2,65535
  818e84:	10fffe0c 	andi	r3,r2,65528
  818e88:	00bffe14 	movui	r2,65528
  818e8c:	1880021e 	bne	r3,r2,818e98 <get_home_directory_cluster_for_file+0x42c>
							return false;
  818e90:	e03fff15 	stw	zero,-4(fp)
  818e94:	00003406 	br	818f68 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
  818e98:	e0bffb0b 	ldhu	r2,-20(fp)
  818e9c:	10bfffcc 	andi	r2,r2,65535
  818ea0:	10bffe0c 	andi	r2,r2,65528
  818ea4:	e0bff115 	stw	r2,-60(fp)
  818ea8:	00000206 	br	818eb4 <get_home_directory_cluster_for_file+0x448>
					} else {
						// Directory path is invalid.                 
						return false;
  818eac:	e03fff15 	stw	zero,-4(fp)
  818eb0:	00002d06 	br	818f68 <get_home_directory_cluster_for_file+0x4fc>
					}
				}
			} while ((cluster < 0x0000fff8)
					&& (new_cluster == home_dir_cluster));
  818eb4:	e0ffec17 	ldw	r3,-80(fp)
  818eb8:	00bffdd4 	movui	r2,65527
  818ebc:	10c00316 	blt	r2,r3,818ecc <get_home_directory_cluster_for_file+0x460>
  818ec0:	e0fff117 	ldw	r3,-60(fp)
  818ec4:	e0bff617 	ldw	r2,-40(fp)
  818ec8:	18bf9d26 	beq	r3,r2,818d40 <get_home_directory_cluster_for_file+0x2d4>
			if (new_cluster != home_dir_cluster) {
  818ecc:	e0fff117 	ldw	r3,-60(fp)
  818ed0:	e0bff617 	ldw	r2,-40(fp)
  818ed4:	18800826 	beq	r3,r2,818ef8 <get_home_directory_cluster_for_file+0x48c>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
  818ed8:	e0bff117 	ldw	r2,-60(fp)
  818edc:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
  818ee0:	e0fff317 	ldw	r3,-52(fp)
  818ee4:	e0bff517 	ldw	r2,-44(fp)
  818ee8:	1885883a 	add	r2,r3,r2
  818eec:	10800044 	addi	r2,r2,1
  818ef0:	e0bff315 	stw	r2,-52(fp)
  818ef4:	00000206 	br	818f00 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
  818ef8:	e03fff15 	stw	zero,-4(fp)
  818efc:	00001a06 	br	818f68 <get_home_directory_cluster_for_file+0x4fc>
			}
		}
		location = get_dir_divider_location(&(file_name[start_location]));
  818f00:	e0bff317 	ldw	r2,-52(fp)
  818f04:	1007883a 	mov	r3,r2
  818f08:	e0bffc17 	ldw	r2,-16(fp)
  818f0c:	1889883a 	add	r4,r3,r2
  818f10:	08186c00 	call	8186c0 <get_dir_divider_location>
  818f14:	e0bff515 	stw	r2,-44(fp)
		if (location < 0) {
  818f18:	e0bff517 	ldw	r2,-44(fp)
  818f1c:	1004403a 	cmpge	r2,r2,zero
  818f20:	1000021e 	bne	r2,zero,818f2c <get_home_directory_cluster_for_file+0x4c0>
			// Directory has been located.
			result = true;
  818f24:	00800044 	movi	r2,1
  818f28:	e0bff715 	stw	r2,-36(fp)
	int location, index;
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
  818f2c:	e0bff517 	ldw	r2,-44(fp)
  818f30:	10800048 	cmpgei	r2,r2,1
  818f34:	103edb1e 	bne	r2,zero,818aa4 <get_home_directory_cluster_for_file+0x38>
			// Directory has been located.
			result = true;
		}
	}

	*home_directory_cluster = home_dir_cluster;
  818f38:	e0fffd17 	ldw	r3,-12(fp)
  818f3c:	e0bff617 	ldw	r2,-40(fp)
  818f40:	18800015 	stw	r2,0(r3)
	if (home_dir_cluster == 0) {
  818f44:	e0bff617 	ldw	r2,-40(fp)
  818f48:	1004c03a 	cmpne	r2,r2,zero
  818f4c:	1000041e 	bne	r2,zero,818f60 <get_home_directory_cluster_for_file+0x4f4>
		file_record->file_record_cluster = 0; // Home directory is the root directory.
  818f50:	e0bffe17 	ldw	r2,-8(fp)
  818f54:	10000a15 	stw	zero,40(r2)
		result = true;
  818f58:	00800044 	movi	r2,1
  818f5c:	e0bff715 	stw	r2,-36(fp)
	}
	return result;
  818f60:	e0bff717 	ldw	r2,-36(fp)
  818f64:	e0bfff15 	stw	r2,-4(fp)
  818f68:	e0bfff17 	ldw	r2,-4(fp)
}
  818f6c:	e037883a 	mov	sp,fp
  818f70:	dfc00117 	ldw	ra,4(sp)
  818f74:	df000017 	ldw	fp,0(sp)
  818f78:	dec00204 	addi	sp,sp,8
  818f7c:	f800283a 	ret

00818f80 <find_file_in_directory>:

bool find_file_in_directory(int directory_start_cluster, char *file_name,
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  818f80:	deffe704 	addi	sp,sp,-100
  818f84:	dfc01815 	stw	ra,96(sp)
  818f88:	df001715 	stw	fp,92(sp)
  818f8c:	df001704 	addi	fp,sp,92
  818f90:	e13ffc15 	stw	r4,-16(fp)
  818f94:	e17ffd15 	stw	r5,-12(fp)
  818f98:	e1bffe15 	stw	r6,-8(fp)
	int location = get_dir_divider_location(file_name);
  818f9c:	e13ffd17 	ldw	r4,-12(fp)
  818fa0:	08186c00 	call	8186c0 <get_dir_divider_location>
  818fa4:	e0bff715 	stw	r2,-36(fp)
	int last_dir_separator = 0;
  818fa8:	e03ff615 	stw	zero,-40(fp)
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  818fac:	00800804 	movi	r2,32
  818fb0:	e0bff805 	stb	r2,-32(fp)
  818fb4:	00800804 	movi	r2,32
  818fb8:	e0bff845 	stb	r2,-31(fp)
  818fbc:	00800804 	movi	r2,32
  818fc0:	e0bff885 	stb	r2,-30(fp)
  818fc4:	00800804 	movi	r2,32
  818fc8:	e0bff8c5 	stb	r2,-29(fp)
  818fcc:	00800804 	movi	r2,32
  818fd0:	e0bff905 	stb	r2,-28(fp)
  818fd4:	00800804 	movi	r2,32
  818fd8:	e0bff945 	stb	r2,-27(fp)
  818fdc:	00800804 	movi	r2,32
  818fe0:	e0bff985 	stb	r2,-26(fp)
  818fe4:	00800804 	movi	r2,32
  818fe8:	e0bff9c5 	stb	r2,-25(fp)
	char extension[3] = { ' ', ' ', ' ' };
  818fec:	00800804 	movi	r2,32
  818ff0:	e0bffa05 	stb	r2,-24(fp)
  818ff4:	00800804 	movi	r2,32
  818ff8:	e0bffa45 	stb	r2,-23(fp)
  818ffc:	00800804 	movi	r2,32
  819000:	e0bffa85 	stb	r2,-22(fp)
	int ext_index = -1;
  819004:	00bfffc4 	movi	r2,-1
  819008:	e0bff515 	stw	r2,-44(fp)
	int cluster = directory_start_cluster;
  81900c:	e0bffc17 	ldw	r2,-16(fp)
  819010:	e0bff415 	stw	r2,-48(fp)
	int index;
	int length = strlen(file_name);
  819014:	e13ffd17 	ldw	r4,-12(fp)
  819018:	080aa480 	call	80aa48 <strlen>
  81901c:	e0bff215 	stw	r2,-56(fp)
	bool result = false;
  819020:	e03ff115 	stw	zero,-60(fp)

	// Skip through all directory separators.
	while (location > 0) {
  819024:	00000b06 	br	819054 <find_file_in_directory+0xd4>
		last_dir_separator = last_dir_separator + location + 1;
  819028:	e0fff617 	ldw	r3,-40(fp)
  81902c:	e0bff717 	ldw	r2,-36(fp)
  819030:	1885883a 	add	r2,r3,r2
  819034:	10800044 	addi	r2,r2,1
  819038:	e0bff615 	stw	r2,-40(fp)
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
  81903c:	e0bff617 	ldw	r2,-40(fp)
  819040:	1007883a 	mov	r3,r2
  819044:	e0bffd17 	ldw	r2,-12(fp)
  819048:	1889883a 	add	r4,r3,r2
  81904c:	08186c00 	call	8186c0 <get_dir_divider_location>
  819050:	e0bff715 	stw	r2,-36(fp)
	int index;
	int length = strlen(file_name);
	bool result = false;

	// Skip through all directory separators.
	while (location > 0) {
  819054:	e0bff717 	ldw	r2,-36(fp)
  819058:	10800048 	cmpgei	r2,r2,1
  81905c:	103ff21e 	bne	r2,zero,819028 <find_file_in_directory+0xa8>
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
  819060:	e0bff617 	ldw	r2,-40(fp)
  819064:	e0bff315 	stw	r2,-52(fp)
  819068:	00002b06 	br	819118 <find_file_in_directory+0x198>
		if (file_name[index] == '.') {
  81906c:	e0bff317 	ldw	r2,-52(fp)
  819070:	1007883a 	mov	r3,r2
  819074:	e0bffd17 	ldw	r2,-12(fp)
  819078:	1885883a 	add	r2,r3,r2
  81907c:	10800003 	ldbu	r2,0(r2)
  819080:	10803fcc 	andi	r2,r2,255
  819084:	1080201c 	xori	r2,r2,128
  819088:	10bfe004 	addi	r2,r2,-128
  81908c:	10800b98 	cmpnei	r2,r2,46
  819090:	1000031e 	bne	r2,zero,8190a0 <find_file_in_directory+0x120>
			ext_index = index;
  819094:	e0bff317 	ldw	r2,-52(fp)
  819098:	e0bff515 	stw	r2,-44(fp)
  81909c:	00001b06 	br	81910c <find_file_in_directory+0x18c>
		} else if (ext_index < 0) {
  8190a0:	e0bff517 	ldw	r2,-44(fp)
  8190a4:	1004403a 	cmpge	r2,r2,zero
  8190a8:	10000c1e 	bne	r2,zero,8190dc <find_file_in_directory+0x15c>
			name[index - last_dir_separator] = file_name[index];
  8190ac:	e0fff317 	ldw	r3,-52(fp)
  8190b0:	e0bff617 	ldw	r2,-40(fp)
  8190b4:	1889c83a 	sub	r4,r3,r2
  8190b8:	e0bff317 	ldw	r2,-52(fp)
  8190bc:	1007883a 	mov	r3,r2
  8190c0:	e0bffd17 	ldw	r2,-12(fp)
  8190c4:	1885883a 	add	r2,r3,r2
  8190c8:	10c00003 	ldbu	r3,0(r2)
  8190cc:	e0bff804 	addi	r2,fp,-32
  8190d0:	1105883a 	add	r2,r2,r4
  8190d4:	10c00005 	stb	r3,0(r2)
  8190d8:	00000c06 	br	81910c <find_file_in_directory+0x18c>
		} else {
			extension[index - ext_index - 1] = file_name[index];
  8190dc:	e0fff317 	ldw	r3,-52(fp)
  8190e0:	e0bff517 	ldw	r2,-44(fp)
  8190e4:	1885c83a 	sub	r2,r3,r2
  8190e8:	113fffc4 	addi	r4,r2,-1
  8190ec:	e0bff317 	ldw	r2,-52(fp)
  8190f0:	1007883a 	mov	r3,r2
  8190f4:	e0bffd17 	ldw	r2,-12(fp)
  8190f8:	1885883a 	add	r2,r3,r2
  8190fc:	10c00003 	ldbu	r3,0(r2)
  819100:	e0bffa04 	addi	r2,fp,-24
  819104:	1105883a 	add	r2,r2,r4
  819108:	10c00005 	stb	r3,0(r2)
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
  81910c:	e0bff317 	ldw	r2,-52(fp)
  819110:	10800044 	addi	r2,r2,1
  819114:	e0bff315 	stw	r2,-52(fp)
  819118:	e0fff317 	ldw	r3,-52(fp)
  81911c:	e0bff217 	ldw	r2,-56(fp)
  819120:	18bfd216 	blt	r3,r2,81906c <find_file_in_directory+0xec>
			extension[index - ext_index - 1] = file_name[index];
		}
	}

	// Look for the file.
	if (directory_start_cluster == 0) {
  819124:	e0bffc17 	ldw	r2,-16(fp)
  819128:	1004c03a 	cmpne	r2,r2,zero
  81912c:	1000441e 	bne	r2,zero,819240 <find_file_in_directory+0x2c0>
		/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
  819130:	008020f4 	movhi	r2,131
  819134:	10ab4804 	addi	r2,r2,-21216
  819138:	1080050b 	ldhu	r2,20(r2)
  81913c:	10bfffcc 	andi	r2,r2,65535
  819140:	1008917a 	slli	r4,r2,5
  819144:	008020f4 	movhi	r2,131
  819148:	10ab4804 	addi	r2,r2,-21216
  81914c:	1080030b 	ldhu	r2,12(r2)
  819150:	117fffcc 	andi	r5,r2,65535
  819154:	080977c0 	call	80977c <__divsi3>
  819158:	e0bff015 	stw	r2,-64(fp)
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  81915c:	e03fef15 	stw	zero,-68(fp)
  819160:	00003306 	br	819230 <find_file_in_directory+0x2b0>
			if (Read_Sector_Data(sector_index
  819164:	008020f4 	movhi	r2,131
  819168:	10ab4804 	addi	r2,r2,-21216
  81916c:	10c01317 	ldw	r3,76(r2)
  819170:	e0bfef17 	ldw	r2,-68(fp)
  819174:	1885883a 	add	r2,r3,r2
  819178:	1009883a 	mov	r4,r2
  81917c:	d1675517 	ldw	r5,-25260(gp)
  819180:	08172900 	call	817290 <Read_Sector_Data>
  819184:	1005003a 	cmpeq	r2,r2,zero
  819188:	10008e1e 	bne	r2,zero,8193c4 <find_file_in_directory+0x444>
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  81918c:	e03fee15 	stw	zero,-72(fp)
  819190:	00001e06 	br	81920c <find_file_in_directory+0x28c>
					// Read file record.
					Read_File_Record_At_Offset(file_counter * 32, file_record,
  819194:	e0bfee17 	ldw	r2,-72(fp)
  819198:	1008917a 	slli	r4,r2,5
  81919c:	e1ffef17 	ldw	r7,-68(fp)
  8191a0:	e17ffe17 	ldw	r5,-8(fp)
  8191a4:	000d883a 	mov	r6,zero
  8191a8:	08176d80 	call	8176d8 <Read_File_Record_At_Offset>
							0, sector_index);
					if ((file_record->name[0] != 0xe5) && (file_record->name[0]
  8191ac:	e0bffe17 	ldw	r2,-8(fp)
  8191b0:	10800003 	ldbu	r2,0(r2)
  8191b4:	10803fcc 	andi	r2,r2,255
  8191b8:	10803960 	cmpeqi	r2,r2,229
  8191bc:	1000101e 	bne	r2,zero,819200 <find_file_in_directory+0x280>
  8191c0:	e0bffe17 	ldw	r2,-8(fp)
  8191c4:	10800003 	ldbu	r2,0(r2)
  8191c8:	10803fcc 	andi	r2,r2,255
  8191cc:	1005003a 	cmpeq	r2,r2,zero
  8191d0:	10000b1e 	bne	r2,zero,819200 <find_file_in_directory+0x280>
							!= 0x00)) {
						bool match = match_file_record_to_name_ext(file_record,
								name, extension);
  8191d4:	e17ff804 	addi	r5,fp,-32
  8191d8:	e1bffa04 	addi	r6,fp,-24
  8191dc:	e13ffe17 	ldw	r4,-8(fp)
  8191e0:	08187800 	call	818780 <match_file_record_to_name_ext>
  8191e4:	e0bfed15 	stw	r2,-76(fp)

						if (match) {
  8191e8:	e0bfed17 	ldw	r2,-76(fp)
  8191ec:	1005003a 	cmpeq	r2,r2,zero
  8191f0:	1000031e 	bne	r2,zero,819200 <find_file_in_directory+0x280>
							result = true;
  8191f4:	00800044 	movi	r2,1
  8191f8:	e0bff115 	stw	r2,-60(fp)
							break;
  8191fc:	00000606 	br	819218 <find_file_in_directory+0x298>
			if (Read_Sector_Data(sector_index
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  819200:	e0bfee17 	ldw	r2,-72(fp)
  819204:	10800044 	addi	r2,r2,1
  819208:	e0bfee15 	stw	r2,-72(fp)
  81920c:	e0bfee17 	ldw	r2,-72(fp)
  819210:	10800410 	cmplti	r2,r2,16
  819214:	103fdf1e 	bne	r2,zero,819194 <find_file_in_directory+0x214>
					}
				}
			} else {
				break;
			}
			if (result) {
  819218:	e0bff117 	ldw	r2,-60(fp)
  81921c:	1004c03a 	cmpne	r2,r2,zero
  819220:	1000681e 	bne	r2,zero,8193c4 <find_file_in_directory+0x444>
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  819224:	e0bfef17 	ldw	r2,-68(fp)
  819228:	10800044 	addi	r2,r2,1
  81922c:	e0bfef15 	stw	r2,-68(fp)
  819230:	e0ffef17 	ldw	r3,-68(fp)
  819234:	e0bff017 	ldw	r2,-64(fp)
  819238:	18bfca16 	blt	r3,r2,819164 <find_file_in_directory+0x1e4>
  81923c:	00006106 	br	8193c4 <find_file_in_directory+0x444>
		}
	} else {
		do {
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
  819240:	e0bff417 	ldw	r2,-48(fp)
  819244:	10ffff84 	addi	r3,r2,-2
  819248:	008020f4 	movhi	r2,131
  81924c:	10ab4804 	addi	r2,r2,-21216
  819250:	10800383 	ldbu	r2,14(r2)
  819254:	10803fcc 	andi	r2,r2,255
  819258:	1885383a 	mul	r2,r3,r2
  81925c:	1007883a 	mov	r3,r2
  819260:	008020f4 	movhi	r2,131
  819264:	10ab4804 	addi	r2,r2,-21216
  819268:	10801417 	ldw	r2,80(r2)
  81926c:	1885883a 	add	r2,r3,r2
  819270:	e0bfec15 	stw	r2,-80(fp)
			int sector_index;

			for (sector_index = 0; sector_index
  819274:	e03feb15 	stw	zero,-84(fp)
  819278:	00003006 	br	81933c <find_file_in_directory+0x3bc>
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
  81927c:	e0ffeb17 	ldw	r3,-84(fp)
  819280:	e0bfec17 	ldw	r2,-80(fp)
  819284:	1889883a 	add	r4,r3,r2
  819288:	d1675517 	ldw	r5,-25260(gp)
  81928c:	08172900 	call	817290 <Read_Sector_Data>
  819290:	1005003a 	cmpeq	r2,r2,zero
  819294:	10002f1e 	bne	r2,zero,819354 <find_file_in_directory+0x3d4>
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  819298:	e03fea15 	stw	zero,-88(fp)
  81929c:	00001e06 	br	819318 <find_file_in_directory+0x398>
						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
  8192a0:	e0bfea17 	ldw	r2,-88(fp)
  8192a4:	1008917a 	slli	r4,r2,5
  8192a8:	e1bff417 	ldw	r6,-48(fp)
  8192ac:	e1ffeb17 	ldw	r7,-84(fp)
  8192b0:	e17ffe17 	ldw	r5,-8(fp)
  8192b4:	08176d80 	call	8176d8 <Read_File_Record_At_Offset>
								file_record, cluster, sector_index);
						if ((file_record->name[0] != 0xe5)
  8192b8:	e0bffe17 	ldw	r2,-8(fp)
  8192bc:	10800003 	ldbu	r2,0(r2)
  8192c0:	10803fcc 	andi	r2,r2,255
  8192c4:	10803960 	cmpeqi	r2,r2,229
  8192c8:	1000101e 	bne	r2,zero,81930c <find_file_in_directory+0x38c>
  8192cc:	e0bffe17 	ldw	r2,-8(fp)
  8192d0:	10800003 	ldbu	r2,0(r2)
  8192d4:	10803fcc 	andi	r2,r2,255
  8192d8:	1005003a 	cmpeq	r2,r2,zero
  8192dc:	10000b1e 	bne	r2,zero,81930c <find_file_in_directory+0x38c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
  8192e0:	e17ff804 	addi	r5,fp,-32
  8192e4:	e1bffa04 	addi	r6,fp,-24
  8192e8:	e13ffe17 	ldw	r4,-8(fp)
  8192ec:	08187800 	call	818780 <match_file_record_to_name_ext>
  8192f0:	e0bfe915 	stw	r2,-92(fp)

							if (match) {
  8192f4:	e0bfe917 	ldw	r2,-92(fp)
  8192f8:	1005003a 	cmpeq	r2,r2,zero
  8192fc:	1000031e 	bne	r2,zero,81930c <find_file_in_directory+0x38c>
								result = true;
  819300:	00800044 	movi	r2,1
  819304:	e0bff115 	stw	r2,-60(fp)
								break;
  819308:	00000606 	br	819324 <find_file_in_directory+0x3a4>
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  81930c:	e0bfea17 	ldw	r2,-88(fp)
  819310:	10800044 	addi	r2,r2,1
  819314:	e0bfea15 	stw	r2,-88(fp)
  819318:	e0bfea17 	ldw	r2,-88(fp)
  81931c:	10800410 	cmplti	r2,r2,16
  819320:	103fdf1e 	bne	r2,zero,8192a0 <find_file_in_directory+0x320>
						}
					}
				} else {
					break;
				}
				if (result) {
  819324:	e0bff117 	ldw	r2,-60(fp)
  819328:	1004c03a 	cmpne	r2,r2,zero
  81932c:	1000091e 	bne	r2,zero,819354 <find_file_in_directory+0x3d4>
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
					< boot_sector_data.sectors_per_cluster; sector_index++) {
  819330:	e0bfeb17 	ldw	r2,-84(fp)
  819334:	10800044 	addi	r2,r2,1
  819338:	e0bfeb15 	stw	r2,-84(fp)
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
  81933c:	008020f4 	movhi	r2,131
  819340:	10ab4804 	addi	r2,r2,-21216
  819344:	10800383 	ldbu	r2,14(r2)
  819348:	10c03fcc 	andi	r3,r2,255
  81934c:	e0bfeb17 	ldw	r2,-84(fp)
  819350:	10ffca16 	blt	r2,r3,81927c <find_file_in_directory+0x2fc>
					break;
				}
			}
			// If this is the end of the cluster and the file has not been found, then see if there is another cluster
			// that holds data for the current directory.
			if (result == false) {
  819354:	e0bff117 	ldw	r2,-60(fp)
  819358:	1004c03a 	cmpne	r2,r2,zero
  81935c:	1000131e 	bne	r2,zero,8193ac <find_file_in_directory+0x42c>
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster)) {
  819360:	e13ff417 	ldw	r4,-48(fp)
  819364:	e17ffb04 	addi	r5,fp,-20
  819368:	081738c0 	call	81738c <get_cluster_flag>
  81936c:	1005003a 	cmpeq	r2,r2,zero
  819370:	10000c1e 	bne	r2,zero,8193a4 <find_file_in_directory+0x424>
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  819374:	e0bffb0b 	ldhu	r2,-20(fp)
  819378:	10bfffcc 	andi	r2,r2,65535
  81937c:	10fffe0c 	andi	r3,r2,65528
  819380:	00bffe14 	movui	r2,65528
  819384:	1880021e 	bne	r3,r2,819390 <find_file_in_directory+0x410>
						return false;
  819388:	e03fff15 	stw	zero,-4(fp)
  81938c:	00000f06 	br	8193cc <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
  819390:	e0bffb0b 	ldhu	r2,-20(fp)
  819394:	10bfffcc 	andi	r2,r2,65535
  819398:	10bffe0c 	andi	r2,r2,65528
  81939c:	e0bff415 	stw	r2,-48(fp)
  8193a0:	00000206 	br	8193ac <find_file_in_directory+0x42c>
				} else {
					// Directory path is invalid.
					return false;
  8193a4:	e03fff15 	stw	zero,-4(fp)
  8193a8:	00000806 	br	8193cc <find_file_in_directory+0x44c>
				}
			}
		} while ((cluster < 0x0000fff8) && (result == false));
  8193ac:	e0fff417 	ldw	r3,-48(fp)
  8193b0:	00bffdd4 	movui	r2,65527
  8193b4:	10c00316 	blt	r2,r3,8193c4 <find_file_in_directory+0x444>
  8193b8:	e0bff117 	ldw	r2,-60(fp)
  8193bc:	1005003a 	cmpeq	r2,r2,zero
  8193c0:	103f9f1e 	bne	r2,zero,819240 <find_file_in_directory+0x2c0>
	}

	return result;
  8193c4:	e0bff117 	ldw	r2,-60(fp)
  8193c8:	e0bfff15 	stw	r2,-4(fp)
  8193cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8193d0:	e037883a 	mov	sp,fp
  8193d4:	dfc00117 	ldw	ra,4(sp)
  8193d8:	df000017 	ldw	fp,0(sp)
  8193dc:	dec00204 	addi	sp,sp,8
  8193e0:	f800283a 	ret

008193e4 <find_first_empty_cluster>:

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  8193e4:	defff504 	addi	sp,sp,-44
  8193e8:	dfc00a15 	stw	ra,40(sp)
  8193ec:	df000915 	stw	fp,36(sp)
  8193f0:	df000904 	addi	fp,sp,36
  8193f4:	e13fff15 	stw	r4,-4(fp)
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
  8193f8:	008020f4 	movhi	r2,131
  8193fc:	10ab4804 	addi	r2,r2,-21216
  819400:	10801117 	ldw	r2,68(r2)
  819404:	e0bffe15 	stw	r2,-8(fp)
	unsigned int cluster_index = 2;
  819408:	00800084 	movi	r2,2
  81940c:	e0bffd15 	stw	r2,-12(fp)
	short int cluster = -1;
  819410:	00bfffc4 	movi	r2,-1
  819414:	e0bffc0d 	sth	r2,-16(fp)
	bool result = false;
  819418:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
  81941c:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
  819420:	008020f4 	movhi	r2,131
  819424:	10ab4804 	addi	r2,r2,-21216
  819428:	10801417 	ldw	r2,80(r2)
  81942c:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
  819430:	008020f4 	movhi	r2,131
  819434:	10ab4804 	addi	r2,r2,-21216
  819438:	1080058b 	ldhu	r2,22(r2)
  81943c:	10bfffcc 	andi	r2,r2,65535
  819440:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 =
			boot_sector_data.total_sector_count_if_above_32MB;
  819444:	008020f4 	movhi	r2,131
  819448:	10ab4804 	addi	r2,r2,-21216
  81944c:	10800917 	ldw	r2,36(r2)
  819450:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32) {
  819454:	e0fff817 	ldw	r3,-32(fp)
  819458:	e0bff717 	ldw	r2,-36(fp)
  81945c:	10c00b2e 	bgeu	r2,r3,81948c <find_first_empty_cluster+0xa8>
		max_cluster_index = ((less_than_32 - non_data_sectors)
  819460:	e0fff817 	ldw	r3,-32(fp)
  819464:	e0bff917 	ldw	r2,-28(fp)
  819468:	1889c83a 	sub	r4,r3,r2
  81946c:	008020f4 	movhi	r2,131
  819470:	10ab4804 	addi	r2,r2,-21216
  819474:	10800383 	ldbu	r2,14(r2)
  819478:	11403fcc 	andi	r5,r2,255
  81947c:	080983c0 	call	80983c <__udivsi3>
  819480:	10800044 	addi	r2,r2,1
  819484:	e0bffa15 	stw	r2,-24(fp)
  819488:	00002906 	br	819530 <find_first_empty_cluster+0x14c>
				/ boot_sector_data.sectors_per_cluster) + 1;
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
  81948c:	e0fff717 	ldw	r3,-36(fp)
  819490:	e0bff917 	ldw	r2,-28(fp)
  819494:	1889c83a 	sub	r4,r3,r2
  819498:	008020f4 	movhi	r2,131
  81949c:	10ab4804 	addi	r2,r2,-21216
  8194a0:	10800383 	ldbu	r2,14(r2)
  8194a4:	11403fcc 	andi	r5,r2,255
  8194a8:	080983c0 	call	80983c <__udivsi3>
  8194ac:	10800044 	addi	r2,r2,1
  8194b0:	e0bffa15 	stw	r2,-24(fp)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  8194b4:	00001e06 	br	819530 <find_first_empty_cluster+0x14c>
		if (Read_Sector_Data(sector, fat_partition_offset_in_512_byte_sectors)) {
  8194b8:	e13ffe17 	ldw	r4,-8(fp)
  8194bc:	d1675517 	ldw	r5,-25260(gp)
  8194c0:	08172900 	call	817290 <Read_Sector_Data>
  8194c4:	1005003a 	cmpeq	r2,r2,zero
  8194c8:	1000131e 	bne	r2,zero,819518 <find_first_empty_cluster+0x134>
			do {
				cluster
  8194cc:	d0a75717 	ldw	r2,-25252(gp)
  8194d0:	10800a17 	ldw	r2,40(r2)
  8194d4:	1007883a 	mov	r3,r2
  8194d8:	e0bffd17 	ldw	r2,-12(fp)
  8194dc:	10803fcc 	andi	r2,r2,255
  8194e0:	1085883a 	add	r2,r2,r2
  8194e4:	1885883a 	add	r2,r3,r2
  8194e8:	1080002b 	ldhuio	r2,0(r2)
  8194ec:	e0bffc0d 	sth	r2,-16(fp)
						= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
  8194f0:	e0bffc0f 	ldh	r2,-16(fp)
  8194f4:	1005003a 	cmpeq	r2,r2,zero
  8194f8:	1000071e 	bne	r2,zero,819518 <find_first_empty_cluster+0x134>
					// Free cluster found.
					break;
				} else {
					cluster_index++;
  8194fc:	e0bffd17 	ldw	r2,-12(fp)
  819500:	10800044 	addi	r2,r2,1
  819504:	e0bffd15 	stw	r2,-12(fp)
				}
			} while ((cluster_index % 256) != 0);
  819508:	e0bffd17 	ldw	r2,-12(fp)
  81950c:	10803fcc 	andi	r2,r2,255
  819510:	1004c03a 	cmpne	r2,r2,zero
  819514:	103fed1e 	bne	r2,zero,8194cc <find_first_empty_cluster+0xe8>
		}
		if (cluster == 0) {
  819518:	e0bffc0f 	ldh	r2,-16(fp)
  81951c:	1005003a 	cmpeq	r2,r2,zero
  819520:	1000081e 	bne	r2,zero,819544 <find_first_empty_cluster+0x160>
			break;
		}
		sector++;
  819524:	e0bffe17 	ldw	r2,-8(fp)
  819528:	10800044 	addi	r2,r2,1
  81952c:	e0bffe15 	stw	r2,-8(fp)
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  819530:	008020f4 	movhi	r2,131
  819534:	10ab4804 	addi	r2,r2,-21216
  819538:	10c01217 	ldw	r3,72(r2)
  81953c:	e0bffe17 	ldw	r2,-8(fp)
  819540:	18bfdd1e 	bne	r3,r2,8194b8 <find_first_empty_cluster+0xd4>
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
  819544:	e0bffc0f 	ldh	r2,-16(fp)
  819548:	1004c03a 	cmpne	r2,r2,zero
  81954c:	1000081e 	bne	r2,zero,819570 <find_first_empty_cluster+0x18c>
  819550:	e0fffc0f 	ldh	r3,-16(fp)
  819554:	e0bffa17 	ldw	r2,-24(fp)
  819558:	10c00536 	bltu	r2,r3,819570 <find_first_empty_cluster+0x18c>
		*cluster_number = cluster_index;
  81955c:	e0bfff17 	ldw	r2,-4(fp)
  819560:	e0fffd17 	ldw	r3,-12(fp)
  819564:	10c00015 	stw	r3,0(r2)
		result = true;
  819568:	00800044 	movi	r2,1
  81956c:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
  819570:	e0bffb17 	ldw	r2,-20(fp)
}
  819574:	e037883a 	mov	sp,fp
  819578:	dfc00117 	ldw	ra,4(sp)
  81957c:	df000017 	ldw	fp,0(sp)
  819580:	dec00204 	addi	sp,sp,8
  819584:	f800283a 	ret

00819588 <find_first_empty_record_in_a_subdirectory>:

int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
  819588:	defff404 	addi	sp,sp,-48
  81958c:	dfc00b15 	stw	ra,44(sp)
  819590:	df000a15 	stw	fp,40(sp)
  819594:	df000a04 	addi	fp,sp,40
  819598:	e13ffe15 	stw	r4,-8(fp)
	int result = -1;
  81959c:	00bfffc4 	movi	r2,-1
  8195a0:	e0bffb15 	stw	r2,-20(fp)
	int cluster = start_cluster_index;
  8195a4:	e0bffe17 	ldw	r2,-8(fp)
  8195a8:	e0bffa15 	stw	r2,-24(fp)
	do {
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
  8195ac:	e0bffa17 	ldw	r2,-24(fp)
  8195b0:	10ffff84 	addi	r3,r2,-2
  8195b4:	008020f4 	movhi	r2,131
  8195b8:	10ab4804 	addi	r2,r2,-21216
  8195bc:	10800383 	ldbu	r2,14(r2)
  8195c0:	10803fcc 	andi	r2,r2,255
  8195c4:	1885383a 	mul	r2,r3,r2
  8195c8:	1007883a 	mov	r3,r2
  8195cc:	008020f4 	movhi	r2,131
  8195d0:	10ab4804 	addi	r2,r2,-21216
  8195d4:	10801417 	ldw	r2,80(r2)
  8195d8:	1885883a 	add	r2,r3,r2
  8195dc:	e0bff915 	stw	r2,-28(fp)
		int sector_index;

		for (sector_index = 0; sector_index
  8195e0:	e03ff815 	stw	zero,-32(fp)
  8195e4:	00002c06 	br	819698 <find_first_empty_record_in_a_subdirectory+0x110>
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
  8195e8:	e0fff817 	ldw	r3,-32(fp)
  8195ec:	e0bff917 	ldw	r2,-28(fp)
  8195f0:	1889883a 	add	r4,r3,r2
  8195f4:	d1675517 	ldw	r5,-25260(gp)
  8195f8:	08172900 	call	817290 <Read_Sector_Data>
  8195fc:	1005003a 	cmpeq	r2,r2,zero
  819600:	10002b1e 	bne	r2,zero,8196b0 <find_first_empty_record_in_a_subdirectory+0x128>
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  819604:	e03ff715 	stw	zero,-36(fp)
  819608:	00001d06 	br	819680 <find_first_empty_record_in_a_subdirectory+0xf8>
					unsigned short int leading_char;

					// Read file record.
					leading_char
  81960c:	d0a75717 	ldw	r2,-25252(gp)
  819610:	10800a17 	ldw	r2,40(r2)
  819614:	1007883a 	mov	r3,r2
  819618:	e0bff717 	ldw	r2,-36(fp)
  81961c:	1004917a 	slli	r2,r2,5
  819620:	1885883a 	add	r2,r3,r2
  819624:	10800023 	ldbuio	r2,0(r2)
  819628:	10803fcc 	andi	r2,r2,255
  81962c:	e0bff60d 	sth	r2,-40(fp)
							= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
					if ((leading_char == 0x00e5) || (leading_char == 0)) {
  819630:	e0bff60b 	ldhu	r2,-40(fp)
  819634:	10803960 	cmpeqi	r2,r2,229
  819638:	1000031e 	bne	r2,zero,819648 <find_first_empty_record_in_a_subdirectory+0xc0>
  81963c:	e0bff60b 	ldhu	r2,-40(fp)
  819640:	1004c03a 	cmpne	r2,r2,zero
  819644:	10000b1e 	bne	r2,zero,819674 <find_first_empty_record_in_a_subdirectory+0xec>
						result = (cluster)
  819648:	e0bff817 	ldw	r2,-32(fp)
  81964c:	1006913a 	slli	r3,r2,4
  819650:	e0bff717 	ldw	r2,-36(fp)
  819654:	1885883a 	add	r2,r3,r2
  819658:	1006943a 	slli	r3,r2,16
  81965c:	e0bffa17 	ldw	r2,-24(fp)
  819660:	1884b03a 	or	r2,r3,r2
  819664:	e0bffb15 	stw	r2,-20(fp)
								| ((sector_index * 16 + file_counter) << 16);
						return result;
  819668:	e0bffb17 	ldw	r2,-20(fp)
  81966c:	e0bfff15 	stw	r2,-4(fp)
  819670:	00005206 	br	8197bc <find_first_empty_record_in_a_subdirectory+0x234>
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  819674:	e0bff717 	ldw	r2,-36(fp)
  819678:	10800044 	addi	r2,r2,1
  81967c:	e0bff715 	stw	r2,-36(fp)
  819680:	e0bff717 	ldw	r2,-36(fp)
  819684:	10800410 	cmplti	r2,r2,16
  819688:	103fe01e 	bne	r2,zero,81960c <find_first_empty_record_in_a_subdirectory+0x84>
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
				< boot_sector_data.sectors_per_cluster; sector_index++) {
  81968c:	e0bff817 	ldw	r2,-32(fp)
  819690:	10800044 	addi	r2,r2,1
  819694:	e0bff815 	stw	r2,-32(fp)
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
  819698:	008020f4 	movhi	r2,131
  81969c:	10ab4804 	addi	r2,r2,-21216
  8196a0:	10800383 	ldbu	r2,14(r2)
  8196a4:	10c03fcc 	andi	r3,r2,255
  8196a8:	e0bff817 	ldw	r2,-32(fp)
  8196ac:	10ffce16 	blt	r2,r3,8195e8 <find_first_empty_record_in_a_subdirectory+0x60>
				break;
			}
		}
		// If this is the end of the cluster and the file has not been found, then see if there is another cluster
		// that holds data for the current directory.
		if (result < 0) {
  8196b0:	e0bffb17 	ldw	r2,-20(fp)
  8196b4:	1004403a 	cmpge	r2,r2,zero
  8196b8:	1000381e 	bne	r2,zero,81979c <find_first_empty_record_in_a_subdirectory+0x214>
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster)) {
  8196bc:	e13ffa17 	ldw	r4,-24(fp)
  8196c0:	e17ffc04 	addi	r5,fp,-16
  8196c4:	081738c0 	call	81738c <get_cluster_flag>
  8196c8:	1005003a 	cmpeq	r2,r2,zero
  8196cc:	1000311e 	bne	r2,zero,819794 <find_first_empty_record_in_a_subdirectory+0x20c>
				// The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  8196d0:	e0bffc0b 	ldhu	r2,-16(fp)
  8196d4:	10bfffcc 	andi	r2,r2,65535
  8196d8:	10fffe0c 	andi	r3,r2,65528
  8196dc:	00bffe14 	movui	r2,65528
  8196e0:	18802e1e 	bne	r3,r2,81979c <find_first_empty_record_in_a_subdirectory+0x214>
					int new_dir_cluster;
					if (find_first_empty_cluster(&new_dir_cluster)) {
  8196e4:	e13ffd04 	addi	r4,fp,-12
  8196e8:	08193e40 	call	8193e4 <find_first_empty_cluster>
  8196ec:	1005003a 	cmpeq	r2,r2,zero
  8196f0:	1000231e 	bne	r2,zero,819780 <find_first_empty_record_in_a_subdirectory+0x1f8>
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster,
  8196f4:	e13ffa17 	ldw	r4,-24(fp)
  8196f8:	e0bffd17 	ldw	r2,-12(fp)
  8196fc:	117fffcc 	andi	r5,r2,65535
  819700:	2960001c 	xori	r5,r5,32768
  819704:	29600004 	addi	r5,r5,-32768
  819708:	01800044 	movi	r6,1
  81970c:	08174440 	call	817444 <mark_cluster>
  819710:	1005003a 	cmpeq	r2,r2,zero
  819714:	10001a1e 	bne	r2,zero,819780 <find_first_empty_record_in_a_subdirectory+0x1f8>
  819718:	e0bffd17 	ldw	r2,-12(fp)
  81971c:	1009883a 	mov	r4,r2
  819720:	017fffc4 	movi	r5,-1
  819724:	01800044 	movi	r6,1
  819728:	08174440 	call	817444 <mark_cluster>
  81972c:	1005003a 	cmpeq	r2,r2,zero
  819730:	1000131e 	bne	r2,zero,819780 <find_first_empty_record_in_a_subdirectory+0x1f8>
  819734:	e13ffa17 	ldw	r4,-24(fp)
  819738:	e0bffd17 	ldw	r2,-12(fp)
  81973c:	117fffcc 	andi	r5,r2,65535
  819740:	2960001c 	xori	r5,r5,32768
  819744:	29600004 	addi	r5,r5,-32768
  819748:	000d883a 	mov	r6,zero
  81974c:	08174440 	call	817444 <mark_cluster>
  819750:	1005003a 	cmpeq	r2,r2,zero
  819754:	10000a1e 	bne	r2,zero,819780 <find_first_empty_record_in_a_subdirectory+0x1f8>
  819758:	e0bffd17 	ldw	r2,-12(fp)
  81975c:	1009883a 	mov	r4,r2
  819760:	017fffc4 	movi	r5,-1
  819764:	000d883a 	mov	r6,zero
  819768:	08174440 	call	817444 <mark_cluster>
  81976c:	1005003a 	cmpeq	r2,r2,zero
  819770:	1000031e 	bne	r2,zero,819780 <find_first_empty_record_in_a_subdirectory+0x1f8>
										((short int) (0xffff)), true)
								&& mark_cluster(cluster,
										((short int) (new_dir_cluster)), false)
								&& mark_cluster(new_dir_cluster,
										((short int) (0xffff)), false)) {
							Save_Modified_Sector();
  819774:	08172400 	call	817240 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;
  819778:	e0bffd17 	ldw	r2,-12(fp)
  81977c:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
  819780:	e0bffc0b 	ldhu	r2,-16(fp)
  819784:	10bfffcc 	andi	r2,r2,65535
  819788:	10bffe0c 	andi	r2,r2,65528
  81978c:	e0bffa15 	stw	r2,-24(fp)
  819790:	00000206 	br	81979c <find_first_empty_record_in_a_subdirectory+0x214>
				}
			} else {
				// Error encountered.                 
				result = -1;
  819794:	00bfffc4 	movi	r2,-1
  819798:	e0bffb15 	stw	r2,-20(fp)
			}
		}
	} while ((cluster < 0x0000fff8) && (result == -1));
  81979c:	e0fffa17 	ldw	r3,-24(fp)
  8197a0:	00bffdd4 	movui	r2,65527
  8197a4:	10c00316 	blt	r2,r3,8197b4 <find_first_empty_record_in_a_subdirectory+0x22c>
  8197a8:	e0bffb17 	ldw	r2,-20(fp)
  8197ac:	10bfffe0 	cmpeqi	r2,r2,-1
  8197b0:	103f7e1e 	bne	r2,zero,8195ac <find_first_empty_record_in_a_subdirectory+0x24>
	return result;
  8197b4:	e0bffb17 	ldw	r2,-20(fp)
  8197b8:	e0bfff15 	stw	r2,-4(fp)
  8197bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8197c0:	e037883a 	mov	sp,fp
  8197c4:	dfc00117 	ldw	ra,4(sp)
  8197c8:	df000017 	ldw	fp,0(sp)
  8197cc:	dec00204 	addi	sp,sp,8
  8197d0:	f800283a 	ret

008197d4 <find_first_empty_record_in_root_directory>:

int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  8197d4:	defff804 	addi	sp,sp,-32
  8197d8:	dfc00715 	stw	ra,28(sp)
  8197dc:	df000615 	stw	fp,24(sp)
  8197e0:	df000604 	addi	fp,sp,24
	int max_root_dir_sectors = ((32
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
  8197e4:	008020f4 	movhi	r2,131
  8197e8:	10ab4804 	addi	r2,r2,-21216
  8197ec:	1080050b 	ldhu	r2,20(r2)
  8197f0:	10bfffcc 	andi	r2,r2,65535
  8197f4:	1008917a 	slli	r4,r2,5
  8197f8:	008020f4 	movhi	r2,131
  8197fc:	10ab4804 	addi	r2,r2,-21216
  819800:	1080030b 	ldhu	r2,12(r2)
  819804:	117fffcc 	andi	r5,r2,65535
  819808:	080977c0 	call	80977c <__divsi3>
  81980c:	e0bffe15 	stw	r2,-8(fp)
	int sector_index;
	int result = -1;
  819810:	00bfffc4 	movi	r2,-1
  819814:	e0bffc15 	stw	r2,-16(fp)

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  819818:	e03ffd15 	stw	zero,-12(fp)
  81981c:	00002d06 	br	8198d4 <find_first_empty_record_in_root_directory+0x100>
		if (Read_Sector_Data(sector_index
  819820:	008020f4 	movhi	r2,131
  819824:	10ab4804 	addi	r2,r2,-21216
  819828:	10c01317 	ldw	r3,76(r2)
  81982c:	e0bffd17 	ldw	r2,-12(fp)
  819830:	1885883a 	add	r2,r3,r2
  819834:	1009883a 	mov	r4,r2
  819838:	d1675517 	ldw	r5,-25260(gp)
  81983c:	08172900 	call	817290 <Read_Sector_Data>
  819840:	1005003a 	cmpeq	r2,r2,zero
  819844:	1000261e 	bne	r2,zero,8198e0 <find_first_empty_record_in_root_directory+0x10c>
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
  819848:	e03ffb15 	stw	zero,-20(fp)
  81984c:	00001b06 	br	8198bc <find_first_empty_record_in_root_directory+0xe8>
				unsigned short int leading_char;

				// Read first character of the file record.
				leading_char
  819850:	d0a75717 	ldw	r2,-25252(gp)
  819854:	10800a17 	ldw	r2,40(r2)
  819858:	1007883a 	mov	r3,r2
  81985c:	e0bffb17 	ldw	r2,-20(fp)
  819860:	1004917a 	slli	r2,r2,5
  819864:	1885883a 	add	r2,r3,r2
  819868:	10800023 	ldbuio	r2,0(r2)
  81986c:	10803fcc 	andi	r2,r2,255
  819870:	e0bffa0d 	sth	r2,-24(fp)
						= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
  819874:	e0bffa0b 	ldhu	r2,-24(fp)
  819878:	10803960 	cmpeqi	r2,r2,229
  81987c:	1000031e 	bne	r2,zero,81988c <find_first_empty_record_in_root_directory+0xb8>
  819880:	e0bffa0b 	ldhu	r2,-24(fp)
  819884:	1004c03a 	cmpne	r2,r2,zero
  819888:	1000091e 	bne	r2,zero,8198b0 <find_first_empty_record_in_root_directory+0xdc>
					result = (sector_index * 16 + file_counter) << 16;
  81988c:	e0bffd17 	ldw	r2,-12(fp)
  819890:	1006913a 	slli	r3,r2,4
  819894:	e0bffb17 	ldw	r2,-20(fp)
  819898:	1885883a 	add	r2,r3,r2
  81989c:	1004943a 	slli	r2,r2,16
  8198a0:	e0bffc15 	stw	r2,-16(fp)
					return result;
  8198a4:	e0bffc17 	ldw	r2,-16(fp)
  8198a8:	e0bfff15 	stw	r2,-4(fp)
  8198ac:	00000e06 	br	8198e8 <find_first_empty_record_in_root_directory+0x114>
		if (Read_Sector_Data(sector_index
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
  8198b0:	e0bffb17 	ldw	r2,-20(fp)
  8198b4:	10800044 	addi	r2,r2,1
  8198b8:	e0bffb15 	stw	r2,-20(fp)
  8198bc:	e0bffb17 	ldw	r2,-20(fp)
  8198c0:	10800410 	cmplti	r2,r2,16
  8198c4:	103fe21e 	bne	r2,zero,819850 <find_first_empty_record_in_root_directory+0x7c>
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  8198c8:	e0bffd17 	ldw	r2,-12(fp)
  8198cc:	10800044 	addi	r2,r2,1
  8198d0:	e0bffd15 	stw	r2,-12(fp)
  8198d4:	e0fffd17 	ldw	r3,-12(fp)
  8198d8:	e0bffe17 	ldw	r2,-8(fp)
  8198dc:	18bfd016 	blt	r3,r2,819820 <find_first_empty_record_in_root_directory+0x4c>
			}
		} else {
			break;
		}
	}
	return result;
  8198e0:	e0bffc17 	ldw	r2,-16(fp)
  8198e4:	e0bfff15 	stw	r2,-4(fp)
  8198e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8198ec:	e037883a 	mov	sp,fp
  8198f0:	dfc00117 	ldw	ra,4(sp)
  8198f4:	df000017 	ldw	fp,0(sp)
  8198f8:	dec00204 	addi	sp,sp,8
  8198fc:	f800283a 	ret

00819900 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name,
		char *extension)
// This function converts the file name into a name . extension format.
{
  819900:	defffa04 	addi	sp,sp,-24
  819904:	df000515 	stw	fp,20(sp)
  819908:	df000504 	addi	fp,sp,20
  81990c:	e13ffd15 	stw	r4,-12(fp)
  819910:	e17ffe15 	stw	r5,-8(fp)
  819914:	e1bfff15 	stw	r6,-4(fp)
	int counter;
	int local = 0;
  819918:	e03ffb15 	stw	zero,-20(fp)

	for (counter = 0; counter < 8; counter++) {
  81991c:	e03ffc15 	stw	zero,-16(fp)
  819920:	00002b06 	br	8199d0 <convert_filename_to_name_extension+0xd0>
		if (filename[local] != '.') {
  819924:	e0bffb17 	ldw	r2,-20(fp)
  819928:	1007883a 	mov	r3,r2
  81992c:	e0bffd17 	ldw	r2,-12(fp)
  819930:	1885883a 	add	r2,r3,r2
  819934:	10800003 	ldbu	r2,0(r2)
  819938:	10803fcc 	andi	r2,r2,255
  81993c:	1080201c 	xori	r2,r2,128
  819940:	10bfe004 	addi	r2,r2,-128
  819944:	10800ba0 	cmpeqi	r2,r2,46
  819948:	1000181e 	bne	r2,zero,8199ac <convert_filename_to_name_extension+0xac>
			name[counter] = filename[local];
  81994c:	e0bffc17 	ldw	r2,-16(fp)
  819950:	1007883a 	mov	r3,r2
  819954:	e0bffe17 	ldw	r2,-8(fp)
  819958:	1889883a 	add	r4,r3,r2
  81995c:	e0bffb17 	ldw	r2,-20(fp)
  819960:	1007883a 	mov	r3,r2
  819964:	e0bffd17 	ldw	r2,-12(fp)
  819968:	1885883a 	add	r2,r3,r2
  81996c:	10800003 	ldbu	r2,0(r2)
  819970:	20800005 	stb	r2,0(r4)
			if (filename[local] != 0)
  819974:	e0bffb17 	ldw	r2,-20(fp)
  819978:	1007883a 	mov	r3,r2
  81997c:	e0bffd17 	ldw	r2,-12(fp)
  819980:	1885883a 	add	r2,r3,r2
  819984:	10800003 	ldbu	r2,0(r2)
  819988:	10803fcc 	andi	r2,r2,255
  81998c:	1080201c 	xori	r2,r2,128
  819990:	10bfe004 	addi	r2,r2,-128
  819994:	1005003a 	cmpeq	r2,r2,zero
  819998:	10000a1e 	bne	r2,zero,8199c4 <convert_filename_to_name_extension+0xc4>
				local++;
  81999c:	e0bffb17 	ldw	r2,-20(fp)
  8199a0:	10800044 	addi	r2,r2,1
  8199a4:	e0bffb15 	stw	r2,-20(fp)
  8199a8:	00000606 	br	8199c4 <convert_filename_to_name_extension+0xc4>
		} else {
			name[counter] = ' ';
  8199ac:	e0bffc17 	ldw	r2,-16(fp)
  8199b0:	1007883a 	mov	r3,r2
  8199b4:	e0bffe17 	ldw	r2,-8(fp)
  8199b8:	1887883a 	add	r3,r3,r2
  8199bc:	00800804 	movi	r2,32
  8199c0:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
  8199c4:	e0bffc17 	ldw	r2,-16(fp)
  8199c8:	10800044 	addi	r2,r2,1
  8199cc:	e0bffc15 	stw	r2,-16(fp)
  8199d0:	e0bffc17 	ldw	r2,-16(fp)
  8199d4:	10800210 	cmplti	r2,r2,8
  8199d8:	103fd21e 	bne	r2,zero,819924 <convert_filename_to_name_extension+0x24>
				local++;
		} else {
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
  8199dc:	e0bffb17 	ldw	r2,-20(fp)
  8199e0:	1007883a 	mov	r3,r2
  8199e4:	e0bffd17 	ldw	r2,-12(fp)
  8199e8:	1885883a 	add	r2,r3,r2
  8199ec:	10800003 	ldbu	r2,0(r2)
  8199f0:	10803fcc 	andi	r2,r2,255
  8199f4:	1080201c 	xori	r2,r2,128
  8199f8:	10bfe004 	addi	r2,r2,-128
  8199fc:	10800b98 	cmpnei	r2,r2,46
  819a00:	1000031e 	bne	r2,zero,819a10 <convert_filename_to_name_extension+0x110>
		local++;
  819a04:	e0bffb17 	ldw	r2,-20(fp)
  819a08:	10800044 	addi	r2,r2,1
  819a0c:	e0bffb15 	stw	r2,-20(fp)
	for (counter = 0; counter < 3; counter++) {
  819a10:	e03ffc15 	stw	zero,-16(fp)
  819a14:	00002106 	br	819a9c <convert_filename_to_name_extension+0x19c>
		if (filename[local] != 0) {
  819a18:	e0bffb17 	ldw	r2,-20(fp)
  819a1c:	1007883a 	mov	r3,r2
  819a20:	e0bffd17 	ldw	r2,-12(fp)
  819a24:	1885883a 	add	r2,r3,r2
  819a28:	10800003 	ldbu	r2,0(r2)
  819a2c:	10803fcc 	andi	r2,r2,255
  819a30:	1080201c 	xori	r2,r2,128
  819a34:	10bfe004 	addi	r2,r2,-128
  819a38:	1005003a 	cmpeq	r2,r2,zero
  819a3c:	10000e1e 	bne	r2,zero,819a78 <convert_filename_to_name_extension+0x178>
			extension[counter] = filename[local];
  819a40:	e0bffc17 	ldw	r2,-16(fp)
  819a44:	1007883a 	mov	r3,r2
  819a48:	e0bfff17 	ldw	r2,-4(fp)
  819a4c:	1889883a 	add	r4,r3,r2
  819a50:	e0bffb17 	ldw	r2,-20(fp)
  819a54:	1007883a 	mov	r3,r2
  819a58:	e0bffd17 	ldw	r2,-12(fp)
  819a5c:	1885883a 	add	r2,r3,r2
  819a60:	10800003 	ldbu	r2,0(r2)
  819a64:	20800005 	stb	r2,0(r4)
			local++;
  819a68:	e0bffb17 	ldw	r2,-20(fp)
  819a6c:	10800044 	addi	r2,r2,1
  819a70:	e0bffb15 	stw	r2,-20(fp)
  819a74:	00000606 	br	819a90 <convert_filename_to_name_extension+0x190>
		} else {
			extension[counter] = ' ';
  819a78:	e0bffc17 	ldw	r2,-16(fp)
  819a7c:	1007883a 	mov	r3,r2
  819a80:	e0bfff17 	ldw	r2,-4(fp)
  819a84:	1887883a 	add	r3,r3,r2
  819a88:	00800804 	movi	r2,32
  819a8c:	18800005 	stb	r2,0(r3)
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
  819a90:	e0bffc17 	ldw	r2,-16(fp)
  819a94:	10800044 	addi	r2,r2,1
  819a98:	e0bffc15 	stw	r2,-16(fp)
  819a9c:	e0bffc17 	ldw	r2,-16(fp)
  819aa0:	108000d0 	cmplti	r2,r2,3
  819aa4:	103fdc1e 	bne	r2,zero,819a18 <convert_filename_to_name_extension+0x118>
		} else {
			extension[counter] = ' ';
		}
	}

}
  819aa8:	e037883a 	mov	sp,fp
  819aac:	df000017 	ldw	fp,0(sp)
  819ab0:	dec00104 	addi	sp,sp,4
  819ab4:	f800283a 	ret

00819ab8 <create_file>:

bool create_file(char *name, t_file_record *file_record,
		t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  819ab8:	defff304 	addi	sp,sp,-52
  819abc:	dfc00c15 	stw	ra,48(sp)
  819ac0:	df000b15 	stw	fp,44(sp)
  819ac4:	df000b04 	addi	fp,sp,44
  819ac8:	e13ffb15 	stw	r4,-20(fp)
  819acc:	e17ffc15 	stw	r5,-16(fp)
  819ad0:	e1bffd15 	stw	r6,-12(fp)
	unsigned int cluster_number;
	bool result = false;
  819ad4:	e03ff915 	stw	zero,-28(fp)

	if (find_first_empty_cluster(&cluster_number)) {
  819ad8:	e13ffa04 	addi	r4,fp,-24
  819adc:	08193e40 	call	8193e4 <find_first_empty_cluster>
  819ae0:	1005003a 	cmpeq	r2,r2,zero
  819ae4:	1000a31e 	bne	r2,zero,819d74 <create_file+0x2bc>
		int record_index;

		if (home_dir->file_record_cluster == 0) {
  819ae8:	e0bffd17 	ldw	r2,-12(fp)
  819aec:	10800a17 	ldw	r2,40(r2)
  819af0:	1004c03a 	cmpne	r2,r2,zero
  819af4:	1000031e 	bne	r2,zero,819b04 <create_file+0x4c>
			// Put a file in the root directory.
			record_index = find_first_empty_record_in_root_directory();
  819af8:	08197d40 	call	8197d4 <find_first_empty_record_in_root_directory>
  819afc:	e0bff815 	stw	r2,-32(fp)
  819b00:	00000506 	br	819b18 <create_file+0x60>
		} else {
			// Put a file in a subdirectory.
			record_index = find_first_empty_record_in_a_subdirectory(
  819b04:	e0bffd17 	ldw	r2,-12(fp)
  819b08:	1080058b 	ldhu	r2,22(r2)
  819b0c:	113fffcc 	andi	r4,r2,65535
  819b10:	08195880 	call	819588 <find_first_empty_record_in_a_subdirectory>
  819b14:	e0bff815 	stw	r2,-32(fp)
					home_dir->start_cluster_index);
		}
		if (record_index >= 0) {
  819b18:	e0bff817 	ldw	r2,-32(fp)
  819b1c:	1004803a 	cmplt	r2,r2,zero
  819b20:	1000941e 	bne	r2,zero,819d74 <create_file+0x2bc>
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
  819b24:	e13ffb17 	ldw	r4,-20(fp)
  819b28:	08186c00 	call	8186c0 <get_dir_divider_location>
  819b2c:	e0bff615 	stw	r2,-40(fp)
			int last_dir_separator = 0;
  819b30:	e03ff515 	stw	zero,-44(fp)

			// Skip through all directory separators.
			while (location > 0) {
  819b34:	00000b06 	br	819b64 <create_file+0xac>
				last_dir_separator = last_dir_separator + location + 1;
  819b38:	e0fff517 	ldw	r3,-44(fp)
  819b3c:	e0bff617 	ldw	r2,-40(fp)
  819b40:	1885883a 	add	r2,r3,r2
  819b44:	10800044 	addi	r2,r2,1
  819b48:	e0bff515 	stw	r2,-44(fp)
				location
  819b4c:	e0bff517 	ldw	r2,-44(fp)
  819b50:	1007883a 	mov	r3,r2
  819b54:	e0bffb17 	ldw	r2,-20(fp)
  819b58:	1889883a 	add	r4,r3,r2
  819b5c:	08186c00 	call	8186c0 <get_dir_divider_location>
  819b60:	e0bff615 	stw	r2,-40(fp)
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
			int last_dir_separator = 0;

			// Skip through all directory separators.
			while (location > 0) {
  819b64:	e0bff617 	ldw	r2,-40(fp)
  819b68:	10800048 	cmpgei	r2,r2,1
  819b6c:	103ff21e 	bne	r2,zero,819b38 <create_file+0x80>
				last_dir_separator = last_dir_separator + location + 1;
				location
						= get_dir_divider_location(&(name[last_dir_separator]));
			}

			convert_filename_to_name_extension(&(name[last_dir_separator]),
  819b70:	e0bff517 	ldw	r2,-44(fp)
  819b74:	1007883a 	mov	r3,r2
  819b78:	e0bffb17 	ldw	r2,-20(fp)
  819b7c:	1889883a 	add	r4,r3,r2
  819b80:	e0bffc17 	ldw	r2,-16(fp)
  819b84:	100b883a 	mov	r5,r2
  819b88:	e0bffc17 	ldw	r2,-16(fp)
  819b8c:	10800204 	addi	r2,r2,8
  819b90:	100d883a 	mov	r6,r2
  819b94:	08199000 	call	819900 <convert_filename_to_name_extension>
					file_record->name, file_record->extension);

			file_record->attributes = 0;
  819b98:	e0bffc17 	ldw	r2,-16(fp)
  819b9c:	100002c5 	stb	zero,11(r2)
			file_record->create_time = 0;
  819ba0:	e0bffc17 	ldw	r2,-16(fp)
  819ba4:	1000030d 	sth	zero,12(r2)
			file_record->create_date = 0;
  819ba8:	e0bffc17 	ldw	r2,-16(fp)
  819bac:	1000038d 	sth	zero,14(r2)
			file_record->last_access_date = 0;
  819bb0:	e0bffc17 	ldw	r2,-16(fp)
  819bb4:	1000040d 	sth	zero,16(r2)
			file_record->last_modified_time = 0;
  819bb8:	e0bffc17 	ldw	r2,-16(fp)
  819bbc:	1000048d 	sth	zero,18(r2)
			file_record->last_modified_date = 0;
  819bc0:	e0bffc17 	ldw	r2,-16(fp)
  819bc4:	1000050d 	sth	zero,20(r2)
			file_record->start_cluster_index = cluster_number;
  819bc8:	e0bffa17 	ldw	r2,-24(fp)
  819bcc:	1007883a 	mov	r3,r2
  819bd0:	e0bffc17 	ldw	r2,-16(fp)
  819bd4:	10c0058d 	sth	r3,22(r2)
			file_record->file_size_in_bytes = 0;
  819bd8:	e0bffc17 	ldw	r2,-16(fp)
  819bdc:	10000615 	stw	zero,24(r2)
			file_record->current_cluster_index = cluster_number;
  819be0:	e0fffa17 	ldw	r3,-24(fp)
  819be4:	e0bffc17 	ldw	r2,-16(fp)
  819be8:	10c00715 	stw	r3,28(r2)
			file_record->current_sector_in_cluster = 0;
  819bec:	e0bffc17 	ldw	r2,-16(fp)
  819bf0:	10000815 	stw	zero,32(r2)
			file_record->current_byte_position = 0;
  819bf4:	e0bffc17 	ldw	r2,-16(fp)
  819bf8:	10000915 	stw	zero,36(r2)
			file_record->file_record_cluster = record_index & 0x0000ffff;
  819bfc:	e0bff817 	ldw	r2,-32(fp)
  819c00:	10ffffcc 	andi	r3,r2,65535
  819c04:	e0bffc17 	ldw	r2,-16(fp)
  819c08:	10c00a15 	stw	r3,40(r2)
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
  819c0c:	e0bff817 	ldw	r2,-32(fp)
  819c10:	1005d43a 	srai	r2,r2,16
  819c14:	10bfffcc 	andi	r2,r2,65535
  819c18:	e0bfff15 	stw	r2,-4(fp)
  819c1c:	e0ffff17 	ldw	r3,-4(fp)
  819c20:	1804403a 	cmpge	r2,r3,zero
  819c24:	1000031e 	bne	r2,zero,819c34 <create_file+0x17c>
  819c28:	e0bfff17 	ldw	r2,-4(fp)
  819c2c:	108003c4 	addi	r2,r2,15
  819c30:	e0bfff15 	stw	r2,-4(fp)
  819c34:	e0ffff17 	ldw	r3,-4(fp)
  819c38:	1805d13a 	srai	r2,r3,4
  819c3c:	1007883a 	mov	r3,r2
  819c40:	e0bffc17 	ldw	r2,-16(fp)
  819c44:	10c00b15 	stw	r3,44(r2)
					& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
  819c48:	e0bff817 	ldw	r2,-32(fp)
  819c4c:	1005d43a 	srai	r2,r2,16
  819c50:	108003cc 	andi	r2,r2,15
  819c54:	1004917a 	slli	r2,r2,5
  819c58:	1007883a 	mov	r3,r2
  819c5c:	e0bffc17 	ldw	r2,-16(fp)
  819c60:	10c00c0d 	sth	r3,48(r2)
					& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
  819c64:	e0bffd17 	ldw	r2,-12(fp)
  819c68:	1080058b 	ldhu	r2,22(r2)
  819c6c:	10ffffcc 	andi	r3,r2,65535
  819c70:	e0bffc17 	ldw	r2,-16(fp)
  819c74:	10c00d15 	stw	r3,52(r2)
			file_record->in_use = true;
  819c78:	e0fffc17 	ldw	r3,-16(fp)
  819c7c:	00800044 	movi	r2,1
  819c80:	18800f15 	stw	r2,60(r3)
			file_record->modified = true;
  819c84:	e0fffc17 	ldw	r3,-16(fp)
  819c88:	00800044 	movi	r2,1
  819c8c:	18800e15 	stw	r2,56(r3)
			// Now write the record at the specified location.
			file_record_sector
  819c90:	e0bffc17 	ldw	r2,-16(fp)
  819c94:	10800a17 	ldw	r2,40(r2)
  819c98:	1004c03a 	cmpne	r2,r2,zero
  819c9c:	1000081e 	bne	r2,zero,819cc0 <create_file+0x208>
  819ca0:	008020f4 	movhi	r2,131
  819ca4:	10ab4804 	addi	r2,r2,-21216
  819ca8:	10c01317 	ldw	r3,76(r2)
  819cac:	e0bffc17 	ldw	r2,-16(fp)
  819cb0:	10800b17 	ldw	r2,44(r2)
  819cb4:	1887883a 	add	r3,r3,r2
  819cb8:	e0fffe15 	stw	r3,-8(fp)
  819cbc:	00001006 	br	819d00 <create_file+0x248>
  819cc0:	008020f4 	movhi	r2,131
  819cc4:	10ab4804 	addi	r2,r2,-21216
  819cc8:	11001417 	ldw	r4,80(r2)
  819ccc:	e0bffc17 	ldw	r2,-16(fp)
  819cd0:	10800a17 	ldw	r2,40(r2)
  819cd4:	10ffff84 	addi	r3,r2,-2
  819cd8:	008020f4 	movhi	r2,131
  819cdc:	10ab4804 	addi	r2,r2,-21216
  819ce0:	10800383 	ldbu	r2,14(r2)
  819ce4:	10803fcc 	andi	r2,r2,255
  819ce8:	1885383a 	mul	r2,r3,r2
  819cec:	2087883a 	add	r3,r4,r2
  819cf0:	e0bffc17 	ldw	r2,-16(fp)
  819cf4:	10800b17 	ldw	r2,44(r2)
  819cf8:	1887883a 	add	r3,r3,r2
  819cfc:	e0fffe15 	stw	r3,-8(fp)
  819d00:	e0bffe17 	ldw	r2,-8(fp)
  819d04:	e0bff715 	stw	r2,-36(fp)
							: (boot_sector_data.data_sector_offset
									+ (file_record->file_record_cluster - 2)
											* boot_sector_data.sectors_per_cluster
									+ file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector,
  819d08:	e13ff717 	ldw	r4,-36(fp)
  819d0c:	d1675517 	ldw	r5,-25260(gp)
  819d10:	08172900 	call	817290 <Read_Sector_Data>
  819d14:	1005003a 	cmpeq	r2,r2,zero
  819d18:	1000161e 	bne	r2,zero,819d74 <create_file+0x2bc>
					fat_partition_offset_in_512_byte_sectors)) {
				if (Write_File_Record_At_Offset(
  819d1c:	e0bffc17 	ldw	r2,-16(fp)
  819d20:	10800c0b 	ldhu	r2,48(r2)
  819d24:	113fffcc 	andi	r4,r2,65535
  819d28:	2120001c 	xori	r4,r4,32768
  819d2c:	21200004 	addi	r4,r4,-32768
  819d30:	e17ffc17 	ldw	r5,-16(fp)
  819d34:	081795c0 	call	81795c <Write_File_Record_At_Offset>
  819d38:	1005003a 	cmpeq	r2,r2,zero
  819d3c:	10000d1e 	bne	r2,zero,819d74 <create_file+0x2bc>
						file_record->file_record_offset, file_record)) {
					Save_Modified_Sector();
  819d40:	08172400 	call	817240 <Save_Modified_Sector>
					// Mark the first cluster of the file as the last cluster at first.
					mark_cluster(cluster_number, ((short int) (0xffff)), true);
  819d44:	e13ffa17 	ldw	r4,-24(fp)
  819d48:	017fffc4 	movi	r5,-1
  819d4c:	01800044 	movi	r6,1
  819d50:	08174440 	call	817444 <mark_cluster>
					if (mark_cluster(cluster_number, ((short int) (0xffff)),
  819d54:	e13ffa17 	ldw	r4,-24(fp)
  819d58:	017fffc4 	movi	r5,-1
  819d5c:	000d883a 	mov	r6,zero
  819d60:	08174440 	call	817444 <mark_cluster>
  819d64:	1005003a 	cmpeq	r2,r2,zero
  819d68:	1000021e 	bne	r2,zero,819d74 <create_file+0x2bc>
							false)) {
						result = true;
  819d6c:	00800044 	movi	r2,1
  819d70:	e0bff915 	stw	r2,-28(fp)
				}
			}
		}

	}
	return result;
  819d74:	e0bff917 	ldw	r2,-28(fp)
}
  819d78:	e037883a 	mov	sp,fp
  819d7c:	dfc00117 	ldw	ra,4(sp)
  819d80:	df000017 	ldw	fp,0(sp)
  819d84:	dec00204 	addi	sp,sp,8
  819d88:	f800283a 	ret

00819d8c <copy_file_record_name_to_string>:

void copy_file_record_name_to_string(t_file_record *file_record,
		char *file_name)
/* Copy a file name from the file record to a given string */
{
  819d8c:	defffb04 	addi	sp,sp,-20
  819d90:	df000415 	stw	fp,16(sp)
  819d94:	df000404 	addi	fp,sp,16
  819d98:	e13ffe15 	stw	r4,-8(fp)
  819d9c:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
  819da0:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
  819da4:	e03ffd15 	stw	zero,-12(fp)
  819da8:	00001606 	br	819e04 <copy_file_record_name_to_string+0x78>
		if (file_record->name[index] != ' ') {
  819dac:	e0fffd17 	ldw	r3,-12(fp)
  819db0:	e0bffe17 	ldw	r2,-8(fp)
  819db4:	10c5883a 	add	r2,r2,r3
  819db8:	10800003 	ldbu	r2,0(r2)
  819dbc:	10803fcc 	andi	r2,r2,255
  819dc0:	10800820 	cmpeqi	r2,r2,32
  819dc4:	10000c1e 	bne	r2,zero,819df8 <copy_file_record_name_to_string+0x6c>
			file_name[flength] = file_record->name[index];
  819dc8:	e0bffc17 	ldw	r2,-16(fp)
  819dcc:	1007883a 	mov	r3,r2
  819dd0:	e0bfff17 	ldw	r2,-4(fp)
  819dd4:	1889883a 	add	r4,r3,r2
  819dd8:	e0fffd17 	ldw	r3,-12(fp)
  819ddc:	e0bffe17 	ldw	r2,-8(fp)
  819de0:	10c5883a 	add	r2,r2,r3
  819de4:	10800003 	ldbu	r2,0(r2)
  819de8:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
  819dec:	e0bffc17 	ldw	r2,-16(fp)
  819df0:	10800044 	addi	r2,r2,1
  819df4:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
  819df8:	e0bffd17 	ldw	r2,-12(fp)
  819dfc:	10800044 	addi	r2,r2,1
  819e00:	e0bffd15 	stw	r2,-12(fp)
  819e04:	e0bffd17 	ldw	r2,-12(fp)
  819e08:	10800210 	cmplti	r2,r2,8
  819e0c:	103fe71e 	bne	r2,zero,819dac <copy_file_record_name_to_string+0x20>
		if (file_record->name[index] != ' ') {
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ') {
  819e10:	e0bffe17 	ldw	r2,-8(fp)
  819e14:	10800203 	ldbu	r2,8(r2)
  819e18:	10803fcc 	andi	r2,r2,255
  819e1c:	10800820 	cmpeqi	r2,r2,32
  819e20:	1000261e 	bne	r2,zero,819ebc <copy_file_record_name_to_string+0x130>
		file_name[flength] = '.';
  819e24:	e0bffc17 	ldw	r2,-16(fp)
  819e28:	1007883a 	mov	r3,r2
  819e2c:	e0bfff17 	ldw	r2,-4(fp)
  819e30:	1887883a 	add	r3,r3,r2
  819e34:	00800b84 	movi	r2,46
  819e38:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
  819e3c:	e0bffc17 	ldw	r2,-16(fp)
  819e40:	10800044 	addi	r2,r2,1
  819e44:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++) {
  819e48:	e03ffd15 	stw	zero,-12(fp)
  819e4c:	00001806 	br	819eb0 <copy_file_record_name_to_string+0x124>
			if (file_record->extension[index] != ' ') {
  819e50:	e0fffd17 	ldw	r3,-12(fp)
  819e54:	e0bffe17 	ldw	r2,-8(fp)
  819e58:	1885883a 	add	r2,r3,r2
  819e5c:	10800204 	addi	r2,r2,8
  819e60:	10800003 	ldbu	r2,0(r2)
  819e64:	10803fcc 	andi	r2,r2,255
  819e68:	10800820 	cmpeqi	r2,r2,32
  819e6c:	10000d1e 	bne	r2,zero,819ea4 <copy_file_record_name_to_string+0x118>
				file_name[flength] = file_record->extension[index];
  819e70:	e0bffc17 	ldw	r2,-16(fp)
  819e74:	1007883a 	mov	r3,r2
  819e78:	e0bfff17 	ldw	r2,-4(fp)
  819e7c:	1889883a 	add	r4,r3,r2
  819e80:	e0fffd17 	ldw	r3,-12(fp)
  819e84:	e0bffe17 	ldw	r2,-8(fp)
  819e88:	1885883a 	add	r2,r3,r2
  819e8c:	10800204 	addi	r2,r2,8
  819e90:	10800003 	ldbu	r2,0(r2)
  819e94:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
  819e98:	e0bffc17 	ldw	r2,-16(fp)
  819e9c:	10800044 	addi	r2,r2,1
  819ea0:	e0bffc15 	stw	r2,-16(fp)
		}
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
  819ea4:	e0bffd17 	ldw	r2,-12(fp)
  819ea8:	10800044 	addi	r2,r2,1
  819eac:	e0bffd15 	stw	r2,-12(fp)
  819eb0:	e0bffd17 	ldw	r2,-12(fp)
  819eb4:	108000d0 	cmplti	r2,r2,3
  819eb8:	103fe51e 	bne	r2,zero,819e50 <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
  819ebc:	e0bffc17 	ldw	r2,-16(fp)
  819ec0:	1007883a 	mov	r3,r2
  819ec4:	e0bfff17 	ldw	r2,-4(fp)
  819ec8:	1885883a 	add	r2,r3,r2
  819ecc:	10000005 	stb	zero,0(r2)
}
  819ed0:	e037883a 	mov	sp,fp
  819ed4:	df000017 	ldw	fp,0(sp)
  819ed8:	dec00104 	addi	sp,sp,4
  819edc:	f800283a 	ret

00819ee0 <alt_up_sd_card_open_dev>:
///////////////////////////////////////////////////////////////////////////
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name) {
  819ee0:	defffc04 	addi	sp,sp,-16
  819ee4:	dfc00315 	stw	ra,12(sp)
  819ee8:	df000215 	stw	fp,8(sp)
  819eec:	df000204 	addi	fp,sp,8
  819ef0:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name,
			&alt_dev_list);
  819ef4:	e13fff17 	ldw	r4,-4(fp)
  819ef8:	014020b4 	movhi	r5,130
  819efc:	297c4104 	addi	r5,r5,-3836
  819f00:	081bbf80 	call	81bbf8 <alt_find_dev>
  819f04:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL) {
  819f08:	e0bffe17 	ldw	r2,-8(fp)
  819f0c:	1005003a 	cmpeq	r2,r2,zero
  819f10:	10001e1e 	bne	r2,zero,819f8c <alt_up_sd_card_open_dev+0xac>
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  819f14:	e0bffe17 	ldw	r2,-8(fp)
  819f18:	10800a17 	ldw	r2,40(r2)
  819f1c:	10808d04 	addi	r2,r2,564
  819f20:	d0a74f15 	stw	r2,-25284(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
  819f24:	e0bffe17 	ldw	r2,-8(fp)
  819f28:	10800a17 	ldw	r2,40(r2)
  819f2c:	10808904 	addi	r2,r2,548
  819f30:	d0a75015 	stw	r2,-25280(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
  819f34:	e0bffe17 	ldw	r2,-8(fp)
  819f38:	10800a17 	ldw	r2,40(r2)
  819f3c:	10808404 	addi	r2,r2,528
  819f40:	d0a75115 	stw	r2,-25276(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
  819f44:	e0bffe17 	ldw	r2,-8(fp)
  819f48:	10800a17 	ldw	r2,40(r2)
  819f4c:	10808c04 	addi	r2,r2,560
  819f50:	d0a75215 	stw	r2,-25272(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
  819f54:	e0bffe17 	ldw	r2,-8(fp)
  819f58:	10800a17 	ldw	r2,40(r2)
  819f5c:	10808b04 	addi	r2,r2,556
  819f60:	d0a75315 	stw	r2,-25268(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
  819f64:	e0bffe17 	ldw	r2,-8(fp)
  819f68:	10800a17 	ldw	r2,40(r2)
  819f6c:	d0a75415 	stw	r2,-25264(gp)
		device_pointer = dev;
  819f70:	e0bffe17 	ldw	r2,-8(fp)
  819f74:	d0a75715 	stw	r2,-25252(gp)
		initialized = false;
  819f78:	d0274d15 	stw	zero,-25292(gp)
		is_sd_card_formated_as_FAT16 = false;
  819f7c:	d0274e15 	stw	zero,-25288(gp)
		search_data.valid = false;
  819f80:	008020f4 	movhi	r2,131
  819f84:	10ab4304 	addi	r2,r2,-21236
  819f88:	10000415 	stw	zero,16(r2)
	}
	return dev;
  819f8c:	e0bffe17 	ldw	r2,-8(fp)
}
  819f90:	e037883a 	mov	sp,fp
  819f94:	dfc00117 	ldw	ra,4(sp)
  819f98:	df000017 	ldw	fp,0(sp)
  819f9c:	dec00204 	addi	sp,sp,8
  819fa0:	f800283a 	ret

00819fa4 <alt_up_sd_card_is_Present>:

bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
  819fa4:	defffd04 	addi	sp,sp,-12
  819fa8:	df000215 	stw	fp,8(sp)
  819fac:	df000204 	addi	fp,sp,8
	bool result = false;
  819fb0:	e03fff15 	stw	zero,-4(fp)

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  819fb4:	d0a75717 	ldw	r2,-25252(gp)
  819fb8:	1005003a 	cmpeq	r2,r2,zero
  819fbc:	1000081e 	bne	r2,zero,819fe0 <alt_up_sd_card_is_Present+0x3c>
  819fc0:	d0a74f17 	ldw	r2,-25284(gp)
  819fc4:	1080002b 	ldhuio	r2,0(r2)
  819fc8:	1080008c 	andi	r2,r2,2
  819fcc:	1005003a 	cmpeq	r2,r2,zero
  819fd0:	1000031e 	bne	r2,zero,819fe0 <alt_up_sd_card_is_Present+0x3c>
			& 0x02) != 0)) {
		result = true;
  819fd4:	00800044 	movi	r2,1
  819fd8:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  819fdc:	00001e06 	br	81a058 <alt_up_sd_card_is_Present+0xb4>
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
  819fe0:	d0a74d17 	ldw	r2,-25292(gp)
  819fe4:	10800058 	cmpnei	r2,r2,1
  819fe8:	10001b1e 	bne	r2,zero,81a058 <alt_up_sd_card_is_Present+0xb4>
		int index;

		initialized = false;
  819fec:	d0274d15 	stw	zero,-25292(gp)
		search_data.valid = false;
  819ff0:	008020f4 	movhi	r2,131
  819ff4:	10ab4304 	addi	r2,r2,-21236
  819ff8:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
  819ffc:	d0274e15 	stw	zero,-25288(gp)

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  81a000:	e03ffe15 	stw	zero,-8(fp)
  81a004:	00001106 	br	81a04c <alt_up_sd_card_is_Present+0xa8>
			active_files[index].in_use = false;
  81a008:	e0bffe17 	ldw	r2,-8(fp)
  81a00c:	00c020f4 	movhi	r3,131
  81a010:	18eb5d04 	addi	r3,r3,-21132
  81a014:	100491ba 	slli	r2,r2,6
  81a018:	10c5883a 	add	r2,r2,r3
  81a01c:	10800f04 	addi	r2,r2,60
  81a020:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
  81a024:	e0bffe17 	ldw	r2,-8(fp)
  81a028:	00c020f4 	movhi	r3,131
  81a02c:	18eb5d04 	addi	r3,r3,-21132
  81a030:	100491ba 	slli	r2,r2,6
  81a034:	10c5883a 	add	r2,r2,r3
  81a038:	10800e04 	addi	r2,r2,56
  81a03c:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  81a040:	e0bffe17 	ldw	r2,-8(fp)
  81a044:	10800044 	addi	r2,r2,1
  81a048:	e0bffe15 	stw	r2,-8(fp)
  81a04c:	e0bffe17 	ldw	r2,-8(fp)
  81a050:	10800510 	cmplti	r2,r2,20
  81a054:	103fec1e 	bne	r2,zero,81a008 <alt_up_sd_card_is_Present+0x64>
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
	return result;
  81a058:	e0bfff17 	ldw	r2,-4(fp)
}
  81a05c:	e037883a 	mov	sp,fp
  81a060:	df000017 	ldw	fp,0(sp)
  81a064:	dec00104 	addi	sp,sp,4
  81a068:	f800283a 	ret

0081a06c <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
  81a06c:	defffd04 	addi	sp,sp,-12
  81a070:	dfc00215 	stw	ra,8(sp)
  81a074:	df000115 	stw	fp,4(sp)
  81a078:	df000104 	addi	fp,sp,4
	bool result = false;
  81a07c:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
  81a080:	0819fa40 	call	819fa4 <alt_up_sd_card_is_Present>
  81a084:	1005003a 	cmpeq	r2,r2,zero
  81a088:	10000d1e 	bne	r2,zero,81a0c0 <alt_up_sd_card_is_FAT16+0x54>
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false) {
  81a08c:	d0a74d17 	ldw	r2,-25292(gp)
  81a090:	1004c03a 	cmpne	r2,r2,zero
  81a094:	1000071e 	bne	r2,zero,81a0b4 <alt_up_sd_card_is_FAT16+0x48>
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
  81a098:	081825c0 	call	81825c <Look_for_FAT16>
  81a09c:	d0a74e15 	stw	r2,-25288(gp)
			initialized = is_sd_card_formated_as_FAT16;
  81a0a0:	d0a74e17 	ldw	r2,-25288(gp)
  81a0a4:	d0a74d15 	stw	r2,-25292(gp)
			search_data.valid = false;
  81a0a8:	008020f4 	movhi	r2,131
  81a0ac:	10ab4304 	addi	r2,r2,-21236
  81a0b0:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
  81a0b4:	d0a74e17 	ldw	r2,-25288(gp)
  81a0b8:	e0bfff15 	stw	r2,-4(fp)
  81a0bc:	00000206 	br	81a0c8 <alt_up_sd_card_is_FAT16+0x5c>
	} else {
		// If not then you may as well not open the device.
		initialized = false;
  81a0c0:	d0274d15 	stw	zero,-25292(gp)
		is_sd_card_formated_as_FAT16 = false;
  81a0c4:	d0274e15 	stw	zero,-25288(gp)
	}

	return result;
  81a0c8:	e0bfff17 	ldw	r2,-4(fp)
}
  81a0cc:	e037883a 	mov	sp,fp
  81a0d0:	dfc00117 	ldw	ra,4(sp)
  81a0d4:	df000017 	ldw	fp,0(sp)
  81a0d8:	dec00204 	addi	sp,sp,8
  81a0dc:	f800283a 	ret

0081a0e0 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
  81a0e0:	deffea04 	addi	sp,sp,-88
  81a0e4:	dfc01515 	stw	ra,84(sp)
  81a0e8:	df001415 	stw	fp,80(sp)
  81a0ec:	df001404 	addi	fp,sp,80
  81a0f0:	e13ffe15 	stw	r4,-8(fp)
  81a0f4:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
  81a0f8:	00800084 	movi	r2,2
  81a0fc:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  81a100:	0819fa40 	call	819fa4 <alt_up_sd_card_is_Present>
  81a104:	1005003a 	cmpeq	r2,r2,zero
  81a108:	1000241e 	bne	r2,zero,81a19c <alt_up_sd_card_find_first+0xbc>
  81a10c:	d0a74e17 	ldw	r2,-25288(gp)
  81a110:	1005003a 	cmpeq	r2,r2,zero
  81a114:	1000211e 	bne	r2,zero,81a19c <alt_up_sd_card_find_first+0xbc>
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through,
  81a118:	e17fed04 	addi	r5,fp,-76
  81a11c:	e1bfee04 	addi	r6,fp,-72
  81a120:	e13ffe17 	ldw	r4,-8(fp)
  81a124:	0818a6c0 	call	818a6c <get_home_directory_cluster_for_file>
  81a128:	1005003a 	cmpeq	r2,r2,zero
  81a12c:	1000191e 	bne	r2,zero,81a194 <alt_up_sd_card_find_first+0xb4>
				&home_directory_cluster, &file_record)) {
			search_data.directory_root_cluster = home_directory_cluster;
  81a130:	e0bfed17 	ldw	r2,-76(fp)
  81a134:	1007883a 	mov	r3,r2
  81a138:	008020f4 	movhi	r2,131
  81a13c:	10ab4304 	addi	r2,r2,-21236
  81a140:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
  81a144:	e0bfed17 	ldw	r2,-76(fp)
  81a148:	1007883a 	mov	r3,r2
  81a14c:	008020f4 	movhi	r2,131
  81a150:	10ab4304 	addi	r2,r2,-21236
  81a154:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
  81a158:	008020f4 	movhi	r2,131
  81a15c:	10ab4304 	addi	r2,r2,-21236
  81a160:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
  81a164:	00c020f4 	movhi	r3,131
  81a168:	18eb4304 	addi	r3,r3,-21236
  81a16c:	00bfffc4 	movi	r2,-1
  81a170:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
  81a174:	00c020f4 	movhi	r3,131
  81a178:	18eb4304 	addi	r3,r3,-21236
  81a17c:	00800044 	movi	r2,1
  81a180:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
  81a184:	e13fff17 	ldw	r4,-4(fp)
  81a188:	081a1b40 	call	81a1b4 <alt_up_sd_card_find_next>
  81a18c:	e0bfec0d 	sth	r2,-80(fp)
  81a190:	00000206 	br	81a19c <alt_up_sd_card_find_first+0xbc>
		} else {
			result = 1;
  81a194:	00800044 	movi	r2,1
  81a198:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
  81a19c:	e0bfec0f 	ldh	r2,-80(fp)
}
  81a1a0:	e037883a 	mov	sp,fp
  81a1a4:	dfc00117 	ldw	ra,4(sp)
  81a1a8:	df000017 	ldw	fp,0(sp)
  81a1ac:	dec00204 	addi	sp,sp,8
  81a1b0:	f800283a 	ret

0081a1b4 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
  81a1b4:	deffe404 	addi	sp,sp,-112
  81a1b8:	dfc01b15 	stw	ra,108(sp)
  81a1bc:	df001a15 	stw	fp,104(sp)
  81a1c0:	df001a04 	addi	fp,sp,104
  81a1c4:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
  81a1c8:	00800084 	movi	r2,2
  81a1cc:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  81a1d0:	0819fa40 	call	819fa4 <alt_up_sd_card_is_Present>
  81a1d4:	1005003a 	cmpeq	r2,r2,zero
  81a1d8:	1000da1e 	bne	r2,zero,81a544 <alt_up_sd_card_find_next+0x390>
  81a1dc:	d0a74e17 	ldw	r2,-25288(gp)
  81a1e0:	1005003a 	cmpeq	r2,r2,zero
  81a1e4:	1000d71e 	bne	r2,zero,81a544 <alt_up_sd_card_find_next+0x390>
		if (search_data.valid) {
  81a1e8:	008020f4 	movhi	r2,131
  81a1ec:	10ab4304 	addi	r2,r2,-21236
  81a1f0:	10800417 	ldw	r2,16(r2)
  81a1f4:	1005003a 	cmpeq	r2,r2,zero
  81a1f8:	1000d01e 	bne	r2,zero,81a53c <alt_up_sd_card_find_next+0x388>
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
  81a1fc:	008020f4 	movhi	r2,131
  81a200:	10ab4304 	addi	r2,r2,-21236
  81a204:	10800117 	ldw	r2,4(r2)
  81a208:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0) {
  81a20c:	e0bfec17 	ldw	r2,-80(fp)
  81a210:	1004c03a 	cmpne	r2,r2,zero
  81a214:	1000511e 	bne	r2,zero,81a35c <alt_up_sd_card_find_next+0x1a8>
				// Searching through the root directory
				int max_root_dir_sectors = ((32
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
  81a218:	008020f4 	movhi	r2,131
  81a21c:	10ab4804 	addi	r2,r2,-21216
  81a220:	1080050b 	ldhu	r2,20(r2)
  81a224:	10bfffcc 	andi	r2,r2,65535
  81a228:	1008917a 	slli	r4,r2,5
  81a22c:	008020f4 	movhi	r2,131
  81a230:	10ab4804 	addi	r2,r2,-21216
  81a234:	1080030b 	ldhu	r2,12(r2)
  81a238:	117fffcc 	andi	r5,r2,65535
  81a23c:	080977c0 	call	80977c <__divsi3>
  81a240:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
  81a244:	008020f4 	movhi	r2,131
  81a248:	10ab4304 	addi	r2,r2,-21236
  81a24c:	10800217 	ldw	r2,8(r2)
  81a250:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector + 1;
  81a254:	008020f4 	movhi	r2,131
  81a258:	10ab4304 	addi	r2,r2,-21236
  81a25c:	1080030b 	ldhu	r2,12(r2)
  81a260:	10bfffcc 	andi	r2,r2,65535
  81a264:	10a0001c 	xori	r2,r2,32768
  81a268:	10a00004 	addi	r2,r2,-32768
  81a26c:	10800044 	addi	r2,r2,1
  81a270:	e0bfe915 	stw	r2,-92(fp)

				for (; sector_index < max_root_dir_sectors; sector_index++) {
  81a274:	00003306 	br	81a344 <alt_up_sd_card_find_next+0x190>
					if (Read_Sector_Data(sector_index
  81a278:	008020f4 	movhi	r2,131
  81a27c:	10ab4804 	addi	r2,r2,-21216
  81a280:	10c01317 	ldw	r3,76(r2)
  81a284:	e0bfea17 	ldw	r2,-88(fp)
  81a288:	1885883a 	add	r2,r3,r2
  81a28c:	1009883a 	mov	r4,r2
  81a290:	d1675517 	ldw	r5,-25260(gp)
  81a294:	08172900 	call	817290 <Read_Sector_Data>
  81a298:	1005003a 	cmpeq	r2,r2,zero
  81a29c:	10002c1e 	bne	r2,zero,81a350 <alt_up_sd_card_find_next+0x19c>
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
  81a2a0:	00002106 	br	81a328 <alt_up_sd_card_find_next+0x174>
							if (Read_File_Record_At_Offset(file_counter * 32,
  81a2a4:	e0bfe917 	ldw	r2,-92(fp)
  81a2a8:	1008917a 	slli	r4,r2,5
  81a2ac:	e1ffea17 	ldw	r7,-88(fp)
  81a2b0:	e17fee04 	addi	r5,fp,-72
  81a2b4:	000d883a 	mov	r6,zero
  81a2b8:	08176d80 	call	8176d8 <Read_File_Record_At_Offset>
  81a2bc:	1005003a 	cmpeq	r2,r2,zero
  81a2c0:	1000161e 	bne	r2,zero,81a31c <alt_up_sd_card_find_next+0x168>
									&file_record, 0, sector_index)) {
								if ((file_record.name[0] != 0)
  81a2c4:	e0bfee03 	ldbu	r2,-72(fp)
  81a2c8:	10803fcc 	andi	r2,r2,255
  81a2cc:	1005003a 	cmpeq	r2,r2,zero
  81a2d0:	1000121e 	bne	r2,zero,81a31c <alt_up_sd_card_find_next+0x168>
  81a2d4:	e0bfee03 	ldbu	r2,-72(fp)
  81a2d8:	10803fcc 	andi	r2,r2,255
  81a2dc:	10803960 	cmpeqi	r2,r2,229
  81a2e0:	10000e1e 	bne	r2,zero,81a31c <alt_up_sd_card_find_next+0x168>
										&& (file_record.name[0] != 0xe5)) {
									/* Update search structure. */
									search_data.file_index_in_sector
  81a2e4:	e0bfe917 	ldw	r2,-92(fp)
  81a2e8:	1007883a 	mov	r3,r2
  81a2ec:	008020f4 	movhi	r2,131
  81a2f0:	10ab4304 	addi	r2,r2,-21236
  81a2f4:	10c0030d 	sth	r3,12(r2)
											= file_counter;
									search_data.current_sector_in_cluster
  81a2f8:	e0ffea17 	ldw	r3,-88(fp)
  81a2fc:	008020f4 	movhi	r2,131
  81a300:	10ab4304 	addi	r2,r2,-21236
  81a304:	10c00215 	stw	r3,8(r2)
											= sector_index;

									/* Copy file name.*/
									copy_file_record_name_to_string(
  81a308:	e13fee04 	addi	r4,fp,-72
  81a30c:	e17ffe17 	ldw	r5,-8(fp)
  81a310:	0819d8c0 	call	819d8c <copy_file_record_name_to_string>
											&file_record, file_name);
									return 0;
  81a314:	e03fff15 	stw	zero,-4(fp)
  81a318:	00008c06 	br	81a54c <alt_up_sd_card_find_next+0x398>

				for (; sector_index < max_root_dir_sectors; sector_index++) {
					if (Read_Sector_Data(sector_index
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
  81a31c:	e0bfe917 	ldw	r2,-92(fp)
  81a320:	10800044 	addi	r2,r2,1
  81a324:	e0bfe915 	stw	r2,-92(fp)
  81a328:	e0bfe917 	ldw	r2,-92(fp)
  81a32c:	10800410 	cmplti	r2,r2,16
  81a330:	103fdc1e 	bne	r2,zero,81a2a4 <alt_up_sd_card_find_next+0xf0>
											&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
  81a334:	e03fe915 	stw	zero,-92(fp)
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector + 1;

				for (; sector_index < max_root_dir_sectors; sector_index++) {
  81a338:	e0bfea17 	ldw	r2,-88(fp)
  81a33c:	10800044 	addi	r2,r2,1
  81a340:	e0bfea15 	stw	r2,-88(fp)
  81a344:	e0ffea17 	ldw	r3,-88(fp)
  81a348:	e0bfeb17 	ldw	r2,-84(fp)
  81a34c:	18bfca16 	blt	r3,r2,81a278 <alt_up_sd_card_find_next+0xc4>
						file_counter = 0;
					} else {
						break;
					}
				}
				result = -1;
  81a350:	00bfffc4 	movi	r2,-1
  81a354:	e0bfed0d 	sth	r2,-76(fp)
  81a358:	00007a06 	br	81a544 <alt_up_sd_card_find_next+0x390>
			} else {
				int file_counter = search_data.file_index_in_sector + 1;
  81a35c:	008020f4 	movhi	r2,131
  81a360:	10ab4304 	addi	r2,r2,-21236
  81a364:	1080030b 	ldhu	r2,12(r2)
  81a368:	10bfffcc 	andi	r2,r2,65535
  81a36c:	10a0001c 	xori	r2,r2,32768
  81a370:	10a00004 	addi	r2,r2,-32768
  81a374:	10800044 	addi	r2,r2,1
  81a378:	e0bfe815 	stw	r2,-96(fp)
				do {
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
  81a37c:	e0bfec17 	ldw	r2,-80(fp)
  81a380:	10ffff84 	addi	r3,r2,-2
  81a384:	008020f4 	movhi	r2,131
  81a388:	10ab4804 	addi	r2,r2,-21216
  81a38c:	10800383 	ldbu	r2,14(r2)
  81a390:	10803fcc 	andi	r2,r2,255
  81a394:	1885383a 	mul	r2,r3,r2
  81a398:	1007883a 	mov	r3,r2
  81a39c:	008020f4 	movhi	r2,131
  81a3a0:	10ab4804 	addi	r2,r2,-21216
  81a3a4:	10801417 	ldw	r2,80(r2)
  81a3a8:	1885883a 	add	r2,r3,r2
  81a3ac:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
  81a3b0:	008020f4 	movhi	r2,131
  81a3b4:	10ab4304 	addi	r2,r2,-21236
  81a3b8:	10800217 	ldw	r2,8(r2)
  81a3bc:	e0bfe615 	stw	r2,-104(fp)

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
  81a3c0:	00003406 	br	81a494 <alt_up_sd_card_find_next+0x2e0>
						if (Read_Sector_Data(sector_index + start_sector,
  81a3c4:	e0ffe617 	ldw	r3,-104(fp)
  81a3c8:	e0bfe717 	ldw	r2,-100(fp)
  81a3cc:	1889883a 	add	r4,r3,r2
  81a3d0:	d1675517 	ldw	r5,-25260(gp)
  81a3d4:	08172900 	call	817290 <Read_Sector_Data>
  81a3d8:	1005003a 	cmpeq	r2,r2,zero
  81a3dc:	1000331e 	bne	r2,zero,81a4ac <alt_up_sd_card_find_next+0x2f8>
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
  81a3e0:	00002506 	br	81a478 <alt_up_sd_card_find_next+0x2c4>
								if (Read_File_Record_At_Offset(file_counter
  81a3e4:	e0bfe817 	ldw	r2,-96(fp)
  81a3e8:	1008917a 	slli	r4,r2,5
  81a3ec:	e1bfec17 	ldw	r6,-80(fp)
  81a3f0:	e1ffe617 	ldw	r7,-104(fp)
  81a3f4:	e17fee04 	addi	r5,fp,-72
  81a3f8:	08176d80 	call	8176d8 <Read_File_Record_At_Offset>
  81a3fc:	1005003a 	cmpeq	r2,r2,zero
  81a400:	10001a1e 	bne	r2,zero,81a46c <alt_up_sd_card_find_next+0x2b8>
										* 32, &file_record, cluster,
										sector_index)) {
									if ((file_record.name[0] != 0)
  81a404:	e0bfee03 	ldbu	r2,-72(fp)
  81a408:	10803fcc 	andi	r2,r2,255
  81a40c:	1005003a 	cmpeq	r2,r2,zero
  81a410:	1000161e 	bne	r2,zero,81a46c <alt_up_sd_card_find_next+0x2b8>
  81a414:	e0bfee03 	ldbu	r2,-72(fp)
  81a418:	10803fcc 	andi	r2,r2,255
  81a41c:	10803960 	cmpeqi	r2,r2,229
  81a420:	1000121e 	bne	r2,zero,81a46c <alt_up_sd_card_find_next+0x2b8>
											&& (file_record.name[0] != 0xe5)) {
										/* Update search structure. */
										search_data.current_cluster_index
  81a424:	e0ffec17 	ldw	r3,-80(fp)
  81a428:	008020f4 	movhi	r2,131
  81a42c:	10ab4304 	addi	r2,r2,-21236
  81a430:	10c00115 	stw	r3,4(r2)
												= cluster;
										search_data.file_index_in_sector
  81a434:	e0bfe817 	ldw	r2,-96(fp)
  81a438:	1007883a 	mov	r3,r2
  81a43c:	008020f4 	movhi	r2,131
  81a440:	10ab4304 	addi	r2,r2,-21236
  81a444:	10c0030d 	sth	r3,12(r2)
												= file_counter;
										search_data.current_sector_in_cluster
  81a448:	e0ffe617 	ldw	r3,-104(fp)
  81a44c:	008020f4 	movhi	r2,131
  81a450:	10ab4304 	addi	r2,r2,-21236
  81a454:	10c00215 	stw	r3,8(r2)
												= sector_index;

										/* Copy file name.*/
										copy_file_record_name_to_string(
  81a458:	e13fee04 	addi	r4,fp,-72
  81a45c:	e17ffe17 	ldw	r5,-8(fp)
  81a460:	0819d8c0 	call	819d8c <copy_file_record_name_to_string>
												&file_record, file_name);
										return 0;
  81a464:	e03fff15 	stw	zero,-4(fp)
  81a468:	00003806 	br	81a54c <alt_up_sd_card_find_next+0x398>
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
  81a46c:	e0bfe817 	ldw	r2,-96(fp)
  81a470:	10800044 	addi	r2,r2,1
  81a474:	e0bfe815 	stw	r2,-96(fp)
  81a478:	e0bfe817 	ldw	r2,-96(fp)
  81a47c:	10800410 	cmplti	r2,r2,16
  81a480:	103fd81e 	bne	r2,zero,81a3e4 <alt_up_sd_card_find_next+0x230>
												&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
  81a484:	e03fe815 	stw	zero,-96(fp)
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
  81a488:	e0bfe617 	ldw	r2,-104(fp)
  81a48c:	10800044 	addi	r2,r2,1
  81a490:	e0bfe615 	stw	r2,-104(fp)
  81a494:	008020f4 	movhi	r2,131
  81a498:	10ab4804 	addi	r2,r2,-21216
  81a49c:	10800383 	ldbu	r2,14(r2)
  81a4a0:	10c03fcc 	andi	r3,r2,255
  81a4a4:	e0bfe617 	ldw	r2,-104(fp)
  81a4a8:	10ffc616 	blt	r2,r3,81a3c4 <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster) {
  81a4ac:	008020f4 	movhi	r2,131
  81a4b0:	10ab4804 	addi	r2,r2,-21216
  81a4b4:	10800383 	ldbu	r2,14(r2)
  81a4b8:	10c03fcc 	andi	r3,r2,255
  81a4bc:	e0bfe617 	ldw	r2,-104(fp)
  81a4c0:	10c01a16 	blt	r2,r3,81a52c <alt_up_sd_card_find_next+0x378>
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster)) {
  81a4c4:	e13fec17 	ldw	r4,-80(fp)
  81a4c8:	e17fed84 	addi	r5,fp,-74
  81a4cc:	081738c0 	call	81738c <get_cluster_flag>
  81a4d0:	1005003a 	cmpeq	r2,r2,zero
  81a4d4:	1000131e 	bne	r2,zero,81a524 <alt_up_sd_card_find_next+0x370>
							if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  81a4d8:	e0bfed8b 	ldhu	r2,-74(fp)
  81a4dc:	10bfffcc 	andi	r2,r2,65535
  81a4e0:	10a0001c 	xori	r2,r2,32768
  81a4e4:	10a00004 	addi	r2,r2,-32768
  81a4e8:	10fffe0c 	andi	r3,r2,65528
  81a4ec:	00bffe14 	movui	r2,65528
  81a4f0:	1880051e 	bne	r3,r2,81a508 <alt_up_sd_card_find_next+0x354>
								result = -1;
  81a4f4:	00bfffc4 	movi	r2,-1
  81a4f8:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
  81a4fc:	008020f4 	movhi	r2,131
  81a500:	10ab4304 	addi	r2,r2,-21236
  81a504:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
  81a508:	e0bfed8b 	ldhu	r2,-74(fp)
  81a50c:	10bfffcc 	andi	r2,r2,65535
  81a510:	10a0001c 	xori	r2,r2,32768
  81a514:	10a00004 	addi	r2,r2,-32768
  81a518:	10bffe0c 	andi	r2,r2,65528
  81a51c:	e0bfec15 	stw	r2,-80(fp)
  81a520:	00000206 	br	81a52c <alt_up_sd_card_find_next+0x378>
						} else {
							// Error encountered.                 
							result = -1;
  81a524:	00bfffc4 	movi	r2,-1
  81a528:	e0bfed0d 	sth	r2,-76(fp)
						}
					}
				} while (cluster < 0x0000fff8);
  81a52c:	e0ffec17 	ldw	r3,-80(fp)
  81a530:	00bffdd4 	movui	r2,65527
  81a534:	10ff910e 	bge	r2,r3,81a37c <alt_up_sd_card_find_next+0x1c8>
  81a538:	00000206 	br	81a544 <alt_up_sd_card_find_next+0x390>
			}
		} else {
			// Call Find_First first.
			result = 3;
  81a53c:	008000c4 	movi	r2,3
  81a540:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
  81a544:	e0bfed0f 	ldh	r2,-76(fp)
  81a548:	e0bfff15 	stw	r2,-4(fp)
  81a54c:	e0bfff17 	ldw	r2,-4(fp)
}
  81a550:	e037883a 	mov	sp,fp
  81a554:	dfc00117 	ldw	ra,4(sp)
  81a558:	df000017 	ldw	fp,0(sp)
  81a55c:	dec00204 	addi	sp,sp,8
  81a560:	f800283a 	ret

0081a564 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
  81a564:	deffe804 	addi	sp,sp,-96
  81a568:	dfc01715 	stw	ra,92(sp)
  81a56c:	df001615 	stw	fp,88(sp)
  81a570:	df001604 	addi	fp,sp,88
  81a574:	e13ffd15 	stw	r4,-12(fp)
  81a578:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
  81a57c:	00bfffc4 	movi	r2,-1
  81a580:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  81a584:	0819fa40 	call	819fa4 <alt_up_sd_card_is_Present>
  81a588:	1005003a 	cmpeq	r2,r2,zero
  81a58c:	1000d71e 	bne	r2,zero,81a8ec <alt_up_sd_card_fopen+0x388>
  81a590:	d0a74e17 	ldw	r2,-25288(gp)
  81a594:	1005003a 	cmpeq	r2,r2,zero
  81a598:	1000d41e 	bne	r2,zero,81a8ec <alt_up_sd_card_fopen+0x388>
		unsigned int home_directory_cluster = 0;
  81a59c:	e03fec15 	stw	zero,-80(fp)
		 * Rules:
		 *  - no spaces
		 *  - at most 12 chatacters per name, with a period in 9th position.
		 *  - a / or a \ every at most 12 characters.
		 */
		filename_to_upper_case(name);
  81a5a0:	e13ffd17 	ldw	r4,-12(fp)
  81a5a4:	08183600 	call	818360 <filename_to_upper_case>
		if (check_file_name_for_FAT16_compliance(name)) {
  81a5a8:	e13ffd17 	ldw	r4,-12(fp)
  81a5ac:	08184300 	call	818430 <check_file_name_for_FAT16_compliance>
  81a5b0:	1005003a 	cmpeq	r2,r2,zero
  81a5b4:	1000cd1e 	bne	r2,zero,81a8ec <alt_up_sd_card_fopen+0x388>
			int index;

			/* Get home directory cluster location for the specified file. 0 means root directory. */
			if (!get_home_directory_cluster_for_file(name,
  81a5b8:	e17fec04 	addi	r5,fp,-80
  81a5bc:	e1bfed04 	addi	r6,fp,-76
  81a5c0:	e13ffd17 	ldw	r4,-12(fp)
  81a5c4:	0818a6c0 	call	818a6c <get_home_directory_cluster_for_file>
  81a5c8:	1004c03a 	cmpne	r2,r2,zero
  81a5cc:	1000031e 	bne	r2,zero,81a5dc <alt_up_sd_card_fopen+0x78>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
  81a5d0:	e0bfeb0f 	ldh	r2,-84(fp)
  81a5d4:	e0bfff15 	stw	r2,-4(fp)
  81a5d8:	0000c606 	br	81a8f4 <alt_up_sd_card_fopen+0x390>
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
  81a5dc:	e03fea15 	stw	zero,-88(fp)
  81a5e0:	00000f06 	br	81a620 <alt_up_sd_card_fopen+0xbc>
				if (active_files[index].in_use == false) {
  81a5e4:	e0bfea17 	ldw	r2,-88(fp)
  81a5e8:	00c020f4 	movhi	r3,131
  81a5ec:	18eb5d04 	addi	r3,r3,-21132
  81a5f0:	100491ba 	slli	r2,r2,6
  81a5f4:	10c5883a 	add	r2,r2,r3
  81a5f8:	10800f04 	addi	r2,r2,60
  81a5fc:	10800017 	ldw	r2,0(r2)
  81a600:	1004c03a 	cmpne	r2,r2,zero
  81a604:	1000031e 	bne	r2,zero,81a614 <alt_up_sd_card_fopen+0xb0>
					file_record_index = index;
  81a608:	e0bfea17 	ldw	r2,-88(fp)
  81a60c:	e0bfeb0d 	sth	r2,-84(fp)
					break;
  81a610:	00000606 	br	81a62c <alt_up_sd_card_fopen+0xc8>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
  81a614:	e0bfea17 	ldw	r2,-88(fp)
  81a618:	10800044 	addi	r2,r2,1
  81a61c:	e0bfea15 	stw	r2,-88(fp)
  81a620:	e0bfea17 	ldw	r2,-88(fp)
  81a624:	10800510 	cmplti	r2,r2,20
  81a628:	103fee1e 	bne	r2,zero,81a5e4 <alt_up_sd_card_fopen+0x80>
				if (active_files[index].in_use == false) {
					file_record_index = index;
					break;
				}
			}
			if (file_record_index >= 0) {
  81a62c:	e0bfeb0f 	ldh	r2,-84(fp)
  81a630:	1004803a 	cmplt	r2,r2,zero
  81a634:	1000ad1e 	bne	r2,zero,81a8ec <alt_up_sd_card_fopen+0x388>
				/* If file record is found, then look for the specified file. If the create flag is set to true
				 * and the file is not found, then it should be created in the current directory.
				 */

				if (find_file_in_directory(home_directory_cluster, name,
  81a638:	e0bfec17 	ldw	r2,-80(fp)
  81a63c:	1009883a 	mov	r4,r2
  81a640:	e0bfeb0f 	ldh	r2,-84(fp)
  81a644:	100491ba 	slli	r2,r2,6
  81a648:	1007883a 	mov	r3,r2
  81a64c:	008020f4 	movhi	r2,131
  81a650:	10ab5d04 	addi	r2,r2,-21132
  81a654:	188d883a 	add	r6,r3,r2
  81a658:	e17ffd17 	ldw	r5,-12(fp)
  81a65c:	0818f800 	call	818f80 <find_file_in_directory>
  81a660:	1005003a 	cmpeq	r2,r2,zero
  81a664:	10007d1e 	bne	r2,zero,81a85c <alt_up_sd_card_fopen+0x2f8>
						&(active_files[file_record_index]))) {
					if (create) {
  81a668:	e0bffe17 	ldw	r2,-8(fp)
  81a66c:	1005003a 	cmpeq	r2,r2,zero
  81a670:	1000031e 	bne	r2,zero,81a680 <alt_up_sd_card_fopen+0x11c>
						/* Do not allow overwriting existing files for now. */
						return -1;
  81a674:	00bfffc4 	movi	r2,-1
  81a678:	e0bfff15 	stw	r2,-4(fp)
  81a67c:	00009d06 	br	81a8f4 <alt_up_sd_card_fopen+0x390>
					}
					active_files[file_record_index].current_cluster_index
  81a680:	e17feb0f 	ldh	r5,-84(fp)
  81a684:	e0bfeb0f 	ldh	r2,-84(fp)
  81a688:	00c020f4 	movhi	r3,131
  81a68c:	18eb5d04 	addi	r3,r3,-21132
  81a690:	100491ba 	slli	r2,r2,6
  81a694:	10c5883a 	add	r2,r2,r3
  81a698:	10800504 	addi	r2,r2,20
  81a69c:	1080008b 	ldhu	r2,2(r2)
  81a6a0:	113fffcc 	andi	r4,r2,65535
  81a6a4:	00c020f4 	movhi	r3,131
  81a6a8:	18eb5d04 	addi	r3,r3,-21132
  81a6ac:	280491ba 	slli	r2,r5,6
  81a6b0:	10c5883a 	add	r2,r2,r3
  81a6b4:	10800704 	addi	r2,r2,28
  81a6b8:	11000015 	stw	r4,0(r2)
							= active_files[file_record_index].start_cluster_index;
					active_files[file_record_index].current_sector_in_cluster
  81a6bc:	e0bfeb0f 	ldh	r2,-84(fp)
  81a6c0:	00c020f4 	movhi	r3,131
  81a6c4:	18eb5d04 	addi	r3,r3,-21132
  81a6c8:	100491ba 	slli	r2,r2,6
  81a6cc:	10c5883a 	add	r2,r2,r3
  81a6d0:	10800804 	addi	r2,r2,32
  81a6d4:	10000015 	stw	zero,0(r2)
							= 0;
					active_files[file_record_index].current_byte_position = 0;
  81a6d8:	e0bfeb0f 	ldh	r2,-84(fp)
  81a6dc:	00c020f4 	movhi	r3,131
  81a6e0:	18eb5d04 	addi	r3,r3,-21132
  81a6e4:	100491ba 	slli	r2,r2,6
  81a6e8:	10c5883a 	add	r2,r2,r3
  81a6ec:	10800904 	addi	r2,r2,36
  81a6f0:	10000015 	stw	zero,0(r2)
					active_files[file_record_index].in_use = true;
  81a6f4:	e0bfeb0f 	ldh	r2,-84(fp)
  81a6f8:	00c020f4 	movhi	r3,131
  81a6fc:	18eb5d04 	addi	r3,r3,-21132
  81a700:	100491ba 	slli	r2,r2,6
  81a704:	10c5883a 	add	r2,r2,r3
  81a708:	10c00f04 	addi	r3,r2,60
  81a70c:	00800044 	movi	r2,1
  81a710:	18800015 	stw	r2,0(r3)
					active_files[file_record_index].modified = false;
  81a714:	e0bfeb0f 	ldh	r2,-84(fp)
  81a718:	00c020f4 	movhi	r3,131
  81a71c:	18eb5d04 	addi	r3,r3,-21132
  81a720:	100491ba 	slli	r2,r2,6
  81a724:	10c5883a 	add	r2,r2,r3
  81a728:	10800e04 	addi	r2,r2,56
  81a72c:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
  81a730:	e03fea15 	stw	zero,-88(fp)
  81a734:	00004506 	br	81a84c <alt_up_sd_card_fopen+0x2e8>
						if ((file_record_index != index)
  81a738:	e0ffeb0f 	ldh	r3,-84(fp)
  81a73c:	e0bfea17 	ldw	r2,-88(fp)
  81a740:	18803f26 	beq	r3,r2,81a840 <alt_up_sd_card_fopen+0x2dc>
  81a744:	e0bfea17 	ldw	r2,-88(fp)
  81a748:	00c020f4 	movhi	r3,131
  81a74c:	18eb5d04 	addi	r3,r3,-21132
  81a750:	100491ba 	slli	r2,r2,6
  81a754:	10c5883a 	add	r2,r2,r3
  81a758:	10800f04 	addi	r2,r2,60
  81a75c:	10800017 	ldw	r2,0(r2)
  81a760:	10800058 	cmpnei	r2,r2,1
  81a764:	1000361e 	bne	r2,zero,81a840 <alt_up_sd_card_fopen+0x2dc>
								&& (active_files[index].in_use == true)) {
							if ((active_files[file_record_index].file_record_cluster
  81a768:	e0bfeb0f 	ldh	r2,-84(fp)
  81a76c:	00c020f4 	movhi	r3,131
  81a770:	18eb5d04 	addi	r3,r3,-21132
  81a774:	100491ba 	slli	r2,r2,6
  81a778:	10c5883a 	add	r2,r2,r3
  81a77c:	10800a04 	addi	r2,r2,40
  81a780:	11000017 	ldw	r4,0(r2)
  81a784:	e0bfea17 	ldw	r2,-88(fp)
  81a788:	00c020f4 	movhi	r3,131
  81a78c:	18eb5d04 	addi	r3,r3,-21132
  81a790:	100491ba 	slli	r2,r2,6
  81a794:	10c5883a 	add	r2,r2,r3
  81a798:	10800a04 	addi	r2,r2,40
  81a79c:	10800017 	ldw	r2,0(r2)
  81a7a0:	2080271e 	bne	r4,r2,81a840 <alt_up_sd_card_fopen+0x2dc>
  81a7a4:	e0bfeb0f 	ldh	r2,-84(fp)
  81a7a8:	00c020f4 	movhi	r3,131
  81a7ac:	18eb5d04 	addi	r3,r3,-21132
  81a7b0:	100491ba 	slli	r2,r2,6
  81a7b4:	10c5883a 	add	r2,r2,r3
  81a7b8:	10800b04 	addi	r2,r2,44
  81a7bc:	11000017 	ldw	r4,0(r2)
  81a7c0:	e0bfea17 	ldw	r2,-88(fp)
  81a7c4:	00c020f4 	movhi	r3,131
  81a7c8:	18eb5d04 	addi	r3,r3,-21132
  81a7cc:	100491ba 	slli	r2,r2,6
  81a7d0:	10c5883a 	add	r2,r2,r3
  81a7d4:	10800b04 	addi	r2,r2,44
  81a7d8:	10800017 	ldw	r2,0(r2)
  81a7dc:	2080181e 	bne	r4,r2,81a840 <alt_up_sd_card_fopen+0x2dc>
  81a7e0:	e0bfeb0f 	ldh	r2,-84(fp)
  81a7e4:	00c020f4 	movhi	r3,131
  81a7e8:	18eb5d04 	addi	r3,r3,-21132
  81a7ec:	100491ba 	slli	r2,r2,6
  81a7f0:	10c5883a 	add	r2,r2,r3
  81a7f4:	10800c04 	addi	r2,r2,48
  81a7f8:	1100000b 	ldhu	r4,0(r2)
  81a7fc:	e0bfea17 	ldw	r2,-88(fp)
  81a800:	00c020f4 	movhi	r3,131
  81a804:	18eb5d04 	addi	r3,r3,-21132
  81a808:	100491ba 	slli	r2,r2,6
  81a80c:	10c5883a 	add	r2,r2,r3
  81a810:	10800c04 	addi	r2,r2,48
  81a814:	1080000b 	ldhu	r2,0(r2)
  81a818:	20ffffcc 	andi	r3,r4,65535
  81a81c:	18e0001c 	xori	r3,r3,32768
  81a820:	18e00004 	addi	r3,r3,-32768
  81a824:	10bfffcc 	andi	r2,r2,65535
  81a828:	10a0001c 	xori	r2,r2,32768
  81a82c:	10a00004 	addi	r2,r2,-32768
  81a830:	1880031e 	bne	r3,r2,81a840 <alt_up_sd_card_fopen+0x2dc>
									&& (active_files[file_record_index].file_record_sector_in_cluster
											== active_files[index].file_record_sector_in_cluster)
									&& (active_files[file_record_index].file_record_offset
											== active_files[index].file_record_offset)) {
								// file already in use.
								file_record_index = -2;
  81a834:	00bfff84 	movi	r2,-2
  81a838:	e0bfeb0d 	sth	r2,-84(fp)
								break;
  81a83c:	00002b06 	br	81a8ec <alt_up_sd_card_fopen+0x388>
					active_files[file_record_index].current_byte_position = 0;
					active_files[file_record_index].in_use = true;
					active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
  81a840:	e0bfea17 	ldw	r2,-88(fp)
  81a844:	10800044 	addi	r2,r2,1
  81a848:	e0bfea15 	stw	r2,-88(fp)
  81a84c:	e0bfea17 	ldw	r2,-88(fp)
  81a850:	10800510 	cmplti	r2,r2,20
  81a854:	103fb81e 	bne	r2,zero,81a738 <alt_up_sd_card_fopen+0x1d4>
  81a858:	00002406 	br	81a8ec <alt_up_sd_card_fopen+0x388>
								break;
							}
						}
					}

				} else if (create) {
  81a85c:	e0bffe17 	ldw	r2,-8(fp)
  81a860:	1005003a 	cmpeq	r2,r2,zero
  81a864:	10001f1e 	bne	r2,zero,81a8e4 <alt_up_sd_card_fopen+0x380>
					/* Create file if needed. */
					if (create_file(name, &(active_files[file_record_index]),
  81a868:	e0bfeb0f 	ldh	r2,-84(fp)
  81a86c:	100491ba 	slli	r2,r2,6
  81a870:	1007883a 	mov	r3,r2
  81a874:	008020f4 	movhi	r2,131
  81a878:	10ab5d04 	addi	r2,r2,-21132
  81a87c:	188b883a 	add	r5,r3,r2
  81a880:	e1bfed04 	addi	r6,fp,-76
  81a884:	e13ffd17 	ldw	r4,-12(fp)
  81a888:	0819ab80 	call	819ab8 <create_file>
  81a88c:	1005003a 	cmpeq	r2,r2,zero
  81a890:	1000111e 	bne	r2,zero,81a8d8 <alt_up_sd_card_fopen+0x374>
							&home_dir)) {
						active_files[file_record_index].in_use = true;
  81a894:	e0bfeb0f 	ldh	r2,-84(fp)
  81a898:	00c020f4 	movhi	r3,131
  81a89c:	18eb5d04 	addi	r3,r3,-21132
  81a8a0:	100491ba 	slli	r2,r2,6
  81a8a4:	10c5883a 	add	r2,r2,r3
  81a8a8:	10c00f04 	addi	r3,r2,60
  81a8ac:	00800044 	movi	r2,1
  81a8b0:	18800015 	stw	r2,0(r3)
						active_files[file_record_index].modified = true;
  81a8b4:	e0bfeb0f 	ldh	r2,-84(fp)
  81a8b8:	00c020f4 	movhi	r3,131
  81a8bc:	18eb5d04 	addi	r3,r3,-21132
  81a8c0:	100491ba 	slli	r2,r2,6
  81a8c4:	10c5883a 	add	r2,r2,r3
  81a8c8:	10c00e04 	addi	r3,r2,56
  81a8cc:	00800044 	movi	r2,1
  81a8d0:	18800015 	stw	r2,0(r3)
  81a8d4:	00000506 	br	81a8ec <alt_up_sd_card_fopen+0x388>
					} else {
						/* If file creation fails then return an invalid file handle. */
						file_record_index = -1;
  81a8d8:	00bfffc4 	movi	r2,-1
  81a8dc:	e0bfeb0d 	sth	r2,-84(fp)
  81a8e0:	00000206 	br	81a8ec <alt_up_sd_card_fopen+0x388>
					}
				} else {
					/* Otherwise the file could not be opened.*/
					file_record_index = -1;
  81a8e4:	00bfffc4 	movi	r2,-1
  81a8e8:	e0bfeb0d 	sth	r2,-84(fp)
				}
			}
		}
	}

	return file_record_index;
  81a8ec:	e0bfeb0f 	ldh	r2,-84(fp)
  81a8f0:	e0bfff15 	stw	r2,-4(fp)
  81a8f4:	e0bfff17 	ldw	r2,-4(fp)
}
  81a8f8:	e037883a 	mov	sp,fp
  81a8fc:	dfc00117 	ldw	ra,4(sp)
  81a900:	df000017 	ldw	fp,0(sp)
  81a904:	dec00204 	addi	sp,sp,8
  81a908:	f800283a 	ret

0081a90c <alt_up_sd_card_set_attributes>:

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  81a90c:	defffd04 	addi	sp,sp,-12
  81a910:	df000215 	stw	fp,8(sp)
  81a914:	df000204 	addi	fp,sp,8
  81a918:	e13ffe0d 	sth	r4,-8(fp)
  81a91c:	e17fff0d 	sth	r5,-4(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  81a920:	e0bffe0f 	ldh	r2,-8(fp)
  81a924:	1004803a 	cmplt	r2,r2,zero
  81a928:	1000181e 	bne	r2,zero,81a98c <alt_up_sd_card_set_attributes+0x80>
  81a92c:	e0bffe0f 	ldh	r2,-8(fp)
  81a930:	10800508 	cmpgei	r2,r2,20
  81a934:	1000151e 	bne	r2,zero,81a98c <alt_up_sd_card_set_attributes+0x80>
		if (active_files[file_handle].in_use) {
  81a938:	e0bffe0f 	ldh	r2,-8(fp)
  81a93c:	00c020f4 	movhi	r3,131
  81a940:	18eb5d04 	addi	r3,r3,-21132
  81a944:	100491ba 	slli	r2,r2,6
  81a948:	10c5883a 	add	r2,r2,r3
  81a94c:	10800f04 	addi	r2,r2,60
  81a950:	10800017 	ldw	r2,0(r2)
  81a954:	1005003a 	cmpeq	r2,r2,zero
  81a958:	10000c1e 	bne	r2,zero,81a98c <alt_up_sd_card_set_attributes+0x80>
			active_files[file_handle].attributes
  81a95c:	e17ffe0f 	ldh	r5,-8(fp)
  81a960:	e0bfff0b 	ldhu	r2,-4(fp)
  81a964:	1007883a 	mov	r3,r2
  81a968:	00bfffc4 	movi	r2,-1
  81a96c:	1884703a 	and	r2,r3,r2
  81a970:	1009883a 	mov	r4,r2
  81a974:	00c020f4 	movhi	r3,131
  81a978:	18eb5d04 	addi	r3,r3,-21132
  81a97c:	280491ba 	slli	r2,r5,6
  81a980:	10c5883a 	add	r2,r2,r3
  81a984:	10800204 	addi	r2,r2,8
  81a988:	110000c5 	stb	r4,3(r2)
					= ((char) (attributes & 0x00ff));
		}
	}
}
  81a98c:	e037883a 	mov	sp,fp
  81a990:	df000017 	ldw	fp,0(sp)
  81a994:	dec00104 	addi	sp,sp,4
  81a998:	f800283a 	ret

0081a99c <alt_up_sd_card_get_attributes>:

short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  81a99c:	defffd04 	addi	sp,sp,-12
  81a9a0:	df000215 	stw	fp,8(sp)
  81a9a4:	df000204 	addi	fp,sp,8
  81a9a8:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
  81a9ac:	00bfffc4 	movi	r2,-1
  81a9b0:	e0bffe0d 	sth	r2,-8(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  81a9b4:	e0bfff0f 	ldh	r2,-4(fp)
  81a9b8:	1004803a 	cmplt	r2,r2,zero
  81a9bc:	1000151e 	bne	r2,zero,81aa14 <alt_up_sd_card_get_attributes+0x78>
  81a9c0:	e0bfff0f 	ldh	r2,-4(fp)
  81a9c4:	10800508 	cmpgei	r2,r2,20
  81a9c8:	1000121e 	bne	r2,zero,81aa14 <alt_up_sd_card_get_attributes+0x78>
		if (active_files[file_handle].in_use) {
  81a9cc:	e0bfff0f 	ldh	r2,-4(fp)
  81a9d0:	00c020f4 	movhi	r3,131
  81a9d4:	18eb5d04 	addi	r3,r3,-21132
  81a9d8:	100491ba 	slli	r2,r2,6
  81a9dc:	10c5883a 	add	r2,r2,r3
  81a9e0:	10800f04 	addi	r2,r2,60
  81a9e4:	10800017 	ldw	r2,0(r2)
  81a9e8:	1005003a 	cmpeq	r2,r2,zero
  81a9ec:	1000091e 	bne	r2,zero,81aa14 <alt_up_sd_card_get_attributes+0x78>
			result = ((active_files[file_handle].attributes) & 0x00ff);
  81a9f0:	e0bfff0f 	ldh	r2,-4(fp)
  81a9f4:	00c020f4 	movhi	r3,131
  81a9f8:	18eb5d04 	addi	r3,r3,-21132
  81a9fc:	100491ba 	slli	r2,r2,6
  81aa00:	10c5883a 	add	r2,r2,r3
  81aa04:	10800204 	addi	r2,r2,8
  81aa08:	108000c3 	ldbu	r2,3(r2)
  81aa0c:	10803fcc 	andi	r2,r2,255
  81aa10:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
  81aa14:	e0bffe0f 	ldh	r2,-8(fp)
}
  81aa18:	e037883a 	mov	sp,fp
  81aa1c:	df000017 	ldw	fp,0(sp)
  81aa20:	dec00104 	addi	sp,sp,4
  81aa24:	f800283a 	ret

0081aa28 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
  81aa28:	defffa04 	addi	sp,sp,-24
  81aa2c:	dfc00515 	stw	ra,20(sp)
  81aa30:	df000415 	stw	fp,16(sp)
  81aa34:	df000404 	addi	fp,sp,16
  81aa38:	e13ffe0d 	sth	r4,-8(fp)
	short int ch = -1;
  81aa3c:	00bfffc4 	movi	r2,-1
  81aa40:	e0bffd0d 	sth	r2,-12(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  81aa44:	e0bffe0f 	ldh	r2,-8(fp)
  81aa48:	1004803a 	cmplt	r2,r2,zero
  81aa4c:	1000d31e 	bne	r2,zero,81ad9c <alt_up_sd_card_read+0x374>
  81aa50:	e0bffe0f 	ldh	r2,-8(fp)
  81aa54:	10800508 	cmpgei	r2,r2,20
  81aa58:	1000d01e 	bne	r2,zero,81ad9c <alt_up_sd_card_read+0x374>
		if (active_files[file_handle].in_use) {
  81aa5c:	e0bffe0f 	ldh	r2,-8(fp)
  81aa60:	00c020f4 	movhi	r3,131
  81aa64:	18eb5d04 	addi	r3,r3,-21132
  81aa68:	100491ba 	slli	r2,r2,6
  81aa6c:	10c5883a 	add	r2,r2,r3
  81aa70:	10800f04 	addi	r2,r2,60
  81aa74:	10800017 	ldw	r2,0(r2)
  81aa78:	1005003a 	cmpeq	r2,r2,zero
  81aa7c:	1000c71e 	bne	r2,zero,81ad9c <alt_up_sd_card_read+0x374>
			if (active_files[file_handle].current_byte_position
  81aa80:	e0bffe0f 	ldh	r2,-8(fp)
  81aa84:	00c020f4 	movhi	r3,131
  81aa88:	18eb5d04 	addi	r3,r3,-21132
  81aa8c:	100491ba 	slli	r2,r2,6
  81aa90:	10c5883a 	add	r2,r2,r3
  81aa94:	10800904 	addi	r2,r2,36
  81aa98:	11000017 	ldw	r4,0(r2)
  81aa9c:	e0bffe0f 	ldh	r2,-8(fp)
  81aaa0:	00c020f4 	movhi	r3,131
  81aaa4:	18eb5d04 	addi	r3,r3,-21132
  81aaa8:	100491ba 	slli	r2,r2,6
  81aaac:	10c5883a 	add	r2,r2,r3
  81aab0:	10800604 	addi	r2,r2,24
  81aab4:	10800017 	ldw	r2,0(r2)
  81aab8:	2080b82e 	bgeu	r4,r2,81ad9c <alt_up_sd_card_read+0x374>
					< active_files[file_handle].file_size_in_bytes) {
				int data_sector = boot_sector_data.data_sector_offset
						+ (active_files[file_handle].current_cluster_index - 2)
								* boot_sector_data.sectors_per_cluster
						+ active_files[file_handle].current_sector_in_cluster;
  81aabc:	008020f4 	movhi	r2,131
  81aac0:	10ab4804 	addi	r2,r2,-21216
  81aac4:	11001417 	ldw	r4,80(r2)
  81aac8:	e0bffe0f 	ldh	r2,-8(fp)
  81aacc:	00c020f4 	movhi	r3,131
  81aad0:	18eb5d04 	addi	r3,r3,-21132
  81aad4:	100491ba 	slli	r2,r2,6
  81aad8:	10c5883a 	add	r2,r2,r3
  81aadc:	10800704 	addi	r2,r2,28
  81aae0:	10800017 	ldw	r2,0(r2)
  81aae4:	10ffff84 	addi	r3,r2,-2
  81aae8:	008020f4 	movhi	r2,131
  81aaec:	10ab4804 	addi	r2,r2,-21216
  81aaf0:	10800383 	ldbu	r2,14(r2)
  81aaf4:	10803fcc 	andi	r2,r2,255
  81aaf8:	1885383a 	mul	r2,r3,r2
  81aafc:	2089883a 	add	r4,r4,r2
  81ab00:	e0bffe0f 	ldh	r2,-8(fp)
  81ab04:	00c020f4 	movhi	r3,131
  81ab08:	18eb5d04 	addi	r3,r3,-21132
  81ab0c:	100491ba 	slli	r2,r2,6
  81ab10:	10c5883a 	add	r2,r2,r3
  81ab14:	10800804 	addi	r2,r2,32
  81ab18:	10800017 	ldw	r2,0(r2)
  81ab1c:	2085883a 	add	r2,r4,r2
  81ab20:	e0bffc15 	stw	r2,-16(fp)

				if ((active_files[file_handle].current_byte_position > 0)
  81ab24:	e0bffe0f 	ldh	r2,-8(fp)
  81ab28:	00c020f4 	movhi	r3,131
  81ab2c:	18eb5d04 	addi	r3,r3,-21132
  81ab30:	100491ba 	slli	r2,r2,6
  81ab34:	10c5883a 	add	r2,r2,r3
  81ab38:	10800904 	addi	r2,r2,36
  81ab3c:	10800017 	ldw	r2,0(r2)
  81ab40:	1005003a 	cmpeq	r2,r2,zero
  81ab44:	10006a1e 	bne	r2,zero,81acf0 <alt_up_sd_card_read+0x2c8>
  81ab48:	e0bffe0f 	ldh	r2,-8(fp)
  81ab4c:	00c020f4 	movhi	r3,131
  81ab50:	18eb5d04 	addi	r3,r3,-21132
  81ab54:	100491ba 	slli	r2,r2,6
  81ab58:	10c5883a 	add	r2,r2,r3
  81ab5c:	10800904 	addi	r2,r2,36
  81ab60:	10800017 	ldw	r2,0(r2)
  81ab64:	10807fcc 	andi	r2,r2,511
  81ab68:	1004c03a 	cmpne	r2,r2,zero
  81ab6c:	1000601e 	bne	r2,zero,81acf0 <alt_up_sd_card_read+0x2c8>
						&& ((active_files[file_handle].current_byte_position
								% 512) == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
  81ab70:	e0bffe0f 	ldh	r2,-8(fp)
  81ab74:	00c020f4 	movhi	r3,131
  81ab78:	18eb5d04 	addi	r3,r3,-21132
  81ab7c:	100491ba 	slli	r2,r2,6
  81ab80:	10c5883a 	add	r2,r2,r3
  81ab84:	10800804 	addi	r2,r2,32
  81ab88:	10c00017 	ldw	r3,0(r2)
  81ab8c:	008020f4 	movhi	r2,131
  81ab90:	10ab4804 	addi	r2,r2,-21216
  81ab94:	10800383 	ldbu	r2,14(r2)
  81ab98:	10803fcc 	andi	r2,r2,255
  81ab9c:	10bfffc4 	addi	r2,r2,-1
  81aba0:	1880411e 	bne	r3,r2,81aca8 <alt_up_sd_card_read+0x280>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
  81aba4:	e0bffe0f 	ldh	r2,-8(fp)
  81aba8:	00c020f4 	movhi	r3,131
  81abac:	18eb5d04 	addi	r3,r3,-21132
  81abb0:	100491ba 	slli	r2,r2,6
  81abb4:	10c5883a 	add	r2,r2,r3
  81abb8:	10800704 	addi	r2,r2,28
  81abbc:	11000017 	ldw	r4,0(r2)
  81abc0:	e17ffd84 	addi	r5,fp,-10
  81abc4:	081738c0 	call	81738c <get_cluster_flag>
  81abc8:	1005003a 	cmpeq	r2,r2,zero
  81abcc:	1000331e 	bne	r2,zero,81ac9c <alt_up_sd_card_read+0x274>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
  81abd0:	e0bffd8b 	ldhu	r2,-10(fp)
  81abd4:	10bfffcc 	andi	r2,r2,65535
  81abd8:	10fffe0c 	andi	r3,r2,65528
  81abdc:	00bffe14 	movui	r2,65528
  81abe0:	1880031e 	bne	r3,r2,81abf0 <alt_up_sd_card_read+0x1c8>
								/* End of file */
								return -1;
  81abe4:	00bfffc4 	movi	r2,-1
  81abe8:	e0bfff15 	stw	r2,-4(fp)
  81abec:	00006d06 	br	81ada4 <alt_up_sd_card_read+0x37c>
							} else {
								active_files[file_handle].current_cluster_index
  81abf0:	e13ffe0f 	ldh	r4,-8(fp)
  81abf4:	e0bffd8b 	ldhu	r2,-10(fp)
  81abf8:	117fffcc 	andi	r5,r2,65535
  81abfc:	00c020f4 	movhi	r3,131
  81ac00:	18eb5d04 	addi	r3,r3,-21132
  81ac04:	200491ba 	slli	r2,r4,6
  81ac08:	10c5883a 	add	r2,r2,r3
  81ac0c:	10800704 	addi	r2,r2,28
  81ac10:	11400015 	stw	r5,0(r2)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
  81ac14:	e0bffe0f 	ldh	r2,-8(fp)
  81ac18:	00c020f4 	movhi	r3,131
  81ac1c:	18eb5d04 	addi	r3,r3,-21132
  81ac20:	100491ba 	slli	r2,r2,6
  81ac24:	10c5883a 	add	r2,r2,r3
  81ac28:	10800804 	addi	r2,r2,32
  81ac2c:	10000015 	stw	zero,0(r2)
										= 0;
								data_sector
  81ac30:	008020f4 	movhi	r2,131
  81ac34:	10ab4804 	addi	r2,r2,-21216
  81ac38:	11001417 	ldw	r4,80(r2)
  81ac3c:	e0bffe0f 	ldh	r2,-8(fp)
  81ac40:	00c020f4 	movhi	r3,131
  81ac44:	18eb5d04 	addi	r3,r3,-21132
  81ac48:	100491ba 	slli	r2,r2,6
  81ac4c:	10c5883a 	add	r2,r2,r3
  81ac50:	10800704 	addi	r2,r2,28
  81ac54:	10800017 	ldw	r2,0(r2)
  81ac58:	10ffff84 	addi	r3,r2,-2
  81ac5c:	008020f4 	movhi	r2,131
  81ac60:	10ab4804 	addi	r2,r2,-21216
  81ac64:	10800383 	ldbu	r2,14(r2)
  81ac68:	10803fcc 	andi	r2,r2,255
  81ac6c:	1885383a 	mul	r2,r3,r2
  81ac70:	2089883a 	add	r4,r4,r2
  81ac74:	e0bffe0f 	ldh	r2,-8(fp)
  81ac78:	00c020f4 	movhi	r3,131
  81ac7c:	18eb5d04 	addi	r3,r3,-21132
  81ac80:	100491ba 	slli	r2,r2,6
  81ac84:	10c5883a 	add	r2,r2,r3
  81ac88:	10800804 	addi	r2,r2,32
  81ac8c:	10800017 	ldw	r2,0(r2)
  81ac90:	2085883a 	add	r2,r4,r2
  81ac94:	e0bffc15 	stw	r2,-16(fp)
  81ac98:	00001506 	br	81acf0 <alt_up_sd_card_read+0x2c8>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return -2;
  81ac9c:	00bfff84 	movi	r2,-2
  81aca0:	e0bfff15 	stw	r2,-4(fp)
  81aca4:	00003f06 	br	81ada4 <alt_up_sd_card_read+0x37c>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
  81aca8:	e17ffe0f 	ldh	r5,-8(fp)
  81acac:	e0bffe0f 	ldh	r2,-8(fp)
  81acb0:	00c020f4 	movhi	r3,131
  81acb4:	18eb5d04 	addi	r3,r3,-21132
  81acb8:	100491ba 	slli	r2,r2,6
  81acbc:	10c5883a 	add	r2,r2,r3
  81acc0:	10800804 	addi	r2,r2,32
  81acc4:	10800017 	ldw	r2,0(r2)
  81acc8:	11000044 	addi	r4,r2,1
  81accc:	00c020f4 	movhi	r3,131
  81acd0:	18eb5d04 	addi	r3,r3,-21132
  81acd4:	280491ba 	slli	r2,r5,6
  81acd8:	10c5883a 	add	r2,r2,r3
  81acdc:	10800804 	addi	r2,r2,32
  81ace0:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
  81ace4:	e0bffc17 	ldw	r2,-16(fp)
  81ace8:	10800044 	addi	r2,r2,1
  81acec:	e0bffc15 	stw	r2,-16(fp)
					}
				}
				// Reading te first byte of the file.
				if (current_sector_index != (data_sector
  81acf0:	d0e75517 	ldw	r3,-25260(gp)
  81acf4:	e0bffc17 	ldw	r2,-16(fp)
  81acf8:	1885883a 	add	r2,r3,r2
  81acfc:	1007883a 	mov	r3,r2
  81ad00:	d0a75917 	ldw	r2,-25244(gp)
  81ad04:	18800826 	beq	r3,r2,81ad28 <alt_up_sd_card_read+0x300>
						+ fat_partition_offset_in_512_byte_sectors)) {
					if (!Read_Sector_Data(data_sector,
  81ad08:	d1675517 	ldw	r5,-25260(gp)
  81ad0c:	e13ffc17 	ldw	r4,-16(fp)
  81ad10:	08172900 	call	817290 <Read_Sector_Data>
  81ad14:	1004c03a 	cmpne	r2,r2,zero
  81ad18:	1000031e 	bne	r2,zero,81ad28 <alt_up_sd_card_read+0x300>
							fat_partition_offset_in_512_byte_sectors)) {
						return -2;
  81ad1c:	00bfff84 	movi	r2,-2
  81ad20:	e0bfff15 	stw	r2,-4(fp)
  81ad24:	00001f06 	br	81ada4 <alt_up_sd_card_read+0x37c>
					}
				}

				ch
  81ad28:	e0bffe0f 	ldh	r2,-8(fp)
  81ad2c:	00c020f4 	movhi	r3,131
  81ad30:	18eb5d04 	addi	r3,r3,-21132
  81ad34:	100491ba 	slli	r2,r2,6
  81ad38:	10c5883a 	add	r2,r2,r3
  81ad3c:	10800904 	addi	r2,r2,36
  81ad40:	10800017 	ldw	r2,0(r2)
  81ad44:	10807fcc 	andi	r2,r2,511
  81ad48:	1007883a 	mov	r3,r2
  81ad4c:	d0a75417 	ldw	r2,-25264(gp)
  81ad50:	1885883a 	add	r2,r3,r2
  81ad54:	10800023 	ldbuio	r2,0(r2)
  81ad58:	10803fcc 	andi	r2,r2,255
  81ad5c:	e0bffd0d 	sth	r2,-12(fp)
						= (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
				active_files[file_handle].current_byte_position
  81ad60:	e17ffe0f 	ldh	r5,-8(fp)
  81ad64:	e0bffe0f 	ldh	r2,-8(fp)
  81ad68:	00c020f4 	movhi	r3,131
  81ad6c:	18eb5d04 	addi	r3,r3,-21132
  81ad70:	100491ba 	slli	r2,r2,6
  81ad74:	10c5883a 	add	r2,r2,r3
  81ad78:	10800904 	addi	r2,r2,36
  81ad7c:	10800017 	ldw	r2,0(r2)
  81ad80:	11000044 	addi	r4,r2,1
  81ad84:	00c020f4 	movhi	r3,131
  81ad88:	18eb5d04 	addi	r3,r3,-21132
  81ad8c:	280491ba 	slli	r2,r5,6
  81ad90:	10c5883a 	add	r2,r2,r3
  81ad94:	10800904 	addi	r2,r2,36
  81ad98:	11000015 	stw	r4,0(r2)
						= active_files[file_handle].current_byte_position + 1;
			}
		}
	}

	return ch;
  81ad9c:	e0bffd0f 	ldh	r2,-12(fp)
  81ada0:	e0bfff15 	stw	r2,-4(fp)
  81ada4:	e0bfff17 	ldw	r2,-4(fp)
}
  81ada8:	e037883a 	mov	sp,fp
  81adac:	dfc00117 	ldw	ra,4(sp)
  81adb0:	df000017 	ldw	fp,0(sp)
  81adb4:	dec00204 	addi	sp,sp,8
  81adb8:	f800283a 	ret

0081adbc <alt_up_sd_card_write>:

bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
  81adbc:	defff504 	addi	sp,sp,-44
  81adc0:	dfc00a15 	stw	ra,40(sp)
  81adc4:	df000915 	stw	fp,36(sp)
  81adc8:	dc000815 	stw	r16,32(sp)
  81adcc:	df000804 	addi	fp,sp,32
  81add0:	e13ffd0d 	sth	r4,-12(fp)
  81add4:	e17ffe05 	stb	r5,-8(fp)
	bool result = false;
  81add8:	e03ffa15 	stw	zero,-24(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  81addc:	e0bffd0f 	ldh	r2,-12(fp)
  81ade0:	1004803a 	cmplt	r2,r2,zero
  81ade4:	1001751e 	bne	r2,zero,81b3bc <alt_up_sd_card_write+0x600>
  81ade8:	e0bffd0f 	ldh	r2,-12(fp)
  81adec:	10800508 	cmpgei	r2,r2,20
  81adf0:	1001721e 	bne	r2,zero,81b3bc <alt_up_sd_card_write+0x600>
		if (active_files[file_handle].in_use) {
  81adf4:	e0bffd0f 	ldh	r2,-12(fp)
  81adf8:	00c020f4 	movhi	r3,131
  81adfc:	18eb5d04 	addi	r3,r3,-21132
  81ae00:	100491ba 	slli	r2,r2,6
  81ae04:	10c5883a 	add	r2,r2,r3
  81ae08:	10800f04 	addi	r2,r2,60
  81ae0c:	10800017 	ldw	r2,0(r2)
  81ae10:	1005003a 	cmpeq	r2,r2,zero
  81ae14:	1001691e 	bne	r2,zero,81b3bc <alt_up_sd_card_write+0x600>
			int data_sector = boot_sector_data.data_sector_offset
					+ (active_files[file_handle].current_cluster_index - 2)
							* boot_sector_data.sectors_per_cluster
					+ active_files[file_handle].current_sector_in_cluster;
  81ae18:	008020f4 	movhi	r2,131
  81ae1c:	10ab4804 	addi	r2,r2,-21216
  81ae20:	11001417 	ldw	r4,80(r2)
  81ae24:	e0bffd0f 	ldh	r2,-12(fp)
  81ae28:	00c020f4 	movhi	r3,131
  81ae2c:	18eb5d04 	addi	r3,r3,-21132
  81ae30:	100491ba 	slli	r2,r2,6
  81ae34:	10c5883a 	add	r2,r2,r3
  81ae38:	10800704 	addi	r2,r2,28
  81ae3c:	10800017 	ldw	r2,0(r2)
  81ae40:	10ffff84 	addi	r3,r2,-2
  81ae44:	008020f4 	movhi	r2,131
  81ae48:	10ab4804 	addi	r2,r2,-21216
  81ae4c:	10800383 	ldbu	r2,14(r2)
  81ae50:	10803fcc 	andi	r2,r2,255
  81ae54:	1885383a 	mul	r2,r3,r2
  81ae58:	2089883a 	add	r4,r4,r2
  81ae5c:	e0bffd0f 	ldh	r2,-12(fp)
  81ae60:	00c020f4 	movhi	r3,131
  81ae64:	18eb5d04 	addi	r3,r3,-21132
  81ae68:	100491ba 	slli	r2,r2,6
  81ae6c:	10c5883a 	add	r2,r2,r3
  81ae70:	10800804 	addi	r2,r2,32
  81ae74:	10800017 	ldw	r2,0(r2)
  81ae78:	2085883a 	add	r2,r4,r2
  81ae7c:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset =
					active_files[file_handle].current_byte_position
							% boot_sector_data.sector_size_in_bytes;
  81ae80:	e0bffd0f 	ldh	r2,-12(fp)
  81ae84:	00c020f4 	movhi	r3,131
  81ae88:	18eb5d04 	addi	r3,r3,-21132
  81ae8c:	100491ba 	slli	r2,r2,6
  81ae90:	10c5883a 	add	r2,r2,r3
  81ae94:	10800904 	addi	r2,r2,36
  81ae98:	11000017 	ldw	r4,0(r2)
  81ae9c:	008020f4 	movhi	r2,131
  81aea0:	10ab4804 	addi	r2,r2,-21216
  81aea4:	1080030b 	ldhu	r2,12(r2)
  81aea8:	117fffcc 	andi	r5,r2,65535
  81aeac:	08098440 	call	809844 <__umodsi3>
  81aeb0:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position
  81aeb4:	e0bffd0f 	ldh	r2,-12(fp)
  81aeb8:	00c020f4 	movhi	r3,131
  81aebc:	18eb5d04 	addi	r3,r3,-21132
  81aec0:	100491ba 	slli	r2,r2,6
  81aec4:	10c5883a 	add	r2,r2,r3
  81aec8:	10800904 	addi	r2,r2,36
  81aecc:	11000017 	ldw	r4,0(r2)
  81aed0:	e0bffd0f 	ldh	r2,-12(fp)
  81aed4:	00c020f4 	movhi	r3,131
  81aed8:	18eb5d04 	addi	r3,r3,-21132
  81aedc:	100491ba 	slli	r2,r2,6
  81aee0:	10c5883a 	add	r2,r2,r3
  81aee4:	10800604 	addi	r2,r2,24
  81aee8:	10800017 	ldw	r2,0(r2)
  81aeec:	2080682e 	bgeu	r4,r2,81b090 <alt_up_sd_card_write+0x2d4>
					< active_files[file_handle].file_size_in_bytes) {
				if ((active_files[file_handle].current_byte_position > 0)
  81aef0:	e0bffd0f 	ldh	r2,-12(fp)
  81aef4:	00c020f4 	movhi	r3,131
  81aef8:	18eb5d04 	addi	r3,r3,-21132
  81aefc:	100491ba 	slli	r2,r2,6
  81af00:	10c5883a 	add	r2,r2,r3
  81af04:	10800904 	addi	r2,r2,36
  81af08:	10800017 	ldw	r2,0(r2)
  81af0c:	1005003a 	cmpeq	r2,r2,zero
  81af10:	1000de1e 	bne	r2,zero,81b28c <alt_up_sd_card_write+0x4d0>
  81af14:	e0bff80f 	ldh	r2,-32(fp)
  81af18:	1004c03a 	cmpne	r2,r2,zero
  81af1c:	1000db1e 	bne	r2,zero,81b28c <alt_up_sd_card_write+0x4d0>
						&& (buffer_offset == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
  81af20:	e0bffd0f 	ldh	r2,-12(fp)
  81af24:	00c020f4 	movhi	r3,131
  81af28:	18eb5d04 	addi	r3,r3,-21132
  81af2c:	100491ba 	slli	r2,r2,6
  81af30:	10c5883a 	add	r2,r2,r3
  81af34:	10800804 	addi	r2,r2,32
  81af38:	10c00017 	ldw	r3,0(r2)
  81af3c:	008020f4 	movhi	r2,131
  81af40:	10ab4804 	addi	r2,r2,-21216
  81af44:	10800383 	ldbu	r2,14(r2)
  81af48:	10803fcc 	andi	r2,r2,255
  81af4c:	10bfffc4 	addi	r2,r2,-1
  81af50:	18803c1e 	bne	r3,r2,81b044 <alt_up_sd_card_write+0x288>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
  81af54:	e0bffd0f 	ldh	r2,-12(fp)
  81af58:	00c020f4 	movhi	r3,131
  81af5c:	18eb5d04 	addi	r3,r3,-21132
  81af60:	100491ba 	slli	r2,r2,6
  81af64:	10c5883a 	add	r2,r2,r3
  81af68:	10800704 	addi	r2,r2,28
  81af6c:	11000017 	ldw	r4,0(r2)
  81af70:	e17ffb04 	addi	r5,fp,-20
  81af74:	081738c0 	call	81738c <get_cluster_flag>
  81af78:	1005003a 	cmpeq	r2,r2,zero
  81af7c:	10002f1e 	bne	r2,zero,81b03c <alt_up_sd_card_write+0x280>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if (next_cluster < 0x0000fff8) {
  81af80:	e0bffb0b 	ldhu	r2,-20(fp)
  81af84:	10ffffcc 	andi	r3,r2,65535
  81af88:	00bffdd4 	movui	r2,65527
  81af8c:	10c0bf36 	bltu	r2,r3,81b28c <alt_up_sd_card_write+0x4d0>
								active_files[file_handle].current_cluster_index
  81af90:	e13ffd0f 	ldh	r4,-12(fp)
  81af94:	e0bffb0b 	ldhu	r2,-20(fp)
  81af98:	117fffcc 	andi	r5,r2,65535
  81af9c:	00c020f4 	movhi	r3,131
  81afa0:	18eb5d04 	addi	r3,r3,-21132
  81afa4:	200491ba 	slli	r2,r4,6
  81afa8:	10c5883a 	add	r2,r2,r3
  81afac:	10800704 	addi	r2,r2,28
  81afb0:	11400015 	stw	r5,0(r2)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
  81afb4:	e0bffd0f 	ldh	r2,-12(fp)
  81afb8:	00c020f4 	movhi	r3,131
  81afbc:	18eb5d04 	addi	r3,r3,-21132
  81afc0:	100491ba 	slli	r2,r2,6
  81afc4:	10c5883a 	add	r2,r2,r3
  81afc8:	10800804 	addi	r2,r2,32
  81afcc:	10000015 	stw	zero,0(r2)
										= 0;
								data_sector
  81afd0:	008020f4 	movhi	r2,131
  81afd4:	10ab4804 	addi	r2,r2,-21216
  81afd8:	11001417 	ldw	r4,80(r2)
  81afdc:	e0bffd0f 	ldh	r2,-12(fp)
  81afe0:	00c020f4 	movhi	r3,131
  81afe4:	18eb5d04 	addi	r3,r3,-21132
  81afe8:	100491ba 	slli	r2,r2,6
  81afec:	10c5883a 	add	r2,r2,r3
  81aff0:	10800704 	addi	r2,r2,28
  81aff4:	10800017 	ldw	r2,0(r2)
  81aff8:	10ffff84 	addi	r3,r2,-2
  81affc:	008020f4 	movhi	r2,131
  81b000:	10ab4804 	addi	r2,r2,-21216
  81b004:	10800383 	ldbu	r2,14(r2)
  81b008:	10803fcc 	andi	r2,r2,255
  81b00c:	1885383a 	mul	r2,r3,r2
  81b010:	2089883a 	add	r4,r4,r2
  81b014:	e0bffd0f 	ldh	r2,-12(fp)
  81b018:	00c020f4 	movhi	r3,131
  81b01c:	18eb5d04 	addi	r3,r3,-21132
  81b020:	100491ba 	slli	r2,r2,6
  81b024:	10c5883a 	add	r2,r2,r3
  81b028:	10800804 	addi	r2,r2,32
  81b02c:	10800017 	ldw	r2,0(r2)
  81b030:	2085883a 	add	r2,r4,r2
  81b034:	e0bff915 	stw	r2,-28(fp)
  81b038:	00009406 	br	81b28c <alt_up_sd_card_write+0x4d0>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return false;
  81b03c:	e03fff15 	stw	zero,-4(fp)
  81b040:	0000e006 	br	81b3c4 <alt_up_sd_card_write+0x608>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
  81b044:	e17ffd0f 	ldh	r5,-12(fp)
  81b048:	e0bffd0f 	ldh	r2,-12(fp)
  81b04c:	00c020f4 	movhi	r3,131
  81b050:	18eb5d04 	addi	r3,r3,-21132
  81b054:	100491ba 	slli	r2,r2,6
  81b058:	10c5883a 	add	r2,r2,r3
  81b05c:	10800804 	addi	r2,r2,32
  81b060:	10800017 	ldw	r2,0(r2)
  81b064:	11000044 	addi	r4,r2,1
  81b068:	00c020f4 	movhi	r3,131
  81b06c:	18eb5d04 	addi	r3,r3,-21132
  81b070:	280491ba 	slli	r2,r5,6
  81b074:	10c5883a 	add	r2,r2,r3
  81b078:	10800804 	addi	r2,r2,32
  81b07c:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
  81b080:	e0bff917 	ldw	r2,-28(fp)
  81b084:	10800044 	addi	r2,r2,1
  81b088:	e0bff915 	stw	r2,-28(fp)
  81b08c:	00007f06 	br	81b28c <alt_up_sd_card_write+0x4d0>
					}
				}
			} else {
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0)
  81b090:	e0bffd0f 	ldh	r2,-12(fp)
  81b094:	00c020f4 	movhi	r3,131
  81b098:	18eb5d04 	addi	r3,r3,-21132
  81b09c:	100491ba 	slli	r2,r2,6
  81b0a0:	10c5883a 	add	r2,r2,r3
  81b0a4:	10800904 	addi	r2,r2,36
  81b0a8:	10800017 	ldw	r2,0(r2)
  81b0ac:	1005003a 	cmpeq	r2,r2,zero
  81b0b0:	1000761e 	bne	r2,zero,81b28c <alt_up_sd_card_write+0x4d0>
  81b0b4:	e0bff80f 	ldh	r2,-32(fp)
  81b0b8:	1004c03a 	cmpne	r2,r2,zero
  81b0bc:	1000731e 	bne	r2,zero,81b28c <alt_up_sd_card_write+0x4d0>
						&& (buffer_offset == 0)) {
					if (active_files[file_handle].current_sector_in_cluster
  81b0c0:	e0bffd0f 	ldh	r2,-12(fp)
  81b0c4:	00c020f4 	movhi	r3,131
  81b0c8:	18eb5d04 	addi	r3,r3,-21132
  81b0cc:	100491ba 	slli	r2,r2,6
  81b0d0:	10c5883a 	add	r2,r2,r3
  81b0d4:	10800804 	addi	r2,r2,32
  81b0d8:	10c00017 	ldw	r3,0(r2)
  81b0dc:	008020f4 	movhi	r2,131
  81b0e0:	10ab4804 	addi	r2,r2,-21216
  81b0e4:	10800383 	ldbu	r2,14(r2)
  81b0e8:	10803fcc 	andi	r2,r2,255
  81b0ec:	10bfffc4 	addi	r2,r2,-1
  81b0f0:	1880381e 	bne	r3,r2,81b1d4 <alt_up_sd_card_write+0x418>
							== boot_sector_data.sectors_per_cluster - 1) {
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number)) {
  81b0f4:	e13ffc04 	addi	r4,fp,-16
  81b0f8:	08193e40 	call	8193e4 <find_first_empty_cluster>
  81b0fc:	1005003a 	cmpeq	r2,r2,zero
  81b100:	1000321e 	bne	r2,zero,81b1cc <alt_up_sd_card_write+0x410>
							// mark clusters in both File Allocation Tables.
							mark_cluster(
  81b104:	e0bffd0f 	ldh	r2,-12(fp)
  81b108:	00c020f4 	movhi	r3,131
  81b10c:	18eb5d04 	addi	r3,r3,-21132
  81b110:	100491ba 	slli	r2,r2,6
  81b114:	10c5883a 	add	r2,r2,r3
  81b118:	10800704 	addi	r2,r2,28
  81b11c:	11000017 	ldw	r4,0(r2)
  81b120:	e0bffc17 	ldw	r2,-16(fp)
  81b124:	117fffcc 	andi	r5,r2,65535
  81b128:	2960001c 	xori	r5,r5,32768
  81b12c:	29600004 	addi	r5,r5,-32768
  81b130:	01800044 	movi	r6,1
  81b134:	08174440 	call	817444 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
  81b138:	e13ffc17 	ldw	r4,-16(fp)
  81b13c:	017fffc4 	movi	r5,-1
  81b140:	01800044 	movi	r6,1
  81b144:	08174440 	call	817444 <mark_cluster>
							mark_cluster(
  81b148:	e0bffd0f 	ldh	r2,-12(fp)
  81b14c:	00c020f4 	movhi	r3,131
  81b150:	18eb5d04 	addi	r3,r3,-21132
  81b154:	100491ba 	slli	r2,r2,6
  81b158:	10c5883a 	add	r2,r2,r3
  81b15c:	10800704 	addi	r2,r2,28
  81b160:	11000017 	ldw	r4,0(r2)
  81b164:	e0bffc17 	ldw	r2,-16(fp)
  81b168:	117fffcc 	andi	r5,r2,65535
  81b16c:	2960001c 	xori	r5,r5,32768
  81b170:	29600004 	addi	r5,r5,-32768
  81b174:	000d883a 	mov	r6,zero
  81b178:	08174440 	call	817444 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
  81b17c:	e13ffc17 	ldw	r4,-16(fp)
  81b180:	017fffc4 	movi	r5,-1
  81b184:	000d883a 	mov	r6,zero
  81b188:	08174440 	call	817444 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index
  81b18c:	e0bffd0f 	ldh	r2,-12(fp)
  81b190:	e13ffc17 	ldw	r4,-16(fp)
  81b194:	00c020f4 	movhi	r3,131
  81b198:	18eb5d04 	addi	r3,r3,-21132
  81b19c:	100491ba 	slli	r2,r2,6
  81b1a0:	10c5883a 	add	r2,r2,r3
  81b1a4:	10800704 	addi	r2,r2,28
  81b1a8:	11000015 	stw	r4,0(r2)
									= cluster_number;
							active_files[file_handle].current_sector_in_cluster
  81b1ac:	e0bffd0f 	ldh	r2,-12(fp)
  81b1b0:	00c020f4 	movhi	r3,131
  81b1b4:	18eb5d04 	addi	r3,r3,-21132
  81b1b8:	100491ba 	slli	r2,r2,6
  81b1bc:	10c5883a 	add	r2,r2,r3
  81b1c0:	10800804 	addi	r2,r2,32
  81b1c4:	10000015 	stw	zero,0(r2)
  81b1c8:	00001606 	br	81b224 <alt_up_sd_card_write+0x468>
									= 0;
						} else {
							return false;
  81b1cc:	e03fff15 	stw	zero,-4(fp)
  81b1d0:	00007c06 	br	81b3c4 <alt_up_sd_card_write+0x608>
						}
					} else {
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster
  81b1d4:	e43ffd0f 	ldh	r16,-12(fp)
  81b1d8:	e0bffd0f 	ldh	r2,-12(fp)
  81b1dc:	00c020f4 	movhi	r3,131
  81b1e0:	18eb5d04 	addi	r3,r3,-21132
  81b1e4:	100491ba 	slli	r2,r2,6
  81b1e8:	10c5883a 	add	r2,r2,r3
  81b1ec:	10800904 	addi	r2,r2,36
  81b1f0:	11000017 	ldw	r4,0(r2)
  81b1f4:	008020f4 	movhi	r2,131
  81b1f8:	10ab4804 	addi	r2,r2,-21216
  81b1fc:	1080030b 	ldhu	r2,12(r2)
  81b200:	117fffcc 	andi	r5,r2,65535
  81b204:	080983c0 	call	80983c <__udivsi3>
  81b208:	1009883a 	mov	r4,r2
  81b20c:	00c020f4 	movhi	r3,131
  81b210:	18eb5d04 	addi	r3,r3,-21132
  81b214:	800491ba 	slli	r2,r16,6
  81b218:	10c5883a 	add	r2,r2,r3
  81b21c:	10800804 	addi	r2,r2,32
  81b220:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_byte_position
										/ boot_sector_data.sector_size_in_bytes;
					}
					data_sector
  81b224:	008020f4 	movhi	r2,131
  81b228:	10ab4804 	addi	r2,r2,-21216
  81b22c:	11001417 	ldw	r4,80(r2)
  81b230:	e0bffd0f 	ldh	r2,-12(fp)
  81b234:	00c020f4 	movhi	r3,131
  81b238:	18eb5d04 	addi	r3,r3,-21132
  81b23c:	100491ba 	slli	r2,r2,6
  81b240:	10c5883a 	add	r2,r2,r3
  81b244:	10800704 	addi	r2,r2,28
  81b248:	10800017 	ldw	r2,0(r2)
  81b24c:	10ffff84 	addi	r3,r2,-2
  81b250:	008020f4 	movhi	r2,131
  81b254:	10ab4804 	addi	r2,r2,-21216
  81b258:	10800383 	ldbu	r2,14(r2)
  81b25c:	10803fcc 	andi	r2,r2,255
  81b260:	1885383a 	mul	r2,r3,r2
  81b264:	2089883a 	add	r4,r4,r2
  81b268:	e0bffd0f 	ldh	r2,-12(fp)
  81b26c:	00c020f4 	movhi	r3,131
  81b270:	18eb5d04 	addi	r3,r3,-21132
  81b274:	100491ba 	slli	r2,r2,6
  81b278:	10c5883a 	add	r2,r2,r3
  81b27c:	10800804 	addi	r2,r2,32
  81b280:	10800017 	ldw	r2,0(r2)
  81b284:	2085883a 	add	r2,r4,r2
  81b288:	e0bff915 	stw	r2,-28(fp)
									+ active_files[file_handle].current_sector_in_cluster;
				}
			}
			// Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
			if (current_sector_index != data_sector
  81b28c:	d0e75517 	ldw	r3,-25260(gp)
  81b290:	e0bff917 	ldw	r2,-28(fp)
  81b294:	1885883a 	add	r2,r3,r2
  81b298:	1007883a 	mov	r3,r2
  81b29c:	d0a75917 	ldw	r2,-25244(gp)
  81b2a0:	18800726 	beq	r3,r2,81b2c0 <alt_up_sd_card_write+0x504>
					+ fat_partition_offset_in_512_byte_sectors) {
				if (!Read_Sector_Data(data_sector,
  81b2a4:	d1675517 	ldw	r5,-25260(gp)
  81b2a8:	e13ff917 	ldw	r4,-28(fp)
  81b2ac:	08172900 	call	817290 <Read_Sector_Data>
  81b2b0:	1004c03a 	cmpne	r2,r2,zero
  81b2b4:	1000021e 	bne	r2,zero,81b2c0 <alt_up_sd_card_write+0x504>
						fat_partition_offset_in_512_byte_sectors)) {
					return false;
  81b2b8:	e03fff15 	stw	zero,-4(fp)
  81b2bc:	00004106 	br	81b3c4 <alt_up_sd_card_write+0x608>
				}
			}
			// Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
  81b2c0:	e0bff80f 	ldh	r2,-32(fp)
  81b2c4:	1007883a 	mov	r3,r2
  81b2c8:	d0a75417 	ldw	r2,-25264(gp)
  81b2cc:	1885883a 	add	r2,r3,r2
  81b2d0:	e0fffe07 	ldb	r3,-8(fp)
  81b2d4:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position
  81b2d8:	e17ffd0f 	ldh	r5,-12(fp)
  81b2dc:	e0bffd0f 	ldh	r2,-12(fp)
  81b2e0:	00c020f4 	movhi	r3,131
  81b2e4:	18eb5d04 	addi	r3,r3,-21132
  81b2e8:	100491ba 	slli	r2,r2,6
  81b2ec:	10c5883a 	add	r2,r2,r3
  81b2f0:	10800904 	addi	r2,r2,36
  81b2f4:	10800017 	ldw	r2,0(r2)
  81b2f8:	11000044 	addi	r4,r2,1
  81b2fc:	00c020f4 	movhi	r3,131
  81b300:	18eb5d04 	addi	r3,r3,-21132
  81b304:	280491ba 	slli	r2,r5,6
  81b308:	10c5883a 	add	r2,r2,r3
  81b30c:	10800904 	addi	r2,r2,36
  81b310:	11000015 	stw	r4,0(r2)
					= active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position
  81b314:	e0bffd0f 	ldh	r2,-12(fp)
  81b318:	00c020f4 	movhi	r3,131
  81b31c:	18eb5d04 	addi	r3,r3,-21132
  81b320:	100491ba 	slli	r2,r2,6
  81b324:	10c5883a 	add	r2,r2,r3
  81b328:	10800904 	addi	r2,r2,36
  81b32c:	11000017 	ldw	r4,0(r2)
  81b330:	e0bffd0f 	ldh	r2,-12(fp)
  81b334:	00c020f4 	movhi	r3,131
  81b338:	18eb5d04 	addi	r3,r3,-21132
  81b33c:	100491ba 	slli	r2,r2,6
  81b340:	10c5883a 	add	r2,r2,r3
  81b344:	10800604 	addi	r2,r2,24
  81b348:	10800017 	ldw	r2,0(r2)
  81b34c:	20801736 	bltu	r4,r2,81b3ac <alt_up_sd_card_write+0x5f0>
					>= active_files[file_handle].file_size_in_bytes) {
				active_files[file_handle].file_size_in_bytes
  81b350:	e17ffd0f 	ldh	r5,-12(fp)
  81b354:	e0bffd0f 	ldh	r2,-12(fp)
  81b358:	00c020f4 	movhi	r3,131
  81b35c:	18eb5d04 	addi	r3,r3,-21132
  81b360:	100491ba 	slli	r2,r2,6
  81b364:	10c5883a 	add	r2,r2,r3
  81b368:	10800604 	addi	r2,r2,24
  81b36c:	10800017 	ldw	r2,0(r2)
  81b370:	11000044 	addi	r4,r2,1
  81b374:	00c020f4 	movhi	r3,131
  81b378:	18eb5d04 	addi	r3,r3,-21132
  81b37c:	280491ba 	slli	r2,r5,6
  81b380:	10c5883a 	add	r2,r2,r3
  81b384:	10800604 	addi	r2,r2,24
  81b388:	11000015 	stw	r4,0(r2)
						= active_files[file_handle].file_size_in_bytes + 1;
				active_files[file_handle].modified = true;
  81b38c:	e0bffd0f 	ldh	r2,-12(fp)
  81b390:	00c020f4 	movhi	r3,131
  81b394:	18eb5d04 	addi	r3,r3,-21132
  81b398:	100491ba 	slli	r2,r2,6
  81b39c:	10c5883a 	add	r2,r2,r3
  81b3a0:	10c00e04 	addi	r3,r2,56
  81b3a4:	00800044 	movi	r2,1
  81b3a8:	18800015 	stw	r2,0(r3)
			}
			// Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
			current_sector_modified = true;
  81b3ac:	00800044 	movi	r2,1
  81b3b0:	d0a75815 	stw	r2,-25248(gp)
			result = true;
  81b3b4:	00800044 	movi	r2,1
  81b3b8:	e0bffa15 	stw	r2,-24(fp)
		}
	}

	return result;
  81b3bc:	e0bffa17 	ldw	r2,-24(fp)
  81b3c0:	e0bfff15 	stw	r2,-4(fp)
  81b3c4:	e0bfff17 	ldw	r2,-4(fp)
}
  81b3c8:	e037883a 	mov	sp,fp
  81b3cc:	dfc00217 	ldw	ra,8(sp)
  81b3d0:	df000117 	ldw	fp,4(sp)
  81b3d4:	dc000017 	ldw	r16,0(sp)
  81b3d8:	dec00304 	addi	sp,sp,12
  81b3dc:	f800283a 	ret

0081b3e0 <alt_up_sd_card_fclose>:

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
  81b3e0:	defffb04 	addi	sp,sp,-20
  81b3e4:	dfc00415 	stw	ra,16(sp)
  81b3e8:	df000315 	stw	fp,12(sp)
  81b3ec:	df000304 	addi	fp,sp,12
  81b3f0:	e13fff0d 	sth	r4,-4(fp)
	bool result = false;
  81b3f4:	e03ffe15 	stw	zero,-8(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  81b3f8:	0819fa40 	call	819fa4 <alt_up_sd_card_is_Present>
  81b3fc:	1005003a 	cmpeq	r2,r2,zero
  81b400:	1000641e 	bne	r2,zero,81b594 <alt_up_sd_card_fclose+0x1b4>
  81b404:	d0a74e17 	ldw	r2,-25288(gp)
  81b408:	1005003a 	cmpeq	r2,r2,zero
  81b40c:	1000611e 	bne	r2,zero,81b594 <alt_up_sd_card_fclose+0x1b4>
		if (active_files[file_handle].in_use) {
  81b410:	e0bfff0f 	ldh	r2,-4(fp)
  81b414:	00c020f4 	movhi	r3,131
  81b418:	18eb5d04 	addi	r3,r3,-21132
  81b41c:	100491ba 	slli	r2,r2,6
  81b420:	10c5883a 	add	r2,r2,r3
  81b424:	10800f04 	addi	r2,r2,60
  81b428:	10800017 	ldw	r2,0(r2)
  81b42c:	1005003a 	cmpeq	r2,r2,zero
  81b430:	1000581e 	bne	r2,zero,81b594 <alt_up_sd_card_fclose+0x1b4>
			if (active_files[file_handle].modified) {
  81b434:	e0bfff0f 	ldh	r2,-4(fp)
  81b438:	00c020f4 	movhi	r3,131
  81b43c:	18eb5d04 	addi	r3,r3,-21132
  81b440:	100491ba 	slli	r2,r2,6
  81b444:	10c5883a 	add	r2,r2,r3
  81b448:	10800e04 	addi	r2,r2,56
  81b44c:	10800017 	ldw	r2,0(r2)
  81b450:	1005003a 	cmpeq	r2,r2,zero
  81b454:	1000461e 	bne	r2,zero,81b570 <alt_up_sd_card_fclose+0x190>
				unsigned int record_sector =
						active_files[file_handle].file_record_sector_in_cluster;
  81b458:	e0bfff0f 	ldh	r2,-4(fp)
  81b45c:	00c020f4 	movhi	r3,131
  81b460:	18eb5d04 	addi	r3,r3,-21132
  81b464:	100491ba 	slli	r2,r2,6
  81b468:	10c5883a 	add	r2,r2,r3
  81b46c:	10800b04 	addi	r2,r2,44
  81b470:	10800017 	ldw	r2,0(r2)
  81b474:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0) {
  81b478:	e0bfff0f 	ldh	r2,-4(fp)
  81b47c:	00c020f4 	movhi	r3,131
  81b480:	18eb5d04 	addi	r3,r3,-21132
  81b484:	100491ba 	slli	r2,r2,6
  81b488:	10c5883a 	add	r2,r2,r3
  81b48c:	10800a04 	addi	r2,r2,40
  81b490:	10800017 	ldw	r2,0(r2)
  81b494:	1004c03a 	cmpne	r2,r2,zero
  81b498:	1000071e 	bne	r2,zero,81b4b8 <alt_up_sd_card_fclose+0xd8>
					record_sector = record_sector
  81b49c:	008020f4 	movhi	r2,131
  81b4a0:	10ab4804 	addi	r2,r2,-21216
  81b4a4:	10c01317 	ldw	r3,76(r2)
  81b4a8:	e0bffd17 	ldw	r2,-12(fp)
  81b4ac:	10c5883a 	add	r2,r2,r3
  81b4b0:	e0bffd15 	stw	r2,-12(fp)
  81b4b4:	00001406 	br	81b508 <alt_up_sd_card_fclose+0x128>
							+ boot_sector_data.root_directory_sector_offset;
				} else {
					record_sector = record_sector
  81b4b8:	008020f4 	movhi	r2,131
  81b4bc:	10ab4804 	addi	r2,r2,-21216
  81b4c0:	10c01417 	ldw	r3,80(r2)
  81b4c4:	e0bffd17 	ldw	r2,-12(fp)
  81b4c8:	1889883a 	add	r4,r3,r2
  81b4cc:	e0bfff0f 	ldh	r2,-4(fp)
  81b4d0:	00c020f4 	movhi	r3,131
  81b4d4:	18eb5d04 	addi	r3,r3,-21132
  81b4d8:	100491ba 	slli	r2,r2,6
  81b4dc:	10c5883a 	add	r2,r2,r3
  81b4e0:	10800a04 	addi	r2,r2,40
  81b4e4:	10800017 	ldw	r2,0(r2)
  81b4e8:	10ffff84 	addi	r3,r2,-2
  81b4ec:	008020f4 	movhi	r2,131
  81b4f0:	10ab4804 	addi	r2,r2,-21216
  81b4f4:	10800383 	ldbu	r2,14(r2)
  81b4f8:	10803fcc 	andi	r2,r2,255
  81b4fc:	1885383a 	mul	r2,r3,r2
  81b500:	2085883a 	add	r2,r4,r2
  81b504:	e0bffd15 	stw	r2,-12(fp)
							+ boot_sector_data.data_sector_offset
							+ (active_files[file_handle].file_record_cluster
									- 2) * boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector,
  81b508:	e13ffd17 	ldw	r4,-12(fp)
  81b50c:	d1675517 	ldw	r5,-25260(gp)
  81b510:	08172900 	call	817290 <Read_Sector_Data>
  81b514:	1005003a 	cmpeq	r2,r2,zero
  81b518:	1000151e 	bne	r2,zero,81b570 <alt_up_sd_card_fclose+0x190>
						fat_partition_offset_in_512_byte_sectors)) {
					if (Write_File_Record_At_Offset(
  81b51c:	e0bfff0f 	ldh	r2,-4(fp)
  81b520:	00c020f4 	movhi	r3,131
  81b524:	18eb5d04 	addi	r3,r3,-21132
  81b528:	100491ba 	slli	r2,r2,6
  81b52c:	10c5883a 	add	r2,r2,r3
  81b530:	10800c04 	addi	r2,r2,48
  81b534:	1080000b 	ldhu	r2,0(r2)
  81b538:	113fffcc 	andi	r4,r2,65535
  81b53c:	2120001c 	xori	r4,r4,32768
  81b540:	21200004 	addi	r4,r4,-32768
  81b544:	e0bfff0f 	ldh	r2,-4(fp)
  81b548:	100491ba 	slli	r2,r2,6
  81b54c:	1007883a 	mov	r3,r2
  81b550:	008020f4 	movhi	r2,131
  81b554:	10ab5d04 	addi	r2,r2,-21132
  81b558:	188b883a 	add	r5,r3,r2
  81b55c:	081795c0 	call	81795c <Write_File_Record_At_Offset>
  81b560:	1005003a 	cmpeq	r2,r2,zero
  81b564:	1000021e 	bne	r2,zero,81b570 <alt_up_sd_card_fclose+0x190>
							active_files[file_handle].file_record_offset,
							&(active_files[file_handle]))) {
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
  81b568:	08172400 	call	817240 <Save_Modified_Sector>
  81b56c:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
  81b570:	e0bfff0f 	ldh	r2,-4(fp)
  81b574:	00c020f4 	movhi	r3,131
  81b578:	18eb5d04 	addi	r3,r3,-21132
  81b57c:	100491ba 	slli	r2,r2,6
  81b580:	10c5883a 	add	r2,r2,r3
  81b584:	10800f04 	addi	r2,r2,60
  81b588:	10000015 	stw	zero,0(r2)
			result = true;
  81b58c:	00800044 	movi	r2,1
  81b590:	e0bffe15 	stw	r2,-8(fp)
		}
	}

	return result;
  81b594:	e0bffe17 	ldw	r2,-8(fp)
}
  81b598:	e037883a 	mov	sp,fp
  81b59c:	dfc00117 	ldw	ra,4(sp)
  81b5a0:	df000017 	ldw	fp,0(sp)
  81b5a4:	dec00204 	addi	sp,sp,8
  81b5a8:	f800283a 	ret

0081b5ac <Read_Sector_Data_CRC>:

bool Read_Sector_Data_CRC(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  81b5ac:	defff904 	addi	sp,sp,-28
  81b5b0:	dfc00615 	stw	ra,24(sp)
  81b5b4:	df000515 	stw	fp,20(sp)
  81b5b8:	df000504 	addi	fp,sp,20
  81b5bc:	e13ffd15 	stw	r4,-12(fp)
  81b5c0:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
  81b5c4:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
  81b5c8:	0819fa40 	call	819fa4 <alt_up_sd_card_is_Present>
  81b5cc:	1005003a 	cmpeq	r2,r2,zero
  81b5d0:	10002d1e 	bne	r2,zero,81b688 <Read_Sector_Data_CRC+0xdc>
		short int reg_state = 0xff;
  81b5d4:	00803fc4 	movi	r2,255
  81b5d8:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
  81b5dc:	d0a75817 	ldw	r2,-25248(gp)
  81b5e0:	1005003a 	cmpeq	r2,r2,zero
  81b5e4:	1000081e 	bne	r2,zero,81b608 <Read_Sector_Data_CRC+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
  81b5e8:	d0a75917 	ldw	r2,-25244(gp)
  81b5ec:	1009883a 	mov	r4,r2
  81b5f0:	000b883a 	mov	r5,zero
  81b5f4:	08171780 	call	817178 <Write_Sector_Data>
  81b5f8:	1004c03a 	cmpne	r2,r2,zero
  81b5fc:	1000021e 	bne	r2,zero,81b608 <Read_Sector_Data_CRC+0x5c>
				return false;
  81b600:	e03fff15 	stw	zero,-4(fp)
  81b604:	00002206 	br	81b690 <Read_Sector_Data_CRC+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  81b608:	d0a75317 	ldw	r2,-25268(gp)
  81b60c:	1009883a 	mov	r4,r2
  81b610:	e0fffd17 	ldw	r3,-12(fp)
  81b614:	e0bffe17 	ldw	r2,-8(fp)
  81b618:	1885883a 	add	r2,r3,r2
  81b61c:	1006927a 	slli	r3,r2,9
  81b620:	2005883a 	mov	r2,r4
  81b624:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  81b628:	d0a75217 	ldw	r2,-25272(gp)
  81b62c:	1007883a 	mov	r3,r2
  81b630:	00800444 	movi	r2,17
  81b634:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  81b638:	d0a74f17 	ldw	r2,-25284(gp)
  81b63c:	1080002b 	ldhuio	r2,0(r2)
  81b640:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
  81b644:	e0bffb0b 	ldhu	r2,-20(fp)
  81b648:	10bfffcc 	andi	r2,r2,65535
  81b64c:	1080010c 	andi	r2,r2,4
  81b650:	1004c03a 	cmpne	r2,r2,zero
  81b654:	103ff81e 	bne	r2,zero,81b638 <Read_Sector_Data_CRC+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x30) == 0) {
  81b658:	e0bffb0b 	ldhu	r2,-20(fp)
  81b65c:	10bfffcc 	andi	r2,r2,65535
  81b660:	10800c0c 	andi	r2,r2,48
  81b664:	1004c03a 	cmpne	r2,r2,zero
  81b668:	1000071e 	bne	r2,zero,81b688 <Read_Sector_Data_CRC+0xdc>
			result = true;
  81b66c:	00800044 	movi	r2,1
  81b670:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
  81b674:	d0275815 	stw	zero,-25248(gp)
			current_sector_index = sector_index + partition_offset;
  81b678:	e0fffd17 	ldw	r3,-12(fp)
  81b67c:	e0bffe17 	ldw	r2,-8(fp)
  81b680:	1885883a 	add	r2,r3,r2
  81b684:	d0a75915 	stw	r2,-25244(gp)
		}
	}
	return result;
  81b688:	e0bffc17 	ldw	r2,-16(fp)
  81b68c:	e0bfff15 	stw	r2,-4(fp)
  81b690:	e0bfff17 	ldw	r2,-4(fp)
}
  81b694:	e037883a 	mov	sp,fp
  81b698:	dfc00117 	ldw	ra,4(sp)
  81b69c:	df000017 	ldw	fp,0(sp)
  81b6a0:	dec00204 	addi	sp,sp,8
  81b6a4:	f800283a 	ret

0081b6a8 <Read_Sector_Data_Attempt_CRC>:

bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
  81b6a8:	defff804 	addi	sp,sp,-32
  81b6ac:	dfc00715 	stw	ra,28(sp)
  81b6b0:	df000615 	stw	fp,24(sp)
  81b6b4:	df000604 	addi	fp,sp,24
  81b6b8:	e13ffd15 	stw	r4,-12(fp)
  81b6bc:	e17ffe15 	stw	r5,-8(fp)
	int i;
	bool correct;
	const int attempts = 100;
  81b6c0:	00801904 	movi	r2,100
  81b6c4:	e0bffa15 	stw	r2,-24(fp)

	for (i = 0; i < attempts; i++) {
  81b6c8:	e03ffc15 	stw	zero,-16(fp)
  81b6cc:	00000d06 	br	81b704 <Read_Sector_Data_Attempt_CRC+0x5c>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
  81b6d0:	e13ffd17 	ldw	r4,-12(fp)
  81b6d4:	e17ffe17 	ldw	r5,-8(fp)
  81b6d8:	081b5ac0 	call	81b5ac <Read_Sector_Data_CRC>
  81b6dc:	e0bffb15 	stw	r2,-20(fp)
		if (correct) {
  81b6e0:	e0bffb17 	ldw	r2,-20(fp)
  81b6e4:	1005003a 	cmpeq	r2,r2,zero
  81b6e8:	1000031e 	bne	r2,zero,81b6f8 <Read_Sector_Data_Attempt_CRC+0x50>
			return true;
  81b6ec:	00800044 	movi	r2,1
  81b6f0:	e0bfff15 	stw	r2,-4(fp)
  81b6f4:	00000a06 	br	81b720 <Read_Sector_Data_Attempt_CRC+0x78>
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
  81b6f8:	e0bffc17 	ldw	r2,-16(fp)
  81b6fc:	10800044 	addi	r2,r2,1
  81b700:	e0bffc15 	stw	r2,-16(fp)
  81b704:	e0fffc17 	ldw	r3,-16(fp)
  81b708:	e0bffa17 	ldw	r2,-24(fp)
  81b70c:	18bff016 	blt	r3,r2,81b6d0 <Read_Sector_Data_Attempt_CRC+0x28>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
  81b710:	e13ffd17 	ldw	r4,-12(fp)
  81b714:	e17ffe17 	ldw	r5,-8(fp)
  81b718:	08172900 	call	817290 <Read_Sector_Data>
  81b71c:	e0bfff15 	stw	r2,-4(fp)
  81b720:	e0bfff17 	ldw	r2,-4(fp)
}
  81b724:	e037883a 	mov	sp,fp
  81b728:	dfc00117 	ldw	ra,4(sp)
  81b72c:	df000017 	ldw	fp,0(sp)
  81b730:	dec00204 	addi	sp,sp,8
  81b734:	f800283a 	ret

0081b738 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  81b738:	defff404 	addi	sp,sp,-48
  81b73c:	df000b15 	stw	fp,44(sp)
  81b740:	df000b04 	addi	fp,sp,44
  81b744:	e13ffb15 	stw	r4,-20(fp)
  81b748:	e17ffc15 	stw	r5,-16(fp)
  81b74c:	e1bffd15 	stw	r6,-12(fp)
  81b750:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  81b754:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81b758:	008020b4 	movhi	r2,130
  81b75c:	10837c04 	addi	r2,r2,3568
  81b760:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  81b764:	1005003a 	cmpeq	r2,r2,zero
  81b768:	1000411e 	bne	r2,zero,81b870 <alt_alarm_start+0x138>
  {
    if (alarm)
  81b76c:	e0bffb17 	ldw	r2,-20(fp)
  81b770:	1005003a 	cmpeq	r2,r2,zero
  81b774:	10003b1e 	bne	r2,zero,81b864 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  81b778:	e0fffb17 	ldw	r3,-20(fp)
  81b77c:	e0bffd17 	ldw	r2,-12(fp)
  81b780:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  81b784:	e0fffb17 	ldw	r3,-20(fp)
  81b788:	e0bffe17 	ldw	r2,-8(fp)
  81b78c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b790:	0005303a 	rdctl	r2,status
  81b794:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b798:	e0fff817 	ldw	r3,-32(fp)
  81b79c:	00bfff84 	movi	r2,-2
  81b7a0:	1884703a 	and	r2,r3,r2
  81b7a4:	1001703a 	wrctl	status,r2
  
  return context;
  81b7a8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  81b7ac:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  81b7b0:	008020b4 	movhi	r2,130
  81b7b4:	10837d04 	addi	r2,r2,3572
  81b7b8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  81b7bc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  81b7c0:	e0fffc17 	ldw	r3,-16(fp)
  81b7c4:	e0bff917 	ldw	r2,-28(fp)
  81b7c8:	1885883a 	add	r2,r3,r2
  81b7cc:	10c00044 	addi	r3,r2,1
  81b7d0:	e0bffb17 	ldw	r2,-20(fp)
  81b7d4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  81b7d8:	e0bffb17 	ldw	r2,-20(fp)
  81b7dc:	10c00217 	ldw	r3,8(r2)
  81b7e0:	e0bff917 	ldw	r2,-28(fp)
  81b7e4:	1880042e 	bgeu	r3,r2,81b7f8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  81b7e8:	e0fffb17 	ldw	r3,-20(fp)
  81b7ec:	00800044 	movi	r2,1
  81b7f0:	18800405 	stb	r2,16(r3)
  81b7f4:	00000206 	br	81b800 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  81b7f8:	e0bffb17 	ldw	r2,-20(fp)
  81b7fc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  81b800:	e0fffb17 	ldw	r3,-20(fp)
  81b804:	008020b4 	movhi	r2,130
  81b808:	10bc4704 	addi	r2,r2,-3812
  81b80c:	e0bff615 	stw	r2,-40(fp)
  81b810:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81b814:	e0fff717 	ldw	r3,-36(fp)
  81b818:	e0bff617 	ldw	r2,-40(fp)
  81b81c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81b820:	e0bff617 	ldw	r2,-40(fp)
  81b824:	10c00017 	ldw	r3,0(r2)
  81b828:	e0bff717 	ldw	r2,-36(fp)
  81b82c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81b830:	e0bff617 	ldw	r2,-40(fp)
  81b834:	10c00017 	ldw	r3,0(r2)
  81b838:	e0bff717 	ldw	r2,-36(fp)
  81b83c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81b840:	e0fff617 	ldw	r3,-40(fp)
  81b844:	e0bff717 	ldw	r2,-36(fp)
  81b848:	18800015 	stw	r2,0(r3)
  81b84c:	e0bffa17 	ldw	r2,-24(fp)
  81b850:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b854:	e0bff517 	ldw	r2,-44(fp)
  81b858:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  81b85c:	e03fff15 	stw	zero,-4(fp)
  81b860:	00000506 	br	81b878 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  81b864:	00bffa84 	movi	r2,-22
  81b868:	e0bfff15 	stw	r2,-4(fp)
  81b86c:	00000206 	br	81b878 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  81b870:	00bfde84 	movi	r2,-134
  81b874:	e0bfff15 	stw	r2,-4(fp)
  81b878:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  81b87c:	e037883a 	mov	sp,fp
  81b880:	df000017 	ldw	fp,0(sp)
  81b884:	dec00104 	addi	sp,sp,4
  81b888:	f800283a 	ret

0081b88c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  81b88c:	defffa04 	addi	sp,sp,-24
  81b890:	dfc00515 	stw	ra,20(sp)
  81b894:	df000415 	stw	fp,16(sp)
  81b898:	df000404 	addi	fp,sp,16
  81b89c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  81b8a0:	008000c4 	movi	r2,3
  81b8a4:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  81b8a8:	e0fffc17 	ldw	r3,-16(fp)
  81b8ac:	008003f4 	movhi	r2,15
  81b8b0:	10909004 	addi	r2,r2,16960
  81b8b4:	188b383a 	mul	r5,r3,r2
  81b8b8:	0100bef4 	movhi	r4,763
  81b8bc:	213c2004 	addi	r4,r4,-3968
  81b8c0:	080983c0 	call	80983c <__udivsi3>
  81b8c4:	100b883a 	mov	r5,r2
  81b8c8:	01200034 	movhi	r4,32768
  81b8cc:	213fffc4 	addi	r4,r4,-1
  81b8d0:	080983c0 	call	80983c <__udivsi3>
  81b8d4:	100b883a 	mov	r5,r2
  81b8d8:	e13fff17 	ldw	r4,-4(fp)
  81b8dc:	080983c0 	call	80983c <__udivsi3>
  81b8e0:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  81b8e4:	e0bffd17 	ldw	r2,-12(fp)
  81b8e8:	1005003a 	cmpeq	r2,r2,zero
  81b8ec:	1000281e 	bne	r2,zero,81b990 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  81b8f0:	e03ffe15 	stw	zero,-8(fp)
  81b8f4:	00001606 	br	81b950 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  81b8f8:	00a00034 	movhi	r2,32768
  81b8fc:	10bfffc4 	addi	r2,r2,-1
  81b900:	10bfffc4 	addi	r2,r2,-1
  81b904:	103ffe1e 	bne	r2,zero,81b900 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  81b908:	e0fffc17 	ldw	r3,-16(fp)
  81b90c:	008003f4 	movhi	r2,15
  81b910:	10909004 	addi	r2,r2,16960
  81b914:	188b383a 	mul	r5,r3,r2
  81b918:	0100bef4 	movhi	r4,763
  81b91c:	213c2004 	addi	r4,r4,-3968
  81b920:	080983c0 	call	80983c <__udivsi3>
  81b924:	100b883a 	mov	r5,r2
  81b928:	01200034 	movhi	r4,32768
  81b92c:	213fffc4 	addi	r4,r4,-1
  81b930:	080983c0 	call	80983c <__udivsi3>
  81b934:	1007883a 	mov	r3,r2
  81b938:	e0bfff17 	ldw	r2,-4(fp)
  81b93c:	10c5c83a 	sub	r2,r2,r3
  81b940:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  81b944:	e0bffe17 	ldw	r2,-8(fp)
  81b948:	10800044 	addi	r2,r2,1
  81b94c:	e0bffe15 	stw	r2,-8(fp)
  81b950:	e0fffe17 	ldw	r3,-8(fp)
  81b954:	e0bffd17 	ldw	r2,-12(fp)
  81b958:	18bfe716 	blt	r3,r2,81b8f8 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81b95c:	e0fffc17 	ldw	r3,-16(fp)
  81b960:	008003f4 	movhi	r2,15
  81b964:	10909004 	addi	r2,r2,16960
  81b968:	188b383a 	mul	r5,r3,r2
  81b96c:	0100bef4 	movhi	r4,763
  81b970:	213c2004 	addi	r4,r4,-3968
  81b974:	080983c0 	call	80983c <__udivsi3>
  81b978:	1007883a 	mov	r3,r2
  81b97c:	e0bfff17 	ldw	r2,-4(fp)
  81b980:	1885383a 	mul	r2,r3,r2
  81b984:	10bfffc4 	addi	r2,r2,-1
  81b988:	103ffe1e 	bne	r2,zero,81b984 <alt_busy_sleep+0xf8>
  81b98c:	00000c06 	br	81b9c0 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81b990:	e0fffc17 	ldw	r3,-16(fp)
  81b994:	008003f4 	movhi	r2,15
  81b998:	10909004 	addi	r2,r2,16960
  81b99c:	188b383a 	mul	r5,r3,r2
  81b9a0:	0100bef4 	movhi	r4,763
  81b9a4:	213c2004 	addi	r4,r4,-3968
  81b9a8:	080983c0 	call	80983c <__udivsi3>
  81b9ac:	1007883a 	mov	r3,r2
  81b9b0:	e0bfff17 	ldw	r2,-4(fp)
  81b9b4:	1885383a 	mul	r2,r3,r2
  81b9b8:	10bfffc4 	addi	r2,r2,-1
  81b9bc:	00bffe16 	blt	zero,r2,81b9b8 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  81b9c0:	0005883a 	mov	r2,zero
}
  81b9c4:	e037883a 	mov	sp,fp
  81b9c8:	dfc00117 	ldw	ra,4(sp)
  81b9cc:	df000017 	ldw	fp,0(sp)
  81b9d0:	dec00204 	addi	sp,sp,8
  81b9d4:	f800283a 	ret

0081b9d8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  81b9d8:	defffe04 	addi	sp,sp,-8
  81b9dc:	df000115 	stw	fp,4(sp)
  81b9e0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81b9e4:	e03fff15 	stw	zero,-4(fp)
  81b9e8:	00000506 	br	81ba00 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  81b9ec:	e0bfff17 	ldw	r2,-4(fp)
  81b9f0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81b9f4:	e0bfff17 	ldw	r2,-4(fp)
  81b9f8:	10800804 	addi	r2,r2,32
  81b9fc:	e0bfff15 	stw	r2,-4(fp)
  81ba00:	e0bfff17 	ldw	r2,-4(fp)
  81ba04:	10900030 	cmpltui	r2,r2,16384
  81ba08:	103ff81e 	bne	r2,zero,81b9ec <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  81ba0c:	e037883a 	mov	sp,fp
  81ba10:	df000017 	ldw	fp,0(sp)
  81ba14:	dec00104 	addi	sp,sp,4
  81ba18:	f800283a 	ret

0081ba1c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  81ba1c:	defff904 	addi	sp,sp,-28
  81ba20:	dfc00615 	stw	ra,24(sp)
  81ba24:	df000515 	stw	fp,20(sp)
  81ba28:	df000504 	addi	fp,sp,20
  81ba2c:	e13ffd15 	stw	r4,-12(fp)
  81ba30:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  81ba34:	e0bffd17 	ldw	r2,-12(fp)
  81ba38:	1005003a 	cmpeq	r2,r2,zero
  81ba3c:	1000041e 	bne	r2,zero,81ba50 <alt_dev_llist_insert+0x34>
  81ba40:	e0bffd17 	ldw	r2,-12(fp)
  81ba44:	10800217 	ldw	r2,8(r2)
  81ba48:	1004c03a 	cmpne	r2,r2,zero
  81ba4c:	1000071e 	bne	r2,zero,81ba6c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  81ba50:	081bad00 	call	81bad0 <alt_get_errno>
  81ba54:	1007883a 	mov	r3,r2
  81ba58:	00800584 	movi	r2,22
  81ba5c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  81ba60:	00bffa84 	movi	r2,-22
  81ba64:	e0bfff15 	stw	r2,-4(fp)
  81ba68:	00001306 	br	81bab8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  81ba6c:	e0fffd17 	ldw	r3,-12(fp)
  81ba70:	e0bffe17 	ldw	r2,-8(fp)
  81ba74:	e0bffb15 	stw	r2,-20(fp)
  81ba78:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81ba7c:	e0fffc17 	ldw	r3,-16(fp)
  81ba80:	e0bffb17 	ldw	r2,-20(fp)
  81ba84:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81ba88:	e0bffb17 	ldw	r2,-20(fp)
  81ba8c:	10c00017 	ldw	r3,0(r2)
  81ba90:	e0bffc17 	ldw	r2,-16(fp)
  81ba94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81ba98:	e0bffb17 	ldw	r2,-20(fp)
  81ba9c:	10c00017 	ldw	r3,0(r2)
  81baa0:	e0bffc17 	ldw	r2,-16(fp)
  81baa4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81baa8:	e0fffb17 	ldw	r3,-20(fp)
  81baac:	e0bffc17 	ldw	r2,-16(fp)
  81bab0:	18800015 	stw	r2,0(r3)

  return 0;  
  81bab4:	e03fff15 	stw	zero,-4(fp)
  81bab8:	e0bfff17 	ldw	r2,-4(fp)
}
  81babc:	e037883a 	mov	sp,fp
  81bac0:	dfc00117 	ldw	ra,4(sp)
  81bac4:	df000017 	ldw	fp,0(sp)
  81bac8:	dec00204 	addi	sp,sp,8
  81bacc:	f800283a 	ret

0081bad0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81bad0:	defffd04 	addi	sp,sp,-12
  81bad4:	dfc00215 	stw	ra,8(sp)
  81bad8:	df000115 	stw	fp,4(sp)
  81badc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81bae0:	008020b4 	movhi	r2,130
  81bae4:	10bc4404 	addi	r2,r2,-3824
  81bae8:	10800017 	ldw	r2,0(r2)
  81baec:	1005003a 	cmpeq	r2,r2,zero
  81baf0:	1000061e 	bne	r2,zero,81bb0c <alt_get_errno+0x3c>
  81baf4:	008020b4 	movhi	r2,130
  81baf8:	10bc4404 	addi	r2,r2,-3824
  81bafc:	10800017 	ldw	r2,0(r2)
  81bb00:	103ee83a 	callr	r2
  81bb04:	e0bfff15 	stw	r2,-4(fp)
  81bb08:	00000306 	br	81bb18 <alt_get_errno+0x48>
  81bb0c:	008020b4 	movhi	r2,130
  81bb10:	10837004 	addi	r2,r2,3520
  81bb14:	e0bfff15 	stw	r2,-4(fp)
  81bb18:	e0bfff17 	ldw	r2,-4(fp)
}
  81bb1c:	e037883a 	mov	sp,fp
  81bb20:	dfc00117 	ldw	ra,4(sp)
  81bb24:	df000017 	ldw	fp,0(sp)
  81bb28:	dec00204 	addi	sp,sp,8
  81bb2c:	f800283a 	ret

0081bb30 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  81bb30:	defffd04 	addi	sp,sp,-12
  81bb34:	dfc00215 	stw	ra,8(sp)
  81bb38:	df000115 	stw	fp,4(sp)
  81bb3c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81bb40:	00bfff04 	movi	r2,-4
  81bb44:	00c020b4 	movhi	r3,130
  81bb48:	18f1ef04 	addi	r3,r3,-14404
  81bb4c:	1885883a 	add	r2,r3,r2
  81bb50:	e0bfff15 	stw	r2,-4(fp)
  81bb54:	00000606 	br	81bb70 <_do_ctors+0x40>
        (*ctor) (); 
  81bb58:	e0bfff17 	ldw	r2,-4(fp)
  81bb5c:	10800017 	ldw	r2,0(r2)
  81bb60:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81bb64:	e0bfff17 	ldw	r2,-4(fp)
  81bb68:	10bfff04 	addi	r2,r2,-4
  81bb6c:	e0bfff15 	stw	r2,-4(fp)
  81bb70:	e0ffff17 	ldw	r3,-4(fp)
  81bb74:	008020b4 	movhi	r2,130
  81bb78:	10b1ee04 	addi	r2,r2,-14408
  81bb7c:	18bff62e 	bgeu	r3,r2,81bb58 <_do_ctors+0x28>
        (*ctor) (); 
}
  81bb80:	e037883a 	mov	sp,fp
  81bb84:	dfc00117 	ldw	ra,4(sp)
  81bb88:	df000017 	ldw	fp,0(sp)
  81bb8c:	dec00204 	addi	sp,sp,8
  81bb90:	f800283a 	ret

0081bb94 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  81bb94:	defffd04 	addi	sp,sp,-12
  81bb98:	dfc00215 	stw	ra,8(sp)
  81bb9c:	df000115 	stw	fp,4(sp)
  81bba0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81bba4:	00bfff04 	movi	r2,-4
  81bba8:	00c020b4 	movhi	r3,130
  81bbac:	18f1ef04 	addi	r3,r3,-14404
  81bbb0:	1885883a 	add	r2,r3,r2
  81bbb4:	e0bfff15 	stw	r2,-4(fp)
  81bbb8:	00000606 	br	81bbd4 <_do_dtors+0x40>
        (*dtor) (); 
  81bbbc:	e0bfff17 	ldw	r2,-4(fp)
  81bbc0:	10800017 	ldw	r2,0(r2)
  81bbc4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81bbc8:	e0bfff17 	ldw	r2,-4(fp)
  81bbcc:	10bfff04 	addi	r2,r2,-4
  81bbd0:	e0bfff15 	stw	r2,-4(fp)
  81bbd4:	e0ffff17 	ldw	r3,-4(fp)
  81bbd8:	008020b4 	movhi	r2,130
  81bbdc:	10b1ef04 	addi	r2,r2,-14404
  81bbe0:	18bff62e 	bgeu	r3,r2,81bbbc <_do_dtors+0x28>
        (*dtor) (); 
}
  81bbe4:	e037883a 	mov	sp,fp
  81bbe8:	dfc00117 	ldw	ra,4(sp)
  81bbec:	df000017 	ldw	fp,0(sp)
  81bbf0:	dec00204 	addi	sp,sp,8
  81bbf4:	f800283a 	ret

0081bbf8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81bbf8:	defff904 	addi	sp,sp,-28
  81bbfc:	dfc00615 	stw	ra,24(sp)
  81bc00:	df000515 	stw	fp,20(sp)
  81bc04:	df000504 	addi	fp,sp,20
  81bc08:	e13ffd15 	stw	r4,-12(fp)
  81bc0c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  81bc10:	e0bffe17 	ldw	r2,-8(fp)
  81bc14:	10800017 	ldw	r2,0(r2)
  81bc18:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81bc1c:	e13ffd17 	ldw	r4,-12(fp)
  81bc20:	080aa480 	call	80aa48 <strlen>
  81bc24:	10800044 	addi	r2,r2,1
  81bc28:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81bc2c:	00000d06 	br	81bc64 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  81bc30:	e0bffc17 	ldw	r2,-16(fp)
  81bc34:	11000217 	ldw	r4,8(r2)
  81bc38:	e1bffb17 	ldw	r6,-20(fp)
  81bc3c:	e17ffd17 	ldw	r5,-12(fp)
  81bc40:	081c3900 	call	81c390 <memcmp>
  81bc44:	1004c03a 	cmpne	r2,r2,zero
  81bc48:	1000031e 	bne	r2,zero,81bc58 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  81bc4c:	e0bffc17 	ldw	r2,-16(fp)
  81bc50:	e0bfff15 	stw	r2,-4(fp)
  81bc54:	00000706 	br	81bc74 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  81bc58:	e0bffc17 	ldw	r2,-16(fp)
  81bc5c:	10800017 	ldw	r2,0(r2)
  81bc60:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81bc64:	e0fffe17 	ldw	r3,-8(fp)
  81bc68:	e0bffc17 	ldw	r2,-16(fp)
  81bc6c:	10fff01e 	bne	r2,r3,81bc30 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  81bc70:	e03fff15 	stw	zero,-4(fp)
  81bc74:	e0bfff17 	ldw	r2,-4(fp)
}
  81bc78:	e037883a 	mov	sp,fp
  81bc7c:	dfc00117 	ldw	ra,4(sp)
  81bc80:	df000017 	ldw	fp,0(sp)
  81bc84:	dec00204 	addi	sp,sp,8
  81bc88:	f800283a 	ret

0081bc8c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  81bc8c:	defffe04 	addi	sp,sp,-8
  81bc90:	dfc00115 	stw	ra,4(sp)
  81bc94:	df000015 	stw	fp,0(sp)
  81bc98:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  81bc9c:	0009883a 	mov	r4,zero
  81bca0:	01440004 	movi	r5,4096
  81bca4:	081c2b40 	call	81c2b4 <alt_icache_flush>
#endif
}
  81bca8:	e037883a 	mov	sp,fp
  81bcac:	dfc00117 	ldw	ra,4(sp)
  81bcb0:	df000017 	ldw	fp,0(sp)
  81bcb4:	dec00204 	addi	sp,sp,8
  81bcb8:	f800283a 	ret

0081bcbc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  81bcbc:	defff904 	addi	sp,sp,-28
  81bcc0:	dfc00615 	stw	ra,24(sp)
  81bcc4:	df000515 	stw	fp,20(sp)
  81bcc8:	df000504 	addi	fp,sp,20
  81bccc:	e13ffc15 	stw	r4,-16(fp)
  81bcd0:	e17ffd15 	stw	r5,-12(fp)
  81bcd4:	e1bffe15 	stw	r6,-8(fp)
  81bcd8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  81bcdc:	e13ffd17 	ldw	r4,-12(fp)
  81bce0:	e17ffe17 	ldw	r5,-8(fp)
  81bce4:	e1bfff17 	ldw	r6,-4(fp)
  81bce8:	081bed40 	call	81bed4 <open>
  81bcec:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  81bcf0:	e0bffb17 	ldw	r2,-20(fp)
  81bcf4:	1004803a 	cmplt	r2,r2,zero
  81bcf8:	10001c1e 	bne	r2,zero,81bd6c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  81bcfc:	e0bffb17 	ldw	r2,-20(fp)
  81bd00:	00c020b4 	movhi	r3,130
  81bd04:	18f76604 	addi	r3,r3,-8808
  81bd08:	10800324 	muli	r2,r2,12
  81bd0c:	10c5883a 	add	r2,r2,r3
  81bd10:	10c00017 	ldw	r3,0(r2)
  81bd14:	e0bffc17 	ldw	r2,-16(fp)
  81bd18:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  81bd1c:	e0bffb17 	ldw	r2,-20(fp)
  81bd20:	00c020b4 	movhi	r3,130
  81bd24:	18f76604 	addi	r3,r3,-8808
  81bd28:	10800324 	muli	r2,r2,12
  81bd2c:	10c5883a 	add	r2,r2,r3
  81bd30:	10800104 	addi	r2,r2,4
  81bd34:	10c00017 	ldw	r3,0(r2)
  81bd38:	e0bffc17 	ldw	r2,-16(fp)
  81bd3c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81bd40:	e0bffb17 	ldw	r2,-20(fp)
  81bd44:	00c020b4 	movhi	r3,130
  81bd48:	18f76604 	addi	r3,r3,-8808
  81bd4c:	10800324 	muli	r2,r2,12
  81bd50:	10c5883a 	add	r2,r2,r3
  81bd54:	10800204 	addi	r2,r2,8
  81bd58:	10c00017 	ldw	r3,0(r2)
  81bd5c:	e0bffc17 	ldw	r2,-16(fp)
  81bd60:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81bd64:	e13ffb17 	ldw	r4,-20(fp)
  81bd68:	0812ee80 	call	812ee8 <alt_release_fd>
  }
} 
  81bd6c:	e037883a 	mov	sp,fp
  81bd70:	dfc00117 	ldw	ra,4(sp)
  81bd74:	df000017 	ldw	fp,0(sp)
  81bd78:	dec00204 	addi	sp,sp,8
  81bd7c:	f800283a 	ret

0081bd80 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81bd80:	defffb04 	addi	sp,sp,-20
  81bd84:	dfc00415 	stw	ra,16(sp)
  81bd88:	df000315 	stw	fp,12(sp)
  81bd8c:	df000304 	addi	fp,sp,12
  81bd90:	e13ffd15 	stw	r4,-12(fp)
  81bd94:	e17ffe15 	stw	r5,-8(fp)
  81bd98:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81bd9c:	010020b4 	movhi	r4,130
  81bda0:	21376904 	addi	r4,r4,-8796
  81bda4:	e17ffd17 	ldw	r5,-12(fp)
  81bda8:	01800044 	movi	r6,1
  81bdac:	01c07fc4 	movi	r7,511
  81bdb0:	081bcbc0 	call	81bcbc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  81bdb4:	010020b4 	movhi	r4,130
  81bdb8:	21376604 	addi	r4,r4,-8808
  81bdbc:	e17ffe17 	ldw	r5,-8(fp)
  81bdc0:	000d883a 	mov	r6,zero
  81bdc4:	01c07fc4 	movi	r7,511
  81bdc8:	081bcbc0 	call	81bcbc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81bdcc:	010020b4 	movhi	r4,130
  81bdd0:	21376c04 	addi	r4,r4,-8784
  81bdd4:	e17fff17 	ldw	r5,-4(fp)
  81bdd8:	01800044 	movi	r6,1
  81bddc:	01c07fc4 	movi	r7,511
  81bde0:	081bcbc0 	call	81bcbc <alt_open_fd>
}  
  81bde4:	e037883a 	mov	sp,fp
  81bde8:	dfc00117 	ldw	ra,4(sp)
  81bdec:	df000017 	ldw	fp,0(sp)
  81bdf0:	dec00204 	addi	sp,sp,8
  81bdf4:	f800283a 	ret

0081bdf8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  81bdf8:	defffc04 	addi	sp,sp,-16
  81bdfc:	df000315 	stw	fp,12(sp)
  81be00:	df000304 	addi	fp,sp,12
  81be04:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  81be08:	e0bffe17 	ldw	r2,-8(fp)
  81be0c:	10800217 	ldw	r2,8(r2)
  81be10:	10d00034 	orhi	r3,r2,16384
  81be14:	e0bffe17 	ldw	r2,-8(fp)
  81be18:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81be1c:	e03ffd15 	stw	zero,-12(fp)
  81be20:	00002006 	br	81bea4 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81be24:	e0bffd17 	ldw	r2,-12(fp)
  81be28:	00c020b4 	movhi	r3,130
  81be2c:	18f76604 	addi	r3,r3,-8808
  81be30:	10800324 	muli	r2,r2,12
  81be34:	10c5883a 	add	r2,r2,r3
  81be38:	10c00017 	ldw	r3,0(r2)
  81be3c:	e0bffe17 	ldw	r2,-8(fp)
  81be40:	10800017 	ldw	r2,0(r2)
  81be44:	1880141e 	bne	r3,r2,81be98 <alt_file_locked+0xa0>
  81be48:	e0bffd17 	ldw	r2,-12(fp)
  81be4c:	00c020b4 	movhi	r3,130
  81be50:	18f76604 	addi	r3,r3,-8808
  81be54:	10800324 	muli	r2,r2,12
  81be58:	10c5883a 	add	r2,r2,r3
  81be5c:	10800204 	addi	r2,r2,8
  81be60:	10800017 	ldw	r2,0(r2)
  81be64:	1004403a 	cmpge	r2,r2,zero
  81be68:	10000b1e 	bne	r2,zero,81be98 <alt_file_locked+0xa0>
  81be6c:	e0bffd17 	ldw	r2,-12(fp)
  81be70:	10800324 	muli	r2,r2,12
  81be74:	1007883a 	mov	r3,r2
  81be78:	008020b4 	movhi	r2,130
  81be7c:	10b76604 	addi	r2,r2,-8808
  81be80:	1887883a 	add	r3,r3,r2
  81be84:	e0bffe17 	ldw	r2,-8(fp)
  81be88:	18800326 	beq	r3,r2,81be98 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81be8c:	00bffcc4 	movi	r2,-13
  81be90:	e0bfff15 	stw	r2,-4(fp)
  81be94:	00000a06 	br	81bec0 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81be98:	e0bffd17 	ldw	r2,-12(fp)
  81be9c:	10800044 	addi	r2,r2,1
  81bea0:	e0bffd15 	stw	r2,-12(fp)
  81bea4:	008020b4 	movhi	r2,130
  81bea8:	10bc4304 	addi	r2,r2,-3828
  81beac:	10800017 	ldw	r2,0(r2)
  81beb0:	1007883a 	mov	r3,r2
  81beb4:	e0bffd17 	ldw	r2,-12(fp)
  81beb8:	18bfda2e 	bgeu	r3,r2,81be24 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  81bebc:	e03fff15 	stw	zero,-4(fp)
  81bec0:	e0bfff17 	ldw	r2,-4(fp)
}
  81bec4:	e037883a 	mov	sp,fp
  81bec8:	df000017 	ldw	fp,0(sp)
  81becc:	dec00104 	addi	sp,sp,4
  81bed0:	f800283a 	ret

0081bed4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  81bed4:	defff404 	addi	sp,sp,-48
  81bed8:	dfc00b15 	stw	ra,44(sp)
  81bedc:	df000a15 	stw	fp,40(sp)
  81bee0:	df000a04 	addi	fp,sp,40
  81bee4:	e13ffb15 	stw	r4,-20(fp)
  81bee8:	e17ffc15 	stw	r5,-16(fp)
  81beec:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81bef0:	00bfffc4 	movi	r2,-1
  81bef4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  81bef8:	00bffb44 	movi	r2,-19
  81befc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  81bf00:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  81bf04:	e13ffb17 	ldw	r4,-20(fp)
  81bf08:	014020b4 	movhi	r5,130
  81bf0c:	297c4104 	addi	r5,r5,-3836
  81bf10:	081bbf80 	call	81bbf8 <alt_find_dev>
  81bf14:	e0bffa15 	stw	r2,-24(fp)
  81bf18:	e0bffa17 	ldw	r2,-24(fp)
  81bf1c:	1004c03a 	cmpne	r2,r2,zero
  81bf20:	1000051e 	bne	r2,zero,81bf38 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  81bf24:	e13ffb17 	ldw	r4,-20(fp)
  81bf28:	081c0dc0 	call	81c0dc <alt_find_file>
  81bf2c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  81bf30:	00800044 	movi	r2,1
  81bf34:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  81bf38:	e0bffa17 	ldw	r2,-24(fp)
  81bf3c:	1005003a 	cmpeq	r2,r2,zero
  81bf40:	1000301e 	bne	r2,zero,81c004 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  81bf44:	e13ffa17 	ldw	r4,-24(fp)
  81bf48:	081c1fc0 	call	81c1fc <alt_get_fd>
  81bf4c:	e0bff815 	stw	r2,-32(fp)
  81bf50:	e0bff817 	ldw	r2,-32(fp)
  81bf54:	1004403a 	cmpge	r2,r2,zero
  81bf58:	1000031e 	bne	r2,zero,81bf68 <open+0x94>
    {
      status = index;
  81bf5c:	e0bff817 	ldw	r2,-32(fp)
  81bf60:	e0bff715 	stw	r2,-36(fp)
  81bf64:	00002906 	br	81c00c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  81bf68:	e0bff817 	ldw	r2,-32(fp)
  81bf6c:	10800324 	muli	r2,r2,12
  81bf70:	1007883a 	mov	r3,r2
  81bf74:	008020b4 	movhi	r2,130
  81bf78:	10b76604 	addi	r2,r2,-8808
  81bf7c:	1885883a 	add	r2,r3,r2
  81bf80:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  81bf84:	e0fffc17 	ldw	r3,-16(fp)
  81bf88:	00900034 	movhi	r2,16384
  81bf8c:	10bfffc4 	addi	r2,r2,-1
  81bf90:	1886703a 	and	r3,r3,r2
  81bf94:	e0bff917 	ldw	r2,-28(fp)
  81bf98:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81bf9c:	e0bff617 	ldw	r2,-40(fp)
  81bfa0:	1004c03a 	cmpne	r2,r2,zero
  81bfa4:	1000061e 	bne	r2,zero,81bfc0 <open+0xec>
  81bfa8:	e13ff917 	ldw	r4,-28(fp)
  81bfac:	081bdf80 	call	81bdf8 <alt_file_locked>
  81bfb0:	e0bff715 	stw	r2,-36(fp)
  81bfb4:	e0bff717 	ldw	r2,-36(fp)
  81bfb8:	1004803a 	cmplt	r2,r2,zero
  81bfbc:	1000131e 	bne	r2,zero,81c00c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  81bfc0:	e0bffa17 	ldw	r2,-24(fp)
  81bfc4:	10800317 	ldw	r2,12(r2)
  81bfc8:	1005003a 	cmpeq	r2,r2,zero
  81bfcc:	1000091e 	bne	r2,zero,81bff4 <open+0x120>
  81bfd0:	e0bffa17 	ldw	r2,-24(fp)
  81bfd4:	10800317 	ldw	r2,12(r2)
  81bfd8:	e13ff917 	ldw	r4,-28(fp)
  81bfdc:	e17ffb17 	ldw	r5,-20(fp)
  81bfe0:	e1bffc17 	ldw	r6,-16(fp)
  81bfe4:	e1fffd17 	ldw	r7,-12(fp)
  81bfe8:	103ee83a 	callr	r2
  81bfec:	e0bfff15 	stw	r2,-4(fp)
  81bff0:	00000106 	br	81bff8 <open+0x124>
  81bff4:	e03fff15 	stw	zero,-4(fp)
  81bff8:	e0bfff17 	ldw	r2,-4(fp)
  81bffc:	e0bff715 	stw	r2,-36(fp)
  81c000:	00000206 	br	81c00c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81c004:	00bffb44 	movi	r2,-19
  81c008:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81c00c:	e0bff717 	ldw	r2,-36(fp)
  81c010:	1004403a 	cmpge	r2,r2,zero
  81c014:	1000091e 	bne	r2,zero,81c03c <open+0x168>
  {
    alt_release_fd (index);  
  81c018:	e13ff817 	ldw	r4,-32(fp)
  81c01c:	0812ee80 	call	812ee8 <alt_release_fd>
    ALT_ERRNO = -status;
  81c020:	081c05c0 	call	81c05c <alt_get_errno>
  81c024:	e0fff717 	ldw	r3,-36(fp)
  81c028:	00c7c83a 	sub	r3,zero,r3
  81c02c:	10c00015 	stw	r3,0(r2)
    return -1;
  81c030:	00bfffc4 	movi	r2,-1
  81c034:	e0bffe15 	stw	r2,-8(fp)
  81c038:	00000206 	br	81c044 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  81c03c:	e0bff817 	ldw	r2,-32(fp)
  81c040:	e0bffe15 	stw	r2,-8(fp)
  81c044:	e0bffe17 	ldw	r2,-8(fp)
}
  81c048:	e037883a 	mov	sp,fp
  81c04c:	dfc00117 	ldw	ra,4(sp)
  81c050:	df000017 	ldw	fp,0(sp)
  81c054:	dec00204 	addi	sp,sp,8
  81c058:	f800283a 	ret

0081c05c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81c05c:	defffd04 	addi	sp,sp,-12
  81c060:	dfc00215 	stw	ra,8(sp)
  81c064:	df000115 	stw	fp,4(sp)
  81c068:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81c06c:	008020b4 	movhi	r2,130
  81c070:	10bc4404 	addi	r2,r2,-3824
  81c074:	10800017 	ldw	r2,0(r2)
  81c078:	1005003a 	cmpeq	r2,r2,zero
  81c07c:	1000061e 	bne	r2,zero,81c098 <alt_get_errno+0x3c>
  81c080:	008020b4 	movhi	r2,130
  81c084:	10bc4404 	addi	r2,r2,-3824
  81c088:	10800017 	ldw	r2,0(r2)
  81c08c:	103ee83a 	callr	r2
  81c090:	e0bfff15 	stw	r2,-4(fp)
  81c094:	00000306 	br	81c0a4 <alt_get_errno+0x48>
  81c098:	008020b4 	movhi	r2,130
  81c09c:	10837004 	addi	r2,r2,3520
  81c0a0:	e0bfff15 	stw	r2,-4(fp)
  81c0a4:	e0bfff17 	ldw	r2,-4(fp)
}
  81c0a8:	e037883a 	mov	sp,fp
  81c0ac:	dfc00117 	ldw	ra,4(sp)
  81c0b0:	df000017 	ldw	fp,0(sp)
  81c0b4:	dec00204 	addi	sp,sp,8
  81c0b8:	f800283a 	ret

0081c0bc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  81c0bc:	deffff04 	addi	sp,sp,-4
  81c0c0:	df000015 	stw	fp,0(sp)
  81c0c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81c0c8:	000170fa 	wrctl	ienable,zero
}
  81c0cc:	e037883a 	mov	sp,fp
  81c0d0:	df000017 	ldw	fp,0(sp)
  81c0d4:	dec00104 	addi	sp,sp,4
  81c0d8:	f800283a 	ret

0081c0dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81c0dc:	defffa04 	addi	sp,sp,-24
  81c0e0:	dfc00515 	stw	ra,20(sp)
  81c0e4:	df000415 	stw	fp,16(sp)
  81c0e8:	df000404 	addi	fp,sp,16
  81c0ec:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81c0f0:	008020b4 	movhi	r2,130
  81c0f4:	10bc3f04 	addi	r2,r2,-3844
  81c0f8:	10800017 	ldw	r2,0(r2)
  81c0fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81c100:	00003306 	br	81c1d0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  81c104:	e0bffd17 	ldw	r2,-12(fp)
  81c108:	11000217 	ldw	r4,8(r2)
  81c10c:	080aa480 	call	80aa48 <strlen>
  81c110:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  81c114:	e0bffd17 	ldw	r2,-12(fp)
  81c118:	10c00217 	ldw	r3,8(r2)
  81c11c:	e0bffc17 	ldw	r2,-16(fp)
  81c120:	1885883a 	add	r2,r3,r2
  81c124:	10bfffc4 	addi	r2,r2,-1
  81c128:	10800003 	ldbu	r2,0(r2)
  81c12c:	10803fcc 	andi	r2,r2,255
  81c130:	1080201c 	xori	r2,r2,128
  81c134:	10bfe004 	addi	r2,r2,-128
  81c138:	10800bd8 	cmpnei	r2,r2,47
  81c13c:	1000031e 	bne	r2,zero,81c14c <alt_find_file+0x70>
    {
      len -= 1;
  81c140:	e0bffc17 	ldw	r2,-16(fp)
  81c144:	10bfffc4 	addi	r2,r2,-1
  81c148:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81c14c:	e0bffc17 	ldw	r2,-16(fp)
  81c150:	1007883a 	mov	r3,r2
  81c154:	e0bffe17 	ldw	r2,-8(fp)
  81c158:	1885883a 	add	r2,r3,r2
  81c15c:	10800003 	ldbu	r2,0(r2)
  81c160:	10803fcc 	andi	r2,r2,255
  81c164:	1080201c 	xori	r2,r2,128
  81c168:	10bfe004 	addi	r2,r2,-128
  81c16c:	10800be0 	cmpeqi	r2,r2,47
  81c170:	10000a1e 	bne	r2,zero,81c19c <alt_find_file+0xc0>
  81c174:	e0bffc17 	ldw	r2,-16(fp)
  81c178:	1007883a 	mov	r3,r2
  81c17c:	e0bffe17 	ldw	r2,-8(fp)
  81c180:	1885883a 	add	r2,r3,r2
  81c184:	10800003 	ldbu	r2,0(r2)
  81c188:	10803fcc 	andi	r2,r2,255
  81c18c:	1080201c 	xori	r2,r2,128
  81c190:	10bfe004 	addi	r2,r2,-128
  81c194:	1004c03a 	cmpne	r2,r2,zero
  81c198:	10000a1e 	bne	r2,zero,81c1c4 <alt_find_file+0xe8>
  81c19c:	e0bffd17 	ldw	r2,-12(fp)
  81c1a0:	11000217 	ldw	r4,8(r2)
  81c1a4:	e1bffc17 	ldw	r6,-16(fp)
  81c1a8:	e17ffe17 	ldw	r5,-8(fp)
  81c1ac:	081c3900 	call	81c390 <memcmp>
  81c1b0:	1004c03a 	cmpne	r2,r2,zero
  81c1b4:	1000031e 	bne	r2,zero,81c1c4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  81c1b8:	e0bffd17 	ldw	r2,-12(fp)
  81c1bc:	e0bfff15 	stw	r2,-4(fp)
  81c1c0:	00000806 	br	81c1e4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  81c1c4:	e0bffd17 	ldw	r2,-12(fp)
  81c1c8:	10800017 	ldw	r2,0(r2)
  81c1cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81c1d0:	00c020b4 	movhi	r3,130
  81c1d4:	18fc3f04 	addi	r3,r3,-3844
  81c1d8:	e0bffd17 	ldw	r2,-12(fp)
  81c1dc:	10ffc91e 	bne	r2,r3,81c104 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  81c1e0:	e03fff15 	stw	zero,-4(fp)
  81c1e4:	e0bfff17 	ldw	r2,-4(fp)
}
  81c1e8:	e037883a 	mov	sp,fp
  81c1ec:	dfc00117 	ldw	ra,4(sp)
  81c1f0:	df000017 	ldw	fp,0(sp)
  81c1f4:	dec00204 	addi	sp,sp,8
  81c1f8:	f800283a 	ret

0081c1fc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81c1fc:	defffc04 	addi	sp,sp,-16
  81c200:	df000315 	stw	fp,12(sp)
  81c204:	df000304 	addi	fp,sp,12
  81c208:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81c20c:	00bffa04 	movi	r2,-24
  81c210:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81c214:	e03ffe15 	stw	zero,-8(fp)
  81c218:	00001e06 	br	81c294 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  81c21c:	e0bffe17 	ldw	r2,-8(fp)
  81c220:	00c020b4 	movhi	r3,130
  81c224:	18f76604 	addi	r3,r3,-8808
  81c228:	10800324 	muli	r2,r2,12
  81c22c:	10c5883a 	add	r2,r2,r3
  81c230:	10800017 	ldw	r2,0(r2)
  81c234:	1004c03a 	cmpne	r2,r2,zero
  81c238:	1000131e 	bne	r2,zero,81c288 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  81c23c:	e0bffe17 	ldw	r2,-8(fp)
  81c240:	00c020b4 	movhi	r3,130
  81c244:	18f76604 	addi	r3,r3,-8808
  81c248:	10800324 	muli	r2,r2,12
  81c24c:	10c7883a 	add	r3,r2,r3
  81c250:	e0bfff17 	ldw	r2,-4(fp)
  81c254:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  81c258:	008020b4 	movhi	r2,130
  81c25c:	10bc4304 	addi	r2,r2,-3828
  81c260:	10c00017 	ldw	r3,0(r2)
  81c264:	e0bffe17 	ldw	r2,-8(fp)
  81c268:	1880040e 	bge	r3,r2,81c27c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  81c26c:	00c020b4 	movhi	r3,130
  81c270:	18fc4304 	addi	r3,r3,-3828
  81c274:	e0bffe17 	ldw	r2,-8(fp)
  81c278:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  81c27c:	e0bffe17 	ldw	r2,-8(fp)
  81c280:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  81c284:	00000606 	br	81c2a0 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81c288:	e0bffe17 	ldw	r2,-8(fp)
  81c28c:	10800044 	addi	r2,r2,1
  81c290:	e0bffe15 	stw	r2,-8(fp)
  81c294:	e0bffe17 	ldw	r2,-8(fp)
  81c298:	10800810 	cmplti	r2,r2,32
  81c29c:	103fdf1e 	bne	r2,zero,81c21c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  81c2a0:	e0bffd17 	ldw	r2,-12(fp)
}
  81c2a4:	e037883a 	mov	sp,fp
  81c2a8:	df000017 	ldw	fp,0(sp)
  81c2ac:	dec00104 	addi	sp,sp,4
  81c2b0:	f800283a 	ret

0081c2b4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  81c2b4:	defffb04 	addi	sp,sp,-20
  81c2b8:	df000415 	stw	fp,16(sp)
  81c2bc:	df000404 	addi	fp,sp,16
  81c2c0:	e13ffe15 	stw	r4,-8(fp)
  81c2c4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  81c2c8:	e0bfff17 	ldw	r2,-4(fp)
  81c2cc:	10840070 	cmpltui	r2,r2,4097
  81c2d0:	1000021e 	bne	r2,zero,81c2dc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  81c2d4:	00840004 	movi	r2,4096
  81c2d8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  81c2dc:	e0fffe17 	ldw	r3,-8(fp)
  81c2e0:	e0bfff17 	ldw	r2,-4(fp)
  81c2e4:	1885883a 	add	r2,r3,r2
  81c2e8:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81c2ec:	e0bffe17 	ldw	r2,-8(fp)
  81c2f0:	e0bffd15 	stw	r2,-12(fp)
  81c2f4:	00000506 	br	81c30c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  81c2f8:	e0bffd17 	ldw	r2,-12(fp)
  81c2fc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81c300:	e0bffd17 	ldw	r2,-12(fp)
  81c304:	10800804 	addi	r2,r2,32
  81c308:	e0bffd15 	stw	r2,-12(fp)
  81c30c:	e0fffd17 	ldw	r3,-12(fp)
  81c310:	e0bffc17 	ldw	r2,-16(fp)
  81c314:	18bff836 	bltu	r3,r2,81c2f8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  81c318:	e0bffe17 	ldw	r2,-8(fp)
  81c31c:	108007cc 	andi	r2,r2,31
  81c320:	1005003a 	cmpeq	r2,r2,zero
  81c324:	1000021e 	bne	r2,zero,81c330 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  81c328:	e0bffd17 	ldw	r2,-12(fp)
  81c32c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  81c330:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  81c334:	e037883a 	mov	sp,fp
  81c338:	df000017 	ldw	fp,0(sp)
  81c33c:	dec00104 	addi	sp,sp,4
  81c340:	f800283a 	ret

0081c344 <atexit>:
  81c344:	200b883a 	mov	r5,r4
  81c348:	000d883a 	mov	r6,zero
  81c34c:	0009883a 	mov	r4,zero
  81c350:	000f883a 	mov	r7,zero
  81c354:	081c4041 	jmpi	81c404 <__register_exitproc>

0081c358 <exit>:
  81c358:	defffe04 	addi	sp,sp,-8
  81c35c:	000b883a 	mov	r5,zero
  81c360:	dc000015 	stw	r16,0(sp)
  81c364:	dfc00115 	stw	ra,4(sp)
  81c368:	2021883a 	mov	r16,r4
  81c36c:	081c53c0 	call	81c53c <__call_exitprocs>
  81c370:	008020b4 	movhi	r2,130
  81c374:	10bc3a04 	addi	r2,r2,-3864
  81c378:	11000017 	ldw	r4,0(r2)
  81c37c:	20800f17 	ldw	r2,60(r4)
  81c380:	10000126 	beq	r2,zero,81c388 <exit+0x30>
  81c384:	103ee83a 	callr	r2
  81c388:	8009883a 	mov	r4,r16
  81c38c:	081c72c0 	call	81c72c <_exit>

0081c390 <memcmp>:
  81c390:	00c000c4 	movi	r3,3
  81c394:	1980032e 	bgeu	r3,r6,81c3a4 <memcmp+0x14>
  81c398:	2144b03a 	or	r2,r4,r5
  81c39c:	10c4703a 	and	r2,r2,r3
  81c3a0:	10000f26 	beq	r2,zero,81c3e0 <memcmp+0x50>
  81c3a4:	31ffffc4 	addi	r7,r6,-1
  81c3a8:	3000061e 	bne	r6,zero,81c3c4 <memcmp+0x34>
  81c3ac:	00000a06 	br	81c3d8 <memcmp+0x48>
  81c3b0:	39ffffc4 	addi	r7,r7,-1
  81c3b4:	00bfffc4 	movi	r2,-1
  81c3b8:	21000044 	addi	r4,r4,1
  81c3bc:	29400044 	addi	r5,r5,1
  81c3c0:	38800526 	beq	r7,r2,81c3d8 <memcmp+0x48>
  81c3c4:	20c00003 	ldbu	r3,0(r4)
  81c3c8:	28800003 	ldbu	r2,0(r5)
  81c3cc:	18bff826 	beq	r3,r2,81c3b0 <memcmp+0x20>
  81c3d0:	1885c83a 	sub	r2,r3,r2
  81c3d4:	f800283a 	ret
  81c3d8:	0005883a 	mov	r2,zero
  81c3dc:	f800283a 	ret
  81c3e0:	180f883a 	mov	r7,r3
  81c3e4:	20c00017 	ldw	r3,0(r4)
  81c3e8:	28800017 	ldw	r2,0(r5)
  81c3ec:	18bfed1e 	bne	r3,r2,81c3a4 <memcmp+0x14>
  81c3f0:	31bfff04 	addi	r6,r6,-4
  81c3f4:	21000104 	addi	r4,r4,4
  81c3f8:	29400104 	addi	r5,r5,4
  81c3fc:	39bff936 	bltu	r7,r6,81c3e4 <memcmp+0x54>
  81c400:	003fe806 	br	81c3a4 <memcmp+0x14>

0081c404 <__register_exitproc>:
  81c404:	defffa04 	addi	sp,sp,-24
  81c408:	008020b4 	movhi	r2,130
  81c40c:	10bc3a04 	addi	r2,r2,-3864
  81c410:	dc000015 	stw	r16,0(sp)
  81c414:	14000017 	ldw	r16,0(r2)
  81c418:	dd000415 	stw	r20,16(sp)
  81c41c:	2829883a 	mov	r20,r5
  81c420:	81405217 	ldw	r5,328(r16)
  81c424:	dcc00315 	stw	r19,12(sp)
  81c428:	dc800215 	stw	r18,8(sp)
  81c42c:	dc400115 	stw	r17,4(sp)
  81c430:	dfc00515 	stw	ra,20(sp)
  81c434:	2023883a 	mov	r17,r4
  81c438:	3027883a 	mov	r19,r6
  81c43c:	3825883a 	mov	r18,r7
  81c440:	28002526 	beq	r5,zero,81c4d8 <__register_exitproc+0xd4>
  81c444:	29000117 	ldw	r4,4(r5)
  81c448:	008007c4 	movi	r2,31
  81c44c:	11002716 	blt	r2,r4,81c4ec <__register_exitproc+0xe8>
  81c450:	8800101e 	bne	r17,zero,81c494 <__register_exitproc+0x90>
  81c454:	2105883a 	add	r2,r4,r4
  81c458:	1085883a 	add	r2,r2,r2
  81c45c:	20c00044 	addi	r3,r4,1
  81c460:	1145883a 	add	r2,r2,r5
  81c464:	0009883a 	mov	r4,zero
  81c468:	15000215 	stw	r20,8(r2)
  81c46c:	28c00115 	stw	r3,4(r5)
  81c470:	2005883a 	mov	r2,r4
  81c474:	dfc00517 	ldw	ra,20(sp)
  81c478:	dd000417 	ldw	r20,16(sp)
  81c47c:	dcc00317 	ldw	r19,12(sp)
  81c480:	dc800217 	ldw	r18,8(sp)
  81c484:	dc400117 	ldw	r17,4(sp)
  81c488:	dc000017 	ldw	r16,0(sp)
  81c48c:	dec00604 	addi	sp,sp,24
  81c490:	f800283a 	ret
  81c494:	29802204 	addi	r6,r5,136
  81c498:	00800044 	movi	r2,1
  81c49c:	110e983a 	sll	r7,r2,r4
  81c4a0:	30c04017 	ldw	r3,256(r6)
  81c4a4:	2105883a 	add	r2,r4,r4
  81c4a8:	1085883a 	add	r2,r2,r2
  81c4ac:	1185883a 	add	r2,r2,r6
  81c4b0:	19c6b03a 	or	r3,r3,r7
  81c4b4:	14802015 	stw	r18,128(r2)
  81c4b8:	14c00015 	stw	r19,0(r2)
  81c4bc:	00800084 	movi	r2,2
  81c4c0:	30c04015 	stw	r3,256(r6)
  81c4c4:	88bfe31e 	bne	r17,r2,81c454 <__register_exitproc+0x50>
  81c4c8:	30804117 	ldw	r2,260(r6)
  81c4cc:	11c4b03a 	or	r2,r2,r7
  81c4d0:	30804115 	stw	r2,260(r6)
  81c4d4:	003fdf06 	br	81c454 <__register_exitproc+0x50>
  81c4d8:	008020f4 	movhi	r2,131
  81c4dc:	10acdd04 	addi	r2,r2,-19596
  81c4e0:	100b883a 	mov	r5,r2
  81c4e4:	80805215 	stw	r2,328(r16)
  81c4e8:	003fd606 	br	81c444 <__register_exitproc+0x40>
  81c4ec:	00802074 	movhi	r2,129
  81c4f0:	10a83104 	addi	r2,r2,-24380
  81c4f4:	1000021e 	bne	r2,zero,81c500 <__register_exitproc+0xfc>
  81c4f8:	013fffc4 	movi	r4,-1
  81c4fc:	003fdc06 	br	81c470 <__register_exitproc+0x6c>
  81c500:	01006404 	movi	r4,400
  81c504:	103ee83a 	callr	r2
  81c508:	1007883a 	mov	r3,r2
  81c50c:	103ffa26 	beq	r2,zero,81c4f8 <__register_exitproc+0xf4>
  81c510:	80805217 	ldw	r2,328(r16)
  81c514:	180b883a 	mov	r5,r3
  81c518:	18000115 	stw	zero,4(r3)
  81c51c:	18800015 	stw	r2,0(r3)
  81c520:	80c05215 	stw	r3,328(r16)
  81c524:	18006215 	stw	zero,392(r3)
  81c528:	18006315 	stw	zero,396(r3)
  81c52c:	0009883a 	mov	r4,zero
  81c530:	883fc826 	beq	r17,zero,81c454 <__register_exitproc+0x50>
  81c534:	003fd706 	br	81c494 <__register_exitproc+0x90>

0081c538 <register_fini>:
  81c538:	f800283a 	ret

0081c53c <__call_exitprocs>:
  81c53c:	008020b4 	movhi	r2,130
  81c540:	10bc3a04 	addi	r2,r2,-3864
  81c544:	10800017 	ldw	r2,0(r2)
  81c548:	defff304 	addi	sp,sp,-52
  81c54c:	df000b15 	stw	fp,44(sp)
  81c550:	d8800115 	stw	r2,4(sp)
  81c554:	00802074 	movhi	r2,129
  81c558:	10a82c04 	addi	r2,r2,-24400
  81c55c:	1005003a 	cmpeq	r2,r2,zero
  81c560:	d8800215 	stw	r2,8(sp)
  81c564:	d8800117 	ldw	r2,4(sp)
  81c568:	dd400815 	stw	r21,32(sp)
  81c56c:	dd000715 	stw	r20,28(sp)
  81c570:	10805204 	addi	r2,r2,328
  81c574:	dfc00c15 	stw	ra,48(sp)
  81c578:	ddc00a15 	stw	r23,40(sp)
  81c57c:	dd800915 	stw	r22,36(sp)
  81c580:	dcc00615 	stw	r19,24(sp)
  81c584:	dc800515 	stw	r18,20(sp)
  81c588:	dc400415 	stw	r17,16(sp)
  81c58c:	dc000315 	stw	r16,12(sp)
  81c590:	282b883a 	mov	r21,r5
  81c594:	2039883a 	mov	fp,r4
  81c598:	d8800015 	stw	r2,0(sp)
  81c59c:	2829003a 	cmpeq	r20,r5,zero
  81c5a0:	d8800117 	ldw	r2,4(sp)
  81c5a4:	14405217 	ldw	r17,328(r2)
  81c5a8:	88001026 	beq	r17,zero,81c5ec <__call_exitprocs+0xb0>
  81c5ac:	ddc00017 	ldw	r23,0(sp)
  81c5b0:	88800117 	ldw	r2,4(r17)
  81c5b4:	8c802204 	addi	r18,r17,136
  81c5b8:	143fffc4 	addi	r16,r2,-1
  81c5bc:	80000916 	blt	r16,zero,81c5e4 <__call_exitprocs+0xa8>
  81c5c0:	05bfffc4 	movi	r22,-1
  81c5c4:	a000151e 	bne	r20,zero,81c61c <__call_exitprocs+0xe0>
  81c5c8:	8409883a 	add	r4,r16,r16
  81c5cc:	2105883a 	add	r2,r4,r4
  81c5d0:	1485883a 	add	r2,r2,r18
  81c5d4:	10c02017 	ldw	r3,128(r2)
  81c5d8:	a8c01126 	beq	r21,r3,81c620 <__call_exitprocs+0xe4>
  81c5dc:	843fffc4 	addi	r16,r16,-1
  81c5e0:	85bff81e 	bne	r16,r22,81c5c4 <__call_exitprocs+0x88>
  81c5e4:	d8800217 	ldw	r2,8(sp)
  81c5e8:	10003126 	beq	r2,zero,81c6b0 <__call_exitprocs+0x174>
  81c5ec:	dfc00c17 	ldw	ra,48(sp)
  81c5f0:	df000b17 	ldw	fp,44(sp)
  81c5f4:	ddc00a17 	ldw	r23,40(sp)
  81c5f8:	dd800917 	ldw	r22,36(sp)
  81c5fc:	dd400817 	ldw	r21,32(sp)
  81c600:	dd000717 	ldw	r20,28(sp)
  81c604:	dcc00617 	ldw	r19,24(sp)
  81c608:	dc800517 	ldw	r18,20(sp)
  81c60c:	dc400417 	ldw	r17,16(sp)
  81c610:	dc000317 	ldw	r16,12(sp)
  81c614:	dec00d04 	addi	sp,sp,52
  81c618:	f800283a 	ret
  81c61c:	8409883a 	add	r4,r16,r16
  81c620:	88c00117 	ldw	r3,4(r17)
  81c624:	2105883a 	add	r2,r4,r4
  81c628:	1445883a 	add	r2,r2,r17
  81c62c:	18ffffc4 	addi	r3,r3,-1
  81c630:	11800217 	ldw	r6,8(r2)
  81c634:	1c001526 	beq	r3,r16,81c68c <__call_exitprocs+0x150>
  81c638:	10000215 	stw	zero,8(r2)
  81c63c:	303fe726 	beq	r6,zero,81c5dc <__call_exitprocs+0xa0>
  81c640:	00c00044 	movi	r3,1
  81c644:	1c06983a 	sll	r3,r3,r16
  81c648:	90804017 	ldw	r2,256(r18)
  81c64c:	8cc00117 	ldw	r19,4(r17)
  81c650:	1884703a 	and	r2,r3,r2
  81c654:	10001426 	beq	r2,zero,81c6a8 <__call_exitprocs+0x16c>
  81c658:	90804117 	ldw	r2,260(r18)
  81c65c:	1884703a 	and	r2,r3,r2
  81c660:	10000c1e 	bne	r2,zero,81c694 <__call_exitprocs+0x158>
  81c664:	2105883a 	add	r2,r4,r4
  81c668:	1485883a 	add	r2,r2,r18
  81c66c:	11400017 	ldw	r5,0(r2)
  81c670:	e009883a 	mov	r4,fp
  81c674:	303ee83a 	callr	r6
  81c678:	88800117 	ldw	r2,4(r17)
  81c67c:	98bfc81e 	bne	r19,r2,81c5a0 <__call_exitprocs+0x64>
  81c680:	b8800017 	ldw	r2,0(r23)
  81c684:	147fd526 	beq	r2,r17,81c5dc <__call_exitprocs+0xa0>
  81c688:	003fc506 	br	81c5a0 <__call_exitprocs+0x64>
  81c68c:	8c000115 	stw	r16,4(r17)
  81c690:	003fea06 	br	81c63c <__call_exitprocs+0x100>
  81c694:	2105883a 	add	r2,r4,r4
  81c698:	1485883a 	add	r2,r2,r18
  81c69c:	11000017 	ldw	r4,0(r2)
  81c6a0:	303ee83a 	callr	r6
  81c6a4:	003ff406 	br	81c678 <__call_exitprocs+0x13c>
  81c6a8:	303ee83a 	callr	r6
  81c6ac:	003ff206 	br	81c678 <__call_exitprocs+0x13c>
  81c6b0:	88800117 	ldw	r2,4(r17)
  81c6b4:	1000081e 	bne	r2,zero,81c6d8 <__call_exitprocs+0x19c>
  81c6b8:	89000017 	ldw	r4,0(r17)
  81c6bc:	20000726 	beq	r4,zero,81c6dc <__call_exitprocs+0x1a0>
  81c6c0:	b9000015 	stw	r4,0(r23)
  81c6c4:	8809883a 	mov	r4,r17
  81c6c8:	080a0b00 	call	80a0b0 <free>
  81c6cc:	bc400017 	ldw	r17,0(r23)
  81c6d0:	883fb71e 	bne	r17,zero,81c5b0 <__call_exitprocs+0x74>
  81c6d4:	003fc506 	br	81c5ec <__call_exitprocs+0xb0>
  81c6d8:	89000017 	ldw	r4,0(r17)
  81c6dc:	882f883a 	mov	r23,r17
  81c6e0:	2023883a 	mov	r17,r4
  81c6e4:	883fb21e 	bne	r17,zero,81c5b0 <__call_exitprocs+0x74>
  81c6e8:	003fc006 	br	81c5ec <__call_exitprocs+0xb0>

0081c6ec <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  81c6ec:	defffd04 	addi	sp,sp,-12
  81c6f0:	df000215 	stw	fp,8(sp)
  81c6f4:	df000204 	addi	fp,sp,8
  81c6f8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  81c6fc:	e0bfff17 	ldw	r2,-4(fp)
  81c700:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81c704:	e0bffe17 	ldw	r2,-8(fp)
  81c708:	1005003a 	cmpeq	r2,r2,zero
  81c70c:	1000021e 	bne	r2,zero,81c718 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  81c710:	002af070 	cmpltui	zero,zero,43969
  81c714:	00000106 	br	81c71c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  81c718:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  81c71c:	e037883a 	mov	sp,fp
  81c720:	df000017 	ldw	fp,0(sp)
  81c724:	dec00104 	addi	sp,sp,4
  81c728:	f800283a 	ret

0081c72c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  81c72c:	defffd04 	addi	sp,sp,-12
  81c730:	dfc00215 	stw	ra,8(sp)
  81c734:	df000115 	stw	fp,4(sp)
  81c738:	df000104 	addi	fp,sp,4
  81c73c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  81c740:	e13fff17 	ldw	r4,-4(fp)
  81c744:	081c6ec0 	call	81c6ec <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81c748:	003fff06 	br	81c748 <_exit+0x1c>
  81c74c:	00000010 	cmplti	zero,zero,0
  81c750:	00000000 	call	0 <__reset-0x800000>
  81c754:	00527a01 	jmpi	527a0 <__reset-0x7ad860>
  81c758:	011f7c01 	jmpi	11f7c0 <__reset-0x6e0840>
  81c75c:	001b0c0b 	ldhu	zero,27696(zero)
  81c760:	00000028 	cmpgeui	zero,zero,0
  81c764:	00000018 	cmpnei	zero,zero,0
  81c768:	00811520 	cmpeqi	r2,zero,1108
  81c76c:	000005dc 	xori	zero,zero,23
  81c770:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  81c774:	92099170 	cmpltui	r8,r18,9797
  81c778:	95079308 	cmpgei	r20,r18,7756
  81c77c:	97049605 	stb	fp,4696(r18)
  81c780:	90019f03 	ldbu	zero,1660(r18)
  81c784:	9c06940a 	0x9c06940a
  81c788:	00000002 	0x2
  81c78c:	00000028 	cmpgeui	zero,zero,0
  81c790:	00000044 	movi	zero,1
  81c794:	00811afc 	xorhi	r2,zero,1131
  81c798:	000005b0 	cmpltui	zero,zero,22
  81c79c:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  81c7a0:	92099168 	cmpgeui	r8,r18,9797
  81c7a4:	95079308 	cmpgei	r20,r18,7756
  81c7a8:	9c039705 	stb	r16,3676(r19)
  81c7ac:	90019f02 	0x90019f02
  81c7b0:	9606940a 	0x9606940a
  81c7b4:	00000004 	movi	zero,0
  81c7b8:	0081c538 	rdprs	r2,zero,1812
