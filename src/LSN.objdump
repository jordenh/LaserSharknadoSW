
LSN.elf:     file format elf32-littlenios2
LSN.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001c544 memsz 0x0001c544 flags r-x
    LOAD off    0x0001d564 vaddr 0x0081c564 paddr 0x0081e12c align 2**12
         filesz 0x00001bc8 memsz 0x00001bc8 flags rw-
    LOAD off    0x0001fcf4 vaddr 0x0081fcf4 paddr 0x0081fcf4 align 2**12
         filesz 0x00000000 memsz 0x0000326c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b638  008001b8  008001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000d74  0081b7f0  0081b7f0  0001c7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bc8  0081c564  0081e12c  0001d564  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000326c  0081fcf4  0081fcf4  0001fcf4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001f12c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001218  00000000  00000000  0001f158  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000373d  00000000  00000000  00020370  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00038339  00000000  00000000  00023aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b2ff  00000000  00000000  0005bde6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000210dd  00000000  00000000  000670e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003470  00000000  00000000  000881c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003656  00000000  00000000  0008b634  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001009e  00000000  00000000  0008ec8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0009ed28  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c78  00000000  00000000  0009ed88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000a59ec  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000a59ef  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000a59fb  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000a59fc  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000a59fd  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000a5a08  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000a5a13  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000a5a1e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003b  00000000  00000000  000a5a29  2**0
                  CONTENTS, READONLY
 26 .jdi          000057f2  00000000  00000000  000a5a64  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00096040  00000000  00000000  000ab256  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b8 l    d  .text	00000000 .text
0081b7f0 l    d  .rodata	00000000 .rodata
0081c564 l    d  .rwdata	00000000 .rwdata
0081fcf4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00800200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 audio.c
00800c54 l     F .text	00000144 playSoundISR
0081fd00 l     O .bss	00000004 audioBuffer
0081fd04 l     O .bss	00000004 audioVolumeBuffer
00000000 l    df *ABS*	00000000 bmp.c
00000000 l    df *ABS*	00000000 bullet.c
00000000 l    df *ABS*	00000000 collision.c
00000000 l    df *ABS*	00000000 displacement.c
0081fd48 l     O .bss	00000008 right
0081fd50 l     O .bss	00000008 left
0081fd58 l     O .bss	00000008 up
0081fd60 l     O .bss	00000008 down
00000000 l    df *ABS*	00000000 input.c
0081fd68 l     O .bss	00000002 edgeDetect3.3805
0081fd6a l     O .bss	00000002 edgeDetect2.3804
0081fd6c l     O .bss	00000002 edgeDetect1.3803
0081fd6e l     O .bss	00000002 edgeDetect0.3802
0081fd70 l     O .bss	00000001 keyInput.3801
0081fd72 l     O .bss	00000002 scoresShown.3862
0081e0e0 l     O .rwdata	00000001 prevSwInput.3861
0081fd74 l     O .bss	00000002 edgeDetect.3860
0081fd76 l     O .bss	00000001 SWInput.3859
0081fd78 l     O .bss	00000002 edgeDetect.3895
0081fd7a l     O .bss	00000001 atariFire.3894
0081fd7b l     O .bss	00000001 atariDown.3893
0081fd7c l     O .bss	00000001 atariUp.3892
0081fd7d l     O .bss	00000001 atariButtons.3891
00000000 l    df *ABS*	00000000 lcd.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 player.c
00000000 l    df *ABS*	00000000 score.c
00000000 l    df *ABS*	00000000 sd_card.c
00000000 l    df *ABS*	00000000 shark.c
00000000 l    df *ABS*	00000000 splash.c
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
0081c0fc l     O .rodata	00000010 bp
0081c10c l     O .rodata	00000010 dp_l
0081c11c l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
0081c12c l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00807764 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00808734 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0081c564 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
00809b4c l     F .text	00000058 __sprint_r
0081c2d6 l     O .rodata	00000010 blanks.3452
0081c2c6 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0080bbb0 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080d5ac l     F .text	00000058 std
0080d6b8 l     F .text	00000008 __fp_lock
0080d6c0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0081e100 l     O .rwdata	00000004 charset
0081c308 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0081c450 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
008113f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00811458 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00811558 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00811a54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00811b34 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00811c90 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00811ebc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081e120 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0081232c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0081cf20 l     O .rwdata	00001060 jtag_uart_0
0081df80 l     O .rwdata	00000030 audio_and_video_config_0
0081dfb0 l     O .rwdata	00000030 audio_0
0081dfe0 l     O .rwdata	0000002c character_lcd_0
0081e00c l     O .rwdata	00000048 char_drawer
0081e054 l     O .rwdata	00000054 pixel_buffer_dma
0081e0a8 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00812734 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0081296c l     F .text	0000022c altera_avalon_jtag_uart_irq
00812b98 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00813214 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 altera_up_sd_card_avalon_interface.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0081ab04 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0081acf0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0081ae2c l     F .text	000000dc alt_file_locked
0081b090 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0081b56c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0081b720 l     F .text	00000040 alt_sim_halt
00800ed0 g     F .text	000001e8 changeBufferVolume
00813dd8 g     F .text	00000038 alt_up_av_config_reset
0081fdec g     O .bss	00000004 aux_status_register
0081fd88 g     O .bss	00000004 sharkList
0080ec9c g     F .text	00000094 _mprec_log10
0081427c g     F .text	00000064 alt_up_av_config_read_D5M_cfg_register
008004c4 g     F .text	000000cc loadPlayerDeath
0080ed88 g     F .text	00000088 __any_on
008103f4 g     F .text	00000070 _isatty_r
0081c428 g     O .rodata	00000028 __mprec_tinytens
00813e48 g     F .text	00000030 alt_up_av_config_disable_interrupt
00811cf0 g     F .text	0000006c alt_main
008158ac g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
008098c4 g     F .text	000000a0 _puts_r
00822cd0 g     O .bss	00000100 alt_irq
00807074 g     F .text	00000018 fabs
00810464 g     F .text	00000078 _lseek_r
0081e12c g       *ABS*	00000000 __flash_rwdata_start
00814488 g     F .text	00000034 alt_up_character_lcd_send_cmd
0080523c g     F .text	00000048 setHardwareTimerPeriod
00808284 g     F .text	00000088 __eqdf2
008017c4 g     F .text	00000098 initBullets
0081655c g     F .text	000001b0 Check_for_Master_Boot_Record
0080e2c8 g     F .text	00000074 _gettimeofday_r
008136f0 g     F .text	00000070 alt_up_audio_read_fifo_avail
00813f18 g     F .text	000000ac alt_up_av_config_write_audio_cfg_register
00822f60 g       *ABS*	00000000 __alt_heap_start
00803fc4 g     F .text	00000024 getCurrentPlayerScore
00802ca0 g     F .text	0000019c handleAtariInput
0081e0e4 g     O .rwdata	00000004 scoreFileName
0081a414 g     F .text	000001cc alt_up_sd_card_fclose
0080984c g     F .text	00000044 printf
00804038 g     F .text	00000238 drawScore
00813760 g     F .text	00000070 alt_up_audio_record_r
0080fec0 g     F .text	00000068 __sseek
0080d614 g     F .text	000000a4 __sinit
00814ad0 g     F .text	00000114 alt_up_char_buffer_string
0081e0d4 g     O .rwdata	00000004 CONFIG_NAME
0080e360 g     F .text	00000084 _setlocale_r
0080d714 g     F .text	00000068 __sfmoreglue
00811d7c g     F .text	00000020 __malloc_unlock
0081fd94 g     O .bss	00000004 sharkArrayCursor
00807504 g     F .text	00000174 __divsf3
0081fe10 g     O .bss	00000004 current_sector_modified
00814a00 g     F .text	000000d0 alt_up_char_buffer_draw
00813668 g     F .text	00000088 alt_up_audio_reset_audio_core
0081a6dc g     F .text	00000090 Read_Sector_Data_Attempt_CRC
0081fde0 g     O .bss	00000004 altera_avalon_timer_ts_freq
00800bcc g     F .text	00000044 playSharkDeath
0080e718 g     F .text	000000e0 memmove
00820e68 g     O .bss	00000400 verticalDisplacementFunctionDown
008033a8 g     F .text	00000028 killPlayer
0080d704 g     F .text	00000010 _cleanup
0080ee10 g     F .text	000000bc _Balloc
00804a1c g     F .text	00000110 moveShark
00818fd8 g     F .text	000000c8 alt_up_sd_card_is_Present
00816274 g     F .text	00000050 Save_Modified_Sector
008015c0 g     F .text	00000038 freeSplash
008033d0 g     F .text	00000064 initScoreBoard
00814c80 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00803258 g     F .text	0000008c moveDownPlayer
00808394 g     F .text	00000088 __gtdf2
008090d4 g     F .text	00000010 __errno
0081440c g     F .text	0000007c get_DDRAM_addr
00804558 g     F .text	00000040 openFile
00800858 g     F .text	000001a0 audioTest
00814c40 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
0080552c g     F .text	00000060 drawBox
00800000 g     F .entry	0000001c __reset
0081fe08 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
00801b68 g     F .text	00000084 drawAllBullets
00800020 g       *ABS*	00000000 __flash_exceptions_start
00810380 g     F .text	00000074 _fstat_r
0081fda4 g     O .bss	00000004 errno
008086fc g     F .text	00000038 __make_dp
00804f80 g     F .text	0000002c clearSplashScreen
0081362c g     F .text	0000003c alt_up_audio_write_interrupt_pending
0081fd24 g     O .bss	00000004 pixel_buffer_addr1
0081fd28 g     O .bss	00000004 char_buffer
0081fdcc g     O .bss	00000004 alt_argv
00801e98 g     F .text	000000fc moveBulletLeft
008260d4 g       *ABS*	00000000 _gp
008121dc g     F .text	00000030 usleep
00819598 g     F .text	000003a8 alt_up_sd_card_fopen
00820058 g     O .bss	00000010 player
00819114 g     F .text	000000d4 alt_up_sd_card_find_first
0081fdfc g     O .bss	00000004 command_argument_register
00814e20 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00803cbc g     F .text	000002d0 obtainUserInitials
0081fe40 g     O .bss	000001e8 tone
008034dc g     F .text	00000354 readHighScoreBoardFromSD
0081cda0 g     O .rwdata	00000180 alt_fd_list
0081fd90 g     O .bss	00000004 sharkCount
00818808 g     F .text	0000012c find_first_empty_record_in_root_directory
0081ac2c g     F .text	00000094 alt_find_dev
0080e678 g     F .text	000000a0 memcpy
00814620 g     F .text	0000004c alt_up_character_lcd_write_fd
00814be4 g     F .text	0000005c alt_up_char_buffer_clear
0080d6f8 g     F .text	0000000c _cleanup_r
0080852c g     F .text	000000f8 __floatsidf
0081adb4 g     F .text	00000078 alt_io_redirect
0080841c g     F .text	00000088 __ltdf2
00802774 g     F .text	00000040 makeUp
0081b7f0 g       *ABS*	00000000 __DTOR_END__
00809964 g     F .text	00000014 puts
0080228c g     F .text	0000009c doPlayerBulletCollision
00801f94 g     F .text	000000a0 findSharkIfHit
00818418 g     F .text	000001a4 find_first_empty_cluster
0080ebec g     F .text	000000b0 __ratio
00818f14 g     F .text	000000c4 alt_up_sd_card_open_dev
00813bc4 g     F .text	00000060 alt_up_audio_read_fifo_head
00814ed0 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00812db0 g     F .text	00000224 altera_avalon_jtag_uart_read
00801574 g     F .text	0000004c freeBmps
008090f8 g     F .text	00000014 malloc
00809890 g     F .text	00000034 _printf_r
00808870 g     F .text	00000008 __udivsi3
00811994 g     F .text	000000c0 isatty
0081c338 g     O .rodata	000000c8 __mprec_tens
0081555c g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
0080e33c g     F .text	00000008 __locale_charset
0081fdb4 g     O .bss	00000008 alt_timezone
0081b2e8 g     F .text	00000090 alt_icache_flush
0081fd98 g     O .bss	00000004 __malloc_top_pad
00813d4c g     F .text	0000008c alt_up_av_config_read_data
0081e0fc g     O .rwdata	00000004 __mb_cur_max
0080e344 g     F .text	0000000c _localeconv_r
0080f508 g     F .text	0000003c __i2b
0080dcac g     F .text	0000049c __sfvwrite_r
008176f4 g     F .text	000000c0 get_dir_divider_location
00804fac g     F .text	00000290 timer_test
00803188 g     F .text	00000044 erasePlayer
00809a0c g     F .text	00000070 _sbrk_r
00815d40 g     F .text	000000d0 helper_plot_pixel
008052b8 g     F .text	00000028 hasHardwareTimerExpired
00817394 g     F .text	000000d0 filename_to_upper_case
00819940 g     F .text	00000090 alt_up_sd_card_set_attributes
0081670c g     F .text	00000284 Read_File_Record_At_Offset
00802834 g     F .text	00000040 makeDownLeft
008104dc g     F .text	00000078 _read_r
0081fd40 g     O .bss	00000004 playerBulletList
0081cd6c g     O .rwdata	0000000c __lc_ctype
0081e114 g     O .rwdata	00000004 alt_max_fd
00813c24 g     F .text	00000060 alt_up_audio_write_fifo_head
00808ed4 g     F .text	00000138 __unpack_d
00817fb4 g     F .text	00000464 find_file_in_directory
0081025c g     F .text	00000110 _fclose_r
00820028 g     O .bss	0000000c sharkDeath
0080d578 g     F .text	00000034 fflush
0081fd9c g     O .bss	00000004 __malloc_max_sbrked_mem
008045fc g     F .text	00000094 readWord
008117d4 g     F .text	000001c0 alt_irq_register
00803830 g     F .text	0000048c updateHighScoreBoard
00807710 g     F .text	00000054 __extendsfdf2
008190a0 g     F .text	00000074 alt_up_sd_card_is_FAT16
00807bf4 g     F .text	00000074 __adddf3
0080eacc g     F .text	00000120 __b2d
00814f04 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
00810b30 g     F .text	000005b0 __umoddi3
00811ba0 g     F .text	000000f0 lseek
0081e0e8 g     O .rwdata	00000004 __fdlib_version
0081e0f0 g     O .rwdata	00000004 _global_impure_ptr
00817aa0 g     F .text	00000514 get_home_directory_cluster_for_file
0080f884 g     F .text	000005f4 _realloc_r
00822f60 g       *ABS*	00000000 __bss_end
00815068 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
008120d0 g     F .text	0000010c alt_tick
00804e18 g     F .text	0000011c cleanupDeadSharks
00810554 g     F .text	000005dc __udivdi3
0081c400 g     O .rodata	00000028 __mprec_bigtens
0080f764 g     F .text	00000120 __s2b
00820068 g     O .bss	00000e00 bulletArray
00811168 g     F .text	00000194 __floatunsidf
0080e9ec g     F .text	00000060 __mcmp
0081fe14 g     O .bss	00000004 current_sector_index
00813478 g     F .text	00000040 alt_up_audio_open_dev
008025a8 g     F .text	000000bc setupArcDisplacementFunction
00802bcc g     F .text	000000d4 handleSwitchInput
0080d6e0 g     F .text	00000018 __fp_lock_all
00804764 g     F .text	000000b8 getWavFileLength
008003f8 g     F .text	000000cc loadLaser
008138b4 g     F .text	00000070 alt_up_audio_play_r
00812038 g     F .text	00000098 alt_alarm_stop
00816478 g     F .text	000000e4 mark_cluster
0081fdc4 g     O .bss	00000004 alt_irq_active
0081e0d8 g     O .rwdata	00000004 AUDIO_NAME
008000ec g     F .exceptions	000000cc alt_irq_handler
0081cd78 g     O .rwdata	00000028 alt_dev_null
0081fd80 g     O .bss	00000004 char_lcd_dev
00818934 g     F .text	000001b8 convert_filename_to_name_extension
00804d18 g     F .text	00000100 killShark
008070f0 g     F .text	00000210 rint
00808af8 g     F .text	000000c8 __unpack_f
00804b2c g     F .text	00000050 moveAllSharks
00814908 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0081fd44 g     O .bss	00000004 sharkBulletList
0081aa0c g     F .text	00000044 alt_dcache_flush_all
0080e8b8 g     F .text	00000070 __hi0bits
0081fde8 g     O .bss	00000004 is_sd_card_formated_as_FAT16
00815c7c g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
00808624 g     F .text	000000d8 __fixdfsi
008185bc g     F .text	0000024c find_first_empty_record_in_a_subdirectory
0081e12c g       *ABS*	00000000 __ram_rwdata_end
00802a18 g     F .text	000001b4 handleKeyInput
0081e10c g     O .rwdata	00000008 alt_dev_list
0081220c g     F .text	00000120 write
0081fe0c g     O .bss	00000004 device_pointer
00813450 g     F .text	00000028 alt_timestamp_freq
00815e10 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
008044f8 g     F .text	00000060 openSdCard
00820034 g     O .bss	0000000c laser
0081c564 g       *ABS*	00000000 __ram_rodata_end
0081fcfc g     O .bss	00000004 DEBUG
00811484 g     F .text	000000d4 fstat
008084a4 g     F .text	00000088 __ledf2
0080f644 g     F .text	00000120 __pow5mult
0081fda8 g     O .bss	00000004 __nlocale_changed
00808878 g     F .text	00000008 __umodsi3
00804b7c g     F .text	00000050 drawAllSharks
00822f60 g       *ABS*	00000000 end
00808998 g     F .text	00000160 __pack_f
0081493c g     F .text	00000084 alt_up_char_buffer_init
00805284 g     F .text	00000034 isHardwareTimerRunning
008128b4 g     F .text	000000b8 altera_avalon_jtag_uart_init
0081b7ec g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00813288 g     F .text	00000088 alt_avalon_timer_sc_init
00808918 g     F .text	00000080 __clzsi2
0081fd08 g     O .bss	00000002 loaded
00812fd4 g     F .text	00000240 altera_avalon_jtag_uart_write
00804964 g     F .text	0000005c drawShark
0080d604 g     F .text	00000004 __sfp_lock_acquire
0080e594 g     F .text	000000e4 memchr
00814530 g     F .text	00000078 alt_up_character_lcd_write
00809ba4 g     F .text	00001eac ___vfprintf_internal_r
008054f0 g     F .text	0000003c printLine
0080d998 g     F .text	00000314 _free_r
0080530c g     F .text	000000a8 initVga
00802328 g     F .text	0000008c setupDisplacement
0081b570 g     F .text	000001b0 __call_exitprocs
0081fdac g     O .bss	00000004 __mlocale_changed
0081e0f8 g     O .rwdata	00000004 __malloc_sbrk_base
008001b8 g     F .text	0000004c _start
00802e3c g     F .text	0000005c startGame
0081fdd4 g     O .bss	00000004 _alt_tick_rate
00809994 g     F .text	00000078 rand
00813a98 g     F .text	0000012c alt_up_audio_write_fifo
00801764 g     F .text	00000060 eraseBmp
0080f1d4 g     F .text	0000014c __lshift
00813ce8 g     F .text	00000064 alt_up_av_config_write_data
0081fdd8 g     O .bss	00000004 _alt_nticks
00811d9c g     F .text	00000120 read
008123c0 g     F .text	00000374 alt_sys_init
00814794 g     F .text	000000b0 alt_up_character_lcd_shift_display
00807678 g     F .text	00000098 __floatsisf
00821268 g     O .bss	00000400 verticalDisplacementFunctionUp
00813994 g     F .text	00000104 alt_up_audio_read_fifo
0081fd8c g     O .bss	00000004 deadSharkList
008048d0 g     F .text	00000094 getFreeShark
0081b438 g     F .text	00000134 __register_exitproc
008143a8 g     F .text	00000064 alt_up_av_config_write_LTM_cfg_register
008135a0 g     F .text	00000050 alt_up_audio_disable_write_interrupt
008021ec g     F .text	000000a0 doSharkBulletCollision
0081fd2c g     O .bss	00000004 pixel_buffer_addr2
0081fd30 g     O .bss	00000004 sharkBmp
00800b2c g     F .text	0000005c playLaser
0080f320 g     F .text	000001e8 __multiply
00814844 g     F .text	00000090 alt_up_character_lcd_erase_pos
00805aac g     F .text	00001300 __ieee754_pow
00812c48 g     F .text	00000074 altera_avalon_jtag_uart_close
00805624 g     F .text	00000488 pow
0081c564 g       *ABS*	00000000 __ram_rwdata_start
0081b7f0 g       *ABS*	00000000 __ram_rodata_start
0081fe18 g     O .bss	00000028 __malloc_current_mallinfo
0080eecc g     F .text	0000017c __d2b
0081fde4 g     O .bss	00000004 initialized
00801aa0 g     F .text	000000c8 moveAllBullets
0081276c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0081b230 g     F .text	000000b8 alt_get_fd
00822768 g     O .bss	00000014 search_data
0081a8c0 g     F .text	0000014c alt_busy_sleep
0080900c g     F .text	000000c8 __fpcmp_parts_d
00820040 g     O .bss	0000000c theme
008101ec g     F .text	00000070 _close_r
0081fd0c g     O .bss	00000004 audioFileWordLength
00813554 g     F .text	0000004c alt_up_audio_enable_write_interrupt
008023b4 g     F .text	00000104 setupHorizontalDisplacementFunction
00800b88 g     F .text	00000044 playPlayerDeath
0081b3c4 g     F .text	00000074 memcmp
0081281c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00822f60 g       *ABS*	00000000 __alt_stack_base
00812864 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00802110 g     F .text	000000dc isBulletCollidingWithPlayer
0080ba74 g     F .text	0000013c __swsetup_r
00802ef4 g     F .text	000000bc init
0081fd34 g     O .bss	00000004 splashBmp
0080802c g     F .text	00000258 __divdf3
00804690 g     F .text	000000d4 readDWord
00813504 g     F .text	00000050 alt_up_audio_disable_read_interrupt
0080d77c g     F .text	000000f0 __sfp
0082277c g     O .bss	00000054 boot_sector_data
0080ed30 g     F .text	00000058 __copybits
0081c964 g     O .rwdata	00000408 __malloc_av_
0080d610 g     F .text	00000004 __sinit_lock_release
00807c68 g     F .text	000003c4 __muldf3
0080ffa4 g     F .text	00000060 __sread
00804bcc g     F .text	00000050 eraseAllSharks
0081c13c g     O .rodata	00000010 __thenan_sf
0081b110 g     F .text	00000120 alt_find_file
0081aa50 g     F .text	000000b4 alt_dev_llist_insert
00811d5c g     F .text	00000020 __malloc_lock
00811f7c g     F .text	000000bc sbrk
00802034 g     F .text	000000dc isBulletCollidingWithShark
0080d37c g     F .text	000001fc _fflush_r
00810138 g     F .text	000000b4 _calloc_r
008007bc g     F .text	0000009c playAudio
008115b8 g     F .text	0000021c gettimeofday
0081fd84 g     O .bss	00000004 gameScores
008052e0 g     F .text	0000002c startHardwareTimer
0081fcf4 g       *ABS*	00000000 __bss_start
0080e7f8 g     F .text	00000098 memset
00802fb0 g     F .text	00000138 main
00813840 g     F .text	00000074 alt_up_audio_write_fifo_space
0081fdd0 g     O .bss	00000004 alt_envp
0081fda0 g     O .bss	00000004 __malloc_max_total_mem
00814e78 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
008149c0 g     F .text	00000040 alt_up_char_buffer_open_dev
008127c4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00809978 g     F .text	0000001c srand
008027b4 g     F .text	00000040 makeDown
008199d0 g     F .text	0000008c alt_up_sd_card_get_attributes
008161ac g     F .text	000000c8 Write_Sector_Data
00819df0 g     F .text	00000624 alt_up_sd_card_write
008146e4 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0080feb8 g     F .text	00000008 __sclose
008070d8 g     F .text	00000008 matherr
01000000 g       *ABS*	00000000 __alt_heap_limit
0081036c g     F .text	00000014 fclose
008026f4 g     F .text	00000040 makeRight
00813310 g     F .text	000000a4 alt_timestamp_start
00822dd0 g     O .bss	00000190 _atexit0
0080bdc8 g     F .text	000015b4 _dtoa_r
0080910c g     F .text	00000740 _malloc_r
00809af0 g     F .text	0000005c time
0081e118 g     O .rwdata	00000004 alt_errno
00803fe8 g     F .text	0000002c setCurrentPlayerLives
0080e210 g     F .text	000000b8 _fwalk
00801bec g     F .text	00000084 eraseAllBullets
00801c70 g     F .text	000000a8 drawBullet
008087b0 g     F .text	00000060 __divsi3
0081c14c g     O .rodata	00000014 __thenan_df
008144f0 g     F .text	00000040 alt_up_character_lcd_open_dev
0081fd10 g     O .bss	00000004 sdDev
0080d86c g     F .text	0000012c _malloc_trim_r
0081b7f0 g       *ABS*	00000000 __CTOR_END__
00803434 g     F .text	000000a8 defaultHighScoreBoard
0080708c g     F .text	0000001c finite
0081fcf4 g     O .bss	00000004 audio
0081fdf0 g     O .bss	00000004 status_register
008144bc g     F .text	00000034 alt_up_character_lcd_init
008009f8 g     F .text	00000134 readWavFile
00810004 g     F .text	000000bc strcmp
008049c0 g     F .text	0000005c eraseShark
0081fdf8 g     O .bss	00000004 command_register
0081b7f0 g       *ABS*	00000000 __flash_rodata_start
0081b7f0 g       *ABS*	00000000 __DTOR_LIST__
008028f4 g     F .text	00000124 setToRandomDisplacement
0080429c g     F .text	0000025c drawInGameInfo
008074e0 g     F .text	00000024 copysign
0080830c g     F .text	00000088 __nedf2
00801d18 g     F .text	00000084 eraseBullet
00813c84 g     F .text	00000064 alt_up_av_config_open_dev
0081238c g     F .text	00000034 alt_irq_init
00805428 g     F .text	000000c8 drawLine
00811f1c g     F .text	00000060 alt_release_fd
0080065c g     F .text	000000d0 loadTheme
008163c0 g     F .text	000000b8 get_cluster_flag
008148d4 g     F .text	00000034 alt_up_character_lcd_cursor_off
0081c160 g     O .rodata	00000100 __clz_tab
00816990 g     F .text	000002b8 Write_File_Record_At_Offset
0081fdb0 g     O .bss	00000004 _PathLocale
0081fd14 g     O .bss	00000004 somethingForIrq
0081fd38 g     O .bss	00000004 pixel_buffer
0081b378 g     F .text	00000014 atexit
008100c0 g     F .text	00000078 _write_r
00813ee0 g     F .text	00000038 alt_up_av_config_read_ready
0080486c g     F .text	00000064 initSharks
0080e3e4 g     F .text	0000001c setlocale
00816c48 g     F .text	00000648 Check_for_DOS_FAT
00818aec g     F .text	000002d4 create_file
008024b8 g     F .text	000000f0 setupCircularDisplacementFunction
0081e0ec g     O .rwdata	00000004 _impure_ptr
0081fdf4 g     O .bss	00000004 CSD_register_w0
0080185c g     F .text	00000244 createBullet
0081fdc8 g     O .bss	00000004 alt_argc
00807300 g     F .text	000001e0 scalbn
0081fddc g     O .bss	00000004 altera_avalon_timer_ts_base
0081abc8 g     F .text	00000064 _do_dtors
00821668 g     O .bss	00000400 circularDisplacementFunction
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
0080ea4c g     F .text	00000080 __ulp
0080fe78 g     F .text	00000040 __isinfd
0080d6c8 g     F .text	00000018 __fp_unlock_all
00802664 g     F .text	00000090 setupNoDisplcaementFunction
00804270 g     F .text	0000002c clearScore
0081e104 g     O .rwdata	00000008 alt_fs_list
00817464 g     F .text	00000290 check_file_name_for_FAT16_compliance
0082004c g     O .bss	0000000c playerDeath
0081fe00 g     O .bss	00000004 buffer_memory
00804598 g     F .text	00000030 closeFile
008137d0 g     F .text	00000070 alt_up_audio_record_l
00821a68 g     O .bss	00000400 doNotMove
008053e4 g     F .text	00000044 drawPixel
0081fdbc g     O .bss	00000008 alt_resettime
008070e0 g     F .text	00000010 nan
008032e4 g     F .text	0000005c keepPlayerStationary
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080e350 g     F .text	00000010 localeconv
008133b4 g     F .text	0000009c alt_timestamp
008031cc g     F .text	0000008c moveUpPlayer
00806dac g     F .text	000002c8 __ieee754_sqrt
00813e10 g     F .text	00000038 alt_up_av_config_enable_interrupt
008014fc g     F .text	00000078 parseBmps
008015f8 g     F .text	0000016c drawBmp
0081fe04 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
00813e78 g     F .text	00000068 alt_up_av_config_read_acknowledge
00814218 g     F .text	00000064 alt_up_av_config_write_DC2_cfg_register
0081e12c g       *ABS*	00000000 _edata
0081e0dc g     O .rwdata	00000004 toneLength
00822f60 g       *ABS*	00000000 _end
0080558c g     F .text	00000098 convert24BitRgbTo16
008227d0 g     O .bss	00000500 active_files
008001b8 g       *ABS*	00000000 __ram_exceptions_end
00804014 g     F .text	00000024 getCurrentPlayerLives
00818dc0 g     F .text	00000154 copy_file_record_name_to_string
00812cbc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080072c g     F .text	00000090 playAudioMono
00817290 g     F .text	00000104 Look_for_FAT16
00813924 g     F .text	00000070 alt_up_audio_play_l
0080ff28 g     F .text	0000007c __swrite
0081e0f4 g     O .rwdata	00000004 __malloc_trim_threshold
0081b0f0 g     F .text	00000020 altera_nios2_qsys_irq_init
0081b38c g     F .text	00000038 exit
00802874 g     F .text	00000040 makeUpRight
00804f34 g     F .text	0000004c drawSplashScreen
008191e8 g     F .text	000003b0 alt_up_sd_card_find_next
0080e148 g     F .text	000000c8 _fwalk_reent
0080f048 g     F .text	0000018c __mdiff
00814344 g     F .text	00000064 alt_up_av_config_read_LTM_cfg_register
00822268 g     O .bss	00000500 sharkArray
00808810 g     F .text	00000060 __modsi3
00802e98 g     F .text	0000005c init_lcd
008027f4 g     F .text	00000040 makeDownRight
008162c4 g     F .text	000000fc Read_Sector_Data
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080d608 g     F .text	00000004 __sfp_lock_release
008145a8 g     F .text	00000078 alt_up_character_lcd_string
0081fd18 g     O .bss	00000004 playedWords
00803340 g     F .text	00000068 hitPlayer
0081b760 g     F .text	00000020 _exit
008070a8 g     F .text	00000030 __isnand
0081a76c g     F .text	00000154 alt_alarm_start
00800590 g     F .text	000000cc loadSharkDeath
00808880 g     F .text	00000098 __muldi3
0081a5e0 g     F .text	000000fc Read_Sector_Data_CRC
00819a5c g     F .text	00000394 alt_up_sd_card_read
0080e400 g     F .text	00000194 __smakebuf_r
00809a7c g     F .text	00000074 strlen
0081af08 g     F .text	00000188 open
00803144 g     F .text	00000044 drawPlayer
00802734 g     F .text	00000040 makeLeft
008110e0 g     F .text	00000088 __gedf2
00821e68 g     O .bss	00000400 arcDisplacementFunction
008053b4 g     F .text	00000030 clearScreen
00813fc4 g     F .text	000000f8 alt_up_av_config_read_video_cfg_register
00803f8c g     F .text	00000038 updateCurrentPlayerScore
0081acc0 g     F .text	00000030 alt_icache_flush_all
00800204 g     F .text	0000019c setupAudio
0081466c g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0081e11c g     O .rwdata	00000004 alt_priority_mask
0081fd3c g     O .bss	00000004 playerBmp
008045c8 g     F .text	00000034 readByte
008010b8 g     F .text	00000444 parseBmp
0080481c g     F .text	00000050 readPastWavHeader
0080ba50 g     F .text	00000024 __vfprintf_internal
008142e0 g     F .text	00000064 alt_up_av_config_write_D5M_cfg_register
00807b74 g     F .text	00000080 __subdf3
0081fd1c g     O .bss	00000004 playCursor
008028b4 g     F .text	00000040 makeUpLeft
0080e928 g     F .text	000000c4 __lo0bits
0081e124 g     O .rwdata	00000008 alt_alarm_list
00800d98 g     F .text	00000138 updateAudioWithVolume
0081ab64 g     F .text	00000064 _do_ctors
00801d9c g     F .text	000000fc moveBulletRight
008003a0 g     F .text	00000058 setupAudioInterrupt
0081fd20 g     O .bss	00000002 status
008030e8 g     F .text	0000005c initPlayer
008112fc g     F .text	000000fc close
0081fcf8 g     O .bss	00000004 config
00800c10 g     F .text	00000044 playTheme
00811ab4 g     F .text	00000080 alt_load
008134b8 g     F .text	0000004c alt_up_audio_enable_read_interrupt
008140bc g     F .text	000000f8 alt_up_av_config_write_video_cfg_register
00808bc0 g     F .text	00000314 __pack_d
00804c1c g     F .text	000000fc createShark
008177b4 g     F .text	000002ec match_file_record_to_name_ext
008090e4 g     F .text	00000014 free
0080d60c g     F .text	00000004 __sinit_lock_acquire
0080f544 g     F .text	00000100 __multadd
0080e890 g     F .text	00000028 _Bfree
008141b4 g     F .text	00000064 alt_up_av_config_read_DC2_cfg_register
008135f0 g     F .text	0000003c alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406e14 	ori	at,at,440
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000171e 	bne	r2,zero,800188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c020b4 	movhi	r3,130
  800134:	18cb3404 	addi	r3,r3,11472
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11800017 	ldw	r6,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c020b4 	movhi	r3,130
  80014c:	18cb3404 	addi	r3,r3,11472
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	e17ffd17 	ldw	r5,-12(fp)
  800164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800168:	0005313a 	rdctl	r2,ipending
  80016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
  800170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800178:	e0bfff17 	ldw	r2,-4(fp)
  80017c:	1004c03a 	cmpne	r2,r2,zero
  800180:	103fe21e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800184:	00000706 	br	8001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800188:	e0bffe17 	ldw	r2,-8(fp)
  80018c:	1085883a 	add	r2,r2,r2
  800190:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800194:	e0bffd17 	ldw	r2,-12(fp)
  800198:	10800044 	addi	r2,r2,1
  80019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a0:	003fdd06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a4:	e037883a 	mov	sp,fp
  8001a8:	dfc00117 	ldw	ra,4(sp)
  8001ac:	df000017 	ldw	fp,0(sp)
  8001b0:	dec00204 	addi	sp,sp,8
  8001b4:	f800283a 	ret

Disassembly of section .text:

008001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b8:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
  8001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c4:	00bffd16 	blt	zero,r2,8001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c8:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001d0:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  8001d4:	d6983514 	ori	gp,gp,24788
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d8:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001dc:	10bf3d14 	ori	r2,r2,64756

    movhi r3, %hi(__bss_end)
  8001e0:	00c020b4 	movhi	r3,130
    ori r3, r3, %lo(__bss_end)
  8001e4:	18cbd814 	ori	r3,r3,12128

    beq r2, r3, 1f
  8001e8:	10c00326 	beq	r2,r3,8001f8 <_start+0x40>

0:
    stw zero, (r2)
  8001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f4:	10fffd36 	bltu	r2,r3,8001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f8:	0811ab40 	call	811ab4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001fc:	0811cf00 	call	811cf0 <alt_main>

00800200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800200:	003fff06 	br	800200 <alt_after_alt_main>

00800204 <setupAudio>:
struct audioInfo theme;

volatile int somethingForIrq;

void setupAudio()
{
  800204:	defffc04 	addi	sp,sp,-16
  800208:	dfc00315 	stw	ra,12(sp)
  80020c:	df000215 	stw	fp,8(sp)
  800210:	df000204 	addi	fp,sp,8
	bool error = false;
  800214:	e03fff15 	stw	zero,-4(fp)
	config = (alt_up_av_config_dev *)alt_up_av_config_open_dev(CONFIG_NAME);
  800218:	d1200017 	ldw	r4,-32768(gp)
  80021c:	0813c840 	call	813c84 <alt_up_av_config_open_dev>
  800220:	d0a70915 	stw	r2,-25564(gp)
	if (config == NULL) {
  800224:	d0a70917 	ldw	r2,-25564(gp)
  800228:	1004c03a 	cmpne	r2,r2,zero
  80022c:	1000051e 	bne	r2,zero,800244 <setupAudio+0x40>
		printf("Error: audio video config could not be opened.\n");
  800230:	010020b4 	movhi	r4,130
  800234:	212e0804 	addi	r4,r4,-18400
  800238:	08099640 	call	809964 <puts>
		error = true;
  80023c:	00800044 	movi	r2,1
  800240:	e0bfff15 	stw	r2,-4(fp)
	}
	while (!alt_up_av_config_read_ready(config)) {
  800244:	d1270917 	ldw	r4,-25564(gp)
  800248:	0813ee00 	call	813ee0 <alt_up_av_config_read_ready>
  80024c:	1005003a 	cmpeq	r2,r2,zero
  800250:	103ffc1e 	bne	r2,zero,800244 <setupAudio+0x40>
	}

	audio = (alt_up_audio_dev *)alt_up_audio_open_dev(AUDIO_NAME);
  800254:	d1200117 	ldw	r4,-32764(gp)
  800258:	08134780 	call	813478 <alt_up_audio_open_dev>
  80025c:	d0a70815 	stw	r2,-25568(gp)
	if (config == NULL) {
  800260:	d0a70917 	ldw	r2,-25564(gp)
  800264:	1004c03a 	cmpne	r2,r2,zero
  800268:	1000061e 	bne	r2,zero,800284 <setupAudio+0x80>
		printf("Error: audio codec could not be opened.\n");
  80026c:	010020b4 	movhi	r4,130
  800270:	212e1404 	addi	r4,r4,-18352
  800274:	08099640 	call	809964 <puts>
		error = true;
  800278:	00800044 	movi	r2,1
  80027c:	e0bfff15 	stw	r2,-4(fp)
  800280:	00000606 	br	80029c <setupAudio+0x98>
	} else if (DEBUG == 1) {
  800284:	d0a70a17 	ldw	r2,-25560(gp)
  800288:	10800058 	cmpnei	r2,r2,1
  80028c:	1000031e 	bne	r2,zero,80029c <setupAudio+0x98>
		printf("Successfully opened audio codec.\n");
  800290:	010020b4 	movhi	r4,130
  800294:	212e1e04 	addi	r4,r4,-18312
  800298:	08099640 	call	809964 <puts>
	}
    int interruptStatus = setupAudioInterrupt(audio, somethingForIrq);
  80029c:	d1270817 	ldw	r4,-25568(gp)
  8002a0:	d1671017 	ldw	r5,-25536(gp)
  8002a4:	08003a00 	call	8003a0 <setupAudioInterrupt>
  8002a8:	e0bffe15 	stw	r2,-8(fp)

    if (interruptStatus < 0) {
  8002ac:	e0bffe17 	ldw	r2,-8(fp)
  8002b0:	1004403a 	cmpge	r2,r2,zero
  8002b4:	1000061e 	bne	r2,zero,8002d0 <setupAudio+0xcc>
		printf("Error: audio interrupt could not be setup.\n");
  8002b8:	010020b4 	movhi	r4,130
  8002bc:	212e2704 	addi	r4,r4,-18276
  8002c0:	08099640 	call	809964 <puts>
		error = true;
  8002c4:	00800044 	movi	r2,1
  8002c8:	e0bfff15 	stw	r2,-4(fp)
  8002cc:	00000606 	br	8002e8 <setupAudio+0xe4>
	} else if (DEBUG == 1) {
  8002d0:	d0a70a17 	ldw	r2,-25560(gp)
  8002d4:	10800058 	cmpnei	r2,r2,1
  8002d8:	1000031e 	bne	r2,zero,8002e8 <setupAudio+0xe4>
		printf("Successfully setup audio interrupts.\n");
  8002dc:	010020b4 	movhi	r4,130
  8002e0:	212e3204 	addi	r4,r4,-18232
  8002e4:	08099640 	call	809964 <puts>
	}

    laser.mainBuffer = NULL;
  8002e8:	008020b4 	movhi	r2,130
  8002ec:	10800d04 	addi	r2,r2,52
  8002f0:	10000015 	stw	zero,0(r2)
    laser.volumeBuffer = NULL;
  8002f4:	008020b4 	movhi	r2,130
  8002f8:	10800d04 	addi	r2,r2,52
  8002fc:	10000115 	stw	zero,4(r2)
    loadLaser();
  800300:	08003f80 	call	8003f8 <loadLaser>
    playerDeath.mainBuffer = NULL;
  800304:	008020b4 	movhi	r2,130
  800308:	10801304 	addi	r2,r2,76
  80030c:	10000015 	stw	zero,0(r2)
    playerDeath.volumeBuffer = NULL;
  800310:	008020b4 	movhi	r2,130
  800314:	10801304 	addi	r2,r2,76
  800318:	10000115 	stw	zero,4(r2)
    loadPlayerDeath();
  80031c:	08004c40 	call	8004c4 <loadPlayerDeath>
    sharkDeath.mainBuffer = NULL;
  800320:	008020b4 	movhi	r2,130
  800324:	10800a04 	addi	r2,r2,40
  800328:	10000015 	stw	zero,0(r2)
    sharkDeath.volumeBuffer = NULL;
  80032c:	008020b4 	movhi	r2,130
  800330:	10800a04 	addi	r2,r2,40
  800334:	10000115 	stw	zero,4(r2)
    loadSharkDeath();
  800338:	08005900 	call	800590 <loadSharkDeath>
    theme.mainBuffer = NULL;
  80033c:	008020b4 	movhi	r2,130
  800340:	10801004 	addi	r2,r2,64
  800344:	10000015 	stw	zero,0(r2)
    theme.volumeBuffer = NULL;
  800348:	008020b4 	movhi	r2,130
  80034c:	10801004 	addi	r2,r2,64
  800350:	10000115 	stw	zero,4(r2)
    loadTheme();
  800354:	080065c0 	call	80065c <loadTheme>
    printf("finised loading sound buffers.\n");
  800358:	010020b4 	movhi	r4,130
  80035c:	212e3c04 	addi	r4,r4,-18192
  800360:	08099640 	call	809964 <puts>

	status = NONE;
  800364:	d027130d 	sth	zero,-25524(gp)

	if (DEBUG == 1 && error == false) {
  800368:	d0a70a17 	ldw	r2,-25560(gp)
  80036c:	10800058 	cmpnei	r2,r2,1
  800370:	1000061e 	bne	r2,zero,80038c <setupAudio+0x188>
  800374:	e0bfff17 	ldw	r2,-4(fp)
  800378:	1004c03a 	cmpne	r2,r2,zero
  80037c:	1000031e 	bne	r2,zero,80038c <setupAudio+0x188>
		printf("Successfully setup sound.\n");
  800380:	010020b4 	movhi	r4,130
  800384:	212e4404 	addi	r4,r4,-18160
  800388:	08099640 	call	809964 <puts>
	}
}
  80038c:	e037883a 	mov	sp,fp
  800390:	dfc00117 	ldw	ra,4(sp)
  800394:	df000017 	ldw	fp,0(sp)
  800398:	dec00204 	addi	sp,sp,8
  80039c:	f800283a 	ret

008003a0 <setupAudioInterrupt>:

int setupAudioInterrupt(alt_up_audio_dev *audio, volatile int somethingForIrq)
{
  8003a0:	defffb04 	addi	sp,sp,-20
  8003a4:	dfc00415 	stw	ra,16(sp)
  8003a8:	df000315 	stw	fp,12(sp)
  8003ac:	df000304 	addi	fp,sp,12
  8003b0:	e13ffe15 	stw	r4,-8(fp)
  8003b4:	e17fff15 	stw	r5,-4(fp)
    // Need to disable both audio interrupts before setting them up
    // otherwise you get stuck in them when they are setup
    alt_up_audio_disable_read_interrupt(audio);
  8003b8:	e13ffe17 	ldw	r4,-8(fp)
  8003bc:	08135040 	call	813504 <alt_up_audio_disable_read_interrupt>
    alt_up_audio_disable_write_interrupt(audio);
  8003c0:	e13ffe17 	ldw	r4,-8(fp)
  8003c4:	08135a00 	call	8135a0 <alt_up_audio_disable_write_interrupt>

    void *irqInt = (void*)&somethingForIrq;
  8003c8:	e0bfff04 	addi	r2,fp,-4
  8003cc:	e0bffd15 	stw	r2,-12(fp)

	#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	return alt_ic_isr_register(AUDIO_0_IRQ_INTERRUPT_CONTROLLER_ID, AUDIO_0_IRQ, playSoundISR, irqInt, 0x0);
	#else
	return alt_irq_register(AUDIO_0_IRQ, irqInt, playSoundISR);
  8003d0:	010000c4 	movi	r4,3
  8003d4:	e17ffd17 	ldw	r5,-12(fp)
  8003d8:	01802034 	movhi	r6,128
  8003dc:	31831504 	addi	r6,r6,3156
  8003e0:	08117d40 	call	8117d4 <alt_irq_register>
	#endif
}
  8003e4:	e037883a 	mov	sp,fp
  8003e8:	dfc00117 	ldw	ra,4(sp)
  8003ec:	df000017 	ldw	fp,0(sp)
  8003f0:	dec00204 	addi	sp,sp,8
  8003f4:	f800283a 	ret

008003f8 <loadLaser>:

void loadLaser() {
  8003f8:	defffe04 	addi	sp,sp,-8
  8003fc:	dfc00115 	stw	ra,4(sp)
  800400:	df000015 	stw	fp,0(sp)
  800404:	d839883a 	mov	fp,sp
    laser.bufferLength = 38384;
  800408:	00c020b4 	movhi	r3,130
  80040c:	18c00d04 	addi	r3,r3,52
  800410:	00a57c14 	movui	r2,38384
  800414:	18800215 	stw	r2,8(r3)
	audioFileWordLength = laser.bufferLength;
  800418:	008020b4 	movhi	r2,130
  80041c:	10800d04 	addi	r2,r2,52
  800420:	10800217 	ldw	r2,8(r2)
  800424:	d0a70e15 	stw	r2,-25544(gp)
	if (laser.mainBuffer == NULL || laser.volumeBuffer == NULL) {
  800428:	008020b4 	movhi	r2,130
  80042c:	10800d04 	addi	r2,r2,52
  800430:	10800017 	ldw	r2,0(r2)
  800434:	1005003a 	cmpeq	r2,r2,zero
  800438:	1000051e 	bne	r2,zero,800450 <loadLaser+0x58>
  80043c:	008020b4 	movhi	r2,130
  800440:	10800d04 	addi	r2,r2,52
  800444:	10800117 	ldw	r2,4(r2)
  800448:	1004c03a 	cmpne	r2,r2,zero
  80044c:	10000e1e 	bne	r2,zero,800488 <loadLaser+0x90>
		readWavFile("laserii.wav", laser.bufferLength);
  800450:	008020b4 	movhi	r2,130
  800454:	10800d04 	addi	r2,r2,52
  800458:	11400217 	ldw	r5,8(r2)
  80045c:	010020b4 	movhi	r4,130
  800460:	212e4b04 	addi	r4,r4,-18132
  800464:	08009f80 	call	8009f8 <readWavFile>
		//laserBuffer = audioBuffer;
		laser.mainBuffer = audioBuffer;
  800468:	d0e70b17 	ldw	r3,-25556(gp)
  80046c:	008020b4 	movhi	r2,130
  800470:	10800d04 	addi	r2,r2,52
  800474:	10c00015 	stw	r3,0(r2)
		laser.volumeBuffer = audioVolumeBuffer;
  800478:	d0e70c17 	ldw	r3,-25552(gp)
  80047c:	008020b4 	movhi	r2,130
  800480:	10800d04 	addi	r2,r2,52
  800484:	10c00115 	stw	r3,4(r2)
	}
	//audioBuffer = laserBuffer;
	audioBuffer = laser.mainBuffer;
  800488:	008020b4 	movhi	r2,130
  80048c:	10800d04 	addi	r2,r2,52
  800490:	10800017 	ldw	r2,0(r2)
  800494:	d0a70b15 	stw	r2,-25556(gp)
	audioVolumeBuffer = laser.volumeBuffer;
  800498:	008020b4 	movhi	r2,130
  80049c:	10800d04 	addi	r2,r2,52
  8004a0:	10800117 	ldw	r2,4(r2)
  8004a4:	d0a70c15 	stw	r2,-25552(gp)
	loaded = LASER;
  8004a8:	00800044 	movi	r2,1
  8004ac:	d0a70d0d 	sth	r2,-25548(gp)
}
  8004b0:	e037883a 	mov	sp,fp
  8004b4:	dfc00117 	ldw	ra,4(sp)
  8004b8:	df000017 	ldw	fp,0(sp)
  8004bc:	dec00204 	addi	sp,sp,8
  8004c0:	f800283a 	ret

008004c4 <loadPlayerDeath>:

void loadPlayerDeath() {
  8004c4:	defffe04 	addi	sp,sp,-8
  8004c8:	dfc00115 	stw	ra,4(sp)
  8004cc:	df000015 	stw	fp,0(sp)
  8004d0:	d839883a 	mov	fp,sp
	playerDeath.bufferLength = 0x0000DAFF / 2;
  8004d4:	00c020b4 	movhi	r3,130
  8004d8:	18c01304 	addi	r3,r3,76
  8004dc:	009b5fc4 	movi	r2,28031
  8004e0:	18800215 	stw	r2,8(r3)
	audioFileWordLength = playerDeath.bufferLength;
  8004e4:	008020b4 	movhi	r2,130
  8004e8:	10801304 	addi	r2,r2,76
  8004ec:	10800217 	ldw	r2,8(r2)
  8004f0:	d0a70e15 	stw	r2,-25544(gp)
	if (playerDeath.mainBuffer == NULL || playerDeath.volumeBuffer == NULL) {
  8004f4:	008020b4 	movhi	r2,130
  8004f8:	10801304 	addi	r2,r2,76
  8004fc:	10800017 	ldw	r2,0(r2)
  800500:	1005003a 	cmpeq	r2,r2,zero
  800504:	1000051e 	bne	r2,zero,80051c <loadPlayerDeath+0x58>
  800508:	008020b4 	movhi	r2,130
  80050c:	10801304 	addi	r2,r2,76
  800510:	10800117 	ldw	r2,4(r2)
  800514:	1004c03a 	cmpne	r2,r2,zero
  800518:	10000e1e 	bne	r2,zero,800554 <loadPlayerDeath+0x90>
		readWavFile("pdie.wav", playerDeath.bufferLength);
  80051c:	008020b4 	movhi	r2,130
  800520:	10801304 	addi	r2,r2,76
  800524:	11400217 	ldw	r5,8(r2)
  800528:	010020b4 	movhi	r4,130
  80052c:	212e4e04 	addi	r4,r4,-18120
  800530:	08009f80 	call	8009f8 <readWavFile>
		//playerDeathBuffer = audioBuffer;
		playerDeath.mainBuffer = audioBuffer;
  800534:	d0e70b17 	ldw	r3,-25556(gp)
  800538:	008020b4 	movhi	r2,130
  80053c:	10801304 	addi	r2,r2,76
  800540:	10c00015 	stw	r3,0(r2)
		playerDeath.volumeBuffer = audioVolumeBuffer;
  800544:	d0e70c17 	ldw	r3,-25552(gp)
  800548:	008020b4 	movhi	r2,130
  80054c:	10801304 	addi	r2,r2,76
  800550:	10c00115 	stw	r3,4(r2)
	}
	//audioBuffer = playerDeathBuffer;
	audioBuffer = playerDeath.mainBuffer;
  800554:	008020b4 	movhi	r2,130
  800558:	10801304 	addi	r2,r2,76
  80055c:	10800017 	ldw	r2,0(r2)
  800560:	d0a70b15 	stw	r2,-25556(gp)
	audioVolumeBuffer = playerDeath.volumeBuffer;
  800564:	008020b4 	movhi	r2,130
  800568:	10801304 	addi	r2,r2,76
  80056c:	10800117 	ldw	r2,4(r2)
  800570:	d0a70c15 	stw	r2,-25552(gp)
	loaded = PLAYER_DEATH;
  800574:	00800084 	movi	r2,2
  800578:	d0a70d0d 	sth	r2,-25548(gp)
}
  80057c:	e037883a 	mov	sp,fp
  800580:	dfc00117 	ldw	ra,4(sp)
  800584:	df000017 	ldw	fp,0(sp)
  800588:	dec00204 	addi	sp,sp,8
  80058c:	f800283a 	ret

00800590 <loadSharkDeath>:

void loadSharkDeath() {
  800590:	defffe04 	addi	sp,sp,-8
  800594:	dfc00115 	stw	ra,4(sp)
  800598:	df000015 	stw	fp,0(sp)
  80059c:	d839883a 	mov	fp,sp
	sharkDeath.bufferLength = 0x0000DAFF / 2;
  8005a0:	00c020b4 	movhi	r3,130
  8005a4:	18c00a04 	addi	r3,r3,40
  8005a8:	009b5fc4 	movi	r2,28031
  8005ac:	18800215 	stw	r2,8(r3)
	audioFileWordLength = sharkDeath.bufferLength;
  8005b0:	008020b4 	movhi	r2,130
  8005b4:	10800a04 	addi	r2,r2,40
  8005b8:	10800217 	ldw	r2,8(r2)
  8005bc:	d0a70e15 	stw	r2,-25544(gp)
	if (sharkDeath.mainBuffer == NULL || sharkDeath.volumeBuffer == NULL) {
  8005c0:	008020b4 	movhi	r2,130
  8005c4:	10800a04 	addi	r2,r2,40
  8005c8:	10800017 	ldw	r2,0(r2)
  8005cc:	1005003a 	cmpeq	r2,r2,zero
  8005d0:	1000051e 	bne	r2,zero,8005e8 <loadSharkDeath+0x58>
  8005d4:	008020b4 	movhi	r2,130
  8005d8:	10800a04 	addi	r2,r2,40
  8005dc:	10800117 	ldw	r2,4(r2)
  8005e0:	1004c03a 	cmpne	r2,r2,zero
  8005e4:	10000e1e 	bne	r2,zero,800620 <loadSharkDeath+0x90>
		readWavFile("sdie.wav", sharkDeath.bufferLength);
  8005e8:	008020b4 	movhi	r2,130
  8005ec:	10800a04 	addi	r2,r2,40
  8005f0:	11400217 	ldw	r5,8(r2)
  8005f4:	010020b4 	movhi	r4,130
  8005f8:	212e5104 	addi	r4,r4,-18108
  8005fc:	08009f80 	call	8009f8 <readWavFile>
		//sharkDeathBuffer = audioBuffer;
		sharkDeath.mainBuffer = audioBuffer;
  800600:	d0e70b17 	ldw	r3,-25556(gp)
  800604:	008020b4 	movhi	r2,130
  800608:	10800a04 	addi	r2,r2,40
  80060c:	10c00015 	stw	r3,0(r2)
		sharkDeath.volumeBuffer = audioVolumeBuffer;
  800610:	d0e70c17 	ldw	r3,-25552(gp)
  800614:	008020b4 	movhi	r2,130
  800618:	10800a04 	addi	r2,r2,40
  80061c:	10c00115 	stw	r3,4(r2)
	}
	//audioBuffer = sharkDeathBuffer;
	audioBuffer = sharkDeath.mainBuffer;
  800620:	008020b4 	movhi	r2,130
  800624:	10800a04 	addi	r2,r2,40
  800628:	10800017 	ldw	r2,0(r2)
  80062c:	d0a70b15 	stw	r2,-25556(gp)
	audioVolumeBuffer = sharkDeath.volumeBuffer;
  800630:	008020b4 	movhi	r2,130
  800634:	10800a04 	addi	r2,r2,40
  800638:	10800117 	ldw	r2,4(r2)
  80063c:	d0a70c15 	stw	r2,-25552(gp)
	loaded = SHARK_DEATH;
  800640:	008000c4 	movi	r2,3
  800644:	d0a70d0d 	sth	r2,-25548(gp)
}
  800648:	e037883a 	mov	sp,fp
  80064c:	dfc00117 	ldw	ra,4(sp)
  800650:	df000017 	ldw	fp,0(sp)
  800654:	dec00204 	addi	sp,sp,8
  800658:	f800283a 	ret

0080065c <loadTheme>:

void loadTheme() {
  80065c:	defffe04 	addi	sp,sp,-8
  800660:	dfc00115 	stw	ra,4(sp)
  800664:	df000015 	stw	fp,0(sp)
  800668:	d839883a 	mov	fp,sp
	theme.bufferLength = 0x00063E00 / 2;
  80066c:	00c020b4 	movhi	r3,130
  800670:	18c01004 	addi	r3,r3,64
  800674:	008000f4 	movhi	r2,3
  800678:	1087c004 	addi	r2,r2,7936
  80067c:	18800215 	stw	r2,8(r3)
	audioFileWordLength = theme.bufferLength;
  800680:	008020b4 	movhi	r2,130
  800684:	10801004 	addi	r2,r2,64
  800688:	10800217 	ldw	r2,8(r2)
  80068c:	d0a70e15 	stw	r2,-25544(gp)
	if (theme.mainBuffer == NULL || theme.volumeBuffer == NULL) {
  800690:	008020b4 	movhi	r2,130
  800694:	10801004 	addi	r2,r2,64
  800698:	10800017 	ldw	r2,0(r2)
  80069c:	1005003a 	cmpeq	r2,r2,zero
  8006a0:	1000051e 	bne	r2,zero,8006b8 <loadTheme+0x5c>
  8006a4:	008020b4 	movhi	r2,130
  8006a8:	10801004 	addi	r2,r2,64
  8006ac:	10800117 	ldw	r2,4(r2)
  8006b0:	1004c03a 	cmpne	r2,r2,zero
  8006b4:	10000e1e 	bne	r2,zero,8006f0 <loadTheme+0x94>
		readWavFile("theme.wav", theme.bufferLength);
  8006b8:	008020b4 	movhi	r2,130
  8006bc:	10801004 	addi	r2,r2,64
  8006c0:	11400217 	ldw	r5,8(r2)
  8006c4:	010020b4 	movhi	r4,130
  8006c8:	212e5404 	addi	r4,r4,-18096
  8006cc:	08009f80 	call	8009f8 <readWavFile>
		//themeBuffer = audioBuffer;
		theme.mainBuffer = audioBuffer;
  8006d0:	d0e70b17 	ldw	r3,-25556(gp)
  8006d4:	008020b4 	movhi	r2,130
  8006d8:	10801004 	addi	r2,r2,64
  8006dc:	10c00015 	stw	r3,0(r2)
		theme.volumeBuffer = audioVolumeBuffer;
  8006e0:	d0e70c17 	ldw	r3,-25552(gp)
  8006e4:	008020b4 	movhi	r2,130
  8006e8:	10801004 	addi	r2,r2,64
  8006ec:	10c00115 	stw	r3,4(r2)
	}
	//audioBuffer = themeBuffer;
	audioBuffer = theme.mainBuffer;
  8006f0:	008020b4 	movhi	r2,130
  8006f4:	10801004 	addi	r2,r2,64
  8006f8:	10800017 	ldw	r2,0(r2)
  8006fc:	d0a70b15 	stw	r2,-25556(gp)
	audioVolumeBuffer = theme.volumeBuffer;
  800700:	008020b4 	movhi	r2,130
  800704:	10801004 	addi	r2,r2,64
  800708:	10800117 	ldw	r2,4(r2)
  80070c:	d0a70c15 	stw	r2,-25552(gp)
	loaded = THEME;
  800710:	00800104 	movi	r2,4
  800714:	d0a70d0d 	sth	r2,-25548(gp)
}
  800718:	e037883a 	mov	sp,fp
  80071c:	dfc00117 	ldw	ra,4(sp)
  800720:	df000017 	ldw	fp,0(sp)
  800724:	dec00204 	addi	sp,sp,8
  800728:	f800283a 	ret

0080072c <playAudioMono>:

void playAudioMono(int length) {
  80072c:	defffb04 	addi	sp,sp,-20
  800730:	dfc00415 	stw	ra,16(sp)
  800734:	df000315 	stw	fp,12(sp)
  800738:	df000304 	addi	fp,sp,12
  80073c:	e13fff15 	stw	r4,-4(fp)
	if (DEBUG == 1) {
  800740:	d0a70a17 	ldw	r2,-25560(gp)
  800744:	10800058 	cmpnei	r2,r2,1
  800748:	1000031e 	bne	r2,zero,800758 <playAudioMono+0x2c>
		printf("Playing audio.\n");
  80074c:	010020b4 	movhi	r4,130
  800750:	212e5704 	addi	r4,r4,-18084
  800754:	08099640 	call	809964 <puts>
	}
	int left = alt_up_audio_write_fifo(audio, (unsigned int *)playCursor, length, ALT_UP_AUDIO_LEFT);
  800758:	d1270817 	ldw	r4,-25568(gp)
  80075c:	d0a71217 	ldw	r2,-25528(gp)
  800760:	100b883a 	mov	r5,r2
  800764:	e1bfff17 	ldw	r6,-4(fp)
  800768:	000f883a 	mov	r7,zero
  80076c:	0813a980 	call	813a98 <alt_up_audio_write_fifo>
  800770:	e0bffe15 	stw	r2,-8(fp)
	int right = alt_up_audio_write_fifo(audio, (unsigned int *)playCursor, length, ALT_UP_AUDIO_RIGHT);
  800774:	d1270817 	ldw	r4,-25568(gp)
  800778:	d0a71217 	ldw	r2,-25528(gp)
  80077c:	100b883a 	mov	r5,r2
  800780:	e1bfff17 	ldw	r6,-4(fp)
  800784:	01c00044 	movi	r7,1
  800788:	0813a980 	call	813a98 <alt_up_audio_write_fifo>
  80078c:	e0bffd15 	stw	r2,-12(fp)
	left++;
  800790:	e0bffe17 	ldw	r2,-8(fp)
  800794:	10800044 	addi	r2,r2,1
  800798:	e0bffe15 	stw	r2,-8(fp)
	right++;
  80079c:	e0bffd17 	ldw	r2,-12(fp)
  8007a0:	10800044 	addi	r2,r2,1
  8007a4:	e0bffd15 	stw	r2,-12(fp)
	//playAudio(buffer, length, buffer, length);
}
  8007a8:	e037883a 	mov	sp,fp
  8007ac:	dfc00117 	ldw	ra,4(sp)
  8007b0:	df000017 	ldw	fp,0(sp)
  8007b4:	dec00204 	addi	sp,sp,8
  8007b8:	f800283a 	ret

008007bc <playAudio>:

void playAudio(unsigned int *leftBuffer, int leftLength, unsigned int *rightBuffer, int rightLength) {
  8007bc:	defff804 	addi	sp,sp,-32
  8007c0:	dfc00715 	stw	ra,28(sp)
  8007c4:	df000615 	stw	fp,24(sp)
  8007c8:	df000604 	addi	fp,sp,24
  8007cc:	e13ffc15 	stw	r4,-16(fp)
  8007d0:	e17ffd15 	stw	r5,-12(fp)
  8007d4:	e1bffe15 	stw	r6,-8(fp)
  8007d8:	e1ffff15 	stw	r7,-4(fp)
	int leftWritten = alt_up_audio_write_fifo(audio, leftBuffer, leftLength, ALT_UP_AUDIO_LEFT);
  8007dc:	d1270817 	ldw	r4,-25568(gp)
  8007e0:	e17ffc17 	ldw	r5,-16(fp)
  8007e4:	e1bffd17 	ldw	r6,-12(fp)
  8007e8:	000f883a 	mov	r7,zero
  8007ec:	0813a980 	call	813a98 <alt_up_audio_write_fifo>
  8007f0:	e0bffb15 	stw	r2,-20(fp)
	if (DEBUG == 1) {
  8007f4:	d0a70a17 	ldw	r2,-25560(gp)
  8007f8:	10800058 	cmpnei	r2,r2,1
  8007fc:	1000041e 	bne	r2,zero,800810 <playAudio+0x54>
		printf("Wrote %d to left audio FIFO. with value\n", leftWritten);
  800800:	010020b4 	movhi	r4,130
  800804:	212e5b04 	addi	r4,r4,-18068
  800808:	e17ffb17 	ldw	r5,-20(fp)
  80080c:	080984c0 	call	80984c <printf>
	}

	int rightWritten = alt_up_audio_write_fifo(audio, rightBuffer, rightLength, ALT_UP_AUDIO_RIGHT);
  800810:	d1270817 	ldw	r4,-25568(gp)
  800814:	e17ffe17 	ldw	r5,-8(fp)
  800818:	e1bfff17 	ldw	r6,-4(fp)
  80081c:	01c00044 	movi	r7,1
  800820:	0813a980 	call	813a98 <alt_up_audio_write_fifo>
  800824:	e0bffa15 	stw	r2,-24(fp)
	if (DEBUG == 1) {
  800828:	d0a70a17 	ldw	r2,-25560(gp)
  80082c:	10800058 	cmpnei	r2,r2,1
  800830:	1000041e 	bne	r2,zero,800844 <playAudio+0x88>
		printf("Wrote %d to right audio FIFO.\n", rightWritten);
  800834:	010020b4 	movhi	r4,130
  800838:	212e6604 	addi	r4,r4,-18024
  80083c:	e17ffa17 	ldw	r5,-24(fp)
  800840:	080984c0 	call	80984c <printf>
	}
}
  800844:	e037883a 	mov	sp,fp
  800848:	dfc00117 	ldw	ra,4(sp)
  80084c:	df000017 	ldw	fp,0(sp)
  800850:	dec00204 	addi	sp,sp,8
  800854:	f800283a 	ret

00800858 <audioTest>:

void audioTest()
{
  800858:	defff504 	addi	sp,sp,-44
  80085c:	dfc00a15 	stw	ra,40(sp)
  800860:	df000915 	stw	fp,36(sp)
  800864:	df000904 	addi	fp,sp,36
	setupAudio();
  800868:	08002040 	call	800204 <setupAudio>
	printf("Starting audio test\n");
  80086c:	010020b4 	movhi	r4,130
  800870:	212e6e04 	addi	r4,r4,-17992
  800874:	08099640 	call	809964 <puts>
	int length = 8;
  800878:	00800204 	movi	r2,8
  80087c:	e0bffb15 	stw	r2,-20(fp)
	unsigned int right [length];
  800880:	e0bffb17 	ldw	r2,-20(fp)
  800884:	1085883a 	add	r2,r2,r2
  800888:	1085883a 	add	r2,r2,r2
  80088c:	108000c4 	addi	r2,r2,3
  800890:	108000c4 	addi	r2,r2,3
  800894:	1004d0ba 	srli	r2,r2,2
  800898:	1085883a 	add	r2,r2,r2
  80089c:	1085883a 	add	r2,r2,r2
  8008a0:	d8b7c83a 	sub	sp,sp,r2
  8008a4:	e6ffff15 	stw	sp,-4(fp)
  8008a8:	e0ffff17 	ldw	r3,-4(fp)
  8008ac:	188000c4 	addi	r2,r3,3
  8008b0:	1004d0ba 	srli	r2,r2,2
  8008b4:	1085883a 	add	r2,r2,r2
  8008b8:	1085883a 	add	r2,r2,r2
  8008bc:	e0bfff15 	stw	r2,-4(fp)
  8008c0:	e0bfff17 	ldw	r2,-4(fp)
  8008c4:	e0bffd15 	stw	r2,-12(fp)
	unsigned int left [length];
  8008c8:	e0bffb17 	ldw	r2,-20(fp)
  8008cc:	1085883a 	add	r2,r2,r2
  8008d0:	1085883a 	add	r2,r2,r2
  8008d4:	108000c4 	addi	r2,r2,3
  8008d8:	108000c4 	addi	r2,r2,3
  8008dc:	1004d0ba 	srli	r2,r2,2
  8008e0:	1085883a 	add	r2,r2,r2
  8008e4:	1085883a 	add	r2,r2,r2
  8008e8:	d8b7c83a 	sub	sp,sp,r2
  8008ec:	e6fffe15 	stw	sp,-8(fp)
  8008f0:	e0fffe17 	ldw	r3,-8(fp)
  8008f4:	188000c4 	addi	r2,r3,3
  8008f8:	1004d0ba 	srli	r2,r2,2
  8008fc:	1085883a 	add	r2,r2,r2
  800900:	1085883a 	add	r2,r2,r2
  800904:	e0bffe15 	stw	r2,-8(fp)
  800908:	e0bffe17 	ldw	r2,-8(fp)
  80090c:	e0bffc15 	stw	r2,-16(fp)
	int i;

	for (i = 0; i < length; i++) {
  800910:	e03ffa15 	stw	zero,-24(fp)
  800914:	00001b06 	br	800984 <audioTest+0x12c>
		right[i] = (i * i * i) & 0x0000FFFF;
  800918:	e17ffa17 	ldw	r5,-24(fp)
  80091c:	e0fffa17 	ldw	r3,-24(fp)
  800920:	e0bffa17 	ldw	r2,-24(fp)
  800924:	1887383a 	mul	r3,r3,r2
  800928:	e0bffa17 	ldw	r2,-24(fp)
  80092c:	1885383a 	mul	r2,r3,r2
  800930:	113fffcc 	andi	r4,r2,65535
  800934:	e0fffd17 	ldw	r3,-12(fp)
  800938:	2945883a 	add	r2,r5,r5
  80093c:	1085883a 	add	r2,r2,r2
  800940:	10c5883a 	add	r2,r2,r3
  800944:	11000015 	stw	r4,0(r2)
		left[i] = right[i];
  800948:	e17ffa17 	ldw	r5,-24(fp)
  80094c:	e0bffa17 	ldw	r2,-24(fp)
  800950:	e0fffd17 	ldw	r3,-12(fp)
  800954:	1085883a 	add	r2,r2,r2
  800958:	1085883a 	add	r2,r2,r2
  80095c:	10c5883a 	add	r2,r2,r3
  800960:	11000017 	ldw	r4,0(r2)
  800964:	e0fffc17 	ldw	r3,-16(fp)
  800968:	2945883a 	add	r2,r5,r5
  80096c:	1085883a 	add	r2,r2,r2
  800970:	10c5883a 	add	r2,r2,r3
  800974:	11000015 	stw	r4,0(r2)
	int length = 8;
	unsigned int right [length];
	unsigned int left [length];
	int i;

	for (i = 0; i < length; i++) {
  800978:	e0bffa17 	ldw	r2,-24(fp)
  80097c:	10800044 	addi	r2,r2,1
  800980:	e0bffa15 	stw	r2,-24(fp)
  800984:	e0fffa17 	ldw	r3,-24(fp)
  800988:	e0bffb17 	ldw	r2,-20(fp)
  80098c:	18bfe216 	blt	r3,r2,800918 <audioTest+0xc0>
		right[i] = (i * i * i) & 0x0000FFFF;
		left[i] = right[i];
	}

	unsigned int *rightBuffer = right;
  800990:	e0bffd17 	ldw	r2,-12(fp)
  800994:	e0bff915 	stw	r2,-28(fp)
	unsigned int *leftBuffer = left;
  800998:	e0bffc17 	ldw	r2,-16(fp)
  80099c:	e0bff815 	stw	r2,-32(fp)

	//sin (param*PI/180); for degrees, it uses radians

	int free = alt_up_audio_write_fifo_space(audio, ALT_UP_AUDIO_RIGHT);
  8009a0:	d1270817 	ldw	r4,-25568(gp)
  8009a4:	01400044 	movi	r5,1
  8009a8:	08138400 	call	813840 <alt_up_audio_write_fifo_space>
  8009ac:	e0bff715 	stw	r2,-36(fp)
	printf("%d words free in right FIFO\n", free);
  8009b0:	010020b4 	movhi	r4,130
  8009b4:	212e7304 	addi	r4,r4,-17972
  8009b8:	e17ff717 	ldw	r5,-36(fp)
  8009bc:	080984c0 	call	80984c <printf>
  8009c0:	00000006 	br	8009c4 <audioTest+0x16c>

	for (;;) {
		free = alt_up_audio_write_fifo_space(audio, ALT_UP_AUDIO_RIGHT);
  8009c4:	d1270817 	ldw	r4,-25568(gp)
  8009c8:	01400044 	movi	r5,1
  8009cc:	08138400 	call	813840 <alt_up_audio_write_fifo_space>
  8009d0:	e0bff715 	stw	r2,-36(fp)
		//printf("%d words free in right FIFO\n", free);
		if (free >= length) {
  8009d4:	e0fff717 	ldw	r3,-36(fp)
  8009d8:	e0bffb17 	ldw	r2,-20(fp)
  8009dc:	18bff916 	blt	r3,r2,8009c4 <audioTest+0x16c>
			//printf("Playing audio\n");
			playAudio(leftBuffer, length, rightBuffer, length);
  8009e0:	e13ff817 	ldw	r4,-32(fp)
  8009e4:	e17ffb17 	ldw	r5,-20(fp)
  8009e8:	e1bff917 	ldw	r6,-28(fp)
  8009ec:	e1fffb17 	ldw	r7,-20(fp)
  8009f0:	08007bc0 	call	8007bc <playAudio>
		}
	}
  8009f4:	003ff306 	br	8009c4 <audioTest+0x16c>

008009f8 <readWavFile>:
}

void readWavFile(char *wavFileName, unsigned int fileWordLength) {
  8009f8:	defff904 	addi	sp,sp,-28
  8009fc:	dfc00615 	stw	ra,24(sp)
  800a00:	df000515 	stw	fp,20(sp)
  800a04:	df000504 	addi	fp,sp,20
  800a08:	e13ffe15 	stw	r4,-8(fp)
  800a0c:	e17fff15 	stw	r5,-4(fp)
	audioBuffer = malloc(sizeof(unsigned int) * fileWordLength);
  800a10:	e0bfff17 	ldw	r2,-4(fp)
  800a14:	1085883a 	add	r2,r2,r2
  800a18:	1085883a 	add	r2,r2,r2
  800a1c:	1009883a 	mov	r4,r2
  800a20:	08090f80 	call	8090f8 <malloc>
  800a24:	d0a70b15 	stw	r2,-25556(gp)
	audioVolumeBuffer = malloc(sizeof(unsigned int) * fileWordLength);
  800a28:	e0bfff17 	ldw	r2,-4(fp)
  800a2c:	1085883a 	add	r2,r2,r2
  800a30:	1085883a 	add	r2,r2,r2
  800a34:	1009883a 	mov	r4,r2
  800a38:	08090f80 	call	8090f8 <malloc>
  800a3c:	d0a70c15 	stw	r2,-25552(gp)
	if (audioBuffer == NULL || audioVolumeBuffer == NULL) {
  800a40:	d0a70b17 	ldw	r2,-25556(gp)
  800a44:	1005003a 	cmpeq	r2,r2,zero
  800a48:	1000031e 	bne	r2,zero,800a58 <readWavFile+0x60>
  800a4c:	d0a70c17 	ldw	r2,-25552(gp)
  800a50:	1004c03a 	cmpne	r2,r2,zero
  800a54:	1000031e 	bne	r2,zero,800a64 <readWavFile+0x6c>
		printf("Error: insufficient memory to load audio file into memory.\n");
  800a58:	010020b4 	movhi	r4,130
  800a5c:	212e7b04 	addi	r4,r4,-17940
  800a60:	08099640 	call	809964 <puts>
	}

	short int fileHandle = openFile(wavFileName);
  800a64:	e13ffe17 	ldw	r4,-8(fp)
  800a68:	08045580 	call	804558 <openFile>
  800a6c:	e0bffd0d 	sth	r2,-12(fp)
	if (fileHandle == -1) {
  800a70:	e0bffd0f 	ldh	r2,-12(fp)
  800a74:	10bfffd8 	cmpnei	r2,r2,-1
  800a78:	1000051e 	bne	r2,zero,800a90 <readWavFile+0x98>
		printf("Error opening %s\n", wavFileName);
  800a7c:	010020b4 	movhi	r4,130
  800a80:	212e8a04 	addi	r4,r4,-17880
  800a84:	e17ffe17 	ldw	r5,-8(fp)
  800a88:	080984c0 	call	80984c <printf>
		return;
  800a8c:	00002206 	br	800b18 <readWavFile+0x120>
	}

	readPastWavHeader(fileHandle);
  800a90:	e13ffd0f 	ldh	r4,-12(fp)
  800a94:	080481c0 	call	80481c <readPastWavHeader>

	unsigned int i;
	unsigned int word;
	for (i = 0; i < fileWordLength; i++) {
  800a98:	e03ffc15 	stw	zero,-16(fp)
  800a9c:	00001906 	br	800b04 <readWavFile+0x10c>
		word = readWord(fileHandle);
  800aa0:	e13ffd0f 	ldh	r4,-12(fp)
  800aa4:	08045fc0 	call	8045fc <readWord>
  800aa8:	10bfffcc 	andi	r2,r2,65535
  800aac:	10a0001c 	xori	r2,r2,32768
  800ab0:	10a00004 	addi	r2,r2,-32768
  800ab4:	e0bffb15 	stw	r2,-20(fp)
		audioBuffer[i] = word;
  800ab8:	e0bffc17 	ldw	r2,-16(fp)
  800abc:	1085883a 	add	r2,r2,r2
  800ac0:	1085883a 	add	r2,r2,r2
  800ac4:	1007883a 	mov	r3,r2
  800ac8:	d0a70b17 	ldw	r2,-25556(gp)
  800acc:	1887883a 	add	r3,r3,r2
  800ad0:	e0bffb17 	ldw	r2,-20(fp)
  800ad4:	18800015 	stw	r2,0(r3)
		audioVolumeBuffer[i] = word;
  800ad8:	e0bffc17 	ldw	r2,-16(fp)
  800adc:	1085883a 	add	r2,r2,r2
  800ae0:	1085883a 	add	r2,r2,r2
  800ae4:	1007883a 	mov	r3,r2
  800ae8:	d0a70c17 	ldw	r2,-25552(gp)
  800aec:	1887883a 	add	r3,r3,r2
  800af0:	e0bffb17 	ldw	r2,-20(fp)
  800af4:	18800015 	stw	r2,0(r3)

	readPastWavHeader(fileHandle);

	unsigned int i;
	unsigned int word;
	for (i = 0; i < fileWordLength; i++) {
  800af8:	e0bffc17 	ldw	r2,-16(fp)
  800afc:	10800044 	addi	r2,r2,1
  800b00:	e0bffc15 	stw	r2,-16(fp)
  800b04:	e0fffc17 	ldw	r3,-16(fp)
  800b08:	e0bfff17 	ldw	r2,-4(fp)
  800b0c:	18bfe436 	bltu	r3,r2,800aa0 <readWavFile+0xa8>
		audioVolumeBuffer[i] = word;
		//printf("0x%x ", (int)word > 0 ? word : -1 * word);
	}
	//printf("reached EOF\n");

	closeFile(fileHandle);
  800b10:	e13ffd0f 	ldh	r4,-12(fp)
  800b14:	08045980 	call	804598 <closeFile>
	return;
}
  800b18:	e037883a 	mov	sp,fp
  800b1c:	dfc00117 	ldw	ra,4(sp)
  800b20:	df000017 	ldw	fp,0(sp)
  800b24:	dec00204 	addi	sp,sp,8
  800b28:	f800283a 	ret

00800b2c <playLaser>:

// Plays laser once, using interrupts
void playLaser(void) {
  800b2c:	defffe04 	addi	sp,sp,-8
  800b30:	dfc00115 	stw	ra,4(sp)
  800b34:	df000015 	stw	fp,0(sp)
  800b38:	d839883a 	mov	fp,sp
	if (DEBUG == 1) {
  800b3c:	d0a70a17 	ldw	r2,-25560(gp)
  800b40:	10800058 	cmpnei	r2,r2,1
  800b44:	1000031e 	bne	r2,zero,800b54 <playLaser+0x28>
		printf("Playing laser via interrupt.\n");
  800b48:	010020b4 	movhi	r4,130
  800b4c:	212e8f04 	addi	r4,r4,-17860
  800b50:	08099640 	call	809964 <puts>
	}
	loadLaser();
  800b54:	08003f80 	call	8003f8 <loadLaser>
	status = LASER;
  800b58:	00800044 	movi	r2,1
  800b5c:	d0a7130d 	sth	r2,-25524(gp)
	playCursor = audioVolumeBuffer;
  800b60:	d0a70c17 	ldw	r2,-25552(gp)
  800b64:	d0a71215 	stw	r2,-25528(gp)
	playedWords = 0;
  800b68:	d0271115 	stw	zero,-25532(gp)
	alt_up_audio_enable_write_interrupt(audio);
  800b6c:	d1270817 	ldw	r4,-25568(gp)
  800b70:	08135540 	call	813554 <alt_up_audio_enable_write_interrupt>
}
  800b74:	e037883a 	mov	sp,fp
  800b78:	dfc00117 	ldw	ra,4(sp)
  800b7c:	df000017 	ldw	fp,0(sp)
  800b80:	dec00204 	addi	sp,sp,8
  800b84:	f800283a 	ret

00800b88 <playPlayerDeath>:

void playPlayerDeath(void) {
  800b88:	defffe04 	addi	sp,sp,-8
  800b8c:	dfc00115 	stw	ra,4(sp)
  800b90:	df000015 	stw	fp,0(sp)
  800b94:	d839883a 	mov	fp,sp
	loadPlayerDeath();
  800b98:	08004c40 	call	8004c4 <loadPlayerDeath>
	status = PLAYER_DEATH;
  800b9c:	00800084 	movi	r2,2
  800ba0:	d0a7130d 	sth	r2,-25524(gp)
	playCursor = audioVolumeBuffer;
  800ba4:	d0a70c17 	ldw	r2,-25552(gp)
  800ba8:	d0a71215 	stw	r2,-25528(gp)
	playedWords = 0;
  800bac:	d0271115 	stw	zero,-25532(gp)
	alt_up_audio_enable_write_interrupt(audio);
  800bb0:	d1270817 	ldw	r4,-25568(gp)
  800bb4:	08135540 	call	813554 <alt_up_audio_enable_write_interrupt>
}
  800bb8:	e037883a 	mov	sp,fp
  800bbc:	dfc00117 	ldw	ra,4(sp)
  800bc0:	df000017 	ldw	fp,0(sp)
  800bc4:	dec00204 	addi	sp,sp,8
  800bc8:	f800283a 	ret

00800bcc <playSharkDeath>:

void playSharkDeath(void) {
  800bcc:	defffe04 	addi	sp,sp,-8
  800bd0:	dfc00115 	stw	ra,4(sp)
  800bd4:	df000015 	stw	fp,0(sp)
  800bd8:	d839883a 	mov	fp,sp
	loadSharkDeath();
  800bdc:	08005900 	call	800590 <loadSharkDeath>
	status = SHARK_DEATH;
  800be0:	008000c4 	movi	r2,3
  800be4:	d0a7130d 	sth	r2,-25524(gp)
	playCursor = audioVolumeBuffer;
  800be8:	d0a70c17 	ldw	r2,-25552(gp)
  800bec:	d0a71215 	stw	r2,-25528(gp)
	playedWords = 0;
  800bf0:	d0271115 	stw	zero,-25532(gp)
	alt_up_audio_enable_write_interrupt(audio);
  800bf4:	d1270817 	ldw	r4,-25568(gp)
  800bf8:	08135540 	call	813554 <alt_up_audio_enable_write_interrupt>
}
  800bfc:	e037883a 	mov	sp,fp
  800c00:	dfc00117 	ldw	ra,4(sp)
  800c04:	df000017 	ldw	fp,0(sp)
  800c08:	dec00204 	addi	sp,sp,8
  800c0c:	f800283a 	ret

00800c10 <playTheme>:

void playTheme(void) {
  800c10:	defffe04 	addi	sp,sp,-8
  800c14:	dfc00115 	stw	ra,4(sp)
  800c18:	df000015 	stw	fp,0(sp)
  800c1c:	d839883a 	mov	fp,sp
	loadTheme();
  800c20:	080065c0 	call	80065c <loadTheme>
	status = THEME;
  800c24:	00800104 	movi	r2,4
  800c28:	d0a7130d 	sth	r2,-25524(gp)
	playCursor = audioVolumeBuffer;
  800c2c:	d0a70c17 	ldw	r2,-25552(gp)
  800c30:	d0a71215 	stw	r2,-25528(gp)
	playedWords = 0;
  800c34:	d0271115 	stw	zero,-25532(gp)
	alt_up_audio_enable_write_interrupt(audio);
  800c38:	d1270817 	ldw	r4,-25568(gp)
  800c3c:	08135540 	call	813554 <alt_up_audio_enable_write_interrupt>
}
  800c40:	e037883a 	mov	sp,fp
  800c44:	dfc00117 	ldw	ra,4(sp)
  800c48:	df000017 	ldw	fp,0(sp)
  800c4c:	dec00204 	addi	sp,sp,8
  800c50:	f800283a 	ret

00800c54 <playSoundISR>:

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void playSoundISR(void* isr_context) {
#else
static void playSoundISR(void* isr_context, alt_u32 id) {
  800c54:	defff704 	addi	sp,sp,-36
  800c58:	dfc00815 	stw	ra,32(sp)
  800c5c:	df000715 	stw	fp,28(sp)
  800c60:	df000704 	addi	fp,sp,28
  800c64:	e13ffc15 	stw	r4,-16(fp)
  800c68:	e17ffd15 	stw	r5,-12(fp)
#endif
	if (status == NONE) {
  800c6c:	d0a7130b 	ldhu	r2,-25524(gp)
  800c70:	10bfffcc 	andi	r2,r2,65535
  800c74:	10a0001c 	xori	r2,r2,32768
  800c78:	10a00004 	addi	r2,r2,-32768
  800c7c:	1004c03a 	cmpne	r2,r2,zero
  800c80:	1000031e 	bne	r2,zero,800c90 <playSoundISR+0x3c>
		alt_up_audio_disable_write_interrupt(audio);
  800c84:	d1270817 	ldw	r4,-25568(gp)
  800c88:	08135a00 	call	8135a0 <alt_up_audio_disable_write_interrupt>
		return;
  800c8c:	00003d06 	br	800d84 <playSoundISR+0x130>
	}
	int len;
	unsigned int free = alt_up_audio_write_fifo_space(audio, ALT_UP_AUDIO_LEFT);
  800c90:	d1270817 	ldw	r4,-25568(gp)
  800c94:	000b883a 	mov	r5,zero
  800c98:	08138400 	call	813840 <alt_up_audio_write_fifo_space>
  800c9c:	e0bffa15 	stw	r2,-24(fp)
	unsigned end = (unsigned)(audioVolumeBuffer) + (2 * audioFileWordLength);
  800ca0:	d0a70e17 	ldw	r2,-25544(gp)
  800ca4:	1085883a 	add	r2,r2,r2
  800ca8:	1007883a 	mov	r3,r2
  800cac:	d0a70c17 	ldw	r2,-25552(gp)
  800cb0:	1885883a 	add	r2,r3,r2
  800cb4:	e0bff915 	stw	r2,-28(fp)
	if (free >= 1) {
  800cb8:	e0bffa17 	ldw	r2,-24(fp)
  800cbc:	1005003a 	cmpeq	r2,r2,zero
  800cc0:	10002e1e 	bne	r2,zero,800d7c <playSoundISR+0x128>
		if (((int)playCursor + free >= end) ||
  800cc4:	d0a71217 	ldw	r2,-25528(gp)
  800cc8:	1007883a 	mov	r3,r2
  800ccc:	e0bffa17 	ldw	r2,-24(fp)
  800cd0:	1887883a 	add	r3,r3,r2
  800cd4:	e0bff917 	ldw	r2,-28(fp)
  800cd8:	1880052e 	bgeu	r3,r2,800cf0 <playSoundISR+0x9c>
  800cdc:	d0e71117 	ldw	r3,-25532(gp)
  800ce0:	e0bffa17 	ldw	r2,-24(fp)
  800ce4:	1887883a 	add	r3,r3,r2
  800ce8:	d0a70e17 	ldw	r2,-25544(gp)
  800cec:	18800836 	bltu	r3,r2,800d10 <playSoundISR+0xbc>
			 (playedWords + free) >= audioFileWordLength) {
			// Last chunk to play
			len = end - (int)playCursor;
  800cf0:	d0a71217 	ldw	r2,-25528(gp)
  800cf4:	1007883a 	mov	r3,r2
  800cf8:	e0bff917 	ldw	r2,-28(fp)
  800cfc:	10c5c83a 	sub	r2,r2,r3
  800d00:	e0bffb15 	stw	r2,-20(fp)
			alt_up_audio_disable_write_interrupt(audio);
  800d04:	d1270817 	ldw	r4,-25568(gp)
  800d08:	08135a00 	call	8135a0 <alt_up_audio_disable_write_interrupt>
	}
	int len;
	unsigned int free = alt_up_audio_write_fifo_space(audio, ALT_UP_AUDIO_LEFT);
	unsigned end = (unsigned)(audioVolumeBuffer) + (2 * audioFileWordLength);
	if (free >= 1) {
		if (((int)playCursor + free >= end) ||
  800d0c:	00000206 	br	800d18 <playSoundISR+0xc4>
			 (playedWords + free) >= audioFileWordLength) {
			// Last chunk to play
			len = end - (int)playCursor;
			alt_up_audio_disable_write_interrupt(audio);
		} else {
			len = free;
  800d10:	e0bffa17 	ldw	r2,-24(fp)
  800d14:	e0bffb15 	stw	r2,-20(fp)
		}
		len = len > free ? free : len;
  800d18:	e0bffb17 	ldw	r2,-20(fp)
  800d1c:	e0fffa17 	ldw	r3,-24(fp)
  800d20:	e0ffff15 	stw	r3,-4(fp)
  800d24:	e0bffe15 	stw	r2,-8(fp)
  800d28:	e0bfff17 	ldw	r2,-4(fp)
  800d2c:	e0fffe17 	ldw	r3,-8(fp)
  800d30:	10c0022e 	bgeu	r2,r3,800d3c <playSoundISR+0xe8>
  800d34:	e0bfff17 	ldw	r2,-4(fp)
  800d38:	e0bffe15 	stw	r2,-8(fp)
  800d3c:	e0fffe17 	ldw	r3,-8(fp)
  800d40:	e0fffb15 	stw	r3,-20(fp)
		playAudioMono(len);
  800d44:	e13ffb17 	ldw	r4,-20(fp)
  800d48:	080072c0 	call	80072c <playAudioMono>
		playedWords += len;
  800d4c:	d0e71117 	ldw	r3,-25532(gp)
  800d50:	e0bffb17 	ldw	r2,-20(fp)
  800d54:	1885883a 	add	r2,r3,r2
  800d58:	d0a71115 	stw	r2,-25532(gp)
		playCursor += len;
  800d5c:	e0bffb17 	ldw	r2,-20(fp)
  800d60:	1085883a 	add	r2,r2,r2
  800d64:	1085883a 	add	r2,r2,r2
  800d68:	1007883a 	mov	r3,r2
  800d6c:	d0a71217 	ldw	r2,-25528(gp)
  800d70:	1885883a 	add	r2,r3,r2
  800d74:	d0a71215 	stw	r2,-25528(gp)
  800d78:	00000206 	br	800d84 <playSoundISR+0x130>
	} else {
		// Interrupt should not be triggered if there is no space
		alt_up_audio_disable_write_interrupt(audio);
  800d7c:	d1270817 	ldw	r4,-25568(gp)
  800d80:	08135a00 	call	8135a0 <alt_up_audio_disable_write_interrupt>
	}
}
  800d84:	e037883a 	mov	sp,fp
  800d88:	dfc00117 	ldw	ra,4(sp)
  800d8c:	df000017 	ldw	fp,0(sp)
  800d90:	dec00204 	addi	sp,sp,8
  800d94:	f800283a 	ret

00800d98 <updateAudioWithVolume>:

void updateAudioWithVolume(char switchValues) {
  800d98:	defffd04 	addi	sp,sp,-12
  800d9c:	dfc00215 	stw	ra,8(sp)
  800da0:	df000115 	stw	fp,4(sp)
  800da4:	df000104 	addi	fp,sp,4
  800da8:	e13fff05 	stb	r4,-4(fp)

	if (laser.mainBuffer != NULL && laser.volumeBuffer != NULL){
  800dac:	008020b4 	movhi	r2,130
  800db0:	10800d04 	addi	r2,r2,52
  800db4:	10800017 	ldw	r2,0(r2)
  800db8:	1005003a 	cmpeq	r2,r2,zero
  800dbc:	10000c1e 	bne	r2,zero,800df0 <updateAudioWithVolume+0x58>
  800dc0:	008020b4 	movhi	r2,130
  800dc4:	10800d04 	addi	r2,r2,52
  800dc8:	10800117 	ldw	r2,4(r2)
  800dcc:	1005003a 	cmpeq	r2,r2,zero
  800dd0:	1000071e 	bne	r2,zero,800df0 <updateAudioWithVolume+0x58>
		changeBufferVolume(laser, switchValues);
  800dd4:	e1ffff07 	ldb	r7,-4(fp)
  800dd8:	008020b4 	movhi	r2,130
  800ddc:	10800d04 	addi	r2,r2,52
  800de0:	11000017 	ldw	r4,0(r2)
  800de4:	11400117 	ldw	r5,4(r2)
  800de8:	11800217 	ldw	r6,8(r2)
  800dec:	0800ed00 	call	800ed0 <changeBufferVolume>
	}
	if (playerDeath.mainBuffer != NULL && playerDeath.volumeBuffer != NULL){
  800df0:	008020b4 	movhi	r2,130
  800df4:	10801304 	addi	r2,r2,76
  800df8:	10800017 	ldw	r2,0(r2)
  800dfc:	1005003a 	cmpeq	r2,r2,zero
  800e00:	10000c1e 	bne	r2,zero,800e34 <updateAudioWithVolume+0x9c>
  800e04:	008020b4 	movhi	r2,130
  800e08:	10801304 	addi	r2,r2,76
  800e0c:	10800117 	ldw	r2,4(r2)
  800e10:	1005003a 	cmpeq	r2,r2,zero
  800e14:	1000071e 	bne	r2,zero,800e34 <updateAudioWithVolume+0x9c>
		changeBufferVolume(playerDeath, switchValues);
  800e18:	e1ffff07 	ldb	r7,-4(fp)
  800e1c:	008020b4 	movhi	r2,130
  800e20:	10801304 	addi	r2,r2,76
  800e24:	11000017 	ldw	r4,0(r2)
  800e28:	11400117 	ldw	r5,4(r2)
  800e2c:	11800217 	ldw	r6,8(r2)
  800e30:	0800ed00 	call	800ed0 <changeBufferVolume>
	}
	if (sharkDeath.mainBuffer != NULL && sharkDeath.volumeBuffer != NULL) {
  800e34:	008020b4 	movhi	r2,130
  800e38:	10800a04 	addi	r2,r2,40
  800e3c:	10800017 	ldw	r2,0(r2)
  800e40:	1005003a 	cmpeq	r2,r2,zero
  800e44:	10000c1e 	bne	r2,zero,800e78 <updateAudioWithVolume+0xe0>
  800e48:	008020b4 	movhi	r2,130
  800e4c:	10800a04 	addi	r2,r2,40
  800e50:	10800117 	ldw	r2,4(r2)
  800e54:	1005003a 	cmpeq	r2,r2,zero
  800e58:	1000071e 	bne	r2,zero,800e78 <updateAudioWithVolume+0xe0>
		changeBufferVolume(sharkDeath, switchValues);
  800e5c:	e1ffff07 	ldb	r7,-4(fp)
  800e60:	008020b4 	movhi	r2,130
  800e64:	10800a04 	addi	r2,r2,40
  800e68:	11000017 	ldw	r4,0(r2)
  800e6c:	11400117 	ldw	r5,4(r2)
  800e70:	11800217 	ldw	r6,8(r2)
  800e74:	0800ed00 	call	800ed0 <changeBufferVolume>
	}
	if (theme.mainBuffer != NULL && theme.volumeBuffer != NULL) {
  800e78:	008020b4 	movhi	r2,130
  800e7c:	10801004 	addi	r2,r2,64
  800e80:	10800017 	ldw	r2,0(r2)
  800e84:	1005003a 	cmpeq	r2,r2,zero
  800e88:	10000c1e 	bne	r2,zero,800ebc <updateAudioWithVolume+0x124>
  800e8c:	008020b4 	movhi	r2,130
  800e90:	10801004 	addi	r2,r2,64
  800e94:	10800117 	ldw	r2,4(r2)
  800e98:	1005003a 	cmpeq	r2,r2,zero
  800e9c:	1000071e 	bne	r2,zero,800ebc <updateAudioWithVolume+0x124>
		changeBufferVolume(theme, switchValues);
  800ea0:	e1ffff07 	ldb	r7,-4(fp)
  800ea4:	008020b4 	movhi	r2,130
  800ea8:	10801004 	addi	r2,r2,64
  800eac:	11000017 	ldw	r4,0(r2)
  800eb0:	11400117 	ldw	r5,4(r2)
  800eb4:	11800217 	ldw	r6,8(r2)
  800eb8:	0800ed00 	call	800ed0 <changeBufferVolume>
	}

	return;
}
  800ebc:	e037883a 	mov	sp,fp
  800ec0:	dfc00117 	ldw	ra,4(sp)
  800ec4:	df000017 	ldw	fp,0(sp)
  800ec8:	dec00204 	addi	sp,sp,8
  800ecc:	f800283a 	ret

00800ed0 <changeBufferVolume>:

void changeBufferVolume(struct audioInfo currentAudioInfo, char switchValues) {
  800ed0:	defff704 	addi	sp,sp,-36
  800ed4:	dfc00815 	stw	ra,32(sp)
  800ed8:	df000715 	stw	fp,28(sp)
  800edc:	df000704 	addi	fp,sp,28
  800ee0:	e13ffc15 	stw	r4,-16(fp)
  800ee4:	e17ffd15 	stw	r5,-12(fp)
  800ee8:	e1bffe15 	stw	r6,-8(fp)
  800eec:	e1ffff05 	stb	r7,-4(fp)
	int i;
	short volumeKeys = switchValues & 0x0F;
  800ef0:	e0bfff03 	ldbu	r2,-4(fp)
  800ef4:	10803fcc 	andi	r2,r2,255
  800ef8:	108003cc 	andi	r2,r2,15
  800efc:	e0bffa0d 	sth	r2,-24(fp)
	if(volumeKeys == 0x00 || volumeKeys == 0x01) {
  800f00:	e0bffa0f 	ldh	r2,-24(fp)
  800f04:	1005003a 	cmpeq	r2,r2,zero
  800f08:	1000031e 	bne	r2,zero,800f18 <changeBufferVolume+0x48>
  800f0c:	e0bffa0f 	ldh	r2,-24(fp)
  800f10:	10800058 	cmpnei	r2,r2,1
  800f14:	10001b1e 	bne	r2,zero,800f84 <changeBufferVolume+0xb4>
		short shiftLength = 2 - volumeKeys;
  800f18:	e0fffa0b 	ldhu	r3,-24(fp)
  800f1c:	00800084 	movi	r2,2
  800f20:	10c5c83a 	sub	r2,r2,r3
  800f24:	e0bff98d 	sth	r2,-26(fp)
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  800f28:	e03ffb15 	stw	zero,-20(fp)
  800f2c:	00001106 	br	800f74 <changeBufferVolume+0xa4>
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) >> shiftLength;
  800f30:	e0fffd17 	ldw	r3,-12(fp)
  800f34:	e0bffb17 	ldw	r2,-20(fp)
  800f38:	1085883a 	add	r2,r2,r2
  800f3c:	1085883a 	add	r2,r2,r2
  800f40:	1889883a 	add	r4,r3,r2
  800f44:	e0fffc17 	ldw	r3,-16(fp)
  800f48:	e0bffb17 	ldw	r2,-20(fp)
  800f4c:	1085883a 	add	r2,r2,r2
  800f50:	1085883a 	add	r2,r2,r2
  800f54:	1885883a 	add	r2,r3,r2
  800f58:	10c00017 	ldw	r3,0(r2)
  800f5c:	e0bff98f 	ldh	r2,-26(fp)
  800f60:	1884d83a 	srl	r2,r3,r2
  800f64:	20800015 	stw	r2,0(r4)
void changeBufferVolume(struct audioInfo currentAudioInfo, char switchValues) {
	int i;
	short volumeKeys = switchValues & 0x0F;
	if(volumeKeys == 0x00 || volumeKeys == 0x01) {
		short shiftLength = 2 - volumeKeys;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  800f68:	e0bffb17 	ldw	r2,-20(fp)
  800f6c:	10800044 	addi	r2,r2,1
  800f70:	e0bffb15 	stw	r2,-20(fp)
  800f74:	e0fffb17 	ldw	r3,-20(fp)
  800f78:	e0bffe17 	ldw	r2,-8(fp)
  800f7c:	18bfec36 	bltu	r3,r2,800f30 <changeBufferVolume+0x60>
}

void changeBufferVolume(struct audioInfo currentAudioInfo, char switchValues) {
	int i;
	short volumeKeys = switchValues & 0x0F;
	if(volumeKeys == 0x00 || volumeKeys == 0x01) {
  800f80:	00004806 	br	8010a4 <changeBufferVolume+0x1d4>
		short shiftLength = 2 - volumeKeys;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) >> shiftLength;
		}
	} else if(volumeKeys == 0x07 || volumeKeys == 0x0F) {
  800f84:	e0bffa0f 	ldh	r2,-24(fp)
  800f88:	108001e0 	cmpeqi	r2,r2,7
  800f8c:	1000031e 	bne	r2,zero,800f9c <changeBufferVolume+0xcc>
  800f90:	e0bffa0f 	ldh	r2,-24(fp)
  800f94:	108003d8 	cmpnei	r2,r2,15
  800f98:	10001c1e 	bne	r2,zero,80100c <changeBufferVolume+0x13c>
		short shiftLength = (volumeKeys % 7) + 1;
  800f9c:	e13ffa0f 	ldh	r4,-24(fp)
  800fa0:	014001c4 	movi	r5,7
  800fa4:	08088100 	call	808810 <__modsi3>
  800fa8:	10800044 	addi	r2,r2,1
  800fac:	e0bff90d 	sth	r2,-28(fp)
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  800fb0:	e03ffb15 	stw	zero,-20(fp)
  800fb4:	00001106 	br	800ffc <changeBufferVolume+0x12c>
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) << shiftLength;
  800fb8:	e0fffd17 	ldw	r3,-12(fp)
  800fbc:	e0bffb17 	ldw	r2,-20(fp)
  800fc0:	1085883a 	add	r2,r2,r2
  800fc4:	1085883a 	add	r2,r2,r2
  800fc8:	1889883a 	add	r4,r3,r2
  800fcc:	e0fffc17 	ldw	r3,-16(fp)
  800fd0:	e0bffb17 	ldw	r2,-20(fp)
  800fd4:	1085883a 	add	r2,r2,r2
  800fd8:	1085883a 	add	r2,r2,r2
  800fdc:	1885883a 	add	r2,r3,r2
  800fe0:	10c00017 	ldw	r3,0(r2)
  800fe4:	e0bff90f 	ldh	r2,-28(fp)
  800fe8:	1884983a 	sll	r2,r3,r2
  800fec:	20800015 	stw	r2,0(r4)
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) >> shiftLength;
		}
	} else if(volumeKeys == 0x07 || volumeKeys == 0x0F) {
		short shiftLength = (volumeKeys % 7) + 1;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  800ff0:	e0bffb17 	ldw	r2,-20(fp)
  800ff4:	10800044 	addi	r2,r2,1
  800ff8:	e0bffb15 	stw	r2,-20(fp)
  800ffc:	e0fffb17 	ldw	r3,-20(fp)
  801000:	e0bffe17 	ldw	r2,-8(fp)
  801004:	18bfec36 	bltu	r3,r2,800fb8 <changeBufferVolume+0xe8>
	if(volumeKeys == 0x00 || volumeKeys == 0x01) {
		short shiftLength = 2 - volumeKeys;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) >> shiftLength;
		}
	} else if(volumeKeys == 0x07 || volumeKeys == 0x0F) {
  801008:	00002606 	br	8010a4 <changeBufferVolume+0x1d4>
		short shiftLength = (volumeKeys % 7) + 1;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) << shiftLength;
		}
	} else if(volumeKeys == 0x03) {
  80100c:	e0bffa0f 	ldh	r2,-24(fp)
  801010:	108000d8 	cmpnei	r2,r2,3
  801014:	1000151e 	bne	r2,zero,80106c <changeBufferVolume+0x19c>
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  801018:	e03ffb15 	stw	zero,-20(fp)
  80101c:	00000f06 	br	80105c <changeBufferVolume+0x18c>
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i);
  801020:	e0fffd17 	ldw	r3,-12(fp)
  801024:	e0bffb17 	ldw	r2,-20(fp)
  801028:	1085883a 	add	r2,r2,r2
  80102c:	1085883a 	add	r2,r2,r2
  801030:	1887883a 	add	r3,r3,r2
  801034:	e13ffc17 	ldw	r4,-16(fp)
  801038:	e0bffb17 	ldw	r2,-20(fp)
  80103c:	1085883a 	add	r2,r2,r2
  801040:	1085883a 	add	r2,r2,r2
  801044:	2085883a 	add	r2,r4,r2
  801048:	10800017 	ldw	r2,0(r2)
  80104c:	18800015 	stw	r2,0(r3)
		short shiftLength = (volumeKeys % 7) + 1;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) << shiftLength;
		}
	} else if(volumeKeys == 0x03) {
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  801050:	e0bffb17 	ldw	r2,-20(fp)
  801054:	10800044 	addi	r2,r2,1
  801058:	e0bffb15 	stw	r2,-20(fp)
  80105c:	e0fffb17 	ldw	r3,-20(fp)
  801060:	e0bffe17 	ldw	r2,-8(fp)
  801064:	18bfee36 	bltu	r3,r2,801020 <changeBufferVolume+0x150>
  801068:	00000e06 	br	8010a4 <changeBufferVolume+0x1d4>
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i);
		}
	} else {
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  80106c:	e03ffb15 	stw	zero,-20(fp)
  801070:	00000906 	br	801098 <changeBufferVolume+0x1c8>
			*(currentAudioInfo.volumeBuffer + i) = 0; //mute on all other combos
  801074:	e0fffd17 	ldw	r3,-12(fp)
  801078:	e0bffb17 	ldw	r2,-20(fp)
  80107c:	1085883a 	add	r2,r2,r2
  801080:	1085883a 	add	r2,r2,r2
  801084:	1885883a 	add	r2,r3,r2
  801088:	10000015 	stw	zero,0(r2)
	} else if(volumeKeys == 0x03) {
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i);
		}
	} else {
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  80108c:	e0bffb17 	ldw	r2,-20(fp)
  801090:	10800044 	addi	r2,r2,1
  801094:	e0bffb15 	stw	r2,-20(fp)
  801098:	e0fffb17 	ldw	r3,-20(fp)
  80109c:	e0bffe17 	ldw	r2,-8(fp)
  8010a0:	18bff436 	bltu	r3,r2,801074 <changeBufferVolume+0x1a4>
			*(currentAudioInfo.volumeBuffer + i) = 0; //mute on all other combos
		}
	}

	return;
}
  8010a4:	e037883a 	mov	sp,fp
  8010a8:	dfc00117 	ldw	ra,4(sp)
  8010ac:	df000017 	ldw	fp,0(sp)
  8010b0:	dec00204 	addi	sp,sp,8
  8010b4:	f800283a 	ret

008010b8 <parseBmp>:
#include "bmp.h"

void parseBmp (char *fileName, BMP *bmp) {
  8010b8:	defff304 	addi	sp,sp,-52
  8010bc:	dfc00c15 	stw	ra,48(sp)
  8010c0:	df000b15 	stw	fp,44(sp)
  8010c4:	dc000a15 	stw	r16,40(sp)
  8010c8:	df000a04 	addi	fp,sp,40
  8010cc:	e13ffd15 	stw	r4,-12(fp)
  8010d0:	e17ffe15 	stw	r5,-8(fp)
	int i, j, k;
	int pixels, rowOffset, offset;
	short int fh;

	fh = openFile(fileName);
  8010d4:	e13ffd17 	ldw	r4,-12(fp)
  8010d8:	08045580 	call	804558 <openFile>
  8010dc:	e0bff60d 	sth	r2,-40(fp)

	bmp->header.type = readWord(fh);
  8010e0:	e13ff60f 	ldh	r4,-40(fp)
  8010e4:	08045fc0 	call	8045fc <readWord>
  8010e8:	1007883a 	mov	r3,r2
  8010ec:	e0bffe17 	ldw	r2,-8(fp)
  8010f0:	10c0000d 	sth	r3,0(r2)
	bmp->header.size = readDWord(fh);
  8010f4:	e13ff60f 	ldh	r4,-40(fp)
  8010f8:	08046900 	call	804690 <readDWord>
  8010fc:	1007883a 	mov	r3,r2
  801100:	e0bffe17 	ldw	r2,-8(fp)
  801104:	10c00115 	stw	r3,4(r2)
	bmp->header.reserved1 = readWord(fh);
  801108:	e13ff60f 	ldh	r4,-40(fp)
  80110c:	08045fc0 	call	8045fc <readWord>
  801110:	1007883a 	mov	r3,r2
  801114:	e0bffe17 	ldw	r2,-8(fp)
  801118:	10c0020d 	sth	r3,8(r2)
	bmp->header.reserved2 = readWord(fh);
  80111c:	e13ff60f 	ldh	r4,-40(fp)
  801120:	08045fc0 	call	8045fc <readWord>
  801124:	1007883a 	mov	r3,r2
  801128:	e0bffe17 	ldw	r2,-8(fp)
  80112c:	10c0028d 	sth	r3,10(r2)
	bmp->header.offset = readDWord(fh);
  801130:	e13ff60f 	ldh	r4,-40(fp)
  801134:	08046900 	call	804690 <readDWord>
  801138:	1007883a 	mov	r3,r2
  80113c:	e0bffe17 	ldw	r2,-8(fp)
  801140:	10c00315 	stw	r3,12(r2)

	bmp->infoheader.size = readDWord(fh);
  801144:	e13ff60f 	ldh	r4,-40(fp)
  801148:	08046900 	call	804690 <readDWord>
  80114c:	1007883a 	mov	r3,r2
  801150:	e0bffe17 	ldw	r2,-8(fp)
  801154:	10c00415 	stw	r3,16(r2)
	bmp->infoheader.width = readDWord(fh);
  801158:	e13ff60f 	ldh	r4,-40(fp)
  80115c:	08046900 	call	804690 <readDWord>
  801160:	1007883a 	mov	r3,r2
  801164:	e0bffe17 	ldw	r2,-8(fp)
  801168:	10c00515 	stw	r3,20(r2)
	bmp->infoheader.height = readDWord(fh);
  80116c:	e13ff60f 	ldh	r4,-40(fp)
  801170:	08046900 	call	804690 <readDWord>
  801174:	1007883a 	mov	r3,r2
  801178:	e0bffe17 	ldw	r2,-8(fp)
  80117c:	10c00615 	stw	r3,24(r2)
	bmp->infoheader.planes = readWord(fh);
  801180:	e13ff60f 	ldh	r4,-40(fp)
  801184:	08045fc0 	call	8045fc <readWord>
  801188:	1007883a 	mov	r3,r2
  80118c:	e0bffe17 	ldw	r2,-8(fp)
  801190:	10c0070d 	sth	r3,28(r2)
	bmp->infoheader.bits = readWord(fh);
  801194:	e13ff60f 	ldh	r4,-40(fp)
  801198:	08045fc0 	call	8045fc <readWord>
  80119c:	1007883a 	mov	r3,r2
  8011a0:	e0bffe17 	ldw	r2,-8(fp)
  8011a4:	10c0078d 	sth	r3,30(r2)
	bmp->infoheader.compression = readDWord(fh);
  8011a8:	e13ff60f 	ldh	r4,-40(fp)
  8011ac:	08046900 	call	804690 <readDWord>
  8011b0:	1007883a 	mov	r3,r2
  8011b4:	e0bffe17 	ldw	r2,-8(fp)
  8011b8:	10c00815 	stw	r3,32(r2)
	bmp->infoheader.imagesize = readDWord(fh);
  8011bc:	e13ff60f 	ldh	r4,-40(fp)
  8011c0:	08046900 	call	804690 <readDWord>
  8011c4:	1007883a 	mov	r3,r2
  8011c8:	e0bffe17 	ldw	r2,-8(fp)
  8011cc:	10c00915 	stw	r3,36(r2)
	bmp->infoheader.xresolution = readDWord(fh);
  8011d0:	e13ff60f 	ldh	r4,-40(fp)
  8011d4:	08046900 	call	804690 <readDWord>
  8011d8:	1007883a 	mov	r3,r2
  8011dc:	e0bffe17 	ldw	r2,-8(fp)
  8011e0:	10c00a15 	stw	r3,40(r2)
	bmp->infoheader.yresolution = readDWord(fh);
  8011e4:	e13ff60f 	ldh	r4,-40(fp)
  8011e8:	08046900 	call	804690 <readDWord>
  8011ec:	1007883a 	mov	r3,r2
  8011f0:	e0bffe17 	ldw	r2,-8(fp)
  8011f4:	10c00b15 	stw	r3,44(r2)
	bmp->infoheader.ncolors = readDWord(fh);
  8011f8:	e13ff60f 	ldh	r4,-40(fp)
  8011fc:	08046900 	call	804690 <readDWord>
  801200:	1007883a 	mov	r3,r2
  801204:	e0bffe17 	ldw	r2,-8(fp)
  801208:	10c00c15 	stw	r3,48(r2)
	bmp->infoheader.importantcolors = readDWord(fh);
  80120c:	e13ff60f 	ldh	r4,-40(fp)
  801210:	08046900 	call	804690 <readDWord>
  801214:	1007883a 	mov	r3,r2
  801218:	e0bffe17 	ldw	r2,-8(fp)
  80121c:	10c00d15 	stw	r3,52(r2)

	pixels = bmp->infoheader.width * bmp->infoheader.height;
  801220:	e0bffe17 	ldw	r2,-8(fp)
  801224:	10c00517 	ldw	r3,20(r2)
  801228:	e0bffe17 	ldw	r2,-8(fp)
  80122c:	10800617 	ldw	r2,24(r2)
  801230:	1885383a 	mul	r2,r3,r2
  801234:	e0bff915 	stw	r2,-28(fp)
	bmp->rgb = malloc(BYTES_PER_PIXEL * pixels);
  801238:	e0fff917 	ldw	r3,-28(fp)
  80123c:	1805883a 	mov	r2,r3
  801240:	1085883a 	add	r2,r2,r2
  801244:	10c5883a 	add	r2,r2,r3
  801248:	1009883a 	mov	r4,r2
  80124c:	08090f80 	call	8090f8 <malloc>
  801250:	1007883a 	mov	r3,r2
  801254:	e0bffe17 	ldw	r2,-8(fp)
  801258:	10c00e15 	stw	r3,56(r2)

	for(i = 0; i < bmp->infoheader.height; i++) {
  80125c:	e03ffc15 	stw	zero,-16(fp)
  801260:	00009a06 	br	8014cc <parseBmp+0x414>
		rowOffset = i*bmp->infoheader.width;
  801264:	e0bffe17 	ldw	r2,-8(fp)
  801268:	10c00517 	ldw	r3,20(r2)
  80126c:	e0bffc17 	ldw	r2,-16(fp)
  801270:	1885383a 	mul	r2,r3,r2
  801274:	e0bff815 	stw	r2,-32(fp)
		for(j = 0; j < bmp->infoheader.width; j++ ){
  801278:	e03ffb15 	stw	zero,-20(fp)
  80127c:	00006206 	br	801408 <parseBmp+0x350>
			offset = pixels - rowOffset - j - 1;
  801280:	e0fff917 	ldw	r3,-28(fp)
  801284:	e0bff817 	ldw	r2,-32(fp)
  801288:	1887c83a 	sub	r3,r3,r2
  80128c:	e0bffb17 	ldw	r2,-20(fp)
  801290:	1885c83a 	sub	r2,r3,r2
  801294:	10bfffc4 	addi	r2,r2,-1
  801298:	e0bff715 	stw	r2,-36(fp)

			(bmp->rgb + offset)->b = (readByte(fh) & 0xF1) >> 3;
  80129c:	e0bffe17 	ldw	r2,-8(fp)
  8012a0:	11000e17 	ldw	r4,56(r2)
  8012a4:	e0fff717 	ldw	r3,-36(fp)
  8012a8:	1805883a 	mov	r2,r3
  8012ac:	1085883a 	add	r2,r2,r2
  8012b0:	10c5883a 	add	r2,r2,r3
  8012b4:	20a1883a 	add	r16,r4,r2
  8012b8:	e13ff60f 	ldh	r4,-40(fp)
  8012bc:	08045c80 	call	8045c8 <readByte>
  8012c0:	10803fcc 	andi	r2,r2,255
  8012c4:	10803c4c 	andi	r2,r2,241
  8012c8:	1005d0fa 	srai	r2,r2,3
  8012cc:	80800085 	stb	r2,2(r16)
			(bmp->rgb + offset)->g = (readByte(fh) & 0xFC) >> 2;
  8012d0:	e0bffe17 	ldw	r2,-8(fp)
  8012d4:	11000e17 	ldw	r4,56(r2)
  8012d8:	e0fff717 	ldw	r3,-36(fp)
  8012dc:	1805883a 	mov	r2,r3
  8012e0:	1085883a 	add	r2,r2,r2
  8012e4:	10c5883a 	add	r2,r2,r3
  8012e8:	20a1883a 	add	r16,r4,r2
  8012ec:	e13ff60f 	ldh	r4,-40(fp)
  8012f0:	08045c80 	call	8045c8 <readByte>
  8012f4:	10803fcc 	andi	r2,r2,255
  8012f8:	10803f0c 	andi	r2,r2,252
  8012fc:	1005d0ba 	srai	r2,r2,2
  801300:	80800045 	stb	r2,1(r16)
			(bmp->rgb + offset)->r = (readByte(fh) & 0xF1) >> 3;
  801304:	e0bffe17 	ldw	r2,-8(fp)
  801308:	11000e17 	ldw	r4,56(r2)
  80130c:	e0fff717 	ldw	r3,-36(fp)
  801310:	1805883a 	mov	r2,r3
  801314:	1085883a 	add	r2,r2,r2
  801318:	10c5883a 	add	r2,r2,r3
  80131c:	20a1883a 	add	r16,r4,r2
  801320:	e13ff60f 	ldh	r4,-40(fp)
  801324:	08045c80 	call	8045c8 <readByte>
  801328:	10803fcc 	andi	r2,r2,255
  80132c:	10803c4c 	andi	r2,r2,241
  801330:	1005d0fa 	srai	r2,r2,3
  801334:	80800005 	stb	r2,0(r16)

			//Filter out the pink pixels
			if (((bmp->rgb + offset)->b == 0x1E) && ((bmp->rgb + offset)->g == 0) && ((bmp->rgb + offset)->r == 0x1E)) {
  801338:	e0bffe17 	ldw	r2,-8(fp)
  80133c:	11000e17 	ldw	r4,56(r2)
  801340:	e0fff717 	ldw	r3,-36(fp)
  801344:	1805883a 	mov	r2,r3
  801348:	1085883a 	add	r2,r2,r2
  80134c:	10c5883a 	add	r2,r2,r3
  801350:	2085883a 	add	r2,r4,r2
  801354:	10800083 	ldbu	r2,2(r2)
  801358:	10803fcc 	andi	r2,r2,255
  80135c:	10800798 	cmpnei	r2,r2,30
  801360:	1000261e 	bne	r2,zero,8013fc <parseBmp+0x344>
  801364:	e0bffe17 	ldw	r2,-8(fp)
  801368:	11000e17 	ldw	r4,56(r2)
  80136c:	e0fff717 	ldw	r3,-36(fp)
  801370:	1805883a 	mov	r2,r3
  801374:	1085883a 	add	r2,r2,r2
  801378:	10c5883a 	add	r2,r2,r3
  80137c:	2085883a 	add	r2,r4,r2
  801380:	10800043 	ldbu	r2,1(r2)
  801384:	10803fcc 	andi	r2,r2,255
  801388:	1004c03a 	cmpne	r2,r2,zero
  80138c:	10001b1e 	bne	r2,zero,8013fc <parseBmp+0x344>
  801390:	e0bffe17 	ldw	r2,-8(fp)
  801394:	11000e17 	ldw	r4,56(r2)
  801398:	e0fff717 	ldw	r3,-36(fp)
  80139c:	1805883a 	mov	r2,r3
  8013a0:	1085883a 	add	r2,r2,r2
  8013a4:	10c5883a 	add	r2,r2,r3
  8013a8:	2085883a 	add	r2,r4,r2
  8013ac:	10800003 	ldbu	r2,0(r2)
  8013b0:	10803fcc 	andi	r2,r2,255
  8013b4:	10800798 	cmpnei	r2,r2,30
  8013b8:	1000101e 	bne	r2,zero,8013fc <parseBmp+0x344>
				(bmp->rgb + offset)->b = 0x0;
  8013bc:	e0bffe17 	ldw	r2,-8(fp)
  8013c0:	11000e17 	ldw	r4,56(r2)
  8013c4:	e0fff717 	ldw	r3,-36(fp)
  8013c8:	1805883a 	mov	r2,r3
  8013cc:	1085883a 	add	r2,r2,r2
  8013d0:	10c5883a 	add	r2,r2,r3
  8013d4:	2085883a 	add	r2,r4,r2
  8013d8:	10000085 	stb	zero,2(r2)
				(bmp->rgb + offset)->r = 0x0;
  8013dc:	e0bffe17 	ldw	r2,-8(fp)
  8013e0:	11000e17 	ldw	r4,56(r2)
  8013e4:	e0fff717 	ldw	r3,-36(fp)
  8013e8:	1805883a 	mov	r2,r3
  8013ec:	1085883a 	add	r2,r2,r2
  8013f0:	10c5883a 	add	r2,r2,r3
  8013f4:	2085883a 	add	r2,r4,r2
  8013f8:	10000005 	stb	zero,0(r2)
	pixels = bmp->infoheader.width * bmp->infoheader.height;
	bmp->rgb = malloc(BYTES_PER_PIXEL * pixels);

	for(i = 0; i < bmp->infoheader.height; i++) {
		rowOffset = i*bmp->infoheader.width;
		for(j = 0; j < bmp->infoheader.width; j++ ){
  8013fc:	e0bffb17 	ldw	r2,-20(fp)
  801400:	10800044 	addi	r2,r2,1
  801404:	e0bffb15 	stw	r2,-20(fp)
  801408:	e0bffe17 	ldw	r2,-8(fp)
  80140c:	10c00517 	ldw	r3,20(r2)
  801410:	e0bffb17 	ldw	r2,-20(fp)
  801414:	10ff9a16 	blt	r2,r3,801280 <parseBmp+0x1c8>
				(bmp->rgb + offset)->b = 0x0;
				(bmp->rgb + offset)->r = 0x0;
			}
		}

		if((BYTES_PER_PIXEL*bmp->infoheader.width) % 4 != 0) {
  801418:	e0bffe17 	ldw	r2,-8(fp)
  80141c:	10c00517 	ldw	r3,20(r2)
  801420:	1805883a 	mov	r2,r3
  801424:	1085883a 	add	r2,r2,r2
  801428:	10c5883a 	add	r2,r2,r3
  80142c:	108000cc 	andi	r2,r2,3
  801430:	1005003a 	cmpeq	r2,r2,zero
  801434:	1000221e 	bne	r2,zero,8014c0 <parseBmp+0x408>
			for (k = 0; k <  (4 - ((BYTES_PER_PIXEL*bmp->infoheader.width) % 4)); k++) {
  801438:	e03ffa15 	stw	zero,-24(fp)
  80143c:	00000506 	br	801454 <parseBmp+0x39c>
				readByte(fh);
  801440:	e13ff60f 	ldh	r4,-40(fp)
  801444:	08045c80 	call	8045c8 <readByte>
				(bmp->rgb + offset)->r = 0x0;
			}
		}

		if((BYTES_PER_PIXEL*bmp->infoheader.width) % 4 != 0) {
			for (k = 0; k <  (4 - ((BYTES_PER_PIXEL*bmp->infoheader.width) % 4)); k++) {
  801448:	e0bffa17 	ldw	r2,-24(fp)
  80144c:	10800044 	addi	r2,r2,1
  801450:	e0bffa15 	stw	r2,-24(fp)
  801454:	e0bffe17 	ldw	r2,-8(fp)
  801458:	10c00517 	ldw	r3,20(r2)
  80145c:	1805883a 	mov	r2,r3
  801460:	1085883a 	add	r2,r2,r2
  801464:	10c7883a 	add	r3,r2,r3
  801468:	00a00034 	movhi	r2,32768
  80146c:	108000c4 	addi	r2,r2,3
  801470:	1886703a 	and	r3,r3,r2
  801474:	e0ffff15 	stw	r3,-4(fp)
  801478:	e0ffff17 	ldw	r3,-4(fp)
  80147c:	1804403a 	cmpge	r2,r3,zero
  801480:	10000a1e 	bne	r2,zero,8014ac <parseBmp+0x3f4>
  801484:	e0bfff17 	ldw	r2,-4(fp)
  801488:	10bfffc4 	addi	r2,r2,-1
  80148c:	e0bfff15 	stw	r2,-4(fp)
  801490:	00bfff04 	movi	r2,-4
  801494:	e0ffff17 	ldw	r3,-4(fp)
  801498:	1886b03a 	or	r3,r3,r2
  80149c:	e0ffff15 	stw	r3,-4(fp)
  8014a0:	e0bfff17 	ldw	r2,-4(fp)
  8014a4:	10800044 	addi	r2,r2,1
  8014a8:	e0bfff15 	stw	r2,-4(fp)
  8014ac:	e0ffff17 	ldw	r3,-4(fp)
  8014b0:	00800104 	movi	r2,4
  8014b4:	10c7c83a 	sub	r3,r2,r3
  8014b8:	e0bffa17 	ldw	r2,-24(fp)
  8014bc:	10ffe016 	blt	r2,r3,801440 <parseBmp+0x388>
	bmp->infoheader.importantcolors = readDWord(fh);

	pixels = bmp->infoheader.width * bmp->infoheader.height;
	bmp->rgb = malloc(BYTES_PER_PIXEL * pixels);

	for(i = 0; i < bmp->infoheader.height; i++) {
  8014c0:	e0bffc17 	ldw	r2,-16(fp)
  8014c4:	10800044 	addi	r2,r2,1
  8014c8:	e0bffc15 	stw	r2,-16(fp)
  8014cc:	e0bffe17 	ldw	r2,-8(fp)
  8014d0:	10c00617 	ldw	r3,24(r2)
  8014d4:	e0bffc17 	ldw	r2,-16(fp)
  8014d8:	10ff6216 	blt	r2,r3,801264 <parseBmp+0x1ac>
				readByte(fh);
			}
		}
	}

	closeFile(fh);
  8014dc:	e13ff60f 	ldh	r4,-40(fp)
  8014e0:	08045980 	call	804598 <closeFile>
}
  8014e4:	e037883a 	mov	sp,fp
  8014e8:	dfc00217 	ldw	ra,8(sp)
  8014ec:	df000117 	ldw	fp,4(sp)
  8014f0:	dc000017 	ldw	r16,0(sp)
  8014f4:	dec00304 	addi	sp,sp,12
  8014f8:	f800283a 	ret

008014fc <parseBmps>:

void parseBmps() {
  8014fc:	defffe04 	addi	sp,sp,-8
  801500:	dfc00115 	stw	ra,4(sp)
  801504:	df000015 	stw	fp,0(sp)
  801508:	d839883a 	mov	fp,sp
	splashBmp = malloc(sizeof(BMP));
  80150c:	01000f04 	movi	r4,60
  801510:	08090f80 	call	8090f8 <malloc>
  801514:	d0a71815 	stw	r2,-25504(gp)
	sharkBmp = malloc(sizeof(BMP));
  801518:	01000f04 	movi	r4,60
  80151c:	08090f80 	call	8090f8 <malloc>
  801520:	d0a71715 	stw	r2,-25508(gp)
	playerBmp = malloc(sizeof(BMP));
  801524:	01000f04 	movi	r4,60
  801528:	08090f80 	call	8090f8 <malloc>
  80152c:	d0a71a15 	stw	r2,-25496(gp)

	parseBmp("splash.bmp", splashBmp);
  801530:	d1671817 	ldw	r5,-25504(gp)
  801534:	010020b4 	movhi	r4,130
  801538:	212e9704 	addi	r4,r4,-17828
  80153c:	08010b80 	call	8010b8 <parseBmp>
	parseBmp("shark.bmp", sharkBmp);
  801540:	d1671717 	ldw	r5,-25508(gp)
  801544:	010020b4 	movhi	r4,130
  801548:	212e9a04 	addi	r4,r4,-17816
  80154c:	08010b80 	call	8010b8 <parseBmp>
	parseBmp("player.bmp", playerBmp);
  801550:	d1671a17 	ldw	r5,-25496(gp)
  801554:	010020b4 	movhi	r4,130
  801558:	212e9d04 	addi	r4,r4,-17804
  80155c:	08010b80 	call	8010b8 <parseBmp>
}
  801560:	e037883a 	mov	sp,fp
  801564:	dfc00117 	ldw	ra,4(sp)
  801568:	df000017 	ldw	fp,0(sp)
  80156c:	dec00204 	addi	sp,sp,8
  801570:	f800283a 	ret

00801574 <freeBmps>:

void freeBmps(){
  801574:	defffe04 	addi	sp,sp,-8
  801578:	dfc00115 	stw	ra,4(sp)
  80157c:	df000015 	stw	fp,0(sp)
  801580:	d839883a 	mov	fp,sp
	free(playerBmp->rgb);
  801584:	d0a71a17 	ldw	r2,-25496(gp)
  801588:	11000e17 	ldw	r4,56(r2)
  80158c:	08090e40 	call	8090e4 <free>
	free(sharkBmp->rgb);
  801590:	d0a71717 	ldw	r2,-25508(gp)
  801594:	11000e17 	ldw	r4,56(r2)
  801598:	08090e40 	call	8090e4 <free>

	free(sharkBmp);
  80159c:	d1271717 	ldw	r4,-25508(gp)
  8015a0:	08090e40 	call	8090e4 <free>
	free(playerBmp);
  8015a4:	d1271a17 	ldw	r4,-25496(gp)
  8015a8:	08090e40 	call	8090e4 <free>
}
  8015ac:	e037883a 	mov	sp,fp
  8015b0:	dfc00117 	ldw	ra,4(sp)
  8015b4:	df000017 	ldw	fp,0(sp)
  8015b8:	dec00204 	addi	sp,sp,8
  8015bc:	f800283a 	ret

008015c0 <freeSplash>:

void freeSplash() {
  8015c0:	defffe04 	addi	sp,sp,-8
  8015c4:	dfc00115 	stw	ra,4(sp)
  8015c8:	df000015 	stw	fp,0(sp)
  8015cc:	d839883a 	mov	fp,sp
	free(splashBmp->rgb);
  8015d0:	d0a71817 	ldw	r2,-25504(gp)
  8015d4:	11000e17 	ldw	r4,56(r2)
  8015d8:	08090e40 	call	8090e4 <free>
	free(splashBmp);
  8015dc:	d1271817 	ldw	r4,-25504(gp)
  8015e0:	08090e40 	call	8090e4 <free>
}
  8015e4:	e037883a 	mov	sp,fp
  8015e8:	dfc00117 	ldw	ra,4(sp)
  8015ec:	df000017 	ldw	fp,0(sp)
  8015f0:	dec00204 	addi	sp,sp,8
  8015f4:	f800283a 	ret

008015f8 <drawBmp>:


void drawBmp (BMP *bmp, int x, int y) {
  8015f8:	defff804 	addi	sp,sp,-32
  8015fc:	dfc00715 	stw	ra,28(sp)
  801600:	df000615 	stw	fp,24(sp)
  801604:	df000604 	addi	fp,sp,24
  801608:	e13ffd15 	stw	r4,-12(fp)
  80160c:	e17ffe15 	stw	r5,-8(fp)
  801610:	e1bfff15 	stw	r6,-4(fp)
	int i,j;
	int color;

	for(i = 0; i < bmp->infoheader.height; i++) {
  801614:	e03ffc15 	stw	zero,-16(fp)
  801618:	00004906 	br	801740 <drawBmp+0x148>
		for(j = 0; j < bmp->infoheader.width; j++){
  80161c:	e03ffb15 	stw	zero,-20(fp)
  801620:	00004006 	br	801724 <drawBmp+0x12c>
			color = ((bmp->rgb + i*bmp->infoheader.width +j)->r << 11) | ((bmp->rgb + i*bmp->infoheader.width +j)->g << 5) | (bmp->rgb + i*bmp->infoheader.width +j)->b;
  801624:	e0bffd17 	ldw	r2,-12(fp)
  801628:	11000e17 	ldw	r4,56(r2)
  80162c:	e0bffd17 	ldw	r2,-12(fp)
  801630:	10c00517 	ldw	r3,20(r2)
  801634:	e0bffc17 	ldw	r2,-16(fp)
  801638:	1885383a 	mul	r2,r3,r2
  80163c:	1007883a 	mov	r3,r2
  801640:	e0bffb17 	ldw	r2,-20(fp)
  801644:	1887883a 	add	r3,r3,r2
  801648:	1805883a 	mov	r2,r3
  80164c:	1085883a 	add	r2,r2,r2
  801650:	10c5883a 	add	r2,r2,r3
  801654:	2085883a 	add	r2,r4,r2
  801658:	10800003 	ldbu	r2,0(r2)
  80165c:	10803fcc 	andi	r2,r2,255
  801660:	100892fa 	slli	r4,r2,11
  801664:	e0bffd17 	ldw	r2,-12(fp)
  801668:	11400e17 	ldw	r5,56(r2)
  80166c:	e0bffd17 	ldw	r2,-12(fp)
  801670:	10c00517 	ldw	r3,20(r2)
  801674:	e0bffc17 	ldw	r2,-16(fp)
  801678:	1885383a 	mul	r2,r3,r2
  80167c:	1007883a 	mov	r3,r2
  801680:	e0bffb17 	ldw	r2,-20(fp)
  801684:	1887883a 	add	r3,r3,r2
  801688:	1805883a 	mov	r2,r3
  80168c:	1085883a 	add	r2,r2,r2
  801690:	10c5883a 	add	r2,r2,r3
  801694:	2885883a 	add	r2,r5,r2
  801698:	10800043 	ldbu	r2,1(r2)
  80169c:	10803fcc 	andi	r2,r2,255
  8016a0:	1004917a 	slli	r2,r2,5
  8016a4:	2088b03a 	or	r4,r4,r2
  8016a8:	e0bffd17 	ldw	r2,-12(fp)
  8016ac:	11400e17 	ldw	r5,56(r2)
  8016b0:	e0bffd17 	ldw	r2,-12(fp)
  8016b4:	10c00517 	ldw	r3,20(r2)
  8016b8:	e0bffc17 	ldw	r2,-16(fp)
  8016bc:	1885383a 	mul	r2,r3,r2
  8016c0:	1007883a 	mov	r3,r2
  8016c4:	e0bffb17 	ldw	r2,-20(fp)
  8016c8:	1887883a 	add	r3,r3,r2
  8016cc:	1805883a 	mov	r2,r3
  8016d0:	1085883a 	add	r2,r2,r2
  8016d4:	10c5883a 	add	r2,r2,r3
  8016d8:	2885883a 	add	r2,r5,r2
  8016dc:	10800083 	ldbu	r2,2(r2)
  8016e0:	10803fcc 	andi	r2,r2,255
  8016e4:	2084b03a 	or	r2,r4,r2
  8016e8:	e0bffa15 	stw	r2,-24(fp)

			if(color == 0)
  8016ec:	e0bffa17 	ldw	r2,-24(fp)
  8016f0:	1005003a 	cmpeq	r2,r2,zero
  8016f4:	1000081e 	bne	r2,zero,801718 <drawBmp+0x120>
				continue;

			drawPixel(x + j, y + i, color);
  8016f8:	e0fffe17 	ldw	r3,-8(fp)
  8016fc:	e0bffb17 	ldw	r2,-20(fp)
  801700:	1889883a 	add	r4,r3,r2
  801704:	e0ffff17 	ldw	r3,-4(fp)
  801708:	e0bffc17 	ldw	r2,-16(fp)
  80170c:	188b883a 	add	r5,r3,r2
  801710:	e1bffa17 	ldw	r6,-24(fp)
  801714:	08053e40 	call	8053e4 <drawPixel>
void drawBmp (BMP *bmp, int x, int y) {
	int i,j;
	int color;

	for(i = 0; i < bmp->infoheader.height; i++) {
		for(j = 0; j < bmp->infoheader.width; j++){
  801718:	e0bffb17 	ldw	r2,-20(fp)
  80171c:	10800044 	addi	r2,r2,1
  801720:	e0bffb15 	stw	r2,-20(fp)
  801724:	e0bffd17 	ldw	r2,-12(fp)
  801728:	10c00517 	ldw	r3,20(r2)
  80172c:	e0bffb17 	ldw	r2,-20(fp)
  801730:	10ffbc16 	blt	r2,r3,801624 <drawBmp+0x2c>

void drawBmp (BMP *bmp, int x, int y) {
	int i,j;
	int color;

	for(i = 0; i < bmp->infoheader.height; i++) {
  801734:	e0bffc17 	ldw	r2,-16(fp)
  801738:	10800044 	addi	r2,r2,1
  80173c:	e0bffc15 	stw	r2,-16(fp)
  801740:	e0bffd17 	ldw	r2,-12(fp)
  801744:	10c00617 	ldw	r3,24(r2)
  801748:	e0bffc17 	ldw	r2,-16(fp)
  80174c:	10ffb316 	blt	r2,r3,80161c <drawBmp+0x24>
				continue;

			drawPixel(x + j, y + i, color);
		}
	}
}
  801750:	e037883a 	mov	sp,fp
  801754:	dfc00117 	ldw	ra,4(sp)
  801758:	df000017 	ldw	fp,0(sp)
  80175c:	dec00204 	addi	sp,sp,8
  801760:	f800283a 	ret

00801764 <eraseBmp>:

void eraseBmp (BMP *bmp, int x, int y) {
  801764:	defffa04 	addi	sp,sp,-24
  801768:	dfc00515 	stw	ra,20(sp)
  80176c:	df000415 	stw	fp,16(sp)
  801770:	df000404 	addi	fp,sp,16
  801774:	e13ffd15 	stw	r4,-12(fp)
  801778:	e17ffe15 	stw	r5,-8(fp)
  80177c:	e1bfff15 	stw	r6,-4(fp)
	drawBox(x, y, x  + bmp->infoheader.width, y + bmp->infoheader.height, 0);
  801780:	e0bffd17 	ldw	r2,-12(fp)
  801784:	10c00517 	ldw	r3,20(r2)
  801788:	e0bffe17 	ldw	r2,-8(fp)
  80178c:	188d883a 	add	r6,r3,r2
  801790:	e0bffd17 	ldw	r2,-12(fp)
  801794:	10c00617 	ldw	r3,24(r2)
  801798:	e0bfff17 	ldw	r2,-4(fp)
  80179c:	188f883a 	add	r7,r3,r2
  8017a0:	d8000015 	stw	zero,0(sp)
  8017a4:	e13ffe17 	ldw	r4,-8(fp)
  8017a8:	e17fff17 	ldw	r5,-4(fp)
  8017ac:	080552c0 	call	80552c <drawBox>
}
  8017b0:	e037883a 	mov	sp,fp
  8017b4:	dfc00117 	ldw	ra,4(sp)
  8017b8:	df000017 	ldw	fp,0(sp)
  8017bc:	dec00204 	addi	sp,sp,8
  8017c0:	f800283a 	ret

008017c4 <initBullets>:
#include "bullet.h"

Bullet *playerBulletList = NULL;
Bullet *sharkBulletList = NULL;

void initBullets() {
  8017c4:	defffe04 	addi	sp,sp,-8
  8017c8:	df000115 	stw	fp,4(sp)
  8017cc:	df000104 	addi	fp,sp,4
	int i = 0;
  8017d0:	e03fff15 	stw	zero,-4(fp)
	for (i = 0; i < NUM_BULLETS; i++) {
  8017d4:	e03fff15 	stw	zero,-4(fp)
  8017d8:	00001906 	br	801840 <initBullets+0x7c>
		bulletArray[i].type = NOTACTIVE;
  8017dc:	e0bfff17 	ldw	r2,-4(fp)
  8017e0:	00c020b4 	movhi	r3,130
  8017e4:	18c01a04 	addi	r3,r3,104
  8017e8:	10800724 	muli	r2,r2,28
  8017ec:	10c5883a 	add	r2,r2,r3
  8017f0:	10c00404 	addi	r3,r2,16
  8017f4:	00800084 	movi	r2,2
  8017f8:	18800015 	stw	r2,0(r3)
		bulletArray[i].next = NULL;
  8017fc:	e0bfff17 	ldw	r2,-4(fp)
  801800:	00c020b4 	movhi	r3,130
  801804:	18c01a04 	addi	r3,r3,104
  801808:	10800724 	muli	r2,r2,28
  80180c:	10c5883a 	add	r2,r2,r3
  801810:	10800504 	addi	r2,r2,20
  801814:	10000015 	stw	zero,0(r2)
		bulletArray[i].prev = NULL;
  801818:	e0bfff17 	ldw	r2,-4(fp)
  80181c:	00c020b4 	movhi	r3,130
  801820:	18c01a04 	addi	r3,r3,104
  801824:	10800724 	muli	r2,r2,28
  801828:	10c5883a 	add	r2,r2,r3
  80182c:	10800604 	addi	r2,r2,24
  801830:	10000015 	stw	zero,0(r2)
Bullet *playerBulletList = NULL;
Bullet *sharkBulletList = NULL;

void initBullets() {
	int i = 0;
	for (i = 0; i < NUM_BULLETS; i++) {
  801834:	e0bfff17 	ldw	r2,-4(fp)
  801838:	10800044 	addi	r2,r2,1
  80183c:	e0bfff15 	stw	r2,-4(fp)
  801840:	e0bfff17 	ldw	r2,-4(fp)
  801844:	10802010 	cmplti	r2,r2,128
  801848:	103fe41e 	bne	r2,zero,8017dc <initBullets+0x18>
		bulletArray[i].type = NOTACTIVE;
		bulletArray[i].next = NULL;
		bulletArray[i].prev = NULL;
	}
}
  80184c:	e037883a 	mov	sp,fp
  801850:	df000017 	ldw	fp,0(sp)
  801854:	dec00104 	addi	sp,sp,4
  801858:	f800283a 	ret

0080185c <createBullet>:

void createBullet(bullettype type, int x, int y) {
  80185c:	defff704 	addi	sp,sp,-36
  801860:	dfc00815 	stw	ra,32(sp)
  801864:	df000715 	stw	fp,28(sp)
  801868:	df000704 	addi	fp,sp,28
  80186c:	e13ffd15 	stw	r4,-12(fp)
  801870:	e17ffe15 	stw	r5,-8(fp)
  801874:	e1bfff15 	stw	r6,-4(fp)
	int index = 0;
  801878:	e03ffc15 	stw	zero,-16(fp)
	Bullet *activeBullet = NULL;
  80187c:	e03ffb15 	stw	zero,-20(fp)
	Bullet *newBullet = NULL;
  801880:	e03ffa15 	stw	zero,-24(fp)
	while (index < NUM_BULLETS) {
  801884:	00006706 	br	801a24 <createBullet+0x1c8>
		if (bulletArray[index].type == NOTACTIVE)	{
  801888:	e0bffc17 	ldw	r2,-16(fp)
  80188c:	00c020b4 	movhi	r3,130
  801890:	18c01a04 	addi	r3,r3,104
  801894:	10800724 	muli	r2,r2,28
  801898:	10c5883a 	add	r2,r2,r3
  80189c:	10800404 	addi	r2,r2,16
  8018a0:	10800017 	ldw	r2,0(r2)
  8018a4:	10800098 	cmpnei	r2,r2,2
  8018a8:	10004b1e 	bne	r2,zero,8019d8 <createBullet+0x17c>
			newBullet = &(bulletArray[index]);
  8018ac:	e0bffc17 	ldw	r2,-16(fp)
  8018b0:	10800724 	muli	r2,r2,28
  8018b4:	1007883a 	mov	r3,r2
  8018b8:	008020b4 	movhi	r2,130
  8018bc:	10801a04 	addi	r2,r2,104
  8018c0:	1885883a 	add	r2,r3,r2
  8018c4:	e0bffa15 	stw	r2,-24(fp)
			newBullet->x = x;
  8018c8:	e0fffa17 	ldw	r3,-24(fp)
  8018cc:	e0bffe17 	ldw	r2,-8(fp)
  8018d0:	18800015 	stw	r2,0(r3)
			newBullet->y = y;
  8018d4:	e0fffa17 	ldw	r3,-24(fp)
  8018d8:	e0bfff17 	ldw	r2,-4(fp)
  8018dc:	18800215 	stw	r2,8(r3)
			newBullet->prevX = x;
  8018e0:	e0fffa17 	ldw	r3,-24(fp)
  8018e4:	e0bffe17 	ldw	r2,-8(fp)
  8018e8:	18800115 	stw	r2,4(r3)
			newBullet->prevY = y;
  8018ec:	e0fffa17 	ldw	r3,-24(fp)
  8018f0:	e0bfff17 	ldw	r2,-4(fp)
  8018f4:	18800315 	stw	r2,12(r3)
			newBullet->type = type;
  8018f8:	e0fffa17 	ldw	r3,-24(fp)
  8018fc:	e0bffd17 	ldw	r2,-12(fp)
  801900:	18800415 	stw	r2,16(r3)
			newBullet->next = NULL;
  801904:	e0bffa17 	ldw	r2,-24(fp)
  801908:	10000515 	stw	zero,20(r2)
			newBullet->prev = NULL;
  80190c:	e0bffa17 	ldw	r2,-24(fp)
  801910:	10000615 	stw	zero,24(r2)

			if (activeBullet != NULL) {
  801914:	e0bffb17 	ldw	r2,-20(fp)
  801918:	1005003a 	cmpeq	r2,r2,zero
  80191c:	10002a1e 	bne	r2,zero,8019c8 <createBullet+0x16c>
				if (activeBullet->next != NULL) {
  801920:	e0bffb17 	ldw	r2,-20(fp)
  801924:	10800517 	ldw	r2,20(r2)
  801928:	1005003a 	cmpeq	r2,r2,zero
  80192c:	1000041e 	bne	r2,zero,801940 <createBullet+0xe4>
					(activeBullet->next)->prev = newBullet;
  801930:	e0bffb17 	ldw	r2,-20(fp)
  801934:	10c00517 	ldw	r3,20(r2)
  801938:	e0bffa17 	ldw	r2,-24(fp)
  80193c:	18800615 	stw	r2,24(r3)
				}
				newBullet->next = activeBullet->next;
  801940:	e0bffb17 	ldw	r2,-20(fp)
  801944:	10c00517 	ldw	r3,20(r2)
  801948:	e0bffa17 	ldw	r2,-24(fp)
  80194c:	10c00515 	stw	r3,20(r2)
				activeBullet->next = newBullet;
  801950:	e0fffb17 	ldw	r3,-20(fp)
  801954:	e0bffa17 	ldw	r2,-24(fp)
  801958:	18800515 	stw	r2,20(r3)
				newBullet->prev = activeBullet;
  80195c:	e0fffa17 	ldw	r3,-24(fp)
  801960:	e0bffb17 	ldw	r2,-20(fp)
  801964:	18800615 	stw	r2,24(r3)
  801968:	00003106 	br	801a30 <createBullet+0x1d4>
			} else {
				// First bullet of its type in the array
				// Need to see if there is another later in the array
				while (index < NUM_BULLETS) {
					if (bulletArray[index].type == type) {
  80196c:	e0bffc17 	ldw	r2,-16(fp)
  801970:	00c020b4 	movhi	r3,130
  801974:	18c01a04 	addi	r3,r3,104
  801978:	10800724 	muli	r2,r2,28
  80197c:	10c5883a 	add	r2,r2,r3
  801980:	10800404 	addi	r2,r2,16
  801984:	10c00017 	ldw	r3,0(r2)
  801988:	e0bffd17 	ldw	r2,-12(fp)
  80198c:	18800e1e 	bne	r3,r2,8019c8 <createBullet+0x16c>
						Bullet *cursor = &(bulletArray[index]);
  801990:	e0bffc17 	ldw	r2,-16(fp)
  801994:	10800724 	muli	r2,r2,28
  801998:	1007883a 	mov	r3,r2
  80199c:	008020b4 	movhi	r2,130
  8019a0:	10801a04 	addi	r2,r2,104
  8019a4:	1885883a 	add	r2,r3,r2
  8019a8:	e0bff915 	stw	r2,-28(fp)
						newBullet->next = cursor;
  8019ac:	e0fffa17 	ldw	r3,-24(fp)
  8019b0:	e0bff917 	ldw	r2,-28(fp)
  8019b4:	18800515 	stw	r2,20(r3)
						cursor->prev = newBullet;
  8019b8:	e0fff917 	ldw	r3,-28(fp)
  8019bc:	e0bffa17 	ldw	r2,-24(fp)
  8019c0:	18800615 	stw	r2,24(r3)
						break;
  8019c4:	00001a06 	br	801a30 <createBullet+0x1d4>
				activeBullet->next = newBullet;
				newBullet->prev = activeBullet;
			} else {
				// First bullet of its type in the array
				// Need to see if there is another later in the array
				while (index < NUM_BULLETS) {
  8019c8:	e0bffc17 	ldw	r2,-16(fp)
  8019cc:	10802010 	cmplti	r2,r2,128
  8019d0:	103fe61e 	bne	r2,zero,80196c <createBullet+0x110>
						break;
					}
				}
			}

			break;
  8019d4:	00001606 	br	801a30 <createBullet+0x1d4>
		} else if (bulletArray[index].type == type){
  8019d8:	e0bffc17 	ldw	r2,-16(fp)
  8019dc:	00c020b4 	movhi	r3,130
  8019e0:	18c01a04 	addi	r3,r3,104
  8019e4:	10800724 	muli	r2,r2,28
  8019e8:	10c5883a 	add	r2,r2,r3
  8019ec:	10800404 	addi	r2,r2,16
  8019f0:	10c00017 	ldw	r3,0(r2)
  8019f4:	e0bffd17 	ldw	r2,-12(fp)
  8019f8:	1880071e 	bne	r3,r2,801a18 <createBullet+0x1bc>
			activeBullet = &(bulletArray[index]);
  8019fc:	e0bffc17 	ldw	r2,-16(fp)
  801a00:	10800724 	muli	r2,r2,28
  801a04:	1007883a 	mov	r3,r2
  801a08:	008020b4 	movhi	r2,130
  801a0c:	10801a04 	addi	r2,r2,104
  801a10:	1885883a 	add	r2,r3,r2
  801a14:	e0bffb15 	stw	r2,-20(fp)
		}
		index++;
  801a18:	e0bffc17 	ldw	r2,-16(fp)
  801a1c:	10800044 	addi	r2,r2,1
  801a20:	e0bffc15 	stw	r2,-16(fp)

void createBullet(bullettype type, int x, int y) {
	int index = 0;
	Bullet *activeBullet = NULL;
	Bullet *newBullet = NULL;
	while (index < NUM_BULLETS) {
  801a24:	e0bffc17 	ldw	r2,-16(fp)
  801a28:	10802010 	cmplti	r2,r2,128
  801a2c:	103f961e 	bne	r2,zero,801888 <createBullet+0x2c>
			activeBullet = &(bulletArray[index]);
		}
		index++;
	}

	if (type == PLAYERBULLET) {
  801a30:	e0bffd17 	ldw	r2,-12(fp)
  801a34:	1004c03a 	cmpne	r2,r2,zero
  801a38:	10000a1e 	bne	r2,zero,801a64 <createBullet+0x208>
		if ((unsigned int)playerBulletList > (unsigned int)newBullet
  801a3c:	d0a71b17 	ldw	r2,-25492(gp)
  801a40:	1007883a 	mov	r3,r2
  801a44:	e0bffa17 	ldw	r2,-24(fp)
  801a48:	10c00336 	bltu	r2,r3,801a58 <createBullet+0x1fc>
  801a4c:	d0a71b17 	ldw	r2,-25492(gp)
  801a50:	1004c03a 	cmpne	r2,r2,zero
  801a54:	10000c1e 	bne	r2,zero,801a88 <createBullet+0x22c>
				|| playerBulletList == NULL) {
			playerBulletList = newBullet;
  801a58:	e0bffa17 	ldw	r2,-24(fp)
  801a5c:	d0a71b15 	stw	r2,-25492(gp)
  801a60:	00000906 	br	801a88 <createBullet+0x22c>
		}
	} else {
		if ((unsigned int)sharkBulletList > (unsigned int)newBullet
  801a64:	d0a71c17 	ldw	r2,-25488(gp)
  801a68:	1007883a 	mov	r3,r2
  801a6c:	e0bffa17 	ldw	r2,-24(fp)
  801a70:	10c00336 	bltu	r2,r3,801a80 <createBullet+0x224>
  801a74:	d0a71b17 	ldw	r2,-25492(gp)
  801a78:	1004c03a 	cmpne	r2,r2,zero
  801a7c:	1000021e 	bne	r2,zero,801a88 <createBullet+0x22c>
				|| playerBulletList == NULL) {
			sharkBulletList = newBullet;
  801a80:	e0bffa17 	ldw	r2,-24(fp)
  801a84:	d0a71c15 	stw	r2,-25488(gp)
		}
	}

	playLaser();
  801a88:	0800b2c0 	call	800b2c <playLaser>
}
  801a8c:	e037883a 	mov	sp,fp
  801a90:	dfc00117 	ldw	ra,4(sp)
  801a94:	df000017 	ldw	fp,0(sp)
  801a98:	dec00204 	addi	sp,sp,8
  801a9c:	f800283a 	ret

00801aa0 <moveAllBullets>:

void moveAllBullets() {
  801aa0:	defffd04 	addi	sp,sp,-12
  801aa4:	dfc00215 	stw	ra,8(sp)
  801aa8:	df000115 	stw	fp,4(sp)
  801aac:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801ab0:	e03fff15 	stw	zero,-4(fp)
  801ab4:	00002406 	br	801b48 <moveAllBullets+0xa8>
		if (bulletArray[i].type == PLAYERBULLET) {
  801ab8:	e0bfff17 	ldw	r2,-4(fp)
  801abc:	00c020b4 	movhi	r3,130
  801ac0:	18c01a04 	addi	r3,r3,104
  801ac4:	10800724 	muli	r2,r2,28
  801ac8:	10c5883a 	add	r2,r2,r3
  801acc:	10800404 	addi	r2,r2,16
  801ad0:	10800017 	ldw	r2,0(r2)
  801ad4:	1004c03a 	cmpne	r2,r2,zero
  801ad8:	1000081e 	bne	r2,zero,801afc <moveAllBullets+0x5c>
			moveBulletRight(&bulletArray[i]);
  801adc:	e0bfff17 	ldw	r2,-4(fp)
  801ae0:	10800724 	muli	r2,r2,28
  801ae4:	1007883a 	mov	r3,r2
  801ae8:	008020b4 	movhi	r2,130
  801aec:	10801a04 	addi	r2,r2,104
  801af0:	1889883a 	add	r4,r3,r2
  801af4:	0801d9c0 	call	801d9c <moveBulletRight>
  801af8:	00001006 	br	801b3c <moveAllBullets+0x9c>
		} else if (bulletArray[i].type == SHARKBULLET) {
  801afc:	e0bfff17 	ldw	r2,-4(fp)
  801b00:	00c020b4 	movhi	r3,130
  801b04:	18c01a04 	addi	r3,r3,104
  801b08:	10800724 	muli	r2,r2,28
  801b0c:	10c5883a 	add	r2,r2,r3
  801b10:	10800404 	addi	r2,r2,16
  801b14:	10800017 	ldw	r2,0(r2)
  801b18:	10800058 	cmpnei	r2,r2,1
  801b1c:	1000071e 	bne	r2,zero,801b3c <moveAllBullets+0x9c>
			moveBulletLeft(&bulletArray[i]);
  801b20:	e0bfff17 	ldw	r2,-4(fp)
  801b24:	10800724 	muli	r2,r2,28
  801b28:	1007883a 	mov	r3,r2
  801b2c:	008020b4 	movhi	r2,130
  801b30:	10801a04 	addi	r2,r2,104
  801b34:	1889883a 	add	r4,r3,r2
  801b38:	0801e980 	call	801e98 <moveBulletLeft>
	playLaser();
}

void moveAllBullets() {
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801b3c:	e0bfff17 	ldw	r2,-4(fp)
  801b40:	10800044 	addi	r2,r2,1
  801b44:	e0bfff15 	stw	r2,-4(fp)
  801b48:	e0bfff17 	ldw	r2,-4(fp)
  801b4c:	10802010 	cmplti	r2,r2,128
  801b50:	103fd91e 	bne	r2,zero,801ab8 <moveAllBullets+0x18>
			moveBulletRight(&bulletArray[i]);
		} else if (bulletArray[i].type == SHARKBULLET) {
			moveBulletLeft(&bulletArray[i]);
		}
	}
}
  801b54:	e037883a 	mov	sp,fp
  801b58:	dfc00117 	ldw	ra,4(sp)
  801b5c:	df000017 	ldw	fp,0(sp)
  801b60:	dec00204 	addi	sp,sp,8
  801b64:	f800283a 	ret

00801b68 <drawAllBullets>:

void drawAllBullets() {
  801b68:	defffd04 	addi	sp,sp,-12
  801b6c:	dfc00215 	stw	ra,8(sp)
  801b70:	df000115 	stw	fp,4(sp)
  801b74:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801b78:	e03fff15 	stw	zero,-4(fp)
  801b7c:	00001306 	br	801bcc <drawAllBullets+0x64>
		if (bulletArray[i].type != NOTACTIVE) {
  801b80:	e0bfff17 	ldw	r2,-4(fp)
  801b84:	00c020b4 	movhi	r3,130
  801b88:	18c01a04 	addi	r3,r3,104
  801b8c:	10800724 	muli	r2,r2,28
  801b90:	10c5883a 	add	r2,r2,r3
  801b94:	10800404 	addi	r2,r2,16
  801b98:	10800017 	ldw	r2,0(r2)
  801b9c:	108000a0 	cmpeqi	r2,r2,2
  801ba0:	1000071e 	bne	r2,zero,801bc0 <drawAllBullets+0x58>
			drawBullet(&bulletArray[i]);
  801ba4:	e0bfff17 	ldw	r2,-4(fp)
  801ba8:	10800724 	muli	r2,r2,28
  801bac:	1007883a 	mov	r3,r2
  801bb0:	008020b4 	movhi	r2,130
  801bb4:	10801a04 	addi	r2,r2,104
  801bb8:	1889883a 	add	r4,r3,r2
  801bbc:	0801c700 	call	801c70 <drawBullet>
	}
}

void drawAllBullets() {
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801bc0:	e0bfff17 	ldw	r2,-4(fp)
  801bc4:	10800044 	addi	r2,r2,1
  801bc8:	e0bfff15 	stw	r2,-4(fp)
  801bcc:	e0bfff17 	ldw	r2,-4(fp)
  801bd0:	10802010 	cmplti	r2,r2,128
  801bd4:	103fea1e 	bne	r2,zero,801b80 <drawAllBullets+0x18>
		if (bulletArray[i].type != NOTACTIVE) {
			drawBullet(&bulletArray[i]);
		}
	}
}
  801bd8:	e037883a 	mov	sp,fp
  801bdc:	dfc00117 	ldw	ra,4(sp)
  801be0:	df000017 	ldw	fp,0(sp)
  801be4:	dec00204 	addi	sp,sp,8
  801be8:	f800283a 	ret

00801bec <eraseAllBullets>:

void eraseAllBullets() {
  801bec:	defffd04 	addi	sp,sp,-12
  801bf0:	dfc00215 	stw	ra,8(sp)
  801bf4:	df000115 	stw	fp,4(sp)
  801bf8:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801bfc:	e03fff15 	stw	zero,-4(fp)
  801c00:	00001306 	br	801c50 <eraseAllBullets+0x64>
		if (bulletArray[i].type != NOTACTIVE) {
  801c04:	e0bfff17 	ldw	r2,-4(fp)
  801c08:	00c020b4 	movhi	r3,130
  801c0c:	18c01a04 	addi	r3,r3,104
  801c10:	10800724 	muli	r2,r2,28
  801c14:	10c5883a 	add	r2,r2,r3
  801c18:	10800404 	addi	r2,r2,16
  801c1c:	10800017 	ldw	r2,0(r2)
  801c20:	108000a0 	cmpeqi	r2,r2,2
  801c24:	1000071e 	bne	r2,zero,801c44 <eraseAllBullets+0x58>
			eraseBullet(&bulletArray[i]);
  801c28:	e0bfff17 	ldw	r2,-4(fp)
  801c2c:	10800724 	muli	r2,r2,28
  801c30:	1007883a 	mov	r3,r2
  801c34:	008020b4 	movhi	r2,130
  801c38:	10801a04 	addi	r2,r2,104
  801c3c:	1889883a 	add	r4,r3,r2
  801c40:	0801d180 	call	801d18 <eraseBullet>
	}
}

void eraseAllBullets() {
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801c44:	e0bfff17 	ldw	r2,-4(fp)
  801c48:	10800044 	addi	r2,r2,1
  801c4c:	e0bfff15 	stw	r2,-4(fp)
  801c50:	e0bfff17 	ldw	r2,-4(fp)
  801c54:	10802010 	cmplti	r2,r2,128
  801c58:	103fea1e 	bne	r2,zero,801c04 <eraseAllBullets+0x18>
		if (bulletArray[i].type != NOTACTIVE) {
			eraseBullet(&bulletArray[i]);
		}
	}
}
  801c5c:	e037883a 	mov	sp,fp
  801c60:	dfc00117 	ldw	ra,4(sp)
  801c64:	df000017 	ldw	fp,0(sp)
  801c68:	dec00204 	addi	sp,sp,8
  801c6c:	f800283a 	ret

00801c70 <drawBullet>:

void drawBullet(Bullet *bullet) {
  801c70:	defffa04 	addi	sp,sp,-24
  801c74:	dfc00515 	stw	ra,20(sp)
  801c78:	df000415 	stw	fp,16(sp)
  801c7c:	dc400315 	stw	r17,12(sp)
  801c80:	dc000215 	stw	r16,8(sp)
  801c84:	df000204 	addi	fp,sp,8
  801c88:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = 0; i < BULLET_LENGTH; i++) {
  801c8c:	e03ffe15 	stw	zero,-8(fp)
  801c90:	00001706 	br	801cf0 <drawBullet+0x80>
		if (bullet != NULL) {
  801c94:	e0bfff17 	ldw	r2,-4(fp)
  801c98:	1005003a 	cmpeq	r2,r2,zero
  801c9c:	10000e1e 	bne	r2,zero,801cd8 <drawBullet+0x68>
			drawPixel(bullet->x + i, bullet->y, convert24BitRgbTo16(0xFF000C));
  801ca0:	e0bfff17 	ldw	r2,-4(fp)
  801ca4:	10c00017 	ldw	r3,0(r2)
  801ca8:	e0bffe17 	ldw	r2,-8(fp)
  801cac:	18a3883a 	add	r17,r3,r2
  801cb0:	e0bfff17 	ldw	r2,-4(fp)
  801cb4:	14000217 	ldw	r16,8(r2)
  801cb8:	01003ff4 	movhi	r4,255
  801cbc:	21000304 	addi	r4,r4,12
  801cc0:	080558c0 	call	80558c <convert24BitRgbTo16>
  801cc4:	100d883a 	mov	r6,r2
  801cc8:	8809883a 	mov	r4,r17
  801ccc:	800b883a 	mov	r5,r16
  801cd0:	08053e40 	call	8053e4 <drawPixel>
  801cd4:	00000306 	br	801ce4 <drawBullet+0x74>
		} else {
			printf("Attempt to draw null bullet.\n");
  801cd8:	010020b4 	movhi	r4,130
  801cdc:	212ea004 	addi	r4,r4,-17792
  801ce0:	08099640 	call	809964 <puts>
	}
}

void drawBullet(Bullet *bullet) {
	int i;
	for (i = 0; i < BULLET_LENGTH; i++) {
  801ce4:	e0bffe17 	ldw	r2,-8(fp)
  801ce8:	10800044 	addi	r2,r2,1
  801cec:	e0bffe15 	stw	r2,-8(fp)
  801cf0:	e0bffe17 	ldw	r2,-8(fp)
  801cf4:	108000d0 	cmplti	r2,r2,3
  801cf8:	103fe61e 	bne	r2,zero,801c94 <drawBullet+0x24>
			drawPixel(bullet->x + i, bullet->y, convert24BitRgbTo16(0xFF000C));
		} else {
			printf("Attempt to draw null bullet.\n");
		}
	}
}
  801cfc:	e037883a 	mov	sp,fp
  801d00:	dfc00317 	ldw	ra,12(sp)
  801d04:	df000217 	ldw	fp,8(sp)
  801d08:	dc400117 	ldw	r17,4(sp)
  801d0c:	dc000017 	ldw	r16,0(sp)
  801d10:	dec00404 	addi	sp,sp,16
  801d14:	f800283a 	ret

00801d18 <eraseBullet>:

void eraseBullet(Bullet *bullet) {
  801d18:	defffc04 	addi	sp,sp,-16
  801d1c:	dfc00315 	stw	ra,12(sp)
  801d20:	df000215 	stw	fp,8(sp)
  801d24:	df000204 	addi	fp,sp,8
  801d28:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = 0; i < BULLET_LENGTH; i++) {
  801d2c:	e03ffe15 	stw	zero,-8(fp)
  801d30:	00001206 	br	801d7c <eraseBullet+0x64>
		if (bullet != NULL) {
  801d34:	e0bfff17 	ldw	r2,-4(fp)
  801d38:	1005003a 	cmpeq	r2,r2,zero
  801d3c:	1000091e 	bne	r2,zero,801d64 <eraseBullet+0x4c>
			drawPixel(bullet->prevX + i, bullet->prevY, 0x0000);
  801d40:	e0bfff17 	ldw	r2,-4(fp)
  801d44:	10c00117 	ldw	r3,4(r2)
  801d48:	e0bffe17 	ldw	r2,-8(fp)
  801d4c:	1889883a 	add	r4,r3,r2
  801d50:	e0bfff17 	ldw	r2,-4(fp)
  801d54:	11400317 	ldw	r5,12(r2)
  801d58:	000d883a 	mov	r6,zero
  801d5c:	08053e40 	call	8053e4 <drawPixel>
  801d60:	00000306 	br	801d70 <eraseBullet+0x58>
		} else {
			printf("Attempt to draw null bullet.\n");
  801d64:	010020b4 	movhi	r4,130
  801d68:	212ea004 	addi	r4,r4,-17792
  801d6c:	08099640 	call	809964 <puts>
	}
}

void eraseBullet(Bullet *bullet) {
	int i;
	for (i = 0; i < BULLET_LENGTH; i++) {
  801d70:	e0bffe17 	ldw	r2,-8(fp)
  801d74:	10800044 	addi	r2,r2,1
  801d78:	e0bffe15 	stw	r2,-8(fp)
  801d7c:	e0bffe17 	ldw	r2,-8(fp)
  801d80:	108000d0 	cmplti	r2,r2,3
  801d84:	103feb1e 	bne	r2,zero,801d34 <eraseBullet+0x1c>
			drawPixel(bullet->prevX + i, bullet->prevY, 0x0000);
		} else {
			printf("Attempt to draw null bullet.\n");
		}
	}
}
  801d88:	e037883a 	mov	sp,fp
  801d8c:	dfc00117 	ldw	ra,4(sp)
  801d90:	df000017 	ldw	fp,0(sp)
  801d94:	dec00204 	addi	sp,sp,8
  801d98:	f800283a 	ret

00801d9c <moveBulletRight>:

void moveBulletRight(Bullet *bullet) {
  801d9c:	defffb04 	addi	sp,sp,-20
  801da0:	dfc00415 	stw	ra,16(sp)
  801da4:	df000315 	stw	fp,12(sp)
  801da8:	df000304 	addi	fp,sp,12
  801dac:	e13fff15 	stw	r4,-4(fp)
	if (bullet == NULL) {
  801db0:	e0bfff17 	ldw	r2,-4(fp)
  801db4:	1004c03a 	cmpne	r2,r2,zero
  801db8:	1000041e 	bne	r2,zero,801dcc <moveBulletRight+0x30>
		printf("Attempt to move null bullet right.\n");
  801dbc:	010020b4 	movhi	r4,130
  801dc0:	212ea804 	addi	r4,r4,-17760
  801dc4:	08099640 	call	809964 <puts>
		return;
  801dc8:	00002e06 	br	801e84 <moveBulletRight+0xe8>
	}

	bullet->prevX = bullet->x;
  801dcc:	e0bfff17 	ldw	r2,-4(fp)
  801dd0:	10c00017 	ldw	r3,0(r2)
  801dd4:	e0bfff17 	ldw	r2,-4(fp)
  801dd8:	10c00115 	stw	r3,4(r2)
	bullet->prevY = bullet->y;
  801ddc:	e0bfff17 	ldw	r2,-4(fp)
  801de0:	10c00217 	ldw	r3,8(r2)
  801de4:	e0bfff17 	ldw	r2,-4(fp)
  801de8:	10c00315 	stw	r3,12(r2)

	bullet->x = bullet->x + 2;
  801dec:	e0bfff17 	ldw	r2,-4(fp)
  801df0:	10800017 	ldw	r2,0(r2)
  801df4:	10c00084 	addi	r3,r2,2
  801df8:	e0bfff17 	ldw	r2,-4(fp)
  801dfc:	10c00015 	stw	r3,0(r2)

	if ((bullet->x >= SCREEN_WIDTH) || (bullet->x <= -BULLET_LENGTH - 1)) {
  801e00:	e0bfff17 	ldw	r2,-4(fp)
  801e04:	10800017 	ldw	r2,0(r2)
  801e08:	10805508 	cmpgei	r2,r2,340
  801e0c:	1000041e 	bne	r2,zero,801e20 <moveBulletRight+0x84>
  801e10:	e0bfff17 	ldw	r2,-4(fp)
  801e14:	10800017 	ldw	r2,0(r2)
  801e18:	10bfff48 	cmpgei	r2,r2,-3
  801e1c:	1000191e 	bne	r2,zero,801e84 <moveBulletRight+0xe8>
		bullet->type = NOTACTIVE;
  801e20:	e0ffff17 	ldw	r3,-4(fp)
  801e24:	00800084 	movi	r2,2
  801e28:	18800415 	stw	r2,16(r3)
		Bullet *nextBullet = bullet->next;
  801e2c:	e0bfff17 	ldw	r2,-4(fp)
  801e30:	10800517 	ldw	r2,20(r2)
  801e34:	e0bffe15 	stw	r2,-8(fp)
		Bullet *prevBullet = bullet->prev;
  801e38:	e0bfff17 	ldw	r2,-4(fp)
  801e3c:	10800617 	ldw	r2,24(r2)
  801e40:	e0bffd15 	stw	r2,-12(fp)
		bullet->next = NULL;
  801e44:	e0bfff17 	ldw	r2,-4(fp)
  801e48:	10000515 	stw	zero,20(r2)
		bullet->prev = NULL;
  801e4c:	e0bfff17 	ldw	r2,-4(fp)
  801e50:	10000615 	stw	zero,24(r2)

		if (nextBullet != NULL) {
  801e54:	e0bffe17 	ldw	r2,-8(fp)
  801e58:	1005003a 	cmpeq	r2,r2,zero
  801e5c:	1000031e 	bne	r2,zero,801e6c <moveBulletRight+0xd0>
			nextBullet->prev = prevBullet;
  801e60:	e0fffe17 	ldw	r3,-8(fp)
  801e64:	e0bffd17 	ldw	r2,-12(fp)
  801e68:	18800615 	stw	r2,24(r3)
		}
		if (prevBullet != NULL) {
  801e6c:	e0bffd17 	ldw	r2,-12(fp)
  801e70:	1005003a 	cmpeq	r2,r2,zero
  801e74:	1000031e 	bne	r2,zero,801e84 <moveBulletRight+0xe8>
			prevBullet->next = nextBullet;
  801e78:	e0fffd17 	ldw	r3,-12(fp)
  801e7c:	e0bffe17 	ldw	r2,-8(fp)
  801e80:	18800515 	stw	r2,20(r3)
		}
	}
}
  801e84:	e037883a 	mov	sp,fp
  801e88:	dfc00117 	ldw	ra,4(sp)
  801e8c:	df000017 	ldw	fp,0(sp)
  801e90:	dec00204 	addi	sp,sp,8
  801e94:	f800283a 	ret

00801e98 <moveBulletLeft>:

void moveBulletLeft(Bullet *bullet) {
  801e98:	defffb04 	addi	sp,sp,-20
  801e9c:	dfc00415 	stw	ra,16(sp)
  801ea0:	df000315 	stw	fp,12(sp)
  801ea4:	df000304 	addi	fp,sp,12
  801ea8:	e13fff15 	stw	r4,-4(fp)
	if (bullet == NULL) {
  801eac:	e0bfff17 	ldw	r2,-4(fp)
  801eb0:	1004c03a 	cmpne	r2,r2,zero
  801eb4:	1000041e 	bne	r2,zero,801ec8 <moveBulletLeft+0x30>
		printf("Attempt to move null bullet left.\n");
  801eb8:	010020b4 	movhi	r4,130
  801ebc:	212eb104 	addi	r4,r4,-17724
  801ec0:	08099640 	call	809964 <puts>
		return;
  801ec4:	00002e06 	br	801f80 <moveBulletLeft+0xe8>
	}

	bullet->prevX = bullet->x;
  801ec8:	e0bfff17 	ldw	r2,-4(fp)
  801ecc:	10c00017 	ldw	r3,0(r2)
  801ed0:	e0bfff17 	ldw	r2,-4(fp)
  801ed4:	10c00115 	stw	r3,4(r2)
	bullet->prevY = bullet->y;
  801ed8:	e0bfff17 	ldw	r2,-4(fp)
  801edc:	10c00217 	ldw	r3,8(r2)
  801ee0:	e0bfff17 	ldw	r2,-4(fp)
  801ee4:	10c00315 	stw	r3,12(r2)

	bullet->x = bullet->x - 2;
  801ee8:	e0bfff17 	ldw	r2,-4(fp)
  801eec:	10800017 	ldw	r2,0(r2)
  801ef0:	10ffff84 	addi	r3,r2,-2
  801ef4:	e0bfff17 	ldw	r2,-4(fp)
  801ef8:	10c00015 	stw	r3,0(r2)

	if ((bullet->x >= SCREEN_WIDTH) || (bullet->x <= -BULLET_LENGTH - 1)) {
  801efc:	e0bfff17 	ldw	r2,-4(fp)
  801f00:	10800017 	ldw	r2,0(r2)
  801f04:	10805508 	cmpgei	r2,r2,340
  801f08:	1000041e 	bne	r2,zero,801f1c <moveBulletLeft+0x84>
  801f0c:	e0bfff17 	ldw	r2,-4(fp)
  801f10:	10800017 	ldw	r2,0(r2)
  801f14:	10bfff48 	cmpgei	r2,r2,-3
  801f18:	1000191e 	bne	r2,zero,801f80 <moveBulletLeft+0xe8>
		bullet->type = NOTACTIVE;
  801f1c:	e0ffff17 	ldw	r3,-4(fp)
  801f20:	00800084 	movi	r2,2
  801f24:	18800415 	stw	r2,16(r3)
		Bullet *nextBullet = bullet->next;
  801f28:	e0bfff17 	ldw	r2,-4(fp)
  801f2c:	10800517 	ldw	r2,20(r2)
  801f30:	e0bffe15 	stw	r2,-8(fp)
		Bullet *prevBullet = bullet->prev;
  801f34:	e0bfff17 	ldw	r2,-4(fp)
  801f38:	10800617 	ldw	r2,24(r2)
  801f3c:	e0bffd15 	stw	r2,-12(fp)
		bullet->next = NULL;
  801f40:	e0bfff17 	ldw	r2,-4(fp)
  801f44:	10000515 	stw	zero,20(r2)
		bullet->prev = NULL;
  801f48:	e0bfff17 	ldw	r2,-4(fp)
  801f4c:	10000615 	stw	zero,24(r2)

		if (nextBullet != NULL) {
  801f50:	e0bffe17 	ldw	r2,-8(fp)
  801f54:	1005003a 	cmpeq	r2,r2,zero
  801f58:	1000031e 	bne	r2,zero,801f68 <moveBulletLeft+0xd0>
			nextBullet->prev = prevBullet;
  801f5c:	e0fffe17 	ldw	r3,-8(fp)
  801f60:	e0bffd17 	ldw	r2,-12(fp)
  801f64:	18800615 	stw	r2,24(r3)
		}
		if (prevBullet != NULL) {
  801f68:	e0bffd17 	ldw	r2,-12(fp)
  801f6c:	1005003a 	cmpeq	r2,r2,zero
  801f70:	1000031e 	bne	r2,zero,801f80 <moveBulletLeft+0xe8>
			prevBullet->next = nextBullet;
  801f74:	e0fffd17 	ldw	r3,-12(fp)
  801f78:	e0bffe17 	ldw	r2,-8(fp)
  801f7c:	18800515 	stw	r2,20(r3)
		}
	}
}
  801f80:	e037883a 	mov	sp,fp
  801f84:	dfc00117 	ldw	ra,4(sp)
  801f88:	df000017 	ldw	fp,0(sp)
  801f8c:	dec00204 	addi	sp,sp,8
  801f90:	f800283a 	ret

00801f94 <findSharkIfHit>:
#include "collision.h"

#define TRUE 1
#define FALSE 0

Shark *findSharkIfHit(Bullet *bullet) {
  801f94:	defffa04 	addi	sp,sp,-24
  801f98:	dfc00515 	stw	ra,20(sp)
  801f9c:	df000415 	stw	fp,16(sp)
  801fa0:	df000404 	addi	fp,sp,16
  801fa4:	e13ffe15 	stw	r4,-8(fp)
	Shark *cursor = sharkList;
  801fa8:	008020b4 	movhi	r2,130
  801fac:	10bf6204 	addi	r2,r2,-632
  801fb0:	10800017 	ldw	r2,0(r2)
  801fb4:	e0bffd15 	stw	r2,-12(fp)
	int i = 0;
  801fb8:	e03ffc15 	stw	zero,-16(fp)
	while (cursor != NULL
  801fbc:	00000e06 	br	801ff8 <findSharkIfHit+0x64>
			&& i < sharkCount) {
		if (isBulletCollidingWithShark(cursor, bullet) == TRUE) {
  801fc0:	e13ffd17 	ldw	r4,-12(fp)
  801fc4:	e17ffe17 	ldw	r5,-8(fp)
  801fc8:	08020340 	call	802034 <isBulletCollidingWithShark>
  801fcc:	10800058 	cmpnei	r2,r2,1
  801fd0:	1000031e 	bne	r2,zero,801fe0 <findSharkIfHit+0x4c>
			return cursor;
  801fd4:	e0bffd17 	ldw	r2,-12(fp)
  801fd8:	e0bfff15 	stw	r2,-4(fp)
  801fdc:	00000f06 	br	80201c <findSharkIfHit+0x88>
		}
		cursor = cursor->next;
  801fe0:	e0bffd17 	ldw	r2,-12(fp)
  801fe4:	10800617 	ldw	r2,24(r2)
  801fe8:	e0bffd15 	stw	r2,-12(fp)
		i++;
  801fec:	e0bffc17 	ldw	r2,-16(fp)
  801ff0:	10800044 	addi	r2,r2,1
  801ff4:	e0bffc15 	stw	r2,-16(fp)
#define FALSE 0

Shark *findSharkIfHit(Bullet *bullet) {
	Shark *cursor = sharkList;
	int i = 0;
	while (cursor != NULL
  801ff8:	e0bffd17 	ldw	r2,-12(fp)
  801ffc:	1005003a 	cmpeq	r2,r2,zero
  802000:	1000051e 	bne	r2,zero,802018 <findSharkIfHit+0x84>
  802004:	e0bffc17 	ldw	r2,-16(fp)
  802008:	00c020b4 	movhi	r3,130
  80200c:	18ff6404 	addi	r3,r3,-624
  802010:	18c00017 	ldw	r3,0(r3)
  802014:	10ffea36 	bltu	r2,r3,801fc0 <findSharkIfHit+0x2c>
			return cursor;
		}
		cursor = cursor->next;
		i++;
	}
	return NULL;
  802018:	e03fff15 	stw	zero,-4(fp)
  80201c:	e0bfff17 	ldw	r2,-4(fp)
}
  802020:	e037883a 	mov	sp,fp
  802024:	dfc00117 	ldw	ra,4(sp)
  802028:	df000017 	ldw	fp,0(sp)
  80202c:	dec00204 	addi	sp,sp,8
  802030:	f800283a 	ret

00802034 <isBulletCollidingWithShark>:

int isBulletCollidingWithShark(Shark *shark, Bullet *bullet) {
  802034:	defffb04 	addi	sp,sp,-20
  802038:	dfc00415 	stw	ra,16(sp)
  80203c:	df000315 	stw	fp,12(sp)
  802040:	df000304 	addi	fp,sp,12
  802044:	e13ffd15 	stw	r4,-12(fp)
  802048:	e17ffe15 	stw	r5,-8(fp)
	if (bullet == NULL || shark == NULL) {
  80204c:	e0bffe17 	ldw	r2,-8(fp)
  802050:	1005003a 	cmpeq	r2,r2,zero
  802054:	1000031e 	bne	r2,zero,802064 <isBulletCollidingWithShark+0x30>
  802058:	e0bffd17 	ldw	r2,-12(fp)
  80205c:	1004c03a 	cmpne	r2,r2,zero
  802060:	1000051e 	bne	r2,zero,802078 <isBulletCollidingWithShark+0x44>
		printf("Attempt to do player/bullet collision with null member.\n");
  802064:	010020b4 	movhi	r4,130
  802068:	212eba04 	addi	r4,r4,-17688
  80206c:	08099640 	call	809964 <puts>
		return FALSE;
  802070:	e03fff15 	stw	zero,-4(fp)
  802074:	00002006 	br	8020f8 <isBulletCollidingWithShark+0xc4>
	}

	if (bullet->type == SHARKBULLET) {
  802078:	e0bffe17 	ldw	r2,-8(fp)
  80207c:	10800417 	ldw	r2,16(r2)
  802080:	10800058 	cmpnei	r2,r2,1
  802084:	1000021e 	bne	r2,zero,802090 <isBulletCollidingWithShark+0x5c>
		// No friendly fire
		return FALSE;
  802088:	e03fff15 	stw	zero,-4(fp)
  80208c:	00001a06 	br	8020f8 <isBulletCollidingWithShark+0xc4>
	}
	
	if (bullet->x >= shark->x &&
  802090:	e0bffe17 	ldw	r2,-8(fp)
  802094:	10c00017 	ldw	r3,0(r2)
  802098:	e0bffd17 	ldw	r2,-12(fp)
  80209c:	10800017 	ldw	r2,0(r2)
  8020a0:	18801416 	blt	r3,r2,8020f4 <isBulletCollidingWithShark+0xc0>
  8020a4:	e0bffe17 	ldw	r2,-8(fp)
  8020a8:	10c00017 	ldw	r3,0(r2)
  8020ac:	e0bffd17 	ldw	r2,-12(fp)
  8020b0:	10800017 	ldw	r2,0(r2)
  8020b4:	10800944 	addi	r2,r2,37
  8020b8:	10c00e16 	blt	r2,r3,8020f4 <isBulletCollidingWithShark+0xc0>
		bullet->x <= shark->x + SHARK_WIDTH) {
		// Have x region correct
		//printf("x-hit\n");
		
		if (bullet->y >= shark->y &&
  8020bc:	e0bffe17 	ldw	r2,-8(fp)
  8020c0:	10c00217 	ldw	r3,8(r2)
  8020c4:	e0bffd17 	ldw	r2,-12(fp)
  8020c8:	10800217 	ldw	r2,8(r2)
  8020cc:	18800916 	blt	r3,r2,8020f4 <isBulletCollidingWithShark+0xc0>
  8020d0:	e0bffe17 	ldw	r2,-8(fp)
  8020d4:	10c00217 	ldw	r3,8(r2)
  8020d8:	e0bffd17 	ldw	r2,-12(fp)
  8020dc:	10800217 	ldw	r2,8(r2)
  8020e0:	10800504 	addi	r2,r2,20
  8020e4:	10c00316 	blt	r2,r3,8020f4 <isBulletCollidingWithShark+0xc0>
			bullet->y <= shark->y + SHARK_HEIGHT) {
			// Have y region correct
			//printf("y-hit\n");
			return TRUE;
  8020e8:	00800044 	movi	r2,1
  8020ec:	e0bfff15 	stw	r2,-4(fp)
  8020f0:	00000106 	br	8020f8 <isBulletCollidingWithShark+0xc4>
		}
	}
	return FALSE;
  8020f4:	e03fff15 	stw	zero,-4(fp)
  8020f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8020fc:	e037883a 	mov	sp,fp
  802100:	dfc00117 	ldw	ra,4(sp)
  802104:	df000017 	ldw	fp,0(sp)
  802108:	dec00204 	addi	sp,sp,8
  80210c:	f800283a 	ret

00802110 <isBulletCollidingWithPlayer>:

int isBulletCollidingWithPlayer(Player *player, Bullet *bullet) {
  802110:	defffb04 	addi	sp,sp,-20
  802114:	dfc00415 	stw	ra,16(sp)
  802118:	df000315 	stw	fp,12(sp)
  80211c:	df000304 	addi	fp,sp,12
  802120:	e13ffd15 	stw	r4,-12(fp)
  802124:	e17ffe15 	stw	r5,-8(fp)
	if (player == NULL || bullet == NULL) {
  802128:	e0bffd17 	ldw	r2,-12(fp)
  80212c:	1005003a 	cmpeq	r2,r2,zero
  802130:	1000031e 	bne	r2,zero,802140 <isBulletCollidingWithPlayer+0x30>
  802134:	e0bffe17 	ldw	r2,-8(fp)
  802138:	1004c03a 	cmpne	r2,r2,zero
  80213c:	1000051e 	bne	r2,zero,802154 <isBulletCollidingWithPlayer+0x44>
		printf("Attempt to do player/bullet collision with null member.\n");
  802140:	010020b4 	movhi	r4,130
  802144:	212eba04 	addi	r4,r4,-17688
  802148:	08099640 	call	809964 <puts>
		return FALSE;
  80214c:	e03fff15 	stw	zero,-4(fp)
  802150:	00002006 	br	8021d4 <isBulletCollidingWithPlayer+0xc4>
	}

	if (bullet->type == PLAYERBULLET) {
  802154:	e0bffe17 	ldw	r2,-8(fp)
  802158:	10800417 	ldw	r2,16(r2)
  80215c:	1004c03a 	cmpne	r2,r2,zero
  802160:	1000021e 	bne	r2,zero,80216c <isBulletCollidingWithPlayer+0x5c>
		// No friendly fire
		return FALSE;
  802164:	e03fff15 	stw	zero,-4(fp)
  802168:	00001a06 	br	8021d4 <isBulletCollidingWithPlayer+0xc4>
	}

	if (bullet->x >= player->x &&
  80216c:	e0bffe17 	ldw	r2,-8(fp)
  802170:	10c00017 	ldw	r3,0(r2)
  802174:	e0bffd17 	ldw	r2,-12(fp)
  802178:	10800017 	ldw	r2,0(r2)
  80217c:	18801416 	blt	r3,r2,8021d0 <isBulletCollidingWithPlayer+0xc0>
  802180:	e0bffe17 	ldw	r2,-8(fp)
  802184:	10c00017 	ldw	r3,0(r2)
  802188:	e0bffd17 	ldw	r2,-12(fp)
  80218c:	10800017 	ldw	r2,0(r2)
  802190:	10800784 	addi	r2,r2,30
  802194:	10c00e16 	blt	r2,r3,8021d0 <isBulletCollidingWithPlayer+0xc0>
		bullet->x <= player->x + PLAYER_WIDTH) {
		// Have x region
		
		if (bullet->y >= player->y &&
  802198:	e0bffe17 	ldw	r2,-8(fp)
  80219c:	10c00217 	ldw	r3,8(r2)
  8021a0:	e0bffd17 	ldw	r2,-12(fp)
  8021a4:	10800217 	ldw	r2,8(r2)
  8021a8:	18800916 	blt	r3,r2,8021d0 <isBulletCollidingWithPlayer+0xc0>
  8021ac:	e0bffe17 	ldw	r2,-8(fp)
  8021b0:	10c00217 	ldw	r3,8(r2)
  8021b4:	e0bffd17 	ldw	r2,-12(fp)
  8021b8:	10800217 	ldw	r2,8(r2)
  8021bc:	10800784 	addi	r2,r2,30
  8021c0:	10c00316 	blt	r2,r3,8021d0 <isBulletCollidingWithPlayer+0xc0>
			bullet->y <= player->y + PLAYER_HEIGHT) {
			// Have y
			
			return TRUE;
  8021c4:	00800044 	movi	r2,1
  8021c8:	e0bfff15 	stw	r2,-4(fp)
  8021cc:	00000106 	br	8021d4 <isBulletCollidingWithPlayer+0xc4>
		}
	}
	return FALSE;
  8021d0:	e03fff15 	stw	zero,-4(fp)
  8021d4:	e0bfff17 	ldw	r2,-4(fp)
}
  8021d8:	e037883a 	mov	sp,fp
  8021dc:	dfc00117 	ldw	ra,4(sp)
  8021e0:	df000017 	ldw	fp,0(sp)
  8021e4:	dec00204 	addi	sp,sp,8
  8021e8:	f800283a 	ret

008021ec <doSharkBulletCollision>:

void doSharkBulletCollision(void) {
  8021ec:	defffb04 	addi	sp,sp,-20
  8021f0:	dfc00415 	stw	ra,16(sp)
  8021f4:	df000315 	stw	fp,12(sp)
  8021f8:	df000304 	addi	fp,sp,12
	Bullet *bulletCursor = playerBulletList;
  8021fc:	008020b4 	movhi	r2,130
  802200:	10bf5004 	addi	r2,r2,-704
  802204:	10800017 	ldw	r2,0(r2)
  802208:	e0bfff15 	stw	r2,-4(fp)
	Shark *toKill = NULL;
  80220c:	e03ffe15 	stw	zero,-8(fp)
	int i = 0;
  802210:	e03ffd15 	stw	zero,-12(fp)
	while (bulletCursor != NULL
  802214:	00000e06 	br	802250 <doSharkBulletCollision+0x64>
			&& bulletCursor->type == PLAYERBULLET
			&& i < NUM_BULLETS) {
		toKill = findSharkIfHit(bulletCursor);
  802218:	e13fff17 	ldw	r4,-4(fp)
  80221c:	0801f940 	call	801f94 <findSharkIfHit>
  802220:	e0bffe15 	stw	r2,-8(fp)
		if (toKill != NULL) {
  802224:	e0bffe17 	ldw	r2,-8(fp)
  802228:	1005003a 	cmpeq	r2,r2,zero
  80222c:	1000021e 	bne	r2,zero,802238 <doSharkBulletCollision+0x4c>
			killShark(toKill);
  802230:	e13ffe17 	ldw	r4,-8(fp)
  802234:	0804d180 	call	804d18 <killShark>
		}
		bulletCursor = bulletCursor->next;
  802238:	e0bfff17 	ldw	r2,-4(fp)
  80223c:	10800517 	ldw	r2,20(r2)
  802240:	e0bfff15 	stw	r2,-4(fp)
		i++;
  802244:	e0bffd17 	ldw	r2,-12(fp)
  802248:	10800044 	addi	r2,r2,1
  80224c:	e0bffd15 	stw	r2,-12(fp)

void doSharkBulletCollision(void) {
	Bullet *bulletCursor = playerBulletList;
	Shark *toKill = NULL;
	int i = 0;
	while (bulletCursor != NULL
  802250:	e0bfff17 	ldw	r2,-4(fp)
  802254:	1005003a 	cmpeq	r2,r2,zero
  802258:	1000071e 	bne	r2,zero,802278 <doSharkBulletCollision+0x8c>
  80225c:	e0bfff17 	ldw	r2,-4(fp)
  802260:	10800417 	ldw	r2,16(r2)
  802264:	1004c03a 	cmpne	r2,r2,zero
  802268:	1000031e 	bne	r2,zero,802278 <doSharkBulletCollision+0x8c>
  80226c:	e0bffd17 	ldw	r2,-12(fp)
  802270:	10802010 	cmplti	r2,r2,128
  802274:	103fe81e 	bne	r2,zero,802218 <doSharkBulletCollision+0x2c>
			killShark(toKill);
		}
		bulletCursor = bulletCursor->next;
		i++;
	}
}
  802278:	e037883a 	mov	sp,fp
  80227c:	dfc00117 	ldw	ra,4(sp)
  802280:	df000017 	ldw	fp,0(sp)
  802284:	dec00204 	addi	sp,sp,8
  802288:	f800283a 	ret

0080228c <doPlayerBulletCollision>:

void doPlayerBulletCollision(void) {
  80228c:	defffc04 	addi	sp,sp,-16
  802290:	dfc00315 	stw	ra,12(sp)
  802294:	df000215 	stw	fp,8(sp)
  802298:	df000204 	addi	fp,sp,8
	Bullet *bulletCursor = sharkBulletList;
  80229c:	008020b4 	movhi	r2,130
  8022a0:	10bf5104 	addi	r2,r2,-700
  8022a4:	10800017 	ldw	r2,0(r2)
  8022a8:	e0bfff15 	stw	r2,-4(fp)
	int i = 0;
  8022ac:	e03ffe15 	stw	zero,-8(fp)
	while (bulletCursor != NULL
  8022b0:	00000e06 	br	8022ec <doPlayerBulletCollision+0x60>
			&& bulletCursor->type == SHARKBULLET
			&& i < NUM_BULLETS) {
		if (isBulletCollidingWithPlayer(&player, bulletCursor) == TRUE) {
  8022b4:	010020b4 	movhi	r4,130
  8022b8:	21001604 	addi	r4,r4,88
  8022bc:	e17fff17 	ldw	r5,-4(fp)
  8022c0:	08021100 	call	802110 <isBulletCollidingWithPlayer>
  8022c4:	10800058 	cmpnei	r2,r2,1
  8022c8:	1000021e 	bne	r2,zero,8022d4 <doPlayerBulletCollision+0x48>
			hitPlayer();
  8022cc:	08033400 	call	803340 <hitPlayer>
			break;
  8022d0:	00001006 	br	802314 <doPlayerBulletCollision+0x88>
		}
		i++;
  8022d4:	e0bffe17 	ldw	r2,-8(fp)
  8022d8:	10800044 	addi	r2,r2,1
  8022dc:	e0bffe15 	stw	r2,-8(fp)
		bulletCursor = bulletCursor->next;
  8022e0:	e0bfff17 	ldw	r2,-4(fp)
  8022e4:	10800517 	ldw	r2,20(r2)
  8022e8:	e0bfff15 	stw	r2,-4(fp)
}

void doPlayerBulletCollision(void) {
	Bullet *bulletCursor = sharkBulletList;
	int i = 0;
	while (bulletCursor != NULL
  8022ec:	e0bfff17 	ldw	r2,-4(fp)
  8022f0:	1005003a 	cmpeq	r2,r2,zero
  8022f4:	1000071e 	bne	r2,zero,802314 <doPlayerBulletCollision+0x88>
  8022f8:	e0bfff17 	ldw	r2,-4(fp)
  8022fc:	10800417 	ldw	r2,16(r2)
  802300:	10800058 	cmpnei	r2,r2,1
  802304:	1000031e 	bne	r2,zero,802314 <doPlayerBulletCollision+0x88>
  802308:	e0bffe17 	ldw	r2,-8(fp)
  80230c:	10802010 	cmplti	r2,r2,128
  802310:	103fe81e 	bne	r2,zero,8022b4 <doPlayerBulletCollision+0x28>
			break;
		}
		i++;
		bulletCursor = bulletCursor->next;
	}
}
  802314:	e037883a 	mov	sp,fp
  802318:	dfc00117 	ldw	ra,4(sp)
  80231c:	df000017 	ldw	fp,0(sp)
  802320:	dec00204 	addi	sp,sp,8
  802324:	f800283a 	ret

00802328 <setupDisplacement>:
void makeDownRight(Displacement *disp);
void makeDownLeft(Displacement *disp);
void makeUpRight(Displacement *disp);
void makeUpLeft(Displacement *disp);

void setupDisplacement(void) {
  802328:	defffe04 	addi	sp,sp,-8
  80232c:	dfc00115 	stw	ra,4(sp)
  802330:	df000015 	stw	fp,0(sp)
  802334:	d839883a 	mov	fp,sp
	right.dx = 1;
  802338:	00800044 	movi	r2,1
  80233c:	d0a71d0d 	sth	r2,-25484(gp)
	right.dy = 0;
  802340:	008020b4 	movhi	r2,130
  802344:	10bf5284 	addi	r2,r2,-694
  802348:	1000000d 	sth	zero,0(r2)

	left.dx = -1;
  80234c:	00bfffc4 	movi	r2,-1
  802350:	d0a71f0d 	sth	r2,-25476(gp)
	left.dy = 0;
  802354:	008020b4 	movhi	r2,130
  802358:	10bf5484 	addi	r2,r2,-686
  80235c:	1000000d 	sth	zero,0(r2)

	up.dx = 0;
  802360:	d027210d 	sth	zero,-25468(gp)
	up.dy = -1;
  802364:	00c020b4 	movhi	r3,130
  802368:	18ff5684 	addi	r3,r3,-678
  80236c:	00bfffc4 	movi	r2,-1
  802370:	1880000d 	sth	r2,0(r3)

	down.dx = 0;
  802374:	d027230d 	sth	zero,-25460(gp)
	up.dy = 1;
  802378:	00c020b4 	movhi	r3,130
  80237c:	18ff5684 	addi	r3,r3,-678
  802380:	00800044 	movi	r2,1
  802384:	1880000d 	sth	r2,0(r3)

	setupHorizontalDisplacementFunction();
  802388:	08023b40 	call	8023b4 <setupHorizontalDisplacementFunction>
	setupCircularDisplacementFunction();
  80238c:	08024b80 	call	8024b8 <setupCircularDisplacementFunction>
	setupArcDisplacementFunction();
  802390:	08025a80 	call	8025a8 <setupArcDisplacementFunction>

	printf("Setup displacement functions.\n");
  802394:	010020b4 	movhi	r4,130
  802398:	212ec804 	addi	r4,r4,-17632
  80239c:	08099640 	call	809964 <puts>
}
  8023a0:	e037883a 	mov	sp,fp
  8023a4:	dfc00117 	ldw	ra,4(sp)
  8023a8:	df000017 	ldw	fp,0(sp)
  8023ac:	dec00204 	addi	sp,sp,8
  8023b0:	f800283a 	ret

008023b4 <setupHorizontalDisplacementFunction>:

void setupHorizontalDisplacementFunction(void) {
  8023b4:	defffc04 	addi	sp,sp,-16
  8023b8:	dfc00315 	stw	ra,12(sp)
  8023bc:	df000215 	stw	fp,8(sp)
  8023c0:	df000204 	addi	fp,sp,8
	int i;
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  8023c4:	e03fff15 	stw	zero,-4(fp)
  8023c8:	00002506 	br	802460 <setupHorizontalDisplacementFunction+0xac>
		ptr = &verticalDisplacementFunctionUp[i];
  8023cc:	e0bfff17 	ldw	r2,-4(fp)
  8023d0:	100490fa 	slli	r2,r2,3
  8023d4:	1007883a 	mov	r3,r2
  8023d8:	008020b4 	movhi	r2,130
  8023dc:	10849a04 	addi	r2,r2,4712
  8023e0:	1885883a 	add	r2,r3,r2
  8023e4:	e0bffe15 	stw	r2,-8(fp)
		makeUp(ptr);
  8023e8:	e13ffe17 	ldw	r4,-8(fp)
  8023ec:	08027740 	call	802774 <makeUp>
		ptr->next = &verticalDisplacementFunctionUp[i + 1];
  8023f0:	e0bfff17 	ldw	r2,-4(fp)
  8023f4:	100490fa 	slli	r2,r2,3
  8023f8:	1007883a 	mov	r3,r2
  8023fc:	008020b4 	movhi	r2,130
  802400:	10849c04 	addi	r2,r2,4720
  802404:	1887883a 	add	r3,r3,r2
  802408:	e0bffe17 	ldw	r2,-8(fp)
  80240c:	10c00115 	stw	r3,4(r2)

		ptr = &verticalDisplacementFunctionDown[i];
  802410:	e0bfff17 	ldw	r2,-4(fp)
  802414:	100490fa 	slli	r2,r2,3
  802418:	1007883a 	mov	r3,r2
  80241c:	008020b4 	movhi	r2,130
  802420:	10839a04 	addi	r2,r2,3688
  802424:	1885883a 	add	r2,r3,r2
  802428:	e0bffe15 	stw	r2,-8(fp)
		makeUp(ptr);
  80242c:	e13ffe17 	ldw	r4,-8(fp)
  802430:	08027740 	call	802774 <makeUp>
		ptr-> next = &verticalDisplacementFunctionDown[i + 1];
  802434:	e0bfff17 	ldw	r2,-4(fp)
  802438:	100490fa 	slli	r2,r2,3
  80243c:	1007883a 	mov	r3,r2
  802440:	008020b4 	movhi	r2,130
  802444:	10839c04 	addi	r2,r2,3696
  802448:	1887883a 	add	r3,r3,r2
  80244c:	e0bffe17 	ldw	r2,-8(fp)
  802450:	10c00115 	stw	r3,4(r2)
}

void setupHorizontalDisplacementFunction(void) {
	int i;
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  802454:	e0bfff17 	ldw	r2,-4(fp)
  802458:	10800044 	addi	r2,r2,1
  80245c:	e0bfff15 	stw	r2,-4(fp)
  802460:	e0bfff17 	ldw	r2,-4(fp)
  802464:	10802010 	cmplti	r2,r2,128
  802468:	103fd81e 	bne	r2,zero,8023cc <setupHorizontalDisplacementFunction+0x18>

		ptr = &verticalDisplacementFunctionDown[i];
		makeUp(ptr);
		ptr-> next = &verticalDisplacementFunctionDown[i + 1];
	}
	ptr = &verticalDisplacementFunctionUp[DISPLACEMENT_LENGTH];
  80246c:	008020b4 	movhi	r2,130
  802470:	10859a04 	addi	r2,r2,5736
  802474:	e0bffe15 	stw	r2,-8(fp)
	ptr->next = verticalDisplacementFunctionUp;
  802478:	e0fffe17 	ldw	r3,-8(fp)
  80247c:	008020b4 	movhi	r2,130
  802480:	10849a04 	addi	r2,r2,4712
  802484:	18800115 	stw	r2,4(r3)
	ptr = &verticalDisplacementFunctionDown[DISPLACEMENT_LENGTH];
  802488:	008020b4 	movhi	r2,130
  80248c:	10849a04 	addi	r2,r2,4712
  802490:	e0bffe15 	stw	r2,-8(fp)
	ptr->next = verticalDisplacementFunctionDown;
  802494:	e0fffe17 	ldw	r3,-8(fp)
  802498:	008020b4 	movhi	r2,130
  80249c:	10839a04 	addi	r2,r2,3688
  8024a0:	18800115 	stw	r2,4(r3)
}
  8024a4:	e037883a 	mov	sp,fp
  8024a8:	dfc00117 	ldw	ra,4(sp)
  8024ac:	df000017 	ldw	fp,0(sp)
  8024b0:	dec00204 	addi	sp,sp,8
  8024b4:	f800283a 	ret

008024b8 <setupCircularDisplacementFunction>:

void setupCircularDisplacementFunction(void) {
  8024b8:	defffc04 	addi	sp,sp,-16
  8024bc:	dfc00315 	stw	ra,12(sp)
  8024c0:	df000215 	stw	fp,8(sp)
  8024c4:	df000204 	addi	fp,sp,8
	int i = 0;
  8024c8:	e03fff15 	stw	zero,-4(fp)
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  8024cc:	e03fff15 	stw	zero,-4(fp)
  8024d0:	00002606 	br	80256c <setupCircularDisplacementFunction+0xb4>
		ptr = &circularDisplacementFunction[i];
  8024d4:	e0bfff17 	ldw	r2,-4(fp)
  8024d8:	100490fa 	slli	r2,r2,3
  8024dc:	1007883a 	mov	r3,r2
  8024e0:	008020b4 	movhi	r2,130
  8024e4:	10859a04 	addi	r2,r2,5736
  8024e8:	1885883a 	add	r2,r3,r2
  8024ec:	e0bffe15 	stw	r2,-8(fp)
		if (i < DISPLACEMENT_LENGTH / 4) {
  8024f0:	e0bfff17 	ldw	r2,-4(fp)
  8024f4:	10800808 	cmpgei	r2,r2,32
  8024f8:	1000031e 	bne	r2,zero,802508 <setupCircularDisplacementFunction+0x50>
			makeLeft(ptr);
  8024fc:	e13ffe17 	ldw	r4,-8(fp)
  802500:	08027340 	call	802734 <makeLeft>
  802504:	00000e06 	br	802540 <setupCircularDisplacementFunction+0x88>
		} else if (i < DISPLACEMENT_LENGTH / 2) {
  802508:	e0bfff17 	ldw	r2,-4(fp)
  80250c:	10801008 	cmpgei	r2,r2,64
  802510:	1000031e 	bne	r2,zero,802520 <setupCircularDisplacementFunction+0x68>
			makeDown(ptr);
  802514:	e13ffe17 	ldw	r4,-8(fp)
  802518:	08027b40 	call	8027b4 <makeDown>
  80251c:	00000806 	br	802540 <setupCircularDisplacementFunction+0x88>
		} else if (i < 3 * DISPLACEMENT_LENGTH / 4) {
  802520:	e0bfff17 	ldw	r2,-4(fp)
  802524:	10801808 	cmpgei	r2,r2,96
  802528:	1000031e 	bne	r2,zero,802538 <setupCircularDisplacementFunction+0x80>
			makeRight(ptr);
  80252c:	e13ffe17 	ldw	r4,-8(fp)
  802530:	08026f40 	call	8026f4 <makeRight>
  802534:	00000206 	br	802540 <setupCircularDisplacementFunction+0x88>
		} else {
			makeUp(ptr);
  802538:	e13ffe17 	ldw	r4,-8(fp)
  80253c:	08027740 	call	802774 <makeUp>
		}
		ptr->next = &circularDisplacementFunction[i + 1];
  802540:	e0bfff17 	ldw	r2,-4(fp)
  802544:	100490fa 	slli	r2,r2,3
  802548:	1007883a 	mov	r3,r2
  80254c:	008020b4 	movhi	r2,130
  802550:	10859c04 	addi	r2,r2,5744
  802554:	1887883a 	add	r3,r3,r2
  802558:	e0bffe17 	ldw	r2,-8(fp)
  80255c:	10c00115 	stw	r3,4(r2)
}

void setupCircularDisplacementFunction(void) {
	int i = 0;
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  802560:	e0bfff17 	ldw	r2,-4(fp)
  802564:	10800044 	addi	r2,r2,1
  802568:	e0bfff15 	stw	r2,-4(fp)
  80256c:	e0bfff17 	ldw	r2,-4(fp)
  802570:	10802010 	cmplti	r2,r2,128
  802574:	103fd71e 	bne	r2,zero,8024d4 <setupCircularDisplacementFunction+0x1c>
		} else {
			makeUp(ptr);
		}
		ptr->next = &circularDisplacementFunction[i + 1];
	}
	ptr = &circularDisplacementFunction[DISPLACEMENT_LENGTH];
  802578:	008020b4 	movhi	r2,130
  80257c:	10869a04 	addi	r2,r2,6760
  802580:	e0bffe15 	stw	r2,-8(fp)
	ptr->next = circularDisplacementFunction;
  802584:	e0fffe17 	ldw	r3,-8(fp)
  802588:	008020b4 	movhi	r2,130
  80258c:	10859a04 	addi	r2,r2,5736
  802590:	18800115 	stw	r2,4(r3)
}
  802594:	e037883a 	mov	sp,fp
  802598:	dfc00117 	ldw	ra,4(sp)
  80259c:	df000017 	ldw	fp,0(sp)
  8025a0:	dec00204 	addi	sp,sp,8
  8025a4:	f800283a 	ret

008025a8 <setupArcDisplacementFunction>:

void setupArcDisplacementFunction(void) {
  8025a8:	defffc04 	addi	sp,sp,-16
  8025ac:	dfc00315 	stw	ra,12(sp)
  8025b0:	df000215 	stw	fp,8(sp)
  8025b4:	df000204 	addi	fp,sp,8
	int i;
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  8025b8:	e03fff15 	stw	zero,-4(fp)
  8025bc:	00001a06 	br	802628 <setupArcDisplacementFunction+0x80>
		ptr = &arcDisplacementFunction[i];
  8025c0:	e0bfff17 	ldw	r2,-4(fp)
  8025c4:	100490fa 	slli	r2,r2,3
  8025c8:	1007883a 	mov	r3,r2
  8025cc:	008020b4 	movhi	r2,130
  8025d0:	10879a04 	addi	r2,r2,7784
  8025d4:	1885883a 	add	r2,r3,r2
  8025d8:	e0bffe15 	stw	r2,-8(fp)
		if (i < DISPLACEMENT_LENGTH / 2) {
  8025dc:	e0bfff17 	ldw	r2,-4(fp)
  8025e0:	10801008 	cmpgei	r2,r2,64
  8025e4:	1000031e 	bne	r2,zero,8025f4 <setupArcDisplacementFunction+0x4c>
			makeDownLeft(ptr);
  8025e8:	e13ffe17 	ldw	r4,-8(fp)
  8025ec:	08028340 	call	802834 <makeDownLeft>
  8025f0:	00000206 	br	8025fc <setupArcDisplacementFunction+0x54>
		} else {
			makeDownRight(ptr);
  8025f4:	e13ffe17 	ldw	r4,-8(fp)
  8025f8:	08027f40 	call	8027f4 <makeDownRight>
		}
		ptr->next = &arcDisplacementFunction[i + 1];
  8025fc:	e0bfff17 	ldw	r2,-4(fp)
  802600:	100490fa 	slli	r2,r2,3
  802604:	1007883a 	mov	r3,r2
  802608:	008020b4 	movhi	r2,130
  80260c:	10879c04 	addi	r2,r2,7792
  802610:	1887883a 	add	r3,r3,r2
  802614:	e0bffe17 	ldw	r2,-8(fp)
  802618:	10c00115 	stw	r3,4(r2)
}

void setupArcDisplacementFunction(void) {
	int i;
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  80261c:	e0bfff17 	ldw	r2,-4(fp)
  802620:	10800044 	addi	r2,r2,1
  802624:	e0bfff15 	stw	r2,-4(fp)
  802628:	e0bfff17 	ldw	r2,-4(fp)
  80262c:	10802010 	cmplti	r2,r2,128
  802630:	103fe31e 	bne	r2,zero,8025c0 <setupArcDisplacementFunction+0x18>
		} else {
			makeDownRight(ptr);
		}
		ptr->next = &arcDisplacementFunction[i + 1];
	}
	ptr = &arcDisplacementFunction[DISPLACEMENT_LENGTH];
  802634:	008020b4 	movhi	r2,130
  802638:	10889a04 	addi	r2,r2,8808
  80263c:	e0bffe15 	stw	r2,-8(fp)
	ptr->next = arcDisplacementFunction;
  802640:	e0fffe17 	ldw	r3,-8(fp)
  802644:	008020b4 	movhi	r2,130
  802648:	10879a04 	addi	r2,r2,7784
  80264c:	18800115 	stw	r2,4(r3)
}
  802650:	e037883a 	mov	sp,fp
  802654:	dfc00117 	ldw	ra,4(sp)
  802658:	df000017 	ldw	fp,0(sp)
  80265c:	dec00204 	addi	sp,sp,8
  802660:	f800283a 	ret

00802664 <setupNoDisplcaementFunction>:

void setupNoDisplcaementFunction(void) {
  802664:	defffe04 	addi	sp,sp,-8
  802668:	df000115 	stw	fp,4(sp)
  80266c:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  802670:	e03fff15 	stw	zero,-4(fp)
  802674:	00001806 	br	8026d8 <setupNoDisplcaementFunction+0x74>
		doNotMove[i].dx = 0;
  802678:	e0bfff17 	ldw	r2,-4(fp)
  80267c:	00c020b4 	movhi	r3,130
  802680:	18c69a04 	addi	r3,r3,6760
  802684:	100490fa 	slli	r2,r2,3
  802688:	10c5883a 	add	r2,r2,r3
  80268c:	1000000d 	sth	zero,0(r2)
		doNotMove[i].dy = 0;
  802690:	e0bfff17 	ldw	r2,-4(fp)
  802694:	00c020b4 	movhi	r3,130
  802698:	18c69a04 	addi	r3,r3,6760
  80269c:	100490fa 	slli	r2,r2,3
  8026a0:	10c5883a 	add	r2,r2,r3
  8026a4:	1000008d 	sth	zero,2(r2)
		doNotMove[i].next = doNotMove;
  8026a8:	e0bfff17 	ldw	r2,-4(fp)
  8026ac:	00c020b4 	movhi	r3,130
  8026b0:	18c69a04 	addi	r3,r3,6760
  8026b4:	100490fa 	slli	r2,r2,3
  8026b8:	10c5883a 	add	r2,r2,r3
  8026bc:	10c00104 	addi	r3,r2,4
  8026c0:	008020b4 	movhi	r2,130
  8026c4:	10869a04 	addi	r2,r2,6760
  8026c8:	18800015 	stw	r2,0(r3)
	ptr->next = arcDisplacementFunction;
}

void setupNoDisplcaementFunction(void) {
	int i;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  8026cc:	e0bfff17 	ldw	r2,-4(fp)
  8026d0:	10800044 	addi	r2,r2,1
  8026d4:	e0bfff15 	stw	r2,-4(fp)
  8026d8:	e0bfff17 	ldw	r2,-4(fp)
  8026dc:	10802010 	cmplti	r2,r2,128
  8026e0:	103fe51e 	bne	r2,zero,802678 <setupNoDisplcaementFunction+0x14>
		doNotMove[i].dx = 0;
		doNotMove[i].dy = 0;
		doNotMove[i].next = doNotMove;
	}
}
  8026e4:	e037883a 	mov	sp,fp
  8026e8:	df000017 	ldw	fp,0(sp)
  8026ec:	dec00104 	addi	sp,sp,4
  8026f0:	f800283a 	ret

008026f4 <makeRight>:

void makeRight(Displacement *disp) {
  8026f4:	defffe04 	addi	sp,sp,-8
  8026f8:	df000115 	stw	fp,4(sp)
  8026fc:	df000104 	addi	fp,sp,4
  802700:	e13fff15 	stw	r4,-4(fp)
	disp->dx = right.dx;
  802704:	d0e71d0b 	ldhu	r3,-25484(gp)
  802708:	e0bfff17 	ldw	r2,-4(fp)
  80270c:	10c0000d 	sth	r3,0(r2)
	disp->dy = right.dy;
  802710:	008020b4 	movhi	r2,130
  802714:	10bf5284 	addi	r2,r2,-694
  802718:	10c0000b 	ldhu	r3,0(r2)
  80271c:	e0bfff17 	ldw	r2,-4(fp)
  802720:	10c0008d 	sth	r3,2(r2)
}
  802724:	e037883a 	mov	sp,fp
  802728:	df000017 	ldw	fp,0(sp)
  80272c:	dec00104 	addi	sp,sp,4
  802730:	f800283a 	ret

00802734 <makeLeft>:
void makeLeft(Displacement *disp) {
  802734:	defffe04 	addi	sp,sp,-8
  802738:	df000115 	stw	fp,4(sp)
  80273c:	df000104 	addi	fp,sp,4
  802740:	e13fff15 	stw	r4,-4(fp)
	disp->dx = left.dx;
  802744:	d0e71f0b 	ldhu	r3,-25476(gp)
  802748:	e0bfff17 	ldw	r2,-4(fp)
  80274c:	10c0000d 	sth	r3,0(r2)
	disp->dy = left.dy;
  802750:	008020b4 	movhi	r2,130
  802754:	10bf5484 	addi	r2,r2,-686
  802758:	10c0000b 	ldhu	r3,0(r2)
  80275c:	e0bfff17 	ldw	r2,-4(fp)
  802760:	10c0008d 	sth	r3,2(r2)
}
  802764:	e037883a 	mov	sp,fp
  802768:	df000017 	ldw	fp,0(sp)
  80276c:	dec00104 	addi	sp,sp,4
  802770:	f800283a 	ret

00802774 <makeUp>:
void makeUp(Displacement *disp) {
  802774:	defffe04 	addi	sp,sp,-8
  802778:	df000115 	stw	fp,4(sp)
  80277c:	df000104 	addi	fp,sp,4
  802780:	e13fff15 	stw	r4,-4(fp)
	disp->dx = up.dx;
  802784:	d0e7210b 	ldhu	r3,-25468(gp)
  802788:	e0bfff17 	ldw	r2,-4(fp)
  80278c:	10c0000d 	sth	r3,0(r2)
	disp->dy = up.dy;
  802790:	008020b4 	movhi	r2,130
  802794:	10bf5684 	addi	r2,r2,-678
  802798:	10c0000b 	ldhu	r3,0(r2)
  80279c:	e0bfff17 	ldw	r2,-4(fp)
  8027a0:	10c0008d 	sth	r3,2(r2)
}
  8027a4:	e037883a 	mov	sp,fp
  8027a8:	df000017 	ldw	fp,0(sp)
  8027ac:	dec00104 	addi	sp,sp,4
  8027b0:	f800283a 	ret

008027b4 <makeDown>:

void makeDown(Displacement *disp) {
  8027b4:	defffe04 	addi	sp,sp,-8
  8027b8:	df000115 	stw	fp,4(sp)
  8027bc:	df000104 	addi	fp,sp,4
  8027c0:	e13fff15 	stw	r4,-4(fp)
	disp->dx = down.dx;
  8027c4:	d0e7230b 	ldhu	r3,-25460(gp)
  8027c8:	e0bfff17 	ldw	r2,-4(fp)
  8027cc:	10c0000d 	sth	r3,0(r2)
	disp->dy = down.dy;
  8027d0:	008020b4 	movhi	r2,130
  8027d4:	10bf5884 	addi	r2,r2,-670
  8027d8:	10c0000b 	ldhu	r3,0(r2)
  8027dc:	e0bfff17 	ldw	r2,-4(fp)
  8027e0:	10c0008d 	sth	r3,2(r2)
}
  8027e4:	e037883a 	mov	sp,fp
  8027e8:	df000017 	ldw	fp,0(sp)
  8027ec:	dec00104 	addi	sp,sp,4
  8027f0:	f800283a 	ret

008027f4 <makeDownRight>:

void makeDownRight(Displacement *disp) {
  8027f4:	defffe04 	addi	sp,sp,-8
  8027f8:	df000115 	stw	fp,4(sp)
  8027fc:	df000104 	addi	fp,sp,4
  802800:	e13fff15 	stw	r4,-4(fp)
	disp->dx = right.dx;
  802804:	d0e71d0b 	ldhu	r3,-25484(gp)
  802808:	e0bfff17 	ldw	r2,-4(fp)
  80280c:	10c0000d 	sth	r3,0(r2)
	disp->dy = down.dy;
  802810:	008020b4 	movhi	r2,130
  802814:	10bf5884 	addi	r2,r2,-670
  802818:	10c0000b 	ldhu	r3,0(r2)
  80281c:	e0bfff17 	ldw	r2,-4(fp)
  802820:	10c0008d 	sth	r3,2(r2)
}
  802824:	e037883a 	mov	sp,fp
  802828:	df000017 	ldw	fp,0(sp)
  80282c:	dec00104 	addi	sp,sp,4
  802830:	f800283a 	ret

00802834 <makeDownLeft>:

void makeDownLeft(Displacement *disp) {
  802834:	defffe04 	addi	sp,sp,-8
  802838:	df000115 	stw	fp,4(sp)
  80283c:	df000104 	addi	fp,sp,4
  802840:	e13fff15 	stw	r4,-4(fp)
	disp->dx = left.dx;
  802844:	d0e71f0b 	ldhu	r3,-25476(gp)
  802848:	e0bfff17 	ldw	r2,-4(fp)
  80284c:	10c0000d 	sth	r3,0(r2)
	disp->dy = down.dy;
  802850:	008020b4 	movhi	r2,130
  802854:	10bf5884 	addi	r2,r2,-670
  802858:	10c0000b 	ldhu	r3,0(r2)
  80285c:	e0bfff17 	ldw	r2,-4(fp)
  802860:	10c0008d 	sth	r3,2(r2)
}
  802864:	e037883a 	mov	sp,fp
  802868:	df000017 	ldw	fp,0(sp)
  80286c:	dec00104 	addi	sp,sp,4
  802870:	f800283a 	ret

00802874 <makeUpRight>:

void makeUpRight(Displacement *disp) {
  802874:	defffe04 	addi	sp,sp,-8
  802878:	df000115 	stw	fp,4(sp)
  80287c:	df000104 	addi	fp,sp,4
  802880:	e13fff15 	stw	r4,-4(fp)
	disp->dx = right.dx;
  802884:	d0e71d0b 	ldhu	r3,-25484(gp)
  802888:	e0bfff17 	ldw	r2,-4(fp)
  80288c:	10c0000d 	sth	r3,0(r2)
	disp->dy = up.dy;
  802890:	008020b4 	movhi	r2,130
  802894:	10bf5684 	addi	r2,r2,-678
  802898:	10c0000b 	ldhu	r3,0(r2)
  80289c:	e0bfff17 	ldw	r2,-4(fp)
  8028a0:	10c0008d 	sth	r3,2(r2)
}
  8028a4:	e037883a 	mov	sp,fp
  8028a8:	df000017 	ldw	fp,0(sp)
  8028ac:	dec00104 	addi	sp,sp,4
  8028b0:	f800283a 	ret

008028b4 <makeUpLeft>:

void makeUpLeft(Displacement *disp) {
  8028b4:	defffe04 	addi	sp,sp,-8
  8028b8:	df000115 	stw	fp,4(sp)
  8028bc:	df000104 	addi	fp,sp,4
  8028c0:	e13fff15 	stw	r4,-4(fp)
	disp->dx = left.dx;
  8028c4:	d0e71f0b 	ldhu	r3,-25476(gp)
  8028c8:	e0bfff17 	ldw	r2,-4(fp)
  8028cc:	10c0000d 	sth	r3,0(r2)
	disp->dy = up.dy;
  8028d0:	008020b4 	movhi	r2,130
  8028d4:	10bf5684 	addi	r2,r2,-678
  8028d8:	10c0000b 	ldhu	r3,0(r2)
  8028dc:	e0bfff17 	ldw	r2,-4(fp)
  8028e0:	10c0008d 	sth	r3,2(r2)
}
  8028e4:	e037883a 	mov	sp,fp
  8028e8:	df000017 	ldw	fp,0(sp)
  8028ec:	dec00104 	addi	sp,sp,4
  8028f0:	f800283a 	ret

008028f4 <setToRandomDisplacement>:

void setToRandomDisplacement(Shark *shark) {
  8028f4:	defff804 	addi	sp,sp,-32
  8028f8:	dfc00715 	stw	ra,28(sp)
  8028fc:	df000615 	stw	fp,24(sp)
  802900:	df000604 	addi	fp,sp,24
  802904:	e13ffd15 	stw	r4,-12(fp)
	srand(time(NULL));
  802908:	0009883a 	mov	r4,zero
  80290c:	0809af00 	call	809af0 <time>
  802910:	1009883a 	mov	r4,r2
  802914:	08099780 	call	809978 <srand>
	int r = rand();
  802918:	08099940 	call	809994 <rand>
  80291c:	e0bffc15 	stw	r2,-16(fp)
	short int select = r % 4;
  802920:	e0fffc17 	ldw	r3,-16(fp)
  802924:	00a00034 	movhi	r2,32768
  802928:	108000c4 	addi	r2,r2,3
  80292c:	1886703a 	and	r3,r3,r2
  802930:	e0ffff15 	stw	r3,-4(fp)
  802934:	e0ffff17 	ldw	r3,-4(fp)
  802938:	1804403a 	cmpge	r2,r3,zero
  80293c:	10000a1e 	bne	r2,zero,802968 <setToRandomDisplacement+0x74>
  802940:	e0bfff17 	ldw	r2,-4(fp)
  802944:	10bfffc4 	addi	r2,r2,-1
  802948:	e0bfff15 	stw	r2,-4(fp)
  80294c:	00bfff04 	movi	r2,-4
  802950:	e0ffff17 	ldw	r3,-4(fp)
  802954:	1886b03a 	or	r3,r3,r2
  802958:	e0ffff15 	stw	r3,-4(fp)
  80295c:	e0bfff17 	ldw	r2,-4(fp)
  802960:	10800044 	addi	r2,r2,1
  802964:	e0bfff15 	stw	r2,-4(fp)
  802968:	e0bfff17 	ldw	r2,-4(fp)
  80296c:	e0bffb0d 	sth	r2,-20(fp)
	Displacement *ptr;
	switch (select) {
  802970:	e0fffb0f 	ldh	r3,-20(fp)
  802974:	e0fffe15 	stw	r3,-8(fp)
  802978:	e0fffe17 	ldw	r3,-8(fp)
  80297c:	18800060 	cmpeqi	r2,r3,1
  802980:	1000121e 	bne	r2,zero,8029cc <setToRandomDisplacement+0xd8>
  802984:	e0fffe17 	ldw	r3,-8(fp)
  802988:	18800088 	cmpgei	r2,r3,2
  80298c:	1000041e 	bne	r2,zero,8029a0 <setToRandomDisplacement+0xac>
  802990:	e0fffe17 	ldw	r3,-8(fp)
  802994:	1805003a 	cmpeq	r2,r3,zero
  802998:	1000081e 	bne	r2,zero,8029bc <setToRandomDisplacement+0xc8>
  80299c:	00001606 	br	8029f8 <setToRandomDisplacement+0x104>
  8029a0:	e0fffe17 	ldw	r3,-8(fp)
  8029a4:	188000a0 	cmpeqi	r2,r3,2
  8029a8:	10000c1e 	bne	r2,zero,8029dc <setToRandomDisplacement+0xe8>
  8029ac:	e0fffe17 	ldw	r3,-8(fp)
  8029b0:	188000e0 	cmpeqi	r2,r3,3
  8029b4:	10000d1e 	bne	r2,zero,8029ec <setToRandomDisplacement+0xf8>
  8029b8:	00000f06 	br	8029f8 <setToRandomDisplacement+0x104>
	case 0:
		ptr = verticalDisplacementFunctionUp;
  8029bc:	008020b4 	movhi	r2,130
  8029c0:	10849a04 	addi	r2,r2,4712
  8029c4:	e0bffa15 	stw	r2,-24(fp)
		break;
  8029c8:	00000b06 	br	8029f8 <setToRandomDisplacement+0x104>
	case 1:
		ptr = verticalDisplacementFunctionDown;
  8029cc:	008020b4 	movhi	r2,130
  8029d0:	10839a04 	addi	r2,r2,3688
  8029d4:	e0bffa15 	stw	r2,-24(fp)
		break;
  8029d8:	00000706 	br	8029f8 <setToRandomDisplacement+0x104>
	case 2:
		ptr = circularDisplacementFunction;
  8029dc:	008020b4 	movhi	r2,130
  8029e0:	10859a04 	addi	r2,r2,5736
  8029e4:	e0bffa15 	stw	r2,-24(fp)
		break;
  8029e8:	00000306 	br	8029f8 <setToRandomDisplacement+0x104>
	case 3:
		ptr = arcDisplacementFunction;
  8029ec:	008020b4 	movhi	r2,130
  8029f0:	10879a04 	addi	r2,r2,7784
  8029f4:	e0bffa15 	stw	r2,-24(fp)
		break;
	}
	shark->displacement = ptr;
  8029f8:	e0fffd17 	ldw	r3,-12(fp)
  8029fc:	e0bffa17 	ldw	r2,-24(fp)
  802a00:	18800815 	stw	r2,32(r3)
}
  802a04:	e037883a 	mov	sp,fp
  802a08:	dfc00117 	ldw	ra,4(sp)
  802a0c:	df000017 	ldw	fp,0(sp)
  802a10:	dec00204 	addi	sp,sp,8
  802a14:	f800283a 	ret

00802a18 <handleKeyInput>:
#include "input.h"


void handleKeyInput(void){
  802a18:	defffc04 	addi	sp,sp,-16
  802a1c:	dfc00315 	stw	ra,12(sp)
  802a20:	df000215 	stw	fp,8(sp)
  802a24:	dc000115 	stw	r16,4(sp)
  802a28:	df000104 	addi	fp,sp,4
	static short int edgeDetect0 = 0;
	static short int edgeDetect1 = 0;
	static short int edgeDetect2 = 0;
	static short int edgeDetect3 = 0;

	keyInput = IORD_8DIRECT(KEYS_BASE, 0);
  802a2c:	00804034 	movhi	r2,256
  802a30:	10842004 	addi	r2,r2,4224
  802a34:	10800023 	ldbuio	r2,0(r2)
  802a38:	d0a72705 	stb	r2,-25444(gp)
	char key0 = keyInput & 0x01;
  802a3c:	d0a72703 	ldbu	r2,-25444(gp)
  802a40:	1080004c 	andi	r2,r2,1
  802a44:	e0bfffc5 	stb	r2,-1(fp)
	char key1 = keyInput & 0x02;
  802a48:	d0a72703 	ldbu	r2,-25444(gp)
  802a4c:	1080008c 	andi	r2,r2,2
  802a50:	e0bfff85 	stb	r2,-2(fp)
	char key2 = keyInput & 0x04;
  802a54:	d0a72703 	ldbu	r2,-25444(gp)
  802a58:	1080010c 	andi	r2,r2,4
  802a5c:	e0bfff45 	stb	r2,-3(fp)
	char key3 = keyInput & 0x08;
  802a60:	d0a72703 	ldbu	r2,-25444(gp)
  802a64:	1080020c 	andi	r2,r2,8
  802a68:	e0bfff05 	stb	r2,-4(fp)

	//functionality for keys being held
	if(key1) {
  802a6c:	e0bfff87 	ldb	r2,-2(fp)
  802a70:	1005003a 	cmpeq	r2,r2,zero
  802a74:	1000021e 	bne	r2,zero,802a80 <handleKeyInput+0x68>
		moveDownPlayer();
  802a78:	08032580 	call	803258 <moveDownPlayer>
  802a7c:	00000606 	br	802a98 <handleKeyInput+0x80>
	} else if (key2) {
  802a80:	e0bfff47 	ldb	r2,-3(fp)
  802a84:	1005003a 	cmpeq	r2,r2,zero
  802a88:	1000021e 	bne	r2,zero,802a94 <handleKeyInput+0x7c>
		moveUpPlayer();
  802a8c:	08031cc0 	call	8031cc <moveUpPlayer>
  802a90:	00000106 	br	802a98 <handleKeyInput+0x80>
	} else {
		keepPlayerStationary();
  802a94:	08032e40 	call	8032e4 <keepPlayerStationary>
	}

	//functionality for keys being pressed.
	if (!key0 && (edgeDetect0 == 0)) {
  802a98:	e0bfffc7 	ldb	r2,-1(fp)
  802a9c:	1004c03a 	cmpne	r2,r2,zero
  802aa0:	1000091e 	bne	r2,zero,802ac8 <handleKeyInput+0xb0>
  802aa4:	d0a7268b 	ldhu	r2,-25446(gp)
  802aa8:	10bfffcc 	andi	r2,r2,65535
  802aac:	10a0001c 	xori	r2,r2,32768
  802ab0:	10a00004 	addi	r2,r2,-32768
  802ab4:	1004c03a 	cmpne	r2,r2,zero
  802ab8:	1000031e 	bne	r2,zero,802ac8 <handleKeyInput+0xb0>
		edgeDetect0 = 1;
  802abc:	00800044 	movi	r2,1
  802ac0:	d0a7268d 	sth	r2,-25446(gp)
	} else {
		keepPlayerStationary();
	}

	//functionality for keys being pressed.
	if (!key0 && (edgeDetect0 == 0)) {
  802ac4:	00002406 	br	802b58 <handleKeyInput+0x140>
		edgeDetect0 = 1;
	} else if (key0 && (edgeDetect0 == 1)) {
  802ac8:	e0bfffc7 	ldb	r2,-1(fp)
  802acc:	1005003a 	cmpeq	r2,r2,zero
  802ad0:	1000211e 	bne	r2,zero,802b58 <handleKeyInput+0x140>
  802ad4:	d0a7268b 	ldhu	r2,-25446(gp)
  802ad8:	10bfffcc 	andi	r2,r2,65535
  802adc:	10a0001c 	xori	r2,r2,32768
  802ae0:	10a00004 	addi	r2,r2,-32768
  802ae4:	10800058 	cmpnei	r2,r2,1
  802ae8:	10001b1e 	bne	r2,zero,802b58 <handleKeyInput+0x140>
		edgeDetect0 = 0;
  802aec:	d027268d 	sth	zero,-25446(gp)
		createBullet(PLAYERBULLET, player.x + PLAYER_WIDTH + 1, player.y + 0.5 * PLAYER_HEIGHT);
  802af0:	008020b4 	movhi	r2,130
  802af4:	10801604 	addi	r2,r2,88
  802af8:	10800017 	ldw	r2,0(r2)
  802afc:	140007c4 	addi	r16,r2,31
  802b00:	008020b4 	movhi	r2,130
  802b04:	10801604 	addi	r2,r2,88
  802b08:	11000217 	ldw	r4,8(r2)
  802b0c:	080852c0 	call	80852c <__floatsidf>
  802b10:	100b883a 	mov	r5,r2
  802b14:	180d883a 	mov	r6,r3
  802b18:	2809883a 	mov	r4,r5
  802b1c:	300b883a 	mov	r5,r6
  802b20:	000d883a 	mov	r6,zero
  802b24:	01d00bb4 	movhi	r7,16430
  802b28:	0807bf40 	call	807bf4 <__adddf3>
  802b2c:	1009883a 	mov	r4,r2
  802b30:	180b883a 	mov	r5,r3
  802b34:	2005883a 	mov	r2,r4
  802b38:	2807883a 	mov	r3,r5
  802b3c:	1009883a 	mov	r4,r2
  802b40:	180b883a 	mov	r5,r3
  802b44:	08086240 	call	808624 <__fixdfsi>
  802b48:	100d883a 	mov	r6,r2
  802b4c:	0009883a 	mov	r4,zero
  802b50:	800b883a 	mov	r5,r16
  802b54:	080185c0 	call	80185c <createBullet>
		edgeDetect2 = 0;
		//updateHighScoreBoard();
		//playTheme();
	} */

	if (!key3 && (edgeDetect3 == 0)) {
  802b58:	e0bfff07 	ldb	r2,-4(fp)
  802b5c:	1004c03a 	cmpne	r2,r2,zero
  802b60:	1000091e 	bne	r2,zero,802b88 <handleKeyInput+0x170>
  802b64:	d0a7250b 	ldhu	r2,-25452(gp)
  802b68:	10bfffcc 	andi	r2,r2,65535
  802b6c:	10a0001c 	xori	r2,r2,32768
  802b70:	10a00004 	addi	r2,r2,-32768
  802b74:	1004c03a 	cmpne	r2,r2,zero
  802b78:	1000031e 	bne	r2,zero,802b88 <handleKeyInput+0x170>
		edgeDetect3 = 1;
  802b7c:	00800044 	movi	r2,1
  802b80:	d0a7250d 	sth	r2,-25452(gp)
		edgeDetect2 = 0;
		//updateHighScoreBoard();
		//playTheme();
	} */

	if (!key3 && (edgeDetect3 == 0)) {
  802b84:	00000b06 	br	802bb4 <handleKeyInput+0x19c>
		edgeDetect3 = 1;
	} else if (key3 && (edgeDetect3 == 1)) {
  802b88:	e0bfff07 	ldb	r2,-4(fp)
  802b8c:	1005003a 	cmpeq	r2,r2,zero
  802b90:	1000081e 	bne	r2,zero,802bb4 <handleKeyInput+0x19c>
  802b94:	d0a7250b 	ldhu	r2,-25452(gp)
  802b98:	10bfffcc 	andi	r2,r2,65535
  802b9c:	10a0001c 	xori	r2,r2,32768
  802ba0:	10a00004 	addi	r2,r2,-32768
  802ba4:	10800058 	cmpnei	r2,r2,1
  802ba8:	1000021e 	bne	r2,zero,802bb4 <handleKeyInput+0x19c>
		edgeDetect3 = 0;
  802bac:	d027250d 	sth	zero,-25452(gp)
		hitPlayer(); // TEST only
  802bb0:	08033400 	call	803340 <hitPlayer>
		//updateCurrentPlayerScore(250);
		//playSharkDeath();
	}
}
  802bb4:	e037883a 	mov	sp,fp
  802bb8:	dfc00217 	ldw	ra,8(sp)
  802bbc:	df000117 	ldw	fp,4(sp)
  802bc0:	dc000017 	ldw	r16,0(sp)
  802bc4:	dec00304 	addi	sp,sp,12
  802bc8:	f800283a 	ret

00802bcc <handleSwitchInput>:

void handleSwitchInput(void){
  802bcc:	defffe04 	addi	sp,sp,-8
  802bd0:	dfc00115 	stw	ra,4(sp)
  802bd4:	df000015 	stw	fp,0(sp)
  802bd8:	d839883a 	mov	fp,sp
	static char SWInput;
	static short int edgeDetect = 0;
	static char prevSwInput = 0x03;
	static short int scoresShown = 0;
	SWInput = IORD_8DIRECT(SWITCHES_BASE, 0);
  802bdc:	00804034 	movhi	r2,256
  802be0:	10841804 	addi	r2,r2,4192
  802be4:	10800023 	ldbuio	r2,0(r2)
  802be8:	d0a72885 	stb	r2,-25438(gp)

	if((SWInput & 0x0F) != (prevSwInput & 0x0F)) {
  802bec:	d0a72883 	ldbu	r2,-25438(gp)
  802bf0:	10803fcc 	andi	r2,r2,255
  802bf4:	10c003cc 	andi	r3,r2,15
  802bf8:	d0a00303 	ldbu	r2,-32756(gp)
  802bfc:	10803fcc 	andi	r2,r2,255
  802c00:	108003cc 	andi	r2,r2,15
  802c04:	18800526 	beq	r3,r2,802c1c <handleSwitchInput+0x50>
		updateAudioWithVolume(SWInput);
  802c08:	d0a72883 	ldbu	r2,-25438(gp)
  802c0c:	11003fcc 	andi	r4,r2,255
  802c10:	2100201c 	xori	r4,r4,128
  802c14:	213fe004 	addi	r4,r4,-128
  802c18:	0800d980 	call	800d98 <updateAudioWithVolume>
	}
	prevSwInput = SWInput;
  802c1c:	d0a72883 	ldbu	r2,-25438(gp)
  802c20:	d0a00305 	stb	r2,-32756(gp)

	if ((SWInput & 0x80) != 0) {
  802c24:	d0a72883 	ldbu	r2,-25438(gp)
  802c28:	10803fcc 	andi	r2,r2,255
  802c2c:	1080201c 	xori	r2,r2,128
  802c30:	10bfe004 	addi	r2,r2,-128
  802c34:	1004403a 	cmpge	r2,r2,zero
  802c38:	10000b1e 	bne	r2,zero,802c68 <handleSwitchInput+0x9c>
		if(scoresShown == 0){
  802c3c:	d0a7278b 	ldhu	r2,-25442(gp)
  802c40:	10bfffcc 	andi	r2,r2,65535
  802c44:	10a0001c 	xori	r2,r2,32768
  802c48:	10a00004 	addi	r2,r2,-32768
  802c4c:	1004c03a 	cmpne	r2,r2,zero
  802c50:	1000021e 	bne	r2,zero,802c5c <handleSwitchInput+0x90>
			readHighScoreBoardFromSD();
  802c54:	08034dc0 	call	8034dc <readHighScoreBoardFromSD>
			drawScore();
  802c58:	08040380 	call	804038 <drawScore>
		}
		scoresShown = 1;
  802c5c:	00800044 	movi	r2,1
  802c60:	d0a7278d 	sth	r2,-25442(gp)
  802c64:	00000906 	br	802c8c <handleSwitchInput+0xc0>
	} else {
		if(scoresShown == 1){
  802c68:	d0a7278b 	ldhu	r2,-25442(gp)
  802c6c:	10bfffcc 	andi	r2,r2,65535
  802c70:	10a0001c 	xori	r2,r2,32768
  802c74:	10a00004 	addi	r2,r2,-32768
  802c78:	10800058 	cmpnei	r2,r2,1
  802c7c:	1000021e 	bne	r2,zero,802c88 <handleSwitchInput+0xbc>
			clearScore();
  802c80:	08042700 	call	804270 <clearScore>
			drawInGameInfo();
  802c84:	080429c0 	call	80429c <drawInGameInfo>
		}
		scoresShown = 0;
  802c88:	d027278d 	sth	zero,-25442(gp)
	}

}
  802c8c:	e037883a 	mov	sp,fp
  802c90:	dfc00117 	ldw	ra,4(sp)
  802c94:	df000017 	ldw	fp,0(sp)
  802c98:	dec00204 	addi	sp,sp,8
  802c9c:	f800283a 	ret

00802ca0 <handleAtariInput>:

void handleAtariInput(void){
  802ca0:	defffd04 	addi	sp,sp,-12
  802ca4:	dfc00215 	stw	ra,8(sp)
  802ca8:	df000115 	stw	fp,4(sp)
  802cac:	dc000015 	stw	r16,0(sp)
  802cb0:	d839883a 	mov	fp,sp
	static char atariUp;
	static char atariDown;
	static char atariFire;
	static short int edgeDetect = 0;

	atariButtons = (IORD_8DIRECT(PROCESSORGPIN_BASE, 0) & 0x0F);
  802cb4:	00804034 	movhi	r2,256
  802cb8:	10842c04 	addi	r2,r2,4272
  802cbc:	10800023 	ldbuio	r2,0(r2)
  802cc0:	108003cc 	andi	r2,r2,15
  802cc4:	d0a72a45 	stb	r2,-25431(gp)
	atariFire = atariButtons & 0x08;
  802cc8:	d0a72a43 	ldbu	r2,-25431(gp)
  802ccc:	1080020c 	andi	r2,r2,8
  802cd0:	d0a72985 	stb	r2,-25434(gp)
	atariUp = atariButtons & 0x02;
  802cd4:	d0a72a43 	ldbu	r2,-25431(gp)
  802cd8:	1080008c 	andi	r2,r2,2
  802cdc:	d0a72a05 	stb	r2,-25432(gp)
	atariDown = atariButtons & 0x04;
  802ce0:	d0a72a43 	ldbu	r2,-25431(gp)
  802ce4:	1080010c 	andi	r2,r2,4
  802ce8:	d0a729c5 	stb	r2,-25433(gp)
	IOWR_16DIRECT(LEDS_BASE, 0, atariButtons);
  802cec:	d0a72a43 	ldbu	r2,-25431(gp)
  802cf0:	10c03fcc 	andi	r3,r2,255
  802cf4:	18c0201c 	xori	r3,r3,128
  802cf8:	18ffe004 	addi	r3,r3,-128
  802cfc:	00804034 	movhi	r2,256
  802d00:	10841c04 	addi	r2,r2,4208
  802d04:	10c0002d 	sthio	r3,0(r2)

	if ((atariFire == 0x00) && (edgeDetect == 0)) {
  802d08:	d0a72983 	ldbu	r2,-25434(gp)
  802d0c:	10803fcc 	andi	r2,r2,255
  802d10:	1080201c 	xori	r2,r2,128
  802d14:	10bfe004 	addi	r2,r2,-128
  802d18:	1004c03a 	cmpne	r2,r2,zero
  802d1c:	1000091e 	bne	r2,zero,802d44 <handleAtariInput+0xa4>
  802d20:	d0a7290b 	ldhu	r2,-25436(gp)
  802d24:	10bfffcc 	andi	r2,r2,65535
  802d28:	10a0001c 	xori	r2,r2,32768
  802d2c:	10a00004 	addi	r2,r2,-32768
  802d30:	1004c03a 	cmpne	r2,r2,zero
  802d34:	1000031e 	bne	r2,zero,802d44 <handleAtariInput+0xa4>
		edgeDetect = 1;
  802d38:	00800044 	movi	r2,1
  802d3c:	d0a7290d 	sth	r2,-25436(gp)
	atariFire = atariButtons & 0x08;
	atariUp = atariButtons & 0x02;
	atariDown = atariButtons & 0x04;
	IOWR_16DIRECT(LEDS_BASE, 0, atariButtons);

	if ((atariFire == 0x00) && (edgeDetect == 0)) {
  802d40:	00002706 	br	802de0 <handleAtariInput+0x140>
		edgeDetect = 1;
	} else if ((atariFire != 0x00) && (edgeDetect == 1)) {
  802d44:	d0a72983 	ldbu	r2,-25434(gp)
  802d48:	10803fcc 	andi	r2,r2,255
  802d4c:	1080201c 	xori	r2,r2,128
  802d50:	10bfe004 	addi	r2,r2,-128
  802d54:	1005003a 	cmpeq	r2,r2,zero
  802d58:	1000211e 	bne	r2,zero,802de0 <handleAtariInput+0x140>
  802d5c:	d0a7290b 	ldhu	r2,-25436(gp)
  802d60:	10bfffcc 	andi	r2,r2,65535
  802d64:	10a0001c 	xori	r2,r2,32768
  802d68:	10a00004 	addi	r2,r2,-32768
  802d6c:	10800058 	cmpnei	r2,r2,1
  802d70:	10001b1e 	bne	r2,zero,802de0 <handleAtariInput+0x140>
		edgeDetect = 0;
  802d74:	d027290d 	sth	zero,-25436(gp)
		createBullet(PLAYERBULLET, player.x + PLAYER_WIDTH + 1, player.y + 0.5 * PLAYER_HEIGHT);
  802d78:	008020b4 	movhi	r2,130
  802d7c:	10801604 	addi	r2,r2,88
  802d80:	10800017 	ldw	r2,0(r2)
  802d84:	140007c4 	addi	r16,r2,31
  802d88:	008020b4 	movhi	r2,130
  802d8c:	10801604 	addi	r2,r2,88
  802d90:	11000217 	ldw	r4,8(r2)
  802d94:	080852c0 	call	80852c <__floatsidf>
  802d98:	100b883a 	mov	r5,r2
  802d9c:	180d883a 	mov	r6,r3
  802da0:	2809883a 	mov	r4,r5
  802da4:	300b883a 	mov	r5,r6
  802da8:	000d883a 	mov	r6,zero
  802dac:	01d00bb4 	movhi	r7,16430
  802db0:	0807bf40 	call	807bf4 <__adddf3>
  802db4:	1009883a 	mov	r4,r2
  802db8:	180b883a 	mov	r5,r3
  802dbc:	2005883a 	mov	r2,r4
  802dc0:	2807883a 	mov	r3,r5
  802dc4:	1009883a 	mov	r4,r2
  802dc8:	180b883a 	mov	r5,r3
  802dcc:	08086240 	call	808624 <__fixdfsi>
  802dd0:	100d883a 	mov	r6,r2
  802dd4:	0009883a 	mov	r4,zero
  802dd8:	800b883a 	mov	r5,r16
  802ddc:	080185c0 	call	80185c <createBullet>
	}

	//movements - no edge detect
	if (atariUp != 0x00) {
  802de0:	d0a72a03 	ldbu	r2,-25432(gp)
  802de4:	10803fcc 	andi	r2,r2,255
  802de8:	1080201c 	xori	r2,r2,128
  802dec:	10bfe004 	addi	r2,r2,-128
  802df0:	1005003a 	cmpeq	r2,r2,zero
  802df4:	1000021e 	bne	r2,zero,802e00 <handleAtariInput+0x160>
		moveUpPlayer();
  802df8:	08031cc0 	call	8031cc <moveUpPlayer>
  802dfc:	00000906 	br	802e24 <handleAtariInput+0x184>
	} else if (atariDown != 0x00) {
  802e00:	d0a729c3 	ldbu	r2,-25433(gp)
  802e04:	10803fcc 	andi	r2,r2,255
  802e08:	1080201c 	xori	r2,r2,128
  802e0c:	10bfe004 	addi	r2,r2,-128
  802e10:	1005003a 	cmpeq	r2,r2,zero
  802e14:	1000021e 	bne	r2,zero,802e20 <handleAtariInput+0x180>
		moveDownPlayer();
  802e18:	08032580 	call	803258 <moveDownPlayer>
  802e1c:	00000106 	br	802e24 <handleAtariInput+0x184>
	} else {
		keepPlayerStationary();
  802e20:	08032e40 	call	8032e4 <keepPlayerStationary>
	}
}
  802e24:	e037883a 	mov	sp,fp
  802e28:	dfc00217 	ldw	ra,8(sp)
  802e2c:	df000117 	ldw	fp,4(sp)
  802e30:	dc000017 	ldw	r16,0(sp)
  802e34:	dec00304 	addi	sp,sp,12
  802e38:	f800283a 	ret

00802e3c <startGame>:

int startGame() {
  802e3c:	defffd04 	addi	sp,sp,-12
  802e40:	df000215 	stw	fp,8(sp)
  802e44:	df000204 	addi	fp,sp,8
	char atariButtons;
	char atariFire;

	atariButtons = (IORD_8DIRECT(KEYS_BASE, 0) & 0x0F);
  802e48:	00804034 	movhi	r2,256
  802e4c:	10842004 	addi	r2,r2,4224
  802e50:	10800023 	ldbuio	r2,0(r2)
  802e54:	108003cc 	andi	r2,r2,15
  802e58:	e0bffe45 	stb	r2,-7(fp)
	atariFire = atariButtons & 0x8;
  802e5c:	e0bffe43 	ldbu	r2,-7(fp)
  802e60:	1080020c 	andi	r2,r2,8
  802e64:	e0bffe05 	stb	r2,-8(fp)
	
	if (atariFire) {
  802e68:	e0bffe07 	ldb	r2,-8(fp)
  802e6c:	1005003a 	cmpeq	r2,r2,zero
  802e70:	1000031e 	bne	r2,zero,802e80 <startGame+0x44>
		return 1;
  802e74:	00800044 	movi	r2,1
  802e78:	e0bfff15 	stw	r2,-4(fp)
  802e7c:	00000106 	br	802e84 <startGame+0x48>
	} else {
		return 0;
  802e80:	e03fff15 	stw	zero,-4(fp)
  802e84:	e0bfff17 	ldw	r2,-4(fp)
	}
}
  802e88:	e037883a 	mov	sp,fp
  802e8c:	df000017 	ldw	fp,0(sp)
  802e90:	dec00104 	addi	sp,sp,4
  802e94:	f800283a 	ret

00802e98 <init_lcd>:
#include "lcd.h"

int init_lcd() {
  802e98:	defffd04 	addi	sp,sp,-12
  802e9c:	dfc00215 	stw	ra,8(sp)
  802ea0:	df000115 	stw	fp,4(sp)
  802ea4:	df000104 	addi	fp,sp,4
	// open the Character LCD port
	char_lcd_dev = alt_up_character_lcd_open_dev("/dev/character_lcd_0");
  802ea8:	010020b4 	movhi	r4,130
  802eac:	212ed004 	addi	r4,r4,-17600
  802eb0:	08144f00 	call	8144f0 <alt_up_character_lcd_open_dev>
  802eb4:	d0a72b15 	stw	r2,-25428(gp)

	if(char_lcd_dev == NULL) {
  802eb8:	d0a72b17 	ldw	r2,-25428(gp)
  802ebc:	1004c03a 	cmpne	r2,r2,zero
  802ec0:	1000031e 	bne	r2,zero,802ed0 <init_lcd+0x38>
		return -1;
  802ec4:	00bfffc4 	movi	r2,-1
  802ec8:	e0bfff15 	stw	r2,-4(fp)
  802ecc:	00000306 	br	802edc <init_lcd+0x44>
	}

	/* Initialize the character display */
	alt_up_character_lcd_init (char_lcd_dev);
  802ed0:	d1272b17 	ldw	r4,-25428(gp)
  802ed4:	08144bc0 	call	8144bc <alt_up_character_lcd_init>

	return 0;
  802ed8:	e03fff15 	stw	zero,-4(fp)
  802edc:	e0bfff17 	ldw	r2,-4(fp)
}
  802ee0:	e037883a 	mov	sp,fp
  802ee4:	dfc00117 	ldw	ra,4(sp)
  802ee8:	df000017 	ldw	fp,0(sp)
  802eec:	dec00204 	addi	sp,sp,8
  802ef0:	f800283a 	ret

00802ef4 <init>:
#define switches (volatile char *) 0x1001060
#define leds (char *) 0x1001070
#define keys (volatile char *) 0x1001080
#define atariInput (volatile char *) 0x10010b0

int init(void) {
  802ef4:	defffd04 	addi	sp,sp,-12
  802ef8:	dfc00215 	stw	ra,8(sp)
  802efc:	df000115 	stw	fp,4(sp)
  802f00:	df000104 	addi	fp,sp,4
	if (openSdCard() == -1) {
  802f04:	08044f80 	call	8044f8 <openSdCard>
  802f08:	10bfffd8 	cmpnei	r2,r2,-1
  802f0c:	1000061e 	bne	r2,zero,802f28 <init+0x34>
		printf("Error: Failed to open sd card\n");
  802f10:	010020b4 	movhi	r4,130
  802f14:	212ed604 	addi	r4,r4,-17576
  802f18:	08099640 	call	809964 <puts>
		return -1;
  802f1c:	00bfffc4 	movi	r2,-1
  802f20:	e0bfff15 	stw	r2,-4(fp)
  802f24:	00001c06 	br	802f98 <init+0xa4>
	} else {
		printf("Opened SD card\n");
  802f28:	010020b4 	movhi	r4,130
  802f2c:	212ede04 	addi	r4,r4,-17544
  802f30:	08099640 	call	809964 <puts>
	}

	if (init_lcd() == -1) {
  802f34:	0802e980 	call	802e98 <init_lcd>
  802f38:	10bfffd8 	cmpnei	r2,r2,-1
  802f3c:	1000061e 	bne	r2,zero,802f58 <init+0x64>
		printf("Error: could not open character LCD device\n");
  802f40:	010020b4 	movhi	r4,130
  802f44:	212ee204 	addi	r4,r4,-17528
  802f48:	08099640 	call	809964 <puts>
		return -1;
  802f4c:	00bfffc4 	movi	r2,-1
  802f50:	e0bfff15 	stw	r2,-4(fp)
  802f54:	00001006 	br	802f98 <init+0xa4>
	} else {
		printf("LCD Initialized\n");
  802f58:	010020b4 	movhi	r4,130
  802f5c:	212eed04 	addi	r4,r4,-17484
  802f60:	08099640 	call	809964 <puts>
	}

	initVga();
  802f64:	080530c0 	call	80530c <initVga>
	parseBmps();
  802f68:	08014fc0 	call	8014fc <parseBmps>
	drawSplashScreen();
  802f6c:	0804f340 	call	804f34 <drawSplashScreen>
	setupAudio();
  802f70:	08002040 	call	800204 <setupAudio>
	setupDisplacement();
  802f74:	08023280 	call	802328 <setupDisplacement>
	initScoreBoard();
  802f78:	08033d00 	call	8033d0 <initScoreBoard>

	initBullets();
  802f7c:	08017c40 	call	8017c4 <initBullets>
	initPlayer();
  802f80:	08030e80 	call	8030e8 <initPlayer>
	initSharks();
  802f84:	080486c0 	call	80486c <initSharks>

	setHardwareTimerPeriod(CLOCK_FREQ/30);
  802f88:	01000674 	movhi	r4,25
  802f8c:	211b9a84 	addi	r4,r4,28266
  802f90:	080523c0 	call	80523c <setHardwareTimerPeriod>
	return 0;
  802f94:	e03fff15 	stw	zero,-4(fp)
  802f98:	e0bfff17 	ldw	r2,-4(fp)
}
  802f9c:	e037883a 	mov	sp,fp
  802fa0:	dfc00117 	ldw	ra,4(sp)
  802fa4:	df000017 	ldw	fp,0(sp)
  802fa8:	dec00204 	addi	sp,sp,8
  802fac:	f800283a 	ret

00802fb0 <main>:

int main() {
  802fb0:	defffb04 	addi	sp,sp,-20
  802fb4:	dfc00415 	stw	ra,16(sp)
  802fb8:	df000315 	stw	fp,12(sp)
  802fbc:	df000304 	addi	fp,sp,12
	int count = 0;
  802fc0:	e03ffe15 	stw	zero,-8(fp)
	short int displaySplashScreen = 1;
  802fc4:	00800044 	movi	r2,1
  802fc8:	e0bffd0d 	sth	r2,-12(fp)

	if (init() == -1)
  802fcc:	0802ef40 	call	802ef4 <init>
  802fd0:	10bfffd8 	cmpnei	r2,r2,-1
  802fd4:	1000031e 	bne	r2,zero,802fe4 <main+0x34>
		return -1;
  802fd8:	00bfffc4 	movi	r2,-1
  802fdc:	e0bfff15 	stw	r2,-4(fp)
  802fe0:	00003b06 	br	8030d0 <main+0x120>

	setHardwareTimerPeriod(CLOCK_FREQ / 30);
  802fe4:	01000674 	movhi	r4,25
  802fe8:	211b9a84 	addi	r4,r4,28266
  802fec:	080523c0 	call	80523c <setHardwareTimerPeriod>

	createShark(22, 100, 0, (Displacement *)&doNotMove);
  802ff0:	01000584 	movi	r4,22
  802ff4:	01401904 	movi	r5,100
  802ff8:	000d883a 	mov	r6,zero
  802ffc:	01c020b4 	movhi	r7,130
  803000:	39c69a04 	addi	r7,r7,6760
  803004:	0804c1c0 	call	804c1c <createShark>
	createShark(45, 200, 200, (Displacement *)&doNotMove);
  803008:	01000b44 	movi	r4,45
  80300c:	01403204 	movi	r5,200
  803010:	01803204 	movi	r6,200
  803014:	01c020b4 	movhi	r7,130
  803018:	39c69a04 	addi	r7,r7,6760
  80301c:	0804c1c0 	call	804c1c <createShark>

	drawAllSharks();
  803020:	0804b7c0 	call	804b7c <drawAllSharks>
	startHardwareTimer();
  803024:	08052e00 	call	8052e0 <startHardwareTimer>

	printf("%d: count \n", count);
  803028:	010020b4 	movhi	r4,130
  80302c:	212ef104 	addi	r4,r4,-17468
  803030:	e17ffe17 	ldw	r5,-8(fp)
  803034:	080984c0 	call	80984c <printf>
  803038:	00000006 	br	80303c <main+0x8c>
	// main game loop;
	while(1) {
		if (hasHardwareTimerExpired() == 1) {
  80303c:	08052b80 	call	8052b8 <hasHardwareTimerExpired>
  803040:	10800058 	cmpnei	r2,r2,1
  803044:	103ffd1e 	bne	r2,zero,80303c <main+0x8c>
			startHardwareTimer();
  803048:	08052e00 	call	8052e0 <startHardwareTimer>

			if (displaySplashScreen) {
  80304c:	e0bffd0f 	ldh	r2,-12(fp)
  803050:	1005003a 	cmpeq	r2,r2,zero
  803054:	1000061e 	bne	r2,zero,803070 <main+0xc0>
				if(startGame()) {
  803058:	0802e3c0 	call	802e3c <startGame>
  80305c:	1005003a 	cmpeq	r2,r2,zero
  803060:	103ff61e 	bne	r2,zero,80303c <main+0x8c>
					clearSplashScreen();
  803064:	0804f800 	call	804f80 <clearSplashScreen>
					displaySplashScreen = 0;	
  803068:	e03ffd0d 	sth	zero,-12(fp)
  80306c:	003ff306 	br	80303c <main+0x8c>
				}
			} else {
				count++;
  803070:	e0bffe17 	ldw	r2,-8(fp)
  803074:	10800044 	addi	r2,r2,1
  803078:	e0bffe15 	stw	r2,-8(fp)

				moveAllSharks();
  80307c:	0804b2c0 	call	804b2c <moveAllSharks>
				drawAllSharks();
  803080:	0804b7c0 	call	804b7c <drawAllSharks>
				drawInGameInfo(); // TBD: in actual game loop, only call this function when an event happens (like score inc/dec, or lives inc/dec)
  803084:	080429c0 	call	80429c <drawInGameInfo>

				handleKeyInput();
  803088:	0802a180 	call	802a18 <handleKeyInput>
				handleSwitchInput();
  80308c:	0802bcc0 	call	802bcc <handleSwitchInput>
				//handleAtariInput();

				moveAllBullets();
  803090:	0801aa00 	call	801aa0 <moveAllBullets>

				cleanupDeadSharks();
  803094:	0804e180 	call	804e18 <cleanupDeadSharks>

				doSharkBulletCollision();
  803098:	08021ec0 	call	8021ec <doSharkBulletCollision>
				doPlayerBulletCollision();
  80309c:	080228c0 	call	80228c <doPlayerBulletCollision>

				drawAllBullets();
  8030a0:	0801b680 	call	801b68 <drawAllBullets>

				alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  8030a4:	d1271917 	ldw	r4,-25500(gp)
  8030a8:	0814e780 	call	814e78 <alt_up_pixel_buffer_dma_swap_buffers>
				while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  8030ac:	d1271917 	ldw	r4,-25500(gp)
  8030b0:	0814ed00 	call	814ed0 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  8030b4:	1004c03a 	cmpne	r2,r2,zero
  8030b8:	103ffc1e 	bne	r2,zero,8030ac <main+0xfc>
				cleanupDeadSharks();
  8030bc:	0804e180 	call	804e18 <cleanupDeadSharks>
				eraseAllSharks();
  8030c0:	0804bcc0 	call	804bcc <eraseAllSharks>
				eraseAllBullets();
  8030c4:	0801bec0 	call	801bec <eraseAllBullets>
				erasePlayer();
  8030c8:	08031880 	call	803188 <erasePlayer>
			}
		}
	}
  8030cc:	003fdb06 	br	80303c <main+0x8c>

	freeBmps();
	return 0;
}
  8030d0:	e0bfff17 	ldw	r2,-4(fp)
  8030d4:	e037883a 	mov	sp,fp
  8030d8:	dfc00117 	ldw	ra,4(sp)
  8030dc:	df000017 	ldw	fp,0(sp)
  8030e0:	dec00204 	addi	sp,sp,8
  8030e4:	f800283a 	ret

008030e8 <initPlayer>:
#include "player.h"
#include "audio.h"
#include "score.h"

void initPlayer() {
  8030e8:	deffff04 	addi	sp,sp,-4
  8030ec:	df000015 	stw	fp,0(sp)
  8030f0:	d839883a 	mov	fp,sp
	player.x = 10;
  8030f4:	00c020b4 	movhi	r3,130
  8030f8:	18c01604 	addi	r3,r3,88
  8030fc:	00800284 	movi	r2,10
  803100:	18800015 	stw	r2,0(r3)
	player.y = 90;
  803104:	00c020b4 	movhi	r3,130
  803108:	18c01604 	addi	r3,r3,88
  80310c:	00801684 	movi	r2,90
  803110:	18800215 	stw	r2,8(r3)
	player.prevX = 10;
  803114:	00c020b4 	movhi	r3,130
  803118:	18c01604 	addi	r3,r3,88
  80311c:	00800284 	movi	r2,10
  803120:	18800115 	stw	r2,4(r3)
	player.prevY = 90;
  803124:	00c020b4 	movhi	r3,130
  803128:	18c01604 	addi	r3,r3,88
  80312c:	00801684 	movi	r2,90
  803130:	18800315 	stw	r2,12(r3)
}
  803134:	e037883a 	mov	sp,fp
  803138:	df000017 	ldw	fp,0(sp)
  80313c:	dec00104 	addi	sp,sp,4
  803140:	f800283a 	ret

00803144 <drawPlayer>:

void drawPlayer() {
  803144:	defffe04 	addi	sp,sp,-8
  803148:	dfc00115 	stw	ra,4(sp)
  80314c:	df000015 	stw	fp,0(sp)
  803150:	d839883a 	mov	fp,sp
	drawBmp(playerBmp, player.x, player.y);
  803154:	d1271a17 	ldw	r4,-25496(gp)
  803158:	008020b4 	movhi	r2,130
  80315c:	10801604 	addi	r2,r2,88
  803160:	11400017 	ldw	r5,0(r2)
  803164:	008020b4 	movhi	r2,130
  803168:	10801604 	addi	r2,r2,88
  80316c:	11800217 	ldw	r6,8(r2)
  803170:	08015f80 	call	8015f8 <drawBmp>
}
  803174:	e037883a 	mov	sp,fp
  803178:	dfc00117 	ldw	ra,4(sp)
  80317c:	df000017 	ldw	fp,0(sp)
  803180:	dec00204 	addi	sp,sp,8
  803184:	f800283a 	ret

00803188 <erasePlayer>:

void erasePlayer() {
  803188:	defffe04 	addi	sp,sp,-8
  80318c:	dfc00115 	stw	ra,4(sp)
  803190:	df000015 	stw	fp,0(sp)
  803194:	d839883a 	mov	fp,sp
	eraseBmp(playerBmp, player.prevX, player.prevY);
  803198:	d1271a17 	ldw	r4,-25496(gp)
  80319c:	008020b4 	movhi	r2,130
  8031a0:	10801604 	addi	r2,r2,88
  8031a4:	11400117 	ldw	r5,4(r2)
  8031a8:	008020b4 	movhi	r2,130
  8031ac:	10801604 	addi	r2,r2,88
  8031b0:	11800317 	ldw	r6,12(r2)
  8031b4:	08017640 	call	801764 <eraseBmp>
}
  8031b8:	e037883a 	mov	sp,fp
  8031bc:	dfc00117 	ldw	ra,4(sp)
  8031c0:	df000017 	ldw	fp,0(sp)
  8031c4:	dec00204 	addi	sp,sp,8
  8031c8:	f800283a 	ret

008031cc <moveUpPlayer>:

void moveUpPlayer() {
  8031cc:	defffe04 	addi	sp,sp,-8
  8031d0:	dfc00115 	stw	ra,4(sp)
  8031d4:	df000015 	stw	fp,0(sp)
  8031d8:	d839883a 	mov	fp,sp
	player.prevY = player.y;
  8031dc:	008020b4 	movhi	r2,130
  8031e0:	10801604 	addi	r2,r2,88
  8031e4:	10c00217 	ldw	r3,8(r2)
  8031e8:	008020b4 	movhi	r2,130
  8031ec:	10801604 	addi	r2,r2,88
  8031f0:	10c00315 	stw	r3,12(r2)

	if (player.y > 0)
  8031f4:	008020b4 	movhi	r2,130
  8031f8:	10801604 	addi	r2,r2,88
  8031fc:	10800217 	ldw	r2,8(r2)
  803200:	10800050 	cmplti	r2,r2,1
  803204:	1000071e 	bne	r2,zero,803224 <moveUpPlayer+0x58>
		player.y = player.y - 2;
  803208:	008020b4 	movhi	r2,130
  80320c:	10801604 	addi	r2,r2,88
  803210:	10800217 	ldw	r2,8(r2)
  803214:	10ffff84 	addi	r3,r2,-2
  803218:	008020b4 	movhi	r2,130
  80321c:	10801604 	addi	r2,r2,88
  803220:	10c00215 	stw	r3,8(r2)

	drawBmp(playerBmp, player.x, player.y);
  803224:	d1271a17 	ldw	r4,-25496(gp)
  803228:	008020b4 	movhi	r2,130
  80322c:	10801604 	addi	r2,r2,88
  803230:	11400017 	ldw	r5,0(r2)
  803234:	008020b4 	movhi	r2,130
  803238:	10801604 	addi	r2,r2,88
  80323c:	11800217 	ldw	r6,8(r2)
  803240:	08015f80 	call	8015f8 <drawBmp>
}
  803244:	e037883a 	mov	sp,fp
  803248:	dfc00117 	ldw	ra,4(sp)
  80324c:	df000017 	ldw	fp,0(sp)
  803250:	dec00204 	addi	sp,sp,8
  803254:	f800283a 	ret

00803258 <moveDownPlayer>:
void moveDownPlayer()
{
  803258:	defffe04 	addi	sp,sp,-8
  80325c:	dfc00115 	stw	ra,4(sp)
  803260:	df000015 	stw	fp,0(sp)
  803264:	d839883a 	mov	fp,sp
	player.prevY = player.y;
  803268:	008020b4 	movhi	r2,130
  80326c:	10801604 	addi	r2,r2,88
  803270:	10c00217 	ldw	r3,8(r2)
  803274:	008020b4 	movhi	r2,130
  803278:	10801604 	addi	r2,r2,88
  80327c:	10c00315 	stw	r3,12(r2)

	if (player.y < SCREEN_HEIGHT - PLAYER_HEIGHT)
  803280:	008020b4 	movhi	r2,130
  803284:	10801604 	addi	r2,r2,88
  803288:	10800217 	ldw	r2,8(r2)
  80328c:	10803488 	cmpgei	r2,r2,210
  803290:	1000071e 	bne	r2,zero,8032b0 <moveDownPlayer+0x58>
		player.y = player.y + 2;
  803294:	008020b4 	movhi	r2,130
  803298:	10801604 	addi	r2,r2,88
  80329c:	10800217 	ldw	r2,8(r2)
  8032a0:	10c00084 	addi	r3,r2,2
  8032a4:	008020b4 	movhi	r2,130
  8032a8:	10801604 	addi	r2,r2,88
  8032ac:	10c00215 	stw	r3,8(r2)

	drawBmp(playerBmp, player.x, player.y);
  8032b0:	d1271a17 	ldw	r4,-25496(gp)
  8032b4:	008020b4 	movhi	r2,130
  8032b8:	10801604 	addi	r2,r2,88
  8032bc:	11400017 	ldw	r5,0(r2)
  8032c0:	008020b4 	movhi	r2,130
  8032c4:	10801604 	addi	r2,r2,88
  8032c8:	11800217 	ldw	r6,8(r2)
  8032cc:	08015f80 	call	8015f8 <drawBmp>
}
  8032d0:	e037883a 	mov	sp,fp
  8032d4:	dfc00117 	ldw	ra,4(sp)
  8032d8:	df000017 	ldw	fp,0(sp)
  8032dc:	dec00204 	addi	sp,sp,8
  8032e0:	f800283a 	ret

008032e4 <keepPlayerStationary>:

void keepPlayerStationary() {
  8032e4:	defffe04 	addi	sp,sp,-8
  8032e8:	dfc00115 	stw	ra,4(sp)
  8032ec:	df000015 	stw	fp,0(sp)
  8032f0:	d839883a 	mov	fp,sp
	player.prevY = player.y;
  8032f4:	008020b4 	movhi	r2,130
  8032f8:	10801604 	addi	r2,r2,88
  8032fc:	10c00217 	ldw	r3,8(r2)
  803300:	008020b4 	movhi	r2,130
  803304:	10801604 	addi	r2,r2,88
  803308:	10c00315 	stw	r3,12(r2)
	drawBmp(playerBmp, player.x, player.y);
  80330c:	d1271a17 	ldw	r4,-25496(gp)
  803310:	008020b4 	movhi	r2,130
  803314:	10801604 	addi	r2,r2,88
  803318:	11400017 	ldw	r5,0(r2)
  80331c:	008020b4 	movhi	r2,130
  803320:	10801604 	addi	r2,r2,88
  803324:	11800217 	ldw	r6,8(r2)
  803328:	08015f80 	call	8015f8 <drawBmp>
}
  80332c:	e037883a 	mov	sp,fp
  803330:	dfc00117 	ldw	ra,4(sp)
  803334:	df000017 	ldw	fp,0(sp)
  803338:	dec00204 	addi	sp,sp,8
  80333c:	f800283a 	ret

00803340 <hitPlayer>:

void hitPlayer() {
  803340:	defffd04 	addi	sp,sp,-12
  803344:	dfc00215 	stw	ra,8(sp)
  803348:	df000115 	stw	fp,4(sp)
  80334c:	df000104 	addi	fp,sp,4
	int playerLives = getCurrentPlayerLives();
  803350:	08040140 	call	804014 <getCurrentPlayerLives>
  803354:	e0bfff15 	stw	r2,-4(fp)
	if (playerLives > 1) {
  803358:	e0bfff17 	ldw	r2,-4(fp)
  80335c:	10800090 	cmplti	r2,r2,2
  803360:	1000041e 	bne	r2,zero,803374 <hitPlayer+0x34>
		setCurrentPlayerLives(playerLives - 1);
  803364:	e0bfff17 	ldw	r2,-4(fp)
  803368:	113fffc4 	addi	r4,r2,-1
  80336c:	0803fe80 	call	803fe8 <setCurrentPlayerLives>
  803370:	00000706 	br	803390 <hitPlayer+0x50>
	} else if (playerLives == 1) {
  803374:	e0bfff17 	ldw	r2,-4(fp)
  803378:	10800058 	cmpnei	r2,r2,1
  80337c:	1000041e 	bne	r2,zero,803390 <hitPlayer+0x50>
		setCurrentPlayerLives(playerLives - 1);
  803380:	e0bfff17 	ldw	r2,-4(fp)
  803384:	113fffc4 	addi	r4,r2,-1
  803388:	0803fe80 	call	803fe8 <setCurrentPlayerLives>
		killPlayer();
  80338c:	08033a80 	call	8033a8 <killPlayer>
	}
	drawInGameInfo();
  803390:	080429c0 	call	80429c <drawInGameInfo>
}
  803394:	e037883a 	mov	sp,fp
  803398:	dfc00117 	ldw	ra,4(sp)
  80339c:	df000017 	ldw	fp,0(sp)
  8033a0:	dec00204 	addi	sp,sp,8
  8033a4:	f800283a 	ret

008033a8 <killPlayer>:

void killPlayer() {
  8033a8:	defffe04 	addi	sp,sp,-8
  8033ac:	dfc00115 	stw	ra,4(sp)
  8033b0:	df000015 	stw	fp,0(sp)
  8033b4:	d839883a 	mov	fp,sp
	playPlayerDeath();
  8033b8:	0800b880 	call	800b88 <playPlayerDeath>
	//updateHighScoreBoard();
	// Some game over stuff
}
  8033bc:	e037883a 	mov	sp,fp
  8033c0:	dfc00117 	ldw	ra,4(sp)
  8033c4:	df000017 	ldw	fp,0(sp)
  8033c8:	dec00204 	addi	sp,sp,8
  8033cc:	f800283a 	ret

008033d0 <initScoreBoard>:

char * scoreFileName = "scores.txt";
struct scores * gameScores;

//set all gameScores values to initial values - read all high score board info from SD card.
void initScoreBoard(void) {
  8033d0:	defffe04 	addi	sp,sp,-8
  8033d4:	dfc00115 	stw	ra,4(sp)
  8033d8:	df000015 	stw	fp,0(sp)
  8033dc:	d839883a 	mov	fp,sp
	alt_up_char_buffer_clear(char_buffer); // clear screen
  8033e0:	d1271517 	ldw	r4,-25516(gp)
  8033e4:	0814be40 	call	814be4 <alt_up_char_buffer_clear>
	gameScores = malloc(sizeof(struct scores));
  8033e8:	01001404 	movi	r4,80
  8033ec:	08090f80 	call	8090f8 <malloc>
  8033f0:	d0a72c15 	stw	r2,-25424(gp)
	printf("gameScoresTemp is at: %x\n", (unsigned int)gameScores);
  8033f4:	d0a72c17 	ldw	r2,-25424(gp)
  8033f8:	100b883a 	mov	r5,r2
  8033fc:	010020b4 	movhi	r4,130
  803400:	212ef704 	addi	r4,r4,-17444
  803404:	080984c0 	call	80984c <printf>

	gameScores->currentPlayerScore = 0; // TBD - set to 0 - testing code by setting to other values.
  803408:	d0a72c17 	ldw	r2,-25424(gp)
  80340c:	10000015 	stw	zero,0(r2)
	gameScores->currentPlayerLives = INITIALLIVES;
  803410:	d0e72c17 	ldw	r3,-25424(gp)
  803414:	008000c4 	movi	r2,3
  803418:	18800115 	stw	r2,4(r3)
	readHighScoreBoardFromSD();
  80341c:	08034dc0 	call	8034dc <readHighScoreBoardFromSD>
}
  803420:	e037883a 	mov	sp,fp
  803424:	dfc00117 	ldw	ra,4(sp)
  803428:	df000017 	ldw	fp,0(sp)
  80342c:	dec00204 	addi	sp,sp,8
  803430:	f800283a 	ret

00803434 <defaultHighScoreBoard>:

//set high score values to defaults - used if reading the SD card fails.s
void defaultHighScoreBoard(void) {
  803434:	defffd04 	addi	sp,sp,-12
  803438:	df000215 	stw	fp,8(sp)
  80343c:	df000204 	addi	fp,sp,8
	int i,j;
	for(i = 0; i < NUMSCORES; i++) {
  803440:	e03fff15 	stw	zero,-4(fp)
  803444:	00001e06 	br	8034c0 <defaultHighScoreBoard+0x8c>
		gameScores->highScoreBoard[i] = 1;
  803448:	d0e72c17 	ldw	r3,-25424(gp)
  80344c:	e0bfff17 	ldw	r2,-4(fp)
  803450:	1085883a 	add	r2,r2,r2
  803454:	1085883a 	add	r2,r2,r2
  803458:	10c5883a 	add	r2,r2,r3
  80345c:	10c00204 	addi	r3,r2,8
  803460:	00800044 	movi	r2,1
  803464:	18800015 	stw	r2,0(r3)
		for(j = 0; j < NUMINITIALS; j++) {
  803468:	e03ffe15 	stw	zero,-8(fp)
  80346c:	00000e06 	br	8034a8 <defaultHighScoreBoard+0x74>
			gameScores->highScoreBoardInits[i][j] = 'X';
  803470:	d1672c17 	ldw	r5,-25424(gp)
  803474:	e0ffff17 	ldw	r3,-4(fp)
  803478:	e13ffe17 	ldw	r4,-8(fp)
  80347c:	1805883a 	mov	r2,r3
  803480:	1085883a 	add	r2,r2,r2
  803484:	10c5883a 	add	r2,r2,r3
  803488:	1145883a 	add	r2,r2,r5
  80348c:	1105883a 	add	r2,r2,r4
  803490:	10c00c04 	addi	r3,r2,48
  803494:	00801604 	movi	r2,88
  803498:	18800005 	stb	r2,0(r3)
//set high score values to defaults - used if reading the SD card fails.s
void defaultHighScoreBoard(void) {
	int i,j;
	for(i = 0; i < NUMSCORES; i++) {
		gameScores->highScoreBoard[i] = 1;
		for(j = 0; j < NUMINITIALS; j++) {
  80349c:	e0bffe17 	ldw	r2,-8(fp)
  8034a0:	10800044 	addi	r2,r2,1
  8034a4:	e0bffe15 	stw	r2,-8(fp)
  8034a8:	e0bffe17 	ldw	r2,-8(fp)
  8034ac:	108000d0 	cmplti	r2,r2,3
  8034b0:	103fef1e 	bne	r2,zero,803470 <defaultHighScoreBoard+0x3c>
}

//set high score values to defaults - used if reading the SD card fails.s
void defaultHighScoreBoard(void) {
	int i,j;
	for(i = 0; i < NUMSCORES; i++) {
  8034b4:	e0bfff17 	ldw	r2,-4(fp)
  8034b8:	10800044 	addi	r2,r2,1
  8034bc:	e0bfff15 	stw	r2,-4(fp)
  8034c0:	e0bfff17 	ldw	r2,-4(fp)
  8034c4:	10800290 	cmplti	r2,r2,10
  8034c8:	103fdf1e 	bne	r2,zero,803448 <defaultHighScoreBoard+0x14>
		for(j = 0; j < NUMINITIALS; j++) {
			gameScores->highScoreBoardInits[i][j] = 'X';
		}
	}
	return;
}
  8034cc:	e037883a 	mov	sp,fp
  8034d0:	df000017 	ldw	fp,0(sp)
  8034d4:	dec00104 	addi	sp,sp,4
  8034d8:	f800283a 	ret

008034dc <readHighScoreBoardFromSD>:

//returns -1 on error in reading scoreboard (and also defaults all current values), returns 0 on success.
//function updates all gameScores' variables so that reading them have the most up to date values
int readHighScoreBoardFromSD(void) {
  8034dc:	deffe904 	addi	sp,sp,-92
  8034e0:	dfc01615 	stw	ra,88(sp)
  8034e4:	df001515 	stw	fp,84(sp)
  8034e8:	dcc01415 	stw	r19,80(sp)
  8034ec:	dc801315 	stw	r18,76(sp)
  8034f0:	dc401215 	stw	r17,72(sp)
  8034f4:	dc001115 	stw	r16,68(sp)
  8034f8:	df001104 	addi	fp,sp,68
	gameScores->currentScoreBoardCorrupt = 0;
  8034fc:	d0a72c17 	ldw	r2,-25424(gp)
  803500:	10001385 	stb	zero,78(r2)

	short int fileHandle = openFile(scoreFileName);
  803504:	d1200417 	ldw	r4,-32752(gp)
  803508:	08045580 	call	804558 <openFile>
  80350c:	e0bff48d 	sth	r2,-46(fp)
	if (fileHandle == -1) {
  803510:	e0bff48f 	ldh	r2,-46(fp)
  803514:	10bfffd8 	cmpnei	r2,r2,-1
  803518:	10000b1e 	bne	r2,zero,803548 <readHighScoreBoardFromSD+0x6c>
		printf("Error opening %s\n", scoreFileName);
  80351c:	d1600417 	ldw	r5,-32752(gp)
  803520:	010020b4 	movhi	r4,130
  803524:	212efe04 	addi	r4,r4,-17416
  803528:	080984c0 	call	80984c <printf>
		defaultHighScoreBoard();
  80352c:	08034340 	call	803434 <defaultHighScoreBoard>
		gameScores->currentScoreBoardCorrupt = 1;
  803530:	d0e72c17 	ldw	r3,-25424(gp)
  803534:	00800044 	movi	r2,1
  803538:	18801385 	stb	r2,78(r3)
		return -1;
  80353c:	00bfffc4 	movi	r2,-1
  803540:	e0bfff15 	stw	r2,-4(fp)
  803544:	0000b006 	br	803808 <readHighScoreBoardFromSD+0x32c>
	char readValue;
	int currentScore;
	int numDigits;
	int scoreBuffer[MAXSCOREDIGITS];
	int i,j,k;
	for(i = 0; i < NUMSCORES; i++) {
  803548:	e03ff115 	stw	zero,-60(fp)
  80354c:	0000a806 	br	8037f0 <readHighScoreBoardFromSD+0x314>
		for(j = 0; j < NUMINITIALS; j++){
  803550:	e03ff015 	stw	zero,-64(fp)
  803554:	00001106 	br	80359c <readHighScoreBoardFromSD+0xc0>
			readValue = readByte(fileHandle);
  803558:	e13ff48f 	ldh	r4,-46(fp)
  80355c:	08045c80 	call	8045c8 <readByte>
  803560:	e0bff405 	stb	r2,-48(fp)
			gameScores->highScoreBoardInits[i][j] = readValue;
  803564:	d1272c17 	ldw	r4,-25424(gp)
  803568:	e0fff117 	ldw	r3,-60(fp)
  80356c:	e17ff017 	ldw	r5,-64(fp)
  803570:	e1bff403 	ldbu	r6,-48(fp)
  803574:	1805883a 	mov	r2,r3
  803578:	1085883a 	add	r2,r2,r2
  80357c:	10c5883a 	add	r2,r2,r3
  803580:	1105883a 	add	r2,r2,r4
  803584:	1145883a 	add	r2,r2,r5
  803588:	10800c04 	addi	r2,r2,48
  80358c:	11800005 	stb	r6,0(r2)
	int currentScore;
	int numDigits;
	int scoreBuffer[MAXSCOREDIGITS];
	int i,j,k;
	for(i = 0; i < NUMSCORES; i++) {
		for(j = 0; j < NUMINITIALS; j++){
  803590:	e0bff017 	ldw	r2,-64(fp)
  803594:	10800044 	addi	r2,r2,1
  803598:	e0bff015 	stw	r2,-64(fp)
  80359c:	e0bff017 	ldw	r2,-64(fp)
  8035a0:	108000d0 	cmplti	r2,r2,3
  8035a4:	103fec1e 	bne	r2,zero,803558 <readHighScoreBoardFromSD+0x7c>
			readValue = readByte(fileHandle);
			gameScores->highScoreBoardInits[i][j] = readValue;
		}
		readValue = readByte(fileHandle);
  8035a8:	e13ff48f 	ldh	r4,-46(fp)
  8035ac:	08045c80 	call	8045c8 <readByte>
  8035b0:	e0bff405 	stb	r2,-48(fp)

		if(readValue != 0x20) {
  8035b4:	e0bff407 	ldb	r2,-48(fp)
  8035b8:	10800820 	cmpeqi	r2,r2,32
  8035bc:	10000d1e 	bne	r2,zero,8035f4 <readHighScoreBoardFromSD+0x118>
			closeFile(fileHandle);
  8035c0:	e13ff48f 	ldh	r4,-46(fp)
  8035c4:	08045980 	call	804598 <closeFile>
			printf("Error within %s - file not initialized to proper format. Scoreboard defaulted.", scoreFileName);
  8035c8:	d1600417 	ldw	r5,-32752(gp)
  8035cc:	010020b4 	movhi	r4,130
  8035d0:	212f0304 	addi	r4,r4,-17396
  8035d4:	080984c0 	call	80984c <printf>
			defaultHighScoreBoard();
  8035d8:	08034340 	call	803434 <defaultHighScoreBoard>
			gameScores->currentScoreBoardCorrupt = 1;
  8035dc:	d0e72c17 	ldw	r3,-25424(gp)
  8035e0:	00800044 	movi	r2,1
  8035e4:	18801385 	stb	r2,78(r3)
			return -1;
  8035e8:	00ffffc4 	movi	r3,-1
  8035ec:	e0ffff15 	stw	r3,-4(fp)
  8035f0:	00008506 	br	803808 <readHighScoreBoardFromSD+0x32c>
		}

		//clear score buffer - which is used in order to convert unknown number of chars into an int.
		for(k = 0; k < MAXSCOREDIGITS; k++){
  8035f4:	e03fef15 	stw	zero,-68(fp)
  8035f8:	00000b06 	br	803628 <readHighScoreBoardFromSD+0x14c>
			scoreBuffer[k] = -1;
  8035fc:	e0bfef17 	ldw	r2,-68(fp)
  803600:	1085883a 	add	r2,r2,r2
  803604:	1085883a 	add	r2,r2,r2
  803608:	e13fef04 	addi	r4,fp,-68
  80360c:	1105883a 	add	r2,r2,r4
  803610:	10c00604 	addi	r3,r2,24
  803614:	00bfffc4 	movi	r2,-1
  803618:	18800015 	stw	r2,0(r3)
			gameScores->currentScoreBoardCorrupt = 1;
			return -1;
		}

		//clear score buffer - which is used in order to convert unknown number of chars into an int.
		for(k = 0; k < MAXSCOREDIGITS; k++){
  80361c:	e0bfef17 	ldw	r2,-68(fp)
  803620:	10800044 	addi	r2,r2,1
  803624:	e0bfef15 	stw	r2,-68(fp)
  803628:	e0bfef17 	ldw	r2,-68(fp)
  80362c:	10800290 	cmplti	r2,r2,10
  803630:	103ff21e 	bne	r2,zero,8035fc <readHighScoreBoardFromSD+0x120>
			scoreBuffer[k] = -1;
		}

		numDigits = 0;
  803634:	e03ff215 	stw	zero,-56(fp)
		while((readValue = readByte(fileHandle)) != 0x20 && numDigits < MAXSCOREDIGITS) { //loop until space found
  803638:	00000b06 	br	803668 <readHighScoreBoardFromSD+0x18c>
			scoreBuffer[numDigits] = readValue;
  80363c:	e0bff217 	ldw	r2,-56(fp)
  803640:	e0fff407 	ldb	r3,-48(fp)
  803644:	1085883a 	add	r2,r2,r2
  803648:	1085883a 	add	r2,r2,r2
  80364c:	e13fef04 	addi	r4,fp,-68
  803650:	1105883a 	add	r2,r2,r4
  803654:	10800604 	addi	r2,r2,24
  803658:	10c00015 	stw	r3,0(r2)
			numDigits++;
  80365c:	e0bff217 	ldw	r2,-56(fp)
  803660:	10800044 	addi	r2,r2,1
  803664:	e0bff215 	stw	r2,-56(fp)
		for(k = 0; k < MAXSCOREDIGITS; k++){
			scoreBuffer[k] = -1;
		}

		numDigits = 0;
		while((readValue = readByte(fileHandle)) != 0x20 && numDigits < MAXSCOREDIGITS) { //loop until space found
  803668:	e13ff48f 	ldh	r4,-46(fp)
  80366c:	08045c80 	call	8045c8 <readByte>
  803670:	e0bff405 	stb	r2,-48(fp)
  803674:	e0bff407 	ldb	r2,-48(fp)
  803678:	10800820 	cmpeqi	r2,r2,32
  80367c:	1000031e 	bne	r2,zero,80368c <readHighScoreBoardFromSD+0x1b0>
  803680:	e0bff217 	ldw	r2,-56(fp)
  803684:	10800290 	cmplti	r2,r2,10
  803688:	103fec1e 	bne	r2,zero,80363c <readHighScoreBoardFromSD+0x160>
			scoreBuffer[numDigits] = readValue;
			numDigits++;
		}
		if(readValue != 0x20) {
  80368c:	e0bff407 	ldb	r2,-48(fp)
  803690:	10800820 	cmpeqi	r2,r2,32
  803694:	10000d1e 	bne	r2,zero,8036cc <readHighScoreBoardFromSD+0x1f0>
			closeFile(fileHandle);
  803698:	e13ff48f 	ldh	r4,-46(fp)
  80369c:	08045980 	call	804598 <closeFile>
			printf("Error within %s - file not initialized to proper format. Scoreboard defaulted.", scoreFileName);
  8036a0:	d1600417 	ldw	r5,-32752(gp)
  8036a4:	010020b4 	movhi	r4,130
  8036a8:	212f0304 	addi	r4,r4,-17396
  8036ac:	080984c0 	call	80984c <printf>
			defaultHighScoreBoard();
  8036b0:	08034340 	call	803434 <defaultHighScoreBoard>
			gameScores->currentScoreBoardCorrupt = 1;
  8036b4:	d0e72c17 	ldw	r3,-25424(gp)
  8036b8:	00800044 	movi	r2,1
  8036bc:	18801385 	stb	r2,78(r3)
			return -1;
  8036c0:	00bfffc4 	movi	r2,-1
  8036c4:	e0bfff15 	stw	r2,-4(fp)
  8036c8:	00004f06 	br	803808 <readHighScoreBoardFromSD+0x32c>
		}

		//use scoreBuffer values (stored in char values) into a meaningful integer, currentScore.
		currentScore = 0;
  8036cc:	e03ff315 	stw	zero,-52(fp)
		for(k = 0; k < numDigits; k++) {
  8036d0:	e03fef15 	stw	zero,-68(fp)
  8036d4:	00003806 	br	8037b8 <readHighScoreBoardFromSD+0x2dc>
			currentScore += (scoreBuffer[k] - '0') * pow(10,(numDigits - 1 - k));
  8036d8:	e13ff317 	ldw	r4,-52(fp)
  8036dc:	080852c0 	call	80852c <__floatsidf>
  8036e0:	1025883a 	mov	r18,r2
  8036e4:	1827883a 	mov	r19,r3
  8036e8:	e0bfef17 	ldw	r2,-68(fp)
  8036ec:	1085883a 	add	r2,r2,r2
  8036f0:	1085883a 	add	r2,r2,r2
  8036f4:	e0ffef04 	addi	r3,fp,-68
  8036f8:	10c5883a 	add	r2,r2,r3
  8036fc:	10800604 	addi	r2,r2,24
  803700:	10800017 	ldw	r2,0(r2)
  803704:	113ff404 	addi	r4,r2,-48
  803708:	080852c0 	call	80852c <__floatsidf>
  80370c:	1021883a 	mov	r16,r2
  803710:	1823883a 	mov	r17,r3
  803714:	e0fff217 	ldw	r3,-56(fp)
  803718:	e0bfef17 	ldw	r2,-68(fp)
  80371c:	1885c83a 	sub	r2,r3,r2
  803720:	113fffc4 	addi	r4,r2,-1
  803724:	080852c0 	call	80852c <__floatsidf>
  803728:	100f883a 	mov	r7,r2
  80372c:	1811883a 	mov	r8,r3
  803730:	0009883a 	mov	r4,zero
  803734:	01500934 	movhi	r5,16420
  803738:	380d883a 	mov	r6,r7
  80373c:	400f883a 	mov	r7,r8
  803740:	08056240 	call	805624 <pow>
  803744:	1009883a 	mov	r4,r2
  803748:	180b883a 	mov	r5,r3
  80374c:	2005883a 	mov	r2,r4
  803750:	2807883a 	mov	r3,r5
  803754:	8009883a 	mov	r4,r16
  803758:	880b883a 	mov	r5,r17
  80375c:	100d883a 	mov	r6,r2
  803760:	180f883a 	mov	r7,r3
  803764:	0807c680 	call	807c68 <__muldf3>
  803768:	1009883a 	mov	r4,r2
  80376c:	180b883a 	mov	r5,r3
  803770:	2005883a 	mov	r2,r4
  803774:	2807883a 	mov	r3,r5
  803778:	9009883a 	mov	r4,r18
  80377c:	980b883a 	mov	r5,r19
  803780:	100d883a 	mov	r6,r2
  803784:	180f883a 	mov	r7,r3
  803788:	0807bf40 	call	807bf4 <__adddf3>
  80378c:	1009883a 	mov	r4,r2
  803790:	180b883a 	mov	r5,r3
  803794:	2005883a 	mov	r2,r4
  803798:	2807883a 	mov	r3,r5
  80379c:	1009883a 	mov	r4,r2
  8037a0:	180b883a 	mov	r5,r3
  8037a4:	08086240 	call	808624 <__fixdfsi>
  8037a8:	e0bff315 	stw	r2,-52(fp)
			return -1;
		}

		//use scoreBuffer values (stored in char values) into a meaningful integer, currentScore.
		currentScore = 0;
		for(k = 0; k < numDigits; k++) {
  8037ac:	e0bfef17 	ldw	r2,-68(fp)
  8037b0:	10800044 	addi	r2,r2,1
  8037b4:	e0bfef15 	stw	r2,-68(fp)
  8037b8:	e0ffef17 	ldw	r3,-68(fp)
  8037bc:	e0bff217 	ldw	r2,-56(fp)
  8037c0:	18bfc516 	blt	r3,r2,8036d8 <readHighScoreBoardFromSD+0x1fc>
			currentScore += (scoreBuffer[k] - '0') * pow(10,(numDigits - 1 - k));
		}
		gameScores->highScoreBoard[i] = currentScore;
  8037c4:	d0e72c17 	ldw	r3,-25424(gp)
  8037c8:	e0bff117 	ldw	r2,-60(fp)
  8037cc:	1085883a 	add	r2,r2,r2
  8037d0:	1085883a 	add	r2,r2,r2
  8037d4:	10c5883a 	add	r2,r2,r3
  8037d8:	10c00204 	addi	r3,r2,8
  8037dc:	e0bff317 	ldw	r2,-52(fp)
  8037e0:	18800015 	stw	r2,0(r3)
	char readValue;
	int currentScore;
	int numDigits;
	int scoreBuffer[MAXSCOREDIGITS];
	int i,j,k;
	for(i = 0; i < NUMSCORES; i++) {
  8037e4:	e0bff117 	ldw	r2,-60(fp)
  8037e8:	10800044 	addi	r2,r2,1
  8037ec:	e0bff115 	stw	r2,-60(fp)
  8037f0:	e0bff117 	ldw	r2,-60(fp)
  8037f4:	10800290 	cmplti	r2,r2,10
  8037f8:	103f551e 	bne	r2,zero,803550 <readHighScoreBoardFromSD+0x74>
			currentScore += (scoreBuffer[k] - '0') * pow(10,(numDigits - 1 - k));
		}
		gameScores->highScoreBoard[i] = currentScore;
	}

	closeFile(fileHandle);
  8037fc:	e13ff48f 	ldh	r4,-46(fp)
  803800:	08045980 	call	804598 <closeFile>
	return 0;
  803804:	e03fff15 	stw	zero,-4(fp)
  803808:	e0bfff17 	ldw	r2,-4(fp)
}
  80380c:	e037883a 	mov	sp,fp
  803810:	dfc00517 	ldw	ra,20(sp)
  803814:	df000417 	ldw	fp,16(sp)
  803818:	dcc00317 	ldw	r19,12(sp)
  80381c:	dc800217 	ldw	r18,8(sp)
  803820:	dc400117 	ldw	r17,4(sp)
  803824:	dc000017 	ldw	r16,0(sp)
  803828:	dec00604 	addi	sp,sp,24
  80382c:	f800283a 	ret

00803830 <updateHighScoreBoard>:

//function writes to the SD card, and places current players score into the high scores if
//it exceeds any of the current high scores.
//function returns if the highScore file doesnt open in memory, or if the currentScoreBoard is corrupt.
void updateHighScoreBoard(void) {
  803830:	defff604 	addi	sp,sp,-40
  803834:	dfc00915 	stw	ra,36(sp)
  803838:	df000815 	stw	fp,32(sp)
  80383c:	dc400715 	stw	r17,28(sp)
  803840:	dc000615 	stw	r16,24(sp)
  803844:	df000604 	addi	fp,sp,24
	int playerScore = getCurrentPlayerScore();
  803848:	0803fc40 	call	803fc4 <getCurrentPlayerScore>
  80384c:	e0bfff15 	stw	r2,-4(fp)
	unsigned short i,j;
	short scoreReplaceIndex = -1;
  803850:	00bfffc4 	movi	r2,-1
  803854:	e0bffd8d 	sth	r2,-10(fp)
	unsigned short firstDigitFound = 0;
  803858:	e03ffd0d 	sth	zero,-12(fp)
	unsigned short digit;
	short int fileHandle = openFile(scoreFileName);
  80385c:	d1200417 	ldw	r4,-32752(gp)
  803860:	08045580 	call	804558 <openFile>
  803864:	e0bffc0d 	sth	r2,-16(fp)
	if (fileHandle == -1 || gameScores == NULL || gameScores->currentScoreBoardCorrupt == 1) {
  803868:	e0bffc0f 	ldh	r2,-16(fp)
  80386c:	10bfffe0 	cmpeqi	r2,r2,-1
  803870:	1000081e 	bne	r2,zero,803894 <updateHighScoreBoard+0x64>
  803874:	d0a72c17 	ldw	r2,-25424(gp)
  803878:	1005003a 	cmpeq	r2,r2,zero
  80387c:	1000051e 	bne	r2,zero,803894 <updateHighScoreBoard+0x64>
  803880:	d0a72c17 	ldw	r2,-25424(gp)
  803884:	10801383 	ldbu	r2,78(r2)
  803888:	10803fcc 	andi	r2,r2,255
  80388c:	10800058 	cmpnei	r2,r2,1
  803890:	1000051e 	bne	r2,zero,8038a8 <updateHighScoreBoard+0x78>
		printf("Error opening %s\n", scoreFileName);
  803894:	d1600417 	ldw	r5,-32752(gp)
  803898:	010020b4 	movhi	r4,130
  80389c:	212efe04 	addi	r4,r4,-17416
  8038a0:	080984c0 	call	80984c <printf>
		return;
  8038a4:	0000fe06 	br	803ca0 <updateHighScoreBoard+0x470>
	}

	//determine if playerScore is better than any high scores
	for(i = 0; i < NUMSCORES; i++) {
  8038a8:	e03ffe8d 	sth	zero,-6(fp)
  8038ac:	00001406 	br	803900 <updateHighScoreBoard+0xd0>
		if(playerScore > gameScores->highScoreBoard[i]) {
  8038b0:	d0e72c17 	ldw	r3,-25424(gp)
  8038b4:	e0bffe8b 	ldhu	r2,-6(fp)
  8038b8:	1085883a 	add	r2,r2,r2
  8038bc:	1085883a 	add	r2,r2,r2
  8038c0:	10c5883a 	add	r2,r2,r3
  8038c4:	10800204 	addi	r2,r2,8
  8038c8:	10c00017 	ldw	r3,0(r2)
  8038cc:	e0bfff17 	ldw	r2,-4(fp)
  8038d0:	1880080e 	bge	r3,r2,8038f4 <updateHighScoreBoard+0xc4>
			printf("I found a score, %d, that is higher than other scores. Index %d\n", playerScore, i);
  8038d4:	e1bffe8b 	ldhu	r6,-6(fp)
  8038d8:	010020b4 	movhi	r4,130
  8038dc:	212f1704 	addi	r4,r4,-17316
  8038e0:	e17fff17 	ldw	r5,-4(fp)
  8038e4:	080984c0 	call	80984c <printf>
			scoreReplaceIndex = i;
  8038e8:	e0bffe8b 	ldhu	r2,-6(fp)
  8038ec:	e0bffd8d 	sth	r2,-10(fp)
			break; // current index needs to be replaced by
  8038f0:	00000606 	br	80390c <updateHighScoreBoard+0xdc>
		printf("Error opening %s\n", scoreFileName);
		return;
	}

	//determine if playerScore is better than any high scores
	for(i = 0; i < NUMSCORES; i++) {
  8038f4:	e0bffe8b 	ldhu	r2,-6(fp)
  8038f8:	10800044 	addi	r2,r2,1
  8038fc:	e0bffe8d 	sth	r2,-6(fp)
  803900:	e0bffe8b 	ldhu	r2,-6(fp)
  803904:	108002b0 	cmpltui	r2,r2,10
  803908:	103fe91e 	bne	r2,zero,8038b0 <updateHighScoreBoard+0x80>
			break; // current index needs to be replaced by
		}
	}

	//if playerScore is better than a high score, re-write to the SD card, placing currentPlayerScore in the file.
	if(scoreReplaceIndex != -1) {
  80390c:	e0bffd8f 	ldh	r2,-10(fp)
  803910:	10bfffe0 	cmpeqi	r2,r2,-1
  803914:	1000df1e 	bne	r2,zero,803c94 <updateHighScoreBoard+0x464>
		int loopCount = NUMSCORES;
  803918:	00800284 	movi	r2,10
  80391c:	e0bffb15 	stw	r2,-20(fp)
		for(i = 0; i < loopCount; i++) {
  803920:	e03ffe8d 	sth	zero,-6(fp)
  803924:	0000d806 	br	803c88 <updateHighScoreBoard+0x458>
			if(i == scoreReplaceIndex){
  803928:	e0fffe8b 	ldhu	r3,-6(fp)
  80392c:	e0bffd8f 	ldh	r2,-10(fp)
  803930:	18806e1e 	bne	r3,r2,803aec <updateHighScoreBoard+0x2bc>
				printf("replacing score code at index %d\n", i);
  803934:	e17ffe8b 	ldhu	r5,-6(fp)
  803938:	010020b4 	movhi	r4,130
  80393c:	212f2804 	addi	r4,r4,-17248
  803940:	080984c0 	call	80984c <printf>

				char * newInitials = malloc(3*sizeof(char));
  803944:	010000c4 	movi	r4,3
  803948:	08090f80 	call	8090f8 <malloc>
  80394c:	e0bffa15 	stw	r2,-24(fp)
				*newInitials = '-';
  803950:	e0fffa17 	ldw	r3,-24(fp)
  803954:	00800b44 	movi	r2,45
  803958:	18800005 	stb	r2,0(r3)
				*(newInitials + 1) = '-';
  80395c:	e0bffa17 	ldw	r2,-24(fp)
  803960:	10c00044 	addi	r3,r2,1
  803964:	00800b44 	movi	r2,45
  803968:	18800005 	stb	r2,0(r3)
				*(newInitials + 2) = '-';
  80396c:	e0bffa17 	ldw	r2,-24(fp)
  803970:	10c00084 	addi	r3,r2,2
  803974:	00800b44 	movi	r2,45
  803978:	18800005 	stb	r2,0(r3)
				obtainUserInitials(newInitials);
  80397c:	e13ffa17 	ldw	r4,-24(fp)
  803980:	0803cbc0 	call	803cbc <obtainUserInitials>
				for(j = 0; j < NUMINITIALS; j++){
  803984:	e03ffe0d 	sth	zero,-8(fp)
  803988:	00000d06 	br	8039c0 <updateHighScoreBoard+0x190>
					alt_up_sd_card_write(fileHandle, newInitials[j]);
  80398c:	e13ffc0f 	ldh	r4,-16(fp)
  803990:	e0bffe0b 	ldhu	r2,-8(fp)
  803994:	1007883a 	mov	r3,r2
  803998:	e0bffa17 	ldw	r2,-24(fp)
  80399c:	1885883a 	add	r2,r3,r2
  8039a0:	10800003 	ldbu	r2,0(r2)
  8039a4:	11403fcc 	andi	r5,r2,255
  8039a8:	2940201c 	xori	r5,r5,128
  8039ac:	297fe004 	addi	r5,r5,-128
  8039b0:	0819df00 	call	819df0 <alt_up_sd_card_write>
				char * newInitials = malloc(3*sizeof(char));
				*newInitials = '-';
				*(newInitials + 1) = '-';
				*(newInitials + 2) = '-';
				obtainUserInitials(newInitials);
				for(j = 0; j < NUMINITIALS; j++){
  8039b4:	e0bffe0b 	ldhu	r2,-8(fp)
  8039b8:	10800044 	addi	r2,r2,1
  8039bc:	e0bffe0d 	sth	r2,-8(fp)
  8039c0:	e0bffe0b 	ldhu	r2,-8(fp)
  8039c4:	108000f0 	cmpltui	r2,r2,3
  8039c8:	103ff01e 	bne	r2,zero,80398c <updateHighScoreBoard+0x15c>
					alt_up_sd_card_write(fileHandle, newInitials[j]);
				}
				free(newInitials);
  8039cc:	e13ffa17 	ldw	r4,-24(fp)
  8039d0:	08090e40 	call	8090e4 <free>

				alt_up_sd_card_write(fileHandle, ' ');
  8039d4:	e13ffc0f 	ldh	r4,-16(fp)
  8039d8:	01400804 	movi	r5,32
  8039dc:	0819df00 	call	819df0 <alt_up_sd_card_write>
				firstDigitFound = 0;
  8039e0:	e03ffd0d 	sth	zero,-12(fp)
				for(j = 0; j < MAXSCOREDIGITS; j++){
  8039e4:	e03ffe0d 	sth	zero,-8(fp)
  8039e8:	00003706 	br	803ac8 <updateHighScoreBoard+0x298>
					digit = ((int)(gameScores->currentPlayerScore / pow(10,(MAXSCOREDIGITS - 1 - j)))%10);
  8039ec:	d0a72c17 	ldw	r2,-25424(gp)
  8039f0:	11000017 	ldw	r4,0(r2)
  8039f4:	080852c0 	call	80852c <__floatsidf>
  8039f8:	1021883a 	mov	r16,r2
  8039fc:	1823883a 	mov	r17,r3
  803a00:	e0fffe0b 	ldhu	r3,-8(fp)
  803a04:	00800244 	movi	r2,9
  803a08:	10c9c83a 	sub	r4,r2,r3
  803a0c:	080852c0 	call	80852c <__floatsidf>
  803a10:	100f883a 	mov	r7,r2
  803a14:	1811883a 	mov	r8,r3
  803a18:	0009883a 	mov	r4,zero
  803a1c:	01500934 	movhi	r5,16420
  803a20:	380d883a 	mov	r6,r7
  803a24:	400f883a 	mov	r7,r8
  803a28:	08056240 	call	805624 <pow>
  803a2c:	100f883a 	mov	r7,r2
  803a30:	1811883a 	mov	r8,r3
  803a34:	8009883a 	mov	r4,r16
  803a38:	880b883a 	mov	r5,r17
  803a3c:	380d883a 	mov	r6,r7
  803a40:	400f883a 	mov	r7,r8
  803a44:	080802c0 	call	80802c <__divdf3>
  803a48:	1009883a 	mov	r4,r2
  803a4c:	180b883a 	mov	r5,r3
  803a50:	2005883a 	mov	r2,r4
  803a54:	2807883a 	mov	r3,r5
  803a58:	1009883a 	mov	r4,r2
  803a5c:	180b883a 	mov	r5,r3
  803a60:	08086240 	call	808624 <__fixdfsi>
  803a64:	1009883a 	mov	r4,r2
  803a68:	01400284 	movi	r5,10
  803a6c:	08088100 	call	808810 <__modsi3>
  803a70:	e0bffc8d 	sth	r2,-14(fp)
					if(digit != 0 && firstDigitFound == 0){
  803a74:	e0bffc8b 	ldhu	r2,-14(fp)
  803a78:	1005003a 	cmpeq	r2,r2,zero
  803a7c:	1000051e 	bne	r2,zero,803a94 <updateHighScoreBoard+0x264>
  803a80:	e0bffd0b 	ldhu	r2,-12(fp)
  803a84:	1004c03a 	cmpne	r2,r2,zero
  803a88:	1000021e 	bne	r2,zero,803a94 <updateHighScoreBoard+0x264>
						firstDigitFound = 1;
  803a8c:	00800044 	movi	r2,1
  803a90:	e0bffd0d 	sth	r2,-12(fp)
					}
					if(firstDigitFound == 1){
  803a94:	e0bffd0b 	ldhu	r2,-12(fp)
  803a98:	10800058 	cmpnei	r2,r2,1
  803a9c:	1000071e 	bne	r2,zero,803abc <updateHighScoreBoard+0x28c>
						alt_up_sd_card_write(fileHandle, (digit + '0'));
  803aa0:	e13ffc0f 	ldh	r4,-16(fp)
  803aa4:	e0bffc8b 	ldhu	r2,-14(fp)
  803aa8:	10800c04 	addi	r2,r2,48
  803aac:	11403fcc 	andi	r5,r2,255
  803ab0:	2940201c 	xori	r5,r5,128
  803ab4:	297fe004 	addi	r5,r5,-128
  803ab8:	0819df00 	call	819df0 <alt_up_sd_card_write>
				}
				free(newInitials);

				alt_up_sd_card_write(fileHandle, ' ');
				firstDigitFound = 0;
				for(j = 0; j < MAXSCOREDIGITS; j++){
  803abc:	e0bffe0b 	ldhu	r2,-8(fp)
  803ac0:	10800044 	addi	r2,r2,1
  803ac4:	e0bffe0d 	sth	r2,-8(fp)
  803ac8:	e0bffe0b 	ldhu	r2,-8(fp)
  803acc:	108002b0 	cmpltui	r2,r2,10
  803ad0:	103fc61e 	bne	r2,zero,8039ec <updateHighScoreBoard+0x1bc>
					}
					if(firstDigitFound == 1){
						alt_up_sd_card_write(fileHandle, (digit + '0'));
					}
				}
				alt_up_sd_card_write(fileHandle, ' ');
  803ad4:	e13ffc0f 	ldh	r4,-16(fp)
  803ad8:	01400804 	movi	r5,32
  803adc:	0819df00 	call	819df0 <alt_up_sd_card_write>
				loopCount--;
  803ae0:	e0bffb17 	ldw	r2,-20(fp)
  803ae4:	10bfffc4 	addi	r2,r2,-1
  803ae8:	e0bffb15 	stw	r2,-20(fp)
			}

			printf("writing high scores, in main loop, i = %d\n", i);
  803aec:	e17ffe8b 	ldhu	r5,-6(fp)
  803af0:	010020b4 	movhi	r4,130
  803af4:	212f3104 	addi	r4,r4,-17212
  803af8:	080984c0 	call	80984c <printf>
			//write scores that are currently saved as high scores back to SD card in correct position.
			for(j = 0; j < NUMINITIALS; j++){
  803afc:	e03ffe0d 	sth	zero,-8(fp)
  803b00:	00001306 	br	803b50 <updateHighScoreBoard+0x320>
				alt_up_sd_card_write(fileHandle, gameScores->highScoreBoardInits[i][j]);
  803b04:	e1bffc0f 	ldh	r6,-16(fp)
  803b08:	d1672c17 	ldw	r5,-25424(gp)
  803b0c:	e0fffe8b 	ldhu	r3,-6(fp)
  803b10:	e13ffe0b 	ldhu	r4,-8(fp)
  803b14:	1805883a 	mov	r2,r3
  803b18:	1085883a 	add	r2,r2,r2
  803b1c:	10c5883a 	add	r2,r2,r3
  803b20:	1145883a 	add	r2,r2,r5
  803b24:	1105883a 	add	r2,r2,r4
  803b28:	10800c04 	addi	r2,r2,48
  803b2c:	10800003 	ldbu	r2,0(r2)
  803b30:	11403fcc 	andi	r5,r2,255
  803b34:	2940201c 	xori	r5,r5,128
  803b38:	297fe004 	addi	r5,r5,-128
  803b3c:	3009883a 	mov	r4,r6
  803b40:	0819df00 	call	819df0 <alt_up_sd_card_write>
				loopCount--;
			}

			printf("writing high scores, in main loop, i = %d\n", i);
			//write scores that are currently saved as high scores back to SD card in correct position.
			for(j = 0; j < NUMINITIALS; j++){
  803b44:	e0bffe0b 	ldhu	r2,-8(fp)
  803b48:	10800044 	addi	r2,r2,1
  803b4c:	e0bffe0d 	sth	r2,-8(fp)
  803b50:	e0bffe0b 	ldhu	r2,-8(fp)
  803b54:	108000f0 	cmpltui	r2,r2,3
  803b58:	103fea1e 	bne	r2,zero,803b04 <updateHighScoreBoard+0x2d4>
				alt_up_sd_card_write(fileHandle, gameScores->highScoreBoardInits[i][j]);
			}
			alt_up_sd_card_write(fileHandle, ' ');
  803b5c:	e13ffc0f 	ldh	r4,-16(fp)
  803b60:	01400804 	movi	r5,32
  803b64:	0819df00 	call	819df0 <alt_up_sd_card_write>
			firstDigitFound = 0;
  803b68:	e03ffd0d 	sth	zero,-12(fp)
			for(j = 0; j < MAXSCOREDIGITS; j++){
  803b6c:	e03ffe0d 	sth	zero,-8(fp)
  803b70:	00003c06 	br	803c64 <updateHighScoreBoard+0x434>
				digit = ((int)(gameScores->highScoreBoard[i] / pow(10,(MAXSCOREDIGITS - 1 - j)))%10);
  803b74:	d0e72c17 	ldw	r3,-25424(gp)
  803b78:	e0bffe8b 	ldhu	r2,-6(fp)
  803b7c:	1085883a 	add	r2,r2,r2
  803b80:	1085883a 	add	r2,r2,r2
  803b84:	10c5883a 	add	r2,r2,r3
  803b88:	10800204 	addi	r2,r2,8
  803b8c:	11000017 	ldw	r4,0(r2)
  803b90:	080852c0 	call	80852c <__floatsidf>
  803b94:	1021883a 	mov	r16,r2
  803b98:	1823883a 	mov	r17,r3
  803b9c:	e0fffe0b 	ldhu	r3,-8(fp)
  803ba0:	00800244 	movi	r2,9
  803ba4:	10c9c83a 	sub	r4,r2,r3
  803ba8:	080852c0 	call	80852c <__floatsidf>
  803bac:	100f883a 	mov	r7,r2
  803bb0:	1811883a 	mov	r8,r3
  803bb4:	0009883a 	mov	r4,zero
  803bb8:	01500934 	movhi	r5,16420
  803bbc:	380d883a 	mov	r6,r7
  803bc0:	400f883a 	mov	r7,r8
  803bc4:	08056240 	call	805624 <pow>
  803bc8:	100f883a 	mov	r7,r2
  803bcc:	1811883a 	mov	r8,r3
  803bd0:	8009883a 	mov	r4,r16
  803bd4:	880b883a 	mov	r5,r17
  803bd8:	380d883a 	mov	r6,r7
  803bdc:	400f883a 	mov	r7,r8
  803be0:	080802c0 	call	80802c <__divdf3>
  803be4:	1009883a 	mov	r4,r2
  803be8:	180b883a 	mov	r5,r3
  803bec:	2005883a 	mov	r2,r4
  803bf0:	2807883a 	mov	r3,r5
  803bf4:	1009883a 	mov	r4,r2
  803bf8:	180b883a 	mov	r5,r3
  803bfc:	08086240 	call	808624 <__fixdfsi>
  803c00:	1009883a 	mov	r4,r2
  803c04:	01400284 	movi	r5,10
  803c08:	08088100 	call	808810 <__modsi3>
  803c0c:	e0bffc8d 	sth	r2,-14(fp)
				if(digit != 0 && firstDigitFound == 0){
  803c10:	e0bffc8b 	ldhu	r2,-14(fp)
  803c14:	1005003a 	cmpeq	r2,r2,zero
  803c18:	1000051e 	bne	r2,zero,803c30 <updateHighScoreBoard+0x400>
  803c1c:	e0bffd0b 	ldhu	r2,-12(fp)
  803c20:	1004c03a 	cmpne	r2,r2,zero
  803c24:	1000021e 	bne	r2,zero,803c30 <updateHighScoreBoard+0x400>
					firstDigitFound = 1;
  803c28:	00800044 	movi	r2,1
  803c2c:	e0bffd0d 	sth	r2,-12(fp)
				}
				if(firstDigitFound == 1){
  803c30:	e0bffd0b 	ldhu	r2,-12(fp)
  803c34:	10800058 	cmpnei	r2,r2,1
  803c38:	1000071e 	bne	r2,zero,803c58 <updateHighScoreBoard+0x428>
					alt_up_sd_card_write(fileHandle, (digit + '0'));
  803c3c:	e13ffc0f 	ldh	r4,-16(fp)
  803c40:	e0bffc8b 	ldhu	r2,-14(fp)
  803c44:	10800c04 	addi	r2,r2,48
  803c48:	11403fcc 	andi	r5,r2,255
  803c4c:	2940201c 	xori	r5,r5,128
  803c50:	297fe004 	addi	r5,r5,-128
  803c54:	0819df00 	call	819df0 <alt_up_sd_card_write>
			for(j = 0; j < NUMINITIALS; j++){
				alt_up_sd_card_write(fileHandle, gameScores->highScoreBoardInits[i][j]);
			}
			alt_up_sd_card_write(fileHandle, ' ');
			firstDigitFound = 0;
			for(j = 0; j < MAXSCOREDIGITS; j++){
  803c58:	e0bffe0b 	ldhu	r2,-8(fp)
  803c5c:	10800044 	addi	r2,r2,1
  803c60:	e0bffe0d 	sth	r2,-8(fp)
  803c64:	e0bffe0b 	ldhu	r2,-8(fp)
  803c68:	108002b0 	cmpltui	r2,r2,10
  803c6c:	103fc11e 	bne	r2,zero,803b74 <updateHighScoreBoard+0x344>
				}
				if(firstDigitFound == 1){
					alt_up_sd_card_write(fileHandle, (digit + '0'));
				}
			}
			alt_up_sd_card_write(fileHandle, ' ');
  803c70:	e13ffc0f 	ldh	r4,-16(fp)
  803c74:	01400804 	movi	r5,32
  803c78:	0819df00 	call	819df0 <alt_up_sd_card_write>
	}

	//if playerScore is better than a high score, re-write to the SD card, placing currentPlayerScore in the file.
	if(scoreReplaceIndex != -1) {
		int loopCount = NUMSCORES;
		for(i = 0; i < loopCount; i++) {
  803c7c:	e0bffe8b 	ldhu	r2,-6(fp)
  803c80:	10800044 	addi	r2,r2,1
  803c84:	e0bffe8d 	sth	r2,-6(fp)
  803c88:	e0fffe8b 	ldhu	r3,-6(fp)
  803c8c:	e0bffb17 	ldw	r2,-20(fp)
  803c90:	18bf2516 	blt	r3,r2,803928 <updateHighScoreBoard+0xf8>
			}
			alt_up_sd_card_write(fileHandle, ' ');
		}
	}

	closeFile(fileHandle);
  803c94:	e13ffc0f 	ldh	r4,-16(fp)
  803c98:	08045980 	call	804598 <closeFile>

	//reload new written data back into game memory.
	readHighScoreBoardFromSD();
  803c9c:	08034dc0 	call	8034dc <readHighScoreBoardFromSD>

	return;
}
  803ca0:	e037883a 	mov	sp,fp
  803ca4:	dfc00317 	ldw	ra,12(sp)
  803ca8:	df000217 	ldw	fp,8(sp)
  803cac:	dc400117 	ldw	r17,4(sp)
  803cb0:	dc000017 	ldw	r16,0(sp)
  803cb4:	dec00404 	addi	sp,sp,16
  803cb8:	f800283a 	ret

00803cbc <obtainUserInitials>:

//get user input for initials if they are on the high score board
void obtainUserInitials(char * initials){
  803cbc:	defff504 	addi	sp,sp,-44
  803cc0:	dfc00a15 	stw	ra,40(sp)
  803cc4:	df000915 	stw	fp,36(sp)
  803cc8:	df000904 	addi	fp,sp,36
  803ccc:	e13fff15 	stw	r4,-4(fp)

	int numInitials = 3;
  803cd0:	008000c4 	movi	r2,3
  803cd4:	e0bffe15 	stw	r2,-8(fp)
	unsigned int charChoice = 0;
  803cd8:	e03ffd15 	stw	zero,-12(fp)
	int i;
	char keyInput;
	short int edgeDetect0 = 0;
  803cdc:	e03ffb0d 	sth	zero,-20(fp)
	short int edgeDetect1 = 0;
  803ce0:	e03ffa8d 	sth	zero,-22(fp)
	short int edgeDetect2 = 0;
  803ce4:	e03ffa0d 	sth	zero,-24(fp)
	keyInput = IORD_8DIRECT(KEYS_BASE, 0);
  803ce8:	00804034 	movhi	r2,256
  803cec:	10842004 	addi	r2,r2,4224
  803cf0:	10800023 	ldbuio	r2,0(r2)
  803cf4:	e0bffb85 	stb	r2,-18(fp)
	char key0 = keyInput & 0x01;
  803cf8:	e0bffb83 	ldbu	r2,-18(fp)
  803cfc:	1080004c 	andi	r2,r2,1
  803d00:	e0bff985 	stb	r2,-26(fp)
	char key1 = keyInput & 0x02;
  803d04:	e0bffb83 	ldbu	r2,-18(fp)
  803d08:	1080008c 	andi	r2,r2,2
  803d0c:	e0bff945 	stb	r2,-27(fp)
	char key2 = keyInput & 0x04;
  803d10:	e0bffb83 	ldbu	r2,-18(fp)
  803d14:	1080010c 	andi	r2,r2,4
  803d18:	e0bff905 	stb	r2,-28(fp)
	int xPos = 20;
  803d1c:	00800504 	movi	r2,20
  803d20:	e0bff815 	stw	r2,-32(fp)
	int yPos = 20;
  803d24:	00800504 	movi	r2,20
  803d28:	e0bff715 	stw	r2,-36(fp)

	//0x41 + x(0-25) is alphabet in ascii.
	alt_up_char_buffer_string(char_buffer, "NEW HIGH SCORE!!!", xPos, yPos-3);
  803d2c:	d1271517 	ldw	r4,-25516(gp)
  803d30:	e1bff817 	ldw	r6,-32(fp)
  803d34:	e0bff717 	ldw	r2,-36(fp)
  803d38:	10bfff44 	addi	r2,r2,-3
  803d3c:	100f883a 	mov	r7,r2
  803d40:	014020b4 	movhi	r5,130
  803d44:	296f3c04 	addi	r5,r5,-17168
  803d48:	0814ad00 	call	814ad0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "use key1 to go up, key2 to go down,", xPos, yPos-2);
  803d4c:	d1271517 	ldw	r4,-25516(gp)
  803d50:	e1bff817 	ldw	r6,-32(fp)
  803d54:	e0bff717 	ldw	r2,-36(fp)
  803d58:	10bfff84 	addi	r2,r2,-2
  803d5c:	100f883a 	mov	r7,r2
  803d60:	014020b4 	movhi	r5,130
  803d64:	296f4104 	addi	r5,r5,-17148
  803d68:	0814ad00 	call	814ad0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "and key0 to lock in choice:", xPos, yPos-1);
  803d6c:	d1271517 	ldw	r4,-25516(gp)
  803d70:	e1bff817 	ldw	r6,-32(fp)
  803d74:	e0bff717 	ldw	r2,-36(fp)
  803d78:	10bfffc4 	addi	r2,r2,-1
  803d7c:	100f883a 	mov	r7,r2
  803d80:	014020b4 	movhi	r5,130
  803d84:	296f4a04 	addi	r5,r5,-17112
  803d88:	0814ad00 	call	814ad0 <alt_up_char_buffer_string>
	for(i = 0; i < numInitials; i++) {
  803d8c:	e03ffc15 	stw	zero,-16(fp)
  803d90:	00006006 	br	803f14 <obtainUserInitials+0x258>
		charChoice = 0;
  803d94:	e03ffd15 	stw	zero,-12(fp)
		while(1) {
			keyInput = IORD_8DIRECT(KEYS_BASE, 0);
  803d98:	00804034 	movhi	r2,256
  803d9c:	10842004 	addi	r2,r2,4224
  803da0:	10800023 	ldbuio	r2,0(r2)
  803da4:	e0bffb85 	stb	r2,-18(fp)
			key0 = keyInput & 0x01;
  803da8:	e0bffb83 	ldbu	r2,-18(fp)
  803dac:	1080004c 	andi	r2,r2,1
  803db0:	e0bff985 	stb	r2,-26(fp)
			key1 = keyInput & 0x02;
  803db4:	e0bffb83 	ldbu	r2,-18(fp)
  803db8:	1080008c 	andi	r2,r2,2
  803dbc:	e0bff945 	stb	r2,-27(fp)
			key2 = keyInput & 0x04;
  803dc0:	e0bffb83 	ldbu	r2,-18(fp)
  803dc4:	1080010c 	andi	r2,r2,4
  803dc8:	e0bff905 	stb	r2,-28(fp)

			alt_up_char_buffer_string(char_buffer, initials, xPos, yPos);
  803dcc:	d1271517 	ldw	r4,-25516(gp)
  803dd0:	e1bff817 	ldw	r6,-32(fp)
  803dd4:	e1fff717 	ldw	r7,-36(fp)
  803dd8:	e17fff17 	ldw	r5,-4(fp)
  803ddc:	0814ad00 	call	814ad0 <alt_up_char_buffer_string>
			if (!key0 && (edgeDetect0 == 0)) {
  803de0:	e0bff987 	ldb	r2,-26(fp)
  803de4:	1004c03a 	cmpne	r2,r2,zero
  803de8:	1000061e 	bne	r2,zero,803e04 <obtainUserInitials+0x148>
  803dec:	e0bffb0f 	ldh	r2,-20(fp)
  803df0:	1004c03a 	cmpne	r2,r2,zero
  803df4:	1000031e 	bne	r2,zero,803e04 <obtainUserInitials+0x148>
				edgeDetect0 = 1;
  803df8:	00800044 	movi	r2,1
  803dfc:	e0bffb0d 	sth	r2,-20(fp)
			key0 = keyInput & 0x01;
			key1 = keyInput & 0x02;
			key2 = keyInput & 0x04;

			alt_up_char_buffer_string(char_buffer, initials, xPos, yPos);
			if (!key0 && (edgeDetect0 == 0)) {
  803e00:	00000b06 	br	803e30 <obtainUserInitials+0x174>
				edgeDetect0 = 1;
			} else if (key0 && (edgeDetect0 == 1)) {
  803e04:	e0bff987 	ldb	r2,-26(fp)
  803e08:	1005003a 	cmpeq	r2,r2,zero
  803e0c:	1000081e 	bne	r2,zero,803e30 <obtainUserInitials+0x174>
  803e10:	e0bffb0f 	ldh	r2,-20(fp)
  803e14:	10800058 	cmpnei	r2,r2,1
  803e18:	1000051e 	bne	r2,zero,803e30 <obtainUserInitials+0x174>
				edgeDetect0 = 0;
  803e1c:	e03ffb0d 	sth	zero,-20(fp)

	//0x41 + x(0-25) is alphabet in ascii.
	alt_up_char_buffer_string(char_buffer, "NEW HIGH SCORE!!!", xPos, yPos-3);
	alt_up_char_buffer_string(char_buffer, "use key1 to go up, key2 to go down,", xPos, yPos-2);
	alt_up_char_buffer_string(char_buffer, "and key0 to lock in choice:", xPos, yPos-1);
	for(i = 0; i < numInitials; i++) {
  803e20:	e0bffc17 	ldw	r2,-16(fp)
  803e24:	10800044 	addi	r2,r2,1
  803e28:	e0bffc15 	stw	r2,-16(fp)
  803e2c:	00003906 	br	803f14 <obtainUserInitials+0x258>
				edgeDetect0 = 1;
			} else if (key0 && (edgeDetect0 == 1)) {
				edgeDetect0 = 0;
				break;
			}
			if (!key1 && (edgeDetect1 == 0)) {
  803e30:	e0bff947 	ldb	r2,-27(fp)
  803e34:	1004c03a 	cmpne	r2,r2,zero
  803e38:	1000061e 	bne	r2,zero,803e54 <obtainUserInitials+0x198>
  803e3c:	e0bffa8f 	ldh	r2,-22(fp)
  803e40:	1004c03a 	cmpne	r2,r2,zero
  803e44:	1000031e 	bne	r2,zero,803e54 <obtainUserInitials+0x198>
				edgeDetect1 = 1;
  803e48:	00800044 	movi	r2,1
  803e4c:	e0bffa8d 	sth	r2,-22(fp)
				edgeDetect0 = 1;
			} else if (key0 && (edgeDetect0 == 1)) {
				edgeDetect0 = 0;
				break;
			}
			if (!key1 && (edgeDetect1 == 0)) {
  803e50:	00000f06 	br	803e90 <obtainUserInitials+0x1d4>
				edgeDetect1 = 1;
			} else if (key1 && (edgeDetect1 == 1)) {
  803e54:	e0bff947 	ldb	r2,-27(fp)
  803e58:	1005003a 	cmpeq	r2,r2,zero
  803e5c:	10000c1e 	bne	r2,zero,803e90 <obtainUserInitials+0x1d4>
  803e60:	e0bffa8f 	ldh	r2,-22(fp)
  803e64:	10800058 	cmpnei	r2,r2,1
  803e68:	1000091e 	bne	r2,zero,803e90 <obtainUserInitials+0x1d4>
				edgeDetect1 = 0;
  803e6c:	e03ffa8d 	sth	zero,-22(fp)
				if(charChoice < 25){
  803e70:	e0bffd17 	ldw	r2,-12(fp)
  803e74:	10800668 	cmpgeui	r2,r2,25
  803e78:	1000041e 	bne	r2,zero,803e8c <obtainUserInitials+0x1d0>
					charChoice++;
  803e7c:	e0bffd17 	ldw	r2,-12(fp)
  803e80:	10800044 	addi	r2,r2,1
  803e84:	e0bffd15 	stw	r2,-12(fp)
  803e88:	00000106 	br	803e90 <obtainUserInitials+0x1d4>
				} else {
					charChoice = 0;
  803e8c:	e03ffd15 	stw	zero,-12(fp)
				}
			}
			if (!key2 && (edgeDetect2 == 0)) {
  803e90:	e0bff907 	ldb	r2,-28(fp)
  803e94:	1004c03a 	cmpne	r2,r2,zero
  803e98:	1000061e 	bne	r2,zero,803eb4 <obtainUserInitials+0x1f8>
  803e9c:	e0bffa0f 	ldh	r2,-24(fp)
  803ea0:	1004c03a 	cmpne	r2,r2,zero
  803ea4:	1000031e 	bne	r2,zero,803eb4 <obtainUserInitials+0x1f8>
				edgeDetect2 = 1;
  803ea8:	00800044 	movi	r2,1
  803eac:	e0bffa0d 	sth	r2,-24(fp)
					charChoice++;
				} else {
					charChoice = 0;
				}
			}
			if (!key2 && (edgeDetect2 == 0)) {
  803eb0:	00001006 	br	803ef4 <obtainUserInitials+0x238>
				edgeDetect2 = 1;
			} else if (key2 && (edgeDetect2 == 1)) {
  803eb4:	e0bff907 	ldb	r2,-28(fp)
  803eb8:	1005003a 	cmpeq	r2,r2,zero
  803ebc:	10000d1e 	bne	r2,zero,803ef4 <obtainUserInitials+0x238>
  803ec0:	e0bffa0f 	ldh	r2,-24(fp)
  803ec4:	10800058 	cmpnei	r2,r2,1
  803ec8:	10000a1e 	bne	r2,zero,803ef4 <obtainUserInitials+0x238>
				edgeDetect2 = 0;
  803ecc:	e03ffa0d 	sth	zero,-24(fp)
				if(charChoice > 0) {
  803ed0:	e0bffd17 	ldw	r2,-12(fp)
  803ed4:	1005003a 	cmpeq	r2,r2,zero
  803ed8:	1000041e 	bne	r2,zero,803eec <obtainUserInitials+0x230>
					charChoice--;
  803edc:	e0bffd17 	ldw	r2,-12(fp)
  803ee0:	10bfffc4 	addi	r2,r2,-1
  803ee4:	e0bffd15 	stw	r2,-12(fp)
  803ee8:	00000206 	br	803ef4 <obtainUserInitials+0x238>
				} else {
					charChoice = 25;
  803eec:	00800644 	movi	r2,25
  803ef0:	e0bffd15 	stw	r2,-12(fp)
				}

			}
			initials[i] = 0x41 + charChoice;
  803ef4:	e0bffc17 	ldw	r2,-16(fp)
  803ef8:	1007883a 	mov	r3,r2
  803efc:	e0bfff17 	ldw	r2,-4(fp)
  803f00:	1887883a 	add	r3,r3,r2
  803f04:	e0bffd17 	ldw	r2,-12(fp)
  803f08:	10801044 	addi	r2,r2,65
  803f0c:	18800005 	stb	r2,0(r3)
		}
  803f10:	003fa106 	br	803d98 <obtainUserInitials+0xdc>

	//0x41 + x(0-25) is alphabet in ascii.
	alt_up_char_buffer_string(char_buffer, "NEW HIGH SCORE!!!", xPos, yPos-3);
	alt_up_char_buffer_string(char_buffer, "use key1 to go up, key2 to go down,", xPos, yPos-2);
	alt_up_char_buffer_string(char_buffer, "and key0 to lock in choice:", xPos, yPos-1);
	for(i = 0; i < numInitials; i++) {
  803f14:	e0fffc17 	ldw	r3,-16(fp)
  803f18:	e0bffe17 	ldw	r2,-8(fp)
  803f1c:	18bf9d16 	blt	r3,r2,803d94 <obtainUserInitials+0xd8>
			}
			initials[i] = 0x41 + charChoice;
		}
	}

	alt_up_char_buffer_clear(char_buffer); // clear screen
  803f20:	d1271517 	ldw	r4,-25516(gp)
  803f24:	0814be40 	call	814be4 <alt_up_char_buffer_clear>

	printf("initials read as: %c%c%c", initials[0], initials[1], initials[2]);
  803f28:	e0bfff17 	ldw	r2,-4(fp)
  803f2c:	10800003 	ldbu	r2,0(r2)
  803f30:	11403fcc 	andi	r5,r2,255
  803f34:	2940201c 	xori	r5,r5,128
  803f38:	297fe004 	addi	r5,r5,-128
  803f3c:	e0bfff17 	ldw	r2,-4(fp)
  803f40:	10800044 	addi	r2,r2,1
  803f44:	10800003 	ldbu	r2,0(r2)
  803f48:	11803fcc 	andi	r6,r2,255
  803f4c:	3180201c 	xori	r6,r6,128
  803f50:	31bfe004 	addi	r6,r6,-128
  803f54:	e0bfff17 	ldw	r2,-4(fp)
  803f58:	10800084 	addi	r2,r2,2
  803f5c:	10800003 	ldbu	r2,0(r2)
  803f60:	11c03fcc 	andi	r7,r2,255
  803f64:	39c0201c 	xori	r7,r7,128
  803f68:	39ffe004 	addi	r7,r7,-128
  803f6c:	010020b4 	movhi	r4,130
  803f70:	212f5104 	addi	r4,r4,-17084
  803f74:	080984c0 	call	80984c <printf>

	return;
}
  803f78:	e037883a 	mov	sp,fp
  803f7c:	dfc00117 	ldw	ra,4(sp)
  803f80:	df000017 	ldw	fp,0(sp)
  803f84:	dec00204 	addi	sp,sp,8
  803f88:	f800283a 	ret

00803f8c <updateCurrentPlayerScore>:


//increment player score by deltaScore
void updateCurrentPlayerScore(int deltaScore) {
  803f8c:	defffe04 	addi	sp,sp,-8
  803f90:	df000115 	stw	fp,4(sp)
  803f94:	df000104 	addi	fp,sp,4
  803f98:	e13fff15 	stw	r4,-4(fp)
	gameScores->currentPlayerScore += deltaScore;
  803f9c:	d1272c17 	ldw	r4,-25424(gp)
  803fa0:	d0a72c17 	ldw	r2,-25424(gp)
  803fa4:	10c00017 	ldw	r3,0(r2)
  803fa8:	e0bfff17 	ldw	r2,-4(fp)
  803fac:	1885883a 	add	r2,r3,r2
  803fb0:	20800015 	stw	r2,0(r4)
	return;
}
  803fb4:	e037883a 	mov	sp,fp
  803fb8:	df000017 	ldw	fp,0(sp)
  803fbc:	dec00104 	addi	sp,sp,4
  803fc0:	f800283a 	ret

00803fc4 <getCurrentPlayerScore>:

//accessor: get score
int getCurrentPlayerScore() {
  803fc4:	deffff04 	addi	sp,sp,-4
  803fc8:	df000015 	stw	fp,0(sp)
  803fcc:	d839883a 	mov	fp,sp
	return gameScores->currentPlayerScore;
  803fd0:	d0a72c17 	ldw	r2,-25424(gp)
  803fd4:	10800017 	ldw	r2,0(r2)
}
  803fd8:	e037883a 	mov	sp,fp
  803fdc:	df000017 	ldw	fp,0(sp)
  803fe0:	dec00104 	addi	sp,sp,4
  803fe4:	f800283a 	ret

00803fe8 <setCurrentPlayerLives>:

//mutator: set lives to newNumLives
void setCurrentPlayerLives(int newNumLives){
  803fe8:	defffe04 	addi	sp,sp,-8
  803fec:	df000115 	stw	fp,4(sp)
  803ff0:	df000104 	addi	fp,sp,4
  803ff4:	e13fff15 	stw	r4,-4(fp)
	gameScores->currentPlayerLives = newNumLives;
  803ff8:	d0e72c17 	ldw	r3,-25424(gp)
  803ffc:	e0bfff17 	ldw	r2,-4(fp)
  804000:	18800115 	stw	r2,4(r3)
}
  804004:	e037883a 	mov	sp,fp
  804008:	df000017 	ldw	fp,0(sp)
  80400c:	dec00104 	addi	sp,sp,4
  804010:	f800283a 	ret

00804014 <getCurrentPlayerLives>:

//accessor: get lives
int getCurrentPlayerLives(void) {
  804014:	deffff04 	addi	sp,sp,-4
  804018:	df000015 	stw	fp,0(sp)
  80401c:	d839883a 	mov	fp,sp
	return gameScores->currentPlayerLives;
  804020:	d0a72c17 	ldw	r2,-25424(gp)
  804024:	10800117 	ldw	r2,4(r2)
}
  804028:	e037883a 	mov	sp,fp
  80402c:	df000017 	ldw	fp,0(sp)
  804030:	dec00104 	addi	sp,sp,4
  804034:	f800283a 	ret

00804038 <drawScore>:

//purpose: overlay current scoreboard values onto the screen.
void drawScore(void){
  804038:	deffee04 	addi	sp,sp,-72
  80403c:	dfc01115 	stw	ra,68(sp)
  804040:	df001015 	stw	fp,64(sp)
  804044:	dc400f15 	stw	r17,60(sp)
  804048:	dc000e15 	stw	r16,56(sp)
  80404c:	df000e04 	addi	fp,sp,56
	char scoreValues[32];// = malloc(sizeof(char) * NUMINITIALS); // scores wont exceed 10, and names are 3
	int i,j;
	int digit;
	int firstNonZeroDig;
	int xPos = 35;
  804050:	008008c4 	movi	r2,35
  804054:	e0bff315 	stw	r2,-52(fp)
	int ypos = 25;
  804058:	00800644 	movi	r2,25
  80405c:	e0bff215 	stw	r2,-56(fp)

	alt_up_char_buffer_string(char_buffer, "**HIGH SCORES**" , xPos, ypos - 2);
  804060:	d1271517 	ldw	r4,-25516(gp)
  804064:	e1bff317 	ldw	r6,-52(fp)
  804068:	e0bff217 	ldw	r2,-56(fp)
  80406c:	10bfff84 	addi	r2,r2,-2
  804070:	100f883a 	mov	r7,r2
  804074:	014020b4 	movhi	r5,130
  804078:	296f5804 	addi	r5,r5,-17056
  80407c:	0814ad00 	call	814ad0 <alt_up_char_buffer_string>

	for(i = 0; i < NUMSCORES; i++) {
  804080:	e03ff715 	stw	zero,-36(fp)
  804084:	00007006 	br	804248 <drawScore+0x210>
		scoreValues[0] = gameScores->highScoreBoardInits[i][0];
  804088:	d1272c17 	ldw	r4,-25424(gp)
  80408c:	e0fff717 	ldw	r3,-36(fp)
  804090:	1805883a 	mov	r2,r3
  804094:	1085883a 	add	r2,r2,r2
  804098:	10c5883a 	add	r2,r2,r3
  80409c:	1105883a 	add	r2,r2,r4
  8040a0:	10800c04 	addi	r2,r2,48
  8040a4:	10800003 	ldbu	r2,0(r2)
  8040a8:	e0bff805 	stb	r2,-32(fp)
		scoreValues[1] = gameScores->highScoreBoardInits[i][1];
  8040ac:	d1272c17 	ldw	r4,-25424(gp)
  8040b0:	e0fff717 	ldw	r3,-36(fp)
  8040b4:	1805883a 	mov	r2,r3
  8040b8:	1085883a 	add	r2,r2,r2
  8040bc:	10c5883a 	add	r2,r2,r3
  8040c0:	1105883a 	add	r2,r2,r4
  8040c4:	10800c44 	addi	r2,r2,49
  8040c8:	10800003 	ldbu	r2,0(r2)
  8040cc:	e0bff845 	stb	r2,-31(fp)
		scoreValues[2] = gameScores->highScoreBoardInits[i][2];
  8040d0:	d1272c17 	ldw	r4,-25424(gp)
  8040d4:	e0fff717 	ldw	r3,-36(fp)
  8040d8:	1805883a 	mov	r2,r3
  8040dc:	1085883a 	add	r2,r2,r2
  8040e0:	10c5883a 	add	r2,r2,r3
  8040e4:	1105883a 	add	r2,r2,r4
  8040e8:	10800c84 	addi	r2,r2,50
  8040ec:	10800003 	ldbu	r2,0(r2)
  8040f0:	e0bff885 	stb	r2,-30(fp)

		scoreValues[3] = ' ';
  8040f4:	00800804 	movi	r2,32
  8040f8:	e0bff8c5 	stb	r2,-29(fp)

		firstNonZeroDig = 0;
  8040fc:	e03ff415 	stw	zero,-48(fp)
		for(j = 0; j < MAXSCOREDIGITS; j++){
  804100:	e03ff615 	stw	zero,-40(fp)
  804104:	00004106 	br	80420c <drawScore+0x1d4>
			digit = ((int)(gameScores->highScoreBoard[i] / pow(10,(MAXSCOREDIGITS - 1 - j))) % 10);
  804108:	d0e72c17 	ldw	r3,-25424(gp)
  80410c:	e0bff717 	ldw	r2,-36(fp)
  804110:	1085883a 	add	r2,r2,r2
  804114:	1085883a 	add	r2,r2,r2
  804118:	10c5883a 	add	r2,r2,r3
  80411c:	10800204 	addi	r2,r2,8
  804120:	11000017 	ldw	r4,0(r2)
  804124:	080852c0 	call	80852c <__floatsidf>
  804128:	1021883a 	mov	r16,r2
  80412c:	1823883a 	mov	r17,r3
  804130:	00c00244 	movi	r3,9
  804134:	e0bff617 	ldw	r2,-40(fp)
  804138:	1889c83a 	sub	r4,r3,r2
  80413c:	080852c0 	call	80852c <__floatsidf>
  804140:	100f883a 	mov	r7,r2
  804144:	1811883a 	mov	r8,r3
  804148:	0009883a 	mov	r4,zero
  80414c:	01500934 	movhi	r5,16420
  804150:	380d883a 	mov	r6,r7
  804154:	400f883a 	mov	r7,r8
  804158:	08056240 	call	805624 <pow>
  80415c:	100f883a 	mov	r7,r2
  804160:	1811883a 	mov	r8,r3
  804164:	8009883a 	mov	r4,r16
  804168:	880b883a 	mov	r5,r17
  80416c:	380d883a 	mov	r6,r7
  804170:	400f883a 	mov	r7,r8
  804174:	080802c0 	call	80802c <__divdf3>
  804178:	1009883a 	mov	r4,r2
  80417c:	180b883a 	mov	r5,r3
  804180:	2005883a 	mov	r2,r4
  804184:	2807883a 	mov	r3,r5
  804188:	1009883a 	mov	r4,r2
  80418c:	180b883a 	mov	r5,r3
  804190:	08086240 	call	808624 <__fixdfsi>
  804194:	1009883a 	mov	r4,r2
  804198:	01400284 	movi	r5,10
  80419c:	08088100 	call	808810 <__modsi3>
  8041a0:	e0bff515 	stw	r2,-44(fp)
			//printf("digit: %d\n", digit);
			if(digit == 0 && firstNonZeroDig == 0){
  8041a4:	e0bff517 	ldw	r2,-44(fp)
  8041a8:	1004c03a 	cmpne	r2,r2,zero
  8041ac:	10000a1e 	bne	r2,zero,8041d8 <drawScore+0x1a0>
  8041b0:	e0bff417 	ldw	r2,-48(fp)
  8041b4:	1004c03a 	cmpne	r2,r2,zero
  8041b8:	1000071e 	bne	r2,zero,8041d8 <drawScore+0x1a0>
				scoreValues[4+j] = ' ';
  8041bc:	e0bff617 	ldw	r2,-40(fp)
  8041c0:	10c00104 	addi	r3,r2,4
  8041c4:	e0bff804 	addi	r2,fp,-32
  8041c8:	10c7883a 	add	r3,r2,r3
  8041cc:	00800804 	movi	r2,32
  8041d0:	18800005 	stb	r2,0(r3)

		firstNonZeroDig = 0;
		for(j = 0; j < MAXSCOREDIGITS; j++){
			digit = ((int)(gameScores->highScoreBoard[i] / pow(10,(MAXSCOREDIGITS - 1 - j))) % 10);
			//printf("digit: %d\n", digit);
			if(digit == 0 && firstNonZeroDig == 0){
  8041d4:	00000a06 	br	804200 <drawScore+0x1c8>
				scoreValues[4+j] = ' ';
			} else {
				firstNonZeroDig = 1;
  8041d8:	00800044 	movi	r2,1
  8041dc:	e0bff415 	stw	r2,-48(fp)
				scoreValues[4+j] = (digit + '0');
  8041e0:	e0bff617 	ldw	r2,-40(fp)
  8041e4:	11000104 	addi	r4,r2,4
  8041e8:	e0bff517 	ldw	r2,-44(fp)
  8041ec:	10800c04 	addi	r2,r2,48
  8041f0:	1007883a 	mov	r3,r2
  8041f4:	e0bff804 	addi	r2,fp,-32
  8041f8:	1105883a 	add	r2,r2,r4
  8041fc:	10c00005 	stb	r3,0(r2)
		scoreValues[2] = gameScores->highScoreBoardInits[i][2];

		scoreValues[3] = ' ';

		firstNonZeroDig = 0;
		for(j = 0; j < MAXSCOREDIGITS; j++){
  804200:	e0bff617 	ldw	r2,-40(fp)
  804204:	10800044 	addi	r2,r2,1
  804208:	e0bff615 	stw	r2,-40(fp)
  80420c:	e0bff617 	ldw	r2,-40(fp)
  804210:	10800290 	cmplti	r2,r2,10
  804214:	103fbc1e 	bne	r2,zero,804108 <drawScore+0xd0>
			} else {
				firstNonZeroDig = 1;
				scoreValues[4+j] = (digit + '0');
			}
		}
		scoreValues[4+MAXSCOREDIGITS] = '\0';
  804218:	e03ffb85 	stb	zero,-18(fp)

		alt_up_char_buffer_string(char_buffer, scoreValues , xPos, ypos + i);
  80421c:	d1271517 	ldw	r4,-25516(gp)
  804220:	e1bff317 	ldw	r6,-52(fp)
  804224:	e0fff217 	ldw	r3,-56(fp)
  804228:	e0bff717 	ldw	r2,-36(fp)
  80422c:	1885883a 	add	r2,r3,r2
  804230:	100f883a 	mov	r7,r2
  804234:	e17ff804 	addi	r5,fp,-32
  804238:	0814ad00 	call	814ad0 <alt_up_char_buffer_string>
	int xPos = 35;
	int ypos = 25;

	alt_up_char_buffer_string(char_buffer, "**HIGH SCORES**" , xPos, ypos - 2);

	for(i = 0; i < NUMSCORES; i++) {
  80423c:	e0bff717 	ldw	r2,-36(fp)
  804240:	10800044 	addi	r2,r2,1
  804244:	e0bff715 	stw	r2,-36(fp)
  804248:	e0bff717 	ldw	r2,-36(fp)
  80424c:	10800290 	cmplti	r2,r2,10
  804250:	103f8d1e 	bne	r2,zero,804088 <drawScore+0x50>
		}
		scoreValues[4+MAXSCOREDIGITS] = '\0';

		alt_up_char_buffer_string(char_buffer, scoreValues , xPos, ypos + i);
	}
}
  804254:	e037883a 	mov	sp,fp
  804258:	dfc00317 	ldw	ra,12(sp)
  80425c:	df000217 	ldw	fp,8(sp)
  804260:	dc400117 	ldw	r17,4(sp)
  804264:	dc000017 	ldw	r16,0(sp)
  804268:	dec00404 	addi	sp,sp,16
  80426c:	f800283a 	ret

00804270 <clearScore>:

void clearScore(void) {
  804270:	defffe04 	addi	sp,sp,-8
  804274:	dfc00115 	stw	ra,4(sp)
  804278:	df000015 	stw	fp,0(sp)
  80427c:	d839883a 	mov	fp,sp
	alt_up_char_buffer_clear(char_buffer);
  804280:	d1271517 	ldw	r4,-25516(gp)
  804284:	0814be40 	call	814be4 <alt_up_char_buffer_clear>
}
  804288:	e037883a 	mov	sp,fp
  80428c:	dfc00117 	ldw	ra,4(sp)
  804290:	df000017 	ldw	fp,0(sp)
  804294:	dec00204 	addi	sp,sp,8
  804298:	f800283a 	ret

0080429c <drawInGameInfo>:

//draws current lives and playerScore
void drawInGameInfo(void) {
  80429c:	defff204 	addi	sp,sp,-56
  8042a0:	dfc00d15 	stw	ra,52(sp)
  8042a4:	df000c15 	stw	fp,48(sp)
  8042a8:	dc400b15 	stw	r17,44(sp)
  8042ac:	dc000a15 	stw	r16,40(sp)
  8042b0:	df000a04 	addi	fp,sp,40
	char livesLeft[2] = {' ', '\0'};
  8042b4:	00800804 	movi	r2,32
  8042b8:	e0bffc05 	stb	r2,-16(fp)
  8042bc:	e03ffc45 	stb	zero,-15(fp)
	livesLeft[0] = (getCurrentPlayerLives() + '0');
  8042c0:	08040140 	call	804014 <getCurrentPlayerLives>
  8042c4:	10800c04 	addi	r2,r2,48
  8042c8:	e0bffc05 	stb	r2,-16(fp)
	int xPos = 1;
  8042cc:	00800044 	movi	r2,1
  8042d0:	e0bffb15 	stw	r2,-20(fp)
	int yPos = 1;
  8042d4:	00800044 	movi	r2,1
  8042d8:	e0bffa15 	stw	r2,-24(fp)
	int i;
	int digit = 0;
  8042dc:	e03ff815 	stw	zero,-32(fp)
	int firstDigitFound = 0;
  8042e0:	e03ff715 	stw	zero,-36(fp)
	int currentScore = getCurrentPlayerScore();
  8042e4:	0803fc40 	call	803fc4 <getCurrentPlayerScore>
  8042e8:	e0bff615 	stw	r2,-40(fp)
	char currentCharScore[MAXSCOREDIGITS + 1];
	currentCharScore[MAXSCOREDIGITS] = '\0'; //end of string
  8042ec:	e03fff05 	stb	zero,-4(fp)

	//populate currentCharScore;
	for(i = 0; i < MAXSCOREDIGITS; i++) {
  8042f0:	e03ff915 	stw	zero,-28(fp)
  8042f4:	00003e06 	br	8043f0 <drawInGameInfo+0x154>
		digit = ((int)(currentScore / pow(10,(MAXSCOREDIGITS - 1 - i)))%10);
  8042f8:	e13ff617 	ldw	r4,-40(fp)
  8042fc:	080852c0 	call	80852c <__floatsidf>
  804300:	1021883a 	mov	r16,r2
  804304:	1823883a 	mov	r17,r3
  804308:	00c00244 	movi	r3,9
  80430c:	e0bff917 	ldw	r2,-28(fp)
  804310:	1889c83a 	sub	r4,r3,r2
  804314:	080852c0 	call	80852c <__floatsidf>
  804318:	100f883a 	mov	r7,r2
  80431c:	1811883a 	mov	r8,r3
  804320:	0009883a 	mov	r4,zero
  804324:	01500934 	movhi	r5,16420
  804328:	380d883a 	mov	r6,r7
  80432c:	400f883a 	mov	r7,r8
  804330:	08056240 	call	805624 <pow>
  804334:	100f883a 	mov	r7,r2
  804338:	1811883a 	mov	r8,r3
  80433c:	8009883a 	mov	r4,r16
  804340:	880b883a 	mov	r5,r17
  804344:	380d883a 	mov	r6,r7
  804348:	400f883a 	mov	r7,r8
  80434c:	080802c0 	call	80802c <__divdf3>
  804350:	1009883a 	mov	r4,r2
  804354:	180b883a 	mov	r5,r3
  804358:	2005883a 	mov	r2,r4
  80435c:	2807883a 	mov	r3,r5
  804360:	1009883a 	mov	r4,r2
  804364:	180b883a 	mov	r5,r3
  804368:	08086240 	call	808624 <__fixdfsi>
  80436c:	1009883a 	mov	r4,r2
  804370:	01400284 	movi	r5,10
  804374:	08088100 	call	808810 <__modsi3>
  804378:	e0bff815 	stw	r2,-32(fp)
		currentCharScore[i] = '0';
  80437c:	e0fff917 	ldw	r3,-28(fp)
  804380:	e0bffc84 	addi	r2,fp,-14
  804384:	10c7883a 	add	r3,r2,r3
  804388:	00800c04 	movi	r2,48
  80438c:	18800005 	stb	r2,0(r3)
		if(digit != 0 && firstDigitFound == 0) {
  804390:	e0bff817 	ldw	r2,-32(fp)
  804394:	1005003a 	cmpeq	r2,r2,zero
  804398:	1000051e 	bne	r2,zero,8043b0 <drawInGameInfo+0x114>
  80439c:	e0bff717 	ldw	r2,-36(fp)
  8043a0:	1004c03a 	cmpne	r2,r2,zero
  8043a4:	1000021e 	bne	r2,zero,8043b0 <drawInGameInfo+0x114>
			firstDigitFound = 1;
  8043a8:	00800044 	movi	r2,1
  8043ac:	e0bff715 	stw	r2,-36(fp)
		}
		if(firstDigitFound == 1 || i == (MAXSCOREDIGITS - 1)) {
  8043b0:	e0bff717 	ldw	r2,-36(fp)
  8043b4:	10800060 	cmpeqi	r2,r2,1
  8043b8:	1000031e 	bne	r2,zero,8043c8 <drawInGameInfo+0x12c>
  8043bc:	e0bff917 	ldw	r2,-28(fp)
  8043c0:	10800258 	cmpnei	r2,r2,9
  8043c4:	1000071e 	bne	r2,zero,8043e4 <drawInGameInfo+0x148>
			currentCharScore[i] = (digit + '0');
  8043c8:	e13ff917 	ldw	r4,-28(fp)
  8043cc:	e0bff817 	ldw	r2,-32(fp)
  8043d0:	10800c04 	addi	r2,r2,48
  8043d4:	1007883a 	mov	r3,r2
  8043d8:	e0bffc84 	addi	r2,fp,-14
  8043dc:	1105883a 	add	r2,r2,r4
  8043e0:	10c00005 	stb	r3,0(r2)
	int currentScore = getCurrentPlayerScore();
	char currentCharScore[MAXSCOREDIGITS + 1];
	currentCharScore[MAXSCOREDIGITS] = '\0'; //end of string

	//populate currentCharScore;
	for(i = 0; i < MAXSCOREDIGITS; i++) {
  8043e4:	e0bff917 	ldw	r2,-28(fp)
  8043e8:	10800044 	addi	r2,r2,1
  8043ec:	e0bff915 	stw	r2,-28(fp)
  8043f0:	e0bff917 	ldw	r2,-28(fp)
  8043f4:	10800290 	cmplti	r2,r2,10
  8043f8:	103fbf1e 	bne	r2,zero,8042f8 <drawInGameInfo+0x5c>
			currentCharScore[i] = (digit + '0');
		}
	}

	//print info to screen
	if(livesLeft[0] == '1') {
  8043fc:	e0bffc03 	ldbu	r2,-16(fp)
  804400:	10803fcc 	andi	r2,r2,255
  804404:	1080201c 	xori	r2,r2,128
  804408:	10bfe004 	addi	r2,r2,-128
  80440c:	10800c58 	cmpnei	r2,r2,49
  804410:	1000071e 	bne	r2,zero,804430 <drawInGameInfo+0x194>
		alt_up_char_buffer_string(char_buffer, "Lives: YOLO" , xPos, yPos);
  804414:	d1271517 	ldw	r4,-25516(gp)
  804418:	e1bffb17 	ldw	r6,-20(fp)
  80441c:	e1fffa17 	ldw	r7,-24(fp)
  804420:	014020b4 	movhi	r5,130
  804424:	296f5c04 	addi	r5,r5,-17040
  804428:	0814ad00 	call	814ad0 <alt_up_char_buffer_string>
  80442c:	00001a06 	br	804498 <drawInGameInfo+0x1fc>

	} else if(livesLeft[0] == '0') {
  804430:	e0bffc03 	ldbu	r2,-16(fp)
  804434:	10803fcc 	andi	r2,r2,255
  804438:	1080201c 	xori	r2,r2,128
  80443c:	10bfe004 	addi	r2,r2,-128
  804440:	10800c18 	cmpnei	r2,r2,48
  804444:	1000071e 	bne	r2,zero,804464 <drawInGameInfo+0x1c8>
		alt_up_char_buffer_string(char_buffer, "Lives: DEAD" , xPos, yPos);
  804448:	d1271517 	ldw	r4,-25516(gp)
  80444c:	e1bffb17 	ldw	r6,-20(fp)
  804450:	e1fffa17 	ldw	r7,-24(fp)
  804454:	014020b4 	movhi	r5,130
  804458:	296f5f04 	addi	r5,r5,-17028
  80445c:	0814ad00 	call	814ad0 <alt_up_char_buffer_string>
  804460:	00000d06 	br	804498 <drawInGameInfo+0x1fc>
	} else {
		alt_up_char_buffer_string(char_buffer, "Lives: " , xPos, yPos);
  804464:	d1271517 	ldw	r4,-25516(gp)
  804468:	e1bffb17 	ldw	r6,-20(fp)
  80446c:	e1fffa17 	ldw	r7,-24(fp)
  804470:	014020b4 	movhi	r5,130
  804474:	296f6204 	addi	r5,r5,-17016
  804478:	0814ad00 	call	814ad0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buffer, livesLeft , xPos + 7, yPos);
  80447c:	d1271517 	ldw	r4,-25516(gp)
  804480:	e0bffb17 	ldw	r2,-20(fp)
  804484:	108001c4 	addi	r2,r2,7
  804488:	100d883a 	mov	r6,r2
  80448c:	e1fffa17 	ldw	r7,-24(fp)
  804490:	e17ffc04 	addi	r5,fp,-16
  804494:	0814ad00 	call	814ad0 <alt_up_char_buffer_string>
	}
	alt_up_char_buffer_string(char_buffer, "Score: " , xPos, yPos+1);
  804498:	d1271517 	ldw	r4,-25516(gp)
  80449c:	e1bffb17 	ldw	r6,-20(fp)
  8044a0:	e0bffa17 	ldw	r2,-24(fp)
  8044a4:	10800044 	addi	r2,r2,1
  8044a8:	100f883a 	mov	r7,r2
  8044ac:	014020b4 	movhi	r5,130
  8044b0:	296f6404 	addi	r5,r5,-17008
  8044b4:	0814ad00 	call	814ad0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, currentCharScore , xPos + 7, yPos+1);
  8044b8:	d1271517 	ldw	r4,-25516(gp)
  8044bc:	e0bffb17 	ldw	r2,-20(fp)
  8044c0:	108001c4 	addi	r2,r2,7
  8044c4:	100d883a 	mov	r6,r2
  8044c8:	e0bffa17 	ldw	r2,-24(fp)
  8044cc:	10800044 	addi	r2,r2,1
  8044d0:	100f883a 	mov	r7,r2
  8044d4:	e17ffc84 	addi	r5,fp,-14
  8044d8:	0814ad00 	call	814ad0 <alt_up_char_buffer_string>

	return;
}
  8044dc:	e037883a 	mov	sp,fp
  8044e0:	dfc00317 	ldw	ra,12(sp)
  8044e4:	df000217 	ldw	fp,8(sp)
  8044e8:	dc400117 	ldw	r17,4(sp)
  8044ec:	dc000017 	ldw	r16,0(sp)
  8044f0:	dec00404 	addi	sp,sp,16
  8044f4:	f800283a 	ret

008044f8 <openSdCard>:
#include <stdio.h>
#include <stdlib.h>
#include "sd_card.h"

int openSdCard(){
  8044f8:	defffd04 	addi	sp,sp,-12
  8044fc:	dfc00215 	stw	ra,8(sp)
  804500:	df000115 	stw	fp,4(sp)
  804504:	df000104 	addi	fp,sp,4
	sdDev = alt_up_sd_card_open_dev("/dev/Altera_UP_SD_Card_Avalon_Interface_0");
  804508:	010020b4 	movhi	r4,130
  80450c:	212f6604 	addi	r4,r4,-17000
  804510:	0818f140 	call	818f14 <alt_up_sd_card_open_dev>
  804514:	d0a70f15 	stw	r2,-25540(gp)

	if(sdDev != NULL && alt_up_sd_card_is_FAT16()){
  804518:	d0a70f17 	ldw	r2,-25540(gp)
  80451c:	1005003a 	cmpeq	r2,r2,zero
  804520:	1000051e 	bne	r2,zero,804538 <openSdCard+0x40>
  804524:	08190a00 	call	8190a0 <alt_up_sd_card_is_FAT16>
  804528:	1005003a 	cmpeq	r2,r2,zero
  80452c:	1000021e 	bne	r2,zero,804538 <openSdCard+0x40>
		return 0;
  804530:	e03fff15 	stw	zero,-4(fp)
  804534:	00000206 	br	804540 <openSdCard+0x48>
	} else {
		return -1;
  804538:	00bfffc4 	movi	r2,-1
  80453c:	e0bfff15 	stw	r2,-4(fp)
  804540:	e0bfff17 	ldw	r2,-4(fp)
	}
}
  804544:	e037883a 	mov	sp,fp
  804548:	dfc00117 	ldw	ra,4(sp)
  80454c:	df000017 	ldw	fp,0(sp)
  804550:	dec00204 	addi	sp,sp,8
  804554:	f800283a 	ret

00804558 <openFile>:

short int openFile(char *fileName) {
  804558:	defffd04 	addi	sp,sp,-12
  80455c:	dfc00215 	stw	ra,8(sp)
  804560:	df000115 	stw	fp,4(sp)
  804564:	df000104 	addi	fp,sp,4
  804568:	e13fff15 	stw	r4,-4(fp)
	return alt_up_sd_card_fopen(fileName, 0);
  80456c:	e13fff17 	ldw	r4,-4(fp)
  804570:	000b883a 	mov	r5,zero
  804574:	08195980 	call	819598 <alt_up_sd_card_fopen>
  804578:	10bfffcc 	andi	r2,r2,65535
  80457c:	10a0001c 	xori	r2,r2,32768
  804580:	10a00004 	addi	r2,r2,-32768
}
  804584:	e037883a 	mov	sp,fp
  804588:	dfc00117 	ldw	ra,4(sp)
  80458c:	df000017 	ldw	fp,0(sp)
  804590:	dec00204 	addi	sp,sp,8
  804594:	f800283a 	ret

00804598 <closeFile>:

int closeFile(short int fh) {
  804598:	defffd04 	addi	sp,sp,-12
  80459c:	dfc00215 	stw	ra,8(sp)
  8045a0:	df000115 	stw	fp,4(sp)
  8045a4:	df000104 	addi	fp,sp,4
  8045a8:	e13fff0d 	sth	r4,-4(fp)
	return alt_up_sd_card_fclose(fh);
  8045ac:	e13fff0f 	ldh	r4,-4(fp)
  8045b0:	081a4140 	call	81a414 <alt_up_sd_card_fclose>
}
  8045b4:	e037883a 	mov	sp,fp
  8045b8:	dfc00117 	ldw	ra,4(sp)
  8045bc:	df000017 	ldw	fp,0(sp)
  8045c0:	dec00204 	addi	sp,sp,8
  8045c4:	f800283a 	ret

008045c8 <readByte>:

unsigned char readByte(short int fh) {
  8045c8:	defffd04 	addi	sp,sp,-12
  8045cc:	dfc00215 	stw	ra,8(sp)
  8045d0:	df000115 	stw	fp,4(sp)
  8045d4:	df000104 	addi	fp,sp,4
  8045d8:	e13fff0d 	sth	r4,-4(fp)
	return (unsigned char) alt_up_sd_card_read(fh);
  8045dc:	e13fff0f 	ldh	r4,-4(fp)
  8045e0:	0819a5c0 	call	819a5c <alt_up_sd_card_read>
  8045e4:	10803fcc 	andi	r2,r2,255
}
  8045e8:	e037883a 	mov	sp,fp
  8045ec:	dfc00117 	ldw	ra,4(sp)
  8045f0:	df000017 	ldw	fp,0(sp)
  8045f4:	dec00204 	addi	sp,sp,8
  8045f8:	f800283a 	ret

008045fc <readWord>:
short int readWord(short int fh) {
  8045fc:	defffb04 	addi	sp,sp,-20
  804600:	dfc00415 	stw	ra,16(sp)
  804604:	df000315 	stw	fp,12(sp)
  804608:	df000304 	addi	fp,sp,12
  80460c:	e13ffe0d 	sth	r4,-8(fp)
	short int byte1, byte2;

	byte1 = alt_up_sd_card_read(fh);
  804610:	e13ffe0f 	ldh	r4,-8(fp)
  804614:	0819a5c0 	call	819a5c <alt_up_sd_card_read>
  804618:	e0bffd8d 	sth	r2,-10(fp)
	byte2 = alt_up_sd_card_read(fh);
  80461c:	e13ffe0f 	ldh	r4,-8(fp)
  804620:	0819a5c0 	call	819a5c <alt_up_sd_card_read>
  804624:	e0bffd0d 	sth	r2,-12(fp)

	if (byte1 == -1 || byte2 == -1)
  804628:	e0bffd8f 	ldh	r2,-10(fp)
  80462c:	10bfffe0 	cmpeqi	r2,r2,-1
  804630:	1000031e 	bne	r2,zero,804640 <readWord+0x44>
  804634:	e0bffd0f 	ldh	r2,-12(fp)
  804638:	10bfffd8 	cmpnei	r2,r2,-1
  80463c:	1000031e 	bne	r2,zero,80464c <readWord+0x50>
		return -1;
  804640:	00bfffc4 	movi	r2,-1
  804644:	e0bfff15 	stw	r2,-4(fp)
  804648:	00000b06 	br	804678 <readWord+0x7c>

	return ((unsigned short int)byte2 << 8) | ((unsigned short int)byte1 & 0x00FF);
  80464c:	e0bffd0b 	ldhu	r2,-12(fp)
  804650:	10bfffcc 	andi	r2,r2,65535
  804654:	1004923a 	slli	r2,r2,8
  804658:	1007883a 	mov	r3,r2
  80465c:	e0bffd8b 	ldhu	r2,-10(fp)
  804660:	10803fcc 	andi	r2,r2,255
  804664:	1884b03a 	or	r2,r3,r2
  804668:	10bfffcc 	andi	r2,r2,65535
  80466c:	10a0001c 	xori	r2,r2,32768
  804670:	10a00004 	addi	r2,r2,-32768
  804674:	e0bfff15 	stw	r2,-4(fp)
  804678:	e0bfff17 	ldw	r2,-4(fp)
}
  80467c:	e037883a 	mov	sp,fp
  804680:	dfc00117 	ldw	ra,4(sp)
  804684:	df000017 	ldw	fp,0(sp)
  804688:	dec00204 	addi	sp,sp,8
  80468c:	f800283a 	ret

00804690 <readDWord>:

int readDWord(short int fh) {
  804690:	defffa04 	addi	sp,sp,-24
  804694:	dfc00515 	stw	ra,20(sp)
  804698:	df000415 	stw	fp,16(sp)
  80469c:	df000404 	addi	fp,sp,16
  8046a0:	e13ffe0d 	sth	r4,-8(fp)
	short int byte1, byte2, byte3, byte4;

	byte1 = alt_up_sd_card_read(fh);
  8046a4:	e13ffe0f 	ldh	r4,-8(fp)
  8046a8:	0819a5c0 	call	819a5c <alt_up_sd_card_read>
  8046ac:	e0bffd8d 	sth	r2,-10(fp)
	byte2 = alt_up_sd_card_read(fh);
  8046b0:	e13ffe0f 	ldh	r4,-8(fp)
  8046b4:	0819a5c0 	call	819a5c <alt_up_sd_card_read>
  8046b8:	e0bffd0d 	sth	r2,-12(fp)
	byte3 = alt_up_sd_card_read(fh);
  8046bc:	e13ffe0f 	ldh	r4,-8(fp)
  8046c0:	0819a5c0 	call	819a5c <alt_up_sd_card_read>
  8046c4:	e0bffc8d 	sth	r2,-14(fp)
	byte4 = alt_up_sd_card_read(fh);
  8046c8:	e13ffe0f 	ldh	r4,-8(fp)
  8046cc:	0819a5c0 	call	819a5c <alt_up_sd_card_read>
  8046d0:	e0bffc0d 	sth	r2,-16(fp)

	if (byte1 == -1 || byte2 == -1 || byte3 == -1 || byte4 == -1)
  8046d4:	e0bffd8f 	ldh	r2,-10(fp)
  8046d8:	10bfffe0 	cmpeqi	r2,r2,-1
  8046dc:	1000091e 	bne	r2,zero,804704 <readDWord+0x74>
  8046e0:	e0bffd0f 	ldh	r2,-12(fp)
  8046e4:	10bfffe0 	cmpeqi	r2,r2,-1
  8046e8:	1000061e 	bne	r2,zero,804704 <readDWord+0x74>
  8046ec:	e0bffc8f 	ldh	r2,-14(fp)
  8046f0:	10bfffe0 	cmpeqi	r2,r2,-1
  8046f4:	1000031e 	bne	r2,zero,804704 <readDWord+0x74>
  8046f8:	e0bffc0f 	ldh	r2,-16(fp)
  8046fc:	10bfffd8 	cmpnei	r2,r2,-1
  804700:	1000031e 	bne	r2,zero,804710 <readDWord+0x80>
			return -1;
  804704:	00bfffc4 	movi	r2,-1
  804708:	e0bfff15 	stw	r2,-4(fp)
  80470c:	00000f06 	br	80474c <readDWord+0xbc>

	return ((unsigned short int)byte4 << 24) | ((unsigned short int)byte3 << 16) | ((unsigned short int)byte2 << 8) | (unsigned short int)byte1;
  804710:	e0bffc0b 	ldhu	r2,-16(fp)
  804714:	10bfffcc 	andi	r2,r2,65535
  804718:	1006963a 	slli	r3,r2,24
  80471c:	e0bffc8b 	ldhu	r2,-14(fp)
  804720:	10bfffcc 	andi	r2,r2,65535
  804724:	1004943a 	slli	r2,r2,16
  804728:	1886b03a 	or	r3,r3,r2
  80472c:	e0bffd0b 	ldhu	r2,-12(fp)
  804730:	10bfffcc 	andi	r2,r2,65535
  804734:	1004923a 	slli	r2,r2,8
  804738:	1886b03a 	or	r3,r3,r2
  80473c:	e0bffd8b 	ldhu	r2,-10(fp)
  804740:	10bfffcc 	andi	r2,r2,65535
  804744:	1886b03a 	or	r3,r3,r2
  804748:	e0ffff15 	stw	r3,-4(fp)
  80474c:	e0bfff17 	ldw	r2,-4(fp)
}
  804750:	e037883a 	mov	sp,fp
  804754:	dfc00117 	ldw	ra,4(sp)
  804758:	df000017 	ldw	fp,0(sp)
  80475c:	dec00204 	addi	sp,sp,8
  804760:	f800283a 	ret

00804764 <getWavFileLength>:

unsigned int getWavFileLength(char *fileName) { // TBD: This function MUST be fixed - it currently returns an incorrect value, becuase - vals dont always mean it's done.
  804764:	defffb04 	addi	sp,sp,-20
  804768:	dfc00415 	stw	ra,16(sp)
  80476c:	df000315 	stw	fp,12(sp)
  804770:	df000304 	addi	fp,sp,12
  804774:	e13fff15 	stw	r4,-4(fp)
	unsigned int fileLength = 0;
  804778:	e03ffe15 	stw	zero,-8(fp)

	short int fileHandle = openFile(fileName);
  80477c:	e13fff17 	ldw	r4,-4(fp)
  804780:	08045580 	call	804558 <openFile>
  804784:	e0bffd8d 	sth	r2,-10(fp)
	if (fileHandle == -1) {
  804788:	e0bffd8f 	ldh	r2,-10(fp)
  80478c:	10bfffd8 	cmpnei	r2,r2,-1
  804790:	1000041e 	bne	r2,zero,8047a4 <getWavFileLength+0x40>
		printf("Error occurred, unable to open file in 'getFileLength' with name: %s", fileName);
  804794:	010020b4 	movhi	r4,130
  804798:	212f7104 	addi	r4,r4,-16956
  80479c:	e17fff17 	ldw	r5,-4(fp)
  8047a0:	080984c0 	call	80984c <printf>
	}

	readPastWavHeader(fileHandle); // to get wav file length, dont bypass header i think..
  8047a4:	e13ffd8f 	ldh	r4,-10(fp)
  8047a8:	080481c0 	call	80481c <readPastWavHeader>

	short int wordRead = readWord(fileHandle);
  8047ac:	e13ffd8f 	ldh	r4,-10(fp)
  8047b0:	08045fc0 	call	8045fc <readWord>
  8047b4:	e0bffd0d 	sth	r2,-12(fp)
	//unsigned char firstByte = 0x0000FFFF | wordRead;
	//unsigned char secondByte = 0x0000FFFF | (wordRead >> 8);
	while ((short int)wordRead >= 0) {
  8047b8:	00000606 	br	8047d4 <getWavFileLength+0x70>
		//printf("%c", (unsigned char)byteRead);
		fileLength += 2;
  8047bc:	e0bffe17 	ldw	r2,-8(fp)
  8047c0:	10800084 	addi	r2,r2,2
  8047c4:	e0bffe15 	stw	r2,-8(fp)
		wordRead = readWord(fileHandle);
  8047c8:	e13ffd8f 	ldh	r4,-10(fp)
  8047cc:	08045fc0 	call	8045fc <readWord>
  8047d0:	e0bffd0d 	sth	r2,-12(fp)
	readPastWavHeader(fileHandle); // to get wav file length, dont bypass header i think..

	short int wordRead = readWord(fileHandle);
	//unsigned char firstByte = 0x0000FFFF | wordRead;
	//unsigned char secondByte = 0x0000FFFF | (wordRead >> 8);
	while ((short int)wordRead >= 0) {
  8047d4:	e0bffd0f 	ldh	r2,-12(fp)
  8047d8:	1004403a 	cmpge	r2,r2,zero
  8047dc:	103ff71e 	bne	r2,zero,8047bc <getWavFileLength+0x58>
		//printf("%c", (unsigned char)byteRead);
		fileLength += 2;
		wordRead = readWord(fileHandle);
	}
	if ((short int)wordRead <= -1) {
  8047e0:	e0bffd0f 	ldh	r2,-12(fp)
  8047e4:	1004403a 	cmpge	r2,r2,zero
  8047e8:	1000041e 	bne	r2,zero,8047fc <getWavFileLength+0x98>
		printf("Error reading bytes from %s\n", fileName);
  8047ec:	010020b4 	movhi	r4,130
  8047f0:	212f8304 	addi	r4,r4,-16884
  8047f4:	e17fff17 	ldw	r5,-4(fp)
  8047f8:	080984c0 	call	80984c <printf>
	}

	closeFile(fileHandle);
  8047fc:	e13ffd8f 	ldh	r4,-10(fp)
  804800:	08045980 	call	804598 <closeFile>
	return fileLength;
  804804:	e0bffe17 	ldw	r2,-8(fp)
}
  804808:	e037883a 	mov	sp,fp
  80480c:	dfc00117 	ldw	ra,4(sp)
  804810:	df000017 	ldw	fp,0(sp)
  804814:	dec00204 	addi	sp,sp,8
  804818:	f800283a 	ret

0080481c <readPastWavHeader>:

void readPastWavHeader(short int handle) {
  80481c:	defffc04 	addi	sp,sp,-16
  804820:	dfc00315 	stw	ra,12(sp)
  804824:	df000215 	stw	fp,8(sp)
  804828:	df000204 	addi	fp,sp,8
  80482c:	e13fff0d 	sth	r4,-4(fp)
	int i;
	for (i = 0; i < 44; i++) {
  804830:	e03ffe15 	stw	zero,-8(fp)
  804834:	00000506 	br	80484c <readPastWavHeader+0x30>
		readByte(handle);
  804838:	e13fff0f 	ldh	r4,-4(fp)
  80483c:	08045c80 	call	8045c8 <readByte>
	return fileLength;
}

void readPastWavHeader(short int handle) {
	int i;
	for (i = 0; i < 44; i++) {
  804840:	e0bffe17 	ldw	r2,-8(fp)
  804844:	10800044 	addi	r2,r2,1
  804848:	e0bffe15 	stw	r2,-8(fp)
  80484c:	e0bffe17 	ldw	r2,-8(fp)
  804850:	10800b10 	cmplti	r2,r2,44
  804854:	103ff81e 	bne	r2,zero,804838 <readPastWavHeader+0x1c>
		readByte(handle);
	}
}
  804858:	e037883a 	mov	sp,fp
  80485c:	dfc00117 	ldw	ra,4(sp)
  804860:	df000017 	ldw	fp,0(sp)
  804864:	dec00204 	addi	sp,sp,8
  804868:	f800283a 	ret

0080486c <initSharks>:
Shark *deadSharkList = NULL;
unsigned int sharkCount = 0;
Shark sharkArray[NUM_SHARKS];
int sharkArrayCursor = 0;;

void initSharks(void) {
  80486c:	defffd04 	addi	sp,sp,-12
  804870:	df000215 	stw	fp,8(sp)
  804874:	df000204 	addi	fp,sp,8
	int i;
	Shark *cursor;
	for (i = 0; i < NUM_SHARKS; i++) {
  804878:	e03fff15 	stw	zero,-4(fp)
  80487c:	00000d06 	br	8048b4 <initSharks+0x48>
		cursor = &(sharkArray[i]);
  804880:	e0bfff17 	ldw	r2,-4(fp)
  804884:	10800a24 	muli	r2,r2,40
  804888:	1007883a 	mov	r3,r2
  80488c:	008020b4 	movhi	r2,130
  804890:	10889a04 	addi	r2,r2,8808
  804894:	1885883a 	add	r2,r3,r2
  804898:	e0bffe15 	stw	r2,-8(fp)
		cursor->state = DEAD;
  80489c:	e0fffe17 	ldw	r3,-8(fp)
  8048a0:	008000c4 	movi	r2,3
  8048a4:	1880090d 	sth	r2,36(r3)
int sharkArrayCursor = 0;;

void initSharks(void) {
	int i;
	Shark *cursor;
	for (i = 0; i < NUM_SHARKS; i++) {
  8048a8:	e0bfff17 	ldw	r2,-4(fp)
  8048ac:	10800044 	addi	r2,r2,1
  8048b0:	e0bfff15 	stw	r2,-4(fp)
  8048b4:	e0bfff17 	ldw	r2,-4(fp)
  8048b8:	10800810 	cmplti	r2,r2,32
  8048bc:	103ff01e 	bne	r2,zero,804880 <initSharks+0x14>
		cursor = &(sharkArray[i]);
		cursor->state = DEAD;
	}
}
  8048c0:	e037883a 	mov	sp,fp
  8048c4:	df000017 	ldw	fp,0(sp)
  8048c8:	dec00104 	addi	sp,sp,4
  8048cc:	f800283a 	ret

008048d0 <getFreeShark>:

Shark *getFreeShark(void) {
  8048d0:	defffd04 	addi	sp,sp,-12
  8048d4:	df000215 	stw	fp,8(sp)
  8048d8:	df000204 	addi	fp,sp,8
	int i;
	for (i = 0; i < NUM_SHARKS; i++) {
  8048dc:	e03ffe15 	stw	zero,-8(fp)
  8048e0:	00001706 	br	804940 <getFreeShark+0x70>
		if (sharkArray[i].state == DEAD) {
  8048e4:	e0bffe17 	ldw	r2,-8(fp)
  8048e8:	00c020b4 	movhi	r3,130
  8048ec:	18c89a04 	addi	r3,r3,8808
  8048f0:	10800a24 	muli	r2,r2,40
  8048f4:	10c5883a 	add	r2,r2,r3
  8048f8:	10800904 	addi	r2,r2,36
  8048fc:	1080000b 	ldhu	r2,0(r2)
  804900:	10bfffcc 	andi	r2,r2,65535
  804904:	10a0001c 	xori	r2,r2,32768
  804908:	10a00004 	addi	r2,r2,-32768
  80490c:	108000d8 	cmpnei	r2,r2,3
  804910:	1000081e 	bne	r2,zero,804934 <getFreeShark+0x64>
			return &(sharkArray[i]);
  804914:	e0bffe17 	ldw	r2,-8(fp)
  804918:	10800a24 	muli	r2,r2,40
  80491c:	1007883a 	mov	r3,r2
  804920:	008020b4 	movhi	r2,130
  804924:	10889a04 	addi	r2,r2,8808
  804928:	1887883a 	add	r3,r3,r2
  80492c:	e0ffff15 	stw	r3,-4(fp)
  804930:	00000706 	br	804950 <getFreeShark+0x80>
	}
}

Shark *getFreeShark(void) {
	int i;
	for (i = 0; i < NUM_SHARKS; i++) {
  804934:	e0bffe17 	ldw	r2,-8(fp)
  804938:	10800044 	addi	r2,r2,1
  80493c:	e0bffe15 	stw	r2,-8(fp)
  804940:	e0bffe17 	ldw	r2,-8(fp)
  804944:	10800810 	cmplti	r2,r2,32
  804948:	103fe61e 	bne	r2,zero,8048e4 <getFreeShark+0x14>
		if (sharkArray[i].state == DEAD) {
			return &(sharkArray[i]);
		}
	}
	return NULL;
  80494c:	e03fff15 	stw	zero,-4(fp)
  804950:	e0bfff17 	ldw	r2,-4(fp)
}
  804954:	e037883a 	mov	sp,fp
  804958:	df000017 	ldw	fp,0(sp)
  80495c:	dec00104 	addi	sp,sp,4
  804960:	f800283a 	ret

00804964 <drawShark>:

void drawShark(Shark *shark) {
  804964:	defffd04 	addi	sp,sp,-12
  804968:	dfc00215 	stw	ra,8(sp)
  80496c:	df000115 	stw	fp,4(sp)
  804970:	df000104 	addi	fp,sp,4
  804974:	e13fff15 	stw	r4,-4(fp)
	if (shark != NULL) {
  804978:	e0bfff17 	ldw	r2,-4(fp)
  80497c:	1005003a 	cmpeq	r2,r2,zero
  804980:	1000071e 	bne	r2,zero,8049a0 <drawShark+0x3c>
		drawBmp(sharkBmp, shark->x, shark->y);
  804984:	d1271717 	ldw	r4,-25508(gp)
  804988:	e0bfff17 	ldw	r2,-4(fp)
  80498c:	11400017 	ldw	r5,0(r2)
  804990:	e0bfff17 	ldw	r2,-4(fp)
  804994:	11800217 	ldw	r6,8(r2)
  804998:	08015f80 	call	8015f8 <drawBmp>
  80499c:	00000306 	br	8049ac <drawShark+0x48>
	} else {
		printf("Attempt to draw null shark.\n");
  8049a0:	010020b4 	movhi	r4,130
  8049a4:	212f8b04 	addi	r4,r4,-16852
  8049a8:	08099640 	call	809964 <puts>
	}
}
  8049ac:	e037883a 	mov	sp,fp
  8049b0:	dfc00117 	ldw	ra,4(sp)
  8049b4:	df000017 	ldw	fp,0(sp)
  8049b8:	dec00204 	addi	sp,sp,8
  8049bc:	f800283a 	ret

008049c0 <eraseShark>:

void eraseShark(Shark *shark){
  8049c0:	defffd04 	addi	sp,sp,-12
  8049c4:	dfc00215 	stw	ra,8(sp)
  8049c8:	df000115 	stw	fp,4(sp)
  8049cc:	df000104 	addi	fp,sp,4
  8049d0:	e13fff15 	stw	r4,-4(fp)
	if (shark != NULL) {
  8049d4:	e0bfff17 	ldw	r2,-4(fp)
  8049d8:	1005003a 	cmpeq	r2,r2,zero
  8049dc:	1000071e 	bne	r2,zero,8049fc <eraseShark+0x3c>
		eraseBmp(sharkBmp, shark->prevX, shark->prevY);
  8049e0:	d1271717 	ldw	r4,-25508(gp)
  8049e4:	e0bfff17 	ldw	r2,-4(fp)
  8049e8:	11400117 	ldw	r5,4(r2)
  8049ec:	e0bfff17 	ldw	r2,-4(fp)
  8049f0:	11800317 	ldw	r6,12(r2)
  8049f4:	08017640 	call	801764 <eraseBmp>
  8049f8:	00000306 	br	804a08 <eraseShark+0x48>
	} else {
		printf("Attempt to erase null shark.\n");
  8049fc:	010020b4 	movhi	r4,130
  804a00:	212f9204 	addi	r4,r4,-16824
  804a04:	08099640 	call	809964 <puts>
	}
}
  804a08:	e037883a 	mov	sp,fp
  804a0c:	dfc00117 	ldw	ra,4(sp)
  804a10:	df000017 	ldw	fp,0(sp)
  804a14:	dec00204 	addi	sp,sp,8
  804a18:	f800283a 	ret

00804a1c <moveShark>:

void moveShark(Shark *shark) {
  804a1c:	defffc04 	addi	sp,sp,-16
  804a20:	dfc00315 	stw	ra,12(sp)
  804a24:	df000215 	stw	fp,8(sp)
  804a28:	df000204 	addi	fp,sp,8
  804a2c:	e13fff15 	stw	r4,-4(fp)
	if (shark == NULL) {
  804a30:	e0bfff17 	ldw	r2,-4(fp)
  804a34:	1004c03a 	cmpne	r2,r2,zero
  804a38:	1000041e 	bne	r2,zero,804a4c <moveShark+0x30>
		printf("Attempt to move null shark.\n");
  804a3c:	010020b4 	movhi	r4,130
  804a40:	212f9a04 	addi	r4,r4,-16792
  804a44:	08099640 	call	809964 <puts>
		return;
  804a48:	00003306 	br	804b18 <moveShark+0xfc>
	}

	shark->prevX = shark->x;
  804a4c:	e0bfff17 	ldw	r2,-4(fp)
  804a50:	10c00017 	ldw	r3,0(r2)
  804a54:	e0bfff17 	ldw	r2,-4(fp)
  804a58:	10c00115 	stw	r3,4(r2)
	shark->prevY = shark->y;
  804a5c:	e0bfff17 	ldw	r2,-4(fp)
  804a60:	10c00217 	ldw	r3,8(r2)
  804a64:	e0bfff17 	ldw	r2,-4(fp)
  804a68:	10c00315 	stw	r3,12(r2)

	shark->count++;
  804a6c:	e0bfff17 	ldw	r2,-4(fp)
  804a70:	10800517 	ldw	r2,20(r2)
  804a74:	10c00044 	addi	r3,r2,1
  804a78:	e0bfff17 	ldw	r2,-4(fp)
  804a7c:	10c00515 	stw	r3,20(r2)

	if (shark->count >= shark->freq) {
  804a80:	e0bfff17 	ldw	r2,-4(fp)
  804a84:	10c00517 	ldw	r3,20(r2)
  804a88:	e0bfff17 	ldw	r2,-4(fp)
  804a8c:	10800417 	ldw	r2,16(r2)
  804a90:	18800a16 	blt	r3,r2,804abc <moveShark+0xa0>
		shark->count = 0;
  804a94:	e0bfff17 	ldw	r2,-4(fp)
  804a98:	10000515 	stw	zero,20(r2)
		createBullet(SHARKBULLET, shark->x + BULLET_LENGTH, shark->y + SHARK_LASER_LOCATION);
  804a9c:	e0bfff17 	ldw	r2,-4(fp)
  804aa0:	10800017 	ldw	r2,0(r2)
  804aa4:	114000c4 	addi	r5,r2,3
  804aa8:	e0bfff17 	ldw	r2,-4(fp)
  804aac:	10800217 	ldw	r2,8(r2)
  804ab0:	11800344 	addi	r6,r2,13
  804ab4:	01000044 	movi	r4,1
  804ab8:	080185c0 	call	80185c <createBullet>
//		shark->type = RECENTLYDEAD;
//	} else if ((shark->y >= SCREEN_HEIGHT) || (shark->y <= -SHARK_HEIGHT)) {
//		shark->type = RECENTLYDEAD;
//	}

	Displacement *disp = shark->displacement;
  804abc:	e0bfff17 	ldw	r2,-4(fp)
  804ac0:	10800817 	ldw	r2,32(r2)
  804ac4:	e0bffe15 	stw	r2,-8(fp)
	shark->x += disp->dx;
  804ac8:	e0bfff17 	ldw	r2,-4(fp)
  804acc:	10c00017 	ldw	r3,0(r2)
  804ad0:	e0bffe17 	ldw	r2,-8(fp)
  804ad4:	1080000b 	ldhu	r2,0(r2)
  804ad8:	10bfffcc 	andi	r2,r2,65535
  804adc:	10a0001c 	xori	r2,r2,32768
  804ae0:	10a00004 	addi	r2,r2,-32768
  804ae4:	1887883a 	add	r3,r3,r2
  804ae8:	e0bfff17 	ldw	r2,-4(fp)
  804aec:	10c00015 	stw	r3,0(r2)
	shark->y += disp->dy;
  804af0:	e0bfff17 	ldw	r2,-4(fp)
  804af4:	10c00217 	ldw	r3,8(r2)
  804af8:	e0bffe17 	ldw	r2,-8(fp)
  804afc:	1080008b 	ldhu	r2,2(r2)
  804b00:	10bfffcc 	andi	r2,r2,65535
  804b04:	10a0001c 	xori	r2,r2,32768
  804b08:	10a00004 	addi	r2,r2,-32768
  804b0c:	1887883a 	add	r3,r3,r2
  804b10:	e0bfff17 	ldw	r2,-4(fp)
  804b14:	10c00215 	stw	r3,8(r2)
}
  804b18:	e037883a 	mov	sp,fp
  804b1c:	dfc00117 	ldw	ra,4(sp)
  804b20:	df000017 	ldw	fp,0(sp)
  804b24:	dec00204 	addi	sp,sp,8
  804b28:	f800283a 	ret

00804b2c <moveAllSharks>:

void moveAllSharks(void) {
  804b2c:	defffd04 	addi	sp,sp,-12
  804b30:	dfc00215 	stw	ra,8(sp)
  804b34:	df000115 	stw	fp,4(sp)
  804b38:	df000104 	addi	fp,sp,4
	Shark *cursor = sharkList;
  804b3c:	d0a72d17 	ldw	r2,-25420(gp)
  804b40:	e0bfff15 	stw	r2,-4(fp)
	while (cursor != NULL) {
  804b44:	00000506 	br	804b5c <moveAllSharks+0x30>
		moveShark(cursor);
  804b48:	e13fff17 	ldw	r4,-4(fp)
  804b4c:	0804a1c0 	call	804a1c <moveShark>
		cursor = cursor->next;
  804b50:	e0bfff17 	ldw	r2,-4(fp)
  804b54:	10800617 	ldw	r2,24(r2)
  804b58:	e0bfff15 	stw	r2,-4(fp)
	shark->y += disp->dy;
}

void moveAllSharks(void) {
	Shark *cursor = sharkList;
	while (cursor != NULL) {
  804b5c:	e0bfff17 	ldw	r2,-4(fp)
  804b60:	1004c03a 	cmpne	r2,r2,zero
  804b64:	103ff81e 	bne	r2,zero,804b48 <moveAllSharks+0x1c>
		moveShark(cursor);
		cursor = cursor->next;
	}
}
  804b68:	e037883a 	mov	sp,fp
  804b6c:	dfc00117 	ldw	ra,4(sp)
  804b70:	df000017 	ldw	fp,0(sp)
  804b74:	dec00204 	addi	sp,sp,8
  804b78:	f800283a 	ret

00804b7c <drawAllSharks>:

void drawAllSharks(void) {
  804b7c:	defffd04 	addi	sp,sp,-12
  804b80:	dfc00215 	stw	ra,8(sp)
  804b84:	df000115 	stw	fp,4(sp)
  804b88:	df000104 	addi	fp,sp,4
	Shark *cursor = sharkList;
  804b8c:	d0a72d17 	ldw	r2,-25420(gp)
  804b90:	e0bfff15 	stw	r2,-4(fp)
	while (cursor != NULL) {
  804b94:	00000506 	br	804bac <drawAllSharks+0x30>
		drawShark(cursor);
  804b98:	e13fff17 	ldw	r4,-4(fp)
  804b9c:	08049640 	call	804964 <drawShark>
		cursor = cursor->next;
  804ba0:	e0bfff17 	ldw	r2,-4(fp)
  804ba4:	10800617 	ldw	r2,24(r2)
  804ba8:	e0bfff15 	stw	r2,-4(fp)
	}
}

void drawAllSharks(void) {
	Shark *cursor = sharkList;
	while (cursor != NULL) {
  804bac:	e0bfff17 	ldw	r2,-4(fp)
  804bb0:	1004c03a 	cmpne	r2,r2,zero
  804bb4:	103ff81e 	bne	r2,zero,804b98 <drawAllSharks+0x1c>
		drawShark(cursor);
		cursor = cursor->next;
	}
}
  804bb8:	e037883a 	mov	sp,fp
  804bbc:	dfc00117 	ldw	ra,4(sp)
  804bc0:	df000017 	ldw	fp,0(sp)
  804bc4:	dec00204 	addi	sp,sp,8
  804bc8:	f800283a 	ret

00804bcc <eraseAllSharks>:

void eraseAllSharks(void) {
  804bcc:	defffd04 	addi	sp,sp,-12
  804bd0:	dfc00215 	stw	ra,8(sp)
  804bd4:	df000115 	stw	fp,4(sp)
  804bd8:	df000104 	addi	fp,sp,4
	Shark *cursor = sharkList;
  804bdc:	d0a72d17 	ldw	r2,-25420(gp)
  804be0:	e0bfff15 	stw	r2,-4(fp)
	// TODO: erase recently dead list
	while (cursor != NULL) {
  804be4:	00000506 	br	804bfc <eraseAllSharks+0x30>
		eraseShark(cursor);
  804be8:	e13fff17 	ldw	r4,-4(fp)
  804bec:	08049c00 	call	8049c0 <eraseShark>
		cursor = cursor->next;
  804bf0:	e0bfff17 	ldw	r2,-4(fp)
  804bf4:	10800617 	ldw	r2,24(r2)
  804bf8:	e0bfff15 	stw	r2,-4(fp)
}

void eraseAllSharks(void) {
	Shark *cursor = sharkList;
	// TODO: erase recently dead list
	while (cursor != NULL) {
  804bfc:	e0bfff17 	ldw	r2,-4(fp)
  804c00:	1004c03a 	cmpne	r2,r2,zero
  804c04:	103ff81e 	bne	r2,zero,804be8 <eraseAllSharks+0x1c>
		eraseShark(cursor);
		cursor = cursor->next;
	}
}
  804c08:	e037883a 	mov	sp,fp
  804c0c:	dfc00117 	ldw	ra,4(sp)
  804c10:	df000017 	ldw	fp,0(sp)
  804c14:	dec00204 	addi	sp,sp,8
  804c18:	f800283a 	ret

00804c1c <createShark>:

void createShark(int sudoRandomSeed, int x, int y, Displacement *displacement) {
  804c1c:	defff904 	addi	sp,sp,-28
  804c20:	dfc00615 	stw	ra,24(sp)
  804c24:	df000515 	stw	fp,20(sp)
  804c28:	df000504 	addi	fp,sp,20
  804c2c:	e13ffc15 	stw	r4,-16(fp)
  804c30:	e17ffd15 	stw	r5,-12(fp)
  804c34:	e1bffe15 	stw	r6,-8(fp)
  804c38:	e1ffff15 	stw	r7,-4(fp)
	if (displacement == NULL) {
  804c3c:	e0bfff17 	ldw	r2,-4(fp)
  804c40:	1004c03a 	cmpne	r2,r2,zero
  804c44:	1000041e 	bne	r2,zero,804c58 <createShark+0x3c>
		printf("Attempt to create shark with null displacement.\n");
  804c48:	010020b4 	movhi	r4,130
  804c4c:	212fa104 	addi	r4,r4,-16764
  804c50:	08099640 	call	809964 <puts>
		return;
  804c54:	00002b06 	br	804d04 <createShark+0xe8>
	}

	//Shark *newShark = malloc(sizeof(Shark));
	Shark *newShark = getFreeShark();
  804c58:	08048d00 	call	8048d0 <getFreeShark>
  804c5c:	e0bffb15 	stw	r2,-20(fp)
	newShark->state = LIVE;
  804c60:	e0fffb17 	ldw	r3,-20(fp)
  804c64:	00800044 	movi	r2,1
  804c68:	1880090d 	sth	r2,36(r3)

	newShark->x = x;
  804c6c:	e0fffb17 	ldw	r3,-20(fp)
  804c70:	e0bffd17 	ldw	r2,-12(fp)
  804c74:	18800015 	stw	r2,0(r3)
	newShark->y = y;
  804c78:	e0fffb17 	ldw	r3,-20(fp)
  804c7c:	e0bffe17 	ldw	r2,-8(fp)
  804c80:	18800215 	stw	r2,8(r3)
	newShark->displacement = displacement;
  804c84:	e0fffb17 	ldw	r3,-20(fp)
  804c88:	e0bfff17 	ldw	r2,-4(fp)
  804c8c:	18800815 	stw	r2,32(r3)
	newShark->prev = NULL;
  804c90:	e0bffb17 	ldw	r2,-20(fp)
  804c94:	10000715 	stw	zero,28(r2)
	if (sharkList == NULL) {
  804c98:	d0a72d17 	ldw	r2,-25420(gp)
  804c9c:	1004c03a 	cmpne	r2,r2,zero
  804ca0:	1000051e 	bne	r2,zero,804cb8 <createShark+0x9c>
		sharkList = newShark;
  804ca4:	e0bffb17 	ldw	r2,-20(fp)
  804ca8:	d0a72d15 	stw	r2,-25420(gp)
		newShark->next = NULL;
  804cac:	e0bffb17 	ldw	r2,-20(fp)
  804cb0:	10000615 	stw	zero,24(r2)
  804cb4:	00000806 	br	804cd8 <createShark+0xbc>
	} else {
		sharkList->prev = newShark;
  804cb8:	d0e72d17 	ldw	r3,-25420(gp)
  804cbc:	e0bffb17 	ldw	r2,-20(fp)
  804cc0:	18800715 	stw	r2,28(r3)
		newShark->next = sharkList;
  804cc4:	d0e72d17 	ldw	r3,-25420(gp)
  804cc8:	e0bffb17 	ldw	r2,-20(fp)
  804ccc:	10c00615 	stw	r3,24(r2)
		sharkList = newShark;
  804cd0:	e0bffb17 	ldw	r2,-20(fp)
  804cd4:	d0a72d15 	stw	r2,-25420(gp)
	}
	newShark->freq = (sudoRandomSeed % 10) + PLAYER_HEIGHT + 1;
  804cd8:	e13ffc17 	ldw	r4,-16(fp)
  804cdc:	01400284 	movi	r5,10
  804ce0:	08088100 	call	808810 <__modsi3>
  804ce4:	10c007c4 	addi	r3,r2,31
  804ce8:	e0bffb17 	ldw	r2,-20(fp)
  804cec:	10c00415 	stw	r3,16(r2)
	newShark->count = 0;
  804cf0:	e0bffb17 	ldw	r2,-20(fp)
  804cf4:	10000515 	stw	zero,20(r2)
	sharkCount++;
  804cf8:	d0a72f17 	ldw	r2,-25412(gp)
  804cfc:	10800044 	addi	r2,r2,1
  804d00:	d0a72f15 	stw	r2,-25412(gp)
}
  804d04:	e037883a 	mov	sp,fp
  804d08:	dfc00117 	ldw	ra,4(sp)
  804d0c:	df000017 	ldw	fp,0(sp)
  804d10:	dec00204 	addi	sp,sp,8
  804d14:	f800283a 	ret

00804d18 <killShark>:

void killShark(Shark *shark) {
  804d18:	defffb04 	addi	sp,sp,-20
  804d1c:	dfc00415 	stw	ra,16(sp)
  804d20:	df000315 	stw	fp,12(sp)
  804d24:	df000304 	addi	fp,sp,12
  804d28:	e13fff15 	stw	r4,-4(fp)
	if (shark == NULL) {
  804d2c:	e0bfff17 	ldw	r2,-4(fp)
  804d30:	1004c03a 	cmpne	r2,r2,zero
  804d34:	1000041e 	bne	r2,zero,804d48 <killShark+0x30>
		printf("Attempt to kill null shark.\n");
  804d38:	010020b4 	movhi	r4,130
  804d3c:	212fad04 	addi	r4,r4,-16716
  804d40:	08099640 	call	809964 <puts>
		return;
  804d44:	00002f06 	br	804e04 <killShark+0xec>
	}

	shark->state = RECENTLY_DEAD;
  804d48:	e0ffff17 	ldw	r3,-4(fp)
  804d4c:	00800084 	movi	r2,2
  804d50:	1880090d 	sth	r2,36(r3)

	Shark *previousShark = shark->prev;
  804d54:	e0bfff17 	ldw	r2,-4(fp)
  804d58:	10800717 	ldw	r2,28(r2)
  804d5c:	e0bffe15 	stw	r2,-8(fp)
	Shark *nextShark = shark->next;
  804d60:	e0bfff17 	ldw	r2,-4(fp)
  804d64:	10800617 	ldw	r2,24(r2)
  804d68:	e0bffd15 	stw	r2,-12(fp)

	if (deadSharkList == NULL) {
  804d6c:	d0a72e17 	ldw	r2,-25416(gp)
  804d70:	1004c03a 	cmpne	r2,r2,zero
  804d74:	1000031e 	bne	r2,zero,804d84 <killShark+0x6c>
		deadSharkList = shark;
  804d78:	e0bfff17 	ldw	r2,-4(fp)
  804d7c:	d0a72e15 	stw	r2,-25416(gp)
		deadSharkList->next == NULL;
  804d80:	00000806 	br	804da4 <killShark+0x8c>
	}
	else {
		deadSharkList->prev = shark;
  804d84:	d0e72e17 	ldw	r3,-25416(gp)
  804d88:	e0bfff17 	ldw	r2,-4(fp)
  804d8c:	18800715 	stw	r2,28(r3)
		shark->next = deadSharkList;
  804d90:	d0e72e17 	ldw	r3,-25416(gp)
  804d94:	e0bfff17 	ldw	r2,-4(fp)
  804d98:	10c00615 	stw	r3,24(r2)
		deadSharkList = shark;
  804d9c:	e0bfff17 	ldw	r2,-4(fp)
  804da0:	d0a72e15 	stw	r2,-25416(gp)
	}

	playSharkDeath();
  804da4:	0800bcc0 	call	800bcc <playSharkDeath>
	// Need to erase now because we free the shark
	eraseShark(shark);
  804da8:	e13fff17 	ldw	r4,-4(fp)
  804dac:	08049c00 	call	8049c0 <eraseShark>
	// TODO: increase player score

	if (previousShark != NULL) {
  804db0:	e0bffe17 	ldw	r2,-8(fp)
  804db4:	1005003a 	cmpeq	r2,r2,zero
  804db8:	1000041e 	bne	r2,zero,804dcc <killShark+0xb4>
		// Not killing first shark
		previousShark->next = nextShark;
  804dbc:	e0fffe17 	ldw	r3,-8(fp)
  804dc0:	e0bffd17 	ldw	r2,-12(fp)
  804dc4:	18800615 	stw	r2,24(r3)
  804dc8:	00000206 	br	804dd4 <killShark+0xbc>
	} else {
		// Killing first shark
		sharkList = nextShark;
  804dcc:	e0bffd17 	ldw	r2,-12(fp)
  804dd0:	d0a72d15 	stw	r2,-25420(gp)
	}

	if (nextShark != NULL) {
  804dd4:	e0bffd17 	ldw	r2,-12(fp)
  804dd8:	1005003a 	cmpeq	r2,r2,zero
  804ddc:	1000031e 	bne	r2,zero,804dec <killShark+0xd4>
		// Not killing last shark
		nextShark->prev = previousShark;
  804de0:	e0fffd17 	ldw	r3,-12(fp)
  804de4:	e0bffe17 	ldw	r2,-8(fp)
  804de8:	18800715 	stw	r2,28(r3)
	} else {
		// Killing last shark
	}
	sharkCount--;
  804dec:	d0a72f17 	ldw	r2,-25412(gp)
  804df0:	10bfffc4 	addi	r2,r2,-1
  804df4:	d0a72f15 	stw	r2,-25412(gp)
	updateCurrentPlayerScore(250);
  804df8:	01003e84 	movi	r4,250
  804dfc:	0803f8c0 	call	803f8c <updateCurrentPlayerScore>
	drawInGameInfo();
  804e00:	080429c0 	call	80429c <drawInGameInfo>
}
  804e04:	e037883a 	mov	sp,fp
  804e08:	dfc00117 	ldw	ra,4(sp)
  804e0c:	df000017 	ldw	fp,0(sp)
  804e10:	dec00204 	addi	sp,sp,8
  804e14:	f800283a 	ret

00804e18 <cleanupDeadSharks>:

void cleanupDeadSharks() {
  804e18:	defffd04 	addi	sp,sp,-12
  804e1c:	dfc00215 	stw	ra,8(sp)
  804e20:	df000115 	stw	fp,4(sp)
  804e24:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < NUM_SHARKS; i++) {
  804e28:	e03fff15 	stw	zero,-4(fp)
  804e2c:	00003906 	br	804f14 <cleanupDeadSharks+0xfc>
		if (sharkArray[i].state == RECENTLY_DEAD) {
  804e30:	e0bfff17 	ldw	r2,-4(fp)
  804e34:	00c020b4 	movhi	r3,130
  804e38:	18c89a04 	addi	r3,r3,8808
  804e3c:	10800a24 	muli	r2,r2,40
  804e40:	10c5883a 	add	r2,r2,r3
  804e44:	10800904 	addi	r2,r2,36
  804e48:	1080000b 	ldhu	r2,0(r2)
  804e4c:	10bfffcc 	andi	r2,r2,65535
  804e50:	10a0001c 	xori	r2,r2,32768
  804e54:	10a00004 	addi	r2,r2,-32768
  804e58:	10800098 	cmpnei	r2,r2,2
  804e5c:	10002a1e 	bne	r2,zero,804f08 <cleanupDeadSharks+0xf0>
			sharkArray[i].state = DEAD;
  804e60:	e0bfff17 	ldw	r2,-4(fp)
  804e64:	00c020b4 	movhi	r3,130
  804e68:	18c89a04 	addi	r3,r3,8808
  804e6c:	10800a24 	muli	r2,r2,40
  804e70:	10c5883a 	add	r2,r2,r3
  804e74:	10c00904 	addi	r3,r2,36
  804e78:	008000c4 	movi	r2,3
  804e7c:	1880000d 	sth	r2,0(r3)
			sharkArray[i].prevX = sharkArray[i].x;
  804e80:	e17fff17 	ldw	r5,-4(fp)
  804e84:	e0bfff17 	ldw	r2,-4(fp)
  804e88:	00c020b4 	movhi	r3,130
  804e8c:	18c89a04 	addi	r3,r3,8808
  804e90:	10800a24 	muli	r2,r2,40
  804e94:	10c5883a 	add	r2,r2,r3
  804e98:	11000017 	ldw	r4,0(r2)
  804e9c:	00c020b4 	movhi	r3,130
  804ea0:	18c89a04 	addi	r3,r3,8808
  804ea4:	28800a24 	muli	r2,r5,40
  804ea8:	10c5883a 	add	r2,r2,r3
  804eac:	10800104 	addi	r2,r2,4
  804eb0:	11000015 	stw	r4,0(r2)
			sharkArray[i].prevY = sharkArray[i].y;
  804eb4:	e17fff17 	ldw	r5,-4(fp)
  804eb8:	e0bfff17 	ldw	r2,-4(fp)
  804ebc:	00c020b4 	movhi	r3,130
  804ec0:	18c89a04 	addi	r3,r3,8808
  804ec4:	10800a24 	muli	r2,r2,40
  804ec8:	10c5883a 	add	r2,r2,r3
  804ecc:	10800204 	addi	r2,r2,8
  804ed0:	11000017 	ldw	r4,0(r2)
  804ed4:	00c020b4 	movhi	r3,130
  804ed8:	18c89a04 	addi	r3,r3,8808
  804edc:	28800a24 	muli	r2,r5,40
  804ee0:	10c5883a 	add	r2,r2,r3
  804ee4:	10800304 	addi	r2,r2,12
  804ee8:	11000015 	stw	r4,0(r2)
			eraseShark(&(sharkArray[i]));
  804eec:	e0bfff17 	ldw	r2,-4(fp)
  804ef0:	10800a24 	muli	r2,r2,40
  804ef4:	1007883a 	mov	r3,r2
  804ef8:	008020b4 	movhi	r2,130
  804efc:	10889a04 	addi	r2,r2,8808
  804f00:	1889883a 	add	r4,r3,r2
  804f04:	08049c00 	call	8049c0 <eraseShark>
	drawInGameInfo();
}

void cleanupDeadSharks() {
	int i;
	for (i = 0; i < NUM_SHARKS; i++) {
  804f08:	e0bfff17 	ldw	r2,-4(fp)
  804f0c:	10800044 	addi	r2,r2,1
  804f10:	e0bfff15 	stw	r2,-4(fp)
  804f14:	e0bfff17 	ldw	r2,-4(fp)
  804f18:	10800810 	cmplti	r2,r2,32
  804f1c:	103fc41e 	bne	r2,zero,804e30 <cleanupDeadSharks+0x18>
//		//free(cursor);
//		cursor = next;
//		i++;
//	}
//	deadSharkList = NULL;
}
  804f20:	e037883a 	mov	sp,fp
  804f24:	dfc00117 	ldw	ra,4(sp)
  804f28:	df000017 	ldw	fp,0(sp)
  804f2c:	dec00204 	addi	sp,sp,8
  804f30:	f800283a 	ret

00804f34 <drawSplashScreen>:
#include "splash.h"

void drawSplashScreen() {
  804f34:	defffe04 	addi	sp,sp,-8
  804f38:	dfc00115 	stw	ra,4(sp)
  804f3c:	df000015 	stw	fp,0(sp)
  804f40:	d839883a 	mov	fp,sp
	drawBmp(splashBmp, 0, 0);
  804f44:	d1271817 	ldw	r4,-25504(gp)
  804f48:	000b883a 	mov	r5,zero
  804f4c:	000d883a 	mov	r6,zero
  804f50:	08015f80 	call	8015f8 <drawBmp>

	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  804f54:	d1271917 	ldw	r4,-25500(gp)
  804f58:	0814e780 	call	814e78 <alt_up_pixel_buffer_dma_swap_buffers>
	while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  804f5c:	d1271917 	ldw	r4,-25500(gp)
  804f60:	0814ed00 	call	814ed0 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  804f64:	1004c03a 	cmpne	r2,r2,zero
  804f68:	103ffc1e 	bne	r2,zero,804f5c <drawSplashScreen+0x28>

}
  804f6c:	e037883a 	mov	sp,fp
  804f70:	dfc00117 	ldw	ra,4(sp)
  804f74:	df000017 	ldw	fp,0(sp)
  804f78:	dec00204 	addi	sp,sp,8
  804f7c:	f800283a 	ret

00804f80 <clearSplashScreen>:

void clearSplashScreen() {
  804f80:	defffe04 	addi	sp,sp,-8
  804f84:	dfc00115 	stw	ra,4(sp)
  804f88:	df000015 	stw	fp,0(sp)
  804f8c:	d839883a 	mov	fp,sp
	clearScreen();
  804f90:	08053b40 	call	8053b4 <clearScreen>

	freeSplash();
  804f94:	08015c00 	call	8015c0 <freeSplash>
}
  804f98:	e037883a 	mov	sp,fp
  804f9c:	dfc00117 	ldw	ra,4(sp)
  804fa0:	df000017 	ldw	fp,0(sp)
  804fa4:	dec00204 	addi	sp,sp,8
  804fa8:	f800283a 	ret

00804fac <timer_test>:
#include "sys/alt_alarm.h"
#include "system.h"
#include "timer.h"

// Test code from lab
void timer_test(void) {
  804fac:	defff304 	addi	sp,sp,-52
  804fb0:	dfc00c15 	stw	ra,48(sp)
  804fb4:	df000b15 	stw	fp,44(sp)
  804fb8:	dc000a15 	stw	r16,40(sp)
  804fbc:	df000a04 	addi	fp,sp,40
	int ticks_duration;
	int timer_period;
	int status;
	int done;

	printf("Timers\n");
  804fc0:	010020b4 	movhi	r4,130
  804fc4:	212fb404 	addi	r4,r4,-16688
  804fc8:	08099640 	call	809964 <puts>
	printf(" Sys Clock Timer\n");
  804fcc:	010020b4 	movhi	r4,130
  804fd0:	212fb604 	addi	r4,r4,-16680
  804fd4:	08099640 	call	809964 <puts>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  804fd8:	008020b4 	movhi	r2,130
  804fdc:	10bf7504 	addi	r2,r2,-556
  804fe0:	10800017 	ldw	r2,0(r2)
	ticks_per_s = alt_ticks_per_second();
  804fe4:	e0bffa15 	stw	r2,-24(fp)
	printf("Tick Freq: %d\n", ticks_per_s);
  804fe8:	010020b4 	movhi	r4,130
  804fec:	212fbb04 	addi	r4,r4,-16660
  804ff0:	e17ffa17 	ldw	r5,-24(fp)
  804ff4:	080984c0 	call	80984c <printf>
	printf(" Recording starting ticks\n");
  804ff8:	010020b4 	movhi	r4,130
  804ffc:	212fbf04 	addi	r4,r4,-16644
  805000:	08099640 	call	809964 <puts>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  805004:	008020b4 	movhi	r2,130
  805008:	10bf7604 	addi	r2,r2,-552
  80500c:	10800017 	ldw	r2,0(r2)
	ticks_start = alt_nticks();
  805010:	e0bffc15 	stw	r2,-16(fp)
	printf(" Sleeping for 5 seconds\n");
  805014:	010020b4 	movhi	r4,130
  805018:	212fc604 	addi	r4,r4,-16616
  80501c:	08099640 	call	809964 <puts>
	usleep(5000000);
  805020:	01001334 	movhi	r4,76
  805024:	2112d004 	addi	r4,r4,19264
  805028:	08121dc0 	call	8121dc <usleep>
	printf(" Recording ending ticks\n");
  80502c:	010020b4 	movhi	r4,130
  805030:	212fcc04 	addi	r4,r4,-16592
  805034:	08099640 	call	809964 <puts>
  805038:	008020b4 	movhi	r2,130
  80503c:	10bf7604 	addi	r2,r2,-552
  805040:	10800017 	ldw	r2,0(r2)
	ticks_end = alt_nticks();
  805044:	e0bffb15 	stw	r2,-20(fp)
	ticks_duration = ticks_end -ticks_start;
  805048:	e0fffb17 	ldw	r3,-20(fp)
  80504c:	e0bffc17 	ldw	r2,-16(fp)
  805050:	1885c83a 	sub	r2,r3,r2
  805054:	e0bff915 	stw	r2,-28(fp)
	duration = (float) ticks_duration / (float) ticks_per_s;
  805058:	e13ff917 	ldw	r4,-28(fp)
  80505c:	08076780 	call	807678 <__floatsisf>
  805060:	1021883a 	mov	r16,r2
  805064:	e13ffa17 	ldw	r4,-24(fp)
  805068:	08076780 	call	807678 <__floatsisf>
  80506c:	8009883a 	mov	r4,r16
  805070:	100b883a 	mov	r5,r2
  805074:	08075040 	call	807504 <__divsf3>
  805078:	e0bffd15 	stw	r2,-12(fp)
	printf(" The program slept for %d ticks (%f seconds)\n\n", ticks_duration,
  80507c:	e13ffd17 	ldw	r4,-12(fp)
  805080:	08077100 	call	807710 <__extendsfdf2>
  805084:	100f883a 	mov	r7,r2
  805088:	1811883a 	mov	r8,r3
  80508c:	010020b4 	movhi	r4,130
  805090:	212fd204 	addi	r4,r4,-16568
  805094:	e17ff917 	ldw	r5,-28(fp)
  805098:	380d883a 	mov	r6,r7
  80509c:	400f883a 	mov	r7,r8
  8050a0:	080984c0 	call	80984c <printf>
	duration);

	printf(" Timestamp Timer\n");
  8050a4:	010020b4 	movhi	r4,130
  8050a8:	212fde04 	addi	r4,r4,-16520
  8050ac:	08099640 	call	809964 <puts>
	freq = alt_timestamp_freq();
  8050b0:	08134500 	call	813450 <alt_timestamp_freq>
  8050b4:	e0bfff15 	stw	r2,-4(fp)
	printf(" CPU Freq: %d\n", freq);
  8050b8:	010020b4 	movhi	r4,130
  8050bc:	212fe304 	addi	r4,r4,-16500
  8050c0:	e17fff17 	ldw	r5,-4(fp)
  8050c4:	080984c0 	call	80984c <printf>
	printf(" Resetting Timestamp timer\n");
  8050c8:	010020b4 	movhi	r4,130
  8050cc:	212fe704 	addi	r4,r4,-16484
  8050d0:	08099640 	call	809964 <puts>
	alt_timestamp_start();
  8050d4:	08133100 	call	813310 <alt_timestamp_start>
	printf(" ...Timing the print of this statement...\n");
  8050d8:	010020b4 	movhi	r4,130
  8050dc:	212fee04 	addi	r4,r4,-16456
  8050e0:	08099640 	call	809964 <puts>
	cycles = alt_timestamp();
  8050e4:	08133b40 	call	8133b4 <alt_timestamp>
  8050e8:	e0bffe15 	stw	r2,-8(fp)
	duration = (float) cycles / (float) freq;
  8050ec:	e13ffe17 	ldw	r4,-8(fp)
  8050f0:	08076780 	call	807678 <__floatsisf>
  8050f4:	1021883a 	mov	r16,r2
  8050f8:	e13fff17 	ldw	r4,-4(fp)
  8050fc:	08076780 	call	807678 <__floatsisf>
  805100:	8009883a 	mov	r4,r16
  805104:	100b883a 	mov	r5,r2
  805108:	08075040 	call	807504 <__divsf3>
  80510c:	e0bffd15 	stw	r2,-12(fp)
	printf(" It took %d cycles (%f seconds) to print the statement\n\n",
  805110:	e13ffd17 	ldw	r4,-12(fp)
  805114:	08077100 	call	807710 <__extendsfdf2>
  805118:	100f883a 	mov	r7,r2
  80511c:	1811883a 	mov	r8,r3
  805120:	010020b4 	movhi	r4,130
  805124:	212ff904 	addi	r4,r4,-16412
  805128:	e17ffe17 	ldw	r5,-8(fp)
  80512c:	380d883a 	mov	r6,r7
  805130:	400f883a 	mov	r7,r8
  805134:	080984c0 	call	80984c <printf>
	cycles, duration);

	printf(" Hardware-Only Timer\n");
  805138:	010020b4 	movhi	r4,130
  80513c:	21300804 	addi	r4,r4,-16352
  805140:	08099640 	call	809964 <puts>
	printf(" Setting timer period to 5 seconds.\n");
  805144:	010020b4 	movhi	r4,130
  805148:	21300e04 	addi	r4,r4,-16328
  80514c:	08099640 	call	809964 <puts>
	timer_period = 5 * CLOCK_FREQ;
  805150:	0083b9f4 	movhi	r2,3815
  805154:	10aca004 	addi	r2,r2,-19840
  805158:	e0bff815 	stw	r2,-32(fp)
	// Setting the period registers must be done in 2 steps as they are only 16 bits wide
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 8, timer_period & 0xFFFF); // less significant word
  80515c:	e0bff817 	ldw	r2,-32(fp)
  805160:	10ffffcc 	andi	r3,r2,65535
  805164:	00804034 	movhi	r2,256
  805168:	10840204 	addi	r2,r2,4104
  80516c:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE,12, timer_period >> 16); // more significant word
  805170:	e0bff817 	ldw	r2,-32(fp)
  805174:	1007d43a 	srai	r3,r2,16
  805178:	00804034 	movhi	r2,256
  80517c:	10840304 	addi	r2,r2,4108
  805180:	10c0002d 	sthio	r3,0(r2)
	printf(" Stopping Timer\n");
  805184:	010020b4 	movhi	r4,130
  805188:	21301704 	addi	r4,r4,-16292
  80518c:	08099640 	call	809964 <puts>
	status = IORD_16DIRECT(HAL_SYSTEM_TIMER_BASE, 0); // read status registers
  805190:	00804034 	movhi	r2,256
  805194:	10840004 	addi	r2,r2,4096
  805198:	1080002b 	ldhuio	r2,0(r2)
  80519c:	e0bff715 	stw	r2,-36(fp)
	// Write the control registers
	if(status & 0x2) {
  8051a0:	e0bff717 	ldw	r2,-36(fp)
  8051a4:	1080008c 	andi	r2,r2,2
  8051a8:	1005003a 	cmpeq	r2,r2,zero
  8051ac:	1000041e 	bne	r2,zero,8051c0 <timer_test+0x214>
		IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 4, 1 << 3); // stop the timer if it was started
  8051b0:	00c04034 	movhi	r3,256
  8051b4:	18c40104 	addi	r3,r3,4100
  8051b8:	00800204 	movi	r2,8
  8051bc:	1880002d 	sthio	r2,0(r3)
	}
	printf(" Starting Timer\n");
  8051c0:	010020b4 	movhi	r4,130
  8051c4:	21301b04 	addi	r4,r4,-16276
  8051c8:	08099640 	call	809964 <puts>
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 4, 1 << 2); // start the timer
  8051cc:	00c04034 	movhi	r3,256
  8051d0:	18c40104 	addi	r3,r3,4100
  8051d4:	00800104 	movi	r2,4
  8051d8:	1880002d 	sthio	r2,0(r3)

	printf("  Waiting for timer to expire...\n");
  8051dc:	010020b4 	movhi	r4,130
  8051e0:	21301f04 	addi	r4,r4,-16260
  8051e4:	08099640 	call	809964 <puts>
	done = 0;
  8051e8:	e03ff615 	stw	zero,-40(fp)
	while(! done) {
  8051ec:	00000706 	br	80520c <timer_test+0x260>
		status = IORD_16DIRECT(HAL_SYSTEM_TIMER_BASE, 0); // read status registers
  8051f0:	00804034 	movhi	r2,256
  8051f4:	10840004 	addi	r2,r2,4096
  8051f8:	1080002b 	ldhuio	r2,0(r2)
  8051fc:	e0bff715 	stw	r2,-36(fp)
		done = status & 0x1;
  805200:	e0bff717 	ldw	r2,-36(fp)
  805204:	1080004c 	andi	r2,r2,1
  805208:	e0bff615 	stw	r2,-40(fp)
	printf(" Starting Timer\n");
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 4, 1 << 2); // start the timer

	printf("  Waiting for timer to expire...\n");
	done = 0;
	while(! done) {
  80520c:	e0bff617 	ldw	r2,-40(fp)
  805210:	1005003a 	cmpeq	r2,r2,zero
  805214:	103ff61e 	bne	r2,zero,8051f0 <timer_test+0x244>
		status = IORD_16DIRECT(HAL_SYSTEM_TIMER_BASE, 0); // read status registers
		done = status & 0x1;
	}
	printf(" 5 seconds timer is done\n");
  805218:	010020b4 	movhi	r4,130
  80521c:	21302804 	addi	r4,r4,-16224
  805220:	08099640 	call	809964 <puts>
}
  805224:	e037883a 	mov	sp,fp
  805228:	dfc00217 	ldw	ra,8(sp)
  80522c:	df000117 	ldw	fp,4(sp)
  805230:	dc000017 	ldw	r16,0(sp)
  805234:	dec00304 	addi	sp,sp,12
  805238:	f800283a 	ret

0080523c <setHardwareTimerPeriod>:

// Period is in clock cycles
// ie 5 seconds would be 5 * CLOCK_FREQ
void setHardwareTimerPeriod(int period)
{
  80523c:	defffe04 	addi	sp,sp,-8
  805240:	df000115 	stw	fp,4(sp)
  805244:	df000104 	addi	fp,sp,4
  805248:	e13fff15 	stw	r4,-4(fp)
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 8, period & 0xFFFF); // less significant word
  80524c:	e0bfff17 	ldw	r2,-4(fp)
  805250:	10ffffcc 	andi	r3,r2,65535
  805254:	00804034 	movhi	r2,256
  805258:	10840204 	addi	r2,r2,4104
  80525c:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE,12, period >> 16); // more significant word
  805260:	e0bfff17 	ldw	r2,-4(fp)
  805264:	1007d43a 	srai	r3,r2,16
  805268:	00804034 	movhi	r2,256
  80526c:	10840304 	addi	r2,r2,4108
  805270:	10c0002d 	sthio	r3,0(r2)
}
  805274:	e037883a 	mov	sp,fp
  805278:	df000017 	ldw	fp,0(sp)
  80527c:	dec00104 	addi	sp,sp,4
  805280:	f800283a 	ret

00805284 <isHardwareTimerRunning>:

int isHardwareTimerRunning(void)
{
  805284:	defffe04 	addi	sp,sp,-8
  805288:	df000115 	stw	fp,4(sp)
  80528c:	df000104 	addi	fp,sp,4
	int status = IORD_16DIRECT(HAL_SYSTEM_TIMER_BASE, 0);
  805290:	00804034 	movhi	r2,256
  805294:	10840004 	addi	r2,r2,4096
  805298:	1080002b 	ldhuio	r2,0(r2)
  80529c:	e0bfff15 	stw	r2,-4(fp)
	return status & 0x2; // not totally sure on this
  8052a0:	e0bfff17 	ldw	r2,-4(fp)
  8052a4:	1080008c 	andi	r2,r2,2
}
  8052a8:	e037883a 	mov	sp,fp
  8052ac:	df000017 	ldw	fp,0(sp)
  8052b0:	dec00104 	addi	sp,sp,4
  8052b4:	f800283a 	ret

008052b8 <hasHardwareTimerExpired>:

int hasHardwareTimerExpired(void)
{
  8052b8:	deffff04 	addi	sp,sp,-4
  8052bc:	df000015 	stw	fp,0(sp)
  8052c0:	d839883a 	mov	fp,sp
	return IORD_16DIRECT(HAL_SYSTEM_TIMER_BASE, 0);
  8052c4:	00804034 	movhi	r2,256
  8052c8:	10840004 	addi	r2,r2,4096
  8052cc:	1080002b 	ldhuio	r2,0(r2)
}
  8052d0:	e037883a 	mov	sp,fp
  8052d4:	df000017 	ldw	fp,0(sp)
  8052d8:	dec00104 	addi	sp,sp,4
  8052dc:	f800283a 	ret

008052e0 <startHardwareTimer>:

void startHardwareTimer(void)
{
  8052e0:	deffff04 	addi	sp,sp,-4
  8052e4:	df000015 	stw	fp,0(sp)
  8052e8:	d839883a 	mov	fp,sp
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 4, 1 << 2);
  8052ec:	00c04034 	movhi	r3,256
  8052f0:	18c40104 	addi	r3,r3,4100
  8052f4:	00800104 	movi	r2,4
  8052f8:	1880002d 	sthio	r2,0(r3)
}
  8052fc:	e037883a 	mov	sp,fp
  805300:	df000017 	ldw	fp,0(sp)
  805304:	dec00104 	addi	sp,sp,4
  805308:	f800283a 	ret

0080530c <initVga>:
#include "vga.h"

void initVga()
{
  80530c:	defffe04 	addi	sp,sp,-8
  805310:	dfc00115 	stw	ra,4(sp)
  805314:	df000015 	stw	fp,0(sp)
  805318:	d839883a 	mov	fp,sp
	pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma");
  80531c:	010020b4 	movhi	r4,130
  805320:	21302f04 	addi	r4,r4,-16196
  805324:	0814c400 	call	814c40 <alt_up_pixel_buffer_dma_open_dev>
  805328:	d0a71915 	stw	r2,-25500(gp)
	pixel_buffer_addr1 = PIXEL_BUFFER_BASE;
  80532c:	00804234 	movhi	r2,264
  805330:	d0a71415 	stw	r2,-25520(gp)
	pixel_buffer_addr2 = PIXEL_BUFFER_BASE + (320 * 240 * 2);
  805334:	008042b4 	movhi	r2,266
  805338:	10960004 	addi	r2,r2,22528
  80533c:	d0a71615 	stw	r2,-25512(gp)

	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer, pixel_buffer_addr1);
  805340:	d1271917 	ldw	r4,-25500(gp)
  805344:	d1671417 	ldw	r5,-25520(gp)
  805348:	0814e200 	call	814e20 <alt_up_pixel_buffer_dma_change_back_buffer_address>
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  80534c:	d1271917 	ldw	r4,-25500(gp)
  805350:	0814e780 	call	814e78 <alt_up_pixel_buffer_dma_swap_buffers>
	while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  805354:	d1271917 	ldw	r4,-25500(gp)
  805358:	0814ed00 	call	814ed0 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  80535c:	1004c03a 	cmpne	r2,r2,zero
  805360:	103ffc1e 	bne	r2,zero,805354 <initVga+0x48>

	// Set the 2nd buffer address
	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer, pixel_buffer_addr2);
  805364:	d1271917 	ldw	r4,-25500(gp)
  805368:	d1671617 	ldw	r5,-25512(gp)
  80536c:	0814e200 	call	814e20 <alt_up_pixel_buffer_dma_change_back_buffer_address>

	// Clear both buffers (this makes all pixels black)
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  805370:	d1271917 	ldw	r4,-25500(gp)
  805374:	000b883a 	mov	r5,zero
  805378:	0814f040 	call	814f04 <alt_up_pixel_buffer_dma_clear_screen>
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 1);
  80537c:	d1271917 	ldw	r4,-25500(gp)
  805380:	01400044 	movi	r5,1
  805384:	0814f040 	call	814f04 <alt_up_pixel_buffer_dma_clear_screen>

	char_buffer = alt_up_char_buffer_open_dev("/dev/char_drawer");
  805388:	010020b4 	movhi	r4,130
  80538c:	21303504 	addi	r4,r4,-16172
  805390:	08149c00 	call	8149c0 <alt_up_char_buffer_open_dev>
  805394:	d0a71515 	stw	r2,-25516(gp)
	alt_up_char_buffer_init(char_buffer);
  805398:	d1271517 	ldw	r4,-25516(gp)
  80539c:	081493c0 	call	81493c <alt_up_char_buffer_init>
}
  8053a0:	e037883a 	mov	sp,fp
  8053a4:	dfc00117 	ldw	ra,4(sp)
  8053a8:	df000017 	ldw	fp,0(sp)
  8053ac:	dec00204 	addi	sp,sp,8
  8053b0:	f800283a 	ret

008053b4 <clearScreen>:

void clearScreen()
{
  8053b4:	defffe04 	addi	sp,sp,-8
  8053b8:	dfc00115 	stw	ra,4(sp)
  8053bc:	df000015 	stw	fp,0(sp)
  8053c0:	d839883a 	mov	fp,sp
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  8053c4:	d1271917 	ldw	r4,-25500(gp)
  8053c8:	000b883a 	mov	r5,zero
  8053cc:	0814f040 	call	814f04 <alt_up_pixel_buffer_dma_clear_screen>
}
  8053d0:	e037883a 	mov	sp,fp
  8053d4:	dfc00117 	ldw	ra,4(sp)
  8053d8:	df000017 	ldw	fp,0(sp)
  8053dc:	dec00204 	addi	sp,sp,8
  8053e0:	f800283a 	ret

008053e4 <drawPixel>:

void drawPixel(int x, int y, int color) {
  8053e4:	defffb04 	addi	sp,sp,-20
  8053e8:	dfc00415 	stw	ra,16(sp)
  8053ec:	df000315 	stw	fp,12(sp)
  8053f0:	df000304 	addi	fp,sp,12
  8053f4:	e13ffd15 	stw	r4,-12(fp)
  8053f8:	e17ffe15 	stw	r5,-8(fp)
  8053fc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_pixel_buffer_dma_draw(pixel_buffer, color, x, y);
  805400:	d1271917 	ldw	r4,-25500(gp)
  805404:	e17fff17 	ldw	r5,-4(fp)
  805408:	e1bffd17 	ldw	r6,-12(fp)
  80540c:	e1fffe17 	ldw	r7,-8(fp)
  805410:	0814c800 	call	814c80 <alt_up_pixel_buffer_dma_draw>
}
  805414:	e037883a 	mov	sp,fp
  805418:	dfc00117 	ldw	ra,4(sp)
  80541c:	df000017 	ldw	fp,0(sp)
  805420:	dec00204 	addi	sp,sp,8
  805424:	f800283a 	ret

00805428 <drawLine>:

void drawLine(int x0, int y0, int x1, int y1, int color)
{
  805428:	defff704 	addi	sp,sp,-36
  80542c:	dfc00815 	stw	ra,32(sp)
  805430:	df000715 	stw	fp,28(sp)
  805434:	df000704 	addi	fp,sp,28
  805438:	e13ffc15 	stw	r4,-16(fp)
  80543c:	e17ffd15 	stw	r5,-12(fp)
  805440:	e1bffe15 	stw	r6,-8(fp)
  805444:	e1ffff15 	stw	r7,-4(fp)
	if (y0 == y1)
  805448:	e0fffd17 	ldw	r3,-12(fp)
  80544c:	e0bfff17 	ldw	r2,-4(fp)
  805450:	18800a1e 	bne	r3,r2,80547c <drawLine+0x54>
	{
		alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, 1);
  805454:	d1271917 	ldw	r4,-25500(gp)
  805458:	e0800217 	ldw	r2,8(fp)
  80545c:	d8800015 	stw	r2,0(sp)
  805460:	00800044 	movi	r2,1
  805464:	d8800115 	stw	r2,4(sp)
  805468:	e17ffc17 	ldw	r5,-16(fp)
  80546c:	e1bffe17 	ldw	r6,-8(fp)
  805470:	e1fffd17 	ldw	r7,-12(fp)
  805474:	081555c0 	call	81555c <alt_up_pixel_buffer_dma_draw_hline>
  805478:	00001806 	br	8054dc <drawLine+0xb4>
	}
	else if (x0 == x1)
  80547c:	e0fffc17 	ldw	r3,-16(fp)
  805480:	e0bffe17 	ldw	r2,-8(fp)
  805484:	18800a1e 	bne	r3,r2,8054b0 <drawLine+0x88>
	{
		alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, y0, y1, color, 1);
  805488:	d1271917 	ldw	r4,-25500(gp)
  80548c:	e0800217 	ldw	r2,8(fp)
  805490:	d8800015 	stw	r2,0(sp)
  805494:	00800044 	movi	r2,1
  805498:	d8800115 	stw	r2,4(sp)
  80549c:	e17ffc17 	ldw	r5,-16(fp)
  8054a0:	e1bffd17 	ldw	r6,-12(fp)
  8054a4:	e1ffff17 	ldw	r7,-4(fp)
  8054a8:	081555c0 	call	81555c <alt_up_pixel_buffer_dma_draw_hline>
  8054ac:	00000b06 	br	8054dc <drawLine+0xb4>
	}
	else
	{
		alt_up_pixel_buffer_dma_draw_line(pixel_buffer, x0, y0, x1, y1, color, 1);
  8054b0:	d1271917 	ldw	r4,-25500(gp)
  8054b4:	e0bfff17 	ldw	r2,-4(fp)
  8054b8:	d8800015 	stw	r2,0(sp)
  8054bc:	e0800217 	ldw	r2,8(fp)
  8054c0:	d8800115 	stw	r2,4(sp)
  8054c4:	00800044 	movi	r2,1
  8054c8:	d8800215 	stw	r2,8(sp)
  8054cc:	e17ffc17 	ldw	r5,-16(fp)
  8054d0:	e1bffd17 	ldw	r6,-12(fp)
  8054d4:	e1fffe17 	ldw	r7,-8(fp)
  8054d8:	0815e100 	call	815e10 <alt_up_pixel_buffer_dma_draw_line>
	}
}
  8054dc:	e037883a 	mov	sp,fp
  8054e0:	dfc00117 	ldw	ra,4(sp)
  8054e4:	df000017 	ldw	fp,0(sp)
  8054e8:	dec00204 	addi	sp,sp,8
  8054ec:	f800283a 	ret

008054f0 <printLine>:

void printLine(void)
{
  8054f0:	defffe04 	addi	sp,sp,-8
  8054f4:	dfc00115 	stw	ra,4(sp)
  8054f8:	df000015 	stw	fp,0(sp)
  8054fc:	d839883a 	mov	fp,sp
	alt_up_char_buffer_string(char_buffer, "LaserSharknado", 40, 30);
  805500:	d1271517 	ldw	r4,-25516(gp)
  805504:	014020b4 	movhi	r5,130
  805508:	29703a04 	addi	r5,r5,-16152
  80550c:	01800a04 	movi	r6,40
  805510:	01c00784 	movi	r7,30
  805514:	0814ad00 	call	814ad0 <alt_up_char_buffer_string>
}
  805518:	e037883a 	mov	sp,fp
  80551c:	dfc00117 	ldw	ra,4(sp)
  805520:	df000017 	ldw	fp,0(sp)
  805524:	dec00204 	addi	sp,sp,8
  805528:	f800283a 	ret

0080552c <drawBox>:

void drawBox(int x0, int y0, int x1, int y1, int color)
{
  80552c:	defff704 	addi	sp,sp,-36
  805530:	dfc00815 	stw	ra,32(sp)
  805534:	df000715 	stw	fp,28(sp)
  805538:	df000704 	addi	fp,sp,28
  80553c:	e13ffc15 	stw	r4,-16(fp)
  805540:	e17ffd15 	stw	r5,-12(fp)
  805544:	e1bffe15 	stw	r6,-8(fp)
  805548:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer, x0, y0, x1, y1, color, 1);
  80554c:	d1271917 	ldw	r4,-25500(gp)
  805550:	e0bfff17 	ldw	r2,-4(fp)
  805554:	d8800015 	stw	r2,0(sp)
  805558:	e0800217 	ldw	r2,8(fp)
  80555c:	d8800115 	stw	r2,4(sp)
  805560:	00800044 	movi	r2,1
  805564:	d8800215 	stw	r2,8(sp)
  805568:	e17ffc17 	ldw	r5,-16(fp)
  80556c:	e1bffd17 	ldw	r6,-12(fp)
  805570:	e1fffe17 	ldw	r7,-8(fp)
  805574:	08150680 	call	815068 <alt_up_pixel_buffer_dma_draw_box>
}
  805578:	e037883a 	mov	sp,fp
  80557c:	dfc00117 	ldw	ra,4(sp)
  805580:	df000017 	ldw	fp,0(sp)
  805584:	dec00204 	addi	sp,sp,8
  805588:	f800283a 	ret

0080558c <convert24BitRgbTo16>:

int convert24BitRgbTo16(unsigned int rgb24bit)
{
  80558c:	defff804 	addi	sp,sp,-32
  805590:	df000715 	stw	fp,28(sp)
  805594:	df000704 	addi	fp,sp,28
  805598:	e13fff15 	stw	r4,-4(fp)
	unsigned int R8bit = (rgb24bit >> 16) & 0xFF;
  80559c:	e0bfff17 	ldw	r2,-4(fp)
  8055a0:	1004d43a 	srli	r2,r2,16
  8055a4:	10803fcc 	andi	r2,r2,255
  8055a8:	e0bffe15 	stw	r2,-8(fp)
	unsigned int G8bit = (rgb24bit >> 8)  & 0xFF;
  8055ac:	e0bfff17 	ldw	r2,-4(fp)
  8055b0:	1004d23a 	srli	r2,r2,8
  8055b4:	10803fcc 	andi	r2,r2,255
  8055b8:	e0bffd15 	stw	r2,-12(fp)
	unsigned int B8bit = (rgb24bit)	      & 0xFF;
  8055bc:	e0bfff17 	ldw	r2,-4(fp)
  8055c0:	10803fcc 	andi	r2,r2,255
  8055c4:	e0bffc15 	stw	r2,-16(fp)
	unsigned int R5bit = R8bit >> 3 & 0x1F;
  8055c8:	e0bffe17 	ldw	r2,-8(fp)
  8055cc:	1004d0fa 	srli	r2,r2,3
  8055d0:	108007cc 	andi	r2,r2,31
  8055d4:	e0bffb15 	stw	r2,-20(fp)
	unsigned int G6bit = G8bit >> 2 & 0x3F;
  8055d8:	e0bffd17 	ldw	r2,-12(fp)
  8055dc:	1004d0ba 	srli	r2,r2,2
  8055e0:	10800fcc 	andi	r2,r2,63
  8055e4:	e0bffa15 	stw	r2,-24(fp)
	unsigned int B5bit = B8bit >> 3 & 0x1F;
  8055e8:	e0bffc17 	ldw	r2,-16(fp)
  8055ec:	1004d0fa 	srli	r2,r2,3
  8055f0:	108007cc 	andi	r2,r2,31
  8055f4:	e0bff915 	stw	r2,-28(fp)
	return (R5bit << 11 | G6bit << 5 | B5bit);
  8055f8:	e0bffb17 	ldw	r2,-20(fp)
  8055fc:	100692fa 	slli	r3,r2,11
  805600:	e0bffa17 	ldw	r2,-24(fp)
  805604:	1004917a 	slli	r2,r2,5
  805608:	1886b03a 	or	r3,r3,r2
  80560c:	e0bff917 	ldw	r2,-28(fp)
  805610:	1884b03a 	or	r2,r3,r2
}
  805614:	e037883a 	mov	sp,fp
  805618:	df000017 	ldw	fp,0(sp)
  80561c:	dec00104 	addi	sp,sp,4
  805620:	f800283a 	ret

00805624 <pow>:
  805624:	deffee04 	addi	sp,sp,-72
  805628:	ddc01015 	stw	r23,64(sp)
  80562c:	05c020b4 	movhi	r23,130
  805630:	bdf83a04 	addi	r23,r23,-7960
  805634:	dd800f15 	stw	r22,60(sp)
  805638:	dd400e15 	stw	r21,56(sp)
  80563c:	dd000d15 	stw	r20,52(sp)
  805640:	dcc00c15 	stw	r19,48(sp)
  805644:	dc800b15 	stw	r18,44(sp)
  805648:	dc400a15 	stw	r17,40(sp)
  80564c:	dc000915 	stw	r16,36(sp)
  805650:	2029883a 	mov	r20,r4
  805654:	dfc01115 	stw	ra,68(sp)
  805658:	3025883a 	mov	r18,r6
  80565c:	282b883a 	mov	r21,r5
  805660:	3827883a 	mov	r19,r7
  805664:	0805aac0 	call	805aac <__ieee754_pow>
  805668:	b9000017 	ldw	r4,0(r23)
  80566c:	05bfffc4 	movi	r22,-1
  805670:	1021883a 	mov	r16,r2
  805674:	1823883a 	mov	r17,r3
  805678:	25800426 	beq	r4,r22,80568c <pow+0x68>
  80567c:	9009883a 	mov	r4,r18
  805680:	980b883a 	mov	r5,r19
  805684:	08070a80 	call	8070a8 <__isnand>
  805688:	10000d26 	beq	r2,zero,8056c0 <pow+0x9c>
  80568c:	8005883a 	mov	r2,r16
  805690:	8807883a 	mov	r3,r17
  805694:	dfc01117 	ldw	ra,68(sp)
  805698:	ddc01017 	ldw	r23,64(sp)
  80569c:	dd800f17 	ldw	r22,60(sp)
  8056a0:	dd400e17 	ldw	r21,56(sp)
  8056a4:	dd000d17 	ldw	r20,52(sp)
  8056a8:	dcc00c17 	ldw	r19,48(sp)
  8056ac:	dc800b17 	ldw	r18,44(sp)
  8056b0:	dc400a17 	ldw	r17,40(sp)
  8056b4:	dc000917 	ldw	r16,36(sp)
  8056b8:	dec01204 	addi	sp,sp,72
  8056bc:	f800283a 	ret
  8056c0:	a009883a 	mov	r4,r20
  8056c4:	a80b883a 	mov	r5,r21
  8056c8:	08070a80 	call	8070a8 <__isnand>
  8056cc:	1000151e 	bne	r2,zero,805724 <pow+0x100>
  8056d0:	000d883a 	mov	r6,zero
  8056d4:	000f883a 	mov	r7,zero
  8056d8:	a009883a 	mov	r4,r20
  8056dc:	a80b883a 	mov	r5,r21
  8056e0:	08082840 	call	808284 <__eqdf2>
  8056e4:	1000541e 	bne	r2,zero,805838 <pow+0x214>
  8056e8:	000d883a 	mov	r6,zero
  8056ec:	000f883a 	mov	r7,zero
  8056f0:	9009883a 	mov	r4,r18
  8056f4:	980b883a 	mov	r5,r19
  8056f8:	08082840 	call	808284 <__eqdf2>
  8056fc:	10002c1e 	bne	r2,zero,8057b0 <pow+0x18c>
  805700:	b8800017 	ldw	r2,0(r23)
  805704:	d8000615 	stw	zero,24(sp)
  805708:	d8000715 	stw	zero,28(sp)
  80570c:	10001226 	beq	r2,zero,805758 <pow+0x134>
  805710:	008ffc34 	movhi	r2,16368
  805714:	d8800715 	stw	r2,28(sp)
  805718:	dc000617 	ldw	r16,24(sp)
  80571c:	dc400717 	ldw	r17,28(sp)
  805720:	003fda06 	br	80568c <pow+0x68>
  805724:	000d883a 	mov	r6,zero
  805728:	000f883a 	mov	r7,zero
  80572c:	9009883a 	mov	r4,r18
  805730:	980b883a 	mov	r5,r19
  805734:	08082840 	call	808284 <__eqdf2>
  805738:	103fd41e 	bne	r2,zero,80568c <pow+0x68>
  80573c:	b8c00017 	ldw	r3,0(r23)
  805740:	010ffc34 	movhi	r4,16368
  805744:	d8000615 	stw	zero,24(sp)
  805748:	d9000715 	stw	r4,28(sp)
  80574c:	1d801526 	beq	r3,r22,8057a4 <pow+0x180>
  805750:	00800084 	movi	r2,2
  805754:	18801326 	beq	r3,r2,8057a4 <pow+0x180>
  805758:	008020b4 	movhi	r2,130
  80575c:	10b03e04 	addi	r2,r2,-16136
  805760:	00c00044 	movi	r3,1
  805764:	d809883a 	mov	r4,sp
  805768:	dcc00515 	stw	r19,20(sp)
  80576c:	dd400315 	stw	r21,12(sp)
  805770:	d8800115 	stw	r2,4(sp)
  805774:	d8c00015 	stw	r3,0(sp)
  805778:	dc800415 	stw	r18,16(sp)
  80577c:	dd000215 	stw	r20,8(sp)
  805780:	d8000815 	stw	zero,32(sp)
  805784:	08070d80 	call	8070d8 <matherr>
  805788:	10002726 	beq	r2,zero,805828 <pow+0x204>
  80578c:	d8800817 	ldw	r2,32(sp)
  805790:	103fe126 	beq	r2,zero,805718 <pow+0xf4>
  805794:	08090d40 	call	8090d4 <__errno>
  805798:	d8c00817 	ldw	r3,32(sp)
  80579c:	10c00015 	stw	r3,0(r2)
  8057a0:	003fdd06 	br	805718 <pow+0xf4>
  8057a4:	d9000715 	stw	r4,28(sp)
  8057a8:	d8000615 	stw	zero,24(sp)
  8057ac:	003fda06 	br	805718 <pow+0xf4>
  8057b0:	9009883a 	mov	r4,r18
  8057b4:	980b883a 	mov	r5,r19
  8057b8:	080708c0 	call	80708c <finite>
  8057bc:	103fb326 	beq	r2,zero,80568c <pow+0x68>
  8057c0:	000d883a 	mov	r6,zero
  8057c4:	000f883a 	mov	r7,zero
  8057c8:	9009883a 	mov	r4,r18
  8057cc:	980b883a 	mov	r5,r19
  8057d0:	080841c0 	call	80841c <__ltdf2>
  8057d4:	103fad0e 	bge	r2,zero,80568c <pow+0x68>
  8057d8:	b9000017 	ldw	r4,0(r23)
  8057dc:	00800044 	movi	r2,1
  8057e0:	00c020b4 	movhi	r3,130
  8057e4:	18f03e04 	addi	r3,r3,-16136
  8057e8:	d8800015 	stw	r2,0(sp)
  8057ec:	d8c00115 	stw	r3,4(sp)
  8057f0:	dd400315 	stw	r21,12(sp)
  8057f4:	dcc00515 	stw	r19,20(sp)
  8057f8:	d8000815 	stw	zero,32(sp)
  8057fc:	dd000215 	stw	r20,8(sp)
  805800:	dc800415 	stw	r18,16(sp)
  805804:	20005626 	beq	r4,zero,805960 <pow+0x33c>
  805808:	00bffc34 	movhi	r2,65520
  80580c:	d8800715 	stw	r2,28(sp)
  805810:	00800084 	movi	r2,2
  805814:	d8000615 	stw	zero,24(sp)
  805818:	20800326 	beq	r4,r2,805828 <pow+0x204>
  80581c:	d809883a 	mov	r4,sp
  805820:	08070d80 	call	8070d8 <matherr>
  805824:	103fd91e 	bne	r2,zero,80578c <pow+0x168>
  805828:	08090d40 	call	8090d4 <__errno>
  80582c:	00c00844 	movi	r3,33
  805830:	10c00015 	stw	r3,0(r2)
  805834:	003fd506 	br	80578c <pow+0x168>
  805838:	8009883a 	mov	r4,r16
  80583c:	880b883a 	mov	r5,r17
  805840:	080708c0 	call	80708c <finite>
  805844:	10002426 	beq	r2,zero,8058d8 <pow+0x2b4>
  805848:	000d883a 	mov	r6,zero
  80584c:	000f883a 	mov	r7,zero
  805850:	8009883a 	mov	r4,r16
  805854:	880b883a 	mov	r5,r17
  805858:	08082840 	call	808284 <__eqdf2>
  80585c:	103f8b1e 	bne	r2,zero,80568c <pow+0x68>
  805860:	a009883a 	mov	r4,r20
  805864:	a80b883a 	mov	r5,r21
  805868:	080708c0 	call	80708c <finite>
  80586c:	103f8726 	beq	r2,zero,80568c <pow+0x68>
  805870:	9009883a 	mov	r4,r18
  805874:	980b883a 	mov	r5,r19
  805878:	080708c0 	call	80708c <finite>
  80587c:	103f8326 	beq	r2,zero,80568c <pow+0x68>
  805880:	b9000017 	ldw	r4,0(r23)
  805884:	00800104 	movi	r2,4
  805888:	d8800015 	stw	r2,0(sp)
  80588c:	00c020b4 	movhi	r3,130
  805890:	18f03e04 	addi	r3,r3,-16136
  805894:	00800084 	movi	r2,2
  805898:	d8c00115 	stw	r3,4(sp)
  80589c:	dd400315 	stw	r21,12(sp)
  8058a0:	dcc00515 	stw	r19,20(sp)
  8058a4:	d8000815 	stw	zero,32(sp)
  8058a8:	dd000215 	stw	r20,8(sp)
  8058ac:	dc800415 	stw	r18,16(sp)
  8058b0:	d8000615 	stw	zero,24(sp)
  8058b4:	d8000715 	stw	zero,28(sp)
  8058b8:	20800326 	beq	r4,r2,8058c8 <pow+0x2a4>
  8058bc:	d809883a 	mov	r4,sp
  8058c0:	08070d80 	call	8070d8 <matherr>
  8058c4:	103fb11e 	bne	r2,zero,80578c <pow+0x168>
  8058c8:	08090d40 	call	8090d4 <__errno>
  8058cc:	00c00884 	movi	r3,34
  8058d0:	10c00015 	stw	r3,0(r2)
  8058d4:	003fad06 	br	80578c <pow+0x168>
  8058d8:	a009883a 	mov	r4,r20
  8058dc:	a80b883a 	mov	r5,r21
  8058e0:	080708c0 	call	80708c <finite>
  8058e4:	103fd826 	beq	r2,zero,805848 <pow+0x224>
  8058e8:	9009883a 	mov	r4,r18
  8058ec:	980b883a 	mov	r5,r19
  8058f0:	080708c0 	call	80708c <finite>
  8058f4:	103fd426 	beq	r2,zero,805848 <pow+0x224>
  8058f8:	880b883a 	mov	r5,r17
  8058fc:	8009883a 	mov	r4,r16
  805900:	08070a80 	call	8070a8 <__isnand>
  805904:	10001926 	beq	r2,zero,80596c <pow+0x348>
  805908:	bc000017 	ldw	r16,0(r23)
  80590c:	00800044 	movi	r2,1
  805910:	00c020b4 	movhi	r3,130
  805914:	18f03e04 	addi	r3,r3,-16136
  805918:	d8800015 	stw	r2,0(sp)
  80591c:	d8c00115 	stw	r3,4(sp)
  805920:	dd400315 	stw	r21,12(sp)
  805924:	dcc00515 	stw	r19,20(sp)
  805928:	d8000815 	stw	zero,32(sp)
  80592c:	dd000215 	stw	r20,8(sp)
  805930:	dc800415 	stw	r18,16(sp)
  805934:	80000a26 	beq	r16,zero,805960 <pow+0x33c>
  805938:	0009883a 	mov	r4,zero
  80593c:	000d883a 	mov	r6,zero
  805940:	000b883a 	mov	r5,zero
  805944:	000f883a 	mov	r7,zero
  805948:	080802c0 	call	80802c <__divdf3>
  80594c:	d8800615 	stw	r2,24(sp)
  805950:	00800084 	movi	r2,2
  805954:	d8c00715 	stw	r3,28(sp)
  805958:	80bfb01e 	bne	r16,r2,80581c <pow+0x1f8>
  80595c:	003fb206 	br	805828 <pow+0x204>
  805960:	d8000615 	stw	zero,24(sp)
  805964:	d8000715 	stw	zero,28(sp)
  805968:	003fac06 	br	80581c <pow+0x1f8>
  80596c:	b8800017 	ldw	r2,0(r23)
  805970:	00c000c4 	movi	r3,3
  805974:	010020b4 	movhi	r4,130
  805978:	21303e04 	addi	r4,r4,-16136
  80597c:	d8c00015 	stw	r3,0(sp)
  805980:	d9000115 	stw	r4,4(sp)
  805984:	d8000815 	stw	zero,32(sp)
  805988:	dd000215 	stw	r20,8(sp)
  80598c:	dd400315 	stw	r21,12(sp)
  805990:	dc800415 	stw	r18,16(sp)
  805994:	dcc00515 	stw	r19,20(sp)
  805998:	1000251e 	bne	r2,zero,805a30 <pow+0x40c>
  80599c:	05b80034 	movhi	r22,57344
  8059a0:	0091fc34 	movhi	r2,18416
  8059a4:	10bfffc4 	addi	r2,r2,-1
  8059a8:	000d883a 	mov	r6,zero
  8059ac:	000f883a 	mov	r7,zero
  8059b0:	a80b883a 	mov	r5,r21
  8059b4:	a009883a 	mov	r4,r20
  8059b8:	d8800715 	stw	r2,28(sp)
  8059bc:	dd800615 	stw	r22,24(sp)
  8059c0:	080841c0 	call	80841c <__ltdf2>
  8059c4:	103fbd0e 	bge	r2,zero,8058bc <pow+0x298>
  8059c8:	0005883a 	mov	r2,zero
  8059cc:	00cff834 	movhi	r3,16352
  8059d0:	180f883a 	mov	r7,r3
  8059d4:	100d883a 	mov	r6,r2
  8059d8:	980b883a 	mov	r5,r19
  8059dc:	9009883a 	mov	r4,r18
  8059e0:	0807c680 	call	807c68 <__muldf3>
  8059e4:	1009883a 	mov	r4,r2
  8059e8:	180b883a 	mov	r5,r3
  8059ec:	1021883a 	mov	r16,r2
  8059f0:	1823883a 	mov	r17,r3
  8059f4:	08070f00 	call	8070f0 <rint>
  8059f8:	180f883a 	mov	r7,r3
  8059fc:	8009883a 	mov	r4,r16
  805a00:	880b883a 	mov	r5,r17
  805a04:	100d883a 	mov	r6,r2
  805a08:	080830c0 	call	80830c <__nedf2>
  805a0c:	10000426 	beq	r2,zero,805a20 <pow+0x3fc>
  805a10:	00b1fc34 	movhi	r2,51184
  805a14:	10bfffc4 	addi	r2,r2,-1
  805a18:	dd800615 	stw	r22,24(sp)
  805a1c:	d8800715 	stw	r2,28(sp)
  805a20:	b8c00017 	ldw	r3,0(r23)
  805a24:	00800084 	movi	r2,2
  805a28:	18bfa41e 	bne	r3,r2,8058bc <pow+0x298>
  805a2c:	003fa606 	br	8058c8 <pow+0x2a4>
  805a30:	009ffc34 	movhi	r2,32752
  805a34:	000d883a 	mov	r6,zero
  805a38:	000f883a 	mov	r7,zero
  805a3c:	a80b883a 	mov	r5,r21
  805a40:	a009883a 	mov	r4,r20
  805a44:	d8800715 	stw	r2,28(sp)
  805a48:	d8000615 	stw	zero,24(sp)
  805a4c:	080841c0 	call	80841c <__ltdf2>
  805a50:	103ff30e 	bge	r2,zero,805a20 <pow+0x3fc>
  805a54:	0005883a 	mov	r2,zero
  805a58:	00cff834 	movhi	r3,16352
  805a5c:	180f883a 	mov	r7,r3
  805a60:	100d883a 	mov	r6,r2
  805a64:	980b883a 	mov	r5,r19
  805a68:	9009883a 	mov	r4,r18
  805a6c:	0807c680 	call	807c68 <__muldf3>
  805a70:	1009883a 	mov	r4,r2
  805a74:	180b883a 	mov	r5,r3
  805a78:	1021883a 	mov	r16,r2
  805a7c:	1823883a 	mov	r17,r3
  805a80:	08070f00 	call	8070f0 <rint>
  805a84:	180f883a 	mov	r7,r3
  805a88:	8009883a 	mov	r4,r16
  805a8c:	880b883a 	mov	r5,r17
  805a90:	100d883a 	mov	r6,r2
  805a94:	080830c0 	call	80830c <__nedf2>
  805a98:	103fe126 	beq	r2,zero,805a20 <pow+0x3fc>
  805a9c:	00bffc34 	movhi	r2,65520
  805aa0:	d8800715 	stw	r2,28(sp)
  805aa4:	d8000615 	stw	zero,24(sp)
  805aa8:	003fdd06 	br	805a20 <pow+0x3fc>

00805aac <__ieee754_pow>:
  805aac:	deffbb04 	addi	sp,sp,-276
  805ab0:	3005883a 	mov	r2,r6
  805ab4:	dd404015 	stw	r21,256(sp)
  805ab8:	dd003f15 	stw	r20,252(sp)
  805abc:	d9802815 	stw	r6,160(sp)
  805ac0:	2029883a 	mov	r20,r4
  805ac4:	282b883a 	mov	r21,r5
  805ac8:	3009883a 	mov	r4,r6
  805acc:	380b883a 	mov	r5,r7
  805ad0:	01a00034 	movhi	r6,32768
  805ad4:	31bfffc4 	addi	r6,r6,-1
  805ad8:	dc003b15 	stw	r16,236(sp)
  805adc:	29a0703a 	and	r16,r5,r6
  805ae0:	1404b03a 	or	r2,r2,r16
  805ae4:	dd804115 	stw	r22,260(sp)
  805ae8:	dc403c15 	stw	r17,240(sp)
  805aec:	d9c02915 	stw	r7,164(sp)
  805af0:	382d883a 	mov	r22,r7
  805af4:	dfc04415 	stw	ra,272(sp)
  805af8:	200f883a 	mov	r7,r4
  805afc:	df004315 	stw	fp,268(sp)
  805b00:	ddc04215 	stw	r23,264(sp)
  805b04:	dcc03e15 	stw	r19,248(sp)
  805b08:	dc803d15 	stw	r18,244(sp)
  805b0c:	a023883a 	mov	r17,r20
  805b10:	2809883a 	mov	r4,r5
  805b14:	10000826 	beq	r2,zero,805b38 <__ieee754_pow+0x8c>
  805b18:	a9a4703a 	and	r18,r21,r6
  805b1c:	009ffc34 	movhi	r2,32752
  805b20:	a827883a 	mov	r19,r21
  805b24:	1480180e 	bge	r2,r18,805b88 <__ieee754_pow+0xdc>
  805b28:	00b00434 	movhi	r2,49168
  805b2c:	9085883a 	add	r2,r18,r2
  805b30:	8884b03a 	or	r2,r17,r2
  805b34:	1000321e 	bne	r2,zero,805c00 <__ieee754_pow+0x154>
  805b38:	0009883a 	mov	r4,zero
  805b3c:	014ffc34 	movhi	r5,16368
  805b40:	d9002815 	stw	r4,160(sp)
  805b44:	d9402915 	stw	r5,164(sp)
  805b48:	d9002817 	ldw	r4,160(sp)
  805b4c:	d9402917 	ldw	r5,164(sp)
  805b50:	2005883a 	mov	r2,r4
  805b54:	2807883a 	mov	r3,r5
  805b58:	dfc04417 	ldw	ra,272(sp)
  805b5c:	df004317 	ldw	fp,268(sp)
  805b60:	ddc04217 	ldw	r23,264(sp)
  805b64:	dd804117 	ldw	r22,260(sp)
  805b68:	dd404017 	ldw	r21,256(sp)
  805b6c:	dd003f17 	ldw	r20,252(sp)
  805b70:	dcc03e17 	ldw	r19,248(sp)
  805b74:	dc803d17 	ldw	r18,244(sp)
  805b78:	dc403c17 	ldw	r17,240(sp)
  805b7c:	dc003b17 	ldw	r16,236(sp)
  805b80:	dec04504 	addi	sp,sp,276
  805b84:	f800283a 	ret
  805b88:	90802b26 	beq	r18,r2,805c38 <__ieee754_pow+0x18c>
  805b8c:	143fe616 	blt	r2,r16,805b28 <__ieee754_pow+0x7c>
  805b90:	80806126 	beq	r16,r2,805d18 <__ieee754_pow+0x26c>
  805b94:	982e403a 	cmpge	r23,r19,zero
  805b98:	b8004e26 	beq	r23,zero,805cd4 <__ieee754_pow+0x228>
  805b9c:	0039883a 	mov	fp,zero
  805ba0:	3800281e 	bne	r7,zero,805c44 <__ieee754_pow+0x198>
  805ba4:	009ffc34 	movhi	r2,32752
  805ba8:	80804f26 	beq	r16,r2,805ce8 <__ieee754_pow+0x23c>
  805bac:	008ffc34 	movhi	r2,16368
  805bb0:	80808226 	beq	r16,r2,805dbc <__ieee754_pow+0x310>
  805bb4:	00900034 	movhi	r2,16384
  805bb8:	20828426 	beq	r4,r2,8065cc <__ieee754_pow+0xb20>
  805bbc:	008ff834 	movhi	r2,16352
  805bc0:	2080201e 	bne	r4,r2,805c44 <__ieee754_pow+0x198>
  805bc4:	98001f16 	blt	r19,zero,805c44 <__ieee754_pow+0x198>
  805bc8:	a80b883a 	mov	r5,r21
  805bcc:	a009883a 	mov	r4,r20
  805bd0:	dfc04417 	ldw	ra,272(sp)
  805bd4:	df004317 	ldw	fp,268(sp)
  805bd8:	ddc04217 	ldw	r23,264(sp)
  805bdc:	dd804117 	ldw	r22,260(sp)
  805be0:	dd404017 	ldw	r21,256(sp)
  805be4:	dd003f17 	ldw	r20,252(sp)
  805be8:	dcc03e17 	ldw	r19,248(sp)
  805bec:	dc803d17 	ldw	r18,244(sp)
  805bf0:	dc403c17 	ldw	r17,240(sp)
  805bf4:	dc003b17 	ldw	r16,236(sp)
  805bf8:	dec04504 	addi	sp,sp,276
  805bfc:	0806dac1 	jmpi	806dac <__ieee754_sqrt>
  805c00:	010020b4 	movhi	r4,130
  805c04:	2130a904 	addi	r4,r4,-15708
  805c08:	dfc04417 	ldw	ra,272(sp)
  805c0c:	df004317 	ldw	fp,268(sp)
  805c10:	ddc04217 	ldw	r23,264(sp)
  805c14:	dd804117 	ldw	r22,260(sp)
  805c18:	dd404017 	ldw	r21,256(sp)
  805c1c:	dd003f17 	ldw	r20,252(sp)
  805c20:	dcc03e17 	ldw	r19,248(sp)
  805c24:	dc803d17 	ldw	r18,244(sp)
  805c28:	dc403c17 	ldw	r17,240(sp)
  805c2c:	dc003b17 	ldw	r16,236(sp)
  805c30:	dec04504 	addi	sp,sp,276
  805c34:	08070e01 	jmpi	8070e0 <nan>
  805c38:	a03fbb1e 	bne	r20,zero,805b28 <__ieee754_pow+0x7c>
  805c3c:	003fd306 	br	805b8c <__ieee754_pow+0xe0>
  805c40:	0039883a 	mov	fp,zero
  805c44:	a009883a 	mov	r4,r20
  805c48:	a80b883a 	mov	r5,r21
  805c4c:	08070740 	call	807074 <fabs>
  805c50:	1015883a 	mov	r10,r2
  805c54:	1817883a 	mov	r11,r3
  805c58:	88001226 	beq	r17,zero,805ca4 <__ieee754_pow+0x1f8>
  805c5c:	9804d7fa 	srli	r2,r19,31
  805c60:	10bfffc4 	addi	r2,r2,-1
  805c64:	1706b03a 	or	r3,r2,fp
  805c68:	d8802515 	stw	r2,148(sp)
  805c6c:	18002c1e 	bne	r3,zero,805d20 <__ieee754_pow+0x274>
  805c70:	a80f883a 	mov	r7,r21
  805c74:	a009883a 	mov	r4,r20
  805c78:	a80b883a 	mov	r5,r21
  805c7c:	a00d883a 	mov	r6,r20
  805c80:	0807b740 	call	807b74 <__subdf3>
  805c84:	1009883a 	mov	r4,r2
  805c88:	180b883a 	mov	r5,r3
  805c8c:	100d883a 	mov	r6,r2
  805c90:	180f883a 	mov	r7,r3
  805c94:	080802c0 	call	80802c <__divdf3>
  805c98:	d8802815 	stw	r2,160(sp)
  805c9c:	d8c02915 	stw	r3,164(sp)
  805ca0:	003fa906 	br	805b48 <__ieee754_pow+0x9c>
  805ca4:	009ffc34 	movhi	r2,32752
  805ca8:	90800326 	beq	r18,r2,805cb8 <__ieee754_pow+0x20c>
  805cac:	90000226 	beq	r18,zero,805cb8 <__ieee754_pow+0x20c>
  805cb0:	008ffc34 	movhi	r2,16368
  805cb4:	90bfe91e 	bne	r18,r2,805c5c <__ieee754_pow+0x1b0>
  805cb8:	b0026316 	blt	r22,zero,806648 <__ieee754_pow+0xb9c>
  805cbc:	5011883a 	mov	r8,r10
  805cc0:	5813883a 	mov	r9,r11
  805cc4:	b8023126 	beq	r23,zero,80658c <__ieee754_pow+0xae0>
  805cc8:	da002815 	stw	r8,160(sp)
  805ccc:	da402915 	stw	r9,164(sp)
  805cd0:	003f9d06 	br	805b48 <__ieee754_pow+0x9c>
  805cd4:	0090d034 	movhi	r2,17216
  805cd8:	10bfffc4 	addi	r2,r2,-1
  805cdc:	1400270e 	bge	r2,r16,805d7c <__ieee754_pow+0x2d0>
  805ce0:	07000084 	movi	fp,2
  805ce4:	003fae06 	br	805ba0 <__ieee754_pow+0xf4>
  805ce8:	00b00434 	movhi	r2,49168
  805cec:	9085883a 	add	r2,r18,r2
  805cf0:	8884b03a 	or	r2,r17,r2
  805cf4:	103f9026 	beq	r2,zero,805b38 <__ieee754_pow+0x8c>
  805cf8:	008ffc34 	movhi	r2,16368
  805cfc:	10bfffc4 	addi	r2,r2,-1
  805d00:	1482d00e 	bge	r2,r18,806844 <__ieee754_pow+0xd98>
  805d04:	b03f900e 	bge	r22,zero,805b48 <__ieee754_pow+0x9c>
  805d08:	0005883a 	mov	r2,zero
  805d0c:	d8802815 	stw	r2,160(sp)
  805d10:	d8802915 	stw	r2,164(sp)
  805d14:	003f8c06 	br	805b48 <__ieee754_pow+0x9c>
  805d18:	383f9e26 	beq	r7,zero,805b94 <__ieee754_pow+0xe8>
  805d1c:	003f8206 	br	805b28 <__ieee754_pow+0x7c>
  805d20:	00907834 	movhi	r2,16864
  805d24:	1400290e 	bge	r2,r16,805dcc <__ieee754_pow+0x320>
  805d28:	0090fc34 	movhi	r2,17392
  805d2c:	1402500e 	bge	r2,r16,806670 <__ieee754_pow+0xbc4>
  805d30:	008ffc34 	movhi	r2,16368
  805d34:	10bfffc4 	addi	r2,r2,-1
  805d38:	14800b0e 	bge	r2,r18,805d68 <__ieee754_pow+0x2bc>
  805d3c:	05800b0e 	bge	zero,r22,805d6c <__ieee754_pow+0x2c0>
  805d40:	00a20034 	movhi	r2,34816
  805d44:	109d6704 	addi	r2,r2,30108
  805d48:	00df8e34 	movhi	r3,32312
  805d4c:	18f90f04 	addi	r3,r3,-7108
  805d50:	100d883a 	mov	r6,r2
  805d54:	180f883a 	mov	r7,r3
  805d58:	1009883a 	mov	r4,r2
  805d5c:	180b883a 	mov	r5,r3
  805d60:	0807c680 	call	807c68 <__muldf3>
  805d64:	003fcc06 	br	805c98 <__ieee754_pow+0x1ec>
  805d68:	b03ff516 	blt	r22,zero,805d40 <__ieee754_pow+0x294>
  805d6c:	0007883a 	mov	r3,zero
  805d70:	d8c02815 	stw	r3,160(sp)
  805d74:	d8c02915 	stw	r3,164(sp)
  805d78:	003f7306 	br	805b48 <__ieee754_pow+0x9c>
  805d7c:	008ffc34 	movhi	r2,16368
  805d80:	10bfffc4 	addi	r2,r2,-1
  805d84:	143f850e 	bge	r2,r16,805b9c <__ieee754_pow+0xf0>
  805d88:	8005d53a 	srai	r2,r16,20
  805d8c:	01400504 	movi	r5,20
  805d90:	10ff0044 	addi	r3,r2,-1023
  805d94:	28c3e10e 	bge	r5,r3,806d1c <__ieee754_pow+0x1270>
  805d98:	00800d04 	movi	r2,52
  805d9c:	10c5c83a 	sub	r2,r2,r3
  805da0:	3886d83a 	srl	r3,r7,r2
  805da4:	1884983a 	sll	r2,r3,r2
  805da8:	38bf7c1e 	bne	r7,r2,805b9c <__ieee754_pow+0xf0>
  805dac:	18c0004c 	andi	r3,r3,1
  805db0:	00800084 	movi	r2,2
  805db4:	10f9c83a 	sub	fp,r2,r3
  805db8:	003f7906 	br	805ba0 <__ieee754_pow+0xf4>
  805dbc:	b0038516 	blt	r22,zero,806bd4 <__ieee754_pow+0x1128>
  805dc0:	dd002815 	stw	r20,160(sp)
  805dc4:	dd402915 	stw	r21,164(sp)
  805dc8:	003f5f06 	br	805b48 <__ieee754_pow+0x9c>
  805dcc:	00800434 	movhi	r2,16
  805dd0:	10bfffc4 	addi	r2,r2,-1
  805dd4:	1482900e 	bge	r2,r18,806818 <__ieee754_pow+0xd6c>
  805dd8:	000b883a 	mov	r5,zero
  805ddc:	9005d53a 	srai	r2,r18,20
  805de0:	00c00434 	movhi	r3,16
  805de4:	18ffffc4 	addi	r3,r3,-1
  805de8:	90c8703a 	and	r4,r18,r3
  805dec:	2887883a 	add	r3,r5,r2
  805df0:	18bf0044 	addi	r2,r3,-1023
  805df4:	d8800015 	stw	r2,0(sp)
  805df8:	00800134 	movhi	r2,4
  805dfc:	10a62384 	addi	r2,r2,-26482
  805e00:	250ffc34 	orhi	r20,r4,16368
  805e04:	1101ee0e 	bge	r2,r4,8065c0 <__ieee754_pow+0xb14>
  805e08:	00800334 	movhi	r2,12
  805e0c:	10ad9e44 	addi	r2,r2,-18823
  805e10:	1101e716 	blt	r2,r4,8065b0 <__ieee754_pow+0xb04>
  805e14:	01000044 	movi	r4,1
  805e18:	04000334 	movhi	r16,12
  805e1c:	200890fa 	slli	r4,r4,3
  805e20:	da800115 	stw	r10,4(sp)
  805e24:	dd000215 	stw	r20,8(sp)
  805e28:	d9002c15 	stw	r4,176(sp)
  805e2c:	d9402c17 	ldw	r5,176(sp)
  805e30:	010020b4 	movhi	r4,130
  805e34:	21303f04 	addi	r4,r4,-16132
  805e38:	a02bd07a 	srai	r21,r20,1
  805e3c:	2909883a 	add	r4,r5,r4
  805e40:	25800017 	ldw	r22,0(r4)
  805e44:	25c00117 	ldw	r23,4(r4)
  805e48:	a00b883a 	mov	r5,r20
  805e4c:	5009883a 	mov	r4,r10
  805e50:	b00d883a 	mov	r6,r22
  805e54:	b80f883a 	mov	r7,r23
  805e58:	0807b740 	call	807b74 <__subdf3>
  805e5c:	d9000117 	ldw	r4,4(sp)
  805e60:	a00b883a 	mov	r5,r20
  805e64:	b00d883a 	mov	r6,r22
  805e68:	b80f883a 	mov	r7,r23
  805e6c:	1025883a 	mov	r18,r2
  805e70:	1827883a 	mov	r19,r3
  805e74:	0807bf40 	call	807bf4 <__adddf3>
  805e78:	0011883a 	mov	r8,zero
  805e7c:	024ffc34 	movhi	r9,16368
  805e80:	480b883a 	mov	r5,r9
  805e84:	4009883a 	mov	r4,r8
  805e88:	180f883a 	mov	r7,r3
  805e8c:	100d883a 	mov	r6,r2
  805e90:	080802c0 	call	80802c <__divdf3>
  805e94:	d8c02e15 	stw	r3,184(sp)
  805e98:	d8800f15 	stw	r2,60(sp)
  805e9c:	d8802d15 	stw	r2,180(sp)
  805ea0:	d8802e17 	ldw	r2,184(sp)
  805ea4:	d9800f17 	ldw	r6,60(sp)
  805ea8:	9009883a 	mov	r4,r18
  805eac:	980b883a 	mov	r5,r19
  805eb0:	100f883a 	mov	r7,r2
  805eb4:	dc800b15 	stw	r18,44(sp)
  805eb8:	dcc00c15 	stw	r19,48(sp)
  805ebc:	d8801015 	stw	r2,64(sp)
  805ec0:	0807c680 	call	807c68 <__muldf3>
  805ec4:	d8c03015 	stw	r3,192(sp)
  805ec8:	d9003017 	ldw	r4,192(sp)
  805ecc:	d8802f15 	stw	r2,188(sp)
  805ed0:	d8800315 	stw	r2,12(sp)
  805ed4:	ad480034 	orhi	r21,r21,8192
  805ed8:	0005883a 	mov	r2,zero
  805edc:	ac2b883a 	add	r21,r21,r16
  805ee0:	000b883a 	mov	r5,zero
  805ee4:	1021883a 	mov	r16,r2
  805ee8:	2005883a 	mov	r2,r4
  805eec:	800d883a 	mov	r6,r16
  805ef0:	a80f883a 	mov	r7,r21
  805ef4:	d9000415 	stw	r4,16(sp)
  805ef8:	d9002715 	stw	r4,156(sp)
  805efc:	d9402615 	stw	r5,152(sp)
  805f00:	d9401615 	stw	r5,88(sp)
  805f04:	d9001715 	stw	r4,92(sp)
  805f08:	100b883a 	mov	r5,r2
  805f0c:	0009883a 	mov	r4,zero
  805f10:	0807c680 	call	807c68 <__muldf3>
  805f14:	d9000b17 	ldw	r4,44(sp)
  805f18:	980b883a 	mov	r5,r19
  805f1c:	180f883a 	mov	r7,r3
  805f20:	100d883a 	mov	r6,r2
  805f24:	0807b740 	call	807b74 <__subdf3>
  805f28:	8009883a 	mov	r4,r16
  805f2c:	a80b883a 	mov	r5,r21
  805f30:	b80f883a 	mov	r7,r23
  805f34:	b00d883a 	mov	r6,r22
  805f38:	1021883a 	mov	r16,r2
  805f3c:	1823883a 	mov	r17,r3
  805f40:	0807b740 	call	807b74 <__subdf3>
  805f44:	d9000117 	ldw	r4,4(sp)
  805f48:	a00b883a 	mov	r5,r20
  805f4c:	180f883a 	mov	r7,r3
  805f50:	100d883a 	mov	r6,r2
  805f54:	0807b740 	call	807b74 <__subdf3>
  805f58:	d9001617 	ldw	r4,88(sp)
  805f5c:	d9402717 	ldw	r5,156(sp)
  805f60:	180f883a 	mov	r7,r3
  805f64:	100d883a 	mov	r6,r2
  805f68:	0807c680 	call	807c68 <__muldf3>
  805f6c:	180f883a 	mov	r7,r3
  805f70:	880b883a 	mov	r5,r17
  805f74:	8009883a 	mov	r4,r16
  805f78:	100d883a 	mov	r6,r2
  805f7c:	0807b740 	call	807b74 <__subdf3>
  805f80:	d9000f17 	ldw	r4,60(sp)
  805f84:	d9402e17 	ldw	r5,184(sp)
  805f88:	180f883a 	mov	r7,r3
  805f8c:	100d883a 	mov	r6,r2
  805f90:	0807c680 	call	807c68 <__muldf3>
  805f94:	d9000317 	ldw	r4,12(sp)
  805f98:	d9403017 	ldw	r5,192(sp)
  805f9c:	d8803115 	stw	r2,196(sp)
  805fa0:	200d883a 	mov	r6,r4
  805fa4:	280f883a 	mov	r7,r5
  805fa8:	d8c03215 	stw	r3,200(sp)
  805fac:	0807c680 	call	807c68 <__muldf3>
  805fb0:	1009883a 	mov	r4,r2
  805fb4:	180b883a 	mov	r5,r3
  805fb8:	100d883a 	mov	r6,r2
  805fbc:	180f883a 	mov	r7,r3
  805fc0:	1021883a 	mov	r16,r2
  805fc4:	1823883a 	mov	r17,r3
  805fc8:	0807c680 	call	807c68 <__muldf3>
  805fcc:	02129174 	movhi	r8,19013
  805fd0:	4213bbc4 	addi	r8,r8,20207
  805fd4:	024ff2b4 	movhi	r9,16330
  805fd8:	4a5f8a04 	addi	r9,r9,32296
  805fdc:	480f883a 	mov	r7,r9
  805fe0:	8009883a 	mov	r4,r16
  805fe4:	880b883a 	mov	r5,r17
  805fe8:	400d883a 	mov	r6,r8
  805fec:	1029883a 	mov	r20,r2
  805ff0:	182b883a 	mov	r21,r3
  805ff4:	0807c680 	call	807c68 <__muldf3>
  805ff8:	0224f2b4 	movhi	r8,37834
  805ffc:	4236d944 	addi	r8,r8,-9371
  806000:	024ff3b4 	movhi	r9,16334
  806004:	4a619284 	addi	r9,r9,-31158
  806008:	480f883a 	mov	r7,r9
  80600c:	400d883a 	mov	r6,r8
  806010:	180b883a 	mov	r5,r3
  806014:	1009883a 	mov	r4,r2
  806018:	0807bf40 	call	807bf4 <__adddf3>
  80601c:	180f883a 	mov	r7,r3
  806020:	8009883a 	mov	r4,r16
  806024:	880b883a 	mov	r5,r17
  806028:	100d883a 	mov	r6,r2
  80602c:	0807c680 	call	807c68 <__muldf3>
  806030:	022a4774 	movhi	r8,43293
  806034:	42104044 	addi	r8,r8,16641
  806038:	024ff474 	movhi	r9,16337
  80603c:	4a5d1804 	addi	r9,r9,29792
  806040:	480f883a 	mov	r7,r9
  806044:	400d883a 	mov	r6,r8
  806048:	180b883a 	mov	r5,r3
  80604c:	1009883a 	mov	r4,r2
  806050:	0807bf40 	call	807bf4 <__adddf3>
  806054:	180f883a 	mov	r7,r3
  806058:	8009883a 	mov	r4,r16
  80605c:	880b883a 	mov	r5,r17
  806060:	100d883a 	mov	r6,r2
  806064:	0807c680 	call	807c68 <__muldf3>
  806068:	021463f4 	movhi	r8,20879
  80606c:	42099344 	addi	r8,r8,9805
  806070:	024ff574 	movhi	r9,16341
  806074:	4a555544 	addi	r9,r9,21845
  806078:	480f883a 	mov	r7,r9
  80607c:	400d883a 	mov	r6,r8
  806080:	180b883a 	mov	r5,r3
  806084:	1009883a 	mov	r4,r2
  806088:	0807bf40 	call	807bf4 <__adddf3>
  80608c:	180f883a 	mov	r7,r3
  806090:	8009883a 	mov	r4,r16
  806094:	880b883a 	mov	r5,r17
  806098:	100d883a 	mov	r6,r2
  80609c:	0807c680 	call	807c68 <__muldf3>
  8060a0:	0236dc34 	movhi	r8,56176
  8060a4:	422affc4 	addi	r8,r8,-21505
  8060a8:	024ff6f4 	movhi	r9,16347
  8060ac:	4a5b6d84 	addi	r9,r9,28086
  8060b0:	480f883a 	mov	r7,r9
  8060b4:	400d883a 	mov	r6,r8
  8060b8:	180b883a 	mov	r5,r3
  8060bc:	1009883a 	mov	r4,r2
  8060c0:	0807bf40 	call	807bf4 <__adddf3>
  8060c4:	180f883a 	mov	r7,r3
  8060c8:	8009883a 	mov	r4,r16
  8060cc:	880b883a 	mov	r5,r17
  8060d0:	100d883a 	mov	r6,r2
  8060d4:	0807c680 	call	807c68 <__muldf3>
  8060d8:	020cccf4 	movhi	r8,13107
  8060dc:	420cc0c4 	addi	r8,r8,13059
  8060e0:	024ff8f4 	movhi	r9,16355
  8060e4:	4a4cccc4 	addi	r9,r9,13107
  8060e8:	480f883a 	mov	r7,r9
  8060ec:	400d883a 	mov	r6,r8
  8060f0:	180b883a 	mov	r5,r3
  8060f4:	1009883a 	mov	r4,r2
  8060f8:	0807bf40 	call	807bf4 <__adddf3>
  8060fc:	180f883a 	mov	r7,r3
  806100:	a80b883a 	mov	r5,r21
  806104:	a009883a 	mov	r4,r20
  806108:	100d883a 	mov	r6,r2
  80610c:	0807c680 	call	807c68 <__muldf3>
  806110:	d9000317 	ldw	r4,12(sp)
  806114:	d9403017 	ldw	r5,192(sp)
  806118:	d9801617 	ldw	r6,88(sp)
  80611c:	d9c02717 	ldw	r7,156(sp)
  806120:	1021883a 	mov	r16,r2
  806124:	1823883a 	mov	r17,r3
  806128:	0807bf40 	call	807bf4 <__adddf3>
  80612c:	d9003117 	ldw	r4,196(sp)
  806130:	d9403217 	ldw	r5,200(sp)
  806134:	180f883a 	mov	r7,r3
  806138:	100d883a 	mov	r6,r2
  80613c:	d9001415 	stw	r4,80(sp)
  806140:	d9401515 	stw	r5,84(sp)
  806144:	0807c680 	call	807c68 <__muldf3>
  806148:	180f883a 	mov	r7,r3
  80614c:	8009883a 	mov	r4,r16
  806150:	880b883a 	mov	r5,r17
  806154:	100d883a 	mov	r6,r2
  806158:	0807bf40 	call	807bf4 <__adddf3>
  80615c:	d9001617 	ldw	r4,88(sp)
  806160:	d9402717 	ldw	r5,156(sp)
  806164:	d8803315 	stw	r2,204(sp)
  806168:	200d883a 	mov	r6,r4
  80616c:	280f883a 	mov	r7,r5
  806170:	d8c03415 	stw	r3,208(sp)
  806174:	0807c680 	call	807c68 <__muldf3>
  806178:	182f883a 	mov	r23,r3
  80617c:	05500234 	movhi	r21,16392
  806180:	0029883a 	mov	r20,zero
  806184:	b80b883a 	mov	r5,r23
  806188:	a00d883a 	mov	r6,r20
  80618c:	a80f883a 	mov	r7,r21
  806190:	1009883a 	mov	r4,r2
  806194:	d8800715 	stw	r2,28(sp)
  806198:	d8c00815 	stw	r3,32(sp)
  80619c:	0807bf40 	call	807bf4 <__adddf3>
  8061a0:	d9003317 	ldw	r4,204(sp)
  8061a4:	d9403417 	ldw	r5,208(sp)
  8061a8:	180f883a 	mov	r7,r3
  8061ac:	100d883a 	mov	r6,r2
  8061b0:	d9000515 	stw	r4,20(sp)
  8061b4:	d9400615 	stw	r5,24(sp)
  8061b8:	0807bf40 	call	807bf4 <__adddf3>
  8061bc:	d9001617 	ldw	r4,88(sp)
  8061c0:	d9402717 	ldw	r5,156(sp)
  8061c4:	0025883a 	mov	r18,zero
  8061c8:	900d883a 	mov	r6,r18
  8061cc:	180f883a 	mov	r7,r3
  8061d0:	1823883a 	mov	r17,r3
  8061d4:	0807c680 	call	807c68 <__muldf3>
  8061d8:	d9001417 	ldw	r4,80(sp)
  8061dc:	d9403217 	ldw	r5,200(sp)
  8061e0:	880f883a 	mov	r7,r17
  8061e4:	900d883a 	mov	r6,r18
  8061e8:	d8803515 	stw	r2,212(sp)
  8061ec:	d8c03615 	stw	r3,216(sp)
  8061f0:	0807c680 	call	807c68 <__muldf3>
  8061f4:	a80f883a 	mov	r7,r21
  8061f8:	880b883a 	mov	r5,r17
  8061fc:	000d883a 	mov	r6,zero
  806200:	9009883a 	mov	r4,r18
  806204:	1021883a 	mov	r16,r2
  806208:	1823883a 	mov	r17,r3
  80620c:	0807b740 	call	807b74 <__subdf3>
  806210:	d9800717 	ldw	r6,28(sp)
  806214:	b80f883a 	mov	r7,r23
  806218:	180b883a 	mov	r5,r3
  80621c:	1009883a 	mov	r4,r2
  806220:	0807b740 	call	807b74 <__subdf3>
  806224:	d9000517 	ldw	r4,20(sp)
  806228:	d9403417 	ldw	r5,208(sp)
  80622c:	180f883a 	mov	r7,r3
  806230:	100d883a 	mov	r6,r2
  806234:	0807b740 	call	807b74 <__subdf3>
  806238:	d9000317 	ldw	r4,12(sp)
  80623c:	d9403017 	ldw	r5,192(sp)
  806240:	180f883a 	mov	r7,r3
  806244:	100d883a 	mov	r6,r2
  806248:	0807c680 	call	807c68 <__muldf3>
  80624c:	180f883a 	mov	r7,r3
  806250:	880b883a 	mov	r5,r17
  806254:	8009883a 	mov	r4,r16
  806258:	100d883a 	mov	r6,r2
  80625c:	0807bf40 	call	807bf4 <__adddf3>
  806260:	102d883a 	mov	r22,r2
  806264:	d9003617 	ldw	r4,216(sp)
  806268:	d8803517 	ldw	r2,212(sp)
  80626c:	d9403617 	ldw	r5,216(sp)
  806270:	182f883a 	mov	r23,r3
  806274:	b00d883a 	mov	r6,r22
  806278:	b80f883a 	mov	r7,r23
  80627c:	d9000a15 	stw	r4,40(sp)
  806280:	1009883a 	mov	r4,r2
  806284:	054ffbf4 	movhi	r21,16367
  806288:	ad71c244 	addi	r21,r21,-14583
  80628c:	dd800d15 	stw	r22,52(sp)
  806290:	ddc00e15 	stw	r23,56(sp)
  806294:	05380034 	movhi	r20,57344
  806298:	d8800915 	stw	r2,36(sp)
  80629c:	0807bf40 	call	807bf4 <__adddf3>
  8062a0:	180b883a 	mov	r5,r3
  8062a4:	a00d883a 	mov	r6,r20
  8062a8:	a80f883a 	mov	r7,r21
  8062ac:	9009883a 	mov	r4,r18
  8062b0:	1823883a 	mov	r17,r3
  8062b4:	0807c680 	call	807c68 <__muldf3>
  8062b8:	020516f4 	movhi	r8,5211
  8062bc:	42007d44 	addi	r8,r8,501
  8062c0:	026f8fb4 	movhi	r9,48702
  8062c4:	4a4bf804 	addi	r9,r9,12256
  8062c8:	480f883a 	mov	r7,r9
  8062cc:	400d883a 	mov	r6,r8
  8062d0:	880b883a 	mov	r5,r17
  8062d4:	9009883a 	mov	r4,r18
  8062d8:	d8803715 	stw	r2,220(sp)
  8062dc:	d8c03815 	stw	r3,224(sp)
  8062e0:	0807c680 	call	807c68 <__muldf3>
  8062e4:	d9800917 	ldw	r6,36(sp)
  8062e8:	d9c03617 	ldw	r7,216(sp)
  8062ec:	880b883a 	mov	r5,r17
  8062f0:	9009883a 	mov	r4,r18
  8062f4:	1021883a 	mov	r16,r2
  8062f8:	1823883a 	mov	r17,r3
  8062fc:	0807b740 	call	807b74 <__subdf3>
  806300:	d9000d17 	ldw	r4,52(sp)
  806304:	b80b883a 	mov	r5,r23
  806308:	180f883a 	mov	r7,r3
  80630c:	100d883a 	mov	r6,r2
  806310:	0807b740 	call	807b74 <__subdf3>
  806314:	180b883a 	mov	r5,r3
  806318:	a80f883a 	mov	r7,r21
  80631c:	01b70eb4 	movhi	r6,56378
  806320:	3180ff44 	addi	r6,r6,1021
  806324:	1009883a 	mov	r4,r2
  806328:	0807c680 	call	807c68 <__muldf3>
  80632c:	180f883a 	mov	r7,r3
  806330:	880b883a 	mov	r5,r17
  806334:	8009883a 	mov	r4,r16
  806338:	100d883a 	mov	r6,r2
  80633c:	0807bf40 	call	807bf4 <__adddf3>
  806340:	d9402c17 	ldw	r5,176(sp)
  806344:	010020b4 	movhi	r4,130
  806348:	21304304 	addi	r4,r4,-16116
  80634c:	2909883a 	add	r4,r5,r4
  806350:	22400117 	ldw	r9,4(r4)
  806354:	22000017 	ldw	r8,0(r4)
  806358:	180b883a 	mov	r5,r3
  80635c:	480f883a 	mov	r7,r9
  806360:	400d883a 	mov	r6,r8
  806364:	1009883a 	mov	r4,r2
  806368:	0807bf40 	call	807bf4 <__adddf3>
  80636c:	d9000017 	ldw	r4,0(sp)
  806370:	182f883a 	mov	r23,r3
  806374:	102d883a 	mov	r22,r2
  806378:	080852c0 	call	80852c <__floatsidf>
  80637c:	d9402c17 	ldw	r5,176(sp)
  806380:	010020b4 	movhi	r4,130
  806384:	21304704 	addi	r4,r4,-16100
  806388:	b00d883a 	mov	r6,r22
  80638c:	2911883a 	add	r8,r5,r4
  806390:	d9003717 	ldw	r4,220(sp)
  806394:	d9403817 	ldw	r5,224(sp)
  806398:	45000017 	ldw	r20,0(r8)
  80639c:	d9002315 	stw	r4,140(sp)
  8063a0:	d9003817 	ldw	r4,224(sp)
  8063a4:	45400117 	ldw	r21,4(r8)
  8063a8:	b80f883a 	mov	r7,r23
  8063ac:	d9002415 	stw	r4,144(sp)
  8063b0:	d9002317 	ldw	r4,140(sp)
  8063b4:	1021883a 	mov	r16,r2
  8063b8:	1823883a 	mov	r17,r3
  8063bc:	dd802115 	stw	r22,132(sp)
  8063c0:	ddc02215 	stw	r23,136(sp)
  8063c4:	0807bf40 	call	807bf4 <__adddf3>
  8063c8:	180b883a 	mov	r5,r3
  8063cc:	1009883a 	mov	r4,r2
  8063d0:	a00d883a 	mov	r6,r20
  8063d4:	a80f883a 	mov	r7,r21
  8063d8:	0807bf40 	call	807bf4 <__adddf3>
  8063dc:	180f883a 	mov	r7,r3
  8063e0:	8009883a 	mov	r4,r16
  8063e4:	880b883a 	mov	r5,r17
  8063e8:	100d883a 	mov	r6,r2
  8063ec:	0807bf40 	call	807bf4 <__adddf3>
  8063f0:	180b883a 	mov	r5,r3
  8063f4:	0009883a 	mov	r4,zero
  8063f8:	800d883a 	mov	r6,r16
  8063fc:	880f883a 	mov	r7,r17
  806400:	d9001b15 	stw	r4,108(sp)
  806404:	d8c01c15 	stw	r3,112(sp)
  806408:	0807b740 	call	807b74 <__subdf3>
  80640c:	180b883a 	mov	r5,r3
  806410:	a80f883a 	mov	r7,r21
  806414:	1009883a 	mov	r4,r2
  806418:	a00d883a 	mov	r6,r20
  80641c:	0807b740 	call	807b74 <__subdf3>
  806420:	d9802317 	ldw	r6,140(sp)
  806424:	d9c03817 	ldw	r7,224(sp)
  806428:	180b883a 	mov	r5,r3
  80642c:	1009883a 	mov	r4,r2
  806430:	0807b740 	call	807b74 <__subdf3>
  806434:	d9002117 	ldw	r4,132(sp)
  806438:	1011883a 	mov	r8,r2
  80643c:	1813883a 	mov	r9,r3
  806440:	b80b883a 	mov	r5,r23
  806444:	480f883a 	mov	r7,r9
  806448:	400d883a 	mov	r6,r8
  80644c:	0807b740 	call	807b74 <__subdf3>
  806450:	1823883a 	mov	r17,r3
  806454:	d8c02517 	ldw	r3,148(sp)
  806458:	1021883a 	mov	r16,r2
  80645c:	e0bfffc4 	addi	r2,fp,-1
  806460:	1884b03a 	or	r2,r3,r2
  806464:	1000731e 	bne	r2,zero,806634 <__ieee754_pow+0xb88>
  806468:	0009883a 	mov	r4,zero
  80646c:	016ffc34 	movhi	r5,49136
  806470:	d9001915 	stw	r4,100(sp)
  806474:	d9401a15 	stw	r5,104(sp)
  806478:	d9402917 	ldw	r5,164(sp)
  80647c:	d9002817 	ldw	r4,160(sp)
  806480:	0029883a 	mov	r20,zero
  806484:	a00d883a 	mov	r6,r20
  806488:	280f883a 	mov	r7,r5
  80648c:	2827883a 	mov	r19,r5
  806490:	0807b740 	call	807b74 <__subdf3>
  806494:	d9001b17 	ldw	r4,108(sp)
  806498:	d9401c17 	ldw	r5,112(sp)
  80649c:	180f883a 	mov	r7,r3
  8064a0:	100d883a 	mov	r6,r2
  8064a4:	0807c680 	call	807c68 <__muldf3>
  8064a8:	d9c02917 	ldw	r7,164(sp)
  8064ac:	d9802817 	ldw	r6,160(sp)
  8064b0:	880b883a 	mov	r5,r17
  8064b4:	8009883a 	mov	r4,r16
  8064b8:	1823883a 	mov	r17,r3
  8064bc:	1021883a 	mov	r16,r2
  8064c0:	0807c680 	call	807c68 <__muldf3>
  8064c4:	180f883a 	mov	r7,r3
  8064c8:	880b883a 	mov	r5,r17
  8064cc:	8009883a 	mov	r4,r16
  8064d0:	100d883a 	mov	r6,r2
  8064d4:	0807bf40 	call	807bf4 <__adddf3>
  8064d8:	d9401c17 	ldw	r5,112(sp)
  8064dc:	d9001b17 	ldw	r4,108(sp)
  8064e0:	a00d883a 	mov	r6,r20
  8064e4:	980f883a 	mov	r7,r19
  8064e8:	1029883a 	mov	r20,r2
  8064ec:	182b883a 	mov	r21,r3
  8064f0:	0807c680 	call	807c68 <__muldf3>
  8064f4:	1025883a 	mov	r18,r2
  8064f8:	1827883a 	mov	r19,r3
  8064fc:	a009883a 	mov	r4,r20
  806500:	a80b883a 	mov	r5,r21
  806504:	900d883a 	mov	r6,r18
  806508:	980f883a 	mov	r7,r19
  80650c:	dd001d15 	stw	r20,116(sp)
  806510:	dc801f15 	stw	r18,124(sp)
  806514:	dd401e15 	stw	r21,120(sp)
  806518:	dcc02015 	stw	r19,128(sp)
  80651c:	0807bf40 	call	807bf4 <__adddf3>
  806520:	1823883a 	mov	r17,r3
  806524:	01102434 	movhi	r4,16528
  806528:	213fffc4 	addi	r4,r4,-1
  80652c:	1021883a 	mov	r16,r2
  806530:	182f883a 	mov	r23,r3
  806534:	dc401815 	stw	r17,96(sp)
  806538:	100b883a 	mov	r5,r2
  80653c:	20c02c0e 	bge	r4,r3,8065f0 <__ieee754_pow+0xb44>
  806540:	00afdc34 	movhi	r2,49008
  806544:	1885883a 	add	r2,r3,r2
  806548:	2884b03a 	or	r2,r5,r2
  80654c:	1001a626 	beq	r2,zero,806be8 <__ieee754_pow+0x113c>
  806550:	04220034 	movhi	r16,34816
  806554:	841d6704 	addi	r16,r16,30108
  806558:	045f8e34 	movhi	r17,32312
  80655c:	8c790f04 	addi	r17,r17,-7108
  806560:	d9401a17 	ldw	r5,104(sp)
  806564:	d9001917 	ldw	r4,100(sp)
  806568:	800d883a 	mov	r6,r16
  80656c:	880f883a 	mov	r7,r17
  806570:	0807c680 	call	807c68 <__muldf3>
  806574:	180b883a 	mov	r5,r3
  806578:	800d883a 	mov	r6,r16
  80657c:	880f883a 	mov	r7,r17
  806580:	1009883a 	mov	r4,r2
  806584:	0807c680 	call	807c68 <__muldf3>
  806588:	003dc306 	br	805c98 <__ieee754_pow+0x1ec>
  80658c:	00b00434 	movhi	r2,49168
  806590:	9085883a 	add	r2,r18,r2
  806594:	e084b03a 	or	r2,fp,r2
  806598:	1000af1e 	bne	r2,zero,806858 <__ieee754_pow+0xdac>
  80659c:	480f883a 	mov	r7,r9
  8065a0:	4009883a 	mov	r4,r8
  8065a4:	480b883a 	mov	r5,r9
  8065a8:	400d883a 	mov	r6,r8
  8065ac:	003db406 	br	805c80 <__ieee754_pow+0x1d4>
  8065b0:	00bffc34 	movhi	r2,65520
  8065b4:	18ff0084 	addi	r3,r3,-1022
  8065b8:	a0a9883a 	add	r20,r20,r2
  8065bc:	d8c00015 	stw	r3,0(sp)
  8065c0:	0009883a 	mov	r4,zero
  8065c4:	04000234 	movhi	r16,8
  8065c8:	003e1406 	br	805e1c <__ieee754_pow+0x370>
  8065cc:	a80f883a 	mov	r7,r21
  8065d0:	a009883a 	mov	r4,r20
  8065d4:	a80b883a 	mov	r5,r21
  8065d8:	a00d883a 	mov	r6,r20
  8065dc:	0807c680 	call	807c68 <__muldf3>
  8065e0:	180b883a 	mov	r5,r3
  8065e4:	d8802815 	stw	r2,160(sp)
  8065e8:	d9402915 	stw	r5,164(sp)
  8065ec:	003d5606 	br	805b48 <__ieee754_pow+0x9c>
  8065f0:	d9001817 	ldw	r4,96(sp)
  8065f4:	00a00034 	movhi	r2,32768
  8065f8:	10bfffc4 	addi	r2,r2,-1
  8065fc:	00d02474 	movhi	r3,16529
  806600:	18f2ffc4 	addi	r3,r3,-13313
  806604:	20b8703a 	and	fp,r4,r2
  806608:	1f009d0e 	bge	r3,fp,806880 <__ieee754_pow+0xdd4>
  80660c:	008fdbf4 	movhi	r2,16239
  806610:	108d0004 	addi	r2,r2,13312
  806614:	2085883a 	add	r2,r4,r2
  806618:	1144b03a 	or	r2,r2,r5
  80661c:	1001c626 	beq	r2,zero,806d38 <__ieee754_pow+0x128c>
  806620:	0430be74 	movhi	r16,49913
  806624:	843cd644 	addi	r16,r16,-3239
  806628:	04406974 	movhi	r17,421
  80662c:	8c5b87c4 	addi	r17,r17,28191
  806630:	003fcb06 	br	806560 <__ieee754_pow+0xab4>
  806634:	0005883a 	mov	r2,zero
  806638:	00cffc34 	movhi	r3,16368
  80663c:	d8801915 	stw	r2,100(sp)
  806640:	d8c01a15 	stw	r3,104(sp)
  806644:	003f8c06 	br	806478 <__ieee754_pow+0x9cc>
  806648:	0005883a 	mov	r2,zero
  80664c:	00cffc34 	movhi	r3,16368
  806650:	180b883a 	mov	r5,r3
  806654:	580f883a 	mov	r7,r11
  806658:	1009883a 	mov	r4,r2
  80665c:	500d883a 	mov	r6,r10
  806660:	080802c0 	call	80802c <__divdf3>
  806664:	1011883a 	mov	r8,r2
  806668:	1813883a 	mov	r9,r3
  80666c:	003d9506 	br	805cc4 <__ieee754_pow+0x218>
  806670:	008ffc34 	movhi	r2,16368
  806674:	10bfff84 	addi	r2,r2,-2
  806678:	14bdbb0e 	bge	r2,r18,805d68 <__ieee754_pow+0x2bc>
  80667c:	008ffc34 	movhi	r2,16368
  806680:	14bdae16 	blt	r2,r18,805d3c <__ieee754_pow+0x290>
  806684:	580b883a 	mov	r5,r11
  806688:	5009883a 	mov	r4,r10
  80668c:	000d883a 	mov	r6,zero
  806690:	100f883a 	mov	r7,r2
  806694:	0807b740 	call	807b74 <__subdf3>
  806698:	1021883a 	mov	r16,r2
  80669c:	1823883a 	mov	r17,r3
  8066a0:	00980034 	movhi	r2,24576
  8066a4:	00cffdf4 	movhi	r3,16375
  8066a8:	18c551c4 	addi	r3,r3,5447
  8066ac:	8009883a 	mov	r4,r16
  8066b0:	880b883a 	mov	r5,r17
  8066b4:	180f883a 	mov	r7,r3
  8066b8:	100d883a 	mov	r6,r2
  8066bc:	0807c680 	call	807c68 <__muldf3>
  8066c0:	023e17b4 	movhi	r8,63582
  8066c4:	4237d104 	addi	r8,r8,-8380
  8066c8:	024f9574 	movhi	r9,15957
  8066cc:	4a6b82c4 	addi	r9,r9,-20981
  8066d0:	480f883a 	mov	r7,r9
  8066d4:	400d883a 	mov	r6,r8
  8066d8:	8009883a 	mov	r4,r16
  8066dc:	880b883a 	mov	r5,r17
  8066e0:	102d883a 	mov	r22,r2
  8066e4:	182f883a 	mov	r23,r3
  8066e8:	0807c680 	call	807c68 <__muldf3>
  8066ec:	8009883a 	mov	r4,r16
  8066f0:	880b883a 	mov	r5,r17
  8066f4:	800d883a 	mov	r6,r16
  8066f8:	880f883a 	mov	r7,r17
  8066fc:	d8802a15 	stw	r2,168(sp)
  806700:	d8c02b15 	stw	r3,172(sp)
  806704:	0807c680 	call	807c68 <__muldf3>
  806708:	0011883a 	mov	r8,zero
  80670c:	026ff434 	movhi	r9,49104
  806710:	480f883a 	mov	r7,r9
  806714:	8009883a 	mov	r4,r16
  806718:	880b883a 	mov	r5,r17
  80671c:	400d883a 	mov	r6,r8
  806720:	1029883a 	mov	r20,r2
  806724:	182b883a 	mov	r21,r3
  806728:	0807c680 	call	807c68 <__muldf3>
  80672c:	02155574 	movhi	r8,21845
  806730:	42155544 	addi	r8,r8,21845
  806734:	024ff574 	movhi	r9,16341
  806738:	4a555544 	addi	r9,r9,21845
  80673c:	480f883a 	mov	r7,r9
  806740:	400d883a 	mov	r6,r8
  806744:	180b883a 	mov	r5,r3
  806748:	1009883a 	mov	r4,r2
  80674c:	0807bf40 	call	807bf4 <__adddf3>
  806750:	180f883a 	mov	r7,r3
  806754:	8009883a 	mov	r4,r16
  806758:	880b883a 	mov	r5,r17
  80675c:	100d883a 	mov	r6,r2
  806760:	0807c680 	call	807c68 <__muldf3>
  806764:	0011883a 	mov	r8,zero
  806768:	024ff834 	movhi	r9,16352
  80676c:	480b883a 	mov	r5,r9
  806770:	4009883a 	mov	r4,r8
  806774:	180f883a 	mov	r7,r3
  806778:	100d883a 	mov	r6,r2
  80677c:	0807b740 	call	807b74 <__subdf3>
  806780:	180f883a 	mov	r7,r3
  806784:	a80b883a 	mov	r5,r21
  806788:	a009883a 	mov	r4,r20
  80678c:	100d883a 	mov	r6,r2
  806790:	0807c680 	call	807c68 <__muldf3>
  806794:	02194b34 	movhi	r8,25900
  806798:	4220bf84 	addi	r8,r8,-32002
  80679c:	026ffdf4 	movhi	r9,49143
  8067a0:	4a4551c4 	addi	r9,r9,5447
  8067a4:	480f883a 	mov	r7,r9
  8067a8:	400d883a 	mov	r6,r8
  8067ac:	180b883a 	mov	r5,r3
  8067b0:	1009883a 	mov	r4,r2
  8067b4:	0807c680 	call	807c68 <__muldf3>
  8067b8:	d9402b17 	ldw	r5,172(sp)
  8067bc:	d9002a17 	ldw	r4,168(sp)
  8067c0:	180f883a 	mov	r7,r3
  8067c4:	100d883a 	mov	r6,r2
  8067c8:	0807bf40 	call	807bf4 <__adddf3>
  8067cc:	100d883a 	mov	r6,r2
  8067d0:	b009883a 	mov	r4,r22
  8067d4:	b80b883a 	mov	r5,r23
  8067d8:	180f883a 	mov	r7,r3
  8067dc:	1021883a 	mov	r16,r2
  8067e0:	1823883a 	mov	r17,r3
  8067e4:	0807bf40 	call	807bf4 <__adddf3>
  8067e8:	180b883a 	mov	r5,r3
  8067ec:	0009883a 	mov	r4,zero
  8067f0:	b00d883a 	mov	r6,r22
  8067f4:	b80f883a 	mov	r7,r23
  8067f8:	d9001b15 	stw	r4,108(sp)
  8067fc:	d8c01c15 	stw	r3,112(sp)
  806800:	0807b740 	call	807b74 <__subdf3>
  806804:	1011883a 	mov	r8,r2
  806808:	1813883a 	mov	r9,r3
  80680c:	8009883a 	mov	r4,r16
  806810:	880b883a 	mov	r5,r17
  806814:	003f0b06 	br	806444 <__ieee754_pow+0x998>
  806818:	0005883a 	mov	r2,zero
  80681c:	00d0d034 	movhi	r3,17216
  806820:	580b883a 	mov	r5,r11
  806824:	5009883a 	mov	r4,r10
  806828:	180f883a 	mov	r7,r3
  80682c:	100d883a 	mov	r6,r2
  806830:	0807c680 	call	807c68 <__muldf3>
  806834:	1015883a 	mov	r10,r2
  806838:	1825883a 	mov	r18,r3
  80683c:	017ff2c4 	movi	r5,-53
  806840:	003d6606 	br	805ddc <__ieee754_pow+0x330>
  806844:	b03d300e 	bge	r22,zero,805d08 <__ieee754_pow+0x25c>
  806848:	d9402917 	ldw	r5,164(sp)
  80684c:	28e0003c 	xorhi	r3,r5,32768
  806850:	d8c02915 	stw	r3,164(sp)
  806854:	003cbc06 	br	805b48 <__ieee754_pow+0x9c>
  806858:	00800044 	movi	r2,1
  80685c:	e0bd1a1e 	bne	fp,r2,805cc8 <__ieee754_pow+0x21c>
  806860:	48e0003c 	xorhi	r3,r9,32768
  806864:	da002815 	stw	r8,160(sp)
  806868:	d8c02915 	stw	r3,164(sp)
  80686c:	003cb606 	br	805b48 <__ieee754_pow+0x9c>
  806870:	d9001817 	ldw	r4,96(sp)
  806874:	00a00034 	movhi	r2,32768
  806878:	10bfffc4 	addi	r2,r2,-1
  80687c:	20b8703a 	and	fp,r4,r2
  806880:	008ff834 	movhi	r2,16352
  806884:	1700fc16 	blt	r2,fp,806c78 <__ieee754_pow+0x11cc>
  806888:	0039883a 	mov	fp,zero
  80688c:	d8001315 	stw	zero,76(sp)
  806890:	0025883a 	mov	r18,zero
  806894:	0005883a 	mov	r2,zero
  806898:	00cff9b4 	movhi	r3,16358
  80689c:	18cb90c4 	addi	r3,r3,11843
  8068a0:	9009883a 	mov	r4,r18
  8068a4:	b80b883a 	mov	r5,r23
  8068a8:	180f883a 	mov	r7,r3
  8068ac:	100d883a 	mov	r6,r2
  8068b0:	0807c680 	call	807c68 <__muldf3>
  8068b4:	d9c02017 	ldw	r7,128(sp)
  8068b8:	d9801f17 	ldw	r6,124(sp)
  8068bc:	9009883a 	mov	r4,r18
  8068c0:	b80b883a 	mov	r5,r23
  8068c4:	b823883a 	mov	r17,r23
  8068c8:	102d883a 	mov	r22,r2
  8068cc:	182f883a 	mov	r23,r3
  8068d0:	0807b740 	call	807b74 <__subdf3>
  8068d4:	d9401e17 	ldw	r5,120(sp)
  8068d8:	d9001d17 	ldw	r4,116(sp)
  8068dc:	180f883a 	mov	r7,r3
  8068e0:	100d883a 	mov	r6,r2
  8068e4:	0807b740 	call	807b74 <__subdf3>
  8068e8:	023fbeb4 	movhi	r8,65274
  8068ec:	420e7bc4 	addi	r8,r8,14831
  8068f0:	024ff9b4 	movhi	r9,16358
  8068f4:	4a4b9084 	addi	r9,r9,11842
  8068f8:	480f883a 	mov	r7,r9
  8068fc:	400d883a 	mov	r6,r8
  806900:	180b883a 	mov	r5,r3
  806904:	1009883a 	mov	r4,r2
  806908:	0807c680 	call	807c68 <__muldf3>
  80690c:	02032a34 	movhi	r8,3240
  806910:	421b0e44 	addi	r8,r8,27705
  806914:	026f8834 	movhi	r9,48672
  806918:	4a571844 	addi	r9,r9,23649
  80691c:	480f883a 	mov	r7,r9
  806920:	400d883a 	mov	r6,r8
  806924:	9009883a 	mov	r4,r18
  806928:	880b883a 	mov	r5,r17
  80692c:	1021883a 	mov	r16,r2
  806930:	1823883a 	mov	r17,r3
  806934:	0807c680 	call	807c68 <__muldf3>
  806938:	180f883a 	mov	r7,r3
  80693c:	880b883a 	mov	r5,r17
  806940:	8009883a 	mov	r4,r16
  806944:	100d883a 	mov	r6,r2
  806948:	0807bf40 	call	807bf4 <__adddf3>
  80694c:	100d883a 	mov	r6,r2
  806950:	b009883a 	mov	r4,r22
  806954:	b80b883a 	mov	r5,r23
  806958:	180f883a 	mov	r7,r3
  80695c:	1021883a 	mov	r16,r2
  806960:	1823883a 	mov	r17,r3
  806964:	0807bf40 	call	807bf4 <__adddf3>
  806968:	1009883a 	mov	r4,r2
  80696c:	180b883a 	mov	r5,r3
  806970:	b00d883a 	mov	r6,r22
  806974:	b80f883a 	mov	r7,r23
  806978:	d8803915 	stw	r2,228(sp)
  80697c:	d8c03a15 	stw	r3,232(sp)
  806980:	d8801115 	stw	r2,68(sp)
  806984:	d8c01215 	stw	r3,72(sp)
  806988:	0807b740 	call	807b74 <__subdf3>
  80698c:	180f883a 	mov	r7,r3
  806990:	8009883a 	mov	r4,r16
  806994:	880b883a 	mov	r5,r17
  806998:	100d883a 	mov	r6,r2
  80699c:	0807b740 	call	807b74 <__subdf3>
  8069a0:	d9001117 	ldw	r4,68(sp)
  8069a4:	d9403a17 	ldw	r5,232(sp)
  8069a8:	1029883a 	mov	r20,r2
  8069ac:	200d883a 	mov	r6,r4
  8069b0:	280f883a 	mov	r7,r5
  8069b4:	182b883a 	mov	r21,r3
  8069b8:	0807c680 	call	807c68 <__muldf3>
  8069bc:	1021883a 	mov	r16,r2
  8069c0:	1823883a 	mov	r17,r3
  8069c4:	009caff4 	movhi	r2,29375
  8069c8:	10a93404 	addi	r2,r2,-23344
  8069cc:	00cf99b4 	movhi	r3,15974
  8069d0:	18cdda44 	addi	r3,r3,14185
  8069d4:	8009883a 	mov	r4,r16
  8069d8:	880b883a 	mov	r5,r17
  8069dc:	180f883a 	mov	r7,r3
  8069e0:	100d883a 	mov	r6,r2
  8069e4:	0807c680 	call	807c68 <__muldf3>
  8069e8:	023174b4 	movhi	r8,50642
  8069ec:	421afc44 	addi	r8,r8,27633
  8069f0:	024faf34 	movhi	r9,16060
  8069f4:	4a6f5044 	addi	r9,r9,-17087
  8069f8:	480f883a 	mov	r7,r9
  8069fc:	400d883a 	mov	r6,r8
  806a00:	180b883a 	mov	r5,r3
  806a04:	1009883a 	mov	r4,r2
  806a08:	0807b740 	call	807b74 <__subdf3>
  806a0c:	180f883a 	mov	r7,r3
  806a10:	8009883a 	mov	r4,r16
  806a14:	880b883a 	mov	r5,r17
  806a18:	100d883a 	mov	r6,r2
  806a1c:	0807c680 	call	807c68 <__muldf3>
  806a20:	022bc9b4 	movhi	r8,44838
  806a24:	42378b04 	addi	r8,r8,-8660
  806a28:	024fc474 	movhi	r9,16145
  806a2c:	4a559a84 	addi	r9,r9,22122
  806a30:	480f883a 	mov	r7,r9
  806a34:	400d883a 	mov	r6,r8
  806a38:	180b883a 	mov	r5,r3
  806a3c:	1009883a 	mov	r4,r2
  806a40:	0807bf40 	call	807bf4 <__adddf3>
  806a44:	180f883a 	mov	r7,r3
  806a48:	8009883a 	mov	r4,r16
  806a4c:	880b883a 	mov	r5,r17
  806a50:	100d883a 	mov	r6,r2
  806a54:	0807c680 	call	807c68 <__muldf3>
  806a58:	0205aff4 	movhi	r8,5823
  806a5c:	422f64c4 	addi	r8,r8,-17005
  806a60:	024fd9f4 	movhi	r9,16231
  806a64:	4a705b04 	addi	r9,r9,-16020
  806a68:	480f883a 	mov	r7,r9
  806a6c:	400d883a 	mov	r6,r8
  806a70:	180b883a 	mov	r5,r3
  806a74:	1009883a 	mov	r4,r2
  806a78:	0807b740 	call	807b74 <__subdf3>
  806a7c:	180f883a 	mov	r7,r3
  806a80:	8009883a 	mov	r4,r16
  806a84:	880b883a 	mov	r5,r17
  806a88:	100d883a 	mov	r6,r2
  806a8c:	0807c680 	call	807c68 <__muldf3>
  806a90:	02155574 	movhi	r8,21845
  806a94:	42154f84 	addi	r8,r8,21822
  806a98:	024ff174 	movhi	r9,16325
  806a9c:	4a555544 	addi	r9,r9,21845
  806aa0:	480f883a 	mov	r7,r9
  806aa4:	400d883a 	mov	r6,r8
  806aa8:	180b883a 	mov	r5,r3
  806aac:	1009883a 	mov	r4,r2
  806ab0:	0807bf40 	call	807bf4 <__adddf3>
  806ab4:	180f883a 	mov	r7,r3
  806ab8:	8009883a 	mov	r4,r16
  806abc:	880b883a 	mov	r5,r17
  806ac0:	100d883a 	mov	r6,r2
  806ac4:	0807c680 	call	807c68 <__muldf3>
  806ac8:	d9001117 	ldw	r4,68(sp)
  806acc:	d9403a17 	ldw	r5,232(sp)
  806ad0:	180f883a 	mov	r7,r3
  806ad4:	100d883a 	mov	r6,r2
  806ad8:	0807b740 	call	807b74 <__subdf3>
  806adc:	d9001117 	ldw	r4,68(sp)
  806ae0:	d9403a17 	ldw	r5,232(sp)
  806ae4:	100d883a 	mov	r6,r2
  806ae8:	180f883a 	mov	r7,r3
  806aec:	1021883a 	mov	r16,r2
  806af0:	1823883a 	mov	r17,r3
  806af4:	0807c680 	call	807c68 <__muldf3>
  806af8:	0011883a 	mov	r8,zero
  806afc:	02500034 	movhi	r9,16384
  806b00:	480f883a 	mov	r7,r9
  806b04:	400d883a 	mov	r6,r8
  806b08:	8009883a 	mov	r4,r16
  806b0c:	880b883a 	mov	r5,r17
  806b10:	1021883a 	mov	r16,r2
  806b14:	1823883a 	mov	r17,r3
  806b18:	0807b740 	call	807b74 <__subdf3>
  806b1c:	180f883a 	mov	r7,r3
  806b20:	880b883a 	mov	r5,r17
  806b24:	8009883a 	mov	r4,r16
  806b28:	100d883a 	mov	r6,r2
  806b2c:	080802c0 	call	80802c <__divdf3>
  806b30:	d9001117 	ldw	r4,68(sp)
  806b34:	d9403a17 	ldw	r5,232(sp)
  806b38:	a00d883a 	mov	r6,r20
  806b3c:	a80f883a 	mov	r7,r21
  806b40:	1025883a 	mov	r18,r2
  806b44:	1827883a 	mov	r19,r3
  806b48:	0807c680 	call	807c68 <__muldf3>
  806b4c:	180f883a 	mov	r7,r3
  806b50:	a009883a 	mov	r4,r20
  806b54:	a80b883a 	mov	r5,r21
  806b58:	100d883a 	mov	r6,r2
  806b5c:	0807bf40 	call	807bf4 <__adddf3>
  806b60:	180f883a 	mov	r7,r3
  806b64:	980b883a 	mov	r5,r19
  806b68:	9009883a 	mov	r4,r18
  806b6c:	100d883a 	mov	r6,r2
  806b70:	0807b740 	call	807b74 <__subdf3>
  806b74:	d9801117 	ldw	r6,68(sp)
  806b78:	d9c03a17 	ldw	r7,232(sp)
  806b7c:	180b883a 	mov	r5,r3
  806b80:	1009883a 	mov	r4,r2
  806b84:	0807b740 	call	807b74 <__subdf3>
  806b88:	0011883a 	mov	r8,zero
  806b8c:	024ffc34 	movhi	r9,16368
  806b90:	480b883a 	mov	r5,r9
  806b94:	180f883a 	mov	r7,r3
  806b98:	4009883a 	mov	r4,r8
  806b9c:	100d883a 	mov	r6,r2
  806ba0:	0807b740 	call	807b74 <__subdf3>
  806ba4:	100b883a 	mov	r5,r2
  806ba8:	d8801317 	ldw	r2,76(sp)
  806bac:	10d5883a 	add	r10,r2,r3
  806bb0:	5005d53a 	srai	r2,r10,20
  806bb4:	0080720e 	bge	zero,r2,806d80 <__ieee754_pow+0x12d4>
  806bb8:	2811883a 	mov	r8,r5
  806bbc:	5013883a 	mov	r9,r10
  806bc0:	d9c01a17 	ldw	r7,104(sp)
  806bc4:	d9801917 	ldw	r6,100(sp)
  806bc8:	480b883a 	mov	r5,r9
  806bcc:	4009883a 	mov	r4,r8
  806bd0:	003e8206 	br	8065dc <__ieee754_pow+0xb30>
  806bd4:	0009883a 	mov	r4,zero
  806bd8:	800b883a 	mov	r5,r16
  806bdc:	a80f883a 	mov	r7,r21
  806be0:	a00d883a 	mov	r6,r20
  806be4:	003c2b06 	br	805c94 <__ieee754_pow+0x1e8>
  806be8:	d9001d17 	ldw	r4,116(sp)
  806bec:	00994b34 	movhi	r2,25900
  806bf0:	10a0bf84 	addi	r2,r2,-32002
  806bf4:	00cf25f4 	movhi	r3,15511
  806bf8:	18c551c4 	addi	r3,r3,5447
  806bfc:	a80b883a 	mov	r5,r21
  806c00:	180f883a 	mov	r7,r3
  806c04:	100d883a 	mov	r6,r2
  806c08:	0807bf40 	call	807bf4 <__adddf3>
  806c0c:	d9801f17 	ldw	r6,124(sp)
  806c10:	880b883a 	mov	r5,r17
  806c14:	8009883a 	mov	r4,r16
  806c18:	980f883a 	mov	r7,r19
  806c1c:	1021883a 	mov	r16,r2
  806c20:	1823883a 	mov	r17,r3
  806c24:	0807b740 	call	807b74 <__subdf3>
  806c28:	180f883a 	mov	r7,r3
  806c2c:	880b883a 	mov	r5,r17
  806c30:	8009883a 	mov	r4,r16
  806c34:	100d883a 	mov	r6,r2
  806c38:	08083940 	call	808394 <__gtdf2>
  806c3c:	00bf0c0e 	bge	zero,r2,806870 <__ieee754_pow+0xdc4>
  806c40:	04220034 	movhi	r16,34816
  806c44:	841d6704 	addi	r16,r16,30108
  806c48:	045f8e34 	movhi	r17,32312
  806c4c:	8c790f04 	addi	r17,r17,-7108
  806c50:	d9401a17 	ldw	r5,104(sp)
  806c54:	d9001917 	ldw	r4,100(sp)
  806c58:	800d883a 	mov	r6,r16
  806c5c:	880f883a 	mov	r7,r17
  806c60:	0807c680 	call	807c68 <__muldf3>
  806c64:	180b883a 	mov	r5,r3
  806c68:	800d883a 	mov	r6,r16
  806c6c:	880f883a 	mov	r7,r17
  806c70:	1009883a 	mov	r4,r2
  806c74:	003e5906 	br	8065dc <__ieee754_pow+0xb30>
  806c78:	e005d53a 	srai	r2,fp,20
  806c7c:	01800434 	movhi	r6,16
  806c80:	d9401817 	ldw	r5,96(sp)
  806c84:	10bf0084 	addi	r2,r2,-1022
  806c88:	308dd83a 	sra	r6,r6,r2
  806c8c:	02000434 	movhi	r8,16
  806c90:	423fffc4 	addi	r8,r8,-1
  806c94:	0005883a 	mov	r2,zero
  806c98:	298d883a 	add	r6,r5,r6
  806c9c:	318b883a 	add	r5,r6,r6
  806ca0:	320e703a 	and	r7,r6,r8
  806ca4:	1013883a 	mov	r9,r2
  806ca8:	280ad57a 	srli	r5,r5,21
  806cac:	d8801817 	ldw	r2,96(sp)
  806cb0:	01000504 	movi	r4,20
  806cb4:	297f0044 	addi	r5,r5,-1023
  806cb8:	4151d83a 	sra	r8,r8,r5
  806cbc:	39c00434 	orhi	r7,r7,16
  806cc0:	2149c83a 	sub	r4,r4,r5
  806cc4:	0210303a 	nor	r8,zero,r8
  806cc8:	3939d83a 	sra	fp,r7,r4
  806ccc:	320e703a 	and	r7,r6,r8
  806cd0:	10002916 	blt	r2,zero,806d78 <__ieee754_pow+0x12cc>
  806cd4:	d9402017 	ldw	r5,128(sp)
  806cd8:	d9001f17 	ldw	r4,124(sp)
  806cdc:	480d883a 	mov	r6,r9
  806ce0:	0807b740 	call	807b74 <__subdf3>
  806ce4:	180b883a 	mov	r5,r3
  806ce8:	d9402015 	stw	r5,128(sp)
  806cec:	280f883a 	mov	r7,r5
  806cf0:	d9001d17 	ldw	r4,116(sp)
  806cf4:	d9401e17 	ldw	r5,120(sp)
  806cf8:	1007883a 	mov	r3,r2
  806cfc:	180d883a 	mov	r6,r3
  806d00:	d8801f15 	stw	r2,124(sp)
  806d04:	0807bf40 	call	807bf4 <__adddf3>
  806d08:	180b883a 	mov	r5,r3
  806d0c:	e006953a 	slli	r3,fp,20
  806d10:	282f883a 	mov	r23,r5
  806d14:	d8c01315 	stw	r3,76(sp)
  806d18:	003edd06 	br	806890 <__ieee754_pow+0xde4>
  806d1c:	383bc81e 	bne	r7,zero,805c40 <__ieee754_pow+0x194>
  806d20:	28c5c83a 	sub	r2,r5,r3
  806d24:	8087d83a 	sra	r3,r16,r2
  806d28:	1884983a 	sll	r2,r3,r2
  806d2c:	80801b26 	beq	r16,r2,806d9c <__ieee754_pow+0x12f0>
  806d30:	0039883a 	mov	fp,zero
  806d34:	003b9d06 	br	805bac <__ieee754_pow+0x100>
  806d38:	d9801f17 	ldw	r6,124(sp)
  806d3c:	8009883a 	mov	r4,r16
  806d40:	880b883a 	mov	r5,r17
  806d44:	980f883a 	mov	r7,r19
  806d48:	0807b740 	call	807b74 <__subdf3>
  806d4c:	d9001d17 	ldw	r4,116(sp)
  806d50:	a80b883a 	mov	r5,r21
  806d54:	180f883a 	mov	r7,r3
  806d58:	100d883a 	mov	r6,r2
  806d5c:	08084a40 	call	8084a4 <__ledf2>
  806d60:	00bfc516 	blt	zero,r2,806c78 <__ieee754_pow+0x11cc>
  806d64:	0430be74 	movhi	r16,49913
  806d68:	843cd644 	addi	r16,r16,-3239
  806d6c:	04406974 	movhi	r17,421
  806d70:	8c5b87c4 	addi	r17,r17,28191
  806d74:	003fb606 	br	806c50 <__ieee754_pow+0x11a4>
  806d78:	0739c83a 	sub	fp,zero,fp
  806d7c:	003fd506 	br	806cd4 <__ieee754_pow+0x1228>
  806d80:	2809883a 	mov	r4,r5
  806d84:	e00d883a 	mov	r6,fp
  806d88:	180b883a 	mov	r5,r3
  806d8c:	08073000 	call	807300 <scalbn>
  806d90:	1011883a 	mov	r8,r2
  806d94:	1813883a 	mov	r9,r3
  806d98:	003f8906 	br	806bc0 <__ieee754_pow+0x1114>
  806d9c:	18c0004c 	andi	r3,r3,1
  806da0:	00800084 	movi	r2,2
  806da4:	10f9c83a 	sub	fp,r2,r3
  806da8:	003b8006 	br	805bac <__ieee754_pow+0x100>

00806dac <__ieee754_sqrt>:
  806dac:	defffd04 	addi	sp,sp,-12
  806db0:	dc000015 	stw	r16,0(sp)
  806db4:	009ffc34 	movhi	r2,32752
  806db8:	2021883a 	mov	r16,r4
  806dbc:	291ffc2c 	andhi	r4,r5,32752
  806dc0:	dc400115 	stw	r17,4(sp)
  806dc4:	dfc00215 	stw	ra,8(sp)
  806dc8:	2823883a 	mov	r17,r5
  806dcc:	280f883a 	mov	r7,r5
  806dd0:	2807883a 	mov	r3,r5
  806dd4:	8011883a 	mov	r8,r16
  806dd8:	20807d26 	beq	r4,r2,806fd0 <__ieee754_sqrt+0x224>
  806ddc:	01408d0e 	bge	zero,r5,807014 <__ieee754_sqrt+0x268>
  806de0:	380dd53a 	srai	r6,r7,20
  806de4:	3000131e 	bne	r6,zero,806e34 <__ieee754_sqrt+0x88>
  806de8:	1800041e 	bne	r3,zero,806dfc <__ieee754_sqrt+0x50>
  806dec:	400ed2fa 	srli	r7,r8,11
  806df0:	31bffac4 	addi	r6,r6,-21
  806df4:	4010957a 	slli	r8,r8,21
  806df8:	383ffc26 	beq	r7,zero,806dec <__ieee754_sqrt+0x40>
  806dfc:	3880042c 	andhi	r2,r7,16
  806e00:	1000991e 	bne	r2,zero,807068 <__ieee754_sqrt+0x2bc>
  806e04:	0009883a 	mov	r4,zero
  806e08:	39cf883a 	add	r7,r7,r7
  806e0c:	3880042c 	andhi	r2,r7,16
  806e10:	21000044 	addi	r4,r4,1
  806e14:	103ffc26 	beq	r2,zero,806e08 <__ieee754_sqrt+0x5c>
  806e18:	00800804 	movi	r2,32
  806e1c:	1105c83a 	sub	r2,r2,r4
  806e20:	4086d83a 	srl	r3,r8,r2
  806e24:	4110983a 	sll	r8,r8,r4
  806e28:	3105c83a 	sub	r2,r6,r4
  806e2c:	38ceb03a 	or	r7,r7,r3
  806e30:	11800044 	addi	r6,r2,1
  806e34:	31bf0044 	addi	r6,r6,-1023
  806e38:	30c0004c 	andi	r3,r6,1
  806e3c:	00800434 	movhi	r2,16
  806e40:	10bfffc4 	addi	r2,r2,-1
  806e44:	3884703a 	and	r2,r7,r2
  806e48:	1807003a 	cmpeq	r3,r3,zero
  806e4c:	11000434 	orhi	r4,r2,16
  806e50:	18005426 	beq	r3,zero,806fa4 <__ieee754_sqrt+0x1f8>
  806e54:	4004d7fa 	srli	r2,r8,31
  806e58:	4207883a 	add	r3,r8,r8
  806e5c:	02800834 	movhi	r10,32
  806e60:	1105883a 	add	r2,r2,r4
  806e64:	2089883a 	add	r4,r4,r2
  806e68:	0011883a 	mov	r8,zero
  806e6c:	000b883a 	mov	r5,zero
  806e70:	0013883a 	mov	r9,zero
  806e74:	02c00584 	movi	r11,22
  806e78:	520f883a 	add	r7,r10,r8
  806e7c:	1804d7fa 	srli	r2,r3,31
  806e80:	4a400044 	addi	r9,r9,1
  806e84:	18c7883a 	add	r3,r3,r3
  806e88:	21c00316 	blt	r4,r7,806e98 <__ieee754_sqrt+0xec>
  806e8c:	21c9c83a 	sub	r4,r4,r7
  806e90:	2a8b883a 	add	r5,r5,r10
  806e94:	51d1883a 	add	r8,r10,r7
  806e98:	1105883a 	add	r2,r2,r4
  806e9c:	5014d07a 	srli	r10,r10,1
  806ea0:	2089883a 	add	r4,r4,r2
  806ea4:	4afff41e 	bne	r9,r11,806e78 <__ieee754_sqrt+0xcc>
  806ea8:	02600034 	movhi	r9,32768
  806eac:	0017883a 	mov	r11,zero
  806eb0:	0019883a 	mov	r12,zero
  806eb4:	0015883a 	mov	r10,zero
  806eb8:	4821883a 	mov	r16,r9
  806ebc:	03c00804 	movi	r15,32
  806ec0:	00000806 	br	806ee4 <__ieee754_sqrt+0x138>
  806ec4:	22003426 	beq	r4,r8,806f98 <__ieee754_sqrt+0x1ec>
  806ec8:	1804d7fa 	srli	r2,r3,31
  806ecc:	52800044 	addi	r10,r10,1
  806ed0:	18c7883a 	add	r3,r3,r3
  806ed4:	1105883a 	add	r2,r2,r4
  806ed8:	2089883a 	add	r4,r4,r2
  806edc:	4812d07a 	srli	r9,r9,1
  806ee0:	53c01326 	beq	r10,r15,806f30 <__ieee754_sqrt+0x184>
  806ee4:	4acf883a 	add	r7,r9,r11
  806ee8:	413ff60e 	bge	r8,r4,806ec4 <__ieee754_sqrt+0x118>
  806eec:	38a0002c 	andhi	r2,r7,32768
  806ef0:	3a57883a 	add	r11,r7,r9
  806ef4:	14002426 	beq	r2,r16,806f88 <__ieee754_sqrt+0x1dc>
  806ef8:	4005883a 	mov	r2,r8
  806efc:	2209c83a 	sub	r4,r4,r8
  806f00:	19c0012e 	bgeu	r3,r7,806f08 <__ieee754_sqrt+0x15c>
  806f04:	213fffc4 	addi	r4,r4,-1
  806f08:	19c7c83a 	sub	r3,r3,r7
  806f0c:	1011883a 	mov	r8,r2
  806f10:	1804d7fa 	srli	r2,r3,31
  806f14:	52800044 	addi	r10,r10,1
  806f18:	6259883a 	add	r12,r12,r9
  806f1c:	1105883a 	add	r2,r2,r4
  806f20:	18c7883a 	add	r3,r3,r3
  806f24:	2089883a 	add	r4,r4,r2
  806f28:	4812d07a 	srli	r9,r9,1
  806f2c:	53ffed1e 	bne	r10,r15,806ee4 <__ieee754_sqrt+0x138>
  806f30:	20c4b03a 	or	r2,r4,r3
  806f34:	1000201e 	bne	r2,zero,806fb8 <__ieee754_sqrt+0x20c>
  806f38:	600ed07a 	srli	r7,r12,1
  806f3c:	2880004c 	andi	r2,r5,1
  806f40:	1005003a 	cmpeq	r2,r2,zero
  806f44:	1000011e 	bne	r2,zero,806f4c <__ieee754_sqrt+0x1a0>
  806f48:	39e00034 	orhi	r7,r7,32768
  806f4c:	300dd07a 	srai	r6,r6,1
  806f50:	280bd07a 	srai	r5,r5,1
  806f54:	010ff834 	movhi	r4,16352
  806f58:	300c953a 	slli	r6,r6,20
  806f5c:	290b883a 	add	r5,r5,r4
  806f60:	3821883a 	mov	r16,r7
  806f64:	299d883a 	add	r14,r5,r6
  806f68:	7023883a 	mov	r17,r14
  806f6c:	8005883a 	mov	r2,r16
  806f70:	8807883a 	mov	r3,r17
  806f74:	dfc00217 	ldw	ra,8(sp)
  806f78:	dc400117 	ldw	r17,4(sp)
  806f7c:	dc000017 	ldw	r16,0(sp)
  806f80:	dec00304 	addi	sp,sp,12
  806f84:	f800283a 	ret
  806f88:	5884703a 	and	r2,r11,r2
  806f8c:	103fda1e 	bne	r2,zero,806ef8 <__ieee754_sqrt+0x14c>
  806f90:	40800044 	addi	r2,r8,1
  806f94:	003fd906 	br	806efc <__ieee754_sqrt+0x150>
  806f98:	19ffd42e 	bgeu	r3,r7,806eec <__ieee754_sqrt+0x140>
  806f9c:	2011883a 	mov	r8,r4
  806fa0:	003fc906 	br	806ec8 <__ieee754_sqrt+0x11c>
  806fa4:	4004d7fa 	srli	r2,r8,31
  806fa8:	4211883a 	add	r8,r8,r8
  806fac:	1105883a 	add	r2,r2,r4
  806fb0:	2089883a 	add	r4,r4,r2
  806fb4:	003fa706 	br	806e54 <__ieee754_sqrt+0xa8>
  806fb8:	00bfffc4 	movi	r2,-1
  806fbc:	60802726 	beq	r12,r2,80705c <__ieee754_sqrt+0x2b0>
  806fc0:	6080004c 	andi	r2,r12,1
  806fc4:	6085883a 	add	r2,r12,r2
  806fc8:	100ed07a 	srli	r7,r2,1
  806fcc:	003fdb06 	br	806f3c <__ieee754_sqrt+0x190>
  806fd0:	8009883a 	mov	r4,r16
  806fd4:	800d883a 	mov	r6,r16
  806fd8:	0807c680 	call	807c68 <__muldf3>
  806fdc:	180f883a 	mov	r7,r3
  806fe0:	880b883a 	mov	r5,r17
  806fe4:	8009883a 	mov	r4,r16
  806fe8:	100d883a 	mov	r6,r2
  806fec:	0807bf40 	call	807bf4 <__adddf3>
  806ff0:	1021883a 	mov	r16,r2
  806ff4:	1823883a 	mov	r17,r3
  806ff8:	8005883a 	mov	r2,r16
  806ffc:	8807883a 	mov	r3,r17
  807000:	dfc00217 	ldw	ra,8(sp)
  807004:	dc400117 	ldw	r17,4(sp)
  807008:	dc000017 	ldw	r16,0(sp)
  80700c:	dec00304 	addi	sp,sp,12
  807010:	f800283a 	ret
  807014:	00a00034 	movhi	r2,32768
  807018:	10bfffc4 	addi	r2,r2,-1
  80701c:	2884703a 	and	r2,r5,r2
  807020:	8084b03a 	or	r2,r16,r2
  807024:	103fd126 	beq	r2,zero,806f6c <__ieee754_sqrt+0x1c0>
  807028:	283f6d26 	beq	r5,zero,806de0 <__ieee754_sqrt+0x34>
  80702c:	280f883a 	mov	r7,r5
  807030:	8009883a 	mov	r4,r16
  807034:	800d883a 	mov	r6,r16
  807038:	0807b740 	call	807b74 <__subdf3>
  80703c:	1009883a 	mov	r4,r2
  807040:	180b883a 	mov	r5,r3
  807044:	100d883a 	mov	r6,r2
  807048:	180f883a 	mov	r7,r3
  80704c:	080802c0 	call	80802c <__divdf3>
  807050:	1021883a 	mov	r16,r2
  807054:	1823883a 	mov	r17,r3
  807058:	003fc406 	br	806f6c <__ieee754_sqrt+0x1c0>
  80705c:	29400044 	addi	r5,r5,1
  807060:	000f883a 	mov	r7,zero
  807064:	003fb506 	br	806f3c <__ieee754_sqrt+0x190>
  807068:	0009883a 	mov	r4,zero
  80706c:	00800804 	movi	r2,32
  807070:	003f6b06 	br	806e20 <__ieee754_sqrt+0x74>

00807074 <fabs>:
  807074:	01e00034 	movhi	r7,32768
  807078:	39ffffc4 	addi	r7,r7,-1
  80707c:	394e703a 	and	r7,r7,r5
  807080:	2005883a 	mov	r2,r4
  807084:	3807883a 	mov	r3,r7
  807088:	f800283a 	ret

0080708c <finite>:
  80708c:	00a00034 	movhi	r2,32768
  807090:	10bfffc4 	addi	r2,r2,-1
  807094:	2884703a 	and	r2,r5,r2
  807098:	01600434 	movhi	r5,32784
  80709c:	1145883a 	add	r2,r2,r5
  8070a0:	1004d7fa 	srli	r2,r2,31
  8070a4:	f800283a 	ret

008070a8 <__isnand>:
  8070a8:	200d883a 	mov	r6,r4
  8070ac:	0109c83a 	sub	r4,zero,r4
  8070b0:	2188b03a 	or	r4,r4,r6
  8070b4:	2008d7fa 	srli	r4,r4,31
  8070b8:	00a00034 	movhi	r2,32768
  8070bc:	10bfffc4 	addi	r2,r2,-1
  8070c0:	1144703a 	and	r2,r2,r5
  8070c4:	2088b03a 	or	r4,r4,r2
  8070c8:	009ffc34 	movhi	r2,32752
  8070cc:	1105c83a 	sub	r2,r2,r4
  8070d0:	1004d7fa 	srli	r2,r2,31
  8070d4:	f800283a 	ret

008070d8 <matherr>:
  8070d8:	0005883a 	mov	r2,zero
  8070dc:	f800283a 	ret

008070e0 <nan>:
  8070e0:	015ffe34 	movhi	r5,32760
  8070e4:	0005883a 	mov	r2,zero
  8070e8:	2807883a 	mov	r3,r5
  8070ec:	f800283a 	ret

008070f0 <rint>:
  8070f0:	2015883a 	mov	r10,r4
  8070f4:	2809d53a 	srai	r4,r5,20
  8070f8:	defff904 	addi	sp,sp,-28
  8070fc:	034004c4 	movi	r13,19
  807100:	2101ffcc 	andi	r4,r4,2047
  807104:	227f0044 	addi	r9,r4,-1023
  807108:	dc800415 	stw	r18,16(sp)
  80710c:	dfc00615 	stw	ra,24(sp)
  807110:	dcc00515 	stw	r19,20(sp)
  807114:	dc400315 	stw	r17,12(sp)
  807118:	dc000215 	stw	r16,8(sp)
  80711c:	2817883a 	mov	r11,r5
  807120:	500d883a 	mov	r6,r10
  807124:	2824d7fa 	srli	r18,r5,31
  807128:	6a403016 	blt	r13,r9,8071ec <rint+0xfc>
  80712c:	48004916 	blt	r9,zero,807254 <rint+0x164>
  807130:	00800434 	movhi	r2,16
  807134:	10bfffc4 	addi	r2,r2,-1
  807138:	1247d83a 	sra	r3,r2,r9
  80713c:	2809883a 	mov	r4,r5
  807140:	1944703a 	and	r2,r3,r5
  807144:	5084b03a 	or	r2,r10,r2
  807148:	10001f26 	beq	r2,zero,8071c8 <rint+0xd8>
  80714c:	180ad07a 	srli	r5,r3,1
  807150:	5944703a 	and	r2,r11,r5
  807154:	5084b03a 	or	r2,r10,r2
  807158:	10000626 	beq	r2,zero,807174 <rint+0x84>
  80715c:	4b406626 	beq	r9,r13,8072f8 <rint+0x208>
  807160:	00c000b4 	movhi	r3,2
  807164:	1a47d83a 	sra	r3,r3,r9
  807168:	0144303a 	nor	r2,zero,r5
  80716c:	5884703a 	and	r2,r11,r2
  807170:	10c8b03a 	or	r4,r2,r3
  807174:	900690fa 	slli	r3,r18,3
  807178:	008020b4 	movhi	r2,130
  80717c:	10b04b04 	addi	r2,r2,-16084
  807180:	200f883a 	mov	r7,r4
  807184:	1887883a 	add	r3,r3,r2
  807188:	1c000017 	ldw	r16,0(r3)
  80718c:	1c400117 	ldw	r17,4(r3)
  807190:	8009883a 	mov	r4,r16
  807194:	880b883a 	mov	r5,r17
  807198:	0807bf40 	call	807bf4 <__adddf3>
  80719c:	d8800015 	stw	r2,0(sp)
  8071a0:	d8c00115 	stw	r3,4(sp)
  8071a4:	d8800017 	ldw	r2,0(sp)
  8071a8:	d8c00117 	ldw	r3,4(sp)
  8071ac:	880f883a 	mov	r7,r17
  8071b0:	800d883a 	mov	r6,r16
  8071b4:	180b883a 	mov	r5,r3
  8071b8:	1009883a 	mov	r4,r2
  8071bc:	0807b740 	call	807b74 <__subdf3>
  8071c0:	1015883a 	mov	r10,r2
  8071c4:	1817883a 	mov	r11,r3
  8071c8:	5005883a 	mov	r2,r10
  8071cc:	5807883a 	mov	r3,r11
  8071d0:	dfc00617 	ldw	ra,24(sp)
  8071d4:	dcc00517 	ldw	r19,20(sp)
  8071d8:	dc800417 	ldw	r18,16(sp)
  8071dc:	dc400317 	ldw	r17,12(sp)
  8071e0:	dc000217 	ldw	r16,8(sp)
  8071e4:	dec00704 	addi	sp,sp,28
  8071e8:	f800283a 	ret
  8071ec:	00800cc4 	movi	r2,51
  8071f0:	12400f16 	blt	r2,r9,807230 <rint+0x140>
  8071f4:	213efb44 	addi	r4,r4,-1043
  8071f8:	00bfffc4 	movi	r2,-1
  8071fc:	1104d83a 	srl	r2,r2,r4
  807200:	5086703a 	and	r3,r10,r2
  807204:	183ff026 	beq	r3,zero,8071c8 <rint+0xd8>
  807208:	100ad07a 	srli	r5,r2,1
  80720c:	5144703a 	and	r2,r10,r5
  807210:	10000526 	beq	r2,zero,807228 <rint+0x138>
  807214:	00d00034 	movhi	r3,16384
  807218:	1907d83a 	sra	r3,r3,r4
  80721c:	0144303a 	nor	r2,zero,r5
  807220:	5084703a 	and	r2,r10,r2
  807224:	10ccb03a 	or	r6,r2,r3
  807228:	5809883a 	mov	r4,r11
  80722c:	003fd106 	br	807174 <rint+0x84>
  807230:	00810004 	movi	r2,1024
  807234:	48bfe41e 	bne	r9,r2,8071c8 <rint+0xd8>
  807238:	5009883a 	mov	r4,r10
  80723c:	500d883a 	mov	r6,r10
  807240:	280f883a 	mov	r7,r5
  807244:	0807bf40 	call	807bf4 <__adddf3>
  807248:	1015883a 	mov	r10,r2
  80724c:	1817883a 	mov	r11,r3
  807250:	003fdd06 	br	8071c8 <rint+0xd8>
  807254:	04e00034 	movhi	r19,32768
  807258:	9cffffc4 	addi	r19,r19,-1
  80725c:	2cc4703a 	and	r2,r5,r19
  807260:	5084b03a 	or	r2,r10,r2
  807264:	103fd826 	beq	r2,zero,8071c8 <rint+0xd8>
  807268:	00c00434 	movhi	r3,16
  80726c:	18ffffc4 	addi	r3,r3,-1
  807270:	28c6703a 	and	r3,r5,r3
  807274:	50c6b03a 	or	r3,r10,r3
  807278:	00cdc83a 	sub	r6,zero,r3
  80727c:	900a90fa 	slli	r5,r18,3
  807280:	1986b03a 	or	r3,r3,r6
  807284:	010020b4 	movhi	r4,130
  807288:	21304b04 	addi	r4,r4,-16084
  80728c:	1806d33a 	srli	r3,r3,12
  807290:	290b883a 	add	r5,r5,r4
  807294:	2c000017 	ldw	r16,0(r5)
  807298:	2c400117 	ldw	r17,4(r5)
  80729c:	593fffac 	andhi	r4,r11,65534
  8072a0:	18c0022c 	andhi	r3,r3,8
  8072a4:	1906b03a 	or	r3,r3,r4
  8072a8:	500d883a 	mov	r6,r10
  8072ac:	180f883a 	mov	r7,r3
  8072b0:	8009883a 	mov	r4,r16
  8072b4:	880b883a 	mov	r5,r17
  8072b8:	0807bf40 	call	807bf4 <__adddf3>
  8072bc:	d8800015 	stw	r2,0(sp)
  8072c0:	d8c00115 	stw	r3,4(sp)
  8072c4:	d8800017 	ldw	r2,0(sp)
  8072c8:	d8c00117 	ldw	r3,4(sp)
  8072cc:	880f883a 	mov	r7,r17
  8072d0:	800d883a 	mov	r6,r16
  8072d4:	180b883a 	mov	r5,r3
  8072d8:	1009883a 	mov	r4,r2
  8072dc:	0807b740 	call	807b74 <__subdf3>
  8072e0:	901297fa 	slli	r9,r18,31
  8072e4:	98d0703a 	and	r8,r19,r3
  8072e8:	1015883a 	mov	r10,r2
  8072ec:	4250b03a 	or	r8,r8,r9
  8072f0:	4017883a 	mov	r11,r8
  8072f4:	003fb406 	br	8071c8 <rint+0xd8>
  8072f8:	01900034 	movhi	r6,16384
  8072fc:	003f9d06 	br	807174 <rint+0x84>

00807300 <scalbn>:
  807300:	2011883a 	mov	r8,r4
  807304:	291ffc2c 	andhi	r4,r5,32752
  807308:	2009d53a 	srai	r4,r4,20
  80730c:	defffd04 	addi	sp,sp,-12
  807310:	dc000015 	stw	r16,0(sp)
  807314:	dfc00215 	stw	ra,8(sp)
  807318:	dc400115 	stw	r17,4(sp)
  80731c:	2813883a 	mov	r9,r5
  807320:	2815883a 	mov	r10,r5
  807324:	3021883a 	mov	r16,r6
  807328:	2000281e 	bne	r4,zero,8073cc <scalbn+0xcc>
  80732c:	00a00034 	movhi	r2,32768
  807330:	10bfffc4 	addi	r2,r2,-1
  807334:	2884703a 	and	r2,r5,r2
  807338:	4084b03a 	or	r2,r8,r2
  80733c:	10001826 	beq	r2,zero,8073a0 <scalbn+0xa0>
  807340:	0005883a 	mov	r2,zero
  807344:	00d0d434 	movhi	r3,17232
  807348:	4009883a 	mov	r4,r8
  80734c:	100d883a 	mov	r6,r2
  807350:	180f883a 	mov	r7,r3
  807354:	0807c680 	call	807c68 <__muldf3>
  807358:	100b883a 	mov	r5,r2
  80735c:	1011883a 	mov	r8,r2
  807360:	00bffff4 	movhi	r2,65535
  807364:	108f2c04 	addi	r2,r2,15536
  807368:	180d883a 	mov	r6,r3
  80736c:	1813883a 	mov	r9,r3
  807370:	8080120e 	bge	r16,r2,8073bc <scalbn+0xbc>
  807374:	00b0be74 	movhi	r2,49913
  807378:	10bcd644 	addi	r2,r2,-3239
  80737c:	00c06974 	movhi	r3,421
  807380:	18db87c4 	addi	r3,r3,28191
  807384:	2809883a 	mov	r4,r5
  807388:	180f883a 	mov	r7,r3
  80738c:	300b883a 	mov	r5,r6
  807390:	100d883a 	mov	r6,r2
  807394:	0807c680 	call	807c68 <__muldf3>
  807398:	1011883a 	mov	r8,r2
  80739c:	1813883a 	mov	r9,r3
  8073a0:	4005883a 	mov	r2,r8
  8073a4:	4807883a 	mov	r3,r9
  8073a8:	dfc00217 	ldw	ra,8(sp)
  8073ac:	dc400117 	ldw	r17,4(sp)
  8073b0:	dc000017 	ldw	r16,0(sp)
  8073b4:	dec00304 	addi	sp,sp,12
  8073b8:	f800283a 	ret
  8073bc:	189ffc2c 	andhi	r2,r3,32752
  8073c0:	1005d53a 	srai	r2,r2,20
  8073c4:	1815883a 	mov	r10,r3
  8073c8:	113ff284 	addi	r4,r2,-54
  8073cc:	0081ffc4 	movi	r2,2047
  8073d0:	20801126 	beq	r4,r2,807418 <scalbn+0x118>
  8073d4:	2409883a 	add	r4,r4,r16
  8073d8:	0081ff84 	movi	r2,2046
  8073dc:	11001c16 	blt	r2,r4,807450 <scalbn+0x150>
  8073e0:	0100290e 	bge	zero,r4,807488 <scalbn+0x188>
  8073e4:	200a953a 	slli	r5,r4,20
  8073e8:	01200434 	movhi	r4,32784
  8073ec:	213fffc4 	addi	r4,r4,-1
  8073f0:	5108703a 	and	r4,r10,r4
  8073f4:	2148b03a 	or	r4,r4,r5
  8073f8:	2013883a 	mov	r9,r4
  8073fc:	4005883a 	mov	r2,r8
  807400:	4807883a 	mov	r3,r9
  807404:	dfc00217 	ldw	ra,8(sp)
  807408:	dc400117 	ldw	r17,4(sp)
  80740c:	dc000017 	ldw	r16,0(sp)
  807410:	dec00304 	addi	sp,sp,12
  807414:	f800283a 	ret
  807418:	480f883a 	mov	r7,r9
  80741c:	4009883a 	mov	r4,r8
  807420:	480b883a 	mov	r5,r9
  807424:	400d883a 	mov	r6,r8
  807428:	0807bf40 	call	807bf4 <__adddf3>
  80742c:	1011883a 	mov	r8,r2
  807430:	1813883a 	mov	r9,r3
  807434:	4005883a 	mov	r2,r8
  807438:	4807883a 	mov	r3,r9
  80743c:	dfc00217 	ldw	ra,8(sp)
  807440:	dc400117 	ldw	r17,4(sp)
  807444:	dc000017 	ldw	r16,0(sp)
  807448:	dec00304 	addi	sp,sp,12
  80744c:	f800283a 	ret
  807450:	04220034 	movhi	r16,34816
  807454:	841d6704 	addi	r16,r16,30108
  807458:	045f8e34 	movhi	r17,32312
  80745c:	8c790f04 	addi	r17,r17,-7108
  807460:	480f883a 	mov	r7,r9
  807464:	400d883a 	mov	r6,r8
  807468:	8009883a 	mov	r4,r16
  80746c:	880b883a 	mov	r5,r17
  807470:	08074e00 	call	8074e0 <copysign>
  807474:	180b883a 	mov	r5,r3
  807478:	800d883a 	mov	r6,r16
  80747c:	880f883a 	mov	r7,r17
  807480:	1009883a 	mov	r4,r2
  807484:	003fc306 	br	807394 <scalbn+0x94>
  807488:	00bff284 	movi	r2,-54
  80748c:	11000716 	blt	r2,r4,8074ac <scalbn+0x1ac>
  807490:	00b0d414 	movui	r2,50000
  807494:	143fee16 	blt	r2,r16,807450 <scalbn+0x150>
  807498:	0430be74 	movhi	r16,49913
  80749c:	843cd644 	addi	r16,r16,-3239
  8074a0:	04406974 	movhi	r17,421
  8074a4:	8c5b87c4 	addi	r17,r17,28191
  8074a8:	003fed06 	br	807460 <scalbn+0x160>
  8074ac:	21000d84 	addi	r4,r4,54
  8074b0:	2008953a 	slli	r4,r4,20
  8074b4:	01e00434 	movhi	r7,32784
  8074b8:	39ffffc4 	addi	r7,r7,-1
  8074bc:	51ce703a 	and	r7,r10,r7
  8074c0:	390eb03a 	or	r7,r7,r4
  8074c4:	024f2434 	movhi	r9,15504
  8074c8:	4009883a 	mov	r4,r8
  8074cc:	0011883a 	mov	r8,zero
  8074d0:	380b883a 	mov	r5,r7
  8074d4:	400d883a 	mov	r6,r8
  8074d8:	480f883a 	mov	r7,r9
  8074dc:	003fad06 	br	807394 <scalbn+0x94>

008074e0 <copysign>:
  8074e0:	3813883a 	mov	r9,r7
  8074e4:	01e00034 	movhi	r7,32768
  8074e8:	39ffffc4 	addi	r7,r7,-1
  8074ec:	394e703a 	and	r7,r7,r5
  8074f0:	4aa0002c 	andhi	r10,r9,32768
  8074f4:	3a8eb03a 	or	r7,r7,r10
  8074f8:	2005883a 	mov	r2,r4
  8074fc:	3807883a 	mov	r3,r7
  807500:	f800283a 	ret

00807504 <__divsf3>:
  807504:	defff304 	addi	sp,sp,-52
  807508:	dc400b15 	stw	r17,44(sp)
  80750c:	dc400204 	addi	r17,sp,8
  807510:	dc000a15 	stw	r16,40(sp)
  807514:	d9000015 	stw	r4,0(sp)
  807518:	d9400115 	stw	r5,4(sp)
  80751c:	d809883a 	mov	r4,sp
  807520:	880b883a 	mov	r5,r17
  807524:	dc000604 	addi	r16,sp,24
  807528:	dfc00c15 	stw	ra,48(sp)
  80752c:	0808af80 	call	808af8 <__unpack_f>
  807530:	d9000104 	addi	r4,sp,4
  807534:	800b883a 	mov	r5,r16
  807538:	0808af80 	call	808af8 <__unpack_f>
  80753c:	d9000217 	ldw	r4,8(sp)
  807540:	00800044 	movi	r2,1
  807544:	01800104 	movi	r6,4
  807548:	11000a2e 	bgeu	r2,r4,807574 <__divsf3+0x70>
  80754c:	d9400617 	ldw	r5,24(sp)
  807550:	1140432e 	bgeu	r2,r5,807660 <__divsf3+0x15c>
  807554:	d8800317 	ldw	r2,12(sp)
  807558:	d8c00717 	ldw	r3,28(sp)
  80755c:	10c4f03a 	xor	r2,r2,r3
  807560:	d8800315 	stw	r2,12(sp)
  807564:	21800226 	beq	r4,r6,807570 <__divsf3+0x6c>
  807568:	00800084 	movi	r2,2
  80756c:	2080101e 	bne	r4,r2,8075b0 <__divsf3+0xac>
  807570:	29000726 	beq	r5,r4,807590 <__divsf3+0x8c>
  807574:	8809883a 	mov	r4,r17
  807578:	08089980 	call	808998 <__pack_f>
  80757c:	dfc00c17 	ldw	ra,48(sp)
  807580:	dc400b17 	ldw	r17,44(sp)
  807584:	dc000a17 	ldw	r16,40(sp)
  807588:	dec00d04 	addi	sp,sp,52
  80758c:	f800283a 	ret
  807590:	010020b4 	movhi	r4,130
  807594:	21304f04 	addi	r4,r4,-16068
  807598:	08089980 	call	808998 <__pack_f>
  80759c:	dfc00c17 	ldw	ra,48(sp)
  8075a0:	dc400b17 	ldw	r17,44(sp)
  8075a4:	dc000a17 	ldw	r16,40(sp)
  8075a8:	dec00d04 	addi	sp,sp,52
  8075ac:	f800283a 	ret
  8075b0:	29802d26 	beq	r5,r6,807668 <__divsf3+0x164>
  8075b4:	28801a26 	beq	r5,r2,807620 <__divsf3+0x11c>
  8075b8:	d8c00417 	ldw	r3,16(sp)
  8075bc:	d8800817 	ldw	r2,32(sp)
  8075c0:	d9000517 	ldw	r4,20(sp)
  8075c4:	d9800917 	ldw	r6,36(sp)
  8075c8:	1885c83a 	sub	r2,r3,r2
  8075cc:	d8800415 	stw	r2,16(sp)
  8075d0:	2180032e 	bgeu	r4,r6,8075e0 <__divsf3+0xdc>
  8075d4:	10bfffc4 	addi	r2,r2,-1
  8075d8:	d8800415 	stw	r2,16(sp)
  8075dc:	2109883a 	add	r4,r4,r4
  8075e0:	01500034 	movhi	r5,16384
  8075e4:	0007883a 	mov	r3,zero
  8075e8:	0005883a 	mov	r2,zero
  8075ec:	01c007c4 	movi	r7,31
  8075f0:	10800044 	addi	r2,r2,1
  8075f4:	21800236 	bltu	r4,r6,807600 <__divsf3+0xfc>
  8075f8:	1946b03a 	or	r3,r3,r5
  8075fc:	2189c83a 	sub	r4,r4,r6
  807600:	280ad07a 	srli	r5,r5,1
  807604:	2109883a 	add	r4,r4,r4
  807608:	11fff91e 	bne	r2,r7,8075f0 <__divsf3+0xec>
  80760c:	19401fcc 	andi	r5,r3,127
  807610:	00801004 	movi	r2,64
  807614:	28800a26 	beq	r5,r2,807640 <__divsf3+0x13c>
  807618:	d8c00515 	stw	r3,20(sp)
  80761c:	003fd506 	br	807574 <__divsf3+0x70>
  807620:	8809883a 	mov	r4,r17
  807624:	d9800215 	stw	r6,8(sp)
  807628:	08089980 	call	808998 <__pack_f>
  80762c:	dfc00c17 	ldw	ra,48(sp)
  807630:	dc400b17 	ldw	r17,44(sp)
  807634:	dc000a17 	ldw	r16,40(sp)
  807638:	dec00d04 	addi	sp,sp,52
  80763c:	f800283a 	ret
  807640:	1880200c 	andi	r2,r3,128
  807644:	103ff41e 	bne	r2,zero,807618 <__divsf3+0x114>
  807648:	203ff326 	beq	r4,zero,807618 <__divsf3+0x114>
  80764c:	1947883a 	add	r3,r3,r5
  807650:	00bfe004 	movi	r2,-128
  807654:	1886703a 	and	r3,r3,r2
  807658:	d8c00515 	stw	r3,20(sp)
  80765c:	003fc506 	br	807574 <__divsf3+0x70>
  807660:	8009883a 	mov	r4,r16
  807664:	003fc406 	br	807578 <__divsf3+0x74>
  807668:	8809883a 	mov	r4,r17
  80766c:	d8000515 	stw	zero,20(sp)
  807670:	d8000415 	stw	zero,16(sp)
  807674:	003fc006 	br	807578 <__divsf3+0x74>

00807678 <__floatsisf>:
  807678:	2006d7fa 	srli	r3,r4,31
  80767c:	defffa04 	addi	sp,sp,-24
  807680:	008000c4 	movi	r2,3
  807684:	dfc00515 	stw	ra,20(sp)
  807688:	dc000415 	stw	r16,16(sp)
  80768c:	d8800015 	stw	r2,0(sp)
  807690:	d8c00115 	stw	r3,4(sp)
  807694:	2000081e 	bne	r4,zero,8076b8 <__floatsisf+0x40>
  807698:	00800084 	movi	r2,2
  80769c:	d8800015 	stw	r2,0(sp)
  8076a0:	d809883a 	mov	r4,sp
  8076a4:	08089980 	call	808998 <__pack_f>
  8076a8:	dfc00517 	ldw	ra,20(sp)
  8076ac:	dc000417 	ldw	r16,16(sp)
  8076b0:	dec00604 	addi	sp,sp,24
  8076b4:	f800283a 	ret
  8076b8:	00800784 	movi	r2,30
  8076bc:	1807003a 	cmpeq	r3,r3,zero
  8076c0:	d8800215 	stw	r2,8(sp)
  8076c4:	18000e1e 	bne	r3,zero,807700 <__floatsisf+0x88>
  8076c8:	00a00034 	movhi	r2,32768
  8076cc:	20800e26 	beq	r4,r2,807708 <__floatsisf+0x90>
  8076d0:	0121c83a 	sub	r16,zero,r4
  8076d4:	8009883a 	mov	r4,r16
  8076d8:	dc000315 	stw	r16,12(sp)
  8076dc:	08089180 	call	808918 <__clzsi2>
  8076e0:	117fffc4 	addi	r5,r2,-1
  8076e4:	017fee0e 	bge	zero,r5,8076a0 <__floatsisf+0x28>
  8076e8:	d8800217 	ldw	r2,8(sp)
  8076ec:	8146983a 	sll	r3,r16,r5
  8076f0:	1145c83a 	sub	r2,r2,r5
  8076f4:	d8c00315 	stw	r3,12(sp)
  8076f8:	d8800215 	stw	r2,8(sp)
  8076fc:	003fe806 	br	8076a0 <__floatsisf+0x28>
  807700:	2021883a 	mov	r16,r4
  807704:	003ff306 	br	8076d4 <__floatsisf+0x5c>
  807708:	00b3c034 	movhi	r2,52992
  80770c:	003fe606 	br	8076a8 <__floatsisf+0x30>

00807710 <__extendsfdf2>:
  807710:	defff904 	addi	sp,sp,-28
  807714:	d9000115 	stw	r4,4(sp)
  807718:	d9400204 	addi	r5,sp,8
  80771c:	d9000104 	addi	r4,sp,4
  807720:	dfc00615 	stw	ra,24(sp)
  807724:	0808af80 	call	808af8 <__unpack_f>
  807728:	d9c00517 	ldw	r7,20(sp)
  80772c:	0011883a 	mov	r8,zero
  807730:	400697ba 	slli	r3,r8,30
  807734:	3812d0ba 	srli	r9,r7,2
  807738:	380497ba 	slli	r2,r7,30
  80773c:	d9000217 	ldw	r4,8(sp)
  807740:	d9400317 	ldw	r5,12(sp)
  807744:	d9800417 	ldw	r6,16(sp)
  807748:	48c6b03a 	or	r3,r9,r3
  80774c:	100f883a 	mov	r7,r2
  807750:	d8c00015 	stw	r3,0(sp)
  807754:	08086fc0 	call	8086fc <__make_dp>
  807758:	dfc00617 	ldw	ra,24(sp)
  80775c:	dec00704 	addi	sp,sp,28
  807760:	f800283a 	ret

00807764 <_fpadd_parts>:
  807764:	defff804 	addi	sp,sp,-32
  807768:	dcc00315 	stw	r19,12(sp)
  80776c:	2027883a 	mov	r19,r4
  807770:	21000017 	ldw	r4,0(r4)
  807774:	00c00044 	movi	r3,1
  807778:	dd400515 	stw	r21,20(sp)
  80777c:	dd000415 	stw	r20,16(sp)
  807780:	ddc00715 	stw	r23,28(sp)
  807784:	dd800615 	stw	r22,24(sp)
  807788:	dc800215 	stw	r18,8(sp)
  80778c:	dc400115 	stw	r17,4(sp)
  807790:	dc000015 	stw	r16,0(sp)
  807794:	282b883a 	mov	r21,r5
  807798:	3029883a 	mov	r20,r6
  80779c:	1900632e 	bgeu	r3,r4,80792c <_fpadd_parts+0x1c8>
  8077a0:	28800017 	ldw	r2,0(r5)
  8077a4:	1880812e 	bgeu	r3,r2,8079ac <_fpadd_parts+0x248>
  8077a8:	00c00104 	movi	r3,4
  8077ac:	20c0dc26 	beq	r4,r3,807b20 <_fpadd_parts+0x3bc>
  8077b0:	10c07e26 	beq	r2,r3,8079ac <_fpadd_parts+0x248>
  8077b4:	00c00084 	movi	r3,2
  8077b8:	10c06726 	beq	r2,r3,807958 <_fpadd_parts+0x1f4>
  8077bc:	20c07b26 	beq	r4,r3,8079ac <_fpadd_parts+0x248>
  8077c0:	9dc00217 	ldw	r23,8(r19)
  8077c4:	28c00217 	ldw	r3,8(r5)
  8077c8:	9c400317 	ldw	r17,12(r19)
  8077cc:	2bc00317 	ldw	r15,12(r5)
  8077d0:	b8cdc83a 	sub	r6,r23,r3
  8077d4:	9c800417 	ldw	r18,16(r19)
  8077d8:	2c000417 	ldw	r16,16(r5)
  8077dc:	3009883a 	mov	r4,r6
  8077e0:	30009716 	blt	r6,zero,807a40 <_fpadd_parts+0x2dc>
  8077e4:	00800fc4 	movi	r2,63
  8077e8:	11806b16 	blt	r2,r6,807998 <_fpadd_parts+0x234>
  8077ec:	0100a40e 	bge	zero,r4,807a80 <_fpadd_parts+0x31c>
  8077f0:	35bff804 	addi	r22,r6,-32
  8077f4:	b000bc16 	blt	r22,zero,807ae8 <_fpadd_parts+0x384>
  8077f8:	8596d83a 	srl	r11,r16,r22
  8077fc:	0019883a 	mov	r12,zero
  807800:	0013883a 	mov	r9,zero
  807804:	01000044 	movi	r4,1
  807808:	0015883a 	mov	r10,zero
  80780c:	b000be16 	blt	r22,zero,807b08 <_fpadd_parts+0x3a4>
  807810:	2590983a 	sll	r8,r4,r22
  807814:	000f883a 	mov	r7,zero
  807818:	00bfffc4 	movi	r2,-1
  80781c:	3889883a 	add	r4,r7,r2
  807820:	408b883a 	add	r5,r8,r2
  807824:	21cd803a 	cmpltu	r6,r4,r7
  807828:	314b883a 	add	r5,r6,r5
  80782c:	7904703a 	and	r2,r15,r4
  807830:	8146703a 	and	r3,r16,r5
  807834:	10c4b03a 	or	r2,r2,r3
  807838:	10000226 	beq	r2,zero,807844 <_fpadd_parts+0xe0>
  80783c:	02400044 	movi	r9,1
  807840:	0015883a 	mov	r10,zero
  807844:	5a5eb03a 	or	r15,r11,r9
  807848:	62a0b03a 	or	r16,r12,r10
  80784c:	99400117 	ldw	r5,4(r19)
  807850:	a8800117 	ldw	r2,4(r21)
  807854:	28806e26 	beq	r5,r2,807a10 <_fpadd_parts+0x2ac>
  807858:	28006626 	beq	r5,zero,8079f4 <_fpadd_parts+0x290>
  80785c:	7c45c83a 	sub	r2,r15,r17
  807860:	7889803a 	cmpltu	r4,r15,r2
  807864:	8487c83a 	sub	r3,r16,r18
  807868:	1909c83a 	sub	r4,r3,r4
  80786c:	100d883a 	mov	r6,r2
  807870:	200f883a 	mov	r7,r4
  807874:	38007716 	blt	r7,zero,807a54 <_fpadd_parts+0x2f0>
  807878:	a5c00215 	stw	r23,8(r20)
  80787c:	a1c00415 	stw	r7,16(r20)
  807880:	a0000115 	stw	zero,4(r20)
  807884:	a1800315 	stw	r6,12(r20)
  807888:	a2000317 	ldw	r8,12(r20)
  80788c:	a2400417 	ldw	r9,16(r20)
  807890:	00bfffc4 	movi	r2,-1
  807894:	408b883a 	add	r5,r8,r2
  807898:	2a09803a 	cmpltu	r4,r5,r8
  80789c:	488d883a 	add	r6,r9,r2
  8078a0:	01c40034 	movhi	r7,4096
  8078a4:	39ffffc4 	addi	r7,r7,-1
  8078a8:	218d883a 	add	r6,r4,r6
  8078ac:	39801736 	bltu	r7,r6,80790c <_fpadd_parts+0x1a8>
  8078b0:	31c06526 	beq	r6,r7,807a48 <_fpadd_parts+0x2e4>
  8078b4:	a3000217 	ldw	r12,8(r20)
  8078b8:	4209883a 	add	r4,r8,r8
  8078bc:	00bfffc4 	movi	r2,-1
  8078c0:	220f803a 	cmpltu	r7,r4,r8
  8078c4:	4a4b883a 	add	r5,r9,r9
  8078c8:	394f883a 	add	r7,r7,r5
  8078cc:	2095883a 	add	r10,r4,r2
  8078d0:	3897883a 	add	r11,r7,r2
  8078d4:	510d803a 	cmpltu	r6,r10,r4
  8078d8:	6099883a 	add	r12,r12,r2
  8078dc:	32d7883a 	add	r11,r6,r11
  8078e0:	00840034 	movhi	r2,4096
  8078e4:	10bfffc4 	addi	r2,r2,-1
  8078e8:	2011883a 	mov	r8,r4
  8078ec:	3813883a 	mov	r9,r7
  8078f0:	a1000315 	stw	r4,12(r20)
  8078f4:	a1c00415 	stw	r7,16(r20)
  8078f8:	a3000215 	stw	r12,8(r20)
  8078fc:	12c00336 	bltu	r2,r11,80790c <_fpadd_parts+0x1a8>
  807900:	58bfed1e 	bne	r11,r2,8078b8 <_fpadd_parts+0x154>
  807904:	00bfff84 	movi	r2,-2
  807908:	12bfeb2e 	bgeu	r2,r10,8078b8 <_fpadd_parts+0x154>
  80790c:	a2800417 	ldw	r10,16(r20)
  807910:	008000c4 	movi	r2,3
  807914:	00c80034 	movhi	r3,8192
  807918:	18ffffc4 	addi	r3,r3,-1
  80791c:	a2400317 	ldw	r9,12(r20)
  807920:	a0800015 	stw	r2,0(r20)
  807924:	1a802336 	bltu	r3,r10,8079b4 <_fpadd_parts+0x250>
  807928:	a027883a 	mov	r19,r20
  80792c:	9805883a 	mov	r2,r19
  807930:	ddc00717 	ldw	r23,28(sp)
  807934:	dd800617 	ldw	r22,24(sp)
  807938:	dd400517 	ldw	r21,20(sp)
  80793c:	dd000417 	ldw	r20,16(sp)
  807940:	dcc00317 	ldw	r19,12(sp)
  807944:	dc800217 	ldw	r18,8(sp)
  807948:	dc400117 	ldw	r17,4(sp)
  80794c:	dc000017 	ldw	r16,0(sp)
  807950:	dec00804 	addi	sp,sp,32
  807954:	f800283a 	ret
  807958:	20fff41e 	bne	r4,r3,80792c <_fpadd_parts+0x1c8>
  80795c:	31000015 	stw	r4,0(r6)
  807960:	98800117 	ldw	r2,4(r19)
  807964:	30800115 	stw	r2,4(r6)
  807968:	98c00217 	ldw	r3,8(r19)
  80796c:	30c00215 	stw	r3,8(r6)
  807970:	98800317 	ldw	r2,12(r19)
  807974:	30800315 	stw	r2,12(r6)
  807978:	98c00417 	ldw	r3,16(r19)
  80797c:	30c00415 	stw	r3,16(r6)
  807980:	98800117 	ldw	r2,4(r19)
  807984:	28c00117 	ldw	r3,4(r5)
  807988:	3027883a 	mov	r19,r6
  80798c:	10c4703a 	and	r2,r2,r3
  807990:	30800115 	stw	r2,4(r6)
  807994:	003fe506 	br	80792c <_fpadd_parts+0x1c8>
  807998:	1dc02616 	blt	r3,r23,807a34 <_fpadd_parts+0x2d0>
  80799c:	0023883a 	mov	r17,zero
  8079a0:	182f883a 	mov	r23,r3
  8079a4:	0025883a 	mov	r18,zero
  8079a8:	003fa806 	br	80784c <_fpadd_parts+0xe8>
  8079ac:	a827883a 	mov	r19,r21
  8079b0:	003fde06 	br	80792c <_fpadd_parts+0x1c8>
  8079b4:	01800044 	movi	r6,1
  8079b8:	500497fa 	slli	r2,r10,31
  8079bc:	4808d07a 	srli	r4,r9,1
  8079c0:	518ad83a 	srl	r5,r10,r6
  8079c4:	a2000217 	ldw	r8,8(r20)
  8079c8:	1108b03a 	or	r4,r2,r4
  8079cc:	0007883a 	mov	r3,zero
  8079d0:	4984703a 	and	r2,r9,r6
  8079d4:	208cb03a 	or	r6,r4,r2
  8079d8:	28ceb03a 	or	r7,r5,r3
  8079dc:	42000044 	addi	r8,r8,1
  8079e0:	a027883a 	mov	r19,r20
  8079e4:	a1c00415 	stw	r7,16(r20)
  8079e8:	a2000215 	stw	r8,8(r20)
  8079ec:	a1800315 	stw	r6,12(r20)
  8079f0:	003fce06 	br	80792c <_fpadd_parts+0x1c8>
  8079f4:	8bc5c83a 	sub	r2,r17,r15
  8079f8:	8889803a 	cmpltu	r4,r17,r2
  8079fc:	9407c83a 	sub	r3,r18,r16
  807a00:	1909c83a 	sub	r4,r3,r4
  807a04:	100d883a 	mov	r6,r2
  807a08:	200f883a 	mov	r7,r4
  807a0c:	003f9906 	br	807874 <_fpadd_parts+0x110>
  807a10:	7c45883a 	add	r2,r15,r17
  807a14:	13c9803a 	cmpltu	r4,r2,r15
  807a18:	8487883a 	add	r3,r16,r18
  807a1c:	20c9883a 	add	r4,r4,r3
  807a20:	a1400115 	stw	r5,4(r20)
  807a24:	a5c00215 	stw	r23,8(r20)
  807a28:	a0800315 	stw	r2,12(r20)
  807a2c:	a1000415 	stw	r4,16(r20)
  807a30:	003fb606 	br	80790c <_fpadd_parts+0x1a8>
  807a34:	001f883a 	mov	r15,zero
  807a38:	0021883a 	mov	r16,zero
  807a3c:	003f8306 	br	80784c <_fpadd_parts+0xe8>
  807a40:	018dc83a 	sub	r6,zero,r6
  807a44:	003f6706 	br	8077e4 <_fpadd_parts+0x80>
  807a48:	00bfff84 	movi	r2,-2
  807a4c:	117faf36 	bltu	r2,r5,80790c <_fpadd_parts+0x1a8>
  807a50:	003f9806 	br	8078b4 <_fpadd_parts+0x150>
  807a54:	0005883a 	mov	r2,zero
  807a58:	1189c83a 	sub	r4,r2,r6
  807a5c:	1105803a 	cmpltu	r2,r2,r4
  807a60:	01cbc83a 	sub	r5,zero,r7
  807a64:	2885c83a 	sub	r2,r5,r2
  807a68:	01800044 	movi	r6,1
  807a6c:	a1800115 	stw	r6,4(r20)
  807a70:	a5c00215 	stw	r23,8(r20)
  807a74:	a1000315 	stw	r4,12(r20)
  807a78:	a0800415 	stw	r2,16(r20)
  807a7c:	003f8206 	br	807888 <_fpadd_parts+0x124>
  807a80:	203f7226 	beq	r4,zero,80784c <_fpadd_parts+0xe8>
  807a84:	35bff804 	addi	r22,r6,-32
  807a88:	b9af883a 	add	r23,r23,r6
  807a8c:	b0003116 	blt	r22,zero,807b54 <_fpadd_parts+0x3f0>
  807a90:	959ad83a 	srl	r13,r18,r22
  807a94:	001d883a 	mov	r14,zero
  807a98:	000f883a 	mov	r7,zero
  807a9c:	01000044 	movi	r4,1
  807aa0:	0011883a 	mov	r8,zero
  807aa4:	b0002516 	blt	r22,zero,807b3c <_fpadd_parts+0x3d8>
  807aa8:	2594983a 	sll	r10,r4,r22
  807aac:	0013883a 	mov	r9,zero
  807ab0:	00bfffc4 	movi	r2,-1
  807ab4:	4889883a 	add	r4,r9,r2
  807ab8:	508b883a 	add	r5,r10,r2
  807abc:	224d803a 	cmpltu	r6,r4,r9
  807ac0:	314b883a 	add	r5,r6,r5
  807ac4:	8904703a 	and	r2,r17,r4
  807ac8:	9146703a 	and	r3,r18,r5
  807acc:	10c4b03a 	or	r2,r2,r3
  807ad0:	10000226 	beq	r2,zero,807adc <_fpadd_parts+0x378>
  807ad4:	01c00044 	movi	r7,1
  807ad8:	0011883a 	mov	r8,zero
  807adc:	69e2b03a 	or	r17,r13,r7
  807ae0:	7224b03a 	or	r18,r14,r8
  807ae4:	003f5906 	br	80784c <_fpadd_parts+0xe8>
  807ae8:	8407883a 	add	r3,r16,r16
  807aec:	008007c4 	movi	r2,31
  807af0:	1185c83a 	sub	r2,r2,r6
  807af4:	1886983a 	sll	r3,r3,r2
  807af8:	7996d83a 	srl	r11,r15,r6
  807afc:	8198d83a 	srl	r12,r16,r6
  807b00:	1ad6b03a 	or	r11,r3,r11
  807b04:	003f3e06 	br	807800 <_fpadd_parts+0x9c>
  807b08:	2006d07a 	srli	r3,r4,1
  807b0c:	008007c4 	movi	r2,31
  807b10:	1185c83a 	sub	r2,r2,r6
  807b14:	1890d83a 	srl	r8,r3,r2
  807b18:	218e983a 	sll	r7,r4,r6
  807b1c:	003f3e06 	br	807818 <_fpadd_parts+0xb4>
  807b20:	113f821e 	bne	r2,r4,80792c <_fpadd_parts+0x1c8>
  807b24:	28c00117 	ldw	r3,4(r5)
  807b28:	98800117 	ldw	r2,4(r19)
  807b2c:	10ff7f26 	beq	r2,r3,80792c <_fpadd_parts+0x1c8>
  807b30:	04c020b4 	movhi	r19,130
  807b34:	9cf05304 	addi	r19,r19,-16052
  807b38:	003f7c06 	br	80792c <_fpadd_parts+0x1c8>
  807b3c:	2006d07a 	srli	r3,r4,1
  807b40:	008007c4 	movi	r2,31
  807b44:	1185c83a 	sub	r2,r2,r6
  807b48:	1894d83a 	srl	r10,r3,r2
  807b4c:	2192983a 	sll	r9,r4,r6
  807b50:	003fd706 	br	807ab0 <_fpadd_parts+0x34c>
  807b54:	9487883a 	add	r3,r18,r18
  807b58:	008007c4 	movi	r2,31
  807b5c:	1185c83a 	sub	r2,r2,r6
  807b60:	1886983a 	sll	r3,r3,r2
  807b64:	899ad83a 	srl	r13,r17,r6
  807b68:	919cd83a 	srl	r14,r18,r6
  807b6c:	1b5ab03a 	or	r13,r3,r13
  807b70:	003fc906 	br	807a98 <_fpadd_parts+0x334>

00807b74 <__subdf3>:
  807b74:	deffea04 	addi	sp,sp,-88
  807b78:	dcc01415 	stw	r19,80(sp)
  807b7c:	dcc00404 	addi	r19,sp,16
  807b80:	2011883a 	mov	r8,r4
  807b84:	2813883a 	mov	r9,r5
  807b88:	dc401315 	stw	r17,76(sp)
  807b8c:	d809883a 	mov	r4,sp
  807b90:	980b883a 	mov	r5,r19
  807b94:	dc400904 	addi	r17,sp,36
  807b98:	dfc01515 	stw	ra,84(sp)
  807b9c:	da400115 	stw	r9,4(sp)
  807ba0:	d9c00315 	stw	r7,12(sp)
  807ba4:	da000015 	stw	r8,0(sp)
  807ba8:	d9800215 	stw	r6,8(sp)
  807bac:	0808ed40 	call	808ed4 <__unpack_d>
  807bb0:	d9000204 	addi	r4,sp,8
  807bb4:	880b883a 	mov	r5,r17
  807bb8:	0808ed40 	call	808ed4 <__unpack_d>
  807bbc:	d8800a17 	ldw	r2,40(sp)
  807bc0:	880b883a 	mov	r5,r17
  807bc4:	9809883a 	mov	r4,r19
  807bc8:	d9800e04 	addi	r6,sp,56
  807bcc:	1080005c 	xori	r2,r2,1
  807bd0:	d8800a15 	stw	r2,40(sp)
  807bd4:	08077640 	call	807764 <_fpadd_parts>
  807bd8:	1009883a 	mov	r4,r2
  807bdc:	0808bc00 	call	808bc0 <__pack_d>
  807be0:	dfc01517 	ldw	ra,84(sp)
  807be4:	dcc01417 	ldw	r19,80(sp)
  807be8:	dc401317 	ldw	r17,76(sp)
  807bec:	dec01604 	addi	sp,sp,88
  807bf0:	f800283a 	ret

00807bf4 <__adddf3>:
  807bf4:	deffea04 	addi	sp,sp,-88
  807bf8:	dcc01415 	stw	r19,80(sp)
  807bfc:	dcc00404 	addi	r19,sp,16
  807c00:	2011883a 	mov	r8,r4
  807c04:	2813883a 	mov	r9,r5
  807c08:	dc401315 	stw	r17,76(sp)
  807c0c:	d809883a 	mov	r4,sp
  807c10:	980b883a 	mov	r5,r19
  807c14:	dc400904 	addi	r17,sp,36
  807c18:	dfc01515 	stw	ra,84(sp)
  807c1c:	da400115 	stw	r9,4(sp)
  807c20:	d9c00315 	stw	r7,12(sp)
  807c24:	da000015 	stw	r8,0(sp)
  807c28:	d9800215 	stw	r6,8(sp)
  807c2c:	0808ed40 	call	808ed4 <__unpack_d>
  807c30:	d9000204 	addi	r4,sp,8
  807c34:	880b883a 	mov	r5,r17
  807c38:	0808ed40 	call	808ed4 <__unpack_d>
  807c3c:	d9800e04 	addi	r6,sp,56
  807c40:	9809883a 	mov	r4,r19
  807c44:	880b883a 	mov	r5,r17
  807c48:	08077640 	call	807764 <_fpadd_parts>
  807c4c:	1009883a 	mov	r4,r2
  807c50:	0808bc00 	call	808bc0 <__pack_d>
  807c54:	dfc01517 	ldw	ra,84(sp)
  807c58:	dcc01417 	ldw	r19,80(sp)
  807c5c:	dc401317 	ldw	r17,76(sp)
  807c60:	dec01604 	addi	sp,sp,88
  807c64:	f800283a 	ret

00807c68 <__muldf3>:
  807c68:	deffe004 	addi	sp,sp,-128
  807c6c:	dc401815 	stw	r17,96(sp)
  807c70:	dc400404 	addi	r17,sp,16
  807c74:	2011883a 	mov	r8,r4
  807c78:	2813883a 	mov	r9,r5
  807c7c:	dc001715 	stw	r16,92(sp)
  807c80:	d809883a 	mov	r4,sp
  807c84:	880b883a 	mov	r5,r17
  807c88:	dc000904 	addi	r16,sp,36
  807c8c:	dfc01f15 	stw	ra,124(sp)
  807c90:	da400115 	stw	r9,4(sp)
  807c94:	d9c00315 	stw	r7,12(sp)
  807c98:	da000015 	stw	r8,0(sp)
  807c9c:	d9800215 	stw	r6,8(sp)
  807ca0:	ddc01e15 	stw	r23,120(sp)
  807ca4:	dd801d15 	stw	r22,116(sp)
  807ca8:	dd401c15 	stw	r21,112(sp)
  807cac:	dd001b15 	stw	r20,108(sp)
  807cb0:	dcc01a15 	stw	r19,104(sp)
  807cb4:	dc801915 	stw	r18,100(sp)
  807cb8:	0808ed40 	call	808ed4 <__unpack_d>
  807cbc:	d9000204 	addi	r4,sp,8
  807cc0:	800b883a 	mov	r5,r16
  807cc4:	0808ed40 	call	808ed4 <__unpack_d>
  807cc8:	d9000417 	ldw	r4,16(sp)
  807ccc:	00800044 	movi	r2,1
  807cd0:	1100102e 	bgeu	r2,r4,807d14 <__muldf3+0xac>
  807cd4:	d8c00917 	ldw	r3,36(sp)
  807cd8:	10c0062e 	bgeu	r2,r3,807cf4 <__muldf3+0x8c>
  807cdc:	00800104 	movi	r2,4
  807ce0:	20800a26 	beq	r4,r2,807d0c <__muldf3+0xa4>
  807ce4:	1880cc26 	beq	r3,r2,808018 <__muldf3+0x3b0>
  807ce8:	00800084 	movi	r2,2
  807cec:	20800926 	beq	r4,r2,807d14 <__muldf3+0xac>
  807cf0:	1880191e 	bne	r3,r2,807d58 <__muldf3+0xf0>
  807cf4:	d8c00a17 	ldw	r3,40(sp)
  807cf8:	d8800517 	ldw	r2,20(sp)
  807cfc:	8009883a 	mov	r4,r16
  807d00:	10c4c03a 	cmpne	r2,r2,r3
  807d04:	d8800a15 	stw	r2,40(sp)
  807d08:	00000706 	br	807d28 <__muldf3+0xc0>
  807d0c:	00800084 	movi	r2,2
  807d10:	1880c326 	beq	r3,r2,808020 <__muldf3+0x3b8>
  807d14:	d8800517 	ldw	r2,20(sp)
  807d18:	d8c00a17 	ldw	r3,40(sp)
  807d1c:	8809883a 	mov	r4,r17
  807d20:	10c4c03a 	cmpne	r2,r2,r3
  807d24:	d8800515 	stw	r2,20(sp)
  807d28:	0808bc00 	call	808bc0 <__pack_d>
  807d2c:	dfc01f17 	ldw	ra,124(sp)
  807d30:	ddc01e17 	ldw	r23,120(sp)
  807d34:	dd801d17 	ldw	r22,116(sp)
  807d38:	dd401c17 	ldw	r21,112(sp)
  807d3c:	dd001b17 	ldw	r20,108(sp)
  807d40:	dcc01a17 	ldw	r19,104(sp)
  807d44:	dc801917 	ldw	r18,100(sp)
  807d48:	dc401817 	ldw	r17,96(sp)
  807d4c:	dc001717 	ldw	r16,92(sp)
  807d50:	dec02004 	addi	sp,sp,128
  807d54:	f800283a 	ret
  807d58:	dd800717 	ldw	r22,28(sp)
  807d5c:	dc800c17 	ldw	r18,48(sp)
  807d60:	002b883a 	mov	r21,zero
  807d64:	0023883a 	mov	r17,zero
  807d68:	a80b883a 	mov	r5,r21
  807d6c:	b00d883a 	mov	r6,r22
  807d70:	880f883a 	mov	r7,r17
  807d74:	ddc00817 	ldw	r23,32(sp)
  807d78:	dcc00d17 	ldw	r19,52(sp)
  807d7c:	9009883a 	mov	r4,r18
  807d80:	08088800 	call	808880 <__muldi3>
  807d84:	001b883a 	mov	r13,zero
  807d88:	680f883a 	mov	r7,r13
  807d8c:	b009883a 	mov	r4,r22
  807d90:	000b883a 	mov	r5,zero
  807d94:	980d883a 	mov	r6,r19
  807d98:	b82d883a 	mov	r22,r23
  807d9c:	002f883a 	mov	r23,zero
  807da0:	db401615 	stw	r13,88(sp)
  807da4:	d8801315 	stw	r2,76(sp)
  807da8:	d8c01415 	stw	r3,80(sp)
  807dac:	dcc01515 	stw	r19,84(sp)
  807db0:	08088800 	call	808880 <__muldi3>
  807db4:	b00d883a 	mov	r6,r22
  807db8:	000b883a 	mov	r5,zero
  807dbc:	9009883a 	mov	r4,r18
  807dc0:	b80f883a 	mov	r7,r23
  807dc4:	1021883a 	mov	r16,r2
  807dc8:	1823883a 	mov	r17,r3
  807dcc:	08088800 	call	808880 <__muldi3>
  807dd0:	8085883a 	add	r2,r16,r2
  807dd4:	140d803a 	cmpltu	r6,r2,r16
  807dd8:	88c7883a 	add	r3,r17,r3
  807ddc:	30cd883a 	add	r6,r6,r3
  807de0:	1029883a 	mov	r20,r2
  807de4:	302b883a 	mov	r21,r6
  807de8:	da801317 	ldw	r10,76(sp)
  807dec:	dac01417 	ldw	r11,80(sp)
  807df0:	db001517 	ldw	r12,84(sp)
  807df4:	db401617 	ldw	r13,88(sp)
  807df8:	3440612e 	bgeu	r6,r17,807f80 <__muldf3+0x318>
  807dfc:	0009883a 	mov	r4,zero
  807e00:	5105883a 	add	r2,r10,r4
  807e04:	128d803a 	cmpltu	r6,r2,r10
  807e08:	5d07883a 	add	r3,r11,r20
  807e0c:	30cd883a 	add	r6,r6,r3
  807e10:	0021883a 	mov	r16,zero
  807e14:	04400044 	movi	r17,1
  807e18:	1025883a 	mov	r18,r2
  807e1c:	3027883a 	mov	r19,r6
  807e20:	32c06236 	bltu	r6,r11,807fac <__muldf3+0x344>
  807e24:	59807a26 	beq	r11,r6,808010 <__muldf3+0x3a8>
  807e28:	680b883a 	mov	r5,r13
  807e2c:	b80f883a 	mov	r7,r23
  807e30:	6009883a 	mov	r4,r12
  807e34:	b00d883a 	mov	r6,r22
  807e38:	08088800 	call	808880 <__muldi3>
  807e3c:	1009883a 	mov	r4,r2
  807e40:	000f883a 	mov	r7,zero
  807e44:	1545883a 	add	r2,r2,r21
  807e48:	1111803a 	cmpltu	r8,r2,r4
  807e4c:	19c7883a 	add	r3,r3,r7
  807e50:	40c7883a 	add	r3,r8,r3
  807e54:	88cb883a 	add	r5,r17,r3
  807e58:	d8c00617 	ldw	r3,24(sp)
  807e5c:	8089883a 	add	r4,r16,r2
  807e60:	d8800b17 	ldw	r2,44(sp)
  807e64:	18c00104 	addi	r3,r3,4
  807e68:	240d803a 	cmpltu	r6,r4,r16
  807e6c:	10c7883a 	add	r3,r2,r3
  807e70:	2013883a 	mov	r9,r4
  807e74:	d8800a17 	ldw	r2,40(sp)
  807e78:	d9000517 	ldw	r4,20(sp)
  807e7c:	314d883a 	add	r6,r6,r5
  807e80:	3015883a 	mov	r10,r6
  807e84:	2088c03a 	cmpne	r4,r4,r2
  807e88:	00880034 	movhi	r2,8192
  807e8c:	10bfffc4 	addi	r2,r2,-1
  807e90:	d9000f15 	stw	r4,60(sp)
  807e94:	d8c01015 	stw	r3,64(sp)
  807e98:	1180162e 	bgeu	r2,r6,807ef4 <__muldf3+0x28c>
  807e9c:	1811883a 	mov	r8,r3
  807ea0:	101f883a 	mov	r15,r2
  807ea4:	980497fa 	slli	r2,r19,31
  807ea8:	9016d07a 	srli	r11,r18,1
  807eac:	500697fa 	slli	r3,r10,31
  807eb0:	480cd07a 	srli	r6,r9,1
  807eb4:	500ed07a 	srli	r7,r10,1
  807eb8:	12d6b03a 	or	r11,r2,r11
  807ebc:	00800044 	movi	r2,1
  807ec0:	198cb03a 	or	r6,r3,r6
  807ec4:	4888703a 	and	r4,r9,r2
  807ec8:	9818d07a 	srli	r12,r19,1
  807ecc:	001b883a 	mov	r13,zero
  807ed0:	03a00034 	movhi	r14,32768
  807ed4:	3013883a 	mov	r9,r6
  807ed8:	3815883a 	mov	r10,r7
  807edc:	4091883a 	add	r8,r8,r2
  807ee0:	20000226 	beq	r4,zero,807eec <__muldf3+0x284>
  807ee4:	5b64b03a 	or	r18,r11,r13
  807ee8:	63a6b03a 	or	r19,r12,r14
  807eec:	7abfed36 	bltu	r15,r10,807ea4 <__muldf3+0x23c>
  807ef0:	da001015 	stw	r8,64(sp)
  807ef4:	00840034 	movhi	r2,4096
  807ef8:	10bfffc4 	addi	r2,r2,-1
  807efc:	12801436 	bltu	r2,r10,807f50 <__muldf3+0x2e8>
  807f00:	da001017 	ldw	r8,64(sp)
  807f04:	101f883a 	mov	r15,r2
  807f08:	4a45883a 	add	r2,r9,r9
  807f0c:	124d803a 	cmpltu	r6,r2,r9
  807f10:	5287883a 	add	r3,r10,r10
  807f14:	9497883a 	add	r11,r18,r18
  807f18:	5c8f803a 	cmpltu	r7,r11,r18
  807f1c:	9cd9883a 	add	r12,r19,r19
  807f20:	01000044 	movi	r4,1
  807f24:	30cd883a 	add	r6,r6,r3
  807f28:	3b0f883a 	add	r7,r7,r12
  807f2c:	423fffc4 	addi	r8,r8,-1
  807f30:	1013883a 	mov	r9,r2
  807f34:	3015883a 	mov	r10,r6
  807f38:	111ab03a 	or	r13,r2,r4
  807f3c:	98003016 	blt	r19,zero,808000 <__muldf3+0x398>
  807f40:	5825883a 	mov	r18,r11
  807f44:	3827883a 	mov	r19,r7
  807f48:	7abfef2e 	bgeu	r15,r10,807f08 <__muldf3+0x2a0>
  807f4c:	da001015 	stw	r8,64(sp)
  807f50:	00803fc4 	movi	r2,255
  807f54:	488e703a 	and	r7,r9,r2
  807f58:	00802004 	movi	r2,128
  807f5c:	0007883a 	mov	r3,zero
  807f60:	0011883a 	mov	r8,zero
  807f64:	38801826 	beq	r7,r2,807fc8 <__muldf3+0x360>
  807f68:	008000c4 	movi	r2,3
  807f6c:	d9000e04 	addi	r4,sp,56
  807f70:	da801215 	stw	r10,72(sp)
  807f74:	d8800e15 	stw	r2,56(sp)
  807f78:	da401115 	stw	r9,68(sp)
  807f7c:	003f6a06 	br	807d28 <__muldf3+0xc0>
  807f80:	89802126 	beq	r17,r6,808008 <__muldf3+0x3a0>
  807f84:	0009883a 	mov	r4,zero
  807f88:	5105883a 	add	r2,r10,r4
  807f8c:	128d803a 	cmpltu	r6,r2,r10
  807f90:	5d07883a 	add	r3,r11,r20
  807f94:	30cd883a 	add	r6,r6,r3
  807f98:	0021883a 	mov	r16,zero
  807f9c:	0023883a 	mov	r17,zero
  807fa0:	1025883a 	mov	r18,r2
  807fa4:	3027883a 	mov	r19,r6
  807fa8:	32ff9e2e 	bgeu	r6,r11,807e24 <__muldf3+0x1bc>
  807fac:	00800044 	movi	r2,1
  807fb0:	8089883a 	add	r4,r16,r2
  807fb4:	240d803a 	cmpltu	r6,r4,r16
  807fb8:	344d883a 	add	r6,r6,r17
  807fbc:	2021883a 	mov	r16,r4
  807fc0:	3023883a 	mov	r17,r6
  807fc4:	003f9806 	br	807e28 <__muldf3+0x1c0>
  807fc8:	403fe71e 	bne	r8,zero,807f68 <__muldf3+0x300>
  807fcc:	01004004 	movi	r4,256
  807fd0:	4904703a 	and	r2,r9,r4
  807fd4:	10c4b03a 	or	r2,r2,r3
  807fd8:	103fe31e 	bne	r2,zero,807f68 <__muldf3+0x300>
  807fdc:	94c4b03a 	or	r2,r18,r19
  807fe0:	103fe126 	beq	r2,zero,807f68 <__muldf3+0x300>
  807fe4:	49c5883a 	add	r2,r9,r7
  807fe8:	1251803a 	cmpltu	r8,r2,r9
  807fec:	4291883a 	add	r8,r8,r10
  807ff0:	013fc004 	movi	r4,-256
  807ff4:	1112703a 	and	r9,r2,r4
  807ff8:	4015883a 	mov	r10,r8
  807ffc:	003fda06 	br	807f68 <__muldf3+0x300>
  808000:	6813883a 	mov	r9,r13
  808004:	003fce06 	br	807f40 <__muldf3+0x2d8>
  808008:	143f7c36 	bltu	r2,r16,807dfc <__muldf3+0x194>
  80800c:	003fdd06 	br	807f84 <__muldf3+0x31c>
  808010:	12bf852e 	bgeu	r2,r10,807e28 <__muldf3+0x1c0>
  808014:	003fe506 	br	807fac <__muldf3+0x344>
  808018:	00800084 	movi	r2,2
  80801c:	20bf351e 	bne	r4,r2,807cf4 <__muldf3+0x8c>
  808020:	010020b4 	movhi	r4,130
  808024:	21305304 	addi	r4,r4,-16052
  808028:	003f3f06 	br	807d28 <__muldf3+0xc0>

0080802c <__divdf3>:
  80802c:	deffed04 	addi	sp,sp,-76
  808030:	dcc01115 	stw	r19,68(sp)
  808034:	dcc00404 	addi	r19,sp,16
  808038:	2011883a 	mov	r8,r4
  80803c:	2813883a 	mov	r9,r5
  808040:	dc000e15 	stw	r16,56(sp)
  808044:	d809883a 	mov	r4,sp
  808048:	980b883a 	mov	r5,r19
  80804c:	dc000904 	addi	r16,sp,36
  808050:	dfc01215 	stw	ra,72(sp)
  808054:	da400115 	stw	r9,4(sp)
  808058:	d9c00315 	stw	r7,12(sp)
  80805c:	da000015 	stw	r8,0(sp)
  808060:	d9800215 	stw	r6,8(sp)
  808064:	dc801015 	stw	r18,64(sp)
  808068:	dc400f15 	stw	r17,60(sp)
  80806c:	0808ed40 	call	808ed4 <__unpack_d>
  808070:	d9000204 	addi	r4,sp,8
  808074:	800b883a 	mov	r5,r16
  808078:	0808ed40 	call	808ed4 <__unpack_d>
  80807c:	d9000417 	ldw	r4,16(sp)
  808080:	00800044 	movi	r2,1
  808084:	11000b2e 	bgeu	r2,r4,8080b4 <__divdf3+0x88>
  808088:	d9400917 	ldw	r5,36(sp)
  80808c:	1140762e 	bgeu	r2,r5,808268 <__divdf3+0x23c>
  808090:	d8800517 	ldw	r2,20(sp)
  808094:	d8c00a17 	ldw	r3,40(sp)
  808098:	01800104 	movi	r6,4
  80809c:	10c4f03a 	xor	r2,r2,r3
  8080a0:	d8800515 	stw	r2,20(sp)
  8080a4:	21800226 	beq	r4,r6,8080b0 <__divdf3+0x84>
  8080a8:	00800084 	movi	r2,2
  8080ac:	2080141e 	bne	r4,r2,808100 <__divdf3+0xd4>
  8080b0:	29000926 	beq	r5,r4,8080d8 <__divdf3+0xac>
  8080b4:	9809883a 	mov	r4,r19
  8080b8:	0808bc00 	call	808bc0 <__pack_d>
  8080bc:	dfc01217 	ldw	ra,72(sp)
  8080c0:	dcc01117 	ldw	r19,68(sp)
  8080c4:	dc801017 	ldw	r18,64(sp)
  8080c8:	dc400f17 	ldw	r17,60(sp)
  8080cc:	dc000e17 	ldw	r16,56(sp)
  8080d0:	dec01304 	addi	sp,sp,76
  8080d4:	f800283a 	ret
  8080d8:	010020b4 	movhi	r4,130
  8080dc:	21305304 	addi	r4,r4,-16052
  8080e0:	0808bc00 	call	808bc0 <__pack_d>
  8080e4:	dfc01217 	ldw	ra,72(sp)
  8080e8:	dcc01117 	ldw	r19,68(sp)
  8080ec:	dc801017 	ldw	r18,64(sp)
  8080f0:	dc400f17 	ldw	r17,60(sp)
  8080f4:	dc000e17 	ldw	r16,56(sp)
  8080f8:	dec01304 	addi	sp,sp,76
  8080fc:	f800283a 	ret
  808100:	29805b26 	beq	r5,r6,808270 <__divdf3+0x244>
  808104:	28802d26 	beq	r5,r2,8081bc <__divdf3+0x190>
  808108:	d8c00617 	ldw	r3,24(sp)
  80810c:	d8800b17 	ldw	r2,44(sp)
  808110:	d9c00817 	ldw	r7,32(sp)
  808114:	dc400d17 	ldw	r17,52(sp)
  808118:	188bc83a 	sub	r5,r3,r2
  80811c:	d9800717 	ldw	r6,28(sp)
  808120:	dc000c17 	ldw	r16,48(sp)
  808124:	d9400615 	stw	r5,24(sp)
  808128:	3c403836 	bltu	r7,r17,80820c <__divdf3+0x1e0>
  80812c:	89c03626 	beq	r17,r7,808208 <__divdf3+0x1dc>
  808130:	0015883a 	mov	r10,zero
  808134:	001d883a 	mov	r14,zero
  808138:	02c40034 	movhi	r11,4096
  80813c:	001f883a 	mov	r15,zero
  808140:	003f883a 	mov	ra,zero
  808144:	04800f44 	movi	r18,61
  808148:	00000f06 	br	808188 <__divdf3+0x15c>
  80814c:	601d883a 	mov	r14,r12
  808150:	681f883a 	mov	r15,r13
  808154:	400d883a 	mov	r6,r8
  808158:	100f883a 	mov	r7,r2
  80815c:	3191883a 	add	r8,r6,r6
  808160:	5808d07a 	srli	r4,r11,1
  808164:	4185803a 	cmpltu	r2,r8,r6
  808168:	39d3883a 	add	r9,r7,r7
  80816c:	28c6b03a 	or	r3,r5,r3
  808170:	1245883a 	add	r2,r2,r9
  808174:	1815883a 	mov	r10,r3
  808178:	2017883a 	mov	r11,r4
  80817c:	400d883a 	mov	r6,r8
  808180:	100f883a 	mov	r7,r2
  808184:	fc801726 	beq	ra,r18,8081e4 <__divdf3+0x1b8>
  808188:	580a97fa 	slli	r5,r11,31
  80818c:	5006d07a 	srli	r3,r10,1
  808190:	ffc00044 	addi	ra,ra,1
  808194:	3c7ff136 	bltu	r7,r17,80815c <__divdf3+0x130>
  808198:	3411c83a 	sub	r8,r6,r16
  80819c:	3205803a 	cmpltu	r2,r6,r8
  8081a0:	3c53c83a 	sub	r9,r7,r17
  8081a4:	7298b03a 	or	r12,r14,r10
  8081a8:	7adab03a 	or	r13,r15,r11
  8081ac:	4885c83a 	sub	r2,r9,r2
  8081b0:	89ffe61e 	bne	r17,r7,80814c <__divdf3+0x120>
  8081b4:	343fe936 	bltu	r6,r16,80815c <__divdf3+0x130>
  8081b8:	003fe406 	br	80814c <__divdf3+0x120>
  8081bc:	9809883a 	mov	r4,r19
  8081c0:	d9800415 	stw	r6,16(sp)
  8081c4:	0808bc00 	call	808bc0 <__pack_d>
  8081c8:	dfc01217 	ldw	ra,72(sp)
  8081cc:	dcc01117 	ldw	r19,68(sp)
  8081d0:	dc801017 	ldw	r18,64(sp)
  8081d4:	dc400f17 	ldw	r17,60(sp)
  8081d8:	dc000e17 	ldw	r16,56(sp)
  8081dc:	dec01304 	addi	sp,sp,76
  8081e0:	f800283a 	ret
  8081e4:	00803fc4 	movi	r2,255
  8081e8:	7090703a 	and	r8,r14,r2
  8081ec:	00802004 	movi	r2,128
  8081f0:	0007883a 	mov	r3,zero
  8081f4:	0013883a 	mov	r9,zero
  8081f8:	40800d26 	beq	r8,r2,808230 <__divdf3+0x204>
  8081fc:	dbc00815 	stw	r15,32(sp)
  808200:	db800715 	stw	r14,28(sp)
  808204:	003fab06 	br	8080b4 <__divdf3+0x88>
  808208:	343fc92e 	bgeu	r6,r16,808130 <__divdf3+0x104>
  80820c:	3185883a 	add	r2,r6,r6
  808210:	1189803a 	cmpltu	r4,r2,r6
  808214:	39c7883a 	add	r3,r7,r7
  808218:	20c9883a 	add	r4,r4,r3
  80821c:	297fffc4 	addi	r5,r5,-1
  808220:	100d883a 	mov	r6,r2
  808224:	200f883a 	mov	r7,r4
  808228:	d9400615 	stw	r5,24(sp)
  80822c:	003fc006 	br	808130 <__divdf3+0x104>
  808230:	483ff21e 	bne	r9,zero,8081fc <__divdf3+0x1d0>
  808234:	01004004 	movi	r4,256
  808238:	7104703a 	and	r2,r14,r4
  80823c:	10c4b03a 	or	r2,r2,r3
  808240:	103fee1e 	bne	r2,zero,8081fc <__divdf3+0x1d0>
  808244:	31c4b03a 	or	r2,r6,r7
  808248:	103fec26 	beq	r2,zero,8081fc <__divdf3+0x1d0>
  80824c:	7205883a 	add	r2,r14,r8
  808250:	1391803a 	cmpltu	r8,r2,r14
  808254:	43d1883a 	add	r8,r8,r15
  808258:	013fc004 	movi	r4,-256
  80825c:	111c703a 	and	r14,r2,r4
  808260:	401f883a 	mov	r15,r8
  808264:	003fe506 	br	8081fc <__divdf3+0x1d0>
  808268:	8009883a 	mov	r4,r16
  80826c:	003f9206 	br	8080b8 <__divdf3+0x8c>
  808270:	9809883a 	mov	r4,r19
  808274:	d8000715 	stw	zero,28(sp)
  808278:	d8000815 	stw	zero,32(sp)
  80827c:	d8000615 	stw	zero,24(sp)
  808280:	003f8d06 	br	8080b8 <__divdf3+0x8c>

00808284 <__eqdf2>:
  808284:	deffef04 	addi	sp,sp,-68
  808288:	dc400f15 	stw	r17,60(sp)
  80828c:	dc400404 	addi	r17,sp,16
  808290:	2005883a 	mov	r2,r4
  808294:	2807883a 	mov	r3,r5
  808298:	dc000e15 	stw	r16,56(sp)
  80829c:	d809883a 	mov	r4,sp
  8082a0:	880b883a 	mov	r5,r17
  8082a4:	dc000904 	addi	r16,sp,36
  8082a8:	d8c00115 	stw	r3,4(sp)
  8082ac:	d8800015 	stw	r2,0(sp)
  8082b0:	d9800215 	stw	r6,8(sp)
  8082b4:	dfc01015 	stw	ra,64(sp)
  8082b8:	d9c00315 	stw	r7,12(sp)
  8082bc:	0808ed40 	call	808ed4 <__unpack_d>
  8082c0:	d9000204 	addi	r4,sp,8
  8082c4:	800b883a 	mov	r5,r16
  8082c8:	0808ed40 	call	808ed4 <__unpack_d>
  8082cc:	d8800417 	ldw	r2,16(sp)
  8082d0:	00c00044 	movi	r3,1
  8082d4:	180d883a 	mov	r6,r3
  8082d8:	1880062e 	bgeu	r3,r2,8082f4 <__eqdf2+0x70>
  8082dc:	d8800917 	ldw	r2,36(sp)
  8082e0:	8809883a 	mov	r4,r17
  8082e4:	800b883a 	mov	r5,r16
  8082e8:	1880022e 	bgeu	r3,r2,8082f4 <__eqdf2+0x70>
  8082ec:	080900c0 	call	80900c <__fpcmp_parts_d>
  8082f0:	100d883a 	mov	r6,r2
  8082f4:	3005883a 	mov	r2,r6
  8082f8:	dfc01017 	ldw	ra,64(sp)
  8082fc:	dc400f17 	ldw	r17,60(sp)
  808300:	dc000e17 	ldw	r16,56(sp)
  808304:	dec01104 	addi	sp,sp,68
  808308:	f800283a 	ret

0080830c <__nedf2>:
  80830c:	deffef04 	addi	sp,sp,-68
  808310:	dc400f15 	stw	r17,60(sp)
  808314:	dc400404 	addi	r17,sp,16
  808318:	2005883a 	mov	r2,r4
  80831c:	2807883a 	mov	r3,r5
  808320:	dc000e15 	stw	r16,56(sp)
  808324:	d809883a 	mov	r4,sp
  808328:	880b883a 	mov	r5,r17
  80832c:	dc000904 	addi	r16,sp,36
  808330:	d8c00115 	stw	r3,4(sp)
  808334:	d8800015 	stw	r2,0(sp)
  808338:	d9800215 	stw	r6,8(sp)
  80833c:	dfc01015 	stw	ra,64(sp)
  808340:	d9c00315 	stw	r7,12(sp)
  808344:	0808ed40 	call	808ed4 <__unpack_d>
  808348:	d9000204 	addi	r4,sp,8
  80834c:	800b883a 	mov	r5,r16
  808350:	0808ed40 	call	808ed4 <__unpack_d>
  808354:	d8800417 	ldw	r2,16(sp)
  808358:	00c00044 	movi	r3,1
  80835c:	180d883a 	mov	r6,r3
  808360:	1880062e 	bgeu	r3,r2,80837c <__nedf2+0x70>
  808364:	d8800917 	ldw	r2,36(sp)
  808368:	8809883a 	mov	r4,r17
  80836c:	800b883a 	mov	r5,r16
  808370:	1880022e 	bgeu	r3,r2,80837c <__nedf2+0x70>
  808374:	080900c0 	call	80900c <__fpcmp_parts_d>
  808378:	100d883a 	mov	r6,r2
  80837c:	3005883a 	mov	r2,r6
  808380:	dfc01017 	ldw	ra,64(sp)
  808384:	dc400f17 	ldw	r17,60(sp)
  808388:	dc000e17 	ldw	r16,56(sp)
  80838c:	dec01104 	addi	sp,sp,68
  808390:	f800283a 	ret

00808394 <__gtdf2>:
  808394:	deffef04 	addi	sp,sp,-68
  808398:	dc400f15 	stw	r17,60(sp)
  80839c:	dc400404 	addi	r17,sp,16
  8083a0:	2005883a 	mov	r2,r4
  8083a4:	2807883a 	mov	r3,r5
  8083a8:	dc000e15 	stw	r16,56(sp)
  8083ac:	d809883a 	mov	r4,sp
  8083b0:	880b883a 	mov	r5,r17
  8083b4:	dc000904 	addi	r16,sp,36
  8083b8:	d8c00115 	stw	r3,4(sp)
  8083bc:	d8800015 	stw	r2,0(sp)
  8083c0:	d9800215 	stw	r6,8(sp)
  8083c4:	dfc01015 	stw	ra,64(sp)
  8083c8:	d9c00315 	stw	r7,12(sp)
  8083cc:	0808ed40 	call	808ed4 <__unpack_d>
  8083d0:	d9000204 	addi	r4,sp,8
  8083d4:	800b883a 	mov	r5,r16
  8083d8:	0808ed40 	call	808ed4 <__unpack_d>
  8083dc:	d8800417 	ldw	r2,16(sp)
  8083e0:	00c00044 	movi	r3,1
  8083e4:	01bfffc4 	movi	r6,-1
  8083e8:	1880062e 	bgeu	r3,r2,808404 <__gtdf2+0x70>
  8083ec:	d8800917 	ldw	r2,36(sp)
  8083f0:	8809883a 	mov	r4,r17
  8083f4:	800b883a 	mov	r5,r16
  8083f8:	1880022e 	bgeu	r3,r2,808404 <__gtdf2+0x70>
  8083fc:	080900c0 	call	80900c <__fpcmp_parts_d>
  808400:	100d883a 	mov	r6,r2
  808404:	3005883a 	mov	r2,r6
  808408:	dfc01017 	ldw	ra,64(sp)
  80840c:	dc400f17 	ldw	r17,60(sp)
  808410:	dc000e17 	ldw	r16,56(sp)
  808414:	dec01104 	addi	sp,sp,68
  808418:	f800283a 	ret

0080841c <__ltdf2>:
  80841c:	deffef04 	addi	sp,sp,-68
  808420:	dc400f15 	stw	r17,60(sp)
  808424:	dc400404 	addi	r17,sp,16
  808428:	2005883a 	mov	r2,r4
  80842c:	2807883a 	mov	r3,r5
  808430:	dc000e15 	stw	r16,56(sp)
  808434:	d809883a 	mov	r4,sp
  808438:	880b883a 	mov	r5,r17
  80843c:	dc000904 	addi	r16,sp,36
  808440:	d8c00115 	stw	r3,4(sp)
  808444:	d8800015 	stw	r2,0(sp)
  808448:	d9800215 	stw	r6,8(sp)
  80844c:	dfc01015 	stw	ra,64(sp)
  808450:	d9c00315 	stw	r7,12(sp)
  808454:	0808ed40 	call	808ed4 <__unpack_d>
  808458:	d9000204 	addi	r4,sp,8
  80845c:	800b883a 	mov	r5,r16
  808460:	0808ed40 	call	808ed4 <__unpack_d>
  808464:	d8800417 	ldw	r2,16(sp)
  808468:	00c00044 	movi	r3,1
  80846c:	180d883a 	mov	r6,r3
  808470:	1880062e 	bgeu	r3,r2,80848c <__ltdf2+0x70>
  808474:	d8800917 	ldw	r2,36(sp)
  808478:	8809883a 	mov	r4,r17
  80847c:	800b883a 	mov	r5,r16
  808480:	1880022e 	bgeu	r3,r2,80848c <__ltdf2+0x70>
  808484:	080900c0 	call	80900c <__fpcmp_parts_d>
  808488:	100d883a 	mov	r6,r2
  80848c:	3005883a 	mov	r2,r6
  808490:	dfc01017 	ldw	ra,64(sp)
  808494:	dc400f17 	ldw	r17,60(sp)
  808498:	dc000e17 	ldw	r16,56(sp)
  80849c:	dec01104 	addi	sp,sp,68
  8084a0:	f800283a 	ret

008084a4 <__ledf2>:
  8084a4:	deffef04 	addi	sp,sp,-68
  8084a8:	dc400f15 	stw	r17,60(sp)
  8084ac:	dc400404 	addi	r17,sp,16
  8084b0:	2005883a 	mov	r2,r4
  8084b4:	2807883a 	mov	r3,r5
  8084b8:	dc000e15 	stw	r16,56(sp)
  8084bc:	d809883a 	mov	r4,sp
  8084c0:	880b883a 	mov	r5,r17
  8084c4:	dc000904 	addi	r16,sp,36
  8084c8:	d8c00115 	stw	r3,4(sp)
  8084cc:	d8800015 	stw	r2,0(sp)
  8084d0:	d9800215 	stw	r6,8(sp)
  8084d4:	dfc01015 	stw	ra,64(sp)
  8084d8:	d9c00315 	stw	r7,12(sp)
  8084dc:	0808ed40 	call	808ed4 <__unpack_d>
  8084e0:	d9000204 	addi	r4,sp,8
  8084e4:	800b883a 	mov	r5,r16
  8084e8:	0808ed40 	call	808ed4 <__unpack_d>
  8084ec:	d8800417 	ldw	r2,16(sp)
  8084f0:	00c00044 	movi	r3,1
  8084f4:	180d883a 	mov	r6,r3
  8084f8:	1880062e 	bgeu	r3,r2,808514 <__ledf2+0x70>
  8084fc:	d8800917 	ldw	r2,36(sp)
  808500:	8809883a 	mov	r4,r17
  808504:	800b883a 	mov	r5,r16
  808508:	1880022e 	bgeu	r3,r2,808514 <__ledf2+0x70>
  80850c:	080900c0 	call	80900c <__fpcmp_parts_d>
  808510:	100d883a 	mov	r6,r2
  808514:	3005883a 	mov	r2,r6
  808518:	dfc01017 	ldw	ra,64(sp)
  80851c:	dc400f17 	ldw	r17,60(sp)
  808520:	dc000e17 	ldw	r16,56(sp)
  808524:	dec01104 	addi	sp,sp,68
  808528:	f800283a 	ret

0080852c <__floatsidf>:
  80852c:	2006d7fa 	srli	r3,r4,31
  808530:	defff604 	addi	sp,sp,-40
  808534:	008000c4 	movi	r2,3
  808538:	dfc00915 	stw	ra,36(sp)
  80853c:	dcc00815 	stw	r19,32(sp)
  808540:	dc800715 	stw	r18,28(sp)
  808544:	dc400615 	stw	r17,24(sp)
  808548:	dc000515 	stw	r16,20(sp)
  80854c:	d8800015 	stw	r2,0(sp)
  808550:	d8c00115 	stw	r3,4(sp)
  808554:	20000f1e 	bne	r4,zero,808594 <__floatsidf+0x68>
  808558:	00800084 	movi	r2,2
  80855c:	d8800015 	stw	r2,0(sp)
  808560:	d809883a 	mov	r4,sp
  808564:	0808bc00 	call	808bc0 <__pack_d>
  808568:	1009883a 	mov	r4,r2
  80856c:	180b883a 	mov	r5,r3
  808570:	2005883a 	mov	r2,r4
  808574:	2807883a 	mov	r3,r5
  808578:	dfc00917 	ldw	ra,36(sp)
  80857c:	dcc00817 	ldw	r19,32(sp)
  808580:	dc800717 	ldw	r18,28(sp)
  808584:	dc400617 	ldw	r17,24(sp)
  808588:	dc000517 	ldw	r16,20(sp)
  80858c:	dec00a04 	addi	sp,sp,40
  808590:	f800283a 	ret
  808594:	00800f04 	movi	r2,60
  808598:	1807003a 	cmpeq	r3,r3,zero
  80859c:	d8800215 	stw	r2,8(sp)
  8085a0:	18001126 	beq	r3,zero,8085e8 <__floatsidf+0xbc>
  8085a4:	0027883a 	mov	r19,zero
  8085a8:	2025883a 	mov	r18,r4
  8085ac:	d9000315 	stw	r4,12(sp)
  8085b0:	dcc00415 	stw	r19,16(sp)
  8085b4:	08089180 	call	808918 <__clzsi2>
  8085b8:	11000744 	addi	r4,r2,29
  8085bc:	013fe80e 	bge	zero,r4,808560 <__floatsidf+0x34>
  8085c0:	10bfff44 	addi	r2,r2,-3
  8085c4:	10000c16 	blt	r2,zero,8085f8 <__floatsidf+0xcc>
  8085c8:	90a2983a 	sll	r17,r18,r2
  8085cc:	0021883a 	mov	r16,zero
  8085d0:	d8800217 	ldw	r2,8(sp)
  8085d4:	dc400415 	stw	r17,16(sp)
  8085d8:	dc000315 	stw	r16,12(sp)
  8085dc:	1105c83a 	sub	r2,r2,r4
  8085e0:	d8800215 	stw	r2,8(sp)
  8085e4:	003fde06 	br	808560 <__floatsidf+0x34>
  8085e8:	00a00034 	movhi	r2,32768
  8085ec:	20800a26 	beq	r4,r2,808618 <__floatsidf+0xec>
  8085f0:	0109c83a 	sub	r4,zero,r4
  8085f4:	003feb06 	br	8085a4 <__floatsidf+0x78>
  8085f8:	9006d07a 	srli	r3,r18,1
  8085fc:	008007c4 	movi	r2,31
  808600:	1105c83a 	sub	r2,r2,r4
  808604:	1886d83a 	srl	r3,r3,r2
  808608:	9922983a 	sll	r17,r19,r4
  80860c:	9120983a 	sll	r16,r18,r4
  808610:	1c62b03a 	or	r17,r3,r17
  808614:	003fee06 	br	8085d0 <__floatsidf+0xa4>
  808618:	0009883a 	mov	r4,zero
  80861c:	01707834 	movhi	r5,49632
  808620:	003fd306 	br	808570 <__floatsidf+0x44>

00808624 <__fixdfsi>:
  808624:	defff804 	addi	sp,sp,-32
  808628:	2005883a 	mov	r2,r4
  80862c:	2807883a 	mov	r3,r5
  808630:	d809883a 	mov	r4,sp
  808634:	d9400204 	addi	r5,sp,8
  808638:	d8c00115 	stw	r3,4(sp)
  80863c:	d8800015 	stw	r2,0(sp)
  808640:	dfc00715 	stw	ra,28(sp)
  808644:	0808ed40 	call	808ed4 <__unpack_d>
  808648:	d8c00217 	ldw	r3,8(sp)
  80864c:	00800084 	movi	r2,2
  808650:	1880051e 	bne	r3,r2,808668 <__fixdfsi+0x44>
  808654:	0007883a 	mov	r3,zero
  808658:	1805883a 	mov	r2,r3
  80865c:	dfc00717 	ldw	ra,28(sp)
  808660:	dec00804 	addi	sp,sp,32
  808664:	f800283a 	ret
  808668:	00800044 	movi	r2,1
  80866c:	10fff92e 	bgeu	r2,r3,808654 <__fixdfsi+0x30>
  808670:	00800104 	movi	r2,4
  808674:	18800426 	beq	r3,r2,808688 <__fixdfsi+0x64>
  808678:	d8c00417 	ldw	r3,16(sp)
  80867c:	183ff516 	blt	r3,zero,808654 <__fixdfsi+0x30>
  808680:	00800784 	movi	r2,30
  808684:	10c0080e 	bge	r2,r3,8086a8 <__fixdfsi+0x84>
  808688:	d8800317 	ldw	r2,12(sp)
  80868c:	1000121e 	bne	r2,zero,8086d8 <__fixdfsi+0xb4>
  808690:	00e00034 	movhi	r3,32768
  808694:	18ffffc4 	addi	r3,r3,-1
  808698:	1805883a 	mov	r2,r3
  80869c:	dfc00717 	ldw	ra,28(sp)
  8086a0:	dec00804 	addi	sp,sp,32
  8086a4:	f800283a 	ret
  8086a8:	00800f04 	movi	r2,60
  8086ac:	10d1c83a 	sub	r8,r2,r3
  8086b0:	40bff804 	addi	r2,r8,-32
  8086b4:	d9800517 	ldw	r6,20(sp)
  8086b8:	d9c00617 	ldw	r7,24(sp)
  8086bc:	10000816 	blt	r2,zero,8086e0 <__fixdfsi+0xbc>
  8086c0:	3888d83a 	srl	r4,r7,r2
  8086c4:	d8800317 	ldw	r2,12(sp)
  8086c8:	2007883a 	mov	r3,r4
  8086cc:	103fe226 	beq	r2,zero,808658 <__fixdfsi+0x34>
  8086d0:	0107c83a 	sub	r3,zero,r4
  8086d4:	003fe006 	br	808658 <__fixdfsi+0x34>
  8086d8:	00e00034 	movhi	r3,32768
  8086dc:	003fde06 	br	808658 <__fixdfsi+0x34>
  8086e0:	39c7883a 	add	r3,r7,r7
  8086e4:	008007c4 	movi	r2,31
  8086e8:	1205c83a 	sub	r2,r2,r8
  8086ec:	1886983a 	sll	r3,r3,r2
  8086f0:	3208d83a 	srl	r4,r6,r8
  8086f4:	1908b03a 	or	r4,r3,r4
  8086f8:	003ff206 	br	8086c4 <__fixdfsi+0xa0>

008086fc <__make_dp>:
  8086fc:	defff904 	addi	sp,sp,-28
  808700:	d8c00717 	ldw	r3,28(sp)
  808704:	d9000015 	stw	r4,0(sp)
  808708:	d809883a 	mov	r4,sp
  80870c:	dfc00515 	stw	ra,20(sp)
  808710:	d9c00615 	stw	r7,24(sp)
  808714:	d9400115 	stw	r5,4(sp)
  808718:	d9800215 	stw	r6,8(sp)
  80871c:	d8c00415 	stw	r3,16(sp)
  808720:	d9c00315 	stw	r7,12(sp)
  808724:	0808bc00 	call	808bc0 <__pack_d>
  808728:	dfc00517 	ldw	ra,20(sp)
  80872c:	dec00704 	addi	sp,sp,28
  808730:	f800283a 	ret

00808734 <udivmodsi4>:
  808734:	29001b2e 	bgeu	r5,r4,8087a4 <udivmodsi4+0x70>
  808738:	28001a16 	blt	r5,zero,8087a4 <udivmodsi4+0x70>
  80873c:	00800044 	movi	r2,1
  808740:	0007883a 	mov	r3,zero
  808744:	01c007c4 	movi	r7,31
  808748:	00000306 	br	808758 <udivmodsi4+0x24>
  80874c:	19c01326 	beq	r3,r7,80879c <udivmodsi4+0x68>
  808750:	18c00044 	addi	r3,r3,1
  808754:	28000416 	blt	r5,zero,808768 <udivmodsi4+0x34>
  808758:	294b883a 	add	r5,r5,r5
  80875c:	1085883a 	add	r2,r2,r2
  808760:	293ffa36 	bltu	r5,r4,80874c <udivmodsi4+0x18>
  808764:	10000d26 	beq	r2,zero,80879c <udivmodsi4+0x68>
  808768:	0007883a 	mov	r3,zero
  80876c:	21400236 	bltu	r4,r5,808778 <udivmodsi4+0x44>
  808770:	2149c83a 	sub	r4,r4,r5
  808774:	1886b03a 	or	r3,r3,r2
  808778:	1004d07a 	srli	r2,r2,1
  80877c:	280ad07a 	srli	r5,r5,1
  808780:	103ffa1e 	bne	r2,zero,80876c <udivmodsi4+0x38>
  808784:	30000226 	beq	r6,zero,808790 <udivmodsi4+0x5c>
  808788:	2005883a 	mov	r2,r4
  80878c:	f800283a 	ret
  808790:	1809883a 	mov	r4,r3
  808794:	2005883a 	mov	r2,r4
  808798:	f800283a 	ret
  80879c:	0007883a 	mov	r3,zero
  8087a0:	003ff806 	br	808784 <udivmodsi4+0x50>
  8087a4:	00800044 	movi	r2,1
  8087a8:	0007883a 	mov	r3,zero
  8087ac:	003fef06 	br	80876c <udivmodsi4+0x38>

008087b0 <__divsi3>:
  8087b0:	defffe04 	addi	sp,sp,-8
  8087b4:	dc000015 	stw	r16,0(sp)
  8087b8:	dfc00115 	stw	ra,4(sp)
  8087bc:	0021883a 	mov	r16,zero
  8087c0:	20000c16 	blt	r4,zero,8087f4 <__divsi3+0x44>
  8087c4:	000d883a 	mov	r6,zero
  8087c8:	28000e16 	blt	r5,zero,808804 <__divsi3+0x54>
  8087cc:	08087340 	call	808734 <udivmodsi4>
  8087d0:	1007883a 	mov	r3,r2
  8087d4:	8005003a 	cmpeq	r2,r16,zero
  8087d8:	1000011e 	bne	r2,zero,8087e0 <__divsi3+0x30>
  8087dc:	00c7c83a 	sub	r3,zero,r3
  8087e0:	1805883a 	mov	r2,r3
  8087e4:	dfc00117 	ldw	ra,4(sp)
  8087e8:	dc000017 	ldw	r16,0(sp)
  8087ec:	dec00204 	addi	sp,sp,8
  8087f0:	f800283a 	ret
  8087f4:	0109c83a 	sub	r4,zero,r4
  8087f8:	04000044 	movi	r16,1
  8087fc:	000d883a 	mov	r6,zero
  808800:	283ff20e 	bge	r5,zero,8087cc <__divsi3+0x1c>
  808804:	014bc83a 	sub	r5,zero,r5
  808808:	8021003a 	cmpeq	r16,r16,zero
  80880c:	003fef06 	br	8087cc <__divsi3+0x1c>

00808810 <__modsi3>:
  808810:	deffff04 	addi	sp,sp,-4
  808814:	dfc00015 	stw	ra,0(sp)
  808818:	01800044 	movi	r6,1
  80881c:	2807883a 	mov	r3,r5
  808820:	20000416 	blt	r4,zero,808834 <__modsi3+0x24>
  808824:	28000c16 	blt	r5,zero,808858 <__modsi3+0x48>
  808828:	dfc00017 	ldw	ra,0(sp)
  80882c:	dec00104 	addi	sp,sp,4
  808830:	08087341 	jmpi	808734 <udivmodsi4>
  808834:	0109c83a 	sub	r4,zero,r4
  808838:	28000b16 	blt	r5,zero,808868 <__modsi3+0x58>
  80883c:	180b883a 	mov	r5,r3
  808840:	01800044 	movi	r6,1
  808844:	08087340 	call	808734 <udivmodsi4>
  808848:	0085c83a 	sub	r2,zero,r2
  80884c:	dfc00017 	ldw	ra,0(sp)
  808850:	dec00104 	addi	sp,sp,4
  808854:	f800283a 	ret
  808858:	014bc83a 	sub	r5,zero,r5
  80885c:	dfc00017 	ldw	ra,0(sp)
  808860:	dec00104 	addi	sp,sp,4
  808864:	08087341 	jmpi	808734 <udivmodsi4>
  808868:	0147c83a 	sub	r3,zero,r5
  80886c:	003ff306 	br	80883c <__modsi3+0x2c>

00808870 <__udivsi3>:
  808870:	000d883a 	mov	r6,zero
  808874:	08087341 	jmpi	808734 <udivmodsi4>

00808878 <__umodsi3>:
  808878:	01800044 	movi	r6,1
  80887c:	08087341 	jmpi	808734 <udivmodsi4>

00808880 <__muldi3>:
  808880:	2011883a 	mov	r8,r4
  808884:	427fffcc 	andi	r9,r8,65535
  808888:	4018d43a 	srli	r12,r8,16
  80888c:	32bfffcc 	andi	r10,r6,65535
  808890:	3016d43a 	srli	r11,r6,16
  808894:	4a85383a 	mul	r2,r9,r10
  808898:	6295383a 	mul	r10,r12,r10
  80889c:	4ad3383a 	mul	r9,r9,r11
  8088a0:	113fffcc 	andi	r4,r2,65535
  8088a4:	1004d43a 	srli	r2,r2,16
  8088a8:	4a93883a 	add	r9,r9,r10
  8088ac:	3807883a 	mov	r3,r7
  8088b0:	1245883a 	add	r2,r2,r9
  8088b4:	280f883a 	mov	r7,r5
  8088b8:	180b883a 	mov	r5,r3
  8088bc:	1006943a 	slli	r3,r2,16
  8088c0:	defffd04 	addi	sp,sp,-12
  8088c4:	dc800215 	stw	r18,8(sp)
  8088c8:	1907883a 	add	r3,r3,r4
  8088cc:	dc400115 	stw	r17,4(sp)
  8088d0:	dc000015 	stw	r16,0(sp)
  8088d4:	4165383a 	mul	r18,r8,r5
  8088d8:	31e3383a 	mul	r17,r6,r7
  8088dc:	1012d43a 	srli	r9,r2,16
  8088e0:	62d9383a 	mul	r12,r12,r11
  8088e4:	181f883a 	mov	r15,r3
  8088e8:	1280022e 	bgeu	r2,r10,8088f4 <__muldi3+0x74>
  8088ec:	00800074 	movhi	r2,1
  8088f0:	6099883a 	add	r12,r12,r2
  8088f4:	624d883a 	add	r6,r12,r9
  8088f8:	9187883a 	add	r3,r18,r6
  8088fc:	88c7883a 	add	r3,r17,r3
  808900:	7805883a 	mov	r2,r15
  808904:	dc800217 	ldw	r18,8(sp)
  808908:	dc400117 	ldw	r17,4(sp)
  80890c:	dc000017 	ldw	r16,0(sp)
  808910:	dec00304 	addi	sp,sp,12
  808914:	f800283a 	ret

00808918 <__clzsi2>:
  808918:	00bfffd4 	movui	r2,65535
  80891c:	11000e36 	bltu	r2,r4,808958 <__clzsi2+0x40>
  808920:	00803fc4 	movi	r2,255
  808924:	01400204 	movi	r5,8
  808928:	0007883a 	mov	r3,zero
  80892c:	11001036 	bltu	r2,r4,808970 <__clzsi2+0x58>
  808930:	000b883a 	mov	r5,zero
  808934:	20c6d83a 	srl	r3,r4,r3
  808938:	008020b4 	movhi	r2,130
  80893c:	10b05804 	addi	r2,r2,-16032
  808940:	1887883a 	add	r3,r3,r2
  808944:	18800003 	ldbu	r2,0(r3)
  808948:	00c00804 	movi	r3,32
  80894c:	2885883a 	add	r2,r5,r2
  808950:	1885c83a 	sub	r2,r3,r2
  808954:	f800283a 	ret
  808958:	01400404 	movi	r5,16
  80895c:	00804034 	movhi	r2,256
  808960:	10bfffc4 	addi	r2,r2,-1
  808964:	2807883a 	mov	r3,r5
  808968:	113ff22e 	bgeu	r2,r4,808934 <__clzsi2+0x1c>
  80896c:	01400604 	movi	r5,24
  808970:	2807883a 	mov	r3,r5
  808974:	20c6d83a 	srl	r3,r4,r3
  808978:	008020b4 	movhi	r2,130
  80897c:	10b05804 	addi	r2,r2,-16032
  808980:	1887883a 	add	r3,r3,r2
  808984:	18800003 	ldbu	r2,0(r3)
  808988:	00c00804 	movi	r3,32
  80898c:	2885883a 	add	r2,r5,r2
  808990:	1885c83a 	sub	r2,r3,r2
  808994:	f800283a 	ret

00808998 <__pack_f>:
  808998:	20c00017 	ldw	r3,0(r4)
  80899c:	01c00044 	movi	r7,1
  8089a0:	21800317 	ldw	r6,12(r4)
  8089a4:	21400117 	ldw	r5,4(r4)
  8089a8:	38c02d2e 	bgeu	r7,r3,808a60 <__pack_f+0xc8>
  8089ac:	00800104 	movi	r2,4
  8089b0:	18802826 	beq	r3,r2,808a54 <__pack_f+0xbc>
  8089b4:	00800084 	movi	r2,2
  8089b8:	18800126 	beq	r3,r2,8089c0 <__pack_f+0x28>
  8089bc:	3000101e 	bne	r6,zero,808a00 <__pack_f+0x68>
  8089c0:	000d883a 	mov	r6,zero
  8089c4:	0007883a 	mov	r3,zero
  8089c8:	19003fcc 	andi	r4,r3,255
  8089cc:	200895fa 	slli	r4,r4,23
  8089d0:	00c02034 	movhi	r3,128
  8089d4:	18ffffc4 	addi	r3,r3,-1
  8089d8:	30c6703a 	and	r3,r6,r3
  8089dc:	10a0002c 	andhi	r2,r2,32768
  8089e0:	10c4b03a 	or	r2,r2,r3
  8089e4:	280a97fa 	slli	r5,r5,31
  8089e8:	1104b03a 	or	r2,r2,r4
  8089ec:	00e00034 	movhi	r3,32768
  8089f0:	18ffffc4 	addi	r3,r3,-1
  8089f4:	10c4703a 	and	r2,r2,r3
  8089f8:	1144b03a 	or	r2,r2,r5
  8089fc:	f800283a 	ret
  808a00:	21000217 	ldw	r4,8(r4)
  808a04:	00bfe084 	movi	r2,-126
  808a08:	20801b16 	blt	r4,r2,808a78 <__pack_f+0xe0>
  808a0c:	00801fc4 	movi	r2,127
  808a10:	11001016 	blt	r2,r4,808a54 <__pack_f+0xbc>
  808a14:	308e703a 	and	r7,r6,r2
  808a18:	2087883a 	add	r3,r4,r2
  808a1c:	00801004 	movi	r2,64
  808a20:	38800526 	beq	r7,r2,808a38 <__pack_f+0xa0>
  808a24:	31800fc4 	addi	r6,r6,63
  808a28:	30000716 	blt	r6,zero,808a48 <__pack_f+0xb0>
  808a2c:	300490ba 	slli	r2,r6,2
  808a30:	100cd27a 	srli	r6,r2,9
  808a34:	003fe406 	br	8089c8 <__pack_f+0x30>
  808a38:	3080200c 	andi	r2,r6,128
  808a3c:	103ffa26 	beq	r2,zero,808a28 <__pack_f+0x90>
  808a40:	31cd883a 	add	r6,r6,r7
  808a44:	003ff806 	br	808a28 <__pack_f+0x90>
  808a48:	300cd07a 	srli	r6,r6,1
  808a4c:	18c00044 	addi	r3,r3,1
  808a50:	003ff606 	br	808a2c <__pack_f+0x94>
  808a54:	000d883a 	mov	r6,zero
  808a58:	00ffffc4 	movi	r3,-1
  808a5c:	003fda06 	br	8089c8 <__pack_f+0x30>
  808a60:	31800434 	orhi	r6,r6,16
  808a64:	00802034 	movhi	r2,128
  808a68:	10bfffc4 	addi	r2,r2,-1
  808a6c:	308c703a 	and	r6,r6,r2
  808a70:	00ffffc4 	movi	r3,-1
  808a74:	003fd406 	br	8089c8 <__pack_f+0x30>
  808a78:	1109c83a 	sub	r4,r2,r4
  808a7c:	00800644 	movi	r2,25
  808a80:	11001216 	blt	r2,r4,808acc <__pack_f+0x134>
  808a84:	3904983a 	sll	r2,r7,r4
  808a88:	3106d83a 	srl	r3,r6,r4
  808a8c:	10bfffc4 	addi	r2,r2,-1
  808a90:	3084703a 	and	r2,r6,r2
  808a94:	1004c03a 	cmpne	r2,r2,zero
  808a98:	1886b03a 	or	r3,r3,r2
  808a9c:	19001fcc 	andi	r4,r3,127
  808aa0:	00801004 	movi	r2,64
  808aa4:	20800c26 	beq	r4,r2,808ad8 <__pack_f+0x140>
  808aa8:	18c00fc4 	addi	r3,r3,63
  808aac:	00900034 	movhi	r2,16384
  808ab0:	10bfffc4 	addi	r2,r2,-1
  808ab4:	180cd1fa 	srli	r6,r3,7
  808ab8:	10c7803a 	cmpltu	r3,r2,r3
  808abc:	00802034 	movhi	r2,128
  808ac0:	10bfffc4 	addi	r2,r2,-1
  808ac4:	308c703a 	and	r6,r6,r2
  808ac8:	003fbf06 	br	8089c8 <__pack_f+0x30>
  808acc:	0007883a 	mov	r3,zero
  808ad0:	000d883a 	mov	r6,zero
  808ad4:	003ff906 	br	808abc <__pack_f+0x124>
  808ad8:	1880200c 	andi	r2,r3,128
  808adc:	10000126 	beq	r2,zero,808ae4 <__pack_f+0x14c>
  808ae0:	1907883a 	add	r3,r3,r4
  808ae4:	180cd1fa 	srli	r6,r3,7
  808ae8:	00900034 	movhi	r2,16384
  808aec:	10bfffc4 	addi	r2,r2,-1
  808af0:	10c7803a 	cmpltu	r3,r2,r3
  808af4:	003ff106 	br	808abc <__pack_f+0x124>

00808af8 <__unpack_f>:
  808af8:	21800017 	ldw	r6,0(r4)
  808afc:	00c02034 	movhi	r3,128
  808b00:	18ffffc4 	addi	r3,r3,-1
  808b04:	3004d5fa 	srli	r2,r6,23
  808b08:	3008d7fa 	srli	r4,r6,31
  808b0c:	30ce703a 	and	r7,r6,r3
  808b10:	10c03fcc 	andi	r3,r2,255
  808b14:	29000115 	stw	r4,4(r5)
  808b18:	1800131e 	bne	r3,zero,808b68 <__unpack_f+0x70>
  808b1c:	38000f26 	beq	r7,zero,808b5c <__unpack_f+0x64>
  808b20:	380691fa 	slli	r3,r7,7
  808b24:	01bfe084 	movi	r6,-126
  808b28:	008000c4 	movi	r2,3
  808b2c:	01100034 	movhi	r4,16384
  808b30:	213fffc4 	addi	r4,r4,-1
  808b34:	28800015 	stw	r2,0(r5)
  808b38:	29800215 	stw	r6,8(r5)
  808b3c:	20c00536 	bltu	r4,r3,808b54 <__unpack_f+0x5c>
  808b40:	3005883a 	mov	r2,r6
  808b44:	18c7883a 	add	r3,r3,r3
  808b48:	10bfffc4 	addi	r2,r2,-1
  808b4c:	20fffd2e 	bgeu	r4,r3,808b44 <__unpack_f+0x4c>
  808b50:	28800215 	stw	r2,8(r5)
  808b54:	28c00315 	stw	r3,12(r5)
  808b58:	f800283a 	ret
  808b5c:	00800084 	movi	r2,2
  808b60:	28800015 	stw	r2,0(r5)
  808b64:	f800283a 	ret
  808b68:	00803fc4 	movi	r2,255
  808b6c:	18800826 	beq	r3,r2,808b90 <__unpack_f+0x98>
  808b70:	380491fa 	slli	r2,r7,7
  808b74:	18ffe044 	addi	r3,r3,-127
  808b78:	28c00215 	stw	r3,8(r5)
  808b7c:	10900034 	orhi	r2,r2,16384
  808b80:	28800315 	stw	r2,12(r5)
  808b84:	008000c4 	movi	r2,3
  808b88:	28800015 	stw	r2,0(r5)
  808b8c:	f800283a 	ret
  808b90:	3800031e 	bne	r7,zero,808ba0 <__unpack_f+0xa8>
  808b94:	00800104 	movi	r2,4
  808b98:	28800015 	stw	r2,0(r5)
  808b9c:	f800283a 	ret
  808ba0:	3080042c 	andhi	r2,r6,16
  808ba4:	10000426 	beq	r2,zero,808bb8 <__unpack_f+0xc0>
  808ba8:	00800044 	movi	r2,1
  808bac:	28800015 	stw	r2,0(r5)
  808bb0:	29c00315 	stw	r7,12(r5)
  808bb4:	f800283a 	ret
  808bb8:	28000015 	stw	zero,0(r5)
  808bbc:	003ffc06 	br	808bb0 <__unpack_f+0xb8>

00808bc0 <__pack_d>:
  808bc0:	20c00017 	ldw	r3,0(r4)
  808bc4:	defffd04 	addi	sp,sp,-12
  808bc8:	dc000015 	stw	r16,0(sp)
  808bcc:	dc800215 	stw	r18,8(sp)
  808bd0:	dc400115 	stw	r17,4(sp)
  808bd4:	00800044 	movi	r2,1
  808bd8:	22000317 	ldw	r8,12(r4)
  808bdc:	001f883a 	mov	r15,zero
  808be0:	22400417 	ldw	r9,16(r4)
  808be4:	24000117 	ldw	r16,4(r4)
  808be8:	10c0552e 	bgeu	r2,r3,808d40 <__pack_d+0x180>
  808bec:	00800104 	movi	r2,4
  808bf0:	18804f26 	beq	r3,r2,808d30 <__pack_d+0x170>
  808bf4:	00800084 	movi	r2,2
  808bf8:	18800226 	beq	r3,r2,808c04 <__pack_d+0x44>
  808bfc:	4244b03a 	or	r2,r8,r9
  808c00:	10001a1e 	bne	r2,zero,808c6c <__pack_d+0xac>
  808c04:	000d883a 	mov	r6,zero
  808c08:	000f883a 	mov	r7,zero
  808c0c:	0011883a 	mov	r8,zero
  808c10:	00800434 	movhi	r2,16
  808c14:	10bfffc4 	addi	r2,r2,-1
  808c18:	301d883a 	mov	r14,r6
  808c1c:	3884703a 	and	r2,r7,r2
  808c20:	400a953a 	slli	r5,r8,20
  808c24:	79bffc2c 	andhi	r6,r15,65520
  808c28:	308cb03a 	or	r6,r6,r2
  808c2c:	00e00434 	movhi	r3,32784
  808c30:	18ffffc4 	addi	r3,r3,-1
  808c34:	800497fa 	slli	r2,r16,31
  808c38:	30c6703a 	and	r3,r6,r3
  808c3c:	1946b03a 	or	r3,r3,r5
  808c40:	01600034 	movhi	r5,32768
  808c44:	297fffc4 	addi	r5,r5,-1
  808c48:	194a703a 	and	r5,r3,r5
  808c4c:	288ab03a 	or	r5,r5,r2
  808c50:	2807883a 	mov	r3,r5
  808c54:	7005883a 	mov	r2,r14
  808c58:	dc800217 	ldw	r18,8(sp)
  808c5c:	dc400117 	ldw	r17,4(sp)
  808c60:	dc000017 	ldw	r16,0(sp)
  808c64:	dec00304 	addi	sp,sp,12
  808c68:	f800283a 	ret
  808c6c:	21000217 	ldw	r4,8(r4)
  808c70:	00bf0084 	movi	r2,-1022
  808c74:	20803f16 	blt	r4,r2,808d74 <__pack_d+0x1b4>
  808c78:	0080ffc4 	movi	r2,1023
  808c7c:	11002c16 	blt	r2,r4,808d30 <__pack_d+0x170>
  808c80:	00803fc4 	movi	r2,255
  808c84:	408c703a 	and	r6,r8,r2
  808c88:	00802004 	movi	r2,128
  808c8c:	0007883a 	mov	r3,zero
  808c90:	000f883a 	mov	r7,zero
  808c94:	2280ffc4 	addi	r10,r4,1023
  808c98:	30801e26 	beq	r6,r2,808d14 <__pack_d+0x154>
  808c9c:	00801fc4 	movi	r2,127
  808ca0:	4089883a 	add	r4,r8,r2
  808ca4:	220d803a 	cmpltu	r6,r4,r8
  808ca8:	324d883a 	add	r6,r6,r9
  808cac:	2011883a 	mov	r8,r4
  808cb0:	3013883a 	mov	r9,r6
  808cb4:	00880034 	movhi	r2,8192
  808cb8:	10bfffc4 	addi	r2,r2,-1
  808cbc:	12400d36 	bltu	r2,r9,808cf4 <__pack_d+0x134>
  808cc0:	4804963a 	slli	r2,r9,24
  808cc4:	400cd23a 	srli	r6,r8,8
  808cc8:	480ed23a 	srli	r7,r9,8
  808ccc:	013fffc4 	movi	r4,-1
  808cd0:	118cb03a 	or	r6,r2,r6
  808cd4:	01400434 	movhi	r5,16
  808cd8:	297fffc4 	addi	r5,r5,-1
  808cdc:	3104703a 	and	r2,r6,r4
  808ce0:	3946703a 	and	r3,r7,r5
  808ce4:	5201ffcc 	andi	r8,r10,2047
  808ce8:	100d883a 	mov	r6,r2
  808cec:	180f883a 	mov	r7,r3
  808cf0:	003fc706 	br	808c10 <__pack_d+0x50>
  808cf4:	480897fa 	slli	r4,r9,31
  808cf8:	4004d07a 	srli	r2,r8,1
  808cfc:	4806d07a 	srli	r3,r9,1
  808d00:	52800044 	addi	r10,r10,1
  808d04:	2084b03a 	or	r2,r4,r2
  808d08:	1011883a 	mov	r8,r2
  808d0c:	1813883a 	mov	r9,r3
  808d10:	003feb06 	br	808cc0 <__pack_d+0x100>
  808d14:	383fe11e 	bne	r7,zero,808c9c <__pack_d+0xdc>
  808d18:	01004004 	movi	r4,256
  808d1c:	4104703a 	and	r2,r8,r4
  808d20:	10c4b03a 	or	r2,r2,r3
  808d24:	103fe326 	beq	r2,zero,808cb4 <__pack_d+0xf4>
  808d28:	3005883a 	mov	r2,r6
  808d2c:	003fdc06 	br	808ca0 <__pack_d+0xe0>
  808d30:	000d883a 	mov	r6,zero
  808d34:	000f883a 	mov	r7,zero
  808d38:	0201ffc4 	movi	r8,2047
  808d3c:	003fb406 	br	808c10 <__pack_d+0x50>
  808d40:	0005883a 	mov	r2,zero
  808d44:	00c00234 	movhi	r3,8
  808d48:	408cb03a 	or	r6,r8,r2
  808d4c:	48ceb03a 	or	r7,r9,r3
  808d50:	013fffc4 	movi	r4,-1
  808d54:	01400434 	movhi	r5,16
  808d58:	297fffc4 	addi	r5,r5,-1
  808d5c:	3104703a 	and	r2,r6,r4
  808d60:	3946703a 	and	r3,r7,r5
  808d64:	100d883a 	mov	r6,r2
  808d68:	180f883a 	mov	r7,r3
  808d6c:	0201ffc4 	movi	r8,2047
  808d70:	003fa706 	br	808c10 <__pack_d+0x50>
  808d74:	1109c83a 	sub	r4,r2,r4
  808d78:	00800e04 	movi	r2,56
  808d7c:	11004316 	blt	r2,r4,808e8c <__pack_d+0x2cc>
  808d80:	21fff804 	addi	r7,r4,-32
  808d84:	38004516 	blt	r7,zero,808e9c <__pack_d+0x2dc>
  808d88:	49d8d83a 	srl	r12,r9,r7
  808d8c:	001b883a 	mov	r13,zero
  808d90:	0023883a 	mov	r17,zero
  808d94:	01400044 	movi	r5,1
  808d98:	0025883a 	mov	r18,zero
  808d9c:	38004716 	blt	r7,zero,808ebc <__pack_d+0x2fc>
  808da0:	29d6983a 	sll	r11,r5,r7
  808da4:	0015883a 	mov	r10,zero
  808da8:	00bfffc4 	movi	r2,-1
  808dac:	5089883a 	add	r4,r10,r2
  808db0:	588b883a 	add	r5,r11,r2
  808db4:	228d803a 	cmpltu	r6,r4,r10
  808db8:	314b883a 	add	r5,r6,r5
  808dbc:	4104703a 	and	r2,r8,r4
  808dc0:	4946703a 	and	r3,r9,r5
  808dc4:	10c4b03a 	or	r2,r2,r3
  808dc8:	10000226 	beq	r2,zero,808dd4 <__pack_d+0x214>
  808dcc:	04400044 	movi	r17,1
  808dd0:	0025883a 	mov	r18,zero
  808dd4:	00803fc4 	movi	r2,255
  808dd8:	644eb03a 	or	r7,r12,r17
  808ddc:	3892703a 	and	r9,r7,r2
  808de0:	00802004 	movi	r2,128
  808de4:	6c90b03a 	or	r8,r13,r18
  808de8:	0015883a 	mov	r10,zero
  808dec:	48801626 	beq	r9,r2,808e48 <__pack_d+0x288>
  808df0:	01001fc4 	movi	r4,127
  808df4:	3905883a 	add	r2,r7,r4
  808df8:	11cd803a 	cmpltu	r6,r2,r7
  808dfc:	320d883a 	add	r6,r6,r8
  808e00:	100f883a 	mov	r7,r2
  808e04:	00840034 	movhi	r2,4096
  808e08:	10bfffc4 	addi	r2,r2,-1
  808e0c:	3011883a 	mov	r8,r6
  808e10:	0007883a 	mov	r3,zero
  808e14:	11801b36 	bltu	r2,r6,808e84 <__pack_d+0x2c4>
  808e18:	4004963a 	slli	r2,r8,24
  808e1c:	3808d23a 	srli	r4,r7,8
  808e20:	400ad23a 	srli	r5,r8,8
  808e24:	1813883a 	mov	r9,r3
  808e28:	1108b03a 	or	r4,r2,r4
  808e2c:	00bfffc4 	movi	r2,-1
  808e30:	00c00434 	movhi	r3,16
  808e34:	18ffffc4 	addi	r3,r3,-1
  808e38:	208c703a 	and	r6,r4,r2
  808e3c:	28ce703a 	and	r7,r5,r3
  808e40:	4a01ffcc 	andi	r8,r9,2047
  808e44:	003f7206 	br	808c10 <__pack_d+0x50>
  808e48:	503fe91e 	bne	r10,zero,808df0 <__pack_d+0x230>
  808e4c:	01004004 	movi	r4,256
  808e50:	3904703a 	and	r2,r7,r4
  808e54:	0007883a 	mov	r3,zero
  808e58:	10c4b03a 	or	r2,r2,r3
  808e5c:	10000626 	beq	r2,zero,808e78 <__pack_d+0x2b8>
  808e60:	3a45883a 	add	r2,r7,r9
  808e64:	11cd803a 	cmpltu	r6,r2,r7
  808e68:	320d883a 	add	r6,r6,r8
  808e6c:	100f883a 	mov	r7,r2
  808e70:	3011883a 	mov	r8,r6
  808e74:	0007883a 	mov	r3,zero
  808e78:	00840034 	movhi	r2,4096
  808e7c:	10bfffc4 	addi	r2,r2,-1
  808e80:	123fe52e 	bgeu	r2,r8,808e18 <__pack_d+0x258>
  808e84:	00c00044 	movi	r3,1
  808e88:	003fe306 	br	808e18 <__pack_d+0x258>
  808e8c:	0009883a 	mov	r4,zero
  808e90:	0013883a 	mov	r9,zero
  808e94:	000b883a 	mov	r5,zero
  808e98:	003fe406 	br	808e2c <__pack_d+0x26c>
  808e9c:	4a47883a 	add	r3,r9,r9
  808ea0:	008007c4 	movi	r2,31
  808ea4:	1105c83a 	sub	r2,r2,r4
  808ea8:	1886983a 	sll	r3,r3,r2
  808eac:	4118d83a 	srl	r12,r8,r4
  808eb0:	491ad83a 	srl	r13,r9,r4
  808eb4:	1b18b03a 	or	r12,r3,r12
  808eb8:	003fb506 	br	808d90 <__pack_d+0x1d0>
  808ebc:	2806d07a 	srli	r3,r5,1
  808ec0:	008007c4 	movi	r2,31
  808ec4:	1105c83a 	sub	r2,r2,r4
  808ec8:	1896d83a 	srl	r11,r3,r2
  808ecc:	2914983a 	sll	r10,r5,r4
  808ed0:	003fb506 	br	808da8 <__pack_d+0x1e8>

00808ed4 <__unpack_d>:
  808ed4:	20c00117 	ldw	r3,4(r4)
  808ed8:	22400017 	ldw	r9,0(r4)
  808edc:	00800434 	movhi	r2,16
  808ee0:	10bfffc4 	addi	r2,r2,-1
  808ee4:	1808d53a 	srli	r4,r3,20
  808ee8:	180cd7fa 	srli	r6,r3,31
  808eec:	1894703a 	and	r10,r3,r2
  808ef0:	2201ffcc 	andi	r8,r4,2047
  808ef4:	281b883a 	mov	r13,r5
  808ef8:	4817883a 	mov	r11,r9
  808efc:	29800115 	stw	r6,4(r5)
  808f00:	5019883a 	mov	r12,r10
  808f04:	40001e1e 	bne	r8,zero,808f80 <__unpack_d+0xac>
  808f08:	4a84b03a 	or	r2,r9,r10
  808f0c:	10001926 	beq	r2,zero,808f74 <__unpack_d+0xa0>
  808f10:	4804d63a 	srli	r2,r9,24
  808f14:	500c923a 	slli	r6,r10,8
  808f18:	013f0084 	movi	r4,-1022
  808f1c:	00c40034 	movhi	r3,4096
  808f20:	18ffffc4 	addi	r3,r3,-1
  808f24:	118cb03a 	or	r6,r2,r6
  808f28:	008000c4 	movi	r2,3
  808f2c:	480a923a 	slli	r5,r9,8
  808f30:	68800015 	stw	r2,0(r13)
  808f34:	69000215 	stw	r4,8(r13)
  808f38:	19800b36 	bltu	r3,r6,808f68 <__unpack_d+0x94>
  808f3c:	200f883a 	mov	r7,r4
  808f40:	1811883a 	mov	r8,r3
  808f44:	2945883a 	add	r2,r5,r5
  808f48:	1149803a 	cmpltu	r4,r2,r5
  808f4c:	3187883a 	add	r3,r6,r6
  808f50:	20c9883a 	add	r4,r4,r3
  808f54:	100b883a 	mov	r5,r2
  808f58:	200d883a 	mov	r6,r4
  808f5c:	39ffffc4 	addi	r7,r7,-1
  808f60:	413ff82e 	bgeu	r8,r4,808f44 <__unpack_d+0x70>
  808f64:	69c00215 	stw	r7,8(r13)
  808f68:	69800415 	stw	r6,16(r13)
  808f6c:	69400315 	stw	r5,12(r13)
  808f70:	f800283a 	ret
  808f74:	00800084 	movi	r2,2
  808f78:	28800015 	stw	r2,0(r5)
  808f7c:	f800283a 	ret
  808f80:	0081ffc4 	movi	r2,2047
  808f84:	40800f26 	beq	r8,r2,808fc4 <__unpack_d+0xf0>
  808f88:	480cd63a 	srli	r6,r9,24
  808f8c:	5006923a 	slli	r3,r10,8
  808f90:	4804923a 	slli	r2,r9,8
  808f94:	0009883a 	mov	r4,zero
  808f98:	30c6b03a 	or	r3,r6,r3
  808f9c:	01440034 	movhi	r5,4096
  808fa0:	110cb03a 	or	r6,r2,r4
  808fa4:	423f0044 	addi	r8,r8,-1023
  808fa8:	194eb03a 	or	r7,r3,r5
  808fac:	008000c4 	movi	r2,3
  808fb0:	69c00415 	stw	r7,16(r13)
  808fb4:	6a000215 	stw	r8,8(r13)
  808fb8:	68800015 	stw	r2,0(r13)
  808fbc:	69800315 	stw	r6,12(r13)
  808fc0:	f800283a 	ret
  808fc4:	4a84b03a 	or	r2,r9,r10
  808fc8:	1000031e 	bne	r2,zero,808fd8 <__unpack_d+0x104>
  808fcc:	00800104 	movi	r2,4
  808fd0:	28800015 	stw	r2,0(r5)
  808fd4:	f800283a 	ret
  808fd8:	0009883a 	mov	r4,zero
  808fdc:	01400234 	movhi	r5,8
  808fe0:	4904703a 	and	r2,r9,r4
  808fe4:	5146703a 	and	r3,r10,r5
  808fe8:	10c4b03a 	or	r2,r2,r3
  808fec:	10000526 	beq	r2,zero,809004 <__unpack_d+0x130>
  808ff0:	00800044 	movi	r2,1
  808ff4:	68800015 	stw	r2,0(r13)
  808ff8:	6b000415 	stw	r12,16(r13)
  808ffc:	6ac00315 	stw	r11,12(r13)
  809000:	f800283a 	ret
  809004:	68000015 	stw	zero,0(r13)
  809008:	003ffb06 	br	808ff8 <__unpack_d+0x124>

0080900c <__fpcmp_parts_d>:
  80900c:	21800017 	ldw	r6,0(r4)
  809010:	00c00044 	movi	r3,1
  809014:	19800a2e 	bgeu	r3,r6,809040 <__fpcmp_parts_d+0x34>
  809018:	28800017 	ldw	r2,0(r5)
  80901c:	1880082e 	bgeu	r3,r2,809040 <__fpcmp_parts_d+0x34>
  809020:	00c00104 	movi	r3,4
  809024:	30c02626 	beq	r6,r3,8090c0 <__fpcmp_parts_d+0xb4>
  809028:	10c02226 	beq	r2,r3,8090b4 <__fpcmp_parts_d+0xa8>
  80902c:	00c00084 	movi	r3,2
  809030:	30c00526 	beq	r6,r3,809048 <__fpcmp_parts_d+0x3c>
  809034:	10c0071e 	bne	r2,r3,809054 <__fpcmp_parts_d+0x48>
  809038:	20800117 	ldw	r2,4(r4)
  80903c:	1000091e 	bne	r2,zero,809064 <__fpcmp_parts_d+0x58>
  809040:	00800044 	movi	r2,1
  809044:	f800283a 	ret
  809048:	10c01a1e 	bne	r2,r3,8090b4 <__fpcmp_parts_d+0xa8>
  80904c:	0005883a 	mov	r2,zero
  809050:	f800283a 	ret
  809054:	22000117 	ldw	r8,4(r4)
  809058:	28800117 	ldw	r2,4(r5)
  80905c:	40800326 	beq	r8,r2,80906c <__fpcmp_parts_d+0x60>
  809060:	403ff726 	beq	r8,zero,809040 <__fpcmp_parts_d+0x34>
  809064:	00bfffc4 	movi	r2,-1
  809068:	f800283a 	ret
  80906c:	20c00217 	ldw	r3,8(r4)
  809070:	28800217 	ldw	r2,8(r5)
  809074:	10fffa16 	blt	r2,r3,809060 <__fpcmp_parts_d+0x54>
  809078:	18800916 	blt	r3,r2,8090a0 <__fpcmp_parts_d+0x94>
  80907c:	21c00417 	ldw	r7,16(r4)
  809080:	28c00417 	ldw	r3,16(r5)
  809084:	21800317 	ldw	r6,12(r4)
  809088:	28800317 	ldw	r2,12(r5)
  80908c:	19fff436 	bltu	r3,r7,809060 <__fpcmp_parts_d+0x54>
  809090:	38c00526 	beq	r7,r3,8090a8 <__fpcmp_parts_d+0x9c>
  809094:	38c00236 	bltu	r7,r3,8090a0 <__fpcmp_parts_d+0x94>
  809098:	19ffec1e 	bne	r3,r7,80904c <__fpcmp_parts_d+0x40>
  80909c:	30bfeb2e 	bgeu	r6,r2,80904c <__fpcmp_parts_d+0x40>
  8090a0:	403fe71e 	bne	r8,zero,809040 <__fpcmp_parts_d+0x34>
  8090a4:	003fef06 	br	809064 <__fpcmp_parts_d+0x58>
  8090a8:	11bffa2e 	bgeu	r2,r6,809094 <__fpcmp_parts_d+0x88>
  8090ac:	403fe426 	beq	r8,zero,809040 <__fpcmp_parts_d+0x34>
  8090b0:	003fec06 	br	809064 <__fpcmp_parts_d+0x58>
  8090b4:	28800117 	ldw	r2,4(r5)
  8090b8:	103fe11e 	bne	r2,zero,809040 <__fpcmp_parts_d+0x34>
  8090bc:	003fe906 	br	809064 <__fpcmp_parts_d+0x58>
  8090c0:	11bfdd1e 	bne	r2,r6,809038 <__fpcmp_parts_d+0x2c>
  8090c4:	28c00117 	ldw	r3,4(r5)
  8090c8:	20800117 	ldw	r2,4(r4)
  8090cc:	1885c83a 	sub	r2,r3,r2
  8090d0:	f800283a 	ret

008090d4 <__errno>:
  8090d4:	00c020b4 	movhi	r3,130
  8090d8:	18f83b04 	addi	r3,r3,-7956
  8090dc:	18800017 	ldw	r2,0(r3)
  8090e0:	f800283a 	ret

008090e4 <free>:
  8090e4:	008020b4 	movhi	r2,130
  8090e8:	10b83b04 	addi	r2,r2,-7956
  8090ec:	200b883a 	mov	r5,r4
  8090f0:	11000017 	ldw	r4,0(r2)
  8090f4:	080d9981 	jmpi	80d998 <_free_r>

008090f8 <malloc>:
  8090f8:	008020b4 	movhi	r2,130
  8090fc:	10b83b04 	addi	r2,r2,-7956
  809100:	200b883a 	mov	r5,r4
  809104:	11000017 	ldw	r4,0(r2)
  809108:	080910c1 	jmpi	80910c <_malloc_r>

0080910c <_malloc_r>:
  80910c:	defff604 	addi	sp,sp,-40
  809110:	28c002c4 	addi	r3,r5,11
  809114:	00800584 	movi	r2,22
  809118:	dc800215 	stw	r18,8(sp)
  80911c:	dfc00915 	stw	ra,36(sp)
  809120:	df000815 	stw	fp,32(sp)
  809124:	ddc00715 	stw	r23,28(sp)
  809128:	dd800615 	stw	r22,24(sp)
  80912c:	dd400515 	stw	r21,20(sp)
  809130:	dd000415 	stw	r20,16(sp)
  809134:	dcc00315 	stw	r19,12(sp)
  809138:	dc400115 	stw	r17,4(sp)
  80913c:	dc000015 	stw	r16,0(sp)
  809140:	2025883a 	mov	r18,r4
  809144:	10c01236 	bltu	r2,r3,809190 <_malloc_r+0x84>
  809148:	04400404 	movi	r17,16
  80914c:	8940142e 	bgeu	r17,r5,8091a0 <_malloc_r+0x94>
  809150:	00800304 	movi	r2,12
  809154:	0007883a 	mov	r3,zero
  809158:	90800015 	stw	r2,0(r18)
  80915c:	1805883a 	mov	r2,r3
  809160:	dfc00917 	ldw	ra,36(sp)
  809164:	df000817 	ldw	fp,32(sp)
  809168:	ddc00717 	ldw	r23,28(sp)
  80916c:	dd800617 	ldw	r22,24(sp)
  809170:	dd400517 	ldw	r21,20(sp)
  809174:	dd000417 	ldw	r20,16(sp)
  809178:	dcc00317 	ldw	r19,12(sp)
  80917c:	dc800217 	ldw	r18,8(sp)
  809180:	dc400117 	ldw	r17,4(sp)
  809184:	dc000017 	ldw	r16,0(sp)
  809188:	dec00a04 	addi	sp,sp,40
  80918c:	f800283a 	ret
  809190:	00bffe04 	movi	r2,-8
  809194:	18a2703a 	and	r17,r3,r2
  809198:	883fed16 	blt	r17,zero,809150 <_malloc_r+0x44>
  80919c:	897fec36 	bltu	r17,r5,809150 <_malloc_r+0x44>
  8091a0:	9009883a 	mov	r4,r18
  8091a4:	0811d5c0 	call	811d5c <__malloc_lock>
  8091a8:	00807dc4 	movi	r2,503
  8091ac:	14402b2e 	bgeu	r2,r17,80925c <_malloc_r+0x150>
  8091b0:	8806d27a 	srli	r3,r17,9
  8091b4:	18003f1e 	bne	r3,zero,8092b4 <_malloc_r+0x1a8>
  8091b8:	880cd0fa 	srli	r6,r17,3
  8091bc:	300490fa 	slli	r2,r6,3
  8091c0:	02c020b4 	movhi	r11,130
  8091c4:	5af25904 	addi	r11,r11,-13980
  8091c8:	12cb883a 	add	r5,r2,r11
  8091cc:	2c000317 	ldw	r16,12(r5)
  8091d0:	580f883a 	mov	r7,r11
  8091d4:	2c00041e 	bne	r5,r16,8091e8 <_malloc_r+0xdc>
  8091d8:	00000a06 	br	809204 <_malloc_r+0xf8>
  8091dc:	1800860e 	bge	r3,zero,8093f8 <_malloc_r+0x2ec>
  8091e0:	84000317 	ldw	r16,12(r16)
  8091e4:	2c000726 	beq	r5,r16,809204 <_malloc_r+0xf8>
  8091e8:	80800117 	ldw	r2,4(r16)
  8091ec:	00ffff04 	movi	r3,-4
  8091f0:	10c8703a 	and	r4,r2,r3
  8091f4:	2447c83a 	sub	r3,r4,r17
  8091f8:	008003c4 	movi	r2,15
  8091fc:	10fff70e 	bge	r2,r3,8091dc <_malloc_r+0xd0>
  809200:	31bfffc4 	addi	r6,r6,-1
  809204:	32400044 	addi	r9,r6,1
  809208:	028020b4 	movhi	r10,130
  80920c:	52b25b04 	addi	r10,r10,-13972
  809210:	54000217 	ldw	r16,8(r10)
  809214:	8280a026 	beq	r16,r10,809498 <_malloc_r+0x38c>
  809218:	80800117 	ldw	r2,4(r16)
  80921c:	00ffff04 	movi	r3,-4
  809220:	10ca703a 	and	r5,r2,r3
  809224:	2c4dc83a 	sub	r6,r5,r17
  809228:	008003c4 	movi	r2,15
  80922c:	11808316 	blt	r2,r6,80943c <_malloc_r+0x330>
  809230:	52800315 	stw	r10,12(r10)
  809234:	52800215 	stw	r10,8(r10)
  809238:	30002916 	blt	r6,zero,8092e0 <_malloc_r+0x1d4>
  80923c:	8147883a 	add	r3,r16,r5
  809240:	18800117 	ldw	r2,4(r3)
  809244:	9009883a 	mov	r4,r18
  809248:	10800054 	ori	r2,r2,1
  80924c:	18800115 	stw	r2,4(r3)
  809250:	0811d7c0 	call	811d7c <__malloc_unlock>
  809254:	80c00204 	addi	r3,r16,8
  809258:	003fc006 	br	80915c <_malloc_r+0x50>
  80925c:	02c020b4 	movhi	r11,130
  809260:	5af25904 	addi	r11,r11,-13980
  809264:	8ac5883a 	add	r2,r17,r11
  809268:	14000317 	ldw	r16,12(r2)
  80926c:	580f883a 	mov	r7,r11
  809270:	8806d0fa 	srli	r3,r17,3
  809274:	14006c26 	beq	r2,r16,809428 <_malloc_r+0x31c>
  809278:	80c00117 	ldw	r3,4(r16)
  80927c:	00bfff04 	movi	r2,-4
  809280:	81800317 	ldw	r6,12(r16)
  809284:	1886703a 	and	r3,r3,r2
  809288:	80c7883a 	add	r3,r16,r3
  80928c:	18800117 	ldw	r2,4(r3)
  809290:	81400217 	ldw	r5,8(r16)
  809294:	9009883a 	mov	r4,r18
  809298:	10800054 	ori	r2,r2,1
  80929c:	18800115 	stw	r2,4(r3)
  8092a0:	31400215 	stw	r5,8(r6)
  8092a4:	29800315 	stw	r6,12(r5)
  8092a8:	0811d7c0 	call	811d7c <__malloc_unlock>
  8092ac:	80c00204 	addi	r3,r16,8
  8092b0:	003faa06 	br	80915c <_malloc_r+0x50>
  8092b4:	00800104 	movi	r2,4
  8092b8:	10c0052e 	bgeu	r2,r3,8092d0 <_malloc_r+0x1c4>
  8092bc:	00800504 	movi	r2,20
  8092c0:	10c07836 	bltu	r2,r3,8094a4 <_malloc_r+0x398>
  8092c4:	198016c4 	addi	r6,r3,91
  8092c8:	300490fa 	slli	r2,r6,3
  8092cc:	003fbc06 	br	8091c0 <_malloc_r+0xb4>
  8092d0:	8804d1ba 	srli	r2,r17,6
  8092d4:	11800e04 	addi	r6,r2,56
  8092d8:	300490fa 	slli	r2,r6,3
  8092dc:	003fb806 	br	8091c0 <_malloc_r+0xb4>
  8092e0:	00807fc4 	movi	r2,511
  8092e4:	1140bb36 	bltu	r2,r5,8095d4 <_malloc_r+0x4c8>
  8092e8:	2806d0fa 	srli	r3,r5,3
  8092ec:	573ffe04 	addi	fp,r10,-8
  8092f0:	00800044 	movi	r2,1
  8092f4:	180890fa 	slli	r4,r3,3
  8092f8:	1807d0ba 	srai	r3,r3,2
  8092fc:	e1c00117 	ldw	r7,4(fp)
  809300:	5909883a 	add	r4,r11,r4
  809304:	21400217 	ldw	r5,8(r4)
  809308:	10c4983a 	sll	r2,r2,r3
  80930c:	81000315 	stw	r4,12(r16)
  809310:	81400215 	stw	r5,8(r16)
  809314:	388eb03a 	or	r7,r7,r2
  809318:	2c000315 	stw	r16,12(r5)
  80931c:	24000215 	stw	r16,8(r4)
  809320:	e1c00115 	stw	r7,4(fp)
  809324:	4807883a 	mov	r3,r9
  809328:	4800cd16 	blt	r9,zero,809660 <_malloc_r+0x554>
  80932c:	1807d0ba 	srai	r3,r3,2
  809330:	00800044 	movi	r2,1
  809334:	10c8983a 	sll	r4,r2,r3
  809338:	39004436 	bltu	r7,r4,80944c <_malloc_r+0x340>
  80933c:	21c4703a 	and	r2,r4,r7
  809340:	10000a1e 	bne	r2,zero,80936c <_malloc_r+0x260>
  809344:	2109883a 	add	r4,r4,r4
  809348:	00bfff04 	movi	r2,-4
  80934c:	4884703a 	and	r2,r9,r2
  809350:	3906703a 	and	r3,r7,r4
  809354:	12400104 	addi	r9,r2,4
  809358:	1800041e 	bne	r3,zero,80936c <_malloc_r+0x260>
  80935c:	2109883a 	add	r4,r4,r4
  809360:	3904703a 	and	r2,r7,r4
  809364:	4a400104 	addi	r9,r9,4
  809368:	103ffc26 	beq	r2,zero,80935c <_malloc_r+0x250>
  80936c:	480490fa 	slli	r2,r9,3
  809370:	4819883a 	mov	r12,r9
  809374:	023fff04 	movi	r8,-4
  809378:	589b883a 	add	r13,r11,r2
  80937c:	6807883a 	mov	r3,r13
  809380:	014003c4 	movi	r5,15
  809384:	1c000317 	ldw	r16,12(r3)
  809388:	1c00041e 	bne	r3,r16,80939c <_malloc_r+0x290>
  80938c:	0000a706 	br	80962c <_malloc_r+0x520>
  809390:	3000ab0e 	bge	r6,zero,809640 <_malloc_r+0x534>
  809394:	84000317 	ldw	r16,12(r16)
  809398:	1c00a426 	beq	r3,r16,80962c <_malloc_r+0x520>
  80939c:	80800117 	ldw	r2,4(r16)
  8093a0:	1204703a 	and	r2,r2,r8
  8093a4:	144dc83a 	sub	r6,r2,r17
  8093a8:	29bff90e 	bge	r5,r6,809390 <_malloc_r+0x284>
  8093ac:	81000317 	ldw	r4,12(r16)
  8093b0:	80c00217 	ldw	r3,8(r16)
  8093b4:	89400054 	ori	r5,r17,1
  8093b8:	8445883a 	add	r2,r16,r17
  8093bc:	20c00215 	stw	r3,8(r4)
  8093c0:	19000315 	stw	r4,12(r3)
  8093c4:	81400115 	stw	r5,4(r16)
  8093c8:	1187883a 	add	r3,r2,r6
  8093cc:	31000054 	ori	r4,r6,1
  8093d0:	50800315 	stw	r2,12(r10)
  8093d4:	50800215 	stw	r2,8(r10)
  8093d8:	19800015 	stw	r6,0(r3)
  8093dc:	11000115 	stw	r4,4(r2)
  8093e0:	12800215 	stw	r10,8(r2)
  8093e4:	12800315 	stw	r10,12(r2)
  8093e8:	9009883a 	mov	r4,r18
  8093ec:	0811d7c0 	call	811d7c <__malloc_unlock>
  8093f0:	80c00204 	addi	r3,r16,8
  8093f4:	003f5906 	br	80915c <_malloc_r+0x50>
  8093f8:	8109883a 	add	r4,r16,r4
  8093fc:	20800117 	ldw	r2,4(r4)
  809400:	80c00217 	ldw	r3,8(r16)
  809404:	81400317 	ldw	r5,12(r16)
  809408:	10800054 	ori	r2,r2,1
  80940c:	20800115 	stw	r2,4(r4)
  809410:	28c00215 	stw	r3,8(r5)
  809414:	19400315 	stw	r5,12(r3)
  809418:	9009883a 	mov	r4,r18
  80941c:	0811d7c0 	call	811d7c <__malloc_unlock>
  809420:	80c00204 	addi	r3,r16,8
  809424:	003f4d06 	br	80915c <_malloc_r+0x50>
  809428:	80800204 	addi	r2,r16,8
  80942c:	14000317 	ldw	r16,12(r2)
  809430:	143f911e 	bne	r2,r16,809278 <_malloc_r+0x16c>
  809434:	1a400084 	addi	r9,r3,2
  809438:	003f7306 	br	809208 <_malloc_r+0xfc>
  80943c:	88c00054 	ori	r3,r17,1
  809440:	8445883a 	add	r2,r16,r17
  809444:	80c00115 	stw	r3,4(r16)
  809448:	003fdf06 	br	8093c8 <_malloc_r+0x2bc>
  80944c:	e4000217 	ldw	r16,8(fp)
  809450:	00bfff04 	movi	r2,-4
  809454:	80c00117 	ldw	r3,4(r16)
  809458:	802d883a 	mov	r22,r16
  80945c:	18aa703a 	and	r21,r3,r2
  809460:	ac401636 	bltu	r21,r17,8094bc <_malloc_r+0x3b0>
  809464:	ac49c83a 	sub	r4,r21,r17
  809468:	008003c4 	movi	r2,15
  80946c:	1100130e 	bge	r2,r4,8094bc <_malloc_r+0x3b0>
  809470:	88800054 	ori	r2,r17,1
  809474:	8447883a 	add	r3,r16,r17
  809478:	80800115 	stw	r2,4(r16)
  80947c:	20800054 	ori	r2,r4,1
  809480:	18800115 	stw	r2,4(r3)
  809484:	e0c00215 	stw	r3,8(fp)
  809488:	9009883a 	mov	r4,r18
  80948c:	0811d7c0 	call	811d7c <__malloc_unlock>
  809490:	80c00204 	addi	r3,r16,8
  809494:	003f3106 	br	80915c <_malloc_r+0x50>
  809498:	39c00117 	ldw	r7,4(r7)
  80949c:	573ffe04 	addi	fp,r10,-8
  8094a0:	003fa006 	br	809324 <_malloc_r+0x218>
  8094a4:	00801504 	movi	r2,84
  8094a8:	10c06736 	bltu	r2,r3,809648 <_malloc_r+0x53c>
  8094ac:	8804d33a 	srli	r2,r17,12
  8094b0:	11801b84 	addi	r6,r2,110
  8094b4:	300490fa 	slli	r2,r6,3
  8094b8:	003f4106 	br	8091c0 <_malloc_r+0xb4>
  8094bc:	d0a73117 	ldw	r2,-25404(gp)
  8094c0:	d0e00917 	ldw	r3,-32732(gp)
  8094c4:	053fffc4 	movi	r20,-1
  8094c8:	10800404 	addi	r2,r2,16
  8094cc:	88a7883a 	add	r19,r17,r2
  8094d0:	1d000326 	beq	r3,r20,8094e0 <_malloc_r+0x3d4>
  8094d4:	98c3ffc4 	addi	r3,r19,4095
  8094d8:	00bc0004 	movi	r2,-4096
  8094dc:	18a6703a 	and	r19,r3,r2
  8094e0:	9009883a 	mov	r4,r18
  8094e4:	980b883a 	mov	r5,r19
  8094e8:	0809a0c0 	call	809a0c <_sbrk_r>
  8094ec:	1009883a 	mov	r4,r2
  8094f0:	15000426 	beq	r2,r20,809504 <_malloc_r+0x3f8>
  8094f4:	854b883a 	add	r5,r16,r21
  8094f8:	1029883a 	mov	r20,r2
  8094fc:	11405a2e 	bgeu	r2,r5,809668 <_malloc_r+0x55c>
  809500:	87000c26 	beq	r16,fp,809534 <_malloc_r+0x428>
  809504:	e4000217 	ldw	r16,8(fp)
  809508:	80c00117 	ldw	r3,4(r16)
  80950c:	00bfff04 	movi	r2,-4
  809510:	1884703a 	and	r2,r3,r2
  809514:	14400336 	bltu	r2,r17,809524 <_malloc_r+0x418>
  809518:	1449c83a 	sub	r4,r2,r17
  80951c:	008003c4 	movi	r2,15
  809520:	113fd316 	blt	r2,r4,809470 <_malloc_r+0x364>
  809524:	9009883a 	mov	r4,r18
  809528:	0811d7c0 	call	811d7c <__malloc_unlock>
  80952c:	0007883a 	mov	r3,zero
  809530:	003f0a06 	br	80915c <_malloc_r+0x50>
  809534:	05c020b4 	movhi	r23,130
  809538:	bdff8604 	addi	r23,r23,-488
  80953c:	b8800017 	ldw	r2,0(r23)
  809540:	988d883a 	add	r6,r19,r2
  809544:	b9800015 	stw	r6,0(r23)
  809548:	d0e00917 	ldw	r3,-32732(gp)
  80954c:	00bfffc4 	movi	r2,-1
  809550:	18808e26 	beq	r3,r2,80978c <_malloc_r+0x680>
  809554:	2145c83a 	sub	r2,r4,r5
  809558:	3085883a 	add	r2,r6,r2
  80955c:	b8800015 	stw	r2,0(r23)
  809560:	20c001cc 	andi	r3,r4,7
  809564:	18005f1e 	bne	r3,zero,8096e4 <_malloc_r+0x5d8>
  809568:	000b883a 	mov	r5,zero
  80956c:	a4c5883a 	add	r2,r20,r19
  809570:	1083ffcc 	andi	r2,r2,4095
  809574:	00c40004 	movi	r3,4096
  809578:	1887c83a 	sub	r3,r3,r2
  80957c:	28e7883a 	add	r19,r5,r3
  809580:	9009883a 	mov	r4,r18
  809584:	980b883a 	mov	r5,r19
  809588:	0809a0c0 	call	809a0c <_sbrk_r>
  80958c:	1007883a 	mov	r3,r2
  809590:	00bfffc4 	movi	r2,-1
  809594:	18807a26 	beq	r3,r2,809780 <_malloc_r+0x674>
  809598:	1d05c83a 	sub	r2,r3,r20
  80959c:	9885883a 	add	r2,r19,r2
  8095a0:	10c00054 	ori	r3,r2,1
  8095a4:	b8800017 	ldw	r2,0(r23)
  8095a8:	a021883a 	mov	r16,r20
  8095ac:	a0c00115 	stw	r3,4(r20)
  8095b0:	9885883a 	add	r2,r19,r2
  8095b4:	b8800015 	stw	r2,0(r23)
  8095b8:	e5000215 	stw	r20,8(fp)
  8095bc:	b7003626 	beq	r22,fp,809698 <_malloc_r+0x58c>
  8095c0:	018003c4 	movi	r6,15
  8095c4:	35404b36 	bltu	r6,r21,8096f4 <_malloc_r+0x5e8>
  8095c8:	00800044 	movi	r2,1
  8095cc:	a0800115 	stw	r2,4(r20)
  8095d0:	003fcd06 	br	809508 <_malloc_r+0x3fc>
  8095d4:	2808d27a 	srli	r4,r5,9
  8095d8:	2000371e 	bne	r4,zero,8096b8 <_malloc_r+0x5ac>
  8095dc:	2808d0fa 	srli	r4,r5,3
  8095e0:	200690fa 	slli	r3,r4,3
  8095e4:	1ad1883a 	add	r8,r3,r11
  8095e8:	41800217 	ldw	r6,8(r8)
  8095ec:	41805b26 	beq	r8,r6,80975c <_malloc_r+0x650>
  8095f0:	30800117 	ldw	r2,4(r6)
  8095f4:	00ffff04 	movi	r3,-4
  8095f8:	10c4703a 	and	r2,r2,r3
  8095fc:	2880022e 	bgeu	r5,r2,809608 <_malloc_r+0x4fc>
  809600:	31800217 	ldw	r6,8(r6)
  809604:	41bffa1e 	bne	r8,r6,8095f0 <_malloc_r+0x4e4>
  809608:	32000317 	ldw	r8,12(r6)
  80960c:	39c00117 	ldw	r7,4(r7)
  809610:	82000315 	stw	r8,12(r16)
  809614:	81800215 	stw	r6,8(r16)
  809618:	070020b4 	movhi	fp,130
  80961c:	e7325904 	addi	fp,fp,-13980
  809620:	34000315 	stw	r16,12(r6)
  809624:	44000215 	stw	r16,8(r8)
  809628:	003f3e06 	br	809324 <_malloc_r+0x218>
  80962c:	63000044 	addi	r12,r12,1
  809630:	608000cc 	andi	r2,r12,3
  809634:	10005d26 	beq	r2,zero,8097ac <_malloc_r+0x6a0>
  809638:	18c00204 	addi	r3,r3,8
  80963c:	003f5106 	br	809384 <_malloc_r+0x278>
  809640:	8089883a 	add	r4,r16,r2
  809644:	003f6d06 	br	8093fc <_malloc_r+0x2f0>
  809648:	00805504 	movi	r2,340
  80964c:	10c02036 	bltu	r2,r3,8096d0 <_malloc_r+0x5c4>
  809650:	8804d3fa 	srli	r2,r17,15
  809654:	11801dc4 	addi	r6,r2,119
  809658:	300490fa 	slli	r2,r6,3
  80965c:	003ed806 	br	8091c0 <_malloc_r+0xb4>
  809660:	48c000c4 	addi	r3,r9,3
  809664:	003f3106 	br	80932c <_malloc_r+0x220>
  809668:	05c020b4 	movhi	r23,130
  80966c:	bdff8604 	addi	r23,r23,-488
  809670:	b8800017 	ldw	r2,0(r23)
  809674:	988d883a 	add	r6,r19,r2
  809678:	b9800015 	stw	r6,0(r23)
  80967c:	293fb21e 	bne	r5,r4,809548 <_malloc_r+0x43c>
  809680:	2083ffcc 	andi	r2,r4,4095
  809684:	103fb01e 	bne	r2,zero,809548 <_malloc_r+0x43c>
  809688:	e4000217 	ldw	r16,8(fp)
  80968c:	9d45883a 	add	r2,r19,r21
  809690:	10800054 	ori	r2,r2,1
  809694:	80800115 	stw	r2,4(r16)
  809698:	b8c00017 	ldw	r3,0(r23)
  80969c:	d0a73217 	ldw	r2,-25400(gp)
  8096a0:	10c0012e 	bgeu	r2,r3,8096a8 <_malloc_r+0x59c>
  8096a4:	d0e73215 	stw	r3,-25400(gp)
  8096a8:	d0a73317 	ldw	r2,-25396(gp)
  8096ac:	10ff962e 	bgeu	r2,r3,809508 <_malloc_r+0x3fc>
  8096b0:	d0e73315 	stw	r3,-25396(gp)
  8096b4:	003f9406 	br	809508 <_malloc_r+0x3fc>
  8096b8:	00800104 	movi	r2,4
  8096bc:	11001e36 	bltu	r2,r4,809738 <_malloc_r+0x62c>
  8096c0:	2804d1ba 	srli	r2,r5,6
  8096c4:	11000e04 	addi	r4,r2,56
  8096c8:	200690fa 	slli	r3,r4,3
  8096cc:	003fc506 	br	8095e4 <_malloc_r+0x4d8>
  8096d0:	00815504 	movi	r2,1364
  8096d4:	10c01d2e 	bgeu	r2,r3,80974c <_malloc_r+0x640>
  8096d8:	01801f84 	movi	r6,126
  8096dc:	0080fc04 	movi	r2,1008
  8096e0:	003eb706 	br	8091c0 <_malloc_r+0xb4>
  8096e4:	00800204 	movi	r2,8
  8096e8:	10cbc83a 	sub	r5,r2,r3
  8096ec:	2169883a 	add	r20,r4,r5
  8096f0:	003f9e06 	br	80956c <_malloc_r+0x460>
  8096f4:	00bffe04 	movi	r2,-8
  8096f8:	a93ffd04 	addi	r4,r21,-12
  8096fc:	2088703a 	and	r4,r4,r2
  809700:	b10b883a 	add	r5,r22,r4
  809704:	00c00144 	movi	r3,5
  809708:	28c00215 	stw	r3,8(r5)
  80970c:	28c00115 	stw	r3,4(r5)
  809710:	b0800117 	ldw	r2,4(r22)
  809714:	1080004c 	andi	r2,r2,1
  809718:	2084b03a 	or	r2,r4,r2
  80971c:	b0800115 	stw	r2,4(r22)
  809720:	313fdd2e 	bgeu	r6,r4,809698 <_malloc_r+0x58c>
  809724:	b1400204 	addi	r5,r22,8
  809728:	9009883a 	mov	r4,r18
  80972c:	080d9980 	call	80d998 <_free_r>
  809730:	e4000217 	ldw	r16,8(fp)
  809734:	003fd806 	br	809698 <_malloc_r+0x58c>
  809738:	00800504 	movi	r2,20
  80973c:	11001536 	bltu	r2,r4,809794 <_malloc_r+0x688>
  809740:	210016c4 	addi	r4,r4,91
  809744:	200690fa 	slli	r3,r4,3
  809748:	003fa606 	br	8095e4 <_malloc_r+0x4d8>
  80974c:	8804d4ba 	srli	r2,r17,18
  809750:	11801f04 	addi	r6,r2,124
  809754:	300490fa 	slli	r2,r6,3
  809758:	003e9906 	br	8091c0 <_malloc_r+0xb4>
  80975c:	2009d0ba 	srai	r4,r4,2
  809760:	014020b4 	movhi	r5,130
  809764:	29725904 	addi	r5,r5,-13980
  809768:	00c00044 	movi	r3,1
  80976c:	28800117 	ldw	r2,4(r5)
  809770:	1906983a 	sll	r3,r3,r4
  809774:	10c4b03a 	or	r2,r2,r3
  809778:	28800115 	stw	r2,4(r5)
  80977c:	003fa306 	br	80960c <_malloc_r+0x500>
  809780:	0027883a 	mov	r19,zero
  809784:	00c00044 	movi	r3,1
  809788:	003f8606 	br	8095a4 <_malloc_r+0x498>
  80978c:	d1200915 	stw	r4,-32732(gp)
  809790:	003f7306 	br	809560 <_malloc_r+0x454>
  809794:	00801504 	movi	r2,84
  809798:	11001936 	bltu	r2,r4,809800 <_malloc_r+0x6f4>
  80979c:	2804d33a 	srli	r2,r5,12
  8097a0:	11001b84 	addi	r4,r2,110
  8097a4:	200690fa 	slli	r3,r4,3
  8097a8:	003f8e06 	br	8095e4 <_malloc_r+0x4d8>
  8097ac:	480b883a 	mov	r5,r9
  8097b0:	6807883a 	mov	r3,r13
  8097b4:	288000cc 	andi	r2,r5,3
  8097b8:	18fffe04 	addi	r3,r3,-8
  8097bc:	297fffc4 	addi	r5,r5,-1
  8097c0:	10001526 	beq	r2,zero,809818 <_malloc_r+0x70c>
  8097c4:	18800217 	ldw	r2,8(r3)
  8097c8:	10fffa26 	beq	r2,r3,8097b4 <_malloc_r+0x6a8>
  8097cc:	2109883a 	add	r4,r4,r4
  8097d0:	393f1e36 	bltu	r7,r4,80944c <_malloc_r+0x340>
  8097d4:	203f1d26 	beq	r4,zero,80944c <_malloc_r+0x340>
  8097d8:	21c4703a 	and	r2,r4,r7
  8097dc:	10000226 	beq	r2,zero,8097e8 <_malloc_r+0x6dc>
  8097e0:	6013883a 	mov	r9,r12
  8097e4:	003ee106 	br	80936c <_malloc_r+0x260>
  8097e8:	2109883a 	add	r4,r4,r4
  8097ec:	3904703a 	and	r2,r7,r4
  8097f0:	63000104 	addi	r12,r12,4
  8097f4:	103ffc26 	beq	r2,zero,8097e8 <_malloc_r+0x6dc>
  8097f8:	6013883a 	mov	r9,r12
  8097fc:	003edb06 	br	80936c <_malloc_r+0x260>
  809800:	00805504 	movi	r2,340
  809804:	11000836 	bltu	r2,r4,809828 <_malloc_r+0x71c>
  809808:	2804d3fa 	srli	r2,r5,15
  80980c:	11001dc4 	addi	r4,r2,119
  809810:	200690fa 	slli	r3,r4,3
  809814:	003f7306 	br	8095e4 <_malloc_r+0x4d8>
  809818:	0104303a 	nor	r2,zero,r4
  80981c:	388e703a 	and	r7,r7,r2
  809820:	e1c00115 	stw	r7,4(fp)
  809824:	003fe906 	br	8097cc <_malloc_r+0x6c0>
  809828:	00815504 	movi	r2,1364
  80982c:	1100032e 	bgeu	r2,r4,80983c <_malloc_r+0x730>
  809830:	01001f84 	movi	r4,126
  809834:	00c0fc04 	movi	r3,1008
  809838:	003f6a06 	br	8095e4 <_malloc_r+0x4d8>
  80983c:	2804d4ba 	srli	r2,r5,18
  809840:	11001f04 	addi	r4,r2,124
  809844:	200690fa 	slli	r3,r4,3
  809848:	003f6606 	br	8095e4 <_malloc_r+0x4d8>

0080984c <printf>:
  80984c:	defffb04 	addi	sp,sp,-20
  809850:	dfc00115 	stw	ra,4(sp)
  809854:	d9400215 	stw	r5,8(sp)
  809858:	d9800315 	stw	r6,12(sp)
  80985c:	d9c00415 	stw	r7,16(sp)
  809860:	008020b4 	movhi	r2,130
  809864:	10b83b04 	addi	r2,r2,-7956
  809868:	10c00017 	ldw	r3,0(r2)
  80986c:	200b883a 	mov	r5,r4
  809870:	d8800204 	addi	r2,sp,8
  809874:	19000217 	ldw	r4,8(r3)
  809878:	100d883a 	mov	r6,r2
  80987c:	d8800015 	stw	r2,0(sp)
  809880:	080ba500 	call	80ba50 <__vfprintf_internal>
  809884:	dfc00117 	ldw	ra,4(sp)
  809888:	dec00504 	addi	sp,sp,20
  80988c:	f800283a 	ret

00809890 <_printf_r>:
  809890:	defffc04 	addi	sp,sp,-16
  809894:	dfc00115 	stw	ra,4(sp)
  809898:	d9800215 	stw	r6,8(sp)
  80989c:	d9c00315 	stw	r7,12(sp)
  8098a0:	280d883a 	mov	r6,r5
  8098a4:	21400217 	ldw	r5,8(r4)
  8098a8:	d8c00204 	addi	r3,sp,8
  8098ac:	180f883a 	mov	r7,r3
  8098b0:	d8c00015 	stw	r3,0(sp)
  8098b4:	0809ba40 	call	809ba4 <___vfprintf_internal_r>
  8098b8:	dfc00117 	ldw	ra,4(sp)
  8098bc:	dec00404 	addi	sp,sp,16
  8098c0:	f800283a 	ret

008098c4 <_puts_r>:
  8098c4:	defff604 	addi	sp,sp,-40
  8098c8:	dc400715 	stw	r17,28(sp)
  8098cc:	2023883a 	mov	r17,r4
  8098d0:	2809883a 	mov	r4,r5
  8098d4:	dfc00915 	stw	ra,36(sp)
  8098d8:	dcc00815 	stw	r19,32(sp)
  8098dc:	2827883a 	mov	r19,r5
  8098e0:	0809a7c0 	call	809a7c <strlen>
  8098e4:	89400217 	ldw	r5,8(r17)
  8098e8:	00c020b4 	movhi	r3,130
  8098ec:	18f09904 	addi	r3,r3,-15772
  8098f0:	01c00044 	movi	r7,1
  8098f4:	12000044 	addi	r8,r2,1
  8098f8:	d8c00515 	stw	r3,20(sp)
  8098fc:	d9c00615 	stw	r7,24(sp)
  809900:	d8c00304 	addi	r3,sp,12
  809904:	01c00084 	movi	r7,2
  809908:	8809883a 	mov	r4,r17
  80990c:	d80d883a 	mov	r6,sp
  809910:	d8c00015 	stw	r3,0(sp)
  809914:	dcc00315 	stw	r19,12(sp)
  809918:	da000215 	stw	r8,8(sp)
  80991c:	d9c00115 	stw	r7,4(sp)
  809920:	d8800415 	stw	r2,16(sp)
  809924:	080dcac0 	call	80dcac <__sfvwrite_r>
  809928:	00ffffc4 	movi	r3,-1
  80992c:	10000626 	beq	r2,zero,809948 <_puts_r+0x84>
  809930:	1805883a 	mov	r2,r3
  809934:	dfc00917 	ldw	ra,36(sp)
  809938:	dcc00817 	ldw	r19,32(sp)
  80993c:	dc400717 	ldw	r17,28(sp)
  809940:	dec00a04 	addi	sp,sp,40
  809944:	f800283a 	ret
  809948:	00c00284 	movi	r3,10
  80994c:	1805883a 	mov	r2,r3
  809950:	dfc00917 	ldw	ra,36(sp)
  809954:	dcc00817 	ldw	r19,32(sp)
  809958:	dc400717 	ldw	r17,28(sp)
  80995c:	dec00a04 	addi	sp,sp,40
  809960:	f800283a 	ret

00809964 <puts>:
  809964:	008020b4 	movhi	r2,130
  809968:	10b83b04 	addi	r2,r2,-7956
  80996c:	200b883a 	mov	r5,r4
  809970:	11000017 	ldw	r4,0(r2)
  809974:	08098c41 	jmpi	8098c4 <_puts_r>

00809978 <srand>:
  809978:	008020b4 	movhi	r2,130
  80997c:	10b83b04 	addi	r2,r2,-7956
  809980:	11400017 	ldw	r5,0(r2)
  809984:	0007883a 	mov	r3,zero
  809988:	28c02a15 	stw	r3,168(r5)
  80998c:	29002915 	stw	r4,164(r5)
  809990:	f800283a 	ret

00809994 <rand>:
  809994:	defffe04 	addi	sp,sp,-8
  809998:	008020b4 	movhi	r2,130
  80999c:	10b83b04 	addi	r2,r2,-7956
  8099a0:	dc000015 	stw	r16,0(sp)
  8099a4:	14000017 	ldw	r16,0(r2)
  8099a8:	dfc00115 	stw	ra,4(sp)
  8099ac:	00932574 	movhi	r2,19605
  8099b0:	109fcb44 	addi	r2,r2,32557
  8099b4:	82002917 	ldw	r8,164(r16)
  8099b8:	82402a17 	ldw	r9,168(r16)
  8099bc:	00d614b4 	movhi	r3,22610
  8099c0:	18fd0b44 	addi	r3,r3,-3027
  8099c4:	4009883a 	mov	r4,r8
  8099c8:	180f883a 	mov	r7,r3
  8099cc:	100d883a 	mov	r6,r2
  8099d0:	480b883a 	mov	r5,r9
  8099d4:	08088800 	call	808880 <__muldi3>
  8099d8:	02000044 	movi	r8,1
  8099dc:	1209883a 	add	r4,r2,r8
  8099e0:	2095803a 	cmpltu	r10,r4,r2
  8099e4:	50d5883a 	add	r10,r10,r3
  8099e8:	81002915 	stw	r4,164(r16)
  8099ec:	01200034 	movhi	r4,32768
  8099f0:	213fffc4 	addi	r4,r4,-1
  8099f4:	2284703a 	and	r2,r4,r10
  8099f8:	82802a15 	stw	r10,168(r16)
  8099fc:	dfc00117 	ldw	ra,4(sp)
  809a00:	dc000017 	ldw	r16,0(sp)
  809a04:	dec00204 	addi	sp,sp,8
  809a08:	f800283a 	ret

00809a0c <_sbrk_r>:
  809a0c:	defffd04 	addi	sp,sp,-12
  809a10:	dc000015 	stw	r16,0(sp)
  809a14:	040020b4 	movhi	r16,130
  809a18:	843f6904 	addi	r16,r16,-604
  809a1c:	dc400115 	stw	r17,4(sp)
  809a20:	80000015 	stw	zero,0(r16)
  809a24:	2023883a 	mov	r17,r4
  809a28:	2809883a 	mov	r4,r5
  809a2c:	dfc00215 	stw	ra,8(sp)
  809a30:	0811f7c0 	call	811f7c <sbrk>
  809a34:	1007883a 	mov	r3,r2
  809a38:	00bfffc4 	movi	r2,-1
  809a3c:	18800626 	beq	r3,r2,809a58 <_sbrk_r+0x4c>
  809a40:	1805883a 	mov	r2,r3
  809a44:	dfc00217 	ldw	ra,8(sp)
  809a48:	dc400117 	ldw	r17,4(sp)
  809a4c:	dc000017 	ldw	r16,0(sp)
  809a50:	dec00304 	addi	sp,sp,12
  809a54:	f800283a 	ret
  809a58:	80800017 	ldw	r2,0(r16)
  809a5c:	103ff826 	beq	r2,zero,809a40 <_sbrk_r+0x34>
  809a60:	88800015 	stw	r2,0(r17)
  809a64:	1805883a 	mov	r2,r3
  809a68:	dfc00217 	ldw	ra,8(sp)
  809a6c:	dc400117 	ldw	r17,4(sp)
  809a70:	dc000017 	ldw	r16,0(sp)
  809a74:	dec00304 	addi	sp,sp,12
  809a78:	f800283a 	ret

00809a7c <strlen>:
  809a7c:	208000cc 	andi	r2,r4,3
  809a80:	2011883a 	mov	r8,r4
  809a84:	1000161e 	bne	r2,zero,809ae0 <strlen+0x64>
  809a88:	20c00017 	ldw	r3,0(r4)
  809a8c:	017fbff4 	movhi	r5,65279
  809a90:	297fbfc4 	addi	r5,r5,-257
  809a94:	01e02074 	movhi	r7,32897
  809a98:	39e02004 	addi	r7,r7,-32640
  809a9c:	1945883a 	add	r2,r3,r5
  809aa0:	11c4703a 	and	r2,r2,r7
  809aa4:	00c6303a 	nor	r3,zero,r3
  809aa8:	1886703a 	and	r3,r3,r2
  809aac:	18000c1e 	bne	r3,zero,809ae0 <strlen+0x64>
  809ab0:	280d883a 	mov	r6,r5
  809ab4:	380b883a 	mov	r5,r7
  809ab8:	21000104 	addi	r4,r4,4
  809abc:	20800017 	ldw	r2,0(r4)
  809ac0:	1187883a 	add	r3,r2,r6
  809ac4:	1946703a 	and	r3,r3,r5
  809ac8:	0084303a 	nor	r2,zero,r2
  809acc:	10c4703a 	and	r2,r2,r3
  809ad0:	103ff926 	beq	r2,zero,809ab8 <strlen+0x3c>
  809ad4:	20800007 	ldb	r2,0(r4)
  809ad8:	10000326 	beq	r2,zero,809ae8 <strlen+0x6c>
  809adc:	21000044 	addi	r4,r4,1
  809ae0:	20800007 	ldb	r2,0(r4)
  809ae4:	103ffd1e 	bne	r2,zero,809adc <strlen+0x60>
  809ae8:	2205c83a 	sub	r2,r4,r8
  809aec:	f800283a 	ret

00809af0 <time>:
  809af0:	defffc04 	addi	sp,sp,-16
  809af4:	008020b4 	movhi	r2,130
  809af8:	10b83b04 	addi	r2,r2,-7956
  809afc:	dc000215 	stw	r16,8(sp)
  809b00:	2021883a 	mov	r16,r4
  809b04:	11000017 	ldw	r4,0(r2)
  809b08:	d80b883a 	mov	r5,sp
  809b0c:	000d883a 	mov	r6,zero
  809b10:	dfc00315 	stw	ra,12(sp)
  809b14:	080e2c80 	call	80e2c8 <_gettimeofday_r>
  809b18:	00ffffc4 	movi	r3,-1
  809b1c:	10000416 	blt	r2,zero,809b30 <time+0x40>
  809b20:	80000826 	beq	r16,zero,809b44 <time+0x54>
  809b24:	d8800017 	ldw	r2,0(sp)
  809b28:	80800015 	stw	r2,0(r16)
  809b2c:	1007883a 	mov	r3,r2
  809b30:	1805883a 	mov	r2,r3
  809b34:	dfc00317 	ldw	ra,12(sp)
  809b38:	dc000217 	ldw	r16,8(sp)
  809b3c:	dec00404 	addi	sp,sp,16
  809b40:	f800283a 	ret
  809b44:	d8800017 	ldw	r2,0(sp)
  809b48:	003ff806 	br	809b2c <time+0x3c>

00809b4c <__sprint_r>:
  809b4c:	30800217 	ldw	r2,8(r6)
  809b50:	defffe04 	addi	sp,sp,-8
  809b54:	dc000015 	stw	r16,0(sp)
  809b58:	dfc00115 	stw	ra,4(sp)
  809b5c:	3021883a 	mov	r16,r6
  809b60:	0007883a 	mov	r3,zero
  809b64:	1000061e 	bne	r2,zero,809b80 <__sprint_r+0x34>
  809b68:	1805883a 	mov	r2,r3
  809b6c:	30000115 	stw	zero,4(r6)
  809b70:	dfc00117 	ldw	ra,4(sp)
  809b74:	dc000017 	ldw	r16,0(sp)
  809b78:	dec00204 	addi	sp,sp,8
  809b7c:	f800283a 	ret
  809b80:	080dcac0 	call	80dcac <__sfvwrite_r>
  809b84:	1007883a 	mov	r3,r2
  809b88:	1805883a 	mov	r2,r3
  809b8c:	80000115 	stw	zero,4(r16)
  809b90:	80000215 	stw	zero,8(r16)
  809b94:	dfc00117 	ldw	ra,4(sp)
  809b98:	dc000017 	ldw	r16,0(sp)
  809b9c:	dec00204 	addi	sp,sp,8
  809ba0:	f800283a 	ret

00809ba4 <___vfprintf_internal_r>:
  809ba4:	defea404 	addi	sp,sp,-1392
  809ba8:	dd815815 	stw	r22,1376(sp)
  809bac:	dc015215 	stw	r16,1352(sp)
  809bb0:	d9c15115 	stw	r7,1348(sp)
  809bb4:	dfc15b15 	stw	ra,1388(sp)
  809bb8:	df015a15 	stw	fp,1384(sp)
  809bbc:	ddc15915 	stw	r23,1380(sp)
  809bc0:	dd415715 	stw	r21,1372(sp)
  809bc4:	dd015615 	stw	r20,1368(sp)
  809bc8:	dcc15515 	stw	r19,1364(sp)
  809bcc:	dc815415 	stw	r18,1360(sp)
  809bd0:	dc415315 	stw	r17,1356(sp)
  809bd4:	282d883a 	mov	r22,r5
  809bd8:	3021883a 	mov	r16,r6
  809bdc:	d9014f15 	stw	r4,1340(sp)
  809be0:	080e3440 	call	80e344 <_localeconv_r>
  809be4:	10800017 	ldw	r2,0(r2)
  809be8:	d9c15117 	ldw	r7,1348(sp)
  809bec:	d8814915 	stw	r2,1316(sp)
  809bf0:	d8814f17 	ldw	r2,1340(sp)
  809bf4:	10000226 	beq	r2,zero,809c00 <___vfprintf_internal_r+0x5c>
  809bf8:	10800e17 	ldw	r2,56(r2)
  809bfc:	10020d26 	beq	r2,zero,80a434 <___vfprintf_internal_r+0x890>
  809c00:	b080030b 	ldhu	r2,12(r22)
  809c04:	1080020c 	andi	r2,r2,8
  809c08:	10020e26 	beq	r2,zero,80a444 <___vfprintf_internal_r+0x8a0>
  809c0c:	b0800417 	ldw	r2,16(r22)
  809c10:	10020c26 	beq	r2,zero,80a444 <___vfprintf_internal_r+0x8a0>
  809c14:	b200030b 	ldhu	r8,12(r22)
  809c18:	00800284 	movi	r2,10
  809c1c:	40c0068c 	andi	r3,r8,26
  809c20:	18802f1e 	bne	r3,r2,809ce0 <___vfprintf_internal_r+0x13c>
  809c24:	b080038f 	ldh	r2,14(r22)
  809c28:	10002d16 	blt	r2,zero,809ce0 <___vfprintf_internal_r+0x13c>
  809c2c:	b240038b 	ldhu	r9,14(r22)
  809c30:	b2800717 	ldw	r10,28(r22)
  809c34:	b2c00917 	ldw	r11,36(r22)
  809c38:	d9014f17 	ldw	r4,1340(sp)
  809c3c:	dc402904 	addi	r17,sp,164
  809c40:	d8804004 	addi	r2,sp,256
  809c44:	00c10004 	movi	r3,1024
  809c48:	423fff4c 	andi	r8,r8,65533
  809c4c:	800d883a 	mov	r6,r16
  809c50:	880b883a 	mov	r5,r17
  809c54:	da002c0d 	sth	r8,176(sp)
  809c58:	da402c8d 	sth	r9,178(sp)
  809c5c:	da803015 	stw	r10,192(sp)
  809c60:	dac03215 	stw	r11,200(sp)
  809c64:	d8802d15 	stw	r2,180(sp)
  809c68:	d8c02e15 	stw	r3,184(sp)
  809c6c:	d8802915 	stw	r2,164(sp)
  809c70:	d8c02b15 	stw	r3,172(sp)
  809c74:	d8002f15 	stw	zero,188(sp)
  809c78:	0809ba40 	call	809ba4 <___vfprintf_internal_r>
  809c7c:	d8814b15 	stw	r2,1324(sp)
  809c80:	10000416 	blt	r2,zero,809c94 <___vfprintf_internal_r+0xf0>
  809c84:	d9014f17 	ldw	r4,1340(sp)
  809c88:	880b883a 	mov	r5,r17
  809c8c:	080d37c0 	call	80d37c <_fflush_r>
  809c90:	1002321e 	bne	r2,zero,80a55c <___vfprintf_internal_r+0x9b8>
  809c94:	d8802c0b 	ldhu	r2,176(sp)
  809c98:	1080100c 	andi	r2,r2,64
  809c9c:	10000326 	beq	r2,zero,809cac <___vfprintf_internal_r+0x108>
  809ca0:	b080030b 	ldhu	r2,12(r22)
  809ca4:	10801014 	ori	r2,r2,64
  809ca8:	b080030d 	sth	r2,12(r22)
  809cac:	d8814b17 	ldw	r2,1324(sp)
  809cb0:	dfc15b17 	ldw	ra,1388(sp)
  809cb4:	df015a17 	ldw	fp,1384(sp)
  809cb8:	ddc15917 	ldw	r23,1380(sp)
  809cbc:	dd815817 	ldw	r22,1376(sp)
  809cc0:	dd415717 	ldw	r21,1372(sp)
  809cc4:	dd015617 	ldw	r20,1368(sp)
  809cc8:	dcc15517 	ldw	r19,1364(sp)
  809ccc:	dc815417 	ldw	r18,1360(sp)
  809cd0:	dc415317 	ldw	r17,1356(sp)
  809cd4:	dc015217 	ldw	r16,1352(sp)
  809cd8:	dec15c04 	addi	sp,sp,1392
  809cdc:	f800283a 	ret
  809ce0:	0005883a 	mov	r2,zero
  809ce4:	0007883a 	mov	r3,zero
  809ce8:	dd401904 	addi	r21,sp,100
  809cec:	d8814215 	stw	r2,1288(sp)
  809cf0:	802f883a 	mov	r23,r16
  809cf4:	d8c14315 	stw	r3,1292(sp)
  809cf8:	d8014b15 	stw	zero,1324(sp)
  809cfc:	d8014815 	stw	zero,1312(sp)
  809d00:	d8014415 	stw	zero,1296(sp)
  809d04:	d8014715 	stw	zero,1308(sp)
  809d08:	dd400c15 	stw	r21,48(sp)
  809d0c:	d8000e15 	stw	zero,56(sp)
  809d10:	d8000d15 	stw	zero,52(sp)
  809d14:	b8800007 	ldb	r2,0(r23)
  809d18:	10001926 	beq	r2,zero,809d80 <___vfprintf_internal_r+0x1dc>
  809d1c:	00c00944 	movi	r3,37
  809d20:	10c01726 	beq	r2,r3,809d80 <___vfprintf_internal_r+0x1dc>
  809d24:	b821883a 	mov	r16,r23
  809d28:	00000106 	br	809d30 <___vfprintf_internal_r+0x18c>
  809d2c:	10c00326 	beq	r2,r3,809d3c <___vfprintf_internal_r+0x198>
  809d30:	84000044 	addi	r16,r16,1
  809d34:	80800007 	ldb	r2,0(r16)
  809d38:	103ffc1e 	bne	r2,zero,809d2c <___vfprintf_internal_r+0x188>
  809d3c:	85e7c83a 	sub	r19,r16,r23
  809d40:	98000e26 	beq	r19,zero,809d7c <___vfprintf_internal_r+0x1d8>
  809d44:	dc800e17 	ldw	r18,56(sp)
  809d48:	dc400d17 	ldw	r17,52(sp)
  809d4c:	008001c4 	movi	r2,7
  809d50:	94e5883a 	add	r18,r18,r19
  809d54:	8c400044 	addi	r17,r17,1
  809d58:	adc00015 	stw	r23,0(r21)
  809d5c:	dc800e15 	stw	r18,56(sp)
  809d60:	acc00115 	stw	r19,4(r21)
  809d64:	dc400d15 	stw	r17,52(sp)
  809d68:	14428b16 	blt	r2,r17,80a798 <___vfprintf_internal_r+0xbf4>
  809d6c:	ad400204 	addi	r21,r21,8
  809d70:	d9014b17 	ldw	r4,1324(sp)
  809d74:	24c9883a 	add	r4,r4,r19
  809d78:	d9014b15 	stw	r4,1324(sp)
  809d7c:	802f883a 	mov	r23,r16
  809d80:	b8800007 	ldb	r2,0(r23)
  809d84:	10013c26 	beq	r2,zero,80a278 <___vfprintf_internal_r+0x6d4>
  809d88:	bdc00044 	addi	r23,r23,1
  809d8c:	d8000405 	stb	zero,16(sp)
  809d90:	b8c00007 	ldb	r3,0(r23)
  809d94:	04ffffc4 	movi	r19,-1
  809d98:	d8014c15 	stw	zero,1328(sp)
  809d9c:	d8014a15 	stw	zero,1320(sp)
  809da0:	d8c14d15 	stw	r3,1332(sp)
  809da4:	bdc00044 	addi	r23,r23,1
  809da8:	d9414d17 	ldw	r5,1332(sp)
  809dac:	00801604 	movi	r2,88
  809db0:	28fff804 	addi	r3,r5,-32
  809db4:	10c06036 	bltu	r2,r3,809f38 <___vfprintf_internal_r+0x394>
  809db8:	18c5883a 	add	r2,r3,r3
  809dbc:	1085883a 	add	r2,r2,r2
  809dc0:	00c02074 	movhi	r3,129
  809dc4:	18e77504 	addi	r3,r3,-25132
  809dc8:	10c5883a 	add	r2,r2,r3
  809dcc:	11000017 	ldw	r4,0(r2)
  809dd0:	2000683a 	jmp	r4
  809dd4:	0080ad48 	cmpgei	r2,zero,693
  809dd8:	00809f38 	rdprs	r2,zero,636
  809ddc:	00809f38 	rdprs	r2,zero,636
  809de0:	0080ad34 	movhi	r2,692
  809de4:	00809f38 	rdprs	r2,zero,636
  809de8:	00809f38 	rdprs	r2,zero,636
  809dec:	00809f38 	rdprs	r2,zero,636
  809df0:	00809f38 	rdprs	r2,zero,636
  809df4:	00809f38 	rdprs	r2,zero,636
  809df8:	00809f38 	rdprs	r2,zero,636
  809dfc:	0080ab14 	movui	r2,684
  809e00:	0080ad24 	muli	r2,zero,692
  809e04:	00809f38 	rdprs	r2,zero,636
  809e08:	0080ab2c 	andhi	r2,zero,684
  809e0c:	0080adc0 	call	80adc <__reset-0x77f524>
  809e10:	00809f38 	rdprs	r2,zero,636
  809e14:	0080adac 	andhi	r2,zero,694
  809e18:	0080ad74 	movhi	r2,693
  809e1c:	0080ad74 	movhi	r2,693
  809e20:	0080ad74 	movhi	r2,693
  809e24:	0080ad74 	movhi	r2,693
  809e28:	0080ad74 	movhi	r2,693
  809e2c:	0080ad74 	movhi	r2,693
  809e30:	0080ad74 	movhi	r2,693
  809e34:	0080ad74 	movhi	r2,693
  809e38:	0080ad74 	movhi	r2,693
  809e3c:	00809f38 	rdprs	r2,zero,636
  809e40:	00809f38 	rdprs	r2,zero,636
  809e44:	00809f38 	rdprs	r2,zero,636
  809e48:	00809f38 	rdprs	r2,zero,636
  809e4c:	00809f38 	rdprs	r2,zero,636
  809e50:	00809f38 	rdprs	r2,zero,636
  809e54:	00809f38 	rdprs	r2,zero,636
  809e58:	00809f38 	rdprs	r2,zero,636
  809e5c:	00809f38 	rdprs	r2,zero,636
  809e60:	00809f38 	rdprs	r2,zero,636
  809e64:	0080a590 	cmplti	r2,zero,662
  809e68:	0080abfc 	xorhi	r2,zero,687
  809e6c:	00809f38 	rdprs	r2,zero,636
  809e70:	0080abfc 	xorhi	r2,zero,687
  809e74:	00809f38 	rdprs	r2,zero,636
  809e78:	00809f38 	rdprs	r2,zero,636
  809e7c:	00809f38 	rdprs	r2,zero,636
  809e80:	00809f38 	rdprs	r2,zero,636
  809e84:	0080ad60 	cmpeqi	r2,zero,693
  809e88:	00809f38 	rdprs	r2,zero,636
  809e8c:	00809f38 	rdprs	r2,zero,636
  809e90:	0080a644 	movi	r2,665
  809e94:	00809f38 	rdprs	r2,zero,636
  809e98:	00809f38 	rdprs	r2,zero,636
  809e9c:	00809f38 	rdprs	r2,zero,636
  809ea0:	00809f38 	rdprs	r2,zero,636
  809ea4:	00809f38 	rdprs	r2,zero,636
  809ea8:	0080a690 	cmplti	r2,zero,666
  809eac:	00809f38 	rdprs	r2,zero,636
  809eb0:	00809f38 	rdprs	r2,zero,636
  809eb4:	0080acb0 	cmpltui	r2,zero,690
  809eb8:	00809f38 	rdprs	r2,zero,636
  809ebc:	00809f38 	rdprs	r2,zero,636
  809ec0:	00809f38 	rdprs	r2,zero,636
  809ec4:	00809f38 	rdprs	r2,zero,636
  809ec8:	00809f38 	rdprs	r2,zero,636
  809ecc:	00809f38 	rdprs	r2,zero,636
  809ed0:	00809f38 	rdprs	r2,zero,636
  809ed4:	00809f38 	rdprs	r2,zero,636
  809ed8:	00809f38 	rdprs	r2,zero,636
  809edc:	00809f38 	rdprs	r2,zero,636
  809ee0:	0080ac84 	movi	r2,690
  809ee4:	0080a59c 	xori	r2,zero,662
  809ee8:	0080abfc 	xorhi	r2,zero,687
  809eec:	0080abfc 	xorhi	r2,zero,687
  809ef0:	0080abfc 	xorhi	r2,zero,687
  809ef4:	0080abe8 	cmpgeui	r2,zero,687
  809ef8:	0080a59c 	xori	r2,zero,662
  809efc:	00809f38 	rdprs	r2,zero,636
  809f00:	00809f38 	rdprs	r2,zero,636
  809f04:	0080ab70 	cmpltui	r2,zero,685
  809f08:	00809f38 	rdprs	r2,zero,636
  809f0c:	0080ab40 	call	80ab4 <__reset-0x77f54c>
  809f10:	0080a650 	cmplti	r2,zero,665
  809f14:	0080aba0 	cmpeqi	r2,zero,686
  809f18:	0080ab8c 	andi	r2,zero,686
  809f1c:	00809f38 	rdprs	r2,zero,636
  809f20:	0080ae1c 	xori	r2,zero,696
  809f24:	00809f38 	rdprs	r2,zero,636
  809f28:	0080a69c 	xori	r2,zero,666
  809f2c:	00809f38 	rdprs	r2,zero,636
  809f30:	00809f38 	rdprs	r2,zero,636
  809f34:	0080ad14 	movui	r2,692
  809f38:	d9014d17 	ldw	r4,1332(sp)
  809f3c:	2000ce26 	beq	r4,zero,80a278 <___vfprintf_internal_r+0x6d4>
  809f40:	01400044 	movi	r5,1
  809f44:	d9800f04 	addi	r6,sp,60
  809f48:	d9c14015 	stw	r7,1280(sp)
  809f4c:	d9414515 	stw	r5,1300(sp)
  809f50:	d9814115 	stw	r6,1284(sp)
  809f54:	280f883a 	mov	r7,r5
  809f58:	d9000f05 	stb	r4,60(sp)
  809f5c:	d8000405 	stb	zero,16(sp)
  809f60:	d8014615 	stw	zero,1304(sp)
  809f64:	d8c14c17 	ldw	r3,1328(sp)
  809f68:	1880008c 	andi	r2,r3,2
  809f6c:	1005003a 	cmpeq	r2,r2,zero
  809f70:	d8815015 	stw	r2,1344(sp)
  809f74:	1000031e 	bne	r2,zero,809f84 <___vfprintf_internal_r+0x3e0>
  809f78:	d9014517 	ldw	r4,1300(sp)
  809f7c:	21000084 	addi	r4,r4,2
  809f80:	d9014515 	stw	r4,1300(sp)
  809f84:	d9414c17 	ldw	r5,1328(sp)
  809f88:	2940210c 	andi	r5,r5,132
  809f8c:	d9414e15 	stw	r5,1336(sp)
  809f90:	28002d1e 	bne	r5,zero,80a048 <___vfprintf_internal_r+0x4a4>
  809f94:	d9814a17 	ldw	r6,1320(sp)
  809f98:	d8814517 	ldw	r2,1300(sp)
  809f9c:	30a1c83a 	sub	r16,r6,r2
  809fa0:	0400290e 	bge	zero,r16,80a048 <___vfprintf_internal_r+0x4a4>
  809fa4:	00800404 	movi	r2,16
  809fa8:	1404580e 	bge	r2,r16,80b10c <___vfprintf_internal_r+0x1568>
  809fac:	dc800e17 	ldw	r18,56(sp)
  809fb0:	dc400d17 	ldw	r17,52(sp)
  809fb4:	1027883a 	mov	r19,r2
  809fb8:	070020b4 	movhi	fp,130
  809fbc:	e730b584 	addi	fp,fp,-15658
  809fc0:	050001c4 	movi	r20,7
  809fc4:	00000306 	br	809fd4 <___vfprintf_internal_r+0x430>
  809fc8:	843ffc04 	addi	r16,r16,-16
  809fcc:	ad400204 	addi	r21,r21,8
  809fd0:	9c00130e 	bge	r19,r16,80a020 <___vfprintf_internal_r+0x47c>
  809fd4:	94800404 	addi	r18,r18,16
  809fd8:	8c400044 	addi	r17,r17,1
  809fdc:	af000015 	stw	fp,0(r21)
  809fe0:	acc00115 	stw	r19,4(r21)
  809fe4:	dc800e15 	stw	r18,56(sp)
  809fe8:	dc400d15 	stw	r17,52(sp)
  809fec:	a47ff60e 	bge	r20,r17,809fc8 <___vfprintf_internal_r+0x424>
  809ff0:	d9014f17 	ldw	r4,1340(sp)
  809ff4:	b00b883a 	mov	r5,r22
  809ff8:	d9800c04 	addi	r6,sp,48
  809ffc:	d9c15115 	stw	r7,1348(sp)
  80a000:	0809b4c0 	call	809b4c <__sprint_r>
  80a004:	d9c15117 	ldw	r7,1348(sp)
  80a008:	10009e1e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80a00c:	843ffc04 	addi	r16,r16,-16
  80a010:	dc800e17 	ldw	r18,56(sp)
  80a014:	dc400d17 	ldw	r17,52(sp)
  80a018:	dd401904 	addi	r21,sp,100
  80a01c:	9c3fed16 	blt	r19,r16,809fd4 <___vfprintf_internal_r+0x430>
  80a020:	9425883a 	add	r18,r18,r16
  80a024:	8c400044 	addi	r17,r17,1
  80a028:	008001c4 	movi	r2,7
  80a02c:	af000015 	stw	fp,0(r21)
  80a030:	ac000115 	stw	r16,4(r21)
  80a034:	dc800e15 	stw	r18,56(sp)
  80a038:	dc400d15 	stw	r17,52(sp)
  80a03c:	1441f516 	blt	r2,r17,80a814 <___vfprintf_internal_r+0xc70>
  80a040:	ad400204 	addi	r21,r21,8
  80a044:	00000206 	br	80a050 <___vfprintf_internal_r+0x4ac>
  80a048:	dc800e17 	ldw	r18,56(sp)
  80a04c:	dc400d17 	ldw	r17,52(sp)
  80a050:	d8800407 	ldb	r2,16(sp)
  80a054:	10000b26 	beq	r2,zero,80a084 <___vfprintf_internal_r+0x4e0>
  80a058:	00800044 	movi	r2,1
  80a05c:	94800044 	addi	r18,r18,1
  80a060:	8c400044 	addi	r17,r17,1
  80a064:	a8800115 	stw	r2,4(r21)
  80a068:	d8c00404 	addi	r3,sp,16
  80a06c:	008001c4 	movi	r2,7
  80a070:	a8c00015 	stw	r3,0(r21)
  80a074:	dc800e15 	stw	r18,56(sp)
  80a078:	dc400d15 	stw	r17,52(sp)
  80a07c:	1441da16 	blt	r2,r17,80a7e8 <___vfprintf_internal_r+0xc44>
  80a080:	ad400204 	addi	r21,r21,8
  80a084:	d9015017 	ldw	r4,1344(sp)
  80a088:	20000b1e 	bne	r4,zero,80a0b8 <___vfprintf_internal_r+0x514>
  80a08c:	d8800444 	addi	r2,sp,17
  80a090:	94800084 	addi	r18,r18,2
  80a094:	8c400044 	addi	r17,r17,1
  80a098:	a8800015 	stw	r2,0(r21)
  80a09c:	00c00084 	movi	r3,2
  80a0a0:	008001c4 	movi	r2,7
  80a0a4:	a8c00115 	stw	r3,4(r21)
  80a0a8:	dc800e15 	stw	r18,56(sp)
  80a0ac:	dc400d15 	stw	r17,52(sp)
  80a0b0:	1441c216 	blt	r2,r17,80a7bc <___vfprintf_internal_r+0xc18>
  80a0b4:	ad400204 	addi	r21,r21,8
  80a0b8:	d9414e17 	ldw	r5,1336(sp)
  80a0bc:	00802004 	movi	r2,128
  80a0c0:	2880b126 	beq	r5,r2,80a388 <___vfprintf_internal_r+0x7e4>
  80a0c4:	d8c14617 	ldw	r3,1304(sp)
  80a0c8:	19e1c83a 	sub	r16,r3,r7
  80a0cc:	0400260e 	bge	zero,r16,80a168 <___vfprintf_internal_r+0x5c4>
  80a0d0:	00800404 	movi	r2,16
  80a0d4:	1403c90e 	bge	r2,r16,80affc <___vfprintf_internal_r+0x1458>
  80a0d8:	1027883a 	mov	r19,r2
  80a0dc:	070020b4 	movhi	fp,130
  80a0e0:	e730b184 	addi	fp,fp,-15674
  80a0e4:	050001c4 	movi	r20,7
  80a0e8:	00000306 	br	80a0f8 <___vfprintf_internal_r+0x554>
  80a0ec:	843ffc04 	addi	r16,r16,-16
  80a0f0:	ad400204 	addi	r21,r21,8
  80a0f4:	9c00130e 	bge	r19,r16,80a144 <___vfprintf_internal_r+0x5a0>
  80a0f8:	94800404 	addi	r18,r18,16
  80a0fc:	8c400044 	addi	r17,r17,1
  80a100:	af000015 	stw	fp,0(r21)
  80a104:	acc00115 	stw	r19,4(r21)
  80a108:	dc800e15 	stw	r18,56(sp)
  80a10c:	dc400d15 	stw	r17,52(sp)
  80a110:	a47ff60e 	bge	r20,r17,80a0ec <___vfprintf_internal_r+0x548>
  80a114:	d9014f17 	ldw	r4,1340(sp)
  80a118:	b00b883a 	mov	r5,r22
  80a11c:	d9800c04 	addi	r6,sp,48
  80a120:	d9c15115 	stw	r7,1348(sp)
  80a124:	0809b4c0 	call	809b4c <__sprint_r>
  80a128:	d9c15117 	ldw	r7,1348(sp)
  80a12c:	1000551e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80a130:	843ffc04 	addi	r16,r16,-16
  80a134:	dc800e17 	ldw	r18,56(sp)
  80a138:	dc400d17 	ldw	r17,52(sp)
  80a13c:	dd401904 	addi	r21,sp,100
  80a140:	9c3fed16 	blt	r19,r16,80a0f8 <___vfprintf_internal_r+0x554>
  80a144:	9425883a 	add	r18,r18,r16
  80a148:	8c400044 	addi	r17,r17,1
  80a14c:	008001c4 	movi	r2,7
  80a150:	af000015 	stw	fp,0(r21)
  80a154:	ac000115 	stw	r16,4(r21)
  80a158:	dc800e15 	stw	r18,56(sp)
  80a15c:	dc400d15 	stw	r17,52(sp)
  80a160:	14418216 	blt	r2,r17,80a76c <___vfprintf_internal_r+0xbc8>
  80a164:	ad400204 	addi	r21,r21,8
  80a168:	d9014c17 	ldw	r4,1328(sp)
  80a16c:	2080400c 	andi	r2,r4,256
  80a170:	10004a1e 	bne	r2,zero,80a29c <___vfprintf_internal_r+0x6f8>
  80a174:	d9414117 	ldw	r5,1284(sp)
  80a178:	91e5883a 	add	r18,r18,r7
  80a17c:	8c400044 	addi	r17,r17,1
  80a180:	008001c4 	movi	r2,7
  80a184:	a9400015 	stw	r5,0(r21)
  80a188:	a9c00115 	stw	r7,4(r21)
  80a18c:	dc800e15 	stw	r18,56(sp)
  80a190:	dc400d15 	stw	r17,52(sp)
  80a194:	14416716 	blt	r2,r17,80a734 <___vfprintf_internal_r+0xb90>
  80a198:	a8c00204 	addi	r3,r21,8
  80a19c:	d9814c17 	ldw	r6,1328(sp)
  80a1a0:	3080010c 	andi	r2,r6,4
  80a1a4:	10002826 	beq	r2,zero,80a248 <___vfprintf_internal_r+0x6a4>
  80a1a8:	d8814a17 	ldw	r2,1320(sp)
  80a1ac:	d9014517 	ldw	r4,1300(sp)
  80a1b0:	1121c83a 	sub	r16,r2,r4
  80a1b4:	0400240e 	bge	zero,r16,80a248 <___vfprintf_internal_r+0x6a4>
  80a1b8:	00800404 	movi	r2,16
  80a1bc:	14044f0e 	bge	r2,r16,80b2fc <___vfprintf_internal_r+0x1758>
  80a1c0:	dc400d17 	ldw	r17,52(sp)
  80a1c4:	1027883a 	mov	r19,r2
  80a1c8:	070020b4 	movhi	fp,130
  80a1cc:	e730b584 	addi	fp,fp,-15658
  80a1d0:	050001c4 	movi	r20,7
  80a1d4:	00000306 	br	80a1e4 <___vfprintf_internal_r+0x640>
  80a1d8:	843ffc04 	addi	r16,r16,-16
  80a1dc:	18c00204 	addi	r3,r3,8
  80a1e0:	9c00110e 	bge	r19,r16,80a228 <___vfprintf_internal_r+0x684>
  80a1e4:	94800404 	addi	r18,r18,16
  80a1e8:	8c400044 	addi	r17,r17,1
  80a1ec:	1f000015 	stw	fp,0(r3)
  80a1f0:	1cc00115 	stw	r19,4(r3)
  80a1f4:	dc800e15 	stw	r18,56(sp)
  80a1f8:	dc400d15 	stw	r17,52(sp)
  80a1fc:	a47ff60e 	bge	r20,r17,80a1d8 <___vfprintf_internal_r+0x634>
  80a200:	d9014f17 	ldw	r4,1340(sp)
  80a204:	b00b883a 	mov	r5,r22
  80a208:	d9800c04 	addi	r6,sp,48
  80a20c:	0809b4c0 	call	809b4c <__sprint_r>
  80a210:	10001c1e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80a214:	843ffc04 	addi	r16,r16,-16
  80a218:	dc800e17 	ldw	r18,56(sp)
  80a21c:	dc400d17 	ldw	r17,52(sp)
  80a220:	d8c01904 	addi	r3,sp,100
  80a224:	9c3fef16 	blt	r19,r16,80a1e4 <___vfprintf_internal_r+0x640>
  80a228:	9425883a 	add	r18,r18,r16
  80a22c:	8c400044 	addi	r17,r17,1
  80a230:	008001c4 	movi	r2,7
  80a234:	1f000015 	stw	fp,0(r3)
  80a238:	1c000115 	stw	r16,4(r3)
  80a23c:	dc800e15 	stw	r18,56(sp)
  80a240:	dc400d15 	stw	r17,52(sp)
  80a244:	1440cb16 	blt	r2,r17,80a574 <___vfprintf_internal_r+0x9d0>
  80a248:	d8814a17 	ldw	r2,1320(sp)
  80a24c:	d9414517 	ldw	r5,1300(sp)
  80a250:	1140010e 	bge	r2,r5,80a258 <___vfprintf_internal_r+0x6b4>
  80a254:	2805883a 	mov	r2,r5
  80a258:	d9814b17 	ldw	r6,1324(sp)
  80a25c:	308d883a 	add	r6,r6,r2
  80a260:	d9814b15 	stw	r6,1324(sp)
  80a264:	90013b1e 	bne	r18,zero,80a754 <___vfprintf_internal_r+0xbb0>
  80a268:	d9c14017 	ldw	r7,1280(sp)
  80a26c:	dd401904 	addi	r21,sp,100
  80a270:	d8000d15 	stw	zero,52(sp)
  80a274:	003ea706 	br	809d14 <___vfprintf_internal_r+0x170>
  80a278:	d8800e17 	ldw	r2,56(sp)
  80a27c:	10053f1e 	bne	r2,zero,80b77c <___vfprintf_internal_r+0x1bd8>
  80a280:	d8000d15 	stw	zero,52(sp)
  80a284:	b080030b 	ldhu	r2,12(r22)
  80a288:	1080100c 	andi	r2,r2,64
  80a28c:	103e8726 	beq	r2,zero,809cac <___vfprintf_internal_r+0x108>
  80a290:	00bfffc4 	movi	r2,-1
  80a294:	d8814b15 	stw	r2,1324(sp)
  80a298:	003e8406 	br	809cac <___vfprintf_internal_r+0x108>
  80a29c:	d9814d17 	ldw	r6,1332(sp)
  80a2a0:	00801944 	movi	r2,101
  80a2a4:	11806e16 	blt	r2,r6,80a460 <___vfprintf_internal_r+0x8bc>
  80a2a8:	d9414717 	ldw	r5,1308(sp)
  80a2ac:	00c00044 	movi	r3,1
  80a2b0:	1943430e 	bge	r3,r5,80afc0 <___vfprintf_internal_r+0x141c>
  80a2b4:	d8814117 	ldw	r2,1284(sp)
  80a2b8:	94800044 	addi	r18,r18,1
  80a2bc:	8c400044 	addi	r17,r17,1
  80a2c0:	a8800015 	stw	r2,0(r21)
  80a2c4:	008001c4 	movi	r2,7
  80a2c8:	a8c00115 	stw	r3,4(r21)
  80a2cc:	dc800e15 	stw	r18,56(sp)
  80a2d0:	dc400d15 	stw	r17,52(sp)
  80a2d4:	1441ca16 	blt	r2,r17,80aa00 <___vfprintf_internal_r+0xe5c>
  80a2d8:	a8c00204 	addi	r3,r21,8
  80a2dc:	d9014917 	ldw	r4,1316(sp)
  80a2e0:	00800044 	movi	r2,1
  80a2e4:	94800044 	addi	r18,r18,1
  80a2e8:	8c400044 	addi	r17,r17,1
  80a2ec:	18800115 	stw	r2,4(r3)
  80a2f0:	008001c4 	movi	r2,7
  80a2f4:	19000015 	stw	r4,0(r3)
  80a2f8:	dc800e15 	stw	r18,56(sp)
  80a2fc:	dc400d15 	stw	r17,52(sp)
  80a300:	1441b616 	blt	r2,r17,80a9dc <___vfprintf_internal_r+0xe38>
  80a304:	1cc00204 	addi	r19,r3,8
  80a308:	d9014217 	ldw	r4,1288(sp)
  80a30c:	d9414317 	ldw	r5,1292(sp)
  80a310:	000d883a 	mov	r6,zero
  80a314:	000f883a 	mov	r7,zero
  80a318:	080830c0 	call	80830c <__nedf2>
  80a31c:	10017426 	beq	r2,zero,80a8f0 <___vfprintf_internal_r+0xd4c>
  80a320:	d9414717 	ldw	r5,1308(sp)
  80a324:	d9814117 	ldw	r6,1284(sp)
  80a328:	8c400044 	addi	r17,r17,1
  80a32c:	2c85883a 	add	r2,r5,r18
  80a330:	14bfffc4 	addi	r18,r2,-1
  80a334:	28bfffc4 	addi	r2,r5,-1
  80a338:	30c00044 	addi	r3,r6,1
  80a33c:	98800115 	stw	r2,4(r19)
  80a340:	008001c4 	movi	r2,7
  80a344:	98c00015 	stw	r3,0(r19)
  80a348:	dc800e15 	stw	r18,56(sp)
  80a34c:	dc400d15 	stw	r17,52(sp)
  80a350:	14418e16 	blt	r2,r17,80a98c <___vfprintf_internal_r+0xde8>
  80a354:	9cc00204 	addi	r19,r19,8
  80a358:	d9414817 	ldw	r5,1312(sp)
  80a35c:	d8800804 	addi	r2,sp,32
  80a360:	8c400044 	addi	r17,r17,1
  80a364:	9165883a 	add	r18,r18,r5
  80a368:	98800015 	stw	r2,0(r19)
  80a36c:	008001c4 	movi	r2,7
  80a370:	99400115 	stw	r5,4(r19)
  80a374:	dc800e15 	stw	r18,56(sp)
  80a378:	dc400d15 	stw	r17,52(sp)
  80a37c:	1440ed16 	blt	r2,r17,80a734 <___vfprintf_internal_r+0xb90>
  80a380:	98c00204 	addi	r3,r19,8
  80a384:	003f8506 	br	80a19c <___vfprintf_internal_r+0x5f8>
  80a388:	d9814a17 	ldw	r6,1320(sp)
  80a38c:	d8814517 	ldw	r2,1300(sp)
  80a390:	30a1c83a 	sub	r16,r6,r2
  80a394:	043f4b0e 	bge	zero,r16,80a0c4 <___vfprintf_internal_r+0x520>
  80a398:	00800404 	movi	r2,16
  80a39c:	1404340e 	bge	r2,r16,80b470 <___vfprintf_internal_r+0x18cc>
  80a3a0:	1027883a 	mov	r19,r2
  80a3a4:	070020b4 	movhi	fp,130
  80a3a8:	e730b184 	addi	fp,fp,-15674
  80a3ac:	050001c4 	movi	r20,7
  80a3b0:	00000306 	br	80a3c0 <___vfprintf_internal_r+0x81c>
  80a3b4:	843ffc04 	addi	r16,r16,-16
  80a3b8:	ad400204 	addi	r21,r21,8
  80a3bc:	9c00130e 	bge	r19,r16,80a40c <___vfprintf_internal_r+0x868>
  80a3c0:	94800404 	addi	r18,r18,16
  80a3c4:	8c400044 	addi	r17,r17,1
  80a3c8:	af000015 	stw	fp,0(r21)
  80a3cc:	acc00115 	stw	r19,4(r21)
  80a3d0:	dc800e15 	stw	r18,56(sp)
  80a3d4:	dc400d15 	stw	r17,52(sp)
  80a3d8:	a47ff60e 	bge	r20,r17,80a3b4 <___vfprintf_internal_r+0x810>
  80a3dc:	d9014f17 	ldw	r4,1340(sp)
  80a3e0:	b00b883a 	mov	r5,r22
  80a3e4:	d9800c04 	addi	r6,sp,48
  80a3e8:	d9c15115 	stw	r7,1348(sp)
  80a3ec:	0809b4c0 	call	809b4c <__sprint_r>
  80a3f0:	d9c15117 	ldw	r7,1348(sp)
  80a3f4:	103fa31e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80a3f8:	843ffc04 	addi	r16,r16,-16
  80a3fc:	dc800e17 	ldw	r18,56(sp)
  80a400:	dc400d17 	ldw	r17,52(sp)
  80a404:	dd401904 	addi	r21,sp,100
  80a408:	9c3fed16 	blt	r19,r16,80a3c0 <___vfprintf_internal_r+0x81c>
  80a40c:	9425883a 	add	r18,r18,r16
  80a410:	8c400044 	addi	r17,r17,1
  80a414:	008001c4 	movi	r2,7
  80a418:	af000015 	stw	fp,0(r21)
  80a41c:	ac000115 	stw	r16,4(r21)
  80a420:	dc800e15 	stw	r18,56(sp)
  80a424:	dc400d15 	stw	r17,52(sp)
  80a428:	14416116 	blt	r2,r17,80a9b0 <___vfprintf_internal_r+0xe0c>
  80a42c:	ad400204 	addi	r21,r21,8
  80a430:	003f2406 	br	80a0c4 <___vfprintf_internal_r+0x520>
  80a434:	d9014f17 	ldw	r4,1340(sp)
  80a438:	080d6140 	call	80d614 <__sinit>
  80a43c:	d9c15117 	ldw	r7,1348(sp)
  80a440:	003def06 	br	809c00 <___vfprintf_internal_r+0x5c>
  80a444:	d9014f17 	ldw	r4,1340(sp)
  80a448:	b00b883a 	mov	r5,r22
  80a44c:	d9c15115 	stw	r7,1348(sp)
  80a450:	080ba740 	call	80ba74 <__swsetup_r>
  80a454:	d9c15117 	ldw	r7,1348(sp)
  80a458:	103dee26 	beq	r2,zero,809c14 <___vfprintf_internal_r+0x70>
  80a45c:	003f8c06 	br	80a290 <___vfprintf_internal_r+0x6ec>
  80a460:	d9014217 	ldw	r4,1288(sp)
  80a464:	d9414317 	ldw	r5,1292(sp)
  80a468:	000d883a 	mov	r6,zero
  80a46c:	000f883a 	mov	r7,zero
  80a470:	08082840 	call	808284 <__eqdf2>
  80a474:	1000f21e 	bne	r2,zero,80a840 <___vfprintf_internal_r+0xc9c>
  80a478:	008020b4 	movhi	r2,130
  80a47c:	10b0b104 	addi	r2,r2,-15676
  80a480:	94800044 	addi	r18,r18,1
  80a484:	8c400044 	addi	r17,r17,1
  80a488:	a8800015 	stw	r2,0(r21)
  80a48c:	00c00044 	movi	r3,1
  80a490:	008001c4 	movi	r2,7
  80a494:	a8c00115 	stw	r3,4(r21)
  80a498:	dc800e15 	stw	r18,56(sp)
  80a49c:	dc400d15 	stw	r17,52(sp)
  80a4a0:	1442fa16 	blt	r2,r17,80b08c <___vfprintf_internal_r+0x14e8>
  80a4a4:	a8c00204 	addi	r3,r21,8
  80a4a8:	d8800517 	ldw	r2,20(sp)
  80a4ac:	d9014717 	ldw	r4,1308(sp)
  80a4b0:	11015c0e 	bge	r2,r4,80aa24 <___vfprintf_internal_r+0xe80>
  80a4b4:	dc400d17 	ldw	r17,52(sp)
  80a4b8:	d9814917 	ldw	r6,1316(sp)
  80a4bc:	00800044 	movi	r2,1
  80a4c0:	94800044 	addi	r18,r18,1
  80a4c4:	8c400044 	addi	r17,r17,1
  80a4c8:	18800115 	stw	r2,4(r3)
  80a4cc:	008001c4 	movi	r2,7
  80a4d0:	19800015 	stw	r6,0(r3)
  80a4d4:	dc800e15 	stw	r18,56(sp)
  80a4d8:	dc400d15 	stw	r17,52(sp)
  80a4dc:	14431016 	blt	r2,r17,80b120 <___vfprintf_internal_r+0x157c>
  80a4e0:	18c00204 	addi	r3,r3,8
  80a4e4:	d8814717 	ldw	r2,1308(sp)
  80a4e8:	143fffc4 	addi	r16,r2,-1
  80a4ec:	043f2b0e 	bge	zero,r16,80a19c <___vfprintf_internal_r+0x5f8>
  80a4f0:	00800404 	movi	r2,16
  80a4f4:	1402a20e 	bge	r2,r16,80af80 <___vfprintf_internal_r+0x13dc>
  80a4f8:	dc400d17 	ldw	r17,52(sp)
  80a4fc:	1027883a 	mov	r19,r2
  80a500:	070020b4 	movhi	fp,130
  80a504:	e730b184 	addi	fp,fp,-15674
  80a508:	050001c4 	movi	r20,7
  80a50c:	00000306 	br	80a51c <___vfprintf_internal_r+0x978>
  80a510:	18c00204 	addi	r3,r3,8
  80a514:	843ffc04 	addi	r16,r16,-16
  80a518:	9c029c0e 	bge	r19,r16,80af8c <___vfprintf_internal_r+0x13e8>
  80a51c:	94800404 	addi	r18,r18,16
  80a520:	8c400044 	addi	r17,r17,1
  80a524:	1f000015 	stw	fp,0(r3)
  80a528:	1cc00115 	stw	r19,4(r3)
  80a52c:	dc800e15 	stw	r18,56(sp)
  80a530:	dc400d15 	stw	r17,52(sp)
  80a534:	a47ff60e 	bge	r20,r17,80a510 <___vfprintf_internal_r+0x96c>
  80a538:	d9014f17 	ldw	r4,1340(sp)
  80a53c:	b00b883a 	mov	r5,r22
  80a540:	d9800c04 	addi	r6,sp,48
  80a544:	0809b4c0 	call	809b4c <__sprint_r>
  80a548:	103f4e1e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80a54c:	dc800e17 	ldw	r18,56(sp)
  80a550:	dc400d17 	ldw	r17,52(sp)
  80a554:	d8c01904 	addi	r3,sp,100
  80a558:	003fee06 	br	80a514 <___vfprintf_internal_r+0x970>
  80a55c:	d8802c0b 	ldhu	r2,176(sp)
  80a560:	00ffffc4 	movi	r3,-1
  80a564:	d8c14b15 	stw	r3,1324(sp)
  80a568:	1080100c 	andi	r2,r2,64
  80a56c:	103dcc1e 	bne	r2,zero,809ca0 <___vfprintf_internal_r+0xfc>
  80a570:	003dce06 	br	809cac <___vfprintf_internal_r+0x108>
  80a574:	d9014f17 	ldw	r4,1340(sp)
  80a578:	b00b883a 	mov	r5,r22
  80a57c:	d9800c04 	addi	r6,sp,48
  80a580:	0809b4c0 	call	809b4c <__sprint_r>
  80a584:	103f3f1e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80a588:	dc800e17 	ldw	r18,56(sp)
  80a58c:	003f2e06 	br	80a248 <___vfprintf_internal_r+0x6a4>
  80a590:	d9414c17 	ldw	r5,1328(sp)
  80a594:	29400414 	ori	r5,r5,16
  80a598:	d9414c15 	stw	r5,1328(sp)
  80a59c:	d9814c17 	ldw	r6,1328(sp)
  80a5a0:	3080080c 	andi	r2,r6,32
  80a5a4:	10014f1e 	bne	r2,zero,80aae4 <___vfprintf_internal_r+0xf40>
  80a5a8:	d8c14c17 	ldw	r3,1328(sp)
  80a5ac:	1880040c 	andi	r2,r3,16
  80a5b0:	1002ea1e 	bne	r2,zero,80b15c <___vfprintf_internal_r+0x15b8>
  80a5b4:	d9014c17 	ldw	r4,1328(sp)
  80a5b8:	2080100c 	andi	r2,r4,64
  80a5bc:	1002e726 	beq	r2,zero,80b15c <___vfprintf_internal_r+0x15b8>
  80a5c0:	3880000f 	ldh	r2,0(r7)
  80a5c4:	39c00104 	addi	r7,r7,4
  80a5c8:	d9c14015 	stw	r7,1280(sp)
  80a5cc:	1023d7fa 	srai	r17,r2,31
  80a5d0:	1021883a 	mov	r16,r2
  80a5d4:	88037216 	blt	r17,zero,80b3a0 <___vfprintf_internal_r+0x17fc>
  80a5d8:	01000044 	movi	r4,1
  80a5dc:	98000416 	blt	r19,zero,80a5f0 <___vfprintf_internal_r+0xa4c>
  80a5e0:	d8c14c17 	ldw	r3,1328(sp)
  80a5e4:	00bfdfc4 	movi	r2,-129
  80a5e8:	1886703a 	and	r3,r3,r2
  80a5ec:	d8c14c15 	stw	r3,1328(sp)
  80a5f0:	8444b03a 	or	r2,r16,r17
  80a5f4:	1002261e 	bne	r2,zero,80ae90 <___vfprintf_internal_r+0x12ec>
  80a5f8:	9802251e 	bne	r19,zero,80ae90 <___vfprintf_internal_r+0x12ec>
  80a5fc:	20803fcc 	andi	r2,r4,255
  80a600:	10029b26 	beq	r2,zero,80b070 <___vfprintf_internal_r+0x14cc>
  80a604:	d8c01904 	addi	r3,sp,100
  80a608:	dd000f04 	addi	r20,sp,60
  80a60c:	d8c14115 	stw	r3,1284(sp)
  80a610:	d8c14117 	ldw	r3,1284(sp)
  80a614:	dcc14515 	stw	r19,1300(sp)
  80a618:	a0c5c83a 	sub	r2,r20,r3
  80a61c:	11c00a04 	addi	r7,r2,40
  80a620:	99c0010e 	bge	r19,r7,80a628 <___vfprintf_internal_r+0xa84>
  80a624:	d9c14515 	stw	r7,1300(sp)
  80a628:	dcc14615 	stw	r19,1304(sp)
  80a62c:	d8800407 	ldb	r2,16(sp)
  80a630:	103e4c26 	beq	r2,zero,809f64 <___vfprintf_internal_r+0x3c0>
  80a634:	d8814517 	ldw	r2,1300(sp)
  80a638:	10800044 	addi	r2,r2,1
  80a63c:	d8814515 	stw	r2,1300(sp)
  80a640:	003e4806 	br	809f64 <___vfprintf_internal_r+0x3c0>
  80a644:	d9814c17 	ldw	r6,1328(sp)
  80a648:	31800414 	ori	r6,r6,16
  80a64c:	d9814c15 	stw	r6,1328(sp)
  80a650:	d8c14c17 	ldw	r3,1328(sp)
  80a654:	1880080c 	andi	r2,r3,32
  80a658:	1001271e 	bne	r2,zero,80aaf8 <___vfprintf_internal_r+0xf54>
  80a65c:	d9414c17 	ldw	r5,1328(sp)
  80a660:	2880040c 	andi	r2,r5,16
  80a664:	1002b61e 	bne	r2,zero,80b140 <___vfprintf_internal_r+0x159c>
  80a668:	d9814c17 	ldw	r6,1328(sp)
  80a66c:	3080100c 	andi	r2,r6,64
  80a670:	1002b326 	beq	r2,zero,80b140 <___vfprintf_internal_r+0x159c>
  80a674:	3c00000b 	ldhu	r16,0(r7)
  80a678:	0009883a 	mov	r4,zero
  80a67c:	39c00104 	addi	r7,r7,4
  80a680:	0023883a 	mov	r17,zero
  80a684:	d9c14015 	stw	r7,1280(sp)
  80a688:	d8000405 	stb	zero,16(sp)
  80a68c:	003fd306 	br	80a5dc <___vfprintf_internal_r+0xa38>
  80a690:	d9014c17 	ldw	r4,1328(sp)
  80a694:	21000414 	ori	r4,r4,16
  80a698:	d9014c15 	stw	r4,1328(sp)
  80a69c:	d9414c17 	ldw	r5,1328(sp)
  80a6a0:	2880080c 	andi	r2,r5,32
  80a6a4:	1001081e 	bne	r2,zero,80aac8 <___vfprintf_internal_r+0xf24>
  80a6a8:	d8c14c17 	ldw	r3,1328(sp)
  80a6ac:	1880040c 	andi	r2,r3,16
  80a6b0:	1002b01e 	bne	r2,zero,80b174 <___vfprintf_internal_r+0x15d0>
  80a6b4:	d9014c17 	ldw	r4,1328(sp)
  80a6b8:	2080100c 	andi	r2,r4,64
  80a6bc:	1002ad26 	beq	r2,zero,80b174 <___vfprintf_internal_r+0x15d0>
  80a6c0:	3c00000b 	ldhu	r16,0(r7)
  80a6c4:	01000044 	movi	r4,1
  80a6c8:	39c00104 	addi	r7,r7,4
  80a6cc:	0023883a 	mov	r17,zero
  80a6d0:	d9c14015 	stw	r7,1280(sp)
  80a6d4:	d8000405 	stb	zero,16(sp)
  80a6d8:	003fc006 	br	80a5dc <___vfprintf_internal_r+0xa38>
  80a6dc:	d9014f17 	ldw	r4,1340(sp)
  80a6e0:	b00b883a 	mov	r5,r22
  80a6e4:	d9800c04 	addi	r6,sp,48
  80a6e8:	0809b4c0 	call	809b4c <__sprint_r>
  80a6ec:	103ee51e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80a6f0:	dc800e17 	ldw	r18,56(sp)
  80a6f4:	d8c01904 	addi	r3,sp,100
  80a6f8:	d9814c17 	ldw	r6,1328(sp)
  80a6fc:	3080004c 	andi	r2,r6,1
  80a700:	1005003a 	cmpeq	r2,r2,zero
  80a704:	103ea51e 	bne	r2,zero,80a19c <___vfprintf_internal_r+0x5f8>
  80a708:	00800044 	movi	r2,1
  80a70c:	dc400d17 	ldw	r17,52(sp)
  80a710:	18800115 	stw	r2,4(r3)
  80a714:	d8814917 	ldw	r2,1316(sp)
  80a718:	94800044 	addi	r18,r18,1
  80a71c:	8c400044 	addi	r17,r17,1
  80a720:	18800015 	stw	r2,0(r3)
  80a724:	008001c4 	movi	r2,7
  80a728:	dc800e15 	stw	r18,56(sp)
  80a72c:	dc400d15 	stw	r17,52(sp)
  80a730:	14421e0e 	bge	r2,r17,80afac <___vfprintf_internal_r+0x1408>
  80a734:	d9014f17 	ldw	r4,1340(sp)
  80a738:	b00b883a 	mov	r5,r22
  80a73c:	d9800c04 	addi	r6,sp,48
  80a740:	0809b4c0 	call	809b4c <__sprint_r>
  80a744:	103ecf1e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80a748:	dc800e17 	ldw	r18,56(sp)
  80a74c:	d8c01904 	addi	r3,sp,100
  80a750:	003e9206 	br	80a19c <___vfprintf_internal_r+0x5f8>
  80a754:	d9014f17 	ldw	r4,1340(sp)
  80a758:	b00b883a 	mov	r5,r22
  80a75c:	d9800c04 	addi	r6,sp,48
  80a760:	0809b4c0 	call	809b4c <__sprint_r>
  80a764:	103ec026 	beq	r2,zero,80a268 <___vfprintf_internal_r+0x6c4>
  80a768:	003ec606 	br	80a284 <___vfprintf_internal_r+0x6e0>
  80a76c:	d9014f17 	ldw	r4,1340(sp)
  80a770:	b00b883a 	mov	r5,r22
  80a774:	d9800c04 	addi	r6,sp,48
  80a778:	d9c15115 	stw	r7,1348(sp)
  80a77c:	0809b4c0 	call	809b4c <__sprint_r>
  80a780:	d9c15117 	ldw	r7,1348(sp)
  80a784:	103ebf1e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80a788:	dc800e17 	ldw	r18,56(sp)
  80a78c:	dc400d17 	ldw	r17,52(sp)
  80a790:	dd401904 	addi	r21,sp,100
  80a794:	003e7406 	br	80a168 <___vfprintf_internal_r+0x5c4>
  80a798:	d9014f17 	ldw	r4,1340(sp)
  80a79c:	b00b883a 	mov	r5,r22
  80a7a0:	d9800c04 	addi	r6,sp,48
  80a7a4:	d9c15115 	stw	r7,1348(sp)
  80a7a8:	0809b4c0 	call	809b4c <__sprint_r>
  80a7ac:	d9c15117 	ldw	r7,1348(sp)
  80a7b0:	103eb41e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80a7b4:	dd401904 	addi	r21,sp,100
  80a7b8:	003d6d06 	br	809d70 <___vfprintf_internal_r+0x1cc>
  80a7bc:	d9014f17 	ldw	r4,1340(sp)
  80a7c0:	b00b883a 	mov	r5,r22
  80a7c4:	d9800c04 	addi	r6,sp,48
  80a7c8:	d9c15115 	stw	r7,1348(sp)
  80a7cc:	0809b4c0 	call	809b4c <__sprint_r>
  80a7d0:	d9c15117 	ldw	r7,1348(sp)
  80a7d4:	103eab1e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80a7d8:	dc800e17 	ldw	r18,56(sp)
  80a7dc:	dc400d17 	ldw	r17,52(sp)
  80a7e0:	dd401904 	addi	r21,sp,100
  80a7e4:	003e3406 	br	80a0b8 <___vfprintf_internal_r+0x514>
  80a7e8:	d9014f17 	ldw	r4,1340(sp)
  80a7ec:	b00b883a 	mov	r5,r22
  80a7f0:	d9800c04 	addi	r6,sp,48
  80a7f4:	d9c15115 	stw	r7,1348(sp)
  80a7f8:	0809b4c0 	call	809b4c <__sprint_r>
  80a7fc:	d9c15117 	ldw	r7,1348(sp)
  80a800:	103ea01e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80a804:	dc800e17 	ldw	r18,56(sp)
  80a808:	dc400d17 	ldw	r17,52(sp)
  80a80c:	dd401904 	addi	r21,sp,100
  80a810:	003e1c06 	br	80a084 <___vfprintf_internal_r+0x4e0>
  80a814:	d9014f17 	ldw	r4,1340(sp)
  80a818:	b00b883a 	mov	r5,r22
  80a81c:	d9800c04 	addi	r6,sp,48
  80a820:	d9c15115 	stw	r7,1348(sp)
  80a824:	0809b4c0 	call	809b4c <__sprint_r>
  80a828:	d9c15117 	ldw	r7,1348(sp)
  80a82c:	103e951e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80a830:	dc800e17 	ldw	r18,56(sp)
  80a834:	dc400d17 	ldw	r17,52(sp)
  80a838:	dd401904 	addi	r21,sp,100
  80a83c:	003e0406 	br	80a050 <___vfprintf_internal_r+0x4ac>
  80a840:	d9000517 	ldw	r4,20(sp)
  80a844:	0102520e 	bge	zero,r4,80b190 <___vfprintf_internal_r+0x15ec>
  80a848:	d9814717 	ldw	r6,1308(sp)
  80a84c:	21807a16 	blt	r4,r6,80aa38 <___vfprintf_internal_r+0xe94>
  80a850:	d8814117 	ldw	r2,1284(sp)
  80a854:	91a5883a 	add	r18,r18,r6
  80a858:	8c400044 	addi	r17,r17,1
  80a85c:	a8800015 	stw	r2,0(r21)
  80a860:	008001c4 	movi	r2,7
  80a864:	a9800115 	stw	r6,4(r21)
  80a868:	dc800e15 	stw	r18,56(sp)
  80a86c:	dc400d15 	stw	r17,52(sp)
  80a870:	1442f616 	blt	r2,r17,80b44c <___vfprintf_internal_r+0x18a8>
  80a874:	a8c00204 	addi	r3,r21,8
  80a878:	d9414717 	ldw	r5,1308(sp)
  80a87c:	2161c83a 	sub	r16,r4,r5
  80a880:	043f9d0e 	bge	zero,r16,80a6f8 <___vfprintf_internal_r+0xb54>
  80a884:	00800404 	movi	r2,16
  80a888:	1402130e 	bge	r2,r16,80b0d8 <___vfprintf_internal_r+0x1534>
  80a88c:	dc400d17 	ldw	r17,52(sp)
  80a890:	1027883a 	mov	r19,r2
  80a894:	070020b4 	movhi	fp,130
  80a898:	e730b184 	addi	fp,fp,-15674
  80a89c:	050001c4 	movi	r20,7
  80a8a0:	00000306 	br	80a8b0 <___vfprintf_internal_r+0xd0c>
  80a8a4:	18c00204 	addi	r3,r3,8
  80a8a8:	843ffc04 	addi	r16,r16,-16
  80a8ac:	9c020d0e 	bge	r19,r16,80b0e4 <___vfprintf_internal_r+0x1540>
  80a8b0:	94800404 	addi	r18,r18,16
  80a8b4:	8c400044 	addi	r17,r17,1
  80a8b8:	1f000015 	stw	fp,0(r3)
  80a8bc:	1cc00115 	stw	r19,4(r3)
  80a8c0:	dc800e15 	stw	r18,56(sp)
  80a8c4:	dc400d15 	stw	r17,52(sp)
  80a8c8:	a47ff60e 	bge	r20,r17,80a8a4 <___vfprintf_internal_r+0xd00>
  80a8cc:	d9014f17 	ldw	r4,1340(sp)
  80a8d0:	b00b883a 	mov	r5,r22
  80a8d4:	d9800c04 	addi	r6,sp,48
  80a8d8:	0809b4c0 	call	809b4c <__sprint_r>
  80a8dc:	103e691e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80a8e0:	dc800e17 	ldw	r18,56(sp)
  80a8e4:	dc400d17 	ldw	r17,52(sp)
  80a8e8:	d8c01904 	addi	r3,sp,100
  80a8ec:	003fee06 	br	80a8a8 <___vfprintf_internal_r+0xd04>
  80a8f0:	d8814717 	ldw	r2,1308(sp)
  80a8f4:	143fffc4 	addi	r16,r2,-1
  80a8f8:	043e970e 	bge	zero,r16,80a358 <___vfprintf_internal_r+0x7b4>
  80a8fc:	00800404 	movi	r2,16
  80a900:	1400180e 	bge	r2,r16,80a964 <___vfprintf_internal_r+0xdc0>
  80a904:	1029883a 	mov	r20,r2
  80a908:	070020b4 	movhi	fp,130
  80a90c:	e730b184 	addi	fp,fp,-15674
  80a910:	054001c4 	movi	r21,7
  80a914:	00000306 	br	80a924 <___vfprintf_internal_r+0xd80>
  80a918:	9cc00204 	addi	r19,r19,8
  80a91c:	843ffc04 	addi	r16,r16,-16
  80a920:	a400120e 	bge	r20,r16,80a96c <___vfprintf_internal_r+0xdc8>
  80a924:	94800404 	addi	r18,r18,16
  80a928:	8c400044 	addi	r17,r17,1
  80a92c:	9f000015 	stw	fp,0(r19)
  80a930:	9d000115 	stw	r20,4(r19)
  80a934:	dc800e15 	stw	r18,56(sp)
  80a938:	dc400d15 	stw	r17,52(sp)
  80a93c:	ac7ff60e 	bge	r21,r17,80a918 <___vfprintf_internal_r+0xd74>
  80a940:	d9014f17 	ldw	r4,1340(sp)
  80a944:	b00b883a 	mov	r5,r22
  80a948:	d9800c04 	addi	r6,sp,48
  80a94c:	0809b4c0 	call	809b4c <__sprint_r>
  80a950:	103e4c1e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80a954:	dc800e17 	ldw	r18,56(sp)
  80a958:	dc400d17 	ldw	r17,52(sp)
  80a95c:	dcc01904 	addi	r19,sp,100
  80a960:	003fee06 	br	80a91c <___vfprintf_internal_r+0xd78>
  80a964:	070020b4 	movhi	fp,130
  80a968:	e730b184 	addi	fp,fp,-15674
  80a96c:	9425883a 	add	r18,r18,r16
  80a970:	8c400044 	addi	r17,r17,1
  80a974:	008001c4 	movi	r2,7
  80a978:	9f000015 	stw	fp,0(r19)
  80a97c:	9c000115 	stw	r16,4(r19)
  80a980:	dc800e15 	stw	r18,56(sp)
  80a984:	dc400d15 	stw	r17,52(sp)
  80a988:	147e720e 	bge	r2,r17,80a354 <___vfprintf_internal_r+0x7b0>
  80a98c:	d9014f17 	ldw	r4,1340(sp)
  80a990:	b00b883a 	mov	r5,r22
  80a994:	d9800c04 	addi	r6,sp,48
  80a998:	0809b4c0 	call	809b4c <__sprint_r>
  80a99c:	103e391e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80a9a0:	dc800e17 	ldw	r18,56(sp)
  80a9a4:	dc400d17 	ldw	r17,52(sp)
  80a9a8:	dcc01904 	addi	r19,sp,100
  80a9ac:	003e6a06 	br	80a358 <___vfprintf_internal_r+0x7b4>
  80a9b0:	d9014f17 	ldw	r4,1340(sp)
  80a9b4:	b00b883a 	mov	r5,r22
  80a9b8:	d9800c04 	addi	r6,sp,48
  80a9bc:	d9c15115 	stw	r7,1348(sp)
  80a9c0:	0809b4c0 	call	809b4c <__sprint_r>
  80a9c4:	d9c15117 	ldw	r7,1348(sp)
  80a9c8:	103e2e1e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80a9cc:	dc800e17 	ldw	r18,56(sp)
  80a9d0:	dc400d17 	ldw	r17,52(sp)
  80a9d4:	dd401904 	addi	r21,sp,100
  80a9d8:	003dba06 	br	80a0c4 <___vfprintf_internal_r+0x520>
  80a9dc:	d9014f17 	ldw	r4,1340(sp)
  80a9e0:	b00b883a 	mov	r5,r22
  80a9e4:	d9800c04 	addi	r6,sp,48
  80a9e8:	0809b4c0 	call	809b4c <__sprint_r>
  80a9ec:	103e251e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80a9f0:	dc800e17 	ldw	r18,56(sp)
  80a9f4:	dc400d17 	ldw	r17,52(sp)
  80a9f8:	dcc01904 	addi	r19,sp,100
  80a9fc:	003e4206 	br	80a308 <___vfprintf_internal_r+0x764>
  80aa00:	d9014f17 	ldw	r4,1340(sp)
  80aa04:	b00b883a 	mov	r5,r22
  80aa08:	d9800c04 	addi	r6,sp,48
  80aa0c:	0809b4c0 	call	809b4c <__sprint_r>
  80aa10:	103e1c1e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80aa14:	dc800e17 	ldw	r18,56(sp)
  80aa18:	dc400d17 	ldw	r17,52(sp)
  80aa1c:	d8c01904 	addi	r3,sp,100
  80aa20:	003e2e06 	br	80a2dc <___vfprintf_internal_r+0x738>
  80aa24:	d9414c17 	ldw	r5,1328(sp)
  80aa28:	2880004c 	andi	r2,r5,1
  80aa2c:	1005003a 	cmpeq	r2,r2,zero
  80aa30:	103dda1e 	bne	r2,zero,80a19c <___vfprintf_internal_r+0x5f8>
  80aa34:	003e9f06 	br	80a4b4 <___vfprintf_internal_r+0x910>
  80aa38:	d8c14117 	ldw	r3,1284(sp)
  80aa3c:	9125883a 	add	r18,r18,r4
  80aa40:	8c400044 	addi	r17,r17,1
  80aa44:	008001c4 	movi	r2,7
  80aa48:	a8c00015 	stw	r3,0(r21)
  80aa4c:	a9000115 	stw	r4,4(r21)
  80aa50:	dc800e15 	stw	r18,56(sp)
  80aa54:	dc400d15 	stw	r17,52(sp)
  80aa58:	14426616 	blt	r2,r17,80b3f4 <___vfprintf_internal_r+0x1850>
  80aa5c:	a8c00204 	addi	r3,r21,8
  80aa60:	d9414917 	ldw	r5,1316(sp)
  80aa64:	00800044 	movi	r2,1
  80aa68:	94800044 	addi	r18,r18,1
  80aa6c:	8c400044 	addi	r17,r17,1
  80aa70:	18800115 	stw	r2,4(r3)
  80aa74:	008001c4 	movi	r2,7
  80aa78:	19400015 	stw	r5,0(r3)
  80aa7c:	dc800e15 	stw	r18,56(sp)
  80aa80:	dc400d15 	stw	r17,52(sp)
  80aa84:	2021883a 	mov	r16,r4
  80aa88:	14425016 	blt	r2,r17,80b3cc <___vfprintf_internal_r+0x1828>
  80aa8c:	19400204 	addi	r5,r3,8
  80aa90:	d9814717 	ldw	r6,1308(sp)
  80aa94:	8c400044 	addi	r17,r17,1
  80aa98:	dc400d15 	stw	r17,52(sp)
  80aa9c:	3107c83a 	sub	r3,r6,r4
  80aaa0:	d9014117 	ldw	r4,1284(sp)
  80aaa4:	90e5883a 	add	r18,r18,r3
  80aaa8:	28c00115 	stw	r3,4(r5)
  80aaac:	8105883a 	add	r2,r16,r4
  80aab0:	28800015 	stw	r2,0(r5)
  80aab4:	008001c4 	movi	r2,7
  80aab8:	dc800e15 	stw	r18,56(sp)
  80aabc:	147f1d16 	blt	r2,r17,80a734 <___vfprintf_internal_r+0xb90>
  80aac0:	28c00204 	addi	r3,r5,8
  80aac4:	003db506 	br	80a19c <___vfprintf_internal_r+0x5f8>
  80aac8:	3c000017 	ldw	r16,0(r7)
  80aacc:	3c400117 	ldw	r17,4(r7)
  80aad0:	39800204 	addi	r6,r7,8
  80aad4:	01000044 	movi	r4,1
  80aad8:	d9814015 	stw	r6,1280(sp)
  80aadc:	d8000405 	stb	zero,16(sp)
  80aae0:	003ebe06 	br	80a5dc <___vfprintf_internal_r+0xa38>
  80aae4:	3c000017 	ldw	r16,0(r7)
  80aae8:	3c400117 	ldw	r17,4(r7)
  80aaec:	38800204 	addi	r2,r7,8
  80aaf0:	d8814015 	stw	r2,1280(sp)
  80aaf4:	003eb706 	br	80a5d4 <___vfprintf_internal_r+0xa30>
  80aaf8:	3c000017 	ldw	r16,0(r7)
  80aafc:	3c400117 	ldw	r17,4(r7)
  80ab00:	39000204 	addi	r4,r7,8
  80ab04:	d9014015 	stw	r4,1280(sp)
  80ab08:	0009883a 	mov	r4,zero
  80ab0c:	d8000405 	stb	zero,16(sp)
  80ab10:	003eb206 	br	80a5dc <___vfprintf_internal_r+0xa38>
  80ab14:	38c00017 	ldw	r3,0(r7)
  80ab18:	39c00104 	addi	r7,r7,4
  80ab1c:	d8c14a15 	stw	r3,1320(sp)
  80ab20:	1800d10e 	bge	r3,zero,80ae68 <___vfprintf_internal_r+0x12c4>
  80ab24:	00c7c83a 	sub	r3,zero,r3
  80ab28:	d8c14a15 	stw	r3,1320(sp)
  80ab2c:	d9014c17 	ldw	r4,1328(sp)
  80ab30:	b8c00007 	ldb	r3,0(r23)
  80ab34:	21000114 	ori	r4,r4,4
  80ab38:	d9014c15 	stw	r4,1328(sp)
  80ab3c:	003c9806 	br	809da0 <___vfprintf_internal_r+0x1fc>
  80ab40:	d9814c17 	ldw	r6,1328(sp)
  80ab44:	3080080c 	andi	r2,r6,32
  80ab48:	1001f026 	beq	r2,zero,80b30c <___vfprintf_internal_r+0x1768>
  80ab4c:	d9014b17 	ldw	r4,1324(sp)
  80ab50:	38800017 	ldw	r2,0(r7)
  80ab54:	39c00104 	addi	r7,r7,4
  80ab58:	d9c14015 	stw	r7,1280(sp)
  80ab5c:	2007d7fa 	srai	r3,r4,31
  80ab60:	d9c14017 	ldw	r7,1280(sp)
  80ab64:	11000015 	stw	r4,0(r2)
  80ab68:	10c00115 	stw	r3,4(r2)
  80ab6c:	003c6906 	br	809d14 <___vfprintf_internal_r+0x170>
  80ab70:	b8c00007 	ldb	r3,0(r23)
  80ab74:	00801b04 	movi	r2,108
  80ab78:	18824f26 	beq	r3,r2,80b4b8 <___vfprintf_internal_r+0x1914>
  80ab7c:	d9414c17 	ldw	r5,1328(sp)
  80ab80:	29400414 	ori	r5,r5,16
  80ab84:	d9414c15 	stw	r5,1328(sp)
  80ab88:	003c8506 	br	809da0 <___vfprintf_internal_r+0x1fc>
  80ab8c:	d9814c17 	ldw	r6,1328(sp)
  80ab90:	b8c00007 	ldb	r3,0(r23)
  80ab94:	31800814 	ori	r6,r6,32
  80ab98:	d9814c15 	stw	r6,1328(sp)
  80ab9c:	003c8006 	br	809da0 <___vfprintf_internal_r+0x1fc>
  80aba0:	d8814c17 	ldw	r2,1328(sp)
  80aba4:	3c000017 	ldw	r16,0(r7)
  80aba8:	00c01e04 	movi	r3,120
  80abac:	10800094 	ori	r2,r2,2
  80abb0:	d8814c15 	stw	r2,1328(sp)
  80abb4:	39c00104 	addi	r7,r7,4
  80abb8:	014020b4 	movhi	r5,130
  80abbc:	29709a04 	addi	r5,r5,-15768
  80abc0:	00800c04 	movi	r2,48
  80abc4:	0023883a 	mov	r17,zero
  80abc8:	01000084 	movi	r4,2
  80abcc:	d9c14015 	stw	r7,1280(sp)
  80abd0:	d8c14d15 	stw	r3,1332(sp)
  80abd4:	d9414415 	stw	r5,1296(sp)
  80abd8:	d8800445 	stb	r2,17(sp)
  80abdc:	d8c00485 	stb	r3,18(sp)
  80abe0:	d8000405 	stb	zero,16(sp)
  80abe4:	003e7d06 	br	80a5dc <___vfprintf_internal_r+0xa38>
  80abe8:	d8814c17 	ldw	r2,1328(sp)
  80abec:	b8c00007 	ldb	r3,0(r23)
  80abf0:	10801014 	ori	r2,r2,64
  80abf4:	d8814c15 	stw	r2,1328(sp)
  80abf8:	003c6906 	br	809da0 <___vfprintf_internal_r+0x1fc>
  80abfc:	d9414c17 	ldw	r5,1328(sp)
  80ac00:	2880020c 	andi	r2,r5,8
  80ac04:	1001df26 	beq	r2,zero,80b384 <___vfprintf_internal_r+0x17e0>
  80ac08:	39800017 	ldw	r6,0(r7)
  80ac0c:	38800204 	addi	r2,r7,8
  80ac10:	d8814015 	stw	r2,1280(sp)
  80ac14:	d9814215 	stw	r6,1288(sp)
  80ac18:	39c00117 	ldw	r7,4(r7)
  80ac1c:	d9c14315 	stw	r7,1292(sp)
  80ac20:	d9014217 	ldw	r4,1288(sp)
  80ac24:	d9414317 	ldw	r5,1292(sp)
  80ac28:	080fe780 	call	80fe78 <__isinfd>
  80ac2c:	10021726 	beq	r2,zero,80b48c <___vfprintf_internal_r+0x18e8>
  80ac30:	d9014217 	ldw	r4,1288(sp)
  80ac34:	d9414317 	ldw	r5,1292(sp)
  80ac38:	000d883a 	mov	r6,zero
  80ac3c:	000f883a 	mov	r7,zero
  80ac40:	080841c0 	call	80841c <__ltdf2>
  80ac44:	1002ca16 	blt	r2,zero,80b770 <___vfprintf_internal_r+0x1bcc>
  80ac48:	d9414d17 	ldw	r5,1332(sp)
  80ac4c:	008011c4 	movi	r2,71
  80ac50:	11420a16 	blt	r2,r5,80b47c <___vfprintf_internal_r+0x18d8>
  80ac54:	018020b4 	movhi	r6,130
  80ac58:	31b09f04 	addi	r6,r6,-15748
  80ac5c:	d9814115 	stw	r6,1284(sp)
  80ac60:	d9014c17 	ldw	r4,1328(sp)
  80ac64:	00c000c4 	movi	r3,3
  80ac68:	00bfdfc4 	movi	r2,-129
  80ac6c:	2088703a 	and	r4,r4,r2
  80ac70:	180f883a 	mov	r7,r3
  80ac74:	d8c14515 	stw	r3,1300(sp)
  80ac78:	d9014c15 	stw	r4,1328(sp)
  80ac7c:	d8014615 	stw	zero,1304(sp)
  80ac80:	003e6a06 	br	80a62c <___vfprintf_internal_r+0xa88>
  80ac84:	38800017 	ldw	r2,0(r7)
  80ac88:	00c00044 	movi	r3,1
  80ac8c:	39c00104 	addi	r7,r7,4
  80ac90:	d9c14015 	stw	r7,1280(sp)
  80ac94:	d9000f04 	addi	r4,sp,60
  80ac98:	180f883a 	mov	r7,r3
  80ac9c:	d8c14515 	stw	r3,1300(sp)
  80aca0:	d9014115 	stw	r4,1284(sp)
  80aca4:	d8800f05 	stb	r2,60(sp)
  80aca8:	d8000405 	stb	zero,16(sp)
  80acac:	003cac06 	br	809f60 <___vfprintf_internal_r+0x3bc>
  80acb0:	014020b4 	movhi	r5,130
  80acb4:	2970a504 	addi	r5,r5,-15724
  80acb8:	d9414415 	stw	r5,1296(sp)
  80acbc:	d9814c17 	ldw	r6,1328(sp)
  80acc0:	3080080c 	andi	r2,r6,32
  80acc4:	1000f926 	beq	r2,zero,80b0ac <___vfprintf_internal_r+0x1508>
  80acc8:	3c000017 	ldw	r16,0(r7)
  80accc:	3c400117 	ldw	r17,4(r7)
  80acd0:	38800204 	addi	r2,r7,8
  80acd4:	d8814015 	stw	r2,1280(sp)
  80acd8:	d9414c17 	ldw	r5,1328(sp)
  80acdc:	2880004c 	andi	r2,r5,1
  80ace0:	1005003a 	cmpeq	r2,r2,zero
  80ace4:	1000b31e 	bne	r2,zero,80afb4 <___vfprintf_internal_r+0x1410>
  80ace8:	8444b03a 	or	r2,r16,r17
  80acec:	1000b126 	beq	r2,zero,80afb4 <___vfprintf_internal_r+0x1410>
  80acf0:	d9814d17 	ldw	r6,1332(sp)
  80acf4:	29400094 	ori	r5,r5,2
  80acf8:	00800c04 	movi	r2,48
  80acfc:	01000084 	movi	r4,2
  80ad00:	d9414c15 	stw	r5,1328(sp)
  80ad04:	d8800445 	stb	r2,17(sp)
  80ad08:	d9800485 	stb	r6,18(sp)
  80ad0c:	d8000405 	stb	zero,16(sp)
  80ad10:	003e3206 	br	80a5dc <___vfprintf_internal_r+0xa38>
  80ad14:	018020b4 	movhi	r6,130
  80ad18:	31b09a04 	addi	r6,r6,-15768
  80ad1c:	d9814415 	stw	r6,1296(sp)
  80ad20:	003fe606 	br	80acbc <___vfprintf_internal_r+0x1118>
  80ad24:	00800ac4 	movi	r2,43
  80ad28:	d8800405 	stb	r2,16(sp)
  80ad2c:	b8c00007 	ldb	r3,0(r23)
  80ad30:	003c1b06 	br	809da0 <___vfprintf_internal_r+0x1fc>
  80ad34:	d8814c17 	ldw	r2,1328(sp)
  80ad38:	b8c00007 	ldb	r3,0(r23)
  80ad3c:	10800054 	ori	r2,r2,1
  80ad40:	d8814c15 	stw	r2,1328(sp)
  80ad44:	003c1606 	br	809da0 <___vfprintf_internal_r+0x1fc>
  80ad48:	d8800407 	ldb	r2,16(sp)
  80ad4c:	1000461e 	bne	r2,zero,80ae68 <___vfprintf_internal_r+0x12c4>
  80ad50:	00800804 	movi	r2,32
  80ad54:	d8800405 	stb	r2,16(sp)
  80ad58:	b8c00007 	ldb	r3,0(r23)
  80ad5c:	003c1006 	br	809da0 <___vfprintf_internal_r+0x1fc>
  80ad60:	d9814c17 	ldw	r6,1328(sp)
  80ad64:	b8c00007 	ldb	r3,0(r23)
  80ad68:	31800214 	ori	r6,r6,8
  80ad6c:	d9814c15 	stw	r6,1328(sp)
  80ad70:	003c0b06 	br	809da0 <___vfprintf_internal_r+0x1fc>
  80ad74:	0007883a 	mov	r3,zero
  80ad78:	01000244 	movi	r4,9
  80ad7c:	188002a4 	muli	r2,r3,10
  80ad80:	b8c00007 	ldb	r3,0(r23)
  80ad84:	d9814d17 	ldw	r6,1332(sp)
  80ad88:	bdc00044 	addi	r23,r23,1
  80ad8c:	d8c14d15 	stw	r3,1332(sp)
  80ad90:	d9414d17 	ldw	r5,1332(sp)
  80ad94:	3085883a 	add	r2,r6,r2
  80ad98:	10fff404 	addi	r3,r2,-48
  80ad9c:	28bff404 	addi	r2,r5,-48
  80ada0:	20bff62e 	bgeu	r4,r2,80ad7c <___vfprintf_internal_r+0x11d8>
  80ada4:	d8c14a15 	stw	r3,1320(sp)
  80ada8:	003bff06 	br	809da8 <___vfprintf_internal_r+0x204>
  80adac:	d9414c17 	ldw	r5,1328(sp)
  80adb0:	b8c00007 	ldb	r3,0(r23)
  80adb4:	29402014 	ori	r5,r5,128
  80adb8:	d9414c15 	stw	r5,1328(sp)
  80adbc:	003bf806 	br	809da0 <___vfprintf_internal_r+0x1fc>
  80adc0:	b8c00007 	ldb	r3,0(r23)
  80adc4:	00800a84 	movi	r2,42
  80adc8:	bdc00044 	addi	r23,r23,1
  80adcc:	18831526 	beq	r3,r2,80ba24 <___vfprintf_internal_r+0x1e80>
  80add0:	d8c14d15 	stw	r3,1332(sp)
  80add4:	18bff404 	addi	r2,r3,-48
  80add8:	00c00244 	movi	r3,9
  80addc:	18827836 	bltu	r3,r2,80b7c0 <___vfprintf_internal_r+0x1c1c>
  80ade0:	000d883a 	mov	r6,zero
  80ade4:	308002a4 	muli	r2,r6,10
  80ade8:	b9800007 	ldb	r6,0(r23)
  80adec:	d9414d17 	ldw	r5,1332(sp)
  80adf0:	bdc00044 	addi	r23,r23,1
  80adf4:	d9814d15 	stw	r6,1332(sp)
  80adf8:	d9014d17 	ldw	r4,1332(sp)
  80adfc:	1145883a 	add	r2,r2,r5
  80ae00:	11bff404 	addi	r6,r2,-48
  80ae04:	20bff404 	addi	r2,r4,-48
  80ae08:	18bff62e 	bgeu	r3,r2,80ade4 <___vfprintf_internal_r+0x1240>
  80ae0c:	3027883a 	mov	r19,r6
  80ae10:	303be50e 	bge	r6,zero,809da8 <___vfprintf_internal_r+0x204>
  80ae14:	04ffffc4 	movi	r19,-1
  80ae18:	003be306 	br	809da8 <___vfprintf_internal_r+0x204>
  80ae1c:	d8000405 	stb	zero,16(sp)
  80ae20:	39800017 	ldw	r6,0(r7)
  80ae24:	39c00104 	addi	r7,r7,4
  80ae28:	d9c14015 	stw	r7,1280(sp)
  80ae2c:	d9814115 	stw	r6,1284(sp)
  80ae30:	3001c926 	beq	r6,zero,80b558 <___vfprintf_internal_r+0x19b4>
  80ae34:	98000e16 	blt	r19,zero,80ae70 <___vfprintf_internal_r+0x12cc>
  80ae38:	d9014117 	ldw	r4,1284(sp)
  80ae3c:	000b883a 	mov	r5,zero
  80ae40:	980d883a 	mov	r6,r19
  80ae44:	080e5940 	call	80e594 <memchr>
  80ae48:	10025926 	beq	r2,zero,80b7b0 <___vfprintf_internal_r+0x1c0c>
  80ae4c:	d8c14117 	ldw	r3,1284(sp)
  80ae50:	10cfc83a 	sub	r7,r2,r3
  80ae54:	99c19e16 	blt	r19,r7,80b4d0 <___vfprintf_internal_r+0x192c>
  80ae58:	d9c14515 	stw	r7,1300(sp)
  80ae5c:	38000916 	blt	r7,zero,80ae84 <___vfprintf_internal_r+0x12e0>
  80ae60:	d8014615 	stw	zero,1304(sp)
  80ae64:	003df106 	br	80a62c <___vfprintf_internal_r+0xa88>
  80ae68:	b8c00007 	ldb	r3,0(r23)
  80ae6c:	003bcc06 	br	809da0 <___vfprintf_internal_r+0x1fc>
  80ae70:	d9014117 	ldw	r4,1284(sp)
  80ae74:	0809a7c0 	call	809a7c <strlen>
  80ae78:	d8814515 	stw	r2,1300(sp)
  80ae7c:	100f883a 	mov	r7,r2
  80ae80:	103ff70e 	bge	r2,zero,80ae60 <___vfprintf_internal_r+0x12bc>
  80ae84:	d8014515 	stw	zero,1300(sp)
  80ae88:	d8014615 	stw	zero,1304(sp)
  80ae8c:	003de706 	br	80a62c <___vfprintf_internal_r+0xa88>
  80ae90:	20c03fcc 	andi	r3,r4,255
  80ae94:	00800044 	movi	r2,1
  80ae98:	18802d26 	beq	r3,r2,80af50 <___vfprintf_internal_r+0x13ac>
  80ae9c:	18800e36 	bltu	r3,r2,80aed8 <___vfprintf_internal_r+0x1334>
  80aea0:	00800084 	movi	r2,2
  80aea4:	1880fa26 	beq	r3,r2,80b290 <___vfprintf_internal_r+0x16ec>
  80aea8:	010020b4 	movhi	r4,130
  80aeac:	2130aa04 	addi	r4,r4,-15704
  80aeb0:	0809a7c0 	call	809a7c <strlen>
  80aeb4:	100f883a 	mov	r7,r2
  80aeb8:	dcc14515 	stw	r19,1300(sp)
  80aebc:	9880010e 	bge	r19,r2,80aec4 <___vfprintf_internal_r+0x1320>
  80aec0:	d8814515 	stw	r2,1300(sp)
  80aec4:	008020b4 	movhi	r2,130
  80aec8:	10b0aa04 	addi	r2,r2,-15704
  80aecc:	dcc14615 	stw	r19,1304(sp)
  80aed0:	d8814115 	stw	r2,1284(sp)
  80aed4:	003dd506 	br	80a62c <___vfprintf_internal_r+0xa88>
  80aed8:	d9401904 	addi	r5,sp,100
  80aedc:	dd000f04 	addi	r20,sp,60
  80aee0:	d9414115 	stw	r5,1284(sp)
  80aee4:	880a977a 	slli	r5,r17,29
  80aee8:	d9814117 	ldw	r6,1284(sp)
  80aeec:	8004d0fa 	srli	r2,r16,3
  80aef0:	8806d0fa 	srli	r3,r17,3
  80aef4:	810001cc 	andi	r4,r16,7
  80aef8:	2884b03a 	or	r2,r5,r2
  80aefc:	31bfffc4 	addi	r6,r6,-1
  80af00:	21000c04 	addi	r4,r4,48
  80af04:	d9814115 	stw	r6,1284(sp)
  80af08:	10cab03a 	or	r5,r2,r3
  80af0c:	31000005 	stb	r4,0(r6)
  80af10:	1021883a 	mov	r16,r2
  80af14:	1823883a 	mov	r17,r3
  80af18:	283ff21e 	bne	r5,zero,80aee4 <___vfprintf_internal_r+0x1340>
  80af1c:	d8c14c17 	ldw	r3,1328(sp)
  80af20:	1880004c 	andi	r2,r3,1
  80af24:	1005003a 	cmpeq	r2,r2,zero
  80af28:	103db91e 	bne	r2,zero,80a610 <___vfprintf_internal_r+0xa6c>
  80af2c:	20803fcc 	andi	r2,r4,255
  80af30:	1080201c 	xori	r2,r2,128
  80af34:	10bfe004 	addi	r2,r2,-128
  80af38:	00c00c04 	movi	r3,48
  80af3c:	10fdb426 	beq	r2,r3,80a610 <___vfprintf_internal_r+0xa6c>
  80af40:	31bfffc4 	addi	r6,r6,-1
  80af44:	d9814115 	stw	r6,1284(sp)
  80af48:	30c00005 	stb	r3,0(r6)
  80af4c:	003db006 	br	80a610 <___vfprintf_internal_r+0xa6c>
  80af50:	88800068 	cmpgeui	r2,r17,1
  80af54:	10002c1e 	bne	r2,zero,80b008 <___vfprintf_internal_r+0x1464>
  80af58:	8800021e 	bne	r17,zero,80af64 <___vfprintf_internal_r+0x13c0>
  80af5c:	00800244 	movi	r2,9
  80af60:	14002936 	bltu	r2,r16,80b008 <___vfprintf_internal_r+0x1464>
  80af64:	d90018c4 	addi	r4,sp,99
  80af68:	dd000f04 	addi	r20,sp,60
  80af6c:	d9014115 	stw	r4,1284(sp)
  80af70:	d9014117 	ldw	r4,1284(sp)
  80af74:	80800c04 	addi	r2,r16,48
  80af78:	20800005 	stb	r2,0(r4)
  80af7c:	003da406 	br	80a610 <___vfprintf_internal_r+0xa6c>
  80af80:	dc400d17 	ldw	r17,52(sp)
  80af84:	070020b4 	movhi	fp,130
  80af88:	e730b184 	addi	fp,fp,-15674
  80af8c:	9425883a 	add	r18,r18,r16
  80af90:	8c400044 	addi	r17,r17,1
  80af94:	008001c4 	movi	r2,7
  80af98:	1f000015 	stw	fp,0(r3)
  80af9c:	1c000115 	stw	r16,4(r3)
  80afa0:	dc800e15 	stw	r18,56(sp)
  80afa4:	dc400d15 	stw	r17,52(sp)
  80afa8:	147de216 	blt	r2,r17,80a734 <___vfprintf_internal_r+0xb90>
  80afac:	18c00204 	addi	r3,r3,8
  80afb0:	003c7a06 	br	80a19c <___vfprintf_internal_r+0x5f8>
  80afb4:	01000084 	movi	r4,2
  80afb8:	d8000405 	stb	zero,16(sp)
  80afbc:	003d8706 	br	80a5dc <___vfprintf_internal_r+0xa38>
  80afc0:	d9814c17 	ldw	r6,1328(sp)
  80afc4:	30c4703a 	and	r2,r6,r3
  80afc8:	1005003a 	cmpeq	r2,r2,zero
  80afcc:	103cb926 	beq	r2,zero,80a2b4 <___vfprintf_internal_r+0x710>
  80afd0:	d9014117 	ldw	r4,1284(sp)
  80afd4:	94800044 	addi	r18,r18,1
  80afd8:	8c400044 	addi	r17,r17,1
  80afdc:	008001c4 	movi	r2,7
  80afe0:	a9000015 	stw	r4,0(r21)
  80afe4:	a8c00115 	stw	r3,4(r21)
  80afe8:	dc800e15 	stw	r18,56(sp)
  80afec:	dc400d15 	stw	r17,52(sp)
  80aff0:	147e6616 	blt	r2,r17,80a98c <___vfprintf_internal_r+0xde8>
  80aff4:	acc00204 	addi	r19,r21,8
  80aff8:	003cd706 	br	80a358 <___vfprintf_internal_r+0x7b4>
  80affc:	070020b4 	movhi	fp,130
  80b000:	e730b184 	addi	fp,fp,-15674
  80b004:	003c4f06 	br	80a144 <___vfprintf_internal_r+0x5a0>
  80b008:	dd000f04 	addi	r20,sp,60
  80b00c:	dc801904 	addi	r18,sp,100
  80b010:	8009883a 	mov	r4,r16
  80b014:	880b883a 	mov	r5,r17
  80b018:	01800284 	movi	r6,10
  80b01c:	000f883a 	mov	r7,zero
  80b020:	0810b300 	call	810b30 <__umoddi3>
  80b024:	12000c04 	addi	r8,r2,48
  80b028:	94bfffc4 	addi	r18,r18,-1
  80b02c:	8009883a 	mov	r4,r16
  80b030:	880b883a 	mov	r5,r17
  80b034:	01800284 	movi	r6,10
  80b038:	000f883a 	mov	r7,zero
  80b03c:	92000005 	stb	r8,0(r18)
  80b040:	08105540 	call	810554 <__udivdi3>
  80b044:	1009883a 	mov	r4,r2
  80b048:	1021883a 	mov	r16,r2
  80b04c:	18800068 	cmpgeui	r2,r3,1
  80b050:	1823883a 	mov	r17,r3
  80b054:	103fee1e 	bne	r2,zero,80b010 <___vfprintf_internal_r+0x146c>
  80b058:	1800021e 	bne	r3,zero,80b064 <___vfprintf_internal_r+0x14c0>
  80b05c:	00800244 	movi	r2,9
  80b060:	113feb36 	bltu	r2,r4,80b010 <___vfprintf_internal_r+0x146c>
  80b064:	94bfffc4 	addi	r18,r18,-1
  80b068:	dc814115 	stw	r18,1284(sp)
  80b06c:	003fc006 	br	80af70 <___vfprintf_internal_r+0x13cc>
  80b070:	d9014c17 	ldw	r4,1328(sp)
  80b074:	2080004c 	andi	r2,r4,1
  80b078:	10009a1e 	bne	r2,zero,80b2e4 <___vfprintf_internal_r+0x1740>
  80b07c:	d9401904 	addi	r5,sp,100
  80b080:	dd000f04 	addi	r20,sp,60
  80b084:	d9414115 	stw	r5,1284(sp)
  80b088:	003d6106 	br	80a610 <___vfprintf_internal_r+0xa6c>
  80b08c:	d9014f17 	ldw	r4,1340(sp)
  80b090:	b00b883a 	mov	r5,r22
  80b094:	d9800c04 	addi	r6,sp,48
  80b098:	0809b4c0 	call	809b4c <__sprint_r>
  80b09c:	103c791e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80b0a0:	dc800e17 	ldw	r18,56(sp)
  80b0a4:	d8c01904 	addi	r3,sp,100
  80b0a8:	003cff06 	br	80a4a8 <___vfprintf_internal_r+0x904>
  80b0ac:	d8c14c17 	ldw	r3,1328(sp)
  80b0b0:	1880040c 	andi	r2,r3,16
  80b0b4:	1000711e 	bne	r2,zero,80b27c <___vfprintf_internal_r+0x16d8>
  80b0b8:	d9014c17 	ldw	r4,1328(sp)
  80b0bc:	2080100c 	andi	r2,r4,64
  80b0c0:	10006e26 	beq	r2,zero,80b27c <___vfprintf_internal_r+0x16d8>
  80b0c4:	3c00000b 	ldhu	r16,0(r7)
  80b0c8:	0023883a 	mov	r17,zero
  80b0cc:	39c00104 	addi	r7,r7,4
  80b0d0:	d9c14015 	stw	r7,1280(sp)
  80b0d4:	003f0006 	br	80acd8 <___vfprintf_internal_r+0x1134>
  80b0d8:	dc400d17 	ldw	r17,52(sp)
  80b0dc:	070020b4 	movhi	fp,130
  80b0e0:	e730b184 	addi	fp,fp,-15674
  80b0e4:	9425883a 	add	r18,r18,r16
  80b0e8:	8c400044 	addi	r17,r17,1
  80b0ec:	008001c4 	movi	r2,7
  80b0f0:	1f000015 	stw	fp,0(r3)
  80b0f4:	1c000115 	stw	r16,4(r3)
  80b0f8:	dc800e15 	stw	r18,56(sp)
  80b0fc:	dc400d15 	stw	r17,52(sp)
  80b100:	147d7616 	blt	r2,r17,80a6dc <___vfprintf_internal_r+0xb38>
  80b104:	18c00204 	addi	r3,r3,8
  80b108:	003d7b06 	br	80a6f8 <___vfprintf_internal_r+0xb54>
  80b10c:	dc800e17 	ldw	r18,56(sp)
  80b110:	dc400d17 	ldw	r17,52(sp)
  80b114:	070020b4 	movhi	fp,130
  80b118:	e730b584 	addi	fp,fp,-15658
  80b11c:	003bc006 	br	80a020 <___vfprintf_internal_r+0x47c>
  80b120:	d9014f17 	ldw	r4,1340(sp)
  80b124:	b00b883a 	mov	r5,r22
  80b128:	d9800c04 	addi	r6,sp,48
  80b12c:	0809b4c0 	call	809b4c <__sprint_r>
  80b130:	103c541e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80b134:	dc800e17 	ldw	r18,56(sp)
  80b138:	d8c01904 	addi	r3,sp,100
  80b13c:	003ce906 	br	80a4e4 <___vfprintf_internal_r+0x940>
  80b140:	3c000017 	ldw	r16,0(r7)
  80b144:	0009883a 	mov	r4,zero
  80b148:	39c00104 	addi	r7,r7,4
  80b14c:	0023883a 	mov	r17,zero
  80b150:	d9c14015 	stw	r7,1280(sp)
  80b154:	d8000405 	stb	zero,16(sp)
  80b158:	003d2006 	br	80a5dc <___vfprintf_internal_r+0xa38>
  80b15c:	38800017 	ldw	r2,0(r7)
  80b160:	39c00104 	addi	r7,r7,4
  80b164:	d9c14015 	stw	r7,1280(sp)
  80b168:	1023d7fa 	srai	r17,r2,31
  80b16c:	1021883a 	mov	r16,r2
  80b170:	003d1806 	br	80a5d4 <___vfprintf_internal_r+0xa30>
  80b174:	3c000017 	ldw	r16,0(r7)
  80b178:	01000044 	movi	r4,1
  80b17c:	39c00104 	addi	r7,r7,4
  80b180:	0023883a 	mov	r17,zero
  80b184:	d9c14015 	stw	r7,1280(sp)
  80b188:	d8000405 	stb	zero,16(sp)
  80b18c:	003d1306 	br	80a5dc <___vfprintf_internal_r+0xa38>
  80b190:	008020b4 	movhi	r2,130
  80b194:	10b0b104 	addi	r2,r2,-15676
  80b198:	94800044 	addi	r18,r18,1
  80b19c:	8c400044 	addi	r17,r17,1
  80b1a0:	a8800015 	stw	r2,0(r21)
  80b1a4:	00c00044 	movi	r3,1
  80b1a8:	008001c4 	movi	r2,7
  80b1ac:	a8c00115 	stw	r3,4(r21)
  80b1b0:	dc800e15 	stw	r18,56(sp)
  80b1b4:	dc400d15 	stw	r17,52(sp)
  80b1b8:	1440ca16 	blt	r2,r17,80b4e4 <___vfprintf_internal_r+0x1940>
  80b1bc:	a8c00204 	addi	r3,r21,8
  80b1c0:	2000061e 	bne	r4,zero,80b1dc <___vfprintf_internal_r+0x1638>
  80b1c4:	d9414717 	ldw	r5,1308(sp)
  80b1c8:	2800041e 	bne	r5,zero,80b1dc <___vfprintf_internal_r+0x1638>
  80b1cc:	d9814c17 	ldw	r6,1328(sp)
  80b1d0:	3080004c 	andi	r2,r6,1
  80b1d4:	1005003a 	cmpeq	r2,r2,zero
  80b1d8:	103bf01e 	bne	r2,zero,80a19c <___vfprintf_internal_r+0x5f8>
  80b1dc:	00800044 	movi	r2,1
  80b1e0:	dc400d17 	ldw	r17,52(sp)
  80b1e4:	18800115 	stw	r2,4(r3)
  80b1e8:	d8814917 	ldw	r2,1316(sp)
  80b1ec:	94800044 	addi	r18,r18,1
  80b1f0:	8c400044 	addi	r17,r17,1
  80b1f4:	18800015 	stw	r2,0(r3)
  80b1f8:	008001c4 	movi	r2,7
  80b1fc:	dc800e15 	stw	r18,56(sp)
  80b200:	dc400d15 	stw	r17,52(sp)
  80b204:	1440ca16 	blt	r2,r17,80b530 <___vfprintf_internal_r+0x198c>
  80b208:	18c00204 	addi	r3,r3,8
  80b20c:	0121c83a 	sub	r16,zero,r4
  80b210:	0400500e 	bge	zero,r16,80b354 <___vfprintf_internal_r+0x17b0>
  80b214:	00800404 	movi	r2,16
  80b218:	1400800e 	bge	r2,r16,80b41c <___vfprintf_internal_r+0x1878>
  80b21c:	1027883a 	mov	r19,r2
  80b220:	070020b4 	movhi	fp,130
  80b224:	e730b184 	addi	fp,fp,-15674
  80b228:	050001c4 	movi	r20,7
  80b22c:	00000306 	br	80b23c <___vfprintf_internal_r+0x1698>
  80b230:	18c00204 	addi	r3,r3,8
  80b234:	843ffc04 	addi	r16,r16,-16
  80b238:	9c007a0e 	bge	r19,r16,80b424 <___vfprintf_internal_r+0x1880>
  80b23c:	94800404 	addi	r18,r18,16
  80b240:	8c400044 	addi	r17,r17,1
  80b244:	1f000015 	stw	fp,0(r3)
  80b248:	1cc00115 	stw	r19,4(r3)
  80b24c:	dc800e15 	stw	r18,56(sp)
  80b250:	dc400d15 	stw	r17,52(sp)
  80b254:	a47ff60e 	bge	r20,r17,80b230 <___vfprintf_internal_r+0x168c>
  80b258:	d9014f17 	ldw	r4,1340(sp)
  80b25c:	b00b883a 	mov	r5,r22
  80b260:	d9800c04 	addi	r6,sp,48
  80b264:	0809b4c0 	call	809b4c <__sprint_r>
  80b268:	103c061e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80b26c:	dc800e17 	ldw	r18,56(sp)
  80b270:	dc400d17 	ldw	r17,52(sp)
  80b274:	d8c01904 	addi	r3,sp,100
  80b278:	003fee06 	br	80b234 <___vfprintf_internal_r+0x1690>
  80b27c:	3c000017 	ldw	r16,0(r7)
  80b280:	0023883a 	mov	r17,zero
  80b284:	39c00104 	addi	r7,r7,4
  80b288:	d9c14015 	stw	r7,1280(sp)
  80b28c:	003e9206 	br	80acd8 <___vfprintf_internal_r+0x1134>
  80b290:	d9401904 	addi	r5,sp,100
  80b294:	dd000f04 	addi	r20,sp,60
  80b298:	d9414115 	stw	r5,1284(sp)
  80b29c:	d9814417 	ldw	r6,1296(sp)
  80b2a0:	880a973a 	slli	r5,r17,28
  80b2a4:	8004d13a 	srli	r2,r16,4
  80b2a8:	810003cc 	andi	r4,r16,15
  80b2ac:	3109883a 	add	r4,r6,r4
  80b2b0:	2884b03a 	or	r2,r5,r2
  80b2b4:	21400003 	ldbu	r5,0(r4)
  80b2b8:	d9014117 	ldw	r4,1284(sp)
  80b2bc:	8806d13a 	srli	r3,r17,4
  80b2c0:	1021883a 	mov	r16,r2
  80b2c4:	213fffc4 	addi	r4,r4,-1
  80b2c8:	d9014115 	stw	r4,1284(sp)
  80b2cc:	d9814117 	ldw	r6,1284(sp)
  80b2d0:	10c8b03a 	or	r4,r2,r3
  80b2d4:	1823883a 	mov	r17,r3
  80b2d8:	31400005 	stb	r5,0(r6)
  80b2dc:	203fef1e 	bne	r4,zero,80b29c <___vfprintf_internal_r+0x16f8>
  80b2e0:	003ccb06 	br	80a610 <___vfprintf_internal_r+0xa6c>
  80b2e4:	00800c04 	movi	r2,48
  80b2e8:	d98018c4 	addi	r6,sp,99
  80b2ec:	dd000f04 	addi	r20,sp,60
  80b2f0:	d88018c5 	stb	r2,99(sp)
  80b2f4:	d9814115 	stw	r6,1284(sp)
  80b2f8:	003cc506 	br	80a610 <___vfprintf_internal_r+0xa6c>
  80b2fc:	dc400d17 	ldw	r17,52(sp)
  80b300:	070020b4 	movhi	fp,130
  80b304:	e730b584 	addi	fp,fp,-15658
  80b308:	003bc706 	br	80a228 <___vfprintf_internal_r+0x684>
  80b30c:	d9414c17 	ldw	r5,1328(sp)
  80b310:	2880040c 	andi	r2,r5,16
  80b314:	10007c26 	beq	r2,zero,80b508 <___vfprintf_internal_r+0x1964>
  80b318:	38800017 	ldw	r2,0(r7)
  80b31c:	39c00104 	addi	r7,r7,4
  80b320:	d9c14015 	stw	r7,1280(sp)
  80b324:	d9814b17 	ldw	r6,1324(sp)
  80b328:	d9c14017 	ldw	r7,1280(sp)
  80b32c:	11800015 	stw	r6,0(r2)
  80b330:	003a7806 	br	809d14 <___vfprintf_internal_r+0x170>
  80b334:	d9014f17 	ldw	r4,1340(sp)
  80b338:	b00b883a 	mov	r5,r22
  80b33c:	d9800c04 	addi	r6,sp,48
  80b340:	0809b4c0 	call	809b4c <__sprint_r>
  80b344:	103bcf1e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80b348:	dc800e17 	ldw	r18,56(sp)
  80b34c:	dc400d17 	ldw	r17,52(sp)
  80b350:	d8c01904 	addi	r3,sp,100
  80b354:	d9014717 	ldw	r4,1308(sp)
  80b358:	d9414117 	ldw	r5,1284(sp)
  80b35c:	8c400044 	addi	r17,r17,1
  80b360:	9125883a 	add	r18,r18,r4
  80b364:	008001c4 	movi	r2,7
  80b368:	19400015 	stw	r5,0(r3)
  80b36c:	19000115 	stw	r4,4(r3)
  80b370:	dc800e15 	stw	r18,56(sp)
  80b374:	dc400d15 	stw	r17,52(sp)
  80b378:	147cee16 	blt	r2,r17,80a734 <___vfprintf_internal_r+0xb90>
  80b37c:	18c00204 	addi	r3,r3,8
  80b380:	003b8606 	br	80a19c <___vfprintf_internal_r+0x5f8>
  80b384:	38c00017 	ldw	r3,0(r7)
  80b388:	39000204 	addi	r4,r7,8
  80b38c:	d9014015 	stw	r4,1280(sp)
  80b390:	d8c14215 	stw	r3,1288(sp)
  80b394:	39c00117 	ldw	r7,4(r7)
  80b398:	d9c14315 	stw	r7,1292(sp)
  80b39c:	003e2006 	br	80ac20 <___vfprintf_internal_r+0x107c>
  80b3a0:	0005883a 	mov	r2,zero
  80b3a4:	1409c83a 	sub	r4,r2,r16
  80b3a8:	1105803a 	cmpltu	r2,r2,r4
  80b3ac:	044bc83a 	sub	r5,zero,r17
  80b3b0:	2885c83a 	sub	r2,r5,r2
  80b3b4:	2021883a 	mov	r16,r4
  80b3b8:	1023883a 	mov	r17,r2
  80b3bc:	01000044 	movi	r4,1
  80b3c0:	00800b44 	movi	r2,45
  80b3c4:	d8800405 	stb	r2,16(sp)
  80b3c8:	003c8406 	br	80a5dc <___vfprintf_internal_r+0xa38>
  80b3cc:	d9014f17 	ldw	r4,1340(sp)
  80b3d0:	b00b883a 	mov	r5,r22
  80b3d4:	d9800c04 	addi	r6,sp,48
  80b3d8:	0809b4c0 	call	809b4c <__sprint_r>
  80b3dc:	103ba91e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80b3e0:	dc800e17 	ldw	r18,56(sp)
  80b3e4:	dc400d17 	ldw	r17,52(sp)
  80b3e8:	d9000517 	ldw	r4,20(sp)
  80b3ec:	d9401904 	addi	r5,sp,100
  80b3f0:	003da706 	br	80aa90 <___vfprintf_internal_r+0xeec>
  80b3f4:	d9014f17 	ldw	r4,1340(sp)
  80b3f8:	b00b883a 	mov	r5,r22
  80b3fc:	d9800c04 	addi	r6,sp,48
  80b400:	0809b4c0 	call	809b4c <__sprint_r>
  80b404:	103b9f1e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80b408:	dc800e17 	ldw	r18,56(sp)
  80b40c:	dc400d17 	ldw	r17,52(sp)
  80b410:	d9000517 	ldw	r4,20(sp)
  80b414:	d8c01904 	addi	r3,sp,100
  80b418:	003d9106 	br	80aa60 <___vfprintf_internal_r+0xebc>
  80b41c:	070020b4 	movhi	fp,130
  80b420:	e730b184 	addi	fp,fp,-15674
  80b424:	9425883a 	add	r18,r18,r16
  80b428:	8c400044 	addi	r17,r17,1
  80b42c:	008001c4 	movi	r2,7
  80b430:	1f000015 	stw	fp,0(r3)
  80b434:	1c000115 	stw	r16,4(r3)
  80b438:	dc800e15 	stw	r18,56(sp)
  80b43c:	dc400d15 	stw	r17,52(sp)
  80b440:	147fbc16 	blt	r2,r17,80b334 <___vfprintf_internal_r+0x1790>
  80b444:	18c00204 	addi	r3,r3,8
  80b448:	003fc206 	br	80b354 <___vfprintf_internal_r+0x17b0>
  80b44c:	d9014f17 	ldw	r4,1340(sp)
  80b450:	b00b883a 	mov	r5,r22
  80b454:	d9800c04 	addi	r6,sp,48
  80b458:	0809b4c0 	call	809b4c <__sprint_r>
  80b45c:	103b891e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80b460:	dc800e17 	ldw	r18,56(sp)
  80b464:	d9000517 	ldw	r4,20(sp)
  80b468:	d8c01904 	addi	r3,sp,100
  80b46c:	003d0206 	br	80a878 <___vfprintf_internal_r+0xcd4>
  80b470:	070020b4 	movhi	fp,130
  80b474:	e730b184 	addi	fp,fp,-15674
  80b478:	003be406 	br	80a40c <___vfprintf_internal_r+0x868>
  80b47c:	008020b4 	movhi	r2,130
  80b480:	10b0a004 	addi	r2,r2,-15744
  80b484:	d8814115 	stw	r2,1284(sp)
  80b488:	003df506 	br	80ac60 <___vfprintf_internal_r+0x10bc>
  80b48c:	d9014217 	ldw	r4,1288(sp)
  80b490:	d9414317 	ldw	r5,1292(sp)
  80b494:	08070a80 	call	8070a8 <__isnand>
  80b498:	10003926 	beq	r2,zero,80b580 <___vfprintf_internal_r+0x19dc>
  80b49c:	d9414d17 	ldw	r5,1332(sp)
  80b4a0:	008011c4 	movi	r2,71
  80b4a4:	1140ce16 	blt	r2,r5,80b7e0 <___vfprintf_internal_r+0x1c3c>
  80b4a8:	018020b4 	movhi	r6,130
  80b4ac:	31b0a104 	addi	r6,r6,-15740
  80b4b0:	d9814115 	stw	r6,1284(sp)
  80b4b4:	003dea06 	br	80ac60 <___vfprintf_internal_r+0x10bc>
  80b4b8:	d9014c17 	ldw	r4,1328(sp)
  80b4bc:	bdc00044 	addi	r23,r23,1
  80b4c0:	b8c00007 	ldb	r3,0(r23)
  80b4c4:	21000814 	ori	r4,r4,32
  80b4c8:	d9014c15 	stw	r4,1328(sp)
  80b4cc:	003a3406 	br	809da0 <___vfprintf_internal_r+0x1fc>
  80b4d0:	dcc14515 	stw	r19,1300(sp)
  80b4d4:	98011016 	blt	r19,zero,80b918 <___vfprintf_internal_r+0x1d74>
  80b4d8:	980f883a 	mov	r7,r19
  80b4dc:	d8014615 	stw	zero,1304(sp)
  80b4e0:	003c5206 	br	80a62c <___vfprintf_internal_r+0xa88>
  80b4e4:	d9014f17 	ldw	r4,1340(sp)
  80b4e8:	b00b883a 	mov	r5,r22
  80b4ec:	d9800c04 	addi	r6,sp,48
  80b4f0:	0809b4c0 	call	809b4c <__sprint_r>
  80b4f4:	103b631e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80b4f8:	dc800e17 	ldw	r18,56(sp)
  80b4fc:	d9000517 	ldw	r4,20(sp)
  80b500:	d8c01904 	addi	r3,sp,100
  80b504:	003f2e06 	br	80b1c0 <___vfprintf_internal_r+0x161c>
  80b508:	d8c14c17 	ldw	r3,1328(sp)
  80b50c:	1880100c 	andi	r2,r3,64
  80b510:	1000a026 	beq	r2,zero,80b794 <___vfprintf_internal_r+0x1bf0>
  80b514:	38800017 	ldw	r2,0(r7)
  80b518:	39c00104 	addi	r7,r7,4
  80b51c:	d9c14015 	stw	r7,1280(sp)
  80b520:	d9014b17 	ldw	r4,1324(sp)
  80b524:	d9c14017 	ldw	r7,1280(sp)
  80b528:	1100000d 	sth	r4,0(r2)
  80b52c:	0039f906 	br	809d14 <___vfprintf_internal_r+0x170>
  80b530:	d9014f17 	ldw	r4,1340(sp)
  80b534:	b00b883a 	mov	r5,r22
  80b538:	d9800c04 	addi	r6,sp,48
  80b53c:	0809b4c0 	call	809b4c <__sprint_r>
  80b540:	103b501e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80b544:	dc800e17 	ldw	r18,56(sp)
  80b548:	dc400d17 	ldw	r17,52(sp)
  80b54c:	d9000517 	ldw	r4,20(sp)
  80b550:	d8c01904 	addi	r3,sp,100
  80b554:	003f2d06 	br	80b20c <___vfprintf_internal_r+0x1668>
  80b558:	00800184 	movi	r2,6
  80b55c:	14c09a36 	bltu	r2,r19,80b7c8 <___vfprintf_internal_r+0x1c24>
  80b560:	dcc14515 	stw	r19,1300(sp)
  80b564:	9800010e 	bge	r19,zero,80b56c <___vfprintf_internal_r+0x19c8>
  80b568:	d8014515 	stw	zero,1300(sp)
  80b56c:	008020b4 	movhi	r2,130
  80b570:	10b0a304 	addi	r2,r2,-15732
  80b574:	980f883a 	mov	r7,r19
  80b578:	d8814115 	stw	r2,1284(sp)
  80b57c:	003a7806 	br	809f60 <___vfprintf_internal_r+0x3bc>
  80b580:	00bfffc4 	movi	r2,-1
  80b584:	9880e226 	beq	r19,r2,80b910 <___vfprintf_internal_r+0x1d6c>
  80b588:	d9414d17 	ldw	r5,1332(sp)
  80b58c:	008019c4 	movi	r2,103
  80b590:	2880dc26 	beq	r5,r2,80b904 <___vfprintf_internal_r+0x1d60>
  80b594:	008011c4 	movi	r2,71
  80b598:	2880da26 	beq	r5,r2,80b904 <___vfprintf_internal_r+0x1d60>
  80b59c:	d9414c17 	ldw	r5,1328(sp)
  80b5a0:	d9014317 	ldw	r4,1292(sp)
  80b5a4:	d9814217 	ldw	r6,1288(sp)
  80b5a8:	29404014 	ori	r5,r5,256
  80b5ac:	d9414c15 	stw	r5,1328(sp)
  80b5b0:	2000cc16 	blt	r4,zero,80b8e4 <___vfprintf_internal_r+0x1d40>
  80b5b4:	3021883a 	mov	r16,r6
  80b5b8:	2023883a 	mov	r17,r4
  80b5bc:	0039883a 	mov	fp,zero
  80b5c0:	d9414d17 	ldw	r5,1332(sp)
  80b5c4:	00801984 	movi	r2,102
  80b5c8:	2880b726 	beq	r5,r2,80b8a8 <___vfprintf_internal_r+0x1d04>
  80b5cc:	00801184 	movi	r2,70
  80b5d0:	2880b526 	beq	r5,r2,80b8a8 <___vfprintf_internal_r+0x1d04>
  80b5d4:	00801944 	movi	r2,101
  80b5d8:	2880c826 	beq	r5,r2,80b8fc <___vfprintf_internal_r+0x1d58>
  80b5dc:	00801144 	movi	r2,69
  80b5e0:	2880c626 	beq	r5,r2,80b8fc <___vfprintf_internal_r+0x1d58>
  80b5e4:	9829883a 	mov	r20,r19
  80b5e8:	d9014f17 	ldw	r4,1340(sp)
  80b5ec:	d8800504 	addi	r2,sp,20
  80b5f0:	880d883a 	mov	r6,r17
  80b5f4:	d8800115 	stw	r2,4(sp)
  80b5f8:	d8c00604 	addi	r3,sp,24
  80b5fc:	d8800704 	addi	r2,sp,28
  80b600:	800b883a 	mov	r5,r16
  80b604:	01c00084 	movi	r7,2
  80b608:	d8c00215 	stw	r3,8(sp)
  80b60c:	d8800315 	stw	r2,12(sp)
  80b610:	dd000015 	stw	r20,0(sp)
  80b614:	080bdc80 	call	80bdc8 <_dtoa_r>
  80b618:	d9814d17 	ldw	r6,1332(sp)
  80b61c:	d8814115 	stw	r2,1284(sp)
  80b620:	008019c4 	movi	r2,103
  80b624:	30809526 	beq	r6,r2,80b87c <___vfprintf_internal_r+0x1cd8>
  80b628:	d8c14d17 	ldw	r3,1332(sp)
  80b62c:	008011c4 	movi	r2,71
  80b630:	18809226 	beq	r3,r2,80b87c <___vfprintf_internal_r+0x1cd8>
  80b634:	d9414117 	ldw	r5,1284(sp)
  80b638:	d9814d17 	ldw	r6,1332(sp)
  80b63c:	00801984 	movi	r2,102
  80b640:	2d25883a 	add	r18,r5,r20
  80b644:	30808626 	beq	r6,r2,80b860 <___vfprintf_internal_r+0x1cbc>
  80b648:	00801184 	movi	r2,70
  80b64c:	30808426 	beq	r6,r2,80b860 <___vfprintf_internal_r+0x1cbc>
  80b650:	000d883a 	mov	r6,zero
  80b654:	000f883a 	mov	r7,zero
  80b658:	880b883a 	mov	r5,r17
  80b65c:	8009883a 	mov	r4,r16
  80b660:	08082840 	call	808284 <__eqdf2>
  80b664:	1000751e 	bne	r2,zero,80b83c <___vfprintf_internal_r+0x1c98>
  80b668:	9005883a 	mov	r2,r18
  80b66c:	dc800715 	stw	r18,28(sp)
  80b670:	d9014117 	ldw	r4,1284(sp)
  80b674:	d9414d17 	ldw	r5,1332(sp)
  80b678:	00c019c4 	movi	r3,103
  80b67c:	1125c83a 	sub	r18,r2,r4
  80b680:	28c06826 	beq	r5,r3,80b824 <___vfprintf_internal_r+0x1c80>
  80b684:	008011c4 	movi	r2,71
  80b688:	28806626 	beq	r5,r2,80b824 <___vfprintf_internal_r+0x1c80>
  80b68c:	d9000517 	ldw	r4,20(sp)
  80b690:	d8c14d17 	ldw	r3,1332(sp)
  80b694:	00801944 	movi	r2,101
  80b698:	10c05516 	blt	r2,r3,80b7f0 <___vfprintf_internal_r+0x1c4c>
  80b69c:	213fffc4 	addi	r4,r4,-1
  80b6a0:	d9000515 	stw	r4,20(sp)
  80b6a4:	d8c00805 	stb	r3,32(sp)
  80b6a8:	2021883a 	mov	r16,r4
  80b6ac:	2000c116 	blt	r4,zero,80b9b4 <___vfprintf_internal_r+0x1e10>
  80b6b0:	00800ac4 	movi	r2,43
  80b6b4:	d8800845 	stb	r2,33(sp)
  80b6b8:	00800244 	movi	r2,9
  80b6bc:	1400af0e 	bge	r2,r16,80b97c <___vfprintf_internal_r+0x1dd8>
  80b6c0:	1027883a 	mov	r19,r2
  80b6c4:	dc400b84 	addi	r17,sp,46
  80b6c8:	8009883a 	mov	r4,r16
  80b6cc:	01400284 	movi	r5,10
  80b6d0:	08088100 	call	808810 <__modsi3>
  80b6d4:	10800c04 	addi	r2,r2,48
  80b6d8:	8c7fffc4 	addi	r17,r17,-1
  80b6dc:	8009883a 	mov	r4,r16
  80b6e0:	01400284 	movi	r5,10
  80b6e4:	88800005 	stb	r2,0(r17)
  80b6e8:	08087b00 	call	8087b0 <__divsi3>
  80b6ec:	1021883a 	mov	r16,r2
  80b6f0:	98bff516 	blt	r19,r2,80b6c8 <___vfprintf_internal_r+0x1b24>
  80b6f4:	10c00c04 	addi	r3,r2,48
  80b6f8:	d88009c4 	addi	r2,sp,39
  80b6fc:	108001c4 	addi	r2,r2,7
  80b700:	897fffc4 	addi	r5,r17,-1
  80b704:	88ffffc5 	stb	r3,-1(r17)
  80b708:	2880a72e 	bgeu	r5,r2,80b9a8 <___vfprintf_internal_r+0x1e04>
  80b70c:	1009883a 	mov	r4,r2
  80b710:	d9800804 	addi	r6,sp,32
  80b714:	d8c00884 	addi	r3,sp,34
  80b718:	28800003 	ldbu	r2,0(r5)
  80b71c:	29400044 	addi	r5,r5,1
  80b720:	18800005 	stb	r2,0(r3)
  80b724:	18c00044 	addi	r3,r3,1
  80b728:	293ffb36 	bltu	r5,r4,80b718 <___vfprintf_internal_r+0x1b74>
  80b72c:	1987c83a 	sub	r3,r3,r6
  80b730:	00800044 	movi	r2,1
  80b734:	d8c14815 	stw	r3,1312(sp)
  80b738:	90cf883a 	add	r7,r18,r3
  80b73c:	1480960e 	bge	r2,r18,80b998 <___vfprintf_internal_r+0x1df4>
  80b740:	39c00044 	addi	r7,r7,1
  80b744:	d9c14515 	stw	r7,1300(sp)
  80b748:	38003416 	blt	r7,zero,80b81c <___vfprintf_internal_r+0x1c78>
  80b74c:	e0803fcc 	andi	r2,fp,255
  80b750:	1080201c 	xori	r2,r2,128
  80b754:	10bfe004 	addi	r2,r2,-128
  80b758:	10004e26 	beq	r2,zero,80b894 <___vfprintf_internal_r+0x1cf0>
  80b75c:	00800b44 	movi	r2,45
  80b760:	dc814715 	stw	r18,1308(sp)
  80b764:	d8014615 	stw	zero,1304(sp)
  80b768:	d8800405 	stb	r2,16(sp)
  80b76c:	003bb106 	br	80a634 <___vfprintf_internal_r+0xa90>
  80b770:	00800b44 	movi	r2,45
  80b774:	d8800405 	stb	r2,16(sp)
  80b778:	003d3306 	br	80ac48 <___vfprintf_internal_r+0x10a4>
  80b77c:	d9014f17 	ldw	r4,1340(sp)
  80b780:	b00b883a 	mov	r5,r22
  80b784:	d9800c04 	addi	r6,sp,48
  80b788:	0809b4c0 	call	809b4c <__sprint_r>
  80b78c:	103abd1e 	bne	r2,zero,80a284 <___vfprintf_internal_r+0x6e0>
  80b790:	003abb06 	br	80a280 <___vfprintf_internal_r+0x6dc>
  80b794:	38800017 	ldw	r2,0(r7)
  80b798:	39c00104 	addi	r7,r7,4
  80b79c:	d9c14015 	stw	r7,1280(sp)
  80b7a0:	d9414b17 	ldw	r5,1324(sp)
  80b7a4:	d9c14017 	ldw	r7,1280(sp)
  80b7a8:	11400015 	stw	r5,0(r2)
  80b7ac:	00395906 	br	809d14 <___vfprintf_internal_r+0x170>
  80b7b0:	980f883a 	mov	r7,r19
  80b7b4:	dcc14515 	stw	r19,1300(sp)
  80b7b8:	d8014615 	stw	zero,1304(sp)
  80b7bc:	003b9b06 	br	80a62c <___vfprintf_internal_r+0xa88>
  80b7c0:	0027883a 	mov	r19,zero
  80b7c4:	00397806 	br	809da8 <___vfprintf_internal_r+0x204>
  80b7c8:	00c020b4 	movhi	r3,130
  80b7cc:	18f0a304 	addi	r3,r3,-15732
  80b7d0:	100f883a 	mov	r7,r2
  80b7d4:	d8814515 	stw	r2,1300(sp)
  80b7d8:	d8c14115 	stw	r3,1284(sp)
  80b7dc:	0039e006 	br	809f60 <___vfprintf_internal_r+0x3bc>
  80b7e0:	008020b4 	movhi	r2,130
  80b7e4:	10b0a204 	addi	r2,r2,-15736
  80b7e8:	d8814115 	stw	r2,1284(sp)
  80b7ec:	003d1c06 	br	80ac60 <___vfprintf_internal_r+0x10bc>
  80b7f0:	d9414d17 	ldw	r5,1332(sp)
  80b7f4:	00801984 	movi	r2,102
  80b7f8:	28804926 	beq	r5,r2,80b920 <___vfprintf_internal_r+0x1d7c>
  80b7fc:	200f883a 	mov	r7,r4
  80b800:	24805716 	blt	r4,r18,80b960 <___vfprintf_internal_r+0x1dbc>
  80b804:	d9414c17 	ldw	r5,1328(sp)
  80b808:	2880004c 	andi	r2,r5,1
  80b80c:	10000126 	beq	r2,zero,80b814 <___vfprintf_internal_r+0x1c70>
  80b810:	21c00044 	addi	r7,r4,1
  80b814:	d9c14515 	stw	r7,1300(sp)
  80b818:	383fcc0e 	bge	r7,zero,80b74c <___vfprintf_internal_r+0x1ba8>
  80b81c:	d8014515 	stw	zero,1300(sp)
  80b820:	003fca06 	br	80b74c <___vfprintf_internal_r+0x1ba8>
  80b824:	d9000517 	ldw	r4,20(sp)
  80b828:	00bfff04 	movi	r2,-4
  80b82c:	1100480e 	bge	r2,r4,80b950 <___vfprintf_internal_r+0x1dac>
  80b830:	99004716 	blt	r19,r4,80b950 <___vfprintf_internal_r+0x1dac>
  80b834:	d8c14d15 	stw	r3,1332(sp)
  80b838:	003ff006 	br	80b7fc <___vfprintf_internal_r+0x1c58>
  80b83c:	d8800717 	ldw	r2,28(sp)
  80b840:	14bf8b2e 	bgeu	r2,r18,80b670 <___vfprintf_internal_r+0x1acc>
  80b844:	9007883a 	mov	r3,r18
  80b848:	01000c04 	movi	r4,48
  80b84c:	11000005 	stb	r4,0(r2)
  80b850:	10800044 	addi	r2,r2,1
  80b854:	d8800715 	stw	r2,28(sp)
  80b858:	18bffc1e 	bne	r3,r2,80b84c <___vfprintf_internal_r+0x1ca8>
  80b85c:	003f8406 	br	80b670 <___vfprintf_internal_r+0x1acc>
  80b860:	d8814117 	ldw	r2,1284(sp)
  80b864:	10c00007 	ldb	r3,0(r2)
  80b868:	00800c04 	movi	r2,48
  80b86c:	18805b26 	beq	r3,r2,80b9dc <___vfprintf_internal_r+0x1e38>
  80b870:	d9000517 	ldw	r4,20(sp)
  80b874:	9125883a 	add	r18,r18,r4
  80b878:	003f7506 	br	80b650 <___vfprintf_internal_r+0x1aac>
  80b87c:	d9014c17 	ldw	r4,1328(sp)
  80b880:	2080004c 	andi	r2,r4,1
  80b884:	1005003a 	cmpeq	r2,r2,zero
  80b888:	103f6a26 	beq	r2,zero,80b634 <___vfprintf_internal_r+0x1a90>
  80b88c:	d8800717 	ldw	r2,28(sp)
  80b890:	003f7706 	br	80b670 <___vfprintf_internal_r+0x1acc>
  80b894:	d9c14515 	stw	r7,1300(sp)
  80b898:	38004d16 	blt	r7,zero,80b9d0 <___vfprintf_internal_r+0x1e2c>
  80b89c:	dc814715 	stw	r18,1308(sp)
  80b8a0:	d8014615 	stw	zero,1304(sp)
  80b8a4:	003b6106 	br	80a62c <___vfprintf_internal_r+0xa88>
  80b8a8:	d9014f17 	ldw	r4,1340(sp)
  80b8ac:	d8800504 	addi	r2,sp,20
  80b8b0:	d8800115 	stw	r2,4(sp)
  80b8b4:	d8c00604 	addi	r3,sp,24
  80b8b8:	d8800704 	addi	r2,sp,28
  80b8bc:	800b883a 	mov	r5,r16
  80b8c0:	880d883a 	mov	r6,r17
  80b8c4:	01c000c4 	movi	r7,3
  80b8c8:	d8c00215 	stw	r3,8(sp)
  80b8cc:	d8800315 	stw	r2,12(sp)
  80b8d0:	dcc00015 	stw	r19,0(sp)
  80b8d4:	9829883a 	mov	r20,r19
  80b8d8:	080bdc80 	call	80bdc8 <_dtoa_r>
  80b8dc:	d8814115 	stw	r2,1284(sp)
  80b8e0:	003f5106 	br	80b628 <___vfprintf_internal_r+0x1a84>
  80b8e4:	d8c14217 	ldw	r3,1288(sp)
  80b8e8:	d9014317 	ldw	r4,1292(sp)
  80b8ec:	07000b44 	movi	fp,45
  80b8f0:	1821883a 	mov	r16,r3
  80b8f4:	2460003c 	xorhi	r17,r4,32768
  80b8f8:	003f3106 	br	80b5c0 <___vfprintf_internal_r+0x1a1c>
  80b8fc:	9d000044 	addi	r20,r19,1
  80b900:	003f3906 	br	80b5e8 <___vfprintf_internal_r+0x1a44>
  80b904:	983f251e 	bne	r19,zero,80b59c <___vfprintf_internal_r+0x19f8>
  80b908:	04c00044 	movi	r19,1
  80b90c:	003f2306 	br	80b59c <___vfprintf_internal_r+0x19f8>
  80b910:	04c00184 	movi	r19,6
  80b914:	003f2106 	br	80b59c <___vfprintf_internal_r+0x19f8>
  80b918:	d8014515 	stw	zero,1300(sp)
  80b91c:	003eee06 	br	80b4d8 <___vfprintf_internal_r+0x1934>
  80b920:	200f883a 	mov	r7,r4
  80b924:	0100370e 	bge	zero,r4,80ba04 <___vfprintf_internal_r+0x1e60>
  80b928:	9800031e 	bne	r19,zero,80b938 <___vfprintf_internal_r+0x1d94>
  80b92c:	d9814c17 	ldw	r6,1328(sp)
  80b930:	3080004c 	andi	r2,r6,1
  80b934:	103fb726 	beq	r2,zero,80b814 <___vfprintf_internal_r+0x1c70>
  80b938:	20800044 	addi	r2,r4,1
  80b93c:	98a7883a 	add	r19,r19,r2
  80b940:	dcc14515 	stw	r19,1300(sp)
  80b944:	980f883a 	mov	r7,r19
  80b948:	983f800e 	bge	r19,zero,80b74c <___vfprintf_internal_r+0x1ba8>
  80b94c:	003fb306 	br	80b81c <___vfprintf_internal_r+0x1c78>
  80b950:	d9814d17 	ldw	r6,1332(sp)
  80b954:	31bfff84 	addi	r6,r6,-2
  80b958:	d9814d15 	stw	r6,1332(sp)
  80b95c:	003f4c06 	br	80b690 <___vfprintf_internal_r+0x1aec>
  80b960:	0100180e 	bge	zero,r4,80b9c4 <___vfprintf_internal_r+0x1e20>
  80b964:	00800044 	movi	r2,1
  80b968:	1485883a 	add	r2,r2,r18
  80b96c:	d8814515 	stw	r2,1300(sp)
  80b970:	100f883a 	mov	r7,r2
  80b974:	103f750e 	bge	r2,zero,80b74c <___vfprintf_internal_r+0x1ba8>
  80b978:	003fa806 	br	80b81c <___vfprintf_internal_r+0x1c78>
  80b97c:	80c00c04 	addi	r3,r16,48
  80b980:	00800c04 	movi	r2,48
  80b984:	d8c008c5 	stb	r3,35(sp)
  80b988:	d9800804 	addi	r6,sp,32
  80b98c:	d8c00904 	addi	r3,sp,36
  80b990:	d8800885 	stb	r2,34(sp)
  80b994:	003f6506 	br	80b72c <___vfprintf_internal_r+0x1b88>
  80b998:	d9014c17 	ldw	r4,1328(sp)
  80b99c:	2084703a 	and	r2,r4,r2
  80b9a0:	103f9c26 	beq	r2,zero,80b814 <___vfprintf_internal_r+0x1c70>
  80b9a4:	003f6606 	br	80b740 <___vfprintf_internal_r+0x1b9c>
  80b9a8:	d9800804 	addi	r6,sp,32
  80b9ac:	d8c00884 	addi	r3,sp,34
  80b9b0:	003f5e06 	br	80b72c <___vfprintf_internal_r+0x1b88>
  80b9b4:	00800b44 	movi	r2,45
  80b9b8:	0121c83a 	sub	r16,zero,r4
  80b9bc:	d8800845 	stb	r2,33(sp)
  80b9c0:	003f3d06 	br	80b6b8 <___vfprintf_internal_r+0x1b14>
  80b9c4:	00800084 	movi	r2,2
  80b9c8:	1105c83a 	sub	r2,r2,r4
  80b9cc:	003fe606 	br	80b968 <___vfprintf_internal_r+0x1dc4>
  80b9d0:	d8014515 	stw	zero,1300(sp)
  80b9d4:	dc814715 	stw	r18,1308(sp)
  80b9d8:	003fb106 	br	80b8a0 <___vfprintf_internal_r+0x1cfc>
  80b9dc:	000d883a 	mov	r6,zero
  80b9e0:	000f883a 	mov	r7,zero
  80b9e4:	8009883a 	mov	r4,r16
  80b9e8:	880b883a 	mov	r5,r17
  80b9ec:	080830c0 	call	80830c <__nedf2>
  80b9f0:	103f9f26 	beq	r2,zero,80b870 <___vfprintf_internal_r+0x1ccc>
  80b9f4:	00800044 	movi	r2,1
  80b9f8:	1509c83a 	sub	r4,r2,r20
  80b9fc:	d9000515 	stw	r4,20(sp)
  80ba00:	003f9b06 	br	80b870 <___vfprintf_internal_r+0x1ccc>
  80ba04:	98000d1e 	bne	r19,zero,80ba3c <___vfprintf_internal_r+0x1e98>
  80ba08:	d8c14c17 	ldw	r3,1328(sp)
  80ba0c:	1880004c 	andi	r2,r3,1
  80ba10:	10000a1e 	bne	r2,zero,80ba3c <___vfprintf_internal_r+0x1e98>
  80ba14:	01000044 	movi	r4,1
  80ba18:	200f883a 	mov	r7,r4
  80ba1c:	d9014515 	stw	r4,1300(sp)
  80ba20:	003f4a06 	br	80b74c <___vfprintf_internal_r+0x1ba8>
  80ba24:	3cc00017 	ldw	r19,0(r7)
  80ba28:	39c00104 	addi	r7,r7,4
  80ba2c:	983d0e0e 	bge	r19,zero,80ae68 <___vfprintf_internal_r+0x12c4>
  80ba30:	b8c00007 	ldb	r3,0(r23)
  80ba34:	04ffffc4 	movi	r19,-1
  80ba38:	0038d906 	br	809da0 <___vfprintf_internal_r+0x1fc>
  80ba3c:	9cc00084 	addi	r19,r19,2
  80ba40:	dcc14515 	stw	r19,1300(sp)
  80ba44:	980f883a 	mov	r7,r19
  80ba48:	983f400e 	bge	r19,zero,80b74c <___vfprintf_internal_r+0x1ba8>
  80ba4c:	003f7306 	br	80b81c <___vfprintf_internal_r+0x1c78>

0080ba50 <__vfprintf_internal>:
  80ba50:	008020b4 	movhi	r2,130
  80ba54:	10b83b04 	addi	r2,r2,-7956
  80ba58:	2013883a 	mov	r9,r4
  80ba5c:	11000017 	ldw	r4,0(r2)
  80ba60:	2805883a 	mov	r2,r5
  80ba64:	300f883a 	mov	r7,r6
  80ba68:	480b883a 	mov	r5,r9
  80ba6c:	100d883a 	mov	r6,r2
  80ba70:	0809ba41 	jmpi	809ba4 <___vfprintf_internal_r>

0080ba74 <__swsetup_r>:
  80ba74:	008020b4 	movhi	r2,130
  80ba78:	10b83b04 	addi	r2,r2,-7956
  80ba7c:	10c00017 	ldw	r3,0(r2)
  80ba80:	defffd04 	addi	sp,sp,-12
  80ba84:	dc400115 	stw	r17,4(sp)
  80ba88:	dc000015 	stw	r16,0(sp)
  80ba8c:	dfc00215 	stw	ra,8(sp)
  80ba90:	2023883a 	mov	r17,r4
  80ba94:	2821883a 	mov	r16,r5
  80ba98:	18000226 	beq	r3,zero,80baa4 <__swsetup_r+0x30>
  80ba9c:	18800e17 	ldw	r2,56(r3)
  80baa0:	10001f26 	beq	r2,zero,80bb20 <__swsetup_r+0xac>
  80baa4:	8100030b 	ldhu	r4,12(r16)
  80baa8:	2080020c 	andi	r2,r4,8
  80baac:	10002826 	beq	r2,zero,80bb50 <__swsetup_r+0xdc>
  80bab0:	81400417 	ldw	r5,16(r16)
  80bab4:	28001d26 	beq	r5,zero,80bb2c <__swsetup_r+0xb8>
  80bab8:	2080004c 	andi	r2,r4,1
  80babc:	1005003a 	cmpeq	r2,r2,zero
  80bac0:	10000b26 	beq	r2,zero,80baf0 <__swsetup_r+0x7c>
  80bac4:	2080008c 	andi	r2,r4,2
  80bac8:	10001226 	beq	r2,zero,80bb14 <__swsetup_r+0xa0>
  80bacc:	0005883a 	mov	r2,zero
  80bad0:	80800215 	stw	r2,8(r16)
  80bad4:	28000b26 	beq	r5,zero,80bb04 <__swsetup_r+0x90>
  80bad8:	0005883a 	mov	r2,zero
  80badc:	dfc00217 	ldw	ra,8(sp)
  80bae0:	dc400117 	ldw	r17,4(sp)
  80bae4:	dc000017 	ldw	r16,0(sp)
  80bae8:	dec00304 	addi	sp,sp,12
  80baec:	f800283a 	ret
  80baf0:	80800517 	ldw	r2,20(r16)
  80baf4:	80000215 	stw	zero,8(r16)
  80baf8:	0085c83a 	sub	r2,zero,r2
  80bafc:	80800615 	stw	r2,24(r16)
  80bb00:	283ff51e 	bne	r5,zero,80bad8 <__swsetup_r+0x64>
  80bb04:	2080200c 	andi	r2,r4,128
  80bb08:	103ff326 	beq	r2,zero,80bad8 <__swsetup_r+0x64>
  80bb0c:	00bfffc4 	movi	r2,-1
  80bb10:	003ff206 	br	80badc <__swsetup_r+0x68>
  80bb14:	80800517 	ldw	r2,20(r16)
  80bb18:	80800215 	stw	r2,8(r16)
  80bb1c:	003fed06 	br	80bad4 <__swsetup_r+0x60>
  80bb20:	1809883a 	mov	r4,r3
  80bb24:	080d6140 	call	80d614 <__sinit>
  80bb28:	003fde06 	br	80baa4 <__swsetup_r+0x30>
  80bb2c:	20c0a00c 	andi	r3,r4,640
  80bb30:	00808004 	movi	r2,512
  80bb34:	18bfe026 	beq	r3,r2,80bab8 <__swsetup_r+0x44>
  80bb38:	8809883a 	mov	r4,r17
  80bb3c:	800b883a 	mov	r5,r16
  80bb40:	080e4000 	call	80e400 <__smakebuf_r>
  80bb44:	8100030b 	ldhu	r4,12(r16)
  80bb48:	81400417 	ldw	r5,16(r16)
  80bb4c:	003fda06 	br	80bab8 <__swsetup_r+0x44>
  80bb50:	2080040c 	andi	r2,r4,16
  80bb54:	103fed26 	beq	r2,zero,80bb0c <__swsetup_r+0x98>
  80bb58:	2080010c 	andi	r2,r4,4
  80bb5c:	10001226 	beq	r2,zero,80bba8 <__swsetup_r+0x134>
  80bb60:	81400c17 	ldw	r5,48(r16)
  80bb64:	28000526 	beq	r5,zero,80bb7c <__swsetup_r+0x108>
  80bb68:	80801004 	addi	r2,r16,64
  80bb6c:	28800226 	beq	r5,r2,80bb78 <__swsetup_r+0x104>
  80bb70:	8809883a 	mov	r4,r17
  80bb74:	080d9980 	call	80d998 <_free_r>
  80bb78:	80000c15 	stw	zero,48(r16)
  80bb7c:	8080030b 	ldhu	r2,12(r16)
  80bb80:	81400417 	ldw	r5,16(r16)
  80bb84:	80000115 	stw	zero,4(r16)
  80bb88:	10bff6cc 	andi	r2,r2,65499
  80bb8c:	8080030d 	sth	r2,12(r16)
  80bb90:	81400015 	stw	r5,0(r16)
  80bb94:	8080030b 	ldhu	r2,12(r16)
  80bb98:	10800214 	ori	r2,r2,8
  80bb9c:	113fffcc 	andi	r4,r2,65535
  80bba0:	8080030d 	sth	r2,12(r16)
  80bba4:	003fc306 	br	80bab4 <__swsetup_r+0x40>
  80bba8:	81400417 	ldw	r5,16(r16)
  80bbac:	003ff906 	br	80bb94 <__swsetup_r+0x120>

0080bbb0 <quorem>:
  80bbb0:	28c00417 	ldw	r3,16(r5)
  80bbb4:	20800417 	ldw	r2,16(r4)
  80bbb8:	defff604 	addi	sp,sp,-40
  80bbbc:	ddc00715 	stw	r23,28(sp)
  80bbc0:	dd400515 	stw	r21,20(sp)
  80bbc4:	dfc00915 	stw	ra,36(sp)
  80bbc8:	df000815 	stw	fp,32(sp)
  80bbcc:	dd800615 	stw	r22,24(sp)
  80bbd0:	dd000415 	stw	r20,16(sp)
  80bbd4:	dcc00315 	stw	r19,12(sp)
  80bbd8:	dc800215 	stw	r18,8(sp)
  80bbdc:	dc400115 	stw	r17,4(sp)
  80bbe0:	dc000015 	stw	r16,0(sp)
  80bbe4:	202f883a 	mov	r23,r4
  80bbe8:	282b883a 	mov	r21,r5
  80bbec:	10c07416 	blt	r2,r3,80bdc0 <quorem+0x210>
  80bbf0:	1c7fffc4 	addi	r17,r3,-1
  80bbf4:	8c45883a 	add	r2,r17,r17
  80bbf8:	1085883a 	add	r2,r2,r2
  80bbfc:	2c000504 	addi	r16,r5,20
  80bc00:	24c00504 	addi	r19,r4,20
  80bc04:	14ed883a 	add	r22,r2,r19
  80bc08:	80a5883a 	add	r18,r16,r2
  80bc0c:	b7000017 	ldw	fp,0(r22)
  80bc10:	91400017 	ldw	r5,0(r18)
  80bc14:	e009883a 	mov	r4,fp
  80bc18:	29400044 	addi	r5,r5,1
  80bc1c:	08088700 	call	808870 <__udivsi3>
  80bc20:	1029883a 	mov	r20,r2
  80bc24:	10003c1e 	bne	r2,zero,80bd18 <quorem+0x168>
  80bc28:	a80b883a 	mov	r5,r21
  80bc2c:	b809883a 	mov	r4,r23
  80bc30:	080e9ec0 	call	80e9ec <__mcmp>
  80bc34:	10002b16 	blt	r2,zero,80bce4 <quorem+0x134>
  80bc38:	a5000044 	addi	r20,r20,1
  80bc3c:	980f883a 	mov	r7,r19
  80bc40:	0011883a 	mov	r8,zero
  80bc44:	0009883a 	mov	r4,zero
  80bc48:	81400017 	ldw	r5,0(r16)
  80bc4c:	38c00017 	ldw	r3,0(r7)
  80bc50:	84000104 	addi	r16,r16,4
  80bc54:	28bfffcc 	andi	r2,r5,65535
  80bc58:	2085883a 	add	r2,r4,r2
  80bc5c:	11bfffcc 	andi	r6,r2,65535
  80bc60:	193fffcc 	andi	r4,r3,65535
  80bc64:	1004d43a 	srli	r2,r2,16
  80bc68:	280ad43a 	srli	r5,r5,16
  80bc6c:	2189c83a 	sub	r4,r4,r6
  80bc70:	2209883a 	add	r4,r4,r8
  80bc74:	1806d43a 	srli	r3,r3,16
  80bc78:	288b883a 	add	r5,r5,r2
  80bc7c:	200dd43a 	srai	r6,r4,16
  80bc80:	28bfffcc 	andi	r2,r5,65535
  80bc84:	1887c83a 	sub	r3,r3,r2
  80bc88:	1987883a 	add	r3,r3,r6
  80bc8c:	3900000d 	sth	r4,0(r7)
  80bc90:	38c0008d 	sth	r3,2(r7)
  80bc94:	2808d43a 	srli	r4,r5,16
  80bc98:	39c00104 	addi	r7,r7,4
  80bc9c:	1811d43a 	srai	r8,r3,16
  80bca0:	943fe92e 	bgeu	r18,r16,80bc48 <quorem+0x98>
  80bca4:	8c45883a 	add	r2,r17,r17
  80bca8:	1085883a 	add	r2,r2,r2
  80bcac:	9885883a 	add	r2,r19,r2
  80bcb0:	10c00017 	ldw	r3,0(r2)
  80bcb4:	18000b1e 	bne	r3,zero,80bce4 <quorem+0x134>
  80bcb8:	113fff04 	addi	r4,r2,-4
  80bcbc:	9900082e 	bgeu	r19,r4,80bce0 <quorem+0x130>
  80bcc0:	10bfff17 	ldw	r2,-4(r2)
  80bcc4:	10000326 	beq	r2,zero,80bcd4 <quorem+0x124>
  80bcc8:	00000506 	br	80bce0 <quorem+0x130>
  80bccc:	20800017 	ldw	r2,0(r4)
  80bcd0:	1000031e 	bne	r2,zero,80bce0 <quorem+0x130>
  80bcd4:	213fff04 	addi	r4,r4,-4
  80bcd8:	8c7fffc4 	addi	r17,r17,-1
  80bcdc:	993ffb36 	bltu	r19,r4,80bccc <quorem+0x11c>
  80bce0:	bc400415 	stw	r17,16(r23)
  80bce4:	a005883a 	mov	r2,r20
  80bce8:	dfc00917 	ldw	ra,36(sp)
  80bcec:	df000817 	ldw	fp,32(sp)
  80bcf0:	ddc00717 	ldw	r23,28(sp)
  80bcf4:	dd800617 	ldw	r22,24(sp)
  80bcf8:	dd400517 	ldw	r21,20(sp)
  80bcfc:	dd000417 	ldw	r20,16(sp)
  80bd00:	dcc00317 	ldw	r19,12(sp)
  80bd04:	dc800217 	ldw	r18,8(sp)
  80bd08:	dc400117 	ldw	r17,4(sp)
  80bd0c:	dc000017 	ldw	r16,0(sp)
  80bd10:	dec00a04 	addi	sp,sp,40
  80bd14:	f800283a 	ret
  80bd18:	980f883a 	mov	r7,r19
  80bd1c:	8011883a 	mov	r8,r16
  80bd20:	0013883a 	mov	r9,zero
  80bd24:	000d883a 	mov	r6,zero
  80bd28:	40c00017 	ldw	r3,0(r8)
  80bd2c:	39000017 	ldw	r4,0(r7)
  80bd30:	42000104 	addi	r8,r8,4
  80bd34:	18bfffcc 	andi	r2,r3,65535
  80bd38:	a085383a 	mul	r2,r20,r2
  80bd3c:	1806d43a 	srli	r3,r3,16
  80bd40:	217fffcc 	andi	r5,r4,65535
  80bd44:	3085883a 	add	r2,r6,r2
  80bd48:	11bfffcc 	andi	r6,r2,65535
  80bd4c:	a0c7383a 	mul	r3,r20,r3
  80bd50:	1004d43a 	srli	r2,r2,16
  80bd54:	298bc83a 	sub	r5,r5,r6
  80bd58:	2a4b883a 	add	r5,r5,r9
  80bd5c:	2008d43a 	srli	r4,r4,16
  80bd60:	1887883a 	add	r3,r3,r2
  80bd64:	280dd43a 	srai	r6,r5,16
  80bd68:	18bfffcc 	andi	r2,r3,65535
  80bd6c:	2089c83a 	sub	r4,r4,r2
  80bd70:	2189883a 	add	r4,r4,r6
  80bd74:	3900008d 	sth	r4,2(r7)
  80bd78:	3940000d 	sth	r5,0(r7)
  80bd7c:	180cd43a 	srli	r6,r3,16
  80bd80:	39c00104 	addi	r7,r7,4
  80bd84:	2013d43a 	srai	r9,r4,16
  80bd88:	923fe72e 	bgeu	r18,r8,80bd28 <quorem+0x178>
  80bd8c:	e03fa61e 	bne	fp,zero,80bc28 <quorem+0x78>
  80bd90:	b0ffff04 	addi	r3,r22,-4
  80bd94:	98c0082e 	bgeu	r19,r3,80bdb8 <quorem+0x208>
  80bd98:	b0bfff17 	ldw	r2,-4(r22)
  80bd9c:	10000326 	beq	r2,zero,80bdac <quorem+0x1fc>
  80bda0:	00000506 	br	80bdb8 <quorem+0x208>
  80bda4:	18800017 	ldw	r2,0(r3)
  80bda8:	1000031e 	bne	r2,zero,80bdb8 <quorem+0x208>
  80bdac:	18ffff04 	addi	r3,r3,-4
  80bdb0:	8c7fffc4 	addi	r17,r17,-1
  80bdb4:	98fffb36 	bltu	r19,r3,80bda4 <quorem+0x1f4>
  80bdb8:	bc400415 	stw	r17,16(r23)
  80bdbc:	003f9a06 	br	80bc28 <quorem+0x78>
  80bdc0:	0005883a 	mov	r2,zero
  80bdc4:	003fc806 	br	80bce8 <quorem+0x138>

0080bdc8 <_dtoa_r>:
  80bdc8:	22001017 	ldw	r8,64(r4)
  80bdcc:	deffda04 	addi	sp,sp,-152
  80bdd0:	dd402115 	stw	r21,132(sp)
  80bdd4:	dd002015 	stw	r20,128(sp)
  80bdd8:	dc801e15 	stw	r18,120(sp)
  80bddc:	dc401d15 	stw	r17,116(sp)
  80bde0:	dfc02515 	stw	ra,148(sp)
  80bde4:	df002415 	stw	fp,144(sp)
  80bde8:	ddc02315 	stw	r23,140(sp)
  80bdec:	dd802215 	stw	r22,136(sp)
  80bdf0:	dcc01f15 	stw	r19,124(sp)
  80bdf4:	dc001c15 	stw	r16,112(sp)
  80bdf8:	d9001615 	stw	r4,88(sp)
  80bdfc:	3023883a 	mov	r17,r6
  80be00:	2829883a 	mov	r20,r5
  80be04:	d9c01715 	stw	r7,92(sp)
  80be08:	dc802817 	ldw	r18,160(sp)
  80be0c:	302b883a 	mov	r21,r6
  80be10:	40000a26 	beq	r8,zero,80be3c <_dtoa_r+0x74>
  80be14:	20801117 	ldw	r2,68(r4)
  80be18:	400b883a 	mov	r5,r8
  80be1c:	40800115 	stw	r2,4(r8)
  80be20:	20c01117 	ldw	r3,68(r4)
  80be24:	00800044 	movi	r2,1
  80be28:	10c4983a 	sll	r2,r2,r3
  80be2c:	40800215 	stw	r2,8(r8)
  80be30:	080e8900 	call	80e890 <_Bfree>
  80be34:	d8c01617 	ldw	r3,88(sp)
  80be38:	18001015 	stw	zero,64(r3)
  80be3c:	8800a316 	blt	r17,zero,80c0cc <_dtoa_r+0x304>
  80be40:	90000015 	stw	zero,0(r18)
  80be44:	a8dffc2c 	andhi	r3,r21,32752
  80be48:	009ffc34 	movhi	r2,32752
  80be4c:	18809126 	beq	r3,r2,80c094 <_dtoa_r+0x2cc>
  80be50:	000d883a 	mov	r6,zero
  80be54:	000f883a 	mov	r7,zero
  80be58:	a009883a 	mov	r4,r20
  80be5c:	a80b883a 	mov	r5,r21
  80be60:	dd001215 	stw	r20,72(sp)
  80be64:	dd401315 	stw	r21,76(sp)
  80be68:	080830c0 	call	80830c <__nedf2>
  80be6c:	1000171e 	bne	r2,zero,80becc <_dtoa_r+0x104>
  80be70:	d9802717 	ldw	r6,156(sp)
  80be74:	00800044 	movi	r2,1
  80be78:	30800015 	stw	r2,0(r6)
  80be7c:	d8802917 	ldw	r2,164(sp)
  80be80:	10029b26 	beq	r2,zero,80c8f0 <_dtoa_r+0xb28>
  80be84:	d9002917 	ldw	r4,164(sp)
  80be88:	008020b4 	movhi	r2,130
  80be8c:	10b0b144 	addi	r2,r2,-15675
  80be90:	10ffffc4 	addi	r3,r2,-1
  80be94:	20800015 	stw	r2,0(r4)
  80be98:	1805883a 	mov	r2,r3
  80be9c:	dfc02517 	ldw	ra,148(sp)
  80bea0:	df002417 	ldw	fp,144(sp)
  80bea4:	ddc02317 	ldw	r23,140(sp)
  80bea8:	dd802217 	ldw	r22,136(sp)
  80beac:	dd402117 	ldw	r21,132(sp)
  80beb0:	dd002017 	ldw	r20,128(sp)
  80beb4:	dcc01f17 	ldw	r19,124(sp)
  80beb8:	dc801e17 	ldw	r18,120(sp)
  80bebc:	dc401d17 	ldw	r17,116(sp)
  80bec0:	dc001c17 	ldw	r16,112(sp)
  80bec4:	dec02604 	addi	sp,sp,152
  80bec8:	f800283a 	ret
  80becc:	d9001617 	ldw	r4,88(sp)
  80bed0:	d9401217 	ldw	r5,72(sp)
  80bed4:	d8800104 	addi	r2,sp,4
  80bed8:	a80d883a 	mov	r6,r21
  80bedc:	d9c00204 	addi	r7,sp,8
  80bee0:	d8800015 	stw	r2,0(sp)
  80bee4:	080eecc0 	call	80eecc <__d2b>
  80bee8:	d8800715 	stw	r2,28(sp)
  80beec:	a804d53a 	srli	r2,r21,20
  80bef0:	1101ffcc 	andi	r4,r2,2047
  80bef4:	20008626 	beq	r4,zero,80c110 <_dtoa_r+0x348>
  80bef8:	d8c01217 	ldw	r3,72(sp)
  80befc:	00800434 	movhi	r2,16
  80bf00:	10bfffc4 	addi	r2,r2,-1
  80bf04:	ddc00117 	ldw	r23,4(sp)
  80bf08:	a884703a 	and	r2,r21,r2
  80bf0c:	1811883a 	mov	r8,r3
  80bf10:	124ffc34 	orhi	r9,r2,16368
  80bf14:	25bf0044 	addi	r22,r4,-1023
  80bf18:	d8000815 	stw	zero,32(sp)
  80bf1c:	0005883a 	mov	r2,zero
  80bf20:	00cffe34 	movhi	r3,16376
  80bf24:	480b883a 	mov	r5,r9
  80bf28:	4009883a 	mov	r4,r8
  80bf2c:	180f883a 	mov	r7,r3
  80bf30:	100d883a 	mov	r6,r2
  80bf34:	0807b740 	call	807b74 <__subdf3>
  80bf38:	0218dbf4 	movhi	r8,25455
  80bf3c:	4210d844 	addi	r8,r8,17249
  80bf40:	024ff4f4 	movhi	r9,16339
  80bf44:	4a61e9c4 	addi	r9,r9,-30809
  80bf48:	480f883a 	mov	r7,r9
  80bf4c:	400d883a 	mov	r6,r8
  80bf50:	180b883a 	mov	r5,r3
  80bf54:	1009883a 	mov	r4,r2
  80bf58:	0807c680 	call	807c68 <__muldf3>
  80bf5c:	0222d874 	movhi	r8,35681
  80bf60:	42322cc4 	addi	r8,r8,-14157
  80bf64:	024ff1f4 	movhi	r9,16327
  80bf68:	4a628a04 	addi	r9,r9,-30168
  80bf6c:	480f883a 	mov	r7,r9
  80bf70:	400d883a 	mov	r6,r8
  80bf74:	180b883a 	mov	r5,r3
  80bf78:	1009883a 	mov	r4,r2
  80bf7c:	0807bf40 	call	807bf4 <__adddf3>
  80bf80:	b009883a 	mov	r4,r22
  80bf84:	1021883a 	mov	r16,r2
  80bf88:	1823883a 	mov	r17,r3
  80bf8c:	080852c0 	call	80852c <__floatsidf>
  80bf90:	021427f4 	movhi	r8,20639
  80bf94:	421e7ec4 	addi	r8,r8,31227
  80bf98:	024ff4f4 	movhi	r9,16339
  80bf9c:	4a5104c4 	addi	r9,r9,17427
  80bfa0:	480f883a 	mov	r7,r9
  80bfa4:	400d883a 	mov	r6,r8
  80bfa8:	180b883a 	mov	r5,r3
  80bfac:	1009883a 	mov	r4,r2
  80bfb0:	0807c680 	call	807c68 <__muldf3>
  80bfb4:	180f883a 	mov	r7,r3
  80bfb8:	880b883a 	mov	r5,r17
  80bfbc:	100d883a 	mov	r6,r2
  80bfc0:	8009883a 	mov	r4,r16
  80bfc4:	0807bf40 	call	807bf4 <__adddf3>
  80bfc8:	1009883a 	mov	r4,r2
  80bfcc:	180b883a 	mov	r5,r3
  80bfd0:	1021883a 	mov	r16,r2
  80bfd4:	1823883a 	mov	r17,r3
  80bfd8:	08086240 	call	808624 <__fixdfsi>
  80bfdc:	000d883a 	mov	r6,zero
  80bfe0:	000f883a 	mov	r7,zero
  80bfe4:	8009883a 	mov	r4,r16
  80bfe8:	880b883a 	mov	r5,r17
  80bfec:	d8800d15 	stw	r2,52(sp)
  80bff0:	080841c0 	call	80841c <__ltdf2>
  80bff4:	10031716 	blt	r2,zero,80cc54 <_dtoa_r+0xe8c>
  80bff8:	d8c00d17 	ldw	r3,52(sp)
  80bffc:	00800584 	movi	r2,22
  80c000:	10c1482e 	bgeu	r2,r3,80c524 <_dtoa_r+0x75c>
  80c004:	01000044 	movi	r4,1
  80c008:	d9000c15 	stw	r4,48(sp)
  80c00c:	bd85c83a 	sub	r2,r23,r22
  80c010:	11bfffc4 	addi	r6,r2,-1
  80c014:	30030b16 	blt	r6,zero,80cc44 <_dtoa_r+0xe7c>
  80c018:	d9800a15 	stw	r6,40(sp)
  80c01c:	d8001115 	stw	zero,68(sp)
  80c020:	d8c00d17 	ldw	r3,52(sp)
  80c024:	1802ff16 	blt	r3,zero,80cc24 <_dtoa_r+0xe5c>
  80c028:	d9000a17 	ldw	r4,40(sp)
  80c02c:	d8c00915 	stw	r3,36(sp)
  80c030:	d8001015 	stw	zero,64(sp)
  80c034:	20c9883a 	add	r4,r4,r3
  80c038:	d9000a15 	stw	r4,40(sp)
  80c03c:	d9001717 	ldw	r4,92(sp)
  80c040:	00800244 	movi	r2,9
  80c044:	11004636 	bltu	r2,r4,80c160 <_dtoa_r+0x398>
  80c048:	00800144 	movi	r2,5
  80c04c:	11020416 	blt	r2,r4,80c860 <_dtoa_r+0xa98>
  80c050:	04400044 	movi	r17,1
  80c054:	d8c01717 	ldw	r3,92(sp)
  80c058:	00800144 	movi	r2,5
  80c05c:	10c1ed36 	bltu	r2,r3,80c814 <_dtoa_r+0xa4c>
  80c060:	18c5883a 	add	r2,r3,r3
  80c064:	1085883a 	add	r2,r2,r2
  80c068:	00c02074 	movhi	r3,129
  80c06c:	18f01f04 	addi	r3,r3,-16260
  80c070:	10c5883a 	add	r2,r2,r3
  80c074:	11000017 	ldw	r4,0(r2)
  80c078:	2000683a 	jmp	r4
  80c07c:	0080c168 	cmpgeui	r2,zero,773
  80c080:	0080c168 	cmpgeui	r2,zero,773
  80c084:	0080cb68 	cmpgeui	r2,zero,813
  80c088:	0080cb40 	call	80cb4 <__reset-0x77f34c>
  80c08c:	0080cb84 	movi	r2,814
  80c090:	0080cb90 	cmplti	r2,zero,814
  80c094:	d9002717 	ldw	r4,156(sp)
  80c098:	0089c3c4 	movi	r2,9999
  80c09c:	20800015 	stw	r2,0(r4)
  80c0a0:	a0001026 	beq	r20,zero,80c0e4 <_dtoa_r+0x31c>
  80c0a4:	00c020b4 	movhi	r3,130
  80c0a8:	18f0bd04 	addi	r3,r3,-15628
  80c0ac:	d9802917 	ldw	r6,164(sp)
  80c0b0:	303f7926 	beq	r6,zero,80be98 <_dtoa_r+0xd0>
  80c0b4:	188000c7 	ldb	r2,3(r3)
  80c0b8:	190000c4 	addi	r4,r3,3
  80c0bc:	1000101e 	bne	r2,zero,80c100 <_dtoa_r+0x338>
  80c0c0:	d8802917 	ldw	r2,164(sp)
  80c0c4:	11000015 	stw	r4,0(r2)
  80c0c8:	003f7306 	br	80be98 <_dtoa_r+0xd0>
  80c0cc:	00a00034 	movhi	r2,32768
  80c0d0:	10bfffc4 	addi	r2,r2,-1
  80c0d4:	00c00044 	movi	r3,1
  80c0d8:	88aa703a 	and	r21,r17,r2
  80c0dc:	90c00015 	stw	r3,0(r18)
  80c0e0:	003f5806 	br	80be44 <_dtoa_r+0x7c>
  80c0e4:	00800434 	movhi	r2,16
  80c0e8:	10bfffc4 	addi	r2,r2,-1
  80c0ec:	a884703a 	and	r2,r21,r2
  80c0f0:	103fec1e 	bne	r2,zero,80c0a4 <_dtoa_r+0x2dc>
  80c0f4:	00c020b4 	movhi	r3,130
  80c0f8:	18f0ba04 	addi	r3,r3,-15640
  80c0fc:	003feb06 	br	80c0ac <_dtoa_r+0x2e4>
  80c100:	d8802917 	ldw	r2,164(sp)
  80c104:	19000204 	addi	r4,r3,8
  80c108:	11000015 	stw	r4,0(r2)
  80c10c:	003f6206 	br	80be98 <_dtoa_r+0xd0>
  80c110:	ddc00117 	ldw	r23,4(sp)
  80c114:	d8800217 	ldw	r2,8(sp)
  80c118:	01000804 	movi	r4,32
  80c11c:	b8c10c84 	addi	r3,r23,1074
  80c120:	18a3883a 	add	r17,r3,r2
  80c124:	2441b80e 	bge	r4,r17,80c808 <_dtoa_r+0xa40>
  80c128:	00c01004 	movi	r3,64
  80c12c:	1c47c83a 	sub	r3,r3,r17
  80c130:	88bff804 	addi	r2,r17,-32
  80c134:	a8c6983a 	sll	r3,r21,r3
  80c138:	a084d83a 	srl	r2,r20,r2
  80c13c:	1888b03a 	or	r4,r3,r2
  80c140:	08111680 	call	811168 <__floatunsidf>
  80c144:	1011883a 	mov	r8,r2
  80c148:	00bf8434 	movhi	r2,65040
  80c14c:	01000044 	movi	r4,1
  80c150:	10d3883a 	add	r9,r2,r3
  80c154:	8dbef344 	addi	r22,r17,-1075
  80c158:	d9000815 	stw	r4,32(sp)
  80c15c:	003f6f06 	br	80bf1c <_dtoa_r+0x154>
  80c160:	d8001715 	stw	zero,92(sp)
  80c164:	04400044 	movi	r17,1
  80c168:	00bfffc4 	movi	r2,-1
  80c16c:	00c00044 	movi	r3,1
  80c170:	d8800e15 	stw	r2,56(sp)
  80c174:	d8002615 	stw	zero,152(sp)
  80c178:	d8800f15 	stw	r2,60(sp)
  80c17c:	d8c00b15 	stw	r3,44(sp)
  80c180:	1021883a 	mov	r16,r2
  80c184:	d8801617 	ldw	r2,88(sp)
  80c188:	10001115 	stw	zero,68(r2)
  80c18c:	d8801617 	ldw	r2,88(sp)
  80c190:	11401117 	ldw	r5,68(r2)
  80c194:	1009883a 	mov	r4,r2
  80c198:	080ee100 	call	80ee10 <_Balloc>
  80c19c:	d8c01617 	ldw	r3,88(sp)
  80c1a0:	d8800515 	stw	r2,20(sp)
  80c1a4:	18801015 	stw	r2,64(r3)
  80c1a8:	00800384 	movi	r2,14
  80c1ac:	14006836 	bltu	r2,r16,80c350 <_dtoa_r+0x588>
  80c1b0:	8805003a 	cmpeq	r2,r17,zero
  80c1b4:	1000661e 	bne	r2,zero,80c350 <_dtoa_r+0x588>
  80c1b8:	d9000d17 	ldw	r4,52(sp)
  80c1bc:	0102300e 	bge	zero,r4,80ca80 <_dtoa_r+0xcb8>
  80c1c0:	208003cc 	andi	r2,r4,15
  80c1c4:	100490fa 	slli	r2,r2,3
  80c1c8:	2025d13a 	srai	r18,r4,4
  80c1cc:	00c020b4 	movhi	r3,130
  80c1d0:	18f0ce04 	addi	r3,r3,-15560
  80c1d4:	10c5883a 	add	r2,r2,r3
  80c1d8:	90c0040c 	andi	r3,r18,16
  80c1dc:	14000017 	ldw	r16,0(r2)
  80c1e0:	14400117 	ldw	r17,4(r2)
  80c1e4:	18036a1e 	bne	r3,zero,80cf90 <_dtoa_r+0x11c8>
  80c1e8:	05800084 	movi	r22,2
  80c1ec:	90001026 	beq	r18,zero,80c230 <_dtoa_r+0x468>
  80c1f0:	04c020b4 	movhi	r19,130
  80c1f4:	9cf10004 	addi	r19,r19,-15360
  80c1f8:	9080004c 	andi	r2,r18,1
  80c1fc:	1005003a 	cmpeq	r2,r2,zero
  80c200:	1000081e 	bne	r2,zero,80c224 <_dtoa_r+0x45c>
  80c204:	99800017 	ldw	r6,0(r19)
  80c208:	99c00117 	ldw	r7,4(r19)
  80c20c:	880b883a 	mov	r5,r17
  80c210:	8009883a 	mov	r4,r16
  80c214:	0807c680 	call	807c68 <__muldf3>
  80c218:	1021883a 	mov	r16,r2
  80c21c:	b5800044 	addi	r22,r22,1
  80c220:	1823883a 	mov	r17,r3
  80c224:	9025d07a 	srai	r18,r18,1
  80c228:	9cc00204 	addi	r19,r19,8
  80c22c:	903ff21e 	bne	r18,zero,80c1f8 <_dtoa_r+0x430>
  80c230:	a80b883a 	mov	r5,r21
  80c234:	a009883a 	mov	r4,r20
  80c238:	880f883a 	mov	r7,r17
  80c23c:	800d883a 	mov	r6,r16
  80c240:	080802c0 	call	80802c <__divdf3>
  80c244:	1029883a 	mov	r20,r2
  80c248:	182b883a 	mov	r21,r3
  80c24c:	d8c00c17 	ldw	r3,48(sp)
  80c250:	1805003a 	cmpeq	r2,r3,zero
  80c254:	1000081e 	bne	r2,zero,80c278 <_dtoa_r+0x4b0>
  80c258:	0005883a 	mov	r2,zero
  80c25c:	00cffc34 	movhi	r3,16368
  80c260:	180f883a 	mov	r7,r3
  80c264:	a009883a 	mov	r4,r20
  80c268:	a80b883a 	mov	r5,r21
  80c26c:	100d883a 	mov	r6,r2
  80c270:	080841c0 	call	80841c <__ltdf2>
  80c274:	1003fe16 	blt	r2,zero,80d270 <_dtoa_r+0x14a8>
  80c278:	b009883a 	mov	r4,r22
  80c27c:	080852c0 	call	80852c <__floatsidf>
  80c280:	180b883a 	mov	r5,r3
  80c284:	1009883a 	mov	r4,r2
  80c288:	a00d883a 	mov	r6,r20
  80c28c:	a80f883a 	mov	r7,r21
  80c290:	0807c680 	call	807c68 <__muldf3>
  80c294:	0011883a 	mov	r8,zero
  80c298:	02500734 	movhi	r9,16412
  80c29c:	1009883a 	mov	r4,r2
  80c2a0:	180b883a 	mov	r5,r3
  80c2a4:	480f883a 	mov	r7,r9
  80c2a8:	400d883a 	mov	r6,r8
  80c2ac:	0807bf40 	call	807bf4 <__adddf3>
  80c2b0:	d9000f17 	ldw	r4,60(sp)
  80c2b4:	102d883a 	mov	r22,r2
  80c2b8:	00bf3034 	movhi	r2,64704
  80c2bc:	18b9883a 	add	fp,r3,r2
  80c2c0:	e02f883a 	mov	r23,fp
  80c2c4:	20028f1e 	bne	r4,zero,80cd04 <_dtoa_r+0xf3c>
  80c2c8:	0005883a 	mov	r2,zero
  80c2cc:	00d00534 	movhi	r3,16404
  80c2d0:	a009883a 	mov	r4,r20
  80c2d4:	a80b883a 	mov	r5,r21
  80c2d8:	180f883a 	mov	r7,r3
  80c2dc:	100d883a 	mov	r6,r2
  80c2e0:	0807b740 	call	807b74 <__subdf3>
  80c2e4:	1009883a 	mov	r4,r2
  80c2e8:	e00f883a 	mov	r7,fp
  80c2ec:	180b883a 	mov	r5,r3
  80c2f0:	b00d883a 	mov	r6,r22
  80c2f4:	1025883a 	mov	r18,r2
  80c2f8:	1827883a 	mov	r19,r3
  80c2fc:	08083940 	call	808394 <__gtdf2>
  80c300:	00834f16 	blt	zero,r2,80d040 <_dtoa_r+0x1278>
  80c304:	e0e0003c 	xorhi	r3,fp,32768
  80c308:	9009883a 	mov	r4,r18
  80c30c:	980b883a 	mov	r5,r19
  80c310:	180f883a 	mov	r7,r3
  80c314:	b00d883a 	mov	r6,r22
  80c318:	080841c0 	call	80841c <__ltdf2>
  80c31c:	1000080e 	bge	r2,zero,80c340 <_dtoa_r+0x578>
  80c320:	0027883a 	mov	r19,zero
  80c324:	0025883a 	mov	r18,zero
  80c328:	d8802617 	ldw	r2,152(sp)
  80c32c:	df000517 	ldw	fp,20(sp)
  80c330:	d8000615 	stw	zero,24(sp)
  80c334:	0084303a 	nor	r2,zero,r2
  80c338:	d8800d15 	stw	r2,52(sp)
  80c33c:	00019b06 	br	80c9ac <_dtoa_r+0xbe4>
  80c340:	d9801217 	ldw	r6,72(sp)
  80c344:	d8801317 	ldw	r2,76(sp)
  80c348:	3029883a 	mov	r20,r6
  80c34c:	102b883a 	mov	r21,r2
  80c350:	d8c00217 	ldw	r3,8(sp)
  80c354:	18008516 	blt	r3,zero,80c56c <_dtoa_r+0x7a4>
  80c358:	d9000d17 	ldw	r4,52(sp)
  80c35c:	00800384 	movi	r2,14
  80c360:	11008216 	blt	r2,r4,80c56c <_dtoa_r+0x7a4>
  80c364:	200490fa 	slli	r2,r4,3
  80c368:	d9802617 	ldw	r6,152(sp)
  80c36c:	00c020b4 	movhi	r3,130
  80c370:	18f0ce04 	addi	r3,r3,-15560
  80c374:	10c5883a 	add	r2,r2,r3
  80c378:	14800017 	ldw	r18,0(r2)
  80c37c:	14c00117 	ldw	r19,4(r2)
  80c380:	30031e16 	blt	r6,zero,80cffc <_dtoa_r+0x1234>
  80c384:	d9000517 	ldw	r4,20(sp)
  80c388:	d8c00f17 	ldw	r3,60(sp)
  80c38c:	a823883a 	mov	r17,r21
  80c390:	a021883a 	mov	r16,r20
  80c394:	192b883a 	add	r21,r3,r4
  80c398:	2039883a 	mov	fp,r4
  80c39c:	00000f06 	br	80c3dc <_dtoa_r+0x614>
  80c3a0:	0005883a 	mov	r2,zero
  80c3a4:	00d00934 	movhi	r3,16420
  80c3a8:	5009883a 	mov	r4,r10
  80c3ac:	580b883a 	mov	r5,r11
  80c3b0:	180f883a 	mov	r7,r3
  80c3b4:	100d883a 	mov	r6,r2
  80c3b8:	0807c680 	call	807c68 <__muldf3>
  80c3bc:	180b883a 	mov	r5,r3
  80c3c0:	000d883a 	mov	r6,zero
  80c3c4:	000f883a 	mov	r7,zero
  80c3c8:	1009883a 	mov	r4,r2
  80c3cc:	1021883a 	mov	r16,r2
  80c3d0:	1823883a 	mov	r17,r3
  80c3d4:	080830c0 	call	80830c <__nedf2>
  80c3d8:	10004526 	beq	r2,zero,80c4f0 <_dtoa_r+0x728>
  80c3dc:	900d883a 	mov	r6,r18
  80c3e0:	980f883a 	mov	r7,r19
  80c3e4:	8009883a 	mov	r4,r16
  80c3e8:	880b883a 	mov	r5,r17
  80c3ec:	080802c0 	call	80802c <__divdf3>
  80c3f0:	180b883a 	mov	r5,r3
  80c3f4:	1009883a 	mov	r4,r2
  80c3f8:	08086240 	call	808624 <__fixdfsi>
  80c3fc:	1009883a 	mov	r4,r2
  80c400:	1029883a 	mov	r20,r2
  80c404:	080852c0 	call	80852c <__floatsidf>
  80c408:	180f883a 	mov	r7,r3
  80c40c:	9009883a 	mov	r4,r18
  80c410:	980b883a 	mov	r5,r19
  80c414:	100d883a 	mov	r6,r2
  80c418:	0807c680 	call	807c68 <__muldf3>
  80c41c:	180f883a 	mov	r7,r3
  80c420:	880b883a 	mov	r5,r17
  80c424:	8009883a 	mov	r4,r16
  80c428:	100d883a 	mov	r6,r2
  80c42c:	0807b740 	call	807b74 <__subdf3>
  80c430:	1015883a 	mov	r10,r2
  80c434:	a0800c04 	addi	r2,r20,48
  80c438:	e0800005 	stb	r2,0(fp)
  80c43c:	e7000044 	addi	fp,fp,1
  80c440:	1817883a 	mov	r11,r3
  80c444:	e57fd61e 	bne	fp,r21,80c3a0 <_dtoa_r+0x5d8>
  80c448:	500d883a 	mov	r6,r10
  80c44c:	180f883a 	mov	r7,r3
  80c450:	5009883a 	mov	r4,r10
  80c454:	180b883a 	mov	r5,r3
  80c458:	0807bf40 	call	807bf4 <__adddf3>
  80c45c:	100d883a 	mov	r6,r2
  80c460:	9009883a 	mov	r4,r18
  80c464:	980b883a 	mov	r5,r19
  80c468:	180f883a 	mov	r7,r3
  80c46c:	1021883a 	mov	r16,r2
  80c470:	1823883a 	mov	r17,r3
  80c474:	080841c0 	call	80841c <__ltdf2>
  80c478:	10000816 	blt	r2,zero,80c49c <_dtoa_r+0x6d4>
  80c47c:	980b883a 	mov	r5,r19
  80c480:	800d883a 	mov	r6,r16
  80c484:	880f883a 	mov	r7,r17
  80c488:	9009883a 	mov	r4,r18
  80c48c:	08082840 	call	808284 <__eqdf2>
  80c490:	1000171e 	bne	r2,zero,80c4f0 <_dtoa_r+0x728>
  80c494:	a080004c 	andi	r2,r20,1
  80c498:	10001526 	beq	r2,zero,80c4f0 <_dtoa_r+0x728>
  80c49c:	d8800d17 	ldw	r2,52(sp)
  80c4a0:	d8800415 	stw	r2,16(sp)
  80c4a4:	e009883a 	mov	r4,fp
  80c4a8:	213fffc4 	addi	r4,r4,-1
  80c4ac:	20c00007 	ldb	r3,0(r4)
  80c4b0:	00800e44 	movi	r2,57
  80c4b4:	1880081e 	bne	r3,r2,80c4d8 <_dtoa_r+0x710>
  80c4b8:	d8800517 	ldw	r2,20(sp)
  80c4bc:	113ffa1e 	bne	r2,r4,80c4a8 <_dtoa_r+0x6e0>
  80c4c0:	d8c00417 	ldw	r3,16(sp)
  80c4c4:	d9800517 	ldw	r6,20(sp)
  80c4c8:	00800c04 	movi	r2,48
  80c4cc:	18c00044 	addi	r3,r3,1
  80c4d0:	d8c00415 	stw	r3,16(sp)
  80c4d4:	30800005 	stb	r2,0(r6)
  80c4d8:	20800003 	ldbu	r2,0(r4)
  80c4dc:	d8c00417 	ldw	r3,16(sp)
  80c4e0:	27000044 	addi	fp,r4,1
  80c4e4:	10800044 	addi	r2,r2,1
  80c4e8:	d8c00d15 	stw	r3,52(sp)
  80c4ec:	20800005 	stb	r2,0(r4)
  80c4f0:	d9001617 	ldw	r4,88(sp)
  80c4f4:	d9400717 	ldw	r5,28(sp)
  80c4f8:	080e8900 	call	80e890 <_Bfree>
  80c4fc:	e0000005 	stb	zero,0(fp)
  80c500:	d9800d17 	ldw	r6,52(sp)
  80c504:	d8c02717 	ldw	r3,156(sp)
  80c508:	d9002917 	ldw	r4,164(sp)
  80c50c:	30800044 	addi	r2,r6,1
  80c510:	18800015 	stw	r2,0(r3)
  80c514:	20029c26 	beq	r4,zero,80cf88 <_dtoa_r+0x11c0>
  80c518:	d8c00517 	ldw	r3,20(sp)
  80c51c:	27000015 	stw	fp,0(r4)
  80c520:	003e5d06 	br	80be98 <_dtoa_r+0xd0>
  80c524:	d9800d17 	ldw	r6,52(sp)
  80c528:	00c020b4 	movhi	r3,130
  80c52c:	18f0ce04 	addi	r3,r3,-15560
  80c530:	d9001217 	ldw	r4,72(sp)
  80c534:	300490fa 	slli	r2,r6,3
  80c538:	d9401317 	ldw	r5,76(sp)
  80c53c:	10c5883a 	add	r2,r2,r3
  80c540:	12000017 	ldw	r8,0(r2)
  80c544:	12400117 	ldw	r9,4(r2)
  80c548:	400d883a 	mov	r6,r8
  80c54c:	480f883a 	mov	r7,r9
  80c550:	080841c0 	call	80841c <__ltdf2>
  80c554:	1000030e 	bge	r2,zero,80c564 <_dtoa_r+0x79c>
  80c558:	d8800d17 	ldw	r2,52(sp)
  80c55c:	10bfffc4 	addi	r2,r2,-1
  80c560:	d8800d15 	stw	r2,52(sp)
  80c564:	d8000c15 	stw	zero,48(sp)
  80c568:	003ea806 	br	80c00c <_dtoa_r+0x244>
  80c56c:	d9000b17 	ldw	r4,44(sp)
  80c570:	202cc03a 	cmpne	r22,r4,zero
  80c574:	b000c71e 	bne	r22,zero,80c894 <_dtoa_r+0xacc>
  80c578:	dc001117 	ldw	r16,68(sp)
  80c57c:	dc801017 	ldw	r18,64(sp)
  80c580:	0027883a 	mov	r19,zero
  80c584:	04000b0e 	bge	zero,r16,80c5b4 <_dtoa_r+0x7ec>
  80c588:	d8c00a17 	ldw	r3,40(sp)
  80c58c:	00c0090e 	bge	zero,r3,80c5b4 <_dtoa_r+0x7ec>
  80c590:	8005883a 	mov	r2,r16
  80c594:	1c011316 	blt	r3,r16,80c9e4 <_dtoa_r+0xc1c>
  80c598:	d9000a17 	ldw	r4,40(sp)
  80c59c:	d9801117 	ldw	r6,68(sp)
  80c5a0:	80a1c83a 	sub	r16,r16,r2
  80c5a4:	2089c83a 	sub	r4,r4,r2
  80c5a8:	308dc83a 	sub	r6,r6,r2
  80c5ac:	d9000a15 	stw	r4,40(sp)
  80c5b0:	d9801115 	stw	r6,68(sp)
  80c5b4:	d8801017 	ldw	r2,64(sp)
  80c5b8:	0080150e 	bge	zero,r2,80c610 <_dtoa_r+0x848>
  80c5bc:	d8c00b17 	ldw	r3,44(sp)
  80c5c0:	1805003a 	cmpeq	r2,r3,zero
  80c5c4:	1001c91e 	bne	r2,zero,80ccec <_dtoa_r+0xf24>
  80c5c8:	04800e0e 	bge	zero,r18,80c604 <_dtoa_r+0x83c>
  80c5cc:	d9001617 	ldw	r4,88(sp)
  80c5d0:	980b883a 	mov	r5,r19
  80c5d4:	900d883a 	mov	r6,r18
  80c5d8:	080f6440 	call	80f644 <__pow5mult>
  80c5dc:	d9001617 	ldw	r4,88(sp)
  80c5e0:	d9800717 	ldw	r6,28(sp)
  80c5e4:	100b883a 	mov	r5,r2
  80c5e8:	1027883a 	mov	r19,r2
  80c5ec:	080f3200 	call	80f320 <__multiply>
  80c5f0:	d9001617 	ldw	r4,88(sp)
  80c5f4:	d9400717 	ldw	r5,28(sp)
  80c5f8:	1023883a 	mov	r17,r2
  80c5fc:	080e8900 	call	80e890 <_Bfree>
  80c600:	dc400715 	stw	r17,28(sp)
  80c604:	d9001017 	ldw	r4,64(sp)
  80c608:	248dc83a 	sub	r6,r4,r18
  80c60c:	30010e1e 	bne	r6,zero,80ca48 <_dtoa_r+0xc80>
  80c610:	d9001617 	ldw	r4,88(sp)
  80c614:	04400044 	movi	r17,1
  80c618:	880b883a 	mov	r5,r17
  80c61c:	080f5080 	call	80f508 <__i2b>
  80c620:	d9800917 	ldw	r6,36(sp)
  80c624:	1025883a 	mov	r18,r2
  80c628:	0180040e 	bge	zero,r6,80c63c <_dtoa_r+0x874>
  80c62c:	d9001617 	ldw	r4,88(sp)
  80c630:	100b883a 	mov	r5,r2
  80c634:	080f6440 	call	80f644 <__pow5mult>
  80c638:	1025883a 	mov	r18,r2
  80c63c:	d8801717 	ldw	r2,92(sp)
  80c640:	8880f30e 	bge	r17,r2,80ca10 <_dtoa_r+0xc48>
  80c644:	0023883a 	mov	r17,zero
  80c648:	d9800917 	ldw	r6,36(sp)
  80c64c:	30019e1e 	bne	r6,zero,80ccc8 <_dtoa_r+0xf00>
  80c650:	00c00044 	movi	r3,1
  80c654:	d9000a17 	ldw	r4,40(sp)
  80c658:	20c5883a 	add	r2,r4,r3
  80c65c:	10c007cc 	andi	r3,r2,31
  80c660:	1800841e 	bne	r3,zero,80c874 <_dtoa_r+0xaac>
  80c664:	00800704 	movi	r2,28
  80c668:	d9000a17 	ldw	r4,40(sp)
  80c66c:	d9801117 	ldw	r6,68(sp)
  80c670:	80a1883a 	add	r16,r16,r2
  80c674:	2089883a 	add	r4,r4,r2
  80c678:	308d883a 	add	r6,r6,r2
  80c67c:	d9000a15 	stw	r4,40(sp)
  80c680:	d9801115 	stw	r6,68(sp)
  80c684:	d8801117 	ldw	r2,68(sp)
  80c688:	0080050e 	bge	zero,r2,80c6a0 <_dtoa_r+0x8d8>
  80c68c:	d9400717 	ldw	r5,28(sp)
  80c690:	d9001617 	ldw	r4,88(sp)
  80c694:	100d883a 	mov	r6,r2
  80c698:	080f1d40 	call	80f1d4 <__lshift>
  80c69c:	d8800715 	stw	r2,28(sp)
  80c6a0:	d8c00a17 	ldw	r3,40(sp)
  80c6a4:	00c0050e 	bge	zero,r3,80c6bc <_dtoa_r+0x8f4>
  80c6a8:	d9001617 	ldw	r4,88(sp)
  80c6ac:	900b883a 	mov	r5,r18
  80c6b0:	180d883a 	mov	r6,r3
  80c6b4:	080f1d40 	call	80f1d4 <__lshift>
  80c6b8:	1025883a 	mov	r18,r2
  80c6bc:	d9000c17 	ldw	r4,48(sp)
  80c6c0:	2005003a 	cmpeq	r2,r4,zero
  80c6c4:	10016f26 	beq	r2,zero,80cc84 <_dtoa_r+0xebc>
  80c6c8:	d9000f17 	ldw	r4,60(sp)
  80c6cc:	0102170e 	bge	zero,r4,80cf2c <_dtoa_r+0x1164>
  80c6d0:	d9800b17 	ldw	r6,44(sp)
  80c6d4:	3005003a 	cmpeq	r2,r6,zero
  80c6d8:	1000881e 	bne	r2,zero,80c8fc <_dtoa_r+0xb34>
  80c6dc:	0400050e 	bge	zero,r16,80c6f4 <_dtoa_r+0x92c>
  80c6e0:	d9001617 	ldw	r4,88(sp)
  80c6e4:	980b883a 	mov	r5,r19
  80c6e8:	800d883a 	mov	r6,r16
  80c6ec:	080f1d40 	call	80f1d4 <__lshift>
  80c6f0:	1027883a 	mov	r19,r2
  80c6f4:	8804c03a 	cmpne	r2,r17,zero
  80c6f8:	1002541e 	bne	r2,zero,80d04c <_dtoa_r+0x1284>
  80c6fc:	980b883a 	mov	r5,r19
  80c700:	dd800517 	ldw	r22,20(sp)
  80c704:	dcc00615 	stw	r19,24(sp)
  80c708:	a700004c 	andi	fp,r20,1
  80c70c:	2827883a 	mov	r19,r5
  80c710:	d9000717 	ldw	r4,28(sp)
  80c714:	900b883a 	mov	r5,r18
  80c718:	080bbb00 	call	80bbb0 <quorem>
  80c71c:	d9000717 	ldw	r4,28(sp)
  80c720:	d9400617 	ldw	r5,24(sp)
  80c724:	1023883a 	mov	r17,r2
  80c728:	8dc00c04 	addi	r23,r17,48
  80c72c:	080e9ec0 	call	80e9ec <__mcmp>
  80c730:	d9001617 	ldw	r4,88(sp)
  80c734:	900b883a 	mov	r5,r18
  80c738:	980d883a 	mov	r6,r19
  80c73c:	1029883a 	mov	r20,r2
  80c740:	080f0480 	call	80f048 <__mdiff>
  80c744:	102b883a 	mov	r21,r2
  80c748:	10800317 	ldw	r2,12(r2)
  80c74c:	1001281e 	bne	r2,zero,80cbf0 <_dtoa_r+0xe28>
  80c750:	d9000717 	ldw	r4,28(sp)
  80c754:	a80b883a 	mov	r5,r21
  80c758:	080e9ec0 	call	80e9ec <__mcmp>
  80c75c:	d9001617 	ldw	r4,88(sp)
  80c760:	1021883a 	mov	r16,r2
  80c764:	a80b883a 	mov	r5,r21
  80c768:	080e8900 	call	80e890 <_Bfree>
  80c76c:	8000041e 	bne	r16,zero,80c780 <_dtoa_r+0x9b8>
  80c770:	d8801717 	ldw	r2,92(sp)
  80c774:	1000021e 	bne	r2,zero,80c780 <_dtoa_r+0x9b8>
  80c778:	e004c03a 	cmpne	r2,fp,zero
  80c77c:	10011726 	beq	r2,zero,80cbdc <_dtoa_r+0xe14>
  80c780:	a0010616 	blt	r20,zero,80cb9c <_dtoa_r+0xdd4>
  80c784:	a000041e 	bne	r20,zero,80c798 <_dtoa_r+0x9d0>
  80c788:	d8c01717 	ldw	r3,92(sp)
  80c78c:	1800021e 	bne	r3,zero,80c798 <_dtoa_r+0x9d0>
  80c790:	e004c03a 	cmpne	r2,fp,zero
  80c794:	10010126 	beq	r2,zero,80cb9c <_dtoa_r+0xdd4>
  80c798:	04023d16 	blt	zero,r16,80d090 <_dtoa_r+0x12c8>
  80c79c:	b5c00005 	stb	r23,0(r22)
  80c7a0:	d9800517 	ldw	r6,20(sp)
  80c7a4:	d9000f17 	ldw	r4,60(sp)
  80c7a8:	b5800044 	addi	r22,r22,1
  80c7ac:	3105883a 	add	r2,r6,r4
  80c7b0:	b0806526 	beq	r22,r2,80c948 <_dtoa_r+0xb80>
  80c7b4:	d9400717 	ldw	r5,28(sp)
  80c7b8:	d9001617 	ldw	r4,88(sp)
  80c7bc:	01800284 	movi	r6,10
  80c7c0:	000f883a 	mov	r7,zero
  80c7c4:	080f5440 	call	80f544 <__multadd>
  80c7c8:	d8800715 	stw	r2,28(sp)
  80c7cc:	d8800617 	ldw	r2,24(sp)
  80c7d0:	14c10c26 	beq	r2,r19,80cc04 <_dtoa_r+0xe3c>
  80c7d4:	d9400617 	ldw	r5,24(sp)
  80c7d8:	d9001617 	ldw	r4,88(sp)
  80c7dc:	01800284 	movi	r6,10
  80c7e0:	000f883a 	mov	r7,zero
  80c7e4:	080f5440 	call	80f544 <__multadd>
  80c7e8:	d9001617 	ldw	r4,88(sp)
  80c7ec:	980b883a 	mov	r5,r19
  80c7f0:	01800284 	movi	r6,10
  80c7f4:	000f883a 	mov	r7,zero
  80c7f8:	d8800615 	stw	r2,24(sp)
  80c7fc:	080f5440 	call	80f544 <__multadd>
  80c800:	1027883a 	mov	r19,r2
  80c804:	003fc206 	br	80c710 <_dtoa_r+0x948>
  80c808:	2445c83a 	sub	r2,r4,r17
  80c80c:	a088983a 	sll	r4,r20,r2
  80c810:	003e4b06 	br	80c140 <_dtoa_r+0x378>
  80c814:	01bfffc4 	movi	r6,-1
  80c818:	00800044 	movi	r2,1
  80c81c:	d9800e15 	stw	r6,56(sp)
  80c820:	d9800f15 	stw	r6,60(sp)
  80c824:	d8800b15 	stw	r2,44(sp)
  80c828:	d8c01617 	ldw	r3,88(sp)
  80c82c:	008005c4 	movi	r2,23
  80c830:	18001115 	stw	zero,68(r3)
  80c834:	1580082e 	bgeu	r2,r22,80c858 <_dtoa_r+0xa90>
  80c838:	00c00104 	movi	r3,4
  80c83c:	0009883a 	mov	r4,zero
  80c840:	18c7883a 	add	r3,r3,r3
  80c844:	18800504 	addi	r2,r3,20
  80c848:	21000044 	addi	r4,r4,1
  80c84c:	b0bffc2e 	bgeu	r22,r2,80c840 <_dtoa_r+0xa78>
  80c850:	d9801617 	ldw	r6,88(sp)
  80c854:	31001115 	stw	r4,68(r6)
  80c858:	dc000f17 	ldw	r16,60(sp)
  80c85c:	003e4b06 	br	80c18c <_dtoa_r+0x3c4>
  80c860:	d9801717 	ldw	r6,92(sp)
  80c864:	0023883a 	mov	r17,zero
  80c868:	31bfff04 	addi	r6,r6,-4
  80c86c:	d9801715 	stw	r6,92(sp)
  80c870:	003df806 	br	80c054 <_dtoa_r+0x28c>
  80c874:	00800804 	movi	r2,32
  80c878:	10c9c83a 	sub	r4,r2,r3
  80c87c:	00c00104 	movi	r3,4
  80c880:	19005a16 	blt	r3,r4,80c9ec <_dtoa_r+0xc24>
  80c884:	008000c4 	movi	r2,3
  80c888:	113f7e16 	blt	r2,r4,80c684 <_dtoa_r+0x8bc>
  80c88c:	20800704 	addi	r2,r4,28
  80c890:	003f7506 	br	80c668 <_dtoa_r+0x8a0>
  80c894:	d9801717 	ldw	r6,92(sp)
  80c898:	00800044 	movi	r2,1
  80c89c:	1180a10e 	bge	r2,r6,80cb24 <_dtoa_r+0xd5c>
  80c8a0:	d9800f17 	ldw	r6,60(sp)
  80c8a4:	d8c01017 	ldw	r3,64(sp)
  80c8a8:	30bfffc4 	addi	r2,r6,-1
  80c8ac:	1881c616 	blt	r3,r2,80cfc8 <_dtoa_r+0x1200>
  80c8b0:	18a5c83a 	sub	r18,r3,r2
  80c8b4:	d8800f17 	ldw	r2,60(sp)
  80c8b8:	10026216 	blt	r2,zero,80d244 <_dtoa_r+0x147c>
  80c8bc:	dc001117 	ldw	r16,68(sp)
  80c8c0:	1007883a 	mov	r3,r2
  80c8c4:	d9800a17 	ldw	r6,40(sp)
  80c8c8:	d8801117 	ldw	r2,68(sp)
  80c8cc:	d9001617 	ldw	r4,88(sp)
  80c8d0:	30cd883a 	add	r6,r6,r3
  80c8d4:	10c5883a 	add	r2,r2,r3
  80c8d8:	01400044 	movi	r5,1
  80c8dc:	d9800a15 	stw	r6,40(sp)
  80c8e0:	d8801115 	stw	r2,68(sp)
  80c8e4:	080f5080 	call	80f508 <__i2b>
  80c8e8:	1027883a 	mov	r19,r2
  80c8ec:	003f2506 	br	80c584 <_dtoa_r+0x7bc>
  80c8f0:	00c020b4 	movhi	r3,130
  80c8f4:	18f0b104 	addi	r3,r3,-15676
  80c8f8:	003d6706 	br	80be98 <_dtoa_r+0xd0>
  80c8fc:	dd800517 	ldw	r22,20(sp)
  80c900:	04000044 	movi	r16,1
  80c904:	00000706 	br	80c924 <_dtoa_r+0xb5c>
  80c908:	d9400717 	ldw	r5,28(sp)
  80c90c:	d9001617 	ldw	r4,88(sp)
  80c910:	01800284 	movi	r6,10
  80c914:	000f883a 	mov	r7,zero
  80c918:	080f5440 	call	80f544 <__multadd>
  80c91c:	d8800715 	stw	r2,28(sp)
  80c920:	84000044 	addi	r16,r16,1
  80c924:	d9000717 	ldw	r4,28(sp)
  80c928:	900b883a 	mov	r5,r18
  80c92c:	080bbb00 	call	80bbb0 <quorem>
  80c930:	15c00c04 	addi	r23,r2,48
  80c934:	b5c00005 	stb	r23,0(r22)
  80c938:	d8c00f17 	ldw	r3,60(sp)
  80c93c:	b5800044 	addi	r22,r22,1
  80c940:	80fff116 	blt	r16,r3,80c908 <_dtoa_r+0xb40>
  80c944:	d8000615 	stw	zero,24(sp)
  80c948:	d9400717 	ldw	r5,28(sp)
  80c94c:	d9001617 	ldw	r4,88(sp)
  80c950:	01800044 	movi	r6,1
  80c954:	080f1d40 	call	80f1d4 <__lshift>
  80c958:	1009883a 	mov	r4,r2
  80c95c:	900b883a 	mov	r5,r18
  80c960:	d8800715 	stw	r2,28(sp)
  80c964:	080e9ec0 	call	80e9ec <__mcmp>
  80c968:	00803c0e 	bge	zero,r2,80ca5c <_dtoa_r+0xc94>
  80c96c:	b009883a 	mov	r4,r22
  80c970:	213fffc4 	addi	r4,r4,-1
  80c974:	21400003 	ldbu	r5,0(r4)
  80c978:	00800e44 	movi	r2,57
  80c97c:	28c03fcc 	andi	r3,r5,255
  80c980:	18c0201c 	xori	r3,r3,128
  80c984:	18ffe004 	addi	r3,r3,-128
  80c988:	1881981e 	bne	r3,r2,80cfec <_dtoa_r+0x1224>
  80c98c:	d9800517 	ldw	r6,20(sp)
  80c990:	21bff71e 	bne	r4,r6,80c970 <_dtoa_r+0xba8>
  80c994:	d8800d17 	ldw	r2,52(sp)
  80c998:	37000044 	addi	fp,r6,1
  80c99c:	10800044 	addi	r2,r2,1
  80c9a0:	d8800d15 	stw	r2,52(sp)
  80c9a4:	00800c44 	movi	r2,49
  80c9a8:	30800005 	stb	r2,0(r6)
  80c9ac:	d9001617 	ldw	r4,88(sp)
  80c9b0:	900b883a 	mov	r5,r18
  80c9b4:	080e8900 	call	80e890 <_Bfree>
  80c9b8:	983ecd26 	beq	r19,zero,80c4f0 <_dtoa_r+0x728>
  80c9bc:	d8c00617 	ldw	r3,24(sp)
  80c9c0:	18000426 	beq	r3,zero,80c9d4 <_dtoa_r+0xc0c>
  80c9c4:	1cc00326 	beq	r3,r19,80c9d4 <_dtoa_r+0xc0c>
  80c9c8:	d9001617 	ldw	r4,88(sp)
  80c9cc:	180b883a 	mov	r5,r3
  80c9d0:	080e8900 	call	80e890 <_Bfree>
  80c9d4:	d9001617 	ldw	r4,88(sp)
  80c9d8:	980b883a 	mov	r5,r19
  80c9dc:	080e8900 	call	80e890 <_Bfree>
  80c9e0:	003ec306 	br	80c4f0 <_dtoa_r+0x728>
  80c9e4:	1805883a 	mov	r2,r3
  80c9e8:	003eeb06 	br	80c598 <_dtoa_r+0x7d0>
  80c9ec:	d9800a17 	ldw	r6,40(sp)
  80c9f0:	d8c01117 	ldw	r3,68(sp)
  80c9f4:	20bfff04 	addi	r2,r4,-4
  80c9f8:	308d883a 	add	r6,r6,r2
  80c9fc:	1887883a 	add	r3,r3,r2
  80ca00:	80a1883a 	add	r16,r16,r2
  80ca04:	d9800a15 	stw	r6,40(sp)
  80ca08:	d8c01115 	stw	r3,68(sp)
  80ca0c:	003f1d06 	br	80c684 <_dtoa_r+0x8bc>
  80ca10:	a03f0c1e 	bne	r20,zero,80c644 <_dtoa_r+0x87c>
  80ca14:	00800434 	movhi	r2,16
  80ca18:	10bfffc4 	addi	r2,r2,-1
  80ca1c:	a884703a 	and	r2,r21,r2
  80ca20:	103f081e 	bne	r2,zero,80c644 <_dtoa_r+0x87c>
  80ca24:	a89ffc2c 	andhi	r2,r21,32752
  80ca28:	103f0626 	beq	r2,zero,80c644 <_dtoa_r+0x87c>
  80ca2c:	d8c01117 	ldw	r3,68(sp)
  80ca30:	d9000a17 	ldw	r4,40(sp)
  80ca34:	18c00044 	addi	r3,r3,1
  80ca38:	21000044 	addi	r4,r4,1
  80ca3c:	d8c01115 	stw	r3,68(sp)
  80ca40:	d9000a15 	stw	r4,40(sp)
  80ca44:	003f0006 	br	80c648 <_dtoa_r+0x880>
  80ca48:	d9400717 	ldw	r5,28(sp)
  80ca4c:	d9001617 	ldw	r4,88(sp)
  80ca50:	080f6440 	call	80f644 <__pow5mult>
  80ca54:	d8800715 	stw	r2,28(sp)
  80ca58:	003eed06 	br	80c610 <_dtoa_r+0x848>
  80ca5c:	1000021e 	bne	r2,zero,80ca68 <_dtoa_r+0xca0>
  80ca60:	b880004c 	andi	r2,r23,1
  80ca64:	103fc11e 	bne	r2,zero,80c96c <_dtoa_r+0xba4>
  80ca68:	b5bfffc4 	addi	r22,r22,-1
  80ca6c:	b0c00007 	ldb	r3,0(r22)
  80ca70:	00800c04 	movi	r2,48
  80ca74:	18bffc26 	beq	r3,r2,80ca68 <_dtoa_r+0xca0>
  80ca78:	b7000044 	addi	fp,r22,1
  80ca7c:	003fcb06 	br	80c9ac <_dtoa_r+0xbe4>
  80ca80:	d9800d17 	ldw	r6,52(sp)
  80ca84:	018fc83a 	sub	r7,zero,r6
  80ca88:	3801f726 	beq	r7,zero,80d268 <_dtoa_r+0x14a0>
  80ca8c:	398003cc 	andi	r6,r7,15
  80ca90:	300c90fa 	slli	r6,r6,3
  80ca94:	014020b4 	movhi	r5,130
  80ca98:	2970ce04 	addi	r5,r5,-15560
  80ca9c:	d9001217 	ldw	r4,72(sp)
  80caa0:	314d883a 	add	r6,r6,r5
  80caa4:	30c00117 	ldw	r3,4(r6)
  80caa8:	30800017 	ldw	r2,0(r6)
  80caac:	d9401317 	ldw	r5,76(sp)
  80cab0:	3821d13a 	srai	r16,r7,4
  80cab4:	100d883a 	mov	r6,r2
  80cab8:	180f883a 	mov	r7,r3
  80cabc:	0807c680 	call	807c68 <__muldf3>
  80cac0:	1011883a 	mov	r8,r2
  80cac4:	1813883a 	mov	r9,r3
  80cac8:	1029883a 	mov	r20,r2
  80cacc:	182b883a 	mov	r21,r3
  80cad0:	8001e526 	beq	r16,zero,80d268 <_dtoa_r+0x14a0>
  80cad4:	05800084 	movi	r22,2
  80cad8:	044020b4 	movhi	r17,130
  80cadc:	8c710004 	addi	r17,r17,-15360
  80cae0:	8080004c 	andi	r2,r16,1
  80cae4:	1005003a 	cmpeq	r2,r2,zero
  80cae8:	1000081e 	bne	r2,zero,80cb0c <_dtoa_r+0xd44>
  80caec:	89800017 	ldw	r6,0(r17)
  80caf0:	89c00117 	ldw	r7,4(r17)
  80caf4:	480b883a 	mov	r5,r9
  80caf8:	4009883a 	mov	r4,r8
  80cafc:	0807c680 	call	807c68 <__muldf3>
  80cb00:	1011883a 	mov	r8,r2
  80cb04:	b5800044 	addi	r22,r22,1
  80cb08:	1813883a 	mov	r9,r3
  80cb0c:	8021d07a 	srai	r16,r16,1
  80cb10:	8c400204 	addi	r17,r17,8
  80cb14:	803ff21e 	bne	r16,zero,80cae0 <_dtoa_r+0xd18>
  80cb18:	4029883a 	mov	r20,r8
  80cb1c:	482b883a 	mov	r21,r9
  80cb20:	003dca06 	br	80c24c <_dtoa_r+0x484>
  80cb24:	d9000817 	ldw	r4,32(sp)
  80cb28:	2005003a 	cmpeq	r2,r4,zero
  80cb2c:	1001f61e 	bne	r2,zero,80d308 <_dtoa_r+0x1540>
  80cb30:	dc001117 	ldw	r16,68(sp)
  80cb34:	dc801017 	ldw	r18,64(sp)
  80cb38:	18c10cc4 	addi	r3,r3,1075
  80cb3c:	003f6106 	br	80c8c4 <_dtoa_r+0xafc>
  80cb40:	d8000b15 	stw	zero,44(sp)
  80cb44:	d9802617 	ldw	r6,152(sp)
  80cb48:	d8c00d17 	ldw	r3,52(sp)
  80cb4c:	30800044 	addi	r2,r6,1
  80cb50:	18ad883a 	add	r22,r3,r2
  80cb54:	b13fffc4 	addi	r4,r22,-1
  80cb58:	d9000e15 	stw	r4,56(sp)
  80cb5c:	0581f60e 	bge	zero,r22,80d338 <_dtoa_r+0x1570>
  80cb60:	dd800f15 	stw	r22,60(sp)
  80cb64:	003f3006 	br	80c828 <_dtoa_r+0xa60>
  80cb68:	d8000b15 	stw	zero,44(sp)
  80cb6c:	d9002617 	ldw	r4,152(sp)
  80cb70:	0101eb0e 	bge	zero,r4,80d320 <_dtoa_r+0x1558>
  80cb74:	202d883a 	mov	r22,r4
  80cb78:	d9000e15 	stw	r4,56(sp)
  80cb7c:	d9000f15 	stw	r4,60(sp)
  80cb80:	003f2906 	br	80c828 <_dtoa_r+0xa60>
  80cb84:	01800044 	movi	r6,1
  80cb88:	d9800b15 	stw	r6,44(sp)
  80cb8c:	003ff706 	br	80cb6c <_dtoa_r+0xda4>
  80cb90:	01000044 	movi	r4,1
  80cb94:	d9000b15 	stw	r4,44(sp)
  80cb98:	003fea06 	br	80cb44 <_dtoa_r+0xd7c>
  80cb9c:	04000c0e 	bge	zero,r16,80cbd0 <_dtoa_r+0xe08>
  80cba0:	d9400717 	ldw	r5,28(sp)
  80cba4:	d9001617 	ldw	r4,88(sp)
  80cba8:	01800044 	movi	r6,1
  80cbac:	080f1d40 	call	80f1d4 <__lshift>
  80cbb0:	1009883a 	mov	r4,r2
  80cbb4:	900b883a 	mov	r5,r18
  80cbb8:	d8800715 	stw	r2,28(sp)
  80cbbc:	080e9ec0 	call	80e9ec <__mcmp>
  80cbc0:	0081e00e 	bge	zero,r2,80d344 <_dtoa_r+0x157c>
  80cbc4:	bdc00044 	addi	r23,r23,1
  80cbc8:	00800e84 	movi	r2,58
  80cbcc:	b881a226 	beq	r23,r2,80d258 <_dtoa_r+0x1490>
  80cbd0:	b7000044 	addi	fp,r22,1
  80cbd4:	b5c00005 	stb	r23,0(r22)
  80cbd8:	003f7406 	br	80c9ac <_dtoa_r+0xbe4>
  80cbdc:	00800e44 	movi	r2,57
  80cbe0:	b8819d26 	beq	r23,r2,80d258 <_dtoa_r+0x1490>
  80cbe4:	053ffa0e 	bge	zero,r20,80cbd0 <_dtoa_r+0xe08>
  80cbe8:	8dc00c44 	addi	r23,r17,49
  80cbec:	003ff806 	br	80cbd0 <_dtoa_r+0xe08>
  80cbf0:	d9001617 	ldw	r4,88(sp)
  80cbf4:	a80b883a 	mov	r5,r21
  80cbf8:	04000044 	movi	r16,1
  80cbfc:	080e8900 	call	80e890 <_Bfree>
  80cc00:	003edf06 	br	80c780 <_dtoa_r+0x9b8>
  80cc04:	d9001617 	ldw	r4,88(sp)
  80cc08:	980b883a 	mov	r5,r19
  80cc0c:	01800284 	movi	r6,10
  80cc10:	000f883a 	mov	r7,zero
  80cc14:	080f5440 	call	80f544 <__multadd>
  80cc18:	1027883a 	mov	r19,r2
  80cc1c:	d8800615 	stw	r2,24(sp)
  80cc20:	003ebb06 	br	80c710 <_dtoa_r+0x948>
  80cc24:	d9801117 	ldw	r6,68(sp)
  80cc28:	d8800d17 	ldw	r2,52(sp)
  80cc2c:	d8000915 	stw	zero,36(sp)
  80cc30:	308dc83a 	sub	r6,r6,r2
  80cc34:	0087c83a 	sub	r3,zero,r2
  80cc38:	d9801115 	stw	r6,68(sp)
  80cc3c:	d8c01015 	stw	r3,64(sp)
  80cc40:	003cfe06 	br	80c03c <_dtoa_r+0x274>
  80cc44:	018dc83a 	sub	r6,zero,r6
  80cc48:	d9801115 	stw	r6,68(sp)
  80cc4c:	d8000a15 	stw	zero,40(sp)
  80cc50:	003cf306 	br	80c020 <_dtoa_r+0x258>
  80cc54:	d9000d17 	ldw	r4,52(sp)
  80cc58:	080852c0 	call	80852c <__floatsidf>
  80cc5c:	880b883a 	mov	r5,r17
  80cc60:	8009883a 	mov	r4,r16
  80cc64:	180f883a 	mov	r7,r3
  80cc68:	100d883a 	mov	r6,r2
  80cc6c:	080830c0 	call	80830c <__nedf2>
  80cc70:	103ce126 	beq	r2,zero,80bff8 <_dtoa_r+0x230>
  80cc74:	d9800d17 	ldw	r6,52(sp)
  80cc78:	31bfffc4 	addi	r6,r6,-1
  80cc7c:	d9800d15 	stw	r6,52(sp)
  80cc80:	003cdd06 	br	80bff8 <_dtoa_r+0x230>
  80cc84:	d9000717 	ldw	r4,28(sp)
  80cc88:	900b883a 	mov	r5,r18
  80cc8c:	080e9ec0 	call	80e9ec <__mcmp>
  80cc90:	103e8d0e 	bge	r2,zero,80c6c8 <_dtoa_r+0x900>
  80cc94:	d9400717 	ldw	r5,28(sp)
  80cc98:	d9001617 	ldw	r4,88(sp)
  80cc9c:	01800284 	movi	r6,10
  80cca0:	000f883a 	mov	r7,zero
  80cca4:	080f5440 	call	80f544 <__multadd>
  80cca8:	d9800d17 	ldw	r6,52(sp)
  80ccac:	d8800715 	stw	r2,28(sp)
  80ccb0:	31bfffc4 	addi	r6,r6,-1
  80ccb4:	d9800d15 	stw	r6,52(sp)
  80ccb8:	b001a71e 	bne	r22,zero,80d358 <_dtoa_r+0x1590>
  80ccbc:	d8800e17 	ldw	r2,56(sp)
  80ccc0:	d8800f15 	stw	r2,60(sp)
  80ccc4:	003e8006 	br	80c6c8 <_dtoa_r+0x900>
  80ccc8:	90800417 	ldw	r2,16(r18)
  80cccc:	1085883a 	add	r2,r2,r2
  80ccd0:	1085883a 	add	r2,r2,r2
  80ccd4:	1485883a 	add	r2,r2,r18
  80ccd8:	11000417 	ldw	r4,16(r2)
  80ccdc:	080e8b80 	call	80e8b8 <__hi0bits>
  80cce0:	00c00804 	movi	r3,32
  80cce4:	1887c83a 	sub	r3,r3,r2
  80cce8:	003e5a06 	br	80c654 <_dtoa_r+0x88c>
  80ccec:	d9400717 	ldw	r5,28(sp)
  80ccf0:	d9801017 	ldw	r6,64(sp)
  80ccf4:	d9001617 	ldw	r4,88(sp)
  80ccf8:	080f6440 	call	80f644 <__pow5mult>
  80ccfc:	d8800715 	stw	r2,28(sp)
  80cd00:	003e4306 	br	80c610 <_dtoa_r+0x848>
  80cd04:	d9800f17 	ldw	r6,60(sp)
  80cd08:	d8800d17 	ldw	r2,52(sp)
  80cd0c:	d9800315 	stw	r6,12(sp)
  80cd10:	d8800415 	stw	r2,16(sp)
  80cd14:	d8c00b17 	ldw	r3,44(sp)
  80cd18:	1805003a 	cmpeq	r2,r3,zero
  80cd1c:	1000e21e 	bne	r2,zero,80d0a8 <_dtoa_r+0x12e0>
  80cd20:	d9000317 	ldw	r4,12(sp)
  80cd24:	0005883a 	mov	r2,zero
  80cd28:	00cff834 	movhi	r3,16352
  80cd2c:	200c90fa 	slli	r6,r4,3
  80cd30:	010020b4 	movhi	r4,130
  80cd34:	2130ce04 	addi	r4,r4,-15560
  80cd38:	180b883a 	mov	r5,r3
  80cd3c:	310d883a 	add	r6,r6,r4
  80cd40:	327fff17 	ldw	r9,-4(r6)
  80cd44:	323ffe17 	ldw	r8,-8(r6)
  80cd48:	1009883a 	mov	r4,r2
  80cd4c:	480f883a 	mov	r7,r9
  80cd50:	400d883a 	mov	r6,r8
  80cd54:	080802c0 	call	80802c <__divdf3>
  80cd58:	180b883a 	mov	r5,r3
  80cd5c:	b00d883a 	mov	r6,r22
  80cd60:	b80f883a 	mov	r7,r23
  80cd64:	1009883a 	mov	r4,r2
  80cd68:	0807b740 	call	807b74 <__subdf3>
  80cd6c:	a80b883a 	mov	r5,r21
  80cd70:	a009883a 	mov	r4,r20
  80cd74:	d8c01915 	stw	r3,100(sp)
  80cd78:	d8801815 	stw	r2,96(sp)
  80cd7c:	08086240 	call	808624 <__fixdfsi>
  80cd80:	1009883a 	mov	r4,r2
  80cd84:	1027883a 	mov	r19,r2
  80cd88:	080852c0 	call	80852c <__floatsidf>
  80cd8c:	a80b883a 	mov	r5,r21
  80cd90:	a009883a 	mov	r4,r20
  80cd94:	180f883a 	mov	r7,r3
  80cd98:	100d883a 	mov	r6,r2
  80cd9c:	0807b740 	call	807b74 <__subdf3>
  80cda0:	d9801817 	ldw	r6,96(sp)
  80cda4:	1823883a 	mov	r17,r3
  80cda8:	d8801415 	stw	r2,80(sp)
  80cdac:	302d883a 	mov	r22,r6
  80cdb0:	d9800517 	ldw	r6,20(sp)
  80cdb4:	9cc00c04 	addi	r19,r19,48
  80cdb8:	dc401515 	stw	r17,84(sp)
  80cdbc:	d8c01917 	ldw	r3,100(sp)
  80cdc0:	34c00005 	stb	r19,0(r6)
  80cdc4:	d8800517 	ldw	r2,20(sp)
  80cdc8:	d9401917 	ldw	r5,100(sp)
  80cdcc:	d9801417 	ldw	r6,80(sp)
  80cdd0:	b009883a 	mov	r4,r22
  80cdd4:	880f883a 	mov	r7,r17
  80cdd8:	182f883a 	mov	r23,r3
  80cddc:	17000044 	addi	fp,r2,1
  80cde0:	08083940 	call	808394 <__gtdf2>
  80cde4:	00804e16 	blt	zero,r2,80cf20 <_dtoa_r+0x1158>
  80cde8:	d9801417 	ldw	r6,80(sp)
  80cdec:	0005883a 	mov	r2,zero
  80cdf0:	00cffc34 	movhi	r3,16368
  80cdf4:	180b883a 	mov	r5,r3
  80cdf8:	880f883a 	mov	r7,r17
  80cdfc:	1009883a 	mov	r4,r2
  80ce00:	0807b740 	call	807b74 <__subdf3>
  80ce04:	d9401917 	ldw	r5,100(sp)
  80ce08:	180f883a 	mov	r7,r3
  80ce0c:	b009883a 	mov	r4,r22
  80ce10:	100d883a 	mov	r6,r2
  80ce14:	08083940 	call	808394 <__gtdf2>
  80ce18:	00bda216 	blt	zero,r2,80c4a4 <_dtoa_r+0x6dc>
  80ce1c:	d8c00317 	ldw	r3,12(sp)
  80ce20:	00800044 	movi	r2,1
  80ce24:	10c01216 	blt	r2,r3,80ce70 <_dtoa_r+0x10a8>
  80ce28:	003d4506 	br	80c340 <_dtoa_r+0x578>
  80ce2c:	d9801417 	ldw	r6,80(sp)
  80ce30:	0005883a 	mov	r2,zero
  80ce34:	00cffc34 	movhi	r3,16368
  80ce38:	180b883a 	mov	r5,r3
  80ce3c:	880f883a 	mov	r7,r17
  80ce40:	1009883a 	mov	r4,r2
  80ce44:	0807b740 	call	807b74 <__subdf3>
  80ce48:	d9c01b17 	ldw	r7,108(sp)
  80ce4c:	180b883a 	mov	r5,r3
  80ce50:	1009883a 	mov	r4,r2
  80ce54:	b00d883a 	mov	r6,r22
  80ce58:	080841c0 	call	80841c <__ltdf2>
  80ce5c:	103d9116 	blt	r2,zero,80c4a4 <_dtoa_r+0x6dc>
  80ce60:	d9800517 	ldw	r6,20(sp)
  80ce64:	d9000317 	ldw	r4,12(sp)
  80ce68:	3105883a 	add	r2,r6,r4
  80ce6c:	e0bd3426 	beq	fp,r2,80c340 <_dtoa_r+0x578>
  80ce70:	04500934 	movhi	r17,16420
  80ce74:	0021883a 	mov	r16,zero
  80ce78:	b80b883a 	mov	r5,r23
  80ce7c:	b009883a 	mov	r4,r22
  80ce80:	800d883a 	mov	r6,r16
  80ce84:	880f883a 	mov	r7,r17
  80ce88:	0807c680 	call	807c68 <__muldf3>
  80ce8c:	d9401517 	ldw	r5,84(sp)
  80ce90:	d9001417 	ldw	r4,80(sp)
  80ce94:	880f883a 	mov	r7,r17
  80ce98:	000d883a 	mov	r6,zero
  80ce9c:	d8801a15 	stw	r2,104(sp)
  80cea0:	d8c01b15 	stw	r3,108(sp)
  80cea4:	0807c680 	call	807c68 <__muldf3>
  80cea8:	180b883a 	mov	r5,r3
  80ceac:	1009883a 	mov	r4,r2
  80ceb0:	1823883a 	mov	r17,r3
  80ceb4:	1021883a 	mov	r16,r2
  80ceb8:	08086240 	call	808624 <__fixdfsi>
  80cebc:	1009883a 	mov	r4,r2
  80cec0:	102b883a 	mov	r21,r2
  80cec4:	080852c0 	call	80852c <__floatsidf>
  80cec8:	880b883a 	mov	r5,r17
  80cecc:	8009883a 	mov	r4,r16
  80ced0:	180f883a 	mov	r7,r3
  80ced4:	100d883a 	mov	r6,r2
  80ced8:	0807b740 	call	807b74 <__subdf3>
  80cedc:	1021883a 	mov	r16,r2
  80cee0:	d9001b17 	ldw	r4,108(sp)
  80cee4:	1823883a 	mov	r17,r3
  80cee8:	dc001415 	stw	r16,80(sp)
  80ceec:	ad400c04 	addi	r21,r21,48
  80cef0:	dc401515 	stw	r17,84(sp)
  80cef4:	d8801a17 	ldw	r2,104(sp)
  80cef8:	e5400005 	stb	r21,0(fp)
  80cefc:	202f883a 	mov	r23,r4
  80cf00:	d9c01b17 	ldw	r7,108(sp)
  80cf04:	d9001417 	ldw	r4,80(sp)
  80cf08:	880b883a 	mov	r5,r17
  80cf0c:	100d883a 	mov	r6,r2
  80cf10:	102d883a 	mov	r22,r2
  80cf14:	e7000044 	addi	fp,fp,1
  80cf18:	080841c0 	call	80841c <__ltdf2>
  80cf1c:	103fc30e 	bge	r2,zero,80ce2c <_dtoa_r+0x1064>
  80cf20:	d9000417 	ldw	r4,16(sp)
  80cf24:	d9000d15 	stw	r4,52(sp)
  80cf28:	003d7106 	br	80c4f0 <_dtoa_r+0x728>
  80cf2c:	d9801717 	ldw	r6,92(sp)
  80cf30:	00800084 	movi	r2,2
  80cf34:	11bde60e 	bge	r2,r6,80c6d0 <_dtoa_r+0x908>
  80cf38:	203cfb1e 	bne	r4,zero,80c328 <_dtoa_r+0x560>
  80cf3c:	d9001617 	ldw	r4,88(sp)
  80cf40:	900b883a 	mov	r5,r18
  80cf44:	01800144 	movi	r6,5
  80cf48:	000f883a 	mov	r7,zero
  80cf4c:	080f5440 	call	80f544 <__multadd>
  80cf50:	d9000717 	ldw	r4,28(sp)
  80cf54:	100b883a 	mov	r5,r2
  80cf58:	1025883a 	mov	r18,r2
  80cf5c:	080e9ec0 	call	80e9ec <__mcmp>
  80cf60:	00bcf10e 	bge	zero,r2,80c328 <_dtoa_r+0x560>
  80cf64:	d8c00d17 	ldw	r3,52(sp)
  80cf68:	d9000517 	ldw	r4,20(sp)
  80cf6c:	d8000615 	stw	zero,24(sp)
  80cf70:	18c00044 	addi	r3,r3,1
  80cf74:	d8c00d15 	stw	r3,52(sp)
  80cf78:	00800c44 	movi	r2,49
  80cf7c:	27000044 	addi	fp,r4,1
  80cf80:	20800005 	stb	r2,0(r4)
  80cf84:	003e8906 	br	80c9ac <_dtoa_r+0xbe4>
  80cf88:	d8c00517 	ldw	r3,20(sp)
  80cf8c:	003bc206 	br	80be98 <_dtoa_r+0xd0>
  80cf90:	018020b4 	movhi	r6,130
  80cf94:	31b10004 	addi	r6,r6,-15360
  80cf98:	30c00917 	ldw	r3,36(r6)
  80cf9c:	30800817 	ldw	r2,32(r6)
  80cfa0:	d9001217 	ldw	r4,72(sp)
  80cfa4:	d9401317 	ldw	r5,76(sp)
  80cfa8:	180f883a 	mov	r7,r3
  80cfac:	100d883a 	mov	r6,r2
  80cfb0:	080802c0 	call	80802c <__divdf3>
  80cfb4:	948003cc 	andi	r18,r18,15
  80cfb8:	058000c4 	movi	r22,3
  80cfbc:	1029883a 	mov	r20,r2
  80cfc0:	182b883a 	mov	r21,r3
  80cfc4:	003c8906 	br	80c1ec <_dtoa_r+0x424>
  80cfc8:	d9001017 	ldw	r4,64(sp)
  80cfcc:	d9800917 	ldw	r6,36(sp)
  80cfd0:	0025883a 	mov	r18,zero
  80cfd4:	1105c83a 	sub	r2,r2,r4
  80cfd8:	2089883a 	add	r4,r4,r2
  80cfdc:	308d883a 	add	r6,r6,r2
  80cfe0:	d9001015 	stw	r4,64(sp)
  80cfe4:	d9800915 	stw	r6,36(sp)
  80cfe8:	003e3206 	br	80c8b4 <_dtoa_r+0xaec>
  80cfec:	28800044 	addi	r2,r5,1
  80cff0:	27000044 	addi	fp,r4,1
  80cff4:	20800005 	stb	r2,0(r4)
  80cff8:	003e6c06 	br	80c9ac <_dtoa_r+0xbe4>
  80cffc:	d8800f17 	ldw	r2,60(sp)
  80d000:	00bce016 	blt	zero,r2,80c384 <_dtoa_r+0x5bc>
  80d004:	d9800f17 	ldw	r6,60(sp)
  80d008:	303cc51e 	bne	r6,zero,80c320 <_dtoa_r+0x558>
  80d00c:	0005883a 	mov	r2,zero
  80d010:	00d00534 	movhi	r3,16404
  80d014:	980b883a 	mov	r5,r19
  80d018:	180f883a 	mov	r7,r3
  80d01c:	9009883a 	mov	r4,r18
  80d020:	100d883a 	mov	r6,r2
  80d024:	0807c680 	call	807c68 <__muldf3>
  80d028:	180b883a 	mov	r5,r3
  80d02c:	a80f883a 	mov	r7,r21
  80d030:	1009883a 	mov	r4,r2
  80d034:	a00d883a 	mov	r6,r20
  80d038:	08110e00 	call	8110e0 <__gedf2>
  80d03c:	103cb80e 	bge	r2,zero,80c320 <_dtoa_r+0x558>
  80d040:	0027883a 	mov	r19,zero
  80d044:	0025883a 	mov	r18,zero
  80d048:	003fc606 	br	80cf64 <_dtoa_r+0x119c>
  80d04c:	99400117 	ldw	r5,4(r19)
  80d050:	d9001617 	ldw	r4,88(sp)
  80d054:	080ee100 	call	80ee10 <_Balloc>
  80d058:	99800417 	ldw	r6,16(r19)
  80d05c:	11000304 	addi	r4,r2,12
  80d060:	99400304 	addi	r5,r19,12
  80d064:	318d883a 	add	r6,r6,r6
  80d068:	318d883a 	add	r6,r6,r6
  80d06c:	31800204 	addi	r6,r6,8
  80d070:	1023883a 	mov	r17,r2
  80d074:	080e6780 	call	80e678 <memcpy>
  80d078:	d9001617 	ldw	r4,88(sp)
  80d07c:	880b883a 	mov	r5,r17
  80d080:	01800044 	movi	r6,1
  80d084:	080f1d40 	call	80f1d4 <__lshift>
  80d088:	100b883a 	mov	r5,r2
  80d08c:	003d9c06 	br	80c700 <_dtoa_r+0x938>
  80d090:	00800e44 	movi	r2,57
  80d094:	b8807026 	beq	r23,r2,80d258 <_dtoa_r+0x1490>
  80d098:	b8800044 	addi	r2,r23,1
  80d09c:	b7000044 	addi	fp,r22,1
  80d0a0:	b0800005 	stb	r2,0(r22)
  80d0a4:	003e4106 	br	80c9ac <_dtoa_r+0xbe4>
  80d0a8:	d8800317 	ldw	r2,12(sp)
  80d0ac:	018020b4 	movhi	r6,130
  80d0b0:	31b0ce04 	addi	r6,r6,-15560
  80d0b4:	b009883a 	mov	r4,r22
  80d0b8:	100e90fa 	slli	r7,r2,3
  80d0bc:	b80b883a 	mov	r5,r23
  80d0c0:	398f883a 	add	r7,r7,r6
  80d0c4:	38bffe17 	ldw	r2,-8(r7)
  80d0c8:	d9800517 	ldw	r6,20(sp)
  80d0cc:	38ffff17 	ldw	r3,-4(r7)
  80d0d0:	37000044 	addi	fp,r6,1
  80d0d4:	180f883a 	mov	r7,r3
  80d0d8:	100d883a 	mov	r6,r2
  80d0dc:	0807c680 	call	807c68 <__muldf3>
  80d0e0:	a80b883a 	mov	r5,r21
  80d0e4:	a009883a 	mov	r4,r20
  80d0e8:	182f883a 	mov	r23,r3
  80d0ec:	102d883a 	mov	r22,r2
  80d0f0:	08086240 	call	808624 <__fixdfsi>
  80d0f4:	1009883a 	mov	r4,r2
  80d0f8:	1027883a 	mov	r19,r2
  80d0fc:	080852c0 	call	80852c <__floatsidf>
  80d100:	a80b883a 	mov	r5,r21
  80d104:	a009883a 	mov	r4,r20
  80d108:	180f883a 	mov	r7,r3
  80d10c:	100d883a 	mov	r6,r2
  80d110:	0807b740 	call	807b74 <__subdf3>
  80d114:	180b883a 	mov	r5,r3
  80d118:	d8c00517 	ldw	r3,20(sp)
  80d11c:	9cc00c04 	addi	r19,r19,48
  80d120:	1009883a 	mov	r4,r2
  80d124:	1cc00005 	stb	r19,0(r3)
  80d128:	2021883a 	mov	r16,r4
  80d12c:	d9000317 	ldw	r4,12(sp)
  80d130:	00800044 	movi	r2,1
  80d134:	2823883a 	mov	r17,r5
  80d138:	20802226 	beq	r4,r2,80d1c4 <_dtoa_r+0x13fc>
  80d13c:	1029883a 	mov	r20,r2
  80d140:	0005883a 	mov	r2,zero
  80d144:	00d00934 	movhi	r3,16420
  80d148:	180f883a 	mov	r7,r3
  80d14c:	100d883a 	mov	r6,r2
  80d150:	880b883a 	mov	r5,r17
  80d154:	8009883a 	mov	r4,r16
  80d158:	0807c680 	call	807c68 <__muldf3>
  80d15c:	180b883a 	mov	r5,r3
  80d160:	1009883a 	mov	r4,r2
  80d164:	1823883a 	mov	r17,r3
  80d168:	1021883a 	mov	r16,r2
  80d16c:	08086240 	call	808624 <__fixdfsi>
  80d170:	1009883a 	mov	r4,r2
  80d174:	102b883a 	mov	r21,r2
  80d178:	080852c0 	call	80852c <__floatsidf>
  80d17c:	880b883a 	mov	r5,r17
  80d180:	8009883a 	mov	r4,r16
  80d184:	180f883a 	mov	r7,r3
  80d188:	100d883a 	mov	r6,r2
  80d18c:	0807b740 	call	807b74 <__subdf3>
  80d190:	180b883a 	mov	r5,r3
  80d194:	d8c00517 	ldw	r3,20(sp)
  80d198:	1009883a 	mov	r4,r2
  80d19c:	ad400c04 	addi	r21,r21,48
  80d1a0:	1d05883a 	add	r2,r3,r20
  80d1a4:	15400005 	stb	r21,0(r2)
  80d1a8:	2021883a 	mov	r16,r4
  80d1ac:	d9000317 	ldw	r4,12(sp)
  80d1b0:	a5000044 	addi	r20,r20,1
  80d1b4:	2823883a 	mov	r17,r5
  80d1b8:	a13fe11e 	bne	r20,r4,80d140 <_dtoa_r+0x1378>
  80d1bc:	e505883a 	add	r2,fp,r20
  80d1c0:	173fffc4 	addi	fp,r2,-1
  80d1c4:	0025883a 	mov	r18,zero
  80d1c8:	04cff834 	movhi	r19,16352
  80d1cc:	b009883a 	mov	r4,r22
  80d1d0:	b80b883a 	mov	r5,r23
  80d1d4:	900d883a 	mov	r6,r18
  80d1d8:	980f883a 	mov	r7,r19
  80d1dc:	0807bf40 	call	807bf4 <__adddf3>
  80d1e0:	180b883a 	mov	r5,r3
  80d1e4:	1009883a 	mov	r4,r2
  80d1e8:	800d883a 	mov	r6,r16
  80d1ec:	880f883a 	mov	r7,r17
  80d1f0:	080841c0 	call	80841c <__ltdf2>
  80d1f4:	103cab16 	blt	r2,zero,80c4a4 <_dtoa_r+0x6dc>
  80d1f8:	0009883a 	mov	r4,zero
  80d1fc:	980b883a 	mov	r5,r19
  80d200:	b80f883a 	mov	r7,r23
  80d204:	b00d883a 	mov	r6,r22
  80d208:	0807b740 	call	807b74 <__subdf3>
  80d20c:	180b883a 	mov	r5,r3
  80d210:	880f883a 	mov	r7,r17
  80d214:	1009883a 	mov	r4,r2
  80d218:	800d883a 	mov	r6,r16
  80d21c:	08083940 	call	808394 <__gtdf2>
  80d220:	00bc470e 	bge	zero,r2,80c340 <_dtoa_r+0x578>
  80d224:	00c00c04 	movi	r3,48
  80d228:	e73fffc4 	addi	fp,fp,-1
  80d22c:	e0800007 	ldb	r2,0(fp)
  80d230:	10fffd26 	beq	r2,r3,80d228 <_dtoa_r+0x1460>
  80d234:	d9800417 	ldw	r6,16(sp)
  80d238:	e7000044 	addi	fp,fp,1
  80d23c:	d9800d15 	stw	r6,52(sp)
  80d240:	003cab06 	br	80c4f0 <_dtoa_r+0x728>
  80d244:	d8c00f17 	ldw	r3,60(sp)
  80d248:	d9001117 	ldw	r4,68(sp)
  80d24c:	20e1c83a 	sub	r16,r4,r3
  80d250:	0007883a 	mov	r3,zero
  80d254:	003d9b06 	br	80c8c4 <_dtoa_r+0xafc>
  80d258:	00800e44 	movi	r2,57
  80d25c:	b0800005 	stb	r2,0(r22)
  80d260:	b5800044 	addi	r22,r22,1
  80d264:	003dc106 	br	80c96c <_dtoa_r+0xba4>
  80d268:	05800084 	movi	r22,2
  80d26c:	003bf706 	br	80c24c <_dtoa_r+0x484>
  80d270:	d9000f17 	ldw	r4,60(sp)
  80d274:	013c000e 	bge	zero,r4,80c278 <_dtoa_r+0x4b0>
  80d278:	d9800e17 	ldw	r6,56(sp)
  80d27c:	01bc300e 	bge	zero,r6,80c340 <_dtoa_r+0x578>
  80d280:	0005883a 	mov	r2,zero
  80d284:	00d00934 	movhi	r3,16420
  80d288:	a80b883a 	mov	r5,r21
  80d28c:	180f883a 	mov	r7,r3
  80d290:	a009883a 	mov	r4,r20
  80d294:	100d883a 	mov	r6,r2
  80d298:	0807c680 	call	807c68 <__muldf3>
  80d29c:	b1000044 	addi	r4,r22,1
  80d2a0:	1021883a 	mov	r16,r2
  80d2a4:	1823883a 	mov	r17,r3
  80d2a8:	080852c0 	call	80852c <__floatsidf>
  80d2ac:	880b883a 	mov	r5,r17
  80d2b0:	8009883a 	mov	r4,r16
  80d2b4:	180f883a 	mov	r7,r3
  80d2b8:	100d883a 	mov	r6,r2
  80d2bc:	0807c680 	call	807c68 <__muldf3>
  80d2c0:	0011883a 	mov	r8,zero
  80d2c4:	02500734 	movhi	r9,16412
  80d2c8:	180b883a 	mov	r5,r3
  80d2cc:	480f883a 	mov	r7,r9
  80d2d0:	1009883a 	mov	r4,r2
  80d2d4:	400d883a 	mov	r6,r8
  80d2d8:	0807bf40 	call	807bf4 <__adddf3>
  80d2dc:	102d883a 	mov	r22,r2
  80d2e0:	00bf3034 	movhi	r2,64704
  80d2e4:	10ef883a 	add	r23,r2,r3
  80d2e8:	d8800d17 	ldw	r2,52(sp)
  80d2ec:	d8c00e17 	ldw	r3,56(sp)
  80d2f0:	8029883a 	mov	r20,r16
  80d2f4:	10bfffc4 	addi	r2,r2,-1
  80d2f8:	882b883a 	mov	r21,r17
  80d2fc:	d8800415 	stw	r2,16(sp)
  80d300:	d8c00315 	stw	r3,12(sp)
  80d304:	003e8306 	br	80cd14 <_dtoa_r+0xf4c>
  80d308:	d8800117 	ldw	r2,4(sp)
  80d30c:	dc001117 	ldw	r16,68(sp)
  80d310:	dc801017 	ldw	r18,64(sp)
  80d314:	00c00d84 	movi	r3,54
  80d318:	1887c83a 	sub	r3,r3,r2
  80d31c:	003d6906 	br	80c8c4 <_dtoa_r+0xafc>
  80d320:	01800044 	movi	r6,1
  80d324:	3021883a 	mov	r16,r6
  80d328:	d9800f15 	stw	r6,60(sp)
  80d32c:	d9802615 	stw	r6,152(sp)
  80d330:	d9800e15 	stw	r6,56(sp)
  80d334:	003b9306 	br	80c184 <_dtoa_r+0x3bc>
  80d338:	b021883a 	mov	r16,r22
  80d33c:	dd800f15 	stw	r22,60(sp)
  80d340:	003b9006 	br	80c184 <_dtoa_r+0x3bc>
  80d344:	103e221e 	bne	r2,zero,80cbd0 <_dtoa_r+0xe08>
  80d348:	b880004c 	andi	r2,r23,1
  80d34c:	1005003a 	cmpeq	r2,r2,zero
  80d350:	103e1f1e 	bne	r2,zero,80cbd0 <_dtoa_r+0xe08>
  80d354:	003e1b06 	br	80cbc4 <_dtoa_r+0xdfc>
  80d358:	d9001617 	ldw	r4,88(sp)
  80d35c:	980b883a 	mov	r5,r19
  80d360:	01800284 	movi	r6,10
  80d364:	000f883a 	mov	r7,zero
  80d368:	080f5440 	call	80f544 <__multadd>
  80d36c:	d8c00e17 	ldw	r3,56(sp)
  80d370:	1027883a 	mov	r19,r2
  80d374:	d8c00f15 	stw	r3,60(sp)
  80d378:	003cd306 	br	80c6c8 <_dtoa_r+0x900>

0080d37c <_fflush_r>:
  80d37c:	defffb04 	addi	sp,sp,-20
  80d380:	dcc00315 	stw	r19,12(sp)
  80d384:	dc800215 	stw	r18,8(sp)
  80d388:	dfc00415 	stw	ra,16(sp)
  80d38c:	dc400115 	stw	r17,4(sp)
  80d390:	dc000015 	stw	r16,0(sp)
  80d394:	2027883a 	mov	r19,r4
  80d398:	2825883a 	mov	r18,r5
  80d39c:	20000226 	beq	r4,zero,80d3a8 <_fflush_r+0x2c>
  80d3a0:	20800e17 	ldw	r2,56(r4)
  80d3a4:	10005626 	beq	r2,zero,80d500 <_fflush_r+0x184>
  80d3a8:	9100030b 	ldhu	r4,12(r18)
  80d3ac:	20ffffcc 	andi	r3,r4,65535
  80d3b0:	18e0001c 	xori	r3,r3,32768
  80d3b4:	18e00004 	addi	r3,r3,-32768
  80d3b8:	1880020c 	andi	r2,r3,8
  80d3bc:	1000261e 	bne	r2,zero,80d458 <_fflush_r+0xdc>
  80d3c0:	90c00117 	ldw	r3,4(r18)
  80d3c4:	20820014 	ori	r2,r4,2048
  80d3c8:	9080030d 	sth	r2,12(r18)
  80d3cc:	1009883a 	mov	r4,r2
  80d3d0:	00c0400e 	bge	zero,r3,80d4d4 <_fflush_r+0x158>
  80d3d4:	92000a17 	ldw	r8,40(r18)
  80d3d8:	40004026 	beq	r8,zero,80d4dc <_fflush_r+0x160>
  80d3dc:	2084000c 	andi	r2,r4,4096
  80d3e0:	10005326 	beq	r2,zero,80d530 <_fflush_r+0x1b4>
  80d3e4:	94001417 	ldw	r16,80(r18)
  80d3e8:	9080030b 	ldhu	r2,12(r18)
  80d3ec:	1080010c 	andi	r2,r2,4
  80d3f0:	1000481e 	bne	r2,zero,80d514 <_fflush_r+0x198>
  80d3f4:	91400717 	ldw	r5,28(r18)
  80d3f8:	9809883a 	mov	r4,r19
  80d3fc:	800d883a 	mov	r6,r16
  80d400:	000f883a 	mov	r7,zero
  80d404:	403ee83a 	callr	r8
  80d408:	8080261e 	bne	r16,r2,80d4a4 <_fflush_r+0x128>
  80d40c:	9080030b 	ldhu	r2,12(r18)
  80d410:	91000417 	ldw	r4,16(r18)
  80d414:	90000115 	stw	zero,4(r18)
  80d418:	10bdffcc 	andi	r2,r2,63487
  80d41c:	10ffffcc 	andi	r3,r2,65535
  80d420:	18c4000c 	andi	r3,r3,4096
  80d424:	9080030d 	sth	r2,12(r18)
  80d428:	91000015 	stw	r4,0(r18)
  80d42c:	18002b26 	beq	r3,zero,80d4dc <_fflush_r+0x160>
  80d430:	0007883a 	mov	r3,zero
  80d434:	1805883a 	mov	r2,r3
  80d438:	94001415 	stw	r16,80(r18)
  80d43c:	dfc00417 	ldw	ra,16(sp)
  80d440:	dcc00317 	ldw	r19,12(sp)
  80d444:	dc800217 	ldw	r18,8(sp)
  80d448:	dc400117 	ldw	r17,4(sp)
  80d44c:	dc000017 	ldw	r16,0(sp)
  80d450:	dec00504 	addi	sp,sp,20
  80d454:	f800283a 	ret
  80d458:	94400417 	ldw	r17,16(r18)
  80d45c:	88001f26 	beq	r17,zero,80d4dc <_fflush_r+0x160>
  80d460:	90800017 	ldw	r2,0(r18)
  80d464:	18c000cc 	andi	r3,r3,3
  80d468:	94400015 	stw	r17,0(r18)
  80d46c:	1461c83a 	sub	r16,r2,r17
  80d470:	18002526 	beq	r3,zero,80d508 <_fflush_r+0x18c>
  80d474:	0005883a 	mov	r2,zero
  80d478:	90800215 	stw	r2,8(r18)
  80d47c:	0400170e 	bge	zero,r16,80d4dc <_fflush_r+0x160>
  80d480:	90c00917 	ldw	r3,36(r18)
  80d484:	91400717 	ldw	r5,28(r18)
  80d488:	880d883a 	mov	r6,r17
  80d48c:	800f883a 	mov	r7,r16
  80d490:	9809883a 	mov	r4,r19
  80d494:	183ee83a 	callr	r3
  80d498:	88a3883a 	add	r17,r17,r2
  80d49c:	80a1c83a 	sub	r16,r16,r2
  80d4a0:	00bff616 	blt	zero,r2,80d47c <_fflush_r+0x100>
  80d4a4:	9080030b 	ldhu	r2,12(r18)
  80d4a8:	00ffffc4 	movi	r3,-1
  80d4ac:	10801014 	ori	r2,r2,64
  80d4b0:	9080030d 	sth	r2,12(r18)
  80d4b4:	1805883a 	mov	r2,r3
  80d4b8:	dfc00417 	ldw	ra,16(sp)
  80d4bc:	dcc00317 	ldw	r19,12(sp)
  80d4c0:	dc800217 	ldw	r18,8(sp)
  80d4c4:	dc400117 	ldw	r17,4(sp)
  80d4c8:	dc000017 	ldw	r16,0(sp)
  80d4cc:	dec00504 	addi	sp,sp,20
  80d4d0:	f800283a 	ret
  80d4d4:	90800f17 	ldw	r2,60(r18)
  80d4d8:	00bfbe16 	blt	zero,r2,80d3d4 <_fflush_r+0x58>
  80d4dc:	0007883a 	mov	r3,zero
  80d4e0:	1805883a 	mov	r2,r3
  80d4e4:	dfc00417 	ldw	ra,16(sp)
  80d4e8:	dcc00317 	ldw	r19,12(sp)
  80d4ec:	dc800217 	ldw	r18,8(sp)
  80d4f0:	dc400117 	ldw	r17,4(sp)
  80d4f4:	dc000017 	ldw	r16,0(sp)
  80d4f8:	dec00504 	addi	sp,sp,20
  80d4fc:	f800283a 	ret
  80d500:	080d6140 	call	80d614 <__sinit>
  80d504:	003fa806 	br	80d3a8 <_fflush_r+0x2c>
  80d508:	90800517 	ldw	r2,20(r18)
  80d50c:	90800215 	stw	r2,8(r18)
  80d510:	003fda06 	br	80d47c <_fflush_r+0x100>
  80d514:	90800117 	ldw	r2,4(r18)
  80d518:	90c00c17 	ldw	r3,48(r18)
  80d51c:	80a1c83a 	sub	r16,r16,r2
  80d520:	183fb426 	beq	r3,zero,80d3f4 <_fflush_r+0x78>
  80d524:	90800f17 	ldw	r2,60(r18)
  80d528:	80a1c83a 	sub	r16,r16,r2
  80d52c:	003fb106 	br	80d3f4 <_fflush_r+0x78>
  80d530:	91400717 	ldw	r5,28(r18)
  80d534:	9809883a 	mov	r4,r19
  80d538:	000d883a 	mov	r6,zero
  80d53c:	01c00044 	movi	r7,1
  80d540:	403ee83a 	callr	r8
  80d544:	1021883a 	mov	r16,r2
  80d548:	00bfffc4 	movi	r2,-1
  80d54c:	80800226 	beq	r16,r2,80d558 <_fflush_r+0x1dc>
  80d550:	92000a17 	ldw	r8,40(r18)
  80d554:	003fa406 	br	80d3e8 <_fflush_r+0x6c>
  80d558:	98c00017 	ldw	r3,0(r19)
  80d55c:	00800744 	movi	r2,29
  80d560:	18bfde26 	beq	r3,r2,80d4dc <_fflush_r+0x160>
  80d564:	9080030b 	ldhu	r2,12(r18)
  80d568:	8007883a 	mov	r3,r16
  80d56c:	10801014 	ori	r2,r2,64
  80d570:	9080030d 	sth	r2,12(r18)
  80d574:	003fcf06 	br	80d4b4 <_fflush_r+0x138>

0080d578 <fflush>:
  80d578:	01402074 	movhi	r5,129
  80d57c:	2974df04 	addi	r5,r5,-11396
  80d580:	2007883a 	mov	r3,r4
  80d584:	20000526 	beq	r4,zero,80d59c <fflush+0x24>
  80d588:	008020b4 	movhi	r2,130
  80d58c:	10b83b04 	addi	r2,r2,-7956
  80d590:	11000017 	ldw	r4,0(r2)
  80d594:	180b883a 	mov	r5,r3
  80d598:	080d37c1 	jmpi	80d37c <_fflush_r>
  80d59c:	008020b4 	movhi	r2,130
  80d5a0:	10b83c04 	addi	r2,r2,-7952
  80d5a4:	11000017 	ldw	r4,0(r2)
  80d5a8:	080e1481 	jmpi	80e148 <_fwalk_reent>

0080d5ac <std>:
  80d5ac:	00802074 	movhi	r2,129
  80d5b0:	10bfae04 	addi	r2,r2,-328
  80d5b4:	20800b15 	stw	r2,44(r4)
  80d5b8:	00802074 	movhi	r2,129
  80d5bc:	10bfe904 	addi	r2,r2,-92
  80d5c0:	20800815 	stw	r2,32(r4)
  80d5c4:	00c02074 	movhi	r3,129
  80d5c8:	18ffca04 	addi	r3,r3,-216
  80d5cc:	00802074 	movhi	r2,129
  80d5d0:	10bfb004 	addi	r2,r2,-320
  80d5d4:	2140030d 	sth	r5,12(r4)
  80d5d8:	2180038d 	sth	r6,14(r4)
  80d5dc:	20c00915 	stw	r3,36(r4)
  80d5e0:	20800a15 	stw	r2,40(r4)
  80d5e4:	20000015 	stw	zero,0(r4)
  80d5e8:	20000115 	stw	zero,4(r4)
  80d5ec:	20000215 	stw	zero,8(r4)
  80d5f0:	20000415 	stw	zero,16(r4)
  80d5f4:	20000515 	stw	zero,20(r4)
  80d5f8:	20000615 	stw	zero,24(r4)
  80d5fc:	21000715 	stw	r4,28(r4)
  80d600:	f800283a 	ret

0080d604 <__sfp_lock_acquire>:
  80d604:	f800283a 	ret

0080d608 <__sfp_lock_release>:
  80d608:	f800283a 	ret

0080d60c <__sinit_lock_acquire>:
  80d60c:	f800283a 	ret

0080d610 <__sinit_lock_release>:
  80d610:	f800283a 	ret

0080d614 <__sinit>:
  80d614:	20800e17 	ldw	r2,56(r4)
  80d618:	defffd04 	addi	sp,sp,-12
  80d61c:	dc400115 	stw	r17,4(sp)
  80d620:	dc000015 	stw	r16,0(sp)
  80d624:	dfc00215 	stw	ra,8(sp)
  80d628:	04400044 	movi	r17,1
  80d62c:	01400104 	movi	r5,4
  80d630:	000d883a 	mov	r6,zero
  80d634:	2021883a 	mov	r16,r4
  80d638:	2200bb04 	addi	r8,r4,748
  80d63c:	200f883a 	mov	r7,r4
  80d640:	10000526 	beq	r2,zero,80d658 <__sinit+0x44>
  80d644:	dfc00217 	ldw	ra,8(sp)
  80d648:	dc400117 	ldw	r17,4(sp)
  80d64c:	dc000017 	ldw	r16,0(sp)
  80d650:	dec00304 	addi	sp,sp,12
  80d654:	f800283a 	ret
  80d658:	21000117 	ldw	r4,4(r4)
  80d65c:	00802074 	movhi	r2,129
  80d660:	10b5be04 	addi	r2,r2,-10504
  80d664:	00c000c4 	movi	r3,3
  80d668:	80800f15 	stw	r2,60(r16)
  80d66c:	80c0b915 	stw	r3,740(r16)
  80d670:	8200ba15 	stw	r8,744(r16)
  80d674:	84400e15 	stw	r17,56(r16)
  80d678:	8000b815 	stw	zero,736(r16)
  80d67c:	080d5ac0 	call	80d5ac <std>
  80d680:	81000217 	ldw	r4,8(r16)
  80d684:	880d883a 	mov	r6,r17
  80d688:	800f883a 	mov	r7,r16
  80d68c:	01400284 	movi	r5,10
  80d690:	080d5ac0 	call	80d5ac <std>
  80d694:	81000317 	ldw	r4,12(r16)
  80d698:	800f883a 	mov	r7,r16
  80d69c:	01400484 	movi	r5,18
  80d6a0:	01800084 	movi	r6,2
  80d6a4:	dfc00217 	ldw	ra,8(sp)
  80d6a8:	dc400117 	ldw	r17,4(sp)
  80d6ac:	dc000017 	ldw	r16,0(sp)
  80d6b0:	dec00304 	addi	sp,sp,12
  80d6b4:	080d5ac1 	jmpi	80d5ac <std>

0080d6b8 <__fp_lock>:
  80d6b8:	0005883a 	mov	r2,zero
  80d6bc:	f800283a 	ret

0080d6c0 <__fp_unlock>:
  80d6c0:	0005883a 	mov	r2,zero
  80d6c4:	f800283a 	ret

0080d6c8 <__fp_unlock_all>:
  80d6c8:	008020b4 	movhi	r2,130
  80d6cc:	10b83b04 	addi	r2,r2,-7956
  80d6d0:	11000017 	ldw	r4,0(r2)
  80d6d4:	01402074 	movhi	r5,129
  80d6d8:	2975b004 	addi	r5,r5,-10560
  80d6dc:	080e2101 	jmpi	80e210 <_fwalk>

0080d6e0 <__fp_lock_all>:
  80d6e0:	008020b4 	movhi	r2,130
  80d6e4:	10b83b04 	addi	r2,r2,-7956
  80d6e8:	11000017 	ldw	r4,0(r2)
  80d6ec:	01402074 	movhi	r5,129
  80d6f0:	2975ae04 	addi	r5,r5,-10568
  80d6f4:	080e2101 	jmpi	80e210 <_fwalk>

0080d6f8 <_cleanup_r>:
  80d6f8:	01402074 	movhi	r5,129
  80d6fc:	2940db04 	addi	r5,r5,876
  80d700:	080e2101 	jmpi	80e210 <_fwalk>

0080d704 <_cleanup>:
  80d704:	008020b4 	movhi	r2,130
  80d708:	10b83c04 	addi	r2,r2,-7952
  80d70c:	11000017 	ldw	r4,0(r2)
  80d710:	080d6f81 	jmpi	80d6f8 <_cleanup_r>

0080d714 <__sfmoreglue>:
  80d714:	defffc04 	addi	sp,sp,-16
  80d718:	dc400115 	stw	r17,4(sp)
  80d71c:	2c401724 	muli	r17,r5,92
  80d720:	dc800215 	stw	r18,8(sp)
  80d724:	2825883a 	mov	r18,r5
  80d728:	89400304 	addi	r5,r17,12
  80d72c:	dc000015 	stw	r16,0(sp)
  80d730:	dfc00315 	stw	ra,12(sp)
  80d734:	080910c0 	call	80910c <_malloc_r>
  80d738:	0021883a 	mov	r16,zero
  80d73c:	880d883a 	mov	r6,r17
  80d740:	000b883a 	mov	r5,zero
  80d744:	10000626 	beq	r2,zero,80d760 <__sfmoreglue+0x4c>
  80d748:	11000304 	addi	r4,r2,12
  80d74c:	14800115 	stw	r18,4(r2)
  80d750:	10000015 	stw	zero,0(r2)
  80d754:	11000215 	stw	r4,8(r2)
  80d758:	1021883a 	mov	r16,r2
  80d75c:	080e7f80 	call	80e7f8 <memset>
  80d760:	8005883a 	mov	r2,r16
  80d764:	dfc00317 	ldw	ra,12(sp)
  80d768:	dc800217 	ldw	r18,8(sp)
  80d76c:	dc400117 	ldw	r17,4(sp)
  80d770:	dc000017 	ldw	r16,0(sp)
  80d774:	dec00404 	addi	sp,sp,16
  80d778:	f800283a 	ret

0080d77c <__sfp>:
  80d77c:	defffd04 	addi	sp,sp,-12
  80d780:	008020b4 	movhi	r2,130
  80d784:	10b83c04 	addi	r2,r2,-7952
  80d788:	dc000015 	stw	r16,0(sp)
  80d78c:	14000017 	ldw	r16,0(r2)
  80d790:	dc400115 	stw	r17,4(sp)
  80d794:	dfc00215 	stw	ra,8(sp)
  80d798:	80800e17 	ldw	r2,56(r16)
  80d79c:	2023883a 	mov	r17,r4
  80d7a0:	10002626 	beq	r2,zero,80d83c <__sfp+0xc0>
  80d7a4:	8400b804 	addi	r16,r16,736
  80d7a8:	80800117 	ldw	r2,4(r16)
  80d7ac:	81000217 	ldw	r4,8(r16)
  80d7b0:	10ffffc4 	addi	r3,r2,-1
  80d7b4:	18000916 	blt	r3,zero,80d7dc <__sfp+0x60>
  80d7b8:	2080030f 	ldh	r2,12(r4)
  80d7bc:	10000b26 	beq	r2,zero,80d7ec <__sfp+0x70>
  80d7c0:	017fffc4 	movi	r5,-1
  80d7c4:	00000206 	br	80d7d0 <__sfp+0x54>
  80d7c8:	2080030f 	ldh	r2,12(r4)
  80d7cc:	10000726 	beq	r2,zero,80d7ec <__sfp+0x70>
  80d7d0:	18ffffc4 	addi	r3,r3,-1
  80d7d4:	21001704 	addi	r4,r4,92
  80d7d8:	197ffb1e 	bne	r3,r5,80d7c8 <__sfp+0x4c>
  80d7dc:	80800017 	ldw	r2,0(r16)
  80d7e0:	10001926 	beq	r2,zero,80d848 <__sfp+0xcc>
  80d7e4:	1021883a 	mov	r16,r2
  80d7e8:	003fef06 	br	80d7a8 <__sfp+0x2c>
  80d7ec:	00bfffc4 	movi	r2,-1
  80d7f0:	00c00044 	movi	r3,1
  80d7f4:	2080038d 	sth	r2,14(r4)
  80d7f8:	20c0030d 	sth	r3,12(r4)
  80d7fc:	20000015 	stw	zero,0(r4)
  80d800:	20000215 	stw	zero,8(r4)
  80d804:	20000115 	stw	zero,4(r4)
  80d808:	20000415 	stw	zero,16(r4)
  80d80c:	20000515 	stw	zero,20(r4)
  80d810:	20000615 	stw	zero,24(r4)
  80d814:	20000c15 	stw	zero,48(r4)
  80d818:	20000d15 	stw	zero,52(r4)
  80d81c:	20001115 	stw	zero,68(r4)
  80d820:	20001215 	stw	zero,72(r4)
  80d824:	2005883a 	mov	r2,r4
  80d828:	dfc00217 	ldw	ra,8(sp)
  80d82c:	dc400117 	ldw	r17,4(sp)
  80d830:	dc000017 	ldw	r16,0(sp)
  80d834:	dec00304 	addi	sp,sp,12
  80d838:	f800283a 	ret
  80d83c:	8009883a 	mov	r4,r16
  80d840:	080d6140 	call	80d614 <__sinit>
  80d844:	003fd706 	br	80d7a4 <__sfp+0x28>
  80d848:	8809883a 	mov	r4,r17
  80d84c:	01400104 	movi	r5,4
  80d850:	080d7140 	call	80d714 <__sfmoreglue>
  80d854:	80800015 	stw	r2,0(r16)
  80d858:	103fe21e 	bne	r2,zero,80d7e4 <__sfp+0x68>
  80d85c:	00800304 	movi	r2,12
  80d860:	0009883a 	mov	r4,zero
  80d864:	88800015 	stw	r2,0(r17)
  80d868:	003fee06 	br	80d824 <__sfp+0xa8>

0080d86c <_malloc_trim_r>:
  80d86c:	defffb04 	addi	sp,sp,-20
  80d870:	dcc00315 	stw	r19,12(sp)
  80d874:	04c020b4 	movhi	r19,130
  80d878:	9cf25904 	addi	r19,r19,-13980
  80d87c:	dc800215 	stw	r18,8(sp)
  80d880:	dc400115 	stw	r17,4(sp)
  80d884:	dc000015 	stw	r16,0(sp)
  80d888:	2823883a 	mov	r17,r5
  80d88c:	2025883a 	mov	r18,r4
  80d890:	dfc00415 	stw	ra,16(sp)
  80d894:	0811d5c0 	call	811d5c <__malloc_lock>
  80d898:	98800217 	ldw	r2,8(r19)
  80d89c:	9009883a 	mov	r4,r18
  80d8a0:	000b883a 	mov	r5,zero
  80d8a4:	10c00117 	ldw	r3,4(r2)
  80d8a8:	00bfff04 	movi	r2,-4
  80d8ac:	18a0703a 	and	r16,r3,r2
  80d8b0:	8463c83a 	sub	r17,r16,r17
  80d8b4:	8c43fbc4 	addi	r17,r17,4079
  80d8b8:	8822d33a 	srli	r17,r17,12
  80d8bc:	0083ffc4 	movi	r2,4095
  80d8c0:	8c7fffc4 	addi	r17,r17,-1
  80d8c4:	8822933a 	slli	r17,r17,12
  80d8c8:	1440060e 	bge	r2,r17,80d8e4 <_malloc_trim_r+0x78>
  80d8cc:	0809a0c0 	call	809a0c <_sbrk_r>
  80d8d0:	98c00217 	ldw	r3,8(r19)
  80d8d4:	9009883a 	mov	r4,r18
  80d8d8:	044bc83a 	sub	r5,zero,r17
  80d8dc:	80c7883a 	add	r3,r16,r3
  80d8e0:	10c00926 	beq	r2,r3,80d908 <_malloc_trim_r+0x9c>
  80d8e4:	0811d7c0 	call	811d7c <__malloc_unlock>
  80d8e8:	0005883a 	mov	r2,zero
  80d8ec:	dfc00417 	ldw	ra,16(sp)
  80d8f0:	dcc00317 	ldw	r19,12(sp)
  80d8f4:	dc800217 	ldw	r18,8(sp)
  80d8f8:	dc400117 	ldw	r17,4(sp)
  80d8fc:	dc000017 	ldw	r16,0(sp)
  80d900:	dec00504 	addi	sp,sp,20
  80d904:	f800283a 	ret
  80d908:	9009883a 	mov	r4,r18
  80d90c:	0809a0c0 	call	809a0c <_sbrk_r>
  80d910:	844dc83a 	sub	r6,r16,r17
  80d914:	00ffffc4 	movi	r3,-1
  80d918:	9009883a 	mov	r4,r18
  80d91c:	000b883a 	mov	r5,zero
  80d920:	01c020b4 	movhi	r7,130
  80d924:	39ff8604 	addi	r7,r7,-488
  80d928:	31800054 	ori	r6,r6,1
  80d92c:	10c00926 	beq	r2,r3,80d954 <_malloc_trim_r+0xe8>
  80d930:	38800017 	ldw	r2,0(r7)
  80d934:	98c00217 	ldw	r3,8(r19)
  80d938:	9009883a 	mov	r4,r18
  80d93c:	1445c83a 	sub	r2,r2,r17
  80d940:	38800015 	stw	r2,0(r7)
  80d944:	19800115 	stw	r6,4(r3)
  80d948:	0811d7c0 	call	811d7c <__malloc_unlock>
  80d94c:	00800044 	movi	r2,1
  80d950:	003fe606 	br	80d8ec <_malloc_trim_r+0x80>
  80d954:	0809a0c0 	call	809a0c <_sbrk_r>
  80d958:	99800217 	ldw	r6,8(r19)
  80d95c:	100f883a 	mov	r7,r2
  80d960:	9009883a 	mov	r4,r18
  80d964:	1187c83a 	sub	r3,r2,r6
  80d968:	008003c4 	movi	r2,15
  80d96c:	19400054 	ori	r5,r3,1
  80d970:	10ffdc0e 	bge	r2,r3,80d8e4 <_malloc_trim_r+0x78>
  80d974:	008020b4 	movhi	r2,130
  80d978:	10b83e04 	addi	r2,r2,-7944
  80d97c:	10c00017 	ldw	r3,0(r2)
  80d980:	008020b4 	movhi	r2,130
  80d984:	10bf8604 	addi	r2,r2,-488
  80d988:	31400115 	stw	r5,4(r6)
  80d98c:	38c7c83a 	sub	r3,r7,r3
  80d990:	10c00015 	stw	r3,0(r2)
  80d994:	003fd306 	br	80d8e4 <_malloc_trim_r+0x78>

0080d998 <_free_r>:
  80d998:	defffd04 	addi	sp,sp,-12
  80d99c:	dc400115 	stw	r17,4(sp)
  80d9a0:	dc000015 	stw	r16,0(sp)
  80d9a4:	dfc00215 	stw	ra,8(sp)
  80d9a8:	2821883a 	mov	r16,r5
  80d9ac:	2023883a 	mov	r17,r4
  80d9b0:	28005a26 	beq	r5,zero,80db1c <_free_r+0x184>
  80d9b4:	0811d5c0 	call	811d5c <__malloc_lock>
  80d9b8:	823ffe04 	addi	r8,r16,-8
  80d9bc:	41400117 	ldw	r5,4(r8)
  80d9c0:	00bfff84 	movi	r2,-2
  80d9c4:	028020b4 	movhi	r10,130
  80d9c8:	52b25904 	addi	r10,r10,-13980
  80d9cc:	288e703a 	and	r7,r5,r2
  80d9d0:	41cd883a 	add	r6,r8,r7
  80d9d4:	30c00117 	ldw	r3,4(r6)
  80d9d8:	51000217 	ldw	r4,8(r10)
  80d9dc:	00bfff04 	movi	r2,-4
  80d9e0:	1892703a 	and	r9,r3,r2
  80d9e4:	5017883a 	mov	r11,r10
  80d9e8:	31006726 	beq	r6,r4,80db88 <_free_r+0x1f0>
  80d9ec:	2880004c 	andi	r2,r5,1
  80d9f0:	1005003a 	cmpeq	r2,r2,zero
  80d9f4:	32400115 	stw	r9,4(r6)
  80d9f8:	10001a1e 	bne	r2,zero,80da64 <_free_r+0xcc>
  80d9fc:	000b883a 	mov	r5,zero
  80da00:	3247883a 	add	r3,r6,r9
  80da04:	18800117 	ldw	r2,4(r3)
  80da08:	1080004c 	andi	r2,r2,1
  80da0c:	1000231e 	bne	r2,zero,80da9c <_free_r+0x104>
  80da10:	280ac03a 	cmpne	r5,r5,zero
  80da14:	3a4f883a 	add	r7,r7,r9
  80da18:	2800451e 	bne	r5,zero,80db30 <_free_r+0x198>
  80da1c:	31000217 	ldw	r4,8(r6)
  80da20:	008020b4 	movhi	r2,130
  80da24:	10b25b04 	addi	r2,r2,-13972
  80da28:	20807b26 	beq	r4,r2,80dc18 <_free_r+0x280>
  80da2c:	30800317 	ldw	r2,12(r6)
  80da30:	3a07883a 	add	r3,r7,r8
  80da34:	19c00015 	stw	r7,0(r3)
  80da38:	11000215 	stw	r4,8(r2)
  80da3c:	20800315 	stw	r2,12(r4)
  80da40:	38800054 	ori	r2,r7,1
  80da44:	40800115 	stw	r2,4(r8)
  80da48:	28001a26 	beq	r5,zero,80dab4 <_free_r+0x11c>
  80da4c:	8809883a 	mov	r4,r17
  80da50:	dfc00217 	ldw	ra,8(sp)
  80da54:	dc400117 	ldw	r17,4(sp)
  80da58:	dc000017 	ldw	r16,0(sp)
  80da5c:	dec00304 	addi	sp,sp,12
  80da60:	0811d7c1 	jmpi	811d7c <__malloc_unlock>
  80da64:	80bffe17 	ldw	r2,-8(r16)
  80da68:	50c00204 	addi	r3,r10,8
  80da6c:	4091c83a 	sub	r8,r8,r2
  80da70:	41000217 	ldw	r4,8(r8)
  80da74:	388f883a 	add	r7,r7,r2
  80da78:	20c06126 	beq	r4,r3,80dc00 <_free_r+0x268>
  80da7c:	40800317 	ldw	r2,12(r8)
  80da80:	3247883a 	add	r3,r6,r9
  80da84:	000b883a 	mov	r5,zero
  80da88:	11000215 	stw	r4,8(r2)
  80da8c:	20800315 	stw	r2,12(r4)
  80da90:	18800117 	ldw	r2,4(r3)
  80da94:	1080004c 	andi	r2,r2,1
  80da98:	103fdd26 	beq	r2,zero,80da10 <_free_r+0x78>
  80da9c:	38800054 	ori	r2,r7,1
  80daa0:	3a07883a 	add	r3,r7,r8
  80daa4:	280ac03a 	cmpne	r5,r5,zero
  80daa8:	40800115 	stw	r2,4(r8)
  80daac:	19c00015 	stw	r7,0(r3)
  80dab0:	283fe61e 	bne	r5,zero,80da4c <_free_r+0xb4>
  80dab4:	00807fc4 	movi	r2,511
  80dab8:	11c01f2e 	bgeu	r2,r7,80db38 <_free_r+0x1a0>
  80dabc:	3806d27a 	srli	r3,r7,9
  80dac0:	1800481e 	bne	r3,zero,80dbe4 <_free_r+0x24c>
  80dac4:	3804d0fa 	srli	r2,r7,3
  80dac8:	100690fa 	slli	r3,r2,3
  80dacc:	1acd883a 	add	r6,r3,r11
  80dad0:	31400217 	ldw	r5,8(r6)
  80dad4:	31405926 	beq	r6,r5,80dc3c <_free_r+0x2a4>
  80dad8:	28800117 	ldw	r2,4(r5)
  80dadc:	00ffff04 	movi	r3,-4
  80dae0:	10c4703a 	and	r2,r2,r3
  80dae4:	3880022e 	bgeu	r7,r2,80daf0 <_free_r+0x158>
  80dae8:	29400217 	ldw	r5,8(r5)
  80daec:	317ffa1e 	bne	r6,r5,80dad8 <_free_r+0x140>
  80daf0:	29800317 	ldw	r6,12(r5)
  80daf4:	41800315 	stw	r6,12(r8)
  80daf8:	41400215 	stw	r5,8(r8)
  80dafc:	8809883a 	mov	r4,r17
  80db00:	2a000315 	stw	r8,12(r5)
  80db04:	32000215 	stw	r8,8(r6)
  80db08:	dfc00217 	ldw	ra,8(sp)
  80db0c:	dc400117 	ldw	r17,4(sp)
  80db10:	dc000017 	ldw	r16,0(sp)
  80db14:	dec00304 	addi	sp,sp,12
  80db18:	0811d7c1 	jmpi	811d7c <__malloc_unlock>
  80db1c:	dfc00217 	ldw	ra,8(sp)
  80db20:	dc400117 	ldw	r17,4(sp)
  80db24:	dc000017 	ldw	r16,0(sp)
  80db28:	dec00304 	addi	sp,sp,12
  80db2c:	f800283a 	ret
  80db30:	31000217 	ldw	r4,8(r6)
  80db34:	003fbd06 	br	80da2c <_free_r+0x94>
  80db38:	3806d0fa 	srli	r3,r7,3
  80db3c:	00800044 	movi	r2,1
  80db40:	51400117 	ldw	r5,4(r10)
  80db44:	180890fa 	slli	r4,r3,3
  80db48:	1807d0ba 	srai	r3,r3,2
  80db4c:	22c9883a 	add	r4,r4,r11
  80db50:	21800217 	ldw	r6,8(r4)
  80db54:	10c4983a 	sll	r2,r2,r3
  80db58:	41000315 	stw	r4,12(r8)
  80db5c:	41800215 	stw	r6,8(r8)
  80db60:	288ab03a 	or	r5,r5,r2
  80db64:	22000215 	stw	r8,8(r4)
  80db68:	8809883a 	mov	r4,r17
  80db6c:	51400115 	stw	r5,4(r10)
  80db70:	32000315 	stw	r8,12(r6)
  80db74:	dfc00217 	ldw	ra,8(sp)
  80db78:	dc400117 	ldw	r17,4(sp)
  80db7c:	dc000017 	ldw	r16,0(sp)
  80db80:	dec00304 	addi	sp,sp,12
  80db84:	0811d7c1 	jmpi	811d7c <__malloc_unlock>
  80db88:	2880004c 	andi	r2,r5,1
  80db8c:	3a4d883a 	add	r6,r7,r9
  80db90:	1000071e 	bne	r2,zero,80dbb0 <_free_r+0x218>
  80db94:	80bffe17 	ldw	r2,-8(r16)
  80db98:	4091c83a 	sub	r8,r8,r2
  80db9c:	41000317 	ldw	r4,12(r8)
  80dba0:	40c00217 	ldw	r3,8(r8)
  80dba4:	308d883a 	add	r6,r6,r2
  80dba8:	20c00215 	stw	r3,8(r4)
  80dbac:	19000315 	stw	r4,12(r3)
  80dbb0:	008020b4 	movhi	r2,130
  80dbb4:	10b83d04 	addi	r2,r2,-7948
  80dbb8:	11000017 	ldw	r4,0(r2)
  80dbbc:	30c00054 	ori	r3,r6,1
  80dbc0:	52000215 	stw	r8,8(r10)
  80dbc4:	40c00115 	stw	r3,4(r8)
  80dbc8:	313fa036 	bltu	r6,r4,80da4c <_free_r+0xb4>
  80dbcc:	008020b4 	movhi	r2,130
  80dbd0:	10bf6604 	addi	r2,r2,-616
  80dbd4:	11400017 	ldw	r5,0(r2)
  80dbd8:	8809883a 	mov	r4,r17
  80dbdc:	080d86c0 	call	80d86c <_malloc_trim_r>
  80dbe0:	003f9a06 	br	80da4c <_free_r+0xb4>
  80dbe4:	00800104 	movi	r2,4
  80dbe8:	10c0072e 	bgeu	r2,r3,80dc08 <_free_r+0x270>
  80dbec:	00800504 	movi	r2,20
  80dbf0:	10c01936 	bltu	r2,r3,80dc58 <_free_r+0x2c0>
  80dbf4:	188016c4 	addi	r2,r3,91
  80dbf8:	100690fa 	slli	r3,r2,3
  80dbfc:	003fb306 	br	80dacc <_free_r+0x134>
  80dc00:	01400044 	movi	r5,1
  80dc04:	003f7e06 	br	80da00 <_free_r+0x68>
  80dc08:	3804d1ba 	srli	r2,r7,6
  80dc0c:	10800e04 	addi	r2,r2,56
  80dc10:	100690fa 	slli	r3,r2,3
  80dc14:	003fad06 	br	80dacc <_free_r+0x134>
  80dc18:	22000315 	stw	r8,12(r4)
  80dc1c:	22000215 	stw	r8,8(r4)
  80dc20:	3a05883a 	add	r2,r7,r8
  80dc24:	38c00054 	ori	r3,r7,1
  80dc28:	11c00015 	stw	r7,0(r2)
  80dc2c:	41000215 	stw	r4,8(r8)
  80dc30:	40c00115 	stw	r3,4(r8)
  80dc34:	41000315 	stw	r4,12(r8)
  80dc38:	003f8406 	br	80da4c <_free_r+0xb4>
  80dc3c:	1005d0ba 	srai	r2,r2,2
  80dc40:	00c00044 	movi	r3,1
  80dc44:	51000117 	ldw	r4,4(r10)
  80dc48:	1886983a 	sll	r3,r3,r2
  80dc4c:	20c8b03a 	or	r4,r4,r3
  80dc50:	51000115 	stw	r4,4(r10)
  80dc54:	003fa706 	br	80daf4 <_free_r+0x15c>
  80dc58:	00801504 	movi	r2,84
  80dc5c:	10c00436 	bltu	r2,r3,80dc70 <_free_r+0x2d8>
  80dc60:	3804d33a 	srli	r2,r7,12
  80dc64:	10801b84 	addi	r2,r2,110
  80dc68:	100690fa 	slli	r3,r2,3
  80dc6c:	003f9706 	br	80dacc <_free_r+0x134>
  80dc70:	00805504 	movi	r2,340
  80dc74:	10c00436 	bltu	r2,r3,80dc88 <_free_r+0x2f0>
  80dc78:	3804d3fa 	srli	r2,r7,15
  80dc7c:	10801dc4 	addi	r2,r2,119
  80dc80:	100690fa 	slli	r3,r2,3
  80dc84:	003f9106 	br	80dacc <_free_r+0x134>
  80dc88:	00815504 	movi	r2,1364
  80dc8c:	10c0032e 	bgeu	r2,r3,80dc9c <_free_r+0x304>
  80dc90:	00801f84 	movi	r2,126
  80dc94:	00c0fc04 	movi	r3,1008
  80dc98:	003f8c06 	br	80dacc <_free_r+0x134>
  80dc9c:	3804d4ba 	srli	r2,r7,18
  80dca0:	10801f04 	addi	r2,r2,124
  80dca4:	100690fa 	slli	r3,r2,3
  80dca8:	003f8806 	br	80dacc <_free_r+0x134>

0080dcac <__sfvwrite_r>:
  80dcac:	30800217 	ldw	r2,8(r6)
  80dcb0:	defff504 	addi	sp,sp,-44
  80dcb4:	df000915 	stw	fp,36(sp)
  80dcb8:	dd800715 	stw	r22,28(sp)
  80dcbc:	dc800315 	stw	r18,12(sp)
  80dcc0:	dfc00a15 	stw	ra,40(sp)
  80dcc4:	ddc00815 	stw	r23,32(sp)
  80dcc8:	dd400615 	stw	r21,24(sp)
  80dccc:	dd000515 	stw	r20,20(sp)
  80dcd0:	dcc00415 	stw	r19,16(sp)
  80dcd4:	dc400215 	stw	r17,8(sp)
  80dcd8:	dc000115 	stw	r16,4(sp)
  80dcdc:	302d883a 	mov	r22,r6
  80dce0:	2039883a 	mov	fp,r4
  80dce4:	2825883a 	mov	r18,r5
  80dce8:	10001c26 	beq	r2,zero,80dd5c <__sfvwrite_r+0xb0>
  80dcec:	29c0030b 	ldhu	r7,12(r5)
  80dcf0:	3880020c 	andi	r2,r7,8
  80dcf4:	10002726 	beq	r2,zero,80dd94 <__sfvwrite_r+0xe8>
  80dcf8:	28800417 	ldw	r2,16(r5)
  80dcfc:	10002526 	beq	r2,zero,80dd94 <__sfvwrite_r+0xe8>
  80dd00:	3880008c 	andi	r2,r7,2
  80dd04:	b5400017 	ldw	r21,0(r22)
  80dd08:	10002826 	beq	r2,zero,80ddac <__sfvwrite_r+0x100>
  80dd0c:	0021883a 	mov	r16,zero
  80dd10:	0023883a 	mov	r17,zero
  80dd14:	880d883a 	mov	r6,r17
  80dd18:	e009883a 	mov	r4,fp
  80dd1c:	00810004 	movi	r2,1024
  80dd20:	80006e26 	beq	r16,zero,80dedc <__sfvwrite_r+0x230>
  80dd24:	800f883a 	mov	r7,r16
  80dd28:	91400717 	ldw	r5,28(r18)
  80dd2c:	1400012e 	bgeu	r2,r16,80dd34 <__sfvwrite_r+0x88>
  80dd30:	100f883a 	mov	r7,r2
  80dd34:	90c00917 	ldw	r3,36(r18)
  80dd38:	183ee83a 	callr	r3
  80dd3c:	1007883a 	mov	r3,r2
  80dd40:	80a1c83a 	sub	r16,r16,r2
  80dd44:	88a3883a 	add	r17,r17,r2
  80dd48:	00806d0e 	bge	zero,r2,80df00 <__sfvwrite_r+0x254>
  80dd4c:	b0800217 	ldw	r2,8(r22)
  80dd50:	10c5c83a 	sub	r2,r2,r3
  80dd54:	b0800215 	stw	r2,8(r22)
  80dd58:	103fee1e 	bne	r2,zero,80dd14 <__sfvwrite_r+0x68>
  80dd5c:	0009883a 	mov	r4,zero
  80dd60:	2005883a 	mov	r2,r4
  80dd64:	dfc00a17 	ldw	ra,40(sp)
  80dd68:	df000917 	ldw	fp,36(sp)
  80dd6c:	ddc00817 	ldw	r23,32(sp)
  80dd70:	dd800717 	ldw	r22,28(sp)
  80dd74:	dd400617 	ldw	r21,24(sp)
  80dd78:	dd000517 	ldw	r20,20(sp)
  80dd7c:	dcc00417 	ldw	r19,16(sp)
  80dd80:	dc800317 	ldw	r18,12(sp)
  80dd84:	dc400217 	ldw	r17,8(sp)
  80dd88:	dc000117 	ldw	r16,4(sp)
  80dd8c:	dec00b04 	addi	sp,sp,44
  80dd90:	f800283a 	ret
  80dd94:	080ba740 	call	80ba74 <__swsetup_r>
  80dd98:	1000e41e 	bne	r2,zero,80e12c <__sfvwrite_r+0x480>
  80dd9c:	91c0030b 	ldhu	r7,12(r18)
  80dda0:	b5400017 	ldw	r21,0(r22)
  80dda4:	3880008c 	andi	r2,r7,2
  80dda8:	103fd81e 	bne	r2,zero,80dd0c <__sfvwrite_r+0x60>
  80ddac:	3880004c 	andi	r2,r7,1
  80ddb0:	1005003a 	cmpeq	r2,r2,zero
  80ddb4:	10005726 	beq	r2,zero,80df14 <__sfvwrite_r+0x268>
  80ddb8:	0029883a 	mov	r20,zero
  80ddbc:	002f883a 	mov	r23,zero
  80ddc0:	a0004226 	beq	r20,zero,80decc <__sfvwrite_r+0x220>
  80ddc4:	3880800c 	andi	r2,r7,512
  80ddc8:	94000217 	ldw	r16,8(r18)
  80ddcc:	10008b26 	beq	r2,zero,80dffc <__sfvwrite_r+0x350>
  80ddd0:	800d883a 	mov	r6,r16
  80ddd4:	a400a536 	bltu	r20,r16,80e06c <__sfvwrite_r+0x3c0>
  80ddd8:	3881200c 	andi	r2,r7,1152
  80dddc:	10002726 	beq	r2,zero,80de7c <__sfvwrite_r+0x1d0>
  80dde0:	90800517 	ldw	r2,20(r18)
  80dde4:	92000417 	ldw	r8,16(r18)
  80dde8:	91400017 	ldw	r5,0(r18)
  80ddec:	1087883a 	add	r3,r2,r2
  80ddf0:	1887883a 	add	r3,r3,r2
  80ddf4:	1808d7fa 	srli	r4,r3,31
  80ddf8:	2a21c83a 	sub	r16,r5,r8
  80ddfc:	80800044 	addi	r2,r16,1
  80de00:	20c9883a 	add	r4,r4,r3
  80de04:	2027d07a 	srai	r19,r4,1
  80de08:	a085883a 	add	r2,r20,r2
  80de0c:	980d883a 	mov	r6,r19
  80de10:	9880022e 	bgeu	r19,r2,80de1c <__sfvwrite_r+0x170>
  80de14:	1027883a 	mov	r19,r2
  80de18:	100d883a 	mov	r6,r2
  80de1c:	3881000c 	andi	r2,r7,1024
  80de20:	1000b826 	beq	r2,zero,80e104 <__sfvwrite_r+0x458>
  80de24:	300b883a 	mov	r5,r6
  80de28:	e009883a 	mov	r4,fp
  80de2c:	080910c0 	call	80910c <_malloc_r>
  80de30:	10003126 	beq	r2,zero,80def8 <__sfvwrite_r+0x24c>
  80de34:	91400417 	ldw	r5,16(r18)
  80de38:	1009883a 	mov	r4,r2
  80de3c:	800d883a 	mov	r6,r16
  80de40:	1023883a 	mov	r17,r2
  80de44:	080e6780 	call	80e678 <memcpy>
  80de48:	90c0030b 	ldhu	r3,12(r18)
  80de4c:	00beffc4 	movi	r2,-1025
  80de50:	1886703a 	and	r3,r3,r2
  80de54:	18c02014 	ori	r3,r3,128
  80de58:	90c0030d 	sth	r3,12(r18)
  80de5c:	9c07c83a 	sub	r3,r19,r16
  80de60:	8c05883a 	add	r2,r17,r16
  80de64:	a00d883a 	mov	r6,r20
  80de68:	a021883a 	mov	r16,r20
  80de6c:	90800015 	stw	r2,0(r18)
  80de70:	90c00215 	stw	r3,8(r18)
  80de74:	94400415 	stw	r17,16(r18)
  80de78:	94c00515 	stw	r19,20(r18)
  80de7c:	91000017 	ldw	r4,0(r18)
  80de80:	b80b883a 	mov	r5,r23
  80de84:	a023883a 	mov	r17,r20
  80de88:	080e7180 	call	80e718 <memmove>
  80de8c:	90c00217 	ldw	r3,8(r18)
  80de90:	90800017 	ldw	r2,0(r18)
  80de94:	a027883a 	mov	r19,r20
  80de98:	1c07c83a 	sub	r3,r3,r16
  80de9c:	1405883a 	add	r2,r2,r16
  80dea0:	90c00215 	stw	r3,8(r18)
  80dea4:	a021883a 	mov	r16,r20
  80dea8:	90800015 	stw	r2,0(r18)
  80deac:	b0800217 	ldw	r2,8(r22)
  80deb0:	1405c83a 	sub	r2,r2,r16
  80deb4:	b0800215 	stw	r2,8(r22)
  80deb8:	103fa826 	beq	r2,zero,80dd5c <__sfvwrite_r+0xb0>
  80debc:	a469c83a 	sub	r20,r20,r17
  80dec0:	91c0030b 	ldhu	r7,12(r18)
  80dec4:	bcef883a 	add	r23,r23,r19
  80dec8:	a03fbe1e 	bne	r20,zero,80ddc4 <__sfvwrite_r+0x118>
  80decc:	adc00017 	ldw	r23,0(r21)
  80ded0:	ad000117 	ldw	r20,4(r21)
  80ded4:	ad400204 	addi	r21,r21,8
  80ded8:	003fb906 	br	80ddc0 <__sfvwrite_r+0x114>
  80dedc:	ac400017 	ldw	r17,0(r21)
  80dee0:	ac000117 	ldw	r16,4(r21)
  80dee4:	ad400204 	addi	r21,r21,8
  80dee8:	003f8a06 	br	80dd14 <__sfvwrite_r+0x68>
  80deec:	91400417 	ldw	r5,16(r18)
  80def0:	e009883a 	mov	r4,fp
  80def4:	080d9980 	call	80d998 <_free_r>
  80def8:	00800304 	movi	r2,12
  80defc:	e0800015 	stw	r2,0(fp)
  80df00:	9080030b 	ldhu	r2,12(r18)
  80df04:	013fffc4 	movi	r4,-1
  80df08:	10801014 	ori	r2,r2,64
  80df0c:	9080030d 	sth	r2,12(r18)
  80df10:	003f9306 	br	80dd60 <__sfvwrite_r+0xb4>
  80df14:	0027883a 	mov	r19,zero
  80df18:	002f883a 	mov	r23,zero
  80df1c:	d8000015 	stw	zero,0(sp)
  80df20:	0029883a 	mov	r20,zero
  80df24:	98001e26 	beq	r19,zero,80dfa0 <__sfvwrite_r+0x2f4>
  80df28:	d8c00017 	ldw	r3,0(sp)
  80df2c:	1804c03a 	cmpne	r2,r3,zero
  80df30:	10005e26 	beq	r2,zero,80e0ac <__sfvwrite_r+0x400>
  80df34:	9821883a 	mov	r16,r19
  80df38:	a4c0012e 	bgeu	r20,r19,80df40 <__sfvwrite_r+0x294>
  80df3c:	a021883a 	mov	r16,r20
  80df40:	91000017 	ldw	r4,0(r18)
  80df44:	90800417 	ldw	r2,16(r18)
  80df48:	91800217 	ldw	r6,8(r18)
  80df4c:	91c00517 	ldw	r7,20(r18)
  80df50:	1100022e 	bgeu	r2,r4,80df5c <__sfvwrite_r+0x2b0>
  80df54:	31e3883a 	add	r17,r6,r7
  80df58:	8c001616 	blt	r17,r16,80dfb4 <__sfvwrite_r+0x308>
  80df5c:	81c03816 	blt	r16,r7,80e040 <__sfvwrite_r+0x394>
  80df60:	90c00917 	ldw	r3,36(r18)
  80df64:	91400717 	ldw	r5,28(r18)
  80df68:	e009883a 	mov	r4,fp
  80df6c:	b80d883a 	mov	r6,r23
  80df70:	183ee83a 	callr	r3
  80df74:	1023883a 	mov	r17,r2
  80df78:	00bfe10e 	bge	zero,r2,80df00 <__sfvwrite_r+0x254>
  80df7c:	a469c83a 	sub	r20,r20,r17
  80df80:	a0001826 	beq	r20,zero,80dfe4 <__sfvwrite_r+0x338>
  80df84:	b0800217 	ldw	r2,8(r22)
  80df88:	1445c83a 	sub	r2,r2,r17
  80df8c:	b0800215 	stw	r2,8(r22)
  80df90:	103f7226 	beq	r2,zero,80dd5c <__sfvwrite_r+0xb0>
  80df94:	9c67c83a 	sub	r19,r19,r17
  80df98:	bc6f883a 	add	r23,r23,r17
  80df9c:	983fe21e 	bne	r19,zero,80df28 <__sfvwrite_r+0x27c>
  80dfa0:	adc00017 	ldw	r23,0(r21)
  80dfa4:	acc00117 	ldw	r19,4(r21)
  80dfa8:	ad400204 	addi	r21,r21,8
  80dfac:	d8000015 	stw	zero,0(sp)
  80dfb0:	003fdc06 	br	80df24 <__sfvwrite_r+0x278>
  80dfb4:	b80b883a 	mov	r5,r23
  80dfb8:	880d883a 	mov	r6,r17
  80dfbc:	080e7180 	call	80e718 <memmove>
  80dfc0:	90c00017 	ldw	r3,0(r18)
  80dfc4:	e009883a 	mov	r4,fp
  80dfc8:	900b883a 	mov	r5,r18
  80dfcc:	1c47883a 	add	r3,r3,r17
  80dfd0:	90c00015 	stw	r3,0(r18)
  80dfd4:	080d37c0 	call	80d37c <_fflush_r>
  80dfd8:	103fc91e 	bne	r2,zero,80df00 <__sfvwrite_r+0x254>
  80dfdc:	a469c83a 	sub	r20,r20,r17
  80dfe0:	a03fe81e 	bne	r20,zero,80df84 <__sfvwrite_r+0x2d8>
  80dfe4:	e009883a 	mov	r4,fp
  80dfe8:	900b883a 	mov	r5,r18
  80dfec:	080d37c0 	call	80d37c <_fflush_r>
  80dff0:	103fc31e 	bne	r2,zero,80df00 <__sfvwrite_r+0x254>
  80dff4:	d8000015 	stw	zero,0(sp)
  80dff8:	003fe206 	br	80df84 <__sfvwrite_r+0x2d8>
  80dffc:	91000017 	ldw	r4,0(r18)
  80e000:	90800417 	ldw	r2,16(r18)
  80e004:	1100022e 	bgeu	r2,r4,80e010 <__sfvwrite_r+0x364>
  80e008:	8023883a 	mov	r17,r16
  80e00c:	85003136 	bltu	r16,r20,80e0d4 <__sfvwrite_r+0x428>
  80e010:	91c00517 	ldw	r7,20(r18)
  80e014:	a1c01836 	bltu	r20,r7,80e078 <__sfvwrite_r+0x3cc>
  80e018:	90c00917 	ldw	r3,36(r18)
  80e01c:	91400717 	ldw	r5,28(r18)
  80e020:	e009883a 	mov	r4,fp
  80e024:	b80d883a 	mov	r6,r23
  80e028:	183ee83a 	callr	r3
  80e02c:	1021883a 	mov	r16,r2
  80e030:	00bfb30e 	bge	zero,r2,80df00 <__sfvwrite_r+0x254>
  80e034:	1023883a 	mov	r17,r2
  80e038:	1027883a 	mov	r19,r2
  80e03c:	003f9b06 	br	80deac <__sfvwrite_r+0x200>
  80e040:	b80b883a 	mov	r5,r23
  80e044:	800d883a 	mov	r6,r16
  80e048:	080e7180 	call	80e718 <memmove>
  80e04c:	90c00217 	ldw	r3,8(r18)
  80e050:	90800017 	ldw	r2,0(r18)
  80e054:	8023883a 	mov	r17,r16
  80e058:	1c07c83a 	sub	r3,r3,r16
  80e05c:	1405883a 	add	r2,r2,r16
  80e060:	90c00215 	stw	r3,8(r18)
  80e064:	90800015 	stw	r2,0(r18)
  80e068:	003fc406 	br	80df7c <__sfvwrite_r+0x2d0>
  80e06c:	a00d883a 	mov	r6,r20
  80e070:	a021883a 	mov	r16,r20
  80e074:	003f8106 	br	80de7c <__sfvwrite_r+0x1d0>
  80e078:	b80b883a 	mov	r5,r23
  80e07c:	a00d883a 	mov	r6,r20
  80e080:	080e7180 	call	80e718 <memmove>
  80e084:	90c00217 	ldw	r3,8(r18)
  80e088:	90800017 	ldw	r2,0(r18)
  80e08c:	a021883a 	mov	r16,r20
  80e090:	1d07c83a 	sub	r3,r3,r20
  80e094:	1505883a 	add	r2,r2,r20
  80e098:	a023883a 	mov	r17,r20
  80e09c:	a027883a 	mov	r19,r20
  80e0a0:	90c00215 	stw	r3,8(r18)
  80e0a4:	90800015 	stw	r2,0(r18)
  80e0a8:	003f8006 	br	80deac <__sfvwrite_r+0x200>
  80e0ac:	b809883a 	mov	r4,r23
  80e0b0:	01400284 	movi	r5,10
  80e0b4:	980d883a 	mov	r6,r19
  80e0b8:	080e5940 	call	80e594 <memchr>
  80e0bc:	10001726 	beq	r2,zero,80e11c <__sfvwrite_r+0x470>
  80e0c0:	15c5c83a 	sub	r2,r2,r23
  80e0c4:	15000044 	addi	r20,r2,1
  80e0c8:	00800044 	movi	r2,1
  80e0cc:	d8800015 	stw	r2,0(sp)
  80e0d0:	003f9806 	br	80df34 <__sfvwrite_r+0x288>
  80e0d4:	b80b883a 	mov	r5,r23
  80e0d8:	800d883a 	mov	r6,r16
  80e0dc:	080e7180 	call	80e718 <memmove>
  80e0e0:	90c00017 	ldw	r3,0(r18)
  80e0e4:	e009883a 	mov	r4,fp
  80e0e8:	900b883a 	mov	r5,r18
  80e0ec:	1c07883a 	add	r3,r3,r16
  80e0f0:	90c00015 	stw	r3,0(r18)
  80e0f4:	8027883a 	mov	r19,r16
  80e0f8:	080d37c0 	call	80d37c <_fflush_r>
  80e0fc:	103f6b26 	beq	r2,zero,80deac <__sfvwrite_r+0x200>
  80e100:	003f7f06 	br	80df00 <__sfvwrite_r+0x254>
  80e104:	400b883a 	mov	r5,r8
  80e108:	e009883a 	mov	r4,fp
  80e10c:	080f8840 	call	80f884 <_realloc_r>
  80e110:	103f7626 	beq	r2,zero,80deec <__sfvwrite_r+0x240>
  80e114:	1023883a 	mov	r17,r2
  80e118:	003f5006 	br	80de5c <__sfvwrite_r+0x1b0>
  80e11c:	00c00044 	movi	r3,1
  80e120:	9d000044 	addi	r20,r19,1
  80e124:	d8c00015 	stw	r3,0(sp)
  80e128:	003f8206 	br	80df34 <__sfvwrite_r+0x288>
  80e12c:	9080030b 	ldhu	r2,12(r18)
  80e130:	00c00244 	movi	r3,9
  80e134:	013fffc4 	movi	r4,-1
  80e138:	10801014 	ori	r2,r2,64
  80e13c:	9080030d 	sth	r2,12(r18)
  80e140:	e0c00015 	stw	r3,0(fp)
  80e144:	003f0606 	br	80dd60 <__sfvwrite_r+0xb4>

0080e148 <_fwalk_reent>:
  80e148:	defff704 	addi	sp,sp,-36
  80e14c:	dcc00315 	stw	r19,12(sp)
  80e150:	24c0b804 	addi	r19,r4,736
  80e154:	dd800615 	stw	r22,24(sp)
  80e158:	dd400515 	stw	r21,20(sp)
  80e15c:	dfc00815 	stw	ra,32(sp)
  80e160:	ddc00715 	stw	r23,28(sp)
  80e164:	dd000415 	stw	r20,16(sp)
  80e168:	dc800215 	stw	r18,8(sp)
  80e16c:	dc400115 	stw	r17,4(sp)
  80e170:	dc000015 	stw	r16,0(sp)
  80e174:	202b883a 	mov	r21,r4
  80e178:	282d883a 	mov	r22,r5
  80e17c:	080d6040 	call	80d604 <__sfp_lock_acquire>
  80e180:	98002126 	beq	r19,zero,80e208 <_fwalk_reent+0xc0>
  80e184:	002f883a 	mov	r23,zero
  80e188:	9c800117 	ldw	r18,4(r19)
  80e18c:	9c000217 	ldw	r16,8(r19)
  80e190:	90bfffc4 	addi	r2,r18,-1
  80e194:	10000d16 	blt	r2,zero,80e1cc <_fwalk_reent+0x84>
  80e198:	0023883a 	mov	r17,zero
  80e19c:	053fffc4 	movi	r20,-1
  80e1a0:	8080030f 	ldh	r2,12(r16)
  80e1a4:	8c400044 	addi	r17,r17,1
  80e1a8:	10000626 	beq	r2,zero,80e1c4 <_fwalk_reent+0x7c>
  80e1ac:	8080038f 	ldh	r2,14(r16)
  80e1b0:	800b883a 	mov	r5,r16
  80e1b4:	a809883a 	mov	r4,r21
  80e1b8:	15000226 	beq	r2,r20,80e1c4 <_fwalk_reent+0x7c>
  80e1bc:	b03ee83a 	callr	r22
  80e1c0:	b8aeb03a 	or	r23,r23,r2
  80e1c4:	84001704 	addi	r16,r16,92
  80e1c8:	947ff51e 	bne	r18,r17,80e1a0 <_fwalk_reent+0x58>
  80e1cc:	9cc00017 	ldw	r19,0(r19)
  80e1d0:	983fed1e 	bne	r19,zero,80e188 <_fwalk_reent+0x40>
  80e1d4:	080d6080 	call	80d608 <__sfp_lock_release>
  80e1d8:	b805883a 	mov	r2,r23
  80e1dc:	dfc00817 	ldw	ra,32(sp)
  80e1e0:	ddc00717 	ldw	r23,28(sp)
  80e1e4:	dd800617 	ldw	r22,24(sp)
  80e1e8:	dd400517 	ldw	r21,20(sp)
  80e1ec:	dd000417 	ldw	r20,16(sp)
  80e1f0:	dcc00317 	ldw	r19,12(sp)
  80e1f4:	dc800217 	ldw	r18,8(sp)
  80e1f8:	dc400117 	ldw	r17,4(sp)
  80e1fc:	dc000017 	ldw	r16,0(sp)
  80e200:	dec00904 	addi	sp,sp,36
  80e204:	f800283a 	ret
  80e208:	002f883a 	mov	r23,zero
  80e20c:	003ff106 	br	80e1d4 <_fwalk_reent+0x8c>

0080e210 <_fwalk>:
  80e210:	defff804 	addi	sp,sp,-32
  80e214:	dcc00315 	stw	r19,12(sp)
  80e218:	24c0b804 	addi	r19,r4,736
  80e21c:	dd400515 	stw	r21,20(sp)
  80e220:	dfc00715 	stw	ra,28(sp)
  80e224:	dd800615 	stw	r22,24(sp)
  80e228:	dd000415 	stw	r20,16(sp)
  80e22c:	dc800215 	stw	r18,8(sp)
  80e230:	dc400115 	stw	r17,4(sp)
  80e234:	dc000015 	stw	r16,0(sp)
  80e238:	282b883a 	mov	r21,r5
  80e23c:	080d6040 	call	80d604 <__sfp_lock_acquire>
  80e240:	98001f26 	beq	r19,zero,80e2c0 <_fwalk+0xb0>
  80e244:	002d883a 	mov	r22,zero
  80e248:	9c800117 	ldw	r18,4(r19)
  80e24c:	9c000217 	ldw	r16,8(r19)
  80e250:	90bfffc4 	addi	r2,r18,-1
  80e254:	10000c16 	blt	r2,zero,80e288 <_fwalk+0x78>
  80e258:	0023883a 	mov	r17,zero
  80e25c:	053fffc4 	movi	r20,-1
  80e260:	8080030f 	ldh	r2,12(r16)
  80e264:	8c400044 	addi	r17,r17,1
  80e268:	10000526 	beq	r2,zero,80e280 <_fwalk+0x70>
  80e26c:	8080038f 	ldh	r2,14(r16)
  80e270:	8009883a 	mov	r4,r16
  80e274:	15000226 	beq	r2,r20,80e280 <_fwalk+0x70>
  80e278:	a83ee83a 	callr	r21
  80e27c:	b0acb03a 	or	r22,r22,r2
  80e280:	84001704 	addi	r16,r16,92
  80e284:	947ff61e 	bne	r18,r17,80e260 <_fwalk+0x50>
  80e288:	9cc00017 	ldw	r19,0(r19)
  80e28c:	983fee1e 	bne	r19,zero,80e248 <_fwalk+0x38>
  80e290:	080d6080 	call	80d608 <__sfp_lock_release>
  80e294:	b005883a 	mov	r2,r22
  80e298:	dfc00717 	ldw	ra,28(sp)
  80e29c:	dd800617 	ldw	r22,24(sp)
  80e2a0:	dd400517 	ldw	r21,20(sp)
  80e2a4:	dd000417 	ldw	r20,16(sp)
  80e2a8:	dcc00317 	ldw	r19,12(sp)
  80e2ac:	dc800217 	ldw	r18,8(sp)
  80e2b0:	dc400117 	ldw	r17,4(sp)
  80e2b4:	dc000017 	ldw	r16,0(sp)
  80e2b8:	dec00804 	addi	sp,sp,32
  80e2bc:	f800283a 	ret
  80e2c0:	002d883a 	mov	r22,zero
  80e2c4:	003ff206 	br	80e290 <_fwalk+0x80>

0080e2c8 <_gettimeofday_r>:
  80e2c8:	defffd04 	addi	sp,sp,-12
  80e2cc:	dc000015 	stw	r16,0(sp)
  80e2d0:	040020b4 	movhi	r16,130
  80e2d4:	843f6904 	addi	r16,r16,-604
  80e2d8:	dc400115 	stw	r17,4(sp)
  80e2dc:	80000015 	stw	zero,0(r16)
  80e2e0:	2023883a 	mov	r17,r4
  80e2e4:	2809883a 	mov	r4,r5
  80e2e8:	300b883a 	mov	r5,r6
  80e2ec:	dfc00215 	stw	ra,8(sp)
  80e2f0:	08115b80 	call	8115b8 <gettimeofday>
  80e2f4:	1007883a 	mov	r3,r2
  80e2f8:	00bfffc4 	movi	r2,-1
  80e2fc:	18800626 	beq	r3,r2,80e318 <_gettimeofday_r+0x50>
  80e300:	1805883a 	mov	r2,r3
  80e304:	dfc00217 	ldw	ra,8(sp)
  80e308:	dc400117 	ldw	r17,4(sp)
  80e30c:	dc000017 	ldw	r16,0(sp)
  80e310:	dec00304 	addi	sp,sp,12
  80e314:	f800283a 	ret
  80e318:	80800017 	ldw	r2,0(r16)
  80e31c:	103ff826 	beq	r2,zero,80e300 <_gettimeofday_r+0x38>
  80e320:	88800015 	stw	r2,0(r17)
  80e324:	1805883a 	mov	r2,r3
  80e328:	dfc00217 	ldw	ra,8(sp)
  80e32c:	dc400117 	ldw	r17,4(sp)
  80e330:	dc000017 	ldw	r16,0(sp)
  80e334:	dec00304 	addi	sp,sp,12
  80e338:	f800283a 	ret

0080e33c <__locale_charset>:
  80e33c:	d0a00b17 	ldw	r2,-32724(gp)
  80e340:	f800283a 	ret

0080e344 <_localeconv_r>:
  80e344:	008020b4 	movhi	r2,130
  80e348:	10b0c204 	addi	r2,r2,-15608
  80e34c:	f800283a 	ret

0080e350 <localeconv>:
  80e350:	008020b4 	movhi	r2,130
  80e354:	10b83b04 	addi	r2,r2,-7956
  80e358:	11000017 	ldw	r4,0(r2)
  80e35c:	080e3441 	jmpi	80e344 <_localeconv_r>

0080e360 <_setlocale_r>:
  80e360:	defffc04 	addi	sp,sp,-16
  80e364:	00c020b4 	movhi	r3,130
  80e368:	18f09804 	addi	r3,r3,-15776
  80e36c:	dc800215 	stw	r18,8(sp)
  80e370:	dc400115 	stw	r17,4(sp)
  80e374:	dc000015 	stw	r16,0(sp)
  80e378:	2023883a 	mov	r17,r4
  80e37c:	2825883a 	mov	r18,r5
  80e380:	dfc00315 	stw	ra,12(sp)
  80e384:	3021883a 	mov	r16,r6
  80e388:	3009883a 	mov	r4,r6
  80e38c:	180b883a 	mov	r5,r3
  80e390:	30000926 	beq	r6,zero,80e3b8 <_setlocale_r+0x58>
  80e394:	08100040 	call	810004 <strcmp>
  80e398:	8009883a 	mov	r4,r16
  80e39c:	014020b4 	movhi	r5,130
  80e3a0:	2970a904 	addi	r5,r5,-15708
  80e3a4:	10000b1e 	bne	r2,zero,80e3d4 <_setlocale_r+0x74>
  80e3a8:	8c000d15 	stw	r16,52(r17)
  80e3ac:	8c800c15 	stw	r18,48(r17)
  80e3b0:	00c020b4 	movhi	r3,130
  80e3b4:	18f09804 	addi	r3,r3,-15776
  80e3b8:	1805883a 	mov	r2,r3
  80e3bc:	dfc00317 	ldw	ra,12(sp)
  80e3c0:	dc800217 	ldw	r18,8(sp)
  80e3c4:	dc400117 	ldw	r17,4(sp)
  80e3c8:	dc000017 	ldw	r16,0(sp)
  80e3cc:	dec00404 	addi	sp,sp,16
  80e3d0:	f800283a 	ret
  80e3d4:	08100040 	call	810004 <strcmp>
  80e3d8:	0007883a 	mov	r3,zero
  80e3dc:	103ff226 	beq	r2,zero,80e3a8 <_setlocale_r+0x48>
  80e3e0:	003ff506 	br	80e3b8 <_setlocale_r+0x58>

0080e3e4 <setlocale>:
  80e3e4:	018020b4 	movhi	r6,130
  80e3e8:	31b83b04 	addi	r6,r6,-7956
  80e3ec:	2007883a 	mov	r3,r4
  80e3f0:	31000017 	ldw	r4,0(r6)
  80e3f4:	280d883a 	mov	r6,r5
  80e3f8:	180b883a 	mov	r5,r3
  80e3fc:	080e3601 	jmpi	80e360 <_setlocale_r>

0080e400 <__smakebuf_r>:
  80e400:	2880030b 	ldhu	r2,12(r5)
  80e404:	deffed04 	addi	sp,sp,-76
  80e408:	dc401015 	stw	r17,64(sp)
  80e40c:	1080008c 	andi	r2,r2,2
  80e410:	dc000f15 	stw	r16,60(sp)
  80e414:	dfc01215 	stw	ra,72(sp)
  80e418:	dc801115 	stw	r18,68(sp)
  80e41c:	2821883a 	mov	r16,r5
  80e420:	2023883a 	mov	r17,r4
  80e424:	10000b26 	beq	r2,zero,80e454 <__smakebuf_r+0x54>
  80e428:	28c010c4 	addi	r3,r5,67
  80e42c:	00800044 	movi	r2,1
  80e430:	28800515 	stw	r2,20(r5)
  80e434:	28c00415 	stw	r3,16(r5)
  80e438:	28c00015 	stw	r3,0(r5)
  80e43c:	dfc01217 	ldw	ra,72(sp)
  80e440:	dc801117 	ldw	r18,68(sp)
  80e444:	dc401017 	ldw	r17,64(sp)
  80e448:	dc000f17 	ldw	r16,60(sp)
  80e44c:	dec01304 	addi	sp,sp,76
  80e450:	f800283a 	ret
  80e454:	2940038f 	ldh	r5,14(r5)
  80e458:	28002116 	blt	r5,zero,80e4e0 <__smakebuf_r+0xe0>
  80e45c:	d80d883a 	mov	r6,sp
  80e460:	08103800 	call	810380 <_fstat_r>
  80e464:	10001e16 	blt	r2,zero,80e4e0 <__smakebuf_r+0xe0>
  80e468:	d8800117 	ldw	r2,4(sp)
  80e46c:	00e00014 	movui	r3,32768
  80e470:	113c000c 	andi	r4,r2,61440
  80e474:	20c03126 	beq	r4,r3,80e53c <__smakebuf_r+0x13c>
  80e478:	8080030b 	ldhu	r2,12(r16)
  80e47c:	00c80004 	movi	r3,8192
  80e480:	10820014 	ori	r2,r2,2048
  80e484:	8080030d 	sth	r2,12(r16)
  80e488:	20c01e26 	beq	r4,r3,80e504 <__smakebuf_r+0x104>
  80e48c:	04810004 	movi	r18,1024
  80e490:	8809883a 	mov	r4,r17
  80e494:	900b883a 	mov	r5,r18
  80e498:	080910c0 	call	80910c <_malloc_r>
  80e49c:	1009883a 	mov	r4,r2
  80e4a0:	10003126 	beq	r2,zero,80e568 <__smakebuf_r+0x168>
  80e4a4:	80c0030b 	ldhu	r3,12(r16)
  80e4a8:	00802074 	movhi	r2,129
  80e4ac:	10b5be04 	addi	r2,r2,-10504
  80e4b0:	88800f15 	stw	r2,60(r17)
  80e4b4:	18c02014 	ori	r3,r3,128
  80e4b8:	84800515 	stw	r18,20(r16)
  80e4bc:	80c0030d 	sth	r3,12(r16)
  80e4c0:	81000415 	stw	r4,16(r16)
  80e4c4:	81000015 	stw	r4,0(r16)
  80e4c8:	dfc01217 	ldw	ra,72(sp)
  80e4cc:	dc801117 	ldw	r18,68(sp)
  80e4d0:	dc401017 	ldw	r17,64(sp)
  80e4d4:	dc000f17 	ldw	r16,60(sp)
  80e4d8:	dec01304 	addi	sp,sp,76
  80e4dc:	f800283a 	ret
  80e4e0:	80c0030b 	ldhu	r3,12(r16)
  80e4e4:	1880200c 	andi	r2,r3,128
  80e4e8:	10000426 	beq	r2,zero,80e4fc <__smakebuf_r+0xfc>
  80e4ec:	04801004 	movi	r18,64
  80e4f0:	18820014 	ori	r2,r3,2048
  80e4f4:	8080030d 	sth	r2,12(r16)
  80e4f8:	003fe506 	br	80e490 <__smakebuf_r+0x90>
  80e4fc:	04810004 	movi	r18,1024
  80e500:	003ffb06 	br	80e4f0 <__smakebuf_r+0xf0>
  80e504:	8140038f 	ldh	r5,14(r16)
  80e508:	8809883a 	mov	r4,r17
  80e50c:	08103f40 	call	8103f4 <_isatty_r>
  80e510:	103fde26 	beq	r2,zero,80e48c <__smakebuf_r+0x8c>
  80e514:	8080030b 	ldhu	r2,12(r16)
  80e518:	80c010c4 	addi	r3,r16,67
  80e51c:	04810004 	movi	r18,1024
  80e520:	10800054 	ori	r2,r2,1
  80e524:	8080030d 	sth	r2,12(r16)
  80e528:	00800044 	movi	r2,1
  80e52c:	80c00415 	stw	r3,16(r16)
  80e530:	80800515 	stw	r2,20(r16)
  80e534:	80c00015 	stw	r3,0(r16)
  80e538:	003fd506 	br	80e490 <__smakebuf_r+0x90>
  80e53c:	80c00a17 	ldw	r3,40(r16)
  80e540:	00802074 	movhi	r2,129
  80e544:	10bfb004 	addi	r2,r2,-320
  80e548:	18bfcb1e 	bne	r3,r2,80e478 <__smakebuf_r+0x78>
  80e54c:	8080030b 	ldhu	r2,12(r16)
  80e550:	00c10004 	movi	r3,1024
  80e554:	1825883a 	mov	r18,r3
  80e558:	10c4b03a 	or	r2,r2,r3
  80e55c:	8080030d 	sth	r2,12(r16)
  80e560:	80c01315 	stw	r3,76(r16)
  80e564:	003fca06 	br	80e490 <__smakebuf_r+0x90>
  80e568:	8100030b 	ldhu	r4,12(r16)
  80e56c:	2080800c 	andi	r2,r4,512
  80e570:	103fb21e 	bne	r2,zero,80e43c <__smakebuf_r+0x3c>
  80e574:	80c010c4 	addi	r3,r16,67
  80e578:	21000094 	ori	r4,r4,2
  80e57c:	00800044 	movi	r2,1
  80e580:	80800515 	stw	r2,20(r16)
  80e584:	8100030d 	sth	r4,12(r16)
  80e588:	80c00415 	stw	r3,16(r16)
  80e58c:	80c00015 	stw	r3,0(r16)
  80e590:	003faa06 	br	80e43c <__smakebuf_r+0x3c>

0080e594 <memchr>:
  80e594:	008000c4 	movi	r2,3
  80e598:	29403fcc 	andi	r5,r5,255
  80e59c:	2007883a 	mov	r3,r4
  80e5a0:	1180022e 	bgeu	r2,r6,80e5ac <memchr+0x18>
  80e5a4:	2084703a 	and	r2,r4,r2
  80e5a8:	10000b26 	beq	r2,zero,80e5d8 <memchr+0x44>
  80e5ac:	313fffc4 	addi	r4,r6,-1
  80e5b0:	3000051e 	bne	r6,zero,80e5c8 <memchr+0x34>
  80e5b4:	00002c06 	br	80e668 <memchr+0xd4>
  80e5b8:	213fffc4 	addi	r4,r4,-1
  80e5bc:	00bfffc4 	movi	r2,-1
  80e5c0:	18c00044 	addi	r3,r3,1
  80e5c4:	20802826 	beq	r4,r2,80e668 <memchr+0xd4>
  80e5c8:	18800003 	ldbu	r2,0(r3)
  80e5cc:	28bffa1e 	bne	r5,r2,80e5b8 <memchr+0x24>
  80e5d0:	1805883a 	mov	r2,r3
  80e5d4:	f800283a 	ret
  80e5d8:	0011883a 	mov	r8,zero
  80e5dc:	0007883a 	mov	r3,zero
  80e5e0:	01c00104 	movi	r7,4
  80e5e4:	4004923a 	slli	r2,r8,8
  80e5e8:	18c00044 	addi	r3,r3,1
  80e5ec:	1151883a 	add	r8,r2,r5
  80e5f0:	19fffc1e 	bne	r3,r7,80e5e4 <memchr+0x50>
  80e5f4:	02bfbff4 	movhi	r10,65279
  80e5f8:	52bfbfc4 	addi	r10,r10,-257
  80e5fc:	02602074 	movhi	r9,32897
  80e600:	4a602004 	addi	r9,r9,-32640
  80e604:	02c000c4 	movi	r11,3
  80e608:	20800017 	ldw	r2,0(r4)
  80e60c:	31bfff04 	addi	r6,r6,-4
  80e610:	200f883a 	mov	r7,r4
  80e614:	1204f03a 	xor	r2,r2,r8
  80e618:	1287883a 	add	r3,r2,r10
  80e61c:	1a46703a 	and	r3,r3,r9
  80e620:	0084303a 	nor	r2,zero,r2
  80e624:	10c4703a 	and	r2,r2,r3
  80e628:	10000b26 	beq	r2,zero,80e658 <memchr+0xc4>
  80e62c:	20800003 	ldbu	r2,0(r4)
  80e630:	28800f26 	beq	r5,r2,80e670 <memchr+0xdc>
  80e634:	20800043 	ldbu	r2,1(r4)
  80e638:	21c00044 	addi	r7,r4,1
  80e63c:	28800c26 	beq	r5,r2,80e670 <memchr+0xdc>
  80e640:	20800083 	ldbu	r2,2(r4)
  80e644:	21c00084 	addi	r7,r4,2
  80e648:	28800926 	beq	r5,r2,80e670 <memchr+0xdc>
  80e64c:	208000c3 	ldbu	r2,3(r4)
  80e650:	21c000c4 	addi	r7,r4,3
  80e654:	28800626 	beq	r5,r2,80e670 <memchr+0xdc>
  80e658:	21000104 	addi	r4,r4,4
  80e65c:	59bfea36 	bltu	r11,r6,80e608 <memchr+0x74>
  80e660:	2007883a 	mov	r3,r4
  80e664:	003fd106 	br	80e5ac <memchr+0x18>
  80e668:	0005883a 	mov	r2,zero
  80e66c:	f800283a 	ret
  80e670:	3805883a 	mov	r2,r7
  80e674:	f800283a 	ret

0080e678 <memcpy>:
  80e678:	01c003c4 	movi	r7,15
  80e67c:	2007883a 	mov	r3,r4
  80e680:	3980032e 	bgeu	r7,r6,80e690 <memcpy+0x18>
  80e684:	2904b03a 	or	r2,r5,r4
  80e688:	108000cc 	andi	r2,r2,3
  80e68c:	10000926 	beq	r2,zero,80e6b4 <memcpy+0x3c>
  80e690:	30000626 	beq	r6,zero,80e6ac <memcpy+0x34>
  80e694:	30cd883a 	add	r6,r6,r3
  80e698:	28800003 	ldbu	r2,0(r5)
  80e69c:	29400044 	addi	r5,r5,1
  80e6a0:	18800005 	stb	r2,0(r3)
  80e6a4:	18c00044 	addi	r3,r3,1
  80e6a8:	30fffb1e 	bne	r6,r3,80e698 <memcpy+0x20>
  80e6ac:	2005883a 	mov	r2,r4
  80e6b0:	f800283a 	ret
  80e6b4:	3811883a 	mov	r8,r7
  80e6b8:	200f883a 	mov	r7,r4
  80e6bc:	28c00017 	ldw	r3,0(r5)
  80e6c0:	31bffc04 	addi	r6,r6,-16
  80e6c4:	38c00015 	stw	r3,0(r7)
  80e6c8:	28800117 	ldw	r2,4(r5)
  80e6cc:	38800115 	stw	r2,4(r7)
  80e6d0:	28c00217 	ldw	r3,8(r5)
  80e6d4:	38c00215 	stw	r3,8(r7)
  80e6d8:	28800317 	ldw	r2,12(r5)
  80e6dc:	29400404 	addi	r5,r5,16
  80e6e0:	38800315 	stw	r2,12(r7)
  80e6e4:	39c00404 	addi	r7,r7,16
  80e6e8:	41bff436 	bltu	r8,r6,80e6bc <memcpy+0x44>
  80e6ec:	008000c4 	movi	r2,3
  80e6f0:	1180072e 	bgeu	r2,r6,80e710 <memcpy+0x98>
  80e6f4:	1007883a 	mov	r3,r2
  80e6f8:	28800017 	ldw	r2,0(r5)
  80e6fc:	31bfff04 	addi	r6,r6,-4
  80e700:	29400104 	addi	r5,r5,4
  80e704:	38800015 	stw	r2,0(r7)
  80e708:	39c00104 	addi	r7,r7,4
  80e70c:	19bffa36 	bltu	r3,r6,80e6f8 <memcpy+0x80>
  80e710:	3807883a 	mov	r3,r7
  80e714:	003fde06 	br	80e690 <memcpy+0x18>

0080e718 <memmove>:
  80e718:	2807883a 	mov	r3,r5
  80e71c:	2011883a 	mov	r8,r4
  80e720:	29000c2e 	bgeu	r5,r4,80e754 <memmove+0x3c>
  80e724:	298f883a 	add	r7,r5,r6
  80e728:	21c00a2e 	bgeu	r4,r7,80e754 <memmove+0x3c>
  80e72c:	30000726 	beq	r6,zero,80e74c <memmove+0x34>
  80e730:	2187883a 	add	r3,r4,r6
  80e734:	198dc83a 	sub	r6,r3,r6
  80e738:	39ffffc4 	addi	r7,r7,-1
  80e73c:	38800003 	ldbu	r2,0(r7)
  80e740:	18ffffc4 	addi	r3,r3,-1
  80e744:	18800005 	stb	r2,0(r3)
  80e748:	19bffb1e 	bne	r3,r6,80e738 <memmove+0x20>
  80e74c:	2005883a 	mov	r2,r4
  80e750:	f800283a 	ret
  80e754:	01c003c4 	movi	r7,15
  80e758:	39800a36 	bltu	r7,r6,80e784 <memmove+0x6c>
  80e75c:	303ffb26 	beq	r6,zero,80e74c <memmove+0x34>
  80e760:	400f883a 	mov	r7,r8
  80e764:	320d883a 	add	r6,r6,r8
  80e768:	28800003 	ldbu	r2,0(r5)
  80e76c:	29400044 	addi	r5,r5,1
  80e770:	38800005 	stb	r2,0(r7)
  80e774:	39c00044 	addi	r7,r7,1
  80e778:	39bffb1e 	bne	r7,r6,80e768 <memmove+0x50>
  80e77c:	2005883a 	mov	r2,r4
  80e780:	f800283a 	ret
  80e784:	1904b03a 	or	r2,r3,r4
  80e788:	108000cc 	andi	r2,r2,3
  80e78c:	103ff31e 	bne	r2,zero,80e75c <memmove+0x44>
  80e790:	3811883a 	mov	r8,r7
  80e794:	180b883a 	mov	r5,r3
  80e798:	200f883a 	mov	r7,r4
  80e79c:	28c00017 	ldw	r3,0(r5)
  80e7a0:	31bffc04 	addi	r6,r6,-16
  80e7a4:	38c00015 	stw	r3,0(r7)
  80e7a8:	28800117 	ldw	r2,4(r5)
  80e7ac:	38800115 	stw	r2,4(r7)
  80e7b0:	28c00217 	ldw	r3,8(r5)
  80e7b4:	38c00215 	stw	r3,8(r7)
  80e7b8:	28800317 	ldw	r2,12(r5)
  80e7bc:	29400404 	addi	r5,r5,16
  80e7c0:	38800315 	stw	r2,12(r7)
  80e7c4:	39c00404 	addi	r7,r7,16
  80e7c8:	41bff436 	bltu	r8,r6,80e79c <memmove+0x84>
  80e7cc:	008000c4 	movi	r2,3
  80e7d0:	1180072e 	bgeu	r2,r6,80e7f0 <memmove+0xd8>
  80e7d4:	1007883a 	mov	r3,r2
  80e7d8:	28800017 	ldw	r2,0(r5)
  80e7dc:	31bfff04 	addi	r6,r6,-4
  80e7e0:	29400104 	addi	r5,r5,4
  80e7e4:	38800015 	stw	r2,0(r7)
  80e7e8:	39c00104 	addi	r7,r7,4
  80e7ec:	19bffa36 	bltu	r3,r6,80e7d8 <memmove+0xc0>
  80e7f0:	3811883a 	mov	r8,r7
  80e7f4:	003fd906 	br	80e75c <memmove+0x44>

0080e7f8 <memset>:
  80e7f8:	008000c4 	movi	r2,3
  80e7fc:	29403fcc 	andi	r5,r5,255
  80e800:	2007883a 	mov	r3,r4
  80e804:	1180022e 	bgeu	r2,r6,80e810 <memset+0x18>
  80e808:	2084703a 	and	r2,r4,r2
  80e80c:	10000826 	beq	r2,zero,80e830 <memset+0x38>
  80e810:	30000526 	beq	r6,zero,80e828 <memset+0x30>
  80e814:	2805883a 	mov	r2,r5
  80e818:	30cd883a 	add	r6,r6,r3
  80e81c:	18800005 	stb	r2,0(r3)
  80e820:	18c00044 	addi	r3,r3,1
  80e824:	19bffd1e 	bne	r3,r6,80e81c <memset+0x24>
  80e828:	2005883a 	mov	r2,r4
  80e82c:	f800283a 	ret
  80e830:	2804923a 	slli	r2,r5,8
  80e834:	020003c4 	movi	r8,15
  80e838:	200f883a 	mov	r7,r4
  80e83c:	2884b03a 	or	r2,r5,r2
  80e840:	1006943a 	slli	r3,r2,16
  80e844:	10c6b03a 	or	r3,r2,r3
  80e848:	41800a2e 	bgeu	r8,r6,80e874 <memset+0x7c>
  80e84c:	4005883a 	mov	r2,r8
  80e850:	31bffc04 	addi	r6,r6,-16
  80e854:	38c00015 	stw	r3,0(r7)
  80e858:	38c00115 	stw	r3,4(r7)
  80e85c:	38c00215 	stw	r3,8(r7)
  80e860:	38c00315 	stw	r3,12(r7)
  80e864:	39c00404 	addi	r7,r7,16
  80e868:	11bff936 	bltu	r2,r6,80e850 <memset+0x58>
  80e86c:	008000c4 	movi	r2,3
  80e870:	1180052e 	bgeu	r2,r6,80e888 <memset+0x90>
  80e874:	31bfff04 	addi	r6,r6,-4
  80e878:	008000c4 	movi	r2,3
  80e87c:	38c00015 	stw	r3,0(r7)
  80e880:	39c00104 	addi	r7,r7,4
  80e884:	11bffb36 	bltu	r2,r6,80e874 <memset+0x7c>
  80e888:	3807883a 	mov	r3,r7
  80e88c:	003fe006 	br	80e810 <memset+0x18>

0080e890 <_Bfree>:
  80e890:	28000826 	beq	r5,zero,80e8b4 <_Bfree+0x24>
  80e894:	28800117 	ldw	r2,4(r5)
  80e898:	21001317 	ldw	r4,76(r4)
  80e89c:	1085883a 	add	r2,r2,r2
  80e8a0:	1085883a 	add	r2,r2,r2
  80e8a4:	1105883a 	add	r2,r2,r4
  80e8a8:	10c00017 	ldw	r3,0(r2)
  80e8ac:	28c00015 	stw	r3,0(r5)
  80e8b0:	11400015 	stw	r5,0(r2)
  80e8b4:	f800283a 	ret

0080e8b8 <__hi0bits>:
  80e8b8:	20bfffec 	andhi	r2,r4,65535
  80e8bc:	10001426 	beq	r2,zero,80e910 <__hi0bits+0x58>
  80e8c0:	0007883a 	mov	r3,zero
  80e8c4:	20bfc02c 	andhi	r2,r4,65280
  80e8c8:	1000021e 	bne	r2,zero,80e8d4 <__hi0bits+0x1c>
  80e8cc:	2008923a 	slli	r4,r4,8
  80e8d0:	18c00204 	addi	r3,r3,8
  80e8d4:	20bc002c 	andhi	r2,r4,61440
  80e8d8:	1000021e 	bne	r2,zero,80e8e4 <__hi0bits+0x2c>
  80e8dc:	2008913a 	slli	r4,r4,4
  80e8e0:	18c00104 	addi	r3,r3,4
  80e8e4:	20b0002c 	andhi	r2,r4,49152
  80e8e8:	1000031e 	bne	r2,zero,80e8f8 <__hi0bits+0x40>
  80e8ec:	2105883a 	add	r2,r4,r4
  80e8f0:	18c00084 	addi	r3,r3,2
  80e8f4:	1089883a 	add	r4,r2,r2
  80e8f8:	20000316 	blt	r4,zero,80e908 <__hi0bits+0x50>
  80e8fc:	2090002c 	andhi	r2,r4,16384
  80e900:	10000626 	beq	r2,zero,80e91c <__hi0bits+0x64>
  80e904:	18c00044 	addi	r3,r3,1
  80e908:	1805883a 	mov	r2,r3
  80e90c:	f800283a 	ret
  80e910:	2008943a 	slli	r4,r4,16
  80e914:	00c00404 	movi	r3,16
  80e918:	003fea06 	br	80e8c4 <__hi0bits+0xc>
  80e91c:	00c00804 	movi	r3,32
  80e920:	1805883a 	mov	r2,r3
  80e924:	f800283a 	ret

0080e928 <__lo0bits>:
  80e928:	20c00017 	ldw	r3,0(r4)
  80e92c:	188001cc 	andi	r2,r3,7
  80e930:	10000a26 	beq	r2,zero,80e95c <__lo0bits+0x34>
  80e934:	1880004c 	andi	r2,r3,1
  80e938:	1005003a 	cmpeq	r2,r2,zero
  80e93c:	10002126 	beq	r2,zero,80e9c4 <__lo0bits+0x9c>
  80e940:	1880008c 	andi	r2,r3,2
  80e944:	1000251e 	bne	r2,zero,80e9dc <__lo0bits+0xb4>
  80e948:	1804d0ba 	srli	r2,r3,2
  80e94c:	01400084 	movi	r5,2
  80e950:	20800015 	stw	r2,0(r4)
  80e954:	2805883a 	mov	r2,r5
  80e958:	f800283a 	ret
  80e95c:	18bfffcc 	andi	r2,r3,65535
  80e960:	10001526 	beq	r2,zero,80e9b8 <__lo0bits+0x90>
  80e964:	000b883a 	mov	r5,zero
  80e968:	18803fcc 	andi	r2,r3,255
  80e96c:	1000021e 	bne	r2,zero,80e978 <__lo0bits+0x50>
  80e970:	1806d23a 	srli	r3,r3,8
  80e974:	29400204 	addi	r5,r5,8
  80e978:	188003cc 	andi	r2,r3,15
  80e97c:	1000021e 	bne	r2,zero,80e988 <__lo0bits+0x60>
  80e980:	1806d13a 	srli	r3,r3,4
  80e984:	29400104 	addi	r5,r5,4
  80e988:	188000cc 	andi	r2,r3,3
  80e98c:	1000021e 	bne	r2,zero,80e998 <__lo0bits+0x70>
  80e990:	1806d0ba 	srli	r3,r3,2
  80e994:	29400084 	addi	r5,r5,2
  80e998:	1880004c 	andi	r2,r3,1
  80e99c:	1000031e 	bne	r2,zero,80e9ac <__lo0bits+0x84>
  80e9a0:	1806d07a 	srli	r3,r3,1
  80e9a4:	18000a26 	beq	r3,zero,80e9d0 <__lo0bits+0xa8>
  80e9a8:	29400044 	addi	r5,r5,1
  80e9ac:	2805883a 	mov	r2,r5
  80e9b0:	20c00015 	stw	r3,0(r4)
  80e9b4:	f800283a 	ret
  80e9b8:	1806d43a 	srli	r3,r3,16
  80e9bc:	01400404 	movi	r5,16
  80e9c0:	003fe906 	br	80e968 <__lo0bits+0x40>
  80e9c4:	000b883a 	mov	r5,zero
  80e9c8:	2805883a 	mov	r2,r5
  80e9cc:	f800283a 	ret
  80e9d0:	01400804 	movi	r5,32
  80e9d4:	2805883a 	mov	r2,r5
  80e9d8:	f800283a 	ret
  80e9dc:	1804d07a 	srli	r2,r3,1
  80e9e0:	01400044 	movi	r5,1
  80e9e4:	20800015 	stw	r2,0(r4)
  80e9e8:	003fda06 	br	80e954 <__lo0bits+0x2c>

0080e9ec <__mcmp>:
  80e9ec:	20800417 	ldw	r2,16(r4)
  80e9f0:	28c00417 	ldw	r3,16(r5)
  80e9f4:	10cfc83a 	sub	r7,r2,r3
  80e9f8:	38000c1e 	bne	r7,zero,80ea2c <__mcmp+0x40>
  80e9fc:	18c5883a 	add	r2,r3,r3
  80ea00:	1085883a 	add	r2,r2,r2
  80ea04:	10c00504 	addi	r3,r2,20
  80ea08:	21000504 	addi	r4,r4,20
  80ea0c:	28cb883a 	add	r5,r5,r3
  80ea10:	2085883a 	add	r2,r4,r2
  80ea14:	10bfff04 	addi	r2,r2,-4
  80ea18:	297fff04 	addi	r5,r5,-4
  80ea1c:	11800017 	ldw	r6,0(r2)
  80ea20:	28c00017 	ldw	r3,0(r5)
  80ea24:	30c0031e 	bne	r6,r3,80ea34 <__mcmp+0x48>
  80ea28:	20bffa36 	bltu	r4,r2,80ea14 <__mcmp+0x28>
  80ea2c:	3805883a 	mov	r2,r7
  80ea30:	f800283a 	ret
  80ea34:	30c00336 	bltu	r6,r3,80ea44 <__mcmp+0x58>
  80ea38:	01c00044 	movi	r7,1
  80ea3c:	3805883a 	mov	r2,r7
  80ea40:	f800283a 	ret
  80ea44:	01ffffc4 	movi	r7,-1
  80ea48:	003ff806 	br	80ea2c <__mcmp+0x40>

0080ea4c <__ulp>:
  80ea4c:	295ffc2c 	andhi	r5,r5,32752
  80ea50:	013f3034 	movhi	r4,64704
  80ea54:	290b883a 	add	r5,r5,r4
  80ea58:	0145c83a 	sub	r2,zero,r5
  80ea5c:	1007d53a 	srai	r3,r2,20
  80ea60:	000d883a 	mov	r6,zero
  80ea64:	0140040e 	bge	zero,r5,80ea78 <__ulp+0x2c>
  80ea68:	280f883a 	mov	r7,r5
  80ea6c:	3807883a 	mov	r3,r7
  80ea70:	3005883a 	mov	r2,r6
  80ea74:	f800283a 	ret
  80ea78:	008004c4 	movi	r2,19
  80ea7c:	193ffb04 	addi	r4,r3,-20
  80ea80:	10c00c0e 	bge	r2,r3,80eab4 <__ulp+0x68>
  80ea84:	008007c4 	movi	r2,31
  80ea88:	1107c83a 	sub	r3,r2,r4
  80ea8c:	00800784 	movi	r2,30
  80ea90:	01400044 	movi	r5,1
  80ea94:	11000216 	blt	r2,r4,80eaa0 <__ulp+0x54>
  80ea98:	00800044 	movi	r2,1
  80ea9c:	10ca983a 	sll	r5,r2,r3
  80eaa0:	000f883a 	mov	r7,zero
  80eaa4:	280d883a 	mov	r6,r5
  80eaa8:	3807883a 	mov	r3,r7
  80eaac:	3005883a 	mov	r2,r6
  80eab0:	f800283a 	ret
  80eab4:	00800234 	movhi	r2,8
  80eab8:	10cfd83a 	sra	r7,r2,r3
  80eabc:	000d883a 	mov	r6,zero
  80eac0:	3005883a 	mov	r2,r6
  80eac4:	3807883a 	mov	r3,r7
  80eac8:	f800283a 	ret

0080eacc <__b2d>:
  80eacc:	20800417 	ldw	r2,16(r4)
  80ead0:	defff904 	addi	sp,sp,-28
  80ead4:	dd000415 	stw	r20,16(sp)
  80ead8:	1085883a 	add	r2,r2,r2
  80eadc:	25000504 	addi	r20,r4,20
  80eae0:	1085883a 	add	r2,r2,r2
  80eae4:	dc000015 	stw	r16,0(sp)
  80eae8:	a0a1883a 	add	r16,r20,r2
  80eaec:	dd400515 	stw	r21,20(sp)
  80eaf0:	857fff17 	ldw	r21,-4(r16)
  80eaf4:	dc400115 	stw	r17,4(sp)
  80eaf8:	dfc00615 	stw	ra,24(sp)
  80eafc:	a809883a 	mov	r4,r21
  80eb00:	2823883a 	mov	r17,r5
  80eb04:	dcc00315 	stw	r19,12(sp)
  80eb08:	dc800215 	stw	r18,8(sp)
  80eb0c:	080e8b80 	call	80e8b8 <__hi0bits>
  80eb10:	100b883a 	mov	r5,r2
  80eb14:	00800804 	movi	r2,32
  80eb18:	1145c83a 	sub	r2,r2,r5
  80eb1c:	88800015 	stw	r2,0(r17)
  80eb20:	00800284 	movi	r2,10
  80eb24:	80ffff04 	addi	r3,r16,-4
  80eb28:	11401416 	blt	r2,r5,80eb7c <__b2d+0xb0>
  80eb2c:	008002c4 	movi	r2,11
  80eb30:	1149c83a 	sub	r4,r2,r5
  80eb34:	a0c02736 	bltu	r20,r3,80ebd4 <__b2d+0x108>
  80eb38:	000d883a 	mov	r6,zero
  80eb3c:	28800544 	addi	r2,r5,21
  80eb40:	a906d83a 	srl	r3,r21,r4
  80eb44:	a884983a 	sll	r2,r21,r2
  80eb48:	1ccffc34 	orhi	r19,r3,16368
  80eb4c:	11a4b03a 	or	r18,r2,r6
  80eb50:	9005883a 	mov	r2,r18
  80eb54:	9807883a 	mov	r3,r19
  80eb58:	dfc00617 	ldw	ra,24(sp)
  80eb5c:	dd400517 	ldw	r21,20(sp)
  80eb60:	dd000417 	ldw	r20,16(sp)
  80eb64:	dcc00317 	ldw	r19,12(sp)
  80eb68:	dc800217 	ldw	r18,8(sp)
  80eb6c:	dc400117 	ldw	r17,4(sp)
  80eb70:	dc000017 	ldw	r16,0(sp)
  80eb74:	dec00704 	addi	sp,sp,28
  80eb78:	f800283a 	ret
  80eb7c:	a0c00e36 	bltu	r20,r3,80ebb8 <__b2d+0xec>
  80eb80:	293ffd44 	addi	r4,r5,-11
  80eb84:	000d883a 	mov	r6,zero
  80eb88:	20000f26 	beq	r4,zero,80ebc8 <__b2d+0xfc>
  80eb8c:	00800804 	movi	r2,32
  80eb90:	110bc83a 	sub	r5,r2,r4
  80eb94:	a0c01236 	bltu	r20,r3,80ebe0 <__b2d+0x114>
  80eb98:	000f883a 	mov	r7,zero
  80eb9c:	a904983a 	sll	r2,r21,r4
  80eba0:	3146d83a 	srl	r3,r6,r5
  80eba4:	3108983a 	sll	r4,r6,r4
  80eba8:	108ffc34 	orhi	r2,r2,16368
  80ebac:	18a6b03a 	or	r19,r3,r2
  80ebb0:	3924b03a 	or	r18,r7,r4
  80ebb4:	003fe606 	br	80eb50 <__b2d+0x84>
  80ebb8:	293ffd44 	addi	r4,r5,-11
  80ebbc:	81bffe17 	ldw	r6,-8(r16)
  80ebc0:	80fffe04 	addi	r3,r16,-8
  80ebc4:	203ff11e 	bne	r4,zero,80eb8c <__b2d+0xc0>
  80ebc8:	accffc34 	orhi	r19,r21,16368
  80ebcc:	3025883a 	mov	r18,r6
  80ebd0:	003fdf06 	br	80eb50 <__b2d+0x84>
  80ebd4:	18bfff17 	ldw	r2,-4(r3)
  80ebd8:	110cd83a 	srl	r6,r2,r4
  80ebdc:	003fd706 	br	80eb3c <__b2d+0x70>
  80ebe0:	18bfff17 	ldw	r2,-4(r3)
  80ebe4:	114ed83a 	srl	r7,r2,r5
  80ebe8:	003fec06 	br	80eb9c <__b2d+0xd0>

0080ebec <__ratio>:
  80ebec:	defff904 	addi	sp,sp,-28
  80ebf0:	dc400215 	stw	r17,8(sp)
  80ebf4:	2823883a 	mov	r17,r5
  80ebf8:	d80b883a 	mov	r5,sp
  80ebfc:	dfc00615 	stw	ra,24(sp)
  80ec00:	dd000515 	stw	r20,20(sp)
  80ec04:	dcc00415 	stw	r19,16(sp)
  80ec08:	dc800315 	stw	r18,12(sp)
  80ec0c:	2025883a 	mov	r18,r4
  80ec10:	080eacc0 	call	80eacc <__b2d>
  80ec14:	8809883a 	mov	r4,r17
  80ec18:	d9400104 	addi	r5,sp,4
  80ec1c:	1027883a 	mov	r19,r2
  80ec20:	1829883a 	mov	r20,r3
  80ec24:	080eacc0 	call	80eacc <__b2d>
  80ec28:	89000417 	ldw	r4,16(r17)
  80ec2c:	91c00417 	ldw	r7,16(r18)
  80ec30:	d9800117 	ldw	r6,4(sp)
  80ec34:	180b883a 	mov	r5,r3
  80ec38:	390fc83a 	sub	r7,r7,r4
  80ec3c:	1009883a 	mov	r4,r2
  80ec40:	d8800017 	ldw	r2,0(sp)
  80ec44:	380e917a 	slli	r7,r7,5
  80ec48:	2011883a 	mov	r8,r4
  80ec4c:	1185c83a 	sub	r2,r2,r6
  80ec50:	11c5883a 	add	r2,r2,r7
  80ec54:	1006953a 	slli	r3,r2,20
  80ec58:	2813883a 	mov	r9,r5
  80ec5c:	00800d0e 	bge	zero,r2,80ec94 <__ratio+0xa8>
  80ec60:	1d29883a 	add	r20,r3,r20
  80ec64:	a00b883a 	mov	r5,r20
  80ec68:	480f883a 	mov	r7,r9
  80ec6c:	9809883a 	mov	r4,r19
  80ec70:	400d883a 	mov	r6,r8
  80ec74:	080802c0 	call	80802c <__divdf3>
  80ec78:	dfc00617 	ldw	ra,24(sp)
  80ec7c:	dd000517 	ldw	r20,20(sp)
  80ec80:	dcc00417 	ldw	r19,16(sp)
  80ec84:	dc800317 	ldw	r18,12(sp)
  80ec88:	dc400217 	ldw	r17,8(sp)
  80ec8c:	dec00704 	addi	sp,sp,28
  80ec90:	f800283a 	ret
  80ec94:	28d3c83a 	sub	r9,r5,r3
  80ec98:	003ff206 	br	80ec64 <__ratio+0x78>

0080ec9c <_mprec_log10>:
  80ec9c:	defffe04 	addi	sp,sp,-8
  80eca0:	008005c4 	movi	r2,23
  80eca4:	dc000015 	stw	r16,0(sp)
  80eca8:	dfc00115 	stw	ra,4(sp)
  80ecac:	2021883a 	mov	r16,r4
  80ecb0:	11000c16 	blt	r2,r4,80ece4 <_mprec_log10+0x48>
  80ecb4:	200490fa 	slli	r2,r4,3
  80ecb8:	00c020b4 	movhi	r3,130
  80ecbc:	18f0ce04 	addi	r3,r3,-15560
  80ecc0:	10c5883a 	add	r2,r2,r3
  80ecc4:	12400117 	ldw	r9,4(r2)
  80ecc8:	12000017 	ldw	r8,0(r2)
  80eccc:	4807883a 	mov	r3,r9
  80ecd0:	4005883a 	mov	r2,r8
  80ecd4:	dfc00117 	ldw	ra,4(sp)
  80ecd8:	dc000017 	ldw	r16,0(sp)
  80ecdc:	dec00204 	addi	sp,sp,8
  80ece0:	f800283a 	ret
  80ece4:	0011883a 	mov	r8,zero
  80ece8:	024ffc34 	movhi	r9,16368
  80ecec:	0005883a 	mov	r2,zero
  80ecf0:	00d00934 	movhi	r3,16420
  80ecf4:	480b883a 	mov	r5,r9
  80ecf8:	4009883a 	mov	r4,r8
  80ecfc:	180f883a 	mov	r7,r3
  80ed00:	100d883a 	mov	r6,r2
  80ed04:	0807c680 	call	807c68 <__muldf3>
  80ed08:	843fffc4 	addi	r16,r16,-1
  80ed0c:	1011883a 	mov	r8,r2
  80ed10:	1813883a 	mov	r9,r3
  80ed14:	803ff51e 	bne	r16,zero,80ecec <_mprec_log10+0x50>
  80ed18:	4005883a 	mov	r2,r8
  80ed1c:	4807883a 	mov	r3,r9
  80ed20:	dfc00117 	ldw	ra,4(sp)
  80ed24:	dc000017 	ldw	r16,0(sp)
  80ed28:	dec00204 	addi	sp,sp,8
  80ed2c:	f800283a 	ret

0080ed30 <__copybits>:
  80ed30:	297fffc4 	addi	r5,r5,-1
  80ed34:	30800417 	ldw	r2,16(r6)
  80ed38:	280bd17a 	srai	r5,r5,5
  80ed3c:	31800504 	addi	r6,r6,20
  80ed40:	1085883a 	add	r2,r2,r2
  80ed44:	294b883a 	add	r5,r5,r5
  80ed48:	294b883a 	add	r5,r5,r5
  80ed4c:	1085883a 	add	r2,r2,r2
  80ed50:	290b883a 	add	r5,r5,r4
  80ed54:	3087883a 	add	r3,r6,r2
  80ed58:	29400104 	addi	r5,r5,4
  80ed5c:	30c0052e 	bgeu	r6,r3,80ed74 <__copybits+0x44>
  80ed60:	30800017 	ldw	r2,0(r6)
  80ed64:	31800104 	addi	r6,r6,4
  80ed68:	20800015 	stw	r2,0(r4)
  80ed6c:	21000104 	addi	r4,r4,4
  80ed70:	30fffb36 	bltu	r6,r3,80ed60 <__copybits+0x30>
  80ed74:	2140032e 	bgeu	r4,r5,80ed84 <__copybits+0x54>
  80ed78:	20000015 	stw	zero,0(r4)
  80ed7c:	21000104 	addi	r4,r4,4
  80ed80:	217ffd36 	bltu	r4,r5,80ed78 <__copybits+0x48>
  80ed84:	f800283a 	ret

0080ed88 <__any_on>:
  80ed88:	20800417 	ldw	r2,16(r4)
  80ed8c:	2807d17a 	srai	r3,r5,5
  80ed90:	21000504 	addi	r4,r4,20
  80ed94:	10c00d0e 	bge	r2,r3,80edcc <__any_on+0x44>
  80ed98:	1085883a 	add	r2,r2,r2
  80ed9c:	1085883a 	add	r2,r2,r2
  80eda0:	208d883a 	add	r6,r4,r2
  80eda4:	2180182e 	bgeu	r4,r6,80ee08 <__any_on+0x80>
  80eda8:	30bfff17 	ldw	r2,-4(r6)
  80edac:	30ffff04 	addi	r3,r6,-4
  80edb0:	1000041e 	bne	r2,zero,80edc4 <__any_on+0x3c>
  80edb4:	20c0142e 	bgeu	r4,r3,80ee08 <__any_on+0x80>
  80edb8:	18ffff04 	addi	r3,r3,-4
  80edbc:	18800017 	ldw	r2,0(r3)
  80edc0:	103ffc26 	beq	r2,zero,80edb4 <__any_on+0x2c>
  80edc4:	00800044 	movi	r2,1
  80edc8:	f800283a 	ret
  80edcc:	18800a0e 	bge	r3,r2,80edf8 <__any_on+0x70>
  80edd0:	294007cc 	andi	r5,r5,31
  80edd4:	28000826 	beq	r5,zero,80edf8 <__any_on+0x70>
  80edd8:	18c5883a 	add	r2,r3,r3
  80eddc:	1085883a 	add	r2,r2,r2
  80ede0:	208d883a 	add	r6,r4,r2
  80ede4:	30c00017 	ldw	r3,0(r6)
  80ede8:	1944d83a 	srl	r2,r3,r5
  80edec:	1144983a 	sll	r2,r2,r5
  80edf0:	18bff41e 	bne	r3,r2,80edc4 <__any_on+0x3c>
  80edf4:	003feb06 	br	80eda4 <__any_on+0x1c>
  80edf8:	18c5883a 	add	r2,r3,r3
  80edfc:	1085883a 	add	r2,r2,r2
  80ee00:	208d883a 	add	r6,r4,r2
  80ee04:	003fe706 	br	80eda4 <__any_on+0x1c>
  80ee08:	0005883a 	mov	r2,zero
  80ee0c:	f800283a 	ret

0080ee10 <_Balloc>:
  80ee10:	20c01317 	ldw	r3,76(r4)
  80ee14:	defffb04 	addi	sp,sp,-20
  80ee18:	dcc00315 	stw	r19,12(sp)
  80ee1c:	dc800215 	stw	r18,8(sp)
  80ee20:	dfc00415 	stw	ra,16(sp)
  80ee24:	2825883a 	mov	r18,r5
  80ee28:	dc400115 	stw	r17,4(sp)
  80ee2c:	dc000015 	stw	r16,0(sp)
  80ee30:	2027883a 	mov	r19,r4
  80ee34:	01800404 	movi	r6,16
  80ee38:	01400104 	movi	r5,4
  80ee3c:	18001726 	beq	r3,zero,80ee9c <_Balloc+0x8c>
  80ee40:	01400044 	movi	r5,1
  80ee44:	9485883a 	add	r2,r18,r18
  80ee48:	2ca2983a 	sll	r17,r5,r18
  80ee4c:	1085883a 	add	r2,r2,r2
  80ee50:	10c7883a 	add	r3,r2,r3
  80ee54:	1c000017 	ldw	r16,0(r3)
  80ee58:	8c4d883a 	add	r6,r17,r17
  80ee5c:	318d883a 	add	r6,r6,r6
  80ee60:	9809883a 	mov	r4,r19
  80ee64:	31800504 	addi	r6,r6,20
  80ee68:	80001226 	beq	r16,zero,80eeb4 <_Balloc+0xa4>
  80ee6c:	80800017 	ldw	r2,0(r16)
  80ee70:	18800015 	stw	r2,0(r3)
  80ee74:	80000415 	stw	zero,16(r16)
  80ee78:	80000315 	stw	zero,12(r16)
  80ee7c:	8005883a 	mov	r2,r16
  80ee80:	dfc00417 	ldw	ra,16(sp)
  80ee84:	dcc00317 	ldw	r19,12(sp)
  80ee88:	dc800217 	ldw	r18,8(sp)
  80ee8c:	dc400117 	ldw	r17,4(sp)
  80ee90:	dc000017 	ldw	r16,0(sp)
  80ee94:	dec00504 	addi	sp,sp,20
  80ee98:	f800283a 	ret
  80ee9c:	08101380 	call	810138 <_calloc_r>
  80eea0:	1007883a 	mov	r3,r2
  80eea4:	0021883a 	mov	r16,zero
  80eea8:	98801315 	stw	r2,76(r19)
  80eeac:	103fe41e 	bne	r2,zero,80ee40 <_Balloc+0x30>
  80eeb0:	003ff206 	br	80ee7c <_Balloc+0x6c>
  80eeb4:	08101380 	call	810138 <_calloc_r>
  80eeb8:	103ff026 	beq	r2,zero,80ee7c <_Balloc+0x6c>
  80eebc:	1021883a 	mov	r16,r2
  80eec0:	14800115 	stw	r18,4(r2)
  80eec4:	14400215 	stw	r17,8(r2)
  80eec8:	003fea06 	br	80ee74 <_Balloc+0x64>

0080eecc <__d2b>:
  80eecc:	defff504 	addi	sp,sp,-44
  80eed0:	dcc00515 	stw	r19,20(sp)
  80eed4:	04c00044 	movi	r19,1
  80eed8:	dc000215 	stw	r16,8(sp)
  80eedc:	2821883a 	mov	r16,r5
  80eee0:	980b883a 	mov	r5,r19
  80eee4:	ddc00915 	stw	r23,36(sp)
  80eee8:	dd800815 	stw	r22,32(sp)
  80eeec:	dd400715 	stw	r21,28(sp)
  80eef0:	dd000615 	stw	r20,24(sp)
  80eef4:	dc800415 	stw	r18,16(sp)
  80eef8:	dc400315 	stw	r17,12(sp)
  80eefc:	dfc00a15 	stw	ra,40(sp)
  80ef00:	3023883a 	mov	r17,r6
  80ef04:	382d883a 	mov	r22,r7
  80ef08:	ddc00b17 	ldw	r23,44(sp)
  80ef0c:	080ee100 	call	80ee10 <_Balloc>
  80ef10:	1025883a 	mov	r18,r2
  80ef14:	00a00034 	movhi	r2,32768
  80ef18:	10bfffc4 	addi	r2,r2,-1
  80ef1c:	8888703a 	and	r4,r17,r2
  80ef20:	202ad53a 	srli	r21,r4,20
  80ef24:	00800434 	movhi	r2,16
  80ef28:	10bfffc4 	addi	r2,r2,-1
  80ef2c:	8886703a 	and	r3,r17,r2
  80ef30:	a829003a 	cmpeq	r20,r21,zero
  80ef34:	800b883a 	mov	r5,r16
  80ef38:	d8c00115 	stw	r3,4(sp)
  80ef3c:	94000504 	addi	r16,r18,20
  80ef40:	a000021e 	bne	r20,zero,80ef4c <__d2b+0x80>
  80ef44:	18c00434 	orhi	r3,r3,16
  80ef48:	d8c00115 	stw	r3,4(sp)
  80ef4c:	28002726 	beq	r5,zero,80efec <__d2b+0x120>
  80ef50:	d809883a 	mov	r4,sp
  80ef54:	d9400015 	stw	r5,0(sp)
  80ef58:	080e9280 	call	80e928 <__lo0bits>
  80ef5c:	100d883a 	mov	r6,r2
  80ef60:	10003526 	beq	r2,zero,80f038 <__d2b+0x16c>
  80ef64:	d8c00117 	ldw	r3,4(sp)
  80ef68:	00800804 	movi	r2,32
  80ef6c:	1185c83a 	sub	r2,r2,r6
  80ef70:	d9000017 	ldw	r4,0(sp)
  80ef74:	1886983a 	sll	r3,r3,r2
  80ef78:	1906b03a 	or	r3,r3,r4
  80ef7c:	90c00515 	stw	r3,20(r18)
  80ef80:	d8c00117 	ldw	r3,4(sp)
  80ef84:	1986d83a 	srl	r3,r3,r6
  80ef88:	d8c00115 	stw	r3,4(sp)
  80ef8c:	180b003a 	cmpeq	r5,r3,zero
  80ef90:	00800084 	movi	r2,2
  80ef94:	114bc83a 	sub	r5,r2,r5
  80ef98:	80c00115 	stw	r3,4(r16)
  80ef9c:	91400415 	stw	r5,16(r18)
  80efa0:	a0001a1e 	bne	r20,zero,80f00c <__d2b+0x140>
  80efa4:	3545883a 	add	r2,r6,r21
  80efa8:	10bef344 	addi	r2,r2,-1075
  80efac:	00c00d44 	movi	r3,53
  80efb0:	b0800015 	stw	r2,0(r22)
  80efb4:	1987c83a 	sub	r3,r3,r6
  80efb8:	b8c00015 	stw	r3,0(r23)
  80efbc:	9005883a 	mov	r2,r18
  80efc0:	dfc00a17 	ldw	ra,40(sp)
  80efc4:	ddc00917 	ldw	r23,36(sp)
  80efc8:	dd800817 	ldw	r22,32(sp)
  80efcc:	dd400717 	ldw	r21,28(sp)
  80efd0:	dd000617 	ldw	r20,24(sp)
  80efd4:	dcc00517 	ldw	r19,20(sp)
  80efd8:	dc800417 	ldw	r18,16(sp)
  80efdc:	dc400317 	ldw	r17,12(sp)
  80efe0:	dc000217 	ldw	r16,8(sp)
  80efe4:	dec00b04 	addi	sp,sp,44
  80efe8:	f800283a 	ret
  80efec:	d9000104 	addi	r4,sp,4
  80eff0:	080e9280 	call	80e928 <__lo0bits>
  80eff4:	11800804 	addi	r6,r2,32
  80eff8:	d8800117 	ldw	r2,4(sp)
  80effc:	94c00415 	stw	r19,16(r18)
  80f000:	980b883a 	mov	r5,r19
  80f004:	90800515 	stw	r2,20(r18)
  80f008:	a03fe626 	beq	r20,zero,80efa4 <__d2b+0xd8>
  80f00c:	2945883a 	add	r2,r5,r5
  80f010:	1085883a 	add	r2,r2,r2
  80f014:	1405883a 	add	r2,r2,r16
  80f018:	113fff17 	ldw	r4,-4(r2)
  80f01c:	30fef384 	addi	r3,r6,-1074
  80f020:	2820917a 	slli	r16,r5,5
  80f024:	b0c00015 	stw	r3,0(r22)
  80f028:	080e8b80 	call	80e8b8 <__hi0bits>
  80f02c:	80a1c83a 	sub	r16,r16,r2
  80f030:	bc000015 	stw	r16,0(r23)
  80f034:	003fe106 	br	80efbc <__d2b+0xf0>
  80f038:	d8800017 	ldw	r2,0(sp)
  80f03c:	90800515 	stw	r2,20(r18)
  80f040:	d8c00117 	ldw	r3,4(sp)
  80f044:	003fd106 	br	80ef8c <__d2b+0xc0>

0080f048 <__mdiff>:
  80f048:	defffb04 	addi	sp,sp,-20
  80f04c:	dc000015 	stw	r16,0(sp)
  80f050:	2821883a 	mov	r16,r5
  80f054:	dc800215 	stw	r18,8(sp)
  80f058:	300b883a 	mov	r5,r6
  80f05c:	2025883a 	mov	r18,r4
  80f060:	8009883a 	mov	r4,r16
  80f064:	dc400115 	stw	r17,4(sp)
  80f068:	dfc00415 	stw	ra,16(sp)
  80f06c:	dcc00315 	stw	r19,12(sp)
  80f070:	3023883a 	mov	r17,r6
  80f074:	080e9ec0 	call	80e9ec <__mcmp>
  80f078:	10004226 	beq	r2,zero,80f184 <__mdiff+0x13c>
  80f07c:	10005016 	blt	r2,zero,80f1c0 <__mdiff+0x178>
  80f080:	0027883a 	mov	r19,zero
  80f084:	81400117 	ldw	r5,4(r16)
  80f088:	9009883a 	mov	r4,r18
  80f08c:	080ee100 	call	80ee10 <_Balloc>
  80f090:	1019883a 	mov	r12,r2
  80f094:	82800417 	ldw	r10,16(r16)
  80f098:	88800417 	ldw	r2,16(r17)
  80f09c:	81800504 	addi	r6,r16,20
  80f0a0:	5287883a 	add	r3,r10,r10
  80f0a4:	1085883a 	add	r2,r2,r2
  80f0a8:	18c7883a 	add	r3,r3,r3
  80f0ac:	1085883a 	add	r2,r2,r2
  80f0b0:	8a000504 	addi	r8,r17,20
  80f0b4:	64c00315 	stw	r19,12(r12)
  80f0b8:	30db883a 	add	r13,r6,r3
  80f0bc:	4097883a 	add	r11,r8,r2
  80f0c0:	61c00504 	addi	r7,r12,20
  80f0c4:	0013883a 	mov	r9,zero
  80f0c8:	31000017 	ldw	r4,0(r6)
  80f0cc:	41400017 	ldw	r5,0(r8)
  80f0d0:	42000104 	addi	r8,r8,4
  80f0d4:	20bfffcc 	andi	r2,r4,65535
  80f0d8:	28ffffcc 	andi	r3,r5,65535
  80f0dc:	10c5c83a 	sub	r2,r2,r3
  80f0e0:	1245883a 	add	r2,r2,r9
  80f0e4:	2008d43a 	srli	r4,r4,16
  80f0e8:	280ad43a 	srli	r5,r5,16
  80f0ec:	1007d43a 	srai	r3,r2,16
  80f0f0:	3880000d 	sth	r2,0(r7)
  80f0f4:	2149c83a 	sub	r4,r4,r5
  80f0f8:	20c9883a 	add	r4,r4,r3
  80f0fc:	3900008d 	sth	r4,2(r7)
  80f100:	31800104 	addi	r6,r6,4
  80f104:	39c00104 	addi	r7,r7,4
  80f108:	2013d43a 	srai	r9,r4,16
  80f10c:	42ffee36 	bltu	r8,r11,80f0c8 <__mdiff+0x80>
  80f110:	33400c2e 	bgeu	r6,r13,80f144 <__mdiff+0xfc>
  80f114:	30800017 	ldw	r2,0(r6)
  80f118:	31800104 	addi	r6,r6,4
  80f11c:	10ffffcc 	andi	r3,r2,65535
  80f120:	1a47883a 	add	r3,r3,r9
  80f124:	1004d43a 	srli	r2,r2,16
  80f128:	1809d43a 	srai	r4,r3,16
  80f12c:	38c0000d 	sth	r3,0(r7)
  80f130:	1105883a 	add	r2,r2,r4
  80f134:	3880008d 	sth	r2,2(r7)
  80f138:	1013d43a 	srai	r9,r2,16
  80f13c:	39c00104 	addi	r7,r7,4
  80f140:	337ff436 	bltu	r6,r13,80f114 <__mdiff+0xcc>
  80f144:	38bfff17 	ldw	r2,-4(r7)
  80f148:	38ffff04 	addi	r3,r7,-4
  80f14c:	1000041e 	bne	r2,zero,80f160 <__mdiff+0x118>
  80f150:	18ffff04 	addi	r3,r3,-4
  80f154:	18800017 	ldw	r2,0(r3)
  80f158:	52bfffc4 	addi	r10,r10,-1
  80f15c:	103ffc26 	beq	r2,zero,80f150 <__mdiff+0x108>
  80f160:	6005883a 	mov	r2,r12
  80f164:	62800415 	stw	r10,16(r12)
  80f168:	dfc00417 	ldw	ra,16(sp)
  80f16c:	dcc00317 	ldw	r19,12(sp)
  80f170:	dc800217 	ldw	r18,8(sp)
  80f174:	dc400117 	ldw	r17,4(sp)
  80f178:	dc000017 	ldw	r16,0(sp)
  80f17c:	dec00504 	addi	sp,sp,20
  80f180:	f800283a 	ret
  80f184:	9009883a 	mov	r4,r18
  80f188:	000b883a 	mov	r5,zero
  80f18c:	080ee100 	call	80ee10 <_Balloc>
  80f190:	1019883a 	mov	r12,r2
  80f194:	00800044 	movi	r2,1
  80f198:	60800415 	stw	r2,16(r12)
  80f19c:	6005883a 	mov	r2,r12
  80f1a0:	60000515 	stw	zero,20(r12)
  80f1a4:	dfc00417 	ldw	ra,16(sp)
  80f1a8:	dcc00317 	ldw	r19,12(sp)
  80f1ac:	dc800217 	ldw	r18,8(sp)
  80f1b0:	dc400117 	ldw	r17,4(sp)
  80f1b4:	dc000017 	ldw	r16,0(sp)
  80f1b8:	dec00504 	addi	sp,sp,20
  80f1bc:	f800283a 	ret
  80f1c0:	880d883a 	mov	r6,r17
  80f1c4:	04c00044 	movi	r19,1
  80f1c8:	8023883a 	mov	r17,r16
  80f1cc:	3021883a 	mov	r16,r6
  80f1d0:	003fac06 	br	80f084 <__mdiff+0x3c>

0080f1d4 <__lshift>:
  80f1d4:	defff904 	addi	sp,sp,-28
  80f1d8:	28800417 	ldw	r2,16(r5)
  80f1dc:	dc000015 	stw	r16,0(sp)
  80f1e0:	3021d17a 	srai	r16,r6,5
  80f1e4:	28c00217 	ldw	r3,8(r5)
  80f1e8:	10800044 	addi	r2,r2,1
  80f1ec:	dc400115 	stw	r17,4(sp)
  80f1f0:	80a3883a 	add	r17,r16,r2
  80f1f4:	dd400515 	stw	r21,20(sp)
  80f1f8:	dd000415 	stw	r20,16(sp)
  80f1fc:	dc800215 	stw	r18,8(sp)
  80f200:	dfc00615 	stw	ra,24(sp)
  80f204:	2825883a 	mov	r18,r5
  80f208:	dcc00315 	stw	r19,12(sp)
  80f20c:	3029883a 	mov	r20,r6
  80f210:	202b883a 	mov	r21,r4
  80f214:	29400117 	ldw	r5,4(r5)
  80f218:	1c40030e 	bge	r3,r17,80f228 <__lshift+0x54>
  80f21c:	18c7883a 	add	r3,r3,r3
  80f220:	29400044 	addi	r5,r5,1
  80f224:	1c7ffd16 	blt	r3,r17,80f21c <__lshift+0x48>
  80f228:	a809883a 	mov	r4,r21
  80f22c:	080ee100 	call	80ee10 <_Balloc>
  80f230:	1027883a 	mov	r19,r2
  80f234:	11400504 	addi	r5,r2,20
  80f238:	0400090e 	bge	zero,r16,80f260 <__lshift+0x8c>
  80f23c:	2805883a 	mov	r2,r5
  80f240:	0007883a 	mov	r3,zero
  80f244:	18c00044 	addi	r3,r3,1
  80f248:	10000015 	stw	zero,0(r2)
  80f24c:	10800104 	addi	r2,r2,4
  80f250:	80fffc1e 	bne	r16,r3,80f244 <__lshift+0x70>
  80f254:	8405883a 	add	r2,r16,r16
  80f258:	1085883a 	add	r2,r2,r2
  80f25c:	288b883a 	add	r5,r5,r2
  80f260:	90800417 	ldw	r2,16(r18)
  80f264:	91000504 	addi	r4,r18,20
  80f268:	a18007cc 	andi	r6,r20,31
  80f26c:	1085883a 	add	r2,r2,r2
  80f270:	1085883a 	add	r2,r2,r2
  80f274:	208f883a 	add	r7,r4,r2
  80f278:	30001e26 	beq	r6,zero,80f2f4 <__lshift+0x120>
  80f27c:	00800804 	movi	r2,32
  80f280:	1191c83a 	sub	r8,r2,r6
  80f284:	0007883a 	mov	r3,zero
  80f288:	20800017 	ldw	r2,0(r4)
  80f28c:	1184983a 	sll	r2,r2,r6
  80f290:	1884b03a 	or	r2,r3,r2
  80f294:	28800015 	stw	r2,0(r5)
  80f298:	20c00017 	ldw	r3,0(r4)
  80f29c:	21000104 	addi	r4,r4,4
  80f2a0:	29400104 	addi	r5,r5,4
  80f2a4:	1a06d83a 	srl	r3,r3,r8
  80f2a8:	21fff736 	bltu	r4,r7,80f288 <__lshift+0xb4>
  80f2ac:	28c00015 	stw	r3,0(r5)
  80f2b0:	18000126 	beq	r3,zero,80f2b8 <__lshift+0xe4>
  80f2b4:	8c400044 	addi	r17,r17,1
  80f2b8:	88bfffc4 	addi	r2,r17,-1
  80f2bc:	98800415 	stw	r2,16(r19)
  80f2c0:	a809883a 	mov	r4,r21
  80f2c4:	900b883a 	mov	r5,r18
  80f2c8:	080e8900 	call	80e890 <_Bfree>
  80f2cc:	9805883a 	mov	r2,r19
  80f2d0:	dfc00617 	ldw	ra,24(sp)
  80f2d4:	dd400517 	ldw	r21,20(sp)
  80f2d8:	dd000417 	ldw	r20,16(sp)
  80f2dc:	dcc00317 	ldw	r19,12(sp)
  80f2e0:	dc800217 	ldw	r18,8(sp)
  80f2e4:	dc400117 	ldw	r17,4(sp)
  80f2e8:	dc000017 	ldw	r16,0(sp)
  80f2ec:	dec00704 	addi	sp,sp,28
  80f2f0:	f800283a 	ret
  80f2f4:	20800017 	ldw	r2,0(r4)
  80f2f8:	21000104 	addi	r4,r4,4
  80f2fc:	28800015 	stw	r2,0(r5)
  80f300:	29400104 	addi	r5,r5,4
  80f304:	21ffec2e 	bgeu	r4,r7,80f2b8 <__lshift+0xe4>
  80f308:	20800017 	ldw	r2,0(r4)
  80f30c:	21000104 	addi	r4,r4,4
  80f310:	28800015 	stw	r2,0(r5)
  80f314:	29400104 	addi	r5,r5,4
  80f318:	21fff636 	bltu	r4,r7,80f2f4 <__lshift+0x120>
  80f31c:	003fe606 	br	80f2b8 <__lshift+0xe4>

0080f320 <__multiply>:
  80f320:	defff904 	addi	sp,sp,-28
  80f324:	dcc00315 	stw	r19,12(sp)
  80f328:	dc800215 	stw	r18,8(sp)
  80f32c:	2cc00417 	ldw	r19,16(r5)
  80f330:	34800417 	ldw	r18,16(r6)
  80f334:	dd000415 	stw	r20,16(sp)
  80f338:	dc400115 	stw	r17,4(sp)
  80f33c:	dfc00615 	stw	ra,24(sp)
  80f340:	dd400515 	stw	r21,20(sp)
  80f344:	dc000015 	stw	r16,0(sp)
  80f348:	2823883a 	mov	r17,r5
  80f34c:	3029883a 	mov	r20,r6
  80f350:	9c80040e 	bge	r19,r18,80f364 <__multiply+0x44>
  80f354:	9027883a 	mov	r19,r18
  80f358:	2c800417 	ldw	r18,16(r5)
  80f35c:	2829883a 	mov	r20,r5
  80f360:	3023883a 	mov	r17,r6
  80f364:	88800217 	ldw	r2,8(r17)
  80f368:	9ca1883a 	add	r16,r19,r18
  80f36c:	89400117 	ldw	r5,4(r17)
  80f370:	1400010e 	bge	r2,r16,80f378 <__multiply+0x58>
  80f374:	29400044 	addi	r5,r5,1
  80f378:	080ee100 	call	80ee10 <_Balloc>
  80f37c:	102b883a 	mov	r21,r2
  80f380:	8405883a 	add	r2,r16,r16
  80f384:	1085883a 	add	r2,r2,r2
  80f388:	a9000504 	addi	r4,r21,20
  80f38c:	209d883a 	add	r14,r4,r2
  80f390:	2380042e 	bgeu	r4,r14,80f3a4 <__multiply+0x84>
  80f394:	2005883a 	mov	r2,r4
  80f398:	10000015 	stw	zero,0(r2)
  80f39c:	10800104 	addi	r2,r2,4
  80f3a0:	13bffd36 	bltu	r2,r14,80f398 <__multiply+0x78>
  80f3a4:	9485883a 	add	r2,r18,r18
  80f3a8:	9cc7883a 	add	r3,r19,r19
  80f3ac:	a1800504 	addi	r6,r20,20
  80f3b0:	1085883a 	add	r2,r2,r2
  80f3b4:	8b400504 	addi	r13,r17,20
  80f3b8:	18c7883a 	add	r3,r3,r3
  80f3bc:	309f883a 	add	r15,r6,r2
  80f3c0:	68d7883a 	add	r11,r13,r3
  80f3c4:	33c03b2e 	bgeu	r6,r15,80f4b4 <__multiply+0x194>
  80f3c8:	2019883a 	mov	r12,r4
  80f3cc:	30800017 	ldw	r2,0(r6)
  80f3d0:	127fffcc 	andi	r9,r2,65535
  80f3d4:	48001826 	beq	r9,zero,80f438 <__multiply+0x118>
  80f3d8:	6811883a 	mov	r8,r13
  80f3dc:	600f883a 	mov	r7,r12
  80f3e0:	0015883a 	mov	r10,zero
  80f3e4:	40c00017 	ldw	r3,0(r8)
  80f3e8:	39400017 	ldw	r5,0(r7)
  80f3ec:	42000104 	addi	r8,r8,4
  80f3f0:	193fffcc 	andi	r4,r3,65535
  80f3f4:	4909383a 	mul	r4,r9,r4
  80f3f8:	1806d43a 	srli	r3,r3,16
  80f3fc:	28bfffcc 	andi	r2,r5,65535
  80f400:	5085883a 	add	r2,r10,r2
  80f404:	2089883a 	add	r4,r4,r2
  80f408:	48c7383a 	mul	r3,r9,r3
  80f40c:	280ad43a 	srli	r5,r5,16
  80f410:	2004d43a 	srli	r2,r4,16
  80f414:	3900000d 	sth	r4,0(r7)
  80f418:	1947883a 	add	r3,r3,r5
  80f41c:	10c5883a 	add	r2,r2,r3
  80f420:	3880008d 	sth	r2,2(r7)
  80f424:	1014d43a 	srli	r10,r2,16
  80f428:	39c00104 	addi	r7,r7,4
  80f42c:	42ffed36 	bltu	r8,r11,80f3e4 <__multiply+0xc4>
  80f430:	3a800015 	stw	r10,0(r7)
  80f434:	30800017 	ldw	r2,0(r6)
  80f438:	1012d43a 	srli	r9,r2,16
  80f43c:	48001926 	beq	r9,zero,80f4a4 <__multiply+0x184>
  80f440:	60800017 	ldw	r2,0(r12)
  80f444:	6811883a 	mov	r8,r13
  80f448:	600f883a 	mov	r7,r12
  80f44c:	0015883a 	mov	r10,zero
  80f450:	100b883a 	mov	r5,r2
  80f454:	41000017 	ldw	r4,0(r8)
  80f458:	2806d43a 	srli	r3,r5,16
  80f45c:	3880000d 	sth	r2,0(r7)
  80f460:	20bfffcc 	andi	r2,r4,65535
  80f464:	4885383a 	mul	r2,r9,r2
  80f468:	50c7883a 	add	r3,r10,r3
  80f46c:	2008d43a 	srli	r4,r4,16
  80f470:	10c5883a 	add	r2,r2,r3
  80f474:	3880008d 	sth	r2,2(r7)
  80f478:	39c00104 	addi	r7,r7,4
  80f47c:	39400017 	ldw	r5,0(r7)
  80f480:	4909383a 	mul	r4,r9,r4
  80f484:	1004d43a 	srli	r2,r2,16
  80f488:	28ffffcc 	andi	r3,r5,65535
  80f48c:	20c9883a 	add	r4,r4,r3
  80f490:	1105883a 	add	r2,r2,r4
  80f494:	42000104 	addi	r8,r8,4
  80f498:	1014d43a 	srli	r10,r2,16
  80f49c:	42ffed36 	bltu	r8,r11,80f454 <__multiply+0x134>
  80f4a0:	38800015 	stw	r2,0(r7)
  80f4a4:	31800104 	addi	r6,r6,4
  80f4a8:	33c0022e 	bgeu	r6,r15,80f4b4 <__multiply+0x194>
  80f4ac:	63000104 	addi	r12,r12,4
  80f4b0:	003fc606 	br	80f3cc <__multiply+0xac>
  80f4b4:	0400090e 	bge	zero,r16,80f4dc <__multiply+0x1bc>
  80f4b8:	70bfff17 	ldw	r2,-4(r14)
  80f4bc:	70ffff04 	addi	r3,r14,-4
  80f4c0:	10000326 	beq	r2,zero,80f4d0 <__multiply+0x1b0>
  80f4c4:	00000506 	br	80f4dc <__multiply+0x1bc>
  80f4c8:	18800017 	ldw	r2,0(r3)
  80f4cc:	1000031e 	bne	r2,zero,80f4dc <__multiply+0x1bc>
  80f4d0:	843fffc4 	addi	r16,r16,-1
  80f4d4:	18ffff04 	addi	r3,r3,-4
  80f4d8:	803ffb1e 	bne	r16,zero,80f4c8 <__multiply+0x1a8>
  80f4dc:	a805883a 	mov	r2,r21
  80f4e0:	ac000415 	stw	r16,16(r21)
  80f4e4:	dfc00617 	ldw	ra,24(sp)
  80f4e8:	dd400517 	ldw	r21,20(sp)
  80f4ec:	dd000417 	ldw	r20,16(sp)
  80f4f0:	dcc00317 	ldw	r19,12(sp)
  80f4f4:	dc800217 	ldw	r18,8(sp)
  80f4f8:	dc400117 	ldw	r17,4(sp)
  80f4fc:	dc000017 	ldw	r16,0(sp)
  80f500:	dec00704 	addi	sp,sp,28
  80f504:	f800283a 	ret

0080f508 <__i2b>:
  80f508:	defffd04 	addi	sp,sp,-12
  80f50c:	dc000015 	stw	r16,0(sp)
  80f510:	04000044 	movi	r16,1
  80f514:	dc800115 	stw	r18,4(sp)
  80f518:	2825883a 	mov	r18,r5
  80f51c:	800b883a 	mov	r5,r16
  80f520:	dfc00215 	stw	ra,8(sp)
  80f524:	080ee100 	call	80ee10 <_Balloc>
  80f528:	14000415 	stw	r16,16(r2)
  80f52c:	14800515 	stw	r18,20(r2)
  80f530:	dfc00217 	ldw	ra,8(sp)
  80f534:	dc800117 	ldw	r18,4(sp)
  80f538:	dc000017 	ldw	r16,0(sp)
  80f53c:	dec00304 	addi	sp,sp,12
  80f540:	f800283a 	ret

0080f544 <__multadd>:
  80f544:	defffa04 	addi	sp,sp,-24
  80f548:	dc800215 	stw	r18,8(sp)
  80f54c:	2c800417 	ldw	r18,16(r5)
  80f550:	dd000415 	stw	r20,16(sp)
  80f554:	dcc00315 	stw	r19,12(sp)
  80f558:	dc000015 	stw	r16,0(sp)
  80f55c:	dfc00515 	stw	ra,20(sp)
  80f560:	3821883a 	mov	r16,r7
  80f564:	dc400115 	stw	r17,4(sp)
  80f568:	2827883a 	mov	r19,r5
  80f56c:	2029883a 	mov	r20,r4
  80f570:	2a000504 	addi	r8,r5,20
  80f574:	000f883a 	mov	r7,zero
  80f578:	40800017 	ldw	r2,0(r8)
  80f57c:	39c00044 	addi	r7,r7,1
  80f580:	10ffffcc 	andi	r3,r2,65535
  80f584:	1987383a 	mul	r3,r3,r6
  80f588:	1004d43a 	srli	r2,r2,16
  80f58c:	1c07883a 	add	r3,r3,r16
  80f590:	180ad43a 	srli	r5,r3,16
  80f594:	1185383a 	mul	r2,r2,r6
  80f598:	18ffffcc 	andi	r3,r3,65535
  80f59c:	1145883a 	add	r2,r2,r5
  80f5a0:	1008943a 	slli	r4,r2,16
  80f5a4:	1020d43a 	srli	r16,r2,16
  80f5a8:	20c9883a 	add	r4,r4,r3
  80f5ac:	41000015 	stw	r4,0(r8)
  80f5b0:	42000104 	addi	r8,r8,4
  80f5b4:	3cbff016 	blt	r7,r18,80f578 <__multadd+0x34>
  80f5b8:	80000826 	beq	r16,zero,80f5dc <__multadd+0x98>
  80f5bc:	98800217 	ldw	r2,8(r19)
  80f5c0:	90800f0e 	bge	r18,r2,80f600 <__multadd+0xbc>
  80f5c4:	9485883a 	add	r2,r18,r18
  80f5c8:	1085883a 	add	r2,r2,r2
  80f5cc:	14c5883a 	add	r2,r2,r19
  80f5d0:	90c00044 	addi	r3,r18,1
  80f5d4:	14000515 	stw	r16,20(r2)
  80f5d8:	98c00415 	stw	r3,16(r19)
  80f5dc:	9805883a 	mov	r2,r19
  80f5e0:	dfc00517 	ldw	ra,20(sp)
  80f5e4:	dd000417 	ldw	r20,16(sp)
  80f5e8:	dcc00317 	ldw	r19,12(sp)
  80f5ec:	dc800217 	ldw	r18,8(sp)
  80f5f0:	dc400117 	ldw	r17,4(sp)
  80f5f4:	dc000017 	ldw	r16,0(sp)
  80f5f8:	dec00604 	addi	sp,sp,24
  80f5fc:	f800283a 	ret
  80f600:	99400117 	ldw	r5,4(r19)
  80f604:	a009883a 	mov	r4,r20
  80f608:	29400044 	addi	r5,r5,1
  80f60c:	080ee100 	call	80ee10 <_Balloc>
  80f610:	99800417 	ldw	r6,16(r19)
  80f614:	99400304 	addi	r5,r19,12
  80f618:	11000304 	addi	r4,r2,12
  80f61c:	318d883a 	add	r6,r6,r6
  80f620:	318d883a 	add	r6,r6,r6
  80f624:	31800204 	addi	r6,r6,8
  80f628:	1023883a 	mov	r17,r2
  80f62c:	080e6780 	call	80e678 <memcpy>
  80f630:	980b883a 	mov	r5,r19
  80f634:	a009883a 	mov	r4,r20
  80f638:	080e8900 	call	80e890 <_Bfree>
  80f63c:	8827883a 	mov	r19,r17
  80f640:	003fe006 	br	80f5c4 <__multadd+0x80>

0080f644 <__pow5mult>:
  80f644:	defffa04 	addi	sp,sp,-24
  80f648:	308000cc 	andi	r2,r6,3
  80f64c:	dd000415 	stw	r20,16(sp)
  80f650:	dcc00315 	stw	r19,12(sp)
  80f654:	dc000015 	stw	r16,0(sp)
  80f658:	dfc00515 	stw	ra,20(sp)
  80f65c:	dc800215 	stw	r18,8(sp)
  80f660:	dc400115 	stw	r17,4(sp)
  80f664:	3021883a 	mov	r16,r6
  80f668:	2027883a 	mov	r19,r4
  80f66c:	2829883a 	mov	r20,r5
  80f670:	10002b1e 	bne	r2,zero,80f720 <__pow5mult+0xdc>
  80f674:	8025d0ba 	srai	r18,r16,2
  80f678:	90001b26 	beq	r18,zero,80f6e8 <__pow5mult+0xa4>
  80f67c:	9c001217 	ldw	r16,72(r19)
  80f680:	8000081e 	bne	r16,zero,80f6a4 <__pow5mult+0x60>
  80f684:	00003006 	br	80f748 <__pow5mult+0x104>
  80f688:	800b883a 	mov	r5,r16
  80f68c:	800d883a 	mov	r6,r16
  80f690:	9809883a 	mov	r4,r19
  80f694:	90001426 	beq	r18,zero,80f6e8 <__pow5mult+0xa4>
  80f698:	80800017 	ldw	r2,0(r16)
  80f69c:	10001b26 	beq	r2,zero,80f70c <__pow5mult+0xc8>
  80f6a0:	1021883a 	mov	r16,r2
  80f6a4:	9080004c 	andi	r2,r18,1
  80f6a8:	1005003a 	cmpeq	r2,r2,zero
  80f6ac:	9025d07a 	srai	r18,r18,1
  80f6b0:	800d883a 	mov	r6,r16
  80f6b4:	9809883a 	mov	r4,r19
  80f6b8:	a00b883a 	mov	r5,r20
  80f6bc:	103ff21e 	bne	r2,zero,80f688 <__pow5mult+0x44>
  80f6c0:	080f3200 	call	80f320 <__multiply>
  80f6c4:	a00b883a 	mov	r5,r20
  80f6c8:	9809883a 	mov	r4,r19
  80f6cc:	1023883a 	mov	r17,r2
  80f6d0:	080e8900 	call	80e890 <_Bfree>
  80f6d4:	8829883a 	mov	r20,r17
  80f6d8:	800b883a 	mov	r5,r16
  80f6dc:	800d883a 	mov	r6,r16
  80f6e0:	9809883a 	mov	r4,r19
  80f6e4:	903fec1e 	bne	r18,zero,80f698 <__pow5mult+0x54>
  80f6e8:	a005883a 	mov	r2,r20
  80f6ec:	dfc00517 	ldw	ra,20(sp)
  80f6f0:	dd000417 	ldw	r20,16(sp)
  80f6f4:	dcc00317 	ldw	r19,12(sp)
  80f6f8:	dc800217 	ldw	r18,8(sp)
  80f6fc:	dc400117 	ldw	r17,4(sp)
  80f700:	dc000017 	ldw	r16,0(sp)
  80f704:	dec00604 	addi	sp,sp,24
  80f708:	f800283a 	ret
  80f70c:	080f3200 	call	80f320 <__multiply>
  80f710:	80800015 	stw	r2,0(r16)
  80f714:	1021883a 	mov	r16,r2
  80f718:	10000015 	stw	zero,0(r2)
  80f71c:	003fe106 	br	80f6a4 <__pow5mult+0x60>
  80f720:	1085883a 	add	r2,r2,r2
  80f724:	00c020b4 	movhi	r3,130
  80f728:	18f11404 	addi	r3,r3,-15280
  80f72c:	1085883a 	add	r2,r2,r2
  80f730:	10c5883a 	add	r2,r2,r3
  80f734:	11bfff17 	ldw	r6,-4(r2)
  80f738:	000f883a 	mov	r7,zero
  80f73c:	080f5440 	call	80f544 <__multadd>
  80f740:	1029883a 	mov	r20,r2
  80f744:	003fcb06 	br	80f674 <__pow5mult+0x30>
  80f748:	9809883a 	mov	r4,r19
  80f74c:	01409c44 	movi	r5,625
  80f750:	080f5080 	call	80f508 <__i2b>
  80f754:	98801215 	stw	r2,72(r19)
  80f758:	1021883a 	mov	r16,r2
  80f75c:	10000015 	stw	zero,0(r2)
  80f760:	003fd006 	br	80f6a4 <__pow5mult+0x60>

0080f764 <__s2b>:
  80f764:	defff904 	addi	sp,sp,-28
  80f768:	dcc00315 	stw	r19,12(sp)
  80f76c:	dc800215 	stw	r18,8(sp)
  80f770:	2827883a 	mov	r19,r5
  80f774:	2025883a 	mov	r18,r4
  80f778:	01400244 	movi	r5,9
  80f77c:	39000204 	addi	r4,r7,8
  80f780:	dd000415 	stw	r20,16(sp)
  80f784:	dc400115 	stw	r17,4(sp)
  80f788:	dfc00615 	stw	ra,24(sp)
  80f78c:	dd400515 	stw	r21,20(sp)
  80f790:	dc000015 	stw	r16,0(sp)
  80f794:	3829883a 	mov	r20,r7
  80f798:	3023883a 	mov	r17,r6
  80f79c:	08087b00 	call	8087b0 <__divsi3>
  80f7a0:	00c00044 	movi	r3,1
  80f7a4:	1880350e 	bge	r3,r2,80f87c <__s2b+0x118>
  80f7a8:	000b883a 	mov	r5,zero
  80f7ac:	18c7883a 	add	r3,r3,r3
  80f7b0:	29400044 	addi	r5,r5,1
  80f7b4:	18bffd16 	blt	r3,r2,80f7ac <__s2b+0x48>
  80f7b8:	9009883a 	mov	r4,r18
  80f7bc:	080ee100 	call	80ee10 <_Balloc>
  80f7c0:	1011883a 	mov	r8,r2
  80f7c4:	d8800717 	ldw	r2,28(sp)
  80f7c8:	00c00044 	movi	r3,1
  80f7cc:	01800244 	movi	r6,9
  80f7d0:	40800515 	stw	r2,20(r8)
  80f7d4:	40c00415 	stw	r3,16(r8)
  80f7d8:	3440260e 	bge	r6,r17,80f874 <__s2b+0x110>
  80f7dc:	3021883a 	mov	r16,r6
  80f7e0:	99ab883a 	add	r21,r19,r6
  80f7e4:	9c05883a 	add	r2,r19,r16
  80f7e8:	11c00007 	ldb	r7,0(r2)
  80f7ec:	400b883a 	mov	r5,r8
  80f7f0:	9009883a 	mov	r4,r18
  80f7f4:	39fff404 	addi	r7,r7,-48
  80f7f8:	01800284 	movi	r6,10
  80f7fc:	080f5440 	call	80f544 <__multadd>
  80f800:	84000044 	addi	r16,r16,1
  80f804:	1011883a 	mov	r8,r2
  80f808:	8c3ff61e 	bne	r17,r16,80f7e4 <__s2b+0x80>
  80f80c:	ac45883a 	add	r2,r21,r17
  80f810:	117ffe04 	addi	r5,r2,-8
  80f814:	880d883a 	mov	r6,r17
  80f818:	35000c0e 	bge	r6,r20,80f84c <__s2b+0xe8>
  80f81c:	a185c83a 	sub	r2,r20,r6
  80f820:	2821883a 	mov	r16,r5
  80f824:	28a3883a 	add	r17,r5,r2
  80f828:	81c00007 	ldb	r7,0(r16)
  80f82c:	400b883a 	mov	r5,r8
  80f830:	9009883a 	mov	r4,r18
  80f834:	39fff404 	addi	r7,r7,-48
  80f838:	01800284 	movi	r6,10
  80f83c:	080f5440 	call	80f544 <__multadd>
  80f840:	84000044 	addi	r16,r16,1
  80f844:	1011883a 	mov	r8,r2
  80f848:	847ff71e 	bne	r16,r17,80f828 <__s2b+0xc4>
  80f84c:	4005883a 	mov	r2,r8
  80f850:	dfc00617 	ldw	ra,24(sp)
  80f854:	dd400517 	ldw	r21,20(sp)
  80f858:	dd000417 	ldw	r20,16(sp)
  80f85c:	dcc00317 	ldw	r19,12(sp)
  80f860:	dc800217 	ldw	r18,8(sp)
  80f864:	dc400117 	ldw	r17,4(sp)
  80f868:	dc000017 	ldw	r16,0(sp)
  80f86c:	dec00704 	addi	sp,sp,28
  80f870:	f800283a 	ret
  80f874:	99400284 	addi	r5,r19,10
  80f878:	003fe706 	br	80f818 <__s2b+0xb4>
  80f87c:	000b883a 	mov	r5,zero
  80f880:	003fcd06 	br	80f7b8 <__s2b+0x54>

0080f884 <_realloc_r>:
  80f884:	defff404 	addi	sp,sp,-48
  80f888:	dd800815 	stw	r22,32(sp)
  80f88c:	dc800415 	stw	r18,16(sp)
  80f890:	dc400315 	stw	r17,12(sp)
  80f894:	dfc00b15 	stw	ra,44(sp)
  80f898:	df000a15 	stw	fp,40(sp)
  80f89c:	ddc00915 	stw	r23,36(sp)
  80f8a0:	dd400715 	stw	r21,28(sp)
  80f8a4:	dd000615 	stw	r20,24(sp)
  80f8a8:	dcc00515 	stw	r19,20(sp)
  80f8ac:	dc000215 	stw	r16,8(sp)
  80f8b0:	2825883a 	mov	r18,r5
  80f8b4:	3023883a 	mov	r17,r6
  80f8b8:	202d883a 	mov	r22,r4
  80f8bc:	2800c926 	beq	r5,zero,80fbe4 <_realloc_r+0x360>
  80f8c0:	0811d5c0 	call	811d5c <__malloc_lock>
  80f8c4:	943ffe04 	addi	r16,r18,-8
  80f8c8:	88c002c4 	addi	r3,r17,11
  80f8cc:	00800584 	movi	r2,22
  80f8d0:	82000117 	ldw	r8,4(r16)
  80f8d4:	10c01b2e 	bgeu	r2,r3,80f944 <_realloc_r+0xc0>
  80f8d8:	00bffe04 	movi	r2,-8
  80f8dc:	188e703a 	and	r7,r3,r2
  80f8e0:	3839883a 	mov	fp,r7
  80f8e4:	38001a16 	blt	r7,zero,80f950 <_realloc_r+0xcc>
  80f8e8:	e4401936 	bltu	fp,r17,80f950 <_realloc_r+0xcc>
  80f8ec:	013fff04 	movi	r4,-4
  80f8f0:	4126703a 	and	r19,r8,r4
  80f8f4:	99c02616 	blt	r19,r7,80f990 <_realloc_r+0x10c>
  80f8f8:	802b883a 	mov	r21,r16
  80f8fc:	9829883a 	mov	r20,r19
  80f900:	84000204 	addi	r16,r16,8
  80f904:	a80f883a 	mov	r7,r21
  80f908:	a70dc83a 	sub	r6,r20,fp
  80f90c:	008003c4 	movi	r2,15
  80f910:	1180c136 	bltu	r2,r6,80fc18 <_realloc_r+0x394>
  80f914:	38800117 	ldw	r2,4(r7)
  80f918:	a549883a 	add	r4,r20,r21
  80f91c:	1080004c 	andi	r2,r2,1
  80f920:	a084b03a 	or	r2,r20,r2
  80f924:	38800115 	stw	r2,4(r7)
  80f928:	20c00117 	ldw	r3,4(r4)
  80f92c:	18c00054 	ori	r3,r3,1
  80f930:	20c00115 	stw	r3,4(r4)
  80f934:	b009883a 	mov	r4,r22
  80f938:	0811d7c0 	call	811d7c <__malloc_unlock>
  80f93c:	8023883a 	mov	r17,r16
  80f940:	00000606 	br	80f95c <_realloc_r+0xd8>
  80f944:	01c00404 	movi	r7,16
  80f948:	3839883a 	mov	fp,r7
  80f94c:	e47fe72e 	bgeu	fp,r17,80f8ec <_realloc_r+0x68>
  80f950:	00800304 	movi	r2,12
  80f954:	0023883a 	mov	r17,zero
  80f958:	b0800015 	stw	r2,0(r22)
  80f95c:	8805883a 	mov	r2,r17
  80f960:	dfc00b17 	ldw	ra,44(sp)
  80f964:	df000a17 	ldw	fp,40(sp)
  80f968:	ddc00917 	ldw	r23,36(sp)
  80f96c:	dd800817 	ldw	r22,32(sp)
  80f970:	dd400717 	ldw	r21,28(sp)
  80f974:	dd000617 	ldw	r20,24(sp)
  80f978:	dcc00517 	ldw	r19,20(sp)
  80f97c:	dc800417 	ldw	r18,16(sp)
  80f980:	dc400317 	ldw	r17,12(sp)
  80f984:	dc000217 	ldw	r16,8(sp)
  80f988:	dec00c04 	addi	sp,sp,48
  80f98c:	f800283a 	ret
  80f990:	008020b4 	movhi	r2,130
  80f994:	10b25904 	addi	r2,r2,-13980
  80f998:	12400217 	ldw	r9,8(r2)
  80f99c:	84cd883a 	add	r6,r16,r19
  80f9a0:	802b883a 	mov	r21,r16
  80f9a4:	3240b926 	beq	r6,r9,80fc8c <_realloc_r+0x408>
  80f9a8:	31400117 	ldw	r5,4(r6)
  80f9ac:	00bfff84 	movi	r2,-2
  80f9b0:	2884703a 	and	r2,r5,r2
  80f9b4:	1185883a 	add	r2,r2,r6
  80f9b8:	10c00117 	ldw	r3,4(r2)
  80f9bc:	18c0004c 	andi	r3,r3,1
  80f9c0:	1807003a 	cmpeq	r3,r3,zero
  80f9c4:	1800a326 	beq	r3,zero,80fc54 <_realloc_r+0x3d0>
  80f9c8:	2908703a 	and	r4,r5,r4
  80f9cc:	9929883a 	add	r20,r19,r4
  80f9d0:	a1c0a30e 	bge	r20,r7,80fc60 <_realloc_r+0x3dc>
  80f9d4:	4080004c 	andi	r2,r8,1
  80f9d8:	1000551e 	bne	r2,zero,80fb30 <_realloc_r+0x2ac>
  80f9dc:	80800017 	ldw	r2,0(r16)
  80f9e0:	80afc83a 	sub	r23,r16,r2
  80f9e4:	b8c00117 	ldw	r3,4(r23)
  80f9e8:	00bfff04 	movi	r2,-4
  80f9ec:	1884703a 	and	r2,r3,r2
  80f9f0:	30002e26 	beq	r6,zero,80faac <_realloc_r+0x228>
  80f9f4:	3240b926 	beq	r6,r9,80fcdc <_realloc_r+0x458>
  80f9f8:	98a9883a 	add	r20,r19,r2
  80f9fc:	2509883a 	add	r4,r4,r20
  80fa00:	d9000015 	stw	r4,0(sp)
  80fa04:	21c02a16 	blt	r4,r7,80fab0 <_realloc_r+0x22c>
  80fa08:	30800317 	ldw	r2,12(r6)
  80fa0c:	30c00217 	ldw	r3,8(r6)
  80fa10:	01400904 	movi	r5,36
  80fa14:	99bfff04 	addi	r6,r19,-4
  80fa18:	18800315 	stw	r2,12(r3)
  80fa1c:	10c00215 	stw	r3,8(r2)
  80fa20:	b9000317 	ldw	r4,12(r23)
  80fa24:	b8800217 	ldw	r2,8(r23)
  80fa28:	b82b883a 	mov	r21,r23
  80fa2c:	bc000204 	addi	r16,r23,8
  80fa30:	20800215 	stw	r2,8(r4)
  80fa34:	11000315 	stw	r4,12(r2)
  80fa38:	2980e436 	bltu	r5,r6,80fdcc <_realloc_r+0x548>
  80fa3c:	008004c4 	movi	r2,19
  80fa40:	9009883a 	mov	r4,r18
  80fa44:	8011883a 	mov	r8,r16
  80fa48:	11800f2e 	bgeu	r2,r6,80fa88 <_realloc_r+0x204>
  80fa4c:	90800017 	ldw	r2,0(r18)
  80fa50:	ba000404 	addi	r8,r23,16
  80fa54:	91000204 	addi	r4,r18,8
  80fa58:	b8800215 	stw	r2,8(r23)
  80fa5c:	90c00117 	ldw	r3,4(r18)
  80fa60:	008006c4 	movi	r2,27
  80fa64:	b8c00315 	stw	r3,12(r23)
  80fa68:	1180072e 	bgeu	r2,r6,80fa88 <_realloc_r+0x204>
  80fa6c:	90c00217 	ldw	r3,8(r18)
  80fa70:	ba000604 	addi	r8,r23,24
  80fa74:	91000404 	addi	r4,r18,16
  80fa78:	b8c00415 	stw	r3,16(r23)
  80fa7c:	90800317 	ldw	r2,12(r18)
  80fa80:	b8800515 	stw	r2,20(r23)
  80fa84:	3140e726 	beq	r6,r5,80fe24 <_realloc_r+0x5a0>
  80fa88:	20800017 	ldw	r2,0(r4)
  80fa8c:	dd000017 	ldw	r20,0(sp)
  80fa90:	b80f883a 	mov	r7,r23
  80fa94:	40800015 	stw	r2,0(r8)
  80fa98:	20c00117 	ldw	r3,4(r4)
  80fa9c:	40c00115 	stw	r3,4(r8)
  80faa0:	20800217 	ldw	r2,8(r4)
  80faa4:	40800215 	stw	r2,8(r8)
  80faa8:	003f9706 	br	80f908 <_realloc_r+0x84>
  80faac:	98a9883a 	add	r20,r19,r2
  80fab0:	a1c01f16 	blt	r20,r7,80fb30 <_realloc_r+0x2ac>
  80fab4:	b8c00317 	ldw	r3,12(r23)
  80fab8:	b8800217 	ldw	r2,8(r23)
  80fabc:	99bfff04 	addi	r6,r19,-4
  80fac0:	01400904 	movi	r5,36
  80fac4:	b82b883a 	mov	r21,r23
  80fac8:	18800215 	stw	r2,8(r3)
  80facc:	10c00315 	stw	r3,12(r2)
  80fad0:	bc000204 	addi	r16,r23,8
  80fad4:	2980c336 	bltu	r5,r6,80fde4 <_realloc_r+0x560>
  80fad8:	008004c4 	movi	r2,19
  80fadc:	9009883a 	mov	r4,r18
  80fae0:	8011883a 	mov	r8,r16
  80fae4:	11800f2e 	bgeu	r2,r6,80fb24 <_realloc_r+0x2a0>
  80fae8:	90800017 	ldw	r2,0(r18)
  80faec:	ba000404 	addi	r8,r23,16
  80faf0:	91000204 	addi	r4,r18,8
  80faf4:	b8800215 	stw	r2,8(r23)
  80faf8:	90c00117 	ldw	r3,4(r18)
  80fafc:	008006c4 	movi	r2,27
  80fb00:	b8c00315 	stw	r3,12(r23)
  80fb04:	1180072e 	bgeu	r2,r6,80fb24 <_realloc_r+0x2a0>
  80fb08:	90c00217 	ldw	r3,8(r18)
  80fb0c:	ba000604 	addi	r8,r23,24
  80fb10:	91000404 	addi	r4,r18,16
  80fb14:	b8c00415 	stw	r3,16(r23)
  80fb18:	90800317 	ldw	r2,12(r18)
  80fb1c:	b8800515 	stw	r2,20(r23)
  80fb20:	3140c726 	beq	r6,r5,80fe40 <_realloc_r+0x5bc>
  80fb24:	20800017 	ldw	r2,0(r4)
  80fb28:	b80f883a 	mov	r7,r23
  80fb2c:	003fd906 	br	80fa94 <_realloc_r+0x210>
  80fb30:	880b883a 	mov	r5,r17
  80fb34:	b009883a 	mov	r4,r22
  80fb38:	080910c0 	call	80910c <_malloc_r>
  80fb3c:	1023883a 	mov	r17,r2
  80fb40:	10002526 	beq	r2,zero,80fbd8 <_realloc_r+0x354>
  80fb44:	80800117 	ldw	r2,4(r16)
  80fb48:	00ffff84 	movi	r3,-2
  80fb4c:	893ffe04 	addi	r4,r17,-8
  80fb50:	10c4703a 	and	r2,r2,r3
  80fb54:	8085883a 	add	r2,r16,r2
  80fb58:	20809526 	beq	r4,r2,80fdb0 <_realloc_r+0x52c>
  80fb5c:	99bfff04 	addi	r6,r19,-4
  80fb60:	01c00904 	movi	r7,36
  80fb64:	39804536 	bltu	r7,r6,80fc7c <_realloc_r+0x3f8>
  80fb68:	008004c4 	movi	r2,19
  80fb6c:	9009883a 	mov	r4,r18
  80fb70:	880b883a 	mov	r5,r17
  80fb74:	11800f2e 	bgeu	r2,r6,80fbb4 <_realloc_r+0x330>
  80fb78:	90800017 	ldw	r2,0(r18)
  80fb7c:	89400204 	addi	r5,r17,8
  80fb80:	91000204 	addi	r4,r18,8
  80fb84:	88800015 	stw	r2,0(r17)
  80fb88:	90c00117 	ldw	r3,4(r18)
  80fb8c:	008006c4 	movi	r2,27
  80fb90:	88c00115 	stw	r3,4(r17)
  80fb94:	1180072e 	bgeu	r2,r6,80fbb4 <_realloc_r+0x330>
  80fb98:	90c00217 	ldw	r3,8(r18)
  80fb9c:	89400404 	addi	r5,r17,16
  80fba0:	91000404 	addi	r4,r18,16
  80fba4:	88c00215 	stw	r3,8(r17)
  80fba8:	90800317 	ldw	r2,12(r18)
  80fbac:	88800315 	stw	r2,12(r17)
  80fbb0:	31c09126 	beq	r6,r7,80fdf8 <_realloc_r+0x574>
  80fbb4:	20800017 	ldw	r2,0(r4)
  80fbb8:	28800015 	stw	r2,0(r5)
  80fbbc:	20c00117 	ldw	r3,4(r4)
  80fbc0:	28c00115 	stw	r3,4(r5)
  80fbc4:	20800217 	ldw	r2,8(r4)
  80fbc8:	28800215 	stw	r2,8(r5)
  80fbcc:	900b883a 	mov	r5,r18
  80fbd0:	b009883a 	mov	r4,r22
  80fbd4:	080d9980 	call	80d998 <_free_r>
  80fbd8:	b009883a 	mov	r4,r22
  80fbdc:	0811d7c0 	call	811d7c <__malloc_unlock>
  80fbe0:	003f5e06 	br	80f95c <_realloc_r+0xd8>
  80fbe4:	300b883a 	mov	r5,r6
  80fbe8:	dfc00b17 	ldw	ra,44(sp)
  80fbec:	df000a17 	ldw	fp,40(sp)
  80fbf0:	ddc00917 	ldw	r23,36(sp)
  80fbf4:	dd800817 	ldw	r22,32(sp)
  80fbf8:	dd400717 	ldw	r21,28(sp)
  80fbfc:	dd000617 	ldw	r20,24(sp)
  80fc00:	dcc00517 	ldw	r19,20(sp)
  80fc04:	dc800417 	ldw	r18,16(sp)
  80fc08:	dc400317 	ldw	r17,12(sp)
  80fc0c:	dc000217 	ldw	r16,8(sp)
  80fc10:	dec00c04 	addi	sp,sp,48
  80fc14:	080910c1 	jmpi	80910c <_malloc_r>
  80fc18:	38800117 	ldw	r2,4(r7)
  80fc1c:	e54b883a 	add	r5,fp,r21
  80fc20:	31000054 	ori	r4,r6,1
  80fc24:	1080004c 	andi	r2,r2,1
  80fc28:	1704b03a 	or	r2,r2,fp
  80fc2c:	38800115 	stw	r2,4(r7)
  80fc30:	29000115 	stw	r4,4(r5)
  80fc34:	2987883a 	add	r3,r5,r6
  80fc38:	18800117 	ldw	r2,4(r3)
  80fc3c:	29400204 	addi	r5,r5,8
  80fc40:	b009883a 	mov	r4,r22
  80fc44:	10800054 	ori	r2,r2,1
  80fc48:	18800115 	stw	r2,4(r3)
  80fc4c:	080d9980 	call	80d998 <_free_r>
  80fc50:	003f3806 	br	80f934 <_realloc_r+0xb0>
  80fc54:	000d883a 	mov	r6,zero
  80fc58:	0009883a 	mov	r4,zero
  80fc5c:	003f5d06 	br	80f9d4 <_realloc_r+0x150>
  80fc60:	30c00217 	ldw	r3,8(r6)
  80fc64:	30800317 	ldw	r2,12(r6)
  80fc68:	800f883a 	mov	r7,r16
  80fc6c:	84000204 	addi	r16,r16,8
  80fc70:	10c00215 	stw	r3,8(r2)
  80fc74:	18800315 	stw	r2,12(r3)
  80fc78:	003f2306 	br	80f908 <_realloc_r+0x84>
  80fc7c:	8809883a 	mov	r4,r17
  80fc80:	900b883a 	mov	r5,r18
  80fc84:	080e7180 	call	80e718 <memmove>
  80fc88:	003fd006 	br	80fbcc <_realloc_r+0x348>
  80fc8c:	30800117 	ldw	r2,4(r6)
  80fc90:	e0c00404 	addi	r3,fp,16
  80fc94:	1108703a 	and	r4,r2,r4
  80fc98:	9905883a 	add	r2,r19,r4
  80fc9c:	10ff4d16 	blt	r2,r3,80f9d4 <_realloc_r+0x150>
  80fca0:	1705c83a 	sub	r2,r2,fp
  80fca4:	870b883a 	add	r5,r16,fp
  80fca8:	10800054 	ori	r2,r2,1
  80fcac:	28800115 	stw	r2,4(r5)
  80fcb0:	80c00117 	ldw	r3,4(r16)
  80fcb4:	008020b4 	movhi	r2,130
  80fcb8:	10b25904 	addi	r2,r2,-13980
  80fcbc:	b009883a 	mov	r4,r22
  80fcc0:	18c0004c 	andi	r3,r3,1
  80fcc4:	e0c6b03a 	or	r3,fp,r3
  80fcc8:	11400215 	stw	r5,8(r2)
  80fccc:	80c00115 	stw	r3,4(r16)
  80fcd0:	0811d7c0 	call	811d7c <__malloc_unlock>
  80fcd4:	84400204 	addi	r17,r16,8
  80fcd8:	003f2006 	br	80f95c <_realloc_r+0xd8>
  80fcdc:	98a9883a 	add	r20,r19,r2
  80fce0:	2509883a 	add	r4,r4,r20
  80fce4:	e0800404 	addi	r2,fp,16
  80fce8:	d9000115 	stw	r4,4(sp)
  80fcec:	20bf7016 	blt	r4,r2,80fab0 <_realloc_r+0x22c>
  80fcf0:	b8c00317 	ldw	r3,12(r23)
  80fcf4:	b8800217 	ldw	r2,8(r23)
  80fcf8:	99bfff04 	addi	r6,r19,-4
  80fcfc:	01400904 	movi	r5,36
  80fd00:	18800215 	stw	r2,8(r3)
  80fd04:	10c00315 	stw	r3,12(r2)
  80fd08:	bc400204 	addi	r17,r23,8
  80fd0c:	29804136 	bltu	r5,r6,80fe14 <_realloc_r+0x590>
  80fd10:	008004c4 	movi	r2,19
  80fd14:	9009883a 	mov	r4,r18
  80fd18:	880f883a 	mov	r7,r17
  80fd1c:	11800f2e 	bgeu	r2,r6,80fd5c <_realloc_r+0x4d8>
  80fd20:	90800017 	ldw	r2,0(r18)
  80fd24:	b9c00404 	addi	r7,r23,16
  80fd28:	91000204 	addi	r4,r18,8
  80fd2c:	b8800215 	stw	r2,8(r23)
  80fd30:	90c00117 	ldw	r3,4(r18)
  80fd34:	008006c4 	movi	r2,27
  80fd38:	b8c00315 	stw	r3,12(r23)
  80fd3c:	1180072e 	bgeu	r2,r6,80fd5c <_realloc_r+0x4d8>
  80fd40:	90c00217 	ldw	r3,8(r18)
  80fd44:	b9c00604 	addi	r7,r23,24
  80fd48:	91000404 	addi	r4,r18,16
  80fd4c:	b8c00415 	stw	r3,16(r23)
  80fd50:	90800317 	ldw	r2,12(r18)
  80fd54:	b8800515 	stw	r2,20(r23)
  80fd58:	31404026 	beq	r6,r5,80fe5c <_realloc_r+0x5d8>
  80fd5c:	20800017 	ldw	r2,0(r4)
  80fd60:	38800015 	stw	r2,0(r7)
  80fd64:	20c00117 	ldw	r3,4(r4)
  80fd68:	38c00115 	stw	r3,4(r7)
  80fd6c:	20800217 	ldw	r2,8(r4)
  80fd70:	38800215 	stw	r2,8(r7)
  80fd74:	d8c00117 	ldw	r3,4(sp)
  80fd78:	bf0b883a 	add	r5,r23,fp
  80fd7c:	b009883a 	mov	r4,r22
  80fd80:	1f05c83a 	sub	r2,r3,fp
  80fd84:	10800054 	ori	r2,r2,1
  80fd88:	28800115 	stw	r2,4(r5)
  80fd8c:	b8c00117 	ldw	r3,4(r23)
  80fd90:	008020b4 	movhi	r2,130
  80fd94:	10b25904 	addi	r2,r2,-13980
  80fd98:	11400215 	stw	r5,8(r2)
  80fd9c:	18c0004c 	andi	r3,r3,1
  80fda0:	e0c6b03a 	or	r3,fp,r3
  80fda4:	b8c00115 	stw	r3,4(r23)
  80fda8:	0811d7c0 	call	811d7c <__malloc_unlock>
  80fdac:	003eeb06 	br	80f95c <_realloc_r+0xd8>
  80fdb0:	20800117 	ldw	r2,4(r4)
  80fdb4:	00ffff04 	movi	r3,-4
  80fdb8:	800f883a 	mov	r7,r16
  80fdbc:	10c4703a 	and	r2,r2,r3
  80fdc0:	98a9883a 	add	r20,r19,r2
  80fdc4:	84000204 	addi	r16,r16,8
  80fdc8:	003ecf06 	br	80f908 <_realloc_r+0x84>
  80fdcc:	900b883a 	mov	r5,r18
  80fdd0:	8009883a 	mov	r4,r16
  80fdd4:	080e7180 	call	80e718 <memmove>
  80fdd8:	dd000017 	ldw	r20,0(sp)
  80fddc:	b80f883a 	mov	r7,r23
  80fde0:	003ec906 	br	80f908 <_realloc_r+0x84>
  80fde4:	900b883a 	mov	r5,r18
  80fde8:	8009883a 	mov	r4,r16
  80fdec:	080e7180 	call	80e718 <memmove>
  80fdf0:	b80f883a 	mov	r7,r23
  80fdf4:	003ec406 	br	80f908 <_realloc_r+0x84>
  80fdf8:	90c00417 	ldw	r3,16(r18)
  80fdfc:	89400604 	addi	r5,r17,24
  80fe00:	91000604 	addi	r4,r18,24
  80fe04:	88c00415 	stw	r3,16(r17)
  80fe08:	90800517 	ldw	r2,20(r18)
  80fe0c:	88800515 	stw	r2,20(r17)
  80fe10:	003f6806 	br	80fbb4 <_realloc_r+0x330>
  80fe14:	900b883a 	mov	r5,r18
  80fe18:	8809883a 	mov	r4,r17
  80fe1c:	080e7180 	call	80e718 <memmove>
  80fe20:	003fd406 	br	80fd74 <_realloc_r+0x4f0>
  80fe24:	90c00417 	ldw	r3,16(r18)
  80fe28:	91000604 	addi	r4,r18,24
  80fe2c:	ba000804 	addi	r8,r23,32
  80fe30:	b8c00615 	stw	r3,24(r23)
  80fe34:	90800517 	ldw	r2,20(r18)
  80fe38:	b8800715 	stw	r2,28(r23)
  80fe3c:	003f1206 	br	80fa88 <_realloc_r+0x204>
  80fe40:	90c00417 	ldw	r3,16(r18)
  80fe44:	91000604 	addi	r4,r18,24
  80fe48:	ba000804 	addi	r8,r23,32
  80fe4c:	b8c00615 	stw	r3,24(r23)
  80fe50:	90800517 	ldw	r2,20(r18)
  80fe54:	b8800715 	stw	r2,28(r23)
  80fe58:	003f3206 	br	80fb24 <_realloc_r+0x2a0>
  80fe5c:	90c00417 	ldw	r3,16(r18)
  80fe60:	91000604 	addi	r4,r18,24
  80fe64:	b9c00804 	addi	r7,r23,32
  80fe68:	b8c00615 	stw	r3,24(r23)
  80fe6c:	90800517 	ldw	r2,20(r18)
  80fe70:	b8800715 	stw	r2,28(r23)
  80fe74:	003fb906 	br	80fd5c <_realloc_r+0x4d8>

0080fe78 <__isinfd>:
  80fe78:	200d883a 	mov	r6,r4
  80fe7c:	0109c83a 	sub	r4,zero,r4
  80fe80:	2188b03a 	or	r4,r4,r6
  80fe84:	2008d7fa 	srli	r4,r4,31
  80fe88:	00a00034 	movhi	r2,32768
  80fe8c:	10bfffc4 	addi	r2,r2,-1
  80fe90:	1144703a 	and	r2,r2,r5
  80fe94:	2088b03a 	or	r4,r4,r2
  80fe98:	009ffc34 	movhi	r2,32752
  80fe9c:	1105c83a 	sub	r2,r2,r4
  80fea0:	0087c83a 	sub	r3,zero,r2
  80fea4:	10c4b03a 	or	r2,r2,r3
  80fea8:	1004d7fa 	srli	r2,r2,31
  80feac:	00c00044 	movi	r3,1
  80feb0:	1885c83a 	sub	r2,r3,r2
  80feb4:	f800283a 	ret

0080feb8 <__sclose>:
  80feb8:	2940038f 	ldh	r5,14(r5)
  80febc:	08101ec1 	jmpi	8101ec <_close_r>

0080fec0 <__sseek>:
  80fec0:	defffe04 	addi	sp,sp,-8
  80fec4:	dc000015 	stw	r16,0(sp)
  80fec8:	2821883a 	mov	r16,r5
  80fecc:	2940038f 	ldh	r5,14(r5)
  80fed0:	dfc00115 	stw	ra,4(sp)
  80fed4:	08104640 	call	810464 <_lseek_r>
  80fed8:	1007883a 	mov	r3,r2
  80fedc:	00bfffc4 	movi	r2,-1
  80fee0:	18800926 	beq	r3,r2,80ff08 <__sseek+0x48>
  80fee4:	8080030b 	ldhu	r2,12(r16)
  80fee8:	80c01415 	stw	r3,80(r16)
  80feec:	10840014 	ori	r2,r2,4096
  80fef0:	8080030d 	sth	r2,12(r16)
  80fef4:	1805883a 	mov	r2,r3
  80fef8:	dfc00117 	ldw	ra,4(sp)
  80fefc:	dc000017 	ldw	r16,0(sp)
  80ff00:	dec00204 	addi	sp,sp,8
  80ff04:	f800283a 	ret
  80ff08:	8080030b 	ldhu	r2,12(r16)
  80ff0c:	10bbffcc 	andi	r2,r2,61439
  80ff10:	8080030d 	sth	r2,12(r16)
  80ff14:	1805883a 	mov	r2,r3
  80ff18:	dfc00117 	ldw	ra,4(sp)
  80ff1c:	dc000017 	ldw	r16,0(sp)
  80ff20:	dec00204 	addi	sp,sp,8
  80ff24:	f800283a 	ret

0080ff28 <__swrite>:
  80ff28:	2880030b 	ldhu	r2,12(r5)
  80ff2c:	defffb04 	addi	sp,sp,-20
  80ff30:	dcc00315 	stw	r19,12(sp)
  80ff34:	1080400c 	andi	r2,r2,256
  80ff38:	dc800215 	stw	r18,8(sp)
  80ff3c:	dc400115 	stw	r17,4(sp)
  80ff40:	dc000015 	stw	r16,0(sp)
  80ff44:	3027883a 	mov	r19,r6
  80ff48:	3825883a 	mov	r18,r7
  80ff4c:	dfc00415 	stw	ra,16(sp)
  80ff50:	2821883a 	mov	r16,r5
  80ff54:	000d883a 	mov	r6,zero
  80ff58:	01c00084 	movi	r7,2
  80ff5c:	2023883a 	mov	r17,r4
  80ff60:	10000226 	beq	r2,zero,80ff6c <__swrite+0x44>
  80ff64:	2940038f 	ldh	r5,14(r5)
  80ff68:	08104640 	call	810464 <_lseek_r>
  80ff6c:	8080030b 	ldhu	r2,12(r16)
  80ff70:	8140038f 	ldh	r5,14(r16)
  80ff74:	8809883a 	mov	r4,r17
  80ff78:	10bbffcc 	andi	r2,r2,61439
  80ff7c:	980d883a 	mov	r6,r19
  80ff80:	900f883a 	mov	r7,r18
  80ff84:	8080030d 	sth	r2,12(r16)
  80ff88:	dfc00417 	ldw	ra,16(sp)
  80ff8c:	dcc00317 	ldw	r19,12(sp)
  80ff90:	dc800217 	ldw	r18,8(sp)
  80ff94:	dc400117 	ldw	r17,4(sp)
  80ff98:	dc000017 	ldw	r16,0(sp)
  80ff9c:	dec00504 	addi	sp,sp,20
  80ffa0:	08100c01 	jmpi	8100c0 <_write_r>

0080ffa4 <__sread>:
  80ffa4:	defffe04 	addi	sp,sp,-8
  80ffa8:	dc000015 	stw	r16,0(sp)
  80ffac:	2821883a 	mov	r16,r5
  80ffb0:	2940038f 	ldh	r5,14(r5)
  80ffb4:	dfc00115 	stw	ra,4(sp)
  80ffb8:	08104dc0 	call	8104dc <_read_r>
  80ffbc:	1007883a 	mov	r3,r2
  80ffc0:	10000816 	blt	r2,zero,80ffe4 <__sread+0x40>
  80ffc4:	80801417 	ldw	r2,80(r16)
  80ffc8:	10c5883a 	add	r2,r2,r3
  80ffcc:	80801415 	stw	r2,80(r16)
  80ffd0:	1805883a 	mov	r2,r3
  80ffd4:	dfc00117 	ldw	ra,4(sp)
  80ffd8:	dc000017 	ldw	r16,0(sp)
  80ffdc:	dec00204 	addi	sp,sp,8
  80ffe0:	f800283a 	ret
  80ffe4:	8080030b 	ldhu	r2,12(r16)
  80ffe8:	10bbffcc 	andi	r2,r2,61439
  80ffec:	8080030d 	sth	r2,12(r16)
  80fff0:	1805883a 	mov	r2,r3
  80fff4:	dfc00117 	ldw	ra,4(sp)
  80fff8:	dc000017 	ldw	r16,0(sp)
  80fffc:	dec00204 	addi	sp,sp,8
  810000:	f800283a 	ret

00810004 <strcmp>:
  810004:	2144b03a 	or	r2,r4,r5
  810008:	108000cc 	andi	r2,r2,3
  81000c:	10001d1e 	bne	r2,zero,810084 <strcmp+0x80>
  810010:	200f883a 	mov	r7,r4
  810014:	28800017 	ldw	r2,0(r5)
  810018:	21000017 	ldw	r4,0(r4)
  81001c:	280d883a 	mov	r6,r5
  810020:	2080161e 	bne	r4,r2,81007c <strcmp+0x78>
  810024:	023fbff4 	movhi	r8,65279
  810028:	423fbfc4 	addi	r8,r8,-257
  81002c:	2207883a 	add	r3,r4,r8
  810030:	01602074 	movhi	r5,32897
  810034:	29602004 	addi	r5,r5,-32640
  810038:	1946703a 	and	r3,r3,r5
  81003c:	0104303a 	nor	r2,zero,r4
  810040:	10c4703a 	and	r2,r2,r3
  810044:	10001c1e 	bne	r2,zero,8100b8 <strcmp+0xb4>
  810048:	4013883a 	mov	r9,r8
  81004c:	2811883a 	mov	r8,r5
  810050:	00000106 	br	810058 <strcmp+0x54>
  810054:	1800181e 	bne	r3,zero,8100b8 <strcmp+0xb4>
  810058:	39c00104 	addi	r7,r7,4
  81005c:	39000017 	ldw	r4,0(r7)
  810060:	31800104 	addi	r6,r6,4
  810064:	31400017 	ldw	r5,0(r6)
  810068:	2245883a 	add	r2,r4,r9
  81006c:	1204703a 	and	r2,r2,r8
  810070:	0106303a 	nor	r3,zero,r4
  810074:	1886703a 	and	r3,r3,r2
  810078:	217ff626 	beq	r4,r5,810054 <strcmp+0x50>
  81007c:	3809883a 	mov	r4,r7
  810080:	300b883a 	mov	r5,r6
  810084:	20c00007 	ldb	r3,0(r4)
  810088:	1800051e 	bne	r3,zero,8100a0 <strcmp+0x9c>
  81008c:	00000606 	br	8100a8 <strcmp+0xa4>
  810090:	21000044 	addi	r4,r4,1
  810094:	20c00007 	ldb	r3,0(r4)
  810098:	29400044 	addi	r5,r5,1
  81009c:	18000226 	beq	r3,zero,8100a8 <strcmp+0xa4>
  8100a0:	28800007 	ldb	r2,0(r5)
  8100a4:	18bffa26 	beq	r3,r2,810090 <strcmp+0x8c>
  8100a8:	20c00003 	ldbu	r3,0(r4)
  8100ac:	28800003 	ldbu	r2,0(r5)
  8100b0:	1885c83a 	sub	r2,r3,r2
  8100b4:	f800283a 	ret
  8100b8:	0005883a 	mov	r2,zero
  8100bc:	f800283a 	ret

008100c0 <_write_r>:
  8100c0:	defffd04 	addi	sp,sp,-12
  8100c4:	dc000015 	stw	r16,0(sp)
  8100c8:	040020b4 	movhi	r16,130
  8100cc:	843f6904 	addi	r16,r16,-604
  8100d0:	dc400115 	stw	r17,4(sp)
  8100d4:	80000015 	stw	zero,0(r16)
  8100d8:	2023883a 	mov	r17,r4
  8100dc:	2809883a 	mov	r4,r5
  8100e0:	300b883a 	mov	r5,r6
  8100e4:	380d883a 	mov	r6,r7
  8100e8:	dfc00215 	stw	ra,8(sp)
  8100ec:	081220c0 	call	81220c <write>
  8100f0:	1007883a 	mov	r3,r2
  8100f4:	00bfffc4 	movi	r2,-1
  8100f8:	18800626 	beq	r3,r2,810114 <_write_r+0x54>
  8100fc:	1805883a 	mov	r2,r3
  810100:	dfc00217 	ldw	ra,8(sp)
  810104:	dc400117 	ldw	r17,4(sp)
  810108:	dc000017 	ldw	r16,0(sp)
  81010c:	dec00304 	addi	sp,sp,12
  810110:	f800283a 	ret
  810114:	80800017 	ldw	r2,0(r16)
  810118:	103ff826 	beq	r2,zero,8100fc <_write_r+0x3c>
  81011c:	88800015 	stw	r2,0(r17)
  810120:	1805883a 	mov	r2,r3
  810124:	dfc00217 	ldw	ra,8(sp)
  810128:	dc400117 	ldw	r17,4(sp)
  81012c:	dc000017 	ldw	r16,0(sp)
  810130:	dec00304 	addi	sp,sp,12
  810134:	f800283a 	ret

00810138 <_calloc_r>:
  810138:	298b383a 	mul	r5,r5,r6
  81013c:	defffe04 	addi	sp,sp,-8
  810140:	dc000015 	stw	r16,0(sp)
  810144:	dfc00115 	stw	ra,4(sp)
  810148:	080910c0 	call	80910c <_malloc_r>
  81014c:	1021883a 	mov	r16,r2
  810150:	01c00904 	movi	r7,36
  810154:	10000d26 	beq	r2,zero,81018c <_calloc_r+0x54>
  810158:	10ffff17 	ldw	r3,-4(r2)
  81015c:	1009883a 	mov	r4,r2
  810160:	00bfff04 	movi	r2,-4
  810164:	1886703a 	and	r3,r3,r2
  810168:	1887883a 	add	r3,r3,r2
  81016c:	180d883a 	mov	r6,r3
  810170:	000b883a 	mov	r5,zero
  810174:	38c01736 	bltu	r7,r3,8101d4 <_calloc_r+0x9c>
  810178:	008004c4 	movi	r2,19
  81017c:	10c00836 	bltu	r2,r3,8101a0 <_calloc_r+0x68>
  810180:	20000215 	stw	zero,8(r4)
  810184:	20000015 	stw	zero,0(r4)
  810188:	20000115 	stw	zero,4(r4)
  81018c:	8005883a 	mov	r2,r16
  810190:	dfc00117 	ldw	ra,4(sp)
  810194:	dc000017 	ldw	r16,0(sp)
  810198:	dec00204 	addi	sp,sp,8
  81019c:	f800283a 	ret
  8101a0:	008006c4 	movi	r2,27
  8101a4:	80000015 	stw	zero,0(r16)
  8101a8:	80000115 	stw	zero,4(r16)
  8101ac:	81000204 	addi	r4,r16,8
  8101b0:	10fff32e 	bgeu	r2,r3,810180 <_calloc_r+0x48>
  8101b4:	80000215 	stw	zero,8(r16)
  8101b8:	80000315 	stw	zero,12(r16)
  8101bc:	81000404 	addi	r4,r16,16
  8101c0:	19ffef1e 	bne	r3,r7,810180 <_calloc_r+0x48>
  8101c4:	81000604 	addi	r4,r16,24
  8101c8:	80000415 	stw	zero,16(r16)
  8101cc:	80000515 	stw	zero,20(r16)
  8101d0:	003feb06 	br	810180 <_calloc_r+0x48>
  8101d4:	080e7f80 	call	80e7f8 <memset>
  8101d8:	8005883a 	mov	r2,r16
  8101dc:	dfc00117 	ldw	ra,4(sp)
  8101e0:	dc000017 	ldw	r16,0(sp)
  8101e4:	dec00204 	addi	sp,sp,8
  8101e8:	f800283a 	ret

008101ec <_close_r>:
  8101ec:	defffd04 	addi	sp,sp,-12
  8101f0:	dc000015 	stw	r16,0(sp)
  8101f4:	040020b4 	movhi	r16,130
  8101f8:	843f6904 	addi	r16,r16,-604
  8101fc:	dc400115 	stw	r17,4(sp)
  810200:	80000015 	stw	zero,0(r16)
  810204:	2023883a 	mov	r17,r4
  810208:	2809883a 	mov	r4,r5
  81020c:	dfc00215 	stw	ra,8(sp)
  810210:	08112fc0 	call	8112fc <close>
  810214:	1007883a 	mov	r3,r2
  810218:	00bfffc4 	movi	r2,-1
  81021c:	18800626 	beq	r3,r2,810238 <_close_r+0x4c>
  810220:	1805883a 	mov	r2,r3
  810224:	dfc00217 	ldw	ra,8(sp)
  810228:	dc400117 	ldw	r17,4(sp)
  81022c:	dc000017 	ldw	r16,0(sp)
  810230:	dec00304 	addi	sp,sp,12
  810234:	f800283a 	ret
  810238:	80800017 	ldw	r2,0(r16)
  81023c:	103ff826 	beq	r2,zero,810220 <_close_r+0x34>
  810240:	88800015 	stw	r2,0(r17)
  810244:	1805883a 	mov	r2,r3
  810248:	dfc00217 	ldw	ra,8(sp)
  81024c:	dc400117 	ldw	r17,4(sp)
  810250:	dc000017 	ldw	r16,0(sp)
  810254:	dec00304 	addi	sp,sp,12
  810258:	f800283a 	ret

0081025c <_fclose_r>:
  81025c:	defffc04 	addi	sp,sp,-16
  810260:	dc400115 	stw	r17,4(sp)
  810264:	dc000015 	stw	r16,0(sp)
  810268:	dfc00315 	stw	ra,12(sp)
  81026c:	dc800215 	stw	r18,8(sp)
  810270:	2821883a 	mov	r16,r5
  810274:	2023883a 	mov	r17,r4
  810278:	28002926 	beq	r5,zero,810320 <_fclose_r+0xc4>
  81027c:	080d6040 	call	80d604 <__sfp_lock_acquire>
  810280:	88000226 	beq	r17,zero,81028c <_fclose_r+0x30>
  810284:	88800e17 	ldw	r2,56(r17)
  810288:	10002d26 	beq	r2,zero,810340 <_fclose_r+0xe4>
  81028c:	8080030f 	ldh	r2,12(r16)
  810290:	10002226 	beq	r2,zero,81031c <_fclose_r+0xc0>
  810294:	8809883a 	mov	r4,r17
  810298:	800b883a 	mov	r5,r16
  81029c:	080d37c0 	call	80d37c <_fflush_r>
  8102a0:	1025883a 	mov	r18,r2
  8102a4:	80800b17 	ldw	r2,44(r16)
  8102a8:	10000426 	beq	r2,zero,8102bc <_fclose_r+0x60>
  8102ac:	81400717 	ldw	r5,28(r16)
  8102b0:	8809883a 	mov	r4,r17
  8102b4:	103ee83a 	callr	r2
  8102b8:	10002a16 	blt	r2,zero,810364 <_fclose_r+0x108>
  8102bc:	8080030b 	ldhu	r2,12(r16)
  8102c0:	1080200c 	andi	r2,r2,128
  8102c4:	1000231e 	bne	r2,zero,810354 <_fclose_r+0xf8>
  8102c8:	81400c17 	ldw	r5,48(r16)
  8102cc:	28000526 	beq	r5,zero,8102e4 <_fclose_r+0x88>
  8102d0:	80801004 	addi	r2,r16,64
  8102d4:	28800226 	beq	r5,r2,8102e0 <_fclose_r+0x84>
  8102d8:	8809883a 	mov	r4,r17
  8102dc:	080d9980 	call	80d998 <_free_r>
  8102e0:	80000c15 	stw	zero,48(r16)
  8102e4:	81401117 	ldw	r5,68(r16)
  8102e8:	28000326 	beq	r5,zero,8102f8 <_fclose_r+0x9c>
  8102ec:	8809883a 	mov	r4,r17
  8102f0:	080d9980 	call	80d998 <_free_r>
  8102f4:	80001115 	stw	zero,68(r16)
  8102f8:	8000030d 	sth	zero,12(r16)
  8102fc:	080d6080 	call	80d608 <__sfp_lock_release>
  810300:	9005883a 	mov	r2,r18
  810304:	dfc00317 	ldw	ra,12(sp)
  810308:	dc800217 	ldw	r18,8(sp)
  81030c:	dc400117 	ldw	r17,4(sp)
  810310:	dc000017 	ldw	r16,0(sp)
  810314:	dec00404 	addi	sp,sp,16
  810318:	f800283a 	ret
  81031c:	080d6080 	call	80d608 <__sfp_lock_release>
  810320:	0025883a 	mov	r18,zero
  810324:	9005883a 	mov	r2,r18
  810328:	dfc00317 	ldw	ra,12(sp)
  81032c:	dc800217 	ldw	r18,8(sp)
  810330:	dc400117 	ldw	r17,4(sp)
  810334:	dc000017 	ldw	r16,0(sp)
  810338:	dec00404 	addi	sp,sp,16
  81033c:	f800283a 	ret
  810340:	8809883a 	mov	r4,r17
  810344:	080d6140 	call	80d614 <__sinit>
  810348:	8080030f 	ldh	r2,12(r16)
  81034c:	103fd11e 	bne	r2,zero,810294 <_fclose_r+0x38>
  810350:	003ff206 	br	81031c <_fclose_r+0xc0>
  810354:	81400417 	ldw	r5,16(r16)
  810358:	8809883a 	mov	r4,r17
  81035c:	080d9980 	call	80d998 <_free_r>
  810360:	003fd906 	br	8102c8 <_fclose_r+0x6c>
  810364:	04bfffc4 	movi	r18,-1
  810368:	003fd406 	br	8102bc <_fclose_r+0x60>

0081036c <fclose>:
  81036c:	008020b4 	movhi	r2,130
  810370:	10b83b04 	addi	r2,r2,-7956
  810374:	200b883a 	mov	r5,r4
  810378:	11000017 	ldw	r4,0(r2)
  81037c:	081025c1 	jmpi	81025c <_fclose_r>

00810380 <_fstat_r>:
  810380:	defffd04 	addi	sp,sp,-12
  810384:	dc000015 	stw	r16,0(sp)
  810388:	040020b4 	movhi	r16,130
  81038c:	843f6904 	addi	r16,r16,-604
  810390:	dc400115 	stw	r17,4(sp)
  810394:	80000015 	stw	zero,0(r16)
  810398:	2023883a 	mov	r17,r4
  81039c:	2809883a 	mov	r4,r5
  8103a0:	300b883a 	mov	r5,r6
  8103a4:	dfc00215 	stw	ra,8(sp)
  8103a8:	08114840 	call	811484 <fstat>
  8103ac:	1007883a 	mov	r3,r2
  8103b0:	00bfffc4 	movi	r2,-1
  8103b4:	18800626 	beq	r3,r2,8103d0 <_fstat_r+0x50>
  8103b8:	1805883a 	mov	r2,r3
  8103bc:	dfc00217 	ldw	ra,8(sp)
  8103c0:	dc400117 	ldw	r17,4(sp)
  8103c4:	dc000017 	ldw	r16,0(sp)
  8103c8:	dec00304 	addi	sp,sp,12
  8103cc:	f800283a 	ret
  8103d0:	80800017 	ldw	r2,0(r16)
  8103d4:	103ff826 	beq	r2,zero,8103b8 <_fstat_r+0x38>
  8103d8:	88800015 	stw	r2,0(r17)
  8103dc:	1805883a 	mov	r2,r3
  8103e0:	dfc00217 	ldw	ra,8(sp)
  8103e4:	dc400117 	ldw	r17,4(sp)
  8103e8:	dc000017 	ldw	r16,0(sp)
  8103ec:	dec00304 	addi	sp,sp,12
  8103f0:	f800283a 	ret

008103f4 <_isatty_r>:
  8103f4:	defffd04 	addi	sp,sp,-12
  8103f8:	dc000015 	stw	r16,0(sp)
  8103fc:	040020b4 	movhi	r16,130
  810400:	843f6904 	addi	r16,r16,-604
  810404:	dc400115 	stw	r17,4(sp)
  810408:	80000015 	stw	zero,0(r16)
  81040c:	2023883a 	mov	r17,r4
  810410:	2809883a 	mov	r4,r5
  810414:	dfc00215 	stw	ra,8(sp)
  810418:	08119940 	call	811994 <isatty>
  81041c:	1007883a 	mov	r3,r2
  810420:	00bfffc4 	movi	r2,-1
  810424:	18800626 	beq	r3,r2,810440 <_isatty_r+0x4c>
  810428:	1805883a 	mov	r2,r3
  81042c:	dfc00217 	ldw	ra,8(sp)
  810430:	dc400117 	ldw	r17,4(sp)
  810434:	dc000017 	ldw	r16,0(sp)
  810438:	dec00304 	addi	sp,sp,12
  81043c:	f800283a 	ret
  810440:	80800017 	ldw	r2,0(r16)
  810444:	103ff826 	beq	r2,zero,810428 <_isatty_r+0x34>
  810448:	88800015 	stw	r2,0(r17)
  81044c:	1805883a 	mov	r2,r3
  810450:	dfc00217 	ldw	ra,8(sp)
  810454:	dc400117 	ldw	r17,4(sp)
  810458:	dc000017 	ldw	r16,0(sp)
  81045c:	dec00304 	addi	sp,sp,12
  810460:	f800283a 	ret

00810464 <_lseek_r>:
  810464:	defffd04 	addi	sp,sp,-12
  810468:	dc000015 	stw	r16,0(sp)
  81046c:	040020b4 	movhi	r16,130
  810470:	843f6904 	addi	r16,r16,-604
  810474:	dc400115 	stw	r17,4(sp)
  810478:	80000015 	stw	zero,0(r16)
  81047c:	2023883a 	mov	r17,r4
  810480:	2809883a 	mov	r4,r5
  810484:	300b883a 	mov	r5,r6
  810488:	380d883a 	mov	r6,r7
  81048c:	dfc00215 	stw	ra,8(sp)
  810490:	0811ba00 	call	811ba0 <lseek>
  810494:	1007883a 	mov	r3,r2
  810498:	00bfffc4 	movi	r2,-1
  81049c:	18800626 	beq	r3,r2,8104b8 <_lseek_r+0x54>
  8104a0:	1805883a 	mov	r2,r3
  8104a4:	dfc00217 	ldw	ra,8(sp)
  8104a8:	dc400117 	ldw	r17,4(sp)
  8104ac:	dc000017 	ldw	r16,0(sp)
  8104b0:	dec00304 	addi	sp,sp,12
  8104b4:	f800283a 	ret
  8104b8:	80800017 	ldw	r2,0(r16)
  8104bc:	103ff826 	beq	r2,zero,8104a0 <_lseek_r+0x3c>
  8104c0:	88800015 	stw	r2,0(r17)
  8104c4:	1805883a 	mov	r2,r3
  8104c8:	dfc00217 	ldw	ra,8(sp)
  8104cc:	dc400117 	ldw	r17,4(sp)
  8104d0:	dc000017 	ldw	r16,0(sp)
  8104d4:	dec00304 	addi	sp,sp,12
  8104d8:	f800283a 	ret

008104dc <_read_r>:
  8104dc:	defffd04 	addi	sp,sp,-12
  8104e0:	dc000015 	stw	r16,0(sp)
  8104e4:	040020b4 	movhi	r16,130
  8104e8:	843f6904 	addi	r16,r16,-604
  8104ec:	dc400115 	stw	r17,4(sp)
  8104f0:	80000015 	stw	zero,0(r16)
  8104f4:	2023883a 	mov	r17,r4
  8104f8:	2809883a 	mov	r4,r5
  8104fc:	300b883a 	mov	r5,r6
  810500:	380d883a 	mov	r6,r7
  810504:	dfc00215 	stw	ra,8(sp)
  810508:	0811d9c0 	call	811d9c <read>
  81050c:	1007883a 	mov	r3,r2
  810510:	00bfffc4 	movi	r2,-1
  810514:	18800626 	beq	r3,r2,810530 <_read_r+0x54>
  810518:	1805883a 	mov	r2,r3
  81051c:	dfc00217 	ldw	ra,8(sp)
  810520:	dc400117 	ldw	r17,4(sp)
  810524:	dc000017 	ldw	r16,0(sp)
  810528:	dec00304 	addi	sp,sp,12
  81052c:	f800283a 	ret
  810530:	80800017 	ldw	r2,0(r16)
  810534:	103ff826 	beq	r2,zero,810518 <_read_r+0x3c>
  810538:	88800015 	stw	r2,0(r17)
  81053c:	1805883a 	mov	r2,r3
  810540:	dfc00217 	ldw	ra,8(sp)
  810544:	dc400117 	ldw	r17,4(sp)
  810548:	dc000017 	ldw	r16,0(sp)
  81054c:	dec00304 	addi	sp,sp,12
  810550:	f800283a 	ret

00810554 <__udivdi3>:
  810554:	defff004 	addi	sp,sp,-64
  810558:	2005883a 	mov	r2,r4
  81055c:	3011883a 	mov	r8,r6
  810560:	df000e15 	stw	fp,56(sp)
  810564:	dd000a15 	stw	r20,40(sp)
  810568:	dc000615 	stw	r16,24(sp)
  81056c:	dfc00f15 	stw	ra,60(sp)
  810570:	ddc00d15 	stw	r23,52(sp)
  810574:	dd800c15 	stw	r22,48(sp)
  810578:	dd400b15 	stw	r21,44(sp)
  81057c:	dcc00915 	stw	r19,36(sp)
  810580:	dc800815 	stw	r18,32(sp)
  810584:	dc400715 	stw	r17,28(sp)
  810588:	4021883a 	mov	r16,r8
  81058c:	1039883a 	mov	fp,r2
  810590:	2829883a 	mov	r20,r5
  810594:	38003b1e 	bne	r7,zero,810684 <__udivdi3+0x130>
  810598:	2a005c36 	bltu	r5,r8,81070c <__udivdi3+0x1b8>
  81059c:	4000a626 	beq	r8,zero,810838 <__udivdi3+0x2e4>
  8105a0:	00bfffd4 	movui	r2,65535
  8105a4:	14009e36 	bltu	r2,r16,810820 <__udivdi3+0x2cc>
  8105a8:	00803fc4 	movi	r2,255
  8105ac:	14013d36 	bltu	r2,r16,810aa4 <__udivdi3+0x550>
  8105b0:	000b883a 	mov	r5,zero
  8105b4:	0005883a 	mov	r2,zero
  8105b8:	8084d83a 	srl	r2,r16,r2
  8105bc:	010020b4 	movhi	r4,130
  8105c0:	21305804 	addi	r4,r4,-16032
  8105c4:	01800804 	movi	r6,32
  8105c8:	1105883a 	add	r2,r2,r4
  8105cc:	10c00003 	ldbu	r3,0(r2)
  8105d0:	28c7883a 	add	r3,r5,r3
  8105d4:	30edc83a 	sub	r22,r6,r3
  8105d8:	b000ee1e 	bne	r22,zero,810994 <__udivdi3+0x440>
  8105dc:	802ad43a 	srli	r21,r16,16
  8105e0:	00800044 	movi	r2,1
  8105e4:	a423c83a 	sub	r17,r20,r16
  8105e8:	85ffffcc 	andi	r23,r16,65535
  8105ec:	d8800315 	stw	r2,12(sp)
  8105f0:	8809883a 	mov	r4,r17
  8105f4:	a80b883a 	mov	r5,r21
  8105f8:	08088700 	call	808870 <__udivsi3>
  8105fc:	8809883a 	mov	r4,r17
  810600:	a80b883a 	mov	r5,r21
  810604:	102d883a 	mov	r22,r2
  810608:	08088780 	call	808878 <__umodsi3>
  81060c:	1004943a 	slli	r2,r2,16
  810610:	e006d43a 	srli	r3,fp,16
  810614:	bda3383a 	mul	r17,r23,r22
  810618:	10c4b03a 	or	r2,r2,r3
  81061c:	1440042e 	bgeu	r2,r17,810630 <__udivdi3+0xdc>
  810620:	1405883a 	add	r2,r2,r16
  810624:	b5bfffc4 	addi	r22,r22,-1
  810628:	14000136 	bltu	r2,r16,810630 <__udivdi3+0xdc>
  81062c:	14413d36 	bltu	r2,r17,810b24 <__udivdi3+0x5d0>
  810630:	1463c83a 	sub	r17,r2,r17
  810634:	8809883a 	mov	r4,r17
  810638:	a80b883a 	mov	r5,r21
  81063c:	08088700 	call	808870 <__udivsi3>
  810640:	8809883a 	mov	r4,r17
  810644:	a80b883a 	mov	r5,r21
  810648:	1029883a 	mov	r20,r2
  81064c:	08088780 	call	808878 <__umodsi3>
  810650:	1004943a 	slli	r2,r2,16
  810654:	bd09383a 	mul	r4,r23,r20
  810658:	e0ffffcc 	andi	r3,fp,65535
  81065c:	10c4b03a 	or	r2,r2,r3
  810660:	1100042e 	bgeu	r2,r4,810674 <__udivdi3+0x120>
  810664:	8085883a 	add	r2,r16,r2
  810668:	a53fffc4 	addi	r20,r20,-1
  81066c:	14000136 	bltu	r2,r16,810674 <__udivdi3+0x120>
  810670:	11012036 	bltu	r2,r4,810af4 <__udivdi3+0x5a0>
  810674:	b004943a 	slli	r2,r22,16
  810678:	d9000317 	ldw	r4,12(sp)
  81067c:	a084b03a 	or	r2,r20,r2
  810680:	00001506 	br	8106d8 <__udivdi3+0x184>
  810684:	380d883a 	mov	r6,r7
  810688:	29c06236 	bltu	r5,r7,810814 <__udivdi3+0x2c0>
  81068c:	00bfffd4 	movui	r2,65535
  810690:	11c05a36 	bltu	r2,r7,8107fc <__udivdi3+0x2a8>
  810694:	00803fc4 	movi	r2,255
  810698:	11c0fc36 	bltu	r2,r7,810a8c <__udivdi3+0x538>
  81069c:	000b883a 	mov	r5,zero
  8106a0:	0005883a 	mov	r2,zero
  8106a4:	3084d83a 	srl	r2,r6,r2
  8106a8:	010020b4 	movhi	r4,130
  8106ac:	21305804 	addi	r4,r4,-16032
  8106b0:	01c00804 	movi	r7,32
  8106b4:	1105883a 	add	r2,r2,r4
  8106b8:	10c00003 	ldbu	r3,0(r2)
  8106bc:	28c7883a 	add	r3,r5,r3
  8106c0:	38efc83a 	sub	r23,r7,r3
  8106c4:	b800691e 	bne	r23,zero,81086c <__udivdi3+0x318>
  8106c8:	35000136 	bltu	r6,r20,8106d0 <__udivdi3+0x17c>
  8106cc:	e4005136 	bltu	fp,r16,810814 <__udivdi3+0x2c0>
  8106d0:	00800044 	movi	r2,1
  8106d4:	0009883a 	mov	r4,zero
  8106d8:	2007883a 	mov	r3,r4
  8106dc:	dfc00f17 	ldw	ra,60(sp)
  8106e0:	df000e17 	ldw	fp,56(sp)
  8106e4:	ddc00d17 	ldw	r23,52(sp)
  8106e8:	dd800c17 	ldw	r22,48(sp)
  8106ec:	dd400b17 	ldw	r21,44(sp)
  8106f0:	dd000a17 	ldw	r20,40(sp)
  8106f4:	dcc00917 	ldw	r19,36(sp)
  8106f8:	dc800817 	ldw	r18,32(sp)
  8106fc:	dc400717 	ldw	r17,28(sp)
  810700:	dc000617 	ldw	r16,24(sp)
  810704:	dec01004 	addi	sp,sp,64
  810708:	f800283a 	ret
  81070c:	00bfffd4 	movui	r2,65535
  810710:	12005036 	bltu	r2,r8,810854 <__udivdi3+0x300>
  810714:	00803fc4 	movi	r2,255
  810718:	1200e836 	bltu	r2,r8,810abc <__udivdi3+0x568>
  81071c:	000b883a 	mov	r5,zero
  810720:	0005883a 	mov	r2,zero
  810724:	8084d83a 	srl	r2,r16,r2
  810728:	010020b4 	movhi	r4,130
  81072c:	21305804 	addi	r4,r4,-16032
  810730:	01800804 	movi	r6,32
  810734:	1105883a 	add	r2,r2,r4
  810738:	10c00003 	ldbu	r3,0(r2)
  81073c:	28c7883a 	add	r3,r5,r3
  810740:	30cbc83a 	sub	r5,r6,r3
  810744:	28000626 	beq	r5,zero,810760 <__udivdi3+0x20c>
  810748:	3145c83a 	sub	r2,r6,r5
  81074c:	e084d83a 	srl	r2,fp,r2
  810750:	a146983a 	sll	r3,r20,r5
  810754:	e178983a 	sll	fp,fp,r5
  810758:	8160983a 	sll	r16,r16,r5
  81075c:	18a8b03a 	or	r20,r3,r2
  810760:	802ad43a 	srli	r21,r16,16
  810764:	a009883a 	mov	r4,r20
  810768:	85ffffcc 	andi	r23,r16,65535
  81076c:	a80b883a 	mov	r5,r21
  810770:	08088700 	call	808870 <__udivsi3>
  810774:	a009883a 	mov	r4,r20
  810778:	a80b883a 	mov	r5,r21
  81077c:	102d883a 	mov	r22,r2
  810780:	08088780 	call	808878 <__umodsi3>
  810784:	1004943a 	slli	r2,r2,16
  810788:	e006d43a 	srli	r3,fp,16
  81078c:	bda3383a 	mul	r17,r23,r22
  810790:	10c4b03a 	or	r2,r2,r3
  810794:	1440042e 	bgeu	r2,r17,8107a8 <__udivdi3+0x254>
  810798:	1405883a 	add	r2,r2,r16
  81079c:	b5bfffc4 	addi	r22,r22,-1
  8107a0:	14000136 	bltu	r2,r16,8107a8 <__udivdi3+0x254>
  8107a4:	1440d536 	bltu	r2,r17,810afc <__udivdi3+0x5a8>
  8107a8:	1463c83a 	sub	r17,r2,r17
  8107ac:	8809883a 	mov	r4,r17
  8107b0:	a80b883a 	mov	r5,r21
  8107b4:	08088700 	call	808870 <__udivsi3>
  8107b8:	8809883a 	mov	r4,r17
  8107bc:	a80b883a 	mov	r5,r21
  8107c0:	1029883a 	mov	r20,r2
  8107c4:	08088780 	call	808878 <__umodsi3>
  8107c8:	1004943a 	slli	r2,r2,16
  8107cc:	bd09383a 	mul	r4,r23,r20
  8107d0:	e0ffffcc 	andi	r3,fp,65535
  8107d4:	10c4b03a 	or	r2,r2,r3
  8107d8:	1100042e 	bgeu	r2,r4,8107ec <__udivdi3+0x298>
  8107dc:	8085883a 	add	r2,r16,r2
  8107e0:	a53fffc4 	addi	r20,r20,-1
  8107e4:	14000136 	bltu	r2,r16,8107ec <__udivdi3+0x298>
  8107e8:	1100c736 	bltu	r2,r4,810b08 <__udivdi3+0x5b4>
  8107ec:	b004943a 	slli	r2,r22,16
  8107f0:	0009883a 	mov	r4,zero
  8107f4:	a084b03a 	or	r2,r20,r2
  8107f8:	003fb706 	br	8106d8 <__udivdi3+0x184>
  8107fc:	00804034 	movhi	r2,256
  810800:	10bfffc4 	addi	r2,r2,-1
  810804:	11c0a436 	bltu	r2,r7,810a98 <__udivdi3+0x544>
  810808:	01400404 	movi	r5,16
  81080c:	2805883a 	mov	r2,r5
  810810:	003fa406 	br	8106a4 <__udivdi3+0x150>
  810814:	0005883a 	mov	r2,zero
  810818:	0009883a 	mov	r4,zero
  81081c:	003fae06 	br	8106d8 <__udivdi3+0x184>
  810820:	00804034 	movhi	r2,256
  810824:	10bfffc4 	addi	r2,r2,-1
  810828:	1400a136 	bltu	r2,r16,810ab0 <__udivdi3+0x55c>
  81082c:	01400404 	movi	r5,16
  810830:	2805883a 	mov	r2,r5
  810834:	003f6006 	br	8105b8 <__udivdi3+0x64>
  810838:	01000044 	movi	r4,1
  81083c:	000b883a 	mov	r5,zero
  810840:	08088700 	call	808870 <__udivsi3>
  810844:	1021883a 	mov	r16,r2
  810848:	00bfffd4 	movui	r2,65535
  81084c:	143ff436 	bltu	r2,r16,810820 <__udivdi3+0x2cc>
  810850:	003f5506 	br	8105a8 <__udivdi3+0x54>
  810854:	00804034 	movhi	r2,256
  810858:	10bfffc4 	addi	r2,r2,-1
  81085c:	12009a36 	bltu	r2,r8,810ac8 <__udivdi3+0x574>
  810860:	01400404 	movi	r5,16
  810864:	2805883a 	mov	r2,r5
  810868:	003fae06 	br	810724 <__udivdi3+0x1d0>
  81086c:	3dc5c83a 	sub	r2,r7,r23
  810870:	35c8983a 	sll	r4,r6,r23
  810874:	8086d83a 	srl	r3,r16,r2
  810878:	a0a2d83a 	srl	r17,r20,r2
  81087c:	e084d83a 	srl	r2,fp,r2
  810880:	20eab03a 	or	r21,r4,r3
  810884:	a82cd43a 	srli	r22,r21,16
  810888:	a5c6983a 	sll	r3,r20,r23
  81088c:	8809883a 	mov	r4,r17
  810890:	b00b883a 	mov	r5,r22
  810894:	1886b03a 	or	r3,r3,r2
  810898:	d8c00215 	stw	r3,8(sp)
  81089c:	08088700 	call	808870 <__udivsi3>
  8108a0:	8809883a 	mov	r4,r17
  8108a4:	b00b883a 	mov	r5,r22
  8108a8:	1029883a 	mov	r20,r2
  8108ac:	08088780 	call	808878 <__umodsi3>
  8108b0:	a8ffffcc 	andi	r3,r21,65535
  8108b4:	d8c00515 	stw	r3,20(sp)
  8108b8:	d9000217 	ldw	r4,8(sp)
  8108bc:	d9400517 	ldw	r5,20(sp)
  8108c0:	1004943a 	slli	r2,r2,16
  8108c4:	2006d43a 	srli	r3,r4,16
  8108c8:	85e0983a 	sll	r16,r16,r23
  8108cc:	2d23383a 	mul	r17,r5,r20
  8108d0:	10c4b03a 	or	r2,r2,r3
  8108d4:	dc000015 	stw	r16,0(sp)
  8108d8:	1440032e 	bgeu	r2,r17,8108e8 <__udivdi3+0x394>
  8108dc:	1545883a 	add	r2,r2,r21
  8108e0:	a53fffc4 	addi	r20,r20,-1
  8108e4:	15407f2e 	bgeu	r2,r21,810ae4 <__udivdi3+0x590>
  8108e8:	1463c83a 	sub	r17,r2,r17
  8108ec:	8809883a 	mov	r4,r17
  8108f0:	b00b883a 	mov	r5,r22
  8108f4:	08088700 	call	808870 <__udivsi3>
  8108f8:	8809883a 	mov	r4,r17
  8108fc:	b00b883a 	mov	r5,r22
  810900:	1021883a 	mov	r16,r2
  810904:	08088780 	call	808878 <__umodsi3>
  810908:	d8c00517 	ldw	r3,20(sp)
  81090c:	d9000217 	ldw	r4,8(sp)
  810910:	1004943a 	slli	r2,r2,16
  810914:	1c0f383a 	mul	r7,r3,r16
  810918:	20ffffcc 	andi	r3,r4,65535
  81091c:	10e2b03a 	or	r17,r2,r3
  810920:	89c0032e 	bgeu	r17,r7,810930 <__udivdi3+0x3dc>
  810924:	8d63883a 	add	r17,r17,r21
  810928:	843fffc4 	addi	r16,r16,-1
  81092c:	8d40692e 	bgeu	r17,r21,810ad4 <__udivdi3+0x580>
  810930:	a008943a 	slli	r4,r20,16
  810934:	d9400017 	ldw	r5,0(sp)
  810938:	89e3c83a 	sub	r17,r17,r7
  81093c:	8110b03a 	or	r8,r16,r4
  810940:	280cd43a 	srli	r6,r5,16
  810944:	28ffffcc 	andi	r3,r5,65535
  810948:	40bfffcc 	andi	r2,r8,65535
  81094c:	400ad43a 	srli	r5,r8,16
  810950:	10d3383a 	mul	r9,r2,r3
  810954:	1185383a 	mul	r2,r2,r6
  810958:	28c7383a 	mul	r3,r5,r3
  81095c:	4808d43a 	srli	r4,r9,16
  810960:	298b383a 	mul	r5,r5,r6
  810964:	10c5883a 	add	r2,r2,r3
  810968:	2089883a 	add	r4,r4,r2
  81096c:	20c0022e 	bgeu	r4,r3,810978 <__udivdi3+0x424>
  810970:	00800074 	movhi	r2,1
  810974:	288b883a 	add	r5,r5,r2
  810978:	2004d43a 	srli	r2,r4,16
  81097c:	288b883a 	add	r5,r5,r2
  810980:	89403f36 	bltu	r17,r5,810a80 <__udivdi3+0x52c>
  810984:	89403926 	beq	r17,r5,810a6c <__udivdi3+0x518>
  810988:	4005883a 	mov	r2,r8
  81098c:	0009883a 	mov	r4,zero
  810990:	003f5106 	br	8106d8 <__udivdi3+0x184>
  810994:	85a0983a 	sll	r16,r16,r22
  810998:	3585c83a 	sub	r2,r6,r22
  81099c:	a0a2d83a 	srl	r17,r20,r2
  8109a0:	802ad43a 	srli	r21,r16,16
  8109a4:	e084d83a 	srl	r2,fp,r2
  8109a8:	a586983a 	sll	r3,r20,r22
  8109ac:	8809883a 	mov	r4,r17
  8109b0:	a80b883a 	mov	r5,r21
  8109b4:	1886b03a 	or	r3,r3,r2
  8109b8:	d8c00115 	stw	r3,4(sp)
  8109bc:	08088700 	call	808870 <__udivsi3>
  8109c0:	8809883a 	mov	r4,r17
  8109c4:	a80b883a 	mov	r5,r21
  8109c8:	d8800415 	stw	r2,16(sp)
  8109cc:	08088780 	call	808878 <__umodsi3>
  8109d0:	d9000117 	ldw	r4,4(sp)
  8109d4:	d9400417 	ldw	r5,16(sp)
  8109d8:	1004943a 	slli	r2,r2,16
  8109dc:	85ffffcc 	andi	r23,r16,65535
  8109e0:	2006d43a 	srli	r3,r4,16
  8109e4:	b963383a 	mul	r17,r23,r5
  8109e8:	10c4b03a 	or	r2,r2,r3
  8109ec:	1440042e 	bgeu	r2,r17,810a00 <__udivdi3+0x4ac>
  8109f0:	297fffc4 	addi	r5,r5,-1
  8109f4:	1405883a 	add	r2,r2,r16
  8109f8:	d9400415 	stw	r5,16(sp)
  8109fc:	1400442e 	bgeu	r2,r16,810b10 <__udivdi3+0x5bc>
  810a00:	1463c83a 	sub	r17,r2,r17
  810a04:	8809883a 	mov	r4,r17
  810a08:	a80b883a 	mov	r5,r21
  810a0c:	08088700 	call	808870 <__udivsi3>
  810a10:	8809883a 	mov	r4,r17
  810a14:	a80b883a 	mov	r5,r21
  810a18:	1029883a 	mov	r20,r2
  810a1c:	08088780 	call	808878 <__umodsi3>
  810a20:	d9400117 	ldw	r5,4(sp)
  810a24:	1004943a 	slli	r2,r2,16
  810a28:	bd09383a 	mul	r4,r23,r20
  810a2c:	28ffffcc 	andi	r3,r5,65535
  810a30:	10c6b03a 	or	r3,r2,r3
  810a34:	1900062e 	bgeu	r3,r4,810a50 <__udivdi3+0x4fc>
  810a38:	1c07883a 	add	r3,r3,r16
  810a3c:	a53fffc4 	addi	r20,r20,-1
  810a40:	1c000336 	bltu	r3,r16,810a50 <__udivdi3+0x4fc>
  810a44:	1900022e 	bgeu	r3,r4,810a50 <__udivdi3+0x4fc>
  810a48:	a53fffc4 	addi	r20,r20,-1
  810a4c:	1c07883a 	add	r3,r3,r16
  810a50:	d9400417 	ldw	r5,16(sp)
  810a54:	e5b8983a 	sll	fp,fp,r22
  810a58:	1923c83a 	sub	r17,r3,r4
  810a5c:	2804943a 	slli	r2,r5,16
  810a60:	a0a8b03a 	or	r20,r20,r2
  810a64:	dd000315 	stw	r20,12(sp)
  810a68:	003ee106 	br	8105f0 <__udivdi3+0x9c>
  810a6c:	2004943a 	slli	r2,r4,16
  810a70:	e5c8983a 	sll	r4,fp,r23
  810a74:	48ffffcc 	andi	r3,r9,65535
  810a78:	10c5883a 	add	r2,r2,r3
  810a7c:	20bfc22e 	bgeu	r4,r2,810988 <__udivdi3+0x434>
  810a80:	40bfffc4 	addi	r2,r8,-1
  810a84:	0009883a 	mov	r4,zero
  810a88:	003f1306 	br	8106d8 <__udivdi3+0x184>
  810a8c:	01400204 	movi	r5,8
  810a90:	2805883a 	mov	r2,r5
  810a94:	003f0306 	br	8106a4 <__udivdi3+0x150>
  810a98:	01400604 	movi	r5,24
  810a9c:	2805883a 	mov	r2,r5
  810aa0:	003f0006 	br	8106a4 <__udivdi3+0x150>
  810aa4:	01400204 	movi	r5,8
  810aa8:	2805883a 	mov	r2,r5
  810aac:	003ec206 	br	8105b8 <__udivdi3+0x64>
  810ab0:	01400604 	movi	r5,24
  810ab4:	2805883a 	mov	r2,r5
  810ab8:	003ebf06 	br	8105b8 <__udivdi3+0x64>
  810abc:	01400204 	movi	r5,8
  810ac0:	2805883a 	mov	r2,r5
  810ac4:	003f1706 	br	810724 <__udivdi3+0x1d0>
  810ac8:	01400604 	movi	r5,24
  810acc:	2805883a 	mov	r2,r5
  810ad0:	003f1406 	br	810724 <__udivdi3+0x1d0>
  810ad4:	89ff962e 	bgeu	r17,r7,810930 <__udivdi3+0x3dc>
  810ad8:	8d63883a 	add	r17,r17,r21
  810adc:	843fffc4 	addi	r16,r16,-1
  810ae0:	003f9306 	br	810930 <__udivdi3+0x3dc>
  810ae4:	147f802e 	bgeu	r2,r17,8108e8 <__udivdi3+0x394>
  810ae8:	a53fffc4 	addi	r20,r20,-1
  810aec:	1545883a 	add	r2,r2,r21
  810af0:	003f7d06 	br	8108e8 <__udivdi3+0x394>
  810af4:	a53fffc4 	addi	r20,r20,-1
  810af8:	003ede06 	br	810674 <__udivdi3+0x120>
  810afc:	b5bfffc4 	addi	r22,r22,-1
  810b00:	1405883a 	add	r2,r2,r16
  810b04:	003f2806 	br	8107a8 <__udivdi3+0x254>
  810b08:	a53fffc4 	addi	r20,r20,-1
  810b0c:	003f3706 	br	8107ec <__udivdi3+0x298>
  810b10:	147fbb2e 	bgeu	r2,r17,810a00 <__udivdi3+0x4ac>
  810b14:	297fffc4 	addi	r5,r5,-1
  810b18:	1405883a 	add	r2,r2,r16
  810b1c:	d9400415 	stw	r5,16(sp)
  810b20:	003fb706 	br	810a00 <__udivdi3+0x4ac>
  810b24:	b5bfffc4 	addi	r22,r22,-1
  810b28:	1405883a 	add	r2,r2,r16
  810b2c:	003ec006 	br	810630 <__udivdi3+0xdc>

00810b30 <__umoddi3>:
  810b30:	defff104 	addi	sp,sp,-60
  810b34:	dd800b15 	stw	r22,44(sp)
  810b38:	dd000915 	stw	r20,36(sp)
  810b3c:	dc000515 	stw	r16,20(sp)
  810b40:	dfc00e15 	stw	ra,56(sp)
  810b44:	df000d15 	stw	fp,52(sp)
  810b48:	ddc00c15 	stw	r23,48(sp)
  810b4c:	dd400a15 	stw	r21,40(sp)
  810b50:	dcc00815 	stw	r19,32(sp)
  810b54:	dc800715 	stw	r18,28(sp)
  810b58:	dc400615 	stw	r17,24(sp)
  810b5c:	3021883a 	mov	r16,r6
  810b60:	202d883a 	mov	r22,r4
  810b64:	2829883a 	mov	r20,r5
  810b68:	38002b1e 	bne	r7,zero,810c18 <__umoddi3+0xe8>
  810b6c:	29805036 	bltu	r5,r6,810cb0 <__umoddi3+0x180>
  810b70:	30008a26 	beq	r6,zero,810d9c <__umoddi3+0x26c>
  810b74:	00bfffd4 	movui	r2,65535
  810b78:	14008236 	bltu	r2,r16,810d84 <__umoddi3+0x254>
  810b7c:	00803fc4 	movi	r2,255
  810b80:	14013636 	bltu	r2,r16,81105c <__umoddi3+0x52c>
  810b84:	000b883a 	mov	r5,zero
  810b88:	0005883a 	mov	r2,zero
  810b8c:	8084d83a 	srl	r2,r16,r2
  810b90:	010020b4 	movhi	r4,130
  810b94:	21305804 	addi	r4,r4,-16032
  810b98:	01800804 	movi	r6,32
  810b9c:	1105883a 	add	r2,r2,r4
  810ba0:	10c00003 	ldbu	r3,0(r2)
  810ba4:	28c7883a 	add	r3,r5,r3
  810ba8:	30efc83a 	sub	r23,r6,r3
  810bac:	b800941e 	bne	r23,zero,810e00 <__umoddi3+0x2d0>
  810bb0:	802ad43a 	srli	r21,r16,16
  810bb4:	a423c83a 	sub	r17,r20,r16
  810bb8:	0039883a 	mov	fp,zero
  810bbc:	853fffcc 	andi	r20,r16,65535
  810bc0:	8809883a 	mov	r4,r17
  810bc4:	a80b883a 	mov	r5,r21
  810bc8:	08088700 	call	808870 <__udivsi3>
  810bcc:	8809883a 	mov	r4,r17
  810bd0:	a80b883a 	mov	r5,r21
  810bd4:	a0a3383a 	mul	r17,r20,r2
  810bd8:	08088780 	call	808878 <__umodsi3>
  810bdc:	1004943a 	slli	r2,r2,16
  810be0:	b006d43a 	srli	r3,r22,16
  810be4:	10c4b03a 	or	r2,r2,r3
  810be8:	1440032e 	bgeu	r2,r17,810bf8 <__umoddi3+0xc8>
  810bec:	1405883a 	add	r2,r2,r16
  810bf0:	14000136 	bltu	r2,r16,810bf8 <__umoddi3+0xc8>
  810bf4:	14413536 	bltu	r2,r17,8110cc <__umoddi3+0x59c>
  810bf8:	1463c83a 	sub	r17,r2,r17
  810bfc:	8809883a 	mov	r4,r17
  810c00:	a80b883a 	mov	r5,r21
  810c04:	08088700 	call	808870 <__udivsi3>
  810c08:	8809883a 	mov	r4,r17
  810c0c:	a0a3383a 	mul	r17,r20,r2
  810c10:	a80b883a 	mov	r5,r21
  810c14:	00004d06 	br	810d4c <__umoddi3+0x21c>
  810c18:	380d883a 	mov	r6,r7
  810c1c:	29c0102e 	bgeu	r5,r7,810c60 <__umoddi3+0x130>
  810c20:	2011883a 	mov	r8,r4
  810c24:	2813883a 	mov	r9,r5
  810c28:	4005883a 	mov	r2,r8
  810c2c:	4807883a 	mov	r3,r9
  810c30:	dfc00e17 	ldw	ra,56(sp)
  810c34:	df000d17 	ldw	fp,52(sp)
  810c38:	ddc00c17 	ldw	r23,48(sp)
  810c3c:	dd800b17 	ldw	r22,44(sp)
  810c40:	dd400a17 	ldw	r21,40(sp)
  810c44:	dd000917 	ldw	r20,36(sp)
  810c48:	dcc00817 	ldw	r19,32(sp)
  810c4c:	dc800717 	ldw	r18,28(sp)
  810c50:	dc400617 	ldw	r17,24(sp)
  810c54:	dc000517 	ldw	r16,20(sp)
  810c58:	dec00f04 	addi	sp,sp,60
  810c5c:	f800283a 	ret
  810c60:	00bfffd4 	movui	r2,65535
  810c64:	11c05a36 	bltu	r2,r7,810dd0 <__umoddi3+0x2a0>
  810c68:	00803fc4 	movi	r2,255
  810c6c:	11c0fe36 	bltu	r2,r7,811068 <__umoddi3+0x538>
  810c70:	000b883a 	mov	r5,zero
  810c74:	0005883a 	mov	r2,zero
  810c78:	3084d83a 	srl	r2,r6,r2
  810c7c:	010020b4 	movhi	r4,130
  810c80:	21305804 	addi	r4,r4,-16032
  810c84:	01c00804 	movi	r7,32
  810c88:	1105883a 	add	r2,r2,r4
  810c8c:	10c00003 	ldbu	r3,0(r2)
  810c90:	28c7883a 	add	r3,r5,r3
  810c94:	38ebc83a 	sub	r21,r7,r3
  810c98:	a800851e 	bne	r21,zero,810eb0 <__umoddi3+0x380>
  810c9c:	35005236 	bltu	r6,r20,810de8 <__umoddi3+0x2b8>
  810ca0:	b400512e 	bgeu	r22,r16,810de8 <__umoddi3+0x2b8>
  810ca4:	b011883a 	mov	r8,r22
  810ca8:	a013883a 	mov	r9,r20
  810cac:	003fde06 	br	810c28 <__umoddi3+0xf8>
  810cb0:	00bfffd4 	movui	r2,65535
  810cb4:	11804036 	bltu	r2,r6,810db8 <__umoddi3+0x288>
  810cb8:	00803fc4 	movi	r2,255
  810cbc:	1180ed36 	bltu	r2,r6,811074 <__umoddi3+0x544>
  810cc0:	000b883a 	mov	r5,zero
  810cc4:	0005883a 	mov	r2,zero
  810cc8:	8084d83a 	srl	r2,r16,r2
  810ccc:	010020b4 	movhi	r4,130
  810cd0:	21305804 	addi	r4,r4,-16032
  810cd4:	01800804 	movi	r6,32
  810cd8:	1105883a 	add	r2,r2,r4
  810cdc:	10c00003 	ldbu	r3,0(r2)
  810ce0:	28c7883a 	add	r3,r5,r3
  810ce4:	30c7c83a 	sub	r3,r6,r3
  810ce8:	1800bf1e 	bne	r3,zero,810fe8 <__umoddi3+0x4b8>
  810cec:	0039883a 	mov	fp,zero
  810cf0:	802ad43a 	srli	r21,r16,16
  810cf4:	a009883a 	mov	r4,r20
  810cf8:	85ffffcc 	andi	r23,r16,65535
  810cfc:	a80b883a 	mov	r5,r21
  810d00:	08088700 	call	808870 <__udivsi3>
  810d04:	a009883a 	mov	r4,r20
  810d08:	a80b883a 	mov	r5,r21
  810d0c:	b8a3383a 	mul	r17,r23,r2
  810d10:	08088780 	call	808878 <__umodsi3>
  810d14:	1004943a 	slli	r2,r2,16
  810d18:	b006d43a 	srli	r3,r22,16
  810d1c:	10c4b03a 	or	r2,r2,r3
  810d20:	1440032e 	bgeu	r2,r17,810d30 <__umoddi3+0x200>
  810d24:	1405883a 	add	r2,r2,r16
  810d28:	14000136 	bltu	r2,r16,810d30 <__umoddi3+0x200>
  810d2c:	1440e536 	bltu	r2,r17,8110c4 <__umoddi3+0x594>
  810d30:	1463c83a 	sub	r17,r2,r17
  810d34:	8809883a 	mov	r4,r17
  810d38:	a80b883a 	mov	r5,r21
  810d3c:	08088700 	call	808870 <__udivsi3>
  810d40:	8809883a 	mov	r4,r17
  810d44:	b8a3383a 	mul	r17,r23,r2
  810d48:	a80b883a 	mov	r5,r21
  810d4c:	08088780 	call	808878 <__umodsi3>
  810d50:	1004943a 	slli	r2,r2,16
  810d54:	b0ffffcc 	andi	r3,r22,65535
  810d58:	10c4b03a 	or	r2,r2,r3
  810d5c:	1440042e 	bgeu	r2,r17,810d70 <__umoddi3+0x240>
  810d60:	1405883a 	add	r2,r2,r16
  810d64:	14000236 	bltu	r2,r16,810d70 <__umoddi3+0x240>
  810d68:	1440012e 	bgeu	r2,r17,810d70 <__umoddi3+0x240>
  810d6c:	1405883a 	add	r2,r2,r16
  810d70:	1445c83a 	sub	r2,r2,r17
  810d74:	1724d83a 	srl	r18,r2,fp
  810d78:	0013883a 	mov	r9,zero
  810d7c:	9011883a 	mov	r8,r18
  810d80:	003fa906 	br	810c28 <__umoddi3+0xf8>
  810d84:	00804034 	movhi	r2,256
  810d88:	10bfffc4 	addi	r2,r2,-1
  810d8c:	1400b036 	bltu	r2,r16,811050 <__umoddi3+0x520>
  810d90:	01400404 	movi	r5,16
  810d94:	2805883a 	mov	r2,r5
  810d98:	003f7c06 	br	810b8c <__umoddi3+0x5c>
  810d9c:	01000044 	movi	r4,1
  810da0:	000b883a 	mov	r5,zero
  810da4:	08088700 	call	808870 <__udivsi3>
  810da8:	1021883a 	mov	r16,r2
  810dac:	00bfffd4 	movui	r2,65535
  810db0:	143ff436 	bltu	r2,r16,810d84 <__umoddi3+0x254>
  810db4:	003f7106 	br	810b7c <__umoddi3+0x4c>
  810db8:	00804034 	movhi	r2,256
  810dbc:	10bfffc4 	addi	r2,r2,-1
  810dc0:	1180af36 	bltu	r2,r6,811080 <__umoddi3+0x550>
  810dc4:	01400404 	movi	r5,16
  810dc8:	2805883a 	mov	r2,r5
  810dcc:	003fbe06 	br	810cc8 <__umoddi3+0x198>
  810dd0:	00804034 	movhi	r2,256
  810dd4:	10bfffc4 	addi	r2,r2,-1
  810dd8:	11c0ac36 	bltu	r2,r7,81108c <__umoddi3+0x55c>
  810ddc:	01400404 	movi	r5,16
  810de0:	2805883a 	mov	r2,r5
  810de4:	003fa406 	br	810c78 <__umoddi3+0x148>
  810de8:	b409c83a 	sub	r4,r22,r16
  810dec:	b105803a 	cmpltu	r2,r22,r4
  810df0:	a187c83a 	sub	r3,r20,r6
  810df4:	18a9c83a 	sub	r20,r3,r2
  810df8:	202d883a 	mov	r22,r4
  810dfc:	003fa906 	br	810ca4 <__umoddi3+0x174>
  810e00:	85e0983a 	sll	r16,r16,r23
  810e04:	35c5c83a 	sub	r2,r6,r23
  810e08:	a0a2d83a 	srl	r17,r20,r2
  810e0c:	802ad43a 	srli	r21,r16,16
  810e10:	b084d83a 	srl	r2,r22,r2
  810e14:	a5c6983a 	sll	r3,r20,r23
  810e18:	8809883a 	mov	r4,r17
  810e1c:	a80b883a 	mov	r5,r21
  810e20:	1886b03a 	or	r3,r3,r2
  810e24:	d8c00115 	stw	r3,4(sp)
  810e28:	853fffcc 	andi	r20,r16,65535
  810e2c:	08088700 	call	808870 <__udivsi3>
  810e30:	8809883a 	mov	r4,r17
  810e34:	a80b883a 	mov	r5,r21
  810e38:	a0a3383a 	mul	r17,r20,r2
  810e3c:	08088780 	call	808878 <__umodsi3>
  810e40:	d9000117 	ldw	r4,4(sp)
  810e44:	1004943a 	slli	r2,r2,16
  810e48:	b839883a 	mov	fp,r23
  810e4c:	2006d43a 	srli	r3,r4,16
  810e50:	10c4b03a 	or	r2,r2,r3
  810e54:	1440022e 	bgeu	r2,r17,810e60 <__umoddi3+0x330>
  810e58:	1405883a 	add	r2,r2,r16
  810e5c:	1400962e 	bgeu	r2,r16,8110b8 <__umoddi3+0x588>
  810e60:	1463c83a 	sub	r17,r2,r17
  810e64:	8809883a 	mov	r4,r17
  810e68:	a80b883a 	mov	r5,r21
  810e6c:	08088700 	call	808870 <__udivsi3>
  810e70:	8809883a 	mov	r4,r17
  810e74:	a80b883a 	mov	r5,r21
  810e78:	a0a3383a 	mul	r17,r20,r2
  810e7c:	08088780 	call	808878 <__umodsi3>
  810e80:	d9400117 	ldw	r5,4(sp)
  810e84:	1004943a 	slli	r2,r2,16
  810e88:	28ffffcc 	andi	r3,r5,65535
  810e8c:	10c4b03a 	or	r2,r2,r3
  810e90:	1440042e 	bgeu	r2,r17,810ea4 <__umoddi3+0x374>
  810e94:	1405883a 	add	r2,r2,r16
  810e98:	14000236 	bltu	r2,r16,810ea4 <__umoddi3+0x374>
  810e9c:	1440012e 	bgeu	r2,r17,810ea4 <__umoddi3+0x374>
  810ea0:	1405883a 	add	r2,r2,r16
  810ea4:	b5ec983a 	sll	r22,r22,r23
  810ea8:	1463c83a 	sub	r17,r2,r17
  810eac:	003f4406 	br	810bc0 <__umoddi3+0x90>
  810eb0:	3d4fc83a 	sub	r7,r7,r21
  810eb4:	3546983a 	sll	r3,r6,r21
  810eb8:	81c4d83a 	srl	r2,r16,r7
  810ebc:	a1e2d83a 	srl	r17,r20,r7
  810ec0:	a54c983a 	sll	r6,r20,r21
  810ec4:	18aeb03a 	or	r23,r3,r2
  810ec8:	b828d43a 	srli	r20,r23,16
  810ecc:	b1c4d83a 	srl	r2,r22,r7
  810ed0:	8809883a 	mov	r4,r17
  810ed4:	a00b883a 	mov	r5,r20
  810ed8:	308cb03a 	or	r6,r6,r2
  810edc:	d9c00315 	stw	r7,12(sp)
  810ee0:	d9800215 	stw	r6,8(sp)
  810ee4:	08088700 	call	808870 <__udivsi3>
  810ee8:	8809883a 	mov	r4,r17
  810eec:	a00b883a 	mov	r5,r20
  810ef0:	1039883a 	mov	fp,r2
  810ef4:	08088780 	call	808878 <__umodsi3>
  810ef8:	b8ffffcc 	andi	r3,r23,65535
  810efc:	d8c00415 	stw	r3,16(sp)
  810f00:	d9000217 	ldw	r4,8(sp)
  810f04:	d9400417 	ldw	r5,16(sp)
  810f08:	1004943a 	slli	r2,r2,16
  810f0c:	2006d43a 	srli	r3,r4,16
  810f10:	8560983a 	sll	r16,r16,r21
  810f14:	2f23383a 	mul	r17,r5,fp
  810f18:	10c4b03a 	or	r2,r2,r3
  810f1c:	dc000015 	stw	r16,0(sp)
  810f20:	b56c983a 	sll	r22,r22,r21
  810f24:	1440032e 	bgeu	r2,r17,810f34 <__umoddi3+0x404>
  810f28:	15c5883a 	add	r2,r2,r23
  810f2c:	e73fffc4 	addi	fp,fp,-1
  810f30:	15c05d2e 	bgeu	r2,r23,8110a8 <__umoddi3+0x578>
  810f34:	1463c83a 	sub	r17,r2,r17
  810f38:	8809883a 	mov	r4,r17
  810f3c:	a00b883a 	mov	r5,r20
  810f40:	08088700 	call	808870 <__udivsi3>
  810f44:	8809883a 	mov	r4,r17
  810f48:	a00b883a 	mov	r5,r20
  810f4c:	1021883a 	mov	r16,r2
  810f50:	08088780 	call	808878 <__umodsi3>
  810f54:	d8c00417 	ldw	r3,16(sp)
  810f58:	d9000217 	ldw	r4,8(sp)
  810f5c:	1004943a 	slli	r2,r2,16
  810f60:	1c23383a 	mul	r17,r3,r16
  810f64:	20ffffcc 	andi	r3,r4,65535
  810f68:	10ceb03a 	or	r7,r2,r3
  810f6c:	3c40032e 	bgeu	r7,r17,810f7c <__umoddi3+0x44c>
  810f70:	3dcf883a 	add	r7,r7,r23
  810f74:	843fffc4 	addi	r16,r16,-1
  810f78:	3dc0472e 	bgeu	r7,r23,811098 <__umoddi3+0x568>
  810f7c:	e004943a 	slli	r2,fp,16
  810f80:	d9400017 	ldw	r5,0(sp)
  810f84:	3c4fc83a 	sub	r7,r7,r17
  810f88:	8084b03a 	or	r2,r16,r2
  810f8c:	28ffffcc 	andi	r3,r5,65535
  810f90:	280cd43a 	srli	r6,r5,16
  810f94:	100ad43a 	srli	r5,r2,16
  810f98:	10bfffcc 	andi	r2,r2,65535
  810f9c:	10d1383a 	mul	r8,r2,r3
  810fa0:	28c7383a 	mul	r3,r5,r3
  810fa4:	1185383a 	mul	r2,r2,r6
  810fa8:	4008d43a 	srli	r4,r8,16
  810fac:	298b383a 	mul	r5,r5,r6
  810fb0:	10c5883a 	add	r2,r2,r3
  810fb4:	2089883a 	add	r4,r4,r2
  810fb8:	20c0022e 	bgeu	r4,r3,810fc4 <__umoddi3+0x494>
  810fbc:	00800074 	movhi	r2,1
  810fc0:	288b883a 	add	r5,r5,r2
  810fc4:	2004d43a 	srli	r2,r4,16
  810fc8:	2008943a 	slli	r4,r4,16
  810fcc:	40ffffcc 	andi	r3,r8,65535
  810fd0:	288b883a 	add	r5,r5,r2
  810fd4:	20c9883a 	add	r4,r4,r3
  810fd8:	39400b36 	bltu	r7,r5,811008 <__umoddi3+0x4d8>
  810fdc:	39403d26 	beq	r7,r5,8110d4 <__umoddi3+0x5a4>
  810fe0:	394bc83a 	sub	r5,r7,r5
  810fe4:	00000f06 	br	811024 <__umoddi3+0x4f4>
  810fe8:	30c5c83a 	sub	r2,r6,r3
  810fec:	1839883a 	mov	fp,r3
  810ff0:	b084d83a 	srl	r2,r22,r2
  810ff4:	a0c6983a 	sll	r3,r20,r3
  810ff8:	8720983a 	sll	r16,r16,fp
  810ffc:	b72c983a 	sll	r22,r22,fp
  811000:	18a8b03a 	or	r20,r3,r2
  811004:	003f3a06 	br	810cf0 <__umoddi3+0x1c0>
  811008:	d8c00017 	ldw	r3,0(sp)
  81100c:	20c5c83a 	sub	r2,r4,r3
  811010:	2089803a 	cmpltu	r4,r4,r2
  811014:	2dc7c83a 	sub	r3,r5,r23
  811018:	1907c83a 	sub	r3,r3,r4
  81101c:	38cbc83a 	sub	r5,r7,r3
  811020:	1009883a 	mov	r4,r2
  811024:	b105c83a 	sub	r2,r22,r4
  811028:	b087803a 	cmpltu	r3,r22,r2
  81102c:	28c7c83a 	sub	r3,r5,r3
  811030:	d9400317 	ldw	r5,12(sp)
  811034:	1544d83a 	srl	r2,r2,r21
  811038:	1948983a 	sll	r4,r3,r5
  81103c:	1d46d83a 	srl	r3,r3,r21
  811040:	20a4b03a 	or	r18,r4,r2
  811044:	9011883a 	mov	r8,r18
  811048:	1813883a 	mov	r9,r3
  81104c:	003ef606 	br	810c28 <__umoddi3+0xf8>
  811050:	01400604 	movi	r5,24
  811054:	2805883a 	mov	r2,r5
  811058:	003ecc06 	br	810b8c <__umoddi3+0x5c>
  81105c:	01400204 	movi	r5,8
  811060:	2805883a 	mov	r2,r5
  811064:	003ec906 	br	810b8c <__umoddi3+0x5c>
  811068:	01400204 	movi	r5,8
  81106c:	2805883a 	mov	r2,r5
  811070:	003f0106 	br	810c78 <__umoddi3+0x148>
  811074:	01400204 	movi	r5,8
  811078:	2805883a 	mov	r2,r5
  81107c:	003f1206 	br	810cc8 <__umoddi3+0x198>
  811080:	01400604 	movi	r5,24
  811084:	2805883a 	mov	r2,r5
  811088:	003f0f06 	br	810cc8 <__umoddi3+0x198>
  81108c:	01400604 	movi	r5,24
  811090:	2805883a 	mov	r2,r5
  811094:	003ef806 	br	810c78 <__umoddi3+0x148>
  811098:	3c7fb82e 	bgeu	r7,r17,810f7c <__umoddi3+0x44c>
  81109c:	843fffc4 	addi	r16,r16,-1
  8110a0:	3dcf883a 	add	r7,r7,r23
  8110a4:	003fb506 	br	810f7c <__umoddi3+0x44c>
  8110a8:	147fa22e 	bgeu	r2,r17,810f34 <__umoddi3+0x404>
  8110ac:	e73fffc4 	addi	fp,fp,-1
  8110b0:	15c5883a 	add	r2,r2,r23
  8110b4:	003f9f06 	br	810f34 <__umoddi3+0x404>
  8110b8:	147f692e 	bgeu	r2,r17,810e60 <__umoddi3+0x330>
  8110bc:	1405883a 	add	r2,r2,r16
  8110c0:	003f6706 	br	810e60 <__umoddi3+0x330>
  8110c4:	1405883a 	add	r2,r2,r16
  8110c8:	003f1906 	br	810d30 <__umoddi3+0x200>
  8110cc:	1405883a 	add	r2,r2,r16
  8110d0:	003ec906 	br	810bf8 <__umoddi3+0xc8>
  8110d4:	b13fcc36 	bltu	r22,r4,811008 <__umoddi3+0x4d8>
  8110d8:	000b883a 	mov	r5,zero
  8110dc:	003fd106 	br	811024 <__umoddi3+0x4f4>

008110e0 <__gedf2>:
  8110e0:	deffef04 	addi	sp,sp,-68
  8110e4:	dc400f15 	stw	r17,60(sp)
  8110e8:	dc400404 	addi	r17,sp,16
  8110ec:	2005883a 	mov	r2,r4
  8110f0:	2807883a 	mov	r3,r5
  8110f4:	dc000e15 	stw	r16,56(sp)
  8110f8:	d809883a 	mov	r4,sp
  8110fc:	880b883a 	mov	r5,r17
  811100:	dc000904 	addi	r16,sp,36
  811104:	d8c00115 	stw	r3,4(sp)
  811108:	d8800015 	stw	r2,0(sp)
  81110c:	d9800215 	stw	r6,8(sp)
  811110:	dfc01015 	stw	ra,64(sp)
  811114:	d9c00315 	stw	r7,12(sp)
  811118:	0808ed40 	call	808ed4 <__unpack_d>
  81111c:	d9000204 	addi	r4,sp,8
  811120:	800b883a 	mov	r5,r16
  811124:	0808ed40 	call	808ed4 <__unpack_d>
  811128:	d8800417 	ldw	r2,16(sp)
  81112c:	00c00044 	movi	r3,1
  811130:	01bfffc4 	movi	r6,-1
  811134:	1880062e 	bgeu	r3,r2,811150 <__gedf2+0x70>
  811138:	d8800917 	ldw	r2,36(sp)
  81113c:	8809883a 	mov	r4,r17
  811140:	800b883a 	mov	r5,r16
  811144:	1880022e 	bgeu	r3,r2,811150 <__gedf2+0x70>
  811148:	080900c0 	call	80900c <__fpcmp_parts_d>
  81114c:	100d883a 	mov	r6,r2
  811150:	3005883a 	mov	r2,r6
  811154:	dfc01017 	ldw	ra,64(sp)
  811158:	dc400f17 	ldw	r17,60(sp)
  81115c:	dc000e17 	ldw	r16,56(sp)
  811160:	dec01104 	addi	sp,sp,68
  811164:	f800283a 	ret

00811168 <__floatunsidf>:
  811168:	defff204 	addi	sp,sp,-56
  81116c:	dfc00d15 	stw	ra,52(sp)
  811170:	ddc00c15 	stw	r23,48(sp)
  811174:	dd800b15 	stw	r22,44(sp)
  811178:	dd400a15 	stw	r21,40(sp)
  81117c:	dd000915 	stw	r20,36(sp)
  811180:	dcc00815 	stw	r19,32(sp)
  811184:	dc800715 	stw	r18,28(sp)
  811188:	dc400615 	stw	r17,24(sp)
  81118c:	dc000515 	stw	r16,20(sp)
  811190:	d8000115 	stw	zero,4(sp)
  811194:	20000f1e 	bne	r4,zero,8111d4 <__floatunsidf+0x6c>
  811198:	00800084 	movi	r2,2
  81119c:	d8800015 	stw	r2,0(sp)
  8111a0:	d809883a 	mov	r4,sp
  8111a4:	0808bc00 	call	808bc0 <__pack_d>
  8111a8:	dfc00d17 	ldw	ra,52(sp)
  8111ac:	ddc00c17 	ldw	r23,48(sp)
  8111b0:	dd800b17 	ldw	r22,44(sp)
  8111b4:	dd400a17 	ldw	r21,40(sp)
  8111b8:	dd000917 	ldw	r20,36(sp)
  8111bc:	dcc00817 	ldw	r19,32(sp)
  8111c0:	dc800717 	ldw	r18,28(sp)
  8111c4:	dc400617 	ldw	r17,24(sp)
  8111c8:	dc000517 	ldw	r16,20(sp)
  8111cc:	dec00e04 	addi	sp,sp,56
  8111d0:	f800283a 	ret
  8111d4:	008000c4 	movi	r2,3
  8111d8:	00c00f04 	movi	r3,60
  8111dc:	002f883a 	mov	r23,zero
  8111e0:	202d883a 	mov	r22,r4
  8111e4:	d8800015 	stw	r2,0(sp)
  8111e8:	d8c00215 	stw	r3,8(sp)
  8111ec:	d9000315 	stw	r4,12(sp)
  8111f0:	ddc00415 	stw	r23,16(sp)
  8111f4:	08089180 	call	808918 <__clzsi2>
  8111f8:	12400744 	addi	r9,r2,29
  8111fc:	48000b16 	blt	r9,zero,81122c <__floatunsidf+0xc4>
  811200:	483fe726 	beq	r9,zero,8111a0 <__floatunsidf+0x38>
  811204:	10bfff44 	addi	r2,r2,-3
  811208:	10002e16 	blt	r2,zero,8112c4 <__floatunsidf+0x15c>
  81120c:	b0a2983a 	sll	r17,r22,r2
  811210:	0021883a 	mov	r16,zero
  811214:	d8800217 	ldw	r2,8(sp)
  811218:	dc400415 	stw	r17,16(sp)
  81121c:	dc000315 	stw	r16,12(sp)
  811220:	1245c83a 	sub	r2,r2,r9
  811224:	d8800215 	stw	r2,8(sp)
  811228:	003fdd06 	br	8111a0 <__floatunsidf+0x38>
  81122c:	0255c83a 	sub	r10,zero,r9
  811230:	51bff804 	addi	r6,r10,-32
  811234:	30001b16 	blt	r6,zero,8112a4 <__floatunsidf+0x13c>
  811238:	b9a8d83a 	srl	r20,r23,r6
  81123c:	002b883a 	mov	r21,zero
  811240:	000f883a 	mov	r7,zero
  811244:	01000044 	movi	r4,1
  811248:	0011883a 	mov	r8,zero
  81124c:	30002516 	blt	r6,zero,8112e4 <__floatunsidf+0x17c>
  811250:	21a6983a 	sll	r19,r4,r6
  811254:	0025883a 	mov	r18,zero
  811258:	00bfffc4 	movi	r2,-1
  81125c:	9089883a 	add	r4,r18,r2
  811260:	988b883a 	add	r5,r19,r2
  811264:	248d803a 	cmpltu	r6,r4,r18
  811268:	314b883a 	add	r5,r6,r5
  81126c:	b104703a 	and	r2,r22,r4
  811270:	b946703a 	and	r3,r23,r5
  811274:	10c4b03a 	or	r2,r2,r3
  811278:	10000226 	beq	r2,zero,811284 <__floatunsidf+0x11c>
  81127c:	01c00044 	movi	r7,1
  811280:	0011883a 	mov	r8,zero
  811284:	d9000217 	ldw	r4,8(sp)
  811288:	a1c4b03a 	or	r2,r20,r7
  81128c:	aa06b03a 	or	r3,r21,r8
  811290:	2249c83a 	sub	r4,r4,r9
  811294:	d8c00415 	stw	r3,16(sp)
  811298:	d9000215 	stw	r4,8(sp)
  81129c:	d8800315 	stw	r2,12(sp)
  8112a0:	003fbf06 	br	8111a0 <__floatunsidf+0x38>
  8112a4:	bdc7883a 	add	r3,r23,r23
  8112a8:	008007c4 	movi	r2,31
  8112ac:	1285c83a 	sub	r2,r2,r10
  8112b0:	1886983a 	sll	r3,r3,r2
  8112b4:	b2a8d83a 	srl	r20,r22,r10
  8112b8:	baaad83a 	srl	r21,r23,r10
  8112bc:	1d28b03a 	or	r20,r3,r20
  8112c0:	003fdf06 	br	811240 <__floatunsidf+0xd8>
  8112c4:	b006d07a 	srli	r3,r22,1
  8112c8:	008007c4 	movi	r2,31
  8112cc:	1245c83a 	sub	r2,r2,r9
  8112d0:	1886d83a 	srl	r3,r3,r2
  8112d4:	ba62983a 	sll	r17,r23,r9
  8112d8:	b260983a 	sll	r16,r22,r9
  8112dc:	1c62b03a 	or	r17,r3,r17
  8112e0:	003fcc06 	br	811214 <__floatunsidf+0xac>
  8112e4:	2006d07a 	srli	r3,r4,1
  8112e8:	008007c4 	movi	r2,31
  8112ec:	1285c83a 	sub	r2,r2,r10
  8112f0:	18a6d83a 	srl	r19,r3,r2
  8112f4:	22a4983a 	sll	r18,r4,r10
  8112f8:	003fd706 	br	811258 <__floatunsidf+0xf0>

008112fc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  8112fc:	defff804 	addi	sp,sp,-32
  811300:	dfc00715 	stw	ra,28(sp)
  811304:	df000615 	stw	fp,24(sp)
  811308:	df000604 	addi	fp,sp,24
  81130c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  811310:	e0bffc17 	ldw	r2,-16(fp)
  811314:	1004803a 	cmplt	r2,r2,zero
  811318:	1000081e 	bne	r2,zero,81133c <close+0x40>
  81131c:	e0bffc17 	ldw	r2,-16(fp)
  811320:	10800324 	muli	r2,r2,12
  811324:	1007883a 	mov	r3,r2
  811328:	008020b4 	movhi	r2,130
  81132c:	10b36804 	addi	r2,r2,-12896
  811330:	1887883a 	add	r3,r3,r2
  811334:	e0ffff15 	stw	r3,-4(fp)
  811338:	00000106 	br	811340 <close+0x44>
  81133c:	e03fff15 	stw	zero,-4(fp)
  811340:	e0bfff17 	ldw	r2,-4(fp)
  811344:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  811348:	e0bffb17 	ldw	r2,-20(fp)
  81134c:	1005003a 	cmpeq	r2,r2,zero
  811350:	10001d1e 	bne	r2,zero,8113c8 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  811354:	e0bffb17 	ldw	r2,-20(fp)
  811358:	10800017 	ldw	r2,0(r2)
  81135c:	10800417 	ldw	r2,16(r2)
  811360:	1005003a 	cmpeq	r2,r2,zero
  811364:	1000071e 	bne	r2,zero,811384 <close+0x88>
  811368:	e0bffb17 	ldw	r2,-20(fp)
  81136c:	10800017 	ldw	r2,0(r2)
  811370:	10800417 	ldw	r2,16(r2)
  811374:	e13ffb17 	ldw	r4,-20(fp)
  811378:	103ee83a 	callr	r2
  81137c:	e0bffe15 	stw	r2,-8(fp)
  811380:	00000106 	br	811388 <close+0x8c>
  811384:	e03ffe15 	stw	zero,-8(fp)
  811388:	e0bffe17 	ldw	r2,-8(fp)
  81138c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  811390:	e13ffc17 	ldw	r4,-16(fp)
  811394:	0811f1c0 	call	811f1c <alt_release_fd>
    if (rval < 0)
  811398:	e0bffa17 	ldw	r2,-24(fp)
  81139c:	1004403a 	cmpge	r2,r2,zero
  8113a0:	1000071e 	bne	r2,zero,8113c0 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  8113a4:	08113f80 	call	8113f8 <alt_get_errno>
  8113a8:	e0fffa17 	ldw	r3,-24(fp)
  8113ac:	00c7c83a 	sub	r3,zero,r3
  8113b0:	10c00015 	stw	r3,0(r2)
      return -1;
  8113b4:	00bfffc4 	movi	r2,-1
  8113b8:	e0bffd15 	stw	r2,-12(fp)
  8113bc:	00000806 	br	8113e0 <close+0xe4>
    }
    return 0;
  8113c0:	e03ffd15 	stw	zero,-12(fp)
  8113c4:	00000606 	br	8113e0 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8113c8:	08113f80 	call	8113f8 <alt_get_errno>
  8113cc:	1007883a 	mov	r3,r2
  8113d0:	00801444 	movi	r2,81
  8113d4:	18800015 	stw	r2,0(r3)
    return -1;
  8113d8:	00bfffc4 	movi	r2,-1
  8113dc:	e0bffd15 	stw	r2,-12(fp)
  8113e0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  8113e4:	e037883a 	mov	sp,fp
  8113e8:	dfc00117 	ldw	ra,4(sp)
  8113ec:	df000017 	ldw	fp,0(sp)
  8113f0:	dec00204 	addi	sp,sp,8
  8113f4:	f800283a 	ret

008113f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8113f8:	defffd04 	addi	sp,sp,-12
  8113fc:	dfc00215 	stw	ra,8(sp)
  811400:	df000115 	stw	fp,4(sp)
  811404:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811408:	008020b4 	movhi	r2,130
  81140c:	10b84604 	addi	r2,r2,-7912
  811410:	10800017 	ldw	r2,0(r2)
  811414:	1005003a 	cmpeq	r2,r2,zero
  811418:	1000061e 	bne	r2,zero,811434 <alt_get_errno+0x3c>
  81141c:	008020b4 	movhi	r2,130
  811420:	10b84604 	addi	r2,r2,-7912
  811424:	10800017 	ldw	r2,0(r2)
  811428:	103ee83a 	callr	r2
  81142c:	e0bfff15 	stw	r2,-4(fp)
  811430:	00000306 	br	811440 <alt_get_errno+0x48>
  811434:	008020b4 	movhi	r2,130
  811438:	10bf6904 	addi	r2,r2,-604
  81143c:	e0bfff15 	stw	r2,-4(fp)
  811440:	e0bfff17 	ldw	r2,-4(fp)
}
  811444:	e037883a 	mov	sp,fp
  811448:	dfc00117 	ldw	ra,4(sp)
  81144c:	df000017 	ldw	fp,0(sp)
  811450:	dec00204 	addi	sp,sp,8
  811454:	f800283a 	ret

00811458 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  811458:	defffc04 	addi	sp,sp,-16
  81145c:	df000315 	stw	fp,12(sp)
  811460:	df000304 	addi	fp,sp,12
  811464:	e13ffd15 	stw	r4,-12(fp)
  811468:	e17ffe15 	stw	r5,-8(fp)
  81146c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  811470:	e0bfff17 	ldw	r2,-4(fp)
}
  811474:	e037883a 	mov	sp,fp
  811478:	df000017 	ldw	fp,0(sp)
  81147c:	dec00104 	addi	sp,sp,4
  811480:	f800283a 	ret

00811484 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  811484:	defff904 	addi	sp,sp,-28
  811488:	dfc00615 	stw	ra,24(sp)
  81148c:	df000515 	stw	fp,20(sp)
  811490:	df000504 	addi	fp,sp,20
  811494:	e13ffc15 	stw	r4,-16(fp)
  811498:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81149c:	e0bffc17 	ldw	r2,-16(fp)
  8114a0:	1004803a 	cmplt	r2,r2,zero
  8114a4:	1000081e 	bne	r2,zero,8114c8 <fstat+0x44>
  8114a8:	e0bffc17 	ldw	r2,-16(fp)
  8114ac:	10800324 	muli	r2,r2,12
  8114b0:	1007883a 	mov	r3,r2
  8114b4:	008020b4 	movhi	r2,130
  8114b8:	10b36804 	addi	r2,r2,-12896
  8114bc:	1887883a 	add	r3,r3,r2
  8114c0:	e0ffff15 	stw	r3,-4(fp)
  8114c4:	00000106 	br	8114cc <fstat+0x48>
  8114c8:	e03fff15 	stw	zero,-4(fp)
  8114cc:	e0bfff17 	ldw	r2,-4(fp)
  8114d0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8114d4:	e0bffb17 	ldw	r2,-20(fp)
  8114d8:	1005003a 	cmpeq	r2,r2,zero
  8114dc:	1000121e 	bne	r2,zero,811528 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8114e0:	e0bffb17 	ldw	r2,-20(fp)
  8114e4:	10800017 	ldw	r2,0(r2)
  8114e8:	10800817 	ldw	r2,32(r2)
  8114ec:	1005003a 	cmpeq	r2,r2,zero
  8114f0:	1000081e 	bne	r2,zero,811514 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  8114f4:	e0bffb17 	ldw	r2,-20(fp)
  8114f8:	10800017 	ldw	r2,0(r2)
  8114fc:	10800817 	ldw	r2,32(r2)
  811500:	e13ffb17 	ldw	r4,-20(fp)
  811504:	e17ffd17 	ldw	r5,-12(fp)
  811508:	103ee83a 	callr	r2
  81150c:	e0bffe15 	stw	r2,-8(fp)
  811510:	00000b06 	br	811540 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  811514:	e0fffd17 	ldw	r3,-12(fp)
  811518:	00880004 	movi	r2,8192
  81151c:	18800115 	stw	r2,4(r3)
      return 0;
  811520:	e03ffe15 	stw	zero,-8(fp)
  811524:	00000606 	br	811540 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  811528:	08115580 	call	811558 <alt_get_errno>
  81152c:	1007883a 	mov	r3,r2
  811530:	00801444 	movi	r2,81
  811534:	18800015 	stw	r2,0(r3)
    return -1;
  811538:	00bfffc4 	movi	r2,-1
  81153c:	e0bffe15 	stw	r2,-8(fp)
  811540:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  811544:	e037883a 	mov	sp,fp
  811548:	dfc00117 	ldw	ra,4(sp)
  81154c:	df000017 	ldw	fp,0(sp)
  811550:	dec00204 	addi	sp,sp,8
  811554:	f800283a 	ret

00811558 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811558:	defffd04 	addi	sp,sp,-12
  81155c:	dfc00215 	stw	ra,8(sp)
  811560:	df000115 	stw	fp,4(sp)
  811564:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811568:	008020b4 	movhi	r2,130
  81156c:	10b84604 	addi	r2,r2,-7912
  811570:	10800017 	ldw	r2,0(r2)
  811574:	1005003a 	cmpeq	r2,r2,zero
  811578:	1000061e 	bne	r2,zero,811594 <alt_get_errno+0x3c>
  81157c:	008020b4 	movhi	r2,130
  811580:	10b84604 	addi	r2,r2,-7912
  811584:	10800017 	ldw	r2,0(r2)
  811588:	103ee83a 	callr	r2
  81158c:	e0bfff15 	stw	r2,-4(fp)
  811590:	00000306 	br	8115a0 <alt_get_errno+0x48>
  811594:	008020b4 	movhi	r2,130
  811598:	10bf6904 	addi	r2,r2,-604
  81159c:	e0bfff15 	stw	r2,-4(fp)
  8115a0:	e0bfff17 	ldw	r2,-4(fp)
}
  8115a4:	e037883a 	mov	sp,fp
  8115a8:	dfc00117 	ldw	ra,4(sp)
  8115ac:	df000017 	ldw	fp,0(sp)
  8115b0:	dec00204 	addi	sp,sp,8
  8115b4:	f800283a 	ret

008115b8 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
  8115b8:	defff504 	addi	sp,sp,-44
  8115bc:	dfc00a15 	stw	ra,40(sp)
  8115c0:	df000915 	stw	fp,36(sp)
  8115c4:	dc800815 	stw	r18,32(sp)
  8115c8:	dc400715 	stw	r17,28(sp)
  8115cc:	dc000615 	stw	r16,24(sp)
  8115d0:	df000604 	addi	fp,sp,24
  8115d4:	e13ffd15 	stw	r4,-12(fp)
  8115d8:	e17ffe15 	stw	r5,-8(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
  8115dc:	e0bffe17 	ldw	r2,-8(fp)
  8115e0:	e0bffc15 	stw	r2,-16(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8115e4:	008020b4 	movhi	r2,130
  8115e8:	10bf7604 	addi	r2,r2,-552
  8115ec:	10800017 	ldw	r2,0(r2)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
  8115f0:	e0bffb15 	stw	r2,-20(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8115f4:	008020b4 	movhi	r2,130
  8115f8:	10bf7504 	addi	r2,r2,-556
  8115fc:	10800017 	ldw	r2,0(r2)
  alt_u32 tick_rate = alt_ticks_per_second ();
  811600:	e0bffa15 	stw	r2,-24(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
  811604:	e0bffa17 	ldw	r2,-24(fp)
  811608:	1005003a 	cmpeq	r2,r2,zero
  81160c:	1000661e 	bne	r2,zero,8117a8 <gettimeofday+0x1f0>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
  811610:	d0a73a17 	ldw	r2,-25368(gp)
  811614:	1021883a 	mov	r16,r2
  811618:	e13ffb17 	ldw	r4,-20(fp)
  81161c:	e17ffa17 	ldw	r5,-24(fp)
  811620:	08088700 	call	808870 <__udivsi3>
  811624:	8085883a 	add	r2,r16,r2
  811628:	1007883a 	mov	r3,r2
  81162c:	e0bffd17 	ldw	r2,-12(fp)
  811630:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
  811634:	008020b4 	movhi	r2,130
  811638:	10bf7004 	addi	r2,r2,-576
  81163c:	10800017 	ldw	r2,0(r2)
  811640:	1025883a 	mov	r18,r2
  811644:	e43ffb17 	ldw	r16,-20(fp)
  811648:	0023883a 	mov	r17,zero
  81164c:	010003f4 	movhi	r4,15
  811650:	21109004 	addi	r4,r4,16960
  811654:	e17ffa17 	ldw	r5,-24(fp)
  811658:	08088700 	call	808870 <__udivsi3>
  81165c:	1009883a 	mov	r4,r2
  811660:	2005883a 	mov	r2,r4
  811664:	0007883a 	mov	r3,zero
  811668:	8009883a 	mov	r4,r16
  81166c:	880b883a 	mov	r5,r17
  811670:	100d883a 	mov	r6,r2
  811674:	180f883a 	mov	r7,r3
  811678:	08088800 	call	808880 <__muldi3>
  81167c:	1009883a 	mov	r4,r2
  811680:	180b883a 	mov	r5,r3
  811684:	2005883a 	mov	r2,r4
  811688:	2807883a 	mov	r3,r5
  81168c:	1009883a 	mov	r4,r2
  811690:	180b883a 	mov	r5,r3
  811694:	018003f4 	movhi	r6,15
  811698:	31909004 	addi	r6,r6,16960
  81169c:	000f883a 	mov	r7,zero
  8116a0:	0810b300 	call	810b30 <__umoddi3>
  8116a4:	1009883a 	mov	r4,r2
  8116a8:	180b883a 	mov	r5,r3
  8116ac:	2005883a 	mov	r2,r4
  8116b0:	2807883a 	mov	r3,r5
  8116b4:	9085883a 	add	r2,r18,r2
  8116b8:	1007883a 	mov	r3,r2
  8116bc:	e0bffd17 	ldw	r2,-12(fp)
  8116c0:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
  8116c4:	00001506 	br	81171c <gettimeofday+0x164>
      if (ptimeval->tv_sec <= 0)
  8116c8:	e0bffd17 	ldw	r2,-12(fp)
  8116cc:	10800017 	ldw	r2,0(r2)
  8116d0:	10800048 	cmpgei	r2,r2,1
  8116d4:	1000051e 	bne	r2,zero,8116ec <gettimeofday+0x134>
      {
          ptimeval->tv_sec = 0;
  8116d8:	e0bffd17 	ldw	r2,-12(fp)
  8116dc:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
  8116e0:	e0bffd17 	ldw	r2,-12(fp)
  8116e4:	10000115 	stw	zero,4(r2)
          break;
  8116e8:	00001d06 	br	811760 <gettimeofday+0x1a8>
      }
      else
      {
          ptimeval->tv_sec--;
  8116ec:	e0bffd17 	ldw	r2,-12(fp)
  8116f0:	10800017 	ldw	r2,0(r2)
  8116f4:	10ffffc4 	addi	r3,r2,-1
  8116f8:	e0bffd17 	ldw	r2,-12(fp)
  8116fc:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
  811700:	e0bffd17 	ldw	r2,-12(fp)
  811704:	10c00117 	ldw	r3,4(r2)
  811708:	008003f4 	movhi	r2,15
  81170c:	10909004 	addi	r2,r2,16960
  811710:	1887883a 	add	r3,r3,r2
  811714:	e0bffd17 	ldw	r2,-12(fp)
  811718:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
  81171c:	e0bffd17 	ldw	r2,-12(fp)
  811720:	10800117 	ldw	r2,4(r2)
  811724:	1004803a 	cmplt	r2,r2,zero
  811728:	103fe71e 	bne	r2,zero,8116c8 <gettimeofday+0x110>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
  81172c:	00000c06 	br	811760 <gettimeofday+0x1a8>
      ptimeval->tv_sec++;
  811730:	e0bffd17 	ldw	r2,-12(fp)
  811734:	10800017 	ldw	r2,0(r2)
  811738:	10c00044 	addi	r3,r2,1
  81173c:	e0bffd17 	ldw	r2,-12(fp)
  811740:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
  811744:	e0bffd17 	ldw	r2,-12(fp)
  811748:	10c00117 	ldw	r3,4(r2)
  81174c:	00bffc74 	movhi	r2,65521
  811750:	10af7004 	addi	r2,r2,-16960
  811754:	1887883a 	add	r3,r3,r2
  811758:	e0bffd17 	ldw	r2,-12(fp)
  81175c:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
  811760:	e0bffd17 	ldw	r2,-12(fp)
  811764:	10c00117 	ldw	r3,4(r2)
  811768:	008003f4 	movhi	r2,15
  81176c:	10908fc4 	addi	r2,r2,16959
  811770:	10ffef16 	blt	r2,r3,811730 <gettimeofday+0x178>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
  811774:	e0bffc17 	ldw	r2,-16(fp)
  811778:	1005003a 	cmpeq	r2,r2,zero
  81177c:	1000081e 	bne	r2,zero,8117a0 <gettimeofday+0x1e8>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
  811780:	d0e73817 	ldw	r3,-25376(gp)
  811784:	e0bffc17 	ldw	r2,-16(fp)
  811788:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
  81178c:	008020b4 	movhi	r2,130
  811790:	10bf6e04 	addi	r2,r2,-584
  811794:	10c00017 	ldw	r3,0(r2)
  811798:	e0bffc17 	ldw	r2,-16(fp)
  81179c:	10c00115 	stw	r3,4(r2)
    }

    return 0;
  8117a0:	e03fff15 	stw	zero,-4(fp)
  8117a4:	00000206 	br	8117b0 <gettimeofday+0x1f8>
  }

  return -ENOTSUP;
  8117a8:	00bfde84 	movi	r2,-134
  8117ac:	e0bfff15 	stw	r2,-4(fp)
  8117b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8117b4:	e037883a 	mov	sp,fp
  8117b8:	dfc00417 	ldw	ra,16(sp)
  8117bc:	df000317 	ldw	fp,12(sp)
  8117c0:	dc800217 	ldw	r18,8(sp)
  8117c4:	dc400117 	ldw	r17,4(sp)
  8117c8:	dc000017 	ldw	r16,0(sp)
  8117cc:	dec00504 	addi	sp,sp,20
  8117d0:	f800283a 	ret

008117d4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  8117d4:	deffef04 	addi	sp,sp,-68
  8117d8:	df001015 	stw	fp,64(sp)
  8117dc:	df001004 	addi	fp,sp,64
  8117e0:	e13ffc15 	stw	r4,-16(fp)
  8117e4:	e17ffd15 	stw	r5,-12(fp)
  8117e8:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  8117ec:	00bffa84 	movi	r2,-22
  8117f0:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8117f4:	e0bffc17 	ldw	r2,-16(fp)
  8117f8:	10800828 	cmpgeui	r2,r2,32
  8117fc:	1000601e 	bne	r2,zero,811980 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811800:	0005303a 	rdctl	r2,status
  811804:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811808:	e0fff917 	ldw	r3,-28(fp)
  81180c:	00bfff84 	movi	r2,-2
  811810:	1884703a 	and	r2,r3,r2
  811814:	1001703a 	wrctl	status,r2
  
  return context;
  811818:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  81181c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  811820:	e0bffc17 	ldw	r2,-16(fp)
  811824:	00c020b4 	movhi	r3,130
  811828:	18cb3404 	addi	r3,r3,11472
  81182c:	100490fa 	slli	r2,r2,3
  811830:	10c7883a 	add	r3,r2,r3
  811834:	e0bffe17 	ldw	r2,-8(fp)
  811838:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  81183c:	e0bffc17 	ldw	r2,-16(fp)
  811840:	00c020b4 	movhi	r3,130
  811844:	18cb3404 	addi	r3,r3,11472
  811848:	100490fa 	slli	r2,r2,3
  81184c:	10c5883a 	add	r2,r2,r3
  811850:	10c00104 	addi	r3,r2,4
  811854:	e0bffd17 	ldw	r2,-12(fp)
  811858:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  81185c:	e0bffe17 	ldw	r2,-8(fp)
  811860:	1005003a 	cmpeq	r2,r2,zero
  811864:	1000201e 	bne	r2,zero,8118e8 <alt_irq_register+0x114>
  811868:	e0bffc17 	ldw	r2,-16(fp)
  81186c:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811870:	0005303a 	rdctl	r2,status
  811874:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811878:	e0fff617 	ldw	r3,-40(fp)
  81187c:	00bfff84 	movi	r2,-2
  811880:	1884703a 	and	r2,r3,r2
  811884:	1001703a 	wrctl	status,r2
  
  return context;
  811888:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81188c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  811890:	e0fff717 	ldw	r3,-36(fp)
  811894:	00800044 	movi	r2,1
  811898:	10c4983a 	sll	r2,r2,r3
  81189c:	1007883a 	mov	r3,r2
  8118a0:	008020b4 	movhi	r2,130
  8118a4:	10bf7104 	addi	r2,r2,-572
  8118a8:	10800017 	ldw	r2,0(r2)
  8118ac:	1886b03a 	or	r3,r3,r2
  8118b0:	008020b4 	movhi	r2,130
  8118b4:	10bf7104 	addi	r2,r2,-572
  8118b8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8118bc:	008020b4 	movhi	r2,130
  8118c0:	10bf7104 	addi	r2,r2,-572
  8118c4:	10800017 	ldw	r2,0(r2)
  8118c8:	100170fa 	wrctl	ienable,r2
  8118cc:	e0bff817 	ldw	r2,-32(fp)
  8118d0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8118d4:	e0bff517 	ldw	r2,-44(fp)
  8118d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8118dc:	0005883a 	mov	r2,zero
  8118e0:	e0bfff15 	stw	r2,-4(fp)
  8118e4:	00002006 	br	811968 <alt_irq_register+0x194>
  8118e8:	e0bffc17 	ldw	r2,-16(fp)
  8118ec:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8118f0:	0005303a 	rdctl	r2,status
  8118f4:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8118f8:	e0fff217 	ldw	r3,-56(fp)
  8118fc:	00bfff84 	movi	r2,-2
  811900:	1884703a 	and	r2,r3,r2
  811904:	1001703a 	wrctl	status,r2
  
  return context;
  811908:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81190c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  811910:	e0fff317 	ldw	r3,-52(fp)
  811914:	00800044 	movi	r2,1
  811918:	10c4983a 	sll	r2,r2,r3
  81191c:	0084303a 	nor	r2,zero,r2
  811920:	1007883a 	mov	r3,r2
  811924:	008020b4 	movhi	r2,130
  811928:	10bf7104 	addi	r2,r2,-572
  81192c:	10800017 	ldw	r2,0(r2)
  811930:	1886703a 	and	r3,r3,r2
  811934:	008020b4 	movhi	r2,130
  811938:	10bf7104 	addi	r2,r2,-572
  81193c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  811940:	008020b4 	movhi	r2,130
  811944:	10bf7104 	addi	r2,r2,-572
  811948:	10800017 	ldw	r2,0(r2)
  81194c:	100170fa 	wrctl	ienable,r2
  811950:	e0bff417 	ldw	r2,-48(fp)
  811954:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811958:	e0bff117 	ldw	r2,-60(fp)
  81195c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  811960:	0005883a 	mov	r2,zero
  811964:	e0bfff15 	stw	r2,-4(fp)
  811968:	e0bfff17 	ldw	r2,-4(fp)
  81196c:	e0bffb15 	stw	r2,-20(fp)
  811970:	e0bffa17 	ldw	r2,-24(fp)
  811974:	e0bff015 	stw	r2,-64(fp)
  811978:	e0bff017 	ldw	r2,-64(fp)
  81197c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  811980:	e0bffb17 	ldw	r2,-20(fp)
}
  811984:	e037883a 	mov	sp,fp
  811988:	df000017 	ldw	fp,0(sp)
  81198c:	dec00104 	addi	sp,sp,4
  811990:	f800283a 	ret

00811994 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  811994:	deffeb04 	addi	sp,sp,-84
  811998:	dfc01415 	stw	ra,80(sp)
  81199c:	df001315 	stw	fp,76(sp)
  8119a0:	df001304 	addi	fp,sp,76
  8119a4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8119a8:	e0bffd17 	ldw	r2,-12(fp)
  8119ac:	1004803a 	cmplt	r2,r2,zero
  8119b0:	1000081e 	bne	r2,zero,8119d4 <isatty+0x40>
  8119b4:	e0bffd17 	ldw	r2,-12(fp)
  8119b8:	10800324 	muli	r2,r2,12
  8119bc:	1007883a 	mov	r3,r2
  8119c0:	008020b4 	movhi	r2,130
  8119c4:	10b36804 	addi	r2,r2,-12896
  8119c8:	1887883a 	add	r3,r3,r2
  8119cc:	e0ffff15 	stw	r3,-4(fp)
  8119d0:	00000106 	br	8119d8 <isatty+0x44>
  8119d4:	e03fff15 	stw	zero,-4(fp)
  8119d8:	e0bfff17 	ldw	r2,-4(fp)
  8119dc:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  8119e0:	e0bfed17 	ldw	r2,-76(fp)
  8119e4:	1005003a 	cmpeq	r2,r2,zero
  8119e8:	10000f1e 	bne	r2,zero,811a28 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  8119ec:	e0bfed17 	ldw	r2,-76(fp)
  8119f0:	10800017 	ldw	r2,0(r2)
  8119f4:	10800817 	ldw	r2,32(r2)
  8119f8:	1004c03a 	cmpne	r2,r2,zero
  8119fc:	1000031e 	bne	r2,zero,811a0c <isatty+0x78>
    {
      return 1;
  811a00:	00800044 	movi	r2,1
  811a04:	e0bffe15 	stw	r2,-8(fp)
  811a08:	00000c06 	br	811a3c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  811a0c:	e17fee04 	addi	r5,fp,-72
  811a10:	e13ffd17 	ldw	r4,-12(fp)
  811a14:	08114840 	call	811484 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  811a18:	e0bfef17 	ldw	r2,-68(fp)
  811a1c:	10880020 	cmpeqi	r2,r2,8192
  811a20:	e0bffe15 	stw	r2,-8(fp)
  811a24:	00000506 	br	811a3c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  811a28:	0811a540 	call	811a54 <alt_get_errno>
  811a2c:	1007883a 	mov	r3,r2
  811a30:	00801444 	movi	r2,81
  811a34:	18800015 	stw	r2,0(r3)
    return 0;
  811a38:	e03ffe15 	stw	zero,-8(fp)
  811a3c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  811a40:	e037883a 	mov	sp,fp
  811a44:	dfc00117 	ldw	ra,4(sp)
  811a48:	df000017 	ldw	fp,0(sp)
  811a4c:	dec00204 	addi	sp,sp,8
  811a50:	f800283a 	ret

00811a54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811a54:	defffd04 	addi	sp,sp,-12
  811a58:	dfc00215 	stw	ra,8(sp)
  811a5c:	df000115 	stw	fp,4(sp)
  811a60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811a64:	008020b4 	movhi	r2,130
  811a68:	10b84604 	addi	r2,r2,-7912
  811a6c:	10800017 	ldw	r2,0(r2)
  811a70:	1005003a 	cmpeq	r2,r2,zero
  811a74:	1000061e 	bne	r2,zero,811a90 <alt_get_errno+0x3c>
  811a78:	008020b4 	movhi	r2,130
  811a7c:	10b84604 	addi	r2,r2,-7912
  811a80:	10800017 	ldw	r2,0(r2)
  811a84:	103ee83a 	callr	r2
  811a88:	e0bfff15 	stw	r2,-4(fp)
  811a8c:	00000306 	br	811a9c <alt_get_errno+0x48>
  811a90:	008020b4 	movhi	r2,130
  811a94:	10bf6904 	addi	r2,r2,-604
  811a98:	e0bfff15 	stw	r2,-4(fp)
  811a9c:	e0bfff17 	ldw	r2,-4(fp)
}
  811aa0:	e037883a 	mov	sp,fp
  811aa4:	dfc00117 	ldw	ra,4(sp)
  811aa8:	df000017 	ldw	fp,0(sp)
  811aac:	dec00204 	addi	sp,sp,8
  811ab0:	f800283a 	ret

00811ab4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  811ab4:	defffe04 	addi	sp,sp,-8
  811ab8:	dfc00115 	stw	ra,4(sp)
  811abc:	df000015 	stw	fp,0(sp)
  811ac0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  811ac4:	010020b4 	movhi	r4,130
  811ac8:	21384b04 	addi	r4,r4,-7892
  811acc:	014020b4 	movhi	r5,130
  811ad0:	29715904 	addi	r5,r5,-15004
  811ad4:	018020b4 	movhi	r6,130
  811ad8:	31b84b04 	addi	r6,r6,-7892
  811adc:	0811b340 	call	811b34 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  811ae0:	01002034 	movhi	r4,128
  811ae4:	21000804 	addi	r4,r4,32
  811ae8:	01402034 	movhi	r5,128
  811aec:	29400804 	addi	r5,r5,32
  811af0:	01802034 	movhi	r6,128
  811af4:	31806e04 	addi	r6,r6,440
  811af8:	0811b340 	call	811b34 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  811afc:	010020b4 	movhi	r4,130
  811b00:	212dfc04 	addi	r4,r4,-18448
  811b04:	014020b4 	movhi	r5,130
  811b08:	296dfc04 	addi	r5,r5,-18448
  811b0c:	018020b4 	movhi	r6,130
  811b10:	31b15904 	addi	r6,r6,-15004
  811b14:	0811b340 	call	811b34 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  811b18:	081aa0c0 	call	81aa0c <alt_dcache_flush_all>
  alt_icache_flush_all();
  811b1c:	081acc00 	call	81acc0 <alt_icache_flush_all>
}
  811b20:	e037883a 	mov	sp,fp
  811b24:	dfc00117 	ldw	ra,4(sp)
  811b28:	df000017 	ldw	fp,0(sp)
  811b2c:	dec00204 	addi	sp,sp,8
  811b30:	f800283a 	ret

00811b34 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  811b34:	defffc04 	addi	sp,sp,-16
  811b38:	df000315 	stw	fp,12(sp)
  811b3c:	df000304 	addi	fp,sp,12
  811b40:	e13ffd15 	stw	r4,-12(fp)
  811b44:	e17ffe15 	stw	r5,-8(fp)
  811b48:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  811b4c:	e0fffe17 	ldw	r3,-8(fp)
  811b50:	e0bffd17 	ldw	r2,-12(fp)
  811b54:	18800e26 	beq	r3,r2,811b90 <alt_load_section+0x5c>
  {
    while( to != end )
  811b58:	00000a06 	br	811b84 <alt_load_section+0x50>
    {
      *to++ = *from++;
  811b5c:	e0bffd17 	ldw	r2,-12(fp)
  811b60:	10c00017 	ldw	r3,0(r2)
  811b64:	e0bffe17 	ldw	r2,-8(fp)
  811b68:	10c00015 	stw	r3,0(r2)
  811b6c:	e0bffe17 	ldw	r2,-8(fp)
  811b70:	10800104 	addi	r2,r2,4
  811b74:	e0bffe15 	stw	r2,-8(fp)
  811b78:	e0bffd17 	ldw	r2,-12(fp)
  811b7c:	10800104 	addi	r2,r2,4
  811b80:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  811b84:	e0fffe17 	ldw	r3,-8(fp)
  811b88:	e0bfff17 	ldw	r2,-4(fp)
  811b8c:	18bff31e 	bne	r3,r2,811b5c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  811b90:	e037883a 	mov	sp,fp
  811b94:	df000017 	ldw	fp,0(sp)
  811b98:	dec00104 	addi	sp,sp,4
  811b9c:	f800283a 	ret

00811ba0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  811ba0:	defff804 	addi	sp,sp,-32
  811ba4:	dfc00715 	stw	ra,28(sp)
  811ba8:	df000615 	stw	fp,24(sp)
  811bac:	df000604 	addi	fp,sp,24
  811bb0:	e13ffc15 	stw	r4,-16(fp)
  811bb4:	e17ffd15 	stw	r5,-12(fp)
  811bb8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  811bbc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811bc0:	e0bffc17 	ldw	r2,-16(fp)
  811bc4:	1004803a 	cmplt	r2,r2,zero
  811bc8:	1000081e 	bne	r2,zero,811bec <lseek+0x4c>
  811bcc:	e0bffc17 	ldw	r2,-16(fp)
  811bd0:	10800324 	muli	r2,r2,12
  811bd4:	1007883a 	mov	r3,r2
  811bd8:	008020b4 	movhi	r2,130
  811bdc:	10b36804 	addi	r2,r2,-12896
  811be0:	1887883a 	add	r3,r3,r2
  811be4:	e0ffff15 	stw	r3,-4(fp)
  811be8:	00000106 	br	811bf0 <lseek+0x50>
  811bec:	e03fff15 	stw	zero,-4(fp)
  811bf0:	e0bfff17 	ldw	r2,-4(fp)
  811bf4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  811bf8:	e0bffb17 	ldw	r2,-20(fp)
  811bfc:	1005003a 	cmpeq	r2,r2,zero
  811c00:	1000111e 	bne	r2,zero,811c48 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  811c04:	e0bffb17 	ldw	r2,-20(fp)
  811c08:	10800017 	ldw	r2,0(r2)
  811c0c:	10800717 	ldw	r2,28(r2)
  811c10:	1005003a 	cmpeq	r2,r2,zero
  811c14:	1000091e 	bne	r2,zero,811c3c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  811c18:	e0bffb17 	ldw	r2,-20(fp)
  811c1c:	10800017 	ldw	r2,0(r2)
  811c20:	10800717 	ldw	r2,28(r2)
  811c24:	e13ffb17 	ldw	r4,-20(fp)
  811c28:	e17ffd17 	ldw	r5,-12(fp)
  811c2c:	e1bffe17 	ldw	r6,-8(fp)
  811c30:	103ee83a 	callr	r2
  811c34:	e0bffa15 	stw	r2,-24(fp)
  811c38:	00000506 	br	811c50 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  811c3c:	00bfde84 	movi	r2,-134
  811c40:	e0bffa15 	stw	r2,-24(fp)
  811c44:	00000206 	br	811c50 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  811c48:	00bfebc4 	movi	r2,-81
  811c4c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  811c50:	e0bffa17 	ldw	r2,-24(fp)
  811c54:	1004403a 	cmpge	r2,r2,zero
  811c58:	1000071e 	bne	r2,zero,811c78 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  811c5c:	0811c900 	call	811c90 <alt_get_errno>
  811c60:	1007883a 	mov	r3,r2
  811c64:	e0bffa17 	ldw	r2,-24(fp)
  811c68:	0085c83a 	sub	r2,zero,r2
  811c6c:	18800015 	stw	r2,0(r3)
    rc = -1;
  811c70:	00bfffc4 	movi	r2,-1
  811c74:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  811c78:	e0bffa17 	ldw	r2,-24(fp)
}
  811c7c:	e037883a 	mov	sp,fp
  811c80:	dfc00117 	ldw	ra,4(sp)
  811c84:	df000017 	ldw	fp,0(sp)
  811c88:	dec00204 	addi	sp,sp,8
  811c8c:	f800283a 	ret

00811c90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811c90:	defffd04 	addi	sp,sp,-12
  811c94:	dfc00215 	stw	ra,8(sp)
  811c98:	df000115 	stw	fp,4(sp)
  811c9c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811ca0:	008020b4 	movhi	r2,130
  811ca4:	10b84604 	addi	r2,r2,-7912
  811ca8:	10800017 	ldw	r2,0(r2)
  811cac:	1005003a 	cmpeq	r2,r2,zero
  811cb0:	1000061e 	bne	r2,zero,811ccc <alt_get_errno+0x3c>
  811cb4:	008020b4 	movhi	r2,130
  811cb8:	10b84604 	addi	r2,r2,-7912
  811cbc:	10800017 	ldw	r2,0(r2)
  811cc0:	103ee83a 	callr	r2
  811cc4:	e0bfff15 	stw	r2,-4(fp)
  811cc8:	00000306 	br	811cd8 <alt_get_errno+0x48>
  811ccc:	008020b4 	movhi	r2,130
  811cd0:	10bf6904 	addi	r2,r2,-604
  811cd4:	e0bfff15 	stw	r2,-4(fp)
  811cd8:	e0bfff17 	ldw	r2,-4(fp)
}
  811cdc:	e037883a 	mov	sp,fp
  811ce0:	dfc00117 	ldw	ra,4(sp)
  811ce4:	df000017 	ldw	fp,0(sp)
  811ce8:	dec00204 	addi	sp,sp,8
  811cec:	f800283a 	ret

00811cf0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  811cf0:	defffd04 	addi	sp,sp,-12
  811cf4:	dfc00215 	stw	ra,8(sp)
  811cf8:	df000115 	stw	fp,4(sp)
  811cfc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  811d00:	0009883a 	mov	r4,zero
  811d04:	081238c0 	call	81238c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  811d08:	08123c00 	call	8123c0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  811d0c:	010020b4 	movhi	r4,130
  811d10:	21311a04 	addi	r4,r4,-15256
  811d14:	014020b4 	movhi	r5,130
  811d18:	29711a04 	addi	r5,r5,-15256
  811d1c:	018020b4 	movhi	r6,130
  811d20:	31b11a04 	addi	r6,r6,-15256
  811d24:	081adb40 	call	81adb4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  811d28:	081ab640 	call	81ab64 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  811d2c:	010020b4 	movhi	r4,130
  811d30:	212af204 	addi	r4,r4,-21560
  811d34:	081b3780 	call	81b378 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  811d38:	d1273d17 	ldw	r4,-25356(gp)
  811d3c:	d1673e17 	ldw	r5,-25352(gp)
  811d40:	d1a73f17 	ldw	r6,-25348(gp)
  811d44:	0802fb00 	call	802fb0 <main>
  811d48:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  811d4c:	01000044 	movi	r4,1
  811d50:	08112fc0 	call	8112fc <close>
  exit (result);
  811d54:	e13fff17 	ldw	r4,-4(fp)
  811d58:	081b38c0 	call	81b38c <exit>

00811d5c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  811d5c:	defffe04 	addi	sp,sp,-8
  811d60:	df000115 	stw	fp,4(sp)
  811d64:	df000104 	addi	fp,sp,4
  811d68:	e13fff15 	stw	r4,-4(fp)
}
  811d6c:	e037883a 	mov	sp,fp
  811d70:	df000017 	ldw	fp,0(sp)
  811d74:	dec00104 	addi	sp,sp,4
  811d78:	f800283a 	ret

00811d7c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  811d7c:	defffe04 	addi	sp,sp,-8
  811d80:	df000115 	stw	fp,4(sp)
  811d84:	df000104 	addi	fp,sp,4
  811d88:	e13fff15 	stw	r4,-4(fp)
}
  811d8c:	e037883a 	mov	sp,fp
  811d90:	df000017 	ldw	fp,0(sp)
  811d94:	dec00104 	addi	sp,sp,4
  811d98:	f800283a 	ret

00811d9c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  811d9c:	defff704 	addi	sp,sp,-36
  811da0:	dfc00815 	stw	ra,32(sp)
  811da4:	df000715 	stw	fp,28(sp)
  811da8:	df000704 	addi	fp,sp,28
  811dac:	e13ffb15 	stw	r4,-20(fp)
  811db0:	e17ffc15 	stw	r5,-16(fp)
  811db4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811db8:	e0bffb17 	ldw	r2,-20(fp)
  811dbc:	1004803a 	cmplt	r2,r2,zero
  811dc0:	1000081e 	bne	r2,zero,811de4 <read+0x48>
  811dc4:	e0bffb17 	ldw	r2,-20(fp)
  811dc8:	10800324 	muli	r2,r2,12
  811dcc:	1007883a 	mov	r3,r2
  811dd0:	008020b4 	movhi	r2,130
  811dd4:	10b36804 	addi	r2,r2,-12896
  811dd8:	1887883a 	add	r3,r3,r2
  811ddc:	e0ffff15 	stw	r3,-4(fp)
  811de0:	00000106 	br	811de8 <read+0x4c>
  811de4:	e03fff15 	stw	zero,-4(fp)
  811de8:	e0bfff17 	ldw	r2,-4(fp)
  811dec:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  811df0:	e0bffa17 	ldw	r2,-24(fp)
  811df4:	1005003a 	cmpeq	r2,r2,zero
  811df8:	1000241e 	bne	r2,zero,811e8c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  811dfc:	e0bffa17 	ldw	r2,-24(fp)
  811e00:	10800217 	ldw	r2,8(r2)
  811e04:	108000cc 	andi	r2,r2,3
  811e08:	10800060 	cmpeqi	r2,r2,1
  811e0c:	10001a1e 	bne	r2,zero,811e78 <read+0xdc>
  811e10:	e0bffa17 	ldw	r2,-24(fp)
  811e14:	10800017 	ldw	r2,0(r2)
  811e18:	10800517 	ldw	r2,20(r2)
  811e1c:	1005003a 	cmpeq	r2,r2,zero
  811e20:	1000151e 	bne	r2,zero,811e78 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  811e24:	e0bffa17 	ldw	r2,-24(fp)
  811e28:	10800017 	ldw	r2,0(r2)
  811e2c:	10800517 	ldw	r2,20(r2)
  811e30:	e17ffc17 	ldw	r5,-16(fp)
  811e34:	e1bffd17 	ldw	r6,-12(fp)
  811e38:	e13ffa17 	ldw	r4,-24(fp)
  811e3c:	103ee83a 	callr	r2
  811e40:	e0bff915 	stw	r2,-28(fp)
  811e44:	e0bff917 	ldw	r2,-28(fp)
  811e48:	1004403a 	cmpge	r2,r2,zero
  811e4c:	1000071e 	bne	r2,zero,811e6c <read+0xd0>
        {
          ALT_ERRNO = -rval;
  811e50:	0811ebc0 	call	811ebc <alt_get_errno>
  811e54:	e0fff917 	ldw	r3,-28(fp)
  811e58:	00c7c83a 	sub	r3,zero,r3
  811e5c:	10c00015 	stw	r3,0(r2)
          return -1;
  811e60:	00bfffc4 	movi	r2,-1
  811e64:	e0bffe15 	stw	r2,-8(fp)
  811e68:	00000e06 	br	811ea4 <read+0x108>
        }
        return rval;
  811e6c:	e0bff917 	ldw	r2,-28(fp)
  811e70:	e0bffe15 	stw	r2,-8(fp)
  811e74:	00000b06 	br	811ea4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  811e78:	0811ebc0 	call	811ebc <alt_get_errno>
  811e7c:	1007883a 	mov	r3,r2
  811e80:	00800344 	movi	r2,13
  811e84:	18800015 	stw	r2,0(r3)
  811e88:	00000406 	br	811e9c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  811e8c:	0811ebc0 	call	811ebc <alt_get_errno>
  811e90:	1007883a 	mov	r3,r2
  811e94:	00801444 	movi	r2,81
  811e98:	18800015 	stw	r2,0(r3)
  }
  return -1;
  811e9c:	00bfffc4 	movi	r2,-1
  811ea0:	e0bffe15 	stw	r2,-8(fp)
  811ea4:	e0bffe17 	ldw	r2,-8(fp)
}
  811ea8:	e037883a 	mov	sp,fp
  811eac:	dfc00117 	ldw	ra,4(sp)
  811eb0:	df000017 	ldw	fp,0(sp)
  811eb4:	dec00204 	addi	sp,sp,8
  811eb8:	f800283a 	ret

00811ebc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811ebc:	defffd04 	addi	sp,sp,-12
  811ec0:	dfc00215 	stw	ra,8(sp)
  811ec4:	df000115 	stw	fp,4(sp)
  811ec8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811ecc:	008020b4 	movhi	r2,130
  811ed0:	10b84604 	addi	r2,r2,-7912
  811ed4:	10800017 	ldw	r2,0(r2)
  811ed8:	1005003a 	cmpeq	r2,r2,zero
  811edc:	1000061e 	bne	r2,zero,811ef8 <alt_get_errno+0x3c>
  811ee0:	008020b4 	movhi	r2,130
  811ee4:	10b84604 	addi	r2,r2,-7912
  811ee8:	10800017 	ldw	r2,0(r2)
  811eec:	103ee83a 	callr	r2
  811ef0:	e0bfff15 	stw	r2,-4(fp)
  811ef4:	00000306 	br	811f04 <alt_get_errno+0x48>
  811ef8:	008020b4 	movhi	r2,130
  811efc:	10bf6904 	addi	r2,r2,-604
  811f00:	e0bfff15 	stw	r2,-4(fp)
  811f04:	e0bfff17 	ldw	r2,-4(fp)
}
  811f08:	e037883a 	mov	sp,fp
  811f0c:	dfc00117 	ldw	ra,4(sp)
  811f10:	df000017 	ldw	fp,0(sp)
  811f14:	dec00204 	addi	sp,sp,8
  811f18:	f800283a 	ret

00811f1c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  811f1c:	defffe04 	addi	sp,sp,-8
  811f20:	df000115 	stw	fp,4(sp)
  811f24:	df000104 	addi	fp,sp,4
  811f28:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  811f2c:	e0bfff17 	ldw	r2,-4(fp)
  811f30:	108000d0 	cmplti	r2,r2,3
  811f34:	10000d1e 	bne	r2,zero,811f6c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  811f38:	e0bfff17 	ldw	r2,-4(fp)
  811f3c:	00c020b4 	movhi	r3,130
  811f40:	18f36804 	addi	r3,r3,-12896
  811f44:	10800324 	muli	r2,r2,12
  811f48:	10c5883a 	add	r2,r2,r3
  811f4c:	10800204 	addi	r2,r2,8
  811f50:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  811f54:	e0bfff17 	ldw	r2,-4(fp)
  811f58:	00c020b4 	movhi	r3,130
  811f5c:	18f36804 	addi	r3,r3,-12896
  811f60:	10800324 	muli	r2,r2,12
  811f64:	10c5883a 	add	r2,r2,r3
  811f68:	10000015 	stw	zero,0(r2)
  }
}
  811f6c:	e037883a 	mov	sp,fp
  811f70:	df000017 	ldw	fp,0(sp)
  811f74:	dec00104 	addi	sp,sp,4
  811f78:	f800283a 	ret

00811f7c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  811f7c:	defff804 	addi	sp,sp,-32
  811f80:	df000715 	stw	fp,28(sp)
  811f84:	df000704 	addi	fp,sp,28
  811f88:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811f8c:	0005303a 	rdctl	r2,status
  811f90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811f94:	e0fffb17 	ldw	r3,-20(fp)
  811f98:	00bfff84 	movi	r2,-2
  811f9c:	1884703a 	and	r2,r3,r2
  811fa0:	1001703a 	wrctl	status,r2
  
  return context;
  811fa4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  811fa8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  811fac:	d0a01317 	ldw	r2,-32692(gp)
  811fb0:	10c000c4 	addi	r3,r2,3
  811fb4:	00bfff04 	movi	r2,-4
  811fb8:	1884703a 	and	r2,r3,r2
  811fbc:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  811fc0:	d0e01317 	ldw	r3,-32692(gp)
  811fc4:	e0bffe17 	ldw	r2,-8(fp)
  811fc8:	1887883a 	add	r3,r3,r2
  811fcc:	00804034 	movhi	r2,256
  811fd0:	10800004 	addi	r2,r2,0
  811fd4:	10c0072e 	bgeu	r2,r3,811ff4 <sbrk+0x78>
  811fd8:	e0bffd17 	ldw	r2,-12(fp)
  811fdc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811fe0:	e0bffa17 	ldw	r2,-24(fp)
  811fe4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  811fe8:	00bfffc4 	movi	r2,-1
  811fec:	e0bfff15 	stw	r2,-4(fp)
  811ff0:	00000c06 	br	812024 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  811ff4:	d0a01317 	ldw	r2,-32692(gp)
  811ff8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  811ffc:	d0e01317 	ldw	r3,-32692(gp)
  812000:	e0bffe17 	ldw	r2,-8(fp)
  812004:	1885883a 	add	r2,r3,r2
  812008:	d0a01315 	stw	r2,-32692(gp)
  81200c:	e0bffd17 	ldw	r2,-12(fp)
  812010:	e0bff915 	stw	r2,-28(fp)
  812014:	e0bff917 	ldw	r2,-28(fp)
  812018:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  81201c:	e0bffc17 	ldw	r2,-16(fp)
  812020:	e0bfff15 	stw	r2,-4(fp)
  812024:	e0bfff17 	ldw	r2,-4(fp)
} 
  812028:	e037883a 	mov	sp,fp
  81202c:	df000017 	ldw	fp,0(sp)
  812030:	dec00104 	addi	sp,sp,4
  812034:	f800283a 	ret

00812038 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  812038:	defffa04 	addi	sp,sp,-24
  81203c:	df000515 	stw	fp,20(sp)
  812040:	df000504 	addi	fp,sp,20
  812044:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812048:	0005303a 	rdctl	r2,status
  81204c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812050:	e0fffd17 	ldw	r3,-12(fp)
  812054:	00bfff84 	movi	r2,-2
  812058:	1884703a 	and	r2,r3,r2
  81205c:	1001703a 	wrctl	status,r2
  
  return context;
  812060:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  812064:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  812068:	e0bfff17 	ldw	r2,-4(fp)
  81206c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  812070:	e0bffc17 	ldw	r2,-16(fp)
  812074:	10c00017 	ldw	r3,0(r2)
  812078:	e0bffc17 	ldw	r2,-16(fp)
  81207c:	10800117 	ldw	r2,4(r2)
  812080:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  812084:	e0bffc17 	ldw	r2,-16(fp)
  812088:	10c00117 	ldw	r3,4(r2)
  81208c:	e0bffc17 	ldw	r2,-16(fp)
  812090:	10800017 	ldw	r2,0(r2)
  812094:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  812098:	e0fffc17 	ldw	r3,-16(fp)
  81209c:	e0bffc17 	ldw	r2,-16(fp)
  8120a0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  8120a4:	e0fffc17 	ldw	r3,-16(fp)
  8120a8:	e0bffc17 	ldw	r2,-16(fp)
  8120ac:	18800015 	stw	r2,0(r3)
  8120b0:	e0bffe17 	ldw	r2,-8(fp)
  8120b4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8120b8:	e0bffb17 	ldw	r2,-20(fp)
  8120bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8120c0:	e037883a 	mov	sp,fp
  8120c4:	df000017 	ldw	fp,0(sp)
  8120c8:	dec00104 	addi	sp,sp,4
  8120cc:	f800283a 	ret

008120d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8120d0:	defffb04 	addi	sp,sp,-20
  8120d4:	dfc00415 	stw	ra,16(sp)
  8120d8:	df000315 	stw	fp,12(sp)
  8120dc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8120e0:	d0a01417 	ldw	r2,-32688(gp)
  8120e4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8120e8:	d0a74117 	ldw	r2,-25340(gp)
  8120ec:	10800044 	addi	r2,r2,1
  8120f0:	d0a74115 	stw	r2,-25340(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8120f4:	00003106 	br	8121bc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  8120f8:	e0bffe17 	ldw	r2,-8(fp)
  8120fc:	10800017 	ldw	r2,0(r2)
  812100:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  812104:	e0bffe17 	ldw	r2,-8(fp)
  812108:	10800403 	ldbu	r2,16(r2)
  81210c:	10803fcc 	andi	r2,r2,255
  812110:	1005003a 	cmpeq	r2,r2,zero
  812114:	1000051e 	bne	r2,zero,81212c <alt_tick+0x5c>
  812118:	d0a74117 	ldw	r2,-25340(gp)
  81211c:	1004c03a 	cmpne	r2,r2,zero
  812120:	1000021e 	bne	r2,zero,81212c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  812124:	e0bffe17 	ldw	r2,-8(fp)
  812128:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  81212c:	e0bffe17 	ldw	r2,-8(fp)
  812130:	10c00217 	ldw	r3,8(r2)
  812134:	d0a74117 	ldw	r2,-25340(gp)
  812138:	10c01e36 	bltu	r2,r3,8121b4 <alt_tick+0xe4>
  81213c:	e0bffe17 	ldw	r2,-8(fp)
  812140:	10800403 	ldbu	r2,16(r2)
  812144:	10803fcc 	andi	r2,r2,255
  812148:	1004c03a 	cmpne	r2,r2,zero
  81214c:	1000191e 	bne	r2,zero,8121b4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  812150:	e0bffe17 	ldw	r2,-8(fp)
  812154:	10c00317 	ldw	r3,12(r2)
  812158:	e0bffe17 	ldw	r2,-8(fp)
  81215c:	11000517 	ldw	r4,20(r2)
  812160:	183ee83a 	callr	r3
  812164:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  812168:	e0bffd17 	ldw	r2,-12(fp)
  81216c:	1004c03a 	cmpne	r2,r2,zero
  812170:	1000031e 	bne	r2,zero,812180 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  812174:	e13ffe17 	ldw	r4,-8(fp)
  812178:	08120380 	call	812038 <alt_alarm_stop>
  81217c:	00000d06 	br	8121b4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  812180:	e0bffe17 	ldw	r2,-8(fp)
  812184:	10c00217 	ldw	r3,8(r2)
  812188:	e0bffd17 	ldw	r2,-12(fp)
  81218c:	1887883a 	add	r3,r3,r2
  812190:	e0bffe17 	ldw	r2,-8(fp)
  812194:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  812198:	e0bffe17 	ldw	r2,-8(fp)
  81219c:	10c00217 	ldw	r3,8(r2)
  8121a0:	d0a74117 	ldw	r2,-25340(gp)
  8121a4:	1880032e 	bgeu	r3,r2,8121b4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  8121a8:	e0fffe17 	ldw	r3,-8(fp)
  8121ac:	00800044 	movi	r2,1
  8121b0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  8121b4:	e0bfff17 	ldw	r2,-4(fp)
  8121b8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8121bc:	d0e01404 	addi	r3,gp,-32688
  8121c0:	e0bffe17 	ldw	r2,-8(fp)
  8121c4:	10ffcc1e 	bne	r2,r3,8120f8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  8121c8:	e037883a 	mov	sp,fp
  8121cc:	dfc00117 	ldw	ra,4(sp)
  8121d0:	df000017 	ldw	fp,0(sp)
  8121d4:	dec00204 	addi	sp,sp,8
  8121d8:	f800283a 	ret

008121dc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  8121dc:	defffd04 	addi	sp,sp,-12
  8121e0:	dfc00215 	stw	ra,8(sp)
  8121e4:	df000115 	stw	fp,4(sp)
  8121e8:	df000104 	addi	fp,sp,4
  8121ec:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  8121f0:	e13fff17 	ldw	r4,-4(fp)
  8121f4:	081a8c00 	call	81a8c0 <alt_busy_sleep>
}
  8121f8:	e037883a 	mov	sp,fp
  8121fc:	dfc00117 	ldw	ra,4(sp)
  812200:	df000017 	ldw	fp,0(sp)
  812204:	dec00204 	addi	sp,sp,8
  812208:	f800283a 	ret

0081220c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  81220c:	defff704 	addi	sp,sp,-36
  812210:	dfc00815 	stw	ra,32(sp)
  812214:	df000715 	stw	fp,28(sp)
  812218:	df000704 	addi	fp,sp,28
  81221c:	e13ffb15 	stw	r4,-20(fp)
  812220:	e17ffc15 	stw	r5,-16(fp)
  812224:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812228:	e0bffb17 	ldw	r2,-20(fp)
  81222c:	1004803a 	cmplt	r2,r2,zero
  812230:	1000081e 	bne	r2,zero,812254 <write+0x48>
  812234:	e0bffb17 	ldw	r2,-20(fp)
  812238:	10800324 	muli	r2,r2,12
  81223c:	1007883a 	mov	r3,r2
  812240:	008020b4 	movhi	r2,130
  812244:	10b36804 	addi	r2,r2,-12896
  812248:	1887883a 	add	r3,r3,r2
  81224c:	e0ffff15 	stw	r3,-4(fp)
  812250:	00000106 	br	812258 <write+0x4c>
  812254:	e03fff15 	stw	zero,-4(fp)
  812258:	e0bfff17 	ldw	r2,-4(fp)
  81225c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  812260:	e0bffa17 	ldw	r2,-24(fp)
  812264:	1005003a 	cmpeq	r2,r2,zero
  812268:	1000241e 	bne	r2,zero,8122fc <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  81226c:	e0bffa17 	ldw	r2,-24(fp)
  812270:	10800217 	ldw	r2,8(r2)
  812274:	108000cc 	andi	r2,r2,3
  812278:	1005003a 	cmpeq	r2,r2,zero
  81227c:	10001a1e 	bne	r2,zero,8122e8 <write+0xdc>
  812280:	e0bffa17 	ldw	r2,-24(fp)
  812284:	10800017 	ldw	r2,0(r2)
  812288:	10800617 	ldw	r2,24(r2)
  81228c:	1005003a 	cmpeq	r2,r2,zero
  812290:	1000151e 	bne	r2,zero,8122e8 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  812294:	e0bffa17 	ldw	r2,-24(fp)
  812298:	10800017 	ldw	r2,0(r2)
  81229c:	10800617 	ldw	r2,24(r2)
  8122a0:	e17ffc17 	ldw	r5,-16(fp)
  8122a4:	e1bffd17 	ldw	r6,-12(fp)
  8122a8:	e13ffa17 	ldw	r4,-24(fp)
  8122ac:	103ee83a 	callr	r2
  8122b0:	e0bff915 	stw	r2,-28(fp)
  8122b4:	e0bff917 	ldw	r2,-28(fp)
  8122b8:	1004403a 	cmpge	r2,r2,zero
  8122bc:	1000071e 	bne	r2,zero,8122dc <write+0xd0>
      {
        ALT_ERRNO = -rval;
  8122c0:	081232c0 	call	81232c <alt_get_errno>
  8122c4:	e0fff917 	ldw	r3,-28(fp)
  8122c8:	00c7c83a 	sub	r3,zero,r3
  8122cc:	10c00015 	stw	r3,0(r2)
        return -1;
  8122d0:	00bfffc4 	movi	r2,-1
  8122d4:	e0bffe15 	stw	r2,-8(fp)
  8122d8:	00000e06 	br	812314 <write+0x108>
      }
      return rval;
  8122dc:	e0bff917 	ldw	r2,-28(fp)
  8122e0:	e0bffe15 	stw	r2,-8(fp)
  8122e4:	00000b06 	br	812314 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8122e8:	081232c0 	call	81232c <alt_get_errno>
  8122ec:	1007883a 	mov	r3,r2
  8122f0:	00800344 	movi	r2,13
  8122f4:	18800015 	stw	r2,0(r3)
  8122f8:	00000406 	br	81230c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8122fc:	081232c0 	call	81232c <alt_get_errno>
  812300:	1007883a 	mov	r3,r2
  812304:	00801444 	movi	r2,81
  812308:	18800015 	stw	r2,0(r3)
  }
  return -1;
  81230c:	00bfffc4 	movi	r2,-1
  812310:	e0bffe15 	stw	r2,-8(fp)
  812314:	e0bffe17 	ldw	r2,-8(fp)
}
  812318:	e037883a 	mov	sp,fp
  81231c:	dfc00117 	ldw	ra,4(sp)
  812320:	df000017 	ldw	fp,0(sp)
  812324:	dec00204 	addi	sp,sp,8
  812328:	f800283a 	ret

0081232c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81232c:	defffd04 	addi	sp,sp,-12
  812330:	dfc00215 	stw	ra,8(sp)
  812334:	df000115 	stw	fp,4(sp)
  812338:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81233c:	008020b4 	movhi	r2,130
  812340:	10b84604 	addi	r2,r2,-7912
  812344:	10800017 	ldw	r2,0(r2)
  812348:	1005003a 	cmpeq	r2,r2,zero
  81234c:	1000061e 	bne	r2,zero,812368 <alt_get_errno+0x3c>
  812350:	008020b4 	movhi	r2,130
  812354:	10b84604 	addi	r2,r2,-7912
  812358:	10800017 	ldw	r2,0(r2)
  81235c:	103ee83a 	callr	r2
  812360:	e0bfff15 	stw	r2,-4(fp)
  812364:	00000306 	br	812374 <alt_get_errno+0x48>
  812368:	008020b4 	movhi	r2,130
  81236c:	10bf6904 	addi	r2,r2,-604
  812370:	e0bfff15 	stw	r2,-4(fp)
  812374:	e0bfff17 	ldw	r2,-4(fp)
}
  812378:	e037883a 	mov	sp,fp
  81237c:	dfc00117 	ldw	ra,4(sp)
  812380:	df000017 	ldw	fp,0(sp)
  812384:	dec00204 	addi	sp,sp,8
  812388:	f800283a 	ret

0081238c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  81238c:	defffd04 	addi	sp,sp,-12
  812390:	dfc00215 	stw	ra,8(sp)
  812394:	df000115 	stw	fp,4(sp)
  812398:	df000104 	addi	fp,sp,4
  81239c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  8123a0:	081b0f00 	call	81b0f0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8123a4:	00800044 	movi	r2,1
  8123a8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8123ac:	e037883a 	mov	sp,fp
  8123b0:	dfc00117 	ldw	ra,4(sp)
  8123b4:	df000017 	ldw	fp,0(sp)
  8123b8:	dec00204 	addi	sp,sp,8
  8123bc:	f800283a 	ret

008123c0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8123c0:	defffd04 	addi	sp,sp,-12
  8123c4:	dfc00215 	stw	ra,8(sp)
  8123c8:	df000115 	stw	fp,4(sp)
  8123cc:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( HAL_SYSTEM_TIMER, HAL_system_timer);
  8123d0:	01004034 	movhi	r4,256
  8123d4:	21040004 	addi	r4,r4,4096
  8123d8:	000b883a 	mov	r5,zero
  8123dc:	000d883a 	mov	r6,zero
  8123e0:	01c0fa04 	movi	r7,1000
  8123e4:	08132880 	call	813288 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( HARDWARE_TIMER, hardware_timer);
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
  8123e8:	00c020b4 	movhi	r3,130
  8123ec:	18ff7704 	addi	r3,r3,-548
  8123f0:	00804034 	movhi	r2,256
  8123f4:	10840804 	addi	r2,r2,4128
  8123f8:	18800015 	stw	r2,0(r3)
  8123fc:	00c020b4 	movhi	r3,130
  812400:	18ff7804 	addi	r3,r3,-544
  812404:	0080bef4 	movhi	r2,763
  812408:	10bc2004 	addi	r2,r2,-3968
  81240c:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  812410:	010020b4 	movhi	r4,130
  812414:	2133d204 	addi	r4,r4,-12472
  812418:	000b883a 	mov	r5,zero
  81241c:	01800144 	movi	r6,5
  812420:	08128b40 	call	8128b4 <altera_avalon_jtag_uart_init>
  812424:	010020b4 	movhi	r4,130
  812428:	2133c804 	addi	r4,r4,-12512
  81242c:	08127340 	call	812734 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
  812430:	010020b4 	movhi	r4,130
  812434:	2137e004 	addi	r4,r4,-8320
  812438:	08127340 	call	812734 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
  81243c:	010020b4 	movhi	r4,130
  812440:	2137ec04 	addi	r4,r4,-8272
  812444:	08127340 	call	812734 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  812448:	010020b4 	movhi	r4,130
  81244c:	2137f804 	addi	r4,r4,-8224
  812450:	08144bc0 	call	8144bc <alt_up_character_lcd_init>
  812454:	010020b4 	movhi	r4,130
  812458:	2137f804 	addi	r4,r4,-8224
  81245c:	08127340 	call	812734 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_DRAWER, char_drawer);
  812460:	008020b4 	movhi	r2,130
  812464:	10b80304 	addi	r2,r2,-8180
  812468:	10800a17 	ldw	r2,40(r2)
  81246c:	10800104 	addi	r2,r2,4
  812470:	10800017 	ldw	r2,0(r2)
  812474:	10ffffcc 	andi	r3,r2,65535
  812478:	008020b4 	movhi	r2,130
  81247c:	10b80304 	addi	r2,r2,-8180
  812480:	10c00c15 	stw	r3,48(r2)
  812484:	008020b4 	movhi	r2,130
  812488:	10b80304 	addi	r2,r2,-8180
  81248c:	10800a17 	ldw	r2,40(r2)
  812490:	10800104 	addi	r2,r2,4
  812494:	10800017 	ldw	r2,0(r2)
  812498:	1005d43a 	srai	r2,r2,16
  81249c:	10ffffcc 	andi	r3,r2,65535
  8124a0:	008020b4 	movhi	r2,130
  8124a4:	10b80304 	addi	r2,r2,-8180
  8124a8:	10c00d15 	stw	r3,52(r2)
  8124ac:	008020b4 	movhi	r2,130
  8124b0:	10b80304 	addi	r2,r2,-8180
  8124b4:	10800c17 	ldw	r2,48(r2)
  8124b8:	10801068 	cmpgeui	r2,r2,65
  8124bc:	1000081e 	bne	r2,zero,8124e0 <alt_sys_init+0x120>
  8124c0:	00c020b4 	movhi	r3,130
  8124c4:	18f80304 	addi	r3,r3,-8180
  8124c8:	00800fc4 	movi	r2,63
  8124cc:	18800f15 	stw	r2,60(r3)
  8124d0:	00c020b4 	movhi	r3,130
  8124d4:	18f80304 	addi	r3,r3,-8180
  8124d8:	00800184 	movi	r2,6
  8124dc:	18801015 	stw	r2,64(r3)
  8124e0:	008020b4 	movhi	r2,130
  8124e4:	10b80304 	addi	r2,r2,-8180
  8124e8:	10800d17 	ldw	r2,52(r2)
  8124ec:	10800868 	cmpgeui	r2,r2,33
  8124f0:	1000041e 	bne	r2,zero,812504 <alt_sys_init+0x144>
  8124f4:	00c020b4 	movhi	r3,130
  8124f8:	18f80304 	addi	r3,r3,-8180
  8124fc:	008007c4 	movi	r2,31
  812500:	18801115 	stw	r2,68(r3)
  812504:	010020b4 	movhi	r4,130
  812508:	21380304 	addi	r4,r4,-8180
  81250c:	081493c0 	call	81493c <alt_up_char_buffer_init>
  812510:	010020b4 	movhi	r4,130
  812514:	21380304 	addi	r4,r4,-8180
  812518:	08127340 	call	812734 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, pixel_buffer_dma);
  81251c:	008020b4 	movhi	r2,130
  812520:	10b81504 	addi	r2,r2,-8108
  812524:	10800a17 	ldw	r2,40(r2)
  812528:	10800017 	ldw	r2,0(r2)
  81252c:	1007883a 	mov	r3,r2
  812530:	008020b4 	movhi	r2,130
  812534:	10b81504 	addi	r2,r2,-8108
  812538:	10c00b15 	stw	r3,44(r2)
  81253c:	008020b4 	movhi	r2,130
  812540:	10b81504 	addi	r2,r2,-8108
  812544:	10800a17 	ldw	r2,40(r2)
  812548:	10800104 	addi	r2,r2,4
  81254c:	10800017 	ldw	r2,0(r2)
  812550:	1007883a 	mov	r3,r2
  812554:	008020b4 	movhi	r2,130
  812558:	10b81504 	addi	r2,r2,-8108
  81255c:	10c00c15 	stw	r3,48(r2)
  812560:	008020b4 	movhi	r2,130
  812564:	10b81504 	addi	r2,r2,-8108
  812568:	10800a17 	ldw	r2,40(r2)
  81256c:	10800204 	addi	r2,r2,8
  812570:	10800017 	ldw	r2,0(r2)
  812574:	10ffffcc 	andi	r3,r2,65535
  812578:	008020b4 	movhi	r2,130
  81257c:	10b81504 	addi	r2,r2,-8108
  812580:	10c00f15 	stw	r3,60(r2)
  812584:	008020b4 	movhi	r2,130
  812588:	10b81504 	addi	r2,r2,-8108
  81258c:	10800a17 	ldw	r2,40(r2)
  812590:	10800204 	addi	r2,r2,8
  812594:	10800017 	ldw	r2,0(r2)
  812598:	1005d43a 	srai	r2,r2,16
  81259c:	10ffffcc 	andi	r3,r2,65535
  8125a0:	008020b4 	movhi	r2,130
  8125a4:	10b81504 	addi	r2,r2,-8108
  8125a8:	10c01015 	stw	r3,64(r2)
  8125ac:	008020b4 	movhi	r2,130
  8125b0:	10b81504 	addi	r2,r2,-8108
  8125b4:	10800a17 	ldw	r2,40(r2)
  8125b8:	10800304 	addi	r2,r2,12
  8125bc:	10800017 	ldw	r2,0(r2)
  8125c0:	1005d07a 	srai	r2,r2,1
  8125c4:	10c0004c 	andi	r3,r2,1
  8125c8:	008020b4 	movhi	r2,130
  8125cc:	10b81504 	addi	r2,r2,-8108
  8125d0:	10c00d15 	stw	r3,52(r2)
  8125d4:	008020b4 	movhi	r2,130
  8125d8:	10b81504 	addi	r2,r2,-8108
  8125dc:	10800a17 	ldw	r2,40(r2)
  8125e0:	10800304 	addi	r2,r2,12
  8125e4:	10800017 	ldw	r2,0(r2)
  8125e8:	1005d13a 	srai	r2,r2,4
  8125ec:	10c003cc 	andi	r3,r2,15
  8125f0:	008020b4 	movhi	r2,130
  8125f4:	10b81504 	addi	r2,r2,-8108
  8125f8:	10c00e15 	stw	r3,56(r2)
  8125fc:	008020b4 	movhi	r2,130
  812600:	10b81504 	addi	r2,r2,-8108
  812604:	10800a17 	ldw	r2,40(r2)
  812608:	10800304 	addi	r2,r2,12
  81260c:	10800017 	ldw	r2,0(r2)
  812610:	1005d43a 	srai	r2,r2,16
  812614:	1007883a 	mov	r3,r2
  812618:	00bfffc4 	movi	r2,-1
  81261c:	1884703a 	and	r2,r3,r2
  812620:	e0bfff45 	stb	r2,-3(fp)
  812624:	008020b4 	movhi	r2,130
  812628:	10b81504 	addi	r2,r2,-8108
  81262c:	10800a17 	ldw	r2,40(r2)
  812630:	10800304 	addi	r2,r2,12
  812634:	10800017 	ldw	r2,0(r2)
  812638:	1005d63a 	srai	r2,r2,24
  81263c:	1007883a 	mov	r3,r2
  812640:	00bfffc4 	movi	r2,-1
  812644:	1884703a 	and	r2,r3,r2
  812648:	e0bfff05 	stb	r2,-4(fp)
  81264c:	008020b4 	movhi	r2,130
  812650:	10b81504 	addi	r2,r2,-8108
  812654:	10800e17 	ldw	r2,56(r2)
  812658:	10800058 	cmpnei	r2,r2,1
  81265c:	1000041e 	bne	r2,zero,812670 <alt_sys_init+0x2b0>
  812660:	008020b4 	movhi	r2,130
  812664:	10b81504 	addi	r2,r2,-8108
  812668:	10001115 	stw	zero,68(r2)
  81266c:	00000e06 	br	8126a8 <alt_sys_init+0x2e8>
  812670:	008020b4 	movhi	r2,130
  812674:	10b81504 	addi	r2,r2,-8108
  812678:	10800e17 	ldw	r2,56(r2)
  81267c:	10800098 	cmpnei	r2,r2,2
  812680:	1000051e 	bne	r2,zero,812698 <alt_sys_init+0x2d8>
  812684:	00c020b4 	movhi	r3,130
  812688:	18f81504 	addi	r3,r3,-8108
  81268c:	00800044 	movi	r2,1
  812690:	18801115 	stw	r2,68(r3)
  812694:	00000406 	br	8126a8 <alt_sys_init+0x2e8>
  812698:	00c020b4 	movhi	r3,130
  81269c:	18f81504 	addi	r3,r3,-8108
  8126a0:	00800084 	movi	r2,2
  8126a4:	18801115 	stw	r2,68(r3)
  8126a8:	e0ffff43 	ldbu	r3,-3(fp)
  8126ac:	00800804 	movi	r2,32
  8126b0:	10c7c83a 	sub	r3,r2,r3
  8126b4:	00bfffc4 	movi	r2,-1
  8126b8:	10c6d83a 	srl	r3,r2,r3
  8126bc:	008020b4 	movhi	r2,130
  8126c0:	10b81504 	addi	r2,r2,-8108
  8126c4:	10c01215 	stw	r3,72(r2)
  8126c8:	e0ffff43 	ldbu	r3,-3(fp)
  8126cc:	008020b4 	movhi	r2,130
  8126d0:	10b81504 	addi	r2,r2,-8108
  8126d4:	10801117 	ldw	r2,68(r2)
  8126d8:	1887883a 	add	r3,r3,r2
  8126dc:	008020b4 	movhi	r2,130
  8126e0:	10b81504 	addi	r2,r2,-8108
  8126e4:	10c01315 	stw	r3,76(r2)
  8126e8:	e0ffff03 	ldbu	r3,-4(fp)
  8126ec:	00800804 	movi	r2,32
  8126f0:	10c7c83a 	sub	r3,r2,r3
  8126f4:	00bfffc4 	movi	r2,-1
  8126f8:	10c6d83a 	srl	r3,r2,r3
  8126fc:	008020b4 	movhi	r2,130
  812700:	10b81504 	addi	r2,r2,-8108
  812704:	10c01415 	stw	r3,80(r2)
  812708:	010020b4 	movhi	r4,130
  81270c:	21381504 	addi	r4,r4,-8108
  812710:	08127340 	call	812734 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
  812714:	010020b4 	movhi	r4,130
  812718:	21382a04 	addi	r4,r4,-8024
  81271c:	08127340 	call	812734 <alt_dev_reg>
}
  812720:	e037883a 	mov	sp,fp
  812724:	dfc00117 	ldw	ra,4(sp)
  812728:	df000017 	ldw	fp,0(sp)
  81272c:	dec00204 	addi	sp,sp,8
  812730:	f800283a 	ret

00812734 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  812734:	defffd04 	addi	sp,sp,-12
  812738:	dfc00215 	stw	ra,8(sp)
  81273c:	df000115 	stw	fp,4(sp)
  812740:	df000104 	addi	fp,sp,4
  812744:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  812748:	e13fff17 	ldw	r4,-4(fp)
  81274c:	014020b4 	movhi	r5,130
  812750:	29784304 	addi	r5,r5,-7924
  812754:	081aa500 	call	81aa50 <alt_dev_llist_insert>
}
  812758:	e037883a 	mov	sp,fp
  81275c:	dfc00117 	ldw	ra,4(sp)
  812760:	df000017 	ldw	fp,0(sp)
  812764:	dec00204 	addi	sp,sp,8
  812768:	f800283a 	ret

0081276c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  81276c:	defffa04 	addi	sp,sp,-24
  812770:	dfc00515 	stw	ra,20(sp)
  812774:	df000415 	stw	fp,16(sp)
  812778:	df000404 	addi	fp,sp,16
  81277c:	e13ffd15 	stw	r4,-12(fp)
  812780:	e17ffe15 	stw	r5,-8(fp)
  812784:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  812788:	e0bffd17 	ldw	r2,-12(fp)
  81278c:	10800017 	ldw	r2,0(r2)
  812790:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  812794:	e0bffc17 	ldw	r2,-16(fp)
  812798:	11000a04 	addi	r4,r2,40
  81279c:	e0bffd17 	ldw	r2,-12(fp)
  8127a0:	11c00217 	ldw	r7,8(r2)
  8127a4:	e17ffe17 	ldw	r5,-8(fp)
  8127a8:	e1bfff17 	ldw	r6,-4(fp)
  8127ac:	0812db00 	call	812db0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8127b0:	e037883a 	mov	sp,fp
  8127b4:	dfc00117 	ldw	ra,4(sp)
  8127b8:	df000017 	ldw	fp,0(sp)
  8127bc:	dec00204 	addi	sp,sp,8
  8127c0:	f800283a 	ret

008127c4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8127c4:	defffa04 	addi	sp,sp,-24
  8127c8:	dfc00515 	stw	ra,20(sp)
  8127cc:	df000415 	stw	fp,16(sp)
  8127d0:	df000404 	addi	fp,sp,16
  8127d4:	e13ffd15 	stw	r4,-12(fp)
  8127d8:	e17ffe15 	stw	r5,-8(fp)
  8127dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8127e0:	e0bffd17 	ldw	r2,-12(fp)
  8127e4:	10800017 	ldw	r2,0(r2)
  8127e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8127ec:	e0bffc17 	ldw	r2,-16(fp)
  8127f0:	11000a04 	addi	r4,r2,40
  8127f4:	e0bffd17 	ldw	r2,-12(fp)
  8127f8:	11c00217 	ldw	r7,8(r2)
  8127fc:	e17ffe17 	ldw	r5,-8(fp)
  812800:	e1bfff17 	ldw	r6,-4(fp)
  812804:	0812fd40 	call	812fd4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  812808:	e037883a 	mov	sp,fp
  81280c:	dfc00117 	ldw	ra,4(sp)
  812810:	df000017 	ldw	fp,0(sp)
  812814:	dec00204 	addi	sp,sp,8
  812818:	f800283a 	ret

0081281c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  81281c:	defffc04 	addi	sp,sp,-16
  812820:	dfc00315 	stw	ra,12(sp)
  812824:	df000215 	stw	fp,8(sp)
  812828:	df000204 	addi	fp,sp,8
  81282c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  812830:	e0bfff17 	ldw	r2,-4(fp)
  812834:	10800017 	ldw	r2,0(r2)
  812838:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  81283c:	e0bffe17 	ldw	r2,-8(fp)
  812840:	11000a04 	addi	r4,r2,40
  812844:	e0bfff17 	ldw	r2,-4(fp)
  812848:	11400217 	ldw	r5,8(r2)
  81284c:	0812c480 	call	812c48 <altera_avalon_jtag_uart_close>
}
  812850:	e037883a 	mov	sp,fp
  812854:	dfc00117 	ldw	ra,4(sp)
  812858:	df000017 	ldw	fp,0(sp)
  81285c:	dec00204 	addi	sp,sp,8
  812860:	f800283a 	ret

00812864 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  812864:	defffa04 	addi	sp,sp,-24
  812868:	dfc00515 	stw	ra,20(sp)
  81286c:	df000415 	stw	fp,16(sp)
  812870:	df000404 	addi	fp,sp,16
  812874:	e13ffd15 	stw	r4,-12(fp)
  812878:	e17ffe15 	stw	r5,-8(fp)
  81287c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  812880:	e0bffd17 	ldw	r2,-12(fp)
  812884:	10800017 	ldw	r2,0(r2)
  812888:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  81288c:	e0bffc17 	ldw	r2,-16(fp)
  812890:	11000a04 	addi	r4,r2,40
  812894:	e17ffe17 	ldw	r5,-8(fp)
  812898:	e1bfff17 	ldw	r6,-4(fp)
  81289c:	0812cbc0 	call	812cbc <altera_avalon_jtag_uart_ioctl>
}
  8128a0:	e037883a 	mov	sp,fp
  8128a4:	dfc00117 	ldw	ra,4(sp)
  8128a8:	df000017 	ldw	fp,0(sp)
  8128ac:	dec00204 	addi	sp,sp,8
  8128b0:	f800283a 	ret

008128b4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8128b4:	defffb04 	addi	sp,sp,-20
  8128b8:	dfc00415 	stw	ra,16(sp)
  8128bc:	df000315 	stw	fp,12(sp)
  8128c0:	df000304 	addi	fp,sp,12
  8128c4:	e13ffd15 	stw	r4,-12(fp)
  8128c8:	e17ffe15 	stw	r5,-8(fp)
  8128cc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8128d0:	e0fffd17 	ldw	r3,-12(fp)
  8128d4:	00800044 	movi	r2,1
  8128d8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8128dc:	e0bffd17 	ldw	r2,-12(fp)
  8128e0:	10800017 	ldw	r2,0(r2)
  8128e4:	11000104 	addi	r4,r2,4
  8128e8:	e0bffd17 	ldw	r2,-12(fp)
  8128ec:	10800817 	ldw	r2,32(r2)
  8128f0:	1007883a 	mov	r3,r2
  8128f4:	2005883a 	mov	r2,r4
  8128f8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  8128fc:	e13fff17 	ldw	r4,-4(fp)
  812900:	e17ffd17 	ldw	r5,-12(fp)
  812904:	01802074 	movhi	r6,129
  812908:	318a5b04 	addi	r6,r6,10604
  81290c:	08117d40 	call	8117d4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  812910:	e0bffd17 	ldw	r2,-12(fp)
  812914:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  812918:	e0bffd17 	ldw	r2,-12(fp)
  81291c:	11000204 	addi	r4,r2,8
  812920:	008020b4 	movhi	r2,130
  812924:	10bf7504 	addi	r2,r2,-556
  812928:	10800017 	ldw	r2,0(r2)
  81292c:	100b883a 	mov	r5,r2
  812930:	01802074 	movhi	r6,129
  812934:	318ae604 	addi	r6,r6,11160
  812938:	e1fffd17 	ldw	r7,-12(fp)
  81293c:	081a76c0 	call	81a76c <alt_alarm_start>
  812940:	1004403a 	cmpge	r2,r2,zero
  812944:	1000041e 	bne	r2,zero,812958 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  812948:	e0fffd17 	ldw	r3,-12(fp)
  81294c:	00a00034 	movhi	r2,32768
  812950:	10bfffc4 	addi	r2,r2,-1
  812954:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  812958:	e037883a 	mov	sp,fp
  81295c:	dfc00117 	ldw	ra,4(sp)
  812960:	df000017 	ldw	fp,0(sp)
  812964:	dec00204 	addi	sp,sp,8
  812968:	f800283a 	ret

0081296c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  81296c:	defff704 	addi	sp,sp,-36
  812970:	df000815 	stw	fp,32(sp)
  812974:	df000804 	addi	fp,sp,32
  812978:	e13ffe15 	stw	r4,-8(fp)
  81297c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  812980:	e0bffe17 	ldw	r2,-8(fp)
  812984:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  812988:	e0bffd17 	ldw	r2,-12(fp)
  81298c:	10800017 	ldw	r2,0(r2)
  812990:	e0bffc15 	stw	r2,-16(fp)
  812994:	00000006 	br	812998 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  812998:	e0bffc17 	ldw	r2,-16(fp)
  81299c:	10800104 	addi	r2,r2,4
  8129a0:	10800037 	ldwio	r2,0(r2)
  8129a4:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8129a8:	e0bffb17 	ldw	r2,-20(fp)
  8129ac:	1080c00c 	andi	r2,r2,768
  8129b0:	1005003a 	cmpeq	r2,r2,zero
  8129b4:	1000741e 	bne	r2,zero,812b88 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8129b8:	e0bffb17 	ldw	r2,-20(fp)
  8129bc:	1080400c 	andi	r2,r2,256
  8129c0:	1005003a 	cmpeq	r2,r2,zero
  8129c4:	1000351e 	bne	r2,zero,812a9c <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  8129c8:	00800074 	movhi	r2,1
  8129cc:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8129d0:	e0bffd17 	ldw	r2,-12(fp)
  8129d4:	10800a17 	ldw	r2,40(r2)
  8129d8:	10800044 	addi	r2,r2,1
  8129dc:	1081ffcc 	andi	r2,r2,2047
  8129e0:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  8129e4:	e0bffd17 	ldw	r2,-12(fp)
  8129e8:	10c00b17 	ldw	r3,44(r2)
  8129ec:	e0bff917 	ldw	r2,-28(fp)
  8129f0:	18801626 	beq	r3,r2,812a4c <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8129f4:	e0bffc17 	ldw	r2,-16(fp)
  8129f8:	10800037 	ldwio	r2,0(r2)
  8129fc:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  812a00:	e0bffa17 	ldw	r2,-24(fp)
  812a04:	10a0000c 	andi	r2,r2,32768
  812a08:	1005003a 	cmpeq	r2,r2,zero
  812a0c:	10000f1e 	bne	r2,zero,812a4c <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  812a10:	e0bffd17 	ldw	r2,-12(fp)
  812a14:	10c00a17 	ldw	r3,40(r2)
  812a18:	e0bffa17 	ldw	r2,-24(fp)
  812a1c:	1009883a 	mov	r4,r2
  812a20:	e0bffd17 	ldw	r2,-12(fp)
  812a24:	1885883a 	add	r2,r3,r2
  812a28:	10800e04 	addi	r2,r2,56
  812a2c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812a30:	e0bffd17 	ldw	r2,-12(fp)
  812a34:	10800a17 	ldw	r2,40(r2)
  812a38:	10800044 	addi	r2,r2,1
  812a3c:	10c1ffcc 	andi	r3,r2,2047
  812a40:	e0bffd17 	ldw	r2,-12(fp)
  812a44:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  812a48:	003fe106 	br	8129d0 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  812a4c:	e0bffa17 	ldw	r2,-24(fp)
  812a50:	10bfffec 	andhi	r2,r2,65535
  812a54:	1005003a 	cmpeq	r2,r2,zero
  812a58:	1000101e 	bne	r2,zero,812a9c <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  812a5c:	e0bffd17 	ldw	r2,-12(fp)
  812a60:	10c00817 	ldw	r3,32(r2)
  812a64:	00bfff84 	movi	r2,-2
  812a68:	1886703a 	and	r3,r3,r2
  812a6c:	e0bffd17 	ldw	r2,-12(fp)
  812a70:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  812a74:	e0bffc17 	ldw	r2,-16(fp)
  812a78:	11000104 	addi	r4,r2,4
  812a7c:	e0bffd17 	ldw	r2,-12(fp)
  812a80:	10800817 	ldw	r2,32(r2)
  812a84:	1007883a 	mov	r3,r2
  812a88:	2005883a 	mov	r2,r4
  812a8c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  812a90:	e0bffc17 	ldw	r2,-16(fp)
  812a94:	10800104 	addi	r2,r2,4
  812a98:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  812a9c:	e0bffb17 	ldw	r2,-20(fp)
  812aa0:	1080800c 	andi	r2,r2,512
  812aa4:	1005003a 	cmpeq	r2,r2,zero
  812aa8:	103fbb1e 	bne	r2,zero,812998 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  812aac:	e0bffb17 	ldw	r2,-20(fp)
  812ab0:	10bfffec 	andhi	r2,r2,65535
  812ab4:	1004d43a 	srli	r2,r2,16
  812ab8:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  812abc:	00001506 	br	812b14 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  812ac0:	e13ffc17 	ldw	r4,-16(fp)
  812ac4:	e0bffd17 	ldw	r2,-12(fp)
  812ac8:	10c00d17 	ldw	r3,52(r2)
  812acc:	e0bffd17 	ldw	r2,-12(fp)
  812ad0:	1885883a 	add	r2,r3,r2
  812ad4:	10820e04 	addi	r2,r2,2104
  812ad8:	10800003 	ldbu	r2,0(r2)
  812adc:	10c03fcc 	andi	r3,r2,255
  812ae0:	18c0201c 	xori	r3,r3,128
  812ae4:	18ffe004 	addi	r3,r3,-128
  812ae8:	2005883a 	mov	r2,r4
  812aec:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812af0:	e0bffd17 	ldw	r2,-12(fp)
  812af4:	10800d17 	ldw	r2,52(r2)
  812af8:	10800044 	addi	r2,r2,1
  812afc:	10c1ffcc 	andi	r3,r2,2047
  812b00:	e0bffd17 	ldw	r2,-12(fp)
  812b04:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  812b08:	e0bff817 	ldw	r2,-32(fp)
  812b0c:	10bfffc4 	addi	r2,r2,-1
  812b10:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  812b14:	e0bff817 	ldw	r2,-32(fp)
  812b18:	1005003a 	cmpeq	r2,r2,zero
  812b1c:	1000051e 	bne	r2,zero,812b34 <altera_avalon_jtag_uart_irq+0x1c8>
  812b20:	e0bffd17 	ldw	r2,-12(fp)
  812b24:	10c00d17 	ldw	r3,52(r2)
  812b28:	e0bffd17 	ldw	r2,-12(fp)
  812b2c:	10800c17 	ldw	r2,48(r2)
  812b30:	18bfe31e 	bne	r3,r2,812ac0 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  812b34:	e0bff817 	ldw	r2,-32(fp)
  812b38:	1005003a 	cmpeq	r2,r2,zero
  812b3c:	103f961e 	bne	r2,zero,812998 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  812b40:	e0bffd17 	ldw	r2,-12(fp)
  812b44:	10c00817 	ldw	r3,32(r2)
  812b48:	00bfff44 	movi	r2,-3
  812b4c:	1886703a 	and	r3,r3,r2
  812b50:	e0bffd17 	ldw	r2,-12(fp)
  812b54:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  812b58:	e0bffd17 	ldw	r2,-12(fp)
  812b5c:	10800017 	ldw	r2,0(r2)
  812b60:	11000104 	addi	r4,r2,4
  812b64:	e0bffd17 	ldw	r2,-12(fp)
  812b68:	10800817 	ldw	r2,32(r2)
  812b6c:	1007883a 	mov	r3,r2
  812b70:	2005883a 	mov	r2,r4
  812b74:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  812b78:	e0bffc17 	ldw	r2,-16(fp)
  812b7c:	10800104 	addi	r2,r2,4
  812b80:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  812b84:	003f8406 	br	812998 <altera_avalon_jtag_uart_irq+0x2c>
}
  812b88:	e037883a 	mov	sp,fp
  812b8c:	df000017 	ldw	fp,0(sp)
  812b90:	dec00104 	addi	sp,sp,4
  812b94:	f800283a 	ret

00812b98 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  812b98:	defffc04 	addi	sp,sp,-16
  812b9c:	df000315 	stw	fp,12(sp)
  812ba0:	df000304 	addi	fp,sp,12
  812ba4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  812ba8:	e0bfff17 	ldw	r2,-4(fp)
  812bac:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  812bb0:	e0bffe17 	ldw	r2,-8(fp)
  812bb4:	10800017 	ldw	r2,0(r2)
  812bb8:	10800104 	addi	r2,r2,4
  812bbc:	10800037 	ldwio	r2,0(r2)
  812bc0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  812bc4:	e0bffd17 	ldw	r2,-12(fp)
  812bc8:	1081000c 	andi	r2,r2,1024
  812bcc:	1005003a 	cmpeq	r2,r2,zero
  812bd0:	10000c1e 	bne	r2,zero,812c04 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  812bd4:	e0bffe17 	ldw	r2,-8(fp)
  812bd8:	10800017 	ldw	r2,0(r2)
  812bdc:	11000104 	addi	r4,r2,4
  812be0:	e0bffe17 	ldw	r2,-8(fp)
  812be4:	10800817 	ldw	r2,32(r2)
  812be8:	10810014 	ori	r2,r2,1024
  812bec:	1007883a 	mov	r3,r2
  812bf0:	2005883a 	mov	r2,r4
  812bf4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  812bf8:	e0bffe17 	ldw	r2,-8(fp)
  812bfc:	10000915 	stw	zero,36(r2)
  812c00:	00000a06 	br	812c2c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  812c04:	e0bffe17 	ldw	r2,-8(fp)
  812c08:	10c00917 	ldw	r3,36(r2)
  812c0c:	00a00034 	movhi	r2,32768
  812c10:	10bfff04 	addi	r2,r2,-4
  812c14:	10c00536 	bltu	r2,r3,812c2c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  812c18:	e0bffe17 	ldw	r2,-8(fp)
  812c1c:	10800917 	ldw	r2,36(r2)
  812c20:	10c00044 	addi	r3,r2,1
  812c24:	e0bffe17 	ldw	r2,-8(fp)
  812c28:	10c00915 	stw	r3,36(r2)
  812c2c:	008020b4 	movhi	r2,130
  812c30:	10bf7504 	addi	r2,r2,-556
  812c34:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  812c38:	e037883a 	mov	sp,fp
  812c3c:	df000017 	ldw	fp,0(sp)
  812c40:	dec00104 	addi	sp,sp,4
  812c44:	f800283a 	ret

00812c48 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  812c48:	defffc04 	addi	sp,sp,-16
  812c4c:	df000315 	stw	fp,12(sp)
  812c50:	df000304 	addi	fp,sp,12
  812c54:	e13ffd15 	stw	r4,-12(fp)
  812c58:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  812c5c:	00000706 	br	812c7c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  812c60:	e0bffe17 	ldw	r2,-8(fp)
  812c64:	1090000c 	andi	r2,r2,16384
  812c68:	1005003a 	cmpeq	r2,r2,zero
  812c6c:	1000031e 	bne	r2,zero,812c7c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  812c70:	00bffd44 	movi	r2,-11
  812c74:	e0bfff15 	stw	r2,-4(fp)
  812c78:	00000b06 	br	812ca8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  812c7c:	e0bffd17 	ldw	r2,-12(fp)
  812c80:	10c00d17 	ldw	r3,52(r2)
  812c84:	e0bffd17 	ldw	r2,-12(fp)
  812c88:	10800c17 	ldw	r2,48(r2)
  812c8c:	18800526 	beq	r3,r2,812ca4 <altera_avalon_jtag_uart_close+0x5c>
  812c90:	e0bffd17 	ldw	r2,-12(fp)
  812c94:	10c00917 	ldw	r3,36(r2)
  812c98:	e0bffd17 	ldw	r2,-12(fp)
  812c9c:	10800117 	ldw	r2,4(r2)
  812ca0:	18bfef36 	bltu	r3,r2,812c60 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  812ca4:	e03fff15 	stw	zero,-4(fp)
  812ca8:	e0bfff17 	ldw	r2,-4(fp)
}
  812cac:	e037883a 	mov	sp,fp
  812cb0:	df000017 	ldw	fp,0(sp)
  812cb4:	dec00104 	addi	sp,sp,4
  812cb8:	f800283a 	ret

00812cbc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  812cbc:	defff804 	addi	sp,sp,-32
  812cc0:	df000715 	stw	fp,28(sp)
  812cc4:	df000704 	addi	fp,sp,28
  812cc8:	e13ffb15 	stw	r4,-20(fp)
  812ccc:	e17ffc15 	stw	r5,-16(fp)
  812cd0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  812cd4:	00bff9c4 	movi	r2,-25
  812cd8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  812cdc:	e0bffc17 	ldw	r2,-16(fp)
  812ce0:	e0bfff15 	stw	r2,-4(fp)
  812ce4:	e0ffff17 	ldw	r3,-4(fp)
  812ce8:	189a8060 	cmpeqi	r2,r3,27137
  812cec:	1000041e 	bne	r2,zero,812d00 <altera_avalon_jtag_uart_ioctl+0x44>
  812cf0:	e0ffff17 	ldw	r3,-4(fp)
  812cf4:	189a80a0 	cmpeqi	r2,r3,27138
  812cf8:	10001b1e 	bne	r2,zero,812d68 <altera_avalon_jtag_uart_ioctl+0xac>
  812cfc:	00002706 	br	812d9c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  812d00:	e0bffb17 	ldw	r2,-20(fp)
  812d04:	10c00117 	ldw	r3,4(r2)
  812d08:	00a00034 	movhi	r2,32768
  812d0c:	10bfffc4 	addi	r2,r2,-1
  812d10:	18802226 	beq	r3,r2,812d9c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  812d14:	e0bffd17 	ldw	r2,-12(fp)
  812d18:	10800017 	ldw	r2,0(r2)
  812d1c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  812d20:	e0bff917 	ldw	r2,-28(fp)
  812d24:	10800090 	cmplti	r2,r2,2
  812d28:	1000071e 	bne	r2,zero,812d48 <altera_avalon_jtag_uart_ioctl+0x8c>
  812d2c:	e0fff917 	ldw	r3,-28(fp)
  812d30:	00a00034 	movhi	r2,32768
  812d34:	10bfffc4 	addi	r2,r2,-1
  812d38:	18800326 	beq	r3,r2,812d48 <altera_avalon_jtag_uart_ioctl+0x8c>
  812d3c:	e0bff917 	ldw	r2,-28(fp)
  812d40:	e0bffe15 	stw	r2,-8(fp)
  812d44:	00000306 	br	812d54 <altera_avalon_jtag_uart_ioctl+0x98>
  812d48:	00e00034 	movhi	r3,32768
  812d4c:	18ffff84 	addi	r3,r3,-2
  812d50:	e0fffe15 	stw	r3,-8(fp)
  812d54:	e0bffb17 	ldw	r2,-20(fp)
  812d58:	e0fffe17 	ldw	r3,-8(fp)
  812d5c:	10c00115 	stw	r3,4(r2)
      rc = 0;
  812d60:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  812d64:	00000d06 	br	812d9c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  812d68:	e0bffb17 	ldw	r2,-20(fp)
  812d6c:	10c00117 	ldw	r3,4(r2)
  812d70:	00a00034 	movhi	r2,32768
  812d74:	10bfffc4 	addi	r2,r2,-1
  812d78:	18800826 	beq	r3,r2,812d9c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  812d7c:	e13ffd17 	ldw	r4,-12(fp)
  812d80:	e0bffb17 	ldw	r2,-20(fp)
  812d84:	10c00917 	ldw	r3,36(r2)
  812d88:	e0bffb17 	ldw	r2,-20(fp)
  812d8c:	10800117 	ldw	r2,4(r2)
  812d90:	1885803a 	cmpltu	r2,r3,r2
  812d94:	20800015 	stw	r2,0(r4)
      rc = 0;
  812d98:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  812d9c:	e0bffa17 	ldw	r2,-24(fp)
}
  812da0:	e037883a 	mov	sp,fp
  812da4:	df000017 	ldw	fp,0(sp)
  812da8:	dec00104 	addi	sp,sp,4
  812dac:	f800283a 	ret

00812db0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  812db0:	defff204 	addi	sp,sp,-56
  812db4:	dfc00d15 	stw	ra,52(sp)
  812db8:	df000c15 	stw	fp,48(sp)
  812dbc:	df000c04 	addi	fp,sp,48
  812dc0:	e13ffb15 	stw	r4,-20(fp)
  812dc4:	e17ffc15 	stw	r5,-16(fp)
  812dc8:	e1bffd15 	stw	r6,-12(fp)
  812dcc:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  812dd0:	e0bffc17 	ldw	r2,-16(fp)
  812dd4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  812dd8:	00004806 	br	812efc <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  812ddc:	e0bffb17 	ldw	r2,-20(fp)
  812de0:	10800a17 	ldw	r2,40(r2)
  812de4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  812de8:	e0bffb17 	ldw	r2,-20(fp)
  812dec:	10800b17 	ldw	r2,44(r2)
  812df0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  812df4:	e0fff717 	ldw	r3,-36(fp)
  812df8:	e0bff617 	ldw	r2,-40(fp)
  812dfc:	18800536 	bltu	r3,r2,812e14 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  812e00:	e0bff717 	ldw	r2,-36(fp)
  812e04:	e0fff617 	ldw	r3,-40(fp)
  812e08:	10c5c83a 	sub	r2,r2,r3
  812e0c:	e0bff815 	stw	r2,-32(fp)
  812e10:	00000406 	br	812e24 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  812e14:	00820004 	movi	r2,2048
  812e18:	e0fff617 	ldw	r3,-40(fp)
  812e1c:	10c5c83a 	sub	r2,r2,r3
  812e20:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  812e24:	e0bff817 	ldw	r2,-32(fp)
  812e28:	1005003a 	cmpeq	r2,r2,zero
  812e2c:	10001f1e 	bne	r2,zero,812eac <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  812e30:	e0fffd17 	ldw	r3,-12(fp)
  812e34:	e0bff817 	ldw	r2,-32(fp)
  812e38:	1880022e 	bgeu	r3,r2,812e44 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  812e3c:	e0bffd17 	ldw	r2,-12(fp)
  812e40:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  812e44:	e0bffb17 	ldw	r2,-20(fp)
  812e48:	10c00e04 	addi	r3,r2,56
  812e4c:	e0bff617 	ldw	r2,-40(fp)
  812e50:	1887883a 	add	r3,r3,r2
  812e54:	e0bffa17 	ldw	r2,-24(fp)
  812e58:	1009883a 	mov	r4,r2
  812e5c:	180b883a 	mov	r5,r3
  812e60:	e1bff817 	ldw	r6,-32(fp)
  812e64:	080e6780 	call	80e678 <memcpy>
      ptr   += n;
  812e68:	e0fff817 	ldw	r3,-32(fp)
  812e6c:	e0bffa17 	ldw	r2,-24(fp)
  812e70:	10c5883a 	add	r2,r2,r3
  812e74:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  812e78:	e0fffd17 	ldw	r3,-12(fp)
  812e7c:	e0bff817 	ldw	r2,-32(fp)
  812e80:	1885c83a 	sub	r2,r3,r2
  812e84:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812e88:	e0fff617 	ldw	r3,-40(fp)
  812e8c:	e0bff817 	ldw	r2,-32(fp)
  812e90:	1885883a 	add	r2,r3,r2
  812e94:	10c1ffcc 	andi	r3,r2,2047
  812e98:	e0bffb17 	ldw	r2,-20(fp)
  812e9c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  812ea0:	e0bffd17 	ldw	r2,-12(fp)
  812ea4:	10800048 	cmpgei	r2,r2,1
  812ea8:	103fcc1e 	bne	r2,zero,812ddc <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  812eac:	e0fffa17 	ldw	r3,-24(fp)
  812eb0:	e0bffc17 	ldw	r2,-16(fp)
  812eb4:	1880141e 	bne	r3,r2,812f08 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  812eb8:	e0bffe17 	ldw	r2,-8(fp)
  812ebc:	1090000c 	andi	r2,r2,16384
  812ec0:	1004c03a 	cmpne	r2,r2,zero
  812ec4:	1000101e 	bne	r2,zero,812f08 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  812ec8:	e0bffb17 	ldw	r2,-20(fp)
  812ecc:	10c00a17 	ldw	r3,40(r2)
  812ed0:	e0bff717 	ldw	r2,-36(fp)
  812ed4:	1880051e 	bne	r3,r2,812eec <altera_avalon_jtag_uart_read+0x13c>
  812ed8:	e0bffb17 	ldw	r2,-20(fp)
  812edc:	10c00917 	ldw	r3,36(r2)
  812ee0:	e0bffb17 	ldw	r2,-20(fp)
  812ee4:	10800117 	ldw	r2,4(r2)
  812ee8:	18bff736 	bltu	r3,r2,812ec8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  812eec:	e0bffb17 	ldw	r2,-20(fp)
  812ef0:	10c00a17 	ldw	r3,40(r2)
  812ef4:	e0bff717 	ldw	r2,-36(fp)
  812ef8:	18800326 	beq	r3,r2,812f08 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  812efc:	e0bffd17 	ldw	r2,-12(fp)
  812f00:	10800048 	cmpgei	r2,r2,1
  812f04:	103fb51e 	bne	r2,zero,812ddc <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  812f08:	e0fffa17 	ldw	r3,-24(fp)
  812f0c:	e0bffc17 	ldw	r2,-16(fp)
  812f10:	18801926 	beq	r3,r2,812f78 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812f14:	0005303a 	rdctl	r2,status
  812f18:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812f1c:	e0fff517 	ldw	r3,-44(fp)
  812f20:	00bfff84 	movi	r2,-2
  812f24:	1884703a 	and	r2,r3,r2
  812f28:	1001703a 	wrctl	status,r2
  
  return context;
  812f2c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  812f30:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  812f34:	e0bffb17 	ldw	r2,-20(fp)
  812f38:	10800817 	ldw	r2,32(r2)
  812f3c:	10c00054 	ori	r3,r2,1
  812f40:	e0bffb17 	ldw	r2,-20(fp)
  812f44:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  812f48:	e0bffb17 	ldw	r2,-20(fp)
  812f4c:	10800017 	ldw	r2,0(r2)
  812f50:	11000104 	addi	r4,r2,4
  812f54:	e0bffb17 	ldw	r2,-20(fp)
  812f58:	10800817 	ldw	r2,32(r2)
  812f5c:	1007883a 	mov	r3,r2
  812f60:	2005883a 	mov	r2,r4
  812f64:	10c00035 	stwio	r3,0(r2)
  812f68:	e0bff917 	ldw	r2,-28(fp)
  812f6c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812f70:	e0bff417 	ldw	r2,-48(fp)
  812f74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  812f78:	e0fffa17 	ldw	r3,-24(fp)
  812f7c:	e0bffc17 	ldw	r2,-16(fp)
  812f80:	18800526 	beq	r3,r2,812f98 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  812f84:	e0fffa17 	ldw	r3,-24(fp)
  812f88:	e0bffc17 	ldw	r2,-16(fp)
  812f8c:	1887c83a 	sub	r3,r3,r2
  812f90:	e0ffff15 	stw	r3,-4(fp)
  812f94:	00000906 	br	812fbc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  812f98:	e0bffe17 	ldw	r2,-8(fp)
  812f9c:	1090000c 	andi	r2,r2,16384
  812fa0:	1005003a 	cmpeq	r2,r2,zero
  812fa4:	1000031e 	bne	r2,zero,812fb4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  812fa8:	00bffd44 	movi	r2,-11
  812fac:	e0bfff15 	stw	r2,-4(fp)
  812fb0:	00000206 	br	812fbc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  812fb4:	00bffec4 	movi	r2,-5
  812fb8:	e0bfff15 	stw	r2,-4(fp)
  812fbc:	e0bfff17 	ldw	r2,-4(fp)
}
  812fc0:	e037883a 	mov	sp,fp
  812fc4:	dfc00117 	ldw	ra,4(sp)
  812fc8:	df000017 	ldw	fp,0(sp)
  812fcc:	dec00204 	addi	sp,sp,8
  812fd0:	f800283a 	ret

00812fd4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  812fd4:	defff204 	addi	sp,sp,-56
  812fd8:	dfc00d15 	stw	ra,52(sp)
  812fdc:	df000c15 	stw	fp,48(sp)
  812fe0:	df000c04 	addi	fp,sp,48
  812fe4:	e13ffb15 	stw	r4,-20(fp)
  812fe8:	e17ffc15 	stw	r5,-16(fp)
  812fec:	e1bffd15 	stw	r6,-12(fp)
  812ff0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  812ff4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  812ff8:	e0bffc17 	ldw	r2,-16(fp)
  812ffc:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  813000:	00003a06 	br	8130ec <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  813004:	e0bffb17 	ldw	r2,-20(fp)
  813008:	10800c17 	ldw	r2,48(r2)
  81300c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  813010:	e0bffb17 	ldw	r2,-20(fp)
  813014:	10800d17 	ldw	r2,52(r2)
  813018:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  81301c:	e0fffa17 	ldw	r3,-24(fp)
  813020:	e0bff917 	ldw	r2,-28(fp)
  813024:	1880062e 	bgeu	r3,r2,813040 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  813028:	e0fff917 	ldw	r3,-28(fp)
  81302c:	e0bffa17 	ldw	r2,-24(fp)
  813030:	1885c83a 	sub	r2,r3,r2
  813034:	10bfffc4 	addi	r2,r2,-1
  813038:	e0bff815 	stw	r2,-32(fp)
  81303c:	00000c06 	br	813070 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  813040:	e0bff917 	ldw	r2,-28(fp)
  813044:	1005003a 	cmpeq	r2,r2,zero
  813048:	1000051e 	bne	r2,zero,813060 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  81304c:	00820004 	movi	r2,2048
  813050:	e0fffa17 	ldw	r3,-24(fp)
  813054:	10c5c83a 	sub	r2,r2,r3
  813058:	e0bff815 	stw	r2,-32(fp)
  81305c:	00000406 	br	813070 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  813060:	0081ffc4 	movi	r2,2047
  813064:	e0fffa17 	ldw	r3,-24(fp)
  813068:	10c5c83a 	sub	r2,r2,r3
  81306c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  813070:	e0bff817 	ldw	r2,-32(fp)
  813074:	1005003a 	cmpeq	r2,r2,zero
  813078:	10001f1e 	bne	r2,zero,8130f8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  81307c:	e0fffd17 	ldw	r3,-12(fp)
  813080:	e0bff817 	ldw	r2,-32(fp)
  813084:	1880022e 	bgeu	r3,r2,813090 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  813088:	e0bffd17 	ldw	r2,-12(fp)
  81308c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  813090:	e0bffb17 	ldw	r2,-20(fp)
  813094:	10c20e04 	addi	r3,r2,2104
  813098:	e0bffa17 	ldw	r2,-24(fp)
  81309c:	1885883a 	add	r2,r3,r2
  8130a0:	e0fffc17 	ldw	r3,-16(fp)
  8130a4:	1009883a 	mov	r4,r2
  8130a8:	180b883a 	mov	r5,r3
  8130ac:	e1bff817 	ldw	r6,-32(fp)
  8130b0:	080e6780 	call	80e678 <memcpy>
      ptr   += n;
  8130b4:	e0fff817 	ldw	r3,-32(fp)
  8130b8:	e0bffc17 	ldw	r2,-16(fp)
  8130bc:	10c5883a 	add	r2,r2,r3
  8130c0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  8130c4:	e0fffd17 	ldw	r3,-12(fp)
  8130c8:	e0bff817 	ldw	r2,-32(fp)
  8130cc:	1885c83a 	sub	r2,r3,r2
  8130d0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8130d4:	e0fffa17 	ldw	r3,-24(fp)
  8130d8:	e0bff817 	ldw	r2,-32(fp)
  8130dc:	1885883a 	add	r2,r3,r2
  8130e0:	10c1ffcc 	andi	r3,r2,2047
  8130e4:	e0bffb17 	ldw	r2,-20(fp)
  8130e8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8130ec:	e0bffd17 	ldw	r2,-12(fp)
  8130f0:	10800048 	cmpgei	r2,r2,1
  8130f4:	103fc31e 	bne	r2,zero,813004 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8130f8:	0005303a 	rdctl	r2,status
  8130fc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813100:	e0fff517 	ldw	r3,-44(fp)
  813104:	00bfff84 	movi	r2,-2
  813108:	1884703a 	and	r2,r3,r2
  81310c:	1001703a 	wrctl	status,r2
  
  return context;
  813110:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  813114:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  813118:	e0bffb17 	ldw	r2,-20(fp)
  81311c:	10800817 	ldw	r2,32(r2)
  813120:	10c00094 	ori	r3,r2,2
  813124:	e0bffb17 	ldw	r2,-20(fp)
  813128:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81312c:	e0bffb17 	ldw	r2,-20(fp)
  813130:	10800017 	ldw	r2,0(r2)
  813134:	11000104 	addi	r4,r2,4
  813138:	e0bffb17 	ldw	r2,-20(fp)
  81313c:	10800817 	ldw	r2,32(r2)
  813140:	1007883a 	mov	r3,r2
  813144:	2005883a 	mov	r2,r4
  813148:	10c00035 	stwio	r3,0(r2)
  81314c:	e0bff717 	ldw	r2,-36(fp)
  813150:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813154:	e0bff417 	ldw	r2,-48(fp)
  813158:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  81315c:	e0bffd17 	ldw	r2,-12(fp)
  813160:	10800050 	cmplti	r2,r2,1
  813164:	1000111e 	bne	r2,zero,8131ac <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  813168:	e0bffe17 	ldw	r2,-8(fp)
  81316c:	1090000c 	andi	r2,r2,16384
  813170:	1004c03a 	cmpne	r2,r2,zero
  813174:	1000101e 	bne	r2,zero,8131b8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  813178:	e0bffb17 	ldw	r2,-20(fp)
  81317c:	10c00d17 	ldw	r3,52(r2)
  813180:	e0bff917 	ldw	r2,-28(fp)
  813184:	1880051e 	bne	r3,r2,81319c <altera_avalon_jtag_uart_write+0x1c8>
  813188:	e0bffb17 	ldw	r2,-20(fp)
  81318c:	10c00917 	ldw	r3,36(r2)
  813190:	e0bffb17 	ldw	r2,-20(fp)
  813194:	10800117 	ldw	r2,4(r2)
  813198:	18bff736 	bltu	r3,r2,813178 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  81319c:	e0bffb17 	ldw	r2,-20(fp)
  8131a0:	10c00d17 	ldw	r3,52(r2)
  8131a4:	e0bff917 	ldw	r2,-28(fp)
  8131a8:	18800326 	beq	r3,r2,8131b8 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  8131ac:	e0bffd17 	ldw	r2,-12(fp)
  8131b0:	10800048 	cmpgei	r2,r2,1
  8131b4:	103fcd1e 	bne	r2,zero,8130ec <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8131b8:	e0fffc17 	ldw	r3,-16(fp)
  8131bc:	e0bff617 	ldw	r2,-40(fp)
  8131c0:	18800526 	beq	r3,r2,8131d8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  8131c4:	e0fffc17 	ldw	r3,-16(fp)
  8131c8:	e0bff617 	ldw	r2,-40(fp)
  8131cc:	1887c83a 	sub	r3,r3,r2
  8131d0:	e0ffff15 	stw	r3,-4(fp)
  8131d4:	00000906 	br	8131fc <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  8131d8:	e0bffe17 	ldw	r2,-8(fp)
  8131dc:	1090000c 	andi	r2,r2,16384
  8131e0:	1005003a 	cmpeq	r2,r2,zero
  8131e4:	1000031e 	bne	r2,zero,8131f4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  8131e8:	00bffd44 	movi	r2,-11
  8131ec:	e0bfff15 	stw	r2,-4(fp)
  8131f0:	00000206 	br	8131fc <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  8131f4:	00bffec4 	movi	r2,-5
  8131f8:	e0bfff15 	stw	r2,-4(fp)
  8131fc:	e0bfff17 	ldw	r2,-4(fp)
}
  813200:	e037883a 	mov	sp,fp
  813204:	dfc00117 	ldw	ra,4(sp)
  813208:	df000017 	ldw	fp,0(sp)
  81320c:	dec00204 	addi	sp,sp,8
  813210:	f800283a 	ret

00813214 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  813214:	defff904 	addi	sp,sp,-28
  813218:	dfc00615 	stw	ra,24(sp)
  81321c:	df000515 	stw	fp,20(sp)
  813220:	df000504 	addi	fp,sp,20
  813224:	e13ffe15 	stw	r4,-8(fp)
  813228:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  81322c:	e0bffe17 	ldw	r2,-8(fp)
  813230:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  813234:	e0bffe17 	ldw	r2,-8(fp)
  813238:	10800104 	addi	r2,r2,4
  81323c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813240:	0005303a 	rdctl	r2,status
  813244:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813248:	e0fffc17 	ldw	r3,-16(fp)
  81324c:	00bfff84 	movi	r2,-2
  813250:	1884703a 	and	r2,r3,r2
  813254:	1001703a 	wrctl	status,r2
  
  return context;
  813258:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  81325c:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
  813260:	08120d00 	call	8120d0 <alt_tick>
  813264:	e0bffd17 	ldw	r2,-12(fp)
  813268:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81326c:	e0bffb17 	ldw	r2,-20(fp)
  813270:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  813274:	e037883a 	mov	sp,fp
  813278:	dfc00117 	ldw	ra,4(sp)
  81327c:	df000017 	ldw	fp,0(sp)
  813280:	dec00204 	addi	sp,sp,8
  813284:	f800283a 	ret

00813288 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  813288:	defff904 	addi	sp,sp,-28
  81328c:	dfc00615 	stw	ra,24(sp)
  813290:	df000515 	stw	fp,20(sp)
  813294:	df000504 	addi	fp,sp,20
  813298:	e13ffc15 	stw	r4,-16(fp)
  81329c:	e17ffd15 	stw	r5,-12(fp)
  8132a0:	e1bffe15 	stw	r6,-8(fp)
  8132a4:	e1ffff15 	stw	r7,-4(fp)
  8132a8:	e0bfff17 	ldw	r2,-4(fp)
  8132ac:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8132b0:	008020b4 	movhi	r2,130
  8132b4:	10bf7504 	addi	r2,r2,-556
  8132b8:	10800017 	ldw	r2,0(r2)
  8132bc:	1004c03a 	cmpne	r2,r2,zero
  8132c0:	1000041e 	bne	r2,zero,8132d4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  8132c4:	00c020b4 	movhi	r3,130
  8132c8:	18ff7504 	addi	r3,r3,-556
  8132cc:	e0bffb17 	ldw	r2,-20(fp)
  8132d0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8132d4:	e0bffc17 	ldw	r2,-16(fp)
  8132d8:	10800104 	addi	r2,r2,4
  8132dc:	1007883a 	mov	r3,r2
  8132e0:	008001c4 	movi	r2,7
  8132e4:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  8132e8:	e13ffe17 	ldw	r4,-8(fp)
  8132ec:	e17ffc17 	ldw	r5,-16(fp)
  8132f0:	01802074 	movhi	r6,129
  8132f4:	318c8504 	addi	r6,r6,12820
  8132f8:	08117d40 	call	8117d4 <alt_irq_register>
#endif  
}
  8132fc:	e037883a 	mov	sp,fp
  813300:	dfc00117 	ldw	ra,4(sp)
  813304:	df000017 	ldw	fp,0(sp)
  813308:	dec00204 	addi	sp,sp,8
  81330c:	f800283a 	ret

00813310 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  813310:	defffd04 	addi	sp,sp,-12
  813314:	df000215 	stw	fp,8(sp)
  813318:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
  81331c:	008020b4 	movhi	r2,130
  813320:	10bf7704 	addi	r2,r2,-548
  813324:	10800017 	ldw	r2,0(r2)
  813328:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
  81332c:	008020b4 	movhi	r2,130
  813330:	10bf7804 	addi	r2,r2,-544
  813334:	10800017 	ldw	r2,0(r2)
  813338:	1004c03a 	cmpne	r2,r2,zero
  81333c:	1000031e 	bne	r2,zero,81334c <alt_timestamp_start+0x3c>
  {
    return -1;
  813340:	00bfffc4 	movi	r2,-1
  813344:	e0bfff15 	stw	r2,-4(fp)
  813348:	00001506 	br	8133a0 <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
  81334c:	e0bffe17 	ldw	r2,-8(fp)
  813350:	10800104 	addi	r2,r2,4
  813354:	1007883a 	mov	r3,r2
  813358:	00800204 	movi	r2,8
  81335c:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
  813360:	e0bffe17 	ldw	r2,-8(fp)
  813364:	10800204 	addi	r2,r2,8
  813368:	1007883a 	mov	r3,r2
  81336c:	00bfffd4 	movui	r2,65535
  813370:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
  813374:	e0bffe17 	ldw	r2,-8(fp)
  813378:	10800304 	addi	r2,r2,12
  81337c:	1007883a 	mov	r3,r2
  813380:	00bfffd4 	movui	r2,65535
  813384:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
  813388:	e0bffe17 	ldw	r2,-8(fp)
  81338c:	10800104 	addi	r2,r2,4
  813390:	1007883a 	mov	r3,r2
  813394:	00800104 	movi	r2,4
  813398:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
  81339c:	e03fff15 	stw	zero,-4(fp)
  8133a0:	e0bfff17 	ldw	r2,-4(fp)
}
  8133a4:	e037883a 	mov	sp,fp
  8133a8:	df000017 	ldw	fp,0(sp)
  8133ac:	dec00104 	addi	sp,sp,4
  8133b0:	f800283a 	ret

008133b4 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
  8133b4:	defffb04 	addi	sp,sp,-20
  8133b8:	df000415 	stw	fp,16(sp)
  8133bc:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
  8133c0:	008020b4 	movhi	r2,130
  8133c4:	10bf7704 	addi	r2,r2,-548
  8133c8:	10800017 	ldw	r2,0(r2)
  8133cc:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
  8133d0:	008020b4 	movhi	r2,130
  8133d4:	10bf7804 	addi	r2,r2,-544
  8133d8:	10800017 	ldw	r2,0(r2)
  8133dc:	1004c03a 	cmpne	r2,r2,zero
  8133e0:	1000031e 	bne	r2,zero,8133f0 <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
  8133e4:	00bfffc4 	movi	r2,-1
  8133e8:	e0bfff15 	stw	r2,-4(fp)
  8133ec:	00001306 	br	81343c <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
  8133f0:	e0bffe17 	ldw	r2,-8(fp)
  8133f4:	10800404 	addi	r2,r2,16
  8133f8:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
  8133fc:	e0bffe17 	ldw	r2,-8(fp)
  813400:	10800404 	addi	r2,r2,16
  813404:	10800037 	ldwio	r2,0(r2)
  813408:	10bfffcc 	andi	r2,r2,65535
  81340c:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
  813410:	e0bffe17 	ldw	r2,-8(fp)
  813414:	10800504 	addi	r2,r2,20
  813418:	10800037 	ldwio	r2,0(r2)
  81341c:	10bfffcc 	andi	r2,r2,65535
  813420:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
  813424:	e0bffc17 	ldw	r2,-16(fp)
  813428:	1006943a 	slli	r3,r2,16
  81342c:	e0bffd17 	ldw	r2,-12(fp)
  813430:	1884b03a 	or	r2,r3,r2
  813434:	0084303a 	nor	r2,zero,r2
  813438:	e0bfff15 	stw	r2,-4(fp)
  81343c:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
  813440:	e037883a 	mov	sp,fp
  813444:	df000017 	ldw	fp,0(sp)
  813448:	dec00104 	addi	sp,sp,4
  81344c:	f800283a 	ret

00813450 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
  813450:	deffff04 	addi	sp,sp,-4
  813454:	df000015 	stw	fp,0(sp)
  813458:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
  81345c:	008020b4 	movhi	r2,130
  813460:	10bf7804 	addi	r2,r2,-544
  813464:	10800017 	ldw	r2,0(r2)
}
  813468:	e037883a 	mov	sp,fp
  81346c:	df000017 	ldw	fp,0(sp)
  813470:	dec00104 	addi	sp,sp,4
  813474:	f800283a 	ret

00813478 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
  813478:	defffc04 	addi	sp,sp,-16
  81347c:	dfc00315 	stw	ra,12(sp)
  813480:	df000215 	stw	fp,8(sp)
  813484:	df000204 	addi	fp,sp,8
  813488:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  81348c:	e13fff17 	ldw	r4,-4(fp)
  813490:	014020b4 	movhi	r5,130
  813494:	29784304 	addi	r5,r5,-7924
  813498:	081ac2c0 	call	81ac2c <alt_find_dev>
  81349c:	e0bffe15 	stw	r2,-8(fp)
  return dev;
  8134a0:	e0bffe17 	ldw	r2,-8(fp)
}
  8134a4:	e037883a 	mov	sp,fp
  8134a8:	dfc00117 	ldw	ra,4(sp)
  8134ac:	df000017 	ldw	fp,0(sp)
  8134b0:	dec00204 	addi	sp,sp,8
  8134b4:	f800283a 	ret

008134b8 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
  8134b8:	defffd04 	addi	sp,sp,-12
  8134bc:	df000215 	stw	fp,8(sp)
  8134c0:	df000204 	addi	fp,sp,8
  8134c4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8134c8:	e0bfff17 	ldw	r2,-4(fp)
  8134cc:	10800a17 	ldw	r2,40(r2)
  8134d0:	10800037 	ldwio	r2,0(r2)
  8134d4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
  8134d8:	e0bffe17 	ldw	r2,-8(fp)
  8134dc:	10800054 	ori	r2,r2,1
  8134e0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8134e4:	e0bfff17 	ldw	r2,-4(fp)
  8134e8:	10800a17 	ldw	r2,40(r2)
  8134ec:	e0fffe17 	ldw	r3,-8(fp)
  8134f0:	10c00035 	stwio	r3,0(r2)
}
  8134f4:	e037883a 	mov	sp,fp
  8134f8:	df000017 	ldw	fp,0(sp)
  8134fc:	dec00104 	addi	sp,sp,4
  813500:	f800283a 	ret

00813504 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
  813504:	defffd04 	addi	sp,sp,-12
  813508:	df000215 	stw	fp,8(sp)
  81350c:	df000204 	addi	fp,sp,8
  813510:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  813514:	e0bfff17 	ldw	r2,-4(fp)
  813518:	10800a17 	ldw	r2,40(r2)
  81351c:	10800037 	ldwio	r2,0(r2)
  813520:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
  813524:	e0fffe17 	ldw	r3,-8(fp)
  813528:	00bfff84 	movi	r2,-2
  81352c:	1884703a 	and	r2,r3,r2
  813530:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  813534:	e0bfff17 	ldw	r2,-4(fp)
  813538:	10800a17 	ldw	r2,40(r2)
  81353c:	e0fffe17 	ldw	r3,-8(fp)
  813540:	10c00035 	stwio	r3,0(r2)
}
  813544:	e037883a 	mov	sp,fp
  813548:	df000017 	ldw	fp,0(sp)
  81354c:	dec00104 	addi	sp,sp,4
  813550:	f800283a 	ret

00813554 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
  813554:	defffd04 	addi	sp,sp,-12
  813558:	df000215 	stw	fp,8(sp)
  81355c:	df000204 	addi	fp,sp,8
  813560:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  813564:	e0bfff17 	ldw	r2,-4(fp)
  813568:	10800a17 	ldw	r2,40(r2)
  81356c:	10800037 	ldwio	r2,0(r2)
  813570:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
  813574:	e0bffe17 	ldw	r2,-8(fp)
  813578:	10800094 	ori	r2,r2,2
  81357c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  813580:	e0bfff17 	ldw	r2,-4(fp)
  813584:	10800a17 	ldw	r2,40(r2)
  813588:	e0fffe17 	ldw	r3,-8(fp)
  81358c:	10c00035 	stwio	r3,0(r2)
}
  813590:	e037883a 	mov	sp,fp
  813594:	df000017 	ldw	fp,0(sp)
  813598:	dec00104 	addi	sp,sp,4
  81359c:	f800283a 	ret

008135a0 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
  8135a0:	defffd04 	addi	sp,sp,-12
  8135a4:	df000215 	stw	fp,8(sp)
  8135a8:	df000204 	addi	fp,sp,8
  8135ac:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8135b0:	e0bfff17 	ldw	r2,-4(fp)
  8135b4:	10800a17 	ldw	r2,40(r2)
  8135b8:	10800037 	ldwio	r2,0(r2)
  8135bc:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
  8135c0:	e0fffe17 	ldw	r3,-8(fp)
  8135c4:	00bfff44 	movi	r2,-3
  8135c8:	1884703a 	and	r2,r3,r2
  8135cc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8135d0:	e0bfff17 	ldw	r2,-4(fp)
  8135d4:	10800a17 	ldw	r2,40(r2)
  8135d8:	e0fffe17 	ldw	r3,-8(fp)
  8135dc:	10c00035 	stwio	r3,0(r2)
}
  8135e0:	e037883a 	mov	sp,fp
  8135e4:	df000017 	ldw	fp,0(sp)
  8135e8:	dec00104 	addi	sp,sp,4
  8135ec:	f800283a 	ret

008135f0 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
  8135f0:	defffd04 	addi	sp,sp,-12
  8135f4:	df000215 	stw	fp,8(sp)
  8135f8:	df000204 	addi	fp,sp,8
  8135fc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  813600:	e0bfff17 	ldw	r2,-4(fp)
  813604:	10800a17 	ldw	r2,40(r2)
  813608:	10800037 	ldwio	r2,0(r2)
  81360c:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
  813610:	e0bffe17 	ldw	r2,-8(fp)
  813614:	1080400c 	andi	r2,r2,256
  813618:	1004c03a 	cmpne	r2,r2,zero
}
  81361c:	e037883a 	mov	sp,fp
  813620:	df000017 	ldw	fp,0(sp)
  813624:	dec00104 	addi	sp,sp,4
  813628:	f800283a 	ret

0081362c <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
  81362c:	defffd04 	addi	sp,sp,-12
  813630:	df000215 	stw	fp,8(sp)
  813634:	df000204 	addi	fp,sp,8
  813638:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81363c:	e0bfff17 	ldw	r2,-4(fp)
  813640:	10800a17 	ldw	r2,40(r2)
  813644:	10800037 	ldwio	r2,0(r2)
  813648:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
  81364c:	e0bffe17 	ldw	r2,-8(fp)
  813650:	1080800c 	andi	r2,r2,512
  813654:	1004c03a 	cmpne	r2,r2,zero
}
  813658:	e037883a 	mov	sp,fp
  81365c:	df000017 	ldw	fp,0(sp)
  813660:	dec00104 	addi	sp,sp,4
  813664:	f800283a 	ret

00813668 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
  813668:	defffd04 	addi	sp,sp,-12
  81366c:	df000215 	stw	fp,8(sp)
  813670:	df000204 	addi	fp,sp,8
  813674:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  813678:	e0bfff17 	ldw	r2,-4(fp)
  81367c:	10800a17 	ldw	r2,40(r2)
  813680:	10800037 	ldwio	r2,0(r2)
  813684:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
  813688:	e0bffe17 	ldw	r2,-8(fp)
  81368c:	10800114 	ori	r2,r2,4
  813690:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  813694:	e0bffe17 	ldw	r2,-8(fp)
  813698:	10800214 	ori	r2,r2,8
  81369c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8136a0:	e0bfff17 	ldw	r2,-4(fp)
  8136a4:	10800a17 	ldw	r2,40(r2)
  8136a8:	e0fffe17 	ldw	r3,-8(fp)
  8136ac:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
  8136b0:	e0fffe17 	ldw	r3,-8(fp)
  8136b4:	00bffec4 	movi	r2,-5
  8136b8:	1884703a 	and	r2,r3,r2
  8136bc:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
  8136c0:	e0fffe17 	ldw	r3,-8(fp)
  8136c4:	00bffdc4 	movi	r2,-9
  8136c8:	1884703a 	and	r2,r3,r2
  8136cc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8136d0:	e0bfff17 	ldw	r2,-4(fp)
  8136d4:	10800a17 	ldw	r2,40(r2)
  8136d8:	e0fffe17 	ldw	r3,-8(fp)
  8136dc:	10c00035 	stwio	r3,0(r2)
}
  8136e0:	e037883a 	mov	sp,fp
  8136e4:	df000017 	ldw	fp,0(sp)
  8136e8:	dec00104 	addi	sp,sp,4
  8136ec:	f800283a 	ret

008136f0 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
  8136f0:	defffb04 	addi	sp,sp,-20
  8136f4:	df000415 	stw	fp,16(sp)
  8136f8:	df000404 	addi	fp,sp,16
  8136fc:	e13ffd15 	stw	r4,-12(fp)
  813700:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  813704:	e0bffd17 	ldw	r2,-12(fp)
  813708:	10800a17 	ldw	r2,40(r2)
  81370c:	10800104 	addi	r2,r2,4
  813710:	10800037 	ldwio	r2,0(r2)
  813714:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  813718:	e0bffe17 	ldw	r2,-8(fp)
  81371c:	1004c03a 	cmpne	r2,r2,zero
  813720:	1000051e 	bne	r2,zero,813738 <alt_up_audio_read_fifo_avail+0x48>
  813724:	e0bffc17 	ldw	r2,-16(fp)
  813728:	10bfc00c 	andi	r2,r2,65280
  81372c:	1004d23a 	srli	r2,r2,8
  813730:	e0bfff15 	stw	r2,-4(fp)
  813734:	00000306 	br	813744 <alt_up_audio_read_fifo_avail+0x54>
  813738:	e0bffc17 	ldw	r2,-16(fp)
  81373c:	10803fcc 	andi	r2,r2,255
  813740:	e0bfff15 	stw	r2,-4(fp)
  813744:	e0bfff17 	ldw	r2,-4(fp)
  813748:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
  81374c:	e0bffc17 	ldw	r2,-16(fp)
}
  813750:	e037883a 	mov	sp,fp
  813754:	df000017 	ldw	fp,0(sp)
  813758:	dec00104 	addi	sp,sp,4
  81375c:	f800283a 	ret

00813760 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  813760:	defff904 	addi	sp,sp,-28
  813764:	dfc00615 	stw	ra,24(sp)
  813768:	df000515 	stw	fp,20(sp)
  81376c:	df000504 	addi	fp,sp,20
  813770:	e13ffc15 	stw	r4,-16(fp)
  813774:	e17ffd15 	stw	r5,-12(fp)
  813778:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
  81377c:	e13ffc17 	ldw	r4,-16(fp)
  813780:	01400044 	movi	r5,1
  813784:	08136f00 	call	8136f0 <alt_up_audio_read_fifo_avail>
  813788:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  81378c:	e0bffb17 	ldw	r2,-20(fp)
  813790:	10801868 	cmpgeui	r2,r2,97
  813794:	1000021e 	bne	r2,zero,8137a0 <alt_up_audio_record_r+0x40>
		return 0;
  813798:	e03fff15 	stw	zero,-4(fp)
  81379c:	00000606 	br	8137b8 <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  8137a0:	e13ffc17 	ldw	r4,-16(fp)
  8137a4:	e17ffd17 	ldw	r5,-12(fp)
  8137a8:	e1bffe17 	ldw	r6,-8(fp)
  8137ac:	01c00044 	movi	r7,1
  8137b0:	08139940 	call	813994 <alt_up_audio_read_fifo>
  8137b4:	e0bfff15 	stw	r2,-4(fp)
  8137b8:	e0bfff17 	ldw	r2,-4(fp)
}
  8137bc:	e037883a 	mov	sp,fp
  8137c0:	dfc00117 	ldw	ra,4(sp)
  8137c4:	df000017 	ldw	fp,0(sp)
  8137c8:	dec00204 	addi	sp,sp,8
  8137cc:	f800283a 	ret

008137d0 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  8137d0:	defff904 	addi	sp,sp,-28
  8137d4:	dfc00615 	stw	ra,24(sp)
  8137d8:	df000515 	stw	fp,20(sp)
  8137dc:	df000504 	addi	fp,sp,20
  8137e0:	e13ffc15 	stw	r4,-16(fp)
  8137e4:	e17ffd15 	stw	r5,-12(fp)
  8137e8:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
  8137ec:	e13ffc17 	ldw	r4,-16(fp)
  8137f0:	000b883a 	mov	r5,zero
  8137f4:	08136f00 	call	8136f0 <alt_up_audio_read_fifo_avail>
  8137f8:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  8137fc:	e0bffb17 	ldw	r2,-20(fp)
  813800:	10801868 	cmpgeui	r2,r2,97
  813804:	1000021e 	bne	r2,zero,813810 <alt_up_audio_record_l+0x40>
		return 0;
  813808:	e03fff15 	stw	zero,-4(fp)
  81380c:	00000606 	br	813828 <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  813810:	e13ffc17 	ldw	r4,-16(fp)
  813814:	e17ffd17 	ldw	r5,-12(fp)
  813818:	e1bffe17 	ldw	r6,-8(fp)
  81381c:	000f883a 	mov	r7,zero
  813820:	08139940 	call	813994 <alt_up_audio_read_fifo>
  813824:	e0bfff15 	stw	r2,-4(fp)
  813828:	e0bfff17 	ldw	r2,-4(fp)
}
  81382c:	e037883a 	mov	sp,fp
  813830:	dfc00117 	ldw	ra,4(sp)
  813834:	df000017 	ldw	fp,0(sp)
  813838:	dec00204 	addi	sp,sp,8
  81383c:	f800283a 	ret

00813840 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
  813840:	defffb04 	addi	sp,sp,-20
  813844:	df000415 	stw	fp,16(sp)
  813848:	df000404 	addi	fp,sp,16
  81384c:	e13ffd15 	stw	r4,-12(fp)
  813850:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  813854:	e0bffd17 	ldw	r2,-12(fp)
  813858:	10800a17 	ldw	r2,40(r2)
  81385c:	10800104 	addi	r2,r2,4
  813860:	10800037 	ldwio	r2,0(r2)
  813864:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  813868:	e0bffe17 	ldw	r2,-8(fp)
  81386c:	1004c03a 	cmpne	r2,r2,zero
  813870:	1000051e 	bne	r2,zero,813888 <alt_up_audio_write_fifo_space+0x48>
  813874:	e0bffc17 	ldw	r2,-16(fp)
  813878:	10bfc02c 	andhi	r2,r2,65280
  81387c:	1004d63a 	srli	r2,r2,24
  813880:	e0bfff15 	stw	r2,-4(fp)
  813884:	00000406 	br	813898 <alt_up_audio_write_fifo_space+0x58>
  813888:	e0bffc17 	ldw	r2,-16(fp)
  81388c:	10803fec 	andhi	r2,r2,255
  813890:	1004d43a 	srli	r2,r2,16
  813894:	e0bfff15 	stw	r2,-4(fp)
  813898:	e0bfff17 	ldw	r2,-4(fp)
  81389c:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
  8138a0:	e0bffc17 	ldw	r2,-16(fp)
}
  8138a4:	e037883a 	mov	sp,fp
  8138a8:	df000017 	ldw	fp,0(sp)
  8138ac:	dec00104 	addi	sp,sp,4
  8138b0:	f800283a 	ret

008138b4 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  8138b4:	defff904 	addi	sp,sp,-28
  8138b8:	dfc00615 	stw	ra,24(sp)
  8138bc:	df000515 	stw	fp,20(sp)
  8138c0:	df000504 	addi	fp,sp,20
  8138c4:	e13ffc15 	stw	r4,-16(fp)
  8138c8:	e17ffd15 	stw	r5,-12(fp)
  8138cc:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
  8138d0:	e13ffc17 	ldw	r4,-16(fp)
  8138d4:	01400044 	movi	r5,1
  8138d8:	08138400 	call	813840 <alt_up_audio_write_fifo_space>
  8138dc:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  8138e0:	e0bffb17 	ldw	r2,-20(fp)
  8138e4:	10801868 	cmpgeui	r2,r2,97
  8138e8:	1000021e 	bne	r2,zero,8138f4 <alt_up_audio_play_r+0x40>
		return 0;
  8138ec:	e03fff15 	stw	zero,-4(fp)
  8138f0:	00000606 	br	81390c <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  8138f4:	e13ffc17 	ldw	r4,-16(fp)
  8138f8:	e17ffd17 	ldw	r5,-12(fp)
  8138fc:	e1bffe17 	ldw	r6,-8(fp)
  813900:	01c00044 	movi	r7,1
  813904:	0813a980 	call	813a98 <alt_up_audio_write_fifo>
  813908:	e0bfff15 	stw	r2,-4(fp)
  81390c:	e0bfff17 	ldw	r2,-4(fp)
}
  813910:	e037883a 	mov	sp,fp
  813914:	dfc00117 	ldw	ra,4(sp)
  813918:	df000017 	ldw	fp,0(sp)
  81391c:	dec00204 	addi	sp,sp,8
  813920:	f800283a 	ret

00813924 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  813924:	defff904 	addi	sp,sp,-28
  813928:	dfc00615 	stw	ra,24(sp)
  81392c:	df000515 	stw	fp,20(sp)
  813930:	df000504 	addi	fp,sp,20
  813934:	e13ffc15 	stw	r4,-16(fp)
  813938:	e17ffd15 	stw	r5,-12(fp)
  81393c:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
  813940:	e13ffc17 	ldw	r4,-16(fp)
  813944:	000b883a 	mov	r5,zero
  813948:	08138400 	call	813840 <alt_up_audio_write_fifo_space>
  81394c:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  813950:	e0bffb17 	ldw	r2,-20(fp)
  813954:	10801868 	cmpgeui	r2,r2,97
  813958:	1000021e 	bne	r2,zero,813964 <alt_up_audio_play_l+0x40>
		return 0;
  81395c:	e03fff15 	stw	zero,-4(fp)
  813960:	00000606 	br	81397c <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  813964:	e13ffc17 	ldw	r4,-16(fp)
  813968:	e17ffd17 	ldw	r5,-12(fp)
  81396c:	e1bffe17 	ldw	r6,-8(fp)
  813970:	000f883a 	mov	r7,zero
  813974:	0813a980 	call	813a98 <alt_up_audio_write_fifo>
  813978:	e0bfff15 	stw	r2,-4(fp)
  81397c:	e0bfff17 	ldw	r2,-4(fp)
}
  813980:	e037883a 	mov	sp,fp
  813984:	dfc00117 	ldw	ra,4(sp)
  813988:	df000017 	ldw	fp,0(sp)
  81398c:	dec00204 	addi	sp,sp,8
  813990:	f800283a 	ret

00813994 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  813994:	defff604 	addi	sp,sp,-40
  813998:	df000915 	stw	fp,36(sp)
  81399c:	df000904 	addi	fp,sp,36
  8139a0:	e13ff915 	stw	r4,-28(fp)
  8139a4:	e17ffa15 	stw	r5,-24(fp)
  8139a8:	e1bffb15 	stw	r6,-20(fp)
  8139ac:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
  8139b0:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
  8139b4:	00003006 	br	813a78 <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  8139b8:	e0bff917 	ldw	r2,-28(fp)
  8139bc:	10800a17 	ldw	r2,40(r2)
  8139c0:	10800104 	addi	r2,r2,4
  8139c4:	10800037 	ldwio	r2,0(r2)
  8139c8:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  8139cc:	e0bffc17 	ldw	r2,-16(fp)
  8139d0:	1004c03a 	cmpne	r2,r2,zero
  8139d4:	1000051e 	bne	r2,zero,8139ec <alt_up_audio_read_fifo+0x58>
  8139d8:	e0bff817 	ldw	r2,-32(fp)
  8139dc:	10bfc00c 	andi	r2,r2,65280
  8139e0:	1004d23a 	srli	r2,r2,8
  8139e4:	e0bfff15 	stw	r2,-4(fp)
  8139e8:	00000306 	br	8139f8 <alt_up_audio_read_fifo+0x64>
  8139ec:	e0bff817 	ldw	r2,-32(fp)
  8139f0:	10803fcc 	andi	r2,r2,255
  8139f4:	e0bfff15 	stw	r2,-4(fp)
  8139f8:	e0bfff17 	ldw	r2,-4(fp)
  8139fc:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  813a00:	e0bff817 	ldw	r2,-32(fp)
  813a04:	1005003a 	cmpeq	r2,r2,zero
  813a08:	10001e1e 	bne	r2,zero,813a84 <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  813a0c:	e0bff717 	ldw	r2,-36(fp)
  813a10:	1085883a 	add	r2,r2,r2
  813a14:	1085883a 	add	r2,r2,r2
  813a18:	1007883a 	mov	r3,r2
  813a1c:	e0bffa17 	ldw	r2,-24(fp)
  813a20:	1887883a 	add	r3,r3,r2
  813a24:	e0fffe15 	stw	r3,-8(fp)
  813a28:	e0bffc17 	ldw	r2,-16(fp)
  813a2c:	1004c03a 	cmpne	r2,r2,zero
  813a30:	1000061e 	bne	r2,zero,813a4c <alt_up_audio_read_fifo+0xb8>
  813a34:	e0bff917 	ldw	r2,-28(fp)
  813a38:	10800a17 	ldw	r2,40(r2)
  813a3c:	10800204 	addi	r2,r2,8
  813a40:	10800037 	ldwio	r2,0(r2)
  813a44:	e0bffd15 	stw	r2,-12(fp)
  813a48:	00000506 	br	813a60 <alt_up_audio_read_fifo+0xcc>
  813a4c:	e0bff917 	ldw	r2,-28(fp)
  813a50:	10800a17 	ldw	r2,40(r2)
  813a54:	10800304 	addi	r2,r2,12
  813a58:	10800037 	ldwio	r2,0(r2)
  813a5c:	e0bffd15 	stw	r2,-12(fp)
  813a60:	e0fffd17 	ldw	r3,-12(fp)
  813a64:	e0bffe17 	ldw	r2,-8(fp)
  813a68:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  813a6c:	e0bff717 	ldw	r2,-36(fp)
  813a70:	10800044 	addi	r2,r2,1
  813a74:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  813a78:	e0fff717 	ldw	r3,-36(fp)
  813a7c:	e0bffb17 	ldw	r2,-20(fp)
  813a80:	18bfcd16 	blt	r3,r2,8139b8 <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
  813a84:	e0bff717 	ldw	r2,-36(fp)
}
  813a88:	e037883a 	mov	sp,fp
  813a8c:	df000017 	ldw	fp,0(sp)
  813a90:	dec00104 	addi	sp,sp,4
  813a94:	f800283a 	ret

00813a98 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  813a98:	defff804 	addi	sp,sp,-32
  813a9c:	df000715 	stw	fp,28(sp)
  813aa0:	df000704 	addi	fp,sp,28
  813aa4:	e13ffb15 	stw	r4,-20(fp)
  813aa8:	e17ffc15 	stw	r5,-16(fp)
  813aac:	e1bffd15 	stw	r6,-12(fp)
  813ab0:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
  813ab4:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
  813ab8:	00003a06 	br	813ba4 <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  813abc:	e0bffb17 	ldw	r2,-20(fp)
  813ac0:	10800a17 	ldw	r2,40(r2)
  813ac4:	10800104 	addi	r2,r2,4
  813ac8:	10800037 	ldwio	r2,0(r2)
  813acc:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  813ad0:	e0bffe17 	ldw	r2,-8(fp)
  813ad4:	1004c03a 	cmpne	r2,r2,zero
  813ad8:	1000051e 	bne	r2,zero,813af0 <alt_up_audio_write_fifo+0x58>
  813adc:	e0bffa17 	ldw	r2,-24(fp)
  813ae0:	10bfc02c 	andhi	r2,r2,65280
  813ae4:	1004d63a 	srli	r2,r2,24
  813ae8:	e0bfff15 	stw	r2,-4(fp)
  813aec:	00000406 	br	813b00 <alt_up_audio_write_fifo+0x68>
  813af0:	e0bffa17 	ldw	r2,-24(fp)
  813af4:	10803fec 	andhi	r2,r2,255
  813af8:	1004d43a 	srli	r2,r2,16
  813afc:	e0bfff15 	stw	r2,-4(fp)
  813b00:	e0bfff17 	ldw	r2,-4(fp)
  813b04:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  813b08:	e0bffa17 	ldw	r2,-24(fp)
  813b0c:	1005003a 	cmpeq	r2,r2,zero
  813b10:	1000271e 	bne	r2,zero,813bb0 <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
  813b14:	e0bffe17 	ldw	r2,-8(fp)
  813b18:	1004c03a 	cmpne	r2,r2,zero
  813b1c:	1000111e 	bne	r2,zero,813b64 <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  813b20:	e0bffb17 	ldw	r2,-20(fp)
  813b24:	10800a17 	ldw	r2,40(r2)
  813b28:	11000204 	addi	r4,r2,8
  813b2c:	e0bff917 	ldw	r2,-28(fp)
  813b30:	1085883a 	add	r2,r2,r2
  813b34:	1085883a 	add	r2,r2,r2
  813b38:	1007883a 	mov	r3,r2
  813b3c:	e0bffc17 	ldw	r2,-16(fp)
  813b40:	1885883a 	add	r2,r3,r2
  813b44:	10800017 	ldw	r2,0(r2)
  813b48:	1007883a 	mov	r3,r2
  813b4c:	e0bff917 	ldw	r2,-28(fp)
  813b50:	10800044 	addi	r2,r2,1
  813b54:	e0bff915 	stw	r2,-28(fp)
  813b58:	2005883a 	mov	r2,r4
  813b5c:	10c00035 	stwio	r3,0(r2)
  813b60:	00001006 	br	813ba4 <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  813b64:	e0bffb17 	ldw	r2,-20(fp)
  813b68:	10800a17 	ldw	r2,40(r2)
  813b6c:	11000304 	addi	r4,r2,12
  813b70:	e0bff917 	ldw	r2,-28(fp)
  813b74:	1085883a 	add	r2,r2,r2
  813b78:	1085883a 	add	r2,r2,r2
  813b7c:	1007883a 	mov	r3,r2
  813b80:	e0bffc17 	ldw	r2,-16(fp)
  813b84:	1885883a 	add	r2,r3,r2
  813b88:	10800017 	ldw	r2,0(r2)
  813b8c:	1007883a 	mov	r3,r2
  813b90:	e0bff917 	ldw	r2,-28(fp)
  813b94:	10800044 	addi	r2,r2,1
  813b98:	e0bff915 	stw	r2,-28(fp)
  813b9c:	2005883a 	mov	r2,r4
  813ba0:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  813ba4:	e0fff917 	ldw	r3,-28(fp)
  813ba8:	e0bffd17 	ldw	r2,-12(fp)
  813bac:	18bfc316 	blt	r3,r2,813abc <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
  813bb0:	e0bff917 	ldw	r2,-28(fp)
}
  813bb4:	e037883a 	mov	sp,fp
  813bb8:	df000017 	ldw	fp,0(sp)
  813bbc:	dec00104 	addi	sp,sp,4
  813bc0:	f800283a 	ret

00813bc4 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
  813bc4:	defffc04 	addi	sp,sp,-16
  813bc8:	df000315 	stw	fp,12(sp)
  813bcc:	df000304 	addi	fp,sp,12
  813bd0:	e13ffd15 	stw	r4,-12(fp)
  813bd4:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  813bd8:	e0bffe17 	ldw	r2,-8(fp)
  813bdc:	1004c03a 	cmpne	r2,r2,zero
  813be0:	1000061e 	bne	r2,zero,813bfc <alt_up_audio_read_fifo_head+0x38>
  813be4:	e0bffd17 	ldw	r2,-12(fp)
  813be8:	10800a17 	ldw	r2,40(r2)
  813bec:	10800204 	addi	r2,r2,8
  813bf0:	10800037 	ldwio	r2,0(r2)
  813bf4:	e0bfff15 	stw	r2,-4(fp)
  813bf8:	00000506 	br	813c10 <alt_up_audio_read_fifo_head+0x4c>
  813bfc:	e0bffd17 	ldw	r2,-12(fp)
  813c00:	10800a17 	ldw	r2,40(r2)
  813c04:	10800304 	addi	r2,r2,12
  813c08:	10800037 	ldwio	r2,0(r2)
  813c0c:	e0bfff15 	stw	r2,-4(fp)
  813c10:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
  813c14:	e037883a 	mov	sp,fp
  813c18:	df000017 	ldw	fp,0(sp)
  813c1c:	dec00104 	addi	sp,sp,4
  813c20:	f800283a 	ret

00813c24 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
  813c24:	defffc04 	addi	sp,sp,-16
  813c28:	df000315 	stw	fp,12(sp)
  813c2c:	df000304 	addi	fp,sp,12
  813c30:	e13ffd15 	stw	r4,-12(fp)
  813c34:	e17ffe15 	stw	r5,-8(fp)
  813c38:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
  813c3c:	e0bfff17 	ldw	r2,-4(fp)
  813c40:	1004c03a 	cmpne	r2,r2,zero
  813c44:	1000061e 	bne	r2,zero,813c60 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  813c48:	e0bffd17 	ldw	r2,-12(fp)
  813c4c:	10800a17 	ldw	r2,40(r2)
  813c50:	10800204 	addi	r2,r2,8
  813c54:	e0fffe17 	ldw	r3,-8(fp)
  813c58:	10c00035 	stwio	r3,0(r2)
  813c5c:	00000506 	br	813c74 <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  813c60:	e0bffd17 	ldw	r2,-12(fp)
  813c64:	10800a17 	ldw	r2,40(r2)
  813c68:	10800304 	addi	r2,r2,12
  813c6c:	e0fffe17 	ldw	r3,-8(fp)
  813c70:	10c00035 	stwio	r3,0(r2)
}
  813c74:	e037883a 	mov	sp,fp
  813c78:	df000017 	ldw	fp,0(sp)
  813c7c:	dec00104 	addi	sp,sp,4
  813c80:	f800283a 	ret

00813c84 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
  813c84:	defffc04 	addi	sp,sp,-16
  813c88:	dfc00315 	stw	ra,12(sp)
  813c8c:	df000215 	stw	fp,8(sp)
  813c90:	df000204 	addi	fp,sp,8
  813c94:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
  813c98:	e13fff17 	ldw	r4,-4(fp)
  813c9c:	014020b4 	movhi	r5,130
  813ca0:	29784304 	addi	r5,r5,-7924
  813ca4:	081ac2c0 	call	81ac2c <alt_find_dev>
  813ca8:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
  813cac:	e0bffe17 	ldw	r2,-8(fp)
  813cb0:	10800a17 	ldw	r2,40(r2)
  813cb4:	10800104 	addi	r2,r2,4
  813cb8:	10800037 	ldwio	r2,0(r2)
  813cbc:	10803fec 	andhi	r2,r2,255
  813cc0:	1005d43a 	srai	r2,r2,16
  813cc4:	1007883a 	mov	r3,r2
  813cc8:	e0bffe17 	ldw	r2,-8(fp)
  813ccc:	10c00b15 	stw	r3,44(r2)

  return dev;
  813cd0:	e0bffe17 	ldw	r2,-8(fp)
}
  813cd4:	e037883a 	mov	sp,fp
  813cd8:	dfc00117 	ldw	ra,4(sp)
  813cdc:	df000017 	ldw	fp,0(sp)
  813ce0:	dec00204 	addi	sp,sp,8
  813ce4:	f800283a 	ret

00813ce8 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  813ce8:	defffc04 	addi	sp,sp,-16
  813cec:	df000315 	stw	fp,12(sp)
  813cf0:	df000304 	addi	fp,sp,12
  813cf4:	e13ffd15 	stw	r4,-12(fp)
  813cf8:	e17ffe15 	stw	r5,-8(fp)
  813cfc:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  813d00:	e0bffd17 	ldw	r2,-12(fp)
  813d04:	10800a17 	ldw	r2,40(r2)
  813d08:	11000204 	addi	r4,r2,8
  813d0c:	e0bffe17 	ldw	r2,-8(fp)
  813d10:	10c03fcc 	andi	r3,r2,255
  813d14:	2005883a 	mov	r2,r4
  813d18:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
  813d1c:	e0bffd17 	ldw	r2,-12(fp)
  813d20:	10800a17 	ldw	r2,40(r2)
  813d24:	11000304 	addi	r4,r2,12
  813d28:	e0bfff17 	ldw	r2,-4(fp)
  813d2c:	10ffffcc 	andi	r3,r2,65535
  813d30:	2005883a 	mov	r2,r4
  813d34:	10c00035 	stwio	r3,0(r2)

	return 0;
  813d38:	0005883a 	mov	r2,zero
}
  813d3c:	e037883a 	mov	sp,fp
  813d40:	df000017 	ldw	fp,0(sp)
  813d44:	dec00104 	addi	sp,sp,4
  813d48:	f800283a 	ret

00813d4c <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
  813d4c:	defffa04 	addi	sp,sp,-24
  813d50:	dfc00515 	stw	ra,20(sp)
  813d54:	df000415 	stw	fp,16(sp)
  813d58:	df000404 	addi	fp,sp,16
  813d5c:	e13ffc15 	stw	r4,-16(fp)
  813d60:	e17ffd15 	stw	r5,-12(fp)
  813d64:	e1bffe15 	stw	r6,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  813d68:	e0bffc17 	ldw	r2,-16(fp)
  813d6c:	10800a17 	ldw	r2,40(r2)
  813d70:	11000204 	addi	r4,r2,8
  813d74:	e0bffd17 	ldw	r2,-12(fp)
  813d78:	10c03fcc 	andi	r3,r2,255
  813d7c:	2005883a 	mov	r2,r4
  813d80:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
  813d84:	e0bffc17 	ldw	r2,-16(fp)
  813d88:	10800a17 	ldw	r2,40(r2)
  813d8c:	10800304 	addi	r2,r2,12
  813d90:	10800037 	ldwio	r2,0(r2)
  813d94:	1007883a 	mov	r3,r2
  813d98:	e0bffe17 	ldw	r2,-8(fp)
  813d9c:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
  813da0:	e13ffc17 	ldw	r4,-16(fp)
  813da4:	0813e780 	call	813e78 <alt_up_av_config_read_acknowledge>
  813da8:	1005003a 	cmpeq	r2,r2,zero
  813dac:	1000031e 	bne	r2,zero,813dbc <alt_up_av_config_read_data+0x70>
		return -1;
  813db0:	00bfffc4 	movi	r2,-1
  813db4:	e0bfff15 	stw	r2,-4(fp)
  813db8:	00000106 	br	813dc0 <alt_up_av_config_read_data+0x74>

	return 0;
  813dbc:	e03fff15 	stw	zero,-4(fp)
  813dc0:	e0bfff17 	ldw	r2,-4(fp)
}
  813dc4:	e037883a 	mov	sp,fp
  813dc8:	dfc00117 	ldw	ra,4(sp)
  813dcc:	df000017 	ldw	fp,0(sp)
  813dd0:	dec00204 	addi	sp,sp,8
  813dd4:	f800283a 	ret

00813dd8 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
  813dd8:	defffe04 	addi	sp,sp,-8
  813ddc:	df000115 	stw	fp,4(sp)
  813de0:	df000104 	addi	fp,sp,4
  813de4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
  813de8:	e0bfff17 	ldw	r2,-4(fp)
  813dec:	10800a17 	ldw	r2,40(r2)
  813df0:	1007883a 	mov	r3,r2
  813df4:	00800044 	movi	r2,1
  813df8:	18800025 	stbio	r2,0(r3)
	return 0;
  813dfc:	0005883a 	mov	r2,zero
}
  813e00:	e037883a 	mov	sp,fp
  813e04:	df000017 	ldw	fp,0(sp)
  813e08:	dec00104 	addi	sp,sp,4
  813e0c:	f800283a 	ret

00813e10 <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
  813e10:	defffe04 	addi	sp,sp,-8
  813e14:	df000115 	stw	fp,4(sp)
  813e18:	df000104 	addi	fp,sp,4
  813e1c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
  813e20:	e0bfff17 	ldw	r2,-4(fp)
  813e24:	10800a17 	ldw	r2,40(r2)
  813e28:	1007883a 	mov	r3,r2
  813e2c:	00800084 	movi	r2,2
  813e30:	18800025 	stbio	r2,0(r3)
	return 0;
  813e34:	0005883a 	mov	r2,zero
}
  813e38:	e037883a 	mov	sp,fp
  813e3c:	df000017 	ldw	fp,0(sp)
  813e40:	dec00104 	addi	sp,sp,4
  813e44:	f800283a 	ret

00813e48 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
  813e48:	defffe04 	addi	sp,sp,-8
  813e4c:	df000115 	stw	fp,4(sp)
  813e50:	df000104 	addi	fp,sp,4
  813e54:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
  813e58:	e0bfff17 	ldw	r2,-4(fp)
  813e5c:	10800a17 	ldw	r2,40(r2)
  813e60:	10000025 	stbio	zero,0(r2)
	return 0;
  813e64:	0005883a 	mov	r2,zero
}
  813e68:	e037883a 	mov	sp,fp
  813e6c:	df000017 	ldw	fp,0(sp)
  813e70:	dec00104 	addi	sp,sp,4
  813e74:	f800283a 	ret

00813e78 <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
  813e78:	defffd04 	addi	sp,sp,-12
  813e7c:	df000215 	stw	fp,8(sp)
  813e80:	df000204 	addi	fp,sp,8
  813e84:	e13ffe15 	stw	r4,-8(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
  813e88:	e0bffe17 	ldw	r2,-8(fp)
  813e8c:	10800a17 	ldw	r2,40(r2)
  813e90:	10800104 	addi	r2,r2,4
  813e94:	10800037 	ldwio	r2,0(r2)
  813e98:	1080008c 	andi	r2,r2,2
  813e9c:	1005d07a 	srai	r2,r2,1
  813ea0:	1005003a 	cmpeq	r2,r2,zero
  813ea4:	1000071e 	bne	r2,zero,813ec4 <alt_up_av_config_read_acknowledge+0x4c>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
  813ea8:	e0bffe17 	ldw	r2,-8(fp)
  813eac:	10800a17 	ldw	r2,40(r2)
  813eb0:	10800104 	addi	r2,r2,4
  813eb4:	10800037 	ldwio	r2,0(r2)
  813eb8:	1080004c 	andi	r2,r2,1
  813ebc:	e0bfff15 	stw	r2,-4(fp)
  813ec0:	00000206 	br	813ecc <alt_up_av_config_read_acknowledge+0x54>
	return -1;
  813ec4:	00bfffc4 	movi	r2,-1
  813ec8:	e0bfff15 	stw	r2,-4(fp)
  813ecc:	e0bfff17 	ldw	r2,-4(fp)
}
  813ed0:	e037883a 	mov	sp,fp
  813ed4:	df000017 	ldw	fp,0(sp)
  813ed8:	dec00104 	addi	sp,sp,4
  813edc:	f800283a 	ret

00813ee0 <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
  813ee0:	defffe04 	addi	sp,sp,-8
  813ee4:	df000115 	stw	fp,4(sp)
  813ee8:	df000104 	addi	fp,sp,4
  813eec:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
  813ef0:	e0bfff17 	ldw	r2,-4(fp)
  813ef4:	10800a17 	ldw	r2,40(r2)
  813ef8:	10800104 	addi	r2,r2,4
  813efc:	10800037 	ldwio	r2,0(r2)
  813f00:	1080008c 	andi	r2,r2,2
  813f04:	1005d07a 	srai	r2,r2,1
}
  813f08:	e037883a 	mov	sp,fp
  813f0c:	df000017 	ldw	fp,0(sp)
  813f10:	dec00104 	addi	sp,sp,4
  813f14:	f800283a 	ret

00813f18 <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  813f18:	defff904 	addi	sp,sp,-28
  813f1c:	dfc00615 	stw	ra,24(sp)
  813f20:	df000515 	stw	fp,20(sp)
  813f24:	df000504 	addi	fp,sp,20
  813f28:	e13ffc15 	stw	r4,-16(fp)
  813f2c:	e17ffd15 	stw	r5,-12(fp)
  813f30:	e1bffe15 	stw	r6,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  813f34:	e0bffc17 	ldw	r2,-16(fp)
  813f38:	10800b17 	ldw	r2,44(r2)
  813f3c:	10800060 	cmpeqi	r2,r2,1
  813f40:	10000f1e 	bne	r2,zero,813f80 <alt_up_av_config_write_audio_cfg_register+0x68>
  813f44:	e0bffc17 	ldw	r2,-16(fp)
  813f48:	10800b17 	ldw	r2,44(r2)
  813f4c:	108000a0 	cmpeqi	r2,r2,2
  813f50:	10000b1e 	bne	r2,zero,813f80 <alt_up_av_config_write_audio_cfg_register+0x68>
  813f54:	e0bffc17 	ldw	r2,-16(fp)
  813f58:	10800b17 	ldw	r2,44(r2)
  813f5c:	108000e0 	cmpeqi	r2,r2,3
  813f60:	1000071e 	bne	r2,zero,813f80 <alt_up_av_config_write_audio_cfg_register+0x68>
  813f64:	e0bffc17 	ldw	r2,-16(fp)
  813f68:	10800b17 	ldw	r2,44(r2)
  813f6c:	10800120 	cmpeqi	r2,r2,4
  813f70:	1000031e 	bne	r2,zero,813f80 <alt_up_av_config_write_audio_cfg_register+0x68>
		return -EINVAL;
  813f74:	00bffa84 	movi	r2,-22
  813f78:	e0bfff15 	stw	r2,-4(fp)
  813f7c:	00000b06 	br	813fac <alt_up_av_config_write_audio_cfg_register+0x94>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
  813f80:	e03ffb15 	stw	zero,-20(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
  813f84:	e0bffc17 	ldw	r2,-16(fp)
  813f88:	10800a17 	ldw	r2,40(r2)
  813f8c:	10800084 	addi	r2,r2,2
  813f90:	e0fffb17 	ldw	r3,-20(fp)
  813f94:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  813f98:	e13ffc17 	ldw	r4,-16(fp)
  813f9c:	e17ffd17 	ldw	r5,-12(fp)
  813fa0:	e1bffe17 	ldw	r6,-8(fp)
  813fa4:	0813ce80 	call	813ce8 <alt_up_av_config_write_data>
  813fa8:	e0bfff15 	stw	r2,-4(fp)
  813fac:	e0bfff17 	ldw	r2,-4(fp)
}
  813fb0:	e037883a 	mov	sp,fp
  813fb4:	dfc00117 	ldw	ra,4(sp)
  813fb8:	df000017 	ldw	fp,0(sp)
  813fbc:	dec00204 	addi	sp,sp,8
  813fc0:	f800283a 	ret

00813fc4 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
  813fc4:	defff904 	addi	sp,sp,-28
  813fc8:	dfc00615 	stw	ra,24(sp)
  813fcc:	df000515 	stw	fp,20(sp)
  813fd0:	df000504 	addi	fp,sp,20
  813fd4:	e13ffb15 	stw	r4,-20(fp)
  813fd8:	e17ffc15 	stw	r5,-16(fp)
  813fdc:	e1bffd15 	stw	r6,-12(fp)
  813fe0:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  813fe4:	e0bffb17 	ldw	r2,-20(fp)
  813fe8:	10800b17 	ldw	r2,44(r2)
  813fec:	108000a0 	cmpeqi	r2,r2,2
  813ff0:	10000b1e 	bne	r2,zero,814020 <alt_up_av_config_read_video_cfg_register+0x5c>
  813ff4:	e0bffb17 	ldw	r2,-20(fp)
  813ff8:	10800b17 	ldw	r2,44(r2)
  813ffc:	108000e0 	cmpeqi	r2,r2,3
  814000:	1000071e 	bne	r2,zero,814020 <alt_up_av_config_read_video_cfg_register+0x5c>
  814004:	e0bffb17 	ldw	r2,-20(fp)
  814008:	10800b17 	ldw	r2,44(r2)
  81400c:	10800120 	cmpeqi	r2,r2,4
  814010:	1000031e 	bne	r2,zero,814020 <alt_up_av_config_read_video_cfg_register+0x5c>
		return -EINVAL;
  814014:	00bffa84 	movi	r2,-22
  814018:	e0bfff15 	stw	r2,-4(fp)
  81401c:	00002106 	br	8140a4 <alt_up_av_config_read_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  814020:	e0bffb17 	ldw	r2,-20(fp)
  814024:	10800b17 	ldw	r2,44(r2)
  814028:	108000a0 	cmpeqi	r2,r2,2
  81402c:	1000041e 	bne	r2,zero,814040 <alt_up_av_config_read_video_cfg_register+0x7c>
  814030:	e0bffb17 	ldw	r2,-20(fp)
  814034:	10800b17 	ldw	r2,44(r2)
  814038:	10800118 	cmpnei	r2,r2,4
  81403c:	1000061e 	bne	r2,zero,814058 <alt_up_av_config_read_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  814040:	e0bffe17 	ldw	r2,-8(fp)
  814044:	10800060 	cmpeqi	r2,r2,1
  814048:	10000c1e 	bne	r2,zero,81407c <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  81404c:	00bffa84 	movi	r2,-22
  814050:	e0bfff15 	stw	r2,-4(fp)
  814054:	00001306 	br	8140a4 <alt_up_av_config_read_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  814058:	e0bffe17 	ldw	r2,-8(fp)
  81405c:	10800060 	cmpeqi	r2,r2,1
  814060:	1000061e 	bne	r2,zero,81407c <alt_up_av_config_read_video_cfg_register+0xb8>
  814064:	e0bffe17 	ldw	r2,-8(fp)
  814068:	108000a0 	cmpeqi	r2,r2,2
  81406c:	1000031e 	bne	r2,zero,81407c <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  814070:	00bffa84 	movi	r2,-22
  814074:	e0bfff15 	stw	r2,-4(fp)
  814078:	00000a06 	br	8140a4 <alt_up_av_config_read_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  81407c:	e0bffb17 	ldw	r2,-20(fp)
  814080:	10800a17 	ldw	r2,40(r2)
  814084:	10800084 	addi	r2,r2,2
  814088:	e0fffe17 	ldw	r3,-8(fp)
  81408c:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_read_data(av_config, addr, data);
  814090:	e13ffb17 	ldw	r4,-20(fp)
  814094:	e17ffc17 	ldw	r5,-16(fp)
  814098:	e1bffd17 	ldw	r6,-12(fp)
  81409c:	0813d4c0 	call	813d4c <alt_up_av_config_read_data>
  8140a0:	e0bfff15 	stw	r2,-4(fp)
  8140a4:	e0bfff17 	ldw	r2,-4(fp)
}
  8140a8:	e037883a 	mov	sp,fp
  8140ac:	dfc00117 	ldw	ra,4(sp)
  8140b0:	df000017 	ldw	fp,0(sp)
  8140b4:	dec00204 	addi	sp,sp,8
  8140b8:	f800283a 	ret

008140bc <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
  8140bc:	defff904 	addi	sp,sp,-28
  8140c0:	dfc00615 	stw	ra,24(sp)
  8140c4:	df000515 	stw	fp,20(sp)
  8140c8:	df000504 	addi	fp,sp,20
  8140cc:	e13ffb15 	stw	r4,-20(fp)
  8140d0:	e17ffc15 	stw	r5,-16(fp)
  8140d4:	e1bffd15 	stw	r6,-12(fp)
  8140d8:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  8140dc:	e0bffb17 	ldw	r2,-20(fp)
  8140e0:	10800b17 	ldw	r2,44(r2)
  8140e4:	108000a0 	cmpeqi	r2,r2,2
  8140e8:	10000b1e 	bne	r2,zero,814118 <alt_up_av_config_write_video_cfg_register+0x5c>
  8140ec:	e0bffb17 	ldw	r2,-20(fp)
  8140f0:	10800b17 	ldw	r2,44(r2)
  8140f4:	108000e0 	cmpeqi	r2,r2,3
  8140f8:	1000071e 	bne	r2,zero,814118 <alt_up_av_config_write_video_cfg_register+0x5c>
  8140fc:	e0bffb17 	ldw	r2,-20(fp)
  814100:	10800b17 	ldw	r2,44(r2)
  814104:	10800120 	cmpeqi	r2,r2,4
  814108:	1000031e 	bne	r2,zero,814118 <alt_up_av_config_write_video_cfg_register+0x5c>
		return -EINVAL;
  81410c:	00bffa84 	movi	r2,-22
  814110:	e0bfff15 	stw	r2,-4(fp)
  814114:	00002106 	br	81419c <alt_up_av_config_write_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  814118:	e0bffb17 	ldw	r2,-20(fp)
  81411c:	10800b17 	ldw	r2,44(r2)
  814120:	108000a0 	cmpeqi	r2,r2,2
  814124:	1000041e 	bne	r2,zero,814138 <alt_up_av_config_write_video_cfg_register+0x7c>
  814128:	e0bffb17 	ldw	r2,-20(fp)
  81412c:	10800b17 	ldw	r2,44(r2)
  814130:	10800118 	cmpnei	r2,r2,4
  814134:	1000061e 	bne	r2,zero,814150 <alt_up_av_config_write_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  814138:	e0bffe17 	ldw	r2,-8(fp)
  81413c:	10800060 	cmpeqi	r2,r2,1
  814140:	10000c1e 	bne	r2,zero,814174 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  814144:	00bffa84 	movi	r2,-22
  814148:	e0bfff15 	stw	r2,-4(fp)
  81414c:	00001306 	br	81419c <alt_up_av_config_write_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  814150:	e0bffe17 	ldw	r2,-8(fp)
  814154:	10800060 	cmpeqi	r2,r2,1
  814158:	1000061e 	bne	r2,zero,814174 <alt_up_av_config_write_video_cfg_register+0xb8>
  81415c:	e0bffe17 	ldw	r2,-8(fp)
  814160:	108000a0 	cmpeqi	r2,r2,2
  814164:	1000031e 	bne	r2,zero,814174 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  814168:	00bffa84 	movi	r2,-22
  81416c:	e0bfff15 	stw	r2,-4(fp)
  814170:	00000a06 	br	81419c <alt_up_av_config_write_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  814174:	e0bffb17 	ldw	r2,-20(fp)
  814178:	10800a17 	ldw	r2,40(r2)
  81417c:	10800084 	addi	r2,r2,2
  814180:	e0fffe17 	ldw	r3,-8(fp)
  814184:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  814188:	e13ffb17 	ldw	r4,-20(fp)
  81418c:	e17ffc17 	ldw	r5,-16(fp)
  814190:	e1bffd17 	ldw	r6,-12(fp)
  814194:	0813ce80 	call	813ce8 <alt_up_av_config_write_data>
  814198:	e0bfff15 	stw	r2,-4(fp)
  81419c:	e0bfff17 	ldw	r2,-4(fp)
}
  8141a0:	e037883a 	mov	sp,fp
  8141a4:	dfc00117 	ldw	ra,4(sp)
  8141a8:	df000017 	ldw	fp,0(sp)
  8141ac:	dec00204 	addi	sp,sp,8
  8141b0:	f800283a 	ret

008141b4 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  8141b4:	defffa04 	addi	sp,sp,-24
  8141b8:	dfc00515 	stw	ra,20(sp)
  8141bc:	df000415 	stw	fp,16(sp)
  8141c0:	df000404 	addi	fp,sp,16
  8141c4:	e13ffc15 	stw	r4,-16(fp)
  8141c8:	e17ffd15 	stw	r5,-12(fp)
  8141cc:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  8141d0:	e0bffc17 	ldw	r2,-16(fp)
  8141d4:	10800b17 	ldw	r2,44(r2)
  8141d8:	10800220 	cmpeqi	r2,r2,8
  8141dc:	1000031e 	bne	r2,zero,8141ec <alt_up_av_config_read_DC2_cfg_register+0x38>
		return -EINVAL;
  8141e0:	00bffa84 	movi	r2,-22
  8141e4:	e0bfff15 	stw	r2,-4(fp)
  8141e8:	00000506 	br	814200 <alt_up_av_config_read_DC2_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  8141ec:	e13ffc17 	ldw	r4,-16(fp)
  8141f0:	e17ffd17 	ldw	r5,-12(fp)
  8141f4:	e1bffe17 	ldw	r6,-8(fp)
  8141f8:	0813d4c0 	call	813d4c <alt_up_av_config_read_data>
  8141fc:	e0bfff15 	stw	r2,-4(fp)
  814200:	e0bfff17 	ldw	r2,-4(fp)
}
  814204:	e037883a 	mov	sp,fp
  814208:	dfc00117 	ldw	ra,4(sp)
  81420c:	df000017 	ldw	fp,0(sp)
  814210:	dec00204 	addi	sp,sp,8
  814214:	f800283a 	ret

00814218 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  814218:	defffa04 	addi	sp,sp,-24
  81421c:	dfc00515 	stw	ra,20(sp)
  814220:	df000415 	stw	fp,16(sp)
  814224:	df000404 	addi	fp,sp,16
  814228:	e13ffc15 	stw	r4,-16(fp)
  81422c:	e17ffd15 	stw	r5,-12(fp)
  814230:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  814234:	e0bffc17 	ldw	r2,-16(fp)
  814238:	10800b17 	ldw	r2,44(r2)
  81423c:	10800220 	cmpeqi	r2,r2,8
  814240:	1000031e 	bne	r2,zero,814250 <alt_up_av_config_write_DC2_cfg_register+0x38>
		return -EINVAL;
  814244:	00bffa84 	movi	r2,-22
  814248:	e0bfff15 	stw	r2,-4(fp)
  81424c:	00000506 	br	814264 <alt_up_av_config_write_DC2_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  814250:	e13ffc17 	ldw	r4,-16(fp)
  814254:	e17ffd17 	ldw	r5,-12(fp)
  814258:	e1bffe17 	ldw	r6,-8(fp)
  81425c:	0813ce80 	call	813ce8 <alt_up_av_config_write_data>
  814260:	e0bfff15 	stw	r2,-4(fp)
  814264:	e0bfff17 	ldw	r2,-4(fp)
}
  814268:	e037883a 	mov	sp,fp
  81426c:	dfc00117 	ldw	ra,4(sp)
  814270:	df000017 	ldw	fp,0(sp)
  814274:	dec00204 	addi	sp,sp,8
  814278:	f800283a 	ret

0081427c <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  81427c:	defffa04 	addi	sp,sp,-24
  814280:	dfc00515 	stw	ra,20(sp)
  814284:	df000415 	stw	fp,16(sp)
  814288:	df000404 	addi	fp,sp,16
  81428c:	e13ffc15 	stw	r4,-16(fp)
  814290:	e17ffd15 	stw	r5,-12(fp)
  814294:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  814298:	e0bffc17 	ldw	r2,-16(fp)
  81429c:	10800b17 	ldw	r2,44(r2)
  8142a0:	10800260 	cmpeqi	r2,r2,9
  8142a4:	1000031e 	bne	r2,zero,8142b4 <alt_up_av_config_read_D5M_cfg_register+0x38>
		return -EINVAL;
  8142a8:	00bffa84 	movi	r2,-22
  8142ac:	e0bfff15 	stw	r2,-4(fp)
  8142b0:	00000506 	br	8142c8 <alt_up_av_config_read_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_read_data(av_config, addr, data);
  8142b4:	e13ffc17 	ldw	r4,-16(fp)
  8142b8:	e17ffd17 	ldw	r5,-12(fp)
  8142bc:	e1bffe17 	ldw	r6,-8(fp)
  8142c0:	0813d4c0 	call	813d4c <alt_up_av_config_read_data>
  8142c4:	e0bfff15 	stw	r2,-4(fp)
  8142c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8142cc:	e037883a 	mov	sp,fp
  8142d0:	dfc00117 	ldw	ra,4(sp)
  8142d4:	df000017 	ldw	fp,0(sp)
  8142d8:	dec00204 	addi	sp,sp,8
  8142dc:	f800283a 	ret

008142e0 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  8142e0:	defffa04 	addi	sp,sp,-24
  8142e4:	dfc00515 	stw	ra,20(sp)
  8142e8:	df000415 	stw	fp,16(sp)
  8142ec:	df000404 	addi	fp,sp,16
  8142f0:	e13ffc15 	stw	r4,-16(fp)
  8142f4:	e17ffd15 	stw	r5,-12(fp)
  8142f8:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  8142fc:	e0bffc17 	ldw	r2,-16(fp)
  814300:	10800b17 	ldw	r2,44(r2)
  814304:	10800260 	cmpeqi	r2,r2,9
  814308:	1000031e 	bne	r2,zero,814318 <alt_up_av_config_write_D5M_cfg_register+0x38>
		return -EINVAL;
  81430c:	00bffa84 	movi	r2,-22
  814310:	e0bfff15 	stw	r2,-4(fp)
  814314:	00000506 	br	81432c <alt_up_av_config_write_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_write_data(av_config, addr, data);
  814318:	e13ffc17 	ldw	r4,-16(fp)
  81431c:	e17ffd17 	ldw	r5,-12(fp)
  814320:	e1bffe17 	ldw	r6,-8(fp)
  814324:	0813ce80 	call	813ce8 <alt_up_av_config_write_data>
  814328:	e0bfff15 	stw	r2,-4(fp)
  81432c:	e0bfff17 	ldw	r2,-4(fp)
}
  814330:	e037883a 	mov	sp,fp
  814334:	dfc00117 	ldw	ra,4(sp)
  814338:	df000017 	ldw	fp,0(sp)
  81433c:	dec00204 	addi	sp,sp,8
  814340:	f800283a 	ret

00814344 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  814344:	defffa04 	addi	sp,sp,-24
  814348:	dfc00515 	stw	ra,20(sp)
  81434c:	df000415 	stw	fp,16(sp)
  814350:	df000404 	addi	fp,sp,16
  814354:	e13ffc15 	stw	r4,-16(fp)
  814358:	e17ffd15 	stw	r5,-12(fp)
  81435c:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  814360:	e0bffc17 	ldw	r2,-16(fp)
  814364:	10800b17 	ldw	r2,44(r2)
  814368:	108002a0 	cmpeqi	r2,r2,10
  81436c:	1000031e 	bne	r2,zero,81437c <alt_up_av_config_read_LTM_cfg_register+0x38>
		return -EINVAL;
  814370:	00bffa84 	movi	r2,-22
  814374:	e0bfff15 	stw	r2,-4(fp)
  814378:	00000506 	br	814390 <alt_up_av_config_read_LTM_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  81437c:	e13ffc17 	ldw	r4,-16(fp)
  814380:	e17ffd17 	ldw	r5,-12(fp)
  814384:	e1bffe17 	ldw	r6,-8(fp)
  814388:	0813d4c0 	call	813d4c <alt_up_av_config_read_data>
  81438c:	e0bfff15 	stw	r2,-4(fp)
  814390:	e0bfff17 	ldw	r2,-4(fp)
}
  814394:	e037883a 	mov	sp,fp
  814398:	dfc00117 	ldw	ra,4(sp)
  81439c:	df000017 	ldw	fp,0(sp)
  8143a0:	dec00204 	addi	sp,sp,8
  8143a4:	f800283a 	ret

008143a8 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  8143a8:	defffa04 	addi	sp,sp,-24
  8143ac:	dfc00515 	stw	ra,20(sp)
  8143b0:	df000415 	stw	fp,16(sp)
  8143b4:	df000404 	addi	fp,sp,16
  8143b8:	e13ffc15 	stw	r4,-16(fp)
  8143bc:	e17ffd15 	stw	r5,-12(fp)
  8143c0:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  8143c4:	e0bffc17 	ldw	r2,-16(fp)
  8143c8:	10800b17 	ldw	r2,44(r2)
  8143cc:	108002a0 	cmpeqi	r2,r2,10
  8143d0:	1000031e 	bne	r2,zero,8143e0 <alt_up_av_config_write_LTM_cfg_register+0x38>
		return -EINVAL;
  8143d4:	00bffa84 	movi	r2,-22
  8143d8:	e0bfff15 	stw	r2,-4(fp)
  8143dc:	00000506 	br	8143f4 <alt_up_av_config_write_LTM_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  8143e0:	e13ffc17 	ldw	r4,-16(fp)
  8143e4:	e17ffd17 	ldw	r5,-12(fp)
  8143e8:	e1bffe17 	ldw	r6,-8(fp)
  8143ec:	0813ce80 	call	813ce8 <alt_up_av_config_write_data>
  8143f0:	e0bfff15 	stw	r2,-4(fp)
  8143f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8143f8:	e037883a 	mov	sp,fp
  8143fc:	dfc00117 	ldw	ra,4(sp)
  814400:	df000017 	ldw	fp,0(sp)
  814404:	dec00204 	addi	sp,sp,8
  814408:	f800283a 	ret

0081440c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  81440c:	defffc04 	addi	sp,sp,-16
  814410:	df000315 	stw	fp,12(sp)
  814414:	df000304 	addi	fp,sp,12
  814418:	e13ffe15 	stw	r4,-8(fp)
  81441c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  814420:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  814424:	e0bfff17 	ldw	r2,-4(fp)
  814428:	1004c03a 	cmpne	r2,r2,zero
  81442c:	1000061e 	bne	r2,zero,814448 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  814430:	e0bffe17 	ldw	r2,-8(fp)
  814434:	1007883a 	mov	r3,r2
  814438:	e0bffd03 	ldbu	r2,-12(fp)
  81443c:	10c4b03a 	or	r2,r2,r3
  814440:	e0bffd05 	stb	r2,-12(fp)
  814444:	00000806 	br	814468 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  814448:	e0bffe17 	ldw	r2,-8(fp)
  81444c:	1007883a 	mov	r3,r2
  814450:	e0bffd03 	ldbu	r2,-12(fp)
  814454:	10c4b03a 	or	r2,r2,r3
  814458:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  81445c:	e0bffd03 	ldbu	r2,-12(fp)
  814460:	10801014 	ori	r2,r2,64
  814464:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  814468:	e0fffd03 	ldbu	r3,-12(fp)
  81446c:	00bfe004 	movi	r2,-128
  814470:	1884b03a 	or	r2,r3,r2
  814474:	10803fcc 	andi	r2,r2,255
}
  814478:	e037883a 	mov	sp,fp
  81447c:	df000017 	ldw	fp,0(sp)
  814480:	dec00104 	addi	sp,sp,4
  814484:	f800283a 	ret

00814488 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  814488:	defffd04 	addi	sp,sp,-12
  81448c:	df000215 	stw	fp,8(sp)
  814490:	df000204 	addi	fp,sp,8
  814494:	e13ffe15 	stw	r4,-8(fp)
  814498:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  81449c:	e0bffe17 	ldw	r2,-8(fp)
  8144a0:	10800a17 	ldw	r2,40(r2)
  8144a4:	e0ffff03 	ldbu	r3,-4(fp)
  8144a8:	10c00025 	stbio	r3,0(r2)
}
  8144ac:	e037883a 	mov	sp,fp
  8144b0:	df000017 	ldw	fp,0(sp)
  8144b4:	dec00104 	addi	sp,sp,4
  8144b8:	f800283a 	ret

008144bc <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  8144bc:	defffe04 	addi	sp,sp,-8
  8144c0:	df000115 	stw	fp,4(sp)
  8144c4:	df000104 	addi	fp,sp,4
  8144c8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  8144cc:	e0bfff17 	ldw	r2,-4(fp)
  8144d0:	10800a17 	ldw	r2,40(r2)
  8144d4:	1007883a 	mov	r3,r2
  8144d8:	00800044 	movi	r2,1
  8144dc:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  8144e0:	e037883a 	mov	sp,fp
  8144e4:	df000017 	ldw	fp,0(sp)
  8144e8:	dec00104 	addi	sp,sp,4
  8144ec:	f800283a 	ret

008144f0 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  8144f0:	defffc04 	addi	sp,sp,-16
  8144f4:	dfc00315 	stw	ra,12(sp)
  8144f8:	df000215 	stw	fp,8(sp)
  8144fc:	df000204 	addi	fp,sp,8
  814500:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  814504:	e13fff17 	ldw	r4,-4(fp)
  814508:	014020b4 	movhi	r5,130
  81450c:	29784304 	addi	r5,r5,-7924
  814510:	081ac2c0 	call	81ac2c <alt_find_dev>
  814514:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  814518:	e0bffe17 	ldw	r2,-8(fp)
}
  81451c:	e037883a 	mov	sp,fp
  814520:	dfc00117 	ldw	ra,4(sp)
  814524:	df000017 	ldw	fp,0(sp)
  814528:	dec00204 	addi	sp,sp,8
  81452c:	f800283a 	ret

00814530 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  814530:	defffb04 	addi	sp,sp,-20
  814534:	df000415 	stw	fp,16(sp)
  814538:	df000404 	addi	fp,sp,16
  81453c:	e13ffd15 	stw	r4,-12(fp)
  814540:	e17ffe15 	stw	r5,-8(fp)
  814544:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  814548:	e03ffc15 	stw	zero,-16(fp)
  81454c:	00000f06 	br	81458c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  814550:	e0bffd17 	ldw	r2,-12(fp)
  814554:	10800a17 	ldw	r2,40(r2)
  814558:	11000044 	addi	r4,r2,1
  81455c:	e0fffc17 	ldw	r3,-16(fp)
  814560:	e0bffe17 	ldw	r2,-8(fp)
  814564:	1885883a 	add	r2,r3,r2
  814568:	10800003 	ldbu	r2,0(r2)
  81456c:	10c03fcc 	andi	r3,r2,255
  814570:	18c0201c 	xori	r3,r3,128
  814574:	18ffe004 	addi	r3,r3,-128
  814578:	2005883a 	mov	r2,r4
  81457c:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  814580:	e0bffc17 	ldw	r2,-16(fp)
  814584:	10800044 	addi	r2,r2,1
  814588:	e0bffc15 	stw	r2,-16(fp)
  81458c:	e0fffc17 	ldw	r3,-16(fp)
  814590:	e0bfff17 	ldw	r2,-4(fp)
  814594:	18bfee36 	bltu	r3,r2,814550 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  814598:	e037883a 	mov	sp,fp
  81459c:	df000017 	ldw	fp,0(sp)
  8145a0:	dec00104 	addi	sp,sp,4
  8145a4:	f800283a 	ret

008145a8 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  8145a8:	defffd04 	addi	sp,sp,-12
  8145ac:	df000215 	stw	fp,8(sp)
  8145b0:	df000204 	addi	fp,sp,8
  8145b4:	e13ffe15 	stw	r4,-8(fp)
  8145b8:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  8145bc:	00000d06 	br	8145f4 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  8145c0:	e0bffe17 	ldw	r2,-8(fp)
  8145c4:	10800a17 	ldw	r2,40(r2)
  8145c8:	11000044 	addi	r4,r2,1
  8145cc:	e0bfff17 	ldw	r2,-4(fp)
  8145d0:	10800003 	ldbu	r2,0(r2)
  8145d4:	10c03fcc 	andi	r3,r2,255
  8145d8:	18c0201c 	xori	r3,r3,128
  8145dc:	18ffe004 	addi	r3,r3,-128
  8145e0:	2005883a 	mov	r2,r4
  8145e4:	10c00025 	stbio	r3,0(r2)
		++ptr;
  8145e8:	e0bfff17 	ldw	r2,-4(fp)
  8145ec:	10800044 	addi	r2,r2,1
  8145f0:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  8145f4:	e0bfff17 	ldw	r2,-4(fp)
  8145f8:	10800003 	ldbu	r2,0(r2)
  8145fc:	10803fcc 	andi	r2,r2,255
  814600:	1080201c 	xori	r2,r2,128
  814604:	10bfe004 	addi	r2,r2,-128
  814608:	1004c03a 	cmpne	r2,r2,zero
  81460c:	103fec1e 	bne	r2,zero,8145c0 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  814610:	e037883a 	mov	sp,fp
  814614:	df000017 	ldw	fp,0(sp)
  814618:	dec00104 	addi	sp,sp,4
  81461c:	f800283a 	ret

00814620 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  814620:	defffb04 	addi	sp,sp,-20
  814624:	dfc00415 	stw	ra,16(sp)
  814628:	df000315 	stw	fp,12(sp)
  81462c:	df000304 	addi	fp,sp,12
  814630:	e13ffd15 	stw	r4,-12(fp)
  814634:	e17ffe15 	stw	r5,-8(fp)
  814638:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  81463c:	e0bffd17 	ldw	r2,-12(fp)
  814640:	10800017 	ldw	r2,0(r2)
  814644:	1009883a 	mov	r4,r2
  814648:	e1bfff17 	ldw	r6,-4(fp)
  81464c:	e17ffe17 	ldw	r5,-8(fp)
  814650:	08145300 	call	814530 <alt_up_character_lcd_write>
	return 0;
  814654:	0005883a 	mov	r2,zero
}
  814658:	e037883a 	mov	sp,fp
  81465c:	dfc00117 	ldw	ra,4(sp)
  814660:	df000017 	ldw	fp,0(sp)
  814664:	dec00204 	addi	sp,sp,8
  814668:	f800283a 	ret

0081466c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  81466c:	defff904 	addi	sp,sp,-28
  814670:	dfc00615 	stw	ra,24(sp)
  814674:	df000515 	stw	fp,20(sp)
  814678:	df000504 	addi	fp,sp,20
  81467c:	e13ffc15 	stw	r4,-16(fp)
  814680:	e17ffd15 	stw	r5,-12(fp)
  814684:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  814688:	e0bffd17 	ldw	r2,-12(fp)
  81468c:	10800a28 	cmpgeui	r2,r2,40
  814690:	1000031e 	bne	r2,zero,8146a0 <alt_up_character_lcd_set_cursor_pos+0x34>
  814694:	e0bffe17 	ldw	r2,-8(fp)
  814698:	108000b0 	cmpltui	r2,r2,2
  81469c:	1000031e 	bne	r2,zero,8146ac <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  8146a0:	00bfffc4 	movi	r2,-1
  8146a4:	e0bfff15 	stw	r2,-4(fp)
  8146a8:	00000806 	br	8146cc <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  8146ac:	e13ffd17 	ldw	r4,-12(fp)
  8146b0:	e17ffe17 	ldw	r5,-8(fp)
  8146b4:	081440c0 	call	81440c <get_DDRAM_addr>
  8146b8:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  8146bc:	e17ffb03 	ldbu	r5,-20(fp)
  8146c0:	e13ffc17 	ldw	r4,-16(fp)
  8146c4:	08144880 	call	814488 <alt_up_character_lcd_send_cmd>
	return 0;
  8146c8:	e03fff15 	stw	zero,-4(fp)
  8146cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8146d0:	e037883a 	mov	sp,fp
  8146d4:	dfc00117 	ldw	ra,4(sp)
  8146d8:	df000017 	ldw	fp,0(sp)
  8146dc:	dec00204 	addi	sp,sp,8
  8146e0:	f800283a 	ret

008146e4 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  8146e4:	defff904 	addi	sp,sp,-28
  8146e8:	dfc00615 	stw	ra,24(sp)
  8146ec:	df000515 	stw	fp,20(sp)
  8146f0:	df000504 	addi	fp,sp,20
  8146f4:	e13ffc15 	stw	r4,-16(fp)
  8146f8:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  8146fc:	e0bffd17 	ldw	r2,-12(fp)
  814700:	1005003a 	cmpeq	r2,r2,zero
  814704:	10001e1e 	bne	r2,zero,814780 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  814708:	e0bffd17 	ldw	r2,-12(fp)
  81470c:	10800050 	cmplti	r2,r2,1
  814710:	1000031e 	bne	r2,zero,814720 <alt_up_character_lcd_shift_cursor+0x3c>
  814714:	00800504 	movi	r2,20
  814718:	e0bfff05 	stb	r2,-4(fp)
  81471c:	00000206 	br	814728 <alt_up_character_lcd_shift_cursor+0x44>
  814720:	00c00404 	movi	r3,16
  814724:	e0ffff05 	stb	r3,-4(fp)
  814728:	e0bfff03 	ldbu	r2,-4(fp)
  81472c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  814730:	e0fffd17 	ldw	r3,-12(fp)
  814734:	e0fffe15 	stw	r3,-8(fp)
  814738:	e0fffe17 	ldw	r3,-8(fp)
  81473c:	1804403a 	cmpge	r2,r3,zero
  814740:	1000031e 	bne	r2,zero,814750 <alt_up_character_lcd_shift_cursor+0x6c>
  814744:	e0bffe17 	ldw	r2,-8(fp)
  814748:	0085c83a 	sub	r2,zero,r2
  81474c:	e0bffe15 	stw	r2,-8(fp)
  814750:	e0fffe17 	ldw	r3,-8(fp)
  814754:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  814758:	00000306 	br	814768 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  81475c:	e17ffb43 	ldbu	r5,-19(fp)
  814760:	e13ffc17 	ldw	r4,-16(fp)
  814764:	08144880 	call	814488 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  814768:	e0bffb03 	ldbu	r2,-20(fp)
  81476c:	10bfffc4 	addi	r2,r2,-1
  814770:	e0bffb05 	stb	r2,-20(fp)
  814774:	e0bffb03 	ldbu	r2,-20(fp)
  814778:	10803fd8 	cmpnei	r2,r2,255
  81477c:	103ff71e 	bne	r2,zero,81475c <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  814780:	e037883a 	mov	sp,fp
  814784:	dfc00117 	ldw	ra,4(sp)
  814788:	df000017 	ldw	fp,0(sp)
  81478c:	dec00204 	addi	sp,sp,8
  814790:	f800283a 	ret

00814794 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  814794:	defff904 	addi	sp,sp,-28
  814798:	dfc00615 	stw	ra,24(sp)
  81479c:	df000515 	stw	fp,20(sp)
  8147a0:	df000504 	addi	fp,sp,20
  8147a4:	e13ffc15 	stw	r4,-16(fp)
  8147a8:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  8147ac:	e0bffd17 	ldw	r2,-12(fp)
  8147b0:	1005003a 	cmpeq	r2,r2,zero
  8147b4:	10001e1e 	bne	r2,zero,814830 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  8147b8:	e0bffd17 	ldw	r2,-12(fp)
  8147bc:	10800050 	cmplti	r2,r2,1
  8147c0:	1000031e 	bne	r2,zero,8147d0 <alt_up_character_lcd_shift_display+0x3c>
  8147c4:	00800704 	movi	r2,28
  8147c8:	e0bfff05 	stb	r2,-4(fp)
  8147cc:	00000206 	br	8147d8 <alt_up_character_lcd_shift_display+0x44>
  8147d0:	00c00604 	movi	r3,24
  8147d4:	e0ffff05 	stb	r3,-4(fp)
  8147d8:	e0bfff03 	ldbu	r2,-4(fp)
  8147dc:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  8147e0:	e0fffd17 	ldw	r3,-12(fp)
  8147e4:	e0fffe15 	stw	r3,-8(fp)
  8147e8:	e0fffe17 	ldw	r3,-8(fp)
  8147ec:	1804403a 	cmpge	r2,r3,zero
  8147f0:	1000031e 	bne	r2,zero,814800 <alt_up_character_lcd_shift_display+0x6c>
  8147f4:	e0bffe17 	ldw	r2,-8(fp)
  8147f8:	0085c83a 	sub	r2,zero,r2
  8147fc:	e0bffe15 	stw	r2,-8(fp)
  814800:	e0fffe17 	ldw	r3,-8(fp)
  814804:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  814808:	00000306 	br	814818 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  81480c:	e17ffb43 	ldbu	r5,-19(fp)
  814810:	e13ffc17 	ldw	r4,-16(fp)
  814814:	08144880 	call	814488 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  814818:	e0bffb03 	ldbu	r2,-20(fp)
  81481c:	10bfffc4 	addi	r2,r2,-1
  814820:	e0bffb05 	stb	r2,-20(fp)
  814824:	e0bffb03 	ldbu	r2,-20(fp)
  814828:	10803fd8 	cmpnei	r2,r2,255
  81482c:	103ff71e 	bne	r2,zero,81480c <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  814830:	e037883a 	mov	sp,fp
  814834:	dfc00117 	ldw	ra,4(sp)
  814838:	df000017 	ldw	fp,0(sp)
  81483c:	dec00204 	addi	sp,sp,8
  814840:	f800283a 	ret

00814844 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  814844:	defff904 	addi	sp,sp,-28
  814848:	dfc00615 	stw	ra,24(sp)
  81484c:	df000515 	stw	fp,20(sp)
  814850:	df000504 	addi	fp,sp,20
  814854:	e13ffc15 	stw	r4,-16(fp)
  814858:	e17ffd15 	stw	r5,-12(fp)
  81485c:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  814860:	e0bffd17 	ldw	r2,-12(fp)
  814864:	10800a28 	cmpgeui	r2,r2,40
  814868:	1000031e 	bne	r2,zero,814878 <alt_up_character_lcd_erase_pos+0x34>
  81486c:	e0bffe17 	ldw	r2,-8(fp)
  814870:	108000b0 	cmpltui	r2,r2,2
  814874:	1000031e 	bne	r2,zero,814884 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  814878:	00bfffc4 	movi	r2,-1
  81487c:	e0bfff15 	stw	r2,-4(fp)
  814880:	00000e06 	br	8148bc <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  814884:	e13ffd17 	ldw	r4,-12(fp)
  814888:	e17ffe17 	ldw	r5,-8(fp)
  81488c:	081440c0 	call	81440c <get_DDRAM_addr>
  814890:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  814894:	e17ffb03 	ldbu	r5,-20(fp)
  814898:	e13ffc17 	ldw	r4,-16(fp)
  81489c:	08144880 	call	814488 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
  8148a0:	e0bffc17 	ldw	r2,-16(fp)
  8148a4:	10800a17 	ldw	r2,40(r2)
  8148a8:	10800044 	addi	r2,r2,1
  8148ac:	1007883a 	mov	r3,r2
  8148b0:	00800084 	movi	r2,2
  8148b4:	18800025 	stbio	r2,0(r3)
	return 0;
  8148b8:	e03fff15 	stw	zero,-4(fp)
  8148bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8148c0:	e037883a 	mov	sp,fp
  8148c4:	dfc00117 	ldw	ra,4(sp)
  8148c8:	df000017 	ldw	fp,0(sp)
  8148cc:	dec00204 	addi	sp,sp,8
  8148d0:	f800283a 	ret

008148d4 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  8148d4:	defffd04 	addi	sp,sp,-12
  8148d8:	dfc00215 	stw	ra,8(sp)
  8148dc:	df000115 	stw	fp,4(sp)
  8148e0:	df000104 	addi	fp,sp,4
  8148e4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  8148e8:	e13fff17 	ldw	r4,-4(fp)
  8148ec:	01400304 	movi	r5,12
  8148f0:	08144880 	call	814488 <alt_up_character_lcd_send_cmd>
}
  8148f4:	e037883a 	mov	sp,fp
  8148f8:	dfc00117 	ldw	ra,4(sp)
  8148fc:	df000017 	ldw	fp,0(sp)
  814900:	dec00204 	addi	sp,sp,8
  814904:	f800283a 	ret

00814908 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  814908:	defffd04 	addi	sp,sp,-12
  81490c:	dfc00215 	stw	ra,8(sp)
  814910:	df000115 	stw	fp,4(sp)
  814914:	df000104 	addi	fp,sp,4
  814918:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  81491c:	e13fff17 	ldw	r4,-4(fp)
  814920:	014003c4 	movi	r5,15
  814924:	08144880 	call	814488 <alt_up_character_lcd_send_cmd>
}
  814928:	e037883a 	mov	sp,fp
  81492c:	dfc00117 	ldw	ra,4(sp)
  814930:	df000017 	ldw	fp,0(sp)
  814934:	dec00204 	addi	sp,sp,8
  814938:	f800283a 	ret

0081493c <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
  81493c:	defffc04 	addi	sp,sp,-16
  814940:	dfc00315 	stw	ra,12(sp)
  814944:	df000215 	stw	fp,8(sp)
  814948:	df000204 	addi	fp,sp,8
  81494c:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
  814950:	e0bfff17 	ldw	r2,-4(fp)
  814954:	10800217 	ldw	r2,8(r2)
  814958:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
  81495c:	00000c06 	br	814990 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
  814960:	e13ffe17 	ldw	r4,-8(fp)
  814964:	014020b4 	movhi	r5,130
  814968:	29715204 	addi	r5,r5,-15032
  81496c:	08100040 	call	810004 <strcmp>
  814970:	1004c03a 	cmpne	r2,r2,zero
  814974:	1000031e 	bne	r2,zero,814984 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
  814978:	e0bffe17 	ldw	r2,-8(fp)
  81497c:	10000005 	stb	zero,0(r2)
			break;
  814980:	00000a06 	br	8149ac <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
  814984:	e0bffe17 	ldw	r2,-8(fp)
  814988:	10800044 	addi	r2,r2,1
  81498c:	e0bffe15 	stw	r2,-8(fp)
  814990:	e0bffe17 	ldw	r2,-8(fp)
  814994:	10800003 	ldbu	r2,0(r2)
  814998:	10803fcc 	andi	r2,r2,255
  81499c:	1080201c 	xori	r2,r2,128
  8149a0:	10bfe004 	addi	r2,r2,-128
  8149a4:	1004c03a 	cmpne	r2,r2,zero
  8149a8:	103fed1e 	bne	r2,zero,814960 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
  8149ac:	e037883a 	mov	sp,fp
  8149b0:	dfc00117 	ldw	ra,4(sp)
  8149b4:	df000017 	ldw	fp,0(sp)
  8149b8:	dec00204 	addi	sp,sp,8
  8149bc:	f800283a 	ret

008149c0 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
  8149c0:	defffc04 	addi	sp,sp,-16
  8149c4:	dfc00315 	stw	ra,12(sp)
  8149c8:	df000215 	stw	fp,8(sp)
  8149cc:	df000204 	addi	fp,sp,8
  8149d0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
  8149d4:	e13fff17 	ldw	r4,-4(fp)
  8149d8:	014020b4 	movhi	r5,130
  8149dc:	29784304 	addi	r5,r5,-7924
  8149e0:	081ac2c0 	call	81ac2c <alt_find_dev>
  8149e4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  8149e8:	e0bffe17 	ldw	r2,-8(fp)
}
  8149ec:	e037883a 	mov	sp,fp
  8149f0:	dfc00117 	ldw	ra,4(sp)
  8149f4:	df000017 	ldw	fp,0(sp)
  8149f8:	dec00204 	addi	sp,sp,8
  8149fc:	f800283a 	ret

00814a00 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
  814a00:	defff904 	addi	sp,sp,-28
  814a04:	df000615 	stw	fp,24(sp)
  814a08:	df000604 	addi	fp,sp,24
  814a0c:	e13ffb15 	stw	r4,-20(fp)
  814a10:	e1bffd15 	stw	r6,-12(fp)
  814a14:	e1fffe15 	stw	r7,-8(fp)
  814a18:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  814a1c:	e0bffb17 	ldw	r2,-20(fp)
  814a20:	10c00c17 	ldw	r3,48(r2)
  814a24:	e0bffd17 	ldw	r2,-12(fp)
  814a28:	10c0042e 	bgeu	r2,r3,814a3c <alt_up_char_buffer_draw+0x3c>
  814a2c:	e0bffb17 	ldw	r2,-20(fp)
  814a30:	10c00d17 	ldw	r3,52(r2)
  814a34:	e0bffe17 	ldw	r2,-8(fp)
  814a38:	10c00336 	bltu	r2,r3,814a48 <alt_up_char_buffer_draw+0x48>
		return -1;
  814a3c:	00bfffc4 	movi	r2,-1
  814a40:	e0bfff15 	stw	r2,-4(fp)
  814a44:	00001d06 	br	814abc <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
  814a48:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
  814a4c:	e0bffb17 	ldw	r2,-20(fp)
  814a50:	10c00f17 	ldw	r3,60(r2)
  814a54:	e0bffd17 	ldw	r2,-12(fp)
  814a58:	1886703a 	and	r3,r3,r2
  814a5c:	e0bffb17 	ldw	r2,-20(fp)
  814a60:	10800e17 	ldw	r2,56(r2)
  814a64:	1886983a 	sll	r3,r3,r2
  814a68:	e0bffa17 	ldw	r2,-24(fp)
  814a6c:	10c4b03a 	or	r2,r2,r3
  814a70:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
  814a74:	e0bffb17 	ldw	r2,-20(fp)
  814a78:	10c01117 	ldw	r3,68(r2)
  814a7c:	e0bffe17 	ldw	r2,-8(fp)
  814a80:	1886703a 	and	r3,r3,r2
  814a84:	e0bffb17 	ldw	r2,-20(fp)
  814a88:	10801017 	ldw	r2,64(r2)
  814a8c:	1886983a 	sll	r3,r3,r2
  814a90:	e0bffa17 	ldw	r2,-24(fp)
  814a94:	10c4b03a 	or	r2,r2,r3
  814a98:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
  814a9c:	e0bffb17 	ldw	r2,-20(fp)
  814aa0:	10800b17 	ldw	r2,44(r2)
  814aa4:	1007883a 	mov	r3,r2
  814aa8:	e0bffa17 	ldw	r2,-24(fp)
  814aac:	1885883a 	add	r2,r3,r2
  814ab0:	e0fffc03 	ldbu	r3,-16(fp)
  814ab4:	10c00025 	stbio	r3,0(r2)

	return 0;
  814ab8:	e03fff15 	stw	zero,-4(fp)
  814abc:	e0bfff17 	ldw	r2,-4(fp)
}
  814ac0:	e037883a 	mov	sp,fp
  814ac4:	df000017 	ldw	fp,0(sp)
  814ac8:	dec00104 	addi	sp,sp,4
  814acc:	f800283a 	ret

00814ad0 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
  814ad0:	defff904 	addi	sp,sp,-28
  814ad4:	df000615 	stw	fp,24(sp)
  814ad8:	df000604 	addi	fp,sp,24
  814adc:	e13ffb15 	stw	r4,-20(fp)
  814ae0:	e17ffc15 	stw	r5,-16(fp)
  814ae4:	e1bffd15 	stw	r6,-12(fp)
  814ae8:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  814aec:	e0bffb17 	ldw	r2,-20(fp)
  814af0:	10c00c17 	ldw	r3,48(r2)
  814af4:	e0bffd17 	ldw	r2,-12(fp)
  814af8:	10c0042e 	bgeu	r2,r3,814b0c <alt_up_char_buffer_string+0x3c>
  814afc:	e0bffb17 	ldw	r2,-20(fp)
  814b00:	10c00d17 	ldw	r3,52(r2)
  814b04:	e0bffe17 	ldw	r2,-8(fp)
  814b08:	10c00336 	bltu	r2,r3,814b18 <alt_up_char_buffer_string+0x48>
		return -1;
  814b0c:	00bfffc4 	movi	r2,-1
  814b10:	e0bfff15 	stw	r2,-4(fp)
  814b14:	00002e06 	br	814bd0 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
  814b18:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
  814b1c:	e0bffb17 	ldw	r2,-20(fp)
  814b20:	10801017 	ldw	r2,64(r2)
  814b24:	1007883a 	mov	r3,r2
  814b28:	e0bffe17 	ldw	r2,-8(fp)
  814b2c:	10c6983a 	sll	r3,r2,r3
  814b30:	e0bffd17 	ldw	r2,-12(fp)
  814b34:	1885883a 	add	r2,r3,r2
  814b38:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
  814b3c:	00001c06 	br	814bb0 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
  814b40:	e0bffb17 	ldw	r2,-20(fp)
  814b44:	10800b17 	ldw	r2,44(r2)
  814b48:	1007883a 	mov	r3,r2
  814b4c:	e0bffa17 	ldw	r2,-24(fp)
  814b50:	1889883a 	add	r4,r3,r2
  814b54:	e0bffc17 	ldw	r2,-16(fp)
  814b58:	10800003 	ldbu	r2,0(r2)
  814b5c:	10c03fcc 	andi	r3,r2,255
  814b60:	18c0201c 	xori	r3,r3,128
  814b64:	18ffe004 	addi	r3,r3,-128
  814b68:	2005883a 	mov	r2,r4
  814b6c:	10c00025 	stbio	r3,0(r2)
		++ptr;
  814b70:	e0bffc17 	ldw	r2,-16(fp)
  814b74:	10800044 	addi	r2,r2,1
  814b78:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
  814b7c:	e0bffd17 	ldw	r2,-12(fp)
  814b80:	10800044 	addi	r2,r2,1
  814b84:	e0bffd15 	stw	r2,-12(fp)
  814b88:	e0bffb17 	ldw	r2,-20(fp)
  814b8c:	10c00c17 	ldw	r3,48(r2)
  814b90:	e0bffd17 	ldw	r2,-12(fp)
  814b94:	10c00336 	bltu	r2,r3,814ba4 <alt_up_char_buffer_string+0xd4>
			return -1;
  814b98:	00bfffc4 	movi	r2,-1
  814b9c:	e0bfff15 	stw	r2,-4(fp)
  814ba0:	00000b06 	br	814bd0 <alt_up_char_buffer_string+0x100>
		++offset;
  814ba4:	e0bffa17 	ldw	r2,-24(fp)
  814ba8:	10800044 	addi	r2,r2,1
  814bac:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
  814bb0:	e0bffc17 	ldw	r2,-16(fp)
  814bb4:	10800003 	ldbu	r2,0(r2)
  814bb8:	10803fcc 	andi	r2,r2,255
  814bbc:	1080201c 	xori	r2,r2,128
  814bc0:	10bfe004 	addi	r2,r2,-128
  814bc4:	1004c03a 	cmpne	r2,r2,zero
  814bc8:	103fdd1e 	bne	r2,zero,814b40 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
  814bcc:	e03fff15 	stw	zero,-4(fp)
  814bd0:	e0bfff17 	ldw	r2,-4(fp)
}
  814bd4:	e037883a 	mov	sp,fp
  814bd8:	df000017 	ldw	fp,0(sp)
  814bdc:	dec00104 	addi	sp,sp,4
  814be0:	f800283a 	ret

00814be4 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
  814be4:	defffe04 	addi	sp,sp,-8
  814be8:	df000115 	stw	fp,4(sp)
  814bec:	df000104 	addi	fp,sp,4
  814bf0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
  814bf4:	e0bfff17 	ldw	r2,-4(fp)
  814bf8:	10800a17 	ldw	r2,40(r2)
  814bfc:	10800084 	addi	r2,r2,2
  814c00:	1007883a 	mov	r3,r2
  814c04:	00800044 	movi	r2,1
  814c08:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
  814c0c:	e0bfff17 	ldw	r2,-4(fp)
  814c10:	10800a17 	ldw	r2,40(r2)
  814c14:	10800084 	addi	r2,r2,2
  814c18:	10800023 	ldbuio	r2,0(r2)
  814c1c:	1080004c 	andi	r2,r2,1
  814c20:	10803fcc 	andi	r2,r2,255
  814c24:	1004c03a 	cmpne	r2,r2,zero
  814c28:	103ff81e 	bne	r2,zero,814c0c <alt_up_char_buffer_clear+0x28>
	return 0;
  814c2c:	0005883a 	mov	r2,zero
}
  814c30:	e037883a 	mov	sp,fp
  814c34:	df000017 	ldw	fp,0(sp)
  814c38:	dec00104 	addi	sp,sp,4
  814c3c:	f800283a 	ret

00814c40 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  814c40:	defffc04 	addi	sp,sp,-16
  814c44:	dfc00315 	stw	ra,12(sp)
  814c48:	df000215 	stw	fp,8(sp)
  814c4c:	df000204 	addi	fp,sp,8
  814c50:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  814c54:	e13fff17 	ldw	r4,-4(fp)
  814c58:	014020b4 	movhi	r5,130
  814c5c:	29784304 	addi	r5,r5,-7924
  814c60:	081ac2c0 	call	81ac2c <alt_find_dev>
  814c64:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  814c68:	e0bffe17 	ldw	r2,-8(fp)
}
  814c6c:	e037883a 	mov	sp,fp
  814c70:	dfc00117 	ldw	ra,4(sp)
  814c74:	df000017 	ldw	fp,0(sp)
  814c78:	dec00204 	addi	sp,sp,8
  814c7c:	f800283a 	ret

00814c80 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  814c80:	defff904 	addi	sp,sp,-28
  814c84:	df000615 	stw	fp,24(sp)
  814c88:	df000604 	addi	fp,sp,24
  814c8c:	e13ffb15 	stw	r4,-20(fp)
  814c90:	e17ffc15 	stw	r5,-16(fp)
  814c94:	e1bffd15 	stw	r6,-12(fp)
  814c98:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  814c9c:	e0bffb17 	ldw	r2,-20(fp)
  814ca0:	10c00f17 	ldw	r3,60(r2)
  814ca4:	e0bffd17 	ldw	r2,-12(fp)
  814ca8:	10c0042e 	bgeu	r2,r3,814cbc <alt_up_pixel_buffer_dma_draw+0x3c>
  814cac:	e0bffb17 	ldw	r2,-20(fp)
  814cb0:	10c01017 	ldw	r3,64(r2)
  814cb4:	e0bffe17 	ldw	r2,-8(fp)
  814cb8:	10c00336 	bltu	r2,r3,814cc8 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
  814cbc:	00bfffc4 	movi	r2,-1
  814cc0:	e0bfff15 	stw	r2,-4(fp)
  814cc4:	00005106 	br	814e0c <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
  814cc8:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  814ccc:	e0bffb17 	ldw	r2,-20(fp)
  814cd0:	10800d17 	ldw	r2,52(r2)
  814cd4:	1004c03a 	cmpne	r2,r2,zero
  814cd8:	1000151e 	bne	r2,zero,814d30 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  814cdc:	e0bffb17 	ldw	r2,-20(fp)
  814ce0:	10c01217 	ldw	r3,72(r2)
  814ce4:	e0bffd17 	ldw	r2,-12(fp)
  814ce8:	1886703a 	and	r3,r3,r2
  814cec:	e0bffb17 	ldw	r2,-20(fp)
  814cf0:	10801117 	ldw	r2,68(r2)
  814cf4:	1886983a 	sll	r3,r3,r2
  814cf8:	e0bffa17 	ldw	r2,-24(fp)
  814cfc:	10c4b03a 	or	r2,r2,r3
  814d00:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  814d04:	e0bffb17 	ldw	r2,-20(fp)
  814d08:	10c01417 	ldw	r3,80(r2)
  814d0c:	e0bffe17 	ldw	r2,-8(fp)
  814d10:	1886703a 	and	r3,r3,r2
  814d14:	e0bffb17 	ldw	r2,-20(fp)
  814d18:	10801317 	ldw	r2,76(r2)
  814d1c:	1886983a 	sll	r3,r3,r2
  814d20:	e0bffa17 	ldw	r2,-24(fp)
  814d24:	10c4b03a 	or	r2,r2,r3
  814d28:	e0bffa15 	stw	r2,-24(fp)
  814d2c:	00001706 	br	814d8c <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  814d30:	e0bffb17 	ldw	r2,-20(fp)
  814d34:	10c01217 	ldw	r3,72(r2)
  814d38:	e0bffd17 	ldw	r2,-12(fp)
  814d3c:	1886703a 	and	r3,r3,r2
  814d40:	e0bffb17 	ldw	r2,-20(fp)
  814d44:	10801117 	ldw	r2,68(r2)
  814d48:	1886983a 	sll	r3,r3,r2
  814d4c:	e0bffa17 	ldw	r2,-24(fp)
  814d50:	10c5883a 	add	r2,r2,r3
  814d54:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  814d58:	e0bffb17 	ldw	r2,-20(fp)
  814d5c:	10c01417 	ldw	r3,80(r2)
  814d60:	e0bffe17 	ldw	r2,-8(fp)
  814d64:	1886703a 	and	r3,r3,r2
  814d68:	e0bffb17 	ldw	r2,-20(fp)
  814d6c:	10800f17 	ldw	r2,60(r2)
  814d70:	1887383a 	mul	r3,r3,r2
  814d74:	e0bffb17 	ldw	r2,-20(fp)
  814d78:	10801117 	ldw	r2,68(r2)
  814d7c:	1886983a 	sll	r3,r3,r2
  814d80:	e0bffa17 	ldw	r2,-24(fp)
  814d84:	10c5883a 	add	r2,r2,r3
  814d88:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  814d8c:	e0bffb17 	ldw	r2,-20(fp)
  814d90:	10800e17 	ldw	r2,56(r2)
  814d94:	10800058 	cmpnei	r2,r2,1
  814d98:	1000081e 	bne	r2,zero,814dbc <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  814d9c:	e0bffb17 	ldw	r2,-20(fp)
  814da0:	10800c17 	ldw	r2,48(r2)
  814da4:	1007883a 	mov	r3,r2
  814da8:	e0bffa17 	ldw	r2,-24(fp)
  814dac:	1885883a 	add	r2,r3,r2
  814db0:	e0fffc17 	ldw	r3,-16(fp)
  814db4:	10c00025 	stbio	r3,0(r2)
  814db8:	00001306 	br	814e08 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  814dbc:	e0bffb17 	ldw	r2,-20(fp)
  814dc0:	10800e17 	ldw	r2,56(r2)
  814dc4:	10800098 	cmpnei	r2,r2,2
  814dc8:	1000081e 	bne	r2,zero,814dec <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  814dcc:	e0bffb17 	ldw	r2,-20(fp)
  814dd0:	10800c17 	ldw	r2,48(r2)
  814dd4:	1007883a 	mov	r3,r2
  814dd8:	e0bffa17 	ldw	r2,-24(fp)
  814ddc:	1885883a 	add	r2,r3,r2
  814de0:	e0fffc17 	ldw	r3,-16(fp)
  814de4:	10c0002d 	sthio	r3,0(r2)
  814de8:	00000706 	br	814e08 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  814dec:	e0bffb17 	ldw	r2,-20(fp)
  814df0:	10800c17 	ldw	r2,48(r2)
  814df4:	1007883a 	mov	r3,r2
  814df8:	e0bffa17 	ldw	r2,-24(fp)
  814dfc:	1885883a 	add	r2,r3,r2
  814e00:	e0fffc17 	ldw	r3,-16(fp)
  814e04:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  814e08:	e03fff15 	stw	zero,-4(fp)
  814e0c:	e0bfff17 	ldw	r2,-4(fp)
}
  814e10:	e037883a 	mov	sp,fp
  814e14:	df000017 	ldw	fp,0(sp)
  814e18:	dec00104 	addi	sp,sp,4
  814e1c:	f800283a 	ret

00814e20 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  814e20:	defffd04 	addi	sp,sp,-12
  814e24:	df000215 	stw	fp,8(sp)
  814e28:	df000204 	addi	fp,sp,8
  814e2c:	e13ffe15 	stw	r4,-8(fp)
  814e30:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  814e34:	e0bffe17 	ldw	r2,-8(fp)
  814e38:	10800a17 	ldw	r2,40(r2)
  814e3c:	10800104 	addi	r2,r2,4
  814e40:	e0ffff17 	ldw	r3,-4(fp)
  814e44:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  814e48:	e0bffe17 	ldw	r2,-8(fp)
  814e4c:	10800a17 	ldw	r2,40(r2)
  814e50:	10800104 	addi	r2,r2,4
  814e54:	10800037 	ldwio	r2,0(r2)
  814e58:	1007883a 	mov	r3,r2
  814e5c:	e0bffe17 	ldw	r2,-8(fp)
  814e60:	10c00c15 	stw	r3,48(r2)
	return 0;
  814e64:	0005883a 	mov	r2,zero
}
  814e68:	e037883a 	mov	sp,fp
  814e6c:	df000017 	ldw	fp,0(sp)
  814e70:	dec00104 	addi	sp,sp,4
  814e74:	f800283a 	ret

00814e78 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  814e78:	defffe04 	addi	sp,sp,-8
  814e7c:	df000115 	stw	fp,4(sp)
  814e80:	df000104 	addi	fp,sp,4
  814e84:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  814e88:	e0bfff17 	ldw	r2,-4(fp)
  814e8c:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  814e90:	e0bfff17 	ldw	r2,-4(fp)
  814e94:	10800a17 	ldw	r2,40(r2)
  814e98:	1007883a 	mov	r3,r2
  814e9c:	00800044 	movi	r2,1
  814ea0:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  814ea4:	e0bfff17 	ldw	r2,-4(fp)
  814ea8:	10c00b17 	ldw	r3,44(r2)
  814eac:	e0bfff17 	ldw	r2,-4(fp)
  814eb0:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  814eb4:	e0bfff17 	ldw	r2,-4(fp)
  814eb8:	11000b15 	stw	r4,44(r2)
	return 0;
  814ebc:	0005883a 	mov	r2,zero
}
  814ec0:	e037883a 	mov	sp,fp
  814ec4:	df000017 	ldw	fp,0(sp)
  814ec8:	dec00104 	addi	sp,sp,4
  814ecc:	f800283a 	ret

00814ed0 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  814ed0:	defffe04 	addi	sp,sp,-8
  814ed4:	df000115 	stw	fp,4(sp)
  814ed8:	df000104 	addi	fp,sp,4
  814edc:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  814ee0:	e0bfff17 	ldw	r2,-4(fp)
  814ee4:	10800a17 	ldw	r2,40(r2)
  814ee8:	10800304 	addi	r2,r2,12
  814eec:	10800037 	ldwio	r2,0(r2)
  814ef0:	1080004c 	andi	r2,r2,1
}
  814ef4:	e037883a 	mov	sp,fp
  814ef8:	df000017 	ldw	fp,0(sp)
  814efc:	dec00104 	addi	sp,sp,4
  814f00:	f800283a 	ret

00814f04 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  814f04:	defff604 	addi	sp,sp,-40
  814f08:	df000915 	stw	fp,36(sp)
  814f0c:	df000904 	addi	fp,sp,36
  814f10:	e13ff715 	stw	r4,-36(fp)
  814f14:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  814f18:	e0bff817 	ldw	r2,-32(fp)
  814f1c:	10800058 	cmpnei	r2,r2,1
  814f20:	1000041e 	bne	r2,zero,814f34 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  814f24:	e0bff717 	ldw	r2,-36(fp)
  814f28:	10800c17 	ldw	r2,48(r2)
  814f2c:	e0bfff15 	stw	r2,-4(fp)
  814f30:	00000306 	br	814f40 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  814f34:	e0bff717 	ldw	r2,-36(fp)
  814f38:	10800b17 	ldw	r2,44(r2)
  814f3c:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  814f40:	e0bff717 	ldw	r2,-36(fp)
  814f44:	10800f17 	ldw	r2,60(r2)
  814f48:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  814f4c:	e0bff717 	ldw	r2,-36(fp)
  814f50:	10800e17 	ldw	r2,56(r2)
  814f54:	10800098 	cmpnei	r2,r2,2
  814f58:	1000051e 	bne	r2,zero,814f70 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
  814f5c:	e0fffe17 	ldw	r3,-8(fp)
  814f60:	e0fffe17 	ldw	r3,-8(fp)
  814f64:	18c5883a 	add	r2,r3,r3
  814f68:	e0bffe15 	stw	r2,-8(fp)
  814f6c:	00000506 	br	814f84 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
  814f70:	e13ffe17 	ldw	r4,-8(fp)
  814f74:	e13ffe17 	ldw	r4,-8(fp)
  814f78:	2105883a 	add	r2,r4,r4
  814f7c:	1085883a 	add	r2,r2,r2
  814f80:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  814f84:	e0bff717 	ldw	r2,-36(fp)
  814f88:	10801017 	ldw	r2,64(r2)
  814f8c:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  814f90:	e0bff717 	ldw	r2,-36(fp)
  814f94:	10800d17 	ldw	r2,52(r2)
  814f98:	1004c03a 	cmpne	r2,r2,zero
  814f9c:	10001e1e 	bne	r2,zero,815018 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  814fa0:	e0bff717 	ldw	r2,-36(fp)
  814fa4:	10801317 	ldw	r2,76(r2)
  814fa8:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  814fac:	e03ffb15 	stw	zero,-20(fp)
  814fb0:	00001506 	br	815008 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
  814fb4:	e03ffc15 	stw	zero,-16(fp)
  814fb8:	00000706 	br	814fd8 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
  814fbc:	e0ffff17 	ldw	r3,-4(fp)
  814fc0:	e0bffc17 	ldw	r2,-16(fp)
  814fc4:	1885883a 	add	r2,r3,r2
  814fc8:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  814fcc:	e0bffc17 	ldw	r2,-16(fp)
  814fd0:	10800104 	addi	r2,r2,4
  814fd4:	e0bffc15 	stw	r2,-16(fp)
  814fd8:	e0fffc17 	ldw	r3,-16(fp)
  814fdc:	e13ffe17 	ldw	r4,-8(fp)
  814fe0:	193ff636 	bltu	r3,r4,814fbc <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  814fe4:	e0fffa17 	ldw	r3,-24(fp)
  814fe8:	00800044 	movi	r2,1
  814fec:	10c4983a 	sll	r2,r2,r3
  814ff0:	e0ffff17 	ldw	r3,-4(fp)
  814ff4:	1887883a 	add	r3,r3,r2
  814ff8:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  814ffc:	e13ffb17 	ldw	r4,-20(fp)
  815000:	21000044 	addi	r4,r4,1
  815004:	e13ffb15 	stw	r4,-20(fp)
  815008:	e0bffb17 	ldw	r2,-20(fp)
  81500c:	e0fffd17 	ldw	r3,-12(fp)
  815010:	10ffe836 	bltu	r2,r3,814fb4 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
  815014:	00001006 	br	815058 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  815018:	e13ffd17 	ldw	r4,-12(fp)
  81501c:	e0bffe17 	ldw	r2,-8(fp)
  815020:	2089383a 	mul	r4,r4,r2
  815024:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  815028:	e03ff915 	stw	zero,-28(fp)
  81502c:	00000706 	br	81504c <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
  815030:	e0ffff17 	ldw	r3,-4(fp)
  815034:	e0bff917 	ldw	r2,-28(fp)
  815038:	1885883a 	add	r2,r3,r2
  81503c:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  815040:	e0fff917 	ldw	r3,-28(fp)
  815044:	18c00104 	addi	r3,r3,4
  815048:	e0fff915 	stw	r3,-28(fp)
  81504c:	e0bff917 	ldw	r2,-28(fp)
  815050:	e13ffd17 	ldw	r4,-12(fp)
  815054:	113ff636 	bltu	r2,r4,815030 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  815058:	e037883a 	mov	sp,fp
  81505c:	df000017 	ldw	fp,0(sp)
  815060:	dec00104 	addi	sp,sp,4
  815064:	f800283a 	ret

00815068 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  815068:	deffed04 	addi	sp,sp,-76
  81506c:	df001215 	stw	fp,72(sp)
  815070:	df001204 	addi	fp,sp,72
  815074:	e13fee15 	stw	r4,-72(fp)
  815078:	e17fef15 	stw	r5,-68(fp)
  81507c:	e1bff015 	stw	r6,-64(fp)
  815080:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  815084:	e0bfee17 	ldw	r2,-72(fp)
  815088:	10800f17 	ldw	r2,60(r2)
  81508c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  815090:	e0bfee17 	ldw	r2,-72(fp)
  815094:	10801017 	ldw	r2,64(r2)
  815098:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  81509c:	e0bfef17 	ldw	r2,-68(fp)
  8150a0:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  8150a4:	e0fff117 	ldw	r3,-60(fp)
  8150a8:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  8150ac:	e13ff017 	ldw	r4,-64(fp)
  8150b0:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  8150b4:	e0800117 	ldw	r2,4(fp)
  8150b8:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  8150bc:	e0c00217 	ldw	r3,8(fp)
  8150c0:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  8150c4:	e13ffa17 	ldw	r4,-24(fp)
  8150c8:	e0bffb17 	ldw	r2,-20(fp)
  8150cc:	2080062e 	bgeu	r4,r2,8150e8 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
  8150d0:	e0fffb17 	ldw	r3,-20(fp)
  8150d4:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  8150d8:	e13ffa17 	ldw	r4,-24(fp)
  8150dc:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  8150e0:	e0bffc17 	ldw	r2,-16(fp)
  8150e4:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  8150e8:	e0fff817 	ldw	r3,-32(fp)
  8150ec:	e13ff917 	ldw	r4,-28(fp)
  8150f0:	1900062e 	bgeu	r3,r4,81510c <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
  8150f4:	e0bff917 	ldw	r2,-28(fp)
  8150f8:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  8150fc:	e0fff817 	ldw	r3,-32(fp)
  815100:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  815104:	e13ffc17 	ldw	r4,-16(fp)
  815108:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  81510c:	e0bffb17 	ldw	r2,-20(fp)
  815110:	e0fffe17 	ldw	r3,-8(fp)
  815114:	10c10d2e 	bgeu	r2,r3,81554c <alt_up_pixel_buffer_dma_draw_box+0x4e4>
  815118:	e13ff917 	ldw	r4,-28(fp)
  81511c:	e0bffd17 	ldw	r2,-12(fp)
  815120:	20800136 	bltu	r4,r2,815128 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  815124:	00010906 	br	81554c <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  815128:	e0fffa17 	ldw	r3,-24(fp)
  81512c:	e13ffe17 	ldw	r4,-8(fp)
  815130:	19000336 	bltu	r3,r4,815140 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
  815134:	e0bffe17 	ldw	r2,-8(fp)
  815138:	10bfffc4 	addi	r2,r2,-1
  81513c:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  815140:	e0fff817 	ldw	r3,-32(fp)
  815144:	e13ffd17 	ldw	r4,-12(fp)
  815148:	19000336 	bltu	r3,r4,815158 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
  81514c:	e0bffd17 	ldw	r2,-12(fp)
  815150:	10bfffc4 	addi	r2,r2,-1
  815154:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  815158:	e0800317 	ldw	r2,12(fp)
  81515c:	10800058 	cmpnei	r2,r2,1
  815160:	1000041e 	bne	r2,zero,815174 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
  815164:	e0bfee17 	ldw	r2,-72(fp)
  815168:	10800c17 	ldw	r2,48(r2)
  81516c:	e0bfff15 	stw	r2,-4(fp)
  815170:	00000306 	br	815180 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
  815174:	e0bfee17 	ldw	r2,-72(fp)
  815178:	10800b17 	ldw	r2,44(r2)
  81517c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  815180:	e0bfee17 	ldw	r2,-72(fp)
  815184:	10800d17 	ldw	r2,52(r2)
  815188:	1004c03a 	cmpne	r2,r2,zero
  81518c:	1000721e 	bne	r2,zero,815358 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  815190:	e0bfee17 	ldw	r2,-72(fp)
  815194:	10801317 	ldw	r2,76(r2)
  815198:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  81519c:	e0bff417 	ldw	r2,-48(fp)
  8151a0:	e0fff917 	ldw	r3,-28(fp)
  8151a4:	1884983a 	sll	r2,r3,r2
  8151a8:	e13fff17 	ldw	r4,-4(fp)
  8151ac:	2089883a 	add	r4,r4,r2
  8151b0:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  8151b4:	e0bfee17 	ldw	r2,-72(fp)
  8151b8:	10800e17 	ldw	r2,56(r2)
  8151bc:	10800058 	cmpnei	r2,r2,1
  8151c0:	10001e1e 	bne	r2,zero,81523c <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
  8151c4:	e0bff917 	ldw	r2,-28(fp)
  8151c8:	e0bff515 	stw	r2,-44(fp)
  8151cc:	00001706 	br	81522c <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
  8151d0:	e0fffb17 	ldw	r3,-20(fp)
  8151d4:	e0fff615 	stw	r3,-40(fp)
  8151d8:	00000806 	br	8151fc <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
  8151dc:	e0ffff17 	ldw	r3,-4(fp)
  8151e0:	e0bff617 	ldw	r2,-40(fp)
  8151e4:	1885883a 	add	r2,r3,r2
  8151e8:	e0fff717 	ldw	r3,-36(fp)
  8151ec:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  8151f0:	e13ff617 	ldw	r4,-40(fp)
  8151f4:	21000044 	addi	r4,r4,1
  8151f8:	e13ff615 	stw	r4,-40(fp)
  8151fc:	e0bffa17 	ldw	r2,-24(fp)
  815200:	e0fff617 	ldw	r3,-40(fp)
  815204:	10fff52e 	bgeu	r2,r3,8151dc <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  815208:	e0fff417 	ldw	r3,-48(fp)
  81520c:	00800044 	movi	r2,1
  815210:	10c4983a 	sll	r2,r2,r3
  815214:	e13fff17 	ldw	r4,-4(fp)
  815218:	2089883a 	add	r4,r4,r2
  81521c:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  815220:	e0bff517 	ldw	r2,-44(fp)
  815224:	10800044 	addi	r2,r2,1
  815228:	e0bff515 	stw	r2,-44(fp)
  81522c:	e0fff817 	ldw	r3,-32(fp)
  815230:	e13ff517 	ldw	r4,-44(fp)
  815234:	193fe62e 	bgeu	r3,r4,8151d0 <alt_up_pixel_buffer_dma_draw_box+0x168>
  815238:	0000c406 	br	81554c <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  81523c:	e0bfee17 	ldw	r2,-72(fp)
  815240:	10800e17 	ldw	r2,56(r2)
  815244:	10800098 	cmpnei	r2,r2,2
  815248:	1000211e 	bne	r2,zero,8152d0 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
  81524c:	e0bff917 	ldw	r2,-28(fp)
  815250:	e0bff515 	stw	r2,-44(fp)
  815254:	00001a06 	br	8152c0 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
  815258:	e0fffb17 	ldw	r3,-20(fp)
  81525c:	e0fff615 	stw	r3,-40(fp)
  815260:	00000b06 	br	815290 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  815264:	e13ff617 	ldw	r4,-40(fp)
  815268:	e13ff617 	ldw	r4,-40(fp)
  81526c:	2105883a 	add	r2,r4,r4
  815270:	1007883a 	mov	r3,r2
  815274:	e0bfff17 	ldw	r2,-4(fp)
  815278:	1885883a 	add	r2,r3,r2
  81527c:	e0fff717 	ldw	r3,-36(fp)
  815280:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  815284:	e0bff617 	ldw	r2,-40(fp)
  815288:	10800044 	addi	r2,r2,1
  81528c:	e0bff615 	stw	r2,-40(fp)
  815290:	e0fffa17 	ldw	r3,-24(fp)
  815294:	e13ff617 	ldw	r4,-40(fp)
  815298:	193ff22e 	bgeu	r3,r4,815264 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  81529c:	e0fff417 	ldw	r3,-48(fp)
  8152a0:	00800044 	movi	r2,1
  8152a4:	10c4983a 	sll	r2,r2,r3
  8152a8:	e0ffff17 	ldw	r3,-4(fp)
  8152ac:	1887883a 	add	r3,r3,r2
  8152b0:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  8152b4:	e13ff517 	ldw	r4,-44(fp)
  8152b8:	21000044 	addi	r4,r4,1
  8152bc:	e13ff515 	stw	r4,-44(fp)
  8152c0:	e0bff817 	ldw	r2,-32(fp)
  8152c4:	e0fff517 	ldw	r3,-44(fp)
  8152c8:	10ffe32e 	bgeu	r2,r3,815258 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
  8152cc:	00009f06 	br	81554c <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  8152d0:	e13ff917 	ldw	r4,-28(fp)
  8152d4:	e13ff515 	stw	r4,-44(fp)
  8152d8:	00001b06 	br	815348 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
  8152dc:	e0bffb17 	ldw	r2,-20(fp)
  8152e0:	e0bff615 	stw	r2,-40(fp)
  8152e4:	00000c06 	br	815318 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  8152e8:	e0fff617 	ldw	r3,-40(fp)
  8152ec:	e0fff617 	ldw	r3,-40(fp)
  8152f0:	18c5883a 	add	r2,r3,r3
  8152f4:	1085883a 	add	r2,r2,r2
  8152f8:	1007883a 	mov	r3,r2
  8152fc:	e0bfff17 	ldw	r2,-4(fp)
  815300:	1885883a 	add	r2,r3,r2
  815304:	e0fff717 	ldw	r3,-36(fp)
  815308:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  81530c:	e13ff617 	ldw	r4,-40(fp)
  815310:	21000044 	addi	r4,r4,1
  815314:	e13ff615 	stw	r4,-40(fp)
  815318:	e0bffa17 	ldw	r2,-24(fp)
  81531c:	e0fff617 	ldw	r3,-40(fp)
  815320:	10fff12e 	bgeu	r2,r3,8152e8 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  815324:	e0fff417 	ldw	r3,-48(fp)
  815328:	00800044 	movi	r2,1
  81532c:	10c4983a 	sll	r2,r2,r3
  815330:	e13fff17 	ldw	r4,-4(fp)
  815334:	2089883a 	add	r4,r4,r2
  815338:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  81533c:	e0bff517 	ldw	r2,-44(fp)
  815340:	10800044 	addi	r2,r2,1
  815344:	e0bff515 	stw	r2,-44(fp)
  815348:	e0fff817 	ldw	r3,-32(fp)
  81534c:	e13ff517 	ldw	r4,-44(fp)
  815350:	193fe22e 	bgeu	r3,r4,8152dc <alt_up_pixel_buffer_dma_draw_box+0x274>
  815354:	00007d06 	br	81554c <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  815358:	e0bfee17 	ldw	r2,-72(fp)
  81535c:	10800e17 	ldw	r2,56(r2)
  815360:	10800058 	cmpnei	r2,r2,1
  815364:	1000221e 	bne	r2,zero,8153f0 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
  815368:	e0fff917 	ldw	r3,-28(fp)
  81536c:	e13ffe17 	ldw	r4,-8(fp)
  815370:	1905383a 	mul	r2,r3,r4
  815374:	e0ffff17 	ldw	r3,-4(fp)
  815378:	1887883a 	add	r3,r3,r2
  81537c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  815380:	e13ff917 	ldw	r4,-28(fp)
  815384:	e13ff215 	stw	r4,-56(fp)
  815388:	00001506 	br	8153e0 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
  81538c:	e0bffb17 	ldw	r2,-20(fp)
  815390:	e0bff315 	stw	r2,-52(fp)
  815394:	00000806 	br	8153b8 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
  815398:	e0ffff17 	ldw	r3,-4(fp)
  81539c:	e0bff317 	ldw	r2,-52(fp)
  8153a0:	1885883a 	add	r2,r3,r2
  8153a4:	e0fff717 	ldw	r3,-36(fp)
  8153a8:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  8153ac:	e0fff317 	ldw	r3,-52(fp)
  8153b0:	18c00044 	addi	r3,r3,1
  8153b4:	e0fff315 	stw	r3,-52(fp)
  8153b8:	e13ffa17 	ldw	r4,-24(fp)
  8153bc:	e0bff317 	ldw	r2,-52(fp)
  8153c0:	20bff52e 	bgeu	r4,r2,815398 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  8153c4:	e0ffff17 	ldw	r3,-4(fp)
  8153c8:	e13ffe17 	ldw	r4,-8(fp)
  8153cc:	1907883a 	add	r3,r3,r4
  8153d0:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  8153d4:	e0bff217 	ldw	r2,-56(fp)
  8153d8:	10800044 	addi	r2,r2,1
  8153dc:	e0bff215 	stw	r2,-56(fp)
  8153e0:	e0fff817 	ldw	r3,-32(fp)
  8153e4:	e13ff217 	ldw	r4,-56(fp)
  8153e8:	193fe82e 	bgeu	r3,r4,81538c <alt_up_pixel_buffer_dma_draw_box+0x324>
  8153ec:	00005706 	br	81554c <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  8153f0:	e0bfee17 	ldw	r2,-72(fp)
  8153f4:	10800e17 	ldw	r2,56(r2)
  8153f8:	10800098 	cmpnei	r2,r2,2
  8153fc:	1000291e 	bne	r2,zero,8154a4 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
  815400:	e0fffe17 	ldw	r3,-8(fp)
  815404:	e0fffe17 	ldw	r3,-8(fp)
  815408:	18c5883a 	add	r2,r3,r3
  81540c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  815410:	e13ff917 	ldw	r4,-28(fp)
  815414:	e0fffe17 	ldw	r3,-8(fp)
  815418:	20c5383a 	mul	r2,r4,r3
  81541c:	e13fff17 	ldw	r4,-4(fp)
  815420:	2089883a 	add	r4,r4,r2
  815424:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  815428:	e0bff917 	ldw	r2,-28(fp)
  81542c:	e0bff215 	stw	r2,-56(fp)
  815430:	00001806 	br	815494 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
  815434:	e0fffb17 	ldw	r3,-20(fp)
  815438:	e0fff315 	stw	r3,-52(fp)
  81543c:	00000b06 	br	81546c <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  815440:	e13ff317 	ldw	r4,-52(fp)
  815444:	e13ff317 	ldw	r4,-52(fp)
  815448:	2105883a 	add	r2,r4,r4
  81544c:	1007883a 	mov	r3,r2
  815450:	e0bfff17 	ldw	r2,-4(fp)
  815454:	1885883a 	add	r2,r3,r2
  815458:	e0fff717 	ldw	r3,-36(fp)
  81545c:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  815460:	e0bff317 	ldw	r2,-52(fp)
  815464:	10800044 	addi	r2,r2,1
  815468:	e0bff315 	stw	r2,-52(fp)
  81546c:	e0fffa17 	ldw	r3,-24(fp)
  815470:	e13ff317 	ldw	r4,-52(fp)
  815474:	193ff22e 	bgeu	r3,r4,815440 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  815478:	e0bfff17 	ldw	r2,-4(fp)
  81547c:	e0fffe17 	ldw	r3,-8(fp)
  815480:	10c5883a 	add	r2,r2,r3
  815484:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  815488:	e13ff217 	ldw	r4,-56(fp)
  81548c:	21000044 	addi	r4,r4,1
  815490:	e13ff215 	stw	r4,-56(fp)
  815494:	e0bff817 	ldw	r2,-32(fp)
  815498:	e0fff217 	ldw	r3,-56(fp)
  81549c:	10ffe52e 	bgeu	r2,r3,815434 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
  8154a0:	00002a06 	br	81554c <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  8154a4:	e13ffe17 	ldw	r4,-8(fp)
  8154a8:	e13ffe17 	ldw	r4,-8(fp)
  8154ac:	2105883a 	add	r2,r4,r4
  8154b0:	1085883a 	add	r2,r2,r2
  8154b4:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  8154b8:	e0fff917 	ldw	r3,-28(fp)
  8154bc:	e13ffe17 	ldw	r4,-8(fp)
  8154c0:	1905383a 	mul	r2,r3,r4
  8154c4:	e0ffff17 	ldw	r3,-4(fp)
  8154c8:	1887883a 	add	r3,r3,r2
  8154cc:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  8154d0:	e13ff917 	ldw	r4,-28(fp)
  8154d4:	e13ff215 	stw	r4,-56(fp)
  8154d8:	00001906 	br	815540 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
  8154dc:	e0bffb17 	ldw	r2,-20(fp)
  8154e0:	e0bff315 	stw	r2,-52(fp)
  8154e4:	00000c06 	br	815518 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  8154e8:	e0fff317 	ldw	r3,-52(fp)
  8154ec:	e0fff317 	ldw	r3,-52(fp)
  8154f0:	18c5883a 	add	r2,r3,r3
  8154f4:	1085883a 	add	r2,r2,r2
  8154f8:	1007883a 	mov	r3,r2
  8154fc:	e0bfff17 	ldw	r2,-4(fp)
  815500:	1885883a 	add	r2,r3,r2
  815504:	e0fff717 	ldw	r3,-36(fp)
  815508:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  81550c:	e13ff317 	ldw	r4,-52(fp)
  815510:	21000044 	addi	r4,r4,1
  815514:	e13ff315 	stw	r4,-52(fp)
  815518:	e0bffa17 	ldw	r2,-24(fp)
  81551c:	e0fff317 	ldw	r3,-52(fp)
  815520:	10fff12e 	bgeu	r2,r3,8154e8 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  815524:	e13fff17 	ldw	r4,-4(fp)
  815528:	e0bffe17 	ldw	r2,-8(fp)
  81552c:	2089883a 	add	r4,r4,r2
  815530:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  815534:	e0fff217 	ldw	r3,-56(fp)
  815538:	18c00044 	addi	r3,r3,1
  81553c:	e0fff215 	stw	r3,-56(fp)
  815540:	e13ff817 	ldw	r4,-32(fp)
  815544:	e0bff217 	ldw	r2,-56(fp)
  815548:	20bfe42e 	bgeu	r4,r2,8154dc <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  81554c:	e037883a 	mov	sp,fp
  815550:	df000017 	ldw	fp,0(sp)
  815554:	dec00104 	addi	sp,sp,4
  815558:	f800283a 	ret

0081555c <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  81555c:	defff204 	addi	sp,sp,-56
  815560:	df000d15 	stw	fp,52(sp)
  815564:	df000d04 	addi	fp,sp,52
  815568:	e13ff315 	stw	r4,-52(fp)
  81556c:	e17ff415 	stw	r5,-48(fp)
  815570:	e1bff515 	stw	r6,-44(fp)
  815574:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  815578:	e0bff317 	ldw	r2,-52(fp)
  81557c:	10800f17 	ldw	r2,60(r2)
  815580:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  815584:	e0bff317 	ldw	r2,-52(fp)
  815588:	10801017 	ldw	r2,64(r2)
  81558c:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  815590:	e0bff417 	ldw	r2,-48(fp)
  815594:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  815598:	e0fff517 	ldw	r3,-44(fp)
  81559c:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  8155a0:	e13ff617 	ldw	r4,-40(fp)
  8155a4:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  8155a8:	e0800117 	ldw	r2,4(fp)
  8155ac:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  8155b0:	e0fffb17 	ldw	r3,-20(fp)
  8155b4:	e13ffc17 	ldw	r4,-16(fp)
  8155b8:	1900042e 	bgeu	r3,r4,8155cc <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
  8155bc:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  8155c0:	e0fffb17 	ldw	r3,-20(fp)
  8155c4:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  8155c8:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  8155cc:	e13ffc17 	ldw	r4,-16(fp)
  8155d0:	e0bffe17 	ldw	r2,-8(fp)
  8155d4:	2080b12e 	bgeu	r4,r2,81589c <alt_up_pixel_buffer_dma_draw_hline+0x340>
  8155d8:	e0fffa17 	ldw	r3,-24(fp)
  8155dc:	e13ffd17 	ldw	r4,-12(fp)
  8155e0:	19000136 	bltu	r3,r4,8155e8 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  8155e4:	0000ad06 	br	81589c <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  8155e8:	e0bffb17 	ldw	r2,-20(fp)
  8155ec:	e0fffe17 	ldw	r3,-8(fp)
  8155f0:	10c00336 	bltu	r2,r3,815600 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
  8155f4:	e13ffe17 	ldw	r4,-8(fp)
  8155f8:	213fffc4 	addi	r4,r4,-1
  8155fc:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  815600:	e0800217 	ldw	r2,8(fp)
  815604:	10800058 	cmpnei	r2,r2,1
  815608:	1000041e 	bne	r2,zero,81561c <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  81560c:	e0bff317 	ldw	r2,-52(fp)
  815610:	10800c17 	ldw	r2,48(r2)
  815614:	e0bfff15 	stw	r2,-4(fp)
  815618:	00000306 	br	815628 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  81561c:	e0bff317 	ldw	r2,-52(fp)
  815620:	10800b17 	ldw	r2,44(r2)
  815624:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  815628:	e0bff317 	ldw	r2,-52(fp)
  81562c:	10800d17 	ldw	r2,52(r2)
  815630:	1004c03a 	cmpne	r2,r2,zero
  815634:	1000431e 	bne	r2,zero,815744 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  815638:	e0bff317 	ldw	r2,-52(fp)
  81563c:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  815640:	e0fffa17 	ldw	r3,-24(fp)
  815644:	1884983a 	sll	r2,r3,r2
  815648:	e13fff17 	ldw	r4,-4(fp)
  81564c:	2089883a 	add	r4,r4,r2
  815650:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  815654:	e0bff317 	ldw	r2,-52(fp)
  815658:	10800e17 	ldw	r2,56(r2)
  81565c:	10800058 	cmpnei	r2,r2,1
  815660:	10000f1e 	bne	r2,zero,8156a0 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
  815664:	e0bffc17 	ldw	r2,-16(fp)
  815668:	e0bff815 	stw	r2,-32(fp)
  81566c:	00000806 	br	815690 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
  815670:	e0ffff17 	ldw	r3,-4(fp)
  815674:	e0bff817 	ldw	r2,-32(fp)
  815678:	1885883a 	add	r2,r3,r2
  81567c:	e0fff917 	ldw	r3,-28(fp)
  815680:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  815684:	e0fff817 	ldw	r3,-32(fp)
  815688:	18c00044 	addi	r3,r3,1
  81568c:	e0fff815 	stw	r3,-32(fp)
  815690:	e13ffb17 	ldw	r4,-20(fp)
  815694:	e0bff817 	ldw	r2,-32(fp)
  815698:	20bff52e 	bgeu	r4,r2,815670 <alt_up_pixel_buffer_dma_draw_hline+0x114>
  81569c:	00007f06 	br	81589c <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  8156a0:	e0bff317 	ldw	r2,-52(fp)
  8156a4:	10800e17 	ldw	r2,56(r2)
  8156a8:	10800098 	cmpnei	r2,r2,2
  8156ac:	1000121e 	bne	r2,zero,8156f8 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
  8156b0:	e0fffc17 	ldw	r3,-16(fp)
  8156b4:	e0fff815 	stw	r3,-32(fp)
  8156b8:	00000b06 	br	8156e8 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  8156bc:	e13ff817 	ldw	r4,-32(fp)
  8156c0:	e13ff817 	ldw	r4,-32(fp)
  8156c4:	2105883a 	add	r2,r4,r4
  8156c8:	1007883a 	mov	r3,r2
  8156cc:	e0bfff17 	ldw	r2,-4(fp)
  8156d0:	1885883a 	add	r2,r3,r2
  8156d4:	e0fff917 	ldw	r3,-28(fp)
  8156d8:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  8156dc:	e0bff817 	ldw	r2,-32(fp)
  8156e0:	10800044 	addi	r2,r2,1
  8156e4:	e0bff815 	stw	r2,-32(fp)
  8156e8:	e0fffb17 	ldw	r3,-20(fp)
  8156ec:	e13ff817 	ldw	r4,-32(fp)
  8156f0:	193ff22e 	bgeu	r3,r4,8156bc <alt_up_pixel_buffer_dma_draw_hline+0x160>
  8156f4:	00006906 	br	81589c <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  8156f8:	e0bffc17 	ldw	r2,-16(fp)
  8156fc:	e0bff815 	stw	r2,-32(fp)
  815700:	00000c06 	br	815734 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  815704:	e0fff817 	ldw	r3,-32(fp)
  815708:	e0fff817 	ldw	r3,-32(fp)
  81570c:	18c5883a 	add	r2,r3,r3
  815710:	1085883a 	add	r2,r2,r2
  815714:	1007883a 	mov	r3,r2
  815718:	e0bfff17 	ldw	r2,-4(fp)
  81571c:	1885883a 	add	r2,r3,r2
  815720:	e0fff917 	ldw	r3,-28(fp)
  815724:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  815728:	e13ff817 	ldw	r4,-32(fp)
  81572c:	21000044 	addi	r4,r4,1
  815730:	e13ff815 	stw	r4,-32(fp)
  815734:	e0bffb17 	ldw	r2,-20(fp)
  815738:	e0fff817 	ldw	r3,-32(fp)
  81573c:	10fff12e 	bgeu	r2,r3,815704 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
  815740:	00005606 	br	81589c <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  815744:	e0bff317 	ldw	r2,-52(fp)
  815748:	10800e17 	ldw	r2,56(r2)
  81574c:	10800058 	cmpnei	r2,r2,1
  815750:	1000151e 	bne	r2,zero,8157a8 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
  815754:	e13ffa17 	ldw	r4,-24(fp)
  815758:	e0fffe17 	ldw	r3,-8(fp)
  81575c:	20c5383a 	mul	r2,r4,r3
  815760:	e13fff17 	ldw	r4,-4(fp)
  815764:	2089883a 	add	r4,r4,r2
  815768:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  81576c:	e0bffc17 	ldw	r2,-16(fp)
  815770:	e0bff715 	stw	r2,-36(fp)
  815774:	00000806 	br	815798 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  815778:	e0ffff17 	ldw	r3,-4(fp)
  81577c:	e0bff717 	ldw	r2,-36(fp)
  815780:	1885883a 	add	r2,r3,r2
  815784:	e0fff917 	ldw	r3,-28(fp)
  815788:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  81578c:	e0fff717 	ldw	r3,-36(fp)
  815790:	18c00044 	addi	r3,r3,1
  815794:	e0fff715 	stw	r3,-36(fp)
  815798:	e13ffb17 	ldw	r4,-20(fp)
  81579c:	e0bff717 	ldw	r2,-36(fp)
  8157a0:	20bff52e 	bgeu	r4,r2,815778 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
  8157a4:	00003d06 	br	81589c <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  8157a8:	e0bff317 	ldw	r2,-52(fp)
  8157ac:	10800e17 	ldw	r2,56(r2)
  8157b0:	10800098 	cmpnei	r2,r2,2
  8157b4:	10001c1e 	bne	r2,zero,815828 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
  8157b8:	e0fffe17 	ldw	r3,-8(fp)
  8157bc:	e0fffe17 	ldw	r3,-8(fp)
  8157c0:	18c5883a 	add	r2,r3,r3
  8157c4:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  8157c8:	e13ffa17 	ldw	r4,-24(fp)
  8157cc:	e0fffe17 	ldw	r3,-8(fp)
  8157d0:	20c5383a 	mul	r2,r4,r3
  8157d4:	e13fff17 	ldw	r4,-4(fp)
  8157d8:	2089883a 	add	r4,r4,r2
  8157dc:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  8157e0:	e0bffc17 	ldw	r2,-16(fp)
  8157e4:	e0bff715 	stw	r2,-36(fp)
  8157e8:	00000b06 	br	815818 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  8157ec:	e0fff717 	ldw	r3,-36(fp)
  8157f0:	e0fff717 	ldw	r3,-36(fp)
  8157f4:	18c5883a 	add	r2,r3,r3
  8157f8:	1007883a 	mov	r3,r2
  8157fc:	e0bfff17 	ldw	r2,-4(fp)
  815800:	1885883a 	add	r2,r3,r2
  815804:	e0fff917 	ldw	r3,-28(fp)
  815808:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  81580c:	e13ff717 	ldw	r4,-36(fp)
  815810:	21000044 	addi	r4,r4,1
  815814:	e13ff715 	stw	r4,-36(fp)
  815818:	e0bffb17 	ldw	r2,-20(fp)
  81581c:	e0fff717 	ldw	r3,-36(fp)
  815820:	10fff22e 	bgeu	r2,r3,8157ec <alt_up_pixel_buffer_dma_draw_hline+0x290>
  815824:	00001d06 	br	81589c <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  815828:	e13ffe17 	ldw	r4,-8(fp)
  81582c:	e13ffe17 	ldw	r4,-8(fp)
  815830:	2105883a 	add	r2,r4,r4
  815834:	1085883a 	add	r2,r2,r2
  815838:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  81583c:	e0fffa17 	ldw	r3,-24(fp)
  815840:	e13ffe17 	ldw	r4,-8(fp)
  815844:	1905383a 	mul	r2,r3,r4
  815848:	e0ffff17 	ldw	r3,-4(fp)
  81584c:	1887883a 	add	r3,r3,r2
  815850:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  815854:	e13ffc17 	ldw	r4,-16(fp)
  815858:	e13ff715 	stw	r4,-36(fp)
  81585c:	00000c06 	br	815890 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  815860:	e0fff717 	ldw	r3,-36(fp)
  815864:	e0fff717 	ldw	r3,-36(fp)
  815868:	18c5883a 	add	r2,r3,r3
  81586c:	1085883a 	add	r2,r2,r2
  815870:	1007883a 	mov	r3,r2
  815874:	e0bfff17 	ldw	r2,-4(fp)
  815878:	1885883a 	add	r2,r3,r2
  81587c:	e0fff917 	ldw	r3,-28(fp)
  815880:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  815884:	e13ff717 	ldw	r4,-36(fp)
  815888:	21000044 	addi	r4,r4,1
  81588c:	e13ff715 	stw	r4,-36(fp)
  815890:	e0bffb17 	ldw	r2,-20(fp)
  815894:	e0fff717 	ldw	r3,-36(fp)
  815898:	10fff12e 	bgeu	r2,r3,815860 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  81589c:	e037883a 	mov	sp,fp
  8158a0:	df000017 	ldw	fp,0(sp)
  8158a4:	dec00104 	addi	sp,sp,4
  8158a8:	f800283a 	ret

008158ac <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  8158ac:	defff104 	addi	sp,sp,-60
  8158b0:	df000e15 	stw	fp,56(sp)
  8158b4:	df000e04 	addi	fp,sp,56
  8158b8:	e13ff215 	stw	r4,-56(fp)
  8158bc:	e17ff315 	stw	r5,-52(fp)
  8158c0:	e1bff415 	stw	r6,-48(fp)
  8158c4:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  8158c8:	e0bff217 	ldw	r2,-56(fp)
  8158cc:	10800f17 	ldw	r2,60(r2)
  8158d0:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  8158d4:	e0bff217 	ldw	r2,-56(fp)
  8158d8:	10801017 	ldw	r2,64(r2)
  8158dc:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  8158e0:	e0bff317 	ldw	r2,-52(fp)
  8158e4:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  8158e8:	e0fff417 	ldw	r3,-48(fp)
  8158ec:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  8158f0:	e13ff517 	ldw	r4,-44(fp)
  8158f4:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  8158f8:	e0800117 	ldw	r2,4(fp)
  8158fc:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  815900:	e0fffa17 	ldw	r3,-24(fp)
  815904:	e13ffb17 	ldw	r4,-20(fp)
  815908:	1900042e 	bgeu	r3,r4,81591c <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
  81590c:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  815910:	e0fffa17 	ldw	r3,-24(fp)
  815914:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  815918:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  81591c:	e13ffc17 	ldw	r4,-16(fp)
  815920:	e0bffe17 	ldw	r2,-8(fp)
  815924:	2080d12e 	bgeu	r4,r2,815c6c <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
  815928:	e0fffb17 	ldw	r3,-20(fp)
  81592c:	e13ffd17 	ldw	r4,-12(fp)
  815930:	19000136 	bltu	r3,r4,815938 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  815934:	0000cd06 	br	815c6c <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  815938:	e0bffa17 	ldw	r2,-24(fp)
  81593c:	e0fffd17 	ldw	r3,-12(fp)
  815940:	10c00336 	bltu	r2,r3,815950 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
  815944:	e13ffd17 	ldw	r4,-12(fp)
  815948:	213fffc4 	addi	r4,r4,-1
  81594c:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  815950:	e0800217 	ldw	r2,8(fp)
  815954:	10800058 	cmpnei	r2,r2,1
  815958:	1000041e 	bne	r2,zero,81596c <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  81595c:	e0bff217 	ldw	r2,-56(fp)
  815960:	10800c17 	ldw	r2,48(r2)
  815964:	e0bfff15 	stw	r2,-4(fp)
  815968:	00000306 	br	815978 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  81596c:	e0bff217 	ldw	r2,-56(fp)
  815970:	10800b17 	ldw	r2,44(r2)
  815974:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  815978:	e0bff217 	ldw	r2,-56(fp)
  81597c:	10800d17 	ldw	r2,52(r2)
  815980:	1004c03a 	cmpne	r2,r2,zero
  815984:	1000571e 	bne	r2,zero,815ae4 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  815988:	e0bff217 	ldw	r2,-56(fp)
  81598c:	10801317 	ldw	r2,76(r2)
  815990:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  815994:	e0bff717 	ldw	r2,-36(fp)
  815998:	e0fffb17 	ldw	r3,-20(fp)
  81599c:	1884983a 	sll	r2,r3,r2
  8159a0:	e13fff17 	ldw	r4,-4(fp)
  8159a4:	2089883a 	add	r4,r4,r2
  8159a8:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  8159ac:	e0bff217 	ldw	r2,-56(fp)
  8159b0:	10800e17 	ldw	r2,56(r2)
  8159b4:	10800058 	cmpnei	r2,r2,1
  8159b8:	1000151e 	bne	r2,zero,815a10 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
  8159bc:	e0bffb17 	ldw	r2,-20(fp)
  8159c0:	e0bff815 	stw	r2,-32(fp)
  8159c4:	00000e06 	br	815a00 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  8159c8:	e0ffff17 	ldw	r3,-4(fp)
  8159cc:	e0bffc17 	ldw	r2,-16(fp)
  8159d0:	1885883a 	add	r2,r3,r2
  8159d4:	e0fff917 	ldw	r3,-28(fp)
  8159d8:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  8159dc:	e0fff717 	ldw	r3,-36(fp)
  8159e0:	00800044 	movi	r2,1
  8159e4:	10c4983a 	sll	r2,r2,r3
  8159e8:	e0ffff17 	ldw	r3,-4(fp)
  8159ec:	1887883a 	add	r3,r3,r2
  8159f0:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  8159f4:	e13ff817 	ldw	r4,-32(fp)
  8159f8:	21000044 	addi	r4,r4,1
  8159fc:	e13ff815 	stw	r4,-32(fp)
  815a00:	e0bffa17 	ldw	r2,-24(fp)
  815a04:	e0fff817 	ldw	r3,-32(fp)
  815a08:	10ffef2e 	bgeu	r2,r3,8159c8 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
  815a0c:	00009706 	br	815c6c <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  815a10:	e0bff217 	ldw	r2,-56(fp)
  815a14:	10800e17 	ldw	r2,56(r2)
  815a18:	10800098 	cmpnei	r2,r2,2
  815a1c:	1000181e 	bne	r2,zero,815a80 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
  815a20:	e13ffb17 	ldw	r4,-20(fp)
  815a24:	e13ff815 	stw	r4,-32(fp)
  815a28:	00001106 	br	815a70 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  815a2c:	e0fffc17 	ldw	r3,-16(fp)
  815a30:	e0fffc17 	ldw	r3,-16(fp)
  815a34:	18c5883a 	add	r2,r3,r3
  815a38:	1007883a 	mov	r3,r2
  815a3c:	e0bfff17 	ldw	r2,-4(fp)
  815a40:	1885883a 	add	r2,r3,r2
  815a44:	e0fff917 	ldw	r3,-28(fp)
  815a48:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  815a4c:	e0fff717 	ldw	r3,-36(fp)
  815a50:	00800044 	movi	r2,1
  815a54:	10c4983a 	sll	r2,r2,r3
  815a58:	e13fff17 	ldw	r4,-4(fp)
  815a5c:	2089883a 	add	r4,r4,r2
  815a60:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  815a64:	e0bff817 	ldw	r2,-32(fp)
  815a68:	10800044 	addi	r2,r2,1
  815a6c:	e0bff815 	stw	r2,-32(fp)
  815a70:	e0fffa17 	ldw	r3,-24(fp)
  815a74:	e13ff817 	ldw	r4,-32(fp)
  815a78:	193fec2e 	bgeu	r3,r4,815a2c <alt_up_pixel_buffer_dma_draw_vline+0x180>
  815a7c:	00007b06 	br	815c6c <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  815a80:	e0bffb17 	ldw	r2,-20(fp)
  815a84:	e0bff815 	stw	r2,-32(fp)
  815a88:	00001206 	br	815ad4 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  815a8c:	e0fffc17 	ldw	r3,-16(fp)
  815a90:	e0fffc17 	ldw	r3,-16(fp)
  815a94:	18c5883a 	add	r2,r3,r3
  815a98:	1085883a 	add	r2,r2,r2
  815a9c:	1007883a 	mov	r3,r2
  815aa0:	e0bfff17 	ldw	r2,-4(fp)
  815aa4:	1885883a 	add	r2,r3,r2
  815aa8:	e0fff917 	ldw	r3,-28(fp)
  815aac:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  815ab0:	e0fff717 	ldw	r3,-36(fp)
  815ab4:	00800044 	movi	r2,1
  815ab8:	10c4983a 	sll	r2,r2,r3
  815abc:	e13fff17 	ldw	r4,-4(fp)
  815ac0:	2089883a 	add	r4,r4,r2
  815ac4:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  815ac8:	e0bff817 	ldw	r2,-32(fp)
  815acc:	10800044 	addi	r2,r2,1
  815ad0:	e0bff815 	stw	r2,-32(fp)
  815ad4:	e0fffa17 	ldw	r3,-24(fp)
  815ad8:	e13ff817 	ldw	r4,-32(fp)
  815adc:	193feb2e 	bgeu	r3,r4,815a8c <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
  815ae0:	00006206 	br	815c6c <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  815ae4:	e0bff217 	ldw	r2,-56(fp)
  815ae8:	10800e17 	ldw	r2,56(r2)
  815aec:	10800058 	cmpnei	r2,r2,1
  815af0:	1000191e 	bne	r2,zero,815b58 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
  815af4:	e0fffb17 	ldw	r3,-20(fp)
  815af8:	e13ffe17 	ldw	r4,-8(fp)
  815afc:	1905383a 	mul	r2,r3,r4
  815b00:	e0ffff17 	ldw	r3,-4(fp)
  815b04:	1887883a 	add	r3,r3,r2
  815b08:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  815b0c:	e13ffb17 	ldw	r4,-20(fp)
  815b10:	e13ff615 	stw	r4,-40(fp)
  815b14:	00000c06 	br	815b48 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  815b18:	e0ffff17 	ldw	r3,-4(fp)
  815b1c:	e0bffc17 	ldw	r2,-16(fp)
  815b20:	1885883a 	add	r2,r3,r2
  815b24:	e0fff917 	ldw	r3,-28(fp)
  815b28:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  815b2c:	e0bfff17 	ldw	r2,-4(fp)
  815b30:	e0fffe17 	ldw	r3,-8(fp)
  815b34:	10c5883a 	add	r2,r2,r3
  815b38:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  815b3c:	e13ff617 	ldw	r4,-40(fp)
  815b40:	21000044 	addi	r4,r4,1
  815b44:	e13ff615 	stw	r4,-40(fp)
  815b48:	e0bffa17 	ldw	r2,-24(fp)
  815b4c:	e0fff617 	ldw	r3,-40(fp)
  815b50:	10fff12e 	bgeu	r2,r3,815b18 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
  815b54:	00004506 	br	815c6c <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  815b58:	e0bff217 	ldw	r2,-56(fp)
  815b5c:	10800e17 	ldw	r2,56(r2)
  815b60:	10800098 	cmpnei	r2,r2,2
  815b64:	1000201e 	bne	r2,zero,815be8 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
  815b68:	e13ffe17 	ldw	r4,-8(fp)
  815b6c:	e13ffe17 	ldw	r4,-8(fp)
  815b70:	2105883a 	add	r2,r4,r4
  815b74:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  815b78:	e0fffb17 	ldw	r3,-20(fp)
  815b7c:	e13ffe17 	ldw	r4,-8(fp)
  815b80:	1905383a 	mul	r2,r3,r4
  815b84:	e0ffff17 	ldw	r3,-4(fp)
  815b88:	1887883a 	add	r3,r3,r2
  815b8c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  815b90:	e13ffb17 	ldw	r4,-20(fp)
  815b94:	e13ff615 	stw	r4,-40(fp)
  815b98:	00000f06 	br	815bd8 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  815b9c:	e0fffc17 	ldw	r3,-16(fp)
  815ba0:	e0fffc17 	ldw	r3,-16(fp)
  815ba4:	18c5883a 	add	r2,r3,r3
  815ba8:	1007883a 	mov	r3,r2
  815bac:	e0bfff17 	ldw	r2,-4(fp)
  815bb0:	1885883a 	add	r2,r3,r2
  815bb4:	e0fff917 	ldw	r3,-28(fp)
  815bb8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  815bbc:	e13fff17 	ldw	r4,-4(fp)
  815bc0:	e0bffe17 	ldw	r2,-8(fp)
  815bc4:	2089883a 	add	r4,r4,r2
  815bc8:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  815bcc:	e0fff617 	ldw	r3,-40(fp)
  815bd0:	18c00044 	addi	r3,r3,1
  815bd4:	e0fff615 	stw	r3,-40(fp)
  815bd8:	e13ffa17 	ldw	r4,-24(fp)
  815bdc:	e0bff617 	ldw	r2,-40(fp)
  815be0:	20bfee2e 	bgeu	r4,r2,815b9c <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
  815be4:	00002106 	br	815c6c <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  815be8:	e0fffe17 	ldw	r3,-8(fp)
  815bec:	e0fffe17 	ldw	r3,-8(fp)
  815bf0:	18c5883a 	add	r2,r3,r3
  815bf4:	1085883a 	add	r2,r2,r2
  815bf8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  815bfc:	e13ffb17 	ldw	r4,-20(fp)
  815c00:	e0fffe17 	ldw	r3,-8(fp)
  815c04:	20c5383a 	mul	r2,r4,r3
  815c08:	e13fff17 	ldw	r4,-4(fp)
  815c0c:	2089883a 	add	r4,r4,r2
  815c10:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  815c14:	e0bffb17 	ldw	r2,-20(fp)
  815c18:	e0bff615 	stw	r2,-40(fp)
  815c1c:	00001006 	br	815c60 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  815c20:	e0fffc17 	ldw	r3,-16(fp)
  815c24:	e0fffc17 	ldw	r3,-16(fp)
  815c28:	18c5883a 	add	r2,r3,r3
  815c2c:	1085883a 	add	r2,r2,r2
  815c30:	1007883a 	mov	r3,r2
  815c34:	e0bfff17 	ldw	r2,-4(fp)
  815c38:	1885883a 	add	r2,r3,r2
  815c3c:	e0fff917 	ldw	r3,-28(fp)
  815c40:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  815c44:	e13fff17 	ldw	r4,-4(fp)
  815c48:	e0bffe17 	ldw	r2,-8(fp)
  815c4c:	2089883a 	add	r4,r4,r2
  815c50:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  815c54:	e0fff617 	ldw	r3,-40(fp)
  815c58:	18c00044 	addi	r3,r3,1
  815c5c:	e0fff615 	stw	r3,-40(fp)
  815c60:	e13ffa17 	ldw	r4,-24(fp)
  815c64:	e0bff617 	ldw	r2,-40(fp)
  815c68:	20bfed2e 	bgeu	r4,r2,815c20 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  815c6c:	e037883a 	mov	sp,fp
  815c70:	df000017 	ldw	fp,0(sp)
  815c74:	dec00104 	addi	sp,sp,4
  815c78:	f800283a 	ret

00815c7c <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  815c7c:	defff804 	addi	sp,sp,-32
  815c80:	dfc00715 	stw	ra,28(sp)
  815c84:	df000615 	stw	fp,24(sp)
  815c88:	df000604 	addi	fp,sp,24
  815c8c:	e13ffc15 	stw	r4,-16(fp)
  815c90:	e17ffd15 	stw	r5,-12(fp)
  815c94:	e1bffe15 	stw	r6,-8(fp)
  815c98:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  815c9c:	e0800317 	ldw	r2,12(fp)
  815ca0:	d8800015 	stw	r2,0(sp)
  815ca4:	e0800417 	ldw	r2,16(fp)
  815ca8:	d8800115 	stw	r2,4(sp)
  815cac:	e13ffc17 	ldw	r4,-16(fp)
  815cb0:	e17ffd17 	ldw	r5,-12(fp)
  815cb4:	e1bfff17 	ldw	r6,-4(fp)
  815cb8:	e1fffe17 	ldw	r7,-8(fp)
  815cbc:	081555c0 	call	81555c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  815cc0:	e0800317 	ldw	r2,12(fp)
  815cc4:	d8800015 	stw	r2,0(sp)
  815cc8:	e0800417 	ldw	r2,16(fp)
  815ccc:	d8800115 	stw	r2,4(sp)
  815cd0:	e13ffc17 	ldw	r4,-16(fp)
  815cd4:	e17ffd17 	ldw	r5,-12(fp)
  815cd8:	e1bfff17 	ldw	r6,-4(fp)
  815cdc:	e1c00217 	ldw	r7,8(fp)
  815ce0:	081555c0 	call	81555c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  815ce4:	e0800317 	ldw	r2,12(fp)
  815ce8:	d8800015 	stw	r2,0(sp)
  815cec:	e0800417 	ldw	r2,16(fp)
  815cf0:	d8800115 	stw	r2,4(sp)
  815cf4:	e13ffc17 	ldw	r4,-16(fp)
  815cf8:	e17ffd17 	ldw	r5,-12(fp)
  815cfc:	e1bffe17 	ldw	r6,-8(fp)
  815d00:	e1c00217 	ldw	r7,8(fp)
  815d04:	08158ac0 	call	8158ac <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  815d08:	e0800317 	ldw	r2,12(fp)
  815d0c:	d8800015 	stw	r2,0(sp)
  815d10:	e0800417 	ldw	r2,16(fp)
  815d14:	d8800115 	stw	r2,4(sp)
  815d18:	e13ffc17 	ldw	r4,-16(fp)
  815d1c:	e17fff17 	ldw	r5,-4(fp)
  815d20:	e1bffe17 	ldw	r6,-8(fp)
  815d24:	e1c00217 	ldw	r7,8(fp)
  815d28:	08158ac0 	call	8158ac <alt_up_pixel_buffer_dma_draw_vline>
}
  815d2c:	e037883a 	mov	sp,fp
  815d30:	dfc00117 	ldw	ra,4(sp)
  815d34:	df000017 	ldw	fp,0(sp)
  815d38:	dec00204 	addi	sp,sp,8
  815d3c:	f800283a 	ret

00815d40 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  815d40:	defffb04 	addi	sp,sp,-20
  815d44:	df000415 	stw	fp,16(sp)
  815d48:	df000404 	addi	fp,sp,16
  815d4c:	e13ffc15 	stw	r4,-16(fp)
  815d50:	e17ffd15 	stw	r5,-12(fp)
  815d54:	e1bffe15 	stw	r6,-8(fp)
  815d58:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  815d5c:	e0c00217 	ldw	r3,8(fp)
  815d60:	1804c03a 	cmpne	r2,r3,zero
  815d64:	10000b1e 	bne	r2,zero,815d94 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  815d68:	e13ffd17 	ldw	r4,-12(fp)
  815d6c:	e0ffff17 	ldw	r3,-4(fp)
  815d70:	20c5383a 	mul	r2,r4,r3
  815d74:	e13ffe17 	ldw	r4,-8(fp)
  815d78:	1105883a 	add	r2,r2,r4
  815d7c:	1007883a 	mov	r3,r2
  815d80:	e0bffc17 	ldw	r2,-16(fp)
  815d84:	1885883a 	add	r2,r3,r2
  815d88:	e0c00117 	ldw	r3,4(fp)
  815d8c:	10c00025 	stbio	r3,0(r2)
  815d90:	00001b06 	br	815e00 <helper_plot_pixel+0xc0>
	else if (mode == 1)
  815d94:	e1000217 	ldw	r4,8(fp)
  815d98:	20800058 	cmpnei	r2,r4,1
  815d9c:	10000c1e 	bne	r2,zero,815dd0 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  815da0:	e0fffd17 	ldw	r3,-12(fp)
  815da4:	e13fff17 	ldw	r4,-4(fp)
  815da8:	1905383a 	mul	r2,r3,r4
  815dac:	e0fffe17 	ldw	r3,-8(fp)
  815db0:	10c5883a 	add	r2,r2,r3
  815db4:	1085883a 	add	r2,r2,r2
  815db8:	1007883a 	mov	r3,r2
  815dbc:	e0bffc17 	ldw	r2,-16(fp)
  815dc0:	1885883a 	add	r2,r3,r2
  815dc4:	e1000117 	ldw	r4,4(fp)
  815dc8:	1100002d 	sthio	r4,0(r2)
  815dcc:	00000c06 	br	815e00 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  815dd0:	e0fffd17 	ldw	r3,-12(fp)
  815dd4:	e13fff17 	ldw	r4,-4(fp)
  815dd8:	1905383a 	mul	r2,r3,r4
  815ddc:	e0fffe17 	ldw	r3,-8(fp)
  815de0:	10c5883a 	add	r2,r2,r3
  815de4:	1085883a 	add	r2,r2,r2
  815de8:	1085883a 	add	r2,r2,r2
  815dec:	1007883a 	mov	r3,r2
  815df0:	e0bffc17 	ldw	r2,-16(fp)
  815df4:	1885883a 	add	r2,r3,r2
  815df8:	e1000117 	ldw	r4,4(fp)
  815dfc:	11000035 	stwio	r4,0(r2)
}
  815e00:	e037883a 	mov	sp,fp
  815e04:	df000017 	ldw	fp,0(sp)
  815e08:	dec00104 	addi	sp,sp,4
  815e0c:	f800283a 	ret

00815e10 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  815e10:	deffe404 	addi	sp,sp,-112
  815e14:	dfc01b15 	stw	ra,108(sp)
  815e18:	df001a15 	stw	fp,104(sp)
  815e1c:	df001a04 	addi	fp,sp,104
  815e20:	e13fe815 	stw	r4,-96(fp)
  815e24:	e17fe915 	stw	r5,-92(fp)
  815e28:	e1bfea15 	stw	r6,-88(fp)
  815e2c:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  815e30:	e0bfe917 	ldw	r2,-92(fp)
  815e34:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  815e38:	e0ffea17 	ldw	r3,-88(fp)
  815e3c:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  815e40:	e13feb17 	ldw	r4,-84(fp)
  815e44:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  815e48:	e0800217 	ldw	r2,8(fp)
  815e4c:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  815e50:	e0fff717 	ldw	r3,-36(fp)
  815e54:	e13ff917 	ldw	r4,-28(fp)
  815e58:	1905c83a 	sub	r2,r3,r4
  815e5c:	e0bfff15 	stw	r2,-4(fp)
  815e60:	e0ffff17 	ldw	r3,-4(fp)
  815e64:	1804403a 	cmpge	r2,r3,zero
  815e68:	1000031e 	bne	r2,zero,815e78 <alt_up_pixel_buffer_dma_draw_line+0x68>
  815e6c:	e13fff17 	ldw	r4,-4(fp)
  815e70:	0109c83a 	sub	r4,zero,r4
  815e74:	e13fff15 	stw	r4,-4(fp)
  815e78:	e0fff817 	ldw	r3,-32(fp)
  815e7c:	e13ffa17 	ldw	r4,-24(fp)
  815e80:	1905c83a 	sub	r2,r3,r4
  815e84:	e0bffe15 	stw	r2,-8(fp)
  815e88:	e0fffe17 	ldw	r3,-8(fp)
  815e8c:	1804403a 	cmpge	r2,r3,zero
  815e90:	1000031e 	bne	r2,zero,815ea0 <alt_up_pixel_buffer_dma_draw_line+0x90>
  815e94:	e13ffe17 	ldw	r4,-8(fp)
  815e98:	0109c83a 	sub	r4,zero,r4
  815e9c:	e13ffe15 	stw	r4,-8(fp)
  815ea0:	e0fffe17 	ldw	r3,-8(fp)
  815ea4:	e13fff17 	ldw	r4,-4(fp)
  815ea8:	1904803a 	cmplt	r2,r3,r4
  815eac:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  815eb0:	e0bfe817 	ldw	r2,-96(fp)
  815eb4:	10800e17 	ldw	r2,56(r2)
  815eb8:	10800060 	cmpeqi	r2,r2,1
  815ebc:	10000c1e 	bne	r2,zero,815ef0 <alt_up_pixel_buffer_dma_draw_line+0xe0>
  815ec0:	e0bfe817 	ldw	r2,-96(fp)
  815ec4:	10800e17 	ldw	r2,56(r2)
  815ec8:	10800098 	cmpnei	r2,r2,2
  815ecc:	1000031e 	bne	r2,zero,815edc <alt_up_pixel_buffer_dma_draw_line+0xcc>
  815ed0:	00800044 	movi	r2,1
  815ed4:	e0bffc15 	stw	r2,-16(fp)
  815ed8:	00000206 	br	815ee4 <alt_up_pixel_buffer_dma_draw_line+0xd4>
  815edc:	00c00084 	movi	r3,2
  815ee0:	e0fffc15 	stw	r3,-16(fp)
  815ee4:	e13ffc17 	ldw	r4,-16(fp)
  815ee8:	e13ffd15 	stw	r4,-12(fp)
  815eec:	00000106 	br	815ef4 <alt_up_pixel_buffer_dma_draw_line+0xe4>
  815ef0:	e03ffd15 	stw	zero,-12(fp)
  815ef4:	e0bffd17 	ldw	r2,-12(fp)
  815ef8:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  815efc:	e0c00317 	ldw	r3,12(fp)
  815f00:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  815f04:	e0bfe817 	ldw	r2,-96(fp)
  815f08:	10800d17 	ldw	r2,52(r2)
  815f0c:	1004c03a 	cmpne	r2,r2,zero
  815f10:	1000091e 	bne	r2,zero,815f38 <alt_up_pixel_buffer_dma_draw_line+0x128>
  815f14:	e0bfe817 	ldw	r2,-96(fp)
  815f18:	10c01317 	ldw	r3,76(r2)
  815f1c:	e0bfef17 	ldw	r2,-68(fp)
  815f20:	1885c83a 	sub	r2,r3,r2
  815f24:	1007883a 	mov	r3,r2
  815f28:	00800044 	movi	r2,1
  815f2c:	10c4983a 	sll	r2,r2,r3
  815f30:	e0bffb15 	stw	r2,-20(fp)
  815f34:	00000306 	br	815f44 <alt_up_pixel_buffer_dma_draw_line+0x134>
  815f38:	e0bfe817 	ldw	r2,-96(fp)
  815f3c:	10800f17 	ldw	r2,60(r2)
  815f40:	e0bffb15 	stw	r2,-20(fp)
  815f44:	e13ffb17 	ldw	r4,-20(fp)
  815f48:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  815f4c:	e0800417 	ldw	r2,16(fp)
  815f50:	10800058 	cmpnei	r2,r2,1
  815f54:	1000041e 	bne	r2,zero,815f68 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  815f58:	e0bfe817 	ldw	r2,-96(fp)
  815f5c:	10800c17 	ldw	r2,48(r2)
  815f60:	e0bfed15 	stw	r2,-76(fp)
  815f64:	00000306 	br	815f74 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  815f68:	e0bfe817 	ldw	r2,-96(fp)
  815f6c:	10800b17 	ldw	r2,44(r2)
  815f70:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  815f74:	e0fff603 	ldbu	r3,-40(fp)
  815f78:	18803fcc 	andi	r2,r3,255
  815f7c:	1080201c 	xori	r2,r2,128
  815f80:	10bfe004 	addi	r2,r2,-128
  815f84:	10800050 	cmplti	r2,r2,1
  815f88:	10000c1e 	bne	r2,zero,815fbc <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  815f8c:	e13ffa17 	ldw	r4,-24(fp)
  815f90:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  815f94:	e0bff917 	ldw	r2,-28(fp)
  815f98:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  815f9c:	e0fff317 	ldw	r3,-52(fp)
  815fa0:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  815fa4:	e13ff817 	ldw	r4,-32(fp)
  815fa8:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  815fac:	e0bff717 	ldw	r2,-36(fp)
  815fb0:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  815fb4:	e0fff317 	ldw	r3,-52(fp)
  815fb8:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  815fbc:	e13ff817 	ldw	r4,-32(fp)
  815fc0:	e0bffa17 	ldw	r2,-24(fp)
  815fc4:	20800c0e 	bge	r4,r2,815ff8 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  815fc8:	e0fffa17 	ldw	r3,-24(fp)
  815fcc:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  815fd0:	e13ff817 	ldw	r4,-32(fp)
  815fd4:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  815fd8:	e0bff317 	ldw	r2,-52(fp)
  815fdc:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  815fe0:	e0fff917 	ldw	r3,-28(fp)
  815fe4:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  815fe8:	e13ff717 	ldw	r4,-36(fp)
  815fec:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  815ff0:	e0bff317 	ldw	r2,-52(fp)
  815ff4:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  815ff8:	e0fff817 	ldw	r3,-32(fp)
  815ffc:	e13ffa17 	ldw	r4,-24(fp)
  816000:	1907c83a 	sub	r3,r3,r4
  816004:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  816008:	e0fff717 	ldw	r3,-36(fp)
  81600c:	e13ff917 	ldw	r4,-28(fp)
  816010:	1905c83a 	sub	r2,r3,r4
  816014:	e0bff415 	stw	r2,-48(fp)
  816018:	e0fff417 	ldw	r3,-48(fp)
  81601c:	1804403a 	cmpge	r2,r3,zero
  816020:	1000031e 	bne	r2,zero,816030 <alt_up_pixel_buffer_dma_draw_line+0x220>
  816024:	e13ff417 	ldw	r4,-48(fp)
  816028:	0109c83a 	sub	r4,zero,r4
  81602c:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  816030:	e0fff517 	ldw	r3,-44(fp)
  816034:	1804d7fa 	srli	r2,r3,31
  816038:	e13ff517 	ldw	r4,-44(fp)
  81603c:	1105883a 	add	r2,r2,r4
  816040:	1005d07a 	srai	r2,r2,1
  816044:	0085c83a 	sub	r2,zero,r2
  816048:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  81604c:	e0bff917 	ldw	r2,-28(fp)
  816050:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  816054:	e0fff917 	ldw	r3,-28(fp)
  816058:	e13ff717 	ldw	r4,-36(fp)
  81605c:	1900030e 	bge	r3,r4,81606c <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  816060:	00800044 	movi	r2,1
  816064:	e0bff215 	stw	r2,-56(fp)
  816068:	00000206 	br	816074 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  81606c:	00ffffc4 	movi	r3,-1
  816070:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  816074:	e13ff603 	ldbu	r4,-40(fp)
  816078:	20803fcc 	andi	r2,r4,255
  81607c:	1080201c 	xori	r2,r2,128
  816080:	10bfe004 	addi	r2,r2,-128
  816084:	10800058 	cmpnei	r2,r2,1
  816088:	1000221e 	bne	r2,zero,816114 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  81608c:	e0bffa17 	ldw	r2,-24(fp)
  816090:	e0bff115 	stw	r2,-60(fp)
  816094:	00001b06 	br	816104 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  816098:	e0ffee17 	ldw	r3,-72(fp)
  81609c:	d8c00015 	stw	r3,0(sp)
  8160a0:	e13fef17 	ldw	r4,-68(fp)
  8160a4:	d9000115 	stw	r4,4(sp)
  8160a8:	e13fed17 	ldw	r4,-76(fp)
  8160ac:	e17fec17 	ldw	r5,-80(fp)
  8160b0:	e1bff017 	ldw	r6,-64(fp)
  8160b4:	e1fff117 	ldw	r7,-60(fp)
  8160b8:	0815d400 	call	815d40 <helper_plot_pixel>
			error = error + deltay;
  8160bc:	e0bff317 	ldw	r2,-52(fp)
  8160c0:	e0fff417 	ldw	r3,-48(fp)
  8160c4:	10c5883a 	add	r2,r2,r3
  8160c8:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  8160cc:	e13ff317 	ldw	r4,-52(fp)
  8160d0:	20800050 	cmplti	r2,r4,1
  8160d4:	1000081e 	bne	r2,zero,8160f8 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  8160d8:	e0bff017 	ldw	r2,-64(fp)
  8160dc:	e0fff217 	ldw	r3,-56(fp)
  8160e0:	10c5883a 	add	r2,r2,r3
  8160e4:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  8160e8:	e13ff317 	ldw	r4,-52(fp)
  8160ec:	e0bff517 	ldw	r2,-44(fp)
  8160f0:	2089c83a 	sub	r4,r4,r2
  8160f4:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  8160f8:	e0fff117 	ldw	r3,-60(fp)
  8160fc:	18c00044 	addi	r3,r3,1
  816100:	e0fff115 	stw	r3,-60(fp)
  816104:	e13ff817 	ldw	r4,-32(fp)
  816108:	e0bff117 	ldw	r2,-60(fp)
  81610c:	20bfe20e 	bge	r4,r2,816098 <alt_up_pixel_buffer_dma_draw_line+0x288>
  816110:	00002106 	br	816198 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  816114:	e0fffa17 	ldw	r3,-24(fp)
  816118:	e0fff115 	stw	r3,-60(fp)
  81611c:	00001b06 	br	81618c <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  816120:	e13fee17 	ldw	r4,-72(fp)
  816124:	d9000015 	stw	r4,0(sp)
  816128:	e0bfef17 	ldw	r2,-68(fp)
  81612c:	d8800115 	stw	r2,4(sp)
  816130:	e13fed17 	ldw	r4,-76(fp)
  816134:	e17fec17 	ldw	r5,-80(fp)
  816138:	e1bff117 	ldw	r6,-60(fp)
  81613c:	e1fff017 	ldw	r7,-64(fp)
  816140:	0815d400 	call	815d40 <helper_plot_pixel>
			error = error + deltay;
  816144:	e0fff317 	ldw	r3,-52(fp)
  816148:	e13ff417 	ldw	r4,-48(fp)
  81614c:	1907883a 	add	r3,r3,r4
  816150:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  816154:	e0fff317 	ldw	r3,-52(fp)
  816158:	18800050 	cmplti	r2,r3,1
  81615c:	1000081e 	bne	r2,zero,816180 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  816160:	e13ff017 	ldw	r4,-64(fp)
  816164:	e0bff217 	ldw	r2,-56(fp)
  816168:	2089883a 	add	r4,r4,r2
  81616c:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  816170:	e0fff317 	ldw	r3,-52(fp)
  816174:	e13ff517 	ldw	r4,-44(fp)
  816178:	1907c83a 	sub	r3,r3,r4
  81617c:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  816180:	e0bff117 	ldw	r2,-60(fp)
  816184:	10800044 	addi	r2,r2,1
  816188:	e0bff115 	stw	r2,-60(fp)
  81618c:	e0fff817 	ldw	r3,-32(fp)
  816190:	e13ff117 	ldw	r4,-60(fp)
  816194:	193fe20e 	bge	r3,r4,816120 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  816198:	e037883a 	mov	sp,fp
  81619c:	dfc00117 	ldw	ra,4(sp)
  8161a0:	df000017 	ldw	fp,0(sp)
  8161a4:	dec00204 	addi	sp,sp,8
  8161a8:	f800283a 	ret

008161ac <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset);

bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
  8161ac:	defffa04 	addi	sp,sp,-24
  8161b0:	dfc00515 	stw	ra,20(sp)
  8161b4:	df000415 	stw	fp,16(sp)
  8161b8:	df000404 	addi	fp,sp,16
  8161bc:	e13ffe15 	stw	r4,-8(fp)
  8161c0:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
  8161c4:	e03ffd15 	stw	zero,-12(fp)

	if (alt_up_sd_card_is_Present()) {
  8161c8:	0818fd80 	call	818fd8 <alt_up_sd_card_is_Present>
  8161cc:	1005003a 	cmpeq	r2,r2,zero
  8161d0:	1000221e 	bne	r2,zero,81625c <Write_Sector_Data+0xb0>
		short int reg_state = 0xff;
  8161d4:	00803fc4 	movi	r2,255
  8161d8:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  8161dc:	d0a74a17 	ldw	r2,-25304(gp)
  8161e0:	1009883a 	mov	r4,r2
  8161e4:	e0fffe17 	ldw	r3,-8(fp)
  8161e8:	e0bfff17 	ldw	r2,-4(fp)
  8161ec:	1885883a 	add	r2,r3,r2
  8161f0:	1006927a 	slli	r3,r2,9
  8161f4:	2005883a 	mov	r2,r4
  8161f8:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  8161fc:	d0a74917 	ldw	r2,-25308(gp)
  816200:	1007883a 	mov	r3,r2
  816204:	00800604 	movi	r2,24
  816208:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  81620c:	d0a74617 	ldw	r2,-25320(gp)
  816210:	1080002b 	ldhuio	r2,0(r2)
  816214:	e0bffc0d 	sth	r2,-16(fp)
		} while ((reg_state & 0x04) != 0);
  816218:	e0bffc0b 	ldhu	r2,-16(fp)
  81621c:	10bfffcc 	andi	r2,r2,65535
  816220:	1080010c 	andi	r2,r2,4
  816224:	1004c03a 	cmpne	r2,r2,zero
  816228:	103ff81e 	bne	r2,zero,81620c <Write_Sector_Data+0x60>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
  81622c:	e0bffc0b 	ldhu	r2,-16(fp)
  816230:	10bfffcc 	andi	r2,r2,65535
  816234:	1080040c 	andi	r2,r2,16
  816238:	1004c03a 	cmpne	r2,r2,zero
  81623c:	1000071e 	bne	r2,zero,81625c <Write_Sector_Data+0xb0>
			result = true;
  816240:	00800044 	movi	r2,1
  816244:	e0bffd15 	stw	r2,-12(fp)
			current_sector_modified = false;
  816248:	d0274f15 	stw	zero,-25284(gp)
			current_sector_index = sector_index + partition_offset;
  81624c:	e0fffe17 	ldw	r3,-8(fp)
  816250:	e0bfff17 	ldw	r2,-4(fp)
  816254:	1885883a 	add	r2,r3,r2
  816258:	d0a75015 	stw	r2,-25280(gp)
		}
	}
	return result;
  81625c:	e0bffd17 	ldw	r2,-12(fp)
}
  816260:	e037883a 	mov	sp,fp
  816264:	dfc00117 	ldw	ra,4(sp)
  816268:	df000017 	ldw	fp,0(sp)
  81626c:	dec00204 	addi	sp,sp,8
  816270:	f800283a 	ret

00816274 <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
  816274:	defffd04 	addi	sp,sp,-12
  816278:	dfc00215 	stw	ra,8(sp)
  81627c:	df000115 	stw	fp,4(sp)
  816280:	df000104 	addi	fp,sp,4
	bool result = true;
  816284:	00800044 	movi	r2,1
  816288:	e0bfff15 	stw	r2,-4(fp)
	if (current_sector_modified) {
  81628c:	d0a74f17 	ldw	r2,-25284(gp)
  816290:	1005003a 	cmpeq	r2,r2,zero
  816294:	1000051e 	bne	r2,zero,8162ac <Save_Modified_Sector+0x38>
		result = Write_Sector_Data(current_sector_index, 0);
  816298:	d0a75017 	ldw	r2,-25280(gp)
  81629c:	1009883a 	mov	r4,r2
  8162a0:	000b883a 	mov	r5,zero
  8162a4:	08161ac0 	call	8161ac <Write_Sector_Data>
  8162a8:	e0bfff15 	stw	r2,-4(fp)
	}
	return result;
  8162ac:	e0bfff17 	ldw	r2,-4(fp)
}
  8162b0:	e037883a 	mov	sp,fp
  8162b4:	dfc00117 	ldw	ra,4(sp)
  8162b8:	df000017 	ldw	fp,0(sp)
  8162bc:	dec00204 	addi	sp,sp,8
  8162c0:	f800283a 	ret

008162c4 <Read_Sector_Data>:

bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  8162c4:	defff904 	addi	sp,sp,-28
  8162c8:	dfc00615 	stw	ra,24(sp)
  8162cc:	df000515 	stw	fp,20(sp)
  8162d0:	df000504 	addi	fp,sp,20
  8162d4:	e13ffd15 	stw	r4,-12(fp)
  8162d8:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
  8162dc:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
  8162e0:	0818fd80 	call	818fd8 <alt_up_sd_card_is_Present>
  8162e4:	1005003a 	cmpeq	r2,r2,zero
  8162e8:	10002d1e 	bne	r2,zero,8163a0 <Read_Sector_Data+0xdc>
		short int reg_state = 0xff;
  8162ec:	00803fc4 	movi	r2,255
  8162f0:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
  8162f4:	d0a74f17 	ldw	r2,-25284(gp)
  8162f8:	1005003a 	cmpeq	r2,r2,zero
  8162fc:	1000081e 	bne	r2,zero,816320 <Read_Sector_Data+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
  816300:	d0a75017 	ldw	r2,-25280(gp)
  816304:	1009883a 	mov	r4,r2
  816308:	000b883a 	mov	r5,zero
  81630c:	08161ac0 	call	8161ac <Write_Sector_Data>
  816310:	1004c03a 	cmpne	r2,r2,zero
  816314:	1000021e 	bne	r2,zero,816320 <Read_Sector_Data+0x5c>
				return false;
  816318:	e03fff15 	stw	zero,-4(fp)
  81631c:	00002206 	br	8163a8 <Read_Sector_Data+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  816320:	d0a74a17 	ldw	r2,-25304(gp)
  816324:	1009883a 	mov	r4,r2
  816328:	e0fffd17 	ldw	r3,-12(fp)
  81632c:	e0bffe17 	ldw	r2,-8(fp)
  816330:	1885883a 	add	r2,r3,r2
  816334:	1006927a 	slli	r3,r2,9
  816338:	2005883a 	mov	r2,r4
  81633c:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  816340:	d0a74917 	ldw	r2,-25308(gp)
  816344:	1007883a 	mov	r3,r2
  816348:	00800444 	movi	r2,17
  81634c:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  816350:	d0a74617 	ldw	r2,-25320(gp)
  816354:	1080002b 	ldhuio	r2,0(r2)
  816358:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
  81635c:	e0bffb0b 	ldhu	r2,-20(fp)
  816360:	10bfffcc 	andi	r2,r2,65535
  816364:	1080010c 	andi	r2,r2,4
  816368:	1004c03a 	cmpne	r2,r2,zero
  81636c:	103ff81e 	bne	r2,zero,816350 <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
  816370:	e0bffb0b 	ldhu	r2,-20(fp)
  816374:	10bfffcc 	andi	r2,r2,65535
  816378:	1080040c 	andi	r2,r2,16
  81637c:	1004c03a 	cmpne	r2,r2,zero
  816380:	1000071e 	bne	r2,zero,8163a0 <Read_Sector_Data+0xdc>
			result = true;
  816384:	00800044 	movi	r2,1
  816388:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
  81638c:	d0274f15 	stw	zero,-25284(gp)
			current_sector_index = sector_index + partition_offset;
  816390:	e0fffd17 	ldw	r3,-12(fp)
  816394:	e0bffe17 	ldw	r2,-8(fp)
  816398:	1885883a 	add	r2,r3,r2
  81639c:	d0a75015 	stw	r2,-25280(gp)
		}
	}
	return result;
  8163a0:	e0bffc17 	ldw	r2,-16(fp)
  8163a4:	e0bfff15 	stw	r2,-4(fp)
  8163a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8163ac:	e037883a 	mov	sp,fp
  8163b0:	dfc00117 	ldw	ra,4(sp)
  8163b4:	df000017 	ldw	fp,0(sp)
  8163b8:	dec00204 	addi	sp,sp,8
  8163bc:	f800283a 	ret

008163c0 <get_cluster_flag>:

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  8163c0:	defffa04 	addi	sp,sp,-24
  8163c4:	dfc00515 	stw	ra,20(sp)
  8163c8:	df000415 	stw	fp,16(sp)
  8163cc:	df000404 	addi	fp,sp,16
  8163d0:	e13ffd15 	stw	r4,-12(fp)
  8163d4:	e17ffe15 	stw	r5,-8(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  8163d8:	e0bffd17 	ldw	r2,-12(fp)
  8163dc:	1006d23a 	srli	r3,r2,8
  8163e0:	d0a74c17 	ldw	r2,-25296(gp)
  8163e4:	1885883a 	add	r2,r3,r2
  8163e8:	e0bffc15 	stw	r2,-16(fp)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  8163ec:	008020b4 	movhi	r2,130
  8163f0:	1089df04 	addi	r2,r2,10108
  8163f4:	10c01117 	ldw	r3,68(r2)
  8163f8:	e0bffc17 	ldw	r2,-16(fp)
  8163fc:	10c5883a 	add	r2,r2,r3
  816400:	e0bffc15 	stw	r2,-16(fp)

	if (sector_index != current_sector_index) {
  816404:	d0e75017 	ldw	r3,-25280(gp)
  816408:	e0bffc17 	ldw	r2,-16(fp)
  81640c:	10c00726 	beq	r2,r3,81642c <get_cluster_flag+0x6c>
		if (Read_Sector_Data(sector_index, 0) == false) {
  816410:	e13ffc17 	ldw	r4,-16(fp)
  816414:	000b883a 	mov	r5,zero
  816418:	08162c40 	call	8162c4 <Read_Sector_Data>
  81641c:	1004c03a 	cmpne	r2,r2,zero
  816420:	1000021e 	bne	r2,zero,81642c <get_cluster_flag+0x6c>
			return false;
  816424:	e03fff15 	stw	zero,-4(fp)
  816428:	00000d06 	br	816460 <get_cluster_flag+0xa0>
		}
	}
	*flag
  81642c:	d0a74e17 	ldw	r2,-25288(gp)
  816430:	10800a17 	ldw	r2,40(r2)
  816434:	1007883a 	mov	r3,r2
  816438:	e0bffd17 	ldw	r2,-12(fp)
  81643c:	10803fcc 	andi	r2,r2,255
  816440:	1085883a 	add	r2,r2,r2
  816444:	1885883a 	add	r2,r3,r2
  816448:	1080002b 	ldhuio	r2,0(r2)
  81644c:	1007883a 	mov	r3,r2
  816450:	e0bffe17 	ldw	r2,-8(fp)
  816454:	10c0000d 	sth	r3,0(r2)
			= (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
	return true;
  816458:	00800044 	movi	r2,1
  81645c:	e0bfff15 	stw	r2,-4(fp)
  816460:	e0bfff17 	ldw	r2,-4(fp)
}
  816464:	e037883a 	mov	sp,fp
  816468:	dfc00117 	ldw	ra,4(sp)
  81646c:	df000017 	ldw	fp,0(sp)
  816470:	dec00204 	addi	sp,sp,8
  816474:	f800283a 	ret

00816478 <mark_cluster>:

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
  816478:	defff904 	addi	sp,sp,-28
  81647c:	dfc00615 	stw	ra,24(sp)
  816480:	df000515 	stw	fp,20(sp)
  816484:	df000504 	addi	fp,sp,20
  816488:	e13ffc15 	stw	r4,-16(fp)
  81648c:	e1bffe15 	stw	r6,-8(fp)
  816490:	e17ffd0d 	sth	r5,-12(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  816494:	e0bffc17 	ldw	r2,-16(fp)
  816498:	1006d23a 	srli	r3,r2,8
  81649c:	d0a74c17 	ldw	r2,-25296(gp)
  8164a0:	1885883a 	add	r2,r3,r2
  8164a4:	e0bffb15 	stw	r2,-20(fp)

	if (first_fat) {
  8164a8:	e0bffe17 	ldw	r2,-8(fp)
  8164ac:	1005003a 	cmpeq	r2,r2,zero
  8164b0:	1000071e 	bne	r2,zero,8164d0 <mark_cluster+0x58>
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  8164b4:	008020b4 	movhi	r2,130
  8164b8:	1089df04 	addi	r2,r2,10108
  8164bc:	10c01117 	ldw	r3,68(r2)
  8164c0:	e0bffb17 	ldw	r2,-20(fp)
  8164c4:	10c5883a 	add	r2,r2,r3
  8164c8:	e0bffb15 	stw	r2,-20(fp)
  8164cc:	00000606 	br	8164e8 <mark_cluster+0x70>
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
  8164d0:	008020b4 	movhi	r2,130
  8164d4:	1089df04 	addi	r2,r2,10108
  8164d8:	10c01217 	ldw	r3,72(r2)
  8164dc:	e0bffb17 	ldw	r2,-20(fp)
  8164e0:	10c5883a 	add	r2,r2,r3
  8164e4:	e0bffb15 	stw	r2,-20(fp)
	}

	if (sector_index != current_sector_index) {
  8164e8:	d0e75017 	ldw	r3,-25280(gp)
  8164ec:	e0bffb17 	ldw	r2,-20(fp)
  8164f0:	10c00726 	beq	r2,r3,816510 <mark_cluster+0x98>
		if (Read_Sector_Data(sector_index, 0) == false) {
  8164f4:	e13ffb17 	ldw	r4,-20(fp)
  8164f8:	000b883a 	mov	r5,zero
  8164fc:	08162c40 	call	8162c4 <Read_Sector_Data>
  816500:	1004c03a 	cmpne	r2,r2,zero
  816504:	1000021e 	bne	r2,zero,816510 <mark_cluster+0x98>
			return false;
  816508:	e03fff15 	stw	zero,-4(fp)
  81650c:	00000d06 	br	816544 <mark_cluster+0xcc>
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  816510:	d0a74e17 	ldw	r2,-25288(gp)
  816514:	10800a17 	ldw	r2,40(r2)
  816518:	1007883a 	mov	r3,r2
  81651c:	e0bffc17 	ldw	r2,-16(fp)
  816520:	10803fcc 	andi	r2,r2,255
  816524:	1085883a 	add	r2,r2,r2
  816528:	1885883a 	add	r2,r3,r2
  81652c:	e0fffd0f 	ldh	r3,-12(fp)
  816530:	10c0002d 	sthio	r3,0(r2)
	current_sector_modified = true;
  816534:	00800044 	movi	r2,1
  816538:	d0a74f15 	stw	r2,-25284(gp)
	return true;
  81653c:	00800044 	movi	r2,1
  816540:	e0bfff15 	stw	r2,-4(fp)
  816544:	e0bfff17 	ldw	r2,-4(fp)
}
  816548:	e037883a 	mov	sp,fp
  81654c:	dfc00117 	ldw	ra,4(sp)
  816550:	df000017 	ldw	fp,0(sp)
  816554:	dec00204 	addi	sp,sp,8
  816558:	f800283a 	ret

0081655c <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
  81655c:	defff704 	addi	sp,sp,-36
  816560:	dfc00815 	stw	ra,32(sp)
  816564:	df000715 	stw	fp,28(sp)
  816568:	df000704 	addi	fp,sp,28
	bool result = false;
  81656c:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data_Attempt_CRC(0, 0)) {
  816570:	0009883a 	mov	r4,zero
  816574:	000b883a 	mov	r5,zero
  816578:	081a6dc0 	call	81a6dc <Read_Sector_Data_Attempt_CRC>
  81657c:	1005003a 	cmpeq	r2,r2,zero
  816580:	10005c1e 	bne	r2,zero,8166f4 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
  816584:	d0a74e17 	ldw	r2,-25288(gp)
  816588:	10800a17 	ldw	r2,40(r2)
  81658c:	10807f84 	addi	r2,r2,510
  816590:	1080002b 	ldhuio	r2,0(r2)
  816594:	10bfffcc 	andi	r2,r2,65535
  816598:	10a0001c 	xori	r2,r2,32768
  81659c:	10a00004 	addi	r2,r2,-32768
  8165a0:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
  8165a4:	e0bffd17 	ldw	r2,-12(fp)
  8165a8:	10ffffcc 	andi	r3,r2,65535
  8165ac:	00aa9554 	movui	r2,43605
  8165b0:	1880501e 	bne	r3,r2,8166f4 <Check_for_Master_Boot_Record+0x198>
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
  8165b4:	e03ffe15 	stw	zero,-8(fp)
  8165b8:	00004b06 	br	8166e8 <Check_for_Master_Boot_Record+0x18c>
				int partition_data_offset = (index * 16) + 0x01be;
  8165bc:	e0bffe17 	ldw	r2,-8(fp)
  8165c0:	1004913a 	slli	r2,r2,4
  8165c4:	10806f84 	addi	r2,r2,446
  8165c8:	e0bffa15 	stw	r2,-24(fp)
				char type;

				// Read Partition type
				type
  8165cc:	d0a74e17 	ldw	r2,-25288(gp)
  8165d0:	10800a17 	ldw	r2,40(r2)
  8165d4:	1007883a 	mov	r3,r2
  8165d8:	e0bffa17 	ldw	r2,-24(fp)
  8165dc:	1885883a 	add	r2,r3,r2
  8165e0:	10800104 	addi	r2,r2,4
  8165e4:	10800023 	ldbuio	r2,0(r2)
  8165e8:	e0bff905 	stb	r2,-28(fp)
						= (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14)) {
  8165ec:	e0bff907 	ldb	r2,-28(fp)
  8165f0:	10800060 	cmpeqi	r2,r2,1
  8165f4:	1000091e 	bne	r2,zero,81661c <Check_for_Master_Boot_Record+0xc0>
  8165f8:	e0bff907 	ldb	r2,-28(fp)
  8165fc:	10800120 	cmpeqi	r2,r2,4
  816600:	1000061e 	bne	r2,zero,81661c <Check_for_Master_Boot_Record+0xc0>
  816604:	e0bff907 	ldb	r2,-28(fp)
  816608:	108001a0 	cmpeqi	r2,r2,6
  81660c:	1000031e 	bne	r2,zero,81661c <Check_for_Master_Boot_Record+0xc0>
  816610:	e0bff907 	ldb	r2,-28(fp)
  816614:	10800398 	cmpnei	r2,r2,14
  816618:	1000301e 	bne	r2,zero,8166dc <Check_for_Master_Boot_Record+0x180>
					// Get partition offset and size.
					offset
  81661c:	d0a74e17 	ldw	r2,-25288(gp)
  816620:	10800a17 	ldw	r2,40(r2)
  816624:	1007883a 	mov	r3,r2
  816628:	e0bffa17 	ldw	r2,-24(fp)
  81662c:	1885883a 	add	r2,r3,r2
  816630:	10800284 	addi	r2,r2,10
  816634:	1080002b 	ldhuio	r2,0(r2)
  816638:	10bfffcc 	andi	r2,r2,65535
  81663c:	1008943a 	slli	r4,r2,16
  816640:	d0a74e17 	ldw	r2,-25288(gp)
  816644:	10800a17 	ldw	r2,40(r2)
  816648:	1007883a 	mov	r3,r2
  81664c:	e0bffa17 	ldw	r2,-24(fp)
  816650:	1885883a 	add	r2,r3,r2
  816654:	10800204 	addi	r2,r2,8
  816658:	1080002b 	ldhuio	r2,0(r2)
  81665c:	10bfffcc 	andi	r2,r2,65535
  816660:	2084b03a 	or	r2,r4,r2
  816664:	e0bffc15 	stw	r2,-16(fp)
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
					partition_size
  816668:	d0a74e17 	ldw	r2,-25288(gp)
  81666c:	10800a17 	ldw	r2,40(r2)
  816670:	1007883a 	mov	r3,r2
  816674:	e0bffa17 	ldw	r2,-24(fp)
  816678:	1885883a 	add	r2,r3,r2
  81667c:	10800384 	addi	r2,r2,14
  816680:	1080002b 	ldhuio	r2,0(r2)
  816684:	10bfffcc 	andi	r2,r2,65535
  816688:	1008943a 	slli	r4,r2,16
  81668c:	d0a74e17 	ldw	r2,-25288(gp)
  816690:	10800a17 	ldw	r2,40(r2)
  816694:	1007883a 	mov	r3,r2
  816698:	e0bffa17 	ldw	r2,-24(fp)
  81669c:	1885883a 	add	r2,r3,r2
  8166a0:	10800304 	addi	r2,r2,12
  8166a4:	1080002b 	ldhuio	r2,0(r2)
  8166a8:	10bfffcc 	andi	r2,r2,65535
  8166ac:	2084b03a 	or	r2,r4,r2
  8166b0:	e0bffb15 	stw	r2,-20(fp)
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
  8166b4:	e0bffb17 	ldw	r2,-20(fp)
  8166b8:	10800050 	cmplti	r2,r2,1
  8166bc:	1000071e 	bne	r2,zero,8166dc <Check_for_Master_Boot_Record+0x180>
						result = true;
  8166c0:	00800044 	movi	r2,1
  8166c4:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
  8166c8:	e0bffb17 	ldw	r2,-20(fp)
  8166cc:	d0a74d15 	stw	r2,-25292(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
  8166d0:	e0bffc17 	ldw	r2,-16(fp)
  8166d4:	d0a74c15 	stw	r2,-25296(gp)
						break;
  8166d8:	00000606 	br	8166f4 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
  8166dc:	e0bffe17 	ldw	r2,-8(fp)
  8166e0:	10800044 	addi	r2,r2,1
  8166e4:	e0bffe15 	stw	r2,-8(fp)
  8166e8:	e0bffe17 	ldw	r2,-8(fp)
  8166ec:	10800110 	cmplti	r2,r2,4
  8166f0:	103fb21e 	bne	r2,zero,8165bc <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
  8166f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8166f8:	e037883a 	mov	sp,fp
  8166fc:	dfc00117 	ldw	ra,4(sp)
  816700:	df000017 	ldw	fp,0(sp)
  816704:	dec00204 	addi	sp,sp,8
  816708:	f800283a 	ret

0081670c <Read_File_Record_At_Offset>:

bool Read_File_Record_At_Offset(int offset, t_file_record *record,
		unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
  81670c:	defff804 	addi	sp,sp,-32
  816710:	dfc00715 	stw	ra,28(sp)
  816714:	df000615 	stw	fp,24(sp)
  816718:	df000604 	addi	fp,sp,24
  81671c:	e13ffc15 	stw	r4,-16(fp)
  816720:	e17ffd15 	stw	r5,-12(fp)
  816724:	e1bffe15 	stw	r6,-8(fp)
  816728:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
  81672c:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  816730:	e0bffc17 	ldw	r2,-16(fp)
  816734:	108007cc 	andi	r2,r2,31
  816738:	1004c03a 	cmpne	r2,r2,zero
  81673c:	10008e1e 	bne	r2,zero,816978 <Read_File_Record_At_Offset+0x26c>
  816740:	0818fd80 	call	818fd8 <alt_up_sd_card_is_Present>
  816744:	1005003a 	cmpeq	r2,r2,zero
  816748:	10008b1e 	bne	r2,zero,816978 <Read_File_Record_At_Offset+0x26c>
  81674c:	d0a74517 	ldw	r2,-25324(gp)
  816750:	1005003a 	cmpeq	r2,r2,zero
  816754:	1000881e 	bne	r2,zero,816978 <Read_File_Record_At_Offset+0x26c>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
  816758:	e03ffa15 	stw	zero,-24(fp)
  81675c:	00001006 	br	8167a0 <Read_File_Record_At_Offset+0x94>
			record->name[counter]
  816760:	e17ffa17 	ldw	r5,-24(fp)
  816764:	d0a74e17 	ldw	r2,-25288(gp)
  816768:	10800a17 	ldw	r2,40(r2)
  81676c:	1009883a 	mov	r4,r2
  816770:	e0fffc17 	ldw	r3,-16(fp)
  816774:	e0bffa17 	ldw	r2,-24(fp)
  816778:	1885883a 	add	r2,r3,r2
  81677c:	2085883a 	add	r2,r4,r2
  816780:	10800023 	ldbuio	r2,0(r2)
  816784:	1007883a 	mov	r3,r2
  816788:	e0bffd17 	ldw	r2,-12(fp)
  81678c:	1145883a 	add	r2,r2,r5
  816790:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
  816794:	e0bffa17 	ldw	r2,-24(fp)
  816798:	10800044 	addi	r2,r2,1
  81679c:	e0bffa15 	stw	r2,-24(fp)
  8167a0:	e0bffa17 	ldw	r2,-24(fp)
  8167a4:	10800210 	cmplti	r2,r2,8
  8167a8:	103fed1e 	bne	r2,zero,816760 <Read_File_Record_At_Offset+0x54>
			record->name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
  8167ac:	e03ffa15 	stw	zero,-24(fp)
  8167b0:	00001206 	br	8167fc <Read_File_Record_At_Offset+0xf0>
			record->extension[counter]
  8167b4:	e17ffa17 	ldw	r5,-24(fp)
  8167b8:	d0a74e17 	ldw	r2,-25288(gp)
  8167bc:	10800a17 	ldw	r2,40(r2)
  8167c0:	1009883a 	mov	r4,r2
  8167c4:	e0fffc17 	ldw	r3,-16(fp)
  8167c8:	e0bffa17 	ldw	r2,-24(fp)
  8167cc:	1885883a 	add	r2,r3,r2
  8167d0:	2085883a 	add	r2,r4,r2
  8167d4:	10800204 	addi	r2,r2,8
  8167d8:	10800023 	ldbuio	r2,0(r2)
  8167dc:	1007883a 	mov	r3,r2
  8167e0:	e0bffd17 	ldw	r2,-12(fp)
  8167e4:	2885883a 	add	r2,r5,r2
  8167e8:	10800204 	addi	r2,r2,8
  8167ec:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++) {
			record->name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
  8167f0:	e0bffa17 	ldw	r2,-24(fp)
  8167f4:	10800044 	addi	r2,r2,1
  8167f8:	e0bffa15 	stw	r2,-24(fp)
  8167fc:	e0bffa17 	ldw	r2,-24(fp)
  816800:	108000d0 	cmplti	r2,r2,3
  816804:	103feb1e 	bne	r2,zero,8167b4 <Read_File_Record_At_Offset+0xa8>
			record->extension[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}
		record->attributes
  816808:	d0a74e17 	ldw	r2,-25288(gp)
  81680c:	10800a17 	ldw	r2,40(r2)
  816810:	1007883a 	mov	r3,r2
  816814:	e0bffc17 	ldw	r2,-16(fp)
  816818:	1885883a 	add	r2,r3,r2
  81681c:	108002c4 	addi	r2,r2,11
  816820:	10800023 	ldbuio	r2,0(r2)
  816824:	1007883a 	mov	r3,r2
  816828:	e0bffd17 	ldw	r2,-12(fp)
  81682c:	10c002c5 	stb	r3,11(r2)
				= (char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time
  816830:	d0a74e17 	ldw	r2,-25288(gp)
  816834:	10800a17 	ldw	r2,40(r2)
  816838:	1007883a 	mov	r3,r2
  81683c:	e0bffc17 	ldw	r2,-16(fp)
  816840:	1885883a 	add	r2,r3,r2
  816844:	10800384 	addi	r2,r2,14
  816848:	1080002b 	ldhuio	r2,0(r2)
  81684c:	1007883a 	mov	r3,r2
  816850:	e0bffd17 	ldw	r2,-12(fp)
  816854:	10c0030d 	sth	r3,12(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date
  816858:	d0a74e17 	ldw	r2,-25288(gp)
  81685c:	10800a17 	ldw	r2,40(r2)
  816860:	1007883a 	mov	r3,r2
  816864:	e0bffc17 	ldw	r2,-16(fp)
  816868:	1885883a 	add	r2,r3,r2
  81686c:	10800404 	addi	r2,r2,16
  816870:	1080002b 	ldhuio	r2,0(r2)
  816874:	1007883a 	mov	r3,r2
  816878:	e0bffd17 	ldw	r2,-12(fp)
  81687c:	10c0038d 	sth	r3,14(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date
  816880:	d0a74e17 	ldw	r2,-25288(gp)
  816884:	10800a17 	ldw	r2,40(r2)
  816888:	1007883a 	mov	r3,r2
  81688c:	e0bffc17 	ldw	r2,-16(fp)
  816890:	1885883a 	add	r2,r3,r2
  816894:	10800484 	addi	r2,r2,18
  816898:	1080002b 	ldhuio	r2,0(r2)
  81689c:	1007883a 	mov	r3,r2
  8168a0:	e0bffd17 	ldw	r2,-12(fp)
  8168a4:	10c0040d 	sth	r3,16(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time
  8168a8:	d0a74e17 	ldw	r2,-25288(gp)
  8168ac:	10800a17 	ldw	r2,40(r2)
  8168b0:	1007883a 	mov	r3,r2
  8168b4:	e0bffc17 	ldw	r2,-16(fp)
  8168b8:	1885883a 	add	r2,r3,r2
  8168bc:	10800584 	addi	r2,r2,22
  8168c0:	1080002b 	ldhuio	r2,0(r2)
  8168c4:	1007883a 	mov	r3,r2
  8168c8:	e0bffd17 	ldw	r2,-12(fp)
  8168cc:	10c0048d 	sth	r3,18(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date
  8168d0:	d0a74e17 	ldw	r2,-25288(gp)
  8168d4:	10800a17 	ldw	r2,40(r2)
  8168d8:	1007883a 	mov	r3,r2
  8168dc:	e0bffc17 	ldw	r2,-16(fp)
  8168e0:	1885883a 	add	r2,r3,r2
  8168e4:	10800604 	addi	r2,r2,24
  8168e8:	1080002b 	ldhuio	r2,0(r2)
  8168ec:	1007883a 	mov	r3,r2
  8168f0:	e0bffd17 	ldw	r2,-12(fp)
  8168f4:	10c0050d 	sth	r3,20(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index
  8168f8:	d0a74e17 	ldw	r2,-25288(gp)
  8168fc:	10800a17 	ldw	r2,40(r2)
  816900:	1007883a 	mov	r3,r2
  816904:	e0bffc17 	ldw	r2,-16(fp)
  816908:	1885883a 	add	r2,r3,r2
  81690c:	10800684 	addi	r2,r2,26
  816910:	1080002b 	ldhuio	r2,0(r2)
  816914:	1007883a 	mov	r3,r2
  816918:	e0bffd17 	ldw	r2,-12(fp)
  81691c:	10c0058d 	sth	r3,22(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes
  816920:	d0a74e17 	ldw	r2,-25288(gp)
  816924:	10800a17 	ldw	r2,40(r2)
  816928:	1007883a 	mov	r3,r2
  81692c:	e0bffc17 	ldw	r2,-16(fp)
  816930:	1885883a 	add	r2,r3,r2
  816934:	10800704 	addi	r2,r2,28
  816938:	10800037 	ldwio	r2,0(r2)
  81693c:	1007883a 	mov	r3,r2
  816940:	e0bffd17 	ldw	r2,-12(fp)
  816944:	10c00615 	stw	r3,24(r2)
				= (unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
  816948:	e0fffd17 	ldw	r3,-12(fp)
  81694c:	e0bffe17 	ldw	r2,-8(fp)
  816950:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
  816954:	e0fffd17 	ldw	r3,-12(fp)
  816958:	e0bfff17 	ldw	r2,-4(fp)
  81695c:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
  816960:	e0bffc17 	ldw	r2,-16(fp)
  816964:	1007883a 	mov	r3,r2
  816968:	e0bffd17 	ldw	r2,-12(fp)
  81696c:	10c00c0d 	sth	r3,48(r2)
		result = true;
  816970:	00800044 	movi	r2,1
  816974:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
  816978:	e0bffb17 	ldw	r2,-20(fp)
}
  81697c:	e037883a 	mov	sp,fp
  816980:	dfc00117 	ldw	ra,4(sp)
  816984:	df000017 	ldw	fp,0(sp)
  816988:	dec00204 	addi	sp,sp,8
  81698c:	f800283a 	ret

00816990 <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
  816990:	defff904 	addi	sp,sp,-28
  816994:	dfc00615 	stw	ra,24(sp)
  816998:	df000515 	stw	fp,20(sp)
  81699c:	df000504 	addi	fp,sp,20
  8169a0:	e13ffe15 	stw	r4,-8(fp)
  8169a4:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
  8169a8:	e03ffd15 	stw	zero,-12(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  8169ac:	e0bffe17 	ldw	r2,-8(fp)
  8169b0:	108007cc 	andi	r2,r2,31
  8169b4:	1004c03a 	cmpne	r2,r2,zero
  8169b8:	10009d1e 	bne	r2,zero,816c30 <Write_File_Record_At_Offset+0x2a0>
  8169bc:	0818fd80 	call	818fd8 <alt_up_sd_card_is_Present>
  8169c0:	1005003a 	cmpeq	r2,r2,zero
  8169c4:	10009a1e 	bne	r2,zero,816c30 <Write_File_Record_At_Offset+0x2a0>
  8169c8:	d0a74517 	ldw	r2,-25324(gp)
  8169cc:	1005003a 	cmpeq	r2,r2,zero
  8169d0:	1000971e 	bne	r2,zero,816c30 <Write_File_Record_At_Offset+0x2a0>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
  8169d4:	e03ffc15 	stw	zero,-16(fp)
  8169d8:	00001e06 	br	816a54 <Write_File_Record_At_Offset+0xc4>
			short int two_chars = (short int) record->name[counter + 1];
  8169dc:	e0bffc17 	ldw	r2,-16(fp)
  8169e0:	10c00044 	addi	r3,r2,1
  8169e4:	e0bfff17 	ldw	r2,-4(fp)
  8169e8:	10c5883a 	add	r2,r2,r3
  8169ec:	10800003 	ldbu	r2,0(r2)
  8169f0:	10803fcc 	andi	r2,r2,255
  8169f4:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars << 8;
  8169f8:	e0bffb0f 	ldh	r2,-20(fp)
  8169fc:	1004923a 	slli	r2,r2,8
  816a00:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars | record->name[counter];
  816a04:	e0fffc17 	ldw	r3,-16(fp)
  816a08:	e0bfff17 	ldw	r2,-4(fp)
  816a0c:	10c5883a 	add	r2,r2,r3
  816a10:	10800003 	ldbu	r2,0(r2)
  816a14:	10c03fcc 	andi	r3,r2,255
  816a18:	e0bffb0b 	ldhu	r2,-20(fp)
  816a1c:	10c4b03a 	or	r2,r2,r3
  816a20:	e0bffb0d 	sth	r2,-20(fp)
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  816a24:	d0a74e17 	ldw	r2,-25288(gp)
  816a28:	10800a17 	ldw	r2,40(r2)
  816a2c:	1009883a 	mov	r4,r2
  816a30:	e0fffe17 	ldw	r3,-8(fp)
  816a34:	e0bffc17 	ldw	r2,-16(fp)
  816a38:	1885883a 	add	r2,r3,r2
  816a3c:	2085883a 	add	r2,r4,r2
  816a40:	e0fffb0f 	ldh	r3,-20(fp)
  816a44:	10c0002d 	sthio	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
  816a48:	e0bffc17 	ldw	r2,-16(fp)
  816a4c:	10800084 	addi	r2,r2,2
  816a50:	e0bffc15 	stw	r2,-16(fp)
  816a54:	e0bffc17 	ldw	r2,-16(fp)
  816a58:	10800210 	cmplti	r2,r2,8
  816a5c:	103fdf1e 	bne	r2,zero,8169dc <Write_File_Record_At_Offset+0x4c>
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
  816a60:	e03ffc15 	stw	zero,-16(fp)
  816a64:	00001306 	br	816ab4 <Write_File_Record_At_Offset+0x124>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
  816a68:	d0a74e17 	ldw	r2,-25288(gp)
  816a6c:	10800a17 	ldw	r2,40(r2)
  816a70:	1009883a 	mov	r4,r2
  816a74:	e0fffe17 	ldw	r3,-8(fp)
  816a78:	e0bffc17 	ldw	r2,-16(fp)
  816a7c:	1885883a 	add	r2,r3,r2
  816a80:	2085883a 	add	r2,r4,r2
  816a84:	11000204 	addi	r4,r2,8
  816a88:	e0fffc17 	ldw	r3,-16(fp)
  816a8c:	e0bfff17 	ldw	r2,-4(fp)
  816a90:	1885883a 	add	r2,r3,r2
  816a94:	10800204 	addi	r2,r2,8
  816a98:	10800003 	ldbu	r2,0(r2)
  816a9c:	10c03fcc 	andi	r3,r2,255
  816aa0:	2005883a 	mov	r2,r4
  816aa4:	10c00025 	stbio	r3,0(r2)
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
  816aa8:	e0bffc17 	ldw	r2,-16(fp)
  816aac:	10800044 	addi	r2,r2,1
  816ab0:	e0bffc15 	stw	r2,-16(fp)
  816ab4:	e0bffc17 	ldw	r2,-16(fp)
  816ab8:	108000d0 	cmplti	r2,r2,3
  816abc:	103fea1e 	bne	r2,zero,816a68 <Write_File_Record_At_Offset+0xd8>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
		}
		IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
  816ac0:	d0a74e17 	ldw	r2,-25288(gp)
  816ac4:	10800a17 	ldw	r2,40(r2)
  816ac8:	1007883a 	mov	r3,r2
  816acc:	e0bffe17 	ldw	r2,-8(fp)
  816ad0:	1885883a 	add	r2,r3,r2
  816ad4:	110002c4 	addi	r4,r2,11
  816ad8:	e0bfff17 	ldw	r2,-4(fp)
  816adc:	108002c3 	ldbu	r2,11(r2)
  816ae0:	10c03fcc 	andi	r3,r2,255
  816ae4:	2005883a 	mov	r2,r4
  816ae8:	10c00025 	stbio	r3,0(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
  816aec:	d0a74e17 	ldw	r2,-25288(gp)
  816af0:	10800a17 	ldw	r2,40(r2)
  816af4:	1007883a 	mov	r3,r2
  816af8:	e0bffe17 	ldw	r2,-8(fp)
  816afc:	1885883a 	add	r2,r3,r2
  816b00:	11000384 	addi	r4,r2,14
  816b04:	e0bfff17 	ldw	r2,-4(fp)
  816b08:	1080030b 	ldhu	r2,12(r2)
  816b0c:	10ffffcc 	andi	r3,r2,65535
  816b10:	2005883a 	mov	r2,r4
  816b14:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
  816b18:	d0a74e17 	ldw	r2,-25288(gp)
  816b1c:	10800a17 	ldw	r2,40(r2)
  816b20:	1007883a 	mov	r3,r2
  816b24:	e0bffe17 	ldw	r2,-8(fp)
  816b28:	1885883a 	add	r2,r3,r2
  816b2c:	11000404 	addi	r4,r2,16
  816b30:	e0bfff17 	ldw	r2,-4(fp)
  816b34:	1080038b 	ldhu	r2,14(r2)
  816b38:	10ffffcc 	andi	r3,r2,65535
  816b3c:	2005883a 	mov	r2,r4
  816b40:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
  816b44:	d0a74e17 	ldw	r2,-25288(gp)
  816b48:	10800a17 	ldw	r2,40(r2)
  816b4c:	1007883a 	mov	r3,r2
  816b50:	e0bffe17 	ldw	r2,-8(fp)
  816b54:	1885883a 	add	r2,r3,r2
  816b58:	11000484 	addi	r4,r2,18
  816b5c:	e0bfff17 	ldw	r2,-4(fp)
  816b60:	1080040b 	ldhu	r2,16(r2)
  816b64:	10ffffcc 	andi	r3,r2,65535
  816b68:	2005883a 	mov	r2,r4
  816b6c:	10c0002d 	sthio	r3,0(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
  816b70:	d0a74e17 	ldw	r2,-25288(gp)
  816b74:	10800a17 	ldw	r2,40(r2)
  816b78:	1007883a 	mov	r3,r2
  816b7c:	e0bffe17 	ldw	r2,-8(fp)
  816b80:	1885883a 	add	r2,r3,r2
  816b84:	11000584 	addi	r4,r2,22
  816b88:	e0bfff17 	ldw	r2,-4(fp)
  816b8c:	1080048b 	ldhu	r2,18(r2)
  816b90:	10ffffcc 	andi	r3,r2,65535
  816b94:	2005883a 	mov	r2,r4
  816b98:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
  816b9c:	d0a74e17 	ldw	r2,-25288(gp)
  816ba0:	10800a17 	ldw	r2,40(r2)
  816ba4:	1007883a 	mov	r3,r2
  816ba8:	e0bffe17 	ldw	r2,-8(fp)
  816bac:	1885883a 	add	r2,r3,r2
  816bb0:	11000604 	addi	r4,r2,24
  816bb4:	e0bfff17 	ldw	r2,-4(fp)
  816bb8:	1080050b 	ldhu	r2,20(r2)
  816bbc:	10ffffcc 	andi	r3,r2,65535
  816bc0:	2005883a 	mov	r2,r4
  816bc4:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
  816bc8:	d0a74e17 	ldw	r2,-25288(gp)
  816bcc:	10800a17 	ldw	r2,40(r2)
  816bd0:	1007883a 	mov	r3,r2
  816bd4:	e0bffe17 	ldw	r2,-8(fp)
  816bd8:	1885883a 	add	r2,r3,r2
  816bdc:	11000684 	addi	r4,r2,26
  816be0:	e0bfff17 	ldw	r2,-4(fp)
  816be4:	1080058b 	ldhu	r2,22(r2)
  816be8:	10ffffcc 	andi	r3,r2,65535
  816bec:	2005883a 	mov	r2,r4
  816bf0:	10c0002d 	sthio	r3,0(r2)
		IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
  816bf4:	d0a74e17 	ldw	r2,-25288(gp)
  816bf8:	10800a17 	ldw	r2,40(r2)
  816bfc:	1007883a 	mov	r3,r2
  816c00:	e0bffe17 	ldw	r2,-8(fp)
  816c04:	1885883a 	add	r2,r3,r2
  816c08:	11000704 	addi	r4,r2,28
  816c0c:	e0bfff17 	ldw	r2,-4(fp)
  816c10:	10800617 	ldw	r2,24(r2)
  816c14:	1007883a 	mov	r3,r2
  816c18:	2005883a 	mov	r2,r4
  816c1c:	10c00035 	stwio	r3,0(r2)
		current_sector_modified = true;
  816c20:	00800044 	movi	r2,1
  816c24:	d0a74f15 	stw	r2,-25284(gp)
		result = true;
  816c28:	00800044 	movi	r2,1
  816c2c:	e0bffd15 	stw	r2,-12(fp)
	}
	return result;
  816c30:	e0bffd17 	ldw	r2,-12(fp)
}
  816c34:	e037883a 	mov	sp,fp
  816c38:	dfc00117 	ldw	ra,4(sp)
  816c3c:	df000017 	ldw	fp,0(sp)
  816c40:	dec00204 	addi	sp,sp,8
  816c44:	f800283a 	ret

00816c48 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
  816c48:	defff804 	addi	sp,sp,-32
  816c4c:	dfc00715 	stw	ra,28(sp)
  816c50:	df000615 	stw	fp,24(sp)
  816c54:	dc000515 	stw	r16,20(sp)
  816c58:	df000504 	addi	fp,sp,20
  816c5c:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
  816c60:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
  816c64:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
  816c68:	0009883a 	mov	r4,zero
  816c6c:	e17fff17 	ldw	r5,-4(fp)
  816c70:	081a6dc0 	call	81a6dc <Read_Sector_Data_Attempt_CRC>
  816c74:	e0bffe15 	stw	r2,-8(fp)
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
  816c78:	d0a74e17 	ldw	r2,-25288(gp)
  816c7c:	10800a17 	ldw	r2,40(r2)
  816c80:	10807f84 	addi	r2,r2,510
  816c84:	1080002b 	ldhuio	r2,0(r2)
  816c88:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
  816c8c:	e0bffc0f 	ldh	r2,-16(fp)
  816c90:	10ffffcc 	andi	r3,r2,65535
  816c94:	00aa9554 	movui	r2,43605
  816c98:	1881751e 	bne	r3,r2,817270 <Check_for_DOS_FAT+0x628>
  816c9c:	e0bffe17 	ldw	r2,-8(fp)
  816ca0:	1005003a 	cmpeq	r2,r2,zero
  816ca4:	1001721e 	bne	r2,zero,817270 <Check_for_DOS_FAT+0x628>
		int num_clusters = 0;
  816ca8:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0]
  816cac:	d0a74e17 	ldw	r2,-25288(gp)
  816cb0:	10800a17 	ldw	r2,40(r2)
  816cb4:	10800023 	ldbuio	r2,0(r2)
  816cb8:	1007883a 	mov	r3,r2
  816cbc:	008020b4 	movhi	r2,130
  816cc0:	1089df04 	addi	r2,r2,10108
  816cc4:	10c00005 	stb	r3,0(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1]
  816cc8:	d0a74e17 	ldw	r2,-25288(gp)
  816ccc:	10800a17 	ldw	r2,40(r2)
  816cd0:	10800044 	addi	r2,r2,1
  816cd4:	10800023 	ldbuio	r2,0(r2)
  816cd8:	1007883a 	mov	r3,r2
  816cdc:	008020b4 	movhi	r2,130
  816ce0:	1089df04 	addi	r2,r2,10108
  816ce4:	10c00045 	stb	r3,1(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2]
  816ce8:	d0a74e17 	ldw	r2,-25288(gp)
  816cec:	10800a17 	ldw	r2,40(r2)
  816cf0:	10800084 	addi	r2,r2,2
  816cf4:	10800023 	ldbuio	r2,0(r2)
  816cf8:	1007883a 	mov	r3,r2
  816cfc:	008020b4 	movhi	r2,130
  816d00:	1089df04 	addi	r2,r2,10108
  816d04:	10c00085 	stb	r3,2(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
  816d08:	e03ffd15 	stw	zero,-12(fp)
  816d0c:	00001006 	br	816d50 <Check_for_DOS_FAT+0x108>
			boot_sector_data.OEM_name[counter]
  816d10:	e13ffd17 	ldw	r4,-12(fp)
  816d14:	d0a74e17 	ldw	r2,-25288(gp)
  816d18:	10800a17 	ldw	r2,40(r2)
  816d1c:	1007883a 	mov	r3,r2
  816d20:	e0bffd17 	ldw	r2,-12(fp)
  816d24:	1885883a 	add	r2,r3,r2
  816d28:	108000c4 	addi	r2,r2,3
  816d2c:	10800023 	ldbuio	r2,0(r2)
  816d30:	1007883a 	mov	r3,r2
  816d34:	008020b4 	movhi	r2,130
  816d38:	1089df04 	addi	r2,r2,10108
  816d3c:	1105883a 	add	r2,r2,r4
  816d40:	10c000c5 	stb	r3,3(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1]
				= (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2]
				= (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
  816d44:	e0bffd17 	ldw	r2,-12(fp)
  816d48:	10800044 	addi	r2,r2,1
  816d4c:	e0bffd15 	stw	r2,-12(fp)
  816d50:	e0bffd17 	ldw	r2,-12(fp)
  816d54:	10800210 	cmplti	r2,r2,8
  816d58:	103fed1e 	bne	r2,zero,816d10 <Check_for_DOS_FAT+0xc8>
			boot_sector_data.OEM_name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes
  816d5c:	d0a74e17 	ldw	r2,-25288(gp)
  816d60:	10800a17 	ldw	r2,40(r2)
  816d64:	10800304 	addi	r2,r2,12
  816d68:	10800023 	ldbuio	r2,0(r2)
  816d6c:	10803fcc 	andi	r2,r2,255
  816d70:	1004923a 	slli	r2,r2,8
  816d74:	1007883a 	mov	r3,r2
  816d78:	d0a74e17 	ldw	r2,-25288(gp)
  816d7c:	10800a17 	ldw	r2,40(r2)
  816d80:	108002c4 	addi	r2,r2,11
  816d84:	10800023 	ldbuio	r2,0(r2)
  816d88:	10803fcc 	andi	r2,r2,255
  816d8c:	1080201c 	xori	r2,r2,128
  816d90:	10bfe004 	addi	r2,r2,-128
  816d94:	1884b03a 	or	r2,r3,r2
  816d98:	1007883a 	mov	r3,r2
  816d9c:	008020b4 	movhi	r2,130
  816da0:	1089df04 	addi	r2,r2,10108
  816da4:	10c0030d 	sth	r3,12(r2)
				= (((unsigned char) IORD_8DIRECT(device_pointer->base, 12))
						<< 8) | ((char) IORD_8DIRECT(device_pointer->base, 11));
		boot_sector_data.sectors_per_cluster
  816da8:	d0a74e17 	ldw	r2,-25288(gp)
  816dac:	10800a17 	ldw	r2,40(r2)
  816db0:	10800344 	addi	r2,r2,13
  816db4:	10800023 	ldbuio	r2,0(r2)
  816db8:	1007883a 	mov	r3,r2
  816dbc:	008020b4 	movhi	r2,130
  816dc0:	1089df04 	addi	r2,r2,10108
  816dc4:	10c00385 	stb	r3,14(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
		boot_sector_data.reserved_sectors
  816dc8:	d0a74e17 	ldw	r2,-25288(gp)
  816dcc:	10800a17 	ldw	r2,40(r2)
  816dd0:	10800384 	addi	r2,r2,14
  816dd4:	1080002b 	ldhuio	r2,0(r2)
  816dd8:	1007883a 	mov	r3,r2
  816ddc:	008020b4 	movhi	r2,130
  816de0:	1089df04 	addi	r2,r2,10108
  816de4:	10c0040d 	sth	r3,16(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
		boot_sector_data.number_of_FATs
  816de8:	d0a74e17 	ldw	r2,-25288(gp)
  816dec:	10800a17 	ldw	r2,40(r2)
  816df0:	10800404 	addi	r2,r2,16
  816df4:	10800023 	ldbuio	r2,0(r2)
  816df8:	1007883a 	mov	r3,r2
  816dfc:	008020b4 	movhi	r2,130
  816e00:	1089df04 	addi	r2,r2,10108
  816e04:	10c00485 	stb	r3,18(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
		boot_sector_data.max_number_of_dir_entires
  816e08:	d0a74e17 	ldw	r2,-25288(gp)
  816e0c:	10800a17 	ldw	r2,40(r2)
  816e10:	10800484 	addi	r2,r2,18
  816e14:	10800023 	ldbuio	r2,0(r2)
  816e18:	10803fcc 	andi	r2,r2,255
  816e1c:	1004923a 	slli	r2,r2,8
  816e20:	1007883a 	mov	r3,r2
  816e24:	d0a74e17 	ldw	r2,-25288(gp)
  816e28:	10800a17 	ldw	r2,40(r2)
  816e2c:	10800444 	addi	r2,r2,17
  816e30:	10800023 	ldbuio	r2,0(r2)
  816e34:	10803fcc 	andi	r2,r2,255
  816e38:	1884b03a 	or	r2,r3,r2
  816e3c:	1007883a 	mov	r3,r2
  816e40:	008020b4 	movhi	r2,130
  816e44:	1089df04 	addi	r2,r2,10108
  816e48:	10c0050d 	sth	r3,20(r2)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 18))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
		boot_sector_data.number_of_sectors_in_partition
  816e4c:	d0a74e17 	ldw	r2,-25288(gp)
  816e50:	10800a17 	ldw	r2,40(r2)
  816e54:	10800504 	addi	r2,r2,20
  816e58:	10800023 	ldbuio	r2,0(r2)
  816e5c:	10803fcc 	andi	r2,r2,255
  816e60:	1004923a 	slli	r2,r2,8
  816e64:	1007883a 	mov	r3,r2
  816e68:	d0a74e17 	ldw	r2,-25288(gp)
  816e6c:	10800a17 	ldw	r2,40(r2)
  816e70:	108004c4 	addi	r2,r2,19
  816e74:	10800023 	ldbuio	r2,0(r2)
  816e78:	10803fcc 	andi	r2,r2,255
  816e7c:	1884b03a 	or	r2,r3,r2
  816e80:	1007883a 	mov	r3,r2
  816e84:	008020b4 	movhi	r2,130
  816e88:	1089df04 	addi	r2,r2,10108
  816e8c:	10c0058d 	sth	r3,22(r2)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 20))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
		boot_sector_data.media_descriptor
  816e90:	d0a74e17 	ldw	r2,-25288(gp)
  816e94:	10800a17 	ldw	r2,40(r2)
  816e98:	10800544 	addi	r2,r2,21
  816e9c:	10800023 	ldbuio	r2,0(r2)
  816ea0:	1007883a 	mov	r3,r2
  816ea4:	008020b4 	movhi	r2,130
  816ea8:	1089df04 	addi	r2,r2,10108
  816eac:	10c00605 	stb	r3,24(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
		boot_sector_data.number_of_sectors_per_table
  816eb0:	d0a74e17 	ldw	r2,-25288(gp)
  816eb4:	10800a17 	ldw	r2,40(r2)
  816eb8:	10800584 	addi	r2,r2,22
  816ebc:	1080002b 	ldhuio	r2,0(r2)
  816ec0:	1007883a 	mov	r3,r2
  816ec4:	008020b4 	movhi	r2,130
  816ec8:	1089df04 	addi	r2,r2,10108
  816ecc:	10c0068d 	sth	r3,26(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
		boot_sector_data.number_of_sectors_per_track
  816ed0:	d0a74e17 	ldw	r2,-25288(gp)
  816ed4:	10800a17 	ldw	r2,40(r2)
  816ed8:	10800604 	addi	r2,r2,24
  816edc:	1080002b 	ldhuio	r2,0(r2)
  816ee0:	1007883a 	mov	r3,r2
  816ee4:	008020b4 	movhi	r2,130
  816ee8:	1089df04 	addi	r2,r2,10108
  816eec:	10c0070d 	sth	r3,28(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
		boot_sector_data.number_of_heads
  816ef0:	d0a74e17 	ldw	r2,-25288(gp)
  816ef4:	10800a17 	ldw	r2,40(r2)
  816ef8:	10800684 	addi	r2,r2,26
  816efc:	1080002b 	ldhuio	r2,0(r2)
  816f00:	1007883a 	mov	r3,r2
  816f04:	008020b4 	movhi	r2,130
  816f08:	1089df04 	addi	r2,r2,10108
  816f0c:	10c0078d 	sth	r3,30(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors
  816f10:	d0a74e17 	ldw	r2,-25288(gp)
  816f14:	10800a17 	ldw	r2,40(r2)
  816f18:	10800704 	addi	r2,r2,28
  816f1c:	10800037 	ldwio	r2,0(r2)
  816f20:	1007883a 	mov	r3,r2
  816f24:	008020b4 	movhi	r2,130
  816f28:	1089df04 	addi	r2,r2,10108
  816f2c:	10c00815 	stw	r3,32(r2)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB
  816f30:	d0a74e17 	ldw	r2,-25288(gp)
  816f34:	10800a17 	ldw	r2,40(r2)
  816f38:	10800804 	addi	r2,r2,32
  816f3c:	10800037 	ldwio	r2,0(r2)
  816f40:	1007883a 	mov	r3,r2
  816f44:	008020b4 	movhi	r2,130
  816f48:	1089df04 	addi	r2,r2,10108
  816f4c:	10c00915 	stw	r3,36(r2)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number
  816f50:	d0a74e17 	ldw	r2,-25288(gp)
  816f54:	10800a17 	ldw	r2,40(r2)
  816f58:	10800904 	addi	r2,r2,36
  816f5c:	10800023 	ldbuio	r2,0(r2)
  816f60:	1007883a 	mov	r3,r2
  816f64:	008020b4 	movhi	r2,130
  816f68:	1089df04 	addi	r2,r2,10108
  816f6c:	10c00a05 	stb	r3,40(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head
  816f70:	d0a74e17 	ldw	r2,-25288(gp)
  816f74:	10800a17 	ldw	r2,40(r2)
  816f78:	10800944 	addi	r2,r2,37
  816f7c:	10800023 	ldbuio	r2,0(r2)
  816f80:	1007883a 	mov	r3,r2
  816f84:	008020b4 	movhi	r2,130
  816f88:	1089df04 	addi	r2,r2,10108
  816f8c:	10c00a45 	stb	r3,41(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature
  816f90:	d0a74e17 	ldw	r2,-25288(gp)
  816f94:	10800a17 	ldw	r2,40(r2)
  816f98:	10800984 	addi	r2,r2,38
  816f9c:	10800023 	ldbuio	r2,0(r2)
  816fa0:	1007883a 	mov	r3,r2
  816fa4:	008020b4 	movhi	r2,130
  816fa8:	1089df04 	addi	r2,r2,10108
  816fac:	10c00a85 	stb	r3,42(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset
  816fb0:	008020b4 	movhi	r2,130
  816fb4:	1089df04 	addi	r2,r2,10108
  816fb8:	1080040b 	ldhu	r2,16(r2)
  816fbc:	10ffffcc 	andi	r3,r2,65535
  816fc0:	008020b4 	movhi	r2,130
  816fc4:	1089df04 	addi	r2,r2,10108
  816fc8:	10c01115 	stw	r3,68(r2)
				= boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset
  816fcc:	008020b4 	movhi	r2,130
  816fd0:	1089df04 	addi	r2,r2,10108
  816fd4:	10c01117 	ldw	r3,68(r2)
  816fd8:	008020b4 	movhi	r2,130
  816fdc:	1089df04 	addi	r2,r2,10108
  816fe0:	1080068b 	ldhu	r2,26(r2)
  816fe4:	10bfffcc 	andi	r2,r2,65535
  816fe8:	1887883a 	add	r3,r3,r2
  816fec:	008020b4 	movhi	r2,130
  816ff0:	1089df04 	addi	r2,r2,10108
  816ff4:	10c01215 	stw	r3,72(r2)
				= boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset
  816ff8:	008020b4 	movhi	r2,130
  816ffc:	1089df04 	addi	r2,r2,10108
  817000:	10c01217 	ldw	r3,72(r2)
  817004:	008020b4 	movhi	r2,130
  817008:	1089df04 	addi	r2,r2,10108
  81700c:	1080068b 	ldhu	r2,26(r2)
  817010:	10bfffcc 	andi	r2,r2,65535
  817014:	1887883a 	add	r3,r3,r2
  817018:	008020b4 	movhi	r2,130
  81701c:	1089df04 	addi	r2,r2,10108
  817020:	10c01315 	stw	r3,76(r2)
				= boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset
  817024:	008020b4 	movhi	r2,130
  817028:	1089df04 	addi	r2,r2,10108
  81702c:	14001317 	ldw	r16,76(r2)
  817030:	008020b4 	movhi	r2,130
  817034:	1089df04 	addi	r2,r2,10108
  817038:	1080050b 	ldhu	r2,20(r2)
  81703c:	10bfffcc 	andi	r2,r2,65535
  817040:	1008917a 	slli	r4,r2,5
  817044:	008020b4 	movhi	r2,130
  817048:	1089df04 	addi	r2,r2,10108
  81704c:	1080030b 	ldhu	r2,12(r2)
  817050:	117fffcc 	andi	r5,r2,65535
  817054:	08087b00 	call	8087b0 <__divsi3>
  817058:	8087883a 	add	r3,r16,r2
  81705c:	008020b4 	movhi	r2,130
  817060:	1089df04 	addi	r2,r2,10108
  817064:	10c01415 	stw	r3,80(r2)
				= boot_sector_data.root_directory_sector_offset + (32
						* boot_sector_data.max_number_of_dir_entires
						/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
  817068:	008020b4 	movhi	r2,130
  81706c:	1089df04 	addi	r2,r2,10108
  817070:	1080058b 	ldhu	r2,22(r2)
  817074:	10bfffcc 	andi	r2,r2,65535
  817078:	1005003a 	cmpeq	r2,r2,zero
  81707c:	10000b1e 	bne	r2,zero,8170ac <Check_for_DOS_FAT+0x464>
			num_clusters = (boot_sector_data.number_of_sectors_in_partition
  817080:	008020b4 	movhi	r2,130
  817084:	1089df04 	addi	r2,r2,10108
  817088:	1080058b 	ldhu	r2,22(r2)
  81708c:	113fffcc 	andi	r4,r2,65535
  817090:	008020b4 	movhi	r2,130
  817094:	1089df04 	addi	r2,r2,10108
  817098:	10800383 	ldbu	r2,14(r2)
  81709c:	11403fcc 	andi	r5,r2,255
  8170a0:	08087b00 	call	8087b0 <__divsi3>
  8170a4:	e0bffb15 	stw	r2,-20(fp)
  8170a8:	00000906 	br	8170d0 <Check_for_DOS_FAT+0x488>
					/ boot_sector_data.sectors_per_cluster);
		} else {
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB
  8170ac:	008020b4 	movhi	r2,130
  8170b0:	1089df04 	addi	r2,r2,10108
  8170b4:	11000917 	ldw	r4,36(r2)
  8170b8:	008020b4 	movhi	r2,130
  8170bc:	1089df04 	addi	r2,r2,10108
  8170c0:	10800383 	ldbu	r2,14(r2)
  8170c4:	11403fcc 	andi	r5,r2,255
  8170c8:	08088700 	call	808870 <__udivsi3>
  8170cc:	e0bffb15 	stw	r2,-20(fp)
					/ boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087) {
  8170d0:	e0bffb17 	ldw	r2,-20(fp)
  8170d4:	1083fdc8 	cmpgei	r2,r2,4087
  8170d8:	1000051e 	bne	r2,zero,8170f0 <Check_for_DOS_FAT+0x4a8>
			boot_sector_data.bits_for_cluster_index = 12;
  8170dc:	00c020b4 	movhi	r3,130
  8170e0:	18c9df04 	addi	r3,r3,10108
  8170e4:	00800304 	movi	r2,12
  8170e8:	18801085 	stb	r2,66(r3)
  8170ec:	00000c06 	br	817120 <Check_for_DOS_FAT+0x4d8>
		} else if (num_clusters <= 65517) {
  8170f0:	e0fffb17 	ldw	r3,-20(fp)
  8170f4:	00bffb54 	movui	r2,65517
  8170f8:	10c00516 	blt	r2,r3,817110 <Check_for_DOS_FAT+0x4c8>
			boot_sector_data.bits_for_cluster_index = 16;
  8170fc:	00c020b4 	movhi	r3,130
  817100:	18c9df04 	addi	r3,r3,10108
  817104:	00800404 	movi	r2,16
  817108:	18801085 	stb	r2,66(r3)
  81710c:	00000406 	br	817120 <Check_for_DOS_FAT+0x4d8>
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
  817110:	00c020b4 	movhi	r3,130
  817114:	18c9df04 	addi	r3,r3,10108
  817118:	00800804 	movi	r2,32
  81711c:	18801085 	stb	r2,66(r3)
		}

		for (counter = 0; counter < 4; counter++) {
  817120:	e03ffd15 	stw	zero,-12(fp)
  817124:	00001106 	br	81716c <Check_for_DOS_FAT+0x524>
			boot_sector_data.volume_id[counter]
  817128:	e13ffd17 	ldw	r4,-12(fp)
  81712c:	d0a74e17 	ldw	r2,-25288(gp)
  817130:	10800a17 	ldw	r2,40(r2)
  817134:	1007883a 	mov	r3,r2
  817138:	e0bffd17 	ldw	r2,-12(fp)
  81713c:	1885883a 	add	r2,r3,r2
  817140:	108009c4 	addi	r2,r2,39
  817144:	10800023 	ldbuio	r2,0(r2)
  817148:	1007883a 	mov	r3,r2
  81714c:	008020b4 	movhi	r2,130
  817150:	1089df04 	addi	r2,r2,10108
  817154:	2085883a 	add	r2,r4,r2
  817158:	10800a04 	addi	r2,r2,40
  81715c:	10c000c5 	stb	r3,3(r2)
			boot_sector_data.bits_for_cluster_index = 16;
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
		}

		for (counter = 0; counter < 4; counter++) {
  817160:	e0bffd17 	ldw	r2,-12(fp)
  817164:	10800044 	addi	r2,r2,1
  817168:	e0bffd15 	stw	r2,-12(fp)
  81716c:	e0bffd17 	ldw	r2,-12(fp)
  817170:	10800110 	cmplti	r2,r2,4
  817174:	103fec1e 	bne	r2,zero,817128 <Check_for_DOS_FAT+0x4e0>
			boot_sector_data.volume_id[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
  817178:	e03ffd15 	stw	zero,-12(fp)
  81717c:	00001106 	br	8171c4 <Check_for_DOS_FAT+0x57c>
			boot_sector_data.volume_label[counter]
  817180:	e13ffd17 	ldw	r4,-12(fp)
  817184:	d0a74e17 	ldw	r2,-25288(gp)
  817188:	10800a17 	ldw	r2,40(r2)
  81718c:	1007883a 	mov	r3,r2
  817190:	e0bffd17 	ldw	r2,-12(fp)
  817194:	1885883a 	add	r2,r3,r2
  817198:	10800ac4 	addi	r2,r2,43
  81719c:	10800023 	ldbuio	r2,0(r2)
  8171a0:	1007883a 	mov	r3,r2
  8171a4:	008020b4 	movhi	r2,130
  8171a8:	1089df04 	addi	r2,r2,10108
  8171ac:	2085883a 	add	r2,r4,r2
  8171b0:	10800b04 	addi	r2,r2,44
  8171b4:	10c000c5 	stb	r3,3(r2)

		for (counter = 0; counter < 4; counter++) {
			boot_sector_data.volume_id[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
  8171b8:	e0bffd17 	ldw	r2,-12(fp)
  8171bc:	10800044 	addi	r2,r2,1
  8171c0:	e0bffd15 	stw	r2,-12(fp)
  8171c4:	e0bffd17 	ldw	r2,-12(fp)
  8171c8:	108002d0 	cmplti	r2,r2,11
  8171cc:	103fec1e 	bne	r2,zero,817180 <Check_for_DOS_FAT+0x538>
			boot_sector_data.volume_label[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
  8171d0:	e03ffd15 	stw	zero,-12(fp)
  8171d4:	00001106 	br	81721c <Check_for_DOS_FAT+0x5d4>
			boot_sector_data.file_system_type[counter]
  8171d8:	e13ffd17 	ldw	r4,-12(fp)
  8171dc:	d0a74e17 	ldw	r2,-25288(gp)
  8171e0:	10800a17 	ldw	r2,40(r2)
  8171e4:	1007883a 	mov	r3,r2
  8171e8:	e0bffd17 	ldw	r2,-12(fp)
  8171ec:	1885883a 	add	r2,r3,r2
  8171f0:	10800d84 	addi	r2,r2,54
  8171f4:	10800023 	ldbuio	r2,0(r2)
  8171f8:	1007883a 	mov	r3,r2
  8171fc:	008020b4 	movhi	r2,130
  817200:	1089df04 	addi	r2,r2,10108
  817204:	2085883a 	add	r2,r4,r2
  817208:	10800e04 	addi	r2,r2,56
  81720c:	10c00085 	stb	r3,2(r2)
		}
		for (counter = 0; counter < 11; counter++) {
			boot_sector_data.volume_label[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
  817210:	e0bffd17 	ldw	r2,-12(fp)
  817214:	10800044 	addi	r2,r2,1
  817218:	e0bffd15 	stw	r2,-12(fp)
  81721c:	e0bffd17 	ldw	r2,-12(fp)
  817220:	10800210 	cmplti	r2,r2,8
  817224:	103fec1e 	bne	r2,zero,8171d8 <Check_for_DOS_FAT+0x590>
			boot_sector_data.file_system_type[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
  817228:	e03ffd15 	stw	zero,-12(fp)
  81722c:	00000a06 	br	817258 <Check_for_DOS_FAT+0x610>
			active_files[counter].in_use = false;
  817230:	e0bffd17 	ldw	r2,-12(fp)
  817234:	00c020b4 	movhi	r3,130
  817238:	18c9f404 	addi	r3,r3,10192
  81723c:	100491ba 	slli	r2,r2,6
  817240:	10c5883a 	add	r2,r2,r3
  817244:	10800f04 	addi	r2,r2,60
  817248:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++) {
			boot_sector_data.file_system_type[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
  81724c:	e0bffd17 	ldw	r2,-12(fp)
  817250:	10800044 	addi	r2,r2,1
  817254:	e0bffd15 	stw	r2,-12(fp)
  817258:	e0bffd17 	ldw	r2,-12(fp)
  81725c:	10800510 	cmplti	r2,r2,20
  817260:	103ff31e 	bne	r2,zero,817230 <Check_for_DOS_FAT+0x5e8>
			active_files[counter].in_use = false;
		}
		result = true;
  817264:	00800044 	movi	r2,1
  817268:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
  81726c:	00000106 	br	817274 <Check_for_DOS_FAT+0x62c>
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
			active_files[counter].in_use = false;
		}
		result = true;
	} else {
		result = false;
  817270:	e03ffe15 	stw	zero,-8(fp)
	}
	return result;
  817274:	e0bffe17 	ldw	r2,-8(fp)
}
  817278:	e037883a 	mov	sp,fp
  81727c:	dfc00217 	ldw	ra,8(sp)
  817280:	df000117 	ldw	fp,4(sp)
  817284:	dc000017 	ldw	r16,0(sp)
  817288:	dec00304 	addi	sp,sp,12
  81728c:	f800283a 	ret

00817290 <Look_for_FAT16>:

bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
  817290:	defffc04 	addi	sp,sp,-16
  817294:	dfc00315 	stw	ra,12(sp)
  817298:	df000215 	stw	fp,8(sp)
  81729c:	df000204 	addi	fp,sp,8
	bool result = false;
  8172a0:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
  8172a4:	0818fd80 	call	818fd8 <alt_up_sd_card_is_Present>
  8172a8:	1005003a 	cmpeq	r2,r2,zero
  8172ac:	1000331e 	bne	r2,zero,81737c <Look_for_FAT16+0xec>
		Read_Sector_Data_Attempt_CRC(0, 0);
  8172b0:	0009883a 	mov	r4,zero
  8172b4:	000b883a 	mov	r5,zero
  8172b8:	081a6dc0 	call	81a6dc <Read_Sector_Data_Attempt_CRC>

		short int csd_file_format = *CSD_register_w0;
  8172bc:	d0a74817 	ldw	r2,-25312(gp)
  8172c0:	1080000b 	ldhu	r2,0(r2)
  8172c4:	e0bffe0d 	sth	r2,-8(fp)

		fat_partition_offset_in_512_byte_sectors = 0;
  8172c8:	d0274c15 	stw	zero,-25296(gp)
		fat_partition_size_in_512_byte_sectors = 0;
  8172cc:	d0274d15 	stw	zero,-25292(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00)
  8172d0:	e0bffe0f 	ldh	r2,-8(fp)
  8172d4:	1004803a 	cmplt	r2,r2,zero
  8172d8:	1000281e 	bne	r2,zero,81737c <Look_for_FAT16+0xec>
  8172dc:	e0bffe0b 	ldhu	r2,-8(fp)
  8172e0:	10bfffcc 	andi	r2,r2,65535
  8172e4:	1083000c 	andi	r2,r2,3072
  8172e8:	10830020 	cmpeqi	r2,r2,3072
  8172ec:	1000231e 	bne	r2,zero,81737c <Look_for_FAT16+0xec>
				!= 0x0c00)) {
			if ((csd_file_format & 0x0c00) == 0x0400) {
  8172f0:	e0bffe0b 	ldhu	r2,-8(fp)
  8172f4:	10bfffcc 	andi	r2,r2,65535
  8172f8:	1083000c 	andi	r2,r2,3072
  8172fc:	10810018 	cmpnei	r2,r2,1024
  817300:	1000031e 	bne	r2,zero,817310 <Look_for_FAT16+0x80>
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
  817304:	0009883a 	mov	r4,zero
  817308:	0816c480 	call	816c48 <Check_for_DOS_FAT>
  81730c:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000) {
  817310:	e0bffe0b 	ldhu	r2,-8(fp)
  817314:	10bfffcc 	andi	r2,r2,65535
  817318:	1083000c 	andi	r2,r2,3072
  81731c:	1004c03a 	cmpne	r2,r2,zero
  817320:	1000061e 	bne	r2,zero,81733c <Look_for_FAT16+0xac>
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record()) {
  817324:	081655c0 	call	81655c <Check_for_Master_Boot_Record>
  817328:	1005003a 	cmpeq	r2,r2,zero
  81732c:	1000031e 	bne	r2,zero,81733c <Look_for_FAT16+0xac>
					result = Check_for_DOS_FAT(
  817330:	d1274c17 	ldw	r4,-25296(gp)
  817334:	0816c480 	call	816c48 <Check_for_DOS_FAT>
  817338:	e0bfff15 	stw	r2,-4(fp)
							fat_partition_offset_in_512_byte_sectors);
				}
			}
			if (result == true) {
  81733c:	e0bfff17 	ldw	r2,-4(fp)
  817340:	10800058 	cmpnei	r2,r2,1
  817344:	10000d1e 	bne	r2,zero,81737c <Look_for_FAT16+0xec>
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16) {
  817348:	008020b4 	movhi	r2,130
  81734c:	1089df04 	addi	r2,r2,10108
  817350:	10801083 	ldbu	r2,66(r2)
  817354:	10803fcc 	andi	r2,r2,255
  817358:	10800420 	cmpeqi	r2,r2,16
  81735c:	1000021e 	bne	r2,zero,817368 <Look_for_FAT16+0xd8>
					result = false;
  817360:	e03fff15 	stw	zero,-4(fp)
  817364:	00000506 	br	81737c <Look_for_FAT16+0xec>
				} else {
					fat_partition_size_in_512_byte_sectors
  817368:	008020b4 	movhi	r2,130
  81736c:	1089df04 	addi	r2,r2,10108
  817370:	1080058b 	ldhu	r2,22(r2)
  817374:	10bfffcc 	andi	r2,r2,65535
  817378:	d0a74d15 	stw	r2,-25292(gp)
							= boot_sector_data.number_of_sectors_in_partition;
				}
			}
		}
	}
	return result;
  81737c:	e0bfff17 	ldw	r2,-4(fp)
}
  817380:	e037883a 	mov	sp,fp
  817384:	dfc00117 	ldw	ra,4(sp)
  817388:	df000017 	ldw	fp,0(sp)
  81738c:	dec00204 	addi	sp,sp,8
  817390:	f800283a 	ret

00817394 <filename_to_upper_case>:

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
  817394:	defffb04 	addi	sp,sp,-20
  817398:	dfc00415 	stw	ra,16(sp)
  81739c:	df000315 	stw	fp,12(sp)
  8173a0:	df000304 	addi	fp,sp,12
  8173a4:	e13fff15 	stw	r4,-4(fp)
	int index;
	int length = strlen(file_name);
  8173a8:	e13fff17 	ldw	r4,-4(fp)
  8173ac:	0809a7c0 	call	809a7c <strlen>
  8173b0:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
  8173b4:	e03ffe15 	stw	zero,-8(fp)
  8173b8:	00002206 	br	817444 <filename_to_upper_case+0xb0>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
  8173bc:	e0bffe17 	ldw	r2,-8(fp)
  8173c0:	1007883a 	mov	r3,r2
  8173c4:	e0bfff17 	ldw	r2,-4(fp)
  8173c8:	1885883a 	add	r2,r3,r2
  8173cc:	10800003 	ldbu	r2,0(r2)
  8173d0:	10803fcc 	andi	r2,r2,255
  8173d4:	1080201c 	xori	r2,r2,128
  8173d8:	10bfe004 	addi	r2,r2,-128
  8173dc:	10801850 	cmplti	r2,r2,97
  8173e0:	1000151e 	bne	r2,zero,817438 <filename_to_upper_case+0xa4>
  8173e4:	e0bffe17 	ldw	r2,-8(fp)
  8173e8:	1007883a 	mov	r3,r2
  8173ec:	e0bfff17 	ldw	r2,-4(fp)
  8173f0:	1885883a 	add	r2,r3,r2
  8173f4:	10800003 	ldbu	r2,0(r2)
  8173f8:	10803fcc 	andi	r2,r2,255
  8173fc:	1080201c 	xori	r2,r2,128
  817400:	10bfe004 	addi	r2,r2,-128
  817404:	10801ec8 	cmpgei	r2,r2,123
  817408:	10000b1e 	bne	r2,zero,817438 <filename_to_upper_case+0xa4>
			file_name[index] = (file_name[index] - 'a') + 'A';
  81740c:	e0bffe17 	ldw	r2,-8(fp)
  817410:	1007883a 	mov	r3,r2
  817414:	e0bfff17 	ldw	r2,-4(fp)
  817418:	1889883a 	add	r4,r3,r2
  81741c:	e0bffe17 	ldw	r2,-8(fp)
  817420:	1007883a 	mov	r3,r2
  817424:	e0bfff17 	ldw	r2,-4(fp)
  817428:	1885883a 	add	r2,r3,r2
  81742c:	10800003 	ldbu	r2,0(r2)
  817430:	10bff804 	addi	r2,r2,-32
  817434:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
  817438:	e0bffe17 	ldw	r2,-8(fp)
  81743c:	10800044 	addi	r2,r2,1
  817440:	e0bffe15 	stw	r2,-8(fp)
  817444:	e0fffe17 	ldw	r3,-8(fp)
  817448:	e0bffd17 	ldw	r2,-12(fp)
  81744c:	18bfdb16 	blt	r3,r2,8173bc <filename_to_upper_case+0x28>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
			file_name[index] = (file_name[index] - 'a') + 'A';
		}
	}
}
  817450:	e037883a 	mov	sp,fp
  817454:	dfc00117 	ldw	ra,4(sp)
  817458:	df000017 	ldw	fp,0(sp)
  81745c:	dec00204 	addi	sp,sp,8
  817460:	f800283a 	ret

00817464 <check_file_name_for_FAT16_compliance>:

bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
  817464:	defff804 	addi	sp,sp,-32
  817468:	dfc00715 	stw	ra,28(sp)
  81746c:	df000615 	stw	fp,24(sp)
  817470:	df000604 	addi	fp,sp,24
  817474:	e13fff15 	stw	r4,-4(fp)
	int length = strlen(file_name);
  817478:	e13fff17 	ldw	r4,-4(fp)
  81747c:	0809a7c0 	call	809a7c <strlen>
  817480:	e0bffe15 	stw	r2,-8(fp)
	int index;
	int last_dir_break_position = -1;
  817484:	00bfffc4 	movi	r2,-1
  817488:	e0bffc15 	stw	r2,-16(fp)
	int last_period = -1;
  81748c:	00bfffc4 	movi	r2,-1
  817490:	e0bffb15 	stw	r2,-20(fp)
	bool result = true;
  817494:	00800044 	movi	r2,1
  817498:	e0bffa15 	stw	r2,-24(fp)

	for (index = 0; index < length; index++) {
  81749c:	e03ffd15 	stw	zero,-12(fp)
  8174a0:	00007606 	br	81767c <check_file_name_for_FAT16_compliance+0x218>
		if ((file_name[index] == ' ') || ((last_dir_break_position == (index
  8174a4:	e0bffd17 	ldw	r2,-12(fp)
  8174a8:	1007883a 	mov	r3,r2
  8174ac:	e0bfff17 	ldw	r2,-4(fp)
  8174b0:	1885883a 	add	r2,r3,r2
  8174b4:	10800003 	ldbu	r2,0(r2)
  8174b8:	10803fcc 	andi	r2,r2,255
  8174bc:	1080201c 	xori	r2,r2,128
  8174c0:	10bfe004 	addi	r2,r2,-128
  8174c4:	10800820 	cmpeqi	r2,r2,32
  8174c8:	1000431e 	bne	r2,zero,8175d8 <check_file_name_for_FAT16_compliance+0x174>
  8174cc:	e0bffd17 	ldw	r2,-12(fp)
  8174d0:	10ffffc4 	addi	r3,r2,-1
  8174d4:	e0bffc17 	ldw	r2,-16(fp)
  8174d8:	1880141e 	bne	r3,r2,81752c <check_file_name_for_FAT16_compliance+0xc8>
  8174dc:	e0bffd17 	ldw	r2,-12(fp)
  8174e0:	1007883a 	mov	r3,r2
  8174e4:	e0bfff17 	ldw	r2,-4(fp)
  8174e8:	1885883a 	add	r2,r3,r2
  8174ec:	10800003 	ldbu	r2,0(r2)
  8174f0:	10803fcc 	andi	r2,r2,255
  8174f4:	1080201c 	xori	r2,r2,128
  8174f8:	10bfe004 	addi	r2,r2,-128
  8174fc:	10801720 	cmpeqi	r2,r2,92
  817500:	1000351e 	bne	r2,zero,8175d8 <check_file_name_for_FAT16_compliance+0x174>
  817504:	e0bffd17 	ldw	r2,-12(fp)
  817508:	1007883a 	mov	r3,r2
  81750c:	e0bfff17 	ldw	r2,-4(fp)
  817510:	1885883a 	add	r2,r3,r2
  817514:	10800003 	ldbu	r2,0(r2)
  817518:	10803fcc 	andi	r2,r2,255
  81751c:	1080201c 	xori	r2,r2,128
  817520:	10bfe004 	addi	r2,r2,-128
  817524:	10800be0 	cmpeqi	r2,r2,47
  817528:	10002b1e 	bne	r2,zero,8175d8 <check_file_name_for_FAT16_compliance+0x174>
  81752c:	e0fffd17 	ldw	r3,-12(fp)
  817530:	e0bffb17 	ldw	r2,-20(fp)
  817534:	1885c83a 	sub	r2,r3,r2
  817538:	10800258 	cmpnei	r2,r2,9
  81753c:	10000a1e 	bne	r2,zero,817568 <check_file_name_for_FAT16_compliance+0x104>
  817540:	e0bffd17 	ldw	r2,-12(fp)
  817544:	1007883a 	mov	r3,r2
  817548:	e0bfff17 	ldw	r2,-4(fp)
  81754c:	1885883a 	add	r2,r3,r2
  817550:	10800003 	ldbu	r2,0(r2)
  817554:	10803fcc 	andi	r2,r2,255
  817558:	1080201c 	xori	r2,r2,128
  81755c:	10bfe004 	addi	r2,r2,-128
  817560:	10800b98 	cmpnei	r2,r2,46
  817564:	10001c1e 	bne	r2,zero,8175d8 <check_file_name_for_FAT16_compliance+0x174>
  817568:	e0fffc17 	ldw	r3,-16(fp)
  81756c:	e0bffb17 	ldw	r2,-20(fp)
  817570:	18801b26 	beq	r3,r2,8175e0 <check_file_name_for_FAT16_compliance+0x17c>
  817574:	e0fffd17 	ldw	r3,-12(fp)
  817578:	e0bffb17 	ldw	r2,-20(fp)
  81757c:	1885c83a 	sub	r2,r3,r2
  817580:	10800110 	cmplti	r2,r2,4
  817584:	1000161e 	bne	r2,zero,8175e0 <check_file_name_for_FAT16_compliance+0x17c>
  817588:	e0bffd17 	ldw	r2,-12(fp)
  81758c:	1007883a 	mov	r3,r2
  817590:	e0bfff17 	ldw	r2,-4(fp)
  817594:	1885883a 	add	r2,r3,r2
  817598:	10800003 	ldbu	r2,0(r2)
  81759c:	10803fcc 	andi	r2,r2,255
  8175a0:	1080201c 	xori	r2,r2,128
  8175a4:	10bfe004 	addi	r2,r2,-128
  8175a8:	10801720 	cmpeqi	r2,r2,92
  8175ac:	10000c1e 	bne	r2,zero,8175e0 <check_file_name_for_FAT16_compliance+0x17c>
  8175b0:	e0bffd17 	ldw	r2,-12(fp)
  8175b4:	1007883a 	mov	r3,r2
  8175b8:	e0bfff17 	ldw	r2,-4(fp)
  8175bc:	1885883a 	add	r2,r3,r2
  8175c0:	10800003 	ldbu	r2,0(r2)
  8175c4:	10803fcc 	andi	r2,r2,255
  8175c8:	1080201c 	xori	r2,r2,128
  8175cc:	10bfe004 	addi	r2,r2,-128
  8175d0:	10800be0 	cmpeqi	r2,r2,47
  8175d4:	1000021e 	bne	r2,zero,8175e0 <check_file_name_for_FAT16_compliance+0x17c>
				- 1)) && ((file_name[index] == '\\') || (file_name[index]
				== '/'))) || ((index - last_period == 9) && (file_name[index]
				!= '.')) || ((last_dir_break_position != last_period) && (index
				- last_period > 3) && (file_name[index] != '\\')
				&& (file_name[index] != '/'))) {
			result = false;
  8175d8:	e03ffa15 	stw	zero,-24(fp)
			break;
  8175dc:	00002a06 	br	817688 <check_file_name_for_FAT16_compliance+0x224>
		}
		if ((file_name[index] == '\\') || (file_name[index] == '/')) {
  8175e0:	e0bffd17 	ldw	r2,-12(fp)
  8175e4:	1007883a 	mov	r3,r2
  8175e8:	e0bfff17 	ldw	r2,-4(fp)
  8175ec:	1885883a 	add	r2,r3,r2
  8175f0:	10800003 	ldbu	r2,0(r2)
  8175f4:	10803fcc 	andi	r2,r2,255
  8175f8:	1080201c 	xori	r2,r2,128
  8175fc:	10bfe004 	addi	r2,r2,-128
  817600:	10801720 	cmpeqi	r2,r2,92
  817604:	10000a1e 	bne	r2,zero,817630 <check_file_name_for_FAT16_compliance+0x1cc>
  817608:	e0bffd17 	ldw	r2,-12(fp)
  81760c:	1007883a 	mov	r3,r2
  817610:	e0bfff17 	ldw	r2,-4(fp)
  817614:	1885883a 	add	r2,r3,r2
  817618:	10800003 	ldbu	r2,0(r2)
  81761c:	10803fcc 	andi	r2,r2,255
  817620:	1080201c 	xori	r2,r2,128
  817624:	10bfe004 	addi	r2,r2,-128
  817628:	10800bd8 	cmpnei	r2,r2,47
  81762c:	1000041e 	bne	r2,zero,817640 <check_file_name_for_FAT16_compliance+0x1dc>
			last_period = index;
  817630:	e0bffd17 	ldw	r2,-12(fp)
  817634:	e0bffb15 	stw	r2,-20(fp)
			last_dir_break_position = index;
  817638:	e0bffd17 	ldw	r2,-12(fp)
  81763c:	e0bffc15 	stw	r2,-16(fp)
		}
		if (file_name[index] == '.') {
  817640:	e0bffd17 	ldw	r2,-12(fp)
  817644:	1007883a 	mov	r3,r2
  817648:	e0bfff17 	ldw	r2,-4(fp)
  81764c:	1885883a 	add	r2,r3,r2
  817650:	10800003 	ldbu	r2,0(r2)
  817654:	10803fcc 	andi	r2,r2,255
  817658:	1080201c 	xori	r2,r2,128
  81765c:	10bfe004 	addi	r2,r2,-128
  817660:	10800b98 	cmpnei	r2,r2,46
  817664:	1000021e 	bne	r2,zero,817670 <check_file_name_for_FAT16_compliance+0x20c>
			last_period = index;
  817668:	e0bffd17 	ldw	r2,-12(fp)
  81766c:	e0bffb15 	stw	r2,-20(fp)
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
  817670:	e0bffd17 	ldw	r2,-12(fp)
  817674:	10800044 	addi	r2,r2,1
  817678:	e0bffd15 	stw	r2,-12(fp)
  81767c:	e0fffd17 	ldw	r3,-12(fp)
  817680:	e0bffe17 	ldw	r2,-8(fp)
  817684:	18bf8716 	blt	r3,r2,8174a4 <check_file_name_for_FAT16_compliance+0x40>
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
  817688:	e0fffe17 	ldw	r3,-8(fp)
  81768c:	e0bfff17 	ldw	r2,-4(fp)
  817690:	1885883a 	add	r2,r3,r2
  817694:	10bfffc4 	addi	r2,r2,-1
  817698:	10800003 	ldbu	r2,0(r2)
  81769c:	10803fcc 	andi	r2,r2,255
  8176a0:	1080201c 	xori	r2,r2,128
  8176a4:	10bfe004 	addi	r2,r2,-128
  8176a8:	10801720 	cmpeqi	r2,r2,92
  8176ac:	10000a1e 	bne	r2,zero,8176d8 <check_file_name_for_FAT16_compliance+0x274>
  8176b0:	e0fffe17 	ldw	r3,-8(fp)
  8176b4:	e0bfff17 	ldw	r2,-4(fp)
  8176b8:	1885883a 	add	r2,r3,r2
  8176bc:	10bfffc4 	addi	r2,r2,-1
  8176c0:	10800003 	ldbu	r2,0(r2)
  8176c4:	10803fcc 	andi	r2,r2,255
  8176c8:	1080201c 	xori	r2,r2,128
  8176cc:	10bfe004 	addi	r2,r2,-128
  8176d0:	10800bd8 	cmpnei	r2,r2,47
  8176d4:	1000011e 	bne	r2,zero,8176dc <check_file_name_for_FAT16_compliance+0x278>
		result = false;
  8176d8:	e03ffa15 	stw	zero,-24(fp)
	}
	return result;
  8176dc:	e0bffa17 	ldw	r2,-24(fp)
}
  8176e0:	e037883a 	mov	sp,fp
  8176e4:	dfc00117 	ldw	ra,4(sp)
  8176e8:	df000017 	ldw	fp,0(sp)
  8176ec:	dec00204 	addi	sp,sp,8
  8176f0:	f800283a 	ret

008176f4 <get_dir_divider_location>:

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
  8176f4:	defffb04 	addi	sp,sp,-20
  8176f8:	dfc00415 	stw	ra,16(sp)
  8176fc:	df000315 	stw	fp,12(sp)
  817700:	df000304 	addi	fp,sp,12
  817704:	e13fff15 	stw	r4,-4(fp)
	int index = 0;
  817708:	e03ffe15 	stw	zero,-8(fp)
	int length = strlen(name);
  81770c:	e13fff17 	ldw	r4,-4(fp)
  817710:	0809a7c0 	call	809a7c <strlen>
  817714:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
  817718:	e03ffe15 	stw	zero,-8(fp)
  81771c:	00001706 	br	81777c <get_dir_divider_location+0x88>
		if ((name[index] == '\\') || (name[index] == '/')) {
  817720:	e0bffe17 	ldw	r2,-8(fp)
  817724:	1007883a 	mov	r3,r2
  817728:	e0bfff17 	ldw	r2,-4(fp)
  81772c:	1885883a 	add	r2,r3,r2
  817730:	10800003 	ldbu	r2,0(r2)
  817734:	10803fcc 	andi	r2,r2,255
  817738:	1080201c 	xori	r2,r2,128
  81773c:	10bfe004 	addi	r2,r2,-128
  817740:	10801720 	cmpeqi	r2,r2,92
  817744:	1000101e 	bne	r2,zero,817788 <get_dir_divider_location+0x94>
  817748:	e0bffe17 	ldw	r2,-8(fp)
  81774c:	1007883a 	mov	r3,r2
  817750:	e0bfff17 	ldw	r2,-4(fp)
  817754:	1885883a 	add	r2,r3,r2
  817758:	10800003 	ldbu	r2,0(r2)
  81775c:	10803fcc 	andi	r2,r2,255
  817760:	1080201c 	xori	r2,r2,128
  817764:	10bfe004 	addi	r2,r2,-128
  817768:	10800be0 	cmpeqi	r2,r2,47
  81776c:	1000061e 	bne	r2,zero,817788 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  817770:	e0bffe17 	ldw	r2,-8(fp)
  817774:	10800044 	addi	r2,r2,1
  817778:	e0bffe15 	stw	r2,-8(fp)
  81777c:	e0fffe17 	ldw	r3,-8(fp)
  817780:	e0bffd17 	ldw	r2,-12(fp)
  817784:	18bfe616 	blt	r3,r2,817720 <get_dir_divider_location+0x2c>
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
  817788:	e0fffe17 	ldw	r3,-8(fp)
  81778c:	e0bffd17 	ldw	r2,-12(fp)
  817790:	1880021e 	bne	r3,r2,81779c <get_dir_divider_location+0xa8>
		index = -1;
  817794:	00bfffc4 	movi	r2,-1
  817798:	e0bffe15 	stw	r2,-8(fp)
	}

	return index;
  81779c:	e0bffe17 	ldw	r2,-8(fp)
}
  8177a0:	e037883a 	mov	sp,fp
  8177a4:	dfc00117 	ldw	ra,4(sp)
  8177a8:	df000017 	ldw	fp,0(sp)
  8177ac:	dec00204 	addi	sp,sp,8
  8177b0:	f800283a 	ret

008177b4 <match_file_record_to_name_ext>:

bool match_file_record_to_name_ext(t_file_record *file_record, char *name,
		char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
  8177b4:	defff604 	addi	sp,sp,-40
  8177b8:	df000915 	stw	fp,36(sp)
  8177bc:	df000904 	addi	fp,sp,36
  8177c0:	e13ff915 	stw	r4,-28(fp)
  8177c4:	e17ffa15 	stw	r5,-24(fp)
  8177c8:	e1bffb15 	stw	r6,-20(fp)
	bool match = true;
  8177cc:	00800044 	movi	r2,1
  8177d0:	e0bff815 	stw	r2,-32(fp)
	int index;

	for (index = 0; index < 8; index++) {
  8177d4:	e03ff715 	stw	zero,-36(fp)
  8177d8:	00005006 	br	81791c <match_file_record_to_name_ext+0x168>
		if (CHAR_TO_UPPER(file_record->name[index])
  8177dc:	e0fff717 	ldw	r3,-36(fp)
  8177e0:	e0bff917 	ldw	r2,-28(fp)
  8177e4:	10c5883a 	add	r2,r2,r3
  8177e8:	10800003 	ldbu	r2,0(r2)
  8177ec:	10803fcc 	andi	r2,r2,255
  8177f0:	10801870 	cmpltui	r2,r2,97
  8177f4:	1000111e 	bne	r2,zero,81783c <match_file_record_to_name_ext+0x88>
  8177f8:	e0fff717 	ldw	r3,-36(fp)
  8177fc:	e0bff917 	ldw	r2,-28(fp)
  817800:	10c5883a 	add	r2,r2,r3
  817804:	10800003 	ldbu	r2,0(r2)
  817808:	10803fcc 	andi	r2,r2,255
  81780c:	10801ee8 	cmpgeui	r2,r2,123
  817810:	10000a1e 	bne	r2,zero,81783c <match_file_record_to_name_ext+0x88>
  817814:	e0fff717 	ldw	r3,-36(fp)
  817818:	e0bff917 	ldw	r2,-28(fp)
  81781c:	10c5883a 	add	r2,r2,r3
  817820:	10800003 	ldbu	r2,0(r2)
  817824:	10bff804 	addi	r2,r2,-32
  817828:	10803fcc 	andi	r2,r2,255
  81782c:	1080201c 	xori	r2,r2,128
  817830:	10bfe004 	addi	r2,r2,-128
  817834:	e0bfff15 	stw	r2,-4(fp)
  817838:	00000806 	br	81785c <match_file_record_to_name_ext+0xa8>
  81783c:	e0fff717 	ldw	r3,-36(fp)
  817840:	e0bff917 	ldw	r2,-28(fp)
  817844:	10c5883a 	add	r2,r2,r3
  817848:	10800003 	ldbu	r2,0(r2)
  81784c:	10803fcc 	andi	r2,r2,255
  817850:	1080201c 	xori	r2,r2,128
  817854:	10bfe004 	addi	r2,r2,-128
  817858:	e0bfff15 	stw	r2,-4(fp)
  81785c:	e0bff717 	ldw	r2,-36(fp)
  817860:	1007883a 	mov	r3,r2
  817864:	e0bffa17 	ldw	r2,-24(fp)
  817868:	1885883a 	add	r2,r3,r2
  81786c:	10800003 	ldbu	r2,0(r2)
  817870:	10803fcc 	andi	r2,r2,255
  817874:	1080201c 	xori	r2,r2,128
  817878:	10bfe004 	addi	r2,r2,-128
  81787c:	10801850 	cmplti	r2,r2,97
  817880:	1000151e 	bne	r2,zero,8178d8 <match_file_record_to_name_ext+0x124>
  817884:	e0bff717 	ldw	r2,-36(fp)
  817888:	1007883a 	mov	r3,r2
  81788c:	e0bffa17 	ldw	r2,-24(fp)
  817890:	1885883a 	add	r2,r3,r2
  817894:	10800003 	ldbu	r2,0(r2)
  817898:	10803fcc 	andi	r2,r2,255
  81789c:	1080201c 	xori	r2,r2,128
  8178a0:	10bfe004 	addi	r2,r2,-128
  8178a4:	10801ec8 	cmpgei	r2,r2,123
  8178a8:	10000b1e 	bne	r2,zero,8178d8 <match_file_record_to_name_ext+0x124>
  8178ac:	e0bff717 	ldw	r2,-36(fp)
  8178b0:	1007883a 	mov	r3,r2
  8178b4:	e0bffa17 	ldw	r2,-24(fp)
  8178b8:	1885883a 	add	r2,r3,r2
  8178bc:	10800003 	ldbu	r2,0(r2)
  8178c0:	10bff804 	addi	r2,r2,-32
  8178c4:	10803fcc 	andi	r2,r2,255
  8178c8:	1080201c 	xori	r2,r2,128
  8178cc:	10bfe004 	addi	r2,r2,-128
  8178d0:	e0bffe15 	stw	r2,-8(fp)
  8178d4:	00000906 	br	8178fc <match_file_record_to_name_ext+0x148>
  8178d8:	e0bff717 	ldw	r2,-36(fp)
  8178dc:	1007883a 	mov	r3,r2
  8178e0:	e0bffa17 	ldw	r2,-24(fp)
  8178e4:	1885883a 	add	r2,r3,r2
  8178e8:	10800003 	ldbu	r2,0(r2)
  8178ec:	10803fcc 	andi	r2,r2,255
  8178f0:	1080201c 	xori	r2,r2,128
  8178f4:	10bfe004 	addi	r2,r2,-128
  8178f8:	e0bffe15 	stw	r2,-8(fp)
  8178fc:	e0bfff17 	ldw	r2,-4(fp)
  817900:	e0fffe17 	ldw	r3,-8(fp)
  817904:	10c00226 	beq	r2,r3,817910 <match_file_record_to_name_ext+0x15c>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
  817908:	e03ff815 	stw	zero,-32(fp)
			break;
  81790c:	00000606 	br	817928 <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
  817910:	e0bff717 	ldw	r2,-36(fp)
  817914:	10800044 	addi	r2,r2,1
  817918:	e0bff715 	stw	r2,-36(fp)
  81791c:	e0bff717 	ldw	r2,-36(fp)
  817920:	10800210 	cmplti	r2,r2,8
  817924:	103fad1e 	bne	r2,zero,8177dc <match_file_record_to_name_ext+0x28>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
  817928:	e03ff715 	stw	zero,-36(fp)
  81792c:	00005406 	br	817a80 <match_file_record_to_name_ext+0x2cc>
		if (CHAR_TO_UPPER(file_record->extension[index])
  817930:	e0fff717 	ldw	r3,-36(fp)
  817934:	e0bff917 	ldw	r2,-28(fp)
  817938:	1885883a 	add	r2,r3,r2
  81793c:	10800204 	addi	r2,r2,8
  817940:	10800003 	ldbu	r2,0(r2)
  817944:	10803fcc 	andi	r2,r2,255
  817948:	10801870 	cmpltui	r2,r2,97
  81794c:	1000131e 	bne	r2,zero,81799c <match_file_record_to_name_ext+0x1e8>
  817950:	e0fff717 	ldw	r3,-36(fp)
  817954:	e0bff917 	ldw	r2,-28(fp)
  817958:	1885883a 	add	r2,r3,r2
  81795c:	10800204 	addi	r2,r2,8
  817960:	10800003 	ldbu	r2,0(r2)
  817964:	10803fcc 	andi	r2,r2,255
  817968:	10801ee8 	cmpgeui	r2,r2,123
  81796c:	10000b1e 	bne	r2,zero,81799c <match_file_record_to_name_ext+0x1e8>
  817970:	e0fff717 	ldw	r3,-36(fp)
  817974:	e0bff917 	ldw	r2,-28(fp)
  817978:	1885883a 	add	r2,r3,r2
  81797c:	10800204 	addi	r2,r2,8
  817980:	10800003 	ldbu	r2,0(r2)
  817984:	10bff804 	addi	r2,r2,-32
  817988:	10803fcc 	andi	r2,r2,255
  81798c:	1080201c 	xori	r2,r2,128
  817990:	10bfe004 	addi	r2,r2,-128
  817994:	e0bffd15 	stw	r2,-12(fp)
  817998:	00000906 	br	8179c0 <match_file_record_to_name_ext+0x20c>
  81799c:	e0fff717 	ldw	r3,-36(fp)
  8179a0:	e0bff917 	ldw	r2,-28(fp)
  8179a4:	1885883a 	add	r2,r3,r2
  8179a8:	10800204 	addi	r2,r2,8
  8179ac:	10800003 	ldbu	r2,0(r2)
  8179b0:	10803fcc 	andi	r2,r2,255
  8179b4:	1080201c 	xori	r2,r2,128
  8179b8:	10bfe004 	addi	r2,r2,-128
  8179bc:	e0bffd15 	stw	r2,-12(fp)
  8179c0:	e0bff717 	ldw	r2,-36(fp)
  8179c4:	1007883a 	mov	r3,r2
  8179c8:	e0bffb17 	ldw	r2,-20(fp)
  8179cc:	1885883a 	add	r2,r3,r2
  8179d0:	10800003 	ldbu	r2,0(r2)
  8179d4:	10803fcc 	andi	r2,r2,255
  8179d8:	1080201c 	xori	r2,r2,128
  8179dc:	10bfe004 	addi	r2,r2,-128
  8179e0:	10801850 	cmplti	r2,r2,97
  8179e4:	1000151e 	bne	r2,zero,817a3c <match_file_record_to_name_ext+0x288>
  8179e8:	e0bff717 	ldw	r2,-36(fp)
  8179ec:	1007883a 	mov	r3,r2
  8179f0:	e0bffb17 	ldw	r2,-20(fp)
  8179f4:	1885883a 	add	r2,r3,r2
  8179f8:	10800003 	ldbu	r2,0(r2)
  8179fc:	10803fcc 	andi	r2,r2,255
  817a00:	1080201c 	xori	r2,r2,128
  817a04:	10bfe004 	addi	r2,r2,-128
  817a08:	10801ec8 	cmpgei	r2,r2,123
  817a0c:	10000b1e 	bne	r2,zero,817a3c <match_file_record_to_name_ext+0x288>
  817a10:	e0bff717 	ldw	r2,-36(fp)
  817a14:	1007883a 	mov	r3,r2
  817a18:	e0bffb17 	ldw	r2,-20(fp)
  817a1c:	1885883a 	add	r2,r3,r2
  817a20:	10800003 	ldbu	r2,0(r2)
  817a24:	10bff804 	addi	r2,r2,-32
  817a28:	10803fcc 	andi	r2,r2,255
  817a2c:	1080201c 	xori	r2,r2,128
  817a30:	10bfe004 	addi	r2,r2,-128
  817a34:	e0bffc15 	stw	r2,-16(fp)
  817a38:	00000906 	br	817a60 <match_file_record_to_name_ext+0x2ac>
  817a3c:	e0bff717 	ldw	r2,-36(fp)
  817a40:	1007883a 	mov	r3,r2
  817a44:	e0bffb17 	ldw	r2,-20(fp)
  817a48:	1885883a 	add	r2,r3,r2
  817a4c:	10800003 	ldbu	r2,0(r2)
  817a50:	10803fcc 	andi	r2,r2,255
  817a54:	1080201c 	xori	r2,r2,128
  817a58:	10bfe004 	addi	r2,r2,-128
  817a5c:	e0bffc15 	stw	r2,-16(fp)
  817a60:	e0bffd17 	ldw	r2,-12(fp)
  817a64:	e0fffc17 	ldw	r3,-16(fp)
  817a68:	10c00226 	beq	r2,r3,817a74 <match_file_record_to_name_ext+0x2c0>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
  817a6c:	e03ff815 	stw	zero,-32(fp)
			break;
  817a70:	00000606 	br	817a8c <match_file_record_to_name_ext+0x2d8>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
  817a74:	e0bff717 	ldw	r2,-36(fp)
  817a78:	10800044 	addi	r2,r2,1
  817a7c:	e0bff715 	stw	r2,-36(fp)
  817a80:	e0bff717 	ldw	r2,-36(fp)
  817a84:	108000d0 	cmplti	r2,r2,3
  817a88:	103fa91e 	bne	r2,zero,817930 <match_file_record_to_name_ext+0x17c>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
			break;
		}
	}
	return match;
  817a8c:	e0bff817 	ldw	r2,-32(fp)
}
  817a90:	e037883a 	mov	sp,fp
  817a94:	df000017 	ldw	fp,0(sp)
  817a98:	dec00104 	addi	sp,sp,4
  817a9c:	f800283a 	ret

00817aa0 <get_home_directory_cluster_for_file>:

bool get_home_directory_cluster_for_file(char *file_name,
		int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
  817aa0:	deffe604 	addi	sp,sp,-104
  817aa4:	dfc01915 	stw	ra,100(sp)
  817aa8:	df001815 	stw	fp,96(sp)
  817aac:	df001804 	addi	fp,sp,96
  817ab0:	e13ffc15 	stw	r4,-16(fp)
  817ab4:	e17ffd15 	stw	r5,-12(fp)
  817ab8:	e1bffe15 	stw	r6,-8(fp)
	bool result = false;
  817abc:	e03ff715 	stw	zero,-36(fp)
	int home_dir_cluster = 0;
  817ac0:	e03ff615 	stw	zero,-40(fp)
	int location, index;
	int start_location = 0;
  817ac4:	e03ff315 	stw	zero,-52(fp)

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
  817ac8:	e13ffc17 	ldw	r4,-16(fp)
  817acc:	08176f40 	call	8176f4 <get_dir_divider_location>
  817ad0:	e0bff515 	stw	r2,-44(fp)
	while (location > 0) {
  817ad4:	00012206 	br	817f60 <get_home_directory_cluster_for_file+0x4c0>
		char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  817ad8:	00800804 	movi	r2,32
  817adc:	e0bff805 	stb	r2,-32(fp)
  817ae0:	00800804 	movi	r2,32
  817ae4:	e0bff845 	stb	r2,-31(fp)
  817ae8:	00800804 	movi	r2,32
  817aec:	e0bff885 	stb	r2,-30(fp)
  817af0:	00800804 	movi	r2,32
  817af4:	e0bff8c5 	stb	r2,-29(fp)
  817af8:	00800804 	movi	r2,32
  817afc:	e0bff905 	stb	r2,-28(fp)
  817b00:	00800804 	movi	r2,32
  817b04:	e0bff945 	stb	r2,-27(fp)
  817b08:	00800804 	movi	r2,32
  817b0c:	e0bff985 	stb	r2,-26(fp)
  817b10:	00800804 	movi	r2,32
  817b14:	e0bff9c5 	stb	r2,-25(fp)
		char extension[3] = { ' ', ' ', ' ' };
  817b18:	00800804 	movi	r2,32
  817b1c:	e0bffa05 	stb	r2,-24(fp)
  817b20:	00800804 	movi	r2,32
  817b24:	e0bffa45 	stb	r2,-23(fp)
  817b28:	00800804 	movi	r2,32
  817b2c:	e0bffa85 	stb	r2,-22(fp)
		int ext_index = -1;
  817b30:	00bfffc4 	movi	r2,-1
  817b34:	e0bff215 	stw	r2,-56(fp)
		int new_cluster = home_dir_cluster;
  817b38:	e0bff617 	ldw	r2,-40(fp)
  817b3c:	e0bff115 	stw	r2,-60(fp)

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
  817b40:	e03ff415 	stw	zero,-48(fp)
  817b44:	00002e06 	br	817c00 <get_home_directory_cluster_for_file+0x160>
			if (file_name[index + start_location] == '.') {
  817b48:	e0fff417 	ldw	r3,-48(fp)
  817b4c:	e0bff317 	ldw	r2,-52(fp)
  817b50:	1885883a 	add	r2,r3,r2
  817b54:	1007883a 	mov	r3,r2
  817b58:	e0bffc17 	ldw	r2,-16(fp)
  817b5c:	1885883a 	add	r2,r3,r2
  817b60:	10800003 	ldbu	r2,0(r2)
  817b64:	10803fcc 	andi	r2,r2,255
  817b68:	1080201c 	xori	r2,r2,128
  817b6c:	10bfe004 	addi	r2,r2,-128
  817b70:	10800b98 	cmpnei	r2,r2,46
  817b74:	1000031e 	bne	r2,zero,817b84 <get_home_directory_cluster_for_file+0xe4>
				ext_index = index;
  817b78:	e0bff417 	ldw	r2,-48(fp)
  817b7c:	e0bff215 	stw	r2,-56(fp)
  817b80:	00001c06 	br	817bf4 <get_home_directory_cluster_for_file+0x154>
			} else if (ext_index < 0) {
  817b84:	e0bff217 	ldw	r2,-56(fp)
  817b88:	1004403a 	cmpge	r2,r2,zero
  817b8c:	10000c1e 	bne	r2,zero,817bc0 <get_home_directory_cluster_for_file+0x120>
				name[index] = file_name[index + start_location];
  817b90:	e13ff417 	ldw	r4,-48(fp)
  817b94:	e0fff417 	ldw	r3,-48(fp)
  817b98:	e0bff317 	ldw	r2,-52(fp)
  817b9c:	1885883a 	add	r2,r3,r2
  817ba0:	1007883a 	mov	r3,r2
  817ba4:	e0bffc17 	ldw	r2,-16(fp)
  817ba8:	1885883a 	add	r2,r3,r2
  817bac:	10c00003 	ldbu	r3,0(r2)
  817bb0:	e0bff804 	addi	r2,fp,-32
  817bb4:	1105883a 	add	r2,r2,r4
  817bb8:	10c00005 	stb	r3,0(r2)
  817bbc:	00000d06 	br	817bf4 <get_home_directory_cluster_for_file+0x154>
			} else {
				extension[index - ext_index]
  817bc0:	e0fff417 	ldw	r3,-48(fp)
  817bc4:	e0bff217 	ldw	r2,-56(fp)
  817bc8:	1889c83a 	sub	r4,r3,r2
  817bcc:	e0fff417 	ldw	r3,-48(fp)
  817bd0:	e0bff317 	ldw	r2,-52(fp)
  817bd4:	1885883a 	add	r2,r3,r2
  817bd8:	1007883a 	mov	r3,r2
  817bdc:	e0bffc17 	ldw	r2,-16(fp)
  817be0:	1885883a 	add	r2,r3,r2
  817be4:	10c00003 	ldbu	r3,0(r2)
  817be8:	e0bffa04 	addi	r2,fp,-24
  817bec:	1105883a 	add	r2,r2,r4
  817bf0:	10c00005 	stb	r3,0(r2)
		char extension[3] = { ' ', ' ', ' ' };
		int ext_index = -1;
		int new_cluster = home_dir_cluster;

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
  817bf4:	e0bff417 	ldw	r2,-48(fp)
  817bf8:	10800044 	addi	r2,r2,1
  817bfc:	e0bff415 	stw	r2,-48(fp)
  817c00:	e0fff417 	ldw	r3,-48(fp)
  817c04:	e0bff517 	ldw	r2,-44(fp)
  817c08:	18bfcf16 	blt	r3,r2,817b48 <get_home_directory_cluster_for_file+0xa8>
				extension[index - ext_index]
						= file_name[index + start_location];
			}
		}

		if (home_dir_cluster == 0) {
  817c0c:	e0bff617 	ldw	r2,-40(fp)
  817c10:	1004c03a 	cmpne	r2,r2,zero
  817c14:	1000551e 	bne	r2,zero,817d6c <get_home_directory_cluster_for_file+0x2cc>
			/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
  817c18:	008020b4 	movhi	r2,130
  817c1c:	1089df04 	addi	r2,r2,10108
  817c20:	1080050b 	ldhu	r2,20(r2)
  817c24:	10bfffcc 	andi	r2,r2,65535
  817c28:	1008917a 	slli	r4,r2,5
  817c2c:	008020b4 	movhi	r2,130
  817c30:	1089df04 	addi	r2,r2,10108
  817c34:	1080030b 	ldhu	r2,12(r2)
  817c38:	117fffcc 	andi	r5,r2,65535
  817c3c:	08087b00 	call	8087b0 <__divsi3>
  817c40:	e0bff015 	stw	r2,-64(fp)
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  817c44:	e03fef15 	stw	zero,-68(fp)
  817c48:	00003806 	br	817d2c <get_home_directory_cluster_for_file+0x28c>
				if (Read_Sector_Data(sector_index
  817c4c:	008020b4 	movhi	r2,130
  817c50:	1089df04 	addi	r2,r2,10108
  817c54:	10c01317 	ldw	r3,76(r2)
  817c58:	e0bfef17 	ldw	r2,-68(fp)
  817c5c:	1885883a 	add	r2,r3,r2
  817c60:	1009883a 	mov	r4,r2
  817c64:	d1674c17 	ldw	r5,-25296(gp)
  817c68:	08162c40 	call	8162c4 <Read_Sector_Data>
  817c6c:	1005003a 	cmpeq	r2,r2,zero
  817c70:	1000311e 	bne	r2,zero,817d38 <get_home_directory_cluster_for_file+0x298>
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  817c74:	e03fee15 	stw	zero,-72(fp)
  817c78:	00002306 	br	817d08 <get_home_directory_cluster_for_file+0x268>

						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
  817c7c:	e0bfee17 	ldw	r2,-72(fp)
  817c80:	1008917a 	slli	r4,r2,5
  817c84:	e1ffef17 	ldw	r7,-68(fp)
  817c88:	e17ffe17 	ldw	r5,-8(fp)
  817c8c:	000d883a 	mov	r6,zero
  817c90:	081670c0 	call	81670c <Read_File_Record_At_Offset>
								file_record, 0, sector_index);
						if ((file_record->name[0] != 0xe5)
  817c94:	e0bffe17 	ldw	r2,-8(fp)
  817c98:	10800003 	ldbu	r2,0(r2)
  817c9c:	10803fcc 	andi	r2,r2,255
  817ca0:	10803960 	cmpeqi	r2,r2,229
  817ca4:	1000151e 	bne	r2,zero,817cfc <get_home_directory_cluster_for_file+0x25c>
  817ca8:	e0bffe17 	ldw	r2,-8(fp)
  817cac:	10800003 	ldbu	r2,0(r2)
  817cb0:	10803fcc 	andi	r2,r2,255
  817cb4:	1005003a 	cmpeq	r2,r2,zero
  817cb8:	1000101e 	bne	r2,zero,817cfc <get_home_directory_cluster_for_file+0x25c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
  817cbc:	e17ff804 	addi	r5,fp,-32
  817cc0:	e1bffa04 	addi	r6,fp,-24
  817cc4:	e13ffe17 	ldw	r4,-8(fp)
  817cc8:	08177b40 	call	8177b4 <match_file_record_to_name_ext>
  817ccc:	e0bfed15 	stw	r2,-76(fp)
							if (match) {
  817cd0:	e0bfed17 	ldw	r2,-76(fp)
  817cd4:	1005003a 	cmpeq	r2,r2,zero
  817cd8:	1000081e 	bne	r2,zero,817cfc <get_home_directory_cluster_for_file+0x25c>
								new_cluster = file_record->start_cluster_index;
  817cdc:	e0bffe17 	ldw	r2,-8(fp)
  817ce0:	1080058b 	ldhu	r2,22(r2)
  817ce4:	10bfffcc 	andi	r2,r2,65535
  817ce8:	e0bff115 	stw	r2,-60(fp)
								file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
  817cec:	e0fffe17 	ldw	r3,-8(fp)
  817cf0:	00800044 	movi	r2,1
  817cf4:	18800a15 	stw	r2,40(r3)
								break;
  817cf8:	00000606 	br	817d14 <get_home_directory_cluster_for_file+0x274>
				if (Read_Sector_Data(sector_index
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  817cfc:	e0bfee17 	ldw	r2,-72(fp)
  817d00:	10800044 	addi	r2,r2,1
  817d04:	e0bfee15 	stw	r2,-72(fp)
  817d08:	e0bfee17 	ldw	r2,-72(fp)
  817d0c:	10800410 	cmplti	r2,r2,16
  817d10:	103fda1e 	bne	r2,zero,817c7c <get_home_directory_cluster_for_file+0x1dc>
						}
					}
				} else {
					break;
				}
				if (new_cluster != home_dir_cluster) {
  817d14:	e0fff117 	ldw	r3,-60(fp)
  817d18:	e0bff617 	ldw	r2,-40(fp)
  817d1c:	1880061e 	bne	r3,r2,817d38 <get_home_directory_cluster_for_file+0x298>
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  817d20:	e0bfef17 	ldw	r2,-68(fp)
  817d24:	10800044 	addi	r2,r2,1
  817d28:	e0bfef15 	stw	r2,-68(fp)
  817d2c:	e0ffef17 	ldw	r3,-68(fp)
  817d30:	e0bff017 	ldw	r2,-64(fp)
  817d34:	18bfc516 	blt	r3,r2,817c4c <get_home_directory_cluster_for_file+0x1ac>
				}
				if (new_cluster != home_dir_cluster) {
					break;
				}
			}
			if (new_cluster != home_dir_cluster) {
  817d38:	e0fff117 	ldw	r3,-60(fp)
  817d3c:	e0bff617 	ldw	r2,-40(fp)
  817d40:	18800826 	beq	r3,r2,817d64 <get_home_directory_cluster_for_file+0x2c4>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
  817d44:	e0bff117 	ldw	r2,-60(fp)
  817d48:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
  817d4c:	e0fff317 	ldw	r3,-52(fp)
  817d50:	e0bff517 	ldw	r2,-44(fp)
  817d54:	1885883a 	add	r2,r3,r2
  817d58:	10800044 	addi	r2,r2,1
  817d5c:	e0bff315 	stw	r2,-52(fp)
  817d60:	00007406 	br	817f34 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
  817d64:	e03fff15 	stw	zero,-4(fp)
  817d68:	00008c06 	br	817f9c <get_home_directory_cluster_for_file+0x4fc>
			}
		} else {
			// This is a subdirectory that can have any number of elements. So scan through it as though it was a file
			// and see if you can find the directory of interest.
			int cluster = home_dir_cluster;
  817d6c:	e0bff617 	ldw	r2,-40(fp)
  817d70:	e0bfec15 	stw	r2,-80(fp)

			do {
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
  817d74:	e0bfec17 	ldw	r2,-80(fp)
  817d78:	10ffff84 	addi	r3,r2,-2
  817d7c:	008020b4 	movhi	r2,130
  817d80:	1089df04 	addi	r2,r2,10108
  817d84:	10800383 	ldbu	r2,14(r2)
  817d88:	10803fcc 	andi	r2,r2,255
  817d8c:	1885383a 	mul	r2,r3,r2
  817d90:	1007883a 	mov	r3,r2
  817d94:	008020b4 	movhi	r2,130
  817d98:	1089df04 	addi	r2,r2,10108
  817d9c:	10801417 	ldw	r2,80(r2)
  817da0:	1885883a 	add	r2,r3,r2
  817da4:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index;

				for (sector_index = 0; sector_index
  817da8:	e03fea15 	stw	zero,-88(fp)
  817dac:	00003206 	br	817e78 <get_home_directory_cluster_for_file+0x3d8>
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
  817db0:	e0ffea17 	ldw	r3,-88(fp)
  817db4:	e0bfeb17 	ldw	r2,-84(fp)
  817db8:	1889883a 	add	r4,r3,r2
  817dbc:	d1674c17 	ldw	r5,-25296(gp)
  817dc0:	08162c40 	call	8162c4 <Read_Sector_Data>
  817dc4:	1005003a 	cmpeq	r2,r2,zero
  817dc8:	1000311e 	bne	r2,zero,817e90 <get_home_directory_cluster_for_file+0x3f0>
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
  817dcc:	e03fe915 	stw	zero,-92(fp)
  817dd0:	00002006 	br	817e54 <get_home_directory_cluster_for_file+0x3b4>
							// Read file record.
							Read_File_Record_At_Offset(file_counter * 32,
  817dd4:	e0bfe917 	ldw	r2,-92(fp)
  817dd8:	1008917a 	slli	r4,r2,5
  817ddc:	e1bfec17 	ldw	r6,-80(fp)
  817de0:	e1ffea17 	ldw	r7,-88(fp)
  817de4:	e17ffe17 	ldw	r5,-8(fp)
  817de8:	081670c0 	call	81670c <Read_File_Record_At_Offset>
									file_record, cluster, sector_index);
							if ((file_record->name[0] != 0xe5)
  817dec:	e0bffe17 	ldw	r2,-8(fp)
  817df0:	10800003 	ldbu	r2,0(r2)
  817df4:	10803fcc 	andi	r2,r2,255
  817df8:	10803960 	cmpeqi	r2,r2,229
  817dfc:	1000121e 	bne	r2,zero,817e48 <get_home_directory_cluster_for_file+0x3a8>
  817e00:	e0bffe17 	ldw	r2,-8(fp)
  817e04:	10800003 	ldbu	r2,0(r2)
  817e08:	10803fcc 	andi	r2,r2,255
  817e0c:	1005003a 	cmpeq	r2,r2,zero
  817e10:	10000d1e 	bne	r2,zero,817e48 <get_home_directory_cluster_for_file+0x3a8>
									&& (file_record->name[0] != 0x00)) {
								bool match = match_file_record_to_name_ext(
										file_record, name, extension);
  817e14:	e17ff804 	addi	r5,fp,-32
  817e18:	e1bffa04 	addi	r6,fp,-24
  817e1c:	e13ffe17 	ldw	r4,-8(fp)
  817e20:	08177b40 	call	8177b4 <match_file_record_to_name_ext>
  817e24:	e0bfe815 	stw	r2,-96(fp)
								if (match) {
  817e28:	e0bfe817 	ldw	r2,-96(fp)
  817e2c:	1005003a 	cmpeq	r2,r2,zero
  817e30:	1000051e 	bne	r2,zero,817e48 <get_home_directory_cluster_for_file+0x3a8>
									new_cluster
  817e34:	e0bffe17 	ldw	r2,-8(fp)
  817e38:	1080058b 	ldhu	r2,22(r2)
  817e3c:	10bfffcc 	andi	r2,r2,65535
  817e40:	e0bff115 	stw	r2,-60(fp)
											= file_record->start_cluster_index;
									break;
  817e44:	00000606 	br	817e60 <get_home_directory_cluster_for_file+0x3c0>
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
  817e48:	e0bfe917 	ldw	r2,-92(fp)
  817e4c:	10800044 	addi	r2,r2,1
  817e50:	e0bfe915 	stw	r2,-92(fp)
  817e54:	e0bfe917 	ldw	r2,-92(fp)
  817e58:	10800410 	cmplti	r2,r2,16
  817e5c:	103fdd1e 	bne	r2,zero,817dd4 <get_home_directory_cluster_for_file+0x334>
							}
						}
					} else {
						break;
					}
					if (new_cluster != home_dir_cluster) {
  817e60:	e0fff117 	ldw	r3,-60(fp)
  817e64:	e0bff617 	ldw	r2,-40(fp)
  817e68:	1880091e 	bne	r3,r2,817e90 <get_home_directory_cluster_for_file+0x3f0>
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
						< boot_sector_data.sectors_per_cluster; sector_index++) {
  817e6c:	e0bfea17 	ldw	r2,-88(fp)
  817e70:	10800044 	addi	r2,r2,1
  817e74:	e0bfea15 	stw	r2,-88(fp)
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
  817e78:	008020b4 	movhi	r2,130
  817e7c:	1089df04 	addi	r2,r2,10108
  817e80:	10800383 	ldbu	r2,14(r2)
  817e84:	10c03fcc 	andi	r3,r2,255
  817e88:	e0bfea17 	ldw	r2,-88(fp)
  817e8c:	10ffc816 	blt	r2,r3,817db0 <get_home_directory_cluster_for_file+0x310>
						break;
					}
				}
				// If this is the end of the cluster and the directory has not been found, then see if there is another cluster
				// that holds data for the current directory.
				if (new_cluster == home_dir_cluster) {
  817e90:	e0fff117 	ldw	r3,-60(fp)
  817e94:	e0bff617 	ldw	r2,-40(fp)
  817e98:	1880131e 	bne	r3,r2,817ee8 <get_home_directory_cluster_for_file+0x448>
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster)) {
  817e9c:	e13ff117 	ldw	r4,-60(fp)
  817ea0:	e17ffb04 	addi	r5,fp,-20
  817ea4:	08163c00 	call	8163c0 <get_cluster_flag>
  817ea8:	1005003a 	cmpeq	r2,r2,zero
  817eac:	10000c1e 	bne	r2,zero,817ee0 <get_home_directory_cluster_for_file+0x440>
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
  817eb0:	e0bffb0b 	ldhu	r2,-20(fp)
  817eb4:	10bfffcc 	andi	r2,r2,65535
  817eb8:	10fffe0c 	andi	r3,r2,65528
  817ebc:	00bffe14 	movui	r2,65528
  817ec0:	1880021e 	bne	r3,r2,817ecc <get_home_directory_cluster_for_file+0x42c>
							return false;
  817ec4:	e03fff15 	stw	zero,-4(fp)
  817ec8:	00003406 	br	817f9c <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
  817ecc:	e0bffb0b 	ldhu	r2,-20(fp)
  817ed0:	10bfffcc 	andi	r2,r2,65535
  817ed4:	10bffe0c 	andi	r2,r2,65528
  817ed8:	e0bff115 	stw	r2,-60(fp)
  817edc:	00000206 	br	817ee8 <get_home_directory_cluster_for_file+0x448>
					} else {
						// Directory path is invalid.                 
						return false;
  817ee0:	e03fff15 	stw	zero,-4(fp)
  817ee4:	00002d06 	br	817f9c <get_home_directory_cluster_for_file+0x4fc>
					}
				}
			} while ((cluster < 0x0000fff8)
					&& (new_cluster == home_dir_cluster));
  817ee8:	e0ffec17 	ldw	r3,-80(fp)
  817eec:	00bffdd4 	movui	r2,65527
  817ef0:	10c00316 	blt	r2,r3,817f00 <get_home_directory_cluster_for_file+0x460>
  817ef4:	e0fff117 	ldw	r3,-60(fp)
  817ef8:	e0bff617 	ldw	r2,-40(fp)
  817efc:	18bf9d26 	beq	r3,r2,817d74 <get_home_directory_cluster_for_file+0x2d4>
			if (new_cluster != home_dir_cluster) {
  817f00:	e0fff117 	ldw	r3,-60(fp)
  817f04:	e0bff617 	ldw	r2,-40(fp)
  817f08:	18800826 	beq	r3,r2,817f2c <get_home_directory_cluster_for_file+0x48c>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
  817f0c:	e0bff117 	ldw	r2,-60(fp)
  817f10:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
  817f14:	e0fff317 	ldw	r3,-52(fp)
  817f18:	e0bff517 	ldw	r2,-44(fp)
  817f1c:	1885883a 	add	r2,r3,r2
  817f20:	10800044 	addi	r2,r2,1
  817f24:	e0bff315 	stw	r2,-52(fp)
  817f28:	00000206 	br	817f34 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
  817f2c:	e03fff15 	stw	zero,-4(fp)
  817f30:	00001a06 	br	817f9c <get_home_directory_cluster_for_file+0x4fc>
			}
		}
		location = get_dir_divider_location(&(file_name[start_location]));
  817f34:	e0bff317 	ldw	r2,-52(fp)
  817f38:	1007883a 	mov	r3,r2
  817f3c:	e0bffc17 	ldw	r2,-16(fp)
  817f40:	1889883a 	add	r4,r3,r2
  817f44:	08176f40 	call	8176f4 <get_dir_divider_location>
  817f48:	e0bff515 	stw	r2,-44(fp)
		if (location < 0) {
  817f4c:	e0bff517 	ldw	r2,-44(fp)
  817f50:	1004403a 	cmpge	r2,r2,zero
  817f54:	1000021e 	bne	r2,zero,817f60 <get_home_directory_cluster_for_file+0x4c0>
			// Directory has been located.
			result = true;
  817f58:	00800044 	movi	r2,1
  817f5c:	e0bff715 	stw	r2,-36(fp)
	int location, index;
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
  817f60:	e0bff517 	ldw	r2,-44(fp)
  817f64:	10800048 	cmpgei	r2,r2,1
  817f68:	103edb1e 	bne	r2,zero,817ad8 <get_home_directory_cluster_for_file+0x38>
			// Directory has been located.
			result = true;
		}
	}

	*home_directory_cluster = home_dir_cluster;
  817f6c:	e0fffd17 	ldw	r3,-12(fp)
  817f70:	e0bff617 	ldw	r2,-40(fp)
  817f74:	18800015 	stw	r2,0(r3)
	if (home_dir_cluster == 0) {
  817f78:	e0bff617 	ldw	r2,-40(fp)
  817f7c:	1004c03a 	cmpne	r2,r2,zero
  817f80:	1000041e 	bne	r2,zero,817f94 <get_home_directory_cluster_for_file+0x4f4>
		file_record->file_record_cluster = 0; // Home directory is the root directory.
  817f84:	e0bffe17 	ldw	r2,-8(fp)
  817f88:	10000a15 	stw	zero,40(r2)
		result = true;
  817f8c:	00800044 	movi	r2,1
  817f90:	e0bff715 	stw	r2,-36(fp)
	}
	return result;
  817f94:	e0bff717 	ldw	r2,-36(fp)
  817f98:	e0bfff15 	stw	r2,-4(fp)
  817f9c:	e0bfff17 	ldw	r2,-4(fp)
}
  817fa0:	e037883a 	mov	sp,fp
  817fa4:	dfc00117 	ldw	ra,4(sp)
  817fa8:	df000017 	ldw	fp,0(sp)
  817fac:	dec00204 	addi	sp,sp,8
  817fb0:	f800283a 	ret

00817fb4 <find_file_in_directory>:

bool find_file_in_directory(int directory_start_cluster, char *file_name,
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  817fb4:	deffe704 	addi	sp,sp,-100
  817fb8:	dfc01815 	stw	ra,96(sp)
  817fbc:	df001715 	stw	fp,92(sp)
  817fc0:	df001704 	addi	fp,sp,92
  817fc4:	e13ffc15 	stw	r4,-16(fp)
  817fc8:	e17ffd15 	stw	r5,-12(fp)
  817fcc:	e1bffe15 	stw	r6,-8(fp)
	int location = get_dir_divider_location(file_name);
  817fd0:	e13ffd17 	ldw	r4,-12(fp)
  817fd4:	08176f40 	call	8176f4 <get_dir_divider_location>
  817fd8:	e0bff715 	stw	r2,-36(fp)
	int last_dir_separator = 0;
  817fdc:	e03ff615 	stw	zero,-40(fp)
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  817fe0:	00800804 	movi	r2,32
  817fe4:	e0bff805 	stb	r2,-32(fp)
  817fe8:	00800804 	movi	r2,32
  817fec:	e0bff845 	stb	r2,-31(fp)
  817ff0:	00800804 	movi	r2,32
  817ff4:	e0bff885 	stb	r2,-30(fp)
  817ff8:	00800804 	movi	r2,32
  817ffc:	e0bff8c5 	stb	r2,-29(fp)
  818000:	00800804 	movi	r2,32
  818004:	e0bff905 	stb	r2,-28(fp)
  818008:	00800804 	movi	r2,32
  81800c:	e0bff945 	stb	r2,-27(fp)
  818010:	00800804 	movi	r2,32
  818014:	e0bff985 	stb	r2,-26(fp)
  818018:	00800804 	movi	r2,32
  81801c:	e0bff9c5 	stb	r2,-25(fp)
	char extension[3] = { ' ', ' ', ' ' };
  818020:	00800804 	movi	r2,32
  818024:	e0bffa05 	stb	r2,-24(fp)
  818028:	00800804 	movi	r2,32
  81802c:	e0bffa45 	stb	r2,-23(fp)
  818030:	00800804 	movi	r2,32
  818034:	e0bffa85 	stb	r2,-22(fp)
	int ext_index = -1;
  818038:	00bfffc4 	movi	r2,-1
  81803c:	e0bff515 	stw	r2,-44(fp)
	int cluster = directory_start_cluster;
  818040:	e0bffc17 	ldw	r2,-16(fp)
  818044:	e0bff415 	stw	r2,-48(fp)
	int index;
	int length = strlen(file_name);
  818048:	e13ffd17 	ldw	r4,-12(fp)
  81804c:	0809a7c0 	call	809a7c <strlen>
  818050:	e0bff215 	stw	r2,-56(fp)
	bool result = false;
  818054:	e03ff115 	stw	zero,-60(fp)

	// Skip through all directory separators.
	while (location > 0) {
  818058:	00000b06 	br	818088 <find_file_in_directory+0xd4>
		last_dir_separator = last_dir_separator + location + 1;
  81805c:	e0fff617 	ldw	r3,-40(fp)
  818060:	e0bff717 	ldw	r2,-36(fp)
  818064:	1885883a 	add	r2,r3,r2
  818068:	10800044 	addi	r2,r2,1
  81806c:	e0bff615 	stw	r2,-40(fp)
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
  818070:	e0bff617 	ldw	r2,-40(fp)
  818074:	1007883a 	mov	r3,r2
  818078:	e0bffd17 	ldw	r2,-12(fp)
  81807c:	1889883a 	add	r4,r3,r2
  818080:	08176f40 	call	8176f4 <get_dir_divider_location>
  818084:	e0bff715 	stw	r2,-36(fp)
	int index;
	int length = strlen(file_name);
	bool result = false;

	// Skip through all directory separators.
	while (location > 0) {
  818088:	e0bff717 	ldw	r2,-36(fp)
  81808c:	10800048 	cmpgei	r2,r2,1
  818090:	103ff21e 	bne	r2,zero,81805c <find_file_in_directory+0xa8>
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
  818094:	e0bff617 	ldw	r2,-40(fp)
  818098:	e0bff315 	stw	r2,-52(fp)
  81809c:	00002b06 	br	81814c <find_file_in_directory+0x198>
		if (file_name[index] == '.') {
  8180a0:	e0bff317 	ldw	r2,-52(fp)
  8180a4:	1007883a 	mov	r3,r2
  8180a8:	e0bffd17 	ldw	r2,-12(fp)
  8180ac:	1885883a 	add	r2,r3,r2
  8180b0:	10800003 	ldbu	r2,0(r2)
  8180b4:	10803fcc 	andi	r2,r2,255
  8180b8:	1080201c 	xori	r2,r2,128
  8180bc:	10bfe004 	addi	r2,r2,-128
  8180c0:	10800b98 	cmpnei	r2,r2,46
  8180c4:	1000031e 	bne	r2,zero,8180d4 <find_file_in_directory+0x120>
			ext_index = index;
  8180c8:	e0bff317 	ldw	r2,-52(fp)
  8180cc:	e0bff515 	stw	r2,-44(fp)
  8180d0:	00001b06 	br	818140 <find_file_in_directory+0x18c>
		} else if (ext_index < 0) {
  8180d4:	e0bff517 	ldw	r2,-44(fp)
  8180d8:	1004403a 	cmpge	r2,r2,zero
  8180dc:	10000c1e 	bne	r2,zero,818110 <find_file_in_directory+0x15c>
			name[index - last_dir_separator] = file_name[index];
  8180e0:	e0fff317 	ldw	r3,-52(fp)
  8180e4:	e0bff617 	ldw	r2,-40(fp)
  8180e8:	1889c83a 	sub	r4,r3,r2
  8180ec:	e0bff317 	ldw	r2,-52(fp)
  8180f0:	1007883a 	mov	r3,r2
  8180f4:	e0bffd17 	ldw	r2,-12(fp)
  8180f8:	1885883a 	add	r2,r3,r2
  8180fc:	10c00003 	ldbu	r3,0(r2)
  818100:	e0bff804 	addi	r2,fp,-32
  818104:	1105883a 	add	r2,r2,r4
  818108:	10c00005 	stb	r3,0(r2)
  81810c:	00000c06 	br	818140 <find_file_in_directory+0x18c>
		} else {
			extension[index - ext_index - 1] = file_name[index];
  818110:	e0fff317 	ldw	r3,-52(fp)
  818114:	e0bff517 	ldw	r2,-44(fp)
  818118:	1885c83a 	sub	r2,r3,r2
  81811c:	113fffc4 	addi	r4,r2,-1
  818120:	e0bff317 	ldw	r2,-52(fp)
  818124:	1007883a 	mov	r3,r2
  818128:	e0bffd17 	ldw	r2,-12(fp)
  81812c:	1885883a 	add	r2,r3,r2
  818130:	10c00003 	ldbu	r3,0(r2)
  818134:	e0bffa04 	addi	r2,fp,-24
  818138:	1105883a 	add	r2,r2,r4
  81813c:	10c00005 	stb	r3,0(r2)
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
  818140:	e0bff317 	ldw	r2,-52(fp)
  818144:	10800044 	addi	r2,r2,1
  818148:	e0bff315 	stw	r2,-52(fp)
  81814c:	e0fff317 	ldw	r3,-52(fp)
  818150:	e0bff217 	ldw	r2,-56(fp)
  818154:	18bfd216 	blt	r3,r2,8180a0 <find_file_in_directory+0xec>
			extension[index - ext_index - 1] = file_name[index];
		}
	}

	// Look for the file.
	if (directory_start_cluster == 0) {
  818158:	e0bffc17 	ldw	r2,-16(fp)
  81815c:	1004c03a 	cmpne	r2,r2,zero
  818160:	1000441e 	bne	r2,zero,818274 <find_file_in_directory+0x2c0>
		/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
  818164:	008020b4 	movhi	r2,130
  818168:	1089df04 	addi	r2,r2,10108
  81816c:	1080050b 	ldhu	r2,20(r2)
  818170:	10bfffcc 	andi	r2,r2,65535
  818174:	1008917a 	slli	r4,r2,5
  818178:	008020b4 	movhi	r2,130
  81817c:	1089df04 	addi	r2,r2,10108
  818180:	1080030b 	ldhu	r2,12(r2)
  818184:	117fffcc 	andi	r5,r2,65535
  818188:	08087b00 	call	8087b0 <__divsi3>
  81818c:	e0bff015 	stw	r2,-64(fp)
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  818190:	e03fef15 	stw	zero,-68(fp)
  818194:	00003306 	br	818264 <find_file_in_directory+0x2b0>
			if (Read_Sector_Data(sector_index
  818198:	008020b4 	movhi	r2,130
  81819c:	1089df04 	addi	r2,r2,10108
  8181a0:	10c01317 	ldw	r3,76(r2)
  8181a4:	e0bfef17 	ldw	r2,-68(fp)
  8181a8:	1885883a 	add	r2,r3,r2
  8181ac:	1009883a 	mov	r4,r2
  8181b0:	d1674c17 	ldw	r5,-25296(gp)
  8181b4:	08162c40 	call	8162c4 <Read_Sector_Data>
  8181b8:	1005003a 	cmpeq	r2,r2,zero
  8181bc:	10008e1e 	bne	r2,zero,8183f8 <find_file_in_directory+0x444>
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  8181c0:	e03fee15 	stw	zero,-72(fp)
  8181c4:	00001e06 	br	818240 <find_file_in_directory+0x28c>
					// Read file record.
					Read_File_Record_At_Offset(file_counter * 32, file_record,
  8181c8:	e0bfee17 	ldw	r2,-72(fp)
  8181cc:	1008917a 	slli	r4,r2,5
  8181d0:	e1ffef17 	ldw	r7,-68(fp)
  8181d4:	e17ffe17 	ldw	r5,-8(fp)
  8181d8:	000d883a 	mov	r6,zero
  8181dc:	081670c0 	call	81670c <Read_File_Record_At_Offset>
							0, sector_index);
					if ((file_record->name[0] != 0xe5) && (file_record->name[0]
  8181e0:	e0bffe17 	ldw	r2,-8(fp)
  8181e4:	10800003 	ldbu	r2,0(r2)
  8181e8:	10803fcc 	andi	r2,r2,255
  8181ec:	10803960 	cmpeqi	r2,r2,229
  8181f0:	1000101e 	bne	r2,zero,818234 <find_file_in_directory+0x280>
  8181f4:	e0bffe17 	ldw	r2,-8(fp)
  8181f8:	10800003 	ldbu	r2,0(r2)
  8181fc:	10803fcc 	andi	r2,r2,255
  818200:	1005003a 	cmpeq	r2,r2,zero
  818204:	10000b1e 	bne	r2,zero,818234 <find_file_in_directory+0x280>
							!= 0x00)) {
						bool match = match_file_record_to_name_ext(file_record,
								name, extension);
  818208:	e17ff804 	addi	r5,fp,-32
  81820c:	e1bffa04 	addi	r6,fp,-24
  818210:	e13ffe17 	ldw	r4,-8(fp)
  818214:	08177b40 	call	8177b4 <match_file_record_to_name_ext>
  818218:	e0bfed15 	stw	r2,-76(fp)

						if (match) {
  81821c:	e0bfed17 	ldw	r2,-76(fp)
  818220:	1005003a 	cmpeq	r2,r2,zero
  818224:	1000031e 	bne	r2,zero,818234 <find_file_in_directory+0x280>
							result = true;
  818228:	00800044 	movi	r2,1
  81822c:	e0bff115 	stw	r2,-60(fp)
							break;
  818230:	00000606 	br	81824c <find_file_in_directory+0x298>
			if (Read_Sector_Data(sector_index
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  818234:	e0bfee17 	ldw	r2,-72(fp)
  818238:	10800044 	addi	r2,r2,1
  81823c:	e0bfee15 	stw	r2,-72(fp)
  818240:	e0bfee17 	ldw	r2,-72(fp)
  818244:	10800410 	cmplti	r2,r2,16
  818248:	103fdf1e 	bne	r2,zero,8181c8 <find_file_in_directory+0x214>
					}
				}
			} else {
				break;
			}
			if (result) {
  81824c:	e0bff117 	ldw	r2,-60(fp)
  818250:	1004c03a 	cmpne	r2,r2,zero
  818254:	1000681e 	bne	r2,zero,8183f8 <find_file_in_directory+0x444>
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  818258:	e0bfef17 	ldw	r2,-68(fp)
  81825c:	10800044 	addi	r2,r2,1
  818260:	e0bfef15 	stw	r2,-68(fp)
  818264:	e0ffef17 	ldw	r3,-68(fp)
  818268:	e0bff017 	ldw	r2,-64(fp)
  81826c:	18bfca16 	blt	r3,r2,818198 <find_file_in_directory+0x1e4>
  818270:	00006106 	br	8183f8 <find_file_in_directory+0x444>
		}
	} else {
		do {
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
  818274:	e0bff417 	ldw	r2,-48(fp)
  818278:	10ffff84 	addi	r3,r2,-2
  81827c:	008020b4 	movhi	r2,130
  818280:	1089df04 	addi	r2,r2,10108
  818284:	10800383 	ldbu	r2,14(r2)
  818288:	10803fcc 	andi	r2,r2,255
  81828c:	1885383a 	mul	r2,r3,r2
  818290:	1007883a 	mov	r3,r2
  818294:	008020b4 	movhi	r2,130
  818298:	1089df04 	addi	r2,r2,10108
  81829c:	10801417 	ldw	r2,80(r2)
  8182a0:	1885883a 	add	r2,r3,r2
  8182a4:	e0bfec15 	stw	r2,-80(fp)
			int sector_index;

			for (sector_index = 0; sector_index
  8182a8:	e03feb15 	stw	zero,-84(fp)
  8182ac:	00003006 	br	818370 <find_file_in_directory+0x3bc>
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
  8182b0:	e0ffeb17 	ldw	r3,-84(fp)
  8182b4:	e0bfec17 	ldw	r2,-80(fp)
  8182b8:	1889883a 	add	r4,r3,r2
  8182bc:	d1674c17 	ldw	r5,-25296(gp)
  8182c0:	08162c40 	call	8162c4 <Read_Sector_Data>
  8182c4:	1005003a 	cmpeq	r2,r2,zero
  8182c8:	10002f1e 	bne	r2,zero,818388 <find_file_in_directory+0x3d4>
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  8182cc:	e03fea15 	stw	zero,-88(fp)
  8182d0:	00001e06 	br	81834c <find_file_in_directory+0x398>
						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
  8182d4:	e0bfea17 	ldw	r2,-88(fp)
  8182d8:	1008917a 	slli	r4,r2,5
  8182dc:	e1bff417 	ldw	r6,-48(fp)
  8182e0:	e1ffeb17 	ldw	r7,-84(fp)
  8182e4:	e17ffe17 	ldw	r5,-8(fp)
  8182e8:	081670c0 	call	81670c <Read_File_Record_At_Offset>
								file_record, cluster, sector_index);
						if ((file_record->name[0] != 0xe5)
  8182ec:	e0bffe17 	ldw	r2,-8(fp)
  8182f0:	10800003 	ldbu	r2,0(r2)
  8182f4:	10803fcc 	andi	r2,r2,255
  8182f8:	10803960 	cmpeqi	r2,r2,229
  8182fc:	1000101e 	bne	r2,zero,818340 <find_file_in_directory+0x38c>
  818300:	e0bffe17 	ldw	r2,-8(fp)
  818304:	10800003 	ldbu	r2,0(r2)
  818308:	10803fcc 	andi	r2,r2,255
  81830c:	1005003a 	cmpeq	r2,r2,zero
  818310:	10000b1e 	bne	r2,zero,818340 <find_file_in_directory+0x38c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
  818314:	e17ff804 	addi	r5,fp,-32
  818318:	e1bffa04 	addi	r6,fp,-24
  81831c:	e13ffe17 	ldw	r4,-8(fp)
  818320:	08177b40 	call	8177b4 <match_file_record_to_name_ext>
  818324:	e0bfe915 	stw	r2,-92(fp)

							if (match) {
  818328:	e0bfe917 	ldw	r2,-92(fp)
  81832c:	1005003a 	cmpeq	r2,r2,zero
  818330:	1000031e 	bne	r2,zero,818340 <find_file_in_directory+0x38c>
								result = true;
  818334:	00800044 	movi	r2,1
  818338:	e0bff115 	stw	r2,-60(fp)
								break;
  81833c:	00000606 	br	818358 <find_file_in_directory+0x3a4>
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  818340:	e0bfea17 	ldw	r2,-88(fp)
  818344:	10800044 	addi	r2,r2,1
  818348:	e0bfea15 	stw	r2,-88(fp)
  81834c:	e0bfea17 	ldw	r2,-88(fp)
  818350:	10800410 	cmplti	r2,r2,16
  818354:	103fdf1e 	bne	r2,zero,8182d4 <find_file_in_directory+0x320>
						}
					}
				} else {
					break;
				}
				if (result) {
  818358:	e0bff117 	ldw	r2,-60(fp)
  81835c:	1004c03a 	cmpne	r2,r2,zero
  818360:	1000091e 	bne	r2,zero,818388 <find_file_in_directory+0x3d4>
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
					< boot_sector_data.sectors_per_cluster; sector_index++) {
  818364:	e0bfeb17 	ldw	r2,-84(fp)
  818368:	10800044 	addi	r2,r2,1
  81836c:	e0bfeb15 	stw	r2,-84(fp)
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
  818370:	008020b4 	movhi	r2,130
  818374:	1089df04 	addi	r2,r2,10108
  818378:	10800383 	ldbu	r2,14(r2)
  81837c:	10c03fcc 	andi	r3,r2,255
  818380:	e0bfeb17 	ldw	r2,-84(fp)
  818384:	10ffca16 	blt	r2,r3,8182b0 <find_file_in_directory+0x2fc>
					break;
				}
			}
			// If this is the end of the cluster and the file has not been found, then see if there is another cluster
			// that holds data for the current directory.
			if (result == false) {
  818388:	e0bff117 	ldw	r2,-60(fp)
  81838c:	1004c03a 	cmpne	r2,r2,zero
  818390:	1000131e 	bne	r2,zero,8183e0 <find_file_in_directory+0x42c>
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster)) {
  818394:	e13ff417 	ldw	r4,-48(fp)
  818398:	e17ffb04 	addi	r5,fp,-20
  81839c:	08163c00 	call	8163c0 <get_cluster_flag>
  8183a0:	1005003a 	cmpeq	r2,r2,zero
  8183a4:	10000c1e 	bne	r2,zero,8183d8 <find_file_in_directory+0x424>
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  8183a8:	e0bffb0b 	ldhu	r2,-20(fp)
  8183ac:	10bfffcc 	andi	r2,r2,65535
  8183b0:	10fffe0c 	andi	r3,r2,65528
  8183b4:	00bffe14 	movui	r2,65528
  8183b8:	1880021e 	bne	r3,r2,8183c4 <find_file_in_directory+0x410>
						return false;
  8183bc:	e03fff15 	stw	zero,-4(fp)
  8183c0:	00000f06 	br	818400 <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
  8183c4:	e0bffb0b 	ldhu	r2,-20(fp)
  8183c8:	10bfffcc 	andi	r2,r2,65535
  8183cc:	10bffe0c 	andi	r2,r2,65528
  8183d0:	e0bff415 	stw	r2,-48(fp)
  8183d4:	00000206 	br	8183e0 <find_file_in_directory+0x42c>
				} else {
					// Directory path is invalid.
					return false;
  8183d8:	e03fff15 	stw	zero,-4(fp)
  8183dc:	00000806 	br	818400 <find_file_in_directory+0x44c>
				}
			}
		} while ((cluster < 0x0000fff8) && (result == false));
  8183e0:	e0fff417 	ldw	r3,-48(fp)
  8183e4:	00bffdd4 	movui	r2,65527
  8183e8:	10c00316 	blt	r2,r3,8183f8 <find_file_in_directory+0x444>
  8183ec:	e0bff117 	ldw	r2,-60(fp)
  8183f0:	1005003a 	cmpeq	r2,r2,zero
  8183f4:	103f9f1e 	bne	r2,zero,818274 <find_file_in_directory+0x2c0>
	}

	return result;
  8183f8:	e0bff117 	ldw	r2,-60(fp)
  8183fc:	e0bfff15 	stw	r2,-4(fp)
  818400:	e0bfff17 	ldw	r2,-4(fp)
}
  818404:	e037883a 	mov	sp,fp
  818408:	dfc00117 	ldw	ra,4(sp)
  81840c:	df000017 	ldw	fp,0(sp)
  818410:	dec00204 	addi	sp,sp,8
  818414:	f800283a 	ret

00818418 <find_first_empty_cluster>:

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  818418:	defff504 	addi	sp,sp,-44
  81841c:	dfc00a15 	stw	ra,40(sp)
  818420:	df000915 	stw	fp,36(sp)
  818424:	df000904 	addi	fp,sp,36
  818428:	e13fff15 	stw	r4,-4(fp)
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
  81842c:	008020b4 	movhi	r2,130
  818430:	1089df04 	addi	r2,r2,10108
  818434:	10801117 	ldw	r2,68(r2)
  818438:	e0bffe15 	stw	r2,-8(fp)
	unsigned int cluster_index = 2;
  81843c:	00800084 	movi	r2,2
  818440:	e0bffd15 	stw	r2,-12(fp)
	short int cluster = -1;
  818444:	00bfffc4 	movi	r2,-1
  818448:	e0bffc0d 	sth	r2,-16(fp)
	bool result = false;
  81844c:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
  818450:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
  818454:	008020b4 	movhi	r2,130
  818458:	1089df04 	addi	r2,r2,10108
  81845c:	10801417 	ldw	r2,80(r2)
  818460:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
  818464:	008020b4 	movhi	r2,130
  818468:	1089df04 	addi	r2,r2,10108
  81846c:	1080058b 	ldhu	r2,22(r2)
  818470:	10bfffcc 	andi	r2,r2,65535
  818474:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 =
			boot_sector_data.total_sector_count_if_above_32MB;
  818478:	008020b4 	movhi	r2,130
  81847c:	1089df04 	addi	r2,r2,10108
  818480:	10800917 	ldw	r2,36(r2)
  818484:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32) {
  818488:	e0fff817 	ldw	r3,-32(fp)
  81848c:	e0bff717 	ldw	r2,-36(fp)
  818490:	10c00b2e 	bgeu	r2,r3,8184c0 <find_first_empty_cluster+0xa8>
		max_cluster_index = ((less_than_32 - non_data_sectors)
  818494:	e0fff817 	ldw	r3,-32(fp)
  818498:	e0bff917 	ldw	r2,-28(fp)
  81849c:	1889c83a 	sub	r4,r3,r2
  8184a0:	008020b4 	movhi	r2,130
  8184a4:	1089df04 	addi	r2,r2,10108
  8184a8:	10800383 	ldbu	r2,14(r2)
  8184ac:	11403fcc 	andi	r5,r2,255
  8184b0:	08088700 	call	808870 <__udivsi3>
  8184b4:	10800044 	addi	r2,r2,1
  8184b8:	e0bffa15 	stw	r2,-24(fp)
  8184bc:	00002906 	br	818564 <find_first_empty_cluster+0x14c>
				/ boot_sector_data.sectors_per_cluster) + 1;
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
  8184c0:	e0fff717 	ldw	r3,-36(fp)
  8184c4:	e0bff917 	ldw	r2,-28(fp)
  8184c8:	1889c83a 	sub	r4,r3,r2
  8184cc:	008020b4 	movhi	r2,130
  8184d0:	1089df04 	addi	r2,r2,10108
  8184d4:	10800383 	ldbu	r2,14(r2)
  8184d8:	11403fcc 	andi	r5,r2,255
  8184dc:	08088700 	call	808870 <__udivsi3>
  8184e0:	10800044 	addi	r2,r2,1
  8184e4:	e0bffa15 	stw	r2,-24(fp)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  8184e8:	00001e06 	br	818564 <find_first_empty_cluster+0x14c>
		if (Read_Sector_Data(sector, fat_partition_offset_in_512_byte_sectors)) {
  8184ec:	e13ffe17 	ldw	r4,-8(fp)
  8184f0:	d1674c17 	ldw	r5,-25296(gp)
  8184f4:	08162c40 	call	8162c4 <Read_Sector_Data>
  8184f8:	1005003a 	cmpeq	r2,r2,zero
  8184fc:	1000131e 	bne	r2,zero,81854c <find_first_empty_cluster+0x134>
			do {
				cluster
  818500:	d0a74e17 	ldw	r2,-25288(gp)
  818504:	10800a17 	ldw	r2,40(r2)
  818508:	1007883a 	mov	r3,r2
  81850c:	e0bffd17 	ldw	r2,-12(fp)
  818510:	10803fcc 	andi	r2,r2,255
  818514:	1085883a 	add	r2,r2,r2
  818518:	1885883a 	add	r2,r3,r2
  81851c:	1080002b 	ldhuio	r2,0(r2)
  818520:	e0bffc0d 	sth	r2,-16(fp)
						= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
  818524:	e0bffc0f 	ldh	r2,-16(fp)
  818528:	1005003a 	cmpeq	r2,r2,zero
  81852c:	1000071e 	bne	r2,zero,81854c <find_first_empty_cluster+0x134>
					// Free cluster found.
					break;
				} else {
					cluster_index++;
  818530:	e0bffd17 	ldw	r2,-12(fp)
  818534:	10800044 	addi	r2,r2,1
  818538:	e0bffd15 	stw	r2,-12(fp)
				}
			} while ((cluster_index % 256) != 0);
  81853c:	e0bffd17 	ldw	r2,-12(fp)
  818540:	10803fcc 	andi	r2,r2,255
  818544:	1004c03a 	cmpne	r2,r2,zero
  818548:	103fed1e 	bne	r2,zero,818500 <find_first_empty_cluster+0xe8>
		}
		if (cluster == 0) {
  81854c:	e0bffc0f 	ldh	r2,-16(fp)
  818550:	1005003a 	cmpeq	r2,r2,zero
  818554:	1000081e 	bne	r2,zero,818578 <find_first_empty_cluster+0x160>
			break;
		}
		sector++;
  818558:	e0bffe17 	ldw	r2,-8(fp)
  81855c:	10800044 	addi	r2,r2,1
  818560:	e0bffe15 	stw	r2,-8(fp)
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  818564:	008020b4 	movhi	r2,130
  818568:	1089df04 	addi	r2,r2,10108
  81856c:	10c01217 	ldw	r3,72(r2)
  818570:	e0bffe17 	ldw	r2,-8(fp)
  818574:	18bfdd1e 	bne	r3,r2,8184ec <find_first_empty_cluster+0xd4>
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
  818578:	e0bffc0f 	ldh	r2,-16(fp)
  81857c:	1004c03a 	cmpne	r2,r2,zero
  818580:	1000081e 	bne	r2,zero,8185a4 <find_first_empty_cluster+0x18c>
  818584:	e0fffc0f 	ldh	r3,-16(fp)
  818588:	e0bffa17 	ldw	r2,-24(fp)
  81858c:	10c00536 	bltu	r2,r3,8185a4 <find_first_empty_cluster+0x18c>
		*cluster_number = cluster_index;
  818590:	e0bfff17 	ldw	r2,-4(fp)
  818594:	e0fffd17 	ldw	r3,-12(fp)
  818598:	10c00015 	stw	r3,0(r2)
		result = true;
  81859c:	00800044 	movi	r2,1
  8185a0:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
  8185a4:	e0bffb17 	ldw	r2,-20(fp)
}
  8185a8:	e037883a 	mov	sp,fp
  8185ac:	dfc00117 	ldw	ra,4(sp)
  8185b0:	df000017 	ldw	fp,0(sp)
  8185b4:	dec00204 	addi	sp,sp,8
  8185b8:	f800283a 	ret

008185bc <find_first_empty_record_in_a_subdirectory>:

int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
  8185bc:	defff404 	addi	sp,sp,-48
  8185c0:	dfc00b15 	stw	ra,44(sp)
  8185c4:	df000a15 	stw	fp,40(sp)
  8185c8:	df000a04 	addi	fp,sp,40
  8185cc:	e13ffe15 	stw	r4,-8(fp)
	int result = -1;
  8185d0:	00bfffc4 	movi	r2,-1
  8185d4:	e0bffb15 	stw	r2,-20(fp)
	int cluster = start_cluster_index;
  8185d8:	e0bffe17 	ldw	r2,-8(fp)
  8185dc:	e0bffa15 	stw	r2,-24(fp)
	do {
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
  8185e0:	e0bffa17 	ldw	r2,-24(fp)
  8185e4:	10ffff84 	addi	r3,r2,-2
  8185e8:	008020b4 	movhi	r2,130
  8185ec:	1089df04 	addi	r2,r2,10108
  8185f0:	10800383 	ldbu	r2,14(r2)
  8185f4:	10803fcc 	andi	r2,r2,255
  8185f8:	1885383a 	mul	r2,r3,r2
  8185fc:	1007883a 	mov	r3,r2
  818600:	008020b4 	movhi	r2,130
  818604:	1089df04 	addi	r2,r2,10108
  818608:	10801417 	ldw	r2,80(r2)
  81860c:	1885883a 	add	r2,r3,r2
  818610:	e0bff915 	stw	r2,-28(fp)
		int sector_index;

		for (sector_index = 0; sector_index
  818614:	e03ff815 	stw	zero,-32(fp)
  818618:	00002c06 	br	8186cc <find_first_empty_record_in_a_subdirectory+0x110>
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
  81861c:	e0fff817 	ldw	r3,-32(fp)
  818620:	e0bff917 	ldw	r2,-28(fp)
  818624:	1889883a 	add	r4,r3,r2
  818628:	d1674c17 	ldw	r5,-25296(gp)
  81862c:	08162c40 	call	8162c4 <Read_Sector_Data>
  818630:	1005003a 	cmpeq	r2,r2,zero
  818634:	10002b1e 	bne	r2,zero,8186e4 <find_first_empty_record_in_a_subdirectory+0x128>
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  818638:	e03ff715 	stw	zero,-36(fp)
  81863c:	00001d06 	br	8186b4 <find_first_empty_record_in_a_subdirectory+0xf8>
					unsigned short int leading_char;

					// Read file record.
					leading_char
  818640:	d0a74e17 	ldw	r2,-25288(gp)
  818644:	10800a17 	ldw	r2,40(r2)
  818648:	1007883a 	mov	r3,r2
  81864c:	e0bff717 	ldw	r2,-36(fp)
  818650:	1004917a 	slli	r2,r2,5
  818654:	1885883a 	add	r2,r3,r2
  818658:	10800023 	ldbuio	r2,0(r2)
  81865c:	10803fcc 	andi	r2,r2,255
  818660:	e0bff60d 	sth	r2,-40(fp)
							= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
					if ((leading_char == 0x00e5) || (leading_char == 0)) {
  818664:	e0bff60b 	ldhu	r2,-40(fp)
  818668:	10803960 	cmpeqi	r2,r2,229
  81866c:	1000031e 	bne	r2,zero,81867c <find_first_empty_record_in_a_subdirectory+0xc0>
  818670:	e0bff60b 	ldhu	r2,-40(fp)
  818674:	1004c03a 	cmpne	r2,r2,zero
  818678:	10000b1e 	bne	r2,zero,8186a8 <find_first_empty_record_in_a_subdirectory+0xec>
						result = (cluster)
  81867c:	e0bff817 	ldw	r2,-32(fp)
  818680:	1006913a 	slli	r3,r2,4
  818684:	e0bff717 	ldw	r2,-36(fp)
  818688:	1885883a 	add	r2,r3,r2
  81868c:	1006943a 	slli	r3,r2,16
  818690:	e0bffa17 	ldw	r2,-24(fp)
  818694:	1884b03a 	or	r2,r3,r2
  818698:	e0bffb15 	stw	r2,-20(fp)
								| ((sector_index * 16 + file_counter) << 16);
						return result;
  81869c:	e0bffb17 	ldw	r2,-20(fp)
  8186a0:	e0bfff15 	stw	r2,-4(fp)
  8186a4:	00005206 	br	8187f0 <find_first_empty_record_in_a_subdirectory+0x234>
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  8186a8:	e0bff717 	ldw	r2,-36(fp)
  8186ac:	10800044 	addi	r2,r2,1
  8186b0:	e0bff715 	stw	r2,-36(fp)
  8186b4:	e0bff717 	ldw	r2,-36(fp)
  8186b8:	10800410 	cmplti	r2,r2,16
  8186bc:	103fe01e 	bne	r2,zero,818640 <find_first_empty_record_in_a_subdirectory+0x84>
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
				< boot_sector_data.sectors_per_cluster; sector_index++) {
  8186c0:	e0bff817 	ldw	r2,-32(fp)
  8186c4:	10800044 	addi	r2,r2,1
  8186c8:	e0bff815 	stw	r2,-32(fp)
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
  8186cc:	008020b4 	movhi	r2,130
  8186d0:	1089df04 	addi	r2,r2,10108
  8186d4:	10800383 	ldbu	r2,14(r2)
  8186d8:	10c03fcc 	andi	r3,r2,255
  8186dc:	e0bff817 	ldw	r2,-32(fp)
  8186e0:	10ffce16 	blt	r2,r3,81861c <find_first_empty_record_in_a_subdirectory+0x60>
				break;
			}
		}
		// If this is the end of the cluster and the file has not been found, then see if there is another cluster
		// that holds data for the current directory.
		if (result < 0) {
  8186e4:	e0bffb17 	ldw	r2,-20(fp)
  8186e8:	1004403a 	cmpge	r2,r2,zero
  8186ec:	1000381e 	bne	r2,zero,8187d0 <find_first_empty_record_in_a_subdirectory+0x214>
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster)) {
  8186f0:	e13ffa17 	ldw	r4,-24(fp)
  8186f4:	e17ffc04 	addi	r5,fp,-16
  8186f8:	08163c00 	call	8163c0 <get_cluster_flag>
  8186fc:	1005003a 	cmpeq	r2,r2,zero
  818700:	1000311e 	bne	r2,zero,8187c8 <find_first_empty_record_in_a_subdirectory+0x20c>
				// The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  818704:	e0bffc0b 	ldhu	r2,-16(fp)
  818708:	10bfffcc 	andi	r2,r2,65535
  81870c:	10fffe0c 	andi	r3,r2,65528
  818710:	00bffe14 	movui	r2,65528
  818714:	18802e1e 	bne	r3,r2,8187d0 <find_first_empty_record_in_a_subdirectory+0x214>
					int new_dir_cluster;
					if (find_first_empty_cluster(&new_dir_cluster)) {
  818718:	e13ffd04 	addi	r4,fp,-12
  81871c:	08184180 	call	818418 <find_first_empty_cluster>
  818720:	1005003a 	cmpeq	r2,r2,zero
  818724:	1000231e 	bne	r2,zero,8187b4 <find_first_empty_record_in_a_subdirectory+0x1f8>
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster,
  818728:	e13ffa17 	ldw	r4,-24(fp)
  81872c:	e0bffd17 	ldw	r2,-12(fp)
  818730:	117fffcc 	andi	r5,r2,65535
  818734:	2960001c 	xori	r5,r5,32768
  818738:	29600004 	addi	r5,r5,-32768
  81873c:	01800044 	movi	r6,1
  818740:	08164780 	call	816478 <mark_cluster>
  818744:	1005003a 	cmpeq	r2,r2,zero
  818748:	10001a1e 	bne	r2,zero,8187b4 <find_first_empty_record_in_a_subdirectory+0x1f8>
  81874c:	e0bffd17 	ldw	r2,-12(fp)
  818750:	1009883a 	mov	r4,r2
  818754:	017fffc4 	movi	r5,-1
  818758:	01800044 	movi	r6,1
  81875c:	08164780 	call	816478 <mark_cluster>
  818760:	1005003a 	cmpeq	r2,r2,zero
  818764:	1000131e 	bne	r2,zero,8187b4 <find_first_empty_record_in_a_subdirectory+0x1f8>
  818768:	e13ffa17 	ldw	r4,-24(fp)
  81876c:	e0bffd17 	ldw	r2,-12(fp)
  818770:	117fffcc 	andi	r5,r2,65535
  818774:	2960001c 	xori	r5,r5,32768
  818778:	29600004 	addi	r5,r5,-32768
  81877c:	000d883a 	mov	r6,zero
  818780:	08164780 	call	816478 <mark_cluster>
  818784:	1005003a 	cmpeq	r2,r2,zero
  818788:	10000a1e 	bne	r2,zero,8187b4 <find_first_empty_record_in_a_subdirectory+0x1f8>
  81878c:	e0bffd17 	ldw	r2,-12(fp)
  818790:	1009883a 	mov	r4,r2
  818794:	017fffc4 	movi	r5,-1
  818798:	000d883a 	mov	r6,zero
  81879c:	08164780 	call	816478 <mark_cluster>
  8187a0:	1005003a 	cmpeq	r2,r2,zero
  8187a4:	1000031e 	bne	r2,zero,8187b4 <find_first_empty_record_in_a_subdirectory+0x1f8>
										((short int) (0xffff)), true)
								&& mark_cluster(cluster,
										((short int) (new_dir_cluster)), false)
								&& mark_cluster(new_dir_cluster,
										((short int) (0xffff)), false)) {
							Save_Modified_Sector();
  8187a8:	08162740 	call	816274 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;
  8187ac:	e0bffd17 	ldw	r2,-12(fp)
  8187b0:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
  8187b4:	e0bffc0b 	ldhu	r2,-16(fp)
  8187b8:	10bfffcc 	andi	r2,r2,65535
  8187bc:	10bffe0c 	andi	r2,r2,65528
  8187c0:	e0bffa15 	stw	r2,-24(fp)
  8187c4:	00000206 	br	8187d0 <find_first_empty_record_in_a_subdirectory+0x214>
				}
			} else {
				// Error encountered.                 
				result = -1;
  8187c8:	00bfffc4 	movi	r2,-1
  8187cc:	e0bffb15 	stw	r2,-20(fp)
			}
		}
	} while ((cluster < 0x0000fff8) && (result == -1));
  8187d0:	e0fffa17 	ldw	r3,-24(fp)
  8187d4:	00bffdd4 	movui	r2,65527
  8187d8:	10c00316 	blt	r2,r3,8187e8 <find_first_empty_record_in_a_subdirectory+0x22c>
  8187dc:	e0bffb17 	ldw	r2,-20(fp)
  8187e0:	10bfffe0 	cmpeqi	r2,r2,-1
  8187e4:	103f7e1e 	bne	r2,zero,8185e0 <find_first_empty_record_in_a_subdirectory+0x24>
	return result;
  8187e8:	e0bffb17 	ldw	r2,-20(fp)
  8187ec:	e0bfff15 	stw	r2,-4(fp)
  8187f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8187f4:	e037883a 	mov	sp,fp
  8187f8:	dfc00117 	ldw	ra,4(sp)
  8187fc:	df000017 	ldw	fp,0(sp)
  818800:	dec00204 	addi	sp,sp,8
  818804:	f800283a 	ret

00818808 <find_first_empty_record_in_root_directory>:

int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  818808:	defff804 	addi	sp,sp,-32
  81880c:	dfc00715 	stw	ra,28(sp)
  818810:	df000615 	stw	fp,24(sp)
  818814:	df000604 	addi	fp,sp,24
	int max_root_dir_sectors = ((32
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
  818818:	008020b4 	movhi	r2,130
  81881c:	1089df04 	addi	r2,r2,10108
  818820:	1080050b 	ldhu	r2,20(r2)
  818824:	10bfffcc 	andi	r2,r2,65535
  818828:	1008917a 	slli	r4,r2,5
  81882c:	008020b4 	movhi	r2,130
  818830:	1089df04 	addi	r2,r2,10108
  818834:	1080030b 	ldhu	r2,12(r2)
  818838:	117fffcc 	andi	r5,r2,65535
  81883c:	08087b00 	call	8087b0 <__divsi3>
  818840:	e0bffe15 	stw	r2,-8(fp)
	int sector_index;
	int result = -1;
  818844:	00bfffc4 	movi	r2,-1
  818848:	e0bffc15 	stw	r2,-16(fp)

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  81884c:	e03ffd15 	stw	zero,-12(fp)
  818850:	00002d06 	br	818908 <find_first_empty_record_in_root_directory+0x100>
		if (Read_Sector_Data(sector_index
  818854:	008020b4 	movhi	r2,130
  818858:	1089df04 	addi	r2,r2,10108
  81885c:	10c01317 	ldw	r3,76(r2)
  818860:	e0bffd17 	ldw	r2,-12(fp)
  818864:	1885883a 	add	r2,r3,r2
  818868:	1009883a 	mov	r4,r2
  81886c:	d1674c17 	ldw	r5,-25296(gp)
  818870:	08162c40 	call	8162c4 <Read_Sector_Data>
  818874:	1005003a 	cmpeq	r2,r2,zero
  818878:	1000261e 	bne	r2,zero,818914 <find_first_empty_record_in_root_directory+0x10c>
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
  81887c:	e03ffb15 	stw	zero,-20(fp)
  818880:	00001b06 	br	8188f0 <find_first_empty_record_in_root_directory+0xe8>
				unsigned short int leading_char;

				// Read first character of the file record.
				leading_char
  818884:	d0a74e17 	ldw	r2,-25288(gp)
  818888:	10800a17 	ldw	r2,40(r2)
  81888c:	1007883a 	mov	r3,r2
  818890:	e0bffb17 	ldw	r2,-20(fp)
  818894:	1004917a 	slli	r2,r2,5
  818898:	1885883a 	add	r2,r3,r2
  81889c:	10800023 	ldbuio	r2,0(r2)
  8188a0:	10803fcc 	andi	r2,r2,255
  8188a4:	e0bffa0d 	sth	r2,-24(fp)
						= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
  8188a8:	e0bffa0b 	ldhu	r2,-24(fp)
  8188ac:	10803960 	cmpeqi	r2,r2,229
  8188b0:	1000031e 	bne	r2,zero,8188c0 <find_first_empty_record_in_root_directory+0xb8>
  8188b4:	e0bffa0b 	ldhu	r2,-24(fp)
  8188b8:	1004c03a 	cmpne	r2,r2,zero
  8188bc:	1000091e 	bne	r2,zero,8188e4 <find_first_empty_record_in_root_directory+0xdc>
					result = (sector_index * 16 + file_counter) << 16;
  8188c0:	e0bffd17 	ldw	r2,-12(fp)
  8188c4:	1006913a 	slli	r3,r2,4
  8188c8:	e0bffb17 	ldw	r2,-20(fp)
  8188cc:	1885883a 	add	r2,r3,r2
  8188d0:	1004943a 	slli	r2,r2,16
  8188d4:	e0bffc15 	stw	r2,-16(fp)
					return result;
  8188d8:	e0bffc17 	ldw	r2,-16(fp)
  8188dc:	e0bfff15 	stw	r2,-4(fp)
  8188e0:	00000e06 	br	81891c <find_first_empty_record_in_root_directory+0x114>
		if (Read_Sector_Data(sector_index
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
  8188e4:	e0bffb17 	ldw	r2,-20(fp)
  8188e8:	10800044 	addi	r2,r2,1
  8188ec:	e0bffb15 	stw	r2,-20(fp)
  8188f0:	e0bffb17 	ldw	r2,-20(fp)
  8188f4:	10800410 	cmplti	r2,r2,16
  8188f8:	103fe21e 	bne	r2,zero,818884 <find_first_empty_record_in_root_directory+0x7c>
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  8188fc:	e0bffd17 	ldw	r2,-12(fp)
  818900:	10800044 	addi	r2,r2,1
  818904:	e0bffd15 	stw	r2,-12(fp)
  818908:	e0fffd17 	ldw	r3,-12(fp)
  81890c:	e0bffe17 	ldw	r2,-8(fp)
  818910:	18bfd016 	blt	r3,r2,818854 <find_first_empty_record_in_root_directory+0x4c>
			}
		} else {
			break;
		}
	}
	return result;
  818914:	e0bffc17 	ldw	r2,-16(fp)
  818918:	e0bfff15 	stw	r2,-4(fp)
  81891c:	e0bfff17 	ldw	r2,-4(fp)
}
  818920:	e037883a 	mov	sp,fp
  818924:	dfc00117 	ldw	ra,4(sp)
  818928:	df000017 	ldw	fp,0(sp)
  81892c:	dec00204 	addi	sp,sp,8
  818930:	f800283a 	ret

00818934 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name,
		char *extension)
// This function converts the file name into a name . extension format.
{
  818934:	defffa04 	addi	sp,sp,-24
  818938:	df000515 	stw	fp,20(sp)
  81893c:	df000504 	addi	fp,sp,20
  818940:	e13ffd15 	stw	r4,-12(fp)
  818944:	e17ffe15 	stw	r5,-8(fp)
  818948:	e1bfff15 	stw	r6,-4(fp)
	int counter;
	int local = 0;
  81894c:	e03ffb15 	stw	zero,-20(fp)

	for (counter = 0; counter < 8; counter++) {
  818950:	e03ffc15 	stw	zero,-16(fp)
  818954:	00002b06 	br	818a04 <convert_filename_to_name_extension+0xd0>
		if (filename[local] != '.') {
  818958:	e0bffb17 	ldw	r2,-20(fp)
  81895c:	1007883a 	mov	r3,r2
  818960:	e0bffd17 	ldw	r2,-12(fp)
  818964:	1885883a 	add	r2,r3,r2
  818968:	10800003 	ldbu	r2,0(r2)
  81896c:	10803fcc 	andi	r2,r2,255
  818970:	1080201c 	xori	r2,r2,128
  818974:	10bfe004 	addi	r2,r2,-128
  818978:	10800ba0 	cmpeqi	r2,r2,46
  81897c:	1000181e 	bne	r2,zero,8189e0 <convert_filename_to_name_extension+0xac>
			name[counter] = filename[local];
  818980:	e0bffc17 	ldw	r2,-16(fp)
  818984:	1007883a 	mov	r3,r2
  818988:	e0bffe17 	ldw	r2,-8(fp)
  81898c:	1889883a 	add	r4,r3,r2
  818990:	e0bffb17 	ldw	r2,-20(fp)
  818994:	1007883a 	mov	r3,r2
  818998:	e0bffd17 	ldw	r2,-12(fp)
  81899c:	1885883a 	add	r2,r3,r2
  8189a0:	10800003 	ldbu	r2,0(r2)
  8189a4:	20800005 	stb	r2,0(r4)
			if (filename[local] != 0)
  8189a8:	e0bffb17 	ldw	r2,-20(fp)
  8189ac:	1007883a 	mov	r3,r2
  8189b0:	e0bffd17 	ldw	r2,-12(fp)
  8189b4:	1885883a 	add	r2,r3,r2
  8189b8:	10800003 	ldbu	r2,0(r2)
  8189bc:	10803fcc 	andi	r2,r2,255
  8189c0:	1080201c 	xori	r2,r2,128
  8189c4:	10bfe004 	addi	r2,r2,-128
  8189c8:	1005003a 	cmpeq	r2,r2,zero
  8189cc:	10000a1e 	bne	r2,zero,8189f8 <convert_filename_to_name_extension+0xc4>
				local++;
  8189d0:	e0bffb17 	ldw	r2,-20(fp)
  8189d4:	10800044 	addi	r2,r2,1
  8189d8:	e0bffb15 	stw	r2,-20(fp)
  8189dc:	00000606 	br	8189f8 <convert_filename_to_name_extension+0xc4>
		} else {
			name[counter] = ' ';
  8189e0:	e0bffc17 	ldw	r2,-16(fp)
  8189e4:	1007883a 	mov	r3,r2
  8189e8:	e0bffe17 	ldw	r2,-8(fp)
  8189ec:	1887883a 	add	r3,r3,r2
  8189f0:	00800804 	movi	r2,32
  8189f4:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
  8189f8:	e0bffc17 	ldw	r2,-16(fp)
  8189fc:	10800044 	addi	r2,r2,1
  818a00:	e0bffc15 	stw	r2,-16(fp)
  818a04:	e0bffc17 	ldw	r2,-16(fp)
  818a08:	10800210 	cmplti	r2,r2,8
  818a0c:	103fd21e 	bne	r2,zero,818958 <convert_filename_to_name_extension+0x24>
				local++;
		} else {
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
  818a10:	e0bffb17 	ldw	r2,-20(fp)
  818a14:	1007883a 	mov	r3,r2
  818a18:	e0bffd17 	ldw	r2,-12(fp)
  818a1c:	1885883a 	add	r2,r3,r2
  818a20:	10800003 	ldbu	r2,0(r2)
  818a24:	10803fcc 	andi	r2,r2,255
  818a28:	1080201c 	xori	r2,r2,128
  818a2c:	10bfe004 	addi	r2,r2,-128
  818a30:	10800b98 	cmpnei	r2,r2,46
  818a34:	1000031e 	bne	r2,zero,818a44 <convert_filename_to_name_extension+0x110>
		local++;
  818a38:	e0bffb17 	ldw	r2,-20(fp)
  818a3c:	10800044 	addi	r2,r2,1
  818a40:	e0bffb15 	stw	r2,-20(fp)
	for (counter = 0; counter < 3; counter++) {
  818a44:	e03ffc15 	stw	zero,-16(fp)
  818a48:	00002106 	br	818ad0 <convert_filename_to_name_extension+0x19c>
		if (filename[local] != 0) {
  818a4c:	e0bffb17 	ldw	r2,-20(fp)
  818a50:	1007883a 	mov	r3,r2
  818a54:	e0bffd17 	ldw	r2,-12(fp)
  818a58:	1885883a 	add	r2,r3,r2
  818a5c:	10800003 	ldbu	r2,0(r2)
  818a60:	10803fcc 	andi	r2,r2,255
  818a64:	1080201c 	xori	r2,r2,128
  818a68:	10bfe004 	addi	r2,r2,-128
  818a6c:	1005003a 	cmpeq	r2,r2,zero
  818a70:	10000e1e 	bne	r2,zero,818aac <convert_filename_to_name_extension+0x178>
			extension[counter] = filename[local];
  818a74:	e0bffc17 	ldw	r2,-16(fp)
  818a78:	1007883a 	mov	r3,r2
  818a7c:	e0bfff17 	ldw	r2,-4(fp)
  818a80:	1889883a 	add	r4,r3,r2
  818a84:	e0bffb17 	ldw	r2,-20(fp)
  818a88:	1007883a 	mov	r3,r2
  818a8c:	e0bffd17 	ldw	r2,-12(fp)
  818a90:	1885883a 	add	r2,r3,r2
  818a94:	10800003 	ldbu	r2,0(r2)
  818a98:	20800005 	stb	r2,0(r4)
			local++;
  818a9c:	e0bffb17 	ldw	r2,-20(fp)
  818aa0:	10800044 	addi	r2,r2,1
  818aa4:	e0bffb15 	stw	r2,-20(fp)
  818aa8:	00000606 	br	818ac4 <convert_filename_to_name_extension+0x190>
		} else {
			extension[counter] = ' ';
  818aac:	e0bffc17 	ldw	r2,-16(fp)
  818ab0:	1007883a 	mov	r3,r2
  818ab4:	e0bfff17 	ldw	r2,-4(fp)
  818ab8:	1887883a 	add	r3,r3,r2
  818abc:	00800804 	movi	r2,32
  818ac0:	18800005 	stb	r2,0(r3)
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
  818ac4:	e0bffc17 	ldw	r2,-16(fp)
  818ac8:	10800044 	addi	r2,r2,1
  818acc:	e0bffc15 	stw	r2,-16(fp)
  818ad0:	e0bffc17 	ldw	r2,-16(fp)
  818ad4:	108000d0 	cmplti	r2,r2,3
  818ad8:	103fdc1e 	bne	r2,zero,818a4c <convert_filename_to_name_extension+0x118>
		} else {
			extension[counter] = ' ';
		}
	}

}
  818adc:	e037883a 	mov	sp,fp
  818ae0:	df000017 	ldw	fp,0(sp)
  818ae4:	dec00104 	addi	sp,sp,4
  818ae8:	f800283a 	ret

00818aec <create_file>:

bool create_file(char *name, t_file_record *file_record,
		t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  818aec:	defff304 	addi	sp,sp,-52
  818af0:	dfc00c15 	stw	ra,48(sp)
  818af4:	df000b15 	stw	fp,44(sp)
  818af8:	df000b04 	addi	fp,sp,44
  818afc:	e13ffb15 	stw	r4,-20(fp)
  818b00:	e17ffc15 	stw	r5,-16(fp)
  818b04:	e1bffd15 	stw	r6,-12(fp)
	unsigned int cluster_number;
	bool result = false;
  818b08:	e03ff915 	stw	zero,-28(fp)

	if (find_first_empty_cluster(&cluster_number)) {
  818b0c:	e13ffa04 	addi	r4,fp,-24
  818b10:	08184180 	call	818418 <find_first_empty_cluster>
  818b14:	1005003a 	cmpeq	r2,r2,zero
  818b18:	1000a31e 	bne	r2,zero,818da8 <create_file+0x2bc>
		int record_index;

		if (home_dir->file_record_cluster == 0) {
  818b1c:	e0bffd17 	ldw	r2,-12(fp)
  818b20:	10800a17 	ldw	r2,40(r2)
  818b24:	1004c03a 	cmpne	r2,r2,zero
  818b28:	1000031e 	bne	r2,zero,818b38 <create_file+0x4c>
			// Put a file in the root directory.
			record_index = find_first_empty_record_in_root_directory();
  818b2c:	08188080 	call	818808 <find_first_empty_record_in_root_directory>
  818b30:	e0bff815 	stw	r2,-32(fp)
  818b34:	00000506 	br	818b4c <create_file+0x60>
		} else {
			// Put a file in a subdirectory.
			record_index = find_first_empty_record_in_a_subdirectory(
  818b38:	e0bffd17 	ldw	r2,-12(fp)
  818b3c:	1080058b 	ldhu	r2,22(r2)
  818b40:	113fffcc 	andi	r4,r2,65535
  818b44:	08185bc0 	call	8185bc <find_first_empty_record_in_a_subdirectory>
  818b48:	e0bff815 	stw	r2,-32(fp)
					home_dir->start_cluster_index);
		}
		if (record_index >= 0) {
  818b4c:	e0bff817 	ldw	r2,-32(fp)
  818b50:	1004803a 	cmplt	r2,r2,zero
  818b54:	1000941e 	bne	r2,zero,818da8 <create_file+0x2bc>
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
  818b58:	e13ffb17 	ldw	r4,-20(fp)
  818b5c:	08176f40 	call	8176f4 <get_dir_divider_location>
  818b60:	e0bff615 	stw	r2,-40(fp)
			int last_dir_separator = 0;
  818b64:	e03ff515 	stw	zero,-44(fp)

			// Skip through all directory separators.
			while (location > 0) {
  818b68:	00000b06 	br	818b98 <create_file+0xac>
				last_dir_separator = last_dir_separator + location + 1;
  818b6c:	e0fff517 	ldw	r3,-44(fp)
  818b70:	e0bff617 	ldw	r2,-40(fp)
  818b74:	1885883a 	add	r2,r3,r2
  818b78:	10800044 	addi	r2,r2,1
  818b7c:	e0bff515 	stw	r2,-44(fp)
				location
  818b80:	e0bff517 	ldw	r2,-44(fp)
  818b84:	1007883a 	mov	r3,r2
  818b88:	e0bffb17 	ldw	r2,-20(fp)
  818b8c:	1889883a 	add	r4,r3,r2
  818b90:	08176f40 	call	8176f4 <get_dir_divider_location>
  818b94:	e0bff615 	stw	r2,-40(fp)
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
			int last_dir_separator = 0;

			// Skip through all directory separators.
			while (location > 0) {
  818b98:	e0bff617 	ldw	r2,-40(fp)
  818b9c:	10800048 	cmpgei	r2,r2,1
  818ba0:	103ff21e 	bne	r2,zero,818b6c <create_file+0x80>
				last_dir_separator = last_dir_separator + location + 1;
				location
						= get_dir_divider_location(&(name[last_dir_separator]));
			}

			convert_filename_to_name_extension(&(name[last_dir_separator]),
  818ba4:	e0bff517 	ldw	r2,-44(fp)
  818ba8:	1007883a 	mov	r3,r2
  818bac:	e0bffb17 	ldw	r2,-20(fp)
  818bb0:	1889883a 	add	r4,r3,r2
  818bb4:	e0bffc17 	ldw	r2,-16(fp)
  818bb8:	100b883a 	mov	r5,r2
  818bbc:	e0bffc17 	ldw	r2,-16(fp)
  818bc0:	10800204 	addi	r2,r2,8
  818bc4:	100d883a 	mov	r6,r2
  818bc8:	08189340 	call	818934 <convert_filename_to_name_extension>
					file_record->name, file_record->extension);

			file_record->attributes = 0;
  818bcc:	e0bffc17 	ldw	r2,-16(fp)
  818bd0:	100002c5 	stb	zero,11(r2)
			file_record->create_time = 0;
  818bd4:	e0bffc17 	ldw	r2,-16(fp)
  818bd8:	1000030d 	sth	zero,12(r2)
			file_record->create_date = 0;
  818bdc:	e0bffc17 	ldw	r2,-16(fp)
  818be0:	1000038d 	sth	zero,14(r2)
			file_record->last_access_date = 0;
  818be4:	e0bffc17 	ldw	r2,-16(fp)
  818be8:	1000040d 	sth	zero,16(r2)
			file_record->last_modified_time = 0;
  818bec:	e0bffc17 	ldw	r2,-16(fp)
  818bf0:	1000048d 	sth	zero,18(r2)
			file_record->last_modified_date = 0;
  818bf4:	e0bffc17 	ldw	r2,-16(fp)
  818bf8:	1000050d 	sth	zero,20(r2)
			file_record->start_cluster_index = cluster_number;
  818bfc:	e0bffa17 	ldw	r2,-24(fp)
  818c00:	1007883a 	mov	r3,r2
  818c04:	e0bffc17 	ldw	r2,-16(fp)
  818c08:	10c0058d 	sth	r3,22(r2)
			file_record->file_size_in_bytes = 0;
  818c0c:	e0bffc17 	ldw	r2,-16(fp)
  818c10:	10000615 	stw	zero,24(r2)
			file_record->current_cluster_index = cluster_number;
  818c14:	e0fffa17 	ldw	r3,-24(fp)
  818c18:	e0bffc17 	ldw	r2,-16(fp)
  818c1c:	10c00715 	stw	r3,28(r2)
			file_record->current_sector_in_cluster = 0;
  818c20:	e0bffc17 	ldw	r2,-16(fp)
  818c24:	10000815 	stw	zero,32(r2)
			file_record->current_byte_position = 0;
  818c28:	e0bffc17 	ldw	r2,-16(fp)
  818c2c:	10000915 	stw	zero,36(r2)
			file_record->file_record_cluster = record_index & 0x0000ffff;
  818c30:	e0bff817 	ldw	r2,-32(fp)
  818c34:	10ffffcc 	andi	r3,r2,65535
  818c38:	e0bffc17 	ldw	r2,-16(fp)
  818c3c:	10c00a15 	stw	r3,40(r2)
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
  818c40:	e0bff817 	ldw	r2,-32(fp)
  818c44:	1005d43a 	srai	r2,r2,16
  818c48:	10bfffcc 	andi	r2,r2,65535
  818c4c:	e0bfff15 	stw	r2,-4(fp)
  818c50:	e0ffff17 	ldw	r3,-4(fp)
  818c54:	1804403a 	cmpge	r2,r3,zero
  818c58:	1000031e 	bne	r2,zero,818c68 <create_file+0x17c>
  818c5c:	e0bfff17 	ldw	r2,-4(fp)
  818c60:	108003c4 	addi	r2,r2,15
  818c64:	e0bfff15 	stw	r2,-4(fp)
  818c68:	e0ffff17 	ldw	r3,-4(fp)
  818c6c:	1805d13a 	srai	r2,r3,4
  818c70:	1007883a 	mov	r3,r2
  818c74:	e0bffc17 	ldw	r2,-16(fp)
  818c78:	10c00b15 	stw	r3,44(r2)
					& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
  818c7c:	e0bff817 	ldw	r2,-32(fp)
  818c80:	1005d43a 	srai	r2,r2,16
  818c84:	108003cc 	andi	r2,r2,15
  818c88:	1004917a 	slli	r2,r2,5
  818c8c:	1007883a 	mov	r3,r2
  818c90:	e0bffc17 	ldw	r2,-16(fp)
  818c94:	10c00c0d 	sth	r3,48(r2)
					& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
  818c98:	e0bffd17 	ldw	r2,-12(fp)
  818c9c:	1080058b 	ldhu	r2,22(r2)
  818ca0:	10ffffcc 	andi	r3,r2,65535
  818ca4:	e0bffc17 	ldw	r2,-16(fp)
  818ca8:	10c00d15 	stw	r3,52(r2)
			file_record->in_use = true;
  818cac:	e0fffc17 	ldw	r3,-16(fp)
  818cb0:	00800044 	movi	r2,1
  818cb4:	18800f15 	stw	r2,60(r3)
			file_record->modified = true;
  818cb8:	e0fffc17 	ldw	r3,-16(fp)
  818cbc:	00800044 	movi	r2,1
  818cc0:	18800e15 	stw	r2,56(r3)
			// Now write the record at the specified location.
			file_record_sector
  818cc4:	e0bffc17 	ldw	r2,-16(fp)
  818cc8:	10800a17 	ldw	r2,40(r2)
  818ccc:	1004c03a 	cmpne	r2,r2,zero
  818cd0:	1000081e 	bne	r2,zero,818cf4 <create_file+0x208>
  818cd4:	008020b4 	movhi	r2,130
  818cd8:	1089df04 	addi	r2,r2,10108
  818cdc:	10c01317 	ldw	r3,76(r2)
  818ce0:	e0bffc17 	ldw	r2,-16(fp)
  818ce4:	10800b17 	ldw	r2,44(r2)
  818ce8:	1887883a 	add	r3,r3,r2
  818cec:	e0fffe15 	stw	r3,-8(fp)
  818cf0:	00001006 	br	818d34 <create_file+0x248>
  818cf4:	008020b4 	movhi	r2,130
  818cf8:	1089df04 	addi	r2,r2,10108
  818cfc:	11001417 	ldw	r4,80(r2)
  818d00:	e0bffc17 	ldw	r2,-16(fp)
  818d04:	10800a17 	ldw	r2,40(r2)
  818d08:	10ffff84 	addi	r3,r2,-2
  818d0c:	008020b4 	movhi	r2,130
  818d10:	1089df04 	addi	r2,r2,10108
  818d14:	10800383 	ldbu	r2,14(r2)
  818d18:	10803fcc 	andi	r2,r2,255
  818d1c:	1885383a 	mul	r2,r3,r2
  818d20:	2087883a 	add	r3,r4,r2
  818d24:	e0bffc17 	ldw	r2,-16(fp)
  818d28:	10800b17 	ldw	r2,44(r2)
  818d2c:	1887883a 	add	r3,r3,r2
  818d30:	e0fffe15 	stw	r3,-8(fp)
  818d34:	e0bffe17 	ldw	r2,-8(fp)
  818d38:	e0bff715 	stw	r2,-36(fp)
							: (boot_sector_data.data_sector_offset
									+ (file_record->file_record_cluster - 2)
											* boot_sector_data.sectors_per_cluster
									+ file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector,
  818d3c:	e13ff717 	ldw	r4,-36(fp)
  818d40:	d1674c17 	ldw	r5,-25296(gp)
  818d44:	08162c40 	call	8162c4 <Read_Sector_Data>
  818d48:	1005003a 	cmpeq	r2,r2,zero
  818d4c:	1000161e 	bne	r2,zero,818da8 <create_file+0x2bc>
					fat_partition_offset_in_512_byte_sectors)) {
				if (Write_File_Record_At_Offset(
  818d50:	e0bffc17 	ldw	r2,-16(fp)
  818d54:	10800c0b 	ldhu	r2,48(r2)
  818d58:	113fffcc 	andi	r4,r2,65535
  818d5c:	2120001c 	xori	r4,r4,32768
  818d60:	21200004 	addi	r4,r4,-32768
  818d64:	e17ffc17 	ldw	r5,-16(fp)
  818d68:	08169900 	call	816990 <Write_File_Record_At_Offset>
  818d6c:	1005003a 	cmpeq	r2,r2,zero
  818d70:	10000d1e 	bne	r2,zero,818da8 <create_file+0x2bc>
						file_record->file_record_offset, file_record)) {
					Save_Modified_Sector();
  818d74:	08162740 	call	816274 <Save_Modified_Sector>
					// Mark the first cluster of the file as the last cluster at first.
					mark_cluster(cluster_number, ((short int) (0xffff)), true);
  818d78:	e13ffa17 	ldw	r4,-24(fp)
  818d7c:	017fffc4 	movi	r5,-1
  818d80:	01800044 	movi	r6,1
  818d84:	08164780 	call	816478 <mark_cluster>
					if (mark_cluster(cluster_number, ((short int) (0xffff)),
  818d88:	e13ffa17 	ldw	r4,-24(fp)
  818d8c:	017fffc4 	movi	r5,-1
  818d90:	000d883a 	mov	r6,zero
  818d94:	08164780 	call	816478 <mark_cluster>
  818d98:	1005003a 	cmpeq	r2,r2,zero
  818d9c:	1000021e 	bne	r2,zero,818da8 <create_file+0x2bc>
							false)) {
						result = true;
  818da0:	00800044 	movi	r2,1
  818da4:	e0bff915 	stw	r2,-28(fp)
				}
			}
		}

	}
	return result;
  818da8:	e0bff917 	ldw	r2,-28(fp)
}
  818dac:	e037883a 	mov	sp,fp
  818db0:	dfc00117 	ldw	ra,4(sp)
  818db4:	df000017 	ldw	fp,0(sp)
  818db8:	dec00204 	addi	sp,sp,8
  818dbc:	f800283a 	ret

00818dc0 <copy_file_record_name_to_string>:

void copy_file_record_name_to_string(t_file_record *file_record,
		char *file_name)
/* Copy a file name from the file record to a given string */
{
  818dc0:	defffb04 	addi	sp,sp,-20
  818dc4:	df000415 	stw	fp,16(sp)
  818dc8:	df000404 	addi	fp,sp,16
  818dcc:	e13ffe15 	stw	r4,-8(fp)
  818dd0:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
  818dd4:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
  818dd8:	e03ffd15 	stw	zero,-12(fp)
  818ddc:	00001606 	br	818e38 <copy_file_record_name_to_string+0x78>
		if (file_record->name[index] != ' ') {
  818de0:	e0fffd17 	ldw	r3,-12(fp)
  818de4:	e0bffe17 	ldw	r2,-8(fp)
  818de8:	10c5883a 	add	r2,r2,r3
  818dec:	10800003 	ldbu	r2,0(r2)
  818df0:	10803fcc 	andi	r2,r2,255
  818df4:	10800820 	cmpeqi	r2,r2,32
  818df8:	10000c1e 	bne	r2,zero,818e2c <copy_file_record_name_to_string+0x6c>
			file_name[flength] = file_record->name[index];
  818dfc:	e0bffc17 	ldw	r2,-16(fp)
  818e00:	1007883a 	mov	r3,r2
  818e04:	e0bfff17 	ldw	r2,-4(fp)
  818e08:	1889883a 	add	r4,r3,r2
  818e0c:	e0fffd17 	ldw	r3,-12(fp)
  818e10:	e0bffe17 	ldw	r2,-8(fp)
  818e14:	10c5883a 	add	r2,r2,r3
  818e18:	10800003 	ldbu	r2,0(r2)
  818e1c:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
  818e20:	e0bffc17 	ldw	r2,-16(fp)
  818e24:	10800044 	addi	r2,r2,1
  818e28:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
  818e2c:	e0bffd17 	ldw	r2,-12(fp)
  818e30:	10800044 	addi	r2,r2,1
  818e34:	e0bffd15 	stw	r2,-12(fp)
  818e38:	e0bffd17 	ldw	r2,-12(fp)
  818e3c:	10800210 	cmplti	r2,r2,8
  818e40:	103fe71e 	bne	r2,zero,818de0 <copy_file_record_name_to_string+0x20>
		if (file_record->name[index] != ' ') {
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ') {
  818e44:	e0bffe17 	ldw	r2,-8(fp)
  818e48:	10800203 	ldbu	r2,8(r2)
  818e4c:	10803fcc 	andi	r2,r2,255
  818e50:	10800820 	cmpeqi	r2,r2,32
  818e54:	1000261e 	bne	r2,zero,818ef0 <copy_file_record_name_to_string+0x130>
		file_name[flength] = '.';
  818e58:	e0bffc17 	ldw	r2,-16(fp)
  818e5c:	1007883a 	mov	r3,r2
  818e60:	e0bfff17 	ldw	r2,-4(fp)
  818e64:	1887883a 	add	r3,r3,r2
  818e68:	00800b84 	movi	r2,46
  818e6c:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
  818e70:	e0bffc17 	ldw	r2,-16(fp)
  818e74:	10800044 	addi	r2,r2,1
  818e78:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++) {
  818e7c:	e03ffd15 	stw	zero,-12(fp)
  818e80:	00001806 	br	818ee4 <copy_file_record_name_to_string+0x124>
			if (file_record->extension[index] != ' ') {
  818e84:	e0fffd17 	ldw	r3,-12(fp)
  818e88:	e0bffe17 	ldw	r2,-8(fp)
  818e8c:	1885883a 	add	r2,r3,r2
  818e90:	10800204 	addi	r2,r2,8
  818e94:	10800003 	ldbu	r2,0(r2)
  818e98:	10803fcc 	andi	r2,r2,255
  818e9c:	10800820 	cmpeqi	r2,r2,32
  818ea0:	10000d1e 	bne	r2,zero,818ed8 <copy_file_record_name_to_string+0x118>
				file_name[flength] = file_record->extension[index];
  818ea4:	e0bffc17 	ldw	r2,-16(fp)
  818ea8:	1007883a 	mov	r3,r2
  818eac:	e0bfff17 	ldw	r2,-4(fp)
  818eb0:	1889883a 	add	r4,r3,r2
  818eb4:	e0fffd17 	ldw	r3,-12(fp)
  818eb8:	e0bffe17 	ldw	r2,-8(fp)
  818ebc:	1885883a 	add	r2,r3,r2
  818ec0:	10800204 	addi	r2,r2,8
  818ec4:	10800003 	ldbu	r2,0(r2)
  818ec8:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
  818ecc:	e0bffc17 	ldw	r2,-16(fp)
  818ed0:	10800044 	addi	r2,r2,1
  818ed4:	e0bffc15 	stw	r2,-16(fp)
		}
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
  818ed8:	e0bffd17 	ldw	r2,-12(fp)
  818edc:	10800044 	addi	r2,r2,1
  818ee0:	e0bffd15 	stw	r2,-12(fp)
  818ee4:	e0bffd17 	ldw	r2,-12(fp)
  818ee8:	108000d0 	cmplti	r2,r2,3
  818eec:	103fe51e 	bne	r2,zero,818e84 <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
  818ef0:	e0bffc17 	ldw	r2,-16(fp)
  818ef4:	1007883a 	mov	r3,r2
  818ef8:	e0bfff17 	ldw	r2,-4(fp)
  818efc:	1885883a 	add	r2,r3,r2
  818f00:	10000005 	stb	zero,0(r2)
}
  818f04:	e037883a 	mov	sp,fp
  818f08:	df000017 	ldw	fp,0(sp)
  818f0c:	dec00104 	addi	sp,sp,4
  818f10:	f800283a 	ret

00818f14 <alt_up_sd_card_open_dev>:
///////////////////////////////////////////////////////////////////////////
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name) {
  818f14:	defffc04 	addi	sp,sp,-16
  818f18:	dfc00315 	stw	ra,12(sp)
  818f1c:	df000215 	stw	fp,8(sp)
  818f20:	df000204 	addi	fp,sp,8
  818f24:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name,
			&alt_dev_list);
  818f28:	e13fff17 	ldw	r4,-4(fp)
  818f2c:	014020b4 	movhi	r5,130
  818f30:	29784304 	addi	r5,r5,-7924
  818f34:	081ac2c0 	call	81ac2c <alt_find_dev>
  818f38:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL) {
  818f3c:	e0bffe17 	ldw	r2,-8(fp)
  818f40:	1005003a 	cmpeq	r2,r2,zero
  818f44:	10001e1e 	bne	r2,zero,818fc0 <alt_up_sd_card_open_dev+0xac>
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  818f48:	e0bffe17 	ldw	r2,-8(fp)
  818f4c:	10800a17 	ldw	r2,40(r2)
  818f50:	10808d04 	addi	r2,r2,564
  818f54:	d0a74615 	stw	r2,-25320(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
  818f58:	e0bffe17 	ldw	r2,-8(fp)
  818f5c:	10800a17 	ldw	r2,40(r2)
  818f60:	10808904 	addi	r2,r2,548
  818f64:	d0a74715 	stw	r2,-25316(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
  818f68:	e0bffe17 	ldw	r2,-8(fp)
  818f6c:	10800a17 	ldw	r2,40(r2)
  818f70:	10808404 	addi	r2,r2,528
  818f74:	d0a74815 	stw	r2,-25312(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
  818f78:	e0bffe17 	ldw	r2,-8(fp)
  818f7c:	10800a17 	ldw	r2,40(r2)
  818f80:	10808c04 	addi	r2,r2,560
  818f84:	d0a74915 	stw	r2,-25308(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
  818f88:	e0bffe17 	ldw	r2,-8(fp)
  818f8c:	10800a17 	ldw	r2,40(r2)
  818f90:	10808b04 	addi	r2,r2,556
  818f94:	d0a74a15 	stw	r2,-25304(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
  818f98:	e0bffe17 	ldw	r2,-8(fp)
  818f9c:	10800a17 	ldw	r2,40(r2)
  818fa0:	d0a74b15 	stw	r2,-25300(gp)
		device_pointer = dev;
  818fa4:	e0bffe17 	ldw	r2,-8(fp)
  818fa8:	d0a74e15 	stw	r2,-25288(gp)
		initialized = false;
  818fac:	d0274415 	stw	zero,-25328(gp)
		is_sd_card_formated_as_FAT16 = false;
  818fb0:	d0274515 	stw	zero,-25324(gp)
		search_data.valid = false;
  818fb4:	008020b4 	movhi	r2,130
  818fb8:	1089da04 	addi	r2,r2,10088
  818fbc:	10000415 	stw	zero,16(r2)
	}
	return dev;
  818fc0:	e0bffe17 	ldw	r2,-8(fp)
}
  818fc4:	e037883a 	mov	sp,fp
  818fc8:	dfc00117 	ldw	ra,4(sp)
  818fcc:	df000017 	ldw	fp,0(sp)
  818fd0:	dec00204 	addi	sp,sp,8
  818fd4:	f800283a 	ret

00818fd8 <alt_up_sd_card_is_Present>:

bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
  818fd8:	defffd04 	addi	sp,sp,-12
  818fdc:	df000215 	stw	fp,8(sp)
  818fe0:	df000204 	addi	fp,sp,8
	bool result = false;
  818fe4:	e03fff15 	stw	zero,-4(fp)

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  818fe8:	d0a74e17 	ldw	r2,-25288(gp)
  818fec:	1005003a 	cmpeq	r2,r2,zero
  818ff0:	1000081e 	bne	r2,zero,819014 <alt_up_sd_card_is_Present+0x3c>
  818ff4:	d0a74617 	ldw	r2,-25320(gp)
  818ff8:	1080002b 	ldhuio	r2,0(r2)
  818ffc:	1080008c 	andi	r2,r2,2
  819000:	1005003a 	cmpeq	r2,r2,zero
  819004:	1000031e 	bne	r2,zero,819014 <alt_up_sd_card_is_Present+0x3c>
			& 0x02) != 0)) {
		result = true;
  819008:	00800044 	movi	r2,1
  81900c:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  819010:	00001e06 	br	81908c <alt_up_sd_card_is_Present+0xb4>
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
  819014:	d0a74417 	ldw	r2,-25328(gp)
  819018:	10800058 	cmpnei	r2,r2,1
  81901c:	10001b1e 	bne	r2,zero,81908c <alt_up_sd_card_is_Present+0xb4>
		int index;

		initialized = false;
  819020:	d0274415 	stw	zero,-25328(gp)
		search_data.valid = false;
  819024:	008020b4 	movhi	r2,130
  819028:	1089da04 	addi	r2,r2,10088
  81902c:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
  819030:	d0274515 	stw	zero,-25324(gp)

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  819034:	e03ffe15 	stw	zero,-8(fp)
  819038:	00001106 	br	819080 <alt_up_sd_card_is_Present+0xa8>
			active_files[index].in_use = false;
  81903c:	e0bffe17 	ldw	r2,-8(fp)
  819040:	00c020b4 	movhi	r3,130
  819044:	18c9f404 	addi	r3,r3,10192
  819048:	100491ba 	slli	r2,r2,6
  81904c:	10c5883a 	add	r2,r2,r3
  819050:	10800f04 	addi	r2,r2,60
  819054:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
  819058:	e0bffe17 	ldw	r2,-8(fp)
  81905c:	00c020b4 	movhi	r3,130
  819060:	18c9f404 	addi	r3,r3,10192
  819064:	100491ba 	slli	r2,r2,6
  819068:	10c5883a 	add	r2,r2,r3
  81906c:	10800e04 	addi	r2,r2,56
  819070:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  819074:	e0bffe17 	ldw	r2,-8(fp)
  819078:	10800044 	addi	r2,r2,1
  81907c:	e0bffe15 	stw	r2,-8(fp)
  819080:	e0bffe17 	ldw	r2,-8(fp)
  819084:	10800510 	cmplti	r2,r2,20
  819088:	103fec1e 	bne	r2,zero,81903c <alt_up_sd_card_is_Present+0x64>
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
	return result;
  81908c:	e0bfff17 	ldw	r2,-4(fp)
}
  819090:	e037883a 	mov	sp,fp
  819094:	df000017 	ldw	fp,0(sp)
  819098:	dec00104 	addi	sp,sp,4
  81909c:	f800283a 	ret

008190a0 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
  8190a0:	defffd04 	addi	sp,sp,-12
  8190a4:	dfc00215 	stw	ra,8(sp)
  8190a8:	df000115 	stw	fp,4(sp)
  8190ac:	df000104 	addi	fp,sp,4
	bool result = false;
  8190b0:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
  8190b4:	0818fd80 	call	818fd8 <alt_up_sd_card_is_Present>
  8190b8:	1005003a 	cmpeq	r2,r2,zero
  8190bc:	10000d1e 	bne	r2,zero,8190f4 <alt_up_sd_card_is_FAT16+0x54>
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false) {
  8190c0:	d0a74417 	ldw	r2,-25328(gp)
  8190c4:	1004c03a 	cmpne	r2,r2,zero
  8190c8:	1000071e 	bne	r2,zero,8190e8 <alt_up_sd_card_is_FAT16+0x48>
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
  8190cc:	08172900 	call	817290 <Look_for_FAT16>
  8190d0:	d0a74515 	stw	r2,-25324(gp)
			initialized = is_sd_card_formated_as_FAT16;
  8190d4:	d0a74517 	ldw	r2,-25324(gp)
  8190d8:	d0a74415 	stw	r2,-25328(gp)
			search_data.valid = false;
  8190dc:	008020b4 	movhi	r2,130
  8190e0:	1089da04 	addi	r2,r2,10088
  8190e4:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
  8190e8:	d0a74517 	ldw	r2,-25324(gp)
  8190ec:	e0bfff15 	stw	r2,-4(fp)
  8190f0:	00000206 	br	8190fc <alt_up_sd_card_is_FAT16+0x5c>
	} else {
		// If not then you may as well not open the device.
		initialized = false;
  8190f4:	d0274415 	stw	zero,-25328(gp)
		is_sd_card_formated_as_FAT16 = false;
  8190f8:	d0274515 	stw	zero,-25324(gp)
	}

	return result;
  8190fc:	e0bfff17 	ldw	r2,-4(fp)
}
  819100:	e037883a 	mov	sp,fp
  819104:	dfc00117 	ldw	ra,4(sp)
  819108:	df000017 	ldw	fp,0(sp)
  81910c:	dec00204 	addi	sp,sp,8
  819110:	f800283a 	ret

00819114 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
  819114:	deffea04 	addi	sp,sp,-88
  819118:	dfc01515 	stw	ra,84(sp)
  81911c:	df001415 	stw	fp,80(sp)
  819120:	df001404 	addi	fp,sp,80
  819124:	e13ffe15 	stw	r4,-8(fp)
  819128:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
  81912c:	00800084 	movi	r2,2
  819130:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  819134:	0818fd80 	call	818fd8 <alt_up_sd_card_is_Present>
  819138:	1005003a 	cmpeq	r2,r2,zero
  81913c:	1000241e 	bne	r2,zero,8191d0 <alt_up_sd_card_find_first+0xbc>
  819140:	d0a74517 	ldw	r2,-25324(gp)
  819144:	1005003a 	cmpeq	r2,r2,zero
  819148:	1000211e 	bne	r2,zero,8191d0 <alt_up_sd_card_find_first+0xbc>
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through,
  81914c:	e17fed04 	addi	r5,fp,-76
  819150:	e1bfee04 	addi	r6,fp,-72
  819154:	e13ffe17 	ldw	r4,-8(fp)
  819158:	0817aa00 	call	817aa0 <get_home_directory_cluster_for_file>
  81915c:	1005003a 	cmpeq	r2,r2,zero
  819160:	1000191e 	bne	r2,zero,8191c8 <alt_up_sd_card_find_first+0xb4>
				&home_directory_cluster, &file_record)) {
			search_data.directory_root_cluster = home_directory_cluster;
  819164:	e0bfed17 	ldw	r2,-76(fp)
  819168:	1007883a 	mov	r3,r2
  81916c:	008020b4 	movhi	r2,130
  819170:	1089da04 	addi	r2,r2,10088
  819174:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
  819178:	e0bfed17 	ldw	r2,-76(fp)
  81917c:	1007883a 	mov	r3,r2
  819180:	008020b4 	movhi	r2,130
  819184:	1089da04 	addi	r2,r2,10088
  819188:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
  81918c:	008020b4 	movhi	r2,130
  819190:	1089da04 	addi	r2,r2,10088
  819194:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
  819198:	00c020b4 	movhi	r3,130
  81919c:	18c9da04 	addi	r3,r3,10088
  8191a0:	00bfffc4 	movi	r2,-1
  8191a4:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
  8191a8:	00c020b4 	movhi	r3,130
  8191ac:	18c9da04 	addi	r3,r3,10088
  8191b0:	00800044 	movi	r2,1
  8191b4:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
  8191b8:	e13fff17 	ldw	r4,-4(fp)
  8191bc:	08191e80 	call	8191e8 <alt_up_sd_card_find_next>
  8191c0:	e0bfec0d 	sth	r2,-80(fp)
  8191c4:	00000206 	br	8191d0 <alt_up_sd_card_find_first+0xbc>
		} else {
			result = 1;
  8191c8:	00800044 	movi	r2,1
  8191cc:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
  8191d0:	e0bfec0f 	ldh	r2,-80(fp)
}
  8191d4:	e037883a 	mov	sp,fp
  8191d8:	dfc00117 	ldw	ra,4(sp)
  8191dc:	df000017 	ldw	fp,0(sp)
  8191e0:	dec00204 	addi	sp,sp,8
  8191e4:	f800283a 	ret

008191e8 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
  8191e8:	deffe404 	addi	sp,sp,-112
  8191ec:	dfc01b15 	stw	ra,108(sp)
  8191f0:	df001a15 	stw	fp,104(sp)
  8191f4:	df001a04 	addi	fp,sp,104
  8191f8:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
  8191fc:	00800084 	movi	r2,2
  819200:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  819204:	0818fd80 	call	818fd8 <alt_up_sd_card_is_Present>
  819208:	1005003a 	cmpeq	r2,r2,zero
  81920c:	1000da1e 	bne	r2,zero,819578 <alt_up_sd_card_find_next+0x390>
  819210:	d0a74517 	ldw	r2,-25324(gp)
  819214:	1005003a 	cmpeq	r2,r2,zero
  819218:	1000d71e 	bne	r2,zero,819578 <alt_up_sd_card_find_next+0x390>
		if (search_data.valid) {
  81921c:	008020b4 	movhi	r2,130
  819220:	1089da04 	addi	r2,r2,10088
  819224:	10800417 	ldw	r2,16(r2)
  819228:	1005003a 	cmpeq	r2,r2,zero
  81922c:	1000d01e 	bne	r2,zero,819570 <alt_up_sd_card_find_next+0x388>
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
  819230:	008020b4 	movhi	r2,130
  819234:	1089da04 	addi	r2,r2,10088
  819238:	10800117 	ldw	r2,4(r2)
  81923c:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0) {
  819240:	e0bfec17 	ldw	r2,-80(fp)
  819244:	1004c03a 	cmpne	r2,r2,zero
  819248:	1000511e 	bne	r2,zero,819390 <alt_up_sd_card_find_next+0x1a8>
				// Searching through the root directory
				int max_root_dir_sectors = ((32
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
  81924c:	008020b4 	movhi	r2,130
  819250:	1089df04 	addi	r2,r2,10108
  819254:	1080050b 	ldhu	r2,20(r2)
  819258:	10bfffcc 	andi	r2,r2,65535
  81925c:	1008917a 	slli	r4,r2,5
  819260:	008020b4 	movhi	r2,130
  819264:	1089df04 	addi	r2,r2,10108
  819268:	1080030b 	ldhu	r2,12(r2)
  81926c:	117fffcc 	andi	r5,r2,65535
  819270:	08087b00 	call	8087b0 <__divsi3>
  819274:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
  819278:	008020b4 	movhi	r2,130
  81927c:	1089da04 	addi	r2,r2,10088
  819280:	10800217 	ldw	r2,8(r2)
  819284:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector + 1;
  819288:	008020b4 	movhi	r2,130
  81928c:	1089da04 	addi	r2,r2,10088
  819290:	1080030b 	ldhu	r2,12(r2)
  819294:	10bfffcc 	andi	r2,r2,65535
  819298:	10a0001c 	xori	r2,r2,32768
  81929c:	10a00004 	addi	r2,r2,-32768
  8192a0:	10800044 	addi	r2,r2,1
  8192a4:	e0bfe915 	stw	r2,-92(fp)

				for (; sector_index < max_root_dir_sectors; sector_index++) {
  8192a8:	00003306 	br	819378 <alt_up_sd_card_find_next+0x190>
					if (Read_Sector_Data(sector_index
  8192ac:	008020b4 	movhi	r2,130
  8192b0:	1089df04 	addi	r2,r2,10108
  8192b4:	10c01317 	ldw	r3,76(r2)
  8192b8:	e0bfea17 	ldw	r2,-88(fp)
  8192bc:	1885883a 	add	r2,r3,r2
  8192c0:	1009883a 	mov	r4,r2
  8192c4:	d1674c17 	ldw	r5,-25296(gp)
  8192c8:	08162c40 	call	8162c4 <Read_Sector_Data>
  8192cc:	1005003a 	cmpeq	r2,r2,zero
  8192d0:	10002c1e 	bne	r2,zero,819384 <alt_up_sd_card_find_next+0x19c>
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
  8192d4:	00002106 	br	81935c <alt_up_sd_card_find_next+0x174>
							if (Read_File_Record_At_Offset(file_counter * 32,
  8192d8:	e0bfe917 	ldw	r2,-92(fp)
  8192dc:	1008917a 	slli	r4,r2,5
  8192e0:	e1ffea17 	ldw	r7,-88(fp)
  8192e4:	e17fee04 	addi	r5,fp,-72
  8192e8:	000d883a 	mov	r6,zero
  8192ec:	081670c0 	call	81670c <Read_File_Record_At_Offset>
  8192f0:	1005003a 	cmpeq	r2,r2,zero
  8192f4:	1000161e 	bne	r2,zero,819350 <alt_up_sd_card_find_next+0x168>
									&file_record, 0, sector_index)) {
								if ((file_record.name[0] != 0)
  8192f8:	e0bfee03 	ldbu	r2,-72(fp)
  8192fc:	10803fcc 	andi	r2,r2,255
  819300:	1005003a 	cmpeq	r2,r2,zero
  819304:	1000121e 	bne	r2,zero,819350 <alt_up_sd_card_find_next+0x168>
  819308:	e0bfee03 	ldbu	r2,-72(fp)
  81930c:	10803fcc 	andi	r2,r2,255
  819310:	10803960 	cmpeqi	r2,r2,229
  819314:	10000e1e 	bne	r2,zero,819350 <alt_up_sd_card_find_next+0x168>
										&& (file_record.name[0] != 0xe5)) {
									/* Update search structure. */
									search_data.file_index_in_sector
  819318:	e0bfe917 	ldw	r2,-92(fp)
  81931c:	1007883a 	mov	r3,r2
  819320:	008020b4 	movhi	r2,130
  819324:	1089da04 	addi	r2,r2,10088
  819328:	10c0030d 	sth	r3,12(r2)
											= file_counter;
									search_data.current_sector_in_cluster
  81932c:	e0ffea17 	ldw	r3,-88(fp)
  819330:	008020b4 	movhi	r2,130
  819334:	1089da04 	addi	r2,r2,10088
  819338:	10c00215 	stw	r3,8(r2)
											= sector_index;

									/* Copy file name.*/
									copy_file_record_name_to_string(
  81933c:	e13fee04 	addi	r4,fp,-72
  819340:	e17ffe17 	ldw	r5,-8(fp)
  819344:	0818dc00 	call	818dc0 <copy_file_record_name_to_string>
											&file_record, file_name);
									return 0;
  819348:	e03fff15 	stw	zero,-4(fp)
  81934c:	00008c06 	br	819580 <alt_up_sd_card_find_next+0x398>

				for (; sector_index < max_root_dir_sectors; sector_index++) {
					if (Read_Sector_Data(sector_index
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
  819350:	e0bfe917 	ldw	r2,-92(fp)
  819354:	10800044 	addi	r2,r2,1
  819358:	e0bfe915 	stw	r2,-92(fp)
  81935c:	e0bfe917 	ldw	r2,-92(fp)
  819360:	10800410 	cmplti	r2,r2,16
  819364:	103fdc1e 	bne	r2,zero,8192d8 <alt_up_sd_card_find_next+0xf0>
											&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
  819368:	e03fe915 	stw	zero,-92(fp)
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector + 1;

				for (; sector_index < max_root_dir_sectors; sector_index++) {
  81936c:	e0bfea17 	ldw	r2,-88(fp)
  819370:	10800044 	addi	r2,r2,1
  819374:	e0bfea15 	stw	r2,-88(fp)
  819378:	e0ffea17 	ldw	r3,-88(fp)
  81937c:	e0bfeb17 	ldw	r2,-84(fp)
  819380:	18bfca16 	blt	r3,r2,8192ac <alt_up_sd_card_find_next+0xc4>
						file_counter = 0;
					} else {
						break;
					}
				}
				result = -1;
  819384:	00bfffc4 	movi	r2,-1
  819388:	e0bfed0d 	sth	r2,-76(fp)
  81938c:	00007a06 	br	819578 <alt_up_sd_card_find_next+0x390>
			} else {
				int file_counter = search_data.file_index_in_sector + 1;
  819390:	008020b4 	movhi	r2,130
  819394:	1089da04 	addi	r2,r2,10088
  819398:	1080030b 	ldhu	r2,12(r2)
  81939c:	10bfffcc 	andi	r2,r2,65535
  8193a0:	10a0001c 	xori	r2,r2,32768
  8193a4:	10a00004 	addi	r2,r2,-32768
  8193a8:	10800044 	addi	r2,r2,1
  8193ac:	e0bfe815 	stw	r2,-96(fp)
				do {
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
  8193b0:	e0bfec17 	ldw	r2,-80(fp)
  8193b4:	10ffff84 	addi	r3,r2,-2
  8193b8:	008020b4 	movhi	r2,130
  8193bc:	1089df04 	addi	r2,r2,10108
  8193c0:	10800383 	ldbu	r2,14(r2)
  8193c4:	10803fcc 	andi	r2,r2,255
  8193c8:	1885383a 	mul	r2,r3,r2
  8193cc:	1007883a 	mov	r3,r2
  8193d0:	008020b4 	movhi	r2,130
  8193d4:	1089df04 	addi	r2,r2,10108
  8193d8:	10801417 	ldw	r2,80(r2)
  8193dc:	1885883a 	add	r2,r3,r2
  8193e0:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
  8193e4:	008020b4 	movhi	r2,130
  8193e8:	1089da04 	addi	r2,r2,10088
  8193ec:	10800217 	ldw	r2,8(r2)
  8193f0:	e0bfe615 	stw	r2,-104(fp)

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
  8193f4:	00003406 	br	8194c8 <alt_up_sd_card_find_next+0x2e0>
						if (Read_Sector_Data(sector_index + start_sector,
  8193f8:	e0ffe617 	ldw	r3,-104(fp)
  8193fc:	e0bfe717 	ldw	r2,-100(fp)
  819400:	1889883a 	add	r4,r3,r2
  819404:	d1674c17 	ldw	r5,-25296(gp)
  819408:	08162c40 	call	8162c4 <Read_Sector_Data>
  81940c:	1005003a 	cmpeq	r2,r2,zero
  819410:	1000331e 	bne	r2,zero,8194e0 <alt_up_sd_card_find_next+0x2f8>
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
  819414:	00002506 	br	8194ac <alt_up_sd_card_find_next+0x2c4>
								if (Read_File_Record_At_Offset(file_counter
  819418:	e0bfe817 	ldw	r2,-96(fp)
  81941c:	1008917a 	slli	r4,r2,5
  819420:	e1bfec17 	ldw	r6,-80(fp)
  819424:	e1ffe617 	ldw	r7,-104(fp)
  819428:	e17fee04 	addi	r5,fp,-72
  81942c:	081670c0 	call	81670c <Read_File_Record_At_Offset>
  819430:	1005003a 	cmpeq	r2,r2,zero
  819434:	10001a1e 	bne	r2,zero,8194a0 <alt_up_sd_card_find_next+0x2b8>
										* 32, &file_record, cluster,
										sector_index)) {
									if ((file_record.name[0] != 0)
  819438:	e0bfee03 	ldbu	r2,-72(fp)
  81943c:	10803fcc 	andi	r2,r2,255
  819440:	1005003a 	cmpeq	r2,r2,zero
  819444:	1000161e 	bne	r2,zero,8194a0 <alt_up_sd_card_find_next+0x2b8>
  819448:	e0bfee03 	ldbu	r2,-72(fp)
  81944c:	10803fcc 	andi	r2,r2,255
  819450:	10803960 	cmpeqi	r2,r2,229
  819454:	1000121e 	bne	r2,zero,8194a0 <alt_up_sd_card_find_next+0x2b8>
											&& (file_record.name[0] != 0xe5)) {
										/* Update search structure. */
										search_data.current_cluster_index
  819458:	e0ffec17 	ldw	r3,-80(fp)
  81945c:	008020b4 	movhi	r2,130
  819460:	1089da04 	addi	r2,r2,10088
  819464:	10c00115 	stw	r3,4(r2)
												= cluster;
										search_data.file_index_in_sector
  819468:	e0bfe817 	ldw	r2,-96(fp)
  81946c:	1007883a 	mov	r3,r2
  819470:	008020b4 	movhi	r2,130
  819474:	1089da04 	addi	r2,r2,10088
  819478:	10c0030d 	sth	r3,12(r2)
												= file_counter;
										search_data.current_sector_in_cluster
  81947c:	e0ffe617 	ldw	r3,-104(fp)
  819480:	008020b4 	movhi	r2,130
  819484:	1089da04 	addi	r2,r2,10088
  819488:	10c00215 	stw	r3,8(r2)
												= sector_index;

										/* Copy file name.*/
										copy_file_record_name_to_string(
  81948c:	e13fee04 	addi	r4,fp,-72
  819490:	e17ffe17 	ldw	r5,-8(fp)
  819494:	0818dc00 	call	818dc0 <copy_file_record_name_to_string>
												&file_record, file_name);
										return 0;
  819498:	e03fff15 	stw	zero,-4(fp)
  81949c:	00003806 	br	819580 <alt_up_sd_card_find_next+0x398>
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
  8194a0:	e0bfe817 	ldw	r2,-96(fp)
  8194a4:	10800044 	addi	r2,r2,1
  8194a8:	e0bfe815 	stw	r2,-96(fp)
  8194ac:	e0bfe817 	ldw	r2,-96(fp)
  8194b0:	10800410 	cmplti	r2,r2,16
  8194b4:	103fd81e 	bne	r2,zero,819418 <alt_up_sd_card_find_next+0x230>
												&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
  8194b8:	e03fe815 	stw	zero,-96(fp)
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
  8194bc:	e0bfe617 	ldw	r2,-104(fp)
  8194c0:	10800044 	addi	r2,r2,1
  8194c4:	e0bfe615 	stw	r2,-104(fp)
  8194c8:	008020b4 	movhi	r2,130
  8194cc:	1089df04 	addi	r2,r2,10108
  8194d0:	10800383 	ldbu	r2,14(r2)
  8194d4:	10c03fcc 	andi	r3,r2,255
  8194d8:	e0bfe617 	ldw	r2,-104(fp)
  8194dc:	10ffc616 	blt	r2,r3,8193f8 <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster) {
  8194e0:	008020b4 	movhi	r2,130
  8194e4:	1089df04 	addi	r2,r2,10108
  8194e8:	10800383 	ldbu	r2,14(r2)
  8194ec:	10c03fcc 	andi	r3,r2,255
  8194f0:	e0bfe617 	ldw	r2,-104(fp)
  8194f4:	10c01a16 	blt	r2,r3,819560 <alt_up_sd_card_find_next+0x378>
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster)) {
  8194f8:	e13fec17 	ldw	r4,-80(fp)
  8194fc:	e17fed84 	addi	r5,fp,-74
  819500:	08163c00 	call	8163c0 <get_cluster_flag>
  819504:	1005003a 	cmpeq	r2,r2,zero
  819508:	1000131e 	bne	r2,zero,819558 <alt_up_sd_card_find_next+0x370>
							if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  81950c:	e0bfed8b 	ldhu	r2,-74(fp)
  819510:	10bfffcc 	andi	r2,r2,65535
  819514:	10a0001c 	xori	r2,r2,32768
  819518:	10a00004 	addi	r2,r2,-32768
  81951c:	10fffe0c 	andi	r3,r2,65528
  819520:	00bffe14 	movui	r2,65528
  819524:	1880051e 	bne	r3,r2,81953c <alt_up_sd_card_find_next+0x354>
								result = -1;
  819528:	00bfffc4 	movi	r2,-1
  81952c:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
  819530:	008020b4 	movhi	r2,130
  819534:	1089da04 	addi	r2,r2,10088
  819538:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
  81953c:	e0bfed8b 	ldhu	r2,-74(fp)
  819540:	10bfffcc 	andi	r2,r2,65535
  819544:	10a0001c 	xori	r2,r2,32768
  819548:	10a00004 	addi	r2,r2,-32768
  81954c:	10bffe0c 	andi	r2,r2,65528
  819550:	e0bfec15 	stw	r2,-80(fp)
  819554:	00000206 	br	819560 <alt_up_sd_card_find_next+0x378>
						} else {
							// Error encountered.                 
							result = -1;
  819558:	00bfffc4 	movi	r2,-1
  81955c:	e0bfed0d 	sth	r2,-76(fp)
						}
					}
				} while (cluster < 0x0000fff8);
  819560:	e0ffec17 	ldw	r3,-80(fp)
  819564:	00bffdd4 	movui	r2,65527
  819568:	10ff910e 	bge	r2,r3,8193b0 <alt_up_sd_card_find_next+0x1c8>
  81956c:	00000206 	br	819578 <alt_up_sd_card_find_next+0x390>
			}
		} else {
			// Call Find_First first.
			result = 3;
  819570:	008000c4 	movi	r2,3
  819574:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
  819578:	e0bfed0f 	ldh	r2,-76(fp)
  81957c:	e0bfff15 	stw	r2,-4(fp)
  819580:	e0bfff17 	ldw	r2,-4(fp)
}
  819584:	e037883a 	mov	sp,fp
  819588:	dfc00117 	ldw	ra,4(sp)
  81958c:	df000017 	ldw	fp,0(sp)
  819590:	dec00204 	addi	sp,sp,8
  819594:	f800283a 	ret

00819598 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
  819598:	deffe804 	addi	sp,sp,-96
  81959c:	dfc01715 	stw	ra,92(sp)
  8195a0:	df001615 	stw	fp,88(sp)
  8195a4:	df001604 	addi	fp,sp,88
  8195a8:	e13ffd15 	stw	r4,-12(fp)
  8195ac:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
  8195b0:	00bfffc4 	movi	r2,-1
  8195b4:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  8195b8:	0818fd80 	call	818fd8 <alt_up_sd_card_is_Present>
  8195bc:	1005003a 	cmpeq	r2,r2,zero
  8195c0:	1000d71e 	bne	r2,zero,819920 <alt_up_sd_card_fopen+0x388>
  8195c4:	d0a74517 	ldw	r2,-25324(gp)
  8195c8:	1005003a 	cmpeq	r2,r2,zero
  8195cc:	1000d41e 	bne	r2,zero,819920 <alt_up_sd_card_fopen+0x388>
		unsigned int home_directory_cluster = 0;
  8195d0:	e03fec15 	stw	zero,-80(fp)
		 * Rules:
		 *  - no spaces
		 *  - at most 12 chatacters per name, with a period in 9th position.
		 *  - a / or a \ every at most 12 characters.
		 */
		filename_to_upper_case(name);
  8195d4:	e13ffd17 	ldw	r4,-12(fp)
  8195d8:	08173940 	call	817394 <filename_to_upper_case>
		if (check_file_name_for_FAT16_compliance(name)) {
  8195dc:	e13ffd17 	ldw	r4,-12(fp)
  8195e0:	08174640 	call	817464 <check_file_name_for_FAT16_compliance>
  8195e4:	1005003a 	cmpeq	r2,r2,zero
  8195e8:	1000cd1e 	bne	r2,zero,819920 <alt_up_sd_card_fopen+0x388>
			int index;

			/* Get home directory cluster location for the specified file. 0 means root directory. */
			if (!get_home_directory_cluster_for_file(name,
  8195ec:	e17fec04 	addi	r5,fp,-80
  8195f0:	e1bfed04 	addi	r6,fp,-76
  8195f4:	e13ffd17 	ldw	r4,-12(fp)
  8195f8:	0817aa00 	call	817aa0 <get_home_directory_cluster_for_file>
  8195fc:	1004c03a 	cmpne	r2,r2,zero
  819600:	1000031e 	bne	r2,zero,819610 <alt_up_sd_card_fopen+0x78>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
  819604:	e0bfeb0f 	ldh	r2,-84(fp)
  819608:	e0bfff15 	stw	r2,-4(fp)
  81960c:	0000c606 	br	819928 <alt_up_sd_card_fopen+0x390>
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
  819610:	e03fea15 	stw	zero,-88(fp)
  819614:	00000f06 	br	819654 <alt_up_sd_card_fopen+0xbc>
				if (active_files[index].in_use == false) {
  819618:	e0bfea17 	ldw	r2,-88(fp)
  81961c:	00c020b4 	movhi	r3,130
  819620:	18c9f404 	addi	r3,r3,10192
  819624:	100491ba 	slli	r2,r2,6
  819628:	10c5883a 	add	r2,r2,r3
  81962c:	10800f04 	addi	r2,r2,60
  819630:	10800017 	ldw	r2,0(r2)
  819634:	1004c03a 	cmpne	r2,r2,zero
  819638:	1000031e 	bne	r2,zero,819648 <alt_up_sd_card_fopen+0xb0>
					file_record_index = index;
  81963c:	e0bfea17 	ldw	r2,-88(fp)
  819640:	e0bfeb0d 	sth	r2,-84(fp)
					break;
  819644:	00000606 	br	819660 <alt_up_sd_card_fopen+0xc8>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
  819648:	e0bfea17 	ldw	r2,-88(fp)
  81964c:	10800044 	addi	r2,r2,1
  819650:	e0bfea15 	stw	r2,-88(fp)
  819654:	e0bfea17 	ldw	r2,-88(fp)
  819658:	10800510 	cmplti	r2,r2,20
  81965c:	103fee1e 	bne	r2,zero,819618 <alt_up_sd_card_fopen+0x80>
				if (active_files[index].in_use == false) {
					file_record_index = index;
					break;
				}
			}
			if (file_record_index >= 0) {
  819660:	e0bfeb0f 	ldh	r2,-84(fp)
  819664:	1004803a 	cmplt	r2,r2,zero
  819668:	1000ad1e 	bne	r2,zero,819920 <alt_up_sd_card_fopen+0x388>
				/* If file record is found, then look for the specified file. If the create flag is set to true
				 * and the file is not found, then it should be created in the current directory.
				 */

				if (find_file_in_directory(home_directory_cluster, name,
  81966c:	e0bfec17 	ldw	r2,-80(fp)
  819670:	1009883a 	mov	r4,r2
  819674:	e0bfeb0f 	ldh	r2,-84(fp)
  819678:	100491ba 	slli	r2,r2,6
  81967c:	1007883a 	mov	r3,r2
  819680:	008020b4 	movhi	r2,130
  819684:	1089f404 	addi	r2,r2,10192
  819688:	188d883a 	add	r6,r3,r2
  81968c:	e17ffd17 	ldw	r5,-12(fp)
  819690:	0817fb40 	call	817fb4 <find_file_in_directory>
  819694:	1005003a 	cmpeq	r2,r2,zero
  819698:	10007d1e 	bne	r2,zero,819890 <alt_up_sd_card_fopen+0x2f8>
						&(active_files[file_record_index]))) {
					if (create) {
  81969c:	e0bffe17 	ldw	r2,-8(fp)
  8196a0:	1005003a 	cmpeq	r2,r2,zero
  8196a4:	1000031e 	bne	r2,zero,8196b4 <alt_up_sd_card_fopen+0x11c>
						/* Do not allow overwriting existing files for now. */
						return -1;
  8196a8:	00bfffc4 	movi	r2,-1
  8196ac:	e0bfff15 	stw	r2,-4(fp)
  8196b0:	00009d06 	br	819928 <alt_up_sd_card_fopen+0x390>
					}
					active_files[file_record_index].current_cluster_index
  8196b4:	e17feb0f 	ldh	r5,-84(fp)
  8196b8:	e0bfeb0f 	ldh	r2,-84(fp)
  8196bc:	00c020b4 	movhi	r3,130
  8196c0:	18c9f404 	addi	r3,r3,10192
  8196c4:	100491ba 	slli	r2,r2,6
  8196c8:	10c5883a 	add	r2,r2,r3
  8196cc:	10800504 	addi	r2,r2,20
  8196d0:	1080008b 	ldhu	r2,2(r2)
  8196d4:	113fffcc 	andi	r4,r2,65535
  8196d8:	00c020b4 	movhi	r3,130
  8196dc:	18c9f404 	addi	r3,r3,10192
  8196e0:	280491ba 	slli	r2,r5,6
  8196e4:	10c5883a 	add	r2,r2,r3
  8196e8:	10800704 	addi	r2,r2,28
  8196ec:	11000015 	stw	r4,0(r2)
							= active_files[file_record_index].start_cluster_index;
					active_files[file_record_index].current_sector_in_cluster
  8196f0:	e0bfeb0f 	ldh	r2,-84(fp)
  8196f4:	00c020b4 	movhi	r3,130
  8196f8:	18c9f404 	addi	r3,r3,10192
  8196fc:	100491ba 	slli	r2,r2,6
  819700:	10c5883a 	add	r2,r2,r3
  819704:	10800804 	addi	r2,r2,32
  819708:	10000015 	stw	zero,0(r2)
							= 0;
					active_files[file_record_index].current_byte_position = 0;
  81970c:	e0bfeb0f 	ldh	r2,-84(fp)
  819710:	00c020b4 	movhi	r3,130
  819714:	18c9f404 	addi	r3,r3,10192
  819718:	100491ba 	slli	r2,r2,6
  81971c:	10c5883a 	add	r2,r2,r3
  819720:	10800904 	addi	r2,r2,36
  819724:	10000015 	stw	zero,0(r2)
					active_files[file_record_index].in_use = true;
  819728:	e0bfeb0f 	ldh	r2,-84(fp)
  81972c:	00c020b4 	movhi	r3,130
  819730:	18c9f404 	addi	r3,r3,10192
  819734:	100491ba 	slli	r2,r2,6
  819738:	10c5883a 	add	r2,r2,r3
  81973c:	10c00f04 	addi	r3,r2,60
  819740:	00800044 	movi	r2,1
  819744:	18800015 	stw	r2,0(r3)
					active_files[file_record_index].modified = false;
  819748:	e0bfeb0f 	ldh	r2,-84(fp)
  81974c:	00c020b4 	movhi	r3,130
  819750:	18c9f404 	addi	r3,r3,10192
  819754:	100491ba 	slli	r2,r2,6
  819758:	10c5883a 	add	r2,r2,r3
  81975c:	10800e04 	addi	r2,r2,56
  819760:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
  819764:	e03fea15 	stw	zero,-88(fp)
  819768:	00004506 	br	819880 <alt_up_sd_card_fopen+0x2e8>
						if ((file_record_index != index)
  81976c:	e0ffeb0f 	ldh	r3,-84(fp)
  819770:	e0bfea17 	ldw	r2,-88(fp)
  819774:	18803f26 	beq	r3,r2,819874 <alt_up_sd_card_fopen+0x2dc>
  819778:	e0bfea17 	ldw	r2,-88(fp)
  81977c:	00c020b4 	movhi	r3,130
  819780:	18c9f404 	addi	r3,r3,10192
  819784:	100491ba 	slli	r2,r2,6
  819788:	10c5883a 	add	r2,r2,r3
  81978c:	10800f04 	addi	r2,r2,60
  819790:	10800017 	ldw	r2,0(r2)
  819794:	10800058 	cmpnei	r2,r2,1
  819798:	1000361e 	bne	r2,zero,819874 <alt_up_sd_card_fopen+0x2dc>
								&& (active_files[index].in_use == true)) {
							if ((active_files[file_record_index].file_record_cluster
  81979c:	e0bfeb0f 	ldh	r2,-84(fp)
  8197a0:	00c020b4 	movhi	r3,130
  8197a4:	18c9f404 	addi	r3,r3,10192
  8197a8:	100491ba 	slli	r2,r2,6
  8197ac:	10c5883a 	add	r2,r2,r3
  8197b0:	10800a04 	addi	r2,r2,40
  8197b4:	11000017 	ldw	r4,0(r2)
  8197b8:	e0bfea17 	ldw	r2,-88(fp)
  8197bc:	00c020b4 	movhi	r3,130
  8197c0:	18c9f404 	addi	r3,r3,10192
  8197c4:	100491ba 	slli	r2,r2,6
  8197c8:	10c5883a 	add	r2,r2,r3
  8197cc:	10800a04 	addi	r2,r2,40
  8197d0:	10800017 	ldw	r2,0(r2)
  8197d4:	2080271e 	bne	r4,r2,819874 <alt_up_sd_card_fopen+0x2dc>
  8197d8:	e0bfeb0f 	ldh	r2,-84(fp)
  8197dc:	00c020b4 	movhi	r3,130
  8197e0:	18c9f404 	addi	r3,r3,10192
  8197e4:	100491ba 	slli	r2,r2,6
  8197e8:	10c5883a 	add	r2,r2,r3
  8197ec:	10800b04 	addi	r2,r2,44
  8197f0:	11000017 	ldw	r4,0(r2)
  8197f4:	e0bfea17 	ldw	r2,-88(fp)
  8197f8:	00c020b4 	movhi	r3,130
  8197fc:	18c9f404 	addi	r3,r3,10192
  819800:	100491ba 	slli	r2,r2,6
  819804:	10c5883a 	add	r2,r2,r3
  819808:	10800b04 	addi	r2,r2,44
  81980c:	10800017 	ldw	r2,0(r2)
  819810:	2080181e 	bne	r4,r2,819874 <alt_up_sd_card_fopen+0x2dc>
  819814:	e0bfeb0f 	ldh	r2,-84(fp)
  819818:	00c020b4 	movhi	r3,130
  81981c:	18c9f404 	addi	r3,r3,10192
  819820:	100491ba 	slli	r2,r2,6
  819824:	10c5883a 	add	r2,r2,r3
  819828:	10800c04 	addi	r2,r2,48
  81982c:	1100000b 	ldhu	r4,0(r2)
  819830:	e0bfea17 	ldw	r2,-88(fp)
  819834:	00c020b4 	movhi	r3,130
  819838:	18c9f404 	addi	r3,r3,10192
  81983c:	100491ba 	slli	r2,r2,6
  819840:	10c5883a 	add	r2,r2,r3
  819844:	10800c04 	addi	r2,r2,48
  819848:	1080000b 	ldhu	r2,0(r2)
  81984c:	20ffffcc 	andi	r3,r4,65535
  819850:	18e0001c 	xori	r3,r3,32768
  819854:	18e00004 	addi	r3,r3,-32768
  819858:	10bfffcc 	andi	r2,r2,65535
  81985c:	10a0001c 	xori	r2,r2,32768
  819860:	10a00004 	addi	r2,r2,-32768
  819864:	1880031e 	bne	r3,r2,819874 <alt_up_sd_card_fopen+0x2dc>
									&& (active_files[file_record_index].file_record_sector_in_cluster
											== active_files[index].file_record_sector_in_cluster)
									&& (active_files[file_record_index].file_record_offset
											== active_files[index].file_record_offset)) {
								// file already in use.
								file_record_index = -2;
  819868:	00bfff84 	movi	r2,-2
  81986c:	e0bfeb0d 	sth	r2,-84(fp)
								break;
  819870:	00002b06 	br	819920 <alt_up_sd_card_fopen+0x388>
					active_files[file_record_index].current_byte_position = 0;
					active_files[file_record_index].in_use = true;
					active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
  819874:	e0bfea17 	ldw	r2,-88(fp)
  819878:	10800044 	addi	r2,r2,1
  81987c:	e0bfea15 	stw	r2,-88(fp)
  819880:	e0bfea17 	ldw	r2,-88(fp)
  819884:	10800510 	cmplti	r2,r2,20
  819888:	103fb81e 	bne	r2,zero,81976c <alt_up_sd_card_fopen+0x1d4>
  81988c:	00002406 	br	819920 <alt_up_sd_card_fopen+0x388>
								break;
							}
						}
					}

				} else if (create) {
  819890:	e0bffe17 	ldw	r2,-8(fp)
  819894:	1005003a 	cmpeq	r2,r2,zero
  819898:	10001f1e 	bne	r2,zero,819918 <alt_up_sd_card_fopen+0x380>
					/* Create file if needed. */
					if (create_file(name, &(active_files[file_record_index]),
  81989c:	e0bfeb0f 	ldh	r2,-84(fp)
  8198a0:	100491ba 	slli	r2,r2,6
  8198a4:	1007883a 	mov	r3,r2
  8198a8:	008020b4 	movhi	r2,130
  8198ac:	1089f404 	addi	r2,r2,10192
  8198b0:	188b883a 	add	r5,r3,r2
  8198b4:	e1bfed04 	addi	r6,fp,-76
  8198b8:	e13ffd17 	ldw	r4,-12(fp)
  8198bc:	0818aec0 	call	818aec <create_file>
  8198c0:	1005003a 	cmpeq	r2,r2,zero
  8198c4:	1000111e 	bne	r2,zero,81990c <alt_up_sd_card_fopen+0x374>
							&home_dir)) {
						active_files[file_record_index].in_use = true;
  8198c8:	e0bfeb0f 	ldh	r2,-84(fp)
  8198cc:	00c020b4 	movhi	r3,130
  8198d0:	18c9f404 	addi	r3,r3,10192
  8198d4:	100491ba 	slli	r2,r2,6
  8198d8:	10c5883a 	add	r2,r2,r3
  8198dc:	10c00f04 	addi	r3,r2,60
  8198e0:	00800044 	movi	r2,1
  8198e4:	18800015 	stw	r2,0(r3)
						active_files[file_record_index].modified = true;
  8198e8:	e0bfeb0f 	ldh	r2,-84(fp)
  8198ec:	00c020b4 	movhi	r3,130
  8198f0:	18c9f404 	addi	r3,r3,10192
  8198f4:	100491ba 	slli	r2,r2,6
  8198f8:	10c5883a 	add	r2,r2,r3
  8198fc:	10c00e04 	addi	r3,r2,56
  819900:	00800044 	movi	r2,1
  819904:	18800015 	stw	r2,0(r3)
  819908:	00000506 	br	819920 <alt_up_sd_card_fopen+0x388>
					} else {
						/* If file creation fails then return an invalid file handle. */
						file_record_index = -1;
  81990c:	00bfffc4 	movi	r2,-1
  819910:	e0bfeb0d 	sth	r2,-84(fp)
  819914:	00000206 	br	819920 <alt_up_sd_card_fopen+0x388>
					}
				} else {
					/* Otherwise the file could not be opened.*/
					file_record_index = -1;
  819918:	00bfffc4 	movi	r2,-1
  81991c:	e0bfeb0d 	sth	r2,-84(fp)
				}
			}
		}
	}

	return file_record_index;
  819920:	e0bfeb0f 	ldh	r2,-84(fp)
  819924:	e0bfff15 	stw	r2,-4(fp)
  819928:	e0bfff17 	ldw	r2,-4(fp)
}
  81992c:	e037883a 	mov	sp,fp
  819930:	dfc00117 	ldw	ra,4(sp)
  819934:	df000017 	ldw	fp,0(sp)
  819938:	dec00204 	addi	sp,sp,8
  81993c:	f800283a 	ret

00819940 <alt_up_sd_card_set_attributes>:

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  819940:	defffd04 	addi	sp,sp,-12
  819944:	df000215 	stw	fp,8(sp)
  819948:	df000204 	addi	fp,sp,8
  81994c:	e13ffe0d 	sth	r4,-8(fp)
  819950:	e17fff0d 	sth	r5,-4(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  819954:	e0bffe0f 	ldh	r2,-8(fp)
  819958:	1004803a 	cmplt	r2,r2,zero
  81995c:	1000181e 	bne	r2,zero,8199c0 <alt_up_sd_card_set_attributes+0x80>
  819960:	e0bffe0f 	ldh	r2,-8(fp)
  819964:	10800508 	cmpgei	r2,r2,20
  819968:	1000151e 	bne	r2,zero,8199c0 <alt_up_sd_card_set_attributes+0x80>
		if (active_files[file_handle].in_use) {
  81996c:	e0bffe0f 	ldh	r2,-8(fp)
  819970:	00c020b4 	movhi	r3,130
  819974:	18c9f404 	addi	r3,r3,10192
  819978:	100491ba 	slli	r2,r2,6
  81997c:	10c5883a 	add	r2,r2,r3
  819980:	10800f04 	addi	r2,r2,60
  819984:	10800017 	ldw	r2,0(r2)
  819988:	1005003a 	cmpeq	r2,r2,zero
  81998c:	10000c1e 	bne	r2,zero,8199c0 <alt_up_sd_card_set_attributes+0x80>
			active_files[file_handle].attributes
  819990:	e17ffe0f 	ldh	r5,-8(fp)
  819994:	e0bfff0b 	ldhu	r2,-4(fp)
  819998:	1007883a 	mov	r3,r2
  81999c:	00bfffc4 	movi	r2,-1
  8199a0:	1884703a 	and	r2,r3,r2
  8199a4:	1009883a 	mov	r4,r2
  8199a8:	00c020b4 	movhi	r3,130
  8199ac:	18c9f404 	addi	r3,r3,10192
  8199b0:	280491ba 	slli	r2,r5,6
  8199b4:	10c5883a 	add	r2,r2,r3
  8199b8:	10800204 	addi	r2,r2,8
  8199bc:	110000c5 	stb	r4,3(r2)
					= ((char) (attributes & 0x00ff));
		}
	}
}
  8199c0:	e037883a 	mov	sp,fp
  8199c4:	df000017 	ldw	fp,0(sp)
  8199c8:	dec00104 	addi	sp,sp,4
  8199cc:	f800283a 	ret

008199d0 <alt_up_sd_card_get_attributes>:

short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  8199d0:	defffd04 	addi	sp,sp,-12
  8199d4:	df000215 	stw	fp,8(sp)
  8199d8:	df000204 	addi	fp,sp,8
  8199dc:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
  8199e0:	00bfffc4 	movi	r2,-1
  8199e4:	e0bffe0d 	sth	r2,-8(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  8199e8:	e0bfff0f 	ldh	r2,-4(fp)
  8199ec:	1004803a 	cmplt	r2,r2,zero
  8199f0:	1000151e 	bne	r2,zero,819a48 <alt_up_sd_card_get_attributes+0x78>
  8199f4:	e0bfff0f 	ldh	r2,-4(fp)
  8199f8:	10800508 	cmpgei	r2,r2,20
  8199fc:	1000121e 	bne	r2,zero,819a48 <alt_up_sd_card_get_attributes+0x78>
		if (active_files[file_handle].in_use) {
  819a00:	e0bfff0f 	ldh	r2,-4(fp)
  819a04:	00c020b4 	movhi	r3,130
  819a08:	18c9f404 	addi	r3,r3,10192
  819a0c:	100491ba 	slli	r2,r2,6
  819a10:	10c5883a 	add	r2,r2,r3
  819a14:	10800f04 	addi	r2,r2,60
  819a18:	10800017 	ldw	r2,0(r2)
  819a1c:	1005003a 	cmpeq	r2,r2,zero
  819a20:	1000091e 	bne	r2,zero,819a48 <alt_up_sd_card_get_attributes+0x78>
			result = ((active_files[file_handle].attributes) & 0x00ff);
  819a24:	e0bfff0f 	ldh	r2,-4(fp)
  819a28:	00c020b4 	movhi	r3,130
  819a2c:	18c9f404 	addi	r3,r3,10192
  819a30:	100491ba 	slli	r2,r2,6
  819a34:	10c5883a 	add	r2,r2,r3
  819a38:	10800204 	addi	r2,r2,8
  819a3c:	108000c3 	ldbu	r2,3(r2)
  819a40:	10803fcc 	andi	r2,r2,255
  819a44:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
  819a48:	e0bffe0f 	ldh	r2,-8(fp)
}
  819a4c:	e037883a 	mov	sp,fp
  819a50:	df000017 	ldw	fp,0(sp)
  819a54:	dec00104 	addi	sp,sp,4
  819a58:	f800283a 	ret

00819a5c <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
  819a5c:	defffa04 	addi	sp,sp,-24
  819a60:	dfc00515 	stw	ra,20(sp)
  819a64:	df000415 	stw	fp,16(sp)
  819a68:	df000404 	addi	fp,sp,16
  819a6c:	e13ffe0d 	sth	r4,-8(fp)
	short int ch = -1;
  819a70:	00bfffc4 	movi	r2,-1
  819a74:	e0bffd0d 	sth	r2,-12(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  819a78:	e0bffe0f 	ldh	r2,-8(fp)
  819a7c:	1004803a 	cmplt	r2,r2,zero
  819a80:	1000d31e 	bne	r2,zero,819dd0 <alt_up_sd_card_read+0x374>
  819a84:	e0bffe0f 	ldh	r2,-8(fp)
  819a88:	10800508 	cmpgei	r2,r2,20
  819a8c:	1000d01e 	bne	r2,zero,819dd0 <alt_up_sd_card_read+0x374>
		if (active_files[file_handle].in_use) {
  819a90:	e0bffe0f 	ldh	r2,-8(fp)
  819a94:	00c020b4 	movhi	r3,130
  819a98:	18c9f404 	addi	r3,r3,10192
  819a9c:	100491ba 	slli	r2,r2,6
  819aa0:	10c5883a 	add	r2,r2,r3
  819aa4:	10800f04 	addi	r2,r2,60
  819aa8:	10800017 	ldw	r2,0(r2)
  819aac:	1005003a 	cmpeq	r2,r2,zero
  819ab0:	1000c71e 	bne	r2,zero,819dd0 <alt_up_sd_card_read+0x374>
			if (active_files[file_handle].current_byte_position
  819ab4:	e0bffe0f 	ldh	r2,-8(fp)
  819ab8:	00c020b4 	movhi	r3,130
  819abc:	18c9f404 	addi	r3,r3,10192
  819ac0:	100491ba 	slli	r2,r2,6
  819ac4:	10c5883a 	add	r2,r2,r3
  819ac8:	10800904 	addi	r2,r2,36
  819acc:	11000017 	ldw	r4,0(r2)
  819ad0:	e0bffe0f 	ldh	r2,-8(fp)
  819ad4:	00c020b4 	movhi	r3,130
  819ad8:	18c9f404 	addi	r3,r3,10192
  819adc:	100491ba 	slli	r2,r2,6
  819ae0:	10c5883a 	add	r2,r2,r3
  819ae4:	10800604 	addi	r2,r2,24
  819ae8:	10800017 	ldw	r2,0(r2)
  819aec:	2080b82e 	bgeu	r4,r2,819dd0 <alt_up_sd_card_read+0x374>
					< active_files[file_handle].file_size_in_bytes) {
				int data_sector = boot_sector_data.data_sector_offset
						+ (active_files[file_handle].current_cluster_index - 2)
								* boot_sector_data.sectors_per_cluster
						+ active_files[file_handle].current_sector_in_cluster;
  819af0:	008020b4 	movhi	r2,130
  819af4:	1089df04 	addi	r2,r2,10108
  819af8:	11001417 	ldw	r4,80(r2)
  819afc:	e0bffe0f 	ldh	r2,-8(fp)
  819b00:	00c020b4 	movhi	r3,130
  819b04:	18c9f404 	addi	r3,r3,10192
  819b08:	100491ba 	slli	r2,r2,6
  819b0c:	10c5883a 	add	r2,r2,r3
  819b10:	10800704 	addi	r2,r2,28
  819b14:	10800017 	ldw	r2,0(r2)
  819b18:	10ffff84 	addi	r3,r2,-2
  819b1c:	008020b4 	movhi	r2,130
  819b20:	1089df04 	addi	r2,r2,10108
  819b24:	10800383 	ldbu	r2,14(r2)
  819b28:	10803fcc 	andi	r2,r2,255
  819b2c:	1885383a 	mul	r2,r3,r2
  819b30:	2089883a 	add	r4,r4,r2
  819b34:	e0bffe0f 	ldh	r2,-8(fp)
  819b38:	00c020b4 	movhi	r3,130
  819b3c:	18c9f404 	addi	r3,r3,10192
  819b40:	100491ba 	slli	r2,r2,6
  819b44:	10c5883a 	add	r2,r2,r3
  819b48:	10800804 	addi	r2,r2,32
  819b4c:	10800017 	ldw	r2,0(r2)
  819b50:	2085883a 	add	r2,r4,r2
  819b54:	e0bffc15 	stw	r2,-16(fp)

				if ((active_files[file_handle].current_byte_position > 0)
  819b58:	e0bffe0f 	ldh	r2,-8(fp)
  819b5c:	00c020b4 	movhi	r3,130
  819b60:	18c9f404 	addi	r3,r3,10192
  819b64:	100491ba 	slli	r2,r2,6
  819b68:	10c5883a 	add	r2,r2,r3
  819b6c:	10800904 	addi	r2,r2,36
  819b70:	10800017 	ldw	r2,0(r2)
  819b74:	1005003a 	cmpeq	r2,r2,zero
  819b78:	10006a1e 	bne	r2,zero,819d24 <alt_up_sd_card_read+0x2c8>
  819b7c:	e0bffe0f 	ldh	r2,-8(fp)
  819b80:	00c020b4 	movhi	r3,130
  819b84:	18c9f404 	addi	r3,r3,10192
  819b88:	100491ba 	slli	r2,r2,6
  819b8c:	10c5883a 	add	r2,r2,r3
  819b90:	10800904 	addi	r2,r2,36
  819b94:	10800017 	ldw	r2,0(r2)
  819b98:	10807fcc 	andi	r2,r2,511
  819b9c:	1004c03a 	cmpne	r2,r2,zero
  819ba0:	1000601e 	bne	r2,zero,819d24 <alt_up_sd_card_read+0x2c8>
						&& ((active_files[file_handle].current_byte_position
								% 512) == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
  819ba4:	e0bffe0f 	ldh	r2,-8(fp)
  819ba8:	00c020b4 	movhi	r3,130
  819bac:	18c9f404 	addi	r3,r3,10192
  819bb0:	100491ba 	slli	r2,r2,6
  819bb4:	10c5883a 	add	r2,r2,r3
  819bb8:	10800804 	addi	r2,r2,32
  819bbc:	10c00017 	ldw	r3,0(r2)
  819bc0:	008020b4 	movhi	r2,130
  819bc4:	1089df04 	addi	r2,r2,10108
  819bc8:	10800383 	ldbu	r2,14(r2)
  819bcc:	10803fcc 	andi	r2,r2,255
  819bd0:	10bfffc4 	addi	r2,r2,-1
  819bd4:	1880411e 	bne	r3,r2,819cdc <alt_up_sd_card_read+0x280>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
  819bd8:	e0bffe0f 	ldh	r2,-8(fp)
  819bdc:	00c020b4 	movhi	r3,130
  819be0:	18c9f404 	addi	r3,r3,10192
  819be4:	100491ba 	slli	r2,r2,6
  819be8:	10c5883a 	add	r2,r2,r3
  819bec:	10800704 	addi	r2,r2,28
  819bf0:	11000017 	ldw	r4,0(r2)
  819bf4:	e17ffd84 	addi	r5,fp,-10
  819bf8:	08163c00 	call	8163c0 <get_cluster_flag>
  819bfc:	1005003a 	cmpeq	r2,r2,zero
  819c00:	1000331e 	bne	r2,zero,819cd0 <alt_up_sd_card_read+0x274>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
  819c04:	e0bffd8b 	ldhu	r2,-10(fp)
  819c08:	10bfffcc 	andi	r2,r2,65535
  819c0c:	10fffe0c 	andi	r3,r2,65528
  819c10:	00bffe14 	movui	r2,65528
  819c14:	1880031e 	bne	r3,r2,819c24 <alt_up_sd_card_read+0x1c8>
								/* End of file */
								return -1;
  819c18:	00bfffc4 	movi	r2,-1
  819c1c:	e0bfff15 	stw	r2,-4(fp)
  819c20:	00006d06 	br	819dd8 <alt_up_sd_card_read+0x37c>
							} else {
								active_files[file_handle].current_cluster_index
  819c24:	e13ffe0f 	ldh	r4,-8(fp)
  819c28:	e0bffd8b 	ldhu	r2,-10(fp)
  819c2c:	117fffcc 	andi	r5,r2,65535
  819c30:	00c020b4 	movhi	r3,130
  819c34:	18c9f404 	addi	r3,r3,10192
  819c38:	200491ba 	slli	r2,r4,6
  819c3c:	10c5883a 	add	r2,r2,r3
  819c40:	10800704 	addi	r2,r2,28
  819c44:	11400015 	stw	r5,0(r2)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
  819c48:	e0bffe0f 	ldh	r2,-8(fp)
  819c4c:	00c020b4 	movhi	r3,130
  819c50:	18c9f404 	addi	r3,r3,10192
  819c54:	100491ba 	slli	r2,r2,6
  819c58:	10c5883a 	add	r2,r2,r3
  819c5c:	10800804 	addi	r2,r2,32
  819c60:	10000015 	stw	zero,0(r2)
										= 0;
								data_sector
  819c64:	008020b4 	movhi	r2,130
  819c68:	1089df04 	addi	r2,r2,10108
  819c6c:	11001417 	ldw	r4,80(r2)
  819c70:	e0bffe0f 	ldh	r2,-8(fp)
  819c74:	00c020b4 	movhi	r3,130
  819c78:	18c9f404 	addi	r3,r3,10192
  819c7c:	100491ba 	slli	r2,r2,6
  819c80:	10c5883a 	add	r2,r2,r3
  819c84:	10800704 	addi	r2,r2,28
  819c88:	10800017 	ldw	r2,0(r2)
  819c8c:	10ffff84 	addi	r3,r2,-2
  819c90:	008020b4 	movhi	r2,130
  819c94:	1089df04 	addi	r2,r2,10108
  819c98:	10800383 	ldbu	r2,14(r2)
  819c9c:	10803fcc 	andi	r2,r2,255
  819ca0:	1885383a 	mul	r2,r3,r2
  819ca4:	2089883a 	add	r4,r4,r2
  819ca8:	e0bffe0f 	ldh	r2,-8(fp)
  819cac:	00c020b4 	movhi	r3,130
  819cb0:	18c9f404 	addi	r3,r3,10192
  819cb4:	100491ba 	slli	r2,r2,6
  819cb8:	10c5883a 	add	r2,r2,r3
  819cbc:	10800804 	addi	r2,r2,32
  819cc0:	10800017 	ldw	r2,0(r2)
  819cc4:	2085883a 	add	r2,r4,r2
  819cc8:	e0bffc15 	stw	r2,-16(fp)
  819ccc:	00001506 	br	819d24 <alt_up_sd_card_read+0x2c8>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return -2;
  819cd0:	00bfff84 	movi	r2,-2
  819cd4:	e0bfff15 	stw	r2,-4(fp)
  819cd8:	00003f06 	br	819dd8 <alt_up_sd_card_read+0x37c>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
  819cdc:	e17ffe0f 	ldh	r5,-8(fp)
  819ce0:	e0bffe0f 	ldh	r2,-8(fp)
  819ce4:	00c020b4 	movhi	r3,130
  819ce8:	18c9f404 	addi	r3,r3,10192
  819cec:	100491ba 	slli	r2,r2,6
  819cf0:	10c5883a 	add	r2,r2,r3
  819cf4:	10800804 	addi	r2,r2,32
  819cf8:	10800017 	ldw	r2,0(r2)
  819cfc:	11000044 	addi	r4,r2,1
  819d00:	00c020b4 	movhi	r3,130
  819d04:	18c9f404 	addi	r3,r3,10192
  819d08:	280491ba 	slli	r2,r5,6
  819d0c:	10c5883a 	add	r2,r2,r3
  819d10:	10800804 	addi	r2,r2,32
  819d14:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
  819d18:	e0bffc17 	ldw	r2,-16(fp)
  819d1c:	10800044 	addi	r2,r2,1
  819d20:	e0bffc15 	stw	r2,-16(fp)
					}
				}
				// Reading te first byte of the file.
				if (current_sector_index != (data_sector
  819d24:	d0e74c17 	ldw	r3,-25296(gp)
  819d28:	e0bffc17 	ldw	r2,-16(fp)
  819d2c:	1885883a 	add	r2,r3,r2
  819d30:	1007883a 	mov	r3,r2
  819d34:	d0a75017 	ldw	r2,-25280(gp)
  819d38:	18800826 	beq	r3,r2,819d5c <alt_up_sd_card_read+0x300>
						+ fat_partition_offset_in_512_byte_sectors)) {
					if (!Read_Sector_Data(data_sector,
  819d3c:	d1674c17 	ldw	r5,-25296(gp)
  819d40:	e13ffc17 	ldw	r4,-16(fp)
  819d44:	08162c40 	call	8162c4 <Read_Sector_Data>
  819d48:	1004c03a 	cmpne	r2,r2,zero
  819d4c:	1000031e 	bne	r2,zero,819d5c <alt_up_sd_card_read+0x300>
							fat_partition_offset_in_512_byte_sectors)) {
						return -2;
  819d50:	00bfff84 	movi	r2,-2
  819d54:	e0bfff15 	stw	r2,-4(fp)
  819d58:	00001f06 	br	819dd8 <alt_up_sd_card_read+0x37c>
					}
				}

				ch
  819d5c:	e0bffe0f 	ldh	r2,-8(fp)
  819d60:	00c020b4 	movhi	r3,130
  819d64:	18c9f404 	addi	r3,r3,10192
  819d68:	100491ba 	slli	r2,r2,6
  819d6c:	10c5883a 	add	r2,r2,r3
  819d70:	10800904 	addi	r2,r2,36
  819d74:	10800017 	ldw	r2,0(r2)
  819d78:	10807fcc 	andi	r2,r2,511
  819d7c:	1007883a 	mov	r3,r2
  819d80:	d0a74b17 	ldw	r2,-25300(gp)
  819d84:	1885883a 	add	r2,r3,r2
  819d88:	10800023 	ldbuio	r2,0(r2)
  819d8c:	10803fcc 	andi	r2,r2,255
  819d90:	e0bffd0d 	sth	r2,-12(fp)
						= (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
				active_files[file_handle].current_byte_position
  819d94:	e17ffe0f 	ldh	r5,-8(fp)
  819d98:	e0bffe0f 	ldh	r2,-8(fp)
  819d9c:	00c020b4 	movhi	r3,130
  819da0:	18c9f404 	addi	r3,r3,10192
  819da4:	100491ba 	slli	r2,r2,6
  819da8:	10c5883a 	add	r2,r2,r3
  819dac:	10800904 	addi	r2,r2,36
  819db0:	10800017 	ldw	r2,0(r2)
  819db4:	11000044 	addi	r4,r2,1
  819db8:	00c020b4 	movhi	r3,130
  819dbc:	18c9f404 	addi	r3,r3,10192
  819dc0:	280491ba 	slli	r2,r5,6
  819dc4:	10c5883a 	add	r2,r2,r3
  819dc8:	10800904 	addi	r2,r2,36
  819dcc:	11000015 	stw	r4,0(r2)
						= active_files[file_handle].current_byte_position + 1;
			}
		}
	}

	return ch;
  819dd0:	e0bffd0f 	ldh	r2,-12(fp)
  819dd4:	e0bfff15 	stw	r2,-4(fp)
  819dd8:	e0bfff17 	ldw	r2,-4(fp)
}
  819ddc:	e037883a 	mov	sp,fp
  819de0:	dfc00117 	ldw	ra,4(sp)
  819de4:	df000017 	ldw	fp,0(sp)
  819de8:	dec00204 	addi	sp,sp,8
  819dec:	f800283a 	ret

00819df0 <alt_up_sd_card_write>:

bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
  819df0:	defff504 	addi	sp,sp,-44
  819df4:	dfc00a15 	stw	ra,40(sp)
  819df8:	df000915 	stw	fp,36(sp)
  819dfc:	dc000815 	stw	r16,32(sp)
  819e00:	df000804 	addi	fp,sp,32
  819e04:	e13ffd0d 	sth	r4,-12(fp)
  819e08:	e17ffe05 	stb	r5,-8(fp)
	bool result = false;
  819e0c:	e03ffa15 	stw	zero,-24(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  819e10:	e0bffd0f 	ldh	r2,-12(fp)
  819e14:	1004803a 	cmplt	r2,r2,zero
  819e18:	1001751e 	bne	r2,zero,81a3f0 <alt_up_sd_card_write+0x600>
  819e1c:	e0bffd0f 	ldh	r2,-12(fp)
  819e20:	10800508 	cmpgei	r2,r2,20
  819e24:	1001721e 	bne	r2,zero,81a3f0 <alt_up_sd_card_write+0x600>
		if (active_files[file_handle].in_use) {
  819e28:	e0bffd0f 	ldh	r2,-12(fp)
  819e2c:	00c020b4 	movhi	r3,130
  819e30:	18c9f404 	addi	r3,r3,10192
  819e34:	100491ba 	slli	r2,r2,6
  819e38:	10c5883a 	add	r2,r2,r3
  819e3c:	10800f04 	addi	r2,r2,60
  819e40:	10800017 	ldw	r2,0(r2)
  819e44:	1005003a 	cmpeq	r2,r2,zero
  819e48:	1001691e 	bne	r2,zero,81a3f0 <alt_up_sd_card_write+0x600>
			int data_sector = boot_sector_data.data_sector_offset
					+ (active_files[file_handle].current_cluster_index - 2)
							* boot_sector_data.sectors_per_cluster
					+ active_files[file_handle].current_sector_in_cluster;
  819e4c:	008020b4 	movhi	r2,130
  819e50:	1089df04 	addi	r2,r2,10108
  819e54:	11001417 	ldw	r4,80(r2)
  819e58:	e0bffd0f 	ldh	r2,-12(fp)
  819e5c:	00c020b4 	movhi	r3,130
  819e60:	18c9f404 	addi	r3,r3,10192
  819e64:	100491ba 	slli	r2,r2,6
  819e68:	10c5883a 	add	r2,r2,r3
  819e6c:	10800704 	addi	r2,r2,28
  819e70:	10800017 	ldw	r2,0(r2)
  819e74:	10ffff84 	addi	r3,r2,-2
  819e78:	008020b4 	movhi	r2,130
  819e7c:	1089df04 	addi	r2,r2,10108
  819e80:	10800383 	ldbu	r2,14(r2)
  819e84:	10803fcc 	andi	r2,r2,255
  819e88:	1885383a 	mul	r2,r3,r2
  819e8c:	2089883a 	add	r4,r4,r2
  819e90:	e0bffd0f 	ldh	r2,-12(fp)
  819e94:	00c020b4 	movhi	r3,130
  819e98:	18c9f404 	addi	r3,r3,10192
  819e9c:	100491ba 	slli	r2,r2,6
  819ea0:	10c5883a 	add	r2,r2,r3
  819ea4:	10800804 	addi	r2,r2,32
  819ea8:	10800017 	ldw	r2,0(r2)
  819eac:	2085883a 	add	r2,r4,r2
  819eb0:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset =
					active_files[file_handle].current_byte_position
							% boot_sector_data.sector_size_in_bytes;
  819eb4:	e0bffd0f 	ldh	r2,-12(fp)
  819eb8:	00c020b4 	movhi	r3,130
  819ebc:	18c9f404 	addi	r3,r3,10192
  819ec0:	100491ba 	slli	r2,r2,6
  819ec4:	10c5883a 	add	r2,r2,r3
  819ec8:	10800904 	addi	r2,r2,36
  819ecc:	11000017 	ldw	r4,0(r2)
  819ed0:	008020b4 	movhi	r2,130
  819ed4:	1089df04 	addi	r2,r2,10108
  819ed8:	1080030b 	ldhu	r2,12(r2)
  819edc:	117fffcc 	andi	r5,r2,65535
  819ee0:	08088780 	call	808878 <__umodsi3>
  819ee4:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position
  819ee8:	e0bffd0f 	ldh	r2,-12(fp)
  819eec:	00c020b4 	movhi	r3,130
  819ef0:	18c9f404 	addi	r3,r3,10192
  819ef4:	100491ba 	slli	r2,r2,6
  819ef8:	10c5883a 	add	r2,r2,r3
  819efc:	10800904 	addi	r2,r2,36
  819f00:	11000017 	ldw	r4,0(r2)
  819f04:	e0bffd0f 	ldh	r2,-12(fp)
  819f08:	00c020b4 	movhi	r3,130
  819f0c:	18c9f404 	addi	r3,r3,10192
  819f10:	100491ba 	slli	r2,r2,6
  819f14:	10c5883a 	add	r2,r2,r3
  819f18:	10800604 	addi	r2,r2,24
  819f1c:	10800017 	ldw	r2,0(r2)
  819f20:	2080682e 	bgeu	r4,r2,81a0c4 <alt_up_sd_card_write+0x2d4>
					< active_files[file_handle].file_size_in_bytes) {
				if ((active_files[file_handle].current_byte_position > 0)
  819f24:	e0bffd0f 	ldh	r2,-12(fp)
  819f28:	00c020b4 	movhi	r3,130
  819f2c:	18c9f404 	addi	r3,r3,10192
  819f30:	100491ba 	slli	r2,r2,6
  819f34:	10c5883a 	add	r2,r2,r3
  819f38:	10800904 	addi	r2,r2,36
  819f3c:	10800017 	ldw	r2,0(r2)
  819f40:	1005003a 	cmpeq	r2,r2,zero
  819f44:	1000de1e 	bne	r2,zero,81a2c0 <alt_up_sd_card_write+0x4d0>
  819f48:	e0bff80f 	ldh	r2,-32(fp)
  819f4c:	1004c03a 	cmpne	r2,r2,zero
  819f50:	1000db1e 	bne	r2,zero,81a2c0 <alt_up_sd_card_write+0x4d0>
						&& (buffer_offset == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
  819f54:	e0bffd0f 	ldh	r2,-12(fp)
  819f58:	00c020b4 	movhi	r3,130
  819f5c:	18c9f404 	addi	r3,r3,10192
  819f60:	100491ba 	slli	r2,r2,6
  819f64:	10c5883a 	add	r2,r2,r3
  819f68:	10800804 	addi	r2,r2,32
  819f6c:	10c00017 	ldw	r3,0(r2)
  819f70:	008020b4 	movhi	r2,130
  819f74:	1089df04 	addi	r2,r2,10108
  819f78:	10800383 	ldbu	r2,14(r2)
  819f7c:	10803fcc 	andi	r2,r2,255
  819f80:	10bfffc4 	addi	r2,r2,-1
  819f84:	18803c1e 	bne	r3,r2,81a078 <alt_up_sd_card_write+0x288>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
  819f88:	e0bffd0f 	ldh	r2,-12(fp)
  819f8c:	00c020b4 	movhi	r3,130
  819f90:	18c9f404 	addi	r3,r3,10192
  819f94:	100491ba 	slli	r2,r2,6
  819f98:	10c5883a 	add	r2,r2,r3
  819f9c:	10800704 	addi	r2,r2,28
  819fa0:	11000017 	ldw	r4,0(r2)
  819fa4:	e17ffb04 	addi	r5,fp,-20
  819fa8:	08163c00 	call	8163c0 <get_cluster_flag>
  819fac:	1005003a 	cmpeq	r2,r2,zero
  819fb0:	10002f1e 	bne	r2,zero,81a070 <alt_up_sd_card_write+0x280>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if (next_cluster < 0x0000fff8) {
  819fb4:	e0bffb0b 	ldhu	r2,-20(fp)
  819fb8:	10ffffcc 	andi	r3,r2,65535
  819fbc:	00bffdd4 	movui	r2,65527
  819fc0:	10c0bf36 	bltu	r2,r3,81a2c0 <alt_up_sd_card_write+0x4d0>
								active_files[file_handle].current_cluster_index
  819fc4:	e13ffd0f 	ldh	r4,-12(fp)
  819fc8:	e0bffb0b 	ldhu	r2,-20(fp)
  819fcc:	117fffcc 	andi	r5,r2,65535
  819fd0:	00c020b4 	movhi	r3,130
  819fd4:	18c9f404 	addi	r3,r3,10192
  819fd8:	200491ba 	slli	r2,r4,6
  819fdc:	10c5883a 	add	r2,r2,r3
  819fe0:	10800704 	addi	r2,r2,28
  819fe4:	11400015 	stw	r5,0(r2)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
  819fe8:	e0bffd0f 	ldh	r2,-12(fp)
  819fec:	00c020b4 	movhi	r3,130
  819ff0:	18c9f404 	addi	r3,r3,10192
  819ff4:	100491ba 	slli	r2,r2,6
  819ff8:	10c5883a 	add	r2,r2,r3
  819ffc:	10800804 	addi	r2,r2,32
  81a000:	10000015 	stw	zero,0(r2)
										= 0;
								data_sector
  81a004:	008020b4 	movhi	r2,130
  81a008:	1089df04 	addi	r2,r2,10108
  81a00c:	11001417 	ldw	r4,80(r2)
  81a010:	e0bffd0f 	ldh	r2,-12(fp)
  81a014:	00c020b4 	movhi	r3,130
  81a018:	18c9f404 	addi	r3,r3,10192
  81a01c:	100491ba 	slli	r2,r2,6
  81a020:	10c5883a 	add	r2,r2,r3
  81a024:	10800704 	addi	r2,r2,28
  81a028:	10800017 	ldw	r2,0(r2)
  81a02c:	10ffff84 	addi	r3,r2,-2
  81a030:	008020b4 	movhi	r2,130
  81a034:	1089df04 	addi	r2,r2,10108
  81a038:	10800383 	ldbu	r2,14(r2)
  81a03c:	10803fcc 	andi	r2,r2,255
  81a040:	1885383a 	mul	r2,r3,r2
  81a044:	2089883a 	add	r4,r4,r2
  81a048:	e0bffd0f 	ldh	r2,-12(fp)
  81a04c:	00c020b4 	movhi	r3,130
  81a050:	18c9f404 	addi	r3,r3,10192
  81a054:	100491ba 	slli	r2,r2,6
  81a058:	10c5883a 	add	r2,r2,r3
  81a05c:	10800804 	addi	r2,r2,32
  81a060:	10800017 	ldw	r2,0(r2)
  81a064:	2085883a 	add	r2,r4,r2
  81a068:	e0bff915 	stw	r2,-28(fp)
  81a06c:	00009406 	br	81a2c0 <alt_up_sd_card_write+0x4d0>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return false;
  81a070:	e03fff15 	stw	zero,-4(fp)
  81a074:	0000e006 	br	81a3f8 <alt_up_sd_card_write+0x608>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
  81a078:	e17ffd0f 	ldh	r5,-12(fp)
  81a07c:	e0bffd0f 	ldh	r2,-12(fp)
  81a080:	00c020b4 	movhi	r3,130
  81a084:	18c9f404 	addi	r3,r3,10192
  81a088:	100491ba 	slli	r2,r2,6
  81a08c:	10c5883a 	add	r2,r2,r3
  81a090:	10800804 	addi	r2,r2,32
  81a094:	10800017 	ldw	r2,0(r2)
  81a098:	11000044 	addi	r4,r2,1
  81a09c:	00c020b4 	movhi	r3,130
  81a0a0:	18c9f404 	addi	r3,r3,10192
  81a0a4:	280491ba 	slli	r2,r5,6
  81a0a8:	10c5883a 	add	r2,r2,r3
  81a0ac:	10800804 	addi	r2,r2,32
  81a0b0:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
  81a0b4:	e0bff917 	ldw	r2,-28(fp)
  81a0b8:	10800044 	addi	r2,r2,1
  81a0bc:	e0bff915 	stw	r2,-28(fp)
  81a0c0:	00007f06 	br	81a2c0 <alt_up_sd_card_write+0x4d0>
					}
				}
			} else {
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0)
  81a0c4:	e0bffd0f 	ldh	r2,-12(fp)
  81a0c8:	00c020b4 	movhi	r3,130
  81a0cc:	18c9f404 	addi	r3,r3,10192
  81a0d0:	100491ba 	slli	r2,r2,6
  81a0d4:	10c5883a 	add	r2,r2,r3
  81a0d8:	10800904 	addi	r2,r2,36
  81a0dc:	10800017 	ldw	r2,0(r2)
  81a0e0:	1005003a 	cmpeq	r2,r2,zero
  81a0e4:	1000761e 	bne	r2,zero,81a2c0 <alt_up_sd_card_write+0x4d0>
  81a0e8:	e0bff80f 	ldh	r2,-32(fp)
  81a0ec:	1004c03a 	cmpne	r2,r2,zero
  81a0f0:	1000731e 	bne	r2,zero,81a2c0 <alt_up_sd_card_write+0x4d0>
						&& (buffer_offset == 0)) {
					if (active_files[file_handle].current_sector_in_cluster
  81a0f4:	e0bffd0f 	ldh	r2,-12(fp)
  81a0f8:	00c020b4 	movhi	r3,130
  81a0fc:	18c9f404 	addi	r3,r3,10192
  81a100:	100491ba 	slli	r2,r2,6
  81a104:	10c5883a 	add	r2,r2,r3
  81a108:	10800804 	addi	r2,r2,32
  81a10c:	10c00017 	ldw	r3,0(r2)
  81a110:	008020b4 	movhi	r2,130
  81a114:	1089df04 	addi	r2,r2,10108
  81a118:	10800383 	ldbu	r2,14(r2)
  81a11c:	10803fcc 	andi	r2,r2,255
  81a120:	10bfffc4 	addi	r2,r2,-1
  81a124:	1880381e 	bne	r3,r2,81a208 <alt_up_sd_card_write+0x418>
							== boot_sector_data.sectors_per_cluster - 1) {
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number)) {
  81a128:	e13ffc04 	addi	r4,fp,-16
  81a12c:	08184180 	call	818418 <find_first_empty_cluster>
  81a130:	1005003a 	cmpeq	r2,r2,zero
  81a134:	1000321e 	bne	r2,zero,81a200 <alt_up_sd_card_write+0x410>
							// mark clusters in both File Allocation Tables.
							mark_cluster(
  81a138:	e0bffd0f 	ldh	r2,-12(fp)
  81a13c:	00c020b4 	movhi	r3,130
  81a140:	18c9f404 	addi	r3,r3,10192
  81a144:	100491ba 	slli	r2,r2,6
  81a148:	10c5883a 	add	r2,r2,r3
  81a14c:	10800704 	addi	r2,r2,28
  81a150:	11000017 	ldw	r4,0(r2)
  81a154:	e0bffc17 	ldw	r2,-16(fp)
  81a158:	117fffcc 	andi	r5,r2,65535
  81a15c:	2960001c 	xori	r5,r5,32768
  81a160:	29600004 	addi	r5,r5,-32768
  81a164:	01800044 	movi	r6,1
  81a168:	08164780 	call	816478 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
  81a16c:	e13ffc17 	ldw	r4,-16(fp)
  81a170:	017fffc4 	movi	r5,-1
  81a174:	01800044 	movi	r6,1
  81a178:	08164780 	call	816478 <mark_cluster>
							mark_cluster(
  81a17c:	e0bffd0f 	ldh	r2,-12(fp)
  81a180:	00c020b4 	movhi	r3,130
  81a184:	18c9f404 	addi	r3,r3,10192
  81a188:	100491ba 	slli	r2,r2,6
  81a18c:	10c5883a 	add	r2,r2,r3
  81a190:	10800704 	addi	r2,r2,28
  81a194:	11000017 	ldw	r4,0(r2)
  81a198:	e0bffc17 	ldw	r2,-16(fp)
  81a19c:	117fffcc 	andi	r5,r2,65535
  81a1a0:	2960001c 	xori	r5,r5,32768
  81a1a4:	29600004 	addi	r5,r5,-32768
  81a1a8:	000d883a 	mov	r6,zero
  81a1ac:	08164780 	call	816478 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
  81a1b0:	e13ffc17 	ldw	r4,-16(fp)
  81a1b4:	017fffc4 	movi	r5,-1
  81a1b8:	000d883a 	mov	r6,zero
  81a1bc:	08164780 	call	816478 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index
  81a1c0:	e0bffd0f 	ldh	r2,-12(fp)
  81a1c4:	e13ffc17 	ldw	r4,-16(fp)
  81a1c8:	00c020b4 	movhi	r3,130
  81a1cc:	18c9f404 	addi	r3,r3,10192
  81a1d0:	100491ba 	slli	r2,r2,6
  81a1d4:	10c5883a 	add	r2,r2,r3
  81a1d8:	10800704 	addi	r2,r2,28
  81a1dc:	11000015 	stw	r4,0(r2)
									= cluster_number;
							active_files[file_handle].current_sector_in_cluster
  81a1e0:	e0bffd0f 	ldh	r2,-12(fp)
  81a1e4:	00c020b4 	movhi	r3,130
  81a1e8:	18c9f404 	addi	r3,r3,10192
  81a1ec:	100491ba 	slli	r2,r2,6
  81a1f0:	10c5883a 	add	r2,r2,r3
  81a1f4:	10800804 	addi	r2,r2,32
  81a1f8:	10000015 	stw	zero,0(r2)
  81a1fc:	00001606 	br	81a258 <alt_up_sd_card_write+0x468>
									= 0;
						} else {
							return false;
  81a200:	e03fff15 	stw	zero,-4(fp)
  81a204:	00007c06 	br	81a3f8 <alt_up_sd_card_write+0x608>
						}
					} else {
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster
  81a208:	e43ffd0f 	ldh	r16,-12(fp)
  81a20c:	e0bffd0f 	ldh	r2,-12(fp)
  81a210:	00c020b4 	movhi	r3,130
  81a214:	18c9f404 	addi	r3,r3,10192
  81a218:	100491ba 	slli	r2,r2,6
  81a21c:	10c5883a 	add	r2,r2,r3
  81a220:	10800904 	addi	r2,r2,36
  81a224:	11000017 	ldw	r4,0(r2)
  81a228:	008020b4 	movhi	r2,130
  81a22c:	1089df04 	addi	r2,r2,10108
  81a230:	1080030b 	ldhu	r2,12(r2)
  81a234:	117fffcc 	andi	r5,r2,65535
  81a238:	08088700 	call	808870 <__udivsi3>
  81a23c:	1009883a 	mov	r4,r2
  81a240:	00c020b4 	movhi	r3,130
  81a244:	18c9f404 	addi	r3,r3,10192
  81a248:	800491ba 	slli	r2,r16,6
  81a24c:	10c5883a 	add	r2,r2,r3
  81a250:	10800804 	addi	r2,r2,32
  81a254:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_byte_position
										/ boot_sector_data.sector_size_in_bytes;
					}
					data_sector
  81a258:	008020b4 	movhi	r2,130
  81a25c:	1089df04 	addi	r2,r2,10108
  81a260:	11001417 	ldw	r4,80(r2)
  81a264:	e0bffd0f 	ldh	r2,-12(fp)
  81a268:	00c020b4 	movhi	r3,130
  81a26c:	18c9f404 	addi	r3,r3,10192
  81a270:	100491ba 	slli	r2,r2,6
  81a274:	10c5883a 	add	r2,r2,r3
  81a278:	10800704 	addi	r2,r2,28
  81a27c:	10800017 	ldw	r2,0(r2)
  81a280:	10ffff84 	addi	r3,r2,-2
  81a284:	008020b4 	movhi	r2,130
  81a288:	1089df04 	addi	r2,r2,10108
  81a28c:	10800383 	ldbu	r2,14(r2)
  81a290:	10803fcc 	andi	r2,r2,255
  81a294:	1885383a 	mul	r2,r3,r2
  81a298:	2089883a 	add	r4,r4,r2
  81a29c:	e0bffd0f 	ldh	r2,-12(fp)
  81a2a0:	00c020b4 	movhi	r3,130
  81a2a4:	18c9f404 	addi	r3,r3,10192
  81a2a8:	100491ba 	slli	r2,r2,6
  81a2ac:	10c5883a 	add	r2,r2,r3
  81a2b0:	10800804 	addi	r2,r2,32
  81a2b4:	10800017 	ldw	r2,0(r2)
  81a2b8:	2085883a 	add	r2,r4,r2
  81a2bc:	e0bff915 	stw	r2,-28(fp)
									+ active_files[file_handle].current_sector_in_cluster;
				}
			}
			// Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
			if (current_sector_index != data_sector
  81a2c0:	d0e74c17 	ldw	r3,-25296(gp)
  81a2c4:	e0bff917 	ldw	r2,-28(fp)
  81a2c8:	1885883a 	add	r2,r3,r2
  81a2cc:	1007883a 	mov	r3,r2
  81a2d0:	d0a75017 	ldw	r2,-25280(gp)
  81a2d4:	18800726 	beq	r3,r2,81a2f4 <alt_up_sd_card_write+0x504>
					+ fat_partition_offset_in_512_byte_sectors) {
				if (!Read_Sector_Data(data_sector,
  81a2d8:	d1674c17 	ldw	r5,-25296(gp)
  81a2dc:	e13ff917 	ldw	r4,-28(fp)
  81a2e0:	08162c40 	call	8162c4 <Read_Sector_Data>
  81a2e4:	1004c03a 	cmpne	r2,r2,zero
  81a2e8:	1000021e 	bne	r2,zero,81a2f4 <alt_up_sd_card_write+0x504>
						fat_partition_offset_in_512_byte_sectors)) {
					return false;
  81a2ec:	e03fff15 	stw	zero,-4(fp)
  81a2f0:	00004106 	br	81a3f8 <alt_up_sd_card_write+0x608>
				}
			}
			// Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
  81a2f4:	e0bff80f 	ldh	r2,-32(fp)
  81a2f8:	1007883a 	mov	r3,r2
  81a2fc:	d0a74b17 	ldw	r2,-25300(gp)
  81a300:	1885883a 	add	r2,r3,r2
  81a304:	e0fffe07 	ldb	r3,-8(fp)
  81a308:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position
  81a30c:	e17ffd0f 	ldh	r5,-12(fp)
  81a310:	e0bffd0f 	ldh	r2,-12(fp)
  81a314:	00c020b4 	movhi	r3,130
  81a318:	18c9f404 	addi	r3,r3,10192
  81a31c:	100491ba 	slli	r2,r2,6
  81a320:	10c5883a 	add	r2,r2,r3
  81a324:	10800904 	addi	r2,r2,36
  81a328:	10800017 	ldw	r2,0(r2)
  81a32c:	11000044 	addi	r4,r2,1
  81a330:	00c020b4 	movhi	r3,130
  81a334:	18c9f404 	addi	r3,r3,10192
  81a338:	280491ba 	slli	r2,r5,6
  81a33c:	10c5883a 	add	r2,r2,r3
  81a340:	10800904 	addi	r2,r2,36
  81a344:	11000015 	stw	r4,0(r2)
					= active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position
  81a348:	e0bffd0f 	ldh	r2,-12(fp)
  81a34c:	00c020b4 	movhi	r3,130
  81a350:	18c9f404 	addi	r3,r3,10192
  81a354:	100491ba 	slli	r2,r2,6
  81a358:	10c5883a 	add	r2,r2,r3
  81a35c:	10800904 	addi	r2,r2,36
  81a360:	11000017 	ldw	r4,0(r2)
  81a364:	e0bffd0f 	ldh	r2,-12(fp)
  81a368:	00c020b4 	movhi	r3,130
  81a36c:	18c9f404 	addi	r3,r3,10192
  81a370:	100491ba 	slli	r2,r2,6
  81a374:	10c5883a 	add	r2,r2,r3
  81a378:	10800604 	addi	r2,r2,24
  81a37c:	10800017 	ldw	r2,0(r2)
  81a380:	20801736 	bltu	r4,r2,81a3e0 <alt_up_sd_card_write+0x5f0>
					>= active_files[file_handle].file_size_in_bytes) {
				active_files[file_handle].file_size_in_bytes
  81a384:	e17ffd0f 	ldh	r5,-12(fp)
  81a388:	e0bffd0f 	ldh	r2,-12(fp)
  81a38c:	00c020b4 	movhi	r3,130
  81a390:	18c9f404 	addi	r3,r3,10192
  81a394:	100491ba 	slli	r2,r2,6
  81a398:	10c5883a 	add	r2,r2,r3
  81a39c:	10800604 	addi	r2,r2,24
  81a3a0:	10800017 	ldw	r2,0(r2)
  81a3a4:	11000044 	addi	r4,r2,1
  81a3a8:	00c020b4 	movhi	r3,130
  81a3ac:	18c9f404 	addi	r3,r3,10192
  81a3b0:	280491ba 	slli	r2,r5,6
  81a3b4:	10c5883a 	add	r2,r2,r3
  81a3b8:	10800604 	addi	r2,r2,24
  81a3bc:	11000015 	stw	r4,0(r2)
						= active_files[file_handle].file_size_in_bytes + 1;
				active_files[file_handle].modified = true;
  81a3c0:	e0bffd0f 	ldh	r2,-12(fp)
  81a3c4:	00c020b4 	movhi	r3,130
  81a3c8:	18c9f404 	addi	r3,r3,10192
  81a3cc:	100491ba 	slli	r2,r2,6
  81a3d0:	10c5883a 	add	r2,r2,r3
  81a3d4:	10c00e04 	addi	r3,r2,56
  81a3d8:	00800044 	movi	r2,1
  81a3dc:	18800015 	stw	r2,0(r3)
			}
			// Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
			current_sector_modified = true;
  81a3e0:	00800044 	movi	r2,1
  81a3e4:	d0a74f15 	stw	r2,-25284(gp)
			result = true;
  81a3e8:	00800044 	movi	r2,1
  81a3ec:	e0bffa15 	stw	r2,-24(fp)
		}
	}

	return result;
  81a3f0:	e0bffa17 	ldw	r2,-24(fp)
  81a3f4:	e0bfff15 	stw	r2,-4(fp)
  81a3f8:	e0bfff17 	ldw	r2,-4(fp)
}
  81a3fc:	e037883a 	mov	sp,fp
  81a400:	dfc00217 	ldw	ra,8(sp)
  81a404:	df000117 	ldw	fp,4(sp)
  81a408:	dc000017 	ldw	r16,0(sp)
  81a40c:	dec00304 	addi	sp,sp,12
  81a410:	f800283a 	ret

0081a414 <alt_up_sd_card_fclose>:

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
  81a414:	defffb04 	addi	sp,sp,-20
  81a418:	dfc00415 	stw	ra,16(sp)
  81a41c:	df000315 	stw	fp,12(sp)
  81a420:	df000304 	addi	fp,sp,12
  81a424:	e13fff0d 	sth	r4,-4(fp)
	bool result = false;
  81a428:	e03ffe15 	stw	zero,-8(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  81a42c:	0818fd80 	call	818fd8 <alt_up_sd_card_is_Present>
  81a430:	1005003a 	cmpeq	r2,r2,zero
  81a434:	1000641e 	bne	r2,zero,81a5c8 <alt_up_sd_card_fclose+0x1b4>
  81a438:	d0a74517 	ldw	r2,-25324(gp)
  81a43c:	1005003a 	cmpeq	r2,r2,zero
  81a440:	1000611e 	bne	r2,zero,81a5c8 <alt_up_sd_card_fclose+0x1b4>
		if (active_files[file_handle].in_use) {
  81a444:	e0bfff0f 	ldh	r2,-4(fp)
  81a448:	00c020b4 	movhi	r3,130
  81a44c:	18c9f404 	addi	r3,r3,10192
  81a450:	100491ba 	slli	r2,r2,6
  81a454:	10c5883a 	add	r2,r2,r3
  81a458:	10800f04 	addi	r2,r2,60
  81a45c:	10800017 	ldw	r2,0(r2)
  81a460:	1005003a 	cmpeq	r2,r2,zero
  81a464:	1000581e 	bne	r2,zero,81a5c8 <alt_up_sd_card_fclose+0x1b4>
			if (active_files[file_handle].modified) {
  81a468:	e0bfff0f 	ldh	r2,-4(fp)
  81a46c:	00c020b4 	movhi	r3,130
  81a470:	18c9f404 	addi	r3,r3,10192
  81a474:	100491ba 	slli	r2,r2,6
  81a478:	10c5883a 	add	r2,r2,r3
  81a47c:	10800e04 	addi	r2,r2,56
  81a480:	10800017 	ldw	r2,0(r2)
  81a484:	1005003a 	cmpeq	r2,r2,zero
  81a488:	1000461e 	bne	r2,zero,81a5a4 <alt_up_sd_card_fclose+0x190>
				unsigned int record_sector =
						active_files[file_handle].file_record_sector_in_cluster;
  81a48c:	e0bfff0f 	ldh	r2,-4(fp)
  81a490:	00c020b4 	movhi	r3,130
  81a494:	18c9f404 	addi	r3,r3,10192
  81a498:	100491ba 	slli	r2,r2,6
  81a49c:	10c5883a 	add	r2,r2,r3
  81a4a0:	10800b04 	addi	r2,r2,44
  81a4a4:	10800017 	ldw	r2,0(r2)
  81a4a8:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0) {
  81a4ac:	e0bfff0f 	ldh	r2,-4(fp)
  81a4b0:	00c020b4 	movhi	r3,130
  81a4b4:	18c9f404 	addi	r3,r3,10192
  81a4b8:	100491ba 	slli	r2,r2,6
  81a4bc:	10c5883a 	add	r2,r2,r3
  81a4c0:	10800a04 	addi	r2,r2,40
  81a4c4:	10800017 	ldw	r2,0(r2)
  81a4c8:	1004c03a 	cmpne	r2,r2,zero
  81a4cc:	1000071e 	bne	r2,zero,81a4ec <alt_up_sd_card_fclose+0xd8>
					record_sector = record_sector
  81a4d0:	008020b4 	movhi	r2,130
  81a4d4:	1089df04 	addi	r2,r2,10108
  81a4d8:	10c01317 	ldw	r3,76(r2)
  81a4dc:	e0bffd17 	ldw	r2,-12(fp)
  81a4e0:	10c5883a 	add	r2,r2,r3
  81a4e4:	e0bffd15 	stw	r2,-12(fp)
  81a4e8:	00001406 	br	81a53c <alt_up_sd_card_fclose+0x128>
							+ boot_sector_data.root_directory_sector_offset;
				} else {
					record_sector = record_sector
  81a4ec:	008020b4 	movhi	r2,130
  81a4f0:	1089df04 	addi	r2,r2,10108
  81a4f4:	10c01417 	ldw	r3,80(r2)
  81a4f8:	e0bffd17 	ldw	r2,-12(fp)
  81a4fc:	1889883a 	add	r4,r3,r2
  81a500:	e0bfff0f 	ldh	r2,-4(fp)
  81a504:	00c020b4 	movhi	r3,130
  81a508:	18c9f404 	addi	r3,r3,10192
  81a50c:	100491ba 	slli	r2,r2,6
  81a510:	10c5883a 	add	r2,r2,r3
  81a514:	10800a04 	addi	r2,r2,40
  81a518:	10800017 	ldw	r2,0(r2)
  81a51c:	10ffff84 	addi	r3,r2,-2
  81a520:	008020b4 	movhi	r2,130
  81a524:	1089df04 	addi	r2,r2,10108
  81a528:	10800383 	ldbu	r2,14(r2)
  81a52c:	10803fcc 	andi	r2,r2,255
  81a530:	1885383a 	mul	r2,r3,r2
  81a534:	2085883a 	add	r2,r4,r2
  81a538:	e0bffd15 	stw	r2,-12(fp)
							+ boot_sector_data.data_sector_offset
							+ (active_files[file_handle].file_record_cluster
									- 2) * boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector,
  81a53c:	e13ffd17 	ldw	r4,-12(fp)
  81a540:	d1674c17 	ldw	r5,-25296(gp)
  81a544:	08162c40 	call	8162c4 <Read_Sector_Data>
  81a548:	1005003a 	cmpeq	r2,r2,zero
  81a54c:	1000151e 	bne	r2,zero,81a5a4 <alt_up_sd_card_fclose+0x190>
						fat_partition_offset_in_512_byte_sectors)) {
					if (Write_File_Record_At_Offset(
  81a550:	e0bfff0f 	ldh	r2,-4(fp)
  81a554:	00c020b4 	movhi	r3,130
  81a558:	18c9f404 	addi	r3,r3,10192
  81a55c:	100491ba 	slli	r2,r2,6
  81a560:	10c5883a 	add	r2,r2,r3
  81a564:	10800c04 	addi	r2,r2,48
  81a568:	1080000b 	ldhu	r2,0(r2)
  81a56c:	113fffcc 	andi	r4,r2,65535
  81a570:	2120001c 	xori	r4,r4,32768
  81a574:	21200004 	addi	r4,r4,-32768
  81a578:	e0bfff0f 	ldh	r2,-4(fp)
  81a57c:	100491ba 	slli	r2,r2,6
  81a580:	1007883a 	mov	r3,r2
  81a584:	008020b4 	movhi	r2,130
  81a588:	1089f404 	addi	r2,r2,10192
  81a58c:	188b883a 	add	r5,r3,r2
  81a590:	08169900 	call	816990 <Write_File_Record_At_Offset>
  81a594:	1005003a 	cmpeq	r2,r2,zero
  81a598:	1000021e 	bne	r2,zero,81a5a4 <alt_up_sd_card_fclose+0x190>
							active_files[file_handle].file_record_offset,
							&(active_files[file_handle]))) {
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
  81a59c:	08162740 	call	816274 <Save_Modified_Sector>
  81a5a0:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
  81a5a4:	e0bfff0f 	ldh	r2,-4(fp)
  81a5a8:	00c020b4 	movhi	r3,130
  81a5ac:	18c9f404 	addi	r3,r3,10192
  81a5b0:	100491ba 	slli	r2,r2,6
  81a5b4:	10c5883a 	add	r2,r2,r3
  81a5b8:	10800f04 	addi	r2,r2,60
  81a5bc:	10000015 	stw	zero,0(r2)
			result = true;
  81a5c0:	00800044 	movi	r2,1
  81a5c4:	e0bffe15 	stw	r2,-8(fp)
		}
	}

	return result;
  81a5c8:	e0bffe17 	ldw	r2,-8(fp)
}
  81a5cc:	e037883a 	mov	sp,fp
  81a5d0:	dfc00117 	ldw	ra,4(sp)
  81a5d4:	df000017 	ldw	fp,0(sp)
  81a5d8:	dec00204 	addi	sp,sp,8
  81a5dc:	f800283a 	ret

0081a5e0 <Read_Sector_Data_CRC>:

bool Read_Sector_Data_CRC(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  81a5e0:	defff904 	addi	sp,sp,-28
  81a5e4:	dfc00615 	stw	ra,24(sp)
  81a5e8:	df000515 	stw	fp,20(sp)
  81a5ec:	df000504 	addi	fp,sp,20
  81a5f0:	e13ffd15 	stw	r4,-12(fp)
  81a5f4:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
  81a5f8:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
  81a5fc:	0818fd80 	call	818fd8 <alt_up_sd_card_is_Present>
  81a600:	1005003a 	cmpeq	r2,r2,zero
  81a604:	10002d1e 	bne	r2,zero,81a6bc <Read_Sector_Data_CRC+0xdc>
		short int reg_state = 0xff;
  81a608:	00803fc4 	movi	r2,255
  81a60c:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
  81a610:	d0a74f17 	ldw	r2,-25284(gp)
  81a614:	1005003a 	cmpeq	r2,r2,zero
  81a618:	1000081e 	bne	r2,zero,81a63c <Read_Sector_Data_CRC+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
  81a61c:	d0a75017 	ldw	r2,-25280(gp)
  81a620:	1009883a 	mov	r4,r2
  81a624:	000b883a 	mov	r5,zero
  81a628:	08161ac0 	call	8161ac <Write_Sector_Data>
  81a62c:	1004c03a 	cmpne	r2,r2,zero
  81a630:	1000021e 	bne	r2,zero,81a63c <Read_Sector_Data_CRC+0x5c>
				return false;
  81a634:	e03fff15 	stw	zero,-4(fp)
  81a638:	00002206 	br	81a6c4 <Read_Sector_Data_CRC+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  81a63c:	d0a74a17 	ldw	r2,-25304(gp)
  81a640:	1009883a 	mov	r4,r2
  81a644:	e0fffd17 	ldw	r3,-12(fp)
  81a648:	e0bffe17 	ldw	r2,-8(fp)
  81a64c:	1885883a 	add	r2,r3,r2
  81a650:	1006927a 	slli	r3,r2,9
  81a654:	2005883a 	mov	r2,r4
  81a658:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  81a65c:	d0a74917 	ldw	r2,-25308(gp)
  81a660:	1007883a 	mov	r3,r2
  81a664:	00800444 	movi	r2,17
  81a668:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  81a66c:	d0a74617 	ldw	r2,-25320(gp)
  81a670:	1080002b 	ldhuio	r2,0(r2)
  81a674:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
  81a678:	e0bffb0b 	ldhu	r2,-20(fp)
  81a67c:	10bfffcc 	andi	r2,r2,65535
  81a680:	1080010c 	andi	r2,r2,4
  81a684:	1004c03a 	cmpne	r2,r2,zero
  81a688:	103ff81e 	bne	r2,zero,81a66c <Read_Sector_Data_CRC+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x30) == 0) {
  81a68c:	e0bffb0b 	ldhu	r2,-20(fp)
  81a690:	10bfffcc 	andi	r2,r2,65535
  81a694:	10800c0c 	andi	r2,r2,48
  81a698:	1004c03a 	cmpne	r2,r2,zero
  81a69c:	1000071e 	bne	r2,zero,81a6bc <Read_Sector_Data_CRC+0xdc>
			result = true;
  81a6a0:	00800044 	movi	r2,1
  81a6a4:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
  81a6a8:	d0274f15 	stw	zero,-25284(gp)
			current_sector_index = sector_index + partition_offset;
  81a6ac:	e0fffd17 	ldw	r3,-12(fp)
  81a6b0:	e0bffe17 	ldw	r2,-8(fp)
  81a6b4:	1885883a 	add	r2,r3,r2
  81a6b8:	d0a75015 	stw	r2,-25280(gp)
		}
	}
	return result;
  81a6bc:	e0bffc17 	ldw	r2,-16(fp)
  81a6c0:	e0bfff15 	stw	r2,-4(fp)
  81a6c4:	e0bfff17 	ldw	r2,-4(fp)
}
  81a6c8:	e037883a 	mov	sp,fp
  81a6cc:	dfc00117 	ldw	ra,4(sp)
  81a6d0:	df000017 	ldw	fp,0(sp)
  81a6d4:	dec00204 	addi	sp,sp,8
  81a6d8:	f800283a 	ret

0081a6dc <Read_Sector_Data_Attempt_CRC>:

bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
  81a6dc:	defff804 	addi	sp,sp,-32
  81a6e0:	dfc00715 	stw	ra,28(sp)
  81a6e4:	df000615 	stw	fp,24(sp)
  81a6e8:	df000604 	addi	fp,sp,24
  81a6ec:	e13ffd15 	stw	r4,-12(fp)
  81a6f0:	e17ffe15 	stw	r5,-8(fp)
	int i;
	bool correct;
	const int attempts = 100;
  81a6f4:	00801904 	movi	r2,100
  81a6f8:	e0bffa15 	stw	r2,-24(fp)

	for (i = 0; i < attempts; i++) {
  81a6fc:	e03ffc15 	stw	zero,-16(fp)
  81a700:	00000d06 	br	81a738 <Read_Sector_Data_Attempt_CRC+0x5c>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
  81a704:	e13ffd17 	ldw	r4,-12(fp)
  81a708:	e17ffe17 	ldw	r5,-8(fp)
  81a70c:	081a5e00 	call	81a5e0 <Read_Sector_Data_CRC>
  81a710:	e0bffb15 	stw	r2,-20(fp)
		if (correct) {
  81a714:	e0bffb17 	ldw	r2,-20(fp)
  81a718:	1005003a 	cmpeq	r2,r2,zero
  81a71c:	1000031e 	bne	r2,zero,81a72c <Read_Sector_Data_Attempt_CRC+0x50>
			return true;
  81a720:	00800044 	movi	r2,1
  81a724:	e0bfff15 	stw	r2,-4(fp)
  81a728:	00000a06 	br	81a754 <Read_Sector_Data_Attempt_CRC+0x78>
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
  81a72c:	e0bffc17 	ldw	r2,-16(fp)
  81a730:	10800044 	addi	r2,r2,1
  81a734:	e0bffc15 	stw	r2,-16(fp)
  81a738:	e0fffc17 	ldw	r3,-16(fp)
  81a73c:	e0bffa17 	ldw	r2,-24(fp)
  81a740:	18bff016 	blt	r3,r2,81a704 <Read_Sector_Data_Attempt_CRC+0x28>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
  81a744:	e13ffd17 	ldw	r4,-12(fp)
  81a748:	e17ffe17 	ldw	r5,-8(fp)
  81a74c:	08162c40 	call	8162c4 <Read_Sector_Data>
  81a750:	e0bfff15 	stw	r2,-4(fp)
  81a754:	e0bfff17 	ldw	r2,-4(fp)
}
  81a758:	e037883a 	mov	sp,fp
  81a75c:	dfc00117 	ldw	ra,4(sp)
  81a760:	df000017 	ldw	fp,0(sp)
  81a764:	dec00204 	addi	sp,sp,8
  81a768:	f800283a 	ret

0081a76c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  81a76c:	defff404 	addi	sp,sp,-48
  81a770:	df000b15 	stw	fp,44(sp)
  81a774:	df000b04 	addi	fp,sp,44
  81a778:	e13ffb15 	stw	r4,-20(fp)
  81a77c:	e17ffc15 	stw	r5,-16(fp)
  81a780:	e1bffd15 	stw	r6,-12(fp)
  81a784:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  81a788:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81a78c:	008020b4 	movhi	r2,130
  81a790:	10bf7504 	addi	r2,r2,-556
  81a794:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  81a798:	1005003a 	cmpeq	r2,r2,zero
  81a79c:	1000411e 	bne	r2,zero,81a8a4 <alt_alarm_start+0x138>
  {
    if (alarm)
  81a7a0:	e0bffb17 	ldw	r2,-20(fp)
  81a7a4:	1005003a 	cmpeq	r2,r2,zero
  81a7a8:	10003b1e 	bne	r2,zero,81a898 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  81a7ac:	e0fffb17 	ldw	r3,-20(fp)
  81a7b0:	e0bffd17 	ldw	r2,-12(fp)
  81a7b4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  81a7b8:	e0fffb17 	ldw	r3,-20(fp)
  81a7bc:	e0bffe17 	ldw	r2,-8(fp)
  81a7c0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a7c4:	0005303a 	rdctl	r2,status
  81a7c8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a7cc:	e0fff817 	ldw	r3,-32(fp)
  81a7d0:	00bfff84 	movi	r2,-2
  81a7d4:	1884703a 	and	r2,r3,r2
  81a7d8:	1001703a 	wrctl	status,r2
  
  return context;
  81a7dc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  81a7e0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  81a7e4:	008020b4 	movhi	r2,130
  81a7e8:	10bf7604 	addi	r2,r2,-552
  81a7ec:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  81a7f0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  81a7f4:	e0fffc17 	ldw	r3,-16(fp)
  81a7f8:	e0bff917 	ldw	r2,-28(fp)
  81a7fc:	1885883a 	add	r2,r3,r2
  81a800:	10c00044 	addi	r3,r2,1
  81a804:	e0bffb17 	ldw	r2,-20(fp)
  81a808:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  81a80c:	e0bffb17 	ldw	r2,-20(fp)
  81a810:	10c00217 	ldw	r3,8(r2)
  81a814:	e0bff917 	ldw	r2,-28(fp)
  81a818:	1880042e 	bgeu	r3,r2,81a82c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  81a81c:	e0fffb17 	ldw	r3,-20(fp)
  81a820:	00800044 	movi	r2,1
  81a824:	18800405 	stb	r2,16(r3)
  81a828:	00000206 	br	81a834 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  81a82c:	e0bffb17 	ldw	r2,-20(fp)
  81a830:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  81a834:	e0fffb17 	ldw	r3,-20(fp)
  81a838:	008020b4 	movhi	r2,130
  81a83c:	10b84904 	addi	r2,r2,-7900
  81a840:	e0bff615 	stw	r2,-40(fp)
  81a844:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81a848:	e0fff717 	ldw	r3,-36(fp)
  81a84c:	e0bff617 	ldw	r2,-40(fp)
  81a850:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81a854:	e0bff617 	ldw	r2,-40(fp)
  81a858:	10c00017 	ldw	r3,0(r2)
  81a85c:	e0bff717 	ldw	r2,-36(fp)
  81a860:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81a864:	e0bff617 	ldw	r2,-40(fp)
  81a868:	10c00017 	ldw	r3,0(r2)
  81a86c:	e0bff717 	ldw	r2,-36(fp)
  81a870:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81a874:	e0fff617 	ldw	r3,-40(fp)
  81a878:	e0bff717 	ldw	r2,-36(fp)
  81a87c:	18800015 	stw	r2,0(r3)
  81a880:	e0bffa17 	ldw	r2,-24(fp)
  81a884:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a888:	e0bff517 	ldw	r2,-44(fp)
  81a88c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  81a890:	e03fff15 	stw	zero,-4(fp)
  81a894:	00000506 	br	81a8ac <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  81a898:	00bffa84 	movi	r2,-22
  81a89c:	e0bfff15 	stw	r2,-4(fp)
  81a8a0:	00000206 	br	81a8ac <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  81a8a4:	00bfde84 	movi	r2,-134
  81a8a8:	e0bfff15 	stw	r2,-4(fp)
  81a8ac:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  81a8b0:	e037883a 	mov	sp,fp
  81a8b4:	df000017 	ldw	fp,0(sp)
  81a8b8:	dec00104 	addi	sp,sp,4
  81a8bc:	f800283a 	ret

0081a8c0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  81a8c0:	defffa04 	addi	sp,sp,-24
  81a8c4:	dfc00515 	stw	ra,20(sp)
  81a8c8:	df000415 	stw	fp,16(sp)
  81a8cc:	df000404 	addi	fp,sp,16
  81a8d0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  81a8d4:	008000c4 	movi	r2,3
  81a8d8:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  81a8dc:	e0fffc17 	ldw	r3,-16(fp)
  81a8e0:	008003f4 	movhi	r2,15
  81a8e4:	10909004 	addi	r2,r2,16960
  81a8e8:	188b383a 	mul	r5,r3,r2
  81a8ec:	0100bef4 	movhi	r4,763
  81a8f0:	213c2004 	addi	r4,r4,-3968
  81a8f4:	08088700 	call	808870 <__udivsi3>
  81a8f8:	100b883a 	mov	r5,r2
  81a8fc:	01200034 	movhi	r4,32768
  81a900:	213fffc4 	addi	r4,r4,-1
  81a904:	08088700 	call	808870 <__udivsi3>
  81a908:	100b883a 	mov	r5,r2
  81a90c:	e13fff17 	ldw	r4,-4(fp)
  81a910:	08088700 	call	808870 <__udivsi3>
  81a914:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  81a918:	e0bffd17 	ldw	r2,-12(fp)
  81a91c:	1005003a 	cmpeq	r2,r2,zero
  81a920:	1000281e 	bne	r2,zero,81a9c4 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  81a924:	e03ffe15 	stw	zero,-8(fp)
  81a928:	00001606 	br	81a984 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  81a92c:	00a00034 	movhi	r2,32768
  81a930:	10bfffc4 	addi	r2,r2,-1
  81a934:	10bfffc4 	addi	r2,r2,-1
  81a938:	103ffe1e 	bne	r2,zero,81a934 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  81a93c:	e0fffc17 	ldw	r3,-16(fp)
  81a940:	008003f4 	movhi	r2,15
  81a944:	10909004 	addi	r2,r2,16960
  81a948:	188b383a 	mul	r5,r3,r2
  81a94c:	0100bef4 	movhi	r4,763
  81a950:	213c2004 	addi	r4,r4,-3968
  81a954:	08088700 	call	808870 <__udivsi3>
  81a958:	100b883a 	mov	r5,r2
  81a95c:	01200034 	movhi	r4,32768
  81a960:	213fffc4 	addi	r4,r4,-1
  81a964:	08088700 	call	808870 <__udivsi3>
  81a968:	1007883a 	mov	r3,r2
  81a96c:	e0bfff17 	ldw	r2,-4(fp)
  81a970:	10c5c83a 	sub	r2,r2,r3
  81a974:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  81a978:	e0bffe17 	ldw	r2,-8(fp)
  81a97c:	10800044 	addi	r2,r2,1
  81a980:	e0bffe15 	stw	r2,-8(fp)
  81a984:	e0fffe17 	ldw	r3,-8(fp)
  81a988:	e0bffd17 	ldw	r2,-12(fp)
  81a98c:	18bfe716 	blt	r3,r2,81a92c <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81a990:	e0fffc17 	ldw	r3,-16(fp)
  81a994:	008003f4 	movhi	r2,15
  81a998:	10909004 	addi	r2,r2,16960
  81a99c:	188b383a 	mul	r5,r3,r2
  81a9a0:	0100bef4 	movhi	r4,763
  81a9a4:	213c2004 	addi	r4,r4,-3968
  81a9a8:	08088700 	call	808870 <__udivsi3>
  81a9ac:	1007883a 	mov	r3,r2
  81a9b0:	e0bfff17 	ldw	r2,-4(fp)
  81a9b4:	1885383a 	mul	r2,r3,r2
  81a9b8:	10bfffc4 	addi	r2,r2,-1
  81a9bc:	103ffe1e 	bne	r2,zero,81a9b8 <alt_busy_sleep+0xf8>
  81a9c0:	00000c06 	br	81a9f4 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81a9c4:	e0fffc17 	ldw	r3,-16(fp)
  81a9c8:	008003f4 	movhi	r2,15
  81a9cc:	10909004 	addi	r2,r2,16960
  81a9d0:	188b383a 	mul	r5,r3,r2
  81a9d4:	0100bef4 	movhi	r4,763
  81a9d8:	213c2004 	addi	r4,r4,-3968
  81a9dc:	08088700 	call	808870 <__udivsi3>
  81a9e0:	1007883a 	mov	r3,r2
  81a9e4:	e0bfff17 	ldw	r2,-4(fp)
  81a9e8:	1885383a 	mul	r2,r3,r2
  81a9ec:	10bfffc4 	addi	r2,r2,-1
  81a9f0:	00bffe16 	blt	zero,r2,81a9ec <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  81a9f4:	0005883a 	mov	r2,zero
}
  81a9f8:	e037883a 	mov	sp,fp
  81a9fc:	dfc00117 	ldw	ra,4(sp)
  81aa00:	df000017 	ldw	fp,0(sp)
  81aa04:	dec00204 	addi	sp,sp,8
  81aa08:	f800283a 	ret

0081aa0c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  81aa0c:	defffe04 	addi	sp,sp,-8
  81aa10:	df000115 	stw	fp,4(sp)
  81aa14:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81aa18:	e03fff15 	stw	zero,-4(fp)
  81aa1c:	00000506 	br	81aa34 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  81aa20:	e0bfff17 	ldw	r2,-4(fp)
  81aa24:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81aa28:	e0bfff17 	ldw	r2,-4(fp)
  81aa2c:	10800804 	addi	r2,r2,32
  81aa30:	e0bfff15 	stw	r2,-4(fp)
  81aa34:	e0bfff17 	ldw	r2,-4(fp)
  81aa38:	10900030 	cmpltui	r2,r2,16384
  81aa3c:	103ff81e 	bne	r2,zero,81aa20 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  81aa40:	e037883a 	mov	sp,fp
  81aa44:	df000017 	ldw	fp,0(sp)
  81aa48:	dec00104 	addi	sp,sp,4
  81aa4c:	f800283a 	ret

0081aa50 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  81aa50:	defff904 	addi	sp,sp,-28
  81aa54:	dfc00615 	stw	ra,24(sp)
  81aa58:	df000515 	stw	fp,20(sp)
  81aa5c:	df000504 	addi	fp,sp,20
  81aa60:	e13ffd15 	stw	r4,-12(fp)
  81aa64:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  81aa68:	e0bffd17 	ldw	r2,-12(fp)
  81aa6c:	1005003a 	cmpeq	r2,r2,zero
  81aa70:	1000041e 	bne	r2,zero,81aa84 <alt_dev_llist_insert+0x34>
  81aa74:	e0bffd17 	ldw	r2,-12(fp)
  81aa78:	10800217 	ldw	r2,8(r2)
  81aa7c:	1004c03a 	cmpne	r2,r2,zero
  81aa80:	1000071e 	bne	r2,zero,81aaa0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  81aa84:	081ab040 	call	81ab04 <alt_get_errno>
  81aa88:	1007883a 	mov	r3,r2
  81aa8c:	00800584 	movi	r2,22
  81aa90:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  81aa94:	00bffa84 	movi	r2,-22
  81aa98:	e0bfff15 	stw	r2,-4(fp)
  81aa9c:	00001306 	br	81aaec <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  81aaa0:	e0fffd17 	ldw	r3,-12(fp)
  81aaa4:	e0bffe17 	ldw	r2,-8(fp)
  81aaa8:	e0bffb15 	stw	r2,-20(fp)
  81aaac:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81aab0:	e0fffc17 	ldw	r3,-16(fp)
  81aab4:	e0bffb17 	ldw	r2,-20(fp)
  81aab8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81aabc:	e0bffb17 	ldw	r2,-20(fp)
  81aac0:	10c00017 	ldw	r3,0(r2)
  81aac4:	e0bffc17 	ldw	r2,-16(fp)
  81aac8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81aacc:	e0bffb17 	ldw	r2,-20(fp)
  81aad0:	10c00017 	ldw	r3,0(r2)
  81aad4:	e0bffc17 	ldw	r2,-16(fp)
  81aad8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81aadc:	e0fffb17 	ldw	r3,-20(fp)
  81aae0:	e0bffc17 	ldw	r2,-16(fp)
  81aae4:	18800015 	stw	r2,0(r3)

  return 0;  
  81aae8:	e03fff15 	stw	zero,-4(fp)
  81aaec:	e0bfff17 	ldw	r2,-4(fp)
}
  81aaf0:	e037883a 	mov	sp,fp
  81aaf4:	dfc00117 	ldw	ra,4(sp)
  81aaf8:	df000017 	ldw	fp,0(sp)
  81aafc:	dec00204 	addi	sp,sp,8
  81ab00:	f800283a 	ret

0081ab04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81ab04:	defffd04 	addi	sp,sp,-12
  81ab08:	dfc00215 	stw	ra,8(sp)
  81ab0c:	df000115 	stw	fp,4(sp)
  81ab10:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81ab14:	008020b4 	movhi	r2,130
  81ab18:	10b84604 	addi	r2,r2,-7912
  81ab1c:	10800017 	ldw	r2,0(r2)
  81ab20:	1005003a 	cmpeq	r2,r2,zero
  81ab24:	1000061e 	bne	r2,zero,81ab40 <alt_get_errno+0x3c>
  81ab28:	008020b4 	movhi	r2,130
  81ab2c:	10b84604 	addi	r2,r2,-7912
  81ab30:	10800017 	ldw	r2,0(r2)
  81ab34:	103ee83a 	callr	r2
  81ab38:	e0bfff15 	stw	r2,-4(fp)
  81ab3c:	00000306 	br	81ab4c <alt_get_errno+0x48>
  81ab40:	008020b4 	movhi	r2,130
  81ab44:	10bf6904 	addi	r2,r2,-604
  81ab48:	e0bfff15 	stw	r2,-4(fp)
  81ab4c:	e0bfff17 	ldw	r2,-4(fp)
}
  81ab50:	e037883a 	mov	sp,fp
  81ab54:	dfc00117 	ldw	ra,4(sp)
  81ab58:	df000017 	ldw	fp,0(sp)
  81ab5c:	dec00204 	addi	sp,sp,8
  81ab60:	f800283a 	ret

0081ab64 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  81ab64:	defffd04 	addi	sp,sp,-12
  81ab68:	dfc00215 	stw	ra,8(sp)
  81ab6c:	df000115 	stw	fp,4(sp)
  81ab70:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81ab74:	00bfff04 	movi	r2,-4
  81ab78:	00c020b4 	movhi	r3,130
  81ab7c:	18edfc04 	addi	r3,r3,-18448
  81ab80:	1885883a 	add	r2,r3,r2
  81ab84:	e0bfff15 	stw	r2,-4(fp)
  81ab88:	00000606 	br	81aba4 <_do_ctors+0x40>
        (*ctor) (); 
  81ab8c:	e0bfff17 	ldw	r2,-4(fp)
  81ab90:	10800017 	ldw	r2,0(r2)
  81ab94:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81ab98:	e0bfff17 	ldw	r2,-4(fp)
  81ab9c:	10bfff04 	addi	r2,r2,-4
  81aba0:	e0bfff15 	stw	r2,-4(fp)
  81aba4:	e0ffff17 	ldw	r3,-4(fp)
  81aba8:	008020b4 	movhi	r2,130
  81abac:	10adfb04 	addi	r2,r2,-18452
  81abb0:	18bff62e 	bgeu	r3,r2,81ab8c <_do_ctors+0x28>
        (*ctor) (); 
}
  81abb4:	e037883a 	mov	sp,fp
  81abb8:	dfc00117 	ldw	ra,4(sp)
  81abbc:	df000017 	ldw	fp,0(sp)
  81abc0:	dec00204 	addi	sp,sp,8
  81abc4:	f800283a 	ret

0081abc8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  81abc8:	defffd04 	addi	sp,sp,-12
  81abcc:	dfc00215 	stw	ra,8(sp)
  81abd0:	df000115 	stw	fp,4(sp)
  81abd4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81abd8:	00bfff04 	movi	r2,-4
  81abdc:	00c020b4 	movhi	r3,130
  81abe0:	18edfc04 	addi	r3,r3,-18448
  81abe4:	1885883a 	add	r2,r3,r2
  81abe8:	e0bfff15 	stw	r2,-4(fp)
  81abec:	00000606 	br	81ac08 <_do_dtors+0x40>
        (*dtor) (); 
  81abf0:	e0bfff17 	ldw	r2,-4(fp)
  81abf4:	10800017 	ldw	r2,0(r2)
  81abf8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81abfc:	e0bfff17 	ldw	r2,-4(fp)
  81ac00:	10bfff04 	addi	r2,r2,-4
  81ac04:	e0bfff15 	stw	r2,-4(fp)
  81ac08:	e0ffff17 	ldw	r3,-4(fp)
  81ac0c:	008020b4 	movhi	r2,130
  81ac10:	10adfc04 	addi	r2,r2,-18448
  81ac14:	18bff62e 	bgeu	r3,r2,81abf0 <_do_dtors+0x28>
        (*dtor) (); 
}
  81ac18:	e037883a 	mov	sp,fp
  81ac1c:	dfc00117 	ldw	ra,4(sp)
  81ac20:	df000017 	ldw	fp,0(sp)
  81ac24:	dec00204 	addi	sp,sp,8
  81ac28:	f800283a 	ret

0081ac2c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81ac2c:	defff904 	addi	sp,sp,-28
  81ac30:	dfc00615 	stw	ra,24(sp)
  81ac34:	df000515 	stw	fp,20(sp)
  81ac38:	df000504 	addi	fp,sp,20
  81ac3c:	e13ffd15 	stw	r4,-12(fp)
  81ac40:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  81ac44:	e0bffe17 	ldw	r2,-8(fp)
  81ac48:	10800017 	ldw	r2,0(r2)
  81ac4c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81ac50:	e13ffd17 	ldw	r4,-12(fp)
  81ac54:	0809a7c0 	call	809a7c <strlen>
  81ac58:	10800044 	addi	r2,r2,1
  81ac5c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81ac60:	00000d06 	br	81ac98 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  81ac64:	e0bffc17 	ldw	r2,-16(fp)
  81ac68:	11000217 	ldw	r4,8(r2)
  81ac6c:	e1bffb17 	ldw	r6,-20(fp)
  81ac70:	e17ffd17 	ldw	r5,-12(fp)
  81ac74:	081b3c40 	call	81b3c4 <memcmp>
  81ac78:	1004c03a 	cmpne	r2,r2,zero
  81ac7c:	1000031e 	bne	r2,zero,81ac8c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  81ac80:	e0bffc17 	ldw	r2,-16(fp)
  81ac84:	e0bfff15 	stw	r2,-4(fp)
  81ac88:	00000706 	br	81aca8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  81ac8c:	e0bffc17 	ldw	r2,-16(fp)
  81ac90:	10800017 	ldw	r2,0(r2)
  81ac94:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81ac98:	e0fffe17 	ldw	r3,-8(fp)
  81ac9c:	e0bffc17 	ldw	r2,-16(fp)
  81aca0:	10fff01e 	bne	r2,r3,81ac64 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  81aca4:	e03fff15 	stw	zero,-4(fp)
  81aca8:	e0bfff17 	ldw	r2,-4(fp)
}
  81acac:	e037883a 	mov	sp,fp
  81acb0:	dfc00117 	ldw	ra,4(sp)
  81acb4:	df000017 	ldw	fp,0(sp)
  81acb8:	dec00204 	addi	sp,sp,8
  81acbc:	f800283a 	ret

0081acc0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  81acc0:	defffe04 	addi	sp,sp,-8
  81acc4:	dfc00115 	stw	ra,4(sp)
  81acc8:	df000015 	stw	fp,0(sp)
  81accc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  81acd0:	0009883a 	mov	r4,zero
  81acd4:	01440004 	movi	r5,4096
  81acd8:	081b2e80 	call	81b2e8 <alt_icache_flush>
#endif
}
  81acdc:	e037883a 	mov	sp,fp
  81ace0:	dfc00117 	ldw	ra,4(sp)
  81ace4:	df000017 	ldw	fp,0(sp)
  81ace8:	dec00204 	addi	sp,sp,8
  81acec:	f800283a 	ret

0081acf0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  81acf0:	defff904 	addi	sp,sp,-28
  81acf4:	dfc00615 	stw	ra,24(sp)
  81acf8:	df000515 	stw	fp,20(sp)
  81acfc:	df000504 	addi	fp,sp,20
  81ad00:	e13ffc15 	stw	r4,-16(fp)
  81ad04:	e17ffd15 	stw	r5,-12(fp)
  81ad08:	e1bffe15 	stw	r6,-8(fp)
  81ad0c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  81ad10:	e13ffd17 	ldw	r4,-12(fp)
  81ad14:	e17ffe17 	ldw	r5,-8(fp)
  81ad18:	e1bfff17 	ldw	r6,-4(fp)
  81ad1c:	081af080 	call	81af08 <open>
  81ad20:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  81ad24:	e0bffb17 	ldw	r2,-20(fp)
  81ad28:	1004803a 	cmplt	r2,r2,zero
  81ad2c:	10001c1e 	bne	r2,zero,81ada0 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  81ad30:	e0bffb17 	ldw	r2,-20(fp)
  81ad34:	00c020b4 	movhi	r3,130
  81ad38:	18f36804 	addi	r3,r3,-12896
  81ad3c:	10800324 	muli	r2,r2,12
  81ad40:	10c5883a 	add	r2,r2,r3
  81ad44:	10c00017 	ldw	r3,0(r2)
  81ad48:	e0bffc17 	ldw	r2,-16(fp)
  81ad4c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  81ad50:	e0bffb17 	ldw	r2,-20(fp)
  81ad54:	00c020b4 	movhi	r3,130
  81ad58:	18f36804 	addi	r3,r3,-12896
  81ad5c:	10800324 	muli	r2,r2,12
  81ad60:	10c5883a 	add	r2,r2,r3
  81ad64:	10800104 	addi	r2,r2,4
  81ad68:	10c00017 	ldw	r3,0(r2)
  81ad6c:	e0bffc17 	ldw	r2,-16(fp)
  81ad70:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81ad74:	e0bffb17 	ldw	r2,-20(fp)
  81ad78:	00c020b4 	movhi	r3,130
  81ad7c:	18f36804 	addi	r3,r3,-12896
  81ad80:	10800324 	muli	r2,r2,12
  81ad84:	10c5883a 	add	r2,r2,r3
  81ad88:	10800204 	addi	r2,r2,8
  81ad8c:	10c00017 	ldw	r3,0(r2)
  81ad90:	e0bffc17 	ldw	r2,-16(fp)
  81ad94:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81ad98:	e13ffb17 	ldw	r4,-20(fp)
  81ad9c:	0811f1c0 	call	811f1c <alt_release_fd>
  }
} 
  81ada0:	e037883a 	mov	sp,fp
  81ada4:	dfc00117 	ldw	ra,4(sp)
  81ada8:	df000017 	ldw	fp,0(sp)
  81adac:	dec00204 	addi	sp,sp,8
  81adb0:	f800283a 	ret

0081adb4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81adb4:	defffb04 	addi	sp,sp,-20
  81adb8:	dfc00415 	stw	ra,16(sp)
  81adbc:	df000315 	stw	fp,12(sp)
  81adc0:	df000304 	addi	fp,sp,12
  81adc4:	e13ffd15 	stw	r4,-12(fp)
  81adc8:	e17ffe15 	stw	r5,-8(fp)
  81adcc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81add0:	010020b4 	movhi	r4,130
  81add4:	21336b04 	addi	r4,r4,-12884
  81add8:	e17ffd17 	ldw	r5,-12(fp)
  81addc:	01800044 	movi	r6,1
  81ade0:	01c07fc4 	movi	r7,511
  81ade4:	081acf00 	call	81acf0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  81ade8:	010020b4 	movhi	r4,130
  81adec:	21336804 	addi	r4,r4,-12896
  81adf0:	e17ffe17 	ldw	r5,-8(fp)
  81adf4:	000d883a 	mov	r6,zero
  81adf8:	01c07fc4 	movi	r7,511
  81adfc:	081acf00 	call	81acf0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81ae00:	010020b4 	movhi	r4,130
  81ae04:	21336e04 	addi	r4,r4,-12872
  81ae08:	e17fff17 	ldw	r5,-4(fp)
  81ae0c:	01800044 	movi	r6,1
  81ae10:	01c07fc4 	movi	r7,511
  81ae14:	081acf00 	call	81acf0 <alt_open_fd>
}  
  81ae18:	e037883a 	mov	sp,fp
  81ae1c:	dfc00117 	ldw	ra,4(sp)
  81ae20:	df000017 	ldw	fp,0(sp)
  81ae24:	dec00204 	addi	sp,sp,8
  81ae28:	f800283a 	ret

0081ae2c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  81ae2c:	defffc04 	addi	sp,sp,-16
  81ae30:	df000315 	stw	fp,12(sp)
  81ae34:	df000304 	addi	fp,sp,12
  81ae38:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  81ae3c:	e0bffe17 	ldw	r2,-8(fp)
  81ae40:	10800217 	ldw	r2,8(r2)
  81ae44:	10d00034 	orhi	r3,r2,16384
  81ae48:	e0bffe17 	ldw	r2,-8(fp)
  81ae4c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81ae50:	e03ffd15 	stw	zero,-12(fp)
  81ae54:	00002006 	br	81aed8 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81ae58:	e0bffd17 	ldw	r2,-12(fp)
  81ae5c:	00c020b4 	movhi	r3,130
  81ae60:	18f36804 	addi	r3,r3,-12896
  81ae64:	10800324 	muli	r2,r2,12
  81ae68:	10c5883a 	add	r2,r2,r3
  81ae6c:	10c00017 	ldw	r3,0(r2)
  81ae70:	e0bffe17 	ldw	r2,-8(fp)
  81ae74:	10800017 	ldw	r2,0(r2)
  81ae78:	1880141e 	bne	r3,r2,81aecc <alt_file_locked+0xa0>
  81ae7c:	e0bffd17 	ldw	r2,-12(fp)
  81ae80:	00c020b4 	movhi	r3,130
  81ae84:	18f36804 	addi	r3,r3,-12896
  81ae88:	10800324 	muli	r2,r2,12
  81ae8c:	10c5883a 	add	r2,r2,r3
  81ae90:	10800204 	addi	r2,r2,8
  81ae94:	10800017 	ldw	r2,0(r2)
  81ae98:	1004403a 	cmpge	r2,r2,zero
  81ae9c:	10000b1e 	bne	r2,zero,81aecc <alt_file_locked+0xa0>
  81aea0:	e0bffd17 	ldw	r2,-12(fp)
  81aea4:	10800324 	muli	r2,r2,12
  81aea8:	1007883a 	mov	r3,r2
  81aeac:	008020b4 	movhi	r2,130
  81aeb0:	10b36804 	addi	r2,r2,-12896
  81aeb4:	1887883a 	add	r3,r3,r2
  81aeb8:	e0bffe17 	ldw	r2,-8(fp)
  81aebc:	18800326 	beq	r3,r2,81aecc <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81aec0:	00bffcc4 	movi	r2,-13
  81aec4:	e0bfff15 	stw	r2,-4(fp)
  81aec8:	00000a06 	br	81aef4 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81aecc:	e0bffd17 	ldw	r2,-12(fp)
  81aed0:	10800044 	addi	r2,r2,1
  81aed4:	e0bffd15 	stw	r2,-12(fp)
  81aed8:	008020b4 	movhi	r2,130
  81aedc:	10b84504 	addi	r2,r2,-7916
  81aee0:	10800017 	ldw	r2,0(r2)
  81aee4:	1007883a 	mov	r3,r2
  81aee8:	e0bffd17 	ldw	r2,-12(fp)
  81aeec:	18bfda2e 	bgeu	r3,r2,81ae58 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  81aef0:	e03fff15 	stw	zero,-4(fp)
  81aef4:	e0bfff17 	ldw	r2,-4(fp)
}
  81aef8:	e037883a 	mov	sp,fp
  81aefc:	df000017 	ldw	fp,0(sp)
  81af00:	dec00104 	addi	sp,sp,4
  81af04:	f800283a 	ret

0081af08 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  81af08:	defff404 	addi	sp,sp,-48
  81af0c:	dfc00b15 	stw	ra,44(sp)
  81af10:	df000a15 	stw	fp,40(sp)
  81af14:	df000a04 	addi	fp,sp,40
  81af18:	e13ffb15 	stw	r4,-20(fp)
  81af1c:	e17ffc15 	stw	r5,-16(fp)
  81af20:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81af24:	00bfffc4 	movi	r2,-1
  81af28:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  81af2c:	00bffb44 	movi	r2,-19
  81af30:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  81af34:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  81af38:	e13ffb17 	ldw	r4,-20(fp)
  81af3c:	014020b4 	movhi	r5,130
  81af40:	29784304 	addi	r5,r5,-7924
  81af44:	081ac2c0 	call	81ac2c <alt_find_dev>
  81af48:	e0bffa15 	stw	r2,-24(fp)
  81af4c:	e0bffa17 	ldw	r2,-24(fp)
  81af50:	1004c03a 	cmpne	r2,r2,zero
  81af54:	1000051e 	bne	r2,zero,81af6c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  81af58:	e13ffb17 	ldw	r4,-20(fp)
  81af5c:	081b1100 	call	81b110 <alt_find_file>
  81af60:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  81af64:	00800044 	movi	r2,1
  81af68:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  81af6c:	e0bffa17 	ldw	r2,-24(fp)
  81af70:	1005003a 	cmpeq	r2,r2,zero
  81af74:	1000301e 	bne	r2,zero,81b038 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  81af78:	e13ffa17 	ldw	r4,-24(fp)
  81af7c:	081b2300 	call	81b230 <alt_get_fd>
  81af80:	e0bff815 	stw	r2,-32(fp)
  81af84:	e0bff817 	ldw	r2,-32(fp)
  81af88:	1004403a 	cmpge	r2,r2,zero
  81af8c:	1000031e 	bne	r2,zero,81af9c <open+0x94>
    {
      status = index;
  81af90:	e0bff817 	ldw	r2,-32(fp)
  81af94:	e0bff715 	stw	r2,-36(fp)
  81af98:	00002906 	br	81b040 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  81af9c:	e0bff817 	ldw	r2,-32(fp)
  81afa0:	10800324 	muli	r2,r2,12
  81afa4:	1007883a 	mov	r3,r2
  81afa8:	008020b4 	movhi	r2,130
  81afac:	10b36804 	addi	r2,r2,-12896
  81afb0:	1885883a 	add	r2,r3,r2
  81afb4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  81afb8:	e0fffc17 	ldw	r3,-16(fp)
  81afbc:	00900034 	movhi	r2,16384
  81afc0:	10bfffc4 	addi	r2,r2,-1
  81afc4:	1886703a 	and	r3,r3,r2
  81afc8:	e0bff917 	ldw	r2,-28(fp)
  81afcc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81afd0:	e0bff617 	ldw	r2,-40(fp)
  81afd4:	1004c03a 	cmpne	r2,r2,zero
  81afd8:	1000061e 	bne	r2,zero,81aff4 <open+0xec>
  81afdc:	e13ff917 	ldw	r4,-28(fp)
  81afe0:	081ae2c0 	call	81ae2c <alt_file_locked>
  81afe4:	e0bff715 	stw	r2,-36(fp)
  81afe8:	e0bff717 	ldw	r2,-36(fp)
  81afec:	1004803a 	cmplt	r2,r2,zero
  81aff0:	1000131e 	bne	r2,zero,81b040 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  81aff4:	e0bffa17 	ldw	r2,-24(fp)
  81aff8:	10800317 	ldw	r2,12(r2)
  81affc:	1005003a 	cmpeq	r2,r2,zero
  81b000:	1000091e 	bne	r2,zero,81b028 <open+0x120>
  81b004:	e0bffa17 	ldw	r2,-24(fp)
  81b008:	10800317 	ldw	r2,12(r2)
  81b00c:	e13ff917 	ldw	r4,-28(fp)
  81b010:	e17ffb17 	ldw	r5,-20(fp)
  81b014:	e1bffc17 	ldw	r6,-16(fp)
  81b018:	e1fffd17 	ldw	r7,-12(fp)
  81b01c:	103ee83a 	callr	r2
  81b020:	e0bfff15 	stw	r2,-4(fp)
  81b024:	00000106 	br	81b02c <open+0x124>
  81b028:	e03fff15 	stw	zero,-4(fp)
  81b02c:	e0bfff17 	ldw	r2,-4(fp)
  81b030:	e0bff715 	stw	r2,-36(fp)
  81b034:	00000206 	br	81b040 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81b038:	00bffb44 	movi	r2,-19
  81b03c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81b040:	e0bff717 	ldw	r2,-36(fp)
  81b044:	1004403a 	cmpge	r2,r2,zero
  81b048:	1000091e 	bne	r2,zero,81b070 <open+0x168>
  {
    alt_release_fd (index);  
  81b04c:	e13ff817 	ldw	r4,-32(fp)
  81b050:	0811f1c0 	call	811f1c <alt_release_fd>
    ALT_ERRNO = -status;
  81b054:	081b0900 	call	81b090 <alt_get_errno>
  81b058:	e0fff717 	ldw	r3,-36(fp)
  81b05c:	00c7c83a 	sub	r3,zero,r3
  81b060:	10c00015 	stw	r3,0(r2)
    return -1;
  81b064:	00bfffc4 	movi	r2,-1
  81b068:	e0bffe15 	stw	r2,-8(fp)
  81b06c:	00000206 	br	81b078 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  81b070:	e0bff817 	ldw	r2,-32(fp)
  81b074:	e0bffe15 	stw	r2,-8(fp)
  81b078:	e0bffe17 	ldw	r2,-8(fp)
}
  81b07c:	e037883a 	mov	sp,fp
  81b080:	dfc00117 	ldw	ra,4(sp)
  81b084:	df000017 	ldw	fp,0(sp)
  81b088:	dec00204 	addi	sp,sp,8
  81b08c:	f800283a 	ret

0081b090 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81b090:	defffd04 	addi	sp,sp,-12
  81b094:	dfc00215 	stw	ra,8(sp)
  81b098:	df000115 	stw	fp,4(sp)
  81b09c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81b0a0:	008020b4 	movhi	r2,130
  81b0a4:	10b84604 	addi	r2,r2,-7912
  81b0a8:	10800017 	ldw	r2,0(r2)
  81b0ac:	1005003a 	cmpeq	r2,r2,zero
  81b0b0:	1000061e 	bne	r2,zero,81b0cc <alt_get_errno+0x3c>
  81b0b4:	008020b4 	movhi	r2,130
  81b0b8:	10b84604 	addi	r2,r2,-7912
  81b0bc:	10800017 	ldw	r2,0(r2)
  81b0c0:	103ee83a 	callr	r2
  81b0c4:	e0bfff15 	stw	r2,-4(fp)
  81b0c8:	00000306 	br	81b0d8 <alt_get_errno+0x48>
  81b0cc:	008020b4 	movhi	r2,130
  81b0d0:	10bf6904 	addi	r2,r2,-604
  81b0d4:	e0bfff15 	stw	r2,-4(fp)
  81b0d8:	e0bfff17 	ldw	r2,-4(fp)
}
  81b0dc:	e037883a 	mov	sp,fp
  81b0e0:	dfc00117 	ldw	ra,4(sp)
  81b0e4:	df000017 	ldw	fp,0(sp)
  81b0e8:	dec00204 	addi	sp,sp,8
  81b0ec:	f800283a 	ret

0081b0f0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  81b0f0:	deffff04 	addi	sp,sp,-4
  81b0f4:	df000015 	stw	fp,0(sp)
  81b0f8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81b0fc:	000170fa 	wrctl	ienable,zero
}
  81b100:	e037883a 	mov	sp,fp
  81b104:	df000017 	ldw	fp,0(sp)
  81b108:	dec00104 	addi	sp,sp,4
  81b10c:	f800283a 	ret

0081b110 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81b110:	defffa04 	addi	sp,sp,-24
  81b114:	dfc00515 	stw	ra,20(sp)
  81b118:	df000415 	stw	fp,16(sp)
  81b11c:	df000404 	addi	fp,sp,16
  81b120:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81b124:	008020b4 	movhi	r2,130
  81b128:	10b84104 	addi	r2,r2,-7932
  81b12c:	10800017 	ldw	r2,0(r2)
  81b130:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81b134:	00003306 	br	81b204 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  81b138:	e0bffd17 	ldw	r2,-12(fp)
  81b13c:	11000217 	ldw	r4,8(r2)
  81b140:	0809a7c0 	call	809a7c <strlen>
  81b144:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  81b148:	e0bffd17 	ldw	r2,-12(fp)
  81b14c:	10c00217 	ldw	r3,8(r2)
  81b150:	e0bffc17 	ldw	r2,-16(fp)
  81b154:	1885883a 	add	r2,r3,r2
  81b158:	10bfffc4 	addi	r2,r2,-1
  81b15c:	10800003 	ldbu	r2,0(r2)
  81b160:	10803fcc 	andi	r2,r2,255
  81b164:	1080201c 	xori	r2,r2,128
  81b168:	10bfe004 	addi	r2,r2,-128
  81b16c:	10800bd8 	cmpnei	r2,r2,47
  81b170:	1000031e 	bne	r2,zero,81b180 <alt_find_file+0x70>
    {
      len -= 1;
  81b174:	e0bffc17 	ldw	r2,-16(fp)
  81b178:	10bfffc4 	addi	r2,r2,-1
  81b17c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81b180:	e0bffc17 	ldw	r2,-16(fp)
  81b184:	1007883a 	mov	r3,r2
  81b188:	e0bffe17 	ldw	r2,-8(fp)
  81b18c:	1885883a 	add	r2,r3,r2
  81b190:	10800003 	ldbu	r2,0(r2)
  81b194:	10803fcc 	andi	r2,r2,255
  81b198:	1080201c 	xori	r2,r2,128
  81b19c:	10bfe004 	addi	r2,r2,-128
  81b1a0:	10800be0 	cmpeqi	r2,r2,47
  81b1a4:	10000a1e 	bne	r2,zero,81b1d0 <alt_find_file+0xc0>
  81b1a8:	e0bffc17 	ldw	r2,-16(fp)
  81b1ac:	1007883a 	mov	r3,r2
  81b1b0:	e0bffe17 	ldw	r2,-8(fp)
  81b1b4:	1885883a 	add	r2,r3,r2
  81b1b8:	10800003 	ldbu	r2,0(r2)
  81b1bc:	10803fcc 	andi	r2,r2,255
  81b1c0:	1080201c 	xori	r2,r2,128
  81b1c4:	10bfe004 	addi	r2,r2,-128
  81b1c8:	1004c03a 	cmpne	r2,r2,zero
  81b1cc:	10000a1e 	bne	r2,zero,81b1f8 <alt_find_file+0xe8>
  81b1d0:	e0bffd17 	ldw	r2,-12(fp)
  81b1d4:	11000217 	ldw	r4,8(r2)
  81b1d8:	e1bffc17 	ldw	r6,-16(fp)
  81b1dc:	e17ffe17 	ldw	r5,-8(fp)
  81b1e0:	081b3c40 	call	81b3c4 <memcmp>
  81b1e4:	1004c03a 	cmpne	r2,r2,zero
  81b1e8:	1000031e 	bne	r2,zero,81b1f8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  81b1ec:	e0bffd17 	ldw	r2,-12(fp)
  81b1f0:	e0bfff15 	stw	r2,-4(fp)
  81b1f4:	00000806 	br	81b218 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  81b1f8:	e0bffd17 	ldw	r2,-12(fp)
  81b1fc:	10800017 	ldw	r2,0(r2)
  81b200:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81b204:	00c020b4 	movhi	r3,130
  81b208:	18f84104 	addi	r3,r3,-7932
  81b20c:	e0bffd17 	ldw	r2,-12(fp)
  81b210:	10ffc91e 	bne	r2,r3,81b138 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  81b214:	e03fff15 	stw	zero,-4(fp)
  81b218:	e0bfff17 	ldw	r2,-4(fp)
}
  81b21c:	e037883a 	mov	sp,fp
  81b220:	dfc00117 	ldw	ra,4(sp)
  81b224:	df000017 	ldw	fp,0(sp)
  81b228:	dec00204 	addi	sp,sp,8
  81b22c:	f800283a 	ret

0081b230 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81b230:	defffc04 	addi	sp,sp,-16
  81b234:	df000315 	stw	fp,12(sp)
  81b238:	df000304 	addi	fp,sp,12
  81b23c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81b240:	00bffa04 	movi	r2,-24
  81b244:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81b248:	e03ffe15 	stw	zero,-8(fp)
  81b24c:	00001e06 	br	81b2c8 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  81b250:	e0bffe17 	ldw	r2,-8(fp)
  81b254:	00c020b4 	movhi	r3,130
  81b258:	18f36804 	addi	r3,r3,-12896
  81b25c:	10800324 	muli	r2,r2,12
  81b260:	10c5883a 	add	r2,r2,r3
  81b264:	10800017 	ldw	r2,0(r2)
  81b268:	1004c03a 	cmpne	r2,r2,zero
  81b26c:	1000131e 	bne	r2,zero,81b2bc <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  81b270:	e0bffe17 	ldw	r2,-8(fp)
  81b274:	00c020b4 	movhi	r3,130
  81b278:	18f36804 	addi	r3,r3,-12896
  81b27c:	10800324 	muli	r2,r2,12
  81b280:	10c7883a 	add	r3,r2,r3
  81b284:	e0bfff17 	ldw	r2,-4(fp)
  81b288:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  81b28c:	008020b4 	movhi	r2,130
  81b290:	10b84504 	addi	r2,r2,-7916
  81b294:	10c00017 	ldw	r3,0(r2)
  81b298:	e0bffe17 	ldw	r2,-8(fp)
  81b29c:	1880040e 	bge	r3,r2,81b2b0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  81b2a0:	00c020b4 	movhi	r3,130
  81b2a4:	18f84504 	addi	r3,r3,-7916
  81b2a8:	e0bffe17 	ldw	r2,-8(fp)
  81b2ac:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  81b2b0:	e0bffe17 	ldw	r2,-8(fp)
  81b2b4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  81b2b8:	00000606 	br	81b2d4 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81b2bc:	e0bffe17 	ldw	r2,-8(fp)
  81b2c0:	10800044 	addi	r2,r2,1
  81b2c4:	e0bffe15 	stw	r2,-8(fp)
  81b2c8:	e0bffe17 	ldw	r2,-8(fp)
  81b2cc:	10800810 	cmplti	r2,r2,32
  81b2d0:	103fdf1e 	bne	r2,zero,81b250 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  81b2d4:	e0bffd17 	ldw	r2,-12(fp)
}
  81b2d8:	e037883a 	mov	sp,fp
  81b2dc:	df000017 	ldw	fp,0(sp)
  81b2e0:	dec00104 	addi	sp,sp,4
  81b2e4:	f800283a 	ret

0081b2e8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  81b2e8:	defffb04 	addi	sp,sp,-20
  81b2ec:	df000415 	stw	fp,16(sp)
  81b2f0:	df000404 	addi	fp,sp,16
  81b2f4:	e13ffe15 	stw	r4,-8(fp)
  81b2f8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  81b2fc:	e0bfff17 	ldw	r2,-4(fp)
  81b300:	10840070 	cmpltui	r2,r2,4097
  81b304:	1000021e 	bne	r2,zero,81b310 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  81b308:	00840004 	movi	r2,4096
  81b30c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  81b310:	e0fffe17 	ldw	r3,-8(fp)
  81b314:	e0bfff17 	ldw	r2,-4(fp)
  81b318:	1885883a 	add	r2,r3,r2
  81b31c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81b320:	e0bffe17 	ldw	r2,-8(fp)
  81b324:	e0bffd15 	stw	r2,-12(fp)
  81b328:	00000506 	br	81b340 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  81b32c:	e0bffd17 	ldw	r2,-12(fp)
  81b330:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81b334:	e0bffd17 	ldw	r2,-12(fp)
  81b338:	10800804 	addi	r2,r2,32
  81b33c:	e0bffd15 	stw	r2,-12(fp)
  81b340:	e0fffd17 	ldw	r3,-12(fp)
  81b344:	e0bffc17 	ldw	r2,-16(fp)
  81b348:	18bff836 	bltu	r3,r2,81b32c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  81b34c:	e0bffe17 	ldw	r2,-8(fp)
  81b350:	108007cc 	andi	r2,r2,31
  81b354:	1005003a 	cmpeq	r2,r2,zero
  81b358:	1000021e 	bne	r2,zero,81b364 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  81b35c:	e0bffd17 	ldw	r2,-12(fp)
  81b360:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  81b364:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  81b368:	e037883a 	mov	sp,fp
  81b36c:	df000017 	ldw	fp,0(sp)
  81b370:	dec00104 	addi	sp,sp,4
  81b374:	f800283a 	ret

0081b378 <atexit>:
  81b378:	200b883a 	mov	r5,r4
  81b37c:	000d883a 	mov	r6,zero
  81b380:	0009883a 	mov	r4,zero
  81b384:	000f883a 	mov	r7,zero
  81b388:	081b4381 	jmpi	81b438 <__register_exitproc>

0081b38c <exit>:
  81b38c:	defffe04 	addi	sp,sp,-8
  81b390:	000b883a 	mov	r5,zero
  81b394:	dc000015 	stw	r16,0(sp)
  81b398:	dfc00115 	stw	ra,4(sp)
  81b39c:	2021883a 	mov	r16,r4
  81b3a0:	081b5700 	call	81b570 <__call_exitprocs>
  81b3a4:	008020b4 	movhi	r2,130
  81b3a8:	10b83c04 	addi	r2,r2,-7952
  81b3ac:	11000017 	ldw	r4,0(r2)
  81b3b0:	20800f17 	ldw	r2,60(r4)
  81b3b4:	10000126 	beq	r2,zero,81b3bc <exit+0x30>
  81b3b8:	103ee83a 	callr	r2
  81b3bc:	8009883a 	mov	r4,r16
  81b3c0:	081b7600 	call	81b760 <_exit>

0081b3c4 <memcmp>:
  81b3c4:	00c000c4 	movi	r3,3
  81b3c8:	1980032e 	bgeu	r3,r6,81b3d8 <memcmp+0x14>
  81b3cc:	2144b03a 	or	r2,r4,r5
  81b3d0:	10c4703a 	and	r2,r2,r3
  81b3d4:	10000f26 	beq	r2,zero,81b414 <memcmp+0x50>
  81b3d8:	31ffffc4 	addi	r7,r6,-1
  81b3dc:	3000061e 	bne	r6,zero,81b3f8 <memcmp+0x34>
  81b3e0:	00000a06 	br	81b40c <memcmp+0x48>
  81b3e4:	39ffffc4 	addi	r7,r7,-1
  81b3e8:	00bfffc4 	movi	r2,-1
  81b3ec:	21000044 	addi	r4,r4,1
  81b3f0:	29400044 	addi	r5,r5,1
  81b3f4:	38800526 	beq	r7,r2,81b40c <memcmp+0x48>
  81b3f8:	20c00003 	ldbu	r3,0(r4)
  81b3fc:	28800003 	ldbu	r2,0(r5)
  81b400:	18bff826 	beq	r3,r2,81b3e4 <memcmp+0x20>
  81b404:	1885c83a 	sub	r2,r3,r2
  81b408:	f800283a 	ret
  81b40c:	0005883a 	mov	r2,zero
  81b410:	f800283a 	ret
  81b414:	180f883a 	mov	r7,r3
  81b418:	20c00017 	ldw	r3,0(r4)
  81b41c:	28800017 	ldw	r2,0(r5)
  81b420:	18bfed1e 	bne	r3,r2,81b3d8 <memcmp+0x14>
  81b424:	31bfff04 	addi	r6,r6,-4
  81b428:	21000104 	addi	r4,r4,4
  81b42c:	29400104 	addi	r5,r5,4
  81b430:	39bff936 	bltu	r7,r6,81b418 <memcmp+0x54>
  81b434:	003fe806 	br	81b3d8 <memcmp+0x14>

0081b438 <__register_exitproc>:
  81b438:	defffa04 	addi	sp,sp,-24
  81b43c:	008020b4 	movhi	r2,130
  81b440:	10b83c04 	addi	r2,r2,-7952
  81b444:	dc000015 	stw	r16,0(sp)
  81b448:	14000017 	ldw	r16,0(r2)
  81b44c:	dd000415 	stw	r20,16(sp)
  81b450:	2829883a 	mov	r20,r5
  81b454:	81405217 	ldw	r5,328(r16)
  81b458:	dcc00315 	stw	r19,12(sp)
  81b45c:	dc800215 	stw	r18,8(sp)
  81b460:	dc400115 	stw	r17,4(sp)
  81b464:	dfc00515 	stw	ra,20(sp)
  81b468:	2023883a 	mov	r17,r4
  81b46c:	3027883a 	mov	r19,r6
  81b470:	3825883a 	mov	r18,r7
  81b474:	28002526 	beq	r5,zero,81b50c <__register_exitproc+0xd4>
  81b478:	29000117 	ldw	r4,4(r5)
  81b47c:	008007c4 	movi	r2,31
  81b480:	11002716 	blt	r2,r4,81b520 <__register_exitproc+0xe8>
  81b484:	8800101e 	bne	r17,zero,81b4c8 <__register_exitproc+0x90>
  81b488:	2105883a 	add	r2,r4,r4
  81b48c:	1085883a 	add	r2,r2,r2
  81b490:	20c00044 	addi	r3,r4,1
  81b494:	1145883a 	add	r2,r2,r5
  81b498:	0009883a 	mov	r4,zero
  81b49c:	15000215 	stw	r20,8(r2)
  81b4a0:	28c00115 	stw	r3,4(r5)
  81b4a4:	2005883a 	mov	r2,r4
  81b4a8:	dfc00517 	ldw	ra,20(sp)
  81b4ac:	dd000417 	ldw	r20,16(sp)
  81b4b0:	dcc00317 	ldw	r19,12(sp)
  81b4b4:	dc800217 	ldw	r18,8(sp)
  81b4b8:	dc400117 	ldw	r17,4(sp)
  81b4bc:	dc000017 	ldw	r16,0(sp)
  81b4c0:	dec00604 	addi	sp,sp,24
  81b4c4:	f800283a 	ret
  81b4c8:	29802204 	addi	r6,r5,136
  81b4cc:	00800044 	movi	r2,1
  81b4d0:	110e983a 	sll	r7,r2,r4
  81b4d4:	30c04017 	ldw	r3,256(r6)
  81b4d8:	2105883a 	add	r2,r4,r4
  81b4dc:	1085883a 	add	r2,r2,r2
  81b4e0:	1185883a 	add	r2,r2,r6
  81b4e4:	19c6b03a 	or	r3,r3,r7
  81b4e8:	14802015 	stw	r18,128(r2)
  81b4ec:	14c00015 	stw	r19,0(r2)
  81b4f0:	00800084 	movi	r2,2
  81b4f4:	30c04015 	stw	r3,256(r6)
  81b4f8:	88bfe31e 	bne	r17,r2,81b488 <__register_exitproc+0x50>
  81b4fc:	30804117 	ldw	r2,260(r6)
  81b500:	11c4b03a 	or	r2,r2,r7
  81b504:	30804115 	stw	r2,260(r6)
  81b508:	003fdf06 	br	81b488 <__register_exitproc+0x50>
  81b50c:	008020b4 	movhi	r2,130
  81b510:	108b7404 	addi	r2,r2,11728
  81b514:	100b883a 	mov	r5,r2
  81b518:	80805215 	stw	r2,328(r16)
  81b51c:	003fd606 	br	81b478 <__register_exitproc+0x40>
  81b520:	00802074 	movhi	r2,129
  81b524:	10a43e04 	addi	r2,r2,-28424
  81b528:	1000021e 	bne	r2,zero,81b534 <__register_exitproc+0xfc>
  81b52c:	013fffc4 	movi	r4,-1
  81b530:	003fdc06 	br	81b4a4 <__register_exitproc+0x6c>
  81b534:	01006404 	movi	r4,400
  81b538:	103ee83a 	callr	r2
  81b53c:	1007883a 	mov	r3,r2
  81b540:	103ffa26 	beq	r2,zero,81b52c <__register_exitproc+0xf4>
  81b544:	80805217 	ldw	r2,328(r16)
  81b548:	180b883a 	mov	r5,r3
  81b54c:	18000115 	stw	zero,4(r3)
  81b550:	18800015 	stw	r2,0(r3)
  81b554:	80c05215 	stw	r3,328(r16)
  81b558:	18006215 	stw	zero,392(r3)
  81b55c:	18006315 	stw	zero,396(r3)
  81b560:	0009883a 	mov	r4,zero
  81b564:	883fc826 	beq	r17,zero,81b488 <__register_exitproc+0x50>
  81b568:	003fd706 	br	81b4c8 <__register_exitproc+0x90>

0081b56c <register_fini>:
  81b56c:	f800283a 	ret

0081b570 <__call_exitprocs>:
  81b570:	008020b4 	movhi	r2,130
  81b574:	10b83c04 	addi	r2,r2,-7952
  81b578:	10800017 	ldw	r2,0(r2)
  81b57c:	defff304 	addi	sp,sp,-52
  81b580:	df000b15 	stw	fp,44(sp)
  81b584:	d8800115 	stw	r2,4(sp)
  81b588:	00802074 	movhi	r2,129
  81b58c:	10a43904 	addi	r2,r2,-28444
  81b590:	1005003a 	cmpeq	r2,r2,zero
  81b594:	d8800215 	stw	r2,8(sp)
  81b598:	d8800117 	ldw	r2,4(sp)
  81b59c:	dd400815 	stw	r21,32(sp)
  81b5a0:	dd000715 	stw	r20,28(sp)
  81b5a4:	10805204 	addi	r2,r2,328
  81b5a8:	dfc00c15 	stw	ra,48(sp)
  81b5ac:	ddc00a15 	stw	r23,40(sp)
  81b5b0:	dd800915 	stw	r22,36(sp)
  81b5b4:	dcc00615 	stw	r19,24(sp)
  81b5b8:	dc800515 	stw	r18,20(sp)
  81b5bc:	dc400415 	stw	r17,16(sp)
  81b5c0:	dc000315 	stw	r16,12(sp)
  81b5c4:	282b883a 	mov	r21,r5
  81b5c8:	2039883a 	mov	fp,r4
  81b5cc:	d8800015 	stw	r2,0(sp)
  81b5d0:	2829003a 	cmpeq	r20,r5,zero
  81b5d4:	d8800117 	ldw	r2,4(sp)
  81b5d8:	14405217 	ldw	r17,328(r2)
  81b5dc:	88001026 	beq	r17,zero,81b620 <__call_exitprocs+0xb0>
  81b5e0:	ddc00017 	ldw	r23,0(sp)
  81b5e4:	88800117 	ldw	r2,4(r17)
  81b5e8:	8c802204 	addi	r18,r17,136
  81b5ec:	143fffc4 	addi	r16,r2,-1
  81b5f0:	80000916 	blt	r16,zero,81b618 <__call_exitprocs+0xa8>
  81b5f4:	05bfffc4 	movi	r22,-1
  81b5f8:	a000151e 	bne	r20,zero,81b650 <__call_exitprocs+0xe0>
  81b5fc:	8409883a 	add	r4,r16,r16
  81b600:	2105883a 	add	r2,r4,r4
  81b604:	1485883a 	add	r2,r2,r18
  81b608:	10c02017 	ldw	r3,128(r2)
  81b60c:	a8c01126 	beq	r21,r3,81b654 <__call_exitprocs+0xe4>
  81b610:	843fffc4 	addi	r16,r16,-1
  81b614:	85bff81e 	bne	r16,r22,81b5f8 <__call_exitprocs+0x88>
  81b618:	d8800217 	ldw	r2,8(sp)
  81b61c:	10003126 	beq	r2,zero,81b6e4 <__call_exitprocs+0x174>
  81b620:	dfc00c17 	ldw	ra,48(sp)
  81b624:	df000b17 	ldw	fp,44(sp)
  81b628:	ddc00a17 	ldw	r23,40(sp)
  81b62c:	dd800917 	ldw	r22,36(sp)
  81b630:	dd400817 	ldw	r21,32(sp)
  81b634:	dd000717 	ldw	r20,28(sp)
  81b638:	dcc00617 	ldw	r19,24(sp)
  81b63c:	dc800517 	ldw	r18,20(sp)
  81b640:	dc400417 	ldw	r17,16(sp)
  81b644:	dc000317 	ldw	r16,12(sp)
  81b648:	dec00d04 	addi	sp,sp,52
  81b64c:	f800283a 	ret
  81b650:	8409883a 	add	r4,r16,r16
  81b654:	88c00117 	ldw	r3,4(r17)
  81b658:	2105883a 	add	r2,r4,r4
  81b65c:	1445883a 	add	r2,r2,r17
  81b660:	18ffffc4 	addi	r3,r3,-1
  81b664:	11800217 	ldw	r6,8(r2)
  81b668:	1c001526 	beq	r3,r16,81b6c0 <__call_exitprocs+0x150>
  81b66c:	10000215 	stw	zero,8(r2)
  81b670:	303fe726 	beq	r6,zero,81b610 <__call_exitprocs+0xa0>
  81b674:	00c00044 	movi	r3,1
  81b678:	1c06983a 	sll	r3,r3,r16
  81b67c:	90804017 	ldw	r2,256(r18)
  81b680:	8cc00117 	ldw	r19,4(r17)
  81b684:	1884703a 	and	r2,r3,r2
  81b688:	10001426 	beq	r2,zero,81b6dc <__call_exitprocs+0x16c>
  81b68c:	90804117 	ldw	r2,260(r18)
  81b690:	1884703a 	and	r2,r3,r2
  81b694:	10000c1e 	bne	r2,zero,81b6c8 <__call_exitprocs+0x158>
  81b698:	2105883a 	add	r2,r4,r4
  81b69c:	1485883a 	add	r2,r2,r18
  81b6a0:	11400017 	ldw	r5,0(r2)
  81b6a4:	e009883a 	mov	r4,fp
  81b6a8:	303ee83a 	callr	r6
  81b6ac:	88800117 	ldw	r2,4(r17)
  81b6b0:	98bfc81e 	bne	r19,r2,81b5d4 <__call_exitprocs+0x64>
  81b6b4:	b8800017 	ldw	r2,0(r23)
  81b6b8:	147fd526 	beq	r2,r17,81b610 <__call_exitprocs+0xa0>
  81b6bc:	003fc506 	br	81b5d4 <__call_exitprocs+0x64>
  81b6c0:	8c000115 	stw	r16,4(r17)
  81b6c4:	003fea06 	br	81b670 <__call_exitprocs+0x100>
  81b6c8:	2105883a 	add	r2,r4,r4
  81b6cc:	1485883a 	add	r2,r2,r18
  81b6d0:	11000017 	ldw	r4,0(r2)
  81b6d4:	303ee83a 	callr	r6
  81b6d8:	003ff406 	br	81b6ac <__call_exitprocs+0x13c>
  81b6dc:	303ee83a 	callr	r6
  81b6e0:	003ff206 	br	81b6ac <__call_exitprocs+0x13c>
  81b6e4:	88800117 	ldw	r2,4(r17)
  81b6e8:	1000081e 	bne	r2,zero,81b70c <__call_exitprocs+0x19c>
  81b6ec:	89000017 	ldw	r4,0(r17)
  81b6f0:	20000726 	beq	r4,zero,81b710 <__call_exitprocs+0x1a0>
  81b6f4:	b9000015 	stw	r4,0(r23)
  81b6f8:	8809883a 	mov	r4,r17
  81b6fc:	08090e40 	call	8090e4 <free>
  81b700:	bc400017 	ldw	r17,0(r23)
  81b704:	883fb71e 	bne	r17,zero,81b5e4 <__call_exitprocs+0x74>
  81b708:	003fc506 	br	81b620 <__call_exitprocs+0xb0>
  81b70c:	89000017 	ldw	r4,0(r17)
  81b710:	882f883a 	mov	r23,r17
  81b714:	2023883a 	mov	r17,r4
  81b718:	883fb21e 	bne	r17,zero,81b5e4 <__call_exitprocs+0x74>
  81b71c:	003fc006 	br	81b620 <__call_exitprocs+0xb0>

0081b720 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  81b720:	defffd04 	addi	sp,sp,-12
  81b724:	df000215 	stw	fp,8(sp)
  81b728:	df000204 	addi	fp,sp,8
  81b72c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  81b730:	e0bfff17 	ldw	r2,-4(fp)
  81b734:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81b738:	e0bffe17 	ldw	r2,-8(fp)
  81b73c:	1005003a 	cmpeq	r2,r2,zero
  81b740:	1000021e 	bne	r2,zero,81b74c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  81b744:	002af070 	cmpltui	zero,zero,43969
  81b748:	00000106 	br	81b750 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  81b74c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  81b750:	e037883a 	mov	sp,fp
  81b754:	df000017 	ldw	fp,0(sp)
  81b758:	dec00104 	addi	sp,sp,4
  81b75c:	f800283a 	ret

0081b760 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  81b760:	defffd04 	addi	sp,sp,-12
  81b764:	dfc00215 	stw	ra,8(sp)
  81b768:	df000115 	stw	fp,4(sp)
  81b76c:	df000104 	addi	fp,sp,4
  81b770:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  81b774:	e13fff17 	ldw	r4,-4(fp)
  81b778:	081b7200 	call	81b720 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81b77c:	003fff06 	br	81b77c <_exit+0x1c>
  81b780:	00000010 	cmplti	zero,zero,0
  81b784:	00000000 	call	0 <__reset-0x800000>
  81b788:	00527a01 	jmpi	527a0 <__reset-0x7ad860>
  81b78c:	011f7c01 	jmpi	11f7c0 <__reset-0x6e0840>
  81b790:	001b0c0b 	ldhu	zero,27696(zero)
  81b794:	00000028 	cmpgeui	zero,zero,0
  81b798:	00000018 	cmpnei	zero,zero,0
  81b79c:	00810554 	movui	r2,1045
  81b7a0:	000005dc 	xori	zero,zero,23
  81b7a4:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  81b7a8:	92099170 	cmpltui	r8,r18,9797
  81b7ac:	95079308 	cmpgei	r20,r18,7756
  81b7b0:	97049605 	stb	fp,4696(r18)
  81b7b4:	90019f03 	ldbu	zero,1660(r18)
  81b7b8:	9c06940a 	0x9c06940a
  81b7bc:	00000002 	0x2
  81b7c0:	00000028 	cmpgeui	zero,zero,0
  81b7c4:	00000044 	movi	zero,1
  81b7c8:	00810b30 	cmpltui	r2,zero,1068
  81b7cc:	000005b0 	cmpltui	zero,zero,22
  81b7d0:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  81b7d4:	92099168 	cmpgeui	r8,r18,9797
  81b7d8:	95079308 	cmpgei	r20,r18,7756
  81b7dc:	9c039705 	stb	r16,3676(r19)
  81b7e0:	90019f02 	0x90019f02
  81b7e4:	9606940a 	0x9606940a
  81b7e8:	00000004 	movi	zero,0
  81b7ec:	0081b56c 	andhi	r2,zero,1749
