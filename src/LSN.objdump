
LSN.elf:     file format elf32-littlenios2
LSN.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001c38c memsz 0x0001c38c flags r-x
    LOAD off    0x0001d3ac vaddr 0x0081c3ac paddr 0x0081df74 align 2**12
         filesz 0x00001bc8 memsz 0x00001bc8 flags rw-
    LOAD off    0x0001fb3c vaddr 0x0081fb3c paddr 0x0081fb3c align 2**12
         filesz 0x00000000 memsz 0x00003474 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b420  008001b8  008001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000dd4  0081b5d8  0081b5d8  0001c5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bc8  0081c3ac  0081df74  0001d3ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00003474  0081fb3c  0081fb3c  0001fb3c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001ef74  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001218  00000000  00000000  0001efa0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00003763  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000383f0  00000000  00000000  0002391b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b2ff  00000000  00000000  0005bd0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00021041  00000000  00000000  0006700a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003468  00000000  00000000  0008804c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003656  00000000  00000000  0008b4b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001009e  00000000  00000000  0008eb0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0009eba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c78  00000000  00000000  0009ec08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000a58aa  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000a58ad  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000a58b9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000a58ba  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000a58bb  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000a58c6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000a58d1  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000a58dc  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003b  00000000  00000000  000a58e7  2**0
                  CONTENTS, READONLY
 26 .jdi          000057f2  00000000  00000000  000a5922  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00096040  00000000  00000000  000ab114  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b8 l    d  .text	00000000 .text
0081b5d8 l    d  .rodata	00000000 .rodata
0081c3ac l    d  .rwdata	00000000 .rwdata
0081fb3c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00800200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 audio.c
00800c54 l     F .text	00000144 playSoundISR
0081fb48 l     O .bss	00000004 audioBuffer
0081fb4c l     O .bss	00000004 audioVolumeBuffer
00000000 l    df *ABS*	00000000 bmp.c
00000000 l    df *ABS*	00000000 bullet.c
00000000 l    df *ABS*	00000000 collision.c
00000000 l    df *ABS*	00000000 displacement.c
0081fb98 l     O .bss	00000008 right
0081fba0 l     O .bss	00000008 left
0081fba8 l     O .bss	00000008 up
0081fbb0 l     O .bss	00000008 down
00000000 l    df *ABS*	00000000 input.c
0081fbb8 l     O .bss	00000002 edgeDetect3.3806
0081fbba l     O .bss	00000002 edgeDetect2.3805
0081fbbc l     O .bss	00000002 edgeDetect1.3804
0081fbbe l     O .bss	00000002 edgeDetect0.3803
0081fbc0 l     O .bss	00000001 keyInput.3802
0081fbc2 l     O .bss	00000002 scoresShown.3853
0081df28 l     O .rwdata	00000001 prevSwInput.3852
0081fbc4 l     O .bss	00000002 edgeDetect.3851
0081fbc6 l     O .bss	00000001 SWInput.3850
0081fbc8 l     O .bss	00000002 edgeDetect.3886
0081fbca l     O .bss	00000001 atariFire.3885
0081fbcb l     O .bss	00000001 atariDown.3884
0081fbcc l     O .bss	00000001 atariUp.3883
0081fbcd l     O .bss	00000001 atariButtons.3882
00000000 l    df *ABS*	00000000 lcd.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 player.c
00000000 l    df *ABS*	00000000 score.c
00000000 l    df *ABS*	00000000 sd_card.c
00000000 l    df *ABS*	00000000 shark.c
00000000 l    df *ABS*	00000000 splash.c
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
0081bf44 l     O .rodata	00000010 bp
0081bf54 l     O .rodata	00000010 dp_l
0081bf64 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
0081bf74 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080754c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080851c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0081c3ac l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
00809934 l     F .text	00000058 __sprint_r
0081c11e l     O .rodata	00000010 blanks.3452
0081c10e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0080b998 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080d394 l     F .text	00000058 std
0080d4a0 l     F .text	00000008 __fp_lock
0080d4a8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0081df48 l     O .rwdata	00000004 charset
0081c150 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0081c298 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
008111e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00811240 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00811340 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0081183c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0081191c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00811a78 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00811ca4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081df68 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00812114 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0081cd68 l     O .rwdata	00001060 jtag_uart_0
0081ddc8 l     O .rwdata	00000030 audio_and_video_config_0
0081ddf8 l     O .rwdata	00000030 audio_0
0081de28 l     O .rwdata	0000002c character_lcd_0
0081de54 l     O .rwdata	00000048 char_drawer
0081de9c l     O .rwdata	00000054 pixel_buffer_dma
0081def0 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
0081251c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00812754 l     F .text	0000022c altera_avalon_jtag_uart_irq
00812980 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00812ffc l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 altera_up_sd_card_avalon_interface.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0081a8ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0081aad8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0081ac14 l     F .text	000000dc alt_file_locked
0081ae78 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0081b354 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0081b508 l     F .text	00000040 alt_sim_halt
00800ed0 g     F .text	000001e8 changeBufferVolume
00813bc0 g     F .text	00000038 alt_up_av_config_reset
0081fc3c g     O .bss	00000004 aux_status_register
0081fbd8 g     O .bss	00000004 sharkList
0080ea84 g     F .text	00000094 _mprec_log10
00814064 g     F .text	00000064 alt_up_av_config_read_D5M_cfg_register
008004c4 g     F .text	000000cc loadPlayerDeath
0080eb70 g     F .text	00000088 __any_on
008101dc g     F .text	00000070 _isatty_r
0081c270 g     O .rodata	00000028 __mprec_tinytens
00813c30 g     F .text	00000030 alt_up_av_config_disable_interrupt
00811ad8 g     F .text	0000006c alt_main
00815694 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
008096ac g     F .text	000000a0 _puts_r
00822d20 g     O .bss	00000100 alt_irq
00806e5c g     F .text	00000018 fabs
0081024c g     F .text	00000078 _lseek_r
0081df74 g       *ABS*	00000000 __flash_rwdata_start
00814270 g     F .text	00000034 alt_up_character_lcd_send_cmd
00805024 g     F .text	00000048 setHardwareTimerPeriod
0080806c g     F .text	00000088 __eqdf2
008017c4 g     F .text	000000bc initBullets
00816344 g     F .text	000001b0 Check_for_Master_Boot_Record
0080e0b0 g     F .text	00000074 _gettimeofday_r
008134d8 g     F .text	00000070 alt_up_audio_read_fifo_avail
00813d00 g     F .text	000000ac alt_up_av_config_write_audio_cfg_register
00822fb0 g       *ABS*	00000000 __alt_heap_start
00803da8 g     F .text	00000024 getCurrentPlayerScore
00802bb0 g     F .text	00000070 handleAtariInput
0081df2c g     O .rwdata	00000004 scoreFileName
0081a1fc g     F .text	000001cc alt_up_sd_card_fclose
00809634 g     F .text	00000044 printf
00803e1c g     F .text	00000238 drawScore
00813548 g     F .text	00000070 alt_up_audio_record_r
0080fca8 g     F .text	00000068 __sseek
0080d3fc g     F .text	000000a4 __sinit
008148b8 g     F .text	00000114 alt_up_char_buffer_string
0081df1c g     O .rwdata	00000004 CONFIG_NAME
0080e148 g     F .text	00000084 _setlocale_r
0080d4fc g     F .text	00000068 __sfmoreglue
00811b64 g     F .text	00000020 __malloc_unlock
0081fbe4 g     O .bss	00000004 sharkArrayCursor
008072ec g     F .text	00000174 __divsf3
0081fc60 g     O .bss	00000004 current_sector_modified
008147e8 g     F .text	000000d0 alt_up_char_buffer_draw
00813450 g     F .text	00000088 alt_up_audio_reset_audio_core
0081a4c4 g     F .text	00000090 Read_Sector_Data_Attempt_CRC
0081fc30 g     O .bss	00000004 altera_avalon_timer_ts_freq
00800bcc g     F .text	00000044 playSharkDeath
0080e500 g     F .text	000000e0 memmove
00820eb8 g     O .bss	00000400 verticalDisplacementFunctionDown
0080318c g     F .text	00000028 killPlayer
0080d4ec g     F .text	00000010 _cleanup
0080ebf8 g     F .text	000000bc _Balloc
00804800 g     F .text	00000124 moveShark
00818dc0 g     F .text	000000c8 alt_up_sd_card_is_Present
0081605c g     F .text	00000050 Save_Modified_Sector
008015c0 g     F .text	00000038 freeSplash
008031b4 g     F .text	00000064 initScoreBoard
00814a68 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
0080303c g     F .text	0000008c moveDownPlayer
0080817c g     F .text	00000088 __gtdf2
00808ebc g     F .text	00000010 __errno
008141f4 g     F .text	0000007c get_DDRAM_addr
0080433c g     F .text	00000040 openFile
00800858 g     F .text	000001a0 audioTest
00814a28 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00805314 g     F .text	00000060 drawBox
00800000 g     F .entry	0000001c __reset
0081fc58 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
00801aac g     F .text	00000084 drawAllBullets
00800020 g       *ABS*	00000000 __flash_exceptions_start
00810168 g     F .text	00000074 _fstat_r
0081fbf4 g     O .bss	00000004 errno
008084e4 g     F .text	00000038 __make_dp
00804d68 g     F .text	0000002c clearSplashScreen
00813414 g     F .text	0000003c alt_up_audio_write_interrupt_pending
0081fb6c g     O .bss	00000004 pixel_buffer_addr1
0081fb70 g     O .bss	00000004 char_buffer
0081fc1c g     O .bss	00000004 alt_argv
00801dbc g     F .text	000000fc moveBulletLeft
00825f1c g       *ABS*	00000000 _gp
00811fc4 g     F .text	00000030 usleep
00819380 g     F .text	000003a8 alt_up_sd_card_fopen
0081fea8 g     O .bss	00000010 player
00818efc g     F .text	000000d4 alt_up_sd_card_find_first
0081fc4c g     O .bss	00000004 command_argument_register
00814c08 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00803aa0 g     F .text	000002d0 obtainUserInitials
0081fc90 g     O .bss	000001e8 tone
008032c0 g     F .text	00000354 readHighScoreBoardFromSD
0081cbe8 g     O .rwdata	00000180 alt_fd_list
0081fbe0 g     O .bss	00000004 sharkCount
0081fb90 g     O .bss	00000004 sharkLaserColor
008185f0 g     F .text	0000012c find_first_empty_record_in_root_directory
0081aa14 g     F .text	00000094 alt_find_dev
0080e460 g     F .text	000000a0 memcpy
00814408 g     F .text	0000004c alt_up_character_lcd_write_fd
008149cc g     F .text	0000005c alt_up_char_buffer_clear
0080d4e0 g     F .text	0000000c _cleanup_r
00808314 g     F .text	000000f8 __floatsidf
0081ab9c g     F .text	00000078 alt_io_redirect
00808204 g     F .text	00000088 __ltdf2
008026e0 g     F .text	00000040 makeUp
0081b5d8 g       *ABS*	00000000 __DTOR_END__
0080974c g     F .text	00000014 puts
008021c8 g     F .text	0000009c doPlayerBulletCollision
00801eb8 g     F .text	000000a0 findSharkIfHit
00818200 g     F .text	000001a4 find_first_empty_cluster
0080e9d4 g     F .text	000000b0 __ratio
00818cfc g     F .text	000000c4 alt_up_sd_card_open_dev
008139ac g     F .text	00000060 alt_up_audio_read_fifo_head
00814cb8 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00812b98 g     F .text	00000224 altera_avalon_jtag_uart_read
00801574 g     F .text	0000004c freeBmps
00808ee0 g     F .text	00000014 malloc
00809678 g     F .text	00000034 _printf_r
00808658 g     F .text	00000008 __udivsi3
0081177c g     F .text	000000c0 isatty
0081c180 g     O .rodata	000000c8 __mprec_tens
00815344 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
0080e124 g     F .text	00000008 __locale_charset
0081fc04 g     O .bss	00000008 alt_timezone
0081b0d0 g     F .text	00000090 alt_icache_flush
0081fbe8 g     O .bss	00000004 __malloc_top_pad
00813b34 g     F .text	0000008c alt_up_av_config_read_data
0081df44 g     O .rwdata	00000004 __mb_cur_max
0080e12c g     F .text	0000000c _localeconv_r
0080f2f0 g     F .text	0000003c __i2b
0080da94 g     F .text	0000049c __sfvwrite_r
008174dc g     F .text	000000c0 get_dir_divider_location
00804d94 g     F .text	00000290 timer_test
00802f6c g     F .text	00000044 erasePlayer
008097f4 g     F .text	00000070 _sbrk_r
00815b28 g     F .text	000000d0 helper_plot_pixel
008050a0 g     F .text	00000028 hasHardwareTimerExpired
0081717c g     F .text	000000d0 filename_to_upper_case
0081fb94 g     O .bss	00000004 playerLaserColor
00819728 g     F .text	00000090 alt_up_sd_card_set_attributes
008164f4 g     F .text	00000284 Read_File_Record_At_Offset
008027a0 g     F .text	00000040 makeDownLeft
008102c4 g     F .text	00000078 _read_r
0081fb88 g     O .bss	00000004 playerBulletList
0081cbb4 g     O .rwdata	0000000c __lc_ctype
0081df5c g     O .rwdata	00000004 alt_max_fd
00813a0c g     F .text	00000060 alt_up_audio_write_fifo_head
00808cbc g     F .text	00000138 __unpack_d
00817d9c g     F .text	00000464 find_file_in_directory
00810044 g     F .text	00000110 _fclose_r
0081fe78 g     O .bss	0000000c sharkDeath
0080d360 g     F .text	00000034 fflush
0081fbec g     O .bss	00000004 __malloc_max_sbrked_mem
008043e0 g     F .text	00000094 readWord
008115bc g     F .text	000001c0 alt_irq_register
00803614 g     F .text	0000048c updateHighScoreBoard
008074f8 g     F .text	00000054 __extendsfdf2
00818e88 g     F .text	00000074 alt_up_sd_card_is_FAT16
008079dc g     F .text	00000074 __adddf3
0080e8b4 g     F .text	00000120 __b2d
00814cec g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
00810918 g     F .text	000005b0 __umoddi3
00811988 g     F .text	000000f0 lseek
0081df30 g     O .rwdata	00000004 __fdlib_version
0081df38 g     O .rwdata	00000004 _global_impure_ptr
00817888 g     F .text	00000514 get_home_directory_cluster_for_file
0080f66c g     F .text	000005f4 _realloc_r
00822fb0 g       *ABS*	00000000 __bss_end
00814e50 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
00811eb8 g     F .text	0000010c alt_tick
00804c00 g     F .text	0000011c cleanupDeadSharks
0081033c g     F .text	000005dc __udivdi3
0081c248 g     O .rodata	00000028 __mprec_bigtens
0080f54c g     F .text	00000120 __s2b
0081feb8 g     O .bss	00001000 bulletArray
00810f50 g     F .text	00000194 __floatunsidf
0080e7d4 g     F .text	00000060 __mcmp
0081fc64 g     O .bss	00000004 current_sector_index
00813260 g     F .text	00000040 alt_up_audio_open_dev
008024e4 g     F .text	000000ec setupArcDisplacementFunction
00802adc g     F .text	000000d4 handleSwitchInput
0080d4c8 g     F .text	00000018 __fp_lock_all
00804548 g     F .text	000000b8 getWavFileLength
008003f8 g     F .text	000000cc loadLaser
0081369c g     F .text	00000070 alt_up_audio_play_r
00811e20 g     F .text	00000098 alt_alarm_stop
00816260 g     F .text	000000e4 mark_cluster
0081fc14 g     O .bss	00000004 alt_irq_active
0081df20 g     O .rwdata	00000004 AUDIO_NAME
008000ec g     F .exceptions	000000cc alt_irq_handler
0081cbc0 g     O .rwdata	00000028 alt_dev_null
0081fbd0 g     O .bss	00000004 char_lcd_dev
0081871c g     F .text	000001b8 convert_filename_to_name_extension
00804b38 g     F .text	000000c8 killShark
00806ed8 g     F .text	00000210 rint
008088e0 g     F .text	000000c8 __unpack_f
00804924 g     F .text	00000050 moveAllSharks
008146f0 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0081fb8c g     O .bss	00000004 sharkBulletList
0081a7f4 g     F .text	00000044 alt_dcache_flush_all
0080e6a0 g     F .text	00000070 __hi0bits
0081fc38 g     O .bss	00000004 is_sd_card_formated_as_FAT16
00815a64 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0080840c g     F .text	000000d8 __fixdfsi
008183a4 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
0081df74 g       *ABS*	00000000 __ram_rwdata_end
00802984 g     F .text	00000158 handleKeyInput
0081df54 g     O .rwdata	00000008 alt_dev_list
00811ff4 g     F .text	00000120 write
0081fc5c g     O .bss	00000004 device_pointer
00813238 g     F .text	00000028 alt_timestamp_freq
00815bf8 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
008042dc g     F .text	00000060 openSdCard
0081fe84 g     O .bss	0000000c laser
0081c3ac g       *ABS*	00000000 __ram_rodata_end
0081fb44 g     O .bss	00000004 DEBUG
0081126c g     F .text	000000d4 fstat
0080828c g     F .text	00000088 __ledf2
0080f42c g     F .text	00000120 __pow5mult
0081fbf8 g     O .bss	00000004 __nlocale_changed
00808660 g     F .text	00000008 __umodsi3
00804974 g     F .text	00000050 drawAllSharks
00822fb0 g       *ABS*	00000000 end
00808780 g     F .text	00000160 __pack_f
00814724 g     F .text	00000084 alt_up_char_buffer_init
0080506c g     F .text	00000034 isHardwareTimerRunning
0081269c g     F .text	000000b8 altera_avalon_jtag_uart_init
0081b5d4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00813070 g     F .text	00000088 alt_avalon_timer_sc_init
00808700 g     F .text	00000080 __clzsi2
0081fb50 g     O .bss	00000002 loaded
00812dbc g     F .text	00000240 altera_avalon_jtag_uart_write
00804748 g     F .text	0000005c drawShark
0080d3ec g     F .text	00000004 __sfp_lock_acquire
0080e37c g     F .text	000000e4 memchr
00814318 g     F .text	00000078 alt_up_character_lcd_write
0080998c g     F .text	00001eac ___vfprintf_internal_r
008052d8 g     F .text	0000003c printLine
0080d780 g     F .text	00000314 _free_r
008050f4 g     F .text	000000a8 initVga
00802264 g     F .text	0000008c setupDisplacement
0081b358 g     F .text	000001b0 __call_exitprocs
0081fbfc g     O .bss	00000004 __mlocale_changed
0081df40 g     O .rwdata	00000004 __malloc_sbrk_base
008001b8 g     F .text	0000004c _start
00802c20 g     F .text	0000005c startGame
0081fc24 g     O .bss	00000004 _alt_tick_rate
0080977c g     F .text	00000078 rand
00813880 g     F .text	0000012c alt_up_audio_write_fifo
00801764 g     F .text	00000060 eraseBmp
0080efbc g     F .text	0000014c __lshift
00813ad0 g     F .text	00000064 alt_up_av_config_write_data
0081fc28 g     O .bss	00000004 _alt_nticks
00811b84 g     F .text	00000120 read
008121a8 g     F .text	00000374 alt_sys_init
0081457c g     F .text	000000b0 alt_up_character_lcd_shift_display
00807460 g     F .text	00000098 __floatsisf
008212b8 g     O .bss	00000400 verticalDisplacementFunctionUp
0081377c g     F .text	00000104 alt_up_audio_read_fifo
0081fbdc g     O .bss	00000004 deadSharkList
008046b4 g     F .text	00000094 getFreeShark
0081b220 g     F .text	00000134 __register_exitproc
00814190 g     F .text	00000064 alt_up_av_config_write_LTM_cfg_register
00813388 g     F .text	00000050 alt_up_audio_disable_write_interrupt
00802128 g     F .text	000000a0 doSharkBulletCollision
0081fb74 g     O .bss	00000004 pixel_buffer_addr2
0081fb78 g     O .bss	00000004 sharkBmp
00800b2c g     F .text	0000005c playLaser
0080f108 g     F .text	000001e8 __multiply
0081462c g     F .text	00000090 alt_up_character_lcd_erase_pos
00805894 g     F .text	00001300 __ieee754_pow
00812a30 g     F .text	00000074 altera_avalon_jtag_uart_close
0080540c g     F .text	00000488 pow
0081c3ac g       *ABS*	00000000 __ram_rwdata_start
0081b5d8 g       *ABS*	00000000 __ram_rodata_start
0081fc68 g     O .bss	00000028 __malloc_current_mallinfo
0080ecb4 g     F .text	0000017c __d2b
0081fc34 g     O .bss	00000004 initialized
008019e4 g     F .text	000000c8 moveAllBullets
00812554 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0081b018 g     F .text	000000b8 alt_get_fd
008227b8 g     O .bss	00000014 search_data
0081a6a8 g     F .text	0000014c alt_busy_sleep
00808df4 g     F .text	000000c8 __fpcmp_parts_d
0081fe90 g     O .bss	0000000c theme
0080ffd4 g     F .text	00000070 _close_r
0081fb54 g     O .bss	00000004 audioFileWordLength
0081333c g     F .text	0000004c alt_up_audio_enable_write_interrupt
00800b88 g     F .text	00000044 playPlayerDeath
0081b1ac g     F .text	00000074 memcmp
00812604 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00822fb0 g       *ABS*	00000000 __alt_stack_base
0081264c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00802040 g     F .text	000000e8 isBulletCollidingWithPlayer
0080b85c g     F .text	0000013c __swsetup_r
00802cd8 g     F .text	000000bc init
0081fb7c g     O .bss	00000004 splashBmp
00807e14 g     F .text	00000258 __divdf3
00804474 g     F .text	000000d4 readDWord
008132ec g     F .text	00000050 alt_up_audio_disable_read_interrupt
0080d564 g     F .text	000000f0 __sfp
008227cc g     O .bss	00000054 boot_sector_data
0080eb18 g     F .text	00000058 __copybits
0081c7ac g     O .rwdata	00000408 __malloc_av_
0080d3f8 g     F .text	00000004 __sinit_lock_release
00807a50 g     F .text	000003c4 __muldf3
0080fd8c g     F .text	00000060 __sread
008049c4 g     F .text	00000050 eraseAllSharks
0081bf84 g     O .rodata	00000010 __thenan_sf
0081aef8 g     F .text	00000120 alt_find_file
0081a838 g     F .text	000000b4 alt_dev_llist_insert
00811b44 g     F .text	00000020 __malloc_lock
00811d64 g     F .text	000000bc sbrk
00801f58 g     F .text	000000e8 isBulletCollidingWithShark
0080d164 g     F .text	000001fc _fflush_r
0080ff20 g     F .text	000000b4 _calloc_r
008007bc g     F .text	0000009c playAudio
008113a0 g     F .text	0000021c gettimeofday
0081fbd4 g     O .bss	00000004 gameScores
008050c8 g     F .text	0000002c startHardwareTimer
0081fb3c g       *ABS*	00000000 __bss_start
0080e5e0 g     F .text	00000098 memset
00802d94 g     F .text	00000138 main
00813628 g     F .text	00000074 alt_up_audio_write_fifo_space
0081fc20 g     O .bss	00000004 alt_envp
0081fbf0 g     O .bss	00000004 __malloc_max_total_mem
00814c60 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
008147a8 g     F .text	00000040 alt_up_char_buffer_open_dev
008125ac g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00809760 g     F .text	0000001c srand
00802720 g     F .text	00000040 makeDown
008197b8 g     F .text	0000008c alt_up_sd_card_get_attributes
00815f94 g     F .text	000000c8 Write_Sector_Data
00819bd8 g     F .text	00000624 alt_up_sd_card_write
008144cc g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0080fca0 g     F .text	00000008 __sclose
00806ec0 g     F .text	00000008 matherr
01000000 g       *ABS*	00000000 __alt_heap_limit
00810154 g     F .text	00000014 fclose
00802660 g     F .text	00000040 makeRight
008130f8 g     F .text	000000a4 alt_timestamp_start
00822e20 g     O .bss	00000190 _atexit0
0080bbb0 g     F .text	000015b4 _dtoa_r
00808ef4 g     F .text	00000740 _malloc_r
008098d8 g     F .text	0000005c time
0081df60 g     O .rwdata	00000004 alt_errno
00803dcc g     F .text	0000002c setCurrentPlayerLives
0080dff8 g     F .text	000000b8 _fwalk
00801b30 g     F .text	00000084 eraseAllBullets
00801bb4 g     F .text	00000088 drawBullet
00808598 g     F .text	00000060 __divsi3
0081bf94 g     O .rodata	00000014 __thenan_df
008142d8 g     F .text	00000040 alt_up_character_lcd_open_dev
0081fb58 g     O .bss	00000004 sdDev
0080d654 g     F .text	0000012c _malloc_trim_r
0081b5d8 g       *ABS*	00000000 __CTOR_END__
00803218 g     F .text	000000a8 defaultHighScoreBoard
00806e74 g     F .text	0000001c finite
0081fb3c g     O .bss	00000004 audio
0081fc40 g     O .bss	00000004 status_register
008142a4 g     F .text	00000034 alt_up_character_lcd_init
008009f8 g     F .text	00000134 readWavFile
0080fdec g     F .text	000000bc strcmp
008047a4 g     F .text	0000005c eraseShark
0081fc48 g     O .bss	00000004 command_register
008025d0 g     F .text	00000090 setupNoDisplcementFunction
0081b5d8 g       *ABS*	00000000 __flash_rodata_start
0081b5d8 g       *ABS*	00000000 __DTOR_LIST__
00802860 g     F .text	00000124 setToRandomDisplacement
00804080 g     F .text	0000025c drawInGameInfo
008072c8 g     F .text	00000024 copysign
008080f4 g     F .text	00000088 __nedf2
00801c3c g     F .text	00000084 eraseBullet
00813a6c g     F .text	00000064 alt_up_av_config_open_dev
00812174 g     F .text	00000034 alt_irq_init
00805210 g     F .text	000000c8 drawLine
00811d04 g     F .text	00000060 alt_release_fd
0080065c g     F .text	000000d0 loadTheme
008161a8 g     F .text	000000b8 get_cluster_flag
008146bc g     F .text	00000034 alt_up_character_lcd_cursor_off
0081bfa8 g     O .rodata	00000100 __clz_tab
00816778 g     F .text	000002b8 Write_File_Record_At_Offset
0081fc00 g     O .bss	00000004 _PathLocale
0081fb5c g     O .bss	00000004 somethingForIrq
0081fb80 g     O .bss	00000004 pixel_buffer
0081b160 g     F .text	00000014 atexit
0080fea8 g     F .text	00000078 _write_r
00813cc8 g     F .text	00000038 alt_up_av_config_read_ready
00804650 g     F .text	00000064 initSharks
0080e1cc g     F .text	0000001c setlocale
00816a30 g     F .text	00000648 Check_for_DOS_FAT
008188d4 g     F .text	000002d4 create_file
008023f4 g     F .text	000000f0 setupCircularDisplacementFunction
0081df34 g     O .rwdata	00000004 _impure_ptr
0081fc44 g     O .bss	00000004 CSD_register_w0
00801880 g     F .text	00000164 createBullet
0081fc18 g     O .bss	00000004 alt_argc
008070e8 g     F .text	000001e0 scalbn
0081fc2c g     O .bss	00000004 altera_avalon_timer_ts_base
0081a9b0 g     F .text	00000064 _do_dtors
008216b8 g     O .bss	00000400 circularDisplacementFunction
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
0080e834 g     F .text	00000080 __ulp
0080fc60 g     F .text	00000040 __isinfd
0080d4b0 g     F .text	00000018 __fp_unlock_all
00804054 g     F .text	0000002c clearScore
0081df4c g     O .rwdata	00000008 alt_fs_list
0081724c g     F .text	00000290 check_file_name_for_FAT16_compliance
0081fe9c g     O .bss	0000000c playerDeath
0081fc50 g     O .bss	00000004 buffer_memory
0080437c g     F .text	00000030 closeFile
008135b8 g     F .text	00000070 alt_up_audio_record_l
00821ab8 g     O .bss	00000400 doNotMove
008051cc g     F .text	00000044 drawPixel
0081fc0c g     O .bss	00000008 alt_resettime
00806ec8 g     F .text	00000010 nan
008030c8 g     F .text	0000005c keepPlayerStationary
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080e138 g     F .text	00000010 localeconv
0081319c g     F .text	0000009c alt_timestamp
00802fb0 g     F .text	0000008c moveUpPlayer
00806b94 g     F .text	000002c8 __ieee754_sqrt
00813bf8 g     F .text	00000038 alt_up_av_config_enable_interrupt
008014fc g     F .text	00000078 parseBmps
008015f8 g     F .text	0000016c drawBmp
0081fc54 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
00813c60 g     F .text	00000068 alt_up_av_config_read_acknowledge
00814000 g     F .text	00000064 alt_up_av_config_write_DC2_cfg_register
0081df74 g       *ABS*	00000000 _edata
0081df24 g     O .rwdata	00000004 toneLength
00822fb0 g       *ABS*	00000000 _end
00805374 g     F .text	00000098 convert24BitRgbTo16
00822820 g     O .bss	00000500 active_files
008001b8 g       *ABS*	00000000 __ram_exceptions_end
00803df8 g     F .text	00000024 getCurrentPlayerLives
00818ba8 g     F .text	00000154 copy_file_record_name_to_string
00812aa4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080072c g     F .text	00000090 playAudioMono
00817078 g     F .text	00000104 Look_for_FAT16
0081370c g     F .text	00000070 alt_up_audio_play_l
0080fd10 g     F .text	0000007c __swrite
0081df3c g     O .rwdata	00000004 __malloc_trim_threshold
0081aed8 g     F .text	00000020 altera_nios2_qsys_irq_init
0081b174 g     F .text	00000038 exit
008027e0 g     F .text	00000040 makeUpRight
00804d1c g     F .text	0000004c drawSplashScreen
00818fd0 g     F .text	000003b0 alt_up_sd_card_find_next
0080df30 g     F .text	000000c8 _fwalk_reent
0080ee30 g     F .text	0000018c __mdiff
0081412c g     F .text	00000064 alt_up_av_config_read_LTM_cfg_register
008222b8 g     O .bss	00000500 sharkArray
008085f8 g     F .text	00000060 __modsi3
00802c7c g     F .text	0000005c init_lcd
00802760 g     F .text	00000040 makeDownRight
008160ac g     F .text	000000fc Read_Sector_Data
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080d3f0 g     F .text	00000004 __sfp_lock_release
00814390 g     F .text	00000078 alt_up_character_lcd_string
0081fb60 g     O .bss	00000004 playedWords
00803124 g     F .text	00000068 hitPlayer
0081b548 g     F .text	00000020 _exit
00806e90 g     F .text	00000030 __isnand
0081a554 g     F .text	00000154 alt_alarm_start
00800590 g     F .text	000000cc loadSharkDeath
00808668 g     F .text	00000098 __muldi3
0081a3c8 g     F .text	000000fc Read_Sector_Data_CRC
00819844 g     F .text	00000394 alt_up_sd_card_read
0080e1e8 g     F .text	00000194 __smakebuf_r
00809864 g     F .text	00000074 strlen
0081acf0 g     F .text	00000188 open
00802f28 g     F .text	00000044 drawPlayer
008026a0 g     F .text	00000040 makeLeft
00810ec8 g     F .text	00000088 __gedf2
00821eb8 g     O .bss	00000400 arcDisplacementFunction
0080519c g     F .text	00000030 clearScreen
00813dac g     F .text	000000f8 alt_up_av_config_read_video_cfg_register
00803d70 g     F .text	00000038 updateCurrentPlayerScore
0081aaa8 g     F .text	00000030 alt_icache_flush_all
00800204 g     F .text	0000019c setupAudio
00814454 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0081df64 g     O .rwdata	00000004 alt_priority_mask
0081fb84 g     O .bss	00000004 playerBmp
008043ac g     F .text	00000034 readByte
008010b8 g     F .text	00000444 parseBmp
008022f0 g     F .text	00000104 setupVerticalDisplacementFunction
00804600 g     F .text	00000050 readPastWavHeader
0080b838 g     F .text	00000024 __vfprintf_internal
008140c8 g     F .text	00000064 alt_up_av_config_write_D5M_cfg_register
0080795c g     F .text	00000080 __subdf3
0081fb64 g     O .bss	00000004 playCursor
00802820 g     F .text	00000040 makeUpLeft
0080e710 g     F .text	000000c4 __lo0bits
0081df6c g     O .rwdata	00000008 alt_alarm_list
00800d98 g     F .text	00000138 updateAudioWithVolume
0081a94c g     F .text	00000064 _do_ctors
00801cc0 g     F .text	000000fc moveBulletRight
008003a0 g     F .text	00000058 setupAudioInterrupt
0081fb68 g     O .bss	00000002 status
00802ecc g     F .text	0000005c initPlayer
008110e4 g     F .text	000000fc close
0081fb40 g     O .bss	00000004 config
00800c10 g     F .text	00000044 playTheme
0081189c g     F .text	00000080 alt_load
008132a0 g     F .text	0000004c alt_up_audio_enable_read_interrupt
00813ea4 g     F .text	000000f8 alt_up_av_config_write_video_cfg_register
008089a8 g     F .text	00000314 __pack_d
00804a14 g     F .text	00000124 createShark
0081759c g     F .text	000002ec match_file_record_to_name_ext
00808ecc g     F .text	00000014 free
0080d3f4 g     F .text	00000004 __sinit_lock_acquire
0080f32c g     F .text	00000100 __multadd
0080e678 g     F .text	00000028 _Bfree
00813f9c g     F .text	00000064 alt_up_av_config_read_DC2_cfg_register
008133d8 g     F .text	0000003c alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406e14 	ori	at,at,440
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000171e 	bne	r2,zero,800188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c020b4 	movhi	r3,130
  800134:	18cb4804 	addi	r3,r3,11552
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11800017 	ldw	r6,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c020b4 	movhi	r3,130
  80014c:	18cb4804 	addi	r3,r3,11552
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	e17ffd17 	ldw	r5,-12(fp)
  800164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800168:	0005313a 	rdctl	r2,ipending
  80016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
  800170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800178:	e0bfff17 	ldw	r2,-4(fp)
  80017c:	1004c03a 	cmpne	r2,r2,zero
  800180:	103fe21e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800184:	00000706 	br	8001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800188:	e0bffe17 	ldw	r2,-8(fp)
  80018c:	1085883a 	add	r2,r2,r2
  800190:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800194:	e0bffd17 	ldw	r2,-12(fp)
  800198:	10800044 	addi	r2,r2,1
  80019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a0:	003fdd06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a4:	e037883a 	mov	sp,fp
  8001a8:	dfc00117 	ldw	ra,4(sp)
  8001ac:	df000017 	ldw	fp,0(sp)
  8001b0:	dec00204 	addi	sp,sp,8
  8001b4:	f800283a 	ret

Disassembly of section .text:

008001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b8:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
  8001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c4:	00bffd16 	blt	zero,r2,8001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c8:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001d0:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  8001d4:	d697c714 	ori	gp,gp,24348
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d8:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001dc:	10becf14 	ori	r2,r2,64316

    movhi r3, %hi(__bss_end)
  8001e0:	00c020b4 	movhi	r3,130
    ori r3, r3, %lo(__bss_end)
  8001e4:	18cbec14 	ori	r3,r3,12208

    beq r2, r3, 1f
  8001e8:	10c00326 	beq	r2,r3,8001f8 <_start+0x40>

0:
    stw zero, (r2)
  8001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f4:	10fffd36 	bltu	r2,r3,8001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f8:	081189c0 	call	81189c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001fc:	0811ad80 	call	811ad8 <alt_main>

00800200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800200:	003fff06 	br	800200 <alt_after_alt_main>

00800204 <setupAudio>:
struct audioInfo theme;

volatile int somethingForIrq;

void setupAudio()
{
  800204:	defffc04 	addi	sp,sp,-16
  800208:	dfc00315 	stw	ra,12(sp)
  80020c:	df000215 	stw	fp,8(sp)
  800210:	df000204 	addi	fp,sp,8
	bool error = false;
  800214:	e03fff15 	stw	zero,-4(fp)
	config = (alt_up_av_config_dev *)alt_up_av_config_open_dev(CONFIG_NAME);
  800218:	d1200017 	ldw	r4,-32768(gp)
  80021c:	0813a6c0 	call	813a6c <alt_up_av_config_open_dev>
  800220:	d0a70915 	stw	r2,-25564(gp)
	if (config == NULL) {
  800224:	d0a70917 	ldw	r2,-25564(gp)
  800228:	1004c03a 	cmpne	r2,r2,zero
  80022c:	1000051e 	bne	r2,zero,800244 <setupAudio+0x40>
		printf("Error: audio video config could not be opened.\n");
  800230:	010020b4 	movhi	r4,130
  800234:	212d8204 	addi	r4,r4,-18936
  800238:	080974c0 	call	80974c <puts>
		error = true;
  80023c:	00800044 	movi	r2,1
  800240:	e0bfff15 	stw	r2,-4(fp)
	}
	while (!alt_up_av_config_read_ready(config)) {
  800244:	d1270917 	ldw	r4,-25564(gp)
  800248:	0813cc80 	call	813cc8 <alt_up_av_config_read_ready>
  80024c:	1005003a 	cmpeq	r2,r2,zero
  800250:	103ffc1e 	bne	r2,zero,800244 <setupAudio+0x40>
	}

	audio = (alt_up_audio_dev *)alt_up_audio_open_dev(AUDIO_NAME);
  800254:	d1200117 	ldw	r4,-32764(gp)
  800258:	08132600 	call	813260 <alt_up_audio_open_dev>
  80025c:	d0a70815 	stw	r2,-25568(gp)
	if (config == NULL) {
  800260:	d0a70917 	ldw	r2,-25564(gp)
  800264:	1004c03a 	cmpne	r2,r2,zero
  800268:	1000061e 	bne	r2,zero,800284 <setupAudio+0x80>
		printf("Error: audio codec could not be opened.\n");
  80026c:	010020b4 	movhi	r4,130
  800270:	212d8e04 	addi	r4,r4,-18888
  800274:	080974c0 	call	80974c <puts>
		error = true;
  800278:	00800044 	movi	r2,1
  80027c:	e0bfff15 	stw	r2,-4(fp)
  800280:	00000606 	br	80029c <setupAudio+0x98>
	} else if (DEBUG == 1) {
  800284:	d0a70a17 	ldw	r2,-25560(gp)
  800288:	10800058 	cmpnei	r2,r2,1
  80028c:	1000031e 	bne	r2,zero,80029c <setupAudio+0x98>
		printf("Successfully opened audio codec.\n");
  800290:	010020b4 	movhi	r4,130
  800294:	212d9804 	addi	r4,r4,-18848
  800298:	080974c0 	call	80974c <puts>
	}
    int interruptStatus = setupAudioInterrupt(audio, somethingForIrq);
  80029c:	d1270817 	ldw	r4,-25568(gp)
  8002a0:	d1671017 	ldw	r5,-25536(gp)
  8002a4:	08003a00 	call	8003a0 <setupAudioInterrupt>
  8002a8:	e0bffe15 	stw	r2,-8(fp)

    if (interruptStatus < 0) {
  8002ac:	e0bffe17 	ldw	r2,-8(fp)
  8002b0:	1004403a 	cmpge	r2,r2,zero
  8002b4:	1000061e 	bne	r2,zero,8002d0 <setupAudio+0xcc>
		printf("Error: audio interrupt could not be setup.\n");
  8002b8:	010020b4 	movhi	r4,130
  8002bc:	212da104 	addi	r4,r4,-18812
  8002c0:	080974c0 	call	80974c <puts>
		error = true;
  8002c4:	00800044 	movi	r2,1
  8002c8:	e0bfff15 	stw	r2,-4(fp)
  8002cc:	00000606 	br	8002e8 <setupAudio+0xe4>
	} else if (DEBUG == 1) {
  8002d0:	d0a70a17 	ldw	r2,-25560(gp)
  8002d4:	10800058 	cmpnei	r2,r2,1
  8002d8:	1000031e 	bne	r2,zero,8002e8 <setupAudio+0xe4>
		printf("Successfully setup audio interrupts.\n");
  8002dc:	010020b4 	movhi	r4,130
  8002e0:	212dac04 	addi	r4,r4,-18768
  8002e4:	080974c0 	call	80974c <puts>
	}

    laser.mainBuffer = NULL;
  8002e8:	008020b4 	movhi	r2,130
  8002ec:	10bfa104 	addi	r2,r2,-380
  8002f0:	10000015 	stw	zero,0(r2)
    laser.volumeBuffer = NULL;
  8002f4:	008020b4 	movhi	r2,130
  8002f8:	10bfa104 	addi	r2,r2,-380
  8002fc:	10000115 	stw	zero,4(r2)
    loadLaser();
  800300:	08003f80 	call	8003f8 <loadLaser>
    playerDeath.mainBuffer = NULL;
  800304:	008020b4 	movhi	r2,130
  800308:	10bfa704 	addi	r2,r2,-356
  80030c:	10000015 	stw	zero,0(r2)
    playerDeath.volumeBuffer = NULL;
  800310:	008020b4 	movhi	r2,130
  800314:	10bfa704 	addi	r2,r2,-356
  800318:	10000115 	stw	zero,4(r2)
    loadPlayerDeath();
  80031c:	08004c40 	call	8004c4 <loadPlayerDeath>
    sharkDeath.mainBuffer = NULL;
  800320:	008020b4 	movhi	r2,130
  800324:	10bf9e04 	addi	r2,r2,-392
  800328:	10000015 	stw	zero,0(r2)
    sharkDeath.volumeBuffer = NULL;
  80032c:	008020b4 	movhi	r2,130
  800330:	10bf9e04 	addi	r2,r2,-392
  800334:	10000115 	stw	zero,4(r2)
    loadSharkDeath();
  800338:	08005900 	call	800590 <loadSharkDeath>
    theme.mainBuffer = NULL;
  80033c:	008020b4 	movhi	r2,130
  800340:	10bfa404 	addi	r2,r2,-368
  800344:	10000015 	stw	zero,0(r2)
    theme.volumeBuffer = NULL;
  800348:	008020b4 	movhi	r2,130
  80034c:	10bfa404 	addi	r2,r2,-368
  800350:	10000115 	stw	zero,4(r2)
    loadTheme();
  800354:	080065c0 	call	80065c <loadTheme>
    printf("finised loading sound buffers.\n");
  800358:	010020b4 	movhi	r4,130
  80035c:	212db604 	addi	r4,r4,-18728
  800360:	080974c0 	call	80974c <puts>

	status = NONE;
  800364:	d027130d 	sth	zero,-25524(gp)

	if (DEBUG == 1 && error == false) {
  800368:	d0a70a17 	ldw	r2,-25560(gp)
  80036c:	10800058 	cmpnei	r2,r2,1
  800370:	1000061e 	bne	r2,zero,80038c <setupAudio+0x188>
  800374:	e0bfff17 	ldw	r2,-4(fp)
  800378:	1004c03a 	cmpne	r2,r2,zero
  80037c:	1000031e 	bne	r2,zero,80038c <setupAudio+0x188>
		printf("Successfully setup sound.\n");
  800380:	010020b4 	movhi	r4,130
  800384:	212dbe04 	addi	r4,r4,-18696
  800388:	080974c0 	call	80974c <puts>
	}
}
  80038c:	e037883a 	mov	sp,fp
  800390:	dfc00117 	ldw	ra,4(sp)
  800394:	df000017 	ldw	fp,0(sp)
  800398:	dec00204 	addi	sp,sp,8
  80039c:	f800283a 	ret

008003a0 <setupAudioInterrupt>:

int setupAudioInterrupt(alt_up_audio_dev *audio, volatile int somethingForIrq)
{
  8003a0:	defffb04 	addi	sp,sp,-20
  8003a4:	dfc00415 	stw	ra,16(sp)
  8003a8:	df000315 	stw	fp,12(sp)
  8003ac:	df000304 	addi	fp,sp,12
  8003b0:	e13ffe15 	stw	r4,-8(fp)
  8003b4:	e17fff15 	stw	r5,-4(fp)
    // Need to disable both audio interrupts before setting them up
    // otherwise you get stuck in them when they are setup
    alt_up_audio_disable_read_interrupt(audio);
  8003b8:	e13ffe17 	ldw	r4,-8(fp)
  8003bc:	08132ec0 	call	8132ec <alt_up_audio_disable_read_interrupt>
    alt_up_audio_disable_write_interrupt(audio);
  8003c0:	e13ffe17 	ldw	r4,-8(fp)
  8003c4:	08133880 	call	813388 <alt_up_audio_disable_write_interrupt>

    void *irqInt = (void*)&somethingForIrq;
  8003c8:	e0bfff04 	addi	r2,fp,-4
  8003cc:	e0bffd15 	stw	r2,-12(fp)

	#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	return alt_ic_isr_register(AUDIO_0_IRQ_INTERRUPT_CONTROLLER_ID, AUDIO_0_IRQ, playSoundISR, irqInt, 0x0);
	#else
	return alt_irq_register(AUDIO_0_IRQ, irqInt, playSoundISR);
  8003d0:	010000c4 	movi	r4,3
  8003d4:	e17ffd17 	ldw	r5,-12(fp)
  8003d8:	01802034 	movhi	r6,128
  8003dc:	31831504 	addi	r6,r6,3156
  8003e0:	08115bc0 	call	8115bc <alt_irq_register>
	#endif
}
  8003e4:	e037883a 	mov	sp,fp
  8003e8:	dfc00117 	ldw	ra,4(sp)
  8003ec:	df000017 	ldw	fp,0(sp)
  8003f0:	dec00204 	addi	sp,sp,8
  8003f4:	f800283a 	ret

008003f8 <loadLaser>:

void loadLaser() {
  8003f8:	defffe04 	addi	sp,sp,-8
  8003fc:	dfc00115 	stw	ra,4(sp)
  800400:	df000015 	stw	fp,0(sp)
  800404:	d839883a 	mov	fp,sp
    laser.bufferLength = 38384;
  800408:	00c020b4 	movhi	r3,130
  80040c:	18ffa104 	addi	r3,r3,-380
  800410:	00a57c14 	movui	r2,38384
  800414:	18800215 	stw	r2,8(r3)
	audioFileWordLength = laser.bufferLength;
  800418:	008020b4 	movhi	r2,130
  80041c:	10bfa104 	addi	r2,r2,-380
  800420:	10800217 	ldw	r2,8(r2)
  800424:	d0a70e15 	stw	r2,-25544(gp)
	if (laser.mainBuffer == NULL || laser.volumeBuffer == NULL) {
  800428:	008020b4 	movhi	r2,130
  80042c:	10bfa104 	addi	r2,r2,-380
  800430:	10800017 	ldw	r2,0(r2)
  800434:	1005003a 	cmpeq	r2,r2,zero
  800438:	1000051e 	bne	r2,zero,800450 <loadLaser+0x58>
  80043c:	008020b4 	movhi	r2,130
  800440:	10bfa104 	addi	r2,r2,-380
  800444:	10800117 	ldw	r2,4(r2)
  800448:	1004c03a 	cmpne	r2,r2,zero
  80044c:	10000e1e 	bne	r2,zero,800488 <loadLaser+0x90>
		readWavFile("laserii.wav", laser.bufferLength);
  800450:	008020b4 	movhi	r2,130
  800454:	10bfa104 	addi	r2,r2,-380
  800458:	11400217 	ldw	r5,8(r2)
  80045c:	010020b4 	movhi	r4,130
  800460:	212dc504 	addi	r4,r4,-18668
  800464:	08009f80 	call	8009f8 <readWavFile>
		//laserBuffer = audioBuffer;
		laser.mainBuffer = audioBuffer;
  800468:	d0e70b17 	ldw	r3,-25556(gp)
  80046c:	008020b4 	movhi	r2,130
  800470:	10bfa104 	addi	r2,r2,-380
  800474:	10c00015 	stw	r3,0(r2)
		laser.volumeBuffer = audioVolumeBuffer;
  800478:	d0e70c17 	ldw	r3,-25552(gp)
  80047c:	008020b4 	movhi	r2,130
  800480:	10bfa104 	addi	r2,r2,-380
  800484:	10c00115 	stw	r3,4(r2)
	}
	//audioBuffer = laserBuffer;
	audioBuffer = laser.mainBuffer;
  800488:	008020b4 	movhi	r2,130
  80048c:	10bfa104 	addi	r2,r2,-380
  800490:	10800017 	ldw	r2,0(r2)
  800494:	d0a70b15 	stw	r2,-25556(gp)
	audioVolumeBuffer = laser.volumeBuffer;
  800498:	008020b4 	movhi	r2,130
  80049c:	10bfa104 	addi	r2,r2,-380
  8004a0:	10800117 	ldw	r2,4(r2)
  8004a4:	d0a70c15 	stw	r2,-25552(gp)
	loaded = LASER;
  8004a8:	00800044 	movi	r2,1
  8004ac:	d0a70d0d 	sth	r2,-25548(gp)
}
  8004b0:	e037883a 	mov	sp,fp
  8004b4:	dfc00117 	ldw	ra,4(sp)
  8004b8:	df000017 	ldw	fp,0(sp)
  8004bc:	dec00204 	addi	sp,sp,8
  8004c0:	f800283a 	ret

008004c4 <loadPlayerDeath>:

void loadPlayerDeath() {
  8004c4:	defffe04 	addi	sp,sp,-8
  8004c8:	dfc00115 	stw	ra,4(sp)
  8004cc:	df000015 	stw	fp,0(sp)
  8004d0:	d839883a 	mov	fp,sp
	playerDeath.bufferLength = 0x0000DAFF / 2;
  8004d4:	00c020b4 	movhi	r3,130
  8004d8:	18ffa704 	addi	r3,r3,-356
  8004dc:	009b5fc4 	movi	r2,28031
  8004e0:	18800215 	stw	r2,8(r3)
	audioFileWordLength = playerDeath.bufferLength;
  8004e4:	008020b4 	movhi	r2,130
  8004e8:	10bfa704 	addi	r2,r2,-356
  8004ec:	10800217 	ldw	r2,8(r2)
  8004f0:	d0a70e15 	stw	r2,-25544(gp)
	if (playerDeath.mainBuffer == NULL || playerDeath.volumeBuffer == NULL) {
  8004f4:	008020b4 	movhi	r2,130
  8004f8:	10bfa704 	addi	r2,r2,-356
  8004fc:	10800017 	ldw	r2,0(r2)
  800500:	1005003a 	cmpeq	r2,r2,zero
  800504:	1000051e 	bne	r2,zero,80051c <loadPlayerDeath+0x58>
  800508:	008020b4 	movhi	r2,130
  80050c:	10bfa704 	addi	r2,r2,-356
  800510:	10800117 	ldw	r2,4(r2)
  800514:	1004c03a 	cmpne	r2,r2,zero
  800518:	10000e1e 	bne	r2,zero,800554 <loadPlayerDeath+0x90>
		readWavFile("pdie.wav", playerDeath.bufferLength);
  80051c:	008020b4 	movhi	r2,130
  800520:	10bfa704 	addi	r2,r2,-356
  800524:	11400217 	ldw	r5,8(r2)
  800528:	010020b4 	movhi	r4,130
  80052c:	212dc804 	addi	r4,r4,-18656
  800530:	08009f80 	call	8009f8 <readWavFile>
		//playerDeathBuffer = audioBuffer;
		playerDeath.mainBuffer = audioBuffer;
  800534:	d0e70b17 	ldw	r3,-25556(gp)
  800538:	008020b4 	movhi	r2,130
  80053c:	10bfa704 	addi	r2,r2,-356
  800540:	10c00015 	stw	r3,0(r2)
		playerDeath.volumeBuffer = audioVolumeBuffer;
  800544:	d0e70c17 	ldw	r3,-25552(gp)
  800548:	008020b4 	movhi	r2,130
  80054c:	10bfa704 	addi	r2,r2,-356
  800550:	10c00115 	stw	r3,4(r2)
	}
	//audioBuffer = playerDeathBuffer;
	audioBuffer = playerDeath.mainBuffer;
  800554:	008020b4 	movhi	r2,130
  800558:	10bfa704 	addi	r2,r2,-356
  80055c:	10800017 	ldw	r2,0(r2)
  800560:	d0a70b15 	stw	r2,-25556(gp)
	audioVolumeBuffer = playerDeath.volumeBuffer;
  800564:	008020b4 	movhi	r2,130
  800568:	10bfa704 	addi	r2,r2,-356
  80056c:	10800117 	ldw	r2,4(r2)
  800570:	d0a70c15 	stw	r2,-25552(gp)
	loaded = PLAYER_DEATH;
  800574:	00800084 	movi	r2,2
  800578:	d0a70d0d 	sth	r2,-25548(gp)
}
  80057c:	e037883a 	mov	sp,fp
  800580:	dfc00117 	ldw	ra,4(sp)
  800584:	df000017 	ldw	fp,0(sp)
  800588:	dec00204 	addi	sp,sp,8
  80058c:	f800283a 	ret

00800590 <loadSharkDeath>:

void loadSharkDeath() {
  800590:	defffe04 	addi	sp,sp,-8
  800594:	dfc00115 	stw	ra,4(sp)
  800598:	df000015 	stw	fp,0(sp)
  80059c:	d839883a 	mov	fp,sp
	sharkDeath.bufferLength = 0x0000DAFF / 2;
  8005a0:	00c020b4 	movhi	r3,130
  8005a4:	18ff9e04 	addi	r3,r3,-392
  8005a8:	009b5fc4 	movi	r2,28031
  8005ac:	18800215 	stw	r2,8(r3)
	audioFileWordLength = sharkDeath.bufferLength;
  8005b0:	008020b4 	movhi	r2,130
  8005b4:	10bf9e04 	addi	r2,r2,-392
  8005b8:	10800217 	ldw	r2,8(r2)
  8005bc:	d0a70e15 	stw	r2,-25544(gp)
	if (sharkDeath.mainBuffer == NULL || sharkDeath.volumeBuffer == NULL) {
  8005c0:	008020b4 	movhi	r2,130
  8005c4:	10bf9e04 	addi	r2,r2,-392
  8005c8:	10800017 	ldw	r2,0(r2)
  8005cc:	1005003a 	cmpeq	r2,r2,zero
  8005d0:	1000051e 	bne	r2,zero,8005e8 <loadSharkDeath+0x58>
  8005d4:	008020b4 	movhi	r2,130
  8005d8:	10bf9e04 	addi	r2,r2,-392
  8005dc:	10800117 	ldw	r2,4(r2)
  8005e0:	1004c03a 	cmpne	r2,r2,zero
  8005e4:	10000e1e 	bne	r2,zero,800620 <loadSharkDeath+0x90>
		readWavFile("sdie.wav", sharkDeath.bufferLength);
  8005e8:	008020b4 	movhi	r2,130
  8005ec:	10bf9e04 	addi	r2,r2,-392
  8005f0:	11400217 	ldw	r5,8(r2)
  8005f4:	010020b4 	movhi	r4,130
  8005f8:	212dcb04 	addi	r4,r4,-18644
  8005fc:	08009f80 	call	8009f8 <readWavFile>
		//sharkDeathBuffer = audioBuffer;
		sharkDeath.mainBuffer = audioBuffer;
  800600:	d0e70b17 	ldw	r3,-25556(gp)
  800604:	008020b4 	movhi	r2,130
  800608:	10bf9e04 	addi	r2,r2,-392
  80060c:	10c00015 	stw	r3,0(r2)
		sharkDeath.volumeBuffer = audioVolumeBuffer;
  800610:	d0e70c17 	ldw	r3,-25552(gp)
  800614:	008020b4 	movhi	r2,130
  800618:	10bf9e04 	addi	r2,r2,-392
  80061c:	10c00115 	stw	r3,4(r2)
	}
	//audioBuffer = sharkDeathBuffer;
	audioBuffer = sharkDeath.mainBuffer;
  800620:	008020b4 	movhi	r2,130
  800624:	10bf9e04 	addi	r2,r2,-392
  800628:	10800017 	ldw	r2,0(r2)
  80062c:	d0a70b15 	stw	r2,-25556(gp)
	audioVolumeBuffer = sharkDeath.volumeBuffer;
  800630:	008020b4 	movhi	r2,130
  800634:	10bf9e04 	addi	r2,r2,-392
  800638:	10800117 	ldw	r2,4(r2)
  80063c:	d0a70c15 	stw	r2,-25552(gp)
	loaded = SHARK_DEATH;
  800640:	008000c4 	movi	r2,3
  800644:	d0a70d0d 	sth	r2,-25548(gp)
}
  800648:	e037883a 	mov	sp,fp
  80064c:	dfc00117 	ldw	ra,4(sp)
  800650:	df000017 	ldw	fp,0(sp)
  800654:	dec00204 	addi	sp,sp,8
  800658:	f800283a 	ret

0080065c <loadTheme>:

void loadTheme() {
  80065c:	defffe04 	addi	sp,sp,-8
  800660:	dfc00115 	stw	ra,4(sp)
  800664:	df000015 	stw	fp,0(sp)
  800668:	d839883a 	mov	fp,sp
	theme.bufferLength = 0x00063E00 / 2;
  80066c:	00c020b4 	movhi	r3,130
  800670:	18ffa404 	addi	r3,r3,-368
  800674:	008000f4 	movhi	r2,3
  800678:	1087c004 	addi	r2,r2,7936
  80067c:	18800215 	stw	r2,8(r3)
	audioFileWordLength = theme.bufferLength;
  800680:	008020b4 	movhi	r2,130
  800684:	10bfa404 	addi	r2,r2,-368
  800688:	10800217 	ldw	r2,8(r2)
  80068c:	d0a70e15 	stw	r2,-25544(gp)
	if (theme.mainBuffer == NULL || theme.volumeBuffer == NULL) {
  800690:	008020b4 	movhi	r2,130
  800694:	10bfa404 	addi	r2,r2,-368
  800698:	10800017 	ldw	r2,0(r2)
  80069c:	1005003a 	cmpeq	r2,r2,zero
  8006a0:	1000051e 	bne	r2,zero,8006b8 <loadTheme+0x5c>
  8006a4:	008020b4 	movhi	r2,130
  8006a8:	10bfa404 	addi	r2,r2,-368
  8006ac:	10800117 	ldw	r2,4(r2)
  8006b0:	1004c03a 	cmpne	r2,r2,zero
  8006b4:	10000e1e 	bne	r2,zero,8006f0 <loadTheme+0x94>
		readWavFile("theme.wav", theme.bufferLength);
  8006b8:	008020b4 	movhi	r2,130
  8006bc:	10bfa404 	addi	r2,r2,-368
  8006c0:	11400217 	ldw	r5,8(r2)
  8006c4:	010020b4 	movhi	r4,130
  8006c8:	212dce04 	addi	r4,r4,-18632
  8006cc:	08009f80 	call	8009f8 <readWavFile>
		//themeBuffer = audioBuffer;
		theme.mainBuffer = audioBuffer;
  8006d0:	d0e70b17 	ldw	r3,-25556(gp)
  8006d4:	008020b4 	movhi	r2,130
  8006d8:	10bfa404 	addi	r2,r2,-368
  8006dc:	10c00015 	stw	r3,0(r2)
		theme.volumeBuffer = audioVolumeBuffer;
  8006e0:	d0e70c17 	ldw	r3,-25552(gp)
  8006e4:	008020b4 	movhi	r2,130
  8006e8:	10bfa404 	addi	r2,r2,-368
  8006ec:	10c00115 	stw	r3,4(r2)
	}
	//audioBuffer = themeBuffer;
	audioBuffer = theme.mainBuffer;
  8006f0:	008020b4 	movhi	r2,130
  8006f4:	10bfa404 	addi	r2,r2,-368
  8006f8:	10800017 	ldw	r2,0(r2)
  8006fc:	d0a70b15 	stw	r2,-25556(gp)
	audioVolumeBuffer = theme.volumeBuffer;
  800700:	008020b4 	movhi	r2,130
  800704:	10bfa404 	addi	r2,r2,-368
  800708:	10800117 	ldw	r2,4(r2)
  80070c:	d0a70c15 	stw	r2,-25552(gp)
	loaded = THEME;
  800710:	00800104 	movi	r2,4
  800714:	d0a70d0d 	sth	r2,-25548(gp)
}
  800718:	e037883a 	mov	sp,fp
  80071c:	dfc00117 	ldw	ra,4(sp)
  800720:	df000017 	ldw	fp,0(sp)
  800724:	dec00204 	addi	sp,sp,8
  800728:	f800283a 	ret

0080072c <playAudioMono>:

void playAudioMono(int length) {
  80072c:	defffb04 	addi	sp,sp,-20
  800730:	dfc00415 	stw	ra,16(sp)
  800734:	df000315 	stw	fp,12(sp)
  800738:	df000304 	addi	fp,sp,12
  80073c:	e13fff15 	stw	r4,-4(fp)
	if (DEBUG == 1) {
  800740:	d0a70a17 	ldw	r2,-25560(gp)
  800744:	10800058 	cmpnei	r2,r2,1
  800748:	1000031e 	bne	r2,zero,800758 <playAudioMono+0x2c>
		printf("Playing audio.\n");
  80074c:	010020b4 	movhi	r4,130
  800750:	212dd104 	addi	r4,r4,-18620
  800754:	080974c0 	call	80974c <puts>
	}
	int left = alt_up_audio_write_fifo(audio, (unsigned int *)playCursor, length, ALT_UP_AUDIO_LEFT);
  800758:	d1270817 	ldw	r4,-25568(gp)
  80075c:	d0a71217 	ldw	r2,-25528(gp)
  800760:	100b883a 	mov	r5,r2
  800764:	e1bfff17 	ldw	r6,-4(fp)
  800768:	000f883a 	mov	r7,zero
  80076c:	08138800 	call	813880 <alt_up_audio_write_fifo>
  800770:	e0bffe15 	stw	r2,-8(fp)
	int right = alt_up_audio_write_fifo(audio, (unsigned int *)playCursor, length, ALT_UP_AUDIO_RIGHT);
  800774:	d1270817 	ldw	r4,-25568(gp)
  800778:	d0a71217 	ldw	r2,-25528(gp)
  80077c:	100b883a 	mov	r5,r2
  800780:	e1bfff17 	ldw	r6,-4(fp)
  800784:	01c00044 	movi	r7,1
  800788:	08138800 	call	813880 <alt_up_audio_write_fifo>
  80078c:	e0bffd15 	stw	r2,-12(fp)
	left++;
  800790:	e0bffe17 	ldw	r2,-8(fp)
  800794:	10800044 	addi	r2,r2,1
  800798:	e0bffe15 	stw	r2,-8(fp)
	right++;
  80079c:	e0bffd17 	ldw	r2,-12(fp)
  8007a0:	10800044 	addi	r2,r2,1
  8007a4:	e0bffd15 	stw	r2,-12(fp)
	//playAudio(buffer, length, buffer, length);
}
  8007a8:	e037883a 	mov	sp,fp
  8007ac:	dfc00117 	ldw	ra,4(sp)
  8007b0:	df000017 	ldw	fp,0(sp)
  8007b4:	dec00204 	addi	sp,sp,8
  8007b8:	f800283a 	ret

008007bc <playAudio>:

void playAudio(unsigned int *leftBuffer, int leftLength, unsigned int *rightBuffer, int rightLength) {
  8007bc:	defff804 	addi	sp,sp,-32
  8007c0:	dfc00715 	stw	ra,28(sp)
  8007c4:	df000615 	stw	fp,24(sp)
  8007c8:	df000604 	addi	fp,sp,24
  8007cc:	e13ffc15 	stw	r4,-16(fp)
  8007d0:	e17ffd15 	stw	r5,-12(fp)
  8007d4:	e1bffe15 	stw	r6,-8(fp)
  8007d8:	e1ffff15 	stw	r7,-4(fp)
	int leftWritten = alt_up_audio_write_fifo(audio, leftBuffer, leftLength, ALT_UP_AUDIO_LEFT);
  8007dc:	d1270817 	ldw	r4,-25568(gp)
  8007e0:	e17ffc17 	ldw	r5,-16(fp)
  8007e4:	e1bffd17 	ldw	r6,-12(fp)
  8007e8:	000f883a 	mov	r7,zero
  8007ec:	08138800 	call	813880 <alt_up_audio_write_fifo>
  8007f0:	e0bffb15 	stw	r2,-20(fp)
	if (DEBUG == 1) {
  8007f4:	d0a70a17 	ldw	r2,-25560(gp)
  8007f8:	10800058 	cmpnei	r2,r2,1
  8007fc:	1000041e 	bne	r2,zero,800810 <playAudio+0x54>
		printf("Wrote %d to left audio FIFO. with value\n", leftWritten);
  800800:	010020b4 	movhi	r4,130
  800804:	212dd504 	addi	r4,r4,-18604
  800808:	e17ffb17 	ldw	r5,-20(fp)
  80080c:	08096340 	call	809634 <printf>
	}

	int rightWritten = alt_up_audio_write_fifo(audio, rightBuffer, rightLength, ALT_UP_AUDIO_RIGHT);
  800810:	d1270817 	ldw	r4,-25568(gp)
  800814:	e17ffe17 	ldw	r5,-8(fp)
  800818:	e1bfff17 	ldw	r6,-4(fp)
  80081c:	01c00044 	movi	r7,1
  800820:	08138800 	call	813880 <alt_up_audio_write_fifo>
  800824:	e0bffa15 	stw	r2,-24(fp)
	if (DEBUG == 1) {
  800828:	d0a70a17 	ldw	r2,-25560(gp)
  80082c:	10800058 	cmpnei	r2,r2,1
  800830:	1000041e 	bne	r2,zero,800844 <playAudio+0x88>
		printf("Wrote %d to right audio FIFO.\n", rightWritten);
  800834:	010020b4 	movhi	r4,130
  800838:	212de004 	addi	r4,r4,-18560
  80083c:	e17ffa17 	ldw	r5,-24(fp)
  800840:	08096340 	call	809634 <printf>
	}
}
  800844:	e037883a 	mov	sp,fp
  800848:	dfc00117 	ldw	ra,4(sp)
  80084c:	df000017 	ldw	fp,0(sp)
  800850:	dec00204 	addi	sp,sp,8
  800854:	f800283a 	ret

00800858 <audioTest>:

void audioTest()
{
  800858:	defff504 	addi	sp,sp,-44
  80085c:	dfc00a15 	stw	ra,40(sp)
  800860:	df000915 	stw	fp,36(sp)
  800864:	df000904 	addi	fp,sp,36
	setupAudio();
  800868:	08002040 	call	800204 <setupAudio>
	printf("Starting audio test\n");
  80086c:	010020b4 	movhi	r4,130
  800870:	212de804 	addi	r4,r4,-18528
  800874:	080974c0 	call	80974c <puts>
	int length = 8;
  800878:	00800204 	movi	r2,8
  80087c:	e0bffb15 	stw	r2,-20(fp)
	unsigned int right [length];
  800880:	e0bffb17 	ldw	r2,-20(fp)
  800884:	1085883a 	add	r2,r2,r2
  800888:	1085883a 	add	r2,r2,r2
  80088c:	108000c4 	addi	r2,r2,3
  800890:	108000c4 	addi	r2,r2,3
  800894:	1004d0ba 	srli	r2,r2,2
  800898:	1085883a 	add	r2,r2,r2
  80089c:	1085883a 	add	r2,r2,r2
  8008a0:	d8b7c83a 	sub	sp,sp,r2
  8008a4:	e6ffff15 	stw	sp,-4(fp)
  8008a8:	e0ffff17 	ldw	r3,-4(fp)
  8008ac:	188000c4 	addi	r2,r3,3
  8008b0:	1004d0ba 	srli	r2,r2,2
  8008b4:	1085883a 	add	r2,r2,r2
  8008b8:	1085883a 	add	r2,r2,r2
  8008bc:	e0bfff15 	stw	r2,-4(fp)
  8008c0:	e0bfff17 	ldw	r2,-4(fp)
  8008c4:	e0bffd15 	stw	r2,-12(fp)
	unsigned int left [length];
  8008c8:	e0bffb17 	ldw	r2,-20(fp)
  8008cc:	1085883a 	add	r2,r2,r2
  8008d0:	1085883a 	add	r2,r2,r2
  8008d4:	108000c4 	addi	r2,r2,3
  8008d8:	108000c4 	addi	r2,r2,3
  8008dc:	1004d0ba 	srli	r2,r2,2
  8008e0:	1085883a 	add	r2,r2,r2
  8008e4:	1085883a 	add	r2,r2,r2
  8008e8:	d8b7c83a 	sub	sp,sp,r2
  8008ec:	e6fffe15 	stw	sp,-8(fp)
  8008f0:	e0fffe17 	ldw	r3,-8(fp)
  8008f4:	188000c4 	addi	r2,r3,3
  8008f8:	1004d0ba 	srli	r2,r2,2
  8008fc:	1085883a 	add	r2,r2,r2
  800900:	1085883a 	add	r2,r2,r2
  800904:	e0bffe15 	stw	r2,-8(fp)
  800908:	e0bffe17 	ldw	r2,-8(fp)
  80090c:	e0bffc15 	stw	r2,-16(fp)
	int i;

	for (i = 0; i < length; i++) {
  800910:	e03ffa15 	stw	zero,-24(fp)
  800914:	00001b06 	br	800984 <audioTest+0x12c>
		right[i] = (i * i * i) & 0x0000FFFF;
  800918:	e17ffa17 	ldw	r5,-24(fp)
  80091c:	e0fffa17 	ldw	r3,-24(fp)
  800920:	e0bffa17 	ldw	r2,-24(fp)
  800924:	1887383a 	mul	r3,r3,r2
  800928:	e0bffa17 	ldw	r2,-24(fp)
  80092c:	1885383a 	mul	r2,r3,r2
  800930:	113fffcc 	andi	r4,r2,65535
  800934:	e0fffd17 	ldw	r3,-12(fp)
  800938:	2945883a 	add	r2,r5,r5
  80093c:	1085883a 	add	r2,r2,r2
  800940:	10c5883a 	add	r2,r2,r3
  800944:	11000015 	stw	r4,0(r2)
		left[i] = right[i];
  800948:	e17ffa17 	ldw	r5,-24(fp)
  80094c:	e0bffa17 	ldw	r2,-24(fp)
  800950:	e0fffd17 	ldw	r3,-12(fp)
  800954:	1085883a 	add	r2,r2,r2
  800958:	1085883a 	add	r2,r2,r2
  80095c:	10c5883a 	add	r2,r2,r3
  800960:	11000017 	ldw	r4,0(r2)
  800964:	e0fffc17 	ldw	r3,-16(fp)
  800968:	2945883a 	add	r2,r5,r5
  80096c:	1085883a 	add	r2,r2,r2
  800970:	10c5883a 	add	r2,r2,r3
  800974:	11000015 	stw	r4,0(r2)
	int length = 8;
	unsigned int right [length];
	unsigned int left [length];
	int i;

	for (i = 0; i < length; i++) {
  800978:	e0bffa17 	ldw	r2,-24(fp)
  80097c:	10800044 	addi	r2,r2,1
  800980:	e0bffa15 	stw	r2,-24(fp)
  800984:	e0fffa17 	ldw	r3,-24(fp)
  800988:	e0bffb17 	ldw	r2,-20(fp)
  80098c:	18bfe216 	blt	r3,r2,800918 <audioTest+0xc0>
		right[i] = (i * i * i) & 0x0000FFFF;
		left[i] = right[i];
	}

	unsigned int *rightBuffer = right;
  800990:	e0bffd17 	ldw	r2,-12(fp)
  800994:	e0bff915 	stw	r2,-28(fp)
	unsigned int *leftBuffer = left;
  800998:	e0bffc17 	ldw	r2,-16(fp)
  80099c:	e0bff815 	stw	r2,-32(fp)

	//sin (param*PI/180); for degrees, it uses radians

	int free = alt_up_audio_write_fifo_space(audio, ALT_UP_AUDIO_RIGHT);
  8009a0:	d1270817 	ldw	r4,-25568(gp)
  8009a4:	01400044 	movi	r5,1
  8009a8:	08136280 	call	813628 <alt_up_audio_write_fifo_space>
  8009ac:	e0bff715 	stw	r2,-36(fp)
	printf("%d words free in right FIFO\n", free);
  8009b0:	010020b4 	movhi	r4,130
  8009b4:	212ded04 	addi	r4,r4,-18508
  8009b8:	e17ff717 	ldw	r5,-36(fp)
  8009bc:	08096340 	call	809634 <printf>
  8009c0:	00000006 	br	8009c4 <audioTest+0x16c>

	for (;;) {
		free = alt_up_audio_write_fifo_space(audio, ALT_UP_AUDIO_RIGHT);
  8009c4:	d1270817 	ldw	r4,-25568(gp)
  8009c8:	01400044 	movi	r5,1
  8009cc:	08136280 	call	813628 <alt_up_audio_write_fifo_space>
  8009d0:	e0bff715 	stw	r2,-36(fp)
		//printf("%d words free in right FIFO\n", free);
		if (free >= length) {
  8009d4:	e0fff717 	ldw	r3,-36(fp)
  8009d8:	e0bffb17 	ldw	r2,-20(fp)
  8009dc:	18bff916 	blt	r3,r2,8009c4 <audioTest+0x16c>
			//printf("Playing audio\n");
			playAudio(leftBuffer, length, rightBuffer, length);
  8009e0:	e13ff817 	ldw	r4,-32(fp)
  8009e4:	e17ffb17 	ldw	r5,-20(fp)
  8009e8:	e1bff917 	ldw	r6,-28(fp)
  8009ec:	e1fffb17 	ldw	r7,-20(fp)
  8009f0:	08007bc0 	call	8007bc <playAudio>
		}
	}
  8009f4:	003ff306 	br	8009c4 <audioTest+0x16c>

008009f8 <readWavFile>:
}

void readWavFile(char *wavFileName, unsigned int fileWordLength) {
  8009f8:	defff904 	addi	sp,sp,-28
  8009fc:	dfc00615 	stw	ra,24(sp)
  800a00:	df000515 	stw	fp,20(sp)
  800a04:	df000504 	addi	fp,sp,20
  800a08:	e13ffe15 	stw	r4,-8(fp)
  800a0c:	e17fff15 	stw	r5,-4(fp)
	audioBuffer = malloc(sizeof(unsigned int) * fileWordLength);
  800a10:	e0bfff17 	ldw	r2,-4(fp)
  800a14:	1085883a 	add	r2,r2,r2
  800a18:	1085883a 	add	r2,r2,r2
  800a1c:	1009883a 	mov	r4,r2
  800a20:	0808ee00 	call	808ee0 <malloc>
  800a24:	d0a70b15 	stw	r2,-25556(gp)
	audioVolumeBuffer = malloc(sizeof(unsigned int) * fileWordLength);
  800a28:	e0bfff17 	ldw	r2,-4(fp)
  800a2c:	1085883a 	add	r2,r2,r2
  800a30:	1085883a 	add	r2,r2,r2
  800a34:	1009883a 	mov	r4,r2
  800a38:	0808ee00 	call	808ee0 <malloc>
  800a3c:	d0a70c15 	stw	r2,-25552(gp)
	if (audioBuffer == NULL || audioVolumeBuffer == NULL) {
  800a40:	d0a70b17 	ldw	r2,-25556(gp)
  800a44:	1005003a 	cmpeq	r2,r2,zero
  800a48:	1000031e 	bne	r2,zero,800a58 <readWavFile+0x60>
  800a4c:	d0a70c17 	ldw	r2,-25552(gp)
  800a50:	1004c03a 	cmpne	r2,r2,zero
  800a54:	1000031e 	bne	r2,zero,800a64 <readWavFile+0x6c>
		printf("Error: insufficient memory to load audio file into memory.\n");
  800a58:	010020b4 	movhi	r4,130
  800a5c:	212df504 	addi	r4,r4,-18476
  800a60:	080974c0 	call	80974c <puts>
	}

	short int fileHandle = openFile(wavFileName);
  800a64:	e13ffe17 	ldw	r4,-8(fp)
  800a68:	080433c0 	call	80433c <openFile>
  800a6c:	e0bffd0d 	sth	r2,-12(fp)
	if (fileHandle == -1) {
  800a70:	e0bffd0f 	ldh	r2,-12(fp)
  800a74:	10bfffd8 	cmpnei	r2,r2,-1
  800a78:	1000051e 	bne	r2,zero,800a90 <readWavFile+0x98>
		printf("Error opening %s\n", wavFileName);
  800a7c:	010020b4 	movhi	r4,130
  800a80:	212e0404 	addi	r4,r4,-18416
  800a84:	e17ffe17 	ldw	r5,-8(fp)
  800a88:	08096340 	call	809634 <printf>
		return;
  800a8c:	00002206 	br	800b18 <readWavFile+0x120>
	}

	readPastWavHeader(fileHandle);
  800a90:	e13ffd0f 	ldh	r4,-12(fp)
  800a94:	08046000 	call	804600 <readPastWavHeader>

	unsigned int i;
	unsigned int word;
	for (i = 0; i < fileWordLength; i++) {
  800a98:	e03ffc15 	stw	zero,-16(fp)
  800a9c:	00001906 	br	800b04 <readWavFile+0x10c>
		word = readWord(fileHandle);
  800aa0:	e13ffd0f 	ldh	r4,-12(fp)
  800aa4:	08043e00 	call	8043e0 <readWord>
  800aa8:	10bfffcc 	andi	r2,r2,65535
  800aac:	10a0001c 	xori	r2,r2,32768
  800ab0:	10a00004 	addi	r2,r2,-32768
  800ab4:	e0bffb15 	stw	r2,-20(fp)
		audioBuffer[i] = word;
  800ab8:	e0bffc17 	ldw	r2,-16(fp)
  800abc:	1085883a 	add	r2,r2,r2
  800ac0:	1085883a 	add	r2,r2,r2
  800ac4:	1007883a 	mov	r3,r2
  800ac8:	d0a70b17 	ldw	r2,-25556(gp)
  800acc:	1887883a 	add	r3,r3,r2
  800ad0:	e0bffb17 	ldw	r2,-20(fp)
  800ad4:	18800015 	stw	r2,0(r3)
		audioVolumeBuffer[i] = word;
  800ad8:	e0bffc17 	ldw	r2,-16(fp)
  800adc:	1085883a 	add	r2,r2,r2
  800ae0:	1085883a 	add	r2,r2,r2
  800ae4:	1007883a 	mov	r3,r2
  800ae8:	d0a70c17 	ldw	r2,-25552(gp)
  800aec:	1887883a 	add	r3,r3,r2
  800af0:	e0bffb17 	ldw	r2,-20(fp)
  800af4:	18800015 	stw	r2,0(r3)

	readPastWavHeader(fileHandle);

	unsigned int i;
	unsigned int word;
	for (i = 0; i < fileWordLength; i++) {
  800af8:	e0bffc17 	ldw	r2,-16(fp)
  800afc:	10800044 	addi	r2,r2,1
  800b00:	e0bffc15 	stw	r2,-16(fp)
  800b04:	e0fffc17 	ldw	r3,-16(fp)
  800b08:	e0bfff17 	ldw	r2,-4(fp)
  800b0c:	18bfe436 	bltu	r3,r2,800aa0 <readWavFile+0xa8>
		audioVolumeBuffer[i] = word;
		//printf("0x%x ", (int)word > 0 ? word : -1 * word);
	}
	//printf("reached EOF\n");

	closeFile(fileHandle);
  800b10:	e13ffd0f 	ldh	r4,-12(fp)
  800b14:	080437c0 	call	80437c <closeFile>
	return;
}
  800b18:	e037883a 	mov	sp,fp
  800b1c:	dfc00117 	ldw	ra,4(sp)
  800b20:	df000017 	ldw	fp,0(sp)
  800b24:	dec00204 	addi	sp,sp,8
  800b28:	f800283a 	ret

00800b2c <playLaser>:

// Plays laser once, using interrupts
void playLaser(void) {
  800b2c:	defffe04 	addi	sp,sp,-8
  800b30:	dfc00115 	stw	ra,4(sp)
  800b34:	df000015 	stw	fp,0(sp)
  800b38:	d839883a 	mov	fp,sp
	if (DEBUG == 1) {
  800b3c:	d0a70a17 	ldw	r2,-25560(gp)
  800b40:	10800058 	cmpnei	r2,r2,1
  800b44:	1000031e 	bne	r2,zero,800b54 <playLaser+0x28>
		printf("Playing laser via interrupt.\n");
  800b48:	010020b4 	movhi	r4,130
  800b4c:	212e0904 	addi	r4,r4,-18396
  800b50:	080974c0 	call	80974c <puts>
	}
	loadLaser();
  800b54:	08003f80 	call	8003f8 <loadLaser>
	status = LASER;
  800b58:	00800044 	movi	r2,1
  800b5c:	d0a7130d 	sth	r2,-25524(gp)
	playCursor = audioVolumeBuffer;
  800b60:	d0a70c17 	ldw	r2,-25552(gp)
  800b64:	d0a71215 	stw	r2,-25528(gp)
	playedWords = 0;
  800b68:	d0271115 	stw	zero,-25532(gp)
	alt_up_audio_enable_write_interrupt(audio);
  800b6c:	d1270817 	ldw	r4,-25568(gp)
  800b70:	081333c0 	call	81333c <alt_up_audio_enable_write_interrupt>
}
  800b74:	e037883a 	mov	sp,fp
  800b78:	dfc00117 	ldw	ra,4(sp)
  800b7c:	df000017 	ldw	fp,0(sp)
  800b80:	dec00204 	addi	sp,sp,8
  800b84:	f800283a 	ret

00800b88 <playPlayerDeath>:

void playPlayerDeath(void) {
  800b88:	defffe04 	addi	sp,sp,-8
  800b8c:	dfc00115 	stw	ra,4(sp)
  800b90:	df000015 	stw	fp,0(sp)
  800b94:	d839883a 	mov	fp,sp
	loadPlayerDeath();
  800b98:	08004c40 	call	8004c4 <loadPlayerDeath>
	status = PLAYER_DEATH;
  800b9c:	00800084 	movi	r2,2
  800ba0:	d0a7130d 	sth	r2,-25524(gp)
	playCursor = audioVolumeBuffer;
  800ba4:	d0a70c17 	ldw	r2,-25552(gp)
  800ba8:	d0a71215 	stw	r2,-25528(gp)
	playedWords = 0;
  800bac:	d0271115 	stw	zero,-25532(gp)
	alt_up_audio_enable_write_interrupt(audio);
  800bb0:	d1270817 	ldw	r4,-25568(gp)
  800bb4:	081333c0 	call	81333c <alt_up_audio_enable_write_interrupt>
}
  800bb8:	e037883a 	mov	sp,fp
  800bbc:	dfc00117 	ldw	ra,4(sp)
  800bc0:	df000017 	ldw	fp,0(sp)
  800bc4:	dec00204 	addi	sp,sp,8
  800bc8:	f800283a 	ret

00800bcc <playSharkDeath>:

void playSharkDeath(void) {
  800bcc:	defffe04 	addi	sp,sp,-8
  800bd0:	dfc00115 	stw	ra,4(sp)
  800bd4:	df000015 	stw	fp,0(sp)
  800bd8:	d839883a 	mov	fp,sp
	loadSharkDeath();
  800bdc:	08005900 	call	800590 <loadSharkDeath>
	status = SHARK_DEATH;
  800be0:	008000c4 	movi	r2,3
  800be4:	d0a7130d 	sth	r2,-25524(gp)
	playCursor = audioVolumeBuffer;
  800be8:	d0a70c17 	ldw	r2,-25552(gp)
  800bec:	d0a71215 	stw	r2,-25528(gp)
	playedWords = 0;
  800bf0:	d0271115 	stw	zero,-25532(gp)
	alt_up_audio_enable_write_interrupt(audio);
  800bf4:	d1270817 	ldw	r4,-25568(gp)
  800bf8:	081333c0 	call	81333c <alt_up_audio_enable_write_interrupt>
}
  800bfc:	e037883a 	mov	sp,fp
  800c00:	dfc00117 	ldw	ra,4(sp)
  800c04:	df000017 	ldw	fp,0(sp)
  800c08:	dec00204 	addi	sp,sp,8
  800c0c:	f800283a 	ret

00800c10 <playTheme>:

void playTheme(void) {
  800c10:	defffe04 	addi	sp,sp,-8
  800c14:	dfc00115 	stw	ra,4(sp)
  800c18:	df000015 	stw	fp,0(sp)
  800c1c:	d839883a 	mov	fp,sp
	loadTheme();
  800c20:	080065c0 	call	80065c <loadTheme>
	status = THEME;
  800c24:	00800104 	movi	r2,4
  800c28:	d0a7130d 	sth	r2,-25524(gp)
	playCursor = audioVolumeBuffer;
  800c2c:	d0a70c17 	ldw	r2,-25552(gp)
  800c30:	d0a71215 	stw	r2,-25528(gp)
	playedWords = 0;
  800c34:	d0271115 	stw	zero,-25532(gp)
	alt_up_audio_enable_write_interrupt(audio);
  800c38:	d1270817 	ldw	r4,-25568(gp)
  800c3c:	081333c0 	call	81333c <alt_up_audio_enable_write_interrupt>
}
  800c40:	e037883a 	mov	sp,fp
  800c44:	dfc00117 	ldw	ra,4(sp)
  800c48:	df000017 	ldw	fp,0(sp)
  800c4c:	dec00204 	addi	sp,sp,8
  800c50:	f800283a 	ret

00800c54 <playSoundISR>:

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void playSoundISR(void* isr_context) {
#else
static void playSoundISR(void* isr_context, alt_u32 id) {
  800c54:	defff704 	addi	sp,sp,-36
  800c58:	dfc00815 	stw	ra,32(sp)
  800c5c:	df000715 	stw	fp,28(sp)
  800c60:	df000704 	addi	fp,sp,28
  800c64:	e13ffc15 	stw	r4,-16(fp)
  800c68:	e17ffd15 	stw	r5,-12(fp)
#endif
	if (status == NONE) {
  800c6c:	d0a7130b 	ldhu	r2,-25524(gp)
  800c70:	10bfffcc 	andi	r2,r2,65535
  800c74:	10a0001c 	xori	r2,r2,32768
  800c78:	10a00004 	addi	r2,r2,-32768
  800c7c:	1004c03a 	cmpne	r2,r2,zero
  800c80:	1000031e 	bne	r2,zero,800c90 <playSoundISR+0x3c>
		alt_up_audio_disable_write_interrupt(audio);
  800c84:	d1270817 	ldw	r4,-25568(gp)
  800c88:	08133880 	call	813388 <alt_up_audio_disable_write_interrupt>
		return;
  800c8c:	00003d06 	br	800d84 <playSoundISR+0x130>
	}
	int len;
	unsigned int free = alt_up_audio_write_fifo_space(audio, ALT_UP_AUDIO_LEFT);
  800c90:	d1270817 	ldw	r4,-25568(gp)
  800c94:	000b883a 	mov	r5,zero
  800c98:	08136280 	call	813628 <alt_up_audio_write_fifo_space>
  800c9c:	e0bffa15 	stw	r2,-24(fp)
	unsigned end = (unsigned)(audioVolumeBuffer) + (2 * audioFileWordLength);
  800ca0:	d0a70e17 	ldw	r2,-25544(gp)
  800ca4:	1085883a 	add	r2,r2,r2
  800ca8:	1007883a 	mov	r3,r2
  800cac:	d0a70c17 	ldw	r2,-25552(gp)
  800cb0:	1885883a 	add	r2,r3,r2
  800cb4:	e0bff915 	stw	r2,-28(fp)
	if (free >= 1) {
  800cb8:	e0bffa17 	ldw	r2,-24(fp)
  800cbc:	1005003a 	cmpeq	r2,r2,zero
  800cc0:	10002e1e 	bne	r2,zero,800d7c <playSoundISR+0x128>
		if (((int)playCursor + free >= end) ||
  800cc4:	d0a71217 	ldw	r2,-25528(gp)
  800cc8:	1007883a 	mov	r3,r2
  800ccc:	e0bffa17 	ldw	r2,-24(fp)
  800cd0:	1887883a 	add	r3,r3,r2
  800cd4:	e0bff917 	ldw	r2,-28(fp)
  800cd8:	1880052e 	bgeu	r3,r2,800cf0 <playSoundISR+0x9c>
  800cdc:	d0e71117 	ldw	r3,-25532(gp)
  800ce0:	e0bffa17 	ldw	r2,-24(fp)
  800ce4:	1887883a 	add	r3,r3,r2
  800ce8:	d0a70e17 	ldw	r2,-25544(gp)
  800cec:	18800836 	bltu	r3,r2,800d10 <playSoundISR+0xbc>
			 (playedWords + free) >= audioFileWordLength) {
			// Last chunk to play
			len = end - (int)playCursor;
  800cf0:	d0a71217 	ldw	r2,-25528(gp)
  800cf4:	1007883a 	mov	r3,r2
  800cf8:	e0bff917 	ldw	r2,-28(fp)
  800cfc:	10c5c83a 	sub	r2,r2,r3
  800d00:	e0bffb15 	stw	r2,-20(fp)
			alt_up_audio_disable_write_interrupt(audio);
  800d04:	d1270817 	ldw	r4,-25568(gp)
  800d08:	08133880 	call	813388 <alt_up_audio_disable_write_interrupt>
	}
	int len;
	unsigned int free = alt_up_audio_write_fifo_space(audio, ALT_UP_AUDIO_LEFT);
	unsigned end = (unsigned)(audioVolumeBuffer) + (2 * audioFileWordLength);
	if (free >= 1) {
		if (((int)playCursor + free >= end) ||
  800d0c:	00000206 	br	800d18 <playSoundISR+0xc4>
			 (playedWords + free) >= audioFileWordLength) {
			// Last chunk to play
			len = end - (int)playCursor;
			alt_up_audio_disable_write_interrupt(audio);
		} else {
			len = free;
  800d10:	e0bffa17 	ldw	r2,-24(fp)
  800d14:	e0bffb15 	stw	r2,-20(fp)
		}
		len = len > free ? free : len;
  800d18:	e0bffb17 	ldw	r2,-20(fp)
  800d1c:	e0fffa17 	ldw	r3,-24(fp)
  800d20:	e0ffff15 	stw	r3,-4(fp)
  800d24:	e0bffe15 	stw	r2,-8(fp)
  800d28:	e0bfff17 	ldw	r2,-4(fp)
  800d2c:	e0fffe17 	ldw	r3,-8(fp)
  800d30:	10c0022e 	bgeu	r2,r3,800d3c <playSoundISR+0xe8>
  800d34:	e0bfff17 	ldw	r2,-4(fp)
  800d38:	e0bffe15 	stw	r2,-8(fp)
  800d3c:	e0fffe17 	ldw	r3,-8(fp)
  800d40:	e0fffb15 	stw	r3,-20(fp)
		playAudioMono(len);
  800d44:	e13ffb17 	ldw	r4,-20(fp)
  800d48:	080072c0 	call	80072c <playAudioMono>
		playedWords += len;
  800d4c:	d0e71117 	ldw	r3,-25532(gp)
  800d50:	e0bffb17 	ldw	r2,-20(fp)
  800d54:	1885883a 	add	r2,r3,r2
  800d58:	d0a71115 	stw	r2,-25532(gp)
		playCursor += len;
  800d5c:	e0bffb17 	ldw	r2,-20(fp)
  800d60:	1085883a 	add	r2,r2,r2
  800d64:	1085883a 	add	r2,r2,r2
  800d68:	1007883a 	mov	r3,r2
  800d6c:	d0a71217 	ldw	r2,-25528(gp)
  800d70:	1885883a 	add	r2,r3,r2
  800d74:	d0a71215 	stw	r2,-25528(gp)
  800d78:	00000206 	br	800d84 <playSoundISR+0x130>
	} else {
		// Interrupt should not be triggered if there is no space
		alt_up_audio_disable_write_interrupt(audio);
  800d7c:	d1270817 	ldw	r4,-25568(gp)
  800d80:	08133880 	call	813388 <alt_up_audio_disable_write_interrupt>
	}
}
  800d84:	e037883a 	mov	sp,fp
  800d88:	dfc00117 	ldw	ra,4(sp)
  800d8c:	df000017 	ldw	fp,0(sp)
  800d90:	dec00204 	addi	sp,sp,8
  800d94:	f800283a 	ret

00800d98 <updateAudioWithVolume>:

void updateAudioWithVolume(char switchValues) {
  800d98:	defffd04 	addi	sp,sp,-12
  800d9c:	dfc00215 	stw	ra,8(sp)
  800da0:	df000115 	stw	fp,4(sp)
  800da4:	df000104 	addi	fp,sp,4
  800da8:	e13fff05 	stb	r4,-4(fp)

	if (laser.mainBuffer != NULL && laser.volumeBuffer != NULL){
  800dac:	008020b4 	movhi	r2,130
  800db0:	10bfa104 	addi	r2,r2,-380
  800db4:	10800017 	ldw	r2,0(r2)
  800db8:	1005003a 	cmpeq	r2,r2,zero
  800dbc:	10000c1e 	bne	r2,zero,800df0 <updateAudioWithVolume+0x58>
  800dc0:	008020b4 	movhi	r2,130
  800dc4:	10bfa104 	addi	r2,r2,-380
  800dc8:	10800117 	ldw	r2,4(r2)
  800dcc:	1005003a 	cmpeq	r2,r2,zero
  800dd0:	1000071e 	bne	r2,zero,800df0 <updateAudioWithVolume+0x58>
		changeBufferVolume(laser, switchValues);
  800dd4:	e1ffff07 	ldb	r7,-4(fp)
  800dd8:	008020b4 	movhi	r2,130
  800ddc:	10bfa104 	addi	r2,r2,-380
  800de0:	11000017 	ldw	r4,0(r2)
  800de4:	11400117 	ldw	r5,4(r2)
  800de8:	11800217 	ldw	r6,8(r2)
  800dec:	0800ed00 	call	800ed0 <changeBufferVolume>
	}
	if (playerDeath.mainBuffer != NULL && playerDeath.volumeBuffer != NULL){
  800df0:	008020b4 	movhi	r2,130
  800df4:	10bfa704 	addi	r2,r2,-356
  800df8:	10800017 	ldw	r2,0(r2)
  800dfc:	1005003a 	cmpeq	r2,r2,zero
  800e00:	10000c1e 	bne	r2,zero,800e34 <updateAudioWithVolume+0x9c>
  800e04:	008020b4 	movhi	r2,130
  800e08:	10bfa704 	addi	r2,r2,-356
  800e0c:	10800117 	ldw	r2,4(r2)
  800e10:	1005003a 	cmpeq	r2,r2,zero
  800e14:	1000071e 	bne	r2,zero,800e34 <updateAudioWithVolume+0x9c>
		changeBufferVolume(playerDeath, switchValues);
  800e18:	e1ffff07 	ldb	r7,-4(fp)
  800e1c:	008020b4 	movhi	r2,130
  800e20:	10bfa704 	addi	r2,r2,-356
  800e24:	11000017 	ldw	r4,0(r2)
  800e28:	11400117 	ldw	r5,4(r2)
  800e2c:	11800217 	ldw	r6,8(r2)
  800e30:	0800ed00 	call	800ed0 <changeBufferVolume>
	}
	if (sharkDeath.mainBuffer != NULL && sharkDeath.volumeBuffer != NULL) {
  800e34:	008020b4 	movhi	r2,130
  800e38:	10bf9e04 	addi	r2,r2,-392
  800e3c:	10800017 	ldw	r2,0(r2)
  800e40:	1005003a 	cmpeq	r2,r2,zero
  800e44:	10000c1e 	bne	r2,zero,800e78 <updateAudioWithVolume+0xe0>
  800e48:	008020b4 	movhi	r2,130
  800e4c:	10bf9e04 	addi	r2,r2,-392
  800e50:	10800117 	ldw	r2,4(r2)
  800e54:	1005003a 	cmpeq	r2,r2,zero
  800e58:	1000071e 	bne	r2,zero,800e78 <updateAudioWithVolume+0xe0>
		changeBufferVolume(sharkDeath, switchValues);
  800e5c:	e1ffff07 	ldb	r7,-4(fp)
  800e60:	008020b4 	movhi	r2,130
  800e64:	10bf9e04 	addi	r2,r2,-392
  800e68:	11000017 	ldw	r4,0(r2)
  800e6c:	11400117 	ldw	r5,4(r2)
  800e70:	11800217 	ldw	r6,8(r2)
  800e74:	0800ed00 	call	800ed0 <changeBufferVolume>
	}
	if (theme.mainBuffer != NULL && theme.volumeBuffer != NULL) {
  800e78:	008020b4 	movhi	r2,130
  800e7c:	10bfa404 	addi	r2,r2,-368
  800e80:	10800017 	ldw	r2,0(r2)
  800e84:	1005003a 	cmpeq	r2,r2,zero
  800e88:	10000c1e 	bne	r2,zero,800ebc <updateAudioWithVolume+0x124>
  800e8c:	008020b4 	movhi	r2,130
  800e90:	10bfa404 	addi	r2,r2,-368
  800e94:	10800117 	ldw	r2,4(r2)
  800e98:	1005003a 	cmpeq	r2,r2,zero
  800e9c:	1000071e 	bne	r2,zero,800ebc <updateAudioWithVolume+0x124>
		changeBufferVolume(theme, switchValues);
  800ea0:	e1ffff07 	ldb	r7,-4(fp)
  800ea4:	008020b4 	movhi	r2,130
  800ea8:	10bfa404 	addi	r2,r2,-368
  800eac:	11000017 	ldw	r4,0(r2)
  800eb0:	11400117 	ldw	r5,4(r2)
  800eb4:	11800217 	ldw	r6,8(r2)
  800eb8:	0800ed00 	call	800ed0 <changeBufferVolume>
	}

	return;
}
  800ebc:	e037883a 	mov	sp,fp
  800ec0:	dfc00117 	ldw	ra,4(sp)
  800ec4:	df000017 	ldw	fp,0(sp)
  800ec8:	dec00204 	addi	sp,sp,8
  800ecc:	f800283a 	ret

00800ed0 <changeBufferVolume>:

void changeBufferVolume(struct audioInfo currentAudioInfo, char switchValues) {
  800ed0:	defff704 	addi	sp,sp,-36
  800ed4:	dfc00815 	stw	ra,32(sp)
  800ed8:	df000715 	stw	fp,28(sp)
  800edc:	df000704 	addi	fp,sp,28
  800ee0:	e13ffc15 	stw	r4,-16(fp)
  800ee4:	e17ffd15 	stw	r5,-12(fp)
  800ee8:	e1bffe15 	stw	r6,-8(fp)
  800eec:	e1ffff05 	stb	r7,-4(fp)
	int i;
	short volumeKeys = switchValues & 0x0F;
  800ef0:	e0bfff03 	ldbu	r2,-4(fp)
  800ef4:	10803fcc 	andi	r2,r2,255
  800ef8:	108003cc 	andi	r2,r2,15
  800efc:	e0bffa0d 	sth	r2,-24(fp)
	if(volumeKeys == 0x00 || volumeKeys == 0x01) {
  800f00:	e0bffa0f 	ldh	r2,-24(fp)
  800f04:	1005003a 	cmpeq	r2,r2,zero
  800f08:	1000031e 	bne	r2,zero,800f18 <changeBufferVolume+0x48>
  800f0c:	e0bffa0f 	ldh	r2,-24(fp)
  800f10:	10800058 	cmpnei	r2,r2,1
  800f14:	10001b1e 	bne	r2,zero,800f84 <changeBufferVolume+0xb4>
		short shiftLength = 2 - volumeKeys;
  800f18:	e0fffa0b 	ldhu	r3,-24(fp)
  800f1c:	00800084 	movi	r2,2
  800f20:	10c5c83a 	sub	r2,r2,r3
  800f24:	e0bff98d 	sth	r2,-26(fp)
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  800f28:	e03ffb15 	stw	zero,-20(fp)
  800f2c:	00001106 	br	800f74 <changeBufferVolume+0xa4>
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) >> shiftLength;
  800f30:	e0fffd17 	ldw	r3,-12(fp)
  800f34:	e0bffb17 	ldw	r2,-20(fp)
  800f38:	1085883a 	add	r2,r2,r2
  800f3c:	1085883a 	add	r2,r2,r2
  800f40:	1889883a 	add	r4,r3,r2
  800f44:	e0fffc17 	ldw	r3,-16(fp)
  800f48:	e0bffb17 	ldw	r2,-20(fp)
  800f4c:	1085883a 	add	r2,r2,r2
  800f50:	1085883a 	add	r2,r2,r2
  800f54:	1885883a 	add	r2,r3,r2
  800f58:	10c00017 	ldw	r3,0(r2)
  800f5c:	e0bff98f 	ldh	r2,-26(fp)
  800f60:	1884d83a 	srl	r2,r3,r2
  800f64:	20800015 	stw	r2,0(r4)
void changeBufferVolume(struct audioInfo currentAudioInfo, char switchValues) {
	int i;
	short volumeKeys = switchValues & 0x0F;
	if(volumeKeys == 0x00 || volumeKeys == 0x01) {
		short shiftLength = 2 - volumeKeys;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  800f68:	e0bffb17 	ldw	r2,-20(fp)
  800f6c:	10800044 	addi	r2,r2,1
  800f70:	e0bffb15 	stw	r2,-20(fp)
  800f74:	e0fffb17 	ldw	r3,-20(fp)
  800f78:	e0bffe17 	ldw	r2,-8(fp)
  800f7c:	18bfec36 	bltu	r3,r2,800f30 <changeBufferVolume+0x60>
}

void changeBufferVolume(struct audioInfo currentAudioInfo, char switchValues) {
	int i;
	short volumeKeys = switchValues & 0x0F;
	if(volumeKeys == 0x00 || volumeKeys == 0x01) {
  800f80:	00004806 	br	8010a4 <changeBufferVolume+0x1d4>
		short shiftLength = 2 - volumeKeys;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) >> shiftLength;
		}
	} else if(volumeKeys == 0x07 || volumeKeys == 0x0F) {
  800f84:	e0bffa0f 	ldh	r2,-24(fp)
  800f88:	108001e0 	cmpeqi	r2,r2,7
  800f8c:	1000031e 	bne	r2,zero,800f9c <changeBufferVolume+0xcc>
  800f90:	e0bffa0f 	ldh	r2,-24(fp)
  800f94:	108003d8 	cmpnei	r2,r2,15
  800f98:	10001c1e 	bne	r2,zero,80100c <changeBufferVolume+0x13c>
		short shiftLength = (volumeKeys % 7) + 1;
  800f9c:	e13ffa0f 	ldh	r4,-24(fp)
  800fa0:	014001c4 	movi	r5,7
  800fa4:	08085f80 	call	8085f8 <__modsi3>
  800fa8:	10800044 	addi	r2,r2,1
  800fac:	e0bff90d 	sth	r2,-28(fp)
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  800fb0:	e03ffb15 	stw	zero,-20(fp)
  800fb4:	00001106 	br	800ffc <changeBufferVolume+0x12c>
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) << shiftLength;
  800fb8:	e0fffd17 	ldw	r3,-12(fp)
  800fbc:	e0bffb17 	ldw	r2,-20(fp)
  800fc0:	1085883a 	add	r2,r2,r2
  800fc4:	1085883a 	add	r2,r2,r2
  800fc8:	1889883a 	add	r4,r3,r2
  800fcc:	e0fffc17 	ldw	r3,-16(fp)
  800fd0:	e0bffb17 	ldw	r2,-20(fp)
  800fd4:	1085883a 	add	r2,r2,r2
  800fd8:	1085883a 	add	r2,r2,r2
  800fdc:	1885883a 	add	r2,r3,r2
  800fe0:	10c00017 	ldw	r3,0(r2)
  800fe4:	e0bff90f 	ldh	r2,-28(fp)
  800fe8:	1884983a 	sll	r2,r3,r2
  800fec:	20800015 	stw	r2,0(r4)
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) >> shiftLength;
		}
	} else if(volumeKeys == 0x07 || volumeKeys == 0x0F) {
		short shiftLength = (volumeKeys % 7) + 1;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  800ff0:	e0bffb17 	ldw	r2,-20(fp)
  800ff4:	10800044 	addi	r2,r2,1
  800ff8:	e0bffb15 	stw	r2,-20(fp)
  800ffc:	e0fffb17 	ldw	r3,-20(fp)
  801000:	e0bffe17 	ldw	r2,-8(fp)
  801004:	18bfec36 	bltu	r3,r2,800fb8 <changeBufferVolume+0xe8>
	if(volumeKeys == 0x00 || volumeKeys == 0x01) {
		short shiftLength = 2 - volumeKeys;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) >> shiftLength;
		}
	} else if(volumeKeys == 0x07 || volumeKeys == 0x0F) {
  801008:	00002606 	br	8010a4 <changeBufferVolume+0x1d4>
		short shiftLength = (volumeKeys % 7) + 1;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) << shiftLength;
		}
	} else if(volumeKeys == 0x03) {
  80100c:	e0bffa0f 	ldh	r2,-24(fp)
  801010:	108000d8 	cmpnei	r2,r2,3
  801014:	1000151e 	bne	r2,zero,80106c <changeBufferVolume+0x19c>
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  801018:	e03ffb15 	stw	zero,-20(fp)
  80101c:	00000f06 	br	80105c <changeBufferVolume+0x18c>
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i);
  801020:	e0fffd17 	ldw	r3,-12(fp)
  801024:	e0bffb17 	ldw	r2,-20(fp)
  801028:	1085883a 	add	r2,r2,r2
  80102c:	1085883a 	add	r2,r2,r2
  801030:	1887883a 	add	r3,r3,r2
  801034:	e13ffc17 	ldw	r4,-16(fp)
  801038:	e0bffb17 	ldw	r2,-20(fp)
  80103c:	1085883a 	add	r2,r2,r2
  801040:	1085883a 	add	r2,r2,r2
  801044:	2085883a 	add	r2,r4,r2
  801048:	10800017 	ldw	r2,0(r2)
  80104c:	18800015 	stw	r2,0(r3)
		short shiftLength = (volumeKeys % 7) + 1;
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i) << shiftLength;
		}
	} else if(volumeKeys == 0x03) {
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  801050:	e0bffb17 	ldw	r2,-20(fp)
  801054:	10800044 	addi	r2,r2,1
  801058:	e0bffb15 	stw	r2,-20(fp)
  80105c:	e0fffb17 	ldw	r3,-20(fp)
  801060:	e0bffe17 	ldw	r2,-8(fp)
  801064:	18bfee36 	bltu	r3,r2,801020 <changeBufferVolume+0x150>
  801068:	00000e06 	br	8010a4 <changeBufferVolume+0x1d4>
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i);
		}
	} else {
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  80106c:	e03ffb15 	stw	zero,-20(fp)
  801070:	00000906 	br	801098 <changeBufferVolume+0x1c8>
			*(currentAudioInfo.volumeBuffer + i) = 0; //mute on all other combos
  801074:	e0fffd17 	ldw	r3,-12(fp)
  801078:	e0bffb17 	ldw	r2,-20(fp)
  80107c:	1085883a 	add	r2,r2,r2
  801080:	1085883a 	add	r2,r2,r2
  801084:	1885883a 	add	r2,r3,r2
  801088:	10000015 	stw	zero,0(r2)
	} else if(volumeKeys == 0x03) {
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
			*(currentAudioInfo.volumeBuffer + i) = *(currentAudioInfo.mainBuffer + i);
		}
	} else {
		for(i = 0; i < currentAudioInfo.bufferLength; i++) {
  80108c:	e0bffb17 	ldw	r2,-20(fp)
  801090:	10800044 	addi	r2,r2,1
  801094:	e0bffb15 	stw	r2,-20(fp)
  801098:	e0fffb17 	ldw	r3,-20(fp)
  80109c:	e0bffe17 	ldw	r2,-8(fp)
  8010a0:	18bff436 	bltu	r3,r2,801074 <changeBufferVolume+0x1a4>
			*(currentAudioInfo.volumeBuffer + i) = 0; //mute on all other combos
		}
	}

	return;
}
  8010a4:	e037883a 	mov	sp,fp
  8010a8:	dfc00117 	ldw	ra,4(sp)
  8010ac:	df000017 	ldw	fp,0(sp)
  8010b0:	dec00204 	addi	sp,sp,8
  8010b4:	f800283a 	ret

008010b8 <parseBmp>:
#include "bmp.h"

void parseBmp (char *fileName, BMP *bmp) {
  8010b8:	defff304 	addi	sp,sp,-52
  8010bc:	dfc00c15 	stw	ra,48(sp)
  8010c0:	df000b15 	stw	fp,44(sp)
  8010c4:	dc000a15 	stw	r16,40(sp)
  8010c8:	df000a04 	addi	fp,sp,40
  8010cc:	e13ffd15 	stw	r4,-12(fp)
  8010d0:	e17ffe15 	stw	r5,-8(fp)
	int i, j, k;
	int pixels, rowOffset, offset;
	short int fh;

	fh = openFile(fileName);
  8010d4:	e13ffd17 	ldw	r4,-12(fp)
  8010d8:	080433c0 	call	80433c <openFile>
  8010dc:	e0bff60d 	sth	r2,-40(fp)

	bmp->header.type = readWord(fh);
  8010e0:	e13ff60f 	ldh	r4,-40(fp)
  8010e4:	08043e00 	call	8043e0 <readWord>
  8010e8:	1007883a 	mov	r3,r2
  8010ec:	e0bffe17 	ldw	r2,-8(fp)
  8010f0:	10c0000d 	sth	r3,0(r2)
	bmp->header.size = readDWord(fh);
  8010f4:	e13ff60f 	ldh	r4,-40(fp)
  8010f8:	08044740 	call	804474 <readDWord>
  8010fc:	1007883a 	mov	r3,r2
  801100:	e0bffe17 	ldw	r2,-8(fp)
  801104:	10c00115 	stw	r3,4(r2)
	bmp->header.reserved1 = readWord(fh);
  801108:	e13ff60f 	ldh	r4,-40(fp)
  80110c:	08043e00 	call	8043e0 <readWord>
  801110:	1007883a 	mov	r3,r2
  801114:	e0bffe17 	ldw	r2,-8(fp)
  801118:	10c0020d 	sth	r3,8(r2)
	bmp->header.reserved2 = readWord(fh);
  80111c:	e13ff60f 	ldh	r4,-40(fp)
  801120:	08043e00 	call	8043e0 <readWord>
  801124:	1007883a 	mov	r3,r2
  801128:	e0bffe17 	ldw	r2,-8(fp)
  80112c:	10c0028d 	sth	r3,10(r2)
	bmp->header.offset = readDWord(fh);
  801130:	e13ff60f 	ldh	r4,-40(fp)
  801134:	08044740 	call	804474 <readDWord>
  801138:	1007883a 	mov	r3,r2
  80113c:	e0bffe17 	ldw	r2,-8(fp)
  801140:	10c00315 	stw	r3,12(r2)

	bmp->infoheader.size = readDWord(fh);
  801144:	e13ff60f 	ldh	r4,-40(fp)
  801148:	08044740 	call	804474 <readDWord>
  80114c:	1007883a 	mov	r3,r2
  801150:	e0bffe17 	ldw	r2,-8(fp)
  801154:	10c00415 	stw	r3,16(r2)
	bmp->infoheader.width = readDWord(fh);
  801158:	e13ff60f 	ldh	r4,-40(fp)
  80115c:	08044740 	call	804474 <readDWord>
  801160:	1007883a 	mov	r3,r2
  801164:	e0bffe17 	ldw	r2,-8(fp)
  801168:	10c00515 	stw	r3,20(r2)
	bmp->infoheader.height = readDWord(fh);
  80116c:	e13ff60f 	ldh	r4,-40(fp)
  801170:	08044740 	call	804474 <readDWord>
  801174:	1007883a 	mov	r3,r2
  801178:	e0bffe17 	ldw	r2,-8(fp)
  80117c:	10c00615 	stw	r3,24(r2)
	bmp->infoheader.planes = readWord(fh);
  801180:	e13ff60f 	ldh	r4,-40(fp)
  801184:	08043e00 	call	8043e0 <readWord>
  801188:	1007883a 	mov	r3,r2
  80118c:	e0bffe17 	ldw	r2,-8(fp)
  801190:	10c0070d 	sth	r3,28(r2)
	bmp->infoheader.bits = readWord(fh);
  801194:	e13ff60f 	ldh	r4,-40(fp)
  801198:	08043e00 	call	8043e0 <readWord>
  80119c:	1007883a 	mov	r3,r2
  8011a0:	e0bffe17 	ldw	r2,-8(fp)
  8011a4:	10c0078d 	sth	r3,30(r2)
	bmp->infoheader.compression = readDWord(fh);
  8011a8:	e13ff60f 	ldh	r4,-40(fp)
  8011ac:	08044740 	call	804474 <readDWord>
  8011b0:	1007883a 	mov	r3,r2
  8011b4:	e0bffe17 	ldw	r2,-8(fp)
  8011b8:	10c00815 	stw	r3,32(r2)
	bmp->infoheader.imagesize = readDWord(fh);
  8011bc:	e13ff60f 	ldh	r4,-40(fp)
  8011c0:	08044740 	call	804474 <readDWord>
  8011c4:	1007883a 	mov	r3,r2
  8011c8:	e0bffe17 	ldw	r2,-8(fp)
  8011cc:	10c00915 	stw	r3,36(r2)
	bmp->infoheader.xresolution = readDWord(fh);
  8011d0:	e13ff60f 	ldh	r4,-40(fp)
  8011d4:	08044740 	call	804474 <readDWord>
  8011d8:	1007883a 	mov	r3,r2
  8011dc:	e0bffe17 	ldw	r2,-8(fp)
  8011e0:	10c00a15 	stw	r3,40(r2)
	bmp->infoheader.yresolution = readDWord(fh);
  8011e4:	e13ff60f 	ldh	r4,-40(fp)
  8011e8:	08044740 	call	804474 <readDWord>
  8011ec:	1007883a 	mov	r3,r2
  8011f0:	e0bffe17 	ldw	r2,-8(fp)
  8011f4:	10c00b15 	stw	r3,44(r2)
	bmp->infoheader.ncolors = readDWord(fh);
  8011f8:	e13ff60f 	ldh	r4,-40(fp)
  8011fc:	08044740 	call	804474 <readDWord>
  801200:	1007883a 	mov	r3,r2
  801204:	e0bffe17 	ldw	r2,-8(fp)
  801208:	10c00c15 	stw	r3,48(r2)
	bmp->infoheader.importantcolors = readDWord(fh);
  80120c:	e13ff60f 	ldh	r4,-40(fp)
  801210:	08044740 	call	804474 <readDWord>
  801214:	1007883a 	mov	r3,r2
  801218:	e0bffe17 	ldw	r2,-8(fp)
  80121c:	10c00d15 	stw	r3,52(r2)

	pixels = bmp->infoheader.width * bmp->infoheader.height;
  801220:	e0bffe17 	ldw	r2,-8(fp)
  801224:	10c00517 	ldw	r3,20(r2)
  801228:	e0bffe17 	ldw	r2,-8(fp)
  80122c:	10800617 	ldw	r2,24(r2)
  801230:	1885383a 	mul	r2,r3,r2
  801234:	e0bff915 	stw	r2,-28(fp)
	bmp->rgb = malloc(BYTES_PER_PIXEL * pixels);
  801238:	e0fff917 	ldw	r3,-28(fp)
  80123c:	1805883a 	mov	r2,r3
  801240:	1085883a 	add	r2,r2,r2
  801244:	10c5883a 	add	r2,r2,r3
  801248:	1009883a 	mov	r4,r2
  80124c:	0808ee00 	call	808ee0 <malloc>
  801250:	1007883a 	mov	r3,r2
  801254:	e0bffe17 	ldw	r2,-8(fp)
  801258:	10c00e15 	stw	r3,56(r2)

	for(i = 0; i < bmp->infoheader.height; i++) {
  80125c:	e03ffc15 	stw	zero,-16(fp)
  801260:	00009a06 	br	8014cc <parseBmp+0x414>
		rowOffset = i*bmp->infoheader.width;
  801264:	e0bffe17 	ldw	r2,-8(fp)
  801268:	10c00517 	ldw	r3,20(r2)
  80126c:	e0bffc17 	ldw	r2,-16(fp)
  801270:	1885383a 	mul	r2,r3,r2
  801274:	e0bff815 	stw	r2,-32(fp)
		for(j = 0; j < bmp->infoheader.width; j++ ){
  801278:	e03ffb15 	stw	zero,-20(fp)
  80127c:	00006206 	br	801408 <parseBmp+0x350>
			offset = pixels - rowOffset - j - 1;
  801280:	e0fff917 	ldw	r3,-28(fp)
  801284:	e0bff817 	ldw	r2,-32(fp)
  801288:	1887c83a 	sub	r3,r3,r2
  80128c:	e0bffb17 	ldw	r2,-20(fp)
  801290:	1885c83a 	sub	r2,r3,r2
  801294:	10bfffc4 	addi	r2,r2,-1
  801298:	e0bff715 	stw	r2,-36(fp)

			(bmp->rgb + offset)->b = (readByte(fh) & 0xF1) >> 3;
  80129c:	e0bffe17 	ldw	r2,-8(fp)
  8012a0:	11000e17 	ldw	r4,56(r2)
  8012a4:	e0fff717 	ldw	r3,-36(fp)
  8012a8:	1805883a 	mov	r2,r3
  8012ac:	1085883a 	add	r2,r2,r2
  8012b0:	10c5883a 	add	r2,r2,r3
  8012b4:	20a1883a 	add	r16,r4,r2
  8012b8:	e13ff60f 	ldh	r4,-40(fp)
  8012bc:	08043ac0 	call	8043ac <readByte>
  8012c0:	10803fcc 	andi	r2,r2,255
  8012c4:	10803c4c 	andi	r2,r2,241
  8012c8:	1005d0fa 	srai	r2,r2,3
  8012cc:	80800085 	stb	r2,2(r16)
			(bmp->rgb + offset)->g = (readByte(fh) & 0xFC) >> 2;
  8012d0:	e0bffe17 	ldw	r2,-8(fp)
  8012d4:	11000e17 	ldw	r4,56(r2)
  8012d8:	e0fff717 	ldw	r3,-36(fp)
  8012dc:	1805883a 	mov	r2,r3
  8012e0:	1085883a 	add	r2,r2,r2
  8012e4:	10c5883a 	add	r2,r2,r3
  8012e8:	20a1883a 	add	r16,r4,r2
  8012ec:	e13ff60f 	ldh	r4,-40(fp)
  8012f0:	08043ac0 	call	8043ac <readByte>
  8012f4:	10803fcc 	andi	r2,r2,255
  8012f8:	10803f0c 	andi	r2,r2,252
  8012fc:	1005d0ba 	srai	r2,r2,2
  801300:	80800045 	stb	r2,1(r16)
			(bmp->rgb + offset)->r = (readByte(fh) & 0xF1) >> 3;
  801304:	e0bffe17 	ldw	r2,-8(fp)
  801308:	11000e17 	ldw	r4,56(r2)
  80130c:	e0fff717 	ldw	r3,-36(fp)
  801310:	1805883a 	mov	r2,r3
  801314:	1085883a 	add	r2,r2,r2
  801318:	10c5883a 	add	r2,r2,r3
  80131c:	20a1883a 	add	r16,r4,r2
  801320:	e13ff60f 	ldh	r4,-40(fp)
  801324:	08043ac0 	call	8043ac <readByte>
  801328:	10803fcc 	andi	r2,r2,255
  80132c:	10803c4c 	andi	r2,r2,241
  801330:	1005d0fa 	srai	r2,r2,3
  801334:	80800005 	stb	r2,0(r16)

			//Filter out the pink pixels
			if (((bmp->rgb + offset)->b == 0x1E) && ((bmp->rgb + offset)->g == 0) && ((bmp->rgb + offset)->r == 0x1E)) {
  801338:	e0bffe17 	ldw	r2,-8(fp)
  80133c:	11000e17 	ldw	r4,56(r2)
  801340:	e0fff717 	ldw	r3,-36(fp)
  801344:	1805883a 	mov	r2,r3
  801348:	1085883a 	add	r2,r2,r2
  80134c:	10c5883a 	add	r2,r2,r3
  801350:	2085883a 	add	r2,r4,r2
  801354:	10800083 	ldbu	r2,2(r2)
  801358:	10803fcc 	andi	r2,r2,255
  80135c:	10800798 	cmpnei	r2,r2,30
  801360:	1000261e 	bne	r2,zero,8013fc <parseBmp+0x344>
  801364:	e0bffe17 	ldw	r2,-8(fp)
  801368:	11000e17 	ldw	r4,56(r2)
  80136c:	e0fff717 	ldw	r3,-36(fp)
  801370:	1805883a 	mov	r2,r3
  801374:	1085883a 	add	r2,r2,r2
  801378:	10c5883a 	add	r2,r2,r3
  80137c:	2085883a 	add	r2,r4,r2
  801380:	10800043 	ldbu	r2,1(r2)
  801384:	10803fcc 	andi	r2,r2,255
  801388:	1004c03a 	cmpne	r2,r2,zero
  80138c:	10001b1e 	bne	r2,zero,8013fc <parseBmp+0x344>
  801390:	e0bffe17 	ldw	r2,-8(fp)
  801394:	11000e17 	ldw	r4,56(r2)
  801398:	e0fff717 	ldw	r3,-36(fp)
  80139c:	1805883a 	mov	r2,r3
  8013a0:	1085883a 	add	r2,r2,r2
  8013a4:	10c5883a 	add	r2,r2,r3
  8013a8:	2085883a 	add	r2,r4,r2
  8013ac:	10800003 	ldbu	r2,0(r2)
  8013b0:	10803fcc 	andi	r2,r2,255
  8013b4:	10800798 	cmpnei	r2,r2,30
  8013b8:	1000101e 	bne	r2,zero,8013fc <parseBmp+0x344>
				(bmp->rgb + offset)->b = 0x0;
  8013bc:	e0bffe17 	ldw	r2,-8(fp)
  8013c0:	11000e17 	ldw	r4,56(r2)
  8013c4:	e0fff717 	ldw	r3,-36(fp)
  8013c8:	1805883a 	mov	r2,r3
  8013cc:	1085883a 	add	r2,r2,r2
  8013d0:	10c5883a 	add	r2,r2,r3
  8013d4:	2085883a 	add	r2,r4,r2
  8013d8:	10000085 	stb	zero,2(r2)
				(bmp->rgb + offset)->r = 0x0;
  8013dc:	e0bffe17 	ldw	r2,-8(fp)
  8013e0:	11000e17 	ldw	r4,56(r2)
  8013e4:	e0fff717 	ldw	r3,-36(fp)
  8013e8:	1805883a 	mov	r2,r3
  8013ec:	1085883a 	add	r2,r2,r2
  8013f0:	10c5883a 	add	r2,r2,r3
  8013f4:	2085883a 	add	r2,r4,r2
  8013f8:	10000005 	stb	zero,0(r2)
	pixels = bmp->infoheader.width * bmp->infoheader.height;
	bmp->rgb = malloc(BYTES_PER_PIXEL * pixels);

	for(i = 0; i < bmp->infoheader.height; i++) {
		rowOffset = i*bmp->infoheader.width;
		for(j = 0; j < bmp->infoheader.width; j++ ){
  8013fc:	e0bffb17 	ldw	r2,-20(fp)
  801400:	10800044 	addi	r2,r2,1
  801404:	e0bffb15 	stw	r2,-20(fp)
  801408:	e0bffe17 	ldw	r2,-8(fp)
  80140c:	10c00517 	ldw	r3,20(r2)
  801410:	e0bffb17 	ldw	r2,-20(fp)
  801414:	10ff9a16 	blt	r2,r3,801280 <parseBmp+0x1c8>
				(bmp->rgb + offset)->b = 0x0;
				(bmp->rgb + offset)->r = 0x0;
			}
		}

		if((BYTES_PER_PIXEL*bmp->infoheader.width) % 4 != 0) {
  801418:	e0bffe17 	ldw	r2,-8(fp)
  80141c:	10c00517 	ldw	r3,20(r2)
  801420:	1805883a 	mov	r2,r3
  801424:	1085883a 	add	r2,r2,r2
  801428:	10c5883a 	add	r2,r2,r3
  80142c:	108000cc 	andi	r2,r2,3
  801430:	1005003a 	cmpeq	r2,r2,zero
  801434:	1000221e 	bne	r2,zero,8014c0 <parseBmp+0x408>
			for (k = 0; k <  (4 - ((BYTES_PER_PIXEL*bmp->infoheader.width) % 4)); k++) {
  801438:	e03ffa15 	stw	zero,-24(fp)
  80143c:	00000506 	br	801454 <parseBmp+0x39c>
				readByte(fh);
  801440:	e13ff60f 	ldh	r4,-40(fp)
  801444:	08043ac0 	call	8043ac <readByte>
				(bmp->rgb + offset)->r = 0x0;
			}
		}

		if((BYTES_PER_PIXEL*bmp->infoheader.width) % 4 != 0) {
			for (k = 0; k <  (4 - ((BYTES_PER_PIXEL*bmp->infoheader.width) % 4)); k++) {
  801448:	e0bffa17 	ldw	r2,-24(fp)
  80144c:	10800044 	addi	r2,r2,1
  801450:	e0bffa15 	stw	r2,-24(fp)
  801454:	e0bffe17 	ldw	r2,-8(fp)
  801458:	10c00517 	ldw	r3,20(r2)
  80145c:	1805883a 	mov	r2,r3
  801460:	1085883a 	add	r2,r2,r2
  801464:	10c7883a 	add	r3,r2,r3
  801468:	00a00034 	movhi	r2,32768
  80146c:	108000c4 	addi	r2,r2,3
  801470:	1886703a 	and	r3,r3,r2
  801474:	e0ffff15 	stw	r3,-4(fp)
  801478:	e0ffff17 	ldw	r3,-4(fp)
  80147c:	1804403a 	cmpge	r2,r3,zero
  801480:	10000a1e 	bne	r2,zero,8014ac <parseBmp+0x3f4>
  801484:	e0bfff17 	ldw	r2,-4(fp)
  801488:	10bfffc4 	addi	r2,r2,-1
  80148c:	e0bfff15 	stw	r2,-4(fp)
  801490:	00bfff04 	movi	r2,-4
  801494:	e0ffff17 	ldw	r3,-4(fp)
  801498:	1886b03a 	or	r3,r3,r2
  80149c:	e0ffff15 	stw	r3,-4(fp)
  8014a0:	e0bfff17 	ldw	r2,-4(fp)
  8014a4:	10800044 	addi	r2,r2,1
  8014a8:	e0bfff15 	stw	r2,-4(fp)
  8014ac:	e0ffff17 	ldw	r3,-4(fp)
  8014b0:	00800104 	movi	r2,4
  8014b4:	10c7c83a 	sub	r3,r2,r3
  8014b8:	e0bffa17 	ldw	r2,-24(fp)
  8014bc:	10ffe016 	blt	r2,r3,801440 <parseBmp+0x388>
	bmp->infoheader.importantcolors = readDWord(fh);

	pixels = bmp->infoheader.width * bmp->infoheader.height;
	bmp->rgb = malloc(BYTES_PER_PIXEL * pixels);

	for(i = 0; i < bmp->infoheader.height; i++) {
  8014c0:	e0bffc17 	ldw	r2,-16(fp)
  8014c4:	10800044 	addi	r2,r2,1
  8014c8:	e0bffc15 	stw	r2,-16(fp)
  8014cc:	e0bffe17 	ldw	r2,-8(fp)
  8014d0:	10c00617 	ldw	r3,24(r2)
  8014d4:	e0bffc17 	ldw	r2,-16(fp)
  8014d8:	10ff6216 	blt	r2,r3,801264 <parseBmp+0x1ac>
				readByte(fh);
			}
		}
	}

	closeFile(fh);
  8014dc:	e13ff60f 	ldh	r4,-40(fp)
  8014e0:	080437c0 	call	80437c <closeFile>
}
  8014e4:	e037883a 	mov	sp,fp
  8014e8:	dfc00217 	ldw	ra,8(sp)
  8014ec:	df000117 	ldw	fp,4(sp)
  8014f0:	dc000017 	ldw	r16,0(sp)
  8014f4:	dec00304 	addi	sp,sp,12
  8014f8:	f800283a 	ret

008014fc <parseBmps>:

void parseBmps() {
  8014fc:	defffe04 	addi	sp,sp,-8
  801500:	dfc00115 	stw	ra,4(sp)
  801504:	df000015 	stw	fp,0(sp)
  801508:	d839883a 	mov	fp,sp
	splashBmp = malloc(sizeof(BMP));
  80150c:	01000f04 	movi	r4,60
  801510:	0808ee00 	call	808ee0 <malloc>
  801514:	d0a71815 	stw	r2,-25504(gp)
	sharkBmp = malloc(sizeof(BMP));
  801518:	01000f04 	movi	r4,60
  80151c:	0808ee00 	call	808ee0 <malloc>
  801520:	d0a71715 	stw	r2,-25508(gp)
	playerBmp = malloc(sizeof(BMP));
  801524:	01000f04 	movi	r4,60
  801528:	0808ee00 	call	808ee0 <malloc>
  80152c:	d0a71a15 	stw	r2,-25496(gp)

	parseBmp("splash.bmp", splashBmp);
  801530:	d1671817 	ldw	r5,-25504(gp)
  801534:	010020b4 	movhi	r4,130
  801538:	212e1104 	addi	r4,r4,-18364
  80153c:	08010b80 	call	8010b8 <parseBmp>
	parseBmp("shark.bmp", sharkBmp);
  801540:	d1671717 	ldw	r5,-25508(gp)
  801544:	010020b4 	movhi	r4,130
  801548:	212e1404 	addi	r4,r4,-18352
  80154c:	08010b80 	call	8010b8 <parseBmp>
	parseBmp("player.bmp", playerBmp);
  801550:	d1671a17 	ldw	r5,-25496(gp)
  801554:	010020b4 	movhi	r4,130
  801558:	212e1704 	addi	r4,r4,-18340
  80155c:	08010b80 	call	8010b8 <parseBmp>
}
  801560:	e037883a 	mov	sp,fp
  801564:	dfc00117 	ldw	ra,4(sp)
  801568:	df000017 	ldw	fp,0(sp)
  80156c:	dec00204 	addi	sp,sp,8
  801570:	f800283a 	ret

00801574 <freeBmps>:

void freeBmps(){
  801574:	defffe04 	addi	sp,sp,-8
  801578:	dfc00115 	stw	ra,4(sp)
  80157c:	df000015 	stw	fp,0(sp)
  801580:	d839883a 	mov	fp,sp
	free(playerBmp->rgb);
  801584:	d0a71a17 	ldw	r2,-25496(gp)
  801588:	11000e17 	ldw	r4,56(r2)
  80158c:	0808ecc0 	call	808ecc <free>
	free(sharkBmp->rgb);
  801590:	d0a71717 	ldw	r2,-25508(gp)
  801594:	11000e17 	ldw	r4,56(r2)
  801598:	0808ecc0 	call	808ecc <free>

	free(sharkBmp);
  80159c:	d1271717 	ldw	r4,-25508(gp)
  8015a0:	0808ecc0 	call	808ecc <free>
	free(playerBmp);
  8015a4:	d1271a17 	ldw	r4,-25496(gp)
  8015a8:	0808ecc0 	call	808ecc <free>
}
  8015ac:	e037883a 	mov	sp,fp
  8015b0:	dfc00117 	ldw	ra,4(sp)
  8015b4:	df000017 	ldw	fp,0(sp)
  8015b8:	dec00204 	addi	sp,sp,8
  8015bc:	f800283a 	ret

008015c0 <freeSplash>:

void freeSplash() {
  8015c0:	defffe04 	addi	sp,sp,-8
  8015c4:	dfc00115 	stw	ra,4(sp)
  8015c8:	df000015 	stw	fp,0(sp)
  8015cc:	d839883a 	mov	fp,sp
	free(splashBmp->rgb);
  8015d0:	d0a71817 	ldw	r2,-25504(gp)
  8015d4:	11000e17 	ldw	r4,56(r2)
  8015d8:	0808ecc0 	call	808ecc <free>
	free(splashBmp);
  8015dc:	d1271817 	ldw	r4,-25504(gp)
  8015e0:	0808ecc0 	call	808ecc <free>
}
  8015e4:	e037883a 	mov	sp,fp
  8015e8:	dfc00117 	ldw	ra,4(sp)
  8015ec:	df000017 	ldw	fp,0(sp)
  8015f0:	dec00204 	addi	sp,sp,8
  8015f4:	f800283a 	ret

008015f8 <drawBmp>:


void drawBmp (BMP *bmp, int x, int y) {
  8015f8:	defff804 	addi	sp,sp,-32
  8015fc:	dfc00715 	stw	ra,28(sp)
  801600:	df000615 	stw	fp,24(sp)
  801604:	df000604 	addi	fp,sp,24
  801608:	e13ffd15 	stw	r4,-12(fp)
  80160c:	e17ffe15 	stw	r5,-8(fp)
  801610:	e1bfff15 	stw	r6,-4(fp)
	int i,j;
	int color;

	for(i = 0; i < bmp->infoheader.height; i++) {
  801614:	e03ffc15 	stw	zero,-16(fp)
  801618:	00004906 	br	801740 <drawBmp+0x148>
		for(j = 0; j < bmp->infoheader.width; j++){
  80161c:	e03ffb15 	stw	zero,-20(fp)
  801620:	00004006 	br	801724 <drawBmp+0x12c>
			color = ((bmp->rgb + i*bmp->infoheader.width +j)->r << 11) | ((bmp->rgb + i*bmp->infoheader.width +j)->g << 5) | (bmp->rgb + i*bmp->infoheader.width +j)->b;
  801624:	e0bffd17 	ldw	r2,-12(fp)
  801628:	11000e17 	ldw	r4,56(r2)
  80162c:	e0bffd17 	ldw	r2,-12(fp)
  801630:	10c00517 	ldw	r3,20(r2)
  801634:	e0bffc17 	ldw	r2,-16(fp)
  801638:	1885383a 	mul	r2,r3,r2
  80163c:	1007883a 	mov	r3,r2
  801640:	e0bffb17 	ldw	r2,-20(fp)
  801644:	1887883a 	add	r3,r3,r2
  801648:	1805883a 	mov	r2,r3
  80164c:	1085883a 	add	r2,r2,r2
  801650:	10c5883a 	add	r2,r2,r3
  801654:	2085883a 	add	r2,r4,r2
  801658:	10800003 	ldbu	r2,0(r2)
  80165c:	10803fcc 	andi	r2,r2,255
  801660:	100892fa 	slli	r4,r2,11
  801664:	e0bffd17 	ldw	r2,-12(fp)
  801668:	11400e17 	ldw	r5,56(r2)
  80166c:	e0bffd17 	ldw	r2,-12(fp)
  801670:	10c00517 	ldw	r3,20(r2)
  801674:	e0bffc17 	ldw	r2,-16(fp)
  801678:	1885383a 	mul	r2,r3,r2
  80167c:	1007883a 	mov	r3,r2
  801680:	e0bffb17 	ldw	r2,-20(fp)
  801684:	1887883a 	add	r3,r3,r2
  801688:	1805883a 	mov	r2,r3
  80168c:	1085883a 	add	r2,r2,r2
  801690:	10c5883a 	add	r2,r2,r3
  801694:	2885883a 	add	r2,r5,r2
  801698:	10800043 	ldbu	r2,1(r2)
  80169c:	10803fcc 	andi	r2,r2,255
  8016a0:	1004917a 	slli	r2,r2,5
  8016a4:	2088b03a 	or	r4,r4,r2
  8016a8:	e0bffd17 	ldw	r2,-12(fp)
  8016ac:	11400e17 	ldw	r5,56(r2)
  8016b0:	e0bffd17 	ldw	r2,-12(fp)
  8016b4:	10c00517 	ldw	r3,20(r2)
  8016b8:	e0bffc17 	ldw	r2,-16(fp)
  8016bc:	1885383a 	mul	r2,r3,r2
  8016c0:	1007883a 	mov	r3,r2
  8016c4:	e0bffb17 	ldw	r2,-20(fp)
  8016c8:	1887883a 	add	r3,r3,r2
  8016cc:	1805883a 	mov	r2,r3
  8016d0:	1085883a 	add	r2,r2,r2
  8016d4:	10c5883a 	add	r2,r2,r3
  8016d8:	2885883a 	add	r2,r5,r2
  8016dc:	10800083 	ldbu	r2,2(r2)
  8016e0:	10803fcc 	andi	r2,r2,255
  8016e4:	2084b03a 	or	r2,r4,r2
  8016e8:	e0bffa15 	stw	r2,-24(fp)

			if(color == 0)
  8016ec:	e0bffa17 	ldw	r2,-24(fp)
  8016f0:	1005003a 	cmpeq	r2,r2,zero
  8016f4:	1000081e 	bne	r2,zero,801718 <drawBmp+0x120>
				continue;

			drawPixel(x + j, y + i, color);
  8016f8:	e0fffe17 	ldw	r3,-8(fp)
  8016fc:	e0bffb17 	ldw	r2,-20(fp)
  801700:	1889883a 	add	r4,r3,r2
  801704:	e0ffff17 	ldw	r3,-4(fp)
  801708:	e0bffc17 	ldw	r2,-16(fp)
  80170c:	188b883a 	add	r5,r3,r2
  801710:	e1bffa17 	ldw	r6,-24(fp)
  801714:	08051cc0 	call	8051cc <drawPixel>
void drawBmp (BMP *bmp, int x, int y) {
	int i,j;
	int color;

	for(i = 0; i < bmp->infoheader.height; i++) {
		for(j = 0; j < bmp->infoheader.width; j++){
  801718:	e0bffb17 	ldw	r2,-20(fp)
  80171c:	10800044 	addi	r2,r2,1
  801720:	e0bffb15 	stw	r2,-20(fp)
  801724:	e0bffd17 	ldw	r2,-12(fp)
  801728:	10c00517 	ldw	r3,20(r2)
  80172c:	e0bffb17 	ldw	r2,-20(fp)
  801730:	10ffbc16 	blt	r2,r3,801624 <drawBmp+0x2c>

void drawBmp (BMP *bmp, int x, int y) {
	int i,j;
	int color;

	for(i = 0; i < bmp->infoheader.height; i++) {
  801734:	e0bffc17 	ldw	r2,-16(fp)
  801738:	10800044 	addi	r2,r2,1
  80173c:	e0bffc15 	stw	r2,-16(fp)
  801740:	e0bffd17 	ldw	r2,-12(fp)
  801744:	10c00617 	ldw	r3,24(r2)
  801748:	e0bffc17 	ldw	r2,-16(fp)
  80174c:	10ffb316 	blt	r2,r3,80161c <drawBmp+0x24>
				continue;

			drawPixel(x + j, y + i, color);
		}
	}
}
  801750:	e037883a 	mov	sp,fp
  801754:	dfc00117 	ldw	ra,4(sp)
  801758:	df000017 	ldw	fp,0(sp)
  80175c:	dec00204 	addi	sp,sp,8
  801760:	f800283a 	ret

00801764 <eraseBmp>:

void eraseBmp (BMP *bmp, int x, int y) {
  801764:	defffa04 	addi	sp,sp,-24
  801768:	dfc00515 	stw	ra,20(sp)
  80176c:	df000415 	stw	fp,16(sp)
  801770:	df000404 	addi	fp,sp,16
  801774:	e13ffd15 	stw	r4,-12(fp)
  801778:	e17ffe15 	stw	r5,-8(fp)
  80177c:	e1bfff15 	stw	r6,-4(fp)
	drawBox(x, y, x  + bmp->infoheader.width, y + bmp->infoheader.height, 0);
  801780:	e0bffd17 	ldw	r2,-12(fp)
  801784:	10c00517 	ldw	r3,20(r2)
  801788:	e0bffe17 	ldw	r2,-8(fp)
  80178c:	188d883a 	add	r6,r3,r2
  801790:	e0bffd17 	ldw	r2,-12(fp)
  801794:	10c00617 	ldw	r3,24(r2)
  801798:	e0bfff17 	ldw	r2,-4(fp)
  80179c:	188f883a 	add	r7,r3,r2
  8017a0:	d8000015 	stw	zero,0(sp)
  8017a4:	e13ffe17 	ldw	r4,-8(fp)
  8017a8:	e17fff17 	ldw	r5,-4(fp)
  8017ac:	08053140 	call	805314 <drawBox>
}
  8017b0:	e037883a 	mov	sp,fp
  8017b4:	dfc00117 	ldw	ra,4(sp)
  8017b8:	df000017 	ldw	fp,0(sp)
  8017bc:	dec00204 	addi	sp,sp,8
  8017c0:	f800283a 	ret

008017c4 <initBullets>:
Bullet *playerBulletList = NULL;
Bullet *sharkBulletList = NULL;
int playerLaserColor;
int sharkLaserColor;

void initBullets() {
  8017c4:	defffd04 	addi	sp,sp,-12
  8017c8:	dfc00215 	stw	ra,8(sp)
  8017cc:	df000115 	stw	fp,4(sp)
  8017d0:	df000104 	addi	fp,sp,4
	int i = 0;
  8017d4:	e03fff15 	stw	zero,-4(fp)
	for (i = 0; i < NUM_BULLETS; i++) {
  8017d8:	e03fff15 	stw	zero,-4(fp)
  8017dc:	00001906 	br	801844 <initBullets+0x80>
		bulletArray[i].type = NOTACTIVE;
  8017e0:	e0bfff17 	ldw	r2,-4(fp)
  8017e4:	00c020b4 	movhi	r3,130
  8017e8:	18ffae04 	addi	r3,r3,-328
  8017ec:	1004917a 	slli	r2,r2,5
  8017f0:	10c5883a 	add	r2,r2,r3
  8017f4:	10c00404 	addi	r3,r2,16
  8017f8:	00800084 	movi	r2,2
  8017fc:	18800015 	stw	r2,0(r3)
		bulletArray[i].next = NULL;
  801800:	e0bfff17 	ldw	r2,-4(fp)
  801804:	00c020b4 	movhi	r3,130
  801808:	18ffae04 	addi	r3,r3,-328
  80180c:	1004917a 	slli	r2,r2,5
  801810:	10c5883a 	add	r2,r2,r3
  801814:	10800604 	addi	r2,r2,24
  801818:	10000015 	stw	zero,0(r2)
		bulletArray[i].prev = NULL;
  80181c:	e0bfff17 	ldw	r2,-4(fp)
  801820:	00c020b4 	movhi	r3,130
  801824:	18ffae04 	addi	r3,r3,-328
  801828:	1004917a 	slli	r2,r2,5
  80182c:	10c5883a 	add	r2,r2,r3
  801830:	10800704 	addi	r2,r2,28
  801834:	10000015 	stw	zero,0(r2)
int playerLaserColor;
int sharkLaserColor;

void initBullets() {
	int i = 0;
	for (i = 0; i < NUM_BULLETS; i++) {
  801838:	e0bfff17 	ldw	r2,-4(fp)
  80183c:	10800044 	addi	r2,r2,1
  801840:	e0bfff15 	stw	r2,-4(fp)
  801844:	e0bfff17 	ldw	r2,-4(fp)
  801848:	10802010 	cmplti	r2,r2,128
  80184c:	103fe41e 	bne	r2,zero,8017e0 <initBullets+0x1c>
		bulletArray[i].type = NOTACTIVE;
		bulletArray[i].next = NULL;
		bulletArray[i].prev = NULL;
	}

	playerLaserColor = convert24BitRgbTo16(0xFF0000);
  801850:	01003ff4 	movhi	r4,255
  801854:	08053740 	call	805374 <convert24BitRgbTo16>
  801858:	d0a71e15 	stw	r2,-25480(gp)
	sharkLaserColor = convert24BitRgbTo16(0x66FFCC);
  80185c:	010019f4 	movhi	r4,103
  801860:	213ff304 	addi	r4,r4,-52
  801864:	08053740 	call	805374 <convert24BitRgbTo16>
  801868:	d0a71d15 	stw	r2,-25484(gp)
}
  80186c:	e037883a 	mov	sp,fp
  801870:	dfc00117 	ldw	ra,4(sp)
  801874:	df000017 	ldw	fp,0(sp)
  801878:	dec00204 	addi	sp,sp,8
  80187c:	f800283a 	ret

00801880 <createBullet>:

void createBullet(bullettype type, int x, int y) {
  801880:	defff904 	addi	sp,sp,-28
  801884:	dfc00615 	stw	ra,24(sp)
  801888:	df000515 	stw	fp,20(sp)
  80188c:	df000504 	addi	fp,sp,20
  801890:	e13ffd15 	stw	r4,-12(fp)
  801894:	e17ffe15 	stw	r5,-8(fp)
  801898:	e1bfff15 	stw	r6,-4(fp)
	int index;
	Bullet *newBullet = NULL;
  80189c:	e03ffb15 	stw	zero,-20(fp)
	for (index = 0; index < NUM_BULLETS; index++) {
  8018a0:	e03ffc15 	stw	zero,-16(fp)
  8018a4:	00002306 	br	801934 <createBullet+0xb4>
		if (bulletArray[index].type == NOTACTIVE)	{
  8018a8:	e0bffc17 	ldw	r2,-16(fp)
  8018ac:	00c020b4 	movhi	r3,130
  8018b0:	18ffae04 	addi	r3,r3,-328
  8018b4:	1004917a 	slli	r2,r2,5
  8018b8:	10c5883a 	add	r2,r2,r3
  8018bc:	10800404 	addi	r2,r2,16
  8018c0:	10800017 	ldw	r2,0(r2)
  8018c4:	10800098 	cmpnei	r2,r2,2
  8018c8:	1000171e 	bne	r2,zero,801928 <createBullet+0xa8>
			newBullet = &(bulletArray[index]);
  8018cc:	e0bffc17 	ldw	r2,-16(fp)
  8018d0:	1004917a 	slli	r2,r2,5
  8018d4:	1007883a 	mov	r3,r2
  8018d8:	008020b4 	movhi	r2,130
  8018dc:	10bfae04 	addi	r2,r2,-328
  8018e0:	1885883a 	add	r2,r3,r2
  8018e4:	e0bffb15 	stw	r2,-20(fp)
			newBullet->x = x;
  8018e8:	e0fffb17 	ldw	r3,-20(fp)
  8018ec:	e0bffe17 	ldw	r2,-8(fp)
  8018f0:	18800015 	stw	r2,0(r3)
			newBullet->y = y;
  8018f4:	e0fffb17 	ldw	r3,-20(fp)
  8018f8:	e0bfff17 	ldw	r2,-4(fp)
  8018fc:	18800215 	stw	r2,8(r3)
			newBullet->prevX = x;
  801900:	e0fffb17 	ldw	r3,-20(fp)
  801904:	e0bffe17 	ldw	r2,-8(fp)
  801908:	18800115 	stw	r2,4(r3)
			newBullet->prevY = y;
  80190c:	e0fffb17 	ldw	r3,-20(fp)
  801910:	e0bfff17 	ldw	r2,-4(fp)
  801914:	18800315 	stw	r2,12(r3)
			newBullet->type = type;
  801918:	e0fffb17 	ldw	r3,-20(fp)
  80191c:	e0bffd17 	ldw	r2,-12(fp)
  801920:	18800415 	stw	r2,16(r3)

			break;
  801924:	00000606 	br	801940 <createBullet+0xc0>
}

void createBullet(bullettype type, int x, int y) {
	int index;
	Bullet *newBullet = NULL;
	for (index = 0; index < NUM_BULLETS; index++) {
  801928:	e0bffc17 	ldw	r2,-16(fp)
  80192c:	10800044 	addi	r2,r2,1
  801930:	e0bffc15 	stw	r2,-16(fp)
  801934:	e0bffc17 	ldw	r2,-16(fp)
  801938:	10802010 	cmplti	r2,r2,128
  80193c:	103fda1e 	bne	r2,zero,8018a8 <createBullet+0x28>

			break;
		}
	}

	if (type == PLAYERBULLET) {
  801940:	e0bffd17 	ldw	r2,-12(fp)
  801944:	1004c03a 	cmpne	r2,r2,zero
  801948:	10000f1e 	bne	r2,zero,801988 <createBullet+0x108>
		if (playerBulletList != NULL) {
  80194c:	d0a71b17 	ldw	r2,-25492(gp)
  801950:	1005003a 	cmpeq	r2,r2,zero
  801954:	1000031e 	bne	r2,zero,801964 <createBullet+0xe4>
			playerBulletList->prev = newBullet;
  801958:	d0e71b17 	ldw	r3,-25492(gp)
  80195c:	e0bffb17 	ldw	r2,-20(fp)
  801960:	18800715 	stw	r2,28(r3)
		}
		newBullet->next = playerBulletList;
  801964:	d0e71b17 	ldw	r3,-25492(gp)
  801968:	e0bffb17 	ldw	r2,-20(fp)
  80196c:	10c00615 	stw	r3,24(r2)
		newBullet->laserColor = playerLaserColor;
  801970:	d0e71e17 	ldw	r3,-25480(gp)
  801974:	e0bffb17 	ldw	r2,-20(fp)
  801978:	10c00515 	stw	r3,20(r2)
		playerBulletList = newBullet;
  80197c:	e0bffb17 	ldw	r2,-20(fp)
  801980:	d0a71b15 	stw	r2,-25492(gp)
  801984:	00001106 	br	8019cc <createBullet+0x14c>
	} else if (type == SHARKBULLET){
  801988:	e0bffd17 	ldw	r2,-12(fp)
  80198c:	10800058 	cmpnei	r2,r2,1
  801990:	10000e1e 	bne	r2,zero,8019cc <createBullet+0x14c>
		if (sharkBulletList != NULL) {
  801994:	d0a71c17 	ldw	r2,-25488(gp)
  801998:	1005003a 	cmpeq	r2,r2,zero
  80199c:	1000031e 	bne	r2,zero,8019ac <createBullet+0x12c>
			sharkBulletList->prev = newBullet;
  8019a0:	d0e71c17 	ldw	r3,-25488(gp)
  8019a4:	e0bffb17 	ldw	r2,-20(fp)
  8019a8:	18800715 	stw	r2,28(r3)
		}
		newBullet->next = sharkBulletList;
  8019ac:	d0e71c17 	ldw	r3,-25488(gp)
  8019b0:	e0bffb17 	ldw	r2,-20(fp)
  8019b4:	10c00615 	stw	r3,24(r2)
		newBullet->laserColor = sharkLaserColor;
  8019b8:	d0e71d17 	ldw	r3,-25484(gp)
  8019bc:	e0bffb17 	ldw	r2,-20(fp)
  8019c0:	10c00515 	stw	r3,20(r2)
		sharkBulletList = newBullet;
  8019c4:	e0bffb17 	ldw	r2,-20(fp)
  8019c8:	d0a71c15 	stw	r2,-25488(gp)
	}

	playLaser();
  8019cc:	0800b2c0 	call	800b2c <playLaser>
}
  8019d0:	e037883a 	mov	sp,fp
  8019d4:	dfc00117 	ldw	ra,4(sp)
  8019d8:	df000017 	ldw	fp,0(sp)
  8019dc:	dec00204 	addi	sp,sp,8
  8019e0:	f800283a 	ret

008019e4 <moveAllBullets>:

void moveAllBullets() {
  8019e4:	defffd04 	addi	sp,sp,-12
  8019e8:	dfc00215 	stw	ra,8(sp)
  8019ec:	df000115 	stw	fp,4(sp)
  8019f0:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  8019f4:	e03fff15 	stw	zero,-4(fp)
  8019f8:	00002406 	br	801a8c <moveAllBullets+0xa8>
		if (bulletArray[i].type == PLAYERBULLET) {
  8019fc:	e0bfff17 	ldw	r2,-4(fp)
  801a00:	00c020b4 	movhi	r3,130
  801a04:	18ffae04 	addi	r3,r3,-328
  801a08:	1004917a 	slli	r2,r2,5
  801a0c:	10c5883a 	add	r2,r2,r3
  801a10:	10800404 	addi	r2,r2,16
  801a14:	10800017 	ldw	r2,0(r2)
  801a18:	1004c03a 	cmpne	r2,r2,zero
  801a1c:	1000081e 	bne	r2,zero,801a40 <moveAllBullets+0x5c>
			moveBulletRight(&bulletArray[i]);
  801a20:	e0bfff17 	ldw	r2,-4(fp)
  801a24:	1004917a 	slli	r2,r2,5
  801a28:	1007883a 	mov	r3,r2
  801a2c:	008020b4 	movhi	r2,130
  801a30:	10bfae04 	addi	r2,r2,-328
  801a34:	1889883a 	add	r4,r3,r2
  801a38:	0801cc00 	call	801cc0 <moveBulletRight>
  801a3c:	00001006 	br	801a80 <moveAllBullets+0x9c>
		} else if (bulletArray[i].type == SHARKBULLET) {
  801a40:	e0bfff17 	ldw	r2,-4(fp)
  801a44:	00c020b4 	movhi	r3,130
  801a48:	18ffae04 	addi	r3,r3,-328
  801a4c:	1004917a 	slli	r2,r2,5
  801a50:	10c5883a 	add	r2,r2,r3
  801a54:	10800404 	addi	r2,r2,16
  801a58:	10800017 	ldw	r2,0(r2)
  801a5c:	10800058 	cmpnei	r2,r2,1
  801a60:	1000071e 	bne	r2,zero,801a80 <moveAllBullets+0x9c>
			moveBulletLeft(&bulletArray[i]);
  801a64:	e0bfff17 	ldw	r2,-4(fp)
  801a68:	1004917a 	slli	r2,r2,5
  801a6c:	1007883a 	mov	r3,r2
  801a70:	008020b4 	movhi	r2,130
  801a74:	10bfae04 	addi	r2,r2,-328
  801a78:	1889883a 	add	r4,r3,r2
  801a7c:	0801dbc0 	call	801dbc <moveBulletLeft>
	playLaser();
}

void moveAllBullets() {
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801a80:	e0bfff17 	ldw	r2,-4(fp)
  801a84:	10800044 	addi	r2,r2,1
  801a88:	e0bfff15 	stw	r2,-4(fp)
  801a8c:	e0bfff17 	ldw	r2,-4(fp)
  801a90:	10802010 	cmplti	r2,r2,128
  801a94:	103fd91e 	bne	r2,zero,8019fc <moveAllBullets+0x18>
			moveBulletRight(&bulletArray[i]);
		} else if (bulletArray[i].type == SHARKBULLET) {
			moveBulletLeft(&bulletArray[i]);
		}
	}
}
  801a98:	e037883a 	mov	sp,fp
  801a9c:	dfc00117 	ldw	ra,4(sp)
  801aa0:	df000017 	ldw	fp,0(sp)
  801aa4:	dec00204 	addi	sp,sp,8
  801aa8:	f800283a 	ret

00801aac <drawAllBullets>:

void drawAllBullets() {
  801aac:	defffd04 	addi	sp,sp,-12
  801ab0:	dfc00215 	stw	ra,8(sp)
  801ab4:	df000115 	stw	fp,4(sp)
  801ab8:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801abc:	e03fff15 	stw	zero,-4(fp)
  801ac0:	00001306 	br	801b10 <drawAllBullets+0x64>
		if (bulletArray[i].type != NOTACTIVE) {
  801ac4:	e0bfff17 	ldw	r2,-4(fp)
  801ac8:	00c020b4 	movhi	r3,130
  801acc:	18ffae04 	addi	r3,r3,-328
  801ad0:	1004917a 	slli	r2,r2,5
  801ad4:	10c5883a 	add	r2,r2,r3
  801ad8:	10800404 	addi	r2,r2,16
  801adc:	10800017 	ldw	r2,0(r2)
  801ae0:	108000a0 	cmpeqi	r2,r2,2
  801ae4:	1000071e 	bne	r2,zero,801b04 <drawAllBullets+0x58>
			drawBullet(&bulletArray[i]);
  801ae8:	e0bfff17 	ldw	r2,-4(fp)
  801aec:	1004917a 	slli	r2,r2,5
  801af0:	1007883a 	mov	r3,r2
  801af4:	008020b4 	movhi	r2,130
  801af8:	10bfae04 	addi	r2,r2,-328
  801afc:	1889883a 	add	r4,r3,r2
  801b00:	0801bb40 	call	801bb4 <drawBullet>
	}
}

void drawAllBullets() {
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801b04:	e0bfff17 	ldw	r2,-4(fp)
  801b08:	10800044 	addi	r2,r2,1
  801b0c:	e0bfff15 	stw	r2,-4(fp)
  801b10:	e0bfff17 	ldw	r2,-4(fp)
  801b14:	10802010 	cmplti	r2,r2,128
  801b18:	103fea1e 	bne	r2,zero,801ac4 <drawAllBullets+0x18>
		if (bulletArray[i].type != NOTACTIVE) {
			drawBullet(&bulletArray[i]);
		}
	}
}
  801b1c:	e037883a 	mov	sp,fp
  801b20:	dfc00117 	ldw	ra,4(sp)
  801b24:	df000017 	ldw	fp,0(sp)
  801b28:	dec00204 	addi	sp,sp,8
  801b2c:	f800283a 	ret

00801b30 <eraseAllBullets>:

void eraseAllBullets() {
  801b30:	defffd04 	addi	sp,sp,-12
  801b34:	dfc00215 	stw	ra,8(sp)
  801b38:	df000115 	stw	fp,4(sp)
  801b3c:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801b40:	e03fff15 	stw	zero,-4(fp)
  801b44:	00001306 	br	801b94 <eraseAllBullets+0x64>
		if (bulletArray[i].type != NOTACTIVE) {
  801b48:	e0bfff17 	ldw	r2,-4(fp)
  801b4c:	00c020b4 	movhi	r3,130
  801b50:	18ffae04 	addi	r3,r3,-328
  801b54:	1004917a 	slli	r2,r2,5
  801b58:	10c5883a 	add	r2,r2,r3
  801b5c:	10800404 	addi	r2,r2,16
  801b60:	10800017 	ldw	r2,0(r2)
  801b64:	108000a0 	cmpeqi	r2,r2,2
  801b68:	1000071e 	bne	r2,zero,801b88 <eraseAllBullets+0x58>
			eraseBullet(&bulletArray[i]);
  801b6c:	e0bfff17 	ldw	r2,-4(fp)
  801b70:	1004917a 	slli	r2,r2,5
  801b74:	1007883a 	mov	r3,r2
  801b78:	008020b4 	movhi	r2,130
  801b7c:	10bfae04 	addi	r2,r2,-328
  801b80:	1889883a 	add	r4,r3,r2
  801b84:	0801c3c0 	call	801c3c <eraseBullet>
	}
}

void eraseAllBullets() {
	int i;
	for (i = 0; i < NUM_BULLETS; i++) {
  801b88:	e0bfff17 	ldw	r2,-4(fp)
  801b8c:	10800044 	addi	r2,r2,1
  801b90:	e0bfff15 	stw	r2,-4(fp)
  801b94:	e0bfff17 	ldw	r2,-4(fp)
  801b98:	10802010 	cmplti	r2,r2,128
  801b9c:	103fea1e 	bne	r2,zero,801b48 <eraseAllBullets+0x18>
		if (bulletArray[i].type != NOTACTIVE) {
			eraseBullet(&bulletArray[i]);
		}
	}
}
  801ba0:	e037883a 	mov	sp,fp
  801ba4:	dfc00117 	ldw	ra,4(sp)
  801ba8:	df000017 	ldw	fp,0(sp)
  801bac:	dec00204 	addi	sp,sp,8
  801bb0:	f800283a 	ret

00801bb4 <drawBullet>:

void drawBullet(Bullet *bullet) {
  801bb4:	defffc04 	addi	sp,sp,-16
  801bb8:	dfc00315 	stw	ra,12(sp)
  801bbc:	df000215 	stw	fp,8(sp)
  801bc0:	df000204 	addi	fp,sp,8
  801bc4:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = 0; i < BULLET_LENGTH; i++) {
  801bc8:	e03ffe15 	stw	zero,-8(fp)
  801bcc:	00001306 	br	801c1c <drawBullet+0x68>
		if (bullet != NULL) {
  801bd0:	e0bfff17 	ldw	r2,-4(fp)
  801bd4:	1005003a 	cmpeq	r2,r2,zero
  801bd8:	10000a1e 	bne	r2,zero,801c04 <drawBullet+0x50>
			drawPixel(bullet->x + i, bullet->y, bullet->laserColor);
  801bdc:	e0bfff17 	ldw	r2,-4(fp)
  801be0:	10c00017 	ldw	r3,0(r2)
  801be4:	e0bffe17 	ldw	r2,-8(fp)
  801be8:	1889883a 	add	r4,r3,r2
  801bec:	e0bfff17 	ldw	r2,-4(fp)
  801bf0:	11400217 	ldw	r5,8(r2)
  801bf4:	e0bfff17 	ldw	r2,-4(fp)
  801bf8:	11800517 	ldw	r6,20(r2)
  801bfc:	08051cc0 	call	8051cc <drawPixel>
  801c00:	00000306 	br	801c10 <drawBullet+0x5c>
		} else {
			printf("Attempt to draw null bullet.\n");
  801c04:	010020b4 	movhi	r4,130
  801c08:	212e1a04 	addi	r4,r4,-18328
  801c0c:	080974c0 	call	80974c <puts>
	}
}

void drawBullet(Bullet *bullet) {
	int i;
	for (i = 0; i < BULLET_LENGTH; i++) {
  801c10:	e0bffe17 	ldw	r2,-8(fp)
  801c14:	10800044 	addi	r2,r2,1
  801c18:	e0bffe15 	stw	r2,-8(fp)
  801c1c:	e0bffe17 	ldw	r2,-8(fp)
  801c20:	108000d0 	cmplti	r2,r2,3
  801c24:	103fea1e 	bne	r2,zero,801bd0 <drawBullet+0x1c>
			drawPixel(bullet->x + i, bullet->y, bullet->laserColor);
		} else {
			printf("Attempt to draw null bullet.\n");
		}
	}
}
  801c28:	e037883a 	mov	sp,fp
  801c2c:	dfc00117 	ldw	ra,4(sp)
  801c30:	df000017 	ldw	fp,0(sp)
  801c34:	dec00204 	addi	sp,sp,8
  801c38:	f800283a 	ret

00801c3c <eraseBullet>:

void eraseBullet(Bullet *bullet) {
  801c3c:	defffc04 	addi	sp,sp,-16
  801c40:	dfc00315 	stw	ra,12(sp)
  801c44:	df000215 	stw	fp,8(sp)
  801c48:	df000204 	addi	fp,sp,8
  801c4c:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = 0; i < BULLET_LENGTH; i++) {
  801c50:	e03ffe15 	stw	zero,-8(fp)
  801c54:	00001206 	br	801ca0 <eraseBullet+0x64>
		if (bullet != NULL) {
  801c58:	e0bfff17 	ldw	r2,-4(fp)
  801c5c:	1005003a 	cmpeq	r2,r2,zero
  801c60:	1000091e 	bne	r2,zero,801c88 <eraseBullet+0x4c>
			drawPixel(bullet->prevX + i, bullet->prevY, 0x0000);
  801c64:	e0bfff17 	ldw	r2,-4(fp)
  801c68:	10c00117 	ldw	r3,4(r2)
  801c6c:	e0bffe17 	ldw	r2,-8(fp)
  801c70:	1889883a 	add	r4,r3,r2
  801c74:	e0bfff17 	ldw	r2,-4(fp)
  801c78:	11400317 	ldw	r5,12(r2)
  801c7c:	000d883a 	mov	r6,zero
  801c80:	08051cc0 	call	8051cc <drawPixel>
  801c84:	00000306 	br	801c94 <eraseBullet+0x58>
		} else {
			printf("Attempt to draw null bullet.\n");
  801c88:	010020b4 	movhi	r4,130
  801c8c:	212e1a04 	addi	r4,r4,-18328
  801c90:	080974c0 	call	80974c <puts>
	}
}

void eraseBullet(Bullet *bullet) {
	int i;
	for (i = 0; i < BULLET_LENGTH; i++) {
  801c94:	e0bffe17 	ldw	r2,-8(fp)
  801c98:	10800044 	addi	r2,r2,1
  801c9c:	e0bffe15 	stw	r2,-8(fp)
  801ca0:	e0bffe17 	ldw	r2,-8(fp)
  801ca4:	108000d0 	cmplti	r2,r2,3
  801ca8:	103feb1e 	bne	r2,zero,801c58 <eraseBullet+0x1c>
			drawPixel(bullet->prevX + i, bullet->prevY, 0x0000);
		} else {
			printf("Attempt to draw null bullet.\n");
		}
	}
}
  801cac:	e037883a 	mov	sp,fp
  801cb0:	dfc00117 	ldw	ra,4(sp)
  801cb4:	df000017 	ldw	fp,0(sp)
  801cb8:	dec00204 	addi	sp,sp,8
  801cbc:	f800283a 	ret

00801cc0 <moveBulletRight>:

void moveBulletRight(Bullet *bullet) {
  801cc0:	defffb04 	addi	sp,sp,-20
  801cc4:	dfc00415 	stw	ra,16(sp)
  801cc8:	df000315 	stw	fp,12(sp)
  801ccc:	df000304 	addi	fp,sp,12
  801cd0:	e13fff15 	stw	r4,-4(fp)
	if (bullet == NULL) {
  801cd4:	e0bfff17 	ldw	r2,-4(fp)
  801cd8:	1004c03a 	cmpne	r2,r2,zero
  801cdc:	1000041e 	bne	r2,zero,801cf0 <moveBulletRight+0x30>
		printf("Attempt to move null bullet right.\n");
  801ce0:	010020b4 	movhi	r4,130
  801ce4:	212e2204 	addi	r4,r4,-18296
  801ce8:	080974c0 	call	80974c <puts>
		return;
  801cec:	00002e06 	br	801da8 <moveBulletRight+0xe8>
	}

	bullet->prevX = bullet->x;
  801cf0:	e0bfff17 	ldw	r2,-4(fp)
  801cf4:	10c00017 	ldw	r3,0(r2)
  801cf8:	e0bfff17 	ldw	r2,-4(fp)
  801cfc:	10c00115 	stw	r3,4(r2)
	bullet->prevY = bullet->y;
  801d00:	e0bfff17 	ldw	r2,-4(fp)
  801d04:	10c00217 	ldw	r3,8(r2)
  801d08:	e0bfff17 	ldw	r2,-4(fp)
  801d0c:	10c00315 	stw	r3,12(r2)

	bullet->x = bullet->x + 2;
  801d10:	e0bfff17 	ldw	r2,-4(fp)
  801d14:	10800017 	ldw	r2,0(r2)
  801d18:	10c00084 	addi	r3,r2,2
  801d1c:	e0bfff17 	ldw	r2,-4(fp)
  801d20:	10c00015 	stw	r3,0(r2)

	if ((bullet->x >= SCREEN_WIDTH) || (bullet->x <= -BULLET_LENGTH)) {
  801d24:	e0bfff17 	ldw	r2,-4(fp)
  801d28:	10800017 	ldw	r2,0(r2)
  801d2c:	10805508 	cmpgei	r2,r2,340
  801d30:	1000041e 	bne	r2,zero,801d44 <moveBulletRight+0x84>
  801d34:	e0bfff17 	ldw	r2,-4(fp)
  801d38:	10800017 	ldw	r2,0(r2)
  801d3c:	10bfff88 	cmpgei	r2,r2,-2
  801d40:	1000191e 	bne	r2,zero,801da8 <moveBulletRight+0xe8>
		bullet->type = NOTACTIVE;
  801d44:	e0ffff17 	ldw	r3,-4(fp)
  801d48:	00800084 	movi	r2,2
  801d4c:	18800415 	stw	r2,16(r3)
		Bullet *nextBullet = bullet->next;
  801d50:	e0bfff17 	ldw	r2,-4(fp)
  801d54:	10800617 	ldw	r2,24(r2)
  801d58:	e0bffe15 	stw	r2,-8(fp)
		Bullet *prevBullet = bullet->prev;
  801d5c:	e0bfff17 	ldw	r2,-4(fp)
  801d60:	10800717 	ldw	r2,28(r2)
  801d64:	e0bffd15 	stw	r2,-12(fp)
		bullet->next = NULL;
  801d68:	e0bfff17 	ldw	r2,-4(fp)
  801d6c:	10000615 	stw	zero,24(r2)
		bullet->prev = NULL;
  801d70:	e0bfff17 	ldw	r2,-4(fp)
  801d74:	10000715 	stw	zero,28(r2)

		if (nextBullet != NULL) {
  801d78:	e0bffe17 	ldw	r2,-8(fp)
  801d7c:	1005003a 	cmpeq	r2,r2,zero
  801d80:	1000031e 	bne	r2,zero,801d90 <moveBulletRight+0xd0>
			nextBullet->prev = prevBullet;
  801d84:	e0fffe17 	ldw	r3,-8(fp)
  801d88:	e0bffd17 	ldw	r2,-12(fp)
  801d8c:	18800715 	stw	r2,28(r3)
		}
		if (prevBullet != NULL) {
  801d90:	e0bffd17 	ldw	r2,-12(fp)
  801d94:	1005003a 	cmpeq	r2,r2,zero
  801d98:	1000031e 	bne	r2,zero,801da8 <moveBulletRight+0xe8>
			prevBullet->next = nextBullet;
  801d9c:	e0fffd17 	ldw	r3,-12(fp)
  801da0:	e0bffe17 	ldw	r2,-8(fp)
  801da4:	18800615 	stw	r2,24(r3)
		}
	}
}
  801da8:	e037883a 	mov	sp,fp
  801dac:	dfc00117 	ldw	ra,4(sp)
  801db0:	df000017 	ldw	fp,0(sp)
  801db4:	dec00204 	addi	sp,sp,8
  801db8:	f800283a 	ret

00801dbc <moveBulletLeft>:

void moveBulletLeft(Bullet *bullet) {
  801dbc:	defffb04 	addi	sp,sp,-20
  801dc0:	dfc00415 	stw	ra,16(sp)
  801dc4:	df000315 	stw	fp,12(sp)
  801dc8:	df000304 	addi	fp,sp,12
  801dcc:	e13fff15 	stw	r4,-4(fp)
	if (bullet == NULL) {
  801dd0:	e0bfff17 	ldw	r2,-4(fp)
  801dd4:	1004c03a 	cmpne	r2,r2,zero
  801dd8:	1000041e 	bne	r2,zero,801dec <moveBulletLeft+0x30>
		printf("Attempt to move null bullet left.\n");
  801ddc:	010020b4 	movhi	r4,130
  801de0:	212e2b04 	addi	r4,r4,-18260
  801de4:	080974c0 	call	80974c <puts>
		return;
  801de8:	00002e06 	br	801ea4 <moveBulletLeft+0xe8>
	}

	bullet->prevX = bullet->x;
  801dec:	e0bfff17 	ldw	r2,-4(fp)
  801df0:	10c00017 	ldw	r3,0(r2)
  801df4:	e0bfff17 	ldw	r2,-4(fp)
  801df8:	10c00115 	stw	r3,4(r2)
	bullet->prevY = bullet->y;
  801dfc:	e0bfff17 	ldw	r2,-4(fp)
  801e00:	10c00217 	ldw	r3,8(r2)
  801e04:	e0bfff17 	ldw	r2,-4(fp)
  801e08:	10c00315 	stw	r3,12(r2)

	bullet->x = bullet->x - 2;
  801e0c:	e0bfff17 	ldw	r2,-4(fp)
  801e10:	10800017 	ldw	r2,0(r2)
  801e14:	10ffff84 	addi	r3,r2,-2
  801e18:	e0bfff17 	ldw	r2,-4(fp)
  801e1c:	10c00015 	stw	r3,0(r2)

	if ((bullet->x >= SCREEN_WIDTH) || (bullet->x <= -BULLET_LENGTH - 1)) {
  801e20:	e0bfff17 	ldw	r2,-4(fp)
  801e24:	10800017 	ldw	r2,0(r2)
  801e28:	10805508 	cmpgei	r2,r2,340
  801e2c:	1000041e 	bne	r2,zero,801e40 <moveBulletLeft+0x84>
  801e30:	e0bfff17 	ldw	r2,-4(fp)
  801e34:	10800017 	ldw	r2,0(r2)
  801e38:	10bfff48 	cmpgei	r2,r2,-3
  801e3c:	1000191e 	bne	r2,zero,801ea4 <moveBulletLeft+0xe8>
		bullet->type = NOTACTIVE;
  801e40:	e0ffff17 	ldw	r3,-4(fp)
  801e44:	00800084 	movi	r2,2
  801e48:	18800415 	stw	r2,16(r3)
		Bullet *nextBullet = bullet->next;
  801e4c:	e0bfff17 	ldw	r2,-4(fp)
  801e50:	10800617 	ldw	r2,24(r2)
  801e54:	e0bffe15 	stw	r2,-8(fp)
		Bullet *prevBullet = bullet->prev;
  801e58:	e0bfff17 	ldw	r2,-4(fp)
  801e5c:	10800717 	ldw	r2,28(r2)
  801e60:	e0bffd15 	stw	r2,-12(fp)
		bullet->next = NULL;
  801e64:	e0bfff17 	ldw	r2,-4(fp)
  801e68:	10000615 	stw	zero,24(r2)
		bullet->prev = NULL;
  801e6c:	e0bfff17 	ldw	r2,-4(fp)
  801e70:	10000715 	stw	zero,28(r2)

		if (nextBullet != NULL) {
  801e74:	e0bffe17 	ldw	r2,-8(fp)
  801e78:	1005003a 	cmpeq	r2,r2,zero
  801e7c:	1000031e 	bne	r2,zero,801e8c <moveBulletLeft+0xd0>
			nextBullet->prev = prevBullet;
  801e80:	e0fffe17 	ldw	r3,-8(fp)
  801e84:	e0bffd17 	ldw	r2,-12(fp)
  801e88:	18800715 	stw	r2,28(r3)
		}
		if (prevBullet != NULL) {
  801e8c:	e0bffd17 	ldw	r2,-12(fp)
  801e90:	1005003a 	cmpeq	r2,r2,zero
  801e94:	1000031e 	bne	r2,zero,801ea4 <moveBulletLeft+0xe8>
			prevBullet->next = nextBullet;
  801e98:	e0fffd17 	ldw	r3,-12(fp)
  801e9c:	e0bffe17 	ldw	r2,-8(fp)
  801ea0:	18800615 	stw	r2,24(r3)
		}
	}
}
  801ea4:	e037883a 	mov	sp,fp
  801ea8:	dfc00117 	ldw	ra,4(sp)
  801eac:	df000017 	ldw	fp,0(sp)
  801eb0:	dec00204 	addi	sp,sp,8
  801eb4:	f800283a 	ret

00801eb8 <findSharkIfHit>:
#include "collision.h"

#define TRUE 1
#define FALSE 0

Shark *findSharkIfHit(Bullet *bullet) {
  801eb8:	defffa04 	addi	sp,sp,-24
  801ebc:	dfc00515 	stw	ra,20(sp)
  801ec0:	df000415 	stw	fp,16(sp)
  801ec4:	df000404 	addi	fp,sp,16
  801ec8:	e13ffe15 	stw	r4,-8(fp)
	Shark *cursor = sharkList;
  801ecc:	008020b4 	movhi	r2,130
  801ed0:	10bef604 	addi	r2,r2,-1064
  801ed4:	10800017 	ldw	r2,0(r2)
  801ed8:	e0bffd15 	stw	r2,-12(fp)
	int i = 0;
  801edc:	e03ffc15 	stw	zero,-16(fp)
	while (cursor != NULL
  801ee0:	00000e06 	br	801f1c <findSharkIfHit+0x64>
			&& i < sharkCount) {
		if (isBulletCollidingWithShark(cursor, bullet) == TRUE) {
  801ee4:	e13ffd17 	ldw	r4,-12(fp)
  801ee8:	e17ffe17 	ldw	r5,-8(fp)
  801eec:	0801f580 	call	801f58 <isBulletCollidingWithShark>
  801ef0:	10800058 	cmpnei	r2,r2,1
  801ef4:	1000031e 	bne	r2,zero,801f04 <findSharkIfHit+0x4c>
			return cursor;
  801ef8:	e0bffd17 	ldw	r2,-12(fp)
  801efc:	e0bfff15 	stw	r2,-4(fp)
  801f00:	00000f06 	br	801f40 <findSharkIfHit+0x88>
		}
		cursor = cursor->next;
  801f04:	e0bffd17 	ldw	r2,-12(fp)
  801f08:	10800617 	ldw	r2,24(r2)
  801f0c:	e0bffd15 	stw	r2,-12(fp)
		i++;
  801f10:	e0bffc17 	ldw	r2,-16(fp)
  801f14:	10800044 	addi	r2,r2,1
  801f18:	e0bffc15 	stw	r2,-16(fp)
#define FALSE 0

Shark *findSharkIfHit(Bullet *bullet) {
	Shark *cursor = sharkList;
	int i = 0;
	while (cursor != NULL
  801f1c:	e0bffd17 	ldw	r2,-12(fp)
  801f20:	1005003a 	cmpeq	r2,r2,zero
  801f24:	1000051e 	bne	r2,zero,801f3c <findSharkIfHit+0x84>
  801f28:	e0bffc17 	ldw	r2,-16(fp)
  801f2c:	00c020b4 	movhi	r3,130
  801f30:	18fef804 	addi	r3,r3,-1056
  801f34:	18c00017 	ldw	r3,0(r3)
  801f38:	10ffea36 	bltu	r2,r3,801ee4 <findSharkIfHit+0x2c>
			return cursor;
		}
		cursor = cursor->next;
		i++;
	}
	return NULL;
  801f3c:	e03fff15 	stw	zero,-4(fp)
  801f40:	e0bfff17 	ldw	r2,-4(fp)
}
  801f44:	e037883a 	mov	sp,fp
  801f48:	dfc00117 	ldw	ra,4(sp)
  801f4c:	df000017 	ldw	fp,0(sp)
  801f50:	dec00204 	addi	sp,sp,8
  801f54:	f800283a 	ret

00801f58 <isBulletCollidingWithShark>:

int isBulletCollidingWithShark(Shark *shark, Bullet *bullet) {
  801f58:	defffb04 	addi	sp,sp,-20
  801f5c:	dfc00415 	stw	ra,16(sp)
  801f60:	df000315 	stw	fp,12(sp)
  801f64:	df000304 	addi	fp,sp,12
  801f68:	e13ffd15 	stw	r4,-12(fp)
  801f6c:	e17ffe15 	stw	r5,-8(fp)
	if (bullet == NULL || shark == NULL) {
  801f70:	e0bffe17 	ldw	r2,-8(fp)
  801f74:	1005003a 	cmpeq	r2,r2,zero
  801f78:	1000031e 	bne	r2,zero,801f88 <isBulletCollidingWithShark+0x30>
  801f7c:	e0bffd17 	ldw	r2,-12(fp)
  801f80:	1004c03a 	cmpne	r2,r2,zero
  801f84:	1000051e 	bne	r2,zero,801f9c <isBulletCollidingWithShark+0x44>
		printf("Attempt to do player/bullet collision with null member.\n");
  801f88:	010020b4 	movhi	r4,130
  801f8c:	212e3404 	addi	r4,r4,-18224
  801f90:	080974c0 	call	80974c <puts>
		return FALSE;
  801f94:	e03fff15 	stw	zero,-4(fp)
  801f98:	00002306 	br	802028 <isBulletCollidingWithShark+0xd0>
	}

	if (bullet->type == SHARKBULLET) {
  801f9c:	e0bffe17 	ldw	r2,-8(fp)
  801fa0:	10800417 	ldw	r2,16(r2)
  801fa4:	10800058 	cmpnei	r2,r2,1
  801fa8:	1000051e 	bne	r2,zero,801fc0 <isBulletCollidingWithShark+0x68>
		// No friendly fire
		printf("Error: sharkbullet present in player bullet list.\n");
  801fac:	010020b4 	movhi	r4,130
  801fb0:	212e4204 	addi	r4,r4,-18168
  801fb4:	080974c0 	call	80974c <puts>
		return FALSE;
  801fb8:	e03fff15 	stw	zero,-4(fp)
  801fbc:	00001a06 	br	802028 <isBulletCollidingWithShark+0xd0>
	}
	
	if (bullet->x >= shark->x &&
  801fc0:	e0bffe17 	ldw	r2,-8(fp)
  801fc4:	10c00017 	ldw	r3,0(r2)
  801fc8:	e0bffd17 	ldw	r2,-12(fp)
  801fcc:	10800017 	ldw	r2,0(r2)
  801fd0:	18801416 	blt	r3,r2,802024 <isBulletCollidingWithShark+0xcc>
  801fd4:	e0bffe17 	ldw	r2,-8(fp)
  801fd8:	10c00017 	ldw	r3,0(r2)
  801fdc:	e0bffd17 	ldw	r2,-12(fp)
  801fe0:	10800017 	ldw	r2,0(r2)
  801fe4:	10800944 	addi	r2,r2,37
  801fe8:	10c00e16 	blt	r2,r3,802024 <isBulletCollidingWithShark+0xcc>
		bullet->x <= shark->x + SHARK_WIDTH) {
		// Have x region correct
		//printf("x-hit\n");
		
		if (bullet->y >= shark->y &&
  801fec:	e0bffe17 	ldw	r2,-8(fp)
  801ff0:	10c00217 	ldw	r3,8(r2)
  801ff4:	e0bffd17 	ldw	r2,-12(fp)
  801ff8:	10800217 	ldw	r2,8(r2)
  801ffc:	18800916 	blt	r3,r2,802024 <isBulletCollidingWithShark+0xcc>
  802000:	e0bffe17 	ldw	r2,-8(fp)
  802004:	10c00217 	ldw	r3,8(r2)
  802008:	e0bffd17 	ldw	r2,-12(fp)
  80200c:	10800217 	ldw	r2,8(r2)
  802010:	10800504 	addi	r2,r2,20
  802014:	10c00316 	blt	r2,r3,802024 <isBulletCollidingWithShark+0xcc>
			bullet->y <= shark->y + SHARK_HEIGHT) {
			// Have y region correct
			//printf("y-hit\n");
			return TRUE;
  802018:	00800044 	movi	r2,1
  80201c:	e0bfff15 	stw	r2,-4(fp)
  802020:	00000106 	br	802028 <isBulletCollidingWithShark+0xd0>
		}
	}
	//printf("Miss\n");
	return FALSE;
  802024:	e03fff15 	stw	zero,-4(fp)
  802028:	e0bfff17 	ldw	r2,-4(fp)
}
  80202c:	e037883a 	mov	sp,fp
  802030:	dfc00117 	ldw	ra,4(sp)
  802034:	df000017 	ldw	fp,0(sp)
  802038:	dec00204 	addi	sp,sp,8
  80203c:	f800283a 	ret

00802040 <isBulletCollidingWithPlayer>:

int isBulletCollidingWithPlayer(Player *player, Bullet *bullet) {
  802040:	defffb04 	addi	sp,sp,-20
  802044:	dfc00415 	stw	ra,16(sp)
  802048:	df000315 	stw	fp,12(sp)
  80204c:	df000304 	addi	fp,sp,12
  802050:	e13ffd15 	stw	r4,-12(fp)
  802054:	e17ffe15 	stw	r5,-8(fp)
	if (player == NULL || bullet == NULL) {
  802058:	e0bffd17 	ldw	r2,-12(fp)
  80205c:	1005003a 	cmpeq	r2,r2,zero
  802060:	1000031e 	bne	r2,zero,802070 <isBulletCollidingWithPlayer+0x30>
  802064:	e0bffe17 	ldw	r2,-8(fp)
  802068:	1004c03a 	cmpne	r2,r2,zero
  80206c:	1000051e 	bne	r2,zero,802084 <isBulletCollidingWithPlayer+0x44>
		printf("Attempt to do player/bullet collision with null member.\n");
  802070:	010020b4 	movhi	r4,130
  802074:	212e3404 	addi	r4,r4,-18224
  802078:	080974c0 	call	80974c <puts>
		return FALSE;
  80207c:	e03fff15 	stw	zero,-4(fp)
  802080:	00002306 	br	802110 <isBulletCollidingWithPlayer+0xd0>
	}

	if (bullet->type == PLAYERBULLET) {
  802084:	e0bffe17 	ldw	r2,-8(fp)
  802088:	10800417 	ldw	r2,16(r2)
  80208c:	1004c03a 	cmpne	r2,r2,zero
  802090:	1000051e 	bne	r2,zero,8020a8 <isBulletCollidingWithPlayer+0x68>
		// No friendly fire
		printf("Error: player bullet in shark bullet list.\n");
  802094:	010020b4 	movhi	r4,130
  802098:	212e4f04 	addi	r4,r4,-18116
  80209c:	080974c0 	call	80974c <puts>
		return FALSE;
  8020a0:	e03fff15 	stw	zero,-4(fp)
  8020a4:	00001a06 	br	802110 <isBulletCollidingWithPlayer+0xd0>
	}

	if (bullet->x >= player->x &&
  8020a8:	e0bffe17 	ldw	r2,-8(fp)
  8020ac:	10c00017 	ldw	r3,0(r2)
  8020b0:	e0bffd17 	ldw	r2,-12(fp)
  8020b4:	10800017 	ldw	r2,0(r2)
  8020b8:	18801416 	blt	r3,r2,80210c <isBulletCollidingWithPlayer+0xcc>
  8020bc:	e0bffe17 	ldw	r2,-8(fp)
  8020c0:	10c00017 	ldw	r3,0(r2)
  8020c4:	e0bffd17 	ldw	r2,-12(fp)
  8020c8:	10800017 	ldw	r2,0(r2)
  8020cc:	10800784 	addi	r2,r2,30
  8020d0:	10c00e16 	blt	r2,r3,80210c <isBulletCollidingWithPlayer+0xcc>
		bullet->x <= player->x + PLAYER_WIDTH) {
		// Have x region
		
		if (bullet->y >= player->y &&
  8020d4:	e0bffe17 	ldw	r2,-8(fp)
  8020d8:	10c00217 	ldw	r3,8(r2)
  8020dc:	e0bffd17 	ldw	r2,-12(fp)
  8020e0:	10800217 	ldw	r2,8(r2)
  8020e4:	18800916 	blt	r3,r2,80210c <isBulletCollidingWithPlayer+0xcc>
  8020e8:	e0bffe17 	ldw	r2,-8(fp)
  8020ec:	10c00217 	ldw	r3,8(r2)
  8020f0:	e0bffd17 	ldw	r2,-12(fp)
  8020f4:	10800217 	ldw	r2,8(r2)
  8020f8:	10800784 	addi	r2,r2,30
  8020fc:	10c00316 	blt	r2,r3,80210c <isBulletCollidingWithPlayer+0xcc>
			bullet->y <= player->y + PLAYER_HEIGHT) {
			// Have y
			
			return TRUE;
  802100:	00800044 	movi	r2,1
  802104:	e0bfff15 	stw	r2,-4(fp)
  802108:	00000106 	br	802110 <isBulletCollidingWithPlayer+0xd0>
		}
	}
	return FALSE;
  80210c:	e03fff15 	stw	zero,-4(fp)
  802110:	e0bfff17 	ldw	r2,-4(fp)
}
  802114:	e037883a 	mov	sp,fp
  802118:	dfc00117 	ldw	ra,4(sp)
  80211c:	df000017 	ldw	fp,0(sp)
  802120:	dec00204 	addi	sp,sp,8
  802124:	f800283a 	ret

00802128 <doSharkBulletCollision>:

void doSharkBulletCollision(void) {
  802128:	defffb04 	addi	sp,sp,-20
  80212c:	dfc00415 	stw	ra,16(sp)
  802130:	df000315 	stw	fp,12(sp)
  802134:	df000304 	addi	fp,sp,12
	Bullet *bulletCursor = playerBulletList;
  802138:	008020b4 	movhi	r2,130
  80213c:	10bee204 	addi	r2,r2,-1144
  802140:	10800017 	ldw	r2,0(r2)
  802144:	e0bfff15 	stw	r2,-4(fp)
	Shark *toKill = NULL;
  802148:	e03ffe15 	stw	zero,-8(fp)
	int i = 0;
  80214c:	e03ffd15 	stw	zero,-12(fp)
	while (bulletCursor != NULL
  802150:	00000e06 	br	80218c <doSharkBulletCollision+0x64>
			&& bulletCursor->type == PLAYERBULLET
			&& i < NUM_BULLETS) {
		toKill = findSharkIfHit(bulletCursor);
  802154:	e13fff17 	ldw	r4,-4(fp)
  802158:	0801eb80 	call	801eb8 <findSharkIfHit>
  80215c:	e0bffe15 	stw	r2,-8(fp)
		if (toKill != NULL) {
  802160:	e0bffe17 	ldw	r2,-8(fp)
  802164:	1005003a 	cmpeq	r2,r2,zero
  802168:	1000021e 	bne	r2,zero,802174 <doSharkBulletCollision+0x4c>
			killShark(toKill);
  80216c:	e13ffe17 	ldw	r4,-8(fp)
  802170:	0804b380 	call	804b38 <killShark>
		}
		bulletCursor = bulletCursor->next;
  802174:	e0bfff17 	ldw	r2,-4(fp)
  802178:	10800617 	ldw	r2,24(r2)
  80217c:	e0bfff15 	stw	r2,-4(fp)
		i++;
  802180:	e0bffd17 	ldw	r2,-12(fp)
  802184:	10800044 	addi	r2,r2,1
  802188:	e0bffd15 	stw	r2,-12(fp)

void doSharkBulletCollision(void) {
	Bullet *bulletCursor = playerBulletList;
	Shark *toKill = NULL;
	int i = 0;
	while (bulletCursor != NULL
  80218c:	e0bfff17 	ldw	r2,-4(fp)
  802190:	1005003a 	cmpeq	r2,r2,zero
  802194:	1000071e 	bne	r2,zero,8021b4 <doSharkBulletCollision+0x8c>
  802198:	e0bfff17 	ldw	r2,-4(fp)
  80219c:	10800417 	ldw	r2,16(r2)
  8021a0:	1004c03a 	cmpne	r2,r2,zero
  8021a4:	1000031e 	bne	r2,zero,8021b4 <doSharkBulletCollision+0x8c>
  8021a8:	e0bffd17 	ldw	r2,-12(fp)
  8021ac:	10802010 	cmplti	r2,r2,128
  8021b0:	103fe81e 	bne	r2,zero,802154 <doSharkBulletCollision+0x2c>
			killShark(toKill);
		}
		bulletCursor = bulletCursor->next;
		i++;
	}
}
  8021b4:	e037883a 	mov	sp,fp
  8021b8:	dfc00117 	ldw	ra,4(sp)
  8021bc:	df000017 	ldw	fp,0(sp)
  8021c0:	dec00204 	addi	sp,sp,8
  8021c4:	f800283a 	ret

008021c8 <doPlayerBulletCollision>:

void doPlayerBulletCollision(void) {
  8021c8:	defffc04 	addi	sp,sp,-16
  8021cc:	dfc00315 	stw	ra,12(sp)
  8021d0:	df000215 	stw	fp,8(sp)
  8021d4:	df000204 	addi	fp,sp,8
	Bullet *bulletCursor = sharkBulletList;
  8021d8:	008020b4 	movhi	r2,130
  8021dc:	10bee304 	addi	r2,r2,-1140
  8021e0:	10800017 	ldw	r2,0(r2)
  8021e4:	e0bfff15 	stw	r2,-4(fp)
	int i = 0;
  8021e8:	e03ffe15 	stw	zero,-8(fp)
	while (bulletCursor != NULL
  8021ec:	00000e06 	br	802228 <doPlayerBulletCollision+0x60>
			&& bulletCursor->type == SHARKBULLET
			&& i < NUM_BULLETS) {
		if (isBulletCollidingWithPlayer(&player, bulletCursor) == TRUE) {
  8021f0:	010020b4 	movhi	r4,130
  8021f4:	213faa04 	addi	r4,r4,-344
  8021f8:	e17fff17 	ldw	r5,-4(fp)
  8021fc:	08020400 	call	802040 <isBulletCollidingWithPlayer>
  802200:	10800058 	cmpnei	r2,r2,1
  802204:	1000021e 	bne	r2,zero,802210 <doPlayerBulletCollision+0x48>
			hitPlayer();
  802208:	08031240 	call	803124 <hitPlayer>
			break;
  80220c:	00001006 	br	802250 <doPlayerBulletCollision+0x88>
		}
		i++;
  802210:	e0bffe17 	ldw	r2,-8(fp)
  802214:	10800044 	addi	r2,r2,1
  802218:	e0bffe15 	stw	r2,-8(fp)
		bulletCursor = bulletCursor->next;
  80221c:	e0bfff17 	ldw	r2,-4(fp)
  802220:	10800617 	ldw	r2,24(r2)
  802224:	e0bfff15 	stw	r2,-4(fp)
}

void doPlayerBulletCollision(void) {
	Bullet *bulletCursor = sharkBulletList;
	int i = 0;
	while (bulletCursor != NULL
  802228:	e0bfff17 	ldw	r2,-4(fp)
  80222c:	1005003a 	cmpeq	r2,r2,zero
  802230:	1000071e 	bne	r2,zero,802250 <doPlayerBulletCollision+0x88>
  802234:	e0bfff17 	ldw	r2,-4(fp)
  802238:	10800417 	ldw	r2,16(r2)
  80223c:	10800058 	cmpnei	r2,r2,1
  802240:	1000031e 	bne	r2,zero,802250 <doPlayerBulletCollision+0x88>
  802244:	e0bffe17 	ldw	r2,-8(fp)
  802248:	10802010 	cmplti	r2,r2,128
  80224c:	103fe81e 	bne	r2,zero,8021f0 <doPlayerBulletCollision+0x28>
			break;
		}
		i++;
		bulletCursor = bulletCursor->next;
	}
}
  802250:	e037883a 	mov	sp,fp
  802254:	dfc00117 	ldw	ra,4(sp)
  802258:	df000017 	ldw	fp,0(sp)
  80225c:	dec00204 	addi	sp,sp,8
  802260:	f800283a 	ret

00802264 <setupDisplacement>:
void makeDownRight(Displacement *disp);
void makeDownLeft(Displacement *disp);
void makeUpRight(Displacement *disp);
void makeUpLeft(Displacement *disp);

void setupDisplacement(void) {
  802264:	defffe04 	addi	sp,sp,-8
  802268:	dfc00115 	stw	ra,4(sp)
  80226c:	df000015 	stw	fp,0(sp)
  802270:	d839883a 	mov	fp,sp
	right.dx = 1;
  802274:	00800044 	movi	r2,1
  802278:	d0a71f0d 	sth	r2,-25476(gp)
	right.dy = 0;
  80227c:	008020b4 	movhi	r2,130
  802280:	10bee684 	addi	r2,r2,-1126
  802284:	1000000d 	sth	zero,0(r2)

	left.dx = -1;
  802288:	00bfffc4 	movi	r2,-1
  80228c:	d0a7210d 	sth	r2,-25468(gp)
	left.dy = 0;
  802290:	008020b4 	movhi	r2,130
  802294:	10bee884 	addi	r2,r2,-1118
  802298:	1000000d 	sth	zero,0(r2)

	up.dx = 0;
  80229c:	d027230d 	sth	zero,-25460(gp)
	up.dy = -1;
  8022a0:	00c020b4 	movhi	r3,130
  8022a4:	18feea84 	addi	r3,r3,-1110
  8022a8:	00bfffc4 	movi	r2,-1
  8022ac:	1880000d 	sth	r2,0(r3)

	down.dx = 0;
  8022b0:	d027250d 	sth	zero,-25452(gp)
	down.dy = 1;
  8022b4:	00c020b4 	movhi	r3,130
  8022b8:	18feec84 	addi	r3,r3,-1102
  8022bc:	00800044 	movi	r2,1
  8022c0:	1880000d 	sth	r2,0(r3)

	setupVerticalDisplacementFunction();
  8022c4:	08022f00 	call	8022f0 <setupVerticalDisplacementFunction>
	setupCircularDisplacementFunction();
  8022c8:	08023f40 	call	8023f4 <setupCircularDisplacementFunction>
	setupArcDisplacementFunction();
  8022cc:	08024e40 	call	8024e4 <setupArcDisplacementFunction>

	printf("Setup displacement functions.\n");
  8022d0:	010020b4 	movhi	r4,130
  8022d4:	212e5a04 	addi	r4,r4,-18072
  8022d8:	080974c0 	call	80974c <puts>
}
  8022dc:	e037883a 	mov	sp,fp
  8022e0:	dfc00117 	ldw	ra,4(sp)
  8022e4:	df000017 	ldw	fp,0(sp)
  8022e8:	dec00204 	addi	sp,sp,8
  8022ec:	f800283a 	ret

008022f0 <setupVerticalDisplacementFunction>:

void setupVerticalDisplacementFunction(void) {
  8022f0:	defffc04 	addi	sp,sp,-16
  8022f4:	dfc00315 	stw	ra,12(sp)
  8022f8:	df000215 	stw	fp,8(sp)
  8022fc:	df000204 	addi	fp,sp,8
	int i;
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  802300:	e03fff15 	stw	zero,-4(fp)
  802304:	00002506 	br	80239c <setupVerticalDisplacementFunction+0xac>
		ptr = &verticalDisplacementFunctionUp[i];
  802308:	e0bfff17 	ldw	r2,-4(fp)
  80230c:	100490fa 	slli	r2,r2,3
  802310:	1007883a 	mov	r3,r2
  802314:	008020b4 	movhi	r2,130
  802318:	1084ae04 	addi	r2,r2,4792
  80231c:	1885883a 	add	r2,r3,r2
  802320:	e0bffe15 	stw	r2,-8(fp)
		makeUp(ptr);
  802324:	e13ffe17 	ldw	r4,-8(fp)
  802328:	08026e00 	call	8026e0 <makeUp>
		ptr->next = &verticalDisplacementFunctionUp[i + 1];
  80232c:	e0bfff17 	ldw	r2,-4(fp)
  802330:	100490fa 	slli	r2,r2,3
  802334:	1007883a 	mov	r3,r2
  802338:	008020b4 	movhi	r2,130
  80233c:	1084b004 	addi	r2,r2,4800
  802340:	1887883a 	add	r3,r3,r2
  802344:	e0bffe17 	ldw	r2,-8(fp)
  802348:	10c00115 	stw	r3,4(r2)

		ptr = &verticalDisplacementFunctionDown[i];
  80234c:	e0bfff17 	ldw	r2,-4(fp)
  802350:	100490fa 	slli	r2,r2,3
  802354:	1007883a 	mov	r3,r2
  802358:	008020b4 	movhi	r2,130
  80235c:	1083ae04 	addi	r2,r2,3768
  802360:	1885883a 	add	r2,r3,r2
  802364:	e0bffe15 	stw	r2,-8(fp)
		makeDown(ptr);
  802368:	e13ffe17 	ldw	r4,-8(fp)
  80236c:	08027200 	call	802720 <makeDown>
		ptr-> next = &verticalDisplacementFunctionDown[i + 1];
  802370:	e0bfff17 	ldw	r2,-4(fp)
  802374:	100490fa 	slli	r2,r2,3
  802378:	1007883a 	mov	r3,r2
  80237c:	008020b4 	movhi	r2,130
  802380:	1083b004 	addi	r2,r2,3776
  802384:	1887883a 	add	r3,r3,r2
  802388:	e0bffe17 	ldw	r2,-8(fp)
  80238c:	10c00115 	stw	r3,4(r2)
}

void setupVerticalDisplacementFunction(void) {
	int i;
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  802390:	e0bfff17 	ldw	r2,-4(fp)
  802394:	10800044 	addi	r2,r2,1
  802398:	e0bfff15 	stw	r2,-4(fp)
  80239c:	e0bfff17 	ldw	r2,-4(fp)
  8023a0:	10802010 	cmplti	r2,r2,128
  8023a4:	103fd81e 	bne	r2,zero,802308 <setupVerticalDisplacementFunction+0x18>

		ptr = &verticalDisplacementFunctionDown[i];
		makeDown(ptr);
		ptr-> next = &verticalDisplacementFunctionDown[i + 1];
	}
	ptr = &verticalDisplacementFunctionUp[DISPLACEMENT_LENGTH];
  8023a8:	008020b4 	movhi	r2,130
  8023ac:	1085ae04 	addi	r2,r2,5816
  8023b0:	e0bffe15 	stw	r2,-8(fp)
	ptr->next = verticalDisplacementFunctionUp;
  8023b4:	e0fffe17 	ldw	r3,-8(fp)
  8023b8:	008020b4 	movhi	r2,130
  8023bc:	1084ae04 	addi	r2,r2,4792
  8023c0:	18800115 	stw	r2,4(r3)
	ptr = &verticalDisplacementFunctionDown[DISPLACEMENT_LENGTH];
  8023c4:	008020b4 	movhi	r2,130
  8023c8:	1084ae04 	addi	r2,r2,4792
  8023cc:	e0bffe15 	stw	r2,-8(fp)
	ptr->next = verticalDisplacementFunctionDown;
  8023d0:	e0fffe17 	ldw	r3,-8(fp)
  8023d4:	008020b4 	movhi	r2,130
  8023d8:	1083ae04 	addi	r2,r2,3768
  8023dc:	18800115 	stw	r2,4(r3)
}
  8023e0:	e037883a 	mov	sp,fp
  8023e4:	dfc00117 	ldw	ra,4(sp)
  8023e8:	df000017 	ldw	fp,0(sp)
  8023ec:	dec00204 	addi	sp,sp,8
  8023f0:	f800283a 	ret

008023f4 <setupCircularDisplacementFunction>:

void setupCircularDisplacementFunction(void) {
  8023f4:	defffc04 	addi	sp,sp,-16
  8023f8:	dfc00315 	stw	ra,12(sp)
  8023fc:	df000215 	stw	fp,8(sp)
  802400:	df000204 	addi	fp,sp,8
	int i = 0;
  802404:	e03fff15 	stw	zero,-4(fp)
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  802408:	e03fff15 	stw	zero,-4(fp)
  80240c:	00002606 	br	8024a8 <setupCircularDisplacementFunction+0xb4>
		ptr = &circularDisplacementFunction[i];
  802410:	e0bfff17 	ldw	r2,-4(fp)
  802414:	100490fa 	slli	r2,r2,3
  802418:	1007883a 	mov	r3,r2
  80241c:	008020b4 	movhi	r2,130
  802420:	1085ae04 	addi	r2,r2,5816
  802424:	1885883a 	add	r2,r3,r2
  802428:	e0bffe15 	stw	r2,-8(fp)
		if (i < DISPLACEMENT_LENGTH / 4) {
  80242c:	e0bfff17 	ldw	r2,-4(fp)
  802430:	10800808 	cmpgei	r2,r2,32
  802434:	1000031e 	bne	r2,zero,802444 <setupCircularDisplacementFunction+0x50>
			makeRight(ptr);
  802438:	e13ffe17 	ldw	r4,-8(fp)
  80243c:	08026600 	call	802660 <makeRight>
  802440:	00000e06 	br	80247c <setupCircularDisplacementFunction+0x88>
		} else if (i < DISPLACEMENT_LENGTH / 2) {
  802444:	e0bfff17 	ldw	r2,-4(fp)
  802448:	10801008 	cmpgei	r2,r2,64
  80244c:	1000031e 	bne	r2,zero,80245c <setupCircularDisplacementFunction+0x68>
			makeDown(ptr);
  802450:	e13ffe17 	ldw	r4,-8(fp)
  802454:	08027200 	call	802720 <makeDown>
  802458:	00000806 	br	80247c <setupCircularDisplacementFunction+0x88>
		} else if (i < 3 * DISPLACEMENT_LENGTH / 4) {
  80245c:	e0bfff17 	ldw	r2,-4(fp)
  802460:	10801808 	cmpgei	r2,r2,96
  802464:	1000031e 	bne	r2,zero,802474 <setupCircularDisplacementFunction+0x80>
			makeLeft(ptr);
  802468:	e13ffe17 	ldw	r4,-8(fp)
  80246c:	08026a00 	call	8026a0 <makeLeft>
  802470:	00000206 	br	80247c <setupCircularDisplacementFunction+0x88>
		} else {
			makeUp(ptr);
  802474:	e13ffe17 	ldw	r4,-8(fp)
  802478:	08026e00 	call	8026e0 <makeUp>
		}
		ptr->next = &circularDisplacementFunction[i + 1];
  80247c:	e0bfff17 	ldw	r2,-4(fp)
  802480:	100490fa 	slli	r2,r2,3
  802484:	1007883a 	mov	r3,r2
  802488:	008020b4 	movhi	r2,130
  80248c:	1085b004 	addi	r2,r2,5824
  802490:	1887883a 	add	r3,r3,r2
  802494:	e0bffe17 	ldw	r2,-8(fp)
  802498:	10c00115 	stw	r3,4(r2)
}

void setupCircularDisplacementFunction(void) {
	int i = 0;
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  80249c:	e0bfff17 	ldw	r2,-4(fp)
  8024a0:	10800044 	addi	r2,r2,1
  8024a4:	e0bfff15 	stw	r2,-4(fp)
  8024a8:	e0bfff17 	ldw	r2,-4(fp)
  8024ac:	10802010 	cmplti	r2,r2,128
  8024b0:	103fd71e 	bne	r2,zero,802410 <setupCircularDisplacementFunction+0x1c>
		} else {
			makeUp(ptr);
		}
		ptr->next = &circularDisplacementFunction[i + 1];
	}
	ptr = &circularDisplacementFunction[DISPLACEMENT_LENGTH];
  8024b4:	008020b4 	movhi	r2,130
  8024b8:	1086ae04 	addi	r2,r2,6840
  8024bc:	e0bffe15 	stw	r2,-8(fp)
	ptr->next = circularDisplacementFunction;
  8024c0:	e0fffe17 	ldw	r3,-8(fp)
  8024c4:	008020b4 	movhi	r2,130
  8024c8:	1085ae04 	addi	r2,r2,5816
  8024cc:	18800115 	stw	r2,4(r3)
}
  8024d0:	e037883a 	mov	sp,fp
  8024d4:	dfc00117 	ldw	ra,4(sp)
  8024d8:	df000017 	ldw	fp,0(sp)
  8024dc:	dec00204 	addi	sp,sp,8
  8024e0:	f800283a 	ret

008024e4 <setupArcDisplacementFunction>:

void setupArcDisplacementFunction(void) {
  8024e4:	defffc04 	addi	sp,sp,-16
  8024e8:	dfc00315 	stw	ra,12(sp)
  8024ec:	df000215 	stw	fp,8(sp)
  8024f0:	df000204 	addi	fp,sp,8
	int i;
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  8024f4:	e03fff15 	stw	zero,-4(fp)
  8024f8:	00002606 	br	802594 <setupArcDisplacementFunction+0xb0>
		ptr = &arcDisplacementFunction[i];
  8024fc:	e0bfff17 	ldw	r2,-4(fp)
  802500:	100490fa 	slli	r2,r2,3
  802504:	1007883a 	mov	r3,r2
  802508:	008020b4 	movhi	r2,130
  80250c:	1087ae04 	addi	r2,r2,7864
  802510:	1885883a 	add	r2,r3,r2
  802514:	e0bffe15 	stw	r2,-8(fp)
		if (i < DISPLACEMENT_LENGTH / 4) {
  802518:	e0bfff17 	ldw	r2,-4(fp)
  80251c:	10800808 	cmpgei	r2,r2,32
  802520:	1000031e 	bne	r2,zero,802530 <setupArcDisplacementFunction+0x4c>
			makeDownRight(ptr);
  802524:	e13ffe17 	ldw	r4,-8(fp)
  802528:	08027600 	call	802760 <makeDownRight>
  80252c:	00000e06 	br	802568 <setupArcDisplacementFunction+0x84>
		} else if (i < DISPLACEMENT_LENGTH / 2) {
  802530:	e0bfff17 	ldw	r2,-4(fp)
  802534:	10801008 	cmpgei	r2,r2,64
  802538:	1000031e 	bne	r2,zero,802548 <setupArcDisplacementFunction+0x64>
			makeDownLeft(ptr);
  80253c:	e13ffe17 	ldw	r4,-8(fp)
  802540:	08027a00 	call	8027a0 <makeDownLeft>
  802544:	00000806 	br	802568 <setupArcDisplacementFunction+0x84>
		} else if (i < 3 * DISPLACEMENT_LENGTH / 4) {
  802548:	e0bfff17 	ldw	r2,-4(fp)
  80254c:	10801808 	cmpgei	r2,r2,96
  802550:	1000031e 	bne	r2,zero,802560 <setupArcDisplacementFunction+0x7c>
			makeUpRight(ptr);
  802554:	e13ffe17 	ldw	r4,-8(fp)
  802558:	08027e00 	call	8027e0 <makeUpRight>
  80255c:	00000206 	br	802568 <setupArcDisplacementFunction+0x84>
		} else {
			makeUpLeft(ptr);
  802560:	e13ffe17 	ldw	r4,-8(fp)
  802564:	08028200 	call	802820 <makeUpLeft>
		}
		ptr->next = &arcDisplacementFunction[i + 1];
  802568:	e0bfff17 	ldw	r2,-4(fp)
  80256c:	100490fa 	slli	r2,r2,3
  802570:	1007883a 	mov	r3,r2
  802574:	008020b4 	movhi	r2,130
  802578:	1087b004 	addi	r2,r2,7872
  80257c:	1887883a 	add	r3,r3,r2
  802580:	e0bffe17 	ldw	r2,-8(fp)
  802584:	10c00115 	stw	r3,4(r2)
}

void setupArcDisplacementFunction(void) {
	int i;
	Displacement *ptr;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  802588:	e0bfff17 	ldw	r2,-4(fp)
  80258c:	10800044 	addi	r2,r2,1
  802590:	e0bfff15 	stw	r2,-4(fp)
  802594:	e0bfff17 	ldw	r2,-4(fp)
  802598:	10802010 	cmplti	r2,r2,128
  80259c:	103fd71e 	bne	r2,zero,8024fc <setupArcDisplacementFunction+0x18>
		} else {
			makeUpLeft(ptr);
		}
		ptr->next = &arcDisplacementFunction[i + 1];
	}
	ptr = &arcDisplacementFunction[DISPLACEMENT_LENGTH];
  8025a0:	008020b4 	movhi	r2,130
  8025a4:	1088ae04 	addi	r2,r2,8888
  8025a8:	e0bffe15 	stw	r2,-8(fp)
	ptr->next = arcDisplacementFunction;
  8025ac:	e0fffe17 	ldw	r3,-8(fp)
  8025b0:	008020b4 	movhi	r2,130
  8025b4:	1087ae04 	addi	r2,r2,7864
  8025b8:	18800115 	stw	r2,4(r3)
}
  8025bc:	e037883a 	mov	sp,fp
  8025c0:	dfc00117 	ldw	ra,4(sp)
  8025c4:	df000017 	ldw	fp,0(sp)
  8025c8:	dec00204 	addi	sp,sp,8
  8025cc:	f800283a 	ret

008025d0 <setupNoDisplcementFunction>:

void setupNoDisplcementFunction(void) {
  8025d0:	defffe04 	addi	sp,sp,-8
  8025d4:	df000115 	stw	fp,4(sp)
  8025d8:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  8025dc:	e03fff15 	stw	zero,-4(fp)
  8025e0:	00001806 	br	802644 <setupNoDisplcementFunction+0x74>
		doNotMove[i].dx = 0;
  8025e4:	e0bfff17 	ldw	r2,-4(fp)
  8025e8:	00c020b4 	movhi	r3,130
  8025ec:	18c6ae04 	addi	r3,r3,6840
  8025f0:	100490fa 	slli	r2,r2,3
  8025f4:	10c5883a 	add	r2,r2,r3
  8025f8:	1000000d 	sth	zero,0(r2)
		doNotMove[i].dy = 0;
  8025fc:	e0bfff17 	ldw	r2,-4(fp)
  802600:	00c020b4 	movhi	r3,130
  802604:	18c6ae04 	addi	r3,r3,6840
  802608:	100490fa 	slli	r2,r2,3
  80260c:	10c5883a 	add	r2,r2,r3
  802610:	1000008d 	sth	zero,2(r2)
		doNotMove[i].next = doNotMove;
  802614:	e0bfff17 	ldw	r2,-4(fp)
  802618:	00c020b4 	movhi	r3,130
  80261c:	18c6ae04 	addi	r3,r3,6840
  802620:	100490fa 	slli	r2,r2,3
  802624:	10c5883a 	add	r2,r2,r3
  802628:	10c00104 	addi	r3,r2,4
  80262c:	008020b4 	movhi	r2,130
  802630:	1086ae04 	addi	r2,r2,6840
  802634:	18800015 	stw	r2,0(r3)
	ptr->next = arcDisplacementFunction;
}

void setupNoDisplcementFunction(void) {
	int i;
	for (i = 0; i < DISPLACEMENT_LENGTH; i++) {
  802638:	e0bfff17 	ldw	r2,-4(fp)
  80263c:	10800044 	addi	r2,r2,1
  802640:	e0bfff15 	stw	r2,-4(fp)
  802644:	e0bfff17 	ldw	r2,-4(fp)
  802648:	10802010 	cmplti	r2,r2,128
  80264c:	103fe51e 	bne	r2,zero,8025e4 <setupNoDisplcementFunction+0x14>
		doNotMove[i].dx = 0;
		doNotMove[i].dy = 0;
		doNotMove[i].next = doNotMove;
	}
}
  802650:	e037883a 	mov	sp,fp
  802654:	df000017 	ldw	fp,0(sp)
  802658:	dec00104 	addi	sp,sp,4
  80265c:	f800283a 	ret

00802660 <makeRight>:

void makeRight(Displacement *disp) {
  802660:	defffe04 	addi	sp,sp,-8
  802664:	df000115 	stw	fp,4(sp)
  802668:	df000104 	addi	fp,sp,4
  80266c:	e13fff15 	stw	r4,-4(fp)
	disp->dx = right.dx;
  802670:	d0e71f0b 	ldhu	r3,-25476(gp)
  802674:	e0bfff17 	ldw	r2,-4(fp)
  802678:	10c0000d 	sth	r3,0(r2)
	disp->dy = right.dy;
  80267c:	008020b4 	movhi	r2,130
  802680:	10bee684 	addi	r2,r2,-1126
  802684:	10c0000b 	ldhu	r3,0(r2)
  802688:	e0bfff17 	ldw	r2,-4(fp)
  80268c:	10c0008d 	sth	r3,2(r2)
}
  802690:	e037883a 	mov	sp,fp
  802694:	df000017 	ldw	fp,0(sp)
  802698:	dec00104 	addi	sp,sp,4
  80269c:	f800283a 	ret

008026a0 <makeLeft>:
void makeLeft(Displacement *disp) {
  8026a0:	defffe04 	addi	sp,sp,-8
  8026a4:	df000115 	stw	fp,4(sp)
  8026a8:	df000104 	addi	fp,sp,4
  8026ac:	e13fff15 	stw	r4,-4(fp)
	disp->dx = left.dx;
  8026b0:	d0e7210b 	ldhu	r3,-25468(gp)
  8026b4:	e0bfff17 	ldw	r2,-4(fp)
  8026b8:	10c0000d 	sth	r3,0(r2)
	disp->dy = left.dy;
  8026bc:	008020b4 	movhi	r2,130
  8026c0:	10bee884 	addi	r2,r2,-1118
  8026c4:	10c0000b 	ldhu	r3,0(r2)
  8026c8:	e0bfff17 	ldw	r2,-4(fp)
  8026cc:	10c0008d 	sth	r3,2(r2)
}
  8026d0:	e037883a 	mov	sp,fp
  8026d4:	df000017 	ldw	fp,0(sp)
  8026d8:	dec00104 	addi	sp,sp,4
  8026dc:	f800283a 	ret

008026e0 <makeUp>:
void makeUp(Displacement *disp) {
  8026e0:	defffe04 	addi	sp,sp,-8
  8026e4:	df000115 	stw	fp,4(sp)
  8026e8:	df000104 	addi	fp,sp,4
  8026ec:	e13fff15 	stw	r4,-4(fp)
	disp->dx = up.dx;
  8026f0:	d0e7230b 	ldhu	r3,-25460(gp)
  8026f4:	e0bfff17 	ldw	r2,-4(fp)
  8026f8:	10c0000d 	sth	r3,0(r2)
	disp->dy = up.dy;
  8026fc:	008020b4 	movhi	r2,130
  802700:	10beea84 	addi	r2,r2,-1110
  802704:	10c0000b 	ldhu	r3,0(r2)
  802708:	e0bfff17 	ldw	r2,-4(fp)
  80270c:	10c0008d 	sth	r3,2(r2)
}
  802710:	e037883a 	mov	sp,fp
  802714:	df000017 	ldw	fp,0(sp)
  802718:	dec00104 	addi	sp,sp,4
  80271c:	f800283a 	ret

00802720 <makeDown>:

void makeDown(Displacement *disp) {
  802720:	defffe04 	addi	sp,sp,-8
  802724:	df000115 	stw	fp,4(sp)
  802728:	df000104 	addi	fp,sp,4
  80272c:	e13fff15 	stw	r4,-4(fp)
	disp->dx = down.dx;
  802730:	d0e7250b 	ldhu	r3,-25452(gp)
  802734:	e0bfff17 	ldw	r2,-4(fp)
  802738:	10c0000d 	sth	r3,0(r2)
	disp->dy = down.dy;
  80273c:	008020b4 	movhi	r2,130
  802740:	10beec84 	addi	r2,r2,-1102
  802744:	10c0000b 	ldhu	r3,0(r2)
  802748:	e0bfff17 	ldw	r2,-4(fp)
  80274c:	10c0008d 	sth	r3,2(r2)
}
  802750:	e037883a 	mov	sp,fp
  802754:	df000017 	ldw	fp,0(sp)
  802758:	dec00104 	addi	sp,sp,4
  80275c:	f800283a 	ret

00802760 <makeDownRight>:

void makeDownRight(Displacement *disp) {
  802760:	defffe04 	addi	sp,sp,-8
  802764:	df000115 	stw	fp,4(sp)
  802768:	df000104 	addi	fp,sp,4
  80276c:	e13fff15 	stw	r4,-4(fp)
	disp->dx = right.dx;
  802770:	d0e71f0b 	ldhu	r3,-25476(gp)
  802774:	e0bfff17 	ldw	r2,-4(fp)
  802778:	10c0000d 	sth	r3,0(r2)
	disp->dy = down.dy;
  80277c:	008020b4 	movhi	r2,130
  802780:	10beec84 	addi	r2,r2,-1102
  802784:	10c0000b 	ldhu	r3,0(r2)
  802788:	e0bfff17 	ldw	r2,-4(fp)
  80278c:	10c0008d 	sth	r3,2(r2)
}
  802790:	e037883a 	mov	sp,fp
  802794:	df000017 	ldw	fp,0(sp)
  802798:	dec00104 	addi	sp,sp,4
  80279c:	f800283a 	ret

008027a0 <makeDownLeft>:

void makeDownLeft(Displacement *disp) {
  8027a0:	defffe04 	addi	sp,sp,-8
  8027a4:	df000115 	stw	fp,4(sp)
  8027a8:	df000104 	addi	fp,sp,4
  8027ac:	e13fff15 	stw	r4,-4(fp)
	disp->dx = left.dx;
  8027b0:	d0e7210b 	ldhu	r3,-25468(gp)
  8027b4:	e0bfff17 	ldw	r2,-4(fp)
  8027b8:	10c0000d 	sth	r3,0(r2)
	disp->dy = down.dy;
  8027bc:	008020b4 	movhi	r2,130
  8027c0:	10beec84 	addi	r2,r2,-1102
  8027c4:	10c0000b 	ldhu	r3,0(r2)
  8027c8:	e0bfff17 	ldw	r2,-4(fp)
  8027cc:	10c0008d 	sth	r3,2(r2)
}
  8027d0:	e037883a 	mov	sp,fp
  8027d4:	df000017 	ldw	fp,0(sp)
  8027d8:	dec00104 	addi	sp,sp,4
  8027dc:	f800283a 	ret

008027e0 <makeUpRight>:

void makeUpRight(Displacement *disp) {
  8027e0:	defffe04 	addi	sp,sp,-8
  8027e4:	df000115 	stw	fp,4(sp)
  8027e8:	df000104 	addi	fp,sp,4
  8027ec:	e13fff15 	stw	r4,-4(fp)
	disp->dx = right.dx;
  8027f0:	d0e71f0b 	ldhu	r3,-25476(gp)
  8027f4:	e0bfff17 	ldw	r2,-4(fp)
  8027f8:	10c0000d 	sth	r3,0(r2)
	disp->dy = up.dy;
  8027fc:	008020b4 	movhi	r2,130
  802800:	10beea84 	addi	r2,r2,-1110
  802804:	10c0000b 	ldhu	r3,0(r2)
  802808:	e0bfff17 	ldw	r2,-4(fp)
  80280c:	10c0008d 	sth	r3,2(r2)
}
  802810:	e037883a 	mov	sp,fp
  802814:	df000017 	ldw	fp,0(sp)
  802818:	dec00104 	addi	sp,sp,4
  80281c:	f800283a 	ret

00802820 <makeUpLeft>:

void makeUpLeft(Displacement *disp) {
  802820:	defffe04 	addi	sp,sp,-8
  802824:	df000115 	stw	fp,4(sp)
  802828:	df000104 	addi	fp,sp,4
  80282c:	e13fff15 	stw	r4,-4(fp)
	disp->dx = left.dx;
  802830:	d0e7210b 	ldhu	r3,-25468(gp)
  802834:	e0bfff17 	ldw	r2,-4(fp)
  802838:	10c0000d 	sth	r3,0(r2)
	disp->dy = up.dy;
  80283c:	008020b4 	movhi	r2,130
  802840:	10beea84 	addi	r2,r2,-1110
  802844:	10c0000b 	ldhu	r3,0(r2)
  802848:	e0bfff17 	ldw	r2,-4(fp)
  80284c:	10c0008d 	sth	r3,2(r2)
}
  802850:	e037883a 	mov	sp,fp
  802854:	df000017 	ldw	fp,0(sp)
  802858:	dec00104 	addi	sp,sp,4
  80285c:	f800283a 	ret

00802860 <setToRandomDisplacement>:

void setToRandomDisplacement(Shark *shark) {
  802860:	defff804 	addi	sp,sp,-32
  802864:	dfc00715 	stw	ra,28(sp)
  802868:	df000615 	stw	fp,24(sp)
  80286c:	df000604 	addi	fp,sp,24
  802870:	e13ffd15 	stw	r4,-12(fp)
	srand(time(NULL));
  802874:	0009883a 	mov	r4,zero
  802878:	08098d80 	call	8098d8 <time>
  80287c:	1009883a 	mov	r4,r2
  802880:	08097600 	call	809760 <srand>
	int r = rand();
  802884:	080977c0 	call	80977c <rand>
  802888:	e0bffc15 	stw	r2,-16(fp)
	short int select = r % 4;
  80288c:	e0fffc17 	ldw	r3,-16(fp)
  802890:	00a00034 	movhi	r2,32768
  802894:	108000c4 	addi	r2,r2,3
  802898:	1886703a 	and	r3,r3,r2
  80289c:	e0ffff15 	stw	r3,-4(fp)
  8028a0:	e0ffff17 	ldw	r3,-4(fp)
  8028a4:	1804403a 	cmpge	r2,r3,zero
  8028a8:	10000a1e 	bne	r2,zero,8028d4 <setToRandomDisplacement+0x74>
  8028ac:	e0bfff17 	ldw	r2,-4(fp)
  8028b0:	10bfffc4 	addi	r2,r2,-1
  8028b4:	e0bfff15 	stw	r2,-4(fp)
  8028b8:	00bfff04 	movi	r2,-4
  8028bc:	e0ffff17 	ldw	r3,-4(fp)
  8028c0:	1886b03a 	or	r3,r3,r2
  8028c4:	e0ffff15 	stw	r3,-4(fp)
  8028c8:	e0bfff17 	ldw	r2,-4(fp)
  8028cc:	10800044 	addi	r2,r2,1
  8028d0:	e0bfff15 	stw	r2,-4(fp)
  8028d4:	e0bfff17 	ldw	r2,-4(fp)
  8028d8:	e0bffb0d 	sth	r2,-20(fp)
	Displacement *ptr;
	switch (select) {
  8028dc:	e0fffb0f 	ldh	r3,-20(fp)
  8028e0:	e0fffe15 	stw	r3,-8(fp)
  8028e4:	e0fffe17 	ldw	r3,-8(fp)
  8028e8:	18800060 	cmpeqi	r2,r3,1
  8028ec:	1000121e 	bne	r2,zero,802938 <setToRandomDisplacement+0xd8>
  8028f0:	e0fffe17 	ldw	r3,-8(fp)
  8028f4:	18800088 	cmpgei	r2,r3,2
  8028f8:	1000041e 	bne	r2,zero,80290c <setToRandomDisplacement+0xac>
  8028fc:	e0fffe17 	ldw	r3,-8(fp)
  802900:	1805003a 	cmpeq	r2,r3,zero
  802904:	1000081e 	bne	r2,zero,802928 <setToRandomDisplacement+0xc8>
  802908:	00001606 	br	802964 <setToRandomDisplacement+0x104>
  80290c:	e0fffe17 	ldw	r3,-8(fp)
  802910:	188000a0 	cmpeqi	r2,r3,2
  802914:	10000c1e 	bne	r2,zero,802948 <setToRandomDisplacement+0xe8>
  802918:	e0fffe17 	ldw	r3,-8(fp)
  80291c:	188000e0 	cmpeqi	r2,r3,3
  802920:	10000d1e 	bne	r2,zero,802958 <setToRandomDisplacement+0xf8>
  802924:	00000f06 	br	802964 <setToRandomDisplacement+0x104>
	case 0:
		ptr = verticalDisplacementFunctionUp;
  802928:	008020b4 	movhi	r2,130
  80292c:	1084ae04 	addi	r2,r2,4792
  802930:	e0bffa15 	stw	r2,-24(fp)
		break;
  802934:	00000b06 	br	802964 <setToRandomDisplacement+0x104>
	case 1:
		ptr = verticalDisplacementFunctionDown;
  802938:	008020b4 	movhi	r2,130
  80293c:	1083ae04 	addi	r2,r2,3768
  802940:	e0bffa15 	stw	r2,-24(fp)
		break;
  802944:	00000706 	br	802964 <setToRandomDisplacement+0x104>
	case 2:
		ptr = circularDisplacementFunction;
  802948:	008020b4 	movhi	r2,130
  80294c:	1085ae04 	addi	r2,r2,5816
  802950:	e0bffa15 	stw	r2,-24(fp)
		break;
  802954:	00000306 	br	802964 <setToRandomDisplacement+0x104>
	case 3:
		ptr = arcDisplacementFunction;
  802958:	008020b4 	movhi	r2,130
  80295c:	1087ae04 	addi	r2,r2,7864
  802960:	e0bffa15 	stw	r2,-24(fp)
		break;
	}
	shark->displacement = ptr;
  802964:	e0fffd17 	ldw	r3,-12(fp)
  802968:	e0bffa17 	ldw	r2,-24(fp)
  80296c:	18800815 	stw	r2,32(r3)
}
  802970:	e037883a 	mov	sp,fp
  802974:	dfc00117 	ldw	ra,4(sp)
  802978:	df000017 	ldw	fp,0(sp)
  80297c:	dec00204 	addi	sp,sp,8
  802980:	f800283a 	ret

00802984 <handleKeyInput>:
#include "input.h"


void handleKeyInput(void){
  802984:	defffc04 	addi	sp,sp,-16
  802988:	dfc00315 	stw	ra,12(sp)
  80298c:	df000215 	stw	fp,8(sp)
  802990:	dc000115 	stw	r16,4(sp)
  802994:	df000104 	addi	fp,sp,4
	static short int edgeDetect0 = 0;
	static short int edgeDetect1 = 0;
	static short int edgeDetect2 = 0;
	static short int edgeDetect3 = 0;

	keyInput = IORD_8DIRECT(KEYS_BASE, 0);
  802998:	00804034 	movhi	r2,256
  80299c:	10842004 	addi	r2,r2,4224
  8029a0:	10800023 	ldbuio	r2,0(r2)
  8029a4:	d0a72905 	stb	r2,-25436(gp)
	char key0 = keyInput & 0x01;
  8029a8:	d0a72903 	ldbu	r2,-25436(gp)
  8029ac:	1080004c 	andi	r2,r2,1
  8029b0:	e0bfffc5 	stb	r2,-1(fp)
	char key1 = keyInput & 0x02;
  8029b4:	d0a72903 	ldbu	r2,-25436(gp)
  8029b8:	1080008c 	andi	r2,r2,2
  8029bc:	e0bfff85 	stb	r2,-2(fp)
	char key2 = keyInput & 0x04;
  8029c0:	d0a72903 	ldbu	r2,-25436(gp)
  8029c4:	1080010c 	andi	r2,r2,4
  8029c8:	e0bfff45 	stb	r2,-3(fp)
	char key3 = keyInput & 0x08;
  8029cc:	d0a72903 	ldbu	r2,-25436(gp)
  8029d0:	1080020c 	andi	r2,r2,8
  8029d4:	e0bfff05 	stb	r2,-4(fp)

	//functionality for keys being held
	if(key1) {
  8029d8:	e0bfff87 	ldb	r2,-2(fp)
  8029dc:	1005003a 	cmpeq	r2,r2,zero
  8029e0:	1000021e 	bne	r2,zero,8029ec <handleKeyInput+0x68>
		moveDownPlayer();
  8029e4:	080303c0 	call	80303c <moveDownPlayer>
  8029e8:	00000606 	br	802a04 <handleKeyInput+0x80>
	} else if (key2) {
  8029ec:	e0bfff47 	ldb	r2,-3(fp)
  8029f0:	1005003a 	cmpeq	r2,r2,zero
  8029f4:	1000021e 	bne	r2,zero,802a00 <handleKeyInput+0x7c>
		moveUpPlayer();
  8029f8:	0802fb00 	call	802fb0 <moveUpPlayer>
  8029fc:	00000106 	br	802a04 <handleKeyInput+0x80>
	} else {
		keepPlayerStationary();
  802a00:	08030c80 	call	8030c8 <keepPlayerStationary>
	}

	//functionality for keys being pressed.
	if (!key0 && (edgeDetect0 == 0)) {
  802a04:	e0bfffc7 	ldb	r2,-1(fp)
  802a08:	1004c03a 	cmpne	r2,r2,zero
  802a0c:	1000091e 	bne	r2,zero,802a34 <handleKeyInput+0xb0>
  802a10:	d0a7288b 	ldhu	r2,-25438(gp)
  802a14:	10bfffcc 	andi	r2,r2,65535
  802a18:	10a0001c 	xori	r2,r2,32768
  802a1c:	10a00004 	addi	r2,r2,-32768
  802a20:	1004c03a 	cmpne	r2,r2,zero
  802a24:	1000031e 	bne	r2,zero,802a34 <handleKeyInput+0xb0>
		edgeDetect0 = 1;
  802a28:	00800044 	movi	r2,1
  802a2c:	d0a7288d 	sth	r2,-25438(gp)
	} else {
		keepPlayerStationary();
	}

	//functionality for keys being pressed.
	if (!key0 && (edgeDetect0 == 0)) {
  802a30:	00002406 	br	802ac4 <handleKeyInput+0x140>
		edgeDetect0 = 1;
	} else if (key0 && (edgeDetect0 == 1)) {
  802a34:	e0bfffc7 	ldb	r2,-1(fp)
  802a38:	1005003a 	cmpeq	r2,r2,zero
  802a3c:	1000211e 	bne	r2,zero,802ac4 <handleKeyInput+0x140>
  802a40:	d0a7288b 	ldhu	r2,-25438(gp)
  802a44:	10bfffcc 	andi	r2,r2,65535
  802a48:	10a0001c 	xori	r2,r2,32768
  802a4c:	10a00004 	addi	r2,r2,-32768
  802a50:	10800058 	cmpnei	r2,r2,1
  802a54:	10001b1e 	bne	r2,zero,802ac4 <handleKeyInput+0x140>
		edgeDetect0 = 0;
  802a58:	d027288d 	sth	zero,-25438(gp)
		createBullet(PLAYERBULLET, player.x + PLAYER_WIDTH + 1, player.y + 0.5 * PLAYER_HEIGHT);
  802a5c:	008020b4 	movhi	r2,130
  802a60:	10bfaa04 	addi	r2,r2,-344
  802a64:	10800017 	ldw	r2,0(r2)
  802a68:	140007c4 	addi	r16,r2,31
  802a6c:	008020b4 	movhi	r2,130
  802a70:	10bfaa04 	addi	r2,r2,-344
  802a74:	11000217 	ldw	r4,8(r2)
  802a78:	08083140 	call	808314 <__floatsidf>
  802a7c:	100b883a 	mov	r5,r2
  802a80:	180d883a 	mov	r6,r3
  802a84:	2809883a 	mov	r4,r5
  802a88:	300b883a 	mov	r5,r6
  802a8c:	000d883a 	mov	r6,zero
  802a90:	01d00bb4 	movhi	r7,16430
  802a94:	08079dc0 	call	8079dc <__adddf3>
  802a98:	1009883a 	mov	r4,r2
  802a9c:	180b883a 	mov	r5,r3
  802aa0:	2005883a 	mov	r2,r4
  802aa4:	2807883a 	mov	r3,r5
  802aa8:	1009883a 	mov	r4,r2
  802aac:	180b883a 	mov	r5,r3
  802ab0:	080840c0 	call	80840c <__fixdfsi>
  802ab4:	100d883a 	mov	r6,r2
  802ab8:	0009883a 	mov	r4,zero
  802abc:	800b883a 	mov	r5,r16
  802ac0:	08018800 	call	801880 <createBullet>
		hitPlayer(); // TEST only
		//updateCurrentPlayerScore(250);
		//playSharkDeath();
	}
	*/
}
  802ac4:	e037883a 	mov	sp,fp
  802ac8:	dfc00217 	ldw	ra,8(sp)
  802acc:	df000117 	ldw	fp,4(sp)
  802ad0:	dc000017 	ldw	r16,0(sp)
  802ad4:	dec00304 	addi	sp,sp,12
  802ad8:	f800283a 	ret

00802adc <handleSwitchInput>:

void handleSwitchInput(void){
  802adc:	defffe04 	addi	sp,sp,-8
  802ae0:	dfc00115 	stw	ra,4(sp)
  802ae4:	df000015 	stw	fp,0(sp)
  802ae8:	d839883a 	mov	fp,sp
	static char SWInput;
	static short int edgeDetect = 0;
	static char prevSwInput = 0x03;
	static short int scoresShown = 0;
	SWInput = IORD_8DIRECT(SWITCHES_BASE, 0);
  802aec:	00804034 	movhi	r2,256
  802af0:	10841804 	addi	r2,r2,4192
  802af4:	10800023 	ldbuio	r2,0(r2)
  802af8:	d0a72a85 	stb	r2,-25430(gp)

	if((SWInput & 0x0F) != (prevSwInput & 0x0F)) {
  802afc:	d0a72a83 	ldbu	r2,-25430(gp)
  802b00:	10803fcc 	andi	r2,r2,255
  802b04:	10c003cc 	andi	r3,r2,15
  802b08:	d0a00303 	ldbu	r2,-32756(gp)
  802b0c:	10803fcc 	andi	r2,r2,255
  802b10:	108003cc 	andi	r2,r2,15
  802b14:	18800526 	beq	r3,r2,802b2c <handleSwitchInput+0x50>
		updateAudioWithVolume(SWInput);
  802b18:	d0a72a83 	ldbu	r2,-25430(gp)
  802b1c:	11003fcc 	andi	r4,r2,255
  802b20:	2100201c 	xori	r4,r4,128
  802b24:	213fe004 	addi	r4,r4,-128
  802b28:	0800d980 	call	800d98 <updateAudioWithVolume>
	}
	prevSwInput = SWInput;
  802b2c:	d0a72a83 	ldbu	r2,-25430(gp)
  802b30:	d0a00305 	stb	r2,-32756(gp)

	if ((SWInput & 0x80) != 0) {
  802b34:	d0a72a83 	ldbu	r2,-25430(gp)
  802b38:	10803fcc 	andi	r2,r2,255
  802b3c:	1080201c 	xori	r2,r2,128
  802b40:	10bfe004 	addi	r2,r2,-128
  802b44:	1004403a 	cmpge	r2,r2,zero
  802b48:	10000b1e 	bne	r2,zero,802b78 <handleSwitchInput+0x9c>
		if(scoresShown == 0){
  802b4c:	d0a7298b 	ldhu	r2,-25434(gp)
  802b50:	10bfffcc 	andi	r2,r2,65535
  802b54:	10a0001c 	xori	r2,r2,32768
  802b58:	10a00004 	addi	r2,r2,-32768
  802b5c:	1004c03a 	cmpne	r2,r2,zero
  802b60:	1000021e 	bne	r2,zero,802b6c <handleSwitchInput+0x90>
			readHighScoreBoardFromSD();
  802b64:	08032c00 	call	8032c0 <readHighScoreBoardFromSD>
			drawScore();
  802b68:	0803e1c0 	call	803e1c <drawScore>
		}
		scoresShown = 1;
  802b6c:	00800044 	movi	r2,1
  802b70:	d0a7298d 	sth	r2,-25434(gp)
  802b74:	00000906 	br	802b9c <handleSwitchInput+0xc0>
	} else {
		if(scoresShown == 1){
  802b78:	d0a7298b 	ldhu	r2,-25434(gp)
  802b7c:	10bfffcc 	andi	r2,r2,65535
  802b80:	10a0001c 	xori	r2,r2,32768
  802b84:	10a00004 	addi	r2,r2,-32768
  802b88:	10800058 	cmpnei	r2,r2,1
  802b8c:	1000021e 	bne	r2,zero,802b98 <handleSwitchInput+0xbc>
			clearScore();
  802b90:	08040540 	call	804054 <clearScore>
			drawInGameInfo();
  802b94:	08040800 	call	804080 <drawInGameInfo>
		}
		scoresShown = 0;
  802b98:	d027298d 	sth	zero,-25434(gp)
	}

}
  802b9c:	e037883a 	mov	sp,fp
  802ba0:	dfc00117 	ldw	ra,4(sp)
  802ba4:	df000017 	ldw	fp,0(sp)
  802ba8:	dec00204 	addi	sp,sp,8
  802bac:	f800283a 	ret

00802bb0 <handleAtariInput>:

void handleAtariInput(void){
  802bb0:	deffff04 	addi	sp,sp,-4
  802bb4:	df000015 	stw	fp,0(sp)
  802bb8:	d839883a 	mov	fp,sp
	static char atariUp;
	static char atariDown;
	static char atariFire;
	static short int edgeDetect = 0;

	atariButtons = (IORD_8DIRECT(PROCESSORGPIN_BASE, 0) & 0x0F);
  802bbc:	00804034 	movhi	r2,256
  802bc0:	10842c04 	addi	r2,r2,4272
  802bc4:	10800023 	ldbuio	r2,0(r2)
  802bc8:	108003cc 	andi	r2,r2,15
  802bcc:	d0a72c45 	stb	r2,-25423(gp)
	atariFire = atariButtons & 0x08;
  802bd0:	d0a72c43 	ldbu	r2,-25423(gp)
  802bd4:	1080020c 	andi	r2,r2,8
  802bd8:	d0a72b85 	stb	r2,-25426(gp)
	atariUp = atariButtons & 0x02;
  802bdc:	d0a72c43 	ldbu	r2,-25423(gp)
  802be0:	1080008c 	andi	r2,r2,2
  802be4:	d0a72c05 	stb	r2,-25424(gp)
	atariDown = atariButtons & 0x04;
  802be8:	d0a72c43 	ldbu	r2,-25423(gp)
  802bec:	1080010c 	andi	r2,r2,4
  802bf0:	d0a72bc5 	stb	r2,-25425(gp)
	IOWR_16DIRECT(LEDS_BASE, 0, atariButtons);
  802bf4:	d0a72c43 	ldbu	r2,-25423(gp)
  802bf8:	10c03fcc 	andi	r3,r2,255
  802bfc:	18c0201c 	xori	r3,r3,128
  802c00:	18ffe004 	addi	r3,r3,-128
  802c04:	00804034 	movhi	r2,256
  802c08:	10841c04 	addi	r2,r2,4208
  802c0c:	10c0002d 	sthio	r3,0(r2)
	} else if (atariDown != 0x00) {
		moveDownPlayer();
	} else {
		keepPlayerStationary();
	}*/
}
  802c10:	e037883a 	mov	sp,fp
  802c14:	df000017 	ldw	fp,0(sp)
  802c18:	dec00104 	addi	sp,sp,4
  802c1c:	f800283a 	ret

00802c20 <startGame>:

int startGame() {
  802c20:	defffd04 	addi	sp,sp,-12
  802c24:	df000215 	stw	fp,8(sp)
  802c28:	df000204 	addi	fp,sp,8
	char atariButtons;
	char atariFire;

	atariButtons = (IORD_8DIRECT(KEYS_BASE, 0) & 0x0F);
  802c2c:	00804034 	movhi	r2,256
  802c30:	10842004 	addi	r2,r2,4224
  802c34:	10800023 	ldbuio	r2,0(r2)
  802c38:	108003cc 	andi	r2,r2,15
  802c3c:	e0bffe45 	stb	r2,-7(fp)
	atariFire = atariButtons & 0x8;
  802c40:	e0bffe43 	ldbu	r2,-7(fp)
  802c44:	1080020c 	andi	r2,r2,8
  802c48:	e0bffe05 	stb	r2,-8(fp)
	
	if (atariFire) {
  802c4c:	e0bffe07 	ldb	r2,-8(fp)
  802c50:	1005003a 	cmpeq	r2,r2,zero
  802c54:	1000031e 	bne	r2,zero,802c64 <startGame+0x44>
		return 1;
  802c58:	00800044 	movi	r2,1
  802c5c:	e0bfff15 	stw	r2,-4(fp)
  802c60:	00000106 	br	802c68 <startGame+0x48>
	} else {
		return 0;
  802c64:	e03fff15 	stw	zero,-4(fp)
  802c68:	e0bfff17 	ldw	r2,-4(fp)
	}
}
  802c6c:	e037883a 	mov	sp,fp
  802c70:	df000017 	ldw	fp,0(sp)
  802c74:	dec00104 	addi	sp,sp,4
  802c78:	f800283a 	ret

00802c7c <init_lcd>:
#include "lcd.h"

int init_lcd() {
  802c7c:	defffd04 	addi	sp,sp,-12
  802c80:	dfc00215 	stw	ra,8(sp)
  802c84:	df000115 	stw	fp,4(sp)
  802c88:	df000104 	addi	fp,sp,4
	// open the Character LCD port
	char_lcd_dev = alt_up_character_lcd_open_dev("/dev/character_lcd_0");
  802c8c:	010020b4 	movhi	r4,130
  802c90:	212e6204 	addi	r4,r4,-18040
  802c94:	08142d80 	call	8142d8 <alt_up_character_lcd_open_dev>
  802c98:	d0a72d15 	stw	r2,-25420(gp)

	if(char_lcd_dev == NULL) {
  802c9c:	d0a72d17 	ldw	r2,-25420(gp)
  802ca0:	1004c03a 	cmpne	r2,r2,zero
  802ca4:	1000031e 	bne	r2,zero,802cb4 <init_lcd+0x38>
		return -1;
  802ca8:	00bfffc4 	movi	r2,-1
  802cac:	e0bfff15 	stw	r2,-4(fp)
  802cb0:	00000306 	br	802cc0 <init_lcd+0x44>
	}

	/* Initialize the character display */
	alt_up_character_lcd_init (char_lcd_dev);
  802cb4:	d1272d17 	ldw	r4,-25420(gp)
  802cb8:	08142a40 	call	8142a4 <alt_up_character_lcd_init>

	return 0;
  802cbc:	e03fff15 	stw	zero,-4(fp)
  802cc0:	e0bfff17 	ldw	r2,-4(fp)
}
  802cc4:	e037883a 	mov	sp,fp
  802cc8:	dfc00117 	ldw	ra,4(sp)
  802ccc:	df000017 	ldw	fp,0(sp)
  802cd0:	dec00204 	addi	sp,sp,8
  802cd4:	f800283a 	ret

00802cd8 <init>:
#define switches (volatile char *) 0x1001060
#define leds (char *) 0x1001070
#define keys (volatile char *) 0x1001080
#define atariInput (volatile char *) 0x10010b0

int init(void) {
  802cd8:	defffd04 	addi	sp,sp,-12
  802cdc:	dfc00215 	stw	ra,8(sp)
  802ce0:	df000115 	stw	fp,4(sp)
  802ce4:	df000104 	addi	fp,sp,4
	if (openSdCard() == -1) {
  802ce8:	08042dc0 	call	8042dc <openSdCard>
  802cec:	10bfffd8 	cmpnei	r2,r2,-1
  802cf0:	1000061e 	bne	r2,zero,802d0c <init+0x34>
		printf("Error: Failed to open sd card\n");
  802cf4:	010020b4 	movhi	r4,130
  802cf8:	212e6804 	addi	r4,r4,-18016
  802cfc:	080974c0 	call	80974c <puts>
		return -1;
  802d00:	00bfffc4 	movi	r2,-1
  802d04:	e0bfff15 	stw	r2,-4(fp)
  802d08:	00001c06 	br	802d7c <init+0xa4>
	} else {
		printf("Opened SD card\n");
  802d0c:	010020b4 	movhi	r4,130
  802d10:	212e7004 	addi	r4,r4,-17984
  802d14:	080974c0 	call	80974c <puts>
	}

	if (init_lcd() == -1) {
  802d18:	0802c7c0 	call	802c7c <init_lcd>
  802d1c:	10bfffd8 	cmpnei	r2,r2,-1
  802d20:	1000061e 	bne	r2,zero,802d3c <init+0x64>
		printf("Error: could not open character LCD device\n");
  802d24:	010020b4 	movhi	r4,130
  802d28:	212e7404 	addi	r4,r4,-17968
  802d2c:	080974c0 	call	80974c <puts>
		return -1;
  802d30:	00bfffc4 	movi	r2,-1
  802d34:	e0bfff15 	stw	r2,-4(fp)
  802d38:	00001006 	br	802d7c <init+0xa4>
	} else {
		printf("LCD Initialized\n");
  802d3c:	010020b4 	movhi	r4,130
  802d40:	212e7f04 	addi	r4,r4,-17924
  802d44:	080974c0 	call	80974c <puts>
	}

	initVga();
  802d48:	08050f40 	call	8050f4 <initVga>
	parseBmps();
  802d4c:	08014fc0 	call	8014fc <parseBmps>
	drawSplashScreen();
  802d50:	0804d1c0 	call	804d1c <drawSplashScreen>
	setupAudio();
  802d54:	08002040 	call	800204 <setupAudio>
	setupDisplacement();
  802d58:	08022640 	call	802264 <setupDisplacement>
	initScoreBoard();
  802d5c:	08031b40 	call	8031b4 <initScoreBoard>

	initBullets();
  802d60:	08017c40 	call	8017c4 <initBullets>
	initPlayer();
  802d64:	0802ecc0 	call	802ecc <initPlayer>
	initSharks();
  802d68:	08046500 	call	804650 <initSharks>

	setHardwareTimerPeriod(CLOCK_FREQ/30);
  802d6c:	01000674 	movhi	r4,25
  802d70:	211b9a84 	addi	r4,r4,28266
  802d74:	08050240 	call	805024 <setHardwareTimerPeriod>
	return 0;
  802d78:	e03fff15 	stw	zero,-4(fp)
  802d7c:	e0bfff17 	ldw	r2,-4(fp)
}
  802d80:	e037883a 	mov	sp,fp
  802d84:	dfc00117 	ldw	ra,4(sp)
  802d88:	df000017 	ldw	fp,0(sp)
  802d8c:	dec00204 	addi	sp,sp,8
  802d90:	f800283a 	ret

00802d94 <main>:

int main() {
  802d94:	defffb04 	addi	sp,sp,-20
  802d98:	dfc00415 	stw	ra,16(sp)
  802d9c:	df000315 	stw	fp,12(sp)
  802da0:	df000304 	addi	fp,sp,12
	int count = 0;
  802da4:	e03ffe15 	stw	zero,-8(fp)
	short int displaySplashScreen = 1;
  802da8:	00800044 	movi	r2,1
  802dac:	e0bffd0d 	sth	r2,-12(fp)

	if (init() == -1)
  802db0:	0802cd80 	call	802cd8 <init>
  802db4:	10bfffd8 	cmpnei	r2,r2,-1
  802db8:	1000031e 	bne	r2,zero,802dc8 <main+0x34>
		return -1;
  802dbc:	00bfffc4 	movi	r2,-1
  802dc0:	e0bfff15 	stw	r2,-4(fp)
  802dc4:	00003b06 	br	802eb4 <main+0x120>

	setHardwareTimerPeriod(CLOCK_FREQ / 30);
  802dc8:	01000674 	movhi	r4,25
  802dcc:	211b9a84 	addi	r4,r4,28266
  802dd0:	08050240 	call	805024 <setHardwareTimerPeriod>

	createShark(22, 100, 0, (Displacement *)&doNotMove);
  802dd4:	01000584 	movi	r4,22
  802dd8:	01401904 	movi	r5,100
  802ddc:	000d883a 	mov	r6,zero
  802de0:	01c020b4 	movhi	r7,130
  802de4:	39c6ae04 	addi	r7,r7,6840
  802de8:	0804a140 	call	804a14 <createShark>
	createShark(45, 200, 200, (Displacement *)&doNotMove);
  802dec:	01000b44 	movi	r4,45
  802df0:	01403204 	movi	r5,200
  802df4:	01803204 	movi	r6,200
  802df8:	01c020b4 	movhi	r7,130
  802dfc:	39c6ae04 	addi	r7,r7,6840
  802e00:	0804a140 	call	804a14 <createShark>

	drawAllSharks();
  802e04:	08049740 	call	804974 <drawAllSharks>
	startHardwareTimer();
  802e08:	08050c80 	call	8050c8 <startHardwareTimer>

	printf("%d: count \n", count);
  802e0c:	010020b4 	movhi	r4,130
  802e10:	212e8304 	addi	r4,r4,-17908
  802e14:	e17ffe17 	ldw	r5,-8(fp)
  802e18:	08096340 	call	809634 <printf>
  802e1c:	00000006 	br	802e20 <main+0x8c>
	// main game loop;
	while(1) {
		if (hasHardwareTimerExpired() == 1) {
  802e20:	08050a00 	call	8050a0 <hasHardwareTimerExpired>
  802e24:	10800058 	cmpnei	r2,r2,1
  802e28:	103ffd1e 	bne	r2,zero,802e20 <main+0x8c>
			startHardwareTimer();
  802e2c:	08050c80 	call	8050c8 <startHardwareTimer>

			if (displaySplashScreen) {
  802e30:	e0bffd0f 	ldh	r2,-12(fp)
  802e34:	1005003a 	cmpeq	r2,r2,zero
  802e38:	1000061e 	bne	r2,zero,802e54 <main+0xc0>
				if(startGame()) {
  802e3c:	0802c200 	call	802c20 <startGame>
  802e40:	1005003a 	cmpeq	r2,r2,zero
  802e44:	103ff61e 	bne	r2,zero,802e20 <main+0x8c>
					clearSplashScreen();
  802e48:	0804d680 	call	804d68 <clearSplashScreen>
					displaySplashScreen = 0;	
  802e4c:	e03ffd0d 	sth	zero,-12(fp)
  802e50:	003ff306 	br	802e20 <main+0x8c>
				}
			} else {
				count++;
  802e54:	e0bffe17 	ldw	r2,-8(fp)
  802e58:	10800044 	addi	r2,r2,1
  802e5c:	e0bffe15 	stw	r2,-8(fp)

				moveAllSharks();
  802e60:	08049240 	call	804924 <moveAllSharks>
				drawAllSharks();
  802e64:	08049740 	call	804974 <drawAllSharks>
				drawInGameInfo(); // TBD: in actual game loop, only call this function when an event happens (like score inc/dec, or lives inc/dec)
  802e68:	08040800 	call	804080 <drawInGameInfo>

				handleKeyInput();
  802e6c:	08029840 	call	802984 <handleKeyInput>
				handleSwitchInput();
  802e70:	0802adc0 	call	802adc <handleSwitchInput>
				//handleAtariInput();

				moveAllBullets();
  802e74:	08019e40 	call	8019e4 <moveAllBullets>

				cleanupDeadSharks();
  802e78:	0804c000 	call	804c00 <cleanupDeadSharks>

				doSharkBulletCollision();
  802e7c:	08021280 	call	802128 <doSharkBulletCollision>
				doPlayerBulletCollision();
  802e80:	08021c80 	call	8021c8 <doPlayerBulletCollision>

				drawAllBullets();
  802e84:	0801aac0 	call	801aac <drawAllBullets>

				alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  802e88:	d1271917 	ldw	r4,-25500(gp)
  802e8c:	0814c600 	call	814c60 <alt_up_pixel_buffer_dma_swap_buffers>
				while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  802e90:	d1271917 	ldw	r4,-25500(gp)
  802e94:	0814cb80 	call	814cb8 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  802e98:	1004c03a 	cmpne	r2,r2,zero
  802e9c:	103ffc1e 	bne	r2,zero,802e90 <main+0xfc>
				cleanupDeadSharks();
  802ea0:	0804c000 	call	804c00 <cleanupDeadSharks>
				eraseAllSharks();
  802ea4:	08049c40 	call	8049c4 <eraseAllSharks>
				eraseAllBullets();
  802ea8:	0801b300 	call	801b30 <eraseAllBullets>
				erasePlayer();
  802eac:	0802f6c0 	call	802f6c <erasePlayer>
			}
		}
	}
  802eb0:	003fdb06 	br	802e20 <main+0x8c>

	freeBmps();
	return 0;
}
  802eb4:	e0bfff17 	ldw	r2,-4(fp)
  802eb8:	e037883a 	mov	sp,fp
  802ebc:	dfc00117 	ldw	ra,4(sp)
  802ec0:	df000017 	ldw	fp,0(sp)
  802ec4:	dec00204 	addi	sp,sp,8
  802ec8:	f800283a 	ret

00802ecc <initPlayer>:
#include "player.h"
#include "audio.h"
#include "score.h"

void initPlayer() {
  802ecc:	deffff04 	addi	sp,sp,-4
  802ed0:	df000015 	stw	fp,0(sp)
  802ed4:	d839883a 	mov	fp,sp
	player.x = 10;
  802ed8:	00c020b4 	movhi	r3,130
  802edc:	18ffaa04 	addi	r3,r3,-344
  802ee0:	00800284 	movi	r2,10
  802ee4:	18800015 	stw	r2,0(r3)
	player.y = 90;
  802ee8:	00c020b4 	movhi	r3,130
  802eec:	18ffaa04 	addi	r3,r3,-344
  802ef0:	00801684 	movi	r2,90
  802ef4:	18800215 	stw	r2,8(r3)
	player.prevX = 10;
  802ef8:	00c020b4 	movhi	r3,130
  802efc:	18ffaa04 	addi	r3,r3,-344
  802f00:	00800284 	movi	r2,10
  802f04:	18800115 	stw	r2,4(r3)
	player.prevY = 90;
  802f08:	00c020b4 	movhi	r3,130
  802f0c:	18ffaa04 	addi	r3,r3,-344
  802f10:	00801684 	movi	r2,90
  802f14:	18800315 	stw	r2,12(r3)
}
  802f18:	e037883a 	mov	sp,fp
  802f1c:	df000017 	ldw	fp,0(sp)
  802f20:	dec00104 	addi	sp,sp,4
  802f24:	f800283a 	ret

00802f28 <drawPlayer>:

void drawPlayer() {
  802f28:	defffe04 	addi	sp,sp,-8
  802f2c:	dfc00115 	stw	ra,4(sp)
  802f30:	df000015 	stw	fp,0(sp)
  802f34:	d839883a 	mov	fp,sp
	drawBmp(playerBmp, player.x, player.y);
  802f38:	d1271a17 	ldw	r4,-25496(gp)
  802f3c:	008020b4 	movhi	r2,130
  802f40:	10bfaa04 	addi	r2,r2,-344
  802f44:	11400017 	ldw	r5,0(r2)
  802f48:	008020b4 	movhi	r2,130
  802f4c:	10bfaa04 	addi	r2,r2,-344
  802f50:	11800217 	ldw	r6,8(r2)
  802f54:	08015f80 	call	8015f8 <drawBmp>
}
  802f58:	e037883a 	mov	sp,fp
  802f5c:	dfc00117 	ldw	ra,4(sp)
  802f60:	df000017 	ldw	fp,0(sp)
  802f64:	dec00204 	addi	sp,sp,8
  802f68:	f800283a 	ret

00802f6c <erasePlayer>:

void erasePlayer() {
  802f6c:	defffe04 	addi	sp,sp,-8
  802f70:	dfc00115 	stw	ra,4(sp)
  802f74:	df000015 	stw	fp,0(sp)
  802f78:	d839883a 	mov	fp,sp
	eraseBmp(playerBmp, player.prevX, player.prevY);
  802f7c:	d1271a17 	ldw	r4,-25496(gp)
  802f80:	008020b4 	movhi	r2,130
  802f84:	10bfaa04 	addi	r2,r2,-344
  802f88:	11400117 	ldw	r5,4(r2)
  802f8c:	008020b4 	movhi	r2,130
  802f90:	10bfaa04 	addi	r2,r2,-344
  802f94:	11800317 	ldw	r6,12(r2)
  802f98:	08017640 	call	801764 <eraseBmp>
}
  802f9c:	e037883a 	mov	sp,fp
  802fa0:	dfc00117 	ldw	ra,4(sp)
  802fa4:	df000017 	ldw	fp,0(sp)
  802fa8:	dec00204 	addi	sp,sp,8
  802fac:	f800283a 	ret

00802fb0 <moveUpPlayer>:

void moveUpPlayer() {
  802fb0:	defffe04 	addi	sp,sp,-8
  802fb4:	dfc00115 	stw	ra,4(sp)
  802fb8:	df000015 	stw	fp,0(sp)
  802fbc:	d839883a 	mov	fp,sp
	player.prevY = player.y;
  802fc0:	008020b4 	movhi	r2,130
  802fc4:	10bfaa04 	addi	r2,r2,-344
  802fc8:	10c00217 	ldw	r3,8(r2)
  802fcc:	008020b4 	movhi	r2,130
  802fd0:	10bfaa04 	addi	r2,r2,-344
  802fd4:	10c00315 	stw	r3,12(r2)

	if (player.y > 0)
  802fd8:	008020b4 	movhi	r2,130
  802fdc:	10bfaa04 	addi	r2,r2,-344
  802fe0:	10800217 	ldw	r2,8(r2)
  802fe4:	10800050 	cmplti	r2,r2,1
  802fe8:	1000071e 	bne	r2,zero,803008 <moveUpPlayer+0x58>
		player.y = player.y - 2;
  802fec:	008020b4 	movhi	r2,130
  802ff0:	10bfaa04 	addi	r2,r2,-344
  802ff4:	10800217 	ldw	r2,8(r2)
  802ff8:	10ffff84 	addi	r3,r2,-2
  802ffc:	008020b4 	movhi	r2,130
  803000:	10bfaa04 	addi	r2,r2,-344
  803004:	10c00215 	stw	r3,8(r2)

	drawBmp(playerBmp, player.x, player.y);
  803008:	d1271a17 	ldw	r4,-25496(gp)
  80300c:	008020b4 	movhi	r2,130
  803010:	10bfaa04 	addi	r2,r2,-344
  803014:	11400017 	ldw	r5,0(r2)
  803018:	008020b4 	movhi	r2,130
  80301c:	10bfaa04 	addi	r2,r2,-344
  803020:	11800217 	ldw	r6,8(r2)
  803024:	08015f80 	call	8015f8 <drawBmp>
}
  803028:	e037883a 	mov	sp,fp
  80302c:	dfc00117 	ldw	ra,4(sp)
  803030:	df000017 	ldw	fp,0(sp)
  803034:	dec00204 	addi	sp,sp,8
  803038:	f800283a 	ret

0080303c <moveDownPlayer>:
void moveDownPlayer()
{
  80303c:	defffe04 	addi	sp,sp,-8
  803040:	dfc00115 	stw	ra,4(sp)
  803044:	df000015 	stw	fp,0(sp)
  803048:	d839883a 	mov	fp,sp
	player.prevY = player.y;
  80304c:	008020b4 	movhi	r2,130
  803050:	10bfaa04 	addi	r2,r2,-344
  803054:	10c00217 	ldw	r3,8(r2)
  803058:	008020b4 	movhi	r2,130
  80305c:	10bfaa04 	addi	r2,r2,-344
  803060:	10c00315 	stw	r3,12(r2)

	if (player.y < SCREEN_HEIGHT - PLAYER_HEIGHT)
  803064:	008020b4 	movhi	r2,130
  803068:	10bfaa04 	addi	r2,r2,-344
  80306c:	10800217 	ldw	r2,8(r2)
  803070:	10803488 	cmpgei	r2,r2,210
  803074:	1000071e 	bne	r2,zero,803094 <moveDownPlayer+0x58>
		player.y = player.y + 2;
  803078:	008020b4 	movhi	r2,130
  80307c:	10bfaa04 	addi	r2,r2,-344
  803080:	10800217 	ldw	r2,8(r2)
  803084:	10c00084 	addi	r3,r2,2
  803088:	008020b4 	movhi	r2,130
  80308c:	10bfaa04 	addi	r2,r2,-344
  803090:	10c00215 	stw	r3,8(r2)

	drawBmp(playerBmp, player.x, player.y);
  803094:	d1271a17 	ldw	r4,-25496(gp)
  803098:	008020b4 	movhi	r2,130
  80309c:	10bfaa04 	addi	r2,r2,-344
  8030a0:	11400017 	ldw	r5,0(r2)
  8030a4:	008020b4 	movhi	r2,130
  8030a8:	10bfaa04 	addi	r2,r2,-344
  8030ac:	11800217 	ldw	r6,8(r2)
  8030b0:	08015f80 	call	8015f8 <drawBmp>
}
  8030b4:	e037883a 	mov	sp,fp
  8030b8:	dfc00117 	ldw	ra,4(sp)
  8030bc:	df000017 	ldw	fp,0(sp)
  8030c0:	dec00204 	addi	sp,sp,8
  8030c4:	f800283a 	ret

008030c8 <keepPlayerStationary>:

void keepPlayerStationary() {
  8030c8:	defffe04 	addi	sp,sp,-8
  8030cc:	dfc00115 	stw	ra,4(sp)
  8030d0:	df000015 	stw	fp,0(sp)
  8030d4:	d839883a 	mov	fp,sp
	player.prevY = player.y;
  8030d8:	008020b4 	movhi	r2,130
  8030dc:	10bfaa04 	addi	r2,r2,-344
  8030e0:	10c00217 	ldw	r3,8(r2)
  8030e4:	008020b4 	movhi	r2,130
  8030e8:	10bfaa04 	addi	r2,r2,-344
  8030ec:	10c00315 	stw	r3,12(r2)
	drawBmp(playerBmp, player.x, player.y);
  8030f0:	d1271a17 	ldw	r4,-25496(gp)
  8030f4:	008020b4 	movhi	r2,130
  8030f8:	10bfaa04 	addi	r2,r2,-344
  8030fc:	11400017 	ldw	r5,0(r2)
  803100:	008020b4 	movhi	r2,130
  803104:	10bfaa04 	addi	r2,r2,-344
  803108:	11800217 	ldw	r6,8(r2)
  80310c:	08015f80 	call	8015f8 <drawBmp>
}
  803110:	e037883a 	mov	sp,fp
  803114:	dfc00117 	ldw	ra,4(sp)
  803118:	df000017 	ldw	fp,0(sp)
  80311c:	dec00204 	addi	sp,sp,8
  803120:	f800283a 	ret

00803124 <hitPlayer>:

void hitPlayer() {
  803124:	defffd04 	addi	sp,sp,-12
  803128:	dfc00215 	stw	ra,8(sp)
  80312c:	df000115 	stw	fp,4(sp)
  803130:	df000104 	addi	fp,sp,4
	int playerLives = getCurrentPlayerLives();
  803134:	0803df80 	call	803df8 <getCurrentPlayerLives>
  803138:	e0bfff15 	stw	r2,-4(fp)
	if (playerLives > 1) {
  80313c:	e0bfff17 	ldw	r2,-4(fp)
  803140:	10800090 	cmplti	r2,r2,2
  803144:	1000041e 	bne	r2,zero,803158 <hitPlayer+0x34>
		setCurrentPlayerLives(playerLives - 1);
  803148:	e0bfff17 	ldw	r2,-4(fp)
  80314c:	113fffc4 	addi	r4,r2,-1
  803150:	0803dcc0 	call	803dcc <setCurrentPlayerLives>
  803154:	00000706 	br	803174 <hitPlayer+0x50>
	} else if (playerLives == 1) {
  803158:	e0bfff17 	ldw	r2,-4(fp)
  80315c:	10800058 	cmpnei	r2,r2,1
  803160:	1000041e 	bne	r2,zero,803174 <hitPlayer+0x50>
		setCurrentPlayerLives(playerLives - 1);
  803164:	e0bfff17 	ldw	r2,-4(fp)
  803168:	113fffc4 	addi	r4,r2,-1
  80316c:	0803dcc0 	call	803dcc <setCurrentPlayerLives>
		killPlayer();
  803170:	080318c0 	call	80318c <killPlayer>
	}
	drawInGameInfo();
  803174:	08040800 	call	804080 <drawInGameInfo>
}
  803178:	e037883a 	mov	sp,fp
  80317c:	dfc00117 	ldw	ra,4(sp)
  803180:	df000017 	ldw	fp,0(sp)
  803184:	dec00204 	addi	sp,sp,8
  803188:	f800283a 	ret

0080318c <killPlayer>:

void killPlayer() {
  80318c:	defffe04 	addi	sp,sp,-8
  803190:	dfc00115 	stw	ra,4(sp)
  803194:	df000015 	stw	fp,0(sp)
  803198:	d839883a 	mov	fp,sp
	playPlayerDeath();
  80319c:	0800b880 	call	800b88 <playPlayerDeath>
	//updateHighScoreBoard();
	// Some game over stuff
}
  8031a0:	e037883a 	mov	sp,fp
  8031a4:	dfc00117 	ldw	ra,4(sp)
  8031a8:	df000017 	ldw	fp,0(sp)
  8031ac:	dec00204 	addi	sp,sp,8
  8031b0:	f800283a 	ret

008031b4 <initScoreBoard>:

char * scoreFileName = "scores.txt";
struct scores * gameScores;

//set all gameScores values to initial values - read all high score board info from SD card.
void initScoreBoard(void) {
  8031b4:	defffe04 	addi	sp,sp,-8
  8031b8:	dfc00115 	stw	ra,4(sp)
  8031bc:	df000015 	stw	fp,0(sp)
  8031c0:	d839883a 	mov	fp,sp
	alt_up_char_buffer_clear(char_buffer); // clear screen
  8031c4:	d1271517 	ldw	r4,-25516(gp)
  8031c8:	08149cc0 	call	8149cc <alt_up_char_buffer_clear>
	gameScores = malloc(sizeof(struct scores));
  8031cc:	01001404 	movi	r4,80
  8031d0:	0808ee00 	call	808ee0 <malloc>
  8031d4:	d0a72e15 	stw	r2,-25416(gp)
	printf("gameScoresTemp is at: %x\n", (unsigned int)gameScores);
  8031d8:	d0a72e17 	ldw	r2,-25416(gp)
  8031dc:	100b883a 	mov	r5,r2
  8031e0:	010020b4 	movhi	r4,130
  8031e4:	212e8904 	addi	r4,r4,-17884
  8031e8:	08096340 	call	809634 <printf>

	gameScores->currentPlayerScore = 0; // TBD - set to 0 - testing code by setting to other values.
  8031ec:	d0a72e17 	ldw	r2,-25416(gp)
  8031f0:	10000015 	stw	zero,0(r2)
	gameScores->currentPlayerLives = INITIALLIVES;
  8031f4:	d0e72e17 	ldw	r3,-25416(gp)
  8031f8:	008000c4 	movi	r2,3
  8031fc:	18800115 	stw	r2,4(r3)
	readHighScoreBoardFromSD();
  803200:	08032c00 	call	8032c0 <readHighScoreBoardFromSD>
}
  803204:	e037883a 	mov	sp,fp
  803208:	dfc00117 	ldw	ra,4(sp)
  80320c:	df000017 	ldw	fp,0(sp)
  803210:	dec00204 	addi	sp,sp,8
  803214:	f800283a 	ret

00803218 <defaultHighScoreBoard>:

//set high score values to defaults - used if reading the SD card fails.s
void defaultHighScoreBoard(void) {
  803218:	defffd04 	addi	sp,sp,-12
  80321c:	df000215 	stw	fp,8(sp)
  803220:	df000204 	addi	fp,sp,8
	int i,j;
	for(i = 0; i < NUMSCORES; i++) {
  803224:	e03fff15 	stw	zero,-4(fp)
  803228:	00001e06 	br	8032a4 <defaultHighScoreBoard+0x8c>
		gameScores->highScoreBoard[i] = 1;
  80322c:	d0e72e17 	ldw	r3,-25416(gp)
  803230:	e0bfff17 	ldw	r2,-4(fp)
  803234:	1085883a 	add	r2,r2,r2
  803238:	1085883a 	add	r2,r2,r2
  80323c:	10c5883a 	add	r2,r2,r3
  803240:	10c00204 	addi	r3,r2,8
  803244:	00800044 	movi	r2,1
  803248:	18800015 	stw	r2,0(r3)
		for(j = 0; j < NUMINITIALS; j++) {
  80324c:	e03ffe15 	stw	zero,-8(fp)
  803250:	00000e06 	br	80328c <defaultHighScoreBoard+0x74>
			gameScores->highScoreBoardInits[i][j] = 'X';
  803254:	d1672e17 	ldw	r5,-25416(gp)
  803258:	e0ffff17 	ldw	r3,-4(fp)
  80325c:	e13ffe17 	ldw	r4,-8(fp)
  803260:	1805883a 	mov	r2,r3
  803264:	1085883a 	add	r2,r2,r2
  803268:	10c5883a 	add	r2,r2,r3
  80326c:	1145883a 	add	r2,r2,r5
  803270:	1105883a 	add	r2,r2,r4
  803274:	10c00c04 	addi	r3,r2,48
  803278:	00801604 	movi	r2,88
  80327c:	18800005 	stb	r2,0(r3)
//set high score values to defaults - used if reading the SD card fails.s
void defaultHighScoreBoard(void) {
	int i,j;
	for(i = 0; i < NUMSCORES; i++) {
		gameScores->highScoreBoard[i] = 1;
		for(j = 0; j < NUMINITIALS; j++) {
  803280:	e0bffe17 	ldw	r2,-8(fp)
  803284:	10800044 	addi	r2,r2,1
  803288:	e0bffe15 	stw	r2,-8(fp)
  80328c:	e0bffe17 	ldw	r2,-8(fp)
  803290:	108000d0 	cmplti	r2,r2,3
  803294:	103fef1e 	bne	r2,zero,803254 <defaultHighScoreBoard+0x3c>
}

//set high score values to defaults - used if reading the SD card fails.s
void defaultHighScoreBoard(void) {
	int i,j;
	for(i = 0; i < NUMSCORES; i++) {
  803298:	e0bfff17 	ldw	r2,-4(fp)
  80329c:	10800044 	addi	r2,r2,1
  8032a0:	e0bfff15 	stw	r2,-4(fp)
  8032a4:	e0bfff17 	ldw	r2,-4(fp)
  8032a8:	10800290 	cmplti	r2,r2,10
  8032ac:	103fdf1e 	bne	r2,zero,80322c <defaultHighScoreBoard+0x14>
		for(j = 0; j < NUMINITIALS; j++) {
			gameScores->highScoreBoardInits[i][j] = 'X';
		}
	}
	return;
}
  8032b0:	e037883a 	mov	sp,fp
  8032b4:	df000017 	ldw	fp,0(sp)
  8032b8:	dec00104 	addi	sp,sp,4
  8032bc:	f800283a 	ret

008032c0 <readHighScoreBoardFromSD>:

//returns -1 on error in reading scoreboard (and also defaults all current values), returns 0 on success.
//function updates all gameScores' variables so that reading them have the most up to date values
int readHighScoreBoardFromSD(void) {
  8032c0:	deffe904 	addi	sp,sp,-92
  8032c4:	dfc01615 	stw	ra,88(sp)
  8032c8:	df001515 	stw	fp,84(sp)
  8032cc:	dcc01415 	stw	r19,80(sp)
  8032d0:	dc801315 	stw	r18,76(sp)
  8032d4:	dc401215 	stw	r17,72(sp)
  8032d8:	dc001115 	stw	r16,68(sp)
  8032dc:	df001104 	addi	fp,sp,68
	gameScores->currentScoreBoardCorrupt = 0;
  8032e0:	d0a72e17 	ldw	r2,-25416(gp)
  8032e4:	10001385 	stb	zero,78(r2)

	short int fileHandle = openFile(scoreFileName);
  8032e8:	d1200417 	ldw	r4,-32752(gp)
  8032ec:	080433c0 	call	80433c <openFile>
  8032f0:	e0bff48d 	sth	r2,-46(fp)
	if (fileHandle == -1) {
  8032f4:	e0bff48f 	ldh	r2,-46(fp)
  8032f8:	10bfffd8 	cmpnei	r2,r2,-1
  8032fc:	10000b1e 	bne	r2,zero,80332c <readHighScoreBoardFromSD+0x6c>
		printf("Error opening %s\n", scoreFileName);
  803300:	d1600417 	ldw	r5,-32752(gp)
  803304:	010020b4 	movhi	r4,130
  803308:	212e9004 	addi	r4,r4,-17856
  80330c:	08096340 	call	809634 <printf>
		defaultHighScoreBoard();
  803310:	08032180 	call	803218 <defaultHighScoreBoard>
		gameScores->currentScoreBoardCorrupt = 1;
  803314:	d0e72e17 	ldw	r3,-25416(gp)
  803318:	00800044 	movi	r2,1
  80331c:	18801385 	stb	r2,78(r3)
		return -1;
  803320:	00bfffc4 	movi	r2,-1
  803324:	e0bfff15 	stw	r2,-4(fp)
  803328:	0000b006 	br	8035ec <readHighScoreBoardFromSD+0x32c>
	char readValue;
	int currentScore;
	int numDigits;
	int scoreBuffer[MAXSCOREDIGITS];
	int i,j,k;
	for(i = 0; i < NUMSCORES; i++) {
  80332c:	e03ff115 	stw	zero,-60(fp)
  803330:	0000a806 	br	8035d4 <readHighScoreBoardFromSD+0x314>
		for(j = 0; j < NUMINITIALS; j++){
  803334:	e03ff015 	stw	zero,-64(fp)
  803338:	00001106 	br	803380 <readHighScoreBoardFromSD+0xc0>
			readValue = readByte(fileHandle);
  80333c:	e13ff48f 	ldh	r4,-46(fp)
  803340:	08043ac0 	call	8043ac <readByte>
  803344:	e0bff405 	stb	r2,-48(fp)
			gameScores->highScoreBoardInits[i][j] = readValue;
  803348:	d1272e17 	ldw	r4,-25416(gp)
  80334c:	e0fff117 	ldw	r3,-60(fp)
  803350:	e17ff017 	ldw	r5,-64(fp)
  803354:	e1bff403 	ldbu	r6,-48(fp)
  803358:	1805883a 	mov	r2,r3
  80335c:	1085883a 	add	r2,r2,r2
  803360:	10c5883a 	add	r2,r2,r3
  803364:	1105883a 	add	r2,r2,r4
  803368:	1145883a 	add	r2,r2,r5
  80336c:	10800c04 	addi	r2,r2,48
  803370:	11800005 	stb	r6,0(r2)
	int currentScore;
	int numDigits;
	int scoreBuffer[MAXSCOREDIGITS];
	int i,j,k;
	for(i = 0; i < NUMSCORES; i++) {
		for(j = 0; j < NUMINITIALS; j++){
  803374:	e0bff017 	ldw	r2,-64(fp)
  803378:	10800044 	addi	r2,r2,1
  80337c:	e0bff015 	stw	r2,-64(fp)
  803380:	e0bff017 	ldw	r2,-64(fp)
  803384:	108000d0 	cmplti	r2,r2,3
  803388:	103fec1e 	bne	r2,zero,80333c <readHighScoreBoardFromSD+0x7c>
			readValue = readByte(fileHandle);
			gameScores->highScoreBoardInits[i][j] = readValue;
		}
		readValue = readByte(fileHandle);
  80338c:	e13ff48f 	ldh	r4,-46(fp)
  803390:	08043ac0 	call	8043ac <readByte>
  803394:	e0bff405 	stb	r2,-48(fp)

		if(readValue != 0x20) {
  803398:	e0bff407 	ldb	r2,-48(fp)
  80339c:	10800820 	cmpeqi	r2,r2,32
  8033a0:	10000d1e 	bne	r2,zero,8033d8 <readHighScoreBoardFromSD+0x118>
			closeFile(fileHandle);
  8033a4:	e13ff48f 	ldh	r4,-46(fp)
  8033a8:	080437c0 	call	80437c <closeFile>
			printf("Error within %s - file not initialized to proper format. Scoreboard defaulted.", scoreFileName);
  8033ac:	d1600417 	ldw	r5,-32752(gp)
  8033b0:	010020b4 	movhi	r4,130
  8033b4:	212e9504 	addi	r4,r4,-17836
  8033b8:	08096340 	call	809634 <printf>
			defaultHighScoreBoard();
  8033bc:	08032180 	call	803218 <defaultHighScoreBoard>
			gameScores->currentScoreBoardCorrupt = 1;
  8033c0:	d0e72e17 	ldw	r3,-25416(gp)
  8033c4:	00800044 	movi	r2,1
  8033c8:	18801385 	stb	r2,78(r3)
			return -1;
  8033cc:	00ffffc4 	movi	r3,-1
  8033d0:	e0ffff15 	stw	r3,-4(fp)
  8033d4:	00008506 	br	8035ec <readHighScoreBoardFromSD+0x32c>
		}

		//clear score buffer - which is used in order to convert unknown number of chars into an int.
		for(k = 0; k < MAXSCOREDIGITS; k++){
  8033d8:	e03fef15 	stw	zero,-68(fp)
  8033dc:	00000b06 	br	80340c <readHighScoreBoardFromSD+0x14c>
			scoreBuffer[k] = -1;
  8033e0:	e0bfef17 	ldw	r2,-68(fp)
  8033e4:	1085883a 	add	r2,r2,r2
  8033e8:	1085883a 	add	r2,r2,r2
  8033ec:	e13fef04 	addi	r4,fp,-68
  8033f0:	1105883a 	add	r2,r2,r4
  8033f4:	10c00604 	addi	r3,r2,24
  8033f8:	00bfffc4 	movi	r2,-1
  8033fc:	18800015 	stw	r2,0(r3)
			gameScores->currentScoreBoardCorrupt = 1;
			return -1;
		}

		//clear score buffer - which is used in order to convert unknown number of chars into an int.
		for(k = 0; k < MAXSCOREDIGITS; k++){
  803400:	e0bfef17 	ldw	r2,-68(fp)
  803404:	10800044 	addi	r2,r2,1
  803408:	e0bfef15 	stw	r2,-68(fp)
  80340c:	e0bfef17 	ldw	r2,-68(fp)
  803410:	10800290 	cmplti	r2,r2,10
  803414:	103ff21e 	bne	r2,zero,8033e0 <readHighScoreBoardFromSD+0x120>
			scoreBuffer[k] = -1;
		}

		numDigits = 0;
  803418:	e03ff215 	stw	zero,-56(fp)
		while((readValue = readByte(fileHandle)) != 0x20 && numDigits < MAXSCOREDIGITS) { //loop until space found
  80341c:	00000b06 	br	80344c <readHighScoreBoardFromSD+0x18c>
			scoreBuffer[numDigits] = readValue;
  803420:	e0bff217 	ldw	r2,-56(fp)
  803424:	e0fff407 	ldb	r3,-48(fp)
  803428:	1085883a 	add	r2,r2,r2
  80342c:	1085883a 	add	r2,r2,r2
  803430:	e13fef04 	addi	r4,fp,-68
  803434:	1105883a 	add	r2,r2,r4
  803438:	10800604 	addi	r2,r2,24
  80343c:	10c00015 	stw	r3,0(r2)
			numDigits++;
  803440:	e0bff217 	ldw	r2,-56(fp)
  803444:	10800044 	addi	r2,r2,1
  803448:	e0bff215 	stw	r2,-56(fp)
		for(k = 0; k < MAXSCOREDIGITS; k++){
			scoreBuffer[k] = -1;
		}

		numDigits = 0;
		while((readValue = readByte(fileHandle)) != 0x20 && numDigits < MAXSCOREDIGITS) { //loop until space found
  80344c:	e13ff48f 	ldh	r4,-46(fp)
  803450:	08043ac0 	call	8043ac <readByte>
  803454:	e0bff405 	stb	r2,-48(fp)
  803458:	e0bff407 	ldb	r2,-48(fp)
  80345c:	10800820 	cmpeqi	r2,r2,32
  803460:	1000031e 	bne	r2,zero,803470 <readHighScoreBoardFromSD+0x1b0>
  803464:	e0bff217 	ldw	r2,-56(fp)
  803468:	10800290 	cmplti	r2,r2,10
  80346c:	103fec1e 	bne	r2,zero,803420 <readHighScoreBoardFromSD+0x160>
			scoreBuffer[numDigits] = readValue;
			numDigits++;
		}
		if(readValue != 0x20) {
  803470:	e0bff407 	ldb	r2,-48(fp)
  803474:	10800820 	cmpeqi	r2,r2,32
  803478:	10000d1e 	bne	r2,zero,8034b0 <readHighScoreBoardFromSD+0x1f0>
			closeFile(fileHandle);
  80347c:	e13ff48f 	ldh	r4,-46(fp)
  803480:	080437c0 	call	80437c <closeFile>
			printf("Error within %s - file not initialized to proper format. Scoreboard defaulted.", scoreFileName);
  803484:	d1600417 	ldw	r5,-32752(gp)
  803488:	010020b4 	movhi	r4,130
  80348c:	212e9504 	addi	r4,r4,-17836
  803490:	08096340 	call	809634 <printf>
			defaultHighScoreBoard();
  803494:	08032180 	call	803218 <defaultHighScoreBoard>
			gameScores->currentScoreBoardCorrupt = 1;
  803498:	d0e72e17 	ldw	r3,-25416(gp)
  80349c:	00800044 	movi	r2,1
  8034a0:	18801385 	stb	r2,78(r3)
			return -1;
  8034a4:	00bfffc4 	movi	r2,-1
  8034a8:	e0bfff15 	stw	r2,-4(fp)
  8034ac:	00004f06 	br	8035ec <readHighScoreBoardFromSD+0x32c>
		}

		//use scoreBuffer values (stored in char values) into a meaningful integer, currentScore.
		currentScore = 0;
  8034b0:	e03ff315 	stw	zero,-52(fp)
		for(k = 0; k < numDigits; k++) {
  8034b4:	e03fef15 	stw	zero,-68(fp)
  8034b8:	00003806 	br	80359c <readHighScoreBoardFromSD+0x2dc>
			currentScore += (scoreBuffer[k] - '0') * pow(10,(numDigits - 1 - k));
  8034bc:	e13ff317 	ldw	r4,-52(fp)
  8034c0:	08083140 	call	808314 <__floatsidf>
  8034c4:	1025883a 	mov	r18,r2
  8034c8:	1827883a 	mov	r19,r3
  8034cc:	e0bfef17 	ldw	r2,-68(fp)
  8034d0:	1085883a 	add	r2,r2,r2
  8034d4:	1085883a 	add	r2,r2,r2
  8034d8:	e0ffef04 	addi	r3,fp,-68
  8034dc:	10c5883a 	add	r2,r2,r3
  8034e0:	10800604 	addi	r2,r2,24
  8034e4:	10800017 	ldw	r2,0(r2)
  8034e8:	113ff404 	addi	r4,r2,-48
  8034ec:	08083140 	call	808314 <__floatsidf>
  8034f0:	1021883a 	mov	r16,r2
  8034f4:	1823883a 	mov	r17,r3
  8034f8:	e0fff217 	ldw	r3,-56(fp)
  8034fc:	e0bfef17 	ldw	r2,-68(fp)
  803500:	1885c83a 	sub	r2,r3,r2
  803504:	113fffc4 	addi	r4,r2,-1
  803508:	08083140 	call	808314 <__floatsidf>
  80350c:	100f883a 	mov	r7,r2
  803510:	1811883a 	mov	r8,r3
  803514:	0009883a 	mov	r4,zero
  803518:	01500934 	movhi	r5,16420
  80351c:	380d883a 	mov	r6,r7
  803520:	400f883a 	mov	r7,r8
  803524:	080540c0 	call	80540c <pow>
  803528:	1009883a 	mov	r4,r2
  80352c:	180b883a 	mov	r5,r3
  803530:	2005883a 	mov	r2,r4
  803534:	2807883a 	mov	r3,r5
  803538:	8009883a 	mov	r4,r16
  80353c:	880b883a 	mov	r5,r17
  803540:	100d883a 	mov	r6,r2
  803544:	180f883a 	mov	r7,r3
  803548:	0807a500 	call	807a50 <__muldf3>
  80354c:	1009883a 	mov	r4,r2
  803550:	180b883a 	mov	r5,r3
  803554:	2005883a 	mov	r2,r4
  803558:	2807883a 	mov	r3,r5
  80355c:	9009883a 	mov	r4,r18
  803560:	980b883a 	mov	r5,r19
  803564:	100d883a 	mov	r6,r2
  803568:	180f883a 	mov	r7,r3
  80356c:	08079dc0 	call	8079dc <__adddf3>
  803570:	1009883a 	mov	r4,r2
  803574:	180b883a 	mov	r5,r3
  803578:	2005883a 	mov	r2,r4
  80357c:	2807883a 	mov	r3,r5
  803580:	1009883a 	mov	r4,r2
  803584:	180b883a 	mov	r5,r3
  803588:	080840c0 	call	80840c <__fixdfsi>
  80358c:	e0bff315 	stw	r2,-52(fp)
			return -1;
		}

		//use scoreBuffer values (stored in char values) into a meaningful integer, currentScore.
		currentScore = 0;
		for(k = 0; k < numDigits; k++) {
  803590:	e0bfef17 	ldw	r2,-68(fp)
  803594:	10800044 	addi	r2,r2,1
  803598:	e0bfef15 	stw	r2,-68(fp)
  80359c:	e0ffef17 	ldw	r3,-68(fp)
  8035a0:	e0bff217 	ldw	r2,-56(fp)
  8035a4:	18bfc516 	blt	r3,r2,8034bc <readHighScoreBoardFromSD+0x1fc>
			currentScore += (scoreBuffer[k] - '0') * pow(10,(numDigits - 1 - k));
		}
		gameScores->highScoreBoard[i] = currentScore;
  8035a8:	d0e72e17 	ldw	r3,-25416(gp)
  8035ac:	e0bff117 	ldw	r2,-60(fp)
  8035b0:	1085883a 	add	r2,r2,r2
  8035b4:	1085883a 	add	r2,r2,r2
  8035b8:	10c5883a 	add	r2,r2,r3
  8035bc:	10c00204 	addi	r3,r2,8
  8035c0:	e0bff317 	ldw	r2,-52(fp)
  8035c4:	18800015 	stw	r2,0(r3)
	char readValue;
	int currentScore;
	int numDigits;
	int scoreBuffer[MAXSCOREDIGITS];
	int i,j,k;
	for(i = 0; i < NUMSCORES; i++) {
  8035c8:	e0bff117 	ldw	r2,-60(fp)
  8035cc:	10800044 	addi	r2,r2,1
  8035d0:	e0bff115 	stw	r2,-60(fp)
  8035d4:	e0bff117 	ldw	r2,-60(fp)
  8035d8:	10800290 	cmplti	r2,r2,10
  8035dc:	103f551e 	bne	r2,zero,803334 <readHighScoreBoardFromSD+0x74>
			currentScore += (scoreBuffer[k] - '0') * pow(10,(numDigits - 1 - k));
		}
		gameScores->highScoreBoard[i] = currentScore;
	}

	closeFile(fileHandle);
  8035e0:	e13ff48f 	ldh	r4,-46(fp)
  8035e4:	080437c0 	call	80437c <closeFile>
	return 0;
  8035e8:	e03fff15 	stw	zero,-4(fp)
  8035ec:	e0bfff17 	ldw	r2,-4(fp)
}
  8035f0:	e037883a 	mov	sp,fp
  8035f4:	dfc00517 	ldw	ra,20(sp)
  8035f8:	df000417 	ldw	fp,16(sp)
  8035fc:	dcc00317 	ldw	r19,12(sp)
  803600:	dc800217 	ldw	r18,8(sp)
  803604:	dc400117 	ldw	r17,4(sp)
  803608:	dc000017 	ldw	r16,0(sp)
  80360c:	dec00604 	addi	sp,sp,24
  803610:	f800283a 	ret

00803614 <updateHighScoreBoard>:

//function writes to the SD card, and places current players score into the high scores if
//it exceeds any of the current high scores.
//function returns if the highScore file doesnt open in memory, or if the currentScoreBoard is corrupt.
void updateHighScoreBoard(void) {
  803614:	defff604 	addi	sp,sp,-40
  803618:	dfc00915 	stw	ra,36(sp)
  80361c:	df000815 	stw	fp,32(sp)
  803620:	dc400715 	stw	r17,28(sp)
  803624:	dc000615 	stw	r16,24(sp)
  803628:	df000604 	addi	fp,sp,24
	int playerScore = getCurrentPlayerScore();
  80362c:	0803da80 	call	803da8 <getCurrentPlayerScore>
  803630:	e0bfff15 	stw	r2,-4(fp)
	unsigned short i,j;
	short scoreReplaceIndex = -1;
  803634:	00bfffc4 	movi	r2,-1
  803638:	e0bffd8d 	sth	r2,-10(fp)
	unsigned short firstDigitFound = 0;
  80363c:	e03ffd0d 	sth	zero,-12(fp)
	unsigned short digit;
	short int fileHandle = openFile(scoreFileName);
  803640:	d1200417 	ldw	r4,-32752(gp)
  803644:	080433c0 	call	80433c <openFile>
  803648:	e0bffc0d 	sth	r2,-16(fp)
	if (fileHandle == -1 || gameScores == NULL || gameScores->currentScoreBoardCorrupt == 1) {
  80364c:	e0bffc0f 	ldh	r2,-16(fp)
  803650:	10bfffe0 	cmpeqi	r2,r2,-1
  803654:	1000081e 	bne	r2,zero,803678 <updateHighScoreBoard+0x64>
  803658:	d0a72e17 	ldw	r2,-25416(gp)
  80365c:	1005003a 	cmpeq	r2,r2,zero
  803660:	1000051e 	bne	r2,zero,803678 <updateHighScoreBoard+0x64>
  803664:	d0a72e17 	ldw	r2,-25416(gp)
  803668:	10801383 	ldbu	r2,78(r2)
  80366c:	10803fcc 	andi	r2,r2,255
  803670:	10800058 	cmpnei	r2,r2,1
  803674:	1000051e 	bne	r2,zero,80368c <updateHighScoreBoard+0x78>
		printf("Error opening %s\n", scoreFileName);
  803678:	d1600417 	ldw	r5,-32752(gp)
  80367c:	010020b4 	movhi	r4,130
  803680:	212e9004 	addi	r4,r4,-17856
  803684:	08096340 	call	809634 <printf>
		return;
  803688:	0000fe06 	br	803a84 <updateHighScoreBoard+0x470>
	}

	//determine if playerScore is better than any high scores
	for(i = 0; i < NUMSCORES; i++) {
  80368c:	e03ffe8d 	sth	zero,-6(fp)
  803690:	00001406 	br	8036e4 <updateHighScoreBoard+0xd0>
		if(playerScore > gameScores->highScoreBoard[i]) {
  803694:	d0e72e17 	ldw	r3,-25416(gp)
  803698:	e0bffe8b 	ldhu	r2,-6(fp)
  80369c:	1085883a 	add	r2,r2,r2
  8036a0:	1085883a 	add	r2,r2,r2
  8036a4:	10c5883a 	add	r2,r2,r3
  8036a8:	10800204 	addi	r2,r2,8
  8036ac:	10c00017 	ldw	r3,0(r2)
  8036b0:	e0bfff17 	ldw	r2,-4(fp)
  8036b4:	1880080e 	bge	r3,r2,8036d8 <updateHighScoreBoard+0xc4>
			printf("I found a score, %d, that is higher than other scores. Index %d\n", playerScore, i);
  8036b8:	e1bffe8b 	ldhu	r6,-6(fp)
  8036bc:	010020b4 	movhi	r4,130
  8036c0:	212ea904 	addi	r4,r4,-17756
  8036c4:	e17fff17 	ldw	r5,-4(fp)
  8036c8:	08096340 	call	809634 <printf>
			scoreReplaceIndex = i;
  8036cc:	e0bffe8b 	ldhu	r2,-6(fp)
  8036d0:	e0bffd8d 	sth	r2,-10(fp)
			break; // current index needs to be replaced by
  8036d4:	00000606 	br	8036f0 <updateHighScoreBoard+0xdc>
		printf("Error opening %s\n", scoreFileName);
		return;
	}

	//determine if playerScore is better than any high scores
	for(i = 0; i < NUMSCORES; i++) {
  8036d8:	e0bffe8b 	ldhu	r2,-6(fp)
  8036dc:	10800044 	addi	r2,r2,1
  8036e0:	e0bffe8d 	sth	r2,-6(fp)
  8036e4:	e0bffe8b 	ldhu	r2,-6(fp)
  8036e8:	108002b0 	cmpltui	r2,r2,10
  8036ec:	103fe91e 	bne	r2,zero,803694 <updateHighScoreBoard+0x80>
			break; // current index needs to be replaced by
		}
	}

	//if playerScore is better than a high score, re-write to the SD card, placing currentPlayerScore in the file.
	if(scoreReplaceIndex != -1) {
  8036f0:	e0bffd8f 	ldh	r2,-10(fp)
  8036f4:	10bfffe0 	cmpeqi	r2,r2,-1
  8036f8:	1000df1e 	bne	r2,zero,803a78 <updateHighScoreBoard+0x464>
		int loopCount = NUMSCORES;
  8036fc:	00800284 	movi	r2,10
  803700:	e0bffb15 	stw	r2,-20(fp)
		for(i = 0; i < loopCount; i++) {
  803704:	e03ffe8d 	sth	zero,-6(fp)
  803708:	0000d806 	br	803a6c <updateHighScoreBoard+0x458>
			if(i == scoreReplaceIndex){
  80370c:	e0fffe8b 	ldhu	r3,-6(fp)
  803710:	e0bffd8f 	ldh	r2,-10(fp)
  803714:	18806e1e 	bne	r3,r2,8038d0 <updateHighScoreBoard+0x2bc>
				printf("replacing score code at index %d\n", i);
  803718:	e17ffe8b 	ldhu	r5,-6(fp)
  80371c:	010020b4 	movhi	r4,130
  803720:	212eba04 	addi	r4,r4,-17688
  803724:	08096340 	call	809634 <printf>

				char * newInitials = malloc(3*sizeof(char));
  803728:	010000c4 	movi	r4,3
  80372c:	0808ee00 	call	808ee0 <malloc>
  803730:	e0bffa15 	stw	r2,-24(fp)
				*newInitials = '-';
  803734:	e0fffa17 	ldw	r3,-24(fp)
  803738:	00800b44 	movi	r2,45
  80373c:	18800005 	stb	r2,0(r3)
				*(newInitials + 1) = '-';
  803740:	e0bffa17 	ldw	r2,-24(fp)
  803744:	10c00044 	addi	r3,r2,1
  803748:	00800b44 	movi	r2,45
  80374c:	18800005 	stb	r2,0(r3)
				*(newInitials + 2) = '-';
  803750:	e0bffa17 	ldw	r2,-24(fp)
  803754:	10c00084 	addi	r3,r2,2
  803758:	00800b44 	movi	r2,45
  80375c:	18800005 	stb	r2,0(r3)
				obtainUserInitials(newInitials);
  803760:	e13ffa17 	ldw	r4,-24(fp)
  803764:	0803aa00 	call	803aa0 <obtainUserInitials>
				for(j = 0; j < NUMINITIALS; j++){
  803768:	e03ffe0d 	sth	zero,-8(fp)
  80376c:	00000d06 	br	8037a4 <updateHighScoreBoard+0x190>
					alt_up_sd_card_write(fileHandle, newInitials[j]);
  803770:	e13ffc0f 	ldh	r4,-16(fp)
  803774:	e0bffe0b 	ldhu	r2,-8(fp)
  803778:	1007883a 	mov	r3,r2
  80377c:	e0bffa17 	ldw	r2,-24(fp)
  803780:	1885883a 	add	r2,r3,r2
  803784:	10800003 	ldbu	r2,0(r2)
  803788:	11403fcc 	andi	r5,r2,255
  80378c:	2940201c 	xori	r5,r5,128
  803790:	297fe004 	addi	r5,r5,-128
  803794:	0819bd80 	call	819bd8 <alt_up_sd_card_write>
				char * newInitials = malloc(3*sizeof(char));
				*newInitials = '-';
				*(newInitials + 1) = '-';
				*(newInitials + 2) = '-';
				obtainUserInitials(newInitials);
				for(j = 0; j < NUMINITIALS; j++){
  803798:	e0bffe0b 	ldhu	r2,-8(fp)
  80379c:	10800044 	addi	r2,r2,1
  8037a0:	e0bffe0d 	sth	r2,-8(fp)
  8037a4:	e0bffe0b 	ldhu	r2,-8(fp)
  8037a8:	108000f0 	cmpltui	r2,r2,3
  8037ac:	103ff01e 	bne	r2,zero,803770 <updateHighScoreBoard+0x15c>
					alt_up_sd_card_write(fileHandle, newInitials[j]);
				}
				free(newInitials);
  8037b0:	e13ffa17 	ldw	r4,-24(fp)
  8037b4:	0808ecc0 	call	808ecc <free>

				alt_up_sd_card_write(fileHandle, ' ');
  8037b8:	e13ffc0f 	ldh	r4,-16(fp)
  8037bc:	01400804 	movi	r5,32
  8037c0:	0819bd80 	call	819bd8 <alt_up_sd_card_write>
				firstDigitFound = 0;
  8037c4:	e03ffd0d 	sth	zero,-12(fp)
				for(j = 0; j < MAXSCOREDIGITS; j++){
  8037c8:	e03ffe0d 	sth	zero,-8(fp)
  8037cc:	00003706 	br	8038ac <updateHighScoreBoard+0x298>
					digit = ((int)(gameScores->currentPlayerScore / pow(10,(MAXSCOREDIGITS - 1 - j)))%10);
  8037d0:	d0a72e17 	ldw	r2,-25416(gp)
  8037d4:	11000017 	ldw	r4,0(r2)
  8037d8:	08083140 	call	808314 <__floatsidf>
  8037dc:	1021883a 	mov	r16,r2
  8037e0:	1823883a 	mov	r17,r3
  8037e4:	e0fffe0b 	ldhu	r3,-8(fp)
  8037e8:	00800244 	movi	r2,9
  8037ec:	10c9c83a 	sub	r4,r2,r3
  8037f0:	08083140 	call	808314 <__floatsidf>
  8037f4:	100f883a 	mov	r7,r2
  8037f8:	1811883a 	mov	r8,r3
  8037fc:	0009883a 	mov	r4,zero
  803800:	01500934 	movhi	r5,16420
  803804:	380d883a 	mov	r6,r7
  803808:	400f883a 	mov	r7,r8
  80380c:	080540c0 	call	80540c <pow>
  803810:	100f883a 	mov	r7,r2
  803814:	1811883a 	mov	r8,r3
  803818:	8009883a 	mov	r4,r16
  80381c:	880b883a 	mov	r5,r17
  803820:	380d883a 	mov	r6,r7
  803824:	400f883a 	mov	r7,r8
  803828:	0807e140 	call	807e14 <__divdf3>
  80382c:	1009883a 	mov	r4,r2
  803830:	180b883a 	mov	r5,r3
  803834:	2005883a 	mov	r2,r4
  803838:	2807883a 	mov	r3,r5
  80383c:	1009883a 	mov	r4,r2
  803840:	180b883a 	mov	r5,r3
  803844:	080840c0 	call	80840c <__fixdfsi>
  803848:	1009883a 	mov	r4,r2
  80384c:	01400284 	movi	r5,10
  803850:	08085f80 	call	8085f8 <__modsi3>
  803854:	e0bffc8d 	sth	r2,-14(fp)
					if(digit != 0 && firstDigitFound == 0){
  803858:	e0bffc8b 	ldhu	r2,-14(fp)
  80385c:	1005003a 	cmpeq	r2,r2,zero
  803860:	1000051e 	bne	r2,zero,803878 <updateHighScoreBoard+0x264>
  803864:	e0bffd0b 	ldhu	r2,-12(fp)
  803868:	1004c03a 	cmpne	r2,r2,zero
  80386c:	1000021e 	bne	r2,zero,803878 <updateHighScoreBoard+0x264>
						firstDigitFound = 1;
  803870:	00800044 	movi	r2,1
  803874:	e0bffd0d 	sth	r2,-12(fp)
					}
					if(firstDigitFound == 1){
  803878:	e0bffd0b 	ldhu	r2,-12(fp)
  80387c:	10800058 	cmpnei	r2,r2,1
  803880:	1000071e 	bne	r2,zero,8038a0 <updateHighScoreBoard+0x28c>
						alt_up_sd_card_write(fileHandle, (digit + '0'));
  803884:	e13ffc0f 	ldh	r4,-16(fp)
  803888:	e0bffc8b 	ldhu	r2,-14(fp)
  80388c:	10800c04 	addi	r2,r2,48
  803890:	11403fcc 	andi	r5,r2,255
  803894:	2940201c 	xori	r5,r5,128
  803898:	297fe004 	addi	r5,r5,-128
  80389c:	0819bd80 	call	819bd8 <alt_up_sd_card_write>
				}
				free(newInitials);

				alt_up_sd_card_write(fileHandle, ' ');
				firstDigitFound = 0;
				for(j = 0; j < MAXSCOREDIGITS; j++){
  8038a0:	e0bffe0b 	ldhu	r2,-8(fp)
  8038a4:	10800044 	addi	r2,r2,1
  8038a8:	e0bffe0d 	sth	r2,-8(fp)
  8038ac:	e0bffe0b 	ldhu	r2,-8(fp)
  8038b0:	108002b0 	cmpltui	r2,r2,10
  8038b4:	103fc61e 	bne	r2,zero,8037d0 <updateHighScoreBoard+0x1bc>
					}
					if(firstDigitFound == 1){
						alt_up_sd_card_write(fileHandle, (digit + '0'));
					}
				}
				alt_up_sd_card_write(fileHandle, ' ');
  8038b8:	e13ffc0f 	ldh	r4,-16(fp)
  8038bc:	01400804 	movi	r5,32
  8038c0:	0819bd80 	call	819bd8 <alt_up_sd_card_write>
				loopCount--;
  8038c4:	e0bffb17 	ldw	r2,-20(fp)
  8038c8:	10bfffc4 	addi	r2,r2,-1
  8038cc:	e0bffb15 	stw	r2,-20(fp)
			}

			printf("writing high scores, in main loop, i = %d\n", i);
  8038d0:	e17ffe8b 	ldhu	r5,-6(fp)
  8038d4:	010020b4 	movhi	r4,130
  8038d8:	212ec304 	addi	r4,r4,-17652
  8038dc:	08096340 	call	809634 <printf>
			//write scores that are currently saved as high scores back to SD card in correct position.
			for(j = 0; j < NUMINITIALS; j++){
  8038e0:	e03ffe0d 	sth	zero,-8(fp)
  8038e4:	00001306 	br	803934 <updateHighScoreBoard+0x320>
				alt_up_sd_card_write(fileHandle, gameScores->highScoreBoardInits[i][j]);
  8038e8:	e1bffc0f 	ldh	r6,-16(fp)
  8038ec:	d1672e17 	ldw	r5,-25416(gp)
  8038f0:	e0fffe8b 	ldhu	r3,-6(fp)
  8038f4:	e13ffe0b 	ldhu	r4,-8(fp)
  8038f8:	1805883a 	mov	r2,r3
  8038fc:	1085883a 	add	r2,r2,r2
  803900:	10c5883a 	add	r2,r2,r3
  803904:	1145883a 	add	r2,r2,r5
  803908:	1105883a 	add	r2,r2,r4
  80390c:	10800c04 	addi	r2,r2,48
  803910:	10800003 	ldbu	r2,0(r2)
  803914:	11403fcc 	andi	r5,r2,255
  803918:	2940201c 	xori	r5,r5,128
  80391c:	297fe004 	addi	r5,r5,-128
  803920:	3009883a 	mov	r4,r6
  803924:	0819bd80 	call	819bd8 <alt_up_sd_card_write>
				loopCount--;
			}

			printf("writing high scores, in main loop, i = %d\n", i);
			//write scores that are currently saved as high scores back to SD card in correct position.
			for(j = 0; j < NUMINITIALS; j++){
  803928:	e0bffe0b 	ldhu	r2,-8(fp)
  80392c:	10800044 	addi	r2,r2,1
  803930:	e0bffe0d 	sth	r2,-8(fp)
  803934:	e0bffe0b 	ldhu	r2,-8(fp)
  803938:	108000f0 	cmpltui	r2,r2,3
  80393c:	103fea1e 	bne	r2,zero,8038e8 <updateHighScoreBoard+0x2d4>
				alt_up_sd_card_write(fileHandle, gameScores->highScoreBoardInits[i][j]);
			}
			alt_up_sd_card_write(fileHandle, ' ');
  803940:	e13ffc0f 	ldh	r4,-16(fp)
  803944:	01400804 	movi	r5,32
  803948:	0819bd80 	call	819bd8 <alt_up_sd_card_write>
			firstDigitFound = 0;
  80394c:	e03ffd0d 	sth	zero,-12(fp)
			for(j = 0; j < MAXSCOREDIGITS; j++){
  803950:	e03ffe0d 	sth	zero,-8(fp)
  803954:	00003c06 	br	803a48 <updateHighScoreBoard+0x434>
				digit = ((int)(gameScores->highScoreBoard[i] / pow(10,(MAXSCOREDIGITS - 1 - j)))%10);
  803958:	d0e72e17 	ldw	r3,-25416(gp)
  80395c:	e0bffe8b 	ldhu	r2,-6(fp)
  803960:	1085883a 	add	r2,r2,r2
  803964:	1085883a 	add	r2,r2,r2
  803968:	10c5883a 	add	r2,r2,r3
  80396c:	10800204 	addi	r2,r2,8
  803970:	11000017 	ldw	r4,0(r2)
  803974:	08083140 	call	808314 <__floatsidf>
  803978:	1021883a 	mov	r16,r2
  80397c:	1823883a 	mov	r17,r3
  803980:	e0fffe0b 	ldhu	r3,-8(fp)
  803984:	00800244 	movi	r2,9
  803988:	10c9c83a 	sub	r4,r2,r3
  80398c:	08083140 	call	808314 <__floatsidf>
  803990:	100f883a 	mov	r7,r2
  803994:	1811883a 	mov	r8,r3
  803998:	0009883a 	mov	r4,zero
  80399c:	01500934 	movhi	r5,16420
  8039a0:	380d883a 	mov	r6,r7
  8039a4:	400f883a 	mov	r7,r8
  8039a8:	080540c0 	call	80540c <pow>
  8039ac:	100f883a 	mov	r7,r2
  8039b0:	1811883a 	mov	r8,r3
  8039b4:	8009883a 	mov	r4,r16
  8039b8:	880b883a 	mov	r5,r17
  8039bc:	380d883a 	mov	r6,r7
  8039c0:	400f883a 	mov	r7,r8
  8039c4:	0807e140 	call	807e14 <__divdf3>
  8039c8:	1009883a 	mov	r4,r2
  8039cc:	180b883a 	mov	r5,r3
  8039d0:	2005883a 	mov	r2,r4
  8039d4:	2807883a 	mov	r3,r5
  8039d8:	1009883a 	mov	r4,r2
  8039dc:	180b883a 	mov	r5,r3
  8039e0:	080840c0 	call	80840c <__fixdfsi>
  8039e4:	1009883a 	mov	r4,r2
  8039e8:	01400284 	movi	r5,10
  8039ec:	08085f80 	call	8085f8 <__modsi3>
  8039f0:	e0bffc8d 	sth	r2,-14(fp)
				if(digit != 0 && firstDigitFound == 0){
  8039f4:	e0bffc8b 	ldhu	r2,-14(fp)
  8039f8:	1005003a 	cmpeq	r2,r2,zero
  8039fc:	1000051e 	bne	r2,zero,803a14 <updateHighScoreBoard+0x400>
  803a00:	e0bffd0b 	ldhu	r2,-12(fp)
  803a04:	1004c03a 	cmpne	r2,r2,zero
  803a08:	1000021e 	bne	r2,zero,803a14 <updateHighScoreBoard+0x400>
					firstDigitFound = 1;
  803a0c:	00800044 	movi	r2,1
  803a10:	e0bffd0d 	sth	r2,-12(fp)
				}
				if(firstDigitFound == 1){
  803a14:	e0bffd0b 	ldhu	r2,-12(fp)
  803a18:	10800058 	cmpnei	r2,r2,1
  803a1c:	1000071e 	bne	r2,zero,803a3c <updateHighScoreBoard+0x428>
					alt_up_sd_card_write(fileHandle, (digit + '0'));
  803a20:	e13ffc0f 	ldh	r4,-16(fp)
  803a24:	e0bffc8b 	ldhu	r2,-14(fp)
  803a28:	10800c04 	addi	r2,r2,48
  803a2c:	11403fcc 	andi	r5,r2,255
  803a30:	2940201c 	xori	r5,r5,128
  803a34:	297fe004 	addi	r5,r5,-128
  803a38:	0819bd80 	call	819bd8 <alt_up_sd_card_write>
			for(j = 0; j < NUMINITIALS; j++){
				alt_up_sd_card_write(fileHandle, gameScores->highScoreBoardInits[i][j]);
			}
			alt_up_sd_card_write(fileHandle, ' ');
			firstDigitFound = 0;
			for(j = 0; j < MAXSCOREDIGITS; j++){
  803a3c:	e0bffe0b 	ldhu	r2,-8(fp)
  803a40:	10800044 	addi	r2,r2,1
  803a44:	e0bffe0d 	sth	r2,-8(fp)
  803a48:	e0bffe0b 	ldhu	r2,-8(fp)
  803a4c:	108002b0 	cmpltui	r2,r2,10
  803a50:	103fc11e 	bne	r2,zero,803958 <updateHighScoreBoard+0x344>
				}
				if(firstDigitFound == 1){
					alt_up_sd_card_write(fileHandle, (digit + '0'));
				}
			}
			alt_up_sd_card_write(fileHandle, ' ');
  803a54:	e13ffc0f 	ldh	r4,-16(fp)
  803a58:	01400804 	movi	r5,32
  803a5c:	0819bd80 	call	819bd8 <alt_up_sd_card_write>
	}

	//if playerScore is better than a high score, re-write to the SD card, placing currentPlayerScore in the file.
	if(scoreReplaceIndex != -1) {
		int loopCount = NUMSCORES;
		for(i = 0; i < loopCount; i++) {
  803a60:	e0bffe8b 	ldhu	r2,-6(fp)
  803a64:	10800044 	addi	r2,r2,1
  803a68:	e0bffe8d 	sth	r2,-6(fp)
  803a6c:	e0fffe8b 	ldhu	r3,-6(fp)
  803a70:	e0bffb17 	ldw	r2,-20(fp)
  803a74:	18bf2516 	blt	r3,r2,80370c <updateHighScoreBoard+0xf8>
			}
			alt_up_sd_card_write(fileHandle, ' ');
		}
	}

	closeFile(fileHandle);
  803a78:	e13ffc0f 	ldh	r4,-16(fp)
  803a7c:	080437c0 	call	80437c <closeFile>

	//reload new written data back into game memory.
	readHighScoreBoardFromSD();
  803a80:	08032c00 	call	8032c0 <readHighScoreBoardFromSD>

	return;
}
  803a84:	e037883a 	mov	sp,fp
  803a88:	dfc00317 	ldw	ra,12(sp)
  803a8c:	df000217 	ldw	fp,8(sp)
  803a90:	dc400117 	ldw	r17,4(sp)
  803a94:	dc000017 	ldw	r16,0(sp)
  803a98:	dec00404 	addi	sp,sp,16
  803a9c:	f800283a 	ret

00803aa0 <obtainUserInitials>:

//get user input for initials if they are on the high score board
void obtainUserInitials(char * initials){
  803aa0:	defff504 	addi	sp,sp,-44
  803aa4:	dfc00a15 	stw	ra,40(sp)
  803aa8:	df000915 	stw	fp,36(sp)
  803aac:	df000904 	addi	fp,sp,36
  803ab0:	e13fff15 	stw	r4,-4(fp)

	int numInitials = 3;
  803ab4:	008000c4 	movi	r2,3
  803ab8:	e0bffe15 	stw	r2,-8(fp)
	unsigned int charChoice = 0;
  803abc:	e03ffd15 	stw	zero,-12(fp)
	int i;
	char keyInput;
	short int edgeDetect0 = 0;
  803ac0:	e03ffb0d 	sth	zero,-20(fp)
	short int edgeDetect1 = 0;
  803ac4:	e03ffa8d 	sth	zero,-22(fp)
	short int edgeDetect2 = 0;
  803ac8:	e03ffa0d 	sth	zero,-24(fp)
	keyInput = IORD_8DIRECT(KEYS_BASE, 0);
  803acc:	00804034 	movhi	r2,256
  803ad0:	10842004 	addi	r2,r2,4224
  803ad4:	10800023 	ldbuio	r2,0(r2)
  803ad8:	e0bffb85 	stb	r2,-18(fp)
	char key0 = keyInput & 0x01;
  803adc:	e0bffb83 	ldbu	r2,-18(fp)
  803ae0:	1080004c 	andi	r2,r2,1
  803ae4:	e0bff985 	stb	r2,-26(fp)
	char key1 = keyInput & 0x02;
  803ae8:	e0bffb83 	ldbu	r2,-18(fp)
  803aec:	1080008c 	andi	r2,r2,2
  803af0:	e0bff945 	stb	r2,-27(fp)
	char key2 = keyInput & 0x04;
  803af4:	e0bffb83 	ldbu	r2,-18(fp)
  803af8:	1080010c 	andi	r2,r2,4
  803afc:	e0bff905 	stb	r2,-28(fp)
	int xPos = 20;
  803b00:	00800504 	movi	r2,20
  803b04:	e0bff815 	stw	r2,-32(fp)
	int yPos = 20;
  803b08:	00800504 	movi	r2,20
  803b0c:	e0bff715 	stw	r2,-36(fp)

	//0x41 + x(0-25) is alphabet in ascii.
	alt_up_char_buffer_string(char_buffer, "NEW HIGH SCORE!!!", xPos, yPos-3);
  803b10:	d1271517 	ldw	r4,-25516(gp)
  803b14:	e1bff817 	ldw	r6,-32(fp)
  803b18:	e0bff717 	ldw	r2,-36(fp)
  803b1c:	10bfff44 	addi	r2,r2,-3
  803b20:	100f883a 	mov	r7,r2
  803b24:	014020b4 	movhi	r5,130
  803b28:	296ece04 	addi	r5,r5,-17608
  803b2c:	08148b80 	call	8148b8 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "use key1 to go up, key2 to go down,", xPos, yPos-2);
  803b30:	d1271517 	ldw	r4,-25516(gp)
  803b34:	e1bff817 	ldw	r6,-32(fp)
  803b38:	e0bff717 	ldw	r2,-36(fp)
  803b3c:	10bfff84 	addi	r2,r2,-2
  803b40:	100f883a 	mov	r7,r2
  803b44:	014020b4 	movhi	r5,130
  803b48:	296ed304 	addi	r5,r5,-17588
  803b4c:	08148b80 	call	8148b8 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "and key0 to lock in choice:", xPos, yPos-1);
  803b50:	d1271517 	ldw	r4,-25516(gp)
  803b54:	e1bff817 	ldw	r6,-32(fp)
  803b58:	e0bff717 	ldw	r2,-36(fp)
  803b5c:	10bfffc4 	addi	r2,r2,-1
  803b60:	100f883a 	mov	r7,r2
  803b64:	014020b4 	movhi	r5,130
  803b68:	296edc04 	addi	r5,r5,-17552
  803b6c:	08148b80 	call	8148b8 <alt_up_char_buffer_string>
	for(i = 0; i < numInitials; i++) {
  803b70:	e03ffc15 	stw	zero,-16(fp)
  803b74:	00006006 	br	803cf8 <obtainUserInitials+0x258>
		charChoice = 0;
  803b78:	e03ffd15 	stw	zero,-12(fp)
		while(1) {
			keyInput = IORD_8DIRECT(KEYS_BASE, 0);
  803b7c:	00804034 	movhi	r2,256
  803b80:	10842004 	addi	r2,r2,4224
  803b84:	10800023 	ldbuio	r2,0(r2)
  803b88:	e0bffb85 	stb	r2,-18(fp)
			key0 = keyInput & 0x01;
  803b8c:	e0bffb83 	ldbu	r2,-18(fp)
  803b90:	1080004c 	andi	r2,r2,1
  803b94:	e0bff985 	stb	r2,-26(fp)
			key1 = keyInput & 0x02;
  803b98:	e0bffb83 	ldbu	r2,-18(fp)
  803b9c:	1080008c 	andi	r2,r2,2
  803ba0:	e0bff945 	stb	r2,-27(fp)
			key2 = keyInput & 0x04;
  803ba4:	e0bffb83 	ldbu	r2,-18(fp)
  803ba8:	1080010c 	andi	r2,r2,4
  803bac:	e0bff905 	stb	r2,-28(fp)

			alt_up_char_buffer_string(char_buffer, initials, xPos, yPos);
  803bb0:	d1271517 	ldw	r4,-25516(gp)
  803bb4:	e1bff817 	ldw	r6,-32(fp)
  803bb8:	e1fff717 	ldw	r7,-36(fp)
  803bbc:	e17fff17 	ldw	r5,-4(fp)
  803bc0:	08148b80 	call	8148b8 <alt_up_char_buffer_string>
			if (!key0 && (edgeDetect0 == 0)) {
  803bc4:	e0bff987 	ldb	r2,-26(fp)
  803bc8:	1004c03a 	cmpne	r2,r2,zero
  803bcc:	1000061e 	bne	r2,zero,803be8 <obtainUserInitials+0x148>
  803bd0:	e0bffb0f 	ldh	r2,-20(fp)
  803bd4:	1004c03a 	cmpne	r2,r2,zero
  803bd8:	1000031e 	bne	r2,zero,803be8 <obtainUserInitials+0x148>
				edgeDetect0 = 1;
  803bdc:	00800044 	movi	r2,1
  803be0:	e0bffb0d 	sth	r2,-20(fp)
			key0 = keyInput & 0x01;
			key1 = keyInput & 0x02;
			key2 = keyInput & 0x04;

			alt_up_char_buffer_string(char_buffer, initials, xPos, yPos);
			if (!key0 && (edgeDetect0 == 0)) {
  803be4:	00000b06 	br	803c14 <obtainUserInitials+0x174>
				edgeDetect0 = 1;
			} else if (key0 && (edgeDetect0 == 1)) {
  803be8:	e0bff987 	ldb	r2,-26(fp)
  803bec:	1005003a 	cmpeq	r2,r2,zero
  803bf0:	1000081e 	bne	r2,zero,803c14 <obtainUserInitials+0x174>
  803bf4:	e0bffb0f 	ldh	r2,-20(fp)
  803bf8:	10800058 	cmpnei	r2,r2,1
  803bfc:	1000051e 	bne	r2,zero,803c14 <obtainUserInitials+0x174>
				edgeDetect0 = 0;
  803c00:	e03ffb0d 	sth	zero,-20(fp)

	//0x41 + x(0-25) is alphabet in ascii.
	alt_up_char_buffer_string(char_buffer, "NEW HIGH SCORE!!!", xPos, yPos-3);
	alt_up_char_buffer_string(char_buffer, "use key1 to go up, key2 to go down,", xPos, yPos-2);
	alt_up_char_buffer_string(char_buffer, "and key0 to lock in choice:", xPos, yPos-1);
	for(i = 0; i < numInitials; i++) {
  803c04:	e0bffc17 	ldw	r2,-16(fp)
  803c08:	10800044 	addi	r2,r2,1
  803c0c:	e0bffc15 	stw	r2,-16(fp)
  803c10:	00003906 	br	803cf8 <obtainUserInitials+0x258>
				edgeDetect0 = 1;
			} else if (key0 && (edgeDetect0 == 1)) {
				edgeDetect0 = 0;
				break;
			}
			if (!key1 && (edgeDetect1 == 0)) {
  803c14:	e0bff947 	ldb	r2,-27(fp)
  803c18:	1004c03a 	cmpne	r2,r2,zero
  803c1c:	1000061e 	bne	r2,zero,803c38 <obtainUserInitials+0x198>
  803c20:	e0bffa8f 	ldh	r2,-22(fp)
  803c24:	1004c03a 	cmpne	r2,r2,zero
  803c28:	1000031e 	bne	r2,zero,803c38 <obtainUserInitials+0x198>
				edgeDetect1 = 1;
  803c2c:	00800044 	movi	r2,1
  803c30:	e0bffa8d 	sth	r2,-22(fp)
				edgeDetect0 = 1;
			} else if (key0 && (edgeDetect0 == 1)) {
				edgeDetect0 = 0;
				break;
			}
			if (!key1 && (edgeDetect1 == 0)) {
  803c34:	00000f06 	br	803c74 <obtainUserInitials+0x1d4>
				edgeDetect1 = 1;
			} else if (key1 && (edgeDetect1 == 1)) {
  803c38:	e0bff947 	ldb	r2,-27(fp)
  803c3c:	1005003a 	cmpeq	r2,r2,zero
  803c40:	10000c1e 	bne	r2,zero,803c74 <obtainUserInitials+0x1d4>
  803c44:	e0bffa8f 	ldh	r2,-22(fp)
  803c48:	10800058 	cmpnei	r2,r2,1
  803c4c:	1000091e 	bne	r2,zero,803c74 <obtainUserInitials+0x1d4>
				edgeDetect1 = 0;
  803c50:	e03ffa8d 	sth	zero,-22(fp)
				if(charChoice < 25){
  803c54:	e0bffd17 	ldw	r2,-12(fp)
  803c58:	10800668 	cmpgeui	r2,r2,25
  803c5c:	1000041e 	bne	r2,zero,803c70 <obtainUserInitials+0x1d0>
					charChoice++;
  803c60:	e0bffd17 	ldw	r2,-12(fp)
  803c64:	10800044 	addi	r2,r2,1
  803c68:	e0bffd15 	stw	r2,-12(fp)
  803c6c:	00000106 	br	803c74 <obtainUserInitials+0x1d4>
				} else {
					charChoice = 0;
  803c70:	e03ffd15 	stw	zero,-12(fp)
				}
			}
			if (!key2 && (edgeDetect2 == 0)) {
  803c74:	e0bff907 	ldb	r2,-28(fp)
  803c78:	1004c03a 	cmpne	r2,r2,zero
  803c7c:	1000061e 	bne	r2,zero,803c98 <obtainUserInitials+0x1f8>
  803c80:	e0bffa0f 	ldh	r2,-24(fp)
  803c84:	1004c03a 	cmpne	r2,r2,zero
  803c88:	1000031e 	bne	r2,zero,803c98 <obtainUserInitials+0x1f8>
				edgeDetect2 = 1;
  803c8c:	00800044 	movi	r2,1
  803c90:	e0bffa0d 	sth	r2,-24(fp)
					charChoice++;
				} else {
					charChoice = 0;
				}
			}
			if (!key2 && (edgeDetect2 == 0)) {
  803c94:	00001006 	br	803cd8 <obtainUserInitials+0x238>
				edgeDetect2 = 1;
			} else if (key2 && (edgeDetect2 == 1)) {
  803c98:	e0bff907 	ldb	r2,-28(fp)
  803c9c:	1005003a 	cmpeq	r2,r2,zero
  803ca0:	10000d1e 	bne	r2,zero,803cd8 <obtainUserInitials+0x238>
  803ca4:	e0bffa0f 	ldh	r2,-24(fp)
  803ca8:	10800058 	cmpnei	r2,r2,1
  803cac:	10000a1e 	bne	r2,zero,803cd8 <obtainUserInitials+0x238>
				edgeDetect2 = 0;
  803cb0:	e03ffa0d 	sth	zero,-24(fp)
				if(charChoice > 0) {
  803cb4:	e0bffd17 	ldw	r2,-12(fp)
  803cb8:	1005003a 	cmpeq	r2,r2,zero
  803cbc:	1000041e 	bne	r2,zero,803cd0 <obtainUserInitials+0x230>
					charChoice--;
  803cc0:	e0bffd17 	ldw	r2,-12(fp)
  803cc4:	10bfffc4 	addi	r2,r2,-1
  803cc8:	e0bffd15 	stw	r2,-12(fp)
  803ccc:	00000206 	br	803cd8 <obtainUserInitials+0x238>
				} else {
					charChoice = 25;
  803cd0:	00800644 	movi	r2,25
  803cd4:	e0bffd15 	stw	r2,-12(fp)
				}

			}
			initials[i] = 0x41 + charChoice;
  803cd8:	e0bffc17 	ldw	r2,-16(fp)
  803cdc:	1007883a 	mov	r3,r2
  803ce0:	e0bfff17 	ldw	r2,-4(fp)
  803ce4:	1887883a 	add	r3,r3,r2
  803ce8:	e0bffd17 	ldw	r2,-12(fp)
  803cec:	10801044 	addi	r2,r2,65
  803cf0:	18800005 	stb	r2,0(r3)
		}
  803cf4:	003fa106 	br	803b7c <obtainUserInitials+0xdc>

	//0x41 + x(0-25) is alphabet in ascii.
	alt_up_char_buffer_string(char_buffer, "NEW HIGH SCORE!!!", xPos, yPos-3);
	alt_up_char_buffer_string(char_buffer, "use key1 to go up, key2 to go down,", xPos, yPos-2);
	alt_up_char_buffer_string(char_buffer, "and key0 to lock in choice:", xPos, yPos-1);
	for(i = 0; i < numInitials; i++) {
  803cf8:	e0fffc17 	ldw	r3,-16(fp)
  803cfc:	e0bffe17 	ldw	r2,-8(fp)
  803d00:	18bf9d16 	blt	r3,r2,803b78 <obtainUserInitials+0xd8>
			}
			initials[i] = 0x41 + charChoice;
		}
	}

	alt_up_char_buffer_clear(char_buffer); // clear screen
  803d04:	d1271517 	ldw	r4,-25516(gp)
  803d08:	08149cc0 	call	8149cc <alt_up_char_buffer_clear>

	printf("initials read as: %c%c%c", initials[0], initials[1], initials[2]);
  803d0c:	e0bfff17 	ldw	r2,-4(fp)
  803d10:	10800003 	ldbu	r2,0(r2)
  803d14:	11403fcc 	andi	r5,r2,255
  803d18:	2940201c 	xori	r5,r5,128
  803d1c:	297fe004 	addi	r5,r5,-128
  803d20:	e0bfff17 	ldw	r2,-4(fp)
  803d24:	10800044 	addi	r2,r2,1
  803d28:	10800003 	ldbu	r2,0(r2)
  803d2c:	11803fcc 	andi	r6,r2,255
  803d30:	3180201c 	xori	r6,r6,128
  803d34:	31bfe004 	addi	r6,r6,-128
  803d38:	e0bfff17 	ldw	r2,-4(fp)
  803d3c:	10800084 	addi	r2,r2,2
  803d40:	10800003 	ldbu	r2,0(r2)
  803d44:	11c03fcc 	andi	r7,r2,255
  803d48:	39c0201c 	xori	r7,r7,128
  803d4c:	39ffe004 	addi	r7,r7,-128
  803d50:	010020b4 	movhi	r4,130
  803d54:	212ee304 	addi	r4,r4,-17524
  803d58:	08096340 	call	809634 <printf>

	return;
}
  803d5c:	e037883a 	mov	sp,fp
  803d60:	dfc00117 	ldw	ra,4(sp)
  803d64:	df000017 	ldw	fp,0(sp)
  803d68:	dec00204 	addi	sp,sp,8
  803d6c:	f800283a 	ret

00803d70 <updateCurrentPlayerScore>:


//increment player score by deltaScore
void updateCurrentPlayerScore(int deltaScore) {
  803d70:	defffe04 	addi	sp,sp,-8
  803d74:	df000115 	stw	fp,4(sp)
  803d78:	df000104 	addi	fp,sp,4
  803d7c:	e13fff15 	stw	r4,-4(fp)
	gameScores->currentPlayerScore += deltaScore;
  803d80:	d1272e17 	ldw	r4,-25416(gp)
  803d84:	d0a72e17 	ldw	r2,-25416(gp)
  803d88:	10c00017 	ldw	r3,0(r2)
  803d8c:	e0bfff17 	ldw	r2,-4(fp)
  803d90:	1885883a 	add	r2,r3,r2
  803d94:	20800015 	stw	r2,0(r4)
	return;
}
  803d98:	e037883a 	mov	sp,fp
  803d9c:	df000017 	ldw	fp,0(sp)
  803da0:	dec00104 	addi	sp,sp,4
  803da4:	f800283a 	ret

00803da8 <getCurrentPlayerScore>:

//accessor: get score
int getCurrentPlayerScore() {
  803da8:	deffff04 	addi	sp,sp,-4
  803dac:	df000015 	stw	fp,0(sp)
  803db0:	d839883a 	mov	fp,sp
	return gameScores->currentPlayerScore;
  803db4:	d0a72e17 	ldw	r2,-25416(gp)
  803db8:	10800017 	ldw	r2,0(r2)
}
  803dbc:	e037883a 	mov	sp,fp
  803dc0:	df000017 	ldw	fp,0(sp)
  803dc4:	dec00104 	addi	sp,sp,4
  803dc8:	f800283a 	ret

00803dcc <setCurrentPlayerLives>:

//mutator: set lives to newNumLives
void setCurrentPlayerLives(int newNumLives){
  803dcc:	defffe04 	addi	sp,sp,-8
  803dd0:	df000115 	stw	fp,4(sp)
  803dd4:	df000104 	addi	fp,sp,4
  803dd8:	e13fff15 	stw	r4,-4(fp)
	gameScores->currentPlayerLives = newNumLives;
  803ddc:	d0e72e17 	ldw	r3,-25416(gp)
  803de0:	e0bfff17 	ldw	r2,-4(fp)
  803de4:	18800115 	stw	r2,4(r3)
}
  803de8:	e037883a 	mov	sp,fp
  803dec:	df000017 	ldw	fp,0(sp)
  803df0:	dec00104 	addi	sp,sp,4
  803df4:	f800283a 	ret

00803df8 <getCurrentPlayerLives>:

//accessor: get lives
int getCurrentPlayerLives(void) {
  803df8:	deffff04 	addi	sp,sp,-4
  803dfc:	df000015 	stw	fp,0(sp)
  803e00:	d839883a 	mov	fp,sp
	return gameScores->currentPlayerLives;
  803e04:	d0a72e17 	ldw	r2,-25416(gp)
  803e08:	10800117 	ldw	r2,4(r2)
}
  803e0c:	e037883a 	mov	sp,fp
  803e10:	df000017 	ldw	fp,0(sp)
  803e14:	dec00104 	addi	sp,sp,4
  803e18:	f800283a 	ret

00803e1c <drawScore>:

//purpose: overlay current scoreboard values onto the screen.
void drawScore(void){
  803e1c:	deffee04 	addi	sp,sp,-72
  803e20:	dfc01115 	stw	ra,68(sp)
  803e24:	df001015 	stw	fp,64(sp)
  803e28:	dc400f15 	stw	r17,60(sp)
  803e2c:	dc000e15 	stw	r16,56(sp)
  803e30:	df000e04 	addi	fp,sp,56
	char scoreValues[32];// = malloc(sizeof(char) * NUMINITIALS); // scores wont exceed 10, and names are 3
	int i,j;
	int digit;
	int firstNonZeroDig;
	int xPos = 35;
  803e34:	008008c4 	movi	r2,35
  803e38:	e0bff315 	stw	r2,-52(fp)
	int ypos = 25;
  803e3c:	00800644 	movi	r2,25
  803e40:	e0bff215 	stw	r2,-56(fp)

	alt_up_char_buffer_string(char_buffer, "**HIGH SCORES**" , xPos, ypos - 2);
  803e44:	d1271517 	ldw	r4,-25516(gp)
  803e48:	e1bff317 	ldw	r6,-52(fp)
  803e4c:	e0bff217 	ldw	r2,-56(fp)
  803e50:	10bfff84 	addi	r2,r2,-2
  803e54:	100f883a 	mov	r7,r2
  803e58:	014020b4 	movhi	r5,130
  803e5c:	296eea04 	addi	r5,r5,-17496
  803e60:	08148b80 	call	8148b8 <alt_up_char_buffer_string>

	for(i = 0; i < NUMSCORES; i++) {
  803e64:	e03ff715 	stw	zero,-36(fp)
  803e68:	00007006 	br	80402c <drawScore+0x210>
		scoreValues[0] = gameScores->highScoreBoardInits[i][0];
  803e6c:	d1272e17 	ldw	r4,-25416(gp)
  803e70:	e0fff717 	ldw	r3,-36(fp)
  803e74:	1805883a 	mov	r2,r3
  803e78:	1085883a 	add	r2,r2,r2
  803e7c:	10c5883a 	add	r2,r2,r3
  803e80:	1105883a 	add	r2,r2,r4
  803e84:	10800c04 	addi	r2,r2,48
  803e88:	10800003 	ldbu	r2,0(r2)
  803e8c:	e0bff805 	stb	r2,-32(fp)
		scoreValues[1] = gameScores->highScoreBoardInits[i][1];
  803e90:	d1272e17 	ldw	r4,-25416(gp)
  803e94:	e0fff717 	ldw	r3,-36(fp)
  803e98:	1805883a 	mov	r2,r3
  803e9c:	1085883a 	add	r2,r2,r2
  803ea0:	10c5883a 	add	r2,r2,r3
  803ea4:	1105883a 	add	r2,r2,r4
  803ea8:	10800c44 	addi	r2,r2,49
  803eac:	10800003 	ldbu	r2,0(r2)
  803eb0:	e0bff845 	stb	r2,-31(fp)
		scoreValues[2] = gameScores->highScoreBoardInits[i][2];
  803eb4:	d1272e17 	ldw	r4,-25416(gp)
  803eb8:	e0fff717 	ldw	r3,-36(fp)
  803ebc:	1805883a 	mov	r2,r3
  803ec0:	1085883a 	add	r2,r2,r2
  803ec4:	10c5883a 	add	r2,r2,r3
  803ec8:	1105883a 	add	r2,r2,r4
  803ecc:	10800c84 	addi	r2,r2,50
  803ed0:	10800003 	ldbu	r2,0(r2)
  803ed4:	e0bff885 	stb	r2,-30(fp)

		scoreValues[3] = ' ';
  803ed8:	00800804 	movi	r2,32
  803edc:	e0bff8c5 	stb	r2,-29(fp)

		firstNonZeroDig = 0;
  803ee0:	e03ff415 	stw	zero,-48(fp)
		for(j = 0; j < MAXSCOREDIGITS; j++){
  803ee4:	e03ff615 	stw	zero,-40(fp)
  803ee8:	00004106 	br	803ff0 <drawScore+0x1d4>
			digit = ((int)(gameScores->highScoreBoard[i] / pow(10,(MAXSCOREDIGITS - 1 - j))) % 10);
  803eec:	d0e72e17 	ldw	r3,-25416(gp)
  803ef0:	e0bff717 	ldw	r2,-36(fp)
  803ef4:	1085883a 	add	r2,r2,r2
  803ef8:	1085883a 	add	r2,r2,r2
  803efc:	10c5883a 	add	r2,r2,r3
  803f00:	10800204 	addi	r2,r2,8
  803f04:	11000017 	ldw	r4,0(r2)
  803f08:	08083140 	call	808314 <__floatsidf>
  803f0c:	1021883a 	mov	r16,r2
  803f10:	1823883a 	mov	r17,r3
  803f14:	00c00244 	movi	r3,9
  803f18:	e0bff617 	ldw	r2,-40(fp)
  803f1c:	1889c83a 	sub	r4,r3,r2
  803f20:	08083140 	call	808314 <__floatsidf>
  803f24:	100f883a 	mov	r7,r2
  803f28:	1811883a 	mov	r8,r3
  803f2c:	0009883a 	mov	r4,zero
  803f30:	01500934 	movhi	r5,16420
  803f34:	380d883a 	mov	r6,r7
  803f38:	400f883a 	mov	r7,r8
  803f3c:	080540c0 	call	80540c <pow>
  803f40:	100f883a 	mov	r7,r2
  803f44:	1811883a 	mov	r8,r3
  803f48:	8009883a 	mov	r4,r16
  803f4c:	880b883a 	mov	r5,r17
  803f50:	380d883a 	mov	r6,r7
  803f54:	400f883a 	mov	r7,r8
  803f58:	0807e140 	call	807e14 <__divdf3>
  803f5c:	1009883a 	mov	r4,r2
  803f60:	180b883a 	mov	r5,r3
  803f64:	2005883a 	mov	r2,r4
  803f68:	2807883a 	mov	r3,r5
  803f6c:	1009883a 	mov	r4,r2
  803f70:	180b883a 	mov	r5,r3
  803f74:	080840c0 	call	80840c <__fixdfsi>
  803f78:	1009883a 	mov	r4,r2
  803f7c:	01400284 	movi	r5,10
  803f80:	08085f80 	call	8085f8 <__modsi3>
  803f84:	e0bff515 	stw	r2,-44(fp)
			//printf("digit: %d\n", digit);
			if(digit == 0 && firstNonZeroDig == 0){
  803f88:	e0bff517 	ldw	r2,-44(fp)
  803f8c:	1004c03a 	cmpne	r2,r2,zero
  803f90:	10000a1e 	bne	r2,zero,803fbc <drawScore+0x1a0>
  803f94:	e0bff417 	ldw	r2,-48(fp)
  803f98:	1004c03a 	cmpne	r2,r2,zero
  803f9c:	1000071e 	bne	r2,zero,803fbc <drawScore+0x1a0>
				scoreValues[4+j] = ' ';
  803fa0:	e0bff617 	ldw	r2,-40(fp)
  803fa4:	10c00104 	addi	r3,r2,4
  803fa8:	e0bff804 	addi	r2,fp,-32
  803fac:	10c7883a 	add	r3,r2,r3
  803fb0:	00800804 	movi	r2,32
  803fb4:	18800005 	stb	r2,0(r3)

		firstNonZeroDig = 0;
		for(j = 0; j < MAXSCOREDIGITS; j++){
			digit = ((int)(gameScores->highScoreBoard[i] / pow(10,(MAXSCOREDIGITS - 1 - j))) % 10);
			//printf("digit: %d\n", digit);
			if(digit == 0 && firstNonZeroDig == 0){
  803fb8:	00000a06 	br	803fe4 <drawScore+0x1c8>
				scoreValues[4+j] = ' ';
			} else {
				firstNonZeroDig = 1;
  803fbc:	00800044 	movi	r2,1
  803fc0:	e0bff415 	stw	r2,-48(fp)
				scoreValues[4+j] = (digit + '0');
  803fc4:	e0bff617 	ldw	r2,-40(fp)
  803fc8:	11000104 	addi	r4,r2,4
  803fcc:	e0bff517 	ldw	r2,-44(fp)
  803fd0:	10800c04 	addi	r2,r2,48
  803fd4:	1007883a 	mov	r3,r2
  803fd8:	e0bff804 	addi	r2,fp,-32
  803fdc:	1105883a 	add	r2,r2,r4
  803fe0:	10c00005 	stb	r3,0(r2)
		scoreValues[2] = gameScores->highScoreBoardInits[i][2];

		scoreValues[3] = ' ';

		firstNonZeroDig = 0;
		for(j = 0; j < MAXSCOREDIGITS; j++){
  803fe4:	e0bff617 	ldw	r2,-40(fp)
  803fe8:	10800044 	addi	r2,r2,1
  803fec:	e0bff615 	stw	r2,-40(fp)
  803ff0:	e0bff617 	ldw	r2,-40(fp)
  803ff4:	10800290 	cmplti	r2,r2,10
  803ff8:	103fbc1e 	bne	r2,zero,803eec <drawScore+0xd0>
			} else {
				firstNonZeroDig = 1;
				scoreValues[4+j] = (digit + '0');
			}
		}
		scoreValues[4+MAXSCOREDIGITS] = '\0';
  803ffc:	e03ffb85 	stb	zero,-18(fp)

		alt_up_char_buffer_string(char_buffer, scoreValues , xPos, ypos + i);
  804000:	d1271517 	ldw	r4,-25516(gp)
  804004:	e1bff317 	ldw	r6,-52(fp)
  804008:	e0fff217 	ldw	r3,-56(fp)
  80400c:	e0bff717 	ldw	r2,-36(fp)
  804010:	1885883a 	add	r2,r3,r2
  804014:	100f883a 	mov	r7,r2
  804018:	e17ff804 	addi	r5,fp,-32
  80401c:	08148b80 	call	8148b8 <alt_up_char_buffer_string>
	int xPos = 35;
	int ypos = 25;

	alt_up_char_buffer_string(char_buffer, "**HIGH SCORES**" , xPos, ypos - 2);

	for(i = 0; i < NUMSCORES; i++) {
  804020:	e0bff717 	ldw	r2,-36(fp)
  804024:	10800044 	addi	r2,r2,1
  804028:	e0bff715 	stw	r2,-36(fp)
  80402c:	e0bff717 	ldw	r2,-36(fp)
  804030:	10800290 	cmplti	r2,r2,10
  804034:	103f8d1e 	bne	r2,zero,803e6c <drawScore+0x50>
		}
		scoreValues[4+MAXSCOREDIGITS] = '\0';

		alt_up_char_buffer_string(char_buffer, scoreValues , xPos, ypos + i);
	}
}
  804038:	e037883a 	mov	sp,fp
  80403c:	dfc00317 	ldw	ra,12(sp)
  804040:	df000217 	ldw	fp,8(sp)
  804044:	dc400117 	ldw	r17,4(sp)
  804048:	dc000017 	ldw	r16,0(sp)
  80404c:	dec00404 	addi	sp,sp,16
  804050:	f800283a 	ret

00804054 <clearScore>:

void clearScore(void) {
  804054:	defffe04 	addi	sp,sp,-8
  804058:	dfc00115 	stw	ra,4(sp)
  80405c:	df000015 	stw	fp,0(sp)
  804060:	d839883a 	mov	fp,sp
	alt_up_char_buffer_clear(char_buffer);
  804064:	d1271517 	ldw	r4,-25516(gp)
  804068:	08149cc0 	call	8149cc <alt_up_char_buffer_clear>
}
  80406c:	e037883a 	mov	sp,fp
  804070:	dfc00117 	ldw	ra,4(sp)
  804074:	df000017 	ldw	fp,0(sp)
  804078:	dec00204 	addi	sp,sp,8
  80407c:	f800283a 	ret

00804080 <drawInGameInfo>:

//draws current lives and playerScore
void drawInGameInfo(void) {
  804080:	defff204 	addi	sp,sp,-56
  804084:	dfc00d15 	stw	ra,52(sp)
  804088:	df000c15 	stw	fp,48(sp)
  80408c:	dc400b15 	stw	r17,44(sp)
  804090:	dc000a15 	stw	r16,40(sp)
  804094:	df000a04 	addi	fp,sp,40
	char livesLeft[2] = {' ', '\0'};
  804098:	00800804 	movi	r2,32
  80409c:	e0bffc05 	stb	r2,-16(fp)
  8040a0:	e03ffc45 	stb	zero,-15(fp)
	livesLeft[0] = (getCurrentPlayerLives() + '0');
  8040a4:	0803df80 	call	803df8 <getCurrentPlayerLives>
  8040a8:	10800c04 	addi	r2,r2,48
  8040ac:	e0bffc05 	stb	r2,-16(fp)
	int xPos = 1;
  8040b0:	00800044 	movi	r2,1
  8040b4:	e0bffb15 	stw	r2,-20(fp)
	int yPos = 1;
  8040b8:	00800044 	movi	r2,1
  8040bc:	e0bffa15 	stw	r2,-24(fp)
	int i;
	int digit = 0;
  8040c0:	e03ff815 	stw	zero,-32(fp)
	int firstDigitFound = 0;
  8040c4:	e03ff715 	stw	zero,-36(fp)
	int currentScore = getCurrentPlayerScore();
  8040c8:	0803da80 	call	803da8 <getCurrentPlayerScore>
  8040cc:	e0bff615 	stw	r2,-40(fp)
	char currentCharScore[MAXSCOREDIGITS + 1];
	currentCharScore[MAXSCOREDIGITS] = '\0'; //end of string
  8040d0:	e03fff05 	stb	zero,-4(fp)

	//populate currentCharScore;
	for(i = 0; i < MAXSCOREDIGITS; i++) {
  8040d4:	e03ff915 	stw	zero,-28(fp)
  8040d8:	00003e06 	br	8041d4 <drawInGameInfo+0x154>
		digit = ((int)(currentScore / pow(10,(MAXSCOREDIGITS - 1 - i)))%10);
  8040dc:	e13ff617 	ldw	r4,-40(fp)
  8040e0:	08083140 	call	808314 <__floatsidf>
  8040e4:	1021883a 	mov	r16,r2
  8040e8:	1823883a 	mov	r17,r3
  8040ec:	00c00244 	movi	r3,9
  8040f0:	e0bff917 	ldw	r2,-28(fp)
  8040f4:	1889c83a 	sub	r4,r3,r2
  8040f8:	08083140 	call	808314 <__floatsidf>
  8040fc:	100f883a 	mov	r7,r2
  804100:	1811883a 	mov	r8,r3
  804104:	0009883a 	mov	r4,zero
  804108:	01500934 	movhi	r5,16420
  80410c:	380d883a 	mov	r6,r7
  804110:	400f883a 	mov	r7,r8
  804114:	080540c0 	call	80540c <pow>
  804118:	100f883a 	mov	r7,r2
  80411c:	1811883a 	mov	r8,r3
  804120:	8009883a 	mov	r4,r16
  804124:	880b883a 	mov	r5,r17
  804128:	380d883a 	mov	r6,r7
  80412c:	400f883a 	mov	r7,r8
  804130:	0807e140 	call	807e14 <__divdf3>
  804134:	1009883a 	mov	r4,r2
  804138:	180b883a 	mov	r5,r3
  80413c:	2005883a 	mov	r2,r4
  804140:	2807883a 	mov	r3,r5
  804144:	1009883a 	mov	r4,r2
  804148:	180b883a 	mov	r5,r3
  80414c:	080840c0 	call	80840c <__fixdfsi>
  804150:	1009883a 	mov	r4,r2
  804154:	01400284 	movi	r5,10
  804158:	08085f80 	call	8085f8 <__modsi3>
  80415c:	e0bff815 	stw	r2,-32(fp)
		currentCharScore[i] = '0';
  804160:	e0fff917 	ldw	r3,-28(fp)
  804164:	e0bffc84 	addi	r2,fp,-14
  804168:	10c7883a 	add	r3,r2,r3
  80416c:	00800c04 	movi	r2,48
  804170:	18800005 	stb	r2,0(r3)
		if(digit != 0 && firstDigitFound == 0) {
  804174:	e0bff817 	ldw	r2,-32(fp)
  804178:	1005003a 	cmpeq	r2,r2,zero
  80417c:	1000051e 	bne	r2,zero,804194 <drawInGameInfo+0x114>
  804180:	e0bff717 	ldw	r2,-36(fp)
  804184:	1004c03a 	cmpne	r2,r2,zero
  804188:	1000021e 	bne	r2,zero,804194 <drawInGameInfo+0x114>
			firstDigitFound = 1;
  80418c:	00800044 	movi	r2,1
  804190:	e0bff715 	stw	r2,-36(fp)
		}
		if(firstDigitFound == 1 || i == (MAXSCOREDIGITS - 1)) {
  804194:	e0bff717 	ldw	r2,-36(fp)
  804198:	10800060 	cmpeqi	r2,r2,1
  80419c:	1000031e 	bne	r2,zero,8041ac <drawInGameInfo+0x12c>
  8041a0:	e0bff917 	ldw	r2,-28(fp)
  8041a4:	10800258 	cmpnei	r2,r2,9
  8041a8:	1000071e 	bne	r2,zero,8041c8 <drawInGameInfo+0x148>
			currentCharScore[i] = (digit + '0');
  8041ac:	e13ff917 	ldw	r4,-28(fp)
  8041b0:	e0bff817 	ldw	r2,-32(fp)
  8041b4:	10800c04 	addi	r2,r2,48
  8041b8:	1007883a 	mov	r3,r2
  8041bc:	e0bffc84 	addi	r2,fp,-14
  8041c0:	1105883a 	add	r2,r2,r4
  8041c4:	10c00005 	stb	r3,0(r2)
	int currentScore = getCurrentPlayerScore();
	char currentCharScore[MAXSCOREDIGITS + 1];
	currentCharScore[MAXSCOREDIGITS] = '\0'; //end of string

	//populate currentCharScore;
	for(i = 0; i < MAXSCOREDIGITS; i++) {
  8041c8:	e0bff917 	ldw	r2,-28(fp)
  8041cc:	10800044 	addi	r2,r2,1
  8041d0:	e0bff915 	stw	r2,-28(fp)
  8041d4:	e0bff917 	ldw	r2,-28(fp)
  8041d8:	10800290 	cmplti	r2,r2,10
  8041dc:	103fbf1e 	bne	r2,zero,8040dc <drawInGameInfo+0x5c>
			currentCharScore[i] = (digit + '0');
		}
	}

	//print info to screen
	if(livesLeft[0] == '1') {
  8041e0:	e0bffc03 	ldbu	r2,-16(fp)
  8041e4:	10803fcc 	andi	r2,r2,255
  8041e8:	1080201c 	xori	r2,r2,128
  8041ec:	10bfe004 	addi	r2,r2,-128
  8041f0:	10800c58 	cmpnei	r2,r2,49
  8041f4:	1000071e 	bne	r2,zero,804214 <drawInGameInfo+0x194>
		alt_up_char_buffer_string(char_buffer, "Lives: YOLO" , xPos, yPos);
  8041f8:	d1271517 	ldw	r4,-25516(gp)
  8041fc:	e1bffb17 	ldw	r6,-20(fp)
  804200:	e1fffa17 	ldw	r7,-24(fp)
  804204:	014020b4 	movhi	r5,130
  804208:	296eee04 	addi	r5,r5,-17480
  80420c:	08148b80 	call	8148b8 <alt_up_char_buffer_string>
  804210:	00001a06 	br	80427c <drawInGameInfo+0x1fc>

	} else if(livesLeft[0] == '0') {
  804214:	e0bffc03 	ldbu	r2,-16(fp)
  804218:	10803fcc 	andi	r2,r2,255
  80421c:	1080201c 	xori	r2,r2,128
  804220:	10bfe004 	addi	r2,r2,-128
  804224:	10800c18 	cmpnei	r2,r2,48
  804228:	1000071e 	bne	r2,zero,804248 <drawInGameInfo+0x1c8>
		alt_up_char_buffer_string(char_buffer, "Lives: DEAD" , xPos, yPos);
  80422c:	d1271517 	ldw	r4,-25516(gp)
  804230:	e1bffb17 	ldw	r6,-20(fp)
  804234:	e1fffa17 	ldw	r7,-24(fp)
  804238:	014020b4 	movhi	r5,130
  80423c:	296ef104 	addi	r5,r5,-17468
  804240:	08148b80 	call	8148b8 <alt_up_char_buffer_string>
  804244:	00000d06 	br	80427c <drawInGameInfo+0x1fc>
	} else {
		alt_up_char_buffer_string(char_buffer, "Lives: " , xPos, yPos);
  804248:	d1271517 	ldw	r4,-25516(gp)
  80424c:	e1bffb17 	ldw	r6,-20(fp)
  804250:	e1fffa17 	ldw	r7,-24(fp)
  804254:	014020b4 	movhi	r5,130
  804258:	296ef404 	addi	r5,r5,-17456
  80425c:	08148b80 	call	8148b8 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buffer, livesLeft , xPos + 7, yPos);
  804260:	d1271517 	ldw	r4,-25516(gp)
  804264:	e0bffb17 	ldw	r2,-20(fp)
  804268:	108001c4 	addi	r2,r2,7
  80426c:	100d883a 	mov	r6,r2
  804270:	e1fffa17 	ldw	r7,-24(fp)
  804274:	e17ffc04 	addi	r5,fp,-16
  804278:	08148b80 	call	8148b8 <alt_up_char_buffer_string>
	}
	alt_up_char_buffer_string(char_buffer, "Score: " , xPos, yPos+1);
  80427c:	d1271517 	ldw	r4,-25516(gp)
  804280:	e1bffb17 	ldw	r6,-20(fp)
  804284:	e0bffa17 	ldw	r2,-24(fp)
  804288:	10800044 	addi	r2,r2,1
  80428c:	100f883a 	mov	r7,r2
  804290:	014020b4 	movhi	r5,130
  804294:	296ef604 	addi	r5,r5,-17448
  804298:	08148b80 	call	8148b8 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, currentCharScore , xPos + 7, yPos+1);
  80429c:	d1271517 	ldw	r4,-25516(gp)
  8042a0:	e0bffb17 	ldw	r2,-20(fp)
  8042a4:	108001c4 	addi	r2,r2,7
  8042a8:	100d883a 	mov	r6,r2
  8042ac:	e0bffa17 	ldw	r2,-24(fp)
  8042b0:	10800044 	addi	r2,r2,1
  8042b4:	100f883a 	mov	r7,r2
  8042b8:	e17ffc84 	addi	r5,fp,-14
  8042bc:	08148b80 	call	8148b8 <alt_up_char_buffer_string>

	return;
}
  8042c0:	e037883a 	mov	sp,fp
  8042c4:	dfc00317 	ldw	ra,12(sp)
  8042c8:	df000217 	ldw	fp,8(sp)
  8042cc:	dc400117 	ldw	r17,4(sp)
  8042d0:	dc000017 	ldw	r16,0(sp)
  8042d4:	dec00404 	addi	sp,sp,16
  8042d8:	f800283a 	ret

008042dc <openSdCard>:
#include <stdio.h>
#include <stdlib.h>
#include "sd_card.h"

int openSdCard(){
  8042dc:	defffd04 	addi	sp,sp,-12
  8042e0:	dfc00215 	stw	ra,8(sp)
  8042e4:	df000115 	stw	fp,4(sp)
  8042e8:	df000104 	addi	fp,sp,4
	sdDev = alt_up_sd_card_open_dev("/dev/Altera_UP_SD_Card_Avalon_Interface_0");
  8042ec:	010020b4 	movhi	r4,130
  8042f0:	212ef804 	addi	r4,r4,-17440
  8042f4:	0818cfc0 	call	818cfc <alt_up_sd_card_open_dev>
  8042f8:	d0a70f15 	stw	r2,-25540(gp)

	if(sdDev != NULL && alt_up_sd_card_is_FAT16()){
  8042fc:	d0a70f17 	ldw	r2,-25540(gp)
  804300:	1005003a 	cmpeq	r2,r2,zero
  804304:	1000051e 	bne	r2,zero,80431c <openSdCard+0x40>
  804308:	0818e880 	call	818e88 <alt_up_sd_card_is_FAT16>
  80430c:	1005003a 	cmpeq	r2,r2,zero
  804310:	1000021e 	bne	r2,zero,80431c <openSdCard+0x40>
		return 0;
  804314:	e03fff15 	stw	zero,-4(fp)
  804318:	00000206 	br	804324 <openSdCard+0x48>
	} else {
		return -1;
  80431c:	00bfffc4 	movi	r2,-1
  804320:	e0bfff15 	stw	r2,-4(fp)
  804324:	e0bfff17 	ldw	r2,-4(fp)
	}
}
  804328:	e037883a 	mov	sp,fp
  80432c:	dfc00117 	ldw	ra,4(sp)
  804330:	df000017 	ldw	fp,0(sp)
  804334:	dec00204 	addi	sp,sp,8
  804338:	f800283a 	ret

0080433c <openFile>:

short int openFile(char *fileName) {
  80433c:	defffd04 	addi	sp,sp,-12
  804340:	dfc00215 	stw	ra,8(sp)
  804344:	df000115 	stw	fp,4(sp)
  804348:	df000104 	addi	fp,sp,4
  80434c:	e13fff15 	stw	r4,-4(fp)
	return alt_up_sd_card_fopen(fileName, 0);
  804350:	e13fff17 	ldw	r4,-4(fp)
  804354:	000b883a 	mov	r5,zero
  804358:	08193800 	call	819380 <alt_up_sd_card_fopen>
  80435c:	10bfffcc 	andi	r2,r2,65535
  804360:	10a0001c 	xori	r2,r2,32768
  804364:	10a00004 	addi	r2,r2,-32768
}
  804368:	e037883a 	mov	sp,fp
  80436c:	dfc00117 	ldw	ra,4(sp)
  804370:	df000017 	ldw	fp,0(sp)
  804374:	dec00204 	addi	sp,sp,8
  804378:	f800283a 	ret

0080437c <closeFile>:

int closeFile(short int fh) {
  80437c:	defffd04 	addi	sp,sp,-12
  804380:	dfc00215 	stw	ra,8(sp)
  804384:	df000115 	stw	fp,4(sp)
  804388:	df000104 	addi	fp,sp,4
  80438c:	e13fff0d 	sth	r4,-4(fp)
	return alt_up_sd_card_fclose(fh);
  804390:	e13fff0f 	ldh	r4,-4(fp)
  804394:	081a1fc0 	call	81a1fc <alt_up_sd_card_fclose>
}
  804398:	e037883a 	mov	sp,fp
  80439c:	dfc00117 	ldw	ra,4(sp)
  8043a0:	df000017 	ldw	fp,0(sp)
  8043a4:	dec00204 	addi	sp,sp,8
  8043a8:	f800283a 	ret

008043ac <readByte>:

unsigned char readByte(short int fh) {
  8043ac:	defffd04 	addi	sp,sp,-12
  8043b0:	dfc00215 	stw	ra,8(sp)
  8043b4:	df000115 	stw	fp,4(sp)
  8043b8:	df000104 	addi	fp,sp,4
  8043bc:	e13fff0d 	sth	r4,-4(fp)
	return (unsigned char) alt_up_sd_card_read(fh);
  8043c0:	e13fff0f 	ldh	r4,-4(fp)
  8043c4:	08198440 	call	819844 <alt_up_sd_card_read>
  8043c8:	10803fcc 	andi	r2,r2,255
}
  8043cc:	e037883a 	mov	sp,fp
  8043d0:	dfc00117 	ldw	ra,4(sp)
  8043d4:	df000017 	ldw	fp,0(sp)
  8043d8:	dec00204 	addi	sp,sp,8
  8043dc:	f800283a 	ret

008043e0 <readWord>:
short int readWord(short int fh) {
  8043e0:	defffb04 	addi	sp,sp,-20
  8043e4:	dfc00415 	stw	ra,16(sp)
  8043e8:	df000315 	stw	fp,12(sp)
  8043ec:	df000304 	addi	fp,sp,12
  8043f0:	e13ffe0d 	sth	r4,-8(fp)
	short int byte1, byte2;

	byte1 = alt_up_sd_card_read(fh);
  8043f4:	e13ffe0f 	ldh	r4,-8(fp)
  8043f8:	08198440 	call	819844 <alt_up_sd_card_read>
  8043fc:	e0bffd8d 	sth	r2,-10(fp)
	byte2 = alt_up_sd_card_read(fh);
  804400:	e13ffe0f 	ldh	r4,-8(fp)
  804404:	08198440 	call	819844 <alt_up_sd_card_read>
  804408:	e0bffd0d 	sth	r2,-12(fp)

	if (byte1 == -1 || byte2 == -1)
  80440c:	e0bffd8f 	ldh	r2,-10(fp)
  804410:	10bfffe0 	cmpeqi	r2,r2,-1
  804414:	1000031e 	bne	r2,zero,804424 <readWord+0x44>
  804418:	e0bffd0f 	ldh	r2,-12(fp)
  80441c:	10bfffd8 	cmpnei	r2,r2,-1
  804420:	1000031e 	bne	r2,zero,804430 <readWord+0x50>
		return -1;
  804424:	00bfffc4 	movi	r2,-1
  804428:	e0bfff15 	stw	r2,-4(fp)
  80442c:	00000b06 	br	80445c <readWord+0x7c>

	return ((unsigned short int)byte2 << 8) | ((unsigned short int)byte1 & 0x00FF);
  804430:	e0bffd0b 	ldhu	r2,-12(fp)
  804434:	10bfffcc 	andi	r2,r2,65535
  804438:	1004923a 	slli	r2,r2,8
  80443c:	1007883a 	mov	r3,r2
  804440:	e0bffd8b 	ldhu	r2,-10(fp)
  804444:	10803fcc 	andi	r2,r2,255
  804448:	1884b03a 	or	r2,r3,r2
  80444c:	10bfffcc 	andi	r2,r2,65535
  804450:	10a0001c 	xori	r2,r2,32768
  804454:	10a00004 	addi	r2,r2,-32768
  804458:	e0bfff15 	stw	r2,-4(fp)
  80445c:	e0bfff17 	ldw	r2,-4(fp)
}
  804460:	e037883a 	mov	sp,fp
  804464:	dfc00117 	ldw	ra,4(sp)
  804468:	df000017 	ldw	fp,0(sp)
  80446c:	dec00204 	addi	sp,sp,8
  804470:	f800283a 	ret

00804474 <readDWord>:

int readDWord(short int fh) {
  804474:	defffa04 	addi	sp,sp,-24
  804478:	dfc00515 	stw	ra,20(sp)
  80447c:	df000415 	stw	fp,16(sp)
  804480:	df000404 	addi	fp,sp,16
  804484:	e13ffe0d 	sth	r4,-8(fp)
	short int byte1, byte2, byte3, byte4;

	byte1 = alt_up_sd_card_read(fh);
  804488:	e13ffe0f 	ldh	r4,-8(fp)
  80448c:	08198440 	call	819844 <alt_up_sd_card_read>
  804490:	e0bffd8d 	sth	r2,-10(fp)
	byte2 = alt_up_sd_card_read(fh);
  804494:	e13ffe0f 	ldh	r4,-8(fp)
  804498:	08198440 	call	819844 <alt_up_sd_card_read>
  80449c:	e0bffd0d 	sth	r2,-12(fp)
	byte3 = alt_up_sd_card_read(fh);
  8044a0:	e13ffe0f 	ldh	r4,-8(fp)
  8044a4:	08198440 	call	819844 <alt_up_sd_card_read>
  8044a8:	e0bffc8d 	sth	r2,-14(fp)
	byte4 = alt_up_sd_card_read(fh);
  8044ac:	e13ffe0f 	ldh	r4,-8(fp)
  8044b0:	08198440 	call	819844 <alt_up_sd_card_read>
  8044b4:	e0bffc0d 	sth	r2,-16(fp)

	if (byte1 == -1 || byte2 == -1 || byte3 == -1 || byte4 == -1)
  8044b8:	e0bffd8f 	ldh	r2,-10(fp)
  8044bc:	10bfffe0 	cmpeqi	r2,r2,-1
  8044c0:	1000091e 	bne	r2,zero,8044e8 <readDWord+0x74>
  8044c4:	e0bffd0f 	ldh	r2,-12(fp)
  8044c8:	10bfffe0 	cmpeqi	r2,r2,-1
  8044cc:	1000061e 	bne	r2,zero,8044e8 <readDWord+0x74>
  8044d0:	e0bffc8f 	ldh	r2,-14(fp)
  8044d4:	10bfffe0 	cmpeqi	r2,r2,-1
  8044d8:	1000031e 	bne	r2,zero,8044e8 <readDWord+0x74>
  8044dc:	e0bffc0f 	ldh	r2,-16(fp)
  8044e0:	10bfffd8 	cmpnei	r2,r2,-1
  8044e4:	1000031e 	bne	r2,zero,8044f4 <readDWord+0x80>
			return -1;
  8044e8:	00bfffc4 	movi	r2,-1
  8044ec:	e0bfff15 	stw	r2,-4(fp)
  8044f0:	00000f06 	br	804530 <readDWord+0xbc>

	return ((unsigned short int)byte4 << 24) | ((unsigned short int)byte3 << 16) | ((unsigned short int)byte2 << 8) | (unsigned short int)byte1;
  8044f4:	e0bffc0b 	ldhu	r2,-16(fp)
  8044f8:	10bfffcc 	andi	r2,r2,65535
  8044fc:	1006963a 	slli	r3,r2,24
  804500:	e0bffc8b 	ldhu	r2,-14(fp)
  804504:	10bfffcc 	andi	r2,r2,65535
  804508:	1004943a 	slli	r2,r2,16
  80450c:	1886b03a 	or	r3,r3,r2
  804510:	e0bffd0b 	ldhu	r2,-12(fp)
  804514:	10bfffcc 	andi	r2,r2,65535
  804518:	1004923a 	slli	r2,r2,8
  80451c:	1886b03a 	or	r3,r3,r2
  804520:	e0bffd8b 	ldhu	r2,-10(fp)
  804524:	10bfffcc 	andi	r2,r2,65535
  804528:	1886b03a 	or	r3,r3,r2
  80452c:	e0ffff15 	stw	r3,-4(fp)
  804530:	e0bfff17 	ldw	r2,-4(fp)
}
  804534:	e037883a 	mov	sp,fp
  804538:	dfc00117 	ldw	ra,4(sp)
  80453c:	df000017 	ldw	fp,0(sp)
  804540:	dec00204 	addi	sp,sp,8
  804544:	f800283a 	ret

00804548 <getWavFileLength>:

unsigned int getWavFileLength(char *fileName) { // TBD: This function MUST be fixed - it currently returns an incorrect value, becuase - vals dont always mean it's done.
  804548:	defffb04 	addi	sp,sp,-20
  80454c:	dfc00415 	stw	ra,16(sp)
  804550:	df000315 	stw	fp,12(sp)
  804554:	df000304 	addi	fp,sp,12
  804558:	e13fff15 	stw	r4,-4(fp)
	unsigned int fileLength = 0;
  80455c:	e03ffe15 	stw	zero,-8(fp)

	short int fileHandle = openFile(fileName);
  804560:	e13fff17 	ldw	r4,-4(fp)
  804564:	080433c0 	call	80433c <openFile>
  804568:	e0bffd8d 	sth	r2,-10(fp)
	if (fileHandle == -1) {
  80456c:	e0bffd8f 	ldh	r2,-10(fp)
  804570:	10bfffd8 	cmpnei	r2,r2,-1
  804574:	1000041e 	bne	r2,zero,804588 <getWavFileLength+0x40>
		printf("Error occurred, unable to open file in 'getFileLength' with name: %s", fileName);
  804578:	010020b4 	movhi	r4,130
  80457c:	212f0304 	addi	r4,r4,-17396
  804580:	e17fff17 	ldw	r5,-4(fp)
  804584:	08096340 	call	809634 <printf>
	}

	readPastWavHeader(fileHandle); // to get wav file length, dont bypass header i think..
  804588:	e13ffd8f 	ldh	r4,-10(fp)
  80458c:	08046000 	call	804600 <readPastWavHeader>

	short int wordRead = readWord(fileHandle);
  804590:	e13ffd8f 	ldh	r4,-10(fp)
  804594:	08043e00 	call	8043e0 <readWord>
  804598:	e0bffd0d 	sth	r2,-12(fp)
	//unsigned char firstByte = 0x0000FFFF | wordRead;
	//unsigned char secondByte = 0x0000FFFF | (wordRead >> 8);
	while ((short int)wordRead >= 0) {
  80459c:	00000606 	br	8045b8 <getWavFileLength+0x70>
		//printf("%c", (unsigned char)byteRead);
		fileLength += 2;
  8045a0:	e0bffe17 	ldw	r2,-8(fp)
  8045a4:	10800084 	addi	r2,r2,2
  8045a8:	e0bffe15 	stw	r2,-8(fp)
		wordRead = readWord(fileHandle);
  8045ac:	e13ffd8f 	ldh	r4,-10(fp)
  8045b0:	08043e00 	call	8043e0 <readWord>
  8045b4:	e0bffd0d 	sth	r2,-12(fp)
	readPastWavHeader(fileHandle); // to get wav file length, dont bypass header i think..

	short int wordRead = readWord(fileHandle);
	//unsigned char firstByte = 0x0000FFFF | wordRead;
	//unsigned char secondByte = 0x0000FFFF | (wordRead >> 8);
	while ((short int)wordRead >= 0) {
  8045b8:	e0bffd0f 	ldh	r2,-12(fp)
  8045bc:	1004403a 	cmpge	r2,r2,zero
  8045c0:	103ff71e 	bne	r2,zero,8045a0 <getWavFileLength+0x58>
		//printf("%c", (unsigned char)byteRead);
		fileLength += 2;
		wordRead = readWord(fileHandle);
	}
	if ((short int)wordRead <= -1) {
  8045c4:	e0bffd0f 	ldh	r2,-12(fp)
  8045c8:	1004403a 	cmpge	r2,r2,zero
  8045cc:	1000041e 	bne	r2,zero,8045e0 <getWavFileLength+0x98>
		printf("Error reading bytes from %s\n", fileName);
  8045d0:	010020b4 	movhi	r4,130
  8045d4:	212f1504 	addi	r4,r4,-17324
  8045d8:	e17fff17 	ldw	r5,-4(fp)
  8045dc:	08096340 	call	809634 <printf>
	}

	closeFile(fileHandle);
  8045e0:	e13ffd8f 	ldh	r4,-10(fp)
  8045e4:	080437c0 	call	80437c <closeFile>
	return fileLength;
  8045e8:	e0bffe17 	ldw	r2,-8(fp)
}
  8045ec:	e037883a 	mov	sp,fp
  8045f0:	dfc00117 	ldw	ra,4(sp)
  8045f4:	df000017 	ldw	fp,0(sp)
  8045f8:	dec00204 	addi	sp,sp,8
  8045fc:	f800283a 	ret

00804600 <readPastWavHeader>:

void readPastWavHeader(short int handle) {
  804600:	defffc04 	addi	sp,sp,-16
  804604:	dfc00315 	stw	ra,12(sp)
  804608:	df000215 	stw	fp,8(sp)
  80460c:	df000204 	addi	fp,sp,8
  804610:	e13fff0d 	sth	r4,-4(fp)
	int i;
	for (i = 0; i < 44; i++) {
  804614:	e03ffe15 	stw	zero,-8(fp)
  804618:	00000506 	br	804630 <readPastWavHeader+0x30>
		readByte(handle);
  80461c:	e13fff0f 	ldh	r4,-4(fp)
  804620:	08043ac0 	call	8043ac <readByte>
	return fileLength;
}

void readPastWavHeader(short int handle) {
	int i;
	for (i = 0; i < 44; i++) {
  804624:	e0bffe17 	ldw	r2,-8(fp)
  804628:	10800044 	addi	r2,r2,1
  80462c:	e0bffe15 	stw	r2,-8(fp)
  804630:	e0bffe17 	ldw	r2,-8(fp)
  804634:	10800b10 	cmplti	r2,r2,44
  804638:	103ff81e 	bne	r2,zero,80461c <readPastWavHeader+0x1c>
		readByte(handle);
	}
}
  80463c:	e037883a 	mov	sp,fp
  804640:	dfc00117 	ldw	ra,4(sp)
  804644:	df000017 	ldw	fp,0(sp)
  804648:	dec00204 	addi	sp,sp,8
  80464c:	f800283a 	ret

00804650 <initSharks>:
Shark *deadSharkList = NULL;
unsigned int sharkCount = 0;
Shark sharkArray[NUM_SHARKS];
int sharkArrayCursor = 0;;

void initSharks(void) {
  804650:	defffd04 	addi	sp,sp,-12
  804654:	df000215 	stw	fp,8(sp)
  804658:	df000204 	addi	fp,sp,8
	int i;
	Shark *cursor;
	for (i = 0; i < NUM_SHARKS; i++) {
  80465c:	e03fff15 	stw	zero,-4(fp)
  804660:	00000d06 	br	804698 <initSharks+0x48>
		cursor = &(sharkArray[i]);
  804664:	e0bfff17 	ldw	r2,-4(fp)
  804668:	10800a24 	muli	r2,r2,40
  80466c:	1007883a 	mov	r3,r2
  804670:	008020b4 	movhi	r2,130
  804674:	1088ae04 	addi	r2,r2,8888
  804678:	1885883a 	add	r2,r3,r2
  80467c:	e0bffe15 	stw	r2,-8(fp)
		cursor->state = DEAD;
  804680:	e0fffe17 	ldw	r3,-8(fp)
  804684:	008000c4 	movi	r2,3
  804688:	1880090d 	sth	r2,36(r3)
int sharkArrayCursor = 0;;

void initSharks(void) {
	int i;
	Shark *cursor;
	for (i = 0; i < NUM_SHARKS; i++) {
  80468c:	e0bfff17 	ldw	r2,-4(fp)
  804690:	10800044 	addi	r2,r2,1
  804694:	e0bfff15 	stw	r2,-4(fp)
  804698:	e0bfff17 	ldw	r2,-4(fp)
  80469c:	10800810 	cmplti	r2,r2,32
  8046a0:	103ff01e 	bne	r2,zero,804664 <initSharks+0x14>
		cursor = &(sharkArray[i]);
		cursor->state = DEAD;
	}
}
  8046a4:	e037883a 	mov	sp,fp
  8046a8:	df000017 	ldw	fp,0(sp)
  8046ac:	dec00104 	addi	sp,sp,4
  8046b0:	f800283a 	ret

008046b4 <getFreeShark>:

Shark *getFreeShark(void) {
  8046b4:	defffd04 	addi	sp,sp,-12
  8046b8:	df000215 	stw	fp,8(sp)
  8046bc:	df000204 	addi	fp,sp,8
	int i;
	for (i = 0; i < NUM_SHARKS; i++) {
  8046c0:	e03ffe15 	stw	zero,-8(fp)
  8046c4:	00001706 	br	804724 <getFreeShark+0x70>
		if (sharkArray[i].state == DEAD) {
  8046c8:	e0bffe17 	ldw	r2,-8(fp)
  8046cc:	00c020b4 	movhi	r3,130
  8046d0:	18c8ae04 	addi	r3,r3,8888
  8046d4:	10800a24 	muli	r2,r2,40
  8046d8:	10c5883a 	add	r2,r2,r3
  8046dc:	10800904 	addi	r2,r2,36
  8046e0:	1080000b 	ldhu	r2,0(r2)
  8046e4:	10bfffcc 	andi	r2,r2,65535
  8046e8:	10a0001c 	xori	r2,r2,32768
  8046ec:	10a00004 	addi	r2,r2,-32768
  8046f0:	108000d8 	cmpnei	r2,r2,3
  8046f4:	1000081e 	bne	r2,zero,804718 <getFreeShark+0x64>
			return &(sharkArray[i]);
  8046f8:	e0bffe17 	ldw	r2,-8(fp)
  8046fc:	10800a24 	muli	r2,r2,40
  804700:	1007883a 	mov	r3,r2
  804704:	008020b4 	movhi	r2,130
  804708:	1088ae04 	addi	r2,r2,8888
  80470c:	1887883a 	add	r3,r3,r2
  804710:	e0ffff15 	stw	r3,-4(fp)
  804714:	00000706 	br	804734 <getFreeShark+0x80>
	}
}

Shark *getFreeShark(void) {
	int i;
	for (i = 0; i < NUM_SHARKS; i++) {
  804718:	e0bffe17 	ldw	r2,-8(fp)
  80471c:	10800044 	addi	r2,r2,1
  804720:	e0bffe15 	stw	r2,-8(fp)
  804724:	e0bffe17 	ldw	r2,-8(fp)
  804728:	10800810 	cmplti	r2,r2,32
  80472c:	103fe61e 	bne	r2,zero,8046c8 <getFreeShark+0x14>
		if (sharkArray[i].state == DEAD) {
			return &(sharkArray[i]);
		}
	}
	return NULL;
  804730:	e03fff15 	stw	zero,-4(fp)
  804734:	e0bfff17 	ldw	r2,-4(fp)
}
  804738:	e037883a 	mov	sp,fp
  80473c:	df000017 	ldw	fp,0(sp)
  804740:	dec00104 	addi	sp,sp,4
  804744:	f800283a 	ret

00804748 <drawShark>:

void drawShark(Shark *shark) {
  804748:	defffd04 	addi	sp,sp,-12
  80474c:	dfc00215 	stw	ra,8(sp)
  804750:	df000115 	stw	fp,4(sp)
  804754:	df000104 	addi	fp,sp,4
  804758:	e13fff15 	stw	r4,-4(fp)
	if (shark != NULL) {
  80475c:	e0bfff17 	ldw	r2,-4(fp)
  804760:	1005003a 	cmpeq	r2,r2,zero
  804764:	1000071e 	bne	r2,zero,804784 <drawShark+0x3c>
		drawBmp(sharkBmp, shark->x, shark->y);
  804768:	d1271717 	ldw	r4,-25508(gp)
  80476c:	e0bfff17 	ldw	r2,-4(fp)
  804770:	11400017 	ldw	r5,0(r2)
  804774:	e0bfff17 	ldw	r2,-4(fp)
  804778:	11800217 	ldw	r6,8(r2)
  80477c:	08015f80 	call	8015f8 <drawBmp>
  804780:	00000306 	br	804790 <drawShark+0x48>
	} else {
		printf("Attempt to draw null shark.\n");
  804784:	010020b4 	movhi	r4,130
  804788:	212f1d04 	addi	r4,r4,-17292
  80478c:	080974c0 	call	80974c <puts>
	}
}
  804790:	e037883a 	mov	sp,fp
  804794:	dfc00117 	ldw	ra,4(sp)
  804798:	df000017 	ldw	fp,0(sp)
  80479c:	dec00204 	addi	sp,sp,8
  8047a0:	f800283a 	ret

008047a4 <eraseShark>:

void eraseShark(Shark *shark){
  8047a4:	defffd04 	addi	sp,sp,-12
  8047a8:	dfc00215 	stw	ra,8(sp)
  8047ac:	df000115 	stw	fp,4(sp)
  8047b0:	df000104 	addi	fp,sp,4
  8047b4:	e13fff15 	stw	r4,-4(fp)
	if (shark != NULL) {
  8047b8:	e0bfff17 	ldw	r2,-4(fp)
  8047bc:	1005003a 	cmpeq	r2,r2,zero
  8047c0:	1000071e 	bne	r2,zero,8047e0 <eraseShark+0x3c>
		eraseBmp(sharkBmp, shark->prevX, shark->prevY);
  8047c4:	d1271717 	ldw	r4,-25508(gp)
  8047c8:	e0bfff17 	ldw	r2,-4(fp)
  8047cc:	11400117 	ldw	r5,4(r2)
  8047d0:	e0bfff17 	ldw	r2,-4(fp)
  8047d4:	11800317 	ldw	r6,12(r2)
  8047d8:	08017640 	call	801764 <eraseBmp>
  8047dc:	00000306 	br	8047ec <eraseShark+0x48>
	} else {
		printf("Attempt to erase null shark.\n");
  8047e0:	010020b4 	movhi	r4,130
  8047e4:	212f2404 	addi	r4,r4,-17264
  8047e8:	080974c0 	call	80974c <puts>
	}
}
  8047ec:	e037883a 	mov	sp,fp
  8047f0:	dfc00117 	ldw	ra,4(sp)
  8047f4:	df000017 	ldw	fp,0(sp)
  8047f8:	dec00204 	addi	sp,sp,8
  8047fc:	f800283a 	ret

00804800 <moveShark>:

void moveShark(Shark *shark) {
  804800:	defffc04 	addi	sp,sp,-16
  804804:	dfc00315 	stw	ra,12(sp)
  804808:	df000215 	stw	fp,8(sp)
  80480c:	df000204 	addi	fp,sp,8
  804810:	e13fff15 	stw	r4,-4(fp)
	if (shark == NULL) {
  804814:	e0bfff17 	ldw	r2,-4(fp)
  804818:	1004c03a 	cmpne	r2,r2,zero
  80481c:	1000041e 	bne	r2,zero,804830 <moveShark+0x30>
		printf("Attempt to move null shark.\n");
  804820:	010020b4 	movhi	r4,130
  804824:	212f2c04 	addi	r4,r4,-17232
  804828:	080974c0 	call	80974c <puts>
		return;
  80482c:	00003806 	br	804910 <moveShark+0x110>
	}

	shark->prevX = shark->x;
  804830:	e0bfff17 	ldw	r2,-4(fp)
  804834:	10c00017 	ldw	r3,0(r2)
  804838:	e0bfff17 	ldw	r2,-4(fp)
  80483c:	10c00115 	stw	r3,4(r2)
	shark->prevY = shark->y;
  804840:	e0bfff17 	ldw	r2,-4(fp)
  804844:	10c00217 	ldw	r3,8(r2)
  804848:	e0bfff17 	ldw	r2,-4(fp)
  80484c:	10c00315 	stw	r3,12(r2)

	shark->count++;
  804850:	e0bfff17 	ldw	r2,-4(fp)
  804854:	10800517 	ldw	r2,20(r2)
  804858:	10c00044 	addi	r3,r2,1
  80485c:	e0bfff17 	ldw	r2,-4(fp)
  804860:	10c00515 	stw	r3,20(r2)

	if (shark->count >= shark->freq) {
  804864:	e0bfff17 	ldw	r2,-4(fp)
  804868:	10c00517 	ldw	r3,20(r2)
  80486c:	e0bfff17 	ldw	r2,-4(fp)
  804870:	10800417 	ldw	r2,16(r2)
  804874:	18800a16 	blt	r3,r2,8048a0 <moveShark+0xa0>
		shark->count = 0;
  804878:	e0bfff17 	ldw	r2,-4(fp)
  80487c:	10000515 	stw	zero,20(r2)
		createBullet(SHARKBULLET, shark->x + BULLET_LENGTH, shark->y + SHARK_LASER_LOCATION);
  804880:	e0bfff17 	ldw	r2,-4(fp)
  804884:	10800017 	ldw	r2,0(r2)
  804888:	114000c4 	addi	r5,r2,3
  80488c:	e0bfff17 	ldw	r2,-4(fp)
  804890:	10800217 	ldw	r2,8(r2)
  804894:	11800344 	addi	r6,r2,13
  804898:	01000044 	movi	r4,1
  80489c:	08018800 	call	801880 <createBullet>
//		shark->type = RECENTLYDEAD;
//	} else if ((shark->y >= SCREEN_HEIGHT) || (shark->y <= -SHARK_HEIGHT)) {
//		shark->type = RECENTLYDEAD;
//	}

	Displacement *disp = shark->displacement;
  8048a0:	e0bfff17 	ldw	r2,-4(fp)
  8048a4:	10800817 	ldw	r2,32(r2)
  8048a8:	e0bffe15 	stw	r2,-8(fp)
	shark->x += disp->dx;
  8048ac:	e0bfff17 	ldw	r2,-4(fp)
  8048b0:	10c00017 	ldw	r3,0(r2)
  8048b4:	e0bffe17 	ldw	r2,-8(fp)
  8048b8:	1080000b 	ldhu	r2,0(r2)
  8048bc:	10bfffcc 	andi	r2,r2,65535
  8048c0:	10a0001c 	xori	r2,r2,32768
  8048c4:	10a00004 	addi	r2,r2,-32768
  8048c8:	1887883a 	add	r3,r3,r2
  8048cc:	e0bfff17 	ldw	r2,-4(fp)
  8048d0:	10c00015 	stw	r3,0(r2)
	shark->y += disp->dy;
  8048d4:	e0bfff17 	ldw	r2,-4(fp)
  8048d8:	10c00217 	ldw	r3,8(r2)
  8048dc:	e0bffe17 	ldw	r2,-8(fp)
  8048e0:	1080008b 	ldhu	r2,2(r2)
  8048e4:	10bfffcc 	andi	r2,r2,65535
  8048e8:	10a0001c 	xori	r2,r2,32768
  8048ec:	10a00004 	addi	r2,r2,-32768
  8048f0:	1887883a 	add	r3,r3,r2
  8048f4:	e0bfff17 	ldw	r2,-4(fp)
  8048f8:	10c00215 	stw	r3,8(r2)
	shark->displacement = shark->displacement->next;
  8048fc:	e0bfff17 	ldw	r2,-4(fp)
  804900:	10800817 	ldw	r2,32(r2)
  804904:	10c00117 	ldw	r3,4(r2)
  804908:	e0bfff17 	ldw	r2,-4(fp)
  80490c:	10c00815 	stw	r3,32(r2)
}
  804910:	e037883a 	mov	sp,fp
  804914:	dfc00117 	ldw	ra,4(sp)
  804918:	df000017 	ldw	fp,0(sp)
  80491c:	dec00204 	addi	sp,sp,8
  804920:	f800283a 	ret

00804924 <moveAllSharks>:

void moveAllSharks(void) {
  804924:	defffd04 	addi	sp,sp,-12
  804928:	dfc00215 	stw	ra,8(sp)
  80492c:	df000115 	stw	fp,4(sp)
  804930:	df000104 	addi	fp,sp,4
	Shark *cursor = sharkList;
  804934:	d0a72f17 	ldw	r2,-25412(gp)
  804938:	e0bfff15 	stw	r2,-4(fp)
	while (cursor != NULL) {
  80493c:	00000506 	br	804954 <moveAllSharks+0x30>
		moveShark(cursor);
  804940:	e13fff17 	ldw	r4,-4(fp)
  804944:	08048000 	call	804800 <moveShark>
		cursor = cursor->next;
  804948:	e0bfff17 	ldw	r2,-4(fp)
  80494c:	10800617 	ldw	r2,24(r2)
  804950:	e0bfff15 	stw	r2,-4(fp)
	shark->displacement = shark->displacement->next;
}

void moveAllSharks(void) {
	Shark *cursor = sharkList;
	while (cursor != NULL) {
  804954:	e0bfff17 	ldw	r2,-4(fp)
  804958:	1004c03a 	cmpne	r2,r2,zero
  80495c:	103ff81e 	bne	r2,zero,804940 <moveAllSharks+0x1c>
		moveShark(cursor);
		cursor = cursor->next;
	}
}
  804960:	e037883a 	mov	sp,fp
  804964:	dfc00117 	ldw	ra,4(sp)
  804968:	df000017 	ldw	fp,0(sp)
  80496c:	dec00204 	addi	sp,sp,8
  804970:	f800283a 	ret

00804974 <drawAllSharks>:

void drawAllSharks(void) {
  804974:	defffd04 	addi	sp,sp,-12
  804978:	dfc00215 	stw	ra,8(sp)
  80497c:	df000115 	stw	fp,4(sp)
  804980:	df000104 	addi	fp,sp,4
	Shark *cursor = sharkList;
  804984:	d0a72f17 	ldw	r2,-25412(gp)
  804988:	e0bfff15 	stw	r2,-4(fp)
	while (cursor != NULL) {
  80498c:	00000506 	br	8049a4 <drawAllSharks+0x30>
		drawShark(cursor);
  804990:	e13fff17 	ldw	r4,-4(fp)
  804994:	08047480 	call	804748 <drawShark>
		cursor = cursor->next;
  804998:	e0bfff17 	ldw	r2,-4(fp)
  80499c:	10800617 	ldw	r2,24(r2)
  8049a0:	e0bfff15 	stw	r2,-4(fp)
	}
}

void drawAllSharks(void) {
	Shark *cursor = sharkList;
	while (cursor != NULL) {
  8049a4:	e0bfff17 	ldw	r2,-4(fp)
  8049a8:	1004c03a 	cmpne	r2,r2,zero
  8049ac:	103ff81e 	bne	r2,zero,804990 <drawAllSharks+0x1c>
		drawShark(cursor);
		cursor = cursor->next;
	}
}
  8049b0:	e037883a 	mov	sp,fp
  8049b4:	dfc00117 	ldw	ra,4(sp)
  8049b8:	df000017 	ldw	fp,0(sp)
  8049bc:	dec00204 	addi	sp,sp,8
  8049c0:	f800283a 	ret

008049c4 <eraseAllSharks>:

void eraseAllSharks(void) {
  8049c4:	defffd04 	addi	sp,sp,-12
  8049c8:	dfc00215 	stw	ra,8(sp)
  8049cc:	df000115 	stw	fp,4(sp)
  8049d0:	df000104 	addi	fp,sp,4
	Shark *cursor = sharkList;
  8049d4:	d0a72f17 	ldw	r2,-25412(gp)
  8049d8:	e0bfff15 	stw	r2,-4(fp)
	// TODO: erase recently dead list
	while (cursor != NULL) {
  8049dc:	00000506 	br	8049f4 <eraseAllSharks+0x30>
		eraseShark(cursor);
  8049e0:	e13fff17 	ldw	r4,-4(fp)
  8049e4:	08047a40 	call	8047a4 <eraseShark>
		cursor = cursor->next;
  8049e8:	e0bfff17 	ldw	r2,-4(fp)
  8049ec:	10800617 	ldw	r2,24(r2)
  8049f0:	e0bfff15 	stw	r2,-4(fp)
}

void eraseAllSharks(void) {
	Shark *cursor = sharkList;
	// TODO: erase recently dead list
	while (cursor != NULL) {
  8049f4:	e0bfff17 	ldw	r2,-4(fp)
  8049f8:	1004c03a 	cmpne	r2,r2,zero
  8049fc:	103ff81e 	bne	r2,zero,8049e0 <eraseAllSharks+0x1c>
		eraseShark(cursor);
		cursor = cursor->next;
	}
}
  804a00:	e037883a 	mov	sp,fp
  804a04:	dfc00117 	ldw	ra,4(sp)
  804a08:	df000017 	ldw	fp,0(sp)
  804a0c:	dec00204 	addi	sp,sp,8
  804a10:	f800283a 	ret

00804a14 <createShark>:

void createShark(int sudoRandomSeed, int x, int y, Displacement *displacement) {
  804a14:	defff904 	addi	sp,sp,-28
  804a18:	dfc00615 	stw	ra,24(sp)
  804a1c:	df000515 	stw	fp,20(sp)
  804a20:	df000504 	addi	fp,sp,20
  804a24:	e13ffc15 	stw	r4,-16(fp)
  804a28:	e17ffd15 	stw	r5,-12(fp)
  804a2c:	e1bffe15 	stw	r6,-8(fp)
  804a30:	e1ffff15 	stw	r7,-4(fp)
	if (displacement == NULL) {
  804a34:	e0bfff17 	ldw	r2,-4(fp)
  804a38:	1004c03a 	cmpne	r2,r2,zero
  804a3c:	1000041e 	bne	r2,zero,804a50 <createShark+0x3c>
		printf("Attempt to create shark with null displacement.\n");
  804a40:	010020b4 	movhi	r4,130
  804a44:	212f3304 	addi	r4,r4,-17204
  804a48:	080974c0 	call	80974c <puts>
		return;
  804a4c:	00003506 	br	804b24 <createShark+0x110>
	}

	//Shark *newShark = malloc(sizeof(Shark));
	Shark *newShark = getFreeShark();
  804a50:	08046b40 	call	8046b4 <getFreeShark>
  804a54:	e0bffb15 	stw	r2,-20(fp)
	if (newShark == NULL) {
  804a58:	e0bffb17 	ldw	r2,-20(fp)
  804a5c:	1005003a 	cmpeq	r2,r2,zero
  804a60:	1000301e 	bne	r2,zero,804b24 <createShark+0x110>
		return;
	}

	newShark->state = LIVE;
  804a64:	e0fffb17 	ldw	r3,-20(fp)
  804a68:	00800044 	movi	r2,1
  804a6c:	1880090d 	sth	r2,36(r3)

	newShark->x = x;
  804a70:	e0fffb17 	ldw	r3,-20(fp)
  804a74:	e0bffd17 	ldw	r2,-12(fp)
  804a78:	18800015 	stw	r2,0(r3)
	newShark->y = y;
  804a7c:	e0fffb17 	ldw	r3,-20(fp)
  804a80:	e0bffe17 	ldw	r2,-8(fp)
  804a84:	18800215 	stw	r2,8(r3)
	newShark->prevX = x;
  804a88:	e0fffb17 	ldw	r3,-20(fp)
  804a8c:	e0bffd17 	ldw	r2,-12(fp)
  804a90:	18800115 	stw	r2,4(r3)
	newShark->prevY = y;
  804a94:	e0fffb17 	ldw	r3,-20(fp)
  804a98:	e0bffe17 	ldw	r2,-8(fp)
  804a9c:	18800315 	stw	r2,12(r3)
	newShark->displacement = (Displacement *)&arcDisplacementFunction;
  804aa0:	e0fffb17 	ldw	r3,-20(fp)
  804aa4:	008020b4 	movhi	r2,130
  804aa8:	1087ae04 	addi	r2,r2,7864
  804aac:	18800815 	stw	r2,32(r3)
	newShark->prev = NULL;
  804ab0:	e0bffb17 	ldw	r2,-20(fp)
  804ab4:	10000715 	stw	zero,28(r2)
	if (sharkList == NULL) {
  804ab8:	d0a72f17 	ldw	r2,-25412(gp)
  804abc:	1004c03a 	cmpne	r2,r2,zero
  804ac0:	1000051e 	bne	r2,zero,804ad8 <createShark+0xc4>
		sharkList = newShark;
  804ac4:	e0bffb17 	ldw	r2,-20(fp)
  804ac8:	d0a72f15 	stw	r2,-25412(gp)
		newShark->next = NULL;
  804acc:	e0bffb17 	ldw	r2,-20(fp)
  804ad0:	10000615 	stw	zero,24(r2)
  804ad4:	00000806 	br	804af8 <createShark+0xe4>
	} else {
		sharkList->prev = newShark;
  804ad8:	d0e72f17 	ldw	r3,-25412(gp)
  804adc:	e0bffb17 	ldw	r2,-20(fp)
  804ae0:	18800715 	stw	r2,28(r3)
		newShark->next = sharkList;
  804ae4:	d0e72f17 	ldw	r3,-25412(gp)
  804ae8:	e0bffb17 	ldw	r2,-20(fp)
  804aec:	10c00615 	stw	r3,24(r2)
		sharkList = newShark;
  804af0:	e0bffb17 	ldw	r2,-20(fp)
  804af4:	d0a72f15 	stw	r2,-25412(gp)
	}
	newShark->freq = (sudoRandomSeed % 10) + PLAYER_HEIGHT + 1;
  804af8:	e13ffc17 	ldw	r4,-16(fp)
  804afc:	01400284 	movi	r5,10
  804b00:	08085f80 	call	8085f8 <__modsi3>
  804b04:	10c007c4 	addi	r3,r2,31
  804b08:	e0bffb17 	ldw	r2,-20(fp)
  804b0c:	10c00415 	stw	r3,16(r2)
	newShark->count = 0;
  804b10:	e0bffb17 	ldw	r2,-20(fp)
  804b14:	10000515 	stw	zero,20(r2)
	sharkCount++;
  804b18:	d0a73117 	ldw	r2,-25404(gp)
  804b1c:	10800044 	addi	r2,r2,1
  804b20:	d0a73115 	stw	r2,-25404(gp)
}
  804b24:	e037883a 	mov	sp,fp
  804b28:	dfc00117 	ldw	ra,4(sp)
  804b2c:	df000017 	ldw	fp,0(sp)
  804b30:	dec00204 	addi	sp,sp,8
  804b34:	f800283a 	ret

00804b38 <killShark>:

void killShark(Shark *shark) {
  804b38:	defffb04 	addi	sp,sp,-20
  804b3c:	dfc00415 	stw	ra,16(sp)
  804b40:	df000315 	stw	fp,12(sp)
  804b44:	df000304 	addi	fp,sp,12
  804b48:	e13fff15 	stw	r4,-4(fp)
	if (shark == NULL) {
  804b4c:	e0bfff17 	ldw	r2,-4(fp)
  804b50:	1004c03a 	cmpne	r2,r2,zero
  804b54:	1000041e 	bne	r2,zero,804b68 <killShark+0x30>
		printf("Attempt to kill null shark.\n");
  804b58:	010020b4 	movhi	r4,130
  804b5c:	212f3f04 	addi	r4,r4,-17156
  804b60:	080974c0 	call	80974c <puts>
		return;
  804b64:	00002106 	br	804bec <killShark+0xb4>
	}

	shark->state = RECENTLY_DEAD;
  804b68:	e0ffff17 	ldw	r3,-4(fp)
  804b6c:	00800084 	movi	r2,2
  804b70:	1880090d 	sth	r2,36(r3)

	Shark *previousShark = shark->prev;
  804b74:	e0bfff17 	ldw	r2,-4(fp)
  804b78:	10800717 	ldw	r2,28(r2)
  804b7c:	e0bffe15 	stw	r2,-8(fp)
	Shark *nextShark = shark->next;
  804b80:	e0bfff17 	ldw	r2,-4(fp)
  804b84:	10800617 	ldw	r2,24(r2)
  804b88:	e0bffd15 	stw	r2,-12(fp)
//		deadSharkList->prev = shark;
//		shark->next = deadSharkList;
//		deadSharkList = shark;
//	}

	playSharkDeath();
  804b8c:	0800bcc0 	call	800bcc <playSharkDeath>
	// Need to erase now because we free the shark
	eraseShark(shark);
  804b90:	e13fff17 	ldw	r4,-4(fp)
  804b94:	08047a40 	call	8047a4 <eraseShark>
	// TODO: increase player score

	if (previousShark != NULL) {
  804b98:	e0bffe17 	ldw	r2,-8(fp)
  804b9c:	1005003a 	cmpeq	r2,r2,zero
  804ba0:	1000041e 	bne	r2,zero,804bb4 <killShark+0x7c>
		// Not killing first shark
		previousShark->next = nextShark;
  804ba4:	e0fffe17 	ldw	r3,-8(fp)
  804ba8:	e0bffd17 	ldw	r2,-12(fp)
  804bac:	18800615 	stw	r2,24(r3)
  804bb0:	00000206 	br	804bbc <killShark+0x84>
	} else {
		// Killing first shark
		sharkList = nextShark;
  804bb4:	e0bffd17 	ldw	r2,-12(fp)
  804bb8:	d0a72f15 	stw	r2,-25412(gp)
	}

	if (nextShark != NULL) {
  804bbc:	e0bffd17 	ldw	r2,-12(fp)
  804bc0:	1005003a 	cmpeq	r2,r2,zero
  804bc4:	1000031e 	bne	r2,zero,804bd4 <killShark+0x9c>
		// Not killing last shark
		nextShark->prev = previousShark;
  804bc8:	e0fffd17 	ldw	r3,-12(fp)
  804bcc:	e0bffe17 	ldw	r2,-8(fp)
  804bd0:	18800715 	stw	r2,28(r3)
	} else {
		// Killing last shark
	}
	sharkCount--;
  804bd4:	d0a73117 	ldw	r2,-25404(gp)
  804bd8:	10bfffc4 	addi	r2,r2,-1
  804bdc:	d0a73115 	stw	r2,-25404(gp)
	updateCurrentPlayerScore(250);
  804be0:	01003e84 	movi	r4,250
  804be4:	0803d700 	call	803d70 <updateCurrentPlayerScore>
	drawInGameInfo();
  804be8:	08040800 	call	804080 <drawInGameInfo>
}
  804bec:	e037883a 	mov	sp,fp
  804bf0:	dfc00117 	ldw	ra,4(sp)
  804bf4:	df000017 	ldw	fp,0(sp)
  804bf8:	dec00204 	addi	sp,sp,8
  804bfc:	f800283a 	ret

00804c00 <cleanupDeadSharks>:

void cleanupDeadSharks() {
  804c00:	defffd04 	addi	sp,sp,-12
  804c04:	dfc00215 	stw	ra,8(sp)
  804c08:	df000115 	stw	fp,4(sp)
  804c0c:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < NUM_SHARKS; i++) {
  804c10:	e03fff15 	stw	zero,-4(fp)
  804c14:	00003906 	br	804cfc <cleanupDeadSharks+0xfc>
		if (sharkArray[i].state == RECENTLY_DEAD) {
  804c18:	e0bfff17 	ldw	r2,-4(fp)
  804c1c:	00c020b4 	movhi	r3,130
  804c20:	18c8ae04 	addi	r3,r3,8888
  804c24:	10800a24 	muli	r2,r2,40
  804c28:	10c5883a 	add	r2,r2,r3
  804c2c:	10800904 	addi	r2,r2,36
  804c30:	1080000b 	ldhu	r2,0(r2)
  804c34:	10bfffcc 	andi	r2,r2,65535
  804c38:	10a0001c 	xori	r2,r2,32768
  804c3c:	10a00004 	addi	r2,r2,-32768
  804c40:	10800098 	cmpnei	r2,r2,2
  804c44:	10002a1e 	bne	r2,zero,804cf0 <cleanupDeadSharks+0xf0>
			sharkArray[i].state = DEAD;
  804c48:	e0bfff17 	ldw	r2,-4(fp)
  804c4c:	00c020b4 	movhi	r3,130
  804c50:	18c8ae04 	addi	r3,r3,8888
  804c54:	10800a24 	muli	r2,r2,40
  804c58:	10c5883a 	add	r2,r2,r3
  804c5c:	10c00904 	addi	r3,r2,36
  804c60:	008000c4 	movi	r2,3
  804c64:	1880000d 	sth	r2,0(r3)
			sharkArray[i].prevX = sharkArray[i].x;
  804c68:	e17fff17 	ldw	r5,-4(fp)
  804c6c:	e0bfff17 	ldw	r2,-4(fp)
  804c70:	00c020b4 	movhi	r3,130
  804c74:	18c8ae04 	addi	r3,r3,8888
  804c78:	10800a24 	muli	r2,r2,40
  804c7c:	10c5883a 	add	r2,r2,r3
  804c80:	11000017 	ldw	r4,0(r2)
  804c84:	00c020b4 	movhi	r3,130
  804c88:	18c8ae04 	addi	r3,r3,8888
  804c8c:	28800a24 	muli	r2,r5,40
  804c90:	10c5883a 	add	r2,r2,r3
  804c94:	10800104 	addi	r2,r2,4
  804c98:	11000015 	stw	r4,0(r2)
			sharkArray[i].prevY = sharkArray[i].y;
  804c9c:	e17fff17 	ldw	r5,-4(fp)
  804ca0:	e0bfff17 	ldw	r2,-4(fp)
  804ca4:	00c020b4 	movhi	r3,130
  804ca8:	18c8ae04 	addi	r3,r3,8888
  804cac:	10800a24 	muli	r2,r2,40
  804cb0:	10c5883a 	add	r2,r2,r3
  804cb4:	10800204 	addi	r2,r2,8
  804cb8:	11000017 	ldw	r4,0(r2)
  804cbc:	00c020b4 	movhi	r3,130
  804cc0:	18c8ae04 	addi	r3,r3,8888
  804cc4:	28800a24 	muli	r2,r5,40
  804cc8:	10c5883a 	add	r2,r2,r3
  804ccc:	10800304 	addi	r2,r2,12
  804cd0:	11000015 	stw	r4,0(r2)
			eraseShark(&(sharkArray[i]));
  804cd4:	e0bfff17 	ldw	r2,-4(fp)
  804cd8:	10800a24 	muli	r2,r2,40
  804cdc:	1007883a 	mov	r3,r2
  804ce0:	008020b4 	movhi	r2,130
  804ce4:	1088ae04 	addi	r2,r2,8888
  804ce8:	1889883a 	add	r4,r3,r2
  804cec:	08047a40 	call	8047a4 <eraseShark>
	drawInGameInfo();
}

void cleanupDeadSharks() {
	int i;
	for (i = 0; i < NUM_SHARKS; i++) {
  804cf0:	e0bfff17 	ldw	r2,-4(fp)
  804cf4:	10800044 	addi	r2,r2,1
  804cf8:	e0bfff15 	stw	r2,-4(fp)
  804cfc:	e0bfff17 	ldw	r2,-4(fp)
  804d00:	10800810 	cmplti	r2,r2,32
  804d04:	103fc41e 	bne	r2,zero,804c18 <cleanupDeadSharks+0x18>
//		//free(cursor);
//		cursor = next;
//		i++;
//	}
//	deadSharkList = NULL;
}
  804d08:	e037883a 	mov	sp,fp
  804d0c:	dfc00117 	ldw	ra,4(sp)
  804d10:	df000017 	ldw	fp,0(sp)
  804d14:	dec00204 	addi	sp,sp,8
  804d18:	f800283a 	ret

00804d1c <drawSplashScreen>:
#include "splash.h"

void drawSplashScreen() {
  804d1c:	defffe04 	addi	sp,sp,-8
  804d20:	dfc00115 	stw	ra,4(sp)
  804d24:	df000015 	stw	fp,0(sp)
  804d28:	d839883a 	mov	fp,sp
	drawBmp(splashBmp, 0, 0);
  804d2c:	d1271817 	ldw	r4,-25504(gp)
  804d30:	000b883a 	mov	r5,zero
  804d34:	000d883a 	mov	r6,zero
  804d38:	08015f80 	call	8015f8 <drawBmp>

	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  804d3c:	d1271917 	ldw	r4,-25500(gp)
  804d40:	0814c600 	call	814c60 <alt_up_pixel_buffer_dma_swap_buffers>
	while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  804d44:	d1271917 	ldw	r4,-25500(gp)
  804d48:	0814cb80 	call	814cb8 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  804d4c:	1004c03a 	cmpne	r2,r2,zero
  804d50:	103ffc1e 	bne	r2,zero,804d44 <drawSplashScreen+0x28>

}
  804d54:	e037883a 	mov	sp,fp
  804d58:	dfc00117 	ldw	ra,4(sp)
  804d5c:	df000017 	ldw	fp,0(sp)
  804d60:	dec00204 	addi	sp,sp,8
  804d64:	f800283a 	ret

00804d68 <clearSplashScreen>:

void clearSplashScreen() {
  804d68:	defffe04 	addi	sp,sp,-8
  804d6c:	dfc00115 	stw	ra,4(sp)
  804d70:	df000015 	stw	fp,0(sp)
  804d74:	d839883a 	mov	fp,sp
	clearScreen();
  804d78:	080519c0 	call	80519c <clearScreen>

	freeSplash();
  804d7c:	08015c00 	call	8015c0 <freeSplash>
}
  804d80:	e037883a 	mov	sp,fp
  804d84:	dfc00117 	ldw	ra,4(sp)
  804d88:	df000017 	ldw	fp,0(sp)
  804d8c:	dec00204 	addi	sp,sp,8
  804d90:	f800283a 	ret

00804d94 <timer_test>:
#include "sys/alt_alarm.h"
#include "system.h"
#include "timer.h"

// Test code from lab
void timer_test(void) {
  804d94:	defff304 	addi	sp,sp,-52
  804d98:	dfc00c15 	stw	ra,48(sp)
  804d9c:	df000b15 	stw	fp,44(sp)
  804da0:	dc000a15 	stw	r16,40(sp)
  804da4:	df000a04 	addi	fp,sp,40
	int ticks_duration;
	int timer_period;
	int status;
	int done;

	printf("Timers\n");
  804da8:	010020b4 	movhi	r4,130
  804dac:	212f4604 	addi	r4,r4,-17128
  804db0:	080974c0 	call	80974c <puts>
	printf(" Sys Clock Timer\n");
  804db4:	010020b4 	movhi	r4,130
  804db8:	212f4804 	addi	r4,r4,-17120
  804dbc:	080974c0 	call	80974c <puts>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  804dc0:	008020b4 	movhi	r2,130
  804dc4:	10bf0904 	addi	r2,r2,-988
  804dc8:	10800017 	ldw	r2,0(r2)
	ticks_per_s = alt_ticks_per_second();
  804dcc:	e0bffa15 	stw	r2,-24(fp)
	printf("Tick Freq: %d\n", ticks_per_s);
  804dd0:	010020b4 	movhi	r4,130
  804dd4:	212f4d04 	addi	r4,r4,-17100
  804dd8:	e17ffa17 	ldw	r5,-24(fp)
  804ddc:	08096340 	call	809634 <printf>
	printf(" Recording starting ticks\n");
  804de0:	010020b4 	movhi	r4,130
  804de4:	212f5104 	addi	r4,r4,-17084
  804de8:	080974c0 	call	80974c <puts>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  804dec:	008020b4 	movhi	r2,130
  804df0:	10bf0a04 	addi	r2,r2,-984
  804df4:	10800017 	ldw	r2,0(r2)
	ticks_start = alt_nticks();
  804df8:	e0bffc15 	stw	r2,-16(fp)
	printf(" Sleeping for 5 seconds\n");
  804dfc:	010020b4 	movhi	r4,130
  804e00:	212f5804 	addi	r4,r4,-17056
  804e04:	080974c0 	call	80974c <puts>
	usleep(5000000);
  804e08:	01001334 	movhi	r4,76
  804e0c:	2112d004 	addi	r4,r4,19264
  804e10:	0811fc40 	call	811fc4 <usleep>
	printf(" Recording ending ticks\n");
  804e14:	010020b4 	movhi	r4,130
  804e18:	212f5e04 	addi	r4,r4,-17032
  804e1c:	080974c0 	call	80974c <puts>
  804e20:	008020b4 	movhi	r2,130
  804e24:	10bf0a04 	addi	r2,r2,-984
  804e28:	10800017 	ldw	r2,0(r2)
	ticks_end = alt_nticks();
  804e2c:	e0bffb15 	stw	r2,-20(fp)
	ticks_duration = ticks_end -ticks_start;
  804e30:	e0fffb17 	ldw	r3,-20(fp)
  804e34:	e0bffc17 	ldw	r2,-16(fp)
  804e38:	1885c83a 	sub	r2,r3,r2
  804e3c:	e0bff915 	stw	r2,-28(fp)
	duration = (float) ticks_duration / (float) ticks_per_s;
  804e40:	e13ff917 	ldw	r4,-28(fp)
  804e44:	08074600 	call	807460 <__floatsisf>
  804e48:	1021883a 	mov	r16,r2
  804e4c:	e13ffa17 	ldw	r4,-24(fp)
  804e50:	08074600 	call	807460 <__floatsisf>
  804e54:	8009883a 	mov	r4,r16
  804e58:	100b883a 	mov	r5,r2
  804e5c:	08072ec0 	call	8072ec <__divsf3>
  804e60:	e0bffd15 	stw	r2,-12(fp)
	printf(" The program slept for %d ticks (%f seconds)\n\n", ticks_duration,
  804e64:	e13ffd17 	ldw	r4,-12(fp)
  804e68:	08074f80 	call	8074f8 <__extendsfdf2>
  804e6c:	100f883a 	mov	r7,r2
  804e70:	1811883a 	mov	r8,r3
  804e74:	010020b4 	movhi	r4,130
  804e78:	212f6404 	addi	r4,r4,-17008
  804e7c:	e17ff917 	ldw	r5,-28(fp)
  804e80:	380d883a 	mov	r6,r7
  804e84:	400f883a 	mov	r7,r8
  804e88:	08096340 	call	809634 <printf>
	duration);

	printf(" Timestamp Timer\n");
  804e8c:	010020b4 	movhi	r4,130
  804e90:	212f7004 	addi	r4,r4,-16960
  804e94:	080974c0 	call	80974c <puts>
	freq = alt_timestamp_freq();
  804e98:	08132380 	call	813238 <alt_timestamp_freq>
  804e9c:	e0bfff15 	stw	r2,-4(fp)
	printf(" CPU Freq: %d\n", freq);
  804ea0:	010020b4 	movhi	r4,130
  804ea4:	212f7504 	addi	r4,r4,-16940
  804ea8:	e17fff17 	ldw	r5,-4(fp)
  804eac:	08096340 	call	809634 <printf>
	printf(" Resetting Timestamp timer\n");
  804eb0:	010020b4 	movhi	r4,130
  804eb4:	212f7904 	addi	r4,r4,-16924
  804eb8:	080974c0 	call	80974c <puts>
	alt_timestamp_start();
  804ebc:	08130f80 	call	8130f8 <alt_timestamp_start>
	printf(" ...Timing the print of this statement...\n");
  804ec0:	010020b4 	movhi	r4,130
  804ec4:	212f8004 	addi	r4,r4,-16896
  804ec8:	080974c0 	call	80974c <puts>
	cycles = alt_timestamp();
  804ecc:	081319c0 	call	81319c <alt_timestamp>
  804ed0:	e0bffe15 	stw	r2,-8(fp)
	duration = (float) cycles / (float) freq;
  804ed4:	e13ffe17 	ldw	r4,-8(fp)
  804ed8:	08074600 	call	807460 <__floatsisf>
  804edc:	1021883a 	mov	r16,r2
  804ee0:	e13fff17 	ldw	r4,-4(fp)
  804ee4:	08074600 	call	807460 <__floatsisf>
  804ee8:	8009883a 	mov	r4,r16
  804eec:	100b883a 	mov	r5,r2
  804ef0:	08072ec0 	call	8072ec <__divsf3>
  804ef4:	e0bffd15 	stw	r2,-12(fp)
	printf(" It took %d cycles (%f seconds) to print the statement\n\n",
  804ef8:	e13ffd17 	ldw	r4,-12(fp)
  804efc:	08074f80 	call	8074f8 <__extendsfdf2>
  804f00:	100f883a 	mov	r7,r2
  804f04:	1811883a 	mov	r8,r3
  804f08:	010020b4 	movhi	r4,130
  804f0c:	212f8b04 	addi	r4,r4,-16852
  804f10:	e17ffe17 	ldw	r5,-8(fp)
  804f14:	380d883a 	mov	r6,r7
  804f18:	400f883a 	mov	r7,r8
  804f1c:	08096340 	call	809634 <printf>
	cycles, duration);

	printf(" Hardware-Only Timer\n");
  804f20:	010020b4 	movhi	r4,130
  804f24:	212f9a04 	addi	r4,r4,-16792
  804f28:	080974c0 	call	80974c <puts>
	printf(" Setting timer period to 5 seconds.\n");
  804f2c:	010020b4 	movhi	r4,130
  804f30:	212fa004 	addi	r4,r4,-16768
  804f34:	080974c0 	call	80974c <puts>
	timer_period = 5 * CLOCK_FREQ;
  804f38:	0083b9f4 	movhi	r2,3815
  804f3c:	10aca004 	addi	r2,r2,-19840
  804f40:	e0bff815 	stw	r2,-32(fp)
	// Setting the period registers must be done in 2 steps as they are only 16 bits wide
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 8, timer_period & 0xFFFF); // less significant word
  804f44:	e0bff817 	ldw	r2,-32(fp)
  804f48:	10ffffcc 	andi	r3,r2,65535
  804f4c:	00804034 	movhi	r2,256
  804f50:	10840204 	addi	r2,r2,4104
  804f54:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE,12, timer_period >> 16); // more significant word
  804f58:	e0bff817 	ldw	r2,-32(fp)
  804f5c:	1007d43a 	srai	r3,r2,16
  804f60:	00804034 	movhi	r2,256
  804f64:	10840304 	addi	r2,r2,4108
  804f68:	10c0002d 	sthio	r3,0(r2)
	printf(" Stopping Timer\n");
  804f6c:	010020b4 	movhi	r4,130
  804f70:	212fa904 	addi	r4,r4,-16732
  804f74:	080974c0 	call	80974c <puts>
	status = IORD_16DIRECT(HAL_SYSTEM_TIMER_BASE, 0); // read status registers
  804f78:	00804034 	movhi	r2,256
  804f7c:	10840004 	addi	r2,r2,4096
  804f80:	1080002b 	ldhuio	r2,0(r2)
  804f84:	e0bff715 	stw	r2,-36(fp)
	// Write the control registers
	if(status & 0x2) {
  804f88:	e0bff717 	ldw	r2,-36(fp)
  804f8c:	1080008c 	andi	r2,r2,2
  804f90:	1005003a 	cmpeq	r2,r2,zero
  804f94:	1000041e 	bne	r2,zero,804fa8 <timer_test+0x214>
		IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 4, 1 << 3); // stop the timer if it was started
  804f98:	00c04034 	movhi	r3,256
  804f9c:	18c40104 	addi	r3,r3,4100
  804fa0:	00800204 	movi	r2,8
  804fa4:	1880002d 	sthio	r2,0(r3)
	}
	printf(" Starting Timer\n");
  804fa8:	010020b4 	movhi	r4,130
  804fac:	212fad04 	addi	r4,r4,-16716
  804fb0:	080974c0 	call	80974c <puts>
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 4, 1 << 2); // start the timer
  804fb4:	00c04034 	movhi	r3,256
  804fb8:	18c40104 	addi	r3,r3,4100
  804fbc:	00800104 	movi	r2,4
  804fc0:	1880002d 	sthio	r2,0(r3)

	printf("  Waiting for timer to expire...\n");
  804fc4:	010020b4 	movhi	r4,130
  804fc8:	212fb104 	addi	r4,r4,-16700
  804fcc:	080974c0 	call	80974c <puts>
	done = 0;
  804fd0:	e03ff615 	stw	zero,-40(fp)
	while(! done) {
  804fd4:	00000706 	br	804ff4 <timer_test+0x260>
		status = IORD_16DIRECT(HAL_SYSTEM_TIMER_BASE, 0); // read status registers
  804fd8:	00804034 	movhi	r2,256
  804fdc:	10840004 	addi	r2,r2,4096
  804fe0:	1080002b 	ldhuio	r2,0(r2)
  804fe4:	e0bff715 	stw	r2,-36(fp)
		done = status & 0x1;
  804fe8:	e0bff717 	ldw	r2,-36(fp)
  804fec:	1080004c 	andi	r2,r2,1
  804ff0:	e0bff615 	stw	r2,-40(fp)
	printf(" Starting Timer\n");
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 4, 1 << 2); // start the timer

	printf("  Waiting for timer to expire...\n");
	done = 0;
	while(! done) {
  804ff4:	e0bff617 	ldw	r2,-40(fp)
  804ff8:	1005003a 	cmpeq	r2,r2,zero
  804ffc:	103ff61e 	bne	r2,zero,804fd8 <timer_test+0x244>
		status = IORD_16DIRECT(HAL_SYSTEM_TIMER_BASE, 0); // read status registers
		done = status & 0x1;
	}
	printf(" 5 seconds timer is done\n");
  805000:	010020b4 	movhi	r4,130
  805004:	212fba04 	addi	r4,r4,-16664
  805008:	080974c0 	call	80974c <puts>
}
  80500c:	e037883a 	mov	sp,fp
  805010:	dfc00217 	ldw	ra,8(sp)
  805014:	df000117 	ldw	fp,4(sp)
  805018:	dc000017 	ldw	r16,0(sp)
  80501c:	dec00304 	addi	sp,sp,12
  805020:	f800283a 	ret

00805024 <setHardwareTimerPeriod>:

// Period is in clock cycles
// ie 5 seconds would be 5 * CLOCK_FREQ
void setHardwareTimerPeriod(int period)
{
  805024:	defffe04 	addi	sp,sp,-8
  805028:	df000115 	stw	fp,4(sp)
  80502c:	df000104 	addi	fp,sp,4
  805030:	e13fff15 	stw	r4,-4(fp)
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 8, period & 0xFFFF); // less significant word
  805034:	e0bfff17 	ldw	r2,-4(fp)
  805038:	10ffffcc 	andi	r3,r2,65535
  80503c:	00804034 	movhi	r2,256
  805040:	10840204 	addi	r2,r2,4104
  805044:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE,12, period >> 16); // more significant word
  805048:	e0bfff17 	ldw	r2,-4(fp)
  80504c:	1007d43a 	srai	r3,r2,16
  805050:	00804034 	movhi	r2,256
  805054:	10840304 	addi	r2,r2,4108
  805058:	10c0002d 	sthio	r3,0(r2)
}
  80505c:	e037883a 	mov	sp,fp
  805060:	df000017 	ldw	fp,0(sp)
  805064:	dec00104 	addi	sp,sp,4
  805068:	f800283a 	ret

0080506c <isHardwareTimerRunning>:

int isHardwareTimerRunning(void)
{
  80506c:	defffe04 	addi	sp,sp,-8
  805070:	df000115 	stw	fp,4(sp)
  805074:	df000104 	addi	fp,sp,4
	int status = IORD_16DIRECT(HAL_SYSTEM_TIMER_BASE, 0);
  805078:	00804034 	movhi	r2,256
  80507c:	10840004 	addi	r2,r2,4096
  805080:	1080002b 	ldhuio	r2,0(r2)
  805084:	e0bfff15 	stw	r2,-4(fp)
	return status & 0x2; // not totally sure on this
  805088:	e0bfff17 	ldw	r2,-4(fp)
  80508c:	1080008c 	andi	r2,r2,2
}
  805090:	e037883a 	mov	sp,fp
  805094:	df000017 	ldw	fp,0(sp)
  805098:	dec00104 	addi	sp,sp,4
  80509c:	f800283a 	ret

008050a0 <hasHardwareTimerExpired>:

int hasHardwareTimerExpired(void)
{
  8050a0:	deffff04 	addi	sp,sp,-4
  8050a4:	df000015 	stw	fp,0(sp)
  8050a8:	d839883a 	mov	fp,sp
	return IORD_16DIRECT(HAL_SYSTEM_TIMER_BASE, 0);
  8050ac:	00804034 	movhi	r2,256
  8050b0:	10840004 	addi	r2,r2,4096
  8050b4:	1080002b 	ldhuio	r2,0(r2)
}
  8050b8:	e037883a 	mov	sp,fp
  8050bc:	df000017 	ldw	fp,0(sp)
  8050c0:	dec00104 	addi	sp,sp,4
  8050c4:	f800283a 	ret

008050c8 <startHardwareTimer>:

void startHardwareTimer(void)
{
  8050c8:	deffff04 	addi	sp,sp,-4
  8050cc:	df000015 	stw	fp,0(sp)
  8050d0:	d839883a 	mov	fp,sp
	IOWR_16DIRECT(HAL_SYSTEM_TIMER_BASE, 4, 1 << 2);
  8050d4:	00c04034 	movhi	r3,256
  8050d8:	18c40104 	addi	r3,r3,4100
  8050dc:	00800104 	movi	r2,4
  8050e0:	1880002d 	sthio	r2,0(r3)
}
  8050e4:	e037883a 	mov	sp,fp
  8050e8:	df000017 	ldw	fp,0(sp)
  8050ec:	dec00104 	addi	sp,sp,4
  8050f0:	f800283a 	ret

008050f4 <initVga>:
#include "vga.h"

void initVga()
{
  8050f4:	defffe04 	addi	sp,sp,-8
  8050f8:	dfc00115 	stw	ra,4(sp)
  8050fc:	df000015 	stw	fp,0(sp)
  805100:	d839883a 	mov	fp,sp
	pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma");
  805104:	010020b4 	movhi	r4,130
  805108:	212fc104 	addi	r4,r4,-16636
  80510c:	0814a280 	call	814a28 <alt_up_pixel_buffer_dma_open_dev>
  805110:	d0a71915 	stw	r2,-25500(gp)
	pixel_buffer_addr1 = PIXEL_BUFFER_BASE;
  805114:	00804234 	movhi	r2,264
  805118:	d0a71415 	stw	r2,-25520(gp)
	pixel_buffer_addr2 = PIXEL_BUFFER_BASE + (320 * 240 * 2);
  80511c:	008042b4 	movhi	r2,266
  805120:	10960004 	addi	r2,r2,22528
  805124:	d0a71615 	stw	r2,-25512(gp)

	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer, pixel_buffer_addr1);
  805128:	d1271917 	ldw	r4,-25500(gp)
  80512c:	d1671417 	ldw	r5,-25520(gp)
  805130:	0814c080 	call	814c08 <alt_up_pixel_buffer_dma_change_back_buffer_address>
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  805134:	d1271917 	ldw	r4,-25500(gp)
  805138:	0814c600 	call	814c60 <alt_up_pixel_buffer_dma_swap_buffers>
	while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  80513c:	d1271917 	ldw	r4,-25500(gp)
  805140:	0814cb80 	call	814cb8 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  805144:	1004c03a 	cmpne	r2,r2,zero
  805148:	103ffc1e 	bne	r2,zero,80513c <initVga+0x48>

	// Set the 2nd buffer address
	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer, pixel_buffer_addr2);
  80514c:	d1271917 	ldw	r4,-25500(gp)
  805150:	d1671617 	ldw	r5,-25512(gp)
  805154:	0814c080 	call	814c08 <alt_up_pixel_buffer_dma_change_back_buffer_address>

	// Clear both buffers (this makes all pixels black)
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  805158:	d1271917 	ldw	r4,-25500(gp)
  80515c:	000b883a 	mov	r5,zero
  805160:	0814cec0 	call	814cec <alt_up_pixel_buffer_dma_clear_screen>
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 1);
  805164:	d1271917 	ldw	r4,-25500(gp)
  805168:	01400044 	movi	r5,1
  80516c:	0814cec0 	call	814cec <alt_up_pixel_buffer_dma_clear_screen>

	char_buffer = alt_up_char_buffer_open_dev("/dev/char_drawer");
  805170:	010020b4 	movhi	r4,130
  805174:	212fc704 	addi	r4,r4,-16612
  805178:	08147a80 	call	8147a8 <alt_up_char_buffer_open_dev>
  80517c:	d0a71515 	stw	r2,-25516(gp)
	alt_up_char_buffer_init(char_buffer);
  805180:	d1271517 	ldw	r4,-25516(gp)
  805184:	08147240 	call	814724 <alt_up_char_buffer_init>
}
  805188:	e037883a 	mov	sp,fp
  80518c:	dfc00117 	ldw	ra,4(sp)
  805190:	df000017 	ldw	fp,0(sp)
  805194:	dec00204 	addi	sp,sp,8
  805198:	f800283a 	ret

0080519c <clearScreen>:

void clearScreen()
{
  80519c:	defffe04 	addi	sp,sp,-8
  8051a0:	dfc00115 	stw	ra,4(sp)
  8051a4:	df000015 	stw	fp,0(sp)
  8051a8:	d839883a 	mov	fp,sp
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  8051ac:	d1271917 	ldw	r4,-25500(gp)
  8051b0:	000b883a 	mov	r5,zero
  8051b4:	0814cec0 	call	814cec <alt_up_pixel_buffer_dma_clear_screen>
}
  8051b8:	e037883a 	mov	sp,fp
  8051bc:	dfc00117 	ldw	ra,4(sp)
  8051c0:	df000017 	ldw	fp,0(sp)
  8051c4:	dec00204 	addi	sp,sp,8
  8051c8:	f800283a 	ret

008051cc <drawPixel>:

void drawPixel(int x, int y, int color) {
  8051cc:	defffb04 	addi	sp,sp,-20
  8051d0:	dfc00415 	stw	ra,16(sp)
  8051d4:	df000315 	stw	fp,12(sp)
  8051d8:	df000304 	addi	fp,sp,12
  8051dc:	e13ffd15 	stw	r4,-12(fp)
  8051e0:	e17ffe15 	stw	r5,-8(fp)
  8051e4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_pixel_buffer_dma_draw(pixel_buffer, color, x, y);
  8051e8:	d1271917 	ldw	r4,-25500(gp)
  8051ec:	e17fff17 	ldw	r5,-4(fp)
  8051f0:	e1bffd17 	ldw	r6,-12(fp)
  8051f4:	e1fffe17 	ldw	r7,-8(fp)
  8051f8:	0814a680 	call	814a68 <alt_up_pixel_buffer_dma_draw>
}
  8051fc:	e037883a 	mov	sp,fp
  805200:	dfc00117 	ldw	ra,4(sp)
  805204:	df000017 	ldw	fp,0(sp)
  805208:	dec00204 	addi	sp,sp,8
  80520c:	f800283a 	ret

00805210 <drawLine>:

void drawLine(int x0, int y0, int x1, int y1, int color)
{
  805210:	defff704 	addi	sp,sp,-36
  805214:	dfc00815 	stw	ra,32(sp)
  805218:	df000715 	stw	fp,28(sp)
  80521c:	df000704 	addi	fp,sp,28
  805220:	e13ffc15 	stw	r4,-16(fp)
  805224:	e17ffd15 	stw	r5,-12(fp)
  805228:	e1bffe15 	stw	r6,-8(fp)
  80522c:	e1ffff15 	stw	r7,-4(fp)
	if (y0 == y1)
  805230:	e0fffd17 	ldw	r3,-12(fp)
  805234:	e0bfff17 	ldw	r2,-4(fp)
  805238:	18800a1e 	bne	r3,r2,805264 <drawLine+0x54>
	{
		alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, 1);
  80523c:	d1271917 	ldw	r4,-25500(gp)
  805240:	e0800217 	ldw	r2,8(fp)
  805244:	d8800015 	stw	r2,0(sp)
  805248:	00800044 	movi	r2,1
  80524c:	d8800115 	stw	r2,4(sp)
  805250:	e17ffc17 	ldw	r5,-16(fp)
  805254:	e1bffe17 	ldw	r6,-8(fp)
  805258:	e1fffd17 	ldw	r7,-12(fp)
  80525c:	08153440 	call	815344 <alt_up_pixel_buffer_dma_draw_hline>
  805260:	00001806 	br	8052c4 <drawLine+0xb4>
	}
	else if (x0 == x1)
  805264:	e0fffc17 	ldw	r3,-16(fp)
  805268:	e0bffe17 	ldw	r2,-8(fp)
  80526c:	18800a1e 	bne	r3,r2,805298 <drawLine+0x88>
	{
		alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, y0, y1, color, 1);
  805270:	d1271917 	ldw	r4,-25500(gp)
  805274:	e0800217 	ldw	r2,8(fp)
  805278:	d8800015 	stw	r2,0(sp)
  80527c:	00800044 	movi	r2,1
  805280:	d8800115 	stw	r2,4(sp)
  805284:	e17ffc17 	ldw	r5,-16(fp)
  805288:	e1bffd17 	ldw	r6,-12(fp)
  80528c:	e1ffff17 	ldw	r7,-4(fp)
  805290:	08153440 	call	815344 <alt_up_pixel_buffer_dma_draw_hline>
  805294:	00000b06 	br	8052c4 <drawLine+0xb4>
	}
	else
	{
		alt_up_pixel_buffer_dma_draw_line(pixel_buffer, x0, y0, x1, y1, color, 1);
  805298:	d1271917 	ldw	r4,-25500(gp)
  80529c:	e0bfff17 	ldw	r2,-4(fp)
  8052a0:	d8800015 	stw	r2,0(sp)
  8052a4:	e0800217 	ldw	r2,8(fp)
  8052a8:	d8800115 	stw	r2,4(sp)
  8052ac:	00800044 	movi	r2,1
  8052b0:	d8800215 	stw	r2,8(sp)
  8052b4:	e17ffc17 	ldw	r5,-16(fp)
  8052b8:	e1bffd17 	ldw	r6,-12(fp)
  8052bc:	e1fffe17 	ldw	r7,-8(fp)
  8052c0:	0815bf80 	call	815bf8 <alt_up_pixel_buffer_dma_draw_line>
	}
}
  8052c4:	e037883a 	mov	sp,fp
  8052c8:	dfc00117 	ldw	ra,4(sp)
  8052cc:	df000017 	ldw	fp,0(sp)
  8052d0:	dec00204 	addi	sp,sp,8
  8052d4:	f800283a 	ret

008052d8 <printLine>:

void printLine(void)
{
  8052d8:	defffe04 	addi	sp,sp,-8
  8052dc:	dfc00115 	stw	ra,4(sp)
  8052e0:	df000015 	stw	fp,0(sp)
  8052e4:	d839883a 	mov	fp,sp
	alt_up_char_buffer_string(char_buffer, "LaserSharknado", 40, 30);
  8052e8:	d1271517 	ldw	r4,-25516(gp)
  8052ec:	014020b4 	movhi	r5,130
  8052f0:	296fcc04 	addi	r5,r5,-16592
  8052f4:	01800a04 	movi	r6,40
  8052f8:	01c00784 	movi	r7,30
  8052fc:	08148b80 	call	8148b8 <alt_up_char_buffer_string>
}
  805300:	e037883a 	mov	sp,fp
  805304:	dfc00117 	ldw	ra,4(sp)
  805308:	df000017 	ldw	fp,0(sp)
  80530c:	dec00204 	addi	sp,sp,8
  805310:	f800283a 	ret

00805314 <drawBox>:

void drawBox(int x0, int y0, int x1, int y1, int color)
{
  805314:	defff704 	addi	sp,sp,-36
  805318:	dfc00815 	stw	ra,32(sp)
  80531c:	df000715 	stw	fp,28(sp)
  805320:	df000704 	addi	fp,sp,28
  805324:	e13ffc15 	stw	r4,-16(fp)
  805328:	e17ffd15 	stw	r5,-12(fp)
  80532c:	e1bffe15 	stw	r6,-8(fp)
  805330:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer, x0, y0, x1, y1, color, 1);
  805334:	d1271917 	ldw	r4,-25500(gp)
  805338:	e0bfff17 	ldw	r2,-4(fp)
  80533c:	d8800015 	stw	r2,0(sp)
  805340:	e0800217 	ldw	r2,8(fp)
  805344:	d8800115 	stw	r2,4(sp)
  805348:	00800044 	movi	r2,1
  80534c:	d8800215 	stw	r2,8(sp)
  805350:	e17ffc17 	ldw	r5,-16(fp)
  805354:	e1bffd17 	ldw	r6,-12(fp)
  805358:	e1fffe17 	ldw	r7,-8(fp)
  80535c:	0814e500 	call	814e50 <alt_up_pixel_buffer_dma_draw_box>
}
  805360:	e037883a 	mov	sp,fp
  805364:	dfc00117 	ldw	ra,4(sp)
  805368:	df000017 	ldw	fp,0(sp)
  80536c:	dec00204 	addi	sp,sp,8
  805370:	f800283a 	ret

00805374 <convert24BitRgbTo16>:

int convert24BitRgbTo16(unsigned int rgb24bit)
{
  805374:	defff804 	addi	sp,sp,-32
  805378:	df000715 	stw	fp,28(sp)
  80537c:	df000704 	addi	fp,sp,28
  805380:	e13fff15 	stw	r4,-4(fp)
	unsigned int R8bit = (rgb24bit >> 16) & 0xFF;
  805384:	e0bfff17 	ldw	r2,-4(fp)
  805388:	1004d43a 	srli	r2,r2,16
  80538c:	10803fcc 	andi	r2,r2,255
  805390:	e0bffe15 	stw	r2,-8(fp)
	unsigned int G8bit = (rgb24bit >> 8)  & 0xFF;
  805394:	e0bfff17 	ldw	r2,-4(fp)
  805398:	1004d23a 	srli	r2,r2,8
  80539c:	10803fcc 	andi	r2,r2,255
  8053a0:	e0bffd15 	stw	r2,-12(fp)
	unsigned int B8bit = (rgb24bit)	      & 0xFF;
  8053a4:	e0bfff17 	ldw	r2,-4(fp)
  8053a8:	10803fcc 	andi	r2,r2,255
  8053ac:	e0bffc15 	stw	r2,-16(fp)
	unsigned int R5bit = R8bit >> 3 & 0x1F;
  8053b0:	e0bffe17 	ldw	r2,-8(fp)
  8053b4:	1004d0fa 	srli	r2,r2,3
  8053b8:	108007cc 	andi	r2,r2,31
  8053bc:	e0bffb15 	stw	r2,-20(fp)
	unsigned int G6bit = G8bit >> 2 & 0x3F;
  8053c0:	e0bffd17 	ldw	r2,-12(fp)
  8053c4:	1004d0ba 	srli	r2,r2,2
  8053c8:	10800fcc 	andi	r2,r2,63
  8053cc:	e0bffa15 	stw	r2,-24(fp)
	unsigned int B5bit = B8bit >> 3 & 0x1F;
  8053d0:	e0bffc17 	ldw	r2,-16(fp)
  8053d4:	1004d0fa 	srli	r2,r2,3
  8053d8:	108007cc 	andi	r2,r2,31
  8053dc:	e0bff915 	stw	r2,-28(fp)
	return (R5bit << 11 | G6bit << 5 | B5bit);
  8053e0:	e0bffb17 	ldw	r2,-20(fp)
  8053e4:	100692fa 	slli	r3,r2,11
  8053e8:	e0bffa17 	ldw	r2,-24(fp)
  8053ec:	1004917a 	slli	r2,r2,5
  8053f0:	1886b03a 	or	r3,r3,r2
  8053f4:	e0bff917 	ldw	r2,-28(fp)
  8053f8:	1884b03a 	or	r2,r3,r2
}
  8053fc:	e037883a 	mov	sp,fp
  805400:	df000017 	ldw	fp,0(sp)
  805404:	dec00104 	addi	sp,sp,4
  805408:	f800283a 	ret

0080540c <pow>:
  80540c:	deffee04 	addi	sp,sp,-72
  805410:	ddc01015 	stw	r23,64(sp)
  805414:	05c020b4 	movhi	r23,130
  805418:	bdf7cc04 	addi	r23,r23,-8400
  80541c:	dd800f15 	stw	r22,60(sp)
  805420:	dd400e15 	stw	r21,56(sp)
  805424:	dd000d15 	stw	r20,52(sp)
  805428:	dcc00c15 	stw	r19,48(sp)
  80542c:	dc800b15 	stw	r18,44(sp)
  805430:	dc400a15 	stw	r17,40(sp)
  805434:	dc000915 	stw	r16,36(sp)
  805438:	2029883a 	mov	r20,r4
  80543c:	dfc01115 	stw	ra,68(sp)
  805440:	3025883a 	mov	r18,r6
  805444:	282b883a 	mov	r21,r5
  805448:	3827883a 	mov	r19,r7
  80544c:	08058940 	call	805894 <__ieee754_pow>
  805450:	b9000017 	ldw	r4,0(r23)
  805454:	05bfffc4 	movi	r22,-1
  805458:	1021883a 	mov	r16,r2
  80545c:	1823883a 	mov	r17,r3
  805460:	25800426 	beq	r4,r22,805474 <pow+0x68>
  805464:	9009883a 	mov	r4,r18
  805468:	980b883a 	mov	r5,r19
  80546c:	0806e900 	call	806e90 <__isnand>
  805470:	10000d26 	beq	r2,zero,8054a8 <pow+0x9c>
  805474:	8005883a 	mov	r2,r16
  805478:	8807883a 	mov	r3,r17
  80547c:	dfc01117 	ldw	ra,68(sp)
  805480:	ddc01017 	ldw	r23,64(sp)
  805484:	dd800f17 	ldw	r22,60(sp)
  805488:	dd400e17 	ldw	r21,56(sp)
  80548c:	dd000d17 	ldw	r20,52(sp)
  805490:	dcc00c17 	ldw	r19,48(sp)
  805494:	dc800b17 	ldw	r18,44(sp)
  805498:	dc400a17 	ldw	r17,40(sp)
  80549c:	dc000917 	ldw	r16,36(sp)
  8054a0:	dec01204 	addi	sp,sp,72
  8054a4:	f800283a 	ret
  8054a8:	a009883a 	mov	r4,r20
  8054ac:	a80b883a 	mov	r5,r21
  8054b0:	0806e900 	call	806e90 <__isnand>
  8054b4:	1000151e 	bne	r2,zero,80550c <pow+0x100>
  8054b8:	000d883a 	mov	r6,zero
  8054bc:	000f883a 	mov	r7,zero
  8054c0:	a009883a 	mov	r4,r20
  8054c4:	a80b883a 	mov	r5,r21
  8054c8:	080806c0 	call	80806c <__eqdf2>
  8054cc:	1000541e 	bne	r2,zero,805620 <pow+0x214>
  8054d0:	000d883a 	mov	r6,zero
  8054d4:	000f883a 	mov	r7,zero
  8054d8:	9009883a 	mov	r4,r18
  8054dc:	980b883a 	mov	r5,r19
  8054e0:	080806c0 	call	80806c <__eqdf2>
  8054e4:	10002c1e 	bne	r2,zero,805598 <pow+0x18c>
  8054e8:	b8800017 	ldw	r2,0(r23)
  8054ec:	d8000615 	stw	zero,24(sp)
  8054f0:	d8000715 	stw	zero,28(sp)
  8054f4:	10001226 	beq	r2,zero,805540 <pow+0x134>
  8054f8:	008ffc34 	movhi	r2,16368
  8054fc:	d8800715 	stw	r2,28(sp)
  805500:	dc000617 	ldw	r16,24(sp)
  805504:	dc400717 	ldw	r17,28(sp)
  805508:	003fda06 	br	805474 <pow+0x68>
  80550c:	000d883a 	mov	r6,zero
  805510:	000f883a 	mov	r7,zero
  805514:	9009883a 	mov	r4,r18
  805518:	980b883a 	mov	r5,r19
  80551c:	080806c0 	call	80806c <__eqdf2>
  805520:	103fd41e 	bne	r2,zero,805474 <pow+0x68>
  805524:	b8c00017 	ldw	r3,0(r23)
  805528:	010ffc34 	movhi	r4,16368
  80552c:	d8000615 	stw	zero,24(sp)
  805530:	d9000715 	stw	r4,28(sp)
  805534:	1d801526 	beq	r3,r22,80558c <pow+0x180>
  805538:	00800084 	movi	r2,2
  80553c:	18801326 	beq	r3,r2,80558c <pow+0x180>
  805540:	008020b4 	movhi	r2,130
  805544:	10afd004 	addi	r2,r2,-16576
  805548:	00c00044 	movi	r3,1
  80554c:	d809883a 	mov	r4,sp
  805550:	dcc00515 	stw	r19,20(sp)
  805554:	dd400315 	stw	r21,12(sp)
  805558:	d8800115 	stw	r2,4(sp)
  80555c:	d8c00015 	stw	r3,0(sp)
  805560:	dc800415 	stw	r18,16(sp)
  805564:	dd000215 	stw	r20,8(sp)
  805568:	d8000815 	stw	zero,32(sp)
  80556c:	0806ec00 	call	806ec0 <matherr>
  805570:	10002726 	beq	r2,zero,805610 <pow+0x204>
  805574:	d8800817 	ldw	r2,32(sp)
  805578:	103fe126 	beq	r2,zero,805500 <pow+0xf4>
  80557c:	0808ebc0 	call	808ebc <__errno>
  805580:	d8c00817 	ldw	r3,32(sp)
  805584:	10c00015 	stw	r3,0(r2)
  805588:	003fdd06 	br	805500 <pow+0xf4>
  80558c:	d9000715 	stw	r4,28(sp)
  805590:	d8000615 	stw	zero,24(sp)
  805594:	003fda06 	br	805500 <pow+0xf4>
  805598:	9009883a 	mov	r4,r18
  80559c:	980b883a 	mov	r5,r19
  8055a0:	0806e740 	call	806e74 <finite>
  8055a4:	103fb326 	beq	r2,zero,805474 <pow+0x68>
  8055a8:	000d883a 	mov	r6,zero
  8055ac:	000f883a 	mov	r7,zero
  8055b0:	9009883a 	mov	r4,r18
  8055b4:	980b883a 	mov	r5,r19
  8055b8:	08082040 	call	808204 <__ltdf2>
  8055bc:	103fad0e 	bge	r2,zero,805474 <pow+0x68>
  8055c0:	b9000017 	ldw	r4,0(r23)
  8055c4:	00800044 	movi	r2,1
  8055c8:	00c020b4 	movhi	r3,130
  8055cc:	18efd004 	addi	r3,r3,-16576
  8055d0:	d8800015 	stw	r2,0(sp)
  8055d4:	d8c00115 	stw	r3,4(sp)
  8055d8:	dd400315 	stw	r21,12(sp)
  8055dc:	dcc00515 	stw	r19,20(sp)
  8055e0:	d8000815 	stw	zero,32(sp)
  8055e4:	dd000215 	stw	r20,8(sp)
  8055e8:	dc800415 	stw	r18,16(sp)
  8055ec:	20005626 	beq	r4,zero,805748 <pow+0x33c>
  8055f0:	00bffc34 	movhi	r2,65520
  8055f4:	d8800715 	stw	r2,28(sp)
  8055f8:	00800084 	movi	r2,2
  8055fc:	d8000615 	stw	zero,24(sp)
  805600:	20800326 	beq	r4,r2,805610 <pow+0x204>
  805604:	d809883a 	mov	r4,sp
  805608:	0806ec00 	call	806ec0 <matherr>
  80560c:	103fd91e 	bne	r2,zero,805574 <pow+0x168>
  805610:	0808ebc0 	call	808ebc <__errno>
  805614:	00c00844 	movi	r3,33
  805618:	10c00015 	stw	r3,0(r2)
  80561c:	003fd506 	br	805574 <pow+0x168>
  805620:	8009883a 	mov	r4,r16
  805624:	880b883a 	mov	r5,r17
  805628:	0806e740 	call	806e74 <finite>
  80562c:	10002426 	beq	r2,zero,8056c0 <pow+0x2b4>
  805630:	000d883a 	mov	r6,zero
  805634:	000f883a 	mov	r7,zero
  805638:	8009883a 	mov	r4,r16
  80563c:	880b883a 	mov	r5,r17
  805640:	080806c0 	call	80806c <__eqdf2>
  805644:	103f8b1e 	bne	r2,zero,805474 <pow+0x68>
  805648:	a009883a 	mov	r4,r20
  80564c:	a80b883a 	mov	r5,r21
  805650:	0806e740 	call	806e74 <finite>
  805654:	103f8726 	beq	r2,zero,805474 <pow+0x68>
  805658:	9009883a 	mov	r4,r18
  80565c:	980b883a 	mov	r5,r19
  805660:	0806e740 	call	806e74 <finite>
  805664:	103f8326 	beq	r2,zero,805474 <pow+0x68>
  805668:	b9000017 	ldw	r4,0(r23)
  80566c:	00800104 	movi	r2,4
  805670:	d8800015 	stw	r2,0(sp)
  805674:	00c020b4 	movhi	r3,130
  805678:	18efd004 	addi	r3,r3,-16576
  80567c:	00800084 	movi	r2,2
  805680:	d8c00115 	stw	r3,4(sp)
  805684:	dd400315 	stw	r21,12(sp)
  805688:	dcc00515 	stw	r19,20(sp)
  80568c:	d8000815 	stw	zero,32(sp)
  805690:	dd000215 	stw	r20,8(sp)
  805694:	dc800415 	stw	r18,16(sp)
  805698:	d8000615 	stw	zero,24(sp)
  80569c:	d8000715 	stw	zero,28(sp)
  8056a0:	20800326 	beq	r4,r2,8056b0 <pow+0x2a4>
  8056a4:	d809883a 	mov	r4,sp
  8056a8:	0806ec00 	call	806ec0 <matherr>
  8056ac:	103fb11e 	bne	r2,zero,805574 <pow+0x168>
  8056b0:	0808ebc0 	call	808ebc <__errno>
  8056b4:	00c00884 	movi	r3,34
  8056b8:	10c00015 	stw	r3,0(r2)
  8056bc:	003fad06 	br	805574 <pow+0x168>
  8056c0:	a009883a 	mov	r4,r20
  8056c4:	a80b883a 	mov	r5,r21
  8056c8:	0806e740 	call	806e74 <finite>
  8056cc:	103fd826 	beq	r2,zero,805630 <pow+0x224>
  8056d0:	9009883a 	mov	r4,r18
  8056d4:	980b883a 	mov	r5,r19
  8056d8:	0806e740 	call	806e74 <finite>
  8056dc:	103fd426 	beq	r2,zero,805630 <pow+0x224>
  8056e0:	880b883a 	mov	r5,r17
  8056e4:	8009883a 	mov	r4,r16
  8056e8:	0806e900 	call	806e90 <__isnand>
  8056ec:	10001926 	beq	r2,zero,805754 <pow+0x348>
  8056f0:	bc000017 	ldw	r16,0(r23)
  8056f4:	00800044 	movi	r2,1
  8056f8:	00c020b4 	movhi	r3,130
  8056fc:	18efd004 	addi	r3,r3,-16576
  805700:	d8800015 	stw	r2,0(sp)
  805704:	d8c00115 	stw	r3,4(sp)
  805708:	dd400315 	stw	r21,12(sp)
  80570c:	dcc00515 	stw	r19,20(sp)
  805710:	d8000815 	stw	zero,32(sp)
  805714:	dd000215 	stw	r20,8(sp)
  805718:	dc800415 	stw	r18,16(sp)
  80571c:	80000a26 	beq	r16,zero,805748 <pow+0x33c>
  805720:	0009883a 	mov	r4,zero
  805724:	000d883a 	mov	r6,zero
  805728:	000b883a 	mov	r5,zero
  80572c:	000f883a 	mov	r7,zero
  805730:	0807e140 	call	807e14 <__divdf3>
  805734:	d8800615 	stw	r2,24(sp)
  805738:	00800084 	movi	r2,2
  80573c:	d8c00715 	stw	r3,28(sp)
  805740:	80bfb01e 	bne	r16,r2,805604 <pow+0x1f8>
  805744:	003fb206 	br	805610 <pow+0x204>
  805748:	d8000615 	stw	zero,24(sp)
  80574c:	d8000715 	stw	zero,28(sp)
  805750:	003fac06 	br	805604 <pow+0x1f8>
  805754:	b8800017 	ldw	r2,0(r23)
  805758:	00c000c4 	movi	r3,3
  80575c:	010020b4 	movhi	r4,130
  805760:	212fd004 	addi	r4,r4,-16576
  805764:	d8c00015 	stw	r3,0(sp)
  805768:	d9000115 	stw	r4,4(sp)
  80576c:	d8000815 	stw	zero,32(sp)
  805770:	dd000215 	stw	r20,8(sp)
  805774:	dd400315 	stw	r21,12(sp)
  805778:	dc800415 	stw	r18,16(sp)
  80577c:	dcc00515 	stw	r19,20(sp)
  805780:	1000251e 	bne	r2,zero,805818 <pow+0x40c>
  805784:	05b80034 	movhi	r22,57344
  805788:	0091fc34 	movhi	r2,18416
  80578c:	10bfffc4 	addi	r2,r2,-1
  805790:	000d883a 	mov	r6,zero
  805794:	000f883a 	mov	r7,zero
  805798:	a80b883a 	mov	r5,r21
  80579c:	a009883a 	mov	r4,r20
  8057a0:	d8800715 	stw	r2,28(sp)
  8057a4:	dd800615 	stw	r22,24(sp)
  8057a8:	08082040 	call	808204 <__ltdf2>
  8057ac:	103fbd0e 	bge	r2,zero,8056a4 <pow+0x298>
  8057b0:	0005883a 	mov	r2,zero
  8057b4:	00cff834 	movhi	r3,16352
  8057b8:	180f883a 	mov	r7,r3
  8057bc:	100d883a 	mov	r6,r2
  8057c0:	980b883a 	mov	r5,r19
  8057c4:	9009883a 	mov	r4,r18
  8057c8:	0807a500 	call	807a50 <__muldf3>
  8057cc:	1009883a 	mov	r4,r2
  8057d0:	180b883a 	mov	r5,r3
  8057d4:	1021883a 	mov	r16,r2
  8057d8:	1823883a 	mov	r17,r3
  8057dc:	0806ed80 	call	806ed8 <rint>
  8057e0:	180f883a 	mov	r7,r3
  8057e4:	8009883a 	mov	r4,r16
  8057e8:	880b883a 	mov	r5,r17
  8057ec:	100d883a 	mov	r6,r2
  8057f0:	08080f40 	call	8080f4 <__nedf2>
  8057f4:	10000426 	beq	r2,zero,805808 <pow+0x3fc>
  8057f8:	00b1fc34 	movhi	r2,51184
  8057fc:	10bfffc4 	addi	r2,r2,-1
  805800:	dd800615 	stw	r22,24(sp)
  805804:	d8800715 	stw	r2,28(sp)
  805808:	b8c00017 	ldw	r3,0(r23)
  80580c:	00800084 	movi	r2,2
  805810:	18bfa41e 	bne	r3,r2,8056a4 <pow+0x298>
  805814:	003fa606 	br	8056b0 <pow+0x2a4>
  805818:	009ffc34 	movhi	r2,32752
  80581c:	000d883a 	mov	r6,zero
  805820:	000f883a 	mov	r7,zero
  805824:	a80b883a 	mov	r5,r21
  805828:	a009883a 	mov	r4,r20
  80582c:	d8800715 	stw	r2,28(sp)
  805830:	d8000615 	stw	zero,24(sp)
  805834:	08082040 	call	808204 <__ltdf2>
  805838:	103ff30e 	bge	r2,zero,805808 <pow+0x3fc>
  80583c:	0005883a 	mov	r2,zero
  805840:	00cff834 	movhi	r3,16352
  805844:	180f883a 	mov	r7,r3
  805848:	100d883a 	mov	r6,r2
  80584c:	980b883a 	mov	r5,r19
  805850:	9009883a 	mov	r4,r18
  805854:	0807a500 	call	807a50 <__muldf3>
  805858:	1009883a 	mov	r4,r2
  80585c:	180b883a 	mov	r5,r3
  805860:	1021883a 	mov	r16,r2
  805864:	1823883a 	mov	r17,r3
  805868:	0806ed80 	call	806ed8 <rint>
  80586c:	180f883a 	mov	r7,r3
  805870:	8009883a 	mov	r4,r16
  805874:	880b883a 	mov	r5,r17
  805878:	100d883a 	mov	r6,r2
  80587c:	08080f40 	call	8080f4 <__nedf2>
  805880:	103fe126 	beq	r2,zero,805808 <pow+0x3fc>
  805884:	00bffc34 	movhi	r2,65520
  805888:	d8800715 	stw	r2,28(sp)
  80588c:	d8000615 	stw	zero,24(sp)
  805890:	003fdd06 	br	805808 <pow+0x3fc>

00805894 <__ieee754_pow>:
  805894:	deffbb04 	addi	sp,sp,-276
  805898:	3005883a 	mov	r2,r6
  80589c:	dd404015 	stw	r21,256(sp)
  8058a0:	dd003f15 	stw	r20,252(sp)
  8058a4:	d9802815 	stw	r6,160(sp)
  8058a8:	2029883a 	mov	r20,r4
  8058ac:	282b883a 	mov	r21,r5
  8058b0:	3009883a 	mov	r4,r6
  8058b4:	380b883a 	mov	r5,r7
  8058b8:	01a00034 	movhi	r6,32768
  8058bc:	31bfffc4 	addi	r6,r6,-1
  8058c0:	dc003b15 	stw	r16,236(sp)
  8058c4:	29a0703a 	and	r16,r5,r6
  8058c8:	1404b03a 	or	r2,r2,r16
  8058cc:	dd804115 	stw	r22,260(sp)
  8058d0:	dc403c15 	stw	r17,240(sp)
  8058d4:	d9c02915 	stw	r7,164(sp)
  8058d8:	382d883a 	mov	r22,r7
  8058dc:	dfc04415 	stw	ra,272(sp)
  8058e0:	200f883a 	mov	r7,r4
  8058e4:	df004315 	stw	fp,268(sp)
  8058e8:	ddc04215 	stw	r23,264(sp)
  8058ec:	dcc03e15 	stw	r19,248(sp)
  8058f0:	dc803d15 	stw	r18,244(sp)
  8058f4:	a023883a 	mov	r17,r20
  8058f8:	2809883a 	mov	r4,r5
  8058fc:	10000826 	beq	r2,zero,805920 <__ieee754_pow+0x8c>
  805900:	a9a4703a 	and	r18,r21,r6
  805904:	009ffc34 	movhi	r2,32752
  805908:	a827883a 	mov	r19,r21
  80590c:	1480180e 	bge	r2,r18,805970 <__ieee754_pow+0xdc>
  805910:	00b00434 	movhi	r2,49168
  805914:	9085883a 	add	r2,r18,r2
  805918:	8884b03a 	or	r2,r17,r2
  80591c:	1000321e 	bne	r2,zero,8059e8 <__ieee754_pow+0x154>
  805920:	0009883a 	mov	r4,zero
  805924:	014ffc34 	movhi	r5,16368
  805928:	d9002815 	stw	r4,160(sp)
  80592c:	d9402915 	stw	r5,164(sp)
  805930:	d9002817 	ldw	r4,160(sp)
  805934:	d9402917 	ldw	r5,164(sp)
  805938:	2005883a 	mov	r2,r4
  80593c:	2807883a 	mov	r3,r5
  805940:	dfc04417 	ldw	ra,272(sp)
  805944:	df004317 	ldw	fp,268(sp)
  805948:	ddc04217 	ldw	r23,264(sp)
  80594c:	dd804117 	ldw	r22,260(sp)
  805950:	dd404017 	ldw	r21,256(sp)
  805954:	dd003f17 	ldw	r20,252(sp)
  805958:	dcc03e17 	ldw	r19,248(sp)
  80595c:	dc803d17 	ldw	r18,244(sp)
  805960:	dc403c17 	ldw	r17,240(sp)
  805964:	dc003b17 	ldw	r16,236(sp)
  805968:	dec04504 	addi	sp,sp,276
  80596c:	f800283a 	ret
  805970:	90802b26 	beq	r18,r2,805a20 <__ieee754_pow+0x18c>
  805974:	143fe616 	blt	r2,r16,805910 <__ieee754_pow+0x7c>
  805978:	80806126 	beq	r16,r2,805b00 <__ieee754_pow+0x26c>
  80597c:	982e403a 	cmpge	r23,r19,zero
  805980:	b8004e26 	beq	r23,zero,805abc <__ieee754_pow+0x228>
  805984:	0039883a 	mov	fp,zero
  805988:	3800281e 	bne	r7,zero,805a2c <__ieee754_pow+0x198>
  80598c:	009ffc34 	movhi	r2,32752
  805990:	80804f26 	beq	r16,r2,805ad0 <__ieee754_pow+0x23c>
  805994:	008ffc34 	movhi	r2,16368
  805998:	80808226 	beq	r16,r2,805ba4 <__ieee754_pow+0x310>
  80599c:	00900034 	movhi	r2,16384
  8059a0:	20828426 	beq	r4,r2,8063b4 <__ieee754_pow+0xb20>
  8059a4:	008ff834 	movhi	r2,16352
  8059a8:	2080201e 	bne	r4,r2,805a2c <__ieee754_pow+0x198>
  8059ac:	98001f16 	blt	r19,zero,805a2c <__ieee754_pow+0x198>
  8059b0:	a80b883a 	mov	r5,r21
  8059b4:	a009883a 	mov	r4,r20
  8059b8:	dfc04417 	ldw	ra,272(sp)
  8059bc:	df004317 	ldw	fp,268(sp)
  8059c0:	ddc04217 	ldw	r23,264(sp)
  8059c4:	dd804117 	ldw	r22,260(sp)
  8059c8:	dd404017 	ldw	r21,256(sp)
  8059cc:	dd003f17 	ldw	r20,252(sp)
  8059d0:	dcc03e17 	ldw	r19,248(sp)
  8059d4:	dc803d17 	ldw	r18,244(sp)
  8059d8:	dc403c17 	ldw	r17,240(sp)
  8059dc:	dc003b17 	ldw	r16,236(sp)
  8059e0:	dec04504 	addi	sp,sp,276
  8059e4:	0806b941 	jmpi	806b94 <__ieee754_sqrt>
  8059e8:	010020b4 	movhi	r4,130
  8059ec:	21303b04 	addi	r4,r4,-16148
  8059f0:	dfc04417 	ldw	ra,272(sp)
  8059f4:	df004317 	ldw	fp,268(sp)
  8059f8:	ddc04217 	ldw	r23,264(sp)
  8059fc:	dd804117 	ldw	r22,260(sp)
  805a00:	dd404017 	ldw	r21,256(sp)
  805a04:	dd003f17 	ldw	r20,252(sp)
  805a08:	dcc03e17 	ldw	r19,248(sp)
  805a0c:	dc803d17 	ldw	r18,244(sp)
  805a10:	dc403c17 	ldw	r17,240(sp)
  805a14:	dc003b17 	ldw	r16,236(sp)
  805a18:	dec04504 	addi	sp,sp,276
  805a1c:	0806ec81 	jmpi	806ec8 <nan>
  805a20:	a03fbb1e 	bne	r20,zero,805910 <__ieee754_pow+0x7c>
  805a24:	003fd306 	br	805974 <__ieee754_pow+0xe0>
  805a28:	0039883a 	mov	fp,zero
  805a2c:	a009883a 	mov	r4,r20
  805a30:	a80b883a 	mov	r5,r21
  805a34:	0806e5c0 	call	806e5c <fabs>
  805a38:	1015883a 	mov	r10,r2
  805a3c:	1817883a 	mov	r11,r3
  805a40:	88001226 	beq	r17,zero,805a8c <__ieee754_pow+0x1f8>
  805a44:	9804d7fa 	srli	r2,r19,31
  805a48:	10bfffc4 	addi	r2,r2,-1
  805a4c:	1706b03a 	or	r3,r2,fp
  805a50:	d8802515 	stw	r2,148(sp)
  805a54:	18002c1e 	bne	r3,zero,805b08 <__ieee754_pow+0x274>
  805a58:	a80f883a 	mov	r7,r21
  805a5c:	a009883a 	mov	r4,r20
  805a60:	a80b883a 	mov	r5,r21
  805a64:	a00d883a 	mov	r6,r20
  805a68:	080795c0 	call	80795c <__subdf3>
  805a6c:	1009883a 	mov	r4,r2
  805a70:	180b883a 	mov	r5,r3
  805a74:	100d883a 	mov	r6,r2
  805a78:	180f883a 	mov	r7,r3
  805a7c:	0807e140 	call	807e14 <__divdf3>
  805a80:	d8802815 	stw	r2,160(sp)
  805a84:	d8c02915 	stw	r3,164(sp)
  805a88:	003fa906 	br	805930 <__ieee754_pow+0x9c>
  805a8c:	009ffc34 	movhi	r2,32752
  805a90:	90800326 	beq	r18,r2,805aa0 <__ieee754_pow+0x20c>
  805a94:	90000226 	beq	r18,zero,805aa0 <__ieee754_pow+0x20c>
  805a98:	008ffc34 	movhi	r2,16368
  805a9c:	90bfe91e 	bne	r18,r2,805a44 <__ieee754_pow+0x1b0>
  805aa0:	b0026316 	blt	r22,zero,806430 <__ieee754_pow+0xb9c>
  805aa4:	5011883a 	mov	r8,r10
  805aa8:	5813883a 	mov	r9,r11
  805aac:	b8023126 	beq	r23,zero,806374 <__ieee754_pow+0xae0>
  805ab0:	da002815 	stw	r8,160(sp)
  805ab4:	da402915 	stw	r9,164(sp)
  805ab8:	003f9d06 	br	805930 <__ieee754_pow+0x9c>
  805abc:	0090d034 	movhi	r2,17216
  805ac0:	10bfffc4 	addi	r2,r2,-1
  805ac4:	1400270e 	bge	r2,r16,805b64 <__ieee754_pow+0x2d0>
  805ac8:	07000084 	movi	fp,2
  805acc:	003fae06 	br	805988 <__ieee754_pow+0xf4>
  805ad0:	00b00434 	movhi	r2,49168
  805ad4:	9085883a 	add	r2,r18,r2
  805ad8:	8884b03a 	or	r2,r17,r2
  805adc:	103f9026 	beq	r2,zero,805920 <__ieee754_pow+0x8c>
  805ae0:	008ffc34 	movhi	r2,16368
  805ae4:	10bfffc4 	addi	r2,r2,-1
  805ae8:	1482d00e 	bge	r2,r18,80662c <__ieee754_pow+0xd98>
  805aec:	b03f900e 	bge	r22,zero,805930 <__ieee754_pow+0x9c>
  805af0:	0005883a 	mov	r2,zero
  805af4:	d8802815 	stw	r2,160(sp)
  805af8:	d8802915 	stw	r2,164(sp)
  805afc:	003f8c06 	br	805930 <__ieee754_pow+0x9c>
  805b00:	383f9e26 	beq	r7,zero,80597c <__ieee754_pow+0xe8>
  805b04:	003f8206 	br	805910 <__ieee754_pow+0x7c>
  805b08:	00907834 	movhi	r2,16864
  805b0c:	1400290e 	bge	r2,r16,805bb4 <__ieee754_pow+0x320>
  805b10:	0090fc34 	movhi	r2,17392
  805b14:	1402500e 	bge	r2,r16,806458 <__ieee754_pow+0xbc4>
  805b18:	008ffc34 	movhi	r2,16368
  805b1c:	10bfffc4 	addi	r2,r2,-1
  805b20:	14800b0e 	bge	r2,r18,805b50 <__ieee754_pow+0x2bc>
  805b24:	05800b0e 	bge	zero,r22,805b54 <__ieee754_pow+0x2c0>
  805b28:	00a20034 	movhi	r2,34816
  805b2c:	109d6704 	addi	r2,r2,30108
  805b30:	00df8e34 	movhi	r3,32312
  805b34:	18f90f04 	addi	r3,r3,-7108
  805b38:	100d883a 	mov	r6,r2
  805b3c:	180f883a 	mov	r7,r3
  805b40:	1009883a 	mov	r4,r2
  805b44:	180b883a 	mov	r5,r3
  805b48:	0807a500 	call	807a50 <__muldf3>
  805b4c:	003fcc06 	br	805a80 <__ieee754_pow+0x1ec>
  805b50:	b03ff516 	blt	r22,zero,805b28 <__ieee754_pow+0x294>
  805b54:	0007883a 	mov	r3,zero
  805b58:	d8c02815 	stw	r3,160(sp)
  805b5c:	d8c02915 	stw	r3,164(sp)
  805b60:	003f7306 	br	805930 <__ieee754_pow+0x9c>
  805b64:	008ffc34 	movhi	r2,16368
  805b68:	10bfffc4 	addi	r2,r2,-1
  805b6c:	143f850e 	bge	r2,r16,805984 <__ieee754_pow+0xf0>
  805b70:	8005d53a 	srai	r2,r16,20
  805b74:	01400504 	movi	r5,20
  805b78:	10ff0044 	addi	r3,r2,-1023
  805b7c:	28c3e10e 	bge	r5,r3,806b04 <__ieee754_pow+0x1270>
  805b80:	00800d04 	movi	r2,52
  805b84:	10c5c83a 	sub	r2,r2,r3
  805b88:	3886d83a 	srl	r3,r7,r2
  805b8c:	1884983a 	sll	r2,r3,r2
  805b90:	38bf7c1e 	bne	r7,r2,805984 <__ieee754_pow+0xf0>
  805b94:	18c0004c 	andi	r3,r3,1
  805b98:	00800084 	movi	r2,2
  805b9c:	10f9c83a 	sub	fp,r2,r3
  805ba0:	003f7906 	br	805988 <__ieee754_pow+0xf4>
  805ba4:	b0038516 	blt	r22,zero,8069bc <__ieee754_pow+0x1128>
  805ba8:	dd002815 	stw	r20,160(sp)
  805bac:	dd402915 	stw	r21,164(sp)
  805bb0:	003f5f06 	br	805930 <__ieee754_pow+0x9c>
  805bb4:	00800434 	movhi	r2,16
  805bb8:	10bfffc4 	addi	r2,r2,-1
  805bbc:	1482900e 	bge	r2,r18,806600 <__ieee754_pow+0xd6c>
  805bc0:	000b883a 	mov	r5,zero
  805bc4:	9005d53a 	srai	r2,r18,20
  805bc8:	00c00434 	movhi	r3,16
  805bcc:	18ffffc4 	addi	r3,r3,-1
  805bd0:	90c8703a 	and	r4,r18,r3
  805bd4:	2887883a 	add	r3,r5,r2
  805bd8:	18bf0044 	addi	r2,r3,-1023
  805bdc:	d8800015 	stw	r2,0(sp)
  805be0:	00800134 	movhi	r2,4
  805be4:	10a62384 	addi	r2,r2,-26482
  805be8:	250ffc34 	orhi	r20,r4,16368
  805bec:	1101ee0e 	bge	r2,r4,8063a8 <__ieee754_pow+0xb14>
  805bf0:	00800334 	movhi	r2,12
  805bf4:	10ad9e44 	addi	r2,r2,-18823
  805bf8:	1101e716 	blt	r2,r4,806398 <__ieee754_pow+0xb04>
  805bfc:	01000044 	movi	r4,1
  805c00:	04000334 	movhi	r16,12
  805c04:	200890fa 	slli	r4,r4,3
  805c08:	da800115 	stw	r10,4(sp)
  805c0c:	dd000215 	stw	r20,8(sp)
  805c10:	d9002c15 	stw	r4,176(sp)
  805c14:	d9402c17 	ldw	r5,176(sp)
  805c18:	010020b4 	movhi	r4,130
  805c1c:	212fd104 	addi	r4,r4,-16572
  805c20:	a02bd07a 	srai	r21,r20,1
  805c24:	2909883a 	add	r4,r5,r4
  805c28:	25800017 	ldw	r22,0(r4)
  805c2c:	25c00117 	ldw	r23,4(r4)
  805c30:	a00b883a 	mov	r5,r20
  805c34:	5009883a 	mov	r4,r10
  805c38:	b00d883a 	mov	r6,r22
  805c3c:	b80f883a 	mov	r7,r23
  805c40:	080795c0 	call	80795c <__subdf3>
  805c44:	d9000117 	ldw	r4,4(sp)
  805c48:	a00b883a 	mov	r5,r20
  805c4c:	b00d883a 	mov	r6,r22
  805c50:	b80f883a 	mov	r7,r23
  805c54:	1025883a 	mov	r18,r2
  805c58:	1827883a 	mov	r19,r3
  805c5c:	08079dc0 	call	8079dc <__adddf3>
  805c60:	0011883a 	mov	r8,zero
  805c64:	024ffc34 	movhi	r9,16368
  805c68:	480b883a 	mov	r5,r9
  805c6c:	4009883a 	mov	r4,r8
  805c70:	180f883a 	mov	r7,r3
  805c74:	100d883a 	mov	r6,r2
  805c78:	0807e140 	call	807e14 <__divdf3>
  805c7c:	d8c02e15 	stw	r3,184(sp)
  805c80:	d8800f15 	stw	r2,60(sp)
  805c84:	d8802d15 	stw	r2,180(sp)
  805c88:	d8802e17 	ldw	r2,184(sp)
  805c8c:	d9800f17 	ldw	r6,60(sp)
  805c90:	9009883a 	mov	r4,r18
  805c94:	980b883a 	mov	r5,r19
  805c98:	100f883a 	mov	r7,r2
  805c9c:	dc800b15 	stw	r18,44(sp)
  805ca0:	dcc00c15 	stw	r19,48(sp)
  805ca4:	d8801015 	stw	r2,64(sp)
  805ca8:	0807a500 	call	807a50 <__muldf3>
  805cac:	d8c03015 	stw	r3,192(sp)
  805cb0:	d9003017 	ldw	r4,192(sp)
  805cb4:	d8802f15 	stw	r2,188(sp)
  805cb8:	d8800315 	stw	r2,12(sp)
  805cbc:	ad480034 	orhi	r21,r21,8192
  805cc0:	0005883a 	mov	r2,zero
  805cc4:	ac2b883a 	add	r21,r21,r16
  805cc8:	000b883a 	mov	r5,zero
  805ccc:	1021883a 	mov	r16,r2
  805cd0:	2005883a 	mov	r2,r4
  805cd4:	800d883a 	mov	r6,r16
  805cd8:	a80f883a 	mov	r7,r21
  805cdc:	d9000415 	stw	r4,16(sp)
  805ce0:	d9002715 	stw	r4,156(sp)
  805ce4:	d9402615 	stw	r5,152(sp)
  805ce8:	d9401615 	stw	r5,88(sp)
  805cec:	d9001715 	stw	r4,92(sp)
  805cf0:	100b883a 	mov	r5,r2
  805cf4:	0009883a 	mov	r4,zero
  805cf8:	0807a500 	call	807a50 <__muldf3>
  805cfc:	d9000b17 	ldw	r4,44(sp)
  805d00:	980b883a 	mov	r5,r19
  805d04:	180f883a 	mov	r7,r3
  805d08:	100d883a 	mov	r6,r2
  805d0c:	080795c0 	call	80795c <__subdf3>
  805d10:	8009883a 	mov	r4,r16
  805d14:	a80b883a 	mov	r5,r21
  805d18:	b80f883a 	mov	r7,r23
  805d1c:	b00d883a 	mov	r6,r22
  805d20:	1021883a 	mov	r16,r2
  805d24:	1823883a 	mov	r17,r3
  805d28:	080795c0 	call	80795c <__subdf3>
  805d2c:	d9000117 	ldw	r4,4(sp)
  805d30:	a00b883a 	mov	r5,r20
  805d34:	180f883a 	mov	r7,r3
  805d38:	100d883a 	mov	r6,r2
  805d3c:	080795c0 	call	80795c <__subdf3>
  805d40:	d9001617 	ldw	r4,88(sp)
  805d44:	d9402717 	ldw	r5,156(sp)
  805d48:	180f883a 	mov	r7,r3
  805d4c:	100d883a 	mov	r6,r2
  805d50:	0807a500 	call	807a50 <__muldf3>
  805d54:	180f883a 	mov	r7,r3
  805d58:	880b883a 	mov	r5,r17
  805d5c:	8009883a 	mov	r4,r16
  805d60:	100d883a 	mov	r6,r2
  805d64:	080795c0 	call	80795c <__subdf3>
  805d68:	d9000f17 	ldw	r4,60(sp)
  805d6c:	d9402e17 	ldw	r5,184(sp)
  805d70:	180f883a 	mov	r7,r3
  805d74:	100d883a 	mov	r6,r2
  805d78:	0807a500 	call	807a50 <__muldf3>
  805d7c:	d9000317 	ldw	r4,12(sp)
  805d80:	d9403017 	ldw	r5,192(sp)
  805d84:	d8803115 	stw	r2,196(sp)
  805d88:	200d883a 	mov	r6,r4
  805d8c:	280f883a 	mov	r7,r5
  805d90:	d8c03215 	stw	r3,200(sp)
  805d94:	0807a500 	call	807a50 <__muldf3>
  805d98:	1009883a 	mov	r4,r2
  805d9c:	180b883a 	mov	r5,r3
  805da0:	100d883a 	mov	r6,r2
  805da4:	180f883a 	mov	r7,r3
  805da8:	1021883a 	mov	r16,r2
  805dac:	1823883a 	mov	r17,r3
  805db0:	0807a500 	call	807a50 <__muldf3>
  805db4:	02129174 	movhi	r8,19013
  805db8:	4213bbc4 	addi	r8,r8,20207
  805dbc:	024ff2b4 	movhi	r9,16330
  805dc0:	4a5f8a04 	addi	r9,r9,32296
  805dc4:	480f883a 	mov	r7,r9
  805dc8:	8009883a 	mov	r4,r16
  805dcc:	880b883a 	mov	r5,r17
  805dd0:	400d883a 	mov	r6,r8
  805dd4:	1029883a 	mov	r20,r2
  805dd8:	182b883a 	mov	r21,r3
  805ddc:	0807a500 	call	807a50 <__muldf3>
  805de0:	0224f2b4 	movhi	r8,37834
  805de4:	4236d944 	addi	r8,r8,-9371
  805de8:	024ff3b4 	movhi	r9,16334
  805dec:	4a619284 	addi	r9,r9,-31158
  805df0:	480f883a 	mov	r7,r9
  805df4:	400d883a 	mov	r6,r8
  805df8:	180b883a 	mov	r5,r3
  805dfc:	1009883a 	mov	r4,r2
  805e00:	08079dc0 	call	8079dc <__adddf3>
  805e04:	180f883a 	mov	r7,r3
  805e08:	8009883a 	mov	r4,r16
  805e0c:	880b883a 	mov	r5,r17
  805e10:	100d883a 	mov	r6,r2
  805e14:	0807a500 	call	807a50 <__muldf3>
  805e18:	022a4774 	movhi	r8,43293
  805e1c:	42104044 	addi	r8,r8,16641
  805e20:	024ff474 	movhi	r9,16337
  805e24:	4a5d1804 	addi	r9,r9,29792
  805e28:	480f883a 	mov	r7,r9
  805e2c:	400d883a 	mov	r6,r8
  805e30:	180b883a 	mov	r5,r3
  805e34:	1009883a 	mov	r4,r2
  805e38:	08079dc0 	call	8079dc <__adddf3>
  805e3c:	180f883a 	mov	r7,r3
  805e40:	8009883a 	mov	r4,r16
  805e44:	880b883a 	mov	r5,r17
  805e48:	100d883a 	mov	r6,r2
  805e4c:	0807a500 	call	807a50 <__muldf3>
  805e50:	021463f4 	movhi	r8,20879
  805e54:	42099344 	addi	r8,r8,9805
  805e58:	024ff574 	movhi	r9,16341
  805e5c:	4a555544 	addi	r9,r9,21845
  805e60:	480f883a 	mov	r7,r9
  805e64:	400d883a 	mov	r6,r8
  805e68:	180b883a 	mov	r5,r3
  805e6c:	1009883a 	mov	r4,r2
  805e70:	08079dc0 	call	8079dc <__adddf3>
  805e74:	180f883a 	mov	r7,r3
  805e78:	8009883a 	mov	r4,r16
  805e7c:	880b883a 	mov	r5,r17
  805e80:	100d883a 	mov	r6,r2
  805e84:	0807a500 	call	807a50 <__muldf3>
  805e88:	0236dc34 	movhi	r8,56176
  805e8c:	422affc4 	addi	r8,r8,-21505
  805e90:	024ff6f4 	movhi	r9,16347
  805e94:	4a5b6d84 	addi	r9,r9,28086
  805e98:	480f883a 	mov	r7,r9
  805e9c:	400d883a 	mov	r6,r8
  805ea0:	180b883a 	mov	r5,r3
  805ea4:	1009883a 	mov	r4,r2
  805ea8:	08079dc0 	call	8079dc <__adddf3>
  805eac:	180f883a 	mov	r7,r3
  805eb0:	8009883a 	mov	r4,r16
  805eb4:	880b883a 	mov	r5,r17
  805eb8:	100d883a 	mov	r6,r2
  805ebc:	0807a500 	call	807a50 <__muldf3>
  805ec0:	020cccf4 	movhi	r8,13107
  805ec4:	420cc0c4 	addi	r8,r8,13059
  805ec8:	024ff8f4 	movhi	r9,16355
  805ecc:	4a4cccc4 	addi	r9,r9,13107
  805ed0:	480f883a 	mov	r7,r9
  805ed4:	400d883a 	mov	r6,r8
  805ed8:	180b883a 	mov	r5,r3
  805edc:	1009883a 	mov	r4,r2
  805ee0:	08079dc0 	call	8079dc <__adddf3>
  805ee4:	180f883a 	mov	r7,r3
  805ee8:	a80b883a 	mov	r5,r21
  805eec:	a009883a 	mov	r4,r20
  805ef0:	100d883a 	mov	r6,r2
  805ef4:	0807a500 	call	807a50 <__muldf3>
  805ef8:	d9000317 	ldw	r4,12(sp)
  805efc:	d9403017 	ldw	r5,192(sp)
  805f00:	d9801617 	ldw	r6,88(sp)
  805f04:	d9c02717 	ldw	r7,156(sp)
  805f08:	1021883a 	mov	r16,r2
  805f0c:	1823883a 	mov	r17,r3
  805f10:	08079dc0 	call	8079dc <__adddf3>
  805f14:	d9003117 	ldw	r4,196(sp)
  805f18:	d9403217 	ldw	r5,200(sp)
  805f1c:	180f883a 	mov	r7,r3
  805f20:	100d883a 	mov	r6,r2
  805f24:	d9001415 	stw	r4,80(sp)
  805f28:	d9401515 	stw	r5,84(sp)
  805f2c:	0807a500 	call	807a50 <__muldf3>
  805f30:	180f883a 	mov	r7,r3
  805f34:	8009883a 	mov	r4,r16
  805f38:	880b883a 	mov	r5,r17
  805f3c:	100d883a 	mov	r6,r2
  805f40:	08079dc0 	call	8079dc <__adddf3>
  805f44:	d9001617 	ldw	r4,88(sp)
  805f48:	d9402717 	ldw	r5,156(sp)
  805f4c:	d8803315 	stw	r2,204(sp)
  805f50:	200d883a 	mov	r6,r4
  805f54:	280f883a 	mov	r7,r5
  805f58:	d8c03415 	stw	r3,208(sp)
  805f5c:	0807a500 	call	807a50 <__muldf3>
  805f60:	182f883a 	mov	r23,r3
  805f64:	05500234 	movhi	r21,16392
  805f68:	0029883a 	mov	r20,zero
  805f6c:	b80b883a 	mov	r5,r23
  805f70:	a00d883a 	mov	r6,r20
  805f74:	a80f883a 	mov	r7,r21
  805f78:	1009883a 	mov	r4,r2
  805f7c:	d8800715 	stw	r2,28(sp)
  805f80:	d8c00815 	stw	r3,32(sp)
  805f84:	08079dc0 	call	8079dc <__adddf3>
  805f88:	d9003317 	ldw	r4,204(sp)
  805f8c:	d9403417 	ldw	r5,208(sp)
  805f90:	180f883a 	mov	r7,r3
  805f94:	100d883a 	mov	r6,r2
  805f98:	d9000515 	stw	r4,20(sp)
  805f9c:	d9400615 	stw	r5,24(sp)
  805fa0:	08079dc0 	call	8079dc <__adddf3>
  805fa4:	d9001617 	ldw	r4,88(sp)
  805fa8:	d9402717 	ldw	r5,156(sp)
  805fac:	0025883a 	mov	r18,zero
  805fb0:	900d883a 	mov	r6,r18
  805fb4:	180f883a 	mov	r7,r3
  805fb8:	1823883a 	mov	r17,r3
  805fbc:	0807a500 	call	807a50 <__muldf3>
  805fc0:	d9001417 	ldw	r4,80(sp)
  805fc4:	d9403217 	ldw	r5,200(sp)
  805fc8:	880f883a 	mov	r7,r17
  805fcc:	900d883a 	mov	r6,r18
  805fd0:	d8803515 	stw	r2,212(sp)
  805fd4:	d8c03615 	stw	r3,216(sp)
  805fd8:	0807a500 	call	807a50 <__muldf3>
  805fdc:	a80f883a 	mov	r7,r21
  805fe0:	880b883a 	mov	r5,r17
  805fe4:	000d883a 	mov	r6,zero
  805fe8:	9009883a 	mov	r4,r18
  805fec:	1021883a 	mov	r16,r2
  805ff0:	1823883a 	mov	r17,r3
  805ff4:	080795c0 	call	80795c <__subdf3>
  805ff8:	d9800717 	ldw	r6,28(sp)
  805ffc:	b80f883a 	mov	r7,r23
  806000:	180b883a 	mov	r5,r3
  806004:	1009883a 	mov	r4,r2
  806008:	080795c0 	call	80795c <__subdf3>
  80600c:	d9000517 	ldw	r4,20(sp)
  806010:	d9403417 	ldw	r5,208(sp)
  806014:	180f883a 	mov	r7,r3
  806018:	100d883a 	mov	r6,r2
  80601c:	080795c0 	call	80795c <__subdf3>
  806020:	d9000317 	ldw	r4,12(sp)
  806024:	d9403017 	ldw	r5,192(sp)
  806028:	180f883a 	mov	r7,r3
  80602c:	100d883a 	mov	r6,r2
  806030:	0807a500 	call	807a50 <__muldf3>
  806034:	180f883a 	mov	r7,r3
  806038:	880b883a 	mov	r5,r17
  80603c:	8009883a 	mov	r4,r16
  806040:	100d883a 	mov	r6,r2
  806044:	08079dc0 	call	8079dc <__adddf3>
  806048:	102d883a 	mov	r22,r2
  80604c:	d9003617 	ldw	r4,216(sp)
  806050:	d8803517 	ldw	r2,212(sp)
  806054:	d9403617 	ldw	r5,216(sp)
  806058:	182f883a 	mov	r23,r3
  80605c:	b00d883a 	mov	r6,r22
  806060:	b80f883a 	mov	r7,r23
  806064:	d9000a15 	stw	r4,40(sp)
  806068:	1009883a 	mov	r4,r2
  80606c:	054ffbf4 	movhi	r21,16367
  806070:	ad71c244 	addi	r21,r21,-14583
  806074:	dd800d15 	stw	r22,52(sp)
  806078:	ddc00e15 	stw	r23,56(sp)
  80607c:	05380034 	movhi	r20,57344
  806080:	d8800915 	stw	r2,36(sp)
  806084:	08079dc0 	call	8079dc <__adddf3>
  806088:	180b883a 	mov	r5,r3
  80608c:	a00d883a 	mov	r6,r20
  806090:	a80f883a 	mov	r7,r21
  806094:	9009883a 	mov	r4,r18
  806098:	1823883a 	mov	r17,r3
  80609c:	0807a500 	call	807a50 <__muldf3>
  8060a0:	020516f4 	movhi	r8,5211
  8060a4:	42007d44 	addi	r8,r8,501
  8060a8:	026f8fb4 	movhi	r9,48702
  8060ac:	4a4bf804 	addi	r9,r9,12256
  8060b0:	480f883a 	mov	r7,r9
  8060b4:	400d883a 	mov	r6,r8
  8060b8:	880b883a 	mov	r5,r17
  8060bc:	9009883a 	mov	r4,r18
  8060c0:	d8803715 	stw	r2,220(sp)
  8060c4:	d8c03815 	stw	r3,224(sp)
  8060c8:	0807a500 	call	807a50 <__muldf3>
  8060cc:	d9800917 	ldw	r6,36(sp)
  8060d0:	d9c03617 	ldw	r7,216(sp)
  8060d4:	880b883a 	mov	r5,r17
  8060d8:	9009883a 	mov	r4,r18
  8060dc:	1021883a 	mov	r16,r2
  8060e0:	1823883a 	mov	r17,r3
  8060e4:	080795c0 	call	80795c <__subdf3>
  8060e8:	d9000d17 	ldw	r4,52(sp)
  8060ec:	b80b883a 	mov	r5,r23
  8060f0:	180f883a 	mov	r7,r3
  8060f4:	100d883a 	mov	r6,r2
  8060f8:	080795c0 	call	80795c <__subdf3>
  8060fc:	180b883a 	mov	r5,r3
  806100:	a80f883a 	mov	r7,r21
  806104:	01b70eb4 	movhi	r6,56378
  806108:	3180ff44 	addi	r6,r6,1021
  80610c:	1009883a 	mov	r4,r2
  806110:	0807a500 	call	807a50 <__muldf3>
  806114:	180f883a 	mov	r7,r3
  806118:	880b883a 	mov	r5,r17
  80611c:	8009883a 	mov	r4,r16
  806120:	100d883a 	mov	r6,r2
  806124:	08079dc0 	call	8079dc <__adddf3>
  806128:	d9402c17 	ldw	r5,176(sp)
  80612c:	010020b4 	movhi	r4,130
  806130:	212fd504 	addi	r4,r4,-16556
  806134:	2909883a 	add	r4,r5,r4
  806138:	22400117 	ldw	r9,4(r4)
  80613c:	22000017 	ldw	r8,0(r4)
  806140:	180b883a 	mov	r5,r3
  806144:	480f883a 	mov	r7,r9
  806148:	400d883a 	mov	r6,r8
  80614c:	1009883a 	mov	r4,r2
  806150:	08079dc0 	call	8079dc <__adddf3>
  806154:	d9000017 	ldw	r4,0(sp)
  806158:	182f883a 	mov	r23,r3
  80615c:	102d883a 	mov	r22,r2
  806160:	08083140 	call	808314 <__floatsidf>
  806164:	d9402c17 	ldw	r5,176(sp)
  806168:	010020b4 	movhi	r4,130
  80616c:	212fd904 	addi	r4,r4,-16540
  806170:	b00d883a 	mov	r6,r22
  806174:	2911883a 	add	r8,r5,r4
  806178:	d9003717 	ldw	r4,220(sp)
  80617c:	d9403817 	ldw	r5,224(sp)
  806180:	45000017 	ldw	r20,0(r8)
  806184:	d9002315 	stw	r4,140(sp)
  806188:	d9003817 	ldw	r4,224(sp)
  80618c:	45400117 	ldw	r21,4(r8)
  806190:	b80f883a 	mov	r7,r23
  806194:	d9002415 	stw	r4,144(sp)
  806198:	d9002317 	ldw	r4,140(sp)
  80619c:	1021883a 	mov	r16,r2
  8061a0:	1823883a 	mov	r17,r3
  8061a4:	dd802115 	stw	r22,132(sp)
  8061a8:	ddc02215 	stw	r23,136(sp)
  8061ac:	08079dc0 	call	8079dc <__adddf3>
  8061b0:	180b883a 	mov	r5,r3
  8061b4:	1009883a 	mov	r4,r2
  8061b8:	a00d883a 	mov	r6,r20
  8061bc:	a80f883a 	mov	r7,r21
  8061c0:	08079dc0 	call	8079dc <__adddf3>
  8061c4:	180f883a 	mov	r7,r3
  8061c8:	8009883a 	mov	r4,r16
  8061cc:	880b883a 	mov	r5,r17
  8061d0:	100d883a 	mov	r6,r2
  8061d4:	08079dc0 	call	8079dc <__adddf3>
  8061d8:	180b883a 	mov	r5,r3
  8061dc:	0009883a 	mov	r4,zero
  8061e0:	800d883a 	mov	r6,r16
  8061e4:	880f883a 	mov	r7,r17
  8061e8:	d9001b15 	stw	r4,108(sp)
  8061ec:	d8c01c15 	stw	r3,112(sp)
  8061f0:	080795c0 	call	80795c <__subdf3>
  8061f4:	180b883a 	mov	r5,r3
  8061f8:	a80f883a 	mov	r7,r21
  8061fc:	1009883a 	mov	r4,r2
  806200:	a00d883a 	mov	r6,r20
  806204:	080795c0 	call	80795c <__subdf3>
  806208:	d9802317 	ldw	r6,140(sp)
  80620c:	d9c03817 	ldw	r7,224(sp)
  806210:	180b883a 	mov	r5,r3
  806214:	1009883a 	mov	r4,r2
  806218:	080795c0 	call	80795c <__subdf3>
  80621c:	d9002117 	ldw	r4,132(sp)
  806220:	1011883a 	mov	r8,r2
  806224:	1813883a 	mov	r9,r3
  806228:	b80b883a 	mov	r5,r23
  80622c:	480f883a 	mov	r7,r9
  806230:	400d883a 	mov	r6,r8
  806234:	080795c0 	call	80795c <__subdf3>
  806238:	1823883a 	mov	r17,r3
  80623c:	d8c02517 	ldw	r3,148(sp)
  806240:	1021883a 	mov	r16,r2
  806244:	e0bfffc4 	addi	r2,fp,-1
  806248:	1884b03a 	or	r2,r3,r2
  80624c:	1000731e 	bne	r2,zero,80641c <__ieee754_pow+0xb88>
  806250:	0009883a 	mov	r4,zero
  806254:	016ffc34 	movhi	r5,49136
  806258:	d9001915 	stw	r4,100(sp)
  80625c:	d9401a15 	stw	r5,104(sp)
  806260:	d9402917 	ldw	r5,164(sp)
  806264:	d9002817 	ldw	r4,160(sp)
  806268:	0029883a 	mov	r20,zero
  80626c:	a00d883a 	mov	r6,r20
  806270:	280f883a 	mov	r7,r5
  806274:	2827883a 	mov	r19,r5
  806278:	080795c0 	call	80795c <__subdf3>
  80627c:	d9001b17 	ldw	r4,108(sp)
  806280:	d9401c17 	ldw	r5,112(sp)
  806284:	180f883a 	mov	r7,r3
  806288:	100d883a 	mov	r6,r2
  80628c:	0807a500 	call	807a50 <__muldf3>
  806290:	d9c02917 	ldw	r7,164(sp)
  806294:	d9802817 	ldw	r6,160(sp)
  806298:	880b883a 	mov	r5,r17
  80629c:	8009883a 	mov	r4,r16
  8062a0:	1823883a 	mov	r17,r3
  8062a4:	1021883a 	mov	r16,r2
  8062a8:	0807a500 	call	807a50 <__muldf3>
  8062ac:	180f883a 	mov	r7,r3
  8062b0:	880b883a 	mov	r5,r17
  8062b4:	8009883a 	mov	r4,r16
  8062b8:	100d883a 	mov	r6,r2
  8062bc:	08079dc0 	call	8079dc <__adddf3>
  8062c0:	d9401c17 	ldw	r5,112(sp)
  8062c4:	d9001b17 	ldw	r4,108(sp)
  8062c8:	a00d883a 	mov	r6,r20
  8062cc:	980f883a 	mov	r7,r19
  8062d0:	1029883a 	mov	r20,r2
  8062d4:	182b883a 	mov	r21,r3
  8062d8:	0807a500 	call	807a50 <__muldf3>
  8062dc:	1025883a 	mov	r18,r2
  8062e0:	1827883a 	mov	r19,r3
  8062e4:	a009883a 	mov	r4,r20
  8062e8:	a80b883a 	mov	r5,r21
  8062ec:	900d883a 	mov	r6,r18
  8062f0:	980f883a 	mov	r7,r19
  8062f4:	dd001d15 	stw	r20,116(sp)
  8062f8:	dc801f15 	stw	r18,124(sp)
  8062fc:	dd401e15 	stw	r21,120(sp)
  806300:	dcc02015 	stw	r19,128(sp)
  806304:	08079dc0 	call	8079dc <__adddf3>
  806308:	1823883a 	mov	r17,r3
  80630c:	01102434 	movhi	r4,16528
  806310:	213fffc4 	addi	r4,r4,-1
  806314:	1021883a 	mov	r16,r2
  806318:	182f883a 	mov	r23,r3
  80631c:	dc401815 	stw	r17,96(sp)
  806320:	100b883a 	mov	r5,r2
  806324:	20c02c0e 	bge	r4,r3,8063d8 <__ieee754_pow+0xb44>
  806328:	00afdc34 	movhi	r2,49008
  80632c:	1885883a 	add	r2,r3,r2
  806330:	2884b03a 	or	r2,r5,r2
  806334:	1001a626 	beq	r2,zero,8069d0 <__ieee754_pow+0x113c>
  806338:	04220034 	movhi	r16,34816
  80633c:	841d6704 	addi	r16,r16,30108
  806340:	045f8e34 	movhi	r17,32312
  806344:	8c790f04 	addi	r17,r17,-7108
  806348:	d9401a17 	ldw	r5,104(sp)
  80634c:	d9001917 	ldw	r4,100(sp)
  806350:	800d883a 	mov	r6,r16
  806354:	880f883a 	mov	r7,r17
  806358:	0807a500 	call	807a50 <__muldf3>
  80635c:	180b883a 	mov	r5,r3
  806360:	800d883a 	mov	r6,r16
  806364:	880f883a 	mov	r7,r17
  806368:	1009883a 	mov	r4,r2
  80636c:	0807a500 	call	807a50 <__muldf3>
  806370:	003dc306 	br	805a80 <__ieee754_pow+0x1ec>
  806374:	00b00434 	movhi	r2,49168
  806378:	9085883a 	add	r2,r18,r2
  80637c:	e084b03a 	or	r2,fp,r2
  806380:	1000af1e 	bne	r2,zero,806640 <__ieee754_pow+0xdac>
  806384:	480f883a 	mov	r7,r9
  806388:	4009883a 	mov	r4,r8
  80638c:	480b883a 	mov	r5,r9
  806390:	400d883a 	mov	r6,r8
  806394:	003db406 	br	805a68 <__ieee754_pow+0x1d4>
  806398:	00bffc34 	movhi	r2,65520
  80639c:	18ff0084 	addi	r3,r3,-1022
  8063a0:	a0a9883a 	add	r20,r20,r2
  8063a4:	d8c00015 	stw	r3,0(sp)
  8063a8:	0009883a 	mov	r4,zero
  8063ac:	04000234 	movhi	r16,8
  8063b0:	003e1406 	br	805c04 <__ieee754_pow+0x370>
  8063b4:	a80f883a 	mov	r7,r21
  8063b8:	a009883a 	mov	r4,r20
  8063bc:	a80b883a 	mov	r5,r21
  8063c0:	a00d883a 	mov	r6,r20
  8063c4:	0807a500 	call	807a50 <__muldf3>
  8063c8:	180b883a 	mov	r5,r3
  8063cc:	d8802815 	stw	r2,160(sp)
  8063d0:	d9402915 	stw	r5,164(sp)
  8063d4:	003d5606 	br	805930 <__ieee754_pow+0x9c>
  8063d8:	d9001817 	ldw	r4,96(sp)
  8063dc:	00a00034 	movhi	r2,32768
  8063e0:	10bfffc4 	addi	r2,r2,-1
  8063e4:	00d02474 	movhi	r3,16529
  8063e8:	18f2ffc4 	addi	r3,r3,-13313
  8063ec:	20b8703a 	and	fp,r4,r2
  8063f0:	1f009d0e 	bge	r3,fp,806668 <__ieee754_pow+0xdd4>
  8063f4:	008fdbf4 	movhi	r2,16239
  8063f8:	108d0004 	addi	r2,r2,13312
  8063fc:	2085883a 	add	r2,r4,r2
  806400:	1144b03a 	or	r2,r2,r5
  806404:	1001c626 	beq	r2,zero,806b20 <__ieee754_pow+0x128c>
  806408:	0430be74 	movhi	r16,49913
  80640c:	843cd644 	addi	r16,r16,-3239
  806410:	04406974 	movhi	r17,421
  806414:	8c5b87c4 	addi	r17,r17,28191
  806418:	003fcb06 	br	806348 <__ieee754_pow+0xab4>
  80641c:	0005883a 	mov	r2,zero
  806420:	00cffc34 	movhi	r3,16368
  806424:	d8801915 	stw	r2,100(sp)
  806428:	d8c01a15 	stw	r3,104(sp)
  80642c:	003f8c06 	br	806260 <__ieee754_pow+0x9cc>
  806430:	0005883a 	mov	r2,zero
  806434:	00cffc34 	movhi	r3,16368
  806438:	180b883a 	mov	r5,r3
  80643c:	580f883a 	mov	r7,r11
  806440:	1009883a 	mov	r4,r2
  806444:	500d883a 	mov	r6,r10
  806448:	0807e140 	call	807e14 <__divdf3>
  80644c:	1011883a 	mov	r8,r2
  806450:	1813883a 	mov	r9,r3
  806454:	003d9506 	br	805aac <__ieee754_pow+0x218>
  806458:	008ffc34 	movhi	r2,16368
  80645c:	10bfff84 	addi	r2,r2,-2
  806460:	14bdbb0e 	bge	r2,r18,805b50 <__ieee754_pow+0x2bc>
  806464:	008ffc34 	movhi	r2,16368
  806468:	14bdae16 	blt	r2,r18,805b24 <__ieee754_pow+0x290>
  80646c:	580b883a 	mov	r5,r11
  806470:	5009883a 	mov	r4,r10
  806474:	000d883a 	mov	r6,zero
  806478:	100f883a 	mov	r7,r2
  80647c:	080795c0 	call	80795c <__subdf3>
  806480:	1021883a 	mov	r16,r2
  806484:	1823883a 	mov	r17,r3
  806488:	00980034 	movhi	r2,24576
  80648c:	00cffdf4 	movhi	r3,16375
  806490:	18c551c4 	addi	r3,r3,5447
  806494:	8009883a 	mov	r4,r16
  806498:	880b883a 	mov	r5,r17
  80649c:	180f883a 	mov	r7,r3
  8064a0:	100d883a 	mov	r6,r2
  8064a4:	0807a500 	call	807a50 <__muldf3>
  8064a8:	023e17b4 	movhi	r8,63582
  8064ac:	4237d104 	addi	r8,r8,-8380
  8064b0:	024f9574 	movhi	r9,15957
  8064b4:	4a6b82c4 	addi	r9,r9,-20981
  8064b8:	480f883a 	mov	r7,r9
  8064bc:	400d883a 	mov	r6,r8
  8064c0:	8009883a 	mov	r4,r16
  8064c4:	880b883a 	mov	r5,r17
  8064c8:	102d883a 	mov	r22,r2
  8064cc:	182f883a 	mov	r23,r3
  8064d0:	0807a500 	call	807a50 <__muldf3>
  8064d4:	8009883a 	mov	r4,r16
  8064d8:	880b883a 	mov	r5,r17
  8064dc:	800d883a 	mov	r6,r16
  8064e0:	880f883a 	mov	r7,r17
  8064e4:	d8802a15 	stw	r2,168(sp)
  8064e8:	d8c02b15 	stw	r3,172(sp)
  8064ec:	0807a500 	call	807a50 <__muldf3>
  8064f0:	0011883a 	mov	r8,zero
  8064f4:	026ff434 	movhi	r9,49104
  8064f8:	480f883a 	mov	r7,r9
  8064fc:	8009883a 	mov	r4,r16
  806500:	880b883a 	mov	r5,r17
  806504:	400d883a 	mov	r6,r8
  806508:	1029883a 	mov	r20,r2
  80650c:	182b883a 	mov	r21,r3
  806510:	0807a500 	call	807a50 <__muldf3>
  806514:	02155574 	movhi	r8,21845
  806518:	42155544 	addi	r8,r8,21845
  80651c:	024ff574 	movhi	r9,16341
  806520:	4a555544 	addi	r9,r9,21845
  806524:	480f883a 	mov	r7,r9
  806528:	400d883a 	mov	r6,r8
  80652c:	180b883a 	mov	r5,r3
  806530:	1009883a 	mov	r4,r2
  806534:	08079dc0 	call	8079dc <__adddf3>
  806538:	180f883a 	mov	r7,r3
  80653c:	8009883a 	mov	r4,r16
  806540:	880b883a 	mov	r5,r17
  806544:	100d883a 	mov	r6,r2
  806548:	0807a500 	call	807a50 <__muldf3>
  80654c:	0011883a 	mov	r8,zero
  806550:	024ff834 	movhi	r9,16352
  806554:	480b883a 	mov	r5,r9
  806558:	4009883a 	mov	r4,r8
  80655c:	180f883a 	mov	r7,r3
  806560:	100d883a 	mov	r6,r2
  806564:	080795c0 	call	80795c <__subdf3>
  806568:	180f883a 	mov	r7,r3
  80656c:	a80b883a 	mov	r5,r21
  806570:	a009883a 	mov	r4,r20
  806574:	100d883a 	mov	r6,r2
  806578:	0807a500 	call	807a50 <__muldf3>
  80657c:	02194b34 	movhi	r8,25900
  806580:	4220bf84 	addi	r8,r8,-32002
  806584:	026ffdf4 	movhi	r9,49143
  806588:	4a4551c4 	addi	r9,r9,5447
  80658c:	480f883a 	mov	r7,r9
  806590:	400d883a 	mov	r6,r8
  806594:	180b883a 	mov	r5,r3
  806598:	1009883a 	mov	r4,r2
  80659c:	0807a500 	call	807a50 <__muldf3>
  8065a0:	d9402b17 	ldw	r5,172(sp)
  8065a4:	d9002a17 	ldw	r4,168(sp)
  8065a8:	180f883a 	mov	r7,r3
  8065ac:	100d883a 	mov	r6,r2
  8065b0:	08079dc0 	call	8079dc <__adddf3>
  8065b4:	100d883a 	mov	r6,r2
  8065b8:	b009883a 	mov	r4,r22
  8065bc:	b80b883a 	mov	r5,r23
  8065c0:	180f883a 	mov	r7,r3
  8065c4:	1021883a 	mov	r16,r2
  8065c8:	1823883a 	mov	r17,r3
  8065cc:	08079dc0 	call	8079dc <__adddf3>
  8065d0:	180b883a 	mov	r5,r3
  8065d4:	0009883a 	mov	r4,zero
  8065d8:	b00d883a 	mov	r6,r22
  8065dc:	b80f883a 	mov	r7,r23
  8065e0:	d9001b15 	stw	r4,108(sp)
  8065e4:	d8c01c15 	stw	r3,112(sp)
  8065e8:	080795c0 	call	80795c <__subdf3>
  8065ec:	1011883a 	mov	r8,r2
  8065f0:	1813883a 	mov	r9,r3
  8065f4:	8009883a 	mov	r4,r16
  8065f8:	880b883a 	mov	r5,r17
  8065fc:	003f0b06 	br	80622c <__ieee754_pow+0x998>
  806600:	0005883a 	mov	r2,zero
  806604:	00d0d034 	movhi	r3,17216
  806608:	580b883a 	mov	r5,r11
  80660c:	5009883a 	mov	r4,r10
  806610:	180f883a 	mov	r7,r3
  806614:	100d883a 	mov	r6,r2
  806618:	0807a500 	call	807a50 <__muldf3>
  80661c:	1015883a 	mov	r10,r2
  806620:	1825883a 	mov	r18,r3
  806624:	017ff2c4 	movi	r5,-53
  806628:	003d6606 	br	805bc4 <__ieee754_pow+0x330>
  80662c:	b03d300e 	bge	r22,zero,805af0 <__ieee754_pow+0x25c>
  806630:	d9402917 	ldw	r5,164(sp)
  806634:	28e0003c 	xorhi	r3,r5,32768
  806638:	d8c02915 	stw	r3,164(sp)
  80663c:	003cbc06 	br	805930 <__ieee754_pow+0x9c>
  806640:	00800044 	movi	r2,1
  806644:	e0bd1a1e 	bne	fp,r2,805ab0 <__ieee754_pow+0x21c>
  806648:	48e0003c 	xorhi	r3,r9,32768
  80664c:	da002815 	stw	r8,160(sp)
  806650:	d8c02915 	stw	r3,164(sp)
  806654:	003cb606 	br	805930 <__ieee754_pow+0x9c>
  806658:	d9001817 	ldw	r4,96(sp)
  80665c:	00a00034 	movhi	r2,32768
  806660:	10bfffc4 	addi	r2,r2,-1
  806664:	20b8703a 	and	fp,r4,r2
  806668:	008ff834 	movhi	r2,16352
  80666c:	1700fc16 	blt	r2,fp,806a60 <__ieee754_pow+0x11cc>
  806670:	0039883a 	mov	fp,zero
  806674:	d8001315 	stw	zero,76(sp)
  806678:	0025883a 	mov	r18,zero
  80667c:	0005883a 	mov	r2,zero
  806680:	00cff9b4 	movhi	r3,16358
  806684:	18cb90c4 	addi	r3,r3,11843
  806688:	9009883a 	mov	r4,r18
  80668c:	b80b883a 	mov	r5,r23
  806690:	180f883a 	mov	r7,r3
  806694:	100d883a 	mov	r6,r2
  806698:	0807a500 	call	807a50 <__muldf3>
  80669c:	d9c02017 	ldw	r7,128(sp)
  8066a0:	d9801f17 	ldw	r6,124(sp)
  8066a4:	9009883a 	mov	r4,r18
  8066a8:	b80b883a 	mov	r5,r23
  8066ac:	b823883a 	mov	r17,r23
  8066b0:	102d883a 	mov	r22,r2
  8066b4:	182f883a 	mov	r23,r3
  8066b8:	080795c0 	call	80795c <__subdf3>
  8066bc:	d9401e17 	ldw	r5,120(sp)
  8066c0:	d9001d17 	ldw	r4,116(sp)
  8066c4:	180f883a 	mov	r7,r3
  8066c8:	100d883a 	mov	r6,r2
  8066cc:	080795c0 	call	80795c <__subdf3>
  8066d0:	023fbeb4 	movhi	r8,65274
  8066d4:	420e7bc4 	addi	r8,r8,14831
  8066d8:	024ff9b4 	movhi	r9,16358
  8066dc:	4a4b9084 	addi	r9,r9,11842
  8066e0:	480f883a 	mov	r7,r9
  8066e4:	400d883a 	mov	r6,r8
  8066e8:	180b883a 	mov	r5,r3
  8066ec:	1009883a 	mov	r4,r2
  8066f0:	0807a500 	call	807a50 <__muldf3>
  8066f4:	02032a34 	movhi	r8,3240
  8066f8:	421b0e44 	addi	r8,r8,27705
  8066fc:	026f8834 	movhi	r9,48672
  806700:	4a571844 	addi	r9,r9,23649
  806704:	480f883a 	mov	r7,r9
  806708:	400d883a 	mov	r6,r8
  80670c:	9009883a 	mov	r4,r18
  806710:	880b883a 	mov	r5,r17
  806714:	1021883a 	mov	r16,r2
  806718:	1823883a 	mov	r17,r3
  80671c:	0807a500 	call	807a50 <__muldf3>
  806720:	180f883a 	mov	r7,r3
  806724:	880b883a 	mov	r5,r17
  806728:	8009883a 	mov	r4,r16
  80672c:	100d883a 	mov	r6,r2
  806730:	08079dc0 	call	8079dc <__adddf3>
  806734:	100d883a 	mov	r6,r2
  806738:	b009883a 	mov	r4,r22
  80673c:	b80b883a 	mov	r5,r23
  806740:	180f883a 	mov	r7,r3
  806744:	1021883a 	mov	r16,r2
  806748:	1823883a 	mov	r17,r3
  80674c:	08079dc0 	call	8079dc <__adddf3>
  806750:	1009883a 	mov	r4,r2
  806754:	180b883a 	mov	r5,r3
  806758:	b00d883a 	mov	r6,r22
  80675c:	b80f883a 	mov	r7,r23
  806760:	d8803915 	stw	r2,228(sp)
  806764:	d8c03a15 	stw	r3,232(sp)
  806768:	d8801115 	stw	r2,68(sp)
  80676c:	d8c01215 	stw	r3,72(sp)
  806770:	080795c0 	call	80795c <__subdf3>
  806774:	180f883a 	mov	r7,r3
  806778:	8009883a 	mov	r4,r16
  80677c:	880b883a 	mov	r5,r17
  806780:	100d883a 	mov	r6,r2
  806784:	080795c0 	call	80795c <__subdf3>
  806788:	d9001117 	ldw	r4,68(sp)
  80678c:	d9403a17 	ldw	r5,232(sp)
  806790:	1029883a 	mov	r20,r2
  806794:	200d883a 	mov	r6,r4
  806798:	280f883a 	mov	r7,r5
  80679c:	182b883a 	mov	r21,r3
  8067a0:	0807a500 	call	807a50 <__muldf3>
  8067a4:	1021883a 	mov	r16,r2
  8067a8:	1823883a 	mov	r17,r3
  8067ac:	009caff4 	movhi	r2,29375
  8067b0:	10a93404 	addi	r2,r2,-23344
  8067b4:	00cf99b4 	movhi	r3,15974
  8067b8:	18cdda44 	addi	r3,r3,14185
  8067bc:	8009883a 	mov	r4,r16
  8067c0:	880b883a 	mov	r5,r17
  8067c4:	180f883a 	mov	r7,r3
  8067c8:	100d883a 	mov	r6,r2
  8067cc:	0807a500 	call	807a50 <__muldf3>
  8067d0:	023174b4 	movhi	r8,50642
  8067d4:	421afc44 	addi	r8,r8,27633
  8067d8:	024faf34 	movhi	r9,16060
  8067dc:	4a6f5044 	addi	r9,r9,-17087
  8067e0:	480f883a 	mov	r7,r9
  8067e4:	400d883a 	mov	r6,r8
  8067e8:	180b883a 	mov	r5,r3
  8067ec:	1009883a 	mov	r4,r2
  8067f0:	080795c0 	call	80795c <__subdf3>
  8067f4:	180f883a 	mov	r7,r3
  8067f8:	8009883a 	mov	r4,r16
  8067fc:	880b883a 	mov	r5,r17
  806800:	100d883a 	mov	r6,r2
  806804:	0807a500 	call	807a50 <__muldf3>
  806808:	022bc9b4 	movhi	r8,44838
  80680c:	42378b04 	addi	r8,r8,-8660
  806810:	024fc474 	movhi	r9,16145
  806814:	4a559a84 	addi	r9,r9,22122
  806818:	480f883a 	mov	r7,r9
  80681c:	400d883a 	mov	r6,r8
  806820:	180b883a 	mov	r5,r3
  806824:	1009883a 	mov	r4,r2
  806828:	08079dc0 	call	8079dc <__adddf3>
  80682c:	180f883a 	mov	r7,r3
  806830:	8009883a 	mov	r4,r16
  806834:	880b883a 	mov	r5,r17
  806838:	100d883a 	mov	r6,r2
  80683c:	0807a500 	call	807a50 <__muldf3>
  806840:	0205aff4 	movhi	r8,5823
  806844:	422f64c4 	addi	r8,r8,-17005
  806848:	024fd9f4 	movhi	r9,16231
  80684c:	4a705b04 	addi	r9,r9,-16020
  806850:	480f883a 	mov	r7,r9
  806854:	400d883a 	mov	r6,r8
  806858:	180b883a 	mov	r5,r3
  80685c:	1009883a 	mov	r4,r2
  806860:	080795c0 	call	80795c <__subdf3>
  806864:	180f883a 	mov	r7,r3
  806868:	8009883a 	mov	r4,r16
  80686c:	880b883a 	mov	r5,r17
  806870:	100d883a 	mov	r6,r2
  806874:	0807a500 	call	807a50 <__muldf3>
  806878:	02155574 	movhi	r8,21845
  80687c:	42154f84 	addi	r8,r8,21822
  806880:	024ff174 	movhi	r9,16325
  806884:	4a555544 	addi	r9,r9,21845
  806888:	480f883a 	mov	r7,r9
  80688c:	400d883a 	mov	r6,r8
  806890:	180b883a 	mov	r5,r3
  806894:	1009883a 	mov	r4,r2
  806898:	08079dc0 	call	8079dc <__adddf3>
  80689c:	180f883a 	mov	r7,r3
  8068a0:	8009883a 	mov	r4,r16
  8068a4:	880b883a 	mov	r5,r17
  8068a8:	100d883a 	mov	r6,r2
  8068ac:	0807a500 	call	807a50 <__muldf3>
  8068b0:	d9001117 	ldw	r4,68(sp)
  8068b4:	d9403a17 	ldw	r5,232(sp)
  8068b8:	180f883a 	mov	r7,r3
  8068bc:	100d883a 	mov	r6,r2
  8068c0:	080795c0 	call	80795c <__subdf3>
  8068c4:	d9001117 	ldw	r4,68(sp)
  8068c8:	d9403a17 	ldw	r5,232(sp)
  8068cc:	100d883a 	mov	r6,r2
  8068d0:	180f883a 	mov	r7,r3
  8068d4:	1021883a 	mov	r16,r2
  8068d8:	1823883a 	mov	r17,r3
  8068dc:	0807a500 	call	807a50 <__muldf3>
  8068e0:	0011883a 	mov	r8,zero
  8068e4:	02500034 	movhi	r9,16384
  8068e8:	480f883a 	mov	r7,r9
  8068ec:	400d883a 	mov	r6,r8
  8068f0:	8009883a 	mov	r4,r16
  8068f4:	880b883a 	mov	r5,r17
  8068f8:	1021883a 	mov	r16,r2
  8068fc:	1823883a 	mov	r17,r3
  806900:	080795c0 	call	80795c <__subdf3>
  806904:	180f883a 	mov	r7,r3
  806908:	880b883a 	mov	r5,r17
  80690c:	8009883a 	mov	r4,r16
  806910:	100d883a 	mov	r6,r2
  806914:	0807e140 	call	807e14 <__divdf3>
  806918:	d9001117 	ldw	r4,68(sp)
  80691c:	d9403a17 	ldw	r5,232(sp)
  806920:	a00d883a 	mov	r6,r20
  806924:	a80f883a 	mov	r7,r21
  806928:	1025883a 	mov	r18,r2
  80692c:	1827883a 	mov	r19,r3
  806930:	0807a500 	call	807a50 <__muldf3>
  806934:	180f883a 	mov	r7,r3
  806938:	a009883a 	mov	r4,r20
  80693c:	a80b883a 	mov	r5,r21
  806940:	100d883a 	mov	r6,r2
  806944:	08079dc0 	call	8079dc <__adddf3>
  806948:	180f883a 	mov	r7,r3
  80694c:	980b883a 	mov	r5,r19
  806950:	9009883a 	mov	r4,r18
  806954:	100d883a 	mov	r6,r2
  806958:	080795c0 	call	80795c <__subdf3>
  80695c:	d9801117 	ldw	r6,68(sp)
  806960:	d9c03a17 	ldw	r7,232(sp)
  806964:	180b883a 	mov	r5,r3
  806968:	1009883a 	mov	r4,r2
  80696c:	080795c0 	call	80795c <__subdf3>
  806970:	0011883a 	mov	r8,zero
  806974:	024ffc34 	movhi	r9,16368
  806978:	480b883a 	mov	r5,r9
  80697c:	180f883a 	mov	r7,r3
  806980:	4009883a 	mov	r4,r8
  806984:	100d883a 	mov	r6,r2
  806988:	080795c0 	call	80795c <__subdf3>
  80698c:	100b883a 	mov	r5,r2
  806990:	d8801317 	ldw	r2,76(sp)
  806994:	10d5883a 	add	r10,r2,r3
  806998:	5005d53a 	srai	r2,r10,20
  80699c:	0080720e 	bge	zero,r2,806b68 <__ieee754_pow+0x12d4>
  8069a0:	2811883a 	mov	r8,r5
  8069a4:	5013883a 	mov	r9,r10
  8069a8:	d9c01a17 	ldw	r7,104(sp)
  8069ac:	d9801917 	ldw	r6,100(sp)
  8069b0:	480b883a 	mov	r5,r9
  8069b4:	4009883a 	mov	r4,r8
  8069b8:	003e8206 	br	8063c4 <__ieee754_pow+0xb30>
  8069bc:	0009883a 	mov	r4,zero
  8069c0:	800b883a 	mov	r5,r16
  8069c4:	a80f883a 	mov	r7,r21
  8069c8:	a00d883a 	mov	r6,r20
  8069cc:	003c2b06 	br	805a7c <__ieee754_pow+0x1e8>
  8069d0:	d9001d17 	ldw	r4,116(sp)
  8069d4:	00994b34 	movhi	r2,25900
  8069d8:	10a0bf84 	addi	r2,r2,-32002
  8069dc:	00cf25f4 	movhi	r3,15511
  8069e0:	18c551c4 	addi	r3,r3,5447
  8069e4:	a80b883a 	mov	r5,r21
  8069e8:	180f883a 	mov	r7,r3
  8069ec:	100d883a 	mov	r6,r2
  8069f0:	08079dc0 	call	8079dc <__adddf3>
  8069f4:	d9801f17 	ldw	r6,124(sp)
  8069f8:	880b883a 	mov	r5,r17
  8069fc:	8009883a 	mov	r4,r16
  806a00:	980f883a 	mov	r7,r19
  806a04:	1021883a 	mov	r16,r2
  806a08:	1823883a 	mov	r17,r3
  806a0c:	080795c0 	call	80795c <__subdf3>
  806a10:	180f883a 	mov	r7,r3
  806a14:	880b883a 	mov	r5,r17
  806a18:	8009883a 	mov	r4,r16
  806a1c:	100d883a 	mov	r6,r2
  806a20:	080817c0 	call	80817c <__gtdf2>
  806a24:	00bf0c0e 	bge	zero,r2,806658 <__ieee754_pow+0xdc4>
  806a28:	04220034 	movhi	r16,34816
  806a2c:	841d6704 	addi	r16,r16,30108
  806a30:	045f8e34 	movhi	r17,32312
  806a34:	8c790f04 	addi	r17,r17,-7108
  806a38:	d9401a17 	ldw	r5,104(sp)
  806a3c:	d9001917 	ldw	r4,100(sp)
  806a40:	800d883a 	mov	r6,r16
  806a44:	880f883a 	mov	r7,r17
  806a48:	0807a500 	call	807a50 <__muldf3>
  806a4c:	180b883a 	mov	r5,r3
  806a50:	800d883a 	mov	r6,r16
  806a54:	880f883a 	mov	r7,r17
  806a58:	1009883a 	mov	r4,r2
  806a5c:	003e5906 	br	8063c4 <__ieee754_pow+0xb30>
  806a60:	e005d53a 	srai	r2,fp,20
  806a64:	01800434 	movhi	r6,16
  806a68:	d9401817 	ldw	r5,96(sp)
  806a6c:	10bf0084 	addi	r2,r2,-1022
  806a70:	308dd83a 	sra	r6,r6,r2
  806a74:	02000434 	movhi	r8,16
  806a78:	423fffc4 	addi	r8,r8,-1
  806a7c:	0005883a 	mov	r2,zero
  806a80:	298d883a 	add	r6,r5,r6
  806a84:	318b883a 	add	r5,r6,r6
  806a88:	320e703a 	and	r7,r6,r8
  806a8c:	1013883a 	mov	r9,r2
  806a90:	280ad57a 	srli	r5,r5,21
  806a94:	d8801817 	ldw	r2,96(sp)
  806a98:	01000504 	movi	r4,20
  806a9c:	297f0044 	addi	r5,r5,-1023
  806aa0:	4151d83a 	sra	r8,r8,r5
  806aa4:	39c00434 	orhi	r7,r7,16
  806aa8:	2149c83a 	sub	r4,r4,r5
  806aac:	0210303a 	nor	r8,zero,r8
  806ab0:	3939d83a 	sra	fp,r7,r4
  806ab4:	320e703a 	and	r7,r6,r8
  806ab8:	10002916 	blt	r2,zero,806b60 <__ieee754_pow+0x12cc>
  806abc:	d9402017 	ldw	r5,128(sp)
  806ac0:	d9001f17 	ldw	r4,124(sp)
  806ac4:	480d883a 	mov	r6,r9
  806ac8:	080795c0 	call	80795c <__subdf3>
  806acc:	180b883a 	mov	r5,r3
  806ad0:	d9402015 	stw	r5,128(sp)
  806ad4:	280f883a 	mov	r7,r5
  806ad8:	d9001d17 	ldw	r4,116(sp)
  806adc:	d9401e17 	ldw	r5,120(sp)
  806ae0:	1007883a 	mov	r3,r2
  806ae4:	180d883a 	mov	r6,r3
  806ae8:	d8801f15 	stw	r2,124(sp)
  806aec:	08079dc0 	call	8079dc <__adddf3>
  806af0:	180b883a 	mov	r5,r3
  806af4:	e006953a 	slli	r3,fp,20
  806af8:	282f883a 	mov	r23,r5
  806afc:	d8c01315 	stw	r3,76(sp)
  806b00:	003edd06 	br	806678 <__ieee754_pow+0xde4>
  806b04:	383bc81e 	bne	r7,zero,805a28 <__ieee754_pow+0x194>
  806b08:	28c5c83a 	sub	r2,r5,r3
  806b0c:	8087d83a 	sra	r3,r16,r2
  806b10:	1884983a 	sll	r2,r3,r2
  806b14:	80801b26 	beq	r16,r2,806b84 <__ieee754_pow+0x12f0>
  806b18:	0039883a 	mov	fp,zero
  806b1c:	003b9d06 	br	805994 <__ieee754_pow+0x100>
  806b20:	d9801f17 	ldw	r6,124(sp)
  806b24:	8009883a 	mov	r4,r16
  806b28:	880b883a 	mov	r5,r17
  806b2c:	980f883a 	mov	r7,r19
  806b30:	080795c0 	call	80795c <__subdf3>
  806b34:	d9001d17 	ldw	r4,116(sp)
  806b38:	a80b883a 	mov	r5,r21
  806b3c:	180f883a 	mov	r7,r3
  806b40:	100d883a 	mov	r6,r2
  806b44:	080828c0 	call	80828c <__ledf2>
  806b48:	00bfc516 	blt	zero,r2,806a60 <__ieee754_pow+0x11cc>
  806b4c:	0430be74 	movhi	r16,49913
  806b50:	843cd644 	addi	r16,r16,-3239
  806b54:	04406974 	movhi	r17,421
  806b58:	8c5b87c4 	addi	r17,r17,28191
  806b5c:	003fb606 	br	806a38 <__ieee754_pow+0x11a4>
  806b60:	0739c83a 	sub	fp,zero,fp
  806b64:	003fd506 	br	806abc <__ieee754_pow+0x1228>
  806b68:	2809883a 	mov	r4,r5
  806b6c:	e00d883a 	mov	r6,fp
  806b70:	180b883a 	mov	r5,r3
  806b74:	08070e80 	call	8070e8 <scalbn>
  806b78:	1011883a 	mov	r8,r2
  806b7c:	1813883a 	mov	r9,r3
  806b80:	003f8906 	br	8069a8 <__ieee754_pow+0x1114>
  806b84:	18c0004c 	andi	r3,r3,1
  806b88:	00800084 	movi	r2,2
  806b8c:	10f9c83a 	sub	fp,r2,r3
  806b90:	003b8006 	br	805994 <__ieee754_pow+0x100>

00806b94 <__ieee754_sqrt>:
  806b94:	defffd04 	addi	sp,sp,-12
  806b98:	dc000015 	stw	r16,0(sp)
  806b9c:	009ffc34 	movhi	r2,32752
  806ba0:	2021883a 	mov	r16,r4
  806ba4:	291ffc2c 	andhi	r4,r5,32752
  806ba8:	dc400115 	stw	r17,4(sp)
  806bac:	dfc00215 	stw	ra,8(sp)
  806bb0:	2823883a 	mov	r17,r5
  806bb4:	280f883a 	mov	r7,r5
  806bb8:	2807883a 	mov	r3,r5
  806bbc:	8011883a 	mov	r8,r16
  806bc0:	20807d26 	beq	r4,r2,806db8 <__ieee754_sqrt+0x224>
  806bc4:	01408d0e 	bge	zero,r5,806dfc <__ieee754_sqrt+0x268>
  806bc8:	380dd53a 	srai	r6,r7,20
  806bcc:	3000131e 	bne	r6,zero,806c1c <__ieee754_sqrt+0x88>
  806bd0:	1800041e 	bne	r3,zero,806be4 <__ieee754_sqrt+0x50>
  806bd4:	400ed2fa 	srli	r7,r8,11
  806bd8:	31bffac4 	addi	r6,r6,-21
  806bdc:	4010957a 	slli	r8,r8,21
  806be0:	383ffc26 	beq	r7,zero,806bd4 <__ieee754_sqrt+0x40>
  806be4:	3880042c 	andhi	r2,r7,16
  806be8:	1000991e 	bne	r2,zero,806e50 <__ieee754_sqrt+0x2bc>
  806bec:	0009883a 	mov	r4,zero
  806bf0:	39cf883a 	add	r7,r7,r7
  806bf4:	3880042c 	andhi	r2,r7,16
  806bf8:	21000044 	addi	r4,r4,1
  806bfc:	103ffc26 	beq	r2,zero,806bf0 <__ieee754_sqrt+0x5c>
  806c00:	00800804 	movi	r2,32
  806c04:	1105c83a 	sub	r2,r2,r4
  806c08:	4086d83a 	srl	r3,r8,r2
  806c0c:	4110983a 	sll	r8,r8,r4
  806c10:	3105c83a 	sub	r2,r6,r4
  806c14:	38ceb03a 	or	r7,r7,r3
  806c18:	11800044 	addi	r6,r2,1
  806c1c:	31bf0044 	addi	r6,r6,-1023
  806c20:	30c0004c 	andi	r3,r6,1
  806c24:	00800434 	movhi	r2,16
  806c28:	10bfffc4 	addi	r2,r2,-1
  806c2c:	3884703a 	and	r2,r7,r2
  806c30:	1807003a 	cmpeq	r3,r3,zero
  806c34:	11000434 	orhi	r4,r2,16
  806c38:	18005426 	beq	r3,zero,806d8c <__ieee754_sqrt+0x1f8>
  806c3c:	4004d7fa 	srli	r2,r8,31
  806c40:	4207883a 	add	r3,r8,r8
  806c44:	02800834 	movhi	r10,32
  806c48:	1105883a 	add	r2,r2,r4
  806c4c:	2089883a 	add	r4,r4,r2
  806c50:	0011883a 	mov	r8,zero
  806c54:	000b883a 	mov	r5,zero
  806c58:	0013883a 	mov	r9,zero
  806c5c:	02c00584 	movi	r11,22
  806c60:	520f883a 	add	r7,r10,r8
  806c64:	1804d7fa 	srli	r2,r3,31
  806c68:	4a400044 	addi	r9,r9,1
  806c6c:	18c7883a 	add	r3,r3,r3
  806c70:	21c00316 	blt	r4,r7,806c80 <__ieee754_sqrt+0xec>
  806c74:	21c9c83a 	sub	r4,r4,r7
  806c78:	2a8b883a 	add	r5,r5,r10
  806c7c:	51d1883a 	add	r8,r10,r7
  806c80:	1105883a 	add	r2,r2,r4
  806c84:	5014d07a 	srli	r10,r10,1
  806c88:	2089883a 	add	r4,r4,r2
  806c8c:	4afff41e 	bne	r9,r11,806c60 <__ieee754_sqrt+0xcc>
  806c90:	02600034 	movhi	r9,32768
  806c94:	0017883a 	mov	r11,zero
  806c98:	0019883a 	mov	r12,zero
  806c9c:	0015883a 	mov	r10,zero
  806ca0:	4821883a 	mov	r16,r9
  806ca4:	03c00804 	movi	r15,32
  806ca8:	00000806 	br	806ccc <__ieee754_sqrt+0x138>
  806cac:	22003426 	beq	r4,r8,806d80 <__ieee754_sqrt+0x1ec>
  806cb0:	1804d7fa 	srli	r2,r3,31
  806cb4:	52800044 	addi	r10,r10,1
  806cb8:	18c7883a 	add	r3,r3,r3
  806cbc:	1105883a 	add	r2,r2,r4
  806cc0:	2089883a 	add	r4,r4,r2
  806cc4:	4812d07a 	srli	r9,r9,1
  806cc8:	53c01326 	beq	r10,r15,806d18 <__ieee754_sqrt+0x184>
  806ccc:	4acf883a 	add	r7,r9,r11
  806cd0:	413ff60e 	bge	r8,r4,806cac <__ieee754_sqrt+0x118>
  806cd4:	38a0002c 	andhi	r2,r7,32768
  806cd8:	3a57883a 	add	r11,r7,r9
  806cdc:	14002426 	beq	r2,r16,806d70 <__ieee754_sqrt+0x1dc>
  806ce0:	4005883a 	mov	r2,r8
  806ce4:	2209c83a 	sub	r4,r4,r8
  806ce8:	19c0012e 	bgeu	r3,r7,806cf0 <__ieee754_sqrt+0x15c>
  806cec:	213fffc4 	addi	r4,r4,-1
  806cf0:	19c7c83a 	sub	r3,r3,r7
  806cf4:	1011883a 	mov	r8,r2
  806cf8:	1804d7fa 	srli	r2,r3,31
  806cfc:	52800044 	addi	r10,r10,1
  806d00:	6259883a 	add	r12,r12,r9
  806d04:	1105883a 	add	r2,r2,r4
  806d08:	18c7883a 	add	r3,r3,r3
  806d0c:	2089883a 	add	r4,r4,r2
  806d10:	4812d07a 	srli	r9,r9,1
  806d14:	53ffed1e 	bne	r10,r15,806ccc <__ieee754_sqrt+0x138>
  806d18:	20c4b03a 	or	r2,r4,r3
  806d1c:	1000201e 	bne	r2,zero,806da0 <__ieee754_sqrt+0x20c>
  806d20:	600ed07a 	srli	r7,r12,1
  806d24:	2880004c 	andi	r2,r5,1
  806d28:	1005003a 	cmpeq	r2,r2,zero
  806d2c:	1000011e 	bne	r2,zero,806d34 <__ieee754_sqrt+0x1a0>
  806d30:	39e00034 	orhi	r7,r7,32768
  806d34:	300dd07a 	srai	r6,r6,1
  806d38:	280bd07a 	srai	r5,r5,1
  806d3c:	010ff834 	movhi	r4,16352
  806d40:	300c953a 	slli	r6,r6,20
  806d44:	290b883a 	add	r5,r5,r4
  806d48:	3821883a 	mov	r16,r7
  806d4c:	299d883a 	add	r14,r5,r6
  806d50:	7023883a 	mov	r17,r14
  806d54:	8005883a 	mov	r2,r16
  806d58:	8807883a 	mov	r3,r17
  806d5c:	dfc00217 	ldw	ra,8(sp)
  806d60:	dc400117 	ldw	r17,4(sp)
  806d64:	dc000017 	ldw	r16,0(sp)
  806d68:	dec00304 	addi	sp,sp,12
  806d6c:	f800283a 	ret
  806d70:	5884703a 	and	r2,r11,r2
  806d74:	103fda1e 	bne	r2,zero,806ce0 <__ieee754_sqrt+0x14c>
  806d78:	40800044 	addi	r2,r8,1
  806d7c:	003fd906 	br	806ce4 <__ieee754_sqrt+0x150>
  806d80:	19ffd42e 	bgeu	r3,r7,806cd4 <__ieee754_sqrt+0x140>
  806d84:	2011883a 	mov	r8,r4
  806d88:	003fc906 	br	806cb0 <__ieee754_sqrt+0x11c>
  806d8c:	4004d7fa 	srli	r2,r8,31
  806d90:	4211883a 	add	r8,r8,r8
  806d94:	1105883a 	add	r2,r2,r4
  806d98:	2089883a 	add	r4,r4,r2
  806d9c:	003fa706 	br	806c3c <__ieee754_sqrt+0xa8>
  806da0:	00bfffc4 	movi	r2,-1
  806da4:	60802726 	beq	r12,r2,806e44 <__ieee754_sqrt+0x2b0>
  806da8:	6080004c 	andi	r2,r12,1
  806dac:	6085883a 	add	r2,r12,r2
  806db0:	100ed07a 	srli	r7,r2,1
  806db4:	003fdb06 	br	806d24 <__ieee754_sqrt+0x190>
  806db8:	8009883a 	mov	r4,r16
  806dbc:	800d883a 	mov	r6,r16
  806dc0:	0807a500 	call	807a50 <__muldf3>
  806dc4:	180f883a 	mov	r7,r3
  806dc8:	880b883a 	mov	r5,r17
  806dcc:	8009883a 	mov	r4,r16
  806dd0:	100d883a 	mov	r6,r2
  806dd4:	08079dc0 	call	8079dc <__adddf3>
  806dd8:	1021883a 	mov	r16,r2
  806ddc:	1823883a 	mov	r17,r3
  806de0:	8005883a 	mov	r2,r16
  806de4:	8807883a 	mov	r3,r17
  806de8:	dfc00217 	ldw	ra,8(sp)
  806dec:	dc400117 	ldw	r17,4(sp)
  806df0:	dc000017 	ldw	r16,0(sp)
  806df4:	dec00304 	addi	sp,sp,12
  806df8:	f800283a 	ret
  806dfc:	00a00034 	movhi	r2,32768
  806e00:	10bfffc4 	addi	r2,r2,-1
  806e04:	2884703a 	and	r2,r5,r2
  806e08:	8084b03a 	or	r2,r16,r2
  806e0c:	103fd126 	beq	r2,zero,806d54 <__ieee754_sqrt+0x1c0>
  806e10:	283f6d26 	beq	r5,zero,806bc8 <__ieee754_sqrt+0x34>
  806e14:	280f883a 	mov	r7,r5
  806e18:	8009883a 	mov	r4,r16
  806e1c:	800d883a 	mov	r6,r16
  806e20:	080795c0 	call	80795c <__subdf3>
  806e24:	1009883a 	mov	r4,r2
  806e28:	180b883a 	mov	r5,r3
  806e2c:	100d883a 	mov	r6,r2
  806e30:	180f883a 	mov	r7,r3
  806e34:	0807e140 	call	807e14 <__divdf3>
  806e38:	1021883a 	mov	r16,r2
  806e3c:	1823883a 	mov	r17,r3
  806e40:	003fc406 	br	806d54 <__ieee754_sqrt+0x1c0>
  806e44:	29400044 	addi	r5,r5,1
  806e48:	000f883a 	mov	r7,zero
  806e4c:	003fb506 	br	806d24 <__ieee754_sqrt+0x190>
  806e50:	0009883a 	mov	r4,zero
  806e54:	00800804 	movi	r2,32
  806e58:	003f6b06 	br	806c08 <__ieee754_sqrt+0x74>

00806e5c <fabs>:
  806e5c:	01e00034 	movhi	r7,32768
  806e60:	39ffffc4 	addi	r7,r7,-1
  806e64:	394e703a 	and	r7,r7,r5
  806e68:	2005883a 	mov	r2,r4
  806e6c:	3807883a 	mov	r3,r7
  806e70:	f800283a 	ret

00806e74 <finite>:
  806e74:	00a00034 	movhi	r2,32768
  806e78:	10bfffc4 	addi	r2,r2,-1
  806e7c:	2884703a 	and	r2,r5,r2
  806e80:	01600434 	movhi	r5,32784
  806e84:	1145883a 	add	r2,r2,r5
  806e88:	1004d7fa 	srli	r2,r2,31
  806e8c:	f800283a 	ret

00806e90 <__isnand>:
  806e90:	200d883a 	mov	r6,r4
  806e94:	0109c83a 	sub	r4,zero,r4
  806e98:	2188b03a 	or	r4,r4,r6
  806e9c:	2008d7fa 	srli	r4,r4,31
  806ea0:	00a00034 	movhi	r2,32768
  806ea4:	10bfffc4 	addi	r2,r2,-1
  806ea8:	1144703a 	and	r2,r2,r5
  806eac:	2088b03a 	or	r4,r4,r2
  806eb0:	009ffc34 	movhi	r2,32752
  806eb4:	1105c83a 	sub	r2,r2,r4
  806eb8:	1004d7fa 	srli	r2,r2,31
  806ebc:	f800283a 	ret

00806ec0 <matherr>:
  806ec0:	0005883a 	mov	r2,zero
  806ec4:	f800283a 	ret

00806ec8 <nan>:
  806ec8:	015ffe34 	movhi	r5,32760
  806ecc:	0005883a 	mov	r2,zero
  806ed0:	2807883a 	mov	r3,r5
  806ed4:	f800283a 	ret

00806ed8 <rint>:
  806ed8:	2015883a 	mov	r10,r4
  806edc:	2809d53a 	srai	r4,r5,20
  806ee0:	defff904 	addi	sp,sp,-28
  806ee4:	034004c4 	movi	r13,19
  806ee8:	2101ffcc 	andi	r4,r4,2047
  806eec:	227f0044 	addi	r9,r4,-1023
  806ef0:	dc800415 	stw	r18,16(sp)
  806ef4:	dfc00615 	stw	ra,24(sp)
  806ef8:	dcc00515 	stw	r19,20(sp)
  806efc:	dc400315 	stw	r17,12(sp)
  806f00:	dc000215 	stw	r16,8(sp)
  806f04:	2817883a 	mov	r11,r5
  806f08:	500d883a 	mov	r6,r10
  806f0c:	2824d7fa 	srli	r18,r5,31
  806f10:	6a403016 	blt	r13,r9,806fd4 <rint+0xfc>
  806f14:	48004916 	blt	r9,zero,80703c <rint+0x164>
  806f18:	00800434 	movhi	r2,16
  806f1c:	10bfffc4 	addi	r2,r2,-1
  806f20:	1247d83a 	sra	r3,r2,r9
  806f24:	2809883a 	mov	r4,r5
  806f28:	1944703a 	and	r2,r3,r5
  806f2c:	5084b03a 	or	r2,r10,r2
  806f30:	10001f26 	beq	r2,zero,806fb0 <rint+0xd8>
  806f34:	180ad07a 	srli	r5,r3,1
  806f38:	5944703a 	and	r2,r11,r5
  806f3c:	5084b03a 	or	r2,r10,r2
  806f40:	10000626 	beq	r2,zero,806f5c <rint+0x84>
  806f44:	4b406626 	beq	r9,r13,8070e0 <rint+0x208>
  806f48:	00c000b4 	movhi	r3,2
  806f4c:	1a47d83a 	sra	r3,r3,r9
  806f50:	0144303a 	nor	r2,zero,r5
  806f54:	5884703a 	and	r2,r11,r2
  806f58:	10c8b03a 	or	r4,r2,r3
  806f5c:	900690fa 	slli	r3,r18,3
  806f60:	008020b4 	movhi	r2,130
  806f64:	10afdd04 	addi	r2,r2,-16524
  806f68:	200f883a 	mov	r7,r4
  806f6c:	1887883a 	add	r3,r3,r2
  806f70:	1c000017 	ldw	r16,0(r3)
  806f74:	1c400117 	ldw	r17,4(r3)
  806f78:	8009883a 	mov	r4,r16
  806f7c:	880b883a 	mov	r5,r17
  806f80:	08079dc0 	call	8079dc <__adddf3>
  806f84:	d8800015 	stw	r2,0(sp)
  806f88:	d8c00115 	stw	r3,4(sp)
  806f8c:	d8800017 	ldw	r2,0(sp)
  806f90:	d8c00117 	ldw	r3,4(sp)
  806f94:	880f883a 	mov	r7,r17
  806f98:	800d883a 	mov	r6,r16
  806f9c:	180b883a 	mov	r5,r3
  806fa0:	1009883a 	mov	r4,r2
  806fa4:	080795c0 	call	80795c <__subdf3>
  806fa8:	1015883a 	mov	r10,r2
  806fac:	1817883a 	mov	r11,r3
  806fb0:	5005883a 	mov	r2,r10
  806fb4:	5807883a 	mov	r3,r11
  806fb8:	dfc00617 	ldw	ra,24(sp)
  806fbc:	dcc00517 	ldw	r19,20(sp)
  806fc0:	dc800417 	ldw	r18,16(sp)
  806fc4:	dc400317 	ldw	r17,12(sp)
  806fc8:	dc000217 	ldw	r16,8(sp)
  806fcc:	dec00704 	addi	sp,sp,28
  806fd0:	f800283a 	ret
  806fd4:	00800cc4 	movi	r2,51
  806fd8:	12400f16 	blt	r2,r9,807018 <rint+0x140>
  806fdc:	213efb44 	addi	r4,r4,-1043
  806fe0:	00bfffc4 	movi	r2,-1
  806fe4:	1104d83a 	srl	r2,r2,r4
  806fe8:	5086703a 	and	r3,r10,r2
  806fec:	183ff026 	beq	r3,zero,806fb0 <rint+0xd8>
  806ff0:	100ad07a 	srli	r5,r2,1
  806ff4:	5144703a 	and	r2,r10,r5
  806ff8:	10000526 	beq	r2,zero,807010 <rint+0x138>
  806ffc:	00d00034 	movhi	r3,16384
  807000:	1907d83a 	sra	r3,r3,r4
  807004:	0144303a 	nor	r2,zero,r5
  807008:	5084703a 	and	r2,r10,r2
  80700c:	10ccb03a 	or	r6,r2,r3
  807010:	5809883a 	mov	r4,r11
  807014:	003fd106 	br	806f5c <rint+0x84>
  807018:	00810004 	movi	r2,1024
  80701c:	48bfe41e 	bne	r9,r2,806fb0 <rint+0xd8>
  807020:	5009883a 	mov	r4,r10
  807024:	500d883a 	mov	r6,r10
  807028:	280f883a 	mov	r7,r5
  80702c:	08079dc0 	call	8079dc <__adddf3>
  807030:	1015883a 	mov	r10,r2
  807034:	1817883a 	mov	r11,r3
  807038:	003fdd06 	br	806fb0 <rint+0xd8>
  80703c:	04e00034 	movhi	r19,32768
  807040:	9cffffc4 	addi	r19,r19,-1
  807044:	2cc4703a 	and	r2,r5,r19
  807048:	5084b03a 	or	r2,r10,r2
  80704c:	103fd826 	beq	r2,zero,806fb0 <rint+0xd8>
  807050:	00c00434 	movhi	r3,16
  807054:	18ffffc4 	addi	r3,r3,-1
  807058:	28c6703a 	and	r3,r5,r3
  80705c:	50c6b03a 	or	r3,r10,r3
  807060:	00cdc83a 	sub	r6,zero,r3
  807064:	900a90fa 	slli	r5,r18,3
  807068:	1986b03a 	or	r3,r3,r6
  80706c:	010020b4 	movhi	r4,130
  807070:	212fdd04 	addi	r4,r4,-16524
  807074:	1806d33a 	srli	r3,r3,12
  807078:	290b883a 	add	r5,r5,r4
  80707c:	2c000017 	ldw	r16,0(r5)
  807080:	2c400117 	ldw	r17,4(r5)
  807084:	593fffac 	andhi	r4,r11,65534
  807088:	18c0022c 	andhi	r3,r3,8
  80708c:	1906b03a 	or	r3,r3,r4
  807090:	500d883a 	mov	r6,r10
  807094:	180f883a 	mov	r7,r3
  807098:	8009883a 	mov	r4,r16
  80709c:	880b883a 	mov	r5,r17
  8070a0:	08079dc0 	call	8079dc <__adddf3>
  8070a4:	d8800015 	stw	r2,0(sp)
  8070a8:	d8c00115 	stw	r3,4(sp)
  8070ac:	d8800017 	ldw	r2,0(sp)
  8070b0:	d8c00117 	ldw	r3,4(sp)
  8070b4:	880f883a 	mov	r7,r17
  8070b8:	800d883a 	mov	r6,r16
  8070bc:	180b883a 	mov	r5,r3
  8070c0:	1009883a 	mov	r4,r2
  8070c4:	080795c0 	call	80795c <__subdf3>
  8070c8:	901297fa 	slli	r9,r18,31
  8070cc:	98d0703a 	and	r8,r19,r3
  8070d0:	1015883a 	mov	r10,r2
  8070d4:	4250b03a 	or	r8,r8,r9
  8070d8:	4017883a 	mov	r11,r8
  8070dc:	003fb406 	br	806fb0 <rint+0xd8>
  8070e0:	01900034 	movhi	r6,16384
  8070e4:	003f9d06 	br	806f5c <rint+0x84>

008070e8 <scalbn>:
  8070e8:	2011883a 	mov	r8,r4
  8070ec:	291ffc2c 	andhi	r4,r5,32752
  8070f0:	2009d53a 	srai	r4,r4,20
  8070f4:	defffd04 	addi	sp,sp,-12
  8070f8:	dc000015 	stw	r16,0(sp)
  8070fc:	dfc00215 	stw	ra,8(sp)
  807100:	dc400115 	stw	r17,4(sp)
  807104:	2813883a 	mov	r9,r5
  807108:	2815883a 	mov	r10,r5
  80710c:	3021883a 	mov	r16,r6
  807110:	2000281e 	bne	r4,zero,8071b4 <scalbn+0xcc>
  807114:	00a00034 	movhi	r2,32768
  807118:	10bfffc4 	addi	r2,r2,-1
  80711c:	2884703a 	and	r2,r5,r2
  807120:	4084b03a 	or	r2,r8,r2
  807124:	10001826 	beq	r2,zero,807188 <scalbn+0xa0>
  807128:	0005883a 	mov	r2,zero
  80712c:	00d0d434 	movhi	r3,17232
  807130:	4009883a 	mov	r4,r8
  807134:	100d883a 	mov	r6,r2
  807138:	180f883a 	mov	r7,r3
  80713c:	0807a500 	call	807a50 <__muldf3>
  807140:	100b883a 	mov	r5,r2
  807144:	1011883a 	mov	r8,r2
  807148:	00bffff4 	movhi	r2,65535
  80714c:	108f2c04 	addi	r2,r2,15536
  807150:	180d883a 	mov	r6,r3
  807154:	1813883a 	mov	r9,r3
  807158:	8080120e 	bge	r16,r2,8071a4 <scalbn+0xbc>
  80715c:	00b0be74 	movhi	r2,49913
  807160:	10bcd644 	addi	r2,r2,-3239
  807164:	00c06974 	movhi	r3,421
  807168:	18db87c4 	addi	r3,r3,28191
  80716c:	2809883a 	mov	r4,r5
  807170:	180f883a 	mov	r7,r3
  807174:	300b883a 	mov	r5,r6
  807178:	100d883a 	mov	r6,r2
  80717c:	0807a500 	call	807a50 <__muldf3>
  807180:	1011883a 	mov	r8,r2
  807184:	1813883a 	mov	r9,r3
  807188:	4005883a 	mov	r2,r8
  80718c:	4807883a 	mov	r3,r9
  807190:	dfc00217 	ldw	ra,8(sp)
  807194:	dc400117 	ldw	r17,4(sp)
  807198:	dc000017 	ldw	r16,0(sp)
  80719c:	dec00304 	addi	sp,sp,12
  8071a0:	f800283a 	ret
  8071a4:	189ffc2c 	andhi	r2,r3,32752
  8071a8:	1005d53a 	srai	r2,r2,20
  8071ac:	1815883a 	mov	r10,r3
  8071b0:	113ff284 	addi	r4,r2,-54
  8071b4:	0081ffc4 	movi	r2,2047
  8071b8:	20801126 	beq	r4,r2,807200 <scalbn+0x118>
  8071bc:	2409883a 	add	r4,r4,r16
  8071c0:	0081ff84 	movi	r2,2046
  8071c4:	11001c16 	blt	r2,r4,807238 <scalbn+0x150>
  8071c8:	0100290e 	bge	zero,r4,807270 <scalbn+0x188>
  8071cc:	200a953a 	slli	r5,r4,20
  8071d0:	01200434 	movhi	r4,32784
  8071d4:	213fffc4 	addi	r4,r4,-1
  8071d8:	5108703a 	and	r4,r10,r4
  8071dc:	2148b03a 	or	r4,r4,r5
  8071e0:	2013883a 	mov	r9,r4
  8071e4:	4005883a 	mov	r2,r8
  8071e8:	4807883a 	mov	r3,r9
  8071ec:	dfc00217 	ldw	ra,8(sp)
  8071f0:	dc400117 	ldw	r17,4(sp)
  8071f4:	dc000017 	ldw	r16,0(sp)
  8071f8:	dec00304 	addi	sp,sp,12
  8071fc:	f800283a 	ret
  807200:	480f883a 	mov	r7,r9
  807204:	4009883a 	mov	r4,r8
  807208:	480b883a 	mov	r5,r9
  80720c:	400d883a 	mov	r6,r8
  807210:	08079dc0 	call	8079dc <__adddf3>
  807214:	1011883a 	mov	r8,r2
  807218:	1813883a 	mov	r9,r3
  80721c:	4005883a 	mov	r2,r8
  807220:	4807883a 	mov	r3,r9
  807224:	dfc00217 	ldw	ra,8(sp)
  807228:	dc400117 	ldw	r17,4(sp)
  80722c:	dc000017 	ldw	r16,0(sp)
  807230:	dec00304 	addi	sp,sp,12
  807234:	f800283a 	ret
  807238:	04220034 	movhi	r16,34816
  80723c:	841d6704 	addi	r16,r16,30108
  807240:	045f8e34 	movhi	r17,32312
  807244:	8c790f04 	addi	r17,r17,-7108
  807248:	480f883a 	mov	r7,r9
  80724c:	400d883a 	mov	r6,r8
  807250:	8009883a 	mov	r4,r16
  807254:	880b883a 	mov	r5,r17
  807258:	08072c80 	call	8072c8 <copysign>
  80725c:	180b883a 	mov	r5,r3
  807260:	800d883a 	mov	r6,r16
  807264:	880f883a 	mov	r7,r17
  807268:	1009883a 	mov	r4,r2
  80726c:	003fc306 	br	80717c <scalbn+0x94>
  807270:	00bff284 	movi	r2,-54
  807274:	11000716 	blt	r2,r4,807294 <scalbn+0x1ac>
  807278:	00b0d414 	movui	r2,50000
  80727c:	143fee16 	blt	r2,r16,807238 <scalbn+0x150>
  807280:	0430be74 	movhi	r16,49913
  807284:	843cd644 	addi	r16,r16,-3239
  807288:	04406974 	movhi	r17,421
  80728c:	8c5b87c4 	addi	r17,r17,28191
  807290:	003fed06 	br	807248 <scalbn+0x160>
  807294:	21000d84 	addi	r4,r4,54
  807298:	2008953a 	slli	r4,r4,20
  80729c:	01e00434 	movhi	r7,32784
  8072a0:	39ffffc4 	addi	r7,r7,-1
  8072a4:	51ce703a 	and	r7,r10,r7
  8072a8:	390eb03a 	or	r7,r7,r4
  8072ac:	024f2434 	movhi	r9,15504
  8072b0:	4009883a 	mov	r4,r8
  8072b4:	0011883a 	mov	r8,zero
  8072b8:	380b883a 	mov	r5,r7
  8072bc:	400d883a 	mov	r6,r8
  8072c0:	480f883a 	mov	r7,r9
  8072c4:	003fad06 	br	80717c <scalbn+0x94>

008072c8 <copysign>:
  8072c8:	3813883a 	mov	r9,r7
  8072cc:	01e00034 	movhi	r7,32768
  8072d0:	39ffffc4 	addi	r7,r7,-1
  8072d4:	394e703a 	and	r7,r7,r5
  8072d8:	4aa0002c 	andhi	r10,r9,32768
  8072dc:	3a8eb03a 	or	r7,r7,r10
  8072e0:	2005883a 	mov	r2,r4
  8072e4:	3807883a 	mov	r3,r7
  8072e8:	f800283a 	ret

008072ec <__divsf3>:
  8072ec:	defff304 	addi	sp,sp,-52
  8072f0:	dc400b15 	stw	r17,44(sp)
  8072f4:	dc400204 	addi	r17,sp,8
  8072f8:	dc000a15 	stw	r16,40(sp)
  8072fc:	d9000015 	stw	r4,0(sp)
  807300:	d9400115 	stw	r5,4(sp)
  807304:	d809883a 	mov	r4,sp
  807308:	880b883a 	mov	r5,r17
  80730c:	dc000604 	addi	r16,sp,24
  807310:	dfc00c15 	stw	ra,48(sp)
  807314:	08088e00 	call	8088e0 <__unpack_f>
  807318:	d9000104 	addi	r4,sp,4
  80731c:	800b883a 	mov	r5,r16
  807320:	08088e00 	call	8088e0 <__unpack_f>
  807324:	d9000217 	ldw	r4,8(sp)
  807328:	00800044 	movi	r2,1
  80732c:	01800104 	movi	r6,4
  807330:	11000a2e 	bgeu	r2,r4,80735c <__divsf3+0x70>
  807334:	d9400617 	ldw	r5,24(sp)
  807338:	1140432e 	bgeu	r2,r5,807448 <__divsf3+0x15c>
  80733c:	d8800317 	ldw	r2,12(sp)
  807340:	d8c00717 	ldw	r3,28(sp)
  807344:	10c4f03a 	xor	r2,r2,r3
  807348:	d8800315 	stw	r2,12(sp)
  80734c:	21800226 	beq	r4,r6,807358 <__divsf3+0x6c>
  807350:	00800084 	movi	r2,2
  807354:	2080101e 	bne	r4,r2,807398 <__divsf3+0xac>
  807358:	29000726 	beq	r5,r4,807378 <__divsf3+0x8c>
  80735c:	8809883a 	mov	r4,r17
  807360:	08087800 	call	808780 <__pack_f>
  807364:	dfc00c17 	ldw	ra,48(sp)
  807368:	dc400b17 	ldw	r17,44(sp)
  80736c:	dc000a17 	ldw	r16,40(sp)
  807370:	dec00d04 	addi	sp,sp,52
  807374:	f800283a 	ret
  807378:	010020b4 	movhi	r4,130
  80737c:	212fe104 	addi	r4,r4,-16508
  807380:	08087800 	call	808780 <__pack_f>
  807384:	dfc00c17 	ldw	ra,48(sp)
  807388:	dc400b17 	ldw	r17,44(sp)
  80738c:	dc000a17 	ldw	r16,40(sp)
  807390:	dec00d04 	addi	sp,sp,52
  807394:	f800283a 	ret
  807398:	29802d26 	beq	r5,r6,807450 <__divsf3+0x164>
  80739c:	28801a26 	beq	r5,r2,807408 <__divsf3+0x11c>
  8073a0:	d8c00417 	ldw	r3,16(sp)
  8073a4:	d8800817 	ldw	r2,32(sp)
  8073a8:	d9000517 	ldw	r4,20(sp)
  8073ac:	d9800917 	ldw	r6,36(sp)
  8073b0:	1885c83a 	sub	r2,r3,r2
  8073b4:	d8800415 	stw	r2,16(sp)
  8073b8:	2180032e 	bgeu	r4,r6,8073c8 <__divsf3+0xdc>
  8073bc:	10bfffc4 	addi	r2,r2,-1
  8073c0:	d8800415 	stw	r2,16(sp)
  8073c4:	2109883a 	add	r4,r4,r4
  8073c8:	01500034 	movhi	r5,16384
  8073cc:	0007883a 	mov	r3,zero
  8073d0:	0005883a 	mov	r2,zero
  8073d4:	01c007c4 	movi	r7,31
  8073d8:	10800044 	addi	r2,r2,1
  8073dc:	21800236 	bltu	r4,r6,8073e8 <__divsf3+0xfc>
  8073e0:	1946b03a 	or	r3,r3,r5
  8073e4:	2189c83a 	sub	r4,r4,r6
  8073e8:	280ad07a 	srli	r5,r5,1
  8073ec:	2109883a 	add	r4,r4,r4
  8073f0:	11fff91e 	bne	r2,r7,8073d8 <__divsf3+0xec>
  8073f4:	19401fcc 	andi	r5,r3,127
  8073f8:	00801004 	movi	r2,64
  8073fc:	28800a26 	beq	r5,r2,807428 <__divsf3+0x13c>
  807400:	d8c00515 	stw	r3,20(sp)
  807404:	003fd506 	br	80735c <__divsf3+0x70>
  807408:	8809883a 	mov	r4,r17
  80740c:	d9800215 	stw	r6,8(sp)
  807410:	08087800 	call	808780 <__pack_f>
  807414:	dfc00c17 	ldw	ra,48(sp)
  807418:	dc400b17 	ldw	r17,44(sp)
  80741c:	dc000a17 	ldw	r16,40(sp)
  807420:	dec00d04 	addi	sp,sp,52
  807424:	f800283a 	ret
  807428:	1880200c 	andi	r2,r3,128
  80742c:	103ff41e 	bne	r2,zero,807400 <__divsf3+0x114>
  807430:	203ff326 	beq	r4,zero,807400 <__divsf3+0x114>
  807434:	1947883a 	add	r3,r3,r5
  807438:	00bfe004 	movi	r2,-128
  80743c:	1886703a 	and	r3,r3,r2
  807440:	d8c00515 	stw	r3,20(sp)
  807444:	003fc506 	br	80735c <__divsf3+0x70>
  807448:	8009883a 	mov	r4,r16
  80744c:	003fc406 	br	807360 <__divsf3+0x74>
  807450:	8809883a 	mov	r4,r17
  807454:	d8000515 	stw	zero,20(sp)
  807458:	d8000415 	stw	zero,16(sp)
  80745c:	003fc006 	br	807360 <__divsf3+0x74>

00807460 <__floatsisf>:
  807460:	2006d7fa 	srli	r3,r4,31
  807464:	defffa04 	addi	sp,sp,-24
  807468:	008000c4 	movi	r2,3
  80746c:	dfc00515 	stw	ra,20(sp)
  807470:	dc000415 	stw	r16,16(sp)
  807474:	d8800015 	stw	r2,0(sp)
  807478:	d8c00115 	stw	r3,4(sp)
  80747c:	2000081e 	bne	r4,zero,8074a0 <__floatsisf+0x40>
  807480:	00800084 	movi	r2,2
  807484:	d8800015 	stw	r2,0(sp)
  807488:	d809883a 	mov	r4,sp
  80748c:	08087800 	call	808780 <__pack_f>
  807490:	dfc00517 	ldw	ra,20(sp)
  807494:	dc000417 	ldw	r16,16(sp)
  807498:	dec00604 	addi	sp,sp,24
  80749c:	f800283a 	ret
  8074a0:	00800784 	movi	r2,30
  8074a4:	1807003a 	cmpeq	r3,r3,zero
  8074a8:	d8800215 	stw	r2,8(sp)
  8074ac:	18000e1e 	bne	r3,zero,8074e8 <__floatsisf+0x88>
  8074b0:	00a00034 	movhi	r2,32768
  8074b4:	20800e26 	beq	r4,r2,8074f0 <__floatsisf+0x90>
  8074b8:	0121c83a 	sub	r16,zero,r4
  8074bc:	8009883a 	mov	r4,r16
  8074c0:	dc000315 	stw	r16,12(sp)
  8074c4:	08087000 	call	808700 <__clzsi2>
  8074c8:	117fffc4 	addi	r5,r2,-1
  8074cc:	017fee0e 	bge	zero,r5,807488 <__floatsisf+0x28>
  8074d0:	d8800217 	ldw	r2,8(sp)
  8074d4:	8146983a 	sll	r3,r16,r5
  8074d8:	1145c83a 	sub	r2,r2,r5
  8074dc:	d8c00315 	stw	r3,12(sp)
  8074e0:	d8800215 	stw	r2,8(sp)
  8074e4:	003fe806 	br	807488 <__floatsisf+0x28>
  8074e8:	2021883a 	mov	r16,r4
  8074ec:	003ff306 	br	8074bc <__floatsisf+0x5c>
  8074f0:	00b3c034 	movhi	r2,52992
  8074f4:	003fe606 	br	807490 <__floatsisf+0x30>

008074f8 <__extendsfdf2>:
  8074f8:	defff904 	addi	sp,sp,-28
  8074fc:	d9000115 	stw	r4,4(sp)
  807500:	d9400204 	addi	r5,sp,8
  807504:	d9000104 	addi	r4,sp,4
  807508:	dfc00615 	stw	ra,24(sp)
  80750c:	08088e00 	call	8088e0 <__unpack_f>
  807510:	d9c00517 	ldw	r7,20(sp)
  807514:	0011883a 	mov	r8,zero
  807518:	400697ba 	slli	r3,r8,30
  80751c:	3812d0ba 	srli	r9,r7,2
  807520:	380497ba 	slli	r2,r7,30
  807524:	d9000217 	ldw	r4,8(sp)
  807528:	d9400317 	ldw	r5,12(sp)
  80752c:	d9800417 	ldw	r6,16(sp)
  807530:	48c6b03a 	or	r3,r9,r3
  807534:	100f883a 	mov	r7,r2
  807538:	d8c00015 	stw	r3,0(sp)
  80753c:	08084e40 	call	8084e4 <__make_dp>
  807540:	dfc00617 	ldw	ra,24(sp)
  807544:	dec00704 	addi	sp,sp,28
  807548:	f800283a 	ret

0080754c <_fpadd_parts>:
  80754c:	defff804 	addi	sp,sp,-32
  807550:	dcc00315 	stw	r19,12(sp)
  807554:	2027883a 	mov	r19,r4
  807558:	21000017 	ldw	r4,0(r4)
  80755c:	00c00044 	movi	r3,1
  807560:	dd400515 	stw	r21,20(sp)
  807564:	dd000415 	stw	r20,16(sp)
  807568:	ddc00715 	stw	r23,28(sp)
  80756c:	dd800615 	stw	r22,24(sp)
  807570:	dc800215 	stw	r18,8(sp)
  807574:	dc400115 	stw	r17,4(sp)
  807578:	dc000015 	stw	r16,0(sp)
  80757c:	282b883a 	mov	r21,r5
  807580:	3029883a 	mov	r20,r6
  807584:	1900632e 	bgeu	r3,r4,807714 <_fpadd_parts+0x1c8>
  807588:	28800017 	ldw	r2,0(r5)
  80758c:	1880812e 	bgeu	r3,r2,807794 <_fpadd_parts+0x248>
  807590:	00c00104 	movi	r3,4
  807594:	20c0dc26 	beq	r4,r3,807908 <_fpadd_parts+0x3bc>
  807598:	10c07e26 	beq	r2,r3,807794 <_fpadd_parts+0x248>
  80759c:	00c00084 	movi	r3,2
  8075a0:	10c06726 	beq	r2,r3,807740 <_fpadd_parts+0x1f4>
  8075a4:	20c07b26 	beq	r4,r3,807794 <_fpadd_parts+0x248>
  8075a8:	9dc00217 	ldw	r23,8(r19)
  8075ac:	28c00217 	ldw	r3,8(r5)
  8075b0:	9c400317 	ldw	r17,12(r19)
  8075b4:	2bc00317 	ldw	r15,12(r5)
  8075b8:	b8cdc83a 	sub	r6,r23,r3
  8075bc:	9c800417 	ldw	r18,16(r19)
  8075c0:	2c000417 	ldw	r16,16(r5)
  8075c4:	3009883a 	mov	r4,r6
  8075c8:	30009716 	blt	r6,zero,807828 <_fpadd_parts+0x2dc>
  8075cc:	00800fc4 	movi	r2,63
  8075d0:	11806b16 	blt	r2,r6,807780 <_fpadd_parts+0x234>
  8075d4:	0100a40e 	bge	zero,r4,807868 <_fpadd_parts+0x31c>
  8075d8:	35bff804 	addi	r22,r6,-32
  8075dc:	b000bc16 	blt	r22,zero,8078d0 <_fpadd_parts+0x384>
  8075e0:	8596d83a 	srl	r11,r16,r22
  8075e4:	0019883a 	mov	r12,zero
  8075e8:	0013883a 	mov	r9,zero
  8075ec:	01000044 	movi	r4,1
  8075f0:	0015883a 	mov	r10,zero
  8075f4:	b000be16 	blt	r22,zero,8078f0 <_fpadd_parts+0x3a4>
  8075f8:	2590983a 	sll	r8,r4,r22
  8075fc:	000f883a 	mov	r7,zero
  807600:	00bfffc4 	movi	r2,-1
  807604:	3889883a 	add	r4,r7,r2
  807608:	408b883a 	add	r5,r8,r2
  80760c:	21cd803a 	cmpltu	r6,r4,r7
  807610:	314b883a 	add	r5,r6,r5
  807614:	7904703a 	and	r2,r15,r4
  807618:	8146703a 	and	r3,r16,r5
  80761c:	10c4b03a 	or	r2,r2,r3
  807620:	10000226 	beq	r2,zero,80762c <_fpadd_parts+0xe0>
  807624:	02400044 	movi	r9,1
  807628:	0015883a 	mov	r10,zero
  80762c:	5a5eb03a 	or	r15,r11,r9
  807630:	62a0b03a 	or	r16,r12,r10
  807634:	99400117 	ldw	r5,4(r19)
  807638:	a8800117 	ldw	r2,4(r21)
  80763c:	28806e26 	beq	r5,r2,8077f8 <_fpadd_parts+0x2ac>
  807640:	28006626 	beq	r5,zero,8077dc <_fpadd_parts+0x290>
  807644:	7c45c83a 	sub	r2,r15,r17
  807648:	7889803a 	cmpltu	r4,r15,r2
  80764c:	8487c83a 	sub	r3,r16,r18
  807650:	1909c83a 	sub	r4,r3,r4
  807654:	100d883a 	mov	r6,r2
  807658:	200f883a 	mov	r7,r4
  80765c:	38007716 	blt	r7,zero,80783c <_fpadd_parts+0x2f0>
  807660:	a5c00215 	stw	r23,8(r20)
  807664:	a1c00415 	stw	r7,16(r20)
  807668:	a0000115 	stw	zero,4(r20)
  80766c:	a1800315 	stw	r6,12(r20)
  807670:	a2000317 	ldw	r8,12(r20)
  807674:	a2400417 	ldw	r9,16(r20)
  807678:	00bfffc4 	movi	r2,-1
  80767c:	408b883a 	add	r5,r8,r2
  807680:	2a09803a 	cmpltu	r4,r5,r8
  807684:	488d883a 	add	r6,r9,r2
  807688:	01c40034 	movhi	r7,4096
  80768c:	39ffffc4 	addi	r7,r7,-1
  807690:	218d883a 	add	r6,r4,r6
  807694:	39801736 	bltu	r7,r6,8076f4 <_fpadd_parts+0x1a8>
  807698:	31c06526 	beq	r6,r7,807830 <_fpadd_parts+0x2e4>
  80769c:	a3000217 	ldw	r12,8(r20)
  8076a0:	4209883a 	add	r4,r8,r8
  8076a4:	00bfffc4 	movi	r2,-1
  8076a8:	220f803a 	cmpltu	r7,r4,r8
  8076ac:	4a4b883a 	add	r5,r9,r9
  8076b0:	394f883a 	add	r7,r7,r5
  8076b4:	2095883a 	add	r10,r4,r2
  8076b8:	3897883a 	add	r11,r7,r2
  8076bc:	510d803a 	cmpltu	r6,r10,r4
  8076c0:	6099883a 	add	r12,r12,r2
  8076c4:	32d7883a 	add	r11,r6,r11
  8076c8:	00840034 	movhi	r2,4096
  8076cc:	10bfffc4 	addi	r2,r2,-1
  8076d0:	2011883a 	mov	r8,r4
  8076d4:	3813883a 	mov	r9,r7
  8076d8:	a1000315 	stw	r4,12(r20)
  8076dc:	a1c00415 	stw	r7,16(r20)
  8076e0:	a3000215 	stw	r12,8(r20)
  8076e4:	12c00336 	bltu	r2,r11,8076f4 <_fpadd_parts+0x1a8>
  8076e8:	58bfed1e 	bne	r11,r2,8076a0 <_fpadd_parts+0x154>
  8076ec:	00bfff84 	movi	r2,-2
  8076f0:	12bfeb2e 	bgeu	r2,r10,8076a0 <_fpadd_parts+0x154>
  8076f4:	a2800417 	ldw	r10,16(r20)
  8076f8:	008000c4 	movi	r2,3
  8076fc:	00c80034 	movhi	r3,8192
  807700:	18ffffc4 	addi	r3,r3,-1
  807704:	a2400317 	ldw	r9,12(r20)
  807708:	a0800015 	stw	r2,0(r20)
  80770c:	1a802336 	bltu	r3,r10,80779c <_fpadd_parts+0x250>
  807710:	a027883a 	mov	r19,r20
  807714:	9805883a 	mov	r2,r19
  807718:	ddc00717 	ldw	r23,28(sp)
  80771c:	dd800617 	ldw	r22,24(sp)
  807720:	dd400517 	ldw	r21,20(sp)
  807724:	dd000417 	ldw	r20,16(sp)
  807728:	dcc00317 	ldw	r19,12(sp)
  80772c:	dc800217 	ldw	r18,8(sp)
  807730:	dc400117 	ldw	r17,4(sp)
  807734:	dc000017 	ldw	r16,0(sp)
  807738:	dec00804 	addi	sp,sp,32
  80773c:	f800283a 	ret
  807740:	20fff41e 	bne	r4,r3,807714 <_fpadd_parts+0x1c8>
  807744:	31000015 	stw	r4,0(r6)
  807748:	98800117 	ldw	r2,4(r19)
  80774c:	30800115 	stw	r2,4(r6)
  807750:	98c00217 	ldw	r3,8(r19)
  807754:	30c00215 	stw	r3,8(r6)
  807758:	98800317 	ldw	r2,12(r19)
  80775c:	30800315 	stw	r2,12(r6)
  807760:	98c00417 	ldw	r3,16(r19)
  807764:	30c00415 	stw	r3,16(r6)
  807768:	98800117 	ldw	r2,4(r19)
  80776c:	28c00117 	ldw	r3,4(r5)
  807770:	3027883a 	mov	r19,r6
  807774:	10c4703a 	and	r2,r2,r3
  807778:	30800115 	stw	r2,4(r6)
  80777c:	003fe506 	br	807714 <_fpadd_parts+0x1c8>
  807780:	1dc02616 	blt	r3,r23,80781c <_fpadd_parts+0x2d0>
  807784:	0023883a 	mov	r17,zero
  807788:	182f883a 	mov	r23,r3
  80778c:	0025883a 	mov	r18,zero
  807790:	003fa806 	br	807634 <_fpadd_parts+0xe8>
  807794:	a827883a 	mov	r19,r21
  807798:	003fde06 	br	807714 <_fpadd_parts+0x1c8>
  80779c:	01800044 	movi	r6,1
  8077a0:	500497fa 	slli	r2,r10,31
  8077a4:	4808d07a 	srli	r4,r9,1
  8077a8:	518ad83a 	srl	r5,r10,r6
  8077ac:	a2000217 	ldw	r8,8(r20)
  8077b0:	1108b03a 	or	r4,r2,r4
  8077b4:	0007883a 	mov	r3,zero
  8077b8:	4984703a 	and	r2,r9,r6
  8077bc:	208cb03a 	or	r6,r4,r2
  8077c0:	28ceb03a 	or	r7,r5,r3
  8077c4:	42000044 	addi	r8,r8,1
  8077c8:	a027883a 	mov	r19,r20
  8077cc:	a1c00415 	stw	r7,16(r20)
  8077d0:	a2000215 	stw	r8,8(r20)
  8077d4:	a1800315 	stw	r6,12(r20)
  8077d8:	003fce06 	br	807714 <_fpadd_parts+0x1c8>
  8077dc:	8bc5c83a 	sub	r2,r17,r15
  8077e0:	8889803a 	cmpltu	r4,r17,r2
  8077e4:	9407c83a 	sub	r3,r18,r16
  8077e8:	1909c83a 	sub	r4,r3,r4
  8077ec:	100d883a 	mov	r6,r2
  8077f0:	200f883a 	mov	r7,r4
  8077f4:	003f9906 	br	80765c <_fpadd_parts+0x110>
  8077f8:	7c45883a 	add	r2,r15,r17
  8077fc:	13c9803a 	cmpltu	r4,r2,r15
  807800:	8487883a 	add	r3,r16,r18
  807804:	20c9883a 	add	r4,r4,r3
  807808:	a1400115 	stw	r5,4(r20)
  80780c:	a5c00215 	stw	r23,8(r20)
  807810:	a0800315 	stw	r2,12(r20)
  807814:	a1000415 	stw	r4,16(r20)
  807818:	003fb606 	br	8076f4 <_fpadd_parts+0x1a8>
  80781c:	001f883a 	mov	r15,zero
  807820:	0021883a 	mov	r16,zero
  807824:	003f8306 	br	807634 <_fpadd_parts+0xe8>
  807828:	018dc83a 	sub	r6,zero,r6
  80782c:	003f6706 	br	8075cc <_fpadd_parts+0x80>
  807830:	00bfff84 	movi	r2,-2
  807834:	117faf36 	bltu	r2,r5,8076f4 <_fpadd_parts+0x1a8>
  807838:	003f9806 	br	80769c <_fpadd_parts+0x150>
  80783c:	0005883a 	mov	r2,zero
  807840:	1189c83a 	sub	r4,r2,r6
  807844:	1105803a 	cmpltu	r2,r2,r4
  807848:	01cbc83a 	sub	r5,zero,r7
  80784c:	2885c83a 	sub	r2,r5,r2
  807850:	01800044 	movi	r6,1
  807854:	a1800115 	stw	r6,4(r20)
  807858:	a5c00215 	stw	r23,8(r20)
  80785c:	a1000315 	stw	r4,12(r20)
  807860:	a0800415 	stw	r2,16(r20)
  807864:	003f8206 	br	807670 <_fpadd_parts+0x124>
  807868:	203f7226 	beq	r4,zero,807634 <_fpadd_parts+0xe8>
  80786c:	35bff804 	addi	r22,r6,-32
  807870:	b9af883a 	add	r23,r23,r6
  807874:	b0003116 	blt	r22,zero,80793c <_fpadd_parts+0x3f0>
  807878:	959ad83a 	srl	r13,r18,r22
  80787c:	001d883a 	mov	r14,zero
  807880:	000f883a 	mov	r7,zero
  807884:	01000044 	movi	r4,1
  807888:	0011883a 	mov	r8,zero
  80788c:	b0002516 	blt	r22,zero,807924 <_fpadd_parts+0x3d8>
  807890:	2594983a 	sll	r10,r4,r22
  807894:	0013883a 	mov	r9,zero
  807898:	00bfffc4 	movi	r2,-1
  80789c:	4889883a 	add	r4,r9,r2
  8078a0:	508b883a 	add	r5,r10,r2
  8078a4:	224d803a 	cmpltu	r6,r4,r9
  8078a8:	314b883a 	add	r5,r6,r5
  8078ac:	8904703a 	and	r2,r17,r4
  8078b0:	9146703a 	and	r3,r18,r5
  8078b4:	10c4b03a 	or	r2,r2,r3
  8078b8:	10000226 	beq	r2,zero,8078c4 <_fpadd_parts+0x378>
  8078bc:	01c00044 	movi	r7,1
  8078c0:	0011883a 	mov	r8,zero
  8078c4:	69e2b03a 	or	r17,r13,r7
  8078c8:	7224b03a 	or	r18,r14,r8
  8078cc:	003f5906 	br	807634 <_fpadd_parts+0xe8>
  8078d0:	8407883a 	add	r3,r16,r16
  8078d4:	008007c4 	movi	r2,31
  8078d8:	1185c83a 	sub	r2,r2,r6
  8078dc:	1886983a 	sll	r3,r3,r2
  8078e0:	7996d83a 	srl	r11,r15,r6
  8078e4:	8198d83a 	srl	r12,r16,r6
  8078e8:	1ad6b03a 	or	r11,r3,r11
  8078ec:	003f3e06 	br	8075e8 <_fpadd_parts+0x9c>
  8078f0:	2006d07a 	srli	r3,r4,1
  8078f4:	008007c4 	movi	r2,31
  8078f8:	1185c83a 	sub	r2,r2,r6
  8078fc:	1890d83a 	srl	r8,r3,r2
  807900:	218e983a 	sll	r7,r4,r6
  807904:	003f3e06 	br	807600 <_fpadd_parts+0xb4>
  807908:	113f821e 	bne	r2,r4,807714 <_fpadd_parts+0x1c8>
  80790c:	28c00117 	ldw	r3,4(r5)
  807910:	98800117 	ldw	r2,4(r19)
  807914:	10ff7f26 	beq	r2,r3,807714 <_fpadd_parts+0x1c8>
  807918:	04c020b4 	movhi	r19,130
  80791c:	9cefe504 	addi	r19,r19,-16492
  807920:	003f7c06 	br	807714 <_fpadd_parts+0x1c8>
  807924:	2006d07a 	srli	r3,r4,1
  807928:	008007c4 	movi	r2,31
  80792c:	1185c83a 	sub	r2,r2,r6
  807930:	1894d83a 	srl	r10,r3,r2
  807934:	2192983a 	sll	r9,r4,r6
  807938:	003fd706 	br	807898 <_fpadd_parts+0x34c>
  80793c:	9487883a 	add	r3,r18,r18
  807940:	008007c4 	movi	r2,31
  807944:	1185c83a 	sub	r2,r2,r6
  807948:	1886983a 	sll	r3,r3,r2
  80794c:	899ad83a 	srl	r13,r17,r6
  807950:	919cd83a 	srl	r14,r18,r6
  807954:	1b5ab03a 	or	r13,r3,r13
  807958:	003fc906 	br	807880 <_fpadd_parts+0x334>

0080795c <__subdf3>:
  80795c:	deffea04 	addi	sp,sp,-88
  807960:	dcc01415 	stw	r19,80(sp)
  807964:	dcc00404 	addi	r19,sp,16
  807968:	2011883a 	mov	r8,r4
  80796c:	2813883a 	mov	r9,r5
  807970:	dc401315 	stw	r17,76(sp)
  807974:	d809883a 	mov	r4,sp
  807978:	980b883a 	mov	r5,r19
  80797c:	dc400904 	addi	r17,sp,36
  807980:	dfc01515 	stw	ra,84(sp)
  807984:	da400115 	stw	r9,4(sp)
  807988:	d9c00315 	stw	r7,12(sp)
  80798c:	da000015 	stw	r8,0(sp)
  807990:	d9800215 	stw	r6,8(sp)
  807994:	0808cbc0 	call	808cbc <__unpack_d>
  807998:	d9000204 	addi	r4,sp,8
  80799c:	880b883a 	mov	r5,r17
  8079a0:	0808cbc0 	call	808cbc <__unpack_d>
  8079a4:	d8800a17 	ldw	r2,40(sp)
  8079a8:	880b883a 	mov	r5,r17
  8079ac:	9809883a 	mov	r4,r19
  8079b0:	d9800e04 	addi	r6,sp,56
  8079b4:	1080005c 	xori	r2,r2,1
  8079b8:	d8800a15 	stw	r2,40(sp)
  8079bc:	080754c0 	call	80754c <_fpadd_parts>
  8079c0:	1009883a 	mov	r4,r2
  8079c4:	08089a80 	call	8089a8 <__pack_d>
  8079c8:	dfc01517 	ldw	ra,84(sp)
  8079cc:	dcc01417 	ldw	r19,80(sp)
  8079d0:	dc401317 	ldw	r17,76(sp)
  8079d4:	dec01604 	addi	sp,sp,88
  8079d8:	f800283a 	ret

008079dc <__adddf3>:
  8079dc:	deffea04 	addi	sp,sp,-88
  8079e0:	dcc01415 	stw	r19,80(sp)
  8079e4:	dcc00404 	addi	r19,sp,16
  8079e8:	2011883a 	mov	r8,r4
  8079ec:	2813883a 	mov	r9,r5
  8079f0:	dc401315 	stw	r17,76(sp)
  8079f4:	d809883a 	mov	r4,sp
  8079f8:	980b883a 	mov	r5,r19
  8079fc:	dc400904 	addi	r17,sp,36
  807a00:	dfc01515 	stw	ra,84(sp)
  807a04:	da400115 	stw	r9,4(sp)
  807a08:	d9c00315 	stw	r7,12(sp)
  807a0c:	da000015 	stw	r8,0(sp)
  807a10:	d9800215 	stw	r6,8(sp)
  807a14:	0808cbc0 	call	808cbc <__unpack_d>
  807a18:	d9000204 	addi	r4,sp,8
  807a1c:	880b883a 	mov	r5,r17
  807a20:	0808cbc0 	call	808cbc <__unpack_d>
  807a24:	d9800e04 	addi	r6,sp,56
  807a28:	9809883a 	mov	r4,r19
  807a2c:	880b883a 	mov	r5,r17
  807a30:	080754c0 	call	80754c <_fpadd_parts>
  807a34:	1009883a 	mov	r4,r2
  807a38:	08089a80 	call	8089a8 <__pack_d>
  807a3c:	dfc01517 	ldw	ra,84(sp)
  807a40:	dcc01417 	ldw	r19,80(sp)
  807a44:	dc401317 	ldw	r17,76(sp)
  807a48:	dec01604 	addi	sp,sp,88
  807a4c:	f800283a 	ret

00807a50 <__muldf3>:
  807a50:	deffe004 	addi	sp,sp,-128
  807a54:	dc401815 	stw	r17,96(sp)
  807a58:	dc400404 	addi	r17,sp,16
  807a5c:	2011883a 	mov	r8,r4
  807a60:	2813883a 	mov	r9,r5
  807a64:	dc001715 	stw	r16,92(sp)
  807a68:	d809883a 	mov	r4,sp
  807a6c:	880b883a 	mov	r5,r17
  807a70:	dc000904 	addi	r16,sp,36
  807a74:	dfc01f15 	stw	ra,124(sp)
  807a78:	da400115 	stw	r9,4(sp)
  807a7c:	d9c00315 	stw	r7,12(sp)
  807a80:	da000015 	stw	r8,0(sp)
  807a84:	d9800215 	stw	r6,8(sp)
  807a88:	ddc01e15 	stw	r23,120(sp)
  807a8c:	dd801d15 	stw	r22,116(sp)
  807a90:	dd401c15 	stw	r21,112(sp)
  807a94:	dd001b15 	stw	r20,108(sp)
  807a98:	dcc01a15 	stw	r19,104(sp)
  807a9c:	dc801915 	stw	r18,100(sp)
  807aa0:	0808cbc0 	call	808cbc <__unpack_d>
  807aa4:	d9000204 	addi	r4,sp,8
  807aa8:	800b883a 	mov	r5,r16
  807aac:	0808cbc0 	call	808cbc <__unpack_d>
  807ab0:	d9000417 	ldw	r4,16(sp)
  807ab4:	00800044 	movi	r2,1
  807ab8:	1100102e 	bgeu	r2,r4,807afc <__muldf3+0xac>
  807abc:	d8c00917 	ldw	r3,36(sp)
  807ac0:	10c0062e 	bgeu	r2,r3,807adc <__muldf3+0x8c>
  807ac4:	00800104 	movi	r2,4
  807ac8:	20800a26 	beq	r4,r2,807af4 <__muldf3+0xa4>
  807acc:	1880cc26 	beq	r3,r2,807e00 <__muldf3+0x3b0>
  807ad0:	00800084 	movi	r2,2
  807ad4:	20800926 	beq	r4,r2,807afc <__muldf3+0xac>
  807ad8:	1880191e 	bne	r3,r2,807b40 <__muldf3+0xf0>
  807adc:	d8c00a17 	ldw	r3,40(sp)
  807ae0:	d8800517 	ldw	r2,20(sp)
  807ae4:	8009883a 	mov	r4,r16
  807ae8:	10c4c03a 	cmpne	r2,r2,r3
  807aec:	d8800a15 	stw	r2,40(sp)
  807af0:	00000706 	br	807b10 <__muldf3+0xc0>
  807af4:	00800084 	movi	r2,2
  807af8:	1880c326 	beq	r3,r2,807e08 <__muldf3+0x3b8>
  807afc:	d8800517 	ldw	r2,20(sp)
  807b00:	d8c00a17 	ldw	r3,40(sp)
  807b04:	8809883a 	mov	r4,r17
  807b08:	10c4c03a 	cmpne	r2,r2,r3
  807b0c:	d8800515 	stw	r2,20(sp)
  807b10:	08089a80 	call	8089a8 <__pack_d>
  807b14:	dfc01f17 	ldw	ra,124(sp)
  807b18:	ddc01e17 	ldw	r23,120(sp)
  807b1c:	dd801d17 	ldw	r22,116(sp)
  807b20:	dd401c17 	ldw	r21,112(sp)
  807b24:	dd001b17 	ldw	r20,108(sp)
  807b28:	dcc01a17 	ldw	r19,104(sp)
  807b2c:	dc801917 	ldw	r18,100(sp)
  807b30:	dc401817 	ldw	r17,96(sp)
  807b34:	dc001717 	ldw	r16,92(sp)
  807b38:	dec02004 	addi	sp,sp,128
  807b3c:	f800283a 	ret
  807b40:	dd800717 	ldw	r22,28(sp)
  807b44:	dc800c17 	ldw	r18,48(sp)
  807b48:	002b883a 	mov	r21,zero
  807b4c:	0023883a 	mov	r17,zero
  807b50:	a80b883a 	mov	r5,r21
  807b54:	b00d883a 	mov	r6,r22
  807b58:	880f883a 	mov	r7,r17
  807b5c:	ddc00817 	ldw	r23,32(sp)
  807b60:	dcc00d17 	ldw	r19,52(sp)
  807b64:	9009883a 	mov	r4,r18
  807b68:	08086680 	call	808668 <__muldi3>
  807b6c:	001b883a 	mov	r13,zero
  807b70:	680f883a 	mov	r7,r13
  807b74:	b009883a 	mov	r4,r22
  807b78:	000b883a 	mov	r5,zero
  807b7c:	980d883a 	mov	r6,r19
  807b80:	b82d883a 	mov	r22,r23
  807b84:	002f883a 	mov	r23,zero
  807b88:	db401615 	stw	r13,88(sp)
  807b8c:	d8801315 	stw	r2,76(sp)
  807b90:	d8c01415 	stw	r3,80(sp)
  807b94:	dcc01515 	stw	r19,84(sp)
  807b98:	08086680 	call	808668 <__muldi3>
  807b9c:	b00d883a 	mov	r6,r22
  807ba0:	000b883a 	mov	r5,zero
  807ba4:	9009883a 	mov	r4,r18
  807ba8:	b80f883a 	mov	r7,r23
  807bac:	1021883a 	mov	r16,r2
  807bb0:	1823883a 	mov	r17,r3
  807bb4:	08086680 	call	808668 <__muldi3>
  807bb8:	8085883a 	add	r2,r16,r2
  807bbc:	140d803a 	cmpltu	r6,r2,r16
  807bc0:	88c7883a 	add	r3,r17,r3
  807bc4:	30cd883a 	add	r6,r6,r3
  807bc8:	1029883a 	mov	r20,r2
  807bcc:	302b883a 	mov	r21,r6
  807bd0:	da801317 	ldw	r10,76(sp)
  807bd4:	dac01417 	ldw	r11,80(sp)
  807bd8:	db001517 	ldw	r12,84(sp)
  807bdc:	db401617 	ldw	r13,88(sp)
  807be0:	3440612e 	bgeu	r6,r17,807d68 <__muldf3+0x318>
  807be4:	0009883a 	mov	r4,zero
  807be8:	5105883a 	add	r2,r10,r4
  807bec:	128d803a 	cmpltu	r6,r2,r10
  807bf0:	5d07883a 	add	r3,r11,r20
  807bf4:	30cd883a 	add	r6,r6,r3
  807bf8:	0021883a 	mov	r16,zero
  807bfc:	04400044 	movi	r17,1
  807c00:	1025883a 	mov	r18,r2
  807c04:	3027883a 	mov	r19,r6
  807c08:	32c06236 	bltu	r6,r11,807d94 <__muldf3+0x344>
  807c0c:	59807a26 	beq	r11,r6,807df8 <__muldf3+0x3a8>
  807c10:	680b883a 	mov	r5,r13
  807c14:	b80f883a 	mov	r7,r23
  807c18:	6009883a 	mov	r4,r12
  807c1c:	b00d883a 	mov	r6,r22
  807c20:	08086680 	call	808668 <__muldi3>
  807c24:	1009883a 	mov	r4,r2
  807c28:	000f883a 	mov	r7,zero
  807c2c:	1545883a 	add	r2,r2,r21
  807c30:	1111803a 	cmpltu	r8,r2,r4
  807c34:	19c7883a 	add	r3,r3,r7
  807c38:	40c7883a 	add	r3,r8,r3
  807c3c:	88cb883a 	add	r5,r17,r3
  807c40:	d8c00617 	ldw	r3,24(sp)
  807c44:	8089883a 	add	r4,r16,r2
  807c48:	d8800b17 	ldw	r2,44(sp)
  807c4c:	18c00104 	addi	r3,r3,4
  807c50:	240d803a 	cmpltu	r6,r4,r16
  807c54:	10c7883a 	add	r3,r2,r3
  807c58:	2013883a 	mov	r9,r4
  807c5c:	d8800a17 	ldw	r2,40(sp)
  807c60:	d9000517 	ldw	r4,20(sp)
  807c64:	314d883a 	add	r6,r6,r5
  807c68:	3015883a 	mov	r10,r6
  807c6c:	2088c03a 	cmpne	r4,r4,r2
  807c70:	00880034 	movhi	r2,8192
  807c74:	10bfffc4 	addi	r2,r2,-1
  807c78:	d9000f15 	stw	r4,60(sp)
  807c7c:	d8c01015 	stw	r3,64(sp)
  807c80:	1180162e 	bgeu	r2,r6,807cdc <__muldf3+0x28c>
  807c84:	1811883a 	mov	r8,r3
  807c88:	101f883a 	mov	r15,r2
  807c8c:	980497fa 	slli	r2,r19,31
  807c90:	9016d07a 	srli	r11,r18,1
  807c94:	500697fa 	slli	r3,r10,31
  807c98:	480cd07a 	srli	r6,r9,1
  807c9c:	500ed07a 	srli	r7,r10,1
  807ca0:	12d6b03a 	or	r11,r2,r11
  807ca4:	00800044 	movi	r2,1
  807ca8:	198cb03a 	or	r6,r3,r6
  807cac:	4888703a 	and	r4,r9,r2
  807cb0:	9818d07a 	srli	r12,r19,1
  807cb4:	001b883a 	mov	r13,zero
  807cb8:	03a00034 	movhi	r14,32768
  807cbc:	3013883a 	mov	r9,r6
  807cc0:	3815883a 	mov	r10,r7
  807cc4:	4091883a 	add	r8,r8,r2
  807cc8:	20000226 	beq	r4,zero,807cd4 <__muldf3+0x284>
  807ccc:	5b64b03a 	or	r18,r11,r13
  807cd0:	63a6b03a 	or	r19,r12,r14
  807cd4:	7abfed36 	bltu	r15,r10,807c8c <__muldf3+0x23c>
  807cd8:	da001015 	stw	r8,64(sp)
  807cdc:	00840034 	movhi	r2,4096
  807ce0:	10bfffc4 	addi	r2,r2,-1
  807ce4:	12801436 	bltu	r2,r10,807d38 <__muldf3+0x2e8>
  807ce8:	da001017 	ldw	r8,64(sp)
  807cec:	101f883a 	mov	r15,r2
  807cf0:	4a45883a 	add	r2,r9,r9
  807cf4:	124d803a 	cmpltu	r6,r2,r9
  807cf8:	5287883a 	add	r3,r10,r10
  807cfc:	9497883a 	add	r11,r18,r18
  807d00:	5c8f803a 	cmpltu	r7,r11,r18
  807d04:	9cd9883a 	add	r12,r19,r19
  807d08:	01000044 	movi	r4,1
  807d0c:	30cd883a 	add	r6,r6,r3
  807d10:	3b0f883a 	add	r7,r7,r12
  807d14:	423fffc4 	addi	r8,r8,-1
  807d18:	1013883a 	mov	r9,r2
  807d1c:	3015883a 	mov	r10,r6
  807d20:	111ab03a 	or	r13,r2,r4
  807d24:	98003016 	blt	r19,zero,807de8 <__muldf3+0x398>
  807d28:	5825883a 	mov	r18,r11
  807d2c:	3827883a 	mov	r19,r7
  807d30:	7abfef2e 	bgeu	r15,r10,807cf0 <__muldf3+0x2a0>
  807d34:	da001015 	stw	r8,64(sp)
  807d38:	00803fc4 	movi	r2,255
  807d3c:	488e703a 	and	r7,r9,r2
  807d40:	00802004 	movi	r2,128
  807d44:	0007883a 	mov	r3,zero
  807d48:	0011883a 	mov	r8,zero
  807d4c:	38801826 	beq	r7,r2,807db0 <__muldf3+0x360>
  807d50:	008000c4 	movi	r2,3
  807d54:	d9000e04 	addi	r4,sp,56
  807d58:	da801215 	stw	r10,72(sp)
  807d5c:	d8800e15 	stw	r2,56(sp)
  807d60:	da401115 	stw	r9,68(sp)
  807d64:	003f6a06 	br	807b10 <__muldf3+0xc0>
  807d68:	89802126 	beq	r17,r6,807df0 <__muldf3+0x3a0>
  807d6c:	0009883a 	mov	r4,zero
  807d70:	5105883a 	add	r2,r10,r4
  807d74:	128d803a 	cmpltu	r6,r2,r10
  807d78:	5d07883a 	add	r3,r11,r20
  807d7c:	30cd883a 	add	r6,r6,r3
  807d80:	0021883a 	mov	r16,zero
  807d84:	0023883a 	mov	r17,zero
  807d88:	1025883a 	mov	r18,r2
  807d8c:	3027883a 	mov	r19,r6
  807d90:	32ff9e2e 	bgeu	r6,r11,807c0c <__muldf3+0x1bc>
  807d94:	00800044 	movi	r2,1
  807d98:	8089883a 	add	r4,r16,r2
  807d9c:	240d803a 	cmpltu	r6,r4,r16
  807da0:	344d883a 	add	r6,r6,r17
  807da4:	2021883a 	mov	r16,r4
  807da8:	3023883a 	mov	r17,r6
  807dac:	003f9806 	br	807c10 <__muldf3+0x1c0>
  807db0:	403fe71e 	bne	r8,zero,807d50 <__muldf3+0x300>
  807db4:	01004004 	movi	r4,256
  807db8:	4904703a 	and	r2,r9,r4
  807dbc:	10c4b03a 	or	r2,r2,r3
  807dc0:	103fe31e 	bne	r2,zero,807d50 <__muldf3+0x300>
  807dc4:	94c4b03a 	or	r2,r18,r19
  807dc8:	103fe126 	beq	r2,zero,807d50 <__muldf3+0x300>
  807dcc:	49c5883a 	add	r2,r9,r7
  807dd0:	1251803a 	cmpltu	r8,r2,r9
  807dd4:	4291883a 	add	r8,r8,r10
  807dd8:	013fc004 	movi	r4,-256
  807ddc:	1112703a 	and	r9,r2,r4
  807de0:	4015883a 	mov	r10,r8
  807de4:	003fda06 	br	807d50 <__muldf3+0x300>
  807de8:	6813883a 	mov	r9,r13
  807dec:	003fce06 	br	807d28 <__muldf3+0x2d8>
  807df0:	143f7c36 	bltu	r2,r16,807be4 <__muldf3+0x194>
  807df4:	003fdd06 	br	807d6c <__muldf3+0x31c>
  807df8:	12bf852e 	bgeu	r2,r10,807c10 <__muldf3+0x1c0>
  807dfc:	003fe506 	br	807d94 <__muldf3+0x344>
  807e00:	00800084 	movi	r2,2
  807e04:	20bf351e 	bne	r4,r2,807adc <__muldf3+0x8c>
  807e08:	010020b4 	movhi	r4,130
  807e0c:	212fe504 	addi	r4,r4,-16492
  807e10:	003f3f06 	br	807b10 <__muldf3+0xc0>

00807e14 <__divdf3>:
  807e14:	deffed04 	addi	sp,sp,-76
  807e18:	dcc01115 	stw	r19,68(sp)
  807e1c:	dcc00404 	addi	r19,sp,16
  807e20:	2011883a 	mov	r8,r4
  807e24:	2813883a 	mov	r9,r5
  807e28:	dc000e15 	stw	r16,56(sp)
  807e2c:	d809883a 	mov	r4,sp
  807e30:	980b883a 	mov	r5,r19
  807e34:	dc000904 	addi	r16,sp,36
  807e38:	dfc01215 	stw	ra,72(sp)
  807e3c:	da400115 	stw	r9,4(sp)
  807e40:	d9c00315 	stw	r7,12(sp)
  807e44:	da000015 	stw	r8,0(sp)
  807e48:	d9800215 	stw	r6,8(sp)
  807e4c:	dc801015 	stw	r18,64(sp)
  807e50:	dc400f15 	stw	r17,60(sp)
  807e54:	0808cbc0 	call	808cbc <__unpack_d>
  807e58:	d9000204 	addi	r4,sp,8
  807e5c:	800b883a 	mov	r5,r16
  807e60:	0808cbc0 	call	808cbc <__unpack_d>
  807e64:	d9000417 	ldw	r4,16(sp)
  807e68:	00800044 	movi	r2,1
  807e6c:	11000b2e 	bgeu	r2,r4,807e9c <__divdf3+0x88>
  807e70:	d9400917 	ldw	r5,36(sp)
  807e74:	1140762e 	bgeu	r2,r5,808050 <__divdf3+0x23c>
  807e78:	d8800517 	ldw	r2,20(sp)
  807e7c:	d8c00a17 	ldw	r3,40(sp)
  807e80:	01800104 	movi	r6,4
  807e84:	10c4f03a 	xor	r2,r2,r3
  807e88:	d8800515 	stw	r2,20(sp)
  807e8c:	21800226 	beq	r4,r6,807e98 <__divdf3+0x84>
  807e90:	00800084 	movi	r2,2
  807e94:	2080141e 	bne	r4,r2,807ee8 <__divdf3+0xd4>
  807e98:	29000926 	beq	r5,r4,807ec0 <__divdf3+0xac>
  807e9c:	9809883a 	mov	r4,r19
  807ea0:	08089a80 	call	8089a8 <__pack_d>
  807ea4:	dfc01217 	ldw	ra,72(sp)
  807ea8:	dcc01117 	ldw	r19,68(sp)
  807eac:	dc801017 	ldw	r18,64(sp)
  807eb0:	dc400f17 	ldw	r17,60(sp)
  807eb4:	dc000e17 	ldw	r16,56(sp)
  807eb8:	dec01304 	addi	sp,sp,76
  807ebc:	f800283a 	ret
  807ec0:	010020b4 	movhi	r4,130
  807ec4:	212fe504 	addi	r4,r4,-16492
  807ec8:	08089a80 	call	8089a8 <__pack_d>
  807ecc:	dfc01217 	ldw	ra,72(sp)
  807ed0:	dcc01117 	ldw	r19,68(sp)
  807ed4:	dc801017 	ldw	r18,64(sp)
  807ed8:	dc400f17 	ldw	r17,60(sp)
  807edc:	dc000e17 	ldw	r16,56(sp)
  807ee0:	dec01304 	addi	sp,sp,76
  807ee4:	f800283a 	ret
  807ee8:	29805b26 	beq	r5,r6,808058 <__divdf3+0x244>
  807eec:	28802d26 	beq	r5,r2,807fa4 <__divdf3+0x190>
  807ef0:	d8c00617 	ldw	r3,24(sp)
  807ef4:	d8800b17 	ldw	r2,44(sp)
  807ef8:	d9c00817 	ldw	r7,32(sp)
  807efc:	dc400d17 	ldw	r17,52(sp)
  807f00:	188bc83a 	sub	r5,r3,r2
  807f04:	d9800717 	ldw	r6,28(sp)
  807f08:	dc000c17 	ldw	r16,48(sp)
  807f0c:	d9400615 	stw	r5,24(sp)
  807f10:	3c403836 	bltu	r7,r17,807ff4 <__divdf3+0x1e0>
  807f14:	89c03626 	beq	r17,r7,807ff0 <__divdf3+0x1dc>
  807f18:	0015883a 	mov	r10,zero
  807f1c:	001d883a 	mov	r14,zero
  807f20:	02c40034 	movhi	r11,4096
  807f24:	001f883a 	mov	r15,zero
  807f28:	003f883a 	mov	ra,zero
  807f2c:	04800f44 	movi	r18,61
  807f30:	00000f06 	br	807f70 <__divdf3+0x15c>
  807f34:	601d883a 	mov	r14,r12
  807f38:	681f883a 	mov	r15,r13
  807f3c:	400d883a 	mov	r6,r8
  807f40:	100f883a 	mov	r7,r2
  807f44:	3191883a 	add	r8,r6,r6
  807f48:	5808d07a 	srli	r4,r11,1
  807f4c:	4185803a 	cmpltu	r2,r8,r6
  807f50:	39d3883a 	add	r9,r7,r7
  807f54:	28c6b03a 	or	r3,r5,r3
  807f58:	1245883a 	add	r2,r2,r9
  807f5c:	1815883a 	mov	r10,r3
  807f60:	2017883a 	mov	r11,r4
  807f64:	400d883a 	mov	r6,r8
  807f68:	100f883a 	mov	r7,r2
  807f6c:	fc801726 	beq	ra,r18,807fcc <__divdf3+0x1b8>
  807f70:	580a97fa 	slli	r5,r11,31
  807f74:	5006d07a 	srli	r3,r10,1
  807f78:	ffc00044 	addi	ra,ra,1
  807f7c:	3c7ff136 	bltu	r7,r17,807f44 <__divdf3+0x130>
  807f80:	3411c83a 	sub	r8,r6,r16
  807f84:	3205803a 	cmpltu	r2,r6,r8
  807f88:	3c53c83a 	sub	r9,r7,r17
  807f8c:	7298b03a 	or	r12,r14,r10
  807f90:	7adab03a 	or	r13,r15,r11
  807f94:	4885c83a 	sub	r2,r9,r2
  807f98:	89ffe61e 	bne	r17,r7,807f34 <__divdf3+0x120>
  807f9c:	343fe936 	bltu	r6,r16,807f44 <__divdf3+0x130>
  807fa0:	003fe406 	br	807f34 <__divdf3+0x120>
  807fa4:	9809883a 	mov	r4,r19
  807fa8:	d9800415 	stw	r6,16(sp)
  807fac:	08089a80 	call	8089a8 <__pack_d>
  807fb0:	dfc01217 	ldw	ra,72(sp)
  807fb4:	dcc01117 	ldw	r19,68(sp)
  807fb8:	dc801017 	ldw	r18,64(sp)
  807fbc:	dc400f17 	ldw	r17,60(sp)
  807fc0:	dc000e17 	ldw	r16,56(sp)
  807fc4:	dec01304 	addi	sp,sp,76
  807fc8:	f800283a 	ret
  807fcc:	00803fc4 	movi	r2,255
  807fd0:	7090703a 	and	r8,r14,r2
  807fd4:	00802004 	movi	r2,128
  807fd8:	0007883a 	mov	r3,zero
  807fdc:	0013883a 	mov	r9,zero
  807fe0:	40800d26 	beq	r8,r2,808018 <__divdf3+0x204>
  807fe4:	dbc00815 	stw	r15,32(sp)
  807fe8:	db800715 	stw	r14,28(sp)
  807fec:	003fab06 	br	807e9c <__divdf3+0x88>
  807ff0:	343fc92e 	bgeu	r6,r16,807f18 <__divdf3+0x104>
  807ff4:	3185883a 	add	r2,r6,r6
  807ff8:	1189803a 	cmpltu	r4,r2,r6
  807ffc:	39c7883a 	add	r3,r7,r7
  808000:	20c9883a 	add	r4,r4,r3
  808004:	297fffc4 	addi	r5,r5,-1
  808008:	100d883a 	mov	r6,r2
  80800c:	200f883a 	mov	r7,r4
  808010:	d9400615 	stw	r5,24(sp)
  808014:	003fc006 	br	807f18 <__divdf3+0x104>
  808018:	483ff21e 	bne	r9,zero,807fe4 <__divdf3+0x1d0>
  80801c:	01004004 	movi	r4,256
  808020:	7104703a 	and	r2,r14,r4
  808024:	10c4b03a 	or	r2,r2,r3
  808028:	103fee1e 	bne	r2,zero,807fe4 <__divdf3+0x1d0>
  80802c:	31c4b03a 	or	r2,r6,r7
  808030:	103fec26 	beq	r2,zero,807fe4 <__divdf3+0x1d0>
  808034:	7205883a 	add	r2,r14,r8
  808038:	1391803a 	cmpltu	r8,r2,r14
  80803c:	43d1883a 	add	r8,r8,r15
  808040:	013fc004 	movi	r4,-256
  808044:	111c703a 	and	r14,r2,r4
  808048:	401f883a 	mov	r15,r8
  80804c:	003fe506 	br	807fe4 <__divdf3+0x1d0>
  808050:	8009883a 	mov	r4,r16
  808054:	003f9206 	br	807ea0 <__divdf3+0x8c>
  808058:	9809883a 	mov	r4,r19
  80805c:	d8000715 	stw	zero,28(sp)
  808060:	d8000815 	stw	zero,32(sp)
  808064:	d8000615 	stw	zero,24(sp)
  808068:	003f8d06 	br	807ea0 <__divdf3+0x8c>

0080806c <__eqdf2>:
  80806c:	deffef04 	addi	sp,sp,-68
  808070:	dc400f15 	stw	r17,60(sp)
  808074:	dc400404 	addi	r17,sp,16
  808078:	2005883a 	mov	r2,r4
  80807c:	2807883a 	mov	r3,r5
  808080:	dc000e15 	stw	r16,56(sp)
  808084:	d809883a 	mov	r4,sp
  808088:	880b883a 	mov	r5,r17
  80808c:	dc000904 	addi	r16,sp,36
  808090:	d8c00115 	stw	r3,4(sp)
  808094:	d8800015 	stw	r2,0(sp)
  808098:	d9800215 	stw	r6,8(sp)
  80809c:	dfc01015 	stw	ra,64(sp)
  8080a0:	d9c00315 	stw	r7,12(sp)
  8080a4:	0808cbc0 	call	808cbc <__unpack_d>
  8080a8:	d9000204 	addi	r4,sp,8
  8080ac:	800b883a 	mov	r5,r16
  8080b0:	0808cbc0 	call	808cbc <__unpack_d>
  8080b4:	d8800417 	ldw	r2,16(sp)
  8080b8:	00c00044 	movi	r3,1
  8080bc:	180d883a 	mov	r6,r3
  8080c0:	1880062e 	bgeu	r3,r2,8080dc <__eqdf2+0x70>
  8080c4:	d8800917 	ldw	r2,36(sp)
  8080c8:	8809883a 	mov	r4,r17
  8080cc:	800b883a 	mov	r5,r16
  8080d0:	1880022e 	bgeu	r3,r2,8080dc <__eqdf2+0x70>
  8080d4:	0808df40 	call	808df4 <__fpcmp_parts_d>
  8080d8:	100d883a 	mov	r6,r2
  8080dc:	3005883a 	mov	r2,r6
  8080e0:	dfc01017 	ldw	ra,64(sp)
  8080e4:	dc400f17 	ldw	r17,60(sp)
  8080e8:	dc000e17 	ldw	r16,56(sp)
  8080ec:	dec01104 	addi	sp,sp,68
  8080f0:	f800283a 	ret

008080f4 <__nedf2>:
  8080f4:	deffef04 	addi	sp,sp,-68
  8080f8:	dc400f15 	stw	r17,60(sp)
  8080fc:	dc400404 	addi	r17,sp,16
  808100:	2005883a 	mov	r2,r4
  808104:	2807883a 	mov	r3,r5
  808108:	dc000e15 	stw	r16,56(sp)
  80810c:	d809883a 	mov	r4,sp
  808110:	880b883a 	mov	r5,r17
  808114:	dc000904 	addi	r16,sp,36
  808118:	d8c00115 	stw	r3,4(sp)
  80811c:	d8800015 	stw	r2,0(sp)
  808120:	d9800215 	stw	r6,8(sp)
  808124:	dfc01015 	stw	ra,64(sp)
  808128:	d9c00315 	stw	r7,12(sp)
  80812c:	0808cbc0 	call	808cbc <__unpack_d>
  808130:	d9000204 	addi	r4,sp,8
  808134:	800b883a 	mov	r5,r16
  808138:	0808cbc0 	call	808cbc <__unpack_d>
  80813c:	d8800417 	ldw	r2,16(sp)
  808140:	00c00044 	movi	r3,1
  808144:	180d883a 	mov	r6,r3
  808148:	1880062e 	bgeu	r3,r2,808164 <__nedf2+0x70>
  80814c:	d8800917 	ldw	r2,36(sp)
  808150:	8809883a 	mov	r4,r17
  808154:	800b883a 	mov	r5,r16
  808158:	1880022e 	bgeu	r3,r2,808164 <__nedf2+0x70>
  80815c:	0808df40 	call	808df4 <__fpcmp_parts_d>
  808160:	100d883a 	mov	r6,r2
  808164:	3005883a 	mov	r2,r6
  808168:	dfc01017 	ldw	ra,64(sp)
  80816c:	dc400f17 	ldw	r17,60(sp)
  808170:	dc000e17 	ldw	r16,56(sp)
  808174:	dec01104 	addi	sp,sp,68
  808178:	f800283a 	ret

0080817c <__gtdf2>:
  80817c:	deffef04 	addi	sp,sp,-68
  808180:	dc400f15 	stw	r17,60(sp)
  808184:	dc400404 	addi	r17,sp,16
  808188:	2005883a 	mov	r2,r4
  80818c:	2807883a 	mov	r3,r5
  808190:	dc000e15 	stw	r16,56(sp)
  808194:	d809883a 	mov	r4,sp
  808198:	880b883a 	mov	r5,r17
  80819c:	dc000904 	addi	r16,sp,36
  8081a0:	d8c00115 	stw	r3,4(sp)
  8081a4:	d8800015 	stw	r2,0(sp)
  8081a8:	d9800215 	stw	r6,8(sp)
  8081ac:	dfc01015 	stw	ra,64(sp)
  8081b0:	d9c00315 	stw	r7,12(sp)
  8081b4:	0808cbc0 	call	808cbc <__unpack_d>
  8081b8:	d9000204 	addi	r4,sp,8
  8081bc:	800b883a 	mov	r5,r16
  8081c0:	0808cbc0 	call	808cbc <__unpack_d>
  8081c4:	d8800417 	ldw	r2,16(sp)
  8081c8:	00c00044 	movi	r3,1
  8081cc:	01bfffc4 	movi	r6,-1
  8081d0:	1880062e 	bgeu	r3,r2,8081ec <__gtdf2+0x70>
  8081d4:	d8800917 	ldw	r2,36(sp)
  8081d8:	8809883a 	mov	r4,r17
  8081dc:	800b883a 	mov	r5,r16
  8081e0:	1880022e 	bgeu	r3,r2,8081ec <__gtdf2+0x70>
  8081e4:	0808df40 	call	808df4 <__fpcmp_parts_d>
  8081e8:	100d883a 	mov	r6,r2
  8081ec:	3005883a 	mov	r2,r6
  8081f0:	dfc01017 	ldw	ra,64(sp)
  8081f4:	dc400f17 	ldw	r17,60(sp)
  8081f8:	dc000e17 	ldw	r16,56(sp)
  8081fc:	dec01104 	addi	sp,sp,68
  808200:	f800283a 	ret

00808204 <__ltdf2>:
  808204:	deffef04 	addi	sp,sp,-68
  808208:	dc400f15 	stw	r17,60(sp)
  80820c:	dc400404 	addi	r17,sp,16
  808210:	2005883a 	mov	r2,r4
  808214:	2807883a 	mov	r3,r5
  808218:	dc000e15 	stw	r16,56(sp)
  80821c:	d809883a 	mov	r4,sp
  808220:	880b883a 	mov	r5,r17
  808224:	dc000904 	addi	r16,sp,36
  808228:	d8c00115 	stw	r3,4(sp)
  80822c:	d8800015 	stw	r2,0(sp)
  808230:	d9800215 	stw	r6,8(sp)
  808234:	dfc01015 	stw	ra,64(sp)
  808238:	d9c00315 	stw	r7,12(sp)
  80823c:	0808cbc0 	call	808cbc <__unpack_d>
  808240:	d9000204 	addi	r4,sp,8
  808244:	800b883a 	mov	r5,r16
  808248:	0808cbc0 	call	808cbc <__unpack_d>
  80824c:	d8800417 	ldw	r2,16(sp)
  808250:	00c00044 	movi	r3,1
  808254:	180d883a 	mov	r6,r3
  808258:	1880062e 	bgeu	r3,r2,808274 <__ltdf2+0x70>
  80825c:	d8800917 	ldw	r2,36(sp)
  808260:	8809883a 	mov	r4,r17
  808264:	800b883a 	mov	r5,r16
  808268:	1880022e 	bgeu	r3,r2,808274 <__ltdf2+0x70>
  80826c:	0808df40 	call	808df4 <__fpcmp_parts_d>
  808270:	100d883a 	mov	r6,r2
  808274:	3005883a 	mov	r2,r6
  808278:	dfc01017 	ldw	ra,64(sp)
  80827c:	dc400f17 	ldw	r17,60(sp)
  808280:	dc000e17 	ldw	r16,56(sp)
  808284:	dec01104 	addi	sp,sp,68
  808288:	f800283a 	ret

0080828c <__ledf2>:
  80828c:	deffef04 	addi	sp,sp,-68
  808290:	dc400f15 	stw	r17,60(sp)
  808294:	dc400404 	addi	r17,sp,16
  808298:	2005883a 	mov	r2,r4
  80829c:	2807883a 	mov	r3,r5
  8082a0:	dc000e15 	stw	r16,56(sp)
  8082a4:	d809883a 	mov	r4,sp
  8082a8:	880b883a 	mov	r5,r17
  8082ac:	dc000904 	addi	r16,sp,36
  8082b0:	d8c00115 	stw	r3,4(sp)
  8082b4:	d8800015 	stw	r2,0(sp)
  8082b8:	d9800215 	stw	r6,8(sp)
  8082bc:	dfc01015 	stw	ra,64(sp)
  8082c0:	d9c00315 	stw	r7,12(sp)
  8082c4:	0808cbc0 	call	808cbc <__unpack_d>
  8082c8:	d9000204 	addi	r4,sp,8
  8082cc:	800b883a 	mov	r5,r16
  8082d0:	0808cbc0 	call	808cbc <__unpack_d>
  8082d4:	d8800417 	ldw	r2,16(sp)
  8082d8:	00c00044 	movi	r3,1
  8082dc:	180d883a 	mov	r6,r3
  8082e0:	1880062e 	bgeu	r3,r2,8082fc <__ledf2+0x70>
  8082e4:	d8800917 	ldw	r2,36(sp)
  8082e8:	8809883a 	mov	r4,r17
  8082ec:	800b883a 	mov	r5,r16
  8082f0:	1880022e 	bgeu	r3,r2,8082fc <__ledf2+0x70>
  8082f4:	0808df40 	call	808df4 <__fpcmp_parts_d>
  8082f8:	100d883a 	mov	r6,r2
  8082fc:	3005883a 	mov	r2,r6
  808300:	dfc01017 	ldw	ra,64(sp)
  808304:	dc400f17 	ldw	r17,60(sp)
  808308:	dc000e17 	ldw	r16,56(sp)
  80830c:	dec01104 	addi	sp,sp,68
  808310:	f800283a 	ret

00808314 <__floatsidf>:
  808314:	2006d7fa 	srli	r3,r4,31
  808318:	defff604 	addi	sp,sp,-40
  80831c:	008000c4 	movi	r2,3
  808320:	dfc00915 	stw	ra,36(sp)
  808324:	dcc00815 	stw	r19,32(sp)
  808328:	dc800715 	stw	r18,28(sp)
  80832c:	dc400615 	stw	r17,24(sp)
  808330:	dc000515 	stw	r16,20(sp)
  808334:	d8800015 	stw	r2,0(sp)
  808338:	d8c00115 	stw	r3,4(sp)
  80833c:	20000f1e 	bne	r4,zero,80837c <__floatsidf+0x68>
  808340:	00800084 	movi	r2,2
  808344:	d8800015 	stw	r2,0(sp)
  808348:	d809883a 	mov	r4,sp
  80834c:	08089a80 	call	8089a8 <__pack_d>
  808350:	1009883a 	mov	r4,r2
  808354:	180b883a 	mov	r5,r3
  808358:	2005883a 	mov	r2,r4
  80835c:	2807883a 	mov	r3,r5
  808360:	dfc00917 	ldw	ra,36(sp)
  808364:	dcc00817 	ldw	r19,32(sp)
  808368:	dc800717 	ldw	r18,28(sp)
  80836c:	dc400617 	ldw	r17,24(sp)
  808370:	dc000517 	ldw	r16,20(sp)
  808374:	dec00a04 	addi	sp,sp,40
  808378:	f800283a 	ret
  80837c:	00800f04 	movi	r2,60
  808380:	1807003a 	cmpeq	r3,r3,zero
  808384:	d8800215 	stw	r2,8(sp)
  808388:	18001126 	beq	r3,zero,8083d0 <__floatsidf+0xbc>
  80838c:	0027883a 	mov	r19,zero
  808390:	2025883a 	mov	r18,r4
  808394:	d9000315 	stw	r4,12(sp)
  808398:	dcc00415 	stw	r19,16(sp)
  80839c:	08087000 	call	808700 <__clzsi2>
  8083a0:	11000744 	addi	r4,r2,29
  8083a4:	013fe80e 	bge	zero,r4,808348 <__floatsidf+0x34>
  8083a8:	10bfff44 	addi	r2,r2,-3
  8083ac:	10000c16 	blt	r2,zero,8083e0 <__floatsidf+0xcc>
  8083b0:	90a2983a 	sll	r17,r18,r2
  8083b4:	0021883a 	mov	r16,zero
  8083b8:	d8800217 	ldw	r2,8(sp)
  8083bc:	dc400415 	stw	r17,16(sp)
  8083c0:	dc000315 	stw	r16,12(sp)
  8083c4:	1105c83a 	sub	r2,r2,r4
  8083c8:	d8800215 	stw	r2,8(sp)
  8083cc:	003fde06 	br	808348 <__floatsidf+0x34>
  8083d0:	00a00034 	movhi	r2,32768
  8083d4:	20800a26 	beq	r4,r2,808400 <__floatsidf+0xec>
  8083d8:	0109c83a 	sub	r4,zero,r4
  8083dc:	003feb06 	br	80838c <__floatsidf+0x78>
  8083e0:	9006d07a 	srli	r3,r18,1
  8083e4:	008007c4 	movi	r2,31
  8083e8:	1105c83a 	sub	r2,r2,r4
  8083ec:	1886d83a 	srl	r3,r3,r2
  8083f0:	9922983a 	sll	r17,r19,r4
  8083f4:	9120983a 	sll	r16,r18,r4
  8083f8:	1c62b03a 	or	r17,r3,r17
  8083fc:	003fee06 	br	8083b8 <__floatsidf+0xa4>
  808400:	0009883a 	mov	r4,zero
  808404:	01707834 	movhi	r5,49632
  808408:	003fd306 	br	808358 <__floatsidf+0x44>

0080840c <__fixdfsi>:
  80840c:	defff804 	addi	sp,sp,-32
  808410:	2005883a 	mov	r2,r4
  808414:	2807883a 	mov	r3,r5
  808418:	d809883a 	mov	r4,sp
  80841c:	d9400204 	addi	r5,sp,8
  808420:	d8c00115 	stw	r3,4(sp)
  808424:	d8800015 	stw	r2,0(sp)
  808428:	dfc00715 	stw	ra,28(sp)
  80842c:	0808cbc0 	call	808cbc <__unpack_d>
  808430:	d8c00217 	ldw	r3,8(sp)
  808434:	00800084 	movi	r2,2
  808438:	1880051e 	bne	r3,r2,808450 <__fixdfsi+0x44>
  80843c:	0007883a 	mov	r3,zero
  808440:	1805883a 	mov	r2,r3
  808444:	dfc00717 	ldw	ra,28(sp)
  808448:	dec00804 	addi	sp,sp,32
  80844c:	f800283a 	ret
  808450:	00800044 	movi	r2,1
  808454:	10fff92e 	bgeu	r2,r3,80843c <__fixdfsi+0x30>
  808458:	00800104 	movi	r2,4
  80845c:	18800426 	beq	r3,r2,808470 <__fixdfsi+0x64>
  808460:	d8c00417 	ldw	r3,16(sp)
  808464:	183ff516 	blt	r3,zero,80843c <__fixdfsi+0x30>
  808468:	00800784 	movi	r2,30
  80846c:	10c0080e 	bge	r2,r3,808490 <__fixdfsi+0x84>
  808470:	d8800317 	ldw	r2,12(sp)
  808474:	1000121e 	bne	r2,zero,8084c0 <__fixdfsi+0xb4>
  808478:	00e00034 	movhi	r3,32768
  80847c:	18ffffc4 	addi	r3,r3,-1
  808480:	1805883a 	mov	r2,r3
  808484:	dfc00717 	ldw	ra,28(sp)
  808488:	dec00804 	addi	sp,sp,32
  80848c:	f800283a 	ret
  808490:	00800f04 	movi	r2,60
  808494:	10d1c83a 	sub	r8,r2,r3
  808498:	40bff804 	addi	r2,r8,-32
  80849c:	d9800517 	ldw	r6,20(sp)
  8084a0:	d9c00617 	ldw	r7,24(sp)
  8084a4:	10000816 	blt	r2,zero,8084c8 <__fixdfsi+0xbc>
  8084a8:	3888d83a 	srl	r4,r7,r2
  8084ac:	d8800317 	ldw	r2,12(sp)
  8084b0:	2007883a 	mov	r3,r4
  8084b4:	103fe226 	beq	r2,zero,808440 <__fixdfsi+0x34>
  8084b8:	0107c83a 	sub	r3,zero,r4
  8084bc:	003fe006 	br	808440 <__fixdfsi+0x34>
  8084c0:	00e00034 	movhi	r3,32768
  8084c4:	003fde06 	br	808440 <__fixdfsi+0x34>
  8084c8:	39c7883a 	add	r3,r7,r7
  8084cc:	008007c4 	movi	r2,31
  8084d0:	1205c83a 	sub	r2,r2,r8
  8084d4:	1886983a 	sll	r3,r3,r2
  8084d8:	3208d83a 	srl	r4,r6,r8
  8084dc:	1908b03a 	or	r4,r3,r4
  8084e0:	003ff206 	br	8084ac <__fixdfsi+0xa0>

008084e4 <__make_dp>:
  8084e4:	defff904 	addi	sp,sp,-28
  8084e8:	d8c00717 	ldw	r3,28(sp)
  8084ec:	d9000015 	stw	r4,0(sp)
  8084f0:	d809883a 	mov	r4,sp
  8084f4:	dfc00515 	stw	ra,20(sp)
  8084f8:	d9c00615 	stw	r7,24(sp)
  8084fc:	d9400115 	stw	r5,4(sp)
  808500:	d9800215 	stw	r6,8(sp)
  808504:	d8c00415 	stw	r3,16(sp)
  808508:	d9c00315 	stw	r7,12(sp)
  80850c:	08089a80 	call	8089a8 <__pack_d>
  808510:	dfc00517 	ldw	ra,20(sp)
  808514:	dec00704 	addi	sp,sp,28
  808518:	f800283a 	ret

0080851c <udivmodsi4>:
  80851c:	29001b2e 	bgeu	r5,r4,80858c <udivmodsi4+0x70>
  808520:	28001a16 	blt	r5,zero,80858c <udivmodsi4+0x70>
  808524:	00800044 	movi	r2,1
  808528:	0007883a 	mov	r3,zero
  80852c:	01c007c4 	movi	r7,31
  808530:	00000306 	br	808540 <udivmodsi4+0x24>
  808534:	19c01326 	beq	r3,r7,808584 <udivmodsi4+0x68>
  808538:	18c00044 	addi	r3,r3,1
  80853c:	28000416 	blt	r5,zero,808550 <udivmodsi4+0x34>
  808540:	294b883a 	add	r5,r5,r5
  808544:	1085883a 	add	r2,r2,r2
  808548:	293ffa36 	bltu	r5,r4,808534 <udivmodsi4+0x18>
  80854c:	10000d26 	beq	r2,zero,808584 <udivmodsi4+0x68>
  808550:	0007883a 	mov	r3,zero
  808554:	21400236 	bltu	r4,r5,808560 <udivmodsi4+0x44>
  808558:	2149c83a 	sub	r4,r4,r5
  80855c:	1886b03a 	or	r3,r3,r2
  808560:	1004d07a 	srli	r2,r2,1
  808564:	280ad07a 	srli	r5,r5,1
  808568:	103ffa1e 	bne	r2,zero,808554 <udivmodsi4+0x38>
  80856c:	30000226 	beq	r6,zero,808578 <udivmodsi4+0x5c>
  808570:	2005883a 	mov	r2,r4
  808574:	f800283a 	ret
  808578:	1809883a 	mov	r4,r3
  80857c:	2005883a 	mov	r2,r4
  808580:	f800283a 	ret
  808584:	0007883a 	mov	r3,zero
  808588:	003ff806 	br	80856c <udivmodsi4+0x50>
  80858c:	00800044 	movi	r2,1
  808590:	0007883a 	mov	r3,zero
  808594:	003fef06 	br	808554 <udivmodsi4+0x38>

00808598 <__divsi3>:
  808598:	defffe04 	addi	sp,sp,-8
  80859c:	dc000015 	stw	r16,0(sp)
  8085a0:	dfc00115 	stw	ra,4(sp)
  8085a4:	0021883a 	mov	r16,zero
  8085a8:	20000c16 	blt	r4,zero,8085dc <__divsi3+0x44>
  8085ac:	000d883a 	mov	r6,zero
  8085b0:	28000e16 	blt	r5,zero,8085ec <__divsi3+0x54>
  8085b4:	080851c0 	call	80851c <udivmodsi4>
  8085b8:	1007883a 	mov	r3,r2
  8085bc:	8005003a 	cmpeq	r2,r16,zero
  8085c0:	1000011e 	bne	r2,zero,8085c8 <__divsi3+0x30>
  8085c4:	00c7c83a 	sub	r3,zero,r3
  8085c8:	1805883a 	mov	r2,r3
  8085cc:	dfc00117 	ldw	ra,4(sp)
  8085d0:	dc000017 	ldw	r16,0(sp)
  8085d4:	dec00204 	addi	sp,sp,8
  8085d8:	f800283a 	ret
  8085dc:	0109c83a 	sub	r4,zero,r4
  8085e0:	04000044 	movi	r16,1
  8085e4:	000d883a 	mov	r6,zero
  8085e8:	283ff20e 	bge	r5,zero,8085b4 <__divsi3+0x1c>
  8085ec:	014bc83a 	sub	r5,zero,r5
  8085f0:	8021003a 	cmpeq	r16,r16,zero
  8085f4:	003fef06 	br	8085b4 <__divsi3+0x1c>

008085f8 <__modsi3>:
  8085f8:	deffff04 	addi	sp,sp,-4
  8085fc:	dfc00015 	stw	ra,0(sp)
  808600:	01800044 	movi	r6,1
  808604:	2807883a 	mov	r3,r5
  808608:	20000416 	blt	r4,zero,80861c <__modsi3+0x24>
  80860c:	28000c16 	blt	r5,zero,808640 <__modsi3+0x48>
  808610:	dfc00017 	ldw	ra,0(sp)
  808614:	dec00104 	addi	sp,sp,4
  808618:	080851c1 	jmpi	80851c <udivmodsi4>
  80861c:	0109c83a 	sub	r4,zero,r4
  808620:	28000b16 	blt	r5,zero,808650 <__modsi3+0x58>
  808624:	180b883a 	mov	r5,r3
  808628:	01800044 	movi	r6,1
  80862c:	080851c0 	call	80851c <udivmodsi4>
  808630:	0085c83a 	sub	r2,zero,r2
  808634:	dfc00017 	ldw	ra,0(sp)
  808638:	dec00104 	addi	sp,sp,4
  80863c:	f800283a 	ret
  808640:	014bc83a 	sub	r5,zero,r5
  808644:	dfc00017 	ldw	ra,0(sp)
  808648:	dec00104 	addi	sp,sp,4
  80864c:	080851c1 	jmpi	80851c <udivmodsi4>
  808650:	0147c83a 	sub	r3,zero,r5
  808654:	003ff306 	br	808624 <__modsi3+0x2c>

00808658 <__udivsi3>:
  808658:	000d883a 	mov	r6,zero
  80865c:	080851c1 	jmpi	80851c <udivmodsi4>

00808660 <__umodsi3>:
  808660:	01800044 	movi	r6,1
  808664:	080851c1 	jmpi	80851c <udivmodsi4>

00808668 <__muldi3>:
  808668:	2011883a 	mov	r8,r4
  80866c:	427fffcc 	andi	r9,r8,65535
  808670:	4018d43a 	srli	r12,r8,16
  808674:	32bfffcc 	andi	r10,r6,65535
  808678:	3016d43a 	srli	r11,r6,16
  80867c:	4a85383a 	mul	r2,r9,r10
  808680:	6295383a 	mul	r10,r12,r10
  808684:	4ad3383a 	mul	r9,r9,r11
  808688:	113fffcc 	andi	r4,r2,65535
  80868c:	1004d43a 	srli	r2,r2,16
  808690:	4a93883a 	add	r9,r9,r10
  808694:	3807883a 	mov	r3,r7
  808698:	1245883a 	add	r2,r2,r9
  80869c:	280f883a 	mov	r7,r5
  8086a0:	180b883a 	mov	r5,r3
  8086a4:	1006943a 	slli	r3,r2,16
  8086a8:	defffd04 	addi	sp,sp,-12
  8086ac:	dc800215 	stw	r18,8(sp)
  8086b0:	1907883a 	add	r3,r3,r4
  8086b4:	dc400115 	stw	r17,4(sp)
  8086b8:	dc000015 	stw	r16,0(sp)
  8086bc:	4165383a 	mul	r18,r8,r5
  8086c0:	31e3383a 	mul	r17,r6,r7
  8086c4:	1012d43a 	srli	r9,r2,16
  8086c8:	62d9383a 	mul	r12,r12,r11
  8086cc:	181f883a 	mov	r15,r3
  8086d0:	1280022e 	bgeu	r2,r10,8086dc <__muldi3+0x74>
  8086d4:	00800074 	movhi	r2,1
  8086d8:	6099883a 	add	r12,r12,r2
  8086dc:	624d883a 	add	r6,r12,r9
  8086e0:	9187883a 	add	r3,r18,r6
  8086e4:	88c7883a 	add	r3,r17,r3
  8086e8:	7805883a 	mov	r2,r15
  8086ec:	dc800217 	ldw	r18,8(sp)
  8086f0:	dc400117 	ldw	r17,4(sp)
  8086f4:	dc000017 	ldw	r16,0(sp)
  8086f8:	dec00304 	addi	sp,sp,12
  8086fc:	f800283a 	ret

00808700 <__clzsi2>:
  808700:	00bfffd4 	movui	r2,65535
  808704:	11000e36 	bltu	r2,r4,808740 <__clzsi2+0x40>
  808708:	00803fc4 	movi	r2,255
  80870c:	01400204 	movi	r5,8
  808710:	0007883a 	mov	r3,zero
  808714:	11001036 	bltu	r2,r4,808758 <__clzsi2+0x58>
  808718:	000b883a 	mov	r5,zero
  80871c:	20c6d83a 	srl	r3,r4,r3
  808720:	008020b4 	movhi	r2,130
  808724:	10afea04 	addi	r2,r2,-16472
  808728:	1887883a 	add	r3,r3,r2
  80872c:	18800003 	ldbu	r2,0(r3)
  808730:	00c00804 	movi	r3,32
  808734:	2885883a 	add	r2,r5,r2
  808738:	1885c83a 	sub	r2,r3,r2
  80873c:	f800283a 	ret
  808740:	01400404 	movi	r5,16
  808744:	00804034 	movhi	r2,256
  808748:	10bfffc4 	addi	r2,r2,-1
  80874c:	2807883a 	mov	r3,r5
  808750:	113ff22e 	bgeu	r2,r4,80871c <__clzsi2+0x1c>
  808754:	01400604 	movi	r5,24
  808758:	2807883a 	mov	r3,r5
  80875c:	20c6d83a 	srl	r3,r4,r3
  808760:	008020b4 	movhi	r2,130
  808764:	10afea04 	addi	r2,r2,-16472
  808768:	1887883a 	add	r3,r3,r2
  80876c:	18800003 	ldbu	r2,0(r3)
  808770:	00c00804 	movi	r3,32
  808774:	2885883a 	add	r2,r5,r2
  808778:	1885c83a 	sub	r2,r3,r2
  80877c:	f800283a 	ret

00808780 <__pack_f>:
  808780:	20c00017 	ldw	r3,0(r4)
  808784:	01c00044 	movi	r7,1
  808788:	21800317 	ldw	r6,12(r4)
  80878c:	21400117 	ldw	r5,4(r4)
  808790:	38c02d2e 	bgeu	r7,r3,808848 <__pack_f+0xc8>
  808794:	00800104 	movi	r2,4
  808798:	18802826 	beq	r3,r2,80883c <__pack_f+0xbc>
  80879c:	00800084 	movi	r2,2
  8087a0:	18800126 	beq	r3,r2,8087a8 <__pack_f+0x28>
  8087a4:	3000101e 	bne	r6,zero,8087e8 <__pack_f+0x68>
  8087a8:	000d883a 	mov	r6,zero
  8087ac:	0007883a 	mov	r3,zero
  8087b0:	19003fcc 	andi	r4,r3,255
  8087b4:	200895fa 	slli	r4,r4,23
  8087b8:	00c02034 	movhi	r3,128
  8087bc:	18ffffc4 	addi	r3,r3,-1
  8087c0:	30c6703a 	and	r3,r6,r3
  8087c4:	10a0002c 	andhi	r2,r2,32768
  8087c8:	10c4b03a 	or	r2,r2,r3
  8087cc:	280a97fa 	slli	r5,r5,31
  8087d0:	1104b03a 	or	r2,r2,r4
  8087d4:	00e00034 	movhi	r3,32768
  8087d8:	18ffffc4 	addi	r3,r3,-1
  8087dc:	10c4703a 	and	r2,r2,r3
  8087e0:	1144b03a 	or	r2,r2,r5
  8087e4:	f800283a 	ret
  8087e8:	21000217 	ldw	r4,8(r4)
  8087ec:	00bfe084 	movi	r2,-126
  8087f0:	20801b16 	blt	r4,r2,808860 <__pack_f+0xe0>
  8087f4:	00801fc4 	movi	r2,127
  8087f8:	11001016 	blt	r2,r4,80883c <__pack_f+0xbc>
  8087fc:	308e703a 	and	r7,r6,r2
  808800:	2087883a 	add	r3,r4,r2
  808804:	00801004 	movi	r2,64
  808808:	38800526 	beq	r7,r2,808820 <__pack_f+0xa0>
  80880c:	31800fc4 	addi	r6,r6,63
  808810:	30000716 	blt	r6,zero,808830 <__pack_f+0xb0>
  808814:	300490ba 	slli	r2,r6,2
  808818:	100cd27a 	srli	r6,r2,9
  80881c:	003fe406 	br	8087b0 <__pack_f+0x30>
  808820:	3080200c 	andi	r2,r6,128
  808824:	103ffa26 	beq	r2,zero,808810 <__pack_f+0x90>
  808828:	31cd883a 	add	r6,r6,r7
  80882c:	003ff806 	br	808810 <__pack_f+0x90>
  808830:	300cd07a 	srli	r6,r6,1
  808834:	18c00044 	addi	r3,r3,1
  808838:	003ff606 	br	808814 <__pack_f+0x94>
  80883c:	000d883a 	mov	r6,zero
  808840:	00ffffc4 	movi	r3,-1
  808844:	003fda06 	br	8087b0 <__pack_f+0x30>
  808848:	31800434 	orhi	r6,r6,16
  80884c:	00802034 	movhi	r2,128
  808850:	10bfffc4 	addi	r2,r2,-1
  808854:	308c703a 	and	r6,r6,r2
  808858:	00ffffc4 	movi	r3,-1
  80885c:	003fd406 	br	8087b0 <__pack_f+0x30>
  808860:	1109c83a 	sub	r4,r2,r4
  808864:	00800644 	movi	r2,25
  808868:	11001216 	blt	r2,r4,8088b4 <__pack_f+0x134>
  80886c:	3904983a 	sll	r2,r7,r4
  808870:	3106d83a 	srl	r3,r6,r4
  808874:	10bfffc4 	addi	r2,r2,-1
  808878:	3084703a 	and	r2,r6,r2
  80887c:	1004c03a 	cmpne	r2,r2,zero
  808880:	1886b03a 	or	r3,r3,r2
  808884:	19001fcc 	andi	r4,r3,127
  808888:	00801004 	movi	r2,64
  80888c:	20800c26 	beq	r4,r2,8088c0 <__pack_f+0x140>
  808890:	18c00fc4 	addi	r3,r3,63
  808894:	00900034 	movhi	r2,16384
  808898:	10bfffc4 	addi	r2,r2,-1
  80889c:	180cd1fa 	srli	r6,r3,7
  8088a0:	10c7803a 	cmpltu	r3,r2,r3
  8088a4:	00802034 	movhi	r2,128
  8088a8:	10bfffc4 	addi	r2,r2,-1
  8088ac:	308c703a 	and	r6,r6,r2
  8088b0:	003fbf06 	br	8087b0 <__pack_f+0x30>
  8088b4:	0007883a 	mov	r3,zero
  8088b8:	000d883a 	mov	r6,zero
  8088bc:	003ff906 	br	8088a4 <__pack_f+0x124>
  8088c0:	1880200c 	andi	r2,r3,128
  8088c4:	10000126 	beq	r2,zero,8088cc <__pack_f+0x14c>
  8088c8:	1907883a 	add	r3,r3,r4
  8088cc:	180cd1fa 	srli	r6,r3,7
  8088d0:	00900034 	movhi	r2,16384
  8088d4:	10bfffc4 	addi	r2,r2,-1
  8088d8:	10c7803a 	cmpltu	r3,r2,r3
  8088dc:	003ff106 	br	8088a4 <__pack_f+0x124>

008088e0 <__unpack_f>:
  8088e0:	21800017 	ldw	r6,0(r4)
  8088e4:	00c02034 	movhi	r3,128
  8088e8:	18ffffc4 	addi	r3,r3,-1
  8088ec:	3004d5fa 	srli	r2,r6,23
  8088f0:	3008d7fa 	srli	r4,r6,31
  8088f4:	30ce703a 	and	r7,r6,r3
  8088f8:	10c03fcc 	andi	r3,r2,255
  8088fc:	29000115 	stw	r4,4(r5)
  808900:	1800131e 	bne	r3,zero,808950 <__unpack_f+0x70>
  808904:	38000f26 	beq	r7,zero,808944 <__unpack_f+0x64>
  808908:	380691fa 	slli	r3,r7,7
  80890c:	01bfe084 	movi	r6,-126
  808910:	008000c4 	movi	r2,3
  808914:	01100034 	movhi	r4,16384
  808918:	213fffc4 	addi	r4,r4,-1
  80891c:	28800015 	stw	r2,0(r5)
  808920:	29800215 	stw	r6,8(r5)
  808924:	20c00536 	bltu	r4,r3,80893c <__unpack_f+0x5c>
  808928:	3005883a 	mov	r2,r6
  80892c:	18c7883a 	add	r3,r3,r3
  808930:	10bfffc4 	addi	r2,r2,-1
  808934:	20fffd2e 	bgeu	r4,r3,80892c <__unpack_f+0x4c>
  808938:	28800215 	stw	r2,8(r5)
  80893c:	28c00315 	stw	r3,12(r5)
  808940:	f800283a 	ret
  808944:	00800084 	movi	r2,2
  808948:	28800015 	stw	r2,0(r5)
  80894c:	f800283a 	ret
  808950:	00803fc4 	movi	r2,255
  808954:	18800826 	beq	r3,r2,808978 <__unpack_f+0x98>
  808958:	380491fa 	slli	r2,r7,7
  80895c:	18ffe044 	addi	r3,r3,-127
  808960:	28c00215 	stw	r3,8(r5)
  808964:	10900034 	orhi	r2,r2,16384
  808968:	28800315 	stw	r2,12(r5)
  80896c:	008000c4 	movi	r2,3
  808970:	28800015 	stw	r2,0(r5)
  808974:	f800283a 	ret
  808978:	3800031e 	bne	r7,zero,808988 <__unpack_f+0xa8>
  80897c:	00800104 	movi	r2,4
  808980:	28800015 	stw	r2,0(r5)
  808984:	f800283a 	ret
  808988:	3080042c 	andhi	r2,r6,16
  80898c:	10000426 	beq	r2,zero,8089a0 <__unpack_f+0xc0>
  808990:	00800044 	movi	r2,1
  808994:	28800015 	stw	r2,0(r5)
  808998:	29c00315 	stw	r7,12(r5)
  80899c:	f800283a 	ret
  8089a0:	28000015 	stw	zero,0(r5)
  8089a4:	003ffc06 	br	808998 <__unpack_f+0xb8>

008089a8 <__pack_d>:
  8089a8:	20c00017 	ldw	r3,0(r4)
  8089ac:	defffd04 	addi	sp,sp,-12
  8089b0:	dc000015 	stw	r16,0(sp)
  8089b4:	dc800215 	stw	r18,8(sp)
  8089b8:	dc400115 	stw	r17,4(sp)
  8089bc:	00800044 	movi	r2,1
  8089c0:	22000317 	ldw	r8,12(r4)
  8089c4:	001f883a 	mov	r15,zero
  8089c8:	22400417 	ldw	r9,16(r4)
  8089cc:	24000117 	ldw	r16,4(r4)
  8089d0:	10c0552e 	bgeu	r2,r3,808b28 <__pack_d+0x180>
  8089d4:	00800104 	movi	r2,4
  8089d8:	18804f26 	beq	r3,r2,808b18 <__pack_d+0x170>
  8089dc:	00800084 	movi	r2,2
  8089e0:	18800226 	beq	r3,r2,8089ec <__pack_d+0x44>
  8089e4:	4244b03a 	or	r2,r8,r9
  8089e8:	10001a1e 	bne	r2,zero,808a54 <__pack_d+0xac>
  8089ec:	000d883a 	mov	r6,zero
  8089f0:	000f883a 	mov	r7,zero
  8089f4:	0011883a 	mov	r8,zero
  8089f8:	00800434 	movhi	r2,16
  8089fc:	10bfffc4 	addi	r2,r2,-1
  808a00:	301d883a 	mov	r14,r6
  808a04:	3884703a 	and	r2,r7,r2
  808a08:	400a953a 	slli	r5,r8,20
  808a0c:	79bffc2c 	andhi	r6,r15,65520
  808a10:	308cb03a 	or	r6,r6,r2
  808a14:	00e00434 	movhi	r3,32784
  808a18:	18ffffc4 	addi	r3,r3,-1
  808a1c:	800497fa 	slli	r2,r16,31
  808a20:	30c6703a 	and	r3,r6,r3
  808a24:	1946b03a 	or	r3,r3,r5
  808a28:	01600034 	movhi	r5,32768
  808a2c:	297fffc4 	addi	r5,r5,-1
  808a30:	194a703a 	and	r5,r3,r5
  808a34:	288ab03a 	or	r5,r5,r2
  808a38:	2807883a 	mov	r3,r5
  808a3c:	7005883a 	mov	r2,r14
  808a40:	dc800217 	ldw	r18,8(sp)
  808a44:	dc400117 	ldw	r17,4(sp)
  808a48:	dc000017 	ldw	r16,0(sp)
  808a4c:	dec00304 	addi	sp,sp,12
  808a50:	f800283a 	ret
  808a54:	21000217 	ldw	r4,8(r4)
  808a58:	00bf0084 	movi	r2,-1022
  808a5c:	20803f16 	blt	r4,r2,808b5c <__pack_d+0x1b4>
  808a60:	0080ffc4 	movi	r2,1023
  808a64:	11002c16 	blt	r2,r4,808b18 <__pack_d+0x170>
  808a68:	00803fc4 	movi	r2,255
  808a6c:	408c703a 	and	r6,r8,r2
  808a70:	00802004 	movi	r2,128
  808a74:	0007883a 	mov	r3,zero
  808a78:	000f883a 	mov	r7,zero
  808a7c:	2280ffc4 	addi	r10,r4,1023
  808a80:	30801e26 	beq	r6,r2,808afc <__pack_d+0x154>
  808a84:	00801fc4 	movi	r2,127
  808a88:	4089883a 	add	r4,r8,r2
  808a8c:	220d803a 	cmpltu	r6,r4,r8
  808a90:	324d883a 	add	r6,r6,r9
  808a94:	2011883a 	mov	r8,r4
  808a98:	3013883a 	mov	r9,r6
  808a9c:	00880034 	movhi	r2,8192
  808aa0:	10bfffc4 	addi	r2,r2,-1
  808aa4:	12400d36 	bltu	r2,r9,808adc <__pack_d+0x134>
  808aa8:	4804963a 	slli	r2,r9,24
  808aac:	400cd23a 	srli	r6,r8,8
  808ab0:	480ed23a 	srli	r7,r9,8
  808ab4:	013fffc4 	movi	r4,-1
  808ab8:	118cb03a 	or	r6,r2,r6
  808abc:	01400434 	movhi	r5,16
  808ac0:	297fffc4 	addi	r5,r5,-1
  808ac4:	3104703a 	and	r2,r6,r4
  808ac8:	3946703a 	and	r3,r7,r5
  808acc:	5201ffcc 	andi	r8,r10,2047
  808ad0:	100d883a 	mov	r6,r2
  808ad4:	180f883a 	mov	r7,r3
  808ad8:	003fc706 	br	8089f8 <__pack_d+0x50>
  808adc:	480897fa 	slli	r4,r9,31
  808ae0:	4004d07a 	srli	r2,r8,1
  808ae4:	4806d07a 	srli	r3,r9,1
  808ae8:	52800044 	addi	r10,r10,1
  808aec:	2084b03a 	or	r2,r4,r2
  808af0:	1011883a 	mov	r8,r2
  808af4:	1813883a 	mov	r9,r3
  808af8:	003feb06 	br	808aa8 <__pack_d+0x100>
  808afc:	383fe11e 	bne	r7,zero,808a84 <__pack_d+0xdc>
  808b00:	01004004 	movi	r4,256
  808b04:	4104703a 	and	r2,r8,r4
  808b08:	10c4b03a 	or	r2,r2,r3
  808b0c:	103fe326 	beq	r2,zero,808a9c <__pack_d+0xf4>
  808b10:	3005883a 	mov	r2,r6
  808b14:	003fdc06 	br	808a88 <__pack_d+0xe0>
  808b18:	000d883a 	mov	r6,zero
  808b1c:	000f883a 	mov	r7,zero
  808b20:	0201ffc4 	movi	r8,2047
  808b24:	003fb406 	br	8089f8 <__pack_d+0x50>
  808b28:	0005883a 	mov	r2,zero
  808b2c:	00c00234 	movhi	r3,8
  808b30:	408cb03a 	or	r6,r8,r2
  808b34:	48ceb03a 	or	r7,r9,r3
  808b38:	013fffc4 	movi	r4,-1
  808b3c:	01400434 	movhi	r5,16
  808b40:	297fffc4 	addi	r5,r5,-1
  808b44:	3104703a 	and	r2,r6,r4
  808b48:	3946703a 	and	r3,r7,r5
  808b4c:	100d883a 	mov	r6,r2
  808b50:	180f883a 	mov	r7,r3
  808b54:	0201ffc4 	movi	r8,2047
  808b58:	003fa706 	br	8089f8 <__pack_d+0x50>
  808b5c:	1109c83a 	sub	r4,r2,r4
  808b60:	00800e04 	movi	r2,56
  808b64:	11004316 	blt	r2,r4,808c74 <__pack_d+0x2cc>
  808b68:	21fff804 	addi	r7,r4,-32
  808b6c:	38004516 	blt	r7,zero,808c84 <__pack_d+0x2dc>
  808b70:	49d8d83a 	srl	r12,r9,r7
  808b74:	001b883a 	mov	r13,zero
  808b78:	0023883a 	mov	r17,zero
  808b7c:	01400044 	movi	r5,1
  808b80:	0025883a 	mov	r18,zero
  808b84:	38004716 	blt	r7,zero,808ca4 <__pack_d+0x2fc>
  808b88:	29d6983a 	sll	r11,r5,r7
  808b8c:	0015883a 	mov	r10,zero
  808b90:	00bfffc4 	movi	r2,-1
  808b94:	5089883a 	add	r4,r10,r2
  808b98:	588b883a 	add	r5,r11,r2
  808b9c:	228d803a 	cmpltu	r6,r4,r10
  808ba0:	314b883a 	add	r5,r6,r5
  808ba4:	4104703a 	and	r2,r8,r4
  808ba8:	4946703a 	and	r3,r9,r5
  808bac:	10c4b03a 	or	r2,r2,r3
  808bb0:	10000226 	beq	r2,zero,808bbc <__pack_d+0x214>
  808bb4:	04400044 	movi	r17,1
  808bb8:	0025883a 	mov	r18,zero
  808bbc:	00803fc4 	movi	r2,255
  808bc0:	644eb03a 	or	r7,r12,r17
  808bc4:	3892703a 	and	r9,r7,r2
  808bc8:	00802004 	movi	r2,128
  808bcc:	6c90b03a 	or	r8,r13,r18
  808bd0:	0015883a 	mov	r10,zero
  808bd4:	48801626 	beq	r9,r2,808c30 <__pack_d+0x288>
  808bd8:	01001fc4 	movi	r4,127
  808bdc:	3905883a 	add	r2,r7,r4
  808be0:	11cd803a 	cmpltu	r6,r2,r7
  808be4:	320d883a 	add	r6,r6,r8
  808be8:	100f883a 	mov	r7,r2
  808bec:	00840034 	movhi	r2,4096
  808bf0:	10bfffc4 	addi	r2,r2,-1
  808bf4:	3011883a 	mov	r8,r6
  808bf8:	0007883a 	mov	r3,zero
  808bfc:	11801b36 	bltu	r2,r6,808c6c <__pack_d+0x2c4>
  808c00:	4004963a 	slli	r2,r8,24
  808c04:	3808d23a 	srli	r4,r7,8
  808c08:	400ad23a 	srli	r5,r8,8
  808c0c:	1813883a 	mov	r9,r3
  808c10:	1108b03a 	or	r4,r2,r4
  808c14:	00bfffc4 	movi	r2,-1
  808c18:	00c00434 	movhi	r3,16
  808c1c:	18ffffc4 	addi	r3,r3,-1
  808c20:	208c703a 	and	r6,r4,r2
  808c24:	28ce703a 	and	r7,r5,r3
  808c28:	4a01ffcc 	andi	r8,r9,2047
  808c2c:	003f7206 	br	8089f8 <__pack_d+0x50>
  808c30:	503fe91e 	bne	r10,zero,808bd8 <__pack_d+0x230>
  808c34:	01004004 	movi	r4,256
  808c38:	3904703a 	and	r2,r7,r4
  808c3c:	0007883a 	mov	r3,zero
  808c40:	10c4b03a 	or	r2,r2,r3
  808c44:	10000626 	beq	r2,zero,808c60 <__pack_d+0x2b8>
  808c48:	3a45883a 	add	r2,r7,r9
  808c4c:	11cd803a 	cmpltu	r6,r2,r7
  808c50:	320d883a 	add	r6,r6,r8
  808c54:	100f883a 	mov	r7,r2
  808c58:	3011883a 	mov	r8,r6
  808c5c:	0007883a 	mov	r3,zero
  808c60:	00840034 	movhi	r2,4096
  808c64:	10bfffc4 	addi	r2,r2,-1
  808c68:	123fe52e 	bgeu	r2,r8,808c00 <__pack_d+0x258>
  808c6c:	00c00044 	movi	r3,1
  808c70:	003fe306 	br	808c00 <__pack_d+0x258>
  808c74:	0009883a 	mov	r4,zero
  808c78:	0013883a 	mov	r9,zero
  808c7c:	000b883a 	mov	r5,zero
  808c80:	003fe406 	br	808c14 <__pack_d+0x26c>
  808c84:	4a47883a 	add	r3,r9,r9
  808c88:	008007c4 	movi	r2,31
  808c8c:	1105c83a 	sub	r2,r2,r4
  808c90:	1886983a 	sll	r3,r3,r2
  808c94:	4118d83a 	srl	r12,r8,r4
  808c98:	491ad83a 	srl	r13,r9,r4
  808c9c:	1b18b03a 	or	r12,r3,r12
  808ca0:	003fb506 	br	808b78 <__pack_d+0x1d0>
  808ca4:	2806d07a 	srli	r3,r5,1
  808ca8:	008007c4 	movi	r2,31
  808cac:	1105c83a 	sub	r2,r2,r4
  808cb0:	1896d83a 	srl	r11,r3,r2
  808cb4:	2914983a 	sll	r10,r5,r4
  808cb8:	003fb506 	br	808b90 <__pack_d+0x1e8>

00808cbc <__unpack_d>:
  808cbc:	20c00117 	ldw	r3,4(r4)
  808cc0:	22400017 	ldw	r9,0(r4)
  808cc4:	00800434 	movhi	r2,16
  808cc8:	10bfffc4 	addi	r2,r2,-1
  808ccc:	1808d53a 	srli	r4,r3,20
  808cd0:	180cd7fa 	srli	r6,r3,31
  808cd4:	1894703a 	and	r10,r3,r2
  808cd8:	2201ffcc 	andi	r8,r4,2047
  808cdc:	281b883a 	mov	r13,r5
  808ce0:	4817883a 	mov	r11,r9
  808ce4:	29800115 	stw	r6,4(r5)
  808ce8:	5019883a 	mov	r12,r10
  808cec:	40001e1e 	bne	r8,zero,808d68 <__unpack_d+0xac>
  808cf0:	4a84b03a 	or	r2,r9,r10
  808cf4:	10001926 	beq	r2,zero,808d5c <__unpack_d+0xa0>
  808cf8:	4804d63a 	srli	r2,r9,24
  808cfc:	500c923a 	slli	r6,r10,8
  808d00:	013f0084 	movi	r4,-1022
  808d04:	00c40034 	movhi	r3,4096
  808d08:	18ffffc4 	addi	r3,r3,-1
  808d0c:	118cb03a 	or	r6,r2,r6
  808d10:	008000c4 	movi	r2,3
  808d14:	480a923a 	slli	r5,r9,8
  808d18:	68800015 	stw	r2,0(r13)
  808d1c:	69000215 	stw	r4,8(r13)
  808d20:	19800b36 	bltu	r3,r6,808d50 <__unpack_d+0x94>
  808d24:	200f883a 	mov	r7,r4
  808d28:	1811883a 	mov	r8,r3
  808d2c:	2945883a 	add	r2,r5,r5
  808d30:	1149803a 	cmpltu	r4,r2,r5
  808d34:	3187883a 	add	r3,r6,r6
  808d38:	20c9883a 	add	r4,r4,r3
  808d3c:	100b883a 	mov	r5,r2
  808d40:	200d883a 	mov	r6,r4
  808d44:	39ffffc4 	addi	r7,r7,-1
  808d48:	413ff82e 	bgeu	r8,r4,808d2c <__unpack_d+0x70>
  808d4c:	69c00215 	stw	r7,8(r13)
  808d50:	69800415 	stw	r6,16(r13)
  808d54:	69400315 	stw	r5,12(r13)
  808d58:	f800283a 	ret
  808d5c:	00800084 	movi	r2,2
  808d60:	28800015 	stw	r2,0(r5)
  808d64:	f800283a 	ret
  808d68:	0081ffc4 	movi	r2,2047
  808d6c:	40800f26 	beq	r8,r2,808dac <__unpack_d+0xf0>
  808d70:	480cd63a 	srli	r6,r9,24
  808d74:	5006923a 	slli	r3,r10,8
  808d78:	4804923a 	slli	r2,r9,8
  808d7c:	0009883a 	mov	r4,zero
  808d80:	30c6b03a 	or	r3,r6,r3
  808d84:	01440034 	movhi	r5,4096
  808d88:	110cb03a 	or	r6,r2,r4
  808d8c:	423f0044 	addi	r8,r8,-1023
  808d90:	194eb03a 	or	r7,r3,r5
  808d94:	008000c4 	movi	r2,3
  808d98:	69c00415 	stw	r7,16(r13)
  808d9c:	6a000215 	stw	r8,8(r13)
  808da0:	68800015 	stw	r2,0(r13)
  808da4:	69800315 	stw	r6,12(r13)
  808da8:	f800283a 	ret
  808dac:	4a84b03a 	or	r2,r9,r10
  808db0:	1000031e 	bne	r2,zero,808dc0 <__unpack_d+0x104>
  808db4:	00800104 	movi	r2,4
  808db8:	28800015 	stw	r2,0(r5)
  808dbc:	f800283a 	ret
  808dc0:	0009883a 	mov	r4,zero
  808dc4:	01400234 	movhi	r5,8
  808dc8:	4904703a 	and	r2,r9,r4
  808dcc:	5146703a 	and	r3,r10,r5
  808dd0:	10c4b03a 	or	r2,r2,r3
  808dd4:	10000526 	beq	r2,zero,808dec <__unpack_d+0x130>
  808dd8:	00800044 	movi	r2,1
  808ddc:	68800015 	stw	r2,0(r13)
  808de0:	6b000415 	stw	r12,16(r13)
  808de4:	6ac00315 	stw	r11,12(r13)
  808de8:	f800283a 	ret
  808dec:	68000015 	stw	zero,0(r13)
  808df0:	003ffb06 	br	808de0 <__unpack_d+0x124>

00808df4 <__fpcmp_parts_d>:
  808df4:	21800017 	ldw	r6,0(r4)
  808df8:	00c00044 	movi	r3,1
  808dfc:	19800a2e 	bgeu	r3,r6,808e28 <__fpcmp_parts_d+0x34>
  808e00:	28800017 	ldw	r2,0(r5)
  808e04:	1880082e 	bgeu	r3,r2,808e28 <__fpcmp_parts_d+0x34>
  808e08:	00c00104 	movi	r3,4
  808e0c:	30c02626 	beq	r6,r3,808ea8 <__fpcmp_parts_d+0xb4>
  808e10:	10c02226 	beq	r2,r3,808e9c <__fpcmp_parts_d+0xa8>
  808e14:	00c00084 	movi	r3,2
  808e18:	30c00526 	beq	r6,r3,808e30 <__fpcmp_parts_d+0x3c>
  808e1c:	10c0071e 	bne	r2,r3,808e3c <__fpcmp_parts_d+0x48>
  808e20:	20800117 	ldw	r2,4(r4)
  808e24:	1000091e 	bne	r2,zero,808e4c <__fpcmp_parts_d+0x58>
  808e28:	00800044 	movi	r2,1
  808e2c:	f800283a 	ret
  808e30:	10c01a1e 	bne	r2,r3,808e9c <__fpcmp_parts_d+0xa8>
  808e34:	0005883a 	mov	r2,zero
  808e38:	f800283a 	ret
  808e3c:	22000117 	ldw	r8,4(r4)
  808e40:	28800117 	ldw	r2,4(r5)
  808e44:	40800326 	beq	r8,r2,808e54 <__fpcmp_parts_d+0x60>
  808e48:	403ff726 	beq	r8,zero,808e28 <__fpcmp_parts_d+0x34>
  808e4c:	00bfffc4 	movi	r2,-1
  808e50:	f800283a 	ret
  808e54:	20c00217 	ldw	r3,8(r4)
  808e58:	28800217 	ldw	r2,8(r5)
  808e5c:	10fffa16 	blt	r2,r3,808e48 <__fpcmp_parts_d+0x54>
  808e60:	18800916 	blt	r3,r2,808e88 <__fpcmp_parts_d+0x94>
  808e64:	21c00417 	ldw	r7,16(r4)
  808e68:	28c00417 	ldw	r3,16(r5)
  808e6c:	21800317 	ldw	r6,12(r4)
  808e70:	28800317 	ldw	r2,12(r5)
  808e74:	19fff436 	bltu	r3,r7,808e48 <__fpcmp_parts_d+0x54>
  808e78:	38c00526 	beq	r7,r3,808e90 <__fpcmp_parts_d+0x9c>
  808e7c:	38c00236 	bltu	r7,r3,808e88 <__fpcmp_parts_d+0x94>
  808e80:	19ffec1e 	bne	r3,r7,808e34 <__fpcmp_parts_d+0x40>
  808e84:	30bfeb2e 	bgeu	r6,r2,808e34 <__fpcmp_parts_d+0x40>
  808e88:	403fe71e 	bne	r8,zero,808e28 <__fpcmp_parts_d+0x34>
  808e8c:	003fef06 	br	808e4c <__fpcmp_parts_d+0x58>
  808e90:	11bffa2e 	bgeu	r2,r6,808e7c <__fpcmp_parts_d+0x88>
  808e94:	403fe426 	beq	r8,zero,808e28 <__fpcmp_parts_d+0x34>
  808e98:	003fec06 	br	808e4c <__fpcmp_parts_d+0x58>
  808e9c:	28800117 	ldw	r2,4(r5)
  808ea0:	103fe11e 	bne	r2,zero,808e28 <__fpcmp_parts_d+0x34>
  808ea4:	003fe906 	br	808e4c <__fpcmp_parts_d+0x58>
  808ea8:	11bfdd1e 	bne	r2,r6,808e20 <__fpcmp_parts_d+0x2c>
  808eac:	28c00117 	ldw	r3,4(r5)
  808eb0:	20800117 	ldw	r2,4(r4)
  808eb4:	1885c83a 	sub	r2,r3,r2
  808eb8:	f800283a 	ret

00808ebc <__errno>:
  808ebc:	00c020b4 	movhi	r3,130
  808ec0:	18f7cd04 	addi	r3,r3,-8396
  808ec4:	18800017 	ldw	r2,0(r3)
  808ec8:	f800283a 	ret

00808ecc <free>:
  808ecc:	008020b4 	movhi	r2,130
  808ed0:	10b7cd04 	addi	r2,r2,-8396
  808ed4:	200b883a 	mov	r5,r4
  808ed8:	11000017 	ldw	r4,0(r2)
  808edc:	080d7801 	jmpi	80d780 <_free_r>

00808ee0 <malloc>:
  808ee0:	008020b4 	movhi	r2,130
  808ee4:	10b7cd04 	addi	r2,r2,-8396
  808ee8:	200b883a 	mov	r5,r4
  808eec:	11000017 	ldw	r4,0(r2)
  808ef0:	0808ef41 	jmpi	808ef4 <_malloc_r>

00808ef4 <_malloc_r>:
  808ef4:	defff604 	addi	sp,sp,-40
  808ef8:	28c002c4 	addi	r3,r5,11
  808efc:	00800584 	movi	r2,22
  808f00:	dc800215 	stw	r18,8(sp)
  808f04:	dfc00915 	stw	ra,36(sp)
  808f08:	df000815 	stw	fp,32(sp)
  808f0c:	ddc00715 	stw	r23,28(sp)
  808f10:	dd800615 	stw	r22,24(sp)
  808f14:	dd400515 	stw	r21,20(sp)
  808f18:	dd000415 	stw	r20,16(sp)
  808f1c:	dcc00315 	stw	r19,12(sp)
  808f20:	dc400115 	stw	r17,4(sp)
  808f24:	dc000015 	stw	r16,0(sp)
  808f28:	2025883a 	mov	r18,r4
  808f2c:	10c01236 	bltu	r2,r3,808f78 <_malloc_r+0x84>
  808f30:	04400404 	movi	r17,16
  808f34:	8940142e 	bgeu	r17,r5,808f88 <_malloc_r+0x94>
  808f38:	00800304 	movi	r2,12
  808f3c:	0007883a 	mov	r3,zero
  808f40:	90800015 	stw	r2,0(r18)
  808f44:	1805883a 	mov	r2,r3
  808f48:	dfc00917 	ldw	ra,36(sp)
  808f4c:	df000817 	ldw	fp,32(sp)
  808f50:	ddc00717 	ldw	r23,28(sp)
  808f54:	dd800617 	ldw	r22,24(sp)
  808f58:	dd400517 	ldw	r21,20(sp)
  808f5c:	dd000417 	ldw	r20,16(sp)
  808f60:	dcc00317 	ldw	r19,12(sp)
  808f64:	dc800217 	ldw	r18,8(sp)
  808f68:	dc400117 	ldw	r17,4(sp)
  808f6c:	dc000017 	ldw	r16,0(sp)
  808f70:	dec00a04 	addi	sp,sp,40
  808f74:	f800283a 	ret
  808f78:	00bffe04 	movi	r2,-8
  808f7c:	18a2703a 	and	r17,r3,r2
  808f80:	883fed16 	blt	r17,zero,808f38 <_malloc_r+0x44>
  808f84:	897fec36 	bltu	r17,r5,808f38 <_malloc_r+0x44>
  808f88:	9009883a 	mov	r4,r18
  808f8c:	0811b440 	call	811b44 <__malloc_lock>
  808f90:	00807dc4 	movi	r2,503
  808f94:	14402b2e 	bgeu	r2,r17,809044 <_malloc_r+0x150>
  808f98:	8806d27a 	srli	r3,r17,9
  808f9c:	18003f1e 	bne	r3,zero,80909c <_malloc_r+0x1a8>
  808fa0:	880cd0fa 	srli	r6,r17,3
  808fa4:	300490fa 	slli	r2,r6,3
  808fa8:	02c020b4 	movhi	r11,130
  808fac:	5af1eb04 	addi	r11,r11,-14420
  808fb0:	12cb883a 	add	r5,r2,r11
  808fb4:	2c000317 	ldw	r16,12(r5)
  808fb8:	580f883a 	mov	r7,r11
  808fbc:	2c00041e 	bne	r5,r16,808fd0 <_malloc_r+0xdc>
  808fc0:	00000a06 	br	808fec <_malloc_r+0xf8>
  808fc4:	1800860e 	bge	r3,zero,8091e0 <_malloc_r+0x2ec>
  808fc8:	84000317 	ldw	r16,12(r16)
  808fcc:	2c000726 	beq	r5,r16,808fec <_malloc_r+0xf8>
  808fd0:	80800117 	ldw	r2,4(r16)
  808fd4:	00ffff04 	movi	r3,-4
  808fd8:	10c8703a 	and	r4,r2,r3
  808fdc:	2447c83a 	sub	r3,r4,r17
  808fe0:	008003c4 	movi	r2,15
  808fe4:	10fff70e 	bge	r2,r3,808fc4 <_malloc_r+0xd0>
  808fe8:	31bfffc4 	addi	r6,r6,-1
  808fec:	32400044 	addi	r9,r6,1
  808ff0:	028020b4 	movhi	r10,130
  808ff4:	52b1ed04 	addi	r10,r10,-14412
  808ff8:	54000217 	ldw	r16,8(r10)
  808ffc:	8280a026 	beq	r16,r10,809280 <_malloc_r+0x38c>
  809000:	80800117 	ldw	r2,4(r16)
  809004:	00ffff04 	movi	r3,-4
  809008:	10ca703a 	and	r5,r2,r3
  80900c:	2c4dc83a 	sub	r6,r5,r17
  809010:	008003c4 	movi	r2,15
  809014:	11808316 	blt	r2,r6,809224 <_malloc_r+0x330>
  809018:	52800315 	stw	r10,12(r10)
  80901c:	52800215 	stw	r10,8(r10)
  809020:	30002916 	blt	r6,zero,8090c8 <_malloc_r+0x1d4>
  809024:	8147883a 	add	r3,r16,r5
  809028:	18800117 	ldw	r2,4(r3)
  80902c:	9009883a 	mov	r4,r18
  809030:	10800054 	ori	r2,r2,1
  809034:	18800115 	stw	r2,4(r3)
  809038:	0811b640 	call	811b64 <__malloc_unlock>
  80903c:	80c00204 	addi	r3,r16,8
  809040:	003fc006 	br	808f44 <_malloc_r+0x50>
  809044:	02c020b4 	movhi	r11,130
  809048:	5af1eb04 	addi	r11,r11,-14420
  80904c:	8ac5883a 	add	r2,r17,r11
  809050:	14000317 	ldw	r16,12(r2)
  809054:	580f883a 	mov	r7,r11
  809058:	8806d0fa 	srli	r3,r17,3
  80905c:	14006c26 	beq	r2,r16,809210 <_malloc_r+0x31c>
  809060:	80c00117 	ldw	r3,4(r16)
  809064:	00bfff04 	movi	r2,-4
  809068:	81800317 	ldw	r6,12(r16)
  80906c:	1886703a 	and	r3,r3,r2
  809070:	80c7883a 	add	r3,r16,r3
  809074:	18800117 	ldw	r2,4(r3)
  809078:	81400217 	ldw	r5,8(r16)
  80907c:	9009883a 	mov	r4,r18
  809080:	10800054 	ori	r2,r2,1
  809084:	18800115 	stw	r2,4(r3)
  809088:	31400215 	stw	r5,8(r6)
  80908c:	29800315 	stw	r6,12(r5)
  809090:	0811b640 	call	811b64 <__malloc_unlock>
  809094:	80c00204 	addi	r3,r16,8
  809098:	003faa06 	br	808f44 <_malloc_r+0x50>
  80909c:	00800104 	movi	r2,4
  8090a0:	10c0052e 	bgeu	r2,r3,8090b8 <_malloc_r+0x1c4>
  8090a4:	00800504 	movi	r2,20
  8090a8:	10c07836 	bltu	r2,r3,80928c <_malloc_r+0x398>
  8090ac:	198016c4 	addi	r6,r3,91
  8090b0:	300490fa 	slli	r2,r6,3
  8090b4:	003fbc06 	br	808fa8 <_malloc_r+0xb4>
  8090b8:	8804d1ba 	srli	r2,r17,6
  8090bc:	11800e04 	addi	r6,r2,56
  8090c0:	300490fa 	slli	r2,r6,3
  8090c4:	003fb806 	br	808fa8 <_malloc_r+0xb4>
  8090c8:	00807fc4 	movi	r2,511
  8090cc:	1140bb36 	bltu	r2,r5,8093bc <_malloc_r+0x4c8>
  8090d0:	2806d0fa 	srli	r3,r5,3
  8090d4:	573ffe04 	addi	fp,r10,-8
  8090d8:	00800044 	movi	r2,1
  8090dc:	180890fa 	slli	r4,r3,3
  8090e0:	1807d0ba 	srai	r3,r3,2
  8090e4:	e1c00117 	ldw	r7,4(fp)
  8090e8:	5909883a 	add	r4,r11,r4
  8090ec:	21400217 	ldw	r5,8(r4)
  8090f0:	10c4983a 	sll	r2,r2,r3
  8090f4:	81000315 	stw	r4,12(r16)
  8090f8:	81400215 	stw	r5,8(r16)
  8090fc:	388eb03a 	or	r7,r7,r2
  809100:	2c000315 	stw	r16,12(r5)
  809104:	24000215 	stw	r16,8(r4)
  809108:	e1c00115 	stw	r7,4(fp)
  80910c:	4807883a 	mov	r3,r9
  809110:	4800cd16 	blt	r9,zero,809448 <_malloc_r+0x554>
  809114:	1807d0ba 	srai	r3,r3,2
  809118:	00800044 	movi	r2,1
  80911c:	10c8983a 	sll	r4,r2,r3
  809120:	39004436 	bltu	r7,r4,809234 <_malloc_r+0x340>
  809124:	21c4703a 	and	r2,r4,r7
  809128:	10000a1e 	bne	r2,zero,809154 <_malloc_r+0x260>
  80912c:	2109883a 	add	r4,r4,r4
  809130:	00bfff04 	movi	r2,-4
  809134:	4884703a 	and	r2,r9,r2
  809138:	3906703a 	and	r3,r7,r4
  80913c:	12400104 	addi	r9,r2,4
  809140:	1800041e 	bne	r3,zero,809154 <_malloc_r+0x260>
  809144:	2109883a 	add	r4,r4,r4
  809148:	3904703a 	and	r2,r7,r4
  80914c:	4a400104 	addi	r9,r9,4
  809150:	103ffc26 	beq	r2,zero,809144 <_malloc_r+0x250>
  809154:	480490fa 	slli	r2,r9,3
  809158:	4819883a 	mov	r12,r9
  80915c:	023fff04 	movi	r8,-4
  809160:	589b883a 	add	r13,r11,r2
  809164:	6807883a 	mov	r3,r13
  809168:	014003c4 	movi	r5,15
  80916c:	1c000317 	ldw	r16,12(r3)
  809170:	1c00041e 	bne	r3,r16,809184 <_malloc_r+0x290>
  809174:	0000a706 	br	809414 <_malloc_r+0x520>
  809178:	3000ab0e 	bge	r6,zero,809428 <_malloc_r+0x534>
  80917c:	84000317 	ldw	r16,12(r16)
  809180:	1c00a426 	beq	r3,r16,809414 <_malloc_r+0x520>
  809184:	80800117 	ldw	r2,4(r16)
  809188:	1204703a 	and	r2,r2,r8
  80918c:	144dc83a 	sub	r6,r2,r17
  809190:	29bff90e 	bge	r5,r6,809178 <_malloc_r+0x284>
  809194:	81000317 	ldw	r4,12(r16)
  809198:	80c00217 	ldw	r3,8(r16)
  80919c:	89400054 	ori	r5,r17,1
  8091a0:	8445883a 	add	r2,r16,r17
  8091a4:	20c00215 	stw	r3,8(r4)
  8091a8:	19000315 	stw	r4,12(r3)
  8091ac:	81400115 	stw	r5,4(r16)
  8091b0:	1187883a 	add	r3,r2,r6
  8091b4:	31000054 	ori	r4,r6,1
  8091b8:	50800315 	stw	r2,12(r10)
  8091bc:	50800215 	stw	r2,8(r10)
  8091c0:	19800015 	stw	r6,0(r3)
  8091c4:	11000115 	stw	r4,4(r2)
  8091c8:	12800215 	stw	r10,8(r2)
  8091cc:	12800315 	stw	r10,12(r2)
  8091d0:	9009883a 	mov	r4,r18
  8091d4:	0811b640 	call	811b64 <__malloc_unlock>
  8091d8:	80c00204 	addi	r3,r16,8
  8091dc:	003f5906 	br	808f44 <_malloc_r+0x50>
  8091e0:	8109883a 	add	r4,r16,r4
  8091e4:	20800117 	ldw	r2,4(r4)
  8091e8:	80c00217 	ldw	r3,8(r16)
  8091ec:	81400317 	ldw	r5,12(r16)
  8091f0:	10800054 	ori	r2,r2,1
  8091f4:	20800115 	stw	r2,4(r4)
  8091f8:	28c00215 	stw	r3,8(r5)
  8091fc:	19400315 	stw	r5,12(r3)
  809200:	9009883a 	mov	r4,r18
  809204:	0811b640 	call	811b64 <__malloc_unlock>
  809208:	80c00204 	addi	r3,r16,8
  80920c:	003f4d06 	br	808f44 <_malloc_r+0x50>
  809210:	80800204 	addi	r2,r16,8
  809214:	14000317 	ldw	r16,12(r2)
  809218:	143f911e 	bne	r2,r16,809060 <_malloc_r+0x16c>
  80921c:	1a400084 	addi	r9,r3,2
  809220:	003f7306 	br	808ff0 <_malloc_r+0xfc>
  809224:	88c00054 	ori	r3,r17,1
  809228:	8445883a 	add	r2,r16,r17
  80922c:	80c00115 	stw	r3,4(r16)
  809230:	003fdf06 	br	8091b0 <_malloc_r+0x2bc>
  809234:	e4000217 	ldw	r16,8(fp)
  809238:	00bfff04 	movi	r2,-4
  80923c:	80c00117 	ldw	r3,4(r16)
  809240:	802d883a 	mov	r22,r16
  809244:	18aa703a 	and	r21,r3,r2
  809248:	ac401636 	bltu	r21,r17,8092a4 <_malloc_r+0x3b0>
  80924c:	ac49c83a 	sub	r4,r21,r17
  809250:	008003c4 	movi	r2,15
  809254:	1100130e 	bge	r2,r4,8092a4 <_malloc_r+0x3b0>
  809258:	88800054 	ori	r2,r17,1
  80925c:	8447883a 	add	r3,r16,r17
  809260:	80800115 	stw	r2,4(r16)
  809264:	20800054 	ori	r2,r4,1
  809268:	18800115 	stw	r2,4(r3)
  80926c:	e0c00215 	stw	r3,8(fp)
  809270:	9009883a 	mov	r4,r18
  809274:	0811b640 	call	811b64 <__malloc_unlock>
  809278:	80c00204 	addi	r3,r16,8
  80927c:	003f3106 	br	808f44 <_malloc_r+0x50>
  809280:	39c00117 	ldw	r7,4(r7)
  809284:	573ffe04 	addi	fp,r10,-8
  809288:	003fa006 	br	80910c <_malloc_r+0x218>
  80928c:	00801504 	movi	r2,84
  809290:	10c06736 	bltu	r2,r3,809430 <_malloc_r+0x53c>
  809294:	8804d33a 	srli	r2,r17,12
  809298:	11801b84 	addi	r6,r2,110
  80929c:	300490fa 	slli	r2,r6,3
  8092a0:	003f4106 	br	808fa8 <_malloc_r+0xb4>
  8092a4:	d0a73317 	ldw	r2,-25396(gp)
  8092a8:	d0e00917 	ldw	r3,-32732(gp)
  8092ac:	053fffc4 	movi	r20,-1
  8092b0:	10800404 	addi	r2,r2,16
  8092b4:	88a7883a 	add	r19,r17,r2
  8092b8:	1d000326 	beq	r3,r20,8092c8 <_malloc_r+0x3d4>
  8092bc:	98c3ffc4 	addi	r3,r19,4095
  8092c0:	00bc0004 	movi	r2,-4096
  8092c4:	18a6703a 	and	r19,r3,r2
  8092c8:	9009883a 	mov	r4,r18
  8092cc:	980b883a 	mov	r5,r19
  8092d0:	08097f40 	call	8097f4 <_sbrk_r>
  8092d4:	1009883a 	mov	r4,r2
  8092d8:	15000426 	beq	r2,r20,8092ec <_malloc_r+0x3f8>
  8092dc:	854b883a 	add	r5,r16,r21
  8092e0:	1029883a 	mov	r20,r2
  8092e4:	11405a2e 	bgeu	r2,r5,809450 <_malloc_r+0x55c>
  8092e8:	87000c26 	beq	r16,fp,80931c <_malloc_r+0x428>
  8092ec:	e4000217 	ldw	r16,8(fp)
  8092f0:	80c00117 	ldw	r3,4(r16)
  8092f4:	00bfff04 	movi	r2,-4
  8092f8:	1884703a 	and	r2,r3,r2
  8092fc:	14400336 	bltu	r2,r17,80930c <_malloc_r+0x418>
  809300:	1449c83a 	sub	r4,r2,r17
  809304:	008003c4 	movi	r2,15
  809308:	113fd316 	blt	r2,r4,809258 <_malloc_r+0x364>
  80930c:	9009883a 	mov	r4,r18
  809310:	0811b640 	call	811b64 <__malloc_unlock>
  809314:	0007883a 	mov	r3,zero
  809318:	003f0a06 	br	808f44 <_malloc_r+0x50>
  80931c:	05c020b4 	movhi	r23,130
  809320:	bdff1a04 	addi	r23,r23,-920
  809324:	b8800017 	ldw	r2,0(r23)
  809328:	988d883a 	add	r6,r19,r2
  80932c:	b9800015 	stw	r6,0(r23)
  809330:	d0e00917 	ldw	r3,-32732(gp)
  809334:	00bfffc4 	movi	r2,-1
  809338:	18808e26 	beq	r3,r2,809574 <_malloc_r+0x680>
  80933c:	2145c83a 	sub	r2,r4,r5
  809340:	3085883a 	add	r2,r6,r2
  809344:	b8800015 	stw	r2,0(r23)
  809348:	20c001cc 	andi	r3,r4,7
  80934c:	18005f1e 	bne	r3,zero,8094cc <_malloc_r+0x5d8>
  809350:	000b883a 	mov	r5,zero
  809354:	a4c5883a 	add	r2,r20,r19
  809358:	1083ffcc 	andi	r2,r2,4095
  80935c:	00c40004 	movi	r3,4096
  809360:	1887c83a 	sub	r3,r3,r2
  809364:	28e7883a 	add	r19,r5,r3
  809368:	9009883a 	mov	r4,r18
  80936c:	980b883a 	mov	r5,r19
  809370:	08097f40 	call	8097f4 <_sbrk_r>
  809374:	1007883a 	mov	r3,r2
  809378:	00bfffc4 	movi	r2,-1
  80937c:	18807a26 	beq	r3,r2,809568 <_malloc_r+0x674>
  809380:	1d05c83a 	sub	r2,r3,r20
  809384:	9885883a 	add	r2,r19,r2
  809388:	10c00054 	ori	r3,r2,1
  80938c:	b8800017 	ldw	r2,0(r23)
  809390:	a021883a 	mov	r16,r20
  809394:	a0c00115 	stw	r3,4(r20)
  809398:	9885883a 	add	r2,r19,r2
  80939c:	b8800015 	stw	r2,0(r23)
  8093a0:	e5000215 	stw	r20,8(fp)
  8093a4:	b7003626 	beq	r22,fp,809480 <_malloc_r+0x58c>
  8093a8:	018003c4 	movi	r6,15
  8093ac:	35404b36 	bltu	r6,r21,8094dc <_malloc_r+0x5e8>
  8093b0:	00800044 	movi	r2,1
  8093b4:	a0800115 	stw	r2,4(r20)
  8093b8:	003fcd06 	br	8092f0 <_malloc_r+0x3fc>
  8093bc:	2808d27a 	srli	r4,r5,9
  8093c0:	2000371e 	bne	r4,zero,8094a0 <_malloc_r+0x5ac>
  8093c4:	2808d0fa 	srli	r4,r5,3
  8093c8:	200690fa 	slli	r3,r4,3
  8093cc:	1ad1883a 	add	r8,r3,r11
  8093d0:	41800217 	ldw	r6,8(r8)
  8093d4:	41805b26 	beq	r8,r6,809544 <_malloc_r+0x650>
  8093d8:	30800117 	ldw	r2,4(r6)
  8093dc:	00ffff04 	movi	r3,-4
  8093e0:	10c4703a 	and	r2,r2,r3
  8093e4:	2880022e 	bgeu	r5,r2,8093f0 <_malloc_r+0x4fc>
  8093e8:	31800217 	ldw	r6,8(r6)
  8093ec:	41bffa1e 	bne	r8,r6,8093d8 <_malloc_r+0x4e4>
  8093f0:	32000317 	ldw	r8,12(r6)
  8093f4:	39c00117 	ldw	r7,4(r7)
  8093f8:	82000315 	stw	r8,12(r16)
  8093fc:	81800215 	stw	r6,8(r16)
  809400:	070020b4 	movhi	fp,130
  809404:	e731eb04 	addi	fp,fp,-14420
  809408:	34000315 	stw	r16,12(r6)
  80940c:	44000215 	stw	r16,8(r8)
  809410:	003f3e06 	br	80910c <_malloc_r+0x218>
  809414:	63000044 	addi	r12,r12,1
  809418:	608000cc 	andi	r2,r12,3
  80941c:	10005d26 	beq	r2,zero,809594 <_malloc_r+0x6a0>
  809420:	18c00204 	addi	r3,r3,8
  809424:	003f5106 	br	80916c <_malloc_r+0x278>
  809428:	8089883a 	add	r4,r16,r2
  80942c:	003f6d06 	br	8091e4 <_malloc_r+0x2f0>
  809430:	00805504 	movi	r2,340
  809434:	10c02036 	bltu	r2,r3,8094b8 <_malloc_r+0x5c4>
  809438:	8804d3fa 	srli	r2,r17,15
  80943c:	11801dc4 	addi	r6,r2,119
  809440:	300490fa 	slli	r2,r6,3
  809444:	003ed806 	br	808fa8 <_malloc_r+0xb4>
  809448:	48c000c4 	addi	r3,r9,3
  80944c:	003f3106 	br	809114 <_malloc_r+0x220>
  809450:	05c020b4 	movhi	r23,130
  809454:	bdff1a04 	addi	r23,r23,-920
  809458:	b8800017 	ldw	r2,0(r23)
  80945c:	988d883a 	add	r6,r19,r2
  809460:	b9800015 	stw	r6,0(r23)
  809464:	293fb21e 	bne	r5,r4,809330 <_malloc_r+0x43c>
  809468:	2083ffcc 	andi	r2,r4,4095
  80946c:	103fb01e 	bne	r2,zero,809330 <_malloc_r+0x43c>
  809470:	e4000217 	ldw	r16,8(fp)
  809474:	9d45883a 	add	r2,r19,r21
  809478:	10800054 	ori	r2,r2,1
  80947c:	80800115 	stw	r2,4(r16)
  809480:	b8c00017 	ldw	r3,0(r23)
  809484:	d0a73417 	ldw	r2,-25392(gp)
  809488:	10c0012e 	bgeu	r2,r3,809490 <_malloc_r+0x59c>
  80948c:	d0e73415 	stw	r3,-25392(gp)
  809490:	d0a73517 	ldw	r2,-25388(gp)
  809494:	10ff962e 	bgeu	r2,r3,8092f0 <_malloc_r+0x3fc>
  809498:	d0e73515 	stw	r3,-25388(gp)
  80949c:	003f9406 	br	8092f0 <_malloc_r+0x3fc>
  8094a0:	00800104 	movi	r2,4
  8094a4:	11001e36 	bltu	r2,r4,809520 <_malloc_r+0x62c>
  8094a8:	2804d1ba 	srli	r2,r5,6
  8094ac:	11000e04 	addi	r4,r2,56
  8094b0:	200690fa 	slli	r3,r4,3
  8094b4:	003fc506 	br	8093cc <_malloc_r+0x4d8>
  8094b8:	00815504 	movi	r2,1364
  8094bc:	10c01d2e 	bgeu	r2,r3,809534 <_malloc_r+0x640>
  8094c0:	01801f84 	movi	r6,126
  8094c4:	0080fc04 	movi	r2,1008
  8094c8:	003eb706 	br	808fa8 <_malloc_r+0xb4>
  8094cc:	00800204 	movi	r2,8
  8094d0:	10cbc83a 	sub	r5,r2,r3
  8094d4:	2169883a 	add	r20,r4,r5
  8094d8:	003f9e06 	br	809354 <_malloc_r+0x460>
  8094dc:	00bffe04 	movi	r2,-8
  8094e0:	a93ffd04 	addi	r4,r21,-12
  8094e4:	2088703a 	and	r4,r4,r2
  8094e8:	b10b883a 	add	r5,r22,r4
  8094ec:	00c00144 	movi	r3,5
  8094f0:	28c00215 	stw	r3,8(r5)
  8094f4:	28c00115 	stw	r3,4(r5)
  8094f8:	b0800117 	ldw	r2,4(r22)
  8094fc:	1080004c 	andi	r2,r2,1
  809500:	2084b03a 	or	r2,r4,r2
  809504:	b0800115 	stw	r2,4(r22)
  809508:	313fdd2e 	bgeu	r6,r4,809480 <_malloc_r+0x58c>
  80950c:	b1400204 	addi	r5,r22,8
  809510:	9009883a 	mov	r4,r18
  809514:	080d7800 	call	80d780 <_free_r>
  809518:	e4000217 	ldw	r16,8(fp)
  80951c:	003fd806 	br	809480 <_malloc_r+0x58c>
  809520:	00800504 	movi	r2,20
  809524:	11001536 	bltu	r2,r4,80957c <_malloc_r+0x688>
  809528:	210016c4 	addi	r4,r4,91
  80952c:	200690fa 	slli	r3,r4,3
  809530:	003fa606 	br	8093cc <_malloc_r+0x4d8>
  809534:	8804d4ba 	srli	r2,r17,18
  809538:	11801f04 	addi	r6,r2,124
  80953c:	300490fa 	slli	r2,r6,3
  809540:	003e9906 	br	808fa8 <_malloc_r+0xb4>
  809544:	2009d0ba 	srai	r4,r4,2
  809548:	014020b4 	movhi	r5,130
  80954c:	2971eb04 	addi	r5,r5,-14420
  809550:	00c00044 	movi	r3,1
  809554:	28800117 	ldw	r2,4(r5)
  809558:	1906983a 	sll	r3,r3,r4
  80955c:	10c4b03a 	or	r2,r2,r3
  809560:	28800115 	stw	r2,4(r5)
  809564:	003fa306 	br	8093f4 <_malloc_r+0x500>
  809568:	0027883a 	mov	r19,zero
  80956c:	00c00044 	movi	r3,1
  809570:	003f8606 	br	80938c <_malloc_r+0x498>
  809574:	d1200915 	stw	r4,-32732(gp)
  809578:	003f7306 	br	809348 <_malloc_r+0x454>
  80957c:	00801504 	movi	r2,84
  809580:	11001936 	bltu	r2,r4,8095e8 <_malloc_r+0x6f4>
  809584:	2804d33a 	srli	r2,r5,12
  809588:	11001b84 	addi	r4,r2,110
  80958c:	200690fa 	slli	r3,r4,3
  809590:	003f8e06 	br	8093cc <_malloc_r+0x4d8>
  809594:	480b883a 	mov	r5,r9
  809598:	6807883a 	mov	r3,r13
  80959c:	288000cc 	andi	r2,r5,3
  8095a0:	18fffe04 	addi	r3,r3,-8
  8095a4:	297fffc4 	addi	r5,r5,-1
  8095a8:	10001526 	beq	r2,zero,809600 <_malloc_r+0x70c>
  8095ac:	18800217 	ldw	r2,8(r3)
  8095b0:	10fffa26 	beq	r2,r3,80959c <_malloc_r+0x6a8>
  8095b4:	2109883a 	add	r4,r4,r4
  8095b8:	393f1e36 	bltu	r7,r4,809234 <_malloc_r+0x340>
  8095bc:	203f1d26 	beq	r4,zero,809234 <_malloc_r+0x340>
  8095c0:	21c4703a 	and	r2,r4,r7
  8095c4:	10000226 	beq	r2,zero,8095d0 <_malloc_r+0x6dc>
  8095c8:	6013883a 	mov	r9,r12
  8095cc:	003ee106 	br	809154 <_malloc_r+0x260>
  8095d0:	2109883a 	add	r4,r4,r4
  8095d4:	3904703a 	and	r2,r7,r4
  8095d8:	63000104 	addi	r12,r12,4
  8095dc:	103ffc26 	beq	r2,zero,8095d0 <_malloc_r+0x6dc>
  8095e0:	6013883a 	mov	r9,r12
  8095e4:	003edb06 	br	809154 <_malloc_r+0x260>
  8095e8:	00805504 	movi	r2,340
  8095ec:	11000836 	bltu	r2,r4,809610 <_malloc_r+0x71c>
  8095f0:	2804d3fa 	srli	r2,r5,15
  8095f4:	11001dc4 	addi	r4,r2,119
  8095f8:	200690fa 	slli	r3,r4,3
  8095fc:	003f7306 	br	8093cc <_malloc_r+0x4d8>
  809600:	0104303a 	nor	r2,zero,r4
  809604:	388e703a 	and	r7,r7,r2
  809608:	e1c00115 	stw	r7,4(fp)
  80960c:	003fe906 	br	8095b4 <_malloc_r+0x6c0>
  809610:	00815504 	movi	r2,1364
  809614:	1100032e 	bgeu	r2,r4,809624 <_malloc_r+0x730>
  809618:	01001f84 	movi	r4,126
  80961c:	00c0fc04 	movi	r3,1008
  809620:	003f6a06 	br	8093cc <_malloc_r+0x4d8>
  809624:	2804d4ba 	srli	r2,r5,18
  809628:	11001f04 	addi	r4,r2,124
  80962c:	200690fa 	slli	r3,r4,3
  809630:	003f6606 	br	8093cc <_malloc_r+0x4d8>

00809634 <printf>:
  809634:	defffb04 	addi	sp,sp,-20
  809638:	dfc00115 	stw	ra,4(sp)
  80963c:	d9400215 	stw	r5,8(sp)
  809640:	d9800315 	stw	r6,12(sp)
  809644:	d9c00415 	stw	r7,16(sp)
  809648:	008020b4 	movhi	r2,130
  80964c:	10b7cd04 	addi	r2,r2,-8396
  809650:	10c00017 	ldw	r3,0(r2)
  809654:	200b883a 	mov	r5,r4
  809658:	d8800204 	addi	r2,sp,8
  80965c:	19000217 	ldw	r4,8(r3)
  809660:	100d883a 	mov	r6,r2
  809664:	d8800015 	stw	r2,0(sp)
  809668:	080b8380 	call	80b838 <__vfprintf_internal>
  80966c:	dfc00117 	ldw	ra,4(sp)
  809670:	dec00504 	addi	sp,sp,20
  809674:	f800283a 	ret

00809678 <_printf_r>:
  809678:	defffc04 	addi	sp,sp,-16
  80967c:	dfc00115 	stw	ra,4(sp)
  809680:	d9800215 	stw	r6,8(sp)
  809684:	d9c00315 	stw	r7,12(sp)
  809688:	280d883a 	mov	r6,r5
  80968c:	21400217 	ldw	r5,8(r4)
  809690:	d8c00204 	addi	r3,sp,8
  809694:	180f883a 	mov	r7,r3
  809698:	d8c00015 	stw	r3,0(sp)
  80969c:	080998c0 	call	80998c <___vfprintf_internal_r>
  8096a0:	dfc00117 	ldw	ra,4(sp)
  8096a4:	dec00404 	addi	sp,sp,16
  8096a8:	f800283a 	ret

008096ac <_puts_r>:
  8096ac:	defff604 	addi	sp,sp,-40
  8096b0:	dc400715 	stw	r17,28(sp)
  8096b4:	2023883a 	mov	r17,r4
  8096b8:	2809883a 	mov	r4,r5
  8096bc:	dfc00915 	stw	ra,36(sp)
  8096c0:	dcc00815 	stw	r19,32(sp)
  8096c4:	2827883a 	mov	r19,r5
  8096c8:	08098640 	call	809864 <strlen>
  8096cc:	89400217 	ldw	r5,8(r17)
  8096d0:	00c020b4 	movhi	r3,130
  8096d4:	18f02b04 	addi	r3,r3,-16212
  8096d8:	01c00044 	movi	r7,1
  8096dc:	12000044 	addi	r8,r2,1
  8096e0:	d8c00515 	stw	r3,20(sp)
  8096e4:	d9c00615 	stw	r7,24(sp)
  8096e8:	d8c00304 	addi	r3,sp,12
  8096ec:	01c00084 	movi	r7,2
  8096f0:	8809883a 	mov	r4,r17
  8096f4:	d80d883a 	mov	r6,sp
  8096f8:	d8c00015 	stw	r3,0(sp)
  8096fc:	dcc00315 	stw	r19,12(sp)
  809700:	da000215 	stw	r8,8(sp)
  809704:	d9c00115 	stw	r7,4(sp)
  809708:	d8800415 	stw	r2,16(sp)
  80970c:	080da940 	call	80da94 <__sfvwrite_r>
  809710:	00ffffc4 	movi	r3,-1
  809714:	10000626 	beq	r2,zero,809730 <_puts_r+0x84>
  809718:	1805883a 	mov	r2,r3
  80971c:	dfc00917 	ldw	ra,36(sp)
  809720:	dcc00817 	ldw	r19,32(sp)
  809724:	dc400717 	ldw	r17,28(sp)
  809728:	dec00a04 	addi	sp,sp,40
  80972c:	f800283a 	ret
  809730:	00c00284 	movi	r3,10
  809734:	1805883a 	mov	r2,r3
  809738:	dfc00917 	ldw	ra,36(sp)
  80973c:	dcc00817 	ldw	r19,32(sp)
  809740:	dc400717 	ldw	r17,28(sp)
  809744:	dec00a04 	addi	sp,sp,40
  809748:	f800283a 	ret

0080974c <puts>:
  80974c:	008020b4 	movhi	r2,130
  809750:	10b7cd04 	addi	r2,r2,-8396
  809754:	200b883a 	mov	r5,r4
  809758:	11000017 	ldw	r4,0(r2)
  80975c:	08096ac1 	jmpi	8096ac <_puts_r>

00809760 <srand>:
  809760:	008020b4 	movhi	r2,130
  809764:	10b7cd04 	addi	r2,r2,-8396
  809768:	11400017 	ldw	r5,0(r2)
  80976c:	0007883a 	mov	r3,zero
  809770:	28c02a15 	stw	r3,168(r5)
  809774:	29002915 	stw	r4,164(r5)
  809778:	f800283a 	ret

0080977c <rand>:
  80977c:	defffe04 	addi	sp,sp,-8
  809780:	008020b4 	movhi	r2,130
  809784:	10b7cd04 	addi	r2,r2,-8396
  809788:	dc000015 	stw	r16,0(sp)
  80978c:	14000017 	ldw	r16,0(r2)
  809790:	dfc00115 	stw	ra,4(sp)
  809794:	00932574 	movhi	r2,19605
  809798:	109fcb44 	addi	r2,r2,32557
  80979c:	82002917 	ldw	r8,164(r16)
  8097a0:	82402a17 	ldw	r9,168(r16)
  8097a4:	00d614b4 	movhi	r3,22610
  8097a8:	18fd0b44 	addi	r3,r3,-3027
  8097ac:	4009883a 	mov	r4,r8
  8097b0:	180f883a 	mov	r7,r3
  8097b4:	100d883a 	mov	r6,r2
  8097b8:	480b883a 	mov	r5,r9
  8097bc:	08086680 	call	808668 <__muldi3>
  8097c0:	02000044 	movi	r8,1
  8097c4:	1209883a 	add	r4,r2,r8
  8097c8:	2095803a 	cmpltu	r10,r4,r2
  8097cc:	50d5883a 	add	r10,r10,r3
  8097d0:	81002915 	stw	r4,164(r16)
  8097d4:	01200034 	movhi	r4,32768
  8097d8:	213fffc4 	addi	r4,r4,-1
  8097dc:	2284703a 	and	r2,r4,r10
  8097e0:	82802a15 	stw	r10,168(r16)
  8097e4:	dfc00117 	ldw	ra,4(sp)
  8097e8:	dc000017 	ldw	r16,0(sp)
  8097ec:	dec00204 	addi	sp,sp,8
  8097f0:	f800283a 	ret

008097f4 <_sbrk_r>:
  8097f4:	defffd04 	addi	sp,sp,-12
  8097f8:	dc000015 	stw	r16,0(sp)
  8097fc:	040020b4 	movhi	r16,130
  809800:	843efd04 	addi	r16,r16,-1036
  809804:	dc400115 	stw	r17,4(sp)
  809808:	80000015 	stw	zero,0(r16)
  80980c:	2023883a 	mov	r17,r4
  809810:	2809883a 	mov	r4,r5
  809814:	dfc00215 	stw	ra,8(sp)
  809818:	0811d640 	call	811d64 <sbrk>
  80981c:	1007883a 	mov	r3,r2
  809820:	00bfffc4 	movi	r2,-1
  809824:	18800626 	beq	r3,r2,809840 <_sbrk_r+0x4c>
  809828:	1805883a 	mov	r2,r3
  80982c:	dfc00217 	ldw	ra,8(sp)
  809830:	dc400117 	ldw	r17,4(sp)
  809834:	dc000017 	ldw	r16,0(sp)
  809838:	dec00304 	addi	sp,sp,12
  80983c:	f800283a 	ret
  809840:	80800017 	ldw	r2,0(r16)
  809844:	103ff826 	beq	r2,zero,809828 <_sbrk_r+0x34>
  809848:	88800015 	stw	r2,0(r17)
  80984c:	1805883a 	mov	r2,r3
  809850:	dfc00217 	ldw	ra,8(sp)
  809854:	dc400117 	ldw	r17,4(sp)
  809858:	dc000017 	ldw	r16,0(sp)
  80985c:	dec00304 	addi	sp,sp,12
  809860:	f800283a 	ret

00809864 <strlen>:
  809864:	208000cc 	andi	r2,r4,3
  809868:	2011883a 	mov	r8,r4
  80986c:	1000161e 	bne	r2,zero,8098c8 <strlen+0x64>
  809870:	20c00017 	ldw	r3,0(r4)
  809874:	017fbff4 	movhi	r5,65279
  809878:	297fbfc4 	addi	r5,r5,-257
  80987c:	01e02074 	movhi	r7,32897
  809880:	39e02004 	addi	r7,r7,-32640
  809884:	1945883a 	add	r2,r3,r5
  809888:	11c4703a 	and	r2,r2,r7
  80988c:	00c6303a 	nor	r3,zero,r3
  809890:	1886703a 	and	r3,r3,r2
  809894:	18000c1e 	bne	r3,zero,8098c8 <strlen+0x64>
  809898:	280d883a 	mov	r6,r5
  80989c:	380b883a 	mov	r5,r7
  8098a0:	21000104 	addi	r4,r4,4
  8098a4:	20800017 	ldw	r2,0(r4)
  8098a8:	1187883a 	add	r3,r2,r6
  8098ac:	1946703a 	and	r3,r3,r5
  8098b0:	0084303a 	nor	r2,zero,r2
  8098b4:	10c4703a 	and	r2,r2,r3
  8098b8:	103ff926 	beq	r2,zero,8098a0 <strlen+0x3c>
  8098bc:	20800007 	ldb	r2,0(r4)
  8098c0:	10000326 	beq	r2,zero,8098d0 <strlen+0x6c>
  8098c4:	21000044 	addi	r4,r4,1
  8098c8:	20800007 	ldb	r2,0(r4)
  8098cc:	103ffd1e 	bne	r2,zero,8098c4 <strlen+0x60>
  8098d0:	2205c83a 	sub	r2,r4,r8
  8098d4:	f800283a 	ret

008098d8 <time>:
  8098d8:	defffc04 	addi	sp,sp,-16
  8098dc:	008020b4 	movhi	r2,130
  8098e0:	10b7cd04 	addi	r2,r2,-8396
  8098e4:	dc000215 	stw	r16,8(sp)
  8098e8:	2021883a 	mov	r16,r4
  8098ec:	11000017 	ldw	r4,0(r2)
  8098f0:	d80b883a 	mov	r5,sp
  8098f4:	000d883a 	mov	r6,zero
  8098f8:	dfc00315 	stw	ra,12(sp)
  8098fc:	080e0b00 	call	80e0b0 <_gettimeofday_r>
  809900:	00ffffc4 	movi	r3,-1
  809904:	10000416 	blt	r2,zero,809918 <time+0x40>
  809908:	80000826 	beq	r16,zero,80992c <time+0x54>
  80990c:	d8800017 	ldw	r2,0(sp)
  809910:	80800015 	stw	r2,0(r16)
  809914:	1007883a 	mov	r3,r2
  809918:	1805883a 	mov	r2,r3
  80991c:	dfc00317 	ldw	ra,12(sp)
  809920:	dc000217 	ldw	r16,8(sp)
  809924:	dec00404 	addi	sp,sp,16
  809928:	f800283a 	ret
  80992c:	d8800017 	ldw	r2,0(sp)
  809930:	003ff806 	br	809914 <time+0x3c>

00809934 <__sprint_r>:
  809934:	30800217 	ldw	r2,8(r6)
  809938:	defffe04 	addi	sp,sp,-8
  80993c:	dc000015 	stw	r16,0(sp)
  809940:	dfc00115 	stw	ra,4(sp)
  809944:	3021883a 	mov	r16,r6
  809948:	0007883a 	mov	r3,zero
  80994c:	1000061e 	bne	r2,zero,809968 <__sprint_r+0x34>
  809950:	1805883a 	mov	r2,r3
  809954:	30000115 	stw	zero,4(r6)
  809958:	dfc00117 	ldw	ra,4(sp)
  80995c:	dc000017 	ldw	r16,0(sp)
  809960:	dec00204 	addi	sp,sp,8
  809964:	f800283a 	ret
  809968:	080da940 	call	80da94 <__sfvwrite_r>
  80996c:	1007883a 	mov	r3,r2
  809970:	1805883a 	mov	r2,r3
  809974:	80000115 	stw	zero,4(r16)
  809978:	80000215 	stw	zero,8(r16)
  80997c:	dfc00117 	ldw	ra,4(sp)
  809980:	dc000017 	ldw	r16,0(sp)
  809984:	dec00204 	addi	sp,sp,8
  809988:	f800283a 	ret

0080998c <___vfprintf_internal_r>:
  80998c:	defea404 	addi	sp,sp,-1392
  809990:	dd815815 	stw	r22,1376(sp)
  809994:	dc015215 	stw	r16,1352(sp)
  809998:	d9c15115 	stw	r7,1348(sp)
  80999c:	dfc15b15 	stw	ra,1388(sp)
  8099a0:	df015a15 	stw	fp,1384(sp)
  8099a4:	ddc15915 	stw	r23,1380(sp)
  8099a8:	dd415715 	stw	r21,1372(sp)
  8099ac:	dd015615 	stw	r20,1368(sp)
  8099b0:	dcc15515 	stw	r19,1364(sp)
  8099b4:	dc815415 	stw	r18,1360(sp)
  8099b8:	dc415315 	stw	r17,1356(sp)
  8099bc:	282d883a 	mov	r22,r5
  8099c0:	3021883a 	mov	r16,r6
  8099c4:	d9014f15 	stw	r4,1340(sp)
  8099c8:	080e12c0 	call	80e12c <_localeconv_r>
  8099cc:	10800017 	ldw	r2,0(r2)
  8099d0:	d9c15117 	ldw	r7,1348(sp)
  8099d4:	d8814915 	stw	r2,1316(sp)
  8099d8:	d8814f17 	ldw	r2,1340(sp)
  8099dc:	10000226 	beq	r2,zero,8099e8 <___vfprintf_internal_r+0x5c>
  8099e0:	10800e17 	ldw	r2,56(r2)
  8099e4:	10020d26 	beq	r2,zero,80a21c <___vfprintf_internal_r+0x890>
  8099e8:	b080030b 	ldhu	r2,12(r22)
  8099ec:	1080020c 	andi	r2,r2,8
  8099f0:	10020e26 	beq	r2,zero,80a22c <___vfprintf_internal_r+0x8a0>
  8099f4:	b0800417 	ldw	r2,16(r22)
  8099f8:	10020c26 	beq	r2,zero,80a22c <___vfprintf_internal_r+0x8a0>
  8099fc:	b200030b 	ldhu	r8,12(r22)
  809a00:	00800284 	movi	r2,10
  809a04:	40c0068c 	andi	r3,r8,26
  809a08:	18802f1e 	bne	r3,r2,809ac8 <___vfprintf_internal_r+0x13c>
  809a0c:	b080038f 	ldh	r2,14(r22)
  809a10:	10002d16 	blt	r2,zero,809ac8 <___vfprintf_internal_r+0x13c>
  809a14:	b240038b 	ldhu	r9,14(r22)
  809a18:	b2800717 	ldw	r10,28(r22)
  809a1c:	b2c00917 	ldw	r11,36(r22)
  809a20:	d9014f17 	ldw	r4,1340(sp)
  809a24:	dc402904 	addi	r17,sp,164
  809a28:	d8804004 	addi	r2,sp,256
  809a2c:	00c10004 	movi	r3,1024
  809a30:	423fff4c 	andi	r8,r8,65533
  809a34:	800d883a 	mov	r6,r16
  809a38:	880b883a 	mov	r5,r17
  809a3c:	da002c0d 	sth	r8,176(sp)
  809a40:	da402c8d 	sth	r9,178(sp)
  809a44:	da803015 	stw	r10,192(sp)
  809a48:	dac03215 	stw	r11,200(sp)
  809a4c:	d8802d15 	stw	r2,180(sp)
  809a50:	d8c02e15 	stw	r3,184(sp)
  809a54:	d8802915 	stw	r2,164(sp)
  809a58:	d8c02b15 	stw	r3,172(sp)
  809a5c:	d8002f15 	stw	zero,188(sp)
  809a60:	080998c0 	call	80998c <___vfprintf_internal_r>
  809a64:	d8814b15 	stw	r2,1324(sp)
  809a68:	10000416 	blt	r2,zero,809a7c <___vfprintf_internal_r+0xf0>
  809a6c:	d9014f17 	ldw	r4,1340(sp)
  809a70:	880b883a 	mov	r5,r17
  809a74:	080d1640 	call	80d164 <_fflush_r>
  809a78:	1002321e 	bne	r2,zero,80a344 <___vfprintf_internal_r+0x9b8>
  809a7c:	d8802c0b 	ldhu	r2,176(sp)
  809a80:	1080100c 	andi	r2,r2,64
  809a84:	10000326 	beq	r2,zero,809a94 <___vfprintf_internal_r+0x108>
  809a88:	b080030b 	ldhu	r2,12(r22)
  809a8c:	10801014 	ori	r2,r2,64
  809a90:	b080030d 	sth	r2,12(r22)
  809a94:	d8814b17 	ldw	r2,1324(sp)
  809a98:	dfc15b17 	ldw	ra,1388(sp)
  809a9c:	df015a17 	ldw	fp,1384(sp)
  809aa0:	ddc15917 	ldw	r23,1380(sp)
  809aa4:	dd815817 	ldw	r22,1376(sp)
  809aa8:	dd415717 	ldw	r21,1372(sp)
  809aac:	dd015617 	ldw	r20,1368(sp)
  809ab0:	dcc15517 	ldw	r19,1364(sp)
  809ab4:	dc815417 	ldw	r18,1360(sp)
  809ab8:	dc415317 	ldw	r17,1356(sp)
  809abc:	dc015217 	ldw	r16,1352(sp)
  809ac0:	dec15c04 	addi	sp,sp,1392
  809ac4:	f800283a 	ret
  809ac8:	0005883a 	mov	r2,zero
  809acc:	0007883a 	mov	r3,zero
  809ad0:	dd401904 	addi	r21,sp,100
  809ad4:	d8814215 	stw	r2,1288(sp)
  809ad8:	802f883a 	mov	r23,r16
  809adc:	d8c14315 	stw	r3,1292(sp)
  809ae0:	d8014b15 	stw	zero,1324(sp)
  809ae4:	d8014815 	stw	zero,1312(sp)
  809ae8:	d8014415 	stw	zero,1296(sp)
  809aec:	d8014715 	stw	zero,1308(sp)
  809af0:	dd400c15 	stw	r21,48(sp)
  809af4:	d8000e15 	stw	zero,56(sp)
  809af8:	d8000d15 	stw	zero,52(sp)
  809afc:	b8800007 	ldb	r2,0(r23)
  809b00:	10001926 	beq	r2,zero,809b68 <___vfprintf_internal_r+0x1dc>
  809b04:	00c00944 	movi	r3,37
  809b08:	10c01726 	beq	r2,r3,809b68 <___vfprintf_internal_r+0x1dc>
  809b0c:	b821883a 	mov	r16,r23
  809b10:	00000106 	br	809b18 <___vfprintf_internal_r+0x18c>
  809b14:	10c00326 	beq	r2,r3,809b24 <___vfprintf_internal_r+0x198>
  809b18:	84000044 	addi	r16,r16,1
  809b1c:	80800007 	ldb	r2,0(r16)
  809b20:	103ffc1e 	bne	r2,zero,809b14 <___vfprintf_internal_r+0x188>
  809b24:	85e7c83a 	sub	r19,r16,r23
  809b28:	98000e26 	beq	r19,zero,809b64 <___vfprintf_internal_r+0x1d8>
  809b2c:	dc800e17 	ldw	r18,56(sp)
  809b30:	dc400d17 	ldw	r17,52(sp)
  809b34:	008001c4 	movi	r2,7
  809b38:	94e5883a 	add	r18,r18,r19
  809b3c:	8c400044 	addi	r17,r17,1
  809b40:	adc00015 	stw	r23,0(r21)
  809b44:	dc800e15 	stw	r18,56(sp)
  809b48:	acc00115 	stw	r19,4(r21)
  809b4c:	dc400d15 	stw	r17,52(sp)
  809b50:	14428b16 	blt	r2,r17,80a580 <___vfprintf_internal_r+0xbf4>
  809b54:	ad400204 	addi	r21,r21,8
  809b58:	d9014b17 	ldw	r4,1324(sp)
  809b5c:	24c9883a 	add	r4,r4,r19
  809b60:	d9014b15 	stw	r4,1324(sp)
  809b64:	802f883a 	mov	r23,r16
  809b68:	b8800007 	ldb	r2,0(r23)
  809b6c:	10013c26 	beq	r2,zero,80a060 <___vfprintf_internal_r+0x6d4>
  809b70:	bdc00044 	addi	r23,r23,1
  809b74:	d8000405 	stb	zero,16(sp)
  809b78:	b8c00007 	ldb	r3,0(r23)
  809b7c:	04ffffc4 	movi	r19,-1
  809b80:	d8014c15 	stw	zero,1328(sp)
  809b84:	d8014a15 	stw	zero,1320(sp)
  809b88:	d8c14d15 	stw	r3,1332(sp)
  809b8c:	bdc00044 	addi	r23,r23,1
  809b90:	d9414d17 	ldw	r5,1332(sp)
  809b94:	00801604 	movi	r2,88
  809b98:	28fff804 	addi	r3,r5,-32
  809b9c:	10c06036 	bltu	r2,r3,809d20 <___vfprintf_internal_r+0x394>
  809ba0:	18c5883a 	add	r2,r3,r3
  809ba4:	1085883a 	add	r2,r2,r2
  809ba8:	00c02074 	movhi	r3,129
  809bac:	18e6ef04 	addi	r3,r3,-25668
  809bb0:	10c5883a 	add	r2,r2,r3
  809bb4:	11000017 	ldw	r4,0(r2)
  809bb8:	2000683a 	jmp	r4
  809bbc:	0080ab30 	cmpltui	r2,zero,684
  809bc0:	00809d20 	cmpeqi	r2,zero,628
  809bc4:	00809d20 	cmpeqi	r2,zero,628
  809bc8:	0080ab1c 	xori	r2,zero,684
  809bcc:	00809d20 	cmpeqi	r2,zero,628
  809bd0:	00809d20 	cmpeqi	r2,zero,628
  809bd4:	00809d20 	cmpeqi	r2,zero,628
  809bd8:	00809d20 	cmpeqi	r2,zero,628
  809bdc:	00809d20 	cmpeqi	r2,zero,628
  809be0:	00809d20 	cmpeqi	r2,zero,628
  809be4:	0080a8fc 	xorhi	r2,zero,675
  809be8:	0080ab0c 	andi	r2,zero,684
  809bec:	00809d20 	cmpeqi	r2,zero,628
  809bf0:	0080a914 	movui	r2,676
  809bf4:	0080aba8 	cmpgeui	r2,zero,686
  809bf8:	00809d20 	cmpeqi	r2,zero,628
  809bfc:	0080ab94 	movui	r2,686
  809c00:	0080ab5c 	xori	r2,zero,685
  809c04:	0080ab5c 	xori	r2,zero,685
  809c08:	0080ab5c 	xori	r2,zero,685
  809c0c:	0080ab5c 	xori	r2,zero,685
  809c10:	0080ab5c 	xori	r2,zero,685
  809c14:	0080ab5c 	xori	r2,zero,685
  809c18:	0080ab5c 	xori	r2,zero,685
  809c1c:	0080ab5c 	xori	r2,zero,685
  809c20:	0080ab5c 	xori	r2,zero,685
  809c24:	00809d20 	cmpeqi	r2,zero,628
  809c28:	00809d20 	cmpeqi	r2,zero,628
  809c2c:	00809d20 	cmpeqi	r2,zero,628
  809c30:	00809d20 	cmpeqi	r2,zero,628
  809c34:	00809d20 	cmpeqi	r2,zero,628
  809c38:	00809d20 	cmpeqi	r2,zero,628
  809c3c:	00809d20 	cmpeqi	r2,zero,628
  809c40:	00809d20 	cmpeqi	r2,zero,628
  809c44:	00809d20 	cmpeqi	r2,zero,628
  809c48:	00809d20 	cmpeqi	r2,zero,628
  809c4c:	0080a378 	rdprs	r2,zero,653
  809c50:	0080a9e4 	muli	r2,zero,679
  809c54:	00809d20 	cmpeqi	r2,zero,628
  809c58:	0080a9e4 	muli	r2,zero,679
  809c5c:	00809d20 	cmpeqi	r2,zero,628
  809c60:	00809d20 	cmpeqi	r2,zero,628
  809c64:	00809d20 	cmpeqi	r2,zero,628
  809c68:	00809d20 	cmpeqi	r2,zero,628
  809c6c:	0080ab48 	cmpgei	r2,zero,685
  809c70:	00809d20 	cmpeqi	r2,zero,628
  809c74:	00809d20 	cmpeqi	r2,zero,628
  809c78:	0080a42c 	andhi	r2,zero,656
  809c7c:	00809d20 	cmpeqi	r2,zero,628
  809c80:	00809d20 	cmpeqi	r2,zero,628
  809c84:	00809d20 	cmpeqi	r2,zero,628
  809c88:	00809d20 	cmpeqi	r2,zero,628
  809c8c:	00809d20 	cmpeqi	r2,zero,628
  809c90:	0080a478 	rdprs	r2,zero,657
  809c94:	00809d20 	cmpeqi	r2,zero,628
  809c98:	00809d20 	cmpeqi	r2,zero,628
  809c9c:	0080aa98 	cmpnei	r2,zero,682
  809ca0:	00809d20 	cmpeqi	r2,zero,628
  809ca4:	00809d20 	cmpeqi	r2,zero,628
  809ca8:	00809d20 	cmpeqi	r2,zero,628
  809cac:	00809d20 	cmpeqi	r2,zero,628
  809cb0:	00809d20 	cmpeqi	r2,zero,628
  809cb4:	00809d20 	cmpeqi	r2,zero,628
  809cb8:	00809d20 	cmpeqi	r2,zero,628
  809cbc:	00809d20 	cmpeqi	r2,zero,628
  809cc0:	00809d20 	cmpeqi	r2,zero,628
  809cc4:	00809d20 	cmpeqi	r2,zero,628
  809cc8:	0080aa6c 	andhi	r2,zero,681
  809ccc:	0080a384 	movi	r2,654
  809cd0:	0080a9e4 	muli	r2,zero,679
  809cd4:	0080a9e4 	muli	r2,zero,679
  809cd8:	0080a9e4 	muli	r2,zero,679
  809cdc:	0080a9d0 	cmplti	r2,zero,679
  809ce0:	0080a384 	movi	r2,654
  809ce4:	00809d20 	cmpeqi	r2,zero,628
  809ce8:	00809d20 	cmpeqi	r2,zero,628
  809cec:	0080a958 	cmpnei	r2,zero,677
  809cf0:	00809d20 	cmpeqi	r2,zero,628
  809cf4:	0080a928 	cmpgeui	r2,zero,676
  809cf8:	0080a438 	rdprs	r2,zero,656
  809cfc:	0080a988 	cmpgei	r2,zero,678
  809d00:	0080a974 	movhi	r2,677
  809d04:	00809d20 	cmpeqi	r2,zero,628
  809d08:	0080ac04 	movi	r2,688
  809d0c:	00809d20 	cmpeqi	r2,zero,628
  809d10:	0080a484 	movi	r2,658
  809d14:	00809d20 	cmpeqi	r2,zero,628
  809d18:	00809d20 	cmpeqi	r2,zero,628
  809d1c:	0080aafc 	xorhi	r2,zero,683
  809d20:	d9014d17 	ldw	r4,1332(sp)
  809d24:	2000ce26 	beq	r4,zero,80a060 <___vfprintf_internal_r+0x6d4>
  809d28:	01400044 	movi	r5,1
  809d2c:	d9800f04 	addi	r6,sp,60
  809d30:	d9c14015 	stw	r7,1280(sp)
  809d34:	d9414515 	stw	r5,1300(sp)
  809d38:	d9814115 	stw	r6,1284(sp)
  809d3c:	280f883a 	mov	r7,r5
  809d40:	d9000f05 	stb	r4,60(sp)
  809d44:	d8000405 	stb	zero,16(sp)
  809d48:	d8014615 	stw	zero,1304(sp)
  809d4c:	d8c14c17 	ldw	r3,1328(sp)
  809d50:	1880008c 	andi	r2,r3,2
  809d54:	1005003a 	cmpeq	r2,r2,zero
  809d58:	d8815015 	stw	r2,1344(sp)
  809d5c:	1000031e 	bne	r2,zero,809d6c <___vfprintf_internal_r+0x3e0>
  809d60:	d9014517 	ldw	r4,1300(sp)
  809d64:	21000084 	addi	r4,r4,2
  809d68:	d9014515 	stw	r4,1300(sp)
  809d6c:	d9414c17 	ldw	r5,1328(sp)
  809d70:	2940210c 	andi	r5,r5,132
  809d74:	d9414e15 	stw	r5,1336(sp)
  809d78:	28002d1e 	bne	r5,zero,809e30 <___vfprintf_internal_r+0x4a4>
  809d7c:	d9814a17 	ldw	r6,1320(sp)
  809d80:	d8814517 	ldw	r2,1300(sp)
  809d84:	30a1c83a 	sub	r16,r6,r2
  809d88:	0400290e 	bge	zero,r16,809e30 <___vfprintf_internal_r+0x4a4>
  809d8c:	00800404 	movi	r2,16
  809d90:	1404580e 	bge	r2,r16,80aef4 <___vfprintf_internal_r+0x1568>
  809d94:	dc800e17 	ldw	r18,56(sp)
  809d98:	dc400d17 	ldw	r17,52(sp)
  809d9c:	1027883a 	mov	r19,r2
  809da0:	070020b4 	movhi	fp,130
  809da4:	e7304784 	addi	fp,fp,-16098
  809da8:	050001c4 	movi	r20,7
  809dac:	00000306 	br	809dbc <___vfprintf_internal_r+0x430>
  809db0:	843ffc04 	addi	r16,r16,-16
  809db4:	ad400204 	addi	r21,r21,8
  809db8:	9c00130e 	bge	r19,r16,809e08 <___vfprintf_internal_r+0x47c>
  809dbc:	94800404 	addi	r18,r18,16
  809dc0:	8c400044 	addi	r17,r17,1
  809dc4:	af000015 	stw	fp,0(r21)
  809dc8:	acc00115 	stw	r19,4(r21)
  809dcc:	dc800e15 	stw	r18,56(sp)
  809dd0:	dc400d15 	stw	r17,52(sp)
  809dd4:	a47ff60e 	bge	r20,r17,809db0 <___vfprintf_internal_r+0x424>
  809dd8:	d9014f17 	ldw	r4,1340(sp)
  809ddc:	b00b883a 	mov	r5,r22
  809de0:	d9800c04 	addi	r6,sp,48
  809de4:	d9c15115 	stw	r7,1348(sp)
  809de8:	08099340 	call	809934 <__sprint_r>
  809dec:	d9c15117 	ldw	r7,1348(sp)
  809df0:	10009e1e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  809df4:	843ffc04 	addi	r16,r16,-16
  809df8:	dc800e17 	ldw	r18,56(sp)
  809dfc:	dc400d17 	ldw	r17,52(sp)
  809e00:	dd401904 	addi	r21,sp,100
  809e04:	9c3fed16 	blt	r19,r16,809dbc <___vfprintf_internal_r+0x430>
  809e08:	9425883a 	add	r18,r18,r16
  809e0c:	8c400044 	addi	r17,r17,1
  809e10:	008001c4 	movi	r2,7
  809e14:	af000015 	stw	fp,0(r21)
  809e18:	ac000115 	stw	r16,4(r21)
  809e1c:	dc800e15 	stw	r18,56(sp)
  809e20:	dc400d15 	stw	r17,52(sp)
  809e24:	1441f516 	blt	r2,r17,80a5fc <___vfprintf_internal_r+0xc70>
  809e28:	ad400204 	addi	r21,r21,8
  809e2c:	00000206 	br	809e38 <___vfprintf_internal_r+0x4ac>
  809e30:	dc800e17 	ldw	r18,56(sp)
  809e34:	dc400d17 	ldw	r17,52(sp)
  809e38:	d8800407 	ldb	r2,16(sp)
  809e3c:	10000b26 	beq	r2,zero,809e6c <___vfprintf_internal_r+0x4e0>
  809e40:	00800044 	movi	r2,1
  809e44:	94800044 	addi	r18,r18,1
  809e48:	8c400044 	addi	r17,r17,1
  809e4c:	a8800115 	stw	r2,4(r21)
  809e50:	d8c00404 	addi	r3,sp,16
  809e54:	008001c4 	movi	r2,7
  809e58:	a8c00015 	stw	r3,0(r21)
  809e5c:	dc800e15 	stw	r18,56(sp)
  809e60:	dc400d15 	stw	r17,52(sp)
  809e64:	1441da16 	blt	r2,r17,80a5d0 <___vfprintf_internal_r+0xc44>
  809e68:	ad400204 	addi	r21,r21,8
  809e6c:	d9015017 	ldw	r4,1344(sp)
  809e70:	20000b1e 	bne	r4,zero,809ea0 <___vfprintf_internal_r+0x514>
  809e74:	d8800444 	addi	r2,sp,17
  809e78:	94800084 	addi	r18,r18,2
  809e7c:	8c400044 	addi	r17,r17,1
  809e80:	a8800015 	stw	r2,0(r21)
  809e84:	00c00084 	movi	r3,2
  809e88:	008001c4 	movi	r2,7
  809e8c:	a8c00115 	stw	r3,4(r21)
  809e90:	dc800e15 	stw	r18,56(sp)
  809e94:	dc400d15 	stw	r17,52(sp)
  809e98:	1441c216 	blt	r2,r17,80a5a4 <___vfprintf_internal_r+0xc18>
  809e9c:	ad400204 	addi	r21,r21,8
  809ea0:	d9414e17 	ldw	r5,1336(sp)
  809ea4:	00802004 	movi	r2,128
  809ea8:	2880b126 	beq	r5,r2,80a170 <___vfprintf_internal_r+0x7e4>
  809eac:	d8c14617 	ldw	r3,1304(sp)
  809eb0:	19e1c83a 	sub	r16,r3,r7
  809eb4:	0400260e 	bge	zero,r16,809f50 <___vfprintf_internal_r+0x5c4>
  809eb8:	00800404 	movi	r2,16
  809ebc:	1403c90e 	bge	r2,r16,80ade4 <___vfprintf_internal_r+0x1458>
  809ec0:	1027883a 	mov	r19,r2
  809ec4:	070020b4 	movhi	fp,130
  809ec8:	e7304384 	addi	fp,fp,-16114
  809ecc:	050001c4 	movi	r20,7
  809ed0:	00000306 	br	809ee0 <___vfprintf_internal_r+0x554>
  809ed4:	843ffc04 	addi	r16,r16,-16
  809ed8:	ad400204 	addi	r21,r21,8
  809edc:	9c00130e 	bge	r19,r16,809f2c <___vfprintf_internal_r+0x5a0>
  809ee0:	94800404 	addi	r18,r18,16
  809ee4:	8c400044 	addi	r17,r17,1
  809ee8:	af000015 	stw	fp,0(r21)
  809eec:	acc00115 	stw	r19,4(r21)
  809ef0:	dc800e15 	stw	r18,56(sp)
  809ef4:	dc400d15 	stw	r17,52(sp)
  809ef8:	a47ff60e 	bge	r20,r17,809ed4 <___vfprintf_internal_r+0x548>
  809efc:	d9014f17 	ldw	r4,1340(sp)
  809f00:	b00b883a 	mov	r5,r22
  809f04:	d9800c04 	addi	r6,sp,48
  809f08:	d9c15115 	stw	r7,1348(sp)
  809f0c:	08099340 	call	809934 <__sprint_r>
  809f10:	d9c15117 	ldw	r7,1348(sp)
  809f14:	1000551e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  809f18:	843ffc04 	addi	r16,r16,-16
  809f1c:	dc800e17 	ldw	r18,56(sp)
  809f20:	dc400d17 	ldw	r17,52(sp)
  809f24:	dd401904 	addi	r21,sp,100
  809f28:	9c3fed16 	blt	r19,r16,809ee0 <___vfprintf_internal_r+0x554>
  809f2c:	9425883a 	add	r18,r18,r16
  809f30:	8c400044 	addi	r17,r17,1
  809f34:	008001c4 	movi	r2,7
  809f38:	af000015 	stw	fp,0(r21)
  809f3c:	ac000115 	stw	r16,4(r21)
  809f40:	dc800e15 	stw	r18,56(sp)
  809f44:	dc400d15 	stw	r17,52(sp)
  809f48:	14418216 	blt	r2,r17,80a554 <___vfprintf_internal_r+0xbc8>
  809f4c:	ad400204 	addi	r21,r21,8
  809f50:	d9014c17 	ldw	r4,1328(sp)
  809f54:	2080400c 	andi	r2,r4,256
  809f58:	10004a1e 	bne	r2,zero,80a084 <___vfprintf_internal_r+0x6f8>
  809f5c:	d9414117 	ldw	r5,1284(sp)
  809f60:	91e5883a 	add	r18,r18,r7
  809f64:	8c400044 	addi	r17,r17,1
  809f68:	008001c4 	movi	r2,7
  809f6c:	a9400015 	stw	r5,0(r21)
  809f70:	a9c00115 	stw	r7,4(r21)
  809f74:	dc800e15 	stw	r18,56(sp)
  809f78:	dc400d15 	stw	r17,52(sp)
  809f7c:	14416716 	blt	r2,r17,80a51c <___vfprintf_internal_r+0xb90>
  809f80:	a8c00204 	addi	r3,r21,8
  809f84:	d9814c17 	ldw	r6,1328(sp)
  809f88:	3080010c 	andi	r2,r6,4
  809f8c:	10002826 	beq	r2,zero,80a030 <___vfprintf_internal_r+0x6a4>
  809f90:	d8814a17 	ldw	r2,1320(sp)
  809f94:	d9014517 	ldw	r4,1300(sp)
  809f98:	1121c83a 	sub	r16,r2,r4
  809f9c:	0400240e 	bge	zero,r16,80a030 <___vfprintf_internal_r+0x6a4>
  809fa0:	00800404 	movi	r2,16
  809fa4:	14044f0e 	bge	r2,r16,80b0e4 <___vfprintf_internal_r+0x1758>
  809fa8:	dc400d17 	ldw	r17,52(sp)
  809fac:	1027883a 	mov	r19,r2
  809fb0:	070020b4 	movhi	fp,130
  809fb4:	e7304784 	addi	fp,fp,-16098
  809fb8:	050001c4 	movi	r20,7
  809fbc:	00000306 	br	809fcc <___vfprintf_internal_r+0x640>
  809fc0:	843ffc04 	addi	r16,r16,-16
  809fc4:	18c00204 	addi	r3,r3,8
  809fc8:	9c00110e 	bge	r19,r16,80a010 <___vfprintf_internal_r+0x684>
  809fcc:	94800404 	addi	r18,r18,16
  809fd0:	8c400044 	addi	r17,r17,1
  809fd4:	1f000015 	stw	fp,0(r3)
  809fd8:	1cc00115 	stw	r19,4(r3)
  809fdc:	dc800e15 	stw	r18,56(sp)
  809fe0:	dc400d15 	stw	r17,52(sp)
  809fe4:	a47ff60e 	bge	r20,r17,809fc0 <___vfprintf_internal_r+0x634>
  809fe8:	d9014f17 	ldw	r4,1340(sp)
  809fec:	b00b883a 	mov	r5,r22
  809ff0:	d9800c04 	addi	r6,sp,48
  809ff4:	08099340 	call	809934 <__sprint_r>
  809ff8:	10001c1e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  809ffc:	843ffc04 	addi	r16,r16,-16
  80a000:	dc800e17 	ldw	r18,56(sp)
  80a004:	dc400d17 	ldw	r17,52(sp)
  80a008:	d8c01904 	addi	r3,sp,100
  80a00c:	9c3fef16 	blt	r19,r16,809fcc <___vfprintf_internal_r+0x640>
  80a010:	9425883a 	add	r18,r18,r16
  80a014:	8c400044 	addi	r17,r17,1
  80a018:	008001c4 	movi	r2,7
  80a01c:	1f000015 	stw	fp,0(r3)
  80a020:	1c000115 	stw	r16,4(r3)
  80a024:	dc800e15 	stw	r18,56(sp)
  80a028:	dc400d15 	stw	r17,52(sp)
  80a02c:	1440cb16 	blt	r2,r17,80a35c <___vfprintf_internal_r+0x9d0>
  80a030:	d8814a17 	ldw	r2,1320(sp)
  80a034:	d9414517 	ldw	r5,1300(sp)
  80a038:	1140010e 	bge	r2,r5,80a040 <___vfprintf_internal_r+0x6b4>
  80a03c:	2805883a 	mov	r2,r5
  80a040:	d9814b17 	ldw	r6,1324(sp)
  80a044:	308d883a 	add	r6,r6,r2
  80a048:	d9814b15 	stw	r6,1324(sp)
  80a04c:	90013b1e 	bne	r18,zero,80a53c <___vfprintf_internal_r+0xbb0>
  80a050:	d9c14017 	ldw	r7,1280(sp)
  80a054:	dd401904 	addi	r21,sp,100
  80a058:	d8000d15 	stw	zero,52(sp)
  80a05c:	003ea706 	br	809afc <___vfprintf_internal_r+0x170>
  80a060:	d8800e17 	ldw	r2,56(sp)
  80a064:	10053f1e 	bne	r2,zero,80b564 <___vfprintf_internal_r+0x1bd8>
  80a068:	d8000d15 	stw	zero,52(sp)
  80a06c:	b080030b 	ldhu	r2,12(r22)
  80a070:	1080100c 	andi	r2,r2,64
  80a074:	103e8726 	beq	r2,zero,809a94 <___vfprintf_internal_r+0x108>
  80a078:	00bfffc4 	movi	r2,-1
  80a07c:	d8814b15 	stw	r2,1324(sp)
  80a080:	003e8406 	br	809a94 <___vfprintf_internal_r+0x108>
  80a084:	d9814d17 	ldw	r6,1332(sp)
  80a088:	00801944 	movi	r2,101
  80a08c:	11806e16 	blt	r2,r6,80a248 <___vfprintf_internal_r+0x8bc>
  80a090:	d9414717 	ldw	r5,1308(sp)
  80a094:	00c00044 	movi	r3,1
  80a098:	1943430e 	bge	r3,r5,80ada8 <___vfprintf_internal_r+0x141c>
  80a09c:	d8814117 	ldw	r2,1284(sp)
  80a0a0:	94800044 	addi	r18,r18,1
  80a0a4:	8c400044 	addi	r17,r17,1
  80a0a8:	a8800015 	stw	r2,0(r21)
  80a0ac:	008001c4 	movi	r2,7
  80a0b0:	a8c00115 	stw	r3,4(r21)
  80a0b4:	dc800e15 	stw	r18,56(sp)
  80a0b8:	dc400d15 	stw	r17,52(sp)
  80a0bc:	1441ca16 	blt	r2,r17,80a7e8 <___vfprintf_internal_r+0xe5c>
  80a0c0:	a8c00204 	addi	r3,r21,8
  80a0c4:	d9014917 	ldw	r4,1316(sp)
  80a0c8:	00800044 	movi	r2,1
  80a0cc:	94800044 	addi	r18,r18,1
  80a0d0:	8c400044 	addi	r17,r17,1
  80a0d4:	18800115 	stw	r2,4(r3)
  80a0d8:	008001c4 	movi	r2,7
  80a0dc:	19000015 	stw	r4,0(r3)
  80a0e0:	dc800e15 	stw	r18,56(sp)
  80a0e4:	dc400d15 	stw	r17,52(sp)
  80a0e8:	1441b616 	blt	r2,r17,80a7c4 <___vfprintf_internal_r+0xe38>
  80a0ec:	1cc00204 	addi	r19,r3,8
  80a0f0:	d9014217 	ldw	r4,1288(sp)
  80a0f4:	d9414317 	ldw	r5,1292(sp)
  80a0f8:	000d883a 	mov	r6,zero
  80a0fc:	000f883a 	mov	r7,zero
  80a100:	08080f40 	call	8080f4 <__nedf2>
  80a104:	10017426 	beq	r2,zero,80a6d8 <___vfprintf_internal_r+0xd4c>
  80a108:	d9414717 	ldw	r5,1308(sp)
  80a10c:	d9814117 	ldw	r6,1284(sp)
  80a110:	8c400044 	addi	r17,r17,1
  80a114:	2c85883a 	add	r2,r5,r18
  80a118:	14bfffc4 	addi	r18,r2,-1
  80a11c:	28bfffc4 	addi	r2,r5,-1
  80a120:	30c00044 	addi	r3,r6,1
  80a124:	98800115 	stw	r2,4(r19)
  80a128:	008001c4 	movi	r2,7
  80a12c:	98c00015 	stw	r3,0(r19)
  80a130:	dc800e15 	stw	r18,56(sp)
  80a134:	dc400d15 	stw	r17,52(sp)
  80a138:	14418e16 	blt	r2,r17,80a774 <___vfprintf_internal_r+0xde8>
  80a13c:	9cc00204 	addi	r19,r19,8
  80a140:	d9414817 	ldw	r5,1312(sp)
  80a144:	d8800804 	addi	r2,sp,32
  80a148:	8c400044 	addi	r17,r17,1
  80a14c:	9165883a 	add	r18,r18,r5
  80a150:	98800015 	stw	r2,0(r19)
  80a154:	008001c4 	movi	r2,7
  80a158:	99400115 	stw	r5,4(r19)
  80a15c:	dc800e15 	stw	r18,56(sp)
  80a160:	dc400d15 	stw	r17,52(sp)
  80a164:	1440ed16 	blt	r2,r17,80a51c <___vfprintf_internal_r+0xb90>
  80a168:	98c00204 	addi	r3,r19,8
  80a16c:	003f8506 	br	809f84 <___vfprintf_internal_r+0x5f8>
  80a170:	d9814a17 	ldw	r6,1320(sp)
  80a174:	d8814517 	ldw	r2,1300(sp)
  80a178:	30a1c83a 	sub	r16,r6,r2
  80a17c:	043f4b0e 	bge	zero,r16,809eac <___vfprintf_internal_r+0x520>
  80a180:	00800404 	movi	r2,16
  80a184:	1404340e 	bge	r2,r16,80b258 <___vfprintf_internal_r+0x18cc>
  80a188:	1027883a 	mov	r19,r2
  80a18c:	070020b4 	movhi	fp,130
  80a190:	e7304384 	addi	fp,fp,-16114
  80a194:	050001c4 	movi	r20,7
  80a198:	00000306 	br	80a1a8 <___vfprintf_internal_r+0x81c>
  80a19c:	843ffc04 	addi	r16,r16,-16
  80a1a0:	ad400204 	addi	r21,r21,8
  80a1a4:	9c00130e 	bge	r19,r16,80a1f4 <___vfprintf_internal_r+0x868>
  80a1a8:	94800404 	addi	r18,r18,16
  80a1ac:	8c400044 	addi	r17,r17,1
  80a1b0:	af000015 	stw	fp,0(r21)
  80a1b4:	acc00115 	stw	r19,4(r21)
  80a1b8:	dc800e15 	stw	r18,56(sp)
  80a1bc:	dc400d15 	stw	r17,52(sp)
  80a1c0:	a47ff60e 	bge	r20,r17,80a19c <___vfprintf_internal_r+0x810>
  80a1c4:	d9014f17 	ldw	r4,1340(sp)
  80a1c8:	b00b883a 	mov	r5,r22
  80a1cc:	d9800c04 	addi	r6,sp,48
  80a1d0:	d9c15115 	stw	r7,1348(sp)
  80a1d4:	08099340 	call	809934 <__sprint_r>
  80a1d8:	d9c15117 	ldw	r7,1348(sp)
  80a1dc:	103fa31e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80a1e0:	843ffc04 	addi	r16,r16,-16
  80a1e4:	dc800e17 	ldw	r18,56(sp)
  80a1e8:	dc400d17 	ldw	r17,52(sp)
  80a1ec:	dd401904 	addi	r21,sp,100
  80a1f0:	9c3fed16 	blt	r19,r16,80a1a8 <___vfprintf_internal_r+0x81c>
  80a1f4:	9425883a 	add	r18,r18,r16
  80a1f8:	8c400044 	addi	r17,r17,1
  80a1fc:	008001c4 	movi	r2,7
  80a200:	af000015 	stw	fp,0(r21)
  80a204:	ac000115 	stw	r16,4(r21)
  80a208:	dc800e15 	stw	r18,56(sp)
  80a20c:	dc400d15 	stw	r17,52(sp)
  80a210:	14416116 	blt	r2,r17,80a798 <___vfprintf_internal_r+0xe0c>
  80a214:	ad400204 	addi	r21,r21,8
  80a218:	003f2406 	br	809eac <___vfprintf_internal_r+0x520>
  80a21c:	d9014f17 	ldw	r4,1340(sp)
  80a220:	080d3fc0 	call	80d3fc <__sinit>
  80a224:	d9c15117 	ldw	r7,1348(sp)
  80a228:	003def06 	br	8099e8 <___vfprintf_internal_r+0x5c>
  80a22c:	d9014f17 	ldw	r4,1340(sp)
  80a230:	b00b883a 	mov	r5,r22
  80a234:	d9c15115 	stw	r7,1348(sp)
  80a238:	080b85c0 	call	80b85c <__swsetup_r>
  80a23c:	d9c15117 	ldw	r7,1348(sp)
  80a240:	103dee26 	beq	r2,zero,8099fc <___vfprintf_internal_r+0x70>
  80a244:	003f8c06 	br	80a078 <___vfprintf_internal_r+0x6ec>
  80a248:	d9014217 	ldw	r4,1288(sp)
  80a24c:	d9414317 	ldw	r5,1292(sp)
  80a250:	000d883a 	mov	r6,zero
  80a254:	000f883a 	mov	r7,zero
  80a258:	080806c0 	call	80806c <__eqdf2>
  80a25c:	1000f21e 	bne	r2,zero,80a628 <___vfprintf_internal_r+0xc9c>
  80a260:	008020b4 	movhi	r2,130
  80a264:	10b04304 	addi	r2,r2,-16116
  80a268:	94800044 	addi	r18,r18,1
  80a26c:	8c400044 	addi	r17,r17,1
  80a270:	a8800015 	stw	r2,0(r21)
  80a274:	00c00044 	movi	r3,1
  80a278:	008001c4 	movi	r2,7
  80a27c:	a8c00115 	stw	r3,4(r21)
  80a280:	dc800e15 	stw	r18,56(sp)
  80a284:	dc400d15 	stw	r17,52(sp)
  80a288:	1442fa16 	blt	r2,r17,80ae74 <___vfprintf_internal_r+0x14e8>
  80a28c:	a8c00204 	addi	r3,r21,8
  80a290:	d8800517 	ldw	r2,20(sp)
  80a294:	d9014717 	ldw	r4,1308(sp)
  80a298:	11015c0e 	bge	r2,r4,80a80c <___vfprintf_internal_r+0xe80>
  80a29c:	dc400d17 	ldw	r17,52(sp)
  80a2a0:	d9814917 	ldw	r6,1316(sp)
  80a2a4:	00800044 	movi	r2,1
  80a2a8:	94800044 	addi	r18,r18,1
  80a2ac:	8c400044 	addi	r17,r17,1
  80a2b0:	18800115 	stw	r2,4(r3)
  80a2b4:	008001c4 	movi	r2,7
  80a2b8:	19800015 	stw	r6,0(r3)
  80a2bc:	dc800e15 	stw	r18,56(sp)
  80a2c0:	dc400d15 	stw	r17,52(sp)
  80a2c4:	14431016 	blt	r2,r17,80af08 <___vfprintf_internal_r+0x157c>
  80a2c8:	18c00204 	addi	r3,r3,8
  80a2cc:	d8814717 	ldw	r2,1308(sp)
  80a2d0:	143fffc4 	addi	r16,r2,-1
  80a2d4:	043f2b0e 	bge	zero,r16,809f84 <___vfprintf_internal_r+0x5f8>
  80a2d8:	00800404 	movi	r2,16
  80a2dc:	1402a20e 	bge	r2,r16,80ad68 <___vfprintf_internal_r+0x13dc>
  80a2e0:	dc400d17 	ldw	r17,52(sp)
  80a2e4:	1027883a 	mov	r19,r2
  80a2e8:	070020b4 	movhi	fp,130
  80a2ec:	e7304384 	addi	fp,fp,-16114
  80a2f0:	050001c4 	movi	r20,7
  80a2f4:	00000306 	br	80a304 <___vfprintf_internal_r+0x978>
  80a2f8:	18c00204 	addi	r3,r3,8
  80a2fc:	843ffc04 	addi	r16,r16,-16
  80a300:	9c029c0e 	bge	r19,r16,80ad74 <___vfprintf_internal_r+0x13e8>
  80a304:	94800404 	addi	r18,r18,16
  80a308:	8c400044 	addi	r17,r17,1
  80a30c:	1f000015 	stw	fp,0(r3)
  80a310:	1cc00115 	stw	r19,4(r3)
  80a314:	dc800e15 	stw	r18,56(sp)
  80a318:	dc400d15 	stw	r17,52(sp)
  80a31c:	a47ff60e 	bge	r20,r17,80a2f8 <___vfprintf_internal_r+0x96c>
  80a320:	d9014f17 	ldw	r4,1340(sp)
  80a324:	b00b883a 	mov	r5,r22
  80a328:	d9800c04 	addi	r6,sp,48
  80a32c:	08099340 	call	809934 <__sprint_r>
  80a330:	103f4e1e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80a334:	dc800e17 	ldw	r18,56(sp)
  80a338:	dc400d17 	ldw	r17,52(sp)
  80a33c:	d8c01904 	addi	r3,sp,100
  80a340:	003fee06 	br	80a2fc <___vfprintf_internal_r+0x970>
  80a344:	d8802c0b 	ldhu	r2,176(sp)
  80a348:	00ffffc4 	movi	r3,-1
  80a34c:	d8c14b15 	stw	r3,1324(sp)
  80a350:	1080100c 	andi	r2,r2,64
  80a354:	103dcc1e 	bne	r2,zero,809a88 <___vfprintf_internal_r+0xfc>
  80a358:	003dce06 	br	809a94 <___vfprintf_internal_r+0x108>
  80a35c:	d9014f17 	ldw	r4,1340(sp)
  80a360:	b00b883a 	mov	r5,r22
  80a364:	d9800c04 	addi	r6,sp,48
  80a368:	08099340 	call	809934 <__sprint_r>
  80a36c:	103f3f1e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80a370:	dc800e17 	ldw	r18,56(sp)
  80a374:	003f2e06 	br	80a030 <___vfprintf_internal_r+0x6a4>
  80a378:	d9414c17 	ldw	r5,1328(sp)
  80a37c:	29400414 	ori	r5,r5,16
  80a380:	d9414c15 	stw	r5,1328(sp)
  80a384:	d9814c17 	ldw	r6,1328(sp)
  80a388:	3080080c 	andi	r2,r6,32
  80a38c:	10014f1e 	bne	r2,zero,80a8cc <___vfprintf_internal_r+0xf40>
  80a390:	d8c14c17 	ldw	r3,1328(sp)
  80a394:	1880040c 	andi	r2,r3,16
  80a398:	1002ea1e 	bne	r2,zero,80af44 <___vfprintf_internal_r+0x15b8>
  80a39c:	d9014c17 	ldw	r4,1328(sp)
  80a3a0:	2080100c 	andi	r2,r4,64
  80a3a4:	1002e726 	beq	r2,zero,80af44 <___vfprintf_internal_r+0x15b8>
  80a3a8:	3880000f 	ldh	r2,0(r7)
  80a3ac:	39c00104 	addi	r7,r7,4
  80a3b0:	d9c14015 	stw	r7,1280(sp)
  80a3b4:	1023d7fa 	srai	r17,r2,31
  80a3b8:	1021883a 	mov	r16,r2
  80a3bc:	88037216 	blt	r17,zero,80b188 <___vfprintf_internal_r+0x17fc>
  80a3c0:	01000044 	movi	r4,1
  80a3c4:	98000416 	blt	r19,zero,80a3d8 <___vfprintf_internal_r+0xa4c>
  80a3c8:	d8c14c17 	ldw	r3,1328(sp)
  80a3cc:	00bfdfc4 	movi	r2,-129
  80a3d0:	1886703a 	and	r3,r3,r2
  80a3d4:	d8c14c15 	stw	r3,1328(sp)
  80a3d8:	8444b03a 	or	r2,r16,r17
  80a3dc:	1002261e 	bne	r2,zero,80ac78 <___vfprintf_internal_r+0x12ec>
  80a3e0:	9802251e 	bne	r19,zero,80ac78 <___vfprintf_internal_r+0x12ec>
  80a3e4:	20803fcc 	andi	r2,r4,255
  80a3e8:	10029b26 	beq	r2,zero,80ae58 <___vfprintf_internal_r+0x14cc>
  80a3ec:	d8c01904 	addi	r3,sp,100
  80a3f0:	dd000f04 	addi	r20,sp,60
  80a3f4:	d8c14115 	stw	r3,1284(sp)
  80a3f8:	d8c14117 	ldw	r3,1284(sp)
  80a3fc:	dcc14515 	stw	r19,1300(sp)
  80a400:	a0c5c83a 	sub	r2,r20,r3
  80a404:	11c00a04 	addi	r7,r2,40
  80a408:	99c0010e 	bge	r19,r7,80a410 <___vfprintf_internal_r+0xa84>
  80a40c:	d9c14515 	stw	r7,1300(sp)
  80a410:	dcc14615 	stw	r19,1304(sp)
  80a414:	d8800407 	ldb	r2,16(sp)
  80a418:	103e4c26 	beq	r2,zero,809d4c <___vfprintf_internal_r+0x3c0>
  80a41c:	d8814517 	ldw	r2,1300(sp)
  80a420:	10800044 	addi	r2,r2,1
  80a424:	d8814515 	stw	r2,1300(sp)
  80a428:	003e4806 	br	809d4c <___vfprintf_internal_r+0x3c0>
  80a42c:	d9814c17 	ldw	r6,1328(sp)
  80a430:	31800414 	ori	r6,r6,16
  80a434:	d9814c15 	stw	r6,1328(sp)
  80a438:	d8c14c17 	ldw	r3,1328(sp)
  80a43c:	1880080c 	andi	r2,r3,32
  80a440:	1001271e 	bne	r2,zero,80a8e0 <___vfprintf_internal_r+0xf54>
  80a444:	d9414c17 	ldw	r5,1328(sp)
  80a448:	2880040c 	andi	r2,r5,16
  80a44c:	1002b61e 	bne	r2,zero,80af28 <___vfprintf_internal_r+0x159c>
  80a450:	d9814c17 	ldw	r6,1328(sp)
  80a454:	3080100c 	andi	r2,r6,64
  80a458:	1002b326 	beq	r2,zero,80af28 <___vfprintf_internal_r+0x159c>
  80a45c:	3c00000b 	ldhu	r16,0(r7)
  80a460:	0009883a 	mov	r4,zero
  80a464:	39c00104 	addi	r7,r7,4
  80a468:	0023883a 	mov	r17,zero
  80a46c:	d9c14015 	stw	r7,1280(sp)
  80a470:	d8000405 	stb	zero,16(sp)
  80a474:	003fd306 	br	80a3c4 <___vfprintf_internal_r+0xa38>
  80a478:	d9014c17 	ldw	r4,1328(sp)
  80a47c:	21000414 	ori	r4,r4,16
  80a480:	d9014c15 	stw	r4,1328(sp)
  80a484:	d9414c17 	ldw	r5,1328(sp)
  80a488:	2880080c 	andi	r2,r5,32
  80a48c:	1001081e 	bne	r2,zero,80a8b0 <___vfprintf_internal_r+0xf24>
  80a490:	d8c14c17 	ldw	r3,1328(sp)
  80a494:	1880040c 	andi	r2,r3,16
  80a498:	1002b01e 	bne	r2,zero,80af5c <___vfprintf_internal_r+0x15d0>
  80a49c:	d9014c17 	ldw	r4,1328(sp)
  80a4a0:	2080100c 	andi	r2,r4,64
  80a4a4:	1002ad26 	beq	r2,zero,80af5c <___vfprintf_internal_r+0x15d0>
  80a4a8:	3c00000b 	ldhu	r16,0(r7)
  80a4ac:	01000044 	movi	r4,1
  80a4b0:	39c00104 	addi	r7,r7,4
  80a4b4:	0023883a 	mov	r17,zero
  80a4b8:	d9c14015 	stw	r7,1280(sp)
  80a4bc:	d8000405 	stb	zero,16(sp)
  80a4c0:	003fc006 	br	80a3c4 <___vfprintf_internal_r+0xa38>
  80a4c4:	d9014f17 	ldw	r4,1340(sp)
  80a4c8:	b00b883a 	mov	r5,r22
  80a4cc:	d9800c04 	addi	r6,sp,48
  80a4d0:	08099340 	call	809934 <__sprint_r>
  80a4d4:	103ee51e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80a4d8:	dc800e17 	ldw	r18,56(sp)
  80a4dc:	d8c01904 	addi	r3,sp,100
  80a4e0:	d9814c17 	ldw	r6,1328(sp)
  80a4e4:	3080004c 	andi	r2,r6,1
  80a4e8:	1005003a 	cmpeq	r2,r2,zero
  80a4ec:	103ea51e 	bne	r2,zero,809f84 <___vfprintf_internal_r+0x5f8>
  80a4f0:	00800044 	movi	r2,1
  80a4f4:	dc400d17 	ldw	r17,52(sp)
  80a4f8:	18800115 	stw	r2,4(r3)
  80a4fc:	d8814917 	ldw	r2,1316(sp)
  80a500:	94800044 	addi	r18,r18,1
  80a504:	8c400044 	addi	r17,r17,1
  80a508:	18800015 	stw	r2,0(r3)
  80a50c:	008001c4 	movi	r2,7
  80a510:	dc800e15 	stw	r18,56(sp)
  80a514:	dc400d15 	stw	r17,52(sp)
  80a518:	14421e0e 	bge	r2,r17,80ad94 <___vfprintf_internal_r+0x1408>
  80a51c:	d9014f17 	ldw	r4,1340(sp)
  80a520:	b00b883a 	mov	r5,r22
  80a524:	d9800c04 	addi	r6,sp,48
  80a528:	08099340 	call	809934 <__sprint_r>
  80a52c:	103ecf1e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80a530:	dc800e17 	ldw	r18,56(sp)
  80a534:	d8c01904 	addi	r3,sp,100
  80a538:	003e9206 	br	809f84 <___vfprintf_internal_r+0x5f8>
  80a53c:	d9014f17 	ldw	r4,1340(sp)
  80a540:	b00b883a 	mov	r5,r22
  80a544:	d9800c04 	addi	r6,sp,48
  80a548:	08099340 	call	809934 <__sprint_r>
  80a54c:	103ec026 	beq	r2,zero,80a050 <___vfprintf_internal_r+0x6c4>
  80a550:	003ec606 	br	80a06c <___vfprintf_internal_r+0x6e0>
  80a554:	d9014f17 	ldw	r4,1340(sp)
  80a558:	b00b883a 	mov	r5,r22
  80a55c:	d9800c04 	addi	r6,sp,48
  80a560:	d9c15115 	stw	r7,1348(sp)
  80a564:	08099340 	call	809934 <__sprint_r>
  80a568:	d9c15117 	ldw	r7,1348(sp)
  80a56c:	103ebf1e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80a570:	dc800e17 	ldw	r18,56(sp)
  80a574:	dc400d17 	ldw	r17,52(sp)
  80a578:	dd401904 	addi	r21,sp,100
  80a57c:	003e7406 	br	809f50 <___vfprintf_internal_r+0x5c4>
  80a580:	d9014f17 	ldw	r4,1340(sp)
  80a584:	b00b883a 	mov	r5,r22
  80a588:	d9800c04 	addi	r6,sp,48
  80a58c:	d9c15115 	stw	r7,1348(sp)
  80a590:	08099340 	call	809934 <__sprint_r>
  80a594:	d9c15117 	ldw	r7,1348(sp)
  80a598:	103eb41e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80a59c:	dd401904 	addi	r21,sp,100
  80a5a0:	003d6d06 	br	809b58 <___vfprintf_internal_r+0x1cc>
  80a5a4:	d9014f17 	ldw	r4,1340(sp)
  80a5a8:	b00b883a 	mov	r5,r22
  80a5ac:	d9800c04 	addi	r6,sp,48
  80a5b0:	d9c15115 	stw	r7,1348(sp)
  80a5b4:	08099340 	call	809934 <__sprint_r>
  80a5b8:	d9c15117 	ldw	r7,1348(sp)
  80a5bc:	103eab1e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80a5c0:	dc800e17 	ldw	r18,56(sp)
  80a5c4:	dc400d17 	ldw	r17,52(sp)
  80a5c8:	dd401904 	addi	r21,sp,100
  80a5cc:	003e3406 	br	809ea0 <___vfprintf_internal_r+0x514>
  80a5d0:	d9014f17 	ldw	r4,1340(sp)
  80a5d4:	b00b883a 	mov	r5,r22
  80a5d8:	d9800c04 	addi	r6,sp,48
  80a5dc:	d9c15115 	stw	r7,1348(sp)
  80a5e0:	08099340 	call	809934 <__sprint_r>
  80a5e4:	d9c15117 	ldw	r7,1348(sp)
  80a5e8:	103ea01e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80a5ec:	dc800e17 	ldw	r18,56(sp)
  80a5f0:	dc400d17 	ldw	r17,52(sp)
  80a5f4:	dd401904 	addi	r21,sp,100
  80a5f8:	003e1c06 	br	809e6c <___vfprintf_internal_r+0x4e0>
  80a5fc:	d9014f17 	ldw	r4,1340(sp)
  80a600:	b00b883a 	mov	r5,r22
  80a604:	d9800c04 	addi	r6,sp,48
  80a608:	d9c15115 	stw	r7,1348(sp)
  80a60c:	08099340 	call	809934 <__sprint_r>
  80a610:	d9c15117 	ldw	r7,1348(sp)
  80a614:	103e951e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80a618:	dc800e17 	ldw	r18,56(sp)
  80a61c:	dc400d17 	ldw	r17,52(sp)
  80a620:	dd401904 	addi	r21,sp,100
  80a624:	003e0406 	br	809e38 <___vfprintf_internal_r+0x4ac>
  80a628:	d9000517 	ldw	r4,20(sp)
  80a62c:	0102520e 	bge	zero,r4,80af78 <___vfprintf_internal_r+0x15ec>
  80a630:	d9814717 	ldw	r6,1308(sp)
  80a634:	21807a16 	blt	r4,r6,80a820 <___vfprintf_internal_r+0xe94>
  80a638:	d8814117 	ldw	r2,1284(sp)
  80a63c:	91a5883a 	add	r18,r18,r6
  80a640:	8c400044 	addi	r17,r17,1
  80a644:	a8800015 	stw	r2,0(r21)
  80a648:	008001c4 	movi	r2,7
  80a64c:	a9800115 	stw	r6,4(r21)
  80a650:	dc800e15 	stw	r18,56(sp)
  80a654:	dc400d15 	stw	r17,52(sp)
  80a658:	1442f616 	blt	r2,r17,80b234 <___vfprintf_internal_r+0x18a8>
  80a65c:	a8c00204 	addi	r3,r21,8
  80a660:	d9414717 	ldw	r5,1308(sp)
  80a664:	2161c83a 	sub	r16,r4,r5
  80a668:	043f9d0e 	bge	zero,r16,80a4e0 <___vfprintf_internal_r+0xb54>
  80a66c:	00800404 	movi	r2,16
  80a670:	1402130e 	bge	r2,r16,80aec0 <___vfprintf_internal_r+0x1534>
  80a674:	dc400d17 	ldw	r17,52(sp)
  80a678:	1027883a 	mov	r19,r2
  80a67c:	070020b4 	movhi	fp,130
  80a680:	e7304384 	addi	fp,fp,-16114
  80a684:	050001c4 	movi	r20,7
  80a688:	00000306 	br	80a698 <___vfprintf_internal_r+0xd0c>
  80a68c:	18c00204 	addi	r3,r3,8
  80a690:	843ffc04 	addi	r16,r16,-16
  80a694:	9c020d0e 	bge	r19,r16,80aecc <___vfprintf_internal_r+0x1540>
  80a698:	94800404 	addi	r18,r18,16
  80a69c:	8c400044 	addi	r17,r17,1
  80a6a0:	1f000015 	stw	fp,0(r3)
  80a6a4:	1cc00115 	stw	r19,4(r3)
  80a6a8:	dc800e15 	stw	r18,56(sp)
  80a6ac:	dc400d15 	stw	r17,52(sp)
  80a6b0:	a47ff60e 	bge	r20,r17,80a68c <___vfprintf_internal_r+0xd00>
  80a6b4:	d9014f17 	ldw	r4,1340(sp)
  80a6b8:	b00b883a 	mov	r5,r22
  80a6bc:	d9800c04 	addi	r6,sp,48
  80a6c0:	08099340 	call	809934 <__sprint_r>
  80a6c4:	103e691e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80a6c8:	dc800e17 	ldw	r18,56(sp)
  80a6cc:	dc400d17 	ldw	r17,52(sp)
  80a6d0:	d8c01904 	addi	r3,sp,100
  80a6d4:	003fee06 	br	80a690 <___vfprintf_internal_r+0xd04>
  80a6d8:	d8814717 	ldw	r2,1308(sp)
  80a6dc:	143fffc4 	addi	r16,r2,-1
  80a6e0:	043e970e 	bge	zero,r16,80a140 <___vfprintf_internal_r+0x7b4>
  80a6e4:	00800404 	movi	r2,16
  80a6e8:	1400180e 	bge	r2,r16,80a74c <___vfprintf_internal_r+0xdc0>
  80a6ec:	1029883a 	mov	r20,r2
  80a6f0:	070020b4 	movhi	fp,130
  80a6f4:	e7304384 	addi	fp,fp,-16114
  80a6f8:	054001c4 	movi	r21,7
  80a6fc:	00000306 	br	80a70c <___vfprintf_internal_r+0xd80>
  80a700:	9cc00204 	addi	r19,r19,8
  80a704:	843ffc04 	addi	r16,r16,-16
  80a708:	a400120e 	bge	r20,r16,80a754 <___vfprintf_internal_r+0xdc8>
  80a70c:	94800404 	addi	r18,r18,16
  80a710:	8c400044 	addi	r17,r17,1
  80a714:	9f000015 	stw	fp,0(r19)
  80a718:	9d000115 	stw	r20,4(r19)
  80a71c:	dc800e15 	stw	r18,56(sp)
  80a720:	dc400d15 	stw	r17,52(sp)
  80a724:	ac7ff60e 	bge	r21,r17,80a700 <___vfprintf_internal_r+0xd74>
  80a728:	d9014f17 	ldw	r4,1340(sp)
  80a72c:	b00b883a 	mov	r5,r22
  80a730:	d9800c04 	addi	r6,sp,48
  80a734:	08099340 	call	809934 <__sprint_r>
  80a738:	103e4c1e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80a73c:	dc800e17 	ldw	r18,56(sp)
  80a740:	dc400d17 	ldw	r17,52(sp)
  80a744:	dcc01904 	addi	r19,sp,100
  80a748:	003fee06 	br	80a704 <___vfprintf_internal_r+0xd78>
  80a74c:	070020b4 	movhi	fp,130
  80a750:	e7304384 	addi	fp,fp,-16114
  80a754:	9425883a 	add	r18,r18,r16
  80a758:	8c400044 	addi	r17,r17,1
  80a75c:	008001c4 	movi	r2,7
  80a760:	9f000015 	stw	fp,0(r19)
  80a764:	9c000115 	stw	r16,4(r19)
  80a768:	dc800e15 	stw	r18,56(sp)
  80a76c:	dc400d15 	stw	r17,52(sp)
  80a770:	147e720e 	bge	r2,r17,80a13c <___vfprintf_internal_r+0x7b0>
  80a774:	d9014f17 	ldw	r4,1340(sp)
  80a778:	b00b883a 	mov	r5,r22
  80a77c:	d9800c04 	addi	r6,sp,48
  80a780:	08099340 	call	809934 <__sprint_r>
  80a784:	103e391e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80a788:	dc800e17 	ldw	r18,56(sp)
  80a78c:	dc400d17 	ldw	r17,52(sp)
  80a790:	dcc01904 	addi	r19,sp,100
  80a794:	003e6a06 	br	80a140 <___vfprintf_internal_r+0x7b4>
  80a798:	d9014f17 	ldw	r4,1340(sp)
  80a79c:	b00b883a 	mov	r5,r22
  80a7a0:	d9800c04 	addi	r6,sp,48
  80a7a4:	d9c15115 	stw	r7,1348(sp)
  80a7a8:	08099340 	call	809934 <__sprint_r>
  80a7ac:	d9c15117 	ldw	r7,1348(sp)
  80a7b0:	103e2e1e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80a7b4:	dc800e17 	ldw	r18,56(sp)
  80a7b8:	dc400d17 	ldw	r17,52(sp)
  80a7bc:	dd401904 	addi	r21,sp,100
  80a7c0:	003dba06 	br	809eac <___vfprintf_internal_r+0x520>
  80a7c4:	d9014f17 	ldw	r4,1340(sp)
  80a7c8:	b00b883a 	mov	r5,r22
  80a7cc:	d9800c04 	addi	r6,sp,48
  80a7d0:	08099340 	call	809934 <__sprint_r>
  80a7d4:	103e251e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80a7d8:	dc800e17 	ldw	r18,56(sp)
  80a7dc:	dc400d17 	ldw	r17,52(sp)
  80a7e0:	dcc01904 	addi	r19,sp,100
  80a7e4:	003e4206 	br	80a0f0 <___vfprintf_internal_r+0x764>
  80a7e8:	d9014f17 	ldw	r4,1340(sp)
  80a7ec:	b00b883a 	mov	r5,r22
  80a7f0:	d9800c04 	addi	r6,sp,48
  80a7f4:	08099340 	call	809934 <__sprint_r>
  80a7f8:	103e1c1e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80a7fc:	dc800e17 	ldw	r18,56(sp)
  80a800:	dc400d17 	ldw	r17,52(sp)
  80a804:	d8c01904 	addi	r3,sp,100
  80a808:	003e2e06 	br	80a0c4 <___vfprintf_internal_r+0x738>
  80a80c:	d9414c17 	ldw	r5,1328(sp)
  80a810:	2880004c 	andi	r2,r5,1
  80a814:	1005003a 	cmpeq	r2,r2,zero
  80a818:	103dda1e 	bne	r2,zero,809f84 <___vfprintf_internal_r+0x5f8>
  80a81c:	003e9f06 	br	80a29c <___vfprintf_internal_r+0x910>
  80a820:	d8c14117 	ldw	r3,1284(sp)
  80a824:	9125883a 	add	r18,r18,r4
  80a828:	8c400044 	addi	r17,r17,1
  80a82c:	008001c4 	movi	r2,7
  80a830:	a8c00015 	stw	r3,0(r21)
  80a834:	a9000115 	stw	r4,4(r21)
  80a838:	dc800e15 	stw	r18,56(sp)
  80a83c:	dc400d15 	stw	r17,52(sp)
  80a840:	14426616 	blt	r2,r17,80b1dc <___vfprintf_internal_r+0x1850>
  80a844:	a8c00204 	addi	r3,r21,8
  80a848:	d9414917 	ldw	r5,1316(sp)
  80a84c:	00800044 	movi	r2,1
  80a850:	94800044 	addi	r18,r18,1
  80a854:	8c400044 	addi	r17,r17,1
  80a858:	18800115 	stw	r2,4(r3)
  80a85c:	008001c4 	movi	r2,7
  80a860:	19400015 	stw	r5,0(r3)
  80a864:	dc800e15 	stw	r18,56(sp)
  80a868:	dc400d15 	stw	r17,52(sp)
  80a86c:	2021883a 	mov	r16,r4
  80a870:	14425016 	blt	r2,r17,80b1b4 <___vfprintf_internal_r+0x1828>
  80a874:	19400204 	addi	r5,r3,8
  80a878:	d9814717 	ldw	r6,1308(sp)
  80a87c:	8c400044 	addi	r17,r17,1
  80a880:	dc400d15 	stw	r17,52(sp)
  80a884:	3107c83a 	sub	r3,r6,r4
  80a888:	d9014117 	ldw	r4,1284(sp)
  80a88c:	90e5883a 	add	r18,r18,r3
  80a890:	28c00115 	stw	r3,4(r5)
  80a894:	8105883a 	add	r2,r16,r4
  80a898:	28800015 	stw	r2,0(r5)
  80a89c:	008001c4 	movi	r2,7
  80a8a0:	dc800e15 	stw	r18,56(sp)
  80a8a4:	147f1d16 	blt	r2,r17,80a51c <___vfprintf_internal_r+0xb90>
  80a8a8:	28c00204 	addi	r3,r5,8
  80a8ac:	003db506 	br	809f84 <___vfprintf_internal_r+0x5f8>
  80a8b0:	3c000017 	ldw	r16,0(r7)
  80a8b4:	3c400117 	ldw	r17,4(r7)
  80a8b8:	39800204 	addi	r6,r7,8
  80a8bc:	01000044 	movi	r4,1
  80a8c0:	d9814015 	stw	r6,1280(sp)
  80a8c4:	d8000405 	stb	zero,16(sp)
  80a8c8:	003ebe06 	br	80a3c4 <___vfprintf_internal_r+0xa38>
  80a8cc:	3c000017 	ldw	r16,0(r7)
  80a8d0:	3c400117 	ldw	r17,4(r7)
  80a8d4:	38800204 	addi	r2,r7,8
  80a8d8:	d8814015 	stw	r2,1280(sp)
  80a8dc:	003eb706 	br	80a3bc <___vfprintf_internal_r+0xa30>
  80a8e0:	3c000017 	ldw	r16,0(r7)
  80a8e4:	3c400117 	ldw	r17,4(r7)
  80a8e8:	39000204 	addi	r4,r7,8
  80a8ec:	d9014015 	stw	r4,1280(sp)
  80a8f0:	0009883a 	mov	r4,zero
  80a8f4:	d8000405 	stb	zero,16(sp)
  80a8f8:	003eb206 	br	80a3c4 <___vfprintf_internal_r+0xa38>
  80a8fc:	38c00017 	ldw	r3,0(r7)
  80a900:	39c00104 	addi	r7,r7,4
  80a904:	d8c14a15 	stw	r3,1320(sp)
  80a908:	1800d10e 	bge	r3,zero,80ac50 <___vfprintf_internal_r+0x12c4>
  80a90c:	00c7c83a 	sub	r3,zero,r3
  80a910:	d8c14a15 	stw	r3,1320(sp)
  80a914:	d9014c17 	ldw	r4,1328(sp)
  80a918:	b8c00007 	ldb	r3,0(r23)
  80a91c:	21000114 	ori	r4,r4,4
  80a920:	d9014c15 	stw	r4,1328(sp)
  80a924:	003c9806 	br	809b88 <___vfprintf_internal_r+0x1fc>
  80a928:	d9814c17 	ldw	r6,1328(sp)
  80a92c:	3080080c 	andi	r2,r6,32
  80a930:	1001f026 	beq	r2,zero,80b0f4 <___vfprintf_internal_r+0x1768>
  80a934:	d9014b17 	ldw	r4,1324(sp)
  80a938:	38800017 	ldw	r2,0(r7)
  80a93c:	39c00104 	addi	r7,r7,4
  80a940:	d9c14015 	stw	r7,1280(sp)
  80a944:	2007d7fa 	srai	r3,r4,31
  80a948:	d9c14017 	ldw	r7,1280(sp)
  80a94c:	11000015 	stw	r4,0(r2)
  80a950:	10c00115 	stw	r3,4(r2)
  80a954:	003c6906 	br	809afc <___vfprintf_internal_r+0x170>
  80a958:	b8c00007 	ldb	r3,0(r23)
  80a95c:	00801b04 	movi	r2,108
  80a960:	18824f26 	beq	r3,r2,80b2a0 <___vfprintf_internal_r+0x1914>
  80a964:	d9414c17 	ldw	r5,1328(sp)
  80a968:	29400414 	ori	r5,r5,16
  80a96c:	d9414c15 	stw	r5,1328(sp)
  80a970:	003c8506 	br	809b88 <___vfprintf_internal_r+0x1fc>
  80a974:	d9814c17 	ldw	r6,1328(sp)
  80a978:	b8c00007 	ldb	r3,0(r23)
  80a97c:	31800814 	ori	r6,r6,32
  80a980:	d9814c15 	stw	r6,1328(sp)
  80a984:	003c8006 	br	809b88 <___vfprintf_internal_r+0x1fc>
  80a988:	d8814c17 	ldw	r2,1328(sp)
  80a98c:	3c000017 	ldw	r16,0(r7)
  80a990:	00c01e04 	movi	r3,120
  80a994:	10800094 	ori	r2,r2,2
  80a998:	d8814c15 	stw	r2,1328(sp)
  80a99c:	39c00104 	addi	r7,r7,4
  80a9a0:	014020b4 	movhi	r5,130
  80a9a4:	29702c04 	addi	r5,r5,-16208
  80a9a8:	00800c04 	movi	r2,48
  80a9ac:	0023883a 	mov	r17,zero
  80a9b0:	01000084 	movi	r4,2
  80a9b4:	d9c14015 	stw	r7,1280(sp)
  80a9b8:	d8c14d15 	stw	r3,1332(sp)
  80a9bc:	d9414415 	stw	r5,1296(sp)
  80a9c0:	d8800445 	stb	r2,17(sp)
  80a9c4:	d8c00485 	stb	r3,18(sp)
  80a9c8:	d8000405 	stb	zero,16(sp)
  80a9cc:	003e7d06 	br	80a3c4 <___vfprintf_internal_r+0xa38>
  80a9d0:	d8814c17 	ldw	r2,1328(sp)
  80a9d4:	b8c00007 	ldb	r3,0(r23)
  80a9d8:	10801014 	ori	r2,r2,64
  80a9dc:	d8814c15 	stw	r2,1328(sp)
  80a9e0:	003c6906 	br	809b88 <___vfprintf_internal_r+0x1fc>
  80a9e4:	d9414c17 	ldw	r5,1328(sp)
  80a9e8:	2880020c 	andi	r2,r5,8
  80a9ec:	1001df26 	beq	r2,zero,80b16c <___vfprintf_internal_r+0x17e0>
  80a9f0:	39800017 	ldw	r6,0(r7)
  80a9f4:	38800204 	addi	r2,r7,8
  80a9f8:	d8814015 	stw	r2,1280(sp)
  80a9fc:	d9814215 	stw	r6,1288(sp)
  80aa00:	39c00117 	ldw	r7,4(r7)
  80aa04:	d9c14315 	stw	r7,1292(sp)
  80aa08:	d9014217 	ldw	r4,1288(sp)
  80aa0c:	d9414317 	ldw	r5,1292(sp)
  80aa10:	080fc600 	call	80fc60 <__isinfd>
  80aa14:	10021726 	beq	r2,zero,80b274 <___vfprintf_internal_r+0x18e8>
  80aa18:	d9014217 	ldw	r4,1288(sp)
  80aa1c:	d9414317 	ldw	r5,1292(sp)
  80aa20:	000d883a 	mov	r6,zero
  80aa24:	000f883a 	mov	r7,zero
  80aa28:	08082040 	call	808204 <__ltdf2>
  80aa2c:	1002ca16 	blt	r2,zero,80b558 <___vfprintf_internal_r+0x1bcc>
  80aa30:	d9414d17 	ldw	r5,1332(sp)
  80aa34:	008011c4 	movi	r2,71
  80aa38:	11420a16 	blt	r2,r5,80b264 <___vfprintf_internal_r+0x18d8>
  80aa3c:	018020b4 	movhi	r6,130
  80aa40:	31b03104 	addi	r6,r6,-16188
  80aa44:	d9814115 	stw	r6,1284(sp)
  80aa48:	d9014c17 	ldw	r4,1328(sp)
  80aa4c:	00c000c4 	movi	r3,3
  80aa50:	00bfdfc4 	movi	r2,-129
  80aa54:	2088703a 	and	r4,r4,r2
  80aa58:	180f883a 	mov	r7,r3
  80aa5c:	d8c14515 	stw	r3,1300(sp)
  80aa60:	d9014c15 	stw	r4,1328(sp)
  80aa64:	d8014615 	stw	zero,1304(sp)
  80aa68:	003e6a06 	br	80a414 <___vfprintf_internal_r+0xa88>
  80aa6c:	38800017 	ldw	r2,0(r7)
  80aa70:	00c00044 	movi	r3,1
  80aa74:	39c00104 	addi	r7,r7,4
  80aa78:	d9c14015 	stw	r7,1280(sp)
  80aa7c:	d9000f04 	addi	r4,sp,60
  80aa80:	180f883a 	mov	r7,r3
  80aa84:	d8c14515 	stw	r3,1300(sp)
  80aa88:	d9014115 	stw	r4,1284(sp)
  80aa8c:	d8800f05 	stb	r2,60(sp)
  80aa90:	d8000405 	stb	zero,16(sp)
  80aa94:	003cac06 	br	809d48 <___vfprintf_internal_r+0x3bc>
  80aa98:	014020b4 	movhi	r5,130
  80aa9c:	29703704 	addi	r5,r5,-16164
  80aaa0:	d9414415 	stw	r5,1296(sp)
  80aaa4:	d9814c17 	ldw	r6,1328(sp)
  80aaa8:	3080080c 	andi	r2,r6,32
  80aaac:	1000f926 	beq	r2,zero,80ae94 <___vfprintf_internal_r+0x1508>
  80aab0:	3c000017 	ldw	r16,0(r7)
  80aab4:	3c400117 	ldw	r17,4(r7)
  80aab8:	38800204 	addi	r2,r7,8
  80aabc:	d8814015 	stw	r2,1280(sp)
  80aac0:	d9414c17 	ldw	r5,1328(sp)
  80aac4:	2880004c 	andi	r2,r5,1
  80aac8:	1005003a 	cmpeq	r2,r2,zero
  80aacc:	1000b31e 	bne	r2,zero,80ad9c <___vfprintf_internal_r+0x1410>
  80aad0:	8444b03a 	or	r2,r16,r17
  80aad4:	1000b126 	beq	r2,zero,80ad9c <___vfprintf_internal_r+0x1410>
  80aad8:	d9814d17 	ldw	r6,1332(sp)
  80aadc:	29400094 	ori	r5,r5,2
  80aae0:	00800c04 	movi	r2,48
  80aae4:	01000084 	movi	r4,2
  80aae8:	d9414c15 	stw	r5,1328(sp)
  80aaec:	d8800445 	stb	r2,17(sp)
  80aaf0:	d9800485 	stb	r6,18(sp)
  80aaf4:	d8000405 	stb	zero,16(sp)
  80aaf8:	003e3206 	br	80a3c4 <___vfprintf_internal_r+0xa38>
  80aafc:	018020b4 	movhi	r6,130
  80ab00:	31b02c04 	addi	r6,r6,-16208
  80ab04:	d9814415 	stw	r6,1296(sp)
  80ab08:	003fe606 	br	80aaa4 <___vfprintf_internal_r+0x1118>
  80ab0c:	00800ac4 	movi	r2,43
  80ab10:	d8800405 	stb	r2,16(sp)
  80ab14:	b8c00007 	ldb	r3,0(r23)
  80ab18:	003c1b06 	br	809b88 <___vfprintf_internal_r+0x1fc>
  80ab1c:	d8814c17 	ldw	r2,1328(sp)
  80ab20:	b8c00007 	ldb	r3,0(r23)
  80ab24:	10800054 	ori	r2,r2,1
  80ab28:	d8814c15 	stw	r2,1328(sp)
  80ab2c:	003c1606 	br	809b88 <___vfprintf_internal_r+0x1fc>
  80ab30:	d8800407 	ldb	r2,16(sp)
  80ab34:	1000461e 	bne	r2,zero,80ac50 <___vfprintf_internal_r+0x12c4>
  80ab38:	00800804 	movi	r2,32
  80ab3c:	d8800405 	stb	r2,16(sp)
  80ab40:	b8c00007 	ldb	r3,0(r23)
  80ab44:	003c1006 	br	809b88 <___vfprintf_internal_r+0x1fc>
  80ab48:	d9814c17 	ldw	r6,1328(sp)
  80ab4c:	b8c00007 	ldb	r3,0(r23)
  80ab50:	31800214 	ori	r6,r6,8
  80ab54:	d9814c15 	stw	r6,1328(sp)
  80ab58:	003c0b06 	br	809b88 <___vfprintf_internal_r+0x1fc>
  80ab5c:	0007883a 	mov	r3,zero
  80ab60:	01000244 	movi	r4,9
  80ab64:	188002a4 	muli	r2,r3,10
  80ab68:	b8c00007 	ldb	r3,0(r23)
  80ab6c:	d9814d17 	ldw	r6,1332(sp)
  80ab70:	bdc00044 	addi	r23,r23,1
  80ab74:	d8c14d15 	stw	r3,1332(sp)
  80ab78:	d9414d17 	ldw	r5,1332(sp)
  80ab7c:	3085883a 	add	r2,r6,r2
  80ab80:	10fff404 	addi	r3,r2,-48
  80ab84:	28bff404 	addi	r2,r5,-48
  80ab88:	20bff62e 	bgeu	r4,r2,80ab64 <___vfprintf_internal_r+0x11d8>
  80ab8c:	d8c14a15 	stw	r3,1320(sp)
  80ab90:	003bff06 	br	809b90 <___vfprintf_internal_r+0x204>
  80ab94:	d9414c17 	ldw	r5,1328(sp)
  80ab98:	b8c00007 	ldb	r3,0(r23)
  80ab9c:	29402014 	ori	r5,r5,128
  80aba0:	d9414c15 	stw	r5,1328(sp)
  80aba4:	003bf806 	br	809b88 <___vfprintf_internal_r+0x1fc>
  80aba8:	b8c00007 	ldb	r3,0(r23)
  80abac:	00800a84 	movi	r2,42
  80abb0:	bdc00044 	addi	r23,r23,1
  80abb4:	18831526 	beq	r3,r2,80b80c <___vfprintf_internal_r+0x1e80>
  80abb8:	d8c14d15 	stw	r3,1332(sp)
  80abbc:	18bff404 	addi	r2,r3,-48
  80abc0:	00c00244 	movi	r3,9
  80abc4:	18827836 	bltu	r3,r2,80b5a8 <___vfprintf_internal_r+0x1c1c>
  80abc8:	000d883a 	mov	r6,zero
  80abcc:	308002a4 	muli	r2,r6,10
  80abd0:	b9800007 	ldb	r6,0(r23)
  80abd4:	d9414d17 	ldw	r5,1332(sp)
  80abd8:	bdc00044 	addi	r23,r23,1
  80abdc:	d9814d15 	stw	r6,1332(sp)
  80abe0:	d9014d17 	ldw	r4,1332(sp)
  80abe4:	1145883a 	add	r2,r2,r5
  80abe8:	11bff404 	addi	r6,r2,-48
  80abec:	20bff404 	addi	r2,r4,-48
  80abf0:	18bff62e 	bgeu	r3,r2,80abcc <___vfprintf_internal_r+0x1240>
  80abf4:	3027883a 	mov	r19,r6
  80abf8:	303be50e 	bge	r6,zero,809b90 <___vfprintf_internal_r+0x204>
  80abfc:	04ffffc4 	movi	r19,-1
  80ac00:	003be306 	br	809b90 <___vfprintf_internal_r+0x204>
  80ac04:	d8000405 	stb	zero,16(sp)
  80ac08:	39800017 	ldw	r6,0(r7)
  80ac0c:	39c00104 	addi	r7,r7,4
  80ac10:	d9c14015 	stw	r7,1280(sp)
  80ac14:	d9814115 	stw	r6,1284(sp)
  80ac18:	3001c926 	beq	r6,zero,80b340 <___vfprintf_internal_r+0x19b4>
  80ac1c:	98000e16 	blt	r19,zero,80ac58 <___vfprintf_internal_r+0x12cc>
  80ac20:	d9014117 	ldw	r4,1284(sp)
  80ac24:	000b883a 	mov	r5,zero
  80ac28:	980d883a 	mov	r6,r19
  80ac2c:	080e37c0 	call	80e37c <memchr>
  80ac30:	10025926 	beq	r2,zero,80b598 <___vfprintf_internal_r+0x1c0c>
  80ac34:	d8c14117 	ldw	r3,1284(sp)
  80ac38:	10cfc83a 	sub	r7,r2,r3
  80ac3c:	99c19e16 	blt	r19,r7,80b2b8 <___vfprintf_internal_r+0x192c>
  80ac40:	d9c14515 	stw	r7,1300(sp)
  80ac44:	38000916 	blt	r7,zero,80ac6c <___vfprintf_internal_r+0x12e0>
  80ac48:	d8014615 	stw	zero,1304(sp)
  80ac4c:	003df106 	br	80a414 <___vfprintf_internal_r+0xa88>
  80ac50:	b8c00007 	ldb	r3,0(r23)
  80ac54:	003bcc06 	br	809b88 <___vfprintf_internal_r+0x1fc>
  80ac58:	d9014117 	ldw	r4,1284(sp)
  80ac5c:	08098640 	call	809864 <strlen>
  80ac60:	d8814515 	stw	r2,1300(sp)
  80ac64:	100f883a 	mov	r7,r2
  80ac68:	103ff70e 	bge	r2,zero,80ac48 <___vfprintf_internal_r+0x12bc>
  80ac6c:	d8014515 	stw	zero,1300(sp)
  80ac70:	d8014615 	stw	zero,1304(sp)
  80ac74:	003de706 	br	80a414 <___vfprintf_internal_r+0xa88>
  80ac78:	20c03fcc 	andi	r3,r4,255
  80ac7c:	00800044 	movi	r2,1
  80ac80:	18802d26 	beq	r3,r2,80ad38 <___vfprintf_internal_r+0x13ac>
  80ac84:	18800e36 	bltu	r3,r2,80acc0 <___vfprintf_internal_r+0x1334>
  80ac88:	00800084 	movi	r2,2
  80ac8c:	1880fa26 	beq	r3,r2,80b078 <___vfprintf_internal_r+0x16ec>
  80ac90:	010020b4 	movhi	r4,130
  80ac94:	21303c04 	addi	r4,r4,-16144
  80ac98:	08098640 	call	809864 <strlen>
  80ac9c:	100f883a 	mov	r7,r2
  80aca0:	dcc14515 	stw	r19,1300(sp)
  80aca4:	9880010e 	bge	r19,r2,80acac <___vfprintf_internal_r+0x1320>
  80aca8:	d8814515 	stw	r2,1300(sp)
  80acac:	008020b4 	movhi	r2,130
  80acb0:	10b03c04 	addi	r2,r2,-16144
  80acb4:	dcc14615 	stw	r19,1304(sp)
  80acb8:	d8814115 	stw	r2,1284(sp)
  80acbc:	003dd506 	br	80a414 <___vfprintf_internal_r+0xa88>
  80acc0:	d9401904 	addi	r5,sp,100
  80acc4:	dd000f04 	addi	r20,sp,60
  80acc8:	d9414115 	stw	r5,1284(sp)
  80accc:	880a977a 	slli	r5,r17,29
  80acd0:	d9814117 	ldw	r6,1284(sp)
  80acd4:	8004d0fa 	srli	r2,r16,3
  80acd8:	8806d0fa 	srli	r3,r17,3
  80acdc:	810001cc 	andi	r4,r16,7
  80ace0:	2884b03a 	or	r2,r5,r2
  80ace4:	31bfffc4 	addi	r6,r6,-1
  80ace8:	21000c04 	addi	r4,r4,48
  80acec:	d9814115 	stw	r6,1284(sp)
  80acf0:	10cab03a 	or	r5,r2,r3
  80acf4:	31000005 	stb	r4,0(r6)
  80acf8:	1021883a 	mov	r16,r2
  80acfc:	1823883a 	mov	r17,r3
  80ad00:	283ff21e 	bne	r5,zero,80accc <___vfprintf_internal_r+0x1340>
  80ad04:	d8c14c17 	ldw	r3,1328(sp)
  80ad08:	1880004c 	andi	r2,r3,1
  80ad0c:	1005003a 	cmpeq	r2,r2,zero
  80ad10:	103db91e 	bne	r2,zero,80a3f8 <___vfprintf_internal_r+0xa6c>
  80ad14:	20803fcc 	andi	r2,r4,255
  80ad18:	1080201c 	xori	r2,r2,128
  80ad1c:	10bfe004 	addi	r2,r2,-128
  80ad20:	00c00c04 	movi	r3,48
  80ad24:	10fdb426 	beq	r2,r3,80a3f8 <___vfprintf_internal_r+0xa6c>
  80ad28:	31bfffc4 	addi	r6,r6,-1
  80ad2c:	d9814115 	stw	r6,1284(sp)
  80ad30:	30c00005 	stb	r3,0(r6)
  80ad34:	003db006 	br	80a3f8 <___vfprintf_internal_r+0xa6c>
  80ad38:	88800068 	cmpgeui	r2,r17,1
  80ad3c:	10002c1e 	bne	r2,zero,80adf0 <___vfprintf_internal_r+0x1464>
  80ad40:	8800021e 	bne	r17,zero,80ad4c <___vfprintf_internal_r+0x13c0>
  80ad44:	00800244 	movi	r2,9
  80ad48:	14002936 	bltu	r2,r16,80adf0 <___vfprintf_internal_r+0x1464>
  80ad4c:	d90018c4 	addi	r4,sp,99
  80ad50:	dd000f04 	addi	r20,sp,60
  80ad54:	d9014115 	stw	r4,1284(sp)
  80ad58:	d9014117 	ldw	r4,1284(sp)
  80ad5c:	80800c04 	addi	r2,r16,48
  80ad60:	20800005 	stb	r2,0(r4)
  80ad64:	003da406 	br	80a3f8 <___vfprintf_internal_r+0xa6c>
  80ad68:	dc400d17 	ldw	r17,52(sp)
  80ad6c:	070020b4 	movhi	fp,130
  80ad70:	e7304384 	addi	fp,fp,-16114
  80ad74:	9425883a 	add	r18,r18,r16
  80ad78:	8c400044 	addi	r17,r17,1
  80ad7c:	008001c4 	movi	r2,7
  80ad80:	1f000015 	stw	fp,0(r3)
  80ad84:	1c000115 	stw	r16,4(r3)
  80ad88:	dc800e15 	stw	r18,56(sp)
  80ad8c:	dc400d15 	stw	r17,52(sp)
  80ad90:	147de216 	blt	r2,r17,80a51c <___vfprintf_internal_r+0xb90>
  80ad94:	18c00204 	addi	r3,r3,8
  80ad98:	003c7a06 	br	809f84 <___vfprintf_internal_r+0x5f8>
  80ad9c:	01000084 	movi	r4,2
  80ada0:	d8000405 	stb	zero,16(sp)
  80ada4:	003d8706 	br	80a3c4 <___vfprintf_internal_r+0xa38>
  80ada8:	d9814c17 	ldw	r6,1328(sp)
  80adac:	30c4703a 	and	r2,r6,r3
  80adb0:	1005003a 	cmpeq	r2,r2,zero
  80adb4:	103cb926 	beq	r2,zero,80a09c <___vfprintf_internal_r+0x710>
  80adb8:	d9014117 	ldw	r4,1284(sp)
  80adbc:	94800044 	addi	r18,r18,1
  80adc0:	8c400044 	addi	r17,r17,1
  80adc4:	008001c4 	movi	r2,7
  80adc8:	a9000015 	stw	r4,0(r21)
  80adcc:	a8c00115 	stw	r3,4(r21)
  80add0:	dc800e15 	stw	r18,56(sp)
  80add4:	dc400d15 	stw	r17,52(sp)
  80add8:	147e6616 	blt	r2,r17,80a774 <___vfprintf_internal_r+0xde8>
  80addc:	acc00204 	addi	r19,r21,8
  80ade0:	003cd706 	br	80a140 <___vfprintf_internal_r+0x7b4>
  80ade4:	070020b4 	movhi	fp,130
  80ade8:	e7304384 	addi	fp,fp,-16114
  80adec:	003c4f06 	br	809f2c <___vfprintf_internal_r+0x5a0>
  80adf0:	dd000f04 	addi	r20,sp,60
  80adf4:	dc801904 	addi	r18,sp,100
  80adf8:	8009883a 	mov	r4,r16
  80adfc:	880b883a 	mov	r5,r17
  80ae00:	01800284 	movi	r6,10
  80ae04:	000f883a 	mov	r7,zero
  80ae08:	08109180 	call	810918 <__umoddi3>
  80ae0c:	12000c04 	addi	r8,r2,48
  80ae10:	94bfffc4 	addi	r18,r18,-1
  80ae14:	8009883a 	mov	r4,r16
  80ae18:	880b883a 	mov	r5,r17
  80ae1c:	01800284 	movi	r6,10
  80ae20:	000f883a 	mov	r7,zero
  80ae24:	92000005 	stb	r8,0(r18)
  80ae28:	081033c0 	call	81033c <__udivdi3>
  80ae2c:	1009883a 	mov	r4,r2
  80ae30:	1021883a 	mov	r16,r2
  80ae34:	18800068 	cmpgeui	r2,r3,1
  80ae38:	1823883a 	mov	r17,r3
  80ae3c:	103fee1e 	bne	r2,zero,80adf8 <___vfprintf_internal_r+0x146c>
  80ae40:	1800021e 	bne	r3,zero,80ae4c <___vfprintf_internal_r+0x14c0>
  80ae44:	00800244 	movi	r2,9
  80ae48:	113feb36 	bltu	r2,r4,80adf8 <___vfprintf_internal_r+0x146c>
  80ae4c:	94bfffc4 	addi	r18,r18,-1
  80ae50:	dc814115 	stw	r18,1284(sp)
  80ae54:	003fc006 	br	80ad58 <___vfprintf_internal_r+0x13cc>
  80ae58:	d9014c17 	ldw	r4,1328(sp)
  80ae5c:	2080004c 	andi	r2,r4,1
  80ae60:	10009a1e 	bne	r2,zero,80b0cc <___vfprintf_internal_r+0x1740>
  80ae64:	d9401904 	addi	r5,sp,100
  80ae68:	dd000f04 	addi	r20,sp,60
  80ae6c:	d9414115 	stw	r5,1284(sp)
  80ae70:	003d6106 	br	80a3f8 <___vfprintf_internal_r+0xa6c>
  80ae74:	d9014f17 	ldw	r4,1340(sp)
  80ae78:	b00b883a 	mov	r5,r22
  80ae7c:	d9800c04 	addi	r6,sp,48
  80ae80:	08099340 	call	809934 <__sprint_r>
  80ae84:	103c791e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80ae88:	dc800e17 	ldw	r18,56(sp)
  80ae8c:	d8c01904 	addi	r3,sp,100
  80ae90:	003cff06 	br	80a290 <___vfprintf_internal_r+0x904>
  80ae94:	d8c14c17 	ldw	r3,1328(sp)
  80ae98:	1880040c 	andi	r2,r3,16
  80ae9c:	1000711e 	bne	r2,zero,80b064 <___vfprintf_internal_r+0x16d8>
  80aea0:	d9014c17 	ldw	r4,1328(sp)
  80aea4:	2080100c 	andi	r2,r4,64
  80aea8:	10006e26 	beq	r2,zero,80b064 <___vfprintf_internal_r+0x16d8>
  80aeac:	3c00000b 	ldhu	r16,0(r7)
  80aeb0:	0023883a 	mov	r17,zero
  80aeb4:	39c00104 	addi	r7,r7,4
  80aeb8:	d9c14015 	stw	r7,1280(sp)
  80aebc:	003f0006 	br	80aac0 <___vfprintf_internal_r+0x1134>
  80aec0:	dc400d17 	ldw	r17,52(sp)
  80aec4:	070020b4 	movhi	fp,130
  80aec8:	e7304384 	addi	fp,fp,-16114
  80aecc:	9425883a 	add	r18,r18,r16
  80aed0:	8c400044 	addi	r17,r17,1
  80aed4:	008001c4 	movi	r2,7
  80aed8:	1f000015 	stw	fp,0(r3)
  80aedc:	1c000115 	stw	r16,4(r3)
  80aee0:	dc800e15 	stw	r18,56(sp)
  80aee4:	dc400d15 	stw	r17,52(sp)
  80aee8:	147d7616 	blt	r2,r17,80a4c4 <___vfprintf_internal_r+0xb38>
  80aeec:	18c00204 	addi	r3,r3,8
  80aef0:	003d7b06 	br	80a4e0 <___vfprintf_internal_r+0xb54>
  80aef4:	dc800e17 	ldw	r18,56(sp)
  80aef8:	dc400d17 	ldw	r17,52(sp)
  80aefc:	070020b4 	movhi	fp,130
  80af00:	e7304784 	addi	fp,fp,-16098
  80af04:	003bc006 	br	809e08 <___vfprintf_internal_r+0x47c>
  80af08:	d9014f17 	ldw	r4,1340(sp)
  80af0c:	b00b883a 	mov	r5,r22
  80af10:	d9800c04 	addi	r6,sp,48
  80af14:	08099340 	call	809934 <__sprint_r>
  80af18:	103c541e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80af1c:	dc800e17 	ldw	r18,56(sp)
  80af20:	d8c01904 	addi	r3,sp,100
  80af24:	003ce906 	br	80a2cc <___vfprintf_internal_r+0x940>
  80af28:	3c000017 	ldw	r16,0(r7)
  80af2c:	0009883a 	mov	r4,zero
  80af30:	39c00104 	addi	r7,r7,4
  80af34:	0023883a 	mov	r17,zero
  80af38:	d9c14015 	stw	r7,1280(sp)
  80af3c:	d8000405 	stb	zero,16(sp)
  80af40:	003d2006 	br	80a3c4 <___vfprintf_internal_r+0xa38>
  80af44:	38800017 	ldw	r2,0(r7)
  80af48:	39c00104 	addi	r7,r7,4
  80af4c:	d9c14015 	stw	r7,1280(sp)
  80af50:	1023d7fa 	srai	r17,r2,31
  80af54:	1021883a 	mov	r16,r2
  80af58:	003d1806 	br	80a3bc <___vfprintf_internal_r+0xa30>
  80af5c:	3c000017 	ldw	r16,0(r7)
  80af60:	01000044 	movi	r4,1
  80af64:	39c00104 	addi	r7,r7,4
  80af68:	0023883a 	mov	r17,zero
  80af6c:	d9c14015 	stw	r7,1280(sp)
  80af70:	d8000405 	stb	zero,16(sp)
  80af74:	003d1306 	br	80a3c4 <___vfprintf_internal_r+0xa38>
  80af78:	008020b4 	movhi	r2,130
  80af7c:	10b04304 	addi	r2,r2,-16116
  80af80:	94800044 	addi	r18,r18,1
  80af84:	8c400044 	addi	r17,r17,1
  80af88:	a8800015 	stw	r2,0(r21)
  80af8c:	00c00044 	movi	r3,1
  80af90:	008001c4 	movi	r2,7
  80af94:	a8c00115 	stw	r3,4(r21)
  80af98:	dc800e15 	stw	r18,56(sp)
  80af9c:	dc400d15 	stw	r17,52(sp)
  80afa0:	1440ca16 	blt	r2,r17,80b2cc <___vfprintf_internal_r+0x1940>
  80afa4:	a8c00204 	addi	r3,r21,8
  80afa8:	2000061e 	bne	r4,zero,80afc4 <___vfprintf_internal_r+0x1638>
  80afac:	d9414717 	ldw	r5,1308(sp)
  80afb0:	2800041e 	bne	r5,zero,80afc4 <___vfprintf_internal_r+0x1638>
  80afb4:	d9814c17 	ldw	r6,1328(sp)
  80afb8:	3080004c 	andi	r2,r6,1
  80afbc:	1005003a 	cmpeq	r2,r2,zero
  80afc0:	103bf01e 	bne	r2,zero,809f84 <___vfprintf_internal_r+0x5f8>
  80afc4:	00800044 	movi	r2,1
  80afc8:	dc400d17 	ldw	r17,52(sp)
  80afcc:	18800115 	stw	r2,4(r3)
  80afd0:	d8814917 	ldw	r2,1316(sp)
  80afd4:	94800044 	addi	r18,r18,1
  80afd8:	8c400044 	addi	r17,r17,1
  80afdc:	18800015 	stw	r2,0(r3)
  80afe0:	008001c4 	movi	r2,7
  80afe4:	dc800e15 	stw	r18,56(sp)
  80afe8:	dc400d15 	stw	r17,52(sp)
  80afec:	1440ca16 	blt	r2,r17,80b318 <___vfprintf_internal_r+0x198c>
  80aff0:	18c00204 	addi	r3,r3,8
  80aff4:	0121c83a 	sub	r16,zero,r4
  80aff8:	0400500e 	bge	zero,r16,80b13c <___vfprintf_internal_r+0x17b0>
  80affc:	00800404 	movi	r2,16
  80b000:	1400800e 	bge	r2,r16,80b204 <___vfprintf_internal_r+0x1878>
  80b004:	1027883a 	mov	r19,r2
  80b008:	070020b4 	movhi	fp,130
  80b00c:	e7304384 	addi	fp,fp,-16114
  80b010:	050001c4 	movi	r20,7
  80b014:	00000306 	br	80b024 <___vfprintf_internal_r+0x1698>
  80b018:	18c00204 	addi	r3,r3,8
  80b01c:	843ffc04 	addi	r16,r16,-16
  80b020:	9c007a0e 	bge	r19,r16,80b20c <___vfprintf_internal_r+0x1880>
  80b024:	94800404 	addi	r18,r18,16
  80b028:	8c400044 	addi	r17,r17,1
  80b02c:	1f000015 	stw	fp,0(r3)
  80b030:	1cc00115 	stw	r19,4(r3)
  80b034:	dc800e15 	stw	r18,56(sp)
  80b038:	dc400d15 	stw	r17,52(sp)
  80b03c:	a47ff60e 	bge	r20,r17,80b018 <___vfprintf_internal_r+0x168c>
  80b040:	d9014f17 	ldw	r4,1340(sp)
  80b044:	b00b883a 	mov	r5,r22
  80b048:	d9800c04 	addi	r6,sp,48
  80b04c:	08099340 	call	809934 <__sprint_r>
  80b050:	103c061e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80b054:	dc800e17 	ldw	r18,56(sp)
  80b058:	dc400d17 	ldw	r17,52(sp)
  80b05c:	d8c01904 	addi	r3,sp,100
  80b060:	003fee06 	br	80b01c <___vfprintf_internal_r+0x1690>
  80b064:	3c000017 	ldw	r16,0(r7)
  80b068:	0023883a 	mov	r17,zero
  80b06c:	39c00104 	addi	r7,r7,4
  80b070:	d9c14015 	stw	r7,1280(sp)
  80b074:	003e9206 	br	80aac0 <___vfprintf_internal_r+0x1134>
  80b078:	d9401904 	addi	r5,sp,100
  80b07c:	dd000f04 	addi	r20,sp,60
  80b080:	d9414115 	stw	r5,1284(sp)
  80b084:	d9814417 	ldw	r6,1296(sp)
  80b088:	880a973a 	slli	r5,r17,28
  80b08c:	8004d13a 	srli	r2,r16,4
  80b090:	810003cc 	andi	r4,r16,15
  80b094:	3109883a 	add	r4,r6,r4
  80b098:	2884b03a 	or	r2,r5,r2
  80b09c:	21400003 	ldbu	r5,0(r4)
  80b0a0:	d9014117 	ldw	r4,1284(sp)
  80b0a4:	8806d13a 	srli	r3,r17,4
  80b0a8:	1021883a 	mov	r16,r2
  80b0ac:	213fffc4 	addi	r4,r4,-1
  80b0b0:	d9014115 	stw	r4,1284(sp)
  80b0b4:	d9814117 	ldw	r6,1284(sp)
  80b0b8:	10c8b03a 	or	r4,r2,r3
  80b0bc:	1823883a 	mov	r17,r3
  80b0c0:	31400005 	stb	r5,0(r6)
  80b0c4:	203fef1e 	bne	r4,zero,80b084 <___vfprintf_internal_r+0x16f8>
  80b0c8:	003ccb06 	br	80a3f8 <___vfprintf_internal_r+0xa6c>
  80b0cc:	00800c04 	movi	r2,48
  80b0d0:	d98018c4 	addi	r6,sp,99
  80b0d4:	dd000f04 	addi	r20,sp,60
  80b0d8:	d88018c5 	stb	r2,99(sp)
  80b0dc:	d9814115 	stw	r6,1284(sp)
  80b0e0:	003cc506 	br	80a3f8 <___vfprintf_internal_r+0xa6c>
  80b0e4:	dc400d17 	ldw	r17,52(sp)
  80b0e8:	070020b4 	movhi	fp,130
  80b0ec:	e7304784 	addi	fp,fp,-16098
  80b0f0:	003bc706 	br	80a010 <___vfprintf_internal_r+0x684>
  80b0f4:	d9414c17 	ldw	r5,1328(sp)
  80b0f8:	2880040c 	andi	r2,r5,16
  80b0fc:	10007c26 	beq	r2,zero,80b2f0 <___vfprintf_internal_r+0x1964>
  80b100:	38800017 	ldw	r2,0(r7)
  80b104:	39c00104 	addi	r7,r7,4
  80b108:	d9c14015 	stw	r7,1280(sp)
  80b10c:	d9814b17 	ldw	r6,1324(sp)
  80b110:	d9c14017 	ldw	r7,1280(sp)
  80b114:	11800015 	stw	r6,0(r2)
  80b118:	003a7806 	br	809afc <___vfprintf_internal_r+0x170>
  80b11c:	d9014f17 	ldw	r4,1340(sp)
  80b120:	b00b883a 	mov	r5,r22
  80b124:	d9800c04 	addi	r6,sp,48
  80b128:	08099340 	call	809934 <__sprint_r>
  80b12c:	103bcf1e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80b130:	dc800e17 	ldw	r18,56(sp)
  80b134:	dc400d17 	ldw	r17,52(sp)
  80b138:	d8c01904 	addi	r3,sp,100
  80b13c:	d9014717 	ldw	r4,1308(sp)
  80b140:	d9414117 	ldw	r5,1284(sp)
  80b144:	8c400044 	addi	r17,r17,1
  80b148:	9125883a 	add	r18,r18,r4
  80b14c:	008001c4 	movi	r2,7
  80b150:	19400015 	stw	r5,0(r3)
  80b154:	19000115 	stw	r4,4(r3)
  80b158:	dc800e15 	stw	r18,56(sp)
  80b15c:	dc400d15 	stw	r17,52(sp)
  80b160:	147cee16 	blt	r2,r17,80a51c <___vfprintf_internal_r+0xb90>
  80b164:	18c00204 	addi	r3,r3,8
  80b168:	003b8606 	br	809f84 <___vfprintf_internal_r+0x5f8>
  80b16c:	38c00017 	ldw	r3,0(r7)
  80b170:	39000204 	addi	r4,r7,8
  80b174:	d9014015 	stw	r4,1280(sp)
  80b178:	d8c14215 	stw	r3,1288(sp)
  80b17c:	39c00117 	ldw	r7,4(r7)
  80b180:	d9c14315 	stw	r7,1292(sp)
  80b184:	003e2006 	br	80aa08 <___vfprintf_internal_r+0x107c>
  80b188:	0005883a 	mov	r2,zero
  80b18c:	1409c83a 	sub	r4,r2,r16
  80b190:	1105803a 	cmpltu	r2,r2,r4
  80b194:	044bc83a 	sub	r5,zero,r17
  80b198:	2885c83a 	sub	r2,r5,r2
  80b19c:	2021883a 	mov	r16,r4
  80b1a0:	1023883a 	mov	r17,r2
  80b1a4:	01000044 	movi	r4,1
  80b1a8:	00800b44 	movi	r2,45
  80b1ac:	d8800405 	stb	r2,16(sp)
  80b1b0:	003c8406 	br	80a3c4 <___vfprintf_internal_r+0xa38>
  80b1b4:	d9014f17 	ldw	r4,1340(sp)
  80b1b8:	b00b883a 	mov	r5,r22
  80b1bc:	d9800c04 	addi	r6,sp,48
  80b1c0:	08099340 	call	809934 <__sprint_r>
  80b1c4:	103ba91e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80b1c8:	dc800e17 	ldw	r18,56(sp)
  80b1cc:	dc400d17 	ldw	r17,52(sp)
  80b1d0:	d9000517 	ldw	r4,20(sp)
  80b1d4:	d9401904 	addi	r5,sp,100
  80b1d8:	003da706 	br	80a878 <___vfprintf_internal_r+0xeec>
  80b1dc:	d9014f17 	ldw	r4,1340(sp)
  80b1e0:	b00b883a 	mov	r5,r22
  80b1e4:	d9800c04 	addi	r6,sp,48
  80b1e8:	08099340 	call	809934 <__sprint_r>
  80b1ec:	103b9f1e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80b1f0:	dc800e17 	ldw	r18,56(sp)
  80b1f4:	dc400d17 	ldw	r17,52(sp)
  80b1f8:	d9000517 	ldw	r4,20(sp)
  80b1fc:	d8c01904 	addi	r3,sp,100
  80b200:	003d9106 	br	80a848 <___vfprintf_internal_r+0xebc>
  80b204:	070020b4 	movhi	fp,130
  80b208:	e7304384 	addi	fp,fp,-16114
  80b20c:	9425883a 	add	r18,r18,r16
  80b210:	8c400044 	addi	r17,r17,1
  80b214:	008001c4 	movi	r2,7
  80b218:	1f000015 	stw	fp,0(r3)
  80b21c:	1c000115 	stw	r16,4(r3)
  80b220:	dc800e15 	stw	r18,56(sp)
  80b224:	dc400d15 	stw	r17,52(sp)
  80b228:	147fbc16 	blt	r2,r17,80b11c <___vfprintf_internal_r+0x1790>
  80b22c:	18c00204 	addi	r3,r3,8
  80b230:	003fc206 	br	80b13c <___vfprintf_internal_r+0x17b0>
  80b234:	d9014f17 	ldw	r4,1340(sp)
  80b238:	b00b883a 	mov	r5,r22
  80b23c:	d9800c04 	addi	r6,sp,48
  80b240:	08099340 	call	809934 <__sprint_r>
  80b244:	103b891e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80b248:	dc800e17 	ldw	r18,56(sp)
  80b24c:	d9000517 	ldw	r4,20(sp)
  80b250:	d8c01904 	addi	r3,sp,100
  80b254:	003d0206 	br	80a660 <___vfprintf_internal_r+0xcd4>
  80b258:	070020b4 	movhi	fp,130
  80b25c:	e7304384 	addi	fp,fp,-16114
  80b260:	003be406 	br	80a1f4 <___vfprintf_internal_r+0x868>
  80b264:	008020b4 	movhi	r2,130
  80b268:	10b03204 	addi	r2,r2,-16184
  80b26c:	d8814115 	stw	r2,1284(sp)
  80b270:	003df506 	br	80aa48 <___vfprintf_internal_r+0x10bc>
  80b274:	d9014217 	ldw	r4,1288(sp)
  80b278:	d9414317 	ldw	r5,1292(sp)
  80b27c:	0806e900 	call	806e90 <__isnand>
  80b280:	10003926 	beq	r2,zero,80b368 <___vfprintf_internal_r+0x19dc>
  80b284:	d9414d17 	ldw	r5,1332(sp)
  80b288:	008011c4 	movi	r2,71
  80b28c:	1140ce16 	blt	r2,r5,80b5c8 <___vfprintf_internal_r+0x1c3c>
  80b290:	018020b4 	movhi	r6,130
  80b294:	31b03304 	addi	r6,r6,-16180
  80b298:	d9814115 	stw	r6,1284(sp)
  80b29c:	003dea06 	br	80aa48 <___vfprintf_internal_r+0x10bc>
  80b2a0:	d9014c17 	ldw	r4,1328(sp)
  80b2a4:	bdc00044 	addi	r23,r23,1
  80b2a8:	b8c00007 	ldb	r3,0(r23)
  80b2ac:	21000814 	ori	r4,r4,32
  80b2b0:	d9014c15 	stw	r4,1328(sp)
  80b2b4:	003a3406 	br	809b88 <___vfprintf_internal_r+0x1fc>
  80b2b8:	dcc14515 	stw	r19,1300(sp)
  80b2bc:	98011016 	blt	r19,zero,80b700 <___vfprintf_internal_r+0x1d74>
  80b2c0:	980f883a 	mov	r7,r19
  80b2c4:	d8014615 	stw	zero,1304(sp)
  80b2c8:	003c5206 	br	80a414 <___vfprintf_internal_r+0xa88>
  80b2cc:	d9014f17 	ldw	r4,1340(sp)
  80b2d0:	b00b883a 	mov	r5,r22
  80b2d4:	d9800c04 	addi	r6,sp,48
  80b2d8:	08099340 	call	809934 <__sprint_r>
  80b2dc:	103b631e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80b2e0:	dc800e17 	ldw	r18,56(sp)
  80b2e4:	d9000517 	ldw	r4,20(sp)
  80b2e8:	d8c01904 	addi	r3,sp,100
  80b2ec:	003f2e06 	br	80afa8 <___vfprintf_internal_r+0x161c>
  80b2f0:	d8c14c17 	ldw	r3,1328(sp)
  80b2f4:	1880100c 	andi	r2,r3,64
  80b2f8:	1000a026 	beq	r2,zero,80b57c <___vfprintf_internal_r+0x1bf0>
  80b2fc:	38800017 	ldw	r2,0(r7)
  80b300:	39c00104 	addi	r7,r7,4
  80b304:	d9c14015 	stw	r7,1280(sp)
  80b308:	d9014b17 	ldw	r4,1324(sp)
  80b30c:	d9c14017 	ldw	r7,1280(sp)
  80b310:	1100000d 	sth	r4,0(r2)
  80b314:	0039f906 	br	809afc <___vfprintf_internal_r+0x170>
  80b318:	d9014f17 	ldw	r4,1340(sp)
  80b31c:	b00b883a 	mov	r5,r22
  80b320:	d9800c04 	addi	r6,sp,48
  80b324:	08099340 	call	809934 <__sprint_r>
  80b328:	103b501e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80b32c:	dc800e17 	ldw	r18,56(sp)
  80b330:	dc400d17 	ldw	r17,52(sp)
  80b334:	d9000517 	ldw	r4,20(sp)
  80b338:	d8c01904 	addi	r3,sp,100
  80b33c:	003f2d06 	br	80aff4 <___vfprintf_internal_r+0x1668>
  80b340:	00800184 	movi	r2,6
  80b344:	14c09a36 	bltu	r2,r19,80b5b0 <___vfprintf_internal_r+0x1c24>
  80b348:	dcc14515 	stw	r19,1300(sp)
  80b34c:	9800010e 	bge	r19,zero,80b354 <___vfprintf_internal_r+0x19c8>
  80b350:	d8014515 	stw	zero,1300(sp)
  80b354:	008020b4 	movhi	r2,130
  80b358:	10b03504 	addi	r2,r2,-16172
  80b35c:	980f883a 	mov	r7,r19
  80b360:	d8814115 	stw	r2,1284(sp)
  80b364:	003a7806 	br	809d48 <___vfprintf_internal_r+0x3bc>
  80b368:	00bfffc4 	movi	r2,-1
  80b36c:	9880e226 	beq	r19,r2,80b6f8 <___vfprintf_internal_r+0x1d6c>
  80b370:	d9414d17 	ldw	r5,1332(sp)
  80b374:	008019c4 	movi	r2,103
  80b378:	2880dc26 	beq	r5,r2,80b6ec <___vfprintf_internal_r+0x1d60>
  80b37c:	008011c4 	movi	r2,71
  80b380:	2880da26 	beq	r5,r2,80b6ec <___vfprintf_internal_r+0x1d60>
  80b384:	d9414c17 	ldw	r5,1328(sp)
  80b388:	d9014317 	ldw	r4,1292(sp)
  80b38c:	d9814217 	ldw	r6,1288(sp)
  80b390:	29404014 	ori	r5,r5,256
  80b394:	d9414c15 	stw	r5,1328(sp)
  80b398:	2000cc16 	blt	r4,zero,80b6cc <___vfprintf_internal_r+0x1d40>
  80b39c:	3021883a 	mov	r16,r6
  80b3a0:	2023883a 	mov	r17,r4
  80b3a4:	0039883a 	mov	fp,zero
  80b3a8:	d9414d17 	ldw	r5,1332(sp)
  80b3ac:	00801984 	movi	r2,102
  80b3b0:	2880b726 	beq	r5,r2,80b690 <___vfprintf_internal_r+0x1d04>
  80b3b4:	00801184 	movi	r2,70
  80b3b8:	2880b526 	beq	r5,r2,80b690 <___vfprintf_internal_r+0x1d04>
  80b3bc:	00801944 	movi	r2,101
  80b3c0:	2880c826 	beq	r5,r2,80b6e4 <___vfprintf_internal_r+0x1d58>
  80b3c4:	00801144 	movi	r2,69
  80b3c8:	2880c626 	beq	r5,r2,80b6e4 <___vfprintf_internal_r+0x1d58>
  80b3cc:	9829883a 	mov	r20,r19
  80b3d0:	d9014f17 	ldw	r4,1340(sp)
  80b3d4:	d8800504 	addi	r2,sp,20
  80b3d8:	880d883a 	mov	r6,r17
  80b3dc:	d8800115 	stw	r2,4(sp)
  80b3e0:	d8c00604 	addi	r3,sp,24
  80b3e4:	d8800704 	addi	r2,sp,28
  80b3e8:	800b883a 	mov	r5,r16
  80b3ec:	01c00084 	movi	r7,2
  80b3f0:	d8c00215 	stw	r3,8(sp)
  80b3f4:	d8800315 	stw	r2,12(sp)
  80b3f8:	dd000015 	stw	r20,0(sp)
  80b3fc:	080bbb00 	call	80bbb0 <_dtoa_r>
  80b400:	d9814d17 	ldw	r6,1332(sp)
  80b404:	d8814115 	stw	r2,1284(sp)
  80b408:	008019c4 	movi	r2,103
  80b40c:	30809526 	beq	r6,r2,80b664 <___vfprintf_internal_r+0x1cd8>
  80b410:	d8c14d17 	ldw	r3,1332(sp)
  80b414:	008011c4 	movi	r2,71
  80b418:	18809226 	beq	r3,r2,80b664 <___vfprintf_internal_r+0x1cd8>
  80b41c:	d9414117 	ldw	r5,1284(sp)
  80b420:	d9814d17 	ldw	r6,1332(sp)
  80b424:	00801984 	movi	r2,102
  80b428:	2d25883a 	add	r18,r5,r20
  80b42c:	30808626 	beq	r6,r2,80b648 <___vfprintf_internal_r+0x1cbc>
  80b430:	00801184 	movi	r2,70
  80b434:	30808426 	beq	r6,r2,80b648 <___vfprintf_internal_r+0x1cbc>
  80b438:	000d883a 	mov	r6,zero
  80b43c:	000f883a 	mov	r7,zero
  80b440:	880b883a 	mov	r5,r17
  80b444:	8009883a 	mov	r4,r16
  80b448:	080806c0 	call	80806c <__eqdf2>
  80b44c:	1000751e 	bne	r2,zero,80b624 <___vfprintf_internal_r+0x1c98>
  80b450:	9005883a 	mov	r2,r18
  80b454:	dc800715 	stw	r18,28(sp)
  80b458:	d9014117 	ldw	r4,1284(sp)
  80b45c:	d9414d17 	ldw	r5,1332(sp)
  80b460:	00c019c4 	movi	r3,103
  80b464:	1125c83a 	sub	r18,r2,r4
  80b468:	28c06826 	beq	r5,r3,80b60c <___vfprintf_internal_r+0x1c80>
  80b46c:	008011c4 	movi	r2,71
  80b470:	28806626 	beq	r5,r2,80b60c <___vfprintf_internal_r+0x1c80>
  80b474:	d9000517 	ldw	r4,20(sp)
  80b478:	d8c14d17 	ldw	r3,1332(sp)
  80b47c:	00801944 	movi	r2,101
  80b480:	10c05516 	blt	r2,r3,80b5d8 <___vfprintf_internal_r+0x1c4c>
  80b484:	213fffc4 	addi	r4,r4,-1
  80b488:	d9000515 	stw	r4,20(sp)
  80b48c:	d8c00805 	stb	r3,32(sp)
  80b490:	2021883a 	mov	r16,r4
  80b494:	2000c116 	blt	r4,zero,80b79c <___vfprintf_internal_r+0x1e10>
  80b498:	00800ac4 	movi	r2,43
  80b49c:	d8800845 	stb	r2,33(sp)
  80b4a0:	00800244 	movi	r2,9
  80b4a4:	1400af0e 	bge	r2,r16,80b764 <___vfprintf_internal_r+0x1dd8>
  80b4a8:	1027883a 	mov	r19,r2
  80b4ac:	dc400b84 	addi	r17,sp,46
  80b4b0:	8009883a 	mov	r4,r16
  80b4b4:	01400284 	movi	r5,10
  80b4b8:	08085f80 	call	8085f8 <__modsi3>
  80b4bc:	10800c04 	addi	r2,r2,48
  80b4c0:	8c7fffc4 	addi	r17,r17,-1
  80b4c4:	8009883a 	mov	r4,r16
  80b4c8:	01400284 	movi	r5,10
  80b4cc:	88800005 	stb	r2,0(r17)
  80b4d0:	08085980 	call	808598 <__divsi3>
  80b4d4:	1021883a 	mov	r16,r2
  80b4d8:	98bff516 	blt	r19,r2,80b4b0 <___vfprintf_internal_r+0x1b24>
  80b4dc:	10c00c04 	addi	r3,r2,48
  80b4e0:	d88009c4 	addi	r2,sp,39
  80b4e4:	108001c4 	addi	r2,r2,7
  80b4e8:	897fffc4 	addi	r5,r17,-1
  80b4ec:	88ffffc5 	stb	r3,-1(r17)
  80b4f0:	2880a72e 	bgeu	r5,r2,80b790 <___vfprintf_internal_r+0x1e04>
  80b4f4:	1009883a 	mov	r4,r2
  80b4f8:	d9800804 	addi	r6,sp,32
  80b4fc:	d8c00884 	addi	r3,sp,34
  80b500:	28800003 	ldbu	r2,0(r5)
  80b504:	29400044 	addi	r5,r5,1
  80b508:	18800005 	stb	r2,0(r3)
  80b50c:	18c00044 	addi	r3,r3,1
  80b510:	293ffb36 	bltu	r5,r4,80b500 <___vfprintf_internal_r+0x1b74>
  80b514:	1987c83a 	sub	r3,r3,r6
  80b518:	00800044 	movi	r2,1
  80b51c:	d8c14815 	stw	r3,1312(sp)
  80b520:	90cf883a 	add	r7,r18,r3
  80b524:	1480960e 	bge	r2,r18,80b780 <___vfprintf_internal_r+0x1df4>
  80b528:	39c00044 	addi	r7,r7,1
  80b52c:	d9c14515 	stw	r7,1300(sp)
  80b530:	38003416 	blt	r7,zero,80b604 <___vfprintf_internal_r+0x1c78>
  80b534:	e0803fcc 	andi	r2,fp,255
  80b538:	1080201c 	xori	r2,r2,128
  80b53c:	10bfe004 	addi	r2,r2,-128
  80b540:	10004e26 	beq	r2,zero,80b67c <___vfprintf_internal_r+0x1cf0>
  80b544:	00800b44 	movi	r2,45
  80b548:	dc814715 	stw	r18,1308(sp)
  80b54c:	d8014615 	stw	zero,1304(sp)
  80b550:	d8800405 	stb	r2,16(sp)
  80b554:	003bb106 	br	80a41c <___vfprintf_internal_r+0xa90>
  80b558:	00800b44 	movi	r2,45
  80b55c:	d8800405 	stb	r2,16(sp)
  80b560:	003d3306 	br	80aa30 <___vfprintf_internal_r+0x10a4>
  80b564:	d9014f17 	ldw	r4,1340(sp)
  80b568:	b00b883a 	mov	r5,r22
  80b56c:	d9800c04 	addi	r6,sp,48
  80b570:	08099340 	call	809934 <__sprint_r>
  80b574:	103abd1e 	bne	r2,zero,80a06c <___vfprintf_internal_r+0x6e0>
  80b578:	003abb06 	br	80a068 <___vfprintf_internal_r+0x6dc>
  80b57c:	38800017 	ldw	r2,0(r7)
  80b580:	39c00104 	addi	r7,r7,4
  80b584:	d9c14015 	stw	r7,1280(sp)
  80b588:	d9414b17 	ldw	r5,1324(sp)
  80b58c:	d9c14017 	ldw	r7,1280(sp)
  80b590:	11400015 	stw	r5,0(r2)
  80b594:	00395906 	br	809afc <___vfprintf_internal_r+0x170>
  80b598:	980f883a 	mov	r7,r19
  80b59c:	dcc14515 	stw	r19,1300(sp)
  80b5a0:	d8014615 	stw	zero,1304(sp)
  80b5a4:	003b9b06 	br	80a414 <___vfprintf_internal_r+0xa88>
  80b5a8:	0027883a 	mov	r19,zero
  80b5ac:	00397806 	br	809b90 <___vfprintf_internal_r+0x204>
  80b5b0:	00c020b4 	movhi	r3,130
  80b5b4:	18f03504 	addi	r3,r3,-16172
  80b5b8:	100f883a 	mov	r7,r2
  80b5bc:	d8814515 	stw	r2,1300(sp)
  80b5c0:	d8c14115 	stw	r3,1284(sp)
  80b5c4:	0039e006 	br	809d48 <___vfprintf_internal_r+0x3bc>
  80b5c8:	008020b4 	movhi	r2,130
  80b5cc:	10b03404 	addi	r2,r2,-16176
  80b5d0:	d8814115 	stw	r2,1284(sp)
  80b5d4:	003d1c06 	br	80aa48 <___vfprintf_internal_r+0x10bc>
  80b5d8:	d9414d17 	ldw	r5,1332(sp)
  80b5dc:	00801984 	movi	r2,102
  80b5e0:	28804926 	beq	r5,r2,80b708 <___vfprintf_internal_r+0x1d7c>
  80b5e4:	200f883a 	mov	r7,r4
  80b5e8:	24805716 	blt	r4,r18,80b748 <___vfprintf_internal_r+0x1dbc>
  80b5ec:	d9414c17 	ldw	r5,1328(sp)
  80b5f0:	2880004c 	andi	r2,r5,1
  80b5f4:	10000126 	beq	r2,zero,80b5fc <___vfprintf_internal_r+0x1c70>
  80b5f8:	21c00044 	addi	r7,r4,1
  80b5fc:	d9c14515 	stw	r7,1300(sp)
  80b600:	383fcc0e 	bge	r7,zero,80b534 <___vfprintf_internal_r+0x1ba8>
  80b604:	d8014515 	stw	zero,1300(sp)
  80b608:	003fca06 	br	80b534 <___vfprintf_internal_r+0x1ba8>
  80b60c:	d9000517 	ldw	r4,20(sp)
  80b610:	00bfff04 	movi	r2,-4
  80b614:	1100480e 	bge	r2,r4,80b738 <___vfprintf_internal_r+0x1dac>
  80b618:	99004716 	blt	r19,r4,80b738 <___vfprintf_internal_r+0x1dac>
  80b61c:	d8c14d15 	stw	r3,1332(sp)
  80b620:	003ff006 	br	80b5e4 <___vfprintf_internal_r+0x1c58>
  80b624:	d8800717 	ldw	r2,28(sp)
  80b628:	14bf8b2e 	bgeu	r2,r18,80b458 <___vfprintf_internal_r+0x1acc>
  80b62c:	9007883a 	mov	r3,r18
  80b630:	01000c04 	movi	r4,48
  80b634:	11000005 	stb	r4,0(r2)
  80b638:	10800044 	addi	r2,r2,1
  80b63c:	d8800715 	stw	r2,28(sp)
  80b640:	18bffc1e 	bne	r3,r2,80b634 <___vfprintf_internal_r+0x1ca8>
  80b644:	003f8406 	br	80b458 <___vfprintf_internal_r+0x1acc>
  80b648:	d8814117 	ldw	r2,1284(sp)
  80b64c:	10c00007 	ldb	r3,0(r2)
  80b650:	00800c04 	movi	r2,48
  80b654:	18805b26 	beq	r3,r2,80b7c4 <___vfprintf_internal_r+0x1e38>
  80b658:	d9000517 	ldw	r4,20(sp)
  80b65c:	9125883a 	add	r18,r18,r4
  80b660:	003f7506 	br	80b438 <___vfprintf_internal_r+0x1aac>
  80b664:	d9014c17 	ldw	r4,1328(sp)
  80b668:	2080004c 	andi	r2,r4,1
  80b66c:	1005003a 	cmpeq	r2,r2,zero
  80b670:	103f6a26 	beq	r2,zero,80b41c <___vfprintf_internal_r+0x1a90>
  80b674:	d8800717 	ldw	r2,28(sp)
  80b678:	003f7706 	br	80b458 <___vfprintf_internal_r+0x1acc>
  80b67c:	d9c14515 	stw	r7,1300(sp)
  80b680:	38004d16 	blt	r7,zero,80b7b8 <___vfprintf_internal_r+0x1e2c>
  80b684:	dc814715 	stw	r18,1308(sp)
  80b688:	d8014615 	stw	zero,1304(sp)
  80b68c:	003b6106 	br	80a414 <___vfprintf_internal_r+0xa88>
  80b690:	d9014f17 	ldw	r4,1340(sp)
  80b694:	d8800504 	addi	r2,sp,20
  80b698:	d8800115 	stw	r2,4(sp)
  80b69c:	d8c00604 	addi	r3,sp,24
  80b6a0:	d8800704 	addi	r2,sp,28
  80b6a4:	800b883a 	mov	r5,r16
  80b6a8:	880d883a 	mov	r6,r17
  80b6ac:	01c000c4 	movi	r7,3
  80b6b0:	d8c00215 	stw	r3,8(sp)
  80b6b4:	d8800315 	stw	r2,12(sp)
  80b6b8:	dcc00015 	stw	r19,0(sp)
  80b6bc:	9829883a 	mov	r20,r19
  80b6c0:	080bbb00 	call	80bbb0 <_dtoa_r>
  80b6c4:	d8814115 	stw	r2,1284(sp)
  80b6c8:	003f5106 	br	80b410 <___vfprintf_internal_r+0x1a84>
  80b6cc:	d8c14217 	ldw	r3,1288(sp)
  80b6d0:	d9014317 	ldw	r4,1292(sp)
  80b6d4:	07000b44 	movi	fp,45
  80b6d8:	1821883a 	mov	r16,r3
  80b6dc:	2460003c 	xorhi	r17,r4,32768
  80b6e0:	003f3106 	br	80b3a8 <___vfprintf_internal_r+0x1a1c>
  80b6e4:	9d000044 	addi	r20,r19,1
  80b6e8:	003f3906 	br	80b3d0 <___vfprintf_internal_r+0x1a44>
  80b6ec:	983f251e 	bne	r19,zero,80b384 <___vfprintf_internal_r+0x19f8>
  80b6f0:	04c00044 	movi	r19,1
  80b6f4:	003f2306 	br	80b384 <___vfprintf_internal_r+0x19f8>
  80b6f8:	04c00184 	movi	r19,6
  80b6fc:	003f2106 	br	80b384 <___vfprintf_internal_r+0x19f8>
  80b700:	d8014515 	stw	zero,1300(sp)
  80b704:	003eee06 	br	80b2c0 <___vfprintf_internal_r+0x1934>
  80b708:	200f883a 	mov	r7,r4
  80b70c:	0100370e 	bge	zero,r4,80b7ec <___vfprintf_internal_r+0x1e60>
  80b710:	9800031e 	bne	r19,zero,80b720 <___vfprintf_internal_r+0x1d94>
  80b714:	d9814c17 	ldw	r6,1328(sp)
  80b718:	3080004c 	andi	r2,r6,1
  80b71c:	103fb726 	beq	r2,zero,80b5fc <___vfprintf_internal_r+0x1c70>
  80b720:	20800044 	addi	r2,r4,1
  80b724:	98a7883a 	add	r19,r19,r2
  80b728:	dcc14515 	stw	r19,1300(sp)
  80b72c:	980f883a 	mov	r7,r19
  80b730:	983f800e 	bge	r19,zero,80b534 <___vfprintf_internal_r+0x1ba8>
  80b734:	003fb306 	br	80b604 <___vfprintf_internal_r+0x1c78>
  80b738:	d9814d17 	ldw	r6,1332(sp)
  80b73c:	31bfff84 	addi	r6,r6,-2
  80b740:	d9814d15 	stw	r6,1332(sp)
  80b744:	003f4c06 	br	80b478 <___vfprintf_internal_r+0x1aec>
  80b748:	0100180e 	bge	zero,r4,80b7ac <___vfprintf_internal_r+0x1e20>
  80b74c:	00800044 	movi	r2,1
  80b750:	1485883a 	add	r2,r2,r18
  80b754:	d8814515 	stw	r2,1300(sp)
  80b758:	100f883a 	mov	r7,r2
  80b75c:	103f750e 	bge	r2,zero,80b534 <___vfprintf_internal_r+0x1ba8>
  80b760:	003fa806 	br	80b604 <___vfprintf_internal_r+0x1c78>
  80b764:	80c00c04 	addi	r3,r16,48
  80b768:	00800c04 	movi	r2,48
  80b76c:	d8c008c5 	stb	r3,35(sp)
  80b770:	d9800804 	addi	r6,sp,32
  80b774:	d8c00904 	addi	r3,sp,36
  80b778:	d8800885 	stb	r2,34(sp)
  80b77c:	003f6506 	br	80b514 <___vfprintf_internal_r+0x1b88>
  80b780:	d9014c17 	ldw	r4,1328(sp)
  80b784:	2084703a 	and	r2,r4,r2
  80b788:	103f9c26 	beq	r2,zero,80b5fc <___vfprintf_internal_r+0x1c70>
  80b78c:	003f6606 	br	80b528 <___vfprintf_internal_r+0x1b9c>
  80b790:	d9800804 	addi	r6,sp,32
  80b794:	d8c00884 	addi	r3,sp,34
  80b798:	003f5e06 	br	80b514 <___vfprintf_internal_r+0x1b88>
  80b79c:	00800b44 	movi	r2,45
  80b7a0:	0121c83a 	sub	r16,zero,r4
  80b7a4:	d8800845 	stb	r2,33(sp)
  80b7a8:	003f3d06 	br	80b4a0 <___vfprintf_internal_r+0x1b14>
  80b7ac:	00800084 	movi	r2,2
  80b7b0:	1105c83a 	sub	r2,r2,r4
  80b7b4:	003fe606 	br	80b750 <___vfprintf_internal_r+0x1dc4>
  80b7b8:	d8014515 	stw	zero,1300(sp)
  80b7bc:	dc814715 	stw	r18,1308(sp)
  80b7c0:	003fb106 	br	80b688 <___vfprintf_internal_r+0x1cfc>
  80b7c4:	000d883a 	mov	r6,zero
  80b7c8:	000f883a 	mov	r7,zero
  80b7cc:	8009883a 	mov	r4,r16
  80b7d0:	880b883a 	mov	r5,r17
  80b7d4:	08080f40 	call	8080f4 <__nedf2>
  80b7d8:	103f9f26 	beq	r2,zero,80b658 <___vfprintf_internal_r+0x1ccc>
  80b7dc:	00800044 	movi	r2,1
  80b7e0:	1509c83a 	sub	r4,r2,r20
  80b7e4:	d9000515 	stw	r4,20(sp)
  80b7e8:	003f9b06 	br	80b658 <___vfprintf_internal_r+0x1ccc>
  80b7ec:	98000d1e 	bne	r19,zero,80b824 <___vfprintf_internal_r+0x1e98>
  80b7f0:	d8c14c17 	ldw	r3,1328(sp)
  80b7f4:	1880004c 	andi	r2,r3,1
  80b7f8:	10000a1e 	bne	r2,zero,80b824 <___vfprintf_internal_r+0x1e98>
  80b7fc:	01000044 	movi	r4,1
  80b800:	200f883a 	mov	r7,r4
  80b804:	d9014515 	stw	r4,1300(sp)
  80b808:	003f4a06 	br	80b534 <___vfprintf_internal_r+0x1ba8>
  80b80c:	3cc00017 	ldw	r19,0(r7)
  80b810:	39c00104 	addi	r7,r7,4
  80b814:	983d0e0e 	bge	r19,zero,80ac50 <___vfprintf_internal_r+0x12c4>
  80b818:	b8c00007 	ldb	r3,0(r23)
  80b81c:	04ffffc4 	movi	r19,-1
  80b820:	0038d906 	br	809b88 <___vfprintf_internal_r+0x1fc>
  80b824:	9cc00084 	addi	r19,r19,2
  80b828:	dcc14515 	stw	r19,1300(sp)
  80b82c:	980f883a 	mov	r7,r19
  80b830:	983f400e 	bge	r19,zero,80b534 <___vfprintf_internal_r+0x1ba8>
  80b834:	003f7306 	br	80b604 <___vfprintf_internal_r+0x1c78>

0080b838 <__vfprintf_internal>:
  80b838:	008020b4 	movhi	r2,130
  80b83c:	10b7cd04 	addi	r2,r2,-8396
  80b840:	2013883a 	mov	r9,r4
  80b844:	11000017 	ldw	r4,0(r2)
  80b848:	2805883a 	mov	r2,r5
  80b84c:	300f883a 	mov	r7,r6
  80b850:	480b883a 	mov	r5,r9
  80b854:	100d883a 	mov	r6,r2
  80b858:	080998c1 	jmpi	80998c <___vfprintf_internal_r>

0080b85c <__swsetup_r>:
  80b85c:	008020b4 	movhi	r2,130
  80b860:	10b7cd04 	addi	r2,r2,-8396
  80b864:	10c00017 	ldw	r3,0(r2)
  80b868:	defffd04 	addi	sp,sp,-12
  80b86c:	dc400115 	stw	r17,4(sp)
  80b870:	dc000015 	stw	r16,0(sp)
  80b874:	dfc00215 	stw	ra,8(sp)
  80b878:	2023883a 	mov	r17,r4
  80b87c:	2821883a 	mov	r16,r5
  80b880:	18000226 	beq	r3,zero,80b88c <__swsetup_r+0x30>
  80b884:	18800e17 	ldw	r2,56(r3)
  80b888:	10001f26 	beq	r2,zero,80b908 <__swsetup_r+0xac>
  80b88c:	8100030b 	ldhu	r4,12(r16)
  80b890:	2080020c 	andi	r2,r4,8
  80b894:	10002826 	beq	r2,zero,80b938 <__swsetup_r+0xdc>
  80b898:	81400417 	ldw	r5,16(r16)
  80b89c:	28001d26 	beq	r5,zero,80b914 <__swsetup_r+0xb8>
  80b8a0:	2080004c 	andi	r2,r4,1
  80b8a4:	1005003a 	cmpeq	r2,r2,zero
  80b8a8:	10000b26 	beq	r2,zero,80b8d8 <__swsetup_r+0x7c>
  80b8ac:	2080008c 	andi	r2,r4,2
  80b8b0:	10001226 	beq	r2,zero,80b8fc <__swsetup_r+0xa0>
  80b8b4:	0005883a 	mov	r2,zero
  80b8b8:	80800215 	stw	r2,8(r16)
  80b8bc:	28000b26 	beq	r5,zero,80b8ec <__swsetup_r+0x90>
  80b8c0:	0005883a 	mov	r2,zero
  80b8c4:	dfc00217 	ldw	ra,8(sp)
  80b8c8:	dc400117 	ldw	r17,4(sp)
  80b8cc:	dc000017 	ldw	r16,0(sp)
  80b8d0:	dec00304 	addi	sp,sp,12
  80b8d4:	f800283a 	ret
  80b8d8:	80800517 	ldw	r2,20(r16)
  80b8dc:	80000215 	stw	zero,8(r16)
  80b8e0:	0085c83a 	sub	r2,zero,r2
  80b8e4:	80800615 	stw	r2,24(r16)
  80b8e8:	283ff51e 	bne	r5,zero,80b8c0 <__swsetup_r+0x64>
  80b8ec:	2080200c 	andi	r2,r4,128
  80b8f0:	103ff326 	beq	r2,zero,80b8c0 <__swsetup_r+0x64>
  80b8f4:	00bfffc4 	movi	r2,-1
  80b8f8:	003ff206 	br	80b8c4 <__swsetup_r+0x68>
  80b8fc:	80800517 	ldw	r2,20(r16)
  80b900:	80800215 	stw	r2,8(r16)
  80b904:	003fed06 	br	80b8bc <__swsetup_r+0x60>
  80b908:	1809883a 	mov	r4,r3
  80b90c:	080d3fc0 	call	80d3fc <__sinit>
  80b910:	003fde06 	br	80b88c <__swsetup_r+0x30>
  80b914:	20c0a00c 	andi	r3,r4,640
  80b918:	00808004 	movi	r2,512
  80b91c:	18bfe026 	beq	r3,r2,80b8a0 <__swsetup_r+0x44>
  80b920:	8809883a 	mov	r4,r17
  80b924:	800b883a 	mov	r5,r16
  80b928:	080e1e80 	call	80e1e8 <__smakebuf_r>
  80b92c:	8100030b 	ldhu	r4,12(r16)
  80b930:	81400417 	ldw	r5,16(r16)
  80b934:	003fda06 	br	80b8a0 <__swsetup_r+0x44>
  80b938:	2080040c 	andi	r2,r4,16
  80b93c:	103fed26 	beq	r2,zero,80b8f4 <__swsetup_r+0x98>
  80b940:	2080010c 	andi	r2,r4,4
  80b944:	10001226 	beq	r2,zero,80b990 <__swsetup_r+0x134>
  80b948:	81400c17 	ldw	r5,48(r16)
  80b94c:	28000526 	beq	r5,zero,80b964 <__swsetup_r+0x108>
  80b950:	80801004 	addi	r2,r16,64
  80b954:	28800226 	beq	r5,r2,80b960 <__swsetup_r+0x104>
  80b958:	8809883a 	mov	r4,r17
  80b95c:	080d7800 	call	80d780 <_free_r>
  80b960:	80000c15 	stw	zero,48(r16)
  80b964:	8080030b 	ldhu	r2,12(r16)
  80b968:	81400417 	ldw	r5,16(r16)
  80b96c:	80000115 	stw	zero,4(r16)
  80b970:	10bff6cc 	andi	r2,r2,65499
  80b974:	8080030d 	sth	r2,12(r16)
  80b978:	81400015 	stw	r5,0(r16)
  80b97c:	8080030b 	ldhu	r2,12(r16)
  80b980:	10800214 	ori	r2,r2,8
  80b984:	113fffcc 	andi	r4,r2,65535
  80b988:	8080030d 	sth	r2,12(r16)
  80b98c:	003fc306 	br	80b89c <__swsetup_r+0x40>
  80b990:	81400417 	ldw	r5,16(r16)
  80b994:	003ff906 	br	80b97c <__swsetup_r+0x120>

0080b998 <quorem>:
  80b998:	28c00417 	ldw	r3,16(r5)
  80b99c:	20800417 	ldw	r2,16(r4)
  80b9a0:	defff604 	addi	sp,sp,-40
  80b9a4:	ddc00715 	stw	r23,28(sp)
  80b9a8:	dd400515 	stw	r21,20(sp)
  80b9ac:	dfc00915 	stw	ra,36(sp)
  80b9b0:	df000815 	stw	fp,32(sp)
  80b9b4:	dd800615 	stw	r22,24(sp)
  80b9b8:	dd000415 	stw	r20,16(sp)
  80b9bc:	dcc00315 	stw	r19,12(sp)
  80b9c0:	dc800215 	stw	r18,8(sp)
  80b9c4:	dc400115 	stw	r17,4(sp)
  80b9c8:	dc000015 	stw	r16,0(sp)
  80b9cc:	202f883a 	mov	r23,r4
  80b9d0:	282b883a 	mov	r21,r5
  80b9d4:	10c07416 	blt	r2,r3,80bba8 <quorem+0x210>
  80b9d8:	1c7fffc4 	addi	r17,r3,-1
  80b9dc:	8c45883a 	add	r2,r17,r17
  80b9e0:	1085883a 	add	r2,r2,r2
  80b9e4:	2c000504 	addi	r16,r5,20
  80b9e8:	24c00504 	addi	r19,r4,20
  80b9ec:	14ed883a 	add	r22,r2,r19
  80b9f0:	80a5883a 	add	r18,r16,r2
  80b9f4:	b7000017 	ldw	fp,0(r22)
  80b9f8:	91400017 	ldw	r5,0(r18)
  80b9fc:	e009883a 	mov	r4,fp
  80ba00:	29400044 	addi	r5,r5,1
  80ba04:	08086580 	call	808658 <__udivsi3>
  80ba08:	1029883a 	mov	r20,r2
  80ba0c:	10003c1e 	bne	r2,zero,80bb00 <quorem+0x168>
  80ba10:	a80b883a 	mov	r5,r21
  80ba14:	b809883a 	mov	r4,r23
  80ba18:	080e7d40 	call	80e7d4 <__mcmp>
  80ba1c:	10002b16 	blt	r2,zero,80bacc <quorem+0x134>
  80ba20:	a5000044 	addi	r20,r20,1
  80ba24:	980f883a 	mov	r7,r19
  80ba28:	0011883a 	mov	r8,zero
  80ba2c:	0009883a 	mov	r4,zero
  80ba30:	81400017 	ldw	r5,0(r16)
  80ba34:	38c00017 	ldw	r3,0(r7)
  80ba38:	84000104 	addi	r16,r16,4
  80ba3c:	28bfffcc 	andi	r2,r5,65535
  80ba40:	2085883a 	add	r2,r4,r2
  80ba44:	11bfffcc 	andi	r6,r2,65535
  80ba48:	193fffcc 	andi	r4,r3,65535
  80ba4c:	1004d43a 	srli	r2,r2,16
  80ba50:	280ad43a 	srli	r5,r5,16
  80ba54:	2189c83a 	sub	r4,r4,r6
  80ba58:	2209883a 	add	r4,r4,r8
  80ba5c:	1806d43a 	srli	r3,r3,16
  80ba60:	288b883a 	add	r5,r5,r2
  80ba64:	200dd43a 	srai	r6,r4,16
  80ba68:	28bfffcc 	andi	r2,r5,65535
  80ba6c:	1887c83a 	sub	r3,r3,r2
  80ba70:	1987883a 	add	r3,r3,r6
  80ba74:	3900000d 	sth	r4,0(r7)
  80ba78:	38c0008d 	sth	r3,2(r7)
  80ba7c:	2808d43a 	srli	r4,r5,16
  80ba80:	39c00104 	addi	r7,r7,4
  80ba84:	1811d43a 	srai	r8,r3,16
  80ba88:	943fe92e 	bgeu	r18,r16,80ba30 <quorem+0x98>
  80ba8c:	8c45883a 	add	r2,r17,r17
  80ba90:	1085883a 	add	r2,r2,r2
  80ba94:	9885883a 	add	r2,r19,r2
  80ba98:	10c00017 	ldw	r3,0(r2)
  80ba9c:	18000b1e 	bne	r3,zero,80bacc <quorem+0x134>
  80baa0:	113fff04 	addi	r4,r2,-4
  80baa4:	9900082e 	bgeu	r19,r4,80bac8 <quorem+0x130>
  80baa8:	10bfff17 	ldw	r2,-4(r2)
  80baac:	10000326 	beq	r2,zero,80babc <quorem+0x124>
  80bab0:	00000506 	br	80bac8 <quorem+0x130>
  80bab4:	20800017 	ldw	r2,0(r4)
  80bab8:	1000031e 	bne	r2,zero,80bac8 <quorem+0x130>
  80babc:	213fff04 	addi	r4,r4,-4
  80bac0:	8c7fffc4 	addi	r17,r17,-1
  80bac4:	993ffb36 	bltu	r19,r4,80bab4 <quorem+0x11c>
  80bac8:	bc400415 	stw	r17,16(r23)
  80bacc:	a005883a 	mov	r2,r20
  80bad0:	dfc00917 	ldw	ra,36(sp)
  80bad4:	df000817 	ldw	fp,32(sp)
  80bad8:	ddc00717 	ldw	r23,28(sp)
  80badc:	dd800617 	ldw	r22,24(sp)
  80bae0:	dd400517 	ldw	r21,20(sp)
  80bae4:	dd000417 	ldw	r20,16(sp)
  80bae8:	dcc00317 	ldw	r19,12(sp)
  80baec:	dc800217 	ldw	r18,8(sp)
  80baf0:	dc400117 	ldw	r17,4(sp)
  80baf4:	dc000017 	ldw	r16,0(sp)
  80baf8:	dec00a04 	addi	sp,sp,40
  80bafc:	f800283a 	ret
  80bb00:	980f883a 	mov	r7,r19
  80bb04:	8011883a 	mov	r8,r16
  80bb08:	0013883a 	mov	r9,zero
  80bb0c:	000d883a 	mov	r6,zero
  80bb10:	40c00017 	ldw	r3,0(r8)
  80bb14:	39000017 	ldw	r4,0(r7)
  80bb18:	42000104 	addi	r8,r8,4
  80bb1c:	18bfffcc 	andi	r2,r3,65535
  80bb20:	a085383a 	mul	r2,r20,r2
  80bb24:	1806d43a 	srli	r3,r3,16
  80bb28:	217fffcc 	andi	r5,r4,65535
  80bb2c:	3085883a 	add	r2,r6,r2
  80bb30:	11bfffcc 	andi	r6,r2,65535
  80bb34:	a0c7383a 	mul	r3,r20,r3
  80bb38:	1004d43a 	srli	r2,r2,16
  80bb3c:	298bc83a 	sub	r5,r5,r6
  80bb40:	2a4b883a 	add	r5,r5,r9
  80bb44:	2008d43a 	srli	r4,r4,16
  80bb48:	1887883a 	add	r3,r3,r2
  80bb4c:	280dd43a 	srai	r6,r5,16
  80bb50:	18bfffcc 	andi	r2,r3,65535
  80bb54:	2089c83a 	sub	r4,r4,r2
  80bb58:	2189883a 	add	r4,r4,r6
  80bb5c:	3900008d 	sth	r4,2(r7)
  80bb60:	3940000d 	sth	r5,0(r7)
  80bb64:	180cd43a 	srli	r6,r3,16
  80bb68:	39c00104 	addi	r7,r7,4
  80bb6c:	2013d43a 	srai	r9,r4,16
  80bb70:	923fe72e 	bgeu	r18,r8,80bb10 <quorem+0x178>
  80bb74:	e03fa61e 	bne	fp,zero,80ba10 <quorem+0x78>
  80bb78:	b0ffff04 	addi	r3,r22,-4
  80bb7c:	98c0082e 	bgeu	r19,r3,80bba0 <quorem+0x208>
  80bb80:	b0bfff17 	ldw	r2,-4(r22)
  80bb84:	10000326 	beq	r2,zero,80bb94 <quorem+0x1fc>
  80bb88:	00000506 	br	80bba0 <quorem+0x208>
  80bb8c:	18800017 	ldw	r2,0(r3)
  80bb90:	1000031e 	bne	r2,zero,80bba0 <quorem+0x208>
  80bb94:	18ffff04 	addi	r3,r3,-4
  80bb98:	8c7fffc4 	addi	r17,r17,-1
  80bb9c:	98fffb36 	bltu	r19,r3,80bb8c <quorem+0x1f4>
  80bba0:	bc400415 	stw	r17,16(r23)
  80bba4:	003f9a06 	br	80ba10 <quorem+0x78>
  80bba8:	0005883a 	mov	r2,zero
  80bbac:	003fc806 	br	80bad0 <quorem+0x138>

0080bbb0 <_dtoa_r>:
  80bbb0:	22001017 	ldw	r8,64(r4)
  80bbb4:	deffda04 	addi	sp,sp,-152
  80bbb8:	dd402115 	stw	r21,132(sp)
  80bbbc:	dd002015 	stw	r20,128(sp)
  80bbc0:	dc801e15 	stw	r18,120(sp)
  80bbc4:	dc401d15 	stw	r17,116(sp)
  80bbc8:	dfc02515 	stw	ra,148(sp)
  80bbcc:	df002415 	stw	fp,144(sp)
  80bbd0:	ddc02315 	stw	r23,140(sp)
  80bbd4:	dd802215 	stw	r22,136(sp)
  80bbd8:	dcc01f15 	stw	r19,124(sp)
  80bbdc:	dc001c15 	stw	r16,112(sp)
  80bbe0:	d9001615 	stw	r4,88(sp)
  80bbe4:	3023883a 	mov	r17,r6
  80bbe8:	2829883a 	mov	r20,r5
  80bbec:	d9c01715 	stw	r7,92(sp)
  80bbf0:	dc802817 	ldw	r18,160(sp)
  80bbf4:	302b883a 	mov	r21,r6
  80bbf8:	40000a26 	beq	r8,zero,80bc24 <_dtoa_r+0x74>
  80bbfc:	20801117 	ldw	r2,68(r4)
  80bc00:	400b883a 	mov	r5,r8
  80bc04:	40800115 	stw	r2,4(r8)
  80bc08:	20c01117 	ldw	r3,68(r4)
  80bc0c:	00800044 	movi	r2,1
  80bc10:	10c4983a 	sll	r2,r2,r3
  80bc14:	40800215 	stw	r2,8(r8)
  80bc18:	080e6780 	call	80e678 <_Bfree>
  80bc1c:	d8c01617 	ldw	r3,88(sp)
  80bc20:	18001015 	stw	zero,64(r3)
  80bc24:	8800a316 	blt	r17,zero,80beb4 <_dtoa_r+0x304>
  80bc28:	90000015 	stw	zero,0(r18)
  80bc2c:	a8dffc2c 	andhi	r3,r21,32752
  80bc30:	009ffc34 	movhi	r2,32752
  80bc34:	18809126 	beq	r3,r2,80be7c <_dtoa_r+0x2cc>
  80bc38:	000d883a 	mov	r6,zero
  80bc3c:	000f883a 	mov	r7,zero
  80bc40:	a009883a 	mov	r4,r20
  80bc44:	a80b883a 	mov	r5,r21
  80bc48:	dd001215 	stw	r20,72(sp)
  80bc4c:	dd401315 	stw	r21,76(sp)
  80bc50:	08080f40 	call	8080f4 <__nedf2>
  80bc54:	1000171e 	bne	r2,zero,80bcb4 <_dtoa_r+0x104>
  80bc58:	d9802717 	ldw	r6,156(sp)
  80bc5c:	00800044 	movi	r2,1
  80bc60:	30800015 	stw	r2,0(r6)
  80bc64:	d8802917 	ldw	r2,164(sp)
  80bc68:	10029b26 	beq	r2,zero,80c6d8 <_dtoa_r+0xb28>
  80bc6c:	d9002917 	ldw	r4,164(sp)
  80bc70:	008020b4 	movhi	r2,130
  80bc74:	10b04344 	addi	r2,r2,-16115
  80bc78:	10ffffc4 	addi	r3,r2,-1
  80bc7c:	20800015 	stw	r2,0(r4)
  80bc80:	1805883a 	mov	r2,r3
  80bc84:	dfc02517 	ldw	ra,148(sp)
  80bc88:	df002417 	ldw	fp,144(sp)
  80bc8c:	ddc02317 	ldw	r23,140(sp)
  80bc90:	dd802217 	ldw	r22,136(sp)
  80bc94:	dd402117 	ldw	r21,132(sp)
  80bc98:	dd002017 	ldw	r20,128(sp)
  80bc9c:	dcc01f17 	ldw	r19,124(sp)
  80bca0:	dc801e17 	ldw	r18,120(sp)
  80bca4:	dc401d17 	ldw	r17,116(sp)
  80bca8:	dc001c17 	ldw	r16,112(sp)
  80bcac:	dec02604 	addi	sp,sp,152
  80bcb0:	f800283a 	ret
  80bcb4:	d9001617 	ldw	r4,88(sp)
  80bcb8:	d9401217 	ldw	r5,72(sp)
  80bcbc:	d8800104 	addi	r2,sp,4
  80bcc0:	a80d883a 	mov	r6,r21
  80bcc4:	d9c00204 	addi	r7,sp,8
  80bcc8:	d8800015 	stw	r2,0(sp)
  80bccc:	080ecb40 	call	80ecb4 <__d2b>
  80bcd0:	d8800715 	stw	r2,28(sp)
  80bcd4:	a804d53a 	srli	r2,r21,20
  80bcd8:	1101ffcc 	andi	r4,r2,2047
  80bcdc:	20008626 	beq	r4,zero,80bef8 <_dtoa_r+0x348>
  80bce0:	d8c01217 	ldw	r3,72(sp)
  80bce4:	00800434 	movhi	r2,16
  80bce8:	10bfffc4 	addi	r2,r2,-1
  80bcec:	ddc00117 	ldw	r23,4(sp)
  80bcf0:	a884703a 	and	r2,r21,r2
  80bcf4:	1811883a 	mov	r8,r3
  80bcf8:	124ffc34 	orhi	r9,r2,16368
  80bcfc:	25bf0044 	addi	r22,r4,-1023
  80bd00:	d8000815 	stw	zero,32(sp)
  80bd04:	0005883a 	mov	r2,zero
  80bd08:	00cffe34 	movhi	r3,16376
  80bd0c:	480b883a 	mov	r5,r9
  80bd10:	4009883a 	mov	r4,r8
  80bd14:	180f883a 	mov	r7,r3
  80bd18:	100d883a 	mov	r6,r2
  80bd1c:	080795c0 	call	80795c <__subdf3>
  80bd20:	0218dbf4 	movhi	r8,25455
  80bd24:	4210d844 	addi	r8,r8,17249
  80bd28:	024ff4f4 	movhi	r9,16339
  80bd2c:	4a61e9c4 	addi	r9,r9,-30809
  80bd30:	480f883a 	mov	r7,r9
  80bd34:	400d883a 	mov	r6,r8
  80bd38:	180b883a 	mov	r5,r3
  80bd3c:	1009883a 	mov	r4,r2
  80bd40:	0807a500 	call	807a50 <__muldf3>
  80bd44:	0222d874 	movhi	r8,35681
  80bd48:	42322cc4 	addi	r8,r8,-14157
  80bd4c:	024ff1f4 	movhi	r9,16327
  80bd50:	4a628a04 	addi	r9,r9,-30168
  80bd54:	480f883a 	mov	r7,r9
  80bd58:	400d883a 	mov	r6,r8
  80bd5c:	180b883a 	mov	r5,r3
  80bd60:	1009883a 	mov	r4,r2
  80bd64:	08079dc0 	call	8079dc <__adddf3>
  80bd68:	b009883a 	mov	r4,r22
  80bd6c:	1021883a 	mov	r16,r2
  80bd70:	1823883a 	mov	r17,r3
  80bd74:	08083140 	call	808314 <__floatsidf>
  80bd78:	021427f4 	movhi	r8,20639
  80bd7c:	421e7ec4 	addi	r8,r8,31227
  80bd80:	024ff4f4 	movhi	r9,16339
  80bd84:	4a5104c4 	addi	r9,r9,17427
  80bd88:	480f883a 	mov	r7,r9
  80bd8c:	400d883a 	mov	r6,r8
  80bd90:	180b883a 	mov	r5,r3
  80bd94:	1009883a 	mov	r4,r2
  80bd98:	0807a500 	call	807a50 <__muldf3>
  80bd9c:	180f883a 	mov	r7,r3
  80bda0:	880b883a 	mov	r5,r17
  80bda4:	100d883a 	mov	r6,r2
  80bda8:	8009883a 	mov	r4,r16
  80bdac:	08079dc0 	call	8079dc <__adddf3>
  80bdb0:	1009883a 	mov	r4,r2
  80bdb4:	180b883a 	mov	r5,r3
  80bdb8:	1021883a 	mov	r16,r2
  80bdbc:	1823883a 	mov	r17,r3
  80bdc0:	080840c0 	call	80840c <__fixdfsi>
  80bdc4:	000d883a 	mov	r6,zero
  80bdc8:	000f883a 	mov	r7,zero
  80bdcc:	8009883a 	mov	r4,r16
  80bdd0:	880b883a 	mov	r5,r17
  80bdd4:	d8800d15 	stw	r2,52(sp)
  80bdd8:	08082040 	call	808204 <__ltdf2>
  80bddc:	10031716 	blt	r2,zero,80ca3c <_dtoa_r+0xe8c>
  80bde0:	d8c00d17 	ldw	r3,52(sp)
  80bde4:	00800584 	movi	r2,22
  80bde8:	10c1482e 	bgeu	r2,r3,80c30c <_dtoa_r+0x75c>
  80bdec:	01000044 	movi	r4,1
  80bdf0:	d9000c15 	stw	r4,48(sp)
  80bdf4:	bd85c83a 	sub	r2,r23,r22
  80bdf8:	11bfffc4 	addi	r6,r2,-1
  80bdfc:	30030b16 	blt	r6,zero,80ca2c <_dtoa_r+0xe7c>
  80be00:	d9800a15 	stw	r6,40(sp)
  80be04:	d8001115 	stw	zero,68(sp)
  80be08:	d8c00d17 	ldw	r3,52(sp)
  80be0c:	1802ff16 	blt	r3,zero,80ca0c <_dtoa_r+0xe5c>
  80be10:	d9000a17 	ldw	r4,40(sp)
  80be14:	d8c00915 	stw	r3,36(sp)
  80be18:	d8001015 	stw	zero,64(sp)
  80be1c:	20c9883a 	add	r4,r4,r3
  80be20:	d9000a15 	stw	r4,40(sp)
  80be24:	d9001717 	ldw	r4,92(sp)
  80be28:	00800244 	movi	r2,9
  80be2c:	11004636 	bltu	r2,r4,80bf48 <_dtoa_r+0x398>
  80be30:	00800144 	movi	r2,5
  80be34:	11020416 	blt	r2,r4,80c648 <_dtoa_r+0xa98>
  80be38:	04400044 	movi	r17,1
  80be3c:	d8c01717 	ldw	r3,92(sp)
  80be40:	00800144 	movi	r2,5
  80be44:	10c1ed36 	bltu	r2,r3,80c5fc <_dtoa_r+0xa4c>
  80be48:	18c5883a 	add	r2,r3,r3
  80be4c:	1085883a 	add	r2,r2,r2
  80be50:	00c02074 	movhi	r3,129
  80be54:	18ef9904 	addi	r3,r3,-16796
  80be58:	10c5883a 	add	r2,r2,r3
  80be5c:	11000017 	ldw	r4,0(r2)
  80be60:	2000683a 	jmp	r4
  80be64:	0080bf50 	cmplti	r2,zero,765
  80be68:	0080bf50 	cmplti	r2,zero,765
  80be6c:	0080c950 	cmplti	r2,zero,805
  80be70:	0080c928 	cmpgeui	r2,zero,804
  80be74:	0080c96c 	andhi	r2,zero,805
  80be78:	0080c978 	rdprs	r2,zero,805
  80be7c:	d9002717 	ldw	r4,156(sp)
  80be80:	0089c3c4 	movi	r2,9999
  80be84:	20800015 	stw	r2,0(r4)
  80be88:	a0001026 	beq	r20,zero,80becc <_dtoa_r+0x31c>
  80be8c:	00c020b4 	movhi	r3,130
  80be90:	18f04f04 	addi	r3,r3,-16068
  80be94:	d9802917 	ldw	r6,164(sp)
  80be98:	303f7926 	beq	r6,zero,80bc80 <_dtoa_r+0xd0>
  80be9c:	188000c7 	ldb	r2,3(r3)
  80bea0:	190000c4 	addi	r4,r3,3
  80bea4:	1000101e 	bne	r2,zero,80bee8 <_dtoa_r+0x338>
  80bea8:	d8802917 	ldw	r2,164(sp)
  80beac:	11000015 	stw	r4,0(r2)
  80beb0:	003f7306 	br	80bc80 <_dtoa_r+0xd0>
  80beb4:	00a00034 	movhi	r2,32768
  80beb8:	10bfffc4 	addi	r2,r2,-1
  80bebc:	00c00044 	movi	r3,1
  80bec0:	88aa703a 	and	r21,r17,r2
  80bec4:	90c00015 	stw	r3,0(r18)
  80bec8:	003f5806 	br	80bc2c <_dtoa_r+0x7c>
  80becc:	00800434 	movhi	r2,16
  80bed0:	10bfffc4 	addi	r2,r2,-1
  80bed4:	a884703a 	and	r2,r21,r2
  80bed8:	103fec1e 	bne	r2,zero,80be8c <_dtoa_r+0x2dc>
  80bedc:	00c020b4 	movhi	r3,130
  80bee0:	18f04c04 	addi	r3,r3,-16080
  80bee4:	003feb06 	br	80be94 <_dtoa_r+0x2e4>
  80bee8:	d8802917 	ldw	r2,164(sp)
  80beec:	19000204 	addi	r4,r3,8
  80bef0:	11000015 	stw	r4,0(r2)
  80bef4:	003f6206 	br	80bc80 <_dtoa_r+0xd0>
  80bef8:	ddc00117 	ldw	r23,4(sp)
  80befc:	d8800217 	ldw	r2,8(sp)
  80bf00:	01000804 	movi	r4,32
  80bf04:	b8c10c84 	addi	r3,r23,1074
  80bf08:	18a3883a 	add	r17,r3,r2
  80bf0c:	2441b80e 	bge	r4,r17,80c5f0 <_dtoa_r+0xa40>
  80bf10:	00c01004 	movi	r3,64
  80bf14:	1c47c83a 	sub	r3,r3,r17
  80bf18:	88bff804 	addi	r2,r17,-32
  80bf1c:	a8c6983a 	sll	r3,r21,r3
  80bf20:	a084d83a 	srl	r2,r20,r2
  80bf24:	1888b03a 	or	r4,r3,r2
  80bf28:	0810f500 	call	810f50 <__floatunsidf>
  80bf2c:	1011883a 	mov	r8,r2
  80bf30:	00bf8434 	movhi	r2,65040
  80bf34:	01000044 	movi	r4,1
  80bf38:	10d3883a 	add	r9,r2,r3
  80bf3c:	8dbef344 	addi	r22,r17,-1075
  80bf40:	d9000815 	stw	r4,32(sp)
  80bf44:	003f6f06 	br	80bd04 <_dtoa_r+0x154>
  80bf48:	d8001715 	stw	zero,92(sp)
  80bf4c:	04400044 	movi	r17,1
  80bf50:	00bfffc4 	movi	r2,-1
  80bf54:	00c00044 	movi	r3,1
  80bf58:	d8800e15 	stw	r2,56(sp)
  80bf5c:	d8002615 	stw	zero,152(sp)
  80bf60:	d8800f15 	stw	r2,60(sp)
  80bf64:	d8c00b15 	stw	r3,44(sp)
  80bf68:	1021883a 	mov	r16,r2
  80bf6c:	d8801617 	ldw	r2,88(sp)
  80bf70:	10001115 	stw	zero,68(r2)
  80bf74:	d8801617 	ldw	r2,88(sp)
  80bf78:	11401117 	ldw	r5,68(r2)
  80bf7c:	1009883a 	mov	r4,r2
  80bf80:	080ebf80 	call	80ebf8 <_Balloc>
  80bf84:	d8c01617 	ldw	r3,88(sp)
  80bf88:	d8800515 	stw	r2,20(sp)
  80bf8c:	18801015 	stw	r2,64(r3)
  80bf90:	00800384 	movi	r2,14
  80bf94:	14006836 	bltu	r2,r16,80c138 <_dtoa_r+0x588>
  80bf98:	8805003a 	cmpeq	r2,r17,zero
  80bf9c:	1000661e 	bne	r2,zero,80c138 <_dtoa_r+0x588>
  80bfa0:	d9000d17 	ldw	r4,52(sp)
  80bfa4:	0102300e 	bge	zero,r4,80c868 <_dtoa_r+0xcb8>
  80bfa8:	208003cc 	andi	r2,r4,15
  80bfac:	100490fa 	slli	r2,r2,3
  80bfb0:	2025d13a 	srai	r18,r4,4
  80bfb4:	00c020b4 	movhi	r3,130
  80bfb8:	18f06004 	addi	r3,r3,-16000
  80bfbc:	10c5883a 	add	r2,r2,r3
  80bfc0:	90c0040c 	andi	r3,r18,16
  80bfc4:	14000017 	ldw	r16,0(r2)
  80bfc8:	14400117 	ldw	r17,4(r2)
  80bfcc:	18036a1e 	bne	r3,zero,80cd78 <_dtoa_r+0x11c8>
  80bfd0:	05800084 	movi	r22,2
  80bfd4:	90001026 	beq	r18,zero,80c018 <_dtoa_r+0x468>
  80bfd8:	04c020b4 	movhi	r19,130
  80bfdc:	9cf09204 	addi	r19,r19,-15800
  80bfe0:	9080004c 	andi	r2,r18,1
  80bfe4:	1005003a 	cmpeq	r2,r2,zero
  80bfe8:	1000081e 	bne	r2,zero,80c00c <_dtoa_r+0x45c>
  80bfec:	99800017 	ldw	r6,0(r19)
  80bff0:	99c00117 	ldw	r7,4(r19)
  80bff4:	880b883a 	mov	r5,r17
  80bff8:	8009883a 	mov	r4,r16
  80bffc:	0807a500 	call	807a50 <__muldf3>
  80c000:	1021883a 	mov	r16,r2
  80c004:	b5800044 	addi	r22,r22,1
  80c008:	1823883a 	mov	r17,r3
  80c00c:	9025d07a 	srai	r18,r18,1
  80c010:	9cc00204 	addi	r19,r19,8
  80c014:	903ff21e 	bne	r18,zero,80bfe0 <_dtoa_r+0x430>
  80c018:	a80b883a 	mov	r5,r21
  80c01c:	a009883a 	mov	r4,r20
  80c020:	880f883a 	mov	r7,r17
  80c024:	800d883a 	mov	r6,r16
  80c028:	0807e140 	call	807e14 <__divdf3>
  80c02c:	1029883a 	mov	r20,r2
  80c030:	182b883a 	mov	r21,r3
  80c034:	d8c00c17 	ldw	r3,48(sp)
  80c038:	1805003a 	cmpeq	r2,r3,zero
  80c03c:	1000081e 	bne	r2,zero,80c060 <_dtoa_r+0x4b0>
  80c040:	0005883a 	mov	r2,zero
  80c044:	00cffc34 	movhi	r3,16368
  80c048:	180f883a 	mov	r7,r3
  80c04c:	a009883a 	mov	r4,r20
  80c050:	a80b883a 	mov	r5,r21
  80c054:	100d883a 	mov	r6,r2
  80c058:	08082040 	call	808204 <__ltdf2>
  80c05c:	1003fe16 	blt	r2,zero,80d058 <_dtoa_r+0x14a8>
  80c060:	b009883a 	mov	r4,r22
  80c064:	08083140 	call	808314 <__floatsidf>
  80c068:	180b883a 	mov	r5,r3
  80c06c:	1009883a 	mov	r4,r2
  80c070:	a00d883a 	mov	r6,r20
  80c074:	a80f883a 	mov	r7,r21
  80c078:	0807a500 	call	807a50 <__muldf3>
  80c07c:	0011883a 	mov	r8,zero
  80c080:	02500734 	movhi	r9,16412
  80c084:	1009883a 	mov	r4,r2
  80c088:	180b883a 	mov	r5,r3
  80c08c:	480f883a 	mov	r7,r9
  80c090:	400d883a 	mov	r6,r8
  80c094:	08079dc0 	call	8079dc <__adddf3>
  80c098:	d9000f17 	ldw	r4,60(sp)
  80c09c:	102d883a 	mov	r22,r2
  80c0a0:	00bf3034 	movhi	r2,64704
  80c0a4:	18b9883a 	add	fp,r3,r2
  80c0a8:	e02f883a 	mov	r23,fp
  80c0ac:	20028f1e 	bne	r4,zero,80caec <_dtoa_r+0xf3c>
  80c0b0:	0005883a 	mov	r2,zero
  80c0b4:	00d00534 	movhi	r3,16404
  80c0b8:	a009883a 	mov	r4,r20
  80c0bc:	a80b883a 	mov	r5,r21
  80c0c0:	180f883a 	mov	r7,r3
  80c0c4:	100d883a 	mov	r6,r2
  80c0c8:	080795c0 	call	80795c <__subdf3>
  80c0cc:	1009883a 	mov	r4,r2
  80c0d0:	e00f883a 	mov	r7,fp
  80c0d4:	180b883a 	mov	r5,r3
  80c0d8:	b00d883a 	mov	r6,r22
  80c0dc:	1025883a 	mov	r18,r2
  80c0e0:	1827883a 	mov	r19,r3
  80c0e4:	080817c0 	call	80817c <__gtdf2>
  80c0e8:	00834f16 	blt	zero,r2,80ce28 <_dtoa_r+0x1278>
  80c0ec:	e0e0003c 	xorhi	r3,fp,32768
  80c0f0:	9009883a 	mov	r4,r18
  80c0f4:	980b883a 	mov	r5,r19
  80c0f8:	180f883a 	mov	r7,r3
  80c0fc:	b00d883a 	mov	r6,r22
  80c100:	08082040 	call	808204 <__ltdf2>
  80c104:	1000080e 	bge	r2,zero,80c128 <_dtoa_r+0x578>
  80c108:	0027883a 	mov	r19,zero
  80c10c:	0025883a 	mov	r18,zero
  80c110:	d8802617 	ldw	r2,152(sp)
  80c114:	df000517 	ldw	fp,20(sp)
  80c118:	d8000615 	stw	zero,24(sp)
  80c11c:	0084303a 	nor	r2,zero,r2
  80c120:	d8800d15 	stw	r2,52(sp)
  80c124:	00019b06 	br	80c794 <_dtoa_r+0xbe4>
  80c128:	d9801217 	ldw	r6,72(sp)
  80c12c:	d8801317 	ldw	r2,76(sp)
  80c130:	3029883a 	mov	r20,r6
  80c134:	102b883a 	mov	r21,r2
  80c138:	d8c00217 	ldw	r3,8(sp)
  80c13c:	18008516 	blt	r3,zero,80c354 <_dtoa_r+0x7a4>
  80c140:	d9000d17 	ldw	r4,52(sp)
  80c144:	00800384 	movi	r2,14
  80c148:	11008216 	blt	r2,r4,80c354 <_dtoa_r+0x7a4>
  80c14c:	200490fa 	slli	r2,r4,3
  80c150:	d9802617 	ldw	r6,152(sp)
  80c154:	00c020b4 	movhi	r3,130
  80c158:	18f06004 	addi	r3,r3,-16000
  80c15c:	10c5883a 	add	r2,r2,r3
  80c160:	14800017 	ldw	r18,0(r2)
  80c164:	14c00117 	ldw	r19,4(r2)
  80c168:	30031e16 	blt	r6,zero,80cde4 <_dtoa_r+0x1234>
  80c16c:	d9000517 	ldw	r4,20(sp)
  80c170:	d8c00f17 	ldw	r3,60(sp)
  80c174:	a823883a 	mov	r17,r21
  80c178:	a021883a 	mov	r16,r20
  80c17c:	192b883a 	add	r21,r3,r4
  80c180:	2039883a 	mov	fp,r4
  80c184:	00000f06 	br	80c1c4 <_dtoa_r+0x614>
  80c188:	0005883a 	mov	r2,zero
  80c18c:	00d00934 	movhi	r3,16420
  80c190:	5009883a 	mov	r4,r10
  80c194:	580b883a 	mov	r5,r11
  80c198:	180f883a 	mov	r7,r3
  80c19c:	100d883a 	mov	r6,r2
  80c1a0:	0807a500 	call	807a50 <__muldf3>
  80c1a4:	180b883a 	mov	r5,r3
  80c1a8:	000d883a 	mov	r6,zero
  80c1ac:	000f883a 	mov	r7,zero
  80c1b0:	1009883a 	mov	r4,r2
  80c1b4:	1021883a 	mov	r16,r2
  80c1b8:	1823883a 	mov	r17,r3
  80c1bc:	08080f40 	call	8080f4 <__nedf2>
  80c1c0:	10004526 	beq	r2,zero,80c2d8 <_dtoa_r+0x728>
  80c1c4:	900d883a 	mov	r6,r18
  80c1c8:	980f883a 	mov	r7,r19
  80c1cc:	8009883a 	mov	r4,r16
  80c1d0:	880b883a 	mov	r5,r17
  80c1d4:	0807e140 	call	807e14 <__divdf3>
  80c1d8:	180b883a 	mov	r5,r3
  80c1dc:	1009883a 	mov	r4,r2
  80c1e0:	080840c0 	call	80840c <__fixdfsi>
  80c1e4:	1009883a 	mov	r4,r2
  80c1e8:	1029883a 	mov	r20,r2
  80c1ec:	08083140 	call	808314 <__floatsidf>
  80c1f0:	180f883a 	mov	r7,r3
  80c1f4:	9009883a 	mov	r4,r18
  80c1f8:	980b883a 	mov	r5,r19
  80c1fc:	100d883a 	mov	r6,r2
  80c200:	0807a500 	call	807a50 <__muldf3>
  80c204:	180f883a 	mov	r7,r3
  80c208:	880b883a 	mov	r5,r17
  80c20c:	8009883a 	mov	r4,r16
  80c210:	100d883a 	mov	r6,r2
  80c214:	080795c0 	call	80795c <__subdf3>
  80c218:	1015883a 	mov	r10,r2
  80c21c:	a0800c04 	addi	r2,r20,48
  80c220:	e0800005 	stb	r2,0(fp)
  80c224:	e7000044 	addi	fp,fp,1
  80c228:	1817883a 	mov	r11,r3
  80c22c:	e57fd61e 	bne	fp,r21,80c188 <_dtoa_r+0x5d8>
  80c230:	500d883a 	mov	r6,r10
  80c234:	180f883a 	mov	r7,r3
  80c238:	5009883a 	mov	r4,r10
  80c23c:	180b883a 	mov	r5,r3
  80c240:	08079dc0 	call	8079dc <__adddf3>
  80c244:	100d883a 	mov	r6,r2
  80c248:	9009883a 	mov	r4,r18
  80c24c:	980b883a 	mov	r5,r19
  80c250:	180f883a 	mov	r7,r3
  80c254:	1021883a 	mov	r16,r2
  80c258:	1823883a 	mov	r17,r3
  80c25c:	08082040 	call	808204 <__ltdf2>
  80c260:	10000816 	blt	r2,zero,80c284 <_dtoa_r+0x6d4>
  80c264:	980b883a 	mov	r5,r19
  80c268:	800d883a 	mov	r6,r16
  80c26c:	880f883a 	mov	r7,r17
  80c270:	9009883a 	mov	r4,r18
  80c274:	080806c0 	call	80806c <__eqdf2>
  80c278:	1000171e 	bne	r2,zero,80c2d8 <_dtoa_r+0x728>
  80c27c:	a080004c 	andi	r2,r20,1
  80c280:	10001526 	beq	r2,zero,80c2d8 <_dtoa_r+0x728>
  80c284:	d8800d17 	ldw	r2,52(sp)
  80c288:	d8800415 	stw	r2,16(sp)
  80c28c:	e009883a 	mov	r4,fp
  80c290:	213fffc4 	addi	r4,r4,-1
  80c294:	20c00007 	ldb	r3,0(r4)
  80c298:	00800e44 	movi	r2,57
  80c29c:	1880081e 	bne	r3,r2,80c2c0 <_dtoa_r+0x710>
  80c2a0:	d8800517 	ldw	r2,20(sp)
  80c2a4:	113ffa1e 	bne	r2,r4,80c290 <_dtoa_r+0x6e0>
  80c2a8:	d8c00417 	ldw	r3,16(sp)
  80c2ac:	d9800517 	ldw	r6,20(sp)
  80c2b0:	00800c04 	movi	r2,48
  80c2b4:	18c00044 	addi	r3,r3,1
  80c2b8:	d8c00415 	stw	r3,16(sp)
  80c2bc:	30800005 	stb	r2,0(r6)
  80c2c0:	20800003 	ldbu	r2,0(r4)
  80c2c4:	d8c00417 	ldw	r3,16(sp)
  80c2c8:	27000044 	addi	fp,r4,1
  80c2cc:	10800044 	addi	r2,r2,1
  80c2d0:	d8c00d15 	stw	r3,52(sp)
  80c2d4:	20800005 	stb	r2,0(r4)
  80c2d8:	d9001617 	ldw	r4,88(sp)
  80c2dc:	d9400717 	ldw	r5,28(sp)
  80c2e0:	080e6780 	call	80e678 <_Bfree>
  80c2e4:	e0000005 	stb	zero,0(fp)
  80c2e8:	d9800d17 	ldw	r6,52(sp)
  80c2ec:	d8c02717 	ldw	r3,156(sp)
  80c2f0:	d9002917 	ldw	r4,164(sp)
  80c2f4:	30800044 	addi	r2,r6,1
  80c2f8:	18800015 	stw	r2,0(r3)
  80c2fc:	20029c26 	beq	r4,zero,80cd70 <_dtoa_r+0x11c0>
  80c300:	d8c00517 	ldw	r3,20(sp)
  80c304:	27000015 	stw	fp,0(r4)
  80c308:	003e5d06 	br	80bc80 <_dtoa_r+0xd0>
  80c30c:	d9800d17 	ldw	r6,52(sp)
  80c310:	00c020b4 	movhi	r3,130
  80c314:	18f06004 	addi	r3,r3,-16000
  80c318:	d9001217 	ldw	r4,72(sp)
  80c31c:	300490fa 	slli	r2,r6,3
  80c320:	d9401317 	ldw	r5,76(sp)
  80c324:	10c5883a 	add	r2,r2,r3
  80c328:	12000017 	ldw	r8,0(r2)
  80c32c:	12400117 	ldw	r9,4(r2)
  80c330:	400d883a 	mov	r6,r8
  80c334:	480f883a 	mov	r7,r9
  80c338:	08082040 	call	808204 <__ltdf2>
  80c33c:	1000030e 	bge	r2,zero,80c34c <_dtoa_r+0x79c>
  80c340:	d8800d17 	ldw	r2,52(sp)
  80c344:	10bfffc4 	addi	r2,r2,-1
  80c348:	d8800d15 	stw	r2,52(sp)
  80c34c:	d8000c15 	stw	zero,48(sp)
  80c350:	003ea806 	br	80bdf4 <_dtoa_r+0x244>
  80c354:	d9000b17 	ldw	r4,44(sp)
  80c358:	202cc03a 	cmpne	r22,r4,zero
  80c35c:	b000c71e 	bne	r22,zero,80c67c <_dtoa_r+0xacc>
  80c360:	dc001117 	ldw	r16,68(sp)
  80c364:	dc801017 	ldw	r18,64(sp)
  80c368:	0027883a 	mov	r19,zero
  80c36c:	04000b0e 	bge	zero,r16,80c39c <_dtoa_r+0x7ec>
  80c370:	d8c00a17 	ldw	r3,40(sp)
  80c374:	00c0090e 	bge	zero,r3,80c39c <_dtoa_r+0x7ec>
  80c378:	8005883a 	mov	r2,r16
  80c37c:	1c011316 	blt	r3,r16,80c7cc <_dtoa_r+0xc1c>
  80c380:	d9000a17 	ldw	r4,40(sp)
  80c384:	d9801117 	ldw	r6,68(sp)
  80c388:	80a1c83a 	sub	r16,r16,r2
  80c38c:	2089c83a 	sub	r4,r4,r2
  80c390:	308dc83a 	sub	r6,r6,r2
  80c394:	d9000a15 	stw	r4,40(sp)
  80c398:	d9801115 	stw	r6,68(sp)
  80c39c:	d8801017 	ldw	r2,64(sp)
  80c3a0:	0080150e 	bge	zero,r2,80c3f8 <_dtoa_r+0x848>
  80c3a4:	d8c00b17 	ldw	r3,44(sp)
  80c3a8:	1805003a 	cmpeq	r2,r3,zero
  80c3ac:	1001c91e 	bne	r2,zero,80cad4 <_dtoa_r+0xf24>
  80c3b0:	04800e0e 	bge	zero,r18,80c3ec <_dtoa_r+0x83c>
  80c3b4:	d9001617 	ldw	r4,88(sp)
  80c3b8:	980b883a 	mov	r5,r19
  80c3bc:	900d883a 	mov	r6,r18
  80c3c0:	080f42c0 	call	80f42c <__pow5mult>
  80c3c4:	d9001617 	ldw	r4,88(sp)
  80c3c8:	d9800717 	ldw	r6,28(sp)
  80c3cc:	100b883a 	mov	r5,r2
  80c3d0:	1027883a 	mov	r19,r2
  80c3d4:	080f1080 	call	80f108 <__multiply>
  80c3d8:	d9001617 	ldw	r4,88(sp)
  80c3dc:	d9400717 	ldw	r5,28(sp)
  80c3e0:	1023883a 	mov	r17,r2
  80c3e4:	080e6780 	call	80e678 <_Bfree>
  80c3e8:	dc400715 	stw	r17,28(sp)
  80c3ec:	d9001017 	ldw	r4,64(sp)
  80c3f0:	248dc83a 	sub	r6,r4,r18
  80c3f4:	30010e1e 	bne	r6,zero,80c830 <_dtoa_r+0xc80>
  80c3f8:	d9001617 	ldw	r4,88(sp)
  80c3fc:	04400044 	movi	r17,1
  80c400:	880b883a 	mov	r5,r17
  80c404:	080f2f00 	call	80f2f0 <__i2b>
  80c408:	d9800917 	ldw	r6,36(sp)
  80c40c:	1025883a 	mov	r18,r2
  80c410:	0180040e 	bge	zero,r6,80c424 <_dtoa_r+0x874>
  80c414:	d9001617 	ldw	r4,88(sp)
  80c418:	100b883a 	mov	r5,r2
  80c41c:	080f42c0 	call	80f42c <__pow5mult>
  80c420:	1025883a 	mov	r18,r2
  80c424:	d8801717 	ldw	r2,92(sp)
  80c428:	8880f30e 	bge	r17,r2,80c7f8 <_dtoa_r+0xc48>
  80c42c:	0023883a 	mov	r17,zero
  80c430:	d9800917 	ldw	r6,36(sp)
  80c434:	30019e1e 	bne	r6,zero,80cab0 <_dtoa_r+0xf00>
  80c438:	00c00044 	movi	r3,1
  80c43c:	d9000a17 	ldw	r4,40(sp)
  80c440:	20c5883a 	add	r2,r4,r3
  80c444:	10c007cc 	andi	r3,r2,31
  80c448:	1800841e 	bne	r3,zero,80c65c <_dtoa_r+0xaac>
  80c44c:	00800704 	movi	r2,28
  80c450:	d9000a17 	ldw	r4,40(sp)
  80c454:	d9801117 	ldw	r6,68(sp)
  80c458:	80a1883a 	add	r16,r16,r2
  80c45c:	2089883a 	add	r4,r4,r2
  80c460:	308d883a 	add	r6,r6,r2
  80c464:	d9000a15 	stw	r4,40(sp)
  80c468:	d9801115 	stw	r6,68(sp)
  80c46c:	d8801117 	ldw	r2,68(sp)
  80c470:	0080050e 	bge	zero,r2,80c488 <_dtoa_r+0x8d8>
  80c474:	d9400717 	ldw	r5,28(sp)
  80c478:	d9001617 	ldw	r4,88(sp)
  80c47c:	100d883a 	mov	r6,r2
  80c480:	080efbc0 	call	80efbc <__lshift>
  80c484:	d8800715 	stw	r2,28(sp)
  80c488:	d8c00a17 	ldw	r3,40(sp)
  80c48c:	00c0050e 	bge	zero,r3,80c4a4 <_dtoa_r+0x8f4>
  80c490:	d9001617 	ldw	r4,88(sp)
  80c494:	900b883a 	mov	r5,r18
  80c498:	180d883a 	mov	r6,r3
  80c49c:	080efbc0 	call	80efbc <__lshift>
  80c4a0:	1025883a 	mov	r18,r2
  80c4a4:	d9000c17 	ldw	r4,48(sp)
  80c4a8:	2005003a 	cmpeq	r2,r4,zero
  80c4ac:	10016f26 	beq	r2,zero,80ca6c <_dtoa_r+0xebc>
  80c4b0:	d9000f17 	ldw	r4,60(sp)
  80c4b4:	0102170e 	bge	zero,r4,80cd14 <_dtoa_r+0x1164>
  80c4b8:	d9800b17 	ldw	r6,44(sp)
  80c4bc:	3005003a 	cmpeq	r2,r6,zero
  80c4c0:	1000881e 	bne	r2,zero,80c6e4 <_dtoa_r+0xb34>
  80c4c4:	0400050e 	bge	zero,r16,80c4dc <_dtoa_r+0x92c>
  80c4c8:	d9001617 	ldw	r4,88(sp)
  80c4cc:	980b883a 	mov	r5,r19
  80c4d0:	800d883a 	mov	r6,r16
  80c4d4:	080efbc0 	call	80efbc <__lshift>
  80c4d8:	1027883a 	mov	r19,r2
  80c4dc:	8804c03a 	cmpne	r2,r17,zero
  80c4e0:	1002541e 	bne	r2,zero,80ce34 <_dtoa_r+0x1284>
  80c4e4:	980b883a 	mov	r5,r19
  80c4e8:	dd800517 	ldw	r22,20(sp)
  80c4ec:	dcc00615 	stw	r19,24(sp)
  80c4f0:	a700004c 	andi	fp,r20,1
  80c4f4:	2827883a 	mov	r19,r5
  80c4f8:	d9000717 	ldw	r4,28(sp)
  80c4fc:	900b883a 	mov	r5,r18
  80c500:	080b9980 	call	80b998 <quorem>
  80c504:	d9000717 	ldw	r4,28(sp)
  80c508:	d9400617 	ldw	r5,24(sp)
  80c50c:	1023883a 	mov	r17,r2
  80c510:	8dc00c04 	addi	r23,r17,48
  80c514:	080e7d40 	call	80e7d4 <__mcmp>
  80c518:	d9001617 	ldw	r4,88(sp)
  80c51c:	900b883a 	mov	r5,r18
  80c520:	980d883a 	mov	r6,r19
  80c524:	1029883a 	mov	r20,r2
  80c528:	080ee300 	call	80ee30 <__mdiff>
  80c52c:	102b883a 	mov	r21,r2
  80c530:	10800317 	ldw	r2,12(r2)
  80c534:	1001281e 	bne	r2,zero,80c9d8 <_dtoa_r+0xe28>
  80c538:	d9000717 	ldw	r4,28(sp)
  80c53c:	a80b883a 	mov	r5,r21
  80c540:	080e7d40 	call	80e7d4 <__mcmp>
  80c544:	d9001617 	ldw	r4,88(sp)
  80c548:	1021883a 	mov	r16,r2
  80c54c:	a80b883a 	mov	r5,r21
  80c550:	080e6780 	call	80e678 <_Bfree>
  80c554:	8000041e 	bne	r16,zero,80c568 <_dtoa_r+0x9b8>
  80c558:	d8801717 	ldw	r2,92(sp)
  80c55c:	1000021e 	bne	r2,zero,80c568 <_dtoa_r+0x9b8>
  80c560:	e004c03a 	cmpne	r2,fp,zero
  80c564:	10011726 	beq	r2,zero,80c9c4 <_dtoa_r+0xe14>
  80c568:	a0010616 	blt	r20,zero,80c984 <_dtoa_r+0xdd4>
  80c56c:	a000041e 	bne	r20,zero,80c580 <_dtoa_r+0x9d0>
  80c570:	d8c01717 	ldw	r3,92(sp)
  80c574:	1800021e 	bne	r3,zero,80c580 <_dtoa_r+0x9d0>
  80c578:	e004c03a 	cmpne	r2,fp,zero
  80c57c:	10010126 	beq	r2,zero,80c984 <_dtoa_r+0xdd4>
  80c580:	04023d16 	blt	zero,r16,80ce78 <_dtoa_r+0x12c8>
  80c584:	b5c00005 	stb	r23,0(r22)
  80c588:	d9800517 	ldw	r6,20(sp)
  80c58c:	d9000f17 	ldw	r4,60(sp)
  80c590:	b5800044 	addi	r22,r22,1
  80c594:	3105883a 	add	r2,r6,r4
  80c598:	b0806526 	beq	r22,r2,80c730 <_dtoa_r+0xb80>
  80c59c:	d9400717 	ldw	r5,28(sp)
  80c5a0:	d9001617 	ldw	r4,88(sp)
  80c5a4:	01800284 	movi	r6,10
  80c5a8:	000f883a 	mov	r7,zero
  80c5ac:	080f32c0 	call	80f32c <__multadd>
  80c5b0:	d8800715 	stw	r2,28(sp)
  80c5b4:	d8800617 	ldw	r2,24(sp)
  80c5b8:	14c10c26 	beq	r2,r19,80c9ec <_dtoa_r+0xe3c>
  80c5bc:	d9400617 	ldw	r5,24(sp)
  80c5c0:	d9001617 	ldw	r4,88(sp)
  80c5c4:	01800284 	movi	r6,10
  80c5c8:	000f883a 	mov	r7,zero
  80c5cc:	080f32c0 	call	80f32c <__multadd>
  80c5d0:	d9001617 	ldw	r4,88(sp)
  80c5d4:	980b883a 	mov	r5,r19
  80c5d8:	01800284 	movi	r6,10
  80c5dc:	000f883a 	mov	r7,zero
  80c5e0:	d8800615 	stw	r2,24(sp)
  80c5e4:	080f32c0 	call	80f32c <__multadd>
  80c5e8:	1027883a 	mov	r19,r2
  80c5ec:	003fc206 	br	80c4f8 <_dtoa_r+0x948>
  80c5f0:	2445c83a 	sub	r2,r4,r17
  80c5f4:	a088983a 	sll	r4,r20,r2
  80c5f8:	003e4b06 	br	80bf28 <_dtoa_r+0x378>
  80c5fc:	01bfffc4 	movi	r6,-1
  80c600:	00800044 	movi	r2,1
  80c604:	d9800e15 	stw	r6,56(sp)
  80c608:	d9800f15 	stw	r6,60(sp)
  80c60c:	d8800b15 	stw	r2,44(sp)
  80c610:	d8c01617 	ldw	r3,88(sp)
  80c614:	008005c4 	movi	r2,23
  80c618:	18001115 	stw	zero,68(r3)
  80c61c:	1580082e 	bgeu	r2,r22,80c640 <_dtoa_r+0xa90>
  80c620:	00c00104 	movi	r3,4
  80c624:	0009883a 	mov	r4,zero
  80c628:	18c7883a 	add	r3,r3,r3
  80c62c:	18800504 	addi	r2,r3,20
  80c630:	21000044 	addi	r4,r4,1
  80c634:	b0bffc2e 	bgeu	r22,r2,80c628 <_dtoa_r+0xa78>
  80c638:	d9801617 	ldw	r6,88(sp)
  80c63c:	31001115 	stw	r4,68(r6)
  80c640:	dc000f17 	ldw	r16,60(sp)
  80c644:	003e4b06 	br	80bf74 <_dtoa_r+0x3c4>
  80c648:	d9801717 	ldw	r6,92(sp)
  80c64c:	0023883a 	mov	r17,zero
  80c650:	31bfff04 	addi	r6,r6,-4
  80c654:	d9801715 	stw	r6,92(sp)
  80c658:	003df806 	br	80be3c <_dtoa_r+0x28c>
  80c65c:	00800804 	movi	r2,32
  80c660:	10c9c83a 	sub	r4,r2,r3
  80c664:	00c00104 	movi	r3,4
  80c668:	19005a16 	blt	r3,r4,80c7d4 <_dtoa_r+0xc24>
  80c66c:	008000c4 	movi	r2,3
  80c670:	113f7e16 	blt	r2,r4,80c46c <_dtoa_r+0x8bc>
  80c674:	20800704 	addi	r2,r4,28
  80c678:	003f7506 	br	80c450 <_dtoa_r+0x8a0>
  80c67c:	d9801717 	ldw	r6,92(sp)
  80c680:	00800044 	movi	r2,1
  80c684:	1180a10e 	bge	r2,r6,80c90c <_dtoa_r+0xd5c>
  80c688:	d9800f17 	ldw	r6,60(sp)
  80c68c:	d8c01017 	ldw	r3,64(sp)
  80c690:	30bfffc4 	addi	r2,r6,-1
  80c694:	1881c616 	blt	r3,r2,80cdb0 <_dtoa_r+0x1200>
  80c698:	18a5c83a 	sub	r18,r3,r2
  80c69c:	d8800f17 	ldw	r2,60(sp)
  80c6a0:	10026216 	blt	r2,zero,80d02c <_dtoa_r+0x147c>
  80c6a4:	dc001117 	ldw	r16,68(sp)
  80c6a8:	1007883a 	mov	r3,r2
  80c6ac:	d9800a17 	ldw	r6,40(sp)
  80c6b0:	d8801117 	ldw	r2,68(sp)
  80c6b4:	d9001617 	ldw	r4,88(sp)
  80c6b8:	30cd883a 	add	r6,r6,r3
  80c6bc:	10c5883a 	add	r2,r2,r3
  80c6c0:	01400044 	movi	r5,1
  80c6c4:	d9800a15 	stw	r6,40(sp)
  80c6c8:	d8801115 	stw	r2,68(sp)
  80c6cc:	080f2f00 	call	80f2f0 <__i2b>
  80c6d0:	1027883a 	mov	r19,r2
  80c6d4:	003f2506 	br	80c36c <_dtoa_r+0x7bc>
  80c6d8:	00c020b4 	movhi	r3,130
  80c6dc:	18f04304 	addi	r3,r3,-16116
  80c6e0:	003d6706 	br	80bc80 <_dtoa_r+0xd0>
  80c6e4:	dd800517 	ldw	r22,20(sp)
  80c6e8:	04000044 	movi	r16,1
  80c6ec:	00000706 	br	80c70c <_dtoa_r+0xb5c>
  80c6f0:	d9400717 	ldw	r5,28(sp)
  80c6f4:	d9001617 	ldw	r4,88(sp)
  80c6f8:	01800284 	movi	r6,10
  80c6fc:	000f883a 	mov	r7,zero
  80c700:	080f32c0 	call	80f32c <__multadd>
  80c704:	d8800715 	stw	r2,28(sp)
  80c708:	84000044 	addi	r16,r16,1
  80c70c:	d9000717 	ldw	r4,28(sp)
  80c710:	900b883a 	mov	r5,r18
  80c714:	080b9980 	call	80b998 <quorem>
  80c718:	15c00c04 	addi	r23,r2,48
  80c71c:	b5c00005 	stb	r23,0(r22)
  80c720:	d8c00f17 	ldw	r3,60(sp)
  80c724:	b5800044 	addi	r22,r22,1
  80c728:	80fff116 	blt	r16,r3,80c6f0 <_dtoa_r+0xb40>
  80c72c:	d8000615 	stw	zero,24(sp)
  80c730:	d9400717 	ldw	r5,28(sp)
  80c734:	d9001617 	ldw	r4,88(sp)
  80c738:	01800044 	movi	r6,1
  80c73c:	080efbc0 	call	80efbc <__lshift>
  80c740:	1009883a 	mov	r4,r2
  80c744:	900b883a 	mov	r5,r18
  80c748:	d8800715 	stw	r2,28(sp)
  80c74c:	080e7d40 	call	80e7d4 <__mcmp>
  80c750:	00803c0e 	bge	zero,r2,80c844 <_dtoa_r+0xc94>
  80c754:	b009883a 	mov	r4,r22
  80c758:	213fffc4 	addi	r4,r4,-1
  80c75c:	21400003 	ldbu	r5,0(r4)
  80c760:	00800e44 	movi	r2,57
  80c764:	28c03fcc 	andi	r3,r5,255
  80c768:	18c0201c 	xori	r3,r3,128
  80c76c:	18ffe004 	addi	r3,r3,-128
  80c770:	1881981e 	bne	r3,r2,80cdd4 <_dtoa_r+0x1224>
  80c774:	d9800517 	ldw	r6,20(sp)
  80c778:	21bff71e 	bne	r4,r6,80c758 <_dtoa_r+0xba8>
  80c77c:	d8800d17 	ldw	r2,52(sp)
  80c780:	37000044 	addi	fp,r6,1
  80c784:	10800044 	addi	r2,r2,1
  80c788:	d8800d15 	stw	r2,52(sp)
  80c78c:	00800c44 	movi	r2,49
  80c790:	30800005 	stb	r2,0(r6)
  80c794:	d9001617 	ldw	r4,88(sp)
  80c798:	900b883a 	mov	r5,r18
  80c79c:	080e6780 	call	80e678 <_Bfree>
  80c7a0:	983ecd26 	beq	r19,zero,80c2d8 <_dtoa_r+0x728>
  80c7a4:	d8c00617 	ldw	r3,24(sp)
  80c7a8:	18000426 	beq	r3,zero,80c7bc <_dtoa_r+0xc0c>
  80c7ac:	1cc00326 	beq	r3,r19,80c7bc <_dtoa_r+0xc0c>
  80c7b0:	d9001617 	ldw	r4,88(sp)
  80c7b4:	180b883a 	mov	r5,r3
  80c7b8:	080e6780 	call	80e678 <_Bfree>
  80c7bc:	d9001617 	ldw	r4,88(sp)
  80c7c0:	980b883a 	mov	r5,r19
  80c7c4:	080e6780 	call	80e678 <_Bfree>
  80c7c8:	003ec306 	br	80c2d8 <_dtoa_r+0x728>
  80c7cc:	1805883a 	mov	r2,r3
  80c7d0:	003eeb06 	br	80c380 <_dtoa_r+0x7d0>
  80c7d4:	d9800a17 	ldw	r6,40(sp)
  80c7d8:	d8c01117 	ldw	r3,68(sp)
  80c7dc:	20bfff04 	addi	r2,r4,-4
  80c7e0:	308d883a 	add	r6,r6,r2
  80c7e4:	1887883a 	add	r3,r3,r2
  80c7e8:	80a1883a 	add	r16,r16,r2
  80c7ec:	d9800a15 	stw	r6,40(sp)
  80c7f0:	d8c01115 	stw	r3,68(sp)
  80c7f4:	003f1d06 	br	80c46c <_dtoa_r+0x8bc>
  80c7f8:	a03f0c1e 	bne	r20,zero,80c42c <_dtoa_r+0x87c>
  80c7fc:	00800434 	movhi	r2,16
  80c800:	10bfffc4 	addi	r2,r2,-1
  80c804:	a884703a 	and	r2,r21,r2
  80c808:	103f081e 	bne	r2,zero,80c42c <_dtoa_r+0x87c>
  80c80c:	a89ffc2c 	andhi	r2,r21,32752
  80c810:	103f0626 	beq	r2,zero,80c42c <_dtoa_r+0x87c>
  80c814:	d8c01117 	ldw	r3,68(sp)
  80c818:	d9000a17 	ldw	r4,40(sp)
  80c81c:	18c00044 	addi	r3,r3,1
  80c820:	21000044 	addi	r4,r4,1
  80c824:	d8c01115 	stw	r3,68(sp)
  80c828:	d9000a15 	stw	r4,40(sp)
  80c82c:	003f0006 	br	80c430 <_dtoa_r+0x880>
  80c830:	d9400717 	ldw	r5,28(sp)
  80c834:	d9001617 	ldw	r4,88(sp)
  80c838:	080f42c0 	call	80f42c <__pow5mult>
  80c83c:	d8800715 	stw	r2,28(sp)
  80c840:	003eed06 	br	80c3f8 <_dtoa_r+0x848>
  80c844:	1000021e 	bne	r2,zero,80c850 <_dtoa_r+0xca0>
  80c848:	b880004c 	andi	r2,r23,1
  80c84c:	103fc11e 	bne	r2,zero,80c754 <_dtoa_r+0xba4>
  80c850:	b5bfffc4 	addi	r22,r22,-1
  80c854:	b0c00007 	ldb	r3,0(r22)
  80c858:	00800c04 	movi	r2,48
  80c85c:	18bffc26 	beq	r3,r2,80c850 <_dtoa_r+0xca0>
  80c860:	b7000044 	addi	fp,r22,1
  80c864:	003fcb06 	br	80c794 <_dtoa_r+0xbe4>
  80c868:	d9800d17 	ldw	r6,52(sp)
  80c86c:	018fc83a 	sub	r7,zero,r6
  80c870:	3801f726 	beq	r7,zero,80d050 <_dtoa_r+0x14a0>
  80c874:	398003cc 	andi	r6,r7,15
  80c878:	300c90fa 	slli	r6,r6,3
  80c87c:	014020b4 	movhi	r5,130
  80c880:	29706004 	addi	r5,r5,-16000
  80c884:	d9001217 	ldw	r4,72(sp)
  80c888:	314d883a 	add	r6,r6,r5
  80c88c:	30c00117 	ldw	r3,4(r6)
  80c890:	30800017 	ldw	r2,0(r6)
  80c894:	d9401317 	ldw	r5,76(sp)
  80c898:	3821d13a 	srai	r16,r7,4
  80c89c:	100d883a 	mov	r6,r2
  80c8a0:	180f883a 	mov	r7,r3
  80c8a4:	0807a500 	call	807a50 <__muldf3>
  80c8a8:	1011883a 	mov	r8,r2
  80c8ac:	1813883a 	mov	r9,r3
  80c8b0:	1029883a 	mov	r20,r2
  80c8b4:	182b883a 	mov	r21,r3
  80c8b8:	8001e526 	beq	r16,zero,80d050 <_dtoa_r+0x14a0>
  80c8bc:	05800084 	movi	r22,2
  80c8c0:	044020b4 	movhi	r17,130
  80c8c4:	8c709204 	addi	r17,r17,-15800
  80c8c8:	8080004c 	andi	r2,r16,1
  80c8cc:	1005003a 	cmpeq	r2,r2,zero
  80c8d0:	1000081e 	bne	r2,zero,80c8f4 <_dtoa_r+0xd44>
  80c8d4:	89800017 	ldw	r6,0(r17)
  80c8d8:	89c00117 	ldw	r7,4(r17)
  80c8dc:	480b883a 	mov	r5,r9
  80c8e0:	4009883a 	mov	r4,r8
  80c8e4:	0807a500 	call	807a50 <__muldf3>
  80c8e8:	1011883a 	mov	r8,r2
  80c8ec:	b5800044 	addi	r22,r22,1
  80c8f0:	1813883a 	mov	r9,r3
  80c8f4:	8021d07a 	srai	r16,r16,1
  80c8f8:	8c400204 	addi	r17,r17,8
  80c8fc:	803ff21e 	bne	r16,zero,80c8c8 <_dtoa_r+0xd18>
  80c900:	4029883a 	mov	r20,r8
  80c904:	482b883a 	mov	r21,r9
  80c908:	003dca06 	br	80c034 <_dtoa_r+0x484>
  80c90c:	d9000817 	ldw	r4,32(sp)
  80c910:	2005003a 	cmpeq	r2,r4,zero
  80c914:	1001f61e 	bne	r2,zero,80d0f0 <_dtoa_r+0x1540>
  80c918:	dc001117 	ldw	r16,68(sp)
  80c91c:	dc801017 	ldw	r18,64(sp)
  80c920:	18c10cc4 	addi	r3,r3,1075
  80c924:	003f6106 	br	80c6ac <_dtoa_r+0xafc>
  80c928:	d8000b15 	stw	zero,44(sp)
  80c92c:	d9802617 	ldw	r6,152(sp)
  80c930:	d8c00d17 	ldw	r3,52(sp)
  80c934:	30800044 	addi	r2,r6,1
  80c938:	18ad883a 	add	r22,r3,r2
  80c93c:	b13fffc4 	addi	r4,r22,-1
  80c940:	d9000e15 	stw	r4,56(sp)
  80c944:	0581f60e 	bge	zero,r22,80d120 <_dtoa_r+0x1570>
  80c948:	dd800f15 	stw	r22,60(sp)
  80c94c:	003f3006 	br	80c610 <_dtoa_r+0xa60>
  80c950:	d8000b15 	stw	zero,44(sp)
  80c954:	d9002617 	ldw	r4,152(sp)
  80c958:	0101eb0e 	bge	zero,r4,80d108 <_dtoa_r+0x1558>
  80c95c:	202d883a 	mov	r22,r4
  80c960:	d9000e15 	stw	r4,56(sp)
  80c964:	d9000f15 	stw	r4,60(sp)
  80c968:	003f2906 	br	80c610 <_dtoa_r+0xa60>
  80c96c:	01800044 	movi	r6,1
  80c970:	d9800b15 	stw	r6,44(sp)
  80c974:	003ff706 	br	80c954 <_dtoa_r+0xda4>
  80c978:	01000044 	movi	r4,1
  80c97c:	d9000b15 	stw	r4,44(sp)
  80c980:	003fea06 	br	80c92c <_dtoa_r+0xd7c>
  80c984:	04000c0e 	bge	zero,r16,80c9b8 <_dtoa_r+0xe08>
  80c988:	d9400717 	ldw	r5,28(sp)
  80c98c:	d9001617 	ldw	r4,88(sp)
  80c990:	01800044 	movi	r6,1
  80c994:	080efbc0 	call	80efbc <__lshift>
  80c998:	1009883a 	mov	r4,r2
  80c99c:	900b883a 	mov	r5,r18
  80c9a0:	d8800715 	stw	r2,28(sp)
  80c9a4:	080e7d40 	call	80e7d4 <__mcmp>
  80c9a8:	0081e00e 	bge	zero,r2,80d12c <_dtoa_r+0x157c>
  80c9ac:	bdc00044 	addi	r23,r23,1
  80c9b0:	00800e84 	movi	r2,58
  80c9b4:	b881a226 	beq	r23,r2,80d040 <_dtoa_r+0x1490>
  80c9b8:	b7000044 	addi	fp,r22,1
  80c9bc:	b5c00005 	stb	r23,0(r22)
  80c9c0:	003f7406 	br	80c794 <_dtoa_r+0xbe4>
  80c9c4:	00800e44 	movi	r2,57
  80c9c8:	b8819d26 	beq	r23,r2,80d040 <_dtoa_r+0x1490>
  80c9cc:	053ffa0e 	bge	zero,r20,80c9b8 <_dtoa_r+0xe08>
  80c9d0:	8dc00c44 	addi	r23,r17,49
  80c9d4:	003ff806 	br	80c9b8 <_dtoa_r+0xe08>
  80c9d8:	d9001617 	ldw	r4,88(sp)
  80c9dc:	a80b883a 	mov	r5,r21
  80c9e0:	04000044 	movi	r16,1
  80c9e4:	080e6780 	call	80e678 <_Bfree>
  80c9e8:	003edf06 	br	80c568 <_dtoa_r+0x9b8>
  80c9ec:	d9001617 	ldw	r4,88(sp)
  80c9f0:	980b883a 	mov	r5,r19
  80c9f4:	01800284 	movi	r6,10
  80c9f8:	000f883a 	mov	r7,zero
  80c9fc:	080f32c0 	call	80f32c <__multadd>
  80ca00:	1027883a 	mov	r19,r2
  80ca04:	d8800615 	stw	r2,24(sp)
  80ca08:	003ebb06 	br	80c4f8 <_dtoa_r+0x948>
  80ca0c:	d9801117 	ldw	r6,68(sp)
  80ca10:	d8800d17 	ldw	r2,52(sp)
  80ca14:	d8000915 	stw	zero,36(sp)
  80ca18:	308dc83a 	sub	r6,r6,r2
  80ca1c:	0087c83a 	sub	r3,zero,r2
  80ca20:	d9801115 	stw	r6,68(sp)
  80ca24:	d8c01015 	stw	r3,64(sp)
  80ca28:	003cfe06 	br	80be24 <_dtoa_r+0x274>
  80ca2c:	018dc83a 	sub	r6,zero,r6
  80ca30:	d9801115 	stw	r6,68(sp)
  80ca34:	d8000a15 	stw	zero,40(sp)
  80ca38:	003cf306 	br	80be08 <_dtoa_r+0x258>
  80ca3c:	d9000d17 	ldw	r4,52(sp)
  80ca40:	08083140 	call	808314 <__floatsidf>
  80ca44:	880b883a 	mov	r5,r17
  80ca48:	8009883a 	mov	r4,r16
  80ca4c:	180f883a 	mov	r7,r3
  80ca50:	100d883a 	mov	r6,r2
  80ca54:	08080f40 	call	8080f4 <__nedf2>
  80ca58:	103ce126 	beq	r2,zero,80bde0 <_dtoa_r+0x230>
  80ca5c:	d9800d17 	ldw	r6,52(sp)
  80ca60:	31bfffc4 	addi	r6,r6,-1
  80ca64:	d9800d15 	stw	r6,52(sp)
  80ca68:	003cdd06 	br	80bde0 <_dtoa_r+0x230>
  80ca6c:	d9000717 	ldw	r4,28(sp)
  80ca70:	900b883a 	mov	r5,r18
  80ca74:	080e7d40 	call	80e7d4 <__mcmp>
  80ca78:	103e8d0e 	bge	r2,zero,80c4b0 <_dtoa_r+0x900>
  80ca7c:	d9400717 	ldw	r5,28(sp)
  80ca80:	d9001617 	ldw	r4,88(sp)
  80ca84:	01800284 	movi	r6,10
  80ca88:	000f883a 	mov	r7,zero
  80ca8c:	080f32c0 	call	80f32c <__multadd>
  80ca90:	d9800d17 	ldw	r6,52(sp)
  80ca94:	d8800715 	stw	r2,28(sp)
  80ca98:	31bfffc4 	addi	r6,r6,-1
  80ca9c:	d9800d15 	stw	r6,52(sp)
  80caa0:	b001a71e 	bne	r22,zero,80d140 <_dtoa_r+0x1590>
  80caa4:	d8800e17 	ldw	r2,56(sp)
  80caa8:	d8800f15 	stw	r2,60(sp)
  80caac:	003e8006 	br	80c4b0 <_dtoa_r+0x900>
  80cab0:	90800417 	ldw	r2,16(r18)
  80cab4:	1085883a 	add	r2,r2,r2
  80cab8:	1085883a 	add	r2,r2,r2
  80cabc:	1485883a 	add	r2,r2,r18
  80cac0:	11000417 	ldw	r4,16(r2)
  80cac4:	080e6a00 	call	80e6a0 <__hi0bits>
  80cac8:	00c00804 	movi	r3,32
  80cacc:	1887c83a 	sub	r3,r3,r2
  80cad0:	003e5a06 	br	80c43c <_dtoa_r+0x88c>
  80cad4:	d9400717 	ldw	r5,28(sp)
  80cad8:	d9801017 	ldw	r6,64(sp)
  80cadc:	d9001617 	ldw	r4,88(sp)
  80cae0:	080f42c0 	call	80f42c <__pow5mult>
  80cae4:	d8800715 	stw	r2,28(sp)
  80cae8:	003e4306 	br	80c3f8 <_dtoa_r+0x848>
  80caec:	d9800f17 	ldw	r6,60(sp)
  80caf0:	d8800d17 	ldw	r2,52(sp)
  80caf4:	d9800315 	stw	r6,12(sp)
  80caf8:	d8800415 	stw	r2,16(sp)
  80cafc:	d8c00b17 	ldw	r3,44(sp)
  80cb00:	1805003a 	cmpeq	r2,r3,zero
  80cb04:	1000e21e 	bne	r2,zero,80ce90 <_dtoa_r+0x12e0>
  80cb08:	d9000317 	ldw	r4,12(sp)
  80cb0c:	0005883a 	mov	r2,zero
  80cb10:	00cff834 	movhi	r3,16352
  80cb14:	200c90fa 	slli	r6,r4,3
  80cb18:	010020b4 	movhi	r4,130
  80cb1c:	21306004 	addi	r4,r4,-16000
  80cb20:	180b883a 	mov	r5,r3
  80cb24:	310d883a 	add	r6,r6,r4
  80cb28:	327fff17 	ldw	r9,-4(r6)
  80cb2c:	323ffe17 	ldw	r8,-8(r6)
  80cb30:	1009883a 	mov	r4,r2
  80cb34:	480f883a 	mov	r7,r9
  80cb38:	400d883a 	mov	r6,r8
  80cb3c:	0807e140 	call	807e14 <__divdf3>
  80cb40:	180b883a 	mov	r5,r3
  80cb44:	b00d883a 	mov	r6,r22
  80cb48:	b80f883a 	mov	r7,r23
  80cb4c:	1009883a 	mov	r4,r2
  80cb50:	080795c0 	call	80795c <__subdf3>
  80cb54:	a80b883a 	mov	r5,r21
  80cb58:	a009883a 	mov	r4,r20
  80cb5c:	d8c01915 	stw	r3,100(sp)
  80cb60:	d8801815 	stw	r2,96(sp)
  80cb64:	080840c0 	call	80840c <__fixdfsi>
  80cb68:	1009883a 	mov	r4,r2
  80cb6c:	1027883a 	mov	r19,r2
  80cb70:	08083140 	call	808314 <__floatsidf>
  80cb74:	a80b883a 	mov	r5,r21
  80cb78:	a009883a 	mov	r4,r20
  80cb7c:	180f883a 	mov	r7,r3
  80cb80:	100d883a 	mov	r6,r2
  80cb84:	080795c0 	call	80795c <__subdf3>
  80cb88:	d9801817 	ldw	r6,96(sp)
  80cb8c:	1823883a 	mov	r17,r3
  80cb90:	d8801415 	stw	r2,80(sp)
  80cb94:	302d883a 	mov	r22,r6
  80cb98:	d9800517 	ldw	r6,20(sp)
  80cb9c:	9cc00c04 	addi	r19,r19,48
  80cba0:	dc401515 	stw	r17,84(sp)
  80cba4:	d8c01917 	ldw	r3,100(sp)
  80cba8:	34c00005 	stb	r19,0(r6)
  80cbac:	d8800517 	ldw	r2,20(sp)
  80cbb0:	d9401917 	ldw	r5,100(sp)
  80cbb4:	d9801417 	ldw	r6,80(sp)
  80cbb8:	b009883a 	mov	r4,r22
  80cbbc:	880f883a 	mov	r7,r17
  80cbc0:	182f883a 	mov	r23,r3
  80cbc4:	17000044 	addi	fp,r2,1
  80cbc8:	080817c0 	call	80817c <__gtdf2>
  80cbcc:	00804e16 	blt	zero,r2,80cd08 <_dtoa_r+0x1158>
  80cbd0:	d9801417 	ldw	r6,80(sp)
  80cbd4:	0005883a 	mov	r2,zero
  80cbd8:	00cffc34 	movhi	r3,16368
  80cbdc:	180b883a 	mov	r5,r3
  80cbe0:	880f883a 	mov	r7,r17
  80cbe4:	1009883a 	mov	r4,r2
  80cbe8:	080795c0 	call	80795c <__subdf3>
  80cbec:	d9401917 	ldw	r5,100(sp)
  80cbf0:	180f883a 	mov	r7,r3
  80cbf4:	b009883a 	mov	r4,r22
  80cbf8:	100d883a 	mov	r6,r2
  80cbfc:	080817c0 	call	80817c <__gtdf2>
  80cc00:	00bda216 	blt	zero,r2,80c28c <_dtoa_r+0x6dc>
  80cc04:	d8c00317 	ldw	r3,12(sp)
  80cc08:	00800044 	movi	r2,1
  80cc0c:	10c01216 	blt	r2,r3,80cc58 <_dtoa_r+0x10a8>
  80cc10:	003d4506 	br	80c128 <_dtoa_r+0x578>
  80cc14:	d9801417 	ldw	r6,80(sp)
  80cc18:	0005883a 	mov	r2,zero
  80cc1c:	00cffc34 	movhi	r3,16368
  80cc20:	180b883a 	mov	r5,r3
  80cc24:	880f883a 	mov	r7,r17
  80cc28:	1009883a 	mov	r4,r2
  80cc2c:	080795c0 	call	80795c <__subdf3>
  80cc30:	d9c01b17 	ldw	r7,108(sp)
  80cc34:	180b883a 	mov	r5,r3
  80cc38:	1009883a 	mov	r4,r2
  80cc3c:	b00d883a 	mov	r6,r22
  80cc40:	08082040 	call	808204 <__ltdf2>
  80cc44:	103d9116 	blt	r2,zero,80c28c <_dtoa_r+0x6dc>
  80cc48:	d9800517 	ldw	r6,20(sp)
  80cc4c:	d9000317 	ldw	r4,12(sp)
  80cc50:	3105883a 	add	r2,r6,r4
  80cc54:	e0bd3426 	beq	fp,r2,80c128 <_dtoa_r+0x578>
  80cc58:	04500934 	movhi	r17,16420
  80cc5c:	0021883a 	mov	r16,zero
  80cc60:	b80b883a 	mov	r5,r23
  80cc64:	b009883a 	mov	r4,r22
  80cc68:	800d883a 	mov	r6,r16
  80cc6c:	880f883a 	mov	r7,r17
  80cc70:	0807a500 	call	807a50 <__muldf3>
  80cc74:	d9401517 	ldw	r5,84(sp)
  80cc78:	d9001417 	ldw	r4,80(sp)
  80cc7c:	880f883a 	mov	r7,r17
  80cc80:	000d883a 	mov	r6,zero
  80cc84:	d8801a15 	stw	r2,104(sp)
  80cc88:	d8c01b15 	stw	r3,108(sp)
  80cc8c:	0807a500 	call	807a50 <__muldf3>
  80cc90:	180b883a 	mov	r5,r3
  80cc94:	1009883a 	mov	r4,r2
  80cc98:	1823883a 	mov	r17,r3
  80cc9c:	1021883a 	mov	r16,r2
  80cca0:	080840c0 	call	80840c <__fixdfsi>
  80cca4:	1009883a 	mov	r4,r2
  80cca8:	102b883a 	mov	r21,r2
  80ccac:	08083140 	call	808314 <__floatsidf>
  80ccb0:	880b883a 	mov	r5,r17
  80ccb4:	8009883a 	mov	r4,r16
  80ccb8:	180f883a 	mov	r7,r3
  80ccbc:	100d883a 	mov	r6,r2
  80ccc0:	080795c0 	call	80795c <__subdf3>
  80ccc4:	1021883a 	mov	r16,r2
  80ccc8:	d9001b17 	ldw	r4,108(sp)
  80cccc:	1823883a 	mov	r17,r3
  80ccd0:	dc001415 	stw	r16,80(sp)
  80ccd4:	ad400c04 	addi	r21,r21,48
  80ccd8:	dc401515 	stw	r17,84(sp)
  80ccdc:	d8801a17 	ldw	r2,104(sp)
  80cce0:	e5400005 	stb	r21,0(fp)
  80cce4:	202f883a 	mov	r23,r4
  80cce8:	d9c01b17 	ldw	r7,108(sp)
  80ccec:	d9001417 	ldw	r4,80(sp)
  80ccf0:	880b883a 	mov	r5,r17
  80ccf4:	100d883a 	mov	r6,r2
  80ccf8:	102d883a 	mov	r22,r2
  80ccfc:	e7000044 	addi	fp,fp,1
  80cd00:	08082040 	call	808204 <__ltdf2>
  80cd04:	103fc30e 	bge	r2,zero,80cc14 <_dtoa_r+0x1064>
  80cd08:	d9000417 	ldw	r4,16(sp)
  80cd0c:	d9000d15 	stw	r4,52(sp)
  80cd10:	003d7106 	br	80c2d8 <_dtoa_r+0x728>
  80cd14:	d9801717 	ldw	r6,92(sp)
  80cd18:	00800084 	movi	r2,2
  80cd1c:	11bde60e 	bge	r2,r6,80c4b8 <_dtoa_r+0x908>
  80cd20:	203cfb1e 	bne	r4,zero,80c110 <_dtoa_r+0x560>
  80cd24:	d9001617 	ldw	r4,88(sp)
  80cd28:	900b883a 	mov	r5,r18
  80cd2c:	01800144 	movi	r6,5
  80cd30:	000f883a 	mov	r7,zero
  80cd34:	080f32c0 	call	80f32c <__multadd>
  80cd38:	d9000717 	ldw	r4,28(sp)
  80cd3c:	100b883a 	mov	r5,r2
  80cd40:	1025883a 	mov	r18,r2
  80cd44:	080e7d40 	call	80e7d4 <__mcmp>
  80cd48:	00bcf10e 	bge	zero,r2,80c110 <_dtoa_r+0x560>
  80cd4c:	d8c00d17 	ldw	r3,52(sp)
  80cd50:	d9000517 	ldw	r4,20(sp)
  80cd54:	d8000615 	stw	zero,24(sp)
  80cd58:	18c00044 	addi	r3,r3,1
  80cd5c:	d8c00d15 	stw	r3,52(sp)
  80cd60:	00800c44 	movi	r2,49
  80cd64:	27000044 	addi	fp,r4,1
  80cd68:	20800005 	stb	r2,0(r4)
  80cd6c:	003e8906 	br	80c794 <_dtoa_r+0xbe4>
  80cd70:	d8c00517 	ldw	r3,20(sp)
  80cd74:	003bc206 	br	80bc80 <_dtoa_r+0xd0>
  80cd78:	018020b4 	movhi	r6,130
  80cd7c:	31b09204 	addi	r6,r6,-15800
  80cd80:	30c00917 	ldw	r3,36(r6)
  80cd84:	30800817 	ldw	r2,32(r6)
  80cd88:	d9001217 	ldw	r4,72(sp)
  80cd8c:	d9401317 	ldw	r5,76(sp)
  80cd90:	180f883a 	mov	r7,r3
  80cd94:	100d883a 	mov	r6,r2
  80cd98:	0807e140 	call	807e14 <__divdf3>
  80cd9c:	948003cc 	andi	r18,r18,15
  80cda0:	058000c4 	movi	r22,3
  80cda4:	1029883a 	mov	r20,r2
  80cda8:	182b883a 	mov	r21,r3
  80cdac:	003c8906 	br	80bfd4 <_dtoa_r+0x424>
  80cdb0:	d9001017 	ldw	r4,64(sp)
  80cdb4:	d9800917 	ldw	r6,36(sp)
  80cdb8:	0025883a 	mov	r18,zero
  80cdbc:	1105c83a 	sub	r2,r2,r4
  80cdc0:	2089883a 	add	r4,r4,r2
  80cdc4:	308d883a 	add	r6,r6,r2
  80cdc8:	d9001015 	stw	r4,64(sp)
  80cdcc:	d9800915 	stw	r6,36(sp)
  80cdd0:	003e3206 	br	80c69c <_dtoa_r+0xaec>
  80cdd4:	28800044 	addi	r2,r5,1
  80cdd8:	27000044 	addi	fp,r4,1
  80cddc:	20800005 	stb	r2,0(r4)
  80cde0:	003e6c06 	br	80c794 <_dtoa_r+0xbe4>
  80cde4:	d8800f17 	ldw	r2,60(sp)
  80cde8:	00bce016 	blt	zero,r2,80c16c <_dtoa_r+0x5bc>
  80cdec:	d9800f17 	ldw	r6,60(sp)
  80cdf0:	303cc51e 	bne	r6,zero,80c108 <_dtoa_r+0x558>
  80cdf4:	0005883a 	mov	r2,zero
  80cdf8:	00d00534 	movhi	r3,16404
  80cdfc:	980b883a 	mov	r5,r19
  80ce00:	180f883a 	mov	r7,r3
  80ce04:	9009883a 	mov	r4,r18
  80ce08:	100d883a 	mov	r6,r2
  80ce0c:	0807a500 	call	807a50 <__muldf3>
  80ce10:	180b883a 	mov	r5,r3
  80ce14:	a80f883a 	mov	r7,r21
  80ce18:	1009883a 	mov	r4,r2
  80ce1c:	a00d883a 	mov	r6,r20
  80ce20:	0810ec80 	call	810ec8 <__gedf2>
  80ce24:	103cb80e 	bge	r2,zero,80c108 <_dtoa_r+0x558>
  80ce28:	0027883a 	mov	r19,zero
  80ce2c:	0025883a 	mov	r18,zero
  80ce30:	003fc606 	br	80cd4c <_dtoa_r+0x119c>
  80ce34:	99400117 	ldw	r5,4(r19)
  80ce38:	d9001617 	ldw	r4,88(sp)
  80ce3c:	080ebf80 	call	80ebf8 <_Balloc>
  80ce40:	99800417 	ldw	r6,16(r19)
  80ce44:	11000304 	addi	r4,r2,12
  80ce48:	99400304 	addi	r5,r19,12
  80ce4c:	318d883a 	add	r6,r6,r6
  80ce50:	318d883a 	add	r6,r6,r6
  80ce54:	31800204 	addi	r6,r6,8
  80ce58:	1023883a 	mov	r17,r2
  80ce5c:	080e4600 	call	80e460 <memcpy>
  80ce60:	d9001617 	ldw	r4,88(sp)
  80ce64:	880b883a 	mov	r5,r17
  80ce68:	01800044 	movi	r6,1
  80ce6c:	080efbc0 	call	80efbc <__lshift>
  80ce70:	100b883a 	mov	r5,r2
  80ce74:	003d9c06 	br	80c4e8 <_dtoa_r+0x938>
  80ce78:	00800e44 	movi	r2,57
  80ce7c:	b8807026 	beq	r23,r2,80d040 <_dtoa_r+0x1490>
  80ce80:	b8800044 	addi	r2,r23,1
  80ce84:	b7000044 	addi	fp,r22,1
  80ce88:	b0800005 	stb	r2,0(r22)
  80ce8c:	003e4106 	br	80c794 <_dtoa_r+0xbe4>
  80ce90:	d8800317 	ldw	r2,12(sp)
  80ce94:	018020b4 	movhi	r6,130
  80ce98:	31b06004 	addi	r6,r6,-16000
  80ce9c:	b009883a 	mov	r4,r22
  80cea0:	100e90fa 	slli	r7,r2,3
  80cea4:	b80b883a 	mov	r5,r23
  80cea8:	398f883a 	add	r7,r7,r6
  80ceac:	38bffe17 	ldw	r2,-8(r7)
  80ceb0:	d9800517 	ldw	r6,20(sp)
  80ceb4:	38ffff17 	ldw	r3,-4(r7)
  80ceb8:	37000044 	addi	fp,r6,1
  80cebc:	180f883a 	mov	r7,r3
  80cec0:	100d883a 	mov	r6,r2
  80cec4:	0807a500 	call	807a50 <__muldf3>
  80cec8:	a80b883a 	mov	r5,r21
  80cecc:	a009883a 	mov	r4,r20
  80ced0:	182f883a 	mov	r23,r3
  80ced4:	102d883a 	mov	r22,r2
  80ced8:	080840c0 	call	80840c <__fixdfsi>
  80cedc:	1009883a 	mov	r4,r2
  80cee0:	1027883a 	mov	r19,r2
  80cee4:	08083140 	call	808314 <__floatsidf>
  80cee8:	a80b883a 	mov	r5,r21
  80ceec:	a009883a 	mov	r4,r20
  80cef0:	180f883a 	mov	r7,r3
  80cef4:	100d883a 	mov	r6,r2
  80cef8:	080795c0 	call	80795c <__subdf3>
  80cefc:	180b883a 	mov	r5,r3
  80cf00:	d8c00517 	ldw	r3,20(sp)
  80cf04:	9cc00c04 	addi	r19,r19,48
  80cf08:	1009883a 	mov	r4,r2
  80cf0c:	1cc00005 	stb	r19,0(r3)
  80cf10:	2021883a 	mov	r16,r4
  80cf14:	d9000317 	ldw	r4,12(sp)
  80cf18:	00800044 	movi	r2,1
  80cf1c:	2823883a 	mov	r17,r5
  80cf20:	20802226 	beq	r4,r2,80cfac <_dtoa_r+0x13fc>
  80cf24:	1029883a 	mov	r20,r2
  80cf28:	0005883a 	mov	r2,zero
  80cf2c:	00d00934 	movhi	r3,16420
  80cf30:	180f883a 	mov	r7,r3
  80cf34:	100d883a 	mov	r6,r2
  80cf38:	880b883a 	mov	r5,r17
  80cf3c:	8009883a 	mov	r4,r16
  80cf40:	0807a500 	call	807a50 <__muldf3>
  80cf44:	180b883a 	mov	r5,r3
  80cf48:	1009883a 	mov	r4,r2
  80cf4c:	1823883a 	mov	r17,r3
  80cf50:	1021883a 	mov	r16,r2
  80cf54:	080840c0 	call	80840c <__fixdfsi>
  80cf58:	1009883a 	mov	r4,r2
  80cf5c:	102b883a 	mov	r21,r2
  80cf60:	08083140 	call	808314 <__floatsidf>
  80cf64:	880b883a 	mov	r5,r17
  80cf68:	8009883a 	mov	r4,r16
  80cf6c:	180f883a 	mov	r7,r3
  80cf70:	100d883a 	mov	r6,r2
  80cf74:	080795c0 	call	80795c <__subdf3>
  80cf78:	180b883a 	mov	r5,r3
  80cf7c:	d8c00517 	ldw	r3,20(sp)
  80cf80:	1009883a 	mov	r4,r2
  80cf84:	ad400c04 	addi	r21,r21,48
  80cf88:	1d05883a 	add	r2,r3,r20
  80cf8c:	15400005 	stb	r21,0(r2)
  80cf90:	2021883a 	mov	r16,r4
  80cf94:	d9000317 	ldw	r4,12(sp)
  80cf98:	a5000044 	addi	r20,r20,1
  80cf9c:	2823883a 	mov	r17,r5
  80cfa0:	a13fe11e 	bne	r20,r4,80cf28 <_dtoa_r+0x1378>
  80cfa4:	e505883a 	add	r2,fp,r20
  80cfa8:	173fffc4 	addi	fp,r2,-1
  80cfac:	0025883a 	mov	r18,zero
  80cfb0:	04cff834 	movhi	r19,16352
  80cfb4:	b009883a 	mov	r4,r22
  80cfb8:	b80b883a 	mov	r5,r23
  80cfbc:	900d883a 	mov	r6,r18
  80cfc0:	980f883a 	mov	r7,r19
  80cfc4:	08079dc0 	call	8079dc <__adddf3>
  80cfc8:	180b883a 	mov	r5,r3
  80cfcc:	1009883a 	mov	r4,r2
  80cfd0:	800d883a 	mov	r6,r16
  80cfd4:	880f883a 	mov	r7,r17
  80cfd8:	08082040 	call	808204 <__ltdf2>
  80cfdc:	103cab16 	blt	r2,zero,80c28c <_dtoa_r+0x6dc>
  80cfe0:	0009883a 	mov	r4,zero
  80cfe4:	980b883a 	mov	r5,r19
  80cfe8:	b80f883a 	mov	r7,r23
  80cfec:	b00d883a 	mov	r6,r22
  80cff0:	080795c0 	call	80795c <__subdf3>
  80cff4:	180b883a 	mov	r5,r3
  80cff8:	880f883a 	mov	r7,r17
  80cffc:	1009883a 	mov	r4,r2
  80d000:	800d883a 	mov	r6,r16
  80d004:	080817c0 	call	80817c <__gtdf2>
  80d008:	00bc470e 	bge	zero,r2,80c128 <_dtoa_r+0x578>
  80d00c:	00c00c04 	movi	r3,48
  80d010:	e73fffc4 	addi	fp,fp,-1
  80d014:	e0800007 	ldb	r2,0(fp)
  80d018:	10fffd26 	beq	r2,r3,80d010 <_dtoa_r+0x1460>
  80d01c:	d9800417 	ldw	r6,16(sp)
  80d020:	e7000044 	addi	fp,fp,1
  80d024:	d9800d15 	stw	r6,52(sp)
  80d028:	003cab06 	br	80c2d8 <_dtoa_r+0x728>
  80d02c:	d8c00f17 	ldw	r3,60(sp)
  80d030:	d9001117 	ldw	r4,68(sp)
  80d034:	20e1c83a 	sub	r16,r4,r3
  80d038:	0007883a 	mov	r3,zero
  80d03c:	003d9b06 	br	80c6ac <_dtoa_r+0xafc>
  80d040:	00800e44 	movi	r2,57
  80d044:	b0800005 	stb	r2,0(r22)
  80d048:	b5800044 	addi	r22,r22,1
  80d04c:	003dc106 	br	80c754 <_dtoa_r+0xba4>
  80d050:	05800084 	movi	r22,2
  80d054:	003bf706 	br	80c034 <_dtoa_r+0x484>
  80d058:	d9000f17 	ldw	r4,60(sp)
  80d05c:	013c000e 	bge	zero,r4,80c060 <_dtoa_r+0x4b0>
  80d060:	d9800e17 	ldw	r6,56(sp)
  80d064:	01bc300e 	bge	zero,r6,80c128 <_dtoa_r+0x578>
  80d068:	0005883a 	mov	r2,zero
  80d06c:	00d00934 	movhi	r3,16420
  80d070:	a80b883a 	mov	r5,r21
  80d074:	180f883a 	mov	r7,r3
  80d078:	a009883a 	mov	r4,r20
  80d07c:	100d883a 	mov	r6,r2
  80d080:	0807a500 	call	807a50 <__muldf3>
  80d084:	b1000044 	addi	r4,r22,1
  80d088:	1021883a 	mov	r16,r2
  80d08c:	1823883a 	mov	r17,r3
  80d090:	08083140 	call	808314 <__floatsidf>
  80d094:	880b883a 	mov	r5,r17
  80d098:	8009883a 	mov	r4,r16
  80d09c:	180f883a 	mov	r7,r3
  80d0a0:	100d883a 	mov	r6,r2
  80d0a4:	0807a500 	call	807a50 <__muldf3>
  80d0a8:	0011883a 	mov	r8,zero
  80d0ac:	02500734 	movhi	r9,16412
  80d0b0:	180b883a 	mov	r5,r3
  80d0b4:	480f883a 	mov	r7,r9
  80d0b8:	1009883a 	mov	r4,r2
  80d0bc:	400d883a 	mov	r6,r8
  80d0c0:	08079dc0 	call	8079dc <__adddf3>
  80d0c4:	102d883a 	mov	r22,r2
  80d0c8:	00bf3034 	movhi	r2,64704
  80d0cc:	10ef883a 	add	r23,r2,r3
  80d0d0:	d8800d17 	ldw	r2,52(sp)
  80d0d4:	d8c00e17 	ldw	r3,56(sp)
  80d0d8:	8029883a 	mov	r20,r16
  80d0dc:	10bfffc4 	addi	r2,r2,-1
  80d0e0:	882b883a 	mov	r21,r17
  80d0e4:	d8800415 	stw	r2,16(sp)
  80d0e8:	d8c00315 	stw	r3,12(sp)
  80d0ec:	003e8306 	br	80cafc <_dtoa_r+0xf4c>
  80d0f0:	d8800117 	ldw	r2,4(sp)
  80d0f4:	dc001117 	ldw	r16,68(sp)
  80d0f8:	dc801017 	ldw	r18,64(sp)
  80d0fc:	00c00d84 	movi	r3,54
  80d100:	1887c83a 	sub	r3,r3,r2
  80d104:	003d6906 	br	80c6ac <_dtoa_r+0xafc>
  80d108:	01800044 	movi	r6,1
  80d10c:	3021883a 	mov	r16,r6
  80d110:	d9800f15 	stw	r6,60(sp)
  80d114:	d9802615 	stw	r6,152(sp)
  80d118:	d9800e15 	stw	r6,56(sp)
  80d11c:	003b9306 	br	80bf6c <_dtoa_r+0x3bc>
  80d120:	b021883a 	mov	r16,r22
  80d124:	dd800f15 	stw	r22,60(sp)
  80d128:	003b9006 	br	80bf6c <_dtoa_r+0x3bc>
  80d12c:	103e221e 	bne	r2,zero,80c9b8 <_dtoa_r+0xe08>
  80d130:	b880004c 	andi	r2,r23,1
  80d134:	1005003a 	cmpeq	r2,r2,zero
  80d138:	103e1f1e 	bne	r2,zero,80c9b8 <_dtoa_r+0xe08>
  80d13c:	003e1b06 	br	80c9ac <_dtoa_r+0xdfc>
  80d140:	d9001617 	ldw	r4,88(sp)
  80d144:	980b883a 	mov	r5,r19
  80d148:	01800284 	movi	r6,10
  80d14c:	000f883a 	mov	r7,zero
  80d150:	080f32c0 	call	80f32c <__multadd>
  80d154:	d8c00e17 	ldw	r3,56(sp)
  80d158:	1027883a 	mov	r19,r2
  80d15c:	d8c00f15 	stw	r3,60(sp)
  80d160:	003cd306 	br	80c4b0 <_dtoa_r+0x900>

0080d164 <_fflush_r>:
  80d164:	defffb04 	addi	sp,sp,-20
  80d168:	dcc00315 	stw	r19,12(sp)
  80d16c:	dc800215 	stw	r18,8(sp)
  80d170:	dfc00415 	stw	ra,16(sp)
  80d174:	dc400115 	stw	r17,4(sp)
  80d178:	dc000015 	stw	r16,0(sp)
  80d17c:	2027883a 	mov	r19,r4
  80d180:	2825883a 	mov	r18,r5
  80d184:	20000226 	beq	r4,zero,80d190 <_fflush_r+0x2c>
  80d188:	20800e17 	ldw	r2,56(r4)
  80d18c:	10005626 	beq	r2,zero,80d2e8 <_fflush_r+0x184>
  80d190:	9100030b 	ldhu	r4,12(r18)
  80d194:	20ffffcc 	andi	r3,r4,65535
  80d198:	18e0001c 	xori	r3,r3,32768
  80d19c:	18e00004 	addi	r3,r3,-32768
  80d1a0:	1880020c 	andi	r2,r3,8
  80d1a4:	1000261e 	bne	r2,zero,80d240 <_fflush_r+0xdc>
  80d1a8:	90c00117 	ldw	r3,4(r18)
  80d1ac:	20820014 	ori	r2,r4,2048
  80d1b0:	9080030d 	sth	r2,12(r18)
  80d1b4:	1009883a 	mov	r4,r2
  80d1b8:	00c0400e 	bge	zero,r3,80d2bc <_fflush_r+0x158>
  80d1bc:	92000a17 	ldw	r8,40(r18)
  80d1c0:	40004026 	beq	r8,zero,80d2c4 <_fflush_r+0x160>
  80d1c4:	2084000c 	andi	r2,r4,4096
  80d1c8:	10005326 	beq	r2,zero,80d318 <_fflush_r+0x1b4>
  80d1cc:	94001417 	ldw	r16,80(r18)
  80d1d0:	9080030b 	ldhu	r2,12(r18)
  80d1d4:	1080010c 	andi	r2,r2,4
  80d1d8:	1000481e 	bne	r2,zero,80d2fc <_fflush_r+0x198>
  80d1dc:	91400717 	ldw	r5,28(r18)
  80d1e0:	9809883a 	mov	r4,r19
  80d1e4:	800d883a 	mov	r6,r16
  80d1e8:	000f883a 	mov	r7,zero
  80d1ec:	403ee83a 	callr	r8
  80d1f0:	8080261e 	bne	r16,r2,80d28c <_fflush_r+0x128>
  80d1f4:	9080030b 	ldhu	r2,12(r18)
  80d1f8:	91000417 	ldw	r4,16(r18)
  80d1fc:	90000115 	stw	zero,4(r18)
  80d200:	10bdffcc 	andi	r2,r2,63487
  80d204:	10ffffcc 	andi	r3,r2,65535
  80d208:	18c4000c 	andi	r3,r3,4096
  80d20c:	9080030d 	sth	r2,12(r18)
  80d210:	91000015 	stw	r4,0(r18)
  80d214:	18002b26 	beq	r3,zero,80d2c4 <_fflush_r+0x160>
  80d218:	0007883a 	mov	r3,zero
  80d21c:	1805883a 	mov	r2,r3
  80d220:	94001415 	stw	r16,80(r18)
  80d224:	dfc00417 	ldw	ra,16(sp)
  80d228:	dcc00317 	ldw	r19,12(sp)
  80d22c:	dc800217 	ldw	r18,8(sp)
  80d230:	dc400117 	ldw	r17,4(sp)
  80d234:	dc000017 	ldw	r16,0(sp)
  80d238:	dec00504 	addi	sp,sp,20
  80d23c:	f800283a 	ret
  80d240:	94400417 	ldw	r17,16(r18)
  80d244:	88001f26 	beq	r17,zero,80d2c4 <_fflush_r+0x160>
  80d248:	90800017 	ldw	r2,0(r18)
  80d24c:	18c000cc 	andi	r3,r3,3
  80d250:	94400015 	stw	r17,0(r18)
  80d254:	1461c83a 	sub	r16,r2,r17
  80d258:	18002526 	beq	r3,zero,80d2f0 <_fflush_r+0x18c>
  80d25c:	0005883a 	mov	r2,zero
  80d260:	90800215 	stw	r2,8(r18)
  80d264:	0400170e 	bge	zero,r16,80d2c4 <_fflush_r+0x160>
  80d268:	90c00917 	ldw	r3,36(r18)
  80d26c:	91400717 	ldw	r5,28(r18)
  80d270:	880d883a 	mov	r6,r17
  80d274:	800f883a 	mov	r7,r16
  80d278:	9809883a 	mov	r4,r19
  80d27c:	183ee83a 	callr	r3
  80d280:	88a3883a 	add	r17,r17,r2
  80d284:	80a1c83a 	sub	r16,r16,r2
  80d288:	00bff616 	blt	zero,r2,80d264 <_fflush_r+0x100>
  80d28c:	9080030b 	ldhu	r2,12(r18)
  80d290:	00ffffc4 	movi	r3,-1
  80d294:	10801014 	ori	r2,r2,64
  80d298:	9080030d 	sth	r2,12(r18)
  80d29c:	1805883a 	mov	r2,r3
  80d2a0:	dfc00417 	ldw	ra,16(sp)
  80d2a4:	dcc00317 	ldw	r19,12(sp)
  80d2a8:	dc800217 	ldw	r18,8(sp)
  80d2ac:	dc400117 	ldw	r17,4(sp)
  80d2b0:	dc000017 	ldw	r16,0(sp)
  80d2b4:	dec00504 	addi	sp,sp,20
  80d2b8:	f800283a 	ret
  80d2bc:	90800f17 	ldw	r2,60(r18)
  80d2c0:	00bfbe16 	blt	zero,r2,80d1bc <_fflush_r+0x58>
  80d2c4:	0007883a 	mov	r3,zero
  80d2c8:	1805883a 	mov	r2,r3
  80d2cc:	dfc00417 	ldw	ra,16(sp)
  80d2d0:	dcc00317 	ldw	r19,12(sp)
  80d2d4:	dc800217 	ldw	r18,8(sp)
  80d2d8:	dc400117 	ldw	r17,4(sp)
  80d2dc:	dc000017 	ldw	r16,0(sp)
  80d2e0:	dec00504 	addi	sp,sp,20
  80d2e4:	f800283a 	ret
  80d2e8:	080d3fc0 	call	80d3fc <__sinit>
  80d2ec:	003fa806 	br	80d190 <_fflush_r+0x2c>
  80d2f0:	90800517 	ldw	r2,20(r18)
  80d2f4:	90800215 	stw	r2,8(r18)
  80d2f8:	003fda06 	br	80d264 <_fflush_r+0x100>
  80d2fc:	90800117 	ldw	r2,4(r18)
  80d300:	90c00c17 	ldw	r3,48(r18)
  80d304:	80a1c83a 	sub	r16,r16,r2
  80d308:	183fb426 	beq	r3,zero,80d1dc <_fflush_r+0x78>
  80d30c:	90800f17 	ldw	r2,60(r18)
  80d310:	80a1c83a 	sub	r16,r16,r2
  80d314:	003fb106 	br	80d1dc <_fflush_r+0x78>
  80d318:	91400717 	ldw	r5,28(r18)
  80d31c:	9809883a 	mov	r4,r19
  80d320:	000d883a 	mov	r6,zero
  80d324:	01c00044 	movi	r7,1
  80d328:	403ee83a 	callr	r8
  80d32c:	1021883a 	mov	r16,r2
  80d330:	00bfffc4 	movi	r2,-1
  80d334:	80800226 	beq	r16,r2,80d340 <_fflush_r+0x1dc>
  80d338:	92000a17 	ldw	r8,40(r18)
  80d33c:	003fa406 	br	80d1d0 <_fflush_r+0x6c>
  80d340:	98c00017 	ldw	r3,0(r19)
  80d344:	00800744 	movi	r2,29
  80d348:	18bfde26 	beq	r3,r2,80d2c4 <_fflush_r+0x160>
  80d34c:	9080030b 	ldhu	r2,12(r18)
  80d350:	8007883a 	mov	r3,r16
  80d354:	10801014 	ori	r2,r2,64
  80d358:	9080030d 	sth	r2,12(r18)
  80d35c:	003fcf06 	br	80d29c <_fflush_r+0x138>

0080d360 <fflush>:
  80d360:	01402074 	movhi	r5,129
  80d364:	29745904 	addi	r5,r5,-11932
  80d368:	2007883a 	mov	r3,r4
  80d36c:	20000526 	beq	r4,zero,80d384 <fflush+0x24>
  80d370:	008020b4 	movhi	r2,130
  80d374:	10b7cd04 	addi	r2,r2,-8396
  80d378:	11000017 	ldw	r4,0(r2)
  80d37c:	180b883a 	mov	r5,r3
  80d380:	080d1641 	jmpi	80d164 <_fflush_r>
  80d384:	008020b4 	movhi	r2,130
  80d388:	10b7ce04 	addi	r2,r2,-8392
  80d38c:	11000017 	ldw	r4,0(r2)
  80d390:	080df301 	jmpi	80df30 <_fwalk_reent>

0080d394 <std>:
  80d394:	00802074 	movhi	r2,129
  80d398:	10bf2804 	addi	r2,r2,-864
  80d39c:	20800b15 	stw	r2,44(r4)
  80d3a0:	00802074 	movhi	r2,129
  80d3a4:	10bf6304 	addi	r2,r2,-628
  80d3a8:	20800815 	stw	r2,32(r4)
  80d3ac:	00c02074 	movhi	r3,129
  80d3b0:	18ff4404 	addi	r3,r3,-752
  80d3b4:	00802074 	movhi	r2,129
  80d3b8:	10bf2a04 	addi	r2,r2,-856
  80d3bc:	2140030d 	sth	r5,12(r4)
  80d3c0:	2180038d 	sth	r6,14(r4)
  80d3c4:	20c00915 	stw	r3,36(r4)
  80d3c8:	20800a15 	stw	r2,40(r4)
  80d3cc:	20000015 	stw	zero,0(r4)
  80d3d0:	20000115 	stw	zero,4(r4)
  80d3d4:	20000215 	stw	zero,8(r4)
  80d3d8:	20000415 	stw	zero,16(r4)
  80d3dc:	20000515 	stw	zero,20(r4)
  80d3e0:	20000615 	stw	zero,24(r4)
  80d3e4:	21000715 	stw	r4,28(r4)
  80d3e8:	f800283a 	ret

0080d3ec <__sfp_lock_acquire>:
  80d3ec:	f800283a 	ret

0080d3f0 <__sfp_lock_release>:
  80d3f0:	f800283a 	ret

0080d3f4 <__sinit_lock_acquire>:
  80d3f4:	f800283a 	ret

0080d3f8 <__sinit_lock_release>:
  80d3f8:	f800283a 	ret

0080d3fc <__sinit>:
  80d3fc:	20800e17 	ldw	r2,56(r4)
  80d400:	defffd04 	addi	sp,sp,-12
  80d404:	dc400115 	stw	r17,4(sp)
  80d408:	dc000015 	stw	r16,0(sp)
  80d40c:	dfc00215 	stw	ra,8(sp)
  80d410:	04400044 	movi	r17,1
  80d414:	01400104 	movi	r5,4
  80d418:	000d883a 	mov	r6,zero
  80d41c:	2021883a 	mov	r16,r4
  80d420:	2200bb04 	addi	r8,r4,748
  80d424:	200f883a 	mov	r7,r4
  80d428:	10000526 	beq	r2,zero,80d440 <__sinit+0x44>
  80d42c:	dfc00217 	ldw	ra,8(sp)
  80d430:	dc400117 	ldw	r17,4(sp)
  80d434:	dc000017 	ldw	r16,0(sp)
  80d438:	dec00304 	addi	sp,sp,12
  80d43c:	f800283a 	ret
  80d440:	21000117 	ldw	r4,4(r4)
  80d444:	00802074 	movhi	r2,129
  80d448:	10b53804 	addi	r2,r2,-11040
  80d44c:	00c000c4 	movi	r3,3
  80d450:	80800f15 	stw	r2,60(r16)
  80d454:	80c0b915 	stw	r3,740(r16)
  80d458:	8200ba15 	stw	r8,744(r16)
  80d45c:	84400e15 	stw	r17,56(r16)
  80d460:	8000b815 	stw	zero,736(r16)
  80d464:	080d3940 	call	80d394 <std>
  80d468:	81000217 	ldw	r4,8(r16)
  80d46c:	880d883a 	mov	r6,r17
  80d470:	800f883a 	mov	r7,r16
  80d474:	01400284 	movi	r5,10
  80d478:	080d3940 	call	80d394 <std>
  80d47c:	81000317 	ldw	r4,12(r16)
  80d480:	800f883a 	mov	r7,r16
  80d484:	01400484 	movi	r5,18
  80d488:	01800084 	movi	r6,2
  80d48c:	dfc00217 	ldw	ra,8(sp)
  80d490:	dc400117 	ldw	r17,4(sp)
  80d494:	dc000017 	ldw	r16,0(sp)
  80d498:	dec00304 	addi	sp,sp,12
  80d49c:	080d3941 	jmpi	80d394 <std>

0080d4a0 <__fp_lock>:
  80d4a0:	0005883a 	mov	r2,zero
  80d4a4:	f800283a 	ret

0080d4a8 <__fp_unlock>:
  80d4a8:	0005883a 	mov	r2,zero
  80d4ac:	f800283a 	ret

0080d4b0 <__fp_unlock_all>:
  80d4b0:	008020b4 	movhi	r2,130
  80d4b4:	10b7cd04 	addi	r2,r2,-8396
  80d4b8:	11000017 	ldw	r4,0(r2)
  80d4bc:	01402074 	movhi	r5,129
  80d4c0:	29752a04 	addi	r5,r5,-11096
  80d4c4:	080dff81 	jmpi	80dff8 <_fwalk>

0080d4c8 <__fp_lock_all>:
  80d4c8:	008020b4 	movhi	r2,130
  80d4cc:	10b7cd04 	addi	r2,r2,-8396
  80d4d0:	11000017 	ldw	r4,0(r2)
  80d4d4:	01402074 	movhi	r5,129
  80d4d8:	29752804 	addi	r5,r5,-11104
  80d4dc:	080dff81 	jmpi	80dff8 <_fwalk>

0080d4e0 <_cleanup_r>:
  80d4e0:	01402074 	movhi	r5,129
  80d4e4:	29405504 	addi	r5,r5,340
  80d4e8:	080dff81 	jmpi	80dff8 <_fwalk>

0080d4ec <_cleanup>:
  80d4ec:	008020b4 	movhi	r2,130
  80d4f0:	10b7ce04 	addi	r2,r2,-8392
  80d4f4:	11000017 	ldw	r4,0(r2)
  80d4f8:	080d4e01 	jmpi	80d4e0 <_cleanup_r>

0080d4fc <__sfmoreglue>:
  80d4fc:	defffc04 	addi	sp,sp,-16
  80d500:	dc400115 	stw	r17,4(sp)
  80d504:	2c401724 	muli	r17,r5,92
  80d508:	dc800215 	stw	r18,8(sp)
  80d50c:	2825883a 	mov	r18,r5
  80d510:	89400304 	addi	r5,r17,12
  80d514:	dc000015 	stw	r16,0(sp)
  80d518:	dfc00315 	stw	ra,12(sp)
  80d51c:	0808ef40 	call	808ef4 <_malloc_r>
  80d520:	0021883a 	mov	r16,zero
  80d524:	880d883a 	mov	r6,r17
  80d528:	000b883a 	mov	r5,zero
  80d52c:	10000626 	beq	r2,zero,80d548 <__sfmoreglue+0x4c>
  80d530:	11000304 	addi	r4,r2,12
  80d534:	14800115 	stw	r18,4(r2)
  80d538:	10000015 	stw	zero,0(r2)
  80d53c:	11000215 	stw	r4,8(r2)
  80d540:	1021883a 	mov	r16,r2
  80d544:	080e5e00 	call	80e5e0 <memset>
  80d548:	8005883a 	mov	r2,r16
  80d54c:	dfc00317 	ldw	ra,12(sp)
  80d550:	dc800217 	ldw	r18,8(sp)
  80d554:	dc400117 	ldw	r17,4(sp)
  80d558:	dc000017 	ldw	r16,0(sp)
  80d55c:	dec00404 	addi	sp,sp,16
  80d560:	f800283a 	ret

0080d564 <__sfp>:
  80d564:	defffd04 	addi	sp,sp,-12
  80d568:	008020b4 	movhi	r2,130
  80d56c:	10b7ce04 	addi	r2,r2,-8392
  80d570:	dc000015 	stw	r16,0(sp)
  80d574:	14000017 	ldw	r16,0(r2)
  80d578:	dc400115 	stw	r17,4(sp)
  80d57c:	dfc00215 	stw	ra,8(sp)
  80d580:	80800e17 	ldw	r2,56(r16)
  80d584:	2023883a 	mov	r17,r4
  80d588:	10002626 	beq	r2,zero,80d624 <__sfp+0xc0>
  80d58c:	8400b804 	addi	r16,r16,736
  80d590:	80800117 	ldw	r2,4(r16)
  80d594:	81000217 	ldw	r4,8(r16)
  80d598:	10ffffc4 	addi	r3,r2,-1
  80d59c:	18000916 	blt	r3,zero,80d5c4 <__sfp+0x60>
  80d5a0:	2080030f 	ldh	r2,12(r4)
  80d5a4:	10000b26 	beq	r2,zero,80d5d4 <__sfp+0x70>
  80d5a8:	017fffc4 	movi	r5,-1
  80d5ac:	00000206 	br	80d5b8 <__sfp+0x54>
  80d5b0:	2080030f 	ldh	r2,12(r4)
  80d5b4:	10000726 	beq	r2,zero,80d5d4 <__sfp+0x70>
  80d5b8:	18ffffc4 	addi	r3,r3,-1
  80d5bc:	21001704 	addi	r4,r4,92
  80d5c0:	197ffb1e 	bne	r3,r5,80d5b0 <__sfp+0x4c>
  80d5c4:	80800017 	ldw	r2,0(r16)
  80d5c8:	10001926 	beq	r2,zero,80d630 <__sfp+0xcc>
  80d5cc:	1021883a 	mov	r16,r2
  80d5d0:	003fef06 	br	80d590 <__sfp+0x2c>
  80d5d4:	00bfffc4 	movi	r2,-1
  80d5d8:	00c00044 	movi	r3,1
  80d5dc:	2080038d 	sth	r2,14(r4)
  80d5e0:	20c0030d 	sth	r3,12(r4)
  80d5e4:	20000015 	stw	zero,0(r4)
  80d5e8:	20000215 	stw	zero,8(r4)
  80d5ec:	20000115 	stw	zero,4(r4)
  80d5f0:	20000415 	stw	zero,16(r4)
  80d5f4:	20000515 	stw	zero,20(r4)
  80d5f8:	20000615 	stw	zero,24(r4)
  80d5fc:	20000c15 	stw	zero,48(r4)
  80d600:	20000d15 	stw	zero,52(r4)
  80d604:	20001115 	stw	zero,68(r4)
  80d608:	20001215 	stw	zero,72(r4)
  80d60c:	2005883a 	mov	r2,r4
  80d610:	dfc00217 	ldw	ra,8(sp)
  80d614:	dc400117 	ldw	r17,4(sp)
  80d618:	dc000017 	ldw	r16,0(sp)
  80d61c:	dec00304 	addi	sp,sp,12
  80d620:	f800283a 	ret
  80d624:	8009883a 	mov	r4,r16
  80d628:	080d3fc0 	call	80d3fc <__sinit>
  80d62c:	003fd706 	br	80d58c <__sfp+0x28>
  80d630:	8809883a 	mov	r4,r17
  80d634:	01400104 	movi	r5,4
  80d638:	080d4fc0 	call	80d4fc <__sfmoreglue>
  80d63c:	80800015 	stw	r2,0(r16)
  80d640:	103fe21e 	bne	r2,zero,80d5cc <__sfp+0x68>
  80d644:	00800304 	movi	r2,12
  80d648:	0009883a 	mov	r4,zero
  80d64c:	88800015 	stw	r2,0(r17)
  80d650:	003fee06 	br	80d60c <__sfp+0xa8>

0080d654 <_malloc_trim_r>:
  80d654:	defffb04 	addi	sp,sp,-20
  80d658:	dcc00315 	stw	r19,12(sp)
  80d65c:	04c020b4 	movhi	r19,130
  80d660:	9cf1eb04 	addi	r19,r19,-14420
  80d664:	dc800215 	stw	r18,8(sp)
  80d668:	dc400115 	stw	r17,4(sp)
  80d66c:	dc000015 	stw	r16,0(sp)
  80d670:	2823883a 	mov	r17,r5
  80d674:	2025883a 	mov	r18,r4
  80d678:	dfc00415 	stw	ra,16(sp)
  80d67c:	0811b440 	call	811b44 <__malloc_lock>
  80d680:	98800217 	ldw	r2,8(r19)
  80d684:	9009883a 	mov	r4,r18
  80d688:	000b883a 	mov	r5,zero
  80d68c:	10c00117 	ldw	r3,4(r2)
  80d690:	00bfff04 	movi	r2,-4
  80d694:	18a0703a 	and	r16,r3,r2
  80d698:	8463c83a 	sub	r17,r16,r17
  80d69c:	8c43fbc4 	addi	r17,r17,4079
  80d6a0:	8822d33a 	srli	r17,r17,12
  80d6a4:	0083ffc4 	movi	r2,4095
  80d6a8:	8c7fffc4 	addi	r17,r17,-1
  80d6ac:	8822933a 	slli	r17,r17,12
  80d6b0:	1440060e 	bge	r2,r17,80d6cc <_malloc_trim_r+0x78>
  80d6b4:	08097f40 	call	8097f4 <_sbrk_r>
  80d6b8:	98c00217 	ldw	r3,8(r19)
  80d6bc:	9009883a 	mov	r4,r18
  80d6c0:	044bc83a 	sub	r5,zero,r17
  80d6c4:	80c7883a 	add	r3,r16,r3
  80d6c8:	10c00926 	beq	r2,r3,80d6f0 <_malloc_trim_r+0x9c>
  80d6cc:	0811b640 	call	811b64 <__malloc_unlock>
  80d6d0:	0005883a 	mov	r2,zero
  80d6d4:	dfc00417 	ldw	ra,16(sp)
  80d6d8:	dcc00317 	ldw	r19,12(sp)
  80d6dc:	dc800217 	ldw	r18,8(sp)
  80d6e0:	dc400117 	ldw	r17,4(sp)
  80d6e4:	dc000017 	ldw	r16,0(sp)
  80d6e8:	dec00504 	addi	sp,sp,20
  80d6ec:	f800283a 	ret
  80d6f0:	9009883a 	mov	r4,r18
  80d6f4:	08097f40 	call	8097f4 <_sbrk_r>
  80d6f8:	844dc83a 	sub	r6,r16,r17
  80d6fc:	00ffffc4 	movi	r3,-1
  80d700:	9009883a 	mov	r4,r18
  80d704:	000b883a 	mov	r5,zero
  80d708:	01c020b4 	movhi	r7,130
  80d70c:	39ff1a04 	addi	r7,r7,-920
  80d710:	31800054 	ori	r6,r6,1
  80d714:	10c00926 	beq	r2,r3,80d73c <_malloc_trim_r+0xe8>
  80d718:	38800017 	ldw	r2,0(r7)
  80d71c:	98c00217 	ldw	r3,8(r19)
  80d720:	9009883a 	mov	r4,r18
  80d724:	1445c83a 	sub	r2,r2,r17
  80d728:	38800015 	stw	r2,0(r7)
  80d72c:	19800115 	stw	r6,4(r3)
  80d730:	0811b640 	call	811b64 <__malloc_unlock>
  80d734:	00800044 	movi	r2,1
  80d738:	003fe606 	br	80d6d4 <_malloc_trim_r+0x80>
  80d73c:	08097f40 	call	8097f4 <_sbrk_r>
  80d740:	99800217 	ldw	r6,8(r19)
  80d744:	100f883a 	mov	r7,r2
  80d748:	9009883a 	mov	r4,r18
  80d74c:	1187c83a 	sub	r3,r2,r6
  80d750:	008003c4 	movi	r2,15
  80d754:	19400054 	ori	r5,r3,1
  80d758:	10ffdc0e 	bge	r2,r3,80d6cc <_malloc_trim_r+0x78>
  80d75c:	008020b4 	movhi	r2,130
  80d760:	10b7d004 	addi	r2,r2,-8384
  80d764:	10c00017 	ldw	r3,0(r2)
  80d768:	008020b4 	movhi	r2,130
  80d76c:	10bf1a04 	addi	r2,r2,-920
  80d770:	31400115 	stw	r5,4(r6)
  80d774:	38c7c83a 	sub	r3,r7,r3
  80d778:	10c00015 	stw	r3,0(r2)
  80d77c:	003fd306 	br	80d6cc <_malloc_trim_r+0x78>

0080d780 <_free_r>:
  80d780:	defffd04 	addi	sp,sp,-12
  80d784:	dc400115 	stw	r17,4(sp)
  80d788:	dc000015 	stw	r16,0(sp)
  80d78c:	dfc00215 	stw	ra,8(sp)
  80d790:	2821883a 	mov	r16,r5
  80d794:	2023883a 	mov	r17,r4
  80d798:	28005a26 	beq	r5,zero,80d904 <_free_r+0x184>
  80d79c:	0811b440 	call	811b44 <__malloc_lock>
  80d7a0:	823ffe04 	addi	r8,r16,-8
  80d7a4:	41400117 	ldw	r5,4(r8)
  80d7a8:	00bfff84 	movi	r2,-2
  80d7ac:	028020b4 	movhi	r10,130
  80d7b0:	52b1eb04 	addi	r10,r10,-14420
  80d7b4:	288e703a 	and	r7,r5,r2
  80d7b8:	41cd883a 	add	r6,r8,r7
  80d7bc:	30c00117 	ldw	r3,4(r6)
  80d7c0:	51000217 	ldw	r4,8(r10)
  80d7c4:	00bfff04 	movi	r2,-4
  80d7c8:	1892703a 	and	r9,r3,r2
  80d7cc:	5017883a 	mov	r11,r10
  80d7d0:	31006726 	beq	r6,r4,80d970 <_free_r+0x1f0>
  80d7d4:	2880004c 	andi	r2,r5,1
  80d7d8:	1005003a 	cmpeq	r2,r2,zero
  80d7dc:	32400115 	stw	r9,4(r6)
  80d7e0:	10001a1e 	bne	r2,zero,80d84c <_free_r+0xcc>
  80d7e4:	000b883a 	mov	r5,zero
  80d7e8:	3247883a 	add	r3,r6,r9
  80d7ec:	18800117 	ldw	r2,4(r3)
  80d7f0:	1080004c 	andi	r2,r2,1
  80d7f4:	1000231e 	bne	r2,zero,80d884 <_free_r+0x104>
  80d7f8:	280ac03a 	cmpne	r5,r5,zero
  80d7fc:	3a4f883a 	add	r7,r7,r9
  80d800:	2800451e 	bne	r5,zero,80d918 <_free_r+0x198>
  80d804:	31000217 	ldw	r4,8(r6)
  80d808:	008020b4 	movhi	r2,130
  80d80c:	10b1ed04 	addi	r2,r2,-14412
  80d810:	20807b26 	beq	r4,r2,80da00 <_free_r+0x280>
  80d814:	30800317 	ldw	r2,12(r6)
  80d818:	3a07883a 	add	r3,r7,r8
  80d81c:	19c00015 	stw	r7,0(r3)
  80d820:	11000215 	stw	r4,8(r2)
  80d824:	20800315 	stw	r2,12(r4)
  80d828:	38800054 	ori	r2,r7,1
  80d82c:	40800115 	stw	r2,4(r8)
  80d830:	28001a26 	beq	r5,zero,80d89c <_free_r+0x11c>
  80d834:	8809883a 	mov	r4,r17
  80d838:	dfc00217 	ldw	ra,8(sp)
  80d83c:	dc400117 	ldw	r17,4(sp)
  80d840:	dc000017 	ldw	r16,0(sp)
  80d844:	dec00304 	addi	sp,sp,12
  80d848:	0811b641 	jmpi	811b64 <__malloc_unlock>
  80d84c:	80bffe17 	ldw	r2,-8(r16)
  80d850:	50c00204 	addi	r3,r10,8
  80d854:	4091c83a 	sub	r8,r8,r2
  80d858:	41000217 	ldw	r4,8(r8)
  80d85c:	388f883a 	add	r7,r7,r2
  80d860:	20c06126 	beq	r4,r3,80d9e8 <_free_r+0x268>
  80d864:	40800317 	ldw	r2,12(r8)
  80d868:	3247883a 	add	r3,r6,r9
  80d86c:	000b883a 	mov	r5,zero
  80d870:	11000215 	stw	r4,8(r2)
  80d874:	20800315 	stw	r2,12(r4)
  80d878:	18800117 	ldw	r2,4(r3)
  80d87c:	1080004c 	andi	r2,r2,1
  80d880:	103fdd26 	beq	r2,zero,80d7f8 <_free_r+0x78>
  80d884:	38800054 	ori	r2,r7,1
  80d888:	3a07883a 	add	r3,r7,r8
  80d88c:	280ac03a 	cmpne	r5,r5,zero
  80d890:	40800115 	stw	r2,4(r8)
  80d894:	19c00015 	stw	r7,0(r3)
  80d898:	283fe61e 	bne	r5,zero,80d834 <_free_r+0xb4>
  80d89c:	00807fc4 	movi	r2,511
  80d8a0:	11c01f2e 	bgeu	r2,r7,80d920 <_free_r+0x1a0>
  80d8a4:	3806d27a 	srli	r3,r7,9
  80d8a8:	1800481e 	bne	r3,zero,80d9cc <_free_r+0x24c>
  80d8ac:	3804d0fa 	srli	r2,r7,3
  80d8b0:	100690fa 	slli	r3,r2,3
  80d8b4:	1acd883a 	add	r6,r3,r11
  80d8b8:	31400217 	ldw	r5,8(r6)
  80d8bc:	31405926 	beq	r6,r5,80da24 <_free_r+0x2a4>
  80d8c0:	28800117 	ldw	r2,4(r5)
  80d8c4:	00ffff04 	movi	r3,-4
  80d8c8:	10c4703a 	and	r2,r2,r3
  80d8cc:	3880022e 	bgeu	r7,r2,80d8d8 <_free_r+0x158>
  80d8d0:	29400217 	ldw	r5,8(r5)
  80d8d4:	317ffa1e 	bne	r6,r5,80d8c0 <_free_r+0x140>
  80d8d8:	29800317 	ldw	r6,12(r5)
  80d8dc:	41800315 	stw	r6,12(r8)
  80d8e0:	41400215 	stw	r5,8(r8)
  80d8e4:	8809883a 	mov	r4,r17
  80d8e8:	2a000315 	stw	r8,12(r5)
  80d8ec:	32000215 	stw	r8,8(r6)
  80d8f0:	dfc00217 	ldw	ra,8(sp)
  80d8f4:	dc400117 	ldw	r17,4(sp)
  80d8f8:	dc000017 	ldw	r16,0(sp)
  80d8fc:	dec00304 	addi	sp,sp,12
  80d900:	0811b641 	jmpi	811b64 <__malloc_unlock>
  80d904:	dfc00217 	ldw	ra,8(sp)
  80d908:	dc400117 	ldw	r17,4(sp)
  80d90c:	dc000017 	ldw	r16,0(sp)
  80d910:	dec00304 	addi	sp,sp,12
  80d914:	f800283a 	ret
  80d918:	31000217 	ldw	r4,8(r6)
  80d91c:	003fbd06 	br	80d814 <_free_r+0x94>
  80d920:	3806d0fa 	srli	r3,r7,3
  80d924:	00800044 	movi	r2,1
  80d928:	51400117 	ldw	r5,4(r10)
  80d92c:	180890fa 	slli	r4,r3,3
  80d930:	1807d0ba 	srai	r3,r3,2
  80d934:	22c9883a 	add	r4,r4,r11
  80d938:	21800217 	ldw	r6,8(r4)
  80d93c:	10c4983a 	sll	r2,r2,r3
  80d940:	41000315 	stw	r4,12(r8)
  80d944:	41800215 	stw	r6,8(r8)
  80d948:	288ab03a 	or	r5,r5,r2
  80d94c:	22000215 	stw	r8,8(r4)
  80d950:	8809883a 	mov	r4,r17
  80d954:	51400115 	stw	r5,4(r10)
  80d958:	32000315 	stw	r8,12(r6)
  80d95c:	dfc00217 	ldw	ra,8(sp)
  80d960:	dc400117 	ldw	r17,4(sp)
  80d964:	dc000017 	ldw	r16,0(sp)
  80d968:	dec00304 	addi	sp,sp,12
  80d96c:	0811b641 	jmpi	811b64 <__malloc_unlock>
  80d970:	2880004c 	andi	r2,r5,1
  80d974:	3a4d883a 	add	r6,r7,r9
  80d978:	1000071e 	bne	r2,zero,80d998 <_free_r+0x218>
  80d97c:	80bffe17 	ldw	r2,-8(r16)
  80d980:	4091c83a 	sub	r8,r8,r2
  80d984:	41000317 	ldw	r4,12(r8)
  80d988:	40c00217 	ldw	r3,8(r8)
  80d98c:	308d883a 	add	r6,r6,r2
  80d990:	20c00215 	stw	r3,8(r4)
  80d994:	19000315 	stw	r4,12(r3)
  80d998:	008020b4 	movhi	r2,130
  80d99c:	10b7cf04 	addi	r2,r2,-8388
  80d9a0:	11000017 	ldw	r4,0(r2)
  80d9a4:	30c00054 	ori	r3,r6,1
  80d9a8:	52000215 	stw	r8,8(r10)
  80d9ac:	40c00115 	stw	r3,4(r8)
  80d9b0:	313fa036 	bltu	r6,r4,80d834 <_free_r+0xb4>
  80d9b4:	008020b4 	movhi	r2,130
  80d9b8:	10befa04 	addi	r2,r2,-1048
  80d9bc:	11400017 	ldw	r5,0(r2)
  80d9c0:	8809883a 	mov	r4,r17
  80d9c4:	080d6540 	call	80d654 <_malloc_trim_r>
  80d9c8:	003f9a06 	br	80d834 <_free_r+0xb4>
  80d9cc:	00800104 	movi	r2,4
  80d9d0:	10c0072e 	bgeu	r2,r3,80d9f0 <_free_r+0x270>
  80d9d4:	00800504 	movi	r2,20
  80d9d8:	10c01936 	bltu	r2,r3,80da40 <_free_r+0x2c0>
  80d9dc:	188016c4 	addi	r2,r3,91
  80d9e0:	100690fa 	slli	r3,r2,3
  80d9e4:	003fb306 	br	80d8b4 <_free_r+0x134>
  80d9e8:	01400044 	movi	r5,1
  80d9ec:	003f7e06 	br	80d7e8 <_free_r+0x68>
  80d9f0:	3804d1ba 	srli	r2,r7,6
  80d9f4:	10800e04 	addi	r2,r2,56
  80d9f8:	100690fa 	slli	r3,r2,3
  80d9fc:	003fad06 	br	80d8b4 <_free_r+0x134>
  80da00:	22000315 	stw	r8,12(r4)
  80da04:	22000215 	stw	r8,8(r4)
  80da08:	3a05883a 	add	r2,r7,r8
  80da0c:	38c00054 	ori	r3,r7,1
  80da10:	11c00015 	stw	r7,0(r2)
  80da14:	41000215 	stw	r4,8(r8)
  80da18:	40c00115 	stw	r3,4(r8)
  80da1c:	41000315 	stw	r4,12(r8)
  80da20:	003f8406 	br	80d834 <_free_r+0xb4>
  80da24:	1005d0ba 	srai	r2,r2,2
  80da28:	00c00044 	movi	r3,1
  80da2c:	51000117 	ldw	r4,4(r10)
  80da30:	1886983a 	sll	r3,r3,r2
  80da34:	20c8b03a 	or	r4,r4,r3
  80da38:	51000115 	stw	r4,4(r10)
  80da3c:	003fa706 	br	80d8dc <_free_r+0x15c>
  80da40:	00801504 	movi	r2,84
  80da44:	10c00436 	bltu	r2,r3,80da58 <_free_r+0x2d8>
  80da48:	3804d33a 	srli	r2,r7,12
  80da4c:	10801b84 	addi	r2,r2,110
  80da50:	100690fa 	slli	r3,r2,3
  80da54:	003f9706 	br	80d8b4 <_free_r+0x134>
  80da58:	00805504 	movi	r2,340
  80da5c:	10c00436 	bltu	r2,r3,80da70 <_free_r+0x2f0>
  80da60:	3804d3fa 	srli	r2,r7,15
  80da64:	10801dc4 	addi	r2,r2,119
  80da68:	100690fa 	slli	r3,r2,3
  80da6c:	003f9106 	br	80d8b4 <_free_r+0x134>
  80da70:	00815504 	movi	r2,1364
  80da74:	10c0032e 	bgeu	r2,r3,80da84 <_free_r+0x304>
  80da78:	00801f84 	movi	r2,126
  80da7c:	00c0fc04 	movi	r3,1008
  80da80:	003f8c06 	br	80d8b4 <_free_r+0x134>
  80da84:	3804d4ba 	srli	r2,r7,18
  80da88:	10801f04 	addi	r2,r2,124
  80da8c:	100690fa 	slli	r3,r2,3
  80da90:	003f8806 	br	80d8b4 <_free_r+0x134>

0080da94 <__sfvwrite_r>:
  80da94:	30800217 	ldw	r2,8(r6)
  80da98:	defff504 	addi	sp,sp,-44
  80da9c:	df000915 	stw	fp,36(sp)
  80daa0:	dd800715 	stw	r22,28(sp)
  80daa4:	dc800315 	stw	r18,12(sp)
  80daa8:	dfc00a15 	stw	ra,40(sp)
  80daac:	ddc00815 	stw	r23,32(sp)
  80dab0:	dd400615 	stw	r21,24(sp)
  80dab4:	dd000515 	stw	r20,20(sp)
  80dab8:	dcc00415 	stw	r19,16(sp)
  80dabc:	dc400215 	stw	r17,8(sp)
  80dac0:	dc000115 	stw	r16,4(sp)
  80dac4:	302d883a 	mov	r22,r6
  80dac8:	2039883a 	mov	fp,r4
  80dacc:	2825883a 	mov	r18,r5
  80dad0:	10001c26 	beq	r2,zero,80db44 <__sfvwrite_r+0xb0>
  80dad4:	29c0030b 	ldhu	r7,12(r5)
  80dad8:	3880020c 	andi	r2,r7,8
  80dadc:	10002726 	beq	r2,zero,80db7c <__sfvwrite_r+0xe8>
  80dae0:	28800417 	ldw	r2,16(r5)
  80dae4:	10002526 	beq	r2,zero,80db7c <__sfvwrite_r+0xe8>
  80dae8:	3880008c 	andi	r2,r7,2
  80daec:	b5400017 	ldw	r21,0(r22)
  80daf0:	10002826 	beq	r2,zero,80db94 <__sfvwrite_r+0x100>
  80daf4:	0021883a 	mov	r16,zero
  80daf8:	0023883a 	mov	r17,zero
  80dafc:	880d883a 	mov	r6,r17
  80db00:	e009883a 	mov	r4,fp
  80db04:	00810004 	movi	r2,1024
  80db08:	80006e26 	beq	r16,zero,80dcc4 <__sfvwrite_r+0x230>
  80db0c:	800f883a 	mov	r7,r16
  80db10:	91400717 	ldw	r5,28(r18)
  80db14:	1400012e 	bgeu	r2,r16,80db1c <__sfvwrite_r+0x88>
  80db18:	100f883a 	mov	r7,r2
  80db1c:	90c00917 	ldw	r3,36(r18)
  80db20:	183ee83a 	callr	r3
  80db24:	1007883a 	mov	r3,r2
  80db28:	80a1c83a 	sub	r16,r16,r2
  80db2c:	88a3883a 	add	r17,r17,r2
  80db30:	00806d0e 	bge	zero,r2,80dce8 <__sfvwrite_r+0x254>
  80db34:	b0800217 	ldw	r2,8(r22)
  80db38:	10c5c83a 	sub	r2,r2,r3
  80db3c:	b0800215 	stw	r2,8(r22)
  80db40:	103fee1e 	bne	r2,zero,80dafc <__sfvwrite_r+0x68>
  80db44:	0009883a 	mov	r4,zero
  80db48:	2005883a 	mov	r2,r4
  80db4c:	dfc00a17 	ldw	ra,40(sp)
  80db50:	df000917 	ldw	fp,36(sp)
  80db54:	ddc00817 	ldw	r23,32(sp)
  80db58:	dd800717 	ldw	r22,28(sp)
  80db5c:	dd400617 	ldw	r21,24(sp)
  80db60:	dd000517 	ldw	r20,20(sp)
  80db64:	dcc00417 	ldw	r19,16(sp)
  80db68:	dc800317 	ldw	r18,12(sp)
  80db6c:	dc400217 	ldw	r17,8(sp)
  80db70:	dc000117 	ldw	r16,4(sp)
  80db74:	dec00b04 	addi	sp,sp,44
  80db78:	f800283a 	ret
  80db7c:	080b85c0 	call	80b85c <__swsetup_r>
  80db80:	1000e41e 	bne	r2,zero,80df14 <__sfvwrite_r+0x480>
  80db84:	91c0030b 	ldhu	r7,12(r18)
  80db88:	b5400017 	ldw	r21,0(r22)
  80db8c:	3880008c 	andi	r2,r7,2
  80db90:	103fd81e 	bne	r2,zero,80daf4 <__sfvwrite_r+0x60>
  80db94:	3880004c 	andi	r2,r7,1
  80db98:	1005003a 	cmpeq	r2,r2,zero
  80db9c:	10005726 	beq	r2,zero,80dcfc <__sfvwrite_r+0x268>
  80dba0:	0029883a 	mov	r20,zero
  80dba4:	002f883a 	mov	r23,zero
  80dba8:	a0004226 	beq	r20,zero,80dcb4 <__sfvwrite_r+0x220>
  80dbac:	3880800c 	andi	r2,r7,512
  80dbb0:	94000217 	ldw	r16,8(r18)
  80dbb4:	10008b26 	beq	r2,zero,80dde4 <__sfvwrite_r+0x350>
  80dbb8:	800d883a 	mov	r6,r16
  80dbbc:	a400a536 	bltu	r20,r16,80de54 <__sfvwrite_r+0x3c0>
  80dbc0:	3881200c 	andi	r2,r7,1152
  80dbc4:	10002726 	beq	r2,zero,80dc64 <__sfvwrite_r+0x1d0>
  80dbc8:	90800517 	ldw	r2,20(r18)
  80dbcc:	92000417 	ldw	r8,16(r18)
  80dbd0:	91400017 	ldw	r5,0(r18)
  80dbd4:	1087883a 	add	r3,r2,r2
  80dbd8:	1887883a 	add	r3,r3,r2
  80dbdc:	1808d7fa 	srli	r4,r3,31
  80dbe0:	2a21c83a 	sub	r16,r5,r8
  80dbe4:	80800044 	addi	r2,r16,1
  80dbe8:	20c9883a 	add	r4,r4,r3
  80dbec:	2027d07a 	srai	r19,r4,1
  80dbf0:	a085883a 	add	r2,r20,r2
  80dbf4:	980d883a 	mov	r6,r19
  80dbf8:	9880022e 	bgeu	r19,r2,80dc04 <__sfvwrite_r+0x170>
  80dbfc:	1027883a 	mov	r19,r2
  80dc00:	100d883a 	mov	r6,r2
  80dc04:	3881000c 	andi	r2,r7,1024
  80dc08:	1000b826 	beq	r2,zero,80deec <__sfvwrite_r+0x458>
  80dc0c:	300b883a 	mov	r5,r6
  80dc10:	e009883a 	mov	r4,fp
  80dc14:	0808ef40 	call	808ef4 <_malloc_r>
  80dc18:	10003126 	beq	r2,zero,80dce0 <__sfvwrite_r+0x24c>
  80dc1c:	91400417 	ldw	r5,16(r18)
  80dc20:	1009883a 	mov	r4,r2
  80dc24:	800d883a 	mov	r6,r16
  80dc28:	1023883a 	mov	r17,r2
  80dc2c:	080e4600 	call	80e460 <memcpy>
  80dc30:	90c0030b 	ldhu	r3,12(r18)
  80dc34:	00beffc4 	movi	r2,-1025
  80dc38:	1886703a 	and	r3,r3,r2
  80dc3c:	18c02014 	ori	r3,r3,128
  80dc40:	90c0030d 	sth	r3,12(r18)
  80dc44:	9c07c83a 	sub	r3,r19,r16
  80dc48:	8c05883a 	add	r2,r17,r16
  80dc4c:	a00d883a 	mov	r6,r20
  80dc50:	a021883a 	mov	r16,r20
  80dc54:	90800015 	stw	r2,0(r18)
  80dc58:	90c00215 	stw	r3,8(r18)
  80dc5c:	94400415 	stw	r17,16(r18)
  80dc60:	94c00515 	stw	r19,20(r18)
  80dc64:	91000017 	ldw	r4,0(r18)
  80dc68:	b80b883a 	mov	r5,r23
  80dc6c:	a023883a 	mov	r17,r20
  80dc70:	080e5000 	call	80e500 <memmove>
  80dc74:	90c00217 	ldw	r3,8(r18)
  80dc78:	90800017 	ldw	r2,0(r18)
  80dc7c:	a027883a 	mov	r19,r20
  80dc80:	1c07c83a 	sub	r3,r3,r16
  80dc84:	1405883a 	add	r2,r2,r16
  80dc88:	90c00215 	stw	r3,8(r18)
  80dc8c:	a021883a 	mov	r16,r20
  80dc90:	90800015 	stw	r2,0(r18)
  80dc94:	b0800217 	ldw	r2,8(r22)
  80dc98:	1405c83a 	sub	r2,r2,r16
  80dc9c:	b0800215 	stw	r2,8(r22)
  80dca0:	103fa826 	beq	r2,zero,80db44 <__sfvwrite_r+0xb0>
  80dca4:	a469c83a 	sub	r20,r20,r17
  80dca8:	91c0030b 	ldhu	r7,12(r18)
  80dcac:	bcef883a 	add	r23,r23,r19
  80dcb0:	a03fbe1e 	bne	r20,zero,80dbac <__sfvwrite_r+0x118>
  80dcb4:	adc00017 	ldw	r23,0(r21)
  80dcb8:	ad000117 	ldw	r20,4(r21)
  80dcbc:	ad400204 	addi	r21,r21,8
  80dcc0:	003fb906 	br	80dba8 <__sfvwrite_r+0x114>
  80dcc4:	ac400017 	ldw	r17,0(r21)
  80dcc8:	ac000117 	ldw	r16,4(r21)
  80dccc:	ad400204 	addi	r21,r21,8
  80dcd0:	003f8a06 	br	80dafc <__sfvwrite_r+0x68>
  80dcd4:	91400417 	ldw	r5,16(r18)
  80dcd8:	e009883a 	mov	r4,fp
  80dcdc:	080d7800 	call	80d780 <_free_r>
  80dce0:	00800304 	movi	r2,12
  80dce4:	e0800015 	stw	r2,0(fp)
  80dce8:	9080030b 	ldhu	r2,12(r18)
  80dcec:	013fffc4 	movi	r4,-1
  80dcf0:	10801014 	ori	r2,r2,64
  80dcf4:	9080030d 	sth	r2,12(r18)
  80dcf8:	003f9306 	br	80db48 <__sfvwrite_r+0xb4>
  80dcfc:	0027883a 	mov	r19,zero
  80dd00:	002f883a 	mov	r23,zero
  80dd04:	d8000015 	stw	zero,0(sp)
  80dd08:	0029883a 	mov	r20,zero
  80dd0c:	98001e26 	beq	r19,zero,80dd88 <__sfvwrite_r+0x2f4>
  80dd10:	d8c00017 	ldw	r3,0(sp)
  80dd14:	1804c03a 	cmpne	r2,r3,zero
  80dd18:	10005e26 	beq	r2,zero,80de94 <__sfvwrite_r+0x400>
  80dd1c:	9821883a 	mov	r16,r19
  80dd20:	a4c0012e 	bgeu	r20,r19,80dd28 <__sfvwrite_r+0x294>
  80dd24:	a021883a 	mov	r16,r20
  80dd28:	91000017 	ldw	r4,0(r18)
  80dd2c:	90800417 	ldw	r2,16(r18)
  80dd30:	91800217 	ldw	r6,8(r18)
  80dd34:	91c00517 	ldw	r7,20(r18)
  80dd38:	1100022e 	bgeu	r2,r4,80dd44 <__sfvwrite_r+0x2b0>
  80dd3c:	31e3883a 	add	r17,r6,r7
  80dd40:	8c001616 	blt	r17,r16,80dd9c <__sfvwrite_r+0x308>
  80dd44:	81c03816 	blt	r16,r7,80de28 <__sfvwrite_r+0x394>
  80dd48:	90c00917 	ldw	r3,36(r18)
  80dd4c:	91400717 	ldw	r5,28(r18)
  80dd50:	e009883a 	mov	r4,fp
  80dd54:	b80d883a 	mov	r6,r23
  80dd58:	183ee83a 	callr	r3
  80dd5c:	1023883a 	mov	r17,r2
  80dd60:	00bfe10e 	bge	zero,r2,80dce8 <__sfvwrite_r+0x254>
  80dd64:	a469c83a 	sub	r20,r20,r17
  80dd68:	a0001826 	beq	r20,zero,80ddcc <__sfvwrite_r+0x338>
  80dd6c:	b0800217 	ldw	r2,8(r22)
  80dd70:	1445c83a 	sub	r2,r2,r17
  80dd74:	b0800215 	stw	r2,8(r22)
  80dd78:	103f7226 	beq	r2,zero,80db44 <__sfvwrite_r+0xb0>
  80dd7c:	9c67c83a 	sub	r19,r19,r17
  80dd80:	bc6f883a 	add	r23,r23,r17
  80dd84:	983fe21e 	bne	r19,zero,80dd10 <__sfvwrite_r+0x27c>
  80dd88:	adc00017 	ldw	r23,0(r21)
  80dd8c:	acc00117 	ldw	r19,4(r21)
  80dd90:	ad400204 	addi	r21,r21,8
  80dd94:	d8000015 	stw	zero,0(sp)
  80dd98:	003fdc06 	br	80dd0c <__sfvwrite_r+0x278>
  80dd9c:	b80b883a 	mov	r5,r23
  80dda0:	880d883a 	mov	r6,r17
  80dda4:	080e5000 	call	80e500 <memmove>
  80dda8:	90c00017 	ldw	r3,0(r18)
  80ddac:	e009883a 	mov	r4,fp
  80ddb0:	900b883a 	mov	r5,r18
  80ddb4:	1c47883a 	add	r3,r3,r17
  80ddb8:	90c00015 	stw	r3,0(r18)
  80ddbc:	080d1640 	call	80d164 <_fflush_r>
  80ddc0:	103fc91e 	bne	r2,zero,80dce8 <__sfvwrite_r+0x254>
  80ddc4:	a469c83a 	sub	r20,r20,r17
  80ddc8:	a03fe81e 	bne	r20,zero,80dd6c <__sfvwrite_r+0x2d8>
  80ddcc:	e009883a 	mov	r4,fp
  80ddd0:	900b883a 	mov	r5,r18
  80ddd4:	080d1640 	call	80d164 <_fflush_r>
  80ddd8:	103fc31e 	bne	r2,zero,80dce8 <__sfvwrite_r+0x254>
  80dddc:	d8000015 	stw	zero,0(sp)
  80dde0:	003fe206 	br	80dd6c <__sfvwrite_r+0x2d8>
  80dde4:	91000017 	ldw	r4,0(r18)
  80dde8:	90800417 	ldw	r2,16(r18)
  80ddec:	1100022e 	bgeu	r2,r4,80ddf8 <__sfvwrite_r+0x364>
  80ddf0:	8023883a 	mov	r17,r16
  80ddf4:	85003136 	bltu	r16,r20,80debc <__sfvwrite_r+0x428>
  80ddf8:	91c00517 	ldw	r7,20(r18)
  80ddfc:	a1c01836 	bltu	r20,r7,80de60 <__sfvwrite_r+0x3cc>
  80de00:	90c00917 	ldw	r3,36(r18)
  80de04:	91400717 	ldw	r5,28(r18)
  80de08:	e009883a 	mov	r4,fp
  80de0c:	b80d883a 	mov	r6,r23
  80de10:	183ee83a 	callr	r3
  80de14:	1021883a 	mov	r16,r2
  80de18:	00bfb30e 	bge	zero,r2,80dce8 <__sfvwrite_r+0x254>
  80de1c:	1023883a 	mov	r17,r2
  80de20:	1027883a 	mov	r19,r2
  80de24:	003f9b06 	br	80dc94 <__sfvwrite_r+0x200>
  80de28:	b80b883a 	mov	r5,r23
  80de2c:	800d883a 	mov	r6,r16
  80de30:	080e5000 	call	80e500 <memmove>
  80de34:	90c00217 	ldw	r3,8(r18)
  80de38:	90800017 	ldw	r2,0(r18)
  80de3c:	8023883a 	mov	r17,r16
  80de40:	1c07c83a 	sub	r3,r3,r16
  80de44:	1405883a 	add	r2,r2,r16
  80de48:	90c00215 	stw	r3,8(r18)
  80de4c:	90800015 	stw	r2,0(r18)
  80de50:	003fc406 	br	80dd64 <__sfvwrite_r+0x2d0>
  80de54:	a00d883a 	mov	r6,r20
  80de58:	a021883a 	mov	r16,r20
  80de5c:	003f8106 	br	80dc64 <__sfvwrite_r+0x1d0>
  80de60:	b80b883a 	mov	r5,r23
  80de64:	a00d883a 	mov	r6,r20
  80de68:	080e5000 	call	80e500 <memmove>
  80de6c:	90c00217 	ldw	r3,8(r18)
  80de70:	90800017 	ldw	r2,0(r18)
  80de74:	a021883a 	mov	r16,r20
  80de78:	1d07c83a 	sub	r3,r3,r20
  80de7c:	1505883a 	add	r2,r2,r20
  80de80:	a023883a 	mov	r17,r20
  80de84:	a027883a 	mov	r19,r20
  80de88:	90c00215 	stw	r3,8(r18)
  80de8c:	90800015 	stw	r2,0(r18)
  80de90:	003f8006 	br	80dc94 <__sfvwrite_r+0x200>
  80de94:	b809883a 	mov	r4,r23
  80de98:	01400284 	movi	r5,10
  80de9c:	980d883a 	mov	r6,r19
  80dea0:	080e37c0 	call	80e37c <memchr>
  80dea4:	10001726 	beq	r2,zero,80df04 <__sfvwrite_r+0x470>
  80dea8:	15c5c83a 	sub	r2,r2,r23
  80deac:	15000044 	addi	r20,r2,1
  80deb0:	00800044 	movi	r2,1
  80deb4:	d8800015 	stw	r2,0(sp)
  80deb8:	003f9806 	br	80dd1c <__sfvwrite_r+0x288>
  80debc:	b80b883a 	mov	r5,r23
  80dec0:	800d883a 	mov	r6,r16
  80dec4:	080e5000 	call	80e500 <memmove>
  80dec8:	90c00017 	ldw	r3,0(r18)
  80decc:	e009883a 	mov	r4,fp
  80ded0:	900b883a 	mov	r5,r18
  80ded4:	1c07883a 	add	r3,r3,r16
  80ded8:	90c00015 	stw	r3,0(r18)
  80dedc:	8027883a 	mov	r19,r16
  80dee0:	080d1640 	call	80d164 <_fflush_r>
  80dee4:	103f6b26 	beq	r2,zero,80dc94 <__sfvwrite_r+0x200>
  80dee8:	003f7f06 	br	80dce8 <__sfvwrite_r+0x254>
  80deec:	400b883a 	mov	r5,r8
  80def0:	e009883a 	mov	r4,fp
  80def4:	080f66c0 	call	80f66c <_realloc_r>
  80def8:	103f7626 	beq	r2,zero,80dcd4 <__sfvwrite_r+0x240>
  80defc:	1023883a 	mov	r17,r2
  80df00:	003f5006 	br	80dc44 <__sfvwrite_r+0x1b0>
  80df04:	00c00044 	movi	r3,1
  80df08:	9d000044 	addi	r20,r19,1
  80df0c:	d8c00015 	stw	r3,0(sp)
  80df10:	003f8206 	br	80dd1c <__sfvwrite_r+0x288>
  80df14:	9080030b 	ldhu	r2,12(r18)
  80df18:	00c00244 	movi	r3,9
  80df1c:	013fffc4 	movi	r4,-1
  80df20:	10801014 	ori	r2,r2,64
  80df24:	9080030d 	sth	r2,12(r18)
  80df28:	e0c00015 	stw	r3,0(fp)
  80df2c:	003f0606 	br	80db48 <__sfvwrite_r+0xb4>

0080df30 <_fwalk_reent>:
  80df30:	defff704 	addi	sp,sp,-36
  80df34:	dcc00315 	stw	r19,12(sp)
  80df38:	24c0b804 	addi	r19,r4,736
  80df3c:	dd800615 	stw	r22,24(sp)
  80df40:	dd400515 	stw	r21,20(sp)
  80df44:	dfc00815 	stw	ra,32(sp)
  80df48:	ddc00715 	stw	r23,28(sp)
  80df4c:	dd000415 	stw	r20,16(sp)
  80df50:	dc800215 	stw	r18,8(sp)
  80df54:	dc400115 	stw	r17,4(sp)
  80df58:	dc000015 	stw	r16,0(sp)
  80df5c:	202b883a 	mov	r21,r4
  80df60:	282d883a 	mov	r22,r5
  80df64:	080d3ec0 	call	80d3ec <__sfp_lock_acquire>
  80df68:	98002126 	beq	r19,zero,80dff0 <_fwalk_reent+0xc0>
  80df6c:	002f883a 	mov	r23,zero
  80df70:	9c800117 	ldw	r18,4(r19)
  80df74:	9c000217 	ldw	r16,8(r19)
  80df78:	90bfffc4 	addi	r2,r18,-1
  80df7c:	10000d16 	blt	r2,zero,80dfb4 <_fwalk_reent+0x84>
  80df80:	0023883a 	mov	r17,zero
  80df84:	053fffc4 	movi	r20,-1
  80df88:	8080030f 	ldh	r2,12(r16)
  80df8c:	8c400044 	addi	r17,r17,1
  80df90:	10000626 	beq	r2,zero,80dfac <_fwalk_reent+0x7c>
  80df94:	8080038f 	ldh	r2,14(r16)
  80df98:	800b883a 	mov	r5,r16
  80df9c:	a809883a 	mov	r4,r21
  80dfa0:	15000226 	beq	r2,r20,80dfac <_fwalk_reent+0x7c>
  80dfa4:	b03ee83a 	callr	r22
  80dfa8:	b8aeb03a 	or	r23,r23,r2
  80dfac:	84001704 	addi	r16,r16,92
  80dfb0:	947ff51e 	bne	r18,r17,80df88 <_fwalk_reent+0x58>
  80dfb4:	9cc00017 	ldw	r19,0(r19)
  80dfb8:	983fed1e 	bne	r19,zero,80df70 <_fwalk_reent+0x40>
  80dfbc:	080d3f00 	call	80d3f0 <__sfp_lock_release>
  80dfc0:	b805883a 	mov	r2,r23
  80dfc4:	dfc00817 	ldw	ra,32(sp)
  80dfc8:	ddc00717 	ldw	r23,28(sp)
  80dfcc:	dd800617 	ldw	r22,24(sp)
  80dfd0:	dd400517 	ldw	r21,20(sp)
  80dfd4:	dd000417 	ldw	r20,16(sp)
  80dfd8:	dcc00317 	ldw	r19,12(sp)
  80dfdc:	dc800217 	ldw	r18,8(sp)
  80dfe0:	dc400117 	ldw	r17,4(sp)
  80dfe4:	dc000017 	ldw	r16,0(sp)
  80dfe8:	dec00904 	addi	sp,sp,36
  80dfec:	f800283a 	ret
  80dff0:	002f883a 	mov	r23,zero
  80dff4:	003ff106 	br	80dfbc <_fwalk_reent+0x8c>

0080dff8 <_fwalk>:
  80dff8:	defff804 	addi	sp,sp,-32
  80dffc:	dcc00315 	stw	r19,12(sp)
  80e000:	24c0b804 	addi	r19,r4,736
  80e004:	dd400515 	stw	r21,20(sp)
  80e008:	dfc00715 	stw	ra,28(sp)
  80e00c:	dd800615 	stw	r22,24(sp)
  80e010:	dd000415 	stw	r20,16(sp)
  80e014:	dc800215 	stw	r18,8(sp)
  80e018:	dc400115 	stw	r17,4(sp)
  80e01c:	dc000015 	stw	r16,0(sp)
  80e020:	282b883a 	mov	r21,r5
  80e024:	080d3ec0 	call	80d3ec <__sfp_lock_acquire>
  80e028:	98001f26 	beq	r19,zero,80e0a8 <_fwalk+0xb0>
  80e02c:	002d883a 	mov	r22,zero
  80e030:	9c800117 	ldw	r18,4(r19)
  80e034:	9c000217 	ldw	r16,8(r19)
  80e038:	90bfffc4 	addi	r2,r18,-1
  80e03c:	10000c16 	blt	r2,zero,80e070 <_fwalk+0x78>
  80e040:	0023883a 	mov	r17,zero
  80e044:	053fffc4 	movi	r20,-1
  80e048:	8080030f 	ldh	r2,12(r16)
  80e04c:	8c400044 	addi	r17,r17,1
  80e050:	10000526 	beq	r2,zero,80e068 <_fwalk+0x70>
  80e054:	8080038f 	ldh	r2,14(r16)
  80e058:	8009883a 	mov	r4,r16
  80e05c:	15000226 	beq	r2,r20,80e068 <_fwalk+0x70>
  80e060:	a83ee83a 	callr	r21
  80e064:	b0acb03a 	or	r22,r22,r2
  80e068:	84001704 	addi	r16,r16,92
  80e06c:	947ff61e 	bne	r18,r17,80e048 <_fwalk+0x50>
  80e070:	9cc00017 	ldw	r19,0(r19)
  80e074:	983fee1e 	bne	r19,zero,80e030 <_fwalk+0x38>
  80e078:	080d3f00 	call	80d3f0 <__sfp_lock_release>
  80e07c:	b005883a 	mov	r2,r22
  80e080:	dfc00717 	ldw	ra,28(sp)
  80e084:	dd800617 	ldw	r22,24(sp)
  80e088:	dd400517 	ldw	r21,20(sp)
  80e08c:	dd000417 	ldw	r20,16(sp)
  80e090:	dcc00317 	ldw	r19,12(sp)
  80e094:	dc800217 	ldw	r18,8(sp)
  80e098:	dc400117 	ldw	r17,4(sp)
  80e09c:	dc000017 	ldw	r16,0(sp)
  80e0a0:	dec00804 	addi	sp,sp,32
  80e0a4:	f800283a 	ret
  80e0a8:	002d883a 	mov	r22,zero
  80e0ac:	003ff206 	br	80e078 <_fwalk+0x80>

0080e0b0 <_gettimeofday_r>:
  80e0b0:	defffd04 	addi	sp,sp,-12
  80e0b4:	dc000015 	stw	r16,0(sp)
  80e0b8:	040020b4 	movhi	r16,130
  80e0bc:	843efd04 	addi	r16,r16,-1036
  80e0c0:	dc400115 	stw	r17,4(sp)
  80e0c4:	80000015 	stw	zero,0(r16)
  80e0c8:	2023883a 	mov	r17,r4
  80e0cc:	2809883a 	mov	r4,r5
  80e0d0:	300b883a 	mov	r5,r6
  80e0d4:	dfc00215 	stw	ra,8(sp)
  80e0d8:	08113a00 	call	8113a0 <gettimeofday>
  80e0dc:	1007883a 	mov	r3,r2
  80e0e0:	00bfffc4 	movi	r2,-1
  80e0e4:	18800626 	beq	r3,r2,80e100 <_gettimeofday_r+0x50>
  80e0e8:	1805883a 	mov	r2,r3
  80e0ec:	dfc00217 	ldw	ra,8(sp)
  80e0f0:	dc400117 	ldw	r17,4(sp)
  80e0f4:	dc000017 	ldw	r16,0(sp)
  80e0f8:	dec00304 	addi	sp,sp,12
  80e0fc:	f800283a 	ret
  80e100:	80800017 	ldw	r2,0(r16)
  80e104:	103ff826 	beq	r2,zero,80e0e8 <_gettimeofday_r+0x38>
  80e108:	88800015 	stw	r2,0(r17)
  80e10c:	1805883a 	mov	r2,r3
  80e110:	dfc00217 	ldw	ra,8(sp)
  80e114:	dc400117 	ldw	r17,4(sp)
  80e118:	dc000017 	ldw	r16,0(sp)
  80e11c:	dec00304 	addi	sp,sp,12
  80e120:	f800283a 	ret

0080e124 <__locale_charset>:
  80e124:	d0a00b17 	ldw	r2,-32724(gp)
  80e128:	f800283a 	ret

0080e12c <_localeconv_r>:
  80e12c:	008020b4 	movhi	r2,130
  80e130:	10b05404 	addi	r2,r2,-16048
  80e134:	f800283a 	ret

0080e138 <localeconv>:
  80e138:	008020b4 	movhi	r2,130
  80e13c:	10b7cd04 	addi	r2,r2,-8396
  80e140:	11000017 	ldw	r4,0(r2)
  80e144:	080e12c1 	jmpi	80e12c <_localeconv_r>

0080e148 <_setlocale_r>:
  80e148:	defffc04 	addi	sp,sp,-16
  80e14c:	00c020b4 	movhi	r3,130
  80e150:	18f02a04 	addi	r3,r3,-16216
  80e154:	dc800215 	stw	r18,8(sp)
  80e158:	dc400115 	stw	r17,4(sp)
  80e15c:	dc000015 	stw	r16,0(sp)
  80e160:	2023883a 	mov	r17,r4
  80e164:	2825883a 	mov	r18,r5
  80e168:	dfc00315 	stw	ra,12(sp)
  80e16c:	3021883a 	mov	r16,r6
  80e170:	3009883a 	mov	r4,r6
  80e174:	180b883a 	mov	r5,r3
  80e178:	30000926 	beq	r6,zero,80e1a0 <_setlocale_r+0x58>
  80e17c:	080fdec0 	call	80fdec <strcmp>
  80e180:	8009883a 	mov	r4,r16
  80e184:	014020b4 	movhi	r5,130
  80e188:	29703b04 	addi	r5,r5,-16148
  80e18c:	10000b1e 	bne	r2,zero,80e1bc <_setlocale_r+0x74>
  80e190:	8c000d15 	stw	r16,52(r17)
  80e194:	8c800c15 	stw	r18,48(r17)
  80e198:	00c020b4 	movhi	r3,130
  80e19c:	18f02a04 	addi	r3,r3,-16216
  80e1a0:	1805883a 	mov	r2,r3
  80e1a4:	dfc00317 	ldw	ra,12(sp)
  80e1a8:	dc800217 	ldw	r18,8(sp)
  80e1ac:	dc400117 	ldw	r17,4(sp)
  80e1b0:	dc000017 	ldw	r16,0(sp)
  80e1b4:	dec00404 	addi	sp,sp,16
  80e1b8:	f800283a 	ret
  80e1bc:	080fdec0 	call	80fdec <strcmp>
  80e1c0:	0007883a 	mov	r3,zero
  80e1c4:	103ff226 	beq	r2,zero,80e190 <_setlocale_r+0x48>
  80e1c8:	003ff506 	br	80e1a0 <_setlocale_r+0x58>

0080e1cc <setlocale>:
  80e1cc:	018020b4 	movhi	r6,130
  80e1d0:	31b7cd04 	addi	r6,r6,-8396
  80e1d4:	2007883a 	mov	r3,r4
  80e1d8:	31000017 	ldw	r4,0(r6)
  80e1dc:	280d883a 	mov	r6,r5
  80e1e0:	180b883a 	mov	r5,r3
  80e1e4:	080e1481 	jmpi	80e148 <_setlocale_r>

0080e1e8 <__smakebuf_r>:
  80e1e8:	2880030b 	ldhu	r2,12(r5)
  80e1ec:	deffed04 	addi	sp,sp,-76
  80e1f0:	dc401015 	stw	r17,64(sp)
  80e1f4:	1080008c 	andi	r2,r2,2
  80e1f8:	dc000f15 	stw	r16,60(sp)
  80e1fc:	dfc01215 	stw	ra,72(sp)
  80e200:	dc801115 	stw	r18,68(sp)
  80e204:	2821883a 	mov	r16,r5
  80e208:	2023883a 	mov	r17,r4
  80e20c:	10000b26 	beq	r2,zero,80e23c <__smakebuf_r+0x54>
  80e210:	28c010c4 	addi	r3,r5,67
  80e214:	00800044 	movi	r2,1
  80e218:	28800515 	stw	r2,20(r5)
  80e21c:	28c00415 	stw	r3,16(r5)
  80e220:	28c00015 	stw	r3,0(r5)
  80e224:	dfc01217 	ldw	ra,72(sp)
  80e228:	dc801117 	ldw	r18,68(sp)
  80e22c:	dc401017 	ldw	r17,64(sp)
  80e230:	dc000f17 	ldw	r16,60(sp)
  80e234:	dec01304 	addi	sp,sp,76
  80e238:	f800283a 	ret
  80e23c:	2940038f 	ldh	r5,14(r5)
  80e240:	28002116 	blt	r5,zero,80e2c8 <__smakebuf_r+0xe0>
  80e244:	d80d883a 	mov	r6,sp
  80e248:	08101680 	call	810168 <_fstat_r>
  80e24c:	10001e16 	blt	r2,zero,80e2c8 <__smakebuf_r+0xe0>
  80e250:	d8800117 	ldw	r2,4(sp)
  80e254:	00e00014 	movui	r3,32768
  80e258:	113c000c 	andi	r4,r2,61440
  80e25c:	20c03126 	beq	r4,r3,80e324 <__smakebuf_r+0x13c>
  80e260:	8080030b 	ldhu	r2,12(r16)
  80e264:	00c80004 	movi	r3,8192
  80e268:	10820014 	ori	r2,r2,2048
  80e26c:	8080030d 	sth	r2,12(r16)
  80e270:	20c01e26 	beq	r4,r3,80e2ec <__smakebuf_r+0x104>
  80e274:	04810004 	movi	r18,1024
  80e278:	8809883a 	mov	r4,r17
  80e27c:	900b883a 	mov	r5,r18
  80e280:	0808ef40 	call	808ef4 <_malloc_r>
  80e284:	1009883a 	mov	r4,r2
  80e288:	10003126 	beq	r2,zero,80e350 <__smakebuf_r+0x168>
  80e28c:	80c0030b 	ldhu	r3,12(r16)
  80e290:	00802074 	movhi	r2,129
  80e294:	10b53804 	addi	r2,r2,-11040
  80e298:	88800f15 	stw	r2,60(r17)
  80e29c:	18c02014 	ori	r3,r3,128
  80e2a0:	84800515 	stw	r18,20(r16)
  80e2a4:	80c0030d 	sth	r3,12(r16)
  80e2a8:	81000415 	stw	r4,16(r16)
  80e2ac:	81000015 	stw	r4,0(r16)
  80e2b0:	dfc01217 	ldw	ra,72(sp)
  80e2b4:	dc801117 	ldw	r18,68(sp)
  80e2b8:	dc401017 	ldw	r17,64(sp)
  80e2bc:	dc000f17 	ldw	r16,60(sp)
  80e2c0:	dec01304 	addi	sp,sp,76
  80e2c4:	f800283a 	ret
  80e2c8:	80c0030b 	ldhu	r3,12(r16)
  80e2cc:	1880200c 	andi	r2,r3,128
  80e2d0:	10000426 	beq	r2,zero,80e2e4 <__smakebuf_r+0xfc>
  80e2d4:	04801004 	movi	r18,64
  80e2d8:	18820014 	ori	r2,r3,2048
  80e2dc:	8080030d 	sth	r2,12(r16)
  80e2e0:	003fe506 	br	80e278 <__smakebuf_r+0x90>
  80e2e4:	04810004 	movi	r18,1024
  80e2e8:	003ffb06 	br	80e2d8 <__smakebuf_r+0xf0>
  80e2ec:	8140038f 	ldh	r5,14(r16)
  80e2f0:	8809883a 	mov	r4,r17
  80e2f4:	08101dc0 	call	8101dc <_isatty_r>
  80e2f8:	103fde26 	beq	r2,zero,80e274 <__smakebuf_r+0x8c>
  80e2fc:	8080030b 	ldhu	r2,12(r16)
  80e300:	80c010c4 	addi	r3,r16,67
  80e304:	04810004 	movi	r18,1024
  80e308:	10800054 	ori	r2,r2,1
  80e30c:	8080030d 	sth	r2,12(r16)
  80e310:	00800044 	movi	r2,1
  80e314:	80c00415 	stw	r3,16(r16)
  80e318:	80800515 	stw	r2,20(r16)
  80e31c:	80c00015 	stw	r3,0(r16)
  80e320:	003fd506 	br	80e278 <__smakebuf_r+0x90>
  80e324:	80c00a17 	ldw	r3,40(r16)
  80e328:	00802074 	movhi	r2,129
  80e32c:	10bf2a04 	addi	r2,r2,-856
  80e330:	18bfcb1e 	bne	r3,r2,80e260 <__smakebuf_r+0x78>
  80e334:	8080030b 	ldhu	r2,12(r16)
  80e338:	00c10004 	movi	r3,1024
  80e33c:	1825883a 	mov	r18,r3
  80e340:	10c4b03a 	or	r2,r2,r3
  80e344:	8080030d 	sth	r2,12(r16)
  80e348:	80c01315 	stw	r3,76(r16)
  80e34c:	003fca06 	br	80e278 <__smakebuf_r+0x90>
  80e350:	8100030b 	ldhu	r4,12(r16)
  80e354:	2080800c 	andi	r2,r4,512
  80e358:	103fb21e 	bne	r2,zero,80e224 <__smakebuf_r+0x3c>
  80e35c:	80c010c4 	addi	r3,r16,67
  80e360:	21000094 	ori	r4,r4,2
  80e364:	00800044 	movi	r2,1
  80e368:	80800515 	stw	r2,20(r16)
  80e36c:	8100030d 	sth	r4,12(r16)
  80e370:	80c00415 	stw	r3,16(r16)
  80e374:	80c00015 	stw	r3,0(r16)
  80e378:	003faa06 	br	80e224 <__smakebuf_r+0x3c>

0080e37c <memchr>:
  80e37c:	008000c4 	movi	r2,3
  80e380:	29403fcc 	andi	r5,r5,255
  80e384:	2007883a 	mov	r3,r4
  80e388:	1180022e 	bgeu	r2,r6,80e394 <memchr+0x18>
  80e38c:	2084703a 	and	r2,r4,r2
  80e390:	10000b26 	beq	r2,zero,80e3c0 <memchr+0x44>
  80e394:	313fffc4 	addi	r4,r6,-1
  80e398:	3000051e 	bne	r6,zero,80e3b0 <memchr+0x34>
  80e39c:	00002c06 	br	80e450 <memchr+0xd4>
  80e3a0:	213fffc4 	addi	r4,r4,-1
  80e3a4:	00bfffc4 	movi	r2,-1
  80e3a8:	18c00044 	addi	r3,r3,1
  80e3ac:	20802826 	beq	r4,r2,80e450 <memchr+0xd4>
  80e3b0:	18800003 	ldbu	r2,0(r3)
  80e3b4:	28bffa1e 	bne	r5,r2,80e3a0 <memchr+0x24>
  80e3b8:	1805883a 	mov	r2,r3
  80e3bc:	f800283a 	ret
  80e3c0:	0011883a 	mov	r8,zero
  80e3c4:	0007883a 	mov	r3,zero
  80e3c8:	01c00104 	movi	r7,4
  80e3cc:	4004923a 	slli	r2,r8,8
  80e3d0:	18c00044 	addi	r3,r3,1
  80e3d4:	1151883a 	add	r8,r2,r5
  80e3d8:	19fffc1e 	bne	r3,r7,80e3cc <memchr+0x50>
  80e3dc:	02bfbff4 	movhi	r10,65279
  80e3e0:	52bfbfc4 	addi	r10,r10,-257
  80e3e4:	02602074 	movhi	r9,32897
  80e3e8:	4a602004 	addi	r9,r9,-32640
  80e3ec:	02c000c4 	movi	r11,3
  80e3f0:	20800017 	ldw	r2,0(r4)
  80e3f4:	31bfff04 	addi	r6,r6,-4
  80e3f8:	200f883a 	mov	r7,r4
  80e3fc:	1204f03a 	xor	r2,r2,r8
  80e400:	1287883a 	add	r3,r2,r10
  80e404:	1a46703a 	and	r3,r3,r9
  80e408:	0084303a 	nor	r2,zero,r2
  80e40c:	10c4703a 	and	r2,r2,r3
  80e410:	10000b26 	beq	r2,zero,80e440 <memchr+0xc4>
  80e414:	20800003 	ldbu	r2,0(r4)
  80e418:	28800f26 	beq	r5,r2,80e458 <memchr+0xdc>
  80e41c:	20800043 	ldbu	r2,1(r4)
  80e420:	21c00044 	addi	r7,r4,1
  80e424:	28800c26 	beq	r5,r2,80e458 <memchr+0xdc>
  80e428:	20800083 	ldbu	r2,2(r4)
  80e42c:	21c00084 	addi	r7,r4,2
  80e430:	28800926 	beq	r5,r2,80e458 <memchr+0xdc>
  80e434:	208000c3 	ldbu	r2,3(r4)
  80e438:	21c000c4 	addi	r7,r4,3
  80e43c:	28800626 	beq	r5,r2,80e458 <memchr+0xdc>
  80e440:	21000104 	addi	r4,r4,4
  80e444:	59bfea36 	bltu	r11,r6,80e3f0 <memchr+0x74>
  80e448:	2007883a 	mov	r3,r4
  80e44c:	003fd106 	br	80e394 <memchr+0x18>
  80e450:	0005883a 	mov	r2,zero
  80e454:	f800283a 	ret
  80e458:	3805883a 	mov	r2,r7
  80e45c:	f800283a 	ret

0080e460 <memcpy>:
  80e460:	01c003c4 	movi	r7,15
  80e464:	2007883a 	mov	r3,r4
  80e468:	3980032e 	bgeu	r7,r6,80e478 <memcpy+0x18>
  80e46c:	2904b03a 	or	r2,r5,r4
  80e470:	108000cc 	andi	r2,r2,3
  80e474:	10000926 	beq	r2,zero,80e49c <memcpy+0x3c>
  80e478:	30000626 	beq	r6,zero,80e494 <memcpy+0x34>
  80e47c:	30cd883a 	add	r6,r6,r3
  80e480:	28800003 	ldbu	r2,0(r5)
  80e484:	29400044 	addi	r5,r5,1
  80e488:	18800005 	stb	r2,0(r3)
  80e48c:	18c00044 	addi	r3,r3,1
  80e490:	30fffb1e 	bne	r6,r3,80e480 <memcpy+0x20>
  80e494:	2005883a 	mov	r2,r4
  80e498:	f800283a 	ret
  80e49c:	3811883a 	mov	r8,r7
  80e4a0:	200f883a 	mov	r7,r4
  80e4a4:	28c00017 	ldw	r3,0(r5)
  80e4a8:	31bffc04 	addi	r6,r6,-16
  80e4ac:	38c00015 	stw	r3,0(r7)
  80e4b0:	28800117 	ldw	r2,4(r5)
  80e4b4:	38800115 	stw	r2,4(r7)
  80e4b8:	28c00217 	ldw	r3,8(r5)
  80e4bc:	38c00215 	stw	r3,8(r7)
  80e4c0:	28800317 	ldw	r2,12(r5)
  80e4c4:	29400404 	addi	r5,r5,16
  80e4c8:	38800315 	stw	r2,12(r7)
  80e4cc:	39c00404 	addi	r7,r7,16
  80e4d0:	41bff436 	bltu	r8,r6,80e4a4 <memcpy+0x44>
  80e4d4:	008000c4 	movi	r2,3
  80e4d8:	1180072e 	bgeu	r2,r6,80e4f8 <memcpy+0x98>
  80e4dc:	1007883a 	mov	r3,r2
  80e4e0:	28800017 	ldw	r2,0(r5)
  80e4e4:	31bfff04 	addi	r6,r6,-4
  80e4e8:	29400104 	addi	r5,r5,4
  80e4ec:	38800015 	stw	r2,0(r7)
  80e4f0:	39c00104 	addi	r7,r7,4
  80e4f4:	19bffa36 	bltu	r3,r6,80e4e0 <memcpy+0x80>
  80e4f8:	3807883a 	mov	r3,r7
  80e4fc:	003fde06 	br	80e478 <memcpy+0x18>

0080e500 <memmove>:
  80e500:	2807883a 	mov	r3,r5
  80e504:	2011883a 	mov	r8,r4
  80e508:	29000c2e 	bgeu	r5,r4,80e53c <memmove+0x3c>
  80e50c:	298f883a 	add	r7,r5,r6
  80e510:	21c00a2e 	bgeu	r4,r7,80e53c <memmove+0x3c>
  80e514:	30000726 	beq	r6,zero,80e534 <memmove+0x34>
  80e518:	2187883a 	add	r3,r4,r6
  80e51c:	198dc83a 	sub	r6,r3,r6
  80e520:	39ffffc4 	addi	r7,r7,-1
  80e524:	38800003 	ldbu	r2,0(r7)
  80e528:	18ffffc4 	addi	r3,r3,-1
  80e52c:	18800005 	stb	r2,0(r3)
  80e530:	19bffb1e 	bne	r3,r6,80e520 <memmove+0x20>
  80e534:	2005883a 	mov	r2,r4
  80e538:	f800283a 	ret
  80e53c:	01c003c4 	movi	r7,15
  80e540:	39800a36 	bltu	r7,r6,80e56c <memmove+0x6c>
  80e544:	303ffb26 	beq	r6,zero,80e534 <memmove+0x34>
  80e548:	400f883a 	mov	r7,r8
  80e54c:	320d883a 	add	r6,r6,r8
  80e550:	28800003 	ldbu	r2,0(r5)
  80e554:	29400044 	addi	r5,r5,1
  80e558:	38800005 	stb	r2,0(r7)
  80e55c:	39c00044 	addi	r7,r7,1
  80e560:	39bffb1e 	bne	r7,r6,80e550 <memmove+0x50>
  80e564:	2005883a 	mov	r2,r4
  80e568:	f800283a 	ret
  80e56c:	1904b03a 	or	r2,r3,r4
  80e570:	108000cc 	andi	r2,r2,3
  80e574:	103ff31e 	bne	r2,zero,80e544 <memmove+0x44>
  80e578:	3811883a 	mov	r8,r7
  80e57c:	180b883a 	mov	r5,r3
  80e580:	200f883a 	mov	r7,r4
  80e584:	28c00017 	ldw	r3,0(r5)
  80e588:	31bffc04 	addi	r6,r6,-16
  80e58c:	38c00015 	stw	r3,0(r7)
  80e590:	28800117 	ldw	r2,4(r5)
  80e594:	38800115 	stw	r2,4(r7)
  80e598:	28c00217 	ldw	r3,8(r5)
  80e59c:	38c00215 	stw	r3,8(r7)
  80e5a0:	28800317 	ldw	r2,12(r5)
  80e5a4:	29400404 	addi	r5,r5,16
  80e5a8:	38800315 	stw	r2,12(r7)
  80e5ac:	39c00404 	addi	r7,r7,16
  80e5b0:	41bff436 	bltu	r8,r6,80e584 <memmove+0x84>
  80e5b4:	008000c4 	movi	r2,3
  80e5b8:	1180072e 	bgeu	r2,r6,80e5d8 <memmove+0xd8>
  80e5bc:	1007883a 	mov	r3,r2
  80e5c0:	28800017 	ldw	r2,0(r5)
  80e5c4:	31bfff04 	addi	r6,r6,-4
  80e5c8:	29400104 	addi	r5,r5,4
  80e5cc:	38800015 	stw	r2,0(r7)
  80e5d0:	39c00104 	addi	r7,r7,4
  80e5d4:	19bffa36 	bltu	r3,r6,80e5c0 <memmove+0xc0>
  80e5d8:	3811883a 	mov	r8,r7
  80e5dc:	003fd906 	br	80e544 <memmove+0x44>

0080e5e0 <memset>:
  80e5e0:	008000c4 	movi	r2,3
  80e5e4:	29403fcc 	andi	r5,r5,255
  80e5e8:	2007883a 	mov	r3,r4
  80e5ec:	1180022e 	bgeu	r2,r6,80e5f8 <memset+0x18>
  80e5f0:	2084703a 	and	r2,r4,r2
  80e5f4:	10000826 	beq	r2,zero,80e618 <memset+0x38>
  80e5f8:	30000526 	beq	r6,zero,80e610 <memset+0x30>
  80e5fc:	2805883a 	mov	r2,r5
  80e600:	30cd883a 	add	r6,r6,r3
  80e604:	18800005 	stb	r2,0(r3)
  80e608:	18c00044 	addi	r3,r3,1
  80e60c:	19bffd1e 	bne	r3,r6,80e604 <memset+0x24>
  80e610:	2005883a 	mov	r2,r4
  80e614:	f800283a 	ret
  80e618:	2804923a 	slli	r2,r5,8
  80e61c:	020003c4 	movi	r8,15
  80e620:	200f883a 	mov	r7,r4
  80e624:	2884b03a 	or	r2,r5,r2
  80e628:	1006943a 	slli	r3,r2,16
  80e62c:	10c6b03a 	or	r3,r2,r3
  80e630:	41800a2e 	bgeu	r8,r6,80e65c <memset+0x7c>
  80e634:	4005883a 	mov	r2,r8
  80e638:	31bffc04 	addi	r6,r6,-16
  80e63c:	38c00015 	stw	r3,0(r7)
  80e640:	38c00115 	stw	r3,4(r7)
  80e644:	38c00215 	stw	r3,8(r7)
  80e648:	38c00315 	stw	r3,12(r7)
  80e64c:	39c00404 	addi	r7,r7,16
  80e650:	11bff936 	bltu	r2,r6,80e638 <memset+0x58>
  80e654:	008000c4 	movi	r2,3
  80e658:	1180052e 	bgeu	r2,r6,80e670 <memset+0x90>
  80e65c:	31bfff04 	addi	r6,r6,-4
  80e660:	008000c4 	movi	r2,3
  80e664:	38c00015 	stw	r3,0(r7)
  80e668:	39c00104 	addi	r7,r7,4
  80e66c:	11bffb36 	bltu	r2,r6,80e65c <memset+0x7c>
  80e670:	3807883a 	mov	r3,r7
  80e674:	003fe006 	br	80e5f8 <memset+0x18>

0080e678 <_Bfree>:
  80e678:	28000826 	beq	r5,zero,80e69c <_Bfree+0x24>
  80e67c:	28800117 	ldw	r2,4(r5)
  80e680:	21001317 	ldw	r4,76(r4)
  80e684:	1085883a 	add	r2,r2,r2
  80e688:	1085883a 	add	r2,r2,r2
  80e68c:	1105883a 	add	r2,r2,r4
  80e690:	10c00017 	ldw	r3,0(r2)
  80e694:	28c00015 	stw	r3,0(r5)
  80e698:	11400015 	stw	r5,0(r2)
  80e69c:	f800283a 	ret

0080e6a0 <__hi0bits>:
  80e6a0:	20bfffec 	andhi	r2,r4,65535
  80e6a4:	10001426 	beq	r2,zero,80e6f8 <__hi0bits+0x58>
  80e6a8:	0007883a 	mov	r3,zero
  80e6ac:	20bfc02c 	andhi	r2,r4,65280
  80e6b0:	1000021e 	bne	r2,zero,80e6bc <__hi0bits+0x1c>
  80e6b4:	2008923a 	slli	r4,r4,8
  80e6b8:	18c00204 	addi	r3,r3,8
  80e6bc:	20bc002c 	andhi	r2,r4,61440
  80e6c0:	1000021e 	bne	r2,zero,80e6cc <__hi0bits+0x2c>
  80e6c4:	2008913a 	slli	r4,r4,4
  80e6c8:	18c00104 	addi	r3,r3,4
  80e6cc:	20b0002c 	andhi	r2,r4,49152
  80e6d0:	1000031e 	bne	r2,zero,80e6e0 <__hi0bits+0x40>
  80e6d4:	2105883a 	add	r2,r4,r4
  80e6d8:	18c00084 	addi	r3,r3,2
  80e6dc:	1089883a 	add	r4,r2,r2
  80e6e0:	20000316 	blt	r4,zero,80e6f0 <__hi0bits+0x50>
  80e6e4:	2090002c 	andhi	r2,r4,16384
  80e6e8:	10000626 	beq	r2,zero,80e704 <__hi0bits+0x64>
  80e6ec:	18c00044 	addi	r3,r3,1
  80e6f0:	1805883a 	mov	r2,r3
  80e6f4:	f800283a 	ret
  80e6f8:	2008943a 	slli	r4,r4,16
  80e6fc:	00c00404 	movi	r3,16
  80e700:	003fea06 	br	80e6ac <__hi0bits+0xc>
  80e704:	00c00804 	movi	r3,32
  80e708:	1805883a 	mov	r2,r3
  80e70c:	f800283a 	ret

0080e710 <__lo0bits>:
  80e710:	20c00017 	ldw	r3,0(r4)
  80e714:	188001cc 	andi	r2,r3,7
  80e718:	10000a26 	beq	r2,zero,80e744 <__lo0bits+0x34>
  80e71c:	1880004c 	andi	r2,r3,1
  80e720:	1005003a 	cmpeq	r2,r2,zero
  80e724:	10002126 	beq	r2,zero,80e7ac <__lo0bits+0x9c>
  80e728:	1880008c 	andi	r2,r3,2
  80e72c:	1000251e 	bne	r2,zero,80e7c4 <__lo0bits+0xb4>
  80e730:	1804d0ba 	srli	r2,r3,2
  80e734:	01400084 	movi	r5,2
  80e738:	20800015 	stw	r2,0(r4)
  80e73c:	2805883a 	mov	r2,r5
  80e740:	f800283a 	ret
  80e744:	18bfffcc 	andi	r2,r3,65535
  80e748:	10001526 	beq	r2,zero,80e7a0 <__lo0bits+0x90>
  80e74c:	000b883a 	mov	r5,zero
  80e750:	18803fcc 	andi	r2,r3,255
  80e754:	1000021e 	bne	r2,zero,80e760 <__lo0bits+0x50>
  80e758:	1806d23a 	srli	r3,r3,8
  80e75c:	29400204 	addi	r5,r5,8
  80e760:	188003cc 	andi	r2,r3,15
  80e764:	1000021e 	bne	r2,zero,80e770 <__lo0bits+0x60>
  80e768:	1806d13a 	srli	r3,r3,4
  80e76c:	29400104 	addi	r5,r5,4
  80e770:	188000cc 	andi	r2,r3,3
  80e774:	1000021e 	bne	r2,zero,80e780 <__lo0bits+0x70>
  80e778:	1806d0ba 	srli	r3,r3,2
  80e77c:	29400084 	addi	r5,r5,2
  80e780:	1880004c 	andi	r2,r3,1
  80e784:	1000031e 	bne	r2,zero,80e794 <__lo0bits+0x84>
  80e788:	1806d07a 	srli	r3,r3,1
  80e78c:	18000a26 	beq	r3,zero,80e7b8 <__lo0bits+0xa8>
  80e790:	29400044 	addi	r5,r5,1
  80e794:	2805883a 	mov	r2,r5
  80e798:	20c00015 	stw	r3,0(r4)
  80e79c:	f800283a 	ret
  80e7a0:	1806d43a 	srli	r3,r3,16
  80e7a4:	01400404 	movi	r5,16
  80e7a8:	003fe906 	br	80e750 <__lo0bits+0x40>
  80e7ac:	000b883a 	mov	r5,zero
  80e7b0:	2805883a 	mov	r2,r5
  80e7b4:	f800283a 	ret
  80e7b8:	01400804 	movi	r5,32
  80e7bc:	2805883a 	mov	r2,r5
  80e7c0:	f800283a 	ret
  80e7c4:	1804d07a 	srli	r2,r3,1
  80e7c8:	01400044 	movi	r5,1
  80e7cc:	20800015 	stw	r2,0(r4)
  80e7d0:	003fda06 	br	80e73c <__lo0bits+0x2c>

0080e7d4 <__mcmp>:
  80e7d4:	20800417 	ldw	r2,16(r4)
  80e7d8:	28c00417 	ldw	r3,16(r5)
  80e7dc:	10cfc83a 	sub	r7,r2,r3
  80e7e0:	38000c1e 	bne	r7,zero,80e814 <__mcmp+0x40>
  80e7e4:	18c5883a 	add	r2,r3,r3
  80e7e8:	1085883a 	add	r2,r2,r2
  80e7ec:	10c00504 	addi	r3,r2,20
  80e7f0:	21000504 	addi	r4,r4,20
  80e7f4:	28cb883a 	add	r5,r5,r3
  80e7f8:	2085883a 	add	r2,r4,r2
  80e7fc:	10bfff04 	addi	r2,r2,-4
  80e800:	297fff04 	addi	r5,r5,-4
  80e804:	11800017 	ldw	r6,0(r2)
  80e808:	28c00017 	ldw	r3,0(r5)
  80e80c:	30c0031e 	bne	r6,r3,80e81c <__mcmp+0x48>
  80e810:	20bffa36 	bltu	r4,r2,80e7fc <__mcmp+0x28>
  80e814:	3805883a 	mov	r2,r7
  80e818:	f800283a 	ret
  80e81c:	30c00336 	bltu	r6,r3,80e82c <__mcmp+0x58>
  80e820:	01c00044 	movi	r7,1
  80e824:	3805883a 	mov	r2,r7
  80e828:	f800283a 	ret
  80e82c:	01ffffc4 	movi	r7,-1
  80e830:	003ff806 	br	80e814 <__mcmp+0x40>

0080e834 <__ulp>:
  80e834:	295ffc2c 	andhi	r5,r5,32752
  80e838:	013f3034 	movhi	r4,64704
  80e83c:	290b883a 	add	r5,r5,r4
  80e840:	0145c83a 	sub	r2,zero,r5
  80e844:	1007d53a 	srai	r3,r2,20
  80e848:	000d883a 	mov	r6,zero
  80e84c:	0140040e 	bge	zero,r5,80e860 <__ulp+0x2c>
  80e850:	280f883a 	mov	r7,r5
  80e854:	3807883a 	mov	r3,r7
  80e858:	3005883a 	mov	r2,r6
  80e85c:	f800283a 	ret
  80e860:	008004c4 	movi	r2,19
  80e864:	193ffb04 	addi	r4,r3,-20
  80e868:	10c00c0e 	bge	r2,r3,80e89c <__ulp+0x68>
  80e86c:	008007c4 	movi	r2,31
  80e870:	1107c83a 	sub	r3,r2,r4
  80e874:	00800784 	movi	r2,30
  80e878:	01400044 	movi	r5,1
  80e87c:	11000216 	blt	r2,r4,80e888 <__ulp+0x54>
  80e880:	00800044 	movi	r2,1
  80e884:	10ca983a 	sll	r5,r2,r3
  80e888:	000f883a 	mov	r7,zero
  80e88c:	280d883a 	mov	r6,r5
  80e890:	3807883a 	mov	r3,r7
  80e894:	3005883a 	mov	r2,r6
  80e898:	f800283a 	ret
  80e89c:	00800234 	movhi	r2,8
  80e8a0:	10cfd83a 	sra	r7,r2,r3
  80e8a4:	000d883a 	mov	r6,zero
  80e8a8:	3005883a 	mov	r2,r6
  80e8ac:	3807883a 	mov	r3,r7
  80e8b0:	f800283a 	ret

0080e8b4 <__b2d>:
  80e8b4:	20800417 	ldw	r2,16(r4)
  80e8b8:	defff904 	addi	sp,sp,-28
  80e8bc:	dd000415 	stw	r20,16(sp)
  80e8c0:	1085883a 	add	r2,r2,r2
  80e8c4:	25000504 	addi	r20,r4,20
  80e8c8:	1085883a 	add	r2,r2,r2
  80e8cc:	dc000015 	stw	r16,0(sp)
  80e8d0:	a0a1883a 	add	r16,r20,r2
  80e8d4:	dd400515 	stw	r21,20(sp)
  80e8d8:	857fff17 	ldw	r21,-4(r16)
  80e8dc:	dc400115 	stw	r17,4(sp)
  80e8e0:	dfc00615 	stw	ra,24(sp)
  80e8e4:	a809883a 	mov	r4,r21
  80e8e8:	2823883a 	mov	r17,r5
  80e8ec:	dcc00315 	stw	r19,12(sp)
  80e8f0:	dc800215 	stw	r18,8(sp)
  80e8f4:	080e6a00 	call	80e6a0 <__hi0bits>
  80e8f8:	100b883a 	mov	r5,r2
  80e8fc:	00800804 	movi	r2,32
  80e900:	1145c83a 	sub	r2,r2,r5
  80e904:	88800015 	stw	r2,0(r17)
  80e908:	00800284 	movi	r2,10
  80e90c:	80ffff04 	addi	r3,r16,-4
  80e910:	11401416 	blt	r2,r5,80e964 <__b2d+0xb0>
  80e914:	008002c4 	movi	r2,11
  80e918:	1149c83a 	sub	r4,r2,r5
  80e91c:	a0c02736 	bltu	r20,r3,80e9bc <__b2d+0x108>
  80e920:	000d883a 	mov	r6,zero
  80e924:	28800544 	addi	r2,r5,21
  80e928:	a906d83a 	srl	r3,r21,r4
  80e92c:	a884983a 	sll	r2,r21,r2
  80e930:	1ccffc34 	orhi	r19,r3,16368
  80e934:	11a4b03a 	or	r18,r2,r6
  80e938:	9005883a 	mov	r2,r18
  80e93c:	9807883a 	mov	r3,r19
  80e940:	dfc00617 	ldw	ra,24(sp)
  80e944:	dd400517 	ldw	r21,20(sp)
  80e948:	dd000417 	ldw	r20,16(sp)
  80e94c:	dcc00317 	ldw	r19,12(sp)
  80e950:	dc800217 	ldw	r18,8(sp)
  80e954:	dc400117 	ldw	r17,4(sp)
  80e958:	dc000017 	ldw	r16,0(sp)
  80e95c:	dec00704 	addi	sp,sp,28
  80e960:	f800283a 	ret
  80e964:	a0c00e36 	bltu	r20,r3,80e9a0 <__b2d+0xec>
  80e968:	293ffd44 	addi	r4,r5,-11
  80e96c:	000d883a 	mov	r6,zero
  80e970:	20000f26 	beq	r4,zero,80e9b0 <__b2d+0xfc>
  80e974:	00800804 	movi	r2,32
  80e978:	110bc83a 	sub	r5,r2,r4
  80e97c:	a0c01236 	bltu	r20,r3,80e9c8 <__b2d+0x114>
  80e980:	000f883a 	mov	r7,zero
  80e984:	a904983a 	sll	r2,r21,r4
  80e988:	3146d83a 	srl	r3,r6,r5
  80e98c:	3108983a 	sll	r4,r6,r4
  80e990:	108ffc34 	orhi	r2,r2,16368
  80e994:	18a6b03a 	or	r19,r3,r2
  80e998:	3924b03a 	or	r18,r7,r4
  80e99c:	003fe606 	br	80e938 <__b2d+0x84>
  80e9a0:	293ffd44 	addi	r4,r5,-11
  80e9a4:	81bffe17 	ldw	r6,-8(r16)
  80e9a8:	80fffe04 	addi	r3,r16,-8
  80e9ac:	203ff11e 	bne	r4,zero,80e974 <__b2d+0xc0>
  80e9b0:	accffc34 	orhi	r19,r21,16368
  80e9b4:	3025883a 	mov	r18,r6
  80e9b8:	003fdf06 	br	80e938 <__b2d+0x84>
  80e9bc:	18bfff17 	ldw	r2,-4(r3)
  80e9c0:	110cd83a 	srl	r6,r2,r4
  80e9c4:	003fd706 	br	80e924 <__b2d+0x70>
  80e9c8:	18bfff17 	ldw	r2,-4(r3)
  80e9cc:	114ed83a 	srl	r7,r2,r5
  80e9d0:	003fec06 	br	80e984 <__b2d+0xd0>

0080e9d4 <__ratio>:
  80e9d4:	defff904 	addi	sp,sp,-28
  80e9d8:	dc400215 	stw	r17,8(sp)
  80e9dc:	2823883a 	mov	r17,r5
  80e9e0:	d80b883a 	mov	r5,sp
  80e9e4:	dfc00615 	stw	ra,24(sp)
  80e9e8:	dd000515 	stw	r20,20(sp)
  80e9ec:	dcc00415 	stw	r19,16(sp)
  80e9f0:	dc800315 	stw	r18,12(sp)
  80e9f4:	2025883a 	mov	r18,r4
  80e9f8:	080e8b40 	call	80e8b4 <__b2d>
  80e9fc:	8809883a 	mov	r4,r17
  80ea00:	d9400104 	addi	r5,sp,4
  80ea04:	1027883a 	mov	r19,r2
  80ea08:	1829883a 	mov	r20,r3
  80ea0c:	080e8b40 	call	80e8b4 <__b2d>
  80ea10:	89000417 	ldw	r4,16(r17)
  80ea14:	91c00417 	ldw	r7,16(r18)
  80ea18:	d9800117 	ldw	r6,4(sp)
  80ea1c:	180b883a 	mov	r5,r3
  80ea20:	390fc83a 	sub	r7,r7,r4
  80ea24:	1009883a 	mov	r4,r2
  80ea28:	d8800017 	ldw	r2,0(sp)
  80ea2c:	380e917a 	slli	r7,r7,5
  80ea30:	2011883a 	mov	r8,r4
  80ea34:	1185c83a 	sub	r2,r2,r6
  80ea38:	11c5883a 	add	r2,r2,r7
  80ea3c:	1006953a 	slli	r3,r2,20
  80ea40:	2813883a 	mov	r9,r5
  80ea44:	00800d0e 	bge	zero,r2,80ea7c <__ratio+0xa8>
  80ea48:	1d29883a 	add	r20,r3,r20
  80ea4c:	a00b883a 	mov	r5,r20
  80ea50:	480f883a 	mov	r7,r9
  80ea54:	9809883a 	mov	r4,r19
  80ea58:	400d883a 	mov	r6,r8
  80ea5c:	0807e140 	call	807e14 <__divdf3>
  80ea60:	dfc00617 	ldw	ra,24(sp)
  80ea64:	dd000517 	ldw	r20,20(sp)
  80ea68:	dcc00417 	ldw	r19,16(sp)
  80ea6c:	dc800317 	ldw	r18,12(sp)
  80ea70:	dc400217 	ldw	r17,8(sp)
  80ea74:	dec00704 	addi	sp,sp,28
  80ea78:	f800283a 	ret
  80ea7c:	28d3c83a 	sub	r9,r5,r3
  80ea80:	003ff206 	br	80ea4c <__ratio+0x78>

0080ea84 <_mprec_log10>:
  80ea84:	defffe04 	addi	sp,sp,-8
  80ea88:	008005c4 	movi	r2,23
  80ea8c:	dc000015 	stw	r16,0(sp)
  80ea90:	dfc00115 	stw	ra,4(sp)
  80ea94:	2021883a 	mov	r16,r4
  80ea98:	11000c16 	blt	r2,r4,80eacc <_mprec_log10+0x48>
  80ea9c:	200490fa 	slli	r2,r4,3
  80eaa0:	00c020b4 	movhi	r3,130
  80eaa4:	18f06004 	addi	r3,r3,-16000
  80eaa8:	10c5883a 	add	r2,r2,r3
  80eaac:	12400117 	ldw	r9,4(r2)
  80eab0:	12000017 	ldw	r8,0(r2)
  80eab4:	4807883a 	mov	r3,r9
  80eab8:	4005883a 	mov	r2,r8
  80eabc:	dfc00117 	ldw	ra,4(sp)
  80eac0:	dc000017 	ldw	r16,0(sp)
  80eac4:	dec00204 	addi	sp,sp,8
  80eac8:	f800283a 	ret
  80eacc:	0011883a 	mov	r8,zero
  80ead0:	024ffc34 	movhi	r9,16368
  80ead4:	0005883a 	mov	r2,zero
  80ead8:	00d00934 	movhi	r3,16420
  80eadc:	480b883a 	mov	r5,r9
  80eae0:	4009883a 	mov	r4,r8
  80eae4:	180f883a 	mov	r7,r3
  80eae8:	100d883a 	mov	r6,r2
  80eaec:	0807a500 	call	807a50 <__muldf3>
  80eaf0:	843fffc4 	addi	r16,r16,-1
  80eaf4:	1011883a 	mov	r8,r2
  80eaf8:	1813883a 	mov	r9,r3
  80eafc:	803ff51e 	bne	r16,zero,80ead4 <_mprec_log10+0x50>
  80eb00:	4005883a 	mov	r2,r8
  80eb04:	4807883a 	mov	r3,r9
  80eb08:	dfc00117 	ldw	ra,4(sp)
  80eb0c:	dc000017 	ldw	r16,0(sp)
  80eb10:	dec00204 	addi	sp,sp,8
  80eb14:	f800283a 	ret

0080eb18 <__copybits>:
  80eb18:	297fffc4 	addi	r5,r5,-1
  80eb1c:	30800417 	ldw	r2,16(r6)
  80eb20:	280bd17a 	srai	r5,r5,5
  80eb24:	31800504 	addi	r6,r6,20
  80eb28:	1085883a 	add	r2,r2,r2
  80eb2c:	294b883a 	add	r5,r5,r5
  80eb30:	294b883a 	add	r5,r5,r5
  80eb34:	1085883a 	add	r2,r2,r2
  80eb38:	290b883a 	add	r5,r5,r4
  80eb3c:	3087883a 	add	r3,r6,r2
  80eb40:	29400104 	addi	r5,r5,4
  80eb44:	30c0052e 	bgeu	r6,r3,80eb5c <__copybits+0x44>
  80eb48:	30800017 	ldw	r2,0(r6)
  80eb4c:	31800104 	addi	r6,r6,4
  80eb50:	20800015 	stw	r2,0(r4)
  80eb54:	21000104 	addi	r4,r4,4
  80eb58:	30fffb36 	bltu	r6,r3,80eb48 <__copybits+0x30>
  80eb5c:	2140032e 	bgeu	r4,r5,80eb6c <__copybits+0x54>
  80eb60:	20000015 	stw	zero,0(r4)
  80eb64:	21000104 	addi	r4,r4,4
  80eb68:	217ffd36 	bltu	r4,r5,80eb60 <__copybits+0x48>
  80eb6c:	f800283a 	ret

0080eb70 <__any_on>:
  80eb70:	20800417 	ldw	r2,16(r4)
  80eb74:	2807d17a 	srai	r3,r5,5
  80eb78:	21000504 	addi	r4,r4,20
  80eb7c:	10c00d0e 	bge	r2,r3,80ebb4 <__any_on+0x44>
  80eb80:	1085883a 	add	r2,r2,r2
  80eb84:	1085883a 	add	r2,r2,r2
  80eb88:	208d883a 	add	r6,r4,r2
  80eb8c:	2180182e 	bgeu	r4,r6,80ebf0 <__any_on+0x80>
  80eb90:	30bfff17 	ldw	r2,-4(r6)
  80eb94:	30ffff04 	addi	r3,r6,-4
  80eb98:	1000041e 	bne	r2,zero,80ebac <__any_on+0x3c>
  80eb9c:	20c0142e 	bgeu	r4,r3,80ebf0 <__any_on+0x80>
  80eba0:	18ffff04 	addi	r3,r3,-4
  80eba4:	18800017 	ldw	r2,0(r3)
  80eba8:	103ffc26 	beq	r2,zero,80eb9c <__any_on+0x2c>
  80ebac:	00800044 	movi	r2,1
  80ebb0:	f800283a 	ret
  80ebb4:	18800a0e 	bge	r3,r2,80ebe0 <__any_on+0x70>
  80ebb8:	294007cc 	andi	r5,r5,31
  80ebbc:	28000826 	beq	r5,zero,80ebe0 <__any_on+0x70>
  80ebc0:	18c5883a 	add	r2,r3,r3
  80ebc4:	1085883a 	add	r2,r2,r2
  80ebc8:	208d883a 	add	r6,r4,r2
  80ebcc:	30c00017 	ldw	r3,0(r6)
  80ebd0:	1944d83a 	srl	r2,r3,r5
  80ebd4:	1144983a 	sll	r2,r2,r5
  80ebd8:	18bff41e 	bne	r3,r2,80ebac <__any_on+0x3c>
  80ebdc:	003feb06 	br	80eb8c <__any_on+0x1c>
  80ebe0:	18c5883a 	add	r2,r3,r3
  80ebe4:	1085883a 	add	r2,r2,r2
  80ebe8:	208d883a 	add	r6,r4,r2
  80ebec:	003fe706 	br	80eb8c <__any_on+0x1c>
  80ebf0:	0005883a 	mov	r2,zero
  80ebf4:	f800283a 	ret

0080ebf8 <_Balloc>:
  80ebf8:	20c01317 	ldw	r3,76(r4)
  80ebfc:	defffb04 	addi	sp,sp,-20
  80ec00:	dcc00315 	stw	r19,12(sp)
  80ec04:	dc800215 	stw	r18,8(sp)
  80ec08:	dfc00415 	stw	ra,16(sp)
  80ec0c:	2825883a 	mov	r18,r5
  80ec10:	dc400115 	stw	r17,4(sp)
  80ec14:	dc000015 	stw	r16,0(sp)
  80ec18:	2027883a 	mov	r19,r4
  80ec1c:	01800404 	movi	r6,16
  80ec20:	01400104 	movi	r5,4
  80ec24:	18001726 	beq	r3,zero,80ec84 <_Balloc+0x8c>
  80ec28:	01400044 	movi	r5,1
  80ec2c:	9485883a 	add	r2,r18,r18
  80ec30:	2ca2983a 	sll	r17,r5,r18
  80ec34:	1085883a 	add	r2,r2,r2
  80ec38:	10c7883a 	add	r3,r2,r3
  80ec3c:	1c000017 	ldw	r16,0(r3)
  80ec40:	8c4d883a 	add	r6,r17,r17
  80ec44:	318d883a 	add	r6,r6,r6
  80ec48:	9809883a 	mov	r4,r19
  80ec4c:	31800504 	addi	r6,r6,20
  80ec50:	80001226 	beq	r16,zero,80ec9c <_Balloc+0xa4>
  80ec54:	80800017 	ldw	r2,0(r16)
  80ec58:	18800015 	stw	r2,0(r3)
  80ec5c:	80000415 	stw	zero,16(r16)
  80ec60:	80000315 	stw	zero,12(r16)
  80ec64:	8005883a 	mov	r2,r16
  80ec68:	dfc00417 	ldw	ra,16(sp)
  80ec6c:	dcc00317 	ldw	r19,12(sp)
  80ec70:	dc800217 	ldw	r18,8(sp)
  80ec74:	dc400117 	ldw	r17,4(sp)
  80ec78:	dc000017 	ldw	r16,0(sp)
  80ec7c:	dec00504 	addi	sp,sp,20
  80ec80:	f800283a 	ret
  80ec84:	080ff200 	call	80ff20 <_calloc_r>
  80ec88:	1007883a 	mov	r3,r2
  80ec8c:	0021883a 	mov	r16,zero
  80ec90:	98801315 	stw	r2,76(r19)
  80ec94:	103fe41e 	bne	r2,zero,80ec28 <_Balloc+0x30>
  80ec98:	003ff206 	br	80ec64 <_Balloc+0x6c>
  80ec9c:	080ff200 	call	80ff20 <_calloc_r>
  80eca0:	103ff026 	beq	r2,zero,80ec64 <_Balloc+0x6c>
  80eca4:	1021883a 	mov	r16,r2
  80eca8:	14800115 	stw	r18,4(r2)
  80ecac:	14400215 	stw	r17,8(r2)
  80ecb0:	003fea06 	br	80ec5c <_Balloc+0x64>

0080ecb4 <__d2b>:
  80ecb4:	defff504 	addi	sp,sp,-44
  80ecb8:	dcc00515 	stw	r19,20(sp)
  80ecbc:	04c00044 	movi	r19,1
  80ecc0:	dc000215 	stw	r16,8(sp)
  80ecc4:	2821883a 	mov	r16,r5
  80ecc8:	980b883a 	mov	r5,r19
  80eccc:	ddc00915 	stw	r23,36(sp)
  80ecd0:	dd800815 	stw	r22,32(sp)
  80ecd4:	dd400715 	stw	r21,28(sp)
  80ecd8:	dd000615 	stw	r20,24(sp)
  80ecdc:	dc800415 	stw	r18,16(sp)
  80ece0:	dc400315 	stw	r17,12(sp)
  80ece4:	dfc00a15 	stw	ra,40(sp)
  80ece8:	3023883a 	mov	r17,r6
  80ecec:	382d883a 	mov	r22,r7
  80ecf0:	ddc00b17 	ldw	r23,44(sp)
  80ecf4:	080ebf80 	call	80ebf8 <_Balloc>
  80ecf8:	1025883a 	mov	r18,r2
  80ecfc:	00a00034 	movhi	r2,32768
  80ed00:	10bfffc4 	addi	r2,r2,-1
  80ed04:	8888703a 	and	r4,r17,r2
  80ed08:	202ad53a 	srli	r21,r4,20
  80ed0c:	00800434 	movhi	r2,16
  80ed10:	10bfffc4 	addi	r2,r2,-1
  80ed14:	8886703a 	and	r3,r17,r2
  80ed18:	a829003a 	cmpeq	r20,r21,zero
  80ed1c:	800b883a 	mov	r5,r16
  80ed20:	d8c00115 	stw	r3,4(sp)
  80ed24:	94000504 	addi	r16,r18,20
  80ed28:	a000021e 	bne	r20,zero,80ed34 <__d2b+0x80>
  80ed2c:	18c00434 	orhi	r3,r3,16
  80ed30:	d8c00115 	stw	r3,4(sp)
  80ed34:	28002726 	beq	r5,zero,80edd4 <__d2b+0x120>
  80ed38:	d809883a 	mov	r4,sp
  80ed3c:	d9400015 	stw	r5,0(sp)
  80ed40:	080e7100 	call	80e710 <__lo0bits>
  80ed44:	100d883a 	mov	r6,r2
  80ed48:	10003526 	beq	r2,zero,80ee20 <__d2b+0x16c>
  80ed4c:	d8c00117 	ldw	r3,4(sp)
  80ed50:	00800804 	movi	r2,32
  80ed54:	1185c83a 	sub	r2,r2,r6
  80ed58:	d9000017 	ldw	r4,0(sp)
  80ed5c:	1886983a 	sll	r3,r3,r2
  80ed60:	1906b03a 	or	r3,r3,r4
  80ed64:	90c00515 	stw	r3,20(r18)
  80ed68:	d8c00117 	ldw	r3,4(sp)
  80ed6c:	1986d83a 	srl	r3,r3,r6
  80ed70:	d8c00115 	stw	r3,4(sp)
  80ed74:	180b003a 	cmpeq	r5,r3,zero
  80ed78:	00800084 	movi	r2,2
  80ed7c:	114bc83a 	sub	r5,r2,r5
  80ed80:	80c00115 	stw	r3,4(r16)
  80ed84:	91400415 	stw	r5,16(r18)
  80ed88:	a0001a1e 	bne	r20,zero,80edf4 <__d2b+0x140>
  80ed8c:	3545883a 	add	r2,r6,r21
  80ed90:	10bef344 	addi	r2,r2,-1075
  80ed94:	00c00d44 	movi	r3,53
  80ed98:	b0800015 	stw	r2,0(r22)
  80ed9c:	1987c83a 	sub	r3,r3,r6
  80eda0:	b8c00015 	stw	r3,0(r23)
  80eda4:	9005883a 	mov	r2,r18
  80eda8:	dfc00a17 	ldw	ra,40(sp)
  80edac:	ddc00917 	ldw	r23,36(sp)
  80edb0:	dd800817 	ldw	r22,32(sp)
  80edb4:	dd400717 	ldw	r21,28(sp)
  80edb8:	dd000617 	ldw	r20,24(sp)
  80edbc:	dcc00517 	ldw	r19,20(sp)
  80edc0:	dc800417 	ldw	r18,16(sp)
  80edc4:	dc400317 	ldw	r17,12(sp)
  80edc8:	dc000217 	ldw	r16,8(sp)
  80edcc:	dec00b04 	addi	sp,sp,44
  80edd0:	f800283a 	ret
  80edd4:	d9000104 	addi	r4,sp,4
  80edd8:	080e7100 	call	80e710 <__lo0bits>
  80eddc:	11800804 	addi	r6,r2,32
  80ede0:	d8800117 	ldw	r2,4(sp)
  80ede4:	94c00415 	stw	r19,16(r18)
  80ede8:	980b883a 	mov	r5,r19
  80edec:	90800515 	stw	r2,20(r18)
  80edf0:	a03fe626 	beq	r20,zero,80ed8c <__d2b+0xd8>
  80edf4:	2945883a 	add	r2,r5,r5
  80edf8:	1085883a 	add	r2,r2,r2
  80edfc:	1405883a 	add	r2,r2,r16
  80ee00:	113fff17 	ldw	r4,-4(r2)
  80ee04:	30fef384 	addi	r3,r6,-1074
  80ee08:	2820917a 	slli	r16,r5,5
  80ee0c:	b0c00015 	stw	r3,0(r22)
  80ee10:	080e6a00 	call	80e6a0 <__hi0bits>
  80ee14:	80a1c83a 	sub	r16,r16,r2
  80ee18:	bc000015 	stw	r16,0(r23)
  80ee1c:	003fe106 	br	80eda4 <__d2b+0xf0>
  80ee20:	d8800017 	ldw	r2,0(sp)
  80ee24:	90800515 	stw	r2,20(r18)
  80ee28:	d8c00117 	ldw	r3,4(sp)
  80ee2c:	003fd106 	br	80ed74 <__d2b+0xc0>

0080ee30 <__mdiff>:
  80ee30:	defffb04 	addi	sp,sp,-20
  80ee34:	dc000015 	stw	r16,0(sp)
  80ee38:	2821883a 	mov	r16,r5
  80ee3c:	dc800215 	stw	r18,8(sp)
  80ee40:	300b883a 	mov	r5,r6
  80ee44:	2025883a 	mov	r18,r4
  80ee48:	8009883a 	mov	r4,r16
  80ee4c:	dc400115 	stw	r17,4(sp)
  80ee50:	dfc00415 	stw	ra,16(sp)
  80ee54:	dcc00315 	stw	r19,12(sp)
  80ee58:	3023883a 	mov	r17,r6
  80ee5c:	080e7d40 	call	80e7d4 <__mcmp>
  80ee60:	10004226 	beq	r2,zero,80ef6c <__mdiff+0x13c>
  80ee64:	10005016 	blt	r2,zero,80efa8 <__mdiff+0x178>
  80ee68:	0027883a 	mov	r19,zero
  80ee6c:	81400117 	ldw	r5,4(r16)
  80ee70:	9009883a 	mov	r4,r18
  80ee74:	080ebf80 	call	80ebf8 <_Balloc>
  80ee78:	1019883a 	mov	r12,r2
  80ee7c:	82800417 	ldw	r10,16(r16)
  80ee80:	88800417 	ldw	r2,16(r17)
  80ee84:	81800504 	addi	r6,r16,20
  80ee88:	5287883a 	add	r3,r10,r10
  80ee8c:	1085883a 	add	r2,r2,r2
  80ee90:	18c7883a 	add	r3,r3,r3
  80ee94:	1085883a 	add	r2,r2,r2
  80ee98:	8a000504 	addi	r8,r17,20
  80ee9c:	64c00315 	stw	r19,12(r12)
  80eea0:	30db883a 	add	r13,r6,r3
  80eea4:	4097883a 	add	r11,r8,r2
  80eea8:	61c00504 	addi	r7,r12,20
  80eeac:	0013883a 	mov	r9,zero
  80eeb0:	31000017 	ldw	r4,0(r6)
  80eeb4:	41400017 	ldw	r5,0(r8)
  80eeb8:	42000104 	addi	r8,r8,4
  80eebc:	20bfffcc 	andi	r2,r4,65535
  80eec0:	28ffffcc 	andi	r3,r5,65535
  80eec4:	10c5c83a 	sub	r2,r2,r3
  80eec8:	1245883a 	add	r2,r2,r9
  80eecc:	2008d43a 	srli	r4,r4,16
  80eed0:	280ad43a 	srli	r5,r5,16
  80eed4:	1007d43a 	srai	r3,r2,16
  80eed8:	3880000d 	sth	r2,0(r7)
  80eedc:	2149c83a 	sub	r4,r4,r5
  80eee0:	20c9883a 	add	r4,r4,r3
  80eee4:	3900008d 	sth	r4,2(r7)
  80eee8:	31800104 	addi	r6,r6,4
  80eeec:	39c00104 	addi	r7,r7,4
  80eef0:	2013d43a 	srai	r9,r4,16
  80eef4:	42ffee36 	bltu	r8,r11,80eeb0 <__mdiff+0x80>
  80eef8:	33400c2e 	bgeu	r6,r13,80ef2c <__mdiff+0xfc>
  80eefc:	30800017 	ldw	r2,0(r6)
  80ef00:	31800104 	addi	r6,r6,4
  80ef04:	10ffffcc 	andi	r3,r2,65535
  80ef08:	1a47883a 	add	r3,r3,r9
  80ef0c:	1004d43a 	srli	r2,r2,16
  80ef10:	1809d43a 	srai	r4,r3,16
  80ef14:	38c0000d 	sth	r3,0(r7)
  80ef18:	1105883a 	add	r2,r2,r4
  80ef1c:	3880008d 	sth	r2,2(r7)
  80ef20:	1013d43a 	srai	r9,r2,16
  80ef24:	39c00104 	addi	r7,r7,4
  80ef28:	337ff436 	bltu	r6,r13,80eefc <__mdiff+0xcc>
  80ef2c:	38bfff17 	ldw	r2,-4(r7)
  80ef30:	38ffff04 	addi	r3,r7,-4
  80ef34:	1000041e 	bne	r2,zero,80ef48 <__mdiff+0x118>
  80ef38:	18ffff04 	addi	r3,r3,-4
  80ef3c:	18800017 	ldw	r2,0(r3)
  80ef40:	52bfffc4 	addi	r10,r10,-1
  80ef44:	103ffc26 	beq	r2,zero,80ef38 <__mdiff+0x108>
  80ef48:	6005883a 	mov	r2,r12
  80ef4c:	62800415 	stw	r10,16(r12)
  80ef50:	dfc00417 	ldw	ra,16(sp)
  80ef54:	dcc00317 	ldw	r19,12(sp)
  80ef58:	dc800217 	ldw	r18,8(sp)
  80ef5c:	dc400117 	ldw	r17,4(sp)
  80ef60:	dc000017 	ldw	r16,0(sp)
  80ef64:	dec00504 	addi	sp,sp,20
  80ef68:	f800283a 	ret
  80ef6c:	9009883a 	mov	r4,r18
  80ef70:	000b883a 	mov	r5,zero
  80ef74:	080ebf80 	call	80ebf8 <_Balloc>
  80ef78:	1019883a 	mov	r12,r2
  80ef7c:	00800044 	movi	r2,1
  80ef80:	60800415 	stw	r2,16(r12)
  80ef84:	6005883a 	mov	r2,r12
  80ef88:	60000515 	stw	zero,20(r12)
  80ef8c:	dfc00417 	ldw	ra,16(sp)
  80ef90:	dcc00317 	ldw	r19,12(sp)
  80ef94:	dc800217 	ldw	r18,8(sp)
  80ef98:	dc400117 	ldw	r17,4(sp)
  80ef9c:	dc000017 	ldw	r16,0(sp)
  80efa0:	dec00504 	addi	sp,sp,20
  80efa4:	f800283a 	ret
  80efa8:	880d883a 	mov	r6,r17
  80efac:	04c00044 	movi	r19,1
  80efb0:	8023883a 	mov	r17,r16
  80efb4:	3021883a 	mov	r16,r6
  80efb8:	003fac06 	br	80ee6c <__mdiff+0x3c>

0080efbc <__lshift>:
  80efbc:	defff904 	addi	sp,sp,-28
  80efc0:	28800417 	ldw	r2,16(r5)
  80efc4:	dc000015 	stw	r16,0(sp)
  80efc8:	3021d17a 	srai	r16,r6,5
  80efcc:	28c00217 	ldw	r3,8(r5)
  80efd0:	10800044 	addi	r2,r2,1
  80efd4:	dc400115 	stw	r17,4(sp)
  80efd8:	80a3883a 	add	r17,r16,r2
  80efdc:	dd400515 	stw	r21,20(sp)
  80efe0:	dd000415 	stw	r20,16(sp)
  80efe4:	dc800215 	stw	r18,8(sp)
  80efe8:	dfc00615 	stw	ra,24(sp)
  80efec:	2825883a 	mov	r18,r5
  80eff0:	dcc00315 	stw	r19,12(sp)
  80eff4:	3029883a 	mov	r20,r6
  80eff8:	202b883a 	mov	r21,r4
  80effc:	29400117 	ldw	r5,4(r5)
  80f000:	1c40030e 	bge	r3,r17,80f010 <__lshift+0x54>
  80f004:	18c7883a 	add	r3,r3,r3
  80f008:	29400044 	addi	r5,r5,1
  80f00c:	1c7ffd16 	blt	r3,r17,80f004 <__lshift+0x48>
  80f010:	a809883a 	mov	r4,r21
  80f014:	080ebf80 	call	80ebf8 <_Balloc>
  80f018:	1027883a 	mov	r19,r2
  80f01c:	11400504 	addi	r5,r2,20
  80f020:	0400090e 	bge	zero,r16,80f048 <__lshift+0x8c>
  80f024:	2805883a 	mov	r2,r5
  80f028:	0007883a 	mov	r3,zero
  80f02c:	18c00044 	addi	r3,r3,1
  80f030:	10000015 	stw	zero,0(r2)
  80f034:	10800104 	addi	r2,r2,4
  80f038:	80fffc1e 	bne	r16,r3,80f02c <__lshift+0x70>
  80f03c:	8405883a 	add	r2,r16,r16
  80f040:	1085883a 	add	r2,r2,r2
  80f044:	288b883a 	add	r5,r5,r2
  80f048:	90800417 	ldw	r2,16(r18)
  80f04c:	91000504 	addi	r4,r18,20
  80f050:	a18007cc 	andi	r6,r20,31
  80f054:	1085883a 	add	r2,r2,r2
  80f058:	1085883a 	add	r2,r2,r2
  80f05c:	208f883a 	add	r7,r4,r2
  80f060:	30001e26 	beq	r6,zero,80f0dc <__lshift+0x120>
  80f064:	00800804 	movi	r2,32
  80f068:	1191c83a 	sub	r8,r2,r6
  80f06c:	0007883a 	mov	r3,zero
  80f070:	20800017 	ldw	r2,0(r4)
  80f074:	1184983a 	sll	r2,r2,r6
  80f078:	1884b03a 	or	r2,r3,r2
  80f07c:	28800015 	stw	r2,0(r5)
  80f080:	20c00017 	ldw	r3,0(r4)
  80f084:	21000104 	addi	r4,r4,4
  80f088:	29400104 	addi	r5,r5,4
  80f08c:	1a06d83a 	srl	r3,r3,r8
  80f090:	21fff736 	bltu	r4,r7,80f070 <__lshift+0xb4>
  80f094:	28c00015 	stw	r3,0(r5)
  80f098:	18000126 	beq	r3,zero,80f0a0 <__lshift+0xe4>
  80f09c:	8c400044 	addi	r17,r17,1
  80f0a0:	88bfffc4 	addi	r2,r17,-1
  80f0a4:	98800415 	stw	r2,16(r19)
  80f0a8:	a809883a 	mov	r4,r21
  80f0ac:	900b883a 	mov	r5,r18
  80f0b0:	080e6780 	call	80e678 <_Bfree>
  80f0b4:	9805883a 	mov	r2,r19
  80f0b8:	dfc00617 	ldw	ra,24(sp)
  80f0bc:	dd400517 	ldw	r21,20(sp)
  80f0c0:	dd000417 	ldw	r20,16(sp)
  80f0c4:	dcc00317 	ldw	r19,12(sp)
  80f0c8:	dc800217 	ldw	r18,8(sp)
  80f0cc:	dc400117 	ldw	r17,4(sp)
  80f0d0:	dc000017 	ldw	r16,0(sp)
  80f0d4:	dec00704 	addi	sp,sp,28
  80f0d8:	f800283a 	ret
  80f0dc:	20800017 	ldw	r2,0(r4)
  80f0e0:	21000104 	addi	r4,r4,4
  80f0e4:	28800015 	stw	r2,0(r5)
  80f0e8:	29400104 	addi	r5,r5,4
  80f0ec:	21ffec2e 	bgeu	r4,r7,80f0a0 <__lshift+0xe4>
  80f0f0:	20800017 	ldw	r2,0(r4)
  80f0f4:	21000104 	addi	r4,r4,4
  80f0f8:	28800015 	stw	r2,0(r5)
  80f0fc:	29400104 	addi	r5,r5,4
  80f100:	21fff636 	bltu	r4,r7,80f0dc <__lshift+0x120>
  80f104:	003fe606 	br	80f0a0 <__lshift+0xe4>

0080f108 <__multiply>:
  80f108:	defff904 	addi	sp,sp,-28
  80f10c:	dcc00315 	stw	r19,12(sp)
  80f110:	dc800215 	stw	r18,8(sp)
  80f114:	2cc00417 	ldw	r19,16(r5)
  80f118:	34800417 	ldw	r18,16(r6)
  80f11c:	dd000415 	stw	r20,16(sp)
  80f120:	dc400115 	stw	r17,4(sp)
  80f124:	dfc00615 	stw	ra,24(sp)
  80f128:	dd400515 	stw	r21,20(sp)
  80f12c:	dc000015 	stw	r16,0(sp)
  80f130:	2823883a 	mov	r17,r5
  80f134:	3029883a 	mov	r20,r6
  80f138:	9c80040e 	bge	r19,r18,80f14c <__multiply+0x44>
  80f13c:	9027883a 	mov	r19,r18
  80f140:	2c800417 	ldw	r18,16(r5)
  80f144:	2829883a 	mov	r20,r5
  80f148:	3023883a 	mov	r17,r6
  80f14c:	88800217 	ldw	r2,8(r17)
  80f150:	9ca1883a 	add	r16,r19,r18
  80f154:	89400117 	ldw	r5,4(r17)
  80f158:	1400010e 	bge	r2,r16,80f160 <__multiply+0x58>
  80f15c:	29400044 	addi	r5,r5,1
  80f160:	080ebf80 	call	80ebf8 <_Balloc>
  80f164:	102b883a 	mov	r21,r2
  80f168:	8405883a 	add	r2,r16,r16
  80f16c:	1085883a 	add	r2,r2,r2
  80f170:	a9000504 	addi	r4,r21,20
  80f174:	209d883a 	add	r14,r4,r2
  80f178:	2380042e 	bgeu	r4,r14,80f18c <__multiply+0x84>
  80f17c:	2005883a 	mov	r2,r4
  80f180:	10000015 	stw	zero,0(r2)
  80f184:	10800104 	addi	r2,r2,4
  80f188:	13bffd36 	bltu	r2,r14,80f180 <__multiply+0x78>
  80f18c:	9485883a 	add	r2,r18,r18
  80f190:	9cc7883a 	add	r3,r19,r19
  80f194:	a1800504 	addi	r6,r20,20
  80f198:	1085883a 	add	r2,r2,r2
  80f19c:	8b400504 	addi	r13,r17,20
  80f1a0:	18c7883a 	add	r3,r3,r3
  80f1a4:	309f883a 	add	r15,r6,r2
  80f1a8:	68d7883a 	add	r11,r13,r3
  80f1ac:	33c03b2e 	bgeu	r6,r15,80f29c <__multiply+0x194>
  80f1b0:	2019883a 	mov	r12,r4
  80f1b4:	30800017 	ldw	r2,0(r6)
  80f1b8:	127fffcc 	andi	r9,r2,65535
  80f1bc:	48001826 	beq	r9,zero,80f220 <__multiply+0x118>
  80f1c0:	6811883a 	mov	r8,r13
  80f1c4:	600f883a 	mov	r7,r12
  80f1c8:	0015883a 	mov	r10,zero
  80f1cc:	40c00017 	ldw	r3,0(r8)
  80f1d0:	39400017 	ldw	r5,0(r7)
  80f1d4:	42000104 	addi	r8,r8,4
  80f1d8:	193fffcc 	andi	r4,r3,65535
  80f1dc:	4909383a 	mul	r4,r9,r4
  80f1e0:	1806d43a 	srli	r3,r3,16
  80f1e4:	28bfffcc 	andi	r2,r5,65535
  80f1e8:	5085883a 	add	r2,r10,r2
  80f1ec:	2089883a 	add	r4,r4,r2
  80f1f0:	48c7383a 	mul	r3,r9,r3
  80f1f4:	280ad43a 	srli	r5,r5,16
  80f1f8:	2004d43a 	srli	r2,r4,16
  80f1fc:	3900000d 	sth	r4,0(r7)
  80f200:	1947883a 	add	r3,r3,r5
  80f204:	10c5883a 	add	r2,r2,r3
  80f208:	3880008d 	sth	r2,2(r7)
  80f20c:	1014d43a 	srli	r10,r2,16
  80f210:	39c00104 	addi	r7,r7,4
  80f214:	42ffed36 	bltu	r8,r11,80f1cc <__multiply+0xc4>
  80f218:	3a800015 	stw	r10,0(r7)
  80f21c:	30800017 	ldw	r2,0(r6)
  80f220:	1012d43a 	srli	r9,r2,16
  80f224:	48001926 	beq	r9,zero,80f28c <__multiply+0x184>
  80f228:	60800017 	ldw	r2,0(r12)
  80f22c:	6811883a 	mov	r8,r13
  80f230:	600f883a 	mov	r7,r12
  80f234:	0015883a 	mov	r10,zero
  80f238:	100b883a 	mov	r5,r2
  80f23c:	41000017 	ldw	r4,0(r8)
  80f240:	2806d43a 	srli	r3,r5,16
  80f244:	3880000d 	sth	r2,0(r7)
  80f248:	20bfffcc 	andi	r2,r4,65535
  80f24c:	4885383a 	mul	r2,r9,r2
  80f250:	50c7883a 	add	r3,r10,r3
  80f254:	2008d43a 	srli	r4,r4,16
  80f258:	10c5883a 	add	r2,r2,r3
  80f25c:	3880008d 	sth	r2,2(r7)
  80f260:	39c00104 	addi	r7,r7,4
  80f264:	39400017 	ldw	r5,0(r7)
  80f268:	4909383a 	mul	r4,r9,r4
  80f26c:	1004d43a 	srli	r2,r2,16
  80f270:	28ffffcc 	andi	r3,r5,65535
  80f274:	20c9883a 	add	r4,r4,r3
  80f278:	1105883a 	add	r2,r2,r4
  80f27c:	42000104 	addi	r8,r8,4
  80f280:	1014d43a 	srli	r10,r2,16
  80f284:	42ffed36 	bltu	r8,r11,80f23c <__multiply+0x134>
  80f288:	38800015 	stw	r2,0(r7)
  80f28c:	31800104 	addi	r6,r6,4
  80f290:	33c0022e 	bgeu	r6,r15,80f29c <__multiply+0x194>
  80f294:	63000104 	addi	r12,r12,4
  80f298:	003fc606 	br	80f1b4 <__multiply+0xac>
  80f29c:	0400090e 	bge	zero,r16,80f2c4 <__multiply+0x1bc>
  80f2a0:	70bfff17 	ldw	r2,-4(r14)
  80f2a4:	70ffff04 	addi	r3,r14,-4
  80f2a8:	10000326 	beq	r2,zero,80f2b8 <__multiply+0x1b0>
  80f2ac:	00000506 	br	80f2c4 <__multiply+0x1bc>
  80f2b0:	18800017 	ldw	r2,0(r3)
  80f2b4:	1000031e 	bne	r2,zero,80f2c4 <__multiply+0x1bc>
  80f2b8:	843fffc4 	addi	r16,r16,-1
  80f2bc:	18ffff04 	addi	r3,r3,-4
  80f2c0:	803ffb1e 	bne	r16,zero,80f2b0 <__multiply+0x1a8>
  80f2c4:	a805883a 	mov	r2,r21
  80f2c8:	ac000415 	stw	r16,16(r21)
  80f2cc:	dfc00617 	ldw	ra,24(sp)
  80f2d0:	dd400517 	ldw	r21,20(sp)
  80f2d4:	dd000417 	ldw	r20,16(sp)
  80f2d8:	dcc00317 	ldw	r19,12(sp)
  80f2dc:	dc800217 	ldw	r18,8(sp)
  80f2e0:	dc400117 	ldw	r17,4(sp)
  80f2e4:	dc000017 	ldw	r16,0(sp)
  80f2e8:	dec00704 	addi	sp,sp,28
  80f2ec:	f800283a 	ret

0080f2f0 <__i2b>:
  80f2f0:	defffd04 	addi	sp,sp,-12
  80f2f4:	dc000015 	stw	r16,0(sp)
  80f2f8:	04000044 	movi	r16,1
  80f2fc:	dc800115 	stw	r18,4(sp)
  80f300:	2825883a 	mov	r18,r5
  80f304:	800b883a 	mov	r5,r16
  80f308:	dfc00215 	stw	ra,8(sp)
  80f30c:	080ebf80 	call	80ebf8 <_Balloc>
  80f310:	14000415 	stw	r16,16(r2)
  80f314:	14800515 	stw	r18,20(r2)
  80f318:	dfc00217 	ldw	ra,8(sp)
  80f31c:	dc800117 	ldw	r18,4(sp)
  80f320:	dc000017 	ldw	r16,0(sp)
  80f324:	dec00304 	addi	sp,sp,12
  80f328:	f800283a 	ret

0080f32c <__multadd>:
  80f32c:	defffa04 	addi	sp,sp,-24
  80f330:	dc800215 	stw	r18,8(sp)
  80f334:	2c800417 	ldw	r18,16(r5)
  80f338:	dd000415 	stw	r20,16(sp)
  80f33c:	dcc00315 	stw	r19,12(sp)
  80f340:	dc000015 	stw	r16,0(sp)
  80f344:	dfc00515 	stw	ra,20(sp)
  80f348:	3821883a 	mov	r16,r7
  80f34c:	dc400115 	stw	r17,4(sp)
  80f350:	2827883a 	mov	r19,r5
  80f354:	2029883a 	mov	r20,r4
  80f358:	2a000504 	addi	r8,r5,20
  80f35c:	000f883a 	mov	r7,zero
  80f360:	40800017 	ldw	r2,0(r8)
  80f364:	39c00044 	addi	r7,r7,1
  80f368:	10ffffcc 	andi	r3,r2,65535
  80f36c:	1987383a 	mul	r3,r3,r6
  80f370:	1004d43a 	srli	r2,r2,16
  80f374:	1c07883a 	add	r3,r3,r16
  80f378:	180ad43a 	srli	r5,r3,16
  80f37c:	1185383a 	mul	r2,r2,r6
  80f380:	18ffffcc 	andi	r3,r3,65535
  80f384:	1145883a 	add	r2,r2,r5
  80f388:	1008943a 	slli	r4,r2,16
  80f38c:	1020d43a 	srli	r16,r2,16
  80f390:	20c9883a 	add	r4,r4,r3
  80f394:	41000015 	stw	r4,0(r8)
  80f398:	42000104 	addi	r8,r8,4
  80f39c:	3cbff016 	blt	r7,r18,80f360 <__multadd+0x34>
  80f3a0:	80000826 	beq	r16,zero,80f3c4 <__multadd+0x98>
  80f3a4:	98800217 	ldw	r2,8(r19)
  80f3a8:	90800f0e 	bge	r18,r2,80f3e8 <__multadd+0xbc>
  80f3ac:	9485883a 	add	r2,r18,r18
  80f3b0:	1085883a 	add	r2,r2,r2
  80f3b4:	14c5883a 	add	r2,r2,r19
  80f3b8:	90c00044 	addi	r3,r18,1
  80f3bc:	14000515 	stw	r16,20(r2)
  80f3c0:	98c00415 	stw	r3,16(r19)
  80f3c4:	9805883a 	mov	r2,r19
  80f3c8:	dfc00517 	ldw	ra,20(sp)
  80f3cc:	dd000417 	ldw	r20,16(sp)
  80f3d0:	dcc00317 	ldw	r19,12(sp)
  80f3d4:	dc800217 	ldw	r18,8(sp)
  80f3d8:	dc400117 	ldw	r17,4(sp)
  80f3dc:	dc000017 	ldw	r16,0(sp)
  80f3e0:	dec00604 	addi	sp,sp,24
  80f3e4:	f800283a 	ret
  80f3e8:	99400117 	ldw	r5,4(r19)
  80f3ec:	a009883a 	mov	r4,r20
  80f3f0:	29400044 	addi	r5,r5,1
  80f3f4:	080ebf80 	call	80ebf8 <_Balloc>
  80f3f8:	99800417 	ldw	r6,16(r19)
  80f3fc:	99400304 	addi	r5,r19,12
  80f400:	11000304 	addi	r4,r2,12
  80f404:	318d883a 	add	r6,r6,r6
  80f408:	318d883a 	add	r6,r6,r6
  80f40c:	31800204 	addi	r6,r6,8
  80f410:	1023883a 	mov	r17,r2
  80f414:	080e4600 	call	80e460 <memcpy>
  80f418:	980b883a 	mov	r5,r19
  80f41c:	a009883a 	mov	r4,r20
  80f420:	080e6780 	call	80e678 <_Bfree>
  80f424:	8827883a 	mov	r19,r17
  80f428:	003fe006 	br	80f3ac <__multadd+0x80>

0080f42c <__pow5mult>:
  80f42c:	defffa04 	addi	sp,sp,-24
  80f430:	308000cc 	andi	r2,r6,3
  80f434:	dd000415 	stw	r20,16(sp)
  80f438:	dcc00315 	stw	r19,12(sp)
  80f43c:	dc000015 	stw	r16,0(sp)
  80f440:	dfc00515 	stw	ra,20(sp)
  80f444:	dc800215 	stw	r18,8(sp)
  80f448:	dc400115 	stw	r17,4(sp)
  80f44c:	3021883a 	mov	r16,r6
  80f450:	2027883a 	mov	r19,r4
  80f454:	2829883a 	mov	r20,r5
  80f458:	10002b1e 	bne	r2,zero,80f508 <__pow5mult+0xdc>
  80f45c:	8025d0ba 	srai	r18,r16,2
  80f460:	90001b26 	beq	r18,zero,80f4d0 <__pow5mult+0xa4>
  80f464:	9c001217 	ldw	r16,72(r19)
  80f468:	8000081e 	bne	r16,zero,80f48c <__pow5mult+0x60>
  80f46c:	00003006 	br	80f530 <__pow5mult+0x104>
  80f470:	800b883a 	mov	r5,r16
  80f474:	800d883a 	mov	r6,r16
  80f478:	9809883a 	mov	r4,r19
  80f47c:	90001426 	beq	r18,zero,80f4d0 <__pow5mult+0xa4>
  80f480:	80800017 	ldw	r2,0(r16)
  80f484:	10001b26 	beq	r2,zero,80f4f4 <__pow5mult+0xc8>
  80f488:	1021883a 	mov	r16,r2
  80f48c:	9080004c 	andi	r2,r18,1
  80f490:	1005003a 	cmpeq	r2,r2,zero
  80f494:	9025d07a 	srai	r18,r18,1
  80f498:	800d883a 	mov	r6,r16
  80f49c:	9809883a 	mov	r4,r19
  80f4a0:	a00b883a 	mov	r5,r20
  80f4a4:	103ff21e 	bne	r2,zero,80f470 <__pow5mult+0x44>
  80f4a8:	080f1080 	call	80f108 <__multiply>
  80f4ac:	a00b883a 	mov	r5,r20
  80f4b0:	9809883a 	mov	r4,r19
  80f4b4:	1023883a 	mov	r17,r2
  80f4b8:	080e6780 	call	80e678 <_Bfree>
  80f4bc:	8829883a 	mov	r20,r17
  80f4c0:	800b883a 	mov	r5,r16
  80f4c4:	800d883a 	mov	r6,r16
  80f4c8:	9809883a 	mov	r4,r19
  80f4cc:	903fec1e 	bne	r18,zero,80f480 <__pow5mult+0x54>
  80f4d0:	a005883a 	mov	r2,r20
  80f4d4:	dfc00517 	ldw	ra,20(sp)
  80f4d8:	dd000417 	ldw	r20,16(sp)
  80f4dc:	dcc00317 	ldw	r19,12(sp)
  80f4e0:	dc800217 	ldw	r18,8(sp)
  80f4e4:	dc400117 	ldw	r17,4(sp)
  80f4e8:	dc000017 	ldw	r16,0(sp)
  80f4ec:	dec00604 	addi	sp,sp,24
  80f4f0:	f800283a 	ret
  80f4f4:	080f1080 	call	80f108 <__multiply>
  80f4f8:	80800015 	stw	r2,0(r16)
  80f4fc:	1021883a 	mov	r16,r2
  80f500:	10000015 	stw	zero,0(r2)
  80f504:	003fe106 	br	80f48c <__pow5mult+0x60>
  80f508:	1085883a 	add	r2,r2,r2
  80f50c:	00c020b4 	movhi	r3,130
  80f510:	18f0a604 	addi	r3,r3,-15720
  80f514:	1085883a 	add	r2,r2,r2
  80f518:	10c5883a 	add	r2,r2,r3
  80f51c:	11bfff17 	ldw	r6,-4(r2)
  80f520:	000f883a 	mov	r7,zero
  80f524:	080f32c0 	call	80f32c <__multadd>
  80f528:	1029883a 	mov	r20,r2
  80f52c:	003fcb06 	br	80f45c <__pow5mult+0x30>
  80f530:	9809883a 	mov	r4,r19
  80f534:	01409c44 	movi	r5,625
  80f538:	080f2f00 	call	80f2f0 <__i2b>
  80f53c:	98801215 	stw	r2,72(r19)
  80f540:	1021883a 	mov	r16,r2
  80f544:	10000015 	stw	zero,0(r2)
  80f548:	003fd006 	br	80f48c <__pow5mult+0x60>

0080f54c <__s2b>:
  80f54c:	defff904 	addi	sp,sp,-28
  80f550:	dcc00315 	stw	r19,12(sp)
  80f554:	dc800215 	stw	r18,8(sp)
  80f558:	2827883a 	mov	r19,r5
  80f55c:	2025883a 	mov	r18,r4
  80f560:	01400244 	movi	r5,9
  80f564:	39000204 	addi	r4,r7,8
  80f568:	dd000415 	stw	r20,16(sp)
  80f56c:	dc400115 	stw	r17,4(sp)
  80f570:	dfc00615 	stw	ra,24(sp)
  80f574:	dd400515 	stw	r21,20(sp)
  80f578:	dc000015 	stw	r16,0(sp)
  80f57c:	3829883a 	mov	r20,r7
  80f580:	3023883a 	mov	r17,r6
  80f584:	08085980 	call	808598 <__divsi3>
  80f588:	00c00044 	movi	r3,1
  80f58c:	1880350e 	bge	r3,r2,80f664 <__s2b+0x118>
  80f590:	000b883a 	mov	r5,zero
  80f594:	18c7883a 	add	r3,r3,r3
  80f598:	29400044 	addi	r5,r5,1
  80f59c:	18bffd16 	blt	r3,r2,80f594 <__s2b+0x48>
  80f5a0:	9009883a 	mov	r4,r18
  80f5a4:	080ebf80 	call	80ebf8 <_Balloc>
  80f5a8:	1011883a 	mov	r8,r2
  80f5ac:	d8800717 	ldw	r2,28(sp)
  80f5b0:	00c00044 	movi	r3,1
  80f5b4:	01800244 	movi	r6,9
  80f5b8:	40800515 	stw	r2,20(r8)
  80f5bc:	40c00415 	stw	r3,16(r8)
  80f5c0:	3440260e 	bge	r6,r17,80f65c <__s2b+0x110>
  80f5c4:	3021883a 	mov	r16,r6
  80f5c8:	99ab883a 	add	r21,r19,r6
  80f5cc:	9c05883a 	add	r2,r19,r16
  80f5d0:	11c00007 	ldb	r7,0(r2)
  80f5d4:	400b883a 	mov	r5,r8
  80f5d8:	9009883a 	mov	r4,r18
  80f5dc:	39fff404 	addi	r7,r7,-48
  80f5e0:	01800284 	movi	r6,10
  80f5e4:	080f32c0 	call	80f32c <__multadd>
  80f5e8:	84000044 	addi	r16,r16,1
  80f5ec:	1011883a 	mov	r8,r2
  80f5f0:	8c3ff61e 	bne	r17,r16,80f5cc <__s2b+0x80>
  80f5f4:	ac45883a 	add	r2,r21,r17
  80f5f8:	117ffe04 	addi	r5,r2,-8
  80f5fc:	880d883a 	mov	r6,r17
  80f600:	35000c0e 	bge	r6,r20,80f634 <__s2b+0xe8>
  80f604:	a185c83a 	sub	r2,r20,r6
  80f608:	2821883a 	mov	r16,r5
  80f60c:	28a3883a 	add	r17,r5,r2
  80f610:	81c00007 	ldb	r7,0(r16)
  80f614:	400b883a 	mov	r5,r8
  80f618:	9009883a 	mov	r4,r18
  80f61c:	39fff404 	addi	r7,r7,-48
  80f620:	01800284 	movi	r6,10
  80f624:	080f32c0 	call	80f32c <__multadd>
  80f628:	84000044 	addi	r16,r16,1
  80f62c:	1011883a 	mov	r8,r2
  80f630:	847ff71e 	bne	r16,r17,80f610 <__s2b+0xc4>
  80f634:	4005883a 	mov	r2,r8
  80f638:	dfc00617 	ldw	ra,24(sp)
  80f63c:	dd400517 	ldw	r21,20(sp)
  80f640:	dd000417 	ldw	r20,16(sp)
  80f644:	dcc00317 	ldw	r19,12(sp)
  80f648:	dc800217 	ldw	r18,8(sp)
  80f64c:	dc400117 	ldw	r17,4(sp)
  80f650:	dc000017 	ldw	r16,0(sp)
  80f654:	dec00704 	addi	sp,sp,28
  80f658:	f800283a 	ret
  80f65c:	99400284 	addi	r5,r19,10
  80f660:	003fe706 	br	80f600 <__s2b+0xb4>
  80f664:	000b883a 	mov	r5,zero
  80f668:	003fcd06 	br	80f5a0 <__s2b+0x54>

0080f66c <_realloc_r>:
  80f66c:	defff404 	addi	sp,sp,-48
  80f670:	dd800815 	stw	r22,32(sp)
  80f674:	dc800415 	stw	r18,16(sp)
  80f678:	dc400315 	stw	r17,12(sp)
  80f67c:	dfc00b15 	stw	ra,44(sp)
  80f680:	df000a15 	stw	fp,40(sp)
  80f684:	ddc00915 	stw	r23,36(sp)
  80f688:	dd400715 	stw	r21,28(sp)
  80f68c:	dd000615 	stw	r20,24(sp)
  80f690:	dcc00515 	stw	r19,20(sp)
  80f694:	dc000215 	stw	r16,8(sp)
  80f698:	2825883a 	mov	r18,r5
  80f69c:	3023883a 	mov	r17,r6
  80f6a0:	202d883a 	mov	r22,r4
  80f6a4:	2800c926 	beq	r5,zero,80f9cc <_realloc_r+0x360>
  80f6a8:	0811b440 	call	811b44 <__malloc_lock>
  80f6ac:	943ffe04 	addi	r16,r18,-8
  80f6b0:	88c002c4 	addi	r3,r17,11
  80f6b4:	00800584 	movi	r2,22
  80f6b8:	82000117 	ldw	r8,4(r16)
  80f6bc:	10c01b2e 	bgeu	r2,r3,80f72c <_realloc_r+0xc0>
  80f6c0:	00bffe04 	movi	r2,-8
  80f6c4:	188e703a 	and	r7,r3,r2
  80f6c8:	3839883a 	mov	fp,r7
  80f6cc:	38001a16 	blt	r7,zero,80f738 <_realloc_r+0xcc>
  80f6d0:	e4401936 	bltu	fp,r17,80f738 <_realloc_r+0xcc>
  80f6d4:	013fff04 	movi	r4,-4
  80f6d8:	4126703a 	and	r19,r8,r4
  80f6dc:	99c02616 	blt	r19,r7,80f778 <_realloc_r+0x10c>
  80f6e0:	802b883a 	mov	r21,r16
  80f6e4:	9829883a 	mov	r20,r19
  80f6e8:	84000204 	addi	r16,r16,8
  80f6ec:	a80f883a 	mov	r7,r21
  80f6f0:	a70dc83a 	sub	r6,r20,fp
  80f6f4:	008003c4 	movi	r2,15
  80f6f8:	1180c136 	bltu	r2,r6,80fa00 <_realloc_r+0x394>
  80f6fc:	38800117 	ldw	r2,4(r7)
  80f700:	a549883a 	add	r4,r20,r21
  80f704:	1080004c 	andi	r2,r2,1
  80f708:	a084b03a 	or	r2,r20,r2
  80f70c:	38800115 	stw	r2,4(r7)
  80f710:	20c00117 	ldw	r3,4(r4)
  80f714:	18c00054 	ori	r3,r3,1
  80f718:	20c00115 	stw	r3,4(r4)
  80f71c:	b009883a 	mov	r4,r22
  80f720:	0811b640 	call	811b64 <__malloc_unlock>
  80f724:	8023883a 	mov	r17,r16
  80f728:	00000606 	br	80f744 <_realloc_r+0xd8>
  80f72c:	01c00404 	movi	r7,16
  80f730:	3839883a 	mov	fp,r7
  80f734:	e47fe72e 	bgeu	fp,r17,80f6d4 <_realloc_r+0x68>
  80f738:	00800304 	movi	r2,12
  80f73c:	0023883a 	mov	r17,zero
  80f740:	b0800015 	stw	r2,0(r22)
  80f744:	8805883a 	mov	r2,r17
  80f748:	dfc00b17 	ldw	ra,44(sp)
  80f74c:	df000a17 	ldw	fp,40(sp)
  80f750:	ddc00917 	ldw	r23,36(sp)
  80f754:	dd800817 	ldw	r22,32(sp)
  80f758:	dd400717 	ldw	r21,28(sp)
  80f75c:	dd000617 	ldw	r20,24(sp)
  80f760:	dcc00517 	ldw	r19,20(sp)
  80f764:	dc800417 	ldw	r18,16(sp)
  80f768:	dc400317 	ldw	r17,12(sp)
  80f76c:	dc000217 	ldw	r16,8(sp)
  80f770:	dec00c04 	addi	sp,sp,48
  80f774:	f800283a 	ret
  80f778:	008020b4 	movhi	r2,130
  80f77c:	10b1eb04 	addi	r2,r2,-14420
  80f780:	12400217 	ldw	r9,8(r2)
  80f784:	84cd883a 	add	r6,r16,r19
  80f788:	802b883a 	mov	r21,r16
  80f78c:	3240b926 	beq	r6,r9,80fa74 <_realloc_r+0x408>
  80f790:	31400117 	ldw	r5,4(r6)
  80f794:	00bfff84 	movi	r2,-2
  80f798:	2884703a 	and	r2,r5,r2
  80f79c:	1185883a 	add	r2,r2,r6
  80f7a0:	10c00117 	ldw	r3,4(r2)
  80f7a4:	18c0004c 	andi	r3,r3,1
  80f7a8:	1807003a 	cmpeq	r3,r3,zero
  80f7ac:	1800a326 	beq	r3,zero,80fa3c <_realloc_r+0x3d0>
  80f7b0:	2908703a 	and	r4,r5,r4
  80f7b4:	9929883a 	add	r20,r19,r4
  80f7b8:	a1c0a30e 	bge	r20,r7,80fa48 <_realloc_r+0x3dc>
  80f7bc:	4080004c 	andi	r2,r8,1
  80f7c0:	1000551e 	bne	r2,zero,80f918 <_realloc_r+0x2ac>
  80f7c4:	80800017 	ldw	r2,0(r16)
  80f7c8:	80afc83a 	sub	r23,r16,r2
  80f7cc:	b8c00117 	ldw	r3,4(r23)
  80f7d0:	00bfff04 	movi	r2,-4
  80f7d4:	1884703a 	and	r2,r3,r2
  80f7d8:	30002e26 	beq	r6,zero,80f894 <_realloc_r+0x228>
  80f7dc:	3240b926 	beq	r6,r9,80fac4 <_realloc_r+0x458>
  80f7e0:	98a9883a 	add	r20,r19,r2
  80f7e4:	2509883a 	add	r4,r4,r20
  80f7e8:	d9000015 	stw	r4,0(sp)
  80f7ec:	21c02a16 	blt	r4,r7,80f898 <_realloc_r+0x22c>
  80f7f0:	30800317 	ldw	r2,12(r6)
  80f7f4:	30c00217 	ldw	r3,8(r6)
  80f7f8:	01400904 	movi	r5,36
  80f7fc:	99bfff04 	addi	r6,r19,-4
  80f800:	18800315 	stw	r2,12(r3)
  80f804:	10c00215 	stw	r3,8(r2)
  80f808:	b9000317 	ldw	r4,12(r23)
  80f80c:	b8800217 	ldw	r2,8(r23)
  80f810:	b82b883a 	mov	r21,r23
  80f814:	bc000204 	addi	r16,r23,8
  80f818:	20800215 	stw	r2,8(r4)
  80f81c:	11000315 	stw	r4,12(r2)
  80f820:	2980e436 	bltu	r5,r6,80fbb4 <_realloc_r+0x548>
  80f824:	008004c4 	movi	r2,19
  80f828:	9009883a 	mov	r4,r18
  80f82c:	8011883a 	mov	r8,r16
  80f830:	11800f2e 	bgeu	r2,r6,80f870 <_realloc_r+0x204>
  80f834:	90800017 	ldw	r2,0(r18)
  80f838:	ba000404 	addi	r8,r23,16
  80f83c:	91000204 	addi	r4,r18,8
  80f840:	b8800215 	stw	r2,8(r23)
  80f844:	90c00117 	ldw	r3,4(r18)
  80f848:	008006c4 	movi	r2,27
  80f84c:	b8c00315 	stw	r3,12(r23)
  80f850:	1180072e 	bgeu	r2,r6,80f870 <_realloc_r+0x204>
  80f854:	90c00217 	ldw	r3,8(r18)
  80f858:	ba000604 	addi	r8,r23,24
  80f85c:	91000404 	addi	r4,r18,16
  80f860:	b8c00415 	stw	r3,16(r23)
  80f864:	90800317 	ldw	r2,12(r18)
  80f868:	b8800515 	stw	r2,20(r23)
  80f86c:	3140e726 	beq	r6,r5,80fc0c <_realloc_r+0x5a0>
  80f870:	20800017 	ldw	r2,0(r4)
  80f874:	dd000017 	ldw	r20,0(sp)
  80f878:	b80f883a 	mov	r7,r23
  80f87c:	40800015 	stw	r2,0(r8)
  80f880:	20c00117 	ldw	r3,4(r4)
  80f884:	40c00115 	stw	r3,4(r8)
  80f888:	20800217 	ldw	r2,8(r4)
  80f88c:	40800215 	stw	r2,8(r8)
  80f890:	003f9706 	br	80f6f0 <_realloc_r+0x84>
  80f894:	98a9883a 	add	r20,r19,r2
  80f898:	a1c01f16 	blt	r20,r7,80f918 <_realloc_r+0x2ac>
  80f89c:	b8c00317 	ldw	r3,12(r23)
  80f8a0:	b8800217 	ldw	r2,8(r23)
  80f8a4:	99bfff04 	addi	r6,r19,-4
  80f8a8:	01400904 	movi	r5,36
  80f8ac:	b82b883a 	mov	r21,r23
  80f8b0:	18800215 	stw	r2,8(r3)
  80f8b4:	10c00315 	stw	r3,12(r2)
  80f8b8:	bc000204 	addi	r16,r23,8
  80f8bc:	2980c336 	bltu	r5,r6,80fbcc <_realloc_r+0x560>
  80f8c0:	008004c4 	movi	r2,19
  80f8c4:	9009883a 	mov	r4,r18
  80f8c8:	8011883a 	mov	r8,r16
  80f8cc:	11800f2e 	bgeu	r2,r6,80f90c <_realloc_r+0x2a0>
  80f8d0:	90800017 	ldw	r2,0(r18)
  80f8d4:	ba000404 	addi	r8,r23,16
  80f8d8:	91000204 	addi	r4,r18,8
  80f8dc:	b8800215 	stw	r2,8(r23)
  80f8e0:	90c00117 	ldw	r3,4(r18)
  80f8e4:	008006c4 	movi	r2,27
  80f8e8:	b8c00315 	stw	r3,12(r23)
  80f8ec:	1180072e 	bgeu	r2,r6,80f90c <_realloc_r+0x2a0>
  80f8f0:	90c00217 	ldw	r3,8(r18)
  80f8f4:	ba000604 	addi	r8,r23,24
  80f8f8:	91000404 	addi	r4,r18,16
  80f8fc:	b8c00415 	stw	r3,16(r23)
  80f900:	90800317 	ldw	r2,12(r18)
  80f904:	b8800515 	stw	r2,20(r23)
  80f908:	3140c726 	beq	r6,r5,80fc28 <_realloc_r+0x5bc>
  80f90c:	20800017 	ldw	r2,0(r4)
  80f910:	b80f883a 	mov	r7,r23
  80f914:	003fd906 	br	80f87c <_realloc_r+0x210>
  80f918:	880b883a 	mov	r5,r17
  80f91c:	b009883a 	mov	r4,r22
  80f920:	0808ef40 	call	808ef4 <_malloc_r>
  80f924:	1023883a 	mov	r17,r2
  80f928:	10002526 	beq	r2,zero,80f9c0 <_realloc_r+0x354>
  80f92c:	80800117 	ldw	r2,4(r16)
  80f930:	00ffff84 	movi	r3,-2
  80f934:	893ffe04 	addi	r4,r17,-8
  80f938:	10c4703a 	and	r2,r2,r3
  80f93c:	8085883a 	add	r2,r16,r2
  80f940:	20809526 	beq	r4,r2,80fb98 <_realloc_r+0x52c>
  80f944:	99bfff04 	addi	r6,r19,-4
  80f948:	01c00904 	movi	r7,36
  80f94c:	39804536 	bltu	r7,r6,80fa64 <_realloc_r+0x3f8>
  80f950:	008004c4 	movi	r2,19
  80f954:	9009883a 	mov	r4,r18
  80f958:	880b883a 	mov	r5,r17
  80f95c:	11800f2e 	bgeu	r2,r6,80f99c <_realloc_r+0x330>
  80f960:	90800017 	ldw	r2,0(r18)
  80f964:	89400204 	addi	r5,r17,8
  80f968:	91000204 	addi	r4,r18,8
  80f96c:	88800015 	stw	r2,0(r17)
  80f970:	90c00117 	ldw	r3,4(r18)
  80f974:	008006c4 	movi	r2,27
  80f978:	88c00115 	stw	r3,4(r17)
  80f97c:	1180072e 	bgeu	r2,r6,80f99c <_realloc_r+0x330>
  80f980:	90c00217 	ldw	r3,8(r18)
  80f984:	89400404 	addi	r5,r17,16
  80f988:	91000404 	addi	r4,r18,16
  80f98c:	88c00215 	stw	r3,8(r17)
  80f990:	90800317 	ldw	r2,12(r18)
  80f994:	88800315 	stw	r2,12(r17)
  80f998:	31c09126 	beq	r6,r7,80fbe0 <_realloc_r+0x574>
  80f99c:	20800017 	ldw	r2,0(r4)
  80f9a0:	28800015 	stw	r2,0(r5)
  80f9a4:	20c00117 	ldw	r3,4(r4)
  80f9a8:	28c00115 	stw	r3,4(r5)
  80f9ac:	20800217 	ldw	r2,8(r4)
  80f9b0:	28800215 	stw	r2,8(r5)
  80f9b4:	900b883a 	mov	r5,r18
  80f9b8:	b009883a 	mov	r4,r22
  80f9bc:	080d7800 	call	80d780 <_free_r>
  80f9c0:	b009883a 	mov	r4,r22
  80f9c4:	0811b640 	call	811b64 <__malloc_unlock>
  80f9c8:	003f5e06 	br	80f744 <_realloc_r+0xd8>
  80f9cc:	300b883a 	mov	r5,r6
  80f9d0:	dfc00b17 	ldw	ra,44(sp)
  80f9d4:	df000a17 	ldw	fp,40(sp)
  80f9d8:	ddc00917 	ldw	r23,36(sp)
  80f9dc:	dd800817 	ldw	r22,32(sp)
  80f9e0:	dd400717 	ldw	r21,28(sp)
  80f9e4:	dd000617 	ldw	r20,24(sp)
  80f9e8:	dcc00517 	ldw	r19,20(sp)
  80f9ec:	dc800417 	ldw	r18,16(sp)
  80f9f0:	dc400317 	ldw	r17,12(sp)
  80f9f4:	dc000217 	ldw	r16,8(sp)
  80f9f8:	dec00c04 	addi	sp,sp,48
  80f9fc:	0808ef41 	jmpi	808ef4 <_malloc_r>
  80fa00:	38800117 	ldw	r2,4(r7)
  80fa04:	e54b883a 	add	r5,fp,r21
  80fa08:	31000054 	ori	r4,r6,1
  80fa0c:	1080004c 	andi	r2,r2,1
  80fa10:	1704b03a 	or	r2,r2,fp
  80fa14:	38800115 	stw	r2,4(r7)
  80fa18:	29000115 	stw	r4,4(r5)
  80fa1c:	2987883a 	add	r3,r5,r6
  80fa20:	18800117 	ldw	r2,4(r3)
  80fa24:	29400204 	addi	r5,r5,8
  80fa28:	b009883a 	mov	r4,r22
  80fa2c:	10800054 	ori	r2,r2,1
  80fa30:	18800115 	stw	r2,4(r3)
  80fa34:	080d7800 	call	80d780 <_free_r>
  80fa38:	003f3806 	br	80f71c <_realloc_r+0xb0>
  80fa3c:	000d883a 	mov	r6,zero
  80fa40:	0009883a 	mov	r4,zero
  80fa44:	003f5d06 	br	80f7bc <_realloc_r+0x150>
  80fa48:	30c00217 	ldw	r3,8(r6)
  80fa4c:	30800317 	ldw	r2,12(r6)
  80fa50:	800f883a 	mov	r7,r16
  80fa54:	84000204 	addi	r16,r16,8
  80fa58:	10c00215 	stw	r3,8(r2)
  80fa5c:	18800315 	stw	r2,12(r3)
  80fa60:	003f2306 	br	80f6f0 <_realloc_r+0x84>
  80fa64:	8809883a 	mov	r4,r17
  80fa68:	900b883a 	mov	r5,r18
  80fa6c:	080e5000 	call	80e500 <memmove>
  80fa70:	003fd006 	br	80f9b4 <_realloc_r+0x348>
  80fa74:	30800117 	ldw	r2,4(r6)
  80fa78:	e0c00404 	addi	r3,fp,16
  80fa7c:	1108703a 	and	r4,r2,r4
  80fa80:	9905883a 	add	r2,r19,r4
  80fa84:	10ff4d16 	blt	r2,r3,80f7bc <_realloc_r+0x150>
  80fa88:	1705c83a 	sub	r2,r2,fp
  80fa8c:	870b883a 	add	r5,r16,fp
  80fa90:	10800054 	ori	r2,r2,1
  80fa94:	28800115 	stw	r2,4(r5)
  80fa98:	80c00117 	ldw	r3,4(r16)
  80fa9c:	008020b4 	movhi	r2,130
  80faa0:	10b1eb04 	addi	r2,r2,-14420
  80faa4:	b009883a 	mov	r4,r22
  80faa8:	18c0004c 	andi	r3,r3,1
  80faac:	e0c6b03a 	or	r3,fp,r3
  80fab0:	11400215 	stw	r5,8(r2)
  80fab4:	80c00115 	stw	r3,4(r16)
  80fab8:	0811b640 	call	811b64 <__malloc_unlock>
  80fabc:	84400204 	addi	r17,r16,8
  80fac0:	003f2006 	br	80f744 <_realloc_r+0xd8>
  80fac4:	98a9883a 	add	r20,r19,r2
  80fac8:	2509883a 	add	r4,r4,r20
  80facc:	e0800404 	addi	r2,fp,16
  80fad0:	d9000115 	stw	r4,4(sp)
  80fad4:	20bf7016 	blt	r4,r2,80f898 <_realloc_r+0x22c>
  80fad8:	b8c00317 	ldw	r3,12(r23)
  80fadc:	b8800217 	ldw	r2,8(r23)
  80fae0:	99bfff04 	addi	r6,r19,-4
  80fae4:	01400904 	movi	r5,36
  80fae8:	18800215 	stw	r2,8(r3)
  80faec:	10c00315 	stw	r3,12(r2)
  80faf0:	bc400204 	addi	r17,r23,8
  80faf4:	29804136 	bltu	r5,r6,80fbfc <_realloc_r+0x590>
  80faf8:	008004c4 	movi	r2,19
  80fafc:	9009883a 	mov	r4,r18
  80fb00:	880f883a 	mov	r7,r17
  80fb04:	11800f2e 	bgeu	r2,r6,80fb44 <_realloc_r+0x4d8>
  80fb08:	90800017 	ldw	r2,0(r18)
  80fb0c:	b9c00404 	addi	r7,r23,16
  80fb10:	91000204 	addi	r4,r18,8
  80fb14:	b8800215 	stw	r2,8(r23)
  80fb18:	90c00117 	ldw	r3,4(r18)
  80fb1c:	008006c4 	movi	r2,27
  80fb20:	b8c00315 	stw	r3,12(r23)
  80fb24:	1180072e 	bgeu	r2,r6,80fb44 <_realloc_r+0x4d8>
  80fb28:	90c00217 	ldw	r3,8(r18)
  80fb2c:	b9c00604 	addi	r7,r23,24
  80fb30:	91000404 	addi	r4,r18,16
  80fb34:	b8c00415 	stw	r3,16(r23)
  80fb38:	90800317 	ldw	r2,12(r18)
  80fb3c:	b8800515 	stw	r2,20(r23)
  80fb40:	31404026 	beq	r6,r5,80fc44 <_realloc_r+0x5d8>
  80fb44:	20800017 	ldw	r2,0(r4)
  80fb48:	38800015 	stw	r2,0(r7)
  80fb4c:	20c00117 	ldw	r3,4(r4)
  80fb50:	38c00115 	stw	r3,4(r7)
  80fb54:	20800217 	ldw	r2,8(r4)
  80fb58:	38800215 	stw	r2,8(r7)
  80fb5c:	d8c00117 	ldw	r3,4(sp)
  80fb60:	bf0b883a 	add	r5,r23,fp
  80fb64:	b009883a 	mov	r4,r22
  80fb68:	1f05c83a 	sub	r2,r3,fp
  80fb6c:	10800054 	ori	r2,r2,1
  80fb70:	28800115 	stw	r2,4(r5)
  80fb74:	b8c00117 	ldw	r3,4(r23)
  80fb78:	008020b4 	movhi	r2,130
  80fb7c:	10b1eb04 	addi	r2,r2,-14420
  80fb80:	11400215 	stw	r5,8(r2)
  80fb84:	18c0004c 	andi	r3,r3,1
  80fb88:	e0c6b03a 	or	r3,fp,r3
  80fb8c:	b8c00115 	stw	r3,4(r23)
  80fb90:	0811b640 	call	811b64 <__malloc_unlock>
  80fb94:	003eeb06 	br	80f744 <_realloc_r+0xd8>
  80fb98:	20800117 	ldw	r2,4(r4)
  80fb9c:	00ffff04 	movi	r3,-4
  80fba0:	800f883a 	mov	r7,r16
  80fba4:	10c4703a 	and	r2,r2,r3
  80fba8:	98a9883a 	add	r20,r19,r2
  80fbac:	84000204 	addi	r16,r16,8
  80fbb0:	003ecf06 	br	80f6f0 <_realloc_r+0x84>
  80fbb4:	900b883a 	mov	r5,r18
  80fbb8:	8009883a 	mov	r4,r16
  80fbbc:	080e5000 	call	80e500 <memmove>
  80fbc0:	dd000017 	ldw	r20,0(sp)
  80fbc4:	b80f883a 	mov	r7,r23
  80fbc8:	003ec906 	br	80f6f0 <_realloc_r+0x84>
  80fbcc:	900b883a 	mov	r5,r18
  80fbd0:	8009883a 	mov	r4,r16
  80fbd4:	080e5000 	call	80e500 <memmove>
  80fbd8:	b80f883a 	mov	r7,r23
  80fbdc:	003ec406 	br	80f6f0 <_realloc_r+0x84>
  80fbe0:	90c00417 	ldw	r3,16(r18)
  80fbe4:	89400604 	addi	r5,r17,24
  80fbe8:	91000604 	addi	r4,r18,24
  80fbec:	88c00415 	stw	r3,16(r17)
  80fbf0:	90800517 	ldw	r2,20(r18)
  80fbf4:	88800515 	stw	r2,20(r17)
  80fbf8:	003f6806 	br	80f99c <_realloc_r+0x330>
  80fbfc:	900b883a 	mov	r5,r18
  80fc00:	8809883a 	mov	r4,r17
  80fc04:	080e5000 	call	80e500 <memmove>
  80fc08:	003fd406 	br	80fb5c <_realloc_r+0x4f0>
  80fc0c:	90c00417 	ldw	r3,16(r18)
  80fc10:	91000604 	addi	r4,r18,24
  80fc14:	ba000804 	addi	r8,r23,32
  80fc18:	b8c00615 	stw	r3,24(r23)
  80fc1c:	90800517 	ldw	r2,20(r18)
  80fc20:	b8800715 	stw	r2,28(r23)
  80fc24:	003f1206 	br	80f870 <_realloc_r+0x204>
  80fc28:	90c00417 	ldw	r3,16(r18)
  80fc2c:	91000604 	addi	r4,r18,24
  80fc30:	ba000804 	addi	r8,r23,32
  80fc34:	b8c00615 	stw	r3,24(r23)
  80fc38:	90800517 	ldw	r2,20(r18)
  80fc3c:	b8800715 	stw	r2,28(r23)
  80fc40:	003f3206 	br	80f90c <_realloc_r+0x2a0>
  80fc44:	90c00417 	ldw	r3,16(r18)
  80fc48:	91000604 	addi	r4,r18,24
  80fc4c:	b9c00804 	addi	r7,r23,32
  80fc50:	b8c00615 	stw	r3,24(r23)
  80fc54:	90800517 	ldw	r2,20(r18)
  80fc58:	b8800715 	stw	r2,28(r23)
  80fc5c:	003fb906 	br	80fb44 <_realloc_r+0x4d8>

0080fc60 <__isinfd>:
  80fc60:	200d883a 	mov	r6,r4
  80fc64:	0109c83a 	sub	r4,zero,r4
  80fc68:	2188b03a 	or	r4,r4,r6
  80fc6c:	2008d7fa 	srli	r4,r4,31
  80fc70:	00a00034 	movhi	r2,32768
  80fc74:	10bfffc4 	addi	r2,r2,-1
  80fc78:	1144703a 	and	r2,r2,r5
  80fc7c:	2088b03a 	or	r4,r4,r2
  80fc80:	009ffc34 	movhi	r2,32752
  80fc84:	1105c83a 	sub	r2,r2,r4
  80fc88:	0087c83a 	sub	r3,zero,r2
  80fc8c:	10c4b03a 	or	r2,r2,r3
  80fc90:	1004d7fa 	srli	r2,r2,31
  80fc94:	00c00044 	movi	r3,1
  80fc98:	1885c83a 	sub	r2,r3,r2
  80fc9c:	f800283a 	ret

0080fca0 <__sclose>:
  80fca0:	2940038f 	ldh	r5,14(r5)
  80fca4:	080ffd41 	jmpi	80ffd4 <_close_r>

0080fca8 <__sseek>:
  80fca8:	defffe04 	addi	sp,sp,-8
  80fcac:	dc000015 	stw	r16,0(sp)
  80fcb0:	2821883a 	mov	r16,r5
  80fcb4:	2940038f 	ldh	r5,14(r5)
  80fcb8:	dfc00115 	stw	ra,4(sp)
  80fcbc:	081024c0 	call	81024c <_lseek_r>
  80fcc0:	1007883a 	mov	r3,r2
  80fcc4:	00bfffc4 	movi	r2,-1
  80fcc8:	18800926 	beq	r3,r2,80fcf0 <__sseek+0x48>
  80fccc:	8080030b 	ldhu	r2,12(r16)
  80fcd0:	80c01415 	stw	r3,80(r16)
  80fcd4:	10840014 	ori	r2,r2,4096
  80fcd8:	8080030d 	sth	r2,12(r16)
  80fcdc:	1805883a 	mov	r2,r3
  80fce0:	dfc00117 	ldw	ra,4(sp)
  80fce4:	dc000017 	ldw	r16,0(sp)
  80fce8:	dec00204 	addi	sp,sp,8
  80fcec:	f800283a 	ret
  80fcf0:	8080030b 	ldhu	r2,12(r16)
  80fcf4:	10bbffcc 	andi	r2,r2,61439
  80fcf8:	8080030d 	sth	r2,12(r16)
  80fcfc:	1805883a 	mov	r2,r3
  80fd00:	dfc00117 	ldw	ra,4(sp)
  80fd04:	dc000017 	ldw	r16,0(sp)
  80fd08:	dec00204 	addi	sp,sp,8
  80fd0c:	f800283a 	ret

0080fd10 <__swrite>:
  80fd10:	2880030b 	ldhu	r2,12(r5)
  80fd14:	defffb04 	addi	sp,sp,-20
  80fd18:	dcc00315 	stw	r19,12(sp)
  80fd1c:	1080400c 	andi	r2,r2,256
  80fd20:	dc800215 	stw	r18,8(sp)
  80fd24:	dc400115 	stw	r17,4(sp)
  80fd28:	dc000015 	stw	r16,0(sp)
  80fd2c:	3027883a 	mov	r19,r6
  80fd30:	3825883a 	mov	r18,r7
  80fd34:	dfc00415 	stw	ra,16(sp)
  80fd38:	2821883a 	mov	r16,r5
  80fd3c:	000d883a 	mov	r6,zero
  80fd40:	01c00084 	movi	r7,2
  80fd44:	2023883a 	mov	r17,r4
  80fd48:	10000226 	beq	r2,zero,80fd54 <__swrite+0x44>
  80fd4c:	2940038f 	ldh	r5,14(r5)
  80fd50:	081024c0 	call	81024c <_lseek_r>
  80fd54:	8080030b 	ldhu	r2,12(r16)
  80fd58:	8140038f 	ldh	r5,14(r16)
  80fd5c:	8809883a 	mov	r4,r17
  80fd60:	10bbffcc 	andi	r2,r2,61439
  80fd64:	980d883a 	mov	r6,r19
  80fd68:	900f883a 	mov	r7,r18
  80fd6c:	8080030d 	sth	r2,12(r16)
  80fd70:	dfc00417 	ldw	ra,16(sp)
  80fd74:	dcc00317 	ldw	r19,12(sp)
  80fd78:	dc800217 	ldw	r18,8(sp)
  80fd7c:	dc400117 	ldw	r17,4(sp)
  80fd80:	dc000017 	ldw	r16,0(sp)
  80fd84:	dec00504 	addi	sp,sp,20
  80fd88:	080fea81 	jmpi	80fea8 <_write_r>

0080fd8c <__sread>:
  80fd8c:	defffe04 	addi	sp,sp,-8
  80fd90:	dc000015 	stw	r16,0(sp)
  80fd94:	2821883a 	mov	r16,r5
  80fd98:	2940038f 	ldh	r5,14(r5)
  80fd9c:	dfc00115 	stw	ra,4(sp)
  80fda0:	08102c40 	call	8102c4 <_read_r>
  80fda4:	1007883a 	mov	r3,r2
  80fda8:	10000816 	blt	r2,zero,80fdcc <__sread+0x40>
  80fdac:	80801417 	ldw	r2,80(r16)
  80fdb0:	10c5883a 	add	r2,r2,r3
  80fdb4:	80801415 	stw	r2,80(r16)
  80fdb8:	1805883a 	mov	r2,r3
  80fdbc:	dfc00117 	ldw	ra,4(sp)
  80fdc0:	dc000017 	ldw	r16,0(sp)
  80fdc4:	dec00204 	addi	sp,sp,8
  80fdc8:	f800283a 	ret
  80fdcc:	8080030b 	ldhu	r2,12(r16)
  80fdd0:	10bbffcc 	andi	r2,r2,61439
  80fdd4:	8080030d 	sth	r2,12(r16)
  80fdd8:	1805883a 	mov	r2,r3
  80fddc:	dfc00117 	ldw	ra,4(sp)
  80fde0:	dc000017 	ldw	r16,0(sp)
  80fde4:	dec00204 	addi	sp,sp,8
  80fde8:	f800283a 	ret

0080fdec <strcmp>:
  80fdec:	2144b03a 	or	r2,r4,r5
  80fdf0:	108000cc 	andi	r2,r2,3
  80fdf4:	10001d1e 	bne	r2,zero,80fe6c <strcmp+0x80>
  80fdf8:	200f883a 	mov	r7,r4
  80fdfc:	28800017 	ldw	r2,0(r5)
  80fe00:	21000017 	ldw	r4,0(r4)
  80fe04:	280d883a 	mov	r6,r5
  80fe08:	2080161e 	bne	r4,r2,80fe64 <strcmp+0x78>
  80fe0c:	023fbff4 	movhi	r8,65279
  80fe10:	423fbfc4 	addi	r8,r8,-257
  80fe14:	2207883a 	add	r3,r4,r8
  80fe18:	01602074 	movhi	r5,32897
  80fe1c:	29602004 	addi	r5,r5,-32640
  80fe20:	1946703a 	and	r3,r3,r5
  80fe24:	0104303a 	nor	r2,zero,r4
  80fe28:	10c4703a 	and	r2,r2,r3
  80fe2c:	10001c1e 	bne	r2,zero,80fea0 <strcmp+0xb4>
  80fe30:	4013883a 	mov	r9,r8
  80fe34:	2811883a 	mov	r8,r5
  80fe38:	00000106 	br	80fe40 <strcmp+0x54>
  80fe3c:	1800181e 	bne	r3,zero,80fea0 <strcmp+0xb4>
  80fe40:	39c00104 	addi	r7,r7,4
  80fe44:	39000017 	ldw	r4,0(r7)
  80fe48:	31800104 	addi	r6,r6,4
  80fe4c:	31400017 	ldw	r5,0(r6)
  80fe50:	2245883a 	add	r2,r4,r9
  80fe54:	1204703a 	and	r2,r2,r8
  80fe58:	0106303a 	nor	r3,zero,r4
  80fe5c:	1886703a 	and	r3,r3,r2
  80fe60:	217ff626 	beq	r4,r5,80fe3c <strcmp+0x50>
  80fe64:	3809883a 	mov	r4,r7
  80fe68:	300b883a 	mov	r5,r6
  80fe6c:	20c00007 	ldb	r3,0(r4)
  80fe70:	1800051e 	bne	r3,zero,80fe88 <strcmp+0x9c>
  80fe74:	00000606 	br	80fe90 <strcmp+0xa4>
  80fe78:	21000044 	addi	r4,r4,1
  80fe7c:	20c00007 	ldb	r3,0(r4)
  80fe80:	29400044 	addi	r5,r5,1
  80fe84:	18000226 	beq	r3,zero,80fe90 <strcmp+0xa4>
  80fe88:	28800007 	ldb	r2,0(r5)
  80fe8c:	18bffa26 	beq	r3,r2,80fe78 <strcmp+0x8c>
  80fe90:	20c00003 	ldbu	r3,0(r4)
  80fe94:	28800003 	ldbu	r2,0(r5)
  80fe98:	1885c83a 	sub	r2,r3,r2
  80fe9c:	f800283a 	ret
  80fea0:	0005883a 	mov	r2,zero
  80fea4:	f800283a 	ret

0080fea8 <_write_r>:
  80fea8:	defffd04 	addi	sp,sp,-12
  80feac:	dc000015 	stw	r16,0(sp)
  80feb0:	040020b4 	movhi	r16,130
  80feb4:	843efd04 	addi	r16,r16,-1036
  80feb8:	dc400115 	stw	r17,4(sp)
  80febc:	80000015 	stw	zero,0(r16)
  80fec0:	2023883a 	mov	r17,r4
  80fec4:	2809883a 	mov	r4,r5
  80fec8:	300b883a 	mov	r5,r6
  80fecc:	380d883a 	mov	r6,r7
  80fed0:	dfc00215 	stw	ra,8(sp)
  80fed4:	0811ff40 	call	811ff4 <write>
  80fed8:	1007883a 	mov	r3,r2
  80fedc:	00bfffc4 	movi	r2,-1
  80fee0:	18800626 	beq	r3,r2,80fefc <_write_r+0x54>
  80fee4:	1805883a 	mov	r2,r3
  80fee8:	dfc00217 	ldw	ra,8(sp)
  80feec:	dc400117 	ldw	r17,4(sp)
  80fef0:	dc000017 	ldw	r16,0(sp)
  80fef4:	dec00304 	addi	sp,sp,12
  80fef8:	f800283a 	ret
  80fefc:	80800017 	ldw	r2,0(r16)
  80ff00:	103ff826 	beq	r2,zero,80fee4 <_write_r+0x3c>
  80ff04:	88800015 	stw	r2,0(r17)
  80ff08:	1805883a 	mov	r2,r3
  80ff0c:	dfc00217 	ldw	ra,8(sp)
  80ff10:	dc400117 	ldw	r17,4(sp)
  80ff14:	dc000017 	ldw	r16,0(sp)
  80ff18:	dec00304 	addi	sp,sp,12
  80ff1c:	f800283a 	ret

0080ff20 <_calloc_r>:
  80ff20:	298b383a 	mul	r5,r5,r6
  80ff24:	defffe04 	addi	sp,sp,-8
  80ff28:	dc000015 	stw	r16,0(sp)
  80ff2c:	dfc00115 	stw	ra,4(sp)
  80ff30:	0808ef40 	call	808ef4 <_malloc_r>
  80ff34:	1021883a 	mov	r16,r2
  80ff38:	01c00904 	movi	r7,36
  80ff3c:	10000d26 	beq	r2,zero,80ff74 <_calloc_r+0x54>
  80ff40:	10ffff17 	ldw	r3,-4(r2)
  80ff44:	1009883a 	mov	r4,r2
  80ff48:	00bfff04 	movi	r2,-4
  80ff4c:	1886703a 	and	r3,r3,r2
  80ff50:	1887883a 	add	r3,r3,r2
  80ff54:	180d883a 	mov	r6,r3
  80ff58:	000b883a 	mov	r5,zero
  80ff5c:	38c01736 	bltu	r7,r3,80ffbc <_calloc_r+0x9c>
  80ff60:	008004c4 	movi	r2,19
  80ff64:	10c00836 	bltu	r2,r3,80ff88 <_calloc_r+0x68>
  80ff68:	20000215 	stw	zero,8(r4)
  80ff6c:	20000015 	stw	zero,0(r4)
  80ff70:	20000115 	stw	zero,4(r4)
  80ff74:	8005883a 	mov	r2,r16
  80ff78:	dfc00117 	ldw	ra,4(sp)
  80ff7c:	dc000017 	ldw	r16,0(sp)
  80ff80:	dec00204 	addi	sp,sp,8
  80ff84:	f800283a 	ret
  80ff88:	008006c4 	movi	r2,27
  80ff8c:	80000015 	stw	zero,0(r16)
  80ff90:	80000115 	stw	zero,4(r16)
  80ff94:	81000204 	addi	r4,r16,8
  80ff98:	10fff32e 	bgeu	r2,r3,80ff68 <_calloc_r+0x48>
  80ff9c:	80000215 	stw	zero,8(r16)
  80ffa0:	80000315 	stw	zero,12(r16)
  80ffa4:	81000404 	addi	r4,r16,16
  80ffa8:	19ffef1e 	bne	r3,r7,80ff68 <_calloc_r+0x48>
  80ffac:	81000604 	addi	r4,r16,24
  80ffb0:	80000415 	stw	zero,16(r16)
  80ffb4:	80000515 	stw	zero,20(r16)
  80ffb8:	003feb06 	br	80ff68 <_calloc_r+0x48>
  80ffbc:	080e5e00 	call	80e5e0 <memset>
  80ffc0:	8005883a 	mov	r2,r16
  80ffc4:	dfc00117 	ldw	ra,4(sp)
  80ffc8:	dc000017 	ldw	r16,0(sp)
  80ffcc:	dec00204 	addi	sp,sp,8
  80ffd0:	f800283a 	ret

0080ffd4 <_close_r>:
  80ffd4:	defffd04 	addi	sp,sp,-12
  80ffd8:	dc000015 	stw	r16,0(sp)
  80ffdc:	040020b4 	movhi	r16,130
  80ffe0:	843efd04 	addi	r16,r16,-1036
  80ffe4:	dc400115 	stw	r17,4(sp)
  80ffe8:	80000015 	stw	zero,0(r16)
  80ffec:	2023883a 	mov	r17,r4
  80fff0:	2809883a 	mov	r4,r5
  80fff4:	dfc00215 	stw	ra,8(sp)
  80fff8:	08110e40 	call	8110e4 <close>
  80fffc:	1007883a 	mov	r3,r2
  810000:	00bfffc4 	movi	r2,-1
  810004:	18800626 	beq	r3,r2,810020 <_close_r+0x4c>
  810008:	1805883a 	mov	r2,r3
  81000c:	dfc00217 	ldw	ra,8(sp)
  810010:	dc400117 	ldw	r17,4(sp)
  810014:	dc000017 	ldw	r16,0(sp)
  810018:	dec00304 	addi	sp,sp,12
  81001c:	f800283a 	ret
  810020:	80800017 	ldw	r2,0(r16)
  810024:	103ff826 	beq	r2,zero,810008 <_close_r+0x34>
  810028:	88800015 	stw	r2,0(r17)
  81002c:	1805883a 	mov	r2,r3
  810030:	dfc00217 	ldw	ra,8(sp)
  810034:	dc400117 	ldw	r17,4(sp)
  810038:	dc000017 	ldw	r16,0(sp)
  81003c:	dec00304 	addi	sp,sp,12
  810040:	f800283a 	ret

00810044 <_fclose_r>:
  810044:	defffc04 	addi	sp,sp,-16
  810048:	dc400115 	stw	r17,4(sp)
  81004c:	dc000015 	stw	r16,0(sp)
  810050:	dfc00315 	stw	ra,12(sp)
  810054:	dc800215 	stw	r18,8(sp)
  810058:	2821883a 	mov	r16,r5
  81005c:	2023883a 	mov	r17,r4
  810060:	28002926 	beq	r5,zero,810108 <_fclose_r+0xc4>
  810064:	080d3ec0 	call	80d3ec <__sfp_lock_acquire>
  810068:	88000226 	beq	r17,zero,810074 <_fclose_r+0x30>
  81006c:	88800e17 	ldw	r2,56(r17)
  810070:	10002d26 	beq	r2,zero,810128 <_fclose_r+0xe4>
  810074:	8080030f 	ldh	r2,12(r16)
  810078:	10002226 	beq	r2,zero,810104 <_fclose_r+0xc0>
  81007c:	8809883a 	mov	r4,r17
  810080:	800b883a 	mov	r5,r16
  810084:	080d1640 	call	80d164 <_fflush_r>
  810088:	1025883a 	mov	r18,r2
  81008c:	80800b17 	ldw	r2,44(r16)
  810090:	10000426 	beq	r2,zero,8100a4 <_fclose_r+0x60>
  810094:	81400717 	ldw	r5,28(r16)
  810098:	8809883a 	mov	r4,r17
  81009c:	103ee83a 	callr	r2
  8100a0:	10002a16 	blt	r2,zero,81014c <_fclose_r+0x108>
  8100a4:	8080030b 	ldhu	r2,12(r16)
  8100a8:	1080200c 	andi	r2,r2,128
  8100ac:	1000231e 	bne	r2,zero,81013c <_fclose_r+0xf8>
  8100b0:	81400c17 	ldw	r5,48(r16)
  8100b4:	28000526 	beq	r5,zero,8100cc <_fclose_r+0x88>
  8100b8:	80801004 	addi	r2,r16,64
  8100bc:	28800226 	beq	r5,r2,8100c8 <_fclose_r+0x84>
  8100c0:	8809883a 	mov	r4,r17
  8100c4:	080d7800 	call	80d780 <_free_r>
  8100c8:	80000c15 	stw	zero,48(r16)
  8100cc:	81401117 	ldw	r5,68(r16)
  8100d0:	28000326 	beq	r5,zero,8100e0 <_fclose_r+0x9c>
  8100d4:	8809883a 	mov	r4,r17
  8100d8:	080d7800 	call	80d780 <_free_r>
  8100dc:	80001115 	stw	zero,68(r16)
  8100e0:	8000030d 	sth	zero,12(r16)
  8100e4:	080d3f00 	call	80d3f0 <__sfp_lock_release>
  8100e8:	9005883a 	mov	r2,r18
  8100ec:	dfc00317 	ldw	ra,12(sp)
  8100f0:	dc800217 	ldw	r18,8(sp)
  8100f4:	dc400117 	ldw	r17,4(sp)
  8100f8:	dc000017 	ldw	r16,0(sp)
  8100fc:	dec00404 	addi	sp,sp,16
  810100:	f800283a 	ret
  810104:	080d3f00 	call	80d3f0 <__sfp_lock_release>
  810108:	0025883a 	mov	r18,zero
  81010c:	9005883a 	mov	r2,r18
  810110:	dfc00317 	ldw	ra,12(sp)
  810114:	dc800217 	ldw	r18,8(sp)
  810118:	dc400117 	ldw	r17,4(sp)
  81011c:	dc000017 	ldw	r16,0(sp)
  810120:	dec00404 	addi	sp,sp,16
  810124:	f800283a 	ret
  810128:	8809883a 	mov	r4,r17
  81012c:	080d3fc0 	call	80d3fc <__sinit>
  810130:	8080030f 	ldh	r2,12(r16)
  810134:	103fd11e 	bne	r2,zero,81007c <_fclose_r+0x38>
  810138:	003ff206 	br	810104 <_fclose_r+0xc0>
  81013c:	81400417 	ldw	r5,16(r16)
  810140:	8809883a 	mov	r4,r17
  810144:	080d7800 	call	80d780 <_free_r>
  810148:	003fd906 	br	8100b0 <_fclose_r+0x6c>
  81014c:	04bfffc4 	movi	r18,-1
  810150:	003fd406 	br	8100a4 <_fclose_r+0x60>

00810154 <fclose>:
  810154:	008020b4 	movhi	r2,130
  810158:	10b7cd04 	addi	r2,r2,-8396
  81015c:	200b883a 	mov	r5,r4
  810160:	11000017 	ldw	r4,0(r2)
  810164:	08100441 	jmpi	810044 <_fclose_r>

00810168 <_fstat_r>:
  810168:	defffd04 	addi	sp,sp,-12
  81016c:	dc000015 	stw	r16,0(sp)
  810170:	040020b4 	movhi	r16,130
  810174:	843efd04 	addi	r16,r16,-1036
  810178:	dc400115 	stw	r17,4(sp)
  81017c:	80000015 	stw	zero,0(r16)
  810180:	2023883a 	mov	r17,r4
  810184:	2809883a 	mov	r4,r5
  810188:	300b883a 	mov	r5,r6
  81018c:	dfc00215 	stw	ra,8(sp)
  810190:	081126c0 	call	81126c <fstat>
  810194:	1007883a 	mov	r3,r2
  810198:	00bfffc4 	movi	r2,-1
  81019c:	18800626 	beq	r3,r2,8101b8 <_fstat_r+0x50>
  8101a0:	1805883a 	mov	r2,r3
  8101a4:	dfc00217 	ldw	ra,8(sp)
  8101a8:	dc400117 	ldw	r17,4(sp)
  8101ac:	dc000017 	ldw	r16,0(sp)
  8101b0:	dec00304 	addi	sp,sp,12
  8101b4:	f800283a 	ret
  8101b8:	80800017 	ldw	r2,0(r16)
  8101bc:	103ff826 	beq	r2,zero,8101a0 <_fstat_r+0x38>
  8101c0:	88800015 	stw	r2,0(r17)
  8101c4:	1805883a 	mov	r2,r3
  8101c8:	dfc00217 	ldw	ra,8(sp)
  8101cc:	dc400117 	ldw	r17,4(sp)
  8101d0:	dc000017 	ldw	r16,0(sp)
  8101d4:	dec00304 	addi	sp,sp,12
  8101d8:	f800283a 	ret

008101dc <_isatty_r>:
  8101dc:	defffd04 	addi	sp,sp,-12
  8101e0:	dc000015 	stw	r16,0(sp)
  8101e4:	040020b4 	movhi	r16,130
  8101e8:	843efd04 	addi	r16,r16,-1036
  8101ec:	dc400115 	stw	r17,4(sp)
  8101f0:	80000015 	stw	zero,0(r16)
  8101f4:	2023883a 	mov	r17,r4
  8101f8:	2809883a 	mov	r4,r5
  8101fc:	dfc00215 	stw	ra,8(sp)
  810200:	081177c0 	call	81177c <isatty>
  810204:	1007883a 	mov	r3,r2
  810208:	00bfffc4 	movi	r2,-1
  81020c:	18800626 	beq	r3,r2,810228 <_isatty_r+0x4c>
  810210:	1805883a 	mov	r2,r3
  810214:	dfc00217 	ldw	ra,8(sp)
  810218:	dc400117 	ldw	r17,4(sp)
  81021c:	dc000017 	ldw	r16,0(sp)
  810220:	dec00304 	addi	sp,sp,12
  810224:	f800283a 	ret
  810228:	80800017 	ldw	r2,0(r16)
  81022c:	103ff826 	beq	r2,zero,810210 <_isatty_r+0x34>
  810230:	88800015 	stw	r2,0(r17)
  810234:	1805883a 	mov	r2,r3
  810238:	dfc00217 	ldw	ra,8(sp)
  81023c:	dc400117 	ldw	r17,4(sp)
  810240:	dc000017 	ldw	r16,0(sp)
  810244:	dec00304 	addi	sp,sp,12
  810248:	f800283a 	ret

0081024c <_lseek_r>:
  81024c:	defffd04 	addi	sp,sp,-12
  810250:	dc000015 	stw	r16,0(sp)
  810254:	040020b4 	movhi	r16,130
  810258:	843efd04 	addi	r16,r16,-1036
  81025c:	dc400115 	stw	r17,4(sp)
  810260:	80000015 	stw	zero,0(r16)
  810264:	2023883a 	mov	r17,r4
  810268:	2809883a 	mov	r4,r5
  81026c:	300b883a 	mov	r5,r6
  810270:	380d883a 	mov	r6,r7
  810274:	dfc00215 	stw	ra,8(sp)
  810278:	08119880 	call	811988 <lseek>
  81027c:	1007883a 	mov	r3,r2
  810280:	00bfffc4 	movi	r2,-1
  810284:	18800626 	beq	r3,r2,8102a0 <_lseek_r+0x54>
  810288:	1805883a 	mov	r2,r3
  81028c:	dfc00217 	ldw	ra,8(sp)
  810290:	dc400117 	ldw	r17,4(sp)
  810294:	dc000017 	ldw	r16,0(sp)
  810298:	dec00304 	addi	sp,sp,12
  81029c:	f800283a 	ret
  8102a0:	80800017 	ldw	r2,0(r16)
  8102a4:	103ff826 	beq	r2,zero,810288 <_lseek_r+0x3c>
  8102a8:	88800015 	stw	r2,0(r17)
  8102ac:	1805883a 	mov	r2,r3
  8102b0:	dfc00217 	ldw	ra,8(sp)
  8102b4:	dc400117 	ldw	r17,4(sp)
  8102b8:	dc000017 	ldw	r16,0(sp)
  8102bc:	dec00304 	addi	sp,sp,12
  8102c0:	f800283a 	ret

008102c4 <_read_r>:
  8102c4:	defffd04 	addi	sp,sp,-12
  8102c8:	dc000015 	stw	r16,0(sp)
  8102cc:	040020b4 	movhi	r16,130
  8102d0:	843efd04 	addi	r16,r16,-1036
  8102d4:	dc400115 	stw	r17,4(sp)
  8102d8:	80000015 	stw	zero,0(r16)
  8102dc:	2023883a 	mov	r17,r4
  8102e0:	2809883a 	mov	r4,r5
  8102e4:	300b883a 	mov	r5,r6
  8102e8:	380d883a 	mov	r6,r7
  8102ec:	dfc00215 	stw	ra,8(sp)
  8102f0:	0811b840 	call	811b84 <read>
  8102f4:	1007883a 	mov	r3,r2
  8102f8:	00bfffc4 	movi	r2,-1
  8102fc:	18800626 	beq	r3,r2,810318 <_read_r+0x54>
  810300:	1805883a 	mov	r2,r3
  810304:	dfc00217 	ldw	ra,8(sp)
  810308:	dc400117 	ldw	r17,4(sp)
  81030c:	dc000017 	ldw	r16,0(sp)
  810310:	dec00304 	addi	sp,sp,12
  810314:	f800283a 	ret
  810318:	80800017 	ldw	r2,0(r16)
  81031c:	103ff826 	beq	r2,zero,810300 <_read_r+0x3c>
  810320:	88800015 	stw	r2,0(r17)
  810324:	1805883a 	mov	r2,r3
  810328:	dfc00217 	ldw	ra,8(sp)
  81032c:	dc400117 	ldw	r17,4(sp)
  810330:	dc000017 	ldw	r16,0(sp)
  810334:	dec00304 	addi	sp,sp,12
  810338:	f800283a 	ret

0081033c <__udivdi3>:
  81033c:	defff004 	addi	sp,sp,-64
  810340:	2005883a 	mov	r2,r4
  810344:	3011883a 	mov	r8,r6
  810348:	df000e15 	stw	fp,56(sp)
  81034c:	dd000a15 	stw	r20,40(sp)
  810350:	dc000615 	stw	r16,24(sp)
  810354:	dfc00f15 	stw	ra,60(sp)
  810358:	ddc00d15 	stw	r23,52(sp)
  81035c:	dd800c15 	stw	r22,48(sp)
  810360:	dd400b15 	stw	r21,44(sp)
  810364:	dcc00915 	stw	r19,36(sp)
  810368:	dc800815 	stw	r18,32(sp)
  81036c:	dc400715 	stw	r17,28(sp)
  810370:	4021883a 	mov	r16,r8
  810374:	1039883a 	mov	fp,r2
  810378:	2829883a 	mov	r20,r5
  81037c:	38003b1e 	bne	r7,zero,81046c <__udivdi3+0x130>
  810380:	2a005c36 	bltu	r5,r8,8104f4 <__udivdi3+0x1b8>
  810384:	4000a626 	beq	r8,zero,810620 <__udivdi3+0x2e4>
  810388:	00bfffd4 	movui	r2,65535
  81038c:	14009e36 	bltu	r2,r16,810608 <__udivdi3+0x2cc>
  810390:	00803fc4 	movi	r2,255
  810394:	14013d36 	bltu	r2,r16,81088c <__udivdi3+0x550>
  810398:	000b883a 	mov	r5,zero
  81039c:	0005883a 	mov	r2,zero
  8103a0:	8084d83a 	srl	r2,r16,r2
  8103a4:	010020b4 	movhi	r4,130
  8103a8:	212fea04 	addi	r4,r4,-16472
  8103ac:	01800804 	movi	r6,32
  8103b0:	1105883a 	add	r2,r2,r4
  8103b4:	10c00003 	ldbu	r3,0(r2)
  8103b8:	28c7883a 	add	r3,r5,r3
  8103bc:	30edc83a 	sub	r22,r6,r3
  8103c0:	b000ee1e 	bne	r22,zero,81077c <__udivdi3+0x440>
  8103c4:	802ad43a 	srli	r21,r16,16
  8103c8:	00800044 	movi	r2,1
  8103cc:	a423c83a 	sub	r17,r20,r16
  8103d0:	85ffffcc 	andi	r23,r16,65535
  8103d4:	d8800315 	stw	r2,12(sp)
  8103d8:	8809883a 	mov	r4,r17
  8103dc:	a80b883a 	mov	r5,r21
  8103e0:	08086580 	call	808658 <__udivsi3>
  8103e4:	8809883a 	mov	r4,r17
  8103e8:	a80b883a 	mov	r5,r21
  8103ec:	102d883a 	mov	r22,r2
  8103f0:	08086600 	call	808660 <__umodsi3>
  8103f4:	1004943a 	slli	r2,r2,16
  8103f8:	e006d43a 	srli	r3,fp,16
  8103fc:	bda3383a 	mul	r17,r23,r22
  810400:	10c4b03a 	or	r2,r2,r3
  810404:	1440042e 	bgeu	r2,r17,810418 <__udivdi3+0xdc>
  810408:	1405883a 	add	r2,r2,r16
  81040c:	b5bfffc4 	addi	r22,r22,-1
  810410:	14000136 	bltu	r2,r16,810418 <__udivdi3+0xdc>
  810414:	14413d36 	bltu	r2,r17,81090c <__udivdi3+0x5d0>
  810418:	1463c83a 	sub	r17,r2,r17
  81041c:	8809883a 	mov	r4,r17
  810420:	a80b883a 	mov	r5,r21
  810424:	08086580 	call	808658 <__udivsi3>
  810428:	8809883a 	mov	r4,r17
  81042c:	a80b883a 	mov	r5,r21
  810430:	1029883a 	mov	r20,r2
  810434:	08086600 	call	808660 <__umodsi3>
  810438:	1004943a 	slli	r2,r2,16
  81043c:	bd09383a 	mul	r4,r23,r20
  810440:	e0ffffcc 	andi	r3,fp,65535
  810444:	10c4b03a 	or	r2,r2,r3
  810448:	1100042e 	bgeu	r2,r4,81045c <__udivdi3+0x120>
  81044c:	8085883a 	add	r2,r16,r2
  810450:	a53fffc4 	addi	r20,r20,-1
  810454:	14000136 	bltu	r2,r16,81045c <__udivdi3+0x120>
  810458:	11012036 	bltu	r2,r4,8108dc <__udivdi3+0x5a0>
  81045c:	b004943a 	slli	r2,r22,16
  810460:	d9000317 	ldw	r4,12(sp)
  810464:	a084b03a 	or	r2,r20,r2
  810468:	00001506 	br	8104c0 <__udivdi3+0x184>
  81046c:	380d883a 	mov	r6,r7
  810470:	29c06236 	bltu	r5,r7,8105fc <__udivdi3+0x2c0>
  810474:	00bfffd4 	movui	r2,65535
  810478:	11c05a36 	bltu	r2,r7,8105e4 <__udivdi3+0x2a8>
  81047c:	00803fc4 	movi	r2,255
  810480:	11c0fc36 	bltu	r2,r7,810874 <__udivdi3+0x538>
  810484:	000b883a 	mov	r5,zero
  810488:	0005883a 	mov	r2,zero
  81048c:	3084d83a 	srl	r2,r6,r2
  810490:	010020b4 	movhi	r4,130
  810494:	212fea04 	addi	r4,r4,-16472
  810498:	01c00804 	movi	r7,32
  81049c:	1105883a 	add	r2,r2,r4
  8104a0:	10c00003 	ldbu	r3,0(r2)
  8104a4:	28c7883a 	add	r3,r5,r3
  8104a8:	38efc83a 	sub	r23,r7,r3
  8104ac:	b800691e 	bne	r23,zero,810654 <__udivdi3+0x318>
  8104b0:	35000136 	bltu	r6,r20,8104b8 <__udivdi3+0x17c>
  8104b4:	e4005136 	bltu	fp,r16,8105fc <__udivdi3+0x2c0>
  8104b8:	00800044 	movi	r2,1
  8104bc:	0009883a 	mov	r4,zero
  8104c0:	2007883a 	mov	r3,r4
  8104c4:	dfc00f17 	ldw	ra,60(sp)
  8104c8:	df000e17 	ldw	fp,56(sp)
  8104cc:	ddc00d17 	ldw	r23,52(sp)
  8104d0:	dd800c17 	ldw	r22,48(sp)
  8104d4:	dd400b17 	ldw	r21,44(sp)
  8104d8:	dd000a17 	ldw	r20,40(sp)
  8104dc:	dcc00917 	ldw	r19,36(sp)
  8104e0:	dc800817 	ldw	r18,32(sp)
  8104e4:	dc400717 	ldw	r17,28(sp)
  8104e8:	dc000617 	ldw	r16,24(sp)
  8104ec:	dec01004 	addi	sp,sp,64
  8104f0:	f800283a 	ret
  8104f4:	00bfffd4 	movui	r2,65535
  8104f8:	12005036 	bltu	r2,r8,81063c <__udivdi3+0x300>
  8104fc:	00803fc4 	movi	r2,255
  810500:	1200e836 	bltu	r2,r8,8108a4 <__udivdi3+0x568>
  810504:	000b883a 	mov	r5,zero
  810508:	0005883a 	mov	r2,zero
  81050c:	8084d83a 	srl	r2,r16,r2
  810510:	010020b4 	movhi	r4,130
  810514:	212fea04 	addi	r4,r4,-16472
  810518:	01800804 	movi	r6,32
  81051c:	1105883a 	add	r2,r2,r4
  810520:	10c00003 	ldbu	r3,0(r2)
  810524:	28c7883a 	add	r3,r5,r3
  810528:	30cbc83a 	sub	r5,r6,r3
  81052c:	28000626 	beq	r5,zero,810548 <__udivdi3+0x20c>
  810530:	3145c83a 	sub	r2,r6,r5
  810534:	e084d83a 	srl	r2,fp,r2
  810538:	a146983a 	sll	r3,r20,r5
  81053c:	e178983a 	sll	fp,fp,r5
  810540:	8160983a 	sll	r16,r16,r5
  810544:	18a8b03a 	or	r20,r3,r2
  810548:	802ad43a 	srli	r21,r16,16
  81054c:	a009883a 	mov	r4,r20
  810550:	85ffffcc 	andi	r23,r16,65535
  810554:	a80b883a 	mov	r5,r21
  810558:	08086580 	call	808658 <__udivsi3>
  81055c:	a009883a 	mov	r4,r20
  810560:	a80b883a 	mov	r5,r21
  810564:	102d883a 	mov	r22,r2
  810568:	08086600 	call	808660 <__umodsi3>
  81056c:	1004943a 	slli	r2,r2,16
  810570:	e006d43a 	srli	r3,fp,16
  810574:	bda3383a 	mul	r17,r23,r22
  810578:	10c4b03a 	or	r2,r2,r3
  81057c:	1440042e 	bgeu	r2,r17,810590 <__udivdi3+0x254>
  810580:	1405883a 	add	r2,r2,r16
  810584:	b5bfffc4 	addi	r22,r22,-1
  810588:	14000136 	bltu	r2,r16,810590 <__udivdi3+0x254>
  81058c:	1440d536 	bltu	r2,r17,8108e4 <__udivdi3+0x5a8>
  810590:	1463c83a 	sub	r17,r2,r17
  810594:	8809883a 	mov	r4,r17
  810598:	a80b883a 	mov	r5,r21
  81059c:	08086580 	call	808658 <__udivsi3>
  8105a0:	8809883a 	mov	r4,r17
  8105a4:	a80b883a 	mov	r5,r21
  8105a8:	1029883a 	mov	r20,r2
  8105ac:	08086600 	call	808660 <__umodsi3>
  8105b0:	1004943a 	slli	r2,r2,16
  8105b4:	bd09383a 	mul	r4,r23,r20
  8105b8:	e0ffffcc 	andi	r3,fp,65535
  8105bc:	10c4b03a 	or	r2,r2,r3
  8105c0:	1100042e 	bgeu	r2,r4,8105d4 <__udivdi3+0x298>
  8105c4:	8085883a 	add	r2,r16,r2
  8105c8:	a53fffc4 	addi	r20,r20,-1
  8105cc:	14000136 	bltu	r2,r16,8105d4 <__udivdi3+0x298>
  8105d0:	1100c736 	bltu	r2,r4,8108f0 <__udivdi3+0x5b4>
  8105d4:	b004943a 	slli	r2,r22,16
  8105d8:	0009883a 	mov	r4,zero
  8105dc:	a084b03a 	or	r2,r20,r2
  8105e0:	003fb706 	br	8104c0 <__udivdi3+0x184>
  8105e4:	00804034 	movhi	r2,256
  8105e8:	10bfffc4 	addi	r2,r2,-1
  8105ec:	11c0a436 	bltu	r2,r7,810880 <__udivdi3+0x544>
  8105f0:	01400404 	movi	r5,16
  8105f4:	2805883a 	mov	r2,r5
  8105f8:	003fa406 	br	81048c <__udivdi3+0x150>
  8105fc:	0005883a 	mov	r2,zero
  810600:	0009883a 	mov	r4,zero
  810604:	003fae06 	br	8104c0 <__udivdi3+0x184>
  810608:	00804034 	movhi	r2,256
  81060c:	10bfffc4 	addi	r2,r2,-1
  810610:	1400a136 	bltu	r2,r16,810898 <__udivdi3+0x55c>
  810614:	01400404 	movi	r5,16
  810618:	2805883a 	mov	r2,r5
  81061c:	003f6006 	br	8103a0 <__udivdi3+0x64>
  810620:	01000044 	movi	r4,1
  810624:	000b883a 	mov	r5,zero
  810628:	08086580 	call	808658 <__udivsi3>
  81062c:	1021883a 	mov	r16,r2
  810630:	00bfffd4 	movui	r2,65535
  810634:	143ff436 	bltu	r2,r16,810608 <__udivdi3+0x2cc>
  810638:	003f5506 	br	810390 <__udivdi3+0x54>
  81063c:	00804034 	movhi	r2,256
  810640:	10bfffc4 	addi	r2,r2,-1
  810644:	12009a36 	bltu	r2,r8,8108b0 <__udivdi3+0x574>
  810648:	01400404 	movi	r5,16
  81064c:	2805883a 	mov	r2,r5
  810650:	003fae06 	br	81050c <__udivdi3+0x1d0>
  810654:	3dc5c83a 	sub	r2,r7,r23
  810658:	35c8983a 	sll	r4,r6,r23
  81065c:	8086d83a 	srl	r3,r16,r2
  810660:	a0a2d83a 	srl	r17,r20,r2
  810664:	e084d83a 	srl	r2,fp,r2
  810668:	20eab03a 	or	r21,r4,r3
  81066c:	a82cd43a 	srli	r22,r21,16
  810670:	a5c6983a 	sll	r3,r20,r23
  810674:	8809883a 	mov	r4,r17
  810678:	b00b883a 	mov	r5,r22
  81067c:	1886b03a 	or	r3,r3,r2
  810680:	d8c00215 	stw	r3,8(sp)
  810684:	08086580 	call	808658 <__udivsi3>
  810688:	8809883a 	mov	r4,r17
  81068c:	b00b883a 	mov	r5,r22
  810690:	1029883a 	mov	r20,r2
  810694:	08086600 	call	808660 <__umodsi3>
  810698:	a8ffffcc 	andi	r3,r21,65535
  81069c:	d8c00515 	stw	r3,20(sp)
  8106a0:	d9000217 	ldw	r4,8(sp)
  8106a4:	d9400517 	ldw	r5,20(sp)
  8106a8:	1004943a 	slli	r2,r2,16
  8106ac:	2006d43a 	srli	r3,r4,16
  8106b0:	85e0983a 	sll	r16,r16,r23
  8106b4:	2d23383a 	mul	r17,r5,r20
  8106b8:	10c4b03a 	or	r2,r2,r3
  8106bc:	dc000015 	stw	r16,0(sp)
  8106c0:	1440032e 	bgeu	r2,r17,8106d0 <__udivdi3+0x394>
  8106c4:	1545883a 	add	r2,r2,r21
  8106c8:	a53fffc4 	addi	r20,r20,-1
  8106cc:	15407f2e 	bgeu	r2,r21,8108cc <__udivdi3+0x590>
  8106d0:	1463c83a 	sub	r17,r2,r17
  8106d4:	8809883a 	mov	r4,r17
  8106d8:	b00b883a 	mov	r5,r22
  8106dc:	08086580 	call	808658 <__udivsi3>
  8106e0:	8809883a 	mov	r4,r17
  8106e4:	b00b883a 	mov	r5,r22
  8106e8:	1021883a 	mov	r16,r2
  8106ec:	08086600 	call	808660 <__umodsi3>
  8106f0:	d8c00517 	ldw	r3,20(sp)
  8106f4:	d9000217 	ldw	r4,8(sp)
  8106f8:	1004943a 	slli	r2,r2,16
  8106fc:	1c0f383a 	mul	r7,r3,r16
  810700:	20ffffcc 	andi	r3,r4,65535
  810704:	10e2b03a 	or	r17,r2,r3
  810708:	89c0032e 	bgeu	r17,r7,810718 <__udivdi3+0x3dc>
  81070c:	8d63883a 	add	r17,r17,r21
  810710:	843fffc4 	addi	r16,r16,-1
  810714:	8d40692e 	bgeu	r17,r21,8108bc <__udivdi3+0x580>
  810718:	a008943a 	slli	r4,r20,16
  81071c:	d9400017 	ldw	r5,0(sp)
  810720:	89e3c83a 	sub	r17,r17,r7
  810724:	8110b03a 	or	r8,r16,r4
  810728:	280cd43a 	srli	r6,r5,16
  81072c:	28ffffcc 	andi	r3,r5,65535
  810730:	40bfffcc 	andi	r2,r8,65535
  810734:	400ad43a 	srli	r5,r8,16
  810738:	10d3383a 	mul	r9,r2,r3
  81073c:	1185383a 	mul	r2,r2,r6
  810740:	28c7383a 	mul	r3,r5,r3
  810744:	4808d43a 	srli	r4,r9,16
  810748:	298b383a 	mul	r5,r5,r6
  81074c:	10c5883a 	add	r2,r2,r3
  810750:	2089883a 	add	r4,r4,r2
  810754:	20c0022e 	bgeu	r4,r3,810760 <__udivdi3+0x424>
  810758:	00800074 	movhi	r2,1
  81075c:	288b883a 	add	r5,r5,r2
  810760:	2004d43a 	srli	r2,r4,16
  810764:	288b883a 	add	r5,r5,r2
  810768:	89403f36 	bltu	r17,r5,810868 <__udivdi3+0x52c>
  81076c:	89403926 	beq	r17,r5,810854 <__udivdi3+0x518>
  810770:	4005883a 	mov	r2,r8
  810774:	0009883a 	mov	r4,zero
  810778:	003f5106 	br	8104c0 <__udivdi3+0x184>
  81077c:	85a0983a 	sll	r16,r16,r22
  810780:	3585c83a 	sub	r2,r6,r22
  810784:	a0a2d83a 	srl	r17,r20,r2
  810788:	802ad43a 	srli	r21,r16,16
  81078c:	e084d83a 	srl	r2,fp,r2
  810790:	a586983a 	sll	r3,r20,r22
  810794:	8809883a 	mov	r4,r17
  810798:	a80b883a 	mov	r5,r21
  81079c:	1886b03a 	or	r3,r3,r2
  8107a0:	d8c00115 	stw	r3,4(sp)
  8107a4:	08086580 	call	808658 <__udivsi3>
  8107a8:	8809883a 	mov	r4,r17
  8107ac:	a80b883a 	mov	r5,r21
  8107b0:	d8800415 	stw	r2,16(sp)
  8107b4:	08086600 	call	808660 <__umodsi3>
  8107b8:	d9000117 	ldw	r4,4(sp)
  8107bc:	d9400417 	ldw	r5,16(sp)
  8107c0:	1004943a 	slli	r2,r2,16
  8107c4:	85ffffcc 	andi	r23,r16,65535
  8107c8:	2006d43a 	srli	r3,r4,16
  8107cc:	b963383a 	mul	r17,r23,r5
  8107d0:	10c4b03a 	or	r2,r2,r3
  8107d4:	1440042e 	bgeu	r2,r17,8107e8 <__udivdi3+0x4ac>
  8107d8:	297fffc4 	addi	r5,r5,-1
  8107dc:	1405883a 	add	r2,r2,r16
  8107e0:	d9400415 	stw	r5,16(sp)
  8107e4:	1400442e 	bgeu	r2,r16,8108f8 <__udivdi3+0x5bc>
  8107e8:	1463c83a 	sub	r17,r2,r17
  8107ec:	8809883a 	mov	r4,r17
  8107f0:	a80b883a 	mov	r5,r21
  8107f4:	08086580 	call	808658 <__udivsi3>
  8107f8:	8809883a 	mov	r4,r17
  8107fc:	a80b883a 	mov	r5,r21
  810800:	1029883a 	mov	r20,r2
  810804:	08086600 	call	808660 <__umodsi3>
  810808:	d9400117 	ldw	r5,4(sp)
  81080c:	1004943a 	slli	r2,r2,16
  810810:	bd09383a 	mul	r4,r23,r20
  810814:	28ffffcc 	andi	r3,r5,65535
  810818:	10c6b03a 	or	r3,r2,r3
  81081c:	1900062e 	bgeu	r3,r4,810838 <__udivdi3+0x4fc>
  810820:	1c07883a 	add	r3,r3,r16
  810824:	a53fffc4 	addi	r20,r20,-1
  810828:	1c000336 	bltu	r3,r16,810838 <__udivdi3+0x4fc>
  81082c:	1900022e 	bgeu	r3,r4,810838 <__udivdi3+0x4fc>
  810830:	a53fffc4 	addi	r20,r20,-1
  810834:	1c07883a 	add	r3,r3,r16
  810838:	d9400417 	ldw	r5,16(sp)
  81083c:	e5b8983a 	sll	fp,fp,r22
  810840:	1923c83a 	sub	r17,r3,r4
  810844:	2804943a 	slli	r2,r5,16
  810848:	a0a8b03a 	or	r20,r20,r2
  81084c:	dd000315 	stw	r20,12(sp)
  810850:	003ee106 	br	8103d8 <__udivdi3+0x9c>
  810854:	2004943a 	slli	r2,r4,16
  810858:	e5c8983a 	sll	r4,fp,r23
  81085c:	48ffffcc 	andi	r3,r9,65535
  810860:	10c5883a 	add	r2,r2,r3
  810864:	20bfc22e 	bgeu	r4,r2,810770 <__udivdi3+0x434>
  810868:	40bfffc4 	addi	r2,r8,-1
  81086c:	0009883a 	mov	r4,zero
  810870:	003f1306 	br	8104c0 <__udivdi3+0x184>
  810874:	01400204 	movi	r5,8
  810878:	2805883a 	mov	r2,r5
  81087c:	003f0306 	br	81048c <__udivdi3+0x150>
  810880:	01400604 	movi	r5,24
  810884:	2805883a 	mov	r2,r5
  810888:	003f0006 	br	81048c <__udivdi3+0x150>
  81088c:	01400204 	movi	r5,8
  810890:	2805883a 	mov	r2,r5
  810894:	003ec206 	br	8103a0 <__udivdi3+0x64>
  810898:	01400604 	movi	r5,24
  81089c:	2805883a 	mov	r2,r5
  8108a0:	003ebf06 	br	8103a0 <__udivdi3+0x64>
  8108a4:	01400204 	movi	r5,8
  8108a8:	2805883a 	mov	r2,r5
  8108ac:	003f1706 	br	81050c <__udivdi3+0x1d0>
  8108b0:	01400604 	movi	r5,24
  8108b4:	2805883a 	mov	r2,r5
  8108b8:	003f1406 	br	81050c <__udivdi3+0x1d0>
  8108bc:	89ff962e 	bgeu	r17,r7,810718 <__udivdi3+0x3dc>
  8108c0:	8d63883a 	add	r17,r17,r21
  8108c4:	843fffc4 	addi	r16,r16,-1
  8108c8:	003f9306 	br	810718 <__udivdi3+0x3dc>
  8108cc:	147f802e 	bgeu	r2,r17,8106d0 <__udivdi3+0x394>
  8108d0:	a53fffc4 	addi	r20,r20,-1
  8108d4:	1545883a 	add	r2,r2,r21
  8108d8:	003f7d06 	br	8106d0 <__udivdi3+0x394>
  8108dc:	a53fffc4 	addi	r20,r20,-1
  8108e0:	003ede06 	br	81045c <__udivdi3+0x120>
  8108e4:	b5bfffc4 	addi	r22,r22,-1
  8108e8:	1405883a 	add	r2,r2,r16
  8108ec:	003f2806 	br	810590 <__udivdi3+0x254>
  8108f0:	a53fffc4 	addi	r20,r20,-1
  8108f4:	003f3706 	br	8105d4 <__udivdi3+0x298>
  8108f8:	147fbb2e 	bgeu	r2,r17,8107e8 <__udivdi3+0x4ac>
  8108fc:	297fffc4 	addi	r5,r5,-1
  810900:	1405883a 	add	r2,r2,r16
  810904:	d9400415 	stw	r5,16(sp)
  810908:	003fb706 	br	8107e8 <__udivdi3+0x4ac>
  81090c:	b5bfffc4 	addi	r22,r22,-1
  810910:	1405883a 	add	r2,r2,r16
  810914:	003ec006 	br	810418 <__udivdi3+0xdc>

00810918 <__umoddi3>:
  810918:	defff104 	addi	sp,sp,-60
  81091c:	dd800b15 	stw	r22,44(sp)
  810920:	dd000915 	stw	r20,36(sp)
  810924:	dc000515 	stw	r16,20(sp)
  810928:	dfc00e15 	stw	ra,56(sp)
  81092c:	df000d15 	stw	fp,52(sp)
  810930:	ddc00c15 	stw	r23,48(sp)
  810934:	dd400a15 	stw	r21,40(sp)
  810938:	dcc00815 	stw	r19,32(sp)
  81093c:	dc800715 	stw	r18,28(sp)
  810940:	dc400615 	stw	r17,24(sp)
  810944:	3021883a 	mov	r16,r6
  810948:	202d883a 	mov	r22,r4
  81094c:	2829883a 	mov	r20,r5
  810950:	38002b1e 	bne	r7,zero,810a00 <__umoddi3+0xe8>
  810954:	29805036 	bltu	r5,r6,810a98 <__umoddi3+0x180>
  810958:	30008a26 	beq	r6,zero,810b84 <__umoddi3+0x26c>
  81095c:	00bfffd4 	movui	r2,65535
  810960:	14008236 	bltu	r2,r16,810b6c <__umoddi3+0x254>
  810964:	00803fc4 	movi	r2,255
  810968:	14013636 	bltu	r2,r16,810e44 <__umoddi3+0x52c>
  81096c:	000b883a 	mov	r5,zero
  810970:	0005883a 	mov	r2,zero
  810974:	8084d83a 	srl	r2,r16,r2
  810978:	010020b4 	movhi	r4,130
  81097c:	212fea04 	addi	r4,r4,-16472
  810980:	01800804 	movi	r6,32
  810984:	1105883a 	add	r2,r2,r4
  810988:	10c00003 	ldbu	r3,0(r2)
  81098c:	28c7883a 	add	r3,r5,r3
  810990:	30efc83a 	sub	r23,r6,r3
  810994:	b800941e 	bne	r23,zero,810be8 <__umoddi3+0x2d0>
  810998:	802ad43a 	srli	r21,r16,16
  81099c:	a423c83a 	sub	r17,r20,r16
  8109a0:	0039883a 	mov	fp,zero
  8109a4:	853fffcc 	andi	r20,r16,65535
  8109a8:	8809883a 	mov	r4,r17
  8109ac:	a80b883a 	mov	r5,r21
  8109b0:	08086580 	call	808658 <__udivsi3>
  8109b4:	8809883a 	mov	r4,r17
  8109b8:	a80b883a 	mov	r5,r21
  8109bc:	a0a3383a 	mul	r17,r20,r2
  8109c0:	08086600 	call	808660 <__umodsi3>
  8109c4:	1004943a 	slli	r2,r2,16
  8109c8:	b006d43a 	srli	r3,r22,16
  8109cc:	10c4b03a 	or	r2,r2,r3
  8109d0:	1440032e 	bgeu	r2,r17,8109e0 <__umoddi3+0xc8>
  8109d4:	1405883a 	add	r2,r2,r16
  8109d8:	14000136 	bltu	r2,r16,8109e0 <__umoddi3+0xc8>
  8109dc:	14413536 	bltu	r2,r17,810eb4 <__umoddi3+0x59c>
  8109e0:	1463c83a 	sub	r17,r2,r17
  8109e4:	8809883a 	mov	r4,r17
  8109e8:	a80b883a 	mov	r5,r21
  8109ec:	08086580 	call	808658 <__udivsi3>
  8109f0:	8809883a 	mov	r4,r17
  8109f4:	a0a3383a 	mul	r17,r20,r2
  8109f8:	a80b883a 	mov	r5,r21
  8109fc:	00004d06 	br	810b34 <__umoddi3+0x21c>
  810a00:	380d883a 	mov	r6,r7
  810a04:	29c0102e 	bgeu	r5,r7,810a48 <__umoddi3+0x130>
  810a08:	2011883a 	mov	r8,r4
  810a0c:	2813883a 	mov	r9,r5
  810a10:	4005883a 	mov	r2,r8
  810a14:	4807883a 	mov	r3,r9
  810a18:	dfc00e17 	ldw	ra,56(sp)
  810a1c:	df000d17 	ldw	fp,52(sp)
  810a20:	ddc00c17 	ldw	r23,48(sp)
  810a24:	dd800b17 	ldw	r22,44(sp)
  810a28:	dd400a17 	ldw	r21,40(sp)
  810a2c:	dd000917 	ldw	r20,36(sp)
  810a30:	dcc00817 	ldw	r19,32(sp)
  810a34:	dc800717 	ldw	r18,28(sp)
  810a38:	dc400617 	ldw	r17,24(sp)
  810a3c:	dc000517 	ldw	r16,20(sp)
  810a40:	dec00f04 	addi	sp,sp,60
  810a44:	f800283a 	ret
  810a48:	00bfffd4 	movui	r2,65535
  810a4c:	11c05a36 	bltu	r2,r7,810bb8 <__umoddi3+0x2a0>
  810a50:	00803fc4 	movi	r2,255
  810a54:	11c0fe36 	bltu	r2,r7,810e50 <__umoddi3+0x538>
  810a58:	000b883a 	mov	r5,zero
  810a5c:	0005883a 	mov	r2,zero
  810a60:	3084d83a 	srl	r2,r6,r2
  810a64:	010020b4 	movhi	r4,130
  810a68:	212fea04 	addi	r4,r4,-16472
  810a6c:	01c00804 	movi	r7,32
  810a70:	1105883a 	add	r2,r2,r4
  810a74:	10c00003 	ldbu	r3,0(r2)
  810a78:	28c7883a 	add	r3,r5,r3
  810a7c:	38ebc83a 	sub	r21,r7,r3
  810a80:	a800851e 	bne	r21,zero,810c98 <__umoddi3+0x380>
  810a84:	35005236 	bltu	r6,r20,810bd0 <__umoddi3+0x2b8>
  810a88:	b400512e 	bgeu	r22,r16,810bd0 <__umoddi3+0x2b8>
  810a8c:	b011883a 	mov	r8,r22
  810a90:	a013883a 	mov	r9,r20
  810a94:	003fde06 	br	810a10 <__umoddi3+0xf8>
  810a98:	00bfffd4 	movui	r2,65535
  810a9c:	11804036 	bltu	r2,r6,810ba0 <__umoddi3+0x288>
  810aa0:	00803fc4 	movi	r2,255
  810aa4:	1180ed36 	bltu	r2,r6,810e5c <__umoddi3+0x544>
  810aa8:	000b883a 	mov	r5,zero
  810aac:	0005883a 	mov	r2,zero
  810ab0:	8084d83a 	srl	r2,r16,r2
  810ab4:	010020b4 	movhi	r4,130
  810ab8:	212fea04 	addi	r4,r4,-16472
  810abc:	01800804 	movi	r6,32
  810ac0:	1105883a 	add	r2,r2,r4
  810ac4:	10c00003 	ldbu	r3,0(r2)
  810ac8:	28c7883a 	add	r3,r5,r3
  810acc:	30c7c83a 	sub	r3,r6,r3
  810ad0:	1800bf1e 	bne	r3,zero,810dd0 <__umoddi3+0x4b8>
  810ad4:	0039883a 	mov	fp,zero
  810ad8:	802ad43a 	srli	r21,r16,16
  810adc:	a009883a 	mov	r4,r20
  810ae0:	85ffffcc 	andi	r23,r16,65535
  810ae4:	a80b883a 	mov	r5,r21
  810ae8:	08086580 	call	808658 <__udivsi3>
  810aec:	a009883a 	mov	r4,r20
  810af0:	a80b883a 	mov	r5,r21
  810af4:	b8a3383a 	mul	r17,r23,r2
  810af8:	08086600 	call	808660 <__umodsi3>
  810afc:	1004943a 	slli	r2,r2,16
  810b00:	b006d43a 	srli	r3,r22,16
  810b04:	10c4b03a 	or	r2,r2,r3
  810b08:	1440032e 	bgeu	r2,r17,810b18 <__umoddi3+0x200>
  810b0c:	1405883a 	add	r2,r2,r16
  810b10:	14000136 	bltu	r2,r16,810b18 <__umoddi3+0x200>
  810b14:	1440e536 	bltu	r2,r17,810eac <__umoddi3+0x594>
  810b18:	1463c83a 	sub	r17,r2,r17
  810b1c:	8809883a 	mov	r4,r17
  810b20:	a80b883a 	mov	r5,r21
  810b24:	08086580 	call	808658 <__udivsi3>
  810b28:	8809883a 	mov	r4,r17
  810b2c:	b8a3383a 	mul	r17,r23,r2
  810b30:	a80b883a 	mov	r5,r21
  810b34:	08086600 	call	808660 <__umodsi3>
  810b38:	1004943a 	slli	r2,r2,16
  810b3c:	b0ffffcc 	andi	r3,r22,65535
  810b40:	10c4b03a 	or	r2,r2,r3
  810b44:	1440042e 	bgeu	r2,r17,810b58 <__umoddi3+0x240>
  810b48:	1405883a 	add	r2,r2,r16
  810b4c:	14000236 	bltu	r2,r16,810b58 <__umoddi3+0x240>
  810b50:	1440012e 	bgeu	r2,r17,810b58 <__umoddi3+0x240>
  810b54:	1405883a 	add	r2,r2,r16
  810b58:	1445c83a 	sub	r2,r2,r17
  810b5c:	1724d83a 	srl	r18,r2,fp
  810b60:	0013883a 	mov	r9,zero
  810b64:	9011883a 	mov	r8,r18
  810b68:	003fa906 	br	810a10 <__umoddi3+0xf8>
  810b6c:	00804034 	movhi	r2,256
  810b70:	10bfffc4 	addi	r2,r2,-1
  810b74:	1400b036 	bltu	r2,r16,810e38 <__umoddi3+0x520>
  810b78:	01400404 	movi	r5,16
  810b7c:	2805883a 	mov	r2,r5
  810b80:	003f7c06 	br	810974 <__umoddi3+0x5c>
  810b84:	01000044 	movi	r4,1
  810b88:	000b883a 	mov	r5,zero
  810b8c:	08086580 	call	808658 <__udivsi3>
  810b90:	1021883a 	mov	r16,r2
  810b94:	00bfffd4 	movui	r2,65535
  810b98:	143ff436 	bltu	r2,r16,810b6c <__umoddi3+0x254>
  810b9c:	003f7106 	br	810964 <__umoddi3+0x4c>
  810ba0:	00804034 	movhi	r2,256
  810ba4:	10bfffc4 	addi	r2,r2,-1
  810ba8:	1180af36 	bltu	r2,r6,810e68 <__umoddi3+0x550>
  810bac:	01400404 	movi	r5,16
  810bb0:	2805883a 	mov	r2,r5
  810bb4:	003fbe06 	br	810ab0 <__umoddi3+0x198>
  810bb8:	00804034 	movhi	r2,256
  810bbc:	10bfffc4 	addi	r2,r2,-1
  810bc0:	11c0ac36 	bltu	r2,r7,810e74 <__umoddi3+0x55c>
  810bc4:	01400404 	movi	r5,16
  810bc8:	2805883a 	mov	r2,r5
  810bcc:	003fa406 	br	810a60 <__umoddi3+0x148>
  810bd0:	b409c83a 	sub	r4,r22,r16
  810bd4:	b105803a 	cmpltu	r2,r22,r4
  810bd8:	a187c83a 	sub	r3,r20,r6
  810bdc:	18a9c83a 	sub	r20,r3,r2
  810be0:	202d883a 	mov	r22,r4
  810be4:	003fa906 	br	810a8c <__umoddi3+0x174>
  810be8:	85e0983a 	sll	r16,r16,r23
  810bec:	35c5c83a 	sub	r2,r6,r23
  810bf0:	a0a2d83a 	srl	r17,r20,r2
  810bf4:	802ad43a 	srli	r21,r16,16
  810bf8:	b084d83a 	srl	r2,r22,r2
  810bfc:	a5c6983a 	sll	r3,r20,r23
  810c00:	8809883a 	mov	r4,r17
  810c04:	a80b883a 	mov	r5,r21
  810c08:	1886b03a 	or	r3,r3,r2
  810c0c:	d8c00115 	stw	r3,4(sp)
  810c10:	853fffcc 	andi	r20,r16,65535
  810c14:	08086580 	call	808658 <__udivsi3>
  810c18:	8809883a 	mov	r4,r17
  810c1c:	a80b883a 	mov	r5,r21
  810c20:	a0a3383a 	mul	r17,r20,r2
  810c24:	08086600 	call	808660 <__umodsi3>
  810c28:	d9000117 	ldw	r4,4(sp)
  810c2c:	1004943a 	slli	r2,r2,16
  810c30:	b839883a 	mov	fp,r23
  810c34:	2006d43a 	srli	r3,r4,16
  810c38:	10c4b03a 	or	r2,r2,r3
  810c3c:	1440022e 	bgeu	r2,r17,810c48 <__umoddi3+0x330>
  810c40:	1405883a 	add	r2,r2,r16
  810c44:	1400962e 	bgeu	r2,r16,810ea0 <__umoddi3+0x588>
  810c48:	1463c83a 	sub	r17,r2,r17
  810c4c:	8809883a 	mov	r4,r17
  810c50:	a80b883a 	mov	r5,r21
  810c54:	08086580 	call	808658 <__udivsi3>
  810c58:	8809883a 	mov	r4,r17
  810c5c:	a80b883a 	mov	r5,r21
  810c60:	a0a3383a 	mul	r17,r20,r2
  810c64:	08086600 	call	808660 <__umodsi3>
  810c68:	d9400117 	ldw	r5,4(sp)
  810c6c:	1004943a 	slli	r2,r2,16
  810c70:	28ffffcc 	andi	r3,r5,65535
  810c74:	10c4b03a 	or	r2,r2,r3
  810c78:	1440042e 	bgeu	r2,r17,810c8c <__umoddi3+0x374>
  810c7c:	1405883a 	add	r2,r2,r16
  810c80:	14000236 	bltu	r2,r16,810c8c <__umoddi3+0x374>
  810c84:	1440012e 	bgeu	r2,r17,810c8c <__umoddi3+0x374>
  810c88:	1405883a 	add	r2,r2,r16
  810c8c:	b5ec983a 	sll	r22,r22,r23
  810c90:	1463c83a 	sub	r17,r2,r17
  810c94:	003f4406 	br	8109a8 <__umoddi3+0x90>
  810c98:	3d4fc83a 	sub	r7,r7,r21
  810c9c:	3546983a 	sll	r3,r6,r21
  810ca0:	81c4d83a 	srl	r2,r16,r7
  810ca4:	a1e2d83a 	srl	r17,r20,r7
  810ca8:	a54c983a 	sll	r6,r20,r21
  810cac:	18aeb03a 	or	r23,r3,r2
  810cb0:	b828d43a 	srli	r20,r23,16
  810cb4:	b1c4d83a 	srl	r2,r22,r7
  810cb8:	8809883a 	mov	r4,r17
  810cbc:	a00b883a 	mov	r5,r20
  810cc0:	308cb03a 	or	r6,r6,r2
  810cc4:	d9c00315 	stw	r7,12(sp)
  810cc8:	d9800215 	stw	r6,8(sp)
  810ccc:	08086580 	call	808658 <__udivsi3>
  810cd0:	8809883a 	mov	r4,r17
  810cd4:	a00b883a 	mov	r5,r20
  810cd8:	1039883a 	mov	fp,r2
  810cdc:	08086600 	call	808660 <__umodsi3>
  810ce0:	b8ffffcc 	andi	r3,r23,65535
  810ce4:	d8c00415 	stw	r3,16(sp)
  810ce8:	d9000217 	ldw	r4,8(sp)
  810cec:	d9400417 	ldw	r5,16(sp)
  810cf0:	1004943a 	slli	r2,r2,16
  810cf4:	2006d43a 	srli	r3,r4,16
  810cf8:	8560983a 	sll	r16,r16,r21
  810cfc:	2f23383a 	mul	r17,r5,fp
  810d00:	10c4b03a 	or	r2,r2,r3
  810d04:	dc000015 	stw	r16,0(sp)
  810d08:	b56c983a 	sll	r22,r22,r21
  810d0c:	1440032e 	bgeu	r2,r17,810d1c <__umoddi3+0x404>
  810d10:	15c5883a 	add	r2,r2,r23
  810d14:	e73fffc4 	addi	fp,fp,-1
  810d18:	15c05d2e 	bgeu	r2,r23,810e90 <__umoddi3+0x578>
  810d1c:	1463c83a 	sub	r17,r2,r17
  810d20:	8809883a 	mov	r4,r17
  810d24:	a00b883a 	mov	r5,r20
  810d28:	08086580 	call	808658 <__udivsi3>
  810d2c:	8809883a 	mov	r4,r17
  810d30:	a00b883a 	mov	r5,r20
  810d34:	1021883a 	mov	r16,r2
  810d38:	08086600 	call	808660 <__umodsi3>
  810d3c:	d8c00417 	ldw	r3,16(sp)
  810d40:	d9000217 	ldw	r4,8(sp)
  810d44:	1004943a 	slli	r2,r2,16
  810d48:	1c23383a 	mul	r17,r3,r16
  810d4c:	20ffffcc 	andi	r3,r4,65535
  810d50:	10ceb03a 	or	r7,r2,r3
  810d54:	3c40032e 	bgeu	r7,r17,810d64 <__umoddi3+0x44c>
  810d58:	3dcf883a 	add	r7,r7,r23
  810d5c:	843fffc4 	addi	r16,r16,-1
  810d60:	3dc0472e 	bgeu	r7,r23,810e80 <__umoddi3+0x568>
  810d64:	e004943a 	slli	r2,fp,16
  810d68:	d9400017 	ldw	r5,0(sp)
  810d6c:	3c4fc83a 	sub	r7,r7,r17
  810d70:	8084b03a 	or	r2,r16,r2
  810d74:	28ffffcc 	andi	r3,r5,65535
  810d78:	280cd43a 	srli	r6,r5,16
  810d7c:	100ad43a 	srli	r5,r2,16
  810d80:	10bfffcc 	andi	r2,r2,65535
  810d84:	10d1383a 	mul	r8,r2,r3
  810d88:	28c7383a 	mul	r3,r5,r3
  810d8c:	1185383a 	mul	r2,r2,r6
  810d90:	4008d43a 	srli	r4,r8,16
  810d94:	298b383a 	mul	r5,r5,r6
  810d98:	10c5883a 	add	r2,r2,r3
  810d9c:	2089883a 	add	r4,r4,r2
  810da0:	20c0022e 	bgeu	r4,r3,810dac <__umoddi3+0x494>
  810da4:	00800074 	movhi	r2,1
  810da8:	288b883a 	add	r5,r5,r2
  810dac:	2004d43a 	srli	r2,r4,16
  810db0:	2008943a 	slli	r4,r4,16
  810db4:	40ffffcc 	andi	r3,r8,65535
  810db8:	288b883a 	add	r5,r5,r2
  810dbc:	20c9883a 	add	r4,r4,r3
  810dc0:	39400b36 	bltu	r7,r5,810df0 <__umoddi3+0x4d8>
  810dc4:	39403d26 	beq	r7,r5,810ebc <__umoddi3+0x5a4>
  810dc8:	394bc83a 	sub	r5,r7,r5
  810dcc:	00000f06 	br	810e0c <__umoddi3+0x4f4>
  810dd0:	30c5c83a 	sub	r2,r6,r3
  810dd4:	1839883a 	mov	fp,r3
  810dd8:	b084d83a 	srl	r2,r22,r2
  810ddc:	a0c6983a 	sll	r3,r20,r3
  810de0:	8720983a 	sll	r16,r16,fp
  810de4:	b72c983a 	sll	r22,r22,fp
  810de8:	18a8b03a 	or	r20,r3,r2
  810dec:	003f3a06 	br	810ad8 <__umoddi3+0x1c0>
  810df0:	d8c00017 	ldw	r3,0(sp)
  810df4:	20c5c83a 	sub	r2,r4,r3
  810df8:	2089803a 	cmpltu	r4,r4,r2
  810dfc:	2dc7c83a 	sub	r3,r5,r23
  810e00:	1907c83a 	sub	r3,r3,r4
  810e04:	38cbc83a 	sub	r5,r7,r3
  810e08:	1009883a 	mov	r4,r2
  810e0c:	b105c83a 	sub	r2,r22,r4
  810e10:	b087803a 	cmpltu	r3,r22,r2
  810e14:	28c7c83a 	sub	r3,r5,r3
  810e18:	d9400317 	ldw	r5,12(sp)
  810e1c:	1544d83a 	srl	r2,r2,r21
  810e20:	1948983a 	sll	r4,r3,r5
  810e24:	1d46d83a 	srl	r3,r3,r21
  810e28:	20a4b03a 	or	r18,r4,r2
  810e2c:	9011883a 	mov	r8,r18
  810e30:	1813883a 	mov	r9,r3
  810e34:	003ef606 	br	810a10 <__umoddi3+0xf8>
  810e38:	01400604 	movi	r5,24
  810e3c:	2805883a 	mov	r2,r5
  810e40:	003ecc06 	br	810974 <__umoddi3+0x5c>
  810e44:	01400204 	movi	r5,8
  810e48:	2805883a 	mov	r2,r5
  810e4c:	003ec906 	br	810974 <__umoddi3+0x5c>
  810e50:	01400204 	movi	r5,8
  810e54:	2805883a 	mov	r2,r5
  810e58:	003f0106 	br	810a60 <__umoddi3+0x148>
  810e5c:	01400204 	movi	r5,8
  810e60:	2805883a 	mov	r2,r5
  810e64:	003f1206 	br	810ab0 <__umoddi3+0x198>
  810e68:	01400604 	movi	r5,24
  810e6c:	2805883a 	mov	r2,r5
  810e70:	003f0f06 	br	810ab0 <__umoddi3+0x198>
  810e74:	01400604 	movi	r5,24
  810e78:	2805883a 	mov	r2,r5
  810e7c:	003ef806 	br	810a60 <__umoddi3+0x148>
  810e80:	3c7fb82e 	bgeu	r7,r17,810d64 <__umoddi3+0x44c>
  810e84:	843fffc4 	addi	r16,r16,-1
  810e88:	3dcf883a 	add	r7,r7,r23
  810e8c:	003fb506 	br	810d64 <__umoddi3+0x44c>
  810e90:	147fa22e 	bgeu	r2,r17,810d1c <__umoddi3+0x404>
  810e94:	e73fffc4 	addi	fp,fp,-1
  810e98:	15c5883a 	add	r2,r2,r23
  810e9c:	003f9f06 	br	810d1c <__umoddi3+0x404>
  810ea0:	147f692e 	bgeu	r2,r17,810c48 <__umoddi3+0x330>
  810ea4:	1405883a 	add	r2,r2,r16
  810ea8:	003f6706 	br	810c48 <__umoddi3+0x330>
  810eac:	1405883a 	add	r2,r2,r16
  810eb0:	003f1906 	br	810b18 <__umoddi3+0x200>
  810eb4:	1405883a 	add	r2,r2,r16
  810eb8:	003ec906 	br	8109e0 <__umoddi3+0xc8>
  810ebc:	b13fcc36 	bltu	r22,r4,810df0 <__umoddi3+0x4d8>
  810ec0:	000b883a 	mov	r5,zero
  810ec4:	003fd106 	br	810e0c <__umoddi3+0x4f4>

00810ec8 <__gedf2>:
  810ec8:	deffef04 	addi	sp,sp,-68
  810ecc:	dc400f15 	stw	r17,60(sp)
  810ed0:	dc400404 	addi	r17,sp,16
  810ed4:	2005883a 	mov	r2,r4
  810ed8:	2807883a 	mov	r3,r5
  810edc:	dc000e15 	stw	r16,56(sp)
  810ee0:	d809883a 	mov	r4,sp
  810ee4:	880b883a 	mov	r5,r17
  810ee8:	dc000904 	addi	r16,sp,36
  810eec:	d8c00115 	stw	r3,4(sp)
  810ef0:	d8800015 	stw	r2,0(sp)
  810ef4:	d9800215 	stw	r6,8(sp)
  810ef8:	dfc01015 	stw	ra,64(sp)
  810efc:	d9c00315 	stw	r7,12(sp)
  810f00:	0808cbc0 	call	808cbc <__unpack_d>
  810f04:	d9000204 	addi	r4,sp,8
  810f08:	800b883a 	mov	r5,r16
  810f0c:	0808cbc0 	call	808cbc <__unpack_d>
  810f10:	d8800417 	ldw	r2,16(sp)
  810f14:	00c00044 	movi	r3,1
  810f18:	01bfffc4 	movi	r6,-1
  810f1c:	1880062e 	bgeu	r3,r2,810f38 <__gedf2+0x70>
  810f20:	d8800917 	ldw	r2,36(sp)
  810f24:	8809883a 	mov	r4,r17
  810f28:	800b883a 	mov	r5,r16
  810f2c:	1880022e 	bgeu	r3,r2,810f38 <__gedf2+0x70>
  810f30:	0808df40 	call	808df4 <__fpcmp_parts_d>
  810f34:	100d883a 	mov	r6,r2
  810f38:	3005883a 	mov	r2,r6
  810f3c:	dfc01017 	ldw	ra,64(sp)
  810f40:	dc400f17 	ldw	r17,60(sp)
  810f44:	dc000e17 	ldw	r16,56(sp)
  810f48:	dec01104 	addi	sp,sp,68
  810f4c:	f800283a 	ret

00810f50 <__floatunsidf>:
  810f50:	defff204 	addi	sp,sp,-56
  810f54:	dfc00d15 	stw	ra,52(sp)
  810f58:	ddc00c15 	stw	r23,48(sp)
  810f5c:	dd800b15 	stw	r22,44(sp)
  810f60:	dd400a15 	stw	r21,40(sp)
  810f64:	dd000915 	stw	r20,36(sp)
  810f68:	dcc00815 	stw	r19,32(sp)
  810f6c:	dc800715 	stw	r18,28(sp)
  810f70:	dc400615 	stw	r17,24(sp)
  810f74:	dc000515 	stw	r16,20(sp)
  810f78:	d8000115 	stw	zero,4(sp)
  810f7c:	20000f1e 	bne	r4,zero,810fbc <__floatunsidf+0x6c>
  810f80:	00800084 	movi	r2,2
  810f84:	d8800015 	stw	r2,0(sp)
  810f88:	d809883a 	mov	r4,sp
  810f8c:	08089a80 	call	8089a8 <__pack_d>
  810f90:	dfc00d17 	ldw	ra,52(sp)
  810f94:	ddc00c17 	ldw	r23,48(sp)
  810f98:	dd800b17 	ldw	r22,44(sp)
  810f9c:	dd400a17 	ldw	r21,40(sp)
  810fa0:	dd000917 	ldw	r20,36(sp)
  810fa4:	dcc00817 	ldw	r19,32(sp)
  810fa8:	dc800717 	ldw	r18,28(sp)
  810fac:	dc400617 	ldw	r17,24(sp)
  810fb0:	dc000517 	ldw	r16,20(sp)
  810fb4:	dec00e04 	addi	sp,sp,56
  810fb8:	f800283a 	ret
  810fbc:	008000c4 	movi	r2,3
  810fc0:	00c00f04 	movi	r3,60
  810fc4:	002f883a 	mov	r23,zero
  810fc8:	202d883a 	mov	r22,r4
  810fcc:	d8800015 	stw	r2,0(sp)
  810fd0:	d8c00215 	stw	r3,8(sp)
  810fd4:	d9000315 	stw	r4,12(sp)
  810fd8:	ddc00415 	stw	r23,16(sp)
  810fdc:	08087000 	call	808700 <__clzsi2>
  810fe0:	12400744 	addi	r9,r2,29
  810fe4:	48000b16 	blt	r9,zero,811014 <__floatunsidf+0xc4>
  810fe8:	483fe726 	beq	r9,zero,810f88 <__floatunsidf+0x38>
  810fec:	10bfff44 	addi	r2,r2,-3
  810ff0:	10002e16 	blt	r2,zero,8110ac <__floatunsidf+0x15c>
  810ff4:	b0a2983a 	sll	r17,r22,r2
  810ff8:	0021883a 	mov	r16,zero
  810ffc:	d8800217 	ldw	r2,8(sp)
  811000:	dc400415 	stw	r17,16(sp)
  811004:	dc000315 	stw	r16,12(sp)
  811008:	1245c83a 	sub	r2,r2,r9
  81100c:	d8800215 	stw	r2,8(sp)
  811010:	003fdd06 	br	810f88 <__floatunsidf+0x38>
  811014:	0255c83a 	sub	r10,zero,r9
  811018:	51bff804 	addi	r6,r10,-32
  81101c:	30001b16 	blt	r6,zero,81108c <__floatunsidf+0x13c>
  811020:	b9a8d83a 	srl	r20,r23,r6
  811024:	002b883a 	mov	r21,zero
  811028:	000f883a 	mov	r7,zero
  81102c:	01000044 	movi	r4,1
  811030:	0011883a 	mov	r8,zero
  811034:	30002516 	blt	r6,zero,8110cc <__floatunsidf+0x17c>
  811038:	21a6983a 	sll	r19,r4,r6
  81103c:	0025883a 	mov	r18,zero
  811040:	00bfffc4 	movi	r2,-1
  811044:	9089883a 	add	r4,r18,r2
  811048:	988b883a 	add	r5,r19,r2
  81104c:	248d803a 	cmpltu	r6,r4,r18
  811050:	314b883a 	add	r5,r6,r5
  811054:	b104703a 	and	r2,r22,r4
  811058:	b946703a 	and	r3,r23,r5
  81105c:	10c4b03a 	or	r2,r2,r3
  811060:	10000226 	beq	r2,zero,81106c <__floatunsidf+0x11c>
  811064:	01c00044 	movi	r7,1
  811068:	0011883a 	mov	r8,zero
  81106c:	d9000217 	ldw	r4,8(sp)
  811070:	a1c4b03a 	or	r2,r20,r7
  811074:	aa06b03a 	or	r3,r21,r8
  811078:	2249c83a 	sub	r4,r4,r9
  81107c:	d8c00415 	stw	r3,16(sp)
  811080:	d9000215 	stw	r4,8(sp)
  811084:	d8800315 	stw	r2,12(sp)
  811088:	003fbf06 	br	810f88 <__floatunsidf+0x38>
  81108c:	bdc7883a 	add	r3,r23,r23
  811090:	008007c4 	movi	r2,31
  811094:	1285c83a 	sub	r2,r2,r10
  811098:	1886983a 	sll	r3,r3,r2
  81109c:	b2a8d83a 	srl	r20,r22,r10
  8110a0:	baaad83a 	srl	r21,r23,r10
  8110a4:	1d28b03a 	or	r20,r3,r20
  8110a8:	003fdf06 	br	811028 <__floatunsidf+0xd8>
  8110ac:	b006d07a 	srli	r3,r22,1
  8110b0:	008007c4 	movi	r2,31
  8110b4:	1245c83a 	sub	r2,r2,r9
  8110b8:	1886d83a 	srl	r3,r3,r2
  8110bc:	ba62983a 	sll	r17,r23,r9
  8110c0:	b260983a 	sll	r16,r22,r9
  8110c4:	1c62b03a 	or	r17,r3,r17
  8110c8:	003fcc06 	br	810ffc <__floatunsidf+0xac>
  8110cc:	2006d07a 	srli	r3,r4,1
  8110d0:	008007c4 	movi	r2,31
  8110d4:	1285c83a 	sub	r2,r2,r10
  8110d8:	18a6d83a 	srl	r19,r3,r2
  8110dc:	22a4983a 	sll	r18,r4,r10
  8110e0:	003fd706 	br	811040 <__floatunsidf+0xf0>

008110e4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  8110e4:	defff804 	addi	sp,sp,-32
  8110e8:	dfc00715 	stw	ra,28(sp)
  8110ec:	df000615 	stw	fp,24(sp)
  8110f0:	df000604 	addi	fp,sp,24
  8110f4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  8110f8:	e0bffc17 	ldw	r2,-16(fp)
  8110fc:	1004803a 	cmplt	r2,r2,zero
  811100:	1000081e 	bne	r2,zero,811124 <close+0x40>
  811104:	e0bffc17 	ldw	r2,-16(fp)
  811108:	10800324 	muli	r2,r2,12
  81110c:	1007883a 	mov	r3,r2
  811110:	008020b4 	movhi	r2,130
  811114:	10b2fa04 	addi	r2,r2,-13336
  811118:	1887883a 	add	r3,r3,r2
  81111c:	e0ffff15 	stw	r3,-4(fp)
  811120:	00000106 	br	811128 <close+0x44>
  811124:	e03fff15 	stw	zero,-4(fp)
  811128:	e0bfff17 	ldw	r2,-4(fp)
  81112c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  811130:	e0bffb17 	ldw	r2,-20(fp)
  811134:	1005003a 	cmpeq	r2,r2,zero
  811138:	10001d1e 	bne	r2,zero,8111b0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  81113c:	e0bffb17 	ldw	r2,-20(fp)
  811140:	10800017 	ldw	r2,0(r2)
  811144:	10800417 	ldw	r2,16(r2)
  811148:	1005003a 	cmpeq	r2,r2,zero
  81114c:	1000071e 	bne	r2,zero,81116c <close+0x88>
  811150:	e0bffb17 	ldw	r2,-20(fp)
  811154:	10800017 	ldw	r2,0(r2)
  811158:	10800417 	ldw	r2,16(r2)
  81115c:	e13ffb17 	ldw	r4,-20(fp)
  811160:	103ee83a 	callr	r2
  811164:	e0bffe15 	stw	r2,-8(fp)
  811168:	00000106 	br	811170 <close+0x8c>
  81116c:	e03ffe15 	stw	zero,-8(fp)
  811170:	e0bffe17 	ldw	r2,-8(fp)
  811174:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  811178:	e13ffc17 	ldw	r4,-16(fp)
  81117c:	0811d040 	call	811d04 <alt_release_fd>
    if (rval < 0)
  811180:	e0bffa17 	ldw	r2,-24(fp)
  811184:	1004403a 	cmpge	r2,r2,zero
  811188:	1000071e 	bne	r2,zero,8111a8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  81118c:	08111e00 	call	8111e0 <alt_get_errno>
  811190:	e0fffa17 	ldw	r3,-24(fp)
  811194:	00c7c83a 	sub	r3,zero,r3
  811198:	10c00015 	stw	r3,0(r2)
      return -1;
  81119c:	00bfffc4 	movi	r2,-1
  8111a0:	e0bffd15 	stw	r2,-12(fp)
  8111a4:	00000806 	br	8111c8 <close+0xe4>
    }
    return 0;
  8111a8:	e03ffd15 	stw	zero,-12(fp)
  8111ac:	00000606 	br	8111c8 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8111b0:	08111e00 	call	8111e0 <alt_get_errno>
  8111b4:	1007883a 	mov	r3,r2
  8111b8:	00801444 	movi	r2,81
  8111bc:	18800015 	stw	r2,0(r3)
    return -1;
  8111c0:	00bfffc4 	movi	r2,-1
  8111c4:	e0bffd15 	stw	r2,-12(fp)
  8111c8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  8111cc:	e037883a 	mov	sp,fp
  8111d0:	dfc00117 	ldw	ra,4(sp)
  8111d4:	df000017 	ldw	fp,0(sp)
  8111d8:	dec00204 	addi	sp,sp,8
  8111dc:	f800283a 	ret

008111e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8111e0:	defffd04 	addi	sp,sp,-12
  8111e4:	dfc00215 	stw	ra,8(sp)
  8111e8:	df000115 	stw	fp,4(sp)
  8111ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8111f0:	008020b4 	movhi	r2,130
  8111f4:	10b7d804 	addi	r2,r2,-8352
  8111f8:	10800017 	ldw	r2,0(r2)
  8111fc:	1005003a 	cmpeq	r2,r2,zero
  811200:	1000061e 	bne	r2,zero,81121c <alt_get_errno+0x3c>
  811204:	008020b4 	movhi	r2,130
  811208:	10b7d804 	addi	r2,r2,-8352
  81120c:	10800017 	ldw	r2,0(r2)
  811210:	103ee83a 	callr	r2
  811214:	e0bfff15 	stw	r2,-4(fp)
  811218:	00000306 	br	811228 <alt_get_errno+0x48>
  81121c:	008020b4 	movhi	r2,130
  811220:	10befd04 	addi	r2,r2,-1036
  811224:	e0bfff15 	stw	r2,-4(fp)
  811228:	e0bfff17 	ldw	r2,-4(fp)
}
  81122c:	e037883a 	mov	sp,fp
  811230:	dfc00117 	ldw	ra,4(sp)
  811234:	df000017 	ldw	fp,0(sp)
  811238:	dec00204 	addi	sp,sp,8
  81123c:	f800283a 	ret

00811240 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  811240:	defffc04 	addi	sp,sp,-16
  811244:	df000315 	stw	fp,12(sp)
  811248:	df000304 	addi	fp,sp,12
  81124c:	e13ffd15 	stw	r4,-12(fp)
  811250:	e17ffe15 	stw	r5,-8(fp)
  811254:	e1bfff15 	stw	r6,-4(fp)
  return len;
  811258:	e0bfff17 	ldw	r2,-4(fp)
}
  81125c:	e037883a 	mov	sp,fp
  811260:	df000017 	ldw	fp,0(sp)
  811264:	dec00104 	addi	sp,sp,4
  811268:	f800283a 	ret

0081126c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  81126c:	defff904 	addi	sp,sp,-28
  811270:	dfc00615 	stw	ra,24(sp)
  811274:	df000515 	stw	fp,20(sp)
  811278:	df000504 	addi	fp,sp,20
  81127c:	e13ffc15 	stw	r4,-16(fp)
  811280:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811284:	e0bffc17 	ldw	r2,-16(fp)
  811288:	1004803a 	cmplt	r2,r2,zero
  81128c:	1000081e 	bne	r2,zero,8112b0 <fstat+0x44>
  811290:	e0bffc17 	ldw	r2,-16(fp)
  811294:	10800324 	muli	r2,r2,12
  811298:	1007883a 	mov	r3,r2
  81129c:	008020b4 	movhi	r2,130
  8112a0:	10b2fa04 	addi	r2,r2,-13336
  8112a4:	1887883a 	add	r3,r3,r2
  8112a8:	e0ffff15 	stw	r3,-4(fp)
  8112ac:	00000106 	br	8112b4 <fstat+0x48>
  8112b0:	e03fff15 	stw	zero,-4(fp)
  8112b4:	e0bfff17 	ldw	r2,-4(fp)
  8112b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8112bc:	e0bffb17 	ldw	r2,-20(fp)
  8112c0:	1005003a 	cmpeq	r2,r2,zero
  8112c4:	1000121e 	bne	r2,zero,811310 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8112c8:	e0bffb17 	ldw	r2,-20(fp)
  8112cc:	10800017 	ldw	r2,0(r2)
  8112d0:	10800817 	ldw	r2,32(r2)
  8112d4:	1005003a 	cmpeq	r2,r2,zero
  8112d8:	1000081e 	bne	r2,zero,8112fc <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  8112dc:	e0bffb17 	ldw	r2,-20(fp)
  8112e0:	10800017 	ldw	r2,0(r2)
  8112e4:	10800817 	ldw	r2,32(r2)
  8112e8:	e13ffb17 	ldw	r4,-20(fp)
  8112ec:	e17ffd17 	ldw	r5,-12(fp)
  8112f0:	103ee83a 	callr	r2
  8112f4:	e0bffe15 	stw	r2,-8(fp)
  8112f8:	00000b06 	br	811328 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  8112fc:	e0fffd17 	ldw	r3,-12(fp)
  811300:	00880004 	movi	r2,8192
  811304:	18800115 	stw	r2,4(r3)
      return 0;
  811308:	e03ffe15 	stw	zero,-8(fp)
  81130c:	00000606 	br	811328 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  811310:	08113400 	call	811340 <alt_get_errno>
  811314:	1007883a 	mov	r3,r2
  811318:	00801444 	movi	r2,81
  81131c:	18800015 	stw	r2,0(r3)
    return -1;
  811320:	00bfffc4 	movi	r2,-1
  811324:	e0bffe15 	stw	r2,-8(fp)
  811328:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  81132c:	e037883a 	mov	sp,fp
  811330:	dfc00117 	ldw	ra,4(sp)
  811334:	df000017 	ldw	fp,0(sp)
  811338:	dec00204 	addi	sp,sp,8
  81133c:	f800283a 	ret

00811340 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811340:	defffd04 	addi	sp,sp,-12
  811344:	dfc00215 	stw	ra,8(sp)
  811348:	df000115 	stw	fp,4(sp)
  81134c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811350:	008020b4 	movhi	r2,130
  811354:	10b7d804 	addi	r2,r2,-8352
  811358:	10800017 	ldw	r2,0(r2)
  81135c:	1005003a 	cmpeq	r2,r2,zero
  811360:	1000061e 	bne	r2,zero,81137c <alt_get_errno+0x3c>
  811364:	008020b4 	movhi	r2,130
  811368:	10b7d804 	addi	r2,r2,-8352
  81136c:	10800017 	ldw	r2,0(r2)
  811370:	103ee83a 	callr	r2
  811374:	e0bfff15 	stw	r2,-4(fp)
  811378:	00000306 	br	811388 <alt_get_errno+0x48>
  81137c:	008020b4 	movhi	r2,130
  811380:	10befd04 	addi	r2,r2,-1036
  811384:	e0bfff15 	stw	r2,-4(fp)
  811388:	e0bfff17 	ldw	r2,-4(fp)
}
  81138c:	e037883a 	mov	sp,fp
  811390:	dfc00117 	ldw	ra,4(sp)
  811394:	df000017 	ldw	fp,0(sp)
  811398:	dec00204 	addi	sp,sp,8
  81139c:	f800283a 	ret

008113a0 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
  8113a0:	defff504 	addi	sp,sp,-44
  8113a4:	dfc00a15 	stw	ra,40(sp)
  8113a8:	df000915 	stw	fp,36(sp)
  8113ac:	dc800815 	stw	r18,32(sp)
  8113b0:	dc400715 	stw	r17,28(sp)
  8113b4:	dc000615 	stw	r16,24(sp)
  8113b8:	df000604 	addi	fp,sp,24
  8113bc:	e13ffd15 	stw	r4,-12(fp)
  8113c0:	e17ffe15 	stw	r5,-8(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
  8113c4:	e0bffe17 	ldw	r2,-8(fp)
  8113c8:	e0bffc15 	stw	r2,-16(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8113cc:	008020b4 	movhi	r2,130
  8113d0:	10bf0a04 	addi	r2,r2,-984
  8113d4:	10800017 	ldw	r2,0(r2)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
  8113d8:	e0bffb15 	stw	r2,-20(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8113dc:	008020b4 	movhi	r2,130
  8113e0:	10bf0904 	addi	r2,r2,-988
  8113e4:	10800017 	ldw	r2,0(r2)
  alt_u32 tick_rate = alt_ticks_per_second ();
  8113e8:	e0bffa15 	stw	r2,-24(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
  8113ec:	e0bffa17 	ldw	r2,-24(fp)
  8113f0:	1005003a 	cmpeq	r2,r2,zero
  8113f4:	1000661e 	bne	r2,zero,811590 <gettimeofday+0x1f0>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
  8113f8:	d0a73c17 	ldw	r2,-25360(gp)
  8113fc:	1021883a 	mov	r16,r2
  811400:	e13ffb17 	ldw	r4,-20(fp)
  811404:	e17ffa17 	ldw	r5,-24(fp)
  811408:	08086580 	call	808658 <__udivsi3>
  81140c:	8085883a 	add	r2,r16,r2
  811410:	1007883a 	mov	r3,r2
  811414:	e0bffd17 	ldw	r2,-12(fp)
  811418:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
  81141c:	008020b4 	movhi	r2,130
  811420:	10bf0404 	addi	r2,r2,-1008
  811424:	10800017 	ldw	r2,0(r2)
  811428:	1025883a 	mov	r18,r2
  81142c:	e43ffb17 	ldw	r16,-20(fp)
  811430:	0023883a 	mov	r17,zero
  811434:	010003f4 	movhi	r4,15
  811438:	21109004 	addi	r4,r4,16960
  81143c:	e17ffa17 	ldw	r5,-24(fp)
  811440:	08086580 	call	808658 <__udivsi3>
  811444:	1009883a 	mov	r4,r2
  811448:	2005883a 	mov	r2,r4
  81144c:	0007883a 	mov	r3,zero
  811450:	8009883a 	mov	r4,r16
  811454:	880b883a 	mov	r5,r17
  811458:	100d883a 	mov	r6,r2
  81145c:	180f883a 	mov	r7,r3
  811460:	08086680 	call	808668 <__muldi3>
  811464:	1009883a 	mov	r4,r2
  811468:	180b883a 	mov	r5,r3
  81146c:	2005883a 	mov	r2,r4
  811470:	2807883a 	mov	r3,r5
  811474:	1009883a 	mov	r4,r2
  811478:	180b883a 	mov	r5,r3
  81147c:	018003f4 	movhi	r6,15
  811480:	31909004 	addi	r6,r6,16960
  811484:	000f883a 	mov	r7,zero
  811488:	08109180 	call	810918 <__umoddi3>
  81148c:	1009883a 	mov	r4,r2
  811490:	180b883a 	mov	r5,r3
  811494:	2005883a 	mov	r2,r4
  811498:	2807883a 	mov	r3,r5
  81149c:	9085883a 	add	r2,r18,r2
  8114a0:	1007883a 	mov	r3,r2
  8114a4:	e0bffd17 	ldw	r2,-12(fp)
  8114a8:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
  8114ac:	00001506 	br	811504 <gettimeofday+0x164>
      if (ptimeval->tv_sec <= 0)
  8114b0:	e0bffd17 	ldw	r2,-12(fp)
  8114b4:	10800017 	ldw	r2,0(r2)
  8114b8:	10800048 	cmpgei	r2,r2,1
  8114bc:	1000051e 	bne	r2,zero,8114d4 <gettimeofday+0x134>
      {
          ptimeval->tv_sec = 0;
  8114c0:	e0bffd17 	ldw	r2,-12(fp)
  8114c4:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
  8114c8:	e0bffd17 	ldw	r2,-12(fp)
  8114cc:	10000115 	stw	zero,4(r2)
          break;
  8114d0:	00001d06 	br	811548 <gettimeofday+0x1a8>
      }
      else
      {
          ptimeval->tv_sec--;
  8114d4:	e0bffd17 	ldw	r2,-12(fp)
  8114d8:	10800017 	ldw	r2,0(r2)
  8114dc:	10ffffc4 	addi	r3,r2,-1
  8114e0:	e0bffd17 	ldw	r2,-12(fp)
  8114e4:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
  8114e8:	e0bffd17 	ldw	r2,-12(fp)
  8114ec:	10c00117 	ldw	r3,4(r2)
  8114f0:	008003f4 	movhi	r2,15
  8114f4:	10909004 	addi	r2,r2,16960
  8114f8:	1887883a 	add	r3,r3,r2
  8114fc:	e0bffd17 	ldw	r2,-12(fp)
  811500:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
  811504:	e0bffd17 	ldw	r2,-12(fp)
  811508:	10800117 	ldw	r2,4(r2)
  81150c:	1004803a 	cmplt	r2,r2,zero
  811510:	103fe71e 	bne	r2,zero,8114b0 <gettimeofday+0x110>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
  811514:	00000c06 	br	811548 <gettimeofday+0x1a8>
      ptimeval->tv_sec++;
  811518:	e0bffd17 	ldw	r2,-12(fp)
  81151c:	10800017 	ldw	r2,0(r2)
  811520:	10c00044 	addi	r3,r2,1
  811524:	e0bffd17 	ldw	r2,-12(fp)
  811528:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
  81152c:	e0bffd17 	ldw	r2,-12(fp)
  811530:	10c00117 	ldw	r3,4(r2)
  811534:	00bffc74 	movhi	r2,65521
  811538:	10af7004 	addi	r2,r2,-16960
  81153c:	1887883a 	add	r3,r3,r2
  811540:	e0bffd17 	ldw	r2,-12(fp)
  811544:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
  811548:	e0bffd17 	ldw	r2,-12(fp)
  81154c:	10c00117 	ldw	r3,4(r2)
  811550:	008003f4 	movhi	r2,15
  811554:	10908fc4 	addi	r2,r2,16959
  811558:	10ffef16 	blt	r2,r3,811518 <gettimeofday+0x178>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
  81155c:	e0bffc17 	ldw	r2,-16(fp)
  811560:	1005003a 	cmpeq	r2,r2,zero
  811564:	1000081e 	bne	r2,zero,811588 <gettimeofday+0x1e8>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
  811568:	d0e73a17 	ldw	r3,-25368(gp)
  81156c:	e0bffc17 	ldw	r2,-16(fp)
  811570:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
  811574:	008020b4 	movhi	r2,130
  811578:	10bf0204 	addi	r2,r2,-1016
  81157c:	10c00017 	ldw	r3,0(r2)
  811580:	e0bffc17 	ldw	r2,-16(fp)
  811584:	10c00115 	stw	r3,4(r2)
    }

    return 0;
  811588:	e03fff15 	stw	zero,-4(fp)
  81158c:	00000206 	br	811598 <gettimeofday+0x1f8>
  }

  return -ENOTSUP;
  811590:	00bfde84 	movi	r2,-134
  811594:	e0bfff15 	stw	r2,-4(fp)
  811598:	e0bfff17 	ldw	r2,-4(fp)
}
  81159c:	e037883a 	mov	sp,fp
  8115a0:	dfc00417 	ldw	ra,16(sp)
  8115a4:	df000317 	ldw	fp,12(sp)
  8115a8:	dc800217 	ldw	r18,8(sp)
  8115ac:	dc400117 	ldw	r17,4(sp)
  8115b0:	dc000017 	ldw	r16,0(sp)
  8115b4:	dec00504 	addi	sp,sp,20
  8115b8:	f800283a 	ret

008115bc <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  8115bc:	deffef04 	addi	sp,sp,-68
  8115c0:	df001015 	stw	fp,64(sp)
  8115c4:	df001004 	addi	fp,sp,64
  8115c8:	e13ffc15 	stw	r4,-16(fp)
  8115cc:	e17ffd15 	stw	r5,-12(fp)
  8115d0:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  8115d4:	00bffa84 	movi	r2,-22
  8115d8:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8115dc:	e0bffc17 	ldw	r2,-16(fp)
  8115e0:	10800828 	cmpgeui	r2,r2,32
  8115e4:	1000601e 	bne	r2,zero,811768 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8115e8:	0005303a 	rdctl	r2,status
  8115ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8115f0:	e0fff917 	ldw	r3,-28(fp)
  8115f4:	00bfff84 	movi	r2,-2
  8115f8:	1884703a 	and	r2,r3,r2
  8115fc:	1001703a 	wrctl	status,r2
  
  return context;
  811600:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  811604:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  811608:	e0bffc17 	ldw	r2,-16(fp)
  81160c:	00c020b4 	movhi	r3,130
  811610:	18cb4804 	addi	r3,r3,11552
  811614:	100490fa 	slli	r2,r2,3
  811618:	10c7883a 	add	r3,r2,r3
  81161c:	e0bffe17 	ldw	r2,-8(fp)
  811620:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  811624:	e0bffc17 	ldw	r2,-16(fp)
  811628:	00c020b4 	movhi	r3,130
  81162c:	18cb4804 	addi	r3,r3,11552
  811630:	100490fa 	slli	r2,r2,3
  811634:	10c5883a 	add	r2,r2,r3
  811638:	10c00104 	addi	r3,r2,4
  81163c:	e0bffd17 	ldw	r2,-12(fp)
  811640:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  811644:	e0bffe17 	ldw	r2,-8(fp)
  811648:	1005003a 	cmpeq	r2,r2,zero
  81164c:	1000201e 	bne	r2,zero,8116d0 <alt_irq_register+0x114>
  811650:	e0bffc17 	ldw	r2,-16(fp)
  811654:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811658:	0005303a 	rdctl	r2,status
  81165c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811660:	e0fff617 	ldw	r3,-40(fp)
  811664:	00bfff84 	movi	r2,-2
  811668:	1884703a 	and	r2,r3,r2
  81166c:	1001703a 	wrctl	status,r2
  
  return context;
  811670:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  811674:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  811678:	e0fff717 	ldw	r3,-36(fp)
  81167c:	00800044 	movi	r2,1
  811680:	10c4983a 	sll	r2,r2,r3
  811684:	1007883a 	mov	r3,r2
  811688:	008020b4 	movhi	r2,130
  81168c:	10bf0504 	addi	r2,r2,-1004
  811690:	10800017 	ldw	r2,0(r2)
  811694:	1886b03a 	or	r3,r3,r2
  811698:	008020b4 	movhi	r2,130
  81169c:	10bf0504 	addi	r2,r2,-1004
  8116a0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8116a4:	008020b4 	movhi	r2,130
  8116a8:	10bf0504 	addi	r2,r2,-1004
  8116ac:	10800017 	ldw	r2,0(r2)
  8116b0:	100170fa 	wrctl	ienable,r2
  8116b4:	e0bff817 	ldw	r2,-32(fp)
  8116b8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8116bc:	e0bff517 	ldw	r2,-44(fp)
  8116c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8116c4:	0005883a 	mov	r2,zero
  8116c8:	e0bfff15 	stw	r2,-4(fp)
  8116cc:	00002006 	br	811750 <alt_irq_register+0x194>
  8116d0:	e0bffc17 	ldw	r2,-16(fp)
  8116d4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8116d8:	0005303a 	rdctl	r2,status
  8116dc:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8116e0:	e0fff217 	ldw	r3,-56(fp)
  8116e4:	00bfff84 	movi	r2,-2
  8116e8:	1884703a 	and	r2,r3,r2
  8116ec:	1001703a 	wrctl	status,r2
  
  return context;
  8116f0:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8116f4:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  8116f8:	e0fff317 	ldw	r3,-52(fp)
  8116fc:	00800044 	movi	r2,1
  811700:	10c4983a 	sll	r2,r2,r3
  811704:	0084303a 	nor	r2,zero,r2
  811708:	1007883a 	mov	r3,r2
  81170c:	008020b4 	movhi	r2,130
  811710:	10bf0504 	addi	r2,r2,-1004
  811714:	10800017 	ldw	r2,0(r2)
  811718:	1886703a 	and	r3,r3,r2
  81171c:	008020b4 	movhi	r2,130
  811720:	10bf0504 	addi	r2,r2,-1004
  811724:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  811728:	008020b4 	movhi	r2,130
  81172c:	10bf0504 	addi	r2,r2,-1004
  811730:	10800017 	ldw	r2,0(r2)
  811734:	100170fa 	wrctl	ienable,r2
  811738:	e0bff417 	ldw	r2,-48(fp)
  81173c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811740:	e0bff117 	ldw	r2,-60(fp)
  811744:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  811748:	0005883a 	mov	r2,zero
  81174c:	e0bfff15 	stw	r2,-4(fp)
  811750:	e0bfff17 	ldw	r2,-4(fp)
  811754:	e0bffb15 	stw	r2,-20(fp)
  811758:	e0bffa17 	ldw	r2,-24(fp)
  81175c:	e0bff015 	stw	r2,-64(fp)
  811760:	e0bff017 	ldw	r2,-64(fp)
  811764:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  811768:	e0bffb17 	ldw	r2,-20(fp)
}
  81176c:	e037883a 	mov	sp,fp
  811770:	df000017 	ldw	fp,0(sp)
  811774:	dec00104 	addi	sp,sp,4
  811778:	f800283a 	ret

0081177c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  81177c:	deffeb04 	addi	sp,sp,-84
  811780:	dfc01415 	stw	ra,80(sp)
  811784:	df001315 	stw	fp,76(sp)
  811788:	df001304 	addi	fp,sp,76
  81178c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811790:	e0bffd17 	ldw	r2,-12(fp)
  811794:	1004803a 	cmplt	r2,r2,zero
  811798:	1000081e 	bne	r2,zero,8117bc <isatty+0x40>
  81179c:	e0bffd17 	ldw	r2,-12(fp)
  8117a0:	10800324 	muli	r2,r2,12
  8117a4:	1007883a 	mov	r3,r2
  8117a8:	008020b4 	movhi	r2,130
  8117ac:	10b2fa04 	addi	r2,r2,-13336
  8117b0:	1887883a 	add	r3,r3,r2
  8117b4:	e0ffff15 	stw	r3,-4(fp)
  8117b8:	00000106 	br	8117c0 <isatty+0x44>
  8117bc:	e03fff15 	stw	zero,-4(fp)
  8117c0:	e0bfff17 	ldw	r2,-4(fp)
  8117c4:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  8117c8:	e0bfed17 	ldw	r2,-76(fp)
  8117cc:	1005003a 	cmpeq	r2,r2,zero
  8117d0:	10000f1e 	bne	r2,zero,811810 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  8117d4:	e0bfed17 	ldw	r2,-76(fp)
  8117d8:	10800017 	ldw	r2,0(r2)
  8117dc:	10800817 	ldw	r2,32(r2)
  8117e0:	1004c03a 	cmpne	r2,r2,zero
  8117e4:	1000031e 	bne	r2,zero,8117f4 <isatty+0x78>
    {
      return 1;
  8117e8:	00800044 	movi	r2,1
  8117ec:	e0bffe15 	stw	r2,-8(fp)
  8117f0:	00000c06 	br	811824 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  8117f4:	e17fee04 	addi	r5,fp,-72
  8117f8:	e13ffd17 	ldw	r4,-12(fp)
  8117fc:	081126c0 	call	81126c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  811800:	e0bfef17 	ldw	r2,-68(fp)
  811804:	10880020 	cmpeqi	r2,r2,8192
  811808:	e0bffe15 	stw	r2,-8(fp)
  81180c:	00000506 	br	811824 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  811810:	081183c0 	call	81183c <alt_get_errno>
  811814:	1007883a 	mov	r3,r2
  811818:	00801444 	movi	r2,81
  81181c:	18800015 	stw	r2,0(r3)
    return 0;
  811820:	e03ffe15 	stw	zero,-8(fp)
  811824:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  811828:	e037883a 	mov	sp,fp
  81182c:	dfc00117 	ldw	ra,4(sp)
  811830:	df000017 	ldw	fp,0(sp)
  811834:	dec00204 	addi	sp,sp,8
  811838:	f800283a 	ret

0081183c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81183c:	defffd04 	addi	sp,sp,-12
  811840:	dfc00215 	stw	ra,8(sp)
  811844:	df000115 	stw	fp,4(sp)
  811848:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81184c:	008020b4 	movhi	r2,130
  811850:	10b7d804 	addi	r2,r2,-8352
  811854:	10800017 	ldw	r2,0(r2)
  811858:	1005003a 	cmpeq	r2,r2,zero
  81185c:	1000061e 	bne	r2,zero,811878 <alt_get_errno+0x3c>
  811860:	008020b4 	movhi	r2,130
  811864:	10b7d804 	addi	r2,r2,-8352
  811868:	10800017 	ldw	r2,0(r2)
  81186c:	103ee83a 	callr	r2
  811870:	e0bfff15 	stw	r2,-4(fp)
  811874:	00000306 	br	811884 <alt_get_errno+0x48>
  811878:	008020b4 	movhi	r2,130
  81187c:	10befd04 	addi	r2,r2,-1036
  811880:	e0bfff15 	stw	r2,-4(fp)
  811884:	e0bfff17 	ldw	r2,-4(fp)
}
  811888:	e037883a 	mov	sp,fp
  81188c:	dfc00117 	ldw	ra,4(sp)
  811890:	df000017 	ldw	fp,0(sp)
  811894:	dec00204 	addi	sp,sp,8
  811898:	f800283a 	ret

0081189c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  81189c:	defffe04 	addi	sp,sp,-8
  8118a0:	dfc00115 	stw	ra,4(sp)
  8118a4:	df000015 	stw	fp,0(sp)
  8118a8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8118ac:	010020b4 	movhi	r4,130
  8118b0:	2137dd04 	addi	r4,r4,-8332
  8118b4:	014020b4 	movhi	r5,130
  8118b8:	2970eb04 	addi	r5,r5,-15444
  8118bc:	018020b4 	movhi	r6,130
  8118c0:	31b7dd04 	addi	r6,r6,-8332
  8118c4:	081191c0 	call	81191c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8118c8:	01002034 	movhi	r4,128
  8118cc:	21000804 	addi	r4,r4,32
  8118d0:	01402034 	movhi	r5,128
  8118d4:	29400804 	addi	r5,r5,32
  8118d8:	01802034 	movhi	r6,128
  8118dc:	31806e04 	addi	r6,r6,440
  8118e0:	081191c0 	call	81191c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8118e4:	010020b4 	movhi	r4,130
  8118e8:	212d7604 	addi	r4,r4,-18984
  8118ec:	014020b4 	movhi	r5,130
  8118f0:	296d7604 	addi	r5,r5,-18984
  8118f4:	018020b4 	movhi	r6,130
  8118f8:	31b0eb04 	addi	r6,r6,-15444
  8118fc:	081191c0 	call	81191c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  811900:	081a7f40 	call	81a7f4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  811904:	081aaa80 	call	81aaa8 <alt_icache_flush_all>
}
  811908:	e037883a 	mov	sp,fp
  81190c:	dfc00117 	ldw	ra,4(sp)
  811910:	df000017 	ldw	fp,0(sp)
  811914:	dec00204 	addi	sp,sp,8
  811918:	f800283a 	ret

0081191c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  81191c:	defffc04 	addi	sp,sp,-16
  811920:	df000315 	stw	fp,12(sp)
  811924:	df000304 	addi	fp,sp,12
  811928:	e13ffd15 	stw	r4,-12(fp)
  81192c:	e17ffe15 	stw	r5,-8(fp)
  811930:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  811934:	e0fffe17 	ldw	r3,-8(fp)
  811938:	e0bffd17 	ldw	r2,-12(fp)
  81193c:	18800e26 	beq	r3,r2,811978 <alt_load_section+0x5c>
  {
    while( to != end )
  811940:	00000a06 	br	81196c <alt_load_section+0x50>
    {
      *to++ = *from++;
  811944:	e0bffd17 	ldw	r2,-12(fp)
  811948:	10c00017 	ldw	r3,0(r2)
  81194c:	e0bffe17 	ldw	r2,-8(fp)
  811950:	10c00015 	stw	r3,0(r2)
  811954:	e0bffe17 	ldw	r2,-8(fp)
  811958:	10800104 	addi	r2,r2,4
  81195c:	e0bffe15 	stw	r2,-8(fp)
  811960:	e0bffd17 	ldw	r2,-12(fp)
  811964:	10800104 	addi	r2,r2,4
  811968:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  81196c:	e0fffe17 	ldw	r3,-8(fp)
  811970:	e0bfff17 	ldw	r2,-4(fp)
  811974:	18bff31e 	bne	r3,r2,811944 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  811978:	e037883a 	mov	sp,fp
  81197c:	df000017 	ldw	fp,0(sp)
  811980:	dec00104 	addi	sp,sp,4
  811984:	f800283a 	ret

00811988 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  811988:	defff804 	addi	sp,sp,-32
  81198c:	dfc00715 	stw	ra,28(sp)
  811990:	df000615 	stw	fp,24(sp)
  811994:	df000604 	addi	fp,sp,24
  811998:	e13ffc15 	stw	r4,-16(fp)
  81199c:	e17ffd15 	stw	r5,-12(fp)
  8119a0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  8119a4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8119a8:	e0bffc17 	ldw	r2,-16(fp)
  8119ac:	1004803a 	cmplt	r2,r2,zero
  8119b0:	1000081e 	bne	r2,zero,8119d4 <lseek+0x4c>
  8119b4:	e0bffc17 	ldw	r2,-16(fp)
  8119b8:	10800324 	muli	r2,r2,12
  8119bc:	1007883a 	mov	r3,r2
  8119c0:	008020b4 	movhi	r2,130
  8119c4:	10b2fa04 	addi	r2,r2,-13336
  8119c8:	1887883a 	add	r3,r3,r2
  8119cc:	e0ffff15 	stw	r3,-4(fp)
  8119d0:	00000106 	br	8119d8 <lseek+0x50>
  8119d4:	e03fff15 	stw	zero,-4(fp)
  8119d8:	e0bfff17 	ldw	r2,-4(fp)
  8119dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  8119e0:	e0bffb17 	ldw	r2,-20(fp)
  8119e4:	1005003a 	cmpeq	r2,r2,zero
  8119e8:	1000111e 	bne	r2,zero,811a30 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  8119ec:	e0bffb17 	ldw	r2,-20(fp)
  8119f0:	10800017 	ldw	r2,0(r2)
  8119f4:	10800717 	ldw	r2,28(r2)
  8119f8:	1005003a 	cmpeq	r2,r2,zero
  8119fc:	1000091e 	bne	r2,zero,811a24 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  811a00:	e0bffb17 	ldw	r2,-20(fp)
  811a04:	10800017 	ldw	r2,0(r2)
  811a08:	10800717 	ldw	r2,28(r2)
  811a0c:	e13ffb17 	ldw	r4,-20(fp)
  811a10:	e17ffd17 	ldw	r5,-12(fp)
  811a14:	e1bffe17 	ldw	r6,-8(fp)
  811a18:	103ee83a 	callr	r2
  811a1c:	e0bffa15 	stw	r2,-24(fp)
  811a20:	00000506 	br	811a38 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  811a24:	00bfde84 	movi	r2,-134
  811a28:	e0bffa15 	stw	r2,-24(fp)
  811a2c:	00000206 	br	811a38 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  811a30:	00bfebc4 	movi	r2,-81
  811a34:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  811a38:	e0bffa17 	ldw	r2,-24(fp)
  811a3c:	1004403a 	cmpge	r2,r2,zero
  811a40:	1000071e 	bne	r2,zero,811a60 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  811a44:	0811a780 	call	811a78 <alt_get_errno>
  811a48:	1007883a 	mov	r3,r2
  811a4c:	e0bffa17 	ldw	r2,-24(fp)
  811a50:	0085c83a 	sub	r2,zero,r2
  811a54:	18800015 	stw	r2,0(r3)
    rc = -1;
  811a58:	00bfffc4 	movi	r2,-1
  811a5c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  811a60:	e0bffa17 	ldw	r2,-24(fp)
}
  811a64:	e037883a 	mov	sp,fp
  811a68:	dfc00117 	ldw	ra,4(sp)
  811a6c:	df000017 	ldw	fp,0(sp)
  811a70:	dec00204 	addi	sp,sp,8
  811a74:	f800283a 	ret

00811a78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811a78:	defffd04 	addi	sp,sp,-12
  811a7c:	dfc00215 	stw	ra,8(sp)
  811a80:	df000115 	stw	fp,4(sp)
  811a84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811a88:	008020b4 	movhi	r2,130
  811a8c:	10b7d804 	addi	r2,r2,-8352
  811a90:	10800017 	ldw	r2,0(r2)
  811a94:	1005003a 	cmpeq	r2,r2,zero
  811a98:	1000061e 	bne	r2,zero,811ab4 <alt_get_errno+0x3c>
  811a9c:	008020b4 	movhi	r2,130
  811aa0:	10b7d804 	addi	r2,r2,-8352
  811aa4:	10800017 	ldw	r2,0(r2)
  811aa8:	103ee83a 	callr	r2
  811aac:	e0bfff15 	stw	r2,-4(fp)
  811ab0:	00000306 	br	811ac0 <alt_get_errno+0x48>
  811ab4:	008020b4 	movhi	r2,130
  811ab8:	10befd04 	addi	r2,r2,-1036
  811abc:	e0bfff15 	stw	r2,-4(fp)
  811ac0:	e0bfff17 	ldw	r2,-4(fp)
}
  811ac4:	e037883a 	mov	sp,fp
  811ac8:	dfc00117 	ldw	ra,4(sp)
  811acc:	df000017 	ldw	fp,0(sp)
  811ad0:	dec00204 	addi	sp,sp,8
  811ad4:	f800283a 	ret

00811ad8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  811ad8:	defffd04 	addi	sp,sp,-12
  811adc:	dfc00215 	stw	ra,8(sp)
  811ae0:	df000115 	stw	fp,4(sp)
  811ae4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  811ae8:	0009883a 	mov	r4,zero
  811aec:	08121740 	call	812174 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  811af0:	08121a80 	call	8121a8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  811af4:	010020b4 	movhi	r4,130
  811af8:	2130ac04 	addi	r4,r4,-15696
  811afc:	014020b4 	movhi	r5,130
  811b00:	2970ac04 	addi	r5,r5,-15696
  811b04:	018020b4 	movhi	r6,130
  811b08:	31b0ac04 	addi	r6,r6,-15696
  811b0c:	081ab9c0 	call	81ab9c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  811b10:	081a94c0 	call	81a94c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  811b14:	010020b4 	movhi	r4,130
  811b18:	212a6c04 	addi	r4,r4,-22096
  811b1c:	081b1600 	call	81b160 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  811b20:	d1273f17 	ldw	r4,-25348(gp)
  811b24:	d1674017 	ldw	r5,-25344(gp)
  811b28:	d1a74117 	ldw	r6,-25340(gp)
  811b2c:	0802d940 	call	802d94 <main>
  811b30:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  811b34:	01000044 	movi	r4,1
  811b38:	08110e40 	call	8110e4 <close>
  exit (result);
  811b3c:	e13fff17 	ldw	r4,-4(fp)
  811b40:	081b1740 	call	81b174 <exit>

00811b44 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  811b44:	defffe04 	addi	sp,sp,-8
  811b48:	df000115 	stw	fp,4(sp)
  811b4c:	df000104 	addi	fp,sp,4
  811b50:	e13fff15 	stw	r4,-4(fp)
}
  811b54:	e037883a 	mov	sp,fp
  811b58:	df000017 	ldw	fp,0(sp)
  811b5c:	dec00104 	addi	sp,sp,4
  811b60:	f800283a 	ret

00811b64 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  811b64:	defffe04 	addi	sp,sp,-8
  811b68:	df000115 	stw	fp,4(sp)
  811b6c:	df000104 	addi	fp,sp,4
  811b70:	e13fff15 	stw	r4,-4(fp)
}
  811b74:	e037883a 	mov	sp,fp
  811b78:	df000017 	ldw	fp,0(sp)
  811b7c:	dec00104 	addi	sp,sp,4
  811b80:	f800283a 	ret

00811b84 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  811b84:	defff704 	addi	sp,sp,-36
  811b88:	dfc00815 	stw	ra,32(sp)
  811b8c:	df000715 	stw	fp,28(sp)
  811b90:	df000704 	addi	fp,sp,28
  811b94:	e13ffb15 	stw	r4,-20(fp)
  811b98:	e17ffc15 	stw	r5,-16(fp)
  811b9c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811ba0:	e0bffb17 	ldw	r2,-20(fp)
  811ba4:	1004803a 	cmplt	r2,r2,zero
  811ba8:	1000081e 	bne	r2,zero,811bcc <read+0x48>
  811bac:	e0bffb17 	ldw	r2,-20(fp)
  811bb0:	10800324 	muli	r2,r2,12
  811bb4:	1007883a 	mov	r3,r2
  811bb8:	008020b4 	movhi	r2,130
  811bbc:	10b2fa04 	addi	r2,r2,-13336
  811bc0:	1887883a 	add	r3,r3,r2
  811bc4:	e0ffff15 	stw	r3,-4(fp)
  811bc8:	00000106 	br	811bd0 <read+0x4c>
  811bcc:	e03fff15 	stw	zero,-4(fp)
  811bd0:	e0bfff17 	ldw	r2,-4(fp)
  811bd4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  811bd8:	e0bffa17 	ldw	r2,-24(fp)
  811bdc:	1005003a 	cmpeq	r2,r2,zero
  811be0:	1000241e 	bne	r2,zero,811c74 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  811be4:	e0bffa17 	ldw	r2,-24(fp)
  811be8:	10800217 	ldw	r2,8(r2)
  811bec:	108000cc 	andi	r2,r2,3
  811bf0:	10800060 	cmpeqi	r2,r2,1
  811bf4:	10001a1e 	bne	r2,zero,811c60 <read+0xdc>
  811bf8:	e0bffa17 	ldw	r2,-24(fp)
  811bfc:	10800017 	ldw	r2,0(r2)
  811c00:	10800517 	ldw	r2,20(r2)
  811c04:	1005003a 	cmpeq	r2,r2,zero
  811c08:	1000151e 	bne	r2,zero,811c60 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  811c0c:	e0bffa17 	ldw	r2,-24(fp)
  811c10:	10800017 	ldw	r2,0(r2)
  811c14:	10800517 	ldw	r2,20(r2)
  811c18:	e17ffc17 	ldw	r5,-16(fp)
  811c1c:	e1bffd17 	ldw	r6,-12(fp)
  811c20:	e13ffa17 	ldw	r4,-24(fp)
  811c24:	103ee83a 	callr	r2
  811c28:	e0bff915 	stw	r2,-28(fp)
  811c2c:	e0bff917 	ldw	r2,-28(fp)
  811c30:	1004403a 	cmpge	r2,r2,zero
  811c34:	1000071e 	bne	r2,zero,811c54 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  811c38:	0811ca40 	call	811ca4 <alt_get_errno>
  811c3c:	e0fff917 	ldw	r3,-28(fp)
  811c40:	00c7c83a 	sub	r3,zero,r3
  811c44:	10c00015 	stw	r3,0(r2)
          return -1;
  811c48:	00bfffc4 	movi	r2,-1
  811c4c:	e0bffe15 	stw	r2,-8(fp)
  811c50:	00000e06 	br	811c8c <read+0x108>
        }
        return rval;
  811c54:	e0bff917 	ldw	r2,-28(fp)
  811c58:	e0bffe15 	stw	r2,-8(fp)
  811c5c:	00000b06 	br	811c8c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  811c60:	0811ca40 	call	811ca4 <alt_get_errno>
  811c64:	1007883a 	mov	r3,r2
  811c68:	00800344 	movi	r2,13
  811c6c:	18800015 	stw	r2,0(r3)
  811c70:	00000406 	br	811c84 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  811c74:	0811ca40 	call	811ca4 <alt_get_errno>
  811c78:	1007883a 	mov	r3,r2
  811c7c:	00801444 	movi	r2,81
  811c80:	18800015 	stw	r2,0(r3)
  }
  return -1;
  811c84:	00bfffc4 	movi	r2,-1
  811c88:	e0bffe15 	stw	r2,-8(fp)
  811c8c:	e0bffe17 	ldw	r2,-8(fp)
}
  811c90:	e037883a 	mov	sp,fp
  811c94:	dfc00117 	ldw	ra,4(sp)
  811c98:	df000017 	ldw	fp,0(sp)
  811c9c:	dec00204 	addi	sp,sp,8
  811ca0:	f800283a 	ret

00811ca4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811ca4:	defffd04 	addi	sp,sp,-12
  811ca8:	dfc00215 	stw	ra,8(sp)
  811cac:	df000115 	stw	fp,4(sp)
  811cb0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811cb4:	008020b4 	movhi	r2,130
  811cb8:	10b7d804 	addi	r2,r2,-8352
  811cbc:	10800017 	ldw	r2,0(r2)
  811cc0:	1005003a 	cmpeq	r2,r2,zero
  811cc4:	1000061e 	bne	r2,zero,811ce0 <alt_get_errno+0x3c>
  811cc8:	008020b4 	movhi	r2,130
  811ccc:	10b7d804 	addi	r2,r2,-8352
  811cd0:	10800017 	ldw	r2,0(r2)
  811cd4:	103ee83a 	callr	r2
  811cd8:	e0bfff15 	stw	r2,-4(fp)
  811cdc:	00000306 	br	811cec <alt_get_errno+0x48>
  811ce0:	008020b4 	movhi	r2,130
  811ce4:	10befd04 	addi	r2,r2,-1036
  811ce8:	e0bfff15 	stw	r2,-4(fp)
  811cec:	e0bfff17 	ldw	r2,-4(fp)
}
  811cf0:	e037883a 	mov	sp,fp
  811cf4:	dfc00117 	ldw	ra,4(sp)
  811cf8:	df000017 	ldw	fp,0(sp)
  811cfc:	dec00204 	addi	sp,sp,8
  811d00:	f800283a 	ret

00811d04 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  811d04:	defffe04 	addi	sp,sp,-8
  811d08:	df000115 	stw	fp,4(sp)
  811d0c:	df000104 	addi	fp,sp,4
  811d10:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  811d14:	e0bfff17 	ldw	r2,-4(fp)
  811d18:	108000d0 	cmplti	r2,r2,3
  811d1c:	10000d1e 	bne	r2,zero,811d54 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  811d20:	e0bfff17 	ldw	r2,-4(fp)
  811d24:	00c020b4 	movhi	r3,130
  811d28:	18f2fa04 	addi	r3,r3,-13336
  811d2c:	10800324 	muli	r2,r2,12
  811d30:	10c5883a 	add	r2,r2,r3
  811d34:	10800204 	addi	r2,r2,8
  811d38:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  811d3c:	e0bfff17 	ldw	r2,-4(fp)
  811d40:	00c020b4 	movhi	r3,130
  811d44:	18f2fa04 	addi	r3,r3,-13336
  811d48:	10800324 	muli	r2,r2,12
  811d4c:	10c5883a 	add	r2,r2,r3
  811d50:	10000015 	stw	zero,0(r2)
  }
}
  811d54:	e037883a 	mov	sp,fp
  811d58:	df000017 	ldw	fp,0(sp)
  811d5c:	dec00104 	addi	sp,sp,4
  811d60:	f800283a 	ret

00811d64 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  811d64:	defff804 	addi	sp,sp,-32
  811d68:	df000715 	stw	fp,28(sp)
  811d6c:	df000704 	addi	fp,sp,28
  811d70:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811d74:	0005303a 	rdctl	r2,status
  811d78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811d7c:	e0fffb17 	ldw	r3,-20(fp)
  811d80:	00bfff84 	movi	r2,-2
  811d84:	1884703a 	and	r2,r3,r2
  811d88:	1001703a 	wrctl	status,r2
  
  return context;
  811d8c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  811d90:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  811d94:	d0a01317 	ldw	r2,-32692(gp)
  811d98:	10c000c4 	addi	r3,r2,3
  811d9c:	00bfff04 	movi	r2,-4
  811da0:	1884703a 	and	r2,r3,r2
  811da4:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  811da8:	d0e01317 	ldw	r3,-32692(gp)
  811dac:	e0bffe17 	ldw	r2,-8(fp)
  811db0:	1887883a 	add	r3,r3,r2
  811db4:	00804034 	movhi	r2,256
  811db8:	10800004 	addi	r2,r2,0
  811dbc:	10c0072e 	bgeu	r2,r3,811ddc <sbrk+0x78>
  811dc0:	e0bffd17 	ldw	r2,-12(fp)
  811dc4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811dc8:	e0bffa17 	ldw	r2,-24(fp)
  811dcc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  811dd0:	00bfffc4 	movi	r2,-1
  811dd4:	e0bfff15 	stw	r2,-4(fp)
  811dd8:	00000c06 	br	811e0c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  811ddc:	d0a01317 	ldw	r2,-32692(gp)
  811de0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  811de4:	d0e01317 	ldw	r3,-32692(gp)
  811de8:	e0bffe17 	ldw	r2,-8(fp)
  811dec:	1885883a 	add	r2,r3,r2
  811df0:	d0a01315 	stw	r2,-32692(gp)
  811df4:	e0bffd17 	ldw	r2,-12(fp)
  811df8:	e0bff915 	stw	r2,-28(fp)
  811dfc:	e0bff917 	ldw	r2,-28(fp)
  811e00:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  811e04:	e0bffc17 	ldw	r2,-16(fp)
  811e08:	e0bfff15 	stw	r2,-4(fp)
  811e0c:	e0bfff17 	ldw	r2,-4(fp)
} 
  811e10:	e037883a 	mov	sp,fp
  811e14:	df000017 	ldw	fp,0(sp)
  811e18:	dec00104 	addi	sp,sp,4
  811e1c:	f800283a 	ret

00811e20 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  811e20:	defffa04 	addi	sp,sp,-24
  811e24:	df000515 	stw	fp,20(sp)
  811e28:	df000504 	addi	fp,sp,20
  811e2c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811e30:	0005303a 	rdctl	r2,status
  811e34:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811e38:	e0fffd17 	ldw	r3,-12(fp)
  811e3c:	00bfff84 	movi	r2,-2
  811e40:	1884703a 	and	r2,r3,r2
  811e44:	1001703a 	wrctl	status,r2
  
  return context;
  811e48:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  811e4c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  811e50:	e0bfff17 	ldw	r2,-4(fp)
  811e54:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  811e58:	e0bffc17 	ldw	r2,-16(fp)
  811e5c:	10c00017 	ldw	r3,0(r2)
  811e60:	e0bffc17 	ldw	r2,-16(fp)
  811e64:	10800117 	ldw	r2,4(r2)
  811e68:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  811e6c:	e0bffc17 	ldw	r2,-16(fp)
  811e70:	10c00117 	ldw	r3,4(r2)
  811e74:	e0bffc17 	ldw	r2,-16(fp)
  811e78:	10800017 	ldw	r2,0(r2)
  811e7c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  811e80:	e0fffc17 	ldw	r3,-16(fp)
  811e84:	e0bffc17 	ldw	r2,-16(fp)
  811e88:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  811e8c:	e0fffc17 	ldw	r3,-16(fp)
  811e90:	e0bffc17 	ldw	r2,-16(fp)
  811e94:	18800015 	stw	r2,0(r3)
  811e98:	e0bffe17 	ldw	r2,-8(fp)
  811e9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811ea0:	e0bffb17 	ldw	r2,-20(fp)
  811ea4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  811ea8:	e037883a 	mov	sp,fp
  811eac:	df000017 	ldw	fp,0(sp)
  811eb0:	dec00104 	addi	sp,sp,4
  811eb4:	f800283a 	ret

00811eb8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  811eb8:	defffb04 	addi	sp,sp,-20
  811ebc:	dfc00415 	stw	ra,16(sp)
  811ec0:	df000315 	stw	fp,12(sp)
  811ec4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  811ec8:	d0a01417 	ldw	r2,-32688(gp)
  811ecc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  811ed0:	d0a74317 	ldw	r2,-25332(gp)
  811ed4:	10800044 	addi	r2,r2,1
  811ed8:	d0a74315 	stw	r2,-25332(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811edc:	00003106 	br	811fa4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  811ee0:	e0bffe17 	ldw	r2,-8(fp)
  811ee4:	10800017 	ldw	r2,0(r2)
  811ee8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  811eec:	e0bffe17 	ldw	r2,-8(fp)
  811ef0:	10800403 	ldbu	r2,16(r2)
  811ef4:	10803fcc 	andi	r2,r2,255
  811ef8:	1005003a 	cmpeq	r2,r2,zero
  811efc:	1000051e 	bne	r2,zero,811f14 <alt_tick+0x5c>
  811f00:	d0a74317 	ldw	r2,-25332(gp)
  811f04:	1004c03a 	cmpne	r2,r2,zero
  811f08:	1000021e 	bne	r2,zero,811f14 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  811f0c:	e0bffe17 	ldw	r2,-8(fp)
  811f10:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  811f14:	e0bffe17 	ldw	r2,-8(fp)
  811f18:	10c00217 	ldw	r3,8(r2)
  811f1c:	d0a74317 	ldw	r2,-25332(gp)
  811f20:	10c01e36 	bltu	r2,r3,811f9c <alt_tick+0xe4>
  811f24:	e0bffe17 	ldw	r2,-8(fp)
  811f28:	10800403 	ldbu	r2,16(r2)
  811f2c:	10803fcc 	andi	r2,r2,255
  811f30:	1004c03a 	cmpne	r2,r2,zero
  811f34:	1000191e 	bne	r2,zero,811f9c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  811f38:	e0bffe17 	ldw	r2,-8(fp)
  811f3c:	10c00317 	ldw	r3,12(r2)
  811f40:	e0bffe17 	ldw	r2,-8(fp)
  811f44:	11000517 	ldw	r4,20(r2)
  811f48:	183ee83a 	callr	r3
  811f4c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  811f50:	e0bffd17 	ldw	r2,-12(fp)
  811f54:	1004c03a 	cmpne	r2,r2,zero
  811f58:	1000031e 	bne	r2,zero,811f68 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  811f5c:	e13ffe17 	ldw	r4,-8(fp)
  811f60:	0811e200 	call	811e20 <alt_alarm_stop>
  811f64:	00000d06 	br	811f9c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  811f68:	e0bffe17 	ldw	r2,-8(fp)
  811f6c:	10c00217 	ldw	r3,8(r2)
  811f70:	e0bffd17 	ldw	r2,-12(fp)
  811f74:	1887883a 	add	r3,r3,r2
  811f78:	e0bffe17 	ldw	r2,-8(fp)
  811f7c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  811f80:	e0bffe17 	ldw	r2,-8(fp)
  811f84:	10c00217 	ldw	r3,8(r2)
  811f88:	d0a74317 	ldw	r2,-25332(gp)
  811f8c:	1880032e 	bgeu	r3,r2,811f9c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  811f90:	e0fffe17 	ldw	r3,-8(fp)
  811f94:	00800044 	movi	r2,1
  811f98:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  811f9c:	e0bfff17 	ldw	r2,-4(fp)
  811fa0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811fa4:	d0e01404 	addi	r3,gp,-32688
  811fa8:	e0bffe17 	ldw	r2,-8(fp)
  811fac:	10ffcc1e 	bne	r2,r3,811ee0 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  811fb0:	e037883a 	mov	sp,fp
  811fb4:	dfc00117 	ldw	ra,4(sp)
  811fb8:	df000017 	ldw	fp,0(sp)
  811fbc:	dec00204 	addi	sp,sp,8
  811fc0:	f800283a 	ret

00811fc4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  811fc4:	defffd04 	addi	sp,sp,-12
  811fc8:	dfc00215 	stw	ra,8(sp)
  811fcc:	df000115 	stw	fp,4(sp)
  811fd0:	df000104 	addi	fp,sp,4
  811fd4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  811fd8:	e13fff17 	ldw	r4,-4(fp)
  811fdc:	081a6a80 	call	81a6a8 <alt_busy_sleep>
}
  811fe0:	e037883a 	mov	sp,fp
  811fe4:	dfc00117 	ldw	ra,4(sp)
  811fe8:	df000017 	ldw	fp,0(sp)
  811fec:	dec00204 	addi	sp,sp,8
  811ff0:	f800283a 	ret

00811ff4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  811ff4:	defff704 	addi	sp,sp,-36
  811ff8:	dfc00815 	stw	ra,32(sp)
  811ffc:	df000715 	stw	fp,28(sp)
  812000:	df000704 	addi	fp,sp,28
  812004:	e13ffb15 	stw	r4,-20(fp)
  812008:	e17ffc15 	stw	r5,-16(fp)
  81200c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812010:	e0bffb17 	ldw	r2,-20(fp)
  812014:	1004803a 	cmplt	r2,r2,zero
  812018:	1000081e 	bne	r2,zero,81203c <write+0x48>
  81201c:	e0bffb17 	ldw	r2,-20(fp)
  812020:	10800324 	muli	r2,r2,12
  812024:	1007883a 	mov	r3,r2
  812028:	008020b4 	movhi	r2,130
  81202c:	10b2fa04 	addi	r2,r2,-13336
  812030:	1887883a 	add	r3,r3,r2
  812034:	e0ffff15 	stw	r3,-4(fp)
  812038:	00000106 	br	812040 <write+0x4c>
  81203c:	e03fff15 	stw	zero,-4(fp)
  812040:	e0bfff17 	ldw	r2,-4(fp)
  812044:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  812048:	e0bffa17 	ldw	r2,-24(fp)
  81204c:	1005003a 	cmpeq	r2,r2,zero
  812050:	1000241e 	bne	r2,zero,8120e4 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  812054:	e0bffa17 	ldw	r2,-24(fp)
  812058:	10800217 	ldw	r2,8(r2)
  81205c:	108000cc 	andi	r2,r2,3
  812060:	1005003a 	cmpeq	r2,r2,zero
  812064:	10001a1e 	bne	r2,zero,8120d0 <write+0xdc>
  812068:	e0bffa17 	ldw	r2,-24(fp)
  81206c:	10800017 	ldw	r2,0(r2)
  812070:	10800617 	ldw	r2,24(r2)
  812074:	1005003a 	cmpeq	r2,r2,zero
  812078:	1000151e 	bne	r2,zero,8120d0 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  81207c:	e0bffa17 	ldw	r2,-24(fp)
  812080:	10800017 	ldw	r2,0(r2)
  812084:	10800617 	ldw	r2,24(r2)
  812088:	e17ffc17 	ldw	r5,-16(fp)
  81208c:	e1bffd17 	ldw	r6,-12(fp)
  812090:	e13ffa17 	ldw	r4,-24(fp)
  812094:	103ee83a 	callr	r2
  812098:	e0bff915 	stw	r2,-28(fp)
  81209c:	e0bff917 	ldw	r2,-28(fp)
  8120a0:	1004403a 	cmpge	r2,r2,zero
  8120a4:	1000071e 	bne	r2,zero,8120c4 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  8120a8:	08121140 	call	812114 <alt_get_errno>
  8120ac:	e0fff917 	ldw	r3,-28(fp)
  8120b0:	00c7c83a 	sub	r3,zero,r3
  8120b4:	10c00015 	stw	r3,0(r2)
        return -1;
  8120b8:	00bfffc4 	movi	r2,-1
  8120bc:	e0bffe15 	stw	r2,-8(fp)
  8120c0:	00000e06 	br	8120fc <write+0x108>
      }
      return rval;
  8120c4:	e0bff917 	ldw	r2,-28(fp)
  8120c8:	e0bffe15 	stw	r2,-8(fp)
  8120cc:	00000b06 	br	8120fc <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8120d0:	08121140 	call	812114 <alt_get_errno>
  8120d4:	1007883a 	mov	r3,r2
  8120d8:	00800344 	movi	r2,13
  8120dc:	18800015 	stw	r2,0(r3)
  8120e0:	00000406 	br	8120f4 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8120e4:	08121140 	call	812114 <alt_get_errno>
  8120e8:	1007883a 	mov	r3,r2
  8120ec:	00801444 	movi	r2,81
  8120f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8120f4:	00bfffc4 	movi	r2,-1
  8120f8:	e0bffe15 	stw	r2,-8(fp)
  8120fc:	e0bffe17 	ldw	r2,-8(fp)
}
  812100:	e037883a 	mov	sp,fp
  812104:	dfc00117 	ldw	ra,4(sp)
  812108:	df000017 	ldw	fp,0(sp)
  81210c:	dec00204 	addi	sp,sp,8
  812110:	f800283a 	ret

00812114 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812114:	defffd04 	addi	sp,sp,-12
  812118:	dfc00215 	stw	ra,8(sp)
  81211c:	df000115 	stw	fp,4(sp)
  812120:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812124:	008020b4 	movhi	r2,130
  812128:	10b7d804 	addi	r2,r2,-8352
  81212c:	10800017 	ldw	r2,0(r2)
  812130:	1005003a 	cmpeq	r2,r2,zero
  812134:	1000061e 	bne	r2,zero,812150 <alt_get_errno+0x3c>
  812138:	008020b4 	movhi	r2,130
  81213c:	10b7d804 	addi	r2,r2,-8352
  812140:	10800017 	ldw	r2,0(r2)
  812144:	103ee83a 	callr	r2
  812148:	e0bfff15 	stw	r2,-4(fp)
  81214c:	00000306 	br	81215c <alt_get_errno+0x48>
  812150:	008020b4 	movhi	r2,130
  812154:	10befd04 	addi	r2,r2,-1036
  812158:	e0bfff15 	stw	r2,-4(fp)
  81215c:	e0bfff17 	ldw	r2,-4(fp)
}
  812160:	e037883a 	mov	sp,fp
  812164:	dfc00117 	ldw	ra,4(sp)
  812168:	df000017 	ldw	fp,0(sp)
  81216c:	dec00204 	addi	sp,sp,8
  812170:	f800283a 	ret

00812174 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  812174:	defffd04 	addi	sp,sp,-12
  812178:	dfc00215 	stw	ra,8(sp)
  81217c:	df000115 	stw	fp,4(sp)
  812180:	df000104 	addi	fp,sp,4
  812184:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  812188:	081aed80 	call	81aed8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  81218c:	00800044 	movi	r2,1
  812190:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  812194:	e037883a 	mov	sp,fp
  812198:	dfc00117 	ldw	ra,4(sp)
  81219c:	df000017 	ldw	fp,0(sp)
  8121a0:	dec00204 	addi	sp,sp,8
  8121a4:	f800283a 	ret

008121a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8121a8:	defffd04 	addi	sp,sp,-12
  8121ac:	dfc00215 	stw	ra,8(sp)
  8121b0:	df000115 	stw	fp,4(sp)
  8121b4:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( HAL_SYSTEM_TIMER, HAL_system_timer);
  8121b8:	01004034 	movhi	r4,256
  8121bc:	21040004 	addi	r4,r4,4096
  8121c0:	000b883a 	mov	r5,zero
  8121c4:	000d883a 	mov	r6,zero
  8121c8:	01c0fa04 	movi	r7,1000
  8121cc:	08130700 	call	813070 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( HARDWARE_TIMER, hardware_timer);
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
  8121d0:	00c020b4 	movhi	r3,130
  8121d4:	18ff0b04 	addi	r3,r3,-980
  8121d8:	00804034 	movhi	r2,256
  8121dc:	10840804 	addi	r2,r2,4128
  8121e0:	18800015 	stw	r2,0(r3)
  8121e4:	00c020b4 	movhi	r3,130
  8121e8:	18ff0c04 	addi	r3,r3,-976
  8121ec:	0080bef4 	movhi	r2,763
  8121f0:	10bc2004 	addi	r2,r2,-3968
  8121f4:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  8121f8:	010020b4 	movhi	r4,130
  8121fc:	21336404 	addi	r4,r4,-12912
  812200:	000b883a 	mov	r5,zero
  812204:	01800144 	movi	r6,5
  812208:	081269c0 	call	81269c <altera_avalon_jtag_uart_init>
  81220c:	010020b4 	movhi	r4,130
  812210:	21335a04 	addi	r4,r4,-12952
  812214:	081251c0 	call	81251c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
  812218:	010020b4 	movhi	r4,130
  81221c:	21377204 	addi	r4,r4,-8760
  812220:	081251c0 	call	81251c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
  812224:	010020b4 	movhi	r4,130
  812228:	21377e04 	addi	r4,r4,-8712
  81222c:	081251c0 	call	81251c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  812230:	010020b4 	movhi	r4,130
  812234:	21378a04 	addi	r4,r4,-8664
  812238:	08142a40 	call	8142a4 <alt_up_character_lcd_init>
  81223c:	010020b4 	movhi	r4,130
  812240:	21378a04 	addi	r4,r4,-8664
  812244:	081251c0 	call	81251c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_DRAWER, char_drawer);
  812248:	008020b4 	movhi	r2,130
  81224c:	10b79504 	addi	r2,r2,-8620
  812250:	10800a17 	ldw	r2,40(r2)
  812254:	10800104 	addi	r2,r2,4
  812258:	10800017 	ldw	r2,0(r2)
  81225c:	10ffffcc 	andi	r3,r2,65535
  812260:	008020b4 	movhi	r2,130
  812264:	10b79504 	addi	r2,r2,-8620
  812268:	10c00c15 	stw	r3,48(r2)
  81226c:	008020b4 	movhi	r2,130
  812270:	10b79504 	addi	r2,r2,-8620
  812274:	10800a17 	ldw	r2,40(r2)
  812278:	10800104 	addi	r2,r2,4
  81227c:	10800017 	ldw	r2,0(r2)
  812280:	1005d43a 	srai	r2,r2,16
  812284:	10ffffcc 	andi	r3,r2,65535
  812288:	008020b4 	movhi	r2,130
  81228c:	10b79504 	addi	r2,r2,-8620
  812290:	10c00d15 	stw	r3,52(r2)
  812294:	008020b4 	movhi	r2,130
  812298:	10b79504 	addi	r2,r2,-8620
  81229c:	10800c17 	ldw	r2,48(r2)
  8122a0:	10801068 	cmpgeui	r2,r2,65
  8122a4:	1000081e 	bne	r2,zero,8122c8 <alt_sys_init+0x120>
  8122a8:	00c020b4 	movhi	r3,130
  8122ac:	18f79504 	addi	r3,r3,-8620
  8122b0:	00800fc4 	movi	r2,63
  8122b4:	18800f15 	stw	r2,60(r3)
  8122b8:	00c020b4 	movhi	r3,130
  8122bc:	18f79504 	addi	r3,r3,-8620
  8122c0:	00800184 	movi	r2,6
  8122c4:	18801015 	stw	r2,64(r3)
  8122c8:	008020b4 	movhi	r2,130
  8122cc:	10b79504 	addi	r2,r2,-8620
  8122d0:	10800d17 	ldw	r2,52(r2)
  8122d4:	10800868 	cmpgeui	r2,r2,33
  8122d8:	1000041e 	bne	r2,zero,8122ec <alt_sys_init+0x144>
  8122dc:	00c020b4 	movhi	r3,130
  8122e0:	18f79504 	addi	r3,r3,-8620
  8122e4:	008007c4 	movi	r2,31
  8122e8:	18801115 	stw	r2,68(r3)
  8122ec:	010020b4 	movhi	r4,130
  8122f0:	21379504 	addi	r4,r4,-8620
  8122f4:	08147240 	call	814724 <alt_up_char_buffer_init>
  8122f8:	010020b4 	movhi	r4,130
  8122fc:	21379504 	addi	r4,r4,-8620
  812300:	081251c0 	call	81251c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, pixel_buffer_dma);
  812304:	008020b4 	movhi	r2,130
  812308:	10b7a704 	addi	r2,r2,-8548
  81230c:	10800a17 	ldw	r2,40(r2)
  812310:	10800017 	ldw	r2,0(r2)
  812314:	1007883a 	mov	r3,r2
  812318:	008020b4 	movhi	r2,130
  81231c:	10b7a704 	addi	r2,r2,-8548
  812320:	10c00b15 	stw	r3,44(r2)
  812324:	008020b4 	movhi	r2,130
  812328:	10b7a704 	addi	r2,r2,-8548
  81232c:	10800a17 	ldw	r2,40(r2)
  812330:	10800104 	addi	r2,r2,4
  812334:	10800017 	ldw	r2,0(r2)
  812338:	1007883a 	mov	r3,r2
  81233c:	008020b4 	movhi	r2,130
  812340:	10b7a704 	addi	r2,r2,-8548
  812344:	10c00c15 	stw	r3,48(r2)
  812348:	008020b4 	movhi	r2,130
  81234c:	10b7a704 	addi	r2,r2,-8548
  812350:	10800a17 	ldw	r2,40(r2)
  812354:	10800204 	addi	r2,r2,8
  812358:	10800017 	ldw	r2,0(r2)
  81235c:	10ffffcc 	andi	r3,r2,65535
  812360:	008020b4 	movhi	r2,130
  812364:	10b7a704 	addi	r2,r2,-8548
  812368:	10c00f15 	stw	r3,60(r2)
  81236c:	008020b4 	movhi	r2,130
  812370:	10b7a704 	addi	r2,r2,-8548
  812374:	10800a17 	ldw	r2,40(r2)
  812378:	10800204 	addi	r2,r2,8
  81237c:	10800017 	ldw	r2,0(r2)
  812380:	1005d43a 	srai	r2,r2,16
  812384:	10ffffcc 	andi	r3,r2,65535
  812388:	008020b4 	movhi	r2,130
  81238c:	10b7a704 	addi	r2,r2,-8548
  812390:	10c01015 	stw	r3,64(r2)
  812394:	008020b4 	movhi	r2,130
  812398:	10b7a704 	addi	r2,r2,-8548
  81239c:	10800a17 	ldw	r2,40(r2)
  8123a0:	10800304 	addi	r2,r2,12
  8123a4:	10800017 	ldw	r2,0(r2)
  8123a8:	1005d07a 	srai	r2,r2,1
  8123ac:	10c0004c 	andi	r3,r2,1
  8123b0:	008020b4 	movhi	r2,130
  8123b4:	10b7a704 	addi	r2,r2,-8548
  8123b8:	10c00d15 	stw	r3,52(r2)
  8123bc:	008020b4 	movhi	r2,130
  8123c0:	10b7a704 	addi	r2,r2,-8548
  8123c4:	10800a17 	ldw	r2,40(r2)
  8123c8:	10800304 	addi	r2,r2,12
  8123cc:	10800017 	ldw	r2,0(r2)
  8123d0:	1005d13a 	srai	r2,r2,4
  8123d4:	10c003cc 	andi	r3,r2,15
  8123d8:	008020b4 	movhi	r2,130
  8123dc:	10b7a704 	addi	r2,r2,-8548
  8123e0:	10c00e15 	stw	r3,56(r2)
  8123e4:	008020b4 	movhi	r2,130
  8123e8:	10b7a704 	addi	r2,r2,-8548
  8123ec:	10800a17 	ldw	r2,40(r2)
  8123f0:	10800304 	addi	r2,r2,12
  8123f4:	10800017 	ldw	r2,0(r2)
  8123f8:	1005d43a 	srai	r2,r2,16
  8123fc:	1007883a 	mov	r3,r2
  812400:	00bfffc4 	movi	r2,-1
  812404:	1884703a 	and	r2,r3,r2
  812408:	e0bfff45 	stb	r2,-3(fp)
  81240c:	008020b4 	movhi	r2,130
  812410:	10b7a704 	addi	r2,r2,-8548
  812414:	10800a17 	ldw	r2,40(r2)
  812418:	10800304 	addi	r2,r2,12
  81241c:	10800017 	ldw	r2,0(r2)
  812420:	1005d63a 	srai	r2,r2,24
  812424:	1007883a 	mov	r3,r2
  812428:	00bfffc4 	movi	r2,-1
  81242c:	1884703a 	and	r2,r3,r2
  812430:	e0bfff05 	stb	r2,-4(fp)
  812434:	008020b4 	movhi	r2,130
  812438:	10b7a704 	addi	r2,r2,-8548
  81243c:	10800e17 	ldw	r2,56(r2)
  812440:	10800058 	cmpnei	r2,r2,1
  812444:	1000041e 	bne	r2,zero,812458 <alt_sys_init+0x2b0>
  812448:	008020b4 	movhi	r2,130
  81244c:	10b7a704 	addi	r2,r2,-8548
  812450:	10001115 	stw	zero,68(r2)
  812454:	00000e06 	br	812490 <alt_sys_init+0x2e8>
  812458:	008020b4 	movhi	r2,130
  81245c:	10b7a704 	addi	r2,r2,-8548
  812460:	10800e17 	ldw	r2,56(r2)
  812464:	10800098 	cmpnei	r2,r2,2
  812468:	1000051e 	bne	r2,zero,812480 <alt_sys_init+0x2d8>
  81246c:	00c020b4 	movhi	r3,130
  812470:	18f7a704 	addi	r3,r3,-8548
  812474:	00800044 	movi	r2,1
  812478:	18801115 	stw	r2,68(r3)
  81247c:	00000406 	br	812490 <alt_sys_init+0x2e8>
  812480:	00c020b4 	movhi	r3,130
  812484:	18f7a704 	addi	r3,r3,-8548
  812488:	00800084 	movi	r2,2
  81248c:	18801115 	stw	r2,68(r3)
  812490:	e0ffff43 	ldbu	r3,-3(fp)
  812494:	00800804 	movi	r2,32
  812498:	10c7c83a 	sub	r3,r2,r3
  81249c:	00bfffc4 	movi	r2,-1
  8124a0:	10c6d83a 	srl	r3,r2,r3
  8124a4:	008020b4 	movhi	r2,130
  8124a8:	10b7a704 	addi	r2,r2,-8548
  8124ac:	10c01215 	stw	r3,72(r2)
  8124b0:	e0ffff43 	ldbu	r3,-3(fp)
  8124b4:	008020b4 	movhi	r2,130
  8124b8:	10b7a704 	addi	r2,r2,-8548
  8124bc:	10801117 	ldw	r2,68(r2)
  8124c0:	1887883a 	add	r3,r3,r2
  8124c4:	008020b4 	movhi	r2,130
  8124c8:	10b7a704 	addi	r2,r2,-8548
  8124cc:	10c01315 	stw	r3,76(r2)
  8124d0:	e0ffff03 	ldbu	r3,-4(fp)
  8124d4:	00800804 	movi	r2,32
  8124d8:	10c7c83a 	sub	r3,r2,r3
  8124dc:	00bfffc4 	movi	r2,-1
  8124e0:	10c6d83a 	srl	r3,r2,r3
  8124e4:	008020b4 	movhi	r2,130
  8124e8:	10b7a704 	addi	r2,r2,-8548
  8124ec:	10c01415 	stw	r3,80(r2)
  8124f0:	010020b4 	movhi	r4,130
  8124f4:	2137a704 	addi	r4,r4,-8548
  8124f8:	081251c0 	call	81251c <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
  8124fc:	010020b4 	movhi	r4,130
  812500:	2137bc04 	addi	r4,r4,-8464
  812504:	081251c0 	call	81251c <alt_dev_reg>
}
  812508:	e037883a 	mov	sp,fp
  81250c:	dfc00117 	ldw	ra,4(sp)
  812510:	df000017 	ldw	fp,0(sp)
  812514:	dec00204 	addi	sp,sp,8
  812518:	f800283a 	ret

0081251c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  81251c:	defffd04 	addi	sp,sp,-12
  812520:	dfc00215 	stw	ra,8(sp)
  812524:	df000115 	stw	fp,4(sp)
  812528:	df000104 	addi	fp,sp,4
  81252c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  812530:	e13fff17 	ldw	r4,-4(fp)
  812534:	014020b4 	movhi	r5,130
  812538:	2977d504 	addi	r5,r5,-8364
  81253c:	081a8380 	call	81a838 <alt_dev_llist_insert>
}
  812540:	e037883a 	mov	sp,fp
  812544:	dfc00117 	ldw	ra,4(sp)
  812548:	df000017 	ldw	fp,0(sp)
  81254c:	dec00204 	addi	sp,sp,8
  812550:	f800283a 	ret

00812554 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  812554:	defffa04 	addi	sp,sp,-24
  812558:	dfc00515 	stw	ra,20(sp)
  81255c:	df000415 	stw	fp,16(sp)
  812560:	df000404 	addi	fp,sp,16
  812564:	e13ffd15 	stw	r4,-12(fp)
  812568:	e17ffe15 	stw	r5,-8(fp)
  81256c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  812570:	e0bffd17 	ldw	r2,-12(fp)
  812574:	10800017 	ldw	r2,0(r2)
  812578:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  81257c:	e0bffc17 	ldw	r2,-16(fp)
  812580:	11000a04 	addi	r4,r2,40
  812584:	e0bffd17 	ldw	r2,-12(fp)
  812588:	11c00217 	ldw	r7,8(r2)
  81258c:	e17ffe17 	ldw	r5,-8(fp)
  812590:	e1bfff17 	ldw	r6,-4(fp)
  812594:	0812b980 	call	812b98 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  812598:	e037883a 	mov	sp,fp
  81259c:	dfc00117 	ldw	ra,4(sp)
  8125a0:	df000017 	ldw	fp,0(sp)
  8125a4:	dec00204 	addi	sp,sp,8
  8125a8:	f800283a 	ret

008125ac <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8125ac:	defffa04 	addi	sp,sp,-24
  8125b0:	dfc00515 	stw	ra,20(sp)
  8125b4:	df000415 	stw	fp,16(sp)
  8125b8:	df000404 	addi	fp,sp,16
  8125bc:	e13ffd15 	stw	r4,-12(fp)
  8125c0:	e17ffe15 	stw	r5,-8(fp)
  8125c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8125c8:	e0bffd17 	ldw	r2,-12(fp)
  8125cc:	10800017 	ldw	r2,0(r2)
  8125d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8125d4:	e0bffc17 	ldw	r2,-16(fp)
  8125d8:	11000a04 	addi	r4,r2,40
  8125dc:	e0bffd17 	ldw	r2,-12(fp)
  8125e0:	11c00217 	ldw	r7,8(r2)
  8125e4:	e17ffe17 	ldw	r5,-8(fp)
  8125e8:	e1bfff17 	ldw	r6,-4(fp)
  8125ec:	0812dbc0 	call	812dbc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8125f0:	e037883a 	mov	sp,fp
  8125f4:	dfc00117 	ldw	ra,4(sp)
  8125f8:	df000017 	ldw	fp,0(sp)
  8125fc:	dec00204 	addi	sp,sp,8
  812600:	f800283a 	ret

00812604 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  812604:	defffc04 	addi	sp,sp,-16
  812608:	dfc00315 	stw	ra,12(sp)
  81260c:	df000215 	stw	fp,8(sp)
  812610:	df000204 	addi	fp,sp,8
  812614:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  812618:	e0bfff17 	ldw	r2,-4(fp)
  81261c:	10800017 	ldw	r2,0(r2)
  812620:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  812624:	e0bffe17 	ldw	r2,-8(fp)
  812628:	11000a04 	addi	r4,r2,40
  81262c:	e0bfff17 	ldw	r2,-4(fp)
  812630:	11400217 	ldw	r5,8(r2)
  812634:	0812a300 	call	812a30 <altera_avalon_jtag_uart_close>
}
  812638:	e037883a 	mov	sp,fp
  81263c:	dfc00117 	ldw	ra,4(sp)
  812640:	df000017 	ldw	fp,0(sp)
  812644:	dec00204 	addi	sp,sp,8
  812648:	f800283a 	ret

0081264c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  81264c:	defffa04 	addi	sp,sp,-24
  812650:	dfc00515 	stw	ra,20(sp)
  812654:	df000415 	stw	fp,16(sp)
  812658:	df000404 	addi	fp,sp,16
  81265c:	e13ffd15 	stw	r4,-12(fp)
  812660:	e17ffe15 	stw	r5,-8(fp)
  812664:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  812668:	e0bffd17 	ldw	r2,-12(fp)
  81266c:	10800017 	ldw	r2,0(r2)
  812670:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  812674:	e0bffc17 	ldw	r2,-16(fp)
  812678:	11000a04 	addi	r4,r2,40
  81267c:	e17ffe17 	ldw	r5,-8(fp)
  812680:	e1bfff17 	ldw	r6,-4(fp)
  812684:	0812aa40 	call	812aa4 <altera_avalon_jtag_uart_ioctl>
}
  812688:	e037883a 	mov	sp,fp
  81268c:	dfc00117 	ldw	ra,4(sp)
  812690:	df000017 	ldw	fp,0(sp)
  812694:	dec00204 	addi	sp,sp,8
  812698:	f800283a 	ret

0081269c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  81269c:	defffb04 	addi	sp,sp,-20
  8126a0:	dfc00415 	stw	ra,16(sp)
  8126a4:	df000315 	stw	fp,12(sp)
  8126a8:	df000304 	addi	fp,sp,12
  8126ac:	e13ffd15 	stw	r4,-12(fp)
  8126b0:	e17ffe15 	stw	r5,-8(fp)
  8126b4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8126b8:	e0fffd17 	ldw	r3,-12(fp)
  8126bc:	00800044 	movi	r2,1
  8126c0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8126c4:	e0bffd17 	ldw	r2,-12(fp)
  8126c8:	10800017 	ldw	r2,0(r2)
  8126cc:	11000104 	addi	r4,r2,4
  8126d0:	e0bffd17 	ldw	r2,-12(fp)
  8126d4:	10800817 	ldw	r2,32(r2)
  8126d8:	1007883a 	mov	r3,r2
  8126dc:	2005883a 	mov	r2,r4
  8126e0:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  8126e4:	e13fff17 	ldw	r4,-4(fp)
  8126e8:	e17ffd17 	ldw	r5,-12(fp)
  8126ec:	01802074 	movhi	r6,129
  8126f0:	3189d504 	addi	r6,r6,10068
  8126f4:	08115bc0 	call	8115bc <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8126f8:	e0bffd17 	ldw	r2,-12(fp)
  8126fc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  812700:	e0bffd17 	ldw	r2,-12(fp)
  812704:	11000204 	addi	r4,r2,8
  812708:	008020b4 	movhi	r2,130
  81270c:	10bf0904 	addi	r2,r2,-988
  812710:	10800017 	ldw	r2,0(r2)
  812714:	100b883a 	mov	r5,r2
  812718:	01802074 	movhi	r6,129
  81271c:	318a6004 	addi	r6,r6,10624
  812720:	e1fffd17 	ldw	r7,-12(fp)
  812724:	081a5540 	call	81a554 <alt_alarm_start>
  812728:	1004403a 	cmpge	r2,r2,zero
  81272c:	1000041e 	bne	r2,zero,812740 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  812730:	e0fffd17 	ldw	r3,-12(fp)
  812734:	00a00034 	movhi	r2,32768
  812738:	10bfffc4 	addi	r2,r2,-1
  81273c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  812740:	e037883a 	mov	sp,fp
  812744:	dfc00117 	ldw	ra,4(sp)
  812748:	df000017 	ldw	fp,0(sp)
  81274c:	dec00204 	addi	sp,sp,8
  812750:	f800283a 	ret

00812754 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  812754:	defff704 	addi	sp,sp,-36
  812758:	df000815 	stw	fp,32(sp)
  81275c:	df000804 	addi	fp,sp,32
  812760:	e13ffe15 	stw	r4,-8(fp)
  812764:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  812768:	e0bffe17 	ldw	r2,-8(fp)
  81276c:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  812770:	e0bffd17 	ldw	r2,-12(fp)
  812774:	10800017 	ldw	r2,0(r2)
  812778:	e0bffc15 	stw	r2,-16(fp)
  81277c:	00000006 	br	812780 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  812780:	e0bffc17 	ldw	r2,-16(fp)
  812784:	10800104 	addi	r2,r2,4
  812788:	10800037 	ldwio	r2,0(r2)
  81278c:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  812790:	e0bffb17 	ldw	r2,-20(fp)
  812794:	1080c00c 	andi	r2,r2,768
  812798:	1005003a 	cmpeq	r2,r2,zero
  81279c:	1000741e 	bne	r2,zero,812970 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8127a0:	e0bffb17 	ldw	r2,-20(fp)
  8127a4:	1080400c 	andi	r2,r2,256
  8127a8:	1005003a 	cmpeq	r2,r2,zero
  8127ac:	1000351e 	bne	r2,zero,812884 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  8127b0:	00800074 	movhi	r2,1
  8127b4:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8127b8:	e0bffd17 	ldw	r2,-12(fp)
  8127bc:	10800a17 	ldw	r2,40(r2)
  8127c0:	10800044 	addi	r2,r2,1
  8127c4:	1081ffcc 	andi	r2,r2,2047
  8127c8:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  8127cc:	e0bffd17 	ldw	r2,-12(fp)
  8127d0:	10c00b17 	ldw	r3,44(r2)
  8127d4:	e0bff917 	ldw	r2,-28(fp)
  8127d8:	18801626 	beq	r3,r2,812834 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8127dc:	e0bffc17 	ldw	r2,-16(fp)
  8127e0:	10800037 	ldwio	r2,0(r2)
  8127e4:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  8127e8:	e0bffa17 	ldw	r2,-24(fp)
  8127ec:	10a0000c 	andi	r2,r2,32768
  8127f0:	1005003a 	cmpeq	r2,r2,zero
  8127f4:	10000f1e 	bne	r2,zero,812834 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8127f8:	e0bffd17 	ldw	r2,-12(fp)
  8127fc:	10c00a17 	ldw	r3,40(r2)
  812800:	e0bffa17 	ldw	r2,-24(fp)
  812804:	1009883a 	mov	r4,r2
  812808:	e0bffd17 	ldw	r2,-12(fp)
  81280c:	1885883a 	add	r2,r3,r2
  812810:	10800e04 	addi	r2,r2,56
  812814:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812818:	e0bffd17 	ldw	r2,-12(fp)
  81281c:	10800a17 	ldw	r2,40(r2)
  812820:	10800044 	addi	r2,r2,1
  812824:	10c1ffcc 	andi	r3,r2,2047
  812828:	e0bffd17 	ldw	r2,-12(fp)
  81282c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  812830:	003fe106 	br	8127b8 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  812834:	e0bffa17 	ldw	r2,-24(fp)
  812838:	10bfffec 	andhi	r2,r2,65535
  81283c:	1005003a 	cmpeq	r2,r2,zero
  812840:	1000101e 	bne	r2,zero,812884 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  812844:	e0bffd17 	ldw	r2,-12(fp)
  812848:	10c00817 	ldw	r3,32(r2)
  81284c:	00bfff84 	movi	r2,-2
  812850:	1886703a 	and	r3,r3,r2
  812854:	e0bffd17 	ldw	r2,-12(fp)
  812858:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  81285c:	e0bffc17 	ldw	r2,-16(fp)
  812860:	11000104 	addi	r4,r2,4
  812864:	e0bffd17 	ldw	r2,-12(fp)
  812868:	10800817 	ldw	r2,32(r2)
  81286c:	1007883a 	mov	r3,r2
  812870:	2005883a 	mov	r2,r4
  812874:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  812878:	e0bffc17 	ldw	r2,-16(fp)
  81287c:	10800104 	addi	r2,r2,4
  812880:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  812884:	e0bffb17 	ldw	r2,-20(fp)
  812888:	1080800c 	andi	r2,r2,512
  81288c:	1005003a 	cmpeq	r2,r2,zero
  812890:	103fbb1e 	bne	r2,zero,812780 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  812894:	e0bffb17 	ldw	r2,-20(fp)
  812898:	10bfffec 	andhi	r2,r2,65535
  81289c:	1004d43a 	srli	r2,r2,16
  8128a0:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  8128a4:	00001506 	br	8128fc <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  8128a8:	e13ffc17 	ldw	r4,-16(fp)
  8128ac:	e0bffd17 	ldw	r2,-12(fp)
  8128b0:	10c00d17 	ldw	r3,52(r2)
  8128b4:	e0bffd17 	ldw	r2,-12(fp)
  8128b8:	1885883a 	add	r2,r3,r2
  8128bc:	10820e04 	addi	r2,r2,2104
  8128c0:	10800003 	ldbu	r2,0(r2)
  8128c4:	10c03fcc 	andi	r3,r2,255
  8128c8:	18c0201c 	xori	r3,r3,128
  8128cc:	18ffe004 	addi	r3,r3,-128
  8128d0:	2005883a 	mov	r2,r4
  8128d4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8128d8:	e0bffd17 	ldw	r2,-12(fp)
  8128dc:	10800d17 	ldw	r2,52(r2)
  8128e0:	10800044 	addi	r2,r2,1
  8128e4:	10c1ffcc 	andi	r3,r2,2047
  8128e8:	e0bffd17 	ldw	r2,-12(fp)
  8128ec:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  8128f0:	e0bff817 	ldw	r2,-32(fp)
  8128f4:	10bfffc4 	addi	r2,r2,-1
  8128f8:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8128fc:	e0bff817 	ldw	r2,-32(fp)
  812900:	1005003a 	cmpeq	r2,r2,zero
  812904:	1000051e 	bne	r2,zero,81291c <altera_avalon_jtag_uart_irq+0x1c8>
  812908:	e0bffd17 	ldw	r2,-12(fp)
  81290c:	10c00d17 	ldw	r3,52(r2)
  812910:	e0bffd17 	ldw	r2,-12(fp)
  812914:	10800c17 	ldw	r2,48(r2)
  812918:	18bfe31e 	bne	r3,r2,8128a8 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  81291c:	e0bff817 	ldw	r2,-32(fp)
  812920:	1005003a 	cmpeq	r2,r2,zero
  812924:	103f961e 	bne	r2,zero,812780 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  812928:	e0bffd17 	ldw	r2,-12(fp)
  81292c:	10c00817 	ldw	r3,32(r2)
  812930:	00bfff44 	movi	r2,-3
  812934:	1886703a 	and	r3,r3,r2
  812938:	e0bffd17 	ldw	r2,-12(fp)
  81293c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  812940:	e0bffd17 	ldw	r2,-12(fp)
  812944:	10800017 	ldw	r2,0(r2)
  812948:	11000104 	addi	r4,r2,4
  81294c:	e0bffd17 	ldw	r2,-12(fp)
  812950:	10800817 	ldw	r2,32(r2)
  812954:	1007883a 	mov	r3,r2
  812958:	2005883a 	mov	r2,r4
  81295c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  812960:	e0bffc17 	ldw	r2,-16(fp)
  812964:	10800104 	addi	r2,r2,4
  812968:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  81296c:	003f8406 	br	812780 <altera_avalon_jtag_uart_irq+0x2c>
}
  812970:	e037883a 	mov	sp,fp
  812974:	df000017 	ldw	fp,0(sp)
  812978:	dec00104 	addi	sp,sp,4
  81297c:	f800283a 	ret

00812980 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  812980:	defffc04 	addi	sp,sp,-16
  812984:	df000315 	stw	fp,12(sp)
  812988:	df000304 	addi	fp,sp,12
  81298c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  812990:	e0bfff17 	ldw	r2,-4(fp)
  812994:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  812998:	e0bffe17 	ldw	r2,-8(fp)
  81299c:	10800017 	ldw	r2,0(r2)
  8129a0:	10800104 	addi	r2,r2,4
  8129a4:	10800037 	ldwio	r2,0(r2)
  8129a8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  8129ac:	e0bffd17 	ldw	r2,-12(fp)
  8129b0:	1081000c 	andi	r2,r2,1024
  8129b4:	1005003a 	cmpeq	r2,r2,zero
  8129b8:	10000c1e 	bne	r2,zero,8129ec <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  8129bc:	e0bffe17 	ldw	r2,-8(fp)
  8129c0:	10800017 	ldw	r2,0(r2)
  8129c4:	11000104 	addi	r4,r2,4
  8129c8:	e0bffe17 	ldw	r2,-8(fp)
  8129cc:	10800817 	ldw	r2,32(r2)
  8129d0:	10810014 	ori	r2,r2,1024
  8129d4:	1007883a 	mov	r3,r2
  8129d8:	2005883a 	mov	r2,r4
  8129dc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  8129e0:	e0bffe17 	ldw	r2,-8(fp)
  8129e4:	10000915 	stw	zero,36(r2)
  8129e8:	00000a06 	br	812a14 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8129ec:	e0bffe17 	ldw	r2,-8(fp)
  8129f0:	10c00917 	ldw	r3,36(r2)
  8129f4:	00a00034 	movhi	r2,32768
  8129f8:	10bfff04 	addi	r2,r2,-4
  8129fc:	10c00536 	bltu	r2,r3,812a14 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  812a00:	e0bffe17 	ldw	r2,-8(fp)
  812a04:	10800917 	ldw	r2,36(r2)
  812a08:	10c00044 	addi	r3,r2,1
  812a0c:	e0bffe17 	ldw	r2,-8(fp)
  812a10:	10c00915 	stw	r3,36(r2)
  812a14:	008020b4 	movhi	r2,130
  812a18:	10bf0904 	addi	r2,r2,-988
  812a1c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  812a20:	e037883a 	mov	sp,fp
  812a24:	df000017 	ldw	fp,0(sp)
  812a28:	dec00104 	addi	sp,sp,4
  812a2c:	f800283a 	ret

00812a30 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  812a30:	defffc04 	addi	sp,sp,-16
  812a34:	df000315 	stw	fp,12(sp)
  812a38:	df000304 	addi	fp,sp,12
  812a3c:	e13ffd15 	stw	r4,-12(fp)
  812a40:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  812a44:	00000706 	br	812a64 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  812a48:	e0bffe17 	ldw	r2,-8(fp)
  812a4c:	1090000c 	andi	r2,r2,16384
  812a50:	1005003a 	cmpeq	r2,r2,zero
  812a54:	1000031e 	bne	r2,zero,812a64 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  812a58:	00bffd44 	movi	r2,-11
  812a5c:	e0bfff15 	stw	r2,-4(fp)
  812a60:	00000b06 	br	812a90 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  812a64:	e0bffd17 	ldw	r2,-12(fp)
  812a68:	10c00d17 	ldw	r3,52(r2)
  812a6c:	e0bffd17 	ldw	r2,-12(fp)
  812a70:	10800c17 	ldw	r2,48(r2)
  812a74:	18800526 	beq	r3,r2,812a8c <altera_avalon_jtag_uart_close+0x5c>
  812a78:	e0bffd17 	ldw	r2,-12(fp)
  812a7c:	10c00917 	ldw	r3,36(r2)
  812a80:	e0bffd17 	ldw	r2,-12(fp)
  812a84:	10800117 	ldw	r2,4(r2)
  812a88:	18bfef36 	bltu	r3,r2,812a48 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  812a8c:	e03fff15 	stw	zero,-4(fp)
  812a90:	e0bfff17 	ldw	r2,-4(fp)
}
  812a94:	e037883a 	mov	sp,fp
  812a98:	df000017 	ldw	fp,0(sp)
  812a9c:	dec00104 	addi	sp,sp,4
  812aa0:	f800283a 	ret

00812aa4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  812aa4:	defff804 	addi	sp,sp,-32
  812aa8:	df000715 	stw	fp,28(sp)
  812aac:	df000704 	addi	fp,sp,28
  812ab0:	e13ffb15 	stw	r4,-20(fp)
  812ab4:	e17ffc15 	stw	r5,-16(fp)
  812ab8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  812abc:	00bff9c4 	movi	r2,-25
  812ac0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  812ac4:	e0bffc17 	ldw	r2,-16(fp)
  812ac8:	e0bfff15 	stw	r2,-4(fp)
  812acc:	e0ffff17 	ldw	r3,-4(fp)
  812ad0:	189a8060 	cmpeqi	r2,r3,27137
  812ad4:	1000041e 	bne	r2,zero,812ae8 <altera_avalon_jtag_uart_ioctl+0x44>
  812ad8:	e0ffff17 	ldw	r3,-4(fp)
  812adc:	189a80a0 	cmpeqi	r2,r3,27138
  812ae0:	10001b1e 	bne	r2,zero,812b50 <altera_avalon_jtag_uart_ioctl+0xac>
  812ae4:	00002706 	br	812b84 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  812ae8:	e0bffb17 	ldw	r2,-20(fp)
  812aec:	10c00117 	ldw	r3,4(r2)
  812af0:	00a00034 	movhi	r2,32768
  812af4:	10bfffc4 	addi	r2,r2,-1
  812af8:	18802226 	beq	r3,r2,812b84 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  812afc:	e0bffd17 	ldw	r2,-12(fp)
  812b00:	10800017 	ldw	r2,0(r2)
  812b04:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  812b08:	e0bff917 	ldw	r2,-28(fp)
  812b0c:	10800090 	cmplti	r2,r2,2
  812b10:	1000071e 	bne	r2,zero,812b30 <altera_avalon_jtag_uart_ioctl+0x8c>
  812b14:	e0fff917 	ldw	r3,-28(fp)
  812b18:	00a00034 	movhi	r2,32768
  812b1c:	10bfffc4 	addi	r2,r2,-1
  812b20:	18800326 	beq	r3,r2,812b30 <altera_avalon_jtag_uart_ioctl+0x8c>
  812b24:	e0bff917 	ldw	r2,-28(fp)
  812b28:	e0bffe15 	stw	r2,-8(fp)
  812b2c:	00000306 	br	812b3c <altera_avalon_jtag_uart_ioctl+0x98>
  812b30:	00e00034 	movhi	r3,32768
  812b34:	18ffff84 	addi	r3,r3,-2
  812b38:	e0fffe15 	stw	r3,-8(fp)
  812b3c:	e0bffb17 	ldw	r2,-20(fp)
  812b40:	e0fffe17 	ldw	r3,-8(fp)
  812b44:	10c00115 	stw	r3,4(r2)
      rc = 0;
  812b48:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  812b4c:	00000d06 	br	812b84 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  812b50:	e0bffb17 	ldw	r2,-20(fp)
  812b54:	10c00117 	ldw	r3,4(r2)
  812b58:	00a00034 	movhi	r2,32768
  812b5c:	10bfffc4 	addi	r2,r2,-1
  812b60:	18800826 	beq	r3,r2,812b84 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  812b64:	e13ffd17 	ldw	r4,-12(fp)
  812b68:	e0bffb17 	ldw	r2,-20(fp)
  812b6c:	10c00917 	ldw	r3,36(r2)
  812b70:	e0bffb17 	ldw	r2,-20(fp)
  812b74:	10800117 	ldw	r2,4(r2)
  812b78:	1885803a 	cmpltu	r2,r3,r2
  812b7c:	20800015 	stw	r2,0(r4)
      rc = 0;
  812b80:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  812b84:	e0bffa17 	ldw	r2,-24(fp)
}
  812b88:	e037883a 	mov	sp,fp
  812b8c:	df000017 	ldw	fp,0(sp)
  812b90:	dec00104 	addi	sp,sp,4
  812b94:	f800283a 	ret

00812b98 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  812b98:	defff204 	addi	sp,sp,-56
  812b9c:	dfc00d15 	stw	ra,52(sp)
  812ba0:	df000c15 	stw	fp,48(sp)
  812ba4:	df000c04 	addi	fp,sp,48
  812ba8:	e13ffb15 	stw	r4,-20(fp)
  812bac:	e17ffc15 	stw	r5,-16(fp)
  812bb0:	e1bffd15 	stw	r6,-12(fp)
  812bb4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  812bb8:	e0bffc17 	ldw	r2,-16(fp)
  812bbc:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  812bc0:	00004806 	br	812ce4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  812bc4:	e0bffb17 	ldw	r2,-20(fp)
  812bc8:	10800a17 	ldw	r2,40(r2)
  812bcc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  812bd0:	e0bffb17 	ldw	r2,-20(fp)
  812bd4:	10800b17 	ldw	r2,44(r2)
  812bd8:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  812bdc:	e0fff717 	ldw	r3,-36(fp)
  812be0:	e0bff617 	ldw	r2,-40(fp)
  812be4:	18800536 	bltu	r3,r2,812bfc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  812be8:	e0bff717 	ldw	r2,-36(fp)
  812bec:	e0fff617 	ldw	r3,-40(fp)
  812bf0:	10c5c83a 	sub	r2,r2,r3
  812bf4:	e0bff815 	stw	r2,-32(fp)
  812bf8:	00000406 	br	812c0c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  812bfc:	00820004 	movi	r2,2048
  812c00:	e0fff617 	ldw	r3,-40(fp)
  812c04:	10c5c83a 	sub	r2,r2,r3
  812c08:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  812c0c:	e0bff817 	ldw	r2,-32(fp)
  812c10:	1005003a 	cmpeq	r2,r2,zero
  812c14:	10001f1e 	bne	r2,zero,812c94 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  812c18:	e0fffd17 	ldw	r3,-12(fp)
  812c1c:	e0bff817 	ldw	r2,-32(fp)
  812c20:	1880022e 	bgeu	r3,r2,812c2c <altera_avalon_jtag_uart_read+0x94>
        n = space;
  812c24:	e0bffd17 	ldw	r2,-12(fp)
  812c28:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  812c2c:	e0bffb17 	ldw	r2,-20(fp)
  812c30:	10c00e04 	addi	r3,r2,56
  812c34:	e0bff617 	ldw	r2,-40(fp)
  812c38:	1887883a 	add	r3,r3,r2
  812c3c:	e0bffa17 	ldw	r2,-24(fp)
  812c40:	1009883a 	mov	r4,r2
  812c44:	180b883a 	mov	r5,r3
  812c48:	e1bff817 	ldw	r6,-32(fp)
  812c4c:	080e4600 	call	80e460 <memcpy>
      ptr   += n;
  812c50:	e0fff817 	ldw	r3,-32(fp)
  812c54:	e0bffa17 	ldw	r2,-24(fp)
  812c58:	10c5883a 	add	r2,r2,r3
  812c5c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  812c60:	e0fffd17 	ldw	r3,-12(fp)
  812c64:	e0bff817 	ldw	r2,-32(fp)
  812c68:	1885c83a 	sub	r2,r3,r2
  812c6c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812c70:	e0fff617 	ldw	r3,-40(fp)
  812c74:	e0bff817 	ldw	r2,-32(fp)
  812c78:	1885883a 	add	r2,r3,r2
  812c7c:	10c1ffcc 	andi	r3,r2,2047
  812c80:	e0bffb17 	ldw	r2,-20(fp)
  812c84:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  812c88:	e0bffd17 	ldw	r2,-12(fp)
  812c8c:	10800048 	cmpgei	r2,r2,1
  812c90:	103fcc1e 	bne	r2,zero,812bc4 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  812c94:	e0fffa17 	ldw	r3,-24(fp)
  812c98:	e0bffc17 	ldw	r2,-16(fp)
  812c9c:	1880141e 	bne	r3,r2,812cf0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  812ca0:	e0bffe17 	ldw	r2,-8(fp)
  812ca4:	1090000c 	andi	r2,r2,16384
  812ca8:	1004c03a 	cmpne	r2,r2,zero
  812cac:	1000101e 	bne	r2,zero,812cf0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  812cb0:	e0bffb17 	ldw	r2,-20(fp)
  812cb4:	10c00a17 	ldw	r3,40(r2)
  812cb8:	e0bff717 	ldw	r2,-36(fp)
  812cbc:	1880051e 	bne	r3,r2,812cd4 <altera_avalon_jtag_uart_read+0x13c>
  812cc0:	e0bffb17 	ldw	r2,-20(fp)
  812cc4:	10c00917 	ldw	r3,36(r2)
  812cc8:	e0bffb17 	ldw	r2,-20(fp)
  812ccc:	10800117 	ldw	r2,4(r2)
  812cd0:	18bff736 	bltu	r3,r2,812cb0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  812cd4:	e0bffb17 	ldw	r2,-20(fp)
  812cd8:	10c00a17 	ldw	r3,40(r2)
  812cdc:	e0bff717 	ldw	r2,-36(fp)
  812ce0:	18800326 	beq	r3,r2,812cf0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  812ce4:	e0bffd17 	ldw	r2,-12(fp)
  812ce8:	10800048 	cmpgei	r2,r2,1
  812cec:	103fb51e 	bne	r2,zero,812bc4 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  812cf0:	e0fffa17 	ldw	r3,-24(fp)
  812cf4:	e0bffc17 	ldw	r2,-16(fp)
  812cf8:	18801926 	beq	r3,r2,812d60 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812cfc:	0005303a 	rdctl	r2,status
  812d00:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812d04:	e0fff517 	ldw	r3,-44(fp)
  812d08:	00bfff84 	movi	r2,-2
  812d0c:	1884703a 	and	r2,r3,r2
  812d10:	1001703a 	wrctl	status,r2
  
  return context;
  812d14:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  812d18:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  812d1c:	e0bffb17 	ldw	r2,-20(fp)
  812d20:	10800817 	ldw	r2,32(r2)
  812d24:	10c00054 	ori	r3,r2,1
  812d28:	e0bffb17 	ldw	r2,-20(fp)
  812d2c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  812d30:	e0bffb17 	ldw	r2,-20(fp)
  812d34:	10800017 	ldw	r2,0(r2)
  812d38:	11000104 	addi	r4,r2,4
  812d3c:	e0bffb17 	ldw	r2,-20(fp)
  812d40:	10800817 	ldw	r2,32(r2)
  812d44:	1007883a 	mov	r3,r2
  812d48:	2005883a 	mov	r2,r4
  812d4c:	10c00035 	stwio	r3,0(r2)
  812d50:	e0bff917 	ldw	r2,-28(fp)
  812d54:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812d58:	e0bff417 	ldw	r2,-48(fp)
  812d5c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  812d60:	e0fffa17 	ldw	r3,-24(fp)
  812d64:	e0bffc17 	ldw	r2,-16(fp)
  812d68:	18800526 	beq	r3,r2,812d80 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  812d6c:	e0fffa17 	ldw	r3,-24(fp)
  812d70:	e0bffc17 	ldw	r2,-16(fp)
  812d74:	1887c83a 	sub	r3,r3,r2
  812d78:	e0ffff15 	stw	r3,-4(fp)
  812d7c:	00000906 	br	812da4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  812d80:	e0bffe17 	ldw	r2,-8(fp)
  812d84:	1090000c 	andi	r2,r2,16384
  812d88:	1005003a 	cmpeq	r2,r2,zero
  812d8c:	1000031e 	bne	r2,zero,812d9c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  812d90:	00bffd44 	movi	r2,-11
  812d94:	e0bfff15 	stw	r2,-4(fp)
  812d98:	00000206 	br	812da4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  812d9c:	00bffec4 	movi	r2,-5
  812da0:	e0bfff15 	stw	r2,-4(fp)
  812da4:	e0bfff17 	ldw	r2,-4(fp)
}
  812da8:	e037883a 	mov	sp,fp
  812dac:	dfc00117 	ldw	ra,4(sp)
  812db0:	df000017 	ldw	fp,0(sp)
  812db4:	dec00204 	addi	sp,sp,8
  812db8:	f800283a 	ret

00812dbc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  812dbc:	defff204 	addi	sp,sp,-56
  812dc0:	dfc00d15 	stw	ra,52(sp)
  812dc4:	df000c15 	stw	fp,48(sp)
  812dc8:	df000c04 	addi	fp,sp,48
  812dcc:	e13ffb15 	stw	r4,-20(fp)
  812dd0:	e17ffc15 	stw	r5,-16(fp)
  812dd4:	e1bffd15 	stw	r6,-12(fp)
  812dd8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  812ddc:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  812de0:	e0bffc17 	ldw	r2,-16(fp)
  812de4:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  812de8:	00003a06 	br	812ed4 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  812dec:	e0bffb17 	ldw	r2,-20(fp)
  812df0:	10800c17 	ldw	r2,48(r2)
  812df4:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  812df8:	e0bffb17 	ldw	r2,-20(fp)
  812dfc:	10800d17 	ldw	r2,52(r2)
  812e00:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  812e04:	e0fffa17 	ldw	r3,-24(fp)
  812e08:	e0bff917 	ldw	r2,-28(fp)
  812e0c:	1880062e 	bgeu	r3,r2,812e28 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  812e10:	e0fff917 	ldw	r3,-28(fp)
  812e14:	e0bffa17 	ldw	r2,-24(fp)
  812e18:	1885c83a 	sub	r2,r3,r2
  812e1c:	10bfffc4 	addi	r2,r2,-1
  812e20:	e0bff815 	stw	r2,-32(fp)
  812e24:	00000c06 	br	812e58 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  812e28:	e0bff917 	ldw	r2,-28(fp)
  812e2c:	1005003a 	cmpeq	r2,r2,zero
  812e30:	1000051e 	bne	r2,zero,812e48 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  812e34:	00820004 	movi	r2,2048
  812e38:	e0fffa17 	ldw	r3,-24(fp)
  812e3c:	10c5c83a 	sub	r2,r2,r3
  812e40:	e0bff815 	stw	r2,-32(fp)
  812e44:	00000406 	br	812e58 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  812e48:	0081ffc4 	movi	r2,2047
  812e4c:	e0fffa17 	ldw	r3,-24(fp)
  812e50:	10c5c83a 	sub	r2,r2,r3
  812e54:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  812e58:	e0bff817 	ldw	r2,-32(fp)
  812e5c:	1005003a 	cmpeq	r2,r2,zero
  812e60:	10001f1e 	bne	r2,zero,812ee0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  812e64:	e0fffd17 	ldw	r3,-12(fp)
  812e68:	e0bff817 	ldw	r2,-32(fp)
  812e6c:	1880022e 	bgeu	r3,r2,812e78 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  812e70:	e0bffd17 	ldw	r2,-12(fp)
  812e74:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  812e78:	e0bffb17 	ldw	r2,-20(fp)
  812e7c:	10c20e04 	addi	r3,r2,2104
  812e80:	e0bffa17 	ldw	r2,-24(fp)
  812e84:	1885883a 	add	r2,r3,r2
  812e88:	e0fffc17 	ldw	r3,-16(fp)
  812e8c:	1009883a 	mov	r4,r2
  812e90:	180b883a 	mov	r5,r3
  812e94:	e1bff817 	ldw	r6,-32(fp)
  812e98:	080e4600 	call	80e460 <memcpy>
      ptr   += n;
  812e9c:	e0fff817 	ldw	r3,-32(fp)
  812ea0:	e0bffc17 	ldw	r2,-16(fp)
  812ea4:	10c5883a 	add	r2,r2,r3
  812ea8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  812eac:	e0fffd17 	ldw	r3,-12(fp)
  812eb0:	e0bff817 	ldw	r2,-32(fp)
  812eb4:	1885c83a 	sub	r2,r3,r2
  812eb8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812ebc:	e0fffa17 	ldw	r3,-24(fp)
  812ec0:	e0bff817 	ldw	r2,-32(fp)
  812ec4:	1885883a 	add	r2,r3,r2
  812ec8:	10c1ffcc 	andi	r3,r2,2047
  812ecc:	e0bffb17 	ldw	r2,-20(fp)
  812ed0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  812ed4:	e0bffd17 	ldw	r2,-12(fp)
  812ed8:	10800048 	cmpgei	r2,r2,1
  812edc:	103fc31e 	bne	r2,zero,812dec <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812ee0:	0005303a 	rdctl	r2,status
  812ee4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812ee8:	e0fff517 	ldw	r3,-44(fp)
  812eec:	00bfff84 	movi	r2,-2
  812ef0:	1884703a 	and	r2,r3,r2
  812ef4:	1001703a 	wrctl	status,r2
  
  return context;
  812ef8:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  812efc:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  812f00:	e0bffb17 	ldw	r2,-20(fp)
  812f04:	10800817 	ldw	r2,32(r2)
  812f08:	10c00094 	ori	r3,r2,2
  812f0c:	e0bffb17 	ldw	r2,-20(fp)
  812f10:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  812f14:	e0bffb17 	ldw	r2,-20(fp)
  812f18:	10800017 	ldw	r2,0(r2)
  812f1c:	11000104 	addi	r4,r2,4
  812f20:	e0bffb17 	ldw	r2,-20(fp)
  812f24:	10800817 	ldw	r2,32(r2)
  812f28:	1007883a 	mov	r3,r2
  812f2c:	2005883a 	mov	r2,r4
  812f30:	10c00035 	stwio	r3,0(r2)
  812f34:	e0bff717 	ldw	r2,-36(fp)
  812f38:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812f3c:	e0bff417 	ldw	r2,-48(fp)
  812f40:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  812f44:	e0bffd17 	ldw	r2,-12(fp)
  812f48:	10800050 	cmplti	r2,r2,1
  812f4c:	1000111e 	bne	r2,zero,812f94 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  812f50:	e0bffe17 	ldw	r2,-8(fp)
  812f54:	1090000c 	andi	r2,r2,16384
  812f58:	1004c03a 	cmpne	r2,r2,zero
  812f5c:	1000101e 	bne	r2,zero,812fa0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  812f60:	e0bffb17 	ldw	r2,-20(fp)
  812f64:	10c00d17 	ldw	r3,52(r2)
  812f68:	e0bff917 	ldw	r2,-28(fp)
  812f6c:	1880051e 	bne	r3,r2,812f84 <altera_avalon_jtag_uart_write+0x1c8>
  812f70:	e0bffb17 	ldw	r2,-20(fp)
  812f74:	10c00917 	ldw	r3,36(r2)
  812f78:	e0bffb17 	ldw	r2,-20(fp)
  812f7c:	10800117 	ldw	r2,4(r2)
  812f80:	18bff736 	bltu	r3,r2,812f60 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  812f84:	e0bffb17 	ldw	r2,-20(fp)
  812f88:	10c00d17 	ldw	r3,52(r2)
  812f8c:	e0bff917 	ldw	r2,-28(fp)
  812f90:	18800326 	beq	r3,r2,812fa0 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  812f94:	e0bffd17 	ldw	r2,-12(fp)
  812f98:	10800048 	cmpgei	r2,r2,1
  812f9c:	103fcd1e 	bne	r2,zero,812ed4 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  812fa0:	e0fffc17 	ldw	r3,-16(fp)
  812fa4:	e0bff617 	ldw	r2,-40(fp)
  812fa8:	18800526 	beq	r3,r2,812fc0 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  812fac:	e0fffc17 	ldw	r3,-16(fp)
  812fb0:	e0bff617 	ldw	r2,-40(fp)
  812fb4:	1887c83a 	sub	r3,r3,r2
  812fb8:	e0ffff15 	stw	r3,-4(fp)
  812fbc:	00000906 	br	812fe4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  812fc0:	e0bffe17 	ldw	r2,-8(fp)
  812fc4:	1090000c 	andi	r2,r2,16384
  812fc8:	1005003a 	cmpeq	r2,r2,zero
  812fcc:	1000031e 	bne	r2,zero,812fdc <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  812fd0:	00bffd44 	movi	r2,-11
  812fd4:	e0bfff15 	stw	r2,-4(fp)
  812fd8:	00000206 	br	812fe4 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  812fdc:	00bffec4 	movi	r2,-5
  812fe0:	e0bfff15 	stw	r2,-4(fp)
  812fe4:	e0bfff17 	ldw	r2,-4(fp)
}
  812fe8:	e037883a 	mov	sp,fp
  812fec:	dfc00117 	ldw	ra,4(sp)
  812ff0:	df000017 	ldw	fp,0(sp)
  812ff4:	dec00204 	addi	sp,sp,8
  812ff8:	f800283a 	ret

00812ffc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  812ffc:	defff904 	addi	sp,sp,-28
  813000:	dfc00615 	stw	ra,24(sp)
  813004:	df000515 	stw	fp,20(sp)
  813008:	df000504 	addi	fp,sp,20
  81300c:	e13ffe15 	stw	r4,-8(fp)
  813010:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  813014:	e0bffe17 	ldw	r2,-8(fp)
  813018:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  81301c:	e0bffe17 	ldw	r2,-8(fp)
  813020:	10800104 	addi	r2,r2,4
  813024:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813028:	0005303a 	rdctl	r2,status
  81302c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813030:	e0fffc17 	ldw	r3,-16(fp)
  813034:	00bfff84 	movi	r2,-2
  813038:	1884703a 	and	r2,r3,r2
  81303c:	1001703a 	wrctl	status,r2
  
  return context;
  813040:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  813044:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
  813048:	0811eb80 	call	811eb8 <alt_tick>
  81304c:	e0bffd17 	ldw	r2,-12(fp)
  813050:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813054:	e0bffb17 	ldw	r2,-20(fp)
  813058:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  81305c:	e037883a 	mov	sp,fp
  813060:	dfc00117 	ldw	ra,4(sp)
  813064:	df000017 	ldw	fp,0(sp)
  813068:	dec00204 	addi	sp,sp,8
  81306c:	f800283a 	ret

00813070 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  813070:	defff904 	addi	sp,sp,-28
  813074:	dfc00615 	stw	ra,24(sp)
  813078:	df000515 	stw	fp,20(sp)
  81307c:	df000504 	addi	fp,sp,20
  813080:	e13ffc15 	stw	r4,-16(fp)
  813084:	e17ffd15 	stw	r5,-12(fp)
  813088:	e1bffe15 	stw	r6,-8(fp)
  81308c:	e1ffff15 	stw	r7,-4(fp)
  813090:	e0bfff17 	ldw	r2,-4(fp)
  813094:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  813098:	008020b4 	movhi	r2,130
  81309c:	10bf0904 	addi	r2,r2,-988
  8130a0:	10800017 	ldw	r2,0(r2)
  8130a4:	1004c03a 	cmpne	r2,r2,zero
  8130a8:	1000041e 	bne	r2,zero,8130bc <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  8130ac:	00c020b4 	movhi	r3,130
  8130b0:	18ff0904 	addi	r3,r3,-988
  8130b4:	e0bffb17 	ldw	r2,-20(fp)
  8130b8:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8130bc:	e0bffc17 	ldw	r2,-16(fp)
  8130c0:	10800104 	addi	r2,r2,4
  8130c4:	1007883a 	mov	r3,r2
  8130c8:	008001c4 	movi	r2,7
  8130cc:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  8130d0:	e13ffe17 	ldw	r4,-8(fp)
  8130d4:	e17ffc17 	ldw	r5,-16(fp)
  8130d8:	01802074 	movhi	r6,129
  8130dc:	318bff04 	addi	r6,r6,12284
  8130e0:	08115bc0 	call	8115bc <alt_irq_register>
#endif  
}
  8130e4:	e037883a 	mov	sp,fp
  8130e8:	dfc00117 	ldw	ra,4(sp)
  8130ec:	df000017 	ldw	fp,0(sp)
  8130f0:	dec00204 	addi	sp,sp,8
  8130f4:	f800283a 	ret

008130f8 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  8130f8:	defffd04 	addi	sp,sp,-12
  8130fc:	df000215 	stw	fp,8(sp)
  813100:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
  813104:	008020b4 	movhi	r2,130
  813108:	10bf0b04 	addi	r2,r2,-980
  81310c:	10800017 	ldw	r2,0(r2)
  813110:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
  813114:	008020b4 	movhi	r2,130
  813118:	10bf0c04 	addi	r2,r2,-976
  81311c:	10800017 	ldw	r2,0(r2)
  813120:	1004c03a 	cmpne	r2,r2,zero
  813124:	1000031e 	bne	r2,zero,813134 <alt_timestamp_start+0x3c>
  {
    return -1;
  813128:	00bfffc4 	movi	r2,-1
  81312c:	e0bfff15 	stw	r2,-4(fp)
  813130:	00001506 	br	813188 <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
  813134:	e0bffe17 	ldw	r2,-8(fp)
  813138:	10800104 	addi	r2,r2,4
  81313c:	1007883a 	mov	r3,r2
  813140:	00800204 	movi	r2,8
  813144:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
  813148:	e0bffe17 	ldw	r2,-8(fp)
  81314c:	10800204 	addi	r2,r2,8
  813150:	1007883a 	mov	r3,r2
  813154:	00bfffd4 	movui	r2,65535
  813158:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
  81315c:	e0bffe17 	ldw	r2,-8(fp)
  813160:	10800304 	addi	r2,r2,12
  813164:	1007883a 	mov	r3,r2
  813168:	00bfffd4 	movui	r2,65535
  81316c:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
  813170:	e0bffe17 	ldw	r2,-8(fp)
  813174:	10800104 	addi	r2,r2,4
  813178:	1007883a 	mov	r3,r2
  81317c:	00800104 	movi	r2,4
  813180:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
  813184:	e03fff15 	stw	zero,-4(fp)
  813188:	e0bfff17 	ldw	r2,-4(fp)
}
  81318c:	e037883a 	mov	sp,fp
  813190:	df000017 	ldw	fp,0(sp)
  813194:	dec00104 	addi	sp,sp,4
  813198:	f800283a 	ret

0081319c <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
  81319c:	defffb04 	addi	sp,sp,-20
  8131a0:	df000415 	stw	fp,16(sp)
  8131a4:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
  8131a8:	008020b4 	movhi	r2,130
  8131ac:	10bf0b04 	addi	r2,r2,-980
  8131b0:	10800017 	ldw	r2,0(r2)
  8131b4:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
  8131b8:	008020b4 	movhi	r2,130
  8131bc:	10bf0c04 	addi	r2,r2,-976
  8131c0:	10800017 	ldw	r2,0(r2)
  8131c4:	1004c03a 	cmpne	r2,r2,zero
  8131c8:	1000031e 	bne	r2,zero,8131d8 <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
  8131cc:	00bfffc4 	movi	r2,-1
  8131d0:	e0bfff15 	stw	r2,-4(fp)
  8131d4:	00001306 	br	813224 <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
  8131d8:	e0bffe17 	ldw	r2,-8(fp)
  8131dc:	10800404 	addi	r2,r2,16
  8131e0:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
  8131e4:	e0bffe17 	ldw	r2,-8(fp)
  8131e8:	10800404 	addi	r2,r2,16
  8131ec:	10800037 	ldwio	r2,0(r2)
  8131f0:	10bfffcc 	andi	r2,r2,65535
  8131f4:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
  8131f8:	e0bffe17 	ldw	r2,-8(fp)
  8131fc:	10800504 	addi	r2,r2,20
  813200:	10800037 	ldwio	r2,0(r2)
  813204:	10bfffcc 	andi	r2,r2,65535
  813208:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
  81320c:	e0bffc17 	ldw	r2,-16(fp)
  813210:	1006943a 	slli	r3,r2,16
  813214:	e0bffd17 	ldw	r2,-12(fp)
  813218:	1884b03a 	or	r2,r3,r2
  81321c:	0084303a 	nor	r2,zero,r2
  813220:	e0bfff15 	stw	r2,-4(fp)
  813224:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
  813228:	e037883a 	mov	sp,fp
  81322c:	df000017 	ldw	fp,0(sp)
  813230:	dec00104 	addi	sp,sp,4
  813234:	f800283a 	ret

00813238 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
  813238:	deffff04 	addi	sp,sp,-4
  81323c:	df000015 	stw	fp,0(sp)
  813240:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
  813244:	008020b4 	movhi	r2,130
  813248:	10bf0c04 	addi	r2,r2,-976
  81324c:	10800017 	ldw	r2,0(r2)
}
  813250:	e037883a 	mov	sp,fp
  813254:	df000017 	ldw	fp,0(sp)
  813258:	dec00104 	addi	sp,sp,4
  81325c:	f800283a 	ret

00813260 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
  813260:	defffc04 	addi	sp,sp,-16
  813264:	dfc00315 	stw	ra,12(sp)
  813268:	df000215 	stw	fp,8(sp)
  81326c:	df000204 	addi	fp,sp,8
  813270:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  813274:	e13fff17 	ldw	r4,-4(fp)
  813278:	014020b4 	movhi	r5,130
  81327c:	2977d504 	addi	r5,r5,-8364
  813280:	081aa140 	call	81aa14 <alt_find_dev>
  813284:	e0bffe15 	stw	r2,-8(fp)
  return dev;
  813288:	e0bffe17 	ldw	r2,-8(fp)
}
  81328c:	e037883a 	mov	sp,fp
  813290:	dfc00117 	ldw	ra,4(sp)
  813294:	df000017 	ldw	fp,0(sp)
  813298:	dec00204 	addi	sp,sp,8
  81329c:	f800283a 	ret

008132a0 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
  8132a0:	defffd04 	addi	sp,sp,-12
  8132a4:	df000215 	stw	fp,8(sp)
  8132a8:	df000204 	addi	fp,sp,8
  8132ac:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8132b0:	e0bfff17 	ldw	r2,-4(fp)
  8132b4:	10800a17 	ldw	r2,40(r2)
  8132b8:	10800037 	ldwio	r2,0(r2)
  8132bc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
  8132c0:	e0bffe17 	ldw	r2,-8(fp)
  8132c4:	10800054 	ori	r2,r2,1
  8132c8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8132cc:	e0bfff17 	ldw	r2,-4(fp)
  8132d0:	10800a17 	ldw	r2,40(r2)
  8132d4:	e0fffe17 	ldw	r3,-8(fp)
  8132d8:	10c00035 	stwio	r3,0(r2)
}
  8132dc:	e037883a 	mov	sp,fp
  8132e0:	df000017 	ldw	fp,0(sp)
  8132e4:	dec00104 	addi	sp,sp,4
  8132e8:	f800283a 	ret

008132ec <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
  8132ec:	defffd04 	addi	sp,sp,-12
  8132f0:	df000215 	stw	fp,8(sp)
  8132f4:	df000204 	addi	fp,sp,8
  8132f8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8132fc:	e0bfff17 	ldw	r2,-4(fp)
  813300:	10800a17 	ldw	r2,40(r2)
  813304:	10800037 	ldwio	r2,0(r2)
  813308:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
  81330c:	e0fffe17 	ldw	r3,-8(fp)
  813310:	00bfff84 	movi	r2,-2
  813314:	1884703a 	and	r2,r3,r2
  813318:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81331c:	e0bfff17 	ldw	r2,-4(fp)
  813320:	10800a17 	ldw	r2,40(r2)
  813324:	e0fffe17 	ldw	r3,-8(fp)
  813328:	10c00035 	stwio	r3,0(r2)
}
  81332c:	e037883a 	mov	sp,fp
  813330:	df000017 	ldw	fp,0(sp)
  813334:	dec00104 	addi	sp,sp,4
  813338:	f800283a 	ret

0081333c <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
  81333c:	defffd04 	addi	sp,sp,-12
  813340:	df000215 	stw	fp,8(sp)
  813344:	df000204 	addi	fp,sp,8
  813348:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81334c:	e0bfff17 	ldw	r2,-4(fp)
  813350:	10800a17 	ldw	r2,40(r2)
  813354:	10800037 	ldwio	r2,0(r2)
  813358:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
  81335c:	e0bffe17 	ldw	r2,-8(fp)
  813360:	10800094 	ori	r2,r2,2
  813364:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  813368:	e0bfff17 	ldw	r2,-4(fp)
  81336c:	10800a17 	ldw	r2,40(r2)
  813370:	e0fffe17 	ldw	r3,-8(fp)
  813374:	10c00035 	stwio	r3,0(r2)
}
  813378:	e037883a 	mov	sp,fp
  81337c:	df000017 	ldw	fp,0(sp)
  813380:	dec00104 	addi	sp,sp,4
  813384:	f800283a 	ret

00813388 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
  813388:	defffd04 	addi	sp,sp,-12
  81338c:	df000215 	stw	fp,8(sp)
  813390:	df000204 	addi	fp,sp,8
  813394:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  813398:	e0bfff17 	ldw	r2,-4(fp)
  81339c:	10800a17 	ldw	r2,40(r2)
  8133a0:	10800037 	ldwio	r2,0(r2)
  8133a4:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
  8133a8:	e0fffe17 	ldw	r3,-8(fp)
  8133ac:	00bfff44 	movi	r2,-3
  8133b0:	1884703a 	and	r2,r3,r2
  8133b4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8133b8:	e0bfff17 	ldw	r2,-4(fp)
  8133bc:	10800a17 	ldw	r2,40(r2)
  8133c0:	e0fffe17 	ldw	r3,-8(fp)
  8133c4:	10c00035 	stwio	r3,0(r2)
}
  8133c8:	e037883a 	mov	sp,fp
  8133cc:	df000017 	ldw	fp,0(sp)
  8133d0:	dec00104 	addi	sp,sp,4
  8133d4:	f800283a 	ret

008133d8 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
  8133d8:	defffd04 	addi	sp,sp,-12
  8133dc:	df000215 	stw	fp,8(sp)
  8133e0:	df000204 	addi	fp,sp,8
  8133e4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8133e8:	e0bfff17 	ldw	r2,-4(fp)
  8133ec:	10800a17 	ldw	r2,40(r2)
  8133f0:	10800037 	ldwio	r2,0(r2)
  8133f4:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
  8133f8:	e0bffe17 	ldw	r2,-8(fp)
  8133fc:	1080400c 	andi	r2,r2,256
  813400:	1004c03a 	cmpne	r2,r2,zero
}
  813404:	e037883a 	mov	sp,fp
  813408:	df000017 	ldw	fp,0(sp)
  81340c:	dec00104 	addi	sp,sp,4
  813410:	f800283a 	ret

00813414 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
  813414:	defffd04 	addi	sp,sp,-12
  813418:	df000215 	stw	fp,8(sp)
  81341c:	df000204 	addi	fp,sp,8
  813420:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  813424:	e0bfff17 	ldw	r2,-4(fp)
  813428:	10800a17 	ldw	r2,40(r2)
  81342c:	10800037 	ldwio	r2,0(r2)
  813430:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
  813434:	e0bffe17 	ldw	r2,-8(fp)
  813438:	1080800c 	andi	r2,r2,512
  81343c:	1004c03a 	cmpne	r2,r2,zero
}
  813440:	e037883a 	mov	sp,fp
  813444:	df000017 	ldw	fp,0(sp)
  813448:	dec00104 	addi	sp,sp,4
  81344c:	f800283a 	ret

00813450 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
  813450:	defffd04 	addi	sp,sp,-12
  813454:	df000215 	stw	fp,8(sp)
  813458:	df000204 	addi	fp,sp,8
  81345c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  813460:	e0bfff17 	ldw	r2,-4(fp)
  813464:	10800a17 	ldw	r2,40(r2)
  813468:	10800037 	ldwio	r2,0(r2)
  81346c:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
  813470:	e0bffe17 	ldw	r2,-8(fp)
  813474:	10800114 	ori	r2,r2,4
  813478:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  81347c:	e0bffe17 	ldw	r2,-8(fp)
  813480:	10800214 	ori	r2,r2,8
  813484:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  813488:	e0bfff17 	ldw	r2,-4(fp)
  81348c:	10800a17 	ldw	r2,40(r2)
  813490:	e0fffe17 	ldw	r3,-8(fp)
  813494:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
  813498:	e0fffe17 	ldw	r3,-8(fp)
  81349c:	00bffec4 	movi	r2,-5
  8134a0:	1884703a 	and	r2,r3,r2
  8134a4:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
  8134a8:	e0fffe17 	ldw	r3,-8(fp)
  8134ac:	00bffdc4 	movi	r2,-9
  8134b0:	1884703a 	and	r2,r3,r2
  8134b4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8134b8:	e0bfff17 	ldw	r2,-4(fp)
  8134bc:	10800a17 	ldw	r2,40(r2)
  8134c0:	e0fffe17 	ldw	r3,-8(fp)
  8134c4:	10c00035 	stwio	r3,0(r2)
}
  8134c8:	e037883a 	mov	sp,fp
  8134cc:	df000017 	ldw	fp,0(sp)
  8134d0:	dec00104 	addi	sp,sp,4
  8134d4:	f800283a 	ret

008134d8 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
  8134d8:	defffb04 	addi	sp,sp,-20
  8134dc:	df000415 	stw	fp,16(sp)
  8134e0:	df000404 	addi	fp,sp,16
  8134e4:	e13ffd15 	stw	r4,-12(fp)
  8134e8:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  8134ec:	e0bffd17 	ldw	r2,-12(fp)
  8134f0:	10800a17 	ldw	r2,40(r2)
  8134f4:	10800104 	addi	r2,r2,4
  8134f8:	10800037 	ldwio	r2,0(r2)
  8134fc:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  813500:	e0bffe17 	ldw	r2,-8(fp)
  813504:	1004c03a 	cmpne	r2,r2,zero
  813508:	1000051e 	bne	r2,zero,813520 <alt_up_audio_read_fifo_avail+0x48>
  81350c:	e0bffc17 	ldw	r2,-16(fp)
  813510:	10bfc00c 	andi	r2,r2,65280
  813514:	1004d23a 	srli	r2,r2,8
  813518:	e0bfff15 	stw	r2,-4(fp)
  81351c:	00000306 	br	81352c <alt_up_audio_read_fifo_avail+0x54>
  813520:	e0bffc17 	ldw	r2,-16(fp)
  813524:	10803fcc 	andi	r2,r2,255
  813528:	e0bfff15 	stw	r2,-4(fp)
  81352c:	e0bfff17 	ldw	r2,-4(fp)
  813530:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
  813534:	e0bffc17 	ldw	r2,-16(fp)
}
  813538:	e037883a 	mov	sp,fp
  81353c:	df000017 	ldw	fp,0(sp)
  813540:	dec00104 	addi	sp,sp,4
  813544:	f800283a 	ret

00813548 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  813548:	defff904 	addi	sp,sp,-28
  81354c:	dfc00615 	stw	ra,24(sp)
  813550:	df000515 	stw	fp,20(sp)
  813554:	df000504 	addi	fp,sp,20
  813558:	e13ffc15 	stw	r4,-16(fp)
  81355c:	e17ffd15 	stw	r5,-12(fp)
  813560:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
  813564:	e13ffc17 	ldw	r4,-16(fp)
  813568:	01400044 	movi	r5,1
  81356c:	08134d80 	call	8134d8 <alt_up_audio_read_fifo_avail>
  813570:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  813574:	e0bffb17 	ldw	r2,-20(fp)
  813578:	10801868 	cmpgeui	r2,r2,97
  81357c:	1000021e 	bne	r2,zero,813588 <alt_up_audio_record_r+0x40>
		return 0;
  813580:	e03fff15 	stw	zero,-4(fp)
  813584:	00000606 	br	8135a0 <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  813588:	e13ffc17 	ldw	r4,-16(fp)
  81358c:	e17ffd17 	ldw	r5,-12(fp)
  813590:	e1bffe17 	ldw	r6,-8(fp)
  813594:	01c00044 	movi	r7,1
  813598:	081377c0 	call	81377c <alt_up_audio_read_fifo>
  81359c:	e0bfff15 	stw	r2,-4(fp)
  8135a0:	e0bfff17 	ldw	r2,-4(fp)
}
  8135a4:	e037883a 	mov	sp,fp
  8135a8:	dfc00117 	ldw	ra,4(sp)
  8135ac:	df000017 	ldw	fp,0(sp)
  8135b0:	dec00204 	addi	sp,sp,8
  8135b4:	f800283a 	ret

008135b8 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  8135b8:	defff904 	addi	sp,sp,-28
  8135bc:	dfc00615 	stw	ra,24(sp)
  8135c0:	df000515 	stw	fp,20(sp)
  8135c4:	df000504 	addi	fp,sp,20
  8135c8:	e13ffc15 	stw	r4,-16(fp)
  8135cc:	e17ffd15 	stw	r5,-12(fp)
  8135d0:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
  8135d4:	e13ffc17 	ldw	r4,-16(fp)
  8135d8:	000b883a 	mov	r5,zero
  8135dc:	08134d80 	call	8134d8 <alt_up_audio_read_fifo_avail>
  8135e0:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  8135e4:	e0bffb17 	ldw	r2,-20(fp)
  8135e8:	10801868 	cmpgeui	r2,r2,97
  8135ec:	1000021e 	bne	r2,zero,8135f8 <alt_up_audio_record_l+0x40>
		return 0;
  8135f0:	e03fff15 	stw	zero,-4(fp)
  8135f4:	00000606 	br	813610 <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  8135f8:	e13ffc17 	ldw	r4,-16(fp)
  8135fc:	e17ffd17 	ldw	r5,-12(fp)
  813600:	e1bffe17 	ldw	r6,-8(fp)
  813604:	000f883a 	mov	r7,zero
  813608:	081377c0 	call	81377c <alt_up_audio_read_fifo>
  81360c:	e0bfff15 	stw	r2,-4(fp)
  813610:	e0bfff17 	ldw	r2,-4(fp)
}
  813614:	e037883a 	mov	sp,fp
  813618:	dfc00117 	ldw	ra,4(sp)
  81361c:	df000017 	ldw	fp,0(sp)
  813620:	dec00204 	addi	sp,sp,8
  813624:	f800283a 	ret

00813628 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
  813628:	defffb04 	addi	sp,sp,-20
  81362c:	df000415 	stw	fp,16(sp)
  813630:	df000404 	addi	fp,sp,16
  813634:	e13ffd15 	stw	r4,-12(fp)
  813638:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  81363c:	e0bffd17 	ldw	r2,-12(fp)
  813640:	10800a17 	ldw	r2,40(r2)
  813644:	10800104 	addi	r2,r2,4
  813648:	10800037 	ldwio	r2,0(r2)
  81364c:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  813650:	e0bffe17 	ldw	r2,-8(fp)
  813654:	1004c03a 	cmpne	r2,r2,zero
  813658:	1000051e 	bne	r2,zero,813670 <alt_up_audio_write_fifo_space+0x48>
  81365c:	e0bffc17 	ldw	r2,-16(fp)
  813660:	10bfc02c 	andhi	r2,r2,65280
  813664:	1004d63a 	srli	r2,r2,24
  813668:	e0bfff15 	stw	r2,-4(fp)
  81366c:	00000406 	br	813680 <alt_up_audio_write_fifo_space+0x58>
  813670:	e0bffc17 	ldw	r2,-16(fp)
  813674:	10803fec 	andhi	r2,r2,255
  813678:	1004d43a 	srli	r2,r2,16
  81367c:	e0bfff15 	stw	r2,-4(fp)
  813680:	e0bfff17 	ldw	r2,-4(fp)
  813684:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
  813688:	e0bffc17 	ldw	r2,-16(fp)
}
  81368c:	e037883a 	mov	sp,fp
  813690:	df000017 	ldw	fp,0(sp)
  813694:	dec00104 	addi	sp,sp,4
  813698:	f800283a 	ret

0081369c <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  81369c:	defff904 	addi	sp,sp,-28
  8136a0:	dfc00615 	stw	ra,24(sp)
  8136a4:	df000515 	stw	fp,20(sp)
  8136a8:	df000504 	addi	fp,sp,20
  8136ac:	e13ffc15 	stw	r4,-16(fp)
  8136b0:	e17ffd15 	stw	r5,-12(fp)
  8136b4:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
  8136b8:	e13ffc17 	ldw	r4,-16(fp)
  8136bc:	01400044 	movi	r5,1
  8136c0:	08136280 	call	813628 <alt_up_audio_write_fifo_space>
  8136c4:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  8136c8:	e0bffb17 	ldw	r2,-20(fp)
  8136cc:	10801868 	cmpgeui	r2,r2,97
  8136d0:	1000021e 	bne	r2,zero,8136dc <alt_up_audio_play_r+0x40>
		return 0;
  8136d4:	e03fff15 	stw	zero,-4(fp)
  8136d8:	00000606 	br	8136f4 <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  8136dc:	e13ffc17 	ldw	r4,-16(fp)
  8136e0:	e17ffd17 	ldw	r5,-12(fp)
  8136e4:	e1bffe17 	ldw	r6,-8(fp)
  8136e8:	01c00044 	movi	r7,1
  8136ec:	08138800 	call	813880 <alt_up_audio_write_fifo>
  8136f0:	e0bfff15 	stw	r2,-4(fp)
  8136f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8136f8:	e037883a 	mov	sp,fp
  8136fc:	dfc00117 	ldw	ra,4(sp)
  813700:	df000017 	ldw	fp,0(sp)
  813704:	dec00204 	addi	sp,sp,8
  813708:	f800283a 	ret

0081370c <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  81370c:	defff904 	addi	sp,sp,-28
  813710:	dfc00615 	stw	ra,24(sp)
  813714:	df000515 	stw	fp,20(sp)
  813718:	df000504 	addi	fp,sp,20
  81371c:	e13ffc15 	stw	r4,-16(fp)
  813720:	e17ffd15 	stw	r5,-12(fp)
  813724:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
  813728:	e13ffc17 	ldw	r4,-16(fp)
  81372c:	000b883a 	mov	r5,zero
  813730:	08136280 	call	813628 <alt_up_audio_write_fifo_space>
  813734:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  813738:	e0bffb17 	ldw	r2,-20(fp)
  81373c:	10801868 	cmpgeui	r2,r2,97
  813740:	1000021e 	bne	r2,zero,81374c <alt_up_audio_play_l+0x40>
		return 0;
  813744:	e03fff15 	stw	zero,-4(fp)
  813748:	00000606 	br	813764 <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  81374c:	e13ffc17 	ldw	r4,-16(fp)
  813750:	e17ffd17 	ldw	r5,-12(fp)
  813754:	e1bffe17 	ldw	r6,-8(fp)
  813758:	000f883a 	mov	r7,zero
  81375c:	08138800 	call	813880 <alt_up_audio_write_fifo>
  813760:	e0bfff15 	stw	r2,-4(fp)
  813764:	e0bfff17 	ldw	r2,-4(fp)
}
  813768:	e037883a 	mov	sp,fp
  81376c:	dfc00117 	ldw	ra,4(sp)
  813770:	df000017 	ldw	fp,0(sp)
  813774:	dec00204 	addi	sp,sp,8
  813778:	f800283a 	ret

0081377c <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  81377c:	defff604 	addi	sp,sp,-40
  813780:	df000915 	stw	fp,36(sp)
  813784:	df000904 	addi	fp,sp,36
  813788:	e13ff915 	stw	r4,-28(fp)
  81378c:	e17ffa15 	stw	r5,-24(fp)
  813790:	e1bffb15 	stw	r6,-20(fp)
  813794:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
  813798:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
  81379c:	00003006 	br	813860 <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  8137a0:	e0bff917 	ldw	r2,-28(fp)
  8137a4:	10800a17 	ldw	r2,40(r2)
  8137a8:	10800104 	addi	r2,r2,4
  8137ac:	10800037 	ldwio	r2,0(r2)
  8137b0:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  8137b4:	e0bffc17 	ldw	r2,-16(fp)
  8137b8:	1004c03a 	cmpne	r2,r2,zero
  8137bc:	1000051e 	bne	r2,zero,8137d4 <alt_up_audio_read_fifo+0x58>
  8137c0:	e0bff817 	ldw	r2,-32(fp)
  8137c4:	10bfc00c 	andi	r2,r2,65280
  8137c8:	1004d23a 	srli	r2,r2,8
  8137cc:	e0bfff15 	stw	r2,-4(fp)
  8137d0:	00000306 	br	8137e0 <alt_up_audio_read_fifo+0x64>
  8137d4:	e0bff817 	ldw	r2,-32(fp)
  8137d8:	10803fcc 	andi	r2,r2,255
  8137dc:	e0bfff15 	stw	r2,-4(fp)
  8137e0:	e0bfff17 	ldw	r2,-4(fp)
  8137e4:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  8137e8:	e0bff817 	ldw	r2,-32(fp)
  8137ec:	1005003a 	cmpeq	r2,r2,zero
  8137f0:	10001e1e 	bne	r2,zero,81386c <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  8137f4:	e0bff717 	ldw	r2,-36(fp)
  8137f8:	1085883a 	add	r2,r2,r2
  8137fc:	1085883a 	add	r2,r2,r2
  813800:	1007883a 	mov	r3,r2
  813804:	e0bffa17 	ldw	r2,-24(fp)
  813808:	1887883a 	add	r3,r3,r2
  81380c:	e0fffe15 	stw	r3,-8(fp)
  813810:	e0bffc17 	ldw	r2,-16(fp)
  813814:	1004c03a 	cmpne	r2,r2,zero
  813818:	1000061e 	bne	r2,zero,813834 <alt_up_audio_read_fifo+0xb8>
  81381c:	e0bff917 	ldw	r2,-28(fp)
  813820:	10800a17 	ldw	r2,40(r2)
  813824:	10800204 	addi	r2,r2,8
  813828:	10800037 	ldwio	r2,0(r2)
  81382c:	e0bffd15 	stw	r2,-12(fp)
  813830:	00000506 	br	813848 <alt_up_audio_read_fifo+0xcc>
  813834:	e0bff917 	ldw	r2,-28(fp)
  813838:	10800a17 	ldw	r2,40(r2)
  81383c:	10800304 	addi	r2,r2,12
  813840:	10800037 	ldwio	r2,0(r2)
  813844:	e0bffd15 	stw	r2,-12(fp)
  813848:	e0fffd17 	ldw	r3,-12(fp)
  81384c:	e0bffe17 	ldw	r2,-8(fp)
  813850:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  813854:	e0bff717 	ldw	r2,-36(fp)
  813858:	10800044 	addi	r2,r2,1
  81385c:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  813860:	e0fff717 	ldw	r3,-36(fp)
  813864:	e0bffb17 	ldw	r2,-20(fp)
  813868:	18bfcd16 	blt	r3,r2,8137a0 <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
  81386c:	e0bff717 	ldw	r2,-36(fp)
}
  813870:	e037883a 	mov	sp,fp
  813874:	df000017 	ldw	fp,0(sp)
  813878:	dec00104 	addi	sp,sp,4
  81387c:	f800283a 	ret

00813880 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  813880:	defff804 	addi	sp,sp,-32
  813884:	df000715 	stw	fp,28(sp)
  813888:	df000704 	addi	fp,sp,28
  81388c:	e13ffb15 	stw	r4,-20(fp)
  813890:	e17ffc15 	stw	r5,-16(fp)
  813894:	e1bffd15 	stw	r6,-12(fp)
  813898:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
  81389c:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
  8138a0:	00003a06 	br	81398c <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  8138a4:	e0bffb17 	ldw	r2,-20(fp)
  8138a8:	10800a17 	ldw	r2,40(r2)
  8138ac:	10800104 	addi	r2,r2,4
  8138b0:	10800037 	ldwio	r2,0(r2)
  8138b4:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  8138b8:	e0bffe17 	ldw	r2,-8(fp)
  8138bc:	1004c03a 	cmpne	r2,r2,zero
  8138c0:	1000051e 	bne	r2,zero,8138d8 <alt_up_audio_write_fifo+0x58>
  8138c4:	e0bffa17 	ldw	r2,-24(fp)
  8138c8:	10bfc02c 	andhi	r2,r2,65280
  8138cc:	1004d63a 	srli	r2,r2,24
  8138d0:	e0bfff15 	stw	r2,-4(fp)
  8138d4:	00000406 	br	8138e8 <alt_up_audio_write_fifo+0x68>
  8138d8:	e0bffa17 	ldw	r2,-24(fp)
  8138dc:	10803fec 	andhi	r2,r2,255
  8138e0:	1004d43a 	srli	r2,r2,16
  8138e4:	e0bfff15 	stw	r2,-4(fp)
  8138e8:	e0bfff17 	ldw	r2,-4(fp)
  8138ec:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  8138f0:	e0bffa17 	ldw	r2,-24(fp)
  8138f4:	1005003a 	cmpeq	r2,r2,zero
  8138f8:	1000271e 	bne	r2,zero,813998 <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
  8138fc:	e0bffe17 	ldw	r2,-8(fp)
  813900:	1004c03a 	cmpne	r2,r2,zero
  813904:	1000111e 	bne	r2,zero,81394c <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  813908:	e0bffb17 	ldw	r2,-20(fp)
  81390c:	10800a17 	ldw	r2,40(r2)
  813910:	11000204 	addi	r4,r2,8
  813914:	e0bff917 	ldw	r2,-28(fp)
  813918:	1085883a 	add	r2,r2,r2
  81391c:	1085883a 	add	r2,r2,r2
  813920:	1007883a 	mov	r3,r2
  813924:	e0bffc17 	ldw	r2,-16(fp)
  813928:	1885883a 	add	r2,r3,r2
  81392c:	10800017 	ldw	r2,0(r2)
  813930:	1007883a 	mov	r3,r2
  813934:	e0bff917 	ldw	r2,-28(fp)
  813938:	10800044 	addi	r2,r2,1
  81393c:	e0bff915 	stw	r2,-28(fp)
  813940:	2005883a 	mov	r2,r4
  813944:	10c00035 	stwio	r3,0(r2)
  813948:	00001006 	br	81398c <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  81394c:	e0bffb17 	ldw	r2,-20(fp)
  813950:	10800a17 	ldw	r2,40(r2)
  813954:	11000304 	addi	r4,r2,12
  813958:	e0bff917 	ldw	r2,-28(fp)
  81395c:	1085883a 	add	r2,r2,r2
  813960:	1085883a 	add	r2,r2,r2
  813964:	1007883a 	mov	r3,r2
  813968:	e0bffc17 	ldw	r2,-16(fp)
  81396c:	1885883a 	add	r2,r3,r2
  813970:	10800017 	ldw	r2,0(r2)
  813974:	1007883a 	mov	r3,r2
  813978:	e0bff917 	ldw	r2,-28(fp)
  81397c:	10800044 	addi	r2,r2,1
  813980:	e0bff915 	stw	r2,-28(fp)
  813984:	2005883a 	mov	r2,r4
  813988:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  81398c:	e0fff917 	ldw	r3,-28(fp)
  813990:	e0bffd17 	ldw	r2,-12(fp)
  813994:	18bfc316 	blt	r3,r2,8138a4 <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
  813998:	e0bff917 	ldw	r2,-28(fp)
}
  81399c:	e037883a 	mov	sp,fp
  8139a0:	df000017 	ldw	fp,0(sp)
  8139a4:	dec00104 	addi	sp,sp,4
  8139a8:	f800283a 	ret

008139ac <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
  8139ac:	defffc04 	addi	sp,sp,-16
  8139b0:	df000315 	stw	fp,12(sp)
  8139b4:	df000304 	addi	fp,sp,12
  8139b8:	e13ffd15 	stw	r4,-12(fp)
  8139bc:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  8139c0:	e0bffe17 	ldw	r2,-8(fp)
  8139c4:	1004c03a 	cmpne	r2,r2,zero
  8139c8:	1000061e 	bne	r2,zero,8139e4 <alt_up_audio_read_fifo_head+0x38>
  8139cc:	e0bffd17 	ldw	r2,-12(fp)
  8139d0:	10800a17 	ldw	r2,40(r2)
  8139d4:	10800204 	addi	r2,r2,8
  8139d8:	10800037 	ldwio	r2,0(r2)
  8139dc:	e0bfff15 	stw	r2,-4(fp)
  8139e0:	00000506 	br	8139f8 <alt_up_audio_read_fifo_head+0x4c>
  8139e4:	e0bffd17 	ldw	r2,-12(fp)
  8139e8:	10800a17 	ldw	r2,40(r2)
  8139ec:	10800304 	addi	r2,r2,12
  8139f0:	10800037 	ldwio	r2,0(r2)
  8139f4:	e0bfff15 	stw	r2,-4(fp)
  8139f8:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
  8139fc:	e037883a 	mov	sp,fp
  813a00:	df000017 	ldw	fp,0(sp)
  813a04:	dec00104 	addi	sp,sp,4
  813a08:	f800283a 	ret

00813a0c <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
  813a0c:	defffc04 	addi	sp,sp,-16
  813a10:	df000315 	stw	fp,12(sp)
  813a14:	df000304 	addi	fp,sp,12
  813a18:	e13ffd15 	stw	r4,-12(fp)
  813a1c:	e17ffe15 	stw	r5,-8(fp)
  813a20:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
  813a24:	e0bfff17 	ldw	r2,-4(fp)
  813a28:	1004c03a 	cmpne	r2,r2,zero
  813a2c:	1000061e 	bne	r2,zero,813a48 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  813a30:	e0bffd17 	ldw	r2,-12(fp)
  813a34:	10800a17 	ldw	r2,40(r2)
  813a38:	10800204 	addi	r2,r2,8
  813a3c:	e0fffe17 	ldw	r3,-8(fp)
  813a40:	10c00035 	stwio	r3,0(r2)
  813a44:	00000506 	br	813a5c <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  813a48:	e0bffd17 	ldw	r2,-12(fp)
  813a4c:	10800a17 	ldw	r2,40(r2)
  813a50:	10800304 	addi	r2,r2,12
  813a54:	e0fffe17 	ldw	r3,-8(fp)
  813a58:	10c00035 	stwio	r3,0(r2)
}
  813a5c:	e037883a 	mov	sp,fp
  813a60:	df000017 	ldw	fp,0(sp)
  813a64:	dec00104 	addi	sp,sp,4
  813a68:	f800283a 	ret

00813a6c <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
  813a6c:	defffc04 	addi	sp,sp,-16
  813a70:	dfc00315 	stw	ra,12(sp)
  813a74:	df000215 	stw	fp,8(sp)
  813a78:	df000204 	addi	fp,sp,8
  813a7c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
  813a80:	e13fff17 	ldw	r4,-4(fp)
  813a84:	014020b4 	movhi	r5,130
  813a88:	2977d504 	addi	r5,r5,-8364
  813a8c:	081aa140 	call	81aa14 <alt_find_dev>
  813a90:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
  813a94:	e0bffe17 	ldw	r2,-8(fp)
  813a98:	10800a17 	ldw	r2,40(r2)
  813a9c:	10800104 	addi	r2,r2,4
  813aa0:	10800037 	ldwio	r2,0(r2)
  813aa4:	10803fec 	andhi	r2,r2,255
  813aa8:	1005d43a 	srai	r2,r2,16
  813aac:	1007883a 	mov	r3,r2
  813ab0:	e0bffe17 	ldw	r2,-8(fp)
  813ab4:	10c00b15 	stw	r3,44(r2)

  return dev;
  813ab8:	e0bffe17 	ldw	r2,-8(fp)
}
  813abc:	e037883a 	mov	sp,fp
  813ac0:	dfc00117 	ldw	ra,4(sp)
  813ac4:	df000017 	ldw	fp,0(sp)
  813ac8:	dec00204 	addi	sp,sp,8
  813acc:	f800283a 	ret

00813ad0 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  813ad0:	defffc04 	addi	sp,sp,-16
  813ad4:	df000315 	stw	fp,12(sp)
  813ad8:	df000304 	addi	fp,sp,12
  813adc:	e13ffd15 	stw	r4,-12(fp)
  813ae0:	e17ffe15 	stw	r5,-8(fp)
  813ae4:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  813ae8:	e0bffd17 	ldw	r2,-12(fp)
  813aec:	10800a17 	ldw	r2,40(r2)
  813af0:	11000204 	addi	r4,r2,8
  813af4:	e0bffe17 	ldw	r2,-8(fp)
  813af8:	10c03fcc 	andi	r3,r2,255
  813afc:	2005883a 	mov	r2,r4
  813b00:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
  813b04:	e0bffd17 	ldw	r2,-12(fp)
  813b08:	10800a17 	ldw	r2,40(r2)
  813b0c:	11000304 	addi	r4,r2,12
  813b10:	e0bfff17 	ldw	r2,-4(fp)
  813b14:	10ffffcc 	andi	r3,r2,65535
  813b18:	2005883a 	mov	r2,r4
  813b1c:	10c00035 	stwio	r3,0(r2)

	return 0;
  813b20:	0005883a 	mov	r2,zero
}
  813b24:	e037883a 	mov	sp,fp
  813b28:	df000017 	ldw	fp,0(sp)
  813b2c:	dec00104 	addi	sp,sp,4
  813b30:	f800283a 	ret

00813b34 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
  813b34:	defffa04 	addi	sp,sp,-24
  813b38:	dfc00515 	stw	ra,20(sp)
  813b3c:	df000415 	stw	fp,16(sp)
  813b40:	df000404 	addi	fp,sp,16
  813b44:	e13ffc15 	stw	r4,-16(fp)
  813b48:	e17ffd15 	stw	r5,-12(fp)
  813b4c:	e1bffe15 	stw	r6,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  813b50:	e0bffc17 	ldw	r2,-16(fp)
  813b54:	10800a17 	ldw	r2,40(r2)
  813b58:	11000204 	addi	r4,r2,8
  813b5c:	e0bffd17 	ldw	r2,-12(fp)
  813b60:	10c03fcc 	andi	r3,r2,255
  813b64:	2005883a 	mov	r2,r4
  813b68:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
  813b6c:	e0bffc17 	ldw	r2,-16(fp)
  813b70:	10800a17 	ldw	r2,40(r2)
  813b74:	10800304 	addi	r2,r2,12
  813b78:	10800037 	ldwio	r2,0(r2)
  813b7c:	1007883a 	mov	r3,r2
  813b80:	e0bffe17 	ldw	r2,-8(fp)
  813b84:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
  813b88:	e13ffc17 	ldw	r4,-16(fp)
  813b8c:	0813c600 	call	813c60 <alt_up_av_config_read_acknowledge>
  813b90:	1005003a 	cmpeq	r2,r2,zero
  813b94:	1000031e 	bne	r2,zero,813ba4 <alt_up_av_config_read_data+0x70>
		return -1;
  813b98:	00bfffc4 	movi	r2,-1
  813b9c:	e0bfff15 	stw	r2,-4(fp)
  813ba0:	00000106 	br	813ba8 <alt_up_av_config_read_data+0x74>

	return 0;
  813ba4:	e03fff15 	stw	zero,-4(fp)
  813ba8:	e0bfff17 	ldw	r2,-4(fp)
}
  813bac:	e037883a 	mov	sp,fp
  813bb0:	dfc00117 	ldw	ra,4(sp)
  813bb4:	df000017 	ldw	fp,0(sp)
  813bb8:	dec00204 	addi	sp,sp,8
  813bbc:	f800283a 	ret

00813bc0 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
  813bc0:	defffe04 	addi	sp,sp,-8
  813bc4:	df000115 	stw	fp,4(sp)
  813bc8:	df000104 	addi	fp,sp,4
  813bcc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
  813bd0:	e0bfff17 	ldw	r2,-4(fp)
  813bd4:	10800a17 	ldw	r2,40(r2)
  813bd8:	1007883a 	mov	r3,r2
  813bdc:	00800044 	movi	r2,1
  813be0:	18800025 	stbio	r2,0(r3)
	return 0;
  813be4:	0005883a 	mov	r2,zero
}
  813be8:	e037883a 	mov	sp,fp
  813bec:	df000017 	ldw	fp,0(sp)
  813bf0:	dec00104 	addi	sp,sp,4
  813bf4:	f800283a 	ret

00813bf8 <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
  813bf8:	defffe04 	addi	sp,sp,-8
  813bfc:	df000115 	stw	fp,4(sp)
  813c00:	df000104 	addi	fp,sp,4
  813c04:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
  813c08:	e0bfff17 	ldw	r2,-4(fp)
  813c0c:	10800a17 	ldw	r2,40(r2)
  813c10:	1007883a 	mov	r3,r2
  813c14:	00800084 	movi	r2,2
  813c18:	18800025 	stbio	r2,0(r3)
	return 0;
  813c1c:	0005883a 	mov	r2,zero
}
  813c20:	e037883a 	mov	sp,fp
  813c24:	df000017 	ldw	fp,0(sp)
  813c28:	dec00104 	addi	sp,sp,4
  813c2c:	f800283a 	ret

00813c30 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
  813c30:	defffe04 	addi	sp,sp,-8
  813c34:	df000115 	stw	fp,4(sp)
  813c38:	df000104 	addi	fp,sp,4
  813c3c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
  813c40:	e0bfff17 	ldw	r2,-4(fp)
  813c44:	10800a17 	ldw	r2,40(r2)
  813c48:	10000025 	stbio	zero,0(r2)
	return 0;
  813c4c:	0005883a 	mov	r2,zero
}
  813c50:	e037883a 	mov	sp,fp
  813c54:	df000017 	ldw	fp,0(sp)
  813c58:	dec00104 	addi	sp,sp,4
  813c5c:	f800283a 	ret

00813c60 <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
  813c60:	defffd04 	addi	sp,sp,-12
  813c64:	df000215 	stw	fp,8(sp)
  813c68:	df000204 	addi	fp,sp,8
  813c6c:	e13ffe15 	stw	r4,-8(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
  813c70:	e0bffe17 	ldw	r2,-8(fp)
  813c74:	10800a17 	ldw	r2,40(r2)
  813c78:	10800104 	addi	r2,r2,4
  813c7c:	10800037 	ldwio	r2,0(r2)
  813c80:	1080008c 	andi	r2,r2,2
  813c84:	1005d07a 	srai	r2,r2,1
  813c88:	1005003a 	cmpeq	r2,r2,zero
  813c8c:	1000071e 	bne	r2,zero,813cac <alt_up_av_config_read_acknowledge+0x4c>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
  813c90:	e0bffe17 	ldw	r2,-8(fp)
  813c94:	10800a17 	ldw	r2,40(r2)
  813c98:	10800104 	addi	r2,r2,4
  813c9c:	10800037 	ldwio	r2,0(r2)
  813ca0:	1080004c 	andi	r2,r2,1
  813ca4:	e0bfff15 	stw	r2,-4(fp)
  813ca8:	00000206 	br	813cb4 <alt_up_av_config_read_acknowledge+0x54>
	return -1;
  813cac:	00bfffc4 	movi	r2,-1
  813cb0:	e0bfff15 	stw	r2,-4(fp)
  813cb4:	e0bfff17 	ldw	r2,-4(fp)
}
  813cb8:	e037883a 	mov	sp,fp
  813cbc:	df000017 	ldw	fp,0(sp)
  813cc0:	dec00104 	addi	sp,sp,4
  813cc4:	f800283a 	ret

00813cc8 <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
  813cc8:	defffe04 	addi	sp,sp,-8
  813ccc:	df000115 	stw	fp,4(sp)
  813cd0:	df000104 	addi	fp,sp,4
  813cd4:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
  813cd8:	e0bfff17 	ldw	r2,-4(fp)
  813cdc:	10800a17 	ldw	r2,40(r2)
  813ce0:	10800104 	addi	r2,r2,4
  813ce4:	10800037 	ldwio	r2,0(r2)
  813ce8:	1080008c 	andi	r2,r2,2
  813cec:	1005d07a 	srai	r2,r2,1
}
  813cf0:	e037883a 	mov	sp,fp
  813cf4:	df000017 	ldw	fp,0(sp)
  813cf8:	dec00104 	addi	sp,sp,4
  813cfc:	f800283a 	ret

00813d00 <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  813d00:	defff904 	addi	sp,sp,-28
  813d04:	dfc00615 	stw	ra,24(sp)
  813d08:	df000515 	stw	fp,20(sp)
  813d0c:	df000504 	addi	fp,sp,20
  813d10:	e13ffc15 	stw	r4,-16(fp)
  813d14:	e17ffd15 	stw	r5,-12(fp)
  813d18:	e1bffe15 	stw	r6,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  813d1c:	e0bffc17 	ldw	r2,-16(fp)
  813d20:	10800b17 	ldw	r2,44(r2)
  813d24:	10800060 	cmpeqi	r2,r2,1
  813d28:	10000f1e 	bne	r2,zero,813d68 <alt_up_av_config_write_audio_cfg_register+0x68>
  813d2c:	e0bffc17 	ldw	r2,-16(fp)
  813d30:	10800b17 	ldw	r2,44(r2)
  813d34:	108000a0 	cmpeqi	r2,r2,2
  813d38:	10000b1e 	bne	r2,zero,813d68 <alt_up_av_config_write_audio_cfg_register+0x68>
  813d3c:	e0bffc17 	ldw	r2,-16(fp)
  813d40:	10800b17 	ldw	r2,44(r2)
  813d44:	108000e0 	cmpeqi	r2,r2,3
  813d48:	1000071e 	bne	r2,zero,813d68 <alt_up_av_config_write_audio_cfg_register+0x68>
  813d4c:	e0bffc17 	ldw	r2,-16(fp)
  813d50:	10800b17 	ldw	r2,44(r2)
  813d54:	10800120 	cmpeqi	r2,r2,4
  813d58:	1000031e 	bne	r2,zero,813d68 <alt_up_av_config_write_audio_cfg_register+0x68>
		return -EINVAL;
  813d5c:	00bffa84 	movi	r2,-22
  813d60:	e0bfff15 	stw	r2,-4(fp)
  813d64:	00000b06 	br	813d94 <alt_up_av_config_write_audio_cfg_register+0x94>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
  813d68:	e03ffb15 	stw	zero,-20(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
  813d6c:	e0bffc17 	ldw	r2,-16(fp)
  813d70:	10800a17 	ldw	r2,40(r2)
  813d74:	10800084 	addi	r2,r2,2
  813d78:	e0fffb17 	ldw	r3,-20(fp)
  813d7c:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  813d80:	e13ffc17 	ldw	r4,-16(fp)
  813d84:	e17ffd17 	ldw	r5,-12(fp)
  813d88:	e1bffe17 	ldw	r6,-8(fp)
  813d8c:	0813ad00 	call	813ad0 <alt_up_av_config_write_data>
  813d90:	e0bfff15 	stw	r2,-4(fp)
  813d94:	e0bfff17 	ldw	r2,-4(fp)
}
  813d98:	e037883a 	mov	sp,fp
  813d9c:	dfc00117 	ldw	ra,4(sp)
  813da0:	df000017 	ldw	fp,0(sp)
  813da4:	dec00204 	addi	sp,sp,8
  813da8:	f800283a 	ret

00813dac <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
  813dac:	defff904 	addi	sp,sp,-28
  813db0:	dfc00615 	stw	ra,24(sp)
  813db4:	df000515 	stw	fp,20(sp)
  813db8:	df000504 	addi	fp,sp,20
  813dbc:	e13ffb15 	stw	r4,-20(fp)
  813dc0:	e17ffc15 	stw	r5,-16(fp)
  813dc4:	e1bffd15 	stw	r6,-12(fp)
  813dc8:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  813dcc:	e0bffb17 	ldw	r2,-20(fp)
  813dd0:	10800b17 	ldw	r2,44(r2)
  813dd4:	108000a0 	cmpeqi	r2,r2,2
  813dd8:	10000b1e 	bne	r2,zero,813e08 <alt_up_av_config_read_video_cfg_register+0x5c>
  813ddc:	e0bffb17 	ldw	r2,-20(fp)
  813de0:	10800b17 	ldw	r2,44(r2)
  813de4:	108000e0 	cmpeqi	r2,r2,3
  813de8:	1000071e 	bne	r2,zero,813e08 <alt_up_av_config_read_video_cfg_register+0x5c>
  813dec:	e0bffb17 	ldw	r2,-20(fp)
  813df0:	10800b17 	ldw	r2,44(r2)
  813df4:	10800120 	cmpeqi	r2,r2,4
  813df8:	1000031e 	bne	r2,zero,813e08 <alt_up_av_config_read_video_cfg_register+0x5c>
		return -EINVAL;
  813dfc:	00bffa84 	movi	r2,-22
  813e00:	e0bfff15 	stw	r2,-4(fp)
  813e04:	00002106 	br	813e8c <alt_up_av_config_read_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  813e08:	e0bffb17 	ldw	r2,-20(fp)
  813e0c:	10800b17 	ldw	r2,44(r2)
  813e10:	108000a0 	cmpeqi	r2,r2,2
  813e14:	1000041e 	bne	r2,zero,813e28 <alt_up_av_config_read_video_cfg_register+0x7c>
  813e18:	e0bffb17 	ldw	r2,-20(fp)
  813e1c:	10800b17 	ldw	r2,44(r2)
  813e20:	10800118 	cmpnei	r2,r2,4
  813e24:	1000061e 	bne	r2,zero,813e40 <alt_up_av_config_read_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  813e28:	e0bffe17 	ldw	r2,-8(fp)
  813e2c:	10800060 	cmpeqi	r2,r2,1
  813e30:	10000c1e 	bne	r2,zero,813e64 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  813e34:	00bffa84 	movi	r2,-22
  813e38:	e0bfff15 	stw	r2,-4(fp)
  813e3c:	00001306 	br	813e8c <alt_up_av_config_read_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  813e40:	e0bffe17 	ldw	r2,-8(fp)
  813e44:	10800060 	cmpeqi	r2,r2,1
  813e48:	1000061e 	bne	r2,zero,813e64 <alt_up_av_config_read_video_cfg_register+0xb8>
  813e4c:	e0bffe17 	ldw	r2,-8(fp)
  813e50:	108000a0 	cmpeqi	r2,r2,2
  813e54:	1000031e 	bne	r2,zero,813e64 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  813e58:	00bffa84 	movi	r2,-22
  813e5c:	e0bfff15 	stw	r2,-4(fp)
  813e60:	00000a06 	br	813e8c <alt_up_av_config_read_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  813e64:	e0bffb17 	ldw	r2,-20(fp)
  813e68:	10800a17 	ldw	r2,40(r2)
  813e6c:	10800084 	addi	r2,r2,2
  813e70:	e0fffe17 	ldw	r3,-8(fp)
  813e74:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_read_data(av_config, addr, data);
  813e78:	e13ffb17 	ldw	r4,-20(fp)
  813e7c:	e17ffc17 	ldw	r5,-16(fp)
  813e80:	e1bffd17 	ldw	r6,-12(fp)
  813e84:	0813b340 	call	813b34 <alt_up_av_config_read_data>
  813e88:	e0bfff15 	stw	r2,-4(fp)
  813e8c:	e0bfff17 	ldw	r2,-4(fp)
}
  813e90:	e037883a 	mov	sp,fp
  813e94:	dfc00117 	ldw	ra,4(sp)
  813e98:	df000017 	ldw	fp,0(sp)
  813e9c:	dec00204 	addi	sp,sp,8
  813ea0:	f800283a 	ret

00813ea4 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
  813ea4:	defff904 	addi	sp,sp,-28
  813ea8:	dfc00615 	stw	ra,24(sp)
  813eac:	df000515 	stw	fp,20(sp)
  813eb0:	df000504 	addi	fp,sp,20
  813eb4:	e13ffb15 	stw	r4,-20(fp)
  813eb8:	e17ffc15 	stw	r5,-16(fp)
  813ebc:	e1bffd15 	stw	r6,-12(fp)
  813ec0:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  813ec4:	e0bffb17 	ldw	r2,-20(fp)
  813ec8:	10800b17 	ldw	r2,44(r2)
  813ecc:	108000a0 	cmpeqi	r2,r2,2
  813ed0:	10000b1e 	bne	r2,zero,813f00 <alt_up_av_config_write_video_cfg_register+0x5c>
  813ed4:	e0bffb17 	ldw	r2,-20(fp)
  813ed8:	10800b17 	ldw	r2,44(r2)
  813edc:	108000e0 	cmpeqi	r2,r2,3
  813ee0:	1000071e 	bne	r2,zero,813f00 <alt_up_av_config_write_video_cfg_register+0x5c>
  813ee4:	e0bffb17 	ldw	r2,-20(fp)
  813ee8:	10800b17 	ldw	r2,44(r2)
  813eec:	10800120 	cmpeqi	r2,r2,4
  813ef0:	1000031e 	bne	r2,zero,813f00 <alt_up_av_config_write_video_cfg_register+0x5c>
		return -EINVAL;
  813ef4:	00bffa84 	movi	r2,-22
  813ef8:	e0bfff15 	stw	r2,-4(fp)
  813efc:	00002106 	br	813f84 <alt_up_av_config_write_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  813f00:	e0bffb17 	ldw	r2,-20(fp)
  813f04:	10800b17 	ldw	r2,44(r2)
  813f08:	108000a0 	cmpeqi	r2,r2,2
  813f0c:	1000041e 	bne	r2,zero,813f20 <alt_up_av_config_write_video_cfg_register+0x7c>
  813f10:	e0bffb17 	ldw	r2,-20(fp)
  813f14:	10800b17 	ldw	r2,44(r2)
  813f18:	10800118 	cmpnei	r2,r2,4
  813f1c:	1000061e 	bne	r2,zero,813f38 <alt_up_av_config_write_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  813f20:	e0bffe17 	ldw	r2,-8(fp)
  813f24:	10800060 	cmpeqi	r2,r2,1
  813f28:	10000c1e 	bne	r2,zero,813f5c <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  813f2c:	00bffa84 	movi	r2,-22
  813f30:	e0bfff15 	stw	r2,-4(fp)
  813f34:	00001306 	br	813f84 <alt_up_av_config_write_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  813f38:	e0bffe17 	ldw	r2,-8(fp)
  813f3c:	10800060 	cmpeqi	r2,r2,1
  813f40:	1000061e 	bne	r2,zero,813f5c <alt_up_av_config_write_video_cfg_register+0xb8>
  813f44:	e0bffe17 	ldw	r2,-8(fp)
  813f48:	108000a0 	cmpeqi	r2,r2,2
  813f4c:	1000031e 	bne	r2,zero,813f5c <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  813f50:	00bffa84 	movi	r2,-22
  813f54:	e0bfff15 	stw	r2,-4(fp)
  813f58:	00000a06 	br	813f84 <alt_up_av_config_write_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  813f5c:	e0bffb17 	ldw	r2,-20(fp)
  813f60:	10800a17 	ldw	r2,40(r2)
  813f64:	10800084 	addi	r2,r2,2
  813f68:	e0fffe17 	ldw	r3,-8(fp)
  813f6c:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  813f70:	e13ffb17 	ldw	r4,-20(fp)
  813f74:	e17ffc17 	ldw	r5,-16(fp)
  813f78:	e1bffd17 	ldw	r6,-12(fp)
  813f7c:	0813ad00 	call	813ad0 <alt_up_av_config_write_data>
  813f80:	e0bfff15 	stw	r2,-4(fp)
  813f84:	e0bfff17 	ldw	r2,-4(fp)
}
  813f88:	e037883a 	mov	sp,fp
  813f8c:	dfc00117 	ldw	ra,4(sp)
  813f90:	df000017 	ldw	fp,0(sp)
  813f94:	dec00204 	addi	sp,sp,8
  813f98:	f800283a 	ret

00813f9c <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  813f9c:	defffa04 	addi	sp,sp,-24
  813fa0:	dfc00515 	stw	ra,20(sp)
  813fa4:	df000415 	stw	fp,16(sp)
  813fa8:	df000404 	addi	fp,sp,16
  813fac:	e13ffc15 	stw	r4,-16(fp)
  813fb0:	e17ffd15 	stw	r5,-12(fp)
  813fb4:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  813fb8:	e0bffc17 	ldw	r2,-16(fp)
  813fbc:	10800b17 	ldw	r2,44(r2)
  813fc0:	10800220 	cmpeqi	r2,r2,8
  813fc4:	1000031e 	bne	r2,zero,813fd4 <alt_up_av_config_read_DC2_cfg_register+0x38>
		return -EINVAL;
  813fc8:	00bffa84 	movi	r2,-22
  813fcc:	e0bfff15 	stw	r2,-4(fp)
  813fd0:	00000506 	br	813fe8 <alt_up_av_config_read_DC2_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  813fd4:	e13ffc17 	ldw	r4,-16(fp)
  813fd8:	e17ffd17 	ldw	r5,-12(fp)
  813fdc:	e1bffe17 	ldw	r6,-8(fp)
  813fe0:	0813b340 	call	813b34 <alt_up_av_config_read_data>
  813fe4:	e0bfff15 	stw	r2,-4(fp)
  813fe8:	e0bfff17 	ldw	r2,-4(fp)
}
  813fec:	e037883a 	mov	sp,fp
  813ff0:	dfc00117 	ldw	ra,4(sp)
  813ff4:	df000017 	ldw	fp,0(sp)
  813ff8:	dec00204 	addi	sp,sp,8
  813ffc:	f800283a 	ret

00814000 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  814000:	defffa04 	addi	sp,sp,-24
  814004:	dfc00515 	stw	ra,20(sp)
  814008:	df000415 	stw	fp,16(sp)
  81400c:	df000404 	addi	fp,sp,16
  814010:	e13ffc15 	stw	r4,-16(fp)
  814014:	e17ffd15 	stw	r5,-12(fp)
  814018:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  81401c:	e0bffc17 	ldw	r2,-16(fp)
  814020:	10800b17 	ldw	r2,44(r2)
  814024:	10800220 	cmpeqi	r2,r2,8
  814028:	1000031e 	bne	r2,zero,814038 <alt_up_av_config_write_DC2_cfg_register+0x38>
		return -EINVAL;
  81402c:	00bffa84 	movi	r2,-22
  814030:	e0bfff15 	stw	r2,-4(fp)
  814034:	00000506 	br	81404c <alt_up_av_config_write_DC2_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  814038:	e13ffc17 	ldw	r4,-16(fp)
  81403c:	e17ffd17 	ldw	r5,-12(fp)
  814040:	e1bffe17 	ldw	r6,-8(fp)
  814044:	0813ad00 	call	813ad0 <alt_up_av_config_write_data>
  814048:	e0bfff15 	stw	r2,-4(fp)
  81404c:	e0bfff17 	ldw	r2,-4(fp)
}
  814050:	e037883a 	mov	sp,fp
  814054:	dfc00117 	ldw	ra,4(sp)
  814058:	df000017 	ldw	fp,0(sp)
  81405c:	dec00204 	addi	sp,sp,8
  814060:	f800283a 	ret

00814064 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  814064:	defffa04 	addi	sp,sp,-24
  814068:	dfc00515 	stw	ra,20(sp)
  81406c:	df000415 	stw	fp,16(sp)
  814070:	df000404 	addi	fp,sp,16
  814074:	e13ffc15 	stw	r4,-16(fp)
  814078:	e17ffd15 	stw	r5,-12(fp)
  81407c:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  814080:	e0bffc17 	ldw	r2,-16(fp)
  814084:	10800b17 	ldw	r2,44(r2)
  814088:	10800260 	cmpeqi	r2,r2,9
  81408c:	1000031e 	bne	r2,zero,81409c <alt_up_av_config_read_D5M_cfg_register+0x38>
		return -EINVAL;
  814090:	00bffa84 	movi	r2,-22
  814094:	e0bfff15 	stw	r2,-4(fp)
  814098:	00000506 	br	8140b0 <alt_up_av_config_read_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_read_data(av_config, addr, data);
  81409c:	e13ffc17 	ldw	r4,-16(fp)
  8140a0:	e17ffd17 	ldw	r5,-12(fp)
  8140a4:	e1bffe17 	ldw	r6,-8(fp)
  8140a8:	0813b340 	call	813b34 <alt_up_av_config_read_data>
  8140ac:	e0bfff15 	stw	r2,-4(fp)
  8140b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8140b4:	e037883a 	mov	sp,fp
  8140b8:	dfc00117 	ldw	ra,4(sp)
  8140bc:	df000017 	ldw	fp,0(sp)
  8140c0:	dec00204 	addi	sp,sp,8
  8140c4:	f800283a 	ret

008140c8 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  8140c8:	defffa04 	addi	sp,sp,-24
  8140cc:	dfc00515 	stw	ra,20(sp)
  8140d0:	df000415 	stw	fp,16(sp)
  8140d4:	df000404 	addi	fp,sp,16
  8140d8:	e13ffc15 	stw	r4,-16(fp)
  8140dc:	e17ffd15 	stw	r5,-12(fp)
  8140e0:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  8140e4:	e0bffc17 	ldw	r2,-16(fp)
  8140e8:	10800b17 	ldw	r2,44(r2)
  8140ec:	10800260 	cmpeqi	r2,r2,9
  8140f0:	1000031e 	bne	r2,zero,814100 <alt_up_av_config_write_D5M_cfg_register+0x38>
		return -EINVAL;
  8140f4:	00bffa84 	movi	r2,-22
  8140f8:	e0bfff15 	stw	r2,-4(fp)
  8140fc:	00000506 	br	814114 <alt_up_av_config_write_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_write_data(av_config, addr, data);
  814100:	e13ffc17 	ldw	r4,-16(fp)
  814104:	e17ffd17 	ldw	r5,-12(fp)
  814108:	e1bffe17 	ldw	r6,-8(fp)
  81410c:	0813ad00 	call	813ad0 <alt_up_av_config_write_data>
  814110:	e0bfff15 	stw	r2,-4(fp)
  814114:	e0bfff17 	ldw	r2,-4(fp)
}
  814118:	e037883a 	mov	sp,fp
  81411c:	dfc00117 	ldw	ra,4(sp)
  814120:	df000017 	ldw	fp,0(sp)
  814124:	dec00204 	addi	sp,sp,8
  814128:	f800283a 	ret

0081412c <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  81412c:	defffa04 	addi	sp,sp,-24
  814130:	dfc00515 	stw	ra,20(sp)
  814134:	df000415 	stw	fp,16(sp)
  814138:	df000404 	addi	fp,sp,16
  81413c:	e13ffc15 	stw	r4,-16(fp)
  814140:	e17ffd15 	stw	r5,-12(fp)
  814144:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  814148:	e0bffc17 	ldw	r2,-16(fp)
  81414c:	10800b17 	ldw	r2,44(r2)
  814150:	108002a0 	cmpeqi	r2,r2,10
  814154:	1000031e 	bne	r2,zero,814164 <alt_up_av_config_read_LTM_cfg_register+0x38>
		return -EINVAL;
  814158:	00bffa84 	movi	r2,-22
  81415c:	e0bfff15 	stw	r2,-4(fp)
  814160:	00000506 	br	814178 <alt_up_av_config_read_LTM_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  814164:	e13ffc17 	ldw	r4,-16(fp)
  814168:	e17ffd17 	ldw	r5,-12(fp)
  81416c:	e1bffe17 	ldw	r6,-8(fp)
  814170:	0813b340 	call	813b34 <alt_up_av_config_read_data>
  814174:	e0bfff15 	stw	r2,-4(fp)
  814178:	e0bfff17 	ldw	r2,-4(fp)
}
  81417c:	e037883a 	mov	sp,fp
  814180:	dfc00117 	ldw	ra,4(sp)
  814184:	df000017 	ldw	fp,0(sp)
  814188:	dec00204 	addi	sp,sp,8
  81418c:	f800283a 	ret

00814190 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  814190:	defffa04 	addi	sp,sp,-24
  814194:	dfc00515 	stw	ra,20(sp)
  814198:	df000415 	stw	fp,16(sp)
  81419c:	df000404 	addi	fp,sp,16
  8141a0:	e13ffc15 	stw	r4,-16(fp)
  8141a4:	e17ffd15 	stw	r5,-12(fp)
  8141a8:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  8141ac:	e0bffc17 	ldw	r2,-16(fp)
  8141b0:	10800b17 	ldw	r2,44(r2)
  8141b4:	108002a0 	cmpeqi	r2,r2,10
  8141b8:	1000031e 	bne	r2,zero,8141c8 <alt_up_av_config_write_LTM_cfg_register+0x38>
		return -EINVAL;
  8141bc:	00bffa84 	movi	r2,-22
  8141c0:	e0bfff15 	stw	r2,-4(fp)
  8141c4:	00000506 	br	8141dc <alt_up_av_config_write_LTM_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  8141c8:	e13ffc17 	ldw	r4,-16(fp)
  8141cc:	e17ffd17 	ldw	r5,-12(fp)
  8141d0:	e1bffe17 	ldw	r6,-8(fp)
  8141d4:	0813ad00 	call	813ad0 <alt_up_av_config_write_data>
  8141d8:	e0bfff15 	stw	r2,-4(fp)
  8141dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8141e0:	e037883a 	mov	sp,fp
  8141e4:	dfc00117 	ldw	ra,4(sp)
  8141e8:	df000017 	ldw	fp,0(sp)
  8141ec:	dec00204 	addi	sp,sp,8
  8141f0:	f800283a 	ret

008141f4 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  8141f4:	defffc04 	addi	sp,sp,-16
  8141f8:	df000315 	stw	fp,12(sp)
  8141fc:	df000304 	addi	fp,sp,12
  814200:	e13ffe15 	stw	r4,-8(fp)
  814204:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  814208:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  81420c:	e0bfff17 	ldw	r2,-4(fp)
  814210:	1004c03a 	cmpne	r2,r2,zero
  814214:	1000061e 	bne	r2,zero,814230 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  814218:	e0bffe17 	ldw	r2,-8(fp)
  81421c:	1007883a 	mov	r3,r2
  814220:	e0bffd03 	ldbu	r2,-12(fp)
  814224:	10c4b03a 	or	r2,r2,r3
  814228:	e0bffd05 	stb	r2,-12(fp)
  81422c:	00000806 	br	814250 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  814230:	e0bffe17 	ldw	r2,-8(fp)
  814234:	1007883a 	mov	r3,r2
  814238:	e0bffd03 	ldbu	r2,-12(fp)
  81423c:	10c4b03a 	or	r2,r2,r3
  814240:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  814244:	e0bffd03 	ldbu	r2,-12(fp)
  814248:	10801014 	ori	r2,r2,64
  81424c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  814250:	e0fffd03 	ldbu	r3,-12(fp)
  814254:	00bfe004 	movi	r2,-128
  814258:	1884b03a 	or	r2,r3,r2
  81425c:	10803fcc 	andi	r2,r2,255
}
  814260:	e037883a 	mov	sp,fp
  814264:	df000017 	ldw	fp,0(sp)
  814268:	dec00104 	addi	sp,sp,4
  81426c:	f800283a 	ret

00814270 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  814270:	defffd04 	addi	sp,sp,-12
  814274:	df000215 	stw	fp,8(sp)
  814278:	df000204 	addi	fp,sp,8
  81427c:	e13ffe15 	stw	r4,-8(fp)
  814280:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  814284:	e0bffe17 	ldw	r2,-8(fp)
  814288:	10800a17 	ldw	r2,40(r2)
  81428c:	e0ffff03 	ldbu	r3,-4(fp)
  814290:	10c00025 	stbio	r3,0(r2)
}
  814294:	e037883a 	mov	sp,fp
  814298:	df000017 	ldw	fp,0(sp)
  81429c:	dec00104 	addi	sp,sp,4
  8142a0:	f800283a 	ret

008142a4 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  8142a4:	defffe04 	addi	sp,sp,-8
  8142a8:	df000115 	stw	fp,4(sp)
  8142ac:	df000104 	addi	fp,sp,4
  8142b0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  8142b4:	e0bfff17 	ldw	r2,-4(fp)
  8142b8:	10800a17 	ldw	r2,40(r2)
  8142bc:	1007883a 	mov	r3,r2
  8142c0:	00800044 	movi	r2,1
  8142c4:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  8142c8:	e037883a 	mov	sp,fp
  8142cc:	df000017 	ldw	fp,0(sp)
  8142d0:	dec00104 	addi	sp,sp,4
  8142d4:	f800283a 	ret

008142d8 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  8142d8:	defffc04 	addi	sp,sp,-16
  8142dc:	dfc00315 	stw	ra,12(sp)
  8142e0:	df000215 	stw	fp,8(sp)
  8142e4:	df000204 	addi	fp,sp,8
  8142e8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  8142ec:	e13fff17 	ldw	r4,-4(fp)
  8142f0:	014020b4 	movhi	r5,130
  8142f4:	2977d504 	addi	r5,r5,-8364
  8142f8:	081aa140 	call	81aa14 <alt_find_dev>
  8142fc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  814300:	e0bffe17 	ldw	r2,-8(fp)
}
  814304:	e037883a 	mov	sp,fp
  814308:	dfc00117 	ldw	ra,4(sp)
  81430c:	df000017 	ldw	fp,0(sp)
  814310:	dec00204 	addi	sp,sp,8
  814314:	f800283a 	ret

00814318 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  814318:	defffb04 	addi	sp,sp,-20
  81431c:	df000415 	stw	fp,16(sp)
  814320:	df000404 	addi	fp,sp,16
  814324:	e13ffd15 	stw	r4,-12(fp)
  814328:	e17ffe15 	stw	r5,-8(fp)
  81432c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  814330:	e03ffc15 	stw	zero,-16(fp)
  814334:	00000f06 	br	814374 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  814338:	e0bffd17 	ldw	r2,-12(fp)
  81433c:	10800a17 	ldw	r2,40(r2)
  814340:	11000044 	addi	r4,r2,1
  814344:	e0fffc17 	ldw	r3,-16(fp)
  814348:	e0bffe17 	ldw	r2,-8(fp)
  81434c:	1885883a 	add	r2,r3,r2
  814350:	10800003 	ldbu	r2,0(r2)
  814354:	10c03fcc 	andi	r3,r2,255
  814358:	18c0201c 	xori	r3,r3,128
  81435c:	18ffe004 	addi	r3,r3,-128
  814360:	2005883a 	mov	r2,r4
  814364:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  814368:	e0bffc17 	ldw	r2,-16(fp)
  81436c:	10800044 	addi	r2,r2,1
  814370:	e0bffc15 	stw	r2,-16(fp)
  814374:	e0fffc17 	ldw	r3,-16(fp)
  814378:	e0bfff17 	ldw	r2,-4(fp)
  81437c:	18bfee36 	bltu	r3,r2,814338 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  814380:	e037883a 	mov	sp,fp
  814384:	df000017 	ldw	fp,0(sp)
  814388:	dec00104 	addi	sp,sp,4
  81438c:	f800283a 	ret

00814390 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  814390:	defffd04 	addi	sp,sp,-12
  814394:	df000215 	stw	fp,8(sp)
  814398:	df000204 	addi	fp,sp,8
  81439c:	e13ffe15 	stw	r4,-8(fp)
  8143a0:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  8143a4:	00000d06 	br	8143dc <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  8143a8:	e0bffe17 	ldw	r2,-8(fp)
  8143ac:	10800a17 	ldw	r2,40(r2)
  8143b0:	11000044 	addi	r4,r2,1
  8143b4:	e0bfff17 	ldw	r2,-4(fp)
  8143b8:	10800003 	ldbu	r2,0(r2)
  8143bc:	10c03fcc 	andi	r3,r2,255
  8143c0:	18c0201c 	xori	r3,r3,128
  8143c4:	18ffe004 	addi	r3,r3,-128
  8143c8:	2005883a 	mov	r2,r4
  8143cc:	10c00025 	stbio	r3,0(r2)
		++ptr;
  8143d0:	e0bfff17 	ldw	r2,-4(fp)
  8143d4:	10800044 	addi	r2,r2,1
  8143d8:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  8143dc:	e0bfff17 	ldw	r2,-4(fp)
  8143e0:	10800003 	ldbu	r2,0(r2)
  8143e4:	10803fcc 	andi	r2,r2,255
  8143e8:	1080201c 	xori	r2,r2,128
  8143ec:	10bfe004 	addi	r2,r2,-128
  8143f0:	1004c03a 	cmpne	r2,r2,zero
  8143f4:	103fec1e 	bne	r2,zero,8143a8 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  8143f8:	e037883a 	mov	sp,fp
  8143fc:	df000017 	ldw	fp,0(sp)
  814400:	dec00104 	addi	sp,sp,4
  814404:	f800283a 	ret

00814408 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  814408:	defffb04 	addi	sp,sp,-20
  81440c:	dfc00415 	stw	ra,16(sp)
  814410:	df000315 	stw	fp,12(sp)
  814414:	df000304 	addi	fp,sp,12
  814418:	e13ffd15 	stw	r4,-12(fp)
  81441c:	e17ffe15 	stw	r5,-8(fp)
  814420:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  814424:	e0bffd17 	ldw	r2,-12(fp)
  814428:	10800017 	ldw	r2,0(r2)
  81442c:	1009883a 	mov	r4,r2
  814430:	e1bfff17 	ldw	r6,-4(fp)
  814434:	e17ffe17 	ldw	r5,-8(fp)
  814438:	08143180 	call	814318 <alt_up_character_lcd_write>
	return 0;
  81443c:	0005883a 	mov	r2,zero
}
  814440:	e037883a 	mov	sp,fp
  814444:	dfc00117 	ldw	ra,4(sp)
  814448:	df000017 	ldw	fp,0(sp)
  81444c:	dec00204 	addi	sp,sp,8
  814450:	f800283a 	ret

00814454 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  814454:	defff904 	addi	sp,sp,-28
  814458:	dfc00615 	stw	ra,24(sp)
  81445c:	df000515 	stw	fp,20(sp)
  814460:	df000504 	addi	fp,sp,20
  814464:	e13ffc15 	stw	r4,-16(fp)
  814468:	e17ffd15 	stw	r5,-12(fp)
  81446c:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  814470:	e0bffd17 	ldw	r2,-12(fp)
  814474:	10800a28 	cmpgeui	r2,r2,40
  814478:	1000031e 	bne	r2,zero,814488 <alt_up_character_lcd_set_cursor_pos+0x34>
  81447c:	e0bffe17 	ldw	r2,-8(fp)
  814480:	108000b0 	cmpltui	r2,r2,2
  814484:	1000031e 	bne	r2,zero,814494 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  814488:	00bfffc4 	movi	r2,-1
  81448c:	e0bfff15 	stw	r2,-4(fp)
  814490:	00000806 	br	8144b4 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  814494:	e13ffd17 	ldw	r4,-12(fp)
  814498:	e17ffe17 	ldw	r5,-8(fp)
  81449c:	08141f40 	call	8141f4 <get_DDRAM_addr>
  8144a0:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  8144a4:	e17ffb03 	ldbu	r5,-20(fp)
  8144a8:	e13ffc17 	ldw	r4,-16(fp)
  8144ac:	08142700 	call	814270 <alt_up_character_lcd_send_cmd>
	return 0;
  8144b0:	e03fff15 	stw	zero,-4(fp)
  8144b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8144b8:	e037883a 	mov	sp,fp
  8144bc:	dfc00117 	ldw	ra,4(sp)
  8144c0:	df000017 	ldw	fp,0(sp)
  8144c4:	dec00204 	addi	sp,sp,8
  8144c8:	f800283a 	ret

008144cc <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  8144cc:	defff904 	addi	sp,sp,-28
  8144d0:	dfc00615 	stw	ra,24(sp)
  8144d4:	df000515 	stw	fp,20(sp)
  8144d8:	df000504 	addi	fp,sp,20
  8144dc:	e13ffc15 	stw	r4,-16(fp)
  8144e0:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  8144e4:	e0bffd17 	ldw	r2,-12(fp)
  8144e8:	1005003a 	cmpeq	r2,r2,zero
  8144ec:	10001e1e 	bne	r2,zero,814568 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  8144f0:	e0bffd17 	ldw	r2,-12(fp)
  8144f4:	10800050 	cmplti	r2,r2,1
  8144f8:	1000031e 	bne	r2,zero,814508 <alt_up_character_lcd_shift_cursor+0x3c>
  8144fc:	00800504 	movi	r2,20
  814500:	e0bfff05 	stb	r2,-4(fp)
  814504:	00000206 	br	814510 <alt_up_character_lcd_shift_cursor+0x44>
  814508:	00c00404 	movi	r3,16
  81450c:	e0ffff05 	stb	r3,-4(fp)
  814510:	e0bfff03 	ldbu	r2,-4(fp)
  814514:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  814518:	e0fffd17 	ldw	r3,-12(fp)
  81451c:	e0fffe15 	stw	r3,-8(fp)
  814520:	e0fffe17 	ldw	r3,-8(fp)
  814524:	1804403a 	cmpge	r2,r3,zero
  814528:	1000031e 	bne	r2,zero,814538 <alt_up_character_lcd_shift_cursor+0x6c>
  81452c:	e0bffe17 	ldw	r2,-8(fp)
  814530:	0085c83a 	sub	r2,zero,r2
  814534:	e0bffe15 	stw	r2,-8(fp)
  814538:	e0fffe17 	ldw	r3,-8(fp)
  81453c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  814540:	00000306 	br	814550 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  814544:	e17ffb43 	ldbu	r5,-19(fp)
  814548:	e13ffc17 	ldw	r4,-16(fp)
  81454c:	08142700 	call	814270 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  814550:	e0bffb03 	ldbu	r2,-20(fp)
  814554:	10bfffc4 	addi	r2,r2,-1
  814558:	e0bffb05 	stb	r2,-20(fp)
  81455c:	e0bffb03 	ldbu	r2,-20(fp)
  814560:	10803fd8 	cmpnei	r2,r2,255
  814564:	103ff71e 	bne	r2,zero,814544 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  814568:	e037883a 	mov	sp,fp
  81456c:	dfc00117 	ldw	ra,4(sp)
  814570:	df000017 	ldw	fp,0(sp)
  814574:	dec00204 	addi	sp,sp,8
  814578:	f800283a 	ret

0081457c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  81457c:	defff904 	addi	sp,sp,-28
  814580:	dfc00615 	stw	ra,24(sp)
  814584:	df000515 	stw	fp,20(sp)
  814588:	df000504 	addi	fp,sp,20
  81458c:	e13ffc15 	stw	r4,-16(fp)
  814590:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  814594:	e0bffd17 	ldw	r2,-12(fp)
  814598:	1005003a 	cmpeq	r2,r2,zero
  81459c:	10001e1e 	bne	r2,zero,814618 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  8145a0:	e0bffd17 	ldw	r2,-12(fp)
  8145a4:	10800050 	cmplti	r2,r2,1
  8145a8:	1000031e 	bne	r2,zero,8145b8 <alt_up_character_lcd_shift_display+0x3c>
  8145ac:	00800704 	movi	r2,28
  8145b0:	e0bfff05 	stb	r2,-4(fp)
  8145b4:	00000206 	br	8145c0 <alt_up_character_lcd_shift_display+0x44>
  8145b8:	00c00604 	movi	r3,24
  8145bc:	e0ffff05 	stb	r3,-4(fp)
  8145c0:	e0bfff03 	ldbu	r2,-4(fp)
  8145c4:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  8145c8:	e0fffd17 	ldw	r3,-12(fp)
  8145cc:	e0fffe15 	stw	r3,-8(fp)
  8145d0:	e0fffe17 	ldw	r3,-8(fp)
  8145d4:	1804403a 	cmpge	r2,r3,zero
  8145d8:	1000031e 	bne	r2,zero,8145e8 <alt_up_character_lcd_shift_display+0x6c>
  8145dc:	e0bffe17 	ldw	r2,-8(fp)
  8145e0:	0085c83a 	sub	r2,zero,r2
  8145e4:	e0bffe15 	stw	r2,-8(fp)
  8145e8:	e0fffe17 	ldw	r3,-8(fp)
  8145ec:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  8145f0:	00000306 	br	814600 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  8145f4:	e17ffb43 	ldbu	r5,-19(fp)
  8145f8:	e13ffc17 	ldw	r4,-16(fp)
  8145fc:	08142700 	call	814270 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  814600:	e0bffb03 	ldbu	r2,-20(fp)
  814604:	10bfffc4 	addi	r2,r2,-1
  814608:	e0bffb05 	stb	r2,-20(fp)
  81460c:	e0bffb03 	ldbu	r2,-20(fp)
  814610:	10803fd8 	cmpnei	r2,r2,255
  814614:	103ff71e 	bne	r2,zero,8145f4 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  814618:	e037883a 	mov	sp,fp
  81461c:	dfc00117 	ldw	ra,4(sp)
  814620:	df000017 	ldw	fp,0(sp)
  814624:	dec00204 	addi	sp,sp,8
  814628:	f800283a 	ret

0081462c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  81462c:	defff904 	addi	sp,sp,-28
  814630:	dfc00615 	stw	ra,24(sp)
  814634:	df000515 	stw	fp,20(sp)
  814638:	df000504 	addi	fp,sp,20
  81463c:	e13ffc15 	stw	r4,-16(fp)
  814640:	e17ffd15 	stw	r5,-12(fp)
  814644:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  814648:	e0bffd17 	ldw	r2,-12(fp)
  81464c:	10800a28 	cmpgeui	r2,r2,40
  814650:	1000031e 	bne	r2,zero,814660 <alt_up_character_lcd_erase_pos+0x34>
  814654:	e0bffe17 	ldw	r2,-8(fp)
  814658:	108000b0 	cmpltui	r2,r2,2
  81465c:	1000031e 	bne	r2,zero,81466c <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  814660:	00bfffc4 	movi	r2,-1
  814664:	e0bfff15 	stw	r2,-4(fp)
  814668:	00000e06 	br	8146a4 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  81466c:	e13ffd17 	ldw	r4,-12(fp)
  814670:	e17ffe17 	ldw	r5,-8(fp)
  814674:	08141f40 	call	8141f4 <get_DDRAM_addr>
  814678:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  81467c:	e17ffb03 	ldbu	r5,-20(fp)
  814680:	e13ffc17 	ldw	r4,-16(fp)
  814684:	08142700 	call	814270 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
  814688:	e0bffc17 	ldw	r2,-16(fp)
  81468c:	10800a17 	ldw	r2,40(r2)
  814690:	10800044 	addi	r2,r2,1
  814694:	1007883a 	mov	r3,r2
  814698:	00800084 	movi	r2,2
  81469c:	18800025 	stbio	r2,0(r3)
	return 0;
  8146a0:	e03fff15 	stw	zero,-4(fp)
  8146a4:	e0bfff17 	ldw	r2,-4(fp)
}
  8146a8:	e037883a 	mov	sp,fp
  8146ac:	dfc00117 	ldw	ra,4(sp)
  8146b0:	df000017 	ldw	fp,0(sp)
  8146b4:	dec00204 	addi	sp,sp,8
  8146b8:	f800283a 	ret

008146bc <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  8146bc:	defffd04 	addi	sp,sp,-12
  8146c0:	dfc00215 	stw	ra,8(sp)
  8146c4:	df000115 	stw	fp,4(sp)
  8146c8:	df000104 	addi	fp,sp,4
  8146cc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  8146d0:	e13fff17 	ldw	r4,-4(fp)
  8146d4:	01400304 	movi	r5,12
  8146d8:	08142700 	call	814270 <alt_up_character_lcd_send_cmd>
}
  8146dc:	e037883a 	mov	sp,fp
  8146e0:	dfc00117 	ldw	ra,4(sp)
  8146e4:	df000017 	ldw	fp,0(sp)
  8146e8:	dec00204 	addi	sp,sp,8
  8146ec:	f800283a 	ret

008146f0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  8146f0:	defffd04 	addi	sp,sp,-12
  8146f4:	dfc00215 	stw	ra,8(sp)
  8146f8:	df000115 	stw	fp,4(sp)
  8146fc:	df000104 	addi	fp,sp,4
  814700:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  814704:	e13fff17 	ldw	r4,-4(fp)
  814708:	014003c4 	movi	r5,15
  81470c:	08142700 	call	814270 <alt_up_character_lcd_send_cmd>
}
  814710:	e037883a 	mov	sp,fp
  814714:	dfc00117 	ldw	ra,4(sp)
  814718:	df000017 	ldw	fp,0(sp)
  81471c:	dec00204 	addi	sp,sp,8
  814720:	f800283a 	ret

00814724 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
  814724:	defffc04 	addi	sp,sp,-16
  814728:	dfc00315 	stw	ra,12(sp)
  81472c:	df000215 	stw	fp,8(sp)
  814730:	df000204 	addi	fp,sp,8
  814734:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
  814738:	e0bfff17 	ldw	r2,-4(fp)
  81473c:	10800217 	ldw	r2,8(r2)
  814740:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
  814744:	00000c06 	br	814778 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
  814748:	e13ffe17 	ldw	r4,-8(fp)
  81474c:	014020b4 	movhi	r5,130
  814750:	2970e404 	addi	r5,r5,-15472
  814754:	080fdec0 	call	80fdec <strcmp>
  814758:	1004c03a 	cmpne	r2,r2,zero
  81475c:	1000031e 	bne	r2,zero,81476c <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
  814760:	e0bffe17 	ldw	r2,-8(fp)
  814764:	10000005 	stb	zero,0(r2)
			break;
  814768:	00000a06 	br	814794 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
  81476c:	e0bffe17 	ldw	r2,-8(fp)
  814770:	10800044 	addi	r2,r2,1
  814774:	e0bffe15 	stw	r2,-8(fp)
  814778:	e0bffe17 	ldw	r2,-8(fp)
  81477c:	10800003 	ldbu	r2,0(r2)
  814780:	10803fcc 	andi	r2,r2,255
  814784:	1080201c 	xori	r2,r2,128
  814788:	10bfe004 	addi	r2,r2,-128
  81478c:	1004c03a 	cmpne	r2,r2,zero
  814790:	103fed1e 	bne	r2,zero,814748 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
  814794:	e037883a 	mov	sp,fp
  814798:	dfc00117 	ldw	ra,4(sp)
  81479c:	df000017 	ldw	fp,0(sp)
  8147a0:	dec00204 	addi	sp,sp,8
  8147a4:	f800283a 	ret

008147a8 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
  8147a8:	defffc04 	addi	sp,sp,-16
  8147ac:	dfc00315 	stw	ra,12(sp)
  8147b0:	df000215 	stw	fp,8(sp)
  8147b4:	df000204 	addi	fp,sp,8
  8147b8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
  8147bc:	e13fff17 	ldw	r4,-4(fp)
  8147c0:	014020b4 	movhi	r5,130
  8147c4:	2977d504 	addi	r5,r5,-8364
  8147c8:	081aa140 	call	81aa14 <alt_find_dev>
  8147cc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  8147d0:	e0bffe17 	ldw	r2,-8(fp)
}
  8147d4:	e037883a 	mov	sp,fp
  8147d8:	dfc00117 	ldw	ra,4(sp)
  8147dc:	df000017 	ldw	fp,0(sp)
  8147e0:	dec00204 	addi	sp,sp,8
  8147e4:	f800283a 	ret

008147e8 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
  8147e8:	defff904 	addi	sp,sp,-28
  8147ec:	df000615 	stw	fp,24(sp)
  8147f0:	df000604 	addi	fp,sp,24
  8147f4:	e13ffb15 	stw	r4,-20(fp)
  8147f8:	e1bffd15 	stw	r6,-12(fp)
  8147fc:	e1fffe15 	stw	r7,-8(fp)
  814800:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  814804:	e0bffb17 	ldw	r2,-20(fp)
  814808:	10c00c17 	ldw	r3,48(r2)
  81480c:	e0bffd17 	ldw	r2,-12(fp)
  814810:	10c0042e 	bgeu	r2,r3,814824 <alt_up_char_buffer_draw+0x3c>
  814814:	e0bffb17 	ldw	r2,-20(fp)
  814818:	10c00d17 	ldw	r3,52(r2)
  81481c:	e0bffe17 	ldw	r2,-8(fp)
  814820:	10c00336 	bltu	r2,r3,814830 <alt_up_char_buffer_draw+0x48>
		return -1;
  814824:	00bfffc4 	movi	r2,-1
  814828:	e0bfff15 	stw	r2,-4(fp)
  81482c:	00001d06 	br	8148a4 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
  814830:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
  814834:	e0bffb17 	ldw	r2,-20(fp)
  814838:	10c00f17 	ldw	r3,60(r2)
  81483c:	e0bffd17 	ldw	r2,-12(fp)
  814840:	1886703a 	and	r3,r3,r2
  814844:	e0bffb17 	ldw	r2,-20(fp)
  814848:	10800e17 	ldw	r2,56(r2)
  81484c:	1886983a 	sll	r3,r3,r2
  814850:	e0bffa17 	ldw	r2,-24(fp)
  814854:	10c4b03a 	or	r2,r2,r3
  814858:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
  81485c:	e0bffb17 	ldw	r2,-20(fp)
  814860:	10c01117 	ldw	r3,68(r2)
  814864:	e0bffe17 	ldw	r2,-8(fp)
  814868:	1886703a 	and	r3,r3,r2
  81486c:	e0bffb17 	ldw	r2,-20(fp)
  814870:	10801017 	ldw	r2,64(r2)
  814874:	1886983a 	sll	r3,r3,r2
  814878:	e0bffa17 	ldw	r2,-24(fp)
  81487c:	10c4b03a 	or	r2,r2,r3
  814880:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
  814884:	e0bffb17 	ldw	r2,-20(fp)
  814888:	10800b17 	ldw	r2,44(r2)
  81488c:	1007883a 	mov	r3,r2
  814890:	e0bffa17 	ldw	r2,-24(fp)
  814894:	1885883a 	add	r2,r3,r2
  814898:	e0fffc03 	ldbu	r3,-16(fp)
  81489c:	10c00025 	stbio	r3,0(r2)

	return 0;
  8148a0:	e03fff15 	stw	zero,-4(fp)
  8148a4:	e0bfff17 	ldw	r2,-4(fp)
}
  8148a8:	e037883a 	mov	sp,fp
  8148ac:	df000017 	ldw	fp,0(sp)
  8148b0:	dec00104 	addi	sp,sp,4
  8148b4:	f800283a 	ret

008148b8 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
  8148b8:	defff904 	addi	sp,sp,-28
  8148bc:	df000615 	stw	fp,24(sp)
  8148c0:	df000604 	addi	fp,sp,24
  8148c4:	e13ffb15 	stw	r4,-20(fp)
  8148c8:	e17ffc15 	stw	r5,-16(fp)
  8148cc:	e1bffd15 	stw	r6,-12(fp)
  8148d0:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  8148d4:	e0bffb17 	ldw	r2,-20(fp)
  8148d8:	10c00c17 	ldw	r3,48(r2)
  8148dc:	e0bffd17 	ldw	r2,-12(fp)
  8148e0:	10c0042e 	bgeu	r2,r3,8148f4 <alt_up_char_buffer_string+0x3c>
  8148e4:	e0bffb17 	ldw	r2,-20(fp)
  8148e8:	10c00d17 	ldw	r3,52(r2)
  8148ec:	e0bffe17 	ldw	r2,-8(fp)
  8148f0:	10c00336 	bltu	r2,r3,814900 <alt_up_char_buffer_string+0x48>
		return -1;
  8148f4:	00bfffc4 	movi	r2,-1
  8148f8:	e0bfff15 	stw	r2,-4(fp)
  8148fc:	00002e06 	br	8149b8 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
  814900:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
  814904:	e0bffb17 	ldw	r2,-20(fp)
  814908:	10801017 	ldw	r2,64(r2)
  81490c:	1007883a 	mov	r3,r2
  814910:	e0bffe17 	ldw	r2,-8(fp)
  814914:	10c6983a 	sll	r3,r2,r3
  814918:	e0bffd17 	ldw	r2,-12(fp)
  81491c:	1885883a 	add	r2,r3,r2
  814920:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
  814924:	00001c06 	br	814998 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
  814928:	e0bffb17 	ldw	r2,-20(fp)
  81492c:	10800b17 	ldw	r2,44(r2)
  814930:	1007883a 	mov	r3,r2
  814934:	e0bffa17 	ldw	r2,-24(fp)
  814938:	1889883a 	add	r4,r3,r2
  81493c:	e0bffc17 	ldw	r2,-16(fp)
  814940:	10800003 	ldbu	r2,0(r2)
  814944:	10c03fcc 	andi	r3,r2,255
  814948:	18c0201c 	xori	r3,r3,128
  81494c:	18ffe004 	addi	r3,r3,-128
  814950:	2005883a 	mov	r2,r4
  814954:	10c00025 	stbio	r3,0(r2)
		++ptr;
  814958:	e0bffc17 	ldw	r2,-16(fp)
  81495c:	10800044 	addi	r2,r2,1
  814960:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
  814964:	e0bffd17 	ldw	r2,-12(fp)
  814968:	10800044 	addi	r2,r2,1
  81496c:	e0bffd15 	stw	r2,-12(fp)
  814970:	e0bffb17 	ldw	r2,-20(fp)
  814974:	10c00c17 	ldw	r3,48(r2)
  814978:	e0bffd17 	ldw	r2,-12(fp)
  81497c:	10c00336 	bltu	r2,r3,81498c <alt_up_char_buffer_string+0xd4>
			return -1;
  814980:	00bfffc4 	movi	r2,-1
  814984:	e0bfff15 	stw	r2,-4(fp)
  814988:	00000b06 	br	8149b8 <alt_up_char_buffer_string+0x100>
		++offset;
  81498c:	e0bffa17 	ldw	r2,-24(fp)
  814990:	10800044 	addi	r2,r2,1
  814994:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
  814998:	e0bffc17 	ldw	r2,-16(fp)
  81499c:	10800003 	ldbu	r2,0(r2)
  8149a0:	10803fcc 	andi	r2,r2,255
  8149a4:	1080201c 	xori	r2,r2,128
  8149a8:	10bfe004 	addi	r2,r2,-128
  8149ac:	1004c03a 	cmpne	r2,r2,zero
  8149b0:	103fdd1e 	bne	r2,zero,814928 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
  8149b4:	e03fff15 	stw	zero,-4(fp)
  8149b8:	e0bfff17 	ldw	r2,-4(fp)
}
  8149bc:	e037883a 	mov	sp,fp
  8149c0:	df000017 	ldw	fp,0(sp)
  8149c4:	dec00104 	addi	sp,sp,4
  8149c8:	f800283a 	ret

008149cc <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
  8149cc:	defffe04 	addi	sp,sp,-8
  8149d0:	df000115 	stw	fp,4(sp)
  8149d4:	df000104 	addi	fp,sp,4
  8149d8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
  8149dc:	e0bfff17 	ldw	r2,-4(fp)
  8149e0:	10800a17 	ldw	r2,40(r2)
  8149e4:	10800084 	addi	r2,r2,2
  8149e8:	1007883a 	mov	r3,r2
  8149ec:	00800044 	movi	r2,1
  8149f0:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
  8149f4:	e0bfff17 	ldw	r2,-4(fp)
  8149f8:	10800a17 	ldw	r2,40(r2)
  8149fc:	10800084 	addi	r2,r2,2
  814a00:	10800023 	ldbuio	r2,0(r2)
  814a04:	1080004c 	andi	r2,r2,1
  814a08:	10803fcc 	andi	r2,r2,255
  814a0c:	1004c03a 	cmpne	r2,r2,zero
  814a10:	103ff81e 	bne	r2,zero,8149f4 <alt_up_char_buffer_clear+0x28>
	return 0;
  814a14:	0005883a 	mov	r2,zero
}
  814a18:	e037883a 	mov	sp,fp
  814a1c:	df000017 	ldw	fp,0(sp)
  814a20:	dec00104 	addi	sp,sp,4
  814a24:	f800283a 	ret

00814a28 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  814a28:	defffc04 	addi	sp,sp,-16
  814a2c:	dfc00315 	stw	ra,12(sp)
  814a30:	df000215 	stw	fp,8(sp)
  814a34:	df000204 	addi	fp,sp,8
  814a38:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  814a3c:	e13fff17 	ldw	r4,-4(fp)
  814a40:	014020b4 	movhi	r5,130
  814a44:	2977d504 	addi	r5,r5,-8364
  814a48:	081aa140 	call	81aa14 <alt_find_dev>
  814a4c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  814a50:	e0bffe17 	ldw	r2,-8(fp)
}
  814a54:	e037883a 	mov	sp,fp
  814a58:	dfc00117 	ldw	ra,4(sp)
  814a5c:	df000017 	ldw	fp,0(sp)
  814a60:	dec00204 	addi	sp,sp,8
  814a64:	f800283a 	ret

00814a68 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  814a68:	defff904 	addi	sp,sp,-28
  814a6c:	df000615 	stw	fp,24(sp)
  814a70:	df000604 	addi	fp,sp,24
  814a74:	e13ffb15 	stw	r4,-20(fp)
  814a78:	e17ffc15 	stw	r5,-16(fp)
  814a7c:	e1bffd15 	stw	r6,-12(fp)
  814a80:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  814a84:	e0bffb17 	ldw	r2,-20(fp)
  814a88:	10c00f17 	ldw	r3,60(r2)
  814a8c:	e0bffd17 	ldw	r2,-12(fp)
  814a90:	10c0042e 	bgeu	r2,r3,814aa4 <alt_up_pixel_buffer_dma_draw+0x3c>
  814a94:	e0bffb17 	ldw	r2,-20(fp)
  814a98:	10c01017 	ldw	r3,64(r2)
  814a9c:	e0bffe17 	ldw	r2,-8(fp)
  814aa0:	10c00336 	bltu	r2,r3,814ab0 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
  814aa4:	00bfffc4 	movi	r2,-1
  814aa8:	e0bfff15 	stw	r2,-4(fp)
  814aac:	00005106 	br	814bf4 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
  814ab0:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  814ab4:	e0bffb17 	ldw	r2,-20(fp)
  814ab8:	10800d17 	ldw	r2,52(r2)
  814abc:	1004c03a 	cmpne	r2,r2,zero
  814ac0:	1000151e 	bne	r2,zero,814b18 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  814ac4:	e0bffb17 	ldw	r2,-20(fp)
  814ac8:	10c01217 	ldw	r3,72(r2)
  814acc:	e0bffd17 	ldw	r2,-12(fp)
  814ad0:	1886703a 	and	r3,r3,r2
  814ad4:	e0bffb17 	ldw	r2,-20(fp)
  814ad8:	10801117 	ldw	r2,68(r2)
  814adc:	1886983a 	sll	r3,r3,r2
  814ae0:	e0bffa17 	ldw	r2,-24(fp)
  814ae4:	10c4b03a 	or	r2,r2,r3
  814ae8:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  814aec:	e0bffb17 	ldw	r2,-20(fp)
  814af0:	10c01417 	ldw	r3,80(r2)
  814af4:	e0bffe17 	ldw	r2,-8(fp)
  814af8:	1886703a 	and	r3,r3,r2
  814afc:	e0bffb17 	ldw	r2,-20(fp)
  814b00:	10801317 	ldw	r2,76(r2)
  814b04:	1886983a 	sll	r3,r3,r2
  814b08:	e0bffa17 	ldw	r2,-24(fp)
  814b0c:	10c4b03a 	or	r2,r2,r3
  814b10:	e0bffa15 	stw	r2,-24(fp)
  814b14:	00001706 	br	814b74 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  814b18:	e0bffb17 	ldw	r2,-20(fp)
  814b1c:	10c01217 	ldw	r3,72(r2)
  814b20:	e0bffd17 	ldw	r2,-12(fp)
  814b24:	1886703a 	and	r3,r3,r2
  814b28:	e0bffb17 	ldw	r2,-20(fp)
  814b2c:	10801117 	ldw	r2,68(r2)
  814b30:	1886983a 	sll	r3,r3,r2
  814b34:	e0bffa17 	ldw	r2,-24(fp)
  814b38:	10c5883a 	add	r2,r2,r3
  814b3c:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  814b40:	e0bffb17 	ldw	r2,-20(fp)
  814b44:	10c01417 	ldw	r3,80(r2)
  814b48:	e0bffe17 	ldw	r2,-8(fp)
  814b4c:	1886703a 	and	r3,r3,r2
  814b50:	e0bffb17 	ldw	r2,-20(fp)
  814b54:	10800f17 	ldw	r2,60(r2)
  814b58:	1887383a 	mul	r3,r3,r2
  814b5c:	e0bffb17 	ldw	r2,-20(fp)
  814b60:	10801117 	ldw	r2,68(r2)
  814b64:	1886983a 	sll	r3,r3,r2
  814b68:	e0bffa17 	ldw	r2,-24(fp)
  814b6c:	10c5883a 	add	r2,r2,r3
  814b70:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  814b74:	e0bffb17 	ldw	r2,-20(fp)
  814b78:	10800e17 	ldw	r2,56(r2)
  814b7c:	10800058 	cmpnei	r2,r2,1
  814b80:	1000081e 	bne	r2,zero,814ba4 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  814b84:	e0bffb17 	ldw	r2,-20(fp)
  814b88:	10800c17 	ldw	r2,48(r2)
  814b8c:	1007883a 	mov	r3,r2
  814b90:	e0bffa17 	ldw	r2,-24(fp)
  814b94:	1885883a 	add	r2,r3,r2
  814b98:	e0fffc17 	ldw	r3,-16(fp)
  814b9c:	10c00025 	stbio	r3,0(r2)
  814ba0:	00001306 	br	814bf0 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  814ba4:	e0bffb17 	ldw	r2,-20(fp)
  814ba8:	10800e17 	ldw	r2,56(r2)
  814bac:	10800098 	cmpnei	r2,r2,2
  814bb0:	1000081e 	bne	r2,zero,814bd4 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  814bb4:	e0bffb17 	ldw	r2,-20(fp)
  814bb8:	10800c17 	ldw	r2,48(r2)
  814bbc:	1007883a 	mov	r3,r2
  814bc0:	e0bffa17 	ldw	r2,-24(fp)
  814bc4:	1885883a 	add	r2,r3,r2
  814bc8:	e0fffc17 	ldw	r3,-16(fp)
  814bcc:	10c0002d 	sthio	r3,0(r2)
  814bd0:	00000706 	br	814bf0 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  814bd4:	e0bffb17 	ldw	r2,-20(fp)
  814bd8:	10800c17 	ldw	r2,48(r2)
  814bdc:	1007883a 	mov	r3,r2
  814be0:	e0bffa17 	ldw	r2,-24(fp)
  814be4:	1885883a 	add	r2,r3,r2
  814be8:	e0fffc17 	ldw	r3,-16(fp)
  814bec:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  814bf0:	e03fff15 	stw	zero,-4(fp)
  814bf4:	e0bfff17 	ldw	r2,-4(fp)
}
  814bf8:	e037883a 	mov	sp,fp
  814bfc:	df000017 	ldw	fp,0(sp)
  814c00:	dec00104 	addi	sp,sp,4
  814c04:	f800283a 	ret

00814c08 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  814c08:	defffd04 	addi	sp,sp,-12
  814c0c:	df000215 	stw	fp,8(sp)
  814c10:	df000204 	addi	fp,sp,8
  814c14:	e13ffe15 	stw	r4,-8(fp)
  814c18:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  814c1c:	e0bffe17 	ldw	r2,-8(fp)
  814c20:	10800a17 	ldw	r2,40(r2)
  814c24:	10800104 	addi	r2,r2,4
  814c28:	e0ffff17 	ldw	r3,-4(fp)
  814c2c:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  814c30:	e0bffe17 	ldw	r2,-8(fp)
  814c34:	10800a17 	ldw	r2,40(r2)
  814c38:	10800104 	addi	r2,r2,4
  814c3c:	10800037 	ldwio	r2,0(r2)
  814c40:	1007883a 	mov	r3,r2
  814c44:	e0bffe17 	ldw	r2,-8(fp)
  814c48:	10c00c15 	stw	r3,48(r2)
	return 0;
  814c4c:	0005883a 	mov	r2,zero
}
  814c50:	e037883a 	mov	sp,fp
  814c54:	df000017 	ldw	fp,0(sp)
  814c58:	dec00104 	addi	sp,sp,4
  814c5c:	f800283a 	ret

00814c60 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  814c60:	defffe04 	addi	sp,sp,-8
  814c64:	df000115 	stw	fp,4(sp)
  814c68:	df000104 	addi	fp,sp,4
  814c6c:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  814c70:	e0bfff17 	ldw	r2,-4(fp)
  814c74:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  814c78:	e0bfff17 	ldw	r2,-4(fp)
  814c7c:	10800a17 	ldw	r2,40(r2)
  814c80:	1007883a 	mov	r3,r2
  814c84:	00800044 	movi	r2,1
  814c88:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  814c8c:	e0bfff17 	ldw	r2,-4(fp)
  814c90:	10c00b17 	ldw	r3,44(r2)
  814c94:	e0bfff17 	ldw	r2,-4(fp)
  814c98:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  814c9c:	e0bfff17 	ldw	r2,-4(fp)
  814ca0:	11000b15 	stw	r4,44(r2)
	return 0;
  814ca4:	0005883a 	mov	r2,zero
}
  814ca8:	e037883a 	mov	sp,fp
  814cac:	df000017 	ldw	fp,0(sp)
  814cb0:	dec00104 	addi	sp,sp,4
  814cb4:	f800283a 	ret

00814cb8 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  814cb8:	defffe04 	addi	sp,sp,-8
  814cbc:	df000115 	stw	fp,4(sp)
  814cc0:	df000104 	addi	fp,sp,4
  814cc4:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  814cc8:	e0bfff17 	ldw	r2,-4(fp)
  814ccc:	10800a17 	ldw	r2,40(r2)
  814cd0:	10800304 	addi	r2,r2,12
  814cd4:	10800037 	ldwio	r2,0(r2)
  814cd8:	1080004c 	andi	r2,r2,1
}
  814cdc:	e037883a 	mov	sp,fp
  814ce0:	df000017 	ldw	fp,0(sp)
  814ce4:	dec00104 	addi	sp,sp,4
  814ce8:	f800283a 	ret

00814cec <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  814cec:	defff604 	addi	sp,sp,-40
  814cf0:	df000915 	stw	fp,36(sp)
  814cf4:	df000904 	addi	fp,sp,36
  814cf8:	e13ff715 	stw	r4,-36(fp)
  814cfc:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  814d00:	e0bff817 	ldw	r2,-32(fp)
  814d04:	10800058 	cmpnei	r2,r2,1
  814d08:	1000041e 	bne	r2,zero,814d1c <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  814d0c:	e0bff717 	ldw	r2,-36(fp)
  814d10:	10800c17 	ldw	r2,48(r2)
  814d14:	e0bfff15 	stw	r2,-4(fp)
  814d18:	00000306 	br	814d28 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  814d1c:	e0bff717 	ldw	r2,-36(fp)
  814d20:	10800b17 	ldw	r2,44(r2)
  814d24:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  814d28:	e0bff717 	ldw	r2,-36(fp)
  814d2c:	10800f17 	ldw	r2,60(r2)
  814d30:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  814d34:	e0bff717 	ldw	r2,-36(fp)
  814d38:	10800e17 	ldw	r2,56(r2)
  814d3c:	10800098 	cmpnei	r2,r2,2
  814d40:	1000051e 	bne	r2,zero,814d58 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
  814d44:	e0fffe17 	ldw	r3,-8(fp)
  814d48:	e0fffe17 	ldw	r3,-8(fp)
  814d4c:	18c5883a 	add	r2,r3,r3
  814d50:	e0bffe15 	stw	r2,-8(fp)
  814d54:	00000506 	br	814d6c <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
  814d58:	e13ffe17 	ldw	r4,-8(fp)
  814d5c:	e13ffe17 	ldw	r4,-8(fp)
  814d60:	2105883a 	add	r2,r4,r4
  814d64:	1085883a 	add	r2,r2,r2
  814d68:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  814d6c:	e0bff717 	ldw	r2,-36(fp)
  814d70:	10801017 	ldw	r2,64(r2)
  814d74:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  814d78:	e0bff717 	ldw	r2,-36(fp)
  814d7c:	10800d17 	ldw	r2,52(r2)
  814d80:	1004c03a 	cmpne	r2,r2,zero
  814d84:	10001e1e 	bne	r2,zero,814e00 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  814d88:	e0bff717 	ldw	r2,-36(fp)
  814d8c:	10801317 	ldw	r2,76(r2)
  814d90:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  814d94:	e03ffb15 	stw	zero,-20(fp)
  814d98:	00001506 	br	814df0 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
  814d9c:	e03ffc15 	stw	zero,-16(fp)
  814da0:	00000706 	br	814dc0 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
  814da4:	e0ffff17 	ldw	r3,-4(fp)
  814da8:	e0bffc17 	ldw	r2,-16(fp)
  814dac:	1885883a 	add	r2,r3,r2
  814db0:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  814db4:	e0bffc17 	ldw	r2,-16(fp)
  814db8:	10800104 	addi	r2,r2,4
  814dbc:	e0bffc15 	stw	r2,-16(fp)
  814dc0:	e0fffc17 	ldw	r3,-16(fp)
  814dc4:	e13ffe17 	ldw	r4,-8(fp)
  814dc8:	193ff636 	bltu	r3,r4,814da4 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  814dcc:	e0fffa17 	ldw	r3,-24(fp)
  814dd0:	00800044 	movi	r2,1
  814dd4:	10c4983a 	sll	r2,r2,r3
  814dd8:	e0ffff17 	ldw	r3,-4(fp)
  814ddc:	1887883a 	add	r3,r3,r2
  814de0:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  814de4:	e13ffb17 	ldw	r4,-20(fp)
  814de8:	21000044 	addi	r4,r4,1
  814dec:	e13ffb15 	stw	r4,-20(fp)
  814df0:	e0bffb17 	ldw	r2,-20(fp)
  814df4:	e0fffd17 	ldw	r3,-12(fp)
  814df8:	10ffe836 	bltu	r2,r3,814d9c <alt_up_pixel_buffer_dma_clear_screen+0xb0>
  814dfc:	00001006 	br	814e40 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  814e00:	e13ffd17 	ldw	r4,-12(fp)
  814e04:	e0bffe17 	ldw	r2,-8(fp)
  814e08:	2089383a 	mul	r4,r4,r2
  814e0c:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  814e10:	e03ff915 	stw	zero,-28(fp)
  814e14:	00000706 	br	814e34 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
  814e18:	e0ffff17 	ldw	r3,-4(fp)
  814e1c:	e0bff917 	ldw	r2,-28(fp)
  814e20:	1885883a 	add	r2,r3,r2
  814e24:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  814e28:	e0fff917 	ldw	r3,-28(fp)
  814e2c:	18c00104 	addi	r3,r3,4
  814e30:	e0fff915 	stw	r3,-28(fp)
  814e34:	e0bff917 	ldw	r2,-28(fp)
  814e38:	e13ffd17 	ldw	r4,-12(fp)
  814e3c:	113ff636 	bltu	r2,r4,814e18 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  814e40:	e037883a 	mov	sp,fp
  814e44:	df000017 	ldw	fp,0(sp)
  814e48:	dec00104 	addi	sp,sp,4
  814e4c:	f800283a 	ret

00814e50 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  814e50:	deffed04 	addi	sp,sp,-76
  814e54:	df001215 	stw	fp,72(sp)
  814e58:	df001204 	addi	fp,sp,72
  814e5c:	e13fee15 	stw	r4,-72(fp)
  814e60:	e17fef15 	stw	r5,-68(fp)
  814e64:	e1bff015 	stw	r6,-64(fp)
  814e68:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  814e6c:	e0bfee17 	ldw	r2,-72(fp)
  814e70:	10800f17 	ldw	r2,60(r2)
  814e74:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  814e78:	e0bfee17 	ldw	r2,-72(fp)
  814e7c:	10801017 	ldw	r2,64(r2)
  814e80:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  814e84:	e0bfef17 	ldw	r2,-68(fp)
  814e88:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  814e8c:	e0fff117 	ldw	r3,-60(fp)
  814e90:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  814e94:	e13ff017 	ldw	r4,-64(fp)
  814e98:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  814e9c:	e0800117 	ldw	r2,4(fp)
  814ea0:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  814ea4:	e0c00217 	ldw	r3,8(fp)
  814ea8:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  814eac:	e13ffa17 	ldw	r4,-24(fp)
  814eb0:	e0bffb17 	ldw	r2,-20(fp)
  814eb4:	2080062e 	bgeu	r4,r2,814ed0 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
  814eb8:	e0fffb17 	ldw	r3,-20(fp)
  814ebc:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  814ec0:	e13ffa17 	ldw	r4,-24(fp)
  814ec4:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  814ec8:	e0bffc17 	ldw	r2,-16(fp)
  814ecc:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  814ed0:	e0fff817 	ldw	r3,-32(fp)
  814ed4:	e13ff917 	ldw	r4,-28(fp)
  814ed8:	1900062e 	bgeu	r3,r4,814ef4 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
  814edc:	e0bff917 	ldw	r2,-28(fp)
  814ee0:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  814ee4:	e0fff817 	ldw	r3,-32(fp)
  814ee8:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  814eec:	e13ffc17 	ldw	r4,-16(fp)
  814ef0:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  814ef4:	e0bffb17 	ldw	r2,-20(fp)
  814ef8:	e0fffe17 	ldw	r3,-8(fp)
  814efc:	10c10d2e 	bgeu	r2,r3,815334 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
  814f00:	e13ff917 	ldw	r4,-28(fp)
  814f04:	e0bffd17 	ldw	r2,-12(fp)
  814f08:	20800136 	bltu	r4,r2,814f10 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  814f0c:	00010906 	br	815334 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  814f10:	e0fffa17 	ldw	r3,-24(fp)
  814f14:	e13ffe17 	ldw	r4,-8(fp)
  814f18:	19000336 	bltu	r3,r4,814f28 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
  814f1c:	e0bffe17 	ldw	r2,-8(fp)
  814f20:	10bfffc4 	addi	r2,r2,-1
  814f24:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  814f28:	e0fff817 	ldw	r3,-32(fp)
  814f2c:	e13ffd17 	ldw	r4,-12(fp)
  814f30:	19000336 	bltu	r3,r4,814f40 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
  814f34:	e0bffd17 	ldw	r2,-12(fp)
  814f38:	10bfffc4 	addi	r2,r2,-1
  814f3c:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  814f40:	e0800317 	ldw	r2,12(fp)
  814f44:	10800058 	cmpnei	r2,r2,1
  814f48:	1000041e 	bne	r2,zero,814f5c <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
  814f4c:	e0bfee17 	ldw	r2,-72(fp)
  814f50:	10800c17 	ldw	r2,48(r2)
  814f54:	e0bfff15 	stw	r2,-4(fp)
  814f58:	00000306 	br	814f68 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
  814f5c:	e0bfee17 	ldw	r2,-72(fp)
  814f60:	10800b17 	ldw	r2,44(r2)
  814f64:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  814f68:	e0bfee17 	ldw	r2,-72(fp)
  814f6c:	10800d17 	ldw	r2,52(r2)
  814f70:	1004c03a 	cmpne	r2,r2,zero
  814f74:	1000721e 	bne	r2,zero,815140 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  814f78:	e0bfee17 	ldw	r2,-72(fp)
  814f7c:	10801317 	ldw	r2,76(r2)
  814f80:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  814f84:	e0bff417 	ldw	r2,-48(fp)
  814f88:	e0fff917 	ldw	r3,-28(fp)
  814f8c:	1884983a 	sll	r2,r3,r2
  814f90:	e13fff17 	ldw	r4,-4(fp)
  814f94:	2089883a 	add	r4,r4,r2
  814f98:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  814f9c:	e0bfee17 	ldw	r2,-72(fp)
  814fa0:	10800e17 	ldw	r2,56(r2)
  814fa4:	10800058 	cmpnei	r2,r2,1
  814fa8:	10001e1e 	bne	r2,zero,815024 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
  814fac:	e0bff917 	ldw	r2,-28(fp)
  814fb0:	e0bff515 	stw	r2,-44(fp)
  814fb4:	00001706 	br	815014 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
  814fb8:	e0fffb17 	ldw	r3,-20(fp)
  814fbc:	e0fff615 	stw	r3,-40(fp)
  814fc0:	00000806 	br	814fe4 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
  814fc4:	e0ffff17 	ldw	r3,-4(fp)
  814fc8:	e0bff617 	ldw	r2,-40(fp)
  814fcc:	1885883a 	add	r2,r3,r2
  814fd0:	e0fff717 	ldw	r3,-36(fp)
  814fd4:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  814fd8:	e13ff617 	ldw	r4,-40(fp)
  814fdc:	21000044 	addi	r4,r4,1
  814fe0:	e13ff615 	stw	r4,-40(fp)
  814fe4:	e0bffa17 	ldw	r2,-24(fp)
  814fe8:	e0fff617 	ldw	r3,-40(fp)
  814fec:	10fff52e 	bgeu	r2,r3,814fc4 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  814ff0:	e0fff417 	ldw	r3,-48(fp)
  814ff4:	00800044 	movi	r2,1
  814ff8:	10c4983a 	sll	r2,r2,r3
  814ffc:	e13fff17 	ldw	r4,-4(fp)
  815000:	2089883a 	add	r4,r4,r2
  815004:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  815008:	e0bff517 	ldw	r2,-44(fp)
  81500c:	10800044 	addi	r2,r2,1
  815010:	e0bff515 	stw	r2,-44(fp)
  815014:	e0fff817 	ldw	r3,-32(fp)
  815018:	e13ff517 	ldw	r4,-44(fp)
  81501c:	193fe62e 	bgeu	r3,r4,814fb8 <alt_up_pixel_buffer_dma_draw_box+0x168>
  815020:	0000c406 	br	815334 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  815024:	e0bfee17 	ldw	r2,-72(fp)
  815028:	10800e17 	ldw	r2,56(r2)
  81502c:	10800098 	cmpnei	r2,r2,2
  815030:	1000211e 	bne	r2,zero,8150b8 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
  815034:	e0bff917 	ldw	r2,-28(fp)
  815038:	e0bff515 	stw	r2,-44(fp)
  81503c:	00001a06 	br	8150a8 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
  815040:	e0fffb17 	ldw	r3,-20(fp)
  815044:	e0fff615 	stw	r3,-40(fp)
  815048:	00000b06 	br	815078 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  81504c:	e13ff617 	ldw	r4,-40(fp)
  815050:	e13ff617 	ldw	r4,-40(fp)
  815054:	2105883a 	add	r2,r4,r4
  815058:	1007883a 	mov	r3,r2
  81505c:	e0bfff17 	ldw	r2,-4(fp)
  815060:	1885883a 	add	r2,r3,r2
  815064:	e0fff717 	ldw	r3,-36(fp)
  815068:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  81506c:	e0bff617 	ldw	r2,-40(fp)
  815070:	10800044 	addi	r2,r2,1
  815074:	e0bff615 	stw	r2,-40(fp)
  815078:	e0fffa17 	ldw	r3,-24(fp)
  81507c:	e13ff617 	ldw	r4,-40(fp)
  815080:	193ff22e 	bgeu	r3,r4,81504c <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  815084:	e0fff417 	ldw	r3,-48(fp)
  815088:	00800044 	movi	r2,1
  81508c:	10c4983a 	sll	r2,r2,r3
  815090:	e0ffff17 	ldw	r3,-4(fp)
  815094:	1887883a 	add	r3,r3,r2
  815098:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  81509c:	e13ff517 	ldw	r4,-44(fp)
  8150a0:	21000044 	addi	r4,r4,1
  8150a4:	e13ff515 	stw	r4,-44(fp)
  8150a8:	e0bff817 	ldw	r2,-32(fp)
  8150ac:	e0fff517 	ldw	r3,-44(fp)
  8150b0:	10ffe32e 	bgeu	r2,r3,815040 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
  8150b4:	00009f06 	br	815334 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  8150b8:	e13ff917 	ldw	r4,-28(fp)
  8150bc:	e13ff515 	stw	r4,-44(fp)
  8150c0:	00001b06 	br	815130 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
  8150c4:	e0bffb17 	ldw	r2,-20(fp)
  8150c8:	e0bff615 	stw	r2,-40(fp)
  8150cc:	00000c06 	br	815100 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  8150d0:	e0fff617 	ldw	r3,-40(fp)
  8150d4:	e0fff617 	ldw	r3,-40(fp)
  8150d8:	18c5883a 	add	r2,r3,r3
  8150dc:	1085883a 	add	r2,r2,r2
  8150e0:	1007883a 	mov	r3,r2
  8150e4:	e0bfff17 	ldw	r2,-4(fp)
  8150e8:	1885883a 	add	r2,r3,r2
  8150ec:	e0fff717 	ldw	r3,-36(fp)
  8150f0:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  8150f4:	e13ff617 	ldw	r4,-40(fp)
  8150f8:	21000044 	addi	r4,r4,1
  8150fc:	e13ff615 	stw	r4,-40(fp)
  815100:	e0bffa17 	ldw	r2,-24(fp)
  815104:	e0fff617 	ldw	r3,-40(fp)
  815108:	10fff12e 	bgeu	r2,r3,8150d0 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  81510c:	e0fff417 	ldw	r3,-48(fp)
  815110:	00800044 	movi	r2,1
  815114:	10c4983a 	sll	r2,r2,r3
  815118:	e13fff17 	ldw	r4,-4(fp)
  81511c:	2089883a 	add	r4,r4,r2
  815120:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  815124:	e0bff517 	ldw	r2,-44(fp)
  815128:	10800044 	addi	r2,r2,1
  81512c:	e0bff515 	stw	r2,-44(fp)
  815130:	e0fff817 	ldw	r3,-32(fp)
  815134:	e13ff517 	ldw	r4,-44(fp)
  815138:	193fe22e 	bgeu	r3,r4,8150c4 <alt_up_pixel_buffer_dma_draw_box+0x274>
  81513c:	00007d06 	br	815334 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  815140:	e0bfee17 	ldw	r2,-72(fp)
  815144:	10800e17 	ldw	r2,56(r2)
  815148:	10800058 	cmpnei	r2,r2,1
  81514c:	1000221e 	bne	r2,zero,8151d8 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
  815150:	e0fff917 	ldw	r3,-28(fp)
  815154:	e13ffe17 	ldw	r4,-8(fp)
  815158:	1905383a 	mul	r2,r3,r4
  81515c:	e0ffff17 	ldw	r3,-4(fp)
  815160:	1887883a 	add	r3,r3,r2
  815164:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  815168:	e13ff917 	ldw	r4,-28(fp)
  81516c:	e13ff215 	stw	r4,-56(fp)
  815170:	00001506 	br	8151c8 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
  815174:	e0bffb17 	ldw	r2,-20(fp)
  815178:	e0bff315 	stw	r2,-52(fp)
  81517c:	00000806 	br	8151a0 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
  815180:	e0ffff17 	ldw	r3,-4(fp)
  815184:	e0bff317 	ldw	r2,-52(fp)
  815188:	1885883a 	add	r2,r3,r2
  81518c:	e0fff717 	ldw	r3,-36(fp)
  815190:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  815194:	e0fff317 	ldw	r3,-52(fp)
  815198:	18c00044 	addi	r3,r3,1
  81519c:	e0fff315 	stw	r3,-52(fp)
  8151a0:	e13ffa17 	ldw	r4,-24(fp)
  8151a4:	e0bff317 	ldw	r2,-52(fp)
  8151a8:	20bff52e 	bgeu	r4,r2,815180 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  8151ac:	e0ffff17 	ldw	r3,-4(fp)
  8151b0:	e13ffe17 	ldw	r4,-8(fp)
  8151b4:	1907883a 	add	r3,r3,r4
  8151b8:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  8151bc:	e0bff217 	ldw	r2,-56(fp)
  8151c0:	10800044 	addi	r2,r2,1
  8151c4:	e0bff215 	stw	r2,-56(fp)
  8151c8:	e0fff817 	ldw	r3,-32(fp)
  8151cc:	e13ff217 	ldw	r4,-56(fp)
  8151d0:	193fe82e 	bgeu	r3,r4,815174 <alt_up_pixel_buffer_dma_draw_box+0x324>
  8151d4:	00005706 	br	815334 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  8151d8:	e0bfee17 	ldw	r2,-72(fp)
  8151dc:	10800e17 	ldw	r2,56(r2)
  8151e0:	10800098 	cmpnei	r2,r2,2
  8151e4:	1000291e 	bne	r2,zero,81528c <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
  8151e8:	e0fffe17 	ldw	r3,-8(fp)
  8151ec:	e0fffe17 	ldw	r3,-8(fp)
  8151f0:	18c5883a 	add	r2,r3,r3
  8151f4:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  8151f8:	e13ff917 	ldw	r4,-28(fp)
  8151fc:	e0fffe17 	ldw	r3,-8(fp)
  815200:	20c5383a 	mul	r2,r4,r3
  815204:	e13fff17 	ldw	r4,-4(fp)
  815208:	2089883a 	add	r4,r4,r2
  81520c:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  815210:	e0bff917 	ldw	r2,-28(fp)
  815214:	e0bff215 	stw	r2,-56(fp)
  815218:	00001806 	br	81527c <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
  81521c:	e0fffb17 	ldw	r3,-20(fp)
  815220:	e0fff315 	stw	r3,-52(fp)
  815224:	00000b06 	br	815254 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  815228:	e13ff317 	ldw	r4,-52(fp)
  81522c:	e13ff317 	ldw	r4,-52(fp)
  815230:	2105883a 	add	r2,r4,r4
  815234:	1007883a 	mov	r3,r2
  815238:	e0bfff17 	ldw	r2,-4(fp)
  81523c:	1885883a 	add	r2,r3,r2
  815240:	e0fff717 	ldw	r3,-36(fp)
  815244:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  815248:	e0bff317 	ldw	r2,-52(fp)
  81524c:	10800044 	addi	r2,r2,1
  815250:	e0bff315 	stw	r2,-52(fp)
  815254:	e0fffa17 	ldw	r3,-24(fp)
  815258:	e13ff317 	ldw	r4,-52(fp)
  81525c:	193ff22e 	bgeu	r3,r4,815228 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  815260:	e0bfff17 	ldw	r2,-4(fp)
  815264:	e0fffe17 	ldw	r3,-8(fp)
  815268:	10c5883a 	add	r2,r2,r3
  81526c:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  815270:	e13ff217 	ldw	r4,-56(fp)
  815274:	21000044 	addi	r4,r4,1
  815278:	e13ff215 	stw	r4,-56(fp)
  81527c:	e0bff817 	ldw	r2,-32(fp)
  815280:	e0fff217 	ldw	r3,-56(fp)
  815284:	10ffe52e 	bgeu	r2,r3,81521c <alt_up_pixel_buffer_dma_draw_box+0x3cc>
  815288:	00002a06 	br	815334 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  81528c:	e13ffe17 	ldw	r4,-8(fp)
  815290:	e13ffe17 	ldw	r4,-8(fp)
  815294:	2105883a 	add	r2,r4,r4
  815298:	1085883a 	add	r2,r2,r2
  81529c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  8152a0:	e0fff917 	ldw	r3,-28(fp)
  8152a4:	e13ffe17 	ldw	r4,-8(fp)
  8152a8:	1905383a 	mul	r2,r3,r4
  8152ac:	e0ffff17 	ldw	r3,-4(fp)
  8152b0:	1887883a 	add	r3,r3,r2
  8152b4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  8152b8:	e13ff917 	ldw	r4,-28(fp)
  8152bc:	e13ff215 	stw	r4,-56(fp)
  8152c0:	00001906 	br	815328 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
  8152c4:	e0bffb17 	ldw	r2,-20(fp)
  8152c8:	e0bff315 	stw	r2,-52(fp)
  8152cc:	00000c06 	br	815300 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  8152d0:	e0fff317 	ldw	r3,-52(fp)
  8152d4:	e0fff317 	ldw	r3,-52(fp)
  8152d8:	18c5883a 	add	r2,r3,r3
  8152dc:	1085883a 	add	r2,r2,r2
  8152e0:	1007883a 	mov	r3,r2
  8152e4:	e0bfff17 	ldw	r2,-4(fp)
  8152e8:	1885883a 	add	r2,r3,r2
  8152ec:	e0fff717 	ldw	r3,-36(fp)
  8152f0:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  8152f4:	e13ff317 	ldw	r4,-52(fp)
  8152f8:	21000044 	addi	r4,r4,1
  8152fc:	e13ff315 	stw	r4,-52(fp)
  815300:	e0bffa17 	ldw	r2,-24(fp)
  815304:	e0fff317 	ldw	r3,-52(fp)
  815308:	10fff12e 	bgeu	r2,r3,8152d0 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  81530c:	e13fff17 	ldw	r4,-4(fp)
  815310:	e0bffe17 	ldw	r2,-8(fp)
  815314:	2089883a 	add	r4,r4,r2
  815318:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  81531c:	e0fff217 	ldw	r3,-56(fp)
  815320:	18c00044 	addi	r3,r3,1
  815324:	e0fff215 	stw	r3,-56(fp)
  815328:	e13ff817 	ldw	r4,-32(fp)
  81532c:	e0bff217 	ldw	r2,-56(fp)
  815330:	20bfe42e 	bgeu	r4,r2,8152c4 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  815334:	e037883a 	mov	sp,fp
  815338:	df000017 	ldw	fp,0(sp)
  81533c:	dec00104 	addi	sp,sp,4
  815340:	f800283a 	ret

00815344 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  815344:	defff204 	addi	sp,sp,-56
  815348:	df000d15 	stw	fp,52(sp)
  81534c:	df000d04 	addi	fp,sp,52
  815350:	e13ff315 	stw	r4,-52(fp)
  815354:	e17ff415 	stw	r5,-48(fp)
  815358:	e1bff515 	stw	r6,-44(fp)
  81535c:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  815360:	e0bff317 	ldw	r2,-52(fp)
  815364:	10800f17 	ldw	r2,60(r2)
  815368:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  81536c:	e0bff317 	ldw	r2,-52(fp)
  815370:	10801017 	ldw	r2,64(r2)
  815374:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  815378:	e0bff417 	ldw	r2,-48(fp)
  81537c:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  815380:	e0fff517 	ldw	r3,-44(fp)
  815384:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  815388:	e13ff617 	ldw	r4,-40(fp)
  81538c:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  815390:	e0800117 	ldw	r2,4(fp)
  815394:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  815398:	e0fffb17 	ldw	r3,-20(fp)
  81539c:	e13ffc17 	ldw	r4,-16(fp)
  8153a0:	1900042e 	bgeu	r3,r4,8153b4 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
  8153a4:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  8153a8:	e0fffb17 	ldw	r3,-20(fp)
  8153ac:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  8153b0:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  8153b4:	e13ffc17 	ldw	r4,-16(fp)
  8153b8:	e0bffe17 	ldw	r2,-8(fp)
  8153bc:	2080b12e 	bgeu	r4,r2,815684 <alt_up_pixel_buffer_dma_draw_hline+0x340>
  8153c0:	e0fffa17 	ldw	r3,-24(fp)
  8153c4:	e13ffd17 	ldw	r4,-12(fp)
  8153c8:	19000136 	bltu	r3,r4,8153d0 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  8153cc:	0000ad06 	br	815684 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  8153d0:	e0bffb17 	ldw	r2,-20(fp)
  8153d4:	e0fffe17 	ldw	r3,-8(fp)
  8153d8:	10c00336 	bltu	r2,r3,8153e8 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
  8153dc:	e13ffe17 	ldw	r4,-8(fp)
  8153e0:	213fffc4 	addi	r4,r4,-1
  8153e4:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  8153e8:	e0800217 	ldw	r2,8(fp)
  8153ec:	10800058 	cmpnei	r2,r2,1
  8153f0:	1000041e 	bne	r2,zero,815404 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  8153f4:	e0bff317 	ldw	r2,-52(fp)
  8153f8:	10800c17 	ldw	r2,48(r2)
  8153fc:	e0bfff15 	stw	r2,-4(fp)
  815400:	00000306 	br	815410 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  815404:	e0bff317 	ldw	r2,-52(fp)
  815408:	10800b17 	ldw	r2,44(r2)
  81540c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  815410:	e0bff317 	ldw	r2,-52(fp)
  815414:	10800d17 	ldw	r2,52(r2)
  815418:	1004c03a 	cmpne	r2,r2,zero
  81541c:	1000431e 	bne	r2,zero,81552c <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  815420:	e0bff317 	ldw	r2,-52(fp)
  815424:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  815428:	e0fffa17 	ldw	r3,-24(fp)
  81542c:	1884983a 	sll	r2,r3,r2
  815430:	e13fff17 	ldw	r4,-4(fp)
  815434:	2089883a 	add	r4,r4,r2
  815438:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  81543c:	e0bff317 	ldw	r2,-52(fp)
  815440:	10800e17 	ldw	r2,56(r2)
  815444:	10800058 	cmpnei	r2,r2,1
  815448:	10000f1e 	bne	r2,zero,815488 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
  81544c:	e0bffc17 	ldw	r2,-16(fp)
  815450:	e0bff815 	stw	r2,-32(fp)
  815454:	00000806 	br	815478 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
  815458:	e0ffff17 	ldw	r3,-4(fp)
  81545c:	e0bff817 	ldw	r2,-32(fp)
  815460:	1885883a 	add	r2,r3,r2
  815464:	e0fff917 	ldw	r3,-28(fp)
  815468:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  81546c:	e0fff817 	ldw	r3,-32(fp)
  815470:	18c00044 	addi	r3,r3,1
  815474:	e0fff815 	stw	r3,-32(fp)
  815478:	e13ffb17 	ldw	r4,-20(fp)
  81547c:	e0bff817 	ldw	r2,-32(fp)
  815480:	20bff52e 	bgeu	r4,r2,815458 <alt_up_pixel_buffer_dma_draw_hline+0x114>
  815484:	00007f06 	br	815684 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  815488:	e0bff317 	ldw	r2,-52(fp)
  81548c:	10800e17 	ldw	r2,56(r2)
  815490:	10800098 	cmpnei	r2,r2,2
  815494:	1000121e 	bne	r2,zero,8154e0 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
  815498:	e0fffc17 	ldw	r3,-16(fp)
  81549c:	e0fff815 	stw	r3,-32(fp)
  8154a0:	00000b06 	br	8154d0 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  8154a4:	e13ff817 	ldw	r4,-32(fp)
  8154a8:	e13ff817 	ldw	r4,-32(fp)
  8154ac:	2105883a 	add	r2,r4,r4
  8154b0:	1007883a 	mov	r3,r2
  8154b4:	e0bfff17 	ldw	r2,-4(fp)
  8154b8:	1885883a 	add	r2,r3,r2
  8154bc:	e0fff917 	ldw	r3,-28(fp)
  8154c0:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  8154c4:	e0bff817 	ldw	r2,-32(fp)
  8154c8:	10800044 	addi	r2,r2,1
  8154cc:	e0bff815 	stw	r2,-32(fp)
  8154d0:	e0fffb17 	ldw	r3,-20(fp)
  8154d4:	e13ff817 	ldw	r4,-32(fp)
  8154d8:	193ff22e 	bgeu	r3,r4,8154a4 <alt_up_pixel_buffer_dma_draw_hline+0x160>
  8154dc:	00006906 	br	815684 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  8154e0:	e0bffc17 	ldw	r2,-16(fp)
  8154e4:	e0bff815 	stw	r2,-32(fp)
  8154e8:	00000c06 	br	81551c <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  8154ec:	e0fff817 	ldw	r3,-32(fp)
  8154f0:	e0fff817 	ldw	r3,-32(fp)
  8154f4:	18c5883a 	add	r2,r3,r3
  8154f8:	1085883a 	add	r2,r2,r2
  8154fc:	1007883a 	mov	r3,r2
  815500:	e0bfff17 	ldw	r2,-4(fp)
  815504:	1885883a 	add	r2,r3,r2
  815508:	e0fff917 	ldw	r3,-28(fp)
  81550c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  815510:	e13ff817 	ldw	r4,-32(fp)
  815514:	21000044 	addi	r4,r4,1
  815518:	e13ff815 	stw	r4,-32(fp)
  81551c:	e0bffb17 	ldw	r2,-20(fp)
  815520:	e0fff817 	ldw	r3,-32(fp)
  815524:	10fff12e 	bgeu	r2,r3,8154ec <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
  815528:	00005606 	br	815684 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  81552c:	e0bff317 	ldw	r2,-52(fp)
  815530:	10800e17 	ldw	r2,56(r2)
  815534:	10800058 	cmpnei	r2,r2,1
  815538:	1000151e 	bne	r2,zero,815590 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
  81553c:	e13ffa17 	ldw	r4,-24(fp)
  815540:	e0fffe17 	ldw	r3,-8(fp)
  815544:	20c5383a 	mul	r2,r4,r3
  815548:	e13fff17 	ldw	r4,-4(fp)
  81554c:	2089883a 	add	r4,r4,r2
  815550:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  815554:	e0bffc17 	ldw	r2,-16(fp)
  815558:	e0bff715 	stw	r2,-36(fp)
  81555c:	00000806 	br	815580 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  815560:	e0ffff17 	ldw	r3,-4(fp)
  815564:	e0bff717 	ldw	r2,-36(fp)
  815568:	1885883a 	add	r2,r3,r2
  81556c:	e0fff917 	ldw	r3,-28(fp)
  815570:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  815574:	e0fff717 	ldw	r3,-36(fp)
  815578:	18c00044 	addi	r3,r3,1
  81557c:	e0fff715 	stw	r3,-36(fp)
  815580:	e13ffb17 	ldw	r4,-20(fp)
  815584:	e0bff717 	ldw	r2,-36(fp)
  815588:	20bff52e 	bgeu	r4,r2,815560 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
  81558c:	00003d06 	br	815684 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  815590:	e0bff317 	ldw	r2,-52(fp)
  815594:	10800e17 	ldw	r2,56(r2)
  815598:	10800098 	cmpnei	r2,r2,2
  81559c:	10001c1e 	bne	r2,zero,815610 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
  8155a0:	e0fffe17 	ldw	r3,-8(fp)
  8155a4:	e0fffe17 	ldw	r3,-8(fp)
  8155a8:	18c5883a 	add	r2,r3,r3
  8155ac:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  8155b0:	e13ffa17 	ldw	r4,-24(fp)
  8155b4:	e0fffe17 	ldw	r3,-8(fp)
  8155b8:	20c5383a 	mul	r2,r4,r3
  8155bc:	e13fff17 	ldw	r4,-4(fp)
  8155c0:	2089883a 	add	r4,r4,r2
  8155c4:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  8155c8:	e0bffc17 	ldw	r2,-16(fp)
  8155cc:	e0bff715 	stw	r2,-36(fp)
  8155d0:	00000b06 	br	815600 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  8155d4:	e0fff717 	ldw	r3,-36(fp)
  8155d8:	e0fff717 	ldw	r3,-36(fp)
  8155dc:	18c5883a 	add	r2,r3,r3
  8155e0:	1007883a 	mov	r3,r2
  8155e4:	e0bfff17 	ldw	r2,-4(fp)
  8155e8:	1885883a 	add	r2,r3,r2
  8155ec:	e0fff917 	ldw	r3,-28(fp)
  8155f0:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  8155f4:	e13ff717 	ldw	r4,-36(fp)
  8155f8:	21000044 	addi	r4,r4,1
  8155fc:	e13ff715 	stw	r4,-36(fp)
  815600:	e0bffb17 	ldw	r2,-20(fp)
  815604:	e0fff717 	ldw	r3,-36(fp)
  815608:	10fff22e 	bgeu	r2,r3,8155d4 <alt_up_pixel_buffer_dma_draw_hline+0x290>
  81560c:	00001d06 	br	815684 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  815610:	e13ffe17 	ldw	r4,-8(fp)
  815614:	e13ffe17 	ldw	r4,-8(fp)
  815618:	2105883a 	add	r2,r4,r4
  81561c:	1085883a 	add	r2,r2,r2
  815620:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  815624:	e0fffa17 	ldw	r3,-24(fp)
  815628:	e13ffe17 	ldw	r4,-8(fp)
  81562c:	1905383a 	mul	r2,r3,r4
  815630:	e0ffff17 	ldw	r3,-4(fp)
  815634:	1887883a 	add	r3,r3,r2
  815638:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  81563c:	e13ffc17 	ldw	r4,-16(fp)
  815640:	e13ff715 	stw	r4,-36(fp)
  815644:	00000c06 	br	815678 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  815648:	e0fff717 	ldw	r3,-36(fp)
  81564c:	e0fff717 	ldw	r3,-36(fp)
  815650:	18c5883a 	add	r2,r3,r3
  815654:	1085883a 	add	r2,r2,r2
  815658:	1007883a 	mov	r3,r2
  81565c:	e0bfff17 	ldw	r2,-4(fp)
  815660:	1885883a 	add	r2,r3,r2
  815664:	e0fff917 	ldw	r3,-28(fp)
  815668:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  81566c:	e13ff717 	ldw	r4,-36(fp)
  815670:	21000044 	addi	r4,r4,1
  815674:	e13ff715 	stw	r4,-36(fp)
  815678:	e0bffb17 	ldw	r2,-20(fp)
  81567c:	e0fff717 	ldw	r3,-36(fp)
  815680:	10fff12e 	bgeu	r2,r3,815648 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  815684:	e037883a 	mov	sp,fp
  815688:	df000017 	ldw	fp,0(sp)
  81568c:	dec00104 	addi	sp,sp,4
  815690:	f800283a 	ret

00815694 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  815694:	defff104 	addi	sp,sp,-60
  815698:	df000e15 	stw	fp,56(sp)
  81569c:	df000e04 	addi	fp,sp,56
  8156a0:	e13ff215 	stw	r4,-56(fp)
  8156a4:	e17ff315 	stw	r5,-52(fp)
  8156a8:	e1bff415 	stw	r6,-48(fp)
  8156ac:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  8156b0:	e0bff217 	ldw	r2,-56(fp)
  8156b4:	10800f17 	ldw	r2,60(r2)
  8156b8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  8156bc:	e0bff217 	ldw	r2,-56(fp)
  8156c0:	10801017 	ldw	r2,64(r2)
  8156c4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  8156c8:	e0bff317 	ldw	r2,-52(fp)
  8156cc:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  8156d0:	e0fff417 	ldw	r3,-48(fp)
  8156d4:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  8156d8:	e13ff517 	ldw	r4,-44(fp)
  8156dc:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  8156e0:	e0800117 	ldw	r2,4(fp)
  8156e4:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  8156e8:	e0fffa17 	ldw	r3,-24(fp)
  8156ec:	e13ffb17 	ldw	r4,-20(fp)
  8156f0:	1900042e 	bgeu	r3,r4,815704 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
  8156f4:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  8156f8:	e0fffa17 	ldw	r3,-24(fp)
  8156fc:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  815700:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  815704:	e13ffc17 	ldw	r4,-16(fp)
  815708:	e0bffe17 	ldw	r2,-8(fp)
  81570c:	2080d12e 	bgeu	r4,r2,815a54 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
  815710:	e0fffb17 	ldw	r3,-20(fp)
  815714:	e13ffd17 	ldw	r4,-12(fp)
  815718:	19000136 	bltu	r3,r4,815720 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  81571c:	0000cd06 	br	815a54 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  815720:	e0bffa17 	ldw	r2,-24(fp)
  815724:	e0fffd17 	ldw	r3,-12(fp)
  815728:	10c00336 	bltu	r2,r3,815738 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
  81572c:	e13ffd17 	ldw	r4,-12(fp)
  815730:	213fffc4 	addi	r4,r4,-1
  815734:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  815738:	e0800217 	ldw	r2,8(fp)
  81573c:	10800058 	cmpnei	r2,r2,1
  815740:	1000041e 	bne	r2,zero,815754 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  815744:	e0bff217 	ldw	r2,-56(fp)
  815748:	10800c17 	ldw	r2,48(r2)
  81574c:	e0bfff15 	stw	r2,-4(fp)
  815750:	00000306 	br	815760 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  815754:	e0bff217 	ldw	r2,-56(fp)
  815758:	10800b17 	ldw	r2,44(r2)
  81575c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  815760:	e0bff217 	ldw	r2,-56(fp)
  815764:	10800d17 	ldw	r2,52(r2)
  815768:	1004c03a 	cmpne	r2,r2,zero
  81576c:	1000571e 	bne	r2,zero,8158cc <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  815770:	e0bff217 	ldw	r2,-56(fp)
  815774:	10801317 	ldw	r2,76(r2)
  815778:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  81577c:	e0bff717 	ldw	r2,-36(fp)
  815780:	e0fffb17 	ldw	r3,-20(fp)
  815784:	1884983a 	sll	r2,r3,r2
  815788:	e13fff17 	ldw	r4,-4(fp)
  81578c:	2089883a 	add	r4,r4,r2
  815790:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  815794:	e0bff217 	ldw	r2,-56(fp)
  815798:	10800e17 	ldw	r2,56(r2)
  81579c:	10800058 	cmpnei	r2,r2,1
  8157a0:	1000151e 	bne	r2,zero,8157f8 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
  8157a4:	e0bffb17 	ldw	r2,-20(fp)
  8157a8:	e0bff815 	stw	r2,-32(fp)
  8157ac:	00000e06 	br	8157e8 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  8157b0:	e0ffff17 	ldw	r3,-4(fp)
  8157b4:	e0bffc17 	ldw	r2,-16(fp)
  8157b8:	1885883a 	add	r2,r3,r2
  8157bc:	e0fff917 	ldw	r3,-28(fp)
  8157c0:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  8157c4:	e0fff717 	ldw	r3,-36(fp)
  8157c8:	00800044 	movi	r2,1
  8157cc:	10c4983a 	sll	r2,r2,r3
  8157d0:	e0ffff17 	ldw	r3,-4(fp)
  8157d4:	1887883a 	add	r3,r3,r2
  8157d8:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  8157dc:	e13ff817 	ldw	r4,-32(fp)
  8157e0:	21000044 	addi	r4,r4,1
  8157e4:	e13ff815 	stw	r4,-32(fp)
  8157e8:	e0bffa17 	ldw	r2,-24(fp)
  8157ec:	e0fff817 	ldw	r3,-32(fp)
  8157f0:	10ffef2e 	bgeu	r2,r3,8157b0 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
  8157f4:	00009706 	br	815a54 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  8157f8:	e0bff217 	ldw	r2,-56(fp)
  8157fc:	10800e17 	ldw	r2,56(r2)
  815800:	10800098 	cmpnei	r2,r2,2
  815804:	1000181e 	bne	r2,zero,815868 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
  815808:	e13ffb17 	ldw	r4,-20(fp)
  81580c:	e13ff815 	stw	r4,-32(fp)
  815810:	00001106 	br	815858 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  815814:	e0fffc17 	ldw	r3,-16(fp)
  815818:	e0fffc17 	ldw	r3,-16(fp)
  81581c:	18c5883a 	add	r2,r3,r3
  815820:	1007883a 	mov	r3,r2
  815824:	e0bfff17 	ldw	r2,-4(fp)
  815828:	1885883a 	add	r2,r3,r2
  81582c:	e0fff917 	ldw	r3,-28(fp)
  815830:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  815834:	e0fff717 	ldw	r3,-36(fp)
  815838:	00800044 	movi	r2,1
  81583c:	10c4983a 	sll	r2,r2,r3
  815840:	e13fff17 	ldw	r4,-4(fp)
  815844:	2089883a 	add	r4,r4,r2
  815848:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  81584c:	e0bff817 	ldw	r2,-32(fp)
  815850:	10800044 	addi	r2,r2,1
  815854:	e0bff815 	stw	r2,-32(fp)
  815858:	e0fffa17 	ldw	r3,-24(fp)
  81585c:	e13ff817 	ldw	r4,-32(fp)
  815860:	193fec2e 	bgeu	r3,r4,815814 <alt_up_pixel_buffer_dma_draw_vline+0x180>
  815864:	00007b06 	br	815a54 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  815868:	e0bffb17 	ldw	r2,-20(fp)
  81586c:	e0bff815 	stw	r2,-32(fp)
  815870:	00001206 	br	8158bc <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  815874:	e0fffc17 	ldw	r3,-16(fp)
  815878:	e0fffc17 	ldw	r3,-16(fp)
  81587c:	18c5883a 	add	r2,r3,r3
  815880:	1085883a 	add	r2,r2,r2
  815884:	1007883a 	mov	r3,r2
  815888:	e0bfff17 	ldw	r2,-4(fp)
  81588c:	1885883a 	add	r2,r3,r2
  815890:	e0fff917 	ldw	r3,-28(fp)
  815894:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  815898:	e0fff717 	ldw	r3,-36(fp)
  81589c:	00800044 	movi	r2,1
  8158a0:	10c4983a 	sll	r2,r2,r3
  8158a4:	e13fff17 	ldw	r4,-4(fp)
  8158a8:	2089883a 	add	r4,r4,r2
  8158ac:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  8158b0:	e0bff817 	ldw	r2,-32(fp)
  8158b4:	10800044 	addi	r2,r2,1
  8158b8:	e0bff815 	stw	r2,-32(fp)
  8158bc:	e0fffa17 	ldw	r3,-24(fp)
  8158c0:	e13ff817 	ldw	r4,-32(fp)
  8158c4:	193feb2e 	bgeu	r3,r4,815874 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
  8158c8:	00006206 	br	815a54 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  8158cc:	e0bff217 	ldw	r2,-56(fp)
  8158d0:	10800e17 	ldw	r2,56(r2)
  8158d4:	10800058 	cmpnei	r2,r2,1
  8158d8:	1000191e 	bne	r2,zero,815940 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
  8158dc:	e0fffb17 	ldw	r3,-20(fp)
  8158e0:	e13ffe17 	ldw	r4,-8(fp)
  8158e4:	1905383a 	mul	r2,r3,r4
  8158e8:	e0ffff17 	ldw	r3,-4(fp)
  8158ec:	1887883a 	add	r3,r3,r2
  8158f0:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  8158f4:	e13ffb17 	ldw	r4,-20(fp)
  8158f8:	e13ff615 	stw	r4,-40(fp)
  8158fc:	00000c06 	br	815930 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  815900:	e0ffff17 	ldw	r3,-4(fp)
  815904:	e0bffc17 	ldw	r2,-16(fp)
  815908:	1885883a 	add	r2,r3,r2
  81590c:	e0fff917 	ldw	r3,-28(fp)
  815910:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  815914:	e0bfff17 	ldw	r2,-4(fp)
  815918:	e0fffe17 	ldw	r3,-8(fp)
  81591c:	10c5883a 	add	r2,r2,r3
  815920:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  815924:	e13ff617 	ldw	r4,-40(fp)
  815928:	21000044 	addi	r4,r4,1
  81592c:	e13ff615 	stw	r4,-40(fp)
  815930:	e0bffa17 	ldw	r2,-24(fp)
  815934:	e0fff617 	ldw	r3,-40(fp)
  815938:	10fff12e 	bgeu	r2,r3,815900 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
  81593c:	00004506 	br	815a54 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  815940:	e0bff217 	ldw	r2,-56(fp)
  815944:	10800e17 	ldw	r2,56(r2)
  815948:	10800098 	cmpnei	r2,r2,2
  81594c:	1000201e 	bne	r2,zero,8159d0 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
  815950:	e13ffe17 	ldw	r4,-8(fp)
  815954:	e13ffe17 	ldw	r4,-8(fp)
  815958:	2105883a 	add	r2,r4,r4
  81595c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  815960:	e0fffb17 	ldw	r3,-20(fp)
  815964:	e13ffe17 	ldw	r4,-8(fp)
  815968:	1905383a 	mul	r2,r3,r4
  81596c:	e0ffff17 	ldw	r3,-4(fp)
  815970:	1887883a 	add	r3,r3,r2
  815974:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  815978:	e13ffb17 	ldw	r4,-20(fp)
  81597c:	e13ff615 	stw	r4,-40(fp)
  815980:	00000f06 	br	8159c0 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  815984:	e0fffc17 	ldw	r3,-16(fp)
  815988:	e0fffc17 	ldw	r3,-16(fp)
  81598c:	18c5883a 	add	r2,r3,r3
  815990:	1007883a 	mov	r3,r2
  815994:	e0bfff17 	ldw	r2,-4(fp)
  815998:	1885883a 	add	r2,r3,r2
  81599c:	e0fff917 	ldw	r3,-28(fp)
  8159a0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  8159a4:	e13fff17 	ldw	r4,-4(fp)
  8159a8:	e0bffe17 	ldw	r2,-8(fp)
  8159ac:	2089883a 	add	r4,r4,r2
  8159b0:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  8159b4:	e0fff617 	ldw	r3,-40(fp)
  8159b8:	18c00044 	addi	r3,r3,1
  8159bc:	e0fff615 	stw	r3,-40(fp)
  8159c0:	e13ffa17 	ldw	r4,-24(fp)
  8159c4:	e0bff617 	ldw	r2,-40(fp)
  8159c8:	20bfee2e 	bgeu	r4,r2,815984 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
  8159cc:	00002106 	br	815a54 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  8159d0:	e0fffe17 	ldw	r3,-8(fp)
  8159d4:	e0fffe17 	ldw	r3,-8(fp)
  8159d8:	18c5883a 	add	r2,r3,r3
  8159dc:	1085883a 	add	r2,r2,r2
  8159e0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  8159e4:	e13ffb17 	ldw	r4,-20(fp)
  8159e8:	e0fffe17 	ldw	r3,-8(fp)
  8159ec:	20c5383a 	mul	r2,r4,r3
  8159f0:	e13fff17 	ldw	r4,-4(fp)
  8159f4:	2089883a 	add	r4,r4,r2
  8159f8:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  8159fc:	e0bffb17 	ldw	r2,-20(fp)
  815a00:	e0bff615 	stw	r2,-40(fp)
  815a04:	00001006 	br	815a48 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  815a08:	e0fffc17 	ldw	r3,-16(fp)
  815a0c:	e0fffc17 	ldw	r3,-16(fp)
  815a10:	18c5883a 	add	r2,r3,r3
  815a14:	1085883a 	add	r2,r2,r2
  815a18:	1007883a 	mov	r3,r2
  815a1c:	e0bfff17 	ldw	r2,-4(fp)
  815a20:	1885883a 	add	r2,r3,r2
  815a24:	e0fff917 	ldw	r3,-28(fp)
  815a28:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  815a2c:	e13fff17 	ldw	r4,-4(fp)
  815a30:	e0bffe17 	ldw	r2,-8(fp)
  815a34:	2089883a 	add	r4,r4,r2
  815a38:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  815a3c:	e0fff617 	ldw	r3,-40(fp)
  815a40:	18c00044 	addi	r3,r3,1
  815a44:	e0fff615 	stw	r3,-40(fp)
  815a48:	e13ffa17 	ldw	r4,-24(fp)
  815a4c:	e0bff617 	ldw	r2,-40(fp)
  815a50:	20bfed2e 	bgeu	r4,r2,815a08 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  815a54:	e037883a 	mov	sp,fp
  815a58:	df000017 	ldw	fp,0(sp)
  815a5c:	dec00104 	addi	sp,sp,4
  815a60:	f800283a 	ret

00815a64 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  815a64:	defff804 	addi	sp,sp,-32
  815a68:	dfc00715 	stw	ra,28(sp)
  815a6c:	df000615 	stw	fp,24(sp)
  815a70:	df000604 	addi	fp,sp,24
  815a74:	e13ffc15 	stw	r4,-16(fp)
  815a78:	e17ffd15 	stw	r5,-12(fp)
  815a7c:	e1bffe15 	stw	r6,-8(fp)
  815a80:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  815a84:	e0800317 	ldw	r2,12(fp)
  815a88:	d8800015 	stw	r2,0(sp)
  815a8c:	e0800417 	ldw	r2,16(fp)
  815a90:	d8800115 	stw	r2,4(sp)
  815a94:	e13ffc17 	ldw	r4,-16(fp)
  815a98:	e17ffd17 	ldw	r5,-12(fp)
  815a9c:	e1bfff17 	ldw	r6,-4(fp)
  815aa0:	e1fffe17 	ldw	r7,-8(fp)
  815aa4:	08153440 	call	815344 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  815aa8:	e0800317 	ldw	r2,12(fp)
  815aac:	d8800015 	stw	r2,0(sp)
  815ab0:	e0800417 	ldw	r2,16(fp)
  815ab4:	d8800115 	stw	r2,4(sp)
  815ab8:	e13ffc17 	ldw	r4,-16(fp)
  815abc:	e17ffd17 	ldw	r5,-12(fp)
  815ac0:	e1bfff17 	ldw	r6,-4(fp)
  815ac4:	e1c00217 	ldw	r7,8(fp)
  815ac8:	08153440 	call	815344 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  815acc:	e0800317 	ldw	r2,12(fp)
  815ad0:	d8800015 	stw	r2,0(sp)
  815ad4:	e0800417 	ldw	r2,16(fp)
  815ad8:	d8800115 	stw	r2,4(sp)
  815adc:	e13ffc17 	ldw	r4,-16(fp)
  815ae0:	e17ffd17 	ldw	r5,-12(fp)
  815ae4:	e1bffe17 	ldw	r6,-8(fp)
  815ae8:	e1c00217 	ldw	r7,8(fp)
  815aec:	08156940 	call	815694 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  815af0:	e0800317 	ldw	r2,12(fp)
  815af4:	d8800015 	stw	r2,0(sp)
  815af8:	e0800417 	ldw	r2,16(fp)
  815afc:	d8800115 	stw	r2,4(sp)
  815b00:	e13ffc17 	ldw	r4,-16(fp)
  815b04:	e17fff17 	ldw	r5,-4(fp)
  815b08:	e1bffe17 	ldw	r6,-8(fp)
  815b0c:	e1c00217 	ldw	r7,8(fp)
  815b10:	08156940 	call	815694 <alt_up_pixel_buffer_dma_draw_vline>
}
  815b14:	e037883a 	mov	sp,fp
  815b18:	dfc00117 	ldw	ra,4(sp)
  815b1c:	df000017 	ldw	fp,0(sp)
  815b20:	dec00204 	addi	sp,sp,8
  815b24:	f800283a 	ret

00815b28 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  815b28:	defffb04 	addi	sp,sp,-20
  815b2c:	df000415 	stw	fp,16(sp)
  815b30:	df000404 	addi	fp,sp,16
  815b34:	e13ffc15 	stw	r4,-16(fp)
  815b38:	e17ffd15 	stw	r5,-12(fp)
  815b3c:	e1bffe15 	stw	r6,-8(fp)
  815b40:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  815b44:	e0c00217 	ldw	r3,8(fp)
  815b48:	1804c03a 	cmpne	r2,r3,zero
  815b4c:	10000b1e 	bne	r2,zero,815b7c <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  815b50:	e13ffd17 	ldw	r4,-12(fp)
  815b54:	e0ffff17 	ldw	r3,-4(fp)
  815b58:	20c5383a 	mul	r2,r4,r3
  815b5c:	e13ffe17 	ldw	r4,-8(fp)
  815b60:	1105883a 	add	r2,r2,r4
  815b64:	1007883a 	mov	r3,r2
  815b68:	e0bffc17 	ldw	r2,-16(fp)
  815b6c:	1885883a 	add	r2,r3,r2
  815b70:	e0c00117 	ldw	r3,4(fp)
  815b74:	10c00025 	stbio	r3,0(r2)
  815b78:	00001b06 	br	815be8 <helper_plot_pixel+0xc0>
	else if (mode == 1)
  815b7c:	e1000217 	ldw	r4,8(fp)
  815b80:	20800058 	cmpnei	r2,r4,1
  815b84:	10000c1e 	bne	r2,zero,815bb8 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  815b88:	e0fffd17 	ldw	r3,-12(fp)
  815b8c:	e13fff17 	ldw	r4,-4(fp)
  815b90:	1905383a 	mul	r2,r3,r4
  815b94:	e0fffe17 	ldw	r3,-8(fp)
  815b98:	10c5883a 	add	r2,r2,r3
  815b9c:	1085883a 	add	r2,r2,r2
  815ba0:	1007883a 	mov	r3,r2
  815ba4:	e0bffc17 	ldw	r2,-16(fp)
  815ba8:	1885883a 	add	r2,r3,r2
  815bac:	e1000117 	ldw	r4,4(fp)
  815bb0:	1100002d 	sthio	r4,0(r2)
  815bb4:	00000c06 	br	815be8 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  815bb8:	e0fffd17 	ldw	r3,-12(fp)
  815bbc:	e13fff17 	ldw	r4,-4(fp)
  815bc0:	1905383a 	mul	r2,r3,r4
  815bc4:	e0fffe17 	ldw	r3,-8(fp)
  815bc8:	10c5883a 	add	r2,r2,r3
  815bcc:	1085883a 	add	r2,r2,r2
  815bd0:	1085883a 	add	r2,r2,r2
  815bd4:	1007883a 	mov	r3,r2
  815bd8:	e0bffc17 	ldw	r2,-16(fp)
  815bdc:	1885883a 	add	r2,r3,r2
  815be0:	e1000117 	ldw	r4,4(fp)
  815be4:	11000035 	stwio	r4,0(r2)
}
  815be8:	e037883a 	mov	sp,fp
  815bec:	df000017 	ldw	fp,0(sp)
  815bf0:	dec00104 	addi	sp,sp,4
  815bf4:	f800283a 	ret

00815bf8 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  815bf8:	deffe404 	addi	sp,sp,-112
  815bfc:	dfc01b15 	stw	ra,108(sp)
  815c00:	df001a15 	stw	fp,104(sp)
  815c04:	df001a04 	addi	fp,sp,104
  815c08:	e13fe815 	stw	r4,-96(fp)
  815c0c:	e17fe915 	stw	r5,-92(fp)
  815c10:	e1bfea15 	stw	r6,-88(fp)
  815c14:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  815c18:	e0bfe917 	ldw	r2,-92(fp)
  815c1c:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  815c20:	e0ffea17 	ldw	r3,-88(fp)
  815c24:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  815c28:	e13feb17 	ldw	r4,-84(fp)
  815c2c:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  815c30:	e0800217 	ldw	r2,8(fp)
  815c34:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  815c38:	e0fff717 	ldw	r3,-36(fp)
  815c3c:	e13ff917 	ldw	r4,-28(fp)
  815c40:	1905c83a 	sub	r2,r3,r4
  815c44:	e0bfff15 	stw	r2,-4(fp)
  815c48:	e0ffff17 	ldw	r3,-4(fp)
  815c4c:	1804403a 	cmpge	r2,r3,zero
  815c50:	1000031e 	bne	r2,zero,815c60 <alt_up_pixel_buffer_dma_draw_line+0x68>
  815c54:	e13fff17 	ldw	r4,-4(fp)
  815c58:	0109c83a 	sub	r4,zero,r4
  815c5c:	e13fff15 	stw	r4,-4(fp)
  815c60:	e0fff817 	ldw	r3,-32(fp)
  815c64:	e13ffa17 	ldw	r4,-24(fp)
  815c68:	1905c83a 	sub	r2,r3,r4
  815c6c:	e0bffe15 	stw	r2,-8(fp)
  815c70:	e0fffe17 	ldw	r3,-8(fp)
  815c74:	1804403a 	cmpge	r2,r3,zero
  815c78:	1000031e 	bne	r2,zero,815c88 <alt_up_pixel_buffer_dma_draw_line+0x90>
  815c7c:	e13ffe17 	ldw	r4,-8(fp)
  815c80:	0109c83a 	sub	r4,zero,r4
  815c84:	e13ffe15 	stw	r4,-8(fp)
  815c88:	e0fffe17 	ldw	r3,-8(fp)
  815c8c:	e13fff17 	ldw	r4,-4(fp)
  815c90:	1904803a 	cmplt	r2,r3,r4
  815c94:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  815c98:	e0bfe817 	ldw	r2,-96(fp)
  815c9c:	10800e17 	ldw	r2,56(r2)
  815ca0:	10800060 	cmpeqi	r2,r2,1
  815ca4:	10000c1e 	bne	r2,zero,815cd8 <alt_up_pixel_buffer_dma_draw_line+0xe0>
  815ca8:	e0bfe817 	ldw	r2,-96(fp)
  815cac:	10800e17 	ldw	r2,56(r2)
  815cb0:	10800098 	cmpnei	r2,r2,2
  815cb4:	1000031e 	bne	r2,zero,815cc4 <alt_up_pixel_buffer_dma_draw_line+0xcc>
  815cb8:	00800044 	movi	r2,1
  815cbc:	e0bffc15 	stw	r2,-16(fp)
  815cc0:	00000206 	br	815ccc <alt_up_pixel_buffer_dma_draw_line+0xd4>
  815cc4:	00c00084 	movi	r3,2
  815cc8:	e0fffc15 	stw	r3,-16(fp)
  815ccc:	e13ffc17 	ldw	r4,-16(fp)
  815cd0:	e13ffd15 	stw	r4,-12(fp)
  815cd4:	00000106 	br	815cdc <alt_up_pixel_buffer_dma_draw_line+0xe4>
  815cd8:	e03ffd15 	stw	zero,-12(fp)
  815cdc:	e0bffd17 	ldw	r2,-12(fp)
  815ce0:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  815ce4:	e0c00317 	ldw	r3,12(fp)
  815ce8:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  815cec:	e0bfe817 	ldw	r2,-96(fp)
  815cf0:	10800d17 	ldw	r2,52(r2)
  815cf4:	1004c03a 	cmpne	r2,r2,zero
  815cf8:	1000091e 	bne	r2,zero,815d20 <alt_up_pixel_buffer_dma_draw_line+0x128>
  815cfc:	e0bfe817 	ldw	r2,-96(fp)
  815d00:	10c01317 	ldw	r3,76(r2)
  815d04:	e0bfef17 	ldw	r2,-68(fp)
  815d08:	1885c83a 	sub	r2,r3,r2
  815d0c:	1007883a 	mov	r3,r2
  815d10:	00800044 	movi	r2,1
  815d14:	10c4983a 	sll	r2,r2,r3
  815d18:	e0bffb15 	stw	r2,-20(fp)
  815d1c:	00000306 	br	815d2c <alt_up_pixel_buffer_dma_draw_line+0x134>
  815d20:	e0bfe817 	ldw	r2,-96(fp)
  815d24:	10800f17 	ldw	r2,60(r2)
  815d28:	e0bffb15 	stw	r2,-20(fp)
  815d2c:	e13ffb17 	ldw	r4,-20(fp)
  815d30:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  815d34:	e0800417 	ldw	r2,16(fp)
  815d38:	10800058 	cmpnei	r2,r2,1
  815d3c:	1000041e 	bne	r2,zero,815d50 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  815d40:	e0bfe817 	ldw	r2,-96(fp)
  815d44:	10800c17 	ldw	r2,48(r2)
  815d48:	e0bfed15 	stw	r2,-76(fp)
  815d4c:	00000306 	br	815d5c <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  815d50:	e0bfe817 	ldw	r2,-96(fp)
  815d54:	10800b17 	ldw	r2,44(r2)
  815d58:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  815d5c:	e0fff603 	ldbu	r3,-40(fp)
  815d60:	18803fcc 	andi	r2,r3,255
  815d64:	1080201c 	xori	r2,r2,128
  815d68:	10bfe004 	addi	r2,r2,-128
  815d6c:	10800050 	cmplti	r2,r2,1
  815d70:	10000c1e 	bne	r2,zero,815da4 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  815d74:	e13ffa17 	ldw	r4,-24(fp)
  815d78:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  815d7c:	e0bff917 	ldw	r2,-28(fp)
  815d80:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  815d84:	e0fff317 	ldw	r3,-52(fp)
  815d88:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  815d8c:	e13ff817 	ldw	r4,-32(fp)
  815d90:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  815d94:	e0bff717 	ldw	r2,-36(fp)
  815d98:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  815d9c:	e0fff317 	ldw	r3,-52(fp)
  815da0:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  815da4:	e13ff817 	ldw	r4,-32(fp)
  815da8:	e0bffa17 	ldw	r2,-24(fp)
  815dac:	20800c0e 	bge	r4,r2,815de0 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  815db0:	e0fffa17 	ldw	r3,-24(fp)
  815db4:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  815db8:	e13ff817 	ldw	r4,-32(fp)
  815dbc:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  815dc0:	e0bff317 	ldw	r2,-52(fp)
  815dc4:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  815dc8:	e0fff917 	ldw	r3,-28(fp)
  815dcc:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  815dd0:	e13ff717 	ldw	r4,-36(fp)
  815dd4:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  815dd8:	e0bff317 	ldw	r2,-52(fp)
  815ddc:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  815de0:	e0fff817 	ldw	r3,-32(fp)
  815de4:	e13ffa17 	ldw	r4,-24(fp)
  815de8:	1907c83a 	sub	r3,r3,r4
  815dec:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  815df0:	e0fff717 	ldw	r3,-36(fp)
  815df4:	e13ff917 	ldw	r4,-28(fp)
  815df8:	1905c83a 	sub	r2,r3,r4
  815dfc:	e0bff415 	stw	r2,-48(fp)
  815e00:	e0fff417 	ldw	r3,-48(fp)
  815e04:	1804403a 	cmpge	r2,r3,zero
  815e08:	1000031e 	bne	r2,zero,815e18 <alt_up_pixel_buffer_dma_draw_line+0x220>
  815e0c:	e13ff417 	ldw	r4,-48(fp)
  815e10:	0109c83a 	sub	r4,zero,r4
  815e14:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  815e18:	e0fff517 	ldw	r3,-44(fp)
  815e1c:	1804d7fa 	srli	r2,r3,31
  815e20:	e13ff517 	ldw	r4,-44(fp)
  815e24:	1105883a 	add	r2,r2,r4
  815e28:	1005d07a 	srai	r2,r2,1
  815e2c:	0085c83a 	sub	r2,zero,r2
  815e30:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  815e34:	e0bff917 	ldw	r2,-28(fp)
  815e38:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  815e3c:	e0fff917 	ldw	r3,-28(fp)
  815e40:	e13ff717 	ldw	r4,-36(fp)
  815e44:	1900030e 	bge	r3,r4,815e54 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  815e48:	00800044 	movi	r2,1
  815e4c:	e0bff215 	stw	r2,-56(fp)
  815e50:	00000206 	br	815e5c <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  815e54:	00ffffc4 	movi	r3,-1
  815e58:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  815e5c:	e13ff603 	ldbu	r4,-40(fp)
  815e60:	20803fcc 	andi	r2,r4,255
  815e64:	1080201c 	xori	r2,r2,128
  815e68:	10bfe004 	addi	r2,r2,-128
  815e6c:	10800058 	cmpnei	r2,r2,1
  815e70:	1000221e 	bne	r2,zero,815efc <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  815e74:	e0bffa17 	ldw	r2,-24(fp)
  815e78:	e0bff115 	stw	r2,-60(fp)
  815e7c:	00001b06 	br	815eec <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  815e80:	e0ffee17 	ldw	r3,-72(fp)
  815e84:	d8c00015 	stw	r3,0(sp)
  815e88:	e13fef17 	ldw	r4,-68(fp)
  815e8c:	d9000115 	stw	r4,4(sp)
  815e90:	e13fed17 	ldw	r4,-76(fp)
  815e94:	e17fec17 	ldw	r5,-80(fp)
  815e98:	e1bff017 	ldw	r6,-64(fp)
  815e9c:	e1fff117 	ldw	r7,-60(fp)
  815ea0:	0815b280 	call	815b28 <helper_plot_pixel>
			error = error + deltay;
  815ea4:	e0bff317 	ldw	r2,-52(fp)
  815ea8:	e0fff417 	ldw	r3,-48(fp)
  815eac:	10c5883a 	add	r2,r2,r3
  815eb0:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  815eb4:	e13ff317 	ldw	r4,-52(fp)
  815eb8:	20800050 	cmplti	r2,r4,1
  815ebc:	1000081e 	bne	r2,zero,815ee0 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  815ec0:	e0bff017 	ldw	r2,-64(fp)
  815ec4:	e0fff217 	ldw	r3,-56(fp)
  815ec8:	10c5883a 	add	r2,r2,r3
  815ecc:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  815ed0:	e13ff317 	ldw	r4,-52(fp)
  815ed4:	e0bff517 	ldw	r2,-44(fp)
  815ed8:	2089c83a 	sub	r4,r4,r2
  815edc:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  815ee0:	e0fff117 	ldw	r3,-60(fp)
  815ee4:	18c00044 	addi	r3,r3,1
  815ee8:	e0fff115 	stw	r3,-60(fp)
  815eec:	e13ff817 	ldw	r4,-32(fp)
  815ef0:	e0bff117 	ldw	r2,-60(fp)
  815ef4:	20bfe20e 	bge	r4,r2,815e80 <alt_up_pixel_buffer_dma_draw_line+0x288>
  815ef8:	00002106 	br	815f80 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  815efc:	e0fffa17 	ldw	r3,-24(fp)
  815f00:	e0fff115 	stw	r3,-60(fp)
  815f04:	00001b06 	br	815f74 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  815f08:	e13fee17 	ldw	r4,-72(fp)
  815f0c:	d9000015 	stw	r4,0(sp)
  815f10:	e0bfef17 	ldw	r2,-68(fp)
  815f14:	d8800115 	stw	r2,4(sp)
  815f18:	e13fed17 	ldw	r4,-76(fp)
  815f1c:	e17fec17 	ldw	r5,-80(fp)
  815f20:	e1bff117 	ldw	r6,-60(fp)
  815f24:	e1fff017 	ldw	r7,-64(fp)
  815f28:	0815b280 	call	815b28 <helper_plot_pixel>
			error = error + deltay;
  815f2c:	e0fff317 	ldw	r3,-52(fp)
  815f30:	e13ff417 	ldw	r4,-48(fp)
  815f34:	1907883a 	add	r3,r3,r4
  815f38:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  815f3c:	e0fff317 	ldw	r3,-52(fp)
  815f40:	18800050 	cmplti	r2,r3,1
  815f44:	1000081e 	bne	r2,zero,815f68 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  815f48:	e13ff017 	ldw	r4,-64(fp)
  815f4c:	e0bff217 	ldw	r2,-56(fp)
  815f50:	2089883a 	add	r4,r4,r2
  815f54:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  815f58:	e0fff317 	ldw	r3,-52(fp)
  815f5c:	e13ff517 	ldw	r4,-44(fp)
  815f60:	1907c83a 	sub	r3,r3,r4
  815f64:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  815f68:	e0bff117 	ldw	r2,-60(fp)
  815f6c:	10800044 	addi	r2,r2,1
  815f70:	e0bff115 	stw	r2,-60(fp)
  815f74:	e0fff817 	ldw	r3,-32(fp)
  815f78:	e13ff117 	ldw	r4,-60(fp)
  815f7c:	193fe20e 	bge	r3,r4,815f08 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  815f80:	e037883a 	mov	sp,fp
  815f84:	dfc00117 	ldw	ra,4(sp)
  815f88:	df000017 	ldw	fp,0(sp)
  815f8c:	dec00204 	addi	sp,sp,8
  815f90:	f800283a 	ret

00815f94 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset);

bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
  815f94:	defffa04 	addi	sp,sp,-24
  815f98:	dfc00515 	stw	ra,20(sp)
  815f9c:	df000415 	stw	fp,16(sp)
  815fa0:	df000404 	addi	fp,sp,16
  815fa4:	e13ffe15 	stw	r4,-8(fp)
  815fa8:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
  815fac:	e03ffd15 	stw	zero,-12(fp)

	if (alt_up_sd_card_is_Present()) {
  815fb0:	0818dc00 	call	818dc0 <alt_up_sd_card_is_Present>
  815fb4:	1005003a 	cmpeq	r2,r2,zero
  815fb8:	1000221e 	bne	r2,zero,816044 <Write_Sector_Data+0xb0>
		short int reg_state = 0xff;
  815fbc:	00803fc4 	movi	r2,255
  815fc0:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  815fc4:	d0a74c17 	ldw	r2,-25296(gp)
  815fc8:	1009883a 	mov	r4,r2
  815fcc:	e0fffe17 	ldw	r3,-8(fp)
  815fd0:	e0bfff17 	ldw	r2,-4(fp)
  815fd4:	1885883a 	add	r2,r3,r2
  815fd8:	1006927a 	slli	r3,r2,9
  815fdc:	2005883a 	mov	r2,r4
  815fe0:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  815fe4:	d0a74b17 	ldw	r2,-25300(gp)
  815fe8:	1007883a 	mov	r3,r2
  815fec:	00800604 	movi	r2,24
  815ff0:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  815ff4:	d0a74817 	ldw	r2,-25312(gp)
  815ff8:	1080002b 	ldhuio	r2,0(r2)
  815ffc:	e0bffc0d 	sth	r2,-16(fp)
		} while ((reg_state & 0x04) != 0);
  816000:	e0bffc0b 	ldhu	r2,-16(fp)
  816004:	10bfffcc 	andi	r2,r2,65535
  816008:	1080010c 	andi	r2,r2,4
  81600c:	1004c03a 	cmpne	r2,r2,zero
  816010:	103ff81e 	bne	r2,zero,815ff4 <Write_Sector_Data+0x60>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
  816014:	e0bffc0b 	ldhu	r2,-16(fp)
  816018:	10bfffcc 	andi	r2,r2,65535
  81601c:	1080040c 	andi	r2,r2,16
  816020:	1004c03a 	cmpne	r2,r2,zero
  816024:	1000071e 	bne	r2,zero,816044 <Write_Sector_Data+0xb0>
			result = true;
  816028:	00800044 	movi	r2,1
  81602c:	e0bffd15 	stw	r2,-12(fp)
			current_sector_modified = false;
  816030:	d0275115 	stw	zero,-25276(gp)
			current_sector_index = sector_index + partition_offset;
  816034:	e0fffe17 	ldw	r3,-8(fp)
  816038:	e0bfff17 	ldw	r2,-4(fp)
  81603c:	1885883a 	add	r2,r3,r2
  816040:	d0a75215 	stw	r2,-25272(gp)
		}
	}
	return result;
  816044:	e0bffd17 	ldw	r2,-12(fp)
}
  816048:	e037883a 	mov	sp,fp
  81604c:	dfc00117 	ldw	ra,4(sp)
  816050:	df000017 	ldw	fp,0(sp)
  816054:	dec00204 	addi	sp,sp,8
  816058:	f800283a 	ret

0081605c <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
  81605c:	defffd04 	addi	sp,sp,-12
  816060:	dfc00215 	stw	ra,8(sp)
  816064:	df000115 	stw	fp,4(sp)
  816068:	df000104 	addi	fp,sp,4
	bool result = true;
  81606c:	00800044 	movi	r2,1
  816070:	e0bfff15 	stw	r2,-4(fp)
	if (current_sector_modified) {
  816074:	d0a75117 	ldw	r2,-25276(gp)
  816078:	1005003a 	cmpeq	r2,r2,zero
  81607c:	1000051e 	bne	r2,zero,816094 <Save_Modified_Sector+0x38>
		result = Write_Sector_Data(current_sector_index, 0);
  816080:	d0a75217 	ldw	r2,-25272(gp)
  816084:	1009883a 	mov	r4,r2
  816088:	000b883a 	mov	r5,zero
  81608c:	0815f940 	call	815f94 <Write_Sector_Data>
  816090:	e0bfff15 	stw	r2,-4(fp)
	}
	return result;
  816094:	e0bfff17 	ldw	r2,-4(fp)
}
  816098:	e037883a 	mov	sp,fp
  81609c:	dfc00117 	ldw	ra,4(sp)
  8160a0:	df000017 	ldw	fp,0(sp)
  8160a4:	dec00204 	addi	sp,sp,8
  8160a8:	f800283a 	ret

008160ac <Read_Sector_Data>:

bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  8160ac:	defff904 	addi	sp,sp,-28
  8160b0:	dfc00615 	stw	ra,24(sp)
  8160b4:	df000515 	stw	fp,20(sp)
  8160b8:	df000504 	addi	fp,sp,20
  8160bc:	e13ffd15 	stw	r4,-12(fp)
  8160c0:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
  8160c4:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
  8160c8:	0818dc00 	call	818dc0 <alt_up_sd_card_is_Present>
  8160cc:	1005003a 	cmpeq	r2,r2,zero
  8160d0:	10002d1e 	bne	r2,zero,816188 <Read_Sector_Data+0xdc>
		short int reg_state = 0xff;
  8160d4:	00803fc4 	movi	r2,255
  8160d8:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
  8160dc:	d0a75117 	ldw	r2,-25276(gp)
  8160e0:	1005003a 	cmpeq	r2,r2,zero
  8160e4:	1000081e 	bne	r2,zero,816108 <Read_Sector_Data+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
  8160e8:	d0a75217 	ldw	r2,-25272(gp)
  8160ec:	1009883a 	mov	r4,r2
  8160f0:	000b883a 	mov	r5,zero
  8160f4:	0815f940 	call	815f94 <Write_Sector_Data>
  8160f8:	1004c03a 	cmpne	r2,r2,zero
  8160fc:	1000021e 	bne	r2,zero,816108 <Read_Sector_Data+0x5c>
				return false;
  816100:	e03fff15 	stw	zero,-4(fp)
  816104:	00002206 	br	816190 <Read_Sector_Data+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  816108:	d0a74c17 	ldw	r2,-25296(gp)
  81610c:	1009883a 	mov	r4,r2
  816110:	e0fffd17 	ldw	r3,-12(fp)
  816114:	e0bffe17 	ldw	r2,-8(fp)
  816118:	1885883a 	add	r2,r3,r2
  81611c:	1006927a 	slli	r3,r2,9
  816120:	2005883a 	mov	r2,r4
  816124:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  816128:	d0a74b17 	ldw	r2,-25300(gp)
  81612c:	1007883a 	mov	r3,r2
  816130:	00800444 	movi	r2,17
  816134:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  816138:	d0a74817 	ldw	r2,-25312(gp)
  81613c:	1080002b 	ldhuio	r2,0(r2)
  816140:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
  816144:	e0bffb0b 	ldhu	r2,-20(fp)
  816148:	10bfffcc 	andi	r2,r2,65535
  81614c:	1080010c 	andi	r2,r2,4
  816150:	1004c03a 	cmpne	r2,r2,zero
  816154:	103ff81e 	bne	r2,zero,816138 <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
  816158:	e0bffb0b 	ldhu	r2,-20(fp)
  81615c:	10bfffcc 	andi	r2,r2,65535
  816160:	1080040c 	andi	r2,r2,16
  816164:	1004c03a 	cmpne	r2,r2,zero
  816168:	1000071e 	bne	r2,zero,816188 <Read_Sector_Data+0xdc>
			result = true;
  81616c:	00800044 	movi	r2,1
  816170:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
  816174:	d0275115 	stw	zero,-25276(gp)
			current_sector_index = sector_index + partition_offset;
  816178:	e0fffd17 	ldw	r3,-12(fp)
  81617c:	e0bffe17 	ldw	r2,-8(fp)
  816180:	1885883a 	add	r2,r3,r2
  816184:	d0a75215 	stw	r2,-25272(gp)
		}
	}
	return result;
  816188:	e0bffc17 	ldw	r2,-16(fp)
  81618c:	e0bfff15 	stw	r2,-4(fp)
  816190:	e0bfff17 	ldw	r2,-4(fp)
}
  816194:	e037883a 	mov	sp,fp
  816198:	dfc00117 	ldw	ra,4(sp)
  81619c:	df000017 	ldw	fp,0(sp)
  8161a0:	dec00204 	addi	sp,sp,8
  8161a4:	f800283a 	ret

008161a8 <get_cluster_flag>:

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  8161a8:	defffa04 	addi	sp,sp,-24
  8161ac:	dfc00515 	stw	ra,20(sp)
  8161b0:	df000415 	stw	fp,16(sp)
  8161b4:	df000404 	addi	fp,sp,16
  8161b8:	e13ffd15 	stw	r4,-12(fp)
  8161bc:	e17ffe15 	stw	r5,-8(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  8161c0:	e0bffd17 	ldw	r2,-12(fp)
  8161c4:	1006d23a 	srli	r3,r2,8
  8161c8:	d0a74e17 	ldw	r2,-25288(gp)
  8161cc:	1885883a 	add	r2,r3,r2
  8161d0:	e0bffc15 	stw	r2,-16(fp)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  8161d4:	008020b4 	movhi	r2,130
  8161d8:	1089f304 	addi	r2,r2,10188
  8161dc:	10c01117 	ldw	r3,68(r2)
  8161e0:	e0bffc17 	ldw	r2,-16(fp)
  8161e4:	10c5883a 	add	r2,r2,r3
  8161e8:	e0bffc15 	stw	r2,-16(fp)

	if (sector_index != current_sector_index) {
  8161ec:	d0e75217 	ldw	r3,-25272(gp)
  8161f0:	e0bffc17 	ldw	r2,-16(fp)
  8161f4:	10c00726 	beq	r2,r3,816214 <get_cluster_flag+0x6c>
		if (Read_Sector_Data(sector_index, 0) == false) {
  8161f8:	e13ffc17 	ldw	r4,-16(fp)
  8161fc:	000b883a 	mov	r5,zero
  816200:	08160ac0 	call	8160ac <Read_Sector_Data>
  816204:	1004c03a 	cmpne	r2,r2,zero
  816208:	1000021e 	bne	r2,zero,816214 <get_cluster_flag+0x6c>
			return false;
  81620c:	e03fff15 	stw	zero,-4(fp)
  816210:	00000d06 	br	816248 <get_cluster_flag+0xa0>
		}
	}
	*flag
  816214:	d0a75017 	ldw	r2,-25280(gp)
  816218:	10800a17 	ldw	r2,40(r2)
  81621c:	1007883a 	mov	r3,r2
  816220:	e0bffd17 	ldw	r2,-12(fp)
  816224:	10803fcc 	andi	r2,r2,255
  816228:	1085883a 	add	r2,r2,r2
  81622c:	1885883a 	add	r2,r3,r2
  816230:	1080002b 	ldhuio	r2,0(r2)
  816234:	1007883a 	mov	r3,r2
  816238:	e0bffe17 	ldw	r2,-8(fp)
  81623c:	10c0000d 	sth	r3,0(r2)
			= (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
	return true;
  816240:	00800044 	movi	r2,1
  816244:	e0bfff15 	stw	r2,-4(fp)
  816248:	e0bfff17 	ldw	r2,-4(fp)
}
  81624c:	e037883a 	mov	sp,fp
  816250:	dfc00117 	ldw	ra,4(sp)
  816254:	df000017 	ldw	fp,0(sp)
  816258:	dec00204 	addi	sp,sp,8
  81625c:	f800283a 	ret

00816260 <mark_cluster>:

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
  816260:	defff904 	addi	sp,sp,-28
  816264:	dfc00615 	stw	ra,24(sp)
  816268:	df000515 	stw	fp,20(sp)
  81626c:	df000504 	addi	fp,sp,20
  816270:	e13ffc15 	stw	r4,-16(fp)
  816274:	e1bffe15 	stw	r6,-8(fp)
  816278:	e17ffd0d 	sth	r5,-12(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  81627c:	e0bffc17 	ldw	r2,-16(fp)
  816280:	1006d23a 	srli	r3,r2,8
  816284:	d0a74e17 	ldw	r2,-25288(gp)
  816288:	1885883a 	add	r2,r3,r2
  81628c:	e0bffb15 	stw	r2,-20(fp)

	if (first_fat) {
  816290:	e0bffe17 	ldw	r2,-8(fp)
  816294:	1005003a 	cmpeq	r2,r2,zero
  816298:	1000071e 	bne	r2,zero,8162b8 <mark_cluster+0x58>
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  81629c:	008020b4 	movhi	r2,130
  8162a0:	1089f304 	addi	r2,r2,10188
  8162a4:	10c01117 	ldw	r3,68(r2)
  8162a8:	e0bffb17 	ldw	r2,-20(fp)
  8162ac:	10c5883a 	add	r2,r2,r3
  8162b0:	e0bffb15 	stw	r2,-20(fp)
  8162b4:	00000606 	br	8162d0 <mark_cluster+0x70>
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
  8162b8:	008020b4 	movhi	r2,130
  8162bc:	1089f304 	addi	r2,r2,10188
  8162c0:	10c01217 	ldw	r3,72(r2)
  8162c4:	e0bffb17 	ldw	r2,-20(fp)
  8162c8:	10c5883a 	add	r2,r2,r3
  8162cc:	e0bffb15 	stw	r2,-20(fp)
	}

	if (sector_index != current_sector_index) {
  8162d0:	d0e75217 	ldw	r3,-25272(gp)
  8162d4:	e0bffb17 	ldw	r2,-20(fp)
  8162d8:	10c00726 	beq	r2,r3,8162f8 <mark_cluster+0x98>
		if (Read_Sector_Data(sector_index, 0) == false) {
  8162dc:	e13ffb17 	ldw	r4,-20(fp)
  8162e0:	000b883a 	mov	r5,zero
  8162e4:	08160ac0 	call	8160ac <Read_Sector_Data>
  8162e8:	1004c03a 	cmpne	r2,r2,zero
  8162ec:	1000021e 	bne	r2,zero,8162f8 <mark_cluster+0x98>
			return false;
  8162f0:	e03fff15 	stw	zero,-4(fp)
  8162f4:	00000d06 	br	81632c <mark_cluster+0xcc>
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  8162f8:	d0a75017 	ldw	r2,-25280(gp)
  8162fc:	10800a17 	ldw	r2,40(r2)
  816300:	1007883a 	mov	r3,r2
  816304:	e0bffc17 	ldw	r2,-16(fp)
  816308:	10803fcc 	andi	r2,r2,255
  81630c:	1085883a 	add	r2,r2,r2
  816310:	1885883a 	add	r2,r3,r2
  816314:	e0fffd0f 	ldh	r3,-12(fp)
  816318:	10c0002d 	sthio	r3,0(r2)
	current_sector_modified = true;
  81631c:	00800044 	movi	r2,1
  816320:	d0a75115 	stw	r2,-25276(gp)
	return true;
  816324:	00800044 	movi	r2,1
  816328:	e0bfff15 	stw	r2,-4(fp)
  81632c:	e0bfff17 	ldw	r2,-4(fp)
}
  816330:	e037883a 	mov	sp,fp
  816334:	dfc00117 	ldw	ra,4(sp)
  816338:	df000017 	ldw	fp,0(sp)
  81633c:	dec00204 	addi	sp,sp,8
  816340:	f800283a 	ret

00816344 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
  816344:	defff704 	addi	sp,sp,-36
  816348:	dfc00815 	stw	ra,32(sp)
  81634c:	df000715 	stw	fp,28(sp)
  816350:	df000704 	addi	fp,sp,28
	bool result = false;
  816354:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data_Attempt_CRC(0, 0)) {
  816358:	0009883a 	mov	r4,zero
  81635c:	000b883a 	mov	r5,zero
  816360:	081a4c40 	call	81a4c4 <Read_Sector_Data_Attempt_CRC>
  816364:	1005003a 	cmpeq	r2,r2,zero
  816368:	10005c1e 	bne	r2,zero,8164dc <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
  81636c:	d0a75017 	ldw	r2,-25280(gp)
  816370:	10800a17 	ldw	r2,40(r2)
  816374:	10807f84 	addi	r2,r2,510
  816378:	1080002b 	ldhuio	r2,0(r2)
  81637c:	10bfffcc 	andi	r2,r2,65535
  816380:	10a0001c 	xori	r2,r2,32768
  816384:	10a00004 	addi	r2,r2,-32768
  816388:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
  81638c:	e0bffd17 	ldw	r2,-12(fp)
  816390:	10ffffcc 	andi	r3,r2,65535
  816394:	00aa9554 	movui	r2,43605
  816398:	1880501e 	bne	r3,r2,8164dc <Check_for_Master_Boot_Record+0x198>
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
  81639c:	e03ffe15 	stw	zero,-8(fp)
  8163a0:	00004b06 	br	8164d0 <Check_for_Master_Boot_Record+0x18c>
				int partition_data_offset = (index * 16) + 0x01be;
  8163a4:	e0bffe17 	ldw	r2,-8(fp)
  8163a8:	1004913a 	slli	r2,r2,4
  8163ac:	10806f84 	addi	r2,r2,446
  8163b0:	e0bffa15 	stw	r2,-24(fp)
				char type;

				// Read Partition type
				type
  8163b4:	d0a75017 	ldw	r2,-25280(gp)
  8163b8:	10800a17 	ldw	r2,40(r2)
  8163bc:	1007883a 	mov	r3,r2
  8163c0:	e0bffa17 	ldw	r2,-24(fp)
  8163c4:	1885883a 	add	r2,r3,r2
  8163c8:	10800104 	addi	r2,r2,4
  8163cc:	10800023 	ldbuio	r2,0(r2)
  8163d0:	e0bff905 	stb	r2,-28(fp)
						= (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14)) {
  8163d4:	e0bff907 	ldb	r2,-28(fp)
  8163d8:	10800060 	cmpeqi	r2,r2,1
  8163dc:	1000091e 	bne	r2,zero,816404 <Check_for_Master_Boot_Record+0xc0>
  8163e0:	e0bff907 	ldb	r2,-28(fp)
  8163e4:	10800120 	cmpeqi	r2,r2,4
  8163e8:	1000061e 	bne	r2,zero,816404 <Check_for_Master_Boot_Record+0xc0>
  8163ec:	e0bff907 	ldb	r2,-28(fp)
  8163f0:	108001a0 	cmpeqi	r2,r2,6
  8163f4:	1000031e 	bne	r2,zero,816404 <Check_for_Master_Boot_Record+0xc0>
  8163f8:	e0bff907 	ldb	r2,-28(fp)
  8163fc:	10800398 	cmpnei	r2,r2,14
  816400:	1000301e 	bne	r2,zero,8164c4 <Check_for_Master_Boot_Record+0x180>
					// Get partition offset and size.
					offset
  816404:	d0a75017 	ldw	r2,-25280(gp)
  816408:	10800a17 	ldw	r2,40(r2)
  81640c:	1007883a 	mov	r3,r2
  816410:	e0bffa17 	ldw	r2,-24(fp)
  816414:	1885883a 	add	r2,r3,r2
  816418:	10800284 	addi	r2,r2,10
  81641c:	1080002b 	ldhuio	r2,0(r2)
  816420:	10bfffcc 	andi	r2,r2,65535
  816424:	1008943a 	slli	r4,r2,16
  816428:	d0a75017 	ldw	r2,-25280(gp)
  81642c:	10800a17 	ldw	r2,40(r2)
  816430:	1007883a 	mov	r3,r2
  816434:	e0bffa17 	ldw	r2,-24(fp)
  816438:	1885883a 	add	r2,r3,r2
  81643c:	10800204 	addi	r2,r2,8
  816440:	1080002b 	ldhuio	r2,0(r2)
  816444:	10bfffcc 	andi	r2,r2,65535
  816448:	2084b03a 	or	r2,r4,r2
  81644c:	e0bffc15 	stw	r2,-16(fp)
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
					partition_size
  816450:	d0a75017 	ldw	r2,-25280(gp)
  816454:	10800a17 	ldw	r2,40(r2)
  816458:	1007883a 	mov	r3,r2
  81645c:	e0bffa17 	ldw	r2,-24(fp)
  816460:	1885883a 	add	r2,r3,r2
  816464:	10800384 	addi	r2,r2,14
  816468:	1080002b 	ldhuio	r2,0(r2)
  81646c:	10bfffcc 	andi	r2,r2,65535
  816470:	1008943a 	slli	r4,r2,16
  816474:	d0a75017 	ldw	r2,-25280(gp)
  816478:	10800a17 	ldw	r2,40(r2)
  81647c:	1007883a 	mov	r3,r2
  816480:	e0bffa17 	ldw	r2,-24(fp)
  816484:	1885883a 	add	r2,r3,r2
  816488:	10800304 	addi	r2,r2,12
  81648c:	1080002b 	ldhuio	r2,0(r2)
  816490:	10bfffcc 	andi	r2,r2,65535
  816494:	2084b03a 	or	r2,r4,r2
  816498:	e0bffb15 	stw	r2,-20(fp)
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
  81649c:	e0bffb17 	ldw	r2,-20(fp)
  8164a0:	10800050 	cmplti	r2,r2,1
  8164a4:	1000071e 	bne	r2,zero,8164c4 <Check_for_Master_Boot_Record+0x180>
						result = true;
  8164a8:	00800044 	movi	r2,1
  8164ac:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
  8164b0:	e0bffb17 	ldw	r2,-20(fp)
  8164b4:	d0a74f15 	stw	r2,-25284(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
  8164b8:	e0bffc17 	ldw	r2,-16(fp)
  8164bc:	d0a74e15 	stw	r2,-25288(gp)
						break;
  8164c0:	00000606 	br	8164dc <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
  8164c4:	e0bffe17 	ldw	r2,-8(fp)
  8164c8:	10800044 	addi	r2,r2,1
  8164cc:	e0bffe15 	stw	r2,-8(fp)
  8164d0:	e0bffe17 	ldw	r2,-8(fp)
  8164d4:	10800110 	cmplti	r2,r2,4
  8164d8:	103fb21e 	bne	r2,zero,8163a4 <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
  8164dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8164e0:	e037883a 	mov	sp,fp
  8164e4:	dfc00117 	ldw	ra,4(sp)
  8164e8:	df000017 	ldw	fp,0(sp)
  8164ec:	dec00204 	addi	sp,sp,8
  8164f0:	f800283a 	ret

008164f4 <Read_File_Record_At_Offset>:

bool Read_File_Record_At_Offset(int offset, t_file_record *record,
		unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
  8164f4:	defff804 	addi	sp,sp,-32
  8164f8:	dfc00715 	stw	ra,28(sp)
  8164fc:	df000615 	stw	fp,24(sp)
  816500:	df000604 	addi	fp,sp,24
  816504:	e13ffc15 	stw	r4,-16(fp)
  816508:	e17ffd15 	stw	r5,-12(fp)
  81650c:	e1bffe15 	stw	r6,-8(fp)
  816510:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
  816514:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  816518:	e0bffc17 	ldw	r2,-16(fp)
  81651c:	108007cc 	andi	r2,r2,31
  816520:	1004c03a 	cmpne	r2,r2,zero
  816524:	10008e1e 	bne	r2,zero,816760 <Read_File_Record_At_Offset+0x26c>
  816528:	0818dc00 	call	818dc0 <alt_up_sd_card_is_Present>
  81652c:	1005003a 	cmpeq	r2,r2,zero
  816530:	10008b1e 	bne	r2,zero,816760 <Read_File_Record_At_Offset+0x26c>
  816534:	d0a74717 	ldw	r2,-25316(gp)
  816538:	1005003a 	cmpeq	r2,r2,zero
  81653c:	1000881e 	bne	r2,zero,816760 <Read_File_Record_At_Offset+0x26c>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
  816540:	e03ffa15 	stw	zero,-24(fp)
  816544:	00001006 	br	816588 <Read_File_Record_At_Offset+0x94>
			record->name[counter]
  816548:	e17ffa17 	ldw	r5,-24(fp)
  81654c:	d0a75017 	ldw	r2,-25280(gp)
  816550:	10800a17 	ldw	r2,40(r2)
  816554:	1009883a 	mov	r4,r2
  816558:	e0fffc17 	ldw	r3,-16(fp)
  81655c:	e0bffa17 	ldw	r2,-24(fp)
  816560:	1885883a 	add	r2,r3,r2
  816564:	2085883a 	add	r2,r4,r2
  816568:	10800023 	ldbuio	r2,0(r2)
  81656c:	1007883a 	mov	r3,r2
  816570:	e0bffd17 	ldw	r2,-12(fp)
  816574:	1145883a 	add	r2,r2,r5
  816578:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
  81657c:	e0bffa17 	ldw	r2,-24(fp)
  816580:	10800044 	addi	r2,r2,1
  816584:	e0bffa15 	stw	r2,-24(fp)
  816588:	e0bffa17 	ldw	r2,-24(fp)
  81658c:	10800210 	cmplti	r2,r2,8
  816590:	103fed1e 	bne	r2,zero,816548 <Read_File_Record_At_Offset+0x54>
			record->name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
  816594:	e03ffa15 	stw	zero,-24(fp)
  816598:	00001206 	br	8165e4 <Read_File_Record_At_Offset+0xf0>
			record->extension[counter]
  81659c:	e17ffa17 	ldw	r5,-24(fp)
  8165a0:	d0a75017 	ldw	r2,-25280(gp)
  8165a4:	10800a17 	ldw	r2,40(r2)
  8165a8:	1009883a 	mov	r4,r2
  8165ac:	e0fffc17 	ldw	r3,-16(fp)
  8165b0:	e0bffa17 	ldw	r2,-24(fp)
  8165b4:	1885883a 	add	r2,r3,r2
  8165b8:	2085883a 	add	r2,r4,r2
  8165bc:	10800204 	addi	r2,r2,8
  8165c0:	10800023 	ldbuio	r2,0(r2)
  8165c4:	1007883a 	mov	r3,r2
  8165c8:	e0bffd17 	ldw	r2,-12(fp)
  8165cc:	2885883a 	add	r2,r5,r2
  8165d0:	10800204 	addi	r2,r2,8
  8165d4:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++) {
			record->name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
  8165d8:	e0bffa17 	ldw	r2,-24(fp)
  8165dc:	10800044 	addi	r2,r2,1
  8165e0:	e0bffa15 	stw	r2,-24(fp)
  8165e4:	e0bffa17 	ldw	r2,-24(fp)
  8165e8:	108000d0 	cmplti	r2,r2,3
  8165ec:	103feb1e 	bne	r2,zero,81659c <Read_File_Record_At_Offset+0xa8>
			record->extension[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}
		record->attributes
  8165f0:	d0a75017 	ldw	r2,-25280(gp)
  8165f4:	10800a17 	ldw	r2,40(r2)
  8165f8:	1007883a 	mov	r3,r2
  8165fc:	e0bffc17 	ldw	r2,-16(fp)
  816600:	1885883a 	add	r2,r3,r2
  816604:	108002c4 	addi	r2,r2,11
  816608:	10800023 	ldbuio	r2,0(r2)
  81660c:	1007883a 	mov	r3,r2
  816610:	e0bffd17 	ldw	r2,-12(fp)
  816614:	10c002c5 	stb	r3,11(r2)
				= (char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time
  816618:	d0a75017 	ldw	r2,-25280(gp)
  81661c:	10800a17 	ldw	r2,40(r2)
  816620:	1007883a 	mov	r3,r2
  816624:	e0bffc17 	ldw	r2,-16(fp)
  816628:	1885883a 	add	r2,r3,r2
  81662c:	10800384 	addi	r2,r2,14
  816630:	1080002b 	ldhuio	r2,0(r2)
  816634:	1007883a 	mov	r3,r2
  816638:	e0bffd17 	ldw	r2,-12(fp)
  81663c:	10c0030d 	sth	r3,12(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date
  816640:	d0a75017 	ldw	r2,-25280(gp)
  816644:	10800a17 	ldw	r2,40(r2)
  816648:	1007883a 	mov	r3,r2
  81664c:	e0bffc17 	ldw	r2,-16(fp)
  816650:	1885883a 	add	r2,r3,r2
  816654:	10800404 	addi	r2,r2,16
  816658:	1080002b 	ldhuio	r2,0(r2)
  81665c:	1007883a 	mov	r3,r2
  816660:	e0bffd17 	ldw	r2,-12(fp)
  816664:	10c0038d 	sth	r3,14(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date
  816668:	d0a75017 	ldw	r2,-25280(gp)
  81666c:	10800a17 	ldw	r2,40(r2)
  816670:	1007883a 	mov	r3,r2
  816674:	e0bffc17 	ldw	r2,-16(fp)
  816678:	1885883a 	add	r2,r3,r2
  81667c:	10800484 	addi	r2,r2,18
  816680:	1080002b 	ldhuio	r2,0(r2)
  816684:	1007883a 	mov	r3,r2
  816688:	e0bffd17 	ldw	r2,-12(fp)
  81668c:	10c0040d 	sth	r3,16(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time
  816690:	d0a75017 	ldw	r2,-25280(gp)
  816694:	10800a17 	ldw	r2,40(r2)
  816698:	1007883a 	mov	r3,r2
  81669c:	e0bffc17 	ldw	r2,-16(fp)
  8166a0:	1885883a 	add	r2,r3,r2
  8166a4:	10800584 	addi	r2,r2,22
  8166a8:	1080002b 	ldhuio	r2,0(r2)
  8166ac:	1007883a 	mov	r3,r2
  8166b0:	e0bffd17 	ldw	r2,-12(fp)
  8166b4:	10c0048d 	sth	r3,18(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date
  8166b8:	d0a75017 	ldw	r2,-25280(gp)
  8166bc:	10800a17 	ldw	r2,40(r2)
  8166c0:	1007883a 	mov	r3,r2
  8166c4:	e0bffc17 	ldw	r2,-16(fp)
  8166c8:	1885883a 	add	r2,r3,r2
  8166cc:	10800604 	addi	r2,r2,24
  8166d0:	1080002b 	ldhuio	r2,0(r2)
  8166d4:	1007883a 	mov	r3,r2
  8166d8:	e0bffd17 	ldw	r2,-12(fp)
  8166dc:	10c0050d 	sth	r3,20(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index
  8166e0:	d0a75017 	ldw	r2,-25280(gp)
  8166e4:	10800a17 	ldw	r2,40(r2)
  8166e8:	1007883a 	mov	r3,r2
  8166ec:	e0bffc17 	ldw	r2,-16(fp)
  8166f0:	1885883a 	add	r2,r3,r2
  8166f4:	10800684 	addi	r2,r2,26
  8166f8:	1080002b 	ldhuio	r2,0(r2)
  8166fc:	1007883a 	mov	r3,r2
  816700:	e0bffd17 	ldw	r2,-12(fp)
  816704:	10c0058d 	sth	r3,22(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes
  816708:	d0a75017 	ldw	r2,-25280(gp)
  81670c:	10800a17 	ldw	r2,40(r2)
  816710:	1007883a 	mov	r3,r2
  816714:	e0bffc17 	ldw	r2,-16(fp)
  816718:	1885883a 	add	r2,r3,r2
  81671c:	10800704 	addi	r2,r2,28
  816720:	10800037 	ldwio	r2,0(r2)
  816724:	1007883a 	mov	r3,r2
  816728:	e0bffd17 	ldw	r2,-12(fp)
  81672c:	10c00615 	stw	r3,24(r2)
				= (unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
  816730:	e0fffd17 	ldw	r3,-12(fp)
  816734:	e0bffe17 	ldw	r2,-8(fp)
  816738:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
  81673c:	e0fffd17 	ldw	r3,-12(fp)
  816740:	e0bfff17 	ldw	r2,-4(fp)
  816744:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
  816748:	e0bffc17 	ldw	r2,-16(fp)
  81674c:	1007883a 	mov	r3,r2
  816750:	e0bffd17 	ldw	r2,-12(fp)
  816754:	10c00c0d 	sth	r3,48(r2)
		result = true;
  816758:	00800044 	movi	r2,1
  81675c:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
  816760:	e0bffb17 	ldw	r2,-20(fp)
}
  816764:	e037883a 	mov	sp,fp
  816768:	dfc00117 	ldw	ra,4(sp)
  81676c:	df000017 	ldw	fp,0(sp)
  816770:	dec00204 	addi	sp,sp,8
  816774:	f800283a 	ret

00816778 <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
  816778:	defff904 	addi	sp,sp,-28
  81677c:	dfc00615 	stw	ra,24(sp)
  816780:	df000515 	stw	fp,20(sp)
  816784:	df000504 	addi	fp,sp,20
  816788:	e13ffe15 	stw	r4,-8(fp)
  81678c:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
  816790:	e03ffd15 	stw	zero,-12(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  816794:	e0bffe17 	ldw	r2,-8(fp)
  816798:	108007cc 	andi	r2,r2,31
  81679c:	1004c03a 	cmpne	r2,r2,zero
  8167a0:	10009d1e 	bne	r2,zero,816a18 <Write_File_Record_At_Offset+0x2a0>
  8167a4:	0818dc00 	call	818dc0 <alt_up_sd_card_is_Present>
  8167a8:	1005003a 	cmpeq	r2,r2,zero
  8167ac:	10009a1e 	bne	r2,zero,816a18 <Write_File_Record_At_Offset+0x2a0>
  8167b0:	d0a74717 	ldw	r2,-25316(gp)
  8167b4:	1005003a 	cmpeq	r2,r2,zero
  8167b8:	1000971e 	bne	r2,zero,816a18 <Write_File_Record_At_Offset+0x2a0>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
  8167bc:	e03ffc15 	stw	zero,-16(fp)
  8167c0:	00001e06 	br	81683c <Write_File_Record_At_Offset+0xc4>
			short int two_chars = (short int) record->name[counter + 1];
  8167c4:	e0bffc17 	ldw	r2,-16(fp)
  8167c8:	10c00044 	addi	r3,r2,1
  8167cc:	e0bfff17 	ldw	r2,-4(fp)
  8167d0:	10c5883a 	add	r2,r2,r3
  8167d4:	10800003 	ldbu	r2,0(r2)
  8167d8:	10803fcc 	andi	r2,r2,255
  8167dc:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars << 8;
  8167e0:	e0bffb0f 	ldh	r2,-20(fp)
  8167e4:	1004923a 	slli	r2,r2,8
  8167e8:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars | record->name[counter];
  8167ec:	e0fffc17 	ldw	r3,-16(fp)
  8167f0:	e0bfff17 	ldw	r2,-4(fp)
  8167f4:	10c5883a 	add	r2,r2,r3
  8167f8:	10800003 	ldbu	r2,0(r2)
  8167fc:	10c03fcc 	andi	r3,r2,255
  816800:	e0bffb0b 	ldhu	r2,-20(fp)
  816804:	10c4b03a 	or	r2,r2,r3
  816808:	e0bffb0d 	sth	r2,-20(fp)
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  81680c:	d0a75017 	ldw	r2,-25280(gp)
  816810:	10800a17 	ldw	r2,40(r2)
  816814:	1009883a 	mov	r4,r2
  816818:	e0fffe17 	ldw	r3,-8(fp)
  81681c:	e0bffc17 	ldw	r2,-16(fp)
  816820:	1885883a 	add	r2,r3,r2
  816824:	2085883a 	add	r2,r4,r2
  816828:	e0fffb0f 	ldh	r3,-20(fp)
  81682c:	10c0002d 	sthio	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
  816830:	e0bffc17 	ldw	r2,-16(fp)
  816834:	10800084 	addi	r2,r2,2
  816838:	e0bffc15 	stw	r2,-16(fp)
  81683c:	e0bffc17 	ldw	r2,-16(fp)
  816840:	10800210 	cmplti	r2,r2,8
  816844:	103fdf1e 	bne	r2,zero,8167c4 <Write_File_Record_At_Offset+0x4c>
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
  816848:	e03ffc15 	stw	zero,-16(fp)
  81684c:	00001306 	br	81689c <Write_File_Record_At_Offset+0x124>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
  816850:	d0a75017 	ldw	r2,-25280(gp)
  816854:	10800a17 	ldw	r2,40(r2)
  816858:	1009883a 	mov	r4,r2
  81685c:	e0fffe17 	ldw	r3,-8(fp)
  816860:	e0bffc17 	ldw	r2,-16(fp)
  816864:	1885883a 	add	r2,r3,r2
  816868:	2085883a 	add	r2,r4,r2
  81686c:	11000204 	addi	r4,r2,8
  816870:	e0fffc17 	ldw	r3,-16(fp)
  816874:	e0bfff17 	ldw	r2,-4(fp)
  816878:	1885883a 	add	r2,r3,r2
  81687c:	10800204 	addi	r2,r2,8
  816880:	10800003 	ldbu	r2,0(r2)
  816884:	10c03fcc 	andi	r3,r2,255
  816888:	2005883a 	mov	r2,r4
  81688c:	10c00025 	stbio	r3,0(r2)
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
  816890:	e0bffc17 	ldw	r2,-16(fp)
  816894:	10800044 	addi	r2,r2,1
  816898:	e0bffc15 	stw	r2,-16(fp)
  81689c:	e0bffc17 	ldw	r2,-16(fp)
  8168a0:	108000d0 	cmplti	r2,r2,3
  8168a4:	103fea1e 	bne	r2,zero,816850 <Write_File_Record_At_Offset+0xd8>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
		}
		IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
  8168a8:	d0a75017 	ldw	r2,-25280(gp)
  8168ac:	10800a17 	ldw	r2,40(r2)
  8168b0:	1007883a 	mov	r3,r2
  8168b4:	e0bffe17 	ldw	r2,-8(fp)
  8168b8:	1885883a 	add	r2,r3,r2
  8168bc:	110002c4 	addi	r4,r2,11
  8168c0:	e0bfff17 	ldw	r2,-4(fp)
  8168c4:	108002c3 	ldbu	r2,11(r2)
  8168c8:	10c03fcc 	andi	r3,r2,255
  8168cc:	2005883a 	mov	r2,r4
  8168d0:	10c00025 	stbio	r3,0(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
  8168d4:	d0a75017 	ldw	r2,-25280(gp)
  8168d8:	10800a17 	ldw	r2,40(r2)
  8168dc:	1007883a 	mov	r3,r2
  8168e0:	e0bffe17 	ldw	r2,-8(fp)
  8168e4:	1885883a 	add	r2,r3,r2
  8168e8:	11000384 	addi	r4,r2,14
  8168ec:	e0bfff17 	ldw	r2,-4(fp)
  8168f0:	1080030b 	ldhu	r2,12(r2)
  8168f4:	10ffffcc 	andi	r3,r2,65535
  8168f8:	2005883a 	mov	r2,r4
  8168fc:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
  816900:	d0a75017 	ldw	r2,-25280(gp)
  816904:	10800a17 	ldw	r2,40(r2)
  816908:	1007883a 	mov	r3,r2
  81690c:	e0bffe17 	ldw	r2,-8(fp)
  816910:	1885883a 	add	r2,r3,r2
  816914:	11000404 	addi	r4,r2,16
  816918:	e0bfff17 	ldw	r2,-4(fp)
  81691c:	1080038b 	ldhu	r2,14(r2)
  816920:	10ffffcc 	andi	r3,r2,65535
  816924:	2005883a 	mov	r2,r4
  816928:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
  81692c:	d0a75017 	ldw	r2,-25280(gp)
  816930:	10800a17 	ldw	r2,40(r2)
  816934:	1007883a 	mov	r3,r2
  816938:	e0bffe17 	ldw	r2,-8(fp)
  81693c:	1885883a 	add	r2,r3,r2
  816940:	11000484 	addi	r4,r2,18
  816944:	e0bfff17 	ldw	r2,-4(fp)
  816948:	1080040b 	ldhu	r2,16(r2)
  81694c:	10ffffcc 	andi	r3,r2,65535
  816950:	2005883a 	mov	r2,r4
  816954:	10c0002d 	sthio	r3,0(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
  816958:	d0a75017 	ldw	r2,-25280(gp)
  81695c:	10800a17 	ldw	r2,40(r2)
  816960:	1007883a 	mov	r3,r2
  816964:	e0bffe17 	ldw	r2,-8(fp)
  816968:	1885883a 	add	r2,r3,r2
  81696c:	11000584 	addi	r4,r2,22
  816970:	e0bfff17 	ldw	r2,-4(fp)
  816974:	1080048b 	ldhu	r2,18(r2)
  816978:	10ffffcc 	andi	r3,r2,65535
  81697c:	2005883a 	mov	r2,r4
  816980:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
  816984:	d0a75017 	ldw	r2,-25280(gp)
  816988:	10800a17 	ldw	r2,40(r2)
  81698c:	1007883a 	mov	r3,r2
  816990:	e0bffe17 	ldw	r2,-8(fp)
  816994:	1885883a 	add	r2,r3,r2
  816998:	11000604 	addi	r4,r2,24
  81699c:	e0bfff17 	ldw	r2,-4(fp)
  8169a0:	1080050b 	ldhu	r2,20(r2)
  8169a4:	10ffffcc 	andi	r3,r2,65535
  8169a8:	2005883a 	mov	r2,r4
  8169ac:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
  8169b0:	d0a75017 	ldw	r2,-25280(gp)
  8169b4:	10800a17 	ldw	r2,40(r2)
  8169b8:	1007883a 	mov	r3,r2
  8169bc:	e0bffe17 	ldw	r2,-8(fp)
  8169c0:	1885883a 	add	r2,r3,r2
  8169c4:	11000684 	addi	r4,r2,26
  8169c8:	e0bfff17 	ldw	r2,-4(fp)
  8169cc:	1080058b 	ldhu	r2,22(r2)
  8169d0:	10ffffcc 	andi	r3,r2,65535
  8169d4:	2005883a 	mov	r2,r4
  8169d8:	10c0002d 	sthio	r3,0(r2)
		IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
  8169dc:	d0a75017 	ldw	r2,-25280(gp)
  8169e0:	10800a17 	ldw	r2,40(r2)
  8169e4:	1007883a 	mov	r3,r2
  8169e8:	e0bffe17 	ldw	r2,-8(fp)
  8169ec:	1885883a 	add	r2,r3,r2
  8169f0:	11000704 	addi	r4,r2,28
  8169f4:	e0bfff17 	ldw	r2,-4(fp)
  8169f8:	10800617 	ldw	r2,24(r2)
  8169fc:	1007883a 	mov	r3,r2
  816a00:	2005883a 	mov	r2,r4
  816a04:	10c00035 	stwio	r3,0(r2)
		current_sector_modified = true;
  816a08:	00800044 	movi	r2,1
  816a0c:	d0a75115 	stw	r2,-25276(gp)
		result = true;
  816a10:	00800044 	movi	r2,1
  816a14:	e0bffd15 	stw	r2,-12(fp)
	}
	return result;
  816a18:	e0bffd17 	ldw	r2,-12(fp)
}
  816a1c:	e037883a 	mov	sp,fp
  816a20:	dfc00117 	ldw	ra,4(sp)
  816a24:	df000017 	ldw	fp,0(sp)
  816a28:	dec00204 	addi	sp,sp,8
  816a2c:	f800283a 	ret

00816a30 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
  816a30:	defff804 	addi	sp,sp,-32
  816a34:	dfc00715 	stw	ra,28(sp)
  816a38:	df000615 	stw	fp,24(sp)
  816a3c:	dc000515 	stw	r16,20(sp)
  816a40:	df000504 	addi	fp,sp,20
  816a44:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
  816a48:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
  816a4c:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
  816a50:	0009883a 	mov	r4,zero
  816a54:	e17fff17 	ldw	r5,-4(fp)
  816a58:	081a4c40 	call	81a4c4 <Read_Sector_Data_Attempt_CRC>
  816a5c:	e0bffe15 	stw	r2,-8(fp)
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
  816a60:	d0a75017 	ldw	r2,-25280(gp)
  816a64:	10800a17 	ldw	r2,40(r2)
  816a68:	10807f84 	addi	r2,r2,510
  816a6c:	1080002b 	ldhuio	r2,0(r2)
  816a70:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
  816a74:	e0bffc0f 	ldh	r2,-16(fp)
  816a78:	10ffffcc 	andi	r3,r2,65535
  816a7c:	00aa9554 	movui	r2,43605
  816a80:	1881751e 	bne	r3,r2,817058 <Check_for_DOS_FAT+0x628>
  816a84:	e0bffe17 	ldw	r2,-8(fp)
  816a88:	1005003a 	cmpeq	r2,r2,zero
  816a8c:	1001721e 	bne	r2,zero,817058 <Check_for_DOS_FAT+0x628>
		int num_clusters = 0;
  816a90:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0]
  816a94:	d0a75017 	ldw	r2,-25280(gp)
  816a98:	10800a17 	ldw	r2,40(r2)
  816a9c:	10800023 	ldbuio	r2,0(r2)
  816aa0:	1007883a 	mov	r3,r2
  816aa4:	008020b4 	movhi	r2,130
  816aa8:	1089f304 	addi	r2,r2,10188
  816aac:	10c00005 	stb	r3,0(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1]
  816ab0:	d0a75017 	ldw	r2,-25280(gp)
  816ab4:	10800a17 	ldw	r2,40(r2)
  816ab8:	10800044 	addi	r2,r2,1
  816abc:	10800023 	ldbuio	r2,0(r2)
  816ac0:	1007883a 	mov	r3,r2
  816ac4:	008020b4 	movhi	r2,130
  816ac8:	1089f304 	addi	r2,r2,10188
  816acc:	10c00045 	stb	r3,1(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2]
  816ad0:	d0a75017 	ldw	r2,-25280(gp)
  816ad4:	10800a17 	ldw	r2,40(r2)
  816ad8:	10800084 	addi	r2,r2,2
  816adc:	10800023 	ldbuio	r2,0(r2)
  816ae0:	1007883a 	mov	r3,r2
  816ae4:	008020b4 	movhi	r2,130
  816ae8:	1089f304 	addi	r2,r2,10188
  816aec:	10c00085 	stb	r3,2(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
  816af0:	e03ffd15 	stw	zero,-12(fp)
  816af4:	00001006 	br	816b38 <Check_for_DOS_FAT+0x108>
			boot_sector_data.OEM_name[counter]
  816af8:	e13ffd17 	ldw	r4,-12(fp)
  816afc:	d0a75017 	ldw	r2,-25280(gp)
  816b00:	10800a17 	ldw	r2,40(r2)
  816b04:	1007883a 	mov	r3,r2
  816b08:	e0bffd17 	ldw	r2,-12(fp)
  816b0c:	1885883a 	add	r2,r3,r2
  816b10:	108000c4 	addi	r2,r2,3
  816b14:	10800023 	ldbuio	r2,0(r2)
  816b18:	1007883a 	mov	r3,r2
  816b1c:	008020b4 	movhi	r2,130
  816b20:	1089f304 	addi	r2,r2,10188
  816b24:	1105883a 	add	r2,r2,r4
  816b28:	10c000c5 	stb	r3,3(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1]
				= (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2]
				= (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
  816b2c:	e0bffd17 	ldw	r2,-12(fp)
  816b30:	10800044 	addi	r2,r2,1
  816b34:	e0bffd15 	stw	r2,-12(fp)
  816b38:	e0bffd17 	ldw	r2,-12(fp)
  816b3c:	10800210 	cmplti	r2,r2,8
  816b40:	103fed1e 	bne	r2,zero,816af8 <Check_for_DOS_FAT+0xc8>
			boot_sector_data.OEM_name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes
  816b44:	d0a75017 	ldw	r2,-25280(gp)
  816b48:	10800a17 	ldw	r2,40(r2)
  816b4c:	10800304 	addi	r2,r2,12
  816b50:	10800023 	ldbuio	r2,0(r2)
  816b54:	10803fcc 	andi	r2,r2,255
  816b58:	1004923a 	slli	r2,r2,8
  816b5c:	1007883a 	mov	r3,r2
  816b60:	d0a75017 	ldw	r2,-25280(gp)
  816b64:	10800a17 	ldw	r2,40(r2)
  816b68:	108002c4 	addi	r2,r2,11
  816b6c:	10800023 	ldbuio	r2,0(r2)
  816b70:	10803fcc 	andi	r2,r2,255
  816b74:	1080201c 	xori	r2,r2,128
  816b78:	10bfe004 	addi	r2,r2,-128
  816b7c:	1884b03a 	or	r2,r3,r2
  816b80:	1007883a 	mov	r3,r2
  816b84:	008020b4 	movhi	r2,130
  816b88:	1089f304 	addi	r2,r2,10188
  816b8c:	10c0030d 	sth	r3,12(r2)
				= (((unsigned char) IORD_8DIRECT(device_pointer->base, 12))
						<< 8) | ((char) IORD_8DIRECT(device_pointer->base, 11));
		boot_sector_data.sectors_per_cluster
  816b90:	d0a75017 	ldw	r2,-25280(gp)
  816b94:	10800a17 	ldw	r2,40(r2)
  816b98:	10800344 	addi	r2,r2,13
  816b9c:	10800023 	ldbuio	r2,0(r2)
  816ba0:	1007883a 	mov	r3,r2
  816ba4:	008020b4 	movhi	r2,130
  816ba8:	1089f304 	addi	r2,r2,10188
  816bac:	10c00385 	stb	r3,14(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
		boot_sector_data.reserved_sectors
  816bb0:	d0a75017 	ldw	r2,-25280(gp)
  816bb4:	10800a17 	ldw	r2,40(r2)
  816bb8:	10800384 	addi	r2,r2,14
  816bbc:	1080002b 	ldhuio	r2,0(r2)
  816bc0:	1007883a 	mov	r3,r2
  816bc4:	008020b4 	movhi	r2,130
  816bc8:	1089f304 	addi	r2,r2,10188
  816bcc:	10c0040d 	sth	r3,16(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
		boot_sector_data.number_of_FATs
  816bd0:	d0a75017 	ldw	r2,-25280(gp)
  816bd4:	10800a17 	ldw	r2,40(r2)
  816bd8:	10800404 	addi	r2,r2,16
  816bdc:	10800023 	ldbuio	r2,0(r2)
  816be0:	1007883a 	mov	r3,r2
  816be4:	008020b4 	movhi	r2,130
  816be8:	1089f304 	addi	r2,r2,10188
  816bec:	10c00485 	stb	r3,18(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
		boot_sector_data.max_number_of_dir_entires
  816bf0:	d0a75017 	ldw	r2,-25280(gp)
  816bf4:	10800a17 	ldw	r2,40(r2)
  816bf8:	10800484 	addi	r2,r2,18
  816bfc:	10800023 	ldbuio	r2,0(r2)
  816c00:	10803fcc 	andi	r2,r2,255
  816c04:	1004923a 	slli	r2,r2,8
  816c08:	1007883a 	mov	r3,r2
  816c0c:	d0a75017 	ldw	r2,-25280(gp)
  816c10:	10800a17 	ldw	r2,40(r2)
  816c14:	10800444 	addi	r2,r2,17
  816c18:	10800023 	ldbuio	r2,0(r2)
  816c1c:	10803fcc 	andi	r2,r2,255
  816c20:	1884b03a 	or	r2,r3,r2
  816c24:	1007883a 	mov	r3,r2
  816c28:	008020b4 	movhi	r2,130
  816c2c:	1089f304 	addi	r2,r2,10188
  816c30:	10c0050d 	sth	r3,20(r2)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 18))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
		boot_sector_data.number_of_sectors_in_partition
  816c34:	d0a75017 	ldw	r2,-25280(gp)
  816c38:	10800a17 	ldw	r2,40(r2)
  816c3c:	10800504 	addi	r2,r2,20
  816c40:	10800023 	ldbuio	r2,0(r2)
  816c44:	10803fcc 	andi	r2,r2,255
  816c48:	1004923a 	slli	r2,r2,8
  816c4c:	1007883a 	mov	r3,r2
  816c50:	d0a75017 	ldw	r2,-25280(gp)
  816c54:	10800a17 	ldw	r2,40(r2)
  816c58:	108004c4 	addi	r2,r2,19
  816c5c:	10800023 	ldbuio	r2,0(r2)
  816c60:	10803fcc 	andi	r2,r2,255
  816c64:	1884b03a 	or	r2,r3,r2
  816c68:	1007883a 	mov	r3,r2
  816c6c:	008020b4 	movhi	r2,130
  816c70:	1089f304 	addi	r2,r2,10188
  816c74:	10c0058d 	sth	r3,22(r2)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 20))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
		boot_sector_data.media_descriptor
  816c78:	d0a75017 	ldw	r2,-25280(gp)
  816c7c:	10800a17 	ldw	r2,40(r2)
  816c80:	10800544 	addi	r2,r2,21
  816c84:	10800023 	ldbuio	r2,0(r2)
  816c88:	1007883a 	mov	r3,r2
  816c8c:	008020b4 	movhi	r2,130
  816c90:	1089f304 	addi	r2,r2,10188
  816c94:	10c00605 	stb	r3,24(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
		boot_sector_data.number_of_sectors_per_table
  816c98:	d0a75017 	ldw	r2,-25280(gp)
  816c9c:	10800a17 	ldw	r2,40(r2)
  816ca0:	10800584 	addi	r2,r2,22
  816ca4:	1080002b 	ldhuio	r2,0(r2)
  816ca8:	1007883a 	mov	r3,r2
  816cac:	008020b4 	movhi	r2,130
  816cb0:	1089f304 	addi	r2,r2,10188
  816cb4:	10c0068d 	sth	r3,26(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
		boot_sector_data.number_of_sectors_per_track
  816cb8:	d0a75017 	ldw	r2,-25280(gp)
  816cbc:	10800a17 	ldw	r2,40(r2)
  816cc0:	10800604 	addi	r2,r2,24
  816cc4:	1080002b 	ldhuio	r2,0(r2)
  816cc8:	1007883a 	mov	r3,r2
  816ccc:	008020b4 	movhi	r2,130
  816cd0:	1089f304 	addi	r2,r2,10188
  816cd4:	10c0070d 	sth	r3,28(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
		boot_sector_data.number_of_heads
  816cd8:	d0a75017 	ldw	r2,-25280(gp)
  816cdc:	10800a17 	ldw	r2,40(r2)
  816ce0:	10800684 	addi	r2,r2,26
  816ce4:	1080002b 	ldhuio	r2,0(r2)
  816ce8:	1007883a 	mov	r3,r2
  816cec:	008020b4 	movhi	r2,130
  816cf0:	1089f304 	addi	r2,r2,10188
  816cf4:	10c0078d 	sth	r3,30(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors
  816cf8:	d0a75017 	ldw	r2,-25280(gp)
  816cfc:	10800a17 	ldw	r2,40(r2)
  816d00:	10800704 	addi	r2,r2,28
  816d04:	10800037 	ldwio	r2,0(r2)
  816d08:	1007883a 	mov	r3,r2
  816d0c:	008020b4 	movhi	r2,130
  816d10:	1089f304 	addi	r2,r2,10188
  816d14:	10c00815 	stw	r3,32(r2)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB
  816d18:	d0a75017 	ldw	r2,-25280(gp)
  816d1c:	10800a17 	ldw	r2,40(r2)
  816d20:	10800804 	addi	r2,r2,32
  816d24:	10800037 	ldwio	r2,0(r2)
  816d28:	1007883a 	mov	r3,r2
  816d2c:	008020b4 	movhi	r2,130
  816d30:	1089f304 	addi	r2,r2,10188
  816d34:	10c00915 	stw	r3,36(r2)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number
  816d38:	d0a75017 	ldw	r2,-25280(gp)
  816d3c:	10800a17 	ldw	r2,40(r2)
  816d40:	10800904 	addi	r2,r2,36
  816d44:	10800023 	ldbuio	r2,0(r2)
  816d48:	1007883a 	mov	r3,r2
  816d4c:	008020b4 	movhi	r2,130
  816d50:	1089f304 	addi	r2,r2,10188
  816d54:	10c00a05 	stb	r3,40(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head
  816d58:	d0a75017 	ldw	r2,-25280(gp)
  816d5c:	10800a17 	ldw	r2,40(r2)
  816d60:	10800944 	addi	r2,r2,37
  816d64:	10800023 	ldbuio	r2,0(r2)
  816d68:	1007883a 	mov	r3,r2
  816d6c:	008020b4 	movhi	r2,130
  816d70:	1089f304 	addi	r2,r2,10188
  816d74:	10c00a45 	stb	r3,41(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature
  816d78:	d0a75017 	ldw	r2,-25280(gp)
  816d7c:	10800a17 	ldw	r2,40(r2)
  816d80:	10800984 	addi	r2,r2,38
  816d84:	10800023 	ldbuio	r2,0(r2)
  816d88:	1007883a 	mov	r3,r2
  816d8c:	008020b4 	movhi	r2,130
  816d90:	1089f304 	addi	r2,r2,10188
  816d94:	10c00a85 	stb	r3,42(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset
  816d98:	008020b4 	movhi	r2,130
  816d9c:	1089f304 	addi	r2,r2,10188
  816da0:	1080040b 	ldhu	r2,16(r2)
  816da4:	10ffffcc 	andi	r3,r2,65535
  816da8:	008020b4 	movhi	r2,130
  816dac:	1089f304 	addi	r2,r2,10188
  816db0:	10c01115 	stw	r3,68(r2)
				= boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset
  816db4:	008020b4 	movhi	r2,130
  816db8:	1089f304 	addi	r2,r2,10188
  816dbc:	10c01117 	ldw	r3,68(r2)
  816dc0:	008020b4 	movhi	r2,130
  816dc4:	1089f304 	addi	r2,r2,10188
  816dc8:	1080068b 	ldhu	r2,26(r2)
  816dcc:	10bfffcc 	andi	r2,r2,65535
  816dd0:	1887883a 	add	r3,r3,r2
  816dd4:	008020b4 	movhi	r2,130
  816dd8:	1089f304 	addi	r2,r2,10188
  816ddc:	10c01215 	stw	r3,72(r2)
				= boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset
  816de0:	008020b4 	movhi	r2,130
  816de4:	1089f304 	addi	r2,r2,10188
  816de8:	10c01217 	ldw	r3,72(r2)
  816dec:	008020b4 	movhi	r2,130
  816df0:	1089f304 	addi	r2,r2,10188
  816df4:	1080068b 	ldhu	r2,26(r2)
  816df8:	10bfffcc 	andi	r2,r2,65535
  816dfc:	1887883a 	add	r3,r3,r2
  816e00:	008020b4 	movhi	r2,130
  816e04:	1089f304 	addi	r2,r2,10188
  816e08:	10c01315 	stw	r3,76(r2)
				= boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset
  816e0c:	008020b4 	movhi	r2,130
  816e10:	1089f304 	addi	r2,r2,10188
  816e14:	14001317 	ldw	r16,76(r2)
  816e18:	008020b4 	movhi	r2,130
  816e1c:	1089f304 	addi	r2,r2,10188
  816e20:	1080050b 	ldhu	r2,20(r2)
  816e24:	10bfffcc 	andi	r2,r2,65535
  816e28:	1008917a 	slli	r4,r2,5
  816e2c:	008020b4 	movhi	r2,130
  816e30:	1089f304 	addi	r2,r2,10188
  816e34:	1080030b 	ldhu	r2,12(r2)
  816e38:	117fffcc 	andi	r5,r2,65535
  816e3c:	08085980 	call	808598 <__divsi3>
  816e40:	8087883a 	add	r3,r16,r2
  816e44:	008020b4 	movhi	r2,130
  816e48:	1089f304 	addi	r2,r2,10188
  816e4c:	10c01415 	stw	r3,80(r2)
				= boot_sector_data.root_directory_sector_offset + (32
						* boot_sector_data.max_number_of_dir_entires
						/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
  816e50:	008020b4 	movhi	r2,130
  816e54:	1089f304 	addi	r2,r2,10188
  816e58:	1080058b 	ldhu	r2,22(r2)
  816e5c:	10bfffcc 	andi	r2,r2,65535
  816e60:	1005003a 	cmpeq	r2,r2,zero
  816e64:	10000b1e 	bne	r2,zero,816e94 <Check_for_DOS_FAT+0x464>
			num_clusters = (boot_sector_data.number_of_sectors_in_partition
  816e68:	008020b4 	movhi	r2,130
  816e6c:	1089f304 	addi	r2,r2,10188
  816e70:	1080058b 	ldhu	r2,22(r2)
  816e74:	113fffcc 	andi	r4,r2,65535
  816e78:	008020b4 	movhi	r2,130
  816e7c:	1089f304 	addi	r2,r2,10188
  816e80:	10800383 	ldbu	r2,14(r2)
  816e84:	11403fcc 	andi	r5,r2,255
  816e88:	08085980 	call	808598 <__divsi3>
  816e8c:	e0bffb15 	stw	r2,-20(fp)
  816e90:	00000906 	br	816eb8 <Check_for_DOS_FAT+0x488>
					/ boot_sector_data.sectors_per_cluster);
		} else {
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB
  816e94:	008020b4 	movhi	r2,130
  816e98:	1089f304 	addi	r2,r2,10188
  816e9c:	11000917 	ldw	r4,36(r2)
  816ea0:	008020b4 	movhi	r2,130
  816ea4:	1089f304 	addi	r2,r2,10188
  816ea8:	10800383 	ldbu	r2,14(r2)
  816eac:	11403fcc 	andi	r5,r2,255
  816eb0:	08086580 	call	808658 <__udivsi3>
  816eb4:	e0bffb15 	stw	r2,-20(fp)
					/ boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087) {
  816eb8:	e0bffb17 	ldw	r2,-20(fp)
  816ebc:	1083fdc8 	cmpgei	r2,r2,4087
  816ec0:	1000051e 	bne	r2,zero,816ed8 <Check_for_DOS_FAT+0x4a8>
			boot_sector_data.bits_for_cluster_index = 12;
  816ec4:	00c020b4 	movhi	r3,130
  816ec8:	18c9f304 	addi	r3,r3,10188
  816ecc:	00800304 	movi	r2,12
  816ed0:	18801085 	stb	r2,66(r3)
  816ed4:	00000c06 	br	816f08 <Check_for_DOS_FAT+0x4d8>
		} else if (num_clusters <= 65517) {
  816ed8:	e0fffb17 	ldw	r3,-20(fp)
  816edc:	00bffb54 	movui	r2,65517
  816ee0:	10c00516 	blt	r2,r3,816ef8 <Check_for_DOS_FAT+0x4c8>
			boot_sector_data.bits_for_cluster_index = 16;
  816ee4:	00c020b4 	movhi	r3,130
  816ee8:	18c9f304 	addi	r3,r3,10188
  816eec:	00800404 	movi	r2,16
  816ef0:	18801085 	stb	r2,66(r3)
  816ef4:	00000406 	br	816f08 <Check_for_DOS_FAT+0x4d8>
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
  816ef8:	00c020b4 	movhi	r3,130
  816efc:	18c9f304 	addi	r3,r3,10188
  816f00:	00800804 	movi	r2,32
  816f04:	18801085 	stb	r2,66(r3)
		}

		for (counter = 0; counter < 4; counter++) {
  816f08:	e03ffd15 	stw	zero,-12(fp)
  816f0c:	00001106 	br	816f54 <Check_for_DOS_FAT+0x524>
			boot_sector_data.volume_id[counter]
  816f10:	e13ffd17 	ldw	r4,-12(fp)
  816f14:	d0a75017 	ldw	r2,-25280(gp)
  816f18:	10800a17 	ldw	r2,40(r2)
  816f1c:	1007883a 	mov	r3,r2
  816f20:	e0bffd17 	ldw	r2,-12(fp)
  816f24:	1885883a 	add	r2,r3,r2
  816f28:	108009c4 	addi	r2,r2,39
  816f2c:	10800023 	ldbuio	r2,0(r2)
  816f30:	1007883a 	mov	r3,r2
  816f34:	008020b4 	movhi	r2,130
  816f38:	1089f304 	addi	r2,r2,10188
  816f3c:	2085883a 	add	r2,r4,r2
  816f40:	10800a04 	addi	r2,r2,40
  816f44:	10c000c5 	stb	r3,3(r2)
			boot_sector_data.bits_for_cluster_index = 16;
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
		}

		for (counter = 0; counter < 4; counter++) {
  816f48:	e0bffd17 	ldw	r2,-12(fp)
  816f4c:	10800044 	addi	r2,r2,1
  816f50:	e0bffd15 	stw	r2,-12(fp)
  816f54:	e0bffd17 	ldw	r2,-12(fp)
  816f58:	10800110 	cmplti	r2,r2,4
  816f5c:	103fec1e 	bne	r2,zero,816f10 <Check_for_DOS_FAT+0x4e0>
			boot_sector_data.volume_id[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
  816f60:	e03ffd15 	stw	zero,-12(fp)
  816f64:	00001106 	br	816fac <Check_for_DOS_FAT+0x57c>
			boot_sector_data.volume_label[counter]
  816f68:	e13ffd17 	ldw	r4,-12(fp)
  816f6c:	d0a75017 	ldw	r2,-25280(gp)
  816f70:	10800a17 	ldw	r2,40(r2)
  816f74:	1007883a 	mov	r3,r2
  816f78:	e0bffd17 	ldw	r2,-12(fp)
  816f7c:	1885883a 	add	r2,r3,r2
  816f80:	10800ac4 	addi	r2,r2,43
  816f84:	10800023 	ldbuio	r2,0(r2)
  816f88:	1007883a 	mov	r3,r2
  816f8c:	008020b4 	movhi	r2,130
  816f90:	1089f304 	addi	r2,r2,10188
  816f94:	2085883a 	add	r2,r4,r2
  816f98:	10800b04 	addi	r2,r2,44
  816f9c:	10c000c5 	stb	r3,3(r2)

		for (counter = 0; counter < 4; counter++) {
			boot_sector_data.volume_id[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
  816fa0:	e0bffd17 	ldw	r2,-12(fp)
  816fa4:	10800044 	addi	r2,r2,1
  816fa8:	e0bffd15 	stw	r2,-12(fp)
  816fac:	e0bffd17 	ldw	r2,-12(fp)
  816fb0:	108002d0 	cmplti	r2,r2,11
  816fb4:	103fec1e 	bne	r2,zero,816f68 <Check_for_DOS_FAT+0x538>
			boot_sector_data.volume_label[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
  816fb8:	e03ffd15 	stw	zero,-12(fp)
  816fbc:	00001106 	br	817004 <Check_for_DOS_FAT+0x5d4>
			boot_sector_data.file_system_type[counter]
  816fc0:	e13ffd17 	ldw	r4,-12(fp)
  816fc4:	d0a75017 	ldw	r2,-25280(gp)
  816fc8:	10800a17 	ldw	r2,40(r2)
  816fcc:	1007883a 	mov	r3,r2
  816fd0:	e0bffd17 	ldw	r2,-12(fp)
  816fd4:	1885883a 	add	r2,r3,r2
  816fd8:	10800d84 	addi	r2,r2,54
  816fdc:	10800023 	ldbuio	r2,0(r2)
  816fe0:	1007883a 	mov	r3,r2
  816fe4:	008020b4 	movhi	r2,130
  816fe8:	1089f304 	addi	r2,r2,10188
  816fec:	2085883a 	add	r2,r4,r2
  816ff0:	10800e04 	addi	r2,r2,56
  816ff4:	10c00085 	stb	r3,2(r2)
		}
		for (counter = 0; counter < 11; counter++) {
			boot_sector_data.volume_label[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
  816ff8:	e0bffd17 	ldw	r2,-12(fp)
  816ffc:	10800044 	addi	r2,r2,1
  817000:	e0bffd15 	stw	r2,-12(fp)
  817004:	e0bffd17 	ldw	r2,-12(fp)
  817008:	10800210 	cmplti	r2,r2,8
  81700c:	103fec1e 	bne	r2,zero,816fc0 <Check_for_DOS_FAT+0x590>
			boot_sector_data.file_system_type[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
  817010:	e03ffd15 	stw	zero,-12(fp)
  817014:	00000a06 	br	817040 <Check_for_DOS_FAT+0x610>
			active_files[counter].in_use = false;
  817018:	e0bffd17 	ldw	r2,-12(fp)
  81701c:	00c020b4 	movhi	r3,130
  817020:	18ca0804 	addi	r3,r3,10272
  817024:	100491ba 	slli	r2,r2,6
  817028:	10c5883a 	add	r2,r2,r3
  81702c:	10800f04 	addi	r2,r2,60
  817030:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++) {
			boot_sector_data.file_system_type[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
  817034:	e0bffd17 	ldw	r2,-12(fp)
  817038:	10800044 	addi	r2,r2,1
  81703c:	e0bffd15 	stw	r2,-12(fp)
  817040:	e0bffd17 	ldw	r2,-12(fp)
  817044:	10800510 	cmplti	r2,r2,20
  817048:	103ff31e 	bne	r2,zero,817018 <Check_for_DOS_FAT+0x5e8>
			active_files[counter].in_use = false;
		}
		result = true;
  81704c:	00800044 	movi	r2,1
  817050:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
  817054:	00000106 	br	81705c <Check_for_DOS_FAT+0x62c>
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
			active_files[counter].in_use = false;
		}
		result = true;
	} else {
		result = false;
  817058:	e03ffe15 	stw	zero,-8(fp)
	}
	return result;
  81705c:	e0bffe17 	ldw	r2,-8(fp)
}
  817060:	e037883a 	mov	sp,fp
  817064:	dfc00217 	ldw	ra,8(sp)
  817068:	df000117 	ldw	fp,4(sp)
  81706c:	dc000017 	ldw	r16,0(sp)
  817070:	dec00304 	addi	sp,sp,12
  817074:	f800283a 	ret

00817078 <Look_for_FAT16>:

bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
  817078:	defffc04 	addi	sp,sp,-16
  81707c:	dfc00315 	stw	ra,12(sp)
  817080:	df000215 	stw	fp,8(sp)
  817084:	df000204 	addi	fp,sp,8
	bool result = false;
  817088:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
  81708c:	0818dc00 	call	818dc0 <alt_up_sd_card_is_Present>
  817090:	1005003a 	cmpeq	r2,r2,zero
  817094:	1000331e 	bne	r2,zero,817164 <Look_for_FAT16+0xec>
		Read_Sector_Data_Attempt_CRC(0, 0);
  817098:	0009883a 	mov	r4,zero
  81709c:	000b883a 	mov	r5,zero
  8170a0:	081a4c40 	call	81a4c4 <Read_Sector_Data_Attempt_CRC>

		short int csd_file_format = *CSD_register_w0;
  8170a4:	d0a74a17 	ldw	r2,-25304(gp)
  8170a8:	1080000b 	ldhu	r2,0(r2)
  8170ac:	e0bffe0d 	sth	r2,-8(fp)

		fat_partition_offset_in_512_byte_sectors = 0;
  8170b0:	d0274e15 	stw	zero,-25288(gp)
		fat_partition_size_in_512_byte_sectors = 0;
  8170b4:	d0274f15 	stw	zero,-25284(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00)
  8170b8:	e0bffe0f 	ldh	r2,-8(fp)
  8170bc:	1004803a 	cmplt	r2,r2,zero
  8170c0:	1000281e 	bne	r2,zero,817164 <Look_for_FAT16+0xec>
  8170c4:	e0bffe0b 	ldhu	r2,-8(fp)
  8170c8:	10bfffcc 	andi	r2,r2,65535
  8170cc:	1083000c 	andi	r2,r2,3072
  8170d0:	10830020 	cmpeqi	r2,r2,3072
  8170d4:	1000231e 	bne	r2,zero,817164 <Look_for_FAT16+0xec>
				!= 0x0c00)) {
			if ((csd_file_format & 0x0c00) == 0x0400) {
  8170d8:	e0bffe0b 	ldhu	r2,-8(fp)
  8170dc:	10bfffcc 	andi	r2,r2,65535
  8170e0:	1083000c 	andi	r2,r2,3072
  8170e4:	10810018 	cmpnei	r2,r2,1024
  8170e8:	1000031e 	bne	r2,zero,8170f8 <Look_for_FAT16+0x80>
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
  8170ec:	0009883a 	mov	r4,zero
  8170f0:	0816a300 	call	816a30 <Check_for_DOS_FAT>
  8170f4:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000) {
  8170f8:	e0bffe0b 	ldhu	r2,-8(fp)
  8170fc:	10bfffcc 	andi	r2,r2,65535
  817100:	1083000c 	andi	r2,r2,3072
  817104:	1004c03a 	cmpne	r2,r2,zero
  817108:	1000061e 	bne	r2,zero,817124 <Look_for_FAT16+0xac>
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record()) {
  81710c:	08163440 	call	816344 <Check_for_Master_Boot_Record>
  817110:	1005003a 	cmpeq	r2,r2,zero
  817114:	1000031e 	bne	r2,zero,817124 <Look_for_FAT16+0xac>
					result = Check_for_DOS_FAT(
  817118:	d1274e17 	ldw	r4,-25288(gp)
  81711c:	0816a300 	call	816a30 <Check_for_DOS_FAT>
  817120:	e0bfff15 	stw	r2,-4(fp)
							fat_partition_offset_in_512_byte_sectors);
				}
			}
			if (result == true) {
  817124:	e0bfff17 	ldw	r2,-4(fp)
  817128:	10800058 	cmpnei	r2,r2,1
  81712c:	10000d1e 	bne	r2,zero,817164 <Look_for_FAT16+0xec>
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16) {
  817130:	008020b4 	movhi	r2,130
  817134:	1089f304 	addi	r2,r2,10188
  817138:	10801083 	ldbu	r2,66(r2)
  81713c:	10803fcc 	andi	r2,r2,255
  817140:	10800420 	cmpeqi	r2,r2,16
  817144:	1000021e 	bne	r2,zero,817150 <Look_for_FAT16+0xd8>
					result = false;
  817148:	e03fff15 	stw	zero,-4(fp)
  81714c:	00000506 	br	817164 <Look_for_FAT16+0xec>
				} else {
					fat_partition_size_in_512_byte_sectors
  817150:	008020b4 	movhi	r2,130
  817154:	1089f304 	addi	r2,r2,10188
  817158:	1080058b 	ldhu	r2,22(r2)
  81715c:	10bfffcc 	andi	r2,r2,65535
  817160:	d0a74f15 	stw	r2,-25284(gp)
							= boot_sector_data.number_of_sectors_in_partition;
				}
			}
		}
	}
	return result;
  817164:	e0bfff17 	ldw	r2,-4(fp)
}
  817168:	e037883a 	mov	sp,fp
  81716c:	dfc00117 	ldw	ra,4(sp)
  817170:	df000017 	ldw	fp,0(sp)
  817174:	dec00204 	addi	sp,sp,8
  817178:	f800283a 	ret

0081717c <filename_to_upper_case>:

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
  81717c:	defffb04 	addi	sp,sp,-20
  817180:	dfc00415 	stw	ra,16(sp)
  817184:	df000315 	stw	fp,12(sp)
  817188:	df000304 	addi	fp,sp,12
  81718c:	e13fff15 	stw	r4,-4(fp)
	int index;
	int length = strlen(file_name);
  817190:	e13fff17 	ldw	r4,-4(fp)
  817194:	08098640 	call	809864 <strlen>
  817198:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
  81719c:	e03ffe15 	stw	zero,-8(fp)
  8171a0:	00002206 	br	81722c <filename_to_upper_case+0xb0>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
  8171a4:	e0bffe17 	ldw	r2,-8(fp)
  8171a8:	1007883a 	mov	r3,r2
  8171ac:	e0bfff17 	ldw	r2,-4(fp)
  8171b0:	1885883a 	add	r2,r3,r2
  8171b4:	10800003 	ldbu	r2,0(r2)
  8171b8:	10803fcc 	andi	r2,r2,255
  8171bc:	1080201c 	xori	r2,r2,128
  8171c0:	10bfe004 	addi	r2,r2,-128
  8171c4:	10801850 	cmplti	r2,r2,97
  8171c8:	1000151e 	bne	r2,zero,817220 <filename_to_upper_case+0xa4>
  8171cc:	e0bffe17 	ldw	r2,-8(fp)
  8171d0:	1007883a 	mov	r3,r2
  8171d4:	e0bfff17 	ldw	r2,-4(fp)
  8171d8:	1885883a 	add	r2,r3,r2
  8171dc:	10800003 	ldbu	r2,0(r2)
  8171e0:	10803fcc 	andi	r2,r2,255
  8171e4:	1080201c 	xori	r2,r2,128
  8171e8:	10bfe004 	addi	r2,r2,-128
  8171ec:	10801ec8 	cmpgei	r2,r2,123
  8171f0:	10000b1e 	bne	r2,zero,817220 <filename_to_upper_case+0xa4>
			file_name[index] = (file_name[index] - 'a') + 'A';
  8171f4:	e0bffe17 	ldw	r2,-8(fp)
  8171f8:	1007883a 	mov	r3,r2
  8171fc:	e0bfff17 	ldw	r2,-4(fp)
  817200:	1889883a 	add	r4,r3,r2
  817204:	e0bffe17 	ldw	r2,-8(fp)
  817208:	1007883a 	mov	r3,r2
  81720c:	e0bfff17 	ldw	r2,-4(fp)
  817210:	1885883a 	add	r2,r3,r2
  817214:	10800003 	ldbu	r2,0(r2)
  817218:	10bff804 	addi	r2,r2,-32
  81721c:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
  817220:	e0bffe17 	ldw	r2,-8(fp)
  817224:	10800044 	addi	r2,r2,1
  817228:	e0bffe15 	stw	r2,-8(fp)
  81722c:	e0fffe17 	ldw	r3,-8(fp)
  817230:	e0bffd17 	ldw	r2,-12(fp)
  817234:	18bfdb16 	blt	r3,r2,8171a4 <filename_to_upper_case+0x28>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
			file_name[index] = (file_name[index] - 'a') + 'A';
		}
	}
}
  817238:	e037883a 	mov	sp,fp
  81723c:	dfc00117 	ldw	ra,4(sp)
  817240:	df000017 	ldw	fp,0(sp)
  817244:	dec00204 	addi	sp,sp,8
  817248:	f800283a 	ret

0081724c <check_file_name_for_FAT16_compliance>:

bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
  81724c:	defff804 	addi	sp,sp,-32
  817250:	dfc00715 	stw	ra,28(sp)
  817254:	df000615 	stw	fp,24(sp)
  817258:	df000604 	addi	fp,sp,24
  81725c:	e13fff15 	stw	r4,-4(fp)
	int length = strlen(file_name);
  817260:	e13fff17 	ldw	r4,-4(fp)
  817264:	08098640 	call	809864 <strlen>
  817268:	e0bffe15 	stw	r2,-8(fp)
	int index;
	int last_dir_break_position = -1;
  81726c:	00bfffc4 	movi	r2,-1
  817270:	e0bffc15 	stw	r2,-16(fp)
	int last_period = -1;
  817274:	00bfffc4 	movi	r2,-1
  817278:	e0bffb15 	stw	r2,-20(fp)
	bool result = true;
  81727c:	00800044 	movi	r2,1
  817280:	e0bffa15 	stw	r2,-24(fp)

	for (index = 0; index < length; index++) {
  817284:	e03ffd15 	stw	zero,-12(fp)
  817288:	00007606 	br	817464 <check_file_name_for_FAT16_compliance+0x218>
		if ((file_name[index] == ' ') || ((last_dir_break_position == (index
  81728c:	e0bffd17 	ldw	r2,-12(fp)
  817290:	1007883a 	mov	r3,r2
  817294:	e0bfff17 	ldw	r2,-4(fp)
  817298:	1885883a 	add	r2,r3,r2
  81729c:	10800003 	ldbu	r2,0(r2)
  8172a0:	10803fcc 	andi	r2,r2,255
  8172a4:	1080201c 	xori	r2,r2,128
  8172a8:	10bfe004 	addi	r2,r2,-128
  8172ac:	10800820 	cmpeqi	r2,r2,32
  8172b0:	1000431e 	bne	r2,zero,8173c0 <check_file_name_for_FAT16_compliance+0x174>
  8172b4:	e0bffd17 	ldw	r2,-12(fp)
  8172b8:	10ffffc4 	addi	r3,r2,-1
  8172bc:	e0bffc17 	ldw	r2,-16(fp)
  8172c0:	1880141e 	bne	r3,r2,817314 <check_file_name_for_FAT16_compliance+0xc8>
  8172c4:	e0bffd17 	ldw	r2,-12(fp)
  8172c8:	1007883a 	mov	r3,r2
  8172cc:	e0bfff17 	ldw	r2,-4(fp)
  8172d0:	1885883a 	add	r2,r3,r2
  8172d4:	10800003 	ldbu	r2,0(r2)
  8172d8:	10803fcc 	andi	r2,r2,255
  8172dc:	1080201c 	xori	r2,r2,128
  8172e0:	10bfe004 	addi	r2,r2,-128
  8172e4:	10801720 	cmpeqi	r2,r2,92
  8172e8:	1000351e 	bne	r2,zero,8173c0 <check_file_name_for_FAT16_compliance+0x174>
  8172ec:	e0bffd17 	ldw	r2,-12(fp)
  8172f0:	1007883a 	mov	r3,r2
  8172f4:	e0bfff17 	ldw	r2,-4(fp)
  8172f8:	1885883a 	add	r2,r3,r2
  8172fc:	10800003 	ldbu	r2,0(r2)
  817300:	10803fcc 	andi	r2,r2,255
  817304:	1080201c 	xori	r2,r2,128
  817308:	10bfe004 	addi	r2,r2,-128
  81730c:	10800be0 	cmpeqi	r2,r2,47
  817310:	10002b1e 	bne	r2,zero,8173c0 <check_file_name_for_FAT16_compliance+0x174>
  817314:	e0fffd17 	ldw	r3,-12(fp)
  817318:	e0bffb17 	ldw	r2,-20(fp)
  81731c:	1885c83a 	sub	r2,r3,r2
  817320:	10800258 	cmpnei	r2,r2,9
  817324:	10000a1e 	bne	r2,zero,817350 <check_file_name_for_FAT16_compliance+0x104>
  817328:	e0bffd17 	ldw	r2,-12(fp)
  81732c:	1007883a 	mov	r3,r2
  817330:	e0bfff17 	ldw	r2,-4(fp)
  817334:	1885883a 	add	r2,r3,r2
  817338:	10800003 	ldbu	r2,0(r2)
  81733c:	10803fcc 	andi	r2,r2,255
  817340:	1080201c 	xori	r2,r2,128
  817344:	10bfe004 	addi	r2,r2,-128
  817348:	10800b98 	cmpnei	r2,r2,46
  81734c:	10001c1e 	bne	r2,zero,8173c0 <check_file_name_for_FAT16_compliance+0x174>
  817350:	e0fffc17 	ldw	r3,-16(fp)
  817354:	e0bffb17 	ldw	r2,-20(fp)
  817358:	18801b26 	beq	r3,r2,8173c8 <check_file_name_for_FAT16_compliance+0x17c>
  81735c:	e0fffd17 	ldw	r3,-12(fp)
  817360:	e0bffb17 	ldw	r2,-20(fp)
  817364:	1885c83a 	sub	r2,r3,r2
  817368:	10800110 	cmplti	r2,r2,4
  81736c:	1000161e 	bne	r2,zero,8173c8 <check_file_name_for_FAT16_compliance+0x17c>
  817370:	e0bffd17 	ldw	r2,-12(fp)
  817374:	1007883a 	mov	r3,r2
  817378:	e0bfff17 	ldw	r2,-4(fp)
  81737c:	1885883a 	add	r2,r3,r2
  817380:	10800003 	ldbu	r2,0(r2)
  817384:	10803fcc 	andi	r2,r2,255
  817388:	1080201c 	xori	r2,r2,128
  81738c:	10bfe004 	addi	r2,r2,-128
  817390:	10801720 	cmpeqi	r2,r2,92
  817394:	10000c1e 	bne	r2,zero,8173c8 <check_file_name_for_FAT16_compliance+0x17c>
  817398:	e0bffd17 	ldw	r2,-12(fp)
  81739c:	1007883a 	mov	r3,r2
  8173a0:	e0bfff17 	ldw	r2,-4(fp)
  8173a4:	1885883a 	add	r2,r3,r2
  8173a8:	10800003 	ldbu	r2,0(r2)
  8173ac:	10803fcc 	andi	r2,r2,255
  8173b0:	1080201c 	xori	r2,r2,128
  8173b4:	10bfe004 	addi	r2,r2,-128
  8173b8:	10800be0 	cmpeqi	r2,r2,47
  8173bc:	1000021e 	bne	r2,zero,8173c8 <check_file_name_for_FAT16_compliance+0x17c>
				- 1)) && ((file_name[index] == '\\') || (file_name[index]
				== '/'))) || ((index - last_period == 9) && (file_name[index]
				!= '.')) || ((last_dir_break_position != last_period) && (index
				- last_period > 3) && (file_name[index] != '\\')
				&& (file_name[index] != '/'))) {
			result = false;
  8173c0:	e03ffa15 	stw	zero,-24(fp)
			break;
  8173c4:	00002a06 	br	817470 <check_file_name_for_FAT16_compliance+0x224>
		}
		if ((file_name[index] == '\\') || (file_name[index] == '/')) {
  8173c8:	e0bffd17 	ldw	r2,-12(fp)
  8173cc:	1007883a 	mov	r3,r2
  8173d0:	e0bfff17 	ldw	r2,-4(fp)
  8173d4:	1885883a 	add	r2,r3,r2
  8173d8:	10800003 	ldbu	r2,0(r2)
  8173dc:	10803fcc 	andi	r2,r2,255
  8173e0:	1080201c 	xori	r2,r2,128
  8173e4:	10bfe004 	addi	r2,r2,-128
  8173e8:	10801720 	cmpeqi	r2,r2,92
  8173ec:	10000a1e 	bne	r2,zero,817418 <check_file_name_for_FAT16_compliance+0x1cc>
  8173f0:	e0bffd17 	ldw	r2,-12(fp)
  8173f4:	1007883a 	mov	r3,r2
  8173f8:	e0bfff17 	ldw	r2,-4(fp)
  8173fc:	1885883a 	add	r2,r3,r2
  817400:	10800003 	ldbu	r2,0(r2)
  817404:	10803fcc 	andi	r2,r2,255
  817408:	1080201c 	xori	r2,r2,128
  81740c:	10bfe004 	addi	r2,r2,-128
  817410:	10800bd8 	cmpnei	r2,r2,47
  817414:	1000041e 	bne	r2,zero,817428 <check_file_name_for_FAT16_compliance+0x1dc>
			last_period = index;
  817418:	e0bffd17 	ldw	r2,-12(fp)
  81741c:	e0bffb15 	stw	r2,-20(fp)
			last_dir_break_position = index;
  817420:	e0bffd17 	ldw	r2,-12(fp)
  817424:	e0bffc15 	stw	r2,-16(fp)
		}
		if (file_name[index] == '.') {
  817428:	e0bffd17 	ldw	r2,-12(fp)
  81742c:	1007883a 	mov	r3,r2
  817430:	e0bfff17 	ldw	r2,-4(fp)
  817434:	1885883a 	add	r2,r3,r2
  817438:	10800003 	ldbu	r2,0(r2)
  81743c:	10803fcc 	andi	r2,r2,255
  817440:	1080201c 	xori	r2,r2,128
  817444:	10bfe004 	addi	r2,r2,-128
  817448:	10800b98 	cmpnei	r2,r2,46
  81744c:	1000021e 	bne	r2,zero,817458 <check_file_name_for_FAT16_compliance+0x20c>
			last_period = index;
  817450:	e0bffd17 	ldw	r2,-12(fp)
  817454:	e0bffb15 	stw	r2,-20(fp)
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
  817458:	e0bffd17 	ldw	r2,-12(fp)
  81745c:	10800044 	addi	r2,r2,1
  817460:	e0bffd15 	stw	r2,-12(fp)
  817464:	e0fffd17 	ldw	r3,-12(fp)
  817468:	e0bffe17 	ldw	r2,-8(fp)
  81746c:	18bf8716 	blt	r3,r2,81728c <check_file_name_for_FAT16_compliance+0x40>
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
  817470:	e0fffe17 	ldw	r3,-8(fp)
  817474:	e0bfff17 	ldw	r2,-4(fp)
  817478:	1885883a 	add	r2,r3,r2
  81747c:	10bfffc4 	addi	r2,r2,-1
  817480:	10800003 	ldbu	r2,0(r2)
  817484:	10803fcc 	andi	r2,r2,255
  817488:	1080201c 	xori	r2,r2,128
  81748c:	10bfe004 	addi	r2,r2,-128
  817490:	10801720 	cmpeqi	r2,r2,92
  817494:	10000a1e 	bne	r2,zero,8174c0 <check_file_name_for_FAT16_compliance+0x274>
  817498:	e0fffe17 	ldw	r3,-8(fp)
  81749c:	e0bfff17 	ldw	r2,-4(fp)
  8174a0:	1885883a 	add	r2,r3,r2
  8174a4:	10bfffc4 	addi	r2,r2,-1
  8174a8:	10800003 	ldbu	r2,0(r2)
  8174ac:	10803fcc 	andi	r2,r2,255
  8174b0:	1080201c 	xori	r2,r2,128
  8174b4:	10bfe004 	addi	r2,r2,-128
  8174b8:	10800bd8 	cmpnei	r2,r2,47
  8174bc:	1000011e 	bne	r2,zero,8174c4 <check_file_name_for_FAT16_compliance+0x278>
		result = false;
  8174c0:	e03ffa15 	stw	zero,-24(fp)
	}
	return result;
  8174c4:	e0bffa17 	ldw	r2,-24(fp)
}
  8174c8:	e037883a 	mov	sp,fp
  8174cc:	dfc00117 	ldw	ra,4(sp)
  8174d0:	df000017 	ldw	fp,0(sp)
  8174d4:	dec00204 	addi	sp,sp,8
  8174d8:	f800283a 	ret

008174dc <get_dir_divider_location>:

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
  8174dc:	defffb04 	addi	sp,sp,-20
  8174e0:	dfc00415 	stw	ra,16(sp)
  8174e4:	df000315 	stw	fp,12(sp)
  8174e8:	df000304 	addi	fp,sp,12
  8174ec:	e13fff15 	stw	r4,-4(fp)
	int index = 0;
  8174f0:	e03ffe15 	stw	zero,-8(fp)
	int length = strlen(name);
  8174f4:	e13fff17 	ldw	r4,-4(fp)
  8174f8:	08098640 	call	809864 <strlen>
  8174fc:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
  817500:	e03ffe15 	stw	zero,-8(fp)
  817504:	00001706 	br	817564 <get_dir_divider_location+0x88>
		if ((name[index] == '\\') || (name[index] == '/')) {
  817508:	e0bffe17 	ldw	r2,-8(fp)
  81750c:	1007883a 	mov	r3,r2
  817510:	e0bfff17 	ldw	r2,-4(fp)
  817514:	1885883a 	add	r2,r3,r2
  817518:	10800003 	ldbu	r2,0(r2)
  81751c:	10803fcc 	andi	r2,r2,255
  817520:	1080201c 	xori	r2,r2,128
  817524:	10bfe004 	addi	r2,r2,-128
  817528:	10801720 	cmpeqi	r2,r2,92
  81752c:	1000101e 	bne	r2,zero,817570 <get_dir_divider_location+0x94>
  817530:	e0bffe17 	ldw	r2,-8(fp)
  817534:	1007883a 	mov	r3,r2
  817538:	e0bfff17 	ldw	r2,-4(fp)
  81753c:	1885883a 	add	r2,r3,r2
  817540:	10800003 	ldbu	r2,0(r2)
  817544:	10803fcc 	andi	r2,r2,255
  817548:	1080201c 	xori	r2,r2,128
  81754c:	10bfe004 	addi	r2,r2,-128
  817550:	10800be0 	cmpeqi	r2,r2,47
  817554:	1000061e 	bne	r2,zero,817570 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  817558:	e0bffe17 	ldw	r2,-8(fp)
  81755c:	10800044 	addi	r2,r2,1
  817560:	e0bffe15 	stw	r2,-8(fp)
  817564:	e0fffe17 	ldw	r3,-8(fp)
  817568:	e0bffd17 	ldw	r2,-12(fp)
  81756c:	18bfe616 	blt	r3,r2,817508 <get_dir_divider_location+0x2c>
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
  817570:	e0fffe17 	ldw	r3,-8(fp)
  817574:	e0bffd17 	ldw	r2,-12(fp)
  817578:	1880021e 	bne	r3,r2,817584 <get_dir_divider_location+0xa8>
		index = -1;
  81757c:	00bfffc4 	movi	r2,-1
  817580:	e0bffe15 	stw	r2,-8(fp)
	}

	return index;
  817584:	e0bffe17 	ldw	r2,-8(fp)
}
  817588:	e037883a 	mov	sp,fp
  81758c:	dfc00117 	ldw	ra,4(sp)
  817590:	df000017 	ldw	fp,0(sp)
  817594:	dec00204 	addi	sp,sp,8
  817598:	f800283a 	ret

0081759c <match_file_record_to_name_ext>:

bool match_file_record_to_name_ext(t_file_record *file_record, char *name,
		char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
  81759c:	defff604 	addi	sp,sp,-40
  8175a0:	df000915 	stw	fp,36(sp)
  8175a4:	df000904 	addi	fp,sp,36
  8175a8:	e13ff915 	stw	r4,-28(fp)
  8175ac:	e17ffa15 	stw	r5,-24(fp)
  8175b0:	e1bffb15 	stw	r6,-20(fp)
	bool match = true;
  8175b4:	00800044 	movi	r2,1
  8175b8:	e0bff815 	stw	r2,-32(fp)
	int index;

	for (index = 0; index < 8; index++) {
  8175bc:	e03ff715 	stw	zero,-36(fp)
  8175c0:	00005006 	br	817704 <match_file_record_to_name_ext+0x168>
		if (CHAR_TO_UPPER(file_record->name[index])
  8175c4:	e0fff717 	ldw	r3,-36(fp)
  8175c8:	e0bff917 	ldw	r2,-28(fp)
  8175cc:	10c5883a 	add	r2,r2,r3
  8175d0:	10800003 	ldbu	r2,0(r2)
  8175d4:	10803fcc 	andi	r2,r2,255
  8175d8:	10801870 	cmpltui	r2,r2,97
  8175dc:	1000111e 	bne	r2,zero,817624 <match_file_record_to_name_ext+0x88>
  8175e0:	e0fff717 	ldw	r3,-36(fp)
  8175e4:	e0bff917 	ldw	r2,-28(fp)
  8175e8:	10c5883a 	add	r2,r2,r3
  8175ec:	10800003 	ldbu	r2,0(r2)
  8175f0:	10803fcc 	andi	r2,r2,255
  8175f4:	10801ee8 	cmpgeui	r2,r2,123
  8175f8:	10000a1e 	bne	r2,zero,817624 <match_file_record_to_name_ext+0x88>
  8175fc:	e0fff717 	ldw	r3,-36(fp)
  817600:	e0bff917 	ldw	r2,-28(fp)
  817604:	10c5883a 	add	r2,r2,r3
  817608:	10800003 	ldbu	r2,0(r2)
  81760c:	10bff804 	addi	r2,r2,-32
  817610:	10803fcc 	andi	r2,r2,255
  817614:	1080201c 	xori	r2,r2,128
  817618:	10bfe004 	addi	r2,r2,-128
  81761c:	e0bfff15 	stw	r2,-4(fp)
  817620:	00000806 	br	817644 <match_file_record_to_name_ext+0xa8>
  817624:	e0fff717 	ldw	r3,-36(fp)
  817628:	e0bff917 	ldw	r2,-28(fp)
  81762c:	10c5883a 	add	r2,r2,r3
  817630:	10800003 	ldbu	r2,0(r2)
  817634:	10803fcc 	andi	r2,r2,255
  817638:	1080201c 	xori	r2,r2,128
  81763c:	10bfe004 	addi	r2,r2,-128
  817640:	e0bfff15 	stw	r2,-4(fp)
  817644:	e0bff717 	ldw	r2,-36(fp)
  817648:	1007883a 	mov	r3,r2
  81764c:	e0bffa17 	ldw	r2,-24(fp)
  817650:	1885883a 	add	r2,r3,r2
  817654:	10800003 	ldbu	r2,0(r2)
  817658:	10803fcc 	andi	r2,r2,255
  81765c:	1080201c 	xori	r2,r2,128
  817660:	10bfe004 	addi	r2,r2,-128
  817664:	10801850 	cmplti	r2,r2,97
  817668:	1000151e 	bne	r2,zero,8176c0 <match_file_record_to_name_ext+0x124>
  81766c:	e0bff717 	ldw	r2,-36(fp)
  817670:	1007883a 	mov	r3,r2
  817674:	e0bffa17 	ldw	r2,-24(fp)
  817678:	1885883a 	add	r2,r3,r2
  81767c:	10800003 	ldbu	r2,0(r2)
  817680:	10803fcc 	andi	r2,r2,255
  817684:	1080201c 	xori	r2,r2,128
  817688:	10bfe004 	addi	r2,r2,-128
  81768c:	10801ec8 	cmpgei	r2,r2,123
  817690:	10000b1e 	bne	r2,zero,8176c0 <match_file_record_to_name_ext+0x124>
  817694:	e0bff717 	ldw	r2,-36(fp)
  817698:	1007883a 	mov	r3,r2
  81769c:	e0bffa17 	ldw	r2,-24(fp)
  8176a0:	1885883a 	add	r2,r3,r2
  8176a4:	10800003 	ldbu	r2,0(r2)
  8176a8:	10bff804 	addi	r2,r2,-32
  8176ac:	10803fcc 	andi	r2,r2,255
  8176b0:	1080201c 	xori	r2,r2,128
  8176b4:	10bfe004 	addi	r2,r2,-128
  8176b8:	e0bffe15 	stw	r2,-8(fp)
  8176bc:	00000906 	br	8176e4 <match_file_record_to_name_ext+0x148>
  8176c0:	e0bff717 	ldw	r2,-36(fp)
  8176c4:	1007883a 	mov	r3,r2
  8176c8:	e0bffa17 	ldw	r2,-24(fp)
  8176cc:	1885883a 	add	r2,r3,r2
  8176d0:	10800003 	ldbu	r2,0(r2)
  8176d4:	10803fcc 	andi	r2,r2,255
  8176d8:	1080201c 	xori	r2,r2,128
  8176dc:	10bfe004 	addi	r2,r2,-128
  8176e0:	e0bffe15 	stw	r2,-8(fp)
  8176e4:	e0bfff17 	ldw	r2,-4(fp)
  8176e8:	e0fffe17 	ldw	r3,-8(fp)
  8176ec:	10c00226 	beq	r2,r3,8176f8 <match_file_record_to_name_ext+0x15c>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
  8176f0:	e03ff815 	stw	zero,-32(fp)
			break;
  8176f4:	00000606 	br	817710 <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
  8176f8:	e0bff717 	ldw	r2,-36(fp)
  8176fc:	10800044 	addi	r2,r2,1
  817700:	e0bff715 	stw	r2,-36(fp)
  817704:	e0bff717 	ldw	r2,-36(fp)
  817708:	10800210 	cmplti	r2,r2,8
  81770c:	103fad1e 	bne	r2,zero,8175c4 <match_file_record_to_name_ext+0x28>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
  817710:	e03ff715 	stw	zero,-36(fp)
  817714:	00005406 	br	817868 <match_file_record_to_name_ext+0x2cc>
		if (CHAR_TO_UPPER(file_record->extension[index])
  817718:	e0fff717 	ldw	r3,-36(fp)
  81771c:	e0bff917 	ldw	r2,-28(fp)
  817720:	1885883a 	add	r2,r3,r2
  817724:	10800204 	addi	r2,r2,8
  817728:	10800003 	ldbu	r2,0(r2)
  81772c:	10803fcc 	andi	r2,r2,255
  817730:	10801870 	cmpltui	r2,r2,97
  817734:	1000131e 	bne	r2,zero,817784 <match_file_record_to_name_ext+0x1e8>
  817738:	e0fff717 	ldw	r3,-36(fp)
  81773c:	e0bff917 	ldw	r2,-28(fp)
  817740:	1885883a 	add	r2,r3,r2
  817744:	10800204 	addi	r2,r2,8
  817748:	10800003 	ldbu	r2,0(r2)
  81774c:	10803fcc 	andi	r2,r2,255
  817750:	10801ee8 	cmpgeui	r2,r2,123
  817754:	10000b1e 	bne	r2,zero,817784 <match_file_record_to_name_ext+0x1e8>
  817758:	e0fff717 	ldw	r3,-36(fp)
  81775c:	e0bff917 	ldw	r2,-28(fp)
  817760:	1885883a 	add	r2,r3,r2
  817764:	10800204 	addi	r2,r2,8
  817768:	10800003 	ldbu	r2,0(r2)
  81776c:	10bff804 	addi	r2,r2,-32
  817770:	10803fcc 	andi	r2,r2,255
  817774:	1080201c 	xori	r2,r2,128
  817778:	10bfe004 	addi	r2,r2,-128
  81777c:	e0bffd15 	stw	r2,-12(fp)
  817780:	00000906 	br	8177a8 <match_file_record_to_name_ext+0x20c>
  817784:	e0fff717 	ldw	r3,-36(fp)
  817788:	e0bff917 	ldw	r2,-28(fp)
  81778c:	1885883a 	add	r2,r3,r2
  817790:	10800204 	addi	r2,r2,8
  817794:	10800003 	ldbu	r2,0(r2)
  817798:	10803fcc 	andi	r2,r2,255
  81779c:	1080201c 	xori	r2,r2,128
  8177a0:	10bfe004 	addi	r2,r2,-128
  8177a4:	e0bffd15 	stw	r2,-12(fp)
  8177a8:	e0bff717 	ldw	r2,-36(fp)
  8177ac:	1007883a 	mov	r3,r2
  8177b0:	e0bffb17 	ldw	r2,-20(fp)
  8177b4:	1885883a 	add	r2,r3,r2
  8177b8:	10800003 	ldbu	r2,0(r2)
  8177bc:	10803fcc 	andi	r2,r2,255
  8177c0:	1080201c 	xori	r2,r2,128
  8177c4:	10bfe004 	addi	r2,r2,-128
  8177c8:	10801850 	cmplti	r2,r2,97
  8177cc:	1000151e 	bne	r2,zero,817824 <match_file_record_to_name_ext+0x288>
  8177d0:	e0bff717 	ldw	r2,-36(fp)
  8177d4:	1007883a 	mov	r3,r2
  8177d8:	e0bffb17 	ldw	r2,-20(fp)
  8177dc:	1885883a 	add	r2,r3,r2
  8177e0:	10800003 	ldbu	r2,0(r2)
  8177e4:	10803fcc 	andi	r2,r2,255
  8177e8:	1080201c 	xori	r2,r2,128
  8177ec:	10bfe004 	addi	r2,r2,-128
  8177f0:	10801ec8 	cmpgei	r2,r2,123
  8177f4:	10000b1e 	bne	r2,zero,817824 <match_file_record_to_name_ext+0x288>
  8177f8:	e0bff717 	ldw	r2,-36(fp)
  8177fc:	1007883a 	mov	r3,r2
  817800:	e0bffb17 	ldw	r2,-20(fp)
  817804:	1885883a 	add	r2,r3,r2
  817808:	10800003 	ldbu	r2,0(r2)
  81780c:	10bff804 	addi	r2,r2,-32
  817810:	10803fcc 	andi	r2,r2,255
  817814:	1080201c 	xori	r2,r2,128
  817818:	10bfe004 	addi	r2,r2,-128
  81781c:	e0bffc15 	stw	r2,-16(fp)
  817820:	00000906 	br	817848 <match_file_record_to_name_ext+0x2ac>
  817824:	e0bff717 	ldw	r2,-36(fp)
  817828:	1007883a 	mov	r3,r2
  81782c:	e0bffb17 	ldw	r2,-20(fp)
  817830:	1885883a 	add	r2,r3,r2
  817834:	10800003 	ldbu	r2,0(r2)
  817838:	10803fcc 	andi	r2,r2,255
  81783c:	1080201c 	xori	r2,r2,128
  817840:	10bfe004 	addi	r2,r2,-128
  817844:	e0bffc15 	stw	r2,-16(fp)
  817848:	e0bffd17 	ldw	r2,-12(fp)
  81784c:	e0fffc17 	ldw	r3,-16(fp)
  817850:	10c00226 	beq	r2,r3,81785c <match_file_record_to_name_ext+0x2c0>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
  817854:	e03ff815 	stw	zero,-32(fp)
			break;
  817858:	00000606 	br	817874 <match_file_record_to_name_ext+0x2d8>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
  81785c:	e0bff717 	ldw	r2,-36(fp)
  817860:	10800044 	addi	r2,r2,1
  817864:	e0bff715 	stw	r2,-36(fp)
  817868:	e0bff717 	ldw	r2,-36(fp)
  81786c:	108000d0 	cmplti	r2,r2,3
  817870:	103fa91e 	bne	r2,zero,817718 <match_file_record_to_name_ext+0x17c>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
			break;
		}
	}
	return match;
  817874:	e0bff817 	ldw	r2,-32(fp)
}
  817878:	e037883a 	mov	sp,fp
  81787c:	df000017 	ldw	fp,0(sp)
  817880:	dec00104 	addi	sp,sp,4
  817884:	f800283a 	ret

00817888 <get_home_directory_cluster_for_file>:

bool get_home_directory_cluster_for_file(char *file_name,
		int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
  817888:	deffe604 	addi	sp,sp,-104
  81788c:	dfc01915 	stw	ra,100(sp)
  817890:	df001815 	stw	fp,96(sp)
  817894:	df001804 	addi	fp,sp,96
  817898:	e13ffc15 	stw	r4,-16(fp)
  81789c:	e17ffd15 	stw	r5,-12(fp)
  8178a0:	e1bffe15 	stw	r6,-8(fp)
	bool result = false;
  8178a4:	e03ff715 	stw	zero,-36(fp)
	int home_dir_cluster = 0;
  8178a8:	e03ff615 	stw	zero,-40(fp)
	int location, index;
	int start_location = 0;
  8178ac:	e03ff315 	stw	zero,-52(fp)

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
  8178b0:	e13ffc17 	ldw	r4,-16(fp)
  8178b4:	08174dc0 	call	8174dc <get_dir_divider_location>
  8178b8:	e0bff515 	stw	r2,-44(fp)
	while (location > 0) {
  8178bc:	00012206 	br	817d48 <get_home_directory_cluster_for_file+0x4c0>
		char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  8178c0:	00800804 	movi	r2,32
  8178c4:	e0bff805 	stb	r2,-32(fp)
  8178c8:	00800804 	movi	r2,32
  8178cc:	e0bff845 	stb	r2,-31(fp)
  8178d0:	00800804 	movi	r2,32
  8178d4:	e0bff885 	stb	r2,-30(fp)
  8178d8:	00800804 	movi	r2,32
  8178dc:	e0bff8c5 	stb	r2,-29(fp)
  8178e0:	00800804 	movi	r2,32
  8178e4:	e0bff905 	stb	r2,-28(fp)
  8178e8:	00800804 	movi	r2,32
  8178ec:	e0bff945 	stb	r2,-27(fp)
  8178f0:	00800804 	movi	r2,32
  8178f4:	e0bff985 	stb	r2,-26(fp)
  8178f8:	00800804 	movi	r2,32
  8178fc:	e0bff9c5 	stb	r2,-25(fp)
		char extension[3] = { ' ', ' ', ' ' };
  817900:	00800804 	movi	r2,32
  817904:	e0bffa05 	stb	r2,-24(fp)
  817908:	00800804 	movi	r2,32
  81790c:	e0bffa45 	stb	r2,-23(fp)
  817910:	00800804 	movi	r2,32
  817914:	e0bffa85 	stb	r2,-22(fp)
		int ext_index = -1;
  817918:	00bfffc4 	movi	r2,-1
  81791c:	e0bff215 	stw	r2,-56(fp)
		int new_cluster = home_dir_cluster;
  817920:	e0bff617 	ldw	r2,-40(fp)
  817924:	e0bff115 	stw	r2,-60(fp)

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
  817928:	e03ff415 	stw	zero,-48(fp)
  81792c:	00002e06 	br	8179e8 <get_home_directory_cluster_for_file+0x160>
			if (file_name[index + start_location] == '.') {
  817930:	e0fff417 	ldw	r3,-48(fp)
  817934:	e0bff317 	ldw	r2,-52(fp)
  817938:	1885883a 	add	r2,r3,r2
  81793c:	1007883a 	mov	r3,r2
  817940:	e0bffc17 	ldw	r2,-16(fp)
  817944:	1885883a 	add	r2,r3,r2
  817948:	10800003 	ldbu	r2,0(r2)
  81794c:	10803fcc 	andi	r2,r2,255
  817950:	1080201c 	xori	r2,r2,128
  817954:	10bfe004 	addi	r2,r2,-128
  817958:	10800b98 	cmpnei	r2,r2,46
  81795c:	1000031e 	bne	r2,zero,81796c <get_home_directory_cluster_for_file+0xe4>
				ext_index = index;
  817960:	e0bff417 	ldw	r2,-48(fp)
  817964:	e0bff215 	stw	r2,-56(fp)
  817968:	00001c06 	br	8179dc <get_home_directory_cluster_for_file+0x154>
			} else if (ext_index < 0) {
  81796c:	e0bff217 	ldw	r2,-56(fp)
  817970:	1004403a 	cmpge	r2,r2,zero
  817974:	10000c1e 	bne	r2,zero,8179a8 <get_home_directory_cluster_for_file+0x120>
				name[index] = file_name[index + start_location];
  817978:	e13ff417 	ldw	r4,-48(fp)
  81797c:	e0fff417 	ldw	r3,-48(fp)
  817980:	e0bff317 	ldw	r2,-52(fp)
  817984:	1885883a 	add	r2,r3,r2
  817988:	1007883a 	mov	r3,r2
  81798c:	e0bffc17 	ldw	r2,-16(fp)
  817990:	1885883a 	add	r2,r3,r2
  817994:	10c00003 	ldbu	r3,0(r2)
  817998:	e0bff804 	addi	r2,fp,-32
  81799c:	1105883a 	add	r2,r2,r4
  8179a0:	10c00005 	stb	r3,0(r2)
  8179a4:	00000d06 	br	8179dc <get_home_directory_cluster_for_file+0x154>
			} else {
				extension[index - ext_index]
  8179a8:	e0fff417 	ldw	r3,-48(fp)
  8179ac:	e0bff217 	ldw	r2,-56(fp)
  8179b0:	1889c83a 	sub	r4,r3,r2
  8179b4:	e0fff417 	ldw	r3,-48(fp)
  8179b8:	e0bff317 	ldw	r2,-52(fp)
  8179bc:	1885883a 	add	r2,r3,r2
  8179c0:	1007883a 	mov	r3,r2
  8179c4:	e0bffc17 	ldw	r2,-16(fp)
  8179c8:	1885883a 	add	r2,r3,r2
  8179cc:	10c00003 	ldbu	r3,0(r2)
  8179d0:	e0bffa04 	addi	r2,fp,-24
  8179d4:	1105883a 	add	r2,r2,r4
  8179d8:	10c00005 	stb	r3,0(r2)
		char extension[3] = { ' ', ' ', ' ' };
		int ext_index = -1;
		int new_cluster = home_dir_cluster;

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
  8179dc:	e0bff417 	ldw	r2,-48(fp)
  8179e0:	10800044 	addi	r2,r2,1
  8179e4:	e0bff415 	stw	r2,-48(fp)
  8179e8:	e0fff417 	ldw	r3,-48(fp)
  8179ec:	e0bff517 	ldw	r2,-44(fp)
  8179f0:	18bfcf16 	blt	r3,r2,817930 <get_home_directory_cluster_for_file+0xa8>
				extension[index - ext_index]
						= file_name[index + start_location];
			}
		}

		if (home_dir_cluster == 0) {
  8179f4:	e0bff617 	ldw	r2,-40(fp)
  8179f8:	1004c03a 	cmpne	r2,r2,zero
  8179fc:	1000551e 	bne	r2,zero,817b54 <get_home_directory_cluster_for_file+0x2cc>
			/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
  817a00:	008020b4 	movhi	r2,130
  817a04:	1089f304 	addi	r2,r2,10188
  817a08:	1080050b 	ldhu	r2,20(r2)
  817a0c:	10bfffcc 	andi	r2,r2,65535
  817a10:	1008917a 	slli	r4,r2,5
  817a14:	008020b4 	movhi	r2,130
  817a18:	1089f304 	addi	r2,r2,10188
  817a1c:	1080030b 	ldhu	r2,12(r2)
  817a20:	117fffcc 	andi	r5,r2,65535
  817a24:	08085980 	call	808598 <__divsi3>
  817a28:	e0bff015 	stw	r2,-64(fp)
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  817a2c:	e03fef15 	stw	zero,-68(fp)
  817a30:	00003806 	br	817b14 <get_home_directory_cluster_for_file+0x28c>
				if (Read_Sector_Data(sector_index
  817a34:	008020b4 	movhi	r2,130
  817a38:	1089f304 	addi	r2,r2,10188
  817a3c:	10c01317 	ldw	r3,76(r2)
  817a40:	e0bfef17 	ldw	r2,-68(fp)
  817a44:	1885883a 	add	r2,r3,r2
  817a48:	1009883a 	mov	r4,r2
  817a4c:	d1674e17 	ldw	r5,-25288(gp)
  817a50:	08160ac0 	call	8160ac <Read_Sector_Data>
  817a54:	1005003a 	cmpeq	r2,r2,zero
  817a58:	1000311e 	bne	r2,zero,817b20 <get_home_directory_cluster_for_file+0x298>
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  817a5c:	e03fee15 	stw	zero,-72(fp)
  817a60:	00002306 	br	817af0 <get_home_directory_cluster_for_file+0x268>

						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
  817a64:	e0bfee17 	ldw	r2,-72(fp)
  817a68:	1008917a 	slli	r4,r2,5
  817a6c:	e1ffef17 	ldw	r7,-68(fp)
  817a70:	e17ffe17 	ldw	r5,-8(fp)
  817a74:	000d883a 	mov	r6,zero
  817a78:	08164f40 	call	8164f4 <Read_File_Record_At_Offset>
								file_record, 0, sector_index);
						if ((file_record->name[0] != 0xe5)
  817a7c:	e0bffe17 	ldw	r2,-8(fp)
  817a80:	10800003 	ldbu	r2,0(r2)
  817a84:	10803fcc 	andi	r2,r2,255
  817a88:	10803960 	cmpeqi	r2,r2,229
  817a8c:	1000151e 	bne	r2,zero,817ae4 <get_home_directory_cluster_for_file+0x25c>
  817a90:	e0bffe17 	ldw	r2,-8(fp)
  817a94:	10800003 	ldbu	r2,0(r2)
  817a98:	10803fcc 	andi	r2,r2,255
  817a9c:	1005003a 	cmpeq	r2,r2,zero
  817aa0:	1000101e 	bne	r2,zero,817ae4 <get_home_directory_cluster_for_file+0x25c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
  817aa4:	e17ff804 	addi	r5,fp,-32
  817aa8:	e1bffa04 	addi	r6,fp,-24
  817aac:	e13ffe17 	ldw	r4,-8(fp)
  817ab0:	081759c0 	call	81759c <match_file_record_to_name_ext>
  817ab4:	e0bfed15 	stw	r2,-76(fp)
							if (match) {
  817ab8:	e0bfed17 	ldw	r2,-76(fp)
  817abc:	1005003a 	cmpeq	r2,r2,zero
  817ac0:	1000081e 	bne	r2,zero,817ae4 <get_home_directory_cluster_for_file+0x25c>
								new_cluster = file_record->start_cluster_index;
  817ac4:	e0bffe17 	ldw	r2,-8(fp)
  817ac8:	1080058b 	ldhu	r2,22(r2)
  817acc:	10bfffcc 	andi	r2,r2,65535
  817ad0:	e0bff115 	stw	r2,-60(fp)
								file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
  817ad4:	e0fffe17 	ldw	r3,-8(fp)
  817ad8:	00800044 	movi	r2,1
  817adc:	18800a15 	stw	r2,40(r3)
								break;
  817ae0:	00000606 	br	817afc <get_home_directory_cluster_for_file+0x274>
				if (Read_Sector_Data(sector_index
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  817ae4:	e0bfee17 	ldw	r2,-72(fp)
  817ae8:	10800044 	addi	r2,r2,1
  817aec:	e0bfee15 	stw	r2,-72(fp)
  817af0:	e0bfee17 	ldw	r2,-72(fp)
  817af4:	10800410 	cmplti	r2,r2,16
  817af8:	103fda1e 	bne	r2,zero,817a64 <get_home_directory_cluster_for_file+0x1dc>
						}
					}
				} else {
					break;
				}
				if (new_cluster != home_dir_cluster) {
  817afc:	e0fff117 	ldw	r3,-60(fp)
  817b00:	e0bff617 	ldw	r2,-40(fp)
  817b04:	1880061e 	bne	r3,r2,817b20 <get_home_directory_cluster_for_file+0x298>
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  817b08:	e0bfef17 	ldw	r2,-68(fp)
  817b0c:	10800044 	addi	r2,r2,1
  817b10:	e0bfef15 	stw	r2,-68(fp)
  817b14:	e0ffef17 	ldw	r3,-68(fp)
  817b18:	e0bff017 	ldw	r2,-64(fp)
  817b1c:	18bfc516 	blt	r3,r2,817a34 <get_home_directory_cluster_for_file+0x1ac>
				}
				if (new_cluster != home_dir_cluster) {
					break;
				}
			}
			if (new_cluster != home_dir_cluster) {
  817b20:	e0fff117 	ldw	r3,-60(fp)
  817b24:	e0bff617 	ldw	r2,-40(fp)
  817b28:	18800826 	beq	r3,r2,817b4c <get_home_directory_cluster_for_file+0x2c4>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
  817b2c:	e0bff117 	ldw	r2,-60(fp)
  817b30:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
  817b34:	e0fff317 	ldw	r3,-52(fp)
  817b38:	e0bff517 	ldw	r2,-44(fp)
  817b3c:	1885883a 	add	r2,r3,r2
  817b40:	10800044 	addi	r2,r2,1
  817b44:	e0bff315 	stw	r2,-52(fp)
  817b48:	00007406 	br	817d1c <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
  817b4c:	e03fff15 	stw	zero,-4(fp)
  817b50:	00008c06 	br	817d84 <get_home_directory_cluster_for_file+0x4fc>
			}
		} else {
			// This is a subdirectory that can have any number of elements. So scan through it as though it was a file
			// and see if you can find the directory of interest.
			int cluster = home_dir_cluster;
  817b54:	e0bff617 	ldw	r2,-40(fp)
  817b58:	e0bfec15 	stw	r2,-80(fp)

			do {
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
  817b5c:	e0bfec17 	ldw	r2,-80(fp)
  817b60:	10ffff84 	addi	r3,r2,-2
  817b64:	008020b4 	movhi	r2,130
  817b68:	1089f304 	addi	r2,r2,10188
  817b6c:	10800383 	ldbu	r2,14(r2)
  817b70:	10803fcc 	andi	r2,r2,255
  817b74:	1885383a 	mul	r2,r3,r2
  817b78:	1007883a 	mov	r3,r2
  817b7c:	008020b4 	movhi	r2,130
  817b80:	1089f304 	addi	r2,r2,10188
  817b84:	10801417 	ldw	r2,80(r2)
  817b88:	1885883a 	add	r2,r3,r2
  817b8c:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index;

				for (sector_index = 0; sector_index
  817b90:	e03fea15 	stw	zero,-88(fp)
  817b94:	00003206 	br	817c60 <get_home_directory_cluster_for_file+0x3d8>
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
  817b98:	e0ffea17 	ldw	r3,-88(fp)
  817b9c:	e0bfeb17 	ldw	r2,-84(fp)
  817ba0:	1889883a 	add	r4,r3,r2
  817ba4:	d1674e17 	ldw	r5,-25288(gp)
  817ba8:	08160ac0 	call	8160ac <Read_Sector_Data>
  817bac:	1005003a 	cmpeq	r2,r2,zero
  817bb0:	1000311e 	bne	r2,zero,817c78 <get_home_directory_cluster_for_file+0x3f0>
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
  817bb4:	e03fe915 	stw	zero,-92(fp)
  817bb8:	00002006 	br	817c3c <get_home_directory_cluster_for_file+0x3b4>
							// Read file record.
							Read_File_Record_At_Offset(file_counter * 32,
  817bbc:	e0bfe917 	ldw	r2,-92(fp)
  817bc0:	1008917a 	slli	r4,r2,5
  817bc4:	e1bfec17 	ldw	r6,-80(fp)
  817bc8:	e1ffea17 	ldw	r7,-88(fp)
  817bcc:	e17ffe17 	ldw	r5,-8(fp)
  817bd0:	08164f40 	call	8164f4 <Read_File_Record_At_Offset>
									file_record, cluster, sector_index);
							if ((file_record->name[0] != 0xe5)
  817bd4:	e0bffe17 	ldw	r2,-8(fp)
  817bd8:	10800003 	ldbu	r2,0(r2)
  817bdc:	10803fcc 	andi	r2,r2,255
  817be0:	10803960 	cmpeqi	r2,r2,229
  817be4:	1000121e 	bne	r2,zero,817c30 <get_home_directory_cluster_for_file+0x3a8>
  817be8:	e0bffe17 	ldw	r2,-8(fp)
  817bec:	10800003 	ldbu	r2,0(r2)
  817bf0:	10803fcc 	andi	r2,r2,255
  817bf4:	1005003a 	cmpeq	r2,r2,zero
  817bf8:	10000d1e 	bne	r2,zero,817c30 <get_home_directory_cluster_for_file+0x3a8>
									&& (file_record->name[0] != 0x00)) {
								bool match = match_file_record_to_name_ext(
										file_record, name, extension);
  817bfc:	e17ff804 	addi	r5,fp,-32
  817c00:	e1bffa04 	addi	r6,fp,-24
  817c04:	e13ffe17 	ldw	r4,-8(fp)
  817c08:	081759c0 	call	81759c <match_file_record_to_name_ext>
  817c0c:	e0bfe815 	stw	r2,-96(fp)
								if (match) {
  817c10:	e0bfe817 	ldw	r2,-96(fp)
  817c14:	1005003a 	cmpeq	r2,r2,zero
  817c18:	1000051e 	bne	r2,zero,817c30 <get_home_directory_cluster_for_file+0x3a8>
									new_cluster
  817c1c:	e0bffe17 	ldw	r2,-8(fp)
  817c20:	1080058b 	ldhu	r2,22(r2)
  817c24:	10bfffcc 	andi	r2,r2,65535
  817c28:	e0bff115 	stw	r2,-60(fp)
											= file_record->start_cluster_index;
									break;
  817c2c:	00000606 	br	817c48 <get_home_directory_cluster_for_file+0x3c0>
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
  817c30:	e0bfe917 	ldw	r2,-92(fp)
  817c34:	10800044 	addi	r2,r2,1
  817c38:	e0bfe915 	stw	r2,-92(fp)
  817c3c:	e0bfe917 	ldw	r2,-92(fp)
  817c40:	10800410 	cmplti	r2,r2,16
  817c44:	103fdd1e 	bne	r2,zero,817bbc <get_home_directory_cluster_for_file+0x334>
							}
						}
					} else {
						break;
					}
					if (new_cluster != home_dir_cluster) {
  817c48:	e0fff117 	ldw	r3,-60(fp)
  817c4c:	e0bff617 	ldw	r2,-40(fp)
  817c50:	1880091e 	bne	r3,r2,817c78 <get_home_directory_cluster_for_file+0x3f0>
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
						< boot_sector_data.sectors_per_cluster; sector_index++) {
  817c54:	e0bfea17 	ldw	r2,-88(fp)
  817c58:	10800044 	addi	r2,r2,1
  817c5c:	e0bfea15 	stw	r2,-88(fp)
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
  817c60:	008020b4 	movhi	r2,130
  817c64:	1089f304 	addi	r2,r2,10188
  817c68:	10800383 	ldbu	r2,14(r2)
  817c6c:	10c03fcc 	andi	r3,r2,255
  817c70:	e0bfea17 	ldw	r2,-88(fp)
  817c74:	10ffc816 	blt	r2,r3,817b98 <get_home_directory_cluster_for_file+0x310>
						break;
					}
				}
				// If this is the end of the cluster and the directory has not been found, then see if there is another cluster
				// that holds data for the current directory.
				if (new_cluster == home_dir_cluster) {
  817c78:	e0fff117 	ldw	r3,-60(fp)
  817c7c:	e0bff617 	ldw	r2,-40(fp)
  817c80:	1880131e 	bne	r3,r2,817cd0 <get_home_directory_cluster_for_file+0x448>
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster)) {
  817c84:	e13ff117 	ldw	r4,-60(fp)
  817c88:	e17ffb04 	addi	r5,fp,-20
  817c8c:	08161a80 	call	8161a8 <get_cluster_flag>
  817c90:	1005003a 	cmpeq	r2,r2,zero
  817c94:	10000c1e 	bne	r2,zero,817cc8 <get_home_directory_cluster_for_file+0x440>
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
  817c98:	e0bffb0b 	ldhu	r2,-20(fp)
  817c9c:	10bfffcc 	andi	r2,r2,65535
  817ca0:	10fffe0c 	andi	r3,r2,65528
  817ca4:	00bffe14 	movui	r2,65528
  817ca8:	1880021e 	bne	r3,r2,817cb4 <get_home_directory_cluster_for_file+0x42c>
							return false;
  817cac:	e03fff15 	stw	zero,-4(fp)
  817cb0:	00003406 	br	817d84 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
  817cb4:	e0bffb0b 	ldhu	r2,-20(fp)
  817cb8:	10bfffcc 	andi	r2,r2,65535
  817cbc:	10bffe0c 	andi	r2,r2,65528
  817cc0:	e0bff115 	stw	r2,-60(fp)
  817cc4:	00000206 	br	817cd0 <get_home_directory_cluster_for_file+0x448>
					} else {
						// Directory path is invalid.                 
						return false;
  817cc8:	e03fff15 	stw	zero,-4(fp)
  817ccc:	00002d06 	br	817d84 <get_home_directory_cluster_for_file+0x4fc>
					}
				}
			} while ((cluster < 0x0000fff8)
					&& (new_cluster == home_dir_cluster));
  817cd0:	e0ffec17 	ldw	r3,-80(fp)
  817cd4:	00bffdd4 	movui	r2,65527
  817cd8:	10c00316 	blt	r2,r3,817ce8 <get_home_directory_cluster_for_file+0x460>
  817cdc:	e0fff117 	ldw	r3,-60(fp)
  817ce0:	e0bff617 	ldw	r2,-40(fp)
  817ce4:	18bf9d26 	beq	r3,r2,817b5c <get_home_directory_cluster_for_file+0x2d4>
			if (new_cluster != home_dir_cluster) {
  817ce8:	e0fff117 	ldw	r3,-60(fp)
  817cec:	e0bff617 	ldw	r2,-40(fp)
  817cf0:	18800826 	beq	r3,r2,817d14 <get_home_directory_cluster_for_file+0x48c>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
  817cf4:	e0bff117 	ldw	r2,-60(fp)
  817cf8:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
  817cfc:	e0fff317 	ldw	r3,-52(fp)
  817d00:	e0bff517 	ldw	r2,-44(fp)
  817d04:	1885883a 	add	r2,r3,r2
  817d08:	10800044 	addi	r2,r2,1
  817d0c:	e0bff315 	stw	r2,-52(fp)
  817d10:	00000206 	br	817d1c <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
  817d14:	e03fff15 	stw	zero,-4(fp)
  817d18:	00001a06 	br	817d84 <get_home_directory_cluster_for_file+0x4fc>
			}
		}
		location = get_dir_divider_location(&(file_name[start_location]));
  817d1c:	e0bff317 	ldw	r2,-52(fp)
  817d20:	1007883a 	mov	r3,r2
  817d24:	e0bffc17 	ldw	r2,-16(fp)
  817d28:	1889883a 	add	r4,r3,r2
  817d2c:	08174dc0 	call	8174dc <get_dir_divider_location>
  817d30:	e0bff515 	stw	r2,-44(fp)
		if (location < 0) {
  817d34:	e0bff517 	ldw	r2,-44(fp)
  817d38:	1004403a 	cmpge	r2,r2,zero
  817d3c:	1000021e 	bne	r2,zero,817d48 <get_home_directory_cluster_for_file+0x4c0>
			// Directory has been located.
			result = true;
  817d40:	00800044 	movi	r2,1
  817d44:	e0bff715 	stw	r2,-36(fp)
	int location, index;
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
  817d48:	e0bff517 	ldw	r2,-44(fp)
  817d4c:	10800048 	cmpgei	r2,r2,1
  817d50:	103edb1e 	bne	r2,zero,8178c0 <get_home_directory_cluster_for_file+0x38>
			// Directory has been located.
			result = true;
		}
	}

	*home_directory_cluster = home_dir_cluster;
  817d54:	e0fffd17 	ldw	r3,-12(fp)
  817d58:	e0bff617 	ldw	r2,-40(fp)
  817d5c:	18800015 	stw	r2,0(r3)
	if (home_dir_cluster == 0) {
  817d60:	e0bff617 	ldw	r2,-40(fp)
  817d64:	1004c03a 	cmpne	r2,r2,zero
  817d68:	1000041e 	bne	r2,zero,817d7c <get_home_directory_cluster_for_file+0x4f4>
		file_record->file_record_cluster = 0; // Home directory is the root directory.
  817d6c:	e0bffe17 	ldw	r2,-8(fp)
  817d70:	10000a15 	stw	zero,40(r2)
		result = true;
  817d74:	00800044 	movi	r2,1
  817d78:	e0bff715 	stw	r2,-36(fp)
	}
	return result;
  817d7c:	e0bff717 	ldw	r2,-36(fp)
  817d80:	e0bfff15 	stw	r2,-4(fp)
  817d84:	e0bfff17 	ldw	r2,-4(fp)
}
  817d88:	e037883a 	mov	sp,fp
  817d8c:	dfc00117 	ldw	ra,4(sp)
  817d90:	df000017 	ldw	fp,0(sp)
  817d94:	dec00204 	addi	sp,sp,8
  817d98:	f800283a 	ret

00817d9c <find_file_in_directory>:

bool find_file_in_directory(int directory_start_cluster, char *file_name,
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  817d9c:	deffe704 	addi	sp,sp,-100
  817da0:	dfc01815 	stw	ra,96(sp)
  817da4:	df001715 	stw	fp,92(sp)
  817da8:	df001704 	addi	fp,sp,92
  817dac:	e13ffc15 	stw	r4,-16(fp)
  817db0:	e17ffd15 	stw	r5,-12(fp)
  817db4:	e1bffe15 	stw	r6,-8(fp)
	int location = get_dir_divider_location(file_name);
  817db8:	e13ffd17 	ldw	r4,-12(fp)
  817dbc:	08174dc0 	call	8174dc <get_dir_divider_location>
  817dc0:	e0bff715 	stw	r2,-36(fp)
	int last_dir_separator = 0;
  817dc4:	e03ff615 	stw	zero,-40(fp)
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  817dc8:	00800804 	movi	r2,32
  817dcc:	e0bff805 	stb	r2,-32(fp)
  817dd0:	00800804 	movi	r2,32
  817dd4:	e0bff845 	stb	r2,-31(fp)
  817dd8:	00800804 	movi	r2,32
  817ddc:	e0bff885 	stb	r2,-30(fp)
  817de0:	00800804 	movi	r2,32
  817de4:	e0bff8c5 	stb	r2,-29(fp)
  817de8:	00800804 	movi	r2,32
  817dec:	e0bff905 	stb	r2,-28(fp)
  817df0:	00800804 	movi	r2,32
  817df4:	e0bff945 	stb	r2,-27(fp)
  817df8:	00800804 	movi	r2,32
  817dfc:	e0bff985 	stb	r2,-26(fp)
  817e00:	00800804 	movi	r2,32
  817e04:	e0bff9c5 	stb	r2,-25(fp)
	char extension[3] = { ' ', ' ', ' ' };
  817e08:	00800804 	movi	r2,32
  817e0c:	e0bffa05 	stb	r2,-24(fp)
  817e10:	00800804 	movi	r2,32
  817e14:	e0bffa45 	stb	r2,-23(fp)
  817e18:	00800804 	movi	r2,32
  817e1c:	e0bffa85 	stb	r2,-22(fp)
	int ext_index = -1;
  817e20:	00bfffc4 	movi	r2,-1
  817e24:	e0bff515 	stw	r2,-44(fp)
	int cluster = directory_start_cluster;
  817e28:	e0bffc17 	ldw	r2,-16(fp)
  817e2c:	e0bff415 	stw	r2,-48(fp)
	int index;
	int length = strlen(file_name);
  817e30:	e13ffd17 	ldw	r4,-12(fp)
  817e34:	08098640 	call	809864 <strlen>
  817e38:	e0bff215 	stw	r2,-56(fp)
	bool result = false;
  817e3c:	e03ff115 	stw	zero,-60(fp)

	// Skip through all directory separators.
	while (location > 0) {
  817e40:	00000b06 	br	817e70 <find_file_in_directory+0xd4>
		last_dir_separator = last_dir_separator + location + 1;
  817e44:	e0fff617 	ldw	r3,-40(fp)
  817e48:	e0bff717 	ldw	r2,-36(fp)
  817e4c:	1885883a 	add	r2,r3,r2
  817e50:	10800044 	addi	r2,r2,1
  817e54:	e0bff615 	stw	r2,-40(fp)
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
  817e58:	e0bff617 	ldw	r2,-40(fp)
  817e5c:	1007883a 	mov	r3,r2
  817e60:	e0bffd17 	ldw	r2,-12(fp)
  817e64:	1889883a 	add	r4,r3,r2
  817e68:	08174dc0 	call	8174dc <get_dir_divider_location>
  817e6c:	e0bff715 	stw	r2,-36(fp)
	int index;
	int length = strlen(file_name);
	bool result = false;

	// Skip through all directory separators.
	while (location > 0) {
  817e70:	e0bff717 	ldw	r2,-36(fp)
  817e74:	10800048 	cmpgei	r2,r2,1
  817e78:	103ff21e 	bne	r2,zero,817e44 <find_file_in_directory+0xa8>
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
  817e7c:	e0bff617 	ldw	r2,-40(fp)
  817e80:	e0bff315 	stw	r2,-52(fp)
  817e84:	00002b06 	br	817f34 <find_file_in_directory+0x198>
		if (file_name[index] == '.') {
  817e88:	e0bff317 	ldw	r2,-52(fp)
  817e8c:	1007883a 	mov	r3,r2
  817e90:	e0bffd17 	ldw	r2,-12(fp)
  817e94:	1885883a 	add	r2,r3,r2
  817e98:	10800003 	ldbu	r2,0(r2)
  817e9c:	10803fcc 	andi	r2,r2,255
  817ea0:	1080201c 	xori	r2,r2,128
  817ea4:	10bfe004 	addi	r2,r2,-128
  817ea8:	10800b98 	cmpnei	r2,r2,46
  817eac:	1000031e 	bne	r2,zero,817ebc <find_file_in_directory+0x120>
			ext_index = index;
  817eb0:	e0bff317 	ldw	r2,-52(fp)
  817eb4:	e0bff515 	stw	r2,-44(fp)
  817eb8:	00001b06 	br	817f28 <find_file_in_directory+0x18c>
		} else if (ext_index < 0) {
  817ebc:	e0bff517 	ldw	r2,-44(fp)
  817ec0:	1004403a 	cmpge	r2,r2,zero
  817ec4:	10000c1e 	bne	r2,zero,817ef8 <find_file_in_directory+0x15c>
			name[index - last_dir_separator] = file_name[index];
  817ec8:	e0fff317 	ldw	r3,-52(fp)
  817ecc:	e0bff617 	ldw	r2,-40(fp)
  817ed0:	1889c83a 	sub	r4,r3,r2
  817ed4:	e0bff317 	ldw	r2,-52(fp)
  817ed8:	1007883a 	mov	r3,r2
  817edc:	e0bffd17 	ldw	r2,-12(fp)
  817ee0:	1885883a 	add	r2,r3,r2
  817ee4:	10c00003 	ldbu	r3,0(r2)
  817ee8:	e0bff804 	addi	r2,fp,-32
  817eec:	1105883a 	add	r2,r2,r4
  817ef0:	10c00005 	stb	r3,0(r2)
  817ef4:	00000c06 	br	817f28 <find_file_in_directory+0x18c>
		} else {
			extension[index - ext_index - 1] = file_name[index];
  817ef8:	e0fff317 	ldw	r3,-52(fp)
  817efc:	e0bff517 	ldw	r2,-44(fp)
  817f00:	1885c83a 	sub	r2,r3,r2
  817f04:	113fffc4 	addi	r4,r2,-1
  817f08:	e0bff317 	ldw	r2,-52(fp)
  817f0c:	1007883a 	mov	r3,r2
  817f10:	e0bffd17 	ldw	r2,-12(fp)
  817f14:	1885883a 	add	r2,r3,r2
  817f18:	10c00003 	ldbu	r3,0(r2)
  817f1c:	e0bffa04 	addi	r2,fp,-24
  817f20:	1105883a 	add	r2,r2,r4
  817f24:	10c00005 	stb	r3,0(r2)
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
  817f28:	e0bff317 	ldw	r2,-52(fp)
  817f2c:	10800044 	addi	r2,r2,1
  817f30:	e0bff315 	stw	r2,-52(fp)
  817f34:	e0fff317 	ldw	r3,-52(fp)
  817f38:	e0bff217 	ldw	r2,-56(fp)
  817f3c:	18bfd216 	blt	r3,r2,817e88 <find_file_in_directory+0xec>
			extension[index - ext_index - 1] = file_name[index];
		}
	}

	// Look for the file.
	if (directory_start_cluster == 0) {
  817f40:	e0bffc17 	ldw	r2,-16(fp)
  817f44:	1004c03a 	cmpne	r2,r2,zero
  817f48:	1000441e 	bne	r2,zero,81805c <find_file_in_directory+0x2c0>
		/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
  817f4c:	008020b4 	movhi	r2,130
  817f50:	1089f304 	addi	r2,r2,10188
  817f54:	1080050b 	ldhu	r2,20(r2)
  817f58:	10bfffcc 	andi	r2,r2,65535
  817f5c:	1008917a 	slli	r4,r2,5
  817f60:	008020b4 	movhi	r2,130
  817f64:	1089f304 	addi	r2,r2,10188
  817f68:	1080030b 	ldhu	r2,12(r2)
  817f6c:	117fffcc 	andi	r5,r2,65535
  817f70:	08085980 	call	808598 <__divsi3>
  817f74:	e0bff015 	stw	r2,-64(fp)
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  817f78:	e03fef15 	stw	zero,-68(fp)
  817f7c:	00003306 	br	81804c <find_file_in_directory+0x2b0>
			if (Read_Sector_Data(sector_index
  817f80:	008020b4 	movhi	r2,130
  817f84:	1089f304 	addi	r2,r2,10188
  817f88:	10c01317 	ldw	r3,76(r2)
  817f8c:	e0bfef17 	ldw	r2,-68(fp)
  817f90:	1885883a 	add	r2,r3,r2
  817f94:	1009883a 	mov	r4,r2
  817f98:	d1674e17 	ldw	r5,-25288(gp)
  817f9c:	08160ac0 	call	8160ac <Read_Sector_Data>
  817fa0:	1005003a 	cmpeq	r2,r2,zero
  817fa4:	10008e1e 	bne	r2,zero,8181e0 <find_file_in_directory+0x444>
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  817fa8:	e03fee15 	stw	zero,-72(fp)
  817fac:	00001e06 	br	818028 <find_file_in_directory+0x28c>
					// Read file record.
					Read_File_Record_At_Offset(file_counter * 32, file_record,
  817fb0:	e0bfee17 	ldw	r2,-72(fp)
  817fb4:	1008917a 	slli	r4,r2,5
  817fb8:	e1ffef17 	ldw	r7,-68(fp)
  817fbc:	e17ffe17 	ldw	r5,-8(fp)
  817fc0:	000d883a 	mov	r6,zero
  817fc4:	08164f40 	call	8164f4 <Read_File_Record_At_Offset>
							0, sector_index);
					if ((file_record->name[0] != 0xe5) && (file_record->name[0]
  817fc8:	e0bffe17 	ldw	r2,-8(fp)
  817fcc:	10800003 	ldbu	r2,0(r2)
  817fd0:	10803fcc 	andi	r2,r2,255
  817fd4:	10803960 	cmpeqi	r2,r2,229
  817fd8:	1000101e 	bne	r2,zero,81801c <find_file_in_directory+0x280>
  817fdc:	e0bffe17 	ldw	r2,-8(fp)
  817fe0:	10800003 	ldbu	r2,0(r2)
  817fe4:	10803fcc 	andi	r2,r2,255
  817fe8:	1005003a 	cmpeq	r2,r2,zero
  817fec:	10000b1e 	bne	r2,zero,81801c <find_file_in_directory+0x280>
							!= 0x00)) {
						bool match = match_file_record_to_name_ext(file_record,
								name, extension);
  817ff0:	e17ff804 	addi	r5,fp,-32
  817ff4:	e1bffa04 	addi	r6,fp,-24
  817ff8:	e13ffe17 	ldw	r4,-8(fp)
  817ffc:	081759c0 	call	81759c <match_file_record_to_name_ext>
  818000:	e0bfed15 	stw	r2,-76(fp)

						if (match) {
  818004:	e0bfed17 	ldw	r2,-76(fp)
  818008:	1005003a 	cmpeq	r2,r2,zero
  81800c:	1000031e 	bne	r2,zero,81801c <find_file_in_directory+0x280>
							result = true;
  818010:	00800044 	movi	r2,1
  818014:	e0bff115 	stw	r2,-60(fp)
							break;
  818018:	00000606 	br	818034 <find_file_in_directory+0x298>
			if (Read_Sector_Data(sector_index
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  81801c:	e0bfee17 	ldw	r2,-72(fp)
  818020:	10800044 	addi	r2,r2,1
  818024:	e0bfee15 	stw	r2,-72(fp)
  818028:	e0bfee17 	ldw	r2,-72(fp)
  81802c:	10800410 	cmplti	r2,r2,16
  818030:	103fdf1e 	bne	r2,zero,817fb0 <find_file_in_directory+0x214>
					}
				}
			} else {
				break;
			}
			if (result) {
  818034:	e0bff117 	ldw	r2,-60(fp)
  818038:	1004c03a 	cmpne	r2,r2,zero
  81803c:	1000681e 	bne	r2,zero,8181e0 <find_file_in_directory+0x444>
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  818040:	e0bfef17 	ldw	r2,-68(fp)
  818044:	10800044 	addi	r2,r2,1
  818048:	e0bfef15 	stw	r2,-68(fp)
  81804c:	e0ffef17 	ldw	r3,-68(fp)
  818050:	e0bff017 	ldw	r2,-64(fp)
  818054:	18bfca16 	blt	r3,r2,817f80 <find_file_in_directory+0x1e4>
  818058:	00006106 	br	8181e0 <find_file_in_directory+0x444>
		}
	} else {
		do {
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
  81805c:	e0bff417 	ldw	r2,-48(fp)
  818060:	10ffff84 	addi	r3,r2,-2
  818064:	008020b4 	movhi	r2,130
  818068:	1089f304 	addi	r2,r2,10188
  81806c:	10800383 	ldbu	r2,14(r2)
  818070:	10803fcc 	andi	r2,r2,255
  818074:	1885383a 	mul	r2,r3,r2
  818078:	1007883a 	mov	r3,r2
  81807c:	008020b4 	movhi	r2,130
  818080:	1089f304 	addi	r2,r2,10188
  818084:	10801417 	ldw	r2,80(r2)
  818088:	1885883a 	add	r2,r3,r2
  81808c:	e0bfec15 	stw	r2,-80(fp)
			int sector_index;

			for (sector_index = 0; sector_index
  818090:	e03feb15 	stw	zero,-84(fp)
  818094:	00003006 	br	818158 <find_file_in_directory+0x3bc>
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
  818098:	e0ffeb17 	ldw	r3,-84(fp)
  81809c:	e0bfec17 	ldw	r2,-80(fp)
  8180a0:	1889883a 	add	r4,r3,r2
  8180a4:	d1674e17 	ldw	r5,-25288(gp)
  8180a8:	08160ac0 	call	8160ac <Read_Sector_Data>
  8180ac:	1005003a 	cmpeq	r2,r2,zero
  8180b0:	10002f1e 	bne	r2,zero,818170 <find_file_in_directory+0x3d4>
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  8180b4:	e03fea15 	stw	zero,-88(fp)
  8180b8:	00001e06 	br	818134 <find_file_in_directory+0x398>
						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
  8180bc:	e0bfea17 	ldw	r2,-88(fp)
  8180c0:	1008917a 	slli	r4,r2,5
  8180c4:	e1bff417 	ldw	r6,-48(fp)
  8180c8:	e1ffeb17 	ldw	r7,-84(fp)
  8180cc:	e17ffe17 	ldw	r5,-8(fp)
  8180d0:	08164f40 	call	8164f4 <Read_File_Record_At_Offset>
								file_record, cluster, sector_index);
						if ((file_record->name[0] != 0xe5)
  8180d4:	e0bffe17 	ldw	r2,-8(fp)
  8180d8:	10800003 	ldbu	r2,0(r2)
  8180dc:	10803fcc 	andi	r2,r2,255
  8180e0:	10803960 	cmpeqi	r2,r2,229
  8180e4:	1000101e 	bne	r2,zero,818128 <find_file_in_directory+0x38c>
  8180e8:	e0bffe17 	ldw	r2,-8(fp)
  8180ec:	10800003 	ldbu	r2,0(r2)
  8180f0:	10803fcc 	andi	r2,r2,255
  8180f4:	1005003a 	cmpeq	r2,r2,zero
  8180f8:	10000b1e 	bne	r2,zero,818128 <find_file_in_directory+0x38c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
  8180fc:	e17ff804 	addi	r5,fp,-32
  818100:	e1bffa04 	addi	r6,fp,-24
  818104:	e13ffe17 	ldw	r4,-8(fp)
  818108:	081759c0 	call	81759c <match_file_record_to_name_ext>
  81810c:	e0bfe915 	stw	r2,-92(fp)

							if (match) {
  818110:	e0bfe917 	ldw	r2,-92(fp)
  818114:	1005003a 	cmpeq	r2,r2,zero
  818118:	1000031e 	bne	r2,zero,818128 <find_file_in_directory+0x38c>
								result = true;
  81811c:	00800044 	movi	r2,1
  818120:	e0bff115 	stw	r2,-60(fp)
								break;
  818124:	00000606 	br	818140 <find_file_in_directory+0x3a4>
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  818128:	e0bfea17 	ldw	r2,-88(fp)
  81812c:	10800044 	addi	r2,r2,1
  818130:	e0bfea15 	stw	r2,-88(fp)
  818134:	e0bfea17 	ldw	r2,-88(fp)
  818138:	10800410 	cmplti	r2,r2,16
  81813c:	103fdf1e 	bne	r2,zero,8180bc <find_file_in_directory+0x320>
						}
					}
				} else {
					break;
				}
				if (result) {
  818140:	e0bff117 	ldw	r2,-60(fp)
  818144:	1004c03a 	cmpne	r2,r2,zero
  818148:	1000091e 	bne	r2,zero,818170 <find_file_in_directory+0x3d4>
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
					< boot_sector_data.sectors_per_cluster; sector_index++) {
  81814c:	e0bfeb17 	ldw	r2,-84(fp)
  818150:	10800044 	addi	r2,r2,1
  818154:	e0bfeb15 	stw	r2,-84(fp)
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
  818158:	008020b4 	movhi	r2,130
  81815c:	1089f304 	addi	r2,r2,10188
  818160:	10800383 	ldbu	r2,14(r2)
  818164:	10c03fcc 	andi	r3,r2,255
  818168:	e0bfeb17 	ldw	r2,-84(fp)
  81816c:	10ffca16 	blt	r2,r3,818098 <find_file_in_directory+0x2fc>
					break;
				}
			}
			// If this is the end of the cluster and the file has not been found, then see if there is another cluster
			// that holds data for the current directory.
			if (result == false) {
  818170:	e0bff117 	ldw	r2,-60(fp)
  818174:	1004c03a 	cmpne	r2,r2,zero
  818178:	1000131e 	bne	r2,zero,8181c8 <find_file_in_directory+0x42c>
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster)) {
  81817c:	e13ff417 	ldw	r4,-48(fp)
  818180:	e17ffb04 	addi	r5,fp,-20
  818184:	08161a80 	call	8161a8 <get_cluster_flag>
  818188:	1005003a 	cmpeq	r2,r2,zero
  81818c:	10000c1e 	bne	r2,zero,8181c0 <find_file_in_directory+0x424>
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  818190:	e0bffb0b 	ldhu	r2,-20(fp)
  818194:	10bfffcc 	andi	r2,r2,65535
  818198:	10fffe0c 	andi	r3,r2,65528
  81819c:	00bffe14 	movui	r2,65528
  8181a0:	1880021e 	bne	r3,r2,8181ac <find_file_in_directory+0x410>
						return false;
  8181a4:	e03fff15 	stw	zero,-4(fp)
  8181a8:	00000f06 	br	8181e8 <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
  8181ac:	e0bffb0b 	ldhu	r2,-20(fp)
  8181b0:	10bfffcc 	andi	r2,r2,65535
  8181b4:	10bffe0c 	andi	r2,r2,65528
  8181b8:	e0bff415 	stw	r2,-48(fp)
  8181bc:	00000206 	br	8181c8 <find_file_in_directory+0x42c>
				} else {
					// Directory path is invalid.
					return false;
  8181c0:	e03fff15 	stw	zero,-4(fp)
  8181c4:	00000806 	br	8181e8 <find_file_in_directory+0x44c>
				}
			}
		} while ((cluster < 0x0000fff8) && (result == false));
  8181c8:	e0fff417 	ldw	r3,-48(fp)
  8181cc:	00bffdd4 	movui	r2,65527
  8181d0:	10c00316 	blt	r2,r3,8181e0 <find_file_in_directory+0x444>
  8181d4:	e0bff117 	ldw	r2,-60(fp)
  8181d8:	1005003a 	cmpeq	r2,r2,zero
  8181dc:	103f9f1e 	bne	r2,zero,81805c <find_file_in_directory+0x2c0>
	}

	return result;
  8181e0:	e0bff117 	ldw	r2,-60(fp)
  8181e4:	e0bfff15 	stw	r2,-4(fp)
  8181e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8181ec:	e037883a 	mov	sp,fp
  8181f0:	dfc00117 	ldw	ra,4(sp)
  8181f4:	df000017 	ldw	fp,0(sp)
  8181f8:	dec00204 	addi	sp,sp,8
  8181fc:	f800283a 	ret

00818200 <find_first_empty_cluster>:

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  818200:	defff504 	addi	sp,sp,-44
  818204:	dfc00a15 	stw	ra,40(sp)
  818208:	df000915 	stw	fp,36(sp)
  81820c:	df000904 	addi	fp,sp,36
  818210:	e13fff15 	stw	r4,-4(fp)
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
  818214:	008020b4 	movhi	r2,130
  818218:	1089f304 	addi	r2,r2,10188
  81821c:	10801117 	ldw	r2,68(r2)
  818220:	e0bffe15 	stw	r2,-8(fp)
	unsigned int cluster_index = 2;
  818224:	00800084 	movi	r2,2
  818228:	e0bffd15 	stw	r2,-12(fp)
	short int cluster = -1;
  81822c:	00bfffc4 	movi	r2,-1
  818230:	e0bffc0d 	sth	r2,-16(fp)
	bool result = false;
  818234:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
  818238:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
  81823c:	008020b4 	movhi	r2,130
  818240:	1089f304 	addi	r2,r2,10188
  818244:	10801417 	ldw	r2,80(r2)
  818248:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
  81824c:	008020b4 	movhi	r2,130
  818250:	1089f304 	addi	r2,r2,10188
  818254:	1080058b 	ldhu	r2,22(r2)
  818258:	10bfffcc 	andi	r2,r2,65535
  81825c:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 =
			boot_sector_data.total_sector_count_if_above_32MB;
  818260:	008020b4 	movhi	r2,130
  818264:	1089f304 	addi	r2,r2,10188
  818268:	10800917 	ldw	r2,36(r2)
  81826c:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32) {
  818270:	e0fff817 	ldw	r3,-32(fp)
  818274:	e0bff717 	ldw	r2,-36(fp)
  818278:	10c00b2e 	bgeu	r2,r3,8182a8 <find_first_empty_cluster+0xa8>
		max_cluster_index = ((less_than_32 - non_data_sectors)
  81827c:	e0fff817 	ldw	r3,-32(fp)
  818280:	e0bff917 	ldw	r2,-28(fp)
  818284:	1889c83a 	sub	r4,r3,r2
  818288:	008020b4 	movhi	r2,130
  81828c:	1089f304 	addi	r2,r2,10188
  818290:	10800383 	ldbu	r2,14(r2)
  818294:	11403fcc 	andi	r5,r2,255
  818298:	08086580 	call	808658 <__udivsi3>
  81829c:	10800044 	addi	r2,r2,1
  8182a0:	e0bffa15 	stw	r2,-24(fp)
  8182a4:	00002906 	br	81834c <find_first_empty_cluster+0x14c>
				/ boot_sector_data.sectors_per_cluster) + 1;
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
  8182a8:	e0fff717 	ldw	r3,-36(fp)
  8182ac:	e0bff917 	ldw	r2,-28(fp)
  8182b0:	1889c83a 	sub	r4,r3,r2
  8182b4:	008020b4 	movhi	r2,130
  8182b8:	1089f304 	addi	r2,r2,10188
  8182bc:	10800383 	ldbu	r2,14(r2)
  8182c0:	11403fcc 	andi	r5,r2,255
  8182c4:	08086580 	call	808658 <__udivsi3>
  8182c8:	10800044 	addi	r2,r2,1
  8182cc:	e0bffa15 	stw	r2,-24(fp)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  8182d0:	00001e06 	br	81834c <find_first_empty_cluster+0x14c>
		if (Read_Sector_Data(sector, fat_partition_offset_in_512_byte_sectors)) {
  8182d4:	e13ffe17 	ldw	r4,-8(fp)
  8182d8:	d1674e17 	ldw	r5,-25288(gp)
  8182dc:	08160ac0 	call	8160ac <Read_Sector_Data>
  8182e0:	1005003a 	cmpeq	r2,r2,zero
  8182e4:	1000131e 	bne	r2,zero,818334 <find_first_empty_cluster+0x134>
			do {
				cluster
  8182e8:	d0a75017 	ldw	r2,-25280(gp)
  8182ec:	10800a17 	ldw	r2,40(r2)
  8182f0:	1007883a 	mov	r3,r2
  8182f4:	e0bffd17 	ldw	r2,-12(fp)
  8182f8:	10803fcc 	andi	r2,r2,255
  8182fc:	1085883a 	add	r2,r2,r2
  818300:	1885883a 	add	r2,r3,r2
  818304:	1080002b 	ldhuio	r2,0(r2)
  818308:	e0bffc0d 	sth	r2,-16(fp)
						= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
  81830c:	e0bffc0f 	ldh	r2,-16(fp)
  818310:	1005003a 	cmpeq	r2,r2,zero
  818314:	1000071e 	bne	r2,zero,818334 <find_first_empty_cluster+0x134>
					// Free cluster found.
					break;
				} else {
					cluster_index++;
  818318:	e0bffd17 	ldw	r2,-12(fp)
  81831c:	10800044 	addi	r2,r2,1
  818320:	e0bffd15 	stw	r2,-12(fp)
				}
			} while ((cluster_index % 256) != 0);
  818324:	e0bffd17 	ldw	r2,-12(fp)
  818328:	10803fcc 	andi	r2,r2,255
  81832c:	1004c03a 	cmpne	r2,r2,zero
  818330:	103fed1e 	bne	r2,zero,8182e8 <find_first_empty_cluster+0xe8>
		}
		if (cluster == 0) {
  818334:	e0bffc0f 	ldh	r2,-16(fp)
  818338:	1005003a 	cmpeq	r2,r2,zero
  81833c:	1000081e 	bne	r2,zero,818360 <find_first_empty_cluster+0x160>
			break;
		}
		sector++;
  818340:	e0bffe17 	ldw	r2,-8(fp)
  818344:	10800044 	addi	r2,r2,1
  818348:	e0bffe15 	stw	r2,-8(fp)
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  81834c:	008020b4 	movhi	r2,130
  818350:	1089f304 	addi	r2,r2,10188
  818354:	10c01217 	ldw	r3,72(r2)
  818358:	e0bffe17 	ldw	r2,-8(fp)
  81835c:	18bfdd1e 	bne	r3,r2,8182d4 <find_first_empty_cluster+0xd4>
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
  818360:	e0bffc0f 	ldh	r2,-16(fp)
  818364:	1004c03a 	cmpne	r2,r2,zero
  818368:	1000081e 	bne	r2,zero,81838c <find_first_empty_cluster+0x18c>
  81836c:	e0fffc0f 	ldh	r3,-16(fp)
  818370:	e0bffa17 	ldw	r2,-24(fp)
  818374:	10c00536 	bltu	r2,r3,81838c <find_first_empty_cluster+0x18c>
		*cluster_number = cluster_index;
  818378:	e0bfff17 	ldw	r2,-4(fp)
  81837c:	e0fffd17 	ldw	r3,-12(fp)
  818380:	10c00015 	stw	r3,0(r2)
		result = true;
  818384:	00800044 	movi	r2,1
  818388:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
  81838c:	e0bffb17 	ldw	r2,-20(fp)
}
  818390:	e037883a 	mov	sp,fp
  818394:	dfc00117 	ldw	ra,4(sp)
  818398:	df000017 	ldw	fp,0(sp)
  81839c:	dec00204 	addi	sp,sp,8
  8183a0:	f800283a 	ret

008183a4 <find_first_empty_record_in_a_subdirectory>:

int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
  8183a4:	defff404 	addi	sp,sp,-48
  8183a8:	dfc00b15 	stw	ra,44(sp)
  8183ac:	df000a15 	stw	fp,40(sp)
  8183b0:	df000a04 	addi	fp,sp,40
  8183b4:	e13ffe15 	stw	r4,-8(fp)
	int result = -1;
  8183b8:	00bfffc4 	movi	r2,-1
  8183bc:	e0bffb15 	stw	r2,-20(fp)
	int cluster = start_cluster_index;
  8183c0:	e0bffe17 	ldw	r2,-8(fp)
  8183c4:	e0bffa15 	stw	r2,-24(fp)
	do {
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
  8183c8:	e0bffa17 	ldw	r2,-24(fp)
  8183cc:	10ffff84 	addi	r3,r2,-2
  8183d0:	008020b4 	movhi	r2,130
  8183d4:	1089f304 	addi	r2,r2,10188
  8183d8:	10800383 	ldbu	r2,14(r2)
  8183dc:	10803fcc 	andi	r2,r2,255
  8183e0:	1885383a 	mul	r2,r3,r2
  8183e4:	1007883a 	mov	r3,r2
  8183e8:	008020b4 	movhi	r2,130
  8183ec:	1089f304 	addi	r2,r2,10188
  8183f0:	10801417 	ldw	r2,80(r2)
  8183f4:	1885883a 	add	r2,r3,r2
  8183f8:	e0bff915 	stw	r2,-28(fp)
		int sector_index;

		for (sector_index = 0; sector_index
  8183fc:	e03ff815 	stw	zero,-32(fp)
  818400:	00002c06 	br	8184b4 <find_first_empty_record_in_a_subdirectory+0x110>
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
  818404:	e0fff817 	ldw	r3,-32(fp)
  818408:	e0bff917 	ldw	r2,-28(fp)
  81840c:	1889883a 	add	r4,r3,r2
  818410:	d1674e17 	ldw	r5,-25288(gp)
  818414:	08160ac0 	call	8160ac <Read_Sector_Data>
  818418:	1005003a 	cmpeq	r2,r2,zero
  81841c:	10002b1e 	bne	r2,zero,8184cc <find_first_empty_record_in_a_subdirectory+0x128>
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  818420:	e03ff715 	stw	zero,-36(fp)
  818424:	00001d06 	br	81849c <find_first_empty_record_in_a_subdirectory+0xf8>
					unsigned short int leading_char;

					// Read file record.
					leading_char
  818428:	d0a75017 	ldw	r2,-25280(gp)
  81842c:	10800a17 	ldw	r2,40(r2)
  818430:	1007883a 	mov	r3,r2
  818434:	e0bff717 	ldw	r2,-36(fp)
  818438:	1004917a 	slli	r2,r2,5
  81843c:	1885883a 	add	r2,r3,r2
  818440:	10800023 	ldbuio	r2,0(r2)
  818444:	10803fcc 	andi	r2,r2,255
  818448:	e0bff60d 	sth	r2,-40(fp)
							= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
					if ((leading_char == 0x00e5) || (leading_char == 0)) {
  81844c:	e0bff60b 	ldhu	r2,-40(fp)
  818450:	10803960 	cmpeqi	r2,r2,229
  818454:	1000031e 	bne	r2,zero,818464 <find_first_empty_record_in_a_subdirectory+0xc0>
  818458:	e0bff60b 	ldhu	r2,-40(fp)
  81845c:	1004c03a 	cmpne	r2,r2,zero
  818460:	10000b1e 	bne	r2,zero,818490 <find_first_empty_record_in_a_subdirectory+0xec>
						result = (cluster)
  818464:	e0bff817 	ldw	r2,-32(fp)
  818468:	1006913a 	slli	r3,r2,4
  81846c:	e0bff717 	ldw	r2,-36(fp)
  818470:	1885883a 	add	r2,r3,r2
  818474:	1006943a 	slli	r3,r2,16
  818478:	e0bffa17 	ldw	r2,-24(fp)
  81847c:	1884b03a 	or	r2,r3,r2
  818480:	e0bffb15 	stw	r2,-20(fp)
								| ((sector_index * 16 + file_counter) << 16);
						return result;
  818484:	e0bffb17 	ldw	r2,-20(fp)
  818488:	e0bfff15 	stw	r2,-4(fp)
  81848c:	00005206 	br	8185d8 <find_first_empty_record_in_a_subdirectory+0x234>
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  818490:	e0bff717 	ldw	r2,-36(fp)
  818494:	10800044 	addi	r2,r2,1
  818498:	e0bff715 	stw	r2,-36(fp)
  81849c:	e0bff717 	ldw	r2,-36(fp)
  8184a0:	10800410 	cmplti	r2,r2,16
  8184a4:	103fe01e 	bne	r2,zero,818428 <find_first_empty_record_in_a_subdirectory+0x84>
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
				< boot_sector_data.sectors_per_cluster; sector_index++) {
  8184a8:	e0bff817 	ldw	r2,-32(fp)
  8184ac:	10800044 	addi	r2,r2,1
  8184b0:	e0bff815 	stw	r2,-32(fp)
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
  8184b4:	008020b4 	movhi	r2,130
  8184b8:	1089f304 	addi	r2,r2,10188
  8184bc:	10800383 	ldbu	r2,14(r2)
  8184c0:	10c03fcc 	andi	r3,r2,255
  8184c4:	e0bff817 	ldw	r2,-32(fp)
  8184c8:	10ffce16 	blt	r2,r3,818404 <find_first_empty_record_in_a_subdirectory+0x60>
				break;
			}
		}
		// If this is the end of the cluster and the file has not been found, then see if there is another cluster
		// that holds data for the current directory.
		if (result < 0) {
  8184cc:	e0bffb17 	ldw	r2,-20(fp)
  8184d0:	1004403a 	cmpge	r2,r2,zero
  8184d4:	1000381e 	bne	r2,zero,8185b8 <find_first_empty_record_in_a_subdirectory+0x214>
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster)) {
  8184d8:	e13ffa17 	ldw	r4,-24(fp)
  8184dc:	e17ffc04 	addi	r5,fp,-16
  8184e0:	08161a80 	call	8161a8 <get_cluster_flag>
  8184e4:	1005003a 	cmpeq	r2,r2,zero
  8184e8:	1000311e 	bne	r2,zero,8185b0 <find_first_empty_record_in_a_subdirectory+0x20c>
				// The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  8184ec:	e0bffc0b 	ldhu	r2,-16(fp)
  8184f0:	10bfffcc 	andi	r2,r2,65535
  8184f4:	10fffe0c 	andi	r3,r2,65528
  8184f8:	00bffe14 	movui	r2,65528
  8184fc:	18802e1e 	bne	r3,r2,8185b8 <find_first_empty_record_in_a_subdirectory+0x214>
					int new_dir_cluster;
					if (find_first_empty_cluster(&new_dir_cluster)) {
  818500:	e13ffd04 	addi	r4,fp,-12
  818504:	08182000 	call	818200 <find_first_empty_cluster>
  818508:	1005003a 	cmpeq	r2,r2,zero
  81850c:	1000231e 	bne	r2,zero,81859c <find_first_empty_record_in_a_subdirectory+0x1f8>
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster,
  818510:	e13ffa17 	ldw	r4,-24(fp)
  818514:	e0bffd17 	ldw	r2,-12(fp)
  818518:	117fffcc 	andi	r5,r2,65535
  81851c:	2960001c 	xori	r5,r5,32768
  818520:	29600004 	addi	r5,r5,-32768
  818524:	01800044 	movi	r6,1
  818528:	08162600 	call	816260 <mark_cluster>
  81852c:	1005003a 	cmpeq	r2,r2,zero
  818530:	10001a1e 	bne	r2,zero,81859c <find_first_empty_record_in_a_subdirectory+0x1f8>
  818534:	e0bffd17 	ldw	r2,-12(fp)
  818538:	1009883a 	mov	r4,r2
  81853c:	017fffc4 	movi	r5,-1
  818540:	01800044 	movi	r6,1
  818544:	08162600 	call	816260 <mark_cluster>
  818548:	1005003a 	cmpeq	r2,r2,zero
  81854c:	1000131e 	bne	r2,zero,81859c <find_first_empty_record_in_a_subdirectory+0x1f8>
  818550:	e13ffa17 	ldw	r4,-24(fp)
  818554:	e0bffd17 	ldw	r2,-12(fp)
  818558:	117fffcc 	andi	r5,r2,65535
  81855c:	2960001c 	xori	r5,r5,32768
  818560:	29600004 	addi	r5,r5,-32768
  818564:	000d883a 	mov	r6,zero
  818568:	08162600 	call	816260 <mark_cluster>
  81856c:	1005003a 	cmpeq	r2,r2,zero
  818570:	10000a1e 	bne	r2,zero,81859c <find_first_empty_record_in_a_subdirectory+0x1f8>
  818574:	e0bffd17 	ldw	r2,-12(fp)
  818578:	1009883a 	mov	r4,r2
  81857c:	017fffc4 	movi	r5,-1
  818580:	000d883a 	mov	r6,zero
  818584:	08162600 	call	816260 <mark_cluster>
  818588:	1005003a 	cmpeq	r2,r2,zero
  81858c:	1000031e 	bne	r2,zero,81859c <find_first_empty_record_in_a_subdirectory+0x1f8>
										((short int) (0xffff)), true)
								&& mark_cluster(cluster,
										((short int) (new_dir_cluster)), false)
								&& mark_cluster(new_dir_cluster,
										((short int) (0xffff)), false)) {
							Save_Modified_Sector();
  818590:	081605c0 	call	81605c <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;
  818594:	e0bffd17 	ldw	r2,-12(fp)
  818598:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
  81859c:	e0bffc0b 	ldhu	r2,-16(fp)
  8185a0:	10bfffcc 	andi	r2,r2,65535
  8185a4:	10bffe0c 	andi	r2,r2,65528
  8185a8:	e0bffa15 	stw	r2,-24(fp)
  8185ac:	00000206 	br	8185b8 <find_first_empty_record_in_a_subdirectory+0x214>
				}
			} else {
				// Error encountered.                 
				result = -1;
  8185b0:	00bfffc4 	movi	r2,-1
  8185b4:	e0bffb15 	stw	r2,-20(fp)
			}
		}
	} while ((cluster < 0x0000fff8) && (result == -1));
  8185b8:	e0fffa17 	ldw	r3,-24(fp)
  8185bc:	00bffdd4 	movui	r2,65527
  8185c0:	10c00316 	blt	r2,r3,8185d0 <find_first_empty_record_in_a_subdirectory+0x22c>
  8185c4:	e0bffb17 	ldw	r2,-20(fp)
  8185c8:	10bfffe0 	cmpeqi	r2,r2,-1
  8185cc:	103f7e1e 	bne	r2,zero,8183c8 <find_first_empty_record_in_a_subdirectory+0x24>
	return result;
  8185d0:	e0bffb17 	ldw	r2,-20(fp)
  8185d4:	e0bfff15 	stw	r2,-4(fp)
  8185d8:	e0bfff17 	ldw	r2,-4(fp)
}
  8185dc:	e037883a 	mov	sp,fp
  8185e0:	dfc00117 	ldw	ra,4(sp)
  8185e4:	df000017 	ldw	fp,0(sp)
  8185e8:	dec00204 	addi	sp,sp,8
  8185ec:	f800283a 	ret

008185f0 <find_first_empty_record_in_root_directory>:

int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  8185f0:	defff804 	addi	sp,sp,-32
  8185f4:	dfc00715 	stw	ra,28(sp)
  8185f8:	df000615 	stw	fp,24(sp)
  8185fc:	df000604 	addi	fp,sp,24
	int max_root_dir_sectors = ((32
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
  818600:	008020b4 	movhi	r2,130
  818604:	1089f304 	addi	r2,r2,10188
  818608:	1080050b 	ldhu	r2,20(r2)
  81860c:	10bfffcc 	andi	r2,r2,65535
  818610:	1008917a 	slli	r4,r2,5
  818614:	008020b4 	movhi	r2,130
  818618:	1089f304 	addi	r2,r2,10188
  81861c:	1080030b 	ldhu	r2,12(r2)
  818620:	117fffcc 	andi	r5,r2,65535
  818624:	08085980 	call	808598 <__divsi3>
  818628:	e0bffe15 	stw	r2,-8(fp)
	int sector_index;
	int result = -1;
  81862c:	00bfffc4 	movi	r2,-1
  818630:	e0bffc15 	stw	r2,-16(fp)

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  818634:	e03ffd15 	stw	zero,-12(fp)
  818638:	00002d06 	br	8186f0 <find_first_empty_record_in_root_directory+0x100>
		if (Read_Sector_Data(sector_index
  81863c:	008020b4 	movhi	r2,130
  818640:	1089f304 	addi	r2,r2,10188
  818644:	10c01317 	ldw	r3,76(r2)
  818648:	e0bffd17 	ldw	r2,-12(fp)
  81864c:	1885883a 	add	r2,r3,r2
  818650:	1009883a 	mov	r4,r2
  818654:	d1674e17 	ldw	r5,-25288(gp)
  818658:	08160ac0 	call	8160ac <Read_Sector_Data>
  81865c:	1005003a 	cmpeq	r2,r2,zero
  818660:	1000261e 	bne	r2,zero,8186fc <find_first_empty_record_in_root_directory+0x10c>
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
  818664:	e03ffb15 	stw	zero,-20(fp)
  818668:	00001b06 	br	8186d8 <find_first_empty_record_in_root_directory+0xe8>
				unsigned short int leading_char;

				// Read first character of the file record.
				leading_char
  81866c:	d0a75017 	ldw	r2,-25280(gp)
  818670:	10800a17 	ldw	r2,40(r2)
  818674:	1007883a 	mov	r3,r2
  818678:	e0bffb17 	ldw	r2,-20(fp)
  81867c:	1004917a 	slli	r2,r2,5
  818680:	1885883a 	add	r2,r3,r2
  818684:	10800023 	ldbuio	r2,0(r2)
  818688:	10803fcc 	andi	r2,r2,255
  81868c:	e0bffa0d 	sth	r2,-24(fp)
						= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
  818690:	e0bffa0b 	ldhu	r2,-24(fp)
  818694:	10803960 	cmpeqi	r2,r2,229
  818698:	1000031e 	bne	r2,zero,8186a8 <find_first_empty_record_in_root_directory+0xb8>
  81869c:	e0bffa0b 	ldhu	r2,-24(fp)
  8186a0:	1004c03a 	cmpne	r2,r2,zero
  8186a4:	1000091e 	bne	r2,zero,8186cc <find_first_empty_record_in_root_directory+0xdc>
					result = (sector_index * 16 + file_counter) << 16;
  8186a8:	e0bffd17 	ldw	r2,-12(fp)
  8186ac:	1006913a 	slli	r3,r2,4
  8186b0:	e0bffb17 	ldw	r2,-20(fp)
  8186b4:	1885883a 	add	r2,r3,r2
  8186b8:	1004943a 	slli	r2,r2,16
  8186bc:	e0bffc15 	stw	r2,-16(fp)
					return result;
  8186c0:	e0bffc17 	ldw	r2,-16(fp)
  8186c4:	e0bfff15 	stw	r2,-4(fp)
  8186c8:	00000e06 	br	818704 <find_first_empty_record_in_root_directory+0x114>
		if (Read_Sector_Data(sector_index
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
  8186cc:	e0bffb17 	ldw	r2,-20(fp)
  8186d0:	10800044 	addi	r2,r2,1
  8186d4:	e0bffb15 	stw	r2,-20(fp)
  8186d8:	e0bffb17 	ldw	r2,-20(fp)
  8186dc:	10800410 	cmplti	r2,r2,16
  8186e0:	103fe21e 	bne	r2,zero,81866c <find_first_empty_record_in_root_directory+0x7c>
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  8186e4:	e0bffd17 	ldw	r2,-12(fp)
  8186e8:	10800044 	addi	r2,r2,1
  8186ec:	e0bffd15 	stw	r2,-12(fp)
  8186f0:	e0fffd17 	ldw	r3,-12(fp)
  8186f4:	e0bffe17 	ldw	r2,-8(fp)
  8186f8:	18bfd016 	blt	r3,r2,81863c <find_first_empty_record_in_root_directory+0x4c>
			}
		} else {
			break;
		}
	}
	return result;
  8186fc:	e0bffc17 	ldw	r2,-16(fp)
  818700:	e0bfff15 	stw	r2,-4(fp)
  818704:	e0bfff17 	ldw	r2,-4(fp)
}
  818708:	e037883a 	mov	sp,fp
  81870c:	dfc00117 	ldw	ra,4(sp)
  818710:	df000017 	ldw	fp,0(sp)
  818714:	dec00204 	addi	sp,sp,8
  818718:	f800283a 	ret

0081871c <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name,
		char *extension)
// This function converts the file name into a name . extension format.
{
  81871c:	defffa04 	addi	sp,sp,-24
  818720:	df000515 	stw	fp,20(sp)
  818724:	df000504 	addi	fp,sp,20
  818728:	e13ffd15 	stw	r4,-12(fp)
  81872c:	e17ffe15 	stw	r5,-8(fp)
  818730:	e1bfff15 	stw	r6,-4(fp)
	int counter;
	int local = 0;
  818734:	e03ffb15 	stw	zero,-20(fp)

	for (counter = 0; counter < 8; counter++) {
  818738:	e03ffc15 	stw	zero,-16(fp)
  81873c:	00002b06 	br	8187ec <convert_filename_to_name_extension+0xd0>
		if (filename[local] != '.') {
  818740:	e0bffb17 	ldw	r2,-20(fp)
  818744:	1007883a 	mov	r3,r2
  818748:	e0bffd17 	ldw	r2,-12(fp)
  81874c:	1885883a 	add	r2,r3,r2
  818750:	10800003 	ldbu	r2,0(r2)
  818754:	10803fcc 	andi	r2,r2,255
  818758:	1080201c 	xori	r2,r2,128
  81875c:	10bfe004 	addi	r2,r2,-128
  818760:	10800ba0 	cmpeqi	r2,r2,46
  818764:	1000181e 	bne	r2,zero,8187c8 <convert_filename_to_name_extension+0xac>
			name[counter] = filename[local];
  818768:	e0bffc17 	ldw	r2,-16(fp)
  81876c:	1007883a 	mov	r3,r2
  818770:	e0bffe17 	ldw	r2,-8(fp)
  818774:	1889883a 	add	r4,r3,r2
  818778:	e0bffb17 	ldw	r2,-20(fp)
  81877c:	1007883a 	mov	r3,r2
  818780:	e0bffd17 	ldw	r2,-12(fp)
  818784:	1885883a 	add	r2,r3,r2
  818788:	10800003 	ldbu	r2,0(r2)
  81878c:	20800005 	stb	r2,0(r4)
			if (filename[local] != 0)
  818790:	e0bffb17 	ldw	r2,-20(fp)
  818794:	1007883a 	mov	r3,r2
  818798:	e0bffd17 	ldw	r2,-12(fp)
  81879c:	1885883a 	add	r2,r3,r2
  8187a0:	10800003 	ldbu	r2,0(r2)
  8187a4:	10803fcc 	andi	r2,r2,255
  8187a8:	1080201c 	xori	r2,r2,128
  8187ac:	10bfe004 	addi	r2,r2,-128
  8187b0:	1005003a 	cmpeq	r2,r2,zero
  8187b4:	10000a1e 	bne	r2,zero,8187e0 <convert_filename_to_name_extension+0xc4>
				local++;
  8187b8:	e0bffb17 	ldw	r2,-20(fp)
  8187bc:	10800044 	addi	r2,r2,1
  8187c0:	e0bffb15 	stw	r2,-20(fp)
  8187c4:	00000606 	br	8187e0 <convert_filename_to_name_extension+0xc4>
		} else {
			name[counter] = ' ';
  8187c8:	e0bffc17 	ldw	r2,-16(fp)
  8187cc:	1007883a 	mov	r3,r2
  8187d0:	e0bffe17 	ldw	r2,-8(fp)
  8187d4:	1887883a 	add	r3,r3,r2
  8187d8:	00800804 	movi	r2,32
  8187dc:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
  8187e0:	e0bffc17 	ldw	r2,-16(fp)
  8187e4:	10800044 	addi	r2,r2,1
  8187e8:	e0bffc15 	stw	r2,-16(fp)
  8187ec:	e0bffc17 	ldw	r2,-16(fp)
  8187f0:	10800210 	cmplti	r2,r2,8
  8187f4:	103fd21e 	bne	r2,zero,818740 <convert_filename_to_name_extension+0x24>
				local++;
		} else {
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
  8187f8:	e0bffb17 	ldw	r2,-20(fp)
  8187fc:	1007883a 	mov	r3,r2
  818800:	e0bffd17 	ldw	r2,-12(fp)
  818804:	1885883a 	add	r2,r3,r2
  818808:	10800003 	ldbu	r2,0(r2)
  81880c:	10803fcc 	andi	r2,r2,255
  818810:	1080201c 	xori	r2,r2,128
  818814:	10bfe004 	addi	r2,r2,-128
  818818:	10800b98 	cmpnei	r2,r2,46
  81881c:	1000031e 	bne	r2,zero,81882c <convert_filename_to_name_extension+0x110>
		local++;
  818820:	e0bffb17 	ldw	r2,-20(fp)
  818824:	10800044 	addi	r2,r2,1
  818828:	e0bffb15 	stw	r2,-20(fp)
	for (counter = 0; counter < 3; counter++) {
  81882c:	e03ffc15 	stw	zero,-16(fp)
  818830:	00002106 	br	8188b8 <convert_filename_to_name_extension+0x19c>
		if (filename[local] != 0) {
  818834:	e0bffb17 	ldw	r2,-20(fp)
  818838:	1007883a 	mov	r3,r2
  81883c:	e0bffd17 	ldw	r2,-12(fp)
  818840:	1885883a 	add	r2,r3,r2
  818844:	10800003 	ldbu	r2,0(r2)
  818848:	10803fcc 	andi	r2,r2,255
  81884c:	1080201c 	xori	r2,r2,128
  818850:	10bfe004 	addi	r2,r2,-128
  818854:	1005003a 	cmpeq	r2,r2,zero
  818858:	10000e1e 	bne	r2,zero,818894 <convert_filename_to_name_extension+0x178>
			extension[counter] = filename[local];
  81885c:	e0bffc17 	ldw	r2,-16(fp)
  818860:	1007883a 	mov	r3,r2
  818864:	e0bfff17 	ldw	r2,-4(fp)
  818868:	1889883a 	add	r4,r3,r2
  81886c:	e0bffb17 	ldw	r2,-20(fp)
  818870:	1007883a 	mov	r3,r2
  818874:	e0bffd17 	ldw	r2,-12(fp)
  818878:	1885883a 	add	r2,r3,r2
  81887c:	10800003 	ldbu	r2,0(r2)
  818880:	20800005 	stb	r2,0(r4)
			local++;
  818884:	e0bffb17 	ldw	r2,-20(fp)
  818888:	10800044 	addi	r2,r2,1
  81888c:	e0bffb15 	stw	r2,-20(fp)
  818890:	00000606 	br	8188ac <convert_filename_to_name_extension+0x190>
		} else {
			extension[counter] = ' ';
  818894:	e0bffc17 	ldw	r2,-16(fp)
  818898:	1007883a 	mov	r3,r2
  81889c:	e0bfff17 	ldw	r2,-4(fp)
  8188a0:	1887883a 	add	r3,r3,r2
  8188a4:	00800804 	movi	r2,32
  8188a8:	18800005 	stb	r2,0(r3)
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
  8188ac:	e0bffc17 	ldw	r2,-16(fp)
  8188b0:	10800044 	addi	r2,r2,1
  8188b4:	e0bffc15 	stw	r2,-16(fp)
  8188b8:	e0bffc17 	ldw	r2,-16(fp)
  8188bc:	108000d0 	cmplti	r2,r2,3
  8188c0:	103fdc1e 	bne	r2,zero,818834 <convert_filename_to_name_extension+0x118>
		} else {
			extension[counter] = ' ';
		}
	}

}
  8188c4:	e037883a 	mov	sp,fp
  8188c8:	df000017 	ldw	fp,0(sp)
  8188cc:	dec00104 	addi	sp,sp,4
  8188d0:	f800283a 	ret

008188d4 <create_file>:

bool create_file(char *name, t_file_record *file_record,
		t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  8188d4:	defff304 	addi	sp,sp,-52
  8188d8:	dfc00c15 	stw	ra,48(sp)
  8188dc:	df000b15 	stw	fp,44(sp)
  8188e0:	df000b04 	addi	fp,sp,44
  8188e4:	e13ffb15 	stw	r4,-20(fp)
  8188e8:	e17ffc15 	stw	r5,-16(fp)
  8188ec:	e1bffd15 	stw	r6,-12(fp)
	unsigned int cluster_number;
	bool result = false;
  8188f0:	e03ff915 	stw	zero,-28(fp)

	if (find_first_empty_cluster(&cluster_number)) {
  8188f4:	e13ffa04 	addi	r4,fp,-24
  8188f8:	08182000 	call	818200 <find_first_empty_cluster>
  8188fc:	1005003a 	cmpeq	r2,r2,zero
  818900:	1000a31e 	bne	r2,zero,818b90 <create_file+0x2bc>
		int record_index;

		if (home_dir->file_record_cluster == 0) {
  818904:	e0bffd17 	ldw	r2,-12(fp)
  818908:	10800a17 	ldw	r2,40(r2)
  81890c:	1004c03a 	cmpne	r2,r2,zero
  818910:	1000031e 	bne	r2,zero,818920 <create_file+0x4c>
			// Put a file in the root directory.
			record_index = find_first_empty_record_in_root_directory();
  818914:	08185f00 	call	8185f0 <find_first_empty_record_in_root_directory>
  818918:	e0bff815 	stw	r2,-32(fp)
  81891c:	00000506 	br	818934 <create_file+0x60>
		} else {
			// Put a file in a subdirectory.
			record_index = find_first_empty_record_in_a_subdirectory(
  818920:	e0bffd17 	ldw	r2,-12(fp)
  818924:	1080058b 	ldhu	r2,22(r2)
  818928:	113fffcc 	andi	r4,r2,65535
  81892c:	08183a40 	call	8183a4 <find_first_empty_record_in_a_subdirectory>
  818930:	e0bff815 	stw	r2,-32(fp)
					home_dir->start_cluster_index);
		}
		if (record_index >= 0) {
  818934:	e0bff817 	ldw	r2,-32(fp)
  818938:	1004803a 	cmplt	r2,r2,zero
  81893c:	1000941e 	bne	r2,zero,818b90 <create_file+0x2bc>
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
  818940:	e13ffb17 	ldw	r4,-20(fp)
  818944:	08174dc0 	call	8174dc <get_dir_divider_location>
  818948:	e0bff615 	stw	r2,-40(fp)
			int last_dir_separator = 0;
  81894c:	e03ff515 	stw	zero,-44(fp)

			// Skip through all directory separators.
			while (location > 0) {
  818950:	00000b06 	br	818980 <create_file+0xac>
				last_dir_separator = last_dir_separator + location + 1;
  818954:	e0fff517 	ldw	r3,-44(fp)
  818958:	e0bff617 	ldw	r2,-40(fp)
  81895c:	1885883a 	add	r2,r3,r2
  818960:	10800044 	addi	r2,r2,1
  818964:	e0bff515 	stw	r2,-44(fp)
				location
  818968:	e0bff517 	ldw	r2,-44(fp)
  81896c:	1007883a 	mov	r3,r2
  818970:	e0bffb17 	ldw	r2,-20(fp)
  818974:	1889883a 	add	r4,r3,r2
  818978:	08174dc0 	call	8174dc <get_dir_divider_location>
  81897c:	e0bff615 	stw	r2,-40(fp)
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
			int last_dir_separator = 0;

			// Skip through all directory separators.
			while (location > 0) {
  818980:	e0bff617 	ldw	r2,-40(fp)
  818984:	10800048 	cmpgei	r2,r2,1
  818988:	103ff21e 	bne	r2,zero,818954 <create_file+0x80>
				last_dir_separator = last_dir_separator + location + 1;
				location
						= get_dir_divider_location(&(name[last_dir_separator]));
			}

			convert_filename_to_name_extension(&(name[last_dir_separator]),
  81898c:	e0bff517 	ldw	r2,-44(fp)
  818990:	1007883a 	mov	r3,r2
  818994:	e0bffb17 	ldw	r2,-20(fp)
  818998:	1889883a 	add	r4,r3,r2
  81899c:	e0bffc17 	ldw	r2,-16(fp)
  8189a0:	100b883a 	mov	r5,r2
  8189a4:	e0bffc17 	ldw	r2,-16(fp)
  8189a8:	10800204 	addi	r2,r2,8
  8189ac:	100d883a 	mov	r6,r2
  8189b0:	081871c0 	call	81871c <convert_filename_to_name_extension>
					file_record->name, file_record->extension);

			file_record->attributes = 0;
  8189b4:	e0bffc17 	ldw	r2,-16(fp)
  8189b8:	100002c5 	stb	zero,11(r2)
			file_record->create_time = 0;
  8189bc:	e0bffc17 	ldw	r2,-16(fp)
  8189c0:	1000030d 	sth	zero,12(r2)
			file_record->create_date = 0;
  8189c4:	e0bffc17 	ldw	r2,-16(fp)
  8189c8:	1000038d 	sth	zero,14(r2)
			file_record->last_access_date = 0;
  8189cc:	e0bffc17 	ldw	r2,-16(fp)
  8189d0:	1000040d 	sth	zero,16(r2)
			file_record->last_modified_time = 0;
  8189d4:	e0bffc17 	ldw	r2,-16(fp)
  8189d8:	1000048d 	sth	zero,18(r2)
			file_record->last_modified_date = 0;
  8189dc:	e0bffc17 	ldw	r2,-16(fp)
  8189e0:	1000050d 	sth	zero,20(r2)
			file_record->start_cluster_index = cluster_number;
  8189e4:	e0bffa17 	ldw	r2,-24(fp)
  8189e8:	1007883a 	mov	r3,r2
  8189ec:	e0bffc17 	ldw	r2,-16(fp)
  8189f0:	10c0058d 	sth	r3,22(r2)
			file_record->file_size_in_bytes = 0;
  8189f4:	e0bffc17 	ldw	r2,-16(fp)
  8189f8:	10000615 	stw	zero,24(r2)
			file_record->current_cluster_index = cluster_number;
  8189fc:	e0fffa17 	ldw	r3,-24(fp)
  818a00:	e0bffc17 	ldw	r2,-16(fp)
  818a04:	10c00715 	stw	r3,28(r2)
			file_record->current_sector_in_cluster = 0;
  818a08:	e0bffc17 	ldw	r2,-16(fp)
  818a0c:	10000815 	stw	zero,32(r2)
			file_record->current_byte_position = 0;
  818a10:	e0bffc17 	ldw	r2,-16(fp)
  818a14:	10000915 	stw	zero,36(r2)
			file_record->file_record_cluster = record_index & 0x0000ffff;
  818a18:	e0bff817 	ldw	r2,-32(fp)
  818a1c:	10ffffcc 	andi	r3,r2,65535
  818a20:	e0bffc17 	ldw	r2,-16(fp)
  818a24:	10c00a15 	stw	r3,40(r2)
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
  818a28:	e0bff817 	ldw	r2,-32(fp)
  818a2c:	1005d43a 	srai	r2,r2,16
  818a30:	10bfffcc 	andi	r2,r2,65535
  818a34:	e0bfff15 	stw	r2,-4(fp)
  818a38:	e0ffff17 	ldw	r3,-4(fp)
  818a3c:	1804403a 	cmpge	r2,r3,zero
  818a40:	1000031e 	bne	r2,zero,818a50 <create_file+0x17c>
  818a44:	e0bfff17 	ldw	r2,-4(fp)
  818a48:	108003c4 	addi	r2,r2,15
  818a4c:	e0bfff15 	stw	r2,-4(fp)
  818a50:	e0ffff17 	ldw	r3,-4(fp)
  818a54:	1805d13a 	srai	r2,r3,4
  818a58:	1007883a 	mov	r3,r2
  818a5c:	e0bffc17 	ldw	r2,-16(fp)
  818a60:	10c00b15 	stw	r3,44(r2)
					& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
  818a64:	e0bff817 	ldw	r2,-32(fp)
  818a68:	1005d43a 	srai	r2,r2,16
  818a6c:	108003cc 	andi	r2,r2,15
  818a70:	1004917a 	slli	r2,r2,5
  818a74:	1007883a 	mov	r3,r2
  818a78:	e0bffc17 	ldw	r2,-16(fp)
  818a7c:	10c00c0d 	sth	r3,48(r2)
					& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
  818a80:	e0bffd17 	ldw	r2,-12(fp)
  818a84:	1080058b 	ldhu	r2,22(r2)
  818a88:	10ffffcc 	andi	r3,r2,65535
  818a8c:	e0bffc17 	ldw	r2,-16(fp)
  818a90:	10c00d15 	stw	r3,52(r2)
			file_record->in_use = true;
  818a94:	e0fffc17 	ldw	r3,-16(fp)
  818a98:	00800044 	movi	r2,1
  818a9c:	18800f15 	stw	r2,60(r3)
			file_record->modified = true;
  818aa0:	e0fffc17 	ldw	r3,-16(fp)
  818aa4:	00800044 	movi	r2,1
  818aa8:	18800e15 	stw	r2,56(r3)
			// Now write the record at the specified location.
			file_record_sector
  818aac:	e0bffc17 	ldw	r2,-16(fp)
  818ab0:	10800a17 	ldw	r2,40(r2)
  818ab4:	1004c03a 	cmpne	r2,r2,zero
  818ab8:	1000081e 	bne	r2,zero,818adc <create_file+0x208>
  818abc:	008020b4 	movhi	r2,130
  818ac0:	1089f304 	addi	r2,r2,10188
  818ac4:	10c01317 	ldw	r3,76(r2)
  818ac8:	e0bffc17 	ldw	r2,-16(fp)
  818acc:	10800b17 	ldw	r2,44(r2)
  818ad0:	1887883a 	add	r3,r3,r2
  818ad4:	e0fffe15 	stw	r3,-8(fp)
  818ad8:	00001006 	br	818b1c <create_file+0x248>
  818adc:	008020b4 	movhi	r2,130
  818ae0:	1089f304 	addi	r2,r2,10188
  818ae4:	11001417 	ldw	r4,80(r2)
  818ae8:	e0bffc17 	ldw	r2,-16(fp)
  818aec:	10800a17 	ldw	r2,40(r2)
  818af0:	10ffff84 	addi	r3,r2,-2
  818af4:	008020b4 	movhi	r2,130
  818af8:	1089f304 	addi	r2,r2,10188
  818afc:	10800383 	ldbu	r2,14(r2)
  818b00:	10803fcc 	andi	r2,r2,255
  818b04:	1885383a 	mul	r2,r3,r2
  818b08:	2087883a 	add	r3,r4,r2
  818b0c:	e0bffc17 	ldw	r2,-16(fp)
  818b10:	10800b17 	ldw	r2,44(r2)
  818b14:	1887883a 	add	r3,r3,r2
  818b18:	e0fffe15 	stw	r3,-8(fp)
  818b1c:	e0bffe17 	ldw	r2,-8(fp)
  818b20:	e0bff715 	stw	r2,-36(fp)
							: (boot_sector_data.data_sector_offset
									+ (file_record->file_record_cluster - 2)
											* boot_sector_data.sectors_per_cluster
									+ file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector,
  818b24:	e13ff717 	ldw	r4,-36(fp)
  818b28:	d1674e17 	ldw	r5,-25288(gp)
  818b2c:	08160ac0 	call	8160ac <Read_Sector_Data>
  818b30:	1005003a 	cmpeq	r2,r2,zero
  818b34:	1000161e 	bne	r2,zero,818b90 <create_file+0x2bc>
					fat_partition_offset_in_512_byte_sectors)) {
				if (Write_File_Record_At_Offset(
  818b38:	e0bffc17 	ldw	r2,-16(fp)
  818b3c:	10800c0b 	ldhu	r2,48(r2)
  818b40:	113fffcc 	andi	r4,r2,65535
  818b44:	2120001c 	xori	r4,r4,32768
  818b48:	21200004 	addi	r4,r4,-32768
  818b4c:	e17ffc17 	ldw	r5,-16(fp)
  818b50:	08167780 	call	816778 <Write_File_Record_At_Offset>
  818b54:	1005003a 	cmpeq	r2,r2,zero
  818b58:	10000d1e 	bne	r2,zero,818b90 <create_file+0x2bc>
						file_record->file_record_offset, file_record)) {
					Save_Modified_Sector();
  818b5c:	081605c0 	call	81605c <Save_Modified_Sector>
					// Mark the first cluster of the file as the last cluster at first.
					mark_cluster(cluster_number, ((short int) (0xffff)), true);
  818b60:	e13ffa17 	ldw	r4,-24(fp)
  818b64:	017fffc4 	movi	r5,-1
  818b68:	01800044 	movi	r6,1
  818b6c:	08162600 	call	816260 <mark_cluster>
					if (mark_cluster(cluster_number, ((short int) (0xffff)),
  818b70:	e13ffa17 	ldw	r4,-24(fp)
  818b74:	017fffc4 	movi	r5,-1
  818b78:	000d883a 	mov	r6,zero
  818b7c:	08162600 	call	816260 <mark_cluster>
  818b80:	1005003a 	cmpeq	r2,r2,zero
  818b84:	1000021e 	bne	r2,zero,818b90 <create_file+0x2bc>
							false)) {
						result = true;
  818b88:	00800044 	movi	r2,1
  818b8c:	e0bff915 	stw	r2,-28(fp)
				}
			}
		}

	}
	return result;
  818b90:	e0bff917 	ldw	r2,-28(fp)
}
  818b94:	e037883a 	mov	sp,fp
  818b98:	dfc00117 	ldw	ra,4(sp)
  818b9c:	df000017 	ldw	fp,0(sp)
  818ba0:	dec00204 	addi	sp,sp,8
  818ba4:	f800283a 	ret

00818ba8 <copy_file_record_name_to_string>:

void copy_file_record_name_to_string(t_file_record *file_record,
		char *file_name)
/* Copy a file name from the file record to a given string */
{
  818ba8:	defffb04 	addi	sp,sp,-20
  818bac:	df000415 	stw	fp,16(sp)
  818bb0:	df000404 	addi	fp,sp,16
  818bb4:	e13ffe15 	stw	r4,-8(fp)
  818bb8:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
  818bbc:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
  818bc0:	e03ffd15 	stw	zero,-12(fp)
  818bc4:	00001606 	br	818c20 <copy_file_record_name_to_string+0x78>
		if (file_record->name[index] != ' ') {
  818bc8:	e0fffd17 	ldw	r3,-12(fp)
  818bcc:	e0bffe17 	ldw	r2,-8(fp)
  818bd0:	10c5883a 	add	r2,r2,r3
  818bd4:	10800003 	ldbu	r2,0(r2)
  818bd8:	10803fcc 	andi	r2,r2,255
  818bdc:	10800820 	cmpeqi	r2,r2,32
  818be0:	10000c1e 	bne	r2,zero,818c14 <copy_file_record_name_to_string+0x6c>
			file_name[flength] = file_record->name[index];
  818be4:	e0bffc17 	ldw	r2,-16(fp)
  818be8:	1007883a 	mov	r3,r2
  818bec:	e0bfff17 	ldw	r2,-4(fp)
  818bf0:	1889883a 	add	r4,r3,r2
  818bf4:	e0fffd17 	ldw	r3,-12(fp)
  818bf8:	e0bffe17 	ldw	r2,-8(fp)
  818bfc:	10c5883a 	add	r2,r2,r3
  818c00:	10800003 	ldbu	r2,0(r2)
  818c04:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
  818c08:	e0bffc17 	ldw	r2,-16(fp)
  818c0c:	10800044 	addi	r2,r2,1
  818c10:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
  818c14:	e0bffd17 	ldw	r2,-12(fp)
  818c18:	10800044 	addi	r2,r2,1
  818c1c:	e0bffd15 	stw	r2,-12(fp)
  818c20:	e0bffd17 	ldw	r2,-12(fp)
  818c24:	10800210 	cmplti	r2,r2,8
  818c28:	103fe71e 	bne	r2,zero,818bc8 <copy_file_record_name_to_string+0x20>
		if (file_record->name[index] != ' ') {
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ') {
  818c2c:	e0bffe17 	ldw	r2,-8(fp)
  818c30:	10800203 	ldbu	r2,8(r2)
  818c34:	10803fcc 	andi	r2,r2,255
  818c38:	10800820 	cmpeqi	r2,r2,32
  818c3c:	1000261e 	bne	r2,zero,818cd8 <copy_file_record_name_to_string+0x130>
		file_name[flength] = '.';
  818c40:	e0bffc17 	ldw	r2,-16(fp)
  818c44:	1007883a 	mov	r3,r2
  818c48:	e0bfff17 	ldw	r2,-4(fp)
  818c4c:	1887883a 	add	r3,r3,r2
  818c50:	00800b84 	movi	r2,46
  818c54:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
  818c58:	e0bffc17 	ldw	r2,-16(fp)
  818c5c:	10800044 	addi	r2,r2,1
  818c60:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++) {
  818c64:	e03ffd15 	stw	zero,-12(fp)
  818c68:	00001806 	br	818ccc <copy_file_record_name_to_string+0x124>
			if (file_record->extension[index] != ' ') {
  818c6c:	e0fffd17 	ldw	r3,-12(fp)
  818c70:	e0bffe17 	ldw	r2,-8(fp)
  818c74:	1885883a 	add	r2,r3,r2
  818c78:	10800204 	addi	r2,r2,8
  818c7c:	10800003 	ldbu	r2,0(r2)
  818c80:	10803fcc 	andi	r2,r2,255
  818c84:	10800820 	cmpeqi	r2,r2,32
  818c88:	10000d1e 	bne	r2,zero,818cc0 <copy_file_record_name_to_string+0x118>
				file_name[flength] = file_record->extension[index];
  818c8c:	e0bffc17 	ldw	r2,-16(fp)
  818c90:	1007883a 	mov	r3,r2
  818c94:	e0bfff17 	ldw	r2,-4(fp)
  818c98:	1889883a 	add	r4,r3,r2
  818c9c:	e0fffd17 	ldw	r3,-12(fp)
  818ca0:	e0bffe17 	ldw	r2,-8(fp)
  818ca4:	1885883a 	add	r2,r3,r2
  818ca8:	10800204 	addi	r2,r2,8
  818cac:	10800003 	ldbu	r2,0(r2)
  818cb0:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
  818cb4:	e0bffc17 	ldw	r2,-16(fp)
  818cb8:	10800044 	addi	r2,r2,1
  818cbc:	e0bffc15 	stw	r2,-16(fp)
		}
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
  818cc0:	e0bffd17 	ldw	r2,-12(fp)
  818cc4:	10800044 	addi	r2,r2,1
  818cc8:	e0bffd15 	stw	r2,-12(fp)
  818ccc:	e0bffd17 	ldw	r2,-12(fp)
  818cd0:	108000d0 	cmplti	r2,r2,3
  818cd4:	103fe51e 	bne	r2,zero,818c6c <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
  818cd8:	e0bffc17 	ldw	r2,-16(fp)
  818cdc:	1007883a 	mov	r3,r2
  818ce0:	e0bfff17 	ldw	r2,-4(fp)
  818ce4:	1885883a 	add	r2,r3,r2
  818ce8:	10000005 	stb	zero,0(r2)
}
  818cec:	e037883a 	mov	sp,fp
  818cf0:	df000017 	ldw	fp,0(sp)
  818cf4:	dec00104 	addi	sp,sp,4
  818cf8:	f800283a 	ret

00818cfc <alt_up_sd_card_open_dev>:
///////////////////////////////////////////////////////////////////////////
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name) {
  818cfc:	defffc04 	addi	sp,sp,-16
  818d00:	dfc00315 	stw	ra,12(sp)
  818d04:	df000215 	stw	fp,8(sp)
  818d08:	df000204 	addi	fp,sp,8
  818d0c:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name,
			&alt_dev_list);
  818d10:	e13fff17 	ldw	r4,-4(fp)
  818d14:	014020b4 	movhi	r5,130
  818d18:	2977d504 	addi	r5,r5,-8364
  818d1c:	081aa140 	call	81aa14 <alt_find_dev>
  818d20:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL) {
  818d24:	e0bffe17 	ldw	r2,-8(fp)
  818d28:	1005003a 	cmpeq	r2,r2,zero
  818d2c:	10001e1e 	bne	r2,zero,818da8 <alt_up_sd_card_open_dev+0xac>
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  818d30:	e0bffe17 	ldw	r2,-8(fp)
  818d34:	10800a17 	ldw	r2,40(r2)
  818d38:	10808d04 	addi	r2,r2,564
  818d3c:	d0a74815 	stw	r2,-25312(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
  818d40:	e0bffe17 	ldw	r2,-8(fp)
  818d44:	10800a17 	ldw	r2,40(r2)
  818d48:	10808904 	addi	r2,r2,548
  818d4c:	d0a74915 	stw	r2,-25308(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
  818d50:	e0bffe17 	ldw	r2,-8(fp)
  818d54:	10800a17 	ldw	r2,40(r2)
  818d58:	10808404 	addi	r2,r2,528
  818d5c:	d0a74a15 	stw	r2,-25304(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
  818d60:	e0bffe17 	ldw	r2,-8(fp)
  818d64:	10800a17 	ldw	r2,40(r2)
  818d68:	10808c04 	addi	r2,r2,560
  818d6c:	d0a74b15 	stw	r2,-25300(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
  818d70:	e0bffe17 	ldw	r2,-8(fp)
  818d74:	10800a17 	ldw	r2,40(r2)
  818d78:	10808b04 	addi	r2,r2,556
  818d7c:	d0a74c15 	stw	r2,-25296(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
  818d80:	e0bffe17 	ldw	r2,-8(fp)
  818d84:	10800a17 	ldw	r2,40(r2)
  818d88:	d0a74d15 	stw	r2,-25292(gp)
		device_pointer = dev;
  818d8c:	e0bffe17 	ldw	r2,-8(fp)
  818d90:	d0a75015 	stw	r2,-25280(gp)
		initialized = false;
  818d94:	d0274615 	stw	zero,-25320(gp)
		is_sd_card_formated_as_FAT16 = false;
  818d98:	d0274715 	stw	zero,-25316(gp)
		search_data.valid = false;
  818d9c:	008020b4 	movhi	r2,130
  818da0:	1089ee04 	addi	r2,r2,10168
  818da4:	10000415 	stw	zero,16(r2)
	}
	return dev;
  818da8:	e0bffe17 	ldw	r2,-8(fp)
}
  818dac:	e037883a 	mov	sp,fp
  818db0:	dfc00117 	ldw	ra,4(sp)
  818db4:	df000017 	ldw	fp,0(sp)
  818db8:	dec00204 	addi	sp,sp,8
  818dbc:	f800283a 	ret

00818dc0 <alt_up_sd_card_is_Present>:

bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
  818dc0:	defffd04 	addi	sp,sp,-12
  818dc4:	df000215 	stw	fp,8(sp)
  818dc8:	df000204 	addi	fp,sp,8
	bool result = false;
  818dcc:	e03fff15 	stw	zero,-4(fp)

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  818dd0:	d0a75017 	ldw	r2,-25280(gp)
  818dd4:	1005003a 	cmpeq	r2,r2,zero
  818dd8:	1000081e 	bne	r2,zero,818dfc <alt_up_sd_card_is_Present+0x3c>
  818ddc:	d0a74817 	ldw	r2,-25312(gp)
  818de0:	1080002b 	ldhuio	r2,0(r2)
  818de4:	1080008c 	andi	r2,r2,2
  818de8:	1005003a 	cmpeq	r2,r2,zero
  818dec:	1000031e 	bne	r2,zero,818dfc <alt_up_sd_card_is_Present+0x3c>
			& 0x02) != 0)) {
		result = true;
  818df0:	00800044 	movi	r2,1
  818df4:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  818df8:	00001e06 	br	818e74 <alt_up_sd_card_is_Present+0xb4>
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
  818dfc:	d0a74617 	ldw	r2,-25320(gp)
  818e00:	10800058 	cmpnei	r2,r2,1
  818e04:	10001b1e 	bne	r2,zero,818e74 <alt_up_sd_card_is_Present+0xb4>
		int index;

		initialized = false;
  818e08:	d0274615 	stw	zero,-25320(gp)
		search_data.valid = false;
  818e0c:	008020b4 	movhi	r2,130
  818e10:	1089ee04 	addi	r2,r2,10168
  818e14:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
  818e18:	d0274715 	stw	zero,-25316(gp)

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  818e1c:	e03ffe15 	stw	zero,-8(fp)
  818e20:	00001106 	br	818e68 <alt_up_sd_card_is_Present+0xa8>
			active_files[index].in_use = false;
  818e24:	e0bffe17 	ldw	r2,-8(fp)
  818e28:	00c020b4 	movhi	r3,130
  818e2c:	18ca0804 	addi	r3,r3,10272
  818e30:	100491ba 	slli	r2,r2,6
  818e34:	10c5883a 	add	r2,r2,r3
  818e38:	10800f04 	addi	r2,r2,60
  818e3c:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
  818e40:	e0bffe17 	ldw	r2,-8(fp)
  818e44:	00c020b4 	movhi	r3,130
  818e48:	18ca0804 	addi	r3,r3,10272
  818e4c:	100491ba 	slli	r2,r2,6
  818e50:	10c5883a 	add	r2,r2,r3
  818e54:	10800e04 	addi	r2,r2,56
  818e58:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  818e5c:	e0bffe17 	ldw	r2,-8(fp)
  818e60:	10800044 	addi	r2,r2,1
  818e64:	e0bffe15 	stw	r2,-8(fp)
  818e68:	e0bffe17 	ldw	r2,-8(fp)
  818e6c:	10800510 	cmplti	r2,r2,20
  818e70:	103fec1e 	bne	r2,zero,818e24 <alt_up_sd_card_is_Present+0x64>
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
	return result;
  818e74:	e0bfff17 	ldw	r2,-4(fp)
}
  818e78:	e037883a 	mov	sp,fp
  818e7c:	df000017 	ldw	fp,0(sp)
  818e80:	dec00104 	addi	sp,sp,4
  818e84:	f800283a 	ret

00818e88 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
  818e88:	defffd04 	addi	sp,sp,-12
  818e8c:	dfc00215 	stw	ra,8(sp)
  818e90:	df000115 	stw	fp,4(sp)
  818e94:	df000104 	addi	fp,sp,4
	bool result = false;
  818e98:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
  818e9c:	0818dc00 	call	818dc0 <alt_up_sd_card_is_Present>
  818ea0:	1005003a 	cmpeq	r2,r2,zero
  818ea4:	10000d1e 	bne	r2,zero,818edc <alt_up_sd_card_is_FAT16+0x54>
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false) {
  818ea8:	d0a74617 	ldw	r2,-25320(gp)
  818eac:	1004c03a 	cmpne	r2,r2,zero
  818eb0:	1000071e 	bne	r2,zero,818ed0 <alt_up_sd_card_is_FAT16+0x48>
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
  818eb4:	08170780 	call	817078 <Look_for_FAT16>
  818eb8:	d0a74715 	stw	r2,-25316(gp)
			initialized = is_sd_card_formated_as_FAT16;
  818ebc:	d0a74717 	ldw	r2,-25316(gp)
  818ec0:	d0a74615 	stw	r2,-25320(gp)
			search_data.valid = false;
  818ec4:	008020b4 	movhi	r2,130
  818ec8:	1089ee04 	addi	r2,r2,10168
  818ecc:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
  818ed0:	d0a74717 	ldw	r2,-25316(gp)
  818ed4:	e0bfff15 	stw	r2,-4(fp)
  818ed8:	00000206 	br	818ee4 <alt_up_sd_card_is_FAT16+0x5c>
	} else {
		// If not then you may as well not open the device.
		initialized = false;
  818edc:	d0274615 	stw	zero,-25320(gp)
		is_sd_card_formated_as_FAT16 = false;
  818ee0:	d0274715 	stw	zero,-25316(gp)
	}

	return result;
  818ee4:	e0bfff17 	ldw	r2,-4(fp)
}
  818ee8:	e037883a 	mov	sp,fp
  818eec:	dfc00117 	ldw	ra,4(sp)
  818ef0:	df000017 	ldw	fp,0(sp)
  818ef4:	dec00204 	addi	sp,sp,8
  818ef8:	f800283a 	ret

00818efc <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
  818efc:	deffea04 	addi	sp,sp,-88
  818f00:	dfc01515 	stw	ra,84(sp)
  818f04:	df001415 	stw	fp,80(sp)
  818f08:	df001404 	addi	fp,sp,80
  818f0c:	e13ffe15 	stw	r4,-8(fp)
  818f10:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
  818f14:	00800084 	movi	r2,2
  818f18:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  818f1c:	0818dc00 	call	818dc0 <alt_up_sd_card_is_Present>
  818f20:	1005003a 	cmpeq	r2,r2,zero
  818f24:	1000241e 	bne	r2,zero,818fb8 <alt_up_sd_card_find_first+0xbc>
  818f28:	d0a74717 	ldw	r2,-25316(gp)
  818f2c:	1005003a 	cmpeq	r2,r2,zero
  818f30:	1000211e 	bne	r2,zero,818fb8 <alt_up_sd_card_find_first+0xbc>
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through,
  818f34:	e17fed04 	addi	r5,fp,-76
  818f38:	e1bfee04 	addi	r6,fp,-72
  818f3c:	e13ffe17 	ldw	r4,-8(fp)
  818f40:	08178880 	call	817888 <get_home_directory_cluster_for_file>
  818f44:	1005003a 	cmpeq	r2,r2,zero
  818f48:	1000191e 	bne	r2,zero,818fb0 <alt_up_sd_card_find_first+0xb4>
				&home_directory_cluster, &file_record)) {
			search_data.directory_root_cluster = home_directory_cluster;
  818f4c:	e0bfed17 	ldw	r2,-76(fp)
  818f50:	1007883a 	mov	r3,r2
  818f54:	008020b4 	movhi	r2,130
  818f58:	1089ee04 	addi	r2,r2,10168
  818f5c:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
  818f60:	e0bfed17 	ldw	r2,-76(fp)
  818f64:	1007883a 	mov	r3,r2
  818f68:	008020b4 	movhi	r2,130
  818f6c:	1089ee04 	addi	r2,r2,10168
  818f70:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
  818f74:	008020b4 	movhi	r2,130
  818f78:	1089ee04 	addi	r2,r2,10168
  818f7c:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
  818f80:	00c020b4 	movhi	r3,130
  818f84:	18c9ee04 	addi	r3,r3,10168
  818f88:	00bfffc4 	movi	r2,-1
  818f8c:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
  818f90:	00c020b4 	movhi	r3,130
  818f94:	18c9ee04 	addi	r3,r3,10168
  818f98:	00800044 	movi	r2,1
  818f9c:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
  818fa0:	e13fff17 	ldw	r4,-4(fp)
  818fa4:	0818fd00 	call	818fd0 <alt_up_sd_card_find_next>
  818fa8:	e0bfec0d 	sth	r2,-80(fp)
  818fac:	00000206 	br	818fb8 <alt_up_sd_card_find_first+0xbc>
		} else {
			result = 1;
  818fb0:	00800044 	movi	r2,1
  818fb4:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
  818fb8:	e0bfec0f 	ldh	r2,-80(fp)
}
  818fbc:	e037883a 	mov	sp,fp
  818fc0:	dfc00117 	ldw	ra,4(sp)
  818fc4:	df000017 	ldw	fp,0(sp)
  818fc8:	dec00204 	addi	sp,sp,8
  818fcc:	f800283a 	ret

00818fd0 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
  818fd0:	deffe404 	addi	sp,sp,-112
  818fd4:	dfc01b15 	stw	ra,108(sp)
  818fd8:	df001a15 	stw	fp,104(sp)
  818fdc:	df001a04 	addi	fp,sp,104
  818fe0:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
  818fe4:	00800084 	movi	r2,2
  818fe8:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  818fec:	0818dc00 	call	818dc0 <alt_up_sd_card_is_Present>
  818ff0:	1005003a 	cmpeq	r2,r2,zero
  818ff4:	1000da1e 	bne	r2,zero,819360 <alt_up_sd_card_find_next+0x390>
  818ff8:	d0a74717 	ldw	r2,-25316(gp)
  818ffc:	1005003a 	cmpeq	r2,r2,zero
  819000:	1000d71e 	bne	r2,zero,819360 <alt_up_sd_card_find_next+0x390>
		if (search_data.valid) {
  819004:	008020b4 	movhi	r2,130
  819008:	1089ee04 	addi	r2,r2,10168
  81900c:	10800417 	ldw	r2,16(r2)
  819010:	1005003a 	cmpeq	r2,r2,zero
  819014:	1000d01e 	bne	r2,zero,819358 <alt_up_sd_card_find_next+0x388>
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
  819018:	008020b4 	movhi	r2,130
  81901c:	1089ee04 	addi	r2,r2,10168
  819020:	10800117 	ldw	r2,4(r2)
  819024:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0) {
  819028:	e0bfec17 	ldw	r2,-80(fp)
  81902c:	1004c03a 	cmpne	r2,r2,zero
  819030:	1000511e 	bne	r2,zero,819178 <alt_up_sd_card_find_next+0x1a8>
				// Searching through the root directory
				int max_root_dir_sectors = ((32
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
  819034:	008020b4 	movhi	r2,130
  819038:	1089f304 	addi	r2,r2,10188
  81903c:	1080050b 	ldhu	r2,20(r2)
  819040:	10bfffcc 	andi	r2,r2,65535
  819044:	1008917a 	slli	r4,r2,5
  819048:	008020b4 	movhi	r2,130
  81904c:	1089f304 	addi	r2,r2,10188
  819050:	1080030b 	ldhu	r2,12(r2)
  819054:	117fffcc 	andi	r5,r2,65535
  819058:	08085980 	call	808598 <__divsi3>
  81905c:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
  819060:	008020b4 	movhi	r2,130
  819064:	1089ee04 	addi	r2,r2,10168
  819068:	10800217 	ldw	r2,8(r2)
  81906c:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector + 1;
  819070:	008020b4 	movhi	r2,130
  819074:	1089ee04 	addi	r2,r2,10168
  819078:	1080030b 	ldhu	r2,12(r2)
  81907c:	10bfffcc 	andi	r2,r2,65535
  819080:	10a0001c 	xori	r2,r2,32768
  819084:	10a00004 	addi	r2,r2,-32768
  819088:	10800044 	addi	r2,r2,1
  81908c:	e0bfe915 	stw	r2,-92(fp)

				for (; sector_index < max_root_dir_sectors; sector_index++) {
  819090:	00003306 	br	819160 <alt_up_sd_card_find_next+0x190>
					if (Read_Sector_Data(sector_index
  819094:	008020b4 	movhi	r2,130
  819098:	1089f304 	addi	r2,r2,10188
  81909c:	10c01317 	ldw	r3,76(r2)
  8190a0:	e0bfea17 	ldw	r2,-88(fp)
  8190a4:	1885883a 	add	r2,r3,r2
  8190a8:	1009883a 	mov	r4,r2
  8190ac:	d1674e17 	ldw	r5,-25288(gp)
  8190b0:	08160ac0 	call	8160ac <Read_Sector_Data>
  8190b4:	1005003a 	cmpeq	r2,r2,zero
  8190b8:	10002c1e 	bne	r2,zero,81916c <alt_up_sd_card_find_next+0x19c>
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
  8190bc:	00002106 	br	819144 <alt_up_sd_card_find_next+0x174>
							if (Read_File_Record_At_Offset(file_counter * 32,
  8190c0:	e0bfe917 	ldw	r2,-92(fp)
  8190c4:	1008917a 	slli	r4,r2,5
  8190c8:	e1ffea17 	ldw	r7,-88(fp)
  8190cc:	e17fee04 	addi	r5,fp,-72
  8190d0:	000d883a 	mov	r6,zero
  8190d4:	08164f40 	call	8164f4 <Read_File_Record_At_Offset>
  8190d8:	1005003a 	cmpeq	r2,r2,zero
  8190dc:	1000161e 	bne	r2,zero,819138 <alt_up_sd_card_find_next+0x168>
									&file_record, 0, sector_index)) {
								if ((file_record.name[0] != 0)
  8190e0:	e0bfee03 	ldbu	r2,-72(fp)
  8190e4:	10803fcc 	andi	r2,r2,255
  8190e8:	1005003a 	cmpeq	r2,r2,zero
  8190ec:	1000121e 	bne	r2,zero,819138 <alt_up_sd_card_find_next+0x168>
  8190f0:	e0bfee03 	ldbu	r2,-72(fp)
  8190f4:	10803fcc 	andi	r2,r2,255
  8190f8:	10803960 	cmpeqi	r2,r2,229
  8190fc:	10000e1e 	bne	r2,zero,819138 <alt_up_sd_card_find_next+0x168>
										&& (file_record.name[0] != 0xe5)) {
									/* Update search structure. */
									search_data.file_index_in_sector
  819100:	e0bfe917 	ldw	r2,-92(fp)
  819104:	1007883a 	mov	r3,r2
  819108:	008020b4 	movhi	r2,130
  81910c:	1089ee04 	addi	r2,r2,10168
  819110:	10c0030d 	sth	r3,12(r2)
											= file_counter;
									search_data.current_sector_in_cluster
  819114:	e0ffea17 	ldw	r3,-88(fp)
  819118:	008020b4 	movhi	r2,130
  81911c:	1089ee04 	addi	r2,r2,10168
  819120:	10c00215 	stw	r3,8(r2)
											= sector_index;

									/* Copy file name.*/
									copy_file_record_name_to_string(
  819124:	e13fee04 	addi	r4,fp,-72
  819128:	e17ffe17 	ldw	r5,-8(fp)
  81912c:	0818ba80 	call	818ba8 <copy_file_record_name_to_string>
											&file_record, file_name);
									return 0;
  819130:	e03fff15 	stw	zero,-4(fp)
  819134:	00008c06 	br	819368 <alt_up_sd_card_find_next+0x398>

				for (; sector_index < max_root_dir_sectors; sector_index++) {
					if (Read_Sector_Data(sector_index
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
  819138:	e0bfe917 	ldw	r2,-92(fp)
  81913c:	10800044 	addi	r2,r2,1
  819140:	e0bfe915 	stw	r2,-92(fp)
  819144:	e0bfe917 	ldw	r2,-92(fp)
  819148:	10800410 	cmplti	r2,r2,16
  81914c:	103fdc1e 	bne	r2,zero,8190c0 <alt_up_sd_card_find_next+0xf0>
											&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
  819150:	e03fe915 	stw	zero,-92(fp)
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector + 1;

				for (; sector_index < max_root_dir_sectors; sector_index++) {
  819154:	e0bfea17 	ldw	r2,-88(fp)
  819158:	10800044 	addi	r2,r2,1
  81915c:	e0bfea15 	stw	r2,-88(fp)
  819160:	e0ffea17 	ldw	r3,-88(fp)
  819164:	e0bfeb17 	ldw	r2,-84(fp)
  819168:	18bfca16 	blt	r3,r2,819094 <alt_up_sd_card_find_next+0xc4>
						file_counter = 0;
					} else {
						break;
					}
				}
				result = -1;
  81916c:	00bfffc4 	movi	r2,-1
  819170:	e0bfed0d 	sth	r2,-76(fp)
  819174:	00007a06 	br	819360 <alt_up_sd_card_find_next+0x390>
			} else {
				int file_counter = search_data.file_index_in_sector + 1;
  819178:	008020b4 	movhi	r2,130
  81917c:	1089ee04 	addi	r2,r2,10168
  819180:	1080030b 	ldhu	r2,12(r2)
  819184:	10bfffcc 	andi	r2,r2,65535
  819188:	10a0001c 	xori	r2,r2,32768
  81918c:	10a00004 	addi	r2,r2,-32768
  819190:	10800044 	addi	r2,r2,1
  819194:	e0bfe815 	stw	r2,-96(fp)
				do {
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
  819198:	e0bfec17 	ldw	r2,-80(fp)
  81919c:	10ffff84 	addi	r3,r2,-2
  8191a0:	008020b4 	movhi	r2,130
  8191a4:	1089f304 	addi	r2,r2,10188
  8191a8:	10800383 	ldbu	r2,14(r2)
  8191ac:	10803fcc 	andi	r2,r2,255
  8191b0:	1885383a 	mul	r2,r3,r2
  8191b4:	1007883a 	mov	r3,r2
  8191b8:	008020b4 	movhi	r2,130
  8191bc:	1089f304 	addi	r2,r2,10188
  8191c0:	10801417 	ldw	r2,80(r2)
  8191c4:	1885883a 	add	r2,r3,r2
  8191c8:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
  8191cc:	008020b4 	movhi	r2,130
  8191d0:	1089ee04 	addi	r2,r2,10168
  8191d4:	10800217 	ldw	r2,8(r2)
  8191d8:	e0bfe615 	stw	r2,-104(fp)

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
  8191dc:	00003406 	br	8192b0 <alt_up_sd_card_find_next+0x2e0>
						if (Read_Sector_Data(sector_index + start_sector,
  8191e0:	e0ffe617 	ldw	r3,-104(fp)
  8191e4:	e0bfe717 	ldw	r2,-100(fp)
  8191e8:	1889883a 	add	r4,r3,r2
  8191ec:	d1674e17 	ldw	r5,-25288(gp)
  8191f0:	08160ac0 	call	8160ac <Read_Sector_Data>
  8191f4:	1005003a 	cmpeq	r2,r2,zero
  8191f8:	1000331e 	bne	r2,zero,8192c8 <alt_up_sd_card_find_next+0x2f8>
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
  8191fc:	00002506 	br	819294 <alt_up_sd_card_find_next+0x2c4>
								if (Read_File_Record_At_Offset(file_counter
  819200:	e0bfe817 	ldw	r2,-96(fp)
  819204:	1008917a 	slli	r4,r2,5
  819208:	e1bfec17 	ldw	r6,-80(fp)
  81920c:	e1ffe617 	ldw	r7,-104(fp)
  819210:	e17fee04 	addi	r5,fp,-72
  819214:	08164f40 	call	8164f4 <Read_File_Record_At_Offset>
  819218:	1005003a 	cmpeq	r2,r2,zero
  81921c:	10001a1e 	bne	r2,zero,819288 <alt_up_sd_card_find_next+0x2b8>
										* 32, &file_record, cluster,
										sector_index)) {
									if ((file_record.name[0] != 0)
  819220:	e0bfee03 	ldbu	r2,-72(fp)
  819224:	10803fcc 	andi	r2,r2,255
  819228:	1005003a 	cmpeq	r2,r2,zero
  81922c:	1000161e 	bne	r2,zero,819288 <alt_up_sd_card_find_next+0x2b8>
  819230:	e0bfee03 	ldbu	r2,-72(fp)
  819234:	10803fcc 	andi	r2,r2,255
  819238:	10803960 	cmpeqi	r2,r2,229
  81923c:	1000121e 	bne	r2,zero,819288 <alt_up_sd_card_find_next+0x2b8>
											&& (file_record.name[0] != 0xe5)) {
										/* Update search structure. */
										search_data.current_cluster_index
  819240:	e0ffec17 	ldw	r3,-80(fp)
  819244:	008020b4 	movhi	r2,130
  819248:	1089ee04 	addi	r2,r2,10168
  81924c:	10c00115 	stw	r3,4(r2)
												= cluster;
										search_data.file_index_in_sector
  819250:	e0bfe817 	ldw	r2,-96(fp)
  819254:	1007883a 	mov	r3,r2
  819258:	008020b4 	movhi	r2,130
  81925c:	1089ee04 	addi	r2,r2,10168
  819260:	10c0030d 	sth	r3,12(r2)
												= file_counter;
										search_data.current_sector_in_cluster
  819264:	e0ffe617 	ldw	r3,-104(fp)
  819268:	008020b4 	movhi	r2,130
  81926c:	1089ee04 	addi	r2,r2,10168
  819270:	10c00215 	stw	r3,8(r2)
												= sector_index;

										/* Copy file name.*/
										copy_file_record_name_to_string(
  819274:	e13fee04 	addi	r4,fp,-72
  819278:	e17ffe17 	ldw	r5,-8(fp)
  81927c:	0818ba80 	call	818ba8 <copy_file_record_name_to_string>
												&file_record, file_name);
										return 0;
  819280:	e03fff15 	stw	zero,-4(fp)
  819284:	00003806 	br	819368 <alt_up_sd_card_find_next+0x398>
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
  819288:	e0bfe817 	ldw	r2,-96(fp)
  81928c:	10800044 	addi	r2,r2,1
  819290:	e0bfe815 	stw	r2,-96(fp)
  819294:	e0bfe817 	ldw	r2,-96(fp)
  819298:	10800410 	cmplti	r2,r2,16
  81929c:	103fd81e 	bne	r2,zero,819200 <alt_up_sd_card_find_next+0x230>
												&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
  8192a0:	e03fe815 	stw	zero,-96(fp)
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
  8192a4:	e0bfe617 	ldw	r2,-104(fp)
  8192a8:	10800044 	addi	r2,r2,1
  8192ac:	e0bfe615 	stw	r2,-104(fp)
  8192b0:	008020b4 	movhi	r2,130
  8192b4:	1089f304 	addi	r2,r2,10188
  8192b8:	10800383 	ldbu	r2,14(r2)
  8192bc:	10c03fcc 	andi	r3,r2,255
  8192c0:	e0bfe617 	ldw	r2,-104(fp)
  8192c4:	10ffc616 	blt	r2,r3,8191e0 <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster) {
  8192c8:	008020b4 	movhi	r2,130
  8192cc:	1089f304 	addi	r2,r2,10188
  8192d0:	10800383 	ldbu	r2,14(r2)
  8192d4:	10c03fcc 	andi	r3,r2,255
  8192d8:	e0bfe617 	ldw	r2,-104(fp)
  8192dc:	10c01a16 	blt	r2,r3,819348 <alt_up_sd_card_find_next+0x378>
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster)) {
  8192e0:	e13fec17 	ldw	r4,-80(fp)
  8192e4:	e17fed84 	addi	r5,fp,-74
  8192e8:	08161a80 	call	8161a8 <get_cluster_flag>
  8192ec:	1005003a 	cmpeq	r2,r2,zero
  8192f0:	1000131e 	bne	r2,zero,819340 <alt_up_sd_card_find_next+0x370>
							if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  8192f4:	e0bfed8b 	ldhu	r2,-74(fp)
  8192f8:	10bfffcc 	andi	r2,r2,65535
  8192fc:	10a0001c 	xori	r2,r2,32768
  819300:	10a00004 	addi	r2,r2,-32768
  819304:	10fffe0c 	andi	r3,r2,65528
  819308:	00bffe14 	movui	r2,65528
  81930c:	1880051e 	bne	r3,r2,819324 <alt_up_sd_card_find_next+0x354>
								result = -1;
  819310:	00bfffc4 	movi	r2,-1
  819314:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
  819318:	008020b4 	movhi	r2,130
  81931c:	1089ee04 	addi	r2,r2,10168
  819320:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
  819324:	e0bfed8b 	ldhu	r2,-74(fp)
  819328:	10bfffcc 	andi	r2,r2,65535
  81932c:	10a0001c 	xori	r2,r2,32768
  819330:	10a00004 	addi	r2,r2,-32768
  819334:	10bffe0c 	andi	r2,r2,65528
  819338:	e0bfec15 	stw	r2,-80(fp)
  81933c:	00000206 	br	819348 <alt_up_sd_card_find_next+0x378>
						} else {
							// Error encountered.                 
							result = -1;
  819340:	00bfffc4 	movi	r2,-1
  819344:	e0bfed0d 	sth	r2,-76(fp)
						}
					}
				} while (cluster < 0x0000fff8);
  819348:	e0ffec17 	ldw	r3,-80(fp)
  81934c:	00bffdd4 	movui	r2,65527
  819350:	10ff910e 	bge	r2,r3,819198 <alt_up_sd_card_find_next+0x1c8>
  819354:	00000206 	br	819360 <alt_up_sd_card_find_next+0x390>
			}
		} else {
			// Call Find_First first.
			result = 3;
  819358:	008000c4 	movi	r2,3
  81935c:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
  819360:	e0bfed0f 	ldh	r2,-76(fp)
  819364:	e0bfff15 	stw	r2,-4(fp)
  819368:	e0bfff17 	ldw	r2,-4(fp)
}
  81936c:	e037883a 	mov	sp,fp
  819370:	dfc00117 	ldw	ra,4(sp)
  819374:	df000017 	ldw	fp,0(sp)
  819378:	dec00204 	addi	sp,sp,8
  81937c:	f800283a 	ret

00819380 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
  819380:	deffe804 	addi	sp,sp,-96
  819384:	dfc01715 	stw	ra,92(sp)
  819388:	df001615 	stw	fp,88(sp)
  81938c:	df001604 	addi	fp,sp,88
  819390:	e13ffd15 	stw	r4,-12(fp)
  819394:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
  819398:	00bfffc4 	movi	r2,-1
  81939c:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  8193a0:	0818dc00 	call	818dc0 <alt_up_sd_card_is_Present>
  8193a4:	1005003a 	cmpeq	r2,r2,zero
  8193a8:	1000d71e 	bne	r2,zero,819708 <alt_up_sd_card_fopen+0x388>
  8193ac:	d0a74717 	ldw	r2,-25316(gp)
  8193b0:	1005003a 	cmpeq	r2,r2,zero
  8193b4:	1000d41e 	bne	r2,zero,819708 <alt_up_sd_card_fopen+0x388>
		unsigned int home_directory_cluster = 0;
  8193b8:	e03fec15 	stw	zero,-80(fp)
		 * Rules:
		 *  - no spaces
		 *  - at most 12 chatacters per name, with a period in 9th position.
		 *  - a / or a \ every at most 12 characters.
		 */
		filename_to_upper_case(name);
  8193bc:	e13ffd17 	ldw	r4,-12(fp)
  8193c0:	081717c0 	call	81717c <filename_to_upper_case>
		if (check_file_name_for_FAT16_compliance(name)) {
  8193c4:	e13ffd17 	ldw	r4,-12(fp)
  8193c8:	081724c0 	call	81724c <check_file_name_for_FAT16_compliance>
  8193cc:	1005003a 	cmpeq	r2,r2,zero
  8193d0:	1000cd1e 	bne	r2,zero,819708 <alt_up_sd_card_fopen+0x388>
			int index;

			/* Get home directory cluster location for the specified file. 0 means root directory. */
			if (!get_home_directory_cluster_for_file(name,
  8193d4:	e17fec04 	addi	r5,fp,-80
  8193d8:	e1bfed04 	addi	r6,fp,-76
  8193dc:	e13ffd17 	ldw	r4,-12(fp)
  8193e0:	08178880 	call	817888 <get_home_directory_cluster_for_file>
  8193e4:	1004c03a 	cmpne	r2,r2,zero
  8193e8:	1000031e 	bne	r2,zero,8193f8 <alt_up_sd_card_fopen+0x78>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
  8193ec:	e0bfeb0f 	ldh	r2,-84(fp)
  8193f0:	e0bfff15 	stw	r2,-4(fp)
  8193f4:	0000c606 	br	819710 <alt_up_sd_card_fopen+0x390>
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
  8193f8:	e03fea15 	stw	zero,-88(fp)
  8193fc:	00000f06 	br	81943c <alt_up_sd_card_fopen+0xbc>
				if (active_files[index].in_use == false) {
  819400:	e0bfea17 	ldw	r2,-88(fp)
  819404:	00c020b4 	movhi	r3,130
  819408:	18ca0804 	addi	r3,r3,10272
  81940c:	100491ba 	slli	r2,r2,6
  819410:	10c5883a 	add	r2,r2,r3
  819414:	10800f04 	addi	r2,r2,60
  819418:	10800017 	ldw	r2,0(r2)
  81941c:	1004c03a 	cmpne	r2,r2,zero
  819420:	1000031e 	bne	r2,zero,819430 <alt_up_sd_card_fopen+0xb0>
					file_record_index = index;
  819424:	e0bfea17 	ldw	r2,-88(fp)
  819428:	e0bfeb0d 	sth	r2,-84(fp)
					break;
  81942c:	00000606 	br	819448 <alt_up_sd_card_fopen+0xc8>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
  819430:	e0bfea17 	ldw	r2,-88(fp)
  819434:	10800044 	addi	r2,r2,1
  819438:	e0bfea15 	stw	r2,-88(fp)
  81943c:	e0bfea17 	ldw	r2,-88(fp)
  819440:	10800510 	cmplti	r2,r2,20
  819444:	103fee1e 	bne	r2,zero,819400 <alt_up_sd_card_fopen+0x80>
				if (active_files[index].in_use == false) {
					file_record_index = index;
					break;
				}
			}
			if (file_record_index >= 0) {
  819448:	e0bfeb0f 	ldh	r2,-84(fp)
  81944c:	1004803a 	cmplt	r2,r2,zero
  819450:	1000ad1e 	bne	r2,zero,819708 <alt_up_sd_card_fopen+0x388>
				/* If file record is found, then look for the specified file. If the create flag is set to true
				 * and the file is not found, then it should be created in the current directory.
				 */

				if (find_file_in_directory(home_directory_cluster, name,
  819454:	e0bfec17 	ldw	r2,-80(fp)
  819458:	1009883a 	mov	r4,r2
  81945c:	e0bfeb0f 	ldh	r2,-84(fp)
  819460:	100491ba 	slli	r2,r2,6
  819464:	1007883a 	mov	r3,r2
  819468:	008020b4 	movhi	r2,130
  81946c:	108a0804 	addi	r2,r2,10272
  819470:	188d883a 	add	r6,r3,r2
  819474:	e17ffd17 	ldw	r5,-12(fp)
  819478:	0817d9c0 	call	817d9c <find_file_in_directory>
  81947c:	1005003a 	cmpeq	r2,r2,zero
  819480:	10007d1e 	bne	r2,zero,819678 <alt_up_sd_card_fopen+0x2f8>
						&(active_files[file_record_index]))) {
					if (create) {
  819484:	e0bffe17 	ldw	r2,-8(fp)
  819488:	1005003a 	cmpeq	r2,r2,zero
  81948c:	1000031e 	bne	r2,zero,81949c <alt_up_sd_card_fopen+0x11c>
						/* Do not allow overwriting existing files for now. */
						return -1;
  819490:	00bfffc4 	movi	r2,-1
  819494:	e0bfff15 	stw	r2,-4(fp)
  819498:	00009d06 	br	819710 <alt_up_sd_card_fopen+0x390>
					}
					active_files[file_record_index].current_cluster_index
  81949c:	e17feb0f 	ldh	r5,-84(fp)
  8194a0:	e0bfeb0f 	ldh	r2,-84(fp)
  8194a4:	00c020b4 	movhi	r3,130
  8194a8:	18ca0804 	addi	r3,r3,10272
  8194ac:	100491ba 	slli	r2,r2,6
  8194b0:	10c5883a 	add	r2,r2,r3
  8194b4:	10800504 	addi	r2,r2,20
  8194b8:	1080008b 	ldhu	r2,2(r2)
  8194bc:	113fffcc 	andi	r4,r2,65535
  8194c0:	00c020b4 	movhi	r3,130
  8194c4:	18ca0804 	addi	r3,r3,10272
  8194c8:	280491ba 	slli	r2,r5,6
  8194cc:	10c5883a 	add	r2,r2,r3
  8194d0:	10800704 	addi	r2,r2,28
  8194d4:	11000015 	stw	r4,0(r2)
							= active_files[file_record_index].start_cluster_index;
					active_files[file_record_index].current_sector_in_cluster
  8194d8:	e0bfeb0f 	ldh	r2,-84(fp)
  8194dc:	00c020b4 	movhi	r3,130
  8194e0:	18ca0804 	addi	r3,r3,10272
  8194e4:	100491ba 	slli	r2,r2,6
  8194e8:	10c5883a 	add	r2,r2,r3
  8194ec:	10800804 	addi	r2,r2,32
  8194f0:	10000015 	stw	zero,0(r2)
							= 0;
					active_files[file_record_index].current_byte_position = 0;
  8194f4:	e0bfeb0f 	ldh	r2,-84(fp)
  8194f8:	00c020b4 	movhi	r3,130
  8194fc:	18ca0804 	addi	r3,r3,10272
  819500:	100491ba 	slli	r2,r2,6
  819504:	10c5883a 	add	r2,r2,r3
  819508:	10800904 	addi	r2,r2,36
  81950c:	10000015 	stw	zero,0(r2)
					active_files[file_record_index].in_use = true;
  819510:	e0bfeb0f 	ldh	r2,-84(fp)
  819514:	00c020b4 	movhi	r3,130
  819518:	18ca0804 	addi	r3,r3,10272
  81951c:	100491ba 	slli	r2,r2,6
  819520:	10c5883a 	add	r2,r2,r3
  819524:	10c00f04 	addi	r3,r2,60
  819528:	00800044 	movi	r2,1
  81952c:	18800015 	stw	r2,0(r3)
					active_files[file_record_index].modified = false;
  819530:	e0bfeb0f 	ldh	r2,-84(fp)
  819534:	00c020b4 	movhi	r3,130
  819538:	18ca0804 	addi	r3,r3,10272
  81953c:	100491ba 	slli	r2,r2,6
  819540:	10c5883a 	add	r2,r2,r3
  819544:	10800e04 	addi	r2,r2,56
  819548:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
  81954c:	e03fea15 	stw	zero,-88(fp)
  819550:	00004506 	br	819668 <alt_up_sd_card_fopen+0x2e8>
						if ((file_record_index != index)
  819554:	e0ffeb0f 	ldh	r3,-84(fp)
  819558:	e0bfea17 	ldw	r2,-88(fp)
  81955c:	18803f26 	beq	r3,r2,81965c <alt_up_sd_card_fopen+0x2dc>
  819560:	e0bfea17 	ldw	r2,-88(fp)
  819564:	00c020b4 	movhi	r3,130
  819568:	18ca0804 	addi	r3,r3,10272
  81956c:	100491ba 	slli	r2,r2,6
  819570:	10c5883a 	add	r2,r2,r3
  819574:	10800f04 	addi	r2,r2,60
  819578:	10800017 	ldw	r2,0(r2)
  81957c:	10800058 	cmpnei	r2,r2,1
  819580:	1000361e 	bne	r2,zero,81965c <alt_up_sd_card_fopen+0x2dc>
								&& (active_files[index].in_use == true)) {
							if ((active_files[file_record_index].file_record_cluster
  819584:	e0bfeb0f 	ldh	r2,-84(fp)
  819588:	00c020b4 	movhi	r3,130
  81958c:	18ca0804 	addi	r3,r3,10272
  819590:	100491ba 	slli	r2,r2,6
  819594:	10c5883a 	add	r2,r2,r3
  819598:	10800a04 	addi	r2,r2,40
  81959c:	11000017 	ldw	r4,0(r2)
  8195a0:	e0bfea17 	ldw	r2,-88(fp)
  8195a4:	00c020b4 	movhi	r3,130
  8195a8:	18ca0804 	addi	r3,r3,10272
  8195ac:	100491ba 	slli	r2,r2,6
  8195b0:	10c5883a 	add	r2,r2,r3
  8195b4:	10800a04 	addi	r2,r2,40
  8195b8:	10800017 	ldw	r2,0(r2)
  8195bc:	2080271e 	bne	r4,r2,81965c <alt_up_sd_card_fopen+0x2dc>
  8195c0:	e0bfeb0f 	ldh	r2,-84(fp)
  8195c4:	00c020b4 	movhi	r3,130
  8195c8:	18ca0804 	addi	r3,r3,10272
  8195cc:	100491ba 	slli	r2,r2,6
  8195d0:	10c5883a 	add	r2,r2,r3
  8195d4:	10800b04 	addi	r2,r2,44
  8195d8:	11000017 	ldw	r4,0(r2)
  8195dc:	e0bfea17 	ldw	r2,-88(fp)
  8195e0:	00c020b4 	movhi	r3,130
  8195e4:	18ca0804 	addi	r3,r3,10272
  8195e8:	100491ba 	slli	r2,r2,6
  8195ec:	10c5883a 	add	r2,r2,r3
  8195f0:	10800b04 	addi	r2,r2,44
  8195f4:	10800017 	ldw	r2,0(r2)
  8195f8:	2080181e 	bne	r4,r2,81965c <alt_up_sd_card_fopen+0x2dc>
  8195fc:	e0bfeb0f 	ldh	r2,-84(fp)
  819600:	00c020b4 	movhi	r3,130
  819604:	18ca0804 	addi	r3,r3,10272
  819608:	100491ba 	slli	r2,r2,6
  81960c:	10c5883a 	add	r2,r2,r3
  819610:	10800c04 	addi	r2,r2,48
  819614:	1100000b 	ldhu	r4,0(r2)
  819618:	e0bfea17 	ldw	r2,-88(fp)
  81961c:	00c020b4 	movhi	r3,130
  819620:	18ca0804 	addi	r3,r3,10272
  819624:	100491ba 	slli	r2,r2,6
  819628:	10c5883a 	add	r2,r2,r3
  81962c:	10800c04 	addi	r2,r2,48
  819630:	1080000b 	ldhu	r2,0(r2)
  819634:	20ffffcc 	andi	r3,r4,65535
  819638:	18e0001c 	xori	r3,r3,32768
  81963c:	18e00004 	addi	r3,r3,-32768
  819640:	10bfffcc 	andi	r2,r2,65535
  819644:	10a0001c 	xori	r2,r2,32768
  819648:	10a00004 	addi	r2,r2,-32768
  81964c:	1880031e 	bne	r3,r2,81965c <alt_up_sd_card_fopen+0x2dc>
									&& (active_files[file_record_index].file_record_sector_in_cluster
											== active_files[index].file_record_sector_in_cluster)
									&& (active_files[file_record_index].file_record_offset
											== active_files[index].file_record_offset)) {
								// file already in use.
								file_record_index = -2;
  819650:	00bfff84 	movi	r2,-2
  819654:	e0bfeb0d 	sth	r2,-84(fp)
								break;
  819658:	00002b06 	br	819708 <alt_up_sd_card_fopen+0x388>
					active_files[file_record_index].current_byte_position = 0;
					active_files[file_record_index].in_use = true;
					active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
  81965c:	e0bfea17 	ldw	r2,-88(fp)
  819660:	10800044 	addi	r2,r2,1
  819664:	e0bfea15 	stw	r2,-88(fp)
  819668:	e0bfea17 	ldw	r2,-88(fp)
  81966c:	10800510 	cmplti	r2,r2,20
  819670:	103fb81e 	bne	r2,zero,819554 <alt_up_sd_card_fopen+0x1d4>
  819674:	00002406 	br	819708 <alt_up_sd_card_fopen+0x388>
								break;
							}
						}
					}

				} else if (create) {
  819678:	e0bffe17 	ldw	r2,-8(fp)
  81967c:	1005003a 	cmpeq	r2,r2,zero
  819680:	10001f1e 	bne	r2,zero,819700 <alt_up_sd_card_fopen+0x380>
					/* Create file if needed. */
					if (create_file(name, &(active_files[file_record_index]),
  819684:	e0bfeb0f 	ldh	r2,-84(fp)
  819688:	100491ba 	slli	r2,r2,6
  81968c:	1007883a 	mov	r3,r2
  819690:	008020b4 	movhi	r2,130
  819694:	108a0804 	addi	r2,r2,10272
  819698:	188b883a 	add	r5,r3,r2
  81969c:	e1bfed04 	addi	r6,fp,-76
  8196a0:	e13ffd17 	ldw	r4,-12(fp)
  8196a4:	08188d40 	call	8188d4 <create_file>
  8196a8:	1005003a 	cmpeq	r2,r2,zero
  8196ac:	1000111e 	bne	r2,zero,8196f4 <alt_up_sd_card_fopen+0x374>
							&home_dir)) {
						active_files[file_record_index].in_use = true;
  8196b0:	e0bfeb0f 	ldh	r2,-84(fp)
  8196b4:	00c020b4 	movhi	r3,130
  8196b8:	18ca0804 	addi	r3,r3,10272
  8196bc:	100491ba 	slli	r2,r2,6
  8196c0:	10c5883a 	add	r2,r2,r3
  8196c4:	10c00f04 	addi	r3,r2,60
  8196c8:	00800044 	movi	r2,1
  8196cc:	18800015 	stw	r2,0(r3)
						active_files[file_record_index].modified = true;
  8196d0:	e0bfeb0f 	ldh	r2,-84(fp)
  8196d4:	00c020b4 	movhi	r3,130
  8196d8:	18ca0804 	addi	r3,r3,10272
  8196dc:	100491ba 	slli	r2,r2,6
  8196e0:	10c5883a 	add	r2,r2,r3
  8196e4:	10c00e04 	addi	r3,r2,56
  8196e8:	00800044 	movi	r2,1
  8196ec:	18800015 	stw	r2,0(r3)
  8196f0:	00000506 	br	819708 <alt_up_sd_card_fopen+0x388>
					} else {
						/* If file creation fails then return an invalid file handle. */
						file_record_index = -1;
  8196f4:	00bfffc4 	movi	r2,-1
  8196f8:	e0bfeb0d 	sth	r2,-84(fp)
  8196fc:	00000206 	br	819708 <alt_up_sd_card_fopen+0x388>
					}
				} else {
					/* Otherwise the file could not be opened.*/
					file_record_index = -1;
  819700:	00bfffc4 	movi	r2,-1
  819704:	e0bfeb0d 	sth	r2,-84(fp)
				}
			}
		}
	}

	return file_record_index;
  819708:	e0bfeb0f 	ldh	r2,-84(fp)
  81970c:	e0bfff15 	stw	r2,-4(fp)
  819710:	e0bfff17 	ldw	r2,-4(fp)
}
  819714:	e037883a 	mov	sp,fp
  819718:	dfc00117 	ldw	ra,4(sp)
  81971c:	df000017 	ldw	fp,0(sp)
  819720:	dec00204 	addi	sp,sp,8
  819724:	f800283a 	ret

00819728 <alt_up_sd_card_set_attributes>:

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  819728:	defffd04 	addi	sp,sp,-12
  81972c:	df000215 	stw	fp,8(sp)
  819730:	df000204 	addi	fp,sp,8
  819734:	e13ffe0d 	sth	r4,-8(fp)
  819738:	e17fff0d 	sth	r5,-4(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  81973c:	e0bffe0f 	ldh	r2,-8(fp)
  819740:	1004803a 	cmplt	r2,r2,zero
  819744:	1000181e 	bne	r2,zero,8197a8 <alt_up_sd_card_set_attributes+0x80>
  819748:	e0bffe0f 	ldh	r2,-8(fp)
  81974c:	10800508 	cmpgei	r2,r2,20
  819750:	1000151e 	bne	r2,zero,8197a8 <alt_up_sd_card_set_attributes+0x80>
		if (active_files[file_handle].in_use) {
  819754:	e0bffe0f 	ldh	r2,-8(fp)
  819758:	00c020b4 	movhi	r3,130
  81975c:	18ca0804 	addi	r3,r3,10272
  819760:	100491ba 	slli	r2,r2,6
  819764:	10c5883a 	add	r2,r2,r3
  819768:	10800f04 	addi	r2,r2,60
  81976c:	10800017 	ldw	r2,0(r2)
  819770:	1005003a 	cmpeq	r2,r2,zero
  819774:	10000c1e 	bne	r2,zero,8197a8 <alt_up_sd_card_set_attributes+0x80>
			active_files[file_handle].attributes
  819778:	e17ffe0f 	ldh	r5,-8(fp)
  81977c:	e0bfff0b 	ldhu	r2,-4(fp)
  819780:	1007883a 	mov	r3,r2
  819784:	00bfffc4 	movi	r2,-1
  819788:	1884703a 	and	r2,r3,r2
  81978c:	1009883a 	mov	r4,r2
  819790:	00c020b4 	movhi	r3,130
  819794:	18ca0804 	addi	r3,r3,10272
  819798:	280491ba 	slli	r2,r5,6
  81979c:	10c5883a 	add	r2,r2,r3
  8197a0:	10800204 	addi	r2,r2,8
  8197a4:	110000c5 	stb	r4,3(r2)
					= ((char) (attributes & 0x00ff));
		}
	}
}
  8197a8:	e037883a 	mov	sp,fp
  8197ac:	df000017 	ldw	fp,0(sp)
  8197b0:	dec00104 	addi	sp,sp,4
  8197b4:	f800283a 	ret

008197b8 <alt_up_sd_card_get_attributes>:

short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  8197b8:	defffd04 	addi	sp,sp,-12
  8197bc:	df000215 	stw	fp,8(sp)
  8197c0:	df000204 	addi	fp,sp,8
  8197c4:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
  8197c8:	00bfffc4 	movi	r2,-1
  8197cc:	e0bffe0d 	sth	r2,-8(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  8197d0:	e0bfff0f 	ldh	r2,-4(fp)
  8197d4:	1004803a 	cmplt	r2,r2,zero
  8197d8:	1000151e 	bne	r2,zero,819830 <alt_up_sd_card_get_attributes+0x78>
  8197dc:	e0bfff0f 	ldh	r2,-4(fp)
  8197e0:	10800508 	cmpgei	r2,r2,20
  8197e4:	1000121e 	bne	r2,zero,819830 <alt_up_sd_card_get_attributes+0x78>
		if (active_files[file_handle].in_use) {
  8197e8:	e0bfff0f 	ldh	r2,-4(fp)
  8197ec:	00c020b4 	movhi	r3,130
  8197f0:	18ca0804 	addi	r3,r3,10272
  8197f4:	100491ba 	slli	r2,r2,6
  8197f8:	10c5883a 	add	r2,r2,r3
  8197fc:	10800f04 	addi	r2,r2,60
  819800:	10800017 	ldw	r2,0(r2)
  819804:	1005003a 	cmpeq	r2,r2,zero
  819808:	1000091e 	bne	r2,zero,819830 <alt_up_sd_card_get_attributes+0x78>
			result = ((active_files[file_handle].attributes) & 0x00ff);
  81980c:	e0bfff0f 	ldh	r2,-4(fp)
  819810:	00c020b4 	movhi	r3,130
  819814:	18ca0804 	addi	r3,r3,10272
  819818:	100491ba 	slli	r2,r2,6
  81981c:	10c5883a 	add	r2,r2,r3
  819820:	10800204 	addi	r2,r2,8
  819824:	108000c3 	ldbu	r2,3(r2)
  819828:	10803fcc 	andi	r2,r2,255
  81982c:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
  819830:	e0bffe0f 	ldh	r2,-8(fp)
}
  819834:	e037883a 	mov	sp,fp
  819838:	df000017 	ldw	fp,0(sp)
  81983c:	dec00104 	addi	sp,sp,4
  819840:	f800283a 	ret

00819844 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
  819844:	defffa04 	addi	sp,sp,-24
  819848:	dfc00515 	stw	ra,20(sp)
  81984c:	df000415 	stw	fp,16(sp)
  819850:	df000404 	addi	fp,sp,16
  819854:	e13ffe0d 	sth	r4,-8(fp)
	short int ch = -1;
  819858:	00bfffc4 	movi	r2,-1
  81985c:	e0bffd0d 	sth	r2,-12(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  819860:	e0bffe0f 	ldh	r2,-8(fp)
  819864:	1004803a 	cmplt	r2,r2,zero
  819868:	1000d31e 	bne	r2,zero,819bb8 <alt_up_sd_card_read+0x374>
  81986c:	e0bffe0f 	ldh	r2,-8(fp)
  819870:	10800508 	cmpgei	r2,r2,20
  819874:	1000d01e 	bne	r2,zero,819bb8 <alt_up_sd_card_read+0x374>
		if (active_files[file_handle].in_use) {
  819878:	e0bffe0f 	ldh	r2,-8(fp)
  81987c:	00c020b4 	movhi	r3,130
  819880:	18ca0804 	addi	r3,r3,10272
  819884:	100491ba 	slli	r2,r2,6
  819888:	10c5883a 	add	r2,r2,r3
  81988c:	10800f04 	addi	r2,r2,60
  819890:	10800017 	ldw	r2,0(r2)
  819894:	1005003a 	cmpeq	r2,r2,zero
  819898:	1000c71e 	bne	r2,zero,819bb8 <alt_up_sd_card_read+0x374>
			if (active_files[file_handle].current_byte_position
  81989c:	e0bffe0f 	ldh	r2,-8(fp)
  8198a0:	00c020b4 	movhi	r3,130
  8198a4:	18ca0804 	addi	r3,r3,10272
  8198a8:	100491ba 	slli	r2,r2,6
  8198ac:	10c5883a 	add	r2,r2,r3
  8198b0:	10800904 	addi	r2,r2,36
  8198b4:	11000017 	ldw	r4,0(r2)
  8198b8:	e0bffe0f 	ldh	r2,-8(fp)
  8198bc:	00c020b4 	movhi	r3,130
  8198c0:	18ca0804 	addi	r3,r3,10272
  8198c4:	100491ba 	slli	r2,r2,6
  8198c8:	10c5883a 	add	r2,r2,r3
  8198cc:	10800604 	addi	r2,r2,24
  8198d0:	10800017 	ldw	r2,0(r2)
  8198d4:	2080b82e 	bgeu	r4,r2,819bb8 <alt_up_sd_card_read+0x374>
					< active_files[file_handle].file_size_in_bytes) {
				int data_sector = boot_sector_data.data_sector_offset
						+ (active_files[file_handle].current_cluster_index - 2)
								* boot_sector_data.sectors_per_cluster
						+ active_files[file_handle].current_sector_in_cluster;
  8198d8:	008020b4 	movhi	r2,130
  8198dc:	1089f304 	addi	r2,r2,10188
  8198e0:	11001417 	ldw	r4,80(r2)
  8198e4:	e0bffe0f 	ldh	r2,-8(fp)
  8198e8:	00c020b4 	movhi	r3,130
  8198ec:	18ca0804 	addi	r3,r3,10272
  8198f0:	100491ba 	slli	r2,r2,6
  8198f4:	10c5883a 	add	r2,r2,r3
  8198f8:	10800704 	addi	r2,r2,28
  8198fc:	10800017 	ldw	r2,0(r2)
  819900:	10ffff84 	addi	r3,r2,-2
  819904:	008020b4 	movhi	r2,130
  819908:	1089f304 	addi	r2,r2,10188
  81990c:	10800383 	ldbu	r2,14(r2)
  819910:	10803fcc 	andi	r2,r2,255
  819914:	1885383a 	mul	r2,r3,r2
  819918:	2089883a 	add	r4,r4,r2
  81991c:	e0bffe0f 	ldh	r2,-8(fp)
  819920:	00c020b4 	movhi	r3,130
  819924:	18ca0804 	addi	r3,r3,10272
  819928:	100491ba 	slli	r2,r2,6
  81992c:	10c5883a 	add	r2,r2,r3
  819930:	10800804 	addi	r2,r2,32
  819934:	10800017 	ldw	r2,0(r2)
  819938:	2085883a 	add	r2,r4,r2
  81993c:	e0bffc15 	stw	r2,-16(fp)

				if ((active_files[file_handle].current_byte_position > 0)
  819940:	e0bffe0f 	ldh	r2,-8(fp)
  819944:	00c020b4 	movhi	r3,130
  819948:	18ca0804 	addi	r3,r3,10272
  81994c:	100491ba 	slli	r2,r2,6
  819950:	10c5883a 	add	r2,r2,r3
  819954:	10800904 	addi	r2,r2,36
  819958:	10800017 	ldw	r2,0(r2)
  81995c:	1005003a 	cmpeq	r2,r2,zero
  819960:	10006a1e 	bne	r2,zero,819b0c <alt_up_sd_card_read+0x2c8>
  819964:	e0bffe0f 	ldh	r2,-8(fp)
  819968:	00c020b4 	movhi	r3,130
  81996c:	18ca0804 	addi	r3,r3,10272
  819970:	100491ba 	slli	r2,r2,6
  819974:	10c5883a 	add	r2,r2,r3
  819978:	10800904 	addi	r2,r2,36
  81997c:	10800017 	ldw	r2,0(r2)
  819980:	10807fcc 	andi	r2,r2,511
  819984:	1004c03a 	cmpne	r2,r2,zero
  819988:	1000601e 	bne	r2,zero,819b0c <alt_up_sd_card_read+0x2c8>
						&& ((active_files[file_handle].current_byte_position
								% 512) == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
  81998c:	e0bffe0f 	ldh	r2,-8(fp)
  819990:	00c020b4 	movhi	r3,130
  819994:	18ca0804 	addi	r3,r3,10272
  819998:	100491ba 	slli	r2,r2,6
  81999c:	10c5883a 	add	r2,r2,r3
  8199a0:	10800804 	addi	r2,r2,32
  8199a4:	10c00017 	ldw	r3,0(r2)
  8199a8:	008020b4 	movhi	r2,130
  8199ac:	1089f304 	addi	r2,r2,10188
  8199b0:	10800383 	ldbu	r2,14(r2)
  8199b4:	10803fcc 	andi	r2,r2,255
  8199b8:	10bfffc4 	addi	r2,r2,-1
  8199bc:	1880411e 	bne	r3,r2,819ac4 <alt_up_sd_card_read+0x280>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
  8199c0:	e0bffe0f 	ldh	r2,-8(fp)
  8199c4:	00c020b4 	movhi	r3,130
  8199c8:	18ca0804 	addi	r3,r3,10272
  8199cc:	100491ba 	slli	r2,r2,6
  8199d0:	10c5883a 	add	r2,r2,r3
  8199d4:	10800704 	addi	r2,r2,28
  8199d8:	11000017 	ldw	r4,0(r2)
  8199dc:	e17ffd84 	addi	r5,fp,-10
  8199e0:	08161a80 	call	8161a8 <get_cluster_flag>
  8199e4:	1005003a 	cmpeq	r2,r2,zero
  8199e8:	1000331e 	bne	r2,zero,819ab8 <alt_up_sd_card_read+0x274>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
  8199ec:	e0bffd8b 	ldhu	r2,-10(fp)
  8199f0:	10bfffcc 	andi	r2,r2,65535
  8199f4:	10fffe0c 	andi	r3,r2,65528
  8199f8:	00bffe14 	movui	r2,65528
  8199fc:	1880031e 	bne	r3,r2,819a0c <alt_up_sd_card_read+0x1c8>
								/* End of file */
								return -1;
  819a00:	00bfffc4 	movi	r2,-1
  819a04:	e0bfff15 	stw	r2,-4(fp)
  819a08:	00006d06 	br	819bc0 <alt_up_sd_card_read+0x37c>
							} else {
								active_files[file_handle].current_cluster_index
  819a0c:	e13ffe0f 	ldh	r4,-8(fp)
  819a10:	e0bffd8b 	ldhu	r2,-10(fp)
  819a14:	117fffcc 	andi	r5,r2,65535
  819a18:	00c020b4 	movhi	r3,130
  819a1c:	18ca0804 	addi	r3,r3,10272
  819a20:	200491ba 	slli	r2,r4,6
  819a24:	10c5883a 	add	r2,r2,r3
  819a28:	10800704 	addi	r2,r2,28
  819a2c:	11400015 	stw	r5,0(r2)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
  819a30:	e0bffe0f 	ldh	r2,-8(fp)
  819a34:	00c020b4 	movhi	r3,130
  819a38:	18ca0804 	addi	r3,r3,10272
  819a3c:	100491ba 	slli	r2,r2,6
  819a40:	10c5883a 	add	r2,r2,r3
  819a44:	10800804 	addi	r2,r2,32
  819a48:	10000015 	stw	zero,0(r2)
										= 0;
								data_sector
  819a4c:	008020b4 	movhi	r2,130
  819a50:	1089f304 	addi	r2,r2,10188
  819a54:	11001417 	ldw	r4,80(r2)
  819a58:	e0bffe0f 	ldh	r2,-8(fp)
  819a5c:	00c020b4 	movhi	r3,130
  819a60:	18ca0804 	addi	r3,r3,10272
  819a64:	100491ba 	slli	r2,r2,6
  819a68:	10c5883a 	add	r2,r2,r3
  819a6c:	10800704 	addi	r2,r2,28
  819a70:	10800017 	ldw	r2,0(r2)
  819a74:	10ffff84 	addi	r3,r2,-2
  819a78:	008020b4 	movhi	r2,130
  819a7c:	1089f304 	addi	r2,r2,10188
  819a80:	10800383 	ldbu	r2,14(r2)
  819a84:	10803fcc 	andi	r2,r2,255
  819a88:	1885383a 	mul	r2,r3,r2
  819a8c:	2089883a 	add	r4,r4,r2
  819a90:	e0bffe0f 	ldh	r2,-8(fp)
  819a94:	00c020b4 	movhi	r3,130
  819a98:	18ca0804 	addi	r3,r3,10272
  819a9c:	100491ba 	slli	r2,r2,6
  819aa0:	10c5883a 	add	r2,r2,r3
  819aa4:	10800804 	addi	r2,r2,32
  819aa8:	10800017 	ldw	r2,0(r2)
  819aac:	2085883a 	add	r2,r4,r2
  819ab0:	e0bffc15 	stw	r2,-16(fp)
  819ab4:	00001506 	br	819b0c <alt_up_sd_card_read+0x2c8>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return -2;
  819ab8:	00bfff84 	movi	r2,-2
  819abc:	e0bfff15 	stw	r2,-4(fp)
  819ac0:	00003f06 	br	819bc0 <alt_up_sd_card_read+0x37c>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
  819ac4:	e17ffe0f 	ldh	r5,-8(fp)
  819ac8:	e0bffe0f 	ldh	r2,-8(fp)
  819acc:	00c020b4 	movhi	r3,130
  819ad0:	18ca0804 	addi	r3,r3,10272
  819ad4:	100491ba 	slli	r2,r2,6
  819ad8:	10c5883a 	add	r2,r2,r3
  819adc:	10800804 	addi	r2,r2,32
  819ae0:	10800017 	ldw	r2,0(r2)
  819ae4:	11000044 	addi	r4,r2,1
  819ae8:	00c020b4 	movhi	r3,130
  819aec:	18ca0804 	addi	r3,r3,10272
  819af0:	280491ba 	slli	r2,r5,6
  819af4:	10c5883a 	add	r2,r2,r3
  819af8:	10800804 	addi	r2,r2,32
  819afc:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
  819b00:	e0bffc17 	ldw	r2,-16(fp)
  819b04:	10800044 	addi	r2,r2,1
  819b08:	e0bffc15 	stw	r2,-16(fp)
					}
				}
				// Reading te first byte of the file.
				if (current_sector_index != (data_sector
  819b0c:	d0e74e17 	ldw	r3,-25288(gp)
  819b10:	e0bffc17 	ldw	r2,-16(fp)
  819b14:	1885883a 	add	r2,r3,r2
  819b18:	1007883a 	mov	r3,r2
  819b1c:	d0a75217 	ldw	r2,-25272(gp)
  819b20:	18800826 	beq	r3,r2,819b44 <alt_up_sd_card_read+0x300>
						+ fat_partition_offset_in_512_byte_sectors)) {
					if (!Read_Sector_Data(data_sector,
  819b24:	d1674e17 	ldw	r5,-25288(gp)
  819b28:	e13ffc17 	ldw	r4,-16(fp)
  819b2c:	08160ac0 	call	8160ac <Read_Sector_Data>
  819b30:	1004c03a 	cmpne	r2,r2,zero
  819b34:	1000031e 	bne	r2,zero,819b44 <alt_up_sd_card_read+0x300>
							fat_partition_offset_in_512_byte_sectors)) {
						return -2;
  819b38:	00bfff84 	movi	r2,-2
  819b3c:	e0bfff15 	stw	r2,-4(fp)
  819b40:	00001f06 	br	819bc0 <alt_up_sd_card_read+0x37c>
					}
				}

				ch
  819b44:	e0bffe0f 	ldh	r2,-8(fp)
  819b48:	00c020b4 	movhi	r3,130
  819b4c:	18ca0804 	addi	r3,r3,10272
  819b50:	100491ba 	slli	r2,r2,6
  819b54:	10c5883a 	add	r2,r2,r3
  819b58:	10800904 	addi	r2,r2,36
  819b5c:	10800017 	ldw	r2,0(r2)
  819b60:	10807fcc 	andi	r2,r2,511
  819b64:	1007883a 	mov	r3,r2
  819b68:	d0a74d17 	ldw	r2,-25292(gp)
  819b6c:	1885883a 	add	r2,r3,r2
  819b70:	10800023 	ldbuio	r2,0(r2)
  819b74:	10803fcc 	andi	r2,r2,255
  819b78:	e0bffd0d 	sth	r2,-12(fp)
						= (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
				active_files[file_handle].current_byte_position
  819b7c:	e17ffe0f 	ldh	r5,-8(fp)
  819b80:	e0bffe0f 	ldh	r2,-8(fp)
  819b84:	00c020b4 	movhi	r3,130
  819b88:	18ca0804 	addi	r3,r3,10272
  819b8c:	100491ba 	slli	r2,r2,6
  819b90:	10c5883a 	add	r2,r2,r3
  819b94:	10800904 	addi	r2,r2,36
  819b98:	10800017 	ldw	r2,0(r2)
  819b9c:	11000044 	addi	r4,r2,1
  819ba0:	00c020b4 	movhi	r3,130
  819ba4:	18ca0804 	addi	r3,r3,10272
  819ba8:	280491ba 	slli	r2,r5,6
  819bac:	10c5883a 	add	r2,r2,r3
  819bb0:	10800904 	addi	r2,r2,36
  819bb4:	11000015 	stw	r4,0(r2)
						= active_files[file_handle].current_byte_position + 1;
			}
		}
	}

	return ch;
  819bb8:	e0bffd0f 	ldh	r2,-12(fp)
  819bbc:	e0bfff15 	stw	r2,-4(fp)
  819bc0:	e0bfff17 	ldw	r2,-4(fp)
}
  819bc4:	e037883a 	mov	sp,fp
  819bc8:	dfc00117 	ldw	ra,4(sp)
  819bcc:	df000017 	ldw	fp,0(sp)
  819bd0:	dec00204 	addi	sp,sp,8
  819bd4:	f800283a 	ret

00819bd8 <alt_up_sd_card_write>:

bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
  819bd8:	defff504 	addi	sp,sp,-44
  819bdc:	dfc00a15 	stw	ra,40(sp)
  819be0:	df000915 	stw	fp,36(sp)
  819be4:	dc000815 	stw	r16,32(sp)
  819be8:	df000804 	addi	fp,sp,32
  819bec:	e13ffd0d 	sth	r4,-12(fp)
  819bf0:	e17ffe05 	stb	r5,-8(fp)
	bool result = false;
  819bf4:	e03ffa15 	stw	zero,-24(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  819bf8:	e0bffd0f 	ldh	r2,-12(fp)
  819bfc:	1004803a 	cmplt	r2,r2,zero
  819c00:	1001751e 	bne	r2,zero,81a1d8 <alt_up_sd_card_write+0x600>
  819c04:	e0bffd0f 	ldh	r2,-12(fp)
  819c08:	10800508 	cmpgei	r2,r2,20
  819c0c:	1001721e 	bne	r2,zero,81a1d8 <alt_up_sd_card_write+0x600>
		if (active_files[file_handle].in_use) {
  819c10:	e0bffd0f 	ldh	r2,-12(fp)
  819c14:	00c020b4 	movhi	r3,130
  819c18:	18ca0804 	addi	r3,r3,10272
  819c1c:	100491ba 	slli	r2,r2,6
  819c20:	10c5883a 	add	r2,r2,r3
  819c24:	10800f04 	addi	r2,r2,60
  819c28:	10800017 	ldw	r2,0(r2)
  819c2c:	1005003a 	cmpeq	r2,r2,zero
  819c30:	1001691e 	bne	r2,zero,81a1d8 <alt_up_sd_card_write+0x600>
			int data_sector = boot_sector_data.data_sector_offset
					+ (active_files[file_handle].current_cluster_index - 2)
							* boot_sector_data.sectors_per_cluster
					+ active_files[file_handle].current_sector_in_cluster;
  819c34:	008020b4 	movhi	r2,130
  819c38:	1089f304 	addi	r2,r2,10188
  819c3c:	11001417 	ldw	r4,80(r2)
  819c40:	e0bffd0f 	ldh	r2,-12(fp)
  819c44:	00c020b4 	movhi	r3,130
  819c48:	18ca0804 	addi	r3,r3,10272
  819c4c:	100491ba 	slli	r2,r2,6
  819c50:	10c5883a 	add	r2,r2,r3
  819c54:	10800704 	addi	r2,r2,28
  819c58:	10800017 	ldw	r2,0(r2)
  819c5c:	10ffff84 	addi	r3,r2,-2
  819c60:	008020b4 	movhi	r2,130
  819c64:	1089f304 	addi	r2,r2,10188
  819c68:	10800383 	ldbu	r2,14(r2)
  819c6c:	10803fcc 	andi	r2,r2,255
  819c70:	1885383a 	mul	r2,r3,r2
  819c74:	2089883a 	add	r4,r4,r2
  819c78:	e0bffd0f 	ldh	r2,-12(fp)
  819c7c:	00c020b4 	movhi	r3,130
  819c80:	18ca0804 	addi	r3,r3,10272
  819c84:	100491ba 	slli	r2,r2,6
  819c88:	10c5883a 	add	r2,r2,r3
  819c8c:	10800804 	addi	r2,r2,32
  819c90:	10800017 	ldw	r2,0(r2)
  819c94:	2085883a 	add	r2,r4,r2
  819c98:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset =
					active_files[file_handle].current_byte_position
							% boot_sector_data.sector_size_in_bytes;
  819c9c:	e0bffd0f 	ldh	r2,-12(fp)
  819ca0:	00c020b4 	movhi	r3,130
  819ca4:	18ca0804 	addi	r3,r3,10272
  819ca8:	100491ba 	slli	r2,r2,6
  819cac:	10c5883a 	add	r2,r2,r3
  819cb0:	10800904 	addi	r2,r2,36
  819cb4:	11000017 	ldw	r4,0(r2)
  819cb8:	008020b4 	movhi	r2,130
  819cbc:	1089f304 	addi	r2,r2,10188
  819cc0:	1080030b 	ldhu	r2,12(r2)
  819cc4:	117fffcc 	andi	r5,r2,65535
  819cc8:	08086600 	call	808660 <__umodsi3>
  819ccc:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position
  819cd0:	e0bffd0f 	ldh	r2,-12(fp)
  819cd4:	00c020b4 	movhi	r3,130
  819cd8:	18ca0804 	addi	r3,r3,10272
  819cdc:	100491ba 	slli	r2,r2,6
  819ce0:	10c5883a 	add	r2,r2,r3
  819ce4:	10800904 	addi	r2,r2,36
  819ce8:	11000017 	ldw	r4,0(r2)
  819cec:	e0bffd0f 	ldh	r2,-12(fp)
  819cf0:	00c020b4 	movhi	r3,130
  819cf4:	18ca0804 	addi	r3,r3,10272
  819cf8:	100491ba 	slli	r2,r2,6
  819cfc:	10c5883a 	add	r2,r2,r3
  819d00:	10800604 	addi	r2,r2,24
  819d04:	10800017 	ldw	r2,0(r2)
  819d08:	2080682e 	bgeu	r4,r2,819eac <alt_up_sd_card_write+0x2d4>
					< active_files[file_handle].file_size_in_bytes) {
				if ((active_files[file_handle].current_byte_position > 0)
  819d0c:	e0bffd0f 	ldh	r2,-12(fp)
  819d10:	00c020b4 	movhi	r3,130
  819d14:	18ca0804 	addi	r3,r3,10272
  819d18:	100491ba 	slli	r2,r2,6
  819d1c:	10c5883a 	add	r2,r2,r3
  819d20:	10800904 	addi	r2,r2,36
  819d24:	10800017 	ldw	r2,0(r2)
  819d28:	1005003a 	cmpeq	r2,r2,zero
  819d2c:	1000de1e 	bne	r2,zero,81a0a8 <alt_up_sd_card_write+0x4d0>
  819d30:	e0bff80f 	ldh	r2,-32(fp)
  819d34:	1004c03a 	cmpne	r2,r2,zero
  819d38:	1000db1e 	bne	r2,zero,81a0a8 <alt_up_sd_card_write+0x4d0>
						&& (buffer_offset == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
  819d3c:	e0bffd0f 	ldh	r2,-12(fp)
  819d40:	00c020b4 	movhi	r3,130
  819d44:	18ca0804 	addi	r3,r3,10272
  819d48:	100491ba 	slli	r2,r2,6
  819d4c:	10c5883a 	add	r2,r2,r3
  819d50:	10800804 	addi	r2,r2,32
  819d54:	10c00017 	ldw	r3,0(r2)
  819d58:	008020b4 	movhi	r2,130
  819d5c:	1089f304 	addi	r2,r2,10188
  819d60:	10800383 	ldbu	r2,14(r2)
  819d64:	10803fcc 	andi	r2,r2,255
  819d68:	10bfffc4 	addi	r2,r2,-1
  819d6c:	18803c1e 	bne	r3,r2,819e60 <alt_up_sd_card_write+0x288>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
  819d70:	e0bffd0f 	ldh	r2,-12(fp)
  819d74:	00c020b4 	movhi	r3,130
  819d78:	18ca0804 	addi	r3,r3,10272
  819d7c:	100491ba 	slli	r2,r2,6
  819d80:	10c5883a 	add	r2,r2,r3
  819d84:	10800704 	addi	r2,r2,28
  819d88:	11000017 	ldw	r4,0(r2)
  819d8c:	e17ffb04 	addi	r5,fp,-20
  819d90:	08161a80 	call	8161a8 <get_cluster_flag>
  819d94:	1005003a 	cmpeq	r2,r2,zero
  819d98:	10002f1e 	bne	r2,zero,819e58 <alt_up_sd_card_write+0x280>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if (next_cluster < 0x0000fff8) {
  819d9c:	e0bffb0b 	ldhu	r2,-20(fp)
  819da0:	10ffffcc 	andi	r3,r2,65535
  819da4:	00bffdd4 	movui	r2,65527
  819da8:	10c0bf36 	bltu	r2,r3,81a0a8 <alt_up_sd_card_write+0x4d0>
								active_files[file_handle].current_cluster_index
  819dac:	e13ffd0f 	ldh	r4,-12(fp)
  819db0:	e0bffb0b 	ldhu	r2,-20(fp)
  819db4:	117fffcc 	andi	r5,r2,65535
  819db8:	00c020b4 	movhi	r3,130
  819dbc:	18ca0804 	addi	r3,r3,10272
  819dc0:	200491ba 	slli	r2,r4,6
  819dc4:	10c5883a 	add	r2,r2,r3
  819dc8:	10800704 	addi	r2,r2,28
  819dcc:	11400015 	stw	r5,0(r2)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
  819dd0:	e0bffd0f 	ldh	r2,-12(fp)
  819dd4:	00c020b4 	movhi	r3,130
  819dd8:	18ca0804 	addi	r3,r3,10272
  819ddc:	100491ba 	slli	r2,r2,6
  819de0:	10c5883a 	add	r2,r2,r3
  819de4:	10800804 	addi	r2,r2,32
  819de8:	10000015 	stw	zero,0(r2)
										= 0;
								data_sector
  819dec:	008020b4 	movhi	r2,130
  819df0:	1089f304 	addi	r2,r2,10188
  819df4:	11001417 	ldw	r4,80(r2)
  819df8:	e0bffd0f 	ldh	r2,-12(fp)
  819dfc:	00c020b4 	movhi	r3,130
  819e00:	18ca0804 	addi	r3,r3,10272
  819e04:	100491ba 	slli	r2,r2,6
  819e08:	10c5883a 	add	r2,r2,r3
  819e0c:	10800704 	addi	r2,r2,28
  819e10:	10800017 	ldw	r2,0(r2)
  819e14:	10ffff84 	addi	r3,r2,-2
  819e18:	008020b4 	movhi	r2,130
  819e1c:	1089f304 	addi	r2,r2,10188
  819e20:	10800383 	ldbu	r2,14(r2)
  819e24:	10803fcc 	andi	r2,r2,255
  819e28:	1885383a 	mul	r2,r3,r2
  819e2c:	2089883a 	add	r4,r4,r2
  819e30:	e0bffd0f 	ldh	r2,-12(fp)
  819e34:	00c020b4 	movhi	r3,130
  819e38:	18ca0804 	addi	r3,r3,10272
  819e3c:	100491ba 	slli	r2,r2,6
  819e40:	10c5883a 	add	r2,r2,r3
  819e44:	10800804 	addi	r2,r2,32
  819e48:	10800017 	ldw	r2,0(r2)
  819e4c:	2085883a 	add	r2,r4,r2
  819e50:	e0bff915 	stw	r2,-28(fp)
  819e54:	00009406 	br	81a0a8 <alt_up_sd_card_write+0x4d0>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return false;
  819e58:	e03fff15 	stw	zero,-4(fp)
  819e5c:	0000e006 	br	81a1e0 <alt_up_sd_card_write+0x608>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
  819e60:	e17ffd0f 	ldh	r5,-12(fp)
  819e64:	e0bffd0f 	ldh	r2,-12(fp)
  819e68:	00c020b4 	movhi	r3,130
  819e6c:	18ca0804 	addi	r3,r3,10272
  819e70:	100491ba 	slli	r2,r2,6
  819e74:	10c5883a 	add	r2,r2,r3
  819e78:	10800804 	addi	r2,r2,32
  819e7c:	10800017 	ldw	r2,0(r2)
  819e80:	11000044 	addi	r4,r2,1
  819e84:	00c020b4 	movhi	r3,130
  819e88:	18ca0804 	addi	r3,r3,10272
  819e8c:	280491ba 	slli	r2,r5,6
  819e90:	10c5883a 	add	r2,r2,r3
  819e94:	10800804 	addi	r2,r2,32
  819e98:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
  819e9c:	e0bff917 	ldw	r2,-28(fp)
  819ea0:	10800044 	addi	r2,r2,1
  819ea4:	e0bff915 	stw	r2,-28(fp)
  819ea8:	00007f06 	br	81a0a8 <alt_up_sd_card_write+0x4d0>
					}
				}
			} else {
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0)
  819eac:	e0bffd0f 	ldh	r2,-12(fp)
  819eb0:	00c020b4 	movhi	r3,130
  819eb4:	18ca0804 	addi	r3,r3,10272
  819eb8:	100491ba 	slli	r2,r2,6
  819ebc:	10c5883a 	add	r2,r2,r3
  819ec0:	10800904 	addi	r2,r2,36
  819ec4:	10800017 	ldw	r2,0(r2)
  819ec8:	1005003a 	cmpeq	r2,r2,zero
  819ecc:	1000761e 	bne	r2,zero,81a0a8 <alt_up_sd_card_write+0x4d0>
  819ed0:	e0bff80f 	ldh	r2,-32(fp)
  819ed4:	1004c03a 	cmpne	r2,r2,zero
  819ed8:	1000731e 	bne	r2,zero,81a0a8 <alt_up_sd_card_write+0x4d0>
						&& (buffer_offset == 0)) {
					if (active_files[file_handle].current_sector_in_cluster
  819edc:	e0bffd0f 	ldh	r2,-12(fp)
  819ee0:	00c020b4 	movhi	r3,130
  819ee4:	18ca0804 	addi	r3,r3,10272
  819ee8:	100491ba 	slli	r2,r2,6
  819eec:	10c5883a 	add	r2,r2,r3
  819ef0:	10800804 	addi	r2,r2,32
  819ef4:	10c00017 	ldw	r3,0(r2)
  819ef8:	008020b4 	movhi	r2,130
  819efc:	1089f304 	addi	r2,r2,10188
  819f00:	10800383 	ldbu	r2,14(r2)
  819f04:	10803fcc 	andi	r2,r2,255
  819f08:	10bfffc4 	addi	r2,r2,-1
  819f0c:	1880381e 	bne	r3,r2,819ff0 <alt_up_sd_card_write+0x418>
							== boot_sector_data.sectors_per_cluster - 1) {
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number)) {
  819f10:	e13ffc04 	addi	r4,fp,-16
  819f14:	08182000 	call	818200 <find_first_empty_cluster>
  819f18:	1005003a 	cmpeq	r2,r2,zero
  819f1c:	1000321e 	bne	r2,zero,819fe8 <alt_up_sd_card_write+0x410>
							// mark clusters in both File Allocation Tables.
							mark_cluster(
  819f20:	e0bffd0f 	ldh	r2,-12(fp)
  819f24:	00c020b4 	movhi	r3,130
  819f28:	18ca0804 	addi	r3,r3,10272
  819f2c:	100491ba 	slli	r2,r2,6
  819f30:	10c5883a 	add	r2,r2,r3
  819f34:	10800704 	addi	r2,r2,28
  819f38:	11000017 	ldw	r4,0(r2)
  819f3c:	e0bffc17 	ldw	r2,-16(fp)
  819f40:	117fffcc 	andi	r5,r2,65535
  819f44:	2960001c 	xori	r5,r5,32768
  819f48:	29600004 	addi	r5,r5,-32768
  819f4c:	01800044 	movi	r6,1
  819f50:	08162600 	call	816260 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
  819f54:	e13ffc17 	ldw	r4,-16(fp)
  819f58:	017fffc4 	movi	r5,-1
  819f5c:	01800044 	movi	r6,1
  819f60:	08162600 	call	816260 <mark_cluster>
							mark_cluster(
  819f64:	e0bffd0f 	ldh	r2,-12(fp)
  819f68:	00c020b4 	movhi	r3,130
  819f6c:	18ca0804 	addi	r3,r3,10272
  819f70:	100491ba 	slli	r2,r2,6
  819f74:	10c5883a 	add	r2,r2,r3
  819f78:	10800704 	addi	r2,r2,28
  819f7c:	11000017 	ldw	r4,0(r2)
  819f80:	e0bffc17 	ldw	r2,-16(fp)
  819f84:	117fffcc 	andi	r5,r2,65535
  819f88:	2960001c 	xori	r5,r5,32768
  819f8c:	29600004 	addi	r5,r5,-32768
  819f90:	000d883a 	mov	r6,zero
  819f94:	08162600 	call	816260 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
  819f98:	e13ffc17 	ldw	r4,-16(fp)
  819f9c:	017fffc4 	movi	r5,-1
  819fa0:	000d883a 	mov	r6,zero
  819fa4:	08162600 	call	816260 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index
  819fa8:	e0bffd0f 	ldh	r2,-12(fp)
  819fac:	e13ffc17 	ldw	r4,-16(fp)
  819fb0:	00c020b4 	movhi	r3,130
  819fb4:	18ca0804 	addi	r3,r3,10272
  819fb8:	100491ba 	slli	r2,r2,6
  819fbc:	10c5883a 	add	r2,r2,r3
  819fc0:	10800704 	addi	r2,r2,28
  819fc4:	11000015 	stw	r4,0(r2)
									= cluster_number;
							active_files[file_handle].current_sector_in_cluster
  819fc8:	e0bffd0f 	ldh	r2,-12(fp)
  819fcc:	00c020b4 	movhi	r3,130
  819fd0:	18ca0804 	addi	r3,r3,10272
  819fd4:	100491ba 	slli	r2,r2,6
  819fd8:	10c5883a 	add	r2,r2,r3
  819fdc:	10800804 	addi	r2,r2,32
  819fe0:	10000015 	stw	zero,0(r2)
  819fe4:	00001606 	br	81a040 <alt_up_sd_card_write+0x468>
									= 0;
						} else {
							return false;
  819fe8:	e03fff15 	stw	zero,-4(fp)
  819fec:	00007c06 	br	81a1e0 <alt_up_sd_card_write+0x608>
						}
					} else {
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster
  819ff0:	e43ffd0f 	ldh	r16,-12(fp)
  819ff4:	e0bffd0f 	ldh	r2,-12(fp)
  819ff8:	00c020b4 	movhi	r3,130
  819ffc:	18ca0804 	addi	r3,r3,10272
  81a000:	100491ba 	slli	r2,r2,6
  81a004:	10c5883a 	add	r2,r2,r3
  81a008:	10800904 	addi	r2,r2,36
  81a00c:	11000017 	ldw	r4,0(r2)
  81a010:	008020b4 	movhi	r2,130
  81a014:	1089f304 	addi	r2,r2,10188
  81a018:	1080030b 	ldhu	r2,12(r2)
  81a01c:	117fffcc 	andi	r5,r2,65535
  81a020:	08086580 	call	808658 <__udivsi3>
  81a024:	1009883a 	mov	r4,r2
  81a028:	00c020b4 	movhi	r3,130
  81a02c:	18ca0804 	addi	r3,r3,10272
  81a030:	800491ba 	slli	r2,r16,6
  81a034:	10c5883a 	add	r2,r2,r3
  81a038:	10800804 	addi	r2,r2,32
  81a03c:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_byte_position
										/ boot_sector_data.sector_size_in_bytes;
					}
					data_sector
  81a040:	008020b4 	movhi	r2,130
  81a044:	1089f304 	addi	r2,r2,10188
  81a048:	11001417 	ldw	r4,80(r2)
  81a04c:	e0bffd0f 	ldh	r2,-12(fp)
  81a050:	00c020b4 	movhi	r3,130
  81a054:	18ca0804 	addi	r3,r3,10272
  81a058:	100491ba 	slli	r2,r2,6
  81a05c:	10c5883a 	add	r2,r2,r3
  81a060:	10800704 	addi	r2,r2,28
  81a064:	10800017 	ldw	r2,0(r2)
  81a068:	10ffff84 	addi	r3,r2,-2
  81a06c:	008020b4 	movhi	r2,130
  81a070:	1089f304 	addi	r2,r2,10188
  81a074:	10800383 	ldbu	r2,14(r2)
  81a078:	10803fcc 	andi	r2,r2,255
  81a07c:	1885383a 	mul	r2,r3,r2
  81a080:	2089883a 	add	r4,r4,r2
  81a084:	e0bffd0f 	ldh	r2,-12(fp)
  81a088:	00c020b4 	movhi	r3,130
  81a08c:	18ca0804 	addi	r3,r3,10272
  81a090:	100491ba 	slli	r2,r2,6
  81a094:	10c5883a 	add	r2,r2,r3
  81a098:	10800804 	addi	r2,r2,32
  81a09c:	10800017 	ldw	r2,0(r2)
  81a0a0:	2085883a 	add	r2,r4,r2
  81a0a4:	e0bff915 	stw	r2,-28(fp)
									+ active_files[file_handle].current_sector_in_cluster;
				}
			}
			// Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
			if (current_sector_index != data_sector
  81a0a8:	d0e74e17 	ldw	r3,-25288(gp)
  81a0ac:	e0bff917 	ldw	r2,-28(fp)
  81a0b0:	1885883a 	add	r2,r3,r2
  81a0b4:	1007883a 	mov	r3,r2
  81a0b8:	d0a75217 	ldw	r2,-25272(gp)
  81a0bc:	18800726 	beq	r3,r2,81a0dc <alt_up_sd_card_write+0x504>
					+ fat_partition_offset_in_512_byte_sectors) {
				if (!Read_Sector_Data(data_sector,
  81a0c0:	d1674e17 	ldw	r5,-25288(gp)
  81a0c4:	e13ff917 	ldw	r4,-28(fp)
  81a0c8:	08160ac0 	call	8160ac <Read_Sector_Data>
  81a0cc:	1004c03a 	cmpne	r2,r2,zero
  81a0d0:	1000021e 	bne	r2,zero,81a0dc <alt_up_sd_card_write+0x504>
						fat_partition_offset_in_512_byte_sectors)) {
					return false;
  81a0d4:	e03fff15 	stw	zero,-4(fp)
  81a0d8:	00004106 	br	81a1e0 <alt_up_sd_card_write+0x608>
				}
			}
			// Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
  81a0dc:	e0bff80f 	ldh	r2,-32(fp)
  81a0e0:	1007883a 	mov	r3,r2
  81a0e4:	d0a74d17 	ldw	r2,-25292(gp)
  81a0e8:	1885883a 	add	r2,r3,r2
  81a0ec:	e0fffe07 	ldb	r3,-8(fp)
  81a0f0:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position
  81a0f4:	e17ffd0f 	ldh	r5,-12(fp)
  81a0f8:	e0bffd0f 	ldh	r2,-12(fp)
  81a0fc:	00c020b4 	movhi	r3,130
  81a100:	18ca0804 	addi	r3,r3,10272
  81a104:	100491ba 	slli	r2,r2,6
  81a108:	10c5883a 	add	r2,r2,r3
  81a10c:	10800904 	addi	r2,r2,36
  81a110:	10800017 	ldw	r2,0(r2)
  81a114:	11000044 	addi	r4,r2,1
  81a118:	00c020b4 	movhi	r3,130
  81a11c:	18ca0804 	addi	r3,r3,10272
  81a120:	280491ba 	slli	r2,r5,6
  81a124:	10c5883a 	add	r2,r2,r3
  81a128:	10800904 	addi	r2,r2,36
  81a12c:	11000015 	stw	r4,0(r2)
					= active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position
  81a130:	e0bffd0f 	ldh	r2,-12(fp)
  81a134:	00c020b4 	movhi	r3,130
  81a138:	18ca0804 	addi	r3,r3,10272
  81a13c:	100491ba 	slli	r2,r2,6
  81a140:	10c5883a 	add	r2,r2,r3
  81a144:	10800904 	addi	r2,r2,36
  81a148:	11000017 	ldw	r4,0(r2)
  81a14c:	e0bffd0f 	ldh	r2,-12(fp)
  81a150:	00c020b4 	movhi	r3,130
  81a154:	18ca0804 	addi	r3,r3,10272
  81a158:	100491ba 	slli	r2,r2,6
  81a15c:	10c5883a 	add	r2,r2,r3
  81a160:	10800604 	addi	r2,r2,24
  81a164:	10800017 	ldw	r2,0(r2)
  81a168:	20801736 	bltu	r4,r2,81a1c8 <alt_up_sd_card_write+0x5f0>
					>= active_files[file_handle].file_size_in_bytes) {
				active_files[file_handle].file_size_in_bytes
  81a16c:	e17ffd0f 	ldh	r5,-12(fp)
  81a170:	e0bffd0f 	ldh	r2,-12(fp)
  81a174:	00c020b4 	movhi	r3,130
  81a178:	18ca0804 	addi	r3,r3,10272
  81a17c:	100491ba 	slli	r2,r2,6
  81a180:	10c5883a 	add	r2,r2,r3
  81a184:	10800604 	addi	r2,r2,24
  81a188:	10800017 	ldw	r2,0(r2)
  81a18c:	11000044 	addi	r4,r2,1
  81a190:	00c020b4 	movhi	r3,130
  81a194:	18ca0804 	addi	r3,r3,10272
  81a198:	280491ba 	slli	r2,r5,6
  81a19c:	10c5883a 	add	r2,r2,r3
  81a1a0:	10800604 	addi	r2,r2,24
  81a1a4:	11000015 	stw	r4,0(r2)
						= active_files[file_handle].file_size_in_bytes + 1;
				active_files[file_handle].modified = true;
  81a1a8:	e0bffd0f 	ldh	r2,-12(fp)
  81a1ac:	00c020b4 	movhi	r3,130
  81a1b0:	18ca0804 	addi	r3,r3,10272
  81a1b4:	100491ba 	slli	r2,r2,6
  81a1b8:	10c5883a 	add	r2,r2,r3
  81a1bc:	10c00e04 	addi	r3,r2,56
  81a1c0:	00800044 	movi	r2,1
  81a1c4:	18800015 	stw	r2,0(r3)
			}
			// Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
			current_sector_modified = true;
  81a1c8:	00800044 	movi	r2,1
  81a1cc:	d0a75115 	stw	r2,-25276(gp)
			result = true;
  81a1d0:	00800044 	movi	r2,1
  81a1d4:	e0bffa15 	stw	r2,-24(fp)
		}
	}

	return result;
  81a1d8:	e0bffa17 	ldw	r2,-24(fp)
  81a1dc:	e0bfff15 	stw	r2,-4(fp)
  81a1e0:	e0bfff17 	ldw	r2,-4(fp)
}
  81a1e4:	e037883a 	mov	sp,fp
  81a1e8:	dfc00217 	ldw	ra,8(sp)
  81a1ec:	df000117 	ldw	fp,4(sp)
  81a1f0:	dc000017 	ldw	r16,0(sp)
  81a1f4:	dec00304 	addi	sp,sp,12
  81a1f8:	f800283a 	ret

0081a1fc <alt_up_sd_card_fclose>:

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
  81a1fc:	defffb04 	addi	sp,sp,-20
  81a200:	dfc00415 	stw	ra,16(sp)
  81a204:	df000315 	stw	fp,12(sp)
  81a208:	df000304 	addi	fp,sp,12
  81a20c:	e13fff0d 	sth	r4,-4(fp)
	bool result = false;
  81a210:	e03ffe15 	stw	zero,-8(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  81a214:	0818dc00 	call	818dc0 <alt_up_sd_card_is_Present>
  81a218:	1005003a 	cmpeq	r2,r2,zero
  81a21c:	1000641e 	bne	r2,zero,81a3b0 <alt_up_sd_card_fclose+0x1b4>
  81a220:	d0a74717 	ldw	r2,-25316(gp)
  81a224:	1005003a 	cmpeq	r2,r2,zero
  81a228:	1000611e 	bne	r2,zero,81a3b0 <alt_up_sd_card_fclose+0x1b4>
		if (active_files[file_handle].in_use) {
  81a22c:	e0bfff0f 	ldh	r2,-4(fp)
  81a230:	00c020b4 	movhi	r3,130
  81a234:	18ca0804 	addi	r3,r3,10272
  81a238:	100491ba 	slli	r2,r2,6
  81a23c:	10c5883a 	add	r2,r2,r3
  81a240:	10800f04 	addi	r2,r2,60
  81a244:	10800017 	ldw	r2,0(r2)
  81a248:	1005003a 	cmpeq	r2,r2,zero
  81a24c:	1000581e 	bne	r2,zero,81a3b0 <alt_up_sd_card_fclose+0x1b4>
			if (active_files[file_handle].modified) {
  81a250:	e0bfff0f 	ldh	r2,-4(fp)
  81a254:	00c020b4 	movhi	r3,130
  81a258:	18ca0804 	addi	r3,r3,10272
  81a25c:	100491ba 	slli	r2,r2,6
  81a260:	10c5883a 	add	r2,r2,r3
  81a264:	10800e04 	addi	r2,r2,56
  81a268:	10800017 	ldw	r2,0(r2)
  81a26c:	1005003a 	cmpeq	r2,r2,zero
  81a270:	1000461e 	bne	r2,zero,81a38c <alt_up_sd_card_fclose+0x190>
				unsigned int record_sector =
						active_files[file_handle].file_record_sector_in_cluster;
  81a274:	e0bfff0f 	ldh	r2,-4(fp)
  81a278:	00c020b4 	movhi	r3,130
  81a27c:	18ca0804 	addi	r3,r3,10272
  81a280:	100491ba 	slli	r2,r2,6
  81a284:	10c5883a 	add	r2,r2,r3
  81a288:	10800b04 	addi	r2,r2,44
  81a28c:	10800017 	ldw	r2,0(r2)
  81a290:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0) {
  81a294:	e0bfff0f 	ldh	r2,-4(fp)
  81a298:	00c020b4 	movhi	r3,130
  81a29c:	18ca0804 	addi	r3,r3,10272
  81a2a0:	100491ba 	slli	r2,r2,6
  81a2a4:	10c5883a 	add	r2,r2,r3
  81a2a8:	10800a04 	addi	r2,r2,40
  81a2ac:	10800017 	ldw	r2,0(r2)
  81a2b0:	1004c03a 	cmpne	r2,r2,zero
  81a2b4:	1000071e 	bne	r2,zero,81a2d4 <alt_up_sd_card_fclose+0xd8>
					record_sector = record_sector
  81a2b8:	008020b4 	movhi	r2,130
  81a2bc:	1089f304 	addi	r2,r2,10188
  81a2c0:	10c01317 	ldw	r3,76(r2)
  81a2c4:	e0bffd17 	ldw	r2,-12(fp)
  81a2c8:	10c5883a 	add	r2,r2,r3
  81a2cc:	e0bffd15 	stw	r2,-12(fp)
  81a2d0:	00001406 	br	81a324 <alt_up_sd_card_fclose+0x128>
							+ boot_sector_data.root_directory_sector_offset;
				} else {
					record_sector = record_sector
  81a2d4:	008020b4 	movhi	r2,130
  81a2d8:	1089f304 	addi	r2,r2,10188
  81a2dc:	10c01417 	ldw	r3,80(r2)
  81a2e0:	e0bffd17 	ldw	r2,-12(fp)
  81a2e4:	1889883a 	add	r4,r3,r2
  81a2e8:	e0bfff0f 	ldh	r2,-4(fp)
  81a2ec:	00c020b4 	movhi	r3,130
  81a2f0:	18ca0804 	addi	r3,r3,10272
  81a2f4:	100491ba 	slli	r2,r2,6
  81a2f8:	10c5883a 	add	r2,r2,r3
  81a2fc:	10800a04 	addi	r2,r2,40
  81a300:	10800017 	ldw	r2,0(r2)
  81a304:	10ffff84 	addi	r3,r2,-2
  81a308:	008020b4 	movhi	r2,130
  81a30c:	1089f304 	addi	r2,r2,10188
  81a310:	10800383 	ldbu	r2,14(r2)
  81a314:	10803fcc 	andi	r2,r2,255
  81a318:	1885383a 	mul	r2,r3,r2
  81a31c:	2085883a 	add	r2,r4,r2
  81a320:	e0bffd15 	stw	r2,-12(fp)
							+ boot_sector_data.data_sector_offset
							+ (active_files[file_handle].file_record_cluster
									- 2) * boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector,
  81a324:	e13ffd17 	ldw	r4,-12(fp)
  81a328:	d1674e17 	ldw	r5,-25288(gp)
  81a32c:	08160ac0 	call	8160ac <Read_Sector_Data>
  81a330:	1005003a 	cmpeq	r2,r2,zero
  81a334:	1000151e 	bne	r2,zero,81a38c <alt_up_sd_card_fclose+0x190>
						fat_partition_offset_in_512_byte_sectors)) {
					if (Write_File_Record_At_Offset(
  81a338:	e0bfff0f 	ldh	r2,-4(fp)
  81a33c:	00c020b4 	movhi	r3,130
  81a340:	18ca0804 	addi	r3,r3,10272
  81a344:	100491ba 	slli	r2,r2,6
  81a348:	10c5883a 	add	r2,r2,r3
  81a34c:	10800c04 	addi	r2,r2,48
  81a350:	1080000b 	ldhu	r2,0(r2)
  81a354:	113fffcc 	andi	r4,r2,65535
  81a358:	2120001c 	xori	r4,r4,32768
  81a35c:	21200004 	addi	r4,r4,-32768
  81a360:	e0bfff0f 	ldh	r2,-4(fp)
  81a364:	100491ba 	slli	r2,r2,6
  81a368:	1007883a 	mov	r3,r2
  81a36c:	008020b4 	movhi	r2,130
  81a370:	108a0804 	addi	r2,r2,10272
  81a374:	188b883a 	add	r5,r3,r2
  81a378:	08167780 	call	816778 <Write_File_Record_At_Offset>
  81a37c:	1005003a 	cmpeq	r2,r2,zero
  81a380:	1000021e 	bne	r2,zero,81a38c <alt_up_sd_card_fclose+0x190>
							active_files[file_handle].file_record_offset,
							&(active_files[file_handle]))) {
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
  81a384:	081605c0 	call	81605c <Save_Modified_Sector>
  81a388:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
  81a38c:	e0bfff0f 	ldh	r2,-4(fp)
  81a390:	00c020b4 	movhi	r3,130
  81a394:	18ca0804 	addi	r3,r3,10272
  81a398:	100491ba 	slli	r2,r2,6
  81a39c:	10c5883a 	add	r2,r2,r3
  81a3a0:	10800f04 	addi	r2,r2,60
  81a3a4:	10000015 	stw	zero,0(r2)
			result = true;
  81a3a8:	00800044 	movi	r2,1
  81a3ac:	e0bffe15 	stw	r2,-8(fp)
		}
	}

	return result;
  81a3b0:	e0bffe17 	ldw	r2,-8(fp)
}
  81a3b4:	e037883a 	mov	sp,fp
  81a3b8:	dfc00117 	ldw	ra,4(sp)
  81a3bc:	df000017 	ldw	fp,0(sp)
  81a3c0:	dec00204 	addi	sp,sp,8
  81a3c4:	f800283a 	ret

0081a3c8 <Read_Sector_Data_CRC>:

bool Read_Sector_Data_CRC(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  81a3c8:	defff904 	addi	sp,sp,-28
  81a3cc:	dfc00615 	stw	ra,24(sp)
  81a3d0:	df000515 	stw	fp,20(sp)
  81a3d4:	df000504 	addi	fp,sp,20
  81a3d8:	e13ffd15 	stw	r4,-12(fp)
  81a3dc:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
  81a3e0:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
  81a3e4:	0818dc00 	call	818dc0 <alt_up_sd_card_is_Present>
  81a3e8:	1005003a 	cmpeq	r2,r2,zero
  81a3ec:	10002d1e 	bne	r2,zero,81a4a4 <Read_Sector_Data_CRC+0xdc>
		short int reg_state = 0xff;
  81a3f0:	00803fc4 	movi	r2,255
  81a3f4:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
  81a3f8:	d0a75117 	ldw	r2,-25276(gp)
  81a3fc:	1005003a 	cmpeq	r2,r2,zero
  81a400:	1000081e 	bne	r2,zero,81a424 <Read_Sector_Data_CRC+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
  81a404:	d0a75217 	ldw	r2,-25272(gp)
  81a408:	1009883a 	mov	r4,r2
  81a40c:	000b883a 	mov	r5,zero
  81a410:	0815f940 	call	815f94 <Write_Sector_Data>
  81a414:	1004c03a 	cmpne	r2,r2,zero
  81a418:	1000021e 	bne	r2,zero,81a424 <Read_Sector_Data_CRC+0x5c>
				return false;
  81a41c:	e03fff15 	stw	zero,-4(fp)
  81a420:	00002206 	br	81a4ac <Read_Sector_Data_CRC+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  81a424:	d0a74c17 	ldw	r2,-25296(gp)
  81a428:	1009883a 	mov	r4,r2
  81a42c:	e0fffd17 	ldw	r3,-12(fp)
  81a430:	e0bffe17 	ldw	r2,-8(fp)
  81a434:	1885883a 	add	r2,r3,r2
  81a438:	1006927a 	slli	r3,r2,9
  81a43c:	2005883a 	mov	r2,r4
  81a440:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  81a444:	d0a74b17 	ldw	r2,-25300(gp)
  81a448:	1007883a 	mov	r3,r2
  81a44c:	00800444 	movi	r2,17
  81a450:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  81a454:	d0a74817 	ldw	r2,-25312(gp)
  81a458:	1080002b 	ldhuio	r2,0(r2)
  81a45c:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
  81a460:	e0bffb0b 	ldhu	r2,-20(fp)
  81a464:	10bfffcc 	andi	r2,r2,65535
  81a468:	1080010c 	andi	r2,r2,4
  81a46c:	1004c03a 	cmpne	r2,r2,zero
  81a470:	103ff81e 	bne	r2,zero,81a454 <Read_Sector_Data_CRC+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x30) == 0) {
  81a474:	e0bffb0b 	ldhu	r2,-20(fp)
  81a478:	10bfffcc 	andi	r2,r2,65535
  81a47c:	10800c0c 	andi	r2,r2,48
  81a480:	1004c03a 	cmpne	r2,r2,zero
  81a484:	1000071e 	bne	r2,zero,81a4a4 <Read_Sector_Data_CRC+0xdc>
			result = true;
  81a488:	00800044 	movi	r2,1
  81a48c:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
  81a490:	d0275115 	stw	zero,-25276(gp)
			current_sector_index = sector_index + partition_offset;
  81a494:	e0fffd17 	ldw	r3,-12(fp)
  81a498:	e0bffe17 	ldw	r2,-8(fp)
  81a49c:	1885883a 	add	r2,r3,r2
  81a4a0:	d0a75215 	stw	r2,-25272(gp)
		}
	}
	return result;
  81a4a4:	e0bffc17 	ldw	r2,-16(fp)
  81a4a8:	e0bfff15 	stw	r2,-4(fp)
  81a4ac:	e0bfff17 	ldw	r2,-4(fp)
}
  81a4b0:	e037883a 	mov	sp,fp
  81a4b4:	dfc00117 	ldw	ra,4(sp)
  81a4b8:	df000017 	ldw	fp,0(sp)
  81a4bc:	dec00204 	addi	sp,sp,8
  81a4c0:	f800283a 	ret

0081a4c4 <Read_Sector_Data_Attempt_CRC>:

bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
  81a4c4:	defff804 	addi	sp,sp,-32
  81a4c8:	dfc00715 	stw	ra,28(sp)
  81a4cc:	df000615 	stw	fp,24(sp)
  81a4d0:	df000604 	addi	fp,sp,24
  81a4d4:	e13ffd15 	stw	r4,-12(fp)
  81a4d8:	e17ffe15 	stw	r5,-8(fp)
	int i;
	bool correct;
	const int attempts = 100;
  81a4dc:	00801904 	movi	r2,100
  81a4e0:	e0bffa15 	stw	r2,-24(fp)

	for (i = 0; i < attempts; i++) {
  81a4e4:	e03ffc15 	stw	zero,-16(fp)
  81a4e8:	00000d06 	br	81a520 <Read_Sector_Data_Attempt_CRC+0x5c>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
  81a4ec:	e13ffd17 	ldw	r4,-12(fp)
  81a4f0:	e17ffe17 	ldw	r5,-8(fp)
  81a4f4:	081a3c80 	call	81a3c8 <Read_Sector_Data_CRC>
  81a4f8:	e0bffb15 	stw	r2,-20(fp)
		if (correct) {
  81a4fc:	e0bffb17 	ldw	r2,-20(fp)
  81a500:	1005003a 	cmpeq	r2,r2,zero
  81a504:	1000031e 	bne	r2,zero,81a514 <Read_Sector_Data_Attempt_CRC+0x50>
			return true;
  81a508:	00800044 	movi	r2,1
  81a50c:	e0bfff15 	stw	r2,-4(fp)
  81a510:	00000a06 	br	81a53c <Read_Sector_Data_Attempt_CRC+0x78>
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
  81a514:	e0bffc17 	ldw	r2,-16(fp)
  81a518:	10800044 	addi	r2,r2,1
  81a51c:	e0bffc15 	stw	r2,-16(fp)
  81a520:	e0fffc17 	ldw	r3,-16(fp)
  81a524:	e0bffa17 	ldw	r2,-24(fp)
  81a528:	18bff016 	blt	r3,r2,81a4ec <Read_Sector_Data_Attempt_CRC+0x28>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
  81a52c:	e13ffd17 	ldw	r4,-12(fp)
  81a530:	e17ffe17 	ldw	r5,-8(fp)
  81a534:	08160ac0 	call	8160ac <Read_Sector_Data>
  81a538:	e0bfff15 	stw	r2,-4(fp)
  81a53c:	e0bfff17 	ldw	r2,-4(fp)
}
  81a540:	e037883a 	mov	sp,fp
  81a544:	dfc00117 	ldw	ra,4(sp)
  81a548:	df000017 	ldw	fp,0(sp)
  81a54c:	dec00204 	addi	sp,sp,8
  81a550:	f800283a 	ret

0081a554 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  81a554:	defff404 	addi	sp,sp,-48
  81a558:	df000b15 	stw	fp,44(sp)
  81a55c:	df000b04 	addi	fp,sp,44
  81a560:	e13ffb15 	stw	r4,-20(fp)
  81a564:	e17ffc15 	stw	r5,-16(fp)
  81a568:	e1bffd15 	stw	r6,-12(fp)
  81a56c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  81a570:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81a574:	008020b4 	movhi	r2,130
  81a578:	10bf0904 	addi	r2,r2,-988
  81a57c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  81a580:	1005003a 	cmpeq	r2,r2,zero
  81a584:	1000411e 	bne	r2,zero,81a68c <alt_alarm_start+0x138>
  {
    if (alarm)
  81a588:	e0bffb17 	ldw	r2,-20(fp)
  81a58c:	1005003a 	cmpeq	r2,r2,zero
  81a590:	10003b1e 	bne	r2,zero,81a680 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  81a594:	e0fffb17 	ldw	r3,-20(fp)
  81a598:	e0bffd17 	ldw	r2,-12(fp)
  81a59c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  81a5a0:	e0fffb17 	ldw	r3,-20(fp)
  81a5a4:	e0bffe17 	ldw	r2,-8(fp)
  81a5a8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a5ac:	0005303a 	rdctl	r2,status
  81a5b0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a5b4:	e0fff817 	ldw	r3,-32(fp)
  81a5b8:	00bfff84 	movi	r2,-2
  81a5bc:	1884703a 	and	r2,r3,r2
  81a5c0:	1001703a 	wrctl	status,r2
  
  return context;
  81a5c4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  81a5c8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  81a5cc:	008020b4 	movhi	r2,130
  81a5d0:	10bf0a04 	addi	r2,r2,-984
  81a5d4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  81a5d8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  81a5dc:	e0fffc17 	ldw	r3,-16(fp)
  81a5e0:	e0bff917 	ldw	r2,-28(fp)
  81a5e4:	1885883a 	add	r2,r3,r2
  81a5e8:	10c00044 	addi	r3,r2,1
  81a5ec:	e0bffb17 	ldw	r2,-20(fp)
  81a5f0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  81a5f4:	e0bffb17 	ldw	r2,-20(fp)
  81a5f8:	10c00217 	ldw	r3,8(r2)
  81a5fc:	e0bff917 	ldw	r2,-28(fp)
  81a600:	1880042e 	bgeu	r3,r2,81a614 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  81a604:	e0fffb17 	ldw	r3,-20(fp)
  81a608:	00800044 	movi	r2,1
  81a60c:	18800405 	stb	r2,16(r3)
  81a610:	00000206 	br	81a61c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  81a614:	e0bffb17 	ldw	r2,-20(fp)
  81a618:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  81a61c:	e0fffb17 	ldw	r3,-20(fp)
  81a620:	008020b4 	movhi	r2,130
  81a624:	10b7db04 	addi	r2,r2,-8340
  81a628:	e0bff615 	stw	r2,-40(fp)
  81a62c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81a630:	e0fff717 	ldw	r3,-36(fp)
  81a634:	e0bff617 	ldw	r2,-40(fp)
  81a638:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81a63c:	e0bff617 	ldw	r2,-40(fp)
  81a640:	10c00017 	ldw	r3,0(r2)
  81a644:	e0bff717 	ldw	r2,-36(fp)
  81a648:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81a64c:	e0bff617 	ldw	r2,-40(fp)
  81a650:	10c00017 	ldw	r3,0(r2)
  81a654:	e0bff717 	ldw	r2,-36(fp)
  81a658:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81a65c:	e0fff617 	ldw	r3,-40(fp)
  81a660:	e0bff717 	ldw	r2,-36(fp)
  81a664:	18800015 	stw	r2,0(r3)
  81a668:	e0bffa17 	ldw	r2,-24(fp)
  81a66c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a670:	e0bff517 	ldw	r2,-44(fp)
  81a674:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  81a678:	e03fff15 	stw	zero,-4(fp)
  81a67c:	00000506 	br	81a694 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  81a680:	00bffa84 	movi	r2,-22
  81a684:	e0bfff15 	stw	r2,-4(fp)
  81a688:	00000206 	br	81a694 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  81a68c:	00bfde84 	movi	r2,-134
  81a690:	e0bfff15 	stw	r2,-4(fp)
  81a694:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  81a698:	e037883a 	mov	sp,fp
  81a69c:	df000017 	ldw	fp,0(sp)
  81a6a0:	dec00104 	addi	sp,sp,4
  81a6a4:	f800283a 	ret

0081a6a8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  81a6a8:	defffa04 	addi	sp,sp,-24
  81a6ac:	dfc00515 	stw	ra,20(sp)
  81a6b0:	df000415 	stw	fp,16(sp)
  81a6b4:	df000404 	addi	fp,sp,16
  81a6b8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  81a6bc:	008000c4 	movi	r2,3
  81a6c0:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  81a6c4:	e0fffc17 	ldw	r3,-16(fp)
  81a6c8:	008003f4 	movhi	r2,15
  81a6cc:	10909004 	addi	r2,r2,16960
  81a6d0:	188b383a 	mul	r5,r3,r2
  81a6d4:	0100bef4 	movhi	r4,763
  81a6d8:	213c2004 	addi	r4,r4,-3968
  81a6dc:	08086580 	call	808658 <__udivsi3>
  81a6e0:	100b883a 	mov	r5,r2
  81a6e4:	01200034 	movhi	r4,32768
  81a6e8:	213fffc4 	addi	r4,r4,-1
  81a6ec:	08086580 	call	808658 <__udivsi3>
  81a6f0:	100b883a 	mov	r5,r2
  81a6f4:	e13fff17 	ldw	r4,-4(fp)
  81a6f8:	08086580 	call	808658 <__udivsi3>
  81a6fc:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  81a700:	e0bffd17 	ldw	r2,-12(fp)
  81a704:	1005003a 	cmpeq	r2,r2,zero
  81a708:	1000281e 	bne	r2,zero,81a7ac <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  81a70c:	e03ffe15 	stw	zero,-8(fp)
  81a710:	00001606 	br	81a76c <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  81a714:	00a00034 	movhi	r2,32768
  81a718:	10bfffc4 	addi	r2,r2,-1
  81a71c:	10bfffc4 	addi	r2,r2,-1
  81a720:	103ffe1e 	bne	r2,zero,81a71c <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  81a724:	e0fffc17 	ldw	r3,-16(fp)
  81a728:	008003f4 	movhi	r2,15
  81a72c:	10909004 	addi	r2,r2,16960
  81a730:	188b383a 	mul	r5,r3,r2
  81a734:	0100bef4 	movhi	r4,763
  81a738:	213c2004 	addi	r4,r4,-3968
  81a73c:	08086580 	call	808658 <__udivsi3>
  81a740:	100b883a 	mov	r5,r2
  81a744:	01200034 	movhi	r4,32768
  81a748:	213fffc4 	addi	r4,r4,-1
  81a74c:	08086580 	call	808658 <__udivsi3>
  81a750:	1007883a 	mov	r3,r2
  81a754:	e0bfff17 	ldw	r2,-4(fp)
  81a758:	10c5c83a 	sub	r2,r2,r3
  81a75c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  81a760:	e0bffe17 	ldw	r2,-8(fp)
  81a764:	10800044 	addi	r2,r2,1
  81a768:	e0bffe15 	stw	r2,-8(fp)
  81a76c:	e0fffe17 	ldw	r3,-8(fp)
  81a770:	e0bffd17 	ldw	r2,-12(fp)
  81a774:	18bfe716 	blt	r3,r2,81a714 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81a778:	e0fffc17 	ldw	r3,-16(fp)
  81a77c:	008003f4 	movhi	r2,15
  81a780:	10909004 	addi	r2,r2,16960
  81a784:	188b383a 	mul	r5,r3,r2
  81a788:	0100bef4 	movhi	r4,763
  81a78c:	213c2004 	addi	r4,r4,-3968
  81a790:	08086580 	call	808658 <__udivsi3>
  81a794:	1007883a 	mov	r3,r2
  81a798:	e0bfff17 	ldw	r2,-4(fp)
  81a79c:	1885383a 	mul	r2,r3,r2
  81a7a0:	10bfffc4 	addi	r2,r2,-1
  81a7a4:	103ffe1e 	bne	r2,zero,81a7a0 <alt_busy_sleep+0xf8>
  81a7a8:	00000c06 	br	81a7dc <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81a7ac:	e0fffc17 	ldw	r3,-16(fp)
  81a7b0:	008003f4 	movhi	r2,15
  81a7b4:	10909004 	addi	r2,r2,16960
  81a7b8:	188b383a 	mul	r5,r3,r2
  81a7bc:	0100bef4 	movhi	r4,763
  81a7c0:	213c2004 	addi	r4,r4,-3968
  81a7c4:	08086580 	call	808658 <__udivsi3>
  81a7c8:	1007883a 	mov	r3,r2
  81a7cc:	e0bfff17 	ldw	r2,-4(fp)
  81a7d0:	1885383a 	mul	r2,r3,r2
  81a7d4:	10bfffc4 	addi	r2,r2,-1
  81a7d8:	00bffe16 	blt	zero,r2,81a7d4 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  81a7dc:	0005883a 	mov	r2,zero
}
  81a7e0:	e037883a 	mov	sp,fp
  81a7e4:	dfc00117 	ldw	ra,4(sp)
  81a7e8:	df000017 	ldw	fp,0(sp)
  81a7ec:	dec00204 	addi	sp,sp,8
  81a7f0:	f800283a 	ret

0081a7f4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  81a7f4:	defffe04 	addi	sp,sp,-8
  81a7f8:	df000115 	stw	fp,4(sp)
  81a7fc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81a800:	e03fff15 	stw	zero,-4(fp)
  81a804:	00000506 	br	81a81c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  81a808:	e0bfff17 	ldw	r2,-4(fp)
  81a80c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81a810:	e0bfff17 	ldw	r2,-4(fp)
  81a814:	10800804 	addi	r2,r2,32
  81a818:	e0bfff15 	stw	r2,-4(fp)
  81a81c:	e0bfff17 	ldw	r2,-4(fp)
  81a820:	10900030 	cmpltui	r2,r2,16384
  81a824:	103ff81e 	bne	r2,zero,81a808 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  81a828:	e037883a 	mov	sp,fp
  81a82c:	df000017 	ldw	fp,0(sp)
  81a830:	dec00104 	addi	sp,sp,4
  81a834:	f800283a 	ret

0081a838 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  81a838:	defff904 	addi	sp,sp,-28
  81a83c:	dfc00615 	stw	ra,24(sp)
  81a840:	df000515 	stw	fp,20(sp)
  81a844:	df000504 	addi	fp,sp,20
  81a848:	e13ffd15 	stw	r4,-12(fp)
  81a84c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  81a850:	e0bffd17 	ldw	r2,-12(fp)
  81a854:	1005003a 	cmpeq	r2,r2,zero
  81a858:	1000041e 	bne	r2,zero,81a86c <alt_dev_llist_insert+0x34>
  81a85c:	e0bffd17 	ldw	r2,-12(fp)
  81a860:	10800217 	ldw	r2,8(r2)
  81a864:	1004c03a 	cmpne	r2,r2,zero
  81a868:	1000071e 	bne	r2,zero,81a888 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  81a86c:	081a8ec0 	call	81a8ec <alt_get_errno>
  81a870:	1007883a 	mov	r3,r2
  81a874:	00800584 	movi	r2,22
  81a878:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  81a87c:	00bffa84 	movi	r2,-22
  81a880:	e0bfff15 	stw	r2,-4(fp)
  81a884:	00001306 	br	81a8d4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  81a888:	e0fffd17 	ldw	r3,-12(fp)
  81a88c:	e0bffe17 	ldw	r2,-8(fp)
  81a890:	e0bffb15 	stw	r2,-20(fp)
  81a894:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81a898:	e0fffc17 	ldw	r3,-16(fp)
  81a89c:	e0bffb17 	ldw	r2,-20(fp)
  81a8a0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81a8a4:	e0bffb17 	ldw	r2,-20(fp)
  81a8a8:	10c00017 	ldw	r3,0(r2)
  81a8ac:	e0bffc17 	ldw	r2,-16(fp)
  81a8b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81a8b4:	e0bffb17 	ldw	r2,-20(fp)
  81a8b8:	10c00017 	ldw	r3,0(r2)
  81a8bc:	e0bffc17 	ldw	r2,-16(fp)
  81a8c0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81a8c4:	e0fffb17 	ldw	r3,-20(fp)
  81a8c8:	e0bffc17 	ldw	r2,-16(fp)
  81a8cc:	18800015 	stw	r2,0(r3)

  return 0;  
  81a8d0:	e03fff15 	stw	zero,-4(fp)
  81a8d4:	e0bfff17 	ldw	r2,-4(fp)
}
  81a8d8:	e037883a 	mov	sp,fp
  81a8dc:	dfc00117 	ldw	ra,4(sp)
  81a8e0:	df000017 	ldw	fp,0(sp)
  81a8e4:	dec00204 	addi	sp,sp,8
  81a8e8:	f800283a 	ret

0081a8ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81a8ec:	defffd04 	addi	sp,sp,-12
  81a8f0:	dfc00215 	stw	ra,8(sp)
  81a8f4:	df000115 	stw	fp,4(sp)
  81a8f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81a8fc:	008020b4 	movhi	r2,130
  81a900:	10b7d804 	addi	r2,r2,-8352
  81a904:	10800017 	ldw	r2,0(r2)
  81a908:	1005003a 	cmpeq	r2,r2,zero
  81a90c:	1000061e 	bne	r2,zero,81a928 <alt_get_errno+0x3c>
  81a910:	008020b4 	movhi	r2,130
  81a914:	10b7d804 	addi	r2,r2,-8352
  81a918:	10800017 	ldw	r2,0(r2)
  81a91c:	103ee83a 	callr	r2
  81a920:	e0bfff15 	stw	r2,-4(fp)
  81a924:	00000306 	br	81a934 <alt_get_errno+0x48>
  81a928:	008020b4 	movhi	r2,130
  81a92c:	10befd04 	addi	r2,r2,-1036
  81a930:	e0bfff15 	stw	r2,-4(fp)
  81a934:	e0bfff17 	ldw	r2,-4(fp)
}
  81a938:	e037883a 	mov	sp,fp
  81a93c:	dfc00117 	ldw	ra,4(sp)
  81a940:	df000017 	ldw	fp,0(sp)
  81a944:	dec00204 	addi	sp,sp,8
  81a948:	f800283a 	ret

0081a94c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  81a94c:	defffd04 	addi	sp,sp,-12
  81a950:	dfc00215 	stw	ra,8(sp)
  81a954:	df000115 	stw	fp,4(sp)
  81a958:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81a95c:	00bfff04 	movi	r2,-4
  81a960:	00c020b4 	movhi	r3,130
  81a964:	18ed7604 	addi	r3,r3,-18984
  81a968:	1885883a 	add	r2,r3,r2
  81a96c:	e0bfff15 	stw	r2,-4(fp)
  81a970:	00000606 	br	81a98c <_do_ctors+0x40>
        (*ctor) (); 
  81a974:	e0bfff17 	ldw	r2,-4(fp)
  81a978:	10800017 	ldw	r2,0(r2)
  81a97c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81a980:	e0bfff17 	ldw	r2,-4(fp)
  81a984:	10bfff04 	addi	r2,r2,-4
  81a988:	e0bfff15 	stw	r2,-4(fp)
  81a98c:	e0ffff17 	ldw	r3,-4(fp)
  81a990:	008020b4 	movhi	r2,130
  81a994:	10ad7504 	addi	r2,r2,-18988
  81a998:	18bff62e 	bgeu	r3,r2,81a974 <_do_ctors+0x28>
        (*ctor) (); 
}
  81a99c:	e037883a 	mov	sp,fp
  81a9a0:	dfc00117 	ldw	ra,4(sp)
  81a9a4:	df000017 	ldw	fp,0(sp)
  81a9a8:	dec00204 	addi	sp,sp,8
  81a9ac:	f800283a 	ret

0081a9b0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  81a9b0:	defffd04 	addi	sp,sp,-12
  81a9b4:	dfc00215 	stw	ra,8(sp)
  81a9b8:	df000115 	stw	fp,4(sp)
  81a9bc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81a9c0:	00bfff04 	movi	r2,-4
  81a9c4:	00c020b4 	movhi	r3,130
  81a9c8:	18ed7604 	addi	r3,r3,-18984
  81a9cc:	1885883a 	add	r2,r3,r2
  81a9d0:	e0bfff15 	stw	r2,-4(fp)
  81a9d4:	00000606 	br	81a9f0 <_do_dtors+0x40>
        (*dtor) (); 
  81a9d8:	e0bfff17 	ldw	r2,-4(fp)
  81a9dc:	10800017 	ldw	r2,0(r2)
  81a9e0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81a9e4:	e0bfff17 	ldw	r2,-4(fp)
  81a9e8:	10bfff04 	addi	r2,r2,-4
  81a9ec:	e0bfff15 	stw	r2,-4(fp)
  81a9f0:	e0ffff17 	ldw	r3,-4(fp)
  81a9f4:	008020b4 	movhi	r2,130
  81a9f8:	10ad7604 	addi	r2,r2,-18984
  81a9fc:	18bff62e 	bgeu	r3,r2,81a9d8 <_do_dtors+0x28>
        (*dtor) (); 
}
  81aa00:	e037883a 	mov	sp,fp
  81aa04:	dfc00117 	ldw	ra,4(sp)
  81aa08:	df000017 	ldw	fp,0(sp)
  81aa0c:	dec00204 	addi	sp,sp,8
  81aa10:	f800283a 	ret

0081aa14 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81aa14:	defff904 	addi	sp,sp,-28
  81aa18:	dfc00615 	stw	ra,24(sp)
  81aa1c:	df000515 	stw	fp,20(sp)
  81aa20:	df000504 	addi	fp,sp,20
  81aa24:	e13ffd15 	stw	r4,-12(fp)
  81aa28:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  81aa2c:	e0bffe17 	ldw	r2,-8(fp)
  81aa30:	10800017 	ldw	r2,0(r2)
  81aa34:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81aa38:	e13ffd17 	ldw	r4,-12(fp)
  81aa3c:	08098640 	call	809864 <strlen>
  81aa40:	10800044 	addi	r2,r2,1
  81aa44:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81aa48:	00000d06 	br	81aa80 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  81aa4c:	e0bffc17 	ldw	r2,-16(fp)
  81aa50:	11000217 	ldw	r4,8(r2)
  81aa54:	e1bffb17 	ldw	r6,-20(fp)
  81aa58:	e17ffd17 	ldw	r5,-12(fp)
  81aa5c:	081b1ac0 	call	81b1ac <memcmp>
  81aa60:	1004c03a 	cmpne	r2,r2,zero
  81aa64:	1000031e 	bne	r2,zero,81aa74 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  81aa68:	e0bffc17 	ldw	r2,-16(fp)
  81aa6c:	e0bfff15 	stw	r2,-4(fp)
  81aa70:	00000706 	br	81aa90 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  81aa74:	e0bffc17 	ldw	r2,-16(fp)
  81aa78:	10800017 	ldw	r2,0(r2)
  81aa7c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81aa80:	e0fffe17 	ldw	r3,-8(fp)
  81aa84:	e0bffc17 	ldw	r2,-16(fp)
  81aa88:	10fff01e 	bne	r2,r3,81aa4c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  81aa8c:	e03fff15 	stw	zero,-4(fp)
  81aa90:	e0bfff17 	ldw	r2,-4(fp)
}
  81aa94:	e037883a 	mov	sp,fp
  81aa98:	dfc00117 	ldw	ra,4(sp)
  81aa9c:	df000017 	ldw	fp,0(sp)
  81aaa0:	dec00204 	addi	sp,sp,8
  81aaa4:	f800283a 	ret

0081aaa8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  81aaa8:	defffe04 	addi	sp,sp,-8
  81aaac:	dfc00115 	stw	ra,4(sp)
  81aab0:	df000015 	stw	fp,0(sp)
  81aab4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  81aab8:	0009883a 	mov	r4,zero
  81aabc:	01440004 	movi	r5,4096
  81aac0:	081b0d00 	call	81b0d0 <alt_icache_flush>
#endif
}
  81aac4:	e037883a 	mov	sp,fp
  81aac8:	dfc00117 	ldw	ra,4(sp)
  81aacc:	df000017 	ldw	fp,0(sp)
  81aad0:	dec00204 	addi	sp,sp,8
  81aad4:	f800283a 	ret

0081aad8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  81aad8:	defff904 	addi	sp,sp,-28
  81aadc:	dfc00615 	stw	ra,24(sp)
  81aae0:	df000515 	stw	fp,20(sp)
  81aae4:	df000504 	addi	fp,sp,20
  81aae8:	e13ffc15 	stw	r4,-16(fp)
  81aaec:	e17ffd15 	stw	r5,-12(fp)
  81aaf0:	e1bffe15 	stw	r6,-8(fp)
  81aaf4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  81aaf8:	e13ffd17 	ldw	r4,-12(fp)
  81aafc:	e17ffe17 	ldw	r5,-8(fp)
  81ab00:	e1bfff17 	ldw	r6,-4(fp)
  81ab04:	081acf00 	call	81acf0 <open>
  81ab08:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  81ab0c:	e0bffb17 	ldw	r2,-20(fp)
  81ab10:	1004803a 	cmplt	r2,r2,zero
  81ab14:	10001c1e 	bne	r2,zero,81ab88 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  81ab18:	e0bffb17 	ldw	r2,-20(fp)
  81ab1c:	00c020b4 	movhi	r3,130
  81ab20:	18f2fa04 	addi	r3,r3,-13336
  81ab24:	10800324 	muli	r2,r2,12
  81ab28:	10c5883a 	add	r2,r2,r3
  81ab2c:	10c00017 	ldw	r3,0(r2)
  81ab30:	e0bffc17 	ldw	r2,-16(fp)
  81ab34:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  81ab38:	e0bffb17 	ldw	r2,-20(fp)
  81ab3c:	00c020b4 	movhi	r3,130
  81ab40:	18f2fa04 	addi	r3,r3,-13336
  81ab44:	10800324 	muli	r2,r2,12
  81ab48:	10c5883a 	add	r2,r2,r3
  81ab4c:	10800104 	addi	r2,r2,4
  81ab50:	10c00017 	ldw	r3,0(r2)
  81ab54:	e0bffc17 	ldw	r2,-16(fp)
  81ab58:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81ab5c:	e0bffb17 	ldw	r2,-20(fp)
  81ab60:	00c020b4 	movhi	r3,130
  81ab64:	18f2fa04 	addi	r3,r3,-13336
  81ab68:	10800324 	muli	r2,r2,12
  81ab6c:	10c5883a 	add	r2,r2,r3
  81ab70:	10800204 	addi	r2,r2,8
  81ab74:	10c00017 	ldw	r3,0(r2)
  81ab78:	e0bffc17 	ldw	r2,-16(fp)
  81ab7c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81ab80:	e13ffb17 	ldw	r4,-20(fp)
  81ab84:	0811d040 	call	811d04 <alt_release_fd>
  }
} 
  81ab88:	e037883a 	mov	sp,fp
  81ab8c:	dfc00117 	ldw	ra,4(sp)
  81ab90:	df000017 	ldw	fp,0(sp)
  81ab94:	dec00204 	addi	sp,sp,8
  81ab98:	f800283a 	ret

0081ab9c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81ab9c:	defffb04 	addi	sp,sp,-20
  81aba0:	dfc00415 	stw	ra,16(sp)
  81aba4:	df000315 	stw	fp,12(sp)
  81aba8:	df000304 	addi	fp,sp,12
  81abac:	e13ffd15 	stw	r4,-12(fp)
  81abb0:	e17ffe15 	stw	r5,-8(fp)
  81abb4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81abb8:	010020b4 	movhi	r4,130
  81abbc:	2132fd04 	addi	r4,r4,-13324
  81abc0:	e17ffd17 	ldw	r5,-12(fp)
  81abc4:	01800044 	movi	r6,1
  81abc8:	01c07fc4 	movi	r7,511
  81abcc:	081aad80 	call	81aad8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  81abd0:	010020b4 	movhi	r4,130
  81abd4:	2132fa04 	addi	r4,r4,-13336
  81abd8:	e17ffe17 	ldw	r5,-8(fp)
  81abdc:	000d883a 	mov	r6,zero
  81abe0:	01c07fc4 	movi	r7,511
  81abe4:	081aad80 	call	81aad8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81abe8:	010020b4 	movhi	r4,130
  81abec:	21330004 	addi	r4,r4,-13312
  81abf0:	e17fff17 	ldw	r5,-4(fp)
  81abf4:	01800044 	movi	r6,1
  81abf8:	01c07fc4 	movi	r7,511
  81abfc:	081aad80 	call	81aad8 <alt_open_fd>
}  
  81ac00:	e037883a 	mov	sp,fp
  81ac04:	dfc00117 	ldw	ra,4(sp)
  81ac08:	df000017 	ldw	fp,0(sp)
  81ac0c:	dec00204 	addi	sp,sp,8
  81ac10:	f800283a 	ret

0081ac14 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  81ac14:	defffc04 	addi	sp,sp,-16
  81ac18:	df000315 	stw	fp,12(sp)
  81ac1c:	df000304 	addi	fp,sp,12
  81ac20:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  81ac24:	e0bffe17 	ldw	r2,-8(fp)
  81ac28:	10800217 	ldw	r2,8(r2)
  81ac2c:	10d00034 	orhi	r3,r2,16384
  81ac30:	e0bffe17 	ldw	r2,-8(fp)
  81ac34:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81ac38:	e03ffd15 	stw	zero,-12(fp)
  81ac3c:	00002006 	br	81acc0 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81ac40:	e0bffd17 	ldw	r2,-12(fp)
  81ac44:	00c020b4 	movhi	r3,130
  81ac48:	18f2fa04 	addi	r3,r3,-13336
  81ac4c:	10800324 	muli	r2,r2,12
  81ac50:	10c5883a 	add	r2,r2,r3
  81ac54:	10c00017 	ldw	r3,0(r2)
  81ac58:	e0bffe17 	ldw	r2,-8(fp)
  81ac5c:	10800017 	ldw	r2,0(r2)
  81ac60:	1880141e 	bne	r3,r2,81acb4 <alt_file_locked+0xa0>
  81ac64:	e0bffd17 	ldw	r2,-12(fp)
  81ac68:	00c020b4 	movhi	r3,130
  81ac6c:	18f2fa04 	addi	r3,r3,-13336
  81ac70:	10800324 	muli	r2,r2,12
  81ac74:	10c5883a 	add	r2,r2,r3
  81ac78:	10800204 	addi	r2,r2,8
  81ac7c:	10800017 	ldw	r2,0(r2)
  81ac80:	1004403a 	cmpge	r2,r2,zero
  81ac84:	10000b1e 	bne	r2,zero,81acb4 <alt_file_locked+0xa0>
  81ac88:	e0bffd17 	ldw	r2,-12(fp)
  81ac8c:	10800324 	muli	r2,r2,12
  81ac90:	1007883a 	mov	r3,r2
  81ac94:	008020b4 	movhi	r2,130
  81ac98:	10b2fa04 	addi	r2,r2,-13336
  81ac9c:	1887883a 	add	r3,r3,r2
  81aca0:	e0bffe17 	ldw	r2,-8(fp)
  81aca4:	18800326 	beq	r3,r2,81acb4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81aca8:	00bffcc4 	movi	r2,-13
  81acac:	e0bfff15 	stw	r2,-4(fp)
  81acb0:	00000a06 	br	81acdc <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81acb4:	e0bffd17 	ldw	r2,-12(fp)
  81acb8:	10800044 	addi	r2,r2,1
  81acbc:	e0bffd15 	stw	r2,-12(fp)
  81acc0:	008020b4 	movhi	r2,130
  81acc4:	10b7d704 	addi	r2,r2,-8356
  81acc8:	10800017 	ldw	r2,0(r2)
  81accc:	1007883a 	mov	r3,r2
  81acd0:	e0bffd17 	ldw	r2,-12(fp)
  81acd4:	18bfda2e 	bgeu	r3,r2,81ac40 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  81acd8:	e03fff15 	stw	zero,-4(fp)
  81acdc:	e0bfff17 	ldw	r2,-4(fp)
}
  81ace0:	e037883a 	mov	sp,fp
  81ace4:	df000017 	ldw	fp,0(sp)
  81ace8:	dec00104 	addi	sp,sp,4
  81acec:	f800283a 	ret

0081acf0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  81acf0:	defff404 	addi	sp,sp,-48
  81acf4:	dfc00b15 	stw	ra,44(sp)
  81acf8:	df000a15 	stw	fp,40(sp)
  81acfc:	df000a04 	addi	fp,sp,40
  81ad00:	e13ffb15 	stw	r4,-20(fp)
  81ad04:	e17ffc15 	stw	r5,-16(fp)
  81ad08:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81ad0c:	00bfffc4 	movi	r2,-1
  81ad10:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  81ad14:	00bffb44 	movi	r2,-19
  81ad18:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  81ad1c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  81ad20:	e13ffb17 	ldw	r4,-20(fp)
  81ad24:	014020b4 	movhi	r5,130
  81ad28:	2977d504 	addi	r5,r5,-8364
  81ad2c:	081aa140 	call	81aa14 <alt_find_dev>
  81ad30:	e0bffa15 	stw	r2,-24(fp)
  81ad34:	e0bffa17 	ldw	r2,-24(fp)
  81ad38:	1004c03a 	cmpne	r2,r2,zero
  81ad3c:	1000051e 	bne	r2,zero,81ad54 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  81ad40:	e13ffb17 	ldw	r4,-20(fp)
  81ad44:	081aef80 	call	81aef8 <alt_find_file>
  81ad48:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  81ad4c:	00800044 	movi	r2,1
  81ad50:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  81ad54:	e0bffa17 	ldw	r2,-24(fp)
  81ad58:	1005003a 	cmpeq	r2,r2,zero
  81ad5c:	1000301e 	bne	r2,zero,81ae20 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  81ad60:	e13ffa17 	ldw	r4,-24(fp)
  81ad64:	081b0180 	call	81b018 <alt_get_fd>
  81ad68:	e0bff815 	stw	r2,-32(fp)
  81ad6c:	e0bff817 	ldw	r2,-32(fp)
  81ad70:	1004403a 	cmpge	r2,r2,zero
  81ad74:	1000031e 	bne	r2,zero,81ad84 <open+0x94>
    {
      status = index;
  81ad78:	e0bff817 	ldw	r2,-32(fp)
  81ad7c:	e0bff715 	stw	r2,-36(fp)
  81ad80:	00002906 	br	81ae28 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  81ad84:	e0bff817 	ldw	r2,-32(fp)
  81ad88:	10800324 	muli	r2,r2,12
  81ad8c:	1007883a 	mov	r3,r2
  81ad90:	008020b4 	movhi	r2,130
  81ad94:	10b2fa04 	addi	r2,r2,-13336
  81ad98:	1885883a 	add	r2,r3,r2
  81ad9c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  81ada0:	e0fffc17 	ldw	r3,-16(fp)
  81ada4:	00900034 	movhi	r2,16384
  81ada8:	10bfffc4 	addi	r2,r2,-1
  81adac:	1886703a 	and	r3,r3,r2
  81adb0:	e0bff917 	ldw	r2,-28(fp)
  81adb4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81adb8:	e0bff617 	ldw	r2,-40(fp)
  81adbc:	1004c03a 	cmpne	r2,r2,zero
  81adc0:	1000061e 	bne	r2,zero,81addc <open+0xec>
  81adc4:	e13ff917 	ldw	r4,-28(fp)
  81adc8:	081ac140 	call	81ac14 <alt_file_locked>
  81adcc:	e0bff715 	stw	r2,-36(fp)
  81add0:	e0bff717 	ldw	r2,-36(fp)
  81add4:	1004803a 	cmplt	r2,r2,zero
  81add8:	1000131e 	bne	r2,zero,81ae28 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  81addc:	e0bffa17 	ldw	r2,-24(fp)
  81ade0:	10800317 	ldw	r2,12(r2)
  81ade4:	1005003a 	cmpeq	r2,r2,zero
  81ade8:	1000091e 	bne	r2,zero,81ae10 <open+0x120>
  81adec:	e0bffa17 	ldw	r2,-24(fp)
  81adf0:	10800317 	ldw	r2,12(r2)
  81adf4:	e13ff917 	ldw	r4,-28(fp)
  81adf8:	e17ffb17 	ldw	r5,-20(fp)
  81adfc:	e1bffc17 	ldw	r6,-16(fp)
  81ae00:	e1fffd17 	ldw	r7,-12(fp)
  81ae04:	103ee83a 	callr	r2
  81ae08:	e0bfff15 	stw	r2,-4(fp)
  81ae0c:	00000106 	br	81ae14 <open+0x124>
  81ae10:	e03fff15 	stw	zero,-4(fp)
  81ae14:	e0bfff17 	ldw	r2,-4(fp)
  81ae18:	e0bff715 	stw	r2,-36(fp)
  81ae1c:	00000206 	br	81ae28 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81ae20:	00bffb44 	movi	r2,-19
  81ae24:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81ae28:	e0bff717 	ldw	r2,-36(fp)
  81ae2c:	1004403a 	cmpge	r2,r2,zero
  81ae30:	1000091e 	bne	r2,zero,81ae58 <open+0x168>
  {
    alt_release_fd (index);  
  81ae34:	e13ff817 	ldw	r4,-32(fp)
  81ae38:	0811d040 	call	811d04 <alt_release_fd>
    ALT_ERRNO = -status;
  81ae3c:	081ae780 	call	81ae78 <alt_get_errno>
  81ae40:	e0fff717 	ldw	r3,-36(fp)
  81ae44:	00c7c83a 	sub	r3,zero,r3
  81ae48:	10c00015 	stw	r3,0(r2)
    return -1;
  81ae4c:	00bfffc4 	movi	r2,-1
  81ae50:	e0bffe15 	stw	r2,-8(fp)
  81ae54:	00000206 	br	81ae60 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  81ae58:	e0bff817 	ldw	r2,-32(fp)
  81ae5c:	e0bffe15 	stw	r2,-8(fp)
  81ae60:	e0bffe17 	ldw	r2,-8(fp)
}
  81ae64:	e037883a 	mov	sp,fp
  81ae68:	dfc00117 	ldw	ra,4(sp)
  81ae6c:	df000017 	ldw	fp,0(sp)
  81ae70:	dec00204 	addi	sp,sp,8
  81ae74:	f800283a 	ret

0081ae78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81ae78:	defffd04 	addi	sp,sp,-12
  81ae7c:	dfc00215 	stw	ra,8(sp)
  81ae80:	df000115 	stw	fp,4(sp)
  81ae84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81ae88:	008020b4 	movhi	r2,130
  81ae8c:	10b7d804 	addi	r2,r2,-8352
  81ae90:	10800017 	ldw	r2,0(r2)
  81ae94:	1005003a 	cmpeq	r2,r2,zero
  81ae98:	1000061e 	bne	r2,zero,81aeb4 <alt_get_errno+0x3c>
  81ae9c:	008020b4 	movhi	r2,130
  81aea0:	10b7d804 	addi	r2,r2,-8352
  81aea4:	10800017 	ldw	r2,0(r2)
  81aea8:	103ee83a 	callr	r2
  81aeac:	e0bfff15 	stw	r2,-4(fp)
  81aeb0:	00000306 	br	81aec0 <alt_get_errno+0x48>
  81aeb4:	008020b4 	movhi	r2,130
  81aeb8:	10befd04 	addi	r2,r2,-1036
  81aebc:	e0bfff15 	stw	r2,-4(fp)
  81aec0:	e0bfff17 	ldw	r2,-4(fp)
}
  81aec4:	e037883a 	mov	sp,fp
  81aec8:	dfc00117 	ldw	ra,4(sp)
  81aecc:	df000017 	ldw	fp,0(sp)
  81aed0:	dec00204 	addi	sp,sp,8
  81aed4:	f800283a 	ret

0081aed8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  81aed8:	deffff04 	addi	sp,sp,-4
  81aedc:	df000015 	stw	fp,0(sp)
  81aee0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81aee4:	000170fa 	wrctl	ienable,zero
}
  81aee8:	e037883a 	mov	sp,fp
  81aeec:	df000017 	ldw	fp,0(sp)
  81aef0:	dec00104 	addi	sp,sp,4
  81aef4:	f800283a 	ret

0081aef8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81aef8:	defffa04 	addi	sp,sp,-24
  81aefc:	dfc00515 	stw	ra,20(sp)
  81af00:	df000415 	stw	fp,16(sp)
  81af04:	df000404 	addi	fp,sp,16
  81af08:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81af0c:	008020b4 	movhi	r2,130
  81af10:	10b7d304 	addi	r2,r2,-8372
  81af14:	10800017 	ldw	r2,0(r2)
  81af18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81af1c:	00003306 	br	81afec <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  81af20:	e0bffd17 	ldw	r2,-12(fp)
  81af24:	11000217 	ldw	r4,8(r2)
  81af28:	08098640 	call	809864 <strlen>
  81af2c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  81af30:	e0bffd17 	ldw	r2,-12(fp)
  81af34:	10c00217 	ldw	r3,8(r2)
  81af38:	e0bffc17 	ldw	r2,-16(fp)
  81af3c:	1885883a 	add	r2,r3,r2
  81af40:	10bfffc4 	addi	r2,r2,-1
  81af44:	10800003 	ldbu	r2,0(r2)
  81af48:	10803fcc 	andi	r2,r2,255
  81af4c:	1080201c 	xori	r2,r2,128
  81af50:	10bfe004 	addi	r2,r2,-128
  81af54:	10800bd8 	cmpnei	r2,r2,47
  81af58:	1000031e 	bne	r2,zero,81af68 <alt_find_file+0x70>
    {
      len -= 1;
  81af5c:	e0bffc17 	ldw	r2,-16(fp)
  81af60:	10bfffc4 	addi	r2,r2,-1
  81af64:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81af68:	e0bffc17 	ldw	r2,-16(fp)
  81af6c:	1007883a 	mov	r3,r2
  81af70:	e0bffe17 	ldw	r2,-8(fp)
  81af74:	1885883a 	add	r2,r3,r2
  81af78:	10800003 	ldbu	r2,0(r2)
  81af7c:	10803fcc 	andi	r2,r2,255
  81af80:	1080201c 	xori	r2,r2,128
  81af84:	10bfe004 	addi	r2,r2,-128
  81af88:	10800be0 	cmpeqi	r2,r2,47
  81af8c:	10000a1e 	bne	r2,zero,81afb8 <alt_find_file+0xc0>
  81af90:	e0bffc17 	ldw	r2,-16(fp)
  81af94:	1007883a 	mov	r3,r2
  81af98:	e0bffe17 	ldw	r2,-8(fp)
  81af9c:	1885883a 	add	r2,r3,r2
  81afa0:	10800003 	ldbu	r2,0(r2)
  81afa4:	10803fcc 	andi	r2,r2,255
  81afa8:	1080201c 	xori	r2,r2,128
  81afac:	10bfe004 	addi	r2,r2,-128
  81afb0:	1004c03a 	cmpne	r2,r2,zero
  81afb4:	10000a1e 	bne	r2,zero,81afe0 <alt_find_file+0xe8>
  81afb8:	e0bffd17 	ldw	r2,-12(fp)
  81afbc:	11000217 	ldw	r4,8(r2)
  81afc0:	e1bffc17 	ldw	r6,-16(fp)
  81afc4:	e17ffe17 	ldw	r5,-8(fp)
  81afc8:	081b1ac0 	call	81b1ac <memcmp>
  81afcc:	1004c03a 	cmpne	r2,r2,zero
  81afd0:	1000031e 	bne	r2,zero,81afe0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  81afd4:	e0bffd17 	ldw	r2,-12(fp)
  81afd8:	e0bfff15 	stw	r2,-4(fp)
  81afdc:	00000806 	br	81b000 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  81afe0:	e0bffd17 	ldw	r2,-12(fp)
  81afe4:	10800017 	ldw	r2,0(r2)
  81afe8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81afec:	00c020b4 	movhi	r3,130
  81aff0:	18f7d304 	addi	r3,r3,-8372
  81aff4:	e0bffd17 	ldw	r2,-12(fp)
  81aff8:	10ffc91e 	bne	r2,r3,81af20 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  81affc:	e03fff15 	stw	zero,-4(fp)
  81b000:	e0bfff17 	ldw	r2,-4(fp)
}
  81b004:	e037883a 	mov	sp,fp
  81b008:	dfc00117 	ldw	ra,4(sp)
  81b00c:	df000017 	ldw	fp,0(sp)
  81b010:	dec00204 	addi	sp,sp,8
  81b014:	f800283a 	ret

0081b018 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81b018:	defffc04 	addi	sp,sp,-16
  81b01c:	df000315 	stw	fp,12(sp)
  81b020:	df000304 	addi	fp,sp,12
  81b024:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81b028:	00bffa04 	movi	r2,-24
  81b02c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81b030:	e03ffe15 	stw	zero,-8(fp)
  81b034:	00001e06 	br	81b0b0 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  81b038:	e0bffe17 	ldw	r2,-8(fp)
  81b03c:	00c020b4 	movhi	r3,130
  81b040:	18f2fa04 	addi	r3,r3,-13336
  81b044:	10800324 	muli	r2,r2,12
  81b048:	10c5883a 	add	r2,r2,r3
  81b04c:	10800017 	ldw	r2,0(r2)
  81b050:	1004c03a 	cmpne	r2,r2,zero
  81b054:	1000131e 	bne	r2,zero,81b0a4 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  81b058:	e0bffe17 	ldw	r2,-8(fp)
  81b05c:	00c020b4 	movhi	r3,130
  81b060:	18f2fa04 	addi	r3,r3,-13336
  81b064:	10800324 	muli	r2,r2,12
  81b068:	10c7883a 	add	r3,r2,r3
  81b06c:	e0bfff17 	ldw	r2,-4(fp)
  81b070:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  81b074:	008020b4 	movhi	r2,130
  81b078:	10b7d704 	addi	r2,r2,-8356
  81b07c:	10c00017 	ldw	r3,0(r2)
  81b080:	e0bffe17 	ldw	r2,-8(fp)
  81b084:	1880040e 	bge	r3,r2,81b098 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  81b088:	00c020b4 	movhi	r3,130
  81b08c:	18f7d704 	addi	r3,r3,-8356
  81b090:	e0bffe17 	ldw	r2,-8(fp)
  81b094:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  81b098:	e0bffe17 	ldw	r2,-8(fp)
  81b09c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  81b0a0:	00000606 	br	81b0bc <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81b0a4:	e0bffe17 	ldw	r2,-8(fp)
  81b0a8:	10800044 	addi	r2,r2,1
  81b0ac:	e0bffe15 	stw	r2,-8(fp)
  81b0b0:	e0bffe17 	ldw	r2,-8(fp)
  81b0b4:	10800810 	cmplti	r2,r2,32
  81b0b8:	103fdf1e 	bne	r2,zero,81b038 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  81b0bc:	e0bffd17 	ldw	r2,-12(fp)
}
  81b0c0:	e037883a 	mov	sp,fp
  81b0c4:	df000017 	ldw	fp,0(sp)
  81b0c8:	dec00104 	addi	sp,sp,4
  81b0cc:	f800283a 	ret

0081b0d0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  81b0d0:	defffb04 	addi	sp,sp,-20
  81b0d4:	df000415 	stw	fp,16(sp)
  81b0d8:	df000404 	addi	fp,sp,16
  81b0dc:	e13ffe15 	stw	r4,-8(fp)
  81b0e0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  81b0e4:	e0bfff17 	ldw	r2,-4(fp)
  81b0e8:	10840070 	cmpltui	r2,r2,4097
  81b0ec:	1000021e 	bne	r2,zero,81b0f8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  81b0f0:	00840004 	movi	r2,4096
  81b0f4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  81b0f8:	e0fffe17 	ldw	r3,-8(fp)
  81b0fc:	e0bfff17 	ldw	r2,-4(fp)
  81b100:	1885883a 	add	r2,r3,r2
  81b104:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81b108:	e0bffe17 	ldw	r2,-8(fp)
  81b10c:	e0bffd15 	stw	r2,-12(fp)
  81b110:	00000506 	br	81b128 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  81b114:	e0bffd17 	ldw	r2,-12(fp)
  81b118:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81b11c:	e0bffd17 	ldw	r2,-12(fp)
  81b120:	10800804 	addi	r2,r2,32
  81b124:	e0bffd15 	stw	r2,-12(fp)
  81b128:	e0fffd17 	ldw	r3,-12(fp)
  81b12c:	e0bffc17 	ldw	r2,-16(fp)
  81b130:	18bff836 	bltu	r3,r2,81b114 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  81b134:	e0bffe17 	ldw	r2,-8(fp)
  81b138:	108007cc 	andi	r2,r2,31
  81b13c:	1005003a 	cmpeq	r2,r2,zero
  81b140:	1000021e 	bne	r2,zero,81b14c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  81b144:	e0bffd17 	ldw	r2,-12(fp)
  81b148:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  81b14c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  81b150:	e037883a 	mov	sp,fp
  81b154:	df000017 	ldw	fp,0(sp)
  81b158:	dec00104 	addi	sp,sp,4
  81b15c:	f800283a 	ret

0081b160 <atexit>:
  81b160:	200b883a 	mov	r5,r4
  81b164:	000d883a 	mov	r6,zero
  81b168:	0009883a 	mov	r4,zero
  81b16c:	000f883a 	mov	r7,zero
  81b170:	081b2201 	jmpi	81b220 <__register_exitproc>

0081b174 <exit>:
  81b174:	defffe04 	addi	sp,sp,-8
  81b178:	000b883a 	mov	r5,zero
  81b17c:	dc000015 	stw	r16,0(sp)
  81b180:	dfc00115 	stw	ra,4(sp)
  81b184:	2021883a 	mov	r16,r4
  81b188:	081b3580 	call	81b358 <__call_exitprocs>
  81b18c:	008020b4 	movhi	r2,130
  81b190:	10b7ce04 	addi	r2,r2,-8392
  81b194:	11000017 	ldw	r4,0(r2)
  81b198:	20800f17 	ldw	r2,60(r4)
  81b19c:	10000126 	beq	r2,zero,81b1a4 <exit+0x30>
  81b1a0:	103ee83a 	callr	r2
  81b1a4:	8009883a 	mov	r4,r16
  81b1a8:	081b5480 	call	81b548 <_exit>

0081b1ac <memcmp>:
  81b1ac:	00c000c4 	movi	r3,3
  81b1b0:	1980032e 	bgeu	r3,r6,81b1c0 <memcmp+0x14>
  81b1b4:	2144b03a 	or	r2,r4,r5
  81b1b8:	10c4703a 	and	r2,r2,r3
  81b1bc:	10000f26 	beq	r2,zero,81b1fc <memcmp+0x50>
  81b1c0:	31ffffc4 	addi	r7,r6,-1
  81b1c4:	3000061e 	bne	r6,zero,81b1e0 <memcmp+0x34>
  81b1c8:	00000a06 	br	81b1f4 <memcmp+0x48>
  81b1cc:	39ffffc4 	addi	r7,r7,-1
  81b1d0:	00bfffc4 	movi	r2,-1
  81b1d4:	21000044 	addi	r4,r4,1
  81b1d8:	29400044 	addi	r5,r5,1
  81b1dc:	38800526 	beq	r7,r2,81b1f4 <memcmp+0x48>
  81b1e0:	20c00003 	ldbu	r3,0(r4)
  81b1e4:	28800003 	ldbu	r2,0(r5)
  81b1e8:	18bff826 	beq	r3,r2,81b1cc <memcmp+0x20>
  81b1ec:	1885c83a 	sub	r2,r3,r2
  81b1f0:	f800283a 	ret
  81b1f4:	0005883a 	mov	r2,zero
  81b1f8:	f800283a 	ret
  81b1fc:	180f883a 	mov	r7,r3
  81b200:	20c00017 	ldw	r3,0(r4)
  81b204:	28800017 	ldw	r2,0(r5)
  81b208:	18bfed1e 	bne	r3,r2,81b1c0 <memcmp+0x14>
  81b20c:	31bfff04 	addi	r6,r6,-4
  81b210:	21000104 	addi	r4,r4,4
  81b214:	29400104 	addi	r5,r5,4
  81b218:	39bff936 	bltu	r7,r6,81b200 <memcmp+0x54>
  81b21c:	003fe806 	br	81b1c0 <memcmp+0x14>

0081b220 <__register_exitproc>:
  81b220:	defffa04 	addi	sp,sp,-24
  81b224:	008020b4 	movhi	r2,130
  81b228:	10b7ce04 	addi	r2,r2,-8392
  81b22c:	dc000015 	stw	r16,0(sp)
  81b230:	14000017 	ldw	r16,0(r2)
  81b234:	dd000415 	stw	r20,16(sp)
  81b238:	2829883a 	mov	r20,r5
  81b23c:	81405217 	ldw	r5,328(r16)
  81b240:	dcc00315 	stw	r19,12(sp)
  81b244:	dc800215 	stw	r18,8(sp)
  81b248:	dc400115 	stw	r17,4(sp)
  81b24c:	dfc00515 	stw	ra,20(sp)
  81b250:	2023883a 	mov	r17,r4
  81b254:	3027883a 	mov	r19,r6
  81b258:	3825883a 	mov	r18,r7
  81b25c:	28002526 	beq	r5,zero,81b2f4 <__register_exitproc+0xd4>
  81b260:	29000117 	ldw	r4,4(r5)
  81b264:	008007c4 	movi	r2,31
  81b268:	11002716 	blt	r2,r4,81b308 <__register_exitproc+0xe8>
  81b26c:	8800101e 	bne	r17,zero,81b2b0 <__register_exitproc+0x90>
  81b270:	2105883a 	add	r2,r4,r4
  81b274:	1085883a 	add	r2,r2,r2
  81b278:	20c00044 	addi	r3,r4,1
  81b27c:	1145883a 	add	r2,r2,r5
  81b280:	0009883a 	mov	r4,zero
  81b284:	15000215 	stw	r20,8(r2)
  81b288:	28c00115 	stw	r3,4(r5)
  81b28c:	2005883a 	mov	r2,r4
  81b290:	dfc00517 	ldw	ra,20(sp)
  81b294:	dd000417 	ldw	r20,16(sp)
  81b298:	dcc00317 	ldw	r19,12(sp)
  81b29c:	dc800217 	ldw	r18,8(sp)
  81b2a0:	dc400117 	ldw	r17,4(sp)
  81b2a4:	dc000017 	ldw	r16,0(sp)
  81b2a8:	dec00604 	addi	sp,sp,24
  81b2ac:	f800283a 	ret
  81b2b0:	29802204 	addi	r6,r5,136
  81b2b4:	00800044 	movi	r2,1
  81b2b8:	110e983a 	sll	r7,r2,r4
  81b2bc:	30c04017 	ldw	r3,256(r6)
  81b2c0:	2105883a 	add	r2,r4,r4
  81b2c4:	1085883a 	add	r2,r2,r2
  81b2c8:	1185883a 	add	r2,r2,r6
  81b2cc:	19c6b03a 	or	r3,r3,r7
  81b2d0:	14802015 	stw	r18,128(r2)
  81b2d4:	14c00015 	stw	r19,0(r2)
  81b2d8:	00800084 	movi	r2,2
  81b2dc:	30c04015 	stw	r3,256(r6)
  81b2e0:	88bfe31e 	bne	r17,r2,81b270 <__register_exitproc+0x50>
  81b2e4:	30804117 	ldw	r2,260(r6)
  81b2e8:	11c4b03a 	or	r2,r2,r7
  81b2ec:	30804115 	stw	r2,260(r6)
  81b2f0:	003fdf06 	br	81b270 <__register_exitproc+0x50>
  81b2f4:	008020b4 	movhi	r2,130
  81b2f8:	108b8804 	addi	r2,r2,11808
  81b2fc:	100b883a 	mov	r5,r2
  81b300:	80805215 	stw	r2,328(r16)
  81b304:	003fd606 	br	81b260 <__register_exitproc+0x40>
  81b308:	00802074 	movhi	r2,129
  81b30c:	10a3b804 	addi	r2,r2,-28960
  81b310:	1000021e 	bne	r2,zero,81b31c <__register_exitproc+0xfc>
  81b314:	013fffc4 	movi	r4,-1
  81b318:	003fdc06 	br	81b28c <__register_exitproc+0x6c>
  81b31c:	01006404 	movi	r4,400
  81b320:	103ee83a 	callr	r2
  81b324:	1007883a 	mov	r3,r2
  81b328:	103ffa26 	beq	r2,zero,81b314 <__register_exitproc+0xf4>
  81b32c:	80805217 	ldw	r2,328(r16)
  81b330:	180b883a 	mov	r5,r3
  81b334:	18000115 	stw	zero,4(r3)
  81b338:	18800015 	stw	r2,0(r3)
  81b33c:	80c05215 	stw	r3,328(r16)
  81b340:	18006215 	stw	zero,392(r3)
  81b344:	18006315 	stw	zero,396(r3)
  81b348:	0009883a 	mov	r4,zero
  81b34c:	883fc826 	beq	r17,zero,81b270 <__register_exitproc+0x50>
  81b350:	003fd706 	br	81b2b0 <__register_exitproc+0x90>

0081b354 <register_fini>:
  81b354:	f800283a 	ret

0081b358 <__call_exitprocs>:
  81b358:	008020b4 	movhi	r2,130
  81b35c:	10b7ce04 	addi	r2,r2,-8392
  81b360:	10800017 	ldw	r2,0(r2)
  81b364:	defff304 	addi	sp,sp,-52
  81b368:	df000b15 	stw	fp,44(sp)
  81b36c:	d8800115 	stw	r2,4(sp)
  81b370:	00802074 	movhi	r2,129
  81b374:	10a3b304 	addi	r2,r2,-28980
  81b378:	1005003a 	cmpeq	r2,r2,zero
  81b37c:	d8800215 	stw	r2,8(sp)
  81b380:	d8800117 	ldw	r2,4(sp)
  81b384:	dd400815 	stw	r21,32(sp)
  81b388:	dd000715 	stw	r20,28(sp)
  81b38c:	10805204 	addi	r2,r2,328
  81b390:	dfc00c15 	stw	ra,48(sp)
  81b394:	ddc00a15 	stw	r23,40(sp)
  81b398:	dd800915 	stw	r22,36(sp)
  81b39c:	dcc00615 	stw	r19,24(sp)
  81b3a0:	dc800515 	stw	r18,20(sp)
  81b3a4:	dc400415 	stw	r17,16(sp)
  81b3a8:	dc000315 	stw	r16,12(sp)
  81b3ac:	282b883a 	mov	r21,r5
  81b3b0:	2039883a 	mov	fp,r4
  81b3b4:	d8800015 	stw	r2,0(sp)
  81b3b8:	2829003a 	cmpeq	r20,r5,zero
  81b3bc:	d8800117 	ldw	r2,4(sp)
  81b3c0:	14405217 	ldw	r17,328(r2)
  81b3c4:	88001026 	beq	r17,zero,81b408 <__call_exitprocs+0xb0>
  81b3c8:	ddc00017 	ldw	r23,0(sp)
  81b3cc:	88800117 	ldw	r2,4(r17)
  81b3d0:	8c802204 	addi	r18,r17,136
  81b3d4:	143fffc4 	addi	r16,r2,-1
  81b3d8:	80000916 	blt	r16,zero,81b400 <__call_exitprocs+0xa8>
  81b3dc:	05bfffc4 	movi	r22,-1
  81b3e0:	a000151e 	bne	r20,zero,81b438 <__call_exitprocs+0xe0>
  81b3e4:	8409883a 	add	r4,r16,r16
  81b3e8:	2105883a 	add	r2,r4,r4
  81b3ec:	1485883a 	add	r2,r2,r18
  81b3f0:	10c02017 	ldw	r3,128(r2)
  81b3f4:	a8c01126 	beq	r21,r3,81b43c <__call_exitprocs+0xe4>
  81b3f8:	843fffc4 	addi	r16,r16,-1
  81b3fc:	85bff81e 	bne	r16,r22,81b3e0 <__call_exitprocs+0x88>
  81b400:	d8800217 	ldw	r2,8(sp)
  81b404:	10003126 	beq	r2,zero,81b4cc <__call_exitprocs+0x174>
  81b408:	dfc00c17 	ldw	ra,48(sp)
  81b40c:	df000b17 	ldw	fp,44(sp)
  81b410:	ddc00a17 	ldw	r23,40(sp)
  81b414:	dd800917 	ldw	r22,36(sp)
  81b418:	dd400817 	ldw	r21,32(sp)
  81b41c:	dd000717 	ldw	r20,28(sp)
  81b420:	dcc00617 	ldw	r19,24(sp)
  81b424:	dc800517 	ldw	r18,20(sp)
  81b428:	dc400417 	ldw	r17,16(sp)
  81b42c:	dc000317 	ldw	r16,12(sp)
  81b430:	dec00d04 	addi	sp,sp,52
  81b434:	f800283a 	ret
  81b438:	8409883a 	add	r4,r16,r16
  81b43c:	88c00117 	ldw	r3,4(r17)
  81b440:	2105883a 	add	r2,r4,r4
  81b444:	1445883a 	add	r2,r2,r17
  81b448:	18ffffc4 	addi	r3,r3,-1
  81b44c:	11800217 	ldw	r6,8(r2)
  81b450:	1c001526 	beq	r3,r16,81b4a8 <__call_exitprocs+0x150>
  81b454:	10000215 	stw	zero,8(r2)
  81b458:	303fe726 	beq	r6,zero,81b3f8 <__call_exitprocs+0xa0>
  81b45c:	00c00044 	movi	r3,1
  81b460:	1c06983a 	sll	r3,r3,r16
  81b464:	90804017 	ldw	r2,256(r18)
  81b468:	8cc00117 	ldw	r19,4(r17)
  81b46c:	1884703a 	and	r2,r3,r2
  81b470:	10001426 	beq	r2,zero,81b4c4 <__call_exitprocs+0x16c>
  81b474:	90804117 	ldw	r2,260(r18)
  81b478:	1884703a 	and	r2,r3,r2
  81b47c:	10000c1e 	bne	r2,zero,81b4b0 <__call_exitprocs+0x158>
  81b480:	2105883a 	add	r2,r4,r4
  81b484:	1485883a 	add	r2,r2,r18
  81b488:	11400017 	ldw	r5,0(r2)
  81b48c:	e009883a 	mov	r4,fp
  81b490:	303ee83a 	callr	r6
  81b494:	88800117 	ldw	r2,4(r17)
  81b498:	98bfc81e 	bne	r19,r2,81b3bc <__call_exitprocs+0x64>
  81b49c:	b8800017 	ldw	r2,0(r23)
  81b4a0:	147fd526 	beq	r2,r17,81b3f8 <__call_exitprocs+0xa0>
  81b4a4:	003fc506 	br	81b3bc <__call_exitprocs+0x64>
  81b4a8:	8c000115 	stw	r16,4(r17)
  81b4ac:	003fea06 	br	81b458 <__call_exitprocs+0x100>
  81b4b0:	2105883a 	add	r2,r4,r4
  81b4b4:	1485883a 	add	r2,r2,r18
  81b4b8:	11000017 	ldw	r4,0(r2)
  81b4bc:	303ee83a 	callr	r6
  81b4c0:	003ff406 	br	81b494 <__call_exitprocs+0x13c>
  81b4c4:	303ee83a 	callr	r6
  81b4c8:	003ff206 	br	81b494 <__call_exitprocs+0x13c>
  81b4cc:	88800117 	ldw	r2,4(r17)
  81b4d0:	1000081e 	bne	r2,zero,81b4f4 <__call_exitprocs+0x19c>
  81b4d4:	89000017 	ldw	r4,0(r17)
  81b4d8:	20000726 	beq	r4,zero,81b4f8 <__call_exitprocs+0x1a0>
  81b4dc:	b9000015 	stw	r4,0(r23)
  81b4e0:	8809883a 	mov	r4,r17
  81b4e4:	0808ecc0 	call	808ecc <free>
  81b4e8:	bc400017 	ldw	r17,0(r23)
  81b4ec:	883fb71e 	bne	r17,zero,81b3cc <__call_exitprocs+0x74>
  81b4f0:	003fc506 	br	81b408 <__call_exitprocs+0xb0>
  81b4f4:	89000017 	ldw	r4,0(r17)
  81b4f8:	882f883a 	mov	r23,r17
  81b4fc:	2023883a 	mov	r17,r4
  81b500:	883fb21e 	bne	r17,zero,81b3cc <__call_exitprocs+0x74>
  81b504:	003fc006 	br	81b408 <__call_exitprocs+0xb0>

0081b508 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  81b508:	defffd04 	addi	sp,sp,-12
  81b50c:	df000215 	stw	fp,8(sp)
  81b510:	df000204 	addi	fp,sp,8
  81b514:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  81b518:	e0bfff17 	ldw	r2,-4(fp)
  81b51c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81b520:	e0bffe17 	ldw	r2,-8(fp)
  81b524:	1005003a 	cmpeq	r2,r2,zero
  81b528:	1000021e 	bne	r2,zero,81b534 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  81b52c:	002af070 	cmpltui	zero,zero,43969
  81b530:	00000106 	br	81b538 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  81b534:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  81b538:	e037883a 	mov	sp,fp
  81b53c:	df000017 	ldw	fp,0(sp)
  81b540:	dec00104 	addi	sp,sp,4
  81b544:	f800283a 	ret

0081b548 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  81b548:	defffd04 	addi	sp,sp,-12
  81b54c:	dfc00215 	stw	ra,8(sp)
  81b550:	df000115 	stw	fp,4(sp)
  81b554:	df000104 	addi	fp,sp,4
  81b558:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  81b55c:	e13fff17 	ldw	r4,-4(fp)
  81b560:	081b5080 	call	81b508 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81b564:	003fff06 	br	81b564 <_exit+0x1c>
  81b568:	00000010 	cmplti	zero,zero,0
  81b56c:	00000000 	call	0 <__reset-0x800000>
  81b570:	00527a01 	jmpi	527a0 <__reset-0x7ad860>
  81b574:	011f7c01 	jmpi	11f7c0 <__reset-0x6e0840>
  81b578:	001b0c0b 	ldhu	zero,27696(zero)
  81b57c:	00000028 	cmpgeui	zero,zero,0
  81b580:	00000018 	cmpnei	zero,zero,0
  81b584:	0081033c 	xorhi	r2,zero,1036
  81b588:	000005dc 	xori	zero,zero,23
  81b58c:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  81b590:	92099170 	cmpltui	r8,r18,9797
  81b594:	95079308 	cmpgei	r20,r18,7756
  81b598:	97049605 	stb	fp,4696(r18)
  81b59c:	90019f03 	ldbu	zero,1660(r18)
  81b5a0:	9c06940a 	0x9c06940a
  81b5a4:	00000002 	0x2
  81b5a8:	00000028 	cmpgeui	zero,zero,0
  81b5ac:	00000044 	movi	zero,1
  81b5b0:	00810918 	cmpnei	r2,zero,1060
  81b5b4:	000005b0 	cmpltui	zero,zero,22
  81b5b8:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  81b5bc:	92099168 	cmpgeui	r8,r18,9797
  81b5c0:	95079308 	cmpgei	r20,r18,7756
  81b5c4:	9c039705 	stb	r16,3676(r19)
  81b5c8:	90019f02 	0x90019f02
  81b5cc:	9606940a 	0x9606940a
  81b5d0:	00000004 	movi	zero,0
  81b5d4:	0081b354 	movui	r2,1741
