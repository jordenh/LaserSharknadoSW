
LaserSharknado.elf:     file format elf32-littlenios2
LaserSharknado.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000184c0 memsz 0x000184c0 flags r-x
    LOAD off    0x000194e0 vaddr 0x008184e0 paddr 0x0081a09c align 2**12
         filesz 0x00001bbc memsz 0x00001bbc flags rw-
    LOAD off    0x0001bc58 vaddr 0x0081bc58 paddr 0x0081bc58 align 2**12
         filesz 0x00000000 memsz 0x00000a9c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000177ac  008001b8  008001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b7c  00817964  00817964  00018964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bbc  008184e0  0081a09c  000194e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000a9c  0081bc58  0081bc58  0001bc58  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001b09c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001018  00000000  00000000  0001b0c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000027c9  00000000  00000000  0001c0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002d7e2  00000000  00000000  0001e8a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009b52  00000000  00000000  0004c08b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001bacd  00000000  00000000  00055bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000029d8  00000000  00000000  000716ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002bc2  00000000  00000000  00074084  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000edca  00000000  00000000  00076c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00085a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a98  00000000  00000000  00085a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008b2d6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0008b2d9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008b2e5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008b2e6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0008b2e7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0008b2f2  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0008b2fd  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0008b308  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000035  00000000  00000000  0008b313  2**0
                  CONTENTS, READONLY
 26 .jdi          000057f2  00000000  00000000  0008b348  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00096038  00000000  00000000  00090b3a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b8 l    d  .text	00000000 .text
00817964 l    d  .rodata	00000000 .rodata
008184e0 l    d  .rwdata	00000000 .rwdata
0081bc58 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00800200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 audio.c
00800a50 l     F .text	000000c0 playLaserInterrupt
00000000 l    df *ABS*	00000000 audio_up_hack.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 player.c
00000000 l    df *ABS*	00000000 sd_card.c
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
00817f60 l     O .rodata	00000108 two_over_pi
00817ee0 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
00818068 l     O .rodata	00000010 init_jk
00818078 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00803cc0 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00804b80 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00805e98 l     F .text	00000058 __sprint_r
0081824e l     O .rodata	00000010 blanks.3452
0081823e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00807efc l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008098f8 l     F .text	00000058 std
00809a04 l     F .text	00000008 __fp_lock
00809a0c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
008188e8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0081a070 l     O .rwdata	00000004 charset
00818284 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
008183cc l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0080d788 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080d7e8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080d8e8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080dbc8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080dca8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080de04 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080e030 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081a090 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0080e4a0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00818e9c l     O .rwdata	00001060 jtag_uart_0
00819efc l     O .rwdata	00000030 audio_and_video_config_0
00819f2c l     O .rwdata	00000030 audio_0
00819f5c l     O .rwdata	0000002c character_lcd_0
00819f88 l     O .rwdata	00000048 char_drawer
00819fd0 l     O .rwdata	00000054 pixel_buffer_dma
0081a024 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
0080e8a8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080eae0 l     F .text	0000022c altera_avalon_jtag_uart_irq
0080ed0c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080f388 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 altera_up_sd_card_avalon_interface.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00816c78 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00816e64 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00816fa0 l     F .text	000000dc alt_file_locked
00817204 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
008176e0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00817894 l     F .text	00000040 alt_sim_halt
0080ff4c g     F .text	00000038 alt_up_av_config_reset
0081bcc0 g     O .bss	00000004 aux_status_register
0080af74 g     F .text	00000094 _mprec_log10
008103f0 g     F .text	00000064 alt_up_av_config_read_D5M_cfg_register
0080b060 g     F .text	00000088 __any_on
0080c6fc g     F .text	00000070 _isatty_r
008183a4 g     O .rodata	00000028 __mprec_tinytens
0080ffbc g     F .text	00000030 alt_up_av_config_disable_interrupt
0080de64 g     F .text	0000006c alt_main
00811a20 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00805d00 g     F .text	000000a0 _puts_r
0081c464 g     O .bss	00000100 alt_irq
0080357c g     F .text	00000018 fabs
0080c76c g     F .text	00000078 _lseek_r
0081a09c g       *ABS*	00000000 __flash_rwdata_start
008105fc g     F .text	00000034 alt_up_character_lcd_send_cmd
00801234 g     F .text	00000048 setHardwareTimerPeriod
008047e0 g     F .text	00000088 __eqdf2
008126d0 g     F .text	000001b0 Check_for_Master_Boot_Record
0080f864 g     F .text	00000070 alt_up_audio_read_fifo_avail
0081008c g     F .text	000000ac alt_up_av_config_write_audio_cfg_register
0081c6f4 g       *ABS*	00000000 __alt_heap_start
00816588 g     F .text	000001cc alt_up_sd_card_fclose
00805c88 g     F .text	00000044 printf
0080f8d4 g     F .text	00000070 alt_up_audio_record_r
0080c1c8 g     F .text	00000068 __sseek
00809960 g     F .text	000000a4 __sinit
00810c44 g     F .text	00000114 alt_up_char_buffer_string
0081a050 g     O .rwdata	00000004 CONFIG_NAME
0080a638 g     F .text	00000084 _setlocale_r
00809a60 g     F .text	00000068 __sfmoreglue
0080def0 g     F .text	00000020 __malloc_unlock
00803a60 g     F .text	00000174 __divsf3
0081bce4 g     O .bss	00000004 current_sector_modified
00810b74 g     F .text	000000d0 alt_up_char_buffer_draw
0081bc64 g     O .bss	00000004 laserFileWordLength
0080f7dc g     F .text	00000088 alt_up_audio_reset_audio_core
00816850 g     F .text	00000090 Read_Sector_Data_Attempt_CRC
0081bcb4 g     O .bss	00000004 altera_avalon_timer_ts_freq
0080a9f0 g     F .text	000000e0 memmove
00809a50 g     F .text	00000010 _cleanup
0080b0e8 g     F .text	000000bc _Balloc
0081514c g     F .text	000000c8 alt_up_sd_card_is_Present
008123e8 g     F .text	00000050 Save_Modified_Sector
00810df4 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00804868 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00810580 g     F .text	0000007c get_DDRAM_addr
00800c90 g     F .text	00000040 openFile
00800578 g     F .text	000001a0 audioTest
00810db4 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
008014cc g     F .text	0000005c drawBox
00800000 g     F .entry	0000001c __reset
0081bcdc g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080c688 g     F .text	00000074 _fstat_r
0081bc88 g     O .bss	00000004 errno
00804b48 g     F .text	00000038 __make_dp
00803594 g     F .text	00000224 floor
0080f7a0 g     F .text	0000003c alt_up_audio_write_interrupt_pending
0081bca0 g     O .bss	00000004 alt_argv
00822050 g       *ABS*	00000000 _gp
0080e350 g     F .text	00000030 usleep
0081570c g     F .text	000003a8 alt_up_sd_card_fopen
00815288 g     F .text	000000d4 alt_up_sd_card_find_first
0081bcd0 g     O .bss	00000004 command_argument_register
00810f94 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
0081bd14 g     O .bss	000001e8 tone
00818d1c g     O .rwdata	00000180 alt_fd_list
00801694 g     F .text	00000828 __ieee754_rem_pio2
0081497c g     F .text	0000012c find_first_empty_record_in_root_directory
00816da0 g     F .text	00000094 alt_find_dev
0080a950 g     F .text	000000a0 memcpy
00810794 g     F .text	0000004c alt_up_character_lcd_write_fd
00810d58 g     F .text	0000005c alt_up_char_buffer_clear
00809a44 g     F .text	0000000c _cleanup_r
00804978 g     F .text	000000f8 __floatsidf
00816f28 g     F .text	00000078 alt_io_redirect
0080d470 g     F .text	00000088 __ltdf2
00817964 g       *ABS*	00000000 __DTOR_END__
00805da0 g     F .text	00000014 puts
0081458c g     F .text	000001a4 find_first_empty_cluster
0080aec4 g     F .text	000000b0 __ratio
00815088 g     F .text	000000c4 alt_up_sd_card_open_dev
0080fd38 g     F .text	00000060 alt_up_audio_read_fifo_head
00811044 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0080ef24 g     F .text	00000224 altera_avalon_jtag_uart_read
00805534 g     F .text	00000014 malloc
00805ccc g     F .text	00000034 _printf_r
00804cbc g     F .text	00000008 __udivsi3
0080db08 g     F .text	000000c0 isatty
008182b4 g     O .rodata	000000c8 __mprec_tens
008116d0 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
0080a614 g     F .text	00000008 __locale_charset
00801ebc g     F .text	0000052c __kernel_cos
008039bc g     F .text	000000a4 __fixunsdfsi
0081745c g     F .text	00000090 alt_icache_flush
0081bc7c g     O .bss	00000004 __malloc_top_pad
0080fec0 g     F .text	0000008c alt_up_av_config_read_data
0081a06c g     O .rwdata	00000004 __mb_cur_max
0080a61c g     F .text	0000000c _localeconv_r
0080b7e0 g     F .text	0000003c __i2b
00809ff8 g     F .text	0000049c __sfvwrite_r
00813868 g     F .text	000000c0 get_dir_divider_location
00800fa4 g     F .text	00000290 timer_test
00805db4 g     F .text	00000070 _sbrk_r
00811eb4 g     F .text	000000d0 helper_plot_pixel
008012b0 g     F .text	00000028 hasHardwareTimerExpired
00813508 g     F .text	000000d0 filename_to_upper_case
00815ab4 g     F .text	00000090 alt_up_sd_card_set_attributes
00812880 g     F .text	00000284 Read_File_Record_At_Offset
0080c7e4 g     F .text	00000078 _read_r
00818ce8 g     O .rwdata	0000000c __lc_ctype
0081a084 g     O .rwdata	00000004 alt_max_fd
0080fd98 g     F .text	00000060 alt_up_audio_write_fifo_head
00805320 g     F .text	00000138 __unpack_d
00814128 g     F .text	00000464 find_file_in_directory
0080c564 g     F .text	00000110 _fclose_r
008098c4 g     F .text	00000034 fflush
0081bc80 g     O .bss	00000004 __malloc_max_sbrked_mem
00800d34 g     F .text	00000094 readWord
0080d948 g     F .text	000001c0 alt_irq_register
00803264 g     F .text	00000318 __kernel_sin
00803c6c g     F .text	00000054 __extendsfdf2
00815214 g     F .text	00000074 alt_up_sd_card_is_FAT16
00804150 g     F .text	00000074 __adddf3
0080ada4 g     F .text	00000120 __b2d
00811078 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
0080ce38 g     F .text	000005b0 __umoddi3
0080dd14 g     F .text	000000f0 lseek
0081a068 g     O .rwdata	00000004 _global_impure_ptr
00813c14 g     F .text	00000514 get_home_directory_cluster_for_file
0080bb5c g     F .text	000005f4 _realloc_r
0081c6f4 g       *ABS*	00000000 __bss_end
008111dc g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
0080e244 g     F .text	0000010c alt_tick
0080c85c g     F .text	000005dc __udivdi3
0081837c g     O .rodata	00000028 __mprec_bigtens
0080ba3c g     F .text	00000120 __s2b
0080d4f8 g     F .text	00000194 __floatunsidf
0080acc4 g     F .text	00000060 __mcmp
0081bce8 g     O .bss	00000004 current_sector_index
0080f5ec g     F .text	00000040 alt_up_audio_open_dev
00809a2c g     F .text	00000018 __fp_lock_all
00800e9c g     F .text	000000b8 getWavFileLength
0080fa28 g     F .text	00000070 alt_up_audio_play_r
0080e1ac g     F .text	00000098 alt_alarm_stop
008125ec g     F .text	000000e4 mark_cluster
0081bc98 g     O .bss	00000004 alt_irq_active
0081a054 g     O .rwdata	00000004 AUDIO_NAME
008000ec g     F .exceptions	000000cc alt_irq_handler
00818cf4 g     O .rwdata	00000028 alt_dev_null
008023e8 g     F .text	00000e7c __kernel_rem_pio2
00814aa8 g     F .text	000001b8 convert_filename_to_name_extension
00804f44 g     F .text	000000c8 __unpack_f
00810a7c g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00816b80 g     F .text	00000044 alt_dcache_flush_all
0080ab90 g     F .text	00000070 __hi0bits
0081bcbc g     O .bss	00000004 is_sd_card_formated_as_FAT16
00811df0 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
00804a70 g     F .text	000000d8 __fixdfsi
00814730 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
0081a09c g       *ABS*	00000000 __ram_rwdata_end
0081a07c g     O .rwdata	00000008 alt_dev_list
0080e380 g     F .text	00000120 write
0081bce0 g     O .bss	00000004 device_pointer
0080f5c4 g     F .text	00000028 alt_timestamp_freq
00811f84 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
00800c30 g     F .text	00000060 openSdCard
008184e0 g       *ABS*	00000000 __ram_rodata_end
0081bc60 g     O .bss	00000004 DEBUG
0080d814 g     F .text	000000d4 fstat
0080b91c g     F .text	00000120 __pow5mult
0081bc8c g     O .bss	00000004 __nlocale_changed
00804cc4 g     F .text	00000008 __umodsi3
0081c6f4 g       *ABS*	00000000 end
00804de4 g     F .text	00000160 __pack_f
00810ab0 g     F .text	00000084 alt_up_char_buffer_init
0080127c g     F .text	00000034 isHardwareTimerRunning
0080ea28 g     F .text	000000b8 altera_avalon_jtag_uart_init
00817960 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080f3fc g     F .text	00000088 alt_avalon_timer_sc_init
00804d64 g     F .text	00000080 __clzsi2
0080f148 g     F .text	00000240 altera_avalon_jtag_uart_write
00809950 g     F .text	00000004 __sfp_lock_acquire
0080a86c g     F .text	000000e4 memchr
008106a4 g     F .text	00000078 alt_up_character_lcd_write
00805ef0 g     F .text	00001eac ___vfprintf_internal_r
00801478 g     F .text	00000054 printLine
00809ce4 g     F .text	00000314 _free_r
008176e4 g     F .text	000001b0 __call_exitprocs
0081bc90 g     O .bss	00000004 __mlocale_changed
0081a060 g     O .rwdata	00000004 __malloc_sbrk_base
008001b8 g     F .text	0000004c _start
0081bca8 g     O .bss	00000004 _alt_tick_rate
00801528 g     F .text	0000016c sin
0080fc0c g     F .text	0000012c alt_up_audio_write_fifo
0080b4ac g     F .text	0000014c __lshift
0080fe5c g     F .text	00000064 alt_up_av_config_write_data
0081bcac g     O .bss	00000004 _alt_nticks
0080df10 g     F .text	00000120 read
0080e534 g     F .text	00000374 alt_sys_init
00810908 g     F .text	000000b0 alt_up_character_lcd_shift_display
00803bd4 g     F .text	00000098 __floatsisf
0080fb08 g     F .text	00000104 alt_up_audio_read_fifo
008007ec g     F .text	0000010c playLaser1
008175ac g     F .text	00000134 __register_exitproc
0081051c g     F .text	00000064 alt_up_av_config_write_LTM_cfg_register
0080f714 g     F .text	00000050 alt_up_audio_disable_write_interrupt
00800a04 g     F .text	0000004c playLaser
0080b5f8 g     F .text	000001e8 __multiply
008109b8 g     F .text	00000090 alt_up_character_lcd_erase_pos
0080edbc g     F .text	00000074 altera_avalon_jtag_uart_close
008184e0 g       *ABS*	00000000 __ram_rwdata_start
00817964 g       *ABS*	00000000 __ram_rodata_start
0081bcec g     O .bss	00000028 __malloc_current_mallinfo
0080b1a4 g     F .text	0000017c __d2b
00800718 g     F .text	000000d4 testTone
0081bcb8 g     O .bss	00000004 initialized
0081bc68 g     O .bss	00000004 laserBufferLength
0080e8e0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
008173a4 g     F .text	000000b8 alt_get_fd
0081befc g     O .bss	00000014 search_data
00816a34 g     F .text	0000014c alt_busy_sleep
00805458 g     F .text	000000c8 __fpcmp_parts_d
0080c4f4 g     F .text	00000070 _close_r
0080f6c8 g     F .text	0000004c alt_up_audio_enable_write_interrupt
00817538 g     F .text	00000074 memcmp
0080e990 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0081c6f4 g       *ABS*	00000000 __alt_stack_base
0080e9d8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00807dc0 g     F .text	0000013c __swsetup_r
00804588 g     F .text	00000258 __divdf3
00800dc8 g     F .text	000000d4 readDWord
0080f678 g     F .text	00000050 alt_up_audio_disable_read_interrupt
00809ac8 g     F .text	000000f0 __sfp
0081bf10 g     O .bss	00000054 boot_sector_data
0080b008 g     F .text	00000058 __copybits
008184e0 g     O .rwdata	00000408 __malloc_av_
0080995c g     F .text	00000004 __sinit_lock_release
008041c4 g     F .text	000003c4 __muldf3
0080c2ac g     F .text	00000060 __sread
008180b8 g     O .rodata	00000010 __thenan_sf
00817284 g     F .text	00000120 alt_find_file
00816bc4 g     F .text	000000b4 alt_dev_llist_insert
0080ded0 g     F .text	00000020 __malloc_lock
0080e0f0 g     F .text	000000bc sbrk
008096c8 g     F .text	000001fc _fflush_r
0080c440 g     F .text	000000b4 _calloc_r
008004e8 g     F .text	00000090 playAudio
008012d8 g     F .text	0000002c startHardwareTimer
0081bc58 g       *ABS*	00000000 __bss_start
0080aad0 g     F .text	00000098 memset
00800b10 g     F .text	00000120 main
0080f9b4 g     F .text	00000074 alt_up_audio_write_fifo_space
0081bca4 g     O .bss	00000004 alt_envp
0081bc84 g     O .bss	00000004 __malloc_max_total_mem
00810fec g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
00810b34 g     F .text	00000040 alt_up_char_buffer_open_dev
0080e938 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00815b44 g     F .text	0000008c alt_up_sd_card_get_attributes
00812320 g     F .text	000000c8 Write_Sector_Data
00815f64 g     F .text	00000624 alt_up_sd_card_write
00810858 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0080c1c0 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080c674 g     F .text	00000014 fclose
0080f484 g     F .text	000000a4 alt_timestamp_start
0081c564 g     O .bss	00000190 _atexit0
00808114 g     F .text	000015b4 _dtoa_r
00805548 g     F .text	00000740 _malloc_r
0081a088 g     O .rwdata	00000004 alt_errno
0080a55c g     F .text	000000b8 _fwalk
00804bfc g     F .text	00000060 __divsi3
008180c8 g     O .rodata	00000014 __thenan_df
00810664 g     F .text	00000040 alt_up_character_lcd_open_dev
0081bc6c g     O .bss	00000004 sdDev
00809bb8 g     F .text	0000012c _malloc_trim_r
00817964 g       *ABS*	00000000 __CTOR_END__
0081bc58 g     O .bss	00000004 audio
0081bcc4 g     O .bss	00000004 status_register
00810630 g     F .text	00000034 alt_up_character_lcd_init
008008f8 g     F .text	0000010c readWavFile
0080c30c g     F .text	000000bc strcmp
0081bccc g     O .bss	00000004 command_register
00817964 g       *ABS*	00000000 __flash_rodata_start
00817964 g       *ABS*	00000000 __DTOR_LIST__
00803998 g     F .text	00000024 copysign
0080d3e8 g     F .text	00000088 __nedf2
0080fdf8 g     F .text	00000064 alt_up_av_config_open_dev
0080e500 g     F .text	00000034 alt_irq_init
008013b0 g     F .text	000000c8 drawLine
0080e090 g     F .text	00000060 alt_release_fd
00812534 g     F .text	000000b8 get_cluster_flag
00810a48 g     F .text	00000034 alt_up_character_lcd_cursor_off
008180dc g     O .rodata	00000100 __clz_tab
00812b04 g     F .text	000002b8 Write_File_Record_At_Offset
0081bc94 g     O .bss	00000004 _PathLocale
0081bc70 g     O .bss	00000004 somethingForIrq
008174ec g     F .text	00000014 atexit
0080c3c8 g     F .text	00000078 _write_r
00810054 g     F .text	00000038 alt_up_av_config_read_ready
0080a6bc g     F .text	0000001c setlocale
00812dbc g     F .text	00000648 Check_for_DOS_FAT
00814c60 g     F .text	000002d4 create_file
0081a064 g     O .rwdata	00000004 _impure_ptr
0081bcc8 g     O .bss	00000004 CSD_register_w0
0081bc9c g     O .bss	00000004 alt_argc
008037b8 g     F .text	000001e0 scalbn
0081bcb0 g     O .bss	00000004 altera_avalon_timer_ts_base
00816d3c g     F .text	00000064 _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
0080ad24 g     F .text	00000080 __ulp
0080c150 g     F .text	00000040 __isinfd
00809a14 g     F .text	00000018 __fp_unlock_all
0081a074 g     O .rwdata	00000008 alt_fs_list
008135d8 g     F .text	00000290 check_file_name_for_FAT16_compliance
0081bcd4 g     O .bss	00000004 buffer_memory
00800cd0 g     F .text	00000030 closeFile
0080f944 g     F .text	00000070 alt_up_audio_record_l
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080a628 g     F .text	00000010 localeconv
0080f528 g     F .text	0000009c alt_timestamp
0080ff84 g     F .text	00000038 alt_up_av_config_enable_interrupt
0081bcd8 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
0080ffec g     F .text	00000068 alt_up_av_config_read_acknowledge
0081038c g     F .text	00000064 alt_up_av_config_write_DC2_cfg_register
00801304 g     F .text	0000005c setUp
0081a09c g       *ABS*	00000000 _edata
0081a058 g     O .rwdata	00000004 toneLength
0081c6f4 g       *ABS*	00000000 _end
0081bf64 g     O .bss	00000500 active_files
008001b8 g       *ABS*	00000000 __ram_exceptions_end
00814f34 g     F .text	00000154 copy_file_record_name_to_string
0080ee30 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00800494 g     F .text	00000054 playAudioMono
00813404 g     F .text	00000104 Look_for_FAT16
0080fa98 g     F .text	00000070 alt_up_audio_play_l
0081bc74 g     O .bss	00000004 laserCursor
0080c230 g     F .text	0000007c __swrite
0081a05c g     O .rwdata	00000004 __malloc_trim_threshold
00817264 g     F .text	00000020 altera_nios2_qsys_irq_init
00817500 g     F .text	00000038 exit
0081535c g     F .text	000003b0 alt_up_sd_card_find_next
0080a494 g     F .text	000000c8 _fwalk_reent
0080b320 g     F .text	0000018c __mdiff
008104b8 g     F .text	00000064 alt_up_av_config_read_LTM_cfg_register
00804c5c g     F .text	00000060 __modsi3
00812438 g     F .text	000000fc Read_Sector_Data
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00809954 g     F .text	00000004 __sfp_lock_release
0081071c g     F .text	00000078 alt_up_character_lcd_string
008178d4 g     F .text	00000020 _exit
0080c190 g     F .text	00000030 __isnand
008168e0 g     F .text	00000154 alt_alarm_start
00804ccc g     F .text	00000098 __muldi3
00816754 g     F .text	000000fc Read_Sector_Data_CRC
00815bd0 g     F .text	00000394 alt_up_sd_card_read
0080a6d8 g     F .text	00000194 __smakebuf_r
00805e24 g     F .text	00000074 strlen
0081707c g     F .text	00000188 open
008048f0 g     F .text	00000088 __gedf2
00801360 g     F .text	00000050 clearScreen
00810138 g     F .text	000000f8 alt_up_av_config_read_video_cfg_register
00816e34 g     F .text	00000030 alt_icache_flush_all
00800204 g     F .text	00000290 setupAudio
008107e0 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0081a08c g     O .rwdata	00000004 alt_priority_mask
00800d00 g     F .text	00000034 readByte
00800f54 g     F .text	00000050 readPastWavHeader
00807d9c g     F .text	00000024 __vfprintf_internal
00810454 g     F .text	00000064 alt_up_av_config_write_D5M_cfg_register
008040d0 g     F .text	00000080 __subdf3
0080ac00 g     F .text	000000c4 __lo0bits
0081a094 g     O .rwdata	00000008 alt_alarm_list
00816cd8 g     F .text	00000064 _do_ctors
0080d68c g     F .text	000000fc close
0081bc5c g     O .bss	00000004 config
0080dc28 g     F .text	00000080 alt_load
0080f62c g     F .text	0000004c alt_up_audio_enable_read_interrupt
00810230 g     F .text	000000f8 alt_up_av_config_write_video_cfg_register
0080500c g     F .text	00000314 __pack_d
00813928 g     F .text	000002ec match_file_record_to_name_ext
00805520 g     F .text	00000014 free
00809958 g     F .text	00000004 __sinit_lock_acquire
0080b81c g     F .text	00000100 __multadd
0080ab68 g     F .text	00000028 _Bfree
0081bc78 g     O .bss	00000004 laserBuffer
00810328 g     F .text	00000064 alt_up_av_config_read_DC2_cfg_register
0080f764 g     F .text	0000003c alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406e14 	ori	at,at,440
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000171e 	bne	r2,zero,800188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c020b4 	movhi	r3,130
  800134:	18f11904 	addi	r3,r3,-15260
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11800017 	ldw	r6,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c020b4 	movhi	r3,130
  80014c:	18f11904 	addi	r3,r3,-15260
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	e17ffd17 	ldw	r5,-12(fp)
  800164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800168:	0005313a 	rdctl	r2,ipending
  80016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
  800170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800178:	e0bfff17 	ldw	r2,-4(fp)
  80017c:	1004c03a 	cmpne	r2,r2,zero
  800180:	103fe21e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800184:	00000706 	br	8001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800188:	e0bffe17 	ldw	r2,-8(fp)
  80018c:	1085883a 	add	r2,r2,r2
  800190:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800194:	e0bffd17 	ldw	r2,-12(fp)
  800198:	10800044 	addi	r2,r2,1
  80019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a0:	003fdd06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a4:	e037883a 	mov	sp,fp
  8001a8:	dfc00117 	ldw	ra,4(sp)
  8001ac:	df000017 	ldw	fp,0(sp)
  8001b0:	dec00204 	addi	sp,sp,8
  8001b4:	f800283a 	ret

Disassembly of section .text:

008001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b8:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
  8001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c4:	00bffd16 	blt	zero,r2,8001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c8:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001d0:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  8001d4:	d6881414 	ori	gp,gp,8272
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d8:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001dc:	10af1614 	ori	r2,r2,48216

    movhi r3, %hi(__bss_end)
  8001e0:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001e4:	18f1bd14 	ori	r3,r3,50932

    beq r2, r3, 1f
  8001e8:	10c00326 	beq	r2,r3,8001f8 <_start+0x40>

0:
    stw zero, (r2)
  8001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f4:	10fffd36 	bltu	r2,r3,8001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f8:	080dc280 	call	80dc28 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001fc:	080de640 	call	80de64 <alt_main>

00800200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800200:	003fff06 	br	800200 <alt_after_alt_main>

00800204 <setupAudio>:
unsigned int laserFileWordLength;

volatile int somethingForIrq;

void setupAudio()
{
  800204:	defff604 	addi	sp,sp,-40
  800208:	dfc00915 	stw	ra,36(sp)
  80020c:	df000815 	stw	fp,32(sp)
  800210:	dc800715 	stw	r18,28(sp)
  800214:	dc400615 	stw	r17,24(sp)
  800218:	dc000515 	stw	r16,20(sp)
  80021c:	df000504 	addi	fp,sp,20
	bool error = false;
  800220:	e03fff15 	stw	zero,-4(fp)
	config = (alt_up_av_config_dev *)alt_up_av_config_open_dev(CONFIG_NAME);
  800224:	d1200017 	ldw	r4,-32768(gp)
  800228:	080fdf80 	call	80fdf8 <alt_up_av_config_open_dev>
  80022c:	d0a70315 	stw	r2,-25588(gp)
	if (config == NULL) {
  800230:	d0a70317 	ldw	r2,-25588(gp)
  800234:	1004c03a 	cmpne	r2,r2,zero
  800238:	1000051e 	bne	r2,zero,800250 <setupAudio+0x4c>
		printf("Error: audio video config could not be opened.\n");
  80023c:	01002074 	movhi	r4,129
  800240:	211e6504 	addi	r4,r4,31124
  800244:	0805da00 	call	805da0 <puts>
		error = true;
  800248:	00800044 	movi	r2,1
  80024c:	e0bfff15 	stw	r2,-4(fp)
	}
	while (!alt_up_av_config_read_ready(config)) {
  800250:	d1270317 	ldw	r4,-25588(gp)
  800254:	08100540 	call	810054 <alt_up_av_config_read_ready>
  800258:	1005003a 	cmpeq	r2,r2,zero
  80025c:	103ffc1e 	bne	r2,zero,800250 <setupAudio+0x4c>
	}

	audio = (alt_up_audio_dev *)alt_up_audio_open_dev(AUDIO_NAME);
  800260:	d1200117 	ldw	r4,-32764(gp)
  800264:	080f5ec0 	call	80f5ec <alt_up_audio_open_dev>
  800268:	d0a70215 	stw	r2,-25592(gp)
	if (config == NULL) {
  80026c:	d0a70317 	ldw	r2,-25588(gp)
  800270:	1004c03a 	cmpne	r2,r2,zero
  800274:	1000061e 	bne	r2,zero,800290 <setupAudio+0x8c>
		printf("Error: audio codec could not be opened.\n");
  800278:	01002074 	movhi	r4,129
  80027c:	211e7104 	addi	r4,r4,31172
  800280:	0805da00 	call	805da0 <puts>
		error = true;
  800284:	00800044 	movi	r2,1
  800288:	e0bfff15 	stw	r2,-4(fp)
  80028c:	00000606 	br	8002a8 <setupAudio+0xa4>
	} else if (DEBUG == 1) {
  800290:	d0a70417 	ldw	r2,-25584(gp)
  800294:	10800058 	cmpnei	r2,r2,1
  800298:	1000031e 	bne	r2,zero,8002a8 <setupAudio+0xa4>
		printf("Successfully opened audio codec.\n");
  80029c:	01002074 	movhi	r4,129
  8002a0:	211e7b04 	addi	r4,r4,31212
  8002a4:	0805da00 	call	805da0 <puts>
	}

	int amp = 10000000;
  8002a8:	00802674 	movhi	r2,153
  8002ac:	10a5a004 	addi	r2,r2,-27008
  8002b0:	e0bffe15 	stw	r2,-8(fp)
	//printf("Amp is %d\n", amp);
	int i;
	for (i = 0; i < toneLength; i++) {
  8002b4:	e03ffd15 	stw	zero,-12(fp)
  8002b8:	00003b06 	br	8003a8 <setupAudio+0x1a4>
		tone[i] = amp * sin((float)i * 3.141592 / 122.0);//* (PI / 8.0));
  8002bc:	e4bffd17 	ldw	r18,-12(fp)
  8002c0:	e13ffe17 	ldw	r4,-8(fp)
  8002c4:	08049780 	call	804978 <__floatsidf>
  8002c8:	1021883a 	mov	r16,r2
  8002cc:	1823883a 	mov	r17,r3
  8002d0:	e13ffd17 	ldw	r4,-12(fp)
  8002d4:	0803bd40 	call	803bd4 <__floatsisf>
  8002d8:	1009883a 	mov	r4,r2
  8002dc:	0803c6c0 	call	803c6c <__extendsfdf2>
  8002e0:	100b883a 	mov	r5,r2
  8002e4:	180d883a 	mov	r6,r3
  8002e8:	2809883a 	mov	r4,r5
  8002ec:	300b883a 	mov	r5,r6
  8002f0:	01bf22f4 	movhi	r6,64651
  8002f4:	31801e84 	addi	r6,r6,122
  8002f8:	01d00274 	movhi	r7,16393
  8002fc:	39c87e84 	addi	r7,r7,8698
  800300:	08041c40 	call	8041c4 <__muldf3>
  800304:	1009883a 	mov	r4,r2
  800308:	180b883a 	mov	r5,r3
  80030c:	2005883a 	mov	r2,r4
  800310:	2807883a 	mov	r3,r5
  800314:	1009883a 	mov	r4,r2
  800318:	180b883a 	mov	r5,r3
  80031c:	000d883a 	mov	r6,zero
  800320:	01d017f4 	movhi	r7,16479
  800324:	39e00004 	addi	r7,r7,-32768
  800328:	08045880 	call	804588 <__divdf3>
  80032c:	1009883a 	mov	r4,r2
  800330:	180b883a 	mov	r5,r3
  800334:	2005883a 	mov	r2,r4
  800338:	2807883a 	mov	r3,r5
  80033c:	1009883a 	mov	r4,r2
  800340:	180b883a 	mov	r5,r3
  800344:	08015280 	call	801528 <sin>
  800348:	100f883a 	mov	r7,r2
  80034c:	1811883a 	mov	r8,r3
  800350:	8009883a 	mov	r4,r16
  800354:	880b883a 	mov	r5,r17
  800358:	380d883a 	mov	r6,r7
  80035c:	400f883a 	mov	r7,r8
  800360:	08041c40 	call	8041c4 <__muldf3>
  800364:	1009883a 	mov	r4,r2
  800368:	180b883a 	mov	r5,r3
  80036c:	2005883a 	mov	r2,r4
  800370:	2807883a 	mov	r3,r5
  800374:	1009883a 	mov	r4,r2
  800378:	180b883a 	mov	r5,r3
  80037c:	08039bc0 	call	8039bc <__fixunsdfsi>
  800380:	1009883a 	mov	r4,r2
  800384:	00c020b4 	movhi	r3,130
  800388:	18ef4504 	addi	r3,r3,-17132
  80038c:	9485883a 	add	r2,r18,r18
  800390:	1085883a 	add	r2,r2,r2
  800394:	10c5883a 	add	r2,r2,r3
  800398:	11000015 	stw	r4,0(r2)
	}

	int amp = 10000000;
	//printf("Amp is %d\n", amp);
	int i;
	for (i = 0; i < toneLength; i++) {
  80039c:	e0bffd17 	ldw	r2,-12(fp)
  8003a0:	10800044 	addi	r2,r2,1
  8003a4:	e0bffd15 	stw	r2,-12(fp)
  8003a8:	d0e00217 	ldw	r3,-32760(gp)
  8003ac:	e0bffd17 	ldw	r2,-12(fp)
  8003b0:	10ffc216 	blt	r2,r3,8002bc <setupAudio+0xb8>
		//tone[i] = i % 2 == 0 ? 0x00000FFF : 0x00000000;
	}

	// Need to disable both audio interrupts before setting them up
	// otherwise you get stuck in them when they are setup
	alt_up_audio_disable_read_interrupt(audio);
  8003b4:	d1270217 	ldw	r4,-25592(gp)
  8003b8:	080f6780 	call	80f678 <alt_up_audio_disable_read_interrupt>
	alt_up_audio_disable_write_interrupt(audio);
  8003bc:	d1270217 	ldw	r4,-25592(gp)
  8003c0:	080f7140 	call	80f714 <alt_up_audio_disable_write_interrupt>

	//void *context = NULL;
	void *irqInt = (void *)&somethingForIrq;
  8003c4:	d0a70804 	addi	r2,gp,-25568
  8003c8:	e0bffc15 	stw	r2,-16(fp)
	int interruptStatus = 0;
  8003cc:	e03ffb15 	stw	zero,-20(fp)
							AUDIO_0_IRQ,
							playLaserInterrupt,
							irqInt, 0x0);
	#else
		//void (*functionPtr)(void *, alt_u32);
		interruptStatus = alt_irq_register(AUDIO_0_IRQ,
  8003d0:	010000c4 	movi	r4,3
  8003d4:	e17ffc17 	ldw	r5,-16(fp)
  8003d8:	01802034 	movhi	r6,128
  8003dc:	31829404 	addi	r6,r6,2640
  8003e0:	080d9480 	call	80d948 <alt_irq_register>
  8003e4:	e0bffb15 	stw	r2,-20(fp)
	//functionPtr = &playLaserInterrupt;
	//alt_isr_func *handler = (alt_isr_func *)functionPtr;

	//int interruptStatus = alt_irq_register(AUDIO_0_IRQ, context, *handler);

	if (interruptStatus < 0) {
  8003e8:	e0bffb17 	ldw	r2,-20(fp)
  8003ec:	1004403a 	cmpge	r2,r2,zero
  8003f0:	1000061e 	bne	r2,zero,80040c <setupAudio+0x208>
		printf("Error: audio interrupt could not be setup.\n");
  8003f4:	01002074 	movhi	r4,129
  8003f8:	211e8404 	addi	r4,r4,31248
  8003fc:	0805da00 	call	805da0 <puts>
		error = true;
  800400:	00800044 	movi	r2,1
  800404:	e0bfff15 	stw	r2,-4(fp)
  800408:	00000606 	br	800424 <setupAudio+0x220>
	} else if (DEBUG == 1) {
  80040c:	d0a70417 	ldw	r2,-25584(gp)
  800410:	10800058 	cmpnei	r2,r2,1
  800414:	1000031e 	bne	r2,zero,800424 <setupAudio+0x220>
		printf("Successfully setup audio interrupts.\n");
  800418:	01002074 	movhi	r4,129
  80041c:	211e8f04 	addi	r4,r4,31292
  800420:	0805da00 	call	805da0 <puts>
	}

	laserFileWordLength = 38384;//laserii//(getWavFileLength("laseri.wav") / 2);// laser i = 26200;/*looked in hex file *///
  800424:	00a57c14 	movui	r2,38384
  800428:	d0a70515 	stw	r2,-25580(gp)
	printf("File Length is: %x\n", laserFileWordLength);
  80042c:	d1670517 	ldw	r5,-25580(gp)
  800430:	01002074 	movhi	r4,129
  800434:	211e9904 	addi	r4,r4,31332
  800438:	0805c880 	call	805c88 <printf>
	readWavFile("laserii.wav", laserFileWordLength, laserBuffer);
  80043c:	d1670517 	ldw	r5,-25580(gp)
  800440:	d1a70a17 	ldw	r6,-25560(gp)
  800444:	01002074 	movhi	r4,129
  800448:	211e9e04 	addi	r4,r4,31352
  80044c:	08008f80 	call	8008f8 <readWavFile>

	if (DEBUG == 1 && error == false) {
  800450:	d0a70417 	ldw	r2,-25584(gp)
  800454:	10800058 	cmpnei	r2,r2,1
  800458:	1000061e 	bne	r2,zero,800474 <setupAudio+0x270>
  80045c:	e0bfff17 	ldw	r2,-4(fp)
  800460:	1004c03a 	cmpne	r2,r2,zero
  800464:	1000031e 	bne	r2,zero,800474 <setupAudio+0x270>
		printf("Successfully setup sound.\n");
  800468:	01002074 	movhi	r4,129
  80046c:	211ea104 	addi	r4,r4,31364
  800470:	0805da00 	call	805da0 <puts>
	}
}
  800474:	e037883a 	mov	sp,fp
  800478:	dfc00417 	ldw	ra,16(sp)
  80047c:	df000317 	ldw	fp,12(sp)
  800480:	dc800217 	ldw	r18,8(sp)
  800484:	dc400117 	ldw	r17,4(sp)
  800488:	dc000017 	ldw	r16,0(sp)
  80048c:	dec00504 	addi	sp,sp,20
  800490:	f800283a 	ret

00800494 <playAudioMono>:

void playAudioMono(unsigned int *buffer, int length) {
  800494:	defffc04 	addi	sp,sp,-16
  800498:	dfc00315 	stw	ra,12(sp)
  80049c:	df000215 	stw	fp,8(sp)
  8004a0:	df000204 	addi	fp,sp,8
  8004a4:	e13ffe15 	stw	r4,-8(fp)
  8004a8:	e17fff15 	stw	r5,-4(fp)
	alt_up_audio_write_fifo(audio, buffer, length, ALT_UP_AUDIO_LEFT);
  8004ac:	d1270217 	ldw	r4,-25592(gp)
  8004b0:	e17ffe17 	ldw	r5,-8(fp)
  8004b4:	e1bfff17 	ldw	r6,-4(fp)
  8004b8:	000f883a 	mov	r7,zero
  8004bc:	080fc0c0 	call	80fc0c <alt_up_audio_write_fifo>
	alt_up_audio_write_fifo(audio, buffer, length, ALT_UP_AUDIO_RIGHT);
  8004c0:	d1270217 	ldw	r4,-25592(gp)
  8004c4:	e17ffe17 	ldw	r5,-8(fp)
  8004c8:	e1bfff17 	ldw	r6,-4(fp)
  8004cc:	01c00044 	movi	r7,1
  8004d0:	080fc0c0 	call	80fc0c <alt_up_audio_write_fifo>
}
  8004d4:	e037883a 	mov	sp,fp
  8004d8:	dfc00117 	ldw	ra,4(sp)
  8004dc:	df000017 	ldw	fp,0(sp)
  8004e0:	dec00204 	addi	sp,sp,8
  8004e4:	f800283a 	ret

008004e8 <playAudio>:

void playAudio(unsigned int *leftBuffer, int leftLength, unsigned int *rightBuffer, int rightLength) {
  8004e8:	defff804 	addi	sp,sp,-32
  8004ec:	dfc00715 	stw	ra,28(sp)
  8004f0:	df000615 	stw	fp,24(sp)
  8004f4:	df000604 	addi	fp,sp,24
  8004f8:	e13ffc15 	stw	r4,-16(fp)
  8004fc:	e17ffd15 	stw	r5,-12(fp)
  800500:	e1bffe15 	stw	r6,-8(fp)
  800504:	e1ffff15 	stw	r7,-4(fp)
	int leftWritten = alt_up_audio_write_fifo(audio, leftBuffer, leftLength, ALT_UP_AUDIO_LEFT);
  800508:	d1270217 	ldw	r4,-25592(gp)
  80050c:	e17ffc17 	ldw	r5,-16(fp)
  800510:	e1bffd17 	ldw	r6,-12(fp)
  800514:	000f883a 	mov	r7,zero
  800518:	080fc0c0 	call	80fc0c <alt_up_audio_write_fifo>
  80051c:	e0bffb15 	stw	r2,-20(fp)
	int rightWritten = alt_up_audio_write_fifo(audio, rightBuffer, rightLength, ALT_UP_AUDIO_RIGHT);
  800520:	d1270217 	ldw	r4,-25592(gp)
  800524:	e17ffe17 	ldw	r5,-8(fp)
  800528:	e1bfff17 	ldw	r6,-4(fp)
  80052c:	01c00044 	movi	r7,1
  800530:	080fc0c0 	call	80fc0c <alt_up_audio_write_fifo>
  800534:	e0bffa15 	stw	r2,-24(fp)

	if (DEBUG == 1) {
  800538:	d0a70417 	ldw	r2,-25584(gp)
  80053c:	10800058 	cmpnei	r2,r2,1
  800540:	1000081e 	bne	r2,zero,800564 <playAudio+0x7c>
		printf("Wrote %d to left audio FIFO. with value\n", leftWritten);
  800544:	01002074 	movhi	r4,129
  800548:	211ea804 	addi	r4,r4,31392
  80054c:	e17ffb17 	ldw	r5,-20(fp)
  800550:	0805c880 	call	805c88 <printf>
		printf("Wrote %d to right audio FIFO.\n", rightWritten);
  800554:	01002074 	movhi	r4,129
  800558:	211eb304 	addi	r4,r4,31436
  80055c:	e17ffa17 	ldw	r5,-24(fp)
  800560:	0805c880 	call	805c88 <printf>
	}
}
  800564:	e037883a 	mov	sp,fp
  800568:	dfc00117 	ldw	ra,4(sp)
  80056c:	df000017 	ldw	fp,0(sp)
  800570:	dec00204 	addi	sp,sp,8
  800574:	f800283a 	ret

00800578 <audioTest>:

void audioTest()
{
  800578:	defff504 	addi	sp,sp,-44
  80057c:	dfc00a15 	stw	ra,40(sp)
  800580:	df000915 	stw	fp,36(sp)
  800584:	df000904 	addi	fp,sp,36
	setupAudio();
  800588:	08002040 	call	800204 <setupAudio>
	printf("Starting audio test\n");
  80058c:	01002074 	movhi	r4,129
  800590:	211ebb04 	addi	r4,r4,31468
  800594:	0805da00 	call	805da0 <puts>
	int length = 8;
  800598:	00800204 	movi	r2,8
  80059c:	e0bffb15 	stw	r2,-20(fp)
	unsigned int right [length];
  8005a0:	e0bffb17 	ldw	r2,-20(fp)
  8005a4:	1085883a 	add	r2,r2,r2
  8005a8:	1085883a 	add	r2,r2,r2
  8005ac:	108000c4 	addi	r2,r2,3
  8005b0:	108000c4 	addi	r2,r2,3
  8005b4:	1004d0ba 	srli	r2,r2,2
  8005b8:	1085883a 	add	r2,r2,r2
  8005bc:	1085883a 	add	r2,r2,r2
  8005c0:	d8b7c83a 	sub	sp,sp,r2
  8005c4:	e6ffff15 	stw	sp,-4(fp)
  8005c8:	e0ffff17 	ldw	r3,-4(fp)
  8005cc:	188000c4 	addi	r2,r3,3
  8005d0:	1004d0ba 	srli	r2,r2,2
  8005d4:	1085883a 	add	r2,r2,r2
  8005d8:	1085883a 	add	r2,r2,r2
  8005dc:	e0bfff15 	stw	r2,-4(fp)
  8005e0:	e0bfff17 	ldw	r2,-4(fp)
  8005e4:	e0bffd15 	stw	r2,-12(fp)
	unsigned int left [length];
  8005e8:	e0bffb17 	ldw	r2,-20(fp)
  8005ec:	1085883a 	add	r2,r2,r2
  8005f0:	1085883a 	add	r2,r2,r2
  8005f4:	108000c4 	addi	r2,r2,3
  8005f8:	108000c4 	addi	r2,r2,3
  8005fc:	1004d0ba 	srli	r2,r2,2
  800600:	1085883a 	add	r2,r2,r2
  800604:	1085883a 	add	r2,r2,r2
  800608:	d8b7c83a 	sub	sp,sp,r2
  80060c:	e6fffe15 	stw	sp,-8(fp)
  800610:	e0fffe17 	ldw	r3,-8(fp)
  800614:	188000c4 	addi	r2,r3,3
  800618:	1004d0ba 	srli	r2,r2,2
  80061c:	1085883a 	add	r2,r2,r2
  800620:	1085883a 	add	r2,r2,r2
  800624:	e0bffe15 	stw	r2,-8(fp)
  800628:	e0bffe17 	ldw	r2,-8(fp)
  80062c:	e0bffc15 	stw	r2,-16(fp)
	int i;

	for (i = 0; i < length; i++) {
  800630:	e03ffa15 	stw	zero,-24(fp)
  800634:	00001b06 	br	8006a4 <audioTest+0x12c>
		right[i] = (i * i * i) & 0x0000FFFF;
  800638:	e17ffa17 	ldw	r5,-24(fp)
  80063c:	e0fffa17 	ldw	r3,-24(fp)
  800640:	e0bffa17 	ldw	r2,-24(fp)
  800644:	1887383a 	mul	r3,r3,r2
  800648:	e0bffa17 	ldw	r2,-24(fp)
  80064c:	1885383a 	mul	r2,r3,r2
  800650:	113fffcc 	andi	r4,r2,65535
  800654:	e0fffd17 	ldw	r3,-12(fp)
  800658:	2945883a 	add	r2,r5,r5
  80065c:	1085883a 	add	r2,r2,r2
  800660:	10c5883a 	add	r2,r2,r3
  800664:	11000015 	stw	r4,0(r2)
		left[i] = right[i];
  800668:	e17ffa17 	ldw	r5,-24(fp)
  80066c:	e0bffa17 	ldw	r2,-24(fp)
  800670:	e0fffd17 	ldw	r3,-12(fp)
  800674:	1085883a 	add	r2,r2,r2
  800678:	1085883a 	add	r2,r2,r2
  80067c:	10c5883a 	add	r2,r2,r3
  800680:	11000017 	ldw	r4,0(r2)
  800684:	e0fffc17 	ldw	r3,-16(fp)
  800688:	2945883a 	add	r2,r5,r5
  80068c:	1085883a 	add	r2,r2,r2
  800690:	10c5883a 	add	r2,r2,r3
  800694:	11000015 	stw	r4,0(r2)
	int length = 8;
	unsigned int right [length];
	unsigned int left [length];
	int i;

	for (i = 0; i < length; i++) {
  800698:	e0bffa17 	ldw	r2,-24(fp)
  80069c:	10800044 	addi	r2,r2,1
  8006a0:	e0bffa15 	stw	r2,-24(fp)
  8006a4:	e0fffa17 	ldw	r3,-24(fp)
  8006a8:	e0bffb17 	ldw	r2,-20(fp)
  8006ac:	18bfe216 	blt	r3,r2,800638 <audioTest+0xc0>
		right[i] = (i * i * i) & 0x0000FFFF;
		left[i] = right[i];
	}

	unsigned int *rightBuffer = right;
  8006b0:	e0bffd17 	ldw	r2,-12(fp)
  8006b4:	e0bff915 	stw	r2,-28(fp)
	unsigned int *leftBuffer = left;
  8006b8:	e0bffc17 	ldw	r2,-16(fp)
  8006bc:	e0bff815 	stw	r2,-32(fp)

	// Should use a timer to measure how long it takes to stick a byte in and whatever
	// Is it easier (processor wise) to move in larger chunks, or is there no difference?

	//alt_up_audio_reset_audio_core(audio);
	int free = alt_up_audio_write_fifo_space(audio, ALT_UP_AUDIO_RIGHT);
  8006c0:	d1270217 	ldw	r4,-25592(gp)
  8006c4:	01400044 	movi	r5,1
  8006c8:	080f9b40 	call	80f9b4 <alt_up_audio_write_fifo_space>
  8006cc:	e0bff715 	stw	r2,-36(fp)
	printf("%d words free in right FIFO\n", free);
  8006d0:	01002074 	movhi	r4,129
  8006d4:	211ec004 	addi	r4,r4,31488
  8006d8:	e17ff717 	ldw	r5,-36(fp)
  8006dc:	0805c880 	call	805c88 <printf>
  8006e0:	00000006 	br	8006e4 <audioTest+0x16c>
	// printf("Entering loop");

	for (;;) {
		free = alt_up_audio_write_fifo_space(audio, ALT_UP_AUDIO_RIGHT);
  8006e4:	d1270217 	ldw	r4,-25592(gp)
  8006e8:	01400044 	movi	r5,1
  8006ec:	080f9b40 	call	80f9b4 <alt_up_audio_write_fifo_space>
  8006f0:	e0bff715 	stw	r2,-36(fp)
		//printf("%d words free in right FIFO\n", free);
		if (free >= length) {
  8006f4:	e0fff717 	ldw	r3,-36(fp)
  8006f8:	e0bffb17 	ldw	r2,-20(fp)
  8006fc:	18bff916 	blt	r3,r2,8006e4 <audioTest+0x16c>
			//printf("Playing audio\n");
			playAudio(leftBuffer, length, rightBuffer, length);
  800700:	e13ff817 	ldw	r4,-32(fp)
  800704:	e17ffb17 	ldw	r5,-20(fp)
  800708:	e1bff917 	ldw	r6,-28(fp)
  80070c:	e1fffb17 	ldw	r7,-20(fp)
  800710:	08004e80 	call	8004e8 <playAudio>
//		else {
//			if (DEBUG == 1) {
//				//printf("Skipped audio write\n");
//			}
//		}
	}
  800714:	003ff306 	br	8006e4 <audioTest+0x16c>

00800718 <testTone>:
}


void testTone(void)
{
  800718:	defff904 	addi	sp,sp,-28
  80071c:	dfc00615 	stw	ra,24(sp)
  800720:	df000515 	stw	fp,20(sp)
  800724:	df000504 	addi	fp,sp,20
	unsigned int *toneBuffer = tone;
  800728:	008020b4 	movhi	r2,130
  80072c:	10af4504 	addi	r2,r2,-17132
  800730:	e0bffe15 	stw	r2,-8(fp)
	//int toneLen = 360;
	int free, len;
	int wrap = 0;
  800734:	e03ffb15 	stw	zero,-20(fp)
  800738:	00000006 	br	80073c <testTone+0x24>

	for (;;) {
		free = alt_up_audio_write_fifo_space(audio, ALT_UP_AUDIO_RIGHT);
  80073c:	d1270217 	ldw	r4,-25592(gp)
  800740:	01400044 	movi	r5,1
  800744:	080f9b40 	call	80f9b4 <alt_up_audio_write_fifo_space>
  800748:	e0bffd15 	stw	r2,-12(fp)
		if (free > 1) {
  80074c:	e0bffd17 	ldw	r2,-12(fp)
  800750:	10800090 	cmplti	r2,r2,2
  800754:	103ff91e 	bne	r2,zero,80073c <testTone+0x24>
			if ((int)toneBuffer + free >= toneLength) {
  800758:	e0fffe17 	ldw	r3,-8(fp)
  80075c:	e0bffd17 	ldw	r2,-12(fp)
  800760:	1887883a 	add	r3,r3,r2
  800764:	d0a00217 	ldw	r2,-32760(gp)
  800768:	18800716 	blt	r3,r2,800788 <testTone+0x70>
				// Wrap around
				len = toneLength - free;
  80076c:	d0e00217 	ldw	r3,-32760(gp)
  800770:	e0bffd17 	ldw	r2,-12(fp)
  800774:	1885c83a 	sub	r2,r3,r2
  800778:	e0bffc15 	stw	r2,-16(fp)
				wrap = 1;
  80077c:	00800044 	movi	r2,1
  800780:	e0bffb15 	stw	r2,-20(fp)
  800784:	00000306 	br	800794 <testTone+0x7c>
			} else {
				len = free;
  800788:	e0bffd17 	ldw	r2,-12(fp)
  80078c:	e0bffc15 	stw	r2,-16(fp)
				wrap = 0;
  800790:	e03ffb15 	stw	zero,-20(fp)
			}
			playAudio(toneBuffer, len, toneBuffer, len);
  800794:	e13ffe17 	ldw	r4,-8(fp)
  800798:	e17ffc17 	ldw	r5,-16(fp)
  80079c:	e1bffe17 	ldw	r6,-8(fp)
  8007a0:	e1fffc17 	ldw	r7,-16(fp)
  8007a4:	08004e80 	call	8004e8 <playAudio>
			toneBuffer = wrap == 1 ? tone : toneBuffer + len;
  8007a8:	e0bffb17 	ldw	r2,-20(fp)
  8007ac:	10800060 	cmpeqi	r2,r2,1
  8007b0:	1000081e 	bne	r2,zero,8007d4 <testTone+0xbc>
  8007b4:	e0bffc17 	ldw	r2,-16(fp)
  8007b8:	1085883a 	add	r2,r2,r2
  8007bc:	1085883a 	add	r2,r2,r2
  8007c0:	1007883a 	mov	r3,r2
  8007c4:	e0bffe17 	ldw	r2,-8(fp)
  8007c8:	1887883a 	add	r3,r3,r2
  8007cc:	e0ffff15 	stw	r3,-4(fp)
  8007d0:	00000306 	br	8007e0 <testTone+0xc8>
  8007d4:	008020b4 	movhi	r2,130
  8007d8:	10af4504 	addi	r2,r2,-17132
  8007dc:	e0bfff15 	stw	r2,-4(fp)
  8007e0:	e0bfff17 	ldw	r2,-4(fp)
  8007e4:	e0bffe15 	stw	r2,-8(fp)
		}
	}
  8007e8:	003fd406 	br	80073c <testTone+0x24>

008007ec <playLaser1>:
}

void playLaser1(void) {
  8007ec:	defff804 	addi	sp,sp,-32
  8007f0:	dfc00715 	stw	ra,28(sp)
  8007f4:	df000615 	stw	fp,24(sp)
  8007f8:	df000604 	addi	fp,sp,24
	unsigned int fileWordLength = 38384;//laserii//(getWavFileLength("laseri.wav") / 2);// laser i = 26200;/*looked in hex file *///
  8007fc:	00a57c14 	movui	r2,38384
  800800:	e0bffe15 	stw	r2,-8(fp)
	printf("File Length is: %x\n", fileWordLength);
  800804:	01002074 	movhi	r4,129
  800808:	211e9904 	addi	r4,r4,31332
  80080c:	e17ffe17 	ldw	r5,-8(fp)
  800810:	0805c880 	call	805c88 <printf>
	readWavFile("laserii.wav", fileWordLength, laserBuffer);
  800814:	d1a70a17 	ldw	r6,-25560(gp)
  800818:	01002074 	movhi	r4,129
  80081c:	211e9e04 	addi	r4,r4,31352
  800820:	e17ffe17 	ldw	r5,-8(fp)
  800824:	08008f80 	call	8008f8 <readWavFile>

	int free, len;
	int wrap = 0;
  800828:	e03ffb15 	stw	zero,-20(fp)
	unsigned int *cursor = laserBuffer;
  80082c:	d0a70a17 	ldw	r2,-25560(gp)
  800830:	e0bffa15 	stw	r2,-24(fp)
  800834:	00000006 	br	800838 <playLaser1+0x4c>
	for (;;) {
		free = alt_up_audio_write_fifo_space(audio, ALT_UP_AUDIO_RIGHT);
  800838:	d1270217 	ldw	r4,-25592(gp)
  80083c:	01400044 	movi	r5,1
  800840:	080f9b40 	call	80f9b4 <alt_up_audio_write_fifo_space>
  800844:	e0bffd15 	stw	r2,-12(fp)
		if (free > 1) {
  800848:	e0bffd17 	ldw	r2,-12(fp)
  80084c:	10800090 	cmplti	r2,r2,2
  800850:	103ff91e 	bne	r2,zero,800838 <playLaser1+0x4c>
			if ((int)cursor + free >= (int)laserBuffer + (2 * fileWordLength)) {
  800854:	e0fffa17 	ldw	r3,-24(fp)
  800858:	e0bffd17 	ldw	r2,-12(fp)
  80085c:	1885883a 	add	r2,r3,r2
  800860:	1009883a 	mov	r4,r2
  800864:	e0bffe17 	ldw	r2,-8(fp)
  800868:	1085883a 	add	r2,r2,r2
  80086c:	1007883a 	mov	r3,r2
  800870:	d0a70a17 	ldw	r2,-25560(gp)
  800874:	1885883a 	add	r2,r3,r2
  800878:	20800736 	bltu	r4,r2,800898 <playLaser1+0xac>
				// Wrap around
				len = fileWordLength - free;
  80087c:	e0fffd17 	ldw	r3,-12(fp)
  800880:	e0bffe17 	ldw	r2,-8(fp)
  800884:	10c5c83a 	sub	r2,r2,r3
  800888:	e0bffc15 	stw	r2,-16(fp)
				wrap = 1;
  80088c:	00800044 	movi	r2,1
  800890:	e0bffb15 	stw	r2,-20(fp)
  800894:	00000306 	br	8008a4 <playLaser1+0xb8>
			} else {
				len = free;
  800898:	e0bffd17 	ldw	r2,-12(fp)
  80089c:	e0bffc15 	stw	r2,-16(fp)
				wrap = 0;
  8008a0:	e03ffb15 	stw	zero,-20(fp)
			}
			playAudio(cursor, len, cursor, len);
  8008a4:	e13ffa17 	ldw	r4,-24(fp)
  8008a8:	e17ffc17 	ldw	r5,-16(fp)
  8008ac:	e1bffa17 	ldw	r6,-24(fp)
  8008b0:	e1fffc17 	ldw	r7,-16(fp)
  8008b4:	08004e80 	call	8004e8 <playAudio>
			cursor = wrap == 1 ? laserBuffer : cursor + len;
  8008b8:	e0bffb17 	ldw	r2,-20(fp)
  8008bc:	10800060 	cmpeqi	r2,r2,1
  8008c0:	1000081e 	bne	r2,zero,8008e4 <playLaser1+0xf8>
  8008c4:	e0bffc17 	ldw	r2,-16(fp)
  8008c8:	1085883a 	add	r2,r2,r2
  8008cc:	1085883a 	add	r2,r2,r2
  8008d0:	1007883a 	mov	r3,r2
  8008d4:	e0bffa17 	ldw	r2,-24(fp)
  8008d8:	1887883a 	add	r3,r3,r2
  8008dc:	e0ffff15 	stw	r3,-4(fp)
  8008e0:	00000206 	br	8008ec <playLaser1+0x100>
  8008e4:	d0a70a17 	ldw	r2,-25560(gp)
  8008e8:	e0bfff15 	stw	r2,-4(fp)
  8008ec:	e0bfff17 	ldw	r2,-4(fp)
  8008f0:	e0bffa15 	stw	r2,-24(fp)
		}
	}
  8008f4:	003fd006 	br	800838 <playLaser1+0x4c>

008008f8 <readWavFile>:
}


void readWavFile(char *wavFileName, unsigned int fileWordLength, unsigned int *buffer) {
  8008f8:	defff804 	addi	sp,sp,-32
  8008fc:	dfc00715 	stw	ra,28(sp)
  800900:	df000615 	stw	fp,24(sp)
  800904:	df000604 	addi	fp,sp,24
  800908:	e13ffd15 	stw	r4,-12(fp)
  80090c:	e17ffe15 	stw	r5,-8(fp)
  800910:	e1bfff15 	stw	r6,-4(fp)
	laserBuffer = malloc(fileWordLength * 2); //words are 2 bytes // this line should be changed
  800914:	e0bffe17 	ldw	r2,-8(fp)
  800918:	1085883a 	add	r2,r2,r2
  80091c:	1009883a 	mov	r4,r2
  800920:	08055340 	call	805534 <malloc>
  800924:	d0a70a15 	stw	r2,-25560(gp)

	short int fileHandle = openFile(wavFileName);
  800928:	e13ffd17 	ldw	r4,-12(fp)
  80092c:	0800c900 	call	800c90 <openFile>
  800930:	e0bffc0d 	sth	r2,-16(fp)
	if (fileHandle == -1) {
  800934:	e0bffc0f 	ldh	r2,-16(fp)
  800938:	10bfffd8 	cmpnei	r2,r2,-1
  80093c:	1000051e 	bne	r2,zero,800954 <readWavFile+0x5c>
		printf("Error opening %s\n", wavFileName);
  800940:	01002074 	movhi	r4,129
  800944:	211ec804 	addi	r4,r4,31520
  800948:	e17ffd17 	ldw	r5,-12(fp)
  80094c:	0805c880 	call	805c88 <printf>
		return;
  800950:	00002706 	br	8009f0 <readWavFile+0xf8>
	}

	readPastWavHeader(fileHandle);
  800954:	e13ffc0f 	ldh	r4,-16(fp)
  800958:	0800f540 	call	800f54 <readPastWavHeader>

	unsigned int i = 0;
  80095c:	e03ffb15 	stw	zero,-20(fp)
	unsigned int word = readWord(fileHandle);
  800960:	e13ffc0f 	ldh	r4,-16(fp)
  800964:	0800d340 	call	800d34 <readWord>
  800968:	10bfffcc 	andi	r2,r2,65535
  80096c:	10a0001c 	xori	r2,r2,32768
  800970:	10a00004 	addi	r2,r2,-32768
  800974:	e0bffa15 	stw	r2,-24(fp)
	printf("first word is %x\n", word);
  800978:	01002074 	movhi	r4,129
  80097c:	211ecd04 	addi	r4,r4,31540
  800980:	e17ffa17 	ldw	r5,-24(fp)
  800984:	0805c880 	call	805c88 <printf>
	while (i < fileWordLength) {
  800988:	00001106 	br	8009d0 <readWavFile+0xd8>
		laserBuffer[i++] = word;
  80098c:	e0bffb17 	ldw	r2,-20(fp)
  800990:	1085883a 	add	r2,r2,r2
  800994:	1085883a 	add	r2,r2,r2
  800998:	1007883a 	mov	r3,r2
  80099c:	d0a70a17 	ldw	r2,-25560(gp)
  8009a0:	1887883a 	add	r3,r3,r2
  8009a4:	e0bffa17 	ldw	r2,-24(fp)
  8009a8:	18800015 	stw	r2,0(r3)
  8009ac:	e0bffb17 	ldw	r2,-20(fp)
  8009b0:	10800044 	addi	r2,r2,1
  8009b4:	e0bffb15 	stw	r2,-20(fp)
		word = readWord(fileHandle);
  8009b8:	e13ffc0f 	ldh	r4,-16(fp)
  8009bc:	0800d340 	call	800d34 <readWord>
  8009c0:	10bfffcc 	andi	r2,r2,65535
  8009c4:	10a0001c 	xori	r2,r2,32768
  8009c8:	10a00004 	addi	r2,r2,-32768
  8009cc:	e0bffa15 	stw	r2,-24(fp)
	readPastWavHeader(fileHandle);

	unsigned int i = 0;
	unsigned int word = readWord(fileHandle);
	printf("first word is %x\n", word);
	while (i < fileWordLength) {
  8009d0:	e0fffb17 	ldw	r3,-20(fp)
  8009d4:	e0bffe17 	ldw	r2,-8(fp)
  8009d8:	18bfec36 	bltu	r3,r2,80098c <readWavFile+0x94>
		laserBuffer[i++] = word;
		word = readWord(fileHandle);
	}
	printf("reached EOF\n");
  8009dc:	01002074 	movhi	r4,129
  8009e0:	211ed204 	addi	r4,r4,31560
  8009e4:	0805da00 	call	805da0 <puts>

	closeFile(fileHandle);
  8009e8:	e13ffc0f 	ldh	r4,-16(fp)
  8009ec:	0800cd00 	call	800cd0 <closeFile>
	return;
}
  8009f0:	e037883a 	mov	sp,fp
  8009f4:	dfc00117 	ldw	ra,4(sp)
  8009f8:	df000017 	ldw	fp,0(sp)
  8009fc:	dec00204 	addi	sp,sp,8
  800a00:	f800283a 	ret

00800a04 <playLaser>:

// Plays laser once, using interrupts
void playLaser(void) {
  800a04:	defffe04 	addi	sp,sp,-8
  800a08:	dfc00115 	stw	ra,4(sp)
  800a0c:	df000015 	stw	fp,0(sp)
  800a10:	d839883a 	mov	fp,sp
	if (DEBUG == 1) {
  800a14:	d0a70417 	ldw	r2,-25584(gp)
  800a18:	10800058 	cmpnei	r2,r2,1
  800a1c:	1000031e 	bne	r2,zero,800a2c <playLaser+0x28>
		printf("Playing laser via interrupt.\n");
  800a20:	01002074 	movhi	r4,129
  800a24:	211ed504 	addi	r4,r4,31572
  800a28:	0805da00 	call	805da0 <puts>
	}

	laserCursor = laserBuffer;
  800a2c:	d0a70a17 	ldw	r2,-25560(gp)
  800a30:	d0a70915 	stw	r2,-25564(gp)
	alt_up_audio_enable_write_interrupt(audio);
  800a34:	d1270217 	ldw	r4,-25592(gp)
  800a38:	080f6c80 	call	80f6c8 <alt_up_audio_enable_write_interrupt>
}
  800a3c:	e037883a 	mov	sp,fp
  800a40:	dfc00117 	ldw	ra,4(sp)
  800a44:	df000017 	ldw	fp,0(sp)
  800a48:	dec00204 	addi	sp,sp,8
  800a4c:	f800283a 	ret

00800a50 <playLaserInterrupt>:

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void playLaserInterrupt(void* isr_context) {
#else
static void playLaserInterrupt(void* isr_context, alt_u32 id) {
  800a50:	defffa04 	addi	sp,sp,-24
  800a54:	dfc00515 	stw	ra,20(sp)
  800a58:	df000415 	stw	fp,16(sp)
  800a5c:	df000404 	addi	fp,sp,16
  800a60:	e13ffe15 	stw	r4,-8(fp)
  800a64:	e17fff15 	stw	r5,-4(fp)
#endif
	int len;
	unsigned int free = alt_up_audio_write_fifo_space(audio, ALT_UP_AUDIO_RIGHT);
  800a68:	d1270217 	ldw	r4,-25592(gp)
  800a6c:	01400044 	movi	r5,1
  800a70:	080f9b40 	call	80f9b4 <alt_up_audio_write_fifo_space>
  800a74:	e0bffc15 	stw	r2,-16(fp)
	if (free > 1) {
  800a78:	e0bffc17 	ldw	r2,-16(fp)
  800a7c:	108000b0 	cmpltui	r2,r2,2
  800a80:	10001e1e 	bne	r2,zero,800afc <playLaserInterrupt+0xac>
		if ((int)laserCursor + free >= (int)laserBuffer + (2 * laserFileWordLength)) {
  800a84:	d0a70917 	ldw	r2,-25564(gp)
  800a88:	1007883a 	mov	r3,r2
  800a8c:	e0bffc17 	ldw	r2,-16(fp)
  800a90:	1889883a 	add	r4,r3,r2
  800a94:	d0a70517 	ldw	r2,-25580(gp)
  800a98:	1085883a 	add	r2,r2,r2
  800a9c:	1007883a 	mov	r3,r2
  800aa0:	d0a70a17 	ldw	r2,-25560(gp)
  800aa4:	1885883a 	add	r2,r3,r2
  800aa8:	20800736 	bltu	r4,r2,800ac8 <playLaserInterrupt+0x78>
			// Last chunk to play
			len = laserFileWordLength - free;
  800aac:	d0e70517 	ldw	r3,-25580(gp)
  800ab0:	e0bffc17 	ldw	r2,-16(fp)
  800ab4:	1885c83a 	sub	r2,r3,r2
  800ab8:	e0bffd15 	stw	r2,-12(fp)
			alt_up_audio_disable_write_interrupt(audio);
  800abc:	d1270217 	ldw	r4,-25592(gp)
  800ac0:	080f7140 	call	80f714 <alt_up_audio_disable_write_interrupt>
  800ac4:	00000206 	br	800ad0 <playLaserInterrupt+0x80>
		} else {
			len = free;
  800ac8:	e0bffc17 	ldw	r2,-16(fp)
  800acc:	e0bffd15 	stw	r2,-12(fp)
		}
		playAudioMono((unsigned int *)laserCursor, len);
  800ad0:	d0a70917 	ldw	r2,-25564(gp)
  800ad4:	1009883a 	mov	r4,r2
  800ad8:	e17ffd17 	ldw	r5,-12(fp)
  800adc:	08004940 	call	800494 <playAudioMono>
		laserCursor += len;
  800ae0:	e0bffd17 	ldw	r2,-12(fp)
  800ae4:	1085883a 	add	r2,r2,r2
  800ae8:	1085883a 	add	r2,r2,r2
  800aec:	1007883a 	mov	r3,r2
  800af0:	d0a70917 	ldw	r2,-25564(gp)
  800af4:	1885883a 	add	r2,r3,r2
  800af8:	d0a70915 	stw	r2,-25564(gp)
	}
}
  800afc:	e037883a 	mov	sp,fp
  800b00:	dfc00117 	ldw	ra,4(sp)
  800b04:	df000017 	ldw	fp,0(sp)
  800b08:	dec00204 	addi	sp,sp,8
  800b0c:	f800283a 	ret

00800b10 <main>:
#define switches (volatile char *) 0x1001060
#define leds (char *) 0x1001070
#define keys (volatile char *) 0x1001080

int main()
{
  800b10:	defff804 	addi	sp,sp,-32
  800b14:	dfc00715 	stw	ra,28(sp)
  800b18:	df000615 	stw	fp,24(sp)
  800b1c:	df000604 	addi	fp,sp,24
	// Mandatory setup code for peripherals
	// SD card must be opened before audio is setup
	openSdCard();
  800b20:	0800c300 	call	800c30 <openSdCard>
	setupAudio();
  800b24:	08002040 	call	800204 <setupAudio>

	//***

	alt_up_character_lcd_dev * char_lcd_dev;
	// open the Character LCD port
	char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/character_lcd_0");//("/dev/Char_LCD_16x2");
  800b28:	01002074 	movhi	r4,129
  800b2c:	211edd04 	addi	r4,r4,31604
  800b30:	08106640 	call	810664 <alt_up_character_lcd_open_dev>
  800b34:	e0bffb15 	stw	r2,-20(fp)
	if ( char_lcd_dev == NULL)
  800b38:	e0bffb17 	ldw	r2,-20(fp)
  800b3c:	1004c03a 	cmpne	r2,r2,zero
  800b40:	1000041e 	bne	r2,zero,800b54 <main+0x44>
		printf ("Error: could not open character LCD device\n");
  800b44:	01002074 	movhi	r4,129
  800b48:	211ee304 	addi	r4,r4,31628
  800b4c:	0805da00 	call	805da0 <puts>
  800b50:	00000306 	br	800b60 <main+0x50>
	else
		printf ("Opened character LCD device\n");
  800b54:	01002074 	movhi	r4,129
  800b58:	211eee04 	addi	r4,r4,31672
  800b5c:	0805da00 	call	805da0 <puts>
	/* Initialize the character display */
	alt_up_character_lcd_init (char_lcd_dev);
  800b60:	e13ffb17 	ldw	r4,-20(fp)
  800b64:	08106300 	call	810630 <alt_up_character_lcd_init>
	/* Write "Welcome to" in the first row */
	alt_up_character_lcd_string(char_lcd_dev, "Welcome to");
  800b68:	e13ffb17 	ldw	r4,-20(fp)
  800b6c:	01402074 	movhi	r5,129
  800b70:	295ef504 	addi	r5,r5,31700
  800b74:	081071c0 	call	81071c <alt_up_character_lcd_string>
	/* Write "the DE2 board" in the second row */
	char second_row[] = "the DE2 board\0";
  800b78:	00c02074 	movhi	r3,129
  800b7c:	18defc04 	addi	r3,r3,31728
  800b80:	18800017 	ldw	r2,0(r3)
  800b84:	e0bffc15 	stw	r2,-16(fp)
  800b88:	18800117 	ldw	r2,4(r3)
  800b8c:	e0bffd15 	stw	r2,-12(fp)
  800b90:	18800217 	ldw	r2,8(r3)
  800b94:	e0bffe15 	stw	r2,-8(fp)
  800b98:	1880030b 	ldhu	r2,12(r3)
  800b9c:	e0bfff0d 	sth	r2,-4(fp)
  800ba0:	18800383 	ldbu	r2,14(r3)
  800ba4:	e0bfff85 	stb	r2,-2(fp)
	alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
  800ba8:	e13ffb17 	ldw	r4,-20(fp)
  800bac:	000b883a 	mov	r5,zero
  800bb0:	01800044 	movi	r6,1
  800bb4:	08107e00 	call	8107e0 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(char_lcd_dev, second_row);
  800bb8:	e17ffc04 	addi	r5,fp,-16
  800bbc:	e13ffb17 	ldw	r4,-20(fp)
  800bc0:	081071c0 	call	81071c <alt_up_character_lcd_string>

	printf("hello, world!\n");
  800bc4:	01002074 	movhi	r4,129
  800bc8:	211ef804 	addi	r4,r4,31712
  800bcc:	0805da00 	call	805da0 <puts>
	{
		keys = IORD_8DIRECT(0x1001080, 0);
		// *leds = keys;
		IOWR_16DIRECT(0x1001070, 0, keys);
	}*/
	short int debounce = 0;
  800bd0:	e03ffa0d 	sth	zero,-24(fp)
  800bd4:	00000006 	br	800bd8 <main+0xc8>
	while(1) {
		if ((IORD_8DIRECT(keys, 0)) != 0x00 && debounce == 0) {
  800bd8:	00804034 	movhi	r2,256
  800bdc:	10842004 	addi	r2,r2,4224
  800be0:	10800023 	ldbuio	r2,0(r2)
  800be4:	1005003a 	cmpeq	r2,r2,zero
  800be8:	1000061e 	bne	r2,zero,800c04 <main+0xf4>
  800bec:	e0bffa0f 	ldh	r2,-24(fp)
  800bf0:	1004c03a 	cmpne	r2,r2,zero
  800bf4:	1000031e 	bne	r2,zero,800c04 <main+0xf4>
			debounce = 1;
  800bf8:	00800044 	movi	r2,1
  800bfc:	e0bffa0d 	sth	r2,-24(fp)
		// *leds = keys;
		IOWR_16DIRECT(0x1001070, 0, keys);
	}*/
	short int debounce = 0;
	while(1) {
		if ((IORD_8DIRECT(keys, 0)) != 0x00 && debounce == 0) {
  800c00:	003ff506 	br	800bd8 <main+0xc8>
			debounce = 1;

		} else if ((IORD_8DIRECT(keys, 0)) == 0x00 && debounce == 1){
  800c04:	00804034 	movhi	r2,256
  800c08:	10842004 	addi	r2,r2,4224
  800c0c:	10800023 	ldbuio	r2,0(r2)
  800c10:	1004c03a 	cmpne	r2,r2,zero
  800c14:	103ff01e 	bne	r2,zero,800bd8 <main+0xc8>
  800c18:	e0bffa0f 	ldh	r2,-24(fp)
  800c1c:	10800058 	cmpnei	r2,r2,1
  800c20:	103fed1e 	bne	r2,zero,800bd8 <main+0xc8>
			debounce = 0;
  800c24:	e03ffa0d 	sth	zero,-24(fp)
			playLaser();
  800c28:	0800a040 	call	800a04 <playLaser>
		}
	}
  800c2c:	003fea06 	br	800bd8 <main+0xc8>

00800c30 <openSdCard>:
#include <stdio.h>
#include <stdlib.h>
#include "sd_card.h"

int openSdCard(){
  800c30:	defffd04 	addi	sp,sp,-12
  800c34:	dfc00215 	stw	ra,8(sp)
  800c38:	df000115 	stw	fp,4(sp)
  800c3c:	df000104 	addi	fp,sp,4
	sdDev = alt_up_sd_card_open_dev("/dev/Altera_UP_SD_Card_Avalon_Interface_0");
  800c40:	01002074 	movhi	r4,129
  800c44:	211f0004 	addi	r4,r4,31744
  800c48:	08150880 	call	815088 <alt_up_sd_card_open_dev>
  800c4c:	d0a70715 	stw	r2,-25572(gp)

	if(sdDev != NULL && alt_up_sd_card_is_FAT16()){
  800c50:	d0a70717 	ldw	r2,-25572(gp)
  800c54:	1005003a 	cmpeq	r2,r2,zero
  800c58:	1000051e 	bne	r2,zero,800c70 <openSdCard+0x40>
  800c5c:	08152140 	call	815214 <alt_up_sd_card_is_FAT16>
  800c60:	1005003a 	cmpeq	r2,r2,zero
  800c64:	1000021e 	bne	r2,zero,800c70 <openSdCard+0x40>
		return 0;
  800c68:	e03fff15 	stw	zero,-4(fp)
  800c6c:	00000206 	br	800c78 <openSdCard+0x48>
	} else {
		return -1;
  800c70:	00bfffc4 	movi	r2,-1
  800c74:	e0bfff15 	stw	r2,-4(fp)
  800c78:	e0bfff17 	ldw	r2,-4(fp)
	}
}
  800c7c:	e037883a 	mov	sp,fp
  800c80:	dfc00117 	ldw	ra,4(sp)
  800c84:	df000017 	ldw	fp,0(sp)
  800c88:	dec00204 	addi	sp,sp,8
  800c8c:	f800283a 	ret

00800c90 <openFile>:

short int openFile(char *fileName) {
  800c90:	defffd04 	addi	sp,sp,-12
  800c94:	dfc00215 	stw	ra,8(sp)
  800c98:	df000115 	stw	fp,4(sp)
  800c9c:	df000104 	addi	fp,sp,4
  800ca0:	e13fff15 	stw	r4,-4(fp)
	return alt_up_sd_card_fopen(fileName, 0);
  800ca4:	e13fff17 	ldw	r4,-4(fp)
  800ca8:	000b883a 	mov	r5,zero
  800cac:	081570c0 	call	81570c <alt_up_sd_card_fopen>
  800cb0:	10bfffcc 	andi	r2,r2,65535
  800cb4:	10a0001c 	xori	r2,r2,32768
  800cb8:	10a00004 	addi	r2,r2,-32768
}
  800cbc:	e037883a 	mov	sp,fp
  800cc0:	dfc00117 	ldw	ra,4(sp)
  800cc4:	df000017 	ldw	fp,0(sp)
  800cc8:	dec00204 	addi	sp,sp,8
  800ccc:	f800283a 	ret

00800cd0 <closeFile>:

int closeFile(short int fh) {
  800cd0:	defffd04 	addi	sp,sp,-12
  800cd4:	dfc00215 	stw	ra,8(sp)
  800cd8:	df000115 	stw	fp,4(sp)
  800cdc:	df000104 	addi	fp,sp,4
  800ce0:	e13fff0d 	sth	r4,-4(fp)
	return alt_up_sd_card_fclose(fh);
  800ce4:	e13fff0f 	ldh	r4,-4(fp)
  800ce8:	08165880 	call	816588 <alt_up_sd_card_fclose>
}
  800cec:	e037883a 	mov	sp,fp
  800cf0:	dfc00117 	ldw	ra,4(sp)
  800cf4:	df000017 	ldw	fp,0(sp)
  800cf8:	dec00204 	addi	sp,sp,8
  800cfc:	f800283a 	ret

00800d00 <readByte>:

unsigned char readByte(short int fh) {
  800d00:	defffd04 	addi	sp,sp,-12
  800d04:	dfc00215 	stw	ra,8(sp)
  800d08:	df000115 	stw	fp,4(sp)
  800d0c:	df000104 	addi	fp,sp,4
  800d10:	e13fff0d 	sth	r4,-4(fp)
	return (unsigned char) alt_up_sd_card_read(fh);
  800d14:	e13fff0f 	ldh	r4,-4(fp)
  800d18:	0815bd00 	call	815bd0 <alt_up_sd_card_read>
  800d1c:	10803fcc 	andi	r2,r2,255
}
  800d20:	e037883a 	mov	sp,fp
  800d24:	dfc00117 	ldw	ra,4(sp)
  800d28:	df000017 	ldw	fp,0(sp)
  800d2c:	dec00204 	addi	sp,sp,8
  800d30:	f800283a 	ret

00800d34 <readWord>:
short int readWord(short int fh) {
  800d34:	defffb04 	addi	sp,sp,-20
  800d38:	dfc00415 	stw	ra,16(sp)
  800d3c:	df000315 	stw	fp,12(sp)
  800d40:	df000304 	addi	fp,sp,12
  800d44:	e13ffe0d 	sth	r4,-8(fp)
	short int byte1, byte2;

	byte1 = alt_up_sd_card_read(fh);
  800d48:	e13ffe0f 	ldh	r4,-8(fp)
  800d4c:	0815bd00 	call	815bd0 <alt_up_sd_card_read>
  800d50:	e0bffd8d 	sth	r2,-10(fp)
	byte2 = alt_up_sd_card_read(fh);
  800d54:	e13ffe0f 	ldh	r4,-8(fp)
  800d58:	0815bd00 	call	815bd0 <alt_up_sd_card_read>
  800d5c:	e0bffd0d 	sth	r2,-12(fp)

	if (byte1 == -1 || byte2 == -1)
  800d60:	e0bffd8f 	ldh	r2,-10(fp)
  800d64:	10bfffe0 	cmpeqi	r2,r2,-1
  800d68:	1000031e 	bne	r2,zero,800d78 <readWord+0x44>
  800d6c:	e0bffd0f 	ldh	r2,-12(fp)
  800d70:	10bfffd8 	cmpnei	r2,r2,-1
  800d74:	1000031e 	bne	r2,zero,800d84 <readWord+0x50>
		return -1;
  800d78:	00bfffc4 	movi	r2,-1
  800d7c:	e0bfff15 	stw	r2,-4(fp)
  800d80:	00000b06 	br	800db0 <readWord+0x7c>

	return ((unsigned short int)byte2 << 8) | ((unsigned short int)byte1 & 0x00FF);
  800d84:	e0bffd0b 	ldhu	r2,-12(fp)
  800d88:	10bfffcc 	andi	r2,r2,65535
  800d8c:	1004923a 	slli	r2,r2,8
  800d90:	1007883a 	mov	r3,r2
  800d94:	e0bffd8b 	ldhu	r2,-10(fp)
  800d98:	10803fcc 	andi	r2,r2,255
  800d9c:	1884b03a 	or	r2,r3,r2
  800da0:	10bfffcc 	andi	r2,r2,65535
  800da4:	10a0001c 	xori	r2,r2,32768
  800da8:	10a00004 	addi	r2,r2,-32768
  800dac:	e0bfff15 	stw	r2,-4(fp)
  800db0:	e0bfff17 	ldw	r2,-4(fp)
}
  800db4:	e037883a 	mov	sp,fp
  800db8:	dfc00117 	ldw	ra,4(sp)
  800dbc:	df000017 	ldw	fp,0(sp)
  800dc0:	dec00204 	addi	sp,sp,8
  800dc4:	f800283a 	ret

00800dc8 <readDWord>:

int readDWord(short int fh) {
  800dc8:	defffa04 	addi	sp,sp,-24
  800dcc:	dfc00515 	stw	ra,20(sp)
  800dd0:	df000415 	stw	fp,16(sp)
  800dd4:	df000404 	addi	fp,sp,16
  800dd8:	e13ffe0d 	sth	r4,-8(fp)
	short int byte1, byte2, byte3, byte4;

	byte1 = alt_up_sd_card_read(fh);
  800ddc:	e13ffe0f 	ldh	r4,-8(fp)
  800de0:	0815bd00 	call	815bd0 <alt_up_sd_card_read>
  800de4:	e0bffd8d 	sth	r2,-10(fp)
	byte2 = alt_up_sd_card_read(fh);
  800de8:	e13ffe0f 	ldh	r4,-8(fp)
  800dec:	0815bd00 	call	815bd0 <alt_up_sd_card_read>
  800df0:	e0bffd0d 	sth	r2,-12(fp)
	byte3 = alt_up_sd_card_read(fh);
  800df4:	e13ffe0f 	ldh	r4,-8(fp)
  800df8:	0815bd00 	call	815bd0 <alt_up_sd_card_read>
  800dfc:	e0bffc8d 	sth	r2,-14(fp)
	byte4 = alt_up_sd_card_read(fh);
  800e00:	e13ffe0f 	ldh	r4,-8(fp)
  800e04:	0815bd00 	call	815bd0 <alt_up_sd_card_read>
  800e08:	e0bffc0d 	sth	r2,-16(fp)

	if (byte1 == -1 || byte2 == -1 || byte3 == -1 || byte4 == -1)
  800e0c:	e0bffd8f 	ldh	r2,-10(fp)
  800e10:	10bfffe0 	cmpeqi	r2,r2,-1
  800e14:	1000091e 	bne	r2,zero,800e3c <readDWord+0x74>
  800e18:	e0bffd0f 	ldh	r2,-12(fp)
  800e1c:	10bfffe0 	cmpeqi	r2,r2,-1
  800e20:	1000061e 	bne	r2,zero,800e3c <readDWord+0x74>
  800e24:	e0bffc8f 	ldh	r2,-14(fp)
  800e28:	10bfffe0 	cmpeqi	r2,r2,-1
  800e2c:	1000031e 	bne	r2,zero,800e3c <readDWord+0x74>
  800e30:	e0bffc0f 	ldh	r2,-16(fp)
  800e34:	10bfffd8 	cmpnei	r2,r2,-1
  800e38:	1000031e 	bne	r2,zero,800e48 <readDWord+0x80>
			return -1;
  800e3c:	00bfffc4 	movi	r2,-1
  800e40:	e0bfff15 	stw	r2,-4(fp)
  800e44:	00000f06 	br	800e84 <readDWord+0xbc>

	return ((unsigned short int)byte4 << 24) | ((unsigned short int)byte3 << 16) | ((unsigned short int)byte2 << 8) | (unsigned short int)byte1;
  800e48:	e0bffc0b 	ldhu	r2,-16(fp)
  800e4c:	10bfffcc 	andi	r2,r2,65535
  800e50:	1006963a 	slli	r3,r2,24
  800e54:	e0bffc8b 	ldhu	r2,-14(fp)
  800e58:	10bfffcc 	andi	r2,r2,65535
  800e5c:	1004943a 	slli	r2,r2,16
  800e60:	1886b03a 	or	r3,r3,r2
  800e64:	e0bffd0b 	ldhu	r2,-12(fp)
  800e68:	10bfffcc 	andi	r2,r2,65535
  800e6c:	1004923a 	slli	r2,r2,8
  800e70:	1886b03a 	or	r3,r3,r2
  800e74:	e0bffd8b 	ldhu	r2,-10(fp)
  800e78:	10bfffcc 	andi	r2,r2,65535
  800e7c:	1886b03a 	or	r3,r3,r2
  800e80:	e0ffff15 	stw	r3,-4(fp)
  800e84:	e0bfff17 	ldw	r2,-4(fp)
}
  800e88:	e037883a 	mov	sp,fp
  800e8c:	dfc00117 	ldw	ra,4(sp)
  800e90:	df000017 	ldw	fp,0(sp)
  800e94:	dec00204 	addi	sp,sp,8
  800e98:	f800283a 	ret

00800e9c <getWavFileLength>:

unsigned int getWavFileLength(char *fileName) { // TBD: This function MUST be fixed - it currently returns an incorrect value, becuase - vals dont always mean it's done.
  800e9c:	defffb04 	addi	sp,sp,-20
  800ea0:	dfc00415 	stw	ra,16(sp)
  800ea4:	df000315 	stw	fp,12(sp)
  800ea8:	df000304 	addi	fp,sp,12
  800eac:	e13fff15 	stw	r4,-4(fp)
	unsigned int fileLength = 0;
  800eb0:	e03ffe15 	stw	zero,-8(fp)

	short int fileHandle = openFile(fileName);
  800eb4:	e13fff17 	ldw	r4,-4(fp)
  800eb8:	0800c900 	call	800c90 <openFile>
  800ebc:	e0bffd8d 	sth	r2,-10(fp)
	if (fileHandle == -1) {
  800ec0:	e0bffd8f 	ldh	r2,-10(fp)
  800ec4:	10bfffd8 	cmpnei	r2,r2,-1
  800ec8:	1000041e 	bne	r2,zero,800edc <getWavFileLength+0x40>
		printf("Error occurred, unable to open file in 'getFileLength' with name: %s", fileName);
  800ecc:	01002074 	movhi	r4,129
  800ed0:	211f0b04 	addi	r4,r4,31788
  800ed4:	e17fff17 	ldw	r5,-4(fp)
  800ed8:	0805c880 	call	805c88 <printf>
	}

	readPastWavHeader(fileHandle); // to get wav file length, dont bypass header i think..
  800edc:	e13ffd8f 	ldh	r4,-10(fp)
  800ee0:	0800f540 	call	800f54 <readPastWavHeader>

	short int wordRead = readWord(fileHandle);
  800ee4:	e13ffd8f 	ldh	r4,-10(fp)
  800ee8:	0800d340 	call	800d34 <readWord>
  800eec:	e0bffd0d 	sth	r2,-12(fp)
	//unsigned char firstByte = 0x0000FFFF | wordRead;
	//unsigned char secondByte = 0x0000FFFF | (wordRead >> 8);
	while ((short int)wordRead >= 0) {
  800ef0:	00000606 	br	800f0c <getWavFileLength+0x70>
		//printf("%c", (unsigned char)byteRead);
		fileLength += 2;
  800ef4:	e0bffe17 	ldw	r2,-8(fp)
  800ef8:	10800084 	addi	r2,r2,2
  800efc:	e0bffe15 	stw	r2,-8(fp)
		wordRead = readWord(fileHandle);
  800f00:	e13ffd8f 	ldh	r4,-10(fp)
  800f04:	0800d340 	call	800d34 <readWord>
  800f08:	e0bffd0d 	sth	r2,-12(fp)
	readPastWavHeader(fileHandle); // to get wav file length, dont bypass header i think..

	short int wordRead = readWord(fileHandle);
	//unsigned char firstByte = 0x0000FFFF | wordRead;
	//unsigned char secondByte = 0x0000FFFF | (wordRead >> 8);
	while ((short int)wordRead >= 0) {
  800f0c:	e0bffd0f 	ldh	r2,-12(fp)
  800f10:	1004403a 	cmpge	r2,r2,zero
  800f14:	103ff71e 	bne	r2,zero,800ef4 <getWavFileLength+0x58>
		//printf("%c", (unsigned char)byteRead);
		fileLength += 2;
		wordRead = readWord(fileHandle);
	}
	if ((short int)wordRead <= -1) {
  800f18:	e0bffd0f 	ldh	r2,-12(fp)
  800f1c:	1004403a 	cmpge	r2,r2,zero
  800f20:	1000041e 	bne	r2,zero,800f34 <getWavFileLength+0x98>
		printf("Error reading bytes from %s\n", fileName);
  800f24:	01002074 	movhi	r4,129
  800f28:	211f1d04 	addi	r4,r4,31860
  800f2c:	e17fff17 	ldw	r5,-4(fp)
  800f30:	0805c880 	call	805c88 <printf>
	}

	closeFile(fileHandle);
  800f34:	e13ffd8f 	ldh	r4,-10(fp)
  800f38:	0800cd00 	call	800cd0 <closeFile>
	return fileLength;
  800f3c:	e0bffe17 	ldw	r2,-8(fp)
}
  800f40:	e037883a 	mov	sp,fp
  800f44:	dfc00117 	ldw	ra,4(sp)
  800f48:	df000017 	ldw	fp,0(sp)
  800f4c:	dec00204 	addi	sp,sp,8
  800f50:	f800283a 	ret

00800f54 <readPastWavHeader>:

void readPastWavHeader(short int handle) {
  800f54:	defffc04 	addi	sp,sp,-16
  800f58:	dfc00315 	stw	ra,12(sp)
  800f5c:	df000215 	stw	fp,8(sp)
  800f60:	df000204 	addi	fp,sp,8
  800f64:	e13fff0d 	sth	r4,-4(fp)
	int i;
	for (i = 0; i < 44; i++) {
  800f68:	e03ffe15 	stw	zero,-8(fp)
  800f6c:	00000506 	br	800f84 <readPastWavHeader+0x30>
		readByte(handle);
  800f70:	e13fff0f 	ldh	r4,-4(fp)
  800f74:	0800d000 	call	800d00 <readByte>
	return fileLength;
}

void readPastWavHeader(short int handle) {
	int i;
	for (i = 0; i < 44; i++) {
  800f78:	e0bffe17 	ldw	r2,-8(fp)
  800f7c:	10800044 	addi	r2,r2,1
  800f80:	e0bffe15 	stw	r2,-8(fp)
  800f84:	e0bffe17 	ldw	r2,-8(fp)
  800f88:	10800b10 	cmplti	r2,r2,44
  800f8c:	103ff81e 	bne	r2,zero,800f70 <readPastWavHeader+0x1c>
		readByte(handle);
	}
}
  800f90:	e037883a 	mov	sp,fp
  800f94:	dfc00117 	ldw	ra,4(sp)
  800f98:	df000017 	ldw	fp,0(sp)
  800f9c:	dec00204 	addi	sp,sp,8
  800fa0:	f800283a 	ret

00800fa4 <timer_test>:
#include "sys/alt_alarm.h"
#include "system.h"
#include "timer.h"

// Test code from lab
void timer_test(void) {
  800fa4:	defff304 	addi	sp,sp,-52
  800fa8:	dfc00c15 	stw	ra,48(sp)
  800fac:	df000b15 	stw	fp,44(sp)
  800fb0:	dc000a15 	stw	r16,40(sp)
  800fb4:	df000a04 	addi	fp,sp,40
	int ticks_duration;
	int timer_period;
	int status;
	int done;

	printf("Timers\n");
  800fb8:	01002074 	movhi	r4,129
  800fbc:	211f2504 	addi	r4,r4,31892
  800fc0:	0805da00 	call	805da0 <puts>
	printf(" Sys Clock Timer\n");
  800fc4:	01002074 	movhi	r4,129
  800fc8:	211f2704 	addi	r4,r4,31900
  800fcc:	0805da00 	call	805da0 <puts>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  800fd0:	008020b4 	movhi	r2,130
  800fd4:	10af2a04 	addi	r2,r2,-17240
  800fd8:	10800017 	ldw	r2,0(r2)
	ticks_per_s = alt_ticks_per_second();
  800fdc:	e0bffa15 	stw	r2,-24(fp)
	printf("Tick Freq: %d\n", ticks_per_s);
  800fe0:	01002074 	movhi	r4,129
  800fe4:	211f2c04 	addi	r4,r4,31920
  800fe8:	e17ffa17 	ldw	r5,-24(fp)
  800fec:	0805c880 	call	805c88 <printf>
	printf(" Recording starting ticks\n");
  800ff0:	01002074 	movhi	r4,129
  800ff4:	211f3004 	addi	r4,r4,31936
  800ff8:	0805da00 	call	805da0 <puts>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  800ffc:	008020b4 	movhi	r2,130
  801000:	10af2b04 	addi	r2,r2,-17236
  801004:	10800017 	ldw	r2,0(r2)
	ticks_start = alt_nticks();
  801008:	e0bffc15 	stw	r2,-16(fp)
	printf(" Sleeping for 5 seconds\n");
  80100c:	01002074 	movhi	r4,129
  801010:	211f3704 	addi	r4,r4,31964
  801014:	0805da00 	call	805da0 <puts>
	usleep(5000000);
  801018:	01001334 	movhi	r4,76
  80101c:	2112d004 	addi	r4,r4,19264
  801020:	080e3500 	call	80e350 <usleep>
	printf(" Recording ending ticks\n");
  801024:	01002074 	movhi	r4,129
  801028:	211f3d04 	addi	r4,r4,31988
  80102c:	0805da00 	call	805da0 <puts>
  801030:	008020b4 	movhi	r2,130
  801034:	10af2b04 	addi	r2,r2,-17236
  801038:	10800017 	ldw	r2,0(r2)
	ticks_end = alt_nticks();
  80103c:	e0bffb15 	stw	r2,-20(fp)
	ticks_duration = ticks_end -ticks_start;
  801040:	e0fffb17 	ldw	r3,-20(fp)
  801044:	e0bffc17 	ldw	r2,-16(fp)
  801048:	1885c83a 	sub	r2,r3,r2
  80104c:	e0bff915 	stw	r2,-28(fp)
	duration = (float) ticks_duration / (float) ticks_per_s;
  801050:	e13ff917 	ldw	r4,-28(fp)
  801054:	0803bd40 	call	803bd4 <__floatsisf>
  801058:	1021883a 	mov	r16,r2
  80105c:	e13ffa17 	ldw	r4,-24(fp)
  801060:	0803bd40 	call	803bd4 <__floatsisf>
  801064:	8009883a 	mov	r4,r16
  801068:	100b883a 	mov	r5,r2
  80106c:	0803a600 	call	803a60 <__divsf3>
  801070:	e0bffd15 	stw	r2,-12(fp)
	printf(" The program slept for %d ticks (%f seconds)\n\n", ticks_duration,
  801074:	e13ffd17 	ldw	r4,-12(fp)
  801078:	0803c6c0 	call	803c6c <__extendsfdf2>
  80107c:	100f883a 	mov	r7,r2
  801080:	1811883a 	mov	r8,r3
  801084:	01002074 	movhi	r4,129
  801088:	211f4304 	addi	r4,r4,32012
  80108c:	e17ff917 	ldw	r5,-28(fp)
  801090:	380d883a 	mov	r6,r7
  801094:	400f883a 	mov	r7,r8
  801098:	0805c880 	call	805c88 <printf>
	duration);

	printf(" Timestamp Timer\n");
  80109c:	01002074 	movhi	r4,129
  8010a0:	211f4f04 	addi	r4,r4,32060
  8010a4:	0805da00 	call	805da0 <puts>
	freq = alt_timestamp_freq();
  8010a8:	080f5c40 	call	80f5c4 <alt_timestamp_freq>
  8010ac:	e0bfff15 	stw	r2,-4(fp)
	printf(" CPU Freq: %d\n", freq);
  8010b0:	01002074 	movhi	r4,129
  8010b4:	211f5404 	addi	r4,r4,32080
  8010b8:	e17fff17 	ldw	r5,-4(fp)
  8010bc:	0805c880 	call	805c88 <printf>
	printf(" Resetting Timestamp timer\n");
  8010c0:	01002074 	movhi	r4,129
  8010c4:	211f5804 	addi	r4,r4,32096
  8010c8:	0805da00 	call	805da0 <puts>
	alt_timestamp_start();
  8010cc:	080f4840 	call	80f484 <alt_timestamp_start>
	printf(" ...Timing the print of this statement...\n");
  8010d0:	01002074 	movhi	r4,129
  8010d4:	211f5f04 	addi	r4,r4,32124
  8010d8:	0805da00 	call	805da0 <puts>
	cycles = alt_timestamp();
  8010dc:	080f5280 	call	80f528 <alt_timestamp>
  8010e0:	e0bffe15 	stw	r2,-8(fp)
	duration = (float) cycles / (float) freq;
  8010e4:	e13ffe17 	ldw	r4,-8(fp)
  8010e8:	0803bd40 	call	803bd4 <__floatsisf>
  8010ec:	1021883a 	mov	r16,r2
  8010f0:	e13fff17 	ldw	r4,-4(fp)
  8010f4:	0803bd40 	call	803bd4 <__floatsisf>
  8010f8:	8009883a 	mov	r4,r16
  8010fc:	100b883a 	mov	r5,r2
  801100:	0803a600 	call	803a60 <__divsf3>
  801104:	e0bffd15 	stw	r2,-12(fp)
	printf(" It took %d cycles (%f seconds) to print the statement\n\n",
  801108:	e13ffd17 	ldw	r4,-12(fp)
  80110c:	0803c6c0 	call	803c6c <__extendsfdf2>
  801110:	100f883a 	mov	r7,r2
  801114:	1811883a 	mov	r8,r3
  801118:	01002074 	movhi	r4,129
  80111c:	211f6a04 	addi	r4,r4,32168
  801120:	e17ffe17 	ldw	r5,-8(fp)
  801124:	380d883a 	mov	r6,r7
  801128:	400f883a 	mov	r7,r8
  80112c:	0805c880 	call	805c88 <printf>
	cycles, duration);

	printf(" Hardware-Only Timer\n");
  801130:	01002074 	movhi	r4,129
  801134:	211f7904 	addi	r4,r4,32228
  801138:	0805da00 	call	805da0 <puts>
	printf(" Setting timer period to 5 seconds.\n");
  80113c:	01002074 	movhi	r4,129
  801140:	211f7f04 	addi	r4,r4,32252
  801144:	0805da00 	call	805da0 <puts>
	timer_period = 5 * CLOCK_FREQ;
  801148:	0083b9f4 	movhi	r2,3815
  80114c:	10aca004 	addi	r2,r2,-19840
  801150:	e0bff815 	stw	r2,-32(fp)
	// Setting the period registers must be done in 2 steps as they are only 16 bits wide
	IOWR_16DIRECT(MY_HW_ONLY_TIMER_BASE, 8, timer_period & 0xFFFF); // less significant word
  801154:	e0bff817 	ldw	r2,-32(fp)
  801158:	10ffffcc 	andi	r3,r2,65535
  80115c:	00804034 	movhi	r2,256
  801160:	10841204 	addi	r2,r2,4168
  801164:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(MY_HW_ONLY_TIMER_BASE,12, timer_period >> 16); // more significant word
  801168:	e0bff817 	ldw	r2,-32(fp)
  80116c:	1007d43a 	srai	r3,r2,16
  801170:	00804034 	movhi	r2,256
  801174:	10841304 	addi	r2,r2,4172
  801178:	10c0002d 	sthio	r3,0(r2)
	printf(" Stopping Timer\n");
  80117c:	01002074 	movhi	r4,129
  801180:	211f8804 	addi	r4,r4,32288
  801184:	0805da00 	call	805da0 <puts>
	status = IORD_16DIRECT(MY_HW_ONLY_TIMER_BASE, 0); // read status registers
  801188:	00804034 	movhi	r2,256
  80118c:	10841004 	addi	r2,r2,4160
  801190:	1080002b 	ldhuio	r2,0(r2)
  801194:	e0bff715 	stw	r2,-36(fp)
	// Write the control registers
	if(status & 0x2) {
  801198:	e0bff717 	ldw	r2,-36(fp)
  80119c:	1080008c 	andi	r2,r2,2
  8011a0:	1005003a 	cmpeq	r2,r2,zero
  8011a4:	1000041e 	bne	r2,zero,8011b8 <timer_test+0x214>
		IOWR_16DIRECT(MY_HW_ONLY_TIMER_BASE, 4, 1 << 3); // stop the timer if it was started
  8011a8:	00c04034 	movhi	r3,256
  8011ac:	18c41104 	addi	r3,r3,4164
  8011b0:	00800204 	movi	r2,8
  8011b4:	1880002d 	sthio	r2,0(r3)
	}
	printf(" Starting Timer\n");
  8011b8:	01002074 	movhi	r4,129
  8011bc:	211f8c04 	addi	r4,r4,32304
  8011c0:	0805da00 	call	805da0 <puts>
	IOWR_16DIRECT(MY_HW_ONLY_TIMER_BASE, 4, 1 << 2); // start the timer
  8011c4:	00c04034 	movhi	r3,256
  8011c8:	18c41104 	addi	r3,r3,4164
  8011cc:	00800104 	movi	r2,4
  8011d0:	1880002d 	sthio	r2,0(r3)

	printf("  Waiting for timer to expire...\n");
  8011d4:	01002074 	movhi	r4,129
  8011d8:	211f9004 	addi	r4,r4,32320
  8011dc:	0805da00 	call	805da0 <puts>
	done = 0;
  8011e0:	e03ff615 	stw	zero,-40(fp)
	while(! done) {
  8011e4:	00000706 	br	801204 <timer_test+0x260>
		status = IORD_16DIRECT(MY_HW_ONLY_TIMER_BASE, 0); // read status registers
  8011e8:	00804034 	movhi	r2,256
  8011ec:	10841004 	addi	r2,r2,4160
  8011f0:	1080002b 	ldhuio	r2,0(r2)
  8011f4:	e0bff715 	stw	r2,-36(fp)
		done = status & 0x1;
  8011f8:	e0bff717 	ldw	r2,-36(fp)
  8011fc:	1080004c 	andi	r2,r2,1
  801200:	e0bff615 	stw	r2,-40(fp)
	printf(" Starting Timer\n");
	IOWR_16DIRECT(MY_HW_ONLY_TIMER_BASE, 4, 1 << 2); // start the timer

	printf("  Waiting for timer to expire...\n");
	done = 0;
	while(! done) {
  801204:	e0bff617 	ldw	r2,-40(fp)
  801208:	1005003a 	cmpeq	r2,r2,zero
  80120c:	103ff61e 	bne	r2,zero,8011e8 <timer_test+0x244>
		status = IORD_16DIRECT(MY_HW_ONLY_TIMER_BASE, 0); // read status registers
		done = status & 0x1;
	}
	printf(" 5 seconds timer is done\n");
  801210:	01002074 	movhi	r4,129
  801214:	211f9904 	addi	r4,r4,32356
  801218:	0805da00 	call	805da0 <puts>
}
  80121c:	e037883a 	mov	sp,fp
  801220:	dfc00217 	ldw	ra,8(sp)
  801224:	df000117 	ldw	fp,4(sp)
  801228:	dc000017 	ldw	r16,0(sp)
  80122c:	dec00304 	addi	sp,sp,12
  801230:	f800283a 	ret

00801234 <setHardwareTimerPeriod>:

// Period is in clock cycles
// ie 5 seconds would be 5 * CLOCK_FREQ
void setHardwareTimerPeriod(int period)
{
  801234:	defffe04 	addi	sp,sp,-8
  801238:	df000115 	stw	fp,4(sp)
  80123c:	df000104 	addi	fp,sp,4
  801240:	e13fff15 	stw	r4,-4(fp)
	IOWR_16DIRECT(MY_HW_ONLY_TIMER_BASE, 8, period & 0xFFFF); // less significant word
  801244:	e0bfff17 	ldw	r2,-4(fp)
  801248:	10ffffcc 	andi	r3,r2,65535
  80124c:	00804034 	movhi	r2,256
  801250:	10841204 	addi	r2,r2,4168
  801254:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(MY_HW_ONLY_TIMER_BASE,12, period >> 16); // more significant word
  801258:	e0bfff17 	ldw	r2,-4(fp)
  80125c:	1007d43a 	srai	r3,r2,16
  801260:	00804034 	movhi	r2,256
  801264:	10841304 	addi	r2,r2,4172
  801268:	10c0002d 	sthio	r3,0(r2)
}
  80126c:	e037883a 	mov	sp,fp
  801270:	df000017 	ldw	fp,0(sp)
  801274:	dec00104 	addi	sp,sp,4
  801278:	f800283a 	ret

0080127c <isHardwareTimerRunning>:

int isHardwareTimerRunning(void)
{
  80127c:	defffe04 	addi	sp,sp,-8
  801280:	df000115 	stw	fp,4(sp)
  801284:	df000104 	addi	fp,sp,4
	int status = IORD_16DIRECT(MY_HW_ONLY_TIMER_BASE, 0);
  801288:	00804034 	movhi	r2,256
  80128c:	10841004 	addi	r2,r2,4160
  801290:	1080002b 	ldhuio	r2,0(r2)
  801294:	e0bfff15 	stw	r2,-4(fp)
	return status & 0x2; // not totally sure on this
  801298:	e0bfff17 	ldw	r2,-4(fp)
  80129c:	1080008c 	andi	r2,r2,2
}
  8012a0:	e037883a 	mov	sp,fp
  8012a4:	df000017 	ldw	fp,0(sp)
  8012a8:	dec00104 	addi	sp,sp,4
  8012ac:	f800283a 	ret

008012b0 <hasHardwareTimerExpired>:

int hasHardwareTimerExpired(void)
{
  8012b0:	deffff04 	addi	sp,sp,-4
  8012b4:	df000015 	stw	fp,0(sp)
  8012b8:	d839883a 	mov	fp,sp
	return IORD_16DIRECT(MY_HW_ONLY_TIMER_BASE, 0);
  8012bc:	00804034 	movhi	r2,256
  8012c0:	10841004 	addi	r2,r2,4160
  8012c4:	1080002b 	ldhuio	r2,0(r2)
}
  8012c8:	e037883a 	mov	sp,fp
  8012cc:	df000017 	ldw	fp,0(sp)
  8012d0:	dec00104 	addi	sp,sp,4
  8012d4:	f800283a 	ret

008012d8 <startHardwareTimer>:

void startHardwareTimer(void)
{
  8012d8:	deffff04 	addi	sp,sp,-4
  8012dc:	df000015 	stw	fp,0(sp)
  8012e0:	d839883a 	mov	fp,sp
	IOWR_16DIRECT(MY_HW_ONLY_TIMER_BASE, 4, 1 << 2);
  8012e4:	00c04034 	movhi	r3,256
  8012e8:	18c41104 	addi	r3,r3,4164
  8012ec:	00800104 	movi	r2,4
  8012f0:	1880002d 	sthio	r2,0(r3)
}
  8012f4:	e037883a 	mov	sp,fp
  8012f8:	df000017 	ldw	fp,0(sp)
  8012fc:	dec00104 	addi	sp,sp,4
  801300:	f800283a 	ret

00801304 <setUp>:
 *  Created on: 2013-09-17
 *      Author: SarahLynn
 */
#include "vga.h"
alt_up_pixel_buffer_dma_dev* setUp(void)
{
  801304:	defffd04 	addi	sp,sp,-12
  801308:	dfc00215 	stw	ra,8(sp)
  80130c:	df000115 	stw	fp,4(sp)
  801310:	df000104 	addi	fp,sp,4
	alt_up_pixel_buffer_dma_dev* pixel_buffer;

	pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma");
  801314:	01002074 	movhi	r4,129
  801318:	211fa004 	addi	r4,r4,32384
  80131c:	0810db40 	call	810db4 <alt_up_pixel_buffer_dma_open_dev>
  801320:	e0bfff15 	stw	r2,-4(fp)

	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer, PIXEL_BUFFER_BASE);
  801324:	e13fff17 	ldw	r4,-4(fp)
  801328:	01404234 	movhi	r5,264
  80132c:	0810f940 	call	810f94 <alt_up_pixel_buffer_dma_change_back_buffer_address>

	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  801330:	e13fff17 	ldw	r4,-4(fp)
  801334:	0810fec0 	call	810fec <alt_up_pixel_buffer_dma_swap_buffers>

	while
		(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  801338:	e13fff17 	ldw	r4,-4(fp)
  80133c:	08110440 	call	811044 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  801340:	1004c03a 	cmpne	r2,r2,zero
  801344:	103ffc1e 	bne	r2,zero,801338 <setUp+0x34>

	return pixel_buffer;
  801348:	e0bfff17 	ldw	r2,-4(fp)
}
  80134c:	e037883a 	mov	sp,fp
  801350:	dfc00117 	ldw	ra,4(sp)
  801354:	df000017 	ldw	fp,0(sp)
  801358:	dec00204 	addi	sp,sp,8
  80135c:	f800283a 	ret

00801360 <clearScreen>:

void clearScreen(alt_up_pixel_buffer_dma_dev* pixel_buffer)
{
  801360:	defffd04 	addi	sp,sp,-12
  801364:	dfc00215 	stw	ra,8(sp)
  801368:	df000115 	stw	fp,4(sp)
  80136c:	df000104 	addi	fp,sp,4
  801370:	e13fff15 	stw	r4,-4(fp)
	printf("Clearing Screen!\n");
  801374:	01002074 	movhi	r4,129
  801378:	211fa604 	addi	r4,r4,32408
  80137c:	0805da00 	call	805da0 <puts>

	pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma");
  801380:	01002074 	movhi	r4,129
  801384:	211fa004 	addi	r4,r4,32384
  801388:	0810db40 	call	810db4 <alt_up_pixel_buffer_dma_open_dev>
  80138c:	e0bfff15 	stw	r2,-4(fp)

	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  801390:	e13fff17 	ldw	r4,-4(fp)
  801394:	000b883a 	mov	r5,zero
  801398:	08110780 	call	811078 <alt_up_pixel_buffer_dma_clear_screen>

	return;
}
  80139c:	e037883a 	mov	sp,fp
  8013a0:	dfc00117 	ldw	ra,4(sp)
  8013a4:	df000017 	ldw	fp,0(sp)
  8013a8:	dec00204 	addi	sp,sp,8
  8013ac:	f800283a 	ret

008013b0 <drawLine>:

void drawLine(alt_up_pixel_buffer_dma_dev* pixel_buffer, int x0, int y0, int x1, int y1, int color)
{
  8013b0:	defff704 	addi	sp,sp,-36
  8013b4:	dfc00815 	stw	ra,32(sp)
  8013b8:	df000715 	stw	fp,28(sp)
  8013bc:	df000704 	addi	fp,sp,28
  8013c0:	e13ffc15 	stw	r4,-16(fp)
  8013c4:	e17ffd15 	stw	r5,-12(fp)
  8013c8:	e1bffe15 	stw	r6,-8(fp)
  8013cc:	e1ffff15 	stw	r7,-4(fp)
	printf("Drawing Line!\n");
  8013d0:	01002074 	movhi	r4,129
  8013d4:	211fab04 	addi	r4,r4,32428
  8013d8:	0805da00 	call	805da0 <puts>


	if (y0 == y1)
  8013dc:	e0fffe17 	ldw	r3,-8(fp)
  8013e0:	e0800217 	ldw	r2,8(fp)
  8013e4:	1880091e 	bne	r3,r2,80140c <drawLine+0x5c>
	{
		alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, 0);
  8013e8:	e0800317 	ldw	r2,12(fp)
  8013ec:	d8800015 	stw	r2,0(sp)
  8013f0:	d8000115 	stw	zero,4(sp)
  8013f4:	e13ffc17 	ldw	r4,-16(fp)
  8013f8:	e17ffd17 	ldw	r5,-12(fp)
  8013fc:	e1bfff17 	ldw	r6,-4(fp)
  801400:	e1fffe17 	ldw	r7,-8(fp)
  801404:	08116d00 	call	8116d0 <alt_up_pixel_buffer_dma_draw_hline>
  801408:	00001606 	br	801464 <drawLine+0xb4>
	}
	else if (x0 == x1)
  80140c:	e0fffd17 	ldw	r3,-12(fp)
  801410:	e0bfff17 	ldw	r2,-4(fp)
  801414:	1880091e 	bne	r3,r2,80143c <drawLine+0x8c>
	{
		alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, 0);
  801418:	e0800317 	ldw	r2,12(fp)
  80141c:	d8800015 	stw	r2,0(sp)
  801420:	d8000115 	stw	zero,4(sp)
  801424:	e13ffc17 	ldw	r4,-16(fp)
  801428:	e17ffd17 	ldw	r5,-12(fp)
  80142c:	e1bffe17 	ldw	r6,-8(fp)
  801430:	e1c00217 	ldw	r7,8(fp)
  801434:	0811a200 	call	811a20 <alt_up_pixel_buffer_dma_draw_vline>
  801438:	00000a06 	br	801464 <drawLine+0xb4>
	}
	else
	{
		alt_up_pixel_buffer_dma_draw_line(pixel_buffer, x0, y0, x1, y1, color, 0);
  80143c:	e0800217 	ldw	r2,8(fp)
  801440:	d8800015 	stw	r2,0(sp)
  801444:	e0800317 	ldw	r2,12(fp)
  801448:	d8800115 	stw	r2,4(sp)
  80144c:	d8000215 	stw	zero,8(sp)
  801450:	e13ffc17 	ldw	r4,-16(fp)
  801454:	e17ffd17 	ldw	r5,-12(fp)
  801458:	e1bffe17 	ldw	r6,-8(fp)
  80145c:	e1ffff17 	ldw	r7,-4(fp)
  801460:	0811f840 	call	811f84 <alt_up_pixel_buffer_dma_draw_line>
	}

	return;
}
  801464:	e037883a 	mov	sp,fp
  801468:	dfc00117 	ldw	ra,4(sp)
  80146c:	df000017 	ldw	fp,0(sp)
  801470:	dec00204 	addi	sp,sp,8
  801474:	f800283a 	ret

00801478 <printLine>:

void printLine(void)
{
  801478:	defffd04 	addi	sp,sp,-12
  80147c:	dfc00215 	stw	ra,8(sp)
  801480:	df000115 	stw	fp,4(sp)
  801484:	df000104 	addi	fp,sp,4
	alt_up_char_buffer_dev *char_buffer;
	char_buffer = alt_up_char_buffer_open_dev("/dev/char_drawer");
  801488:	01002074 	movhi	r4,129
  80148c:	211faf04 	addi	r4,r4,32444
  801490:	0810b340 	call	810b34 <alt_up_char_buffer_open_dev>
  801494:	e0bfff15 	stw	r2,-4(fp)
	alt_up_char_buffer_init(char_buffer);
  801498:	e13fff17 	ldw	r4,-4(fp)
  80149c:	0810ab00 	call	810ab0 <alt_up_char_buffer_init>
	alt_up_char_buffer_string(char_buffer, "LaserSharknado", 40, 30);
  8014a0:	e13fff17 	ldw	r4,-4(fp)
  8014a4:	01402074 	movhi	r5,129
  8014a8:	295fb404 	addi	r5,r5,32464
  8014ac:	01800a04 	movi	r6,40
  8014b0:	01c00784 	movi	r7,30
  8014b4:	0810c440 	call	810c44 <alt_up_char_buffer_string>

	return;
}
  8014b8:	e037883a 	mov	sp,fp
  8014bc:	dfc00117 	ldw	ra,4(sp)
  8014c0:	df000017 	ldw	fp,0(sp)
  8014c4:	dec00204 	addi	sp,sp,8
  8014c8:	f800283a 	ret

008014cc <drawBox>:

void drawBox(alt_up_pixel_buffer_dma_dev* pixel_buffer, int x0, int y0, int x1, int y1, int color)
{
  8014cc:	defff704 	addi	sp,sp,-36
  8014d0:	dfc00815 	stw	ra,32(sp)
  8014d4:	df000715 	stw	fp,28(sp)
  8014d8:	df000704 	addi	fp,sp,28
  8014dc:	e13ffc15 	stw	r4,-16(fp)
  8014e0:	e17ffd15 	stw	r5,-12(fp)
  8014e4:	e1bffe15 	stw	r6,-8(fp)
  8014e8:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer, x0, y0, x1, y1, color, 0);
  8014ec:	e0800217 	ldw	r2,8(fp)
  8014f0:	d8800015 	stw	r2,0(sp)
  8014f4:	e0800317 	ldw	r2,12(fp)
  8014f8:	d8800115 	stw	r2,4(sp)
  8014fc:	d8000215 	stw	zero,8(sp)
  801500:	e13ffc17 	ldw	r4,-16(fp)
  801504:	e17ffd17 	ldw	r5,-12(fp)
  801508:	e1bffe17 	ldw	r6,-8(fp)
  80150c:	e1ffff17 	ldw	r7,-4(fp)
  801510:	08111dc0 	call	8111dc <alt_up_pixel_buffer_dma_draw_box>
}
  801514:	e037883a 	mov	sp,fp
  801518:	dfc00117 	ldw	ra,4(sp)
  80151c:	df000017 	ldw	fp,0(sp)
  801520:	dec00204 	addi	sp,sp,8
  801524:	f800283a 	ret

00801528 <sin>:
  801528:	00a00034 	movhi	r2,32768
  80152c:	10bfffc4 	addi	r2,r2,-1
  801530:	defffa04 	addi	sp,sp,-24
  801534:	114c703a 	and	r6,r2,r5
  801538:	008ffa74 	movhi	r2,16361
  80153c:	10887ec4 	addi	r2,r2,8699
  801540:	dfc00515 	stw	ra,20(sp)
  801544:	2011883a 	mov	r8,r4
  801548:	1180220e 	bge	r2,r6,8015d4 <sin+0xac>
  80154c:	009ffc34 	movhi	r2,32752
  801550:	10bfffc4 	addi	r2,r2,-1
  801554:	11800a0e 	bge	r2,r6,801580 <sin+0x58>
  801558:	280f883a 	mov	r7,r5
  80155c:	400d883a 	mov	r6,r8
  801560:	08040d00 	call	8040d0 <__subdf3>
  801564:	100d883a 	mov	r6,r2
  801568:	180f883a 	mov	r7,r3
  80156c:	3005883a 	mov	r2,r6
  801570:	3807883a 	mov	r3,r7
  801574:	dfc00517 	ldw	ra,20(sp)
  801578:	dec00604 	addi	sp,sp,24
  80157c:	f800283a 	ret
  801580:	d9800104 	addi	r6,sp,4
  801584:	08016940 	call	801694 <__ieee754_rem_pio2>
  801588:	10c000cc 	andi	r3,r2,3
  80158c:	01000044 	movi	r4,1
  801590:	19001b26 	beq	r3,r4,801600 <sin+0xd8>
  801594:	00800084 	movi	r2,2
  801598:	18803126 	beq	r3,r2,801660 <sin+0x138>
  80159c:	1800241e 	bne	r3,zero,801630 <sin+0x108>
  8015a0:	d8800117 	ldw	r2,4(sp)
  8015a4:	da000317 	ldw	r8,12(sp)
  8015a8:	d8c00217 	ldw	r3,8(sp)
  8015ac:	da400417 	ldw	r9,16(sp)
  8015b0:	d9000015 	stw	r4,0(sp)
  8015b4:	400d883a 	mov	r6,r8
  8015b8:	480f883a 	mov	r7,r9
  8015bc:	180b883a 	mov	r5,r3
  8015c0:	1009883a 	mov	r4,r2
  8015c4:	08032640 	call	803264 <__kernel_sin>
  8015c8:	100d883a 	mov	r6,r2
  8015cc:	180f883a 	mov	r7,r3
  8015d0:	003fe606 	br	80156c <sin+0x44>
  8015d4:	000d883a 	mov	r6,zero
  8015d8:	000f883a 	mov	r7,zero
  8015dc:	d8000015 	stw	zero,0(sp)
  8015e0:	08032640 	call	803264 <__kernel_sin>
  8015e4:	100d883a 	mov	r6,r2
  8015e8:	180f883a 	mov	r7,r3
  8015ec:	3005883a 	mov	r2,r6
  8015f0:	3807883a 	mov	r3,r7
  8015f4:	dfc00517 	ldw	ra,20(sp)
  8015f8:	dec00604 	addi	sp,sp,24
  8015fc:	f800283a 	ret
  801600:	d8800117 	ldw	r2,4(sp)
  801604:	da000317 	ldw	r8,12(sp)
  801608:	d8c00217 	ldw	r3,8(sp)
  80160c:	da400417 	ldw	r9,16(sp)
  801610:	400d883a 	mov	r6,r8
  801614:	180b883a 	mov	r5,r3
  801618:	480f883a 	mov	r7,r9
  80161c:	1009883a 	mov	r4,r2
  801620:	0801ebc0 	call	801ebc <__kernel_cos>
  801624:	100d883a 	mov	r6,r2
  801628:	180f883a 	mov	r7,r3
  80162c:	003fcf06 	br	80156c <sin+0x44>
  801630:	d8800117 	ldw	r2,4(sp)
  801634:	da000317 	ldw	r8,12(sp)
  801638:	d8c00217 	ldw	r3,8(sp)
  80163c:	da400417 	ldw	r9,16(sp)
  801640:	400d883a 	mov	r6,r8
  801644:	180b883a 	mov	r5,r3
  801648:	480f883a 	mov	r7,r9
  80164c:	1009883a 	mov	r4,r2
  801650:	0801ebc0 	call	801ebc <__kernel_cos>
  801654:	100d883a 	mov	r6,r2
  801658:	19e0003c 	xorhi	r7,r3,32768
  80165c:	003fc306 	br	80156c <sin+0x44>
  801660:	d8800117 	ldw	r2,4(sp)
  801664:	da000317 	ldw	r8,12(sp)
  801668:	d8c00217 	ldw	r3,8(sp)
  80166c:	da400417 	ldw	r9,16(sp)
  801670:	d9000015 	stw	r4,0(sp)
  801674:	400d883a 	mov	r6,r8
  801678:	480f883a 	mov	r7,r9
  80167c:	180b883a 	mov	r5,r3
  801680:	1009883a 	mov	r4,r2
  801684:	08032640 	call	803264 <__kernel_sin>
  801688:	100d883a 	mov	r6,r2
  80168c:	19e0003c 	xorhi	r7,r3,32768
  801690:	003fb606 	br	80156c <sin+0x44>

00801694 <__ieee754_rem_pio2>:
  801694:	deffe304 	addi	sp,sp,-116
  801698:	00a00034 	movhi	r2,32768
  80169c:	10bfffc4 	addi	r2,r2,-1
  8016a0:	dd801915 	stw	r22,100(sp)
  8016a4:	28ac703a 	and	r22,r5,r2
  8016a8:	008ffa74 	movhi	r2,16361
  8016ac:	10887ec4 	addi	r2,r2,8699
  8016b0:	df001b15 	stw	fp,108(sp)
  8016b4:	dfc01c15 	stw	ra,112(sp)
  8016b8:	ddc01a15 	stw	r23,104(sp)
  8016bc:	dd401815 	stw	r21,96(sp)
  8016c0:	dd001715 	stw	r20,92(sp)
  8016c4:	dcc01615 	stw	r19,88(sp)
  8016c8:	dc801515 	stw	r18,84(sp)
  8016cc:	dc401415 	stw	r17,80(sp)
  8016d0:	dc001315 	stw	r16,76(sp)
  8016d4:	2013883a 	mov	r9,r4
  8016d8:	d9400a15 	stw	r5,40(sp)
  8016dc:	3039883a 	mov	fp,r6
  8016e0:	15801216 	blt	r2,r22,80172c <__ieee754_rem_pio2+0x98>
  8016e4:	e1400115 	stw	r5,4(fp)
  8016e8:	30000315 	stw	zero,12(r6)
  8016ec:	e1000015 	stw	r4,0(fp)
  8016f0:	d8000b15 	stw	zero,44(sp)
  8016f4:	30000215 	stw	zero,8(r6)
  8016f8:	d8800b17 	ldw	r2,44(sp)
  8016fc:	dfc01c17 	ldw	ra,112(sp)
  801700:	df001b17 	ldw	fp,108(sp)
  801704:	ddc01a17 	ldw	r23,104(sp)
  801708:	dd801917 	ldw	r22,100(sp)
  80170c:	dd401817 	ldw	r21,96(sp)
  801710:	dd001717 	ldw	r20,92(sp)
  801714:	dcc01617 	ldw	r19,88(sp)
  801718:	dc801517 	ldw	r18,84(sp)
  80171c:	dc401417 	ldw	r17,80(sp)
  801720:	dc001317 	ldw	r16,76(sp)
  801724:	dec01d04 	addi	sp,sp,116
  801728:	f800283a 	ret
  80172c:	009000f4 	movhi	r2,16387
  801730:	10b65ec4 	addi	r2,r2,-9861
  801734:	15800f0e 	bge	r2,r22,801774 <__ieee754_rem_pio2+0xe0>
  801738:	00904e74 	movhi	r2,16697
  80173c:	10887ec4 	addi	r2,r2,8699
  801740:	1580330e 	bge	r2,r22,801810 <__ieee754_rem_pio2+0x17c>
  801744:	009ffc34 	movhi	r2,32752
  801748:	10bfffc4 	addi	r2,r2,-1
  80174c:	1580fe0e 	bge	r2,r22,801b48 <__ieee754_rem_pio2+0x4b4>
  801750:	280f883a 	mov	r7,r5
  801754:	480d883a 	mov	r6,r9
  801758:	08040d00 	call	8040d0 <__subdf3>
  80175c:	e0c00115 	stw	r3,4(fp)
  801760:	d8000b15 	stw	zero,44(sp)
  801764:	e0800015 	stw	r2,0(fp)
  801768:	e0800215 	stw	r2,8(fp)
  80176c:	e0c00315 	stw	r3,12(fp)
  801770:	003fe106 	br	8016f8 <__ieee754_rem_pio2+0x64>
  801774:	d9000a17 	ldw	r4,40(sp)
  801778:	0100ce0e 	bge	zero,r4,801ab4 <__ieee754_rem_pio2+0x420>
  80177c:	04151034 	movhi	r16,21568
  801780:	044ffe74 	movhi	r17,16377
  801784:	8c487ec4 	addi	r17,r17,8699
  801788:	4809883a 	mov	r4,r9
  80178c:	800d883a 	mov	r6,r16
  801790:	880f883a 	mov	r7,r17
  801794:	08040d00 	call	8040d0 <__subdf3>
  801798:	1025883a 	mov	r18,r2
  80179c:	1827883a 	mov	r19,r3
  8017a0:	b4413c26 	beq	r22,r17,801c94 <__ieee754_rem_pio2+0x600>
  8017a4:	040698b4 	movhi	r16,6754
  8017a8:	8418cc44 	addi	r16,r16,25393
  8017ac:	044f7474 	movhi	r17,15825
  8017b0:	8c6d1844 	addi	r17,r17,-19359
  8017b4:	1009883a 	mov	r4,r2
  8017b8:	180b883a 	mov	r5,r3
  8017bc:	800d883a 	mov	r6,r16
  8017c0:	880f883a 	mov	r7,r17
  8017c4:	08040d00 	call	8040d0 <__subdf3>
  8017c8:	100d883a 	mov	r6,r2
  8017cc:	9009883a 	mov	r4,r18
  8017d0:	980b883a 	mov	r5,r19
  8017d4:	180f883a 	mov	r7,r3
  8017d8:	e0800015 	stw	r2,0(fp)
  8017dc:	e0c00115 	stw	r3,4(fp)
  8017e0:	08040d00 	call	8040d0 <__subdf3>
  8017e4:	1009883a 	mov	r4,r2
  8017e8:	800d883a 	mov	r6,r16
  8017ec:	880f883a 	mov	r7,r17
  8017f0:	180b883a 	mov	r5,r3
  8017f4:	08040d00 	call	8040d0 <__subdf3>
  8017f8:	1009883a 	mov	r4,r2
  8017fc:	00800044 	movi	r2,1
  801800:	d8800b15 	stw	r2,44(sp)
  801804:	e0c00315 	stw	r3,12(fp)
  801808:	e1000215 	stw	r4,8(fp)
  80180c:	003fba06 	br	8016f8 <__ieee754_rem_pio2+0x64>
  801810:	080357c0 	call	80357c <fabs>
  801814:	021b72b4 	movhi	r8,28106
  801818:	423220c4 	addi	r8,r8,-14205
  80181c:	024ff934 	movhi	r9,16356
  801820:	4a57cc04 	addi	r9,r9,24368
  801824:	480f883a 	mov	r7,r9
  801828:	400d883a 	mov	r6,r8
  80182c:	1009883a 	mov	r4,r2
  801830:	180b883a 	mov	r5,r3
  801834:	1025883a 	mov	r18,r2
  801838:	1827883a 	mov	r19,r3
  80183c:	08041c40 	call	8041c4 <__muldf3>
  801840:	0011883a 	mov	r8,zero
  801844:	024ff834 	movhi	r9,16352
  801848:	480f883a 	mov	r7,r9
  80184c:	400d883a 	mov	r6,r8
  801850:	180b883a 	mov	r5,r3
  801854:	1009883a 	mov	r4,r2
  801858:	08041500 	call	804150 <__adddf3>
  80185c:	180b883a 	mov	r5,r3
  801860:	1009883a 	mov	r4,r2
  801864:	0804a700 	call	804a70 <__fixdfsi>
  801868:	1009883a 	mov	r4,r2
  80186c:	d8800b15 	stw	r2,44(sp)
  801870:	08049780 	call	804978 <__floatsidf>
  801874:	1823883a 	mov	r17,r3
  801878:	1009883a 	mov	r4,r2
  80187c:	d8800c15 	stw	r2,48(sp)
  801880:	00effe74 	movhi	r3,49145
  801884:	18c87ec4 	addi	r3,r3,8699
  801888:	00951034 	movhi	r2,21568
  80188c:	880b883a 	mov	r5,r17
  801890:	180f883a 	mov	r7,r3
  801894:	100d883a 	mov	r6,r2
  801898:	dc400d15 	stw	r17,52(sp)
  80189c:	08041c40 	call	8041c4 <__muldf3>
  8018a0:	180f883a 	mov	r7,r3
  8018a4:	980b883a 	mov	r5,r19
  8018a8:	9009883a 	mov	r4,r18
  8018ac:	100d883a 	mov	r6,r2
  8018b0:	08041500 	call	804150 <__adddf3>
  8018b4:	d9000c17 	ldw	r4,48(sp)
  8018b8:	020698b4 	movhi	r8,6754
  8018bc:	4218cc44 	addi	r8,r8,25393
  8018c0:	024f7474 	movhi	r9,15825
  8018c4:	4a6d1844 	addi	r9,r9,-19359
  8018c8:	880b883a 	mov	r5,r17
  8018cc:	480f883a 	mov	r7,r9
  8018d0:	400d883a 	mov	r6,r8
  8018d4:	1025883a 	mov	r18,r2
  8018d8:	1827883a 	mov	r19,r3
  8018dc:	08041c40 	call	8041c4 <__muldf3>
  8018e0:	d9000b17 	ldw	r4,44(sp)
  8018e4:	100f883a 	mov	r7,r2
  8018e8:	1811883a 	mov	r8,r3
  8018ec:	008007c4 	movi	r2,31
  8018f0:	dc800e15 	stw	r18,56(sp)
  8018f4:	3821883a 	mov	r16,r7
  8018f8:	dcc00f15 	stw	r19,60(sp)
  8018fc:	4023883a 	mov	r17,r8
  801900:	11010a0e 	bge	r2,r4,801d2c <__ieee754_rem_pio2+0x698>
  801904:	d9000e17 	ldw	r4,56(sp)
  801908:	d9400f17 	ldw	r5,60(sp)
  80190c:	800d883a 	mov	r6,r16
  801910:	880f883a 	mov	r7,r17
  801914:	08040d00 	call	8040d0 <__subdf3>
  801918:	1810d53a 	srli	r8,r3,20
  80191c:	b02dd53a 	srai	r22,r22,20
  801920:	1009883a 	mov	r4,r2
  801924:	4201ffcc 	andi	r8,r8,2047
  801928:	180b883a 	mov	r5,r3
  80192c:	b211c83a 	sub	r8,r22,r8
  801930:	00800404 	movi	r2,16
  801934:	dd801015 	stw	r22,64(sp)
  801938:	e1000015 	stw	r4,0(fp)
  80193c:	e1400115 	stw	r5,4(fp)
  801940:	1200430e 	bge	r2,r8,801a50 <__ieee754_rem_pio2+0x3bc>
  801944:	d9000c17 	ldw	r4,48(sp)
  801948:	d9400d17 	ldw	r5,52(sp)
  80194c:	00869834 	movhi	r2,6752
  801950:	00cf7474 	movhi	r3,15825
  801954:	18ed1844 	addi	r3,r3,-19359
  801958:	180f883a 	mov	r7,r3
  80195c:	100d883a 	mov	r6,r2
  801960:	08041c40 	call	8041c4 <__muldf3>
  801964:	d9000e17 	ldw	r4,56(sp)
  801968:	d9400f17 	ldw	r5,60(sp)
  80196c:	100d883a 	mov	r6,r2
  801970:	180f883a 	mov	r7,r3
  801974:	1025883a 	mov	r18,r2
  801978:	1827883a 	mov	r19,r3
  80197c:	08040d00 	call	8040d0 <__subdf3>
  801980:	d9000c17 	ldw	r4,48(sp)
  801984:	d9400d17 	ldw	r5,52(sp)
  801988:	058b80f4 	movhi	r22,11779
  80198c:	b59c1cc4 	addi	r22,r22,28787
  801990:	05cee8f4 	movhi	r23,15267
  801994:	bdc66284 	addi	r23,r23,6538
  801998:	b00d883a 	mov	r6,r22
  80199c:	b80f883a 	mov	r7,r23
  8019a0:	d8801115 	stw	r2,68(sp)
  8019a4:	d8c01215 	stw	r3,72(sp)
  8019a8:	d8800815 	stw	r2,32(sp)
  8019ac:	08041c40 	call	8041c4 <__muldf3>
  8019b0:	d9001217 	ldw	r4,72(sp)
  8019b4:	d9400f17 	ldw	r5,60(sp)
  8019b8:	d9800817 	ldw	r6,32(sp)
  8019bc:	d9000915 	stw	r4,36(sp)
  8019c0:	d9c01217 	ldw	r7,72(sp)
  8019c4:	d9000e17 	ldw	r4,56(sp)
  8019c8:	1021883a 	mov	r16,r2
  8019cc:	1823883a 	mov	r17,r3
  8019d0:	08040d00 	call	8040d0 <__subdf3>
  8019d4:	180b883a 	mov	r5,r3
  8019d8:	900d883a 	mov	r6,r18
  8019dc:	980f883a 	mov	r7,r19
  8019e0:	1009883a 	mov	r4,r2
  8019e4:	08040d00 	call	8040d0 <__subdf3>
  8019e8:	180f883a 	mov	r7,r3
  8019ec:	880b883a 	mov	r5,r17
  8019f0:	8009883a 	mov	r4,r16
  8019f4:	100d883a 	mov	r6,r2
  8019f8:	08040d00 	call	8040d0 <__subdf3>
  8019fc:	d9000817 	ldw	r4,32(sp)
  801a00:	d9401217 	ldw	r5,72(sp)
  801a04:	180f883a 	mov	r7,r3
  801a08:	100d883a 	mov	r6,r2
  801a0c:	1021883a 	mov	r16,r2
  801a10:	1823883a 	mov	r17,r3
  801a14:	08040d00 	call	8040d0 <__subdf3>
  801a18:	1810d53a 	srli	r8,r3,20
  801a1c:	1009883a 	mov	r4,r2
  801a20:	d8801017 	ldw	r2,64(sp)
  801a24:	4201ffcc 	andi	r8,r8,2047
  801a28:	180b883a 	mov	r5,r3
  801a2c:	1211c83a 	sub	r8,r2,r8
  801a30:	00800c44 	movi	r2,49
  801a34:	e1000015 	stw	r4,0(fp)
  801a38:	e1400115 	stw	r5,4(fp)
  801a3c:	1200f016 	blt	r2,r8,801e00 <__ieee754_rem_pio2+0x76c>
  801a40:	d8c00817 	ldw	r3,32(sp)
  801a44:	d9001217 	ldw	r4,72(sp)
  801a48:	d8c00e15 	stw	r3,56(sp)
  801a4c:	d9000f15 	stw	r4,60(sp)
  801a50:	e1800017 	ldw	r6,0(fp)
  801a54:	e1c00117 	ldw	r7,4(fp)
  801a58:	d9400f17 	ldw	r5,60(sp)
  801a5c:	d9000e17 	ldw	r4,56(sp)
  801a60:	08040d00 	call	8040d0 <__subdf3>
  801a64:	180b883a 	mov	r5,r3
  801a68:	800d883a 	mov	r6,r16
  801a6c:	880f883a 	mov	r7,r17
  801a70:	1009883a 	mov	r4,r2
  801a74:	08040d00 	call	8040d0 <__subdf3>
  801a78:	d9400a17 	ldw	r5,40(sp)
  801a7c:	e0800215 	stw	r2,8(fp)
  801a80:	e1800204 	addi	r6,fp,8
  801a84:	30c00115 	stw	r3,4(r6)
  801a88:	283f1b0e 	bge	r5,zero,8016f8 <__ieee754_rem_pio2+0x64>
  801a8c:	e0c00117 	ldw	r3,4(fp)
  801a90:	d8800b17 	ldw	r2,44(sp)
  801a94:	18e0003c 	xorhi	r3,r3,32768
  801a98:	0085c83a 	sub	r2,zero,r2
  801a9c:	e0c00115 	stw	r3,4(fp)
  801aa0:	d8800b15 	stw	r2,44(sp)
  801aa4:	30800117 	ldw	r2,4(r6)
  801aa8:	10a0003c 	xorhi	r2,r2,32768
  801aac:	30800115 	stw	r2,4(r6)
  801ab0:	003f1106 	br	8016f8 <__ieee754_rem_pio2+0x64>
  801ab4:	04151034 	movhi	r16,21568
  801ab8:	044ffe74 	movhi	r17,16377
  801abc:	8c487ec4 	addi	r17,r17,8699
  801ac0:	4809883a 	mov	r4,r9
  801ac4:	800d883a 	mov	r6,r16
  801ac8:	880f883a 	mov	r7,r17
  801acc:	08041500 	call	804150 <__adddf3>
  801ad0:	1025883a 	mov	r18,r2
  801ad4:	1827883a 	mov	r19,r3
  801ad8:	b440a326 	beq	r22,r17,801d68 <__ieee754_rem_pio2+0x6d4>
  801adc:	040698b4 	movhi	r16,6754
  801ae0:	8418cc44 	addi	r16,r16,25393
  801ae4:	044f7474 	movhi	r17,15825
  801ae8:	8c6d1844 	addi	r17,r17,-19359
  801aec:	1009883a 	mov	r4,r2
  801af0:	180b883a 	mov	r5,r3
  801af4:	800d883a 	mov	r6,r16
  801af8:	880f883a 	mov	r7,r17
  801afc:	08041500 	call	804150 <__adddf3>
  801b00:	100d883a 	mov	r6,r2
  801b04:	9009883a 	mov	r4,r18
  801b08:	980b883a 	mov	r5,r19
  801b0c:	180f883a 	mov	r7,r3
  801b10:	e0800015 	stw	r2,0(fp)
  801b14:	e0c00115 	stw	r3,4(fp)
  801b18:	08040d00 	call	8040d0 <__subdf3>
  801b1c:	1009883a 	mov	r4,r2
  801b20:	800d883a 	mov	r6,r16
  801b24:	880f883a 	mov	r7,r17
  801b28:	180b883a 	mov	r5,r3
  801b2c:	08041500 	call	804150 <__adddf3>
  801b30:	1009883a 	mov	r4,r2
  801b34:	00bfffc4 	movi	r2,-1
  801b38:	d8800b15 	stw	r2,44(sp)
  801b3c:	e0c00315 	stw	r3,12(fp)
  801b40:	e1000215 	stw	r4,8(fp)
  801b44:	003eec06 	br	8016f8 <__ieee754_rem_pio2+0x64>
  801b48:	b005d53a 	srai	r2,r22,20
  801b4c:	4821883a 	mov	r16,r9
  801b50:	05505c34 	movhi	r21,16752
  801b54:	15fefa84 	addi	r23,r2,-1046
  801b58:	b826953a 	slli	r19,r23,20
  801b5c:	0029883a 	mov	r20,zero
  801b60:	048000c4 	movi	r18,3
  801b64:	b4e7c83a 	sub	r19,r22,r19
  801b68:	980b883a 	mov	r5,r19
  801b6c:	0804a700 	call	804a70 <__fixdfsi>
  801b70:	1009883a 	mov	r4,r2
  801b74:	08049780 	call	804978 <__floatsidf>
  801b78:	980b883a 	mov	r5,r19
  801b7c:	8009883a 	mov	r4,r16
  801b80:	180f883a 	mov	r7,r3
  801b84:	100d883a 	mov	r6,r2
  801b88:	d8800215 	stw	r2,8(sp)
  801b8c:	d8c00315 	stw	r3,12(sp)
  801b90:	08040d00 	call	8040d0 <__subdf3>
  801b94:	180b883a 	mov	r5,r3
  801b98:	a00d883a 	mov	r6,r20
  801b9c:	a80f883a 	mov	r7,r21
  801ba0:	1009883a 	mov	r4,r2
  801ba4:	08041c40 	call	8041c4 <__muldf3>
  801ba8:	180b883a 	mov	r5,r3
  801bac:	1009883a 	mov	r4,r2
  801bb0:	1823883a 	mov	r17,r3
  801bb4:	1021883a 	mov	r16,r2
  801bb8:	0804a700 	call	804a70 <__fixdfsi>
  801bbc:	1009883a 	mov	r4,r2
  801bc0:	08049780 	call	804978 <__floatsidf>
  801bc4:	880b883a 	mov	r5,r17
  801bc8:	8009883a 	mov	r4,r16
  801bcc:	180f883a 	mov	r7,r3
  801bd0:	100d883a 	mov	r6,r2
  801bd4:	d8800415 	stw	r2,16(sp)
  801bd8:	d8c00515 	stw	r3,20(sp)
  801bdc:	08040d00 	call	8040d0 <__subdf3>
  801be0:	180b883a 	mov	r5,r3
  801be4:	000d883a 	mov	r6,zero
  801be8:	a80f883a 	mov	r7,r21
  801bec:	1009883a 	mov	r4,r2
  801bf0:	08041c40 	call	8041c4 <__muldf3>
  801bf4:	d8c00715 	stw	r3,28(sp)
  801bf8:	d8800615 	stw	r2,24(sp)
  801bfc:	00000106 	br	801c04 <__ieee754_rem_pio2+0x570>
  801c00:	8025883a 	mov	r18,r16
  801c04:	943fffc4 	addi	r16,r18,-1
  801c08:	800890fa 	slli	r4,r16,3
  801c0c:	d9400204 	addi	r5,sp,8
  801c10:	000d883a 	mov	r6,zero
  801c14:	2149883a 	add	r4,r4,r5
  801c18:	20c00117 	ldw	r3,4(r4)
  801c1c:	20800017 	ldw	r2,0(r4)
  801c20:	000f883a 	mov	r7,zero
  801c24:	180b883a 	mov	r5,r3
  801c28:	1009883a 	mov	r4,r2
  801c2c:	08047e00 	call	8047e0 <__eqdf2>
  801c30:	103ff326 	beq	r2,zero,801c00 <__ieee754_rem_pio2+0x56c>
  801c34:	00800084 	movi	r2,2
  801c38:	00c02074 	movhi	r3,129
  801c3c:	18dfd804 	addi	r3,r3,32608
  801c40:	b80d883a 	mov	r6,r23
  801c44:	900f883a 	mov	r7,r18
  801c48:	d9000204 	addi	r4,sp,8
  801c4c:	e00b883a 	mov	r5,fp
  801c50:	d8800015 	stw	r2,0(sp)
  801c54:	d8c00115 	stw	r3,4(sp)
  801c58:	08023e80 	call	8023e8 <__kernel_rem_pio2>
  801c5c:	d8800b15 	stw	r2,44(sp)
  801c60:	d8800a17 	ldw	r2,40(sp)
  801c64:	103ea40e 	bge	r2,zero,8016f8 <__ieee754_rem_pio2+0x64>
  801c68:	e0800117 	ldw	r2,4(fp)
  801c6c:	d8c00b17 	ldw	r3,44(sp)
  801c70:	e1000204 	addi	r4,fp,8
  801c74:	10a0003c 	xorhi	r2,r2,32768
  801c78:	00c7c83a 	sub	r3,zero,r3
  801c7c:	e0800115 	stw	r2,4(fp)
  801c80:	d8c00b15 	stw	r3,44(sp)
  801c84:	20c00117 	ldw	r3,4(r4)
  801c88:	18e0003c 	xorhi	r3,r3,32768
  801c8c:	20c00115 	stw	r3,4(r4)
  801c90:	003e9906 	br	8016f8 <__ieee754_rem_pio2+0x64>
  801c94:	00869834 	movhi	r2,6752
  801c98:	00cf7474 	movhi	r3,15825
  801c9c:	18ed1844 	addi	r3,r3,-19359
  801ca0:	9009883a 	mov	r4,r18
  801ca4:	980b883a 	mov	r5,r19
  801ca8:	180f883a 	mov	r7,r3
  801cac:	100d883a 	mov	r6,r2
  801cb0:	08040d00 	call	8040d0 <__subdf3>
  801cb4:	048b80f4 	movhi	r18,11779
  801cb8:	949c1cc4 	addi	r18,r18,28787
  801cbc:	04cee8f4 	movhi	r19,15267
  801cc0:	9cc66284 	addi	r19,r19,6538
  801cc4:	1009883a 	mov	r4,r2
  801cc8:	180b883a 	mov	r5,r3
  801ccc:	900d883a 	mov	r6,r18
  801cd0:	980f883a 	mov	r7,r19
  801cd4:	1021883a 	mov	r16,r2
  801cd8:	1823883a 	mov	r17,r3
  801cdc:	08040d00 	call	8040d0 <__subdf3>
  801ce0:	100d883a 	mov	r6,r2
  801ce4:	8009883a 	mov	r4,r16
  801ce8:	880b883a 	mov	r5,r17
  801cec:	180f883a 	mov	r7,r3
  801cf0:	e0800015 	stw	r2,0(fp)
  801cf4:	e0c00115 	stw	r3,4(fp)
  801cf8:	08040d00 	call	8040d0 <__subdf3>
  801cfc:	180b883a 	mov	r5,r3
  801d00:	1009883a 	mov	r4,r2
  801d04:	900d883a 	mov	r6,r18
  801d08:	980f883a 	mov	r7,r19
  801d0c:	08040d00 	call	8040d0 <__subdf3>
  801d10:	180b883a 	mov	r5,r3
  801d14:	1009883a 	mov	r4,r2
  801d18:	00c00044 	movi	r3,1
  801d1c:	d8c00b15 	stw	r3,44(sp)
  801d20:	e1400315 	stw	r5,12(fp)
  801d24:	e1000215 	stw	r4,8(fp)
  801d28:	003e7306 	br	8016f8 <__ieee754_rem_pio2+0x64>
  801d2c:	2105883a 	add	r2,r4,r4
  801d30:	1085883a 	add	r2,r2,r2
  801d34:	00c02074 	movhi	r3,129
  801d38:	18dfb804 	addi	r3,r3,32480
  801d3c:	10c5883a 	add	r2,r2,r3
  801d40:	113fff17 	ldw	r4,-4(r2)
  801d44:	b13eef26 	beq	r22,r4,801904 <__ieee754_rem_pio2+0x270>
  801d48:	980b883a 	mov	r5,r19
  801d4c:	400f883a 	mov	r7,r8
  801d50:	9009883a 	mov	r4,r18
  801d54:	800d883a 	mov	r6,r16
  801d58:	08040d00 	call	8040d0 <__subdf3>
  801d5c:	e0c00115 	stw	r3,4(fp)
  801d60:	e0800015 	stw	r2,0(fp)
  801d64:	003f3a06 	br	801a50 <__ieee754_rem_pio2+0x3bc>
  801d68:	00869834 	movhi	r2,6752
  801d6c:	00cf7474 	movhi	r3,15825
  801d70:	18ed1844 	addi	r3,r3,-19359
  801d74:	9009883a 	mov	r4,r18
  801d78:	980b883a 	mov	r5,r19
  801d7c:	180f883a 	mov	r7,r3
  801d80:	100d883a 	mov	r6,r2
  801d84:	08041500 	call	804150 <__adddf3>
  801d88:	048b80f4 	movhi	r18,11779
  801d8c:	949c1cc4 	addi	r18,r18,28787
  801d90:	04cee8f4 	movhi	r19,15267
  801d94:	9cc66284 	addi	r19,r19,6538
  801d98:	1009883a 	mov	r4,r2
  801d9c:	180b883a 	mov	r5,r3
  801da0:	900d883a 	mov	r6,r18
  801da4:	980f883a 	mov	r7,r19
  801da8:	1021883a 	mov	r16,r2
  801dac:	1823883a 	mov	r17,r3
  801db0:	08041500 	call	804150 <__adddf3>
  801db4:	100d883a 	mov	r6,r2
  801db8:	8009883a 	mov	r4,r16
  801dbc:	880b883a 	mov	r5,r17
  801dc0:	180f883a 	mov	r7,r3
  801dc4:	e0800015 	stw	r2,0(fp)
  801dc8:	e0c00115 	stw	r3,4(fp)
  801dcc:	08040d00 	call	8040d0 <__subdf3>
  801dd0:	180b883a 	mov	r5,r3
  801dd4:	1009883a 	mov	r4,r2
  801dd8:	900d883a 	mov	r6,r18
  801ddc:	980f883a 	mov	r7,r19
  801de0:	08041500 	call	804150 <__adddf3>
  801de4:	180b883a 	mov	r5,r3
  801de8:	1009883a 	mov	r4,r2
  801dec:	00ffffc4 	movi	r3,-1
  801df0:	d8c00b15 	stw	r3,44(sp)
  801df4:	e1400315 	stw	r5,12(fp)
  801df8:	e1000215 	stw	r4,8(fp)
  801dfc:	003e3e06 	br	8016f8 <__ieee754_rem_pio2+0x64>
  801e00:	d9000c17 	ldw	r4,48(sp)
  801e04:	d9400d17 	ldw	r5,52(sp)
  801e08:	018b8034 	movhi	r6,11776
  801e0c:	b80f883a 	mov	r7,r23
  801e10:	08041c40 	call	8041c4 <__muldf3>
  801e14:	d9000817 	ldw	r4,32(sp)
  801e18:	d9401217 	ldw	r5,72(sp)
  801e1c:	100d883a 	mov	r6,r2
  801e20:	180f883a 	mov	r7,r3
  801e24:	1025883a 	mov	r18,r2
  801e28:	1827883a 	mov	r19,r3
  801e2c:	08040d00 	call	8040d0 <__subdf3>
  801e30:	d9400d17 	ldw	r5,52(sp)
  801e34:	d9000c17 	ldw	r4,48(sp)
  801e38:	02094834 	movhi	r8,9504
  801e3c:	42127044 	addi	r8,r8,18881
  801e40:	024e5f34 	movhi	r9,14716
  801e44:	4a60e684 	addi	r9,r9,-31846
  801e48:	480f883a 	mov	r7,r9
  801e4c:	400d883a 	mov	r6,r8
  801e50:	182b883a 	mov	r21,r3
  801e54:	d8800e15 	stw	r2,56(sp)
  801e58:	08041c40 	call	8041c4 <__muldf3>
  801e5c:	d9000817 	ldw	r4,32(sp)
  801e60:	d9401217 	ldw	r5,72(sp)
  801e64:	d9800e17 	ldw	r6,56(sp)
  801e68:	a80f883a 	mov	r7,r21
  801e6c:	1021883a 	mov	r16,r2
  801e70:	1823883a 	mov	r17,r3
  801e74:	dd400f15 	stw	r21,60(sp)
  801e78:	08040d00 	call	8040d0 <__subdf3>
  801e7c:	180b883a 	mov	r5,r3
  801e80:	900d883a 	mov	r6,r18
  801e84:	980f883a 	mov	r7,r19
  801e88:	1009883a 	mov	r4,r2
  801e8c:	08040d00 	call	8040d0 <__subdf3>
  801e90:	180f883a 	mov	r7,r3
  801e94:	880b883a 	mov	r5,r17
  801e98:	8009883a 	mov	r4,r16
  801e9c:	100d883a 	mov	r6,r2
  801ea0:	08040d00 	call	8040d0 <__subdf3>
  801ea4:	d9000e17 	ldw	r4,56(sp)
  801ea8:	1021883a 	mov	r16,r2
  801eac:	1823883a 	mov	r17,r3
  801eb0:	a80b883a 	mov	r5,r21
  801eb4:	180f883a 	mov	r7,r3
  801eb8:	003fa606 	br	801d54 <__ieee754_rem_pio2+0x6c0>

00801ebc <__kernel_cos>:
  801ebc:	defff104 	addi	sp,sp,-60
  801ec0:	00a00034 	movhi	r2,32768
  801ec4:	10bfffc4 	addi	r2,r2,-1
  801ec8:	dd800c15 	stw	r22,48(sp)
  801ecc:	116c703a 	and	r22,r2,r5
  801ed0:	0005883a 	mov	r2,zero
  801ed4:	dd000a15 	stw	r20,40(sp)
  801ed8:	d8800215 	stw	r2,8(sp)
  801edc:	2029883a 	mov	r20,r4
  801ee0:	008f9034 	movhi	r2,15936
  801ee4:	10bfffc4 	addi	r2,r2,-1
  801ee8:	0009883a 	mov	r4,zero
  801eec:	dd400b15 	stw	r21,44(sp)
  801ef0:	dfc00e15 	stw	ra,56(sp)
  801ef4:	ddc00d15 	stw	r23,52(sp)
  801ef8:	dcc00915 	stw	r19,36(sp)
  801efc:	dc800815 	stw	r18,32(sp)
  801f00:	dc400715 	stw	r17,28(sp)
  801f04:	dc000615 	stw	r16,24(sp)
  801f08:	282b883a 	mov	r21,r5
  801f0c:	d9800415 	stw	r6,16(sp)
  801f10:	d9c00515 	stw	r7,20(sp)
  801f14:	d9000315 	stw	r4,12(sp)
  801f18:	15809216 	blt	r2,r22,802164 <__kernel_cos+0x2a8>
  801f1c:	a009883a 	mov	r4,r20
  801f20:	0804a700 	call	804a70 <__fixdfsi>
  801f24:	10011c26 	beq	r2,zero,802398 <__kernel_cos+0x4dc>
  801f28:	a009883a 	mov	r4,r20
  801f2c:	a80b883a 	mov	r5,r21
  801f30:	a00d883a 	mov	r6,r20
  801f34:	a80f883a 	mov	r7,r21
  801f38:	08041c40 	call	8041c4 <__muldf3>
  801f3c:	1021883a 	mov	r16,r2
  801f40:	1823883a 	mov	r17,r3
  801f44:	1025883a 	mov	r18,r2
  801f48:	1827883a 	mov	r19,r3
  801f4c:	00afa234 	movhi	r2,48776
  801f50:	108e3504 	addi	r2,r2,14548
  801f54:	00ef6a74 	movhi	r3,48553
  801f58:	18feba44 	addi	r3,r3,-1303
  801f5c:	8009883a 	mov	r4,r16
  801f60:	880b883a 	mov	r5,r17
  801f64:	180f883a 	mov	r7,r3
  801f68:	100d883a 	mov	r6,r2
  801f6c:	08041c40 	call	8041c4 <__muldf3>
  801f70:	022f6d74 	movhi	r8,48565
  801f74:	422c7104 	addi	r8,r8,-20028
  801f78:	024f88b4 	movhi	r9,15906
  801f7c:	4a7ba784 	addi	r9,r9,-4450
  801f80:	480f883a 	mov	r7,r9
  801f84:	400d883a 	mov	r6,r8
  801f88:	180b883a 	mov	r5,r3
  801f8c:	1009883a 	mov	r4,r2
  801f90:	08041500 	call	804150 <__adddf3>
  801f94:	180f883a 	mov	r7,r3
  801f98:	8009883a 	mov	r4,r16
  801f9c:	880b883a 	mov	r5,r17
  801fa0:	100d883a 	mov	r6,r2
  801fa4:	08041c40 	call	8041c4 <__muldf3>
  801fa8:	02202734 	movhi	r8,32924
  801fac:	4214ab44 	addi	r8,r8,21165
  801fb0:	024fa4b4 	movhi	r9,16018
  801fb4:	4a5f93c4 	addi	r9,r9,32335
  801fb8:	480f883a 	mov	r7,r9
  801fbc:	400d883a 	mov	r6,r8
  801fc0:	180b883a 	mov	r5,r3
  801fc4:	1009883a 	mov	r4,r2
  801fc8:	08040d00 	call	8040d0 <__subdf3>
  801fcc:	180f883a 	mov	r7,r3
  801fd0:	8009883a 	mov	r4,r16
  801fd4:	880b883a 	mov	r5,r17
  801fd8:	100d883a 	mov	r6,r2
  801fdc:	08041c40 	call	8041c4 <__muldf3>
  801fe0:	020672f4 	movhi	r8,6603
  801fe4:	42056404 	addi	r8,r8,5520
  801fe8:	024fbeb4 	movhi	r9,16122
  801fec:	4a406804 	addi	r9,r9,416
  801ff0:	480f883a 	mov	r7,r9
  801ff4:	400d883a 	mov	r6,r8
  801ff8:	180b883a 	mov	r5,r3
  801ffc:	1009883a 	mov	r4,r2
  802000:	08041500 	call	804150 <__adddf3>
  802004:	180f883a 	mov	r7,r3
  802008:	8009883a 	mov	r4,r16
  80200c:	880b883a 	mov	r5,r17
  802010:	100d883a 	mov	r6,r2
  802014:	08041c40 	call	8041c4 <__muldf3>
  802018:	0205b074 	movhi	r8,5825
  80201c:	42145dc4 	addi	r8,r8,20855
  802020:	024fd5f4 	movhi	r9,16215
  802024:	4a705b04 	addi	r9,r9,-16020
  802028:	480f883a 	mov	r7,r9
  80202c:	400d883a 	mov	r6,r8
  802030:	180b883a 	mov	r5,r3
  802034:	1009883a 	mov	r4,r2
  802038:	08040d00 	call	8040d0 <__subdf3>
  80203c:	180f883a 	mov	r7,r3
  802040:	8009883a 	mov	r4,r16
  802044:	880b883a 	mov	r5,r17
  802048:	100d883a 	mov	r6,r2
  80204c:	08041c40 	call	8041c4 <__muldf3>
  802050:	02155574 	movhi	r8,21845
  802054:	42155304 	addi	r8,r8,21836
  802058:	024fe974 	movhi	r9,16293
  80205c:	4a555544 	addi	r9,r9,21845
  802060:	480f883a 	mov	r7,r9
  802064:	400d883a 	mov	r6,r8
  802068:	180b883a 	mov	r5,r3
  80206c:	1009883a 	mov	r4,r2
  802070:	08041500 	call	804150 <__adddf3>
  802074:	180f883a 	mov	r7,r3
  802078:	880b883a 	mov	r5,r17
  80207c:	8009883a 	mov	r4,r16
  802080:	100d883a 	mov	r6,r2
  802084:	08041c40 	call	8041c4 <__muldf3>
  802088:	1021883a 	mov	r16,r2
  80208c:	1823883a 	mov	r17,r3
  802090:	0005883a 	mov	r2,zero
  802094:	00cff834 	movhi	r3,16352
  802098:	9009883a 	mov	r4,r18
  80209c:	980b883a 	mov	r5,r19
  8020a0:	180f883a 	mov	r7,r3
  8020a4:	100d883a 	mov	r6,r2
  8020a8:	08041c40 	call	8041c4 <__muldf3>
  8020ac:	980b883a 	mov	r5,r19
  8020b0:	880f883a 	mov	r7,r17
  8020b4:	9009883a 	mov	r4,r18
  8020b8:	800d883a 	mov	r6,r16
  8020bc:	1025883a 	mov	r18,r2
  8020c0:	1827883a 	mov	r19,r3
  8020c4:	08041c40 	call	8041c4 <__muldf3>
  8020c8:	d9c00517 	ldw	r7,20(sp)
  8020cc:	d9800417 	ldw	r6,16(sp)
  8020d0:	a80b883a 	mov	r5,r21
  8020d4:	a009883a 	mov	r4,r20
  8020d8:	1021883a 	mov	r16,r2
  8020dc:	1823883a 	mov	r17,r3
  8020e0:	08041c40 	call	8041c4 <__muldf3>
  8020e4:	180f883a 	mov	r7,r3
  8020e8:	880b883a 	mov	r5,r17
  8020ec:	8009883a 	mov	r4,r16
  8020f0:	100d883a 	mov	r6,r2
  8020f4:	08040d00 	call	8040d0 <__subdf3>
  8020f8:	180f883a 	mov	r7,r3
  8020fc:	980b883a 	mov	r5,r19
  802100:	9009883a 	mov	r4,r18
  802104:	100d883a 	mov	r6,r2
  802108:	08040d00 	call	8040d0 <__subdf3>
  80210c:	0011883a 	mov	r8,zero
  802110:	024ffc34 	movhi	r9,16368
  802114:	480b883a 	mov	r5,r9
  802118:	180f883a 	mov	r7,r3
  80211c:	4009883a 	mov	r4,r8
  802120:	100d883a 	mov	r6,r2
  802124:	08040d00 	call	8040d0 <__subdf3>
  802128:	100d883a 	mov	r6,r2
  80212c:	180f883a 	mov	r7,r3
  802130:	3005883a 	mov	r2,r6
  802134:	3807883a 	mov	r3,r7
  802138:	dfc00e17 	ldw	ra,56(sp)
  80213c:	ddc00d17 	ldw	r23,52(sp)
  802140:	dd800c17 	ldw	r22,48(sp)
  802144:	dd400b17 	ldw	r21,44(sp)
  802148:	dd000a17 	ldw	r20,40(sp)
  80214c:	dcc00917 	ldw	r19,36(sp)
  802150:	dc800817 	ldw	r18,32(sp)
  802154:	dc400717 	ldw	r17,28(sp)
  802158:	dc000617 	ldw	r16,24(sp)
  80215c:	dec00f04 	addi	sp,sp,60
  802160:	f800283a 	ret
  802164:	280f883a 	mov	r7,r5
  802168:	a009883a 	mov	r4,r20
  80216c:	a00d883a 	mov	r6,r20
  802170:	08041c40 	call	8041c4 <__muldf3>
  802174:	1021883a 	mov	r16,r2
  802178:	1823883a 	mov	r17,r3
  80217c:	1025883a 	mov	r18,r2
  802180:	1827883a 	mov	r19,r3
  802184:	00afa234 	movhi	r2,48776
  802188:	108e3504 	addi	r2,r2,14548
  80218c:	00ef6a74 	movhi	r3,48553
  802190:	18feba44 	addi	r3,r3,-1303
  802194:	8009883a 	mov	r4,r16
  802198:	880b883a 	mov	r5,r17
  80219c:	180f883a 	mov	r7,r3
  8021a0:	100d883a 	mov	r6,r2
  8021a4:	08041c40 	call	8041c4 <__muldf3>
  8021a8:	022f6d74 	movhi	r8,48565
  8021ac:	422c7104 	addi	r8,r8,-20028
  8021b0:	024f88b4 	movhi	r9,15906
  8021b4:	4a7ba784 	addi	r9,r9,-4450
  8021b8:	480f883a 	mov	r7,r9
  8021bc:	400d883a 	mov	r6,r8
  8021c0:	180b883a 	mov	r5,r3
  8021c4:	1009883a 	mov	r4,r2
  8021c8:	08041500 	call	804150 <__adddf3>
  8021cc:	180f883a 	mov	r7,r3
  8021d0:	8009883a 	mov	r4,r16
  8021d4:	880b883a 	mov	r5,r17
  8021d8:	100d883a 	mov	r6,r2
  8021dc:	08041c40 	call	8041c4 <__muldf3>
  8021e0:	02202734 	movhi	r8,32924
  8021e4:	4214ab44 	addi	r8,r8,21165
  8021e8:	024fa4b4 	movhi	r9,16018
  8021ec:	4a5f93c4 	addi	r9,r9,32335
  8021f0:	480f883a 	mov	r7,r9
  8021f4:	400d883a 	mov	r6,r8
  8021f8:	180b883a 	mov	r5,r3
  8021fc:	1009883a 	mov	r4,r2
  802200:	08040d00 	call	8040d0 <__subdf3>
  802204:	180f883a 	mov	r7,r3
  802208:	8009883a 	mov	r4,r16
  80220c:	880b883a 	mov	r5,r17
  802210:	100d883a 	mov	r6,r2
  802214:	08041c40 	call	8041c4 <__muldf3>
  802218:	020672f4 	movhi	r8,6603
  80221c:	42056404 	addi	r8,r8,5520
  802220:	024fbeb4 	movhi	r9,16122
  802224:	4a406804 	addi	r9,r9,416
  802228:	480f883a 	mov	r7,r9
  80222c:	400d883a 	mov	r6,r8
  802230:	180b883a 	mov	r5,r3
  802234:	1009883a 	mov	r4,r2
  802238:	08041500 	call	804150 <__adddf3>
  80223c:	180f883a 	mov	r7,r3
  802240:	8009883a 	mov	r4,r16
  802244:	880b883a 	mov	r5,r17
  802248:	100d883a 	mov	r6,r2
  80224c:	08041c40 	call	8041c4 <__muldf3>
  802250:	0205b074 	movhi	r8,5825
  802254:	42145dc4 	addi	r8,r8,20855
  802258:	024fd5f4 	movhi	r9,16215
  80225c:	4a705b04 	addi	r9,r9,-16020
  802260:	480f883a 	mov	r7,r9
  802264:	400d883a 	mov	r6,r8
  802268:	180b883a 	mov	r5,r3
  80226c:	1009883a 	mov	r4,r2
  802270:	08040d00 	call	8040d0 <__subdf3>
  802274:	180f883a 	mov	r7,r3
  802278:	8009883a 	mov	r4,r16
  80227c:	880b883a 	mov	r5,r17
  802280:	100d883a 	mov	r6,r2
  802284:	08041c40 	call	8041c4 <__muldf3>
  802288:	02155574 	movhi	r8,21845
  80228c:	42155304 	addi	r8,r8,21836
  802290:	024fe974 	movhi	r9,16293
  802294:	4a555544 	addi	r9,r9,21845
  802298:	480f883a 	mov	r7,r9
  80229c:	400d883a 	mov	r6,r8
  8022a0:	180b883a 	mov	r5,r3
  8022a4:	1009883a 	mov	r4,r2
  8022a8:	08041500 	call	804150 <__adddf3>
  8022ac:	180f883a 	mov	r7,r3
  8022b0:	880b883a 	mov	r5,r17
  8022b4:	8009883a 	mov	r4,r16
  8022b8:	100d883a 	mov	r6,r2
  8022bc:	08041c40 	call	8041c4 <__muldf3>
  8022c0:	1021883a 	mov	r16,r2
  8022c4:	008ff4f4 	movhi	r2,16339
  8022c8:	108ccc84 	addi	r2,r2,13106
  8022cc:	1823883a 	mov	r17,r3
  8022d0:	15bf6f0e 	bge	r2,r22,802090 <__kernel_cos+0x1d4>
  8022d4:	008ffa74 	movhi	r2,16361
  8022d8:	1580320e 	bge	r2,r22,8023a4 <__kernel_cos+0x4e8>
  8022dc:	0005883a 	mov	r2,zero
  8022e0:	010ff9f4 	movhi	r4,16359
  8022e4:	002d883a 	mov	r22,zero
  8022e8:	d8800015 	stw	r2,0(sp)
  8022ec:	05cff4b4 	movhi	r23,16338
  8022f0:	d9000115 	stw	r4,4(sp)
  8022f4:	0005883a 	mov	r2,zero
  8022f8:	00cff834 	movhi	r3,16352
  8022fc:	9009883a 	mov	r4,r18
  802300:	980b883a 	mov	r5,r19
  802304:	180f883a 	mov	r7,r3
  802308:	100d883a 	mov	r6,r2
  80230c:	08041c40 	call	8041c4 <__muldf3>
  802310:	180b883a 	mov	r5,r3
  802314:	b80f883a 	mov	r7,r23
  802318:	1009883a 	mov	r4,r2
  80231c:	b00d883a 	mov	r6,r22
  802320:	08040d00 	call	8040d0 <__subdf3>
  802324:	980b883a 	mov	r5,r19
  802328:	880f883a 	mov	r7,r17
  80232c:	9009883a 	mov	r4,r18
  802330:	800d883a 	mov	r6,r16
  802334:	1025883a 	mov	r18,r2
  802338:	1827883a 	mov	r19,r3
  80233c:	08041c40 	call	8041c4 <__muldf3>
  802340:	d9c00517 	ldw	r7,20(sp)
  802344:	d9800417 	ldw	r6,16(sp)
  802348:	a80b883a 	mov	r5,r21
  80234c:	a009883a 	mov	r4,r20
  802350:	1021883a 	mov	r16,r2
  802354:	1823883a 	mov	r17,r3
  802358:	08041c40 	call	8041c4 <__muldf3>
  80235c:	180f883a 	mov	r7,r3
  802360:	880b883a 	mov	r5,r17
  802364:	8009883a 	mov	r4,r16
  802368:	100d883a 	mov	r6,r2
  80236c:	08040d00 	call	8040d0 <__subdf3>
  802370:	180f883a 	mov	r7,r3
  802374:	980b883a 	mov	r5,r19
  802378:	9009883a 	mov	r4,r18
  80237c:	100d883a 	mov	r6,r2
  802380:	08040d00 	call	8040d0 <__subdf3>
  802384:	d9400117 	ldw	r5,4(sp)
  802388:	d9000017 	ldw	r4,0(sp)
  80238c:	180f883a 	mov	r7,r3
  802390:	100d883a 	mov	r6,r2
  802394:	003f6306 	br	802124 <__kernel_cos+0x268>
  802398:	000d883a 	mov	r6,zero
  80239c:	01cffc34 	movhi	r7,16368
  8023a0:	003f6306 	br	802130 <__kernel_cos+0x274>
  8023a4:	00bff834 	movhi	r2,65504
  8023a8:	b0ad883a 	add	r22,r22,r2
  8023ac:	dd800315 	stw	r22,12(sp)
  8023b0:	d9000317 	ldw	r4,12(sp)
  8023b4:	0005883a 	mov	r2,zero
  8023b8:	00cffc34 	movhi	r3,16368
  8023bc:	002d883a 	mov	r22,zero
  8023c0:	200f883a 	mov	r7,r4
  8023c4:	202f883a 	mov	r23,r4
  8023c8:	180b883a 	mov	r5,r3
  8023cc:	1009883a 	mov	r4,r2
  8023d0:	b00d883a 	mov	r6,r22
  8023d4:	d8800215 	stw	r2,8(sp)
  8023d8:	08040d00 	call	8040d0 <__subdf3>
  8023dc:	d8800015 	stw	r2,0(sp)
  8023e0:	d8c00115 	stw	r3,4(sp)
  8023e4:	003fc306 	br	8022f4 <__kernel_cos+0x438>

008023e8 <__kernel_rem_pio2>:
  8023e8:	deff5304 	addi	sp,sp,-692
  8023ec:	d880ad17 	ldw	r2,692(sp)
  8023f0:	d9009615 	stw	r4,600(sp)
  8023f4:	d9409715 	stw	r5,604(sp)
  8023f8:	1087883a 	add	r3,r2,r2
  8023fc:	18c7883a 	add	r3,r3,r3
  802400:	008020b4 	movhi	r2,130
  802404:	10a01a04 	addi	r2,r2,-32664
  802408:	1887883a 	add	r3,r3,r2
  80240c:	18c00017 	ldw	r3,0(r3)
  802410:	313fff44 	addi	r4,r6,-3
  802414:	01400604 	movi	r5,24
  802418:	df00ab15 	stw	fp,684(sp)
  80241c:	dc00a315 	stw	r16,652(sp)
  802420:	d8c09515 	stw	r3,596(sp)
  802424:	dfc0ac15 	stw	ra,688(sp)
  802428:	ddc0aa15 	stw	r23,680(sp)
  80242c:	dd80a915 	stw	r22,676(sp)
  802430:	dd40a815 	stw	r21,672(sp)
  802434:	dd00a715 	stw	r20,668(sp)
  802438:	dcc0a615 	stw	r19,664(sp)
  80243c:	dc80a515 	stw	r18,660(sp)
  802440:	dc40a415 	stw	r17,656(sp)
  802444:	3021883a 	mov	r16,r6
  802448:	d9c09815 	stw	r7,608(sp)
  80244c:	0804bfc0 	call	804bfc <__divsi3>
  802450:	d8c09817 	ldw	r3,608(sp)
  802454:	d8808c15 	stw	r2,560(sp)
  802458:	1f3fffc4 	addi	fp,r3,-1
  80245c:	10031816 	blt	r2,zero,8030c0 <__kernel_rem_pio2+0xcd8>
  802460:	d9008c17 	ldw	r4,560(sp)
  802464:	d9409517 	ldw	r5,596(sp)
  802468:	20bffa24 	muli	r2,r4,-24
  80246c:	2f07883a 	add	r3,r5,fp
  802470:	8085883a 	add	r2,r16,r2
  802474:	10bffa04 	addi	r2,r2,-24
  802478:	d8809315 	stw	r2,588(sp)
  80247c:	18001516 	blt	r3,zero,8024d4 <__kernel_rem_pio2+0xec>
  802480:	2721c83a 	sub	r16,r4,fp
  802484:	d980ae17 	ldw	r6,696(sp)
  802488:	8405883a 	add	r2,r16,r16
  80248c:	1085883a 	add	r2,r2,r2
  802490:	30a3883a 	add	r17,r6,r2
  802494:	80e7883a 	add	r19,r16,r3
  802498:	dc801404 	addi	r18,sp,80
  80249c:	00000106 	br	8024a4 <__kernel_rem_pio2+0xbc>
  8024a0:	84000044 	addi	r16,r16,1
  8024a4:	0009883a 	mov	r4,zero
  8024a8:	000b883a 	mov	r5,zero
  8024ac:	80000416 	blt	r16,zero,8024c0 <__kernel_rem_pio2+0xd8>
  8024b0:	89000017 	ldw	r4,0(r17)
  8024b4:	08049780 	call	804978 <__floatsidf>
  8024b8:	1009883a 	mov	r4,r2
  8024bc:	180b883a 	mov	r5,r3
  8024c0:	91400115 	stw	r5,4(r18)
  8024c4:	91000015 	stw	r4,0(r18)
  8024c8:	8c400104 	addi	r17,r17,4
  8024cc:	94800204 	addi	r18,r18,8
  8024d0:	84fff31e 	bne	r16,r19,8024a0 <__kernel_rem_pio2+0xb8>
  8024d4:	d9c09517 	ldw	r7,596(sp)
  8024d8:	38002416 	blt	r7,zero,80256c <__kernel_rem_pio2+0x184>
  8024dc:	da809817 	ldw	r10,608(sp)
  8024e0:	e029883a 	mov	r20,fp
  8024e4:	dd406404 	addi	r21,sp,400
  8024e8:	3aaf883a 	add	r23,r7,r10
  8024ec:	e02c403a 	cmpge	r22,fp,zero
  8024f0:	b0023e26 	beq	r22,zero,802dec <__kernel_rem_pio2+0xa04>
  8024f4:	dcc09617 	ldw	r19,600(sp)
  8024f8:	0021883a 	mov	r16,zero
  8024fc:	0025883a 	mov	r18,zero
  802500:	0023883a 	mov	r17,zero
  802504:	a489c83a 	sub	r4,r20,r18
  802508:	200890fa 	slli	r4,r4,3
  80250c:	99800017 	ldw	r6,0(r19)
  802510:	99c00117 	ldw	r7,4(r19)
  802514:	26c9883a 	add	r4,r4,sp
  802518:	20c01517 	ldw	r3,84(r4)
  80251c:	20801417 	ldw	r2,80(r4)
  802520:	94800044 	addi	r18,r18,1
  802524:	180b883a 	mov	r5,r3
  802528:	1009883a 	mov	r4,r2
  80252c:	08041c40 	call	8041c4 <__muldf3>
  802530:	180f883a 	mov	r7,r3
  802534:	880b883a 	mov	r5,r17
  802538:	8009883a 	mov	r4,r16
  80253c:	100d883a 	mov	r6,r2
  802540:	08041500 	call	804150 <__adddf3>
  802544:	1021883a 	mov	r16,r2
  802548:	d8809817 	ldw	r2,608(sp)
  80254c:	9cc00204 	addi	r19,r19,8
  802550:	1823883a 	mov	r17,r3
  802554:	14bfeb1e 	bne	r2,r18,802504 <__kernel_rem_pio2+0x11c>
  802558:	a5000044 	addi	r20,r20,1
  80255c:	ac400115 	stw	r17,4(r21)
  802560:	ac000015 	stw	r16,0(r21)
  802564:	ad400204 	addi	r21,r21,8
  802568:	a5ffe11e 	bne	r20,r23,8024f0 <__kernel_rem_pio2+0x108>
  80256c:	d8c09517 	ldw	r3,596(sp)
  802570:	d9409317 	ldw	r5,588(sp)
  802574:	e038403a 	cmpge	fp,fp,zero
  802578:	d8c08d15 	stw	r3,564(sp)
  80257c:	d9008d17 	ldw	r4,564(sp)
  802580:	18c5883a 	add	r2,r3,r3
  802584:	10c7883a 	add	r3,r2,r3
  802588:	1907883a 	add	r3,r3,r4
  80258c:	1085883a 	add	r2,r2,r2
  802590:	16c5883a 	add	r2,r2,sp
  802594:	1ec7883a 	add	r3,r3,sp
  802598:	29400050 	cmplti	r5,r5,1
  80259c:	df00a215 	stw	fp,648(sp)
  8025a0:	d8809915 	stw	r2,612(sp)
  8025a4:	d8c0a115 	stw	r3,644(sp)
  8025a8:	d940a015 	stw	r5,640(sp)
  8025ac:	d9808d17 	ldw	r6,564(sp)
  8025b0:	300490fa 	slli	r2,r6,3
  8025b4:	16c5883a 	add	r2,r2,sp
  8025b8:	15006417 	ldw	r20,400(r2)
  8025bc:	15406517 	ldw	r21,404(r2)
  8025c0:	01802e0e 	bge	zero,r6,80267c <__kernel_rem_pio2+0x294>
  8025c4:	102d883a 	mov	r22,r2
  8025c8:	302f883a 	mov	r23,r6
  8025cc:	d839883a 	mov	fp,sp
  8025d0:	0005883a 	mov	r2,zero
  8025d4:	00cf9c34 	movhi	r3,15984
  8025d8:	180f883a 	mov	r7,r3
  8025dc:	100d883a 	mov	r6,r2
  8025e0:	a009883a 	mov	r4,r20
  8025e4:	a80b883a 	mov	r5,r21
  8025e8:	08041c40 	call	8041c4 <__muldf3>
  8025ec:	180b883a 	mov	r5,r3
  8025f0:	1009883a 	mov	r4,r2
  8025f4:	0804a700 	call	804a70 <__fixdfsi>
  8025f8:	1009883a 	mov	r4,r2
  8025fc:	08049780 	call	804978 <__floatsidf>
  802600:	1021883a 	mov	r16,r2
  802604:	1823883a 	mov	r17,r3
  802608:	0005883a 	mov	r2,zero
  80260c:	00f05c34 	movhi	r3,49520
  802610:	180f883a 	mov	r7,r3
  802614:	8009883a 	mov	r4,r16
  802618:	880b883a 	mov	r5,r17
  80261c:	100d883a 	mov	r6,r2
  802620:	08041c40 	call	8041c4 <__muldf3>
  802624:	180b883a 	mov	r5,r3
  802628:	a80f883a 	mov	r7,r21
  80262c:	a00d883a 	mov	r6,r20
  802630:	1009883a 	mov	r4,r2
  802634:	08041500 	call	804150 <__adddf3>
  802638:	180b883a 	mov	r5,r3
  80263c:	1009883a 	mov	r4,r2
  802640:	0804a700 	call	804a70 <__fixdfsi>
  802644:	e0800015 	stw	r2,0(fp)
  802648:	b5bffe04 	addi	r22,r22,-8
  80264c:	b0806417 	ldw	r2,400(r22)
  802650:	b0c06517 	ldw	r3,404(r22)
  802654:	8009883a 	mov	r4,r16
  802658:	880b883a 	mov	r5,r17
  80265c:	180f883a 	mov	r7,r3
  802660:	100d883a 	mov	r6,r2
  802664:	08041500 	call	804150 <__adddf3>
  802668:	bdffffc4 	addi	r23,r23,-1
  80266c:	e7000104 	addi	fp,fp,4
  802670:	1029883a 	mov	r20,r2
  802674:	182b883a 	mov	r21,r3
  802678:	b83fd51e 	bne	r23,zero,8025d0 <__kernel_rem_pio2+0x1e8>
  80267c:	d9809317 	ldw	r6,588(sp)
  802680:	a80b883a 	mov	r5,r21
  802684:	a009883a 	mov	r4,r20
  802688:	08037b80 	call	8037b8 <scalbn>
  80268c:	0009883a 	mov	r4,zero
  802690:	014ff034 	movhi	r5,16320
  802694:	280f883a 	mov	r7,r5
  802698:	200d883a 	mov	r6,r4
  80269c:	180b883a 	mov	r5,r3
  8026a0:	1009883a 	mov	r4,r2
  8026a4:	1021883a 	mov	r16,r2
  8026a8:	1823883a 	mov	r17,r3
  8026ac:	08041c40 	call	8041c4 <__muldf3>
  8026b0:	180b883a 	mov	r5,r3
  8026b4:	1009883a 	mov	r4,r2
  8026b8:	08035940 	call	803594 <floor>
  8026bc:	0011883a 	mov	r8,zero
  8026c0:	02700834 	movhi	r9,49184
  8026c4:	480f883a 	mov	r7,r9
  8026c8:	400d883a 	mov	r6,r8
  8026cc:	180b883a 	mov	r5,r3
  8026d0:	1009883a 	mov	r4,r2
  8026d4:	08041c40 	call	8041c4 <__muldf3>
  8026d8:	180f883a 	mov	r7,r3
  8026dc:	100d883a 	mov	r6,r2
  8026e0:	880b883a 	mov	r5,r17
  8026e4:	8009883a 	mov	r4,r16
  8026e8:	08041500 	call	804150 <__adddf3>
  8026ec:	180b883a 	mov	r5,r3
  8026f0:	1009883a 	mov	r4,r2
  8026f4:	1823883a 	mov	r17,r3
  8026f8:	1021883a 	mov	r16,r2
  8026fc:	0804a700 	call	804a70 <__fixdfsi>
  802700:	1009883a 	mov	r4,r2
  802704:	d8809415 	stw	r2,592(sp)
  802708:	08049780 	call	804978 <__floatsidf>
  80270c:	880b883a 	mov	r5,r17
  802710:	8009883a 	mov	r4,r16
  802714:	180f883a 	mov	r7,r3
  802718:	100d883a 	mov	r6,r2
  80271c:	08040d00 	call	8040d0 <__subdf3>
  802720:	d9c0a017 	ldw	r7,640(sp)
  802724:	180d883a 	mov	r6,r3
  802728:	1021883a 	mov	r16,r2
  80272c:	1823883a 	mov	r17,r3
  802730:	38017d1e 	bne	r7,zero,802d28 <__kernel_rem_pio2+0x940>
  802734:	da808d17 	ldw	r10,564(sp)
  802738:	d9009317 	ldw	r4,588(sp)
  80273c:	00c00604 	movi	r3,24
  802740:	50bfffc4 	addi	r2,r10,-1
  802744:	1085883a 	add	r2,r2,r2
  802748:	1085883a 	add	r2,r2,r2
  80274c:	16c5883a 	add	r2,r2,sp
  802750:	11400017 	ldw	r5,0(r2)
  802754:	1907c83a 	sub	r3,r3,r4
  802758:	d9c09317 	ldw	r7,588(sp)
  80275c:	28cdd83a 	sra	r6,r5,r3
  802760:	010005c4 	movi	r4,23
  802764:	da809417 	ldw	r10,592(sp)
  802768:	30c6983a 	sll	r3,r6,r3
  80276c:	21c9c83a 	sub	r4,r4,r7
  802770:	5195883a 	add	r10,r10,r6
  802774:	28cbc83a 	sub	r5,r5,r3
  802778:	2909d83a 	sra	r4,r5,r4
  80277c:	da809415 	stw	r10,592(sp)
  802780:	11400015 	stw	r5,0(r2)
  802784:	d9009215 	stw	r4,584(sp)
  802788:	d9409217 	ldw	r5,584(sp)
  80278c:	0140270e 	bge	zero,r5,80282c <__kernel_rem_pio2+0x444>
  802790:	d9809417 	ldw	r6,592(sp)
  802794:	d9c08d17 	ldw	r7,564(sp)
  802798:	31800044 	addi	r6,r6,1
  80279c:	d9809415 	stw	r6,592(sp)
  8027a0:	01c1a50e 	bge	zero,r7,802e38 <__kernel_rem_pio2+0xa50>
  8027a4:	002d883a 	mov	r22,zero
  8027a8:	000b883a 	mov	r5,zero
  8027ac:	d809883a 	mov	r4,sp
  8027b0:	01c04034 	movhi	r7,256
  8027b4:	01804034 	movhi	r6,256
  8027b8:	31bfffc4 	addi	r6,r6,-1
  8027bc:	00000806 	br	8027e0 <__kernel_rem_pio2+0x3f8>
  8027c0:	38c5c83a 	sub	r2,r7,r3
  8027c4:	18000226 	beq	r3,zero,8027d0 <__kernel_rem_pio2+0x3e8>
  8027c8:	05800044 	movi	r22,1
  8027cc:	20800015 	stw	r2,0(r4)
  8027d0:	da808d17 	ldw	r10,564(sp)
  8027d4:	29400044 	addi	r5,r5,1
  8027d8:	21000104 	addi	r4,r4,4
  8027dc:	51400926 	beq	r10,r5,802804 <__kernel_rem_pio2+0x41c>
  8027e0:	b004c03a 	cmpne	r2,r22,zero
  8027e4:	20c00017 	ldw	r3,0(r4)
  8027e8:	103ff526 	beq	r2,zero,8027c0 <__kernel_rem_pio2+0x3d8>
  8027ec:	da808d17 	ldw	r10,564(sp)
  8027f0:	30c5c83a 	sub	r2,r6,r3
  8027f4:	29400044 	addi	r5,r5,1
  8027f8:	20800015 	stw	r2,0(r4)
  8027fc:	21000104 	addi	r4,r4,4
  802800:	517ff71e 	bne	r10,r5,8027e0 <__kernel_rem_pio2+0x3f8>
  802804:	d880a017 	ldw	r2,640(sp)
  802808:	1000051e 	bne	r2,zero,802820 <__kernel_rem_pio2+0x438>
  80280c:	d8c09317 	ldw	r3,588(sp)
  802810:	00800044 	movi	r2,1
  802814:	18814e26 	beq	r3,r2,802d50 <__kernel_rem_pio2+0x968>
  802818:	00800084 	movi	r2,2
  80281c:	18815826 	beq	r3,r2,802d80 <__kernel_rem_pio2+0x998>
  802820:	d9c09217 	ldw	r7,584(sp)
  802824:	00800084 	movi	r2,2
  802828:	38806926 	beq	r7,r2,8029d0 <__kernel_rem_pio2+0x5e8>
  80282c:	000d883a 	mov	r6,zero
  802830:	000f883a 	mov	r7,zero
  802834:	8009883a 	mov	r4,r16
  802838:	880b883a 	mov	r5,r17
  80283c:	08047e00 	call	8047e0 <__eqdf2>
  802840:	1000811e 	bne	r2,zero,802a48 <__kernel_rem_pio2+0x660>
  802844:	da808d17 	ldw	r10,564(sp)
  802848:	d8809517 	ldw	r2,596(sp)
  80284c:	51bfffc4 	addi	r6,r10,-1
  802850:	30800c16 	blt	r6,r2,802884 <__kernel_rem_pio2+0x49c>
  802854:	3185883a 	add	r2,r6,r6
  802858:	1085883a 	add	r2,r2,r2
  80285c:	16c9883a 	add	r4,r2,sp
  802860:	3007883a 	mov	r3,r6
  802864:	000b883a 	mov	r5,zero
  802868:	20800017 	ldw	r2,0(r4)
  80286c:	d9c09517 	ldw	r7,596(sp)
  802870:	18ffffc4 	addi	r3,r3,-1
  802874:	213fff04 	addi	r4,r4,-4
  802878:	288ab03a 	or	r5,r5,r2
  80287c:	19fffa0e 	bge	r3,r7,802868 <__kernel_rem_pio2+0x480>
  802880:	2800791e 	bne	r5,zero,802a68 <__kernel_rem_pio2+0x680>
  802884:	da809917 	ldw	r10,612(sp)
  802888:	50bfff17 	ldw	r2,-4(r10)
  80288c:	1001511e 	bne	r2,zero,802dd4 <__kernel_rem_pio2+0x9ec>
  802890:	d880a117 	ldw	r2,644(sp)
  802894:	01000044 	movi	r4,1
  802898:	10ffff04 	addi	r3,r2,-4
  80289c:	18ffff04 	addi	r3,r3,-4
  8028a0:	18800017 	ldw	r2,0(r3)
  8028a4:	21000044 	addi	r4,r4,1
  8028a8:	103ffc26 	beq	r2,zero,80289c <__kernel_rem_pio2+0x4b4>
  8028ac:	d8c08d17 	ldw	r3,564(sp)
  8028b0:	192f883a 	add	r23,r3,r4
  8028b4:	1f000044 	addi	fp,r3,1
  8028b8:	bf00020e 	bge	r23,fp,8028c4 <__kernel_rem_pio2+0x4dc>
  8028bc:	ddc08d15 	stw	r23,564(sp)
  8028c0:	003f3a06 	br	8025ac <__kernel_rem_pio2+0x1c4>
  8028c4:	d9408c17 	ldw	r5,560(sp)
  8028c8:	d9009817 	ldw	r4,608(sp)
  8028cc:	da80ae17 	ldw	r10,696(sp)
  8028d0:	1945883a 	add	r2,r3,r5
  8028d4:	190f883a 	add	r7,r3,r4
  8028d8:	1085883a 	add	r2,r2,r2
  8028dc:	380a90fa 	slli	r5,r7,3
  8028e0:	e00c90fa 	slli	r6,fp,3
  8028e4:	1085883a 	add	r2,r2,r2
  8028e8:	5085883a 	add	r2,r10,r2
  8028ec:	d8c01404 	addi	r3,sp,80
  8028f0:	d9006404 	addi	r4,sp,400
  8028f4:	10800104 	addi	r2,r2,4
  8028f8:	196b883a 	add	r21,r3,r5
  8028fc:	21a1883a 	add	r16,r4,r6
  802900:	d8809115 	stw	r2,580(sp)
  802904:	d9c09015 	stw	r7,576(sp)
  802908:	d8809117 	ldw	r2,580(sp)
  80290c:	11000017 	ldw	r4,0(r2)
  802910:	08049780 	call	804978 <__floatsidf>
  802914:	a8c00115 	stw	r3,4(r21)
  802918:	d8c0a217 	ldw	r3,648(sp)
  80291c:	a8800015 	stw	r2,0(r21)
  802920:	18002826 	beq	r3,zero,8029c4 <__kernel_rem_pio2+0x5dc>
  802924:	d9009017 	ldw	r4,576(sp)
  802928:	dd009617 	ldw	r20,600(sp)
  80292c:	0023883a 	mov	r17,zero
  802930:	200490fa 	slli	r2,r4,3
  802934:	002d883a 	mov	r22,zero
  802938:	0025883a 	mov	r18,zero
  80293c:	16e7883a 	add	r19,r2,sp
  802940:	98801417 	ldw	r2,80(r19)
  802944:	98c01517 	ldw	r3,84(r19)
  802948:	a1800017 	ldw	r6,0(r20)
  80294c:	a1c00117 	ldw	r7,4(r20)
  802950:	180b883a 	mov	r5,r3
  802954:	1009883a 	mov	r4,r2
  802958:	08041c40 	call	8041c4 <__muldf3>
  80295c:	180f883a 	mov	r7,r3
  802960:	900b883a 	mov	r5,r18
  802964:	8809883a 	mov	r4,r17
  802968:	100d883a 	mov	r6,r2
  80296c:	08041500 	call	804150 <__adddf3>
  802970:	d9409817 	ldw	r5,608(sp)
  802974:	b5800044 	addi	r22,r22,1
  802978:	9cfffe04 	addi	r19,r19,-8
  80297c:	1023883a 	mov	r17,r2
  802980:	1825883a 	mov	r18,r3
  802984:	a5000204 	addi	r20,r20,8
  802988:	2dbfed1e 	bne	r5,r22,802940 <__kernel_rem_pio2+0x558>
  80298c:	d9809117 	ldw	r6,580(sp)
  802990:	d9c09017 	ldw	r7,576(sp)
  802994:	e7000044 	addi	fp,fp,1
  802998:	31800104 	addi	r6,r6,4
  80299c:	39c00044 	addi	r7,r7,1
  8029a0:	84800115 	stw	r18,4(r16)
  8029a4:	84400015 	stw	r17,0(r16)
  8029a8:	d9809115 	stw	r6,580(sp)
  8029ac:	ad400204 	addi	r21,r21,8
  8029b0:	84000204 	addi	r16,r16,8
  8029b4:	d9c09015 	stw	r7,576(sp)
  8029b8:	bf3fd30e 	bge	r23,fp,802908 <__kernel_rem_pio2+0x520>
  8029bc:	ddc08d15 	stw	r23,564(sp)
  8029c0:	003efa06 	br	8025ac <__kernel_rem_pio2+0x1c4>
  8029c4:	0023883a 	mov	r17,zero
  8029c8:	0025883a 	mov	r18,zero
  8029cc:	003fef06 	br	80298c <__kernel_rem_pio2+0x5a4>
  8029d0:	0029883a 	mov	r20,zero
  8029d4:	054ffc34 	movhi	r21,16368
  8029d8:	880f883a 	mov	r7,r17
  8029dc:	800d883a 	mov	r6,r16
  8029e0:	a009883a 	mov	r4,r20
  8029e4:	a80b883a 	mov	r5,r21
  8029e8:	08040d00 	call	8040d0 <__subdf3>
  8029ec:	1025883a 	mov	r18,r2
  8029f0:	b005003a 	cmpeq	r2,r22,zero
  8029f4:	1827883a 	mov	r19,r3
  8029f8:	9021883a 	mov	r16,r18
  8029fc:	1823883a 	mov	r17,r3
  802a00:	103f8a1e 	bne	r2,zero,80282c <__kernel_rem_pio2+0x444>
  802a04:	d9809317 	ldw	r6,588(sp)
  802a08:	0009883a 	mov	r4,zero
  802a0c:	a80b883a 	mov	r5,r21
  802a10:	08037b80 	call	8037b8 <scalbn>
  802a14:	180f883a 	mov	r7,r3
  802a18:	9009883a 	mov	r4,r18
  802a1c:	980b883a 	mov	r5,r19
  802a20:	100d883a 	mov	r6,r2
  802a24:	08040d00 	call	8040d0 <__subdf3>
  802a28:	1021883a 	mov	r16,r2
  802a2c:	1823883a 	mov	r17,r3
  802a30:	000d883a 	mov	r6,zero
  802a34:	000f883a 	mov	r7,zero
  802a38:	8009883a 	mov	r4,r16
  802a3c:	880b883a 	mov	r5,r17
  802a40:	08047e00 	call	8047e0 <__eqdf2>
  802a44:	103f7f26 	beq	r2,zero,802844 <__kernel_rem_pio2+0x45c>
  802a48:	000d883a 	mov	r6,zero
  802a4c:	000f883a 	mov	r7,zero
  802a50:	8009883a 	mov	r4,r16
  802a54:	880b883a 	mov	r5,r17
  802a58:	08047e00 	call	8047e0 <__eqdf2>
  802a5c:	10019a1e 	bne	r2,zero,8030c8 <__kernel_rem_pio2+0xce0>
  802a60:	da808d17 	ldw	r10,564(sp)
  802a64:	51bfffc4 	addi	r6,r10,-1
  802a68:	3185883a 	add	r2,r6,r6
  802a6c:	1085883a 	add	r2,r2,r2
  802a70:	d9009317 	ldw	r4,588(sp)
  802a74:	16c5883a 	add	r2,r2,sp
  802a78:	10c00017 	ldw	r3,0(r2)
  802a7c:	213ffa04 	addi	r4,r4,-24
  802a80:	d9009315 	stw	r4,588(sp)
  802a84:	1801d41e 	bne	r3,zero,8031d8 <__kernel_rem_pio2+0xdf0>
  802a88:	d9808d15 	stw	r6,564(sp)
  802a8c:	1007883a 	mov	r3,r2
  802a90:	d9408d17 	ldw	r5,564(sp)
  802a94:	d9809317 	ldw	r6,588(sp)
  802a98:	18ffff04 	addi	r3,r3,-4
  802a9c:	18800017 	ldw	r2,0(r3)
  802aa0:	297fffc4 	addi	r5,r5,-1
  802aa4:	31bffa04 	addi	r6,r6,-24
  802aa8:	d9408d15 	stw	r5,564(sp)
  802aac:	d9809315 	stw	r6,588(sp)
  802ab0:	103ff726 	beq	r2,zero,802a90 <__kernel_rem_pio2+0x6a8>
  802ab4:	d9809317 	ldw	r6,588(sp)
  802ab8:	0005883a 	mov	r2,zero
  802abc:	00cffc34 	movhi	r3,16368
  802ac0:	180b883a 	mov	r5,r3
  802ac4:	1009883a 	mov	r4,r2
  802ac8:	08037b80 	call	8037b8 <scalbn>
  802acc:	d9808d17 	ldw	r6,564(sp)
  802ad0:	1021883a 	mov	r16,r2
  802ad4:	1823883a 	mov	r17,r3
  802ad8:	30004616 	blt	r6,zero,802bf4 <__kernel_rem_pio2+0x80c>
  802adc:	300690fa 	slli	r3,r6,3
  802ae0:	3185883a 	add	r2,r6,r6
  802ae4:	1085883a 	add	r2,r2,r2
  802ae8:	16e9883a 	add	r20,r2,sp
  802aec:	1ee5883a 	add	r18,r3,sp
  802af0:	3027883a 	mov	r19,r6
  802af4:	057fffc4 	movi	r21,-1
  802af8:	a1000017 	ldw	r4,0(r20)
  802afc:	9cffffc4 	addi	r19,r19,-1
  802b00:	a53fff04 	addi	r20,r20,-4
  802b04:	08049780 	call	804978 <__floatsidf>
  802b08:	800d883a 	mov	r6,r16
  802b0c:	880f883a 	mov	r7,r17
  802b10:	180b883a 	mov	r5,r3
  802b14:	1009883a 	mov	r4,r2
  802b18:	08041c40 	call	8041c4 <__muldf3>
  802b1c:	0015883a 	mov	r10,zero
  802b20:	02cf9c34 	movhi	r11,15984
  802b24:	880b883a 	mov	r5,r17
  802b28:	8009883a 	mov	r4,r16
  802b2c:	90c06515 	stw	r3,404(r18)
  802b30:	90806415 	stw	r2,400(r18)
  802b34:	580f883a 	mov	r7,r11
  802b38:	500d883a 	mov	r6,r10
  802b3c:	08041c40 	call	8041c4 <__muldf3>
  802b40:	1021883a 	mov	r16,r2
  802b44:	1823883a 	mov	r17,r3
  802b48:	94bffe04 	addi	r18,r18,-8
  802b4c:	9d7fea1e 	bne	r19,r21,802af8 <__kernel_rem_pio2+0x710>
  802b50:	d9c09517 	ldw	r7,596(sp)
  802b54:	dd808d17 	ldw	r22,564(sp)
  802b58:	002b883a 	mov	r21,zero
  802b5c:	382e403a 	cmpge	r23,r7,zero
  802b60:	b800aa26 	beq	r23,zero,802e0c <__kernel_rem_pio2+0xa24>
  802b64:	a800a916 	blt	r21,zero,802e0c <__kernel_rem_pio2+0xa24>
  802b68:	b00690fa 	slli	r3,r22,3
  802b6c:	d8806404 	addi	r2,sp,400
  802b70:	0021883a 	mov	r16,zero
  802b74:	10e9883a 	add	r20,r2,r3
  802b78:	0027883a 	mov	r19,zero
  802b7c:	0023883a 	mov	r17,zero
  802b80:	048020b4 	movhi	r18,130
  802b84:	94a01e04 	addi	r18,r18,-32648
  802b88:	00000106 	br	802b90 <__kernel_rem_pio2+0x7a8>
  802b8c:	acc01116 	blt	r21,r19,802bd4 <__kernel_rem_pio2+0x7ec>
  802b90:	91000017 	ldw	r4,0(r18)
  802b94:	91400117 	ldw	r5,4(r18)
  802b98:	a1800017 	ldw	r6,0(r20)
  802b9c:	a1c00117 	ldw	r7,4(r20)
  802ba0:	9cc00044 	addi	r19,r19,1
  802ba4:	94800204 	addi	r18,r18,8
  802ba8:	08041c40 	call	8041c4 <__muldf3>
  802bac:	180f883a 	mov	r7,r3
  802bb0:	880b883a 	mov	r5,r17
  802bb4:	8009883a 	mov	r4,r16
  802bb8:	100d883a 	mov	r6,r2
  802bbc:	08041500 	call	804150 <__adddf3>
  802bc0:	da809517 	ldw	r10,596(sp)
  802bc4:	a5000204 	addi	r20,r20,8
  802bc8:	1021883a 	mov	r16,r2
  802bcc:	1823883a 	mov	r17,r3
  802bd0:	54ffee0e 	bge	r10,r19,802b8c <__kernel_rem_pio2+0x7a4>
  802bd4:	a80490fa 	slli	r2,r21,3
  802bd8:	b5bfffc4 	addi	r22,r22,-1
  802bdc:	ad400044 	addi	r21,r21,1
  802be0:	16c5883a 	add	r2,r2,sp
  802be4:	14403d15 	stw	r17,244(r2)
  802be8:	14003c15 	stw	r16,240(r2)
  802bec:	00bfffc4 	movi	r2,-1
  802bf0:	b0bfdb1e 	bne	r22,r2,802b60 <__kernel_rem_pio2+0x778>
  802bf4:	d8c0ad17 	ldw	r3,692(sp)
  802bf8:	00800084 	movi	r2,2
  802bfc:	10c09316 	blt	r2,r3,802e4c <__kernel_rem_pio2+0xa64>
  802c00:	00c1120e 	bge	zero,r3,80304c <__kernel_rem_pio2+0xc64>
  802c04:	d9808d17 	ldw	r6,564(sp)
  802c08:	30018d16 	blt	r6,zero,803240 <__kernel_rem_pio2+0xe58>
  802c0c:	d8c08d17 	ldw	r3,564(sp)
  802c10:	0011883a 	mov	r8,zero
  802c14:	0013883a 	mov	r9,zero
  802c18:	180490fa 	slli	r2,r3,3
  802c1c:	1823883a 	mov	r17,r3
  802c20:	04bfffc4 	movi	r18,-1
  802c24:	16e1883a 	add	r16,r2,sp
  802c28:	80803c17 	ldw	r2,240(r16)
  802c2c:	80c03d17 	ldw	r3,244(r16)
  802c30:	480b883a 	mov	r5,r9
  802c34:	4009883a 	mov	r4,r8
  802c38:	180f883a 	mov	r7,r3
  802c3c:	100d883a 	mov	r6,r2
  802c40:	08041500 	call	804150 <__adddf3>
  802c44:	8c7fffc4 	addi	r17,r17,-1
  802c48:	843ffe04 	addi	r16,r16,-8
  802c4c:	1011883a 	mov	r8,r2
  802c50:	1813883a 	mov	r9,r3
  802c54:	8cbff41e 	bne	r17,r18,802c28 <__kernel_rem_pio2+0x840>
  802c58:	d9009217 	ldw	r4,584(sp)
  802c5c:	20015b1e 	bne	r4,zero,8031cc <__kernel_rem_pio2+0xde4>
  802c60:	4009883a 	mov	r4,r8
  802c64:	480b883a 	mov	r5,r9
  802c68:	d9809717 	ldw	r6,604(sp)
  802c6c:	d8803c17 	ldw	r2,240(sp)
  802c70:	480f883a 	mov	r7,r9
  802c74:	31400115 	stw	r5,4(r6)
  802c78:	31000015 	stw	r4,0(r6)
  802c7c:	d8c03d17 	ldw	r3,244(sp)
  802c80:	400d883a 	mov	r6,r8
  802c84:	1009883a 	mov	r4,r2
  802c88:	180b883a 	mov	r5,r3
  802c8c:	08040d00 	call	8040d0 <__subdf3>
  802c90:	d9c08d17 	ldw	r7,564(sp)
  802c94:	1011883a 	mov	r8,r2
  802c98:	1813883a 	mov	r9,r3
  802c9c:	01c00d0e 	bge	zero,r7,802cd4 <__kernel_rem_pio2+0x8ec>
  802ca0:	0023883a 	mov	r17,zero
  802ca4:	dc003e04 	addi	r16,sp,248
  802ca8:	81800017 	ldw	r6,0(r16)
  802cac:	81c00117 	ldw	r7,4(r16)
  802cb0:	480b883a 	mov	r5,r9
  802cb4:	4009883a 	mov	r4,r8
  802cb8:	08041500 	call	804150 <__adddf3>
  802cbc:	da808d17 	ldw	r10,564(sp)
  802cc0:	8c400044 	addi	r17,r17,1
  802cc4:	1011883a 	mov	r8,r2
  802cc8:	1813883a 	mov	r9,r3
  802ccc:	84000204 	addi	r16,r16,8
  802cd0:	8abff51e 	bne	r17,r10,802ca8 <__kernel_rem_pio2+0x8c0>
  802cd4:	d8809217 	ldw	r2,584(sp)
  802cd8:	10000226 	beq	r2,zero,802ce4 <__kernel_rem_pio2+0x8fc>
  802cdc:	48e0003c 	xorhi	r3,r9,32768
  802ce0:	1813883a 	mov	r9,r3
  802ce4:	d8c09717 	ldw	r3,604(sp)
  802ce8:	1a400315 	stw	r9,12(r3)
  802cec:	1a000215 	stw	r8,8(r3)
  802cf0:	d8c09417 	ldw	r3,592(sp)
  802cf4:	188001cc 	andi	r2,r3,7
  802cf8:	dfc0ac17 	ldw	ra,688(sp)
  802cfc:	df00ab17 	ldw	fp,684(sp)
  802d00:	ddc0aa17 	ldw	r23,680(sp)
  802d04:	dd80a917 	ldw	r22,676(sp)
  802d08:	dd40a817 	ldw	r21,672(sp)
  802d0c:	dd00a717 	ldw	r20,668(sp)
  802d10:	dcc0a617 	ldw	r19,664(sp)
  802d14:	dc80a517 	ldw	r18,660(sp)
  802d18:	dc40a417 	ldw	r17,656(sp)
  802d1c:	dc00a317 	ldw	r16,652(sp)
  802d20:	dec0ad04 	addi	sp,sp,692
  802d24:	f800283a 	ret
  802d28:	d8809317 	ldw	r2,588(sp)
  802d2c:	10001f1e 	bne	r2,zero,802dac <__kernel_rem_pio2+0x9c4>
  802d30:	d8c08d17 	ldw	r3,564(sp)
  802d34:	18c5883a 	add	r2,r3,r3
  802d38:	1085883a 	add	r2,r2,r2
  802d3c:	16c5883a 	add	r2,r2,sp
  802d40:	10ffff17 	ldw	r3,-4(r2)
  802d44:	1807d5fa 	srai	r3,r3,23
  802d48:	d8c09215 	stw	r3,584(sp)
  802d4c:	003e8e06 	br	802788 <__kernel_rem_pio2+0x3a0>
  802d50:	d9008d17 	ldw	r4,564(sp)
  802d54:	d9409317 	ldw	r5,588(sp)
  802d58:	2145c83a 	sub	r2,r4,r5
  802d5c:	1085883a 	add	r2,r2,r2
  802d60:	1085883a 	add	r2,r2,r2
  802d64:	16c5883a 	add	r2,r2,sp
  802d68:	10c00017 	ldw	r3,0(r2)
  802d6c:	01002034 	movhi	r4,128
  802d70:	213fffc4 	addi	r4,r4,-1
  802d74:	1906703a 	and	r3,r3,r4
  802d78:	10c00015 	stw	r3,0(r2)
  802d7c:	003ea806 	br	802820 <__kernel_rem_pio2+0x438>
  802d80:	d9808d17 	ldw	r6,564(sp)
  802d84:	01001034 	movhi	r4,64
  802d88:	213fffc4 	addi	r4,r4,-1
  802d8c:	30bfffc4 	addi	r2,r6,-1
  802d90:	1085883a 	add	r2,r2,r2
  802d94:	1085883a 	add	r2,r2,r2
  802d98:	16c5883a 	add	r2,r2,sp
  802d9c:	10c00017 	ldw	r3,0(r2)
  802da0:	1906703a 	and	r3,r3,r4
  802da4:	10c00015 	stw	r3,0(r2)
  802da8:	003e9d06 	br	802820 <__kernel_rem_pio2+0x438>
  802dac:	0005883a 	mov	r2,zero
  802db0:	00cff834 	movhi	r3,16352
  802db4:	300b883a 	mov	r5,r6
  802db8:	180f883a 	mov	r7,r3
  802dbc:	8009883a 	mov	r4,r16
  802dc0:	100d883a 	mov	r6,r2
  802dc4:	08048f00 	call	8048f0 <__gedf2>
  802dc8:	10001d0e 	bge	r2,zero,802e40 <__kernel_rem_pio2+0xa58>
  802dcc:	d8009215 	stw	zero,584(sp)
  802dd0:	003e9606 	br	80282c <__kernel_rem_pio2+0x444>
  802dd4:	d8c08d17 	ldw	r3,564(sp)
  802dd8:	01000044 	movi	r4,1
  802ddc:	192f883a 	add	r23,r3,r4
  802de0:	1f000044 	addi	fp,r3,1
  802de4:	bf3eb516 	blt	r23,fp,8028bc <__kernel_rem_pio2+0x4d4>
  802de8:	003eb606 	br	8028c4 <__kernel_rem_pio2+0x4dc>
  802dec:	0021883a 	mov	r16,zero
  802df0:	0023883a 	mov	r17,zero
  802df4:	a5000044 	addi	r20,r20,1
  802df8:	ac400115 	stw	r17,4(r21)
  802dfc:	ac000015 	stw	r16,0(r21)
  802e00:	ad400204 	addi	r21,r21,8
  802e04:	a5fdba1e 	bne	r20,r23,8024f0 <__kernel_rem_pio2+0x108>
  802e08:	003dd806 	br	80256c <__kernel_rem_pio2+0x184>
  802e0c:	a80490fa 	slli	r2,r21,3
  802e10:	0021883a 	mov	r16,zero
  802e14:	0023883a 	mov	r17,zero
  802e18:	16c5883a 	add	r2,r2,sp
  802e1c:	14403d15 	stw	r17,244(r2)
  802e20:	14003c15 	stw	r16,240(r2)
  802e24:	b5bfffc4 	addi	r22,r22,-1
  802e28:	00bfffc4 	movi	r2,-1
  802e2c:	ad400044 	addi	r21,r21,1
  802e30:	b0bf4b1e 	bne	r22,r2,802b60 <__kernel_rem_pio2+0x778>
  802e34:	003f6f06 	br	802bf4 <__kernel_rem_pio2+0x80c>
  802e38:	002d883a 	mov	r22,zero
  802e3c:	003e7106 	br	802804 <__kernel_rem_pio2+0x41c>
  802e40:	01000084 	movi	r4,2
  802e44:	d9009215 	stw	r4,584(sp)
  802e48:	003e5106 	br	802790 <__kernel_rem_pio2+0x3a8>
  802e4c:	d900ad17 	ldw	r4,692(sp)
  802e50:	008000c4 	movi	r2,3
  802e54:	20bfa61e 	bne	r4,r2,802cf0 <__kernel_rem_pio2+0x908>
  802e58:	d9c08d17 	ldw	r7,564(sp)
  802e5c:	01c02c0e 	bge	zero,r7,802f10 <__kernel_rem_pio2+0xb28>
  802e60:	3805883a 	mov	r2,r7
  802e64:	00000106 	br	802e6c <__kernel_rem_pio2+0xa84>
  802e68:	d8808e17 	ldw	r2,568(sp)
  802e6c:	113fffc4 	addi	r4,r2,-1
  802e70:	100690fa 	slli	r3,r2,3
  802e74:	200490fa 	slli	r2,r4,3
  802e78:	d9008e15 	stw	r4,568(sp)
  802e7c:	1ef9883a 	add	fp,r3,sp
  802e80:	16c5883a 	add	r2,r2,sp
  802e84:	d8809a15 	stw	r2,616(sp)
  802e88:	11403c04 	addi	r5,r2,240
  802e8c:	e1803c04 	addi	r6,fp,240
  802e90:	14003c17 	ldw	r16,240(r2)
  802e94:	e5003c17 	ldw	r20,240(fp)
  802e98:	d9409b15 	stw	r5,620(sp)
  802e9c:	d9809c15 	stw	r6,624(sp)
  802ea0:	35400117 	ldw	r21,4(r6)
  802ea4:	2c400117 	ldw	r17,4(r5)
  802ea8:	8009883a 	mov	r4,r16
  802eac:	a00d883a 	mov	r6,r20
  802eb0:	880b883a 	mov	r5,r17
  802eb4:	a80f883a 	mov	r7,r21
  802eb8:	08041500 	call	804150 <__adddf3>
  802ebc:	100d883a 	mov	r6,r2
  802ec0:	880b883a 	mov	r5,r17
  802ec4:	8009883a 	mov	r4,r16
  802ec8:	180f883a 	mov	r7,r3
  802ecc:	1025883a 	mov	r18,r2
  802ed0:	1827883a 	mov	r19,r3
  802ed4:	08040d00 	call	8040d0 <__subdf3>
  802ed8:	180f883a 	mov	r7,r3
  802edc:	a80b883a 	mov	r5,r21
  802ee0:	a009883a 	mov	r4,r20
  802ee4:	100d883a 	mov	r6,r2
  802ee8:	08041500 	call	804150 <__adddf3>
  802eec:	e0803c15 	stw	r2,240(fp)
  802ef0:	d9c09c17 	ldw	r7,624(sp)
  802ef4:	38c00115 	stw	r3,4(r7)
  802ef8:	da809a17 	ldw	r10,616(sp)
  802efc:	54803c15 	stw	r18,240(r10)
  802f00:	d8809b17 	ldw	r2,620(sp)
  802f04:	14c00115 	stw	r19,4(r2)
  802f08:	d8c08e17 	ldw	r3,568(sp)
  802f0c:	183fd61e 	bne	r3,zero,802e68 <__kernel_rem_pio2+0xa80>
  802f10:	d9008d17 	ldw	r4,564(sp)
  802f14:	00800044 	movi	r2,1
  802f18:	1100cc0e 	bge	r2,r4,80324c <__kernel_rem_pio2+0xe64>
  802f1c:	d8808d17 	ldw	r2,564(sp)
  802f20:	117fffc4 	addi	r5,r2,-1
  802f24:	100690fa 	slli	r3,r2,3
  802f28:	280490fa 	slli	r2,r5,3
  802f2c:	d9408f15 	stw	r5,572(sp)
  802f30:	1ef9883a 	add	fp,r3,sp
  802f34:	16c5883a 	add	r2,r2,sp
  802f38:	d8809d15 	stw	r2,628(sp)
  802f3c:	11803c04 	addi	r6,r2,240
  802f40:	e1c03c04 	addi	r7,fp,240
  802f44:	14003c17 	ldw	r16,240(r2)
  802f48:	e5003c17 	ldw	r20,240(fp)
  802f4c:	d9809e15 	stw	r6,632(sp)
  802f50:	d9c09f15 	stw	r7,636(sp)
  802f54:	34400117 	ldw	r17,4(r6)
  802f58:	3d400117 	ldw	r21,4(r7)
  802f5c:	8009883a 	mov	r4,r16
  802f60:	880b883a 	mov	r5,r17
  802f64:	a00d883a 	mov	r6,r20
  802f68:	a80f883a 	mov	r7,r21
  802f6c:	08041500 	call	804150 <__adddf3>
  802f70:	100d883a 	mov	r6,r2
  802f74:	880b883a 	mov	r5,r17
  802f78:	8009883a 	mov	r4,r16
  802f7c:	180f883a 	mov	r7,r3
  802f80:	1025883a 	mov	r18,r2
  802f84:	1827883a 	mov	r19,r3
  802f88:	08040d00 	call	8040d0 <__subdf3>
  802f8c:	180f883a 	mov	r7,r3
  802f90:	a80b883a 	mov	r5,r21
  802f94:	a009883a 	mov	r4,r20
  802f98:	100d883a 	mov	r6,r2
  802f9c:	08041500 	call	804150 <__adddf3>
  802fa0:	e0803c15 	stw	r2,240(fp)
  802fa4:	da809f17 	ldw	r10,636(sp)
  802fa8:	50c00115 	stw	r3,4(r10)
  802fac:	d8c09d17 	ldw	r3,628(sp)
  802fb0:	d8808f17 	ldw	r2,572(sp)
  802fb4:	1c803c15 	stw	r18,240(r3)
  802fb8:	d9009e17 	ldw	r4,632(sp)
  802fbc:	00c00044 	movi	r3,1
  802fc0:	24c00115 	stw	r19,4(r4)
  802fc4:	d9408f17 	ldw	r5,572(sp)
  802fc8:	28ffd51e 	bne	r5,r3,802f20 <__kernel_rem_pio2+0xb38>
  802fcc:	dc008d17 	ldw	r16,564(sp)
  802fd0:	0011883a 	mov	r8,zero
  802fd4:	1825883a 	mov	r18,r3
  802fd8:	800490fa 	slli	r2,r16,3
  802fdc:	0013883a 	mov	r9,zero
  802fe0:	16e3883a 	add	r17,r2,sp
  802fe4:	88803c17 	ldw	r2,240(r17)
  802fe8:	88c03d17 	ldw	r3,244(r17)
  802fec:	480b883a 	mov	r5,r9
  802ff0:	4009883a 	mov	r4,r8
  802ff4:	180f883a 	mov	r7,r3
  802ff8:	100d883a 	mov	r6,r2
  802ffc:	08041500 	call	804150 <__adddf3>
  803000:	843fffc4 	addi	r16,r16,-1
  803004:	8c7ffe04 	addi	r17,r17,-8
  803008:	1011883a 	mov	r8,r2
  80300c:	1813883a 	mov	r9,r3
  803010:	84bff41e 	bne	r16,r18,802fe4 <__kernel_rem_pio2+0xbfc>
  803014:	d9809217 	ldw	r6,584(sp)
  803018:	30007a1e 	bne	r6,zero,803204 <__kernel_rem_pio2+0xe1c>
  80301c:	d9c09717 	ldw	r7,604(sp)
  803020:	d8803c17 	ldw	r2,240(sp)
  803024:	d9003e17 	ldw	r4,248(sp)
  803028:	3a400515 	stw	r9,20(r7)
  80302c:	d8c03d17 	ldw	r3,244(sp)
  803030:	d9403f17 	ldw	r5,252(sp)
  803034:	3a000415 	stw	r8,16(r7)
  803038:	38c00115 	stw	r3,4(r7)
  80303c:	39400315 	stw	r5,12(r7)
  803040:	38800015 	stw	r2,0(r7)
  803044:	39000215 	stw	r4,8(r7)
  803048:	003f2906 	br	802cf0 <__kernel_rem_pio2+0x908>
  80304c:	183f281e 	bne	r3,zero,802cf0 <__kernel_rem_pio2+0x908>
  803050:	d9408d17 	ldw	r5,564(sp)
  803054:	28008016 	blt	r5,zero,803258 <__kernel_rem_pio2+0xe70>
  803058:	dc008d17 	ldw	r16,564(sp)
  80305c:	000d883a 	mov	r6,zero
  803060:	000f883a 	mov	r7,zero
  803064:	800490fa 	slli	r2,r16,3
  803068:	04bfffc4 	movi	r18,-1
  80306c:	16e3883a 	add	r17,r2,sp
  803070:	88803c17 	ldw	r2,240(r17)
  803074:	88c03d17 	ldw	r3,244(r17)
  803078:	380b883a 	mov	r5,r7
  80307c:	3009883a 	mov	r4,r6
  803080:	180f883a 	mov	r7,r3
  803084:	100d883a 	mov	r6,r2
  803088:	08041500 	call	804150 <__adddf3>
  80308c:	843fffc4 	addi	r16,r16,-1
  803090:	8c7ffe04 	addi	r17,r17,-8
  803094:	100d883a 	mov	r6,r2
  803098:	180f883a 	mov	r7,r3
  80309c:	84bff41e 	bne	r16,r18,803070 <__kernel_rem_pio2+0xc88>
  8030a0:	da809217 	ldw	r10,584(sp)
  8030a4:	50000226 	beq	r10,zero,8030b0 <__kernel_rem_pio2+0xcc8>
  8030a8:	38e0003c 	xorhi	r3,r7,32768
  8030ac:	180f883a 	mov	r7,r3
  8030b0:	d8809717 	ldw	r2,604(sp)
  8030b4:	11c00115 	stw	r7,4(r2)
  8030b8:	11800015 	stw	r6,0(r2)
  8030bc:	003f0c06 	br	802cf0 <__kernel_rem_pio2+0x908>
  8030c0:	d8008c15 	stw	zero,560(sp)
  8030c4:	003ce606 	br	802460 <__kernel_rem_pio2+0x78>
  8030c8:	d9c09317 	ldw	r7,588(sp)
  8030cc:	880b883a 	mov	r5,r17
  8030d0:	8009883a 	mov	r4,r16
  8030d4:	01cdc83a 	sub	r6,zero,r7
  8030d8:	08037b80 	call	8037b8 <scalbn>
  8030dc:	0011883a 	mov	r8,zero
  8030e0:	02505c34 	movhi	r9,16752
  8030e4:	480f883a 	mov	r7,r9
  8030e8:	1009883a 	mov	r4,r2
  8030ec:	180b883a 	mov	r5,r3
  8030f0:	400d883a 	mov	r6,r8
  8030f4:	102d883a 	mov	r22,r2
  8030f8:	182f883a 	mov	r23,r3
  8030fc:	08048f00 	call	8048f0 <__gedf2>
  803100:	10003716 	blt	r2,zero,8031e0 <__kernel_rem_pio2+0xdf8>
  803104:	0005883a 	mov	r2,zero
  803108:	00cf9c34 	movhi	r3,15984
  80310c:	180f883a 	mov	r7,r3
  803110:	100d883a 	mov	r6,r2
  803114:	b009883a 	mov	r4,r22
  803118:	b80b883a 	mov	r5,r23
  80311c:	08041c40 	call	8041c4 <__muldf3>
  803120:	180b883a 	mov	r5,r3
  803124:	1009883a 	mov	r4,r2
  803128:	0804a700 	call	804a70 <__fixdfsi>
  80312c:	1009883a 	mov	r4,r2
  803130:	08049780 	call	804978 <__floatsidf>
  803134:	da808d17 	ldw	r10,564(sp)
  803138:	1023883a 	mov	r17,r2
  80313c:	1825883a 	mov	r18,r3
  803140:	0005883a 	mov	r2,zero
  803144:	00f05c34 	movhi	r3,49520
  803148:	180f883a 	mov	r7,r3
  80314c:	8809883a 	mov	r4,r17
  803150:	900b883a 	mov	r5,r18
  803154:	100d883a 	mov	r6,r2
  803158:	52ab883a 	add	r21,r10,r10
  80315c:	08041c40 	call	8041c4 <__muldf3>
  803160:	180f883a 	mov	r7,r3
  803164:	b80b883a 	mov	r5,r23
  803168:	100d883a 	mov	r6,r2
  80316c:	b009883a 	mov	r4,r22
  803170:	08041500 	call	804150 <__adddf3>
  803174:	100d883a 	mov	r6,r2
  803178:	d8808d17 	ldw	r2,564(sp)
  80317c:	180b883a 	mov	r5,r3
  803180:	3009883a 	mov	r4,r6
  803184:	10800044 	addi	r2,r2,1
  803188:	ad6b883a 	add	r21,r21,r21
  80318c:	d8808d15 	stw	r2,564(sp)
  803190:	0804a700 	call	804a70 <__fixdfsi>
  803194:	d8c08d17 	ldw	r3,564(sp)
  803198:	aeeb883a 	add	r21,r21,sp
  80319c:	8809883a 	mov	r4,r17
  8031a0:	900b883a 	mov	r5,r18
  8031a4:	a8800015 	stw	r2,0(r21)
  8031a8:	18e1883a 	add	r16,r3,r3
  8031ac:	0804a700 	call	804a70 <__fixdfsi>
  8031b0:	d9009317 	ldw	r4,588(sp)
  8031b4:	8421883a 	add	r16,r16,r16
  8031b8:	86e1883a 	add	r16,r16,sp
  8031bc:	21000604 	addi	r4,r4,24
  8031c0:	d9009315 	stw	r4,588(sp)
  8031c4:	80800015 	stw	r2,0(r16)
  8031c8:	003e3a06 	br	802ab4 <__kernel_rem_pio2+0x6cc>
  8031cc:	4009883a 	mov	r4,r8
  8031d0:	4960003c 	xorhi	r5,r9,32768
  8031d4:	003ea406 	br	802c68 <__kernel_rem_pio2+0x880>
  8031d8:	d9808d15 	stw	r6,564(sp)
  8031dc:	003e3506 	br	802ab4 <__kernel_rem_pio2+0x6cc>
  8031e0:	d9408d17 	ldw	r5,564(sp)
  8031e4:	b009883a 	mov	r4,r22
  8031e8:	2961883a 	add	r16,r5,r5
  8031ec:	8421883a 	add	r16,r16,r16
  8031f0:	b80b883a 	mov	r5,r23
  8031f4:	86e1883a 	add	r16,r16,sp
  8031f8:	0804a700 	call	804a70 <__fixdfsi>
  8031fc:	80800015 	stw	r2,0(r16)
  803200:	003e2c06 	br	802ab4 <__kernel_rem_pio2+0x6cc>
  803204:	d8c03d17 	ldw	r3,244(sp)
  803208:	d9403f17 	ldw	r5,252(sp)
  80320c:	da809717 	ldw	r10,604(sp)
  803210:	d8803c17 	ldw	r2,240(sp)
  803214:	d9003e17 	ldw	r4,248(sp)
  803218:	49e0003c 	xorhi	r7,r9,32768
  80321c:	51c00515 	stw	r7,20(r10)
  803220:	19a0003c 	xorhi	r6,r3,32768
  803224:	29e0003c 	xorhi	r7,r5,32768
  803228:	51800115 	stw	r6,4(r10)
  80322c:	51c00315 	stw	r7,12(r10)
  803230:	50800015 	stw	r2,0(r10)
  803234:	51000215 	stw	r4,8(r10)
  803238:	52000415 	stw	r8,16(r10)
  80323c:	003eac06 	br	802cf0 <__kernel_rem_pio2+0x908>
  803240:	0011883a 	mov	r8,zero
  803244:	0013883a 	mov	r9,zero
  803248:	003e8306 	br	802c58 <__kernel_rem_pio2+0x870>
  80324c:	0011883a 	mov	r8,zero
  803250:	0013883a 	mov	r9,zero
  803254:	003f6f06 	br	803014 <__kernel_rem_pio2+0xc2c>
  803258:	000d883a 	mov	r6,zero
  80325c:	000f883a 	mov	r7,zero
  803260:	003f8f06 	br	8030a0 <__kernel_rem_pio2+0xcb8>

00803264 <__kernel_sin>:
  803264:	00a00034 	movhi	r2,32768
  803268:	10bfffc4 	addi	r2,r2,-1
  80326c:	deffef04 	addi	sp,sp,-68
  803270:	1144703a 	and	r2,r2,r5
  803274:	00cf9034 	movhi	r3,15936
  803278:	18ffffc4 	addi	r3,r3,-1
  80327c:	dd400d15 	stw	r21,52(sp)
  803280:	dd000c15 	stw	r20,48(sp)
  803284:	dfc01015 	stw	ra,64(sp)
  803288:	ddc00f15 	stw	r23,60(sp)
  80328c:	dd800e15 	stw	r22,56(sp)
  803290:	dcc00b15 	stw	r19,44(sp)
  803294:	dc800a15 	stw	r18,40(sp)
  803298:	dc400915 	stw	r17,36(sp)
  80329c:	dc000815 	stw	r16,32(sp)
  8032a0:	2029883a 	mov	r20,r4
  8032a4:	282b883a 	mov	r21,r5
  8032a8:	d9800415 	stw	r6,16(sp)
  8032ac:	d9c00515 	stw	r7,20(sp)
  8032b0:	18800216 	blt	r3,r2,8032bc <__kernel_sin+0x58>
  8032b4:	0804a700 	call	804a70 <__fixdfsi>
  8032b8:	10008826 	beq	r2,zero,8034dc <__kernel_sin+0x278>
  8032bc:	a009883a 	mov	r4,r20
  8032c0:	a80b883a 	mov	r5,r21
  8032c4:	a00d883a 	mov	r6,r20
  8032c8:	a80f883a 	mov	r7,r21
  8032cc:	08041c40 	call	8041c4 <__muldf3>
  8032d0:	102d883a 	mov	r22,r2
  8032d4:	a009883a 	mov	r4,r20
  8032d8:	a80b883a 	mov	r5,r21
  8032dc:	b00d883a 	mov	r6,r22
  8032e0:	180f883a 	mov	r7,r3
  8032e4:	182f883a 	mov	r23,r3
  8032e8:	d8800215 	stw	r2,8(sp)
  8032ec:	d8c00315 	stw	r3,12(sp)
  8032f0:	08041c40 	call	8041c4 <__muldf3>
  8032f4:	d9000217 	ldw	r4,8(sp)
  8032f8:	0216b434 	movhi	r8,23248
  8032fc:	42355f04 	addi	r8,r8,-10884
  803300:	024f79b4 	movhi	r9,15846
  803304:	4a764e84 	addi	r9,r9,-9926
  803308:	480f883a 	mov	r7,r9
  80330c:	400d883a 	mov	r6,r8
  803310:	b80b883a 	mov	r5,r23
  803314:	d8800615 	stw	r2,24(sp)
  803318:	d8c00715 	stw	r3,28(sp)
  80331c:	08041c40 	call	8041c4 <__muldf3>
  803320:	02228b34 	movhi	r8,35372
  803324:	42273ac4 	addi	r8,r8,-25365
  803328:	024f96f4 	movhi	r9,15963
  80332c:	4a797984 	addi	r9,r9,-6682
  803330:	480f883a 	mov	r7,r9
  803334:	400d883a 	mov	r6,r8
  803338:	180b883a 	mov	r5,r3
  80333c:	1009883a 	mov	r4,r2
  803340:	08040d00 	call	8040d0 <__subdf3>
  803344:	d9000217 	ldw	r4,8(sp)
  803348:	180f883a 	mov	r7,r3
  80334c:	b80b883a 	mov	r5,r23
  803350:	100d883a 	mov	r6,r2
  803354:	08041c40 	call	8041c4 <__muldf3>
  803358:	0215ecb4 	movhi	r8,22450
  80335c:	423f9f44 	addi	r8,r8,-387
  803360:	024fb1f4 	movhi	r9,16071
  803364:	4a4778c4 	addi	r9,r9,7651
  803368:	480f883a 	mov	r7,r9
  80336c:	400d883a 	mov	r6,r8
  803370:	180b883a 	mov	r5,r3
  803374:	1009883a 	mov	r4,r2
  803378:	08041500 	call	804150 <__adddf3>
  80337c:	d9000217 	ldw	r4,8(sp)
  803380:	180f883a 	mov	r7,r3
  803384:	b80b883a 	mov	r5,r23
  803388:	100d883a 	mov	r6,r2
  80338c:	08041c40 	call	8041c4 <__muldf3>
  803390:	02067074 	movhi	r8,6593
  803394:	42187544 	addi	r8,r8,25045
  803398:	024fcab4 	movhi	r9,16170
  80339c:	4a406804 	addi	r9,r9,416
  8033a0:	480f883a 	mov	r7,r9
  8033a4:	400d883a 	mov	r6,r8
  8033a8:	180b883a 	mov	r5,r3
  8033ac:	1009883a 	mov	r4,r2
  8033b0:	08040d00 	call	8040d0 <__subdf3>
  8033b4:	d9000217 	ldw	r4,8(sp)
  8033b8:	180f883a 	mov	r7,r3
  8033bc:	b80b883a 	mov	r5,r23
  8033c0:	100d883a 	mov	r6,r2
  8033c4:	08041c40 	call	8041c4 <__muldf3>
  8033c8:	02044474 	movhi	r8,4369
  8033cc:	423e2984 	addi	r8,r8,-1882
  8033d0:	024fe074 	movhi	r9,16257
  8033d4:	4a444444 	addi	r9,r9,4369
  8033d8:	180b883a 	mov	r5,r3
  8033dc:	480f883a 	mov	r7,r9
  8033e0:	1009883a 	mov	r4,r2
  8033e4:	400d883a 	mov	r6,r8
  8033e8:	08041500 	call	804150 <__adddf3>
  8033ec:	1021883a 	mov	r16,r2
  8033f0:	d8800617 	ldw	r2,24(sp)
  8033f4:	1823883a 	mov	r17,r3
  8033f8:	d8800015 	stw	r2,0(sp)
  8033fc:	d8800717 	ldw	r2,28(sp)
  803400:	d8800115 	stw	r2,4(sp)
  803404:	d8801117 	ldw	r2,68(sp)
  803408:	10004126 	beq	r2,zero,803510 <__kernel_sin+0x2ac>
  80340c:	d9000417 	ldw	r4,16(sp)
  803410:	d9400517 	ldw	r5,20(sp)
  803414:	0005883a 	mov	r2,zero
  803418:	00cff834 	movhi	r3,16352
  80341c:	180f883a 	mov	r7,r3
  803420:	100d883a 	mov	r6,r2
  803424:	08041c40 	call	8041c4 <__muldf3>
  803428:	d9000017 	ldw	r4,0(sp)
  80342c:	d9400717 	ldw	r5,28(sp)
  803430:	800d883a 	mov	r6,r16
  803434:	880f883a 	mov	r7,r17
  803438:	1021883a 	mov	r16,r2
  80343c:	1823883a 	mov	r17,r3
  803440:	08041c40 	call	8041c4 <__muldf3>
  803444:	180f883a 	mov	r7,r3
  803448:	880b883a 	mov	r5,r17
  80344c:	8009883a 	mov	r4,r16
  803450:	100d883a 	mov	r6,r2
  803454:	08040d00 	call	8040d0 <__subdf3>
  803458:	d9000217 	ldw	r4,8(sp)
  80345c:	b80b883a 	mov	r5,r23
  803460:	180f883a 	mov	r7,r3
  803464:	100d883a 	mov	r6,r2
  803468:	08041c40 	call	8041c4 <__muldf3>
  80346c:	d9c00517 	ldw	r7,20(sp)
  803470:	d9800417 	ldw	r6,16(sp)
  803474:	180b883a 	mov	r5,r3
  803478:	1009883a 	mov	r4,r2
  80347c:	08040d00 	call	8040d0 <__subdf3>
  803480:	d9000017 	ldw	r4,0(sp)
  803484:	d9400717 	ldw	r5,28(sp)
  803488:	02155574 	movhi	r8,21845
  80348c:	42155244 	addi	r8,r8,21833
  803490:	024ff174 	movhi	r9,16325
  803494:	4a555544 	addi	r9,r9,21845
  803498:	480f883a 	mov	r7,r9
  80349c:	400d883a 	mov	r6,r8
  8034a0:	1021883a 	mov	r16,r2
  8034a4:	1823883a 	mov	r17,r3
  8034a8:	08041c40 	call	8041c4 <__muldf3>
  8034ac:	180f883a 	mov	r7,r3
  8034b0:	880b883a 	mov	r5,r17
  8034b4:	8009883a 	mov	r4,r16
  8034b8:	100d883a 	mov	r6,r2
  8034bc:	08041500 	call	804150 <__adddf3>
  8034c0:	180f883a 	mov	r7,r3
  8034c4:	a80b883a 	mov	r5,r21
  8034c8:	a009883a 	mov	r4,r20
  8034cc:	100d883a 	mov	r6,r2
  8034d0:	08040d00 	call	8040d0 <__subdf3>
  8034d4:	1029883a 	mov	r20,r2
  8034d8:	182b883a 	mov	r21,r3
  8034dc:	a005883a 	mov	r2,r20
  8034e0:	a807883a 	mov	r3,r21
  8034e4:	dfc01017 	ldw	ra,64(sp)
  8034e8:	ddc00f17 	ldw	r23,60(sp)
  8034ec:	dd800e17 	ldw	r22,56(sp)
  8034f0:	dd400d17 	ldw	r21,52(sp)
  8034f4:	dd000c17 	ldw	r20,48(sp)
  8034f8:	dcc00b17 	ldw	r19,44(sp)
  8034fc:	dc800a17 	ldw	r18,40(sp)
  803500:	dc400917 	ldw	r17,36(sp)
  803504:	dc000817 	ldw	r16,32(sp)
  803508:	dec01104 	addi	sp,sp,68
  80350c:	f800283a 	ret
  803510:	d9000217 	ldw	r4,8(sp)
  803514:	b80b883a 	mov	r5,r23
  803518:	800d883a 	mov	r6,r16
  80351c:	180f883a 	mov	r7,r3
  803520:	08041c40 	call	8041c4 <__muldf3>
  803524:	02155574 	movhi	r8,21845
  803528:	42155244 	addi	r8,r8,21833
  80352c:	024ff174 	movhi	r9,16325
  803530:	4a555544 	addi	r9,r9,21845
  803534:	480f883a 	mov	r7,r9
  803538:	400d883a 	mov	r6,r8
  80353c:	180b883a 	mov	r5,r3
  803540:	1009883a 	mov	r4,r2
  803544:	08040d00 	call	8040d0 <__subdf3>
  803548:	d9000017 	ldw	r4,0(sp)
  80354c:	d9400717 	ldw	r5,28(sp)
  803550:	180f883a 	mov	r7,r3
  803554:	100d883a 	mov	r6,r2
  803558:	08041c40 	call	8041c4 <__muldf3>
  80355c:	180f883a 	mov	r7,r3
  803560:	a80b883a 	mov	r5,r21
  803564:	a009883a 	mov	r4,r20
  803568:	100d883a 	mov	r6,r2
  80356c:	08041500 	call	804150 <__adddf3>
  803570:	1029883a 	mov	r20,r2
  803574:	182b883a 	mov	r21,r3
  803578:	003fd806 	br	8034dc <__kernel_sin+0x278>

0080357c <fabs>:
  80357c:	01e00034 	movhi	r7,32768
  803580:	39ffffc4 	addi	r7,r7,-1
  803584:	394e703a 	and	r7,r7,r5
  803588:	2005883a 	mov	r2,r4
  80358c:	3807883a 	mov	r3,r7
  803590:	f800283a 	ret

00803594 <floor>:
  803594:	2805d53a 	srai	r2,r5,20
  803598:	defff604 	addi	sp,sp,-40
  80359c:	dd800615 	stw	r22,24(sp)
  8035a0:	10c1ffcc 	andi	r3,r2,2047
  8035a4:	1dbf0044 	addi	r22,r3,-1023
  8035a8:	008004c4 	movi	r2,19
  8035ac:	ddc00715 	stw	r23,28(sp)
  8035b0:	dc800215 	stw	r18,8(sp)
  8035b4:	dc400115 	stw	r17,4(sp)
  8035b8:	dc000015 	stw	r16,0(sp)
  8035bc:	dfc00915 	stw	ra,36(sp)
  8035c0:	df000815 	stw	fp,32(sp)
  8035c4:	dd400515 	stw	r21,20(sp)
  8035c8:	dd000415 	stw	r20,16(sp)
  8035cc:	dcc00315 	stw	r19,12(sp)
  8035d0:	2021883a 	mov	r16,r4
  8035d4:	2823883a 	mov	r17,r5
  8035d8:	282f883a 	mov	r23,r5
  8035dc:	2025883a 	mov	r18,r4
  8035e0:	15802916 	blt	r2,r22,803688 <floor+0xf4>
  8035e4:	b0004816 	blt	r22,zero,803708 <floor+0x174>
  8035e8:	00800434 	movhi	r2,16
  8035ec:	10bfffc4 	addi	r2,r2,-1
  8035f0:	15b9d83a 	sra	fp,r2,r22
  8035f4:	282f883a 	mov	r23,r5
  8035f8:	e144703a 	and	r2,fp,r5
  8035fc:	1104b03a 	or	r2,r2,r4
  803600:	10001326 	beq	r2,zero,803650 <floor+0xbc>
  803604:	00a20034 	movhi	r2,34816
  803608:	109d6704 	addi	r2,r2,30108
  80360c:	00df8e34 	movhi	r3,32312
  803610:	18f90f04 	addi	r3,r3,-7108
  803614:	180f883a 	mov	r7,r3
  803618:	100d883a 	mov	r6,r2
  80361c:	08041500 	call	804150 <__adddf3>
  803620:	180b883a 	mov	r5,r3
  803624:	000d883a 	mov	r6,zero
  803628:	000f883a 	mov	r7,zero
  80362c:	1009883a 	mov	r4,r2
  803630:	08048680 	call	804868 <__gtdf2>
  803634:	0080040e 	bge	zero,r2,803648 <floor+0xb4>
  803638:	88004416 	blt	r17,zero,80374c <floor+0x1b8>
  80363c:	0704303a 	nor	r2,zero,fp
  803640:	b8ae703a 	and	r23,r23,r2
  803644:	0025883a 	mov	r18,zero
  803648:	9021883a 	mov	r16,r18
  80364c:	b823883a 	mov	r17,r23
  803650:	8005883a 	mov	r2,r16
  803654:	8807883a 	mov	r3,r17
  803658:	dfc00917 	ldw	ra,36(sp)
  80365c:	df000817 	ldw	fp,32(sp)
  803660:	ddc00717 	ldw	r23,28(sp)
  803664:	dd800617 	ldw	r22,24(sp)
  803668:	dd400517 	ldw	r21,20(sp)
  80366c:	dd000417 	ldw	r20,16(sp)
  803670:	dcc00317 	ldw	r19,12(sp)
  803674:	dc800217 	ldw	r18,8(sp)
  803678:	dc400117 	ldw	r17,4(sp)
  80367c:	dc000017 	ldw	r16,0(sp)
  803680:	dec00a04 	addi	sp,sp,40
  803684:	f800283a 	ret
  803688:	00800cc4 	movi	r2,51
  80368c:	15801616 	blt	r2,r22,8036e8 <floor+0x154>
  803690:	18befb44 	addi	r2,r3,-1043
  803694:	00ffffc4 	movi	r3,-1
  803698:	18b8d83a 	srl	fp,r3,r2
  80369c:	e104703a 	and	r2,fp,r4
  8036a0:	103feb26 	beq	r2,zero,803650 <floor+0xbc>
  8036a4:	00a20034 	movhi	r2,34816
  8036a8:	109d6704 	addi	r2,r2,30108
  8036ac:	00df8e34 	movhi	r3,32312
  8036b0:	18f90f04 	addi	r3,r3,-7108
  8036b4:	180f883a 	mov	r7,r3
  8036b8:	100d883a 	mov	r6,r2
  8036bc:	08041500 	call	804150 <__adddf3>
  8036c0:	180b883a 	mov	r5,r3
  8036c4:	000d883a 	mov	r6,zero
  8036c8:	000f883a 	mov	r7,zero
  8036cc:	1009883a 	mov	r4,r2
  8036d0:	08048680 	call	804868 <__gtdf2>
  8036d4:	0080210e 	bge	zero,r2,80375c <floor+0x1c8>
  8036d8:	88002216 	blt	r17,zero,803764 <floor+0x1d0>
  8036dc:	0704303a 	nor	r2,zero,fp
  8036e0:	90a4703a 	and	r18,r18,r2
  8036e4:	003fd806 	br	803648 <floor+0xb4>
  8036e8:	00810004 	movi	r2,1024
  8036ec:	b0bfd81e 	bne	r22,r2,803650 <floor+0xbc>
  8036f0:	800d883a 	mov	r6,r16
  8036f4:	280f883a 	mov	r7,r5
  8036f8:	08041500 	call	804150 <__adddf3>
  8036fc:	1021883a 	mov	r16,r2
  803700:	1823883a 	mov	r17,r3
  803704:	003fd206 	br	803650 <floor+0xbc>
  803708:	00a20034 	movhi	r2,34816
  80370c:	109d6704 	addi	r2,r2,30108
  803710:	00df8e34 	movhi	r3,32312
  803714:	18f90f04 	addi	r3,r3,-7108
  803718:	180f883a 	mov	r7,r3
  80371c:	100d883a 	mov	r6,r2
  803720:	08041500 	call	804150 <__adddf3>
  803724:	180b883a 	mov	r5,r3
  803728:	000d883a 	mov	r6,zero
  80372c:	000f883a 	mov	r7,zero
  803730:	1009883a 	mov	r4,r2
  803734:	08048680 	call	804868 <__gtdf2>
  803738:	00bfc30e 	bge	zero,r2,803648 <floor+0xb4>
  80373c:	88001416 	blt	r17,zero,803790 <floor+0x1fc>
  803740:	002f883a 	mov	r23,zero
  803744:	0025883a 	mov	r18,zero
  803748:	003fbf06 	br	803648 <floor+0xb4>
  80374c:	00800434 	movhi	r2,16
  803750:	1585d83a 	sra	r2,r2,r22
  803754:	88af883a 	add	r23,r17,r2
  803758:	003fb806 	br	80363c <floor+0xa8>
  80375c:	882f883a 	mov	r23,r17
  803760:	003fb906 	br	803648 <floor+0xb4>
  803764:	00800504 	movi	r2,20
  803768:	b0801126 	beq	r22,r2,8037b0 <floor+0x21c>
  80376c:	00c00d04 	movi	r3,52
  803770:	1d87c83a 	sub	r3,r3,r22
  803774:	00800044 	movi	r2,1
  803778:	10c4983a 	sll	r2,r2,r3
  80377c:	8085883a 	add	r2,r16,r2
  803780:	1400012e 	bgeu	r2,r16,803788 <floor+0x1f4>
  803784:	8dc00044 	addi	r23,r17,1
  803788:	1025883a 	mov	r18,r2
  80378c:	003fd306 	br	8036dc <floor+0x148>
  803790:	00a00034 	movhi	r2,32768
  803794:	10bfffc4 	addi	r2,r2,-1
  803798:	8884703a 	and	r2,r17,r2
  80379c:	8084b03a 	or	r2,r16,r2
  8037a0:	103fee26 	beq	r2,zero,80375c <floor+0x1c8>
  8037a4:	05effc34 	movhi	r23,49136
  8037a8:	0025883a 	mov	r18,zero
  8037ac:	003fa606 	br	803648 <floor+0xb4>
  8037b0:	8dc00044 	addi	r23,r17,1
  8037b4:	003fc906 	br	8036dc <floor+0x148>

008037b8 <scalbn>:
  8037b8:	2011883a 	mov	r8,r4
  8037bc:	291ffc2c 	andhi	r4,r5,32752
  8037c0:	2009d53a 	srai	r4,r4,20
  8037c4:	defffd04 	addi	sp,sp,-12
  8037c8:	dc000015 	stw	r16,0(sp)
  8037cc:	dfc00215 	stw	ra,8(sp)
  8037d0:	dc400115 	stw	r17,4(sp)
  8037d4:	2813883a 	mov	r9,r5
  8037d8:	2815883a 	mov	r10,r5
  8037dc:	3021883a 	mov	r16,r6
  8037e0:	2000281e 	bne	r4,zero,803884 <scalbn+0xcc>
  8037e4:	00a00034 	movhi	r2,32768
  8037e8:	10bfffc4 	addi	r2,r2,-1
  8037ec:	2884703a 	and	r2,r5,r2
  8037f0:	4084b03a 	or	r2,r8,r2
  8037f4:	10001826 	beq	r2,zero,803858 <scalbn+0xa0>
  8037f8:	0005883a 	mov	r2,zero
  8037fc:	00d0d434 	movhi	r3,17232
  803800:	4009883a 	mov	r4,r8
  803804:	100d883a 	mov	r6,r2
  803808:	180f883a 	mov	r7,r3
  80380c:	08041c40 	call	8041c4 <__muldf3>
  803810:	100b883a 	mov	r5,r2
  803814:	1011883a 	mov	r8,r2
  803818:	00bffff4 	movhi	r2,65535
  80381c:	108f2c04 	addi	r2,r2,15536
  803820:	180d883a 	mov	r6,r3
  803824:	1813883a 	mov	r9,r3
  803828:	8080120e 	bge	r16,r2,803874 <scalbn+0xbc>
  80382c:	00b0be74 	movhi	r2,49913
  803830:	10bcd644 	addi	r2,r2,-3239
  803834:	00c06974 	movhi	r3,421
  803838:	18db87c4 	addi	r3,r3,28191
  80383c:	2809883a 	mov	r4,r5
  803840:	180f883a 	mov	r7,r3
  803844:	300b883a 	mov	r5,r6
  803848:	100d883a 	mov	r6,r2
  80384c:	08041c40 	call	8041c4 <__muldf3>
  803850:	1011883a 	mov	r8,r2
  803854:	1813883a 	mov	r9,r3
  803858:	4005883a 	mov	r2,r8
  80385c:	4807883a 	mov	r3,r9
  803860:	dfc00217 	ldw	ra,8(sp)
  803864:	dc400117 	ldw	r17,4(sp)
  803868:	dc000017 	ldw	r16,0(sp)
  80386c:	dec00304 	addi	sp,sp,12
  803870:	f800283a 	ret
  803874:	189ffc2c 	andhi	r2,r3,32752
  803878:	1005d53a 	srai	r2,r2,20
  80387c:	1815883a 	mov	r10,r3
  803880:	113ff284 	addi	r4,r2,-54
  803884:	0081ffc4 	movi	r2,2047
  803888:	20801126 	beq	r4,r2,8038d0 <scalbn+0x118>
  80388c:	2409883a 	add	r4,r4,r16
  803890:	0081ff84 	movi	r2,2046
  803894:	11001c16 	blt	r2,r4,803908 <scalbn+0x150>
  803898:	0100290e 	bge	zero,r4,803940 <scalbn+0x188>
  80389c:	200a953a 	slli	r5,r4,20
  8038a0:	01200434 	movhi	r4,32784
  8038a4:	213fffc4 	addi	r4,r4,-1
  8038a8:	5108703a 	and	r4,r10,r4
  8038ac:	2148b03a 	or	r4,r4,r5
  8038b0:	2013883a 	mov	r9,r4
  8038b4:	4005883a 	mov	r2,r8
  8038b8:	4807883a 	mov	r3,r9
  8038bc:	dfc00217 	ldw	ra,8(sp)
  8038c0:	dc400117 	ldw	r17,4(sp)
  8038c4:	dc000017 	ldw	r16,0(sp)
  8038c8:	dec00304 	addi	sp,sp,12
  8038cc:	f800283a 	ret
  8038d0:	480f883a 	mov	r7,r9
  8038d4:	4009883a 	mov	r4,r8
  8038d8:	480b883a 	mov	r5,r9
  8038dc:	400d883a 	mov	r6,r8
  8038e0:	08041500 	call	804150 <__adddf3>
  8038e4:	1011883a 	mov	r8,r2
  8038e8:	1813883a 	mov	r9,r3
  8038ec:	4005883a 	mov	r2,r8
  8038f0:	4807883a 	mov	r3,r9
  8038f4:	dfc00217 	ldw	ra,8(sp)
  8038f8:	dc400117 	ldw	r17,4(sp)
  8038fc:	dc000017 	ldw	r16,0(sp)
  803900:	dec00304 	addi	sp,sp,12
  803904:	f800283a 	ret
  803908:	04220034 	movhi	r16,34816
  80390c:	841d6704 	addi	r16,r16,30108
  803910:	045f8e34 	movhi	r17,32312
  803914:	8c790f04 	addi	r17,r17,-7108
  803918:	480f883a 	mov	r7,r9
  80391c:	400d883a 	mov	r6,r8
  803920:	8009883a 	mov	r4,r16
  803924:	880b883a 	mov	r5,r17
  803928:	08039980 	call	803998 <copysign>
  80392c:	180b883a 	mov	r5,r3
  803930:	800d883a 	mov	r6,r16
  803934:	880f883a 	mov	r7,r17
  803938:	1009883a 	mov	r4,r2
  80393c:	003fc306 	br	80384c <scalbn+0x94>
  803940:	00bff284 	movi	r2,-54
  803944:	11000716 	blt	r2,r4,803964 <scalbn+0x1ac>
  803948:	00b0d414 	movui	r2,50000
  80394c:	143fee16 	blt	r2,r16,803908 <scalbn+0x150>
  803950:	0430be74 	movhi	r16,49913
  803954:	843cd644 	addi	r16,r16,-3239
  803958:	04406974 	movhi	r17,421
  80395c:	8c5b87c4 	addi	r17,r17,28191
  803960:	003fed06 	br	803918 <scalbn+0x160>
  803964:	21000d84 	addi	r4,r4,54
  803968:	2008953a 	slli	r4,r4,20
  80396c:	01e00434 	movhi	r7,32784
  803970:	39ffffc4 	addi	r7,r7,-1
  803974:	51ce703a 	and	r7,r10,r7
  803978:	390eb03a 	or	r7,r7,r4
  80397c:	024f2434 	movhi	r9,15504
  803980:	4009883a 	mov	r4,r8
  803984:	0011883a 	mov	r8,zero
  803988:	380b883a 	mov	r5,r7
  80398c:	400d883a 	mov	r6,r8
  803990:	480f883a 	mov	r7,r9
  803994:	003fad06 	br	80384c <scalbn+0x94>

00803998 <copysign>:
  803998:	3813883a 	mov	r9,r7
  80399c:	01e00034 	movhi	r7,32768
  8039a0:	39ffffc4 	addi	r7,r7,-1
  8039a4:	394e703a 	and	r7,r7,r5
  8039a8:	4aa0002c 	andhi	r10,r9,32768
  8039ac:	3a8eb03a 	or	r7,r7,r10
  8039b0:	2005883a 	mov	r2,r4
  8039b4:	3807883a 	mov	r3,r7
  8039b8:	f800283a 	ret

008039bc <__fixunsdfsi>:
  8039bc:	defffb04 	addi	sp,sp,-20
  8039c0:	dc400115 	stw	r17,4(sp)
  8039c4:	dc000015 	stw	r16,0(sp)
  8039c8:	04507834 	movhi	r17,16864
  8039cc:	0021883a 	mov	r16,zero
  8039d0:	800d883a 	mov	r6,r16
  8039d4:	880f883a 	mov	r7,r17
  8039d8:	dcc00315 	stw	r19,12(sp)
  8039dc:	dc800215 	stw	r18,8(sp)
  8039e0:	2827883a 	mov	r19,r5
  8039e4:	2025883a 	mov	r18,r4
  8039e8:	dfc00415 	stw	ra,16(sp)
  8039ec:	08048f00 	call	8048f0 <__gedf2>
  8039f0:	000d883a 	mov	r6,zero
  8039f4:	880f883a 	mov	r7,r17
  8039f8:	980b883a 	mov	r5,r19
  8039fc:	9009883a 	mov	r4,r18
  803a00:	10000d16 	blt	r2,zero,803a38 <__fixunsdfsi+0x7c>
  803a04:	08040d00 	call	8040d0 <__subdf3>
  803a08:	180b883a 	mov	r5,r3
  803a0c:	1009883a 	mov	r4,r2
  803a10:	0804a700 	call	804a70 <__fixdfsi>
  803a14:	00e00034 	movhi	r3,32768
  803a18:	10c5883a 	add	r2,r2,r3
  803a1c:	dfc00417 	ldw	ra,16(sp)
  803a20:	dcc00317 	ldw	r19,12(sp)
  803a24:	dc800217 	ldw	r18,8(sp)
  803a28:	dc400117 	ldw	r17,4(sp)
  803a2c:	dc000017 	ldw	r16,0(sp)
  803a30:	dec00504 	addi	sp,sp,20
  803a34:	f800283a 	ret
  803a38:	980b883a 	mov	r5,r19
  803a3c:	9009883a 	mov	r4,r18
  803a40:	0804a700 	call	804a70 <__fixdfsi>
  803a44:	dfc00417 	ldw	ra,16(sp)
  803a48:	dcc00317 	ldw	r19,12(sp)
  803a4c:	dc800217 	ldw	r18,8(sp)
  803a50:	dc400117 	ldw	r17,4(sp)
  803a54:	dc000017 	ldw	r16,0(sp)
  803a58:	dec00504 	addi	sp,sp,20
  803a5c:	f800283a 	ret

00803a60 <__divsf3>:
  803a60:	defff304 	addi	sp,sp,-52
  803a64:	dc400b15 	stw	r17,44(sp)
  803a68:	dc400204 	addi	r17,sp,8
  803a6c:	dc000a15 	stw	r16,40(sp)
  803a70:	d9000015 	stw	r4,0(sp)
  803a74:	d9400115 	stw	r5,4(sp)
  803a78:	d809883a 	mov	r4,sp
  803a7c:	880b883a 	mov	r5,r17
  803a80:	dc000604 	addi	r16,sp,24
  803a84:	dfc00c15 	stw	ra,48(sp)
  803a88:	0804f440 	call	804f44 <__unpack_f>
  803a8c:	d9000104 	addi	r4,sp,4
  803a90:	800b883a 	mov	r5,r16
  803a94:	0804f440 	call	804f44 <__unpack_f>
  803a98:	d9000217 	ldw	r4,8(sp)
  803a9c:	00800044 	movi	r2,1
  803aa0:	01800104 	movi	r6,4
  803aa4:	11000a2e 	bgeu	r2,r4,803ad0 <__divsf3+0x70>
  803aa8:	d9400617 	ldw	r5,24(sp)
  803aac:	1140432e 	bgeu	r2,r5,803bbc <__divsf3+0x15c>
  803ab0:	d8800317 	ldw	r2,12(sp)
  803ab4:	d8c00717 	ldw	r3,28(sp)
  803ab8:	10c4f03a 	xor	r2,r2,r3
  803abc:	d8800315 	stw	r2,12(sp)
  803ac0:	21800226 	beq	r4,r6,803acc <__divsf3+0x6c>
  803ac4:	00800084 	movi	r2,2
  803ac8:	2080101e 	bne	r4,r2,803b0c <__divsf3+0xac>
  803acc:	29000726 	beq	r5,r4,803aec <__divsf3+0x8c>
  803ad0:	8809883a 	mov	r4,r17
  803ad4:	0804de40 	call	804de4 <__pack_f>
  803ad8:	dfc00c17 	ldw	ra,48(sp)
  803adc:	dc400b17 	ldw	r17,44(sp)
  803ae0:	dc000a17 	ldw	r16,40(sp)
  803ae4:	dec00d04 	addi	sp,sp,52
  803ae8:	f800283a 	ret
  803aec:	010020b4 	movhi	r4,130
  803af0:	21202e04 	addi	r4,r4,-32584
  803af4:	0804de40 	call	804de4 <__pack_f>
  803af8:	dfc00c17 	ldw	ra,48(sp)
  803afc:	dc400b17 	ldw	r17,44(sp)
  803b00:	dc000a17 	ldw	r16,40(sp)
  803b04:	dec00d04 	addi	sp,sp,52
  803b08:	f800283a 	ret
  803b0c:	29802d26 	beq	r5,r6,803bc4 <__divsf3+0x164>
  803b10:	28801a26 	beq	r5,r2,803b7c <__divsf3+0x11c>
  803b14:	d8c00417 	ldw	r3,16(sp)
  803b18:	d8800817 	ldw	r2,32(sp)
  803b1c:	d9000517 	ldw	r4,20(sp)
  803b20:	d9800917 	ldw	r6,36(sp)
  803b24:	1885c83a 	sub	r2,r3,r2
  803b28:	d8800415 	stw	r2,16(sp)
  803b2c:	2180032e 	bgeu	r4,r6,803b3c <__divsf3+0xdc>
  803b30:	10bfffc4 	addi	r2,r2,-1
  803b34:	d8800415 	stw	r2,16(sp)
  803b38:	2109883a 	add	r4,r4,r4
  803b3c:	01500034 	movhi	r5,16384
  803b40:	0007883a 	mov	r3,zero
  803b44:	0005883a 	mov	r2,zero
  803b48:	01c007c4 	movi	r7,31
  803b4c:	10800044 	addi	r2,r2,1
  803b50:	21800236 	bltu	r4,r6,803b5c <__divsf3+0xfc>
  803b54:	1946b03a 	or	r3,r3,r5
  803b58:	2189c83a 	sub	r4,r4,r6
  803b5c:	280ad07a 	srli	r5,r5,1
  803b60:	2109883a 	add	r4,r4,r4
  803b64:	11fff91e 	bne	r2,r7,803b4c <__divsf3+0xec>
  803b68:	19401fcc 	andi	r5,r3,127
  803b6c:	00801004 	movi	r2,64
  803b70:	28800a26 	beq	r5,r2,803b9c <__divsf3+0x13c>
  803b74:	d8c00515 	stw	r3,20(sp)
  803b78:	003fd506 	br	803ad0 <__divsf3+0x70>
  803b7c:	8809883a 	mov	r4,r17
  803b80:	d9800215 	stw	r6,8(sp)
  803b84:	0804de40 	call	804de4 <__pack_f>
  803b88:	dfc00c17 	ldw	ra,48(sp)
  803b8c:	dc400b17 	ldw	r17,44(sp)
  803b90:	dc000a17 	ldw	r16,40(sp)
  803b94:	dec00d04 	addi	sp,sp,52
  803b98:	f800283a 	ret
  803b9c:	1880200c 	andi	r2,r3,128
  803ba0:	103ff41e 	bne	r2,zero,803b74 <__divsf3+0x114>
  803ba4:	203ff326 	beq	r4,zero,803b74 <__divsf3+0x114>
  803ba8:	1947883a 	add	r3,r3,r5
  803bac:	00bfe004 	movi	r2,-128
  803bb0:	1886703a 	and	r3,r3,r2
  803bb4:	d8c00515 	stw	r3,20(sp)
  803bb8:	003fc506 	br	803ad0 <__divsf3+0x70>
  803bbc:	8009883a 	mov	r4,r16
  803bc0:	003fc406 	br	803ad4 <__divsf3+0x74>
  803bc4:	8809883a 	mov	r4,r17
  803bc8:	d8000515 	stw	zero,20(sp)
  803bcc:	d8000415 	stw	zero,16(sp)
  803bd0:	003fc006 	br	803ad4 <__divsf3+0x74>

00803bd4 <__floatsisf>:
  803bd4:	2006d7fa 	srli	r3,r4,31
  803bd8:	defffa04 	addi	sp,sp,-24
  803bdc:	008000c4 	movi	r2,3
  803be0:	dfc00515 	stw	ra,20(sp)
  803be4:	dc000415 	stw	r16,16(sp)
  803be8:	d8800015 	stw	r2,0(sp)
  803bec:	d8c00115 	stw	r3,4(sp)
  803bf0:	2000081e 	bne	r4,zero,803c14 <__floatsisf+0x40>
  803bf4:	00800084 	movi	r2,2
  803bf8:	d8800015 	stw	r2,0(sp)
  803bfc:	d809883a 	mov	r4,sp
  803c00:	0804de40 	call	804de4 <__pack_f>
  803c04:	dfc00517 	ldw	ra,20(sp)
  803c08:	dc000417 	ldw	r16,16(sp)
  803c0c:	dec00604 	addi	sp,sp,24
  803c10:	f800283a 	ret
  803c14:	00800784 	movi	r2,30
  803c18:	1807003a 	cmpeq	r3,r3,zero
  803c1c:	d8800215 	stw	r2,8(sp)
  803c20:	18000e1e 	bne	r3,zero,803c5c <__floatsisf+0x88>
  803c24:	00a00034 	movhi	r2,32768
  803c28:	20800e26 	beq	r4,r2,803c64 <__floatsisf+0x90>
  803c2c:	0121c83a 	sub	r16,zero,r4
  803c30:	8009883a 	mov	r4,r16
  803c34:	dc000315 	stw	r16,12(sp)
  803c38:	0804d640 	call	804d64 <__clzsi2>
  803c3c:	117fffc4 	addi	r5,r2,-1
  803c40:	017fee0e 	bge	zero,r5,803bfc <__floatsisf+0x28>
  803c44:	d8800217 	ldw	r2,8(sp)
  803c48:	8146983a 	sll	r3,r16,r5
  803c4c:	1145c83a 	sub	r2,r2,r5
  803c50:	d8c00315 	stw	r3,12(sp)
  803c54:	d8800215 	stw	r2,8(sp)
  803c58:	003fe806 	br	803bfc <__floatsisf+0x28>
  803c5c:	2021883a 	mov	r16,r4
  803c60:	003ff306 	br	803c30 <__floatsisf+0x5c>
  803c64:	00b3c034 	movhi	r2,52992
  803c68:	003fe606 	br	803c04 <__floatsisf+0x30>

00803c6c <__extendsfdf2>:
  803c6c:	defff904 	addi	sp,sp,-28
  803c70:	d9000115 	stw	r4,4(sp)
  803c74:	d9400204 	addi	r5,sp,8
  803c78:	d9000104 	addi	r4,sp,4
  803c7c:	dfc00615 	stw	ra,24(sp)
  803c80:	0804f440 	call	804f44 <__unpack_f>
  803c84:	d9c00517 	ldw	r7,20(sp)
  803c88:	0011883a 	mov	r8,zero
  803c8c:	400697ba 	slli	r3,r8,30
  803c90:	3812d0ba 	srli	r9,r7,2
  803c94:	380497ba 	slli	r2,r7,30
  803c98:	d9000217 	ldw	r4,8(sp)
  803c9c:	d9400317 	ldw	r5,12(sp)
  803ca0:	d9800417 	ldw	r6,16(sp)
  803ca4:	48c6b03a 	or	r3,r9,r3
  803ca8:	100f883a 	mov	r7,r2
  803cac:	d8c00015 	stw	r3,0(sp)
  803cb0:	0804b480 	call	804b48 <__make_dp>
  803cb4:	dfc00617 	ldw	ra,24(sp)
  803cb8:	dec00704 	addi	sp,sp,28
  803cbc:	f800283a 	ret

00803cc0 <_fpadd_parts>:
  803cc0:	defff804 	addi	sp,sp,-32
  803cc4:	dcc00315 	stw	r19,12(sp)
  803cc8:	2027883a 	mov	r19,r4
  803ccc:	21000017 	ldw	r4,0(r4)
  803cd0:	00c00044 	movi	r3,1
  803cd4:	dd400515 	stw	r21,20(sp)
  803cd8:	dd000415 	stw	r20,16(sp)
  803cdc:	ddc00715 	stw	r23,28(sp)
  803ce0:	dd800615 	stw	r22,24(sp)
  803ce4:	dc800215 	stw	r18,8(sp)
  803ce8:	dc400115 	stw	r17,4(sp)
  803cec:	dc000015 	stw	r16,0(sp)
  803cf0:	282b883a 	mov	r21,r5
  803cf4:	3029883a 	mov	r20,r6
  803cf8:	1900632e 	bgeu	r3,r4,803e88 <_fpadd_parts+0x1c8>
  803cfc:	28800017 	ldw	r2,0(r5)
  803d00:	1880812e 	bgeu	r3,r2,803f08 <_fpadd_parts+0x248>
  803d04:	00c00104 	movi	r3,4
  803d08:	20c0dc26 	beq	r4,r3,80407c <_fpadd_parts+0x3bc>
  803d0c:	10c07e26 	beq	r2,r3,803f08 <_fpadd_parts+0x248>
  803d10:	00c00084 	movi	r3,2
  803d14:	10c06726 	beq	r2,r3,803eb4 <_fpadd_parts+0x1f4>
  803d18:	20c07b26 	beq	r4,r3,803f08 <_fpadd_parts+0x248>
  803d1c:	9dc00217 	ldw	r23,8(r19)
  803d20:	28c00217 	ldw	r3,8(r5)
  803d24:	9c400317 	ldw	r17,12(r19)
  803d28:	2bc00317 	ldw	r15,12(r5)
  803d2c:	b8cdc83a 	sub	r6,r23,r3
  803d30:	9c800417 	ldw	r18,16(r19)
  803d34:	2c000417 	ldw	r16,16(r5)
  803d38:	3009883a 	mov	r4,r6
  803d3c:	30009716 	blt	r6,zero,803f9c <_fpadd_parts+0x2dc>
  803d40:	00800fc4 	movi	r2,63
  803d44:	11806b16 	blt	r2,r6,803ef4 <_fpadd_parts+0x234>
  803d48:	0100a40e 	bge	zero,r4,803fdc <_fpadd_parts+0x31c>
  803d4c:	35bff804 	addi	r22,r6,-32
  803d50:	b000bc16 	blt	r22,zero,804044 <_fpadd_parts+0x384>
  803d54:	8596d83a 	srl	r11,r16,r22
  803d58:	0019883a 	mov	r12,zero
  803d5c:	0013883a 	mov	r9,zero
  803d60:	01000044 	movi	r4,1
  803d64:	0015883a 	mov	r10,zero
  803d68:	b000be16 	blt	r22,zero,804064 <_fpadd_parts+0x3a4>
  803d6c:	2590983a 	sll	r8,r4,r22
  803d70:	000f883a 	mov	r7,zero
  803d74:	00bfffc4 	movi	r2,-1
  803d78:	3889883a 	add	r4,r7,r2
  803d7c:	408b883a 	add	r5,r8,r2
  803d80:	21cd803a 	cmpltu	r6,r4,r7
  803d84:	314b883a 	add	r5,r6,r5
  803d88:	7904703a 	and	r2,r15,r4
  803d8c:	8146703a 	and	r3,r16,r5
  803d90:	10c4b03a 	or	r2,r2,r3
  803d94:	10000226 	beq	r2,zero,803da0 <_fpadd_parts+0xe0>
  803d98:	02400044 	movi	r9,1
  803d9c:	0015883a 	mov	r10,zero
  803da0:	5a5eb03a 	or	r15,r11,r9
  803da4:	62a0b03a 	or	r16,r12,r10
  803da8:	99400117 	ldw	r5,4(r19)
  803dac:	a8800117 	ldw	r2,4(r21)
  803db0:	28806e26 	beq	r5,r2,803f6c <_fpadd_parts+0x2ac>
  803db4:	28006626 	beq	r5,zero,803f50 <_fpadd_parts+0x290>
  803db8:	7c45c83a 	sub	r2,r15,r17
  803dbc:	7889803a 	cmpltu	r4,r15,r2
  803dc0:	8487c83a 	sub	r3,r16,r18
  803dc4:	1909c83a 	sub	r4,r3,r4
  803dc8:	100d883a 	mov	r6,r2
  803dcc:	200f883a 	mov	r7,r4
  803dd0:	38007716 	blt	r7,zero,803fb0 <_fpadd_parts+0x2f0>
  803dd4:	a5c00215 	stw	r23,8(r20)
  803dd8:	a1c00415 	stw	r7,16(r20)
  803ddc:	a0000115 	stw	zero,4(r20)
  803de0:	a1800315 	stw	r6,12(r20)
  803de4:	a2000317 	ldw	r8,12(r20)
  803de8:	a2400417 	ldw	r9,16(r20)
  803dec:	00bfffc4 	movi	r2,-1
  803df0:	408b883a 	add	r5,r8,r2
  803df4:	2a09803a 	cmpltu	r4,r5,r8
  803df8:	488d883a 	add	r6,r9,r2
  803dfc:	01c40034 	movhi	r7,4096
  803e00:	39ffffc4 	addi	r7,r7,-1
  803e04:	218d883a 	add	r6,r4,r6
  803e08:	39801736 	bltu	r7,r6,803e68 <_fpadd_parts+0x1a8>
  803e0c:	31c06526 	beq	r6,r7,803fa4 <_fpadd_parts+0x2e4>
  803e10:	a3000217 	ldw	r12,8(r20)
  803e14:	4209883a 	add	r4,r8,r8
  803e18:	00bfffc4 	movi	r2,-1
  803e1c:	220f803a 	cmpltu	r7,r4,r8
  803e20:	4a4b883a 	add	r5,r9,r9
  803e24:	394f883a 	add	r7,r7,r5
  803e28:	2095883a 	add	r10,r4,r2
  803e2c:	3897883a 	add	r11,r7,r2
  803e30:	510d803a 	cmpltu	r6,r10,r4
  803e34:	6099883a 	add	r12,r12,r2
  803e38:	32d7883a 	add	r11,r6,r11
  803e3c:	00840034 	movhi	r2,4096
  803e40:	10bfffc4 	addi	r2,r2,-1
  803e44:	2011883a 	mov	r8,r4
  803e48:	3813883a 	mov	r9,r7
  803e4c:	a1000315 	stw	r4,12(r20)
  803e50:	a1c00415 	stw	r7,16(r20)
  803e54:	a3000215 	stw	r12,8(r20)
  803e58:	12c00336 	bltu	r2,r11,803e68 <_fpadd_parts+0x1a8>
  803e5c:	58bfed1e 	bne	r11,r2,803e14 <_fpadd_parts+0x154>
  803e60:	00bfff84 	movi	r2,-2
  803e64:	12bfeb2e 	bgeu	r2,r10,803e14 <_fpadd_parts+0x154>
  803e68:	a2800417 	ldw	r10,16(r20)
  803e6c:	008000c4 	movi	r2,3
  803e70:	00c80034 	movhi	r3,8192
  803e74:	18ffffc4 	addi	r3,r3,-1
  803e78:	a2400317 	ldw	r9,12(r20)
  803e7c:	a0800015 	stw	r2,0(r20)
  803e80:	1a802336 	bltu	r3,r10,803f10 <_fpadd_parts+0x250>
  803e84:	a027883a 	mov	r19,r20
  803e88:	9805883a 	mov	r2,r19
  803e8c:	ddc00717 	ldw	r23,28(sp)
  803e90:	dd800617 	ldw	r22,24(sp)
  803e94:	dd400517 	ldw	r21,20(sp)
  803e98:	dd000417 	ldw	r20,16(sp)
  803e9c:	dcc00317 	ldw	r19,12(sp)
  803ea0:	dc800217 	ldw	r18,8(sp)
  803ea4:	dc400117 	ldw	r17,4(sp)
  803ea8:	dc000017 	ldw	r16,0(sp)
  803eac:	dec00804 	addi	sp,sp,32
  803eb0:	f800283a 	ret
  803eb4:	20fff41e 	bne	r4,r3,803e88 <_fpadd_parts+0x1c8>
  803eb8:	31000015 	stw	r4,0(r6)
  803ebc:	98800117 	ldw	r2,4(r19)
  803ec0:	30800115 	stw	r2,4(r6)
  803ec4:	98c00217 	ldw	r3,8(r19)
  803ec8:	30c00215 	stw	r3,8(r6)
  803ecc:	98800317 	ldw	r2,12(r19)
  803ed0:	30800315 	stw	r2,12(r6)
  803ed4:	98c00417 	ldw	r3,16(r19)
  803ed8:	30c00415 	stw	r3,16(r6)
  803edc:	98800117 	ldw	r2,4(r19)
  803ee0:	28c00117 	ldw	r3,4(r5)
  803ee4:	3027883a 	mov	r19,r6
  803ee8:	10c4703a 	and	r2,r2,r3
  803eec:	30800115 	stw	r2,4(r6)
  803ef0:	003fe506 	br	803e88 <_fpadd_parts+0x1c8>
  803ef4:	1dc02616 	blt	r3,r23,803f90 <_fpadd_parts+0x2d0>
  803ef8:	0023883a 	mov	r17,zero
  803efc:	182f883a 	mov	r23,r3
  803f00:	0025883a 	mov	r18,zero
  803f04:	003fa806 	br	803da8 <_fpadd_parts+0xe8>
  803f08:	a827883a 	mov	r19,r21
  803f0c:	003fde06 	br	803e88 <_fpadd_parts+0x1c8>
  803f10:	01800044 	movi	r6,1
  803f14:	500497fa 	slli	r2,r10,31
  803f18:	4808d07a 	srli	r4,r9,1
  803f1c:	518ad83a 	srl	r5,r10,r6
  803f20:	a2000217 	ldw	r8,8(r20)
  803f24:	1108b03a 	or	r4,r2,r4
  803f28:	0007883a 	mov	r3,zero
  803f2c:	4984703a 	and	r2,r9,r6
  803f30:	208cb03a 	or	r6,r4,r2
  803f34:	28ceb03a 	or	r7,r5,r3
  803f38:	42000044 	addi	r8,r8,1
  803f3c:	a027883a 	mov	r19,r20
  803f40:	a1c00415 	stw	r7,16(r20)
  803f44:	a2000215 	stw	r8,8(r20)
  803f48:	a1800315 	stw	r6,12(r20)
  803f4c:	003fce06 	br	803e88 <_fpadd_parts+0x1c8>
  803f50:	8bc5c83a 	sub	r2,r17,r15
  803f54:	8889803a 	cmpltu	r4,r17,r2
  803f58:	9407c83a 	sub	r3,r18,r16
  803f5c:	1909c83a 	sub	r4,r3,r4
  803f60:	100d883a 	mov	r6,r2
  803f64:	200f883a 	mov	r7,r4
  803f68:	003f9906 	br	803dd0 <_fpadd_parts+0x110>
  803f6c:	7c45883a 	add	r2,r15,r17
  803f70:	13c9803a 	cmpltu	r4,r2,r15
  803f74:	8487883a 	add	r3,r16,r18
  803f78:	20c9883a 	add	r4,r4,r3
  803f7c:	a1400115 	stw	r5,4(r20)
  803f80:	a5c00215 	stw	r23,8(r20)
  803f84:	a0800315 	stw	r2,12(r20)
  803f88:	a1000415 	stw	r4,16(r20)
  803f8c:	003fb606 	br	803e68 <_fpadd_parts+0x1a8>
  803f90:	001f883a 	mov	r15,zero
  803f94:	0021883a 	mov	r16,zero
  803f98:	003f8306 	br	803da8 <_fpadd_parts+0xe8>
  803f9c:	018dc83a 	sub	r6,zero,r6
  803fa0:	003f6706 	br	803d40 <_fpadd_parts+0x80>
  803fa4:	00bfff84 	movi	r2,-2
  803fa8:	117faf36 	bltu	r2,r5,803e68 <_fpadd_parts+0x1a8>
  803fac:	003f9806 	br	803e10 <_fpadd_parts+0x150>
  803fb0:	0005883a 	mov	r2,zero
  803fb4:	1189c83a 	sub	r4,r2,r6
  803fb8:	1105803a 	cmpltu	r2,r2,r4
  803fbc:	01cbc83a 	sub	r5,zero,r7
  803fc0:	2885c83a 	sub	r2,r5,r2
  803fc4:	01800044 	movi	r6,1
  803fc8:	a1800115 	stw	r6,4(r20)
  803fcc:	a5c00215 	stw	r23,8(r20)
  803fd0:	a1000315 	stw	r4,12(r20)
  803fd4:	a0800415 	stw	r2,16(r20)
  803fd8:	003f8206 	br	803de4 <_fpadd_parts+0x124>
  803fdc:	203f7226 	beq	r4,zero,803da8 <_fpadd_parts+0xe8>
  803fe0:	35bff804 	addi	r22,r6,-32
  803fe4:	b9af883a 	add	r23,r23,r6
  803fe8:	b0003116 	blt	r22,zero,8040b0 <_fpadd_parts+0x3f0>
  803fec:	959ad83a 	srl	r13,r18,r22
  803ff0:	001d883a 	mov	r14,zero
  803ff4:	000f883a 	mov	r7,zero
  803ff8:	01000044 	movi	r4,1
  803ffc:	0011883a 	mov	r8,zero
  804000:	b0002516 	blt	r22,zero,804098 <_fpadd_parts+0x3d8>
  804004:	2594983a 	sll	r10,r4,r22
  804008:	0013883a 	mov	r9,zero
  80400c:	00bfffc4 	movi	r2,-1
  804010:	4889883a 	add	r4,r9,r2
  804014:	508b883a 	add	r5,r10,r2
  804018:	224d803a 	cmpltu	r6,r4,r9
  80401c:	314b883a 	add	r5,r6,r5
  804020:	8904703a 	and	r2,r17,r4
  804024:	9146703a 	and	r3,r18,r5
  804028:	10c4b03a 	or	r2,r2,r3
  80402c:	10000226 	beq	r2,zero,804038 <_fpadd_parts+0x378>
  804030:	01c00044 	movi	r7,1
  804034:	0011883a 	mov	r8,zero
  804038:	69e2b03a 	or	r17,r13,r7
  80403c:	7224b03a 	or	r18,r14,r8
  804040:	003f5906 	br	803da8 <_fpadd_parts+0xe8>
  804044:	8407883a 	add	r3,r16,r16
  804048:	008007c4 	movi	r2,31
  80404c:	1185c83a 	sub	r2,r2,r6
  804050:	1886983a 	sll	r3,r3,r2
  804054:	7996d83a 	srl	r11,r15,r6
  804058:	8198d83a 	srl	r12,r16,r6
  80405c:	1ad6b03a 	or	r11,r3,r11
  804060:	003f3e06 	br	803d5c <_fpadd_parts+0x9c>
  804064:	2006d07a 	srli	r3,r4,1
  804068:	008007c4 	movi	r2,31
  80406c:	1185c83a 	sub	r2,r2,r6
  804070:	1890d83a 	srl	r8,r3,r2
  804074:	218e983a 	sll	r7,r4,r6
  804078:	003f3e06 	br	803d74 <_fpadd_parts+0xb4>
  80407c:	113f821e 	bne	r2,r4,803e88 <_fpadd_parts+0x1c8>
  804080:	28c00117 	ldw	r3,4(r5)
  804084:	98800117 	ldw	r2,4(r19)
  804088:	10ff7f26 	beq	r2,r3,803e88 <_fpadd_parts+0x1c8>
  80408c:	04c020b4 	movhi	r19,130
  804090:	9ce03204 	addi	r19,r19,-32568
  804094:	003f7c06 	br	803e88 <_fpadd_parts+0x1c8>
  804098:	2006d07a 	srli	r3,r4,1
  80409c:	008007c4 	movi	r2,31
  8040a0:	1185c83a 	sub	r2,r2,r6
  8040a4:	1894d83a 	srl	r10,r3,r2
  8040a8:	2192983a 	sll	r9,r4,r6
  8040ac:	003fd706 	br	80400c <_fpadd_parts+0x34c>
  8040b0:	9487883a 	add	r3,r18,r18
  8040b4:	008007c4 	movi	r2,31
  8040b8:	1185c83a 	sub	r2,r2,r6
  8040bc:	1886983a 	sll	r3,r3,r2
  8040c0:	899ad83a 	srl	r13,r17,r6
  8040c4:	919cd83a 	srl	r14,r18,r6
  8040c8:	1b5ab03a 	or	r13,r3,r13
  8040cc:	003fc906 	br	803ff4 <_fpadd_parts+0x334>

008040d0 <__subdf3>:
  8040d0:	deffea04 	addi	sp,sp,-88
  8040d4:	dcc01415 	stw	r19,80(sp)
  8040d8:	dcc00404 	addi	r19,sp,16
  8040dc:	2011883a 	mov	r8,r4
  8040e0:	2813883a 	mov	r9,r5
  8040e4:	dc401315 	stw	r17,76(sp)
  8040e8:	d809883a 	mov	r4,sp
  8040ec:	980b883a 	mov	r5,r19
  8040f0:	dc400904 	addi	r17,sp,36
  8040f4:	dfc01515 	stw	ra,84(sp)
  8040f8:	da400115 	stw	r9,4(sp)
  8040fc:	d9c00315 	stw	r7,12(sp)
  804100:	da000015 	stw	r8,0(sp)
  804104:	d9800215 	stw	r6,8(sp)
  804108:	08053200 	call	805320 <__unpack_d>
  80410c:	d9000204 	addi	r4,sp,8
  804110:	880b883a 	mov	r5,r17
  804114:	08053200 	call	805320 <__unpack_d>
  804118:	d8800a17 	ldw	r2,40(sp)
  80411c:	880b883a 	mov	r5,r17
  804120:	9809883a 	mov	r4,r19
  804124:	d9800e04 	addi	r6,sp,56
  804128:	1080005c 	xori	r2,r2,1
  80412c:	d8800a15 	stw	r2,40(sp)
  804130:	0803cc00 	call	803cc0 <_fpadd_parts>
  804134:	1009883a 	mov	r4,r2
  804138:	080500c0 	call	80500c <__pack_d>
  80413c:	dfc01517 	ldw	ra,84(sp)
  804140:	dcc01417 	ldw	r19,80(sp)
  804144:	dc401317 	ldw	r17,76(sp)
  804148:	dec01604 	addi	sp,sp,88
  80414c:	f800283a 	ret

00804150 <__adddf3>:
  804150:	deffea04 	addi	sp,sp,-88
  804154:	dcc01415 	stw	r19,80(sp)
  804158:	dcc00404 	addi	r19,sp,16
  80415c:	2011883a 	mov	r8,r4
  804160:	2813883a 	mov	r9,r5
  804164:	dc401315 	stw	r17,76(sp)
  804168:	d809883a 	mov	r4,sp
  80416c:	980b883a 	mov	r5,r19
  804170:	dc400904 	addi	r17,sp,36
  804174:	dfc01515 	stw	ra,84(sp)
  804178:	da400115 	stw	r9,4(sp)
  80417c:	d9c00315 	stw	r7,12(sp)
  804180:	da000015 	stw	r8,0(sp)
  804184:	d9800215 	stw	r6,8(sp)
  804188:	08053200 	call	805320 <__unpack_d>
  80418c:	d9000204 	addi	r4,sp,8
  804190:	880b883a 	mov	r5,r17
  804194:	08053200 	call	805320 <__unpack_d>
  804198:	d9800e04 	addi	r6,sp,56
  80419c:	9809883a 	mov	r4,r19
  8041a0:	880b883a 	mov	r5,r17
  8041a4:	0803cc00 	call	803cc0 <_fpadd_parts>
  8041a8:	1009883a 	mov	r4,r2
  8041ac:	080500c0 	call	80500c <__pack_d>
  8041b0:	dfc01517 	ldw	ra,84(sp)
  8041b4:	dcc01417 	ldw	r19,80(sp)
  8041b8:	dc401317 	ldw	r17,76(sp)
  8041bc:	dec01604 	addi	sp,sp,88
  8041c0:	f800283a 	ret

008041c4 <__muldf3>:
  8041c4:	deffe004 	addi	sp,sp,-128
  8041c8:	dc401815 	stw	r17,96(sp)
  8041cc:	dc400404 	addi	r17,sp,16
  8041d0:	2011883a 	mov	r8,r4
  8041d4:	2813883a 	mov	r9,r5
  8041d8:	dc001715 	stw	r16,92(sp)
  8041dc:	d809883a 	mov	r4,sp
  8041e0:	880b883a 	mov	r5,r17
  8041e4:	dc000904 	addi	r16,sp,36
  8041e8:	dfc01f15 	stw	ra,124(sp)
  8041ec:	da400115 	stw	r9,4(sp)
  8041f0:	d9c00315 	stw	r7,12(sp)
  8041f4:	da000015 	stw	r8,0(sp)
  8041f8:	d9800215 	stw	r6,8(sp)
  8041fc:	ddc01e15 	stw	r23,120(sp)
  804200:	dd801d15 	stw	r22,116(sp)
  804204:	dd401c15 	stw	r21,112(sp)
  804208:	dd001b15 	stw	r20,108(sp)
  80420c:	dcc01a15 	stw	r19,104(sp)
  804210:	dc801915 	stw	r18,100(sp)
  804214:	08053200 	call	805320 <__unpack_d>
  804218:	d9000204 	addi	r4,sp,8
  80421c:	800b883a 	mov	r5,r16
  804220:	08053200 	call	805320 <__unpack_d>
  804224:	d9000417 	ldw	r4,16(sp)
  804228:	00800044 	movi	r2,1
  80422c:	1100102e 	bgeu	r2,r4,804270 <__muldf3+0xac>
  804230:	d8c00917 	ldw	r3,36(sp)
  804234:	10c0062e 	bgeu	r2,r3,804250 <__muldf3+0x8c>
  804238:	00800104 	movi	r2,4
  80423c:	20800a26 	beq	r4,r2,804268 <__muldf3+0xa4>
  804240:	1880cc26 	beq	r3,r2,804574 <__muldf3+0x3b0>
  804244:	00800084 	movi	r2,2
  804248:	20800926 	beq	r4,r2,804270 <__muldf3+0xac>
  80424c:	1880191e 	bne	r3,r2,8042b4 <__muldf3+0xf0>
  804250:	d8c00a17 	ldw	r3,40(sp)
  804254:	d8800517 	ldw	r2,20(sp)
  804258:	8009883a 	mov	r4,r16
  80425c:	10c4c03a 	cmpne	r2,r2,r3
  804260:	d8800a15 	stw	r2,40(sp)
  804264:	00000706 	br	804284 <__muldf3+0xc0>
  804268:	00800084 	movi	r2,2
  80426c:	1880c326 	beq	r3,r2,80457c <__muldf3+0x3b8>
  804270:	d8800517 	ldw	r2,20(sp)
  804274:	d8c00a17 	ldw	r3,40(sp)
  804278:	8809883a 	mov	r4,r17
  80427c:	10c4c03a 	cmpne	r2,r2,r3
  804280:	d8800515 	stw	r2,20(sp)
  804284:	080500c0 	call	80500c <__pack_d>
  804288:	dfc01f17 	ldw	ra,124(sp)
  80428c:	ddc01e17 	ldw	r23,120(sp)
  804290:	dd801d17 	ldw	r22,116(sp)
  804294:	dd401c17 	ldw	r21,112(sp)
  804298:	dd001b17 	ldw	r20,108(sp)
  80429c:	dcc01a17 	ldw	r19,104(sp)
  8042a0:	dc801917 	ldw	r18,100(sp)
  8042a4:	dc401817 	ldw	r17,96(sp)
  8042a8:	dc001717 	ldw	r16,92(sp)
  8042ac:	dec02004 	addi	sp,sp,128
  8042b0:	f800283a 	ret
  8042b4:	dd800717 	ldw	r22,28(sp)
  8042b8:	dc800c17 	ldw	r18,48(sp)
  8042bc:	002b883a 	mov	r21,zero
  8042c0:	0023883a 	mov	r17,zero
  8042c4:	a80b883a 	mov	r5,r21
  8042c8:	b00d883a 	mov	r6,r22
  8042cc:	880f883a 	mov	r7,r17
  8042d0:	ddc00817 	ldw	r23,32(sp)
  8042d4:	dcc00d17 	ldw	r19,52(sp)
  8042d8:	9009883a 	mov	r4,r18
  8042dc:	0804ccc0 	call	804ccc <__muldi3>
  8042e0:	001b883a 	mov	r13,zero
  8042e4:	680f883a 	mov	r7,r13
  8042e8:	b009883a 	mov	r4,r22
  8042ec:	000b883a 	mov	r5,zero
  8042f0:	980d883a 	mov	r6,r19
  8042f4:	b82d883a 	mov	r22,r23
  8042f8:	002f883a 	mov	r23,zero
  8042fc:	db401615 	stw	r13,88(sp)
  804300:	d8801315 	stw	r2,76(sp)
  804304:	d8c01415 	stw	r3,80(sp)
  804308:	dcc01515 	stw	r19,84(sp)
  80430c:	0804ccc0 	call	804ccc <__muldi3>
  804310:	b00d883a 	mov	r6,r22
  804314:	000b883a 	mov	r5,zero
  804318:	9009883a 	mov	r4,r18
  80431c:	b80f883a 	mov	r7,r23
  804320:	1021883a 	mov	r16,r2
  804324:	1823883a 	mov	r17,r3
  804328:	0804ccc0 	call	804ccc <__muldi3>
  80432c:	8085883a 	add	r2,r16,r2
  804330:	140d803a 	cmpltu	r6,r2,r16
  804334:	88c7883a 	add	r3,r17,r3
  804338:	30cd883a 	add	r6,r6,r3
  80433c:	1029883a 	mov	r20,r2
  804340:	302b883a 	mov	r21,r6
  804344:	da801317 	ldw	r10,76(sp)
  804348:	dac01417 	ldw	r11,80(sp)
  80434c:	db001517 	ldw	r12,84(sp)
  804350:	db401617 	ldw	r13,88(sp)
  804354:	3440612e 	bgeu	r6,r17,8044dc <__muldf3+0x318>
  804358:	0009883a 	mov	r4,zero
  80435c:	5105883a 	add	r2,r10,r4
  804360:	128d803a 	cmpltu	r6,r2,r10
  804364:	5d07883a 	add	r3,r11,r20
  804368:	30cd883a 	add	r6,r6,r3
  80436c:	0021883a 	mov	r16,zero
  804370:	04400044 	movi	r17,1
  804374:	1025883a 	mov	r18,r2
  804378:	3027883a 	mov	r19,r6
  80437c:	32c06236 	bltu	r6,r11,804508 <__muldf3+0x344>
  804380:	59807a26 	beq	r11,r6,80456c <__muldf3+0x3a8>
  804384:	680b883a 	mov	r5,r13
  804388:	b80f883a 	mov	r7,r23
  80438c:	6009883a 	mov	r4,r12
  804390:	b00d883a 	mov	r6,r22
  804394:	0804ccc0 	call	804ccc <__muldi3>
  804398:	1009883a 	mov	r4,r2
  80439c:	000f883a 	mov	r7,zero
  8043a0:	1545883a 	add	r2,r2,r21
  8043a4:	1111803a 	cmpltu	r8,r2,r4
  8043a8:	19c7883a 	add	r3,r3,r7
  8043ac:	40c7883a 	add	r3,r8,r3
  8043b0:	88cb883a 	add	r5,r17,r3
  8043b4:	d8c00617 	ldw	r3,24(sp)
  8043b8:	8089883a 	add	r4,r16,r2
  8043bc:	d8800b17 	ldw	r2,44(sp)
  8043c0:	18c00104 	addi	r3,r3,4
  8043c4:	240d803a 	cmpltu	r6,r4,r16
  8043c8:	10c7883a 	add	r3,r2,r3
  8043cc:	2013883a 	mov	r9,r4
  8043d0:	d8800a17 	ldw	r2,40(sp)
  8043d4:	d9000517 	ldw	r4,20(sp)
  8043d8:	314d883a 	add	r6,r6,r5
  8043dc:	3015883a 	mov	r10,r6
  8043e0:	2088c03a 	cmpne	r4,r4,r2
  8043e4:	00880034 	movhi	r2,8192
  8043e8:	10bfffc4 	addi	r2,r2,-1
  8043ec:	d9000f15 	stw	r4,60(sp)
  8043f0:	d8c01015 	stw	r3,64(sp)
  8043f4:	1180162e 	bgeu	r2,r6,804450 <__muldf3+0x28c>
  8043f8:	1811883a 	mov	r8,r3
  8043fc:	101f883a 	mov	r15,r2
  804400:	980497fa 	slli	r2,r19,31
  804404:	9016d07a 	srli	r11,r18,1
  804408:	500697fa 	slli	r3,r10,31
  80440c:	480cd07a 	srli	r6,r9,1
  804410:	500ed07a 	srli	r7,r10,1
  804414:	12d6b03a 	or	r11,r2,r11
  804418:	00800044 	movi	r2,1
  80441c:	198cb03a 	or	r6,r3,r6
  804420:	4888703a 	and	r4,r9,r2
  804424:	9818d07a 	srli	r12,r19,1
  804428:	001b883a 	mov	r13,zero
  80442c:	03a00034 	movhi	r14,32768
  804430:	3013883a 	mov	r9,r6
  804434:	3815883a 	mov	r10,r7
  804438:	4091883a 	add	r8,r8,r2
  80443c:	20000226 	beq	r4,zero,804448 <__muldf3+0x284>
  804440:	5b64b03a 	or	r18,r11,r13
  804444:	63a6b03a 	or	r19,r12,r14
  804448:	7abfed36 	bltu	r15,r10,804400 <__muldf3+0x23c>
  80444c:	da001015 	stw	r8,64(sp)
  804450:	00840034 	movhi	r2,4096
  804454:	10bfffc4 	addi	r2,r2,-1
  804458:	12801436 	bltu	r2,r10,8044ac <__muldf3+0x2e8>
  80445c:	da001017 	ldw	r8,64(sp)
  804460:	101f883a 	mov	r15,r2
  804464:	4a45883a 	add	r2,r9,r9
  804468:	124d803a 	cmpltu	r6,r2,r9
  80446c:	5287883a 	add	r3,r10,r10
  804470:	9497883a 	add	r11,r18,r18
  804474:	5c8f803a 	cmpltu	r7,r11,r18
  804478:	9cd9883a 	add	r12,r19,r19
  80447c:	01000044 	movi	r4,1
  804480:	30cd883a 	add	r6,r6,r3
  804484:	3b0f883a 	add	r7,r7,r12
  804488:	423fffc4 	addi	r8,r8,-1
  80448c:	1013883a 	mov	r9,r2
  804490:	3015883a 	mov	r10,r6
  804494:	111ab03a 	or	r13,r2,r4
  804498:	98003016 	blt	r19,zero,80455c <__muldf3+0x398>
  80449c:	5825883a 	mov	r18,r11
  8044a0:	3827883a 	mov	r19,r7
  8044a4:	7abfef2e 	bgeu	r15,r10,804464 <__muldf3+0x2a0>
  8044a8:	da001015 	stw	r8,64(sp)
  8044ac:	00803fc4 	movi	r2,255
  8044b0:	488e703a 	and	r7,r9,r2
  8044b4:	00802004 	movi	r2,128
  8044b8:	0007883a 	mov	r3,zero
  8044bc:	0011883a 	mov	r8,zero
  8044c0:	38801826 	beq	r7,r2,804524 <__muldf3+0x360>
  8044c4:	008000c4 	movi	r2,3
  8044c8:	d9000e04 	addi	r4,sp,56
  8044cc:	da801215 	stw	r10,72(sp)
  8044d0:	d8800e15 	stw	r2,56(sp)
  8044d4:	da401115 	stw	r9,68(sp)
  8044d8:	003f6a06 	br	804284 <__muldf3+0xc0>
  8044dc:	89802126 	beq	r17,r6,804564 <__muldf3+0x3a0>
  8044e0:	0009883a 	mov	r4,zero
  8044e4:	5105883a 	add	r2,r10,r4
  8044e8:	128d803a 	cmpltu	r6,r2,r10
  8044ec:	5d07883a 	add	r3,r11,r20
  8044f0:	30cd883a 	add	r6,r6,r3
  8044f4:	0021883a 	mov	r16,zero
  8044f8:	0023883a 	mov	r17,zero
  8044fc:	1025883a 	mov	r18,r2
  804500:	3027883a 	mov	r19,r6
  804504:	32ff9e2e 	bgeu	r6,r11,804380 <__muldf3+0x1bc>
  804508:	00800044 	movi	r2,1
  80450c:	8089883a 	add	r4,r16,r2
  804510:	240d803a 	cmpltu	r6,r4,r16
  804514:	344d883a 	add	r6,r6,r17
  804518:	2021883a 	mov	r16,r4
  80451c:	3023883a 	mov	r17,r6
  804520:	003f9806 	br	804384 <__muldf3+0x1c0>
  804524:	403fe71e 	bne	r8,zero,8044c4 <__muldf3+0x300>
  804528:	01004004 	movi	r4,256
  80452c:	4904703a 	and	r2,r9,r4
  804530:	10c4b03a 	or	r2,r2,r3
  804534:	103fe31e 	bne	r2,zero,8044c4 <__muldf3+0x300>
  804538:	94c4b03a 	or	r2,r18,r19
  80453c:	103fe126 	beq	r2,zero,8044c4 <__muldf3+0x300>
  804540:	49c5883a 	add	r2,r9,r7
  804544:	1251803a 	cmpltu	r8,r2,r9
  804548:	4291883a 	add	r8,r8,r10
  80454c:	013fc004 	movi	r4,-256
  804550:	1112703a 	and	r9,r2,r4
  804554:	4015883a 	mov	r10,r8
  804558:	003fda06 	br	8044c4 <__muldf3+0x300>
  80455c:	6813883a 	mov	r9,r13
  804560:	003fce06 	br	80449c <__muldf3+0x2d8>
  804564:	143f7c36 	bltu	r2,r16,804358 <__muldf3+0x194>
  804568:	003fdd06 	br	8044e0 <__muldf3+0x31c>
  80456c:	12bf852e 	bgeu	r2,r10,804384 <__muldf3+0x1c0>
  804570:	003fe506 	br	804508 <__muldf3+0x344>
  804574:	00800084 	movi	r2,2
  804578:	20bf351e 	bne	r4,r2,804250 <__muldf3+0x8c>
  80457c:	010020b4 	movhi	r4,130
  804580:	21203204 	addi	r4,r4,-32568
  804584:	003f3f06 	br	804284 <__muldf3+0xc0>

00804588 <__divdf3>:
  804588:	deffed04 	addi	sp,sp,-76
  80458c:	dcc01115 	stw	r19,68(sp)
  804590:	dcc00404 	addi	r19,sp,16
  804594:	2011883a 	mov	r8,r4
  804598:	2813883a 	mov	r9,r5
  80459c:	dc000e15 	stw	r16,56(sp)
  8045a0:	d809883a 	mov	r4,sp
  8045a4:	980b883a 	mov	r5,r19
  8045a8:	dc000904 	addi	r16,sp,36
  8045ac:	dfc01215 	stw	ra,72(sp)
  8045b0:	da400115 	stw	r9,4(sp)
  8045b4:	d9c00315 	stw	r7,12(sp)
  8045b8:	da000015 	stw	r8,0(sp)
  8045bc:	d9800215 	stw	r6,8(sp)
  8045c0:	dc801015 	stw	r18,64(sp)
  8045c4:	dc400f15 	stw	r17,60(sp)
  8045c8:	08053200 	call	805320 <__unpack_d>
  8045cc:	d9000204 	addi	r4,sp,8
  8045d0:	800b883a 	mov	r5,r16
  8045d4:	08053200 	call	805320 <__unpack_d>
  8045d8:	d9000417 	ldw	r4,16(sp)
  8045dc:	00800044 	movi	r2,1
  8045e0:	11000b2e 	bgeu	r2,r4,804610 <__divdf3+0x88>
  8045e4:	d9400917 	ldw	r5,36(sp)
  8045e8:	1140762e 	bgeu	r2,r5,8047c4 <__divdf3+0x23c>
  8045ec:	d8800517 	ldw	r2,20(sp)
  8045f0:	d8c00a17 	ldw	r3,40(sp)
  8045f4:	01800104 	movi	r6,4
  8045f8:	10c4f03a 	xor	r2,r2,r3
  8045fc:	d8800515 	stw	r2,20(sp)
  804600:	21800226 	beq	r4,r6,80460c <__divdf3+0x84>
  804604:	00800084 	movi	r2,2
  804608:	2080141e 	bne	r4,r2,80465c <__divdf3+0xd4>
  80460c:	29000926 	beq	r5,r4,804634 <__divdf3+0xac>
  804610:	9809883a 	mov	r4,r19
  804614:	080500c0 	call	80500c <__pack_d>
  804618:	dfc01217 	ldw	ra,72(sp)
  80461c:	dcc01117 	ldw	r19,68(sp)
  804620:	dc801017 	ldw	r18,64(sp)
  804624:	dc400f17 	ldw	r17,60(sp)
  804628:	dc000e17 	ldw	r16,56(sp)
  80462c:	dec01304 	addi	sp,sp,76
  804630:	f800283a 	ret
  804634:	010020b4 	movhi	r4,130
  804638:	21203204 	addi	r4,r4,-32568
  80463c:	080500c0 	call	80500c <__pack_d>
  804640:	dfc01217 	ldw	ra,72(sp)
  804644:	dcc01117 	ldw	r19,68(sp)
  804648:	dc801017 	ldw	r18,64(sp)
  80464c:	dc400f17 	ldw	r17,60(sp)
  804650:	dc000e17 	ldw	r16,56(sp)
  804654:	dec01304 	addi	sp,sp,76
  804658:	f800283a 	ret
  80465c:	29805b26 	beq	r5,r6,8047cc <__divdf3+0x244>
  804660:	28802d26 	beq	r5,r2,804718 <__divdf3+0x190>
  804664:	d8c00617 	ldw	r3,24(sp)
  804668:	d8800b17 	ldw	r2,44(sp)
  80466c:	d9c00817 	ldw	r7,32(sp)
  804670:	dc400d17 	ldw	r17,52(sp)
  804674:	188bc83a 	sub	r5,r3,r2
  804678:	d9800717 	ldw	r6,28(sp)
  80467c:	dc000c17 	ldw	r16,48(sp)
  804680:	d9400615 	stw	r5,24(sp)
  804684:	3c403836 	bltu	r7,r17,804768 <__divdf3+0x1e0>
  804688:	89c03626 	beq	r17,r7,804764 <__divdf3+0x1dc>
  80468c:	0015883a 	mov	r10,zero
  804690:	001d883a 	mov	r14,zero
  804694:	02c40034 	movhi	r11,4096
  804698:	001f883a 	mov	r15,zero
  80469c:	003f883a 	mov	ra,zero
  8046a0:	04800f44 	movi	r18,61
  8046a4:	00000f06 	br	8046e4 <__divdf3+0x15c>
  8046a8:	601d883a 	mov	r14,r12
  8046ac:	681f883a 	mov	r15,r13
  8046b0:	400d883a 	mov	r6,r8
  8046b4:	100f883a 	mov	r7,r2
  8046b8:	3191883a 	add	r8,r6,r6
  8046bc:	5808d07a 	srli	r4,r11,1
  8046c0:	4185803a 	cmpltu	r2,r8,r6
  8046c4:	39d3883a 	add	r9,r7,r7
  8046c8:	28c6b03a 	or	r3,r5,r3
  8046cc:	1245883a 	add	r2,r2,r9
  8046d0:	1815883a 	mov	r10,r3
  8046d4:	2017883a 	mov	r11,r4
  8046d8:	400d883a 	mov	r6,r8
  8046dc:	100f883a 	mov	r7,r2
  8046e0:	fc801726 	beq	ra,r18,804740 <__divdf3+0x1b8>
  8046e4:	580a97fa 	slli	r5,r11,31
  8046e8:	5006d07a 	srli	r3,r10,1
  8046ec:	ffc00044 	addi	ra,ra,1
  8046f0:	3c7ff136 	bltu	r7,r17,8046b8 <__divdf3+0x130>
  8046f4:	3411c83a 	sub	r8,r6,r16
  8046f8:	3205803a 	cmpltu	r2,r6,r8
  8046fc:	3c53c83a 	sub	r9,r7,r17
  804700:	7298b03a 	or	r12,r14,r10
  804704:	7adab03a 	or	r13,r15,r11
  804708:	4885c83a 	sub	r2,r9,r2
  80470c:	89ffe61e 	bne	r17,r7,8046a8 <__divdf3+0x120>
  804710:	343fe936 	bltu	r6,r16,8046b8 <__divdf3+0x130>
  804714:	003fe406 	br	8046a8 <__divdf3+0x120>
  804718:	9809883a 	mov	r4,r19
  80471c:	d9800415 	stw	r6,16(sp)
  804720:	080500c0 	call	80500c <__pack_d>
  804724:	dfc01217 	ldw	ra,72(sp)
  804728:	dcc01117 	ldw	r19,68(sp)
  80472c:	dc801017 	ldw	r18,64(sp)
  804730:	dc400f17 	ldw	r17,60(sp)
  804734:	dc000e17 	ldw	r16,56(sp)
  804738:	dec01304 	addi	sp,sp,76
  80473c:	f800283a 	ret
  804740:	00803fc4 	movi	r2,255
  804744:	7090703a 	and	r8,r14,r2
  804748:	00802004 	movi	r2,128
  80474c:	0007883a 	mov	r3,zero
  804750:	0013883a 	mov	r9,zero
  804754:	40800d26 	beq	r8,r2,80478c <__divdf3+0x204>
  804758:	dbc00815 	stw	r15,32(sp)
  80475c:	db800715 	stw	r14,28(sp)
  804760:	003fab06 	br	804610 <__divdf3+0x88>
  804764:	343fc92e 	bgeu	r6,r16,80468c <__divdf3+0x104>
  804768:	3185883a 	add	r2,r6,r6
  80476c:	1189803a 	cmpltu	r4,r2,r6
  804770:	39c7883a 	add	r3,r7,r7
  804774:	20c9883a 	add	r4,r4,r3
  804778:	297fffc4 	addi	r5,r5,-1
  80477c:	100d883a 	mov	r6,r2
  804780:	200f883a 	mov	r7,r4
  804784:	d9400615 	stw	r5,24(sp)
  804788:	003fc006 	br	80468c <__divdf3+0x104>
  80478c:	483ff21e 	bne	r9,zero,804758 <__divdf3+0x1d0>
  804790:	01004004 	movi	r4,256
  804794:	7104703a 	and	r2,r14,r4
  804798:	10c4b03a 	or	r2,r2,r3
  80479c:	103fee1e 	bne	r2,zero,804758 <__divdf3+0x1d0>
  8047a0:	31c4b03a 	or	r2,r6,r7
  8047a4:	103fec26 	beq	r2,zero,804758 <__divdf3+0x1d0>
  8047a8:	7205883a 	add	r2,r14,r8
  8047ac:	1391803a 	cmpltu	r8,r2,r14
  8047b0:	43d1883a 	add	r8,r8,r15
  8047b4:	013fc004 	movi	r4,-256
  8047b8:	111c703a 	and	r14,r2,r4
  8047bc:	401f883a 	mov	r15,r8
  8047c0:	003fe506 	br	804758 <__divdf3+0x1d0>
  8047c4:	8009883a 	mov	r4,r16
  8047c8:	003f9206 	br	804614 <__divdf3+0x8c>
  8047cc:	9809883a 	mov	r4,r19
  8047d0:	d8000715 	stw	zero,28(sp)
  8047d4:	d8000815 	stw	zero,32(sp)
  8047d8:	d8000615 	stw	zero,24(sp)
  8047dc:	003f8d06 	br	804614 <__divdf3+0x8c>

008047e0 <__eqdf2>:
  8047e0:	deffef04 	addi	sp,sp,-68
  8047e4:	dc400f15 	stw	r17,60(sp)
  8047e8:	dc400404 	addi	r17,sp,16
  8047ec:	2005883a 	mov	r2,r4
  8047f0:	2807883a 	mov	r3,r5
  8047f4:	dc000e15 	stw	r16,56(sp)
  8047f8:	d809883a 	mov	r4,sp
  8047fc:	880b883a 	mov	r5,r17
  804800:	dc000904 	addi	r16,sp,36
  804804:	d8c00115 	stw	r3,4(sp)
  804808:	d8800015 	stw	r2,0(sp)
  80480c:	d9800215 	stw	r6,8(sp)
  804810:	dfc01015 	stw	ra,64(sp)
  804814:	d9c00315 	stw	r7,12(sp)
  804818:	08053200 	call	805320 <__unpack_d>
  80481c:	d9000204 	addi	r4,sp,8
  804820:	800b883a 	mov	r5,r16
  804824:	08053200 	call	805320 <__unpack_d>
  804828:	d8800417 	ldw	r2,16(sp)
  80482c:	00c00044 	movi	r3,1
  804830:	180d883a 	mov	r6,r3
  804834:	1880062e 	bgeu	r3,r2,804850 <__eqdf2+0x70>
  804838:	d8800917 	ldw	r2,36(sp)
  80483c:	8809883a 	mov	r4,r17
  804840:	800b883a 	mov	r5,r16
  804844:	1880022e 	bgeu	r3,r2,804850 <__eqdf2+0x70>
  804848:	08054580 	call	805458 <__fpcmp_parts_d>
  80484c:	100d883a 	mov	r6,r2
  804850:	3005883a 	mov	r2,r6
  804854:	dfc01017 	ldw	ra,64(sp)
  804858:	dc400f17 	ldw	r17,60(sp)
  80485c:	dc000e17 	ldw	r16,56(sp)
  804860:	dec01104 	addi	sp,sp,68
  804864:	f800283a 	ret

00804868 <__gtdf2>:
  804868:	deffef04 	addi	sp,sp,-68
  80486c:	dc400f15 	stw	r17,60(sp)
  804870:	dc400404 	addi	r17,sp,16
  804874:	2005883a 	mov	r2,r4
  804878:	2807883a 	mov	r3,r5
  80487c:	dc000e15 	stw	r16,56(sp)
  804880:	d809883a 	mov	r4,sp
  804884:	880b883a 	mov	r5,r17
  804888:	dc000904 	addi	r16,sp,36
  80488c:	d8c00115 	stw	r3,4(sp)
  804890:	d8800015 	stw	r2,0(sp)
  804894:	d9800215 	stw	r6,8(sp)
  804898:	dfc01015 	stw	ra,64(sp)
  80489c:	d9c00315 	stw	r7,12(sp)
  8048a0:	08053200 	call	805320 <__unpack_d>
  8048a4:	d9000204 	addi	r4,sp,8
  8048a8:	800b883a 	mov	r5,r16
  8048ac:	08053200 	call	805320 <__unpack_d>
  8048b0:	d8800417 	ldw	r2,16(sp)
  8048b4:	00c00044 	movi	r3,1
  8048b8:	01bfffc4 	movi	r6,-1
  8048bc:	1880062e 	bgeu	r3,r2,8048d8 <__gtdf2+0x70>
  8048c0:	d8800917 	ldw	r2,36(sp)
  8048c4:	8809883a 	mov	r4,r17
  8048c8:	800b883a 	mov	r5,r16
  8048cc:	1880022e 	bgeu	r3,r2,8048d8 <__gtdf2+0x70>
  8048d0:	08054580 	call	805458 <__fpcmp_parts_d>
  8048d4:	100d883a 	mov	r6,r2
  8048d8:	3005883a 	mov	r2,r6
  8048dc:	dfc01017 	ldw	ra,64(sp)
  8048e0:	dc400f17 	ldw	r17,60(sp)
  8048e4:	dc000e17 	ldw	r16,56(sp)
  8048e8:	dec01104 	addi	sp,sp,68
  8048ec:	f800283a 	ret

008048f0 <__gedf2>:
  8048f0:	deffef04 	addi	sp,sp,-68
  8048f4:	dc400f15 	stw	r17,60(sp)
  8048f8:	dc400404 	addi	r17,sp,16
  8048fc:	2005883a 	mov	r2,r4
  804900:	2807883a 	mov	r3,r5
  804904:	dc000e15 	stw	r16,56(sp)
  804908:	d809883a 	mov	r4,sp
  80490c:	880b883a 	mov	r5,r17
  804910:	dc000904 	addi	r16,sp,36
  804914:	d8c00115 	stw	r3,4(sp)
  804918:	d8800015 	stw	r2,0(sp)
  80491c:	d9800215 	stw	r6,8(sp)
  804920:	dfc01015 	stw	ra,64(sp)
  804924:	d9c00315 	stw	r7,12(sp)
  804928:	08053200 	call	805320 <__unpack_d>
  80492c:	d9000204 	addi	r4,sp,8
  804930:	800b883a 	mov	r5,r16
  804934:	08053200 	call	805320 <__unpack_d>
  804938:	d8800417 	ldw	r2,16(sp)
  80493c:	00c00044 	movi	r3,1
  804940:	01bfffc4 	movi	r6,-1
  804944:	1880062e 	bgeu	r3,r2,804960 <__gedf2+0x70>
  804948:	d8800917 	ldw	r2,36(sp)
  80494c:	8809883a 	mov	r4,r17
  804950:	800b883a 	mov	r5,r16
  804954:	1880022e 	bgeu	r3,r2,804960 <__gedf2+0x70>
  804958:	08054580 	call	805458 <__fpcmp_parts_d>
  80495c:	100d883a 	mov	r6,r2
  804960:	3005883a 	mov	r2,r6
  804964:	dfc01017 	ldw	ra,64(sp)
  804968:	dc400f17 	ldw	r17,60(sp)
  80496c:	dc000e17 	ldw	r16,56(sp)
  804970:	dec01104 	addi	sp,sp,68
  804974:	f800283a 	ret

00804978 <__floatsidf>:
  804978:	2006d7fa 	srli	r3,r4,31
  80497c:	defff604 	addi	sp,sp,-40
  804980:	008000c4 	movi	r2,3
  804984:	dfc00915 	stw	ra,36(sp)
  804988:	dcc00815 	stw	r19,32(sp)
  80498c:	dc800715 	stw	r18,28(sp)
  804990:	dc400615 	stw	r17,24(sp)
  804994:	dc000515 	stw	r16,20(sp)
  804998:	d8800015 	stw	r2,0(sp)
  80499c:	d8c00115 	stw	r3,4(sp)
  8049a0:	20000f1e 	bne	r4,zero,8049e0 <__floatsidf+0x68>
  8049a4:	00800084 	movi	r2,2
  8049a8:	d8800015 	stw	r2,0(sp)
  8049ac:	d809883a 	mov	r4,sp
  8049b0:	080500c0 	call	80500c <__pack_d>
  8049b4:	1009883a 	mov	r4,r2
  8049b8:	180b883a 	mov	r5,r3
  8049bc:	2005883a 	mov	r2,r4
  8049c0:	2807883a 	mov	r3,r5
  8049c4:	dfc00917 	ldw	ra,36(sp)
  8049c8:	dcc00817 	ldw	r19,32(sp)
  8049cc:	dc800717 	ldw	r18,28(sp)
  8049d0:	dc400617 	ldw	r17,24(sp)
  8049d4:	dc000517 	ldw	r16,20(sp)
  8049d8:	dec00a04 	addi	sp,sp,40
  8049dc:	f800283a 	ret
  8049e0:	00800f04 	movi	r2,60
  8049e4:	1807003a 	cmpeq	r3,r3,zero
  8049e8:	d8800215 	stw	r2,8(sp)
  8049ec:	18001126 	beq	r3,zero,804a34 <__floatsidf+0xbc>
  8049f0:	0027883a 	mov	r19,zero
  8049f4:	2025883a 	mov	r18,r4
  8049f8:	d9000315 	stw	r4,12(sp)
  8049fc:	dcc00415 	stw	r19,16(sp)
  804a00:	0804d640 	call	804d64 <__clzsi2>
  804a04:	11000744 	addi	r4,r2,29
  804a08:	013fe80e 	bge	zero,r4,8049ac <__floatsidf+0x34>
  804a0c:	10bfff44 	addi	r2,r2,-3
  804a10:	10000c16 	blt	r2,zero,804a44 <__floatsidf+0xcc>
  804a14:	90a2983a 	sll	r17,r18,r2
  804a18:	0021883a 	mov	r16,zero
  804a1c:	d8800217 	ldw	r2,8(sp)
  804a20:	dc400415 	stw	r17,16(sp)
  804a24:	dc000315 	stw	r16,12(sp)
  804a28:	1105c83a 	sub	r2,r2,r4
  804a2c:	d8800215 	stw	r2,8(sp)
  804a30:	003fde06 	br	8049ac <__floatsidf+0x34>
  804a34:	00a00034 	movhi	r2,32768
  804a38:	20800a26 	beq	r4,r2,804a64 <__floatsidf+0xec>
  804a3c:	0109c83a 	sub	r4,zero,r4
  804a40:	003feb06 	br	8049f0 <__floatsidf+0x78>
  804a44:	9006d07a 	srli	r3,r18,1
  804a48:	008007c4 	movi	r2,31
  804a4c:	1105c83a 	sub	r2,r2,r4
  804a50:	1886d83a 	srl	r3,r3,r2
  804a54:	9922983a 	sll	r17,r19,r4
  804a58:	9120983a 	sll	r16,r18,r4
  804a5c:	1c62b03a 	or	r17,r3,r17
  804a60:	003fee06 	br	804a1c <__floatsidf+0xa4>
  804a64:	0009883a 	mov	r4,zero
  804a68:	01707834 	movhi	r5,49632
  804a6c:	003fd306 	br	8049bc <__floatsidf+0x44>

00804a70 <__fixdfsi>:
  804a70:	defff804 	addi	sp,sp,-32
  804a74:	2005883a 	mov	r2,r4
  804a78:	2807883a 	mov	r3,r5
  804a7c:	d809883a 	mov	r4,sp
  804a80:	d9400204 	addi	r5,sp,8
  804a84:	d8c00115 	stw	r3,4(sp)
  804a88:	d8800015 	stw	r2,0(sp)
  804a8c:	dfc00715 	stw	ra,28(sp)
  804a90:	08053200 	call	805320 <__unpack_d>
  804a94:	d8c00217 	ldw	r3,8(sp)
  804a98:	00800084 	movi	r2,2
  804a9c:	1880051e 	bne	r3,r2,804ab4 <__fixdfsi+0x44>
  804aa0:	0007883a 	mov	r3,zero
  804aa4:	1805883a 	mov	r2,r3
  804aa8:	dfc00717 	ldw	ra,28(sp)
  804aac:	dec00804 	addi	sp,sp,32
  804ab0:	f800283a 	ret
  804ab4:	00800044 	movi	r2,1
  804ab8:	10fff92e 	bgeu	r2,r3,804aa0 <__fixdfsi+0x30>
  804abc:	00800104 	movi	r2,4
  804ac0:	18800426 	beq	r3,r2,804ad4 <__fixdfsi+0x64>
  804ac4:	d8c00417 	ldw	r3,16(sp)
  804ac8:	183ff516 	blt	r3,zero,804aa0 <__fixdfsi+0x30>
  804acc:	00800784 	movi	r2,30
  804ad0:	10c0080e 	bge	r2,r3,804af4 <__fixdfsi+0x84>
  804ad4:	d8800317 	ldw	r2,12(sp)
  804ad8:	1000121e 	bne	r2,zero,804b24 <__fixdfsi+0xb4>
  804adc:	00e00034 	movhi	r3,32768
  804ae0:	18ffffc4 	addi	r3,r3,-1
  804ae4:	1805883a 	mov	r2,r3
  804ae8:	dfc00717 	ldw	ra,28(sp)
  804aec:	dec00804 	addi	sp,sp,32
  804af0:	f800283a 	ret
  804af4:	00800f04 	movi	r2,60
  804af8:	10d1c83a 	sub	r8,r2,r3
  804afc:	40bff804 	addi	r2,r8,-32
  804b00:	d9800517 	ldw	r6,20(sp)
  804b04:	d9c00617 	ldw	r7,24(sp)
  804b08:	10000816 	blt	r2,zero,804b2c <__fixdfsi+0xbc>
  804b0c:	3888d83a 	srl	r4,r7,r2
  804b10:	d8800317 	ldw	r2,12(sp)
  804b14:	2007883a 	mov	r3,r4
  804b18:	103fe226 	beq	r2,zero,804aa4 <__fixdfsi+0x34>
  804b1c:	0107c83a 	sub	r3,zero,r4
  804b20:	003fe006 	br	804aa4 <__fixdfsi+0x34>
  804b24:	00e00034 	movhi	r3,32768
  804b28:	003fde06 	br	804aa4 <__fixdfsi+0x34>
  804b2c:	39c7883a 	add	r3,r7,r7
  804b30:	008007c4 	movi	r2,31
  804b34:	1205c83a 	sub	r2,r2,r8
  804b38:	1886983a 	sll	r3,r3,r2
  804b3c:	3208d83a 	srl	r4,r6,r8
  804b40:	1908b03a 	or	r4,r3,r4
  804b44:	003ff206 	br	804b10 <__fixdfsi+0xa0>

00804b48 <__make_dp>:
  804b48:	defff904 	addi	sp,sp,-28
  804b4c:	d8c00717 	ldw	r3,28(sp)
  804b50:	d9000015 	stw	r4,0(sp)
  804b54:	d809883a 	mov	r4,sp
  804b58:	dfc00515 	stw	ra,20(sp)
  804b5c:	d9c00615 	stw	r7,24(sp)
  804b60:	d9400115 	stw	r5,4(sp)
  804b64:	d9800215 	stw	r6,8(sp)
  804b68:	d8c00415 	stw	r3,16(sp)
  804b6c:	d9c00315 	stw	r7,12(sp)
  804b70:	080500c0 	call	80500c <__pack_d>
  804b74:	dfc00517 	ldw	ra,20(sp)
  804b78:	dec00704 	addi	sp,sp,28
  804b7c:	f800283a 	ret

00804b80 <udivmodsi4>:
  804b80:	29001b2e 	bgeu	r5,r4,804bf0 <udivmodsi4+0x70>
  804b84:	28001a16 	blt	r5,zero,804bf0 <udivmodsi4+0x70>
  804b88:	00800044 	movi	r2,1
  804b8c:	0007883a 	mov	r3,zero
  804b90:	01c007c4 	movi	r7,31
  804b94:	00000306 	br	804ba4 <udivmodsi4+0x24>
  804b98:	19c01326 	beq	r3,r7,804be8 <udivmodsi4+0x68>
  804b9c:	18c00044 	addi	r3,r3,1
  804ba0:	28000416 	blt	r5,zero,804bb4 <udivmodsi4+0x34>
  804ba4:	294b883a 	add	r5,r5,r5
  804ba8:	1085883a 	add	r2,r2,r2
  804bac:	293ffa36 	bltu	r5,r4,804b98 <udivmodsi4+0x18>
  804bb0:	10000d26 	beq	r2,zero,804be8 <udivmodsi4+0x68>
  804bb4:	0007883a 	mov	r3,zero
  804bb8:	21400236 	bltu	r4,r5,804bc4 <udivmodsi4+0x44>
  804bbc:	2149c83a 	sub	r4,r4,r5
  804bc0:	1886b03a 	or	r3,r3,r2
  804bc4:	1004d07a 	srli	r2,r2,1
  804bc8:	280ad07a 	srli	r5,r5,1
  804bcc:	103ffa1e 	bne	r2,zero,804bb8 <udivmodsi4+0x38>
  804bd0:	30000226 	beq	r6,zero,804bdc <udivmodsi4+0x5c>
  804bd4:	2005883a 	mov	r2,r4
  804bd8:	f800283a 	ret
  804bdc:	1809883a 	mov	r4,r3
  804be0:	2005883a 	mov	r2,r4
  804be4:	f800283a 	ret
  804be8:	0007883a 	mov	r3,zero
  804bec:	003ff806 	br	804bd0 <udivmodsi4+0x50>
  804bf0:	00800044 	movi	r2,1
  804bf4:	0007883a 	mov	r3,zero
  804bf8:	003fef06 	br	804bb8 <udivmodsi4+0x38>

00804bfc <__divsi3>:
  804bfc:	defffe04 	addi	sp,sp,-8
  804c00:	dc000015 	stw	r16,0(sp)
  804c04:	dfc00115 	stw	ra,4(sp)
  804c08:	0021883a 	mov	r16,zero
  804c0c:	20000c16 	blt	r4,zero,804c40 <__divsi3+0x44>
  804c10:	000d883a 	mov	r6,zero
  804c14:	28000e16 	blt	r5,zero,804c50 <__divsi3+0x54>
  804c18:	0804b800 	call	804b80 <udivmodsi4>
  804c1c:	1007883a 	mov	r3,r2
  804c20:	8005003a 	cmpeq	r2,r16,zero
  804c24:	1000011e 	bne	r2,zero,804c2c <__divsi3+0x30>
  804c28:	00c7c83a 	sub	r3,zero,r3
  804c2c:	1805883a 	mov	r2,r3
  804c30:	dfc00117 	ldw	ra,4(sp)
  804c34:	dc000017 	ldw	r16,0(sp)
  804c38:	dec00204 	addi	sp,sp,8
  804c3c:	f800283a 	ret
  804c40:	0109c83a 	sub	r4,zero,r4
  804c44:	04000044 	movi	r16,1
  804c48:	000d883a 	mov	r6,zero
  804c4c:	283ff20e 	bge	r5,zero,804c18 <__divsi3+0x1c>
  804c50:	014bc83a 	sub	r5,zero,r5
  804c54:	8021003a 	cmpeq	r16,r16,zero
  804c58:	003fef06 	br	804c18 <__divsi3+0x1c>

00804c5c <__modsi3>:
  804c5c:	deffff04 	addi	sp,sp,-4
  804c60:	dfc00015 	stw	ra,0(sp)
  804c64:	01800044 	movi	r6,1
  804c68:	2807883a 	mov	r3,r5
  804c6c:	20000416 	blt	r4,zero,804c80 <__modsi3+0x24>
  804c70:	28000c16 	blt	r5,zero,804ca4 <__modsi3+0x48>
  804c74:	dfc00017 	ldw	ra,0(sp)
  804c78:	dec00104 	addi	sp,sp,4
  804c7c:	0804b801 	jmpi	804b80 <udivmodsi4>
  804c80:	0109c83a 	sub	r4,zero,r4
  804c84:	28000b16 	blt	r5,zero,804cb4 <__modsi3+0x58>
  804c88:	180b883a 	mov	r5,r3
  804c8c:	01800044 	movi	r6,1
  804c90:	0804b800 	call	804b80 <udivmodsi4>
  804c94:	0085c83a 	sub	r2,zero,r2
  804c98:	dfc00017 	ldw	ra,0(sp)
  804c9c:	dec00104 	addi	sp,sp,4
  804ca0:	f800283a 	ret
  804ca4:	014bc83a 	sub	r5,zero,r5
  804ca8:	dfc00017 	ldw	ra,0(sp)
  804cac:	dec00104 	addi	sp,sp,4
  804cb0:	0804b801 	jmpi	804b80 <udivmodsi4>
  804cb4:	0147c83a 	sub	r3,zero,r5
  804cb8:	003ff306 	br	804c88 <__modsi3+0x2c>

00804cbc <__udivsi3>:
  804cbc:	000d883a 	mov	r6,zero
  804cc0:	0804b801 	jmpi	804b80 <udivmodsi4>

00804cc4 <__umodsi3>:
  804cc4:	01800044 	movi	r6,1
  804cc8:	0804b801 	jmpi	804b80 <udivmodsi4>

00804ccc <__muldi3>:
  804ccc:	2011883a 	mov	r8,r4
  804cd0:	427fffcc 	andi	r9,r8,65535
  804cd4:	4018d43a 	srli	r12,r8,16
  804cd8:	32bfffcc 	andi	r10,r6,65535
  804cdc:	3016d43a 	srli	r11,r6,16
  804ce0:	4a85383a 	mul	r2,r9,r10
  804ce4:	6295383a 	mul	r10,r12,r10
  804ce8:	4ad3383a 	mul	r9,r9,r11
  804cec:	113fffcc 	andi	r4,r2,65535
  804cf0:	1004d43a 	srli	r2,r2,16
  804cf4:	4a93883a 	add	r9,r9,r10
  804cf8:	3807883a 	mov	r3,r7
  804cfc:	1245883a 	add	r2,r2,r9
  804d00:	280f883a 	mov	r7,r5
  804d04:	180b883a 	mov	r5,r3
  804d08:	1006943a 	slli	r3,r2,16
  804d0c:	defffd04 	addi	sp,sp,-12
  804d10:	dc800215 	stw	r18,8(sp)
  804d14:	1907883a 	add	r3,r3,r4
  804d18:	dc400115 	stw	r17,4(sp)
  804d1c:	dc000015 	stw	r16,0(sp)
  804d20:	4165383a 	mul	r18,r8,r5
  804d24:	31e3383a 	mul	r17,r6,r7
  804d28:	1012d43a 	srli	r9,r2,16
  804d2c:	62d9383a 	mul	r12,r12,r11
  804d30:	181f883a 	mov	r15,r3
  804d34:	1280022e 	bgeu	r2,r10,804d40 <__muldi3+0x74>
  804d38:	00800074 	movhi	r2,1
  804d3c:	6099883a 	add	r12,r12,r2
  804d40:	624d883a 	add	r6,r12,r9
  804d44:	9187883a 	add	r3,r18,r6
  804d48:	88c7883a 	add	r3,r17,r3
  804d4c:	7805883a 	mov	r2,r15
  804d50:	dc800217 	ldw	r18,8(sp)
  804d54:	dc400117 	ldw	r17,4(sp)
  804d58:	dc000017 	ldw	r16,0(sp)
  804d5c:	dec00304 	addi	sp,sp,12
  804d60:	f800283a 	ret

00804d64 <__clzsi2>:
  804d64:	00bfffd4 	movui	r2,65535
  804d68:	11000e36 	bltu	r2,r4,804da4 <__clzsi2+0x40>
  804d6c:	00803fc4 	movi	r2,255
  804d70:	01400204 	movi	r5,8
  804d74:	0007883a 	mov	r3,zero
  804d78:	11001036 	bltu	r2,r4,804dbc <__clzsi2+0x58>
  804d7c:	000b883a 	mov	r5,zero
  804d80:	20c6d83a 	srl	r3,r4,r3
  804d84:	008020b4 	movhi	r2,130
  804d88:	10a03704 	addi	r2,r2,-32548
  804d8c:	1887883a 	add	r3,r3,r2
  804d90:	18800003 	ldbu	r2,0(r3)
  804d94:	00c00804 	movi	r3,32
  804d98:	2885883a 	add	r2,r5,r2
  804d9c:	1885c83a 	sub	r2,r3,r2
  804da0:	f800283a 	ret
  804da4:	01400404 	movi	r5,16
  804da8:	00804034 	movhi	r2,256
  804dac:	10bfffc4 	addi	r2,r2,-1
  804db0:	2807883a 	mov	r3,r5
  804db4:	113ff22e 	bgeu	r2,r4,804d80 <__clzsi2+0x1c>
  804db8:	01400604 	movi	r5,24
  804dbc:	2807883a 	mov	r3,r5
  804dc0:	20c6d83a 	srl	r3,r4,r3
  804dc4:	008020b4 	movhi	r2,130
  804dc8:	10a03704 	addi	r2,r2,-32548
  804dcc:	1887883a 	add	r3,r3,r2
  804dd0:	18800003 	ldbu	r2,0(r3)
  804dd4:	00c00804 	movi	r3,32
  804dd8:	2885883a 	add	r2,r5,r2
  804ddc:	1885c83a 	sub	r2,r3,r2
  804de0:	f800283a 	ret

00804de4 <__pack_f>:
  804de4:	20c00017 	ldw	r3,0(r4)
  804de8:	01c00044 	movi	r7,1
  804dec:	21800317 	ldw	r6,12(r4)
  804df0:	21400117 	ldw	r5,4(r4)
  804df4:	38c02d2e 	bgeu	r7,r3,804eac <__pack_f+0xc8>
  804df8:	00800104 	movi	r2,4
  804dfc:	18802826 	beq	r3,r2,804ea0 <__pack_f+0xbc>
  804e00:	00800084 	movi	r2,2
  804e04:	18800126 	beq	r3,r2,804e0c <__pack_f+0x28>
  804e08:	3000101e 	bne	r6,zero,804e4c <__pack_f+0x68>
  804e0c:	000d883a 	mov	r6,zero
  804e10:	0007883a 	mov	r3,zero
  804e14:	19003fcc 	andi	r4,r3,255
  804e18:	200895fa 	slli	r4,r4,23
  804e1c:	00c02034 	movhi	r3,128
  804e20:	18ffffc4 	addi	r3,r3,-1
  804e24:	30c6703a 	and	r3,r6,r3
  804e28:	10a0002c 	andhi	r2,r2,32768
  804e2c:	10c4b03a 	or	r2,r2,r3
  804e30:	280a97fa 	slli	r5,r5,31
  804e34:	1104b03a 	or	r2,r2,r4
  804e38:	00e00034 	movhi	r3,32768
  804e3c:	18ffffc4 	addi	r3,r3,-1
  804e40:	10c4703a 	and	r2,r2,r3
  804e44:	1144b03a 	or	r2,r2,r5
  804e48:	f800283a 	ret
  804e4c:	21000217 	ldw	r4,8(r4)
  804e50:	00bfe084 	movi	r2,-126
  804e54:	20801b16 	blt	r4,r2,804ec4 <__pack_f+0xe0>
  804e58:	00801fc4 	movi	r2,127
  804e5c:	11001016 	blt	r2,r4,804ea0 <__pack_f+0xbc>
  804e60:	308e703a 	and	r7,r6,r2
  804e64:	2087883a 	add	r3,r4,r2
  804e68:	00801004 	movi	r2,64
  804e6c:	38800526 	beq	r7,r2,804e84 <__pack_f+0xa0>
  804e70:	31800fc4 	addi	r6,r6,63
  804e74:	30000716 	blt	r6,zero,804e94 <__pack_f+0xb0>
  804e78:	300490ba 	slli	r2,r6,2
  804e7c:	100cd27a 	srli	r6,r2,9
  804e80:	003fe406 	br	804e14 <__pack_f+0x30>
  804e84:	3080200c 	andi	r2,r6,128
  804e88:	103ffa26 	beq	r2,zero,804e74 <__pack_f+0x90>
  804e8c:	31cd883a 	add	r6,r6,r7
  804e90:	003ff806 	br	804e74 <__pack_f+0x90>
  804e94:	300cd07a 	srli	r6,r6,1
  804e98:	18c00044 	addi	r3,r3,1
  804e9c:	003ff606 	br	804e78 <__pack_f+0x94>
  804ea0:	000d883a 	mov	r6,zero
  804ea4:	00ffffc4 	movi	r3,-1
  804ea8:	003fda06 	br	804e14 <__pack_f+0x30>
  804eac:	31800434 	orhi	r6,r6,16
  804eb0:	00802034 	movhi	r2,128
  804eb4:	10bfffc4 	addi	r2,r2,-1
  804eb8:	308c703a 	and	r6,r6,r2
  804ebc:	00ffffc4 	movi	r3,-1
  804ec0:	003fd406 	br	804e14 <__pack_f+0x30>
  804ec4:	1109c83a 	sub	r4,r2,r4
  804ec8:	00800644 	movi	r2,25
  804ecc:	11001216 	blt	r2,r4,804f18 <__pack_f+0x134>
  804ed0:	3904983a 	sll	r2,r7,r4
  804ed4:	3106d83a 	srl	r3,r6,r4
  804ed8:	10bfffc4 	addi	r2,r2,-1
  804edc:	3084703a 	and	r2,r6,r2
  804ee0:	1004c03a 	cmpne	r2,r2,zero
  804ee4:	1886b03a 	or	r3,r3,r2
  804ee8:	19001fcc 	andi	r4,r3,127
  804eec:	00801004 	movi	r2,64
  804ef0:	20800c26 	beq	r4,r2,804f24 <__pack_f+0x140>
  804ef4:	18c00fc4 	addi	r3,r3,63
  804ef8:	00900034 	movhi	r2,16384
  804efc:	10bfffc4 	addi	r2,r2,-1
  804f00:	180cd1fa 	srli	r6,r3,7
  804f04:	10c7803a 	cmpltu	r3,r2,r3
  804f08:	00802034 	movhi	r2,128
  804f0c:	10bfffc4 	addi	r2,r2,-1
  804f10:	308c703a 	and	r6,r6,r2
  804f14:	003fbf06 	br	804e14 <__pack_f+0x30>
  804f18:	0007883a 	mov	r3,zero
  804f1c:	000d883a 	mov	r6,zero
  804f20:	003ff906 	br	804f08 <__pack_f+0x124>
  804f24:	1880200c 	andi	r2,r3,128
  804f28:	10000126 	beq	r2,zero,804f30 <__pack_f+0x14c>
  804f2c:	1907883a 	add	r3,r3,r4
  804f30:	180cd1fa 	srli	r6,r3,7
  804f34:	00900034 	movhi	r2,16384
  804f38:	10bfffc4 	addi	r2,r2,-1
  804f3c:	10c7803a 	cmpltu	r3,r2,r3
  804f40:	003ff106 	br	804f08 <__pack_f+0x124>

00804f44 <__unpack_f>:
  804f44:	21800017 	ldw	r6,0(r4)
  804f48:	00c02034 	movhi	r3,128
  804f4c:	18ffffc4 	addi	r3,r3,-1
  804f50:	3004d5fa 	srli	r2,r6,23
  804f54:	3008d7fa 	srli	r4,r6,31
  804f58:	30ce703a 	and	r7,r6,r3
  804f5c:	10c03fcc 	andi	r3,r2,255
  804f60:	29000115 	stw	r4,4(r5)
  804f64:	1800131e 	bne	r3,zero,804fb4 <__unpack_f+0x70>
  804f68:	38000f26 	beq	r7,zero,804fa8 <__unpack_f+0x64>
  804f6c:	380691fa 	slli	r3,r7,7
  804f70:	01bfe084 	movi	r6,-126
  804f74:	008000c4 	movi	r2,3
  804f78:	01100034 	movhi	r4,16384
  804f7c:	213fffc4 	addi	r4,r4,-1
  804f80:	28800015 	stw	r2,0(r5)
  804f84:	29800215 	stw	r6,8(r5)
  804f88:	20c00536 	bltu	r4,r3,804fa0 <__unpack_f+0x5c>
  804f8c:	3005883a 	mov	r2,r6
  804f90:	18c7883a 	add	r3,r3,r3
  804f94:	10bfffc4 	addi	r2,r2,-1
  804f98:	20fffd2e 	bgeu	r4,r3,804f90 <__unpack_f+0x4c>
  804f9c:	28800215 	stw	r2,8(r5)
  804fa0:	28c00315 	stw	r3,12(r5)
  804fa4:	f800283a 	ret
  804fa8:	00800084 	movi	r2,2
  804fac:	28800015 	stw	r2,0(r5)
  804fb0:	f800283a 	ret
  804fb4:	00803fc4 	movi	r2,255
  804fb8:	18800826 	beq	r3,r2,804fdc <__unpack_f+0x98>
  804fbc:	380491fa 	slli	r2,r7,7
  804fc0:	18ffe044 	addi	r3,r3,-127
  804fc4:	28c00215 	stw	r3,8(r5)
  804fc8:	10900034 	orhi	r2,r2,16384
  804fcc:	28800315 	stw	r2,12(r5)
  804fd0:	008000c4 	movi	r2,3
  804fd4:	28800015 	stw	r2,0(r5)
  804fd8:	f800283a 	ret
  804fdc:	3800031e 	bne	r7,zero,804fec <__unpack_f+0xa8>
  804fe0:	00800104 	movi	r2,4
  804fe4:	28800015 	stw	r2,0(r5)
  804fe8:	f800283a 	ret
  804fec:	3080042c 	andhi	r2,r6,16
  804ff0:	10000426 	beq	r2,zero,805004 <__unpack_f+0xc0>
  804ff4:	00800044 	movi	r2,1
  804ff8:	28800015 	stw	r2,0(r5)
  804ffc:	29c00315 	stw	r7,12(r5)
  805000:	f800283a 	ret
  805004:	28000015 	stw	zero,0(r5)
  805008:	003ffc06 	br	804ffc <__unpack_f+0xb8>

0080500c <__pack_d>:
  80500c:	20c00017 	ldw	r3,0(r4)
  805010:	defffd04 	addi	sp,sp,-12
  805014:	dc000015 	stw	r16,0(sp)
  805018:	dc800215 	stw	r18,8(sp)
  80501c:	dc400115 	stw	r17,4(sp)
  805020:	00800044 	movi	r2,1
  805024:	22000317 	ldw	r8,12(r4)
  805028:	001f883a 	mov	r15,zero
  80502c:	22400417 	ldw	r9,16(r4)
  805030:	24000117 	ldw	r16,4(r4)
  805034:	10c0552e 	bgeu	r2,r3,80518c <__pack_d+0x180>
  805038:	00800104 	movi	r2,4
  80503c:	18804f26 	beq	r3,r2,80517c <__pack_d+0x170>
  805040:	00800084 	movi	r2,2
  805044:	18800226 	beq	r3,r2,805050 <__pack_d+0x44>
  805048:	4244b03a 	or	r2,r8,r9
  80504c:	10001a1e 	bne	r2,zero,8050b8 <__pack_d+0xac>
  805050:	000d883a 	mov	r6,zero
  805054:	000f883a 	mov	r7,zero
  805058:	0011883a 	mov	r8,zero
  80505c:	00800434 	movhi	r2,16
  805060:	10bfffc4 	addi	r2,r2,-1
  805064:	301d883a 	mov	r14,r6
  805068:	3884703a 	and	r2,r7,r2
  80506c:	400a953a 	slli	r5,r8,20
  805070:	79bffc2c 	andhi	r6,r15,65520
  805074:	308cb03a 	or	r6,r6,r2
  805078:	00e00434 	movhi	r3,32784
  80507c:	18ffffc4 	addi	r3,r3,-1
  805080:	800497fa 	slli	r2,r16,31
  805084:	30c6703a 	and	r3,r6,r3
  805088:	1946b03a 	or	r3,r3,r5
  80508c:	01600034 	movhi	r5,32768
  805090:	297fffc4 	addi	r5,r5,-1
  805094:	194a703a 	and	r5,r3,r5
  805098:	288ab03a 	or	r5,r5,r2
  80509c:	2807883a 	mov	r3,r5
  8050a0:	7005883a 	mov	r2,r14
  8050a4:	dc800217 	ldw	r18,8(sp)
  8050a8:	dc400117 	ldw	r17,4(sp)
  8050ac:	dc000017 	ldw	r16,0(sp)
  8050b0:	dec00304 	addi	sp,sp,12
  8050b4:	f800283a 	ret
  8050b8:	21000217 	ldw	r4,8(r4)
  8050bc:	00bf0084 	movi	r2,-1022
  8050c0:	20803f16 	blt	r4,r2,8051c0 <__pack_d+0x1b4>
  8050c4:	0080ffc4 	movi	r2,1023
  8050c8:	11002c16 	blt	r2,r4,80517c <__pack_d+0x170>
  8050cc:	00803fc4 	movi	r2,255
  8050d0:	408c703a 	and	r6,r8,r2
  8050d4:	00802004 	movi	r2,128
  8050d8:	0007883a 	mov	r3,zero
  8050dc:	000f883a 	mov	r7,zero
  8050e0:	2280ffc4 	addi	r10,r4,1023
  8050e4:	30801e26 	beq	r6,r2,805160 <__pack_d+0x154>
  8050e8:	00801fc4 	movi	r2,127
  8050ec:	4089883a 	add	r4,r8,r2
  8050f0:	220d803a 	cmpltu	r6,r4,r8
  8050f4:	324d883a 	add	r6,r6,r9
  8050f8:	2011883a 	mov	r8,r4
  8050fc:	3013883a 	mov	r9,r6
  805100:	00880034 	movhi	r2,8192
  805104:	10bfffc4 	addi	r2,r2,-1
  805108:	12400d36 	bltu	r2,r9,805140 <__pack_d+0x134>
  80510c:	4804963a 	slli	r2,r9,24
  805110:	400cd23a 	srli	r6,r8,8
  805114:	480ed23a 	srli	r7,r9,8
  805118:	013fffc4 	movi	r4,-1
  80511c:	118cb03a 	or	r6,r2,r6
  805120:	01400434 	movhi	r5,16
  805124:	297fffc4 	addi	r5,r5,-1
  805128:	3104703a 	and	r2,r6,r4
  80512c:	3946703a 	and	r3,r7,r5
  805130:	5201ffcc 	andi	r8,r10,2047
  805134:	100d883a 	mov	r6,r2
  805138:	180f883a 	mov	r7,r3
  80513c:	003fc706 	br	80505c <__pack_d+0x50>
  805140:	480897fa 	slli	r4,r9,31
  805144:	4004d07a 	srli	r2,r8,1
  805148:	4806d07a 	srli	r3,r9,1
  80514c:	52800044 	addi	r10,r10,1
  805150:	2084b03a 	or	r2,r4,r2
  805154:	1011883a 	mov	r8,r2
  805158:	1813883a 	mov	r9,r3
  80515c:	003feb06 	br	80510c <__pack_d+0x100>
  805160:	383fe11e 	bne	r7,zero,8050e8 <__pack_d+0xdc>
  805164:	01004004 	movi	r4,256
  805168:	4104703a 	and	r2,r8,r4
  80516c:	10c4b03a 	or	r2,r2,r3
  805170:	103fe326 	beq	r2,zero,805100 <__pack_d+0xf4>
  805174:	3005883a 	mov	r2,r6
  805178:	003fdc06 	br	8050ec <__pack_d+0xe0>
  80517c:	000d883a 	mov	r6,zero
  805180:	000f883a 	mov	r7,zero
  805184:	0201ffc4 	movi	r8,2047
  805188:	003fb406 	br	80505c <__pack_d+0x50>
  80518c:	0005883a 	mov	r2,zero
  805190:	00c00234 	movhi	r3,8
  805194:	408cb03a 	or	r6,r8,r2
  805198:	48ceb03a 	or	r7,r9,r3
  80519c:	013fffc4 	movi	r4,-1
  8051a0:	01400434 	movhi	r5,16
  8051a4:	297fffc4 	addi	r5,r5,-1
  8051a8:	3104703a 	and	r2,r6,r4
  8051ac:	3946703a 	and	r3,r7,r5
  8051b0:	100d883a 	mov	r6,r2
  8051b4:	180f883a 	mov	r7,r3
  8051b8:	0201ffc4 	movi	r8,2047
  8051bc:	003fa706 	br	80505c <__pack_d+0x50>
  8051c0:	1109c83a 	sub	r4,r2,r4
  8051c4:	00800e04 	movi	r2,56
  8051c8:	11004316 	blt	r2,r4,8052d8 <__pack_d+0x2cc>
  8051cc:	21fff804 	addi	r7,r4,-32
  8051d0:	38004516 	blt	r7,zero,8052e8 <__pack_d+0x2dc>
  8051d4:	49d8d83a 	srl	r12,r9,r7
  8051d8:	001b883a 	mov	r13,zero
  8051dc:	0023883a 	mov	r17,zero
  8051e0:	01400044 	movi	r5,1
  8051e4:	0025883a 	mov	r18,zero
  8051e8:	38004716 	blt	r7,zero,805308 <__pack_d+0x2fc>
  8051ec:	29d6983a 	sll	r11,r5,r7
  8051f0:	0015883a 	mov	r10,zero
  8051f4:	00bfffc4 	movi	r2,-1
  8051f8:	5089883a 	add	r4,r10,r2
  8051fc:	588b883a 	add	r5,r11,r2
  805200:	228d803a 	cmpltu	r6,r4,r10
  805204:	314b883a 	add	r5,r6,r5
  805208:	4104703a 	and	r2,r8,r4
  80520c:	4946703a 	and	r3,r9,r5
  805210:	10c4b03a 	or	r2,r2,r3
  805214:	10000226 	beq	r2,zero,805220 <__pack_d+0x214>
  805218:	04400044 	movi	r17,1
  80521c:	0025883a 	mov	r18,zero
  805220:	00803fc4 	movi	r2,255
  805224:	644eb03a 	or	r7,r12,r17
  805228:	3892703a 	and	r9,r7,r2
  80522c:	00802004 	movi	r2,128
  805230:	6c90b03a 	or	r8,r13,r18
  805234:	0015883a 	mov	r10,zero
  805238:	48801626 	beq	r9,r2,805294 <__pack_d+0x288>
  80523c:	01001fc4 	movi	r4,127
  805240:	3905883a 	add	r2,r7,r4
  805244:	11cd803a 	cmpltu	r6,r2,r7
  805248:	320d883a 	add	r6,r6,r8
  80524c:	100f883a 	mov	r7,r2
  805250:	00840034 	movhi	r2,4096
  805254:	10bfffc4 	addi	r2,r2,-1
  805258:	3011883a 	mov	r8,r6
  80525c:	0007883a 	mov	r3,zero
  805260:	11801b36 	bltu	r2,r6,8052d0 <__pack_d+0x2c4>
  805264:	4004963a 	slli	r2,r8,24
  805268:	3808d23a 	srli	r4,r7,8
  80526c:	400ad23a 	srli	r5,r8,8
  805270:	1813883a 	mov	r9,r3
  805274:	1108b03a 	or	r4,r2,r4
  805278:	00bfffc4 	movi	r2,-1
  80527c:	00c00434 	movhi	r3,16
  805280:	18ffffc4 	addi	r3,r3,-1
  805284:	208c703a 	and	r6,r4,r2
  805288:	28ce703a 	and	r7,r5,r3
  80528c:	4a01ffcc 	andi	r8,r9,2047
  805290:	003f7206 	br	80505c <__pack_d+0x50>
  805294:	503fe91e 	bne	r10,zero,80523c <__pack_d+0x230>
  805298:	01004004 	movi	r4,256
  80529c:	3904703a 	and	r2,r7,r4
  8052a0:	0007883a 	mov	r3,zero
  8052a4:	10c4b03a 	or	r2,r2,r3
  8052a8:	10000626 	beq	r2,zero,8052c4 <__pack_d+0x2b8>
  8052ac:	3a45883a 	add	r2,r7,r9
  8052b0:	11cd803a 	cmpltu	r6,r2,r7
  8052b4:	320d883a 	add	r6,r6,r8
  8052b8:	100f883a 	mov	r7,r2
  8052bc:	3011883a 	mov	r8,r6
  8052c0:	0007883a 	mov	r3,zero
  8052c4:	00840034 	movhi	r2,4096
  8052c8:	10bfffc4 	addi	r2,r2,-1
  8052cc:	123fe52e 	bgeu	r2,r8,805264 <__pack_d+0x258>
  8052d0:	00c00044 	movi	r3,1
  8052d4:	003fe306 	br	805264 <__pack_d+0x258>
  8052d8:	0009883a 	mov	r4,zero
  8052dc:	0013883a 	mov	r9,zero
  8052e0:	000b883a 	mov	r5,zero
  8052e4:	003fe406 	br	805278 <__pack_d+0x26c>
  8052e8:	4a47883a 	add	r3,r9,r9
  8052ec:	008007c4 	movi	r2,31
  8052f0:	1105c83a 	sub	r2,r2,r4
  8052f4:	1886983a 	sll	r3,r3,r2
  8052f8:	4118d83a 	srl	r12,r8,r4
  8052fc:	491ad83a 	srl	r13,r9,r4
  805300:	1b18b03a 	or	r12,r3,r12
  805304:	003fb506 	br	8051dc <__pack_d+0x1d0>
  805308:	2806d07a 	srli	r3,r5,1
  80530c:	008007c4 	movi	r2,31
  805310:	1105c83a 	sub	r2,r2,r4
  805314:	1896d83a 	srl	r11,r3,r2
  805318:	2914983a 	sll	r10,r5,r4
  80531c:	003fb506 	br	8051f4 <__pack_d+0x1e8>

00805320 <__unpack_d>:
  805320:	20c00117 	ldw	r3,4(r4)
  805324:	22400017 	ldw	r9,0(r4)
  805328:	00800434 	movhi	r2,16
  80532c:	10bfffc4 	addi	r2,r2,-1
  805330:	1808d53a 	srli	r4,r3,20
  805334:	180cd7fa 	srli	r6,r3,31
  805338:	1894703a 	and	r10,r3,r2
  80533c:	2201ffcc 	andi	r8,r4,2047
  805340:	281b883a 	mov	r13,r5
  805344:	4817883a 	mov	r11,r9
  805348:	29800115 	stw	r6,4(r5)
  80534c:	5019883a 	mov	r12,r10
  805350:	40001e1e 	bne	r8,zero,8053cc <__unpack_d+0xac>
  805354:	4a84b03a 	or	r2,r9,r10
  805358:	10001926 	beq	r2,zero,8053c0 <__unpack_d+0xa0>
  80535c:	4804d63a 	srli	r2,r9,24
  805360:	500c923a 	slli	r6,r10,8
  805364:	013f0084 	movi	r4,-1022
  805368:	00c40034 	movhi	r3,4096
  80536c:	18ffffc4 	addi	r3,r3,-1
  805370:	118cb03a 	or	r6,r2,r6
  805374:	008000c4 	movi	r2,3
  805378:	480a923a 	slli	r5,r9,8
  80537c:	68800015 	stw	r2,0(r13)
  805380:	69000215 	stw	r4,8(r13)
  805384:	19800b36 	bltu	r3,r6,8053b4 <__unpack_d+0x94>
  805388:	200f883a 	mov	r7,r4
  80538c:	1811883a 	mov	r8,r3
  805390:	2945883a 	add	r2,r5,r5
  805394:	1149803a 	cmpltu	r4,r2,r5
  805398:	3187883a 	add	r3,r6,r6
  80539c:	20c9883a 	add	r4,r4,r3
  8053a0:	100b883a 	mov	r5,r2
  8053a4:	200d883a 	mov	r6,r4
  8053a8:	39ffffc4 	addi	r7,r7,-1
  8053ac:	413ff82e 	bgeu	r8,r4,805390 <__unpack_d+0x70>
  8053b0:	69c00215 	stw	r7,8(r13)
  8053b4:	69800415 	stw	r6,16(r13)
  8053b8:	69400315 	stw	r5,12(r13)
  8053bc:	f800283a 	ret
  8053c0:	00800084 	movi	r2,2
  8053c4:	28800015 	stw	r2,0(r5)
  8053c8:	f800283a 	ret
  8053cc:	0081ffc4 	movi	r2,2047
  8053d0:	40800f26 	beq	r8,r2,805410 <__unpack_d+0xf0>
  8053d4:	480cd63a 	srli	r6,r9,24
  8053d8:	5006923a 	slli	r3,r10,8
  8053dc:	4804923a 	slli	r2,r9,8
  8053e0:	0009883a 	mov	r4,zero
  8053e4:	30c6b03a 	or	r3,r6,r3
  8053e8:	01440034 	movhi	r5,4096
  8053ec:	110cb03a 	or	r6,r2,r4
  8053f0:	423f0044 	addi	r8,r8,-1023
  8053f4:	194eb03a 	or	r7,r3,r5
  8053f8:	008000c4 	movi	r2,3
  8053fc:	69c00415 	stw	r7,16(r13)
  805400:	6a000215 	stw	r8,8(r13)
  805404:	68800015 	stw	r2,0(r13)
  805408:	69800315 	stw	r6,12(r13)
  80540c:	f800283a 	ret
  805410:	4a84b03a 	or	r2,r9,r10
  805414:	1000031e 	bne	r2,zero,805424 <__unpack_d+0x104>
  805418:	00800104 	movi	r2,4
  80541c:	28800015 	stw	r2,0(r5)
  805420:	f800283a 	ret
  805424:	0009883a 	mov	r4,zero
  805428:	01400234 	movhi	r5,8
  80542c:	4904703a 	and	r2,r9,r4
  805430:	5146703a 	and	r3,r10,r5
  805434:	10c4b03a 	or	r2,r2,r3
  805438:	10000526 	beq	r2,zero,805450 <__unpack_d+0x130>
  80543c:	00800044 	movi	r2,1
  805440:	68800015 	stw	r2,0(r13)
  805444:	6b000415 	stw	r12,16(r13)
  805448:	6ac00315 	stw	r11,12(r13)
  80544c:	f800283a 	ret
  805450:	68000015 	stw	zero,0(r13)
  805454:	003ffb06 	br	805444 <__unpack_d+0x124>

00805458 <__fpcmp_parts_d>:
  805458:	21800017 	ldw	r6,0(r4)
  80545c:	00c00044 	movi	r3,1
  805460:	19800a2e 	bgeu	r3,r6,80548c <__fpcmp_parts_d+0x34>
  805464:	28800017 	ldw	r2,0(r5)
  805468:	1880082e 	bgeu	r3,r2,80548c <__fpcmp_parts_d+0x34>
  80546c:	00c00104 	movi	r3,4
  805470:	30c02626 	beq	r6,r3,80550c <__fpcmp_parts_d+0xb4>
  805474:	10c02226 	beq	r2,r3,805500 <__fpcmp_parts_d+0xa8>
  805478:	00c00084 	movi	r3,2
  80547c:	30c00526 	beq	r6,r3,805494 <__fpcmp_parts_d+0x3c>
  805480:	10c0071e 	bne	r2,r3,8054a0 <__fpcmp_parts_d+0x48>
  805484:	20800117 	ldw	r2,4(r4)
  805488:	1000091e 	bne	r2,zero,8054b0 <__fpcmp_parts_d+0x58>
  80548c:	00800044 	movi	r2,1
  805490:	f800283a 	ret
  805494:	10c01a1e 	bne	r2,r3,805500 <__fpcmp_parts_d+0xa8>
  805498:	0005883a 	mov	r2,zero
  80549c:	f800283a 	ret
  8054a0:	22000117 	ldw	r8,4(r4)
  8054a4:	28800117 	ldw	r2,4(r5)
  8054a8:	40800326 	beq	r8,r2,8054b8 <__fpcmp_parts_d+0x60>
  8054ac:	403ff726 	beq	r8,zero,80548c <__fpcmp_parts_d+0x34>
  8054b0:	00bfffc4 	movi	r2,-1
  8054b4:	f800283a 	ret
  8054b8:	20c00217 	ldw	r3,8(r4)
  8054bc:	28800217 	ldw	r2,8(r5)
  8054c0:	10fffa16 	blt	r2,r3,8054ac <__fpcmp_parts_d+0x54>
  8054c4:	18800916 	blt	r3,r2,8054ec <__fpcmp_parts_d+0x94>
  8054c8:	21c00417 	ldw	r7,16(r4)
  8054cc:	28c00417 	ldw	r3,16(r5)
  8054d0:	21800317 	ldw	r6,12(r4)
  8054d4:	28800317 	ldw	r2,12(r5)
  8054d8:	19fff436 	bltu	r3,r7,8054ac <__fpcmp_parts_d+0x54>
  8054dc:	38c00526 	beq	r7,r3,8054f4 <__fpcmp_parts_d+0x9c>
  8054e0:	38c00236 	bltu	r7,r3,8054ec <__fpcmp_parts_d+0x94>
  8054e4:	19ffec1e 	bne	r3,r7,805498 <__fpcmp_parts_d+0x40>
  8054e8:	30bfeb2e 	bgeu	r6,r2,805498 <__fpcmp_parts_d+0x40>
  8054ec:	403fe71e 	bne	r8,zero,80548c <__fpcmp_parts_d+0x34>
  8054f0:	003fef06 	br	8054b0 <__fpcmp_parts_d+0x58>
  8054f4:	11bffa2e 	bgeu	r2,r6,8054e0 <__fpcmp_parts_d+0x88>
  8054f8:	403fe426 	beq	r8,zero,80548c <__fpcmp_parts_d+0x34>
  8054fc:	003fec06 	br	8054b0 <__fpcmp_parts_d+0x58>
  805500:	28800117 	ldw	r2,4(r5)
  805504:	103fe11e 	bne	r2,zero,80548c <__fpcmp_parts_d+0x34>
  805508:	003fe906 	br	8054b0 <__fpcmp_parts_d+0x58>
  80550c:	11bfdd1e 	bne	r2,r6,805484 <__fpcmp_parts_d+0x2c>
  805510:	28c00117 	ldw	r3,4(r5)
  805514:	20800117 	ldw	r2,4(r4)
  805518:	1885c83a 	sub	r2,r3,r2
  80551c:	f800283a 	ret

00805520 <free>:
  805520:	008020b4 	movhi	r2,130
  805524:	10a81904 	addi	r2,r2,-24476
  805528:	200b883a 	mov	r5,r4
  80552c:	11000017 	ldw	r4,0(r2)
  805530:	0809ce41 	jmpi	809ce4 <_free_r>

00805534 <malloc>:
  805534:	008020b4 	movhi	r2,130
  805538:	10a81904 	addi	r2,r2,-24476
  80553c:	200b883a 	mov	r5,r4
  805540:	11000017 	ldw	r4,0(r2)
  805544:	08055481 	jmpi	805548 <_malloc_r>

00805548 <_malloc_r>:
  805548:	defff604 	addi	sp,sp,-40
  80554c:	28c002c4 	addi	r3,r5,11
  805550:	00800584 	movi	r2,22
  805554:	dc800215 	stw	r18,8(sp)
  805558:	dfc00915 	stw	ra,36(sp)
  80555c:	df000815 	stw	fp,32(sp)
  805560:	ddc00715 	stw	r23,28(sp)
  805564:	dd800615 	stw	r22,24(sp)
  805568:	dd400515 	stw	r21,20(sp)
  80556c:	dd000415 	stw	r20,16(sp)
  805570:	dcc00315 	stw	r19,12(sp)
  805574:	dc400115 	stw	r17,4(sp)
  805578:	dc000015 	stw	r16,0(sp)
  80557c:	2025883a 	mov	r18,r4
  805580:	10c01236 	bltu	r2,r3,8055cc <_malloc_r+0x84>
  805584:	04400404 	movi	r17,16
  805588:	8940142e 	bgeu	r17,r5,8055dc <_malloc_r+0x94>
  80558c:	00800304 	movi	r2,12
  805590:	0007883a 	mov	r3,zero
  805594:	90800015 	stw	r2,0(r18)
  805598:	1805883a 	mov	r2,r3
  80559c:	dfc00917 	ldw	ra,36(sp)
  8055a0:	df000817 	ldw	fp,32(sp)
  8055a4:	ddc00717 	ldw	r23,28(sp)
  8055a8:	dd800617 	ldw	r22,24(sp)
  8055ac:	dd400517 	ldw	r21,20(sp)
  8055b0:	dd000417 	ldw	r20,16(sp)
  8055b4:	dcc00317 	ldw	r19,12(sp)
  8055b8:	dc800217 	ldw	r18,8(sp)
  8055bc:	dc400117 	ldw	r17,4(sp)
  8055c0:	dc000017 	ldw	r16,0(sp)
  8055c4:	dec00a04 	addi	sp,sp,40
  8055c8:	f800283a 	ret
  8055cc:	00bffe04 	movi	r2,-8
  8055d0:	18a2703a 	and	r17,r3,r2
  8055d4:	883fed16 	blt	r17,zero,80558c <_malloc_r+0x44>
  8055d8:	897fec36 	bltu	r17,r5,80558c <_malloc_r+0x44>
  8055dc:	9009883a 	mov	r4,r18
  8055e0:	080ded00 	call	80ded0 <__malloc_lock>
  8055e4:	00807dc4 	movi	r2,503
  8055e8:	14402b2e 	bgeu	r2,r17,805698 <_malloc_r+0x150>
  8055ec:	8806d27a 	srli	r3,r17,9
  8055f0:	18003f1e 	bne	r3,zero,8056f0 <_malloc_r+0x1a8>
  8055f4:	880cd0fa 	srli	r6,r17,3
  8055f8:	300490fa 	slli	r2,r6,3
  8055fc:	02c020b4 	movhi	r11,130
  805600:	5ae13804 	addi	r11,r11,-31520
  805604:	12cb883a 	add	r5,r2,r11
  805608:	2c000317 	ldw	r16,12(r5)
  80560c:	580f883a 	mov	r7,r11
  805610:	2c00041e 	bne	r5,r16,805624 <_malloc_r+0xdc>
  805614:	00000a06 	br	805640 <_malloc_r+0xf8>
  805618:	1800860e 	bge	r3,zero,805834 <_malloc_r+0x2ec>
  80561c:	84000317 	ldw	r16,12(r16)
  805620:	2c000726 	beq	r5,r16,805640 <_malloc_r+0xf8>
  805624:	80800117 	ldw	r2,4(r16)
  805628:	00ffff04 	movi	r3,-4
  80562c:	10c8703a 	and	r4,r2,r3
  805630:	2447c83a 	sub	r3,r4,r17
  805634:	008003c4 	movi	r2,15
  805638:	10fff70e 	bge	r2,r3,805618 <_malloc_r+0xd0>
  80563c:	31bfffc4 	addi	r6,r6,-1
  805640:	32400044 	addi	r9,r6,1
  805644:	028020b4 	movhi	r10,130
  805648:	52a13a04 	addi	r10,r10,-31512
  80564c:	54000217 	ldw	r16,8(r10)
  805650:	8280a026 	beq	r16,r10,8058d4 <_malloc_r+0x38c>
  805654:	80800117 	ldw	r2,4(r16)
  805658:	00ffff04 	movi	r3,-4
  80565c:	10ca703a 	and	r5,r2,r3
  805660:	2c4dc83a 	sub	r6,r5,r17
  805664:	008003c4 	movi	r2,15
  805668:	11808316 	blt	r2,r6,805878 <_malloc_r+0x330>
  80566c:	52800315 	stw	r10,12(r10)
  805670:	52800215 	stw	r10,8(r10)
  805674:	30002916 	blt	r6,zero,80571c <_malloc_r+0x1d4>
  805678:	8147883a 	add	r3,r16,r5
  80567c:	18800117 	ldw	r2,4(r3)
  805680:	9009883a 	mov	r4,r18
  805684:	10800054 	ori	r2,r2,1
  805688:	18800115 	stw	r2,4(r3)
  80568c:	080def00 	call	80def0 <__malloc_unlock>
  805690:	80c00204 	addi	r3,r16,8
  805694:	003fc006 	br	805598 <_malloc_r+0x50>
  805698:	02c020b4 	movhi	r11,130
  80569c:	5ae13804 	addi	r11,r11,-31520
  8056a0:	8ac5883a 	add	r2,r17,r11
  8056a4:	14000317 	ldw	r16,12(r2)
  8056a8:	580f883a 	mov	r7,r11
  8056ac:	8806d0fa 	srli	r3,r17,3
  8056b0:	14006c26 	beq	r2,r16,805864 <_malloc_r+0x31c>
  8056b4:	80c00117 	ldw	r3,4(r16)
  8056b8:	00bfff04 	movi	r2,-4
  8056bc:	81800317 	ldw	r6,12(r16)
  8056c0:	1886703a 	and	r3,r3,r2
  8056c4:	80c7883a 	add	r3,r16,r3
  8056c8:	18800117 	ldw	r2,4(r3)
  8056cc:	81400217 	ldw	r5,8(r16)
  8056d0:	9009883a 	mov	r4,r18
  8056d4:	10800054 	ori	r2,r2,1
  8056d8:	18800115 	stw	r2,4(r3)
  8056dc:	31400215 	stw	r5,8(r6)
  8056e0:	29800315 	stw	r6,12(r5)
  8056e4:	080def00 	call	80def0 <__malloc_unlock>
  8056e8:	80c00204 	addi	r3,r16,8
  8056ec:	003faa06 	br	805598 <_malloc_r+0x50>
  8056f0:	00800104 	movi	r2,4
  8056f4:	10c0052e 	bgeu	r2,r3,80570c <_malloc_r+0x1c4>
  8056f8:	00800504 	movi	r2,20
  8056fc:	10c07836 	bltu	r2,r3,8058e0 <_malloc_r+0x398>
  805700:	198016c4 	addi	r6,r3,91
  805704:	300490fa 	slli	r2,r6,3
  805708:	003fbc06 	br	8055fc <_malloc_r+0xb4>
  80570c:	8804d1ba 	srli	r2,r17,6
  805710:	11800e04 	addi	r6,r2,56
  805714:	300490fa 	slli	r2,r6,3
  805718:	003fb806 	br	8055fc <_malloc_r+0xb4>
  80571c:	00807fc4 	movi	r2,511
  805720:	1140bb36 	bltu	r2,r5,805a10 <_malloc_r+0x4c8>
  805724:	2806d0fa 	srli	r3,r5,3
  805728:	573ffe04 	addi	fp,r10,-8
  80572c:	00800044 	movi	r2,1
  805730:	180890fa 	slli	r4,r3,3
  805734:	1807d0ba 	srai	r3,r3,2
  805738:	e1c00117 	ldw	r7,4(fp)
  80573c:	5909883a 	add	r4,r11,r4
  805740:	21400217 	ldw	r5,8(r4)
  805744:	10c4983a 	sll	r2,r2,r3
  805748:	81000315 	stw	r4,12(r16)
  80574c:	81400215 	stw	r5,8(r16)
  805750:	388eb03a 	or	r7,r7,r2
  805754:	2c000315 	stw	r16,12(r5)
  805758:	24000215 	stw	r16,8(r4)
  80575c:	e1c00115 	stw	r7,4(fp)
  805760:	4807883a 	mov	r3,r9
  805764:	4800cd16 	blt	r9,zero,805a9c <_malloc_r+0x554>
  805768:	1807d0ba 	srai	r3,r3,2
  80576c:	00800044 	movi	r2,1
  805770:	10c8983a 	sll	r4,r2,r3
  805774:	39004436 	bltu	r7,r4,805888 <_malloc_r+0x340>
  805778:	21c4703a 	and	r2,r4,r7
  80577c:	10000a1e 	bne	r2,zero,8057a8 <_malloc_r+0x260>
  805780:	2109883a 	add	r4,r4,r4
  805784:	00bfff04 	movi	r2,-4
  805788:	4884703a 	and	r2,r9,r2
  80578c:	3906703a 	and	r3,r7,r4
  805790:	12400104 	addi	r9,r2,4
  805794:	1800041e 	bne	r3,zero,8057a8 <_malloc_r+0x260>
  805798:	2109883a 	add	r4,r4,r4
  80579c:	3904703a 	and	r2,r7,r4
  8057a0:	4a400104 	addi	r9,r9,4
  8057a4:	103ffc26 	beq	r2,zero,805798 <_malloc_r+0x250>
  8057a8:	480490fa 	slli	r2,r9,3
  8057ac:	4819883a 	mov	r12,r9
  8057b0:	023fff04 	movi	r8,-4
  8057b4:	589b883a 	add	r13,r11,r2
  8057b8:	6807883a 	mov	r3,r13
  8057bc:	014003c4 	movi	r5,15
  8057c0:	1c000317 	ldw	r16,12(r3)
  8057c4:	1c00041e 	bne	r3,r16,8057d8 <_malloc_r+0x290>
  8057c8:	0000a706 	br	805a68 <_malloc_r+0x520>
  8057cc:	3000ab0e 	bge	r6,zero,805a7c <_malloc_r+0x534>
  8057d0:	84000317 	ldw	r16,12(r16)
  8057d4:	1c00a426 	beq	r3,r16,805a68 <_malloc_r+0x520>
  8057d8:	80800117 	ldw	r2,4(r16)
  8057dc:	1204703a 	and	r2,r2,r8
  8057e0:	144dc83a 	sub	r6,r2,r17
  8057e4:	29bff90e 	bge	r5,r6,8057cc <_malloc_r+0x284>
  8057e8:	81000317 	ldw	r4,12(r16)
  8057ec:	80c00217 	ldw	r3,8(r16)
  8057f0:	89400054 	ori	r5,r17,1
  8057f4:	8445883a 	add	r2,r16,r17
  8057f8:	20c00215 	stw	r3,8(r4)
  8057fc:	19000315 	stw	r4,12(r3)
  805800:	81400115 	stw	r5,4(r16)
  805804:	1187883a 	add	r3,r2,r6
  805808:	31000054 	ori	r4,r6,1
  80580c:	50800315 	stw	r2,12(r10)
  805810:	50800215 	stw	r2,8(r10)
  805814:	19800015 	stw	r6,0(r3)
  805818:	11000115 	stw	r4,4(r2)
  80581c:	12800215 	stw	r10,8(r2)
  805820:	12800315 	stw	r10,12(r2)
  805824:	9009883a 	mov	r4,r18
  805828:	080def00 	call	80def0 <__malloc_unlock>
  80582c:	80c00204 	addi	r3,r16,8
  805830:	003f5906 	br	805598 <_malloc_r+0x50>
  805834:	8109883a 	add	r4,r16,r4
  805838:	20800117 	ldw	r2,4(r4)
  80583c:	80c00217 	ldw	r3,8(r16)
  805840:	81400317 	ldw	r5,12(r16)
  805844:	10800054 	ori	r2,r2,1
  805848:	20800115 	stw	r2,4(r4)
  80584c:	28c00215 	stw	r3,8(r5)
  805850:	19400315 	stw	r5,12(r3)
  805854:	9009883a 	mov	r4,r18
  805858:	080def00 	call	80def0 <__malloc_unlock>
  80585c:	80c00204 	addi	r3,r16,8
  805860:	003f4d06 	br	805598 <_malloc_r+0x50>
  805864:	80800204 	addi	r2,r16,8
  805868:	14000317 	ldw	r16,12(r2)
  80586c:	143f911e 	bne	r2,r16,8056b4 <_malloc_r+0x16c>
  805870:	1a400084 	addi	r9,r3,2
  805874:	003f7306 	br	805644 <_malloc_r+0xfc>
  805878:	88c00054 	ori	r3,r17,1
  80587c:	8445883a 	add	r2,r16,r17
  805880:	80c00115 	stw	r3,4(r16)
  805884:	003fdf06 	br	805804 <_malloc_r+0x2bc>
  805888:	e4000217 	ldw	r16,8(fp)
  80588c:	00bfff04 	movi	r2,-4
  805890:	80c00117 	ldw	r3,4(r16)
  805894:	802d883a 	mov	r22,r16
  805898:	18aa703a 	and	r21,r3,r2
  80589c:	ac401636 	bltu	r21,r17,8058f8 <_malloc_r+0x3b0>
  8058a0:	ac49c83a 	sub	r4,r21,r17
  8058a4:	008003c4 	movi	r2,15
  8058a8:	1100130e 	bge	r2,r4,8058f8 <_malloc_r+0x3b0>
  8058ac:	88800054 	ori	r2,r17,1
  8058b0:	8447883a 	add	r3,r16,r17
  8058b4:	80800115 	stw	r2,4(r16)
  8058b8:	20800054 	ori	r2,r4,1
  8058bc:	18800115 	stw	r2,4(r3)
  8058c0:	e0c00215 	stw	r3,8(fp)
  8058c4:	9009883a 	mov	r4,r18
  8058c8:	080def00 	call	80def0 <__malloc_unlock>
  8058cc:	80c00204 	addi	r3,r16,8
  8058d0:	003f3106 	br	805598 <_malloc_r+0x50>
  8058d4:	39c00117 	ldw	r7,4(r7)
  8058d8:	573ffe04 	addi	fp,r10,-8
  8058dc:	003fa006 	br	805760 <_malloc_r+0x218>
  8058e0:	00801504 	movi	r2,84
  8058e4:	10c06736 	bltu	r2,r3,805a84 <_malloc_r+0x53c>
  8058e8:	8804d33a 	srli	r2,r17,12
  8058ec:	11801b84 	addi	r6,r2,110
  8058f0:	300490fa 	slli	r2,r6,3
  8058f4:	003f4106 	br	8055fc <_malloc_r+0xb4>
  8058f8:	d0a70b17 	ldw	r2,-25556(gp)
  8058fc:	d0e00417 	ldw	r3,-32752(gp)
  805900:	053fffc4 	movi	r20,-1
  805904:	10800404 	addi	r2,r2,16
  805908:	88a7883a 	add	r19,r17,r2
  80590c:	1d000326 	beq	r3,r20,80591c <_malloc_r+0x3d4>
  805910:	98c3ffc4 	addi	r3,r19,4095
  805914:	00bc0004 	movi	r2,-4096
  805918:	18a6703a 	and	r19,r3,r2
  80591c:	9009883a 	mov	r4,r18
  805920:	980b883a 	mov	r5,r19
  805924:	0805db40 	call	805db4 <_sbrk_r>
  805928:	1009883a 	mov	r4,r2
  80592c:	15000426 	beq	r2,r20,805940 <_malloc_r+0x3f8>
  805930:	854b883a 	add	r5,r16,r21
  805934:	1029883a 	mov	r20,r2
  805938:	11405a2e 	bgeu	r2,r5,805aa4 <_malloc_r+0x55c>
  80593c:	87000c26 	beq	r16,fp,805970 <_malloc_r+0x428>
  805940:	e4000217 	ldw	r16,8(fp)
  805944:	80c00117 	ldw	r3,4(r16)
  805948:	00bfff04 	movi	r2,-4
  80594c:	1884703a 	and	r2,r3,r2
  805950:	14400336 	bltu	r2,r17,805960 <_malloc_r+0x418>
  805954:	1449c83a 	sub	r4,r2,r17
  805958:	008003c4 	movi	r2,15
  80595c:	113fd316 	blt	r2,r4,8058ac <_malloc_r+0x364>
  805960:	9009883a 	mov	r4,r18
  805964:	080def00 	call	80def0 <__malloc_unlock>
  805968:	0007883a 	mov	r3,zero
  80596c:	003f0a06 	br	805598 <_malloc_r+0x50>
  805970:	05c020b4 	movhi	r23,130
  805974:	bdef3b04 	addi	r23,r23,-17172
  805978:	b8800017 	ldw	r2,0(r23)
  80597c:	988d883a 	add	r6,r19,r2
  805980:	b9800015 	stw	r6,0(r23)
  805984:	d0e00417 	ldw	r3,-32752(gp)
  805988:	00bfffc4 	movi	r2,-1
  80598c:	18808e26 	beq	r3,r2,805bc8 <_malloc_r+0x680>
  805990:	2145c83a 	sub	r2,r4,r5
  805994:	3085883a 	add	r2,r6,r2
  805998:	b8800015 	stw	r2,0(r23)
  80599c:	20c001cc 	andi	r3,r4,7
  8059a0:	18005f1e 	bne	r3,zero,805b20 <_malloc_r+0x5d8>
  8059a4:	000b883a 	mov	r5,zero
  8059a8:	a4c5883a 	add	r2,r20,r19
  8059ac:	1083ffcc 	andi	r2,r2,4095
  8059b0:	00c40004 	movi	r3,4096
  8059b4:	1887c83a 	sub	r3,r3,r2
  8059b8:	28e7883a 	add	r19,r5,r3
  8059bc:	9009883a 	mov	r4,r18
  8059c0:	980b883a 	mov	r5,r19
  8059c4:	0805db40 	call	805db4 <_sbrk_r>
  8059c8:	1007883a 	mov	r3,r2
  8059cc:	00bfffc4 	movi	r2,-1
  8059d0:	18807a26 	beq	r3,r2,805bbc <_malloc_r+0x674>
  8059d4:	1d05c83a 	sub	r2,r3,r20
  8059d8:	9885883a 	add	r2,r19,r2
  8059dc:	10c00054 	ori	r3,r2,1
  8059e0:	b8800017 	ldw	r2,0(r23)
  8059e4:	a021883a 	mov	r16,r20
  8059e8:	a0c00115 	stw	r3,4(r20)
  8059ec:	9885883a 	add	r2,r19,r2
  8059f0:	b8800015 	stw	r2,0(r23)
  8059f4:	e5000215 	stw	r20,8(fp)
  8059f8:	b7003626 	beq	r22,fp,805ad4 <_malloc_r+0x58c>
  8059fc:	018003c4 	movi	r6,15
  805a00:	35404b36 	bltu	r6,r21,805b30 <_malloc_r+0x5e8>
  805a04:	00800044 	movi	r2,1
  805a08:	a0800115 	stw	r2,4(r20)
  805a0c:	003fcd06 	br	805944 <_malloc_r+0x3fc>
  805a10:	2808d27a 	srli	r4,r5,9
  805a14:	2000371e 	bne	r4,zero,805af4 <_malloc_r+0x5ac>
  805a18:	2808d0fa 	srli	r4,r5,3
  805a1c:	200690fa 	slli	r3,r4,3
  805a20:	1ad1883a 	add	r8,r3,r11
  805a24:	41800217 	ldw	r6,8(r8)
  805a28:	41805b26 	beq	r8,r6,805b98 <_malloc_r+0x650>
  805a2c:	30800117 	ldw	r2,4(r6)
  805a30:	00ffff04 	movi	r3,-4
  805a34:	10c4703a 	and	r2,r2,r3
  805a38:	2880022e 	bgeu	r5,r2,805a44 <_malloc_r+0x4fc>
  805a3c:	31800217 	ldw	r6,8(r6)
  805a40:	41bffa1e 	bne	r8,r6,805a2c <_malloc_r+0x4e4>
  805a44:	32000317 	ldw	r8,12(r6)
  805a48:	39c00117 	ldw	r7,4(r7)
  805a4c:	82000315 	stw	r8,12(r16)
  805a50:	81800215 	stw	r6,8(r16)
  805a54:	070020b4 	movhi	fp,130
  805a58:	e7213804 	addi	fp,fp,-31520
  805a5c:	34000315 	stw	r16,12(r6)
  805a60:	44000215 	stw	r16,8(r8)
  805a64:	003f3e06 	br	805760 <_malloc_r+0x218>
  805a68:	63000044 	addi	r12,r12,1
  805a6c:	608000cc 	andi	r2,r12,3
  805a70:	10005d26 	beq	r2,zero,805be8 <_malloc_r+0x6a0>
  805a74:	18c00204 	addi	r3,r3,8
  805a78:	003f5106 	br	8057c0 <_malloc_r+0x278>
  805a7c:	8089883a 	add	r4,r16,r2
  805a80:	003f6d06 	br	805838 <_malloc_r+0x2f0>
  805a84:	00805504 	movi	r2,340
  805a88:	10c02036 	bltu	r2,r3,805b0c <_malloc_r+0x5c4>
  805a8c:	8804d3fa 	srli	r2,r17,15
  805a90:	11801dc4 	addi	r6,r2,119
  805a94:	300490fa 	slli	r2,r6,3
  805a98:	003ed806 	br	8055fc <_malloc_r+0xb4>
  805a9c:	48c000c4 	addi	r3,r9,3
  805aa0:	003f3106 	br	805768 <_malloc_r+0x220>
  805aa4:	05c020b4 	movhi	r23,130
  805aa8:	bdef3b04 	addi	r23,r23,-17172
  805aac:	b8800017 	ldw	r2,0(r23)
  805ab0:	988d883a 	add	r6,r19,r2
  805ab4:	b9800015 	stw	r6,0(r23)
  805ab8:	293fb21e 	bne	r5,r4,805984 <_malloc_r+0x43c>
  805abc:	2083ffcc 	andi	r2,r4,4095
  805ac0:	103fb01e 	bne	r2,zero,805984 <_malloc_r+0x43c>
  805ac4:	e4000217 	ldw	r16,8(fp)
  805ac8:	9d45883a 	add	r2,r19,r21
  805acc:	10800054 	ori	r2,r2,1
  805ad0:	80800115 	stw	r2,4(r16)
  805ad4:	b8c00017 	ldw	r3,0(r23)
  805ad8:	d0a70c17 	ldw	r2,-25552(gp)
  805adc:	10c0012e 	bgeu	r2,r3,805ae4 <_malloc_r+0x59c>
  805ae0:	d0e70c15 	stw	r3,-25552(gp)
  805ae4:	d0a70d17 	ldw	r2,-25548(gp)
  805ae8:	10ff962e 	bgeu	r2,r3,805944 <_malloc_r+0x3fc>
  805aec:	d0e70d15 	stw	r3,-25548(gp)
  805af0:	003f9406 	br	805944 <_malloc_r+0x3fc>
  805af4:	00800104 	movi	r2,4
  805af8:	11001e36 	bltu	r2,r4,805b74 <_malloc_r+0x62c>
  805afc:	2804d1ba 	srli	r2,r5,6
  805b00:	11000e04 	addi	r4,r2,56
  805b04:	200690fa 	slli	r3,r4,3
  805b08:	003fc506 	br	805a20 <_malloc_r+0x4d8>
  805b0c:	00815504 	movi	r2,1364
  805b10:	10c01d2e 	bgeu	r2,r3,805b88 <_malloc_r+0x640>
  805b14:	01801f84 	movi	r6,126
  805b18:	0080fc04 	movi	r2,1008
  805b1c:	003eb706 	br	8055fc <_malloc_r+0xb4>
  805b20:	00800204 	movi	r2,8
  805b24:	10cbc83a 	sub	r5,r2,r3
  805b28:	2169883a 	add	r20,r4,r5
  805b2c:	003f9e06 	br	8059a8 <_malloc_r+0x460>
  805b30:	00bffe04 	movi	r2,-8
  805b34:	a93ffd04 	addi	r4,r21,-12
  805b38:	2088703a 	and	r4,r4,r2
  805b3c:	b10b883a 	add	r5,r22,r4
  805b40:	00c00144 	movi	r3,5
  805b44:	28c00215 	stw	r3,8(r5)
  805b48:	28c00115 	stw	r3,4(r5)
  805b4c:	b0800117 	ldw	r2,4(r22)
  805b50:	1080004c 	andi	r2,r2,1
  805b54:	2084b03a 	or	r2,r4,r2
  805b58:	b0800115 	stw	r2,4(r22)
  805b5c:	313fdd2e 	bgeu	r6,r4,805ad4 <_malloc_r+0x58c>
  805b60:	b1400204 	addi	r5,r22,8
  805b64:	9009883a 	mov	r4,r18
  805b68:	0809ce40 	call	809ce4 <_free_r>
  805b6c:	e4000217 	ldw	r16,8(fp)
  805b70:	003fd806 	br	805ad4 <_malloc_r+0x58c>
  805b74:	00800504 	movi	r2,20
  805b78:	11001536 	bltu	r2,r4,805bd0 <_malloc_r+0x688>
  805b7c:	210016c4 	addi	r4,r4,91
  805b80:	200690fa 	slli	r3,r4,3
  805b84:	003fa606 	br	805a20 <_malloc_r+0x4d8>
  805b88:	8804d4ba 	srli	r2,r17,18
  805b8c:	11801f04 	addi	r6,r2,124
  805b90:	300490fa 	slli	r2,r6,3
  805b94:	003e9906 	br	8055fc <_malloc_r+0xb4>
  805b98:	2009d0ba 	srai	r4,r4,2
  805b9c:	014020b4 	movhi	r5,130
  805ba0:	29613804 	addi	r5,r5,-31520
  805ba4:	00c00044 	movi	r3,1
  805ba8:	28800117 	ldw	r2,4(r5)
  805bac:	1906983a 	sll	r3,r3,r4
  805bb0:	10c4b03a 	or	r2,r2,r3
  805bb4:	28800115 	stw	r2,4(r5)
  805bb8:	003fa306 	br	805a48 <_malloc_r+0x500>
  805bbc:	0027883a 	mov	r19,zero
  805bc0:	00c00044 	movi	r3,1
  805bc4:	003f8606 	br	8059e0 <_malloc_r+0x498>
  805bc8:	d1200415 	stw	r4,-32752(gp)
  805bcc:	003f7306 	br	80599c <_malloc_r+0x454>
  805bd0:	00801504 	movi	r2,84
  805bd4:	11001936 	bltu	r2,r4,805c3c <_malloc_r+0x6f4>
  805bd8:	2804d33a 	srli	r2,r5,12
  805bdc:	11001b84 	addi	r4,r2,110
  805be0:	200690fa 	slli	r3,r4,3
  805be4:	003f8e06 	br	805a20 <_malloc_r+0x4d8>
  805be8:	480b883a 	mov	r5,r9
  805bec:	6807883a 	mov	r3,r13
  805bf0:	288000cc 	andi	r2,r5,3
  805bf4:	18fffe04 	addi	r3,r3,-8
  805bf8:	297fffc4 	addi	r5,r5,-1
  805bfc:	10001526 	beq	r2,zero,805c54 <_malloc_r+0x70c>
  805c00:	18800217 	ldw	r2,8(r3)
  805c04:	10fffa26 	beq	r2,r3,805bf0 <_malloc_r+0x6a8>
  805c08:	2109883a 	add	r4,r4,r4
  805c0c:	393f1e36 	bltu	r7,r4,805888 <_malloc_r+0x340>
  805c10:	203f1d26 	beq	r4,zero,805888 <_malloc_r+0x340>
  805c14:	21c4703a 	and	r2,r4,r7
  805c18:	10000226 	beq	r2,zero,805c24 <_malloc_r+0x6dc>
  805c1c:	6013883a 	mov	r9,r12
  805c20:	003ee106 	br	8057a8 <_malloc_r+0x260>
  805c24:	2109883a 	add	r4,r4,r4
  805c28:	3904703a 	and	r2,r7,r4
  805c2c:	63000104 	addi	r12,r12,4
  805c30:	103ffc26 	beq	r2,zero,805c24 <_malloc_r+0x6dc>
  805c34:	6013883a 	mov	r9,r12
  805c38:	003edb06 	br	8057a8 <_malloc_r+0x260>
  805c3c:	00805504 	movi	r2,340
  805c40:	11000836 	bltu	r2,r4,805c64 <_malloc_r+0x71c>
  805c44:	2804d3fa 	srli	r2,r5,15
  805c48:	11001dc4 	addi	r4,r2,119
  805c4c:	200690fa 	slli	r3,r4,3
  805c50:	003f7306 	br	805a20 <_malloc_r+0x4d8>
  805c54:	0104303a 	nor	r2,zero,r4
  805c58:	388e703a 	and	r7,r7,r2
  805c5c:	e1c00115 	stw	r7,4(fp)
  805c60:	003fe906 	br	805c08 <_malloc_r+0x6c0>
  805c64:	00815504 	movi	r2,1364
  805c68:	1100032e 	bgeu	r2,r4,805c78 <_malloc_r+0x730>
  805c6c:	01001f84 	movi	r4,126
  805c70:	00c0fc04 	movi	r3,1008
  805c74:	003f6a06 	br	805a20 <_malloc_r+0x4d8>
  805c78:	2804d4ba 	srli	r2,r5,18
  805c7c:	11001f04 	addi	r4,r2,124
  805c80:	200690fa 	slli	r3,r4,3
  805c84:	003f6606 	br	805a20 <_malloc_r+0x4d8>

00805c88 <printf>:
  805c88:	defffb04 	addi	sp,sp,-20
  805c8c:	dfc00115 	stw	ra,4(sp)
  805c90:	d9400215 	stw	r5,8(sp)
  805c94:	d9800315 	stw	r6,12(sp)
  805c98:	d9c00415 	stw	r7,16(sp)
  805c9c:	008020b4 	movhi	r2,130
  805ca0:	10a81904 	addi	r2,r2,-24476
  805ca4:	10c00017 	ldw	r3,0(r2)
  805ca8:	200b883a 	mov	r5,r4
  805cac:	d8800204 	addi	r2,sp,8
  805cb0:	19000217 	ldw	r4,8(r3)
  805cb4:	100d883a 	mov	r6,r2
  805cb8:	d8800015 	stw	r2,0(sp)
  805cbc:	0807d9c0 	call	807d9c <__vfprintf_internal>
  805cc0:	dfc00117 	ldw	ra,4(sp)
  805cc4:	dec00504 	addi	sp,sp,20
  805cc8:	f800283a 	ret

00805ccc <_printf_r>:
  805ccc:	defffc04 	addi	sp,sp,-16
  805cd0:	dfc00115 	stw	ra,4(sp)
  805cd4:	d9800215 	stw	r6,8(sp)
  805cd8:	d9c00315 	stw	r7,12(sp)
  805cdc:	280d883a 	mov	r6,r5
  805ce0:	21400217 	ldw	r5,8(r4)
  805ce4:	d8c00204 	addi	r3,sp,8
  805ce8:	180f883a 	mov	r7,r3
  805cec:	d8c00015 	stw	r3,0(sp)
  805cf0:	0805ef00 	call	805ef0 <___vfprintf_internal_r>
  805cf4:	dfc00117 	ldw	ra,4(sp)
  805cf8:	dec00404 	addi	sp,sp,16
  805cfc:	f800283a 	ret

00805d00 <_puts_r>:
  805d00:	defff604 	addi	sp,sp,-40
  805d04:	dc400715 	stw	r17,28(sp)
  805d08:	2023883a 	mov	r17,r4
  805d0c:	2809883a 	mov	r4,r5
  805d10:	dfc00915 	stw	ra,36(sp)
  805d14:	dcc00815 	stw	r19,32(sp)
  805d18:	2827883a 	mov	r19,r5
  805d1c:	0805e240 	call	805e24 <strlen>
  805d20:	89400217 	ldw	r5,8(r17)
  805d24:	00c020b4 	movhi	r3,130
  805d28:	18e07704 	addi	r3,r3,-32292
  805d2c:	01c00044 	movi	r7,1
  805d30:	12000044 	addi	r8,r2,1
  805d34:	d8c00515 	stw	r3,20(sp)
  805d38:	d9c00615 	stw	r7,24(sp)
  805d3c:	d8c00304 	addi	r3,sp,12
  805d40:	01c00084 	movi	r7,2
  805d44:	8809883a 	mov	r4,r17
  805d48:	d80d883a 	mov	r6,sp
  805d4c:	d8c00015 	stw	r3,0(sp)
  805d50:	dcc00315 	stw	r19,12(sp)
  805d54:	da000215 	stw	r8,8(sp)
  805d58:	d9c00115 	stw	r7,4(sp)
  805d5c:	d8800415 	stw	r2,16(sp)
  805d60:	0809ff80 	call	809ff8 <__sfvwrite_r>
  805d64:	00ffffc4 	movi	r3,-1
  805d68:	10000626 	beq	r2,zero,805d84 <_puts_r+0x84>
  805d6c:	1805883a 	mov	r2,r3
  805d70:	dfc00917 	ldw	ra,36(sp)
  805d74:	dcc00817 	ldw	r19,32(sp)
  805d78:	dc400717 	ldw	r17,28(sp)
  805d7c:	dec00a04 	addi	sp,sp,40
  805d80:	f800283a 	ret
  805d84:	00c00284 	movi	r3,10
  805d88:	1805883a 	mov	r2,r3
  805d8c:	dfc00917 	ldw	ra,36(sp)
  805d90:	dcc00817 	ldw	r19,32(sp)
  805d94:	dc400717 	ldw	r17,28(sp)
  805d98:	dec00a04 	addi	sp,sp,40
  805d9c:	f800283a 	ret

00805da0 <puts>:
  805da0:	008020b4 	movhi	r2,130
  805da4:	10a81904 	addi	r2,r2,-24476
  805da8:	200b883a 	mov	r5,r4
  805dac:	11000017 	ldw	r4,0(r2)
  805db0:	0805d001 	jmpi	805d00 <_puts_r>

00805db4 <_sbrk_r>:
  805db4:	defffd04 	addi	sp,sp,-12
  805db8:	dc000015 	stw	r16,0(sp)
  805dbc:	040020b4 	movhi	r16,130
  805dc0:	842f2204 	addi	r16,r16,-17272
  805dc4:	dc400115 	stw	r17,4(sp)
  805dc8:	80000015 	stw	zero,0(r16)
  805dcc:	2023883a 	mov	r17,r4
  805dd0:	2809883a 	mov	r4,r5
  805dd4:	dfc00215 	stw	ra,8(sp)
  805dd8:	080e0f00 	call	80e0f0 <sbrk>
  805ddc:	1007883a 	mov	r3,r2
  805de0:	00bfffc4 	movi	r2,-1
  805de4:	18800626 	beq	r3,r2,805e00 <_sbrk_r+0x4c>
  805de8:	1805883a 	mov	r2,r3
  805dec:	dfc00217 	ldw	ra,8(sp)
  805df0:	dc400117 	ldw	r17,4(sp)
  805df4:	dc000017 	ldw	r16,0(sp)
  805df8:	dec00304 	addi	sp,sp,12
  805dfc:	f800283a 	ret
  805e00:	80800017 	ldw	r2,0(r16)
  805e04:	103ff826 	beq	r2,zero,805de8 <_sbrk_r+0x34>
  805e08:	88800015 	stw	r2,0(r17)
  805e0c:	1805883a 	mov	r2,r3
  805e10:	dfc00217 	ldw	ra,8(sp)
  805e14:	dc400117 	ldw	r17,4(sp)
  805e18:	dc000017 	ldw	r16,0(sp)
  805e1c:	dec00304 	addi	sp,sp,12
  805e20:	f800283a 	ret

00805e24 <strlen>:
  805e24:	208000cc 	andi	r2,r4,3
  805e28:	2011883a 	mov	r8,r4
  805e2c:	1000161e 	bne	r2,zero,805e88 <strlen+0x64>
  805e30:	20c00017 	ldw	r3,0(r4)
  805e34:	017fbff4 	movhi	r5,65279
  805e38:	297fbfc4 	addi	r5,r5,-257
  805e3c:	01e02074 	movhi	r7,32897
  805e40:	39e02004 	addi	r7,r7,-32640
  805e44:	1945883a 	add	r2,r3,r5
  805e48:	11c4703a 	and	r2,r2,r7
  805e4c:	00c6303a 	nor	r3,zero,r3
  805e50:	1886703a 	and	r3,r3,r2
  805e54:	18000c1e 	bne	r3,zero,805e88 <strlen+0x64>
  805e58:	280d883a 	mov	r6,r5
  805e5c:	380b883a 	mov	r5,r7
  805e60:	21000104 	addi	r4,r4,4
  805e64:	20800017 	ldw	r2,0(r4)
  805e68:	1187883a 	add	r3,r2,r6
  805e6c:	1946703a 	and	r3,r3,r5
  805e70:	0084303a 	nor	r2,zero,r2
  805e74:	10c4703a 	and	r2,r2,r3
  805e78:	103ff926 	beq	r2,zero,805e60 <strlen+0x3c>
  805e7c:	20800007 	ldb	r2,0(r4)
  805e80:	10000326 	beq	r2,zero,805e90 <strlen+0x6c>
  805e84:	21000044 	addi	r4,r4,1
  805e88:	20800007 	ldb	r2,0(r4)
  805e8c:	103ffd1e 	bne	r2,zero,805e84 <strlen+0x60>
  805e90:	2205c83a 	sub	r2,r4,r8
  805e94:	f800283a 	ret

00805e98 <__sprint_r>:
  805e98:	30800217 	ldw	r2,8(r6)
  805e9c:	defffe04 	addi	sp,sp,-8
  805ea0:	dc000015 	stw	r16,0(sp)
  805ea4:	dfc00115 	stw	ra,4(sp)
  805ea8:	3021883a 	mov	r16,r6
  805eac:	0007883a 	mov	r3,zero
  805eb0:	1000061e 	bne	r2,zero,805ecc <__sprint_r+0x34>
  805eb4:	1805883a 	mov	r2,r3
  805eb8:	30000115 	stw	zero,4(r6)
  805ebc:	dfc00117 	ldw	ra,4(sp)
  805ec0:	dc000017 	ldw	r16,0(sp)
  805ec4:	dec00204 	addi	sp,sp,8
  805ec8:	f800283a 	ret
  805ecc:	0809ff80 	call	809ff8 <__sfvwrite_r>
  805ed0:	1007883a 	mov	r3,r2
  805ed4:	1805883a 	mov	r2,r3
  805ed8:	80000115 	stw	zero,4(r16)
  805edc:	80000215 	stw	zero,8(r16)
  805ee0:	dfc00117 	ldw	ra,4(sp)
  805ee4:	dc000017 	ldw	r16,0(sp)
  805ee8:	dec00204 	addi	sp,sp,8
  805eec:	f800283a 	ret

00805ef0 <___vfprintf_internal_r>:
  805ef0:	defea404 	addi	sp,sp,-1392
  805ef4:	dd815815 	stw	r22,1376(sp)
  805ef8:	dc015215 	stw	r16,1352(sp)
  805efc:	d9c15115 	stw	r7,1348(sp)
  805f00:	dfc15b15 	stw	ra,1388(sp)
  805f04:	df015a15 	stw	fp,1384(sp)
  805f08:	ddc15915 	stw	r23,1380(sp)
  805f0c:	dd415715 	stw	r21,1372(sp)
  805f10:	dd015615 	stw	r20,1368(sp)
  805f14:	dcc15515 	stw	r19,1364(sp)
  805f18:	dc815415 	stw	r18,1360(sp)
  805f1c:	dc415315 	stw	r17,1356(sp)
  805f20:	282d883a 	mov	r22,r5
  805f24:	3021883a 	mov	r16,r6
  805f28:	d9014f15 	stw	r4,1340(sp)
  805f2c:	080a61c0 	call	80a61c <_localeconv_r>
  805f30:	10800017 	ldw	r2,0(r2)
  805f34:	d9c15117 	ldw	r7,1348(sp)
  805f38:	d8814915 	stw	r2,1316(sp)
  805f3c:	d8814f17 	ldw	r2,1340(sp)
  805f40:	10000226 	beq	r2,zero,805f4c <___vfprintf_internal_r+0x5c>
  805f44:	10800e17 	ldw	r2,56(r2)
  805f48:	10020d26 	beq	r2,zero,806780 <___vfprintf_internal_r+0x890>
  805f4c:	b080030b 	ldhu	r2,12(r22)
  805f50:	1080020c 	andi	r2,r2,8
  805f54:	10020e26 	beq	r2,zero,806790 <___vfprintf_internal_r+0x8a0>
  805f58:	b0800417 	ldw	r2,16(r22)
  805f5c:	10020c26 	beq	r2,zero,806790 <___vfprintf_internal_r+0x8a0>
  805f60:	b200030b 	ldhu	r8,12(r22)
  805f64:	00800284 	movi	r2,10
  805f68:	40c0068c 	andi	r3,r8,26
  805f6c:	18802f1e 	bne	r3,r2,80602c <___vfprintf_internal_r+0x13c>
  805f70:	b080038f 	ldh	r2,14(r22)
  805f74:	10002d16 	blt	r2,zero,80602c <___vfprintf_internal_r+0x13c>
  805f78:	b240038b 	ldhu	r9,14(r22)
  805f7c:	b2800717 	ldw	r10,28(r22)
  805f80:	b2c00917 	ldw	r11,36(r22)
  805f84:	d9014f17 	ldw	r4,1340(sp)
  805f88:	dc402904 	addi	r17,sp,164
  805f8c:	d8804004 	addi	r2,sp,256
  805f90:	00c10004 	movi	r3,1024
  805f94:	423fff4c 	andi	r8,r8,65533
  805f98:	800d883a 	mov	r6,r16
  805f9c:	880b883a 	mov	r5,r17
  805fa0:	da002c0d 	sth	r8,176(sp)
  805fa4:	da402c8d 	sth	r9,178(sp)
  805fa8:	da803015 	stw	r10,192(sp)
  805fac:	dac03215 	stw	r11,200(sp)
  805fb0:	d8802d15 	stw	r2,180(sp)
  805fb4:	d8c02e15 	stw	r3,184(sp)
  805fb8:	d8802915 	stw	r2,164(sp)
  805fbc:	d8c02b15 	stw	r3,172(sp)
  805fc0:	d8002f15 	stw	zero,188(sp)
  805fc4:	0805ef00 	call	805ef0 <___vfprintf_internal_r>
  805fc8:	d8814b15 	stw	r2,1324(sp)
  805fcc:	10000416 	blt	r2,zero,805fe0 <___vfprintf_internal_r+0xf0>
  805fd0:	d9014f17 	ldw	r4,1340(sp)
  805fd4:	880b883a 	mov	r5,r17
  805fd8:	08096c80 	call	8096c8 <_fflush_r>
  805fdc:	1002321e 	bne	r2,zero,8068a8 <___vfprintf_internal_r+0x9b8>
  805fe0:	d8802c0b 	ldhu	r2,176(sp)
  805fe4:	1080100c 	andi	r2,r2,64
  805fe8:	10000326 	beq	r2,zero,805ff8 <___vfprintf_internal_r+0x108>
  805fec:	b080030b 	ldhu	r2,12(r22)
  805ff0:	10801014 	ori	r2,r2,64
  805ff4:	b080030d 	sth	r2,12(r22)
  805ff8:	d8814b17 	ldw	r2,1324(sp)
  805ffc:	dfc15b17 	ldw	ra,1388(sp)
  806000:	df015a17 	ldw	fp,1384(sp)
  806004:	ddc15917 	ldw	r23,1380(sp)
  806008:	dd815817 	ldw	r22,1376(sp)
  80600c:	dd415717 	ldw	r21,1372(sp)
  806010:	dd015617 	ldw	r20,1368(sp)
  806014:	dcc15517 	ldw	r19,1364(sp)
  806018:	dc815417 	ldw	r18,1360(sp)
  80601c:	dc415317 	ldw	r17,1356(sp)
  806020:	dc015217 	ldw	r16,1352(sp)
  806024:	dec15c04 	addi	sp,sp,1392
  806028:	f800283a 	ret
  80602c:	0005883a 	mov	r2,zero
  806030:	0007883a 	mov	r3,zero
  806034:	dd401904 	addi	r21,sp,100
  806038:	d8814215 	stw	r2,1288(sp)
  80603c:	802f883a 	mov	r23,r16
  806040:	d8c14315 	stw	r3,1292(sp)
  806044:	d8014b15 	stw	zero,1324(sp)
  806048:	d8014815 	stw	zero,1312(sp)
  80604c:	d8014415 	stw	zero,1296(sp)
  806050:	d8014715 	stw	zero,1308(sp)
  806054:	dd400c15 	stw	r21,48(sp)
  806058:	d8000e15 	stw	zero,56(sp)
  80605c:	d8000d15 	stw	zero,52(sp)
  806060:	b8800007 	ldb	r2,0(r23)
  806064:	10001926 	beq	r2,zero,8060cc <___vfprintf_internal_r+0x1dc>
  806068:	00c00944 	movi	r3,37
  80606c:	10c01726 	beq	r2,r3,8060cc <___vfprintf_internal_r+0x1dc>
  806070:	b821883a 	mov	r16,r23
  806074:	00000106 	br	80607c <___vfprintf_internal_r+0x18c>
  806078:	10c00326 	beq	r2,r3,806088 <___vfprintf_internal_r+0x198>
  80607c:	84000044 	addi	r16,r16,1
  806080:	80800007 	ldb	r2,0(r16)
  806084:	103ffc1e 	bne	r2,zero,806078 <___vfprintf_internal_r+0x188>
  806088:	85e7c83a 	sub	r19,r16,r23
  80608c:	98000e26 	beq	r19,zero,8060c8 <___vfprintf_internal_r+0x1d8>
  806090:	dc800e17 	ldw	r18,56(sp)
  806094:	dc400d17 	ldw	r17,52(sp)
  806098:	008001c4 	movi	r2,7
  80609c:	94e5883a 	add	r18,r18,r19
  8060a0:	8c400044 	addi	r17,r17,1
  8060a4:	adc00015 	stw	r23,0(r21)
  8060a8:	dc800e15 	stw	r18,56(sp)
  8060ac:	acc00115 	stw	r19,4(r21)
  8060b0:	dc400d15 	stw	r17,52(sp)
  8060b4:	14428b16 	blt	r2,r17,806ae4 <___vfprintf_internal_r+0xbf4>
  8060b8:	ad400204 	addi	r21,r21,8
  8060bc:	d9014b17 	ldw	r4,1324(sp)
  8060c0:	24c9883a 	add	r4,r4,r19
  8060c4:	d9014b15 	stw	r4,1324(sp)
  8060c8:	802f883a 	mov	r23,r16
  8060cc:	b8800007 	ldb	r2,0(r23)
  8060d0:	10013c26 	beq	r2,zero,8065c4 <___vfprintf_internal_r+0x6d4>
  8060d4:	bdc00044 	addi	r23,r23,1
  8060d8:	d8000405 	stb	zero,16(sp)
  8060dc:	b8c00007 	ldb	r3,0(r23)
  8060e0:	04ffffc4 	movi	r19,-1
  8060e4:	d8014c15 	stw	zero,1328(sp)
  8060e8:	d8014a15 	stw	zero,1320(sp)
  8060ec:	d8c14d15 	stw	r3,1332(sp)
  8060f0:	bdc00044 	addi	r23,r23,1
  8060f4:	d9414d17 	ldw	r5,1332(sp)
  8060f8:	00801604 	movi	r2,88
  8060fc:	28fff804 	addi	r3,r5,-32
  806100:	10c06036 	bltu	r2,r3,806284 <___vfprintf_internal_r+0x394>
  806104:	18c5883a 	add	r2,r3,r3
  806108:	1085883a 	add	r2,r2,r2
  80610c:	00c02034 	movhi	r3,128
  806110:	18d84804 	addi	r3,r3,24864
  806114:	10c5883a 	add	r2,r2,r3
  806118:	11000017 	ldw	r4,0(r2)
  80611c:	2000683a 	jmp	r4
  806120:	00807094 	movui	r2,450
  806124:	00806284 	movi	r2,394
  806128:	00806284 	movi	r2,394
  80612c:	00807080 	call	80708 <__reset-0x77f8f8>
  806130:	00806284 	movi	r2,394
  806134:	00806284 	movi	r2,394
  806138:	00806284 	movi	r2,394
  80613c:	00806284 	movi	r2,394
  806140:	00806284 	movi	r2,394
  806144:	00806284 	movi	r2,394
  806148:	00806e60 	cmpeqi	r2,zero,441
  80614c:	00807070 	cmpltui	r2,zero,449
  806150:	00806284 	movi	r2,394
  806154:	00806e78 	rdprs	r2,zero,441
  806158:	0080710c 	andi	r2,zero,452
  80615c:	00806284 	movi	r2,394
  806160:	008070f8 	rdprs	r2,zero,451
  806164:	008070c0 	call	8070c <__reset-0x77f8f4>
  806168:	008070c0 	call	8070c <__reset-0x77f8f4>
  80616c:	008070c0 	call	8070c <__reset-0x77f8f4>
  806170:	008070c0 	call	8070c <__reset-0x77f8f4>
  806174:	008070c0 	call	8070c <__reset-0x77f8f4>
  806178:	008070c0 	call	8070c <__reset-0x77f8f4>
  80617c:	008070c0 	call	8070c <__reset-0x77f8f4>
  806180:	008070c0 	call	8070c <__reset-0x77f8f4>
  806184:	008070c0 	call	8070c <__reset-0x77f8f4>
  806188:	00806284 	movi	r2,394
  80618c:	00806284 	movi	r2,394
  806190:	00806284 	movi	r2,394
  806194:	00806284 	movi	r2,394
  806198:	00806284 	movi	r2,394
  80619c:	00806284 	movi	r2,394
  8061a0:	00806284 	movi	r2,394
  8061a4:	00806284 	movi	r2,394
  8061a8:	00806284 	movi	r2,394
  8061ac:	00806284 	movi	r2,394
  8061b0:	008068dc 	xori	r2,zero,419
  8061b4:	00806f48 	cmpgei	r2,zero,445
  8061b8:	00806284 	movi	r2,394
  8061bc:	00806f48 	cmpgei	r2,zero,445
  8061c0:	00806284 	movi	r2,394
  8061c4:	00806284 	movi	r2,394
  8061c8:	00806284 	movi	r2,394
  8061cc:	00806284 	movi	r2,394
  8061d0:	008070ac 	andhi	r2,zero,450
  8061d4:	00806284 	movi	r2,394
  8061d8:	00806284 	movi	r2,394
  8061dc:	00806990 	cmplti	r2,zero,422
  8061e0:	00806284 	movi	r2,394
  8061e4:	00806284 	movi	r2,394
  8061e8:	00806284 	movi	r2,394
  8061ec:	00806284 	movi	r2,394
  8061f0:	00806284 	movi	r2,394
  8061f4:	008069dc 	xori	r2,zero,423
  8061f8:	00806284 	movi	r2,394
  8061fc:	00806284 	movi	r2,394
  806200:	00806ffc 	xorhi	r2,zero,447
  806204:	00806284 	movi	r2,394
  806208:	00806284 	movi	r2,394
  80620c:	00806284 	movi	r2,394
  806210:	00806284 	movi	r2,394
  806214:	00806284 	movi	r2,394
  806218:	00806284 	movi	r2,394
  80621c:	00806284 	movi	r2,394
  806220:	00806284 	movi	r2,394
  806224:	00806284 	movi	r2,394
  806228:	00806284 	movi	r2,394
  80622c:	00806fd0 	cmplti	r2,zero,447
  806230:	008068e8 	cmpgeui	r2,zero,419
  806234:	00806f48 	cmpgei	r2,zero,445
  806238:	00806f48 	cmpgei	r2,zero,445
  80623c:	00806f48 	cmpgei	r2,zero,445
  806240:	00806f34 	movhi	r2,444
  806244:	008068e8 	cmpgeui	r2,zero,419
  806248:	00806284 	movi	r2,394
  80624c:	00806284 	movi	r2,394
  806250:	00806ebc 	xorhi	r2,zero,442
  806254:	00806284 	movi	r2,394
  806258:	00806e8c 	andi	r2,zero,442
  80625c:	0080699c 	xori	r2,zero,422
  806260:	00806eec 	andhi	r2,zero,443
  806264:	00806ed8 	cmpnei	r2,zero,443
  806268:	00806284 	movi	r2,394
  80626c:	00807168 	cmpgeui	r2,zero,453
  806270:	00806284 	movi	r2,394
  806274:	008069e8 	cmpgeui	r2,zero,423
  806278:	00806284 	movi	r2,394
  80627c:	00806284 	movi	r2,394
  806280:	00807060 	cmpeqi	r2,zero,449
  806284:	d9014d17 	ldw	r4,1332(sp)
  806288:	2000ce26 	beq	r4,zero,8065c4 <___vfprintf_internal_r+0x6d4>
  80628c:	01400044 	movi	r5,1
  806290:	d9800f04 	addi	r6,sp,60
  806294:	d9c14015 	stw	r7,1280(sp)
  806298:	d9414515 	stw	r5,1300(sp)
  80629c:	d9814115 	stw	r6,1284(sp)
  8062a0:	280f883a 	mov	r7,r5
  8062a4:	d9000f05 	stb	r4,60(sp)
  8062a8:	d8000405 	stb	zero,16(sp)
  8062ac:	d8014615 	stw	zero,1304(sp)
  8062b0:	d8c14c17 	ldw	r3,1328(sp)
  8062b4:	1880008c 	andi	r2,r3,2
  8062b8:	1005003a 	cmpeq	r2,r2,zero
  8062bc:	d8815015 	stw	r2,1344(sp)
  8062c0:	1000031e 	bne	r2,zero,8062d0 <___vfprintf_internal_r+0x3e0>
  8062c4:	d9014517 	ldw	r4,1300(sp)
  8062c8:	21000084 	addi	r4,r4,2
  8062cc:	d9014515 	stw	r4,1300(sp)
  8062d0:	d9414c17 	ldw	r5,1328(sp)
  8062d4:	2940210c 	andi	r5,r5,132
  8062d8:	d9414e15 	stw	r5,1336(sp)
  8062dc:	28002d1e 	bne	r5,zero,806394 <___vfprintf_internal_r+0x4a4>
  8062e0:	d9814a17 	ldw	r6,1320(sp)
  8062e4:	d8814517 	ldw	r2,1300(sp)
  8062e8:	30a1c83a 	sub	r16,r6,r2
  8062ec:	0400290e 	bge	zero,r16,806394 <___vfprintf_internal_r+0x4a4>
  8062f0:	00800404 	movi	r2,16
  8062f4:	1404580e 	bge	r2,r16,807458 <___vfprintf_internal_r+0x1568>
  8062f8:	dc800e17 	ldw	r18,56(sp)
  8062fc:	dc400d17 	ldw	r17,52(sp)
  806300:	1027883a 	mov	r19,r2
  806304:	070020b4 	movhi	fp,130
  806308:	e7209384 	addi	fp,fp,-32178
  80630c:	050001c4 	movi	r20,7
  806310:	00000306 	br	806320 <___vfprintf_internal_r+0x430>
  806314:	843ffc04 	addi	r16,r16,-16
  806318:	ad400204 	addi	r21,r21,8
  80631c:	9c00130e 	bge	r19,r16,80636c <___vfprintf_internal_r+0x47c>
  806320:	94800404 	addi	r18,r18,16
  806324:	8c400044 	addi	r17,r17,1
  806328:	af000015 	stw	fp,0(r21)
  80632c:	acc00115 	stw	r19,4(r21)
  806330:	dc800e15 	stw	r18,56(sp)
  806334:	dc400d15 	stw	r17,52(sp)
  806338:	a47ff60e 	bge	r20,r17,806314 <___vfprintf_internal_r+0x424>
  80633c:	d9014f17 	ldw	r4,1340(sp)
  806340:	b00b883a 	mov	r5,r22
  806344:	d9800c04 	addi	r6,sp,48
  806348:	d9c15115 	stw	r7,1348(sp)
  80634c:	0805e980 	call	805e98 <__sprint_r>
  806350:	d9c15117 	ldw	r7,1348(sp)
  806354:	10009e1e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  806358:	843ffc04 	addi	r16,r16,-16
  80635c:	dc800e17 	ldw	r18,56(sp)
  806360:	dc400d17 	ldw	r17,52(sp)
  806364:	dd401904 	addi	r21,sp,100
  806368:	9c3fed16 	blt	r19,r16,806320 <___vfprintf_internal_r+0x430>
  80636c:	9425883a 	add	r18,r18,r16
  806370:	8c400044 	addi	r17,r17,1
  806374:	008001c4 	movi	r2,7
  806378:	af000015 	stw	fp,0(r21)
  80637c:	ac000115 	stw	r16,4(r21)
  806380:	dc800e15 	stw	r18,56(sp)
  806384:	dc400d15 	stw	r17,52(sp)
  806388:	1441f516 	blt	r2,r17,806b60 <___vfprintf_internal_r+0xc70>
  80638c:	ad400204 	addi	r21,r21,8
  806390:	00000206 	br	80639c <___vfprintf_internal_r+0x4ac>
  806394:	dc800e17 	ldw	r18,56(sp)
  806398:	dc400d17 	ldw	r17,52(sp)
  80639c:	d8800407 	ldb	r2,16(sp)
  8063a0:	10000b26 	beq	r2,zero,8063d0 <___vfprintf_internal_r+0x4e0>
  8063a4:	00800044 	movi	r2,1
  8063a8:	94800044 	addi	r18,r18,1
  8063ac:	8c400044 	addi	r17,r17,1
  8063b0:	a8800115 	stw	r2,4(r21)
  8063b4:	d8c00404 	addi	r3,sp,16
  8063b8:	008001c4 	movi	r2,7
  8063bc:	a8c00015 	stw	r3,0(r21)
  8063c0:	dc800e15 	stw	r18,56(sp)
  8063c4:	dc400d15 	stw	r17,52(sp)
  8063c8:	1441da16 	blt	r2,r17,806b34 <___vfprintf_internal_r+0xc44>
  8063cc:	ad400204 	addi	r21,r21,8
  8063d0:	d9015017 	ldw	r4,1344(sp)
  8063d4:	20000b1e 	bne	r4,zero,806404 <___vfprintf_internal_r+0x514>
  8063d8:	d8800444 	addi	r2,sp,17
  8063dc:	94800084 	addi	r18,r18,2
  8063e0:	8c400044 	addi	r17,r17,1
  8063e4:	a8800015 	stw	r2,0(r21)
  8063e8:	00c00084 	movi	r3,2
  8063ec:	008001c4 	movi	r2,7
  8063f0:	a8c00115 	stw	r3,4(r21)
  8063f4:	dc800e15 	stw	r18,56(sp)
  8063f8:	dc400d15 	stw	r17,52(sp)
  8063fc:	1441c216 	blt	r2,r17,806b08 <___vfprintf_internal_r+0xc18>
  806400:	ad400204 	addi	r21,r21,8
  806404:	d9414e17 	ldw	r5,1336(sp)
  806408:	00802004 	movi	r2,128
  80640c:	2880b126 	beq	r5,r2,8066d4 <___vfprintf_internal_r+0x7e4>
  806410:	d8c14617 	ldw	r3,1304(sp)
  806414:	19e1c83a 	sub	r16,r3,r7
  806418:	0400260e 	bge	zero,r16,8064b4 <___vfprintf_internal_r+0x5c4>
  80641c:	00800404 	movi	r2,16
  806420:	1403c90e 	bge	r2,r16,807348 <___vfprintf_internal_r+0x1458>
  806424:	1027883a 	mov	r19,r2
  806428:	070020b4 	movhi	fp,130
  80642c:	e7208f84 	addi	fp,fp,-32194
  806430:	050001c4 	movi	r20,7
  806434:	00000306 	br	806444 <___vfprintf_internal_r+0x554>
  806438:	843ffc04 	addi	r16,r16,-16
  80643c:	ad400204 	addi	r21,r21,8
  806440:	9c00130e 	bge	r19,r16,806490 <___vfprintf_internal_r+0x5a0>
  806444:	94800404 	addi	r18,r18,16
  806448:	8c400044 	addi	r17,r17,1
  80644c:	af000015 	stw	fp,0(r21)
  806450:	acc00115 	stw	r19,4(r21)
  806454:	dc800e15 	stw	r18,56(sp)
  806458:	dc400d15 	stw	r17,52(sp)
  80645c:	a47ff60e 	bge	r20,r17,806438 <___vfprintf_internal_r+0x548>
  806460:	d9014f17 	ldw	r4,1340(sp)
  806464:	b00b883a 	mov	r5,r22
  806468:	d9800c04 	addi	r6,sp,48
  80646c:	d9c15115 	stw	r7,1348(sp)
  806470:	0805e980 	call	805e98 <__sprint_r>
  806474:	d9c15117 	ldw	r7,1348(sp)
  806478:	1000551e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  80647c:	843ffc04 	addi	r16,r16,-16
  806480:	dc800e17 	ldw	r18,56(sp)
  806484:	dc400d17 	ldw	r17,52(sp)
  806488:	dd401904 	addi	r21,sp,100
  80648c:	9c3fed16 	blt	r19,r16,806444 <___vfprintf_internal_r+0x554>
  806490:	9425883a 	add	r18,r18,r16
  806494:	8c400044 	addi	r17,r17,1
  806498:	008001c4 	movi	r2,7
  80649c:	af000015 	stw	fp,0(r21)
  8064a0:	ac000115 	stw	r16,4(r21)
  8064a4:	dc800e15 	stw	r18,56(sp)
  8064a8:	dc400d15 	stw	r17,52(sp)
  8064ac:	14418216 	blt	r2,r17,806ab8 <___vfprintf_internal_r+0xbc8>
  8064b0:	ad400204 	addi	r21,r21,8
  8064b4:	d9014c17 	ldw	r4,1328(sp)
  8064b8:	2080400c 	andi	r2,r4,256
  8064bc:	10004a1e 	bne	r2,zero,8065e8 <___vfprintf_internal_r+0x6f8>
  8064c0:	d9414117 	ldw	r5,1284(sp)
  8064c4:	91e5883a 	add	r18,r18,r7
  8064c8:	8c400044 	addi	r17,r17,1
  8064cc:	008001c4 	movi	r2,7
  8064d0:	a9400015 	stw	r5,0(r21)
  8064d4:	a9c00115 	stw	r7,4(r21)
  8064d8:	dc800e15 	stw	r18,56(sp)
  8064dc:	dc400d15 	stw	r17,52(sp)
  8064e0:	14416716 	blt	r2,r17,806a80 <___vfprintf_internal_r+0xb90>
  8064e4:	a8c00204 	addi	r3,r21,8
  8064e8:	d9814c17 	ldw	r6,1328(sp)
  8064ec:	3080010c 	andi	r2,r6,4
  8064f0:	10002826 	beq	r2,zero,806594 <___vfprintf_internal_r+0x6a4>
  8064f4:	d8814a17 	ldw	r2,1320(sp)
  8064f8:	d9014517 	ldw	r4,1300(sp)
  8064fc:	1121c83a 	sub	r16,r2,r4
  806500:	0400240e 	bge	zero,r16,806594 <___vfprintf_internal_r+0x6a4>
  806504:	00800404 	movi	r2,16
  806508:	14044f0e 	bge	r2,r16,807648 <___vfprintf_internal_r+0x1758>
  80650c:	dc400d17 	ldw	r17,52(sp)
  806510:	1027883a 	mov	r19,r2
  806514:	070020b4 	movhi	fp,130
  806518:	e7209384 	addi	fp,fp,-32178
  80651c:	050001c4 	movi	r20,7
  806520:	00000306 	br	806530 <___vfprintf_internal_r+0x640>
  806524:	843ffc04 	addi	r16,r16,-16
  806528:	18c00204 	addi	r3,r3,8
  80652c:	9c00110e 	bge	r19,r16,806574 <___vfprintf_internal_r+0x684>
  806530:	94800404 	addi	r18,r18,16
  806534:	8c400044 	addi	r17,r17,1
  806538:	1f000015 	stw	fp,0(r3)
  80653c:	1cc00115 	stw	r19,4(r3)
  806540:	dc800e15 	stw	r18,56(sp)
  806544:	dc400d15 	stw	r17,52(sp)
  806548:	a47ff60e 	bge	r20,r17,806524 <___vfprintf_internal_r+0x634>
  80654c:	d9014f17 	ldw	r4,1340(sp)
  806550:	b00b883a 	mov	r5,r22
  806554:	d9800c04 	addi	r6,sp,48
  806558:	0805e980 	call	805e98 <__sprint_r>
  80655c:	10001c1e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  806560:	843ffc04 	addi	r16,r16,-16
  806564:	dc800e17 	ldw	r18,56(sp)
  806568:	dc400d17 	ldw	r17,52(sp)
  80656c:	d8c01904 	addi	r3,sp,100
  806570:	9c3fef16 	blt	r19,r16,806530 <___vfprintf_internal_r+0x640>
  806574:	9425883a 	add	r18,r18,r16
  806578:	8c400044 	addi	r17,r17,1
  80657c:	008001c4 	movi	r2,7
  806580:	1f000015 	stw	fp,0(r3)
  806584:	1c000115 	stw	r16,4(r3)
  806588:	dc800e15 	stw	r18,56(sp)
  80658c:	dc400d15 	stw	r17,52(sp)
  806590:	1440cb16 	blt	r2,r17,8068c0 <___vfprintf_internal_r+0x9d0>
  806594:	d8814a17 	ldw	r2,1320(sp)
  806598:	d9414517 	ldw	r5,1300(sp)
  80659c:	1140010e 	bge	r2,r5,8065a4 <___vfprintf_internal_r+0x6b4>
  8065a0:	2805883a 	mov	r2,r5
  8065a4:	d9814b17 	ldw	r6,1324(sp)
  8065a8:	308d883a 	add	r6,r6,r2
  8065ac:	d9814b15 	stw	r6,1324(sp)
  8065b0:	90013b1e 	bne	r18,zero,806aa0 <___vfprintf_internal_r+0xbb0>
  8065b4:	d9c14017 	ldw	r7,1280(sp)
  8065b8:	dd401904 	addi	r21,sp,100
  8065bc:	d8000d15 	stw	zero,52(sp)
  8065c0:	003ea706 	br	806060 <___vfprintf_internal_r+0x170>
  8065c4:	d8800e17 	ldw	r2,56(sp)
  8065c8:	10053f1e 	bne	r2,zero,807ac8 <___vfprintf_internal_r+0x1bd8>
  8065cc:	d8000d15 	stw	zero,52(sp)
  8065d0:	b080030b 	ldhu	r2,12(r22)
  8065d4:	1080100c 	andi	r2,r2,64
  8065d8:	103e8726 	beq	r2,zero,805ff8 <___vfprintf_internal_r+0x108>
  8065dc:	00bfffc4 	movi	r2,-1
  8065e0:	d8814b15 	stw	r2,1324(sp)
  8065e4:	003e8406 	br	805ff8 <___vfprintf_internal_r+0x108>
  8065e8:	d9814d17 	ldw	r6,1332(sp)
  8065ec:	00801944 	movi	r2,101
  8065f0:	11806e16 	blt	r2,r6,8067ac <___vfprintf_internal_r+0x8bc>
  8065f4:	d9414717 	ldw	r5,1308(sp)
  8065f8:	00c00044 	movi	r3,1
  8065fc:	1943430e 	bge	r3,r5,80730c <___vfprintf_internal_r+0x141c>
  806600:	d8814117 	ldw	r2,1284(sp)
  806604:	94800044 	addi	r18,r18,1
  806608:	8c400044 	addi	r17,r17,1
  80660c:	a8800015 	stw	r2,0(r21)
  806610:	008001c4 	movi	r2,7
  806614:	a8c00115 	stw	r3,4(r21)
  806618:	dc800e15 	stw	r18,56(sp)
  80661c:	dc400d15 	stw	r17,52(sp)
  806620:	1441ca16 	blt	r2,r17,806d4c <___vfprintf_internal_r+0xe5c>
  806624:	a8c00204 	addi	r3,r21,8
  806628:	d9014917 	ldw	r4,1316(sp)
  80662c:	00800044 	movi	r2,1
  806630:	94800044 	addi	r18,r18,1
  806634:	8c400044 	addi	r17,r17,1
  806638:	18800115 	stw	r2,4(r3)
  80663c:	008001c4 	movi	r2,7
  806640:	19000015 	stw	r4,0(r3)
  806644:	dc800e15 	stw	r18,56(sp)
  806648:	dc400d15 	stw	r17,52(sp)
  80664c:	1441b616 	blt	r2,r17,806d28 <___vfprintf_internal_r+0xe38>
  806650:	1cc00204 	addi	r19,r3,8
  806654:	d9014217 	ldw	r4,1288(sp)
  806658:	d9414317 	ldw	r5,1292(sp)
  80665c:	000d883a 	mov	r6,zero
  806660:	000f883a 	mov	r7,zero
  806664:	080d3e80 	call	80d3e8 <__nedf2>
  806668:	10017426 	beq	r2,zero,806c3c <___vfprintf_internal_r+0xd4c>
  80666c:	d9414717 	ldw	r5,1308(sp)
  806670:	d9814117 	ldw	r6,1284(sp)
  806674:	8c400044 	addi	r17,r17,1
  806678:	2c85883a 	add	r2,r5,r18
  80667c:	14bfffc4 	addi	r18,r2,-1
  806680:	28bfffc4 	addi	r2,r5,-1
  806684:	30c00044 	addi	r3,r6,1
  806688:	98800115 	stw	r2,4(r19)
  80668c:	008001c4 	movi	r2,7
  806690:	98c00015 	stw	r3,0(r19)
  806694:	dc800e15 	stw	r18,56(sp)
  806698:	dc400d15 	stw	r17,52(sp)
  80669c:	14418e16 	blt	r2,r17,806cd8 <___vfprintf_internal_r+0xde8>
  8066a0:	9cc00204 	addi	r19,r19,8
  8066a4:	d9414817 	ldw	r5,1312(sp)
  8066a8:	d8800804 	addi	r2,sp,32
  8066ac:	8c400044 	addi	r17,r17,1
  8066b0:	9165883a 	add	r18,r18,r5
  8066b4:	98800015 	stw	r2,0(r19)
  8066b8:	008001c4 	movi	r2,7
  8066bc:	99400115 	stw	r5,4(r19)
  8066c0:	dc800e15 	stw	r18,56(sp)
  8066c4:	dc400d15 	stw	r17,52(sp)
  8066c8:	1440ed16 	blt	r2,r17,806a80 <___vfprintf_internal_r+0xb90>
  8066cc:	98c00204 	addi	r3,r19,8
  8066d0:	003f8506 	br	8064e8 <___vfprintf_internal_r+0x5f8>
  8066d4:	d9814a17 	ldw	r6,1320(sp)
  8066d8:	d8814517 	ldw	r2,1300(sp)
  8066dc:	30a1c83a 	sub	r16,r6,r2
  8066e0:	043f4b0e 	bge	zero,r16,806410 <___vfprintf_internal_r+0x520>
  8066e4:	00800404 	movi	r2,16
  8066e8:	1404340e 	bge	r2,r16,8077bc <___vfprintf_internal_r+0x18cc>
  8066ec:	1027883a 	mov	r19,r2
  8066f0:	070020b4 	movhi	fp,130
  8066f4:	e7208f84 	addi	fp,fp,-32194
  8066f8:	050001c4 	movi	r20,7
  8066fc:	00000306 	br	80670c <___vfprintf_internal_r+0x81c>
  806700:	843ffc04 	addi	r16,r16,-16
  806704:	ad400204 	addi	r21,r21,8
  806708:	9c00130e 	bge	r19,r16,806758 <___vfprintf_internal_r+0x868>
  80670c:	94800404 	addi	r18,r18,16
  806710:	8c400044 	addi	r17,r17,1
  806714:	af000015 	stw	fp,0(r21)
  806718:	acc00115 	stw	r19,4(r21)
  80671c:	dc800e15 	stw	r18,56(sp)
  806720:	dc400d15 	stw	r17,52(sp)
  806724:	a47ff60e 	bge	r20,r17,806700 <___vfprintf_internal_r+0x810>
  806728:	d9014f17 	ldw	r4,1340(sp)
  80672c:	b00b883a 	mov	r5,r22
  806730:	d9800c04 	addi	r6,sp,48
  806734:	d9c15115 	stw	r7,1348(sp)
  806738:	0805e980 	call	805e98 <__sprint_r>
  80673c:	d9c15117 	ldw	r7,1348(sp)
  806740:	103fa31e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  806744:	843ffc04 	addi	r16,r16,-16
  806748:	dc800e17 	ldw	r18,56(sp)
  80674c:	dc400d17 	ldw	r17,52(sp)
  806750:	dd401904 	addi	r21,sp,100
  806754:	9c3fed16 	blt	r19,r16,80670c <___vfprintf_internal_r+0x81c>
  806758:	9425883a 	add	r18,r18,r16
  80675c:	8c400044 	addi	r17,r17,1
  806760:	008001c4 	movi	r2,7
  806764:	af000015 	stw	fp,0(r21)
  806768:	ac000115 	stw	r16,4(r21)
  80676c:	dc800e15 	stw	r18,56(sp)
  806770:	dc400d15 	stw	r17,52(sp)
  806774:	14416116 	blt	r2,r17,806cfc <___vfprintf_internal_r+0xe0c>
  806778:	ad400204 	addi	r21,r21,8
  80677c:	003f2406 	br	806410 <___vfprintf_internal_r+0x520>
  806780:	d9014f17 	ldw	r4,1340(sp)
  806784:	08099600 	call	809960 <__sinit>
  806788:	d9c15117 	ldw	r7,1348(sp)
  80678c:	003def06 	br	805f4c <___vfprintf_internal_r+0x5c>
  806790:	d9014f17 	ldw	r4,1340(sp)
  806794:	b00b883a 	mov	r5,r22
  806798:	d9c15115 	stw	r7,1348(sp)
  80679c:	0807dc00 	call	807dc0 <__swsetup_r>
  8067a0:	d9c15117 	ldw	r7,1348(sp)
  8067a4:	103dee26 	beq	r2,zero,805f60 <___vfprintf_internal_r+0x70>
  8067a8:	003f8c06 	br	8065dc <___vfprintf_internal_r+0x6ec>
  8067ac:	d9014217 	ldw	r4,1288(sp)
  8067b0:	d9414317 	ldw	r5,1292(sp)
  8067b4:	000d883a 	mov	r6,zero
  8067b8:	000f883a 	mov	r7,zero
  8067bc:	08047e00 	call	8047e0 <__eqdf2>
  8067c0:	1000f21e 	bne	r2,zero,806b8c <___vfprintf_internal_r+0xc9c>
  8067c4:	008020b4 	movhi	r2,130
  8067c8:	10a08f04 	addi	r2,r2,-32196
  8067cc:	94800044 	addi	r18,r18,1
  8067d0:	8c400044 	addi	r17,r17,1
  8067d4:	a8800015 	stw	r2,0(r21)
  8067d8:	00c00044 	movi	r3,1
  8067dc:	008001c4 	movi	r2,7
  8067e0:	a8c00115 	stw	r3,4(r21)
  8067e4:	dc800e15 	stw	r18,56(sp)
  8067e8:	dc400d15 	stw	r17,52(sp)
  8067ec:	1442fa16 	blt	r2,r17,8073d8 <___vfprintf_internal_r+0x14e8>
  8067f0:	a8c00204 	addi	r3,r21,8
  8067f4:	d8800517 	ldw	r2,20(sp)
  8067f8:	d9014717 	ldw	r4,1308(sp)
  8067fc:	11015c0e 	bge	r2,r4,806d70 <___vfprintf_internal_r+0xe80>
  806800:	dc400d17 	ldw	r17,52(sp)
  806804:	d9814917 	ldw	r6,1316(sp)
  806808:	00800044 	movi	r2,1
  80680c:	94800044 	addi	r18,r18,1
  806810:	8c400044 	addi	r17,r17,1
  806814:	18800115 	stw	r2,4(r3)
  806818:	008001c4 	movi	r2,7
  80681c:	19800015 	stw	r6,0(r3)
  806820:	dc800e15 	stw	r18,56(sp)
  806824:	dc400d15 	stw	r17,52(sp)
  806828:	14431016 	blt	r2,r17,80746c <___vfprintf_internal_r+0x157c>
  80682c:	18c00204 	addi	r3,r3,8
  806830:	d8814717 	ldw	r2,1308(sp)
  806834:	143fffc4 	addi	r16,r2,-1
  806838:	043f2b0e 	bge	zero,r16,8064e8 <___vfprintf_internal_r+0x5f8>
  80683c:	00800404 	movi	r2,16
  806840:	1402a20e 	bge	r2,r16,8072cc <___vfprintf_internal_r+0x13dc>
  806844:	dc400d17 	ldw	r17,52(sp)
  806848:	1027883a 	mov	r19,r2
  80684c:	070020b4 	movhi	fp,130
  806850:	e7208f84 	addi	fp,fp,-32194
  806854:	050001c4 	movi	r20,7
  806858:	00000306 	br	806868 <___vfprintf_internal_r+0x978>
  80685c:	18c00204 	addi	r3,r3,8
  806860:	843ffc04 	addi	r16,r16,-16
  806864:	9c029c0e 	bge	r19,r16,8072d8 <___vfprintf_internal_r+0x13e8>
  806868:	94800404 	addi	r18,r18,16
  80686c:	8c400044 	addi	r17,r17,1
  806870:	1f000015 	stw	fp,0(r3)
  806874:	1cc00115 	stw	r19,4(r3)
  806878:	dc800e15 	stw	r18,56(sp)
  80687c:	dc400d15 	stw	r17,52(sp)
  806880:	a47ff60e 	bge	r20,r17,80685c <___vfprintf_internal_r+0x96c>
  806884:	d9014f17 	ldw	r4,1340(sp)
  806888:	b00b883a 	mov	r5,r22
  80688c:	d9800c04 	addi	r6,sp,48
  806890:	0805e980 	call	805e98 <__sprint_r>
  806894:	103f4e1e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  806898:	dc800e17 	ldw	r18,56(sp)
  80689c:	dc400d17 	ldw	r17,52(sp)
  8068a0:	d8c01904 	addi	r3,sp,100
  8068a4:	003fee06 	br	806860 <___vfprintf_internal_r+0x970>
  8068a8:	d8802c0b 	ldhu	r2,176(sp)
  8068ac:	00ffffc4 	movi	r3,-1
  8068b0:	d8c14b15 	stw	r3,1324(sp)
  8068b4:	1080100c 	andi	r2,r2,64
  8068b8:	103dcc1e 	bne	r2,zero,805fec <___vfprintf_internal_r+0xfc>
  8068bc:	003dce06 	br	805ff8 <___vfprintf_internal_r+0x108>
  8068c0:	d9014f17 	ldw	r4,1340(sp)
  8068c4:	b00b883a 	mov	r5,r22
  8068c8:	d9800c04 	addi	r6,sp,48
  8068cc:	0805e980 	call	805e98 <__sprint_r>
  8068d0:	103f3f1e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  8068d4:	dc800e17 	ldw	r18,56(sp)
  8068d8:	003f2e06 	br	806594 <___vfprintf_internal_r+0x6a4>
  8068dc:	d9414c17 	ldw	r5,1328(sp)
  8068e0:	29400414 	ori	r5,r5,16
  8068e4:	d9414c15 	stw	r5,1328(sp)
  8068e8:	d9814c17 	ldw	r6,1328(sp)
  8068ec:	3080080c 	andi	r2,r6,32
  8068f0:	10014f1e 	bne	r2,zero,806e30 <___vfprintf_internal_r+0xf40>
  8068f4:	d8c14c17 	ldw	r3,1328(sp)
  8068f8:	1880040c 	andi	r2,r3,16
  8068fc:	1002ea1e 	bne	r2,zero,8074a8 <___vfprintf_internal_r+0x15b8>
  806900:	d9014c17 	ldw	r4,1328(sp)
  806904:	2080100c 	andi	r2,r4,64
  806908:	1002e726 	beq	r2,zero,8074a8 <___vfprintf_internal_r+0x15b8>
  80690c:	3880000f 	ldh	r2,0(r7)
  806910:	39c00104 	addi	r7,r7,4
  806914:	d9c14015 	stw	r7,1280(sp)
  806918:	1023d7fa 	srai	r17,r2,31
  80691c:	1021883a 	mov	r16,r2
  806920:	88037216 	blt	r17,zero,8076ec <___vfprintf_internal_r+0x17fc>
  806924:	01000044 	movi	r4,1
  806928:	98000416 	blt	r19,zero,80693c <___vfprintf_internal_r+0xa4c>
  80692c:	d8c14c17 	ldw	r3,1328(sp)
  806930:	00bfdfc4 	movi	r2,-129
  806934:	1886703a 	and	r3,r3,r2
  806938:	d8c14c15 	stw	r3,1328(sp)
  80693c:	8444b03a 	or	r2,r16,r17
  806940:	1002261e 	bne	r2,zero,8071dc <___vfprintf_internal_r+0x12ec>
  806944:	9802251e 	bne	r19,zero,8071dc <___vfprintf_internal_r+0x12ec>
  806948:	20803fcc 	andi	r2,r4,255
  80694c:	10029b26 	beq	r2,zero,8073bc <___vfprintf_internal_r+0x14cc>
  806950:	d8c01904 	addi	r3,sp,100
  806954:	dd000f04 	addi	r20,sp,60
  806958:	d8c14115 	stw	r3,1284(sp)
  80695c:	d8c14117 	ldw	r3,1284(sp)
  806960:	dcc14515 	stw	r19,1300(sp)
  806964:	a0c5c83a 	sub	r2,r20,r3
  806968:	11c00a04 	addi	r7,r2,40
  80696c:	99c0010e 	bge	r19,r7,806974 <___vfprintf_internal_r+0xa84>
  806970:	d9c14515 	stw	r7,1300(sp)
  806974:	dcc14615 	stw	r19,1304(sp)
  806978:	d8800407 	ldb	r2,16(sp)
  80697c:	103e4c26 	beq	r2,zero,8062b0 <___vfprintf_internal_r+0x3c0>
  806980:	d8814517 	ldw	r2,1300(sp)
  806984:	10800044 	addi	r2,r2,1
  806988:	d8814515 	stw	r2,1300(sp)
  80698c:	003e4806 	br	8062b0 <___vfprintf_internal_r+0x3c0>
  806990:	d9814c17 	ldw	r6,1328(sp)
  806994:	31800414 	ori	r6,r6,16
  806998:	d9814c15 	stw	r6,1328(sp)
  80699c:	d8c14c17 	ldw	r3,1328(sp)
  8069a0:	1880080c 	andi	r2,r3,32
  8069a4:	1001271e 	bne	r2,zero,806e44 <___vfprintf_internal_r+0xf54>
  8069a8:	d9414c17 	ldw	r5,1328(sp)
  8069ac:	2880040c 	andi	r2,r5,16
  8069b0:	1002b61e 	bne	r2,zero,80748c <___vfprintf_internal_r+0x159c>
  8069b4:	d9814c17 	ldw	r6,1328(sp)
  8069b8:	3080100c 	andi	r2,r6,64
  8069bc:	1002b326 	beq	r2,zero,80748c <___vfprintf_internal_r+0x159c>
  8069c0:	3c00000b 	ldhu	r16,0(r7)
  8069c4:	0009883a 	mov	r4,zero
  8069c8:	39c00104 	addi	r7,r7,4
  8069cc:	0023883a 	mov	r17,zero
  8069d0:	d9c14015 	stw	r7,1280(sp)
  8069d4:	d8000405 	stb	zero,16(sp)
  8069d8:	003fd306 	br	806928 <___vfprintf_internal_r+0xa38>
  8069dc:	d9014c17 	ldw	r4,1328(sp)
  8069e0:	21000414 	ori	r4,r4,16
  8069e4:	d9014c15 	stw	r4,1328(sp)
  8069e8:	d9414c17 	ldw	r5,1328(sp)
  8069ec:	2880080c 	andi	r2,r5,32
  8069f0:	1001081e 	bne	r2,zero,806e14 <___vfprintf_internal_r+0xf24>
  8069f4:	d8c14c17 	ldw	r3,1328(sp)
  8069f8:	1880040c 	andi	r2,r3,16
  8069fc:	1002b01e 	bne	r2,zero,8074c0 <___vfprintf_internal_r+0x15d0>
  806a00:	d9014c17 	ldw	r4,1328(sp)
  806a04:	2080100c 	andi	r2,r4,64
  806a08:	1002ad26 	beq	r2,zero,8074c0 <___vfprintf_internal_r+0x15d0>
  806a0c:	3c00000b 	ldhu	r16,0(r7)
  806a10:	01000044 	movi	r4,1
  806a14:	39c00104 	addi	r7,r7,4
  806a18:	0023883a 	mov	r17,zero
  806a1c:	d9c14015 	stw	r7,1280(sp)
  806a20:	d8000405 	stb	zero,16(sp)
  806a24:	003fc006 	br	806928 <___vfprintf_internal_r+0xa38>
  806a28:	d9014f17 	ldw	r4,1340(sp)
  806a2c:	b00b883a 	mov	r5,r22
  806a30:	d9800c04 	addi	r6,sp,48
  806a34:	0805e980 	call	805e98 <__sprint_r>
  806a38:	103ee51e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  806a3c:	dc800e17 	ldw	r18,56(sp)
  806a40:	d8c01904 	addi	r3,sp,100
  806a44:	d9814c17 	ldw	r6,1328(sp)
  806a48:	3080004c 	andi	r2,r6,1
  806a4c:	1005003a 	cmpeq	r2,r2,zero
  806a50:	103ea51e 	bne	r2,zero,8064e8 <___vfprintf_internal_r+0x5f8>
  806a54:	00800044 	movi	r2,1
  806a58:	dc400d17 	ldw	r17,52(sp)
  806a5c:	18800115 	stw	r2,4(r3)
  806a60:	d8814917 	ldw	r2,1316(sp)
  806a64:	94800044 	addi	r18,r18,1
  806a68:	8c400044 	addi	r17,r17,1
  806a6c:	18800015 	stw	r2,0(r3)
  806a70:	008001c4 	movi	r2,7
  806a74:	dc800e15 	stw	r18,56(sp)
  806a78:	dc400d15 	stw	r17,52(sp)
  806a7c:	14421e0e 	bge	r2,r17,8072f8 <___vfprintf_internal_r+0x1408>
  806a80:	d9014f17 	ldw	r4,1340(sp)
  806a84:	b00b883a 	mov	r5,r22
  806a88:	d9800c04 	addi	r6,sp,48
  806a8c:	0805e980 	call	805e98 <__sprint_r>
  806a90:	103ecf1e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  806a94:	dc800e17 	ldw	r18,56(sp)
  806a98:	d8c01904 	addi	r3,sp,100
  806a9c:	003e9206 	br	8064e8 <___vfprintf_internal_r+0x5f8>
  806aa0:	d9014f17 	ldw	r4,1340(sp)
  806aa4:	b00b883a 	mov	r5,r22
  806aa8:	d9800c04 	addi	r6,sp,48
  806aac:	0805e980 	call	805e98 <__sprint_r>
  806ab0:	103ec026 	beq	r2,zero,8065b4 <___vfprintf_internal_r+0x6c4>
  806ab4:	003ec606 	br	8065d0 <___vfprintf_internal_r+0x6e0>
  806ab8:	d9014f17 	ldw	r4,1340(sp)
  806abc:	b00b883a 	mov	r5,r22
  806ac0:	d9800c04 	addi	r6,sp,48
  806ac4:	d9c15115 	stw	r7,1348(sp)
  806ac8:	0805e980 	call	805e98 <__sprint_r>
  806acc:	d9c15117 	ldw	r7,1348(sp)
  806ad0:	103ebf1e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  806ad4:	dc800e17 	ldw	r18,56(sp)
  806ad8:	dc400d17 	ldw	r17,52(sp)
  806adc:	dd401904 	addi	r21,sp,100
  806ae0:	003e7406 	br	8064b4 <___vfprintf_internal_r+0x5c4>
  806ae4:	d9014f17 	ldw	r4,1340(sp)
  806ae8:	b00b883a 	mov	r5,r22
  806aec:	d9800c04 	addi	r6,sp,48
  806af0:	d9c15115 	stw	r7,1348(sp)
  806af4:	0805e980 	call	805e98 <__sprint_r>
  806af8:	d9c15117 	ldw	r7,1348(sp)
  806afc:	103eb41e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  806b00:	dd401904 	addi	r21,sp,100
  806b04:	003d6d06 	br	8060bc <___vfprintf_internal_r+0x1cc>
  806b08:	d9014f17 	ldw	r4,1340(sp)
  806b0c:	b00b883a 	mov	r5,r22
  806b10:	d9800c04 	addi	r6,sp,48
  806b14:	d9c15115 	stw	r7,1348(sp)
  806b18:	0805e980 	call	805e98 <__sprint_r>
  806b1c:	d9c15117 	ldw	r7,1348(sp)
  806b20:	103eab1e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  806b24:	dc800e17 	ldw	r18,56(sp)
  806b28:	dc400d17 	ldw	r17,52(sp)
  806b2c:	dd401904 	addi	r21,sp,100
  806b30:	003e3406 	br	806404 <___vfprintf_internal_r+0x514>
  806b34:	d9014f17 	ldw	r4,1340(sp)
  806b38:	b00b883a 	mov	r5,r22
  806b3c:	d9800c04 	addi	r6,sp,48
  806b40:	d9c15115 	stw	r7,1348(sp)
  806b44:	0805e980 	call	805e98 <__sprint_r>
  806b48:	d9c15117 	ldw	r7,1348(sp)
  806b4c:	103ea01e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  806b50:	dc800e17 	ldw	r18,56(sp)
  806b54:	dc400d17 	ldw	r17,52(sp)
  806b58:	dd401904 	addi	r21,sp,100
  806b5c:	003e1c06 	br	8063d0 <___vfprintf_internal_r+0x4e0>
  806b60:	d9014f17 	ldw	r4,1340(sp)
  806b64:	b00b883a 	mov	r5,r22
  806b68:	d9800c04 	addi	r6,sp,48
  806b6c:	d9c15115 	stw	r7,1348(sp)
  806b70:	0805e980 	call	805e98 <__sprint_r>
  806b74:	d9c15117 	ldw	r7,1348(sp)
  806b78:	103e951e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  806b7c:	dc800e17 	ldw	r18,56(sp)
  806b80:	dc400d17 	ldw	r17,52(sp)
  806b84:	dd401904 	addi	r21,sp,100
  806b88:	003e0406 	br	80639c <___vfprintf_internal_r+0x4ac>
  806b8c:	d9000517 	ldw	r4,20(sp)
  806b90:	0102520e 	bge	zero,r4,8074dc <___vfprintf_internal_r+0x15ec>
  806b94:	d9814717 	ldw	r6,1308(sp)
  806b98:	21807a16 	blt	r4,r6,806d84 <___vfprintf_internal_r+0xe94>
  806b9c:	d8814117 	ldw	r2,1284(sp)
  806ba0:	91a5883a 	add	r18,r18,r6
  806ba4:	8c400044 	addi	r17,r17,1
  806ba8:	a8800015 	stw	r2,0(r21)
  806bac:	008001c4 	movi	r2,7
  806bb0:	a9800115 	stw	r6,4(r21)
  806bb4:	dc800e15 	stw	r18,56(sp)
  806bb8:	dc400d15 	stw	r17,52(sp)
  806bbc:	1442f616 	blt	r2,r17,807798 <___vfprintf_internal_r+0x18a8>
  806bc0:	a8c00204 	addi	r3,r21,8
  806bc4:	d9414717 	ldw	r5,1308(sp)
  806bc8:	2161c83a 	sub	r16,r4,r5
  806bcc:	043f9d0e 	bge	zero,r16,806a44 <___vfprintf_internal_r+0xb54>
  806bd0:	00800404 	movi	r2,16
  806bd4:	1402130e 	bge	r2,r16,807424 <___vfprintf_internal_r+0x1534>
  806bd8:	dc400d17 	ldw	r17,52(sp)
  806bdc:	1027883a 	mov	r19,r2
  806be0:	070020b4 	movhi	fp,130
  806be4:	e7208f84 	addi	fp,fp,-32194
  806be8:	050001c4 	movi	r20,7
  806bec:	00000306 	br	806bfc <___vfprintf_internal_r+0xd0c>
  806bf0:	18c00204 	addi	r3,r3,8
  806bf4:	843ffc04 	addi	r16,r16,-16
  806bf8:	9c020d0e 	bge	r19,r16,807430 <___vfprintf_internal_r+0x1540>
  806bfc:	94800404 	addi	r18,r18,16
  806c00:	8c400044 	addi	r17,r17,1
  806c04:	1f000015 	stw	fp,0(r3)
  806c08:	1cc00115 	stw	r19,4(r3)
  806c0c:	dc800e15 	stw	r18,56(sp)
  806c10:	dc400d15 	stw	r17,52(sp)
  806c14:	a47ff60e 	bge	r20,r17,806bf0 <___vfprintf_internal_r+0xd00>
  806c18:	d9014f17 	ldw	r4,1340(sp)
  806c1c:	b00b883a 	mov	r5,r22
  806c20:	d9800c04 	addi	r6,sp,48
  806c24:	0805e980 	call	805e98 <__sprint_r>
  806c28:	103e691e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  806c2c:	dc800e17 	ldw	r18,56(sp)
  806c30:	dc400d17 	ldw	r17,52(sp)
  806c34:	d8c01904 	addi	r3,sp,100
  806c38:	003fee06 	br	806bf4 <___vfprintf_internal_r+0xd04>
  806c3c:	d8814717 	ldw	r2,1308(sp)
  806c40:	143fffc4 	addi	r16,r2,-1
  806c44:	043e970e 	bge	zero,r16,8066a4 <___vfprintf_internal_r+0x7b4>
  806c48:	00800404 	movi	r2,16
  806c4c:	1400180e 	bge	r2,r16,806cb0 <___vfprintf_internal_r+0xdc0>
  806c50:	1029883a 	mov	r20,r2
  806c54:	070020b4 	movhi	fp,130
  806c58:	e7208f84 	addi	fp,fp,-32194
  806c5c:	054001c4 	movi	r21,7
  806c60:	00000306 	br	806c70 <___vfprintf_internal_r+0xd80>
  806c64:	9cc00204 	addi	r19,r19,8
  806c68:	843ffc04 	addi	r16,r16,-16
  806c6c:	a400120e 	bge	r20,r16,806cb8 <___vfprintf_internal_r+0xdc8>
  806c70:	94800404 	addi	r18,r18,16
  806c74:	8c400044 	addi	r17,r17,1
  806c78:	9f000015 	stw	fp,0(r19)
  806c7c:	9d000115 	stw	r20,4(r19)
  806c80:	dc800e15 	stw	r18,56(sp)
  806c84:	dc400d15 	stw	r17,52(sp)
  806c88:	ac7ff60e 	bge	r21,r17,806c64 <___vfprintf_internal_r+0xd74>
  806c8c:	d9014f17 	ldw	r4,1340(sp)
  806c90:	b00b883a 	mov	r5,r22
  806c94:	d9800c04 	addi	r6,sp,48
  806c98:	0805e980 	call	805e98 <__sprint_r>
  806c9c:	103e4c1e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  806ca0:	dc800e17 	ldw	r18,56(sp)
  806ca4:	dc400d17 	ldw	r17,52(sp)
  806ca8:	dcc01904 	addi	r19,sp,100
  806cac:	003fee06 	br	806c68 <___vfprintf_internal_r+0xd78>
  806cb0:	070020b4 	movhi	fp,130
  806cb4:	e7208f84 	addi	fp,fp,-32194
  806cb8:	9425883a 	add	r18,r18,r16
  806cbc:	8c400044 	addi	r17,r17,1
  806cc0:	008001c4 	movi	r2,7
  806cc4:	9f000015 	stw	fp,0(r19)
  806cc8:	9c000115 	stw	r16,4(r19)
  806ccc:	dc800e15 	stw	r18,56(sp)
  806cd0:	dc400d15 	stw	r17,52(sp)
  806cd4:	147e720e 	bge	r2,r17,8066a0 <___vfprintf_internal_r+0x7b0>
  806cd8:	d9014f17 	ldw	r4,1340(sp)
  806cdc:	b00b883a 	mov	r5,r22
  806ce0:	d9800c04 	addi	r6,sp,48
  806ce4:	0805e980 	call	805e98 <__sprint_r>
  806ce8:	103e391e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  806cec:	dc800e17 	ldw	r18,56(sp)
  806cf0:	dc400d17 	ldw	r17,52(sp)
  806cf4:	dcc01904 	addi	r19,sp,100
  806cf8:	003e6a06 	br	8066a4 <___vfprintf_internal_r+0x7b4>
  806cfc:	d9014f17 	ldw	r4,1340(sp)
  806d00:	b00b883a 	mov	r5,r22
  806d04:	d9800c04 	addi	r6,sp,48
  806d08:	d9c15115 	stw	r7,1348(sp)
  806d0c:	0805e980 	call	805e98 <__sprint_r>
  806d10:	d9c15117 	ldw	r7,1348(sp)
  806d14:	103e2e1e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  806d18:	dc800e17 	ldw	r18,56(sp)
  806d1c:	dc400d17 	ldw	r17,52(sp)
  806d20:	dd401904 	addi	r21,sp,100
  806d24:	003dba06 	br	806410 <___vfprintf_internal_r+0x520>
  806d28:	d9014f17 	ldw	r4,1340(sp)
  806d2c:	b00b883a 	mov	r5,r22
  806d30:	d9800c04 	addi	r6,sp,48
  806d34:	0805e980 	call	805e98 <__sprint_r>
  806d38:	103e251e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  806d3c:	dc800e17 	ldw	r18,56(sp)
  806d40:	dc400d17 	ldw	r17,52(sp)
  806d44:	dcc01904 	addi	r19,sp,100
  806d48:	003e4206 	br	806654 <___vfprintf_internal_r+0x764>
  806d4c:	d9014f17 	ldw	r4,1340(sp)
  806d50:	b00b883a 	mov	r5,r22
  806d54:	d9800c04 	addi	r6,sp,48
  806d58:	0805e980 	call	805e98 <__sprint_r>
  806d5c:	103e1c1e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  806d60:	dc800e17 	ldw	r18,56(sp)
  806d64:	dc400d17 	ldw	r17,52(sp)
  806d68:	d8c01904 	addi	r3,sp,100
  806d6c:	003e2e06 	br	806628 <___vfprintf_internal_r+0x738>
  806d70:	d9414c17 	ldw	r5,1328(sp)
  806d74:	2880004c 	andi	r2,r5,1
  806d78:	1005003a 	cmpeq	r2,r2,zero
  806d7c:	103dda1e 	bne	r2,zero,8064e8 <___vfprintf_internal_r+0x5f8>
  806d80:	003e9f06 	br	806800 <___vfprintf_internal_r+0x910>
  806d84:	d8c14117 	ldw	r3,1284(sp)
  806d88:	9125883a 	add	r18,r18,r4
  806d8c:	8c400044 	addi	r17,r17,1
  806d90:	008001c4 	movi	r2,7
  806d94:	a8c00015 	stw	r3,0(r21)
  806d98:	a9000115 	stw	r4,4(r21)
  806d9c:	dc800e15 	stw	r18,56(sp)
  806da0:	dc400d15 	stw	r17,52(sp)
  806da4:	14426616 	blt	r2,r17,807740 <___vfprintf_internal_r+0x1850>
  806da8:	a8c00204 	addi	r3,r21,8
  806dac:	d9414917 	ldw	r5,1316(sp)
  806db0:	00800044 	movi	r2,1
  806db4:	94800044 	addi	r18,r18,1
  806db8:	8c400044 	addi	r17,r17,1
  806dbc:	18800115 	stw	r2,4(r3)
  806dc0:	008001c4 	movi	r2,7
  806dc4:	19400015 	stw	r5,0(r3)
  806dc8:	dc800e15 	stw	r18,56(sp)
  806dcc:	dc400d15 	stw	r17,52(sp)
  806dd0:	2021883a 	mov	r16,r4
  806dd4:	14425016 	blt	r2,r17,807718 <___vfprintf_internal_r+0x1828>
  806dd8:	19400204 	addi	r5,r3,8
  806ddc:	d9814717 	ldw	r6,1308(sp)
  806de0:	8c400044 	addi	r17,r17,1
  806de4:	dc400d15 	stw	r17,52(sp)
  806de8:	3107c83a 	sub	r3,r6,r4
  806dec:	d9014117 	ldw	r4,1284(sp)
  806df0:	90e5883a 	add	r18,r18,r3
  806df4:	28c00115 	stw	r3,4(r5)
  806df8:	8105883a 	add	r2,r16,r4
  806dfc:	28800015 	stw	r2,0(r5)
  806e00:	008001c4 	movi	r2,7
  806e04:	dc800e15 	stw	r18,56(sp)
  806e08:	147f1d16 	blt	r2,r17,806a80 <___vfprintf_internal_r+0xb90>
  806e0c:	28c00204 	addi	r3,r5,8
  806e10:	003db506 	br	8064e8 <___vfprintf_internal_r+0x5f8>
  806e14:	3c000017 	ldw	r16,0(r7)
  806e18:	3c400117 	ldw	r17,4(r7)
  806e1c:	39800204 	addi	r6,r7,8
  806e20:	01000044 	movi	r4,1
  806e24:	d9814015 	stw	r6,1280(sp)
  806e28:	d8000405 	stb	zero,16(sp)
  806e2c:	003ebe06 	br	806928 <___vfprintf_internal_r+0xa38>
  806e30:	3c000017 	ldw	r16,0(r7)
  806e34:	3c400117 	ldw	r17,4(r7)
  806e38:	38800204 	addi	r2,r7,8
  806e3c:	d8814015 	stw	r2,1280(sp)
  806e40:	003eb706 	br	806920 <___vfprintf_internal_r+0xa30>
  806e44:	3c000017 	ldw	r16,0(r7)
  806e48:	3c400117 	ldw	r17,4(r7)
  806e4c:	39000204 	addi	r4,r7,8
  806e50:	d9014015 	stw	r4,1280(sp)
  806e54:	0009883a 	mov	r4,zero
  806e58:	d8000405 	stb	zero,16(sp)
  806e5c:	003eb206 	br	806928 <___vfprintf_internal_r+0xa38>
  806e60:	38c00017 	ldw	r3,0(r7)
  806e64:	39c00104 	addi	r7,r7,4
  806e68:	d8c14a15 	stw	r3,1320(sp)
  806e6c:	1800d10e 	bge	r3,zero,8071b4 <___vfprintf_internal_r+0x12c4>
  806e70:	00c7c83a 	sub	r3,zero,r3
  806e74:	d8c14a15 	stw	r3,1320(sp)
  806e78:	d9014c17 	ldw	r4,1328(sp)
  806e7c:	b8c00007 	ldb	r3,0(r23)
  806e80:	21000114 	ori	r4,r4,4
  806e84:	d9014c15 	stw	r4,1328(sp)
  806e88:	003c9806 	br	8060ec <___vfprintf_internal_r+0x1fc>
  806e8c:	d9814c17 	ldw	r6,1328(sp)
  806e90:	3080080c 	andi	r2,r6,32
  806e94:	1001f026 	beq	r2,zero,807658 <___vfprintf_internal_r+0x1768>
  806e98:	d9014b17 	ldw	r4,1324(sp)
  806e9c:	38800017 	ldw	r2,0(r7)
  806ea0:	39c00104 	addi	r7,r7,4
  806ea4:	d9c14015 	stw	r7,1280(sp)
  806ea8:	2007d7fa 	srai	r3,r4,31
  806eac:	d9c14017 	ldw	r7,1280(sp)
  806eb0:	11000015 	stw	r4,0(r2)
  806eb4:	10c00115 	stw	r3,4(r2)
  806eb8:	003c6906 	br	806060 <___vfprintf_internal_r+0x170>
  806ebc:	b8c00007 	ldb	r3,0(r23)
  806ec0:	00801b04 	movi	r2,108
  806ec4:	18824f26 	beq	r3,r2,807804 <___vfprintf_internal_r+0x1914>
  806ec8:	d9414c17 	ldw	r5,1328(sp)
  806ecc:	29400414 	ori	r5,r5,16
  806ed0:	d9414c15 	stw	r5,1328(sp)
  806ed4:	003c8506 	br	8060ec <___vfprintf_internal_r+0x1fc>
  806ed8:	d9814c17 	ldw	r6,1328(sp)
  806edc:	b8c00007 	ldb	r3,0(r23)
  806ee0:	31800814 	ori	r6,r6,32
  806ee4:	d9814c15 	stw	r6,1328(sp)
  806ee8:	003c8006 	br	8060ec <___vfprintf_internal_r+0x1fc>
  806eec:	d8814c17 	ldw	r2,1328(sp)
  806ef0:	3c000017 	ldw	r16,0(r7)
  806ef4:	00c01e04 	movi	r3,120
  806ef8:	10800094 	ori	r2,r2,2
  806efc:	d8814c15 	stw	r2,1328(sp)
  806f00:	39c00104 	addi	r7,r7,4
  806f04:	014020b4 	movhi	r5,130
  806f08:	29607804 	addi	r5,r5,-32288
  806f0c:	00800c04 	movi	r2,48
  806f10:	0023883a 	mov	r17,zero
  806f14:	01000084 	movi	r4,2
  806f18:	d9c14015 	stw	r7,1280(sp)
  806f1c:	d8c14d15 	stw	r3,1332(sp)
  806f20:	d9414415 	stw	r5,1296(sp)
  806f24:	d8800445 	stb	r2,17(sp)
  806f28:	d8c00485 	stb	r3,18(sp)
  806f2c:	d8000405 	stb	zero,16(sp)
  806f30:	003e7d06 	br	806928 <___vfprintf_internal_r+0xa38>
  806f34:	d8814c17 	ldw	r2,1328(sp)
  806f38:	b8c00007 	ldb	r3,0(r23)
  806f3c:	10801014 	ori	r2,r2,64
  806f40:	d8814c15 	stw	r2,1328(sp)
  806f44:	003c6906 	br	8060ec <___vfprintf_internal_r+0x1fc>
  806f48:	d9414c17 	ldw	r5,1328(sp)
  806f4c:	2880020c 	andi	r2,r5,8
  806f50:	1001df26 	beq	r2,zero,8076d0 <___vfprintf_internal_r+0x17e0>
  806f54:	39800017 	ldw	r6,0(r7)
  806f58:	38800204 	addi	r2,r7,8
  806f5c:	d8814015 	stw	r2,1280(sp)
  806f60:	d9814215 	stw	r6,1288(sp)
  806f64:	39c00117 	ldw	r7,4(r7)
  806f68:	d9c14315 	stw	r7,1292(sp)
  806f6c:	d9014217 	ldw	r4,1288(sp)
  806f70:	d9414317 	ldw	r5,1292(sp)
  806f74:	080c1500 	call	80c150 <__isinfd>
  806f78:	10021726 	beq	r2,zero,8077d8 <___vfprintf_internal_r+0x18e8>
  806f7c:	d9014217 	ldw	r4,1288(sp)
  806f80:	d9414317 	ldw	r5,1292(sp)
  806f84:	000d883a 	mov	r6,zero
  806f88:	000f883a 	mov	r7,zero
  806f8c:	080d4700 	call	80d470 <__ltdf2>
  806f90:	1002ca16 	blt	r2,zero,807abc <___vfprintf_internal_r+0x1bcc>
  806f94:	d9414d17 	ldw	r5,1332(sp)
  806f98:	008011c4 	movi	r2,71
  806f9c:	11420a16 	blt	r2,r5,8077c8 <___vfprintf_internal_r+0x18d8>
  806fa0:	018020b4 	movhi	r6,130
  806fa4:	31a07d04 	addi	r6,r6,-32268
  806fa8:	d9814115 	stw	r6,1284(sp)
  806fac:	d9014c17 	ldw	r4,1328(sp)
  806fb0:	00c000c4 	movi	r3,3
  806fb4:	00bfdfc4 	movi	r2,-129
  806fb8:	2088703a 	and	r4,r4,r2
  806fbc:	180f883a 	mov	r7,r3
  806fc0:	d8c14515 	stw	r3,1300(sp)
  806fc4:	d9014c15 	stw	r4,1328(sp)
  806fc8:	d8014615 	stw	zero,1304(sp)
  806fcc:	003e6a06 	br	806978 <___vfprintf_internal_r+0xa88>
  806fd0:	38800017 	ldw	r2,0(r7)
  806fd4:	00c00044 	movi	r3,1
  806fd8:	39c00104 	addi	r7,r7,4
  806fdc:	d9c14015 	stw	r7,1280(sp)
  806fe0:	d9000f04 	addi	r4,sp,60
  806fe4:	180f883a 	mov	r7,r3
  806fe8:	d8c14515 	stw	r3,1300(sp)
  806fec:	d9014115 	stw	r4,1284(sp)
  806ff0:	d8800f05 	stb	r2,60(sp)
  806ff4:	d8000405 	stb	zero,16(sp)
  806ff8:	003cac06 	br	8062ac <___vfprintf_internal_r+0x3bc>
  806ffc:	014020b4 	movhi	r5,130
  807000:	29608304 	addi	r5,r5,-32244
  807004:	d9414415 	stw	r5,1296(sp)
  807008:	d9814c17 	ldw	r6,1328(sp)
  80700c:	3080080c 	andi	r2,r6,32
  807010:	1000f926 	beq	r2,zero,8073f8 <___vfprintf_internal_r+0x1508>
  807014:	3c000017 	ldw	r16,0(r7)
  807018:	3c400117 	ldw	r17,4(r7)
  80701c:	38800204 	addi	r2,r7,8
  807020:	d8814015 	stw	r2,1280(sp)
  807024:	d9414c17 	ldw	r5,1328(sp)
  807028:	2880004c 	andi	r2,r5,1
  80702c:	1005003a 	cmpeq	r2,r2,zero
  807030:	1000b31e 	bne	r2,zero,807300 <___vfprintf_internal_r+0x1410>
  807034:	8444b03a 	or	r2,r16,r17
  807038:	1000b126 	beq	r2,zero,807300 <___vfprintf_internal_r+0x1410>
  80703c:	d9814d17 	ldw	r6,1332(sp)
  807040:	29400094 	ori	r5,r5,2
  807044:	00800c04 	movi	r2,48
  807048:	01000084 	movi	r4,2
  80704c:	d9414c15 	stw	r5,1328(sp)
  807050:	d8800445 	stb	r2,17(sp)
  807054:	d9800485 	stb	r6,18(sp)
  807058:	d8000405 	stb	zero,16(sp)
  80705c:	003e3206 	br	806928 <___vfprintf_internal_r+0xa38>
  807060:	018020b4 	movhi	r6,130
  807064:	31a07804 	addi	r6,r6,-32288
  807068:	d9814415 	stw	r6,1296(sp)
  80706c:	003fe606 	br	807008 <___vfprintf_internal_r+0x1118>
  807070:	00800ac4 	movi	r2,43
  807074:	d8800405 	stb	r2,16(sp)
  807078:	b8c00007 	ldb	r3,0(r23)
  80707c:	003c1b06 	br	8060ec <___vfprintf_internal_r+0x1fc>
  807080:	d8814c17 	ldw	r2,1328(sp)
  807084:	b8c00007 	ldb	r3,0(r23)
  807088:	10800054 	ori	r2,r2,1
  80708c:	d8814c15 	stw	r2,1328(sp)
  807090:	003c1606 	br	8060ec <___vfprintf_internal_r+0x1fc>
  807094:	d8800407 	ldb	r2,16(sp)
  807098:	1000461e 	bne	r2,zero,8071b4 <___vfprintf_internal_r+0x12c4>
  80709c:	00800804 	movi	r2,32
  8070a0:	d8800405 	stb	r2,16(sp)
  8070a4:	b8c00007 	ldb	r3,0(r23)
  8070a8:	003c1006 	br	8060ec <___vfprintf_internal_r+0x1fc>
  8070ac:	d9814c17 	ldw	r6,1328(sp)
  8070b0:	b8c00007 	ldb	r3,0(r23)
  8070b4:	31800214 	ori	r6,r6,8
  8070b8:	d9814c15 	stw	r6,1328(sp)
  8070bc:	003c0b06 	br	8060ec <___vfprintf_internal_r+0x1fc>
  8070c0:	0007883a 	mov	r3,zero
  8070c4:	01000244 	movi	r4,9
  8070c8:	188002a4 	muli	r2,r3,10
  8070cc:	b8c00007 	ldb	r3,0(r23)
  8070d0:	d9814d17 	ldw	r6,1332(sp)
  8070d4:	bdc00044 	addi	r23,r23,1
  8070d8:	d8c14d15 	stw	r3,1332(sp)
  8070dc:	d9414d17 	ldw	r5,1332(sp)
  8070e0:	3085883a 	add	r2,r6,r2
  8070e4:	10fff404 	addi	r3,r2,-48
  8070e8:	28bff404 	addi	r2,r5,-48
  8070ec:	20bff62e 	bgeu	r4,r2,8070c8 <___vfprintf_internal_r+0x11d8>
  8070f0:	d8c14a15 	stw	r3,1320(sp)
  8070f4:	003bff06 	br	8060f4 <___vfprintf_internal_r+0x204>
  8070f8:	d9414c17 	ldw	r5,1328(sp)
  8070fc:	b8c00007 	ldb	r3,0(r23)
  807100:	29402014 	ori	r5,r5,128
  807104:	d9414c15 	stw	r5,1328(sp)
  807108:	003bf806 	br	8060ec <___vfprintf_internal_r+0x1fc>
  80710c:	b8c00007 	ldb	r3,0(r23)
  807110:	00800a84 	movi	r2,42
  807114:	bdc00044 	addi	r23,r23,1
  807118:	18831526 	beq	r3,r2,807d70 <___vfprintf_internal_r+0x1e80>
  80711c:	d8c14d15 	stw	r3,1332(sp)
  807120:	18bff404 	addi	r2,r3,-48
  807124:	00c00244 	movi	r3,9
  807128:	18827836 	bltu	r3,r2,807b0c <___vfprintf_internal_r+0x1c1c>
  80712c:	000d883a 	mov	r6,zero
  807130:	308002a4 	muli	r2,r6,10
  807134:	b9800007 	ldb	r6,0(r23)
  807138:	d9414d17 	ldw	r5,1332(sp)
  80713c:	bdc00044 	addi	r23,r23,1
  807140:	d9814d15 	stw	r6,1332(sp)
  807144:	d9014d17 	ldw	r4,1332(sp)
  807148:	1145883a 	add	r2,r2,r5
  80714c:	11bff404 	addi	r6,r2,-48
  807150:	20bff404 	addi	r2,r4,-48
  807154:	18bff62e 	bgeu	r3,r2,807130 <___vfprintf_internal_r+0x1240>
  807158:	3027883a 	mov	r19,r6
  80715c:	303be50e 	bge	r6,zero,8060f4 <___vfprintf_internal_r+0x204>
  807160:	04ffffc4 	movi	r19,-1
  807164:	003be306 	br	8060f4 <___vfprintf_internal_r+0x204>
  807168:	d8000405 	stb	zero,16(sp)
  80716c:	39800017 	ldw	r6,0(r7)
  807170:	39c00104 	addi	r7,r7,4
  807174:	d9c14015 	stw	r7,1280(sp)
  807178:	d9814115 	stw	r6,1284(sp)
  80717c:	3001c926 	beq	r6,zero,8078a4 <___vfprintf_internal_r+0x19b4>
  807180:	98000e16 	blt	r19,zero,8071bc <___vfprintf_internal_r+0x12cc>
  807184:	d9014117 	ldw	r4,1284(sp)
  807188:	000b883a 	mov	r5,zero
  80718c:	980d883a 	mov	r6,r19
  807190:	080a86c0 	call	80a86c <memchr>
  807194:	10025926 	beq	r2,zero,807afc <___vfprintf_internal_r+0x1c0c>
  807198:	d8c14117 	ldw	r3,1284(sp)
  80719c:	10cfc83a 	sub	r7,r2,r3
  8071a0:	99c19e16 	blt	r19,r7,80781c <___vfprintf_internal_r+0x192c>
  8071a4:	d9c14515 	stw	r7,1300(sp)
  8071a8:	38000916 	blt	r7,zero,8071d0 <___vfprintf_internal_r+0x12e0>
  8071ac:	d8014615 	stw	zero,1304(sp)
  8071b0:	003df106 	br	806978 <___vfprintf_internal_r+0xa88>
  8071b4:	b8c00007 	ldb	r3,0(r23)
  8071b8:	003bcc06 	br	8060ec <___vfprintf_internal_r+0x1fc>
  8071bc:	d9014117 	ldw	r4,1284(sp)
  8071c0:	0805e240 	call	805e24 <strlen>
  8071c4:	d8814515 	stw	r2,1300(sp)
  8071c8:	100f883a 	mov	r7,r2
  8071cc:	103ff70e 	bge	r2,zero,8071ac <___vfprintf_internal_r+0x12bc>
  8071d0:	d8014515 	stw	zero,1300(sp)
  8071d4:	d8014615 	stw	zero,1304(sp)
  8071d8:	003de706 	br	806978 <___vfprintf_internal_r+0xa88>
  8071dc:	20c03fcc 	andi	r3,r4,255
  8071e0:	00800044 	movi	r2,1
  8071e4:	18802d26 	beq	r3,r2,80729c <___vfprintf_internal_r+0x13ac>
  8071e8:	18800e36 	bltu	r3,r2,807224 <___vfprintf_internal_r+0x1334>
  8071ec:	00800084 	movi	r2,2
  8071f0:	1880fa26 	beq	r3,r2,8075dc <___vfprintf_internal_r+0x16ec>
  8071f4:	010020b4 	movhi	r4,130
  8071f8:	21208804 	addi	r4,r4,-32224
  8071fc:	0805e240 	call	805e24 <strlen>
  807200:	100f883a 	mov	r7,r2
  807204:	dcc14515 	stw	r19,1300(sp)
  807208:	9880010e 	bge	r19,r2,807210 <___vfprintf_internal_r+0x1320>
  80720c:	d8814515 	stw	r2,1300(sp)
  807210:	008020b4 	movhi	r2,130
  807214:	10a08804 	addi	r2,r2,-32224
  807218:	dcc14615 	stw	r19,1304(sp)
  80721c:	d8814115 	stw	r2,1284(sp)
  807220:	003dd506 	br	806978 <___vfprintf_internal_r+0xa88>
  807224:	d9401904 	addi	r5,sp,100
  807228:	dd000f04 	addi	r20,sp,60
  80722c:	d9414115 	stw	r5,1284(sp)
  807230:	880a977a 	slli	r5,r17,29
  807234:	d9814117 	ldw	r6,1284(sp)
  807238:	8004d0fa 	srli	r2,r16,3
  80723c:	8806d0fa 	srli	r3,r17,3
  807240:	810001cc 	andi	r4,r16,7
  807244:	2884b03a 	or	r2,r5,r2
  807248:	31bfffc4 	addi	r6,r6,-1
  80724c:	21000c04 	addi	r4,r4,48
  807250:	d9814115 	stw	r6,1284(sp)
  807254:	10cab03a 	or	r5,r2,r3
  807258:	31000005 	stb	r4,0(r6)
  80725c:	1021883a 	mov	r16,r2
  807260:	1823883a 	mov	r17,r3
  807264:	283ff21e 	bne	r5,zero,807230 <___vfprintf_internal_r+0x1340>
  807268:	d8c14c17 	ldw	r3,1328(sp)
  80726c:	1880004c 	andi	r2,r3,1
  807270:	1005003a 	cmpeq	r2,r2,zero
  807274:	103db91e 	bne	r2,zero,80695c <___vfprintf_internal_r+0xa6c>
  807278:	20803fcc 	andi	r2,r4,255
  80727c:	1080201c 	xori	r2,r2,128
  807280:	10bfe004 	addi	r2,r2,-128
  807284:	00c00c04 	movi	r3,48
  807288:	10fdb426 	beq	r2,r3,80695c <___vfprintf_internal_r+0xa6c>
  80728c:	31bfffc4 	addi	r6,r6,-1
  807290:	d9814115 	stw	r6,1284(sp)
  807294:	30c00005 	stb	r3,0(r6)
  807298:	003db006 	br	80695c <___vfprintf_internal_r+0xa6c>
  80729c:	88800068 	cmpgeui	r2,r17,1
  8072a0:	10002c1e 	bne	r2,zero,807354 <___vfprintf_internal_r+0x1464>
  8072a4:	8800021e 	bne	r17,zero,8072b0 <___vfprintf_internal_r+0x13c0>
  8072a8:	00800244 	movi	r2,9
  8072ac:	14002936 	bltu	r2,r16,807354 <___vfprintf_internal_r+0x1464>
  8072b0:	d90018c4 	addi	r4,sp,99
  8072b4:	dd000f04 	addi	r20,sp,60
  8072b8:	d9014115 	stw	r4,1284(sp)
  8072bc:	d9014117 	ldw	r4,1284(sp)
  8072c0:	80800c04 	addi	r2,r16,48
  8072c4:	20800005 	stb	r2,0(r4)
  8072c8:	003da406 	br	80695c <___vfprintf_internal_r+0xa6c>
  8072cc:	dc400d17 	ldw	r17,52(sp)
  8072d0:	070020b4 	movhi	fp,130
  8072d4:	e7208f84 	addi	fp,fp,-32194
  8072d8:	9425883a 	add	r18,r18,r16
  8072dc:	8c400044 	addi	r17,r17,1
  8072e0:	008001c4 	movi	r2,7
  8072e4:	1f000015 	stw	fp,0(r3)
  8072e8:	1c000115 	stw	r16,4(r3)
  8072ec:	dc800e15 	stw	r18,56(sp)
  8072f0:	dc400d15 	stw	r17,52(sp)
  8072f4:	147de216 	blt	r2,r17,806a80 <___vfprintf_internal_r+0xb90>
  8072f8:	18c00204 	addi	r3,r3,8
  8072fc:	003c7a06 	br	8064e8 <___vfprintf_internal_r+0x5f8>
  807300:	01000084 	movi	r4,2
  807304:	d8000405 	stb	zero,16(sp)
  807308:	003d8706 	br	806928 <___vfprintf_internal_r+0xa38>
  80730c:	d9814c17 	ldw	r6,1328(sp)
  807310:	30c4703a 	and	r2,r6,r3
  807314:	1005003a 	cmpeq	r2,r2,zero
  807318:	103cb926 	beq	r2,zero,806600 <___vfprintf_internal_r+0x710>
  80731c:	d9014117 	ldw	r4,1284(sp)
  807320:	94800044 	addi	r18,r18,1
  807324:	8c400044 	addi	r17,r17,1
  807328:	008001c4 	movi	r2,7
  80732c:	a9000015 	stw	r4,0(r21)
  807330:	a8c00115 	stw	r3,4(r21)
  807334:	dc800e15 	stw	r18,56(sp)
  807338:	dc400d15 	stw	r17,52(sp)
  80733c:	147e6616 	blt	r2,r17,806cd8 <___vfprintf_internal_r+0xde8>
  807340:	acc00204 	addi	r19,r21,8
  807344:	003cd706 	br	8066a4 <___vfprintf_internal_r+0x7b4>
  807348:	070020b4 	movhi	fp,130
  80734c:	e7208f84 	addi	fp,fp,-32194
  807350:	003c4f06 	br	806490 <___vfprintf_internal_r+0x5a0>
  807354:	dd000f04 	addi	r20,sp,60
  807358:	dc801904 	addi	r18,sp,100
  80735c:	8009883a 	mov	r4,r16
  807360:	880b883a 	mov	r5,r17
  807364:	01800284 	movi	r6,10
  807368:	000f883a 	mov	r7,zero
  80736c:	080ce380 	call	80ce38 <__umoddi3>
  807370:	12000c04 	addi	r8,r2,48
  807374:	94bfffc4 	addi	r18,r18,-1
  807378:	8009883a 	mov	r4,r16
  80737c:	880b883a 	mov	r5,r17
  807380:	01800284 	movi	r6,10
  807384:	000f883a 	mov	r7,zero
  807388:	92000005 	stb	r8,0(r18)
  80738c:	080c85c0 	call	80c85c <__udivdi3>
  807390:	1009883a 	mov	r4,r2
  807394:	1021883a 	mov	r16,r2
  807398:	18800068 	cmpgeui	r2,r3,1
  80739c:	1823883a 	mov	r17,r3
  8073a0:	103fee1e 	bne	r2,zero,80735c <___vfprintf_internal_r+0x146c>
  8073a4:	1800021e 	bne	r3,zero,8073b0 <___vfprintf_internal_r+0x14c0>
  8073a8:	00800244 	movi	r2,9
  8073ac:	113feb36 	bltu	r2,r4,80735c <___vfprintf_internal_r+0x146c>
  8073b0:	94bfffc4 	addi	r18,r18,-1
  8073b4:	dc814115 	stw	r18,1284(sp)
  8073b8:	003fc006 	br	8072bc <___vfprintf_internal_r+0x13cc>
  8073bc:	d9014c17 	ldw	r4,1328(sp)
  8073c0:	2080004c 	andi	r2,r4,1
  8073c4:	10009a1e 	bne	r2,zero,807630 <___vfprintf_internal_r+0x1740>
  8073c8:	d9401904 	addi	r5,sp,100
  8073cc:	dd000f04 	addi	r20,sp,60
  8073d0:	d9414115 	stw	r5,1284(sp)
  8073d4:	003d6106 	br	80695c <___vfprintf_internal_r+0xa6c>
  8073d8:	d9014f17 	ldw	r4,1340(sp)
  8073dc:	b00b883a 	mov	r5,r22
  8073e0:	d9800c04 	addi	r6,sp,48
  8073e4:	0805e980 	call	805e98 <__sprint_r>
  8073e8:	103c791e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  8073ec:	dc800e17 	ldw	r18,56(sp)
  8073f0:	d8c01904 	addi	r3,sp,100
  8073f4:	003cff06 	br	8067f4 <___vfprintf_internal_r+0x904>
  8073f8:	d8c14c17 	ldw	r3,1328(sp)
  8073fc:	1880040c 	andi	r2,r3,16
  807400:	1000711e 	bne	r2,zero,8075c8 <___vfprintf_internal_r+0x16d8>
  807404:	d9014c17 	ldw	r4,1328(sp)
  807408:	2080100c 	andi	r2,r4,64
  80740c:	10006e26 	beq	r2,zero,8075c8 <___vfprintf_internal_r+0x16d8>
  807410:	3c00000b 	ldhu	r16,0(r7)
  807414:	0023883a 	mov	r17,zero
  807418:	39c00104 	addi	r7,r7,4
  80741c:	d9c14015 	stw	r7,1280(sp)
  807420:	003f0006 	br	807024 <___vfprintf_internal_r+0x1134>
  807424:	dc400d17 	ldw	r17,52(sp)
  807428:	070020b4 	movhi	fp,130
  80742c:	e7208f84 	addi	fp,fp,-32194
  807430:	9425883a 	add	r18,r18,r16
  807434:	8c400044 	addi	r17,r17,1
  807438:	008001c4 	movi	r2,7
  80743c:	1f000015 	stw	fp,0(r3)
  807440:	1c000115 	stw	r16,4(r3)
  807444:	dc800e15 	stw	r18,56(sp)
  807448:	dc400d15 	stw	r17,52(sp)
  80744c:	147d7616 	blt	r2,r17,806a28 <___vfprintf_internal_r+0xb38>
  807450:	18c00204 	addi	r3,r3,8
  807454:	003d7b06 	br	806a44 <___vfprintf_internal_r+0xb54>
  807458:	dc800e17 	ldw	r18,56(sp)
  80745c:	dc400d17 	ldw	r17,52(sp)
  807460:	070020b4 	movhi	fp,130
  807464:	e7209384 	addi	fp,fp,-32178
  807468:	003bc006 	br	80636c <___vfprintf_internal_r+0x47c>
  80746c:	d9014f17 	ldw	r4,1340(sp)
  807470:	b00b883a 	mov	r5,r22
  807474:	d9800c04 	addi	r6,sp,48
  807478:	0805e980 	call	805e98 <__sprint_r>
  80747c:	103c541e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  807480:	dc800e17 	ldw	r18,56(sp)
  807484:	d8c01904 	addi	r3,sp,100
  807488:	003ce906 	br	806830 <___vfprintf_internal_r+0x940>
  80748c:	3c000017 	ldw	r16,0(r7)
  807490:	0009883a 	mov	r4,zero
  807494:	39c00104 	addi	r7,r7,4
  807498:	0023883a 	mov	r17,zero
  80749c:	d9c14015 	stw	r7,1280(sp)
  8074a0:	d8000405 	stb	zero,16(sp)
  8074a4:	003d2006 	br	806928 <___vfprintf_internal_r+0xa38>
  8074a8:	38800017 	ldw	r2,0(r7)
  8074ac:	39c00104 	addi	r7,r7,4
  8074b0:	d9c14015 	stw	r7,1280(sp)
  8074b4:	1023d7fa 	srai	r17,r2,31
  8074b8:	1021883a 	mov	r16,r2
  8074bc:	003d1806 	br	806920 <___vfprintf_internal_r+0xa30>
  8074c0:	3c000017 	ldw	r16,0(r7)
  8074c4:	01000044 	movi	r4,1
  8074c8:	39c00104 	addi	r7,r7,4
  8074cc:	0023883a 	mov	r17,zero
  8074d0:	d9c14015 	stw	r7,1280(sp)
  8074d4:	d8000405 	stb	zero,16(sp)
  8074d8:	003d1306 	br	806928 <___vfprintf_internal_r+0xa38>
  8074dc:	008020b4 	movhi	r2,130
  8074e0:	10a08f04 	addi	r2,r2,-32196
  8074e4:	94800044 	addi	r18,r18,1
  8074e8:	8c400044 	addi	r17,r17,1
  8074ec:	a8800015 	stw	r2,0(r21)
  8074f0:	00c00044 	movi	r3,1
  8074f4:	008001c4 	movi	r2,7
  8074f8:	a8c00115 	stw	r3,4(r21)
  8074fc:	dc800e15 	stw	r18,56(sp)
  807500:	dc400d15 	stw	r17,52(sp)
  807504:	1440ca16 	blt	r2,r17,807830 <___vfprintf_internal_r+0x1940>
  807508:	a8c00204 	addi	r3,r21,8
  80750c:	2000061e 	bne	r4,zero,807528 <___vfprintf_internal_r+0x1638>
  807510:	d9414717 	ldw	r5,1308(sp)
  807514:	2800041e 	bne	r5,zero,807528 <___vfprintf_internal_r+0x1638>
  807518:	d9814c17 	ldw	r6,1328(sp)
  80751c:	3080004c 	andi	r2,r6,1
  807520:	1005003a 	cmpeq	r2,r2,zero
  807524:	103bf01e 	bne	r2,zero,8064e8 <___vfprintf_internal_r+0x5f8>
  807528:	00800044 	movi	r2,1
  80752c:	dc400d17 	ldw	r17,52(sp)
  807530:	18800115 	stw	r2,4(r3)
  807534:	d8814917 	ldw	r2,1316(sp)
  807538:	94800044 	addi	r18,r18,1
  80753c:	8c400044 	addi	r17,r17,1
  807540:	18800015 	stw	r2,0(r3)
  807544:	008001c4 	movi	r2,7
  807548:	dc800e15 	stw	r18,56(sp)
  80754c:	dc400d15 	stw	r17,52(sp)
  807550:	1440ca16 	blt	r2,r17,80787c <___vfprintf_internal_r+0x198c>
  807554:	18c00204 	addi	r3,r3,8
  807558:	0121c83a 	sub	r16,zero,r4
  80755c:	0400500e 	bge	zero,r16,8076a0 <___vfprintf_internal_r+0x17b0>
  807560:	00800404 	movi	r2,16
  807564:	1400800e 	bge	r2,r16,807768 <___vfprintf_internal_r+0x1878>
  807568:	1027883a 	mov	r19,r2
  80756c:	070020b4 	movhi	fp,130
  807570:	e7208f84 	addi	fp,fp,-32194
  807574:	050001c4 	movi	r20,7
  807578:	00000306 	br	807588 <___vfprintf_internal_r+0x1698>
  80757c:	18c00204 	addi	r3,r3,8
  807580:	843ffc04 	addi	r16,r16,-16
  807584:	9c007a0e 	bge	r19,r16,807770 <___vfprintf_internal_r+0x1880>
  807588:	94800404 	addi	r18,r18,16
  80758c:	8c400044 	addi	r17,r17,1
  807590:	1f000015 	stw	fp,0(r3)
  807594:	1cc00115 	stw	r19,4(r3)
  807598:	dc800e15 	stw	r18,56(sp)
  80759c:	dc400d15 	stw	r17,52(sp)
  8075a0:	a47ff60e 	bge	r20,r17,80757c <___vfprintf_internal_r+0x168c>
  8075a4:	d9014f17 	ldw	r4,1340(sp)
  8075a8:	b00b883a 	mov	r5,r22
  8075ac:	d9800c04 	addi	r6,sp,48
  8075b0:	0805e980 	call	805e98 <__sprint_r>
  8075b4:	103c061e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  8075b8:	dc800e17 	ldw	r18,56(sp)
  8075bc:	dc400d17 	ldw	r17,52(sp)
  8075c0:	d8c01904 	addi	r3,sp,100
  8075c4:	003fee06 	br	807580 <___vfprintf_internal_r+0x1690>
  8075c8:	3c000017 	ldw	r16,0(r7)
  8075cc:	0023883a 	mov	r17,zero
  8075d0:	39c00104 	addi	r7,r7,4
  8075d4:	d9c14015 	stw	r7,1280(sp)
  8075d8:	003e9206 	br	807024 <___vfprintf_internal_r+0x1134>
  8075dc:	d9401904 	addi	r5,sp,100
  8075e0:	dd000f04 	addi	r20,sp,60
  8075e4:	d9414115 	stw	r5,1284(sp)
  8075e8:	d9814417 	ldw	r6,1296(sp)
  8075ec:	880a973a 	slli	r5,r17,28
  8075f0:	8004d13a 	srli	r2,r16,4
  8075f4:	810003cc 	andi	r4,r16,15
  8075f8:	3109883a 	add	r4,r6,r4
  8075fc:	2884b03a 	or	r2,r5,r2
  807600:	21400003 	ldbu	r5,0(r4)
  807604:	d9014117 	ldw	r4,1284(sp)
  807608:	8806d13a 	srli	r3,r17,4
  80760c:	1021883a 	mov	r16,r2
  807610:	213fffc4 	addi	r4,r4,-1
  807614:	d9014115 	stw	r4,1284(sp)
  807618:	d9814117 	ldw	r6,1284(sp)
  80761c:	10c8b03a 	or	r4,r2,r3
  807620:	1823883a 	mov	r17,r3
  807624:	31400005 	stb	r5,0(r6)
  807628:	203fef1e 	bne	r4,zero,8075e8 <___vfprintf_internal_r+0x16f8>
  80762c:	003ccb06 	br	80695c <___vfprintf_internal_r+0xa6c>
  807630:	00800c04 	movi	r2,48
  807634:	d98018c4 	addi	r6,sp,99
  807638:	dd000f04 	addi	r20,sp,60
  80763c:	d88018c5 	stb	r2,99(sp)
  807640:	d9814115 	stw	r6,1284(sp)
  807644:	003cc506 	br	80695c <___vfprintf_internal_r+0xa6c>
  807648:	dc400d17 	ldw	r17,52(sp)
  80764c:	070020b4 	movhi	fp,130
  807650:	e7209384 	addi	fp,fp,-32178
  807654:	003bc706 	br	806574 <___vfprintf_internal_r+0x684>
  807658:	d9414c17 	ldw	r5,1328(sp)
  80765c:	2880040c 	andi	r2,r5,16
  807660:	10007c26 	beq	r2,zero,807854 <___vfprintf_internal_r+0x1964>
  807664:	38800017 	ldw	r2,0(r7)
  807668:	39c00104 	addi	r7,r7,4
  80766c:	d9c14015 	stw	r7,1280(sp)
  807670:	d9814b17 	ldw	r6,1324(sp)
  807674:	d9c14017 	ldw	r7,1280(sp)
  807678:	11800015 	stw	r6,0(r2)
  80767c:	003a7806 	br	806060 <___vfprintf_internal_r+0x170>
  807680:	d9014f17 	ldw	r4,1340(sp)
  807684:	b00b883a 	mov	r5,r22
  807688:	d9800c04 	addi	r6,sp,48
  80768c:	0805e980 	call	805e98 <__sprint_r>
  807690:	103bcf1e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  807694:	dc800e17 	ldw	r18,56(sp)
  807698:	dc400d17 	ldw	r17,52(sp)
  80769c:	d8c01904 	addi	r3,sp,100
  8076a0:	d9014717 	ldw	r4,1308(sp)
  8076a4:	d9414117 	ldw	r5,1284(sp)
  8076a8:	8c400044 	addi	r17,r17,1
  8076ac:	9125883a 	add	r18,r18,r4
  8076b0:	008001c4 	movi	r2,7
  8076b4:	19400015 	stw	r5,0(r3)
  8076b8:	19000115 	stw	r4,4(r3)
  8076bc:	dc800e15 	stw	r18,56(sp)
  8076c0:	dc400d15 	stw	r17,52(sp)
  8076c4:	147cee16 	blt	r2,r17,806a80 <___vfprintf_internal_r+0xb90>
  8076c8:	18c00204 	addi	r3,r3,8
  8076cc:	003b8606 	br	8064e8 <___vfprintf_internal_r+0x5f8>
  8076d0:	38c00017 	ldw	r3,0(r7)
  8076d4:	39000204 	addi	r4,r7,8
  8076d8:	d9014015 	stw	r4,1280(sp)
  8076dc:	d8c14215 	stw	r3,1288(sp)
  8076e0:	39c00117 	ldw	r7,4(r7)
  8076e4:	d9c14315 	stw	r7,1292(sp)
  8076e8:	003e2006 	br	806f6c <___vfprintf_internal_r+0x107c>
  8076ec:	0005883a 	mov	r2,zero
  8076f0:	1409c83a 	sub	r4,r2,r16
  8076f4:	1105803a 	cmpltu	r2,r2,r4
  8076f8:	044bc83a 	sub	r5,zero,r17
  8076fc:	2885c83a 	sub	r2,r5,r2
  807700:	2021883a 	mov	r16,r4
  807704:	1023883a 	mov	r17,r2
  807708:	01000044 	movi	r4,1
  80770c:	00800b44 	movi	r2,45
  807710:	d8800405 	stb	r2,16(sp)
  807714:	003c8406 	br	806928 <___vfprintf_internal_r+0xa38>
  807718:	d9014f17 	ldw	r4,1340(sp)
  80771c:	b00b883a 	mov	r5,r22
  807720:	d9800c04 	addi	r6,sp,48
  807724:	0805e980 	call	805e98 <__sprint_r>
  807728:	103ba91e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  80772c:	dc800e17 	ldw	r18,56(sp)
  807730:	dc400d17 	ldw	r17,52(sp)
  807734:	d9000517 	ldw	r4,20(sp)
  807738:	d9401904 	addi	r5,sp,100
  80773c:	003da706 	br	806ddc <___vfprintf_internal_r+0xeec>
  807740:	d9014f17 	ldw	r4,1340(sp)
  807744:	b00b883a 	mov	r5,r22
  807748:	d9800c04 	addi	r6,sp,48
  80774c:	0805e980 	call	805e98 <__sprint_r>
  807750:	103b9f1e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  807754:	dc800e17 	ldw	r18,56(sp)
  807758:	dc400d17 	ldw	r17,52(sp)
  80775c:	d9000517 	ldw	r4,20(sp)
  807760:	d8c01904 	addi	r3,sp,100
  807764:	003d9106 	br	806dac <___vfprintf_internal_r+0xebc>
  807768:	070020b4 	movhi	fp,130
  80776c:	e7208f84 	addi	fp,fp,-32194
  807770:	9425883a 	add	r18,r18,r16
  807774:	8c400044 	addi	r17,r17,1
  807778:	008001c4 	movi	r2,7
  80777c:	1f000015 	stw	fp,0(r3)
  807780:	1c000115 	stw	r16,4(r3)
  807784:	dc800e15 	stw	r18,56(sp)
  807788:	dc400d15 	stw	r17,52(sp)
  80778c:	147fbc16 	blt	r2,r17,807680 <___vfprintf_internal_r+0x1790>
  807790:	18c00204 	addi	r3,r3,8
  807794:	003fc206 	br	8076a0 <___vfprintf_internal_r+0x17b0>
  807798:	d9014f17 	ldw	r4,1340(sp)
  80779c:	b00b883a 	mov	r5,r22
  8077a0:	d9800c04 	addi	r6,sp,48
  8077a4:	0805e980 	call	805e98 <__sprint_r>
  8077a8:	103b891e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  8077ac:	dc800e17 	ldw	r18,56(sp)
  8077b0:	d9000517 	ldw	r4,20(sp)
  8077b4:	d8c01904 	addi	r3,sp,100
  8077b8:	003d0206 	br	806bc4 <___vfprintf_internal_r+0xcd4>
  8077bc:	070020b4 	movhi	fp,130
  8077c0:	e7208f84 	addi	fp,fp,-32194
  8077c4:	003be406 	br	806758 <___vfprintf_internal_r+0x868>
  8077c8:	008020b4 	movhi	r2,130
  8077cc:	10a07e04 	addi	r2,r2,-32264
  8077d0:	d8814115 	stw	r2,1284(sp)
  8077d4:	003df506 	br	806fac <___vfprintf_internal_r+0x10bc>
  8077d8:	d9014217 	ldw	r4,1288(sp)
  8077dc:	d9414317 	ldw	r5,1292(sp)
  8077e0:	080c1900 	call	80c190 <__isnand>
  8077e4:	10003926 	beq	r2,zero,8078cc <___vfprintf_internal_r+0x19dc>
  8077e8:	d9414d17 	ldw	r5,1332(sp)
  8077ec:	008011c4 	movi	r2,71
  8077f0:	1140ce16 	blt	r2,r5,807b2c <___vfprintf_internal_r+0x1c3c>
  8077f4:	018020b4 	movhi	r6,130
  8077f8:	31a07f04 	addi	r6,r6,-32260
  8077fc:	d9814115 	stw	r6,1284(sp)
  807800:	003dea06 	br	806fac <___vfprintf_internal_r+0x10bc>
  807804:	d9014c17 	ldw	r4,1328(sp)
  807808:	bdc00044 	addi	r23,r23,1
  80780c:	b8c00007 	ldb	r3,0(r23)
  807810:	21000814 	ori	r4,r4,32
  807814:	d9014c15 	stw	r4,1328(sp)
  807818:	003a3406 	br	8060ec <___vfprintf_internal_r+0x1fc>
  80781c:	dcc14515 	stw	r19,1300(sp)
  807820:	98011016 	blt	r19,zero,807c64 <___vfprintf_internal_r+0x1d74>
  807824:	980f883a 	mov	r7,r19
  807828:	d8014615 	stw	zero,1304(sp)
  80782c:	003c5206 	br	806978 <___vfprintf_internal_r+0xa88>
  807830:	d9014f17 	ldw	r4,1340(sp)
  807834:	b00b883a 	mov	r5,r22
  807838:	d9800c04 	addi	r6,sp,48
  80783c:	0805e980 	call	805e98 <__sprint_r>
  807840:	103b631e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  807844:	dc800e17 	ldw	r18,56(sp)
  807848:	d9000517 	ldw	r4,20(sp)
  80784c:	d8c01904 	addi	r3,sp,100
  807850:	003f2e06 	br	80750c <___vfprintf_internal_r+0x161c>
  807854:	d8c14c17 	ldw	r3,1328(sp)
  807858:	1880100c 	andi	r2,r3,64
  80785c:	1000a026 	beq	r2,zero,807ae0 <___vfprintf_internal_r+0x1bf0>
  807860:	38800017 	ldw	r2,0(r7)
  807864:	39c00104 	addi	r7,r7,4
  807868:	d9c14015 	stw	r7,1280(sp)
  80786c:	d9014b17 	ldw	r4,1324(sp)
  807870:	d9c14017 	ldw	r7,1280(sp)
  807874:	1100000d 	sth	r4,0(r2)
  807878:	0039f906 	br	806060 <___vfprintf_internal_r+0x170>
  80787c:	d9014f17 	ldw	r4,1340(sp)
  807880:	b00b883a 	mov	r5,r22
  807884:	d9800c04 	addi	r6,sp,48
  807888:	0805e980 	call	805e98 <__sprint_r>
  80788c:	103b501e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  807890:	dc800e17 	ldw	r18,56(sp)
  807894:	dc400d17 	ldw	r17,52(sp)
  807898:	d9000517 	ldw	r4,20(sp)
  80789c:	d8c01904 	addi	r3,sp,100
  8078a0:	003f2d06 	br	807558 <___vfprintf_internal_r+0x1668>
  8078a4:	00800184 	movi	r2,6
  8078a8:	14c09a36 	bltu	r2,r19,807b14 <___vfprintf_internal_r+0x1c24>
  8078ac:	dcc14515 	stw	r19,1300(sp)
  8078b0:	9800010e 	bge	r19,zero,8078b8 <___vfprintf_internal_r+0x19c8>
  8078b4:	d8014515 	stw	zero,1300(sp)
  8078b8:	008020b4 	movhi	r2,130
  8078bc:	10a08104 	addi	r2,r2,-32252
  8078c0:	980f883a 	mov	r7,r19
  8078c4:	d8814115 	stw	r2,1284(sp)
  8078c8:	003a7806 	br	8062ac <___vfprintf_internal_r+0x3bc>
  8078cc:	00bfffc4 	movi	r2,-1
  8078d0:	9880e226 	beq	r19,r2,807c5c <___vfprintf_internal_r+0x1d6c>
  8078d4:	d9414d17 	ldw	r5,1332(sp)
  8078d8:	008019c4 	movi	r2,103
  8078dc:	2880dc26 	beq	r5,r2,807c50 <___vfprintf_internal_r+0x1d60>
  8078e0:	008011c4 	movi	r2,71
  8078e4:	2880da26 	beq	r5,r2,807c50 <___vfprintf_internal_r+0x1d60>
  8078e8:	d9414c17 	ldw	r5,1328(sp)
  8078ec:	d9014317 	ldw	r4,1292(sp)
  8078f0:	d9814217 	ldw	r6,1288(sp)
  8078f4:	29404014 	ori	r5,r5,256
  8078f8:	d9414c15 	stw	r5,1328(sp)
  8078fc:	2000cc16 	blt	r4,zero,807c30 <___vfprintf_internal_r+0x1d40>
  807900:	3021883a 	mov	r16,r6
  807904:	2023883a 	mov	r17,r4
  807908:	0039883a 	mov	fp,zero
  80790c:	d9414d17 	ldw	r5,1332(sp)
  807910:	00801984 	movi	r2,102
  807914:	2880b726 	beq	r5,r2,807bf4 <___vfprintf_internal_r+0x1d04>
  807918:	00801184 	movi	r2,70
  80791c:	2880b526 	beq	r5,r2,807bf4 <___vfprintf_internal_r+0x1d04>
  807920:	00801944 	movi	r2,101
  807924:	2880c826 	beq	r5,r2,807c48 <___vfprintf_internal_r+0x1d58>
  807928:	00801144 	movi	r2,69
  80792c:	2880c626 	beq	r5,r2,807c48 <___vfprintf_internal_r+0x1d58>
  807930:	9829883a 	mov	r20,r19
  807934:	d9014f17 	ldw	r4,1340(sp)
  807938:	d8800504 	addi	r2,sp,20
  80793c:	880d883a 	mov	r6,r17
  807940:	d8800115 	stw	r2,4(sp)
  807944:	d8c00604 	addi	r3,sp,24
  807948:	d8800704 	addi	r2,sp,28
  80794c:	800b883a 	mov	r5,r16
  807950:	01c00084 	movi	r7,2
  807954:	d8c00215 	stw	r3,8(sp)
  807958:	d8800315 	stw	r2,12(sp)
  80795c:	dd000015 	stw	r20,0(sp)
  807960:	08081140 	call	808114 <_dtoa_r>
  807964:	d9814d17 	ldw	r6,1332(sp)
  807968:	d8814115 	stw	r2,1284(sp)
  80796c:	008019c4 	movi	r2,103
  807970:	30809526 	beq	r6,r2,807bc8 <___vfprintf_internal_r+0x1cd8>
  807974:	d8c14d17 	ldw	r3,1332(sp)
  807978:	008011c4 	movi	r2,71
  80797c:	18809226 	beq	r3,r2,807bc8 <___vfprintf_internal_r+0x1cd8>
  807980:	d9414117 	ldw	r5,1284(sp)
  807984:	d9814d17 	ldw	r6,1332(sp)
  807988:	00801984 	movi	r2,102
  80798c:	2d25883a 	add	r18,r5,r20
  807990:	30808626 	beq	r6,r2,807bac <___vfprintf_internal_r+0x1cbc>
  807994:	00801184 	movi	r2,70
  807998:	30808426 	beq	r6,r2,807bac <___vfprintf_internal_r+0x1cbc>
  80799c:	000d883a 	mov	r6,zero
  8079a0:	000f883a 	mov	r7,zero
  8079a4:	880b883a 	mov	r5,r17
  8079a8:	8009883a 	mov	r4,r16
  8079ac:	08047e00 	call	8047e0 <__eqdf2>
  8079b0:	1000751e 	bne	r2,zero,807b88 <___vfprintf_internal_r+0x1c98>
  8079b4:	9005883a 	mov	r2,r18
  8079b8:	dc800715 	stw	r18,28(sp)
  8079bc:	d9014117 	ldw	r4,1284(sp)
  8079c0:	d9414d17 	ldw	r5,1332(sp)
  8079c4:	00c019c4 	movi	r3,103
  8079c8:	1125c83a 	sub	r18,r2,r4
  8079cc:	28c06826 	beq	r5,r3,807b70 <___vfprintf_internal_r+0x1c80>
  8079d0:	008011c4 	movi	r2,71
  8079d4:	28806626 	beq	r5,r2,807b70 <___vfprintf_internal_r+0x1c80>
  8079d8:	d9000517 	ldw	r4,20(sp)
  8079dc:	d8c14d17 	ldw	r3,1332(sp)
  8079e0:	00801944 	movi	r2,101
  8079e4:	10c05516 	blt	r2,r3,807b3c <___vfprintf_internal_r+0x1c4c>
  8079e8:	213fffc4 	addi	r4,r4,-1
  8079ec:	d9000515 	stw	r4,20(sp)
  8079f0:	d8c00805 	stb	r3,32(sp)
  8079f4:	2021883a 	mov	r16,r4
  8079f8:	2000c116 	blt	r4,zero,807d00 <___vfprintf_internal_r+0x1e10>
  8079fc:	00800ac4 	movi	r2,43
  807a00:	d8800845 	stb	r2,33(sp)
  807a04:	00800244 	movi	r2,9
  807a08:	1400af0e 	bge	r2,r16,807cc8 <___vfprintf_internal_r+0x1dd8>
  807a0c:	1027883a 	mov	r19,r2
  807a10:	dc400b84 	addi	r17,sp,46
  807a14:	8009883a 	mov	r4,r16
  807a18:	01400284 	movi	r5,10
  807a1c:	0804c5c0 	call	804c5c <__modsi3>
  807a20:	10800c04 	addi	r2,r2,48
  807a24:	8c7fffc4 	addi	r17,r17,-1
  807a28:	8009883a 	mov	r4,r16
  807a2c:	01400284 	movi	r5,10
  807a30:	88800005 	stb	r2,0(r17)
  807a34:	0804bfc0 	call	804bfc <__divsi3>
  807a38:	1021883a 	mov	r16,r2
  807a3c:	98bff516 	blt	r19,r2,807a14 <___vfprintf_internal_r+0x1b24>
  807a40:	10c00c04 	addi	r3,r2,48
  807a44:	d88009c4 	addi	r2,sp,39
  807a48:	108001c4 	addi	r2,r2,7
  807a4c:	897fffc4 	addi	r5,r17,-1
  807a50:	88ffffc5 	stb	r3,-1(r17)
  807a54:	2880a72e 	bgeu	r5,r2,807cf4 <___vfprintf_internal_r+0x1e04>
  807a58:	1009883a 	mov	r4,r2
  807a5c:	d9800804 	addi	r6,sp,32
  807a60:	d8c00884 	addi	r3,sp,34
  807a64:	28800003 	ldbu	r2,0(r5)
  807a68:	29400044 	addi	r5,r5,1
  807a6c:	18800005 	stb	r2,0(r3)
  807a70:	18c00044 	addi	r3,r3,1
  807a74:	293ffb36 	bltu	r5,r4,807a64 <___vfprintf_internal_r+0x1b74>
  807a78:	1987c83a 	sub	r3,r3,r6
  807a7c:	00800044 	movi	r2,1
  807a80:	d8c14815 	stw	r3,1312(sp)
  807a84:	90cf883a 	add	r7,r18,r3
  807a88:	1480960e 	bge	r2,r18,807ce4 <___vfprintf_internal_r+0x1df4>
  807a8c:	39c00044 	addi	r7,r7,1
  807a90:	d9c14515 	stw	r7,1300(sp)
  807a94:	38003416 	blt	r7,zero,807b68 <___vfprintf_internal_r+0x1c78>
  807a98:	e0803fcc 	andi	r2,fp,255
  807a9c:	1080201c 	xori	r2,r2,128
  807aa0:	10bfe004 	addi	r2,r2,-128
  807aa4:	10004e26 	beq	r2,zero,807be0 <___vfprintf_internal_r+0x1cf0>
  807aa8:	00800b44 	movi	r2,45
  807aac:	dc814715 	stw	r18,1308(sp)
  807ab0:	d8014615 	stw	zero,1304(sp)
  807ab4:	d8800405 	stb	r2,16(sp)
  807ab8:	003bb106 	br	806980 <___vfprintf_internal_r+0xa90>
  807abc:	00800b44 	movi	r2,45
  807ac0:	d8800405 	stb	r2,16(sp)
  807ac4:	003d3306 	br	806f94 <___vfprintf_internal_r+0x10a4>
  807ac8:	d9014f17 	ldw	r4,1340(sp)
  807acc:	b00b883a 	mov	r5,r22
  807ad0:	d9800c04 	addi	r6,sp,48
  807ad4:	0805e980 	call	805e98 <__sprint_r>
  807ad8:	103abd1e 	bne	r2,zero,8065d0 <___vfprintf_internal_r+0x6e0>
  807adc:	003abb06 	br	8065cc <___vfprintf_internal_r+0x6dc>
  807ae0:	38800017 	ldw	r2,0(r7)
  807ae4:	39c00104 	addi	r7,r7,4
  807ae8:	d9c14015 	stw	r7,1280(sp)
  807aec:	d9414b17 	ldw	r5,1324(sp)
  807af0:	d9c14017 	ldw	r7,1280(sp)
  807af4:	11400015 	stw	r5,0(r2)
  807af8:	00395906 	br	806060 <___vfprintf_internal_r+0x170>
  807afc:	980f883a 	mov	r7,r19
  807b00:	dcc14515 	stw	r19,1300(sp)
  807b04:	d8014615 	stw	zero,1304(sp)
  807b08:	003b9b06 	br	806978 <___vfprintf_internal_r+0xa88>
  807b0c:	0027883a 	mov	r19,zero
  807b10:	00397806 	br	8060f4 <___vfprintf_internal_r+0x204>
  807b14:	00c020b4 	movhi	r3,130
  807b18:	18e08104 	addi	r3,r3,-32252
  807b1c:	100f883a 	mov	r7,r2
  807b20:	d8814515 	stw	r2,1300(sp)
  807b24:	d8c14115 	stw	r3,1284(sp)
  807b28:	0039e006 	br	8062ac <___vfprintf_internal_r+0x3bc>
  807b2c:	008020b4 	movhi	r2,130
  807b30:	10a08004 	addi	r2,r2,-32256
  807b34:	d8814115 	stw	r2,1284(sp)
  807b38:	003d1c06 	br	806fac <___vfprintf_internal_r+0x10bc>
  807b3c:	d9414d17 	ldw	r5,1332(sp)
  807b40:	00801984 	movi	r2,102
  807b44:	28804926 	beq	r5,r2,807c6c <___vfprintf_internal_r+0x1d7c>
  807b48:	200f883a 	mov	r7,r4
  807b4c:	24805716 	blt	r4,r18,807cac <___vfprintf_internal_r+0x1dbc>
  807b50:	d9414c17 	ldw	r5,1328(sp)
  807b54:	2880004c 	andi	r2,r5,1
  807b58:	10000126 	beq	r2,zero,807b60 <___vfprintf_internal_r+0x1c70>
  807b5c:	21c00044 	addi	r7,r4,1
  807b60:	d9c14515 	stw	r7,1300(sp)
  807b64:	383fcc0e 	bge	r7,zero,807a98 <___vfprintf_internal_r+0x1ba8>
  807b68:	d8014515 	stw	zero,1300(sp)
  807b6c:	003fca06 	br	807a98 <___vfprintf_internal_r+0x1ba8>
  807b70:	d9000517 	ldw	r4,20(sp)
  807b74:	00bfff04 	movi	r2,-4
  807b78:	1100480e 	bge	r2,r4,807c9c <___vfprintf_internal_r+0x1dac>
  807b7c:	99004716 	blt	r19,r4,807c9c <___vfprintf_internal_r+0x1dac>
  807b80:	d8c14d15 	stw	r3,1332(sp)
  807b84:	003ff006 	br	807b48 <___vfprintf_internal_r+0x1c58>
  807b88:	d8800717 	ldw	r2,28(sp)
  807b8c:	14bf8b2e 	bgeu	r2,r18,8079bc <___vfprintf_internal_r+0x1acc>
  807b90:	9007883a 	mov	r3,r18
  807b94:	01000c04 	movi	r4,48
  807b98:	11000005 	stb	r4,0(r2)
  807b9c:	10800044 	addi	r2,r2,1
  807ba0:	d8800715 	stw	r2,28(sp)
  807ba4:	18bffc1e 	bne	r3,r2,807b98 <___vfprintf_internal_r+0x1ca8>
  807ba8:	003f8406 	br	8079bc <___vfprintf_internal_r+0x1acc>
  807bac:	d8814117 	ldw	r2,1284(sp)
  807bb0:	10c00007 	ldb	r3,0(r2)
  807bb4:	00800c04 	movi	r2,48
  807bb8:	18805b26 	beq	r3,r2,807d28 <___vfprintf_internal_r+0x1e38>
  807bbc:	d9000517 	ldw	r4,20(sp)
  807bc0:	9125883a 	add	r18,r18,r4
  807bc4:	003f7506 	br	80799c <___vfprintf_internal_r+0x1aac>
  807bc8:	d9014c17 	ldw	r4,1328(sp)
  807bcc:	2080004c 	andi	r2,r4,1
  807bd0:	1005003a 	cmpeq	r2,r2,zero
  807bd4:	103f6a26 	beq	r2,zero,807980 <___vfprintf_internal_r+0x1a90>
  807bd8:	d8800717 	ldw	r2,28(sp)
  807bdc:	003f7706 	br	8079bc <___vfprintf_internal_r+0x1acc>
  807be0:	d9c14515 	stw	r7,1300(sp)
  807be4:	38004d16 	blt	r7,zero,807d1c <___vfprintf_internal_r+0x1e2c>
  807be8:	dc814715 	stw	r18,1308(sp)
  807bec:	d8014615 	stw	zero,1304(sp)
  807bf0:	003b6106 	br	806978 <___vfprintf_internal_r+0xa88>
  807bf4:	d9014f17 	ldw	r4,1340(sp)
  807bf8:	d8800504 	addi	r2,sp,20
  807bfc:	d8800115 	stw	r2,4(sp)
  807c00:	d8c00604 	addi	r3,sp,24
  807c04:	d8800704 	addi	r2,sp,28
  807c08:	800b883a 	mov	r5,r16
  807c0c:	880d883a 	mov	r6,r17
  807c10:	01c000c4 	movi	r7,3
  807c14:	d8c00215 	stw	r3,8(sp)
  807c18:	d8800315 	stw	r2,12(sp)
  807c1c:	dcc00015 	stw	r19,0(sp)
  807c20:	9829883a 	mov	r20,r19
  807c24:	08081140 	call	808114 <_dtoa_r>
  807c28:	d8814115 	stw	r2,1284(sp)
  807c2c:	003f5106 	br	807974 <___vfprintf_internal_r+0x1a84>
  807c30:	d8c14217 	ldw	r3,1288(sp)
  807c34:	d9014317 	ldw	r4,1292(sp)
  807c38:	07000b44 	movi	fp,45
  807c3c:	1821883a 	mov	r16,r3
  807c40:	2460003c 	xorhi	r17,r4,32768
  807c44:	003f3106 	br	80790c <___vfprintf_internal_r+0x1a1c>
  807c48:	9d000044 	addi	r20,r19,1
  807c4c:	003f3906 	br	807934 <___vfprintf_internal_r+0x1a44>
  807c50:	983f251e 	bne	r19,zero,8078e8 <___vfprintf_internal_r+0x19f8>
  807c54:	04c00044 	movi	r19,1
  807c58:	003f2306 	br	8078e8 <___vfprintf_internal_r+0x19f8>
  807c5c:	04c00184 	movi	r19,6
  807c60:	003f2106 	br	8078e8 <___vfprintf_internal_r+0x19f8>
  807c64:	d8014515 	stw	zero,1300(sp)
  807c68:	003eee06 	br	807824 <___vfprintf_internal_r+0x1934>
  807c6c:	200f883a 	mov	r7,r4
  807c70:	0100370e 	bge	zero,r4,807d50 <___vfprintf_internal_r+0x1e60>
  807c74:	9800031e 	bne	r19,zero,807c84 <___vfprintf_internal_r+0x1d94>
  807c78:	d9814c17 	ldw	r6,1328(sp)
  807c7c:	3080004c 	andi	r2,r6,1
  807c80:	103fb726 	beq	r2,zero,807b60 <___vfprintf_internal_r+0x1c70>
  807c84:	20800044 	addi	r2,r4,1
  807c88:	98a7883a 	add	r19,r19,r2
  807c8c:	dcc14515 	stw	r19,1300(sp)
  807c90:	980f883a 	mov	r7,r19
  807c94:	983f800e 	bge	r19,zero,807a98 <___vfprintf_internal_r+0x1ba8>
  807c98:	003fb306 	br	807b68 <___vfprintf_internal_r+0x1c78>
  807c9c:	d9814d17 	ldw	r6,1332(sp)
  807ca0:	31bfff84 	addi	r6,r6,-2
  807ca4:	d9814d15 	stw	r6,1332(sp)
  807ca8:	003f4c06 	br	8079dc <___vfprintf_internal_r+0x1aec>
  807cac:	0100180e 	bge	zero,r4,807d10 <___vfprintf_internal_r+0x1e20>
  807cb0:	00800044 	movi	r2,1
  807cb4:	1485883a 	add	r2,r2,r18
  807cb8:	d8814515 	stw	r2,1300(sp)
  807cbc:	100f883a 	mov	r7,r2
  807cc0:	103f750e 	bge	r2,zero,807a98 <___vfprintf_internal_r+0x1ba8>
  807cc4:	003fa806 	br	807b68 <___vfprintf_internal_r+0x1c78>
  807cc8:	80c00c04 	addi	r3,r16,48
  807ccc:	00800c04 	movi	r2,48
  807cd0:	d8c008c5 	stb	r3,35(sp)
  807cd4:	d9800804 	addi	r6,sp,32
  807cd8:	d8c00904 	addi	r3,sp,36
  807cdc:	d8800885 	stb	r2,34(sp)
  807ce0:	003f6506 	br	807a78 <___vfprintf_internal_r+0x1b88>
  807ce4:	d9014c17 	ldw	r4,1328(sp)
  807ce8:	2084703a 	and	r2,r4,r2
  807cec:	103f9c26 	beq	r2,zero,807b60 <___vfprintf_internal_r+0x1c70>
  807cf0:	003f6606 	br	807a8c <___vfprintf_internal_r+0x1b9c>
  807cf4:	d9800804 	addi	r6,sp,32
  807cf8:	d8c00884 	addi	r3,sp,34
  807cfc:	003f5e06 	br	807a78 <___vfprintf_internal_r+0x1b88>
  807d00:	00800b44 	movi	r2,45
  807d04:	0121c83a 	sub	r16,zero,r4
  807d08:	d8800845 	stb	r2,33(sp)
  807d0c:	003f3d06 	br	807a04 <___vfprintf_internal_r+0x1b14>
  807d10:	00800084 	movi	r2,2
  807d14:	1105c83a 	sub	r2,r2,r4
  807d18:	003fe606 	br	807cb4 <___vfprintf_internal_r+0x1dc4>
  807d1c:	d8014515 	stw	zero,1300(sp)
  807d20:	dc814715 	stw	r18,1308(sp)
  807d24:	003fb106 	br	807bec <___vfprintf_internal_r+0x1cfc>
  807d28:	000d883a 	mov	r6,zero
  807d2c:	000f883a 	mov	r7,zero
  807d30:	8009883a 	mov	r4,r16
  807d34:	880b883a 	mov	r5,r17
  807d38:	080d3e80 	call	80d3e8 <__nedf2>
  807d3c:	103f9f26 	beq	r2,zero,807bbc <___vfprintf_internal_r+0x1ccc>
  807d40:	00800044 	movi	r2,1
  807d44:	1509c83a 	sub	r4,r2,r20
  807d48:	d9000515 	stw	r4,20(sp)
  807d4c:	003f9b06 	br	807bbc <___vfprintf_internal_r+0x1ccc>
  807d50:	98000d1e 	bne	r19,zero,807d88 <___vfprintf_internal_r+0x1e98>
  807d54:	d8c14c17 	ldw	r3,1328(sp)
  807d58:	1880004c 	andi	r2,r3,1
  807d5c:	10000a1e 	bne	r2,zero,807d88 <___vfprintf_internal_r+0x1e98>
  807d60:	01000044 	movi	r4,1
  807d64:	200f883a 	mov	r7,r4
  807d68:	d9014515 	stw	r4,1300(sp)
  807d6c:	003f4a06 	br	807a98 <___vfprintf_internal_r+0x1ba8>
  807d70:	3cc00017 	ldw	r19,0(r7)
  807d74:	39c00104 	addi	r7,r7,4
  807d78:	983d0e0e 	bge	r19,zero,8071b4 <___vfprintf_internal_r+0x12c4>
  807d7c:	b8c00007 	ldb	r3,0(r23)
  807d80:	04ffffc4 	movi	r19,-1
  807d84:	0038d906 	br	8060ec <___vfprintf_internal_r+0x1fc>
  807d88:	9cc00084 	addi	r19,r19,2
  807d8c:	dcc14515 	stw	r19,1300(sp)
  807d90:	980f883a 	mov	r7,r19
  807d94:	983f400e 	bge	r19,zero,807a98 <___vfprintf_internal_r+0x1ba8>
  807d98:	003f7306 	br	807b68 <___vfprintf_internal_r+0x1c78>

00807d9c <__vfprintf_internal>:
  807d9c:	008020b4 	movhi	r2,130
  807da0:	10a81904 	addi	r2,r2,-24476
  807da4:	2013883a 	mov	r9,r4
  807da8:	11000017 	ldw	r4,0(r2)
  807dac:	2805883a 	mov	r2,r5
  807db0:	300f883a 	mov	r7,r6
  807db4:	480b883a 	mov	r5,r9
  807db8:	100d883a 	mov	r6,r2
  807dbc:	0805ef01 	jmpi	805ef0 <___vfprintf_internal_r>

00807dc0 <__swsetup_r>:
  807dc0:	008020b4 	movhi	r2,130
  807dc4:	10a81904 	addi	r2,r2,-24476
  807dc8:	10c00017 	ldw	r3,0(r2)
  807dcc:	defffd04 	addi	sp,sp,-12
  807dd0:	dc400115 	stw	r17,4(sp)
  807dd4:	dc000015 	stw	r16,0(sp)
  807dd8:	dfc00215 	stw	ra,8(sp)
  807ddc:	2023883a 	mov	r17,r4
  807de0:	2821883a 	mov	r16,r5
  807de4:	18000226 	beq	r3,zero,807df0 <__swsetup_r+0x30>
  807de8:	18800e17 	ldw	r2,56(r3)
  807dec:	10001f26 	beq	r2,zero,807e6c <__swsetup_r+0xac>
  807df0:	8100030b 	ldhu	r4,12(r16)
  807df4:	2080020c 	andi	r2,r4,8
  807df8:	10002826 	beq	r2,zero,807e9c <__swsetup_r+0xdc>
  807dfc:	81400417 	ldw	r5,16(r16)
  807e00:	28001d26 	beq	r5,zero,807e78 <__swsetup_r+0xb8>
  807e04:	2080004c 	andi	r2,r4,1
  807e08:	1005003a 	cmpeq	r2,r2,zero
  807e0c:	10000b26 	beq	r2,zero,807e3c <__swsetup_r+0x7c>
  807e10:	2080008c 	andi	r2,r4,2
  807e14:	10001226 	beq	r2,zero,807e60 <__swsetup_r+0xa0>
  807e18:	0005883a 	mov	r2,zero
  807e1c:	80800215 	stw	r2,8(r16)
  807e20:	28000b26 	beq	r5,zero,807e50 <__swsetup_r+0x90>
  807e24:	0005883a 	mov	r2,zero
  807e28:	dfc00217 	ldw	ra,8(sp)
  807e2c:	dc400117 	ldw	r17,4(sp)
  807e30:	dc000017 	ldw	r16,0(sp)
  807e34:	dec00304 	addi	sp,sp,12
  807e38:	f800283a 	ret
  807e3c:	80800517 	ldw	r2,20(r16)
  807e40:	80000215 	stw	zero,8(r16)
  807e44:	0085c83a 	sub	r2,zero,r2
  807e48:	80800615 	stw	r2,24(r16)
  807e4c:	283ff51e 	bne	r5,zero,807e24 <__swsetup_r+0x64>
  807e50:	2080200c 	andi	r2,r4,128
  807e54:	103ff326 	beq	r2,zero,807e24 <__swsetup_r+0x64>
  807e58:	00bfffc4 	movi	r2,-1
  807e5c:	003ff206 	br	807e28 <__swsetup_r+0x68>
  807e60:	80800517 	ldw	r2,20(r16)
  807e64:	80800215 	stw	r2,8(r16)
  807e68:	003fed06 	br	807e20 <__swsetup_r+0x60>
  807e6c:	1809883a 	mov	r4,r3
  807e70:	08099600 	call	809960 <__sinit>
  807e74:	003fde06 	br	807df0 <__swsetup_r+0x30>
  807e78:	20c0a00c 	andi	r3,r4,640
  807e7c:	00808004 	movi	r2,512
  807e80:	18bfe026 	beq	r3,r2,807e04 <__swsetup_r+0x44>
  807e84:	8809883a 	mov	r4,r17
  807e88:	800b883a 	mov	r5,r16
  807e8c:	080a6d80 	call	80a6d8 <__smakebuf_r>
  807e90:	8100030b 	ldhu	r4,12(r16)
  807e94:	81400417 	ldw	r5,16(r16)
  807e98:	003fda06 	br	807e04 <__swsetup_r+0x44>
  807e9c:	2080040c 	andi	r2,r4,16
  807ea0:	103fed26 	beq	r2,zero,807e58 <__swsetup_r+0x98>
  807ea4:	2080010c 	andi	r2,r4,4
  807ea8:	10001226 	beq	r2,zero,807ef4 <__swsetup_r+0x134>
  807eac:	81400c17 	ldw	r5,48(r16)
  807eb0:	28000526 	beq	r5,zero,807ec8 <__swsetup_r+0x108>
  807eb4:	80801004 	addi	r2,r16,64
  807eb8:	28800226 	beq	r5,r2,807ec4 <__swsetup_r+0x104>
  807ebc:	8809883a 	mov	r4,r17
  807ec0:	0809ce40 	call	809ce4 <_free_r>
  807ec4:	80000c15 	stw	zero,48(r16)
  807ec8:	8080030b 	ldhu	r2,12(r16)
  807ecc:	81400417 	ldw	r5,16(r16)
  807ed0:	80000115 	stw	zero,4(r16)
  807ed4:	10bff6cc 	andi	r2,r2,65499
  807ed8:	8080030d 	sth	r2,12(r16)
  807edc:	81400015 	stw	r5,0(r16)
  807ee0:	8080030b 	ldhu	r2,12(r16)
  807ee4:	10800214 	ori	r2,r2,8
  807ee8:	113fffcc 	andi	r4,r2,65535
  807eec:	8080030d 	sth	r2,12(r16)
  807ef0:	003fc306 	br	807e00 <__swsetup_r+0x40>
  807ef4:	81400417 	ldw	r5,16(r16)
  807ef8:	003ff906 	br	807ee0 <__swsetup_r+0x120>

00807efc <quorem>:
  807efc:	28c00417 	ldw	r3,16(r5)
  807f00:	20800417 	ldw	r2,16(r4)
  807f04:	defff604 	addi	sp,sp,-40
  807f08:	ddc00715 	stw	r23,28(sp)
  807f0c:	dd400515 	stw	r21,20(sp)
  807f10:	dfc00915 	stw	ra,36(sp)
  807f14:	df000815 	stw	fp,32(sp)
  807f18:	dd800615 	stw	r22,24(sp)
  807f1c:	dd000415 	stw	r20,16(sp)
  807f20:	dcc00315 	stw	r19,12(sp)
  807f24:	dc800215 	stw	r18,8(sp)
  807f28:	dc400115 	stw	r17,4(sp)
  807f2c:	dc000015 	stw	r16,0(sp)
  807f30:	202f883a 	mov	r23,r4
  807f34:	282b883a 	mov	r21,r5
  807f38:	10c07416 	blt	r2,r3,80810c <quorem+0x210>
  807f3c:	1c7fffc4 	addi	r17,r3,-1
  807f40:	8c45883a 	add	r2,r17,r17
  807f44:	1085883a 	add	r2,r2,r2
  807f48:	2c000504 	addi	r16,r5,20
  807f4c:	24c00504 	addi	r19,r4,20
  807f50:	14ed883a 	add	r22,r2,r19
  807f54:	80a5883a 	add	r18,r16,r2
  807f58:	b7000017 	ldw	fp,0(r22)
  807f5c:	91400017 	ldw	r5,0(r18)
  807f60:	e009883a 	mov	r4,fp
  807f64:	29400044 	addi	r5,r5,1
  807f68:	0804cbc0 	call	804cbc <__udivsi3>
  807f6c:	1029883a 	mov	r20,r2
  807f70:	10003c1e 	bne	r2,zero,808064 <quorem+0x168>
  807f74:	a80b883a 	mov	r5,r21
  807f78:	b809883a 	mov	r4,r23
  807f7c:	080acc40 	call	80acc4 <__mcmp>
  807f80:	10002b16 	blt	r2,zero,808030 <quorem+0x134>
  807f84:	a5000044 	addi	r20,r20,1
  807f88:	980f883a 	mov	r7,r19
  807f8c:	0011883a 	mov	r8,zero
  807f90:	0009883a 	mov	r4,zero
  807f94:	81400017 	ldw	r5,0(r16)
  807f98:	38c00017 	ldw	r3,0(r7)
  807f9c:	84000104 	addi	r16,r16,4
  807fa0:	28bfffcc 	andi	r2,r5,65535
  807fa4:	2085883a 	add	r2,r4,r2
  807fa8:	11bfffcc 	andi	r6,r2,65535
  807fac:	193fffcc 	andi	r4,r3,65535
  807fb0:	1004d43a 	srli	r2,r2,16
  807fb4:	280ad43a 	srli	r5,r5,16
  807fb8:	2189c83a 	sub	r4,r4,r6
  807fbc:	2209883a 	add	r4,r4,r8
  807fc0:	1806d43a 	srli	r3,r3,16
  807fc4:	288b883a 	add	r5,r5,r2
  807fc8:	200dd43a 	srai	r6,r4,16
  807fcc:	28bfffcc 	andi	r2,r5,65535
  807fd0:	1887c83a 	sub	r3,r3,r2
  807fd4:	1987883a 	add	r3,r3,r6
  807fd8:	3900000d 	sth	r4,0(r7)
  807fdc:	38c0008d 	sth	r3,2(r7)
  807fe0:	2808d43a 	srli	r4,r5,16
  807fe4:	39c00104 	addi	r7,r7,4
  807fe8:	1811d43a 	srai	r8,r3,16
  807fec:	943fe92e 	bgeu	r18,r16,807f94 <quorem+0x98>
  807ff0:	8c45883a 	add	r2,r17,r17
  807ff4:	1085883a 	add	r2,r2,r2
  807ff8:	9885883a 	add	r2,r19,r2
  807ffc:	10c00017 	ldw	r3,0(r2)
  808000:	18000b1e 	bne	r3,zero,808030 <quorem+0x134>
  808004:	113fff04 	addi	r4,r2,-4
  808008:	9900082e 	bgeu	r19,r4,80802c <quorem+0x130>
  80800c:	10bfff17 	ldw	r2,-4(r2)
  808010:	10000326 	beq	r2,zero,808020 <quorem+0x124>
  808014:	00000506 	br	80802c <quorem+0x130>
  808018:	20800017 	ldw	r2,0(r4)
  80801c:	1000031e 	bne	r2,zero,80802c <quorem+0x130>
  808020:	213fff04 	addi	r4,r4,-4
  808024:	8c7fffc4 	addi	r17,r17,-1
  808028:	993ffb36 	bltu	r19,r4,808018 <quorem+0x11c>
  80802c:	bc400415 	stw	r17,16(r23)
  808030:	a005883a 	mov	r2,r20
  808034:	dfc00917 	ldw	ra,36(sp)
  808038:	df000817 	ldw	fp,32(sp)
  80803c:	ddc00717 	ldw	r23,28(sp)
  808040:	dd800617 	ldw	r22,24(sp)
  808044:	dd400517 	ldw	r21,20(sp)
  808048:	dd000417 	ldw	r20,16(sp)
  80804c:	dcc00317 	ldw	r19,12(sp)
  808050:	dc800217 	ldw	r18,8(sp)
  808054:	dc400117 	ldw	r17,4(sp)
  808058:	dc000017 	ldw	r16,0(sp)
  80805c:	dec00a04 	addi	sp,sp,40
  808060:	f800283a 	ret
  808064:	980f883a 	mov	r7,r19
  808068:	8011883a 	mov	r8,r16
  80806c:	0013883a 	mov	r9,zero
  808070:	000d883a 	mov	r6,zero
  808074:	40c00017 	ldw	r3,0(r8)
  808078:	39000017 	ldw	r4,0(r7)
  80807c:	42000104 	addi	r8,r8,4
  808080:	18bfffcc 	andi	r2,r3,65535
  808084:	a085383a 	mul	r2,r20,r2
  808088:	1806d43a 	srli	r3,r3,16
  80808c:	217fffcc 	andi	r5,r4,65535
  808090:	3085883a 	add	r2,r6,r2
  808094:	11bfffcc 	andi	r6,r2,65535
  808098:	a0c7383a 	mul	r3,r20,r3
  80809c:	1004d43a 	srli	r2,r2,16
  8080a0:	298bc83a 	sub	r5,r5,r6
  8080a4:	2a4b883a 	add	r5,r5,r9
  8080a8:	2008d43a 	srli	r4,r4,16
  8080ac:	1887883a 	add	r3,r3,r2
  8080b0:	280dd43a 	srai	r6,r5,16
  8080b4:	18bfffcc 	andi	r2,r3,65535
  8080b8:	2089c83a 	sub	r4,r4,r2
  8080bc:	2189883a 	add	r4,r4,r6
  8080c0:	3900008d 	sth	r4,2(r7)
  8080c4:	3940000d 	sth	r5,0(r7)
  8080c8:	180cd43a 	srli	r6,r3,16
  8080cc:	39c00104 	addi	r7,r7,4
  8080d0:	2013d43a 	srai	r9,r4,16
  8080d4:	923fe72e 	bgeu	r18,r8,808074 <quorem+0x178>
  8080d8:	e03fa61e 	bne	fp,zero,807f74 <quorem+0x78>
  8080dc:	b0ffff04 	addi	r3,r22,-4
  8080e0:	98c0082e 	bgeu	r19,r3,808104 <quorem+0x208>
  8080e4:	b0bfff17 	ldw	r2,-4(r22)
  8080e8:	10000326 	beq	r2,zero,8080f8 <quorem+0x1fc>
  8080ec:	00000506 	br	808104 <quorem+0x208>
  8080f0:	18800017 	ldw	r2,0(r3)
  8080f4:	1000031e 	bne	r2,zero,808104 <quorem+0x208>
  8080f8:	18ffff04 	addi	r3,r3,-4
  8080fc:	8c7fffc4 	addi	r17,r17,-1
  808100:	98fffb36 	bltu	r19,r3,8080f0 <quorem+0x1f4>
  808104:	bc400415 	stw	r17,16(r23)
  808108:	003f9a06 	br	807f74 <quorem+0x78>
  80810c:	0005883a 	mov	r2,zero
  808110:	003fc806 	br	808034 <quorem+0x138>

00808114 <_dtoa_r>:
  808114:	22001017 	ldw	r8,64(r4)
  808118:	deffda04 	addi	sp,sp,-152
  80811c:	dd402115 	stw	r21,132(sp)
  808120:	dd002015 	stw	r20,128(sp)
  808124:	dc801e15 	stw	r18,120(sp)
  808128:	dc401d15 	stw	r17,116(sp)
  80812c:	dfc02515 	stw	ra,148(sp)
  808130:	df002415 	stw	fp,144(sp)
  808134:	ddc02315 	stw	r23,140(sp)
  808138:	dd802215 	stw	r22,136(sp)
  80813c:	dcc01f15 	stw	r19,124(sp)
  808140:	dc001c15 	stw	r16,112(sp)
  808144:	d9001615 	stw	r4,88(sp)
  808148:	3023883a 	mov	r17,r6
  80814c:	2829883a 	mov	r20,r5
  808150:	d9c01715 	stw	r7,92(sp)
  808154:	dc802817 	ldw	r18,160(sp)
  808158:	302b883a 	mov	r21,r6
  80815c:	40000a26 	beq	r8,zero,808188 <_dtoa_r+0x74>
  808160:	20801117 	ldw	r2,68(r4)
  808164:	400b883a 	mov	r5,r8
  808168:	40800115 	stw	r2,4(r8)
  80816c:	20c01117 	ldw	r3,68(r4)
  808170:	00800044 	movi	r2,1
  808174:	10c4983a 	sll	r2,r2,r3
  808178:	40800215 	stw	r2,8(r8)
  80817c:	080ab680 	call	80ab68 <_Bfree>
  808180:	d8c01617 	ldw	r3,88(sp)
  808184:	18001015 	stw	zero,64(r3)
  808188:	8800a316 	blt	r17,zero,808418 <_dtoa_r+0x304>
  80818c:	90000015 	stw	zero,0(r18)
  808190:	a8dffc2c 	andhi	r3,r21,32752
  808194:	009ffc34 	movhi	r2,32752
  808198:	18809126 	beq	r3,r2,8083e0 <_dtoa_r+0x2cc>
  80819c:	000d883a 	mov	r6,zero
  8081a0:	000f883a 	mov	r7,zero
  8081a4:	a009883a 	mov	r4,r20
  8081a8:	a80b883a 	mov	r5,r21
  8081ac:	dd001215 	stw	r20,72(sp)
  8081b0:	dd401315 	stw	r21,76(sp)
  8081b4:	080d3e80 	call	80d3e8 <__nedf2>
  8081b8:	1000171e 	bne	r2,zero,808218 <_dtoa_r+0x104>
  8081bc:	d9802717 	ldw	r6,156(sp)
  8081c0:	00800044 	movi	r2,1
  8081c4:	30800015 	stw	r2,0(r6)
  8081c8:	d8802917 	ldw	r2,164(sp)
  8081cc:	10029b26 	beq	r2,zero,808c3c <_dtoa_r+0xb28>
  8081d0:	d9002917 	ldw	r4,164(sp)
  8081d4:	008020b4 	movhi	r2,130
  8081d8:	10a08f44 	addi	r2,r2,-32195
  8081dc:	10ffffc4 	addi	r3,r2,-1
  8081e0:	20800015 	stw	r2,0(r4)
  8081e4:	1805883a 	mov	r2,r3
  8081e8:	dfc02517 	ldw	ra,148(sp)
  8081ec:	df002417 	ldw	fp,144(sp)
  8081f0:	ddc02317 	ldw	r23,140(sp)
  8081f4:	dd802217 	ldw	r22,136(sp)
  8081f8:	dd402117 	ldw	r21,132(sp)
  8081fc:	dd002017 	ldw	r20,128(sp)
  808200:	dcc01f17 	ldw	r19,124(sp)
  808204:	dc801e17 	ldw	r18,120(sp)
  808208:	dc401d17 	ldw	r17,116(sp)
  80820c:	dc001c17 	ldw	r16,112(sp)
  808210:	dec02604 	addi	sp,sp,152
  808214:	f800283a 	ret
  808218:	d9001617 	ldw	r4,88(sp)
  80821c:	d9401217 	ldw	r5,72(sp)
  808220:	d8800104 	addi	r2,sp,4
  808224:	a80d883a 	mov	r6,r21
  808228:	d9c00204 	addi	r7,sp,8
  80822c:	d8800015 	stw	r2,0(sp)
  808230:	080b1a40 	call	80b1a4 <__d2b>
  808234:	d8800715 	stw	r2,28(sp)
  808238:	a804d53a 	srli	r2,r21,20
  80823c:	1101ffcc 	andi	r4,r2,2047
  808240:	20008626 	beq	r4,zero,80845c <_dtoa_r+0x348>
  808244:	d8c01217 	ldw	r3,72(sp)
  808248:	00800434 	movhi	r2,16
  80824c:	10bfffc4 	addi	r2,r2,-1
  808250:	ddc00117 	ldw	r23,4(sp)
  808254:	a884703a 	and	r2,r21,r2
  808258:	1811883a 	mov	r8,r3
  80825c:	124ffc34 	orhi	r9,r2,16368
  808260:	25bf0044 	addi	r22,r4,-1023
  808264:	d8000815 	stw	zero,32(sp)
  808268:	0005883a 	mov	r2,zero
  80826c:	00cffe34 	movhi	r3,16376
  808270:	480b883a 	mov	r5,r9
  808274:	4009883a 	mov	r4,r8
  808278:	180f883a 	mov	r7,r3
  80827c:	100d883a 	mov	r6,r2
  808280:	08040d00 	call	8040d0 <__subdf3>
  808284:	0218dbf4 	movhi	r8,25455
  808288:	4210d844 	addi	r8,r8,17249
  80828c:	024ff4f4 	movhi	r9,16339
  808290:	4a61e9c4 	addi	r9,r9,-30809
  808294:	480f883a 	mov	r7,r9
  808298:	400d883a 	mov	r6,r8
  80829c:	180b883a 	mov	r5,r3
  8082a0:	1009883a 	mov	r4,r2
  8082a4:	08041c40 	call	8041c4 <__muldf3>
  8082a8:	0222d874 	movhi	r8,35681
  8082ac:	42322cc4 	addi	r8,r8,-14157
  8082b0:	024ff1f4 	movhi	r9,16327
  8082b4:	4a628a04 	addi	r9,r9,-30168
  8082b8:	480f883a 	mov	r7,r9
  8082bc:	400d883a 	mov	r6,r8
  8082c0:	180b883a 	mov	r5,r3
  8082c4:	1009883a 	mov	r4,r2
  8082c8:	08041500 	call	804150 <__adddf3>
  8082cc:	b009883a 	mov	r4,r22
  8082d0:	1021883a 	mov	r16,r2
  8082d4:	1823883a 	mov	r17,r3
  8082d8:	08049780 	call	804978 <__floatsidf>
  8082dc:	021427f4 	movhi	r8,20639
  8082e0:	421e7ec4 	addi	r8,r8,31227
  8082e4:	024ff4f4 	movhi	r9,16339
  8082e8:	4a5104c4 	addi	r9,r9,17427
  8082ec:	480f883a 	mov	r7,r9
  8082f0:	400d883a 	mov	r6,r8
  8082f4:	180b883a 	mov	r5,r3
  8082f8:	1009883a 	mov	r4,r2
  8082fc:	08041c40 	call	8041c4 <__muldf3>
  808300:	180f883a 	mov	r7,r3
  808304:	880b883a 	mov	r5,r17
  808308:	100d883a 	mov	r6,r2
  80830c:	8009883a 	mov	r4,r16
  808310:	08041500 	call	804150 <__adddf3>
  808314:	1009883a 	mov	r4,r2
  808318:	180b883a 	mov	r5,r3
  80831c:	1021883a 	mov	r16,r2
  808320:	1823883a 	mov	r17,r3
  808324:	0804a700 	call	804a70 <__fixdfsi>
  808328:	000d883a 	mov	r6,zero
  80832c:	000f883a 	mov	r7,zero
  808330:	8009883a 	mov	r4,r16
  808334:	880b883a 	mov	r5,r17
  808338:	d8800d15 	stw	r2,52(sp)
  80833c:	080d4700 	call	80d470 <__ltdf2>
  808340:	10031716 	blt	r2,zero,808fa0 <_dtoa_r+0xe8c>
  808344:	d8c00d17 	ldw	r3,52(sp)
  808348:	00800584 	movi	r2,22
  80834c:	10c1482e 	bgeu	r2,r3,808870 <_dtoa_r+0x75c>
  808350:	01000044 	movi	r4,1
  808354:	d9000c15 	stw	r4,48(sp)
  808358:	bd85c83a 	sub	r2,r23,r22
  80835c:	11bfffc4 	addi	r6,r2,-1
  808360:	30030b16 	blt	r6,zero,808f90 <_dtoa_r+0xe7c>
  808364:	d9800a15 	stw	r6,40(sp)
  808368:	d8001115 	stw	zero,68(sp)
  80836c:	d8c00d17 	ldw	r3,52(sp)
  808370:	1802ff16 	blt	r3,zero,808f70 <_dtoa_r+0xe5c>
  808374:	d9000a17 	ldw	r4,40(sp)
  808378:	d8c00915 	stw	r3,36(sp)
  80837c:	d8001015 	stw	zero,64(sp)
  808380:	20c9883a 	add	r4,r4,r3
  808384:	d9000a15 	stw	r4,40(sp)
  808388:	d9001717 	ldw	r4,92(sp)
  80838c:	00800244 	movi	r2,9
  808390:	11004636 	bltu	r2,r4,8084ac <_dtoa_r+0x398>
  808394:	00800144 	movi	r2,5
  808398:	11020416 	blt	r2,r4,808bac <_dtoa_r+0xa98>
  80839c:	04400044 	movi	r17,1
  8083a0:	d8c01717 	ldw	r3,92(sp)
  8083a4:	00800144 	movi	r2,5
  8083a8:	10c1ed36 	bltu	r2,r3,808b60 <_dtoa_r+0xa4c>
  8083ac:	18c5883a 	add	r2,r3,r3
  8083b0:	1085883a 	add	r2,r2,r2
  8083b4:	00c02074 	movhi	r3,129
  8083b8:	18e0f204 	addi	r3,r3,-31800
  8083bc:	10c5883a 	add	r2,r2,r3
  8083c0:	11000017 	ldw	r4,0(r2)
  8083c4:	2000683a 	jmp	r4
  8083c8:	008084b4 	movhi	r2,530
  8083cc:	008084b4 	movhi	r2,530
  8083d0:	00808eb4 	movhi	r2,570
  8083d4:	00808e8c 	andi	r2,zero,570
  8083d8:	00808ed0 	cmplti	r2,zero,571
  8083dc:	00808edc 	xori	r2,zero,571
  8083e0:	d9002717 	ldw	r4,156(sp)
  8083e4:	0089c3c4 	movi	r2,9999
  8083e8:	20800015 	stw	r2,0(r4)
  8083ec:	a0001026 	beq	r20,zero,808430 <_dtoa_r+0x31c>
  8083f0:	00c020b4 	movhi	r3,130
  8083f4:	18e09b04 	addi	r3,r3,-32148
  8083f8:	d9802917 	ldw	r6,164(sp)
  8083fc:	303f7926 	beq	r6,zero,8081e4 <_dtoa_r+0xd0>
  808400:	188000c7 	ldb	r2,3(r3)
  808404:	190000c4 	addi	r4,r3,3
  808408:	1000101e 	bne	r2,zero,80844c <_dtoa_r+0x338>
  80840c:	d8802917 	ldw	r2,164(sp)
  808410:	11000015 	stw	r4,0(r2)
  808414:	003f7306 	br	8081e4 <_dtoa_r+0xd0>
  808418:	00a00034 	movhi	r2,32768
  80841c:	10bfffc4 	addi	r2,r2,-1
  808420:	00c00044 	movi	r3,1
  808424:	88aa703a 	and	r21,r17,r2
  808428:	90c00015 	stw	r3,0(r18)
  80842c:	003f5806 	br	808190 <_dtoa_r+0x7c>
  808430:	00800434 	movhi	r2,16
  808434:	10bfffc4 	addi	r2,r2,-1
  808438:	a884703a 	and	r2,r21,r2
  80843c:	103fec1e 	bne	r2,zero,8083f0 <_dtoa_r+0x2dc>
  808440:	00c020b4 	movhi	r3,130
  808444:	18e09804 	addi	r3,r3,-32160
  808448:	003feb06 	br	8083f8 <_dtoa_r+0x2e4>
  80844c:	d8802917 	ldw	r2,164(sp)
  808450:	19000204 	addi	r4,r3,8
  808454:	11000015 	stw	r4,0(r2)
  808458:	003f6206 	br	8081e4 <_dtoa_r+0xd0>
  80845c:	ddc00117 	ldw	r23,4(sp)
  808460:	d8800217 	ldw	r2,8(sp)
  808464:	01000804 	movi	r4,32
  808468:	b8c10c84 	addi	r3,r23,1074
  80846c:	18a3883a 	add	r17,r3,r2
  808470:	2441b80e 	bge	r4,r17,808b54 <_dtoa_r+0xa40>
  808474:	00c01004 	movi	r3,64
  808478:	1c47c83a 	sub	r3,r3,r17
  80847c:	88bff804 	addi	r2,r17,-32
  808480:	a8c6983a 	sll	r3,r21,r3
  808484:	a084d83a 	srl	r2,r20,r2
  808488:	1888b03a 	or	r4,r3,r2
  80848c:	080d4f80 	call	80d4f8 <__floatunsidf>
  808490:	1011883a 	mov	r8,r2
  808494:	00bf8434 	movhi	r2,65040
  808498:	01000044 	movi	r4,1
  80849c:	10d3883a 	add	r9,r2,r3
  8084a0:	8dbef344 	addi	r22,r17,-1075
  8084a4:	d9000815 	stw	r4,32(sp)
  8084a8:	003f6f06 	br	808268 <_dtoa_r+0x154>
  8084ac:	d8001715 	stw	zero,92(sp)
  8084b0:	04400044 	movi	r17,1
  8084b4:	00bfffc4 	movi	r2,-1
  8084b8:	00c00044 	movi	r3,1
  8084bc:	d8800e15 	stw	r2,56(sp)
  8084c0:	d8002615 	stw	zero,152(sp)
  8084c4:	d8800f15 	stw	r2,60(sp)
  8084c8:	d8c00b15 	stw	r3,44(sp)
  8084cc:	1021883a 	mov	r16,r2
  8084d0:	d8801617 	ldw	r2,88(sp)
  8084d4:	10001115 	stw	zero,68(r2)
  8084d8:	d8801617 	ldw	r2,88(sp)
  8084dc:	11401117 	ldw	r5,68(r2)
  8084e0:	1009883a 	mov	r4,r2
  8084e4:	080b0e80 	call	80b0e8 <_Balloc>
  8084e8:	d8c01617 	ldw	r3,88(sp)
  8084ec:	d8800515 	stw	r2,20(sp)
  8084f0:	18801015 	stw	r2,64(r3)
  8084f4:	00800384 	movi	r2,14
  8084f8:	14006836 	bltu	r2,r16,80869c <_dtoa_r+0x588>
  8084fc:	8805003a 	cmpeq	r2,r17,zero
  808500:	1000661e 	bne	r2,zero,80869c <_dtoa_r+0x588>
  808504:	d9000d17 	ldw	r4,52(sp)
  808508:	0102300e 	bge	zero,r4,808dcc <_dtoa_r+0xcb8>
  80850c:	208003cc 	andi	r2,r4,15
  808510:	100490fa 	slli	r2,r2,3
  808514:	2025d13a 	srai	r18,r4,4
  808518:	00c020b4 	movhi	r3,130
  80851c:	18e0ad04 	addi	r3,r3,-32076
  808520:	10c5883a 	add	r2,r2,r3
  808524:	90c0040c 	andi	r3,r18,16
  808528:	14000017 	ldw	r16,0(r2)
  80852c:	14400117 	ldw	r17,4(r2)
  808530:	18036a1e 	bne	r3,zero,8092dc <_dtoa_r+0x11c8>
  808534:	05800084 	movi	r22,2
  808538:	90001026 	beq	r18,zero,80857c <_dtoa_r+0x468>
  80853c:	04c020b4 	movhi	r19,130
  808540:	9ce0df04 	addi	r19,r19,-31876
  808544:	9080004c 	andi	r2,r18,1
  808548:	1005003a 	cmpeq	r2,r2,zero
  80854c:	1000081e 	bne	r2,zero,808570 <_dtoa_r+0x45c>
  808550:	99800017 	ldw	r6,0(r19)
  808554:	99c00117 	ldw	r7,4(r19)
  808558:	880b883a 	mov	r5,r17
  80855c:	8009883a 	mov	r4,r16
  808560:	08041c40 	call	8041c4 <__muldf3>
  808564:	1021883a 	mov	r16,r2
  808568:	b5800044 	addi	r22,r22,1
  80856c:	1823883a 	mov	r17,r3
  808570:	9025d07a 	srai	r18,r18,1
  808574:	9cc00204 	addi	r19,r19,8
  808578:	903ff21e 	bne	r18,zero,808544 <_dtoa_r+0x430>
  80857c:	a80b883a 	mov	r5,r21
  808580:	a009883a 	mov	r4,r20
  808584:	880f883a 	mov	r7,r17
  808588:	800d883a 	mov	r6,r16
  80858c:	08045880 	call	804588 <__divdf3>
  808590:	1029883a 	mov	r20,r2
  808594:	182b883a 	mov	r21,r3
  808598:	d8c00c17 	ldw	r3,48(sp)
  80859c:	1805003a 	cmpeq	r2,r3,zero
  8085a0:	1000081e 	bne	r2,zero,8085c4 <_dtoa_r+0x4b0>
  8085a4:	0005883a 	mov	r2,zero
  8085a8:	00cffc34 	movhi	r3,16368
  8085ac:	180f883a 	mov	r7,r3
  8085b0:	a009883a 	mov	r4,r20
  8085b4:	a80b883a 	mov	r5,r21
  8085b8:	100d883a 	mov	r6,r2
  8085bc:	080d4700 	call	80d470 <__ltdf2>
  8085c0:	1003fe16 	blt	r2,zero,8095bc <_dtoa_r+0x14a8>
  8085c4:	b009883a 	mov	r4,r22
  8085c8:	08049780 	call	804978 <__floatsidf>
  8085cc:	180b883a 	mov	r5,r3
  8085d0:	1009883a 	mov	r4,r2
  8085d4:	a00d883a 	mov	r6,r20
  8085d8:	a80f883a 	mov	r7,r21
  8085dc:	08041c40 	call	8041c4 <__muldf3>
  8085e0:	0011883a 	mov	r8,zero
  8085e4:	02500734 	movhi	r9,16412
  8085e8:	1009883a 	mov	r4,r2
  8085ec:	180b883a 	mov	r5,r3
  8085f0:	480f883a 	mov	r7,r9
  8085f4:	400d883a 	mov	r6,r8
  8085f8:	08041500 	call	804150 <__adddf3>
  8085fc:	d9000f17 	ldw	r4,60(sp)
  808600:	102d883a 	mov	r22,r2
  808604:	00bf3034 	movhi	r2,64704
  808608:	18b9883a 	add	fp,r3,r2
  80860c:	e02f883a 	mov	r23,fp
  808610:	20028f1e 	bne	r4,zero,809050 <_dtoa_r+0xf3c>
  808614:	0005883a 	mov	r2,zero
  808618:	00d00534 	movhi	r3,16404
  80861c:	a009883a 	mov	r4,r20
  808620:	a80b883a 	mov	r5,r21
  808624:	180f883a 	mov	r7,r3
  808628:	100d883a 	mov	r6,r2
  80862c:	08040d00 	call	8040d0 <__subdf3>
  808630:	1009883a 	mov	r4,r2
  808634:	e00f883a 	mov	r7,fp
  808638:	180b883a 	mov	r5,r3
  80863c:	b00d883a 	mov	r6,r22
  808640:	1025883a 	mov	r18,r2
  808644:	1827883a 	mov	r19,r3
  808648:	08048680 	call	804868 <__gtdf2>
  80864c:	00834f16 	blt	zero,r2,80938c <_dtoa_r+0x1278>
  808650:	e0e0003c 	xorhi	r3,fp,32768
  808654:	9009883a 	mov	r4,r18
  808658:	980b883a 	mov	r5,r19
  80865c:	180f883a 	mov	r7,r3
  808660:	b00d883a 	mov	r6,r22
  808664:	080d4700 	call	80d470 <__ltdf2>
  808668:	1000080e 	bge	r2,zero,80868c <_dtoa_r+0x578>
  80866c:	0027883a 	mov	r19,zero
  808670:	0025883a 	mov	r18,zero
  808674:	d8802617 	ldw	r2,152(sp)
  808678:	df000517 	ldw	fp,20(sp)
  80867c:	d8000615 	stw	zero,24(sp)
  808680:	0084303a 	nor	r2,zero,r2
  808684:	d8800d15 	stw	r2,52(sp)
  808688:	00019b06 	br	808cf8 <_dtoa_r+0xbe4>
  80868c:	d9801217 	ldw	r6,72(sp)
  808690:	d8801317 	ldw	r2,76(sp)
  808694:	3029883a 	mov	r20,r6
  808698:	102b883a 	mov	r21,r2
  80869c:	d8c00217 	ldw	r3,8(sp)
  8086a0:	18008516 	blt	r3,zero,8088b8 <_dtoa_r+0x7a4>
  8086a4:	d9000d17 	ldw	r4,52(sp)
  8086a8:	00800384 	movi	r2,14
  8086ac:	11008216 	blt	r2,r4,8088b8 <_dtoa_r+0x7a4>
  8086b0:	200490fa 	slli	r2,r4,3
  8086b4:	d9802617 	ldw	r6,152(sp)
  8086b8:	00c020b4 	movhi	r3,130
  8086bc:	18e0ad04 	addi	r3,r3,-32076
  8086c0:	10c5883a 	add	r2,r2,r3
  8086c4:	14800017 	ldw	r18,0(r2)
  8086c8:	14c00117 	ldw	r19,4(r2)
  8086cc:	30031e16 	blt	r6,zero,809348 <_dtoa_r+0x1234>
  8086d0:	d9000517 	ldw	r4,20(sp)
  8086d4:	d8c00f17 	ldw	r3,60(sp)
  8086d8:	a823883a 	mov	r17,r21
  8086dc:	a021883a 	mov	r16,r20
  8086e0:	192b883a 	add	r21,r3,r4
  8086e4:	2039883a 	mov	fp,r4
  8086e8:	00000f06 	br	808728 <_dtoa_r+0x614>
  8086ec:	0005883a 	mov	r2,zero
  8086f0:	00d00934 	movhi	r3,16420
  8086f4:	5009883a 	mov	r4,r10
  8086f8:	580b883a 	mov	r5,r11
  8086fc:	180f883a 	mov	r7,r3
  808700:	100d883a 	mov	r6,r2
  808704:	08041c40 	call	8041c4 <__muldf3>
  808708:	180b883a 	mov	r5,r3
  80870c:	000d883a 	mov	r6,zero
  808710:	000f883a 	mov	r7,zero
  808714:	1009883a 	mov	r4,r2
  808718:	1021883a 	mov	r16,r2
  80871c:	1823883a 	mov	r17,r3
  808720:	080d3e80 	call	80d3e8 <__nedf2>
  808724:	10004526 	beq	r2,zero,80883c <_dtoa_r+0x728>
  808728:	900d883a 	mov	r6,r18
  80872c:	980f883a 	mov	r7,r19
  808730:	8009883a 	mov	r4,r16
  808734:	880b883a 	mov	r5,r17
  808738:	08045880 	call	804588 <__divdf3>
  80873c:	180b883a 	mov	r5,r3
  808740:	1009883a 	mov	r4,r2
  808744:	0804a700 	call	804a70 <__fixdfsi>
  808748:	1009883a 	mov	r4,r2
  80874c:	1029883a 	mov	r20,r2
  808750:	08049780 	call	804978 <__floatsidf>
  808754:	180f883a 	mov	r7,r3
  808758:	9009883a 	mov	r4,r18
  80875c:	980b883a 	mov	r5,r19
  808760:	100d883a 	mov	r6,r2
  808764:	08041c40 	call	8041c4 <__muldf3>
  808768:	180f883a 	mov	r7,r3
  80876c:	880b883a 	mov	r5,r17
  808770:	8009883a 	mov	r4,r16
  808774:	100d883a 	mov	r6,r2
  808778:	08040d00 	call	8040d0 <__subdf3>
  80877c:	1015883a 	mov	r10,r2
  808780:	a0800c04 	addi	r2,r20,48
  808784:	e0800005 	stb	r2,0(fp)
  808788:	e7000044 	addi	fp,fp,1
  80878c:	1817883a 	mov	r11,r3
  808790:	e57fd61e 	bne	fp,r21,8086ec <_dtoa_r+0x5d8>
  808794:	500d883a 	mov	r6,r10
  808798:	180f883a 	mov	r7,r3
  80879c:	5009883a 	mov	r4,r10
  8087a0:	180b883a 	mov	r5,r3
  8087a4:	08041500 	call	804150 <__adddf3>
  8087a8:	100d883a 	mov	r6,r2
  8087ac:	9009883a 	mov	r4,r18
  8087b0:	980b883a 	mov	r5,r19
  8087b4:	180f883a 	mov	r7,r3
  8087b8:	1021883a 	mov	r16,r2
  8087bc:	1823883a 	mov	r17,r3
  8087c0:	080d4700 	call	80d470 <__ltdf2>
  8087c4:	10000816 	blt	r2,zero,8087e8 <_dtoa_r+0x6d4>
  8087c8:	980b883a 	mov	r5,r19
  8087cc:	800d883a 	mov	r6,r16
  8087d0:	880f883a 	mov	r7,r17
  8087d4:	9009883a 	mov	r4,r18
  8087d8:	08047e00 	call	8047e0 <__eqdf2>
  8087dc:	1000171e 	bne	r2,zero,80883c <_dtoa_r+0x728>
  8087e0:	a080004c 	andi	r2,r20,1
  8087e4:	10001526 	beq	r2,zero,80883c <_dtoa_r+0x728>
  8087e8:	d8800d17 	ldw	r2,52(sp)
  8087ec:	d8800415 	stw	r2,16(sp)
  8087f0:	e009883a 	mov	r4,fp
  8087f4:	213fffc4 	addi	r4,r4,-1
  8087f8:	20c00007 	ldb	r3,0(r4)
  8087fc:	00800e44 	movi	r2,57
  808800:	1880081e 	bne	r3,r2,808824 <_dtoa_r+0x710>
  808804:	d8800517 	ldw	r2,20(sp)
  808808:	113ffa1e 	bne	r2,r4,8087f4 <_dtoa_r+0x6e0>
  80880c:	d8c00417 	ldw	r3,16(sp)
  808810:	d9800517 	ldw	r6,20(sp)
  808814:	00800c04 	movi	r2,48
  808818:	18c00044 	addi	r3,r3,1
  80881c:	d8c00415 	stw	r3,16(sp)
  808820:	30800005 	stb	r2,0(r6)
  808824:	20800003 	ldbu	r2,0(r4)
  808828:	d8c00417 	ldw	r3,16(sp)
  80882c:	27000044 	addi	fp,r4,1
  808830:	10800044 	addi	r2,r2,1
  808834:	d8c00d15 	stw	r3,52(sp)
  808838:	20800005 	stb	r2,0(r4)
  80883c:	d9001617 	ldw	r4,88(sp)
  808840:	d9400717 	ldw	r5,28(sp)
  808844:	080ab680 	call	80ab68 <_Bfree>
  808848:	e0000005 	stb	zero,0(fp)
  80884c:	d9800d17 	ldw	r6,52(sp)
  808850:	d8c02717 	ldw	r3,156(sp)
  808854:	d9002917 	ldw	r4,164(sp)
  808858:	30800044 	addi	r2,r6,1
  80885c:	18800015 	stw	r2,0(r3)
  808860:	20029c26 	beq	r4,zero,8092d4 <_dtoa_r+0x11c0>
  808864:	d8c00517 	ldw	r3,20(sp)
  808868:	27000015 	stw	fp,0(r4)
  80886c:	003e5d06 	br	8081e4 <_dtoa_r+0xd0>
  808870:	d9800d17 	ldw	r6,52(sp)
  808874:	00c020b4 	movhi	r3,130
  808878:	18e0ad04 	addi	r3,r3,-32076
  80887c:	d9001217 	ldw	r4,72(sp)
  808880:	300490fa 	slli	r2,r6,3
  808884:	d9401317 	ldw	r5,76(sp)
  808888:	10c5883a 	add	r2,r2,r3
  80888c:	12000017 	ldw	r8,0(r2)
  808890:	12400117 	ldw	r9,4(r2)
  808894:	400d883a 	mov	r6,r8
  808898:	480f883a 	mov	r7,r9
  80889c:	080d4700 	call	80d470 <__ltdf2>
  8088a0:	1000030e 	bge	r2,zero,8088b0 <_dtoa_r+0x79c>
  8088a4:	d8800d17 	ldw	r2,52(sp)
  8088a8:	10bfffc4 	addi	r2,r2,-1
  8088ac:	d8800d15 	stw	r2,52(sp)
  8088b0:	d8000c15 	stw	zero,48(sp)
  8088b4:	003ea806 	br	808358 <_dtoa_r+0x244>
  8088b8:	d9000b17 	ldw	r4,44(sp)
  8088bc:	202cc03a 	cmpne	r22,r4,zero
  8088c0:	b000c71e 	bne	r22,zero,808be0 <_dtoa_r+0xacc>
  8088c4:	dc001117 	ldw	r16,68(sp)
  8088c8:	dc801017 	ldw	r18,64(sp)
  8088cc:	0027883a 	mov	r19,zero
  8088d0:	04000b0e 	bge	zero,r16,808900 <_dtoa_r+0x7ec>
  8088d4:	d8c00a17 	ldw	r3,40(sp)
  8088d8:	00c0090e 	bge	zero,r3,808900 <_dtoa_r+0x7ec>
  8088dc:	8005883a 	mov	r2,r16
  8088e0:	1c011316 	blt	r3,r16,808d30 <_dtoa_r+0xc1c>
  8088e4:	d9000a17 	ldw	r4,40(sp)
  8088e8:	d9801117 	ldw	r6,68(sp)
  8088ec:	80a1c83a 	sub	r16,r16,r2
  8088f0:	2089c83a 	sub	r4,r4,r2
  8088f4:	308dc83a 	sub	r6,r6,r2
  8088f8:	d9000a15 	stw	r4,40(sp)
  8088fc:	d9801115 	stw	r6,68(sp)
  808900:	d8801017 	ldw	r2,64(sp)
  808904:	0080150e 	bge	zero,r2,80895c <_dtoa_r+0x848>
  808908:	d8c00b17 	ldw	r3,44(sp)
  80890c:	1805003a 	cmpeq	r2,r3,zero
  808910:	1001c91e 	bne	r2,zero,809038 <_dtoa_r+0xf24>
  808914:	04800e0e 	bge	zero,r18,808950 <_dtoa_r+0x83c>
  808918:	d9001617 	ldw	r4,88(sp)
  80891c:	980b883a 	mov	r5,r19
  808920:	900d883a 	mov	r6,r18
  808924:	080b91c0 	call	80b91c <__pow5mult>
  808928:	d9001617 	ldw	r4,88(sp)
  80892c:	d9800717 	ldw	r6,28(sp)
  808930:	100b883a 	mov	r5,r2
  808934:	1027883a 	mov	r19,r2
  808938:	080b5f80 	call	80b5f8 <__multiply>
  80893c:	d9001617 	ldw	r4,88(sp)
  808940:	d9400717 	ldw	r5,28(sp)
  808944:	1023883a 	mov	r17,r2
  808948:	080ab680 	call	80ab68 <_Bfree>
  80894c:	dc400715 	stw	r17,28(sp)
  808950:	d9001017 	ldw	r4,64(sp)
  808954:	248dc83a 	sub	r6,r4,r18
  808958:	30010e1e 	bne	r6,zero,808d94 <_dtoa_r+0xc80>
  80895c:	d9001617 	ldw	r4,88(sp)
  808960:	04400044 	movi	r17,1
  808964:	880b883a 	mov	r5,r17
  808968:	080b7e00 	call	80b7e0 <__i2b>
  80896c:	d9800917 	ldw	r6,36(sp)
  808970:	1025883a 	mov	r18,r2
  808974:	0180040e 	bge	zero,r6,808988 <_dtoa_r+0x874>
  808978:	d9001617 	ldw	r4,88(sp)
  80897c:	100b883a 	mov	r5,r2
  808980:	080b91c0 	call	80b91c <__pow5mult>
  808984:	1025883a 	mov	r18,r2
  808988:	d8801717 	ldw	r2,92(sp)
  80898c:	8880f30e 	bge	r17,r2,808d5c <_dtoa_r+0xc48>
  808990:	0023883a 	mov	r17,zero
  808994:	d9800917 	ldw	r6,36(sp)
  808998:	30019e1e 	bne	r6,zero,809014 <_dtoa_r+0xf00>
  80899c:	00c00044 	movi	r3,1
  8089a0:	d9000a17 	ldw	r4,40(sp)
  8089a4:	20c5883a 	add	r2,r4,r3
  8089a8:	10c007cc 	andi	r3,r2,31
  8089ac:	1800841e 	bne	r3,zero,808bc0 <_dtoa_r+0xaac>
  8089b0:	00800704 	movi	r2,28
  8089b4:	d9000a17 	ldw	r4,40(sp)
  8089b8:	d9801117 	ldw	r6,68(sp)
  8089bc:	80a1883a 	add	r16,r16,r2
  8089c0:	2089883a 	add	r4,r4,r2
  8089c4:	308d883a 	add	r6,r6,r2
  8089c8:	d9000a15 	stw	r4,40(sp)
  8089cc:	d9801115 	stw	r6,68(sp)
  8089d0:	d8801117 	ldw	r2,68(sp)
  8089d4:	0080050e 	bge	zero,r2,8089ec <_dtoa_r+0x8d8>
  8089d8:	d9400717 	ldw	r5,28(sp)
  8089dc:	d9001617 	ldw	r4,88(sp)
  8089e0:	100d883a 	mov	r6,r2
  8089e4:	080b4ac0 	call	80b4ac <__lshift>
  8089e8:	d8800715 	stw	r2,28(sp)
  8089ec:	d8c00a17 	ldw	r3,40(sp)
  8089f0:	00c0050e 	bge	zero,r3,808a08 <_dtoa_r+0x8f4>
  8089f4:	d9001617 	ldw	r4,88(sp)
  8089f8:	900b883a 	mov	r5,r18
  8089fc:	180d883a 	mov	r6,r3
  808a00:	080b4ac0 	call	80b4ac <__lshift>
  808a04:	1025883a 	mov	r18,r2
  808a08:	d9000c17 	ldw	r4,48(sp)
  808a0c:	2005003a 	cmpeq	r2,r4,zero
  808a10:	10016f26 	beq	r2,zero,808fd0 <_dtoa_r+0xebc>
  808a14:	d9000f17 	ldw	r4,60(sp)
  808a18:	0102170e 	bge	zero,r4,809278 <_dtoa_r+0x1164>
  808a1c:	d9800b17 	ldw	r6,44(sp)
  808a20:	3005003a 	cmpeq	r2,r6,zero
  808a24:	1000881e 	bne	r2,zero,808c48 <_dtoa_r+0xb34>
  808a28:	0400050e 	bge	zero,r16,808a40 <_dtoa_r+0x92c>
  808a2c:	d9001617 	ldw	r4,88(sp)
  808a30:	980b883a 	mov	r5,r19
  808a34:	800d883a 	mov	r6,r16
  808a38:	080b4ac0 	call	80b4ac <__lshift>
  808a3c:	1027883a 	mov	r19,r2
  808a40:	8804c03a 	cmpne	r2,r17,zero
  808a44:	1002541e 	bne	r2,zero,809398 <_dtoa_r+0x1284>
  808a48:	980b883a 	mov	r5,r19
  808a4c:	dd800517 	ldw	r22,20(sp)
  808a50:	dcc00615 	stw	r19,24(sp)
  808a54:	a700004c 	andi	fp,r20,1
  808a58:	2827883a 	mov	r19,r5
  808a5c:	d9000717 	ldw	r4,28(sp)
  808a60:	900b883a 	mov	r5,r18
  808a64:	0807efc0 	call	807efc <quorem>
  808a68:	d9000717 	ldw	r4,28(sp)
  808a6c:	d9400617 	ldw	r5,24(sp)
  808a70:	1023883a 	mov	r17,r2
  808a74:	8dc00c04 	addi	r23,r17,48
  808a78:	080acc40 	call	80acc4 <__mcmp>
  808a7c:	d9001617 	ldw	r4,88(sp)
  808a80:	900b883a 	mov	r5,r18
  808a84:	980d883a 	mov	r6,r19
  808a88:	1029883a 	mov	r20,r2
  808a8c:	080b3200 	call	80b320 <__mdiff>
  808a90:	102b883a 	mov	r21,r2
  808a94:	10800317 	ldw	r2,12(r2)
  808a98:	1001281e 	bne	r2,zero,808f3c <_dtoa_r+0xe28>
  808a9c:	d9000717 	ldw	r4,28(sp)
  808aa0:	a80b883a 	mov	r5,r21
  808aa4:	080acc40 	call	80acc4 <__mcmp>
  808aa8:	d9001617 	ldw	r4,88(sp)
  808aac:	1021883a 	mov	r16,r2
  808ab0:	a80b883a 	mov	r5,r21
  808ab4:	080ab680 	call	80ab68 <_Bfree>
  808ab8:	8000041e 	bne	r16,zero,808acc <_dtoa_r+0x9b8>
  808abc:	d8801717 	ldw	r2,92(sp)
  808ac0:	1000021e 	bne	r2,zero,808acc <_dtoa_r+0x9b8>
  808ac4:	e004c03a 	cmpne	r2,fp,zero
  808ac8:	10011726 	beq	r2,zero,808f28 <_dtoa_r+0xe14>
  808acc:	a0010616 	blt	r20,zero,808ee8 <_dtoa_r+0xdd4>
  808ad0:	a000041e 	bne	r20,zero,808ae4 <_dtoa_r+0x9d0>
  808ad4:	d8c01717 	ldw	r3,92(sp)
  808ad8:	1800021e 	bne	r3,zero,808ae4 <_dtoa_r+0x9d0>
  808adc:	e004c03a 	cmpne	r2,fp,zero
  808ae0:	10010126 	beq	r2,zero,808ee8 <_dtoa_r+0xdd4>
  808ae4:	04023d16 	blt	zero,r16,8093dc <_dtoa_r+0x12c8>
  808ae8:	b5c00005 	stb	r23,0(r22)
  808aec:	d9800517 	ldw	r6,20(sp)
  808af0:	d9000f17 	ldw	r4,60(sp)
  808af4:	b5800044 	addi	r22,r22,1
  808af8:	3105883a 	add	r2,r6,r4
  808afc:	b0806526 	beq	r22,r2,808c94 <_dtoa_r+0xb80>
  808b00:	d9400717 	ldw	r5,28(sp)
  808b04:	d9001617 	ldw	r4,88(sp)
  808b08:	01800284 	movi	r6,10
  808b0c:	000f883a 	mov	r7,zero
  808b10:	080b81c0 	call	80b81c <__multadd>
  808b14:	d8800715 	stw	r2,28(sp)
  808b18:	d8800617 	ldw	r2,24(sp)
  808b1c:	14c10c26 	beq	r2,r19,808f50 <_dtoa_r+0xe3c>
  808b20:	d9400617 	ldw	r5,24(sp)
  808b24:	d9001617 	ldw	r4,88(sp)
  808b28:	01800284 	movi	r6,10
  808b2c:	000f883a 	mov	r7,zero
  808b30:	080b81c0 	call	80b81c <__multadd>
  808b34:	d9001617 	ldw	r4,88(sp)
  808b38:	980b883a 	mov	r5,r19
  808b3c:	01800284 	movi	r6,10
  808b40:	000f883a 	mov	r7,zero
  808b44:	d8800615 	stw	r2,24(sp)
  808b48:	080b81c0 	call	80b81c <__multadd>
  808b4c:	1027883a 	mov	r19,r2
  808b50:	003fc206 	br	808a5c <_dtoa_r+0x948>
  808b54:	2445c83a 	sub	r2,r4,r17
  808b58:	a088983a 	sll	r4,r20,r2
  808b5c:	003e4b06 	br	80848c <_dtoa_r+0x378>
  808b60:	01bfffc4 	movi	r6,-1
  808b64:	00800044 	movi	r2,1
  808b68:	d9800e15 	stw	r6,56(sp)
  808b6c:	d9800f15 	stw	r6,60(sp)
  808b70:	d8800b15 	stw	r2,44(sp)
  808b74:	d8c01617 	ldw	r3,88(sp)
  808b78:	008005c4 	movi	r2,23
  808b7c:	18001115 	stw	zero,68(r3)
  808b80:	1580082e 	bgeu	r2,r22,808ba4 <_dtoa_r+0xa90>
  808b84:	00c00104 	movi	r3,4
  808b88:	0009883a 	mov	r4,zero
  808b8c:	18c7883a 	add	r3,r3,r3
  808b90:	18800504 	addi	r2,r3,20
  808b94:	21000044 	addi	r4,r4,1
  808b98:	b0bffc2e 	bgeu	r22,r2,808b8c <_dtoa_r+0xa78>
  808b9c:	d9801617 	ldw	r6,88(sp)
  808ba0:	31001115 	stw	r4,68(r6)
  808ba4:	dc000f17 	ldw	r16,60(sp)
  808ba8:	003e4b06 	br	8084d8 <_dtoa_r+0x3c4>
  808bac:	d9801717 	ldw	r6,92(sp)
  808bb0:	0023883a 	mov	r17,zero
  808bb4:	31bfff04 	addi	r6,r6,-4
  808bb8:	d9801715 	stw	r6,92(sp)
  808bbc:	003df806 	br	8083a0 <_dtoa_r+0x28c>
  808bc0:	00800804 	movi	r2,32
  808bc4:	10c9c83a 	sub	r4,r2,r3
  808bc8:	00c00104 	movi	r3,4
  808bcc:	19005a16 	blt	r3,r4,808d38 <_dtoa_r+0xc24>
  808bd0:	008000c4 	movi	r2,3
  808bd4:	113f7e16 	blt	r2,r4,8089d0 <_dtoa_r+0x8bc>
  808bd8:	20800704 	addi	r2,r4,28
  808bdc:	003f7506 	br	8089b4 <_dtoa_r+0x8a0>
  808be0:	d9801717 	ldw	r6,92(sp)
  808be4:	00800044 	movi	r2,1
  808be8:	1180a10e 	bge	r2,r6,808e70 <_dtoa_r+0xd5c>
  808bec:	d9800f17 	ldw	r6,60(sp)
  808bf0:	d8c01017 	ldw	r3,64(sp)
  808bf4:	30bfffc4 	addi	r2,r6,-1
  808bf8:	1881c616 	blt	r3,r2,809314 <_dtoa_r+0x1200>
  808bfc:	18a5c83a 	sub	r18,r3,r2
  808c00:	d8800f17 	ldw	r2,60(sp)
  808c04:	10026216 	blt	r2,zero,809590 <_dtoa_r+0x147c>
  808c08:	dc001117 	ldw	r16,68(sp)
  808c0c:	1007883a 	mov	r3,r2
  808c10:	d9800a17 	ldw	r6,40(sp)
  808c14:	d8801117 	ldw	r2,68(sp)
  808c18:	d9001617 	ldw	r4,88(sp)
  808c1c:	30cd883a 	add	r6,r6,r3
  808c20:	10c5883a 	add	r2,r2,r3
  808c24:	01400044 	movi	r5,1
  808c28:	d9800a15 	stw	r6,40(sp)
  808c2c:	d8801115 	stw	r2,68(sp)
  808c30:	080b7e00 	call	80b7e0 <__i2b>
  808c34:	1027883a 	mov	r19,r2
  808c38:	003f2506 	br	8088d0 <_dtoa_r+0x7bc>
  808c3c:	00c020b4 	movhi	r3,130
  808c40:	18e08f04 	addi	r3,r3,-32196
  808c44:	003d6706 	br	8081e4 <_dtoa_r+0xd0>
  808c48:	dd800517 	ldw	r22,20(sp)
  808c4c:	04000044 	movi	r16,1
  808c50:	00000706 	br	808c70 <_dtoa_r+0xb5c>
  808c54:	d9400717 	ldw	r5,28(sp)
  808c58:	d9001617 	ldw	r4,88(sp)
  808c5c:	01800284 	movi	r6,10
  808c60:	000f883a 	mov	r7,zero
  808c64:	080b81c0 	call	80b81c <__multadd>
  808c68:	d8800715 	stw	r2,28(sp)
  808c6c:	84000044 	addi	r16,r16,1
  808c70:	d9000717 	ldw	r4,28(sp)
  808c74:	900b883a 	mov	r5,r18
  808c78:	0807efc0 	call	807efc <quorem>
  808c7c:	15c00c04 	addi	r23,r2,48
  808c80:	b5c00005 	stb	r23,0(r22)
  808c84:	d8c00f17 	ldw	r3,60(sp)
  808c88:	b5800044 	addi	r22,r22,1
  808c8c:	80fff116 	blt	r16,r3,808c54 <_dtoa_r+0xb40>
  808c90:	d8000615 	stw	zero,24(sp)
  808c94:	d9400717 	ldw	r5,28(sp)
  808c98:	d9001617 	ldw	r4,88(sp)
  808c9c:	01800044 	movi	r6,1
  808ca0:	080b4ac0 	call	80b4ac <__lshift>
  808ca4:	1009883a 	mov	r4,r2
  808ca8:	900b883a 	mov	r5,r18
  808cac:	d8800715 	stw	r2,28(sp)
  808cb0:	080acc40 	call	80acc4 <__mcmp>
  808cb4:	00803c0e 	bge	zero,r2,808da8 <_dtoa_r+0xc94>
  808cb8:	b009883a 	mov	r4,r22
  808cbc:	213fffc4 	addi	r4,r4,-1
  808cc0:	21400003 	ldbu	r5,0(r4)
  808cc4:	00800e44 	movi	r2,57
  808cc8:	28c03fcc 	andi	r3,r5,255
  808ccc:	18c0201c 	xori	r3,r3,128
  808cd0:	18ffe004 	addi	r3,r3,-128
  808cd4:	1881981e 	bne	r3,r2,809338 <_dtoa_r+0x1224>
  808cd8:	d9800517 	ldw	r6,20(sp)
  808cdc:	21bff71e 	bne	r4,r6,808cbc <_dtoa_r+0xba8>
  808ce0:	d8800d17 	ldw	r2,52(sp)
  808ce4:	37000044 	addi	fp,r6,1
  808ce8:	10800044 	addi	r2,r2,1
  808cec:	d8800d15 	stw	r2,52(sp)
  808cf0:	00800c44 	movi	r2,49
  808cf4:	30800005 	stb	r2,0(r6)
  808cf8:	d9001617 	ldw	r4,88(sp)
  808cfc:	900b883a 	mov	r5,r18
  808d00:	080ab680 	call	80ab68 <_Bfree>
  808d04:	983ecd26 	beq	r19,zero,80883c <_dtoa_r+0x728>
  808d08:	d8c00617 	ldw	r3,24(sp)
  808d0c:	18000426 	beq	r3,zero,808d20 <_dtoa_r+0xc0c>
  808d10:	1cc00326 	beq	r3,r19,808d20 <_dtoa_r+0xc0c>
  808d14:	d9001617 	ldw	r4,88(sp)
  808d18:	180b883a 	mov	r5,r3
  808d1c:	080ab680 	call	80ab68 <_Bfree>
  808d20:	d9001617 	ldw	r4,88(sp)
  808d24:	980b883a 	mov	r5,r19
  808d28:	080ab680 	call	80ab68 <_Bfree>
  808d2c:	003ec306 	br	80883c <_dtoa_r+0x728>
  808d30:	1805883a 	mov	r2,r3
  808d34:	003eeb06 	br	8088e4 <_dtoa_r+0x7d0>
  808d38:	d9800a17 	ldw	r6,40(sp)
  808d3c:	d8c01117 	ldw	r3,68(sp)
  808d40:	20bfff04 	addi	r2,r4,-4
  808d44:	308d883a 	add	r6,r6,r2
  808d48:	1887883a 	add	r3,r3,r2
  808d4c:	80a1883a 	add	r16,r16,r2
  808d50:	d9800a15 	stw	r6,40(sp)
  808d54:	d8c01115 	stw	r3,68(sp)
  808d58:	003f1d06 	br	8089d0 <_dtoa_r+0x8bc>
  808d5c:	a03f0c1e 	bne	r20,zero,808990 <_dtoa_r+0x87c>
  808d60:	00800434 	movhi	r2,16
  808d64:	10bfffc4 	addi	r2,r2,-1
  808d68:	a884703a 	and	r2,r21,r2
  808d6c:	103f081e 	bne	r2,zero,808990 <_dtoa_r+0x87c>
  808d70:	a89ffc2c 	andhi	r2,r21,32752
  808d74:	103f0626 	beq	r2,zero,808990 <_dtoa_r+0x87c>
  808d78:	d8c01117 	ldw	r3,68(sp)
  808d7c:	d9000a17 	ldw	r4,40(sp)
  808d80:	18c00044 	addi	r3,r3,1
  808d84:	21000044 	addi	r4,r4,1
  808d88:	d8c01115 	stw	r3,68(sp)
  808d8c:	d9000a15 	stw	r4,40(sp)
  808d90:	003f0006 	br	808994 <_dtoa_r+0x880>
  808d94:	d9400717 	ldw	r5,28(sp)
  808d98:	d9001617 	ldw	r4,88(sp)
  808d9c:	080b91c0 	call	80b91c <__pow5mult>
  808da0:	d8800715 	stw	r2,28(sp)
  808da4:	003eed06 	br	80895c <_dtoa_r+0x848>
  808da8:	1000021e 	bne	r2,zero,808db4 <_dtoa_r+0xca0>
  808dac:	b880004c 	andi	r2,r23,1
  808db0:	103fc11e 	bne	r2,zero,808cb8 <_dtoa_r+0xba4>
  808db4:	b5bfffc4 	addi	r22,r22,-1
  808db8:	b0c00007 	ldb	r3,0(r22)
  808dbc:	00800c04 	movi	r2,48
  808dc0:	18bffc26 	beq	r3,r2,808db4 <_dtoa_r+0xca0>
  808dc4:	b7000044 	addi	fp,r22,1
  808dc8:	003fcb06 	br	808cf8 <_dtoa_r+0xbe4>
  808dcc:	d9800d17 	ldw	r6,52(sp)
  808dd0:	018fc83a 	sub	r7,zero,r6
  808dd4:	3801f726 	beq	r7,zero,8095b4 <_dtoa_r+0x14a0>
  808dd8:	398003cc 	andi	r6,r7,15
  808ddc:	300c90fa 	slli	r6,r6,3
  808de0:	014020b4 	movhi	r5,130
  808de4:	2960ad04 	addi	r5,r5,-32076
  808de8:	d9001217 	ldw	r4,72(sp)
  808dec:	314d883a 	add	r6,r6,r5
  808df0:	30c00117 	ldw	r3,4(r6)
  808df4:	30800017 	ldw	r2,0(r6)
  808df8:	d9401317 	ldw	r5,76(sp)
  808dfc:	3821d13a 	srai	r16,r7,4
  808e00:	100d883a 	mov	r6,r2
  808e04:	180f883a 	mov	r7,r3
  808e08:	08041c40 	call	8041c4 <__muldf3>
  808e0c:	1011883a 	mov	r8,r2
  808e10:	1813883a 	mov	r9,r3
  808e14:	1029883a 	mov	r20,r2
  808e18:	182b883a 	mov	r21,r3
  808e1c:	8001e526 	beq	r16,zero,8095b4 <_dtoa_r+0x14a0>
  808e20:	05800084 	movi	r22,2
  808e24:	044020b4 	movhi	r17,130
  808e28:	8c60df04 	addi	r17,r17,-31876
  808e2c:	8080004c 	andi	r2,r16,1
  808e30:	1005003a 	cmpeq	r2,r2,zero
  808e34:	1000081e 	bne	r2,zero,808e58 <_dtoa_r+0xd44>
  808e38:	89800017 	ldw	r6,0(r17)
  808e3c:	89c00117 	ldw	r7,4(r17)
  808e40:	480b883a 	mov	r5,r9
  808e44:	4009883a 	mov	r4,r8
  808e48:	08041c40 	call	8041c4 <__muldf3>
  808e4c:	1011883a 	mov	r8,r2
  808e50:	b5800044 	addi	r22,r22,1
  808e54:	1813883a 	mov	r9,r3
  808e58:	8021d07a 	srai	r16,r16,1
  808e5c:	8c400204 	addi	r17,r17,8
  808e60:	803ff21e 	bne	r16,zero,808e2c <_dtoa_r+0xd18>
  808e64:	4029883a 	mov	r20,r8
  808e68:	482b883a 	mov	r21,r9
  808e6c:	003dca06 	br	808598 <_dtoa_r+0x484>
  808e70:	d9000817 	ldw	r4,32(sp)
  808e74:	2005003a 	cmpeq	r2,r4,zero
  808e78:	1001f61e 	bne	r2,zero,809654 <_dtoa_r+0x1540>
  808e7c:	dc001117 	ldw	r16,68(sp)
  808e80:	dc801017 	ldw	r18,64(sp)
  808e84:	18c10cc4 	addi	r3,r3,1075
  808e88:	003f6106 	br	808c10 <_dtoa_r+0xafc>
  808e8c:	d8000b15 	stw	zero,44(sp)
  808e90:	d9802617 	ldw	r6,152(sp)
  808e94:	d8c00d17 	ldw	r3,52(sp)
  808e98:	30800044 	addi	r2,r6,1
  808e9c:	18ad883a 	add	r22,r3,r2
  808ea0:	b13fffc4 	addi	r4,r22,-1
  808ea4:	d9000e15 	stw	r4,56(sp)
  808ea8:	0581f60e 	bge	zero,r22,809684 <_dtoa_r+0x1570>
  808eac:	dd800f15 	stw	r22,60(sp)
  808eb0:	003f3006 	br	808b74 <_dtoa_r+0xa60>
  808eb4:	d8000b15 	stw	zero,44(sp)
  808eb8:	d9002617 	ldw	r4,152(sp)
  808ebc:	0101eb0e 	bge	zero,r4,80966c <_dtoa_r+0x1558>
  808ec0:	202d883a 	mov	r22,r4
  808ec4:	d9000e15 	stw	r4,56(sp)
  808ec8:	d9000f15 	stw	r4,60(sp)
  808ecc:	003f2906 	br	808b74 <_dtoa_r+0xa60>
  808ed0:	01800044 	movi	r6,1
  808ed4:	d9800b15 	stw	r6,44(sp)
  808ed8:	003ff706 	br	808eb8 <_dtoa_r+0xda4>
  808edc:	01000044 	movi	r4,1
  808ee0:	d9000b15 	stw	r4,44(sp)
  808ee4:	003fea06 	br	808e90 <_dtoa_r+0xd7c>
  808ee8:	04000c0e 	bge	zero,r16,808f1c <_dtoa_r+0xe08>
  808eec:	d9400717 	ldw	r5,28(sp)
  808ef0:	d9001617 	ldw	r4,88(sp)
  808ef4:	01800044 	movi	r6,1
  808ef8:	080b4ac0 	call	80b4ac <__lshift>
  808efc:	1009883a 	mov	r4,r2
  808f00:	900b883a 	mov	r5,r18
  808f04:	d8800715 	stw	r2,28(sp)
  808f08:	080acc40 	call	80acc4 <__mcmp>
  808f0c:	0081e00e 	bge	zero,r2,809690 <_dtoa_r+0x157c>
  808f10:	bdc00044 	addi	r23,r23,1
  808f14:	00800e84 	movi	r2,58
  808f18:	b881a226 	beq	r23,r2,8095a4 <_dtoa_r+0x1490>
  808f1c:	b7000044 	addi	fp,r22,1
  808f20:	b5c00005 	stb	r23,0(r22)
  808f24:	003f7406 	br	808cf8 <_dtoa_r+0xbe4>
  808f28:	00800e44 	movi	r2,57
  808f2c:	b8819d26 	beq	r23,r2,8095a4 <_dtoa_r+0x1490>
  808f30:	053ffa0e 	bge	zero,r20,808f1c <_dtoa_r+0xe08>
  808f34:	8dc00c44 	addi	r23,r17,49
  808f38:	003ff806 	br	808f1c <_dtoa_r+0xe08>
  808f3c:	d9001617 	ldw	r4,88(sp)
  808f40:	a80b883a 	mov	r5,r21
  808f44:	04000044 	movi	r16,1
  808f48:	080ab680 	call	80ab68 <_Bfree>
  808f4c:	003edf06 	br	808acc <_dtoa_r+0x9b8>
  808f50:	d9001617 	ldw	r4,88(sp)
  808f54:	980b883a 	mov	r5,r19
  808f58:	01800284 	movi	r6,10
  808f5c:	000f883a 	mov	r7,zero
  808f60:	080b81c0 	call	80b81c <__multadd>
  808f64:	1027883a 	mov	r19,r2
  808f68:	d8800615 	stw	r2,24(sp)
  808f6c:	003ebb06 	br	808a5c <_dtoa_r+0x948>
  808f70:	d9801117 	ldw	r6,68(sp)
  808f74:	d8800d17 	ldw	r2,52(sp)
  808f78:	d8000915 	stw	zero,36(sp)
  808f7c:	308dc83a 	sub	r6,r6,r2
  808f80:	0087c83a 	sub	r3,zero,r2
  808f84:	d9801115 	stw	r6,68(sp)
  808f88:	d8c01015 	stw	r3,64(sp)
  808f8c:	003cfe06 	br	808388 <_dtoa_r+0x274>
  808f90:	018dc83a 	sub	r6,zero,r6
  808f94:	d9801115 	stw	r6,68(sp)
  808f98:	d8000a15 	stw	zero,40(sp)
  808f9c:	003cf306 	br	80836c <_dtoa_r+0x258>
  808fa0:	d9000d17 	ldw	r4,52(sp)
  808fa4:	08049780 	call	804978 <__floatsidf>
  808fa8:	880b883a 	mov	r5,r17
  808fac:	8009883a 	mov	r4,r16
  808fb0:	180f883a 	mov	r7,r3
  808fb4:	100d883a 	mov	r6,r2
  808fb8:	080d3e80 	call	80d3e8 <__nedf2>
  808fbc:	103ce126 	beq	r2,zero,808344 <_dtoa_r+0x230>
  808fc0:	d9800d17 	ldw	r6,52(sp)
  808fc4:	31bfffc4 	addi	r6,r6,-1
  808fc8:	d9800d15 	stw	r6,52(sp)
  808fcc:	003cdd06 	br	808344 <_dtoa_r+0x230>
  808fd0:	d9000717 	ldw	r4,28(sp)
  808fd4:	900b883a 	mov	r5,r18
  808fd8:	080acc40 	call	80acc4 <__mcmp>
  808fdc:	103e8d0e 	bge	r2,zero,808a14 <_dtoa_r+0x900>
  808fe0:	d9400717 	ldw	r5,28(sp)
  808fe4:	d9001617 	ldw	r4,88(sp)
  808fe8:	01800284 	movi	r6,10
  808fec:	000f883a 	mov	r7,zero
  808ff0:	080b81c0 	call	80b81c <__multadd>
  808ff4:	d9800d17 	ldw	r6,52(sp)
  808ff8:	d8800715 	stw	r2,28(sp)
  808ffc:	31bfffc4 	addi	r6,r6,-1
  809000:	d9800d15 	stw	r6,52(sp)
  809004:	b001a71e 	bne	r22,zero,8096a4 <_dtoa_r+0x1590>
  809008:	d8800e17 	ldw	r2,56(sp)
  80900c:	d8800f15 	stw	r2,60(sp)
  809010:	003e8006 	br	808a14 <_dtoa_r+0x900>
  809014:	90800417 	ldw	r2,16(r18)
  809018:	1085883a 	add	r2,r2,r2
  80901c:	1085883a 	add	r2,r2,r2
  809020:	1485883a 	add	r2,r2,r18
  809024:	11000417 	ldw	r4,16(r2)
  809028:	080ab900 	call	80ab90 <__hi0bits>
  80902c:	00c00804 	movi	r3,32
  809030:	1887c83a 	sub	r3,r3,r2
  809034:	003e5a06 	br	8089a0 <_dtoa_r+0x88c>
  809038:	d9400717 	ldw	r5,28(sp)
  80903c:	d9801017 	ldw	r6,64(sp)
  809040:	d9001617 	ldw	r4,88(sp)
  809044:	080b91c0 	call	80b91c <__pow5mult>
  809048:	d8800715 	stw	r2,28(sp)
  80904c:	003e4306 	br	80895c <_dtoa_r+0x848>
  809050:	d9800f17 	ldw	r6,60(sp)
  809054:	d8800d17 	ldw	r2,52(sp)
  809058:	d9800315 	stw	r6,12(sp)
  80905c:	d8800415 	stw	r2,16(sp)
  809060:	d8c00b17 	ldw	r3,44(sp)
  809064:	1805003a 	cmpeq	r2,r3,zero
  809068:	1000e21e 	bne	r2,zero,8093f4 <_dtoa_r+0x12e0>
  80906c:	d9000317 	ldw	r4,12(sp)
  809070:	0005883a 	mov	r2,zero
  809074:	00cff834 	movhi	r3,16352
  809078:	200c90fa 	slli	r6,r4,3
  80907c:	010020b4 	movhi	r4,130
  809080:	2120ad04 	addi	r4,r4,-32076
  809084:	180b883a 	mov	r5,r3
  809088:	310d883a 	add	r6,r6,r4
  80908c:	327fff17 	ldw	r9,-4(r6)
  809090:	323ffe17 	ldw	r8,-8(r6)
  809094:	1009883a 	mov	r4,r2
  809098:	480f883a 	mov	r7,r9
  80909c:	400d883a 	mov	r6,r8
  8090a0:	08045880 	call	804588 <__divdf3>
  8090a4:	180b883a 	mov	r5,r3
  8090a8:	b00d883a 	mov	r6,r22
  8090ac:	b80f883a 	mov	r7,r23
  8090b0:	1009883a 	mov	r4,r2
  8090b4:	08040d00 	call	8040d0 <__subdf3>
  8090b8:	a80b883a 	mov	r5,r21
  8090bc:	a009883a 	mov	r4,r20
  8090c0:	d8c01915 	stw	r3,100(sp)
  8090c4:	d8801815 	stw	r2,96(sp)
  8090c8:	0804a700 	call	804a70 <__fixdfsi>
  8090cc:	1009883a 	mov	r4,r2
  8090d0:	1027883a 	mov	r19,r2
  8090d4:	08049780 	call	804978 <__floatsidf>
  8090d8:	a80b883a 	mov	r5,r21
  8090dc:	a009883a 	mov	r4,r20
  8090e0:	180f883a 	mov	r7,r3
  8090e4:	100d883a 	mov	r6,r2
  8090e8:	08040d00 	call	8040d0 <__subdf3>
  8090ec:	d9801817 	ldw	r6,96(sp)
  8090f0:	1823883a 	mov	r17,r3
  8090f4:	d8801415 	stw	r2,80(sp)
  8090f8:	302d883a 	mov	r22,r6
  8090fc:	d9800517 	ldw	r6,20(sp)
  809100:	9cc00c04 	addi	r19,r19,48
  809104:	dc401515 	stw	r17,84(sp)
  809108:	d8c01917 	ldw	r3,100(sp)
  80910c:	34c00005 	stb	r19,0(r6)
  809110:	d8800517 	ldw	r2,20(sp)
  809114:	d9401917 	ldw	r5,100(sp)
  809118:	d9801417 	ldw	r6,80(sp)
  80911c:	b009883a 	mov	r4,r22
  809120:	880f883a 	mov	r7,r17
  809124:	182f883a 	mov	r23,r3
  809128:	17000044 	addi	fp,r2,1
  80912c:	08048680 	call	804868 <__gtdf2>
  809130:	00804e16 	blt	zero,r2,80926c <_dtoa_r+0x1158>
  809134:	d9801417 	ldw	r6,80(sp)
  809138:	0005883a 	mov	r2,zero
  80913c:	00cffc34 	movhi	r3,16368
  809140:	180b883a 	mov	r5,r3
  809144:	880f883a 	mov	r7,r17
  809148:	1009883a 	mov	r4,r2
  80914c:	08040d00 	call	8040d0 <__subdf3>
  809150:	d9401917 	ldw	r5,100(sp)
  809154:	180f883a 	mov	r7,r3
  809158:	b009883a 	mov	r4,r22
  80915c:	100d883a 	mov	r6,r2
  809160:	08048680 	call	804868 <__gtdf2>
  809164:	00bda216 	blt	zero,r2,8087f0 <_dtoa_r+0x6dc>
  809168:	d8c00317 	ldw	r3,12(sp)
  80916c:	00800044 	movi	r2,1
  809170:	10c01216 	blt	r2,r3,8091bc <_dtoa_r+0x10a8>
  809174:	003d4506 	br	80868c <_dtoa_r+0x578>
  809178:	d9801417 	ldw	r6,80(sp)
  80917c:	0005883a 	mov	r2,zero
  809180:	00cffc34 	movhi	r3,16368
  809184:	180b883a 	mov	r5,r3
  809188:	880f883a 	mov	r7,r17
  80918c:	1009883a 	mov	r4,r2
  809190:	08040d00 	call	8040d0 <__subdf3>
  809194:	d9c01b17 	ldw	r7,108(sp)
  809198:	180b883a 	mov	r5,r3
  80919c:	1009883a 	mov	r4,r2
  8091a0:	b00d883a 	mov	r6,r22
  8091a4:	080d4700 	call	80d470 <__ltdf2>
  8091a8:	103d9116 	blt	r2,zero,8087f0 <_dtoa_r+0x6dc>
  8091ac:	d9800517 	ldw	r6,20(sp)
  8091b0:	d9000317 	ldw	r4,12(sp)
  8091b4:	3105883a 	add	r2,r6,r4
  8091b8:	e0bd3426 	beq	fp,r2,80868c <_dtoa_r+0x578>
  8091bc:	04500934 	movhi	r17,16420
  8091c0:	0021883a 	mov	r16,zero
  8091c4:	b80b883a 	mov	r5,r23
  8091c8:	b009883a 	mov	r4,r22
  8091cc:	800d883a 	mov	r6,r16
  8091d0:	880f883a 	mov	r7,r17
  8091d4:	08041c40 	call	8041c4 <__muldf3>
  8091d8:	d9401517 	ldw	r5,84(sp)
  8091dc:	d9001417 	ldw	r4,80(sp)
  8091e0:	880f883a 	mov	r7,r17
  8091e4:	000d883a 	mov	r6,zero
  8091e8:	d8801a15 	stw	r2,104(sp)
  8091ec:	d8c01b15 	stw	r3,108(sp)
  8091f0:	08041c40 	call	8041c4 <__muldf3>
  8091f4:	180b883a 	mov	r5,r3
  8091f8:	1009883a 	mov	r4,r2
  8091fc:	1823883a 	mov	r17,r3
  809200:	1021883a 	mov	r16,r2
  809204:	0804a700 	call	804a70 <__fixdfsi>
  809208:	1009883a 	mov	r4,r2
  80920c:	102b883a 	mov	r21,r2
  809210:	08049780 	call	804978 <__floatsidf>
  809214:	880b883a 	mov	r5,r17
  809218:	8009883a 	mov	r4,r16
  80921c:	180f883a 	mov	r7,r3
  809220:	100d883a 	mov	r6,r2
  809224:	08040d00 	call	8040d0 <__subdf3>
  809228:	1021883a 	mov	r16,r2
  80922c:	d9001b17 	ldw	r4,108(sp)
  809230:	1823883a 	mov	r17,r3
  809234:	dc001415 	stw	r16,80(sp)
  809238:	ad400c04 	addi	r21,r21,48
  80923c:	dc401515 	stw	r17,84(sp)
  809240:	d8801a17 	ldw	r2,104(sp)
  809244:	e5400005 	stb	r21,0(fp)
  809248:	202f883a 	mov	r23,r4
  80924c:	d9c01b17 	ldw	r7,108(sp)
  809250:	d9001417 	ldw	r4,80(sp)
  809254:	880b883a 	mov	r5,r17
  809258:	100d883a 	mov	r6,r2
  80925c:	102d883a 	mov	r22,r2
  809260:	e7000044 	addi	fp,fp,1
  809264:	080d4700 	call	80d470 <__ltdf2>
  809268:	103fc30e 	bge	r2,zero,809178 <_dtoa_r+0x1064>
  80926c:	d9000417 	ldw	r4,16(sp)
  809270:	d9000d15 	stw	r4,52(sp)
  809274:	003d7106 	br	80883c <_dtoa_r+0x728>
  809278:	d9801717 	ldw	r6,92(sp)
  80927c:	00800084 	movi	r2,2
  809280:	11bde60e 	bge	r2,r6,808a1c <_dtoa_r+0x908>
  809284:	203cfb1e 	bne	r4,zero,808674 <_dtoa_r+0x560>
  809288:	d9001617 	ldw	r4,88(sp)
  80928c:	900b883a 	mov	r5,r18
  809290:	01800144 	movi	r6,5
  809294:	000f883a 	mov	r7,zero
  809298:	080b81c0 	call	80b81c <__multadd>
  80929c:	d9000717 	ldw	r4,28(sp)
  8092a0:	100b883a 	mov	r5,r2
  8092a4:	1025883a 	mov	r18,r2
  8092a8:	080acc40 	call	80acc4 <__mcmp>
  8092ac:	00bcf10e 	bge	zero,r2,808674 <_dtoa_r+0x560>
  8092b0:	d8c00d17 	ldw	r3,52(sp)
  8092b4:	d9000517 	ldw	r4,20(sp)
  8092b8:	d8000615 	stw	zero,24(sp)
  8092bc:	18c00044 	addi	r3,r3,1
  8092c0:	d8c00d15 	stw	r3,52(sp)
  8092c4:	00800c44 	movi	r2,49
  8092c8:	27000044 	addi	fp,r4,1
  8092cc:	20800005 	stb	r2,0(r4)
  8092d0:	003e8906 	br	808cf8 <_dtoa_r+0xbe4>
  8092d4:	d8c00517 	ldw	r3,20(sp)
  8092d8:	003bc206 	br	8081e4 <_dtoa_r+0xd0>
  8092dc:	018020b4 	movhi	r6,130
  8092e0:	31a0df04 	addi	r6,r6,-31876
  8092e4:	30c00917 	ldw	r3,36(r6)
  8092e8:	30800817 	ldw	r2,32(r6)
  8092ec:	d9001217 	ldw	r4,72(sp)
  8092f0:	d9401317 	ldw	r5,76(sp)
  8092f4:	180f883a 	mov	r7,r3
  8092f8:	100d883a 	mov	r6,r2
  8092fc:	08045880 	call	804588 <__divdf3>
  809300:	948003cc 	andi	r18,r18,15
  809304:	058000c4 	movi	r22,3
  809308:	1029883a 	mov	r20,r2
  80930c:	182b883a 	mov	r21,r3
  809310:	003c8906 	br	808538 <_dtoa_r+0x424>
  809314:	d9001017 	ldw	r4,64(sp)
  809318:	d9800917 	ldw	r6,36(sp)
  80931c:	0025883a 	mov	r18,zero
  809320:	1105c83a 	sub	r2,r2,r4
  809324:	2089883a 	add	r4,r4,r2
  809328:	308d883a 	add	r6,r6,r2
  80932c:	d9001015 	stw	r4,64(sp)
  809330:	d9800915 	stw	r6,36(sp)
  809334:	003e3206 	br	808c00 <_dtoa_r+0xaec>
  809338:	28800044 	addi	r2,r5,1
  80933c:	27000044 	addi	fp,r4,1
  809340:	20800005 	stb	r2,0(r4)
  809344:	003e6c06 	br	808cf8 <_dtoa_r+0xbe4>
  809348:	d8800f17 	ldw	r2,60(sp)
  80934c:	00bce016 	blt	zero,r2,8086d0 <_dtoa_r+0x5bc>
  809350:	d9800f17 	ldw	r6,60(sp)
  809354:	303cc51e 	bne	r6,zero,80866c <_dtoa_r+0x558>
  809358:	0005883a 	mov	r2,zero
  80935c:	00d00534 	movhi	r3,16404
  809360:	980b883a 	mov	r5,r19
  809364:	180f883a 	mov	r7,r3
  809368:	9009883a 	mov	r4,r18
  80936c:	100d883a 	mov	r6,r2
  809370:	08041c40 	call	8041c4 <__muldf3>
  809374:	180b883a 	mov	r5,r3
  809378:	a80f883a 	mov	r7,r21
  80937c:	1009883a 	mov	r4,r2
  809380:	a00d883a 	mov	r6,r20
  809384:	08048f00 	call	8048f0 <__gedf2>
  809388:	103cb80e 	bge	r2,zero,80866c <_dtoa_r+0x558>
  80938c:	0027883a 	mov	r19,zero
  809390:	0025883a 	mov	r18,zero
  809394:	003fc606 	br	8092b0 <_dtoa_r+0x119c>
  809398:	99400117 	ldw	r5,4(r19)
  80939c:	d9001617 	ldw	r4,88(sp)
  8093a0:	080b0e80 	call	80b0e8 <_Balloc>
  8093a4:	99800417 	ldw	r6,16(r19)
  8093a8:	11000304 	addi	r4,r2,12
  8093ac:	99400304 	addi	r5,r19,12
  8093b0:	318d883a 	add	r6,r6,r6
  8093b4:	318d883a 	add	r6,r6,r6
  8093b8:	31800204 	addi	r6,r6,8
  8093bc:	1023883a 	mov	r17,r2
  8093c0:	080a9500 	call	80a950 <memcpy>
  8093c4:	d9001617 	ldw	r4,88(sp)
  8093c8:	880b883a 	mov	r5,r17
  8093cc:	01800044 	movi	r6,1
  8093d0:	080b4ac0 	call	80b4ac <__lshift>
  8093d4:	100b883a 	mov	r5,r2
  8093d8:	003d9c06 	br	808a4c <_dtoa_r+0x938>
  8093dc:	00800e44 	movi	r2,57
  8093e0:	b8807026 	beq	r23,r2,8095a4 <_dtoa_r+0x1490>
  8093e4:	b8800044 	addi	r2,r23,1
  8093e8:	b7000044 	addi	fp,r22,1
  8093ec:	b0800005 	stb	r2,0(r22)
  8093f0:	003e4106 	br	808cf8 <_dtoa_r+0xbe4>
  8093f4:	d8800317 	ldw	r2,12(sp)
  8093f8:	018020b4 	movhi	r6,130
  8093fc:	31a0ad04 	addi	r6,r6,-32076
  809400:	b009883a 	mov	r4,r22
  809404:	100e90fa 	slli	r7,r2,3
  809408:	b80b883a 	mov	r5,r23
  80940c:	398f883a 	add	r7,r7,r6
  809410:	38bffe17 	ldw	r2,-8(r7)
  809414:	d9800517 	ldw	r6,20(sp)
  809418:	38ffff17 	ldw	r3,-4(r7)
  80941c:	37000044 	addi	fp,r6,1
  809420:	180f883a 	mov	r7,r3
  809424:	100d883a 	mov	r6,r2
  809428:	08041c40 	call	8041c4 <__muldf3>
  80942c:	a80b883a 	mov	r5,r21
  809430:	a009883a 	mov	r4,r20
  809434:	182f883a 	mov	r23,r3
  809438:	102d883a 	mov	r22,r2
  80943c:	0804a700 	call	804a70 <__fixdfsi>
  809440:	1009883a 	mov	r4,r2
  809444:	1027883a 	mov	r19,r2
  809448:	08049780 	call	804978 <__floatsidf>
  80944c:	a80b883a 	mov	r5,r21
  809450:	a009883a 	mov	r4,r20
  809454:	180f883a 	mov	r7,r3
  809458:	100d883a 	mov	r6,r2
  80945c:	08040d00 	call	8040d0 <__subdf3>
  809460:	180b883a 	mov	r5,r3
  809464:	d8c00517 	ldw	r3,20(sp)
  809468:	9cc00c04 	addi	r19,r19,48
  80946c:	1009883a 	mov	r4,r2
  809470:	1cc00005 	stb	r19,0(r3)
  809474:	2021883a 	mov	r16,r4
  809478:	d9000317 	ldw	r4,12(sp)
  80947c:	00800044 	movi	r2,1
  809480:	2823883a 	mov	r17,r5
  809484:	20802226 	beq	r4,r2,809510 <_dtoa_r+0x13fc>
  809488:	1029883a 	mov	r20,r2
  80948c:	0005883a 	mov	r2,zero
  809490:	00d00934 	movhi	r3,16420
  809494:	180f883a 	mov	r7,r3
  809498:	100d883a 	mov	r6,r2
  80949c:	880b883a 	mov	r5,r17
  8094a0:	8009883a 	mov	r4,r16
  8094a4:	08041c40 	call	8041c4 <__muldf3>
  8094a8:	180b883a 	mov	r5,r3
  8094ac:	1009883a 	mov	r4,r2
  8094b0:	1823883a 	mov	r17,r3
  8094b4:	1021883a 	mov	r16,r2
  8094b8:	0804a700 	call	804a70 <__fixdfsi>
  8094bc:	1009883a 	mov	r4,r2
  8094c0:	102b883a 	mov	r21,r2
  8094c4:	08049780 	call	804978 <__floatsidf>
  8094c8:	880b883a 	mov	r5,r17
  8094cc:	8009883a 	mov	r4,r16
  8094d0:	180f883a 	mov	r7,r3
  8094d4:	100d883a 	mov	r6,r2
  8094d8:	08040d00 	call	8040d0 <__subdf3>
  8094dc:	180b883a 	mov	r5,r3
  8094e0:	d8c00517 	ldw	r3,20(sp)
  8094e4:	1009883a 	mov	r4,r2
  8094e8:	ad400c04 	addi	r21,r21,48
  8094ec:	1d05883a 	add	r2,r3,r20
  8094f0:	15400005 	stb	r21,0(r2)
  8094f4:	2021883a 	mov	r16,r4
  8094f8:	d9000317 	ldw	r4,12(sp)
  8094fc:	a5000044 	addi	r20,r20,1
  809500:	2823883a 	mov	r17,r5
  809504:	a13fe11e 	bne	r20,r4,80948c <_dtoa_r+0x1378>
  809508:	e505883a 	add	r2,fp,r20
  80950c:	173fffc4 	addi	fp,r2,-1
  809510:	0025883a 	mov	r18,zero
  809514:	04cff834 	movhi	r19,16352
  809518:	b009883a 	mov	r4,r22
  80951c:	b80b883a 	mov	r5,r23
  809520:	900d883a 	mov	r6,r18
  809524:	980f883a 	mov	r7,r19
  809528:	08041500 	call	804150 <__adddf3>
  80952c:	180b883a 	mov	r5,r3
  809530:	1009883a 	mov	r4,r2
  809534:	800d883a 	mov	r6,r16
  809538:	880f883a 	mov	r7,r17
  80953c:	080d4700 	call	80d470 <__ltdf2>
  809540:	103cab16 	blt	r2,zero,8087f0 <_dtoa_r+0x6dc>
  809544:	0009883a 	mov	r4,zero
  809548:	980b883a 	mov	r5,r19
  80954c:	b80f883a 	mov	r7,r23
  809550:	b00d883a 	mov	r6,r22
  809554:	08040d00 	call	8040d0 <__subdf3>
  809558:	180b883a 	mov	r5,r3
  80955c:	880f883a 	mov	r7,r17
  809560:	1009883a 	mov	r4,r2
  809564:	800d883a 	mov	r6,r16
  809568:	08048680 	call	804868 <__gtdf2>
  80956c:	00bc470e 	bge	zero,r2,80868c <_dtoa_r+0x578>
  809570:	00c00c04 	movi	r3,48
  809574:	e73fffc4 	addi	fp,fp,-1
  809578:	e0800007 	ldb	r2,0(fp)
  80957c:	10fffd26 	beq	r2,r3,809574 <_dtoa_r+0x1460>
  809580:	d9800417 	ldw	r6,16(sp)
  809584:	e7000044 	addi	fp,fp,1
  809588:	d9800d15 	stw	r6,52(sp)
  80958c:	003cab06 	br	80883c <_dtoa_r+0x728>
  809590:	d8c00f17 	ldw	r3,60(sp)
  809594:	d9001117 	ldw	r4,68(sp)
  809598:	20e1c83a 	sub	r16,r4,r3
  80959c:	0007883a 	mov	r3,zero
  8095a0:	003d9b06 	br	808c10 <_dtoa_r+0xafc>
  8095a4:	00800e44 	movi	r2,57
  8095a8:	b0800005 	stb	r2,0(r22)
  8095ac:	b5800044 	addi	r22,r22,1
  8095b0:	003dc106 	br	808cb8 <_dtoa_r+0xba4>
  8095b4:	05800084 	movi	r22,2
  8095b8:	003bf706 	br	808598 <_dtoa_r+0x484>
  8095bc:	d9000f17 	ldw	r4,60(sp)
  8095c0:	013c000e 	bge	zero,r4,8085c4 <_dtoa_r+0x4b0>
  8095c4:	d9800e17 	ldw	r6,56(sp)
  8095c8:	01bc300e 	bge	zero,r6,80868c <_dtoa_r+0x578>
  8095cc:	0005883a 	mov	r2,zero
  8095d0:	00d00934 	movhi	r3,16420
  8095d4:	a80b883a 	mov	r5,r21
  8095d8:	180f883a 	mov	r7,r3
  8095dc:	a009883a 	mov	r4,r20
  8095e0:	100d883a 	mov	r6,r2
  8095e4:	08041c40 	call	8041c4 <__muldf3>
  8095e8:	b1000044 	addi	r4,r22,1
  8095ec:	1021883a 	mov	r16,r2
  8095f0:	1823883a 	mov	r17,r3
  8095f4:	08049780 	call	804978 <__floatsidf>
  8095f8:	880b883a 	mov	r5,r17
  8095fc:	8009883a 	mov	r4,r16
  809600:	180f883a 	mov	r7,r3
  809604:	100d883a 	mov	r6,r2
  809608:	08041c40 	call	8041c4 <__muldf3>
  80960c:	0011883a 	mov	r8,zero
  809610:	02500734 	movhi	r9,16412
  809614:	180b883a 	mov	r5,r3
  809618:	480f883a 	mov	r7,r9
  80961c:	1009883a 	mov	r4,r2
  809620:	400d883a 	mov	r6,r8
  809624:	08041500 	call	804150 <__adddf3>
  809628:	102d883a 	mov	r22,r2
  80962c:	00bf3034 	movhi	r2,64704
  809630:	10ef883a 	add	r23,r2,r3
  809634:	d8800d17 	ldw	r2,52(sp)
  809638:	d8c00e17 	ldw	r3,56(sp)
  80963c:	8029883a 	mov	r20,r16
  809640:	10bfffc4 	addi	r2,r2,-1
  809644:	882b883a 	mov	r21,r17
  809648:	d8800415 	stw	r2,16(sp)
  80964c:	d8c00315 	stw	r3,12(sp)
  809650:	003e8306 	br	809060 <_dtoa_r+0xf4c>
  809654:	d8800117 	ldw	r2,4(sp)
  809658:	dc001117 	ldw	r16,68(sp)
  80965c:	dc801017 	ldw	r18,64(sp)
  809660:	00c00d84 	movi	r3,54
  809664:	1887c83a 	sub	r3,r3,r2
  809668:	003d6906 	br	808c10 <_dtoa_r+0xafc>
  80966c:	01800044 	movi	r6,1
  809670:	3021883a 	mov	r16,r6
  809674:	d9800f15 	stw	r6,60(sp)
  809678:	d9802615 	stw	r6,152(sp)
  80967c:	d9800e15 	stw	r6,56(sp)
  809680:	003b9306 	br	8084d0 <_dtoa_r+0x3bc>
  809684:	b021883a 	mov	r16,r22
  809688:	dd800f15 	stw	r22,60(sp)
  80968c:	003b9006 	br	8084d0 <_dtoa_r+0x3bc>
  809690:	103e221e 	bne	r2,zero,808f1c <_dtoa_r+0xe08>
  809694:	b880004c 	andi	r2,r23,1
  809698:	1005003a 	cmpeq	r2,r2,zero
  80969c:	103e1f1e 	bne	r2,zero,808f1c <_dtoa_r+0xe08>
  8096a0:	003e1b06 	br	808f10 <_dtoa_r+0xdfc>
  8096a4:	d9001617 	ldw	r4,88(sp)
  8096a8:	980b883a 	mov	r5,r19
  8096ac:	01800284 	movi	r6,10
  8096b0:	000f883a 	mov	r7,zero
  8096b4:	080b81c0 	call	80b81c <__multadd>
  8096b8:	d8c00e17 	ldw	r3,56(sp)
  8096bc:	1027883a 	mov	r19,r2
  8096c0:	d8c00f15 	stw	r3,60(sp)
  8096c4:	003cd306 	br	808a14 <_dtoa_r+0x900>

008096c8 <_fflush_r>:
  8096c8:	defffb04 	addi	sp,sp,-20
  8096cc:	dcc00315 	stw	r19,12(sp)
  8096d0:	dc800215 	stw	r18,8(sp)
  8096d4:	dfc00415 	stw	ra,16(sp)
  8096d8:	dc400115 	stw	r17,4(sp)
  8096dc:	dc000015 	stw	r16,0(sp)
  8096e0:	2027883a 	mov	r19,r4
  8096e4:	2825883a 	mov	r18,r5
  8096e8:	20000226 	beq	r4,zero,8096f4 <_fflush_r+0x2c>
  8096ec:	20800e17 	ldw	r2,56(r4)
  8096f0:	10005626 	beq	r2,zero,80984c <_fflush_r+0x184>
  8096f4:	9100030b 	ldhu	r4,12(r18)
  8096f8:	20ffffcc 	andi	r3,r4,65535
  8096fc:	18e0001c 	xori	r3,r3,32768
  809700:	18e00004 	addi	r3,r3,-32768
  809704:	1880020c 	andi	r2,r3,8
  809708:	1000261e 	bne	r2,zero,8097a4 <_fflush_r+0xdc>
  80970c:	90c00117 	ldw	r3,4(r18)
  809710:	20820014 	ori	r2,r4,2048
  809714:	9080030d 	sth	r2,12(r18)
  809718:	1009883a 	mov	r4,r2
  80971c:	00c0400e 	bge	zero,r3,809820 <_fflush_r+0x158>
  809720:	92000a17 	ldw	r8,40(r18)
  809724:	40004026 	beq	r8,zero,809828 <_fflush_r+0x160>
  809728:	2084000c 	andi	r2,r4,4096
  80972c:	10005326 	beq	r2,zero,80987c <_fflush_r+0x1b4>
  809730:	94001417 	ldw	r16,80(r18)
  809734:	9080030b 	ldhu	r2,12(r18)
  809738:	1080010c 	andi	r2,r2,4
  80973c:	1000481e 	bne	r2,zero,809860 <_fflush_r+0x198>
  809740:	91400717 	ldw	r5,28(r18)
  809744:	9809883a 	mov	r4,r19
  809748:	800d883a 	mov	r6,r16
  80974c:	000f883a 	mov	r7,zero
  809750:	403ee83a 	callr	r8
  809754:	8080261e 	bne	r16,r2,8097f0 <_fflush_r+0x128>
  809758:	9080030b 	ldhu	r2,12(r18)
  80975c:	91000417 	ldw	r4,16(r18)
  809760:	90000115 	stw	zero,4(r18)
  809764:	10bdffcc 	andi	r2,r2,63487
  809768:	10ffffcc 	andi	r3,r2,65535
  80976c:	18c4000c 	andi	r3,r3,4096
  809770:	9080030d 	sth	r2,12(r18)
  809774:	91000015 	stw	r4,0(r18)
  809778:	18002b26 	beq	r3,zero,809828 <_fflush_r+0x160>
  80977c:	0007883a 	mov	r3,zero
  809780:	1805883a 	mov	r2,r3
  809784:	94001415 	stw	r16,80(r18)
  809788:	dfc00417 	ldw	ra,16(sp)
  80978c:	dcc00317 	ldw	r19,12(sp)
  809790:	dc800217 	ldw	r18,8(sp)
  809794:	dc400117 	ldw	r17,4(sp)
  809798:	dc000017 	ldw	r16,0(sp)
  80979c:	dec00504 	addi	sp,sp,20
  8097a0:	f800283a 	ret
  8097a4:	94400417 	ldw	r17,16(r18)
  8097a8:	88001f26 	beq	r17,zero,809828 <_fflush_r+0x160>
  8097ac:	90800017 	ldw	r2,0(r18)
  8097b0:	18c000cc 	andi	r3,r3,3
  8097b4:	94400015 	stw	r17,0(r18)
  8097b8:	1461c83a 	sub	r16,r2,r17
  8097bc:	18002526 	beq	r3,zero,809854 <_fflush_r+0x18c>
  8097c0:	0005883a 	mov	r2,zero
  8097c4:	90800215 	stw	r2,8(r18)
  8097c8:	0400170e 	bge	zero,r16,809828 <_fflush_r+0x160>
  8097cc:	90c00917 	ldw	r3,36(r18)
  8097d0:	91400717 	ldw	r5,28(r18)
  8097d4:	880d883a 	mov	r6,r17
  8097d8:	800f883a 	mov	r7,r16
  8097dc:	9809883a 	mov	r4,r19
  8097e0:	183ee83a 	callr	r3
  8097e4:	88a3883a 	add	r17,r17,r2
  8097e8:	80a1c83a 	sub	r16,r16,r2
  8097ec:	00bff616 	blt	zero,r2,8097c8 <_fflush_r+0x100>
  8097f0:	9080030b 	ldhu	r2,12(r18)
  8097f4:	00ffffc4 	movi	r3,-1
  8097f8:	10801014 	ori	r2,r2,64
  8097fc:	9080030d 	sth	r2,12(r18)
  809800:	1805883a 	mov	r2,r3
  809804:	dfc00417 	ldw	ra,16(sp)
  809808:	dcc00317 	ldw	r19,12(sp)
  80980c:	dc800217 	ldw	r18,8(sp)
  809810:	dc400117 	ldw	r17,4(sp)
  809814:	dc000017 	ldw	r16,0(sp)
  809818:	dec00504 	addi	sp,sp,20
  80981c:	f800283a 	ret
  809820:	90800f17 	ldw	r2,60(r18)
  809824:	00bfbe16 	blt	zero,r2,809720 <_fflush_r+0x58>
  809828:	0007883a 	mov	r3,zero
  80982c:	1805883a 	mov	r2,r3
  809830:	dfc00417 	ldw	ra,16(sp)
  809834:	dcc00317 	ldw	r19,12(sp)
  809838:	dc800217 	ldw	r18,8(sp)
  80983c:	dc400117 	ldw	r17,4(sp)
  809840:	dc000017 	ldw	r16,0(sp)
  809844:	dec00504 	addi	sp,sp,20
  809848:	f800283a 	ret
  80984c:	08099600 	call	809960 <__sinit>
  809850:	003fa806 	br	8096f4 <_fflush_r+0x2c>
  809854:	90800517 	ldw	r2,20(r18)
  809858:	90800215 	stw	r2,8(r18)
  80985c:	003fda06 	br	8097c8 <_fflush_r+0x100>
  809860:	90800117 	ldw	r2,4(r18)
  809864:	90c00c17 	ldw	r3,48(r18)
  809868:	80a1c83a 	sub	r16,r16,r2
  80986c:	183fb426 	beq	r3,zero,809740 <_fflush_r+0x78>
  809870:	90800f17 	ldw	r2,60(r18)
  809874:	80a1c83a 	sub	r16,r16,r2
  809878:	003fb106 	br	809740 <_fflush_r+0x78>
  80987c:	91400717 	ldw	r5,28(r18)
  809880:	9809883a 	mov	r4,r19
  809884:	000d883a 	mov	r6,zero
  809888:	01c00044 	movi	r7,1
  80988c:	403ee83a 	callr	r8
  809890:	1021883a 	mov	r16,r2
  809894:	00bfffc4 	movi	r2,-1
  809898:	80800226 	beq	r16,r2,8098a4 <_fflush_r+0x1dc>
  80989c:	92000a17 	ldw	r8,40(r18)
  8098a0:	003fa406 	br	809734 <_fflush_r+0x6c>
  8098a4:	98c00017 	ldw	r3,0(r19)
  8098a8:	00800744 	movi	r2,29
  8098ac:	18bfde26 	beq	r3,r2,809828 <_fflush_r+0x160>
  8098b0:	9080030b 	ldhu	r2,12(r18)
  8098b4:	8007883a 	mov	r3,r16
  8098b8:	10801014 	ori	r2,r2,64
  8098bc:	9080030d 	sth	r2,12(r18)
  8098c0:	003fcf06 	br	809800 <_fflush_r+0x138>

008098c4 <fflush>:
  8098c4:	01402074 	movhi	r5,129
  8098c8:	2965b204 	addi	r5,r5,-26936
  8098cc:	2007883a 	mov	r3,r4
  8098d0:	20000526 	beq	r4,zero,8098e8 <fflush+0x24>
  8098d4:	008020b4 	movhi	r2,130
  8098d8:	10a81904 	addi	r2,r2,-24476
  8098dc:	11000017 	ldw	r4,0(r2)
  8098e0:	180b883a 	mov	r5,r3
  8098e4:	08096c81 	jmpi	8096c8 <_fflush_r>
  8098e8:	008020b4 	movhi	r2,130
  8098ec:	10a81a04 	addi	r2,r2,-24472
  8098f0:	11000017 	ldw	r4,0(r2)
  8098f4:	080a4941 	jmpi	80a494 <_fwalk_reent>

008098f8 <std>:
  8098f8:	00802074 	movhi	r2,129
  8098fc:	10b07004 	addi	r2,r2,-15936
  809900:	20800b15 	stw	r2,44(r4)
  809904:	00802074 	movhi	r2,129
  809908:	10b0ab04 	addi	r2,r2,-15700
  80990c:	20800815 	stw	r2,32(r4)
  809910:	00c02074 	movhi	r3,129
  809914:	18f08c04 	addi	r3,r3,-15824
  809918:	00802074 	movhi	r2,129
  80991c:	10b07204 	addi	r2,r2,-15928
  809920:	2140030d 	sth	r5,12(r4)
  809924:	2180038d 	sth	r6,14(r4)
  809928:	20c00915 	stw	r3,36(r4)
  80992c:	20800a15 	stw	r2,40(r4)
  809930:	20000015 	stw	zero,0(r4)
  809934:	20000115 	stw	zero,4(r4)
  809938:	20000215 	stw	zero,8(r4)
  80993c:	20000415 	stw	zero,16(r4)
  809940:	20000515 	stw	zero,20(r4)
  809944:	20000615 	stw	zero,24(r4)
  809948:	21000715 	stw	r4,28(r4)
  80994c:	f800283a 	ret

00809950 <__sfp_lock_acquire>:
  809950:	f800283a 	ret

00809954 <__sfp_lock_release>:
  809954:	f800283a 	ret

00809958 <__sinit_lock_acquire>:
  809958:	f800283a 	ret

0080995c <__sinit_lock_release>:
  80995c:	f800283a 	ret

00809960 <__sinit>:
  809960:	20800e17 	ldw	r2,56(r4)
  809964:	defffd04 	addi	sp,sp,-12
  809968:	dc400115 	stw	r17,4(sp)
  80996c:	dc000015 	stw	r16,0(sp)
  809970:	dfc00215 	stw	ra,8(sp)
  809974:	04400044 	movi	r17,1
  809978:	01400104 	movi	r5,4
  80997c:	000d883a 	mov	r6,zero
  809980:	2021883a 	mov	r16,r4
  809984:	2200bb04 	addi	r8,r4,748
  809988:	200f883a 	mov	r7,r4
  80998c:	10000526 	beq	r2,zero,8099a4 <__sinit+0x44>
  809990:	dfc00217 	ldw	ra,8(sp)
  809994:	dc400117 	ldw	r17,4(sp)
  809998:	dc000017 	ldw	r16,0(sp)
  80999c:	dec00304 	addi	sp,sp,12
  8099a0:	f800283a 	ret
  8099a4:	21000117 	ldw	r4,4(r4)
  8099a8:	00802074 	movhi	r2,129
  8099ac:	10a69104 	addi	r2,r2,-26044
  8099b0:	00c000c4 	movi	r3,3
  8099b4:	80800f15 	stw	r2,60(r16)
  8099b8:	80c0b915 	stw	r3,740(r16)
  8099bc:	8200ba15 	stw	r8,744(r16)
  8099c0:	84400e15 	stw	r17,56(r16)
  8099c4:	8000b815 	stw	zero,736(r16)
  8099c8:	08098f80 	call	8098f8 <std>
  8099cc:	81000217 	ldw	r4,8(r16)
  8099d0:	880d883a 	mov	r6,r17
  8099d4:	800f883a 	mov	r7,r16
  8099d8:	01400284 	movi	r5,10
  8099dc:	08098f80 	call	8098f8 <std>
  8099e0:	81000317 	ldw	r4,12(r16)
  8099e4:	800f883a 	mov	r7,r16
  8099e8:	01400484 	movi	r5,18
  8099ec:	01800084 	movi	r6,2
  8099f0:	dfc00217 	ldw	ra,8(sp)
  8099f4:	dc400117 	ldw	r17,4(sp)
  8099f8:	dc000017 	ldw	r16,0(sp)
  8099fc:	dec00304 	addi	sp,sp,12
  809a00:	08098f81 	jmpi	8098f8 <std>

00809a04 <__fp_lock>:
  809a04:	0005883a 	mov	r2,zero
  809a08:	f800283a 	ret

00809a0c <__fp_unlock>:
  809a0c:	0005883a 	mov	r2,zero
  809a10:	f800283a 	ret

00809a14 <__fp_unlock_all>:
  809a14:	008020b4 	movhi	r2,130
  809a18:	10a81904 	addi	r2,r2,-24476
  809a1c:	11000017 	ldw	r4,0(r2)
  809a20:	01402074 	movhi	r5,129
  809a24:	29668304 	addi	r5,r5,-26100
  809a28:	080a55c1 	jmpi	80a55c <_fwalk>

00809a2c <__fp_lock_all>:
  809a2c:	008020b4 	movhi	r2,130
  809a30:	10a81904 	addi	r2,r2,-24476
  809a34:	11000017 	ldw	r4,0(r2)
  809a38:	01402074 	movhi	r5,129
  809a3c:	29668104 	addi	r5,r5,-26108
  809a40:	080a55c1 	jmpi	80a55c <_fwalk>

00809a44 <_cleanup_r>:
  809a44:	01402074 	movhi	r5,129
  809a48:	29719d04 	addi	r5,r5,-14732
  809a4c:	080a55c1 	jmpi	80a55c <_fwalk>

00809a50 <_cleanup>:
  809a50:	008020b4 	movhi	r2,130
  809a54:	10a81a04 	addi	r2,r2,-24472
  809a58:	11000017 	ldw	r4,0(r2)
  809a5c:	0809a441 	jmpi	809a44 <_cleanup_r>

00809a60 <__sfmoreglue>:
  809a60:	defffc04 	addi	sp,sp,-16
  809a64:	dc400115 	stw	r17,4(sp)
  809a68:	2c401724 	muli	r17,r5,92
  809a6c:	dc800215 	stw	r18,8(sp)
  809a70:	2825883a 	mov	r18,r5
  809a74:	89400304 	addi	r5,r17,12
  809a78:	dc000015 	stw	r16,0(sp)
  809a7c:	dfc00315 	stw	ra,12(sp)
  809a80:	08055480 	call	805548 <_malloc_r>
  809a84:	0021883a 	mov	r16,zero
  809a88:	880d883a 	mov	r6,r17
  809a8c:	000b883a 	mov	r5,zero
  809a90:	10000626 	beq	r2,zero,809aac <__sfmoreglue+0x4c>
  809a94:	11000304 	addi	r4,r2,12
  809a98:	14800115 	stw	r18,4(r2)
  809a9c:	10000015 	stw	zero,0(r2)
  809aa0:	11000215 	stw	r4,8(r2)
  809aa4:	1021883a 	mov	r16,r2
  809aa8:	080aad00 	call	80aad0 <memset>
  809aac:	8005883a 	mov	r2,r16
  809ab0:	dfc00317 	ldw	ra,12(sp)
  809ab4:	dc800217 	ldw	r18,8(sp)
  809ab8:	dc400117 	ldw	r17,4(sp)
  809abc:	dc000017 	ldw	r16,0(sp)
  809ac0:	dec00404 	addi	sp,sp,16
  809ac4:	f800283a 	ret

00809ac8 <__sfp>:
  809ac8:	defffd04 	addi	sp,sp,-12
  809acc:	008020b4 	movhi	r2,130
  809ad0:	10a81a04 	addi	r2,r2,-24472
  809ad4:	dc000015 	stw	r16,0(sp)
  809ad8:	14000017 	ldw	r16,0(r2)
  809adc:	dc400115 	stw	r17,4(sp)
  809ae0:	dfc00215 	stw	ra,8(sp)
  809ae4:	80800e17 	ldw	r2,56(r16)
  809ae8:	2023883a 	mov	r17,r4
  809aec:	10002626 	beq	r2,zero,809b88 <__sfp+0xc0>
  809af0:	8400b804 	addi	r16,r16,736
  809af4:	80800117 	ldw	r2,4(r16)
  809af8:	81000217 	ldw	r4,8(r16)
  809afc:	10ffffc4 	addi	r3,r2,-1
  809b00:	18000916 	blt	r3,zero,809b28 <__sfp+0x60>
  809b04:	2080030f 	ldh	r2,12(r4)
  809b08:	10000b26 	beq	r2,zero,809b38 <__sfp+0x70>
  809b0c:	017fffc4 	movi	r5,-1
  809b10:	00000206 	br	809b1c <__sfp+0x54>
  809b14:	2080030f 	ldh	r2,12(r4)
  809b18:	10000726 	beq	r2,zero,809b38 <__sfp+0x70>
  809b1c:	18ffffc4 	addi	r3,r3,-1
  809b20:	21001704 	addi	r4,r4,92
  809b24:	197ffb1e 	bne	r3,r5,809b14 <__sfp+0x4c>
  809b28:	80800017 	ldw	r2,0(r16)
  809b2c:	10001926 	beq	r2,zero,809b94 <__sfp+0xcc>
  809b30:	1021883a 	mov	r16,r2
  809b34:	003fef06 	br	809af4 <__sfp+0x2c>
  809b38:	00bfffc4 	movi	r2,-1
  809b3c:	00c00044 	movi	r3,1
  809b40:	2080038d 	sth	r2,14(r4)
  809b44:	20c0030d 	sth	r3,12(r4)
  809b48:	20000015 	stw	zero,0(r4)
  809b4c:	20000215 	stw	zero,8(r4)
  809b50:	20000115 	stw	zero,4(r4)
  809b54:	20000415 	stw	zero,16(r4)
  809b58:	20000515 	stw	zero,20(r4)
  809b5c:	20000615 	stw	zero,24(r4)
  809b60:	20000c15 	stw	zero,48(r4)
  809b64:	20000d15 	stw	zero,52(r4)
  809b68:	20001115 	stw	zero,68(r4)
  809b6c:	20001215 	stw	zero,72(r4)
  809b70:	2005883a 	mov	r2,r4
  809b74:	dfc00217 	ldw	ra,8(sp)
  809b78:	dc400117 	ldw	r17,4(sp)
  809b7c:	dc000017 	ldw	r16,0(sp)
  809b80:	dec00304 	addi	sp,sp,12
  809b84:	f800283a 	ret
  809b88:	8009883a 	mov	r4,r16
  809b8c:	08099600 	call	809960 <__sinit>
  809b90:	003fd706 	br	809af0 <__sfp+0x28>
  809b94:	8809883a 	mov	r4,r17
  809b98:	01400104 	movi	r5,4
  809b9c:	0809a600 	call	809a60 <__sfmoreglue>
  809ba0:	80800015 	stw	r2,0(r16)
  809ba4:	103fe21e 	bne	r2,zero,809b30 <__sfp+0x68>
  809ba8:	00800304 	movi	r2,12
  809bac:	0009883a 	mov	r4,zero
  809bb0:	88800015 	stw	r2,0(r17)
  809bb4:	003fee06 	br	809b70 <__sfp+0xa8>

00809bb8 <_malloc_trim_r>:
  809bb8:	defffb04 	addi	sp,sp,-20
  809bbc:	dcc00315 	stw	r19,12(sp)
  809bc0:	04c020b4 	movhi	r19,130
  809bc4:	9ce13804 	addi	r19,r19,-31520
  809bc8:	dc800215 	stw	r18,8(sp)
  809bcc:	dc400115 	stw	r17,4(sp)
  809bd0:	dc000015 	stw	r16,0(sp)
  809bd4:	2823883a 	mov	r17,r5
  809bd8:	2025883a 	mov	r18,r4
  809bdc:	dfc00415 	stw	ra,16(sp)
  809be0:	080ded00 	call	80ded0 <__malloc_lock>
  809be4:	98800217 	ldw	r2,8(r19)
  809be8:	9009883a 	mov	r4,r18
  809bec:	000b883a 	mov	r5,zero
  809bf0:	10c00117 	ldw	r3,4(r2)
  809bf4:	00bfff04 	movi	r2,-4
  809bf8:	18a0703a 	and	r16,r3,r2
  809bfc:	8463c83a 	sub	r17,r16,r17
  809c00:	8c43fbc4 	addi	r17,r17,4079
  809c04:	8822d33a 	srli	r17,r17,12
  809c08:	0083ffc4 	movi	r2,4095
  809c0c:	8c7fffc4 	addi	r17,r17,-1
  809c10:	8822933a 	slli	r17,r17,12
  809c14:	1440060e 	bge	r2,r17,809c30 <_malloc_trim_r+0x78>
  809c18:	0805db40 	call	805db4 <_sbrk_r>
  809c1c:	98c00217 	ldw	r3,8(r19)
  809c20:	9009883a 	mov	r4,r18
  809c24:	044bc83a 	sub	r5,zero,r17
  809c28:	80c7883a 	add	r3,r16,r3
  809c2c:	10c00926 	beq	r2,r3,809c54 <_malloc_trim_r+0x9c>
  809c30:	080def00 	call	80def0 <__malloc_unlock>
  809c34:	0005883a 	mov	r2,zero
  809c38:	dfc00417 	ldw	ra,16(sp)
  809c3c:	dcc00317 	ldw	r19,12(sp)
  809c40:	dc800217 	ldw	r18,8(sp)
  809c44:	dc400117 	ldw	r17,4(sp)
  809c48:	dc000017 	ldw	r16,0(sp)
  809c4c:	dec00504 	addi	sp,sp,20
  809c50:	f800283a 	ret
  809c54:	9009883a 	mov	r4,r18
  809c58:	0805db40 	call	805db4 <_sbrk_r>
  809c5c:	844dc83a 	sub	r6,r16,r17
  809c60:	00ffffc4 	movi	r3,-1
  809c64:	9009883a 	mov	r4,r18
  809c68:	000b883a 	mov	r5,zero
  809c6c:	01c020b4 	movhi	r7,130
  809c70:	39ef3b04 	addi	r7,r7,-17172
  809c74:	31800054 	ori	r6,r6,1
  809c78:	10c00926 	beq	r2,r3,809ca0 <_malloc_trim_r+0xe8>
  809c7c:	38800017 	ldw	r2,0(r7)
  809c80:	98c00217 	ldw	r3,8(r19)
  809c84:	9009883a 	mov	r4,r18
  809c88:	1445c83a 	sub	r2,r2,r17
  809c8c:	38800015 	stw	r2,0(r7)
  809c90:	19800115 	stw	r6,4(r3)
  809c94:	080def00 	call	80def0 <__malloc_unlock>
  809c98:	00800044 	movi	r2,1
  809c9c:	003fe606 	br	809c38 <_malloc_trim_r+0x80>
  809ca0:	0805db40 	call	805db4 <_sbrk_r>
  809ca4:	99800217 	ldw	r6,8(r19)
  809ca8:	100f883a 	mov	r7,r2
  809cac:	9009883a 	mov	r4,r18
  809cb0:	1187c83a 	sub	r3,r2,r6
  809cb4:	008003c4 	movi	r2,15
  809cb8:	19400054 	ori	r5,r3,1
  809cbc:	10ffdc0e 	bge	r2,r3,809c30 <_malloc_trim_r+0x78>
  809cc0:	008020b4 	movhi	r2,130
  809cc4:	10a81804 	addi	r2,r2,-24480
  809cc8:	10c00017 	ldw	r3,0(r2)
  809ccc:	008020b4 	movhi	r2,130
  809cd0:	10af3b04 	addi	r2,r2,-17172
  809cd4:	31400115 	stw	r5,4(r6)
  809cd8:	38c7c83a 	sub	r3,r7,r3
  809cdc:	10c00015 	stw	r3,0(r2)
  809ce0:	003fd306 	br	809c30 <_malloc_trim_r+0x78>

00809ce4 <_free_r>:
  809ce4:	defffd04 	addi	sp,sp,-12
  809ce8:	dc400115 	stw	r17,4(sp)
  809cec:	dc000015 	stw	r16,0(sp)
  809cf0:	dfc00215 	stw	ra,8(sp)
  809cf4:	2821883a 	mov	r16,r5
  809cf8:	2023883a 	mov	r17,r4
  809cfc:	28005a26 	beq	r5,zero,809e68 <_free_r+0x184>
  809d00:	080ded00 	call	80ded0 <__malloc_lock>
  809d04:	823ffe04 	addi	r8,r16,-8
  809d08:	41400117 	ldw	r5,4(r8)
  809d0c:	00bfff84 	movi	r2,-2
  809d10:	028020b4 	movhi	r10,130
  809d14:	52a13804 	addi	r10,r10,-31520
  809d18:	288e703a 	and	r7,r5,r2
  809d1c:	41cd883a 	add	r6,r8,r7
  809d20:	30c00117 	ldw	r3,4(r6)
  809d24:	51000217 	ldw	r4,8(r10)
  809d28:	00bfff04 	movi	r2,-4
  809d2c:	1892703a 	and	r9,r3,r2
  809d30:	5017883a 	mov	r11,r10
  809d34:	31006726 	beq	r6,r4,809ed4 <_free_r+0x1f0>
  809d38:	2880004c 	andi	r2,r5,1
  809d3c:	1005003a 	cmpeq	r2,r2,zero
  809d40:	32400115 	stw	r9,4(r6)
  809d44:	10001a1e 	bne	r2,zero,809db0 <_free_r+0xcc>
  809d48:	000b883a 	mov	r5,zero
  809d4c:	3247883a 	add	r3,r6,r9
  809d50:	18800117 	ldw	r2,4(r3)
  809d54:	1080004c 	andi	r2,r2,1
  809d58:	1000231e 	bne	r2,zero,809de8 <_free_r+0x104>
  809d5c:	280ac03a 	cmpne	r5,r5,zero
  809d60:	3a4f883a 	add	r7,r7,r9
  809d64:	2800451e 	bne	r5,zero,809e7c <_free_r+0x198>
  809d68:	31000217 	ldw	r4,8(r6)
  809d6c:	008020b4 	movhi	r2,130
  809d70:	10a13a04 	addi	r2,r2,-31512
  809d74:	20807b26 	beq	r4,r2,809f64 <_free_r+0x280>
  809d78:	30800317 	ldw	r2,12(r6)
  809d7c:	3a07883a 	add	r3,r7,r8
  809d80:	19c00015 	stw	r7,0(r3)
  809d84:	11000215 	stw	r4,8(r2)
  809d88:	20800315 	stw	r2,12(r4)
  809d8c:	38800054 	ori	r2,r7,1
  809d90:	40800115 	stw	r2,4(r8)
  809d94:	28001a26 	beq	r5,zero,809e00 <_free_r+0x11c>
  809d98:	8809883a 	mov	r4,r17
  809d9c:	dfc00217 	ldw	ra,8(sp)
  809da0:	dc400117 	ldw	r17,4(sp)
  809da4:	dc000017 	ldw	r16,0(sp)
  809da8:	dec00304 	addi	sp,sp,12
  809dac:	080def01 	jmpi	80def0 <__malloc_unlock>
  809db0:	80bffe17 	ldw	r2,-8(r16)
  809db4:	50c00204 	addi	r3,r10,8
  809db8:	4091c83a 	sub	r8,r8,r2
  809dbc:	41000217 	ldw	r4,8(r8)
  809dc0:	388f883a 	add	r7,r7,r2
  809dc4:	20c06126 	beq	r4,r3,809f4c <_free_r+0x268>
  809dc8:	40800317 	ldw	r2,12(r8)
  809dcc:	3247883a 	add	r3,r6,r9
  809dd0:	000b883a 	mov	r5,zero
  809dd4:	11000215 	stw	r4,8(r2)
  809dd8:	20800315 	stw	r2,12(r4)
  809ddc:	18800117 	ldw	r2,4(r3)
  809de0:	1080004c 	andi	r2,r2,1
  809de4:	103fdd26 	beq	r2,zero,809d5c <_free_r+0x78>
  809de8:	38800054 	ori	r2,r7,1
  809dec:	3a07883a 	add	r3,r7,r8
  809df0:	280ac03a 	cmpne	r5,r5,zero
  809df4:	40800115 	stw	r2,4(r8)
  809df8:	19c00015 	stw	r7,0(r3)
  809dfc:	283fe61e 	bne	r5,zero,809d98 <_free_r+0xb4>
  809e00:	00807fc4 	movi	r2,511
  809e04:	11c01f2e 	bgeu	r2,r7,809e84 <_free_r+0x1a0>
  809e08:	3806d27a 	srli	r3,r7,9
  809e0c:	1800481e 	bne	r3,zero,809f30 <_free_r+0x24c>
  809e10:	3804d0fa 	srli	r2,r7,3
  809e14:	100690fa 	slli	r3,r2,3
  809e18:	1acd883a 	add	r6,r3,r11
  809e1c:	31400217 	ldw	r5,8(r6)
  809e20:	31405926 	beq	r6,r5,809f88 <_free_r+0x2a4>
  809e24:	28800117 	ldw	r2,4(r5)
  809e28:	00ffff04 	movi	r3,-4
  809e2c:	10c4703a 	and	r2,r2,r3
  809e30:	3880022e 	bgeu	r7,r2,809e3c <_free_r+0x158>
  809e34:	29400217 	ldw	r5,8(r5)
  809e38:	317ffa1e 	bne	r6,r5,809e24 <_free_r+0x140>
  809e3c:	29800317 	ldw	r6,12(r5)
  809e40:	41800315 	stw	r6,12(r8)
  809e44:	41400215 	stw	r5,8(r8)
  809e48:	8809883a 	mov	r4,r17
  809e4c:	2a000315 	stw	r8,12(r5)
  809e50:	32000215 	stw	r8,8(r6)
  809e54:	dfc00217 	ldw	ra,8(sp)
  809e58:	dc400117 	ldw	r17,4(sp)
  809e5c:	dc000017 	ldw	r16,0(sp)
  809e60:	dec00304 	addi	sp,sp,12
  809e64:	080def01 	jmpi	80def0 <__malloc_unlock>
  809e68:	dfc00217 	ldw	ra,8(sp)
  809e6c:	dc400117 	ldw	r17,4(sp)
  809e70:	dc000017 	ldw	r16,0(sp)
  809e74:	dec00304 	addi	sp,sp,12
  809e78:	f800283a 	ret
  809e7c:	31000217 	ldw	r4,8(r6)
  809e80:	003fbd06 	br	809d78 <_free_r+0x94>
  809e84:	3806d0fa 	srli	r3,r7,3
  809e88:	00800044 	movi	r2,1
  809e8c:	51400117 	ldw	r5,4(r10)
  809e90:	180890fa 	slli	r4,r3,3
  809e94:	1807d0ba 	srai	r3,r3,2
  809e98:	22c9883a 	add	r4,r4,r11
  809e9c:	21800217 	ldw	r6,8(r4)
  809ea0:	10c4983a 	sll	r2,r2,r3
  809ea4:	41000315 	stw	r4,12(r8)
  809ea8:	41800215 	stw	r6,8(r8)
  809eac:	288ab03a 	or	r5,r5,r2
  809eb0:	22000215 	stw	r8,8(r4)
  809eb4:	8809883a 	mov	r4,r17
  809eb8:	51400115 	stw	r5,4(r10)
  809ebc:	32000315 	stw	r8,12(r6)
  809ec0:	dfc00217 	ldw	ra,8(sp)
  809ec4:	dc400117 	ldw	r17,4(sp)
  809ec8:	dc000017 	ldw	r16,0(sp)
  809ecc:	dec00304 	addi	sp,sp,12
  809ed0:	080def01 	jmpi	80def0 <__malloc_unlock>
  809ed4:	2880004c 	andi	r2,r5,1
  809ed8:	3a4d883a 	add	r6,r7,r9
  809edc:	1000071e 	bne	r2,zero,809efc <_free_r+0x218>
  809ee0:	80bffe17 	ldw	r2,-8(r16)
  809ee4:	4091c83a 	sub	r8,r8,r2
  809ee8:	41000317 	ldw	r4,12(r8)
  809eec:	40c00217 	ldw	r3,8(r8)
  809ef0:	308d883a 	add	r6,r6,r2
  809ef4:	20c00215 	stw	r3,8(r4)
  809ef8:	19000315 	stw	r4,12(r3)
  809efc:	008020b4 	movhi	r2,130
  809f00:	10a81704 	addi	r2,r2,-24484
  809f04:	11000017 	ldw	r4,0(r2)
  809f08:	30c00054 	ori	r3,r6,1
  809f0c:	52000215 	stw	r8,8(r10)
  809f10:	40c00115 	stw	r3,4(r8)
  809f14:	313fa036 	bltu	r6,r4,809d98 <_free_r+0xb4>
  809f18:	008020b4 	movhi	r2,130
  809f1c:	10af1f04 	addi	r2,r2,-17284
  809f20:	11400017 	ldw	r5,0(r2)
  809f24:	8809883a 	mov	r4,r17
  809f28:	0809bb80 	call	809bb8 <_malloc_trim_r>
  809f2c:	003f9a06 	br	809d98 <_free_r+0xb4>
  809f30:	00800104 	movi	r2,4
  809f34:	10c0072e 	bgeu	r2,r3,809f54 <_free_r+0x270>
  809f38:	00800504 	movi	r2,20
  809f3c:	10c01936 	bltu	r2,r3,809fa4 <_free_r+0x2c0>
  809f40:	188016c4 	addi	r2,r3,91
  809f44:	100690fa 	slli	r3,r2,3
  809f48:	003fb306 	br	809e18 <_free_r+0x134>
  809f4c:	01400044 	movi	r5,1
  809f50:	003f7e06 	br	809d4c <_free_r+0x68>
  809f54:	3804d1ba 	srli	r2,r7,6
  809f58:	10800e04 	addi	r2,r2,56
  809f5c:	100690fa 	slli	r3,r2,3
  809f60:	003fad06 	br	809e18 <_free_r+0x134>
  809f64:	22000315 	stw	r8,12(r4)
  809f68:	22000215 	stw	r8,8(r4)
  809f6c:	3a05883a 	add	r2,r7,r8
  809f70:	38c00054 	ori	r3,r7,1
  809f74:	11c00015 	stw	r7,0(r2)
  809f78:	41000215 	stw	r4,8(r8)
  809f7c:	40c00115 	stw	r3,4(r8)
  809f80:	41000315 	stw	r4,12(r8)
  809f84:	003f8406 	br	809d98 <_free_r+0xb4>
  809f88:	1005d0ba 	srai	r2,r2,2
  809f8c:	00c00044 	movi	r3,1
  809f90:	51000117 	ldw	r4,4(r10)
  809f94:	1886983a 	sll	r3,r3,r2
  809f98:	20c8b03a 	or	r4,r4,r3
  809f9c:	51000115 	stw	r4,4(r10)
  809fa0:	003fa706 	br	809e40 <_free_r+0x15c>
  809fa4:	00801504 	movi	r2,84
  809fa8:	10c00436 	bltu	r2,r3,809fbc <_free_r+0x2d8>
  809fac:	3804d33a 	srli	r2,r7,12
  809fb0:	10801b84 	addi	r2,r2,110
  809fb4:	100690fa 	slli	r3,r2,3
  809fb8:	003f9706 	br	809e18 <_free_r+0x134>
  809fbc:	00805504 	movi	r2,340
  809fc0:	10c00436 	bltu	r2,r3,809fd4 <_free_r+0x2f0>
  809fc4:	3804d3fa 	srli	r2,r7,15
  809fc8:	10801dc4 	addi	r2,r2,119
  809fcc:	100690fa 	slli	r3,r2,3
  809fd0:	003f9106 	br	809e18 <_free_r+0x134>
  809fd4:	00815504 	movi	r2,1364
  809fd8:	10c0032e 	bgeu	r2,r3,809fe8 <_free_r+0x304>
  809fdc:	00801f84 	movi	r2,126
  809fe0:	00c0fc04 	movi	r3,1008
  809fe4:	003f8c06 	br	809e18 <_free_r+0x134>
  809fe8:	3804d4ba 	srli	r2,r7,18
  809fec:	10801f04 	addi	r2,r2,124
  809ff0:	100690fa 	slli	r3,r2,3
  809ff4:	003f8806 	br	809e18 <_free_r+0x134>

00809ff8 <__sfvwrite_r>:
  809ff8:	30800217 	ldw	r2,8(r6)
  809ffc:	defff504 	addi	sp,sp,-44
  80a000:	df000915 	stw	fp,36(sp)
  80a004:	dd800715 	stw	r22,28(sp)
  80a008:	dc800315 	stw	r18,12(sp)
  80a00c:	dfc00a15 	stw	ra,40(sp)
  80a010:	ddc00815 	stw	r23,32(sp)
  80a014:	dd400615 	stw	r21,24(sp)
  80a018:	dd000515 	stw	r20,20(sp)
  80a01c:	dcc00415 	stw	r19,16(sp)
  80a020:	dc400215 	stw	r17,8(sp)
  80a024:	dc000115 	stw	r16,4(sp)
  80a028:	302d883a 	mov	r22,r6
  80a02c:	2039883a 	mov	fp,r4
  80a030:	2825883a 	mov	r18,r5
  80a034:	10001c26 	beq	r2,zero,80a0a8 <__sfvwrite_r+0xb0>
  80a038:	29c0030b 	ldhu	r7,12(r5)
  80a03c:	3880020c 	andi	r2,r7,8
  80a040:	10002726 	beq	r2,zero,80a0e0 <__sfvwrite_r+0xe8>
  80a044:	28800417 	ldw	r2,16(r5)
  80a048:	10002526 	beq	r2,zero,80a0e0 <__sfvwrite_r+0xe8>
  80a04c:	3880008c 	andi	r2,r7,2
  80a050:	b5400017 	ldw	r21,0(r22)
  80a054:	10002826 	beq	r2,zero,80a0f8 <__sfvwrite_r+0x100>
  80a058:	0021883a 	mov	r16,zero
  80a05c:	0023883a 	mov	r17,zero
  80a060:	880d883a 	mov	r6,r17
  80a064:	e009883a 	mov	r4,fp
  80a068:	00810004 	movi	r2,1024
  80a06c:	80006e26 	beq	r16,zero,80a228 <__sfvwrite_r+0x230>
  80a070:	800f883a 	mov	r7,r16
  80a074:	91400717 	ldw	r5,28(r18)
  80a078:	1400012e 	bgeu	r2,r16,80a080 <__sfvwrite_r+0x88>
  80a07c:	100f883a 	mov	r7,r2
  80a080:	90c00917 	ldw	r3,36(r18)
  80a084:	183ee83a 	callr	r3
  80a088:	1007883a 	mov	r3,r2
  80a08c:	80a1c83a 	sub	r16,r16,r2
  80a090:	88a3883a 	add	r17,r17,r2
  80a094:	00806d0e 	bge	zero,r2,80a24c <__sfvwrite_r+0x254>
  80a098:	b0800217 	ldw	r2,8(r22)
  80a09c:	10c5c83a 	sub	r2,r2,r3
  80a0a0:	b0800215 	stw	r2,8(r22)
  80a0a4:	103fee1e 	bne	r2,zero,80a060 <__sfvwrite_r+0x68>
  80a0a8:	0009883a 	mov	r4,zero
  80a0ac:	2005883a 	mov	r2,r4
  80a0b0:	dfc00a17 	ldw	ra,40(sp)
  80a0b4:	df000917 	ldw	fp,36(sp)
  80a0b8:	ddc00817 	ldw	r23,32(sp)
  80a0bc:	dd800717 	ldw	r22,28(sp)
  80a0c0:	dd400617 	ldw	r21,24(sp)
  80a0c4:	dd000517 	ldw	r20,20(sp)
  80a0c8:	dcc00417 	ldw	r19,16(sp)
  80a0cc:	dc800317 	ldw	r18,12(sp)
  80a0d0:	dc400217 	ldw	r17,8(sp)
  80a0d4:	dc000117 	ldw	r16,4(sp)
  80a0d8:	dec00b04 	addi	sp,sp,44
  80a0dc:	f800283a 	ret
  80a0e0:	0807dc00 	call	807dc0 <__swsetup_r>
  80a0e4:	1000e41e 	bne	r2,zero,80a478 <__sfvwrite_r+0x480>
  80a0e8:	91c0030b 	ldhu	r7,12(r18)
  80a0ec:	b5400017 	ldw	r21,0(r22)
  80a0f0:	3880008c 	andi	r2,r7,2
  80a0f4:	103fd81e 	bne	r2,zero,80a058 <__sfvwrite_r+0x60>
  80a0f8:	3880004c 	andi	r2,r7,1
  80a0fc:	1005003a 	cmpeq	r2,r2,zero
  80a100:	10005726 	beq	r2,zero,80a260 <__sfvwrite_r+0x268>
  80a104:	0029883a 	mov	r20,zero
  80a108:	002f883a 	mov	r23,zero
  80a10c:	a0004226 	beq	r20,zero,80a218 <__sfvwrite_r+0x220>
  80a110:	3880800c 	andi	r2,r7,512
  80a114:	94000217 	ldw	r16,8(r18)
  80a118:	10008b26 	beq	r2,zero,80a348 <__sfvwrite_r+0x350>
  80a11c:	800d883a 	mov	r6,r16
  80a120:	a400a536 	bltu	r20,r16,80a3b8 <__sfvwrite_r+0x3c0>
  80a124:	3881200c 	andi	r2,r7,1152
  80a128:	10002726 	beq	r2,zero,80a1c8 <__sfvwrite_r+0x1d0>
  80a12c:	90800517 	ldw	r2,20(r18)
  80a130:	92000417 	ldw	r8,16(r18)
  80a134:	91400017 	ldw	r5,0(r18)
  80a138:	1087883a 	add	r3,r2,r2
  80a13c:	1887883a 	add	r3,r3,r2
  80a140:	1808d7fa 	srli	r4,r3,31
  80a144:	2a21c83a 	sub	r16,r5,r8
  80a148:	80800044 	addi	r2,r16,1
  80a14c:	20c9883a 	add	r4,r4,r3
  80a150:	2027d07a 	srai	r19,r4,1
  80a154:	a085883a 	add	r2,r20,r2
  80a158:	980d883a 	mov	r6,r19
  80a15c:	9880022e 	bgeu	r19,r2,80a168 <__sfvwrite_r+0x170>
  80a160:	1027883a 	mov	r19,r2
  80a164:	100d883a 	mov	r6,r2
  80a168:	3881000c 	andi	r2,r7,1024
  80a16c:	1000b826 	beq	r2,zero,80a450 <__sfvwrite_r+0x458>
  80a170:	300b883a 	mov	r5,r6
  80a174:	e009883a 	mov	r4,fp
  80a178:	08055480 	call	805548 <_malloc_r>
  80a17c:	10003126 	beq	r2,zero,80a244 <__sfvwrite_r+0x24c>
  80a180:	91400417 	ldw	r5,16(r18)
  80a184:	1009883a 	mov	r4,r2
  80a188:	800d883a 	mov	r6,r16
  80a18c:	1023883a 	mov	r17,r2
  80a190:	080a9500 	call	80a950 <memcpy>
  80a194:	90c0030b 	ldhu	r3,12(r18)
  80a198:	00beffc4 	movi	r2,-1025
  80a19c:	1886703a 	and	r3,r3,r2
  80a1a0:	18c02014 	ori	r3,r3,128
  80a1a4:	90c0030d 	sth	r3,12(r18)
  80a1a8:	9c07c83a 	sub	r3,r19,r16
  80a1ac:	8c05883a 	add	r2,r17,r16
  80a1b0:	a00d883a 	mov	r6,r20
  80a1b4:	a021883a 	mov	r16,r20
  80a1b8:	90800015 	stw	r2,0(r18)
  80a1bc:	90c00215 	stw	r3,8(r18)
  80a1c0:	94400415 	stw	r17,16(r18)
  80a1c4:	94c00515 	stw	r19,20(r18)
  80a1c8:	91000017 	ldw	r4,0(r18)
  80a1cc:	b80b883a 	mov	r5,r23
  80a1d0:	a023883a 	mov	r17,r20
  80a1d4:	080a9f00 	call	80a9f0 <memmove>
  80a1d8:	90c00217 	ldw	r3,8(r18)
  80a1dc:	90800017 	ldw	r2,0(r18)
  80a1e0:	a027883a 	mov	r19,r20
  80a1e4:	1c07c83a 	sub	r3,r3,r16
  80a1e8:	1405883a 	add	r2,r2,r16
  80a1ec:	90c00215 	stw	r3,8(r18)
  80a1f0:	a021883a 	mov	r16,r20
  80a1f4:	90800015 	stw	r2,0(r18)
  80a1f8:	b0800217 	ldw	r2,8(r22)
  80a1fc:	1405c83a 	sub	r2,r2,r16
  80a200:	b0800215 	stw	r2,8(r22)
  80a204:	103fa826 	beq	r2,zero,80a0a8 <__sfvwrite_r+0xb0>
  80a208:	a469c83a 	sub	r20,r20,r17
  80a20c:	91c0030b 	ldhu	r7,12(r18)
  80a210:	bcef883a 	add	r23,r23,r19
  80a214:	a03fbe1e 	bne	r20,zero,80a110 <__sfvwrite_r+0x118>
  80a218:	adc00017 	ldw	r23,0(r21)
  80a21c:	ad000117 	ldw	r20,4(r21)
  80a220:	ad400204 	addi	r21,r21,8
  80a224:	003fb906 	br	80a10c <__sfvwrite_r+0x114>
  80a228:	ac400017 	ldw	r17,0(r21)
  80a22c:	ac000117 	ldw	r16,4(r21)
  80a230:	ad400204 	addi	r21,r21,8
  80a234:	003f8a06 	br	80a060 <__sfvwrite_r+0x68>
  80a238:	91400417 	ldw	r5,16(r18)
  80a23c:	e009883a 	mov	r4,fp
  80a240:	0809ce40 	call	809ce4 <_free_r>
  80a244:	00800304 	movi	r2,12
  80a248:	e0800015 	stw	r2,0(fp)
  80a24c:	9080030b 	ldhu	r2,12(r18)
  80a250:	013fffc4 	movi	r4,-1
  80a254:	10801014 	ori	r2,r2,64
  80a258:	9080030d 	sth	r2,12(r18)
  80a25c:	003f9306 	br	80a0ac <__sfvwrite_r+0xb4>
  80a260:	0027883a 	mov	r19,zero
  80a264:	002f883a 	mov	r23,zero
  80a268:	d8000015 	stw	zero,0(sp)
  80a26c:	0029883a 	mov	r20,zero
  80a270:	98001e26 	beq	r19,zero,80a2ec <__sfvwrite_r+0x2f4>
  80a274:	d8c00017 	ldw	r3,0(sp)
  80a278:	1804c03a 	cmpne	r2,r3,zero
  80a27c:	10005e26 	beq	r2,zero,80a3f8 <__sfvwrite_r+0x400>
  80a280:	9821883a 	mov	r16,r19
  80a284:	a4c0012e 	bgeu	r20,r19,80a28c <__sfvwrite_r+0x294>
  80a288:	a021883a 	mov	r16,r20
  80a28c:	91000017 	ldw	r4,0(r18)
  80a290:	90800417 	ldw	r2,16(r18)
  80a294:	91800217 	ldw	r6,8(r18)
  80a298:	91c00517 	ldw	r7,20(r18)
  80a29c:	1100022e 	bgeu	r2,r4,80a2a8 <__sfvwrite_r+0x2b0>
  80a2a0:	31e3883a 	add	r17,r6,r7
  80a2a4:	8c001616 	blt	r17,r16,80a300 <__sfvwrite_r+0x308>
  80a2a8:	81c03816 	blt	r16,r7,80a38c <__sfvwrite_r+0x394>
  80a2ac:	90c00917 	ldw	r3,36(r18)
  80a2b0:	91400717 	ldw	r5,28(r18)
  80a2b4:	e009883a 	mov	r4,fp
  80a2b8:	b80d883a 	mov	r6,r23
  80a2bc:	183ee83a 	callr	r3
  80a2c0:	1023883a 	mov	r17,r2
  80a2c4:	00bfe10e 	bge	zero,r2,80a24c <__sfvwrite_r+0x254>
  80a2c8:	a469c83a 	sub	r20,r20,r17
  80a2cc:	a0001826 	beq	r20,zero,80a330 <__sfvwrite_r+0x338>
  80a2d0:	b0800217 	ldw	r2,8(r22)
  80a2d4:	1445c83a 	sub	r2,r2,r17
  80a2d8:	b0800215 	stw	r2,8(r22)
  80a2dc:	103f7226 	beq	r2,zero,80a0a8 <__sfvwrite_r+0xb0>
  80a2e0:	9c67c83a 	sub	r19,r19,r17
  80a2e4:	bc6f883a 	add	r23,r23,r17
  80a2e8:	983fe21e 	bne	r19,zero,80a274 <__sfvwrite_r+0x27c>
  80a2ec:	adc00017 	ldw	r23,0(r21)
  80a2f0:	acc00117 	ldw	r19,4(r21)
  80a2f4:	ad400204 	addi	r21,r21,8
  80a2f8:	d8000015 	stw	zero,0(sp)
  80a2fc:	003fdc06 	br	80a270 <__sfvwrite_r+0x278>
  80a300:	b80b883a 	mov	r5,r23
  80a304:	880d883a 	mov	r6,r17
  80a308:	080a9f00 	call	80a9f0 <memmove>
  80a30c:	90c00017 	ldw	r3,0(r18)
  80a310:	e009883a 	mov	r4,fp
  80a314:	900b883a 	mov	r5,r18
  80a318:	1c47883a 	add	r3,r3,r17
  80a31c:	90c00015 	stw	r3,0(r18)
  80a320:	08096c80 	call	8096c8 <_fflush_r>
  80a324:	103fc91e 	bne	r2,zero,80a24c <__sfvwrite_r+0x254>
  80a328:	a469c83a 	sub	r20,r20,r17
  80a32c:	a03fe81e 	bne	r20,zero,80a2d0 <__sfvwrite_r+0x2d8>
  80a330:	e009883a 	mov	r4,fp
  80a334:	900b883a 	mov	r5,r18
  80a338:	08096c80 	call	8096c8 <_fflush_r>
  80a33c:	103fc31e 	bne	r2,zero,80a24c <__sfvwrite_r+0x254>
  80a340:	d8000015 	stw	zero,0(sp)
  80a344:	003fe206 	br	80a2d0 <__sfvwrite_r+0x2d8>
  80a348:	91000017 	ldw	r4,0(r18)
  80a34c:	90800417 	ldw	r2,16(r18)
  80a350:	1100022e 	bgeu	r2,r4,80a35c <__sfvwrite_r+0x364>
  80a354:	8023883a 	mov	r17,r16
  80a358:	85003136 	bltu	r16,r20,80a420 <__sfvwrite_r+0x428>
  80a35c:	91c00517 	ldw	r7,20(r18)
  80a360:	a1c01836 	bltu	r20,r7,80a3c4 <__sfvwrite_r+0x3cc>
  80a364:	90c00917 	ldw	r3,36(r18)
  80a368:	91400717 	ldw	r5,28(r18)
  80a36c:	e009883a 	mov	r4,fp
  80a370:	b80d883a 	mov	r6,r23
  80a374:	183ee83a 	callr	r3
  80a378:	1021883a 	mov	r16,r2
  80a37c:	00bfb30e 	bge	zero,r2,80a24c <__sfvwrite_r+0x254>
  80a380:	1023883a 	mov	r17,r2
  80a384:	1027883a 	mov	r19,r2
  80a388:	003f9b06 	br	80a1f8 <__sfvwrite_r+0x200>
  80a38c:	b80b883a 	mov	r5,r23
  80a390:	800d883a 	mov	r6,r16
  80a394:	080a9f00 	call	80a9f0 <memmove>
  80a398:	90c00217 	ldw	r3,8(r18)
  80a39c:	90800017 	ldw	r2,0(r18)
  80a3a0:	8023883a 	mov	r17,r16
  80a3a4:	1c07c83a 	sub	r3,r3,r16
  80a3a8:	1405883a 	add	r2,r2,r16
  80a3ac:	90c00215 	stw	r3,8(r18)
  80a3b0:	90800015 	stw	r2,0(r18)
  80a3b4:	003fc406 	br	80a2c8 <__sfvwrite_r+0x2d0>
  80a3b8:	a00d883a 	mov	r6,r20
  80a3bc:	a021883a 	mov	r16,r20
  80a3c0:	003f8106 	br	80a1c8 <__sfvwrite_r+0x1d0>
  80a3c4:	b80b883a 	mov	r5,r23
  80a3c8:	a00d883a 	mov	r6,r20
  80a3cc:	080a9f00 	call	80a9f0 <memmove>
  80a3d0:	90c00217 	ldw	r3,8(r18)
  80a3d4:	90800017 	ldw	r2,0(r18)
  80a3d8:	a021883a 	mov	r16,r20
  80a3dc:	1d07c83a 	sub	r3,r3,r20
  80a3e0:	1505883a 	add	r2,r2,r20
  80a3e4:	a023883a 	mov	r17,r20
  80a3e8:	a027883a 	mov	r19,r20
  80a3ec:	90c00215 	stw	r3,8(r18)
  80a3f0:	90800015 	stw	r2,0(r18)
  80a3f4:	003f8006 	br	80a1f8 <__sfvwrite_r+0x200>
  80a3f8:	b809883a 	mov	r4,r23
  80a3fc:	01400284 	movi	r5,10
  80a400:	980d883a 	mov	r6,r19
  80a404:	080a86c0 	call	80a86c <memchr>
  80a408:	10001726 	beq	r2,zero,80a468 <__sfvwrite_r+0x470>
  80a40c:	15c5c83a 	sub	r2,r2,r23
  80a410:	15000044 	addi	r20,r2,1
  80a414:	00800044 	movi	r2,1
  80a418:	d8800015 	stw	r2,0(sp)
  80a41c:	003f9806 	br	80a280 <__sfvwrite_r+0x288>
  80a420:	b80b883a 	mov	r5,r23
  80a424:	800d883a 	mov	r6,r16
  80a428:	080a9f00 	call	80a9f0 <memmove>
  80a42c:	90c00017 	ldw	r3,0(r18)
  80a430:	e009883a 	mov	r4,fp
  80a434:	900b883a 	mov	r5,r18
  80a438:	1c07883a 	add	r3,r3,r16
  80a43c:	90c00015 	stw	r3,0(r18)
  80a440:	8027883a 	mov	r19,r16
  80a444:	08096c80 	call	8096c8 <_fflush_r>
  80a448:	103f6b26 	beq	r2,zero,80a1f8 <__sfvwrite_r+0x200>
  80a44c:	003f7f06 	br	80a24c <__sfvwrite_r+0x254>
  80a450:	400b883a 	mov	r5,r8
  80a454:	e009883a 	mov	r4,fp
  80a458:	080bb5c0 	call	80bb5c <_realloc_r>
  80a45c:	103f7626 	beq	r2,zero,80a238 <__sfvwrite_r+0x240>
  80a460:	1023883a 	mov	r17,r2
  80a464:	003f5006 	br	80a1a8 <__sfvwrite_r+0x1b0>
  80a468:	00c00044 	movi	r3,1
  80a46c:	9d000044 	addi	r20,r19,1
  80a470:	d8c00015 	stw	r3,0(sp)
  80a474:	003f8206 	br	80a280 <__sfvwrite_r+0x288>
  80a478:	9080030b 	ldhu	r2,12(r18)
  80a47c:	00c00244 	movi	r3,9
  80a480:	013fffc4 	movi	r4,-1
  80a484:	10801014 	ori	r2,r2,64
  80a488:	9080030d 	sth	r2,12(r18)
  80a48c:	e0c00015 	stw	r3,0(fp)
  80a490:	003f0606 	br	80a0ac <__sfvwrite_r+0xb4>

0080a494 <_fwalk_reent>:
  80a494:	defff704 	addi	sp,sp,-36
  80a498:	dcc00315 	stw	r19,12(sp)
  80a49c:	24c0b804 	addi	r19,r4,736
  80a4a0:	dd800615 	stw	r22,24(sp)
  80a4a4:	dd400515 	stw	r21,20(sp)
  80a4a8:	dfc00815 	stw	ra,32(sp)
  80a4ac:	ddc00715 	stw	r23,28(sp)
  80a4b0:	dd000415 	stw	r20,16(sp)
  80a4b4:	dc800215 	stw	r18,8(sp)
  80a4b8:	dc400115 	stw	r17,4(sp)
  80a4bc:	dc000015 	stw	r16,0(sp)
  80a4c0:	202b883a 	mov	r21,r4
  80a4c4:	282d883a 	mov	r22,r5
  80a4c8:	08099500 	call	809950 <__sfp_lock_acquire>
  80a4cc:	98002126 	beq	r19,zero,80a554 <_fwalk_reent+0xc0>
  80a4d0:	002f883a 	mov	r23,zero
  80a4d4:	9c800117 	ldw	r18,4(r19)
  80a4d8:	9c000217 	ldw	r16,8(r19)
  80a4dc:	90bfffc4 	addi	r2,r18,-1
  80a4e0:	10000d16 	blt	r2,zero,80a518 <_fwalk_reent+0x84>
  80a4e4:	0023883a 	mov	r17,zero
  80a4e8:	053fffc4 	movi	r20,-1
  80a4ec:	8080030f 	ldh	r2,12(r16)
  80a4f0:	8c400044 	addi	r17,r17,1
  80a4f4:	10000626 	beq	r2,zero,80a510 <_fwalk_reent+0x7c>
  80a4f8:	8080038f 	ldh	r2,14(r16)
  80a4fc:	800b883a 	mov	r5,r16
  80a500:	a809883a 	mov	r4,r21
  80a504:	15000226 	beq	r2,r20,80a510 <_fwalk_reent+0x7c>
  80a508:	b03ee83a 	callr	r22
  80a50c:	b8aeb03a 	or	r23,r23,r2
  80a510:	84001704 	addi	r16,r16,92
  80a514:	947ff51e 	bne	r18,r17,80a4ec <_fwalk_reent+0x58>
  80a518:	9cc00017 	ldw	r19,0(r19)
  80a51c:	983fed1e 	bne	r19,zero,80a4d4 <_fwalk_reent+0x40>
  80a520:	08099540 	call	809954 <__sfp_lock_release>
  80a524:	b805883a 	mov	r2,r23
  80a528:	dfc00817 	ldw	ra,32(sp)
  80a52c:	ddc00717 	ldw	r23,28(sp)
  80a530:	dd800617 	ldw	r22,24(sp)
  80a534:	dd400517 	ldw	r21,20(sp)
  80a538:	dd000417 	ldw	r20,16(sp)
  80a53c:	dcc00317 	ldw	r19,12(sp)
  80a540:	dc800217 	ldw	r18,8(sp)
  80a544:	dc400117 	ldw	r17,4(sp)
  80a548:	dc000017 	ldw	r16,0(sp)
  80a54c:	dec00904 	addi	sp,sp,36
  80a550:	f800283a 	ret
  80a554:	002f883a 	mov	r23,zero
  80a558:	003ff106 	br	80a520 <_fwalk_reent+0x8c>

0080a55c <_fwalk>:
  80a55c:	defff804 	addi	sp,sp,-32
  80a560:	dcc00315 	stw	r19,12(sp)
  80a564:	24c0b804 	addi	r19,r4,736
  80a568:	dd400515 	stw	r21,20(sp)
  80a56c:	dfc00715 	stw	ra,28(sp)
  80a570:	dd800615 	stw	r22,24(sp)
  80a574:	dd000415 	stw	r20,16(sp)
  80a578:	dc800215 	stw	r18,8(sp)
  80a57c:	dc400115 	stw	r17,4(sp)
  80a580:	dc000015 	stw	r16,0(sp)
  80a584:	282b883a 	mov	r21,r5
  80a588:	08099500 	call	809950 <__sfp_lock_acquire>
  80a58c:	98001f26 	beq	r19,zero,80a60c <_fwalk+0xb0>
  80a590:	002d883a 	mov	r22,zero
  80a594:	9c800117 	ldw	r18,4(r19)
  80a598:	9c000217 	ldw	r16,8(r19)
  80a59c:	90bfffc4 	addi	r2,r18,-1
  80a5a0:	10000c16 	blt	r2,zero,80a5d4 <_fwalk+0x78>
  80a5a4:	0023883a 	mov	r17,zero
  80a5a8:	053fffc4 	movi	r20,-1
  80a5ac:	8080030f 	ldh	r2,12(r16)
  80a5b0:	8c400044 	addi	r17,r17,1
  80a5b4:	10000526 	beq	r2,zero,80a5cc <_fwalk+0x70>
  80a5b8:	8080038f 	ldh	r2,14(r16)
  80a5bc:	8009883a 	mov	r4,r16
  80a5c0:	15000226 	beq	r2,r20,80a5cc <_fwalk+0x70>
  80a5c4:	a83ee83a 	callr	r21
  80a5c8:	b0acb03a 	or	r22,r22,r2
  80a5cc:	84001704 	addi	r16,r16,92
  80a5d0:	947ff61e 	bne	r18,r17,80a5ac <_fwalk+0x50>
  80a5d4:	9cc00017 	ldw	r19,0(r19)
  80a5d8:	983fee1e 	bne	r19,zero,80a594 <_fwalk+0x38>
  80a5dc:	08099540 	call	809954 <__sfp_lock_release>
  80a5e0:	b005883a 	mov	r2,r22
  80a5e4:	dfc00717 	ldw	ra,28(sp)
  80a5e8:	dd800617 	ldw	r22,24(sp)
  80a5ec:	dd400517 	ldw	r21,20(sp)
  80a5f0:	dd000417 	ldw	r20,16(sp)
  80a5f4:	dcc00317 	ldw	r19,12(sp)
  80a5f8:	dc800217 	ldw	r18,8(sp)
  80a5fc:	dc400117 	ldw	r17,4(sp)
  80a600:	dc000017 	ldw	r16,0(sp)
  80a604:	dec00804 	addi	sp,sp,32
  80a608:	f800283a 	ret
  80a60c:	002d883a 	mov	r22,zero
  80a610:	003ff206 	br	80a5dc <_fwalk+0x80>

0080a614 <__locale_charset>:
  80a614:	d0a00817 	ldw	r2,-32736(gp)
  80a618:	f800283a 	ret

0080a61c <_localeconv_r>:
  80a61c:	008020b4 	movhi	r2,130
  80a620:	10a0a104 	addi	r2,r2,-32124
  80a624:	f800283a 	ret

0080a628 <localeconv>:
  80a628:	008020b4 	movhi	r2,130
  80a62c:	10a81904 	addi	r2,r2,-24476
  80a630:	11000017 	ldw	r4,0(r2)
  80a634:	080a61c1 	jmpi	80a61c <_localeconv_r>

0080a638 <_setlocale_r>:
  80a638:	defffc04 	addi	sp,sp,-16
  80a63c:	00c020b4 	movhi	r3,130
  80a640:	18e09c04 	addi	r3,r3,-32144
  80a644:	dc800215 	stw	r18,8(sp)
  80a648:	dc400115 	stw	r17,4(sp)
  80a64c:	dc000015 	stw	r16,0(sp)
  80a650:	2023883a 	mov	r17,r4
  80a654:	2825883a 	mov	r18,r5
  80a658:	dfc00315 	stw	ra,12(sp)
  80a65c:	3021883a 	mov	r16,r6
  80a660:	3009883a 	mov	r4,r6
  80a664:	180b883a 	mov	r5,r3
  80a668:	30000926 	beq	r6,zero,80a690 <_setlocale_r+0x58>
  80a66c:	080c30c0 	call	80c30c <strcmp>
  80a670:	8009883a 	mov	r4,r16
  80a674:	014020b4 	movhi	r5,130
  80a678:	29608704 	addi	r5,r5,-32228
  80a67c:	10000b1e 	bne	r2,zero,80a6ac <_setlocale_r+0x74>
  80a680:	8c000d15 	stw	r16,52(r17)
  80a684:	8c800c15 	stw	r18,48(r17)
  80a688:	00c020b4 	movhi	r3,130
  80a68c:	18e09c04 	addi	r3,r3,-32144
  80a690:	1805883a 	mov	r2,r3
  80a694:	dfc00317 	ldw	ra,12(sp)
  80a698:	dc800217 	ldw	r18,8(sp)
  80a69c:	dc400117 	ldw	r17,4(sp)
  80a6a0:	dc000017 	ldw	r16,0(sp)
  80a6a4:	dec00404 	addi	sp,sp,16
  80a6a8:	f800283a 	ret
  80a6ac:	080c30c0 	call	80c30c <strcmp>
  80a6b0:	0007883a 	mov	r3,zero
  80a6b4:	103ff226 	beq	r2,zero,80a680 <_setlocale_r+0x48>
  80a6b8:	003ff506 	br	80a690 <_setlocale_r+0x58>

0080a6bc <setlocale>:
  80a6bc:	018020b4 	movhi	r6,130
  80a6c0:	31a81904 	addi	r6,r6,-24476
  80a6c4:	2007883a 	mov	r3,r4
  80a6c8:	31000017 	ldw	r4,0(r6)
  80a6cc:	280d883a 	mov	r6,r5
  80a6d0:	180b883a 	mov	r5,r3
  80a6d4:	080a6381 	jmpi	80a638 <_setlocale_r>

0080a6d8 <__smakebuf_r>:
  80a6d8:	2880030b 	ldhu	r2,12(r5)
  80a6dc:	deffed04 	addi	sp,sp,-76
  80a6e0:	dc401015 	stw	r17,64(sp)
  80a6e4:	1080008c 	andi	r2,r2,2
  80a6e8:	dc000f15 	stw	r16,60(sp)
  80a6ec:	dfc01215 	stw	ra,72(sp)
  80a6f0:	dc801115 	stw	r18,68(sp)
  80a6f4:	2821883a 	mov	r16,r5
  80a6f8:	2023883a 	mov	r17,r4
  80a6fc:	10000b26 	beq	r2,zero,80a72c <__smakebuf_r+0x54>
  80a700:	28c010c4 	addi	r3,r5,67
  80a704:	00800044 	movi	r2,1
  80a708:	28800515 	stw	r2,20(r5)
  80a70c:	28c00415 	stw	r3,16(r5)
  80a710:	28c00015 	stw	r3,0(r5)
  80a714:	dfc01217 	ldw	ra,72(sp)
  80a718:	dc801117 	ldw	r18,68(sp)
  80a71c:	dc401017 	ldw	r17,64(sp)
  80a720:	dc000f17 	ldw	r16,60(sp)
  80a724:	dec01304 	addi	sp,sp,76
  80a728:	f800283a 	ret
  80a72c:	2940038f 	ldh	r5,14(r5)
  80a730:	28002116 	blt	r5,zero,80a7b8 <__smakebuf_r+0xe0>
  80a734:	d80d883a 	mov	r6,sp
  80a738:	080c6880 	call	80c688 <_fstat_r>
  80a73c:	10001e16 	blt	r2,zero,80a7b8 <__smakebuf_r+0xe0>
  80a740:	d8800117 	ldw	r2,4(sp)
  80a744:	00e00014 	movui	r3,32768
  80a748:	113c000c 	andi	r4,r2,61440
  80a74c:	20c03126 	beq	r4,r3,80a814 <__smakebuf_r+0x13c>
  80a750:	8080030b 	ldhu	r2,12(r16)
  80a754:	00c80004 	movi	r3,8192
  80a758:	10820014 	ori	r2,r2,2048
  80a75c:	8080030d 	sth	r2,12(r16)
  80a760:	20c01e26 	beq	r4,r3,80a7dc <__smakebuf_r+0x104>
  80a764:	04810004 	movi	r18,1024
  80a768:	8809883a 	mov	r4,r17
  80a76c:	900b883a 	mov	r5,r18
  80a770:	08055480 	call	805548 <_malloc_r>
  80a774:	1009883a 	mov	r4,r2
  80a778:	10003126 	beq	r2,zero,80a840 <__smakebuf_r+0x168>
  80a77c:	80c0030b 	ldhu	r3,12(r16)
  80a780:	00802074 	movhi	r2,129
  80a784:	10a69104 	addi	r2,r2,-26044
  80a788:	88800f15 	stw	r2,60(r17)
  80a78c:	18c02014 	ori	r3,r3,128
  80a790:	84800515 	stw	r18,20(r16)
  80a794:	80c0030d 	sth	r3,12(r16)
  80a798:	81000415 	stw	r4,16(r16)
  80a79c:	81000015 	stw	r4,0(r16)
  80a7a0:	dfc01217 	ldw	ra,72(sp)
  80a7a4:	dc801117 	ldw	r18,68(sp)
  80a7a8:	dc401017 	ldw	r17,64(sp)
  80a7ac:	dc000f17 	ldw	r16,60(sp)
  80a7b0:	dec01304 	addi	sp,sp,76
  80a7b4:	f800283a 	ret
  80a7b8:	80c0030b 	ldhu	r3,12(r16)
  80a7bc:	1880200c 	andi	r2,r3,128
  80a7c0:	10000426 	beq	r2,zero,80a7d4 <__smakebuf_r+0xfc>
  80a7c4:	04801004 	movi	r18,64
  80a7c8:	18820014 	ori	r2,r3,2048
  80a7cc:	8080030d 	sth	r2,12(r16)
  80a7d0:	003fe506 	br	80a768 <__smakebuf_r+0x90>
  80a7d4:	04810004 	movi	r18,1024
  80a7d8:	003ffb06 	br	80a7c8 <__smakebuf_r+0xf0>
  80a7dc:	8140038f 	ldh	r5,14(r16)
  80a7e0:	8809883a 	mov	r4,r17
  80a7e4:	080c6fc0 	call	80c6fc <_isatty_r>
  80a7e8:	103fde26 	beq	r2,zero,80a764 <__smakebuf_r+0x8c>
  80a7ec:	8080030b 	ldhu	r2,12(r16)
  80a7f0:	80c010c4 	addi	r3,r16,67
  80a7f4:	04810004 	movi	r18,1024
  80a7f8:	10800054 	ori	r2,r2,1
  80a7fc:	8080030d 	sth	r2,12(r16)
  80a800:	00800044 	movi	r2,1
  80a804:	80c00415 	stw	r3,16(r16)
  80a808:	80800515 	stw	r2,20(r16)
  80a80c:	80c00015 	stw	r3,0(r16)
  80a810:	003fd506 	br	80a768 <__smakebuf_r+0x90>
  80a814:	80c00a17 	ldw	r3,40(r16)
  80a818:	00802074 	movhi	r2,129
  80a81c:	10b07204 	addi	r2,r2,-15928
  80a820:	18bfcb1e 	bne	r3,r2,80a750 <__smakebuf_r+0x78>
  80a824:	8080030b 	ldhu	r2,12(r16)
  80a828:	00c10004 	movi	r3,1024
  80a82c:	1825883a 	mov	r18,r3
  80a830:	10c4b03a 	or	r2,r2,r3
  80a834:	8080030d 	sth	r2,12(r16)
  80a838:	80c01315 	stw	r3,76(r16)
  80a83c:	003fca06 	br	80a768 <__smakebuf_r+0x90>
  80a840:	8100030b 	ldhu	r4,12(r16)
  80a844:	2080800c 	andi	r2,r4,512
  80a848:	103fb21e 	bne	r2,zero,80a714 <__smakebuf_r+0x3c>
  80a84c:	80c010c4 	addi	r3,r16,67
  80a850:	21000094 	ori	r4,r4,2
  80a854:	00800044 	movi	r2,1
  80a858:	80800515 	stw	r2,20(r16)
  80a85c:	8100030d 	sth	r4,12(r16)
  80a860:	80c00415 	stw	r3,16(r16)
  80a864:	80c00015 	stw	r3,0(r16)
  80a868:	003faa06 	br	80a714 <__smakebuf_r+0x3c>

0080a86c <memchr>:
  80a86c:	008000c4 	movi	r2,3
  80a870:	29403fcc 	andi	r5,r5,255
  80a874:	2007883a 	mov	r3,r4
  80a878:	1180022e 	bgeu	r2,r6,80a884 <memchr+0x18>
  80a87c:	2084703a 	and	r2,r4,r2
  80a880:	10000b26 	beq	r2,zero,80a8b0 <memchr+0x44>
  80a884:	313fffc4 	addi	r4,r6,-1
  80a888:	3000051e 	bne	r6,zero,80a8a0 <memchr+0x34>
  80a88c:	00002c06 	br	80a940 <memchr+0xd4>
  80a890:	213fffc4 	addi	r4,r4,-1
  80a894:	00bfffc4 	movi	r2,-1
  80a898:	18c00044 	addi	r3,r3,1
  80a89c:	20802826 	beq	r4,r2,80a940 <memchr+0xd4>
  80a8a0:	18800003 	ldbu	r2,0(r3)
  80a8a4:	28bffa1e 	bne	r5,r2,80a890 <memchr+0x24>
  80a8a8:	1805883a 	mov	r2,r3
  80a8ac:	f800283a 	ret
  80a8b0:	0011883a 	mov	r8,zero
  80a8b4:	0007883a 	mov	r3,zero
  80a8b8:	01c00104 	movi	r7,4
  80a8bc:	4004923a 	slli	r2,r8,8
  80a8c0:	18c00044 	addi	r3,r3,1
  80a8c4:	1151883a 	add	r8,r2,r5
  80a8c8:	19fffc1e 	bne	r3,r7,80a8bc <memchr+0x50>
  80a8cc:	02bfbff4 	movhi	r10,65279
  80a8d0:	52bfbfc4 	addi	r10,r10,-257
  80a8d4:	02602074 	movhi	r9,32897
  80a8d8:	4a602004 	addi	r9,r9,-32640
  80a8dc:	02c000c4 	movi	r11,3
  80a8e0:	20800017 	ldw	r2,0(r4)
  80a8e4:	31bfff04 	addi	r6,r6,-4
  80a8e8:	200f883a 	mov	r7,r4
  80a8ec:	1204f03a 	xor	r2,r2,r8
  80a8f0:	1287883a 	add	r3,r2,r10
  80a8f4:	1a46703a 	and	r3,r3,r9
  80a8f8:	0084303a 	nor	r2,zero,r2
  80a8fc:	10c4703a 	and	r2,r2,r3
  80a900:	10000b26 	beq	r2,zero,80a930 <memchr+0xc4>
  80a904:	20800003 	ldbu	r2,0(r4)
  80a908:	28800f26 	beq	r5,r2,80a948 <memchr+0xdc>
  80a90c:	20800043 	ldbu	r2,1(r4)
  80a910:	21c00044 	addi	r7,r4,1
  80a914:	28800c26 	beq	r5,r2,80a948 <memchr+0xdc>
  80a918:	20800083 	ldbu	r2,2(r4)
  80a91c:	21c00084 	addi	r7,r4,2
  80a920:	28800926 	beq	r5,r2,80a948 <memchr+0xdc>
  80a924:	208000c3 	ldbu	r2,3(r4)
  80a928:	21c000c4 	addi	r7,r4,3
  80a92c:	28800626 	beq	r5,r2,80a948 <memchr+0xdc>
  80a930:	21000104 	addi	r4,r4,4
  80a934:	59bfea36 	bltu	r11,r6,80a8e0 <memchr+0x74>
  80a938:	2007883a 	mov	r3,r4
  80a93c:	003fd106 	br	80a884 <memchr+0x18>
  80a940:	0005883a 	mov	r2,zero
  80a944:	f800283a 	ret
  80a948:	3805883a 	mov	r2,r7
  80a94c:	f800283a 	ret

0080a950 <memcpy>:
  80a950:	01c003c4 	movi	r7,15
  80a954:	2007883a 	mov	r3,r4
  80a958:	3980032e 	bgeu	r7,r6,80a968 <memcpy+0x18>
  80a95c:	2904b03a 	or	r2,r5,r4
  80a960:	108000cc 	andi	r2,r2,3
  80a964:	10000926 	beq	r2,zero,80a98c <memcpy+0x3c>
  80a968:	30000626 	beq	r6,zero,80a984 <memcpy+0x34>
  80a96c:	30cd883a 	add	r6,r6,r3
  80a970:	28800003 	ldbu	r2,0(r5)
  80a974:	29400044 	addi	r5,r5,1
  80a978:	18800005 	stb	r2,0(r3)
  80a97c:	18c00044 	addi	r3,r3,1
  80a980:	30fffb1e 	bne	r6,r3,80a970 <memcpy+0x20>
  80a984:	2005883a 	mov	r2,r4
  80a988:	f800283a 	ret
  80a98c:	3811883a 	mov	r8,r7
  80a990:	200f883a 	mov	r7,r4
  80a994:	28c00017 	ldw	r3,0(r5)
  80a998:	31bffc04 	addi	r6,r6,-16
  80a99c:	38c00015 	stw	r3,0(r7)
  80a9a0:	28800117 	ldw	r2,4(r5)
  80a9a4:	38800115 	stw	r2,4(r7)
  80a9a8:	28c00217 	ldw	r3,8(r5)
  80a9ac:	38c00215 	stw	r3,8(r7)
  80a9b0:	28800317 	ldw	r2,12(r5)
  80a9b4:	29400404 	addi	r5,r5,16
  80a9b8:	38800315 	stw	r2,12(r7)
  80a9bc:	39c00404 	addi	r7,r7,16
  80a9c0:	41bff436 	bltu	r8,r6,80a994 <memcpy+0x44>
  80a9c4:	008000c4 	movi	r2,3
  80a9c8:	1180072e 	bgeu	r2,r6,80a9e8 <memcpy+0x98>
  80a9cc:	1007883a 	mov	r3,r2
  80a9d0:	28800017 	ldw	r2,0(r5)
  80a9d4:	31bfff04 	addi	r6,r6,-4
  80a9d8:	29400104 	addi	r5,r5,4
  80a9dc:	38800015 	stw	r2,0(r7)
  80a9e0:	39c00104 	addi	r7,r7,4
  80a9e4:	19bffa36 	bltu	r3,r6,80a9d0 <memcpy+0x80>
  80a9e8:	3807883a 	mov	r3,r7
  80a9ec:	003fde06 	br	80a968 <memcpy+0x18>

0080a9f0 <memmove>:
  80a9f0:	2807883a 	mov	r3,r5
  80a9f4:	2011883a 	mov	r8,r4
  80a9f8:	29000c2e 	bgeu	r5,r4,80aa2c <memmove+0x3c>
  80a9fc:	298f883a 	add	r7,r5,r6
  80aa00:	21c00a2e 	bgeu	r4,r7,80aa2c <memmove+0x3c>
  80aa04:	30000726 	beq	r6,zero,80aa24 <memmove+0x34>
  80aa08:	2187883a 	add	r3,r4,r6
  80aa0c:	198dc83a 	sub	r6,r3,r6
  80aa10:	39ffffc4 	addi	r7,r7,-1
  80aa14:	38800003 	ldbu	r2,0(r7)
  80aa18:	18ffffc4 	addi	r3,r3,-1
  80aa1c:	18800005 	stb	r2,0(r3)
  80aa20:	19bffb1e 	bne	r3,r6,80aa10 <memmove+0x20>
  80aa24:	2005883a 	mov	r2,r4
  80aa28:	f800283a 	ret
  80aa2c:	01c003c4 	movi	r7,15
  80aa30:	39800a36 	bltu	r7,r6,80aa5c <memmove+0x6c>
  80aa34:	303ffb26 	beq	r6,zero,80aa24 <memmove+0x34>
  80aa38:	400f883a 	mov	r7,r8
  80aa3c:	320d883a 	add	r6,r6,r8
  80aa40:	28800003 	ldbu	r2,0(r5)
  80aa44:	29400044 	addi	r5,r5,1
  80aa48:	38800005 	stb	r2,0(r7)
  80aa4c:	39c00044 	addi	r7,r7,1
  80aa50:	39bffb1e 	bne	r7,r6,80aa40 <memmove+0x50>
  80aa54:	2005883a 	mov	r2,r4
  80aa58:	f800283a 	ret
  80aa5c:	1904b03a 	or	r2,r3,r4
  80aa60:	108000cc 	andi	r2,r2,3
  80aa64:	103ff31e 	bne	r2,zero,80aa34 <memmove+0x44>
  80aa68:	3811883a 	mov	r8,r7
  80aa6c:	180b883a 	mov	r5,r3
  80aa70:	200f883a 	mov	r7,r4
  80aa74:	28c00017 	ldw	r3,0(r5)
  80aa78:	31bffc04 	addi	r6,r6,-16
  80aa7c:	38c00015 	stw	r3,0(r7)
  80aa80:	28800117 	ldw	r2,4(r5)
  80aa84:	38800115 	stw	r2,4(r7)
  80aa88:	28c00217 	ldw	r3,8(r5)
  80aa8c:	38c00215 	stw	r3,8(r7)
  80aa90:	28800317 	ldw	r2,12(r5)
  80aa94:	29400404 	addi	r5,r5,16
  80aa98:	38800315 	stw	r2,12(r7)
  80aa9c:	39c00404 	addi	r7,r7,16
  80aaa0:	41bff436 	bltu	r8,r6,80aa74 <memmove+0x84>
  80aaa4:	008000c4 	movi	r2,3
  80aaa8:	1180072e 	bgeu	r2,r6,80aac8 <memmove+0xd8>
  80aaac:	1007883a 	mov	r3,r2
  80aab0:	28800017 	ldw	r2,0(r5)
  80aab4:	31bfff04 	addi	r6,r6,-4
  80aab8:	29400104 	addi	r5,r5,4
  80aabc:	38800015 	stw	r2,0(r7)
  80aac0:	39c00104 	addi	r7,r7,4
  80aac4:	19bffa36 	bltu	r3,r6,80aab0 <memmove+0xc0>
  80aac8:	3811883a 	mov	r8,r7
  80aacc:	003fd906 	br	80aa34 <memmove+0x44>

0080aad0 <memset>:
  80aad0:	008000c4 	movi	r2,3
  80aad4:	29403fcc 	andi	r5,r5,255
  80aad8:	2007883a 	mov	r3,r4
  80aadc:	1180022e 	bgeu	r2,r6,80aae8 <memset+0x18>
  80aae0:	2084703a 	and	r2,r4,r2
  80aae4:	10000826 	beq	r2,zero,80ab08 <memset+0x38>
  80aae8:	30000526 	beq	r6,zero,80ab00 <memset+0x30>
  80aaec:	2805883a 	mov	r2,r5
  80aaf0:	30cd883a 	add	r6,r6,r3
  80aaf4:	18800005 	stb	r2,0(r3)
  80aaf8:	18c00044 	addi	r3,r3,1
  80aafc:	19bffd1e 	bne	r3,r6,80aaf4 <memset+0x24>
  80ab00:	2005883a 	mov	r2,r4
  80ab04:	f800283a 	ret
  80ab08:	2804923a 	slli	r2,r5,8
  80ab0c:	020003c4 	movi	r8,15
  80ab10:	200f883a 	mov	r7,r4
  80ab14:	2884b03a 	or	r2,r5,r2
  80ab18:	1006943a 	slli	r3,r2,16
  80ab1c:	10c6b03a 	or	r3,r2,r3
  80ab20:	41800a2e 	bgeu	r8,r6,80ab4c <memset+0x7c>
  80ab24:	4005883a 	mov	r2,r8
  80ab28:	31bffc04 	addi	r6,r6,-16
  80ab2c:	38c00015 	stw	r3,0(r7)
  80ab30:	38c00115 	stw	r3,4(r7)
  80ab34:	38c00215 	stw	r3,8(r7)
  80ab38:	38c00315 	stw	r3,12(r7)
  80ab3c:	39c00404 	addi	r7,r7,16
  80ab40:	11bff936 	bltu	r2,r6,80ab28 <memset+0x58>
  80ab44:	008000c4 	movi	r2,3
  80ab48:	1180052e 	bgeu	r2,r6,80ab60 <memset+0x90>
  80ab4c:	31bfff04 	addi	r6,r6,-4
  80ab50:	008000c4 	movi	r2,3
  80ab54:	38c00015 	stw	r3,0(r7)
  80ab58:	39c00104 	addi	r7,r7,4
  80ab5c:	11bffb36 	bltu	r2,r6,80ab4c <memset+0x7c>
  80ab60:	3807883a 	mov	r3,r7
  80ab64:	003fe006 	br	80aae8 <memset+0x18>

0080ab68 <_Bfree>:
  80ab68:	28000826 	beq	r5,zero,80ab8c <_Bfree+0x24>
  80ab6c:	28800117 	ldw	r2,4(r5)
  80ab70:	21001317 	ldw	r4,76(r4)
  80ab74:	1085883a 	add	r2,r2,r2
  80ab78:	1085883a 	add	r2,r2,r2
  80ab7c:	1105883a 	add	r2,r2,r4
  80ab80:	10c00017 	ldw	r3,0(r2)
  80ab84:	28c00015 	stw	r3,0(r5)
  80ab88:	11400015 	stw	r5,0(r2)
  80ab8c:	f800283a 	ret

0080ab90 <__hi0bits>:
  80ab90:	20bfffec 	andhi	r2,r4,65535
  80ab94:	10001426 	beq	r2,zero,80abe8 <__hi0bits+0x58>
  80ab98:	0007883a 	mov	r3,zero
  80ab9c:	20bfc02c 	andhi	r2,r4,65280
  80aba0:	1000021e 	bne	r2,zero,80abac <__hi0bits+0x1c>
  80aba4:	2008923a 	slli	r4,r4,8
  80aba8:	18c00204 	addi	r3,r3,8
  80abac:	20bc002c 	andhi	r2,r4,61440
  80abb0:	1000021e 	bne	r2,zero,80abbc <__hi0bits+0x2c>
  80abb4:	2008913a 	slli	r4,r4,4
  80abb8:	18c00104 	addi	r3,r3,4
  80abbc:	20b0002c 	andhi	r2,r4,49152
  80abc0:	1000031e 	bne	r2,zero,80abd0 <__hi0bits+0x40>
  80abc4:	2105883a 	add	r2,r4,r4
  80abc8:	18c00084 	addi	r3,r3,2
  80abcc:	1089883a 	add	r4,r2,r2
  80abd0:	20000316 	blt	r4,zero,80abe0 <__hi0bits+0x50>
  80abd4:	2090002c 	andhi	r2,r4,16384
  80abd8:	10000626 	beq	r2,zero,80abf4 <__hi0bits+0x64>
  80abdc:	18c00044 	addi	r3,r3,1
  80abe0:	1805883a 	mov	r2,r3
  80abe4:	f800283a 	ret
  80abe8:	2008943a 	slli	r4,r4,16
  80abec:	00c00404 	movi	r3,16
  80abf0:	003fea06 	br	80ab9c <__hi0bits+0xc>
  80abf4:	00c00804 	movi	r3,32
  80abf8:	1805883a 	mov	r2,r3
  80abfc:	f800283a 	ret

0080ac00 <__lo0bits>:
  80ac00:	20c00017 	ldw	r3,0(r4)
  80ac04:	188001cc 	andi	r2,r3,7
  80ac08:	10000a26 	beq	r2,zero,80ac34 <__lo0bits+0x34>
  80ac0c:	1880004c 	andi	r2,r3,1
  80ac10:	1005003a 	cmpeq	r2,r2,zero
  80ac14:	10002126 	beq	r2,zero,80ac9c <__lo0bits+0x9c>
  80ac18:	1880008c 	andi	r2,r3,2
  80ac1c:	1000251e 	bne	r2,zero,80acb4 <__lo0bits+0xb4>
  80ac20:	1804d0ba 	srli	r2,r3,2
  80ac24:	01400084 	movi	r5,2
  80ac28:	20800015 	stw	r2,0(r4)
  80ac2c:	2805883a 	mov	r2,r5
  80ac30:	f800283a 	ret
  80ac34:	18bfffcc 	andi	r2,r3,65535
  80ac38:	10001526 	beq	r2,zero,80ac90 <__lo0bits+0x90>
  80ac3c:	000b883a 	mov	r5,zero
  80ac40:	18803fcc 	andi	r2,r3,255
  80ac44:	1000021e 	bne	r2,zero,80ac50 <__lo0bits+0x50>
  80ac48:	1806d23a 	srli	r3,r3,8
  80ac4c:	29400204 	addi	r5,r5,8
  80ac50:	188003cc 	andi	r2,r3,15
  80ac54:	1000021e 	bne	r2,zero,80ac60 <__lo0bits+0x60>
  80ac58:	1806d13a 	srli	r3,r3,4
  80ac5c:	29400104 	addi	r5,r5,4
  80ac60:	188000cc 	andi	r2,r3,3
  80ac64:	1000021e 	bne	r2,zero,80ac70 <__lo0bits+0x70>
  80ac68:	1806d0ba 	srli	r3,r3,2
  80ac6c:	29400084 	addi	r5,r5,2
  80ac70:	1880004c 	andi	r2,r3,1
  80ac74:	1000031e 	bne	r2,zero,80ac84 <__lo0bits+0x84>
  80ac78:	1806d07a 	srli	r3,r3,1
  80ac7c:	18000a26 	beq	r3,zero,80aca8 <__lo0bits+0xa8>
  80ac80:	29400044 	addi	r5,r5,1
  80ac84:	2805883a 	mov	r2,r5
  80ac88:	20c00015 	stw	r3,0(r4)
  80ac8c:	f800283a 	ret
  80ac90:	1806d43a 	srli	r3,r3,16
  80ac94:	01400404 	movi	r5,16
  80ac98:	003fe906 	br	80ac40 <__lo0bits+0x40>
  80ac9c:	000b883a 	mov	r5,zero
  80aca0:	2805883a 	mov	r2,r5
  80aca4:	f800283a 	ret
  80aca8:	01400804 	movi	r5,32
  80acac:	2805883a 	mov	r2,r5
  80acb0:	f800283a 	ret
  80acb4:	1804d07a 	srli	r2,r3,1
  80acb8:	01400044 	movi	r5,1
  80acbc:	20800015 	stw	r2,0(r4)
  80acc0:	003fda06 	br	80ac2c <__lo0bits+0x2c>

0080acc4 <__mcmp>:
  80acc4:	20800417 	ldw	r2,16(r4)
  80acc8:	28c00417 	ldw	r3,16(r5)
  80accc:	10cfc83a 	sub	r7,r2,r3
  80acd0:	38000c1e 	bne	r7,zero,80ad04 <__mcmp+0x40>
  80acd4:	18c5883a 	add	r2,r3,r3
  80acd8:	1085883a 	add	r2,r2,r2
  80acdc:	10c00504 	addi	r3,r2,20
  80ace0:	21000504 	addi	r4,r4,20
  80ace4:	28cb883a 	add	r5,r5,r3
  80ace8:	2085883a 	add	r2,r4,r2
  80acec:	10bfff04 	addi	r2,r2,-4
  80acf0:	297fff04 	addi	r5,r5,-4
  80acf4:	11800017 	ldw	r6,0(r2)
  80acf8:	28c00017 	ldw	r3,0(r5)
  80acfc:	30c0031e 	bne	r6,r3,80ad0c <__mcmp+0x48>
  80ad00:	20bffa36 	bltu	r4,r2,80acec <__mcmp+0x28>
  80ad04:	3805883a 	mov	r2,r7
  80ad08:	f800283a 	ret
  80ad0c:	30c00336 	bltu	r6,r3,80ad1c <__mcmp+0x58>
  80ad10:	01c00044 	movi	r7,1
  80ad14:	3805883a 	mov	r2,r7
  80ad18:	f800283a 	ret
  80ad1c:	01ffffc4 	movi	r7,-1
  80ad20:	003ff806 	br	80ad04 <__mcmp+0x40>

0080ad24 <__ulp>:
  80ad24:	295ffc2c 	andhi	r5,r5,32752
  80ad28:	013f3034 	movhi	r4,64704
  80ad2c:	290b883a 	add	r5,r5,r4
  80ad30:	0145c83a 	sub	r2,zero,r5
  80ad34:	1007d53a 	srai	r3,r2,20
  80ad38:	000d883a 	mov	r6,zero
  80ad3c:	0140040e 	bge	zero,r5,80ad50 <__ulp+0x2c>
  80ad40:	280f883a 	mov	r7,r5
  80ad44:	3807883a 	mov	r3,r7
  80ad48:	3005883a 	mov	r2,r6
  80ad4c:	f800283a 	ret
  80ad50:	008004c4 	movi	r2,19
  80ad54:	193ffb04 	addi	r4,r3,-20
  80ad58:	10c00c0e 	bge	r2,r3,80ad8c <__ulp+0x68>
  80ad5c:	008007c4 	movi	r2,31
  80ad60:	1107c83a 	sub	r3,r2,r4
  80ad64:	00800784 	movi	r2,30
  80ad68:	01400044 	movi	r5,1
  80ad6c:	11000216 	blt	r2,r4,80ad78 <__ulp+0x54>
  80ad70:	00800044 	movi	r2,1
  80ad74:	10ca983a 	sll	r5,r2,r3
  80ad78:	000f883a 	mov	r7,zero
  80ad7c:	280d883a 	mov	r6,r5
  80ad80:	3807883a 	mov	r3,r7
  80ad84:	3005883a 	mov	r2,r6
  80ad88:	f800283a 	ret
  80ad8c:	00800234 	movhi	r2,8
  80ad90:	10cfd83a 	sra	r7,r2,r3
  80ad94:	000d883a 	mov	r6,zero
  80ad98:	3005883a 	mov	r2,r6
  80ad9c:	3807883a 	mov	r3,r7
  80ada0:	f800283a 	ret

0080ada4 <__b2d>:
  80ada4:	20800417 	ldw	r2,16(r4)
  80ada8:	defff904 	addi	sp,sp,-28
  80adac:	dd000415 	stw	r20,16(sp)
  80adb0:	1085883a 	add	r2,r2,r2
  80adb4:	25000504 	addi	r20,r4,20
  80adb8:	1085883a 	add	r2,r2,r2
  80adbc:	dc000015 	stw	r16,0(sp)
  80adc0:	a0a1883a 	add	r16,r20,r2
  80adc4:	dd400515 	stw	r21,20(sp)
  80adc8:	857fff17 	ldw	r21,-4(r16)
  80adcc:	dc400115 	stw	r17,4(sp)
  80add0:	dfc00615 	stw	ra,24(sp)
  80add4:	a809883a 	mov	r4,r21
  80add8:	2823883a 	mov	r17,r5
  80addc:	dcc00315 	stw	r19,12(sp)
  80ade0:	dc800215 	stw	r18,8(sp)
  80ade4:	080ab900 	call	80ab90 <__hi0bits>
  80ade8:	100b883a 	mov	r5,r2
  80adec:	00800804 	movi	r2,32
  80adf0:	1145c83a 	sub	r2,r2,r5
  80adf4:	88800015 	stw	r2,0(r17)
  80adf8:	00800284 	movi	r2,10
  80adfc:	80ffff04 	addi	r3,r16,-4
  80ae00:	11401416 	blt	r2,r5,80ae54 <__b2d+0xb0>
  80ae04:	008002c4 	movi	r2,11
  80ae08:	1149c83a 	sub	r4,r2,r5
  80ae0c:	a0c02736 	bltu	r20,r3,80aeac <__b2d+0x108>
  80ae10:	000d883a 	mov	r6,zero
  80ae14:	28800544 	addi	r2,r5,21
  80ae18:	a906d83a 	srl	r3,r21,r4
  80ae1c:	a884983a 	sll	r2,r21,r2
  80ae20:	1ccffc34 	orhi	r19,r3,16368
  80ae24:	11a4b03a 	or	r18,r2,r6
  80ae28:	9005883a 	mov	r2,r18
  80ae2c:	9807883a 	mov	r3,r19
  80ae30:	dfc00617 	ldw	ra,24(sp)
  80ae34:	dd400517 	ldw	r21,20(sp)
  80ae38:	dd000417 	ldw	r20,16(sp)
  80ae3c:	dcc00317 	ldw	r19,12(sp)
  80ae40:	dc800217 	ldw	r18,8(sp)
  80ae44:	dc400117 	ldw	r17,4(sp)
  80ae48:	dc000017 	ldw	r16,0(sp)
  80ae4c:	dec00704 	addi	sp,sp,28
  80ae50:	f800283a 	ret
  80ae54:	a0c00e36 	bltu	r20,r3,80ae90 <__b2d+0xec>
  80ae58:	293ffd44 	addi	r4,r5,-11
  80ae5c:	000d883a 	mov	r6,zero
  80ae60:	20000f26 	beq	r4,zero,80aea0 <__b2d+0xfc>
  80ae64:	00800804 	movi	r2,32
  80ae68:	110bc83a 	sub	r5,r2,r4
  80ae6c:	a0c01236 	bltu	r20,r3,80aeb8 <__b2d+0x114>
  80ae70:	000f883a 	mov	r7,zero
  80ae74:	a904983a 	sll	r2,r21,r4
  80ae78:	3146d83a 	srl	r3,r6,r5
  80ae7c:	3108983a 	sll	r4,r6,r4
  80ae80:	108ffc34 	orhi	r2,r2,16368
  80ae84:	18a6b03a 	or	r19,r3,r2
  80ae88:	3924b03a 	or	r18,r7,r4
  80ae8c:	003fe606 	br	80ae28 <__b2d+0x84>
  80ae90:	293ffd44 	addi	r4,r5,-11
  80ae94:	81bffe17 	ldw	r6,-8(r16)
  80ae98:	80fffe04 	addi	r3,r16,-8
  80ae9c:	203ff11e 	bne	r4,zero,80ae64 <__b2d+0xc0>
  80aea0:	accffc34 	orhi	r19,r21,16368
  80aea4:	3025883a 	mov	r18,r6
  80aea8:	003fdf06 	br	80ae28 <__b2d+0x84>
  80aeac:	18bfff17 	ldw	r2,-4(r3)
  80aeb0:	110cd83a 	srl	r6,r2,r4
  80aeb4:	003fd706 	br	80ae14 <__b2d+0x70>
  80aeb8:	18bfff17 	ldw	r2,-4(r3)
  80aebc:	114ed83a 	srl	r7,r2,r5
  80aec0:	003fec06 	br	80ae74 <__b2d+0xd0>

0080aec4 <__ratio>:
  80aec4:	defff904 	addi	sp,sp,-28
  80aec8:	dc400215 	stw	r17,8(sp)
  80aecc:	2823883a 	mov	r17,r5
  80aed0:	d80b883a 	mov	r5,sp
  80aed4:	dfc00615 	stw	ra,24(sp)
  80aed8:	dd000515 	stw	r20,20(sp)
  80aedc:	dcc00415 	stw	r19,16(sp)
  80aee0:	dc800315 	stw	r18,12(sp)
  80aee4:	2025883a 	mov	r18,r4
  80aee8:	080ada40 	call	80ada4 <__b2d>
  80aeec:	8809883a 	mov	r4,r17
  80aef0:	d9400104 	addi	r5,sp,4
  80aef4:	1027883a 	mov	r19,r2
  80aef8:	1829883a 	mov	r20,r3
  80aefc:	080ada40 	call	80ada4 <__b2d>
  80af00:	89000417 	ldw	r4,16(r17)
  80af04:	91c00417 	ldw	r7,16(r18)
  80af08:	d9800117 	ldw	r6,4(sp)
  80af0c:	180b883a 	mov	r5,r3
  80af10:	390fc83a 	sub	r7,r7,r4
  80af14:	1009883a 	mov	r4,r2
  80af18:	d8800017 	ldw	r2,0(sp)
  80af1c:	380e917a 	slli	r7,r7,5
  80af20:	2011883a 	mov	r8,r4
  80af24:	1185c83a 	sub	r2,r2,r6
  80af28:	11c5883a 	add	r2,r2,r7
  80af2c:	1006953a 	slli	r3,r2,20
  80af30:	2813883a 	mov	r9,r5
  80af34:	00800d0e 	bge	zero,r2,80af6c <__ratio+0xa8>
  80af38:	1d29883a 	add	r20,r3,r20
  80af3c:	a00b883a 	mov	r5,r20
  80af40:	480f883a 	mov	r7,r9
  80af44:	9809883a 	mov	r4,r19
  80af48:	400d883a 	mov	r6,r8
  80af4c:	08045880 	call	804588 <__divdf3>
  80af50:	dfc00617 	ldw	ra,24(sp)
  80af54:	dd000517 	ldw	r20,20(sp)
  80af58:	dcc00417 	ldw	r19,16(sp)
  80af5c:	dc800317 	ldw	r18,12(sp)
  80af60:	dc400217 	ldw	r17,8(sp)
  80af64:	dec00704 	addi	sp,sp,28
  80af68:	f800283a 	ret
  80af6c:	28d3c83a 	sub	r9,r5,r3
  80af70:	003ff206 	br	80af3c <__ratio+0x78>

0080af74 <_mprec_log10>:
  80af74:	defffe04 	addi	sp,sp,-8
  80af78:	008005c4 	movi	r2,23
  80af7c:	dc000015 	stw	r16,0(sp)
  80af80:	dfc00115 	stw	ra,4(sp)
  80af84:	2021883a 	mov	r16,r4
  80af88:	11000c16 	blt	r2,r4,80afbc <_mprec_log10+0x48>
  80af8c:	200490fa 	slli	r2,r4,3
  80af90:	00c020b4 	movhi	r3,130
  80af94:	18e0ad04 	addi	r3,r3,-32076
  80af98:	10c5883a 	add	r2,r2,r3
  80af9c:	12400117 	ldw	r9,4(r2)
  80afa0:	12000017 	ldw	r8,0(r2)
  80afa4:	4807883a 	mov	r3,r9
  80afa8:	4005883a 	mov	r2,r8
  80afac:	dfc00117 	ldw	ra,4(sp)
  80afb0:	dc000017 	ldw	r16,0(sp)
  80afb4:	dec00204 	addi	sp,sp,8
  80afb8:	f800283a 	ret
  80afbc:	0011883a 	mov	r8,zero
  80afc0:	024ffc34 	movhi	r9,16368
  80afc4:	0005883a 	mov	r2,zero
  80afc8:	00d00934 	movhi	r3,16420
  80afcc:	480b883a 	mov	r5,r9
  80afd0:	4009883a 	mov	r4,r8
  80afd4:	180f883a 	mov	r7,r3
  80afd8:	100d883a 	mov	r6,r2
  80afdc:	08041c40 	call	8041c4 <__muldf3>
  80afe0:	843fffc4 	addi	r16,r16,-1
  80afe4:	1011883a 	mov	r8,r2
  80afe8:	1813883a 	mov	r9,r3
  80afec:	803ff51e 	bne	r16,zero,80afc4 <_mprec_log10+0x50>
  80aff0:	4005883a 	mov	r2,r8
  80aff4:	4807883a 	mov	r3,r9
  80aff8:	dfc00117 	ldw	ra,4(sp)
  80affc:	dc000017 	ldw	r16,0(sp)
  80b000:	dec00204 	addi	sp,sp,8
  80b004:	f800283a 	ret

0080b008 <__copybits>:
  80b008:	297fffc4 	addi	r5,r5,-1
  80b00c:	30800417 	ldw	r2,16(r6)
  80b010:	280bd17a 	srai	r5,r5,5
  80b014:	31800504 	addi	r6,r6,20
  80b018:	1085883a 	add	r2,r2,r2
  80b01c:	294b883a 	add	r5,r5,r5
  80b020:	294b883a 	add	r5,r5,r5
  80b024:	1085883a 	add	r2,r2,r2
  80b028:	290b883a 	add	r5,r5,r4
  80b02c:	3087883a 	add	r3,r6,r2
  80b030:	29400104 	addi	r5,r5,4
  80b034:	30c0052e 	bgeu	r6,r3,80b04c <__copybits+0x44>
  80b038:	30800017 	ldw	r2,0(r6)
  80b03c:	31800104 	addi	r6,r6,4
  80b040:	20800015 	stw	r2,0(r4)
  80b044:	21000104 	addi	r4,r4,4
  80b048:	30fffb36 	bltu	r6,r3,80b038 <__copybits+0x30>
  80b04c:	2140032e 	bgeu	r4,r5,80b05c <__copybits+0x54>
  80b050:	20000015 	stw	zero,0(r4)
  80b054:	21000104 	addi	r4,r4,4
  80b058:	217ffd36 	bltu	r4,r5,80b050 <__copybits+0x48>
  80b05c:	f800283a 	ret

0080b060 <__any_on>:
  80b060:	20800417 	ldw	r2,16(r4)
  80b064:	2807d17a 	srai	r3,r5,5
  80b068:	21000504 	addi	r4,r4,20
  80b06c:	10c00d0e 	bge	r2,r3,80b0a4 <__any_on+0x44>
  80b070:	1085883a 	add	r2,r2,r2
  80b074:	1085883a 	add	r2,r2,r2
  80b078:	208d883a 	add	r6,r4,r2
  80b07c:	2180182e 	bgeu	r4,r6,80b0e0 <__any_on+0x80>
  80b080:	30bfff17 	ldw	r2,-4(r6)
  80b084:	30ffff04 	addi	r3,r6,-4
  80b088:	1000041e 	bne	r2,zero,80b09c <__any_on+0x3c>
  80b08c:	20c0142e 	bgeu	r4,r3,80b0e0 <__any_on+0x80>
  80b090:	18ffff04 	addi	r3,r3,-4
  80b094:	18800017 	ldw	r2,0(r3)
  80b098:	103ffc26 	beq	r2,zero,80b08c <__any_on+0x2c>
  80b09c:	00800044 	movi	r2,1
  80b0a0:	f800283a 	ret
  80b0a4:	18800a0e 	bge	r3,r2,80b0d0 <__any_on+0x70>
  80b0a8:	294007cc 	andi	r5,r5,31
  80b0ac:	28000826 	beq	r5,zero,80b0d0 <__any_on+0x70>
  80b0b0:	18c5883a 	add	r2,r3,r3
  80b0b4:	1085883a 	add	r2,r2,r2
  80b0b8:	208d883a 	add	r6,r4,r2
  80b0bc:	30c00017 	ldw	r3,0(r6)
  80b0c0:	1944d83a 	srl	r2,r3,r5
  80b0c4:	1144983a 	sll	r2,r2,r5
  80b0c8:	18bff41e 	bne	r3,r2,80b09c <__any_on+0x3c>
  80b0cc:	003feb06 	br	80b07c <__any_on+0x1c>
  80b0d0:	18c5883a 	add	r2,r3,r3
  80b0d4:	1085883a 	add	r2,r2,r2
  80b0d8:	208d883a 	add	r6,r4,r2
  80b0dc:	003fe706 	br	80b07c <__any_on+0x1c>
  80b0e0:	0005883a 	mov	r2,zero
  80b0e4:	f800283a 	ret

0080b0e8 <_Balloc>:
  80b0e8:	20c01317 	ldw	r3,76(r4)
  80b0ec:	defffb04 	addi	sp,sp,-20
  80b0f0:	dcc00315 	stw	r19,12(sp)
  80b0f4:	dc800215 	stw	r18,8(sp)
  80b0f8:	dfc00415 	stw	ra,16(sp)
  80b0fc:	2825883a 	mov	r18,r5
  80b100:	dc400115 	stw	r17,4(sp)
  80b104:	dc000015 	stw	r16,0(sp)
  80b108:	2027883a 	mov	r19,r4
  80b10c:	01800404 	movi	r6,16
  80b110:	01400104 	movi	r5,4
  80b114:	18001726 	beq	r3,zero,80b174 <_Balloc+0x8c>
  80b118:	01400044 	movi	r5,1
  80b11c:	9485883a 	add	r2,r18,r18
  80b120:	2ca2983a 	sll	r17,r5,r18
  80b124:	1085883a 	add	r2,r2,r2
  80b128:	10c7883a 	add	r3,r2,r3
  80b12c:	1c000017 	ldw	r16,0(r3)
  80b130:	8c4d883a 	add	r6,r17,r17
  80b134:	318d883a 	add	r6,r6,r6
  80b138:	9809883a 	mov	r4,r19
  80b13c:	31800504 	addi	r6,r6,20
  80b140:	80001226 	beq	r16,zero,80b18c <_Balloc+0xa4>
  80b144:	80800017 	ldw	r2,0(r16)
  80b148:	18800015 	stw	r2,0(r3)
  80b14c:	80000415 	stw	zero,16(r16)
  80b150:	80000315 	stw	zero,12(r16)
  80b154:	8005883a 	mov	r2,r16
  80b158:	dfc00417 	ldw	ra,16(sp)
  80b15c:	dcc00317 	ldw	r19,12(sp)
  80b160:	dc800217 	ldw	r18,8(sp)
  80b164:	dc400117 	ldw	r17,4(sp)
  80b168:	dc000017 	ldw	r16,0(sp)
  80b16c:	dec00504 	addi	sp,sp,20
  80b170:	f800283a 	ret
  80b174:	080c4400 	call	80c440 <_calloc_r>
  80b178:	1007883a 	mov	r3,r2
  80b17c:	0021883a 	mov	r16,zero
  80b180:	98801315 	stw	r2,76(r19)
  80b184:	103fe41e 	bne	r2,zero,80b118 <_Balloc+0x30>
  80b188:	003ff206 	br	80b154 <_Balloc+0x6c>
  80b18c:	080c4400 	call	80c440 <_calloc_r>
  80b190:	103ff026 	beq	r2,zero,80b154 <_Balloc+0x6c>
  80b194:	1021883a 	mov	r16,r2
  80b198:	14800115 	stw	r18,4(r2)
  80b19c:	14400215 	stw	r17,8(r2)
  80b1a0:	003fea06 	br	80b14c <_Balloc+0x64>

0080b1a4 <__d2b>:
  80b1a4:	defff504 	addi	sp,sp,-44
  80b1a8:	dcc00515 	stw	r19,20(sp)
  80b1ac:	04c00044 	movi	r19,1
  80b1b0:	dc000215 	stw	r16,8(sp)
  80b1b4:	2821883a 	mov	r16,r5
  80b1b8:	980b883a 	mov	r5,r19
  80b1bc:	ddc00915 	stw	r23,36(sp)
  80b1c0:	dd800815 	stw	r22,32(sp)
  80b1c4:	dd400715 	stw	r21,28(sp)
  80b1c8:	dd000615 	stw	r20,24(sp)
  80b1cc:	dc800415 	stw	r18,16(sp)
  80b1d0:	dc400315 	stw	r17,12(sp)
  80b1d4:	dfc00a15 	stw	ra,40(sp)
  80b1d8:	3023883a 	mov	r17,r6
  80b1dc:	382d883a 	mov	r22,r7
  80b1e0:	ddc00b17 	ldw	r23,44(sp)
  80b1e4:	080b0e80 	call	80b0e8 <_Balloc>
  80b1e8:	1025883a 	mov	r18,r2
  80b1ec:	00a00034 	movhi	r2,32768
  80b1f0:	10bfffc4 	addi	r2,r2,-1
  80b1f4:	8888703a 	and	r4,r17,r2
  80b1f8:	202ad53a 	srli	r21,r4,20
  80b1fc:	00800434 	movhi	r2,16
  80b200:	10bfffc4 	addi	r2,r2,-1
  80b204:	8886703a 	and	r3,r17,r2
  80b208:	a829003a 	cmpeq	r20,r21,zero
  80b20c:	800b883a 	mov	r5,r16
  80b210:	d8c00115 	stw	r3,4(sp)
  80b214:	94000504 	addi	r16,r18,20
  80b218:	a000021e 	bne	r20,zero,80b224 <__d2b+0x80>
  80b21c:	18c00434 	orhi	r3,r3,16
  80b220:	d8c00115 	stw	r3,4(sp)
  80b224:	28002726 	beq	r5,zero,80b2c4 <__d2b+0x120>
  80b228:	d809883a 	mov	r4,sp
  80b22c:	d9400015 	stw	r5,0(sp)
  80b230:	080ac000 	call	80ac00 <__lo0bits>
  80b234:	100d883a 	mov	r6,r2
  80b238:	10003526 	beq	r2,zero,80b310 <__d2b+0x16c>
  80b23c:	d8c00117 	ldw	r3,4(sp)
  80b240:	00800804 	movi	r2,32
  80b244:	1185c83a 	sub	r2,r2,r6
  80b248:	d9000017 	ldw	r4,0(sp)
  80b24c:	1886983a 	sll	r3,r3,r2
  80b250:	1906b03a 	or	r3,r3,r4
  80b254:	90c00515 	stw	r3,20(r18)
  80b258:	d8c00117 	ldw	r3,4(sp)
  80b25c:	1986d83a 	srl	r3,r3,r6
  80b260:	d8c00115 	stw	r3,4(sp)
  80b264:	180b003a 	cmpeq	r5,r3,zero
  80b268:	00800084 	movi	r2,2
  80b26c:	114bc83a 	sub	r5,r2,r5
  80b270:	80c00115 	stw	r3,4(r16)
  80b274:	91400415 	stw	r5,16(r18)
  80b278:	a0001a1e 	bne	r20,zero,80b2e4 <__d2b+0x140>
  80b27c:	3545883a 	add	r2,r6,r21
  80b280:	10bef344 	addi	r2,r2,-1075
  80b284:	00c00d44 	movi	r3,53
  80b288:	b0800015 	stw	r2,0(r22)
  80b28c:	1987c83a 	sub	r3,r3,r6
  80b290:	b8c00015 	stw	r3,0(r23)
  80b294:	9005883a 	mov	r2,r18
  80b298:	dfc00a17 	ldw	ra,40(sp)
  80b29c:	ddc00917 	ldw	r23,36(sp)
  80b2a0:	dd800817 	ldw	r22,32(sp)
  80b2a4:	dd400717 	ldw	r21,28(sp)
  80b2a8:	dd000617 	ldw	r20,24(sp)
  80b2ac:	dcc00517 	ldw	r19,20(sp)
  80b2b0:	dc800417 	ldw	r18,16(sp)
  80b2b4:	dc400317 	ldw	r17,12(sp)
  80b2b8:	dc000217 	ldw	r16,8(sp)
  80b2bc:	dec00b04 	addi	sp,sp,44
  80b2c0:	f800283a 	ret
  80b2c4:	d9000104 	addi	r4,sp,4
  80b2c8:	080ac000 	call	80ac00 <__lo0bits>
  80b2cc:	11800804 	addi	r6,r2,32
  80b2d0:	d8800117 	ldw	r2,4(sp)
  80b2d4:	94c00415 	stw	r19,16(r18)
  80b2d8:	980b883a 	mov	r5,r19
  80b2dc:	90800515 	stw	r2,20(r18)
  80b2e0:	a03fe626 	beq	r20,zero,80b27c <__d2b+0xd8>
  80b2e4:	2945883a 	add	r2,r5,r5
  80b2e8:	1085883a 	add	r2,r2,r2
  80b2ec:	1405883a 	add	r2,r2,r16
  80b2f0:	113fff17 	ldw	r4,-4(r2)
  80b2f4:	30fef384 	addi	r3,r6,-1074
  80b2f8:	2820917a 	slli	r16,r5,5
  80b2fc:	b0c00015 	stw	r3,0(r22)
  80b300:	080ab900 	call	80ab90 <__hi0bits>
  80b304:	80a1c83a 	sub	r16,r16,r2
  80b308:	bc000015 	stw	r16,0(r23)
  80b30c:	003fe106 	br	80b294 <__d2b+0xf0>
  80b310:	d8800017 	ldw	r2,0(sp)
  80b314:	90800515 	stw	r2,20(r18)
  80b318:	d8c00117 	ldw	r3,4(sp)
  80b31c:	003fd106 	br	80b264 <__d2b+0xc0>

0080b320 <__mdiff>:
  80b320:	defffb04 	addi	sp,sp,-20
  80b324:	dc000015 	stw	r16,0(sp)
  80b328:	2821883a 	mov	r16,r5
  80b32c:	dc800215 	stw	r18,8(sp)
  80b330:	300b883a 	mov	r5,r6
  80b334:	2025883a 	mov	r18,r4
  80b338:	8009883a 	mov	r4,r16
  80b33c:	dc400115 	stw	r17,4(sp)
  80b340:	dfc00415 	stw	ra,16(sp)
  80b344:	dcc00315 	stw	r19,12(sp)
  80b348:	3023883a 	mov	r17,r6
  80b34c:	080acc40 	call	80acc4 <__mcmp>
  80b350:	10004226 	beq	r2,zero,80b45c <__mdiff+0x13c>
  80b354:	10005016 	blt	r2,zero,80b498 <__mdiff+0x178>
  80b358:	0027883a 	mov	r19,zero
  80b35c:	81400117 	ldw	r5,4(r16)
  80b360:	9009883a 	mov	r4,r18
  80b364:	080b0e80 	call	80b0e8 <_Balloc>
  80b368:	1019883a 	mov	r12,r2
  80b36c:	82800417 	ldw	r10,16(r16)
  80b370:	88800417 	ldw	r2,16(r17)
  80b374:	81800504 	addi	r6,r16,20
  80b378:	5287883a 	add	r3,r10,r10
  80b37c:	1085883a 	add	r2,r2,r2
  80b380:	18c7883a 	add	r3,r3,r3
  80b384:	1085883a 	add	r2,r2,r2
  80b388:	8a000504 	addi	r8,r17,20
  80b38c:	64c00315 	stw	r19,12(r12)
  80b390:	30db883a 	add	r13,r6,r3
  80b394:	4097883a 	add	r11,r8,r2
  80b398:	61c00504 	addi	r7,r12,20
  80b39c:	0013883a 	mov	r9,zero
  80b3a0:	31000017 	ldw	r4,0(r6)
  80b3a4:	41400017 	ldw	r5,0(r8)
  80b3a8:	42000104 	addi	r8,r8,4
  80b3ac:	20bfffcc 	andi	r2,r4,65535
  80b3b0:	28ffffcc 	andi	r3,r5,65535
  80b3b4:	10c5c83a 	sub	r2,r2,r3
  80b3b8:	1245883a 	add	r2,r2,r9
  80b3bc:	2008d43a 	srli	r4,r4,16
  80b3c0:	280ad43a 	srli	r5,r5,16
  80b3c4:	1007d43a 	srai	r3,r2,16
  80b3c8:	3880000d 	sth	r2,0(r7)
  80b3cc:	2149c83a 	sub	r4,r4,r5
  80b3d0:	20c9883a 	add	r4,r4,r3
  80b3d4:	3900008d 	sth	r4,2(r7)
  80b3d8:	31800104 	addi	r6,r6,4
  80b3dc:	39c00104 	addi	r7,r7,4
  80b3e0:	2013d43a 	srai	r9,r4,16
  80b3e4:	42ffee36 	bltu	r8,r11,80b3a0 <__mdiff+0x80>
  80b3e8:	33400c2e 	bgeu	r6,r13,80b41c <__mdiff+0xfc>
  80b3ec:	30800017 	ldw	r2,0(r6)
  80b3f0:	31800104 	addi	r6,r6,4
  80b3f4:	10ffffcc 	andi	r3,r2,65535
  80b3f8:	1a47883a 	add	r3,r3,r9
  80b3fc:	1004d43a 	srli	r2,r2,16
  80b400:	1809d43a 	srai	r4,r3,16
  80b404:	38c0000d 	sth	r3,0(r7)
  80b408:	1105883a 	add	r2,r2,r4
  80b40c:	3880008d 	sth	r2,2(r7)
  80b410:	1013d43a 	srai	r9,r2,16
  80b414:	39c00104 	addi	r7,r7,4
  80b418:	337ff436 	bltu	r6,r13,80b3ec <__mdiff+0xcc>
  80b41c:	38bfff17 	ldw	r2,-4(r7)
  80b420:	38ffff04 	addi	r3,r7,-4
  80b424:	1000041e 	bne	r2,zero,80b438 <__mdiff+0x118>
  80b428:	18ffff04 	addi	r3,r3,-4
  80b42c:	18800017 	ldw	r2,0(r3)
  80b430:	52bfffc4 	addi	r10,r10,-1
  80b434:	103ffc26 	beq	r2,zero,80b428 <__mdiff+0x108>
  80b438:	6005883a 	mov	r2,r12
  80b43c:	62800415 	stw	r10,16(r12)
  80b440:	dfc00417 	ldw	ra,16(sp)
  80b444:	dcc00317 	ldw	r19,12(sp)
  80b448:	dc800217 	ldw	r18,8(sp)
  80b44c:	dc400117 	ldw	r17,4(sp)
  80b450:	dc000017 	ldw	r16,0(sp)
  80b454:	dec00504 	addi	sp,sp,20
  80b458:	f800283a 	ret
  80b45c:	9009883a 	mov	r4,r18
  80b460:	000b883a 	mov	r5,zero
  80b464:	080b0e80 	call	80b0e8 <_Balloc>
  80b468:	1019883a 	mov	r12,r2
  80b46c:	00800044 	movi	r2,1
  80b470:	60800415 	stw	r2,16(r12)
  80b474:	6005883a 	mov	r2,r12
  80b478:	60000515 	stw	zero,20(r12)
  80b47c:	dfc00417 	ldw	ra,16(sp)
  80b480:	dcc00317 	ldw	r19,12(sp)
  80b484:	dc800217 	ldw	r18,8(sp)
  80b488:	dc400117 	ldw	r17,4(sp)
  80b48c:	dc000017 	ldw	r16,0(sp)
  80b490:	dec00504 	addi	sp,sp,20
  80b494:	f800283a 	ret
  80b498:	880d883a 	mov	r6,r17
  80b49c:	04c00044 	movi	r19,1
  80b4a0:	8023883a 	mov	r17,r16
  80b4a4:	3021883a 	mov	r16,r6
  80b4a8:	003fac06 	br	80b35c <__mdiff+0x3c>

0080b4ac <__lshift>:
  80b4ac:	defff904 	addi	sp,sp,-28
  80b4b0:	28800417 	ldw	r2,16(r5)
  80b4b4:	dc000015 	stw	r16,0(sp)
  80b4b8:	3021d17a 	srai	r16,r6,5
  80b4bc:	28c00217 	ldw	r3,8(r5)
  80b4c0:	10800044 	addi	r2,r2,1
  80b4c4:	dc400115 	stw	r17,4(sp)
  80b4c8:	80a3883a 	add	r17,r16,r2
  80b4cc:	dd400515 	stw	r21,20(sp)
  80b4d0:	dd000415 	stw	r20,16(sp)
  80b4d4:	dc800215 	stw	r18,8(sp)
  80b4d8:	dfc00615 	stw	ra,24(sp)
  80b4dc:	2825883a 	mov	r18,r5
  80b4e0:	dcc00315 	stw	r19,12(sp)
  80b4e4:	3029883a 	mov	r20,r6
  80b4e8:	202b883a 	mov	r21,r4
  80b4ec:	29400117 	ldw	r5,4(r5)
  80b4f0:	1c40030e 	bge	r3,r17,80b500 <__lshift+0x54>
  80b4f4:	18c7883a 	add	r3,r3,r3
  80b4f8:	29400044 	addi	r5,r5,1
  80b4fc:	1c7ffd16 	blt	r3,r17,80b4f4 <__lshift+0x48>
  80b500:	a809883a 	mov	r4,r21
  80b504:	080b0e80 	call	80b0e8 <_Balloc>
  80b508:	1027883a 	mov	r19,r2
  80b50c:	11400504 	addi	r5,r2,20
  80b510:	0400090e 	bge	zero,r16,80b538 <__lshift+0x8c>
  80b514:	2805883a 	mov	r2,r5
  80b518:	0007883a 	mov	r3,zero
  80b51c:	18c00044 	addi	r3,r3,1
  80b520:	10000015 	stw	zero,0(r2)
  80b524:	10800104 	addi	r2,r2,4
  80b528:	80fffc1e 	bne	r16,r3,80b51c <__lshift+0x70>
  80b52c:	8405883a 	add	r2,r16,r16
  80b530:	1085883a 	add	r2,r2,r2
  80b534:	288b883a 	add	r5,r5,r2
  80b538:	90800417 	ldw	r2,16(r18)
  80b53c:	91000504 	addi	r4,r18,20
  80b540:	a18007cc 	andi	r6,r20,31
  80b544:	1085883a 	add	r2,r2,r2
  80b548:	1085883a 	add	r2,r2,r2
  80b54c:	208f883a 	add	r7,r4,r2
  80b550:	30001e26 	beq	r6,zero,80b5cc <__lshift+0x120>
  80b554:	00800804 	movi	r2,32
  80b558:	1191c83a 	sub	r8,r2,r6
  80b55c:	0007883a 	mov	r3,zero
  80b560:	20800017 	ldw	r2,0(r4)
  80b564:	1184983a 	sll	r2,r2,r6
  80b568:	1884b03a 	or	r2,r3,r2
  80b56c:	28800015 	stw	r2,0(r5)
  80b570:	20c00017 	ldw	r3,0(r4)
  80b574:	21000104 	addi	r4,r4,4
  80b578:	29400104 	addi	r5,r5,4
  80b57c:	1a06d83a 	srl	r3,r3,r8
  80b580:	21fff736 	bltu	r4,r7,80b560 <__lshift+0xb4>
  80b584:	28c00015 	stw	r3,0(r5)
  80b588:	18000126 	beq	r3,zero,80b590 <__lshift+0xe4>
  80b58c:	8c400044 	addi	r17,r17,1
  80b590:	88bfffc4 	addi	r2,r17,-1
  80b594:	98800415 	stw	r2,16(r19)
  80b598:	a809883a 	mov	r4,r21
  80b59c:	900b883a 	mov	r5,r18
  80b5a0:	080ab680 	call	80ab68 <_Bfree>
  80b5a4:	9805883a 	mov	r2,r19
  80b5a8:	dfc00617 	ldw	ra,24(sp)
  80b5ac:	dd400517 	ldw	r21,20(sp)
  80b5b0:	dd000417 	ldw	r20,16(sp)
  80b5b4:	dcc00317 	ldw	r19,12(sp)
  80b5b8:	dc800217 	ldw	r18,8(sp)
  80b5bc:	dc400117 	ldw	r17,4(sp)
  80b5c0:	dc000017 	ldw	r16,0(sp)
  80b5c4:	dec00704 	addi	sp,sp,28
  80b5c8:	f800283a 	ret
  80b5cc:	20800017 	ldw	r2,0(r4)
  80b5d0:	21000104 	addi	r4,r4,4
  80b5d4:	28800015 	stw	r2,0(r5)
  80b5d8:	29400104 	addi	r5,r5,4
  80b5dc:	21ffec2e 	bgeu	r4,r7,80b590 <__lshift+0xe4>
  80b5e0:	20800017 	ldw	r2,0(r4)
  80b5e4:	21000104 	addi	r4,r4,4
  80b5e8:	28800015 	stw	r2,0(r5)
  80b5ec:	29400104 	addi	r5,r5,4
  80b5f0:	21fff636 	bltu	r4,r7,80b5cc <__lshift+0x120>
  80b5f4:	003fe606 	br	80b590 <__lshift+0xe4>

0080b5f8 <__multiply>:
  80b5f8:	defff904 	addi	sp,sp,-28
  80b5fc:	dcc00315 	stw	r19,12(sp)
  80b600:	dc800215 	stw	r18,8(sp)
  80b604:	2cc00417 	ldw	r19,16(r5)
  80b608:	34800417 	ldw	r18,16(r6)
  80b60c:	dd000415 	stw	r20,16(sp)
  80b610:	dc400115 	stw	r17,4(sp)
  80b614:	dfc00615 	stw	ra,24(sp)
  80b618:	dd400515 	stw	r21,20(sp)
  80b61c:	dc000015 	stw	r16,0(sp)
  80b620:	2823883a 	mov	r17,r5
  80b624:	3029883a 	mov	r20,r6
  80b628:	9c80040e 	bge	r19,r18,80b63c <__multiply+0x44>
  80b62c:	9027883a 	mov	r19,r18
  80b630:	2c800417 	ldw	r18,16(r5)
  80b634:	2829883a 	mov	r20,r5
  80b638:	3023883a 	mov	r17,r6
  80b63c:	88800217 	ldw	r2,8(r17)
  80b640:	9ca1883a 	add	r16,r19,r18
  80b644:	89400117 	ldw	r5,4(r17)
  80b648:	1400010e 	bge	r2,r16,80b650 <__multiply+0x58>
  80b64c:	29400044 	addi	r5,r5,1
  80b650:	080b0e80 	call	80b0e8 <_Balloc>
  80b654:	102b883a 	mov	r21,r2
  80b658:	8405883a 	add	r2,r16,r16
  80b65c:	1085883a 	add	r2,r2,r2
  80b660:	a9000504 	addi	r4,r21,20
  80b664:	209d883a 	add	r14,r4,r2
  80b668:	2380042e 	bgeu	r4,r14,80b67c <__multiply+0x84>
  80b66c:	2005883a 	mov	r2,r4
  80b670:	10000015 	stw	zero,0(r2)
  80b674:	10800104 	addi	r2,r2,4
  80b678:	13bffd36 	bltu	r2,r14,80b670 <__multiply+0x78>
  80b67c:	9485883a 	add	r2,r18,r18
  80b680:	9cc7883a 	add	r3,r19,r19
  80b684:	a1800504 	addi	r6,r20,20
  80b688:	1085883a 	add	r2,r2,r2
  80b68c:	8b400504 	addi	r13,r17,20
  80b690:	18c7883a 	add	r3,r3,r3
  80b694:	309f883a 	add	r15,r6,r2
  80b698:	68d7883a 	add	r11,r13,r3
  80b69c:	33c03b2e 	bgeu	r6,r15,80b78c <__multiply+0x194>
  80b6a0:	2019883a 	mov	r12,r4
  80b6a4:	30800017 	ldw	r2,0(r6)
  80b6a8:	127fffcc 	andi	r9,r2,65535
  80b6ac:	48001826 	beq	r9,zero,80b710 <__multiply+0x118>
  80b6b0:	6811883a 	mov	r8,r13
  80b6b4:	600f883a 	mov	r7,r12
  80b6b8:	0015883a 	mov	r10,zero
  80b6bc:	40c00017 	ldw	r3,0(r8)
  80b6c0:	39400017 	ldw	r5,0(r7)
  80b6c4:	42000104 	addi	r8,r8,4
  80b6c8:	193fffcc 	andi	r4,r3,65535
  80b6cc:	4909383a 	mul	r4,r9,r4
  80b6d0:	1806d43a 	srli	r3,r3,16
  80b6d4:	28bfffcc 	andi	r2,r5,65535
  80b6d8:	5085883a 	add	r2,r10,r2
  80b6dc:	2089883a 	add	r4,r4,r2
  80b6e0:	48c7383a 	mul	r3,r9,r3
  80b6e4:	280ad43a 	srli	r5,r5,16
  80b6e8:	2004d43a 	srli	r2,r4,16
  80b6ec:	3900000d 	sth	r4,0(r7)
  80b6f0:	1947883a 	add	r3,r3,r5
  80b6f4:	10c5883a 	add	r2,r2,r3
  80b6f8:	3880008d 	sth	r2,2(r7)
  80b6fc:	1014d43a 	srli	r10,r2,16
  80b700:	39c00104 	addi	r7,r7,4
  80b704:	42ffed36 	bltu	r8,r11,80b6bc <__multiply+0xc4>
  80b708:	3a800015 	stw	r10,0(r7)
  80b70c:	30800017 	ldw	r2,0(r6)
  80b710:	1012d43a 	srli	r9,r2,16
  80b714:	48001926 	beq	r9,zero,80b77c <__multiply+0x184>
  80b718:	60800017 	ldw	r2,0(r12)
  80b71c:	6811883a 	mov	r8,r13
  80b720:	600f883a 	mov	r7,r12
  80b724:	0015883a 	mov	r10,zero
  80b728:	100b883a 	mov	r5,r2
  80b72c:	41000017 	ldw	r4,0(r8)
  80b730:	2806d43a 	srli	r3,r5,16
  80b734:	3880000d 	sth	r2,0(r7)
  80b738:	20bfffcc 	andi	r2,r4,65535
  80b73c:	4885383a 	mul	r2,r9,r2
  80b740:	50c7883a 	add	r3,r10,r3
  80b744:	2008d43a 	srli	r4,r4,16
  80b748:	10c5883a 	add	r2,r2,r3
  80b74c:	3880008d 	sth	r2,2(r7)
  80b750:	39c00104 	addi	r7,r7,4
  80b754:	39400017 	ldw	r5,0(r7)
  80b758:	4909383a 	mul	r4,r9,r4
  80b75c:	1004d43a 	srli	r2,r2,16
  80b760:	28ffffcc 	andi	r3,r5,65535
  80b764:	20c9883a 	add	r4,r4,r3
  80b768:	1105883a 	add	r2,r2,r4
  80b76c:	42000104 	addi	r8,r8,4
  80b770:	1014d43a 	srli	r10,r2,16
  80b774:	42ffed36 	bltu	r8,r11,80b72c <__multiply+0x134>
  80b778:	38800015 	stw	r2,0(r7)
  80b77c:	31800104 	addi	r6,r6,4
  80b780:	33c0022e 	bgeu	r6,r15,80b78c <__multiply+0x194>
  80b784:	63000104 	addi	r12,r12,4
  80b788:	003fc606 	br	80b6a4 <__multiply+0xac>
  80b78c:	0400090e 	bge	zero,r16,80b7b4 <__multiply+0x1bc>
  80b790:	70bfff17 	ldw	r2,-4(r14)
  80b794:	70ffff04 	addi	r3,r14,-4
  80b798:	10000326 	beq	r2,zero,80b7a8 <__multiply+0x1b0>
  80b79c:	00000506 	br	80b7b4 <__multiply+0x1bc>
  80b7a0:	18800017 	ldw	r2,0(r3)
  80b7a4:	1000031e 	bne	r2,zero,80b7b4 <__multiply+0x1bc>
  80b7a8:	843fffc4 	addi	r16,r16,-1
  80b7ac:	18ffff04 	addi	r3,r3,-4
  80b7b0:	803ffb1e 	bne	r16,zero,80b7a0 <__multiply+0x1a8>
  80b7b4:	a805883a 	mov	r2,r21
  80b7b8:	ac000415 	stw	r16,16(r21)
  80b7bc:	dfc00617 	ldw	ra,24(sp)
  80b7c0:	dd400517 	ldw	r21,20(sp)
  80b7c4:	dd000417 	ldw	r20,16(sp)
  80b7c8:	dcc00317 	ldw	r19,12(sp)
  80b7cc:	dc800217 	ldw	r18,8(sp)
  80b7d0:	dc400117 	ldw	r17,4(sp)
  80b7d4:	dc000017 	ldw	r16,0(sp)
  80b7d8:	dec00704 	addi	sp,sp,28
  80b7dc:	f800283a 	ret

0080b7e0 <__i2b>:
  80b7e0:	defffd04 	addi	sp,sp,-12
  80b7e4:	dc000015 	stw	r16,0(sp)
  80b7e8:	04000044 	movi	r16,1
  80b7ec:	dc800115 	stw	r18,4(sp)
  80b7f0:	2825883a 	mov	r18,r5
  80b7f4:	800b883a 	mov	r5,r16
  80b7f8:	dfc00215 	stw	ra,8(sp)
  80b7fc:	080b0e80 	call	80b0e8 <_Balloc>
  80b800:	14000415 	stw	r16,16(r2)
  80b804:	14800515 	stw	r18,20(r2)
  80b808:	dfc00217 	ldw	ra,8(sp)
  80b80c:	dc800117 	ldw	r18,4(sp)
  80b810:	dc000017 	ldw	r16,0(sp)
  80b814:	dec00304 	addi	sp,sp,12
  80b818:	f800283a 	ret

0080b81c <__multadd>:
  80b81c:	defffa04 	addi	sp,sp,-24
  80b820:	dc800215 	stw	r18,8(sp)
  80b824:	2c800417 	ldw	r18,16(r5)
  80b828:	dd000415 	stw	r20,16(sp)
  80b82c:	dcc00315 	stw	r19,12(sp)
  80b830:	dc000015 	stw	r16,0(sp)
  80b834:	dfc00515 	stw	ra,20(sp)
  80b838:	3821883a 	mov	r16,r7
  80b83c:	dc400115 	stw	r17,4(sp)
  80b840:	2827883a 	mov	r19,r5
  80b844:	2029883a 	mov	r20,r4
  80b848:	2a000504 	addi	r8,r5,20
  80b84c:	000f883a 	mov	r7,zero
  80b850:	40800017 	ldw	r2,0(r8)
  80b854:	39c00044 	addi	r7,r7,1
  80b858:	10ffffcc 	andi	r3,r2,65535
  80b85c:	1987383a 	mul	r3,r3,r6
  80b860:	1004d43a 	srli	r2,r2,16
  80b864:	1c07883a 	add	r3,r3,r16
  80b868:	180ad43a 	srli	r5,r3,16
  80b86c:	1185383a 	mul	r2,r2,r6
  80b870:	18ffffcc 	andi	r3,r3,65535
  80b874:	1145883a 	add	r2,r2,r5
  80b878:	1008943a 	slli	r4,r2,16
  80b87c:	1020d43a 	srli	r16,r2,16
  80b880:	20c9883a 	add	r4,r4,r3
  80b884:	41000015 	stw	r4,0(r8)
  80b888:	42000104 	addi	r8,r8,4
  80b88c:	3cbff016 	blt	r7,r18,80b850 <__multadd+0x34>
  80b890:	80000826 	beq	r16,zero,80b8b4 <__multadd+0x98>
  80b894:	98800217 	ldw	r2,8(r19)
  80b898:	90800f0e 	bge	r18,r2,80b8d8 <__multadd+0xbc>
  80b89c:	9485883a 	add	r2,r18,r18
  80b8a0:	1085883a 	add	r2,r2,r2
  80b8a4:	14c5883a 	add	r2,r2,r19
  80b8a8:	90c00044 	addi	r3,r18,1
  80b8ac:	14000515 	stw	r16,20(r2)
  80b8b0:	98c00415 	stw	r3,16(r19)
  80b8b4:	9805883a 	mov	r2,r19
  80b8b8:	dfc00517 	ldw	ra,20(sp)
  80b8bc:	dd000417 	ldw	r20,16(sp)
  80b8c0:	dcc00317 	ldw	r19,12(sp)
  80b8c4:	dc800217 	ldw	r18,8(sp)
  80b8c8:	dc400117 	ldw	r17,4(sp)
  80b8cc:	dc000017 	ldw	r16,0(sp)
  80b8d0:	dec00604 	addi	sp,sp,24
  80b8d4:	f800283a 	ret
  80b8d8:	99400117 	ldw	r5,4(r19)
  80b8dc:	a009883a 	mov	r4,r20
  80b8e0:	29400044 	addi	r5,r5,1
  80b8e4:	080b0e80 	call	80b0e8 <_Balloc>
  80b8e8:	99800417 	ldw	r6,16(r19)
  80b8ec:	99400304 	addi	r5,r19,12
  80b8f0:	11000304 	addi	r4,r2,12
  80b8f4:	318d883a 	add	r6,r6,r6
  80b8f8:	318d883a 	add	r6,r6,r6
  80b8fc:	31800204 	addi	r6,r6,8
  80b900:	1023883a 	mov	r17,r2
  80b904:	080a9500 	call	80a950 <memcpy>
  80b908:	980b883a 	mov	r5,r19
  80b90c:	a009883a 	mov	r4,r20
  80b910:	080ab680 	call	80ab68 <_Bfree>
  80b914:	8827883a 	mov	r19,r17
  80b918:	003fe006 	br	80b89c <__multadd+0x80>

0080b91c <__pow5mult>:
  80b91c:	defffa04 	addi	sp,sp,-24
  80b920:	308000cc 	andi	r2,r6,3
  80b924:	dd000415 	stw	r20,16(sp)
  80b928:	dcc00315 	stw	r19,12(sp)
  80b92c:	dc000015 	stw	r16,0(sp)
  80b930:	dfc00515 	stw	ra,20(sp)
  80b934:	dc800215 	stw	r18,8(sp)
  80b938:	dc400115 	stw	r17,4(sp)
  80b93c:	3021883a 	mov	r16,r6
  80b940:	2027883a 	mov	r19,r4
  80b944:	2829883a 	mov	r20,r5
  80b948:	10002b1e 	bne	r2,zero,80b9f8 <__pow5mult+0xdc>
  80b94c:	8025d0ba 	srai	r18,r16,2
  80b950:	90001b26 	beq	r18,zero,80b9c0 <__pow5mult+0xa4>
  80b954:	9c001217 	ldw	r16,72(r19)
  80b958:	8000081e 	bne	r16,zero,80b97c <__pow5mult+0x60>
  80b95c:	00003006 	br	80ba20 <__pow5mult+0x104>
  80b960:	800b883a 	mov	r5,r16
  80b964:	800d883a 	mov	r6,r16
  80b968:	9809883a 	mov	r4,r19
  80b96c:	90001426 	beq	r18,zero,80b9c0 <__pow5mult+0xa4>
  80b970:	80800017 	ldw	r2,0(r16)
  80b974:	10001b26 	beq	r2,zero,80b9e4 <__pow5mult+0xc8>
  80b978:	1021883a 	mov	r16,r2
  80b97c:	9080004c 	andi	r2,r18,1
  80b980:	1005003a 	cmpeq	r2,r2,zero
  80b984:	9025d07a 	srai	r18,r18,1
  80b988:	800d883a 	mov	r6,r16
  80b98c:	9809883a 	mov	r4,r19
  80b990:	a00b883a 	mov	r5,r20
  80b994:	103ff21e 	bne	r2,zero,80b960 <__pow5mult+0x44>
  80b998:	080b5f80 	call	80b5f8 <__multiply>
  80b99c:	a00b883a 	mov	r5,r20
  80b9a0:	9809883a 	mov	r4,r19
  80b9a4:	1023883a 	mov	r17,r2
  80b9a8:	080ab680 	call	80ab68 <_Bfree>
  80b9ac:	8829883a 	mov	r20,r17
  80b9b0:	800b883a 	mov	r5,r16
  80b9b4:	800d883a 	mov	r6,r16
  80b9b8:	9809883a 	mov	r4,r19
  80b9bc:	903fec1e 	bne	r18,zero,80b970 <__pow5mult+0x54>
  80b9c0:	a005883a 	mov	r2,r20
  80b9c4:	dfc00517 	ldw	ra,20(sp)
  80b9c8:	dd000417 	ldw	r20,16(sp)
  80b9cc:	dcc00317 	ldw	r19,12(sp)
  80b9d0:	dc800217 	ldw	r18,8(sp)
  80b9d4:	dc400117 	ldw	r17,4(sp)
  80b9d8:	dc000017 	ldw	r16,0(sp)
  80b9dc:	dec00604 	addi	sp,sp,24
  80b9e0:	f800283a 	ret
  80b9e4:	080b5f80 	call	80b5f8 <__multiply>
  80b9e8:	80800015 	stw	r2,0(r16)
  80b9ec:	1021883a 	mov	r16,r2
  80b9f0:	10000015 	stw	zero,0(r2)
  80b9f4:	003fe106 	br	80b97c <__pow5mult+0x60>
  80b9f8:	1085883a 	add	r2,r2,r2
  80b9fc:	00c020b4 	movhi	r3,130
  80ba00:	18e0f304 	addi	r3,r3,-31796
  80ba04:	1085883a 	add	r2,r2,r2
  80ba08:	10c5883a 	add	r2,r2,r3
  80ba0c:	11bfff17 	ldw	r6,-4(r2)
  80ba10:	000f883a 	mov	r7,zero
  80ba14:	080b81c0 	call	80b81c <__multadd>
  80ba18:	1029883a 	mov	r20,r2
  80ba1c:	003fcb06 	br	80b94c <__pow5mult+0x30>
  80ba20:	9809883a 	mov	r4,r19
  80ba24:	01409c44 	movi	r5,625
  80ba28:	080b7e00 	call	80b7e0 <__i2b>
  80ba2c:	98801215 	stw	r2,72(r19)
  80ba30:	1021883a 	mov	r16,r2
  80ba34:	10000015 	stw	zero,0(r2)
  80ba38:	003fd006 	br	80b97c <__pow5mult+0x60>

0080ba3c <__s2b>:
  80ba3c:	defff904 	addi	sp,sp,-28
  80ba40:	dcc00315 	stw	r19,12(sp)
  80ba44:	dc800215 	stw	r18,8(sp)
  80ba48:	2827883a 	mov	r19,r5
  80ba4c:	2025883a 	mov	r18,r4
  80ba50:	01400244 	movi	r5,9
  80ba54:	39000204 	addi	r4,r7,8
  80ba58:	dd000415 	stw	r20,16(sp)
  80ba5c:	dc400115 	stw	r17,4(sp)
  80ba60:	dfc00615 	stw	ra,24(sp)
  80ba64:	dd400515 	stw	r21,20(sp)
  80ba68:	dc000015 	stw	r16,0(sp)
  80ba6c:	3829883a 	mov	r20,r7
  80ba70:	3023883a 	mov	r17,r6
  80ba74:	0804bfc0 	call	804bfc <__divsi3>
  80ba78:	00c00044 	movi	r3,1
  80ba7c:	1880350e 	bge	r3,r2,80bb54 <__s2b+0x118>
  80ba80:	000b883a 	mov	r5,zero
  80ba84:	18c7883a 	add	r3,r3,r3
  80ba88:	29400044 	addi	r5,r5,1
  80ba8c:	18bffd16 	blt	r3,r2,80ba84 <__s2b+0x48>
  80ba90:	9009883a 	mov	r4,r18
  80ba94:	080b0e80 	call	80b0e8 <_Balloc>
  80ba98:	1011883a 	mov	r8,r2
  80ba9c:	d8800717 	ldw	r2,28(sp)
  80baa0:	00c00044 	movi	r3,1
  80baa4:	01800244 	movi	r6,9
  80baa8:	40800515 	stw	r2,20(r8)
  80baac:	40c00415 	stw	r3,16(r8)
  80bab0:	3440260e 	bge	r6,r17,80bb4c <__s2b+0x110>
  80bab4:	3021883a 	mov	r16,r6
  80bab8:	99ab883a 	add	r21,r19,r6
  80babc:	9c05883a 	add	r2,r19,r16
  80bac0:	11c00007 	ldb	r7,0(r2)
  80bac4:	400b883a 	mov	r5,r8
  80bac8:	9009883a 	mov	r4,r18
  80bacc:	39fff404 	addi	r7,r7,-48
  80bad0:	01800284 	movi	r6,10
  80bad4:	080b81c0 	call	80b81c <__multadd>
  80bad8:	84000044 	addi	r16,r16,1
  80badc:	1011883a 	mov	r8,r2
  80bae0:	8c3ff61e 	bne	r17,r16,80babc <__s2b+0x80>
  80bae4:	ac45883a 	add	r2,r21,r17
  80bae8:	117ffe04 	addi	r5,r2,-8
  80baec:	880d883a 	mov	r6,r17
  80baf0:	35000c0e 	bge	r6,r20,80bb24 <__s2b+0xe8>
  80baf4:	a185c83a 	sub	r2,r20,r6
  80baf8:	2821883a 	mov	r16,r5
  80bafc:	28a3883a 	add	r17,r5,r2
  80bb00:	81c00007 	ldb	r7,0(r16)
  80bb04:	400b883a 	mov	r5,r8
  80bb08:	9009883a 	mov	r4,r18
  80bb0c:	39fff404 	addi	r7,r7,-48
  80bb10:	01800284 	movi	r6,10
  80bb14:	080b81c0 	call	80b81c <__multadd>
  80bb18:	84000044 	addi	r16,r16,1
  80bb1c:	1011883a 	mov	r8,r2
  80bb20:	847ff71e 	bne	r16,r17,80bb00 <__s2b+0xc4>
  80bb24:	4005883a 	mov	r2,r8
  80bb28:	dfc00617 	ldw	ra,24(sp)
  80bb2c:	dd400517 	ldw	r21,20(sp)
  80bb30:	dd000417 	ldw	r20,16(sp)
  80bb34:	dcc00317 	ldw	r19,12(sp)
  80bb38:	dc800217 	ldw	r18,8(sp)
  80bb3c:	dc400117 	ldw	r17,4(sp)
  80bb40:	dc000017 	ldw	r16,0(sp)
  80bb44:	dec00704 	addi	sp,sp,28
  80bb48:	f800283a 	ret
  80bb4c:	99400284 	addi	r5,r19,10
  80bb50:	003fe706 	br	80baf0 <__s2b+0xb4>
  80bb54:	000b883a 	mov	r5,zero
  80bb58:	003fcd06 	br	80ba90 <__s2b+0x54>

0080bb5c <_realloc_r>:
  80bb5c:	defff404 	addi	sp,sp,-48
  80bb60:	dd800815 	stw	r22,32(sp)
  80bb64:	dc800415 	stw	r18,16(sp)
  80bb68:	dc400315 	stw	r17,12(sp)
  80bb6c:	dfc00b15 	stw	ra,44(sp)
  80bb70:	df000a15 	stw	fp,40(sp)
  80bb74:	ddc00915 	stw	r23,36(sp)
  80bb78:	dd400715 	stw	r21,28(sp)
  80bb7c:	dd000615 	stw	r20,24(sp)
  80bb80:	dcc00515 	stw	r19,20(sp)
  80bb84:	dc000215 	stw	r16,8(sp)
  80bb88:	2825883a 	mov	r18,r5
  80bb8c:	3023883a 	mov	r17,r6
  80bb90:	202d883a 	mov	r22,r4
  80bb94:	2800c926 	beq	r5,zero,80bebc <_realloc_r+0x360>
  80bb98:	080ded00 	call	80ded0 <__malloc_lock>
  80bb9c:	943ffe04 	addi	r16,r18,-8
  80bba0:	88c002c4 	addi	r3,r17,11
  80bba4:	00800584 	movi	r2,22
  80bba8:	82000117 	ldw	r8,4(r16)
  80bbac:	10c01b2e 	bgeu	r2,r3,80bc1c <_realloc_r+0xc0>
  80bbb0:	00bffe04 	movi	r2,-8
  80bbb4:	188e703a 	and	r7,r3,r2
  80bbb8:	3839883a 	mov	fp,r7
  80bbbc:	38001a16 	blt	r7,zero,80bc28 <_realloc_r+0xcc>
  80bbc0:	e4401936 	bltu	fp,r17,80bc28 <_realloc_r+0xcc>
  80bbc4:	013fff04 	movi	r4,-4
  80bbc8:	4126703a 	and	r19,r8,r4
  80bbcc:	99c02616 	blt	r19,r7,80bc68 <_realloc_r+0x10c>
  80bbd0:	802b883a 	mov	r21,r16
  80bbd4:	9829883a 	mov	r20,r19
  80bbd8:	84000204 	addi	r16,r16,8
  80bbdc:	a80f883a 	mov	r7,r21
  80bbe0:	a70dc83a 	sub	r6,r20,fp
  80bbe4:	008003c4 	movi	r2,15
  80bbe8:	1180c136 	bltu	r2,r6,80bef0 <_realloc_r+0x394>
  80bbec:	38800117 	ldw	r2,4(r7)
  80bbf0:	a549883a 	add	r4,r20,r21
  80bbf4:	1080004c 	andi	r2,r2,1
  80bbf8:	a084b03a 	or	r2,r20,r2
  80bbfc:	38800115 	stw	r2,4(r7)
  80bc00:	20c00117 	ldw	r3,4(r4)
  80bc04:	18c00054 	ori	r3,r3,1
  80bc08:	20c00115 	stw	r3,4(r4)
  80bc0c:	b009883a 	mov	r4,r22
  80bc10:	080def00 	call	80def0 <__malloc_unlock>
  80bc14:	8023883a 	mov	r17,r16
  80bc18:	00000606 	br	80bc34 <_realloc_r+0xd8>
  80bc1c:	01c00404 	movi	r7,16
  80bc20:	3839883a 	mov	fp,r7
  80bc24:	e47fe72e 	bgeu	fp,r17,80bbc4 <_realloc_r+0x68>
  80bc28:	00800304 	movi	r2,12
  80bc2c:	0023883a 	mov	r17,zero
  80bc30:	b0800015 	stw	r2,0(r22)
  80bc34:	8805883a 	mov	r2,r17
  80bc38:	dfc00b17 	ldw	ra,44(sp)
  80bc3c:	df000a17 	ldw	fp,40(sp)
  80bc40:	ddc00917 	ldw	r23,36(sp)
  80bc44:	dd800817 	ldw	r22,32(sp)
  80bc48:	dd400717 	ldw	r21,28(sp)
  80bc4c:	dd000617 	ldw	r20,24(sp)
  80bc50:	dcc00517 	ldw	r19,20(sp)
  80bc54:	dc800417 	ldw	r18,16(sp)
  80bc58:	dc400317 	ldw	r17,12(sp)
  80bc5c:	dc000217 	ldw	r16,8(sp)
  80bc60:	dec00c04 	addi	sp,sp,48
  80bc64:	f800283a 	ret
  80bc68:	008020b4 	movhi	r2,130
  80bc6c:	10a13804 	addi	r2,r2,-31520
  80bc70:	12400217 	ldw	r9,8(r2)
  80bc74:	84cd883a 	add	r6,r16,r19
  80bc78:	802b883a 	mov	r21,r16
  80bc7c:	3240b926 	beq	r6,r9,80bf64 <_realloc_r+0x408>
  80bc80:	31400117 	ldw	r5,4(r6)
  80bc84:	00bfff84 	movi	r2,-2
  80bc88:	2884703a 	and	r2,r5,r2
  80bc8c:	1185883a 	add	r2,r2,r6
  80bc90:	10c00117 	ldw	r3,4(r2)
  80bc94:	18c0004c 	andi	r3,r3,1
  80bc98:	1807003a 	cmpeq	r3,r3,zero
  80bc9c:	1800a326 	beq	r3,zero,80bf2c <_realloc_r+0x3d0>
  80bca0:	2908703a 	and	r4,r5,r4
  80bca4:	9929883a 	add	r20,r19,r4
  80bca8:	a1c0a30e 	bge	r20,r7,80bf38 <_realloc_r+0x3dc>
  80bcac:	4080004c 	andi	r2,r8,1
  80bcb0:	1000551e 	bne	r2,zero,80be08 <_realloc_r+0x2ac>
  80bcb4:	80800017 	ldw	r2,0(r16)
  80bcb8:	80afc83a 	sub	r23,r16,r2
  80bcbc:	b8c00117 	ldw	r3,4(r23)
  80bcc0:	00bfff04 	movi	r2,-4
  80bcc4:	1884703a 	and	r2,r3,r2
  80bcc8:	30002e26 	beq	r6,zero,80bd84 <_realloc_r+0x228>
  80bccc:	3240b926 	beq	r6,r9,80bfb4 <_realloc_r+0x458>
  80bcd0:	98a9883a 	add	r20,r19,r2
  80bcd4:	2509883a 	add	r4,r4,r20
  80bcd8:	d9000015 	stw	r4,0(sp)
  80bcdc:	21c02a16 	blt	r4,r7,80bd88 <_realloc_r+0x22c>
  80bce0:	30800317 	ldw	r2,12(r6)
  80bce4:	30c00217 	ldw	r3,8(r6)
  80bce8:	01400904 	movi	r5,36
  80bcec:	99bfff04 	addi	r6,r19,-4
  80bcf0:	18800315 	stw	r2,12(r3)
  80bcf4:	10c00215 	stw	r3,8(r2)
  80bcf8:	b9000317 	ldw	r4,12(r23)
  80bcfc:	b8800217 	ldw	r2,8(r23)
  80bd00:	b82b883a 	mov	r21,r23
  80bd04:	bc000204 	addi	r16,r23,8
  80bd08:	20800215 	stw	r2,8(r4)
  80bd0c:	11000315 	stw	r4,12(r2)
  80bd10:	2980e436 	bltu	r5,r6,80c0a4 <_realloc_r+0x548>
  80bd14:	008004c4 	movi	r2,19
  80bd18:	9009883a 	mov	r4,r18
  80bd1c:	8011883a 	mov	r8,r16
  80bd20:	11800f2e 	bgeu	r2,r6,80bd60 <_realloc_r+0x204>
  80bd24:	90800017 	ldw	r2,0(r18)
  80bd28:	ba000404 	addi	r8,r23,16
  80bd2c:	91000204 	addi	r4,r18,8
  80bd30:	b8800215 	stw	r2,8(r23)
  80bd34:	90c00117 	ldw	r3,4(r18)
  80bd38:	008006c4 	movi	r2,27
  80bd3c:	b8c00315 	stw	r3,12(r23)
  80bd40:	1180072e 	bgeu	r2,r6,80bd60 <_realloc_r+0x204>
  80bd44:	90c00217 	ldw	r3,8(r18)
  80bd48:	ba000604 	addi	r8,r23,24
  80bd4c:	91000404 	addi	r4,r18,16
  80bd50:	b8c00415 	stw	r3,16(r23)
  80bd54:	90800317 	ldw	r2,12(r18)
  80bd58:	b8800515 	stw	r2,20(r23)
  80bd5c:	3140e726 	beq	r6,r5,80c0fc <_realloc_r+0x5a0>
  80bd60:	20800017 	ldw	r2,0(r4)
  80bd64:	dd000017 	ldw	r20,0(sp)
  80bd68:	b80f883a 	mov	r7,r23
  80bd6c:	40800015 	stw	r2,0(r8)
  80bd70:	20c00117 	ldw	r3,4(r4)
  80bd74:	40c00115 	stw	r3,4(r8)
  80bd78:	20800217 	ldw	r2,8(r4)
  80bd7c:	40800215 	stw	r2,8(r8)
  80bd80:	003f9706 	br	80bbe0 <_realloc_r+0x84>
  80bd84:	98a9883a 	add	r20,r19,r2
  80bd88:	a1c01f16 	blt	r20,r7,80be08 <_realloc_r+0x2ac>
  80bd8c:	b8c00317 	ldw	r3,12(r23)
  80bd90:	b8800217 	ldw	r2,8(r23)
  80bd94:	99bfff04 	addi	r6,r19,-4
  80bd98:	01400904 	movi	r5,36
  80bd9c:	b82b883a 	mov	r21,r23
  80bda0:	18800215 	stw	r2,8(r3)
  80bda4:	10c00315 	stw	r3,12(r2)
  80bda8:	bc000204 	addi	r16,r23,8
  80bdac:	2980c336 	bltu	r5,r6,80c0bc <_realloc_r+0x560>
  80bdb0:	008004c4 	movi	r2,19
  80bdb4:	9009883a 	mov	r4,r18
  80bdb8:	8011883a 	mov	r8,r16
  80bdbc:	11800f2e 	bgeu	r2,r6,80bdfc <_realloc_r+0x2a0>
  80bdc0:	90800017 	ldw	r2,0(r18)
  80bdc4:	ba000404 	addi	r8,r23,16
  80bdc8:	91000204 	addi	r4,r18,8
  80bdcc:	b8800215 	stw	r2,8(r23)
  80bdd0:	90c00117 	ldw	r3,4(r18)
  80bdd4:	008006c4 	movi	r2,27
  80bdd8:	b8c00315 	stw	r3,12(r23)
  80bddc:	1180072e 	bgeu	r2,r6,80bdfc <_realloc_r+0x2a0>
  80bde0:	90c00217 	ldw	r3,8(r18)
  80bde4:	ba000604 	addi	r8,r23,24
  80bde8:	91000404 	addi	r4,r18,16
  80bdec:	b8c00415 	stw	r3,16(r23)
  80bdf0:	90800317 	ldw	r2,12(r18)
  80bdf4:	b8800515 	stw	r2,20(r23)
  80bdf8:	3140c726 	beq	r6,r5,80c118 <_realloc_r+0x5bc>
  80bdfc:	20800017 	ldw	r2,0(r4)
  80be00:	b80f883a 	mov	r7,r23
  80be04:	003fd906 	br	80bd6c <_realloc_r+0x210>
  80be08:	880b883a 	mov	r5,r17
  80be0c:	b009883a 	mov	r4,r22
  80be10:	08055480 	call	805548 <_malloc_r>
  80be14:	1023883a 	mov	r17,r2
  80be18:	10002526 	beq	r2,zero,80beb0 <_realloc_r+0x354>
  80be1c:	80800117 	ldw	r2,4(r16)
  80be20:	00ffff84 	movi	r3,-2
  80be24:	893ffe04 	addi	r4,r17,-8
  80be28:	10c4703a 	and	r2,r2,r3
  80be2c:	8085883a 	add	r2,r16,r2
  80be30:	20809526 	beq	r4,r2,80c088 <_realloc_r+0x52c>
  80be34:	99bfff04 	addi	r6,r19,-4
  80be38:	01c00904 	movi	r7,36
  80be3c:	39804536 	bltu	r7,r6,80bf54 <_realloc_r+0x3f8>
  80be40:	008004c4 	movi	r2,19
  80be44:	9009883a 	mov	r4,r18
  80be48:	880b883a 	mov	r5,r17
  80be4c:	11800f2e 	bgeu	r2,r6,80be8c <_realloc_r+0x330>
  80be50:	90800017 	ldw	r2,0(r18)
  80be54:	89400204 	addi	r5,r17,8
  80be58:	91000204 	addi	r4,r18,8
  80be5c:	88800015 	stw	r2,0(r17)
  80be60:	90c00117 	ldw	r3,4(r18)
  80be64:	008006c4 	movi	r2,27
  80be68:	88c00115 	stw	r3,4(r17)
  80be6c:	1180072e 	bgeu	r2,r6,80be8c <_realloc_r+0x330>
  80be70:	90c00217 	ldw	r3,8(r18)
  80be74:	89400404 	addi	r5,r17,16
  80be78:	91000404 	addi	r4,r18,16
  80be7c:	88c00215 	stw	r3,8(r17)
  80be80:	90800317 	ldw	r2,12(r18)
  80be84:	88800315 	stw	r2,12(r17)
  80be88:	31c09126 	beq	r6,r7,80c0d0 <_realloc_r+0x574>
  80be8c:	20800017 	ldw	r2,0(r4)
  80be90:	28800015 	stw	r2,0(r5)
  80be94:	20c00117 	ldw	r3,4(r4)
  80be98:	28c00115 	stw	r3,4(r5)
  80be9c:	20800217 	ldw	r2,8(r4)
  80bea0:	28800215 	stw	r2,8(r5)
  80bea4:	900b883a 	mov	r5,r18
  80bea8:	b009883a 	mov	r4,r22
  80beac:	0809ce40 	call	809ce4 <_free_r>
  80beb0:	b009883a 	mov	r4,r22
  80beb4:	080def00 	call	80def0 <__malloc_unlock>
  80beb8:	003f5e06 	br	80bc34 <_realloc_r+0xd8>
  80bebc:	300b883a 	mov	r5,r6
  80bec0:	dfc00b17 	ldw	ra,44(sp)
  80bec4:	df000a17 	ldw	fp,40(sp)
  80bec8:	ddc00917 	ldw	r23,36(sp)
  80becc:	dd800817 	ldw	r22,32(sp)
  80bed0:	dd400717 	ldw	r21,28(sp)
  80bed4:	dd000617 	ldw	r20,24(sp)
  80bed8:	dcc00517 	ldw	r19,20(sp)
  80bedc:	dc800417 	ldw	r18,16(sp)
  80bee0:	dc400317 	ldw	r17,12(sp)
  80bee4:	dc000217 	ldw	r16,8(sp)
  80bee8:	dec00c04 	addi	sp,sp,48
  80beec:	08055481 	jmpi	805548 <_malloc_r>
  80bef0:	38800117 	ldw	r2,4(r7)
  80bef4:	e54b883a 	add	r5,fp,r21
  80bef8:	31000054 	ori	r4,r6,1
  80befc:	1080004c 	andi	r2,r2,1
  80bf00:	1704b03a 	or	r2,r2,fp
  80bf04:	38800115 	stw	r2,4(r7)
  80bf08:	29000115 	stw	r4,4(r5)
  80bf0c:	2987883a 	add	r3,r5,r6
  80bf10:	18800117 	ldw	r2,4(r3)
  80bf14:	29400204 	addi	r5,r5,8
  80bf18:	b009883a 	mov	r4,r22
  80bf1c:	10800054 	ori	r2,r2,1
  80bf20:	18800115 	stw	r2,4(r3)
  80bf24:	0809ce40 	call	809ce4 <_free_r>
  80bf28:	003f3806 	br	80bc0c <_realloc_r+0xb0>
  80bf2c:	000d883a 	mov	r6,zero
  80bf30:	0009883a 	mov	r4,zero
  80bf34:	003f5d06 	br	80bcac <_realloc_r+0x150>
  80bf38:	30c00217 	ldw	r3,8(r6)
  80bf3c:	30800317 	ldw	r2,12(r6)
  80bf40:	800f883a 	mov	r7,r16
  80bf44:	84000204 	addi	r16,r16,8
  80bf48:	10c00215 	stw	r3,8(r2)
  80bf4c:	18800315 	stw	r2,12(r3)
  80bf50:	003f2306 	br	80bbe0 <_realloc_r+0x84>
  80bf54:	8809883a 	mov	r4,r17
  80bf58:	900b883a 	mov	r5,r18
  80bf5c:	080a9f00 	call	80a9f0 <memmove>
  80bf60:	003fd006 	br	80bea4 <_realloc_r+0x348>
  80bf64:	30800117 	ldw	r2,4(r6)
  80bf68:	e0c00404 	addi	r3,fp,16
  80bf6c:	1108703a 	and	r4,r2,r4
  80bf70:	9905883a 	add	r2,r19,r4
  80bf74:	10ff4d16 	blt	r2,r3,80bcac <_realloc_r+0x150>
  80bf78:	1705c83a 	sub	r2,r2,fp
  80bf7c:	870b883a 	add	r5,r16,fp
  80bf80:	10800054 	ori	r2,r2,1
  80bf84:	28800115 	stw	r2,4(r5)
  80bf88:	80c00117 	ldw	r3,4(r16)
  80bf8c:	008020b4 	movhi	r2,130
  80bf90:	10a13804 	addi	r2,r2,-31520
  80bf94:	b009883a 	mov	r4,r22
  80bf98:	18c0004c 	andi	r3,r3,1
  80bf9c:	e0c6b03a 	or	r3,fp,r3
  80bfa0:	11400215 	stw	r5,8(r2)
  80bfa4:	80c00115 	stw	r3,4(r16)
  80bfa8:	080def00 	call	80def0 <__malloc_unlock>
  80bfac:	84400204 	addi	r17,r16,8
  80bfb0:	003f2006 	br	80bc34 <_realloc_r+0xd8>
  80bfb4:	98a9883a 	add	r20,r19,r2
  80bfb8:	2509883a 	add	r4,r4,r20
  80bfbc:	e0800404 	addi	r2,fp,16
  80bfc0:	d9000115 	stw	r4,4(sp)
  80bfc4:	20bf7016 	blt	r4,r2,80bd88 <_realloc_r+0x22c>
  80bfc8:	b8c00317 	ldw	r3,12(r23)
  80bfcc:	b8800217 	ldw	r2,8(r23)
  80bfd0:	99bfff04 	addi	r6,r19,-4
  80bfd4:	01400904 	movi	r5,36
  80bfd8:	18800215 	stw	r2,8(r3)
  80bfdc:	10c00315 	stw	r3,12(r2)
  80bfe0:	bc400204 	addi	r17,r23,8
  80bfe4:	29804136 	bltu	r5,r6,80c0ec <_realloc_r+0x590>
  80bfe8:	008004c4 	movi	r2,19
  80bfec:	9009883a 	mov	r4,r18
  80bff0:	880f883a 	mov	r7,r17
  80bff4:	11800f2e 	bgeu	r2,r6,80c034 <_realloc_r+0x4d8>
  80bff8:	90800017 	ldw	r2,0(r18)
  80bffc:	b9c00404 	addi	r7,r23,16
  80c000:	91000204 	addi	r4,r18,8
  80c004:	b8800215 	stw	r2,8(r23)
  80c008:	90c00117 	ldw	r3,4(r18)
  80c00c:	008006c4 	movi	r2,27
  80c010:	b8c00315 	stw	r3,12(r23)
  80c014:	1180072e 	bgeu	r2,r6,80c034 <_realloc_r+0x4d8>
  80c018:	90c00217 	ldw	r3,8(r18)
  80c01c:	b9c00604 	addi	r7,r23,24
  80c020:	91000404 	addi	r4,r18,16
  80c024:	b8c00415 	stw	r3,16(r23)
  80c028:	90800317 	ldw	r2,12(r18)
  80c02c:	b8800515 	stw	r2,20(r23)
  80c030:	31404026 	beq	r6,r5,80c134 <_realloc_r+0x5d8>
  80c034:	20800017 	ldw	r2,0(r4)
  80c038:	38800015 	stw	r2,0(r7)
  80c03c:	20c00117 	ldw	r3,4(r4)
  80c040:	38c00115 	stw	r3,4(r7)
  80c044:	20800217 	ldw	r2,8(r4)
  80c048:	38800215 	stw	r2,8(r7)
  80c04c:	d8c00117 	ldw	r3,4(sp)
  80c050:	bf0b883a 	add	r5,r23,fp
  80c054:	b009883a 	mov	r4,r22
  80c058:	1f05c83a 	sub	r2,r3,fp
  80c05c:	10800054 	ori	r2,r2,1
  80c060:	28800115 	stw	r2,4(r5)
  80c064:	b8c00117 	ldw	r3,4(r23)
  80c068:	008020b4 	movhi	r2,130
  80c06c:	10a13804 	addi	r2,r2,-31520
  80c070:	11400215 	stw	r5,8(r2)
  80c074:	18c0004c 	andi	r3,r3,1
  80c078:	e0c6b03a 	or	r3,fp,r3
  80c07c:	b8c00115 	stw	r3,4(r23)
  80c080:	080def00 	call	80def0 <__malloc_unlock>
  80c084:	003eeb06 	br	80bc34 <_realloc_r+0xd8>
  80c088:	20800117 	ldw	r2,4(r4)
  80c08c:	00ffff04 	movi	r3,-4
  80c090:	800f883a 	mov	r7,r16
  80c094:	10c4703a 	and	r2,r2,r3
  80c098:	98a9883a 	add	r20,r19,r2
  80c09c:	84000204 	addi	r16,r16,8
  80c0a0:	003ecf06 	br	80bbe0 <_realloc_r+0x84>
  80c0a4:	900b883a 	mov	r5,r18
  80c0a8:	8009883a 	mov	r4,r16
  80c0ac:	080a9f00 	call	80a9f0 <memmove>
  80c0b0:	dd000017 	ldw	r20,0(sp)
  80c0b4:	b80f883a 	mov	r7,r23
  80c0b8:	003ec906 	br	80bbe0 <_realloc_r+0x84>
  80c0bc:	900b883a 	mov	r5,r18
  80c0c0:	8009883a 	mov	r4,r16
  80c0c4:	080a9f00 	call	80a9f0 <memmove>
  80c0c8:	b80f883a 	mov	r7,r23
  80c0cc:	003ec406 	br	80bbe0 <_realloc_r+0x84>
  80c0d0:	90c00417 	ldw	r3,16(r18)
  80c0d4:	89400604 	addi	r5,r17,24
  80c0d8:	91000604 	addi	r4,r18,24
  80c0dc:	88c00415 	stw	r3,16(r17)
  80c0e0:	90800517 	ldw	r2,20(r18)
  80c0e4:	88800515 	stw	r2,20(r17)
  80c0e8:	003f6806 	br	80be8c <_realloc_r+0x330>
  80c0ec:	900b883a 	mov	r5,r18
  80c0f0:	8809883a 	mov	r4,r17
  80c0f4:	080a9f00 	call	80a9f0 <memmove>
  80c0f8:	003fd406 	br	80c04c <_realloc_r+0x4f0>
  80c0fc:	90c00417 	ldw	r3,16(r18)
  80c100:	91000604 	addi	r4,r18,24
  80c104:	ba000804 	addi	r8,r23,32
  80c108:	b8c00615 	stw	r3,24(r23)
  80c10c:	90800517 	ldw	r2,20(r18)
  80c110:	b8800715 	stw	r2,28(r23)
  80c114:	003f1206 	br	80bd60 <_realloc_r+0x204>
  80c118:	90c00417 	ldw	r3,16(r18)
  80c11c:	91000604 	addi	r4,r18,24
  80c120:	ba000804 	addi	r8,r23,32
  80c124:	b8c00615 	stw	r3,24(r23)
  80c128:	90800517 	ldw	r2,20(r18)
  80c12c:	b8800715 	stw	r2,28(r23)
  80c130:	003f3206 	br	80bdfc <_realloc_r+0x2a0>
  80c134:	90c00417 	ldw	r3,16(r18)
  80c138:	91000604 	addi	r4,r18,24
  80c13c:	b9c00804 	addi	r7,r23,32
  80c140:	b8c00615 	stw	r3,24(r23)
  80c144:	90800517 	ldw	r2,20(r18)
  80c148:	b8800715 	stw	r2,28(r23)
  80c14c:	003fb906 	br	80c034 <_realloc_r+0x4d8>

0080c150 <__isinfd>:
  80c150:	200d883a 	mov	r6,r4
  80c154:	0109c83a 	sub	r4,zero,r4
  80c158:	2188b03a 	or	r4,r4,r6
  80c15c:	2008d7fa 	srli	r4,r4,31
  80c160:	00a00034 	movhi	r2,32768
  80c164:	10bfffc4 	addi	r2,r2,-1
  80c168:	1144703a 	and	r2,r2,r5
  80c16c:	2088b03a 	or	r4,r4,r2
  80c170:	009ffc34 	movhi	r2,32752
  80c174:	1105c83a 	sub	r2,r2,r4
  80c178:	0087c83a 	sub	r3,zero,r2
  80c17c:	10c4b03a 	or	r2,r2,r3
  80c180:	1004d7fa 	srli	r2,r2,31
  80c184:	00c00044 	movi	r3,1
  80c188:	1885c83a 	sub	r2,r3,r2
  80c18c:	f800283a 	ret

0080c190 <__isnand>:
  80c190:	200d883a 	mov	r6,r4
  80c194:	0109c83a 	sub	r4,zero,r4
  80c198:	2188b03a 	or	r4,r4,r6
  80c19c:	2008d7fa 	srli	r4,r4,31
  80c1a0:	00a00034 	movhi	r2,32768
  80c1a4:	10bfffc4 	addi	r2,r2,-1
  80c1a8:	1144703a 	and	r2,r2,r5
  80c1ac:	2088b03a 	or	r4,r4,r2
  80c1b0:	009ffc34 	movhi	r2,32752
  80c1b4:	1105c83a 	sub	r2,r2,r4
  80c1b8:	1004d7fa 	srli	r2,r2,31
  80c1bc:	f800283a 	ret

0080c1c0 <__sclose>:
  80c1c0:	2940038f 	ldh	r5,14(r5)
  80c1c4:	080c4f41 	jmpi	80c4f4 <_close_r>

0080c1c8 <__sseek>:
  80c1c8:	defffe04 	addi	sp,sp,-8
  80c1cc:	dc000015 	stw	r16,0(sp)
  80c1d0:	2821883a 	mov	r16,r5
  80c1d4:	2940038f 	ldh	r5,14(r5)
  80c1d8:	dfc00115 	stw	ra,4(sp)
  80c1dc:	080c76c0 	call	80c76c <_lseek_r>
  80c1e0:	1007883a 	mov	r3,r2
  80c1e4:	00bfffc4 	movi	r2,-1
  80c1e8:	18800926 	beq	r3,r2,80c210 <__sseek+0x48>
  80c1ec:	8080030b 	ldhu	r2,12(r16)
  80c1f0:	80c01415 	stw	r3,80(r16)
  80c1f4:	10840014 	ori	r2,r2,4096
  80c1f8:	8080030d 	sth	r2,12(r16)
  80c1fc:	1805883a 	mov	r2,r3
  80c200:	dfc00117 	ldw	ra,4(sp)
  80c204:	dc000017 	ldw	r16,0(sp)
  80c208:	dec00204 	addi	sp,sp,8
  80c20c:	f800283a 	ret
  80c210:	8080030b 	ldhu	r2,12(r16)
  80c214:	10bbffcc 	andi	r2,r2,61439
  80c218:	8080030d 	sth	r2,12(r16)
  80c21c:	1805883a 	mov	r2,r3
  80c220:	dfc00117 	ldw	ra,4(sp)
  80c224:	dc000017 	ldw	r16,0(sp)
  80c228:	dec00204 	addi	sp,sp,8
  80c22c:	f800283a 	ret

0080c230 <__swrite>:
  80c230:	2880030b 	ldhu	r2,12(r5)
  80c234:	defffb04 	addi	sp,sp,-20
  80c238:	dcc00315 	stw	r19,12(sp)
  80c23c:	1080400c 	andi	r2,r2,256
  80c240:	dc800215 	stw	r18,8(sp)
  80c244:	dc400115 	stw	r17,4(sp)
  80c248:	dc000015 	stw	r16,0(sp)
  80c24c:	3027883a 	mov	r19,r6
  80c250:	3825883a 	mov	r18,r7
  80c254:	dfc00415 	stw	ra,16(sp)
  80c258:	2821883a 	mov	r16,r5
  80c25c:	000d883a 	mov	r6,zero
  80c260:	01c00084 	movi	r7,2
  80c264:	2023883a 	mov	r17,r4
  80c268:	10000226 	beq	r2,zero,80c274 <__swrite+0x44>
  80c26c:	2940038f 	ldh	r5,14(r5)
  80c270:	080c76c0 	call	80c76c <_lseek_r>
  80c274:	8080030b 	ldhu	r2,12(r16)
  80c278:	8140038f 	ldh	r5,14(r16)
  80c27c:	8809883a 	mov	r4,r17
  80c280:	10bbffcc 	andi	r2,r2,61439
  80c284:	980d883a 	mov	r6,r19
  80c288:	900f883a 	mov	r7,r18
  80c28c:	8080030d 	sth	r2,12(r16)
  80c290:	dfc00417 	ldw	ra,16(sp)
  80c294:	dcc00317 	ldw	r19,12(sp)
  80c298:	dc800217 	ldw	r18,8(sp)
  80c29c:	dc400117 	ldw	r17,4(sp)
  80c2a0:	dc000017 	ldw	r16,0(sp)
  80c2a4:	dec00504 	addi	sp,sp,20
  80c2a8:	080c3c81 	jmpi	80c3c8 <_write_r>

0080c2ac <__sread>:
  80c2ac:	defffe04 	addi	sp,sp,-8
  80c2b0:	dc000015 	stw	r16,0(sp)
  80c2b4:	2821883a 	mov	r16,r5
  80c2b8:	2940038f 	ldh	r5,14(r5)
  80c2bc:	dfc00115 	stw	ra,4(sp)
  80c2c0:	080c7e40 	call	80c7e4 <_read_r>
  80c2c4:	1007883a 	mov	r3,r2
  80c2c8:	10000816 	blt	r2,zero,80c2ec <__sread+0x40>
  80c2cc:	80801417 	ldw	r2,80(r16)
  80c2d0:	10c5883a 	add	r2,r2,r3
  80c2d4:	80801415 	stw	r2,80(r16)
  80c2d8:	1805883a 	mov	r2,r3
  80c2dc:	dfc00117 	ldw	ra,4(sp)
  80c2e0:	dc000017 	ldw	r16,0(sp)
  80c2e4:	dec00204 	addi	sp,sp,8
  80c2e8:	f800283a 	ret
  80c2ec:	8080030b 	ldhu	r2,12(r16)
  80c2f0:	10bbffcc 	andi	r2,r2,61439
  80c2f4:	8080030d 	sth	r2,12(r16)
  80c2f8:	1805883a 	mov	r2,r3
  80c2fc:	dfc00117 	ldw	ra,4(sp)
  80c300:	dc000017 	ldw	r16,0(sp)
  80c304:	dec00204 	addi	sp,sp,8
  80c308:	f800283a 	ret

0080c30c <strcmp>:
  80c30c:	2144b03a 	or	r2,r4,r5
  80c310:	108000cc 	andi	r2,r2,3
  80c314:	10001d1e 	bne	r2,zero,80c38c <strcmp+0x80>
  80c318:	200f883a 	mov	r7,r4
  80c31c:	28800017 	ldw	r2,0(r5)
  80c320:	21000017 	ldw	r4,0(r4)
  80c324:	280d883a 	mov	r6,r5
  80c328:	2080161e 	bne	r4,r2,80c384 <strcmp+0x78>
  80c32c:	023fbff4 	movhi	r8,65279
  80c330:	423fbfc4 	addi	r8,r8,-257
  80c334:	2207883a 	add	r3,r4,r8
  80c338:	01602074 	movhi	r5,32897
  80c33c:	29602004 	addi	r5,r5,-32640
  80c340:	1946703a 	and	r3,r3,r5
  80c344:	0104303a 	nor	r2,zero,r4
  80c348:	10c4703a 	and	r2,r2,r3
  80c34c:	10001c1e 	bne	r2,zero,80c3c0 <strcmp+0xb4>
  80c350:	4013883a 	mov	r9,r8
  80c354:	2811883a 	mov	r8,r5
  80c358:	00000106 	br	80c360 <strcmp+0x54>
  80c35c:	1800181e 	bne	r3,zero,80c3c0 <strcmp+0xb4>
  80c360:	39c00104 	addi	r7,r7,4
  80c364:	39000017 	ldw	r4,0(r7)
  80c368:	31800104 	addi	r6,r6,4
  80c36c:	31400017 	ldw	r5,0(r6)
  80c370:	2245883a 	add	r2,r4,r9
  80c374:	1204703a 	and	r2,r2,r8
  80c378:	0106303a 	nor	r3,zero,r4
  80c37c:	1886703a 	and	r3,r3,r2
  80c380:	217ff626 	beq	r4,r5,80c35c <strcmp+0x50>
  80c384:	3809883a 	mov	r4,r7
  80c388:	300b883a 	mov	r5,r6
  80c38c:	20c00007 	ldb	r3,0(r4)
  80c390:	1800051e 	bne	r3,zero,80c3a8 <strcmp+0x9c>
  80c394:	00000606 	br	80c3b0 <strcmp+0xa4>
  80c398:	21000044 	addi	r4,r4,1
  80c39c:	20c00007 	ldb	r3,0(r4)
  80c3a0:	29400044 	addi	r5,r5,1
  80c3a4:	18000226 	beq	r3,zero,80c3b0 <strcmp+0xa4>
  80c3a8:	28800007 	ldb	r2,0(r5)
  80c3ac:	18bffa26 	beq	r3,r2,80c398 <strcmp+0x8c>
  80c3b0:	20c00003 	ldbu	r3,0(r4)
  80c3b4:	28800003 	ldbu	r2,0(r5)
  80c3b8:	1885c83a 	sub	r2,r3,r2
  80c3bc:	f800283a 	ret
  80c3c0:	0005883a 	mov	r2,zero
  80c3c4:	f800283a 	ret

0080c3c8 <_write_r>:
  80c3c8:	defffd04 	addi	sp,sp,-12
  80c3cc:	dc000015 	stw	r16,0(sp)
  80c3d0:	040020b4 	movhi	r16,130
  80c3d4:	842f2204 	addi	r16,r16,-17272
  80c3d8:	dc400115 	stw	r17,4(sp)
  80c3dc:	80000015 	stw	zero,0(r16)
  80c3e0:	2023883a 	mov	r17,r4
  80c3e4:	2809883a 	mov	r4,r5
  80c3e8:	300b883a 	mov	r5,r6
  80c3ec:	380d883a 	mov	r6,r7
  80c3f0:	dfc00215 	stw	ra,8(sp)
  80c3f4:	080e3800 	call	80e380 <write>
  80c3f8:	1007883a 	mov	r3,r2
  80c3fc:	00bfffc4 	movi	r2,-1
  80c400:	18800626 	beq	r3,r2,80c41c <_write_r+0x54>
  80c404:	1805883a 	mov	r2,r3
  80c408:	dfc00217 	ldw	ra,8(sp)
  80c40c:	dc400117 	ldw	r17,4(sp)
  80c410:	dc000017 	ldw	r16,0(sp)
  80c414:	dec00304 	addi	sp,sp,12
  80c418:	f800283a 	ret
  80c41c:	80800017 	ldw	r2,0(r16)
  80c420:	103ff826 	beq	r2,zero,80c404 <_write_r+0x3c>
  80c424:	88800015 	stw	r2,0(r17)
  80c428:	1805883a 	mov	r2,r3
  80c42c:	dfc00217 	ldw	ra,8(sp)
  80c430:	dc400117 	ldw	r17,4(sp)
  80c434:	dc000017 	ldw	r16,0(sp)
  80c438:	dec00304 	addi	sp,sp,12
  80c43c:	f800283a 	ret

0080c440 <_calloc_r>:
  80c440:	298b383a 	mul	r5,r5,r6
  80c444:	defffe04 	addi	sp,sp,-8
  80c448:	dc000015 	stw	r16,0(sp)
  80c44c:	dfc00115 	stw	ra,4(sp)
  80c450:	08055480 	call	805548 <_malloc_r>
  80c454:	1021883a 	mov	r16,r2
  80c458:	01c00904 	movi	r7,36
  80c45c:	10000d26 	beq	r2,zero,80c494 <_calloc_r+0x54>
  80c460:	10ffff17 	ldw	r3,-4(r2)
  80c464:	1009883a 	mov	r4,r2
  80c468:	00bfff04 	movi	r2,-4
  80c46c:	1886703a 	and	r3,r3,r2
  80c470:	1887883a 	add	r3,r3,r2
  80c474:	180d883a 	mov	r6,r3
  80c478:	000b883a 	mov	r5,zero
  80c47c:	38c01736 	bltu	r7,r3,80c4dc <_calloc_r+0x9c>
  80c480:	008004c4 	movi	r2,19
  80c484:	10c00836 	bltu	r2,r3,80c4a8 <_calloc_r+0x68>
  80c488:	20000215 	stw	zero,8(r4)
  80c48c:	20000015 	stw	zero,0(r4)
  80c490:	20000115 	stw	zero,4(r4)
  80c494:	8005883a 	mov	r2,r16
  80c498:	dfc00117 	ldw	ra,4(sp)
  80c49c:	dc000017 	ldw	r16,0(sp)
  80c4a0:	dec00204 	addi	sp,sp,8
  80c4a4:	f800283a 	ret
  80c4a8:	008006c4 	movi	r2,27
  80c4ac:	80000015 	stw	zero,0(r16)
  80c4b0:	80000115 	stw	zero,4(r16)
  80c4b4:	81000204 	addi	r4,r16,8
  80c4b8:	10fff32e 	bgeu	r2,r3,80c488 <_calloc_r+0x48>
  80c4bc:	80000215 	stw	zero,8(r16)
  80c4c0:	80000315 	stw	zero,12(r16)
  80c4c4:	81000404 	addi	r4,r16,16
  80c4c8:	19ffef1e 	bne	r3,r7,80c488 <_calloc_r+0x48>
  80c4cc:	81000604 	addi	r4,r16,24
  80c4d0:	80000415 	stw	zero,16(r16)
  80c4d4:	80000515 	stw	zero,20(r16)
  80c4d8:	003feb06 	br	80c488 <_calloc_r+0x48>
  80c4dc:	080aad00 	call	80aad0 <memset>
  80c4e0:	8005883a 	mov	r2,r16
  80c4e4:	dfc00117 	ldw	ra,4(sp)
  80c4e8:	dc000017 	ldw	r16,0(sp)
  80c4ec:	dec00204 	addi	sp,sp,8
  80c4f0:	f800283a 	ret

0080c4f4 <_close_r>:
  80c4f4:	defffd04 	addi	sp,sp,-12
  80c4f8:	dc000015 	stw	r16,0(sp)
  80c4fc:	040020b4 	movhi	r16,130
  80c500:	842f2204 	addi	r16,r16,-17272
  80c504:	dc400115 	stw	r17,4(sp)
  80c508:	80000015 	stw	zero,0(r16)
  80c50c:	2023883a 	mov	r17,r4
  80c510:	2809883a 	mov	r4,r5
  80c514:	dfc00215 	stw	ra,8(sp)
  80c518:	080d68c0 	call	80d68c <close>
  80c51c:	1007883a 	mov	r3,r2
  80c520:	00bfffc4 	movi	r2,-1
  80c524:	18800626 	beq	r3,r2,80c540 <_close_r+0x4c>
  80c528:	1805883a 	mov	r2,r3
  80c52c:	dfc00217 	ldw	ra,8(sp)
  80c530:	dc400117 	ldw	r17,4(sp)
  80c534:	dc000017 	ldw	r16,0(sp)
  80c538:	dec00304 	addi	sp,sp,12
  80c53c:	f800283a 	ret
  80c540:	80800017 	ldw	r2,0(r16)
  80c544:	103ff826 	beq	r2,zero,80c528 <_close_r+0x34>
  80c548:	88800015 	stw	r2,0(r17)
  80c54c:	1805883a 	mov	r2,r3
  80c550:	dfc00217 	ldw	ra,8(sp)
  80c554:	dc400117 	ldw	r17,4(sp)
  80c558:	dc000017 	ldw	r16,0(sp)
  80c55c:	dec00304 	addi	sp,sp,12
  80c560:	f800283a 	ret

0080c564 <_fclose_r>:
  80c564:	defffc04 	addi	sp,sp,-16
  80c568:	dc400115 	stw	r17,4(sp)
  80c56c:	dc000015 	stw	r16,0(sp)
  80c570:	dfc00315 	stw	ra,12(sp)
  80c574:	dc800215 	stw	r18,8(sp)
  80c578:	2821883a 	mov	r16,r5
  80c57c:	2023883a 	mov	r17,r4
  80c580:	28002926 	beq	r5,zero,80c628 <_fclose_r+0xc4>
  80c584:	08099500 	call	809950 <__sfp_lock_acquire>
  80c588:	88000226 	beq	r17,zero,80c594 <_fclose_r+0x30>
  80c58c:	88800e17 	ldw	r2,56(r17)
  80c590:	10002d26 	beq	r2,zero,80c648 <_fclose_r+0xe4>
  80c594:	8080030f 	ldh	r2,12(r16)
  80c598:	10002226 	beq	r2,zero,80c624 <_fclose_r+0xc0>
  80c59c:	8809883a 	mov	r4,r17
  80c5a0:	800b883a 	mov	r5,r16
  80c5a4:	08096c80 	call	8096c8 <_fflush_r>
  80c5a8:	1025883a 	mov	r18,r2
  80c5ac:	80800b17 	ldw	r2,44(r16)
  80c5b0:	10000426 	beq	r2,zero,80c5c4 <_fclose_r+0x60>
  80c5b4:	81400717 	ldw	r5,28(r16)
  80c5b8:	8809883a 	mov	r4,r17
  80c5bc:	103ee83a 	callr	r2
  80c5c0:	10002a16 	blt	r2,zero,80c66c <_fclose_r+0x108>
  80c5c4:	8080030b 	ldhu	r2,12(r16)
  80c5c8:	1080200c 	andi	r2,r2,128
  80c5cc:	1000231e 	bne	r2,zero,80c65c <_fclose_r+0xf8>
  80c5d0:	81400c17 	ldw	r5,48(r16)
  80c5d4:	28000526 	beq	r5,zero,80c5ec <_fclose_r+0x88>
  80c5d8:	80801004 	addi	r2,r16,64
  80c5dc:	28800226 	beq	r5,r2,80c5e8 <_fclose_r+0x84>
  80c5e0:	8809883a 	mov	r4,r17
  80c5e4:	0809ce40 	call	809ce4 <_free_r>
  80c5e8:	80000c15 	stw	zero,48(r16)
  80c5ec:	81401117 	ldw	r5,68(r16)
  80c5f0:	28000326 	beq	r5,zero,80c600 <_fclose_r+0x9c>
  80c5f4:	8809883a 	mov	r4,r17
  80c5f8:	0809ce40 	call	809ce4 <_free_r>
  80c5fc:	80001115 	stw	zero,68(r16)
  80c600:	8000030d 	sth	zero,12(r16)
  80c604:	08099540 	call	809954 <__sfp_lock_release>
  80c608:	9005883a 	mov	r2,r18
  80c60c:	dfc00317 	ldw	ra,12(sp)
  80c610:	dc800217 	ldw	r18,8(sp)
  80c614:	dc400117 	ldw	r17,4(sp)
  80c618:	dc000017 	ldw	r16,0(sp)
  80c61c:	dec00404 	addi	sp,sp,16
  80c620:	f800283a 	ret
  80c624:	08099540 	call	809954 <__sfp_lock_release>
  80c628:	0025883a 	mov	r18,zero
  80c62c:	9005883a 	mov	r2,r18
  80c630:	dfc00317 	ldw	ra,12(sp)
  80c634:	dc800217 	ldw	r18,8(sp)
  80c638:	dc400117 	ldw	r17,4(sp)
  80c63c:	dc000017 	ldw	r16,0(sp)
  80c640:	dec00404 	addi	sp,sp,16
  80c644:	f800283a 	ret
  80c648:	8809883a 	mov	r4,r17
  80c64c:	08099600 	call	809960 <__sinit>
  80c650:	8080030f 	ldh	r2,12(r16)
  80c654:	103fd11e 	bne	r2,zero,80c59c <_fclose_r+0x38>
  80c658:	003ff206 	br	80c624 <_fclose_r+0xc0>
  80c65c:	81400417 	ldw	r5,16(r16)
  80c660:	8809883a 	mov	r4,r17
  80c664:	0809ce40 	call	809ce4 <_free_r>
  80c668:	003fd906 	br	80c5d0 <_fclose_r+0x6c>
  80c66c:	04bfffc4 	movi	r18,-1
  80c670:	003fd406 	br	80c5c4 <_fclose_r+0x60>

0080c674 <fclose>:
  80c674:	008020b4 	movhi	r2,130
  80c678:	10a81904 	addi	r2,r2,-24476
  80c67c:	200b883a 	mov	r5,r4
  80c680:	11000017 	ldw	r4,0(r2)
  80c684:	080c5641 	jmpi	80c564 <_fclose_r>

0080c688 <_fstat_r>:
  80c688:	defffd04 	addi	sp,sp,-12
  80c68c:	dc000015 	stw	r16,0(sp)
  80c690:	040020b4 	movhi	r16,130
  80c694:	842f2204 	addi	r16,r16,-17272
  80c698:	dc400115 	stw	r17,4(sp)
  80c69c:	80000015 	stw	zero,0(r16)
  80c6a0:	2023883a 	mov	r17,r4
  80c6a4:	2809883a 	mov	r4,r5
  80c6a8:	300b883a 	mov	r5,r6
  80c6ac:	dfc00215 	stw	ra,8(sp)
  80c6b0:	080d8140 	call	80d814 <fstat>
  80c6b4:	1007883a 	mov	r3,r2
  80c6b8:	00bfffc4 	movi	r2,-1
  80c6bc:	18800626 	beq	r3,r2,80c6d8 <_fstat_r+0x50>
  80c6c0:	1805883a 	mov	r2,r3
  80c6c4:	dfc00217 	ldw	ra,8(sp)
  80c6c8:	dc400117 	ldw	r17,4(sp)
  80c6cc:	dc000017 	ldw	r16,0(sp)
  80c6d0:	dec00304 	addi	sp,sp,12
  80c6d4:	f800283a 	ret
  80c6d8:	80800017 	ldw	r2,0(r16)
  80c6dc:	103ff826 	beq	r2,zero,80c6c0 <_fstat_r+0x38>
  80c6e0:	88800015 	stw	r2,0(r17)
  80c6e4:	1805883a 	mov	r2,r3
  80c6e8:	dfc00217 	ldw	ra,8(sp)
  80c6ec:	dc400117 	ldw	r17,4(sp)
  80c6f0:	dc000017 	ldw	r16,0(sp)
  80c6f4:	dec00304 	addi	sp,sp,12
  80c6f8:	f800283a 	ret

0080c6fc <_isatty_r>:
  80c6fc:	defffd04 	addi	sp,sp,-12
  80c700:	dc000015 	stw	r16,0(sp)
  80c704:	040020b4 	movhi	r16,130
  80c708:	842f2204 	addi	r16,r16,-17272
  80c70c:	dc400115 	stw	r17,4(sp)
  80c710:	80000015 	stw	zero,0(r16)
  80c714:	2023883a 	mov	r17,r4
  80c718:	2809883a 	mov	r4,r5
  80c71c:	dfc00215 	stw	ra,8(sp)
  80c720:	080db080 	call	80db08 <isatty>
  80c724:	1007883a 	mov	r3,r2
  80c728:	00bfffc4 	movi	r2,-1
  80c72c:	18800626 	beq	r3,r2,80c748 <_isatty_r+0x4c>
  80c730:	1805883a 	mov	r2,r3
  80c734:	dfc00217 	ldw	ra,8(sp)
  80c738:	dc400117 	ldw	r17,4(sp)
  80c73c:	dc000017 	ldw	r16,0(sp)
  80c740:	dec00304 	addi	sp,sp,12
  80c744:	f800283a 	ret
  80c748:	80800017 	ldw	r2,0(r16)
  80c74c:	103ff826 	beq	r2,zero,80c730 <_isatty_r+0x34>
  80c750:	88800015 	stw	r2,0(r17)
  80c754:	1805883a 	mov	r2,r3
  80c758:	dfc00217 	ldw	ra,8(sp)
  80c75c:	dc400117 	ldw	r17,4(sp)
  80c760:	dc000017 	ldw	r16,0(sp)
  80c764:	dec00304 	addi	sp,sp,12
  80c768:	f800283a 	ret

0080c76c <_lseek_r>:
  80c76c:	defffd04 	addi	sp,sp,-12
  80c770:	dc000015 	stw	r16,0(sp)
  80c774:	040020b4 	movhi	r16,130
  80c778:	842f2204 	addi	r16,r16,-17272
  80c77c:	dc400115 	stw	r17,4(sp)
  80c780:	80000015 	stw	zero,0(r16)
  80c784:	2023883a 	mov	r17,r4
  80c788:	2809883a 	mov	r4,r5
  80c78c:	300b883a 	mov	r5,r6
  80c790:	380d883a 	mov	r6,r7
  80c794:	dfc00215 	stw	ra,8(sp)
  80c798:	080dd140 	call	80dd14 <lseek>
  80c79c:	1007883a 	mov	r3,r2
  80c7a0:	00bfffc4 	movi	r2,-1
  80c7a4:	18800626 	beq	r3,r2,80c7c0 <_lseek_r+0x54>
  80c7a8:	1805883a 	mov	r2,r3
  80c7ac:	dfc00217 	ldw	ra,8(sp)
  80c7b0:	dc400117 	ldw	r17,4(sp)
  80c7b4:	dc000017 	ldw	r16,0(sp)
  80c7b8:	dec00304 	addi	sp,sp,12
  80c7bc:	f800283a 	ret
  80c7c0:	80800017 	ldw	r2,0(r16)
  80c7c4:	103ff826 	beq	r2,zero,80c7a8 <_lseek_r+0x3c>
  80c7c8:	88800015 	stw	r2,0(r17)
  80c7cc:	1805883a 	mov	r2,r3
  80c7d0:	dfc00217 	ldw	ra,8(sp)
  80c7d4:	dc400117 	ldw	r17,4(sp)
  80c7d8:	dc000017 	ldw	r16,0(sp)
  80c7dc:	dec00304 	addi	sp,sp,12
  80c7e0:	f800283a 	ret

0080c7e4 <_read_r>:
  80c7e4:	defffd04 	addi	sp,sp,-12
  80c7e8:	dc000015 	stw	r16,0(sp)
  80c7ec:	040020b4 	movhi	r16,130
  80c7f0:	842f2204 	addi	r16,r16,-17272
  80c7f4:	dc400115 	stw	r17,4(sp)
  80c7f8:	80000015 	stw	zero,0(r16)
  80c7fc:	2023883a 	mov	r17,r4
  80c800:	2809883a 	mov	r4,r5
  80c804:	300b883a 	mov	r5,r6
  80c808:	380d883a 	mov	r6,r7
  80c80c:	dfc00215 	stw	ra,8(sp)
  80c810:	080df100 	call	80df10 <read>
  80c814:	1007883a 	mov	r3,r2
  80c818:	00bfffc4 	movi	r2,-1
  80c81c:	18800626 	beq	r3,r2,80c838 <_read_r+0x54>
  80c820:	1805883a 	mov	r2,r3
  80c824:	dfc00217 	ldw	ra,8(sp)
  80c828:	dc400117 	ldw	r17,4(sp)
  80c82c:	dc000017 	ldw	r16,0(sp)
  80c830:	dec00304 	addi	sp,sp,12
  80c834:	f800283a 	ret
  80c838:	80800017 	ldw	r2,0(r16)
  80c83c:	103ff826 	beq	r2,zero,80c820 <_read_r+0x3c>
  80c840:	88800015 	stw	r2,0(r17)
  80c844:	1805883a 	mov	r2,r3
  80c848:	dfc00217 	ldw	ra,8(sp)
  80c84c:	dc400117 	ldw	r17,4(sp)
  80c850:	dc000017 	ldw	r16,0(sp)
  80c854:	dec00304 	addi	sp,sp,12
  80c858:	f800283a 	ret

0080c85c <__udivdi3>:
  80c85c:	defff004 	addi	sp,sp,-64
  80c860:	2005883a 	mov	r2,r4
  80c864:	3011883a 	mov	r8,r6
  80c868:	df000e15 	stw	fp,56(sp)
  80c86c:	dd000a15 	stw	r20,40(sp)
  80c870:	dc000615 	stw	r16,24(sp)
  80c874:	dfc00f15 	stw	ra,60(sp)
  80c878:	ddc00d15 	stw	r23,52(sp)
  80c87c:	dd800c15 	stw	r22,48(sp)
  80c880:	dd400b15 	stw	r21,44(sp)
  80c884:	dcc00915 	stw	r19,36(sp)
  80c888:	dc800815 	stw	r18,32(sp)
  80c88c:	dc400715 	stw	r17,28(sp)
  80c890:	4021883a 	mov	r16,r8
  80c894:	1039883a 	mov	fp,r2
  80c898:	2829883a 	mov	r20,r5
  80c89c:	38003b1e 	bne	r7,zero,80c98c <__udivdi3+0x130>
  80c8a0:	2a005c36 	bltu	r5,r8,80ca14 <__udivdi3+0x1b8>
  80c8a4:	4000a626 	beq	r8,zero,80cb40 <__udivdi3+0x2e4>
  80c8a8:	00bfffd4 	movui	r2,65535
  80c8ac:	14009e36 	bltu	r2,r16,80cb28 <__udivdi3+0x2cc>
  80c8b0:	00803fc4 	movi	r2,255
  80c8b4:	14013d36 	bltu	r2,r16,80cdac <__udivdi3+0x550>
  80c8b8:	000b883a 	mov	r5,zero
  80c8bc:	0005883a 	mov	r2,zero
  80c8c0:	8084d83a 	srl	r2,r16,r2
  80c8c4:	010020b4 	movhi	r4,130
  80c8c8:	21203704 	addi	r4,r4,-32548
  80c8cc:	01800804 	movi	r6,32
  80c8d0:	1105883a 	add	r2,r2,r4
  80c8d4:	10c00003 	ldbu	r3,0(r2)
  80c8d8:	28c7883a 	add	r3,r5,r3
  80c8dc:	30edc83a 	sub	r22,r6,r3
  80c8e0:	b000ee1e 	bne	r22,zero,80cc9c <__udivdi3+0x440>
  80c8e4:	802ad43a 	srli	r21,r16,16
  80c8e8:	00800044 	movi	r2,1
  80c8ec:	a423c83a 	sub	r17,r20,r16
  80c8f0:	85ffffcc 	andi	r23,r16,65535
  80c8f4:	d8800315 	stw	r2,12(sp)
  80c8f8:	8809883a 	mov	r4,r17
  80c8fc:	a80b883a 	mov	r5,r21
  80c900:	0804cbc0 	call	804cbc <__udivsi3>
  80c904:	8809883a 	mov	r4,r17
  80c908:	a80b883a 	mov	r5,r21
  80c90c:	102d883a 	mov	r22,r2
  80c910:	0804cc40 	call	804cc4 <__umodsi3>
  80c914:	1004943a 	slli	r2,r2,16
  80c918:	e006d43a 	srli	r3,fp,16
  80c91c:	bda3383a 	mul	r17,r23,r22
  80c920:	10c4b03a 	or	r2,r2,r3
  80c924:	1440042e 	bgeu	r2,r17,80c938 <__udivdi3+0xdc>
  80c928:	1405883a 	add	r2,r2,r16
  80c92c:	b5bfffc4 	addi	r22,r22,-1
  80c930:	14000136 	bltu	r2,r16,80c938 <__udivdi3+0xdc>
  80c934:	14413d36 	bltu	r2,r17,80ce2c <__udivdi3+0x5d0>
  80c938:	1463c83a 	sub	r17,r2,r17
  80c93c:	8809883a 	mov	r4,r17
  80c940:	a80b883a 	mov	r5,r21
  80c944:	0804cbc0 	call	804cbc <__udivsi3>
  80c948:	8809883a 	mov	r4,r17
  80c94c:	a80b883a 	mov	r5,r21
  80c950:	1029883a 	mov	r20,r2
  80c954:	0804cc40 	call	804cc4 <__umodsi3>
  80c958:	1004943a 	slli	r2,r2,16
  80c95c:	bd09383a 	mul	r4,r23,r20
  80c960:	e0ffffcc 	andi	r3,fp,65535
  80c964:	10c4b03a 	or	r2,r2,r3
  80c968:	1100042e 	bgeu	r2,r4,80c97c <__udivdi3+0x120>
  80c96c:	8085883a 	add	r2,r16,r2
  80c970:	a53fffc4 	addi	r20,r20,-1
  80c974:	14000136 	bltu	r2,r16,80c97c <__udivdi3+0x120>
  80c978:	11012036 	bltu	r2,r4,80cdfc <__udivdi3+0x5a0>
  80c97c:	b004943a 	slli	r2,r22,16
  80c980:	d9000317 	ldw	r4,12(sp)
  80c984:	a084b03a 	or	r2,r20,r2
  80c988:	00001506 	br	80c9e0 <__udivdi3+0x184>
  80c98c:	380d883a 	mov	r6,r7
  80c990:	29c06236 	bltu	r5,r7,80cb1c <__udivdi3+0x2c0>
  80c994:	00bfffd4 	movui	r2,65535
  80c998:	11c05a36 	bltu	r2,r7,80cb04 <__udivdi3+0x2a8>
  80c99c:	00803fc4 	movi	r2,255
  80c9a0:	11c0fc36 	bltu	r2,r7,80cd94 <__udivdi3+0x538>
  80c9a4:	000b883a 	mov	r5,zero
  80c9a8:	0005883a 	mov	r2,zero
  80c9ac:	3084d83a 	srl	r2,r6,r2
  80c9b0:	010020b4 	movhi	r4,130
  80c9b4:	21203704 	addi	r4,r4,-32548
  80c9b8:	01c00804 	movi	r7,32
  80c9bc:	1105883a 	add	r2,r2,r4
  80c9c0:	10c00003 	ldbu	r3,0(r2)
  80c9c4:	28c7883a 	add	r3,r5,r3
  80c9c8:	38efc83a 	sub	r23,r7,r3
  80c9cc:	b800691e 	bne	r23,zero,80cb74 <__udivdi3+0x318>
  80c9d0:	35000136 	bltu	r6,r20,80c9d8 <__udivdi3+0x17c>
  80c9d4:	e4005136 	bltu	fp,r16,80cb1c <__udivdi3+0x2c0>
  80c9d8:	00800044 	movi	r2,1
  80c9dc:	0009883a 	mov	r4,zero
  80c9e0:	2007883a 	mov	r3,r4
  80c9e4:	dfc00f17 	ldw	ra,60(sp)
  80c9e8:	df000e17 	ldw	fp,56(sp)
  80c9ec:	ddc00d17 	ldw	r23,52(sp)
  80c9f0:	dd800c17 	ldw	r22,48(sp)
  80c9f4:	dd400b17 	ldw	r21,44(sp)
  80c9f8:	dd000a17 	ldw	r20,40(sp)
  80c9fc:	dcc00917 	ldw	r19,36(sp)
  80ca00:	dc800817 	ldw	r18,32(sp)
  80ca04:	dc400717 	ldw	r17,28(sp)
  80ca08:	dc000617 	ldw	r16,24(sp)
  80ca0c:	dec01004 	addi	sp,sp,64
  80ca10:	f800283a 	ret
  80ca14:	00bfffd4 	movui	r2,65535
  80ca18:	12005036 	bltu	r2,r8,80cb5c <__udivdi3+0x300>
  80ca1c:	00803fc4 	movi	r2,255
  80ca20:	1200e836 	bltu	r2,r8,80cdc4 <__udivdi3+0x568>
  80ca24:	000b883a 	mov	r5,zero
  80ca28:	0005883a 	mov	r2,zero
  80ca2c:	8084d83a 	srl	r2,r16,r2
  80ca30:	010020b4 	movhi	r4,130
  80ca34:	21203704 	addi	r4,r4,-32548
  80ca38:	01800804 	movi	r6,32
  80ca3c:	1105883a 	add	r2,r2,r4
  80ca40:	10c00003 	ldbu	r3,0(r2)
  80ca44:	28c7883a 	add	r3,r5,r3
  80ca48:	30cbc83a 	sub	r5,r6,r3
  80ca4c:	28000626 	beq	r5,zero,80ca68 <__udivdi3+0x20c>
  80ca50:	3145c83a 	sub	r2,r6,r5
  80ca54:	e084d83a 	srl	r2,fp,r2
  80ca58:	a146983a 	sll	r3,r20,r5
  80ca5c:	e178983a 	sll	fp,fp,r5
  80ca60:	8160983a 	sll	r16,r16,r5
  80ca64:	18a8b03a 	or	r20,r3,r2
  80ca68:	802ad43a 	srli	r21,r16,16
  80ca6c:	a009883a 	mov	r4,r20
  80ca70:	85ffffcc 	andi	r23,r16,65535
  80ca74:	a80b883a 	mov	r5,r21
  80ca78:	0804cbc0 	call	804cbc <__udivsi3>
  80ca7c:	a009883a 	mov	r4,r20
  80ca80:	a80b883a 	mov	r5,r21
  80ca84:	102d883a 	mov	r22,r2
  80ca88:	0804cc40 	call	804cc4 <__umodsi3>
  80ca8c:	1004943a 	slli	r2,r2,16
  80ca90:	e006d43a 	srli	r3,fp,16
  80ca94:	bda3383a 	mul	r17,r23,r22
  80ca98:	10c4b03a 	or	r2,r2,r3
  80ca9c:	1440042e 	bgeu	r2,r17,80cab0 <__udivdi3+0x254>
  80caa0:	1405883a 	add	r2,r2,r16
  80caa4:	b5bfffc4 	addi	r22,r22,-1
  80caa8:	14000136 	bltu	r2,r16,80cab0 <__udivdi3+0x254>
  80caac:	1440d536 	bltu	r2,r17,80ce04 <__udivdi3+0x5a8>
  80cab0:	1463c83a 	sub	r17,r2,r17
  80cab4:	8809883a 	mov	r4,r17
  80cab8:	a80b883a 	mov	r5,r21
  80cabc:	0804cbc0 	call	804cbc <__udivsi3>
  80cac0:	8809883a 	mov	r4,r17
  80cac4:	a80b883a 	mov	r5,r21
  80cac8:	1029883a 	mov	r20,r2
  80cacc:	0804cc40 	call	804cc4 <__umodsi3>
  80cad0:	1004943a 	slli	r2,r2,16
  80cad4:	bd09383a 	mul	r4,r23,r20
  80cad8:	e0ffffcc 	andi	r3,fp,65535
  80cadc:	10c4b03a 	or	r2,r2,r3
  80cae0:	1100042e 	bgeu	r2,r4,80caf4 <__udivdi3+0x298>
  80cae4:	8085883a 	add	r2,r16,r2
  80cae8:	a53fffc4 	addi	r20,r20,-1
  80caec:	14000136 	bltu	r2,r16,80caf4 <__udivdi3+0x298>
  80caf0:	1100c736 	bltu	r2,r4,80ce10 <__udivdi3+0x5b4>
  80caf4:	b004943a 	slli	r2,r22,16
  80caf8:	0009883a 	mov	r4,zero
  80cafc:	a084b03a 	or	r2,r20,r2
  80cb00:	003fb706 	br	80c9e0 <__udivdi3+0x184>
  80cb04:	00804034 	movhi	r2,256
  80cb08:	10bfffc4 	addi	r2,r2,-1
  80cb0c:	11c0a436 	bltu	r2,r7,80cda0 <__udivdi3+0x544>
  80cb10:	01400404 	movi	r5,16
  80cb14:	2805883a 	mov	r2,r5
  80cb18:	003fa406 	br	80c9ac <__udivdi3+0x150>
  80cb1c:	0005883a 	mov	r2,zero
  80cb20:	0009883a 	mov	r4,zero
  80cb24:	003fae06 	br	80c9e0 <__udivdi3+0x184>
  80cb28:	00804034 	movhi	r2,256
  80cb2c:	10bfffc4 	addi	r2,r2,-1
  80cb30:	1400a136 	bltu	r2,r16,80cdb8 <__udivdi3+0x55c>
  80cb34:	01400404 	movi	r5,16
  80cb38:	2805883a 	mov	r2,r5
  80cb3c:	003f6006 	br	80c8c0 <__udivdi3+0x64>
  80cb40:	01000044 	movi	r4,1
  80cb44:	000b883a 	mov	r5,zero
  80cb48:	0804cbc0 	call	804cbc <__udivsi3>
  80cb4c:	1021883a 	mov	r16,r2
  80cb50:	00bfffd4 	movui	r2,65535
  80cb54:	143ff436 	bltu	r2,r16,80cb28 <__udivdi3+0x2cc>
  80cb58:	003f5506 	br	80c8b0 <__udivdi3+0x54>
  80cb5c:	00804034 	movhi	r2,256
  80cb60:	10bfffc4 	addi	r2,r2,-1
  80cb64:	12009a36 	bltu	r2,r8,80cdd0 <__udivdi3+0x574>
  80cb68:	01400404 	movi	r5,16
  80cb6c:	2805883a 	mov	r2,r5
  80cb70:	003fae06 	br	80ca2c <__udivdi3+0x1d0>
  80cb74:	3dc5c83a 	sub	r2,r7,r23
  80cb78:	35c8983a 	sll	r4,r6,r23
  80cb7c:	8086d83a 	srl	r3,r16,r2
  80cb80:	a0a2d83a 	srl	r17,r20,r2
  80cb84:	e084d83a 	srl	r2,fp,r2
  80cb88:	20eab03a 	or	r21,r4,r3
  80cb8c:	a82cd43a 	srli	r22,r21,16
  80cb90:	a5c6983a 	sll	r3,r20,r23
  80cb94:	8809883a 	mov	r4,r17
  80cb98:	b00b883a 	mov	r5,r22
  80cb9c:	1886b03a 	or	r3,r3,r2
  80cba0:	d8c00215 	stw	r3,8(sp)
  80cba4:	0804cbc0 	call	804cbc <__udivsi3>
  80cba8:	8809883a 	mov	r4,r17
  80cbac:	b00b883a 	mov	r5,r22
  80cbb0:	1029883a 	mov	r20,r2
  80cbb4:	0804cc40 	call	804cc4 <__umodsi3>
  80cbb8:	a8ffffcc 	andi	r3,r21,65535
  80cbbc:	d8c00515 	stw	r3,20(sp)
  80cbc0:	d9000217 	ldw	r4,8(sp)
  80cbc4:	d9400517 	ldw	r5,20(sp)
  80cbc8:	1004943a 	slli	r2,r2,16
  80cbcc:	2006d43a 	srli	r3,r4,16
  80cbd0:	85e0983a 	sll	r16,r16,r23
  80cbd4:	2d23383a 	mul	r17,r5,r20
  80cbd8:	10c4b03a 	or	r2,r2,r3
  80cbdc:	dc000015 	stw	r16,0(sp)
  80cbe0:	1440032e 	bgeu	r2,r17,80cbf0 <__udivdi3+0x394>
  80cbe4:	1545883a 	add	r2,r2,r21
  80cbe8:	a53fffc4 	addi	r20,r20,-1
  80cbec:	15407f2e 	bgeu	r2,r21,80cdec <__udivdi3+0x590>
  80cbf0:	1463c83a 	sub	r17,r2,r17
  80cbf4:	8809883a 	mov	r4,r17
  80cbf8:	b00b883a 	mov	r5,r22
  80cbfc:	0804cbc0 	call	804cbc <__udivsi3>
  80cc00:	8809883a 	mov	r4,r17
  80cc04:	b00b883a 	mov	r5,r22
  80cc08:	1021883a 	mov	r16,r2
  80cc0c:	0804cc40 	call	804cc4 <__umodsi3>
  80cc10:	d8c00517 	ldw	r3,20(sp)
  80cc14:	d9000217 	ldw	r4,8(sp)
  80cc18:	1004943a 	slli	r2,r2,16
  80cc1c:	1c0f383a 	mul	r7,r3,r16
  80cc20:	20ffffcc 	andi	r3,r4,65535
  80cc24:	10e2b03a 	or	r17,r2,r3
  80cc28:	89c0032e 	bgeu	r17,r7,80cc38 <__udivdi3+0x3dc>
  80cc2c:	8d63883a 	add	r17,r17,r21
  80cc30:	843fffc4 	addi	r16,r16,-1
  80cc34:	8d40692e 	bgeu	r17,r21,80cddc <__udivdi3+0x580>
  80cc38:	a008943a 	slli	r4,r20,16
  80cc3c:	d9400017 	ldw	r5,0(sp)
  80cc40:	89e3c83a 	sub	r17,r17,r7
  80cc44:	8110b03a 	or	r8,r16,r4
  80cc48:	280cd43a 	srli	r6,r5,16
  80cc4c:	28ffffcc 	andi	r3,r5,65535
  80cc50:	40bfffcc 	andi	r2,r8,65535
  80cc54:	400ad43a 	srli	r5,r8,16
  80cc58:	10d3383a 	mul	r9,r2,r3
  80cc5c:	1185383a 	mul	r2,r2,r6
  80cc60:	28c7383a 	mul	r3,r5,r3
  80cc64:	4808d43a 	srli	r4,r9,16
  80cc68:	298b383a 	mul	r5,r5,r6
  80cc6c:	10c5883a 	add	r2,r2,r3
  80cc70:	2089883a 	add	r4,r4,r2
  80cc74:	20c0022e 	bgeu	r4,r3,80cc80 <__udivdi3+0x424>
  80cc78:	00800074 	movhi	r2,1
  80cc7c:	288b883a 	add	r5,r5,r2
  80cc80:	2004d43a 	srli	r2,r4,16
  80cc84:	288b883a 	add	r5,r5,r2
  80cc88:	89403f36 	bltu	r17,r5,80cd88 <__udivdi3+0x52c>
  80cc8c:	89403926 	beq	r17,r5,80cd74 <__udivdi3+0x518>
  80cc90:	4005883a 	mov	r2,r8
  80cc94:	0009883a 	mov	r4,zero
  80cc98:	003f5106 	br	80c9e0 <__udivdi3+0x184>
  80cc9c:	85a0983a 	sll	r16,r16,r22
  80cca0:	3585c83a 	sub	r2,r6,r22
  80cca4:	a0a2d83a 	srl	r17,r20,r2
  80cca8:	802ad43a 	srli	r21,r16,16
  80ccac:	e084d83a 	srl	r2,fp,r2
  80ccb0:	a586983a 	sll	r3,r20,r22
  80ccb4:	8809883a 	mov	r4,r17
  80ccb8:	a80b883a 	mov	r5,r21
  80ccbc:	1886b03a 	or	r3,r3,r2
  80ccc0:	d8c00115 	stw	r3,4(sp)
  80ccc4:	0804cbc0 	call	804cbc <__udivsi3>
  80ccc8:	8809883a 	mov	r4,r17
  80cccc:	a80b883a 	mov	r5,r21
  80ccd0:	d8800415 	stw	r2,16(sp)
  80ccd4:	0804cc40 	call	804cc4 <__umodsi3>
  80ccd8:	d9000117 	ldw	r4,4(sp)
  80ccdc:	d9400417 	ldw	r5,16(sp)
  80cce0:	1004943a 	slli	r2,r2,16
  80cce4:	85ffffcc 	andi	r23,r16,65535
  80cce8:	2006d43a 	srli	r3,r4,16
  80ccec:	b963383a 	mul	r17,r23,r5
  80ccf0:	10c4b03a 	or	r2,r2,r3
  80ccf4:	1440042e 	bgeu	r2,r17,80cd08 <__udivdi3+0x4ac>
  80ccf8:	297fffc4 	addi	r5,r5,-1
  80ccfc:	1405883a 	add	r2,r2,r16
  80cd00:	d9400415 	stw	r5,16(sp)
  80cd04:	1400442e 	bgeu	r2,r16,80ce18 <__udivdi3+0x5bc>
  80cd08:	1463c83a 	sub	r17,r2,r17
  80cd0c:	8809883a 	mov	r4,r17
  80cd10:	a80b883a 	mov	r5,r21
  80cd14:	0804cbc0 	call	804cbc <__udivsi3>
  80cd18:	8809883a 	mov	r4,r17
  80cd1c:	a80b883a 	mov	r5,r21
  80cd20:	1029883a 	mov	r20,r2
  80cd24:	0804cc40 	call	804cc4 <__umodsi3>
  80cd28:	d9400117 	ldw	r5,4(sp)
  80cd2c:	1004943a 	slli	r2,r2,16
  80cd30:	bd09383a 	mul	r4,r23,r20
  80cd34:	28ffffcc 	andi	r3,r5,65535
  80cd38:	10c6b03a 	or	r3,r2,r3
  80cd3c:	1900062e 	bgeu	r3,r4,80cd58 <__udivdi3+0x4fc>
  80cd40:	1c07883a 	add	r3,r3,r16
  80cd44:	a53fffc4 	addi	r20,r20,-1
  80cd48:	1c000336 	bltu	r3,r16,80cd58 <__udivdi3+0x4fc>
  80cd4c:	1900022e 	bgeu	r3,r4,80cd58 <__udivdi3+0x4fc>
  80cd50:	a53fffc4 	addi	r20,r20,-1
  80cd54:	1c07883a 	add	r3,r3,r16
  80cd58:	d9400417 	ldw	r5,16(sp)
  80cd5c:	e5b8983a 	sll	fp,fp,r22
  80cd60:	1923c83a 	sub	r17,r3,r4
  80cd64:	2804943a 	slli	r2,r5,16
  80cd68:	a0a8b03a 	or	r20,r20,r2
  80cd6c:	dd000315 	stw	r20,12(sp)
  80cd70:	003ee106 	br	80c8f8 <__udivdi3+0x9c>
  80cd74:	2004943a 	slli	r2,r4,16
  80cd78:	e5c8983a 	sll	r4,fp,r23
  80cd7c:	48ffffcc 	andi	r3,r9,65535
  80cd80:	10c5883a 	add	r2,r2,r3
  80cd84:	20bfc22e 	bgeu	r4,r2,80cc90 <__udivdi3+0x434>
  80cd88:	40bfffc4 	addi	r2,r8,-1
  80cd8c:	0009883a 	mov	r4,zero
  80cd90:	003f1306 	br	80c9e0 <__udivdi3+0x184>
  80cd94:	01400204 	movi	r5,8
  80cd98:	2805883a 	mov	r2,r5
  80cd9c:	003f0306 	br	80c9ac <__udivdi3+0x150>
  80cda0:	01400604 	movi	r5,24
  80cda4:	2805883a 	mov	r2,r5
  80cda8:	003f0006 	br	80c9ac <__udivdi3+0x150>
  80cdac:	01400204 	movi	r5,8
  80cdb0:	2805883a 	mov	r2,r5
  80cdb4:	003ec206 	br	80c8c0 <__udivdi3+0x64>
  80cdb8:	01400604 	movi	r5,24
  80cdbc:	2805883a 	mov	r2,r5
  80cdc0:	003ebf06 	br	80c8c0 <__udivdi3+0x64>
  80cdc4:	01400204 	movi	r5,8
  80cdc8:	2805883a 	mov	r2,r5
  80cdcc:	003f1706 	br	80ca2c <__udivdi3+0x1d0>
  80cdd0:	01400604 	movi	r5,24
  80cdd4:	2805883a 	mov	r2,r5
  80cdd8:	003f1406 	br	80ca2c <__udivdi3+0x1d0>
  80cddc:	89ff962e 	bgeu	r17,r7,80cc38 <__udivdi3+0x3dc>
  80cde0:	8d63883a 	add	r17,r17,r21
  80cde4:	843fffc4 	addi	r16,r16,-1
  80cde8:	003f9306 	br	80cc38 <__udivdi3+0x3dc>
  80cdec:	147f802e 	bgeu	r2,r17,80cbf0 <__udivdi3+0x394>
  80cdf0:	a53fffc4 	addi	r20,r20,-1
  80cdf4:	1545883a 	add	r2,r2,r21
  80cdf8:	003f7d06 	br	80cbf0 <__udivdi3+0x394>
  80cdfc:	a53fffc4 	addi	r20,r20,-1
  80ce00:	003ede06 	br	80c97c <__udivdi3+0x120>
  80ce04:	b5bfffc4 	addi	r22,r22,-1
  80ce08:	1405883a 	add	r2,r2,r16
  80ce0c:	003f2806 	br	80cab0 <__udivdi3+0x254>
  80ce10:	a53fffc4 	addi	r20,r20,-1
  80ce14:	003f3706 	br	80caf4 <__udivdi3+0x298>
  80ce18:	147fbb2e 	bgeu	r2,r17,80cd08 <__udivdi3+0x4ac>
  80ce1c:	297fffc4 	addi	r5,r5,-1
  80ce20:	1405883a 	add	r2,r2,r16
  80ce24:	d9400415 	stw	r5,16(sp)
  80ce28:	003fb706 	br	80cd08 <__udivdi3+0x4ac>
  80ce2c:	b5bfffc4 	addi	r22,r22,-1
  80ce30:	1405883a 	add	r2,r2,r16
  80ce34:	003ec006 	br	80c938 <__udivdi3+0xdc>

0080ce38 <__umoddi3>:
  80ce38:	defff104 	addi	sp,sp,-60
  80ce3c:	dd800b15 	stw	r22,44(sp)
  80ce40:	dd000915 	stw	r20,36(sp)
  80ce44:	dc000515 	stw	r16,20(sp)
  80ce48:	dfc00e15 	stw	ra,56(sp)
  80ce4c:	df000d15 	stw	fp,52(sp)
  80ce50:	ddc00c15 	stw	r23,48(sp)
  80ce54:	dd400a15 	stw	r21,40(sp)
  80ce58:	dcc00815 	stw	r19,32(sp)
  80ce5c:	dc800715 	stw	r18,28(sp)
  80ce60:	dc400615 	stw	r17,24(sp)
  80ce64:	3021883a 	mov	r16,r6
  80ce68:	202d883a 	mov	r22,r4
  80ce6c:	2829883a 	mov	r20,r5
  80ce70:	38002b1e 	bne	r7,zero,80cf20 <__umoddi3+0xe8>
  80ce74:	29805036 	bltu	r5,r6,80cfb8 <__umoddi3+0x180>
  80ce78:	30008a26 	beq	r6,zero,80d0a4 <__umoddi3+0x26c>
  80ce7c:	00bfffd4 	movui	r2,65535
  80ce80:	14008236 	bltu	r2,r16,80d08c <__umoddi3+0x254>
  80ce84:	00803fc4 	movi	r2,255
  80ce88:	14013636 	bltu	r2,r16,80d364 <__umoddi3+0x52c>
  80ce8c:	000b883a 	mov	r5,zero
  80ce90:	0005883a 	mov	r2,zero
  80ce94:	8084d83a 	srl	r2,r16,r2
  80ce98:	010020b4 	movhi	r4,130
  80ce9c:	21203704 	addi	r4,r4,-32548
  80cea0:	01800804 	movi	r6,32
  80cea4:	1105883a 	add	r2,r2,r4
  80cea8:	10c00003 	ldbu	r3,0(r2)
  80ceac:	28c7883a 	add	r3,r5,r3
  80ceb0:	30efc83a 	sub	r23,r6,r3
  80ceb4:	b800941e 	bne	r23,zero,80d108 <__umoddi3+0x2d0>
  80ceb8:	802ad43a 	srli	r21,r16,16
  80cebc:	a423c83a 	sub	r17,r20,r16
  80cec0:	0039883a 	mov	fp,zero
  80cec4:	853fffcc 	andi	r20,r16,65535
  80cec8:	8809883a 	mov	r4,r17
  80cecc:	a80b883a 	mov	r5,r21
  80ced0:	0804cbc0 	call	804cbc <__udivsi3>
  80ced4:	8809883a 	mov	r4,r17
  80ced8:	a80b883a 	mov	r5,r21
  80cedc:	a0a3383a 	mul	r17,r20,r2
  80cee0:	0804cc40 	call	804cc4 <__umodsi3>
  80cee4:	1004943a 	slli	r2,r2,16
  80cee8:	b006d43a 	srli	r3,r22,16
  80ceec:	10c4b03a 	or	r2,r2,r3
  80cef0:	1440032e 	bgeu	r2,r17,80cf00 <__umoddi3+0xc8>
  80cef4:	1405883a 	add	r2,r2,r16
  80cef8:	14000136 	bltu	r2,r16,80cf00 <__umoddi3+0xc8>
  80cefc:	14413536 	bltu	r2,r17,80d3d4 <__umoddi3+0x59c>
  80cf00:	1463c83a 	sub	r17,r2,r17
  80cf04:	8809883a 	mov	r4,r17
  80cf08:	a80b883a 	mov	r5,r21
  80cf0c:	0804cbc0 	call	804cbc <__udivsi3>
  80cf10:	8809883a 	mov	r4,r17
  80cf14:	a0a3383a 	mul	r17,r20,r2
  80cf18:	a80b883a 	mov	r5,r21
  80cf1c:	00004d06 	br	80d054 <__umoddi3+0x21c>
  80cf20:	380d883a 	mov	r6,r7
  80cf24:	29c0102e 	bgeu	r5,r7,80cf68 <__umoddi3+0x130>
  80cf28:	2011883a 	mov	r8,r4
  80cf2c:	2813883a 	mov	r9,r5
  80cf30:	4005883a 	mov	r2,r8
  80cf34:	4807883a 	mov	r3,r9
  80cf38:	dfc00e17 	ldw	ra,56(sp)
  80cf3c:	df000d17 	ldw	fp,52(sp)
  80cf40:	ddc00c17 	ldw	r23,48(sp)
  80cf44:	dd800b17 	ldw	r22,44(sp)
  80cf48:	dd400a17 	ldw	r21,40(sp)
  80cf4c:	dd000917 	ldw	r20,36(sp)
  80cf50:	dcc00817 	ldw	r19,32(sp)
  80cf54:	dc800717 	ldw	r18,28(sp)
  80cf58:	dc400617 	ldw	r17,24(sp)
  80cf5c:	dc000517 	ldw	r16,20(sp)
  80cf60:	dec00f04 	addi	sp,sp,60
  80cf64:	f800283a 	ret
  80cf68:	00bfffd4 	movui	r2,65535
  80cf6c:	11c05a36 	bltu	r2,r7,80d0d8 <__umoddi3+0x2a0>
  80cf70:	00803fc4 	movi	r2,255
  80cf74:	11c0fe36 	bltu	r2,r7,80d370 <__umoddi3+0x538>
  80cf78:	000b883a 	mov	r5,zero
  80cf7c:	0005883a 	mov	r2,zero
  80cf80:	3084d83a 	srl	r2,r6,r2
  80cf84:	010020b4 	movhi	r4,130
  80cf88:	21203704 	addi	r4,r4,-32548
  80cf8c:	01c00804 	movi	r7,32
  80cf90:	1105883a 	add	r2,r2,r4
  80cf94:	10c00003 	ldbu	r3,0(r2)
  80cf98:	28c7883a 	add	r3,r5,r3
  80cf9c:	38ebc83a 	sub	r21,r7,r3
  80cfa0:	a800851e 	bne	r21,zero,80d1b8 <__umoddi3+0x380>
  80cfa4:	35005236 	bltu	r6,r20,80d0f0 <__umoddi3+0x2b8>
  80cfa8:	b400512e 	bgeu	r22,r16,80d0f0 <__umoddi3+0x2b8>
  80cfac:	b011883a 	mov	r8,r22
  80cfb0:	a013883a 	mov	r9,r20
  80cfb4:	003fde06 	br	80cf30 <__umoddi3+0xf8>
  80cfb8:	00bfffd4 	movui	r2,65535
  80cfbc:	11804036 	bltu	r2,r6,80d0c0 <__umoddi3+0x288>
  80cfc0:	00803fc4 	movi	r2,255
  80cfc4:	1180ed36 	bltu	r2,r6,80d37c <__umoddi3+0x544>
  80cfc8:	000b883a 	mov	r5,zero
  80cfcc:	0005883a 	mov	r2,zero
  80cfd0:	8084d83a 	srl	r2,r16,r2
  80cfd4:	010020b4 	movhi	r4,130
  80cfd8:	21203704 	addi	r4,r4,-32548
  80cfdc:	01800804 	movi	r6,32
  80cfe0:	1105883a 	add	r2,r2,r4
  80cfe4:	10c00003 	ldbu	r3,0(r2)
  80cfe8:	28c7883a 	add	r3,r5,r3
  80cfec:	30c7c83a 	sub	r3,r6,r3
  80cff0:	1800bf1e 	bne	r3,zero,80d2f0 <__umoddi3+0x4b8>
  80cff4:	0039883a 	mov	fp,zero
  80cff8:	802ad43a 	srli	r21,r16,16
  80cffc:	a009883a 	mov	r4,r20
  80d000:	85ffffcc 	andi	r23,r16,65535
  80d004:	a80b883a 	mov	r5,r21
  80d008:	0804cbc0 	call	804cbc <__udivsi3>
  80d00c:	a009883a 	mov	r4,r20
  80d010:	a80b883a 	mov	r5,r21
  80d014:	b8a3383a 	mul	r17,r23,r2
  80d018:	0804cc40 	call	804cc4 <__umodsi3>
  80d01c:	1004943a 	slli	r2,r2,16
  80d020:	b006d43a 	srli	r3,r22,16
  80d024:	10c4b03a 	or	r2,r2,r3
  80d028:	1440032e 	bgeu	r2,r17,80d038 <__umoddi3+0x200>
  80d02c:	1405883a 	add	r2,r2,r16
  80d030:	14000136 	bltu	r2,r16,80d038 <__umoddi3+0x200>
  80d034:	1440e536 	bltu	r2,r17,80d3cc <__umoddi3+0x594>
  80d038:	1463c83a 	sub	r17,r2,r17
  80d03c:	8809883a 	mov	r4,r17
  80d040:	a80b883a 	mov	r5,r21
  80d044:	0804cbc0 	call	804cbc <__udivsi3>
  80d048:	8809883a 	mov	r4,r17
  80d04c:	b8a3383a 	mul	r17,r23,r2
  80d050:	a80b883a 	mov	r5,r21
  80d054:	0804cc40 	call	804cc4 <__umodsi3>
  80d058:	1004943a 	slli	r2,r2,16
  80d05c:	b0ffffcc 	andi	r3,r22,65535
  80d060:	10c4b03a 	or	r2,r2,r3
  80d064:	1440042e 	bgeu	r2,r17,80d078 <__umoddi3+0x240>
  80d068:	1405883a 	add	r2,r2,r16
  80d06c:	14000236 	bltu	r2,r16,80d078 <__umoddi3+0x240>
  80d070:	1440012e 	bgeu	r2,r17,80d078 <__umoddi3+0x240>
  80d074:	1405883a 	add	r2,r2,r16
  80d078:	1445c83a 	sub	r2,r2,r17
  80d07c:	1724d83a 	srl	r18,r2,fp
  80d080:	0013883a 	mov	r9,zero
  80d084:	9011883a 	mov	r8,r18
  80d088:	003fa906 	br	80cf30 <__umoddi3+0xf8>
  80d08c:	00804034 	movhi	r2,256
  80d090:	10bfffc4 	addi	r2,r2,-1
  80d094:	1400b036 	bltu	r2,r16,80d358 <__umoddi3+0x520>
  80d098:	01400404 	movi	r5,16
  80d09c:	2805883a 	mov	r2,r5
  80d0a0:	003f7c06 	br	80ce94 <__umoddi3+0x5c>
  80d0a4:	01000044 	movi	r4,1
  80d0a8:	000b883a 	mov	r5,zero
  80d0ac:	0804cbc0 	call	804cbc <__udivsi3>
  80d0b0:	1021883a 	mov	r16,r2
  80d0b4:	00bfffd4 	movui	r2,65535
  80d0b8:	143ff436 	bltu	r2,r16,80d08c <__umoddi3+0x254>
  80d0bc:	003f7106 	br	80ce84 <__umoddi3+0x4c>
  80d0c0:	00804034 	movhi	r2,256
  80d0c4:	10bfffc4 	addi	r2,r2,-1
  80d0c8:	1180af36 	bltu	r2,r6,80d388 <__umoddi3+0x550>
  80d0cc:	01400404 	movi	r5,16
  80d0d0:	2805883a 	mov	r2,r5
  80d0d4:	003fbe06 	br	80cfd0 <__umoddi3+0x198>
  80d0d8:	00804034 	movhi	r2,256
  80d0dc:	10bfffc4 	addi	r2,r2,-1
  80d0e0:	11c0ac36 	bltu	r2,r7,80d394 <__umoddi3+0x55c>
  80d0e4:	01400404 	movi	r5,16
  80d0e8:	2805883a 	mov	r2,r5
  80d0ec:	003fa406 	br	80cf80 <__umoddi3+0x148>
  80d0f0:	b409c83a 	sub	r4,r22,r16
  80d0f4:	b105803a 	cmpltu	r2,r22,r4
  80d0f8:	a187c83a 	sub	r3,r20,r6
  80d0fc:	18a9c83a 	sub	r20,r3,r2
  80d100:	202d883a 	mov	r22,r4
  80d104:	003fa906 	br	80cfac <__umoddi3+0x174>
  80d108:	85e0983a 	sll	r16,r16,r23
  80d10c:	35c5c83a 	sub	r2,r6,r23
  80d110:	a0a2d83a 	srl	r17,r20,r2
  80d114:	802ad43a 	srli	r21,r16,16
  80d118:	b084d83a 	srl	r2,r22,r2
  80d11c:	a5c6983a 	sll	r3,r20,r23
  80d120:	8809883a 	mov	r4,r17
  80d124:	a80b883a 	mov	r5,r21
  80d128:	1886b03a 	or	r3,r3,r2
  80d12c:	d8c00115 	stw	r3,4(sp)
  80d130:	853fffcc 	andi	r20,r16,65535
  80d134:	0804cbc0 	call	804cbc <__udivsi3>
  80d138:	8809883a 	mov	r4,r17
  80d13c:	a80b883a 	mov	r5,r21
  80d140:	a0a3383a 	mul	r17,r20,r2
  80d144:	0804cc40 	call	804cc4 <__umodsi3>
  80d148:	d9000117 	ldw	r4,4(sp)
  80d14c:	1004943a 	slli	r2,r2,16
  80d150:	b839883a 	mov	fp,r23
  80d154:	2006d43a 	srli	r3,r4,16
  80d158:	10c4b03a 	or	r2,r2,r3
  80d15c:	1440022e 	bgeu	r2,r17,80d168 <__umoddi3+0x330>
  80d160:	1405883a 	add	r2,r2,r16
  80d164:	1400962e 	bgeu	r2,r16,80d3c0 <__umoddi3+0x588>
  80d168:	1463c83a 	sub	r17,r2,r17
  80d16c:	8809883a 	mov	r4,r17
  80d170:	a80b883a 	mov	r5,r21
  80d174:	0804cbc0 	call	804cbc <__udivsi3>
  80d178:	8809883a 	mov	r4,r17
  80d17c:	a80b883a 	mov	r5,r21
  80d180:	a0a3383a 	mul	r17,r20,r2
  80d184:	0804cc40 	call	804cc4 <__umodsi3>
  80d188:	d9400117 	ldw	r5,4(sp)
  80d18c:	1004943a 	slli	r2,r2,16
  80d190:	28ffffcc 	andi	r3,r5,65535
  80d194:	10c4b03a 	or	r2,r2,r3
  80d198:	1440042e 	bgeu	r2,r17,80d1ac <__umoddi3+0x374>
  80d19c:	1405883a 	add	r2,r2,r16
  80d1a0:	14000236 	bltu	r2,r16,80d1ac <__umoddi3+0x374>
  80d1a4:	1440012e 	bgeu	r2,r17,80d1ac <__umoddi3+0x374>
  80d1a8:	1405883a 	add	r2,r2,r16
  80d1ac:	b5ec983a 	sll	r22,r22,r23
  80d1b0:	1463c83a 	sub	r17,r2,r17
  80d1b4:	003f4406 	br	80cec8 <__umoddi3+0x90>
  80d1b8:	3d4fc83a 	sub	r7,r7,r21
  80d1bc:	3546983a 	sll	r3,r6,r21
  80d1c0:	81c4d83a 	srl	r2,r16,r7
  80d1c4:	a1e2d83a 	srl	r17,r20,r7
  80d1c8:	a54c983a 	sll	r6,r20,r21
  80d1cc:	18aeb03a 	or	r23,r3,r2
  80d1d0:	b828d43a 	srli	r20,r23,16
  80d1d4:	b1c4d83a 	srl	r2,r22,r7
  80d1d8:	8809883a 	mov	r4,r17
  80d1dc:	a00b883a 	mov	r5,r20
  80d1e0:	308cb03a 	or	r6,r6,r2
  80d1e4:	d9c00315 	stw	r7,12(sp)
  80d1e8:	d9800215 	stw	r6,8(sp)
  80d1ec:	0804cbc0 	call	804cbc <__udivsi3>
  80d1f0:	8809883a 	mov	r4,r17
  80d1f4:	a00b883a 	mov	r5,r20
  80d1f8:	1039883a 	mov	fp,r2
  80d1fc:	0804cc40 	call	804cc4 <__umodsi3>
  80d200:	b8ffffcc 	andi	r3,r23,65535
  80d204:	d8c00415 	stw	r3,16(sp)
  80d208:	d9000217 	ldw	r4,8(sp)
  80d20c:	d9400417 	ldw	r5,16(sp)
  80d210:	1004943a 	slli	r2,r2,16
  80d214:	2006d43a 	srli	r3,r4,16
  80d218:	8560983a 	sll	r16,r16,r21
  80d21c:	2f23383a 	mul	r17,r5,fp
  80d220:	10c4b03a 	or	r2,r2,r3
  80d224:	dc000015 	stw	r16,0(sp)
  80d228:	b56c983a 	sll	r22,r22,r21
  80d22c:	1440032e 	bgeu	r2,r17,80d23c <__umoddi3+0x404>
  80d230:	15c5883a 	add	r2,r2,r23
  80d234:	e73fffc4 	addi	fp,fp,-1
  80d238:	15c05d2e 	bgeu	r2,r23,80d3b0 <__umoddi3+0x578>
  80d23c:	1463c83a 	sub	r17,r2,r17
  80d240:	8809883a 	mov	r4,r17
  80d244:	a00b883a 	mov	r5,r20
  80d248:	0804cbc0 	call	804cbc <__udivsi3>
  80d24c:	8809883a 	mov	r4,r17
  80d250:	a00b883a 	mov	r5,r20
  80d254:	1021883a 	mov	r16,r2
  80d258:	0804cc40 	call	804cc4 <__umodsi3>
  80d25c:	d8c00417 	ldw	r3,16(sp)
  80d260:	d9000217 	ldw	r4,8(sp)
  80d264:	1004943a 	slli	r2,r2,16
  80d268:	1c23383a 	mul	r17,r3,r16
  80d26c:	20ffffcc 	andi	r3,r4,65535
  80d270:	10ceb03a 	or	r7,r2,r3
  80d274:	3c40032e 	bgeu	r7,r17,80d284 <__umoddi3+0x44c>
  80d278:	3dcf883a 	add	r7,r7,r23
  80d27c:	843fffc4 	addi	r16,r16,-1
  80d280:	3dc0472e 	bgeu	r7,r23,80d3a0 <__umoddi3+0x568>
  80d284:	e004943a 	slli	r2,fp,16
  80d288:	d9400017 	ldw	r5,0(sp)
  80d28c:	3c4fc83a 	sub	r7,r7,r17
  80d290:	8084b03a 	or	r2,r16,r2
  80d294:	28ffffcc 	andi	r3,r5,65535
  80d298:	280cd43a 	srli	r6,r5,16
  80d29c:	100ad43a 	srli	r5,r2,16
  80d2a0:	10bfffcc 	andi	r2,r2,65535
  80d2a4:	10d1383a 	mul	r8,r2,r3
  80d2a8:	28c7383a 	mul	r3,r5,r3
  80d2ac:	1185383a 	mul	r2,r2,r6
  80d2b0:	4008d43a 	srli	r4,r8,16
  80d2b4:	298b383a 	mul	r5,r5,r6
  80d2b8:	10c5883a 	add	r2,r2,r3
  80d2bc:	2089883a 	add	r4,r4,r2
  80d2c0:	20c0022e 	bgeu	r4,r3,80d2cc <__umoddi3+0x494>
  80d2c4:	00800074 	movhi	r2,1
  80d2c8:	288b883a 	add	r5,r5,r2
  80d2cc:	2004d43a 	srli	r2,r4,16
  80d2d0:	2008943a 	slli	r4,r4,16
  80d2d4:	40ffffcc 	andi	r3,r8,65535
  80d2d8:	288b883a 	add	r5,r5,r2
  80d2dc:	20c9883a 	add	r4,r4,r3
  80d2e0:	39400b36 	bltu	r7,r5,80d310 <__umoddi3+0x4d8>
  80d2e4:	39403d26 	beq	r7,r5,80d3dc <__umoddi3+0x5a4>
  80d2e8:	394bc83a 	sub	r5,r7,r5
  80d2ec:	00000f06 	br	80d32c <__umoddi3+0x4f4>
  80d2f0:	30c5c83a 	sub	r2,r6,r3
  80d2f4:	1839883a 	mov	fp,r3
  80d2f8:	b084d83a 	srl	r2,r22,r2
  80d2fc:	a0c6983a 	sll	r3,r20,r3
  80d300:	8720983a 	sll	r16,r16,fp
  80d304:	b72c983a 	sll	r22,r22,fp
  80d308:	18a8b03a 	or	r20,r3,r2
  80d30c:	003f3a06 	br	80cff8 <__umoddi3+0x1c0>
  80d310:	d8c00017 	ldw	r3,0(sp)
  80d314:	20c5c83a 	sub	r2,r4,r3
  80d318:	2089803a 	cmpltu	r4,r4,r2
  80d31c:	2dc7c83a 	sub	r3,r5,r23
  80d320:	1907c83a 	sub	r3,r3,r4
  80d324:	38cbc83a 	sub	r5,r7,r3
  80d328:	1009883a 	mov	r4,r2
  80d32c:	b105c83a 	sub	r2,r22,r4
  80d330:	b087803a 	cmpltu	r3,r22,r2
  80d334:	28c7c83a 	sub	r3,r5,r3
  80d338:	d9400317 	ldw	r5,12(sp)
  80d33c:	1544d83a 	srl	r2,r2,r21
  80d340:	1948983a 	sll	r4,r3,r5
  80d344:	1d46d83a 	srl	r3,r3,r21
  80d348:	20a4b03a 	or	r18,r4,r2
  80d34c:	9011883a 	mov	r8,r18
  80d350:	1813883a 	mov	r9,r3
  80d354:	003ef606 	br	80cf30 <__umoddi3+0xf8>
  80d358:	01400604 	movi	r5,24
  80d35c:	2805883a 	mov	r2,r5
  80d360:	003ecc06 	br	80ce94 <__umoddi3+0x5c>
  80d364:	01400204 	movi	r5,8
  80d368:	2805883a 	mov	r2,r5
  80d36c:	003ec906 	br	80ce94 <__umoddi3+0x5c>
  80d370:	01400204 	movi	r5,8
  80d374:	2805883a 	mov	r2,r5
  80d378:	003f0106 	br	80cf80 <__umoddi3+0x148>
  80d37c:	01400204 	movi	r5,8
  80d380:	2805883a 	mov	r2,r5
  80d384:	003f1206 	br	80cfd0 <__umoddi3+0x198>
  80d388:	01400604 	movi	r5,24
  80d38c:	2805883a 	mov	r2,r5
  80d390:	003f0f06 	br	80cfd0 <__umoddi3+0x198>
  80d394:	01400604 	movi	r5,24
  80d398:	2805883a 	mov	r2,r5
  80d39c:	003ef806 	br	80cf80 <__umoddi3+0x148>
  80d3a0:	3c7fb82e 	bgeu	r7,r17,80d284 <__umoddi3+0x44c>
  80d3a4:	843fffc4 	addi	r16,r16,-1
  80d3a8:	3dcf883a 	add	r7,r7,r23
  80d3ac:	003fb506 	br	80d284 <__umoddi3+0x44c>
  80d3b0:	147fa22e 	bgeu	r2,r17,80d23c <__umoddi3+0x404>
  80d3b4:	e73fffc4 	addi	fp,fp,-1
  80d3b8:	15c5883a 	add	r2,r2,r23
  80d3bc:	003f9f06 	br	80d23c <__umoddi3+0x404>
  80d3c0:	147f692e 	bgeu	r2,r17,80d168 <__umoddi3+0x330>
  80d3c4:	1405883a 	add	r2,r2,r16
  80d3c8:	003f6706 	br	80d168 <__umoddi3+0x330>
  80d3cc:	1405883a 	add	r2,r2,r16
  80d3d0:	003f1906 	br	80d038 <__umoddi3+0x200>
  80d3d4:	1405883a 	add	r2,r2,r16
  80d3d8:	003ec906 	br	80cf00 <__umoddi3+0xc8>
  80d3dc:	b13fcc36 	bltu	r22,r4,80d310 <__umoddi3+0x4d8>
  80d3e0:	000b883a 	mov	r5,zero
  80d3e4:	003fd106 	br	80d32c <__umoddi3+0x4f4>

0080d3e8 <__nedf2>:
  80d3e8:	deffef04 	addi	sp,sp,-68
  80d3ec:	dc400f15 	stw	r17,60(sp)
  80d3f0:	dc400404 	addi	r17,sp,16
  80d3f4:	2005883a 	mov	r2,r4
  80d3f8:	2807883a 	mov	r3,r5
  80d3fc:	dc000e15 	stw	r16,56(sp)
  80d400:	d809883a 	mov	r4,sp
  80d404:	880b883a 	mov	r5,r17
  80d408:	dc000904 	addi	r16,sp,36
  80d40c:	d8c00115 	stw	r3,4(sp)
  80d410:	d8800015 	stw	r2,0(sp)
  80d414:	d9800215 	stw	r6,8(sp)
  80d418:	dfc01015 	stw	ra,64(sp)
  80d41c:	d9c00315 	stw	r7,12(sp)
  80d420:	08053200 	call	805320 <__unpack_d>
  80d424:	d9000204 	addi	r4,sp,8
  80d428:	800b883a 	mov	r5,r16
  80d42c:	08053200 	call	805320 <__unpack_d>
  80d430:	d8800417 	ldw	r2,16(sp)
  80d434:	00c00044 	movi	r3,1
  80d438:	180d883a 	mov	r6,r3
  80d43c:	1880062e 	bgeu	r3,r2,80d458 <__nedf2+0x70>
  80d440:	d8800917 	ldw	r2,36(sp)
  80d444:	8809883a 	mov	r4,r17
  80d448:	800b883a 	mov	r5,r16
  80d44c:	1880022e 	bgeu	r3,r2,80d458 <__nedf2+0x70>
  80d450:	08054580 	call	805458 <__fpcmp_parts_d>
  80d454:	100d883a 	mov	r6,r2
  80d458:	3005883a 	mov	r2,r6
  80d45c:	dfc01017 	ldw	ra,64(sp)
  80d460:	dc400f17 	ldw	r17,60(sp)
  80d464:	dc000e17 	ldw	r16,56(sp)
  80d468:	dec01104 	addi	sp,sp,68
  80d46c:	f800283a 	ret

0080d470 <__ltdf2>:
  80d470:	deffef04 	addi	sp,sp,-68
  80d474:	dc400f15 	stw	r17,60(sp)
  80d478:	dc400404 	addi	r17,sp,16
  80d47c:	2005883a 	mov	r2,r4
  80d480:	2807883a 	mov	r3,r5
  80d484:	dc000e15 	stw	r16,56(sp)
  80d488:	d809883a 	mov	r4,sp
  80d48c:	880b883a 	mov	r5,r17
  80d490:	dc000904 	addi	r16,sp,36
  80d494:	d8c00115 	stw	r3,4(sp)
  80d498:	d8800015 	stw	r2,0(sp)
  80d49c:	d9800215 	stw	r6,8(sp)
  80d4a0:	dfc01015 	stw	ra,64(sp)
  80d4a4:	d9c00315 	stw	r7,12(sp)
  80d4a8:	08053200 	call	805320 <__unpack_d>
  80d4ac:	d9000204 	addi	r4,sp,8
  80d4b0:	800b883a 	mov	r5,r16
  80d4b4:	08053200 	call	805320 <__unpack_d>
  80d4b8:	d8800417 	ldw	r2,16(sp)
  80d4bc:	00c00044 	movi	r3,1
  80d4c0:	180d883a 	mov	r6,r3
  80d4c4:	1880062e 	bgeu	r3,r2,80d4e0 <__ltdf2+0x70>
  80d4c8:	d8800917 	ldw	r2,36(sp)
  80d4cc:	8809883a 	mov	r4,r17
  80d4d0:	800b883a 	mov	r5,r16
  80d4d4:	1880022e 	bgeu	r3,r2,80d4e0 <__ltdf2+0x70>
  80d4d8:	08054580 	call	805458 <__fpcmp_parts_d>
  80d4dc:	100d883a 	mov	r6,r2
  80d4e0:	3005883a 	mov	r2,r6
  80d4e4:	dfc01017 	ldw	ra,64(sp)
  80d4e8:	dc400f17 	ldw	r17,60(sp)
  80d4ec:	dc000e17 	ldw	r16,56(sp)
  80d4f0:	dec01104 	addi	sp,sp,68
  80d4f4:	f800283a 	ret

0080d4f8 <__floatunsidf>:
  80d4f8:	defff204 	addi	sp,sp,-56
  80d4fc:	dfc00d15 	stw	ra,52(sp)
  80d500:	ddc00c15 	stw	r23,48(sp)
  80d504:	dd800b15 	stw	r22,44(sp)
  80d508:	dd400a15 	stw	r21,40(sp)
  80d50c:	dd000915 	stw	r20,36(sp)
  80d510:	dcc00815 	stw	r19,32(sp)
  80d514:	dc800715 	stw	r18,28(sp)
  80d518:	dc400615 	stw	r17,24(sp)
  80d51c:	dc000515 	stw	r16,20(sp)
  80d520:	d8000115 	stw	zero,4(sp)
  80d524:	20000f1e 	bne	r4,zero,80d564 <__floatunsidf+0x6c>
  80d528:	00800084 	movi	r2,2
  80d52c:	d8800015 	stw	r2,0(sp)
  80d530:	d809883a 	mov	r4,sp
  80d534:	080500c0 	call	80500c <__pack_d>
  80d538:	dfc00d17 	ldw	ra,52(sp)
  80d53c:	ddc00c17 	ldw	r23,48(sp)
  80d540:	dd800b17 	ldw	r22,44(sp)
  80d544:	dd400a17 	ldw	r21,40(sp)
  80d548:	dd000917 	ldw	r20,36(sp)
  80d54c:	dcc00817 	ldw	r19,32(sp)
  80d550:	dc800717 	ldw	r18,28(sp)
  80d554:	dc400617 	ldw	r17,24(sp)
  80d558:	dc000517 	ldw	r16,20(sp)
  80d55c:	dec00e04 	addi	sp,sp,56
  80d560:	f800283a 	ret
  80d564:	008000c4 	movi	r2,3
  80d568:	00c00f04 	movi	r3,60
  80d56c:	002f883a 	mov	r23,zero
  80d570:	202d883a 	mov	r22,r4
  80d574:	d8800015 	stw	r2,0(sp)
  80d578:	d8c00215 	stw	r3,8(sp)
  80d57c:	d9000315 	stw	r4,12(sp)
  80d580:	ddc00415 	stw	r23,16(sp)
  80d584:	0804d640 	call	804d64 <__clzsi2>
  80d588:	12400744 	addi	r9,r2,29
  80d58c:	48000b16 	blt	r9,zero,80d5bc <__floatunsidf+0xc4>
  80d590:	483fe726 	beq	r9,zero,80d530 <__floatunsidf+0x38>
  80d594:	10bfff44 	addi	r2,r2,-3
  80d598:	10002e16 	blt	r2,zero,80d654 <__floatunsidf+0x15c>
  80d59c:	b0a2983a 	sll	r17,r22,r2
  80d5a0:	0021883a 	mov	r16,zero
  80d5a4:	d8800217 	ldw	r2,8(sp)
  80d5a8:	dc400415 	stw	r17,16(sp)
  80d5ac:	dc000315 	stw	r16,12(sp)
  80d5b0:	1245c83a 	sub	r2,r2,r9
  80d5b4:	d8800215 	stw	r2,8(sp)
  80d5b8:	003fdd06 	br	80d530 <__floatunsidf+0x38>
  80d5bc:	0255c83a 	sub	r10,zero,r9
  80d5c0:	51bff804 	addi	r6,r10,-32
  80d5c4:	30001b16 	blt	r6,zero,80d634 <__floatunsidf+0x13c>
  80d5c8:	b9a8d83a 	srl	r20,r23,r6
  80d5cc:	002b883a 	mov	r21,zero
  80d5d0:	000f883a 	mov	r7,zero
  80d5d4:	01000044 	movi	r4,1
  80d5d8:	0011883a 	mov	r8,zero
  80d5dc:	30002516 	blt	r6,zero,80d674 <__floatunsidf+0x17c>
  80d5e0:	21a6983a 	sll	r19,r4,r6
  80d5e4:	0025883a 	mov	r18,zero
  80d5e8:	00bfffc4 	movi	r2,-1
  80d5ec:	9089883a 	add	r4,r18,r2
  80d5f0:	988b883a 	add	r5,r19,r2
  80d5f4:	248d803a 	cmpltu	r6,r4,r18
  80d5f8:	314b883a 	add	r5,r6,r5
  80d5fc:	b104703a 	and	r2,r22,r4
  80d600:	b946703a 	and	r3,r23,r5
  80d604:	10c4b03a 	or	r2,r2,r3
  80d608:	10000226 	beq	r2,zero,80d614 <__floatunsidf+0x11c>
  80d60c:	01c00044 	movi	r7,1
  80d610:	0011883a 	mov	r8,zero
  80d614:	d9000217 	ldw	r4,8(sp)
  80d618:	a1c4b03a 	or	r2,r20,r7
  80d61c:	aa06b03a 	or	r3,r21,r8
  80d620:	2249c83a 	sub	r4,r4,r9
  80d624:	d8c00415 	stw	r3,16(sp)
  80d628:	d9000215 	stw	r4,8(sp)
  80d62c:	d8800315 	stw	r2,12(sp)
  80d630:	003fbf06 	br	80d530 <__floatunsidf+0x38>
  80d634:	bdc7883a 	add	r3,r23,r23
  80d638:	008007c4 	movi	r2,31
  80d63c:	1285c83a 	sub	r2,r2,r10
  80d640:	1886983a 	sll	r3,r3,r2
  80d644:	b2a8d83a 	srl	r20,r22,r10
  80d648:	baaad83a 	srl	r21,r23,r10
  80d64c:	1d28b03a 	or	r20,r3,r20
  80d650:	003fdf06 	br	80d5d0 <__floatunsidf+0xd8>
  80d654:	b006d07a 	srli	r3,r22,1
  80d658:	008007c4 	movi	r2,31
  80d65c:	1245c83a 	sub	r2,r2,r9
  80d660:	1886d83a 	srl	r3,r3,r2
  80d664:	ba62983a 	sll	r17,r23,r9
  80d668:	b260983a 	sll	r16,r22,r9
  80d66c:	1c62b03a 	or	r17,r3,r17
  80d670:	003fcc06 	br	80d5a4 <__floatunsidf+0xac>
  80d674:	2006d07a 	srli	r3,r4,1
  80d678:	008007c4 	movi	r2,31
  80d67c:	1285c83a 	sub	r2,r2,r10
  80d680:	18a6d83a 	srl	r19,r3,r2
  80d684:	22a4983a 	sll	r18,r4,r10
  80d688:	003fd706 	br	80d5e8 <__floatunsidf+0xf0>

0080d68c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80d68c:	defff804 	addi	sp,sp,-32
  80d690:	dfc00715 	stw	ra,28(sp)
  80d694:	df000615 	stw	fp,24(sp)
  80d698:	df000604 	addi	fp,sp,24
  80d69c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80d6a0:	e0bffc17 	ldw	r2,-16(fp)
  80d6a4:	1004803a 	cmplt	r2,r2,zero
  80d6a8:	1000081e 	bne	r2,zero,80d6cc <close+0x40>
  80d6ac:	e0bffc17 	ldw	r2,-16(fp)
  80d6b0:	10800324 	muli	r2,r2,12
  80d6b4:	1007883a 	mov	r3,r2
  80d6b8:	008020b4 	movhi	r2,130
  80d6bc:	10a34704 	addi	r2,r2,-29412
  80d6c0:	1887883a 	add	r3,r3,r2
  80d6c4:	e0ffff15 	stw	r3,-4(fp)
  80d6c8:	00000106 	br	80d6d0 <close+0x44>
  80d6cc:	e03fff15 	stw	zero,-4(fp)
  80d6d0:	e0bfff17 	ldw	r2,-4(fp)
  80d6d4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80d6d8:	e0bffb17 	ldw	r2,-20(fp)
  80d6dc:	1005003a 	cmpeq	r2,r2,zero
  80d6e0:	10001d1e 	bne	r2,zero,80d758 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80d6e4:	e0bffb17 	ldw	r2,-20(fp)
  80d6e8:	10800017 	ldw	r2,0(r2)
  80d6ec:	10800417 	ldw	r2,16(r2)
  80d6f0:	1005003a 	cmpeq	r2,r2,zero
  80d6f4:	1000071e 	bne	r2,zero,80d714 <close+0x88>
  80d6f8:	e0bffb17 	ldw	r2,-20(fp)
  80d6fc:	10800017 	ldw	r2,0(r2)
  80d700:	10800417 	ldw	r2,16(r2)
  80d704:	e13ffb17 	ldw	r4,-20(fp)
  80d708:	103ee83a 	callr	r2
  80d70c:	e0bffe15 	stw	r2,-8(fp)
  80d710:	00000106 	br	80d718 <close+0x8c>
  80d714:	e03ffe15 	stw	zero,-8(fp)
  80d718:	e0bffe17 	ldw	r2,-8(fp)
  80d71c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80d720:	e13ffc17 	ldw	r4,-16(fp)
  80d724:	080e0900 	call	80e090 <alt_release_fd>
    if (rval < 0)
  80d728:	e0bffa17 	ldw	r2,-24(fp)
  80d72c:	1004403a 	cmpge	r2,r2,zero
  80d730:	1000071e 	bne	r2,zero,80d750 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80d734:	080d7880 	call	80d788 <alt_get_errno>
  80d738:	e0fffa17 	ldw	r3,-24(fp)
  80d73c:	00c7c83a 	sub	r3,zero,r3
  80d740:	10c00015 	stw	r3,0(r2)
      return -1;
  80d744:	00bfffc4 	movi	r2,-1
  80d748:	e0bffd15 	stw	r2,-12(fp)
  80d74c:	00000806 	br	80d770 <close+0xe4>
    }
    return 0;
  80d750:	e03ffd15 	stw	zero,-12(fp)
  80d754:	00000606 	br	80d770 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80d758:	080d7880 	call	80d788 <alt_get_errno>
  80d75c:	1007883a 	mov	r3,r2
  80d760:	00801444 	movi	r2,81
  80d764:	18800015 	stw	r2,0(r3)
    return -1;
  80d768:	00bfffc4 	movi	r2,-1
  80d76c:	e0bffd15 	stw	r2,-12(fp)
  80d770:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80d774:	e037883a 	mov	sp,fp
  80d778:	dfc00117 	ldw	ra,4(sp)
  80d77c:	df000017 	ldw	fp,0(sp)
  80d780:	dec00204 	addi	sp,sp,8
  80d784:	f800283a 	ret

0080d788 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d788:	defffd04 	addi	sp,sp,-12
  80d78c:	dfc00215 	stw	ra,8(sp)
  80d790:	df000115 	stw	fp,4(sp)
  80d794:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d798:	008020b4 	movhi	r2,130
  80d79c:	10a82204 	addi	r2,r2,-24440
  80d7a0:	10800017 	ldw	r2,0(r2)
  80d7a4:	1005003a 	cmpeq	r2,r2,zero
  80d7a8:	1000061e 	bne	r2,zero,80d7c4 <alt_get_errno+0x3c>
  80d7ac:	008020b4 	movhi	r2,130
  80d7b0:	10a82204 	addi	r2,r2,-24440
  80d7b4:	10800017 	ldw	r2,0(r2)
  80d7b8:	103ee83a 	callr	r2
  80d7bc:	e0bfff15 	stw	r2,-4(fp)
  80d7c0:	00000306 	br	80d7d0 <alt_get_errno+0x48>
  80d7c4:	008020b4 	movhi	r2,130
  80d7c8:	10af2204 	addi	r2,r2,-17272
  80d7cc:	e0bfff15 	stw	r2,-4(fp)
  80d7d0:	e0bfff17 	ldw	r2,-4(fp)
}
  80d7d4:	e037883a 	mov	sp,fp
  80d7d8:	dfc00117 	ldw	ra,4(sp)
  80d7dc:	df000017 	ldw	fp,0(sp)
  80d7e0:	dec00204 	addi	sp,sp,8
  80d7e4:	f800283a 	ret

0080d7e8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80d7e8:	defffc04 	addi	sp,sp,-16
  80d7ec:	df000315 	stw	fp,12(sp)
  80d7f0:	df000304 	addi	fp,sp,12
  80d7f4:	e13ffd15 	stw	r4,-12(fp)
  80d7f8:	e17ffe15 	stw	r5,-8(fp)
  80d7fc:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80d800:	e0bfff17 	ldw	r2,-4(fp)
}
  80d804:	e037883a 	mov	sp,fp
  80d808:	df000017 	ldw	fp,0(sp)
  80d80c:	dec00104 	addi	sp,sp,4
  80d810:	f800283a 	ret

0080d814 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80d814:	defff904 	addi	sp,sp,-28
  80d818:	dfc00615 	stw	ra,24(sp)
  80d81c:	df000515 	stw	fp,20(sp)
  80d820:	df000504 	addi	fp,sp,20
  80d824:	e13ffc15 	stw	r4,-16(fp)
  80d828:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d82c:	e0bffc17 	ldw	r2,-16(fp)
  80d830:	1004803a 	cmplt	r2,r2,zero
  80d834:	1000081e 	bne	r2,zero,80d858 <fstat+0x44>
  80d838:	e0bffc17 	ldw	r2,-16(fp)
  80d83c:	10800324 	muli	r2,r2,12
  80d840:	1007883a 	mov	r3,r2
  80d844:	008020b4 	movhi	r2,130
  80d848:	10a34704 	addi	r2,r2,-29412
  80d84c:	1887883a 	add	r3,r3,r2
  80d850:	e0ffff15 	stw	r3,-4(fp)
  80d854:	00000106 	br	80d85c <fstat+0x48>
  80d858:	e03fff15 	stw	zero,-4(fp)
  80d85c:	e0bfff17 	ldw	r2,-4(fp)
  80d860:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80d864:	e0bffb17 	ldw	r2,-20(fp)
  80d868:	1005003a 	cmpeq	r2,r2,zero
  80d86c:	1000121e 	bne	r2,zero,80d8b8 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80d870:	e0bffb17 	ldw	r2,-20(fp)
  80d874:	10800017 	ldw	r2,0(r2)
  80d878:	10800817 	ldw	r2,32(r2)
  80d87c:	1005003a 	cmpeq	r2,r2,zero
  80d880:	1000081e 	bne	r2,zero,80d8a4 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  80d884:	e0bffb17 	ldw	r2,-20(fp)
  80d888:	10800017 	ldw	r2,0(r2)
  80d88c:	10800817 	ldw	r2,32(r2)
  80d890:	e13ffb17 	ldw	r4,-20(fp)
  80d894:	e17ffd17 	ldw	r5,-12(fp)
  80d898:	103ee83a 	callr	r2
  80d89c:	e0bffe15 	stw	r2,-8(fp)
  80d8a0:	00000b06 	br	80d8d0 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80d8a4:	e0fffd17 	ldw	r3,-12(fp)
  80d8a8:	00880004 	movi	r2,8192
  80d8ac:	18800115 	stw	r2,4(r3)
      return 0;
  80d8b0:	e03ffe15 	stw	zero,-8(fp)
  80d8b4:	00000606 	br	80d8d0 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80d8b8:	080d8e80 	call	80d8e8 <alt_get_errno>
  80d8bc:	1007883a 	mov	r3,r2
  80d8c0:	00801444 	movi	r2,81
  80d8c4:	18800015 	stw	r2,0(r3)
    return -1;
  80d8c8:	00bfffc4 	movi	r2,-1
  80d8cc:	e0bffe15 	stw	r2,-8(fp)
  80d8d0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80d8d4:	e037883a 	mov	sp,fp
  80d8d8:	dfc00117 	ldw	ra,4(sp)
  80d8dc:	df000017 	ldw	fp,0(sp)
  80d8e0:	dec00204 	addi	sp,sp,8
  80d8e4:	f800283a 	ret

0080d8e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d8e8:	defffd04 	addi	sp,sp,-12
  80d8ec:	dfc00215 	stw	ra,8(sp)
  80d8f0:	df000115 	stw	fp,4(sp)
  80d8f4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d8f8:	008020b4 	movhi	r2,130
  80d8fc:	10a82204 	addi	r2,r2,-24440
  80d900:	10800017 	ldw	r2,0(r2)
  80d904:	1005003a 	cmpeq	r2,r2,zero
  80d908:	1000061e 	bne	r2,zero,80d924 <alt_get_errno+0x3c>
  80d90c:	008020b4 	movhi	r2,130
  80d910:	10a82204 	addi	r2,r2,-24440
  80d914:	10800017 	ldw	r2,0(r2)
  80d918:	103ee83a 	callr	r2
  80d91c:	e0bfff15 	stw	r2,-4(fp)
  80d920:	00000306 	br	80d930 <alt_get_errno+0x48>
  80d924:	008020b4 	movhi	r2,130
  80d928:	10af2204 	addi	r2,r2,-17272
  80d92c:	e0bfff15 	stw	r2,-4(fp)
  80d930:	e0bfff17 	ldw	r2,-4(fp)
}
  80d934:	e037883a 	mov	sp,fp
  80d938:	dfc00117 	ldw	ra,4(sp)
  80d93c:	df000017 	ldw	fp,0(sp)
  80d940:	dec00204 	addi	sp,sp,8
  80d944:	f800283a 	ret

0080d948 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80d948:	deffef04 	addi	sp,sp,-68
  80d94c:	df001015 	stw	fp,64(sp)
  80d950:	df001004 	addi	fp,sp,64
  80d954:	e13ffc15 	stw	r4,-16(fp)
  80d958:	e17ffd15 	stw	r5,-12(fp)
  80d95c:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  80d960:	00bffa84 	movi	r2,-22
  80d964:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80d968:	e0bffc17 	ldw	r2,-16(fp)
  80d96c:	10800828 	cmpgeui	r2,r2,32
  80d970:	1000601e 	bne	r2,zero,80daf4 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d974:	0005303a 	rdctl	r2,status
  80d978:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d97c:	e0fff917 	ldw	r3,-28(fp)
  80d980:	00bfff84 	movi	r2,-2
  80d984:	1884703a 	and	r2,r3,r2
  80d988:	1001703a 	wrctl	status,r2
  
  return context;
  80d98c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80d990:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  80d994:	e0bffc17 	ldw	r2,-16(fp)
  80d998:	00c020b4 	movhi	r3,130
  80d99c:	18f11904 	addi	r3,r3,-15260
  80d9a0:	100490fa 	slli	r2,r2,3
  80d9a4:	10c7883a 	add	r3,r2,r3
  80d9a8:	e0bffe17 	ldw	r2,-8(fp)
  80d9ac:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  80d9b0:	e0bffc17 	ldw	r2,-16(fp)
  80d9b4:	00c020b4 	movhi	r3,130
  80d9b8:	18f11904 	addi	r3,r3,-15260
  80d9bc:	100490fa 	slli	r2,r2,3
  80d9c0:	10c5883a 	add	r2,r2,r3
  80d9c4:	10c00104 	addi	r3,r2,4
  80d9c8:	e0bffd17 	ldw	r2,-12(fp)
  80d9cc:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80d9d0:	e0bffe17 	ldw	r2,-8(fp)
  80d9d4:	1005003a 	cmpeq	r2,r2,zero
  80d9d8:	1000201e 	bne	r2,zero,80da5c <alt_irq_register+0x114>
  80d9dc:	e0bffc17 	ldw	r2,-16(fp)
  80d9e0:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d9e4:	0005303a 	rdctl	r2,status
  80d9e8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d9ec:	e0fff617 	ldw	r3,-40(fp)
  80d9f0:	00bfff84 	movi	r2,-2
  80d9f4:	1884703a 	and	r2,r3,r2
  80d9f8:	1001703a 	wrctl	status,r2
  
  return context;
  80d9fc:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80da00:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80da04:	e0fff717 	ldw	r3,-36(fp)
  80da08:	00800044 	movi	r2,1
  80da0c:	10c4983a 	sll	r2,r2,r3
  80da10:	1007883a 	mov	r3,r2
  80da14:	008020b4 	movhi	r2,130
  80da18:	10af2604 	addi	r2,r2,-17256
  80da1c:	10800017 	ldw	r2,0(r2)
  80da20:	1886b03a 	or	r3,r3,r2
  80da24:	008020b4 	movhi	r2,130
  80da28:	10af2604 	addi	r2,r2,-17256
  80da2c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80da30:	008020b4 	movhi	r2,130
  80da34:	10af2604 	addi	r2,r2,-17256
  80da38:	10800017 	ldw	r2,0(r2)
  80da3c:	100170fa 	wrctl	ienable,r2
  80da40:	e0bff817 	ldw	r2,-32(fp)
  80da44:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80da48:	e0bff517 	ldw	r2,-44(fp)
  80da4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80da50:	0005883a 	mov	r2,zero
  80da54:	e0bfff15 	stw	r2,-4(fp)
  80da58:	00002006 	br	80dadc <alt_irq_register+0x194>
  80da5c:	e0bffc17 	ldw	r2,-16(fp)
  80da60:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80da64:	0005303a 	rdctl	r2,status
  80da68:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80da6c:	e0fff217 	ldw	r3,-56(fp)
  80da70:	00bfff84 	movi	r2,-2
  80da74:	1884703a 	and	r2,r3,r2
  80da78:	1001703a 	wrctl	status,r2
  
  return context;
  80da7c:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80da80:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  80da84:	e0fff317 	ldw	r3,-52(fp)
  80da88:	00800044 	movi	r2,1
  80da8c:	10c4983a 	sll	r2,r2,r3
  80da90:	0084303a 	nor	r2,zero,r2
  80da94:	1007883a 	mov	r3,r2
  80da98:	008020b4 	movhi	r2,130
  80da9c:	10af2604 	addi	r2,r2,-17256
  80daa0:	10800017 	ldw	r2,0(r2)
  80daa4:	1886703a 	and	r3,r3,r2
  80daa8:	008020b4 	movhi	r2,130
  80daac:	10af2604 	addi	r2,r2,-17256
  80dab0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80dab4:	008020b4 	movhi	r2,130
  80dab8:	10af2604 	addi	r2,r2,-17256
  80dabc:	10800017 	ldw	r2,0(r2)
  80dac0:	100170fa 	wrctl	ienable,r2
  80dac4:	e0bff417 	ldw	r2,-48(fp)
  80dac8:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dacc:	e0bff117 	ldw	r2,-60(fp)
  80dad0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80dad4:	0005883a 	mov	r2,zero
  80dad8:	e0bfff15 	stw	r2,-4(fp)
  80dadc:	e0bfff17 	ldw	r2,-4(fp)
  80dae0:	e0bffb15 	stw	r2,-20(fp)
  80dae4:	e0bffa17 	ldw	r2,-24(fp)
  80dae8:	e0bff015 	stw	r2,-64(fp)
  80daec:	e0bff017 	ldw	r2,-64(fp)
  80daf0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80daf4:	e0bffb17 	ldw	r2,-20(fp)
}
  80daf8:	e037883a 	mov	sp,fp
  80dafc:	df000017 	ldw	fp,0(sp)
  80db00:	dec00104 	addi	sp,sp,4
  80db04:	f800283a 	ret

0080db08 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80db08:	deffeb04 	addi	sp,sp,-84
  80db0c:	dfc01415 	stw	ra,80(sp)
  80db10:	df001315 	stw	fp,76(sp)
  80db14:	df001304 	addi	fp,sp,76
  80db18:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80db1c:	e0bffd17 	ldw	r2,-12(fp)
  80db20:	1004803a 	cmplt	r2,r2,zero
  80db24:	1000081e 	bne	r2,zero,80db48 <isatty+0x40>
  80db28:	e0bffd17 	ldw	r2,-12(fp)
  80db2c:	10800324 	muli	r2,r2,12
  80db30:	1007883a 	mov	r3,r2
  80db34:	008020b4 	movhi	r2,130
  80db38:	10a34704 	addi	r2,r2,-29412
  80db3c:	1887883a 	add	r3,r3,r2
  80db40:	e0ffff15 	stw	r3,-4(fp)
  80db44:	00000106 	br	80db4c <isatty+0x44>
  80db48:	e03fff15 	stw	zero,-4(fp)
  80db4c:	e0bfff17 	ldw	r2,-4(fp)
  80db50:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80db54:	e0bfed17 	ldw	r2,-76(fp)
  80db58:	1005003a 	cmpeq	r2,r2,zero
  80db5c:	10000f1e 	bne	r2,zero,80db9c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80db60:	e0bfed17 	ldw	r2,-76(fp)
  80db64:	10800017 	ldw	r2,0(r2)
  80db68:	10800817 	ldw	r2,32(r2)
  80db6c:	1004c03a 	cmpne	r2,r2,zero
  80db70:	1000031e 	bne	r2,zero,80db80 <isatty+0x78>
    {
      return 1;
  80db74:	00800044 	movi	r2,1
  80db78:	e0bffe15 	stw	r2,-8(fp)
  80db7c:	00000c06 	br	80dbb0 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80db80:	e17fee04 	addi	r5,fp,-72
  80db84:	e13ffd17 	ldw	r4,-12(fp)
  80db88:	080d8140 	call	80d814 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80db8c:	e0bfef17 	ldw	r2,-68(fp)
  80db90:	10880020 	cmpeqi	r2,r2,8192
  80db94:	e0bffe15 	stw	r2,-8(fp)
  80db98:	00000506 	br	80dbb0 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80db9c:	080dbc80 	call	80dbc8 <alt_get_errno>
  80dba0:	1007883a 	mov	r3,r2
  80dba4:	00801444 	movi	r2,81
  80dba8:	18800015 	stw	r2,0(r3)
    return 0;
  80dbac:	e03ffe15 	stw	zero,-8(fp)
  80dbb0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80dbb4:	e037883a 	mov	sp,fp
  80dbb8:	dfc00117 	ldw	ra,4(sp)
  80dbbc:	df000017 	ldw	fp,0(sp)
  80dbc0:	dec00204 	addi	sp,sp,8
  80dbc4:	f800283a 	ret

0080dbc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dbc8:	defffd04 	addi	sp,sp,-12
  80dbcc:	dfc00215 	stw	ra,8(sp)
  80dbd0:	df000115 	stw	fp,4(sp)
  80dbd4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80dbd8:	008020b4 	movhi	r2,130
  80dbdc:	10a82204 	addi	r2,r2,-24440
  80dbe0:	10800017 	ldw	r2,0(r2)
  80dbe4:	1005003a 	cmpeq	r2,r2,zero
  80dbe8:	1000061e 	bne	r2,zero,80dc04 <alt_get_errno+0x3c>
  80dbec:	008020b4 	movhi	r2,130
  80dbf0:	10a82204 	addi	r2,r2,-24440
  80dbf4:	10800017 	ldw	r2,0(r2)
  80dbf8:	103ee83a 	callr	r2
  80dbfc:	e0bfff15 	stw	r2,-4(fp)
  80dc00:	00000306 	br	80dc10 <alt_get_errno+0x48>
  80dc04:	008020b4 	movhi	r2,130
  80dc08:	10af2204 	addi	r2,r2,-17272
  80dc0c:	e0bfff15 	stw	r2,-4(fp)
  80dc10:	e0bfff17 	ldw	r2,-4(fp)
}
  80dc14:	e037883a 	mov	sp,fp
  80dc18:	dfc00117 	ldw	ra,4(sp)
  80dc1c:	df000017 	ldw	fp,0(sp)
  80dc20:	dec00204 	addi	sp,sp,8
  80dc24:	f800283a 	ret

0080dc28 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80dc28:	defffe04 	addi	sp,sp,-8
  80dc2c:	dfc00115 	stw	ra,4(sp)
  80dc30:	df000015 	stw	fp,0(sp)
  80dc34:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80dc38:	010020b4 	movhi	r4,130
  80dc3c:	21282704 	addi	r4,r4,-24420
  80dc40:	014020b4 	movhi	r5,130
  80dc44:	29613804 	addi	r5,r5,-31520
  80dc48:	018020b4 	movhi	r6,130
  80dc4c:	31a82704 	addi	r6,r6,-24420
  80dc50:	080dca80 	call	80dca8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80dc54:	01002034 	movhi	r4,128
  80dc58:	21000804 	addi	r4,r4,32
  80dc5c:	01402034 	movhi	r5,128
  80dc60:	29400804 	addi	r5,r5,32
  80dc64:	01802034 	movhi	r6,128
  80dc68:	31806e04 	addi	r6,r6,440
  80dc6c:	080dca80 	call	80dca8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80dc70:	01002074 	movhi	r4,129
  80dc74:	211e5904 	addi	r4,r4,31076
  80dc78:	01402074 	movhi	r5,129
  80dc7c:	295e5904 	addi	r5,r5,31076
  80dc80:	018020b4 	movhi	r6,130
  80dc84:	31a13804 	addi	r6,r6,-31520
  80dc88:	080dca80 	call	80dca8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80dc8c:	0816b800 	call	816b80 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80dc90:	0816e340 	call	816e34 <alt_icache_flush_all>
}
  80dc94:	e037883a 	mov	sp,fp
  80dc98:	dfc00117 	ldw	ra,4(sp)
  80dc9c:	df000017 	ldw	fp,0(sp)
  80dca0:	dec00204 	addi	sp,sp,8
  80dca4:	f800283a 	ret

0080dca8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80dca8:	defffc04 	addi	sp,sp,-16
  80dcac:	df000315 	stw	fp,12(sp)
  80dcb0:	df000304 	addi	fp,sp,12
  80dcb4:	e13ffd15 	stw	r4,-12(fp)
  80dcb8:	e17ffe15 	stw	r5,-8(fp)
  80dcbc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80dcc0:	e0fffe17 	ldw	r3,-8(fp)
  80dcc4:	e0bffd17 	ldw	r2,-12(fp)
  80dcc8:	18800e26 	beq	r3,r2,80dd04 <alt_load_section+0x5c>
  {
    while( to != end )
  80dccc:	00000a06 	br	80dcf8 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80dcd0:	e0bffd17 	ldw	r2,-12(fp)
  80dcd4:	10c00017 	ldw	r3,0(r2)
  80dcd8:	e0bffe17 	ldw	r2,-8(fp)
  80dcdc:	10c00015 	stw	r3,0(r2)
  80dce0:	e0bffe17 	ldw	r2,-8(fp)
  80dce4:	10800104 	addi	r2,r2,4
  80dce8:	e0bffe15 	stw	r2,-8(fp)
  80dcec:	e0bffd17 	ldw	r2,-12(fp)
  80dcf0:	10800104 	addi	r2,r2,4
  80dcf4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80dcf8:	e0fffe17 	ldw	r3,-8(fp)
  80dcfc:	e0bfff17 	ldw	r2,-4(fp)
  80dd00:	18bff31e 	bne	r3,r2,80dcd0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80dd04:	e037883a 	mov	sp,fp
  80dd08:	df000017 	ldw	fp,0(sp)
  80dd0c:	dec00104 	addi	sp,sp,4
  80dd10:	f800283a 	ret

0080dd14 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80dd14:	defff804 	addi	sp,sp,-32
  80dd18:	dfc00715 	stw	ra,28(sp)
  80dd1c:	df000615 	stw	fp,24(sp)
  80dd20:	df000604 	addi	fp,sp,24
  80dd24:	e13ffc15 	stw	r4,-16(fp)
  80dd28:	e17ffd15 	stw	r5,-12(fp)
  80dd2c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80dd30:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80dd34:	e0bffc17 	ldw	r2,-16(fp)
  80dd38:	1004803a 	cmplt	r2,r2,zero
  80dd3c:	1000081e 	bne	r2,zero,80dd60 <lseek+0x4c>
  80dd40:	e0bffc17 	ldw	r2,-16(fp)
  80dd44:	10800324 	muli	r2,r2,12
  80dd48:	1007883a 	mov	r3,r2
  80dd4c:	008020b4 	movhi	r2,130
  80dd50:	10a34704 	addi	r2,r2,-29412
  80dd54:	1887883a 	add	r3,r3,r2
  80dd58:	e0ffff15 	stw	r3,-4(fp)
  80dd5c:	00000106 	br	80dd64 <lseek+0x50>
  80dd60:	e03fff15 	stw	zero,-4(fp)
  80dd64:	e0bfff17 	ldw	r2,-4(fp)
  80dd68:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80dd6c:	e0bffb17 	ldw	r2,-20(fp)
  80dd70:	1005003a 	cmpeq	r2,r2,zero
  80dd74:	1000111e 	bne	r2,zero,80ddbc <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80dd78:	e0bffb17 	ldw	r2,-20(fp)
  80dd7c:	10800017 	ldw	r2,0(r2)
  80dd80:	10800717 	ldw	r2,28(r2)
  80dd84:	1005003a 	cmpeq	r2,r2,zero
  80dd88:	1000091e 	bne	r2,zero,80ddb0 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80dd8c:	e0bffb17 	ldw	r2,-20(fp)
  80dd90:	10800017 	ldw	r2,0(r2)
  80dd94:	10800717 	ldw	r2,28(r2)
  80dd98:	e13ffb17 	ldw	r4,-20(fp)
  80dd9c:	e17ffd17 	ldw	r5,-12(fp)
  80dda0:	e1bffe17 	ldw	r6,-8(fp)
  80dda4:	103ee83a 	callr	r2
  80dda8:	e0bffa15 	stw	r2,-24(fp)
  80ddac:	00000506 	br	80ddc4 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80ddb0:	00bfde84 	movi	r2,-134
  80ddb4:	e0bffa15 	stw	r2,-24(fp)
  80ddb8:	00000206 	br	80ddc4 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80ddbc:	00bfebc4 	movi	r2,-81
  80ddc0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80ddc4:	e0bffa17 	ldw	r2,-24(fp)
  80ddc8:	1004403a 	cmpge	r2,r2,zero
  80ddcc:	1000071e 	bne	r2,zero,80ddec <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80ddd0:	080de040 	call	80de04 <alt_get_errno>
  80ddd4:	1007883a 	mov	r3,r2
  80ddd8:	e0bffa17 	ldw	r2,-24(fp)
  80dddc:	0085c83a 	sub	r2,zero,r2
  80dde0:	18800015 	stw	r2,0(r3)
    rc = -1;
  80dde4:	00bfffc4 	movi	r2,-1
  80dde8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80ddec:	e0bffa17 	ldw	r2,-24(fp)
}
  80ddf0:	e037883a 	mov	sp,fp
  80ddf4:	dfc00117 	ldw	ra,4(sp)
  80ddf8:	df000017 	ldw	fp,0(sp)
  80ddfc:	dec00204 	addi	sp,sp,8
  80de00:	f800283a 	ret

0080de04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80de04:	defffd04 	addi	sp,sp,-12
  80de08:	dfc00215 	stw	ra,8(sp)
  80de0c:	df000115 	stw	fp,4(sp)
  80de10:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80de14:	008020b4 	movhi	r2,130
  80de18:	10a82204 	addi	r2,r2,-24440
  80de1c:	10800017 	ldw	r2,0(r2)
  80de20:	1005003a 	cmpeq	r2,r2,zero
  80de24:	1000061e 	bne	r2,zero,80de40 <alt_get_errno+0x3c>
  80de28:	008020b4 	movhi	r2,130
  80de2c:	10a82204 	addi	r2,r2,-24440
  80de30:	10800017 	ldw	r2,0(r2)
  80de34:	103ee83a 	callr	r2
  80de38:	e0bfff15 	stw	r2,-4(fp)
  80de3c:	00000306 	br	80de4c <alt_get_errno+0x48>
  80de40:	008020b4 	movhi	r2,130
  80de44:	10af2204 	addi	r2,r2,-17272
  80de48:	e0bfff15 	stw	r2,-4(fp)
  80de4c:	e0bfff17 	ldw	r2,-4(fp)
}
  80de50:	e037883a 	mov	sp,fp
  80de54:	dfc00117 	ldw	ra,4(sp)
  80de58:	df000017 	ldw	fp,0(sp)
  80de5c:	dec00204 	addi	sp,sp,8
  80de60:	f800283a 	ret

0080de64 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80de64:	defffd04 	addi	sp,sp,-12
  80de68:	dfc00215 	stw	ra,8(sp)
  80de6c:	df000115 	stw	fp,4(sp)
  80de70:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80de74:	0009883a 	mov	r4,zero
  80de78:	080e5000 	call	80e500 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80de7c:	080e5340 	call	80e534 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80de80:	010020b4 	movhi	r4,130
  80de84:	2120f904 	addi	r4,r4,-31772
  80de88:	014020b4 	movhi	r5,130
  80de8c:	2960f904 	addi	r5,r5,-31772
  80de90:	018020b4 	movhi	r6,130
  80de94:	31a0f904 	addi	r6,r6,-31772
  80de98:	0816f280 	call	816f28 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80de9c:	0816cd80 	call	816cd8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80dea0:	01002074 	movhi	r4,129
  80dea4:	211b4f04 	addi	r4,r4,27964
  80dea8:	08174ec0 	call	8174ec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80deac:	d1271317 	ldw	r4,-25524(gp)
  80deb0:	d1671417 	ldw	r5,-25520(gp)
  80deb4:	d1a71517 	ldw	r6,-25516(gp)
  80deb8:	0800b100 	call	800b10 <main>
  80debc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80dec0:	01000044 	movi	r4,1
  80dec4:	080d68c0 	call	80d68c <close>
  exit (result);
  80dec8:	e13fff17 	ldw	r4,-4(fp)
  80decc:	08175000 	call	817500 <exit>

0080ded0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80ded0:	defffe04 	addi	sp,sp,-8
  80ded4:	df000115 	stw	fp,4(sp)
  80ded8:	df000104 	addi	fp,sp,4
  80dedc:	e13fff15 	stw	r4,-4(fp)
}
  80dee0:	e037883a 	mov	sp,fp
  80dee4:	df000017 	ldw	fp,0(sp)
  80dee8:	dec00104 	addi	sp,sp,4
  80deec:	f800283a 	ret

0080def0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80def0:	defffe04 	addi	sp,sp,-8
  80def4:	df000115 	stw	fp,4(sp)
  80def8:	df000104 	addi	fp,sp,4
  80defc:	e13fff15 	stw	r4,-4(fp)
}
  80df00:	e037883a 	mov	sp,fp
  80df04:	df000017 	ldw	fp,0(sp)
  80df08:	dec00104 	addi	sp,sp,4
  80df0c:	f800283a 	ret

0080df10 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80df10:	defff704 	addi	sp,sp,-36
  80df14:	dfc00815 	stw	ra,32(sp)
  80df18:	df000715 	stw	fp,28(sp)
  80df1c:	df000704 	addi	fp,sp,28
  80df20:	e13ffb15 	stw	r4,-20(fp)
  80df24:	e17ffc15 	stw	r5,-16(fp)
  80df28:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80df2c:	e0bffb17 	ldw	r2,-20(fp)
  80df30:	1004803a 	cmplt	r2,r2,zero
  80df34:	1000081e 	bne	r2,zero,80df58 <read+0x48>
  80df38:	e0bffb17 	ldw	r2,-20(fp)
  80df3c:	10800324 	muli	r2,r2,12
  80df40:	1007883a 	mov	r3,r2
  80df44:	008020b4 	movhi	r2,130
  80df48:	10a34704 	addi	r2,r2,-29412
  80df4c:	1887883a 	add	r3,r3,r2
  80df50:	e0ffff15 	stw	r3,-4(fp)
  80df54:	00000106 	br	80df5c <read+0x4c>
  80df58:	e03fff15 	stw	zero,-4(fp)
  80df5c:	e0bfff17 	ldw	r2,-4(fp)
  80df60:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80df64:	e0bffa17 	ldw	r2,-24(fp)
  80df68:	1005003a 	cmpeq	r2,r2,zero
  80df6c:	1000241e 	bne	r2,zero,80e000 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80df70:	e0bffa17 	ldw	r2,-24(fp)
  80df74:	10800217 	ldw	r2,8(r2)
  80df78:	108000cc 	andi	r2,r2,3
  80df7c:	10800060 	cmpeqi	r2,r2,1
  80df80:	10001a1e 	bne	r2,zero,80dfec <read+0xdc>
  80df84:	e0bffa17 	ldw	r2,-24(fp)
  80df88:	10800017 	ldw	r2,0(r2)
  80df8c:	10800517 	ldw	r2,20(r2)
  80df90:	1005003a 	cmpeq	r2,r2,zero
  80df94:	1000151e 	bne	r2,zero,80dfec <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80df98:	e0bffa17 	ldw	r2,-24(fp)
  80df9c:	10800017 	ldw	r2,0(r2)
  80dfa0:	10800517 	ldw	r2,20(r2)
  80dfa4:	e17ffc17 	ldw	r5,-16(fp)
  80dfa8:	e1bffd17 	ldw	r6,-12(fp)
  80dfac:	e13ffa17 	ldw	r4,-24(fp)
  80dfb0:	103ee83a 	callr	r2
  80dfb4:	e0bff915 	stw	r2,-28(fp)
  80dfb8:	e0bff917 	ldw	r2,-28(fp)
  80dfbc:	1004403a 	cmpge	r2,r2,zero
  80dfc0:	1000071e 	bne	r2,zero,80dfe0 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80dfc4:	080e0300 	call	80e030 <alt_get_errno>
  80dfc8:	e0fff917 	ldw	r3,-28(fp)
  80dfcc:	00c7c83a 	sub	r3,zero,r3
  80dfd0:	10c00015 	stw	r3,0(r2)
          return -1;
  80dfd4:	00bfffc4 	movi	r2,-1
  80dfd8:	e0bffe15 	stw	r2,-8(fp)
  80dfdc:	00000e06 	br	80e018 <read+0x108>
        }
        return rval;
  80dfe0:	e0bff917 	ldw	r2,-28(fp)
  80dfe4:	e0bffe15 	stw	r2,-8(fp)
  80dfe8:	00000b06 	br	80e018 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80dfec:	080e0300 	call	80e030 <alt_get_errno>
  80dff0:	1007883a 	mov	r3,r2
  80dff4:	00800344 	movi	r2,13
  80dff8:	18800015 	stw	r2,0(r3)
  80dffc:	00000406 	br	80e010 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80e000:	080e0300 	call	80e030 <alt_get_errno>
  80e004:	1007883a 	mov	r3,r2
  80e008:	00801444 	movi	r2,81
  80e00c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80e010:	00bfffc4 	movi	r2,-1
  80e014:	e0bffe15 	stw	r2,-8(fp)
  80e018:	e0bffe17 	ldw	r2,-8(fp)
}
  80e01c:	e037883a 	mov	sp,fp
  80e020:	dfc00117 	ldw	ra,4(sp)
  80e024:	df000017 	ldw	fp,0(sp)
  80e028:	dec00204 	addi	sp,sp,8
  80e02c:	f800283a 	ret

0080e030 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e030:	defffd04 	addi	sp,sp,-12
  80e034:	dfc00215 	stw	ra,8(sp)
  80e038:	df000115 	stw	fp,4(sp)
  80e03c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e040:	008020b4 	movhi	r2,130
  80e044:	10a82204 	addi	r2,r2,-24440
  80e048:	10800017 	ldw	r2,0(r2)
  80e04c:	1005003a 	cmpeq	r2,r2,zero
  80e050:	1000061e 	bne	r2,zero,80e06c <alt_get_errno+0x3c>
  80e054:	008020b4 	movhi	r2,130
  80e058:	10a82204 	addi	r2,r2,-24440
  80e05c:	10800017 	ldw	r2,0(r2)
  80e060:	103ee83a 	callr	r2
  80e064:	e0bfff15 	stw	r2,-4(fp)
  80e068:	00000306 	br	80e078 <alt_get_errno+0x48>
  80e06c:	008020b4 	movhi	r2,130
  80e070:	10af2204 	addi	r2,r2,-17272
  80e074:	e0bfff15 	stw	r2,-4(fp)
  80e078:	e0bfff17 	ldw	r2,-4(fp)
}
  80e07c:	e037883a 	mov	sp,fp
  80e080:	dfc00117 	ldw	ra,4(sp)
  80e084:	df000017 	ldw	fp,0(sp)
  80e088:	dec00204 	addi	sp,sp,8
  80e08c:	f800283a 	ret

0080e090 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80e090:	defffe04 	addi	sp,sp,-8
  80e094:	df000115 	stw	fp,4(sp)
  80e098:	df000104 	addi	fp,sp,4
  80e09c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80e0a0:	e0bfff17 	ldw	r2,-4(fp)
  80e0a4:	108000d0 	cmplti	r2,r2,3
  80e0a8:	10000d1e 	bne	r2,zero,80e0e0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80e0ac:	e0bfff17 	ldw	r2,-4(fp)
  80e0b0:	00c020b4 	movhi	r3,130
  80e0b4:	18e34704 	addi	r3,r3,-29412
  80e0b8:	10800324 	muli	r2,r2,12
  80e0bc:	10c5883a 	add	r2,r2,r3
  80e0c0:	10800204 	addi	r2,r2,8
  80e0c4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80e0c8:	e0bfff17 	ldw	r2,-4(fp)
  80e0cc:	00c020b4 	movhi	r3,130
  80e0d0:	18e34704 	addi	r3,r3,-29412
  80e0d4:	10800324 	muli	r2,r2,12
  80e0d8:	10c5883a 	add	r2,r2,r3
  80e0dc:	10000015 	stw	zero,0(r2)
  }
}
  80e0e0:	e037883a 	mov	sp,fp
  80e0e4:	df000017 	ldw	fp,0(sp)
  80e0e8:	dec00104 	addi	sp,sp,4
  80e0ec:	f800283a 	ret

0080e0f0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80e0f0:	defff804 	addi	sp,sp,-32
  80e0f4:	df000715 	stw	fp,28(sp)
  80e0f8:	df000704 	addi	fp,sp,28
  80e0fc:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e100:	0005303a 	rdctl	r2,status
  80e104:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e108:	e0fffb17 	ldw	r3,-20(fp)
  80e10c:	00bfff84 	movi	r2,-2
  80e110:	1884703a 	and	r2,r3,r2
  80e114:	1001703a 	wrctl	status,r2
  
  return context;
  80e118:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80e11c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80e120:	d0a01017 	ldw	r2,-32704(gp)
  80e124:	10c000c4 	addi	r3,r2,3
  80e128:	00bfff04 	movi	r2,-4
  80e12c:	1884703a 	and	r2,r3,r2
  80e130:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80e134:	d0e01017 	ldw	r3,-32704(gp)
  80e138:	e0bffe17 	ldw	r2,-8(fp)
  80e13c:	1887883a 	add	r3,r3,r2
  80e140:	00804034 	movhi	r2,256
  80e144:	10800004 	addi	r2,r2,0
  80e148:	10c0072e 	bgeu	r2,r3,80e168 <sbrk+0x78>
  80e14c:	e0bffd17 	ldw	r2,-12(fp)
  80e150:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e154:	e0bffa17 	ldw	r2,-24(fp)
  80e158:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80e15c:	00bfffc4 	movi	r2,-1
  80e160:	e0bfff15 	stw	r2,-4(fp)
  80e164:	00000c06 	br	80e198 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80e168:	d0a01017 	ldw	r2,-32704(gp)
  80e16c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80e170:	d0e01017 	ldw	r3,-32704(gp)
  80e174:	e0bffe17 	ldw	r2,-8(fp)
  80e178:	1885883a 	add	r2,r3,r2
  80e17c:	d0a01015 	stw	r2,-32704(gp)
  80e180:	e0bffd17 	ldw	r2,-12(fp)
  80e184:	e0bff915 	stw	r2,-28(fp)
  80e188:	e0bff917 	ldw	r2,-28(fp)
  80e18c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80e190:	e0bffc17 	ldw	r2,-16(fp)
  80e194:	e0bfff15 	stw	r2,-4(fp)
  80e198:	e0bfff17 	ldw	r2,-4(fp)
} 
  80e19c:	e037883a 	mov	sp,fp
  80e1a0:	df000017 	ldw	fp,0(sp)
  80e1a4:	dec00104 	addi	sp,sp,4
  80e1a8:	f800283a 	ret

0080e1ac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80e1ac:	defffa04 	addi	sp,sp,-24
  80e1b0:	df000515 	stw	fp,20(sp)
  80e1b4:	df000504 	addi	fp,sp,20
  80e1b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e1bc:	0005303a 	rdctl	r2,status
  80e1c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e1c4:	e0fffd17 	ldw	r3,-12(fp)
  80e1c8:	00bfff84 	movi	r2,-2
  80e1cc:	1884703a 	and	r2,r3,r2
  80e1d0:	1001703a 	wrctl	status,r2
  
  return context;
  80e1d4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80e1d8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80e1dc:	e0bfff17 	ldw	r2,-4(fp)
  80e1e0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80e1e4:	e0bffc17 	ldw	r2,-16(fp)
  80e1e8:	10c00017 	ldw	r3,0(r2)
  80e1ec:	e0bffc17 	ldw	r2,-16(fp)
  80e1f0:	10800117 	ldw	r2,4(r2)
  80e1f4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  80e1f8:	e0bffc17 	ldw	r2,-16(fp)
  80e1fc:	10c00117 	ldw	r3,4(r2)
  80e200:	e0bffc17 	ldw	r2,-16(fp)
  80e204:	10800017 	ldw	r2,0(r2)
  80e208:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80e20c:	e0fffc17 	ldw	r3,-16(fp)
  80e210:	e0bffc17 	ldw	r2,-16(fp)
  80e214:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  80e218:	e0fffc17 	ldw	r3,-16(fp)
  80e21c:	e0bffc17 	ldw	r2,-16(fp)
  80e220:	18800015 	stw	r2,0(r3)
  80e224:	e0bffe17 	ldw	r2,-8(fp)
  80e228:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e22c:	e0bffb17 	ldw	r2,-20(fp)
  80e230:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80e234:	e037883a 	mov	sp,fp
  80e238:	df000017 	ldw	fp,0(sp)
  80e23c:	dec00104 	addi	sp,sp,4
  80e240:	f800283a 	ret

0080e244 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80e244:	defffb04 	addi	sp,sp,-20
  80e248:	dfc00415 	stw	ra,16(sp)
  80e24c:	df000315 	stw	fp,12(sp)
  80e250:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80e254:	d0a01117 	ldw	r2,-32700(gp)
  80e258:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80e25c:	d0a71717 	ldw	r2,-25508(gp)
  80e260:	10800044 	addi	r2,r2,1
  80e264:	d0a71715 	stw	r2,-25508(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80e268:	00003106 	br	80e330 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  80e26c:	e0bffe17 	ldw	r2,-8(fp)
  80e270:	10800017 	ldw	r2,0(r2)
  80e274:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80e278:	e0bffe17 	ldw	r2,-8(fp)
  80e27c:	10800403 	ldbu	r2,16(r2)
  80e280:	10803fcc 	andi	r2,r2,255
  80e284:	1005003a 	cmpeq	r2,r2,zero
  80e288:	1000051e 	bne	r2,zero,80e2a0 <alt_tick+0x5c>
  80e28c:	d0a71717 	ldw	r2,-25508(gp)
  80e290:	1004c03a 	cmpne	r2,r2,zero
  80e294:	1000021e 	bne	r2,zero,80e2a0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80e298:	e0bffe17 	ldw	r2,-8(fp)
  80e29c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80e2a0:	e0bffe17 	ldw	r2,-8(fp)
  80e2a4:	10c00217 	ldw	r3,8(r2)
  80e2a8:	d0a71717 	ldw	r2,-25508(gp)
  80e2ac:	10c01e36 	bltu	r2,r3,80e328 <alt_tick+0xe4>
  80e2b0:	e0bffe17 	ldw	r2,-8(fp)
  80e2b4:	10800403 	ldbu	r2,16(r2)
  80e2b8:	10803fcc 	andi	r2,r2,255
  80e2bc:	1004c03a 	cmpne	r2,r2,zero
  80e2c0:	1000191e 	bne	r2,zero,80e328 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  80e2c4:	e0bffe17 	ldw	r2,-8(fp)
  80e2c8:	10c00317 	ldw	r3,12(r2)
  80e2cc:	e0bffe17 	ldw	r2,-8(fp)
  80e2d0:	11000517 	ldw	r4,20(r2)
  80e2d4:	183ee83a 	callr	r3
  80e2d8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80e2dc:	e0bffd17 	ldw	r2,-12(fp)
  80e2e0:	1004c03a 	cmpne	r2,r2,zero
  80e2e4:	1000031e 	bne	r2,zero,80e2f4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  80e2e8:	e13ffe17 	ldw	r4,-8(fp)
  80e2ec:	080e1ac0 	call	80e1ac <alt_alarm_stop>
  80e2f0:	00000d06 	br	80e328 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  80e2f4:	e0bffe17 	ldw	r2,-8(fp)
  80e2f8:	10c00217 	ldw	r3,8(r2)
  80e2fc:	e0bffd17 	ldw	r2,-12(fp)
  80e300:	1887883a 	add	r3,r3,r2
  80e304:	e0bffe17 	ldw	r2,-8(fp)
  80e308:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80e30c:	e0bffe17 	ldw	r2,-8(fp)
  80e310:	10c00217 	ldw	r3,8(r2)
  80e314:	d0a71717 	ldw	r2,-25508(gp)
  80e318:	1880032e 	bgeu	r3,r2,80e328 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80e31c:	e0fffe17 	ldw	r3,-8(fp)
  80e320:	00800044 	movi	r2,1
  80e324:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  80e328:	e0bfff17 	ldw	r2,-4(fp)
  80e32c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80e330:	d0e01104 	addi	r3,gp,-32700
  80e334:	e0bffe17 	ldw	r2,-8(fp)
  80e338:	10ffcc1e 	bne	r2,r3,80e26c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  80e33c:	e037883a 	mov	sp,fp
  80e340:	dfc00117 	ldw	ra,4(sp)
  80e344:	df000017 	ldw	fp,0(sp)
  80e348:	dec00204 	addi	sp,sp,8
  80e34c:	f800283a 	ret

0080e350 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80e350:	defffd04 	addi	sp,sp,-12
  80e354:	dfc00215 	stw	ra,8(sp)
  80e358:	df000115 	stw	fp,4(sp)
  80e35c:	df000104 	addi	fp,sp,4
  80e360:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80e364:	e13fff17 	ldw	r4,-4(fp)
  80e368:	0816a340 	call	816a34 <alt_busy_sleep>
}
  80e36c:	e037883a 	mov	sp,fp
  80e370:	dfc00117 	ldw	ra,4(sp)
  80e374:	df000017 	ldw	fp,0(sp)
  80e378:	dec00204 	addi	sp,sp,8
  80e37c:	f800283a 	ret

0080e380 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80e380:	defff704 	addi	sp,sp,-36
  80e384:	dfc00815 	stw	ra,32(sp)
  80e388:	df000715 	stw	fp,28(sp)
  80e38c:	df000704 	addi	fp,sp,28
  80e390:	e13ffb15 	stw	r4,-20(fp)
  80e394:	e17ffc15 	stw	r5,-16(fp)
  80e398:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e39c:	e0bffb17 	ldw	r2,-20(fp)
  80e3a0:	1004803a 	cmplt	r2,r2,zero
  80e3a4:	1000081e 	bne	r2,zero,80e3c8 <write+0x48>
  80e3a8:	e0bffb17 	ldw	r2,-20(fp)
  80e3ac:	10800324 	muli	r2,r2,12
  80e3b0:	1007883a 	mov	r3,r2
  80e3b4:	008020b4 	movhi	r2,130
  80e3b8:	10a34704 	addi	r2,r2,-29412
  80e3bc:	1887883a 	add	r3,r3,r2
  80e3c0:	e0ffff15 	stw	r3,-4(fp)
  80e3c4:	00000106 	br	80e3cc <write+0x4c>
  80e3c8:	e03fff15 	stw	zero,-4(fp)
  80e3cc:	e0bfff17 	ldw	r2,-4(fp)
  80e3d0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80e3d4:	e0bffa17 	ldw	r2,-24(fp)
  80e3d8:	1005003a 	cmpeq	r2,r2,zero
  80e3dc:	1000241e 	bne	r2,zero,80e470 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80e3e0:	e0bffa17 	ldw	r2,-24(fp)
  80e3e4:	10800217 	ldw	r2,8(r2)
  80e3e8:	108000cc 	andi	r2,r2,3
  80e3ec:	1005003a 	cmpeq	r2,r2,zero
  80e3f0:	10001a1e 	bne	r2,zero,80e45c <write+0xdc>
  80e3f4:	e0bffa17 	ldw	r2,-24(fp)
  80e3f8:	10800017 	ldw	r2,0(r2)
  80e3fc:	10800617 	ldw	r2,24(r2)
  80e400:	1005003a 	cmpeq	r2,r2,zero
  80e404:	1000151e 	bne	r2,zero,80e45c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80e408:	e0bffa17 	ldw	r2,-24(fp)
  80e40c:	10800017 	ldw	r2,0(r2)
  80e410:	10800617 	ldw	r2,24(r2)
  80e414:	e17ffc17 	ldw	r5,-16(fp)
  80e418:	e1bffd17 	ldw	r6,-12(fp)
  80e41c:	e13ffa17 	ldw	r4,-24(fp)
  80e420:	103ee83a 	callr	r2
  80e424:	e0bff915 	stw	r2,-28(fp)
  80e428:	e0bff917 	ldw	r2,-28(fp)
  80e42c:	1004403a 	cmpge	r2,r2,zero
  80e430:	1000071e 	bne	r2,zero,80e450 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80e434:	080e4a00 	call	80e4a0 <alt_get_errno>
  80e438:	e0fff917 	ldw	r3,-28(fp)
  80e43c:	00c7c83a 	sub	r3,zero,r3
  80e440:	10c00015 	stw	r3,0(r2)
        return -1;
  80e444:	00bfffc4 	movi	r2,-1
  80e448:	e0bffe15 	stw	r2,-8(fp)
  80e44c:	00000e06 	br	80e488 <write+0x108>
      }
      return rval;
  80e450:	e0bff917 	ldw	r2,-28(fp)
  80e454:	e0bffe15 	stw	r2,-8(fp)
  80e458:	00000b06 	br	80e488 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80e45c:	080e4a00 	call	80e4a0 <alt_get_errno>
  80e460:	1007883a 	mov	r3,r2
  80e464:	00800344 	movi	r2,13
  80e468:	18800015 	stw	r2,0(r3)
  80e46c:	00000406 	br	80e480 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80e470:	080e4a00 	call	80e4a0 <alt_get_errno>
  80e474:	1007883a 	mov	r3,r2
  80e478:	00801444 	movi	r2,81
  80e47c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80e480:	00bfffc4 	movi	r2,-1
  80e484:	e0bffe15 	stw	r2,-8(fp)
  80e488:	e0bffe17 	ldw	r2,-8(fp)
}
  80e48c:	e037883a 	mov	sp,fp
  80e490:	dfc00117 	ldw	ra,4(sp)
  80e494:	df000017 	ldw	fp,0(sp)
  80e498:	dec00204 	addi	sp,sp,8
  80e49c:	f800283a 	ret

0080e4a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e4a0:	defffd04 	addi	sp,sp,-12
  80e4a4:	dfc00215 	stw	ra,8(sp)
  80e4a8:	df000115 	stw	fp,4(sp)
  80e4ac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e4b0:	008020b4 	movhi	r2,130
  80e4b4:	10a82204 	addi	r2,r2,-24440
  80e4b8:	10800017 	ldw	r2,0(r2)
  80e4bc:	1005003a 	cmpeq	r2,r2,zero
  80e4c0:	1000061e 	bne	r2,zero,80e4dc <alt_get_errno+0x3c>
  80e4c4:	008020b4 	movhi	r2,130
  80e4c8:	10a82204 	addi	r2,r2,-24440
  80e4cc:	10800017 	ldw	r2,0(r2)
  80e4d0:	103ee83a 	callr	r2
  80e4d4:	e0bfff15 	stw	r2,-4(fp)
  80e4d8:	00000306 	br	80e4e8 <alt_get_errno+0x48>
  80e4dc:	008020b4 	movhi	r2,130
  80e4e0:	10af2204 	addi	r2,r2,-17272
  80e4e4:	e0bfff15 	stw	r2,-4(fp)
  80e4e8:	e0bfff17 	ldw	r2,-4(fp)
}
  80e4ec:	e037883a 	mov	sp,fp
  80e4f0:	dfc00117 	ldw	ra,4(sp)
  80e4f4:	df000017 	ldw	fp,0(sp)
  80e4f8:	dec00204 	addi	sp,sp,8
  80e4fc:	f800283a 	ret

0080e500 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80e500:	defffd04 	addi	sp,sp,-12
  80e504:	dfc00215 	stw	ra,8(sp)
  80e508:	df000115 	stw	fp,4(sp)
  80e50c:	df000104 	addi	fp,sp,4
  80e510:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  80e514:	08172640 	call	817264 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80e518:	00800044 	movi	r2,1
  80e51c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80e520:	e037883a 	mov	sp,fp
  80e524:	dfc00117 	ldw	ra,4(sp)
  80e528:	df000017 	ldw	fp,0(sp)
  80e52c:	dec00204 	addi	sp,sp,8
  80e530:	f800283a 	ret

0080e534 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80e534:	defffd04 	addi	sp,sp,-12
  80e538:	dfc00215 	stw	ra,8(sp)
  80e53c:	df000115 	stw	fp,4(sp)
  80e540:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( HAL_SYSTEM_TIMER, HAL_system_timer);
  80e544:	01004034 	movhi	r4,256
  80e548:	21040004 	addi	r4,r4,4096
  80e54c:	000b883a 	mov	r5,zero
  80e550:	000d883a 	mov	r6,zero
  80e554:	01c0fa04 	movi	r7,1000
  80e558:	080f3fc0 	call	80f3fc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( HARDWARE_TIMER, hardware_timer);
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
  80e55c:	00c020b4 	movhi	r3,130
  80e560:	18ef2c04 	addi	r3,r3,-17232
  80e564:	00804034 	movhi	r2,256
  80e568:	10840804 	addi	r2,r2,4128
  80e56c:	18800015 	stw	r2,0(r3)
  80e570:	00c020b4 	movhi	r3,130
  80e574:	18ef2d04 	addi	r3,r3,-17228
  80e578:	0080bef4 	movhi	r2,763
  80e57c:	10bc2004 	addi	r2,r2,-3968
  80e580:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80e584:	010020b4 	movhi	r4,130
  80e588:	2123b104 	addi	r4,r4,-28988
  80e58c:	000b883a 	mov	r5,zero
  80e590:	01800144 	movi	r6,5
  80e594:	080ea280 	call	80ea28 <altera_avalon_jtag_uart_init>
  80e598:	010020b4 	movhi	r4,130
  80e59c:	2123a704 	addi	r4,r4,-29028
  80e5a0:	080e8a80 	call	80e8a8 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
  80e5a4:	010020b4 	movhi	r4,130
  80e5a8:	2127bf04 	addi	r4,r4,-24836
  80e5ac:	080e8a80 	call	80e8a8 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
  80e5b0:	010020b4 	movhi	r4,130
  80e5b4:	2127cb04 	addi	r4,r4,-24788
  80e5b8:	080e8a80 	call	80e8a8 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  80e5bc:	010020b4 	movhi	r4,130
  80e5c0:	2127d704 	addi	r4,r4,-24740
  80e5c4:	08106300 	call	810630 <alt_up_character_lcd_init>
  80e5c8:	010020b4 	movhi	r4,130
  80e5cc:	2127d704 	addi	r4,r4,-24740
  80e5d0:	080e8a80 	call	80e8a8 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_DRAWER, char_drawer);
  80e5d4:	008020b4 	movhi	r2,130
  80e5d8:	10a7e204 	addi	r2,r2,-24696
  80e5dc:	10800a17 	ldw	r2,40(r2)
  80e5e0:	10800104 	addi	r2,r2,4
  80e5e4:	10800017 	ldw	r2,0(r2)
  80e5e8:	10ffffcc 	andi	r3,r2,65535
  80e5ec:	008020b4 	movhi	r2,130
  80e5f0:	10a7e204 	addi	r2,r2,-24696
  80e5f4:	10c00c15 	stw	r3,48(r2)
  80e5f8:	008020b4 	movhi	r2,130
  80e5fc:	10a7e204 	addi	r2,r2,-24696
  80e600:	10800a17 	ldw	r2,40(r2)
  80e604:	10800104 	addi	r2,r2,4
  80e608:	10800017 	ldw	r2,0(r2)
  80e60c:	1005d43a 	srai	r2,r2,16
  80e610:	10ffffcc 	andi	r3,r2,65535
  80e614:	008020b4 	movhi	r2,130
  80e618:	10a7e204 	addi	r2,r2,-24696
  80e61c:	10c00d15 	stw	r3,52(r2)
  80e620:	008020b4 	movhi	r2,130
  80e624:	10a7e204 	addi	r2,r2,-24696
  80e628:	10800c17 	ldw	r2,48(r2)
  80e62c:	10801068 	cmpgeui	r2,r2,65
  80e630:	1000081e 	bne	r2,zero,80e654 <alt_sys_init+0x120>
  80e634:	00c020b4 	movhi	r3,130
  80e638:	18e7e204 	addi	r3,r3,-24696
  80e63c:	00800fc4 	movi	r2,63
  80e640:	18800f15 	stw	r2,60(r3)
  80e644:	00c020b4 	movhi	r3,130
  80e648:	18e7e204 	addi	r3,r3,-24696
  80e64c:	00800184 	movi	r2,6
  80e650:	18801015 	stw	r2,64(r3)
  80e654:	008020b4 	movhi	r2,130
  80e658:	10a7e204 	addi	r2,r2,-24696
  80e65c:	10800d17 	ldw	r2,52(r2)
  80e660:	10800868 	cmpgeui	r2,r2,33
  80e664:	1000041e 	bne	r2,zero,80e678 <alt_sys_init+0x144>
  80e668:	00c020b4 	movhi	r3,130
  80e66c:	18e7e204 	addi	r3,r3,-24696
  80e670:	008007c4 	movi	r2,31
  80e674:	18801115 	stw	r2,68(r3)
  80e678:	010020b4 	movhi	r4,130
  80e67c:	2127e204 	addi	r4,r4,-24696
  80e680:	0810ab00 	call	810ab0 <alt_up_char_buffer_init>
  80e684:	010020b4 	movhi	r4,130
  80e688:	2127e204 	addi	r4,r4,-24696
  80e68c:	080e8a80 	call	80e8a8 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, pixel_buffer_dma);
  80e690:	008020b4 	movhi	r2,130
  80e694:	10a7f404 	addi	r2,r2,-24624
  80e698:	10800a17 	ldw	r2,40(r2)
  80e69c:	10800017 	ldw	r2,0(r2)
  80e6a0:	1007883a 	mov	r3,r2
  80e6a4:	008020b4 	movhi	r2,130
  80e6a8:	10a7f404 	addi	r2,r2,-24624
  80e6ac:	10c00b15 	stw	r3,44(r2)
  80e6b0:	008020b4 	movhi	r2,130
  80e6b4:	10a7f404 	addi	r2,r2,-24624
  80e6b8:	10800a17 	ldw	r2,40(r2)
  80e6bc:	10800104 	addi	r2,r2,4
  80e6c0:	10800017 	ldw	r2,0(r2)
  80e6c4:	1007883a 	mov	r3,r2
  80e6c8:	008020b4 	movhi	r2,130
  80e6cc:	10a7f404 	addi	r2,r2,-24624
  80e6d0:	10c00c15 	stw	r3,48(r2)
  80e6d4:	008020b4 	movhi	r2,130
  80e6d8:	10a7f404 	addi	r2,r2,-24624
  80e6dc:	10800a17 	ldw	r2,40(r2)
  80e6e0:	10800204 	addi	r2,r2,8
  80e6e4:	10800017 	ldw	r2,0(r2)
  80e6e8:	10ffffcc 	andi	r3,r2,65535
  80e6ec:	008020b4 	movhi	r2,130
  80e6f0:	10a7f404 	addi	r2,r2,-24624
  80e6f4:	10c00f15 	stw	r3,60(r2)
  80e6f8:	008020b4 	movhi	r2,130
  80e6fc:	10a7f404 	addi	r2,r2,-24624
  80e700:	10800a17 	ldw	r2,40(r2)
  80e704:	10800204 	addi	r2,r2,8
  80e708:	10800017 	ldw	r2,0(r2)
  80e70c:	1005d43a 	srai	r2,r2,16
  80e710:	10ffffcc 	andi	r3,r2,65535
  80e714:	008020b4 	movhi	r2,130
  80e718:	10a7f404 	addi	r2,r2,-24624
  80e71c:	10c01015 	stw	r3,64(r2)
  80e720:	008020b4 	movhi	r2,130
  80e724:	10a7f404 	addi	r2,r2,-24624
  80e728:	10800a17 	ldw	r2,40(r2)
  80e72c:	10800304 	addi	r2,r2,12
  80e730:	10800017 	ldw	r2,0(r2)
  80e734:	1005d07a 	srai	r2,r2,1
  80e738:	10c0004c 	andi	r3,r2,1
  80e73c:	008020b4 	movhi	r2,130
  80e740:	10a7f404 	addi	r2,r2,-24624
  80e744:	10c00d15 	stw	r3,52(r2)
  80e748:	008020b4 	movhi	r2,130
  80e74c:	10a7f404 	addi	r2,r2,-24624
  80e750:	10800a17 	ldw	r2,40(r2)
  80e754:	10800304 	addi	r2,r2,12
  80e758:	10800017 	ldw	r2,0(r2)
  80e75c:	1005d13a 	srai	r2,r2,4
  80e760:	10c003cc 	andi	r3,r2,15
  80e764:	008020b4 	movhi	r2,130
  80e768:	10a7f404 	addi	r2,r2,-24624
  80e76c:	10c00e15 	stw	r3,56(r2)
  80e770:	008020b4 	movhi	r2,130
  80e774:	10a7f404 	addi	r2,r2,-24624
  80e778:	10800a17 	ldw	r2,40(r2)
  80e77c:	10800304 	addi	r2,r2,12
  80e780:	10800017 	ldw	r2,0(r2)
  80e784:	1005d43a 	srai	r2,r2,16
  80e788:	1007883a 	mov	r3,r2
  80e78c:	00bfffc4 	movi	r2,-1
  80e790:	1884703a 	and	r2,r3,r2
  80e794:	e0bfff45 	stb	r2,-3(fp)
  80e798:	008020b4 	movhi	r2,130
  80e79c:	10a7f404 	addi	r2,r2,-24624
  80e7a0:	10800a17 	ldw	r2,40(r2)
  80e7a4:	10800304 	addi	r2,r2,12
  80e7a8:	10800017 	ldw	r2,0(r2)
  80e7ac:	1005d63a 	srai	r2,r2,24
  80e7b0:	1007883a 	mov	r3,r2
  80e7b4:	00bfffc4 	movi	r2,-1
  80e7b8:	1884703a 	and	r2,r3,r2
  80e7bc:	e0bfff05 	stb	r2,-4(fp)
  80e7c0:	008020b4 	movhi	r2,130
  80e7c4:	10a7f404 	addi	r2,r2,-24624
  80e7c8:	10800e17 	ldw	r2,56(r2)
  80e7cc:	10800058 	cmpnei	r2,r2,1
  80e7d0:	1000041e 	bne	r2,zero,80e7e4 <alt_sys_init+0x2b0>
  80e7d4:	008020b4 	movhi	r2,130
  80e7d8:	10a7f404 	addi	r2,r2,-24624
  80e7dc:	10001115 	stw	zero,68(r2)
  80e7e0:	00000e06 	br	80e81c <alt_sys_init+0x2e8>
  80e7e4:	008020b4 	movhi	r2,130
  80e7e8:	10a7f404 	addi	r2,r2,-24624
  80e7ec:	10800e17 	ldw	r2,56(r2)
  80e7f0:	10800098 	cmpnei	r2,r2,2
  80e7f4:	1000051e 	bne	r2,zero,80e80c <alt_sys_init+0x2d8>
  80e7f8:	00c020b4 	movhi	r3,130
  80e7fc:	18e7f404 	addi	r3,r3,-24624
  80e800:	00800044 	movi	r2,1
  80e804:	18801115 	stw	r2,68(r3)
  80e808:	00000406 	br	80e81c <alt_sys_init+0x2e8>
  80e80c:	00c020b4 	movhi	r3,130
  80e810:	18e7f404 	addi	r3,r3,-24624
  80e814:	00800084 	movi	r2,2
  80e818:	18801115 	stw	r2,68(r3)
  80e81c:	e0ffff43 	ldbu	r3,-3(fp)
  80e820:	00800804 	movi	r2,32
  80e824:	10c7c83a 	sub	r3,r2,r3
  80e828:	00bfffc4 	movi	r2,-1
  80e82c:	10c6d83a 	srl	r3,r2,r3
  80e830:	008020b4 	movhi	r2,130
  80e834:	10a7f404 	addi	r2,r2,-24624
  80e838:	10c01215 	stw	r3,72(r2)
  80e83c:	e0ffff43 	ldbu	r3,-3(fp)
  80e840:	008020b4 	movhi	r2,130
  80e844:	10a7f404 	addi	r2,r2,-24624
  80e848:	10801117 	ldw	r2,68(r2)
  80e84c:	1887883a 	add	r3,r3,r2
  80e850:	008020b4 	movhi	r2,130
  80e854:	10a7f404 	addi	r2,r2,-24624
  80e858:	10c01315 	stw	r3,76(r2)
  80e85c:	e0ffff03 	ldbu	r3,-4(fp)
  80e860:	00800804 	movi	r2,32
  80e864:	10c7c83a 	sub	r3,r2,r3
  80e868:	00bfffc4 	movi	r2,-1
  80e86c:	10c6d83a 	srl	r3,r2,r3
  80e870:	008020b4 	movhi	r2,130
  80e874:	10a7f404 	addi	r2,r2,-24624
  80e878:	10c01415 	stw	r3,80(r2)
  80e87c:	010020b4 	movhi	r4,130
  80e880:	2127f404 	addi	r4,r4,-24624
  80e884:	080e8a80 	call	80e8a8 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
  80e888:	010020b4 	movhi	r4,130
  80e88c:	21280904 	addi	r4,r4,-24540
  80e890:	080e8a80 	call	80e8a8 <alt_dev_reg>
}
  80e894:	e037883a 	mov	sp,fp
  80e898:	dfc00117 	ldw	ra,4(sp)
  80e89c:	df000017 	ldw	fp,0(sp)
  80e8a0:	dec00204 	addi	sp,sp,8
  80e8a4:	f800283a 	ret

0080e8a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80e8a8:	defffd04 	addi	sp,sp,-12
  80e8ac:	dfc00215 	stw	ra,8(sp)
  80e8b0:	df000115 	stw	fp,4(sp)
  80e8b4:	df000104 	addi	fp,sp,4
  80e8b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80e8bc:	e13fff17 	ldw	r4,-4(fp)
  80e8c0:	014020b4 	movhi	r5,130
  80e8c4:	29681f04 	addi	r5,r5,-24452
  80e8c8:	0816bc40 	call	816bc4 <alt_dev_llist_insert>
}
  80e8cc:	e037883a 	mov	sp,fp
  80e8d0:	dfc00117 	ldw	ra,4(sp)
  80e8d4:	df000017 	ldw	fp,0(sp)
  80e8d8:	dec00204 	addi	sp,sp,8
  80e8dc:	f800283a 	ret

0080e8e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80e8e0:	defffa04 	addi	sp,sp,-24
  80e8e4:	dfc00515 	stw	ra,20(sp)
  80e8e8:	df000415 	stw	fp,16(sp)
  80e8ec:	df000404 	addi	fp,sp,16
  80e8f0:	e13ffd15 	stw	r4,-12(fp)
  80e8f4:	e17ffe15 	stw	r5,-8(fp)
  80e8f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80e8fc:	e0bffd17 	ldw	r2,-12(fp)
  80e900:	10800017 	ldw	r2,0(r2)
  80e904:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80e908:	e0bffc17 	ldw	r2,-16(fp)
  80e90c:	11000a04 	addi	r4,r2,40
  80e910:	e0bffd17 	ldw	r2,-12(fp)
  80e914:	11c00217 	ldw	r7,8(r2)
  80e918:	e17ffe17 	ldw	r5,-8(fp)
  80e91c:	e1bfff17 	ldw	r6,-4(fp)
  80e920:	080ef240 	call	80ef24 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80e924:	e037883a 	mov	sp,fp
  80e928:	dfc00117 	ldw	ra,4(sp)
  80e92c:	df000017 	ldw	fp,0(sp)
  80e930:	dec00204 	addi	sp,sp,8
  80e934:	f800283a 	ret

0080e938 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80e938:	defffa04 	addi	sp,sp,-24
  80e93c:	dfc00515 	stw	ra,20(sp)
  80e940:	df000415 	stw	fp,16(sp)
  80e944:	df000404 	addi	fp,sp,16
  80e948:	e13ffd15 	stw	r4,-12(fp)
  80e94c:	e17ffe15 	stw	r5,-8(fp)
  80e950:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80e954:	e0bffd17 	ldw	r2,-12(fp)
  80e958:	10800017 	ldw	r2,0(r2)
  80e95c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80e960:	e0bffc17 	ldw	r2,-16(fp)
  80e964:	11000a04 	addi	r4,r2,40
  80e968:	e0bffd17 	ldw	r2,-12(fp)
  80e96c:	11c00217 	ldw	r7,8(r2)
  80e970:	e17ffe17 	ldw	r5,-8(fp)
  80e974:	e1bfff17 	ldw	r6,-4(fp)
  80e978:	080f1480 	call	80f148 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80e97c:	e037883a 	mov	sp,fp
  80e980:	dfc00117 	ldw	ra,4(sp)
  80e984:	df000017 	ldw	fp,0(sp)
  80e988:	dec00204 	addi	sp,sp,8
  80e98c:	f800283a 	ret

0080e990 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80e990:	defffc04 	addi	sp,sp,-16
  80e994:	dfc00315 	stw	ra,12(sp)
  80e998:	df000215 	stw	fp,8(sp)
  80e99c:	df000204 	addi	fp,sp,8
  80e9a0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80e9a4:	e0bfff17 	ldw	r2,-4(fp)
  80e9a8:	10800017 	ldw	r2,0(r2)
  80e9ac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80e9b0:	e0bffe17 	ldw	r2,-8(fp)
  80e9b4:	11000a04 	addi	r4,r2,40
  80e9b8:	e0bfff17 	ldw	r2,-4(fp)
  80e9bc:	11400217 	ldw	r5,8(r2)
  80e9c0:	080edbc0 	call	80edbc <altera_avalon_jtag_uart_close>
}
  80e9c4:	e037883a 	mov	sp,fp
  80e9c8:	dfc00117 	ldw	ra,4(sp)
  80e9cc:	df000017 	ldw	fp,0(sp)
  80e9d0:	dec00204 	addi	sp,sp,8
  80e9d4:	f800283a 	ret

0080e9d8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80e9d8:	defffa04 	addi	sp,sp,-24
  80e9dc:	dfc00515 	stw	ra,20(sp)
  80e9e0:	df000415 	stw	fp,16(sp)
  80e9e4:	df000404 	addi	fp,sp,16
  80e9e8:	e13ffd15 	stw	r4,-12(fp)
  80e9ec:	e17ffe15 	stw	r5,-8(fp)
  80e9f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80e9f4:	e0bffd17 	ldw	r2,-12(fp)
  80e9f8:	10800017 	ldw	r2,0(r2)
  80e9fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80ea00:	e0bffc17 	ldw	r2,-16(fp)
  80ea04:	11000a04 	addi	r4,r2,40
  80ea08:	e17ffe17 	ldw	r5,-8(fp)
  80ea0c:	e1bfff17 	ldw	r6,-4(fp)
  80ea10:	080ee300 	call	80ee30 <altera_avalon_jtag_uart_ioctl>
}
  80ea14:	e037883a 	mov	sp,fp
  80ea18:	dfc00117 	ldw	ra,4(sp)
  80ea1c:	df000017 	ldw	fp,0(sp)
  80ea20:	dec00204 	addi	sp,sp,8
  80ea24:	f800283a 	ret

0080ea28 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80ea28:	defffb04 	addi	sp,sp,-20
  80ea2c:	dfc00415 	stw	ra,16(sp)
  80ea30:	df000315 	stw	fp,12(sp)
  80ea34:	df000304 	addi	fp,sp,12
  80ea38:	e13ffd15 	stw	r4,-12(fp)
  80ea3c:	e17ffe15 	stw	r5,-8(fp)
  80ea40:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ea44:	e0fffd17 	ldw	r3,-12(fp)
  80ea48:	00800044 	movi	r2,1
  80ea4c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80ea50:	e0bffd17 	ldw	r2,-12(fp)
  80ea54:	10800017 	ldw	r2,0(r2)
  80ea58:	11000104 	addi	r4,r2,4
  80ea5c:	e0bffd17 	ldw	r2,-12(fp)
  80ea60:	10800817 	ldw	r2,32(r2)
  80ea64:	1007883a 	mov	r3,r2
  80ea68:	2005883a 	mov	r2,r4
  80ea6c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  80ea70:	e13fff17 	ldw	r4,-4(fp)
  80ea74:	e17ffd17 	ldw	r5,-12(fp)
  80ea78:	01802074 	movhi	r6,129
  80ea7c:	31bab804 	addi	r6,r6,-5408
  80ea80:	080d9480 	call	80d948 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80ea84:	e0bffd17 	ldw	r2,-12(fp)
  80ea88:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80ea8c:	e0bffd17 	ldw	r2,-12(fp)
  80ea90:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80ea94:	008020b4 	movhi	r2,130
  80ea98:	10af2a04 	addi	r2,r2,-17240
  80ea9c:	10800017 	ldw	r2,0(r2)
  80eaa0:	100b883a 	mov	r5,r2
  80eaa4:	01802074 	movhi	r6,129
  80eaa8:	31bb4304 	addi	r6,r6,-4852
  80eaac:	e1fffd17 	ldw	r7,-12(fp)
  80eab0:	08168e00 	call	8168e0 <alt_alarm_start>
  80eab4:	1004403a 	cmpge	r2,r2,zero
  80eab8:	1000041e 	bne	r2,zero,80eacc <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80eabc:	e0fffd17 	ldw	r3,-12(fp)
  80eac0:	00a00034 	movhi	r2,32768
  80eac4:	10bfffc4 	addi	r2,r2,-1
  80eac8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80eacc:	e037883a 	mov	sp,fp
  80ead0:	dfc00117 	ldw	ra,4(sp)
  80ead4:	df000017 	ldw	fp,0(sp)
  80ead8:	dec00204 	addi	sp,sp,8
  80eadc:	f800283a 	ret

0080eae0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80eae0:	defff704 	addi	sp,sp,-36
  80eae4:	df000815 	stw	fp,32(sp)
  80eae8:	df000804 	addi	fp,sp,32
  80eaec:	e13ffe15 	stw	r4,-8(fp)
  80eaf0:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80eaf4:	e0bffe17 	ldw	r2,-8(fp)
  80eaf8:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  80eafc:	e0bffd17 	ldw	r2,-12(fp)
  80eb00:	10800017 	ldw	r2,0(r2)
  80eb04:	e0bffc15 	stw	r2,-16(fp)
  80eb08:	00000006 	br	80eb0c <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80eb0c:	e0bffc17 	ldw	r2,-16(fp)
  80eb10:	10800104 	addi	r2,r2,4
  80eb14:	10800037 	ldwio	r2,0(r2)
  80eb18:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80eb1c:	e0bffb17 	ldw	r2,-20(fp)
  80eb20:	1080c00c 	andi	r2,r2,768
  80eb24:	1005003a 	cmpeq	r2,r2,zero
  80eb28:	1000741e 	bne	r2,zero,80ecfc <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80eb2c:	e0bffb17 	ldw	r2,-20(fp)
  80eb30:	1080400c 	andi	r2,r2,256
  80eb34:	1005003a 	cmpeq	r2,r2,zero
  80eb38:	1000351e 	bne	r2,zero,80ec10 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80eb3c:	00800074 	movhi	r2,1
  80eb40:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80eb44:	e0bffd17 	ldw	r2,-12(fp)
  80eb48:	10800a17 	ldw	r2,40(r2)
  80eb4c:	10800044 	addi	r2,r2,1
  80eb50:	1081ffcc 	andi	r2,r2,2047
  80eb54:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  80eb58:	e0bffd17 	ldw	r2,-12(fp)
  80eb5c:	10c00b17 	ldw	r3,44(r2)
  80eb60:	e0bff917 	ldw	r2,-28(fp)
  80eb64:	18801626 	beq	r3,r2,80ebc0 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80eb68:	e0bffc17 	ldw	r2,-16(fp)
  80eb6c:	10800037 	ldwio	r2,0(r2)
  80eb70:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80eb74:	e0bffa17 	ldw	r2,-24(fp)
  80eb78:	10a0000c 	andi	r2,r2,32768
  80eb7c:	1005003a 	cmpeq	r2,r2,zero
  80eb80:	10000f1e 	bne	r2,zero,80ebc0 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80eb84:	e0bffd17 	ldw	r2,-12(fp)
  80eb88:	10c00a17 	ldw	r3,40(r2)
  80eb8c:	e0bffa17 	ldw	r2,-24(fp)
  80eb90:	1009883a 	mov	r4,r2
  80eb94:	e0bffd17 	ldw	r2,-12(fp)
  80eb98:	1885883a 	add	r2,r3,r2
  80eb9c:	10800e04 	addi	r2,r2,56
  80eba0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80eba4:	e0bffd17 	ldw	r2,-12(fp)
  80eba8:	10800a17 	ldw	r2,40(r2)
  80ebac:	10800044 	addi	r2,r2,1
  80ebb0:	10c1ffcc 	andi	r3,r2,2047
  80ebb4:	e0bffd17 	ldw	r2,-12(fp)
  80ebb8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80ebbc:	003fe106 	br	80eb44 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80ebc0:	e0bffa17 	ldw	r2,-24(fp)
  80ebc4:	10bfffec 	andhi	r2,r2,65535
  80ebc8:	1005003a 	cmpeq	r2,r2,zero
  80ebcc:	1000101e 	bne	r2,zero,80ec10 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ebd0:	e0bffd17 	ldw	r2,-12(fp)
  80ebd4:	10c00817 	ldw	r3,32(r2)
  80ebd8:	00bfff84 	movi	r2,-2
  80ebdc:	1886703a 	and	r3,r3,r2
  80ebe0:	e0bffd17 	ldw	r2,-12(fp)
  80ebe4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80ebe8:	e0bffc17 	ldw	r2,-16(fp)
  80ebec:	11000104 	addi	r4,r2,4
  80ebf0:	e0bffd17 	ldw	r2,-12(fp)
  80ebf4:	10800817 	ldw	r2,32(r2)
  80ebf8:	1007883a 	mov	r3,r2
  80ebfc:	2005883a 	mov	r2,r4
  80ec00:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ec04:	e0bffc17 	ldw	r2,-16(fp)
  80ec08:	10800104 	addi	r2,r2,4
  80ec0c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80ec10:	e0bffb17 	ldw	r2,-20(fp)
  80ec14:	1080800c 	andi	r2,r2,512
  80ec18:	1005003a 	cmpeq	r2,r2,zero
  80ec1c:	103fbb1e 	bne	r2,zero,80eb0c <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80ec20:	e0bffb17 	ldw	r2,-20(fp)
  80ec24:	10bfffec 	andhi	r2,r2,65535
  80ec28:	1004d43a 	srli	r2,r2,16
  80ec2c:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80ec30:	00001506 	br	80ec88 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80ec34:	e13ffc17 	ldw	r4,-16(fp)
  80ec38:	e0bffd17 	ldw	r2,-12(fp)
  80ec3c:	10c00d17 	ldw	r3,52(r2)
  80ec40:	e0bffd17 	ldw	r2,-12(fp)
  80ec44:	1885883a 	add	r2,r3,r2
  80ec48:	10820e04 	addi	r2,r2,2104
  80ec4c:	10800003 	ldbu	r2,0(r2)
  80ec50:	10c03fcc 	andi	r3,r2,255
  80ec54:	18c0201c 	xori	r3,r3,128
  80ec58:	18ffe004 	addi	r3,r3,-128
  80ec5c:	2005883a 	mov	r2,r4
  80ec60:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ec64:	e0bffd17 	ldw	r2,-12(fp)
  80ec68:	10800d17 	ldw	r2,52(r2)
  80ec6c:	10800044 	addi	r2,r2,1
  80ec70:	10c1ffcc 	andi	r3,r2,2047
  80ec74:	e0bffd17 	ldw	r2,-12(fp)
  80ec78:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80ec7c:	e0bff817 	ldw	r2,-32(fp)
  80ec80:	10bfffc4 	addi	r2,r2,-1
  80ec84:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80ec88:	e0bff817 	ldw	r2,-32(fp)
  80ec8c:	1005003a 	cmpeq	r2,r2,zero
  80ec90:	1000051e 	bne	r2,zero,80eca8 <altera_avalon_jtag_uart_irq+0x1c8>
  80ec94:	e0bffd17 	ldw	r2,-12(fp)
  80ec98:	10c00d17 	ldw	r3,52(r2)
  80ec9c:	e0bffd17 	ldw	r2,-12(fp)
  80eca0:	10800c17 	ldw	r2,48(r2)
  80eca4:	18bfe31e 	bne	r3,r2,80ec34 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80eca8:	e0bff817 	ldw	r2,-32(fp)
  80ecac:	1005003a 	cmpeq	r2,r2,zero
  80ecb0:	103f961e 	bne	r2,zero,80eb0c <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80ecb4:	e0bffd17 	ldw	r2,-12(fp)
  80ecb8:	10c00817 	ldw	r3,32(r2)
  80ecbc:	00bfff44 	movi	r2,-3
  80ecc0:	1886703a 	and	r3,r3,r2
  80ecc4:	e0bffd17 	ldw	r2,-12(fp)
  80ecc8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80eccc:	e0bffd17 	ldw	r2,-12(fp)
  80ecd0:	10800017 	ldw	r2,0(r2)
  80ecd4:	11000104 	addi	r4,r2,4
  80ecd8:	e0bffd17 	ldw	r2,-12(fp)
  80ecdc:	10800817 	ldw	r2,32(r2)
  80ece0:	1007883a 	mov	r3,r2
  80ece4:	2005883a 	mov	r2,r4
  80ece8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ecec:	e0bffc17 	ldw	r2,-16(fp)
  80ecf0:	10800104 	addi	r2,r2,4
  80ecf4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80ecf8:	003f8406 	br	80eb0c <altera_avalon_jtag_uart_irq+0x2c>
}
  80ecfc:	e037883a 	mov	sp,fp
  80ed00:	df000017 	ldw	fp,0(sp)
  80ed04:	dec00104 	addi	sp,sp,4
  80ed08:	f800283a 	ret

0080ed0c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80ed0c:	defffc04 	addi	sp,sp,-16
  80ed10:	df000315 	stw	fp,12(sp)
  80ed14:	df000304 	addi	fp,sp,12
  80ed18:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80ed1c:	e0bfff17 	ldw	r2,-4(fp)
  80ed20:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80ed24:	e0bffe17 	ldw	r2,-8(fp)
  80ed28:	10800017 	ldw	r2,0(r2)
  80ed2c:	10800104 	addi	r2,r2,4
  80ed30:	10800037 	ldwio	r2,0(r2)
  80ed34:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80ed38:	e0bffd17 	ldw	r2,-12(fp)
  80ed3c:	1081000c 	andi	r2,r2,1024
  80ed40:	1005003a 	cmpeq	r2,r2,zero
  80ed44:	10000c1e 	bne	r2,zero,80ed78 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80ed48:	e0bffe17 	ldw	r2,-8(fp)
  80ed4c:	10800017 	ldw	r2,0(r2)
  80ed50:	11000104 	addi	r4,r2,4
  80ed54:	e0bffe17 	ldw	r2,-8(fp)
  80ed58:	10800817 	ldw	r2,32(r2)
  80ed5c:	10810014 	ori	r2,r2,1024
  80ed60:	1007883a 	mov	r3,r2
  80ed64:	2005883a 	mov	r2,r4
  80ed68:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80ed6c:	e0bffe17 	ldw	r2,-8(fp)
  80ed70:	10000915 	stw	zero,36(r2)
  80ed74:	00000a06 	br	80eda0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80ed78:	e0bffe17 	ldw	r2,-8(fp)
  80ed7c:	10c00917 	ldw	r3,36(r2)
  80ed80:	00a00034 	movhi	r2,32768
  80ed84:	10bfff04 	addi	r2,r2,-4
  80ed88:	10c00536 	bltu	r2,r3,80eda0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80ed8c:	e0bffe17 	ldw	r2,-8(fp)
  80ed90:	10800917 	ldw	r2,36(r2)
  80ed94:	10c00044 	addi	r3,r2,1
  80ed98:	e0bffe17 	ldw	r2,-8(fp)
  80ed9c:	10c00915 	stw	r3,36(r2)
  80eda0:	008020b4 	movhi	r2,130
  80eda4:	10af2a04 	addi	r2,r2,-17240
  80eda8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80edac:	e037883a 	mov	sp,fp
  80edb0:	df000017 	ldw	fp,0(sp)
  80edb4:	dec00104 	addi	sp,sp,4
  80edb8:	f800283a 	ret

0080edbc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80edbc:	defffc04 	addi	sp,sp,-16
  80edc0:	df000315 	stw	fp,12(sp)
  80edc4:	df000304 	addi	fp,sp,12
  80edc8:	e13ffd15 	stw	r4,-12(fp)
  80edcc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80edd0:	00000706 	br	80edf0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80edd4:	e0bffe17 	ldw	r2,-8(fp)
  80edd8:	1090000c 	andi	r2,r2,16384
  80eddc:	1005003a 	cmpeq	r2,r2,zero
  80ede0:	1000031e 	bne	r2,zero,80edf0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80ede4:	00bffd44 	movi	r2,-11
  80ede8:	e0bfff15 	stw	r2,-4(fp)
  80edec:	00000b06 	br	80ee1c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80edf0:	e0bffd17 	ldw	r2,-12(fp)
  80edf4:	10c00d17 	ldw	r3,52(r2)
  80edf8:	e0bffd17 	ldw	r2,-12(fp)
  80edfc:	10800c17 	ldw	r2,48(r2)
  80ee00:	18800526 	beq	r3,r2,80ee18 <altera_avalon_jtag_uart_close+0x5c>
  80ee04:	e0bffd17 	ldw	r2,-12(fp)
  80ee08:	10c00917 	ldw	r3,36(r2)
  80ee0c:	e0bffd17 	ldw	r2,-12(fp)
  80ee10:	10800117 	ldw	r2,4(r2)
  80ee14:	18bfef36 	bltu	r3,r2,80edd4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80ee18:	e03fff15 	stw	zero,-4(fp)
  80ee1c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ee20:	e037883a 	mov	sp,fp
  80ee24:	df000017 	ldw	fp,0(sp)
  80ee28:	dec00104 	addi	sp,sp,4
  80ee2c:	f800283a 	ret

0080ee30 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80ee30:	defff804 	addi	sp,sp,-32
  80ee34:	df000715 	stw	fp,28(sp)
  80ee38:	df000704 	addi	fp,sp,28
  80ee3c:	e13ffb15 	stw	r4,-20(fp)
  80ee40:	e17ffc15 	stw	r5,-16(fp)
  80ee44:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80ee48:	00bff9c4 	movi	r2,-25
  80ee4c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80ee50:	e0bffc17 	ldw	r2,-16(fp)
  80ee54:	e0bfff15 	stw	r2,-4(fp)
  80ee58:	e0ffff17 	ldw	r3,-4(fp)
  80ee5c:	189a8060 	cmpeqi	r2,r3,27137
  80ee60:	1000041e 	bne	r2,zero,80ee74 <altera_avalon_jtag_uart_ioctl+0x44>
  80ee64:	e0ffff17 	ldw	r3,-4(fp)
  80ee68:	189a80a0 	cmpeqi	r2,r3,27138
  80ee6c:	10001b1e 	bne	r2,zero,80eedc <altera_avalon_jtag_uart_ioctl+0xac>
  80ee70:	00002706 	br	80ef10 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80ee74:	e0bffb17 	ldw	r2,-20(fp)
  80ee78:	10c00117 	ldw	r3,4(r2)
  80ee7c:	00a00034 	movhi	r2,32768
  80ee80:	10bfffc4 	addi	r2,r2,-1
  80ee84:	18802226 	beq	r3,r2,80ef10 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80ee88:	e0bffd17 	ldw	r2,-12(fp)
  80ee8c:	10800017 	ldw	r2,0(r2)
  80ee90:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80ee94:	e0bff917 	ldw	r2,-28(fp)
  80ee98:	10800090 	cmplti	r2,r2,2
  80ee9c:	1000071e 	bne	r2,zero,80eebc <altera_avalon_jtag_uart_ioctl+0x8c>
  80eea0:	e0fff917 	ldw	r3,-28(fp)
  80eea4:	00a00034 	movhi	r2,32768
  80eea8:	10bfffc4 	addi	r2,r2,-1
  80eeac:	18800326 	beq	r3,r2,80eebc <altera_avalon_jtag_uart_ioctl+0x8c>
  80eeb0:	e0bff917 	ldw	r2,-28(fp)
  80eeb4:	e0bffe15 	stw	r2,-8(fp)
  80eeb8:	00000306 	br	80eec8 <altera_avalon_jtag_uart_ioctl+0x98>
  80eebc:	00e00034 	movhi	r3,32768
  80eec0:	18ffff84 	addi	r3,r3,-2
  80eec4:	e0fffe15 	stw	r3,-8(fp)
  80eec8:	e0bffb17 	ldw	r2,-20(fp)
  80eecc:	e0fffe17 	ldw	r3,-8(fp)
  80eed0:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80eed4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80eed8:	00000d06 	br	80ef10 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80eedc:	e0bffb17 	ldw	r2,-20(fp)
  80eee0:	10c00117 	ldw	r3,4(r2)
  80eee4:	00a00034 	movhi	r2,32768
  80eee8:	10bfffc4 	addi	r2,r2,-1
  80eeec:	18800826 	beq	r3,r2,80ef10 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80eef0:	e13ffd17 	ldw	r4,-12(fp)
  80eef4:	e0bffb17 	ldw	r2,-20(fp)
  80eef8:	10c00917 	ldw	r3,36(r2)
  80eefc:	e0bffb17 	ldw	r2,-20(fp)
  80ef00:	10800117 	ldw	r2,4(r2)
  80ef04:	1885803a 	cmpltu	r2,r3,r2
  80ef08:	20800015 	stw	r2,0(r4)
      rc = 0;
  80ef0c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80ef10:	e0bffa17 	ldw	r2,-24(fp)
}
  80ef14:	e037883a 	mov	sp,fp
  80ef18:	df000017 	ldw	fp,0(sp)
  80ef1c:	dec00104 	addi	sp,sp,4
  80ef20:	f800283a 	ret

0080ef24 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80ef24:	defff204 	addi	sp,sp,-56
  80ef28:	dfc00d15 	stw	ra,52(sp)
  80ef2c:	df000c15 	stw	fp,48(sp)
  80ef30:	df000c04 	addi	fp,sp,48
  80ef34:	e13ffb15 	stw	r4,-20(fp)
  80ef38:	e17ffc15 	stw	r5,-16(fp)
  80ef3c:	e1bffd15 	stw	r6,-12(fp)
  80ef40:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80ef44:	e0bffc17 	ldw	r2,-16(fp)
  80ef48:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80ef4c:	00004806 	br	80f070 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80ef50:	e0bffb17 	ldw	r2,-20(fp)
  80ef54:	10800a17 	ldw	r2,40(r2)
  80ef58:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80ef5c:	e0bffb17 	ldw	r2,-20(fp)
  80ef60:	10800b17 	ldw	r2,44(r2)
  80ef64:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80ef68:	e0fff717 	ldw	r3,-36(fp)
  80ef6c:	e0bff617 	ldw	r2,-40(fp)
  80ef70:	18800536 	bltu	r3,r2,80ef88 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80ef74:	e0bff717 	ldw	r2,-36(fp)
  80ef78:	e0fff617 	ldw	r3,-40(fp)
  80ef7c:	10c5c83a 	sub	r2,r2,r3
  80ef80:	e0bff815 	stw	r2,-32(fp)
  80ef84:	00000406 	br	80ef98 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80ef88:	00820004 	movi	r2,2048
  80ef8c:	e0fff617 	ldw	r3,-40(fp)
  80ef90:	10c5c83a 	sub	r2,r2,r3
  80ef94:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80ef98:	e0bff817 	ldw	r2,-32(fp)
  80ef9c:	1005003a 	cmpeq	r2,r2,zero
  80efa0:	10001f1e 	bne	r2,zero,80f020 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80efa4:	e0fffd17 	ldw	r3,-12(fp)
  80efa8:	e0bff817 	ldw	r2,-32(fp)
  80efac:	1880022e 	bgeu	r3,r2,80efb8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80efb0:	e0bffd17 	ldw	r2,-12(fp)
  80efb4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80efb8:	e0bffb17 	ldw	r2,-20(fp)
  80efbc:	10c00e04 	addi	r3,r2,56
  80efc0:	e0bff617 	ldw	r2,-40(fp)
  80efc4:	1887883a 	add	r3,r3,r2
  80efc8:	e0bffa17 	ldw	r2,-24(fp)
  80efcc:	1009883a 	mov	r4,r2
  80efd0:	180b883a 	mov	r5,r3
  80efd4:	e1bff817 	ldw	r6,-32(fp)
  80efd8:	080a9500 	call	80a950 <memcpy>
      ptr   += n;
  80efdc:	e0fff817 	ldw	r3,-32(fp)
  80efe0:	e0bffa17 	ldw	r2,-24(fp)
  80efe4:	10c5883a 	add	r2,r2,r3
  80efe8:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80efec:	e0fffd17 	ldw	r3,-12(fp)
  80eff0:	e0bff817 	ldw	r2,-32(fp)
  80eff4:	1885c83a 	sub	r2,r3,r2
  80eff8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80effc:	e0fff617 	ldw	r3,-40(fp)
  80f000:	e0bff817 	ldw	r2,-32(fp)
  80f004:	1885883a 	add	r2,r3,r2
  80f008:	10c1ffcc 	andi	r3,r2,2047
  80f00c:	e0bffb17 	ldw	r2,-20(fp)
  80f010:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80f014:	e0bffd17 	ldw	r2,-12(fp)
  80f018:	10800048 	cmpgei	r2,r2,1
  80f01c:	103fcc1e 	bne	r2,zero,80ef50 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80f020:	e0fffa17 	ldw	r3,-24(fp)
  80f024:	e0bffc17 	ldw	r2,-16(fp)
  80f028:	1880141e 	bne	r3,r2,80f07c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80f02c:	e0bffe17 	ldw	r2,-8(fp)
  80f030:	1090000c 	andi	r2,r2,16384
  80f034:	1004c03a 	cmpne	r2,r2,zero
  80f038:	1000101e 	bne	r2,zero,80f07c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80f03c:	e0bffb17 	ldw	r2,-20(fp)
  80f040:	10c00a17 	ldw	r3,40(r2)
  80f044:	e0bff717 	ldw	r2,-36(fp)
  80f048:	1880051e 	bne	r3,r2,80f060 <altera_avalon_jtag_uart_read+0x13c>
  80f04c:	e0bffb17 	ldw	r2,-20(fp)
  80f050:	10c00917 	ldw	r3,36(r2)
  80f054:	e0bffb17 	ldw	r2,-20(fp)
  80f058:	10800117 	ldw	r2,4(r2)
  80f05c:	18bff736 	bltu	r3,r2,80f03c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80f060:	e0bffb17 	ldw	r2,-20(fp)
  80f064:	10c00a17 	ldw	r3,40(r2)
  80f068:	e0bff717 	ldw	r2,-36(fp)
  80f06c:	18800326 	beq	r3,r2,80f07c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80f070:	e0bffd17 	ldw	r2,-12(fp)
  80f074:	10800048 	cmpgei	r2,r2,1
  80f078:	103fb51e 	bne	r2,zero,80ef50 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80f07c:	e0fffa17 	ldw	r3,-24(fp)
  80f080:	e0bffc17 	ldw	r2,-16(fp)
  80f084:	18801926 	beq	r3,r2,80f0ec <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f088:	0005303a 	rdctl	r2,status
  80f08c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f090:	e0fff517 	ldw	r3,-44(fp)
  80f094:	00bfff84 	movi	r2,-2
  80f098:	1884703a 	and	r2,r3,r2
  80f09c:	1001703a 	wrctl	status,r2
  
  return context;
  80f0a0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80f0a4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80f0a8:	e0bffb17 	ldw	r2,-20(fp)
  80f0ac:	10800817 	ldw	r2,32(r2)
  80f0b0:	10c00054 	ori	r3,r2,1
  80f0b4:	e0bffb17 	ldw	r2,-20(fp)
  80f0b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f0bc:	e0bffb17 	ldw	r2,-20(fp)
  80f0c0:	10800017 	ldw	r2,0(r2)
  80f0c4:	11000104 	addi	r4,r2,4
  80f0c8:	e0bffb17 	ldw	r2,-20(fp)
  80f0cc:	10800817 	ldw	r2,32(r2)
  80f0d0:	1007883a 	mov	r3,r2
  80f0d4:	2005883a 	mov	r2,r4
  80f0d8:	10c00035 	stwio	r3,0(r2)
  80f0dc:	e0bff917 	ldw	r2,-28(fp)
  80f0e0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f0e4:	e0bff417 	ldw	r2,-48(fp)
  80f0e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80f0ec:	e0fffa17 	ldw	r3,-24(fp)
  80f0f0:	e0bffc17 	ldw	r2,-16(fp)
  80f0f4:	18800526 	beq	r3,r2,80f10c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80f0f8:	e0fffa17 	ldw	r3,-24(fp)
  80f0fc:	e0bffc17 	ldw	r2,-16(fp)
  80f100:	1887c83a 	sub	r3,r3,r2
  80f104:	e0ffff15 	stw	r3,-4(fp)
  80f108:	00000906 	br	80f130 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80f10c:	e0bffe17 	ldw	r2,-8(fp)
  80f110:	1090000c 	andi	r2,r2,16384
  80f114:	1005003a 	cmpeq	r2,r2,zero
  80f118:	1000031e 	bne	r2,zero,80f128 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80f11c:	00bffd44 	movi	r2,-11
  80f120:	e0bfff15 	stw	r2,-4(fp)
  80f124:	00000206 	br	80f130 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80f128:	00bffec4 	movi	r2,-5
  80f12c:	e0bfff15 	stw	r2,-4(fp)
  80f130:	e0bfff17 	ldw	r2,-4(fp)
}
  80f134:	e037883a 	mov	sp,fp
  80f138:	dfc00117 	ldw	ra,4(sp)
  80f13c:	df000017 	ldw	fp,0(sp)
  80f140:	dec00204 	addi	sp,sp,8
  80f144:	f800283a 	ret

0080f148 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80f148:	defff204 	addi	sp,sp,-56
  80f14c:	dfc00d15 	stw	ra,52(sp)
  80f150:	df000c15 	stw	fp,48(sp)
  80f154:	df000c04 	addi	fp,sp,48
  80f158:	e13ffb15 	stw	r4,-20(fp)
  80f15c:	e17ffc15 	stw	r5,-16(fp)
  80f160:	e1bffd15 	stw	r6,-12(fp)
  80f164:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80f168:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80f16c:	e0bffc17 	ldw	r2,-16(fp)
  80f170:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80f174:	00003a06 	br	80f260 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80f178:	e0bffb17 	ldw	r2,-20(fp)
  80f17c:	10800c17 	ldw	r2,48(r2)
  80f180:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80f184:	e0bffb17 	ldw	r2,-20(fp)
  80f188:	10800d17 	ldw	r2,52(r2)
  80f18c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80f190:	e0fffa17 	ldw	r3,-24(fp)
  80f194:	e0bff917 	ldw	r2,-28(fp)
  80f198:	1880062e 	bgeu	r3,r2,80f1b4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80f19c:	e0fff917 	ldw	r3,-28(fp)
  80f1a0:	e0bffa17 	ldw	r2,-24(fp)
  80f1a4:	1885c83a 	sub	r2,r3,r2
  80f1a8:	10bfffc4 	addi	r2,r2,-1
  80f1ac:	e0bff815 	stw	r2,-32(fp)
  80f1b0:	00000c06 	br	80f1e4 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80f1b4:	e0bff917 	ldw	r2,-28(fp)
  80f1b8:	1005003a 	cmpeq	r2,r2,zero
  80f1bc:	1000051e 	bne	r2,zero,80f1d4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80f1c0:	00820004 	movi	r2,2048
  80f1c4:	e0fffa17 	ldw	r3,-24(fp)
  80f1c8:	10c5c83a 	sub	r2,r2,r3
  80f1cc:	e0bff815 	stw	r2,-32(fp)
  80f1d0:	00000406 	br	80f1e4 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80f1d4:	0081ffc4 	movi	r2,2047
  80f1d8:	e0fffa17 	ldw	r3,-24(fp)
  80f1dc:	10c5c83a 	sub	r2,r2,r3
  80f1e0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80f1e4:	e0bff817 	ldw	r2,-32(fp)
  80f1e8:	1005003a 	cmpeq	r2,r2,zero
  80f1ec:	10001f1e 	bne	r2,zero,80f26c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80f1f0:	e0fffd17 	ldw	r3,-12(fp)
  80f1f4:	e0bff817 	ldw	r2,-32(fp)
  80f1f8:	1880022e 	bgeu	r3,r2,80f204 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80f1fc:	e0bffd17 	ldw	r2,-12(fp)
  80f200:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80f204:	e0bffb17 	ldw	r2,-20(fp)
  80f208:	10c20e04 	addi	r3,r2,2104
  80f20c:	e0bffa17 	ldw	r2,-24(fp)
  80f210:	1885883a 	add	r2,r3,r2
  80f214:	e0fffc17 	ldw	r3,-16(fp)
  80f218:	1009883a 	mov	r4,r2
  80f21c:	180b883a 	mov	r5,r3
  80f220:	e1bff817 	ldw	r6,-32(fp)
  80f224:	080a9500 	call	80a950 <memcpy>
      ptr   += n;
  80f228:	e0fff817 	ldw	r3,-32(fp)
  80f22c:	e0bffc17 	ldw	r2,-16(fp)
  80f230:	10c5883a 	add	r2,r2,r3
  80f234:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80f238:	e0fffd17 	ldw	r3,-12(fp)
  80f23c:	e0bff817 	ldw	r2,-32(fp)
  80f240:	1885c83a 	sub	r2,r3,r2
  80f244:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f248:	e0fffa17 	ldw	r3,-24(fp)
  80f24c:	e0bff817 	ldw	r2,-32(fp)
  80f250:	1885883a 	add	r2,r3,r2
  80f254:	10c1ffcc 	andi	r3,r2,2047
  80f258:	e0bffb17 	ldw	r2,-20(fp)
  80f25c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80f260:	e0bffd17 	ldw	r2,-12(fp)
  80f264:	10800048 	cmpgei	r2,r2,1
  80f268:	103fc31e 	bne	r2,zero,80f178 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f26c:	0005303a 	rdctl	r2,status
  80f270:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f274:	e0fff517 	ldw	r3,-44(fp)
  80f278:	00bfff84 	movi	r2,-2
  80f27c:	1884703a 	and	r2,r3,r2
  80f280:	1001703a 	wrctl	status,r2
  
  return context;
  80f284:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80f288:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80f28c:	e0bffb17 	ldw	r2,-20(fp)
  80f290:	10800817 	ldw	r2,32(r2)
  80f294:	10c00094 	ori	r3,r2,2
  80f298:	e0bffb17 	ldw	r2,-20(fp)
  80f29c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f2a0:	e0bffb17 	ldw	r2,-20(fp)
  80f2a4:	10800017 	ldw	r2,0(r2)
  80f2a8:	11000104 	addi	r4,r2,4
  80f2ac:	e0bffb17 	ldw	r2,-20(fp)
  80f2b0:	10800817 	ldw	r2,32(r2)
  80f2b4:	1007883a 	mov	r3,r2
  80f2b8:	2005883a 	mov	r2,r4
  80f2bc:	10c00035 	stwio	r3,0(r2)
  80f2c0:	e0bff717 	ldw	r2,-36(fp)
  80f2c4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f2c8:	e0bff417 	ldw	r2,-48(fp)
  80f2cc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80f2d0:	e0bffd17 	ldw	r2,-12(fp)
  80f2d4:	10800050 	cmplti	r2,r2,1
  80f2d8:	1000111e 	bne	r2,zero,80f320 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80f2dc:	e0bffe17 	ldw	r2,-8(fp)
  80f2e0:	1090000c 	andi	r2,r2,16384
  80f2e4:	1004c03a 	cmpne	r2,r2,zero
  80f2e8:	1000101e 	bne	r2,zero,80f32c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80f2ec:	e0bffb17 	ldw	r2,-20(fp)
  80f2f0:	10c00d17 	ldw	r3,52(r2)
  80f2f4:	e0bff917 	ldw	r2,-28(fp)
  80f2f8:	1880051e 	bne	r3,r2,80f310 <altera_avalon_jtag_uart_write+0x1c8>
  80f2fc:	e0bffb17 	ldw	r2,-20(fp)
  80f300:	10c00917 	ldw	r3,36(r2)
  80f304:	e0bffb17 	ldw	r2,-20(fp)
  80f308:	10800117 	ldw	r2,4(r2)
  80f30c:	18bff736 	bltu	r3,r2,80f2ec <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80f310:	e0bffb17 	ldw	r2,-20(fp)
  80f314:	10c00d17 	ldw	r3,52(r2)
  80f318:	e0bff917 	ldw	r2,-28(fp)
  80f31c:	18800326 	beq	r3,r2,80f32c <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  80f320:	e0bffd17 	ldw	r2,-12(fp)
  80f324:	10800048 	cmpgei	r2,r2,1
  80f328:	103fcd1e 	bne	r2,zero,80f260 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80f32c:	e0fffc17 	ldw	r3,-16(fp)
  80f330:	e0bff617 	ldw	r2,-40(fp)
  80f334:	18800526 	beq	r3,r2,80f34c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80f338:	e0fffc17 	ldw	r3,-16(fp)
  80f33c:	e0bff617 	ldw	r2,-40(fp)
  80f340:	1887c83a 	sub	r3,r3,r2
  80f344:	e0ffff15 	stw	r3,-4(fp)
  80f348:	00000906 	br	80f370 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80f34c:	e0bffe17 	ldw	r2,-8(fp)
  80f350:	1090000c 	andi	r2,r2,16384
  80f354:	1005003a 	cmpeq	r2,r2,zero
  80f358:	1000031e 	bne	r2,zero,80f368 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80f35c:	00bffd44 	movi	r2,-11
  80f360:	e0bfff15 	stw	r2,-4(fp)
  80f364:	00000206 	br	80f370 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  80f368:	00bffec4 	movi	r2,-5
  80f36c:	e0bfff15 	stw	r2,-4(fp)
  80f370:	e0bfff17 	ldw	r2,-4(fp)
}
  80f374:	e037883a 	mov	sp,fp
  80f378:	dfc00117 	ldw	ra,4(sp)
  80f37c:	df000017 	ldw	fp,0(sp)
  80f380:	dec00204 	addi	sp,sp,8
  80f384:	f800283a 	ret

0080f388 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80f388:	defff904 	addi	sp,sp,-28
  80f38c:	dfc00615 	stw	ra,24(sp)
  80f390:	df000515 	stw	fp,20(sp)
  80f394:	df000504 	addi	fp,sp,20
  80f398:	e13ffe15 	stw	r4,-8(fp)
  80f39c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80f3a0:	e0bffe17 	ldw	r2,-8(fp)
  80f3a4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80f3a8:	e0bffe17 	ldw	r2,-8(fp)
  80f3ac:	10800104 	addi	r2,r2,4
  80f3b0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f3b4:	0005303a 	rdctl	r2,status
  80f3b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f3bc:	e0fffc17 	ldw	r3,-16(fp)
  80f3c0:	00bfff84 	movi	r2,-2
  80f3c4:	1884703a 	and	r2,r3,r2
  80f3c8:	1001703a 	wrctl	status,r2
  
  return context;
  80f3cc:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80f3d0:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
  80f3d4:	080e2440 	call	80e244 <alt_tick>
  80f3d8:	e0bffd17 	ldw	r2,-12(fp)
  80f3dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f3e0:	e0bffb17 	ldw	r2,-20(fp)
  80f3e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80f3e8:	e037883a 	mov	sp,fp
  80f3ec:	dfc00117 	ldw	ra,4(sp)
  80f3f0:	df000017 	ldw	fp,0(sp)
  80f3f4:	dec00204 	addi	sp,sp,8
  80f3f8:	f800283a 	ret

0080f3fc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80f3fc:	defff904 	addi	sp,sp,-28
  80f400:	dfc00615 	stw	ra,24(sp)
  80f404:	df000515 	stw	fp,20(sp)
  80f408:	df000504 	addi	fp,sp,20
  80f40c:	e13ffc15 	stw	r4,-16(fp)
  80f410:	e17ffd15 	stw	r5,-12(fp)
  80f414:	e1bffe15 	stw	r6,-8(fp)
  80f418:	e1ffff15 	stw	r7,-4(fp)
  80f41c:	e0bfff17 	ldw	r2,-4(fp)
  80f420:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80f424:	008020b4 	movhi	r2,130
  80f428:	10af2a04 	addi	r2,r2,-17240
  80f42c:	10800017 	ldw	r2,0(r2)
  80f430:	1004c03a 	cmpne	r2,r2,zero
  80f434:	1000041e 	bne	r2,zero,80f448 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  80f438:	00c020b4 	movhi	r3,130
  80f43c:	18ef2a04 	addi	r3,r3,-17240
  80f440:	e0bffb17 	ldw	r2,-20(fp)
  80f444:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80f448:	e0bffc17 	ldw	r2,-16(fp)
  80f44c:	10800104 	addi	r2,r2,4
  80f450:	1007883a 	mov	r3,r2
  80f454:	008001c4 	movi	r2,7
  80f458:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  80f45c:	e13ffe17 	ldw	r4,-8(fp)
  80f460:	e17ffc17 	ldw	r5,-16(fp)
  80f464:	01802074 	movhi	r6,129
  80f468:	31bce204 	addi	r6,r6,-3192
  80f46c:	080d9480 	call	80d948 <alt_irq_register>
#endif  
}
  80f470:	e037883a 	mov	sp,fp
  80f474:	dfc00117 	ldw	ra,4(sp)
  80f478:	df000017 	ldw	fp,0(sp)
  80f47c:	dec00204 	addi	sp,sp,8
  80f480:	f800283a 	ret

0080f484 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  80f484:	defffd04 	addi	sp,sp,-12
  80f488:	df000215 	stw	fp,8(sp)
  80f48c:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
  80f490:	008020b4 	movhi	r2,130
  80f494:	10af2c04 	addi	r2,r2,-17232
  80f498:	10800017 	ldw	r2,0(r2)
  80f49c:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
  80f4a0:	008020b4 	movhi	r2,130
  80f4a4:	10af2d04 	addi	r2,r2,-17228
  80f4a8:	10800017 	ldw	r2,0(r2)
  80f4ac:	1004c03a 	cmpne	r2,r2,zero
  80f4b0:	1000031e 	bne	r2,zero,80f4c0 <alt_timestamp_start+0x3c>
  {
    return -1;
  80f4b4:	00bfffc4 	movi	r2,-1
  80f4b8:	e0bfff15 	stw	r2,-4(fp)
  80f4bc:	00001506 	br	80f514 <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
  80f4c0:	e0bffe17 	ldw	r2,-8(fp)
  80f4c4:	10800104 	addi	r2,r2,4
  80f4c8:	1007883a 	mov	r3,r2
  80f4cc:	00800204 	movi	r2,8
  80f4d0:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
  80f4d4:	e0bffe17 	ldw	r2,-8(fp)
  80f4d8:	10800204 	addi	r2,r2,8
  80f4dc:	1007883a 	mov	r3,r2
  80f4e0:	00bfffd4 	movui	r2,65535
  80f4e4:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
  80f4e8:	e0bffe17 	ldw	r2,-8(fp)
  80f4ec:	10800304 	addi	r2,r2,12
  80f4f0:	1007883a 	mov	r3,r2
  80f4f4:	00bfffd4 	movui	r2,65535
  80f4f8:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
  80f4fc:	e0bffe17 	ldw	r2,-8(fp)
  80f500:	10800104 	addi	r2,r2,4
  80f504:	1007883a 	mov	r3,r2
  80f508:	00800104 	movi	r2,4
  80f50c:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
  80f510:	e03fff15 	stw	zero,-4(fp)
  80f514:	e0bfff17 	ldw	r2,-4(fp)
}
  80f518:	e037883a 	mov	sp,fp
  80f51c:	df000017 	ldw	fp,0(sp)
  80f520:	dec00104 	addi	sp,sp,4
  80f524:	f800283a 	ret

0080f528 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
  80f528:	defffb04 	addi	sp,sp,-20
  80f52c:	df000415 	stw	fp,16(sp)
  80f530:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
  80f534:	008020b4 	movhi	r2,130
  80f538:	10af2c04 	addi	r2,r2,-17232
  80f53c:	10800017 	ldw	r2,0(r2)
  80f540:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
  80f544:	008020b4 	movhi	r2,130
  80f548:	10af2d04 	addi	r2,r2,-17228
  80f54c:	10800017 	ldw	r2,0(r2)
  80f550:	1004c03a 	cmpne	r2,r2,zero
  80f554:	1000031e 	bne	r2,zero,80f564 <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
  80f558:	00bfffc4 	movi	r2,-1
  80f55c:	e0bfff15 	stw	r2,-4(fp)
  80f560:	00001306 	br	80f5b0 <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
  80f564:	e0bffe17 	ldw	r2,-8(fp)
  80f568:	10800404 	addi	r2,r2,16
  80f56c:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
  80f570:	e0bffe17 	ldw	r2,-8(fp)
  80f574:	10800404 	addi	r2,r2,16
  80f578:	10800037 	ldwio	r2,0(r2)
  80f57c:	10bfffcc 	andi	r2,r2,65535
  80f580:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
  80f584:	e0bffe17 	ldw	r2,-8(fp)
  80f588:	10800504 	addi	r2,r2,20
  80f58c:	10800037 	ldwio	r2,0(r2)
  80f590:	10bfffcc 	andi	r2,r2,65535
  80f594:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
  80f598:	e0bffc17 	ldw	r2,-16(fp)
  80f59c:	1006943a 	slli	r3,r2,16
  80f5a0:	e0bffd17 	ldw	r2,-12(fp)
  80f5a4:	1884b03a 	or	r2,r3,r2
  80f5a8:	0084303a 	nor	r2,zero,r2
  80f5ac:	e0bfff15 	stw	r2,-4(fp)
  80f5b0:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
  80f5b4:	e037883a 	mov	sp,fp
  80f5b8:	df000017 	ldw	fp,0(sp)
  80f5bc:	dec00104 	addi	sp,sp,4
  80f5c0:	f800283a 	ret

0080f5c4 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
  80f5c4:	deffff04 	addi	sp,sp,-4
  80f5c8:	df000015 	stw	fp,0(sp)
  80f5cc:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
  80f5d0:	008020b4 	movhi	r2,130
  80f5d4:	10af2d04 	addi	r2,r2,-17228
  80f5d8:	10800017 	ldw	r2,0(r2)
}
  80f5dc:	e037883a 	mov	sp,fp
  80f5e0:	df000017 	ldw	fp,0(sp)
  80f5e4:	dec00104 	addi	sp,sp,4
  80f5e8:	f800283a 	ret

0080f5ec <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
  80f5ec:	defffc04 	addi	sp,sp,-16
  80f5f0:	dfc00315 	stw	ra,12(sp)
  80f5f4:	df000215 	stw	fp,8(sp)
  80f5f8:	df000204 	addi	fp,sp,8
  80f5fc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  80f600:	e13fff17 	ldw	r4,-4(fp)
  80f604:	014020b4 	movhi	r5,130
  80f608:	29681f04 	addi	r5,r5,-24452
  80f60c:	0816da00 	call	816da0 <alt_find_dev>
  80f610:	e0bffe15 	stw	r2,-8(fp)
  return dev;
  80f614:	e0bffe17 	ldw	r2,-8(fp)
}
  80f618:	e037883a 	mov	sp,fp
  80f61c:	dfc00117 	ldw	ra,4(sp)
  80f620:	df000017 	ldw	fp,0(sp)
  80f624:	dec00204 	addi	sp,sp,8
  80f628:	f800283a 	ret

0080f62c <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
  80f62c:	defffd04 	addi	sp,sp,-12
  80f630:	df000215 	stw	fp,8(sp)
  80f634:	df000204 	addi	fp,sp,8
  80f638:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  80f63c:	e0bfff17 	ldw	r2,-4(fp)
  80f640:	10800a17 	ldw	r2,40(r2)
  80f644:	10800037 	ldwio	r2,0(r2)
  80f648:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
  80f64c:	e0bffe17 	ldw	r2,-8(fp)
  80f650:	10800054 	ori	r2,r2,1
  80f654:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  80f658:	e0bfff17 	ldw	r2,-4(fp)
  80f65c:	10800a17 	ldw	r2,40(r2)
  80f660:	e0fffe17 	ldw	r3,-8(fp)
  80f664:	10c00035 	stwio	r3,0(r2)
}
  80f668:	e037883a 	mov	sp,fp
  80f66c:	df000017 	ldw	fp,0(sp)
  80f670:	dec00104 	addi	sp,sp,4
  80f674:	f800283a 	ret

0080f678 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
  80f678:	defffd04 	addi	sp,sp,-12
  80f67c:	df000215 	stw	fp,8(sp)
  80f680:	df000204 	addi	fp,sp,8
  80f684:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  80f688:	e0bfff17 	ldw	r2,-4(fp)
  80f68c:	10800a17 	ldw	r2,40(r2)
  80f690:	10800037 	ldwio	r2,0(r2)
  80f694:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
  80f698:	e0fffe17 	ldw	r3,-8(fp)
  80f69c:	00bfff84 	movi	r2,-2
  80f6a0:	1884703a 	and	r2,r3,r2
  80f6a4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  80f6a8:	e0bfff17 	ldw	r2,-4(fp)
  80f6ac:	10800a17 	ldw	r2,40(r2)
  80f6b0:	e0fffe17 	ldw	r3,-8(fp)
  80f6b4:	10c00035 	stwio	r3,0(r2)
}
  80f6b8:	e037883a 	mov	sp,fp
  80f6bc:	df000017 	ldw	fp,0(sp)
  80f6c0:	dec00104 	addi	sp,sp,4
  80f6c4:	f800283a 	ret

0080f6c8 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
  80f6c8:	defffd04 	addi	sp,sp,-12
  80f6cc:	df000215 	stw	fp,8(sp)
  80f6d0:	df000204 	addi	fp,sp,8
  80f6d4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  80f6d8:	e0bfff17 	ldw	r2,-4(fp)
  80f6dc:	10800a17 	ldw	r2,40(r2)
  80f6e0:	10800037 	ldwio	r2,0(r2)
  80f6e4:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
  80f6e8:	e0bffe17 	ldw	r2,-8(fp)
  80f6ec:	10800094 	ori	r2,r2,2
  80f6f0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  80f6f4:	e0bfff17 	ldw	r2,-4(fp)
  80f6f8:	10800a17 	ldw	r2,40(r2)
  80f6fc:	e0fffe17 	ldw	r3,-8(fp)
  80f700:	10c00035 	stwio	r3,0(r2)
}
  80f704:	e037883a 	mov	sp,fp
  80f708:	df000017 	ldw	fp,0(sp)
  80f70c:	dec00104 	addi	sp,sp,4
  80f710:	f800283a 	ret

0080f714 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
  80f714:	defffd04 	addi	sp,sp,-12
  80f718:	df000215 	stw	fp,8(sp)
  80f71c:	df000204 	addi	fp,sp,8
  80f720:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  80f724:	e0bfff17 	ldw	r2,-4(fp)
  80f728:	10800a17 	ldw	r2,40(r2)
  80f72c:	10800037 	ldwio	r2,0(r2)
  80f730:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
  80f734:	e0fffe17 	ldw	r3,-8(fp)
  80f738:	00bfff44 	movi	r2,-3
  80f73c:	1884703a 	and	r2,r3,r2
  80f740:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  80f744:	e0bfff17 	ldw	r2,-4(fp)
  80f748:	10800a17 	ldw	r2,40(r2)
  80f74c:	e0fffe17 	ldw	r3,-8(fp)
  80f750:	10c00035 	stwio	r3,0(r2)
}
  80f754:	e037883a 	mov	sp,fp
  80f758:	df000017 	ldw	fp,0(sp)
  80f75c:	dec00104 	addi	sp,sp,4
  80f760:	f800283a 	ret

0080f764 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
  80f764:	defffd04 	addi	sp,sp,-12
  80f768:	df000215 	stw	fp,8(sp)
  80f76c:	df000204 	addi	fp,sp,8
  80f770:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  80f774:	e0bfff17 	ldw	r2,-4(fp)
  80f778:	10800a17 	ldw	r2,40(r2)
  80f77c:	10800037 	ldwio	r2,0(r2)
  80f780:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
  80f784:	e0bffe17 	ldw	r2,-8(fp)
  80f788:	1080400c 	andi	r2,r2,256
  80f78c:	1004c03a 	cmpne	r2,r2,zero
}
  80f790:	e037883a 	mov	sp,fp
  80f794:	df000017 	ldw	fp,0(sp)
  80f798:	dec00104 	addi	sp,sp,4
  80f79c:	f800283a 	ret

0080f7a0 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
  80f7a0:	defffd04 	addi	sp,sp,-12
  80f7a4:	df000215 	stw	fp,8(sp)
  80f7a8:	df000204 	addi	fp,sp,8
  80f7ac:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  80f7b0:	e0bfff17 	ldw	r2,-4(fp)
  80f7b4:	10800a17 	ldw	r2,40(r2)
  80f7b8:	10800037 	ldwio	r2,0(r2)
  80f7bc:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
  80f7c0:	e0bffe17 	ldw	r2,-8(fp)
  80f7c4:	1080800c 	andi	r2,r2,512
  80f7c8:	1004c03a 	cmpne	r2,r2,zero
}
  80f7cc:	e037883a 	mov	sp,fp
  80f7d0:	df000017 	ldw	fp,0(sp)
  80f7d4:	dec00104 	addi	sp,sp,4
  80f7d8:	f800283a 	ret

0080f7dc <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
  80f7dc:	defffd04 	addi	sp,sp,-12
  80f7e0:	df000215 	stw	fp,8(sp)
  80f7e4:	df000204 	addi	fp,sp,8
  80f7e8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  80f7ec:	e0bfff17 	ldw	r2,-4(fp)
  80f7f0:	10800a17 	ldw	r2,40(r2)
  80f7f4:	10800037 	ldwio	r2,0(r2)
  80f7f8:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
  80f7fc:	e0bffe17 	ldw	r2,-8(fp)
  80f800:	10800114 	ori	r2,r2,4
  80f804:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  80f808:	e0bffe17 	ldw	r2,-8(fp)
  80f80c:	10800214 	ori	r2,r2,8
  80f810:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  80f814:	e0bfff17 	ldw	r2,-4(fp)
  80f818:	10800a17 	ldw	r2,40(r2)
  80f81c:	e0fffe17 	ldw	r3,-8(fp)
  80f820:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
  80f824:	e0fffe17 	ldw	r3,-8(fp)
  80f828:	00bffec4 	movi	r2,-5
  80f82c:	1884703a 	and	r2,r3,r2
  80f830:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
  80f834:	e0fffe17 	ldw	r3,-8(fp)
  80f838:	00bffdc4 	movi	r2,-9
  80f83c:	1884703a 	and	r2,r3,r2
  80f840:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  80f844:	e0bfff17 	ldw	r2,-4(fp)
  80f848:	10800a17 	ldw	r2,40(r2)
  80f84c:	e0fffe17 	ldw	r3,-8(fp)
  80f850:	10c00035 	stwio	r3,0(r2)
}
  80f854:	e037883a 	mov	sp,fp
  80f858:	df000017 	ldw	fp,0(sp)
  80f85c:	dec00104 	addi	sp,sp,4
  80f860:	f800283a 	ret

0080f864 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
  80f864:	defffb04 	addi	sp,sp,-20
  80f868:	df000415 	stw	fp,16(sp)
  80f86c:	df000404 	addi	fp,sp,16
  80f870:	e13ffd15 	stw	r4,-12(fp)
  80f874:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  80f878:	e0bffd17 	ldw	r2,-12(fp)
  80f87c:	10800a17 	ldw	r2,40(r2)
  80f880:	10800104 	addi	r2,r2,4
  80f884:	10800037 	ldwio	r2,0(r2)
  80f888:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  80f88c:	e0bffe17 	ldw	r2,-8(fp)
  80f890:	1004c03a 	cmpne	r2,r2,zero
  80f894:	1000051e 	bne	r2,zero,80f8ac <alt_up_audio_read_fifo_avail+0x48>
  80f898:	e0bffc17 	ldw	r2,-16(fp)
  80f89c:	10bfc00c 	andi	r2,r2,65280
  80f8a0:	1004d23a 	srli	r2,r2,8
  80f8a4:	e0bfff15 	stw	r2,-4(fp)
  80f8a8:	00000306 	br	80f8b8 <alt_up_audio_read_fifo_avail+0x54>
  80f8ac:	e0bffc17 	ldw	r2,-16(fp)
  80f8b0:	10803fcc 	andi	r2,r2,255
  80f8b4:	e0bfff15 	stw	r2,-4(fp)
  80f8b8:	e0bfff17 	ldw	r2,-4(fp)
  80f8bc:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
  80f8c0:	e0bffc17 	ldw	r2,-16(fp)
}
  80f8c4:	e037883a 	mov	sp,fp
  80f8c8:	df000017 	ldw	fp,0(sp)
  80f8cc:	dec00104 	addi	sp,sp,4
  80f8d0:	f800283a 	ret

0080f8d4 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  80f8d4:	defff904 	addi	sp,sp,-28
  80f8d8:	dfc00615 	stw	ra,24(sp)
  80f8dc:	df000515 	stw	fp,20(sp)
  80f8e0:	df000504 	addi	fp,sp,20
  80f8e4:	e13ffc15 	stw	r4,-16(fp)
  80f8e8:	e17ffd15 	stw	r5,-12(fp)
  80f8ec:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
  80f8f0:	e13ffc17 	ldw	r4,-16(fp)
  80f8f4:	01400044 	movi	r5,1
  80f8f8:	080f8640 	call	80f864 <alt_up_audio_read_fifo_avail>
  80f8fc:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  80f900:	e0bffb17 	ldw	r2,-20(fp)
  80f904:	10801868 	cmpgeui	r2,r2,97
  80f908:	1000021e 	bne	r2,zero,80f914 <alt_up_audio_record_r+0x40>
		return 0;
  80f90c:	e03fff15 	stw	zero,-4(fp)
  80f910:	00000606 	br	80f92c <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  80f914:	e13ffc17 	ldw	r4,-16(fp)
  80f918:	e17ffd17 	ldw	r5,-12(fp)
  80f91c:	e1bffe17 	ldw	r6,-8(fp)
  80f920:	01c00044 	movi	r7,1
  80f924:	080fb080 	call	80fb08 <alt_up_audio_read_fifo>
  80f928:	e0bfff15 	stw	r2,-4(fp)
  80f92c:	e0bfff17 	ldw	r2,-4(fp)
}
  80f930:	e037883a 	mov	sp,fp
  80f934:	dfc00117 	ldw	ra,4(sp)
  80f938:	df000017 	ldw	fp,0(sp)
  80f93c:	dec00204 	addi	sp,sp,8
  80f940:	f800283a 	ret

0080f944 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  80f944:	defff904 	addi	sp,sp,-28
  80f948:	dfc00615 	stw	ra,24(sp)
  80f94c:	df000515 	stw	fp,20(sp)
  80f950:	df000504 	addi	fp,sp,20
  80f954:	e13ffc15 	stw	r4,-16(fp)
  80f958:	e17ffd15 	stw	r5,-12(fp)
  80f95c:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
  80f960:	e13ffc17 	ldw	r4,-16(fp)
  80f964:	000b883a 	mov	r5,zero
  80f968:	080f8640 	call	80f864 <alt_up_audio_read_fifo_avail>
  80f96c:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  80f970:	e0bffb17 	ldw	r2,-20(fp)
  80f974:	10801868 	cmpgeui	r2,r2,97
  80f978:	1000021e 	bne	r2,zero,80f984 <alt_up_audio_record_l+0x40>
		return 0;
  80f97c:	e03fff15 	stw	zero,-4(fp)
  80f980:	00000606 	br	80f99c <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  80f984:	e13ffc17 	ldw	r4,-16(fp)
  80f988:	e17ffd17 	ldw	r5,-12(fp)
  80f98c:	e1bffe17 	ldw	r6,-8(fp)
  80f990:	000f883a 	mov	r7,zero
  80f994:	080fb080 	call	80fb08 <alt_up_audio_read_fifo>
  80f998:	e0bfff15 	stw	r2,-4(fp)
  80f99c:	e0bfff17 	ldw	r2,-4(fp)
}
  80f9a0:	e037883a 	mov	sp,fp
  80f9a4:	dfc00117 	ldw	ra,4(sp)
  80f9a8:	df000017 	ldw	fp,0(sp)
  80f9ac:	dec00204 	addi	sp,sp,8
  80f9b0:	f800283a 	ret

0080f9b4 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
  80f9b4:	defffb04 	addi	sp,sp,-20
  80f9b8:	df000415 	stw	fp,16(sp)
  80f9bc:	df000404 	addi	fp,sp,16
  80f9c0:	e13ffd15 	stw	r4,-12(fp)
  80f9c4:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  80f9c8:	e0bffd17 	ldw	r2,-12(fp)
  80f9cc:	10800a17 	ldw	r2,40(r2)
  80f9d0:	10800104 	addi	r2,r2,4
  80f9d4:	10800037 	ldwio	r2,0(r2)
  80f9d8:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  80f9dc:	e0bffe17 	ldw	r2,-8(fp)
  80f9e0:	1004c03a 	cmpne	r2,r2,zero
  80f9e4:	1000051e 	bne	r2,zero,80f9fc <alt_up_audio_write_fifo_space+0x48>
  80f9e8:	e0bffc17 	ldw	r2,-16(fp)
  80f9ec:	10bfc02c 	andhi	r2,r2,65280
  80f9f0:	1004d63a 	srli	r2,r2,24
  80f9f4:	e0bfff15 	stw	r2,-4(fp)
  80f9f8:	00000406 	br	80fa0c <alt_up_audio_write_fifo_space+0x58>
  80f9fc:	e0bffc17 	ldw	r2,-16(fp)
  80fa00:	10803fec 	andhi	r2,r2,255
  80fa04:	1004d43a 	srli	r2,r2,16
  80fa08:	e0bfff15 	stw	r2,-4(fp)
  80fa0c:	e0bfff17 	ldw	r2,-4(fp)
  80fa10:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
  80fa14:	e0bffc17 	ldw	r2,-16(fp)
}
  80fa18:	e037883a 	mov	sp,fp
  80fa1c:	df000017 	ldw	fp,0(sp)
  80fa20:	dec00104 	addi	sp,sp,4
  80fa24:	f800283a 	ret

0080fa28 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  80fa28:	defff904 	addi	sp,sp,-28
  80fa2c:	dfc00615 	stw	ra,24(sp)
  80fa30:	df000515 	stw	fp,20(sp)
  80fa34:	df000504 	addi	fp,sp,20
  80fa38:	e13ffc15 	stw	r4,-16(fp)
  80fa3c:	e17ffd15 	stw	r5,-12(fp)
  80fa40:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
  80fa44:	e13ffc17 	ldw	r4,-16(fp)
  80fa48:	01400044 	movi	r5,1
  80fa4c:	080f9b40 	call	80f9b4 <alt_up_audio_write_fifo_space>
  80fa50:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  80fa54:	e0bffb17 	ldw	r2,-20(fp)
  80fa58:	10801868 	cmpgeui	r2,r2,97
  80fa5c:	1000021e 	bne	r2,zero,80fa68 <alt_up_audio_play_r+0x40>
		return 0;
  80fa60:	e03fff15 	stw	zero,-4(fp)
  80fa64:	00000606 	br	80fa80 <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  80fa68:	e13ffc17 	ldw	r4,-16(fp)
  80fa6c:	e17ffd17 	ldw	r5,-12(fp)
  80fa70:	e1bffe17 	ldw	r6,-8(fp)
  80fa74:	01c00044 	movi	r7,1
  80fa78:	080fc0c0 	call	80fc0c <alt_up_audio_write_fifo>
  80fa7c:	e0bfff15 	stw	r2,-4(fp)
  80fa80:	e0bfff17 	ldw	r2,-4(fp)
}
  80fa84:	e037883a 	mov	sp,fp
  80fa88:	dfc00117 	ldw	ra,4(sp)
  80fa8c:	df000017 	ldw	fp,0(sp)
  80fa90:	dec00204 	addi	sp,sp,8
  80fa94:	f800283a 	ret

0080fa98 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  80fa98:	defff904 	addi	sp,sp,-28
  80fa9c:	dfc00615 	stw	ra,24(sp)
  80faa0:	df000515 	stw	fp,20(sp)
  80faa4:	df000504 	addi	fp,sp,20
  80faa8:	e13ffc15 	stw	r4,-16(fp)
  80faac:	e17ffd15 	stw	r5,-12(fp)
  80fab0:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
  80fab4:	e13ffc17 	ldw	r4,-16(fp)
  80fab8:	000b883a 	mov	r5,zero
  80fabc:	080f9b40 	call	80f9b4 <alt_up_audio_write_fifo_space>
  80fac0:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  80fac4:	e0bffb17 	ldw	r2,-20(fp)
  80fac8:	10801868 	cmpgeui	r2,r2,97
  80facc:	1000021e 	bne	r2,zero,80fad8 <alt_up_audio_play_l+0x40>
		return 0;
  80fad0:	e03fff15 	stw	zero,-4(fp)
  80fad4:	00000606 	br	80faf0 <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  80fad8:	e13ffc17 	ldw	r4,-16(fp)
  80fadc:	e17ffd17 	ldw	r5,-12(fp)
  80fae0:	e1bffe17 	ldw	r6,-8(fp)
  80fae4:	000f883a 	mov	r7,zero
  80fae8:	080fc0c0 	call	80fc0c <alt_up_audio_write_fifo>
  80faec:	e0bfff15 	stw	r2,-4(fp)
  80faf0:	e0bfff17 	ldw	r2,-4(fp)
}
  80faf4:	e037883a 	mov	sp,fp
  80faf8:	dfc00117 	ldw	ra,4(sp)
  80fafc:	df000017 	ldw	fp,0(sp)
  80fb00:	dec00204 	addi	sp,sp,8
  80fb04:	f800283a 	ret

0080fb08 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  80fb08:	defff604 	addi	sp,sp,-40
  80fb0c:	df000915 	stw	fp,36(sp)
  80fb10:	df000904 	addi	fp,sp,36
  80fb14:	e13ff915 	stw	r4,-28(fp)
  80fb18:	e17ffa15 	stw	r5,-24(fp)
  80fb1c:	e1bffb15 	stw	r6,-20(fp)
  80fb20:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
  80fb24:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
  80fb28:	00003006 	br	80fbec <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  80fb2c:	e0bff917 	ldw	r2,-28(fp)
  80fb30:	10800a17 	ldw	r2,40(r2)
  80fb34:	10800104 	addi	r2,r2,4
  80fb38:	10800037 	ldwio	r2,0(r2)
  80fb3c:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  80fb40:	e0bffc17 	ldw	r2,-16(fp)
  80fb44:	1004c03a 	cmpne	r2,r2,zero
  80fb48:	1000051e 	bne	r2,zero,80fb60 <alt_up_audio_read_fifo+0x58>
  80fb4c:	e0bff817 	ldw	r2,-32(fp)
  80fb50:	10bfc00c 	andi	r2,r2,65280
  80fb54:	1004d23a 	srli	r2,r2,8
  80fb58:	e0bfff15 	stw	r2,-4(fp)
  80fb5c:	00000306 	br	80fb6c <alt_up_audio_read_fifo+0x64>
  80fb60:	e0bff817 	ldw	r2,-32(fp)
  80fb64:	10803fcc 	andi	r2,r2,255
  80fb68:	e0bfff15 	stw	r2,-4(fp)
  80fb6c:	e0bfff17 	ldw	r2,-4(fp)
  80fb70:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  80fb74:	e0bff817 	ldw	r2,-32(fp)
  80fb78:	1005003a 	cmpeq	r2,r2,zero
  80fb7c:	10001e1e 	bne	r2,zero,80fbf8 <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  80fb80:	e0bff717 	ldw	r2,-36(fp)
  80fb84:	1085883a 	add	r2,r2,r2
  80fb88:	1085883a 	add	r2,r2,r2
  80fb8c:	1007883a 	mov	r3,r2
  80fb90:	e0bffa17 	ldw	r2,-24(fp)
  80fb94:	1887883a 	add	r3,r3,r2
  80fb98:	e0fffe15 	stw	r3,-8(fp)
  80fb9c:	e0bffc17 	ldw	r2,-16(fp)
  80fba0:	1004c03a 	cmpne	r2,r2,zero
  80fba4:	1000061e 	bne	r2,zero,80fbc0 <alt_up_audio_read_fifo+0xb8>
  80fba8:	e0bff917 	ldw	r2,-28(fp)
  80fbac:	10800a17 	ldw	r2,40(r2)
  80fbb0:	10800204 	addi	r2,r2,8
  80fbb4:	10800037 	ldwio	r2,0(r2)
  80fbb8:	e0bffd15 	stw	r2,-12(fp)
  80fbbc:	00000506 	br	80fbd4 <alt_up_audio_read_fifo+0xcc>
  80fbc0:	e0bff917 	ldw	r2,-28(fp)
  80fbc4:	10800a17 	ldw	r2,40(r2)
  80fbc8:	10800304 	addi	r2,r2,12
  80fbcc:	10800037 	ldwio	r2,0(r2)
  80fbd0:	e0bffd15 	stw	r2,-12(fp)
  80fbd4:	e0fffd17 	ldw	r3,-12(fp)
  80fbd8:	e0bffe17 	ldw	r2,-8(fp)
  80fbdc:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  80fbe0:	e0bff717 	ldw	r2,-36(fp)
  80fbe4:	10800044 	addi	r2,r2,1
  80fbe8:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  80fbec:	e0fff717 	ldw	r3,-36(fp)
  80fbf0:	e0bffb17 	ldw	r2,-20(fp)
  80fbf4:	18bfcd16 	blt	r3,r2,80fb2c <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
  80fbf8:	e0bff717 	ldw	r2,-36(fp)
}
  80fbfc:	e037883a 	mov	sp,fp
  80fc00:	df000017 	ldw	fp,0(sp)
  80fc04:	dec00104 	addi	sp,sp,4
  80fc08:	f800283a 	ret

0080fc0c <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  80fc0c:	defff804 	addi	sp,sp,-32
  80fc10:	df000715 	stw	fp,28(sp)
  80fc14:	df000704 	addi	fp,sp,28
  80fc18:	e13ffb15 	stw	r4,-20(fp)
  80fc1c:	e17ffc15 	stw	r5,-16(fp)
  80fc20:	e1bffd15 	stw	r6,-12(fp)
  80fc24:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
  80fc28:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
  80fc2c:	00003a06 	br	80fd18 <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  80fc30:	e0bffb17 	ldw	r2,-20(fp)
  80fc34:	10800a17 	ldw	r2,40(r2)
  80fc38:	10800104 	addi	r2,r2,4
  80fc3c:	10800037 	ldwio	r2,0(r2)
  80fc40:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  80fc44:	e0bffe17 	ldw	r2,-8(fp)
  80fc48:	1004c03a 	cmpne	r2,r2,zero
  80fc4c:	1000051e 	bne	r2,zero,80fc64 <alt_up_audio_write_fifo+0x58>
  80fc50:	e0bffa17 	ldw	r2,-24(fp)
  80fc54:	10bfc02c 	andhi	r2,r2,65280
  80fc58:	1004d63a 	srli	r2,r2,24
  80fc5c:	e0bfff15 	stw	r2,-4(fp)
  80fc60:	00000406 	br	80fc74 <alt_up_audio_write_fifo+0x68>
  80fc64:	e0bffa17 	ldw	r2,-24(fp)
  80fc68:	10803fec 	andhi	r2,r2,255
  80fc6c:	1004d43a 	srli	r2,r2,16
  80fc70:	e0bfff15 	stw	r2,-4(fp)
  80fc74:	e0bfff17 	ldw	r2,-4(fp)
  80fc78:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  80fc7c:	e0bffa17 	ldw	r2,-24(fp)
  80fc80:	1005003a 	cmpeq	r2,r2,zero
  80fc84:	1000271e 	bne	r2,zero,80fd24 <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
  80fc88:	e0bffe17 	ldw	r2,-8(fp)
  80fc8c:	1004c03a 	cmpne	r2,r2,zero
  80fc90:	1000111e 	bne	r2,zero,80fcd8 <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  80fc94:	e0bffb17 	ldw	r2,-20(fp)
  80fc98:	10800a17 	ldw	r2,40(r2)
  80fc9c:	11000204 	addi	r4,r2,8
  80fca0:	e0bff917 	ldw	r2,-28(fp)
  80fca4:	1085883a 	add	r2,r2,r2
  80fca8:	1085883a 	add	r2,r2,r2
  80fcac:	1007883a 	mov	r3,r2
  80fcb0:	e0bffc17 	ldw	r2,-16(fp)
  80fcb4:	1885883a 	add	r2,r3,r2
  80fcb8:	10800017 	ldw	r2,0(r2)
  80fcbc:	1007883a 	mov	r3,r2
  80fcc0:	e0bff917 	ldw	r2,-28(fp)
  80fcc4:	10800044 	addi	r2,r2,1
  80fcc8:	e0bff915 	stw	r2,-28(fp)
  80fccc:	2005883a 	mov	r2,r4
  80fcd0:	10c00035 	stwio	r3,0(r2)
  80fcd4:	00001006 	br	80fd18 <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  80fcd8:	e0bffb17 	ldw	r2,-20(fp)
  80fcdc:	10800a17 	ldw	r2,40(r2)
  80fce0:	11000304 	addi	r4,r2,12
  80fce4:	e0bff917 	ldw	r2,-28(fp)
  80fce8:	1085883a 	add	r2,r2,r2
  80fcec:	1085883a 	add	r2,r2,r2
  80fcf0:	1007883a 	mov	r3,r2
  80fcf4:	e0bffc17 	ldw	r2,-16(fp)
  80fcf8:	1885883a 	add	r2,r3,r2
  80fcfc:	10800017 	ldw	r2,0(r2)
  80fd00:	1007883a 	mov	r3,r2
  80fd04:	e0bff917 	ldw	r2,-28(fp)
  80fd08:	10800044 	addi	r2,r2,1
  80fd0c:	e0bff915 	stw	r2,-28(fp)
  80fd10:	2005883a 	mov	r2,r4
  80fd14:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  80fd18:	e0fff917 	ldw	r3,-28(fp)
  80fd1c:	e0bffd17 	ldw	r2,-12(fp)
  80fd20:	18bfc316 	blt	r3,r2,80fc30 <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
  80fd24:	e0bff917 	ldw	r2,-28(fp)
}
  80fd28:	e037883a 	mov	sp,fp
  80fd2c:	df000017 	ldw	fp,0(sp)
  80fd30:	dec00104 	addi	sp,sp,4
  80fd34:	f800283a 	ret

0080fd38 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
  80fd38:	defffc04 	addi	sp,sp,-16
  80fd3c:	df000315 	stw	fp,12(sp)
  80fd40:	df000304 	addi	fp,sp,12
  80fd44:	e13ffd15 	stw	r4,-12(fp)
  80fd48:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  80fd4c:	e0bffe17 	ldw	r2,-8(fp)
  80fd50:	1004c03a 	cmpne	r2,r2,zero
  80fd54:	1000061e 	bne	r2,zero,80fd70 <alt_up_audio_read_fifo_head+0x38>
  80fd58:	e0bffd17 	ldw	r2,-12(fp)
  80fd5c:	10800a17 	ldw	r2,40(r2)
  80fd60:	10800204 	addi	r2,r2,8
  80fd64:	10800037 	ldwio	r2,0(r2)
  80fd68:	e0bfff15 	stw	r2,-4(fp)
  80fd6c:	00000506 	br	80fd84 <alt_up_audio_read_fifo_head+0x4c>
  80fd70:	e0bffd17 	ldw	r2,-12(fp)
  80fd74:	10800a17 	ldw	r2,40(r2)
  80fd78:	10800304 	addi	r2,r2,12
  80fd7c:	10800037 	ldwio	r2,0(r2)
  80fd80:	e0bfff15 	stw	r2,-4(fp)
  80fd84:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
  80fd88:	e037883a 	mov	sp,fp
  80fd8c:	df000017 	ldw	fp,0(sp)
  80fd90:	dec00104 	addi	sp,sp,4
  80fd94:	f800283a 	ret

0080fd98 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
  80fd98:	defffc04 	addi	sp,sp,-16
  80fd9c:	df000315 	stw	fp,12(sp)
  80fda0:	df000304 	addi	fp,sp,12
  80fda4:	e13ffd15 	stw	r4,-12(fp)
  80fda8:	e17ffe15 	stw	r5,-8(fp)
  80fdac:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
  80fdb0:	e0bfff17 	ldw	r2,-4(fp)
  80fdb4:	1004c03a 	cmpne	r2,r2,zero
  80fdb8:	1000061e 	bne	r2,zero,80fdd4 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  80fdbc:	e0bffd17 	ldw	r2,-12(fp)
  80fdc0:	10800a17 	ldw	r2,40(r2)
  80fdc4:	10800204 	addi	r2,r2,8
  80fdc8:	e0fffe17 	ldw	r3,-8(fp)
  80fdcc:	10c00035 	stwio	r3,0(r2)
  80fdd0:	00000506 	br	80fde8 <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  80fdd4:	e0bffd17 	ldw	r2,-12(fp)
  80fdd8:	10800a17 	ldw	r2,40(r2)
  80fddc:	10800304 	addi	r2,r2,12
  80fde0:	e0fffe17 	ldw	r3,-8(fp)
  80fde4:	10c00035 	stwio	r3,0(r2)
}
  80fde8:	e037883a 	mov	sp,fp
  80fdec:	df000017 	ldw	fp,0(sp)
  80fdf0:	dec00104 	addi	sp,sp,4
  80fdf4:	f800283a 	ret

0080fdf8 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
  80fdf8:	defffc04 	addi	sp,sp,-16
  80fdfc:	dfc00315 	stw	ra,12(sp)
  80fe00:	df000215 	stw	fp,8(sp)
  80fe04:	df000204 	addi	fp,sp,8
  80fe08:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
  80fe0c:	e13fff17 	ldw	r4,-4(fp)
  80fe10:	014020b4 	movhi	r5,130
  80fe14:	29681f04 	addi	r5,r5,-24452
  80fe18:	0816da00 	call	816da0 <alt_find_dev>
  80fe1c:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
  80fe20:	e0bffe17 	ldw	r2,-8(fp)
  80fe24:	10800a17 	ldw	r2,40(r2)
  80fe28:	10800104 	addi	r2,r2,4
  80fe2c:	10800037 	ldwio	r2,0(r2)
  80fe30:	10803fec 	andhi	r2,r2,255
  80fe34:	1005d43a 	srai	r2,r2,16
  80fe38:	1007883a 	mov	r3,r2
  80fe3c:	e0bffe17 	ldw	r2,-8(fp)
  80fe40:	10c00b15 	stw	r3,44(r2)

  return dev;
  80fe44:	e0bffe17 	ldw	r2,-8(fp)
}
  80fe48:	e037883a 	mov	sp,fp
  80fe4c:	dfc00117 	ldw	ra,4(sp)
  80fe50:	df000017 	ldw	fp,0(sp)
  80fe54:	dec00204 	addi	sp,sp,8
  80fe58:	f800283a 	ret

0080fe5c <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  80fe5c:	defffc04 	addi	sp,sp,-16
  80fe60:	df000315 	stw	fp,12(sp)
  80fe64:	df000304 	addi	fp,sp,12
  80fe68:	e13ffd15 	stw	r4,-12(fp)
  80fe6c:	e17ffe15 	stw	r5,-8(fp)
  80fe70:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  80fe74:	e0bffd17 	ldw	r2,-12(fp)
  80fe78:	10800a17 	ldw	r2,40(r2)
  80fe7c:	11000204 	addi	r4,r2,8
  80fe80:	e0bffe17 	ldw	r2,-8(fp)
  80fe84:	10c03fcc 	andi	r3,r2,255
  80fe88:	2005883a 	mov	r2,r4
  80fe8c:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
  80fe90:	e0bffd17 	ldw	r2,-12(fp)
  80fe94:	10800a17 	ldw	r2,40(r2)
  80fe98:	11000304 	addi	r4,r2,12
  80fe9c:	e0bfff17 	ldw	r2,-4(fp)
  80fea0:	10ffffcc 	andi	r3,r2,65535
  80fea4:	2005883a 	mov	r2,r4
  80fea8:	10c00035 	stwio	r3,0(r2)

	return 0;
  80feac:	0005883a 	mov	r2,zero
}
  80feb0:	e037883a 	mov	sp,fp
  80feb4:	df000017 	ldw	fp,0(sp)
  80feb8:	dec00104 	addi	sp,sp,4
  80febc:	f800283a 	ret

0080fec0 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
  80fec0:	defffa04 	addi	sp,sp,-24
  80fec4:	dfc00515 	stw	ra,20(sp)
  80fec8:	df000415 	stw	fp,16(sp)
  80fecc:	df000404 	addi	fp,sp,16
  80fed0:	e13ffc15 	stw	r4,-16(fp)
  80fed4:	e17ffd15 	stw	r5,-12(fp)
  80fed8:	e1bffe15 	stw	r6,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  80fedc:	e0bffc17 	ldw	r2,-16(fp)
  80fee0:	10800a17 	ldw	r2,40(r2)
  80fee4:	11000204 	addi	r4,r2,8
  80fee8:	e0bffd17 	ldw	r2,-12(fp)
  80feec:	10c03fcc 	andi	r3,r2,255
  80fef0:	2005883a 	mov	r2,r4
  80fef4:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
  80fef8:	e0bffc17 	ldw	r2,-16(fp)
  80fefc:	10800a17 	ldw	r2,40(r2)
  80ff00:	10800304 	addi	r2,r2,12
  80ff04:	10800037 	ldwio	r2,0(r2)
  80ff08:	1007883a 	mov	r3,r2
  80ff0c:	e0bffe17 	ldw	r2,-8(fp)
  80ff10:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
  80ff14:	e13ffc17 	ldw	r4,-16(fp)
  80ff18:	080ffec0 	call	80ffec <alt_up_av_config_read_acknowledge>
  80ff1c:	1005003a 	cmpeq	r2,r2,zero
  80ff20:	1000031e 	bne	r2,zero,80ff30 <alt_up_av_config_read_data+0x70>
		return -1;
  80ff24:	00bfffc4 	movi	r2,-1
  80ff28:	e0bfff15 	stw	r2,-4(fp)
  80ff2c:	00000106 	br	80ff34 <alt_up_av_config_read_data+0x74>

	return 0;
  80ff30:	e03fff15 	stw	zero,-4(fp)
  80ff34:	e0bfff17 	ldw	r2,-4(fp)
}
  80ff38:	e037883a 	mov	sp,fp
  80ff3c:	dfc00117 	ldw	ra,4(sp)
  80ff40:	df000017 	ldw	fp,0(sp)
  80ff44:	dec00204 	addi	sp,sp,8
  80ff48:	f800283a 	ret

0080ff4c <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
  80ff4c:	defffe04 	addi	sp,sp,-8
  80ff50:	df000115 	stw	fp,4(sp)
  80ff54:	df000104 	addi	fp,sp,4
  80ff58:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
  80ff5c:	e0bfff17 	ldw	r2,-4(fp)
  80ff60:	10800a17 	ldw	r2,40(r2)
  80ff64:	1007883a 	mov	r3,r2
  80ff68:	00800044 	movi	r2,1
  80ff6c:	18800025 	stbio	r2,0(r3)
	return 0;
  80ff70:	0005883a 	mov	r2,zero
}
  80ff74:	e037883a 	mov	sp,fp
  80ff78:	df000017 	ldw	fp,0(sp)
  80ff7c:	dec00104 	addi	sp,sp,4
  80ff80:	f800283a 	ret

0080ff84 <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
  80ff84:	defffe04 	addi	sp,sp,-8
  80ff88:	df000115 	stw	fp,4(sp)
  80ff8c:	df000104 	addi	fp,sp,4
  80ff90:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
  80ff94:	e0bfff17 	ldw	r2,-4(fp)
  80ff98:	10800a17 	ldw	r2,40(r2)
  80ff9c:	1007883a 	mov	r3,r2
  80ffa0:	00800084 	movi	r2,2
  80ffa4:	18800025 	stbio	r2,0(r3)
	return 0;
  80ffa8:	0005883a 	mov	r2,zero
}
  80ffac:	e037883a 	mov	sp,fp
  80ffb0:	df000017 	ldw	fp,0(sp)
  80ffb4:	dec00104 	addi	sp,sp,4
  80ffb8:	f800283a 	ret

0080ffbc <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
  80ffbc:	defffe04 	addi	sp,sp,-8
  80ffc0:	df000115 	stw	fp,4(sp)
  80ffc4:	df000104 	addi	fp,sp,4
  80ffc8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
  80ffcc:	e0bfff17 	ldw	r2,-4(fp)
  80ffd0:	10800a17 	ldw	r2,40(r2)
  80ffd4:	10000025 	stbio	zero,0(r2)
	return 0;
  80ffd8:	0005883a 	mov	r2,zero
}
  80ffdc:	e037883a 	mov	sp,fp
  80ffe0:	df000017 	ldw	fp,0(sp)
  80ffe4:	dec00104 	addi	sp,sp,4
  80ffe8:	f800283a 	ret

0080ffec <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
  80ffec:	defffd04 	addi	sp,sp,-12
  80fff0:	df000215 	stw	fp,8(sp)
  80fff4:	df000204 	addi	fp,sp,8
  80fff8:	e13ffe15 	stw	r4,-8(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
  80fffc:	e0bffe17 	ldw	r2,-8(fp)
  810000:	10800a17 	ldw	r2,40(r2)
  810004:	10800104 	addi	r2,r2,4
  810008:	10800037 	ldwio	r2,0(r2)
  81000c:	1080008c 	andi	r2,r2,2
  810010:	1005d07a 	srai	r2,r2,1
  810014:	1005003a 	cmpeq	r2,r2,zero
  810018:	1000071e 	bne	r2,zero,810038 <alt_up_av_config_read_acknowledge+0x4c>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
  81001c:	e0bffe17 	ldw	r2,-8(fp)
  810020:	10800a17 	ldw	r2,40(r2)
  810024:	10800104 	addi	r2,r2,4
  810028:	10800037 	ldwio	r2,0(r2)
  81002c:	1080004c 	andi	r2,r2,1
  810030:	e0bfff15 	stw	r2,-4(fp)
  810034:	00000206 	br	810040 <alt_up_av_config_read_acknowledge+0x54>
	return -1;
  810038:	00bfffc4 	movi	r2,-1
  81003c:	e0bfff15 	stw	r2,-4(fp)
  810040:	e0bfff17 	ldw	r2,-4(fp)
}
  810044:	e037883a 	mov	sp,fp
  810048:	df000017 	ldw	fp,0(sp)
  81004c:	dec00104 	addi	sp,sp,4
  810050:	f800283a 	ret

00810054 <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
  810054:	defffe04 	addi	sp,sp,-8
  810058:	df000115 	stw	fp,4(sp)
  81005c:	df000104 	addi	fp,sp,4
  810060:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
  810064:	e0bfff17 	ldw	r2,-4(fp)
  810068:	10800a17 	ldw	r2,40(r2)
  81006c:	10800104 	addi	r2,r2,4
  810070:	10800037 	ldwio	r2,0(r2)
  810074:	1080008c 	andi	r2,r2,2
  810078:	1005d07a 	srai	r2,r2,1
}
  81007c:	e037883a 	mov	sp,fp
  810080:	df000017 	ldw	fp,0(sp)
  810084:	dec00104 	addi	sp,sp,4
  810088:	f800283a 	ret

0081008c <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  81008c:	defff904 	addi	sp,sp,-28
  810090:	dfc00615 	stw	ra,24(sp)
  810094:	df000515 	stw	fp,20(sp)
  810098:	df000504 	addi	fp,sp,20
  81009c:	e13ffc15 	stw	r4,-16(fp)
  8100a0:	e17ffd15 	stw	r5,-12(fp)
  8100a4:	e1bffe15 	stw	r6,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  8100a8:	e0bffc17 	ldw	r2,-16(fp)
  8100ac:	10800b17 	ldw	r2,44(r2)
  8100b0:	10800060 	cmpeqi	r2,r2,1
  8100b4:	10000f1e 	bne	r2,zero,8100f4 <alt_up_av_config_write_audio_cfg_register+0x68>
  8100b8:	e0bffc17 	ldw	r2,-16(fp)
  8100bc:	10800b17 	ldw	r2,44(r2)
  8100c0:	108000a0 	cmpeqi	r2,r2,2
  8100c4:	10000b1e 	bne	r2,zero,8100f4 <alt_up_av_config_write_audio_cfg_register+0x68>
  8100c8:	e0bffc17 	ldw	r2,-16(fp)
  8100cc:	10800b17 	ldw	r2,44(r2)
  8100d0:	108000e0 	cmpeqi	r2,r2,3
  8100d4:	1000071e 	bne	r2,zero,8100f4 <alt_up_av_config_write_audio_cfg_register+0x68>
  8100d8:	e0bffc17 	ldw	r2,-16(fp)
  8100dc:	10800b17 	ldw	r2,44(r2)
  8100e0:	10800120 	cmpeqi	r2,r2,4
  8100e4:	1000031e 	bne	r2,zero,8100f4 <alt_up_av_config_write_audio_cfg_register+0x68>
		return -EINVAL;
  8100e8:	00bffa84 	movi	r2,-22
  8100ec:	e0bfff15 	stw	r2,-4(fp)
  8100f0:	00000b06 	br	810120 <alt_up_av_config_write_audio_cfg_register+0x94>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
  8100f4:	e03ffb15 	stw	zero,-20(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
  8100f8:	e0bffc17 	ldw	r2,-16(fp)
  8100fc:	10800a17 	ldw	r2,40(r2)
  810100:	10800084 	addi	r2,r2,2
  810104:	e0fffb17 	ldw	r3,-20(fp)
  810108:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  81010c:	e13ffc17 	ldw	r4,-16(fp)
  810110:	e17ffd17 	ldw	r5,-12(fp)
  810114:	e1bffe17 	ldw	r6,-8(fp)
  810118:	080fe5c0 	call	80fe5c <alt_up_av_config_write_data>
  81011c:	e0bfff15 	stw	r2,-4(fp)
  810120:	e0bfff17 	ldw	r2,-4(fp)
}
  810124:	e037883a 	mov	sp,fp
  810128:	dfc00117 	ldw	ra,4(sp)
  81012c:	df000017 	ldw	fp,0(sp)
  810130:	dec00204 	addi	sp,sp,8
  810134:	f800283a 	ret

00810138 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
  810138:	defff904 	addi	sp,sp,-28
  81013c:	dfc00615 	stw	ra,24(sp)
  810140:	df000515 	stw	fp,20(sp)
  810144:	df000504 	addi	fp,sp,20
  810148:	e13ffb15 	stw	r4,-20(fp)
  81014c:	e17ffc15 	stw	r5,-16(fp)
  810150:	e1bffd15 	stw	r6,-12(fp)
  810154:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  810158:	e0bffb17 	ldw	r2,-20(fp)
  81015c:	10800b17 	ldw	r2,44(r2)
  810160:	108000a0 	cmpeqi	r2,r2,2
  810164:	10000b1e 	bne	r2,zero,810194 <alt_up_av_config_read_video_cfg_register+0x5c>
  810168:	e0bffb17 	ldw	r2,-20(fp)
  81016c:	10800b17 	ldw	r2,44(r2)
  810170:	108000e0 	cmpeqi	r2,r2,3
  810174:	1000071e 	bne	r2,zero,810194 <alt_up_av_config_read_video_cfg_register+0x5c>
  810178:	e0bffb17 	ldw	r2,-20(fp)
  81017c:	10800b17 	ldw	r2,44(r2)
  810180:	10800120 	cmpeqi	r2,r2,4
  810184:	1000031e 	bne	r2,zero,810194 <alt_up_av_config_read_video_cfg_register+0x5c>
		return -EINVAL;
  810188:	00bffa84 	movi	r2,-22
  81018c:	e0bfff15 	stw	r2,-4(fp)
  810190:	00002106 	br	810218 <alt_up_av_config_read_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  810194:	e0bffb17 	ldw	r2,-20(fp)
  810198:	10800b17 	ldw	r2,44(r2)
  81019c:	108000a0 	cmpeqi	r2,r2,2
  8101a0:	1000041e 	bne	r2,zero,8101b4 <alt_up_av_config_read_video_cfg_register+0x7c>
  8101a4:	e0bffb17 	ldw	r2,-20(fp)
  8101a8:	10800b17 	ldw	r2,44(r2)
  8101ac:	10800118 	cmpnei	r2,r2,4
  8101b0:	1000061e 	bne	r2,zero,8101cc <alt_up_av_config_read_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  8101b4:	e0bffe17 	ldw	r2,-8(fp)
  8101b8:	10800060 	cmpeqi	r2,r2,1
  8101bc:	10000c1e 	bne	r2,zero,8101f0 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  8101c0:	00bffa84 	movi	r2,-22
  8101c4:	e0bfff15 	stw	r2,-4(fp)
  8101c8:	00001306 	br	810218 <alt_up_av_config_read_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  8101cc:	e0bffe17 	ldw	r2,-8(fp)
  8101d0:	10800060 	cmpeqi	r2,r2,1
  8101d4:	1000061e 	bne	r2,zero,8101f0 <alt_up_av_config_read_video_cfg_register+0xb8>
  8101d8:	e0bffe17 	ldw	r2,-8(fp)
  8101dc:	108000a0 	cmpeqi	r2,r2,2
  8101e0:	1000031e 	bne	r2,zero,8101f0 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  8101e4:	00bffa84 	movi	r2,-22
  8101e8:	e0bfff15 	stw	r2,-4(fp)
  8101ec:	00000a06 	br	810218 <alt_up_av_config_read_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  8101f0:	e0bffb17 	ldw	r2,-20(fp)
  8101f4:	10800a17 	ldw	r2,40(r2)
  8101f8:	10800084 	addi	r2,r2,2
  8101fc:	e0fffe17 	ldw	r3,-8(fp)
  810200:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_read_data(av_config, addr, data);
  810204:	e13ffb17 	ldw	r4,-20(fp)
  810208:	e17ffc17 	ldw	r5,-16(fp)
  81020c:	e1bffd17 	ldw	r6,-12(fp)
  810210:	080fec00 	call	80fec0 <alt_up_av_config_read_data>
  810214:	e0bfff15 	stw	r2,-4(fp)
  810218:	e0bfff17 	ldw	r2,-4(fp)
}
  81021c:	e037883a 	mov	sp,fp
  810220:	dfc00117 	ldw	ra,4(sp)
  810224:	df000017 	ldw	fp,0(sp)
  810228:	dec00204 	addi	sp,sp,8
  81022c:	f800283a 	ret

00810230 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
  810230:	defff904 	addi	sp,sp,-28
  810234:	dfc00615 	stw	ra,24(sp)
  810238:	df000515 	stw	fp,20(sp)
  81023c:	df000504 	addi	fp,sp,20
  810240:	e13ffb15 	stw	r4,-20(fp)
  810244:	e17ffc15 	stw	r5,-16(fp)
  810248:	e1bffd15 	stw	r6,-12(fp)
  81024c:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  810250:	e0bffb17 	ldw	r2,-20(fp)
  810254:	10800b17 	ldw	r2,44(r2)
  810258:	108000a0 	cmpeqi	r2,r2,2
  81025c:	10000b1e 	bne	r2,zero,81028c <alt_up_av_config_write_video_cfg_register+0x5c>
  810260:	e0bffb17 	ldw	r2,-20(fp)
  810264:	10800b17 	ldw	r2,44(r2)
  810268:	108000e0 	cmpeqi	r2,r2,3
  81026c:	1000071e 	bne	r2,zero,81028c <alt_up_av_config_write_video_cfg_register+0x5c>
  810270:	e0bffb17 	ldw	r2,-20(fp)
  810274:	10800b17 	ldw	r2,44(r2)
  810278:	10800120 	cmpeqi	r2,r2,4
  81027c:	1000031e 	bne	r2,zero,81028c <alt_up_av_config_write_video_cfg_register+0x5c>
		return -EINVAL;
  810280:	00bffa84 	movi	r2,-22
  810284:	e0bfff15 	stw	r2,-4(fp)
  810288:	00002106 	br	810310 <alt_up_av_config_write_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  81028c:	e0bffb17 	ldw	r2,-20(fp)
  810290:	10800b17 	ldw	r2,44(r2)
  810294:	108000a0 	cmpeqi	r2,r2,2
  810298:	1000041e 	bne	r2,zero,8102ac <alt_up_av_config_write_video_cfg_register+0x7c>
  81029c:	e0bffb17 	ldw	r2,-20(fp)
  8102a0:	10800b17 	ldw	r2,44(r2)
  8102a4:	10800118 	cmpnei	r2,r2,4
  8102a8:	1000061e 	bne	r2,zero,8102c4 <alt_up_av_config_write_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  8102ac:	e0bffe17 	ldw	r2,-8(fp)
  8102b0:	10800060 	cmpeqi	r2,r2,1
  8102b4:	10000c1e 	bne	r2,zero,8102e8 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  8102b8:	00bffa84 	movi	r2,-22
  8102bc:	e0bfff15 	stw	r2,-4(fp)
  8102c0:	00001306 	br	810310 <alt_up_av_config_write_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  8102c4:	e0bffe17 	ldw	r2,-8(fp)
  8102c8:	10800060 	cmpeqi	r2,r2,1
  8102cc:	1000061e 	bne	r2,zero,8102e8 <alt_up_av_config_write_video_cfg_register+0xb8>
  8102d0:	e0bffe17 	ldw	r2,-8(fp)
  8102d4:	108000a0 	cmpeqi	r2,r2,2
  8102d8:	1000031e 	bne	r2,zero,8102e8 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  8102dc:	00bffa84 	movi	r2,-22
  8102e0:	e0bfff15 	stw	r2,-4(fp)
  8102e4:	00000a06 	br	810310 <alt_up_av_config_write_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  8102e8:	e0bffb17 	ldw	r2,-20(fp)
  8102ec:	10800a17 	ldw	r2,40(r2)
  8102f0:	10800084 	addi	r2,r2,2
  8102f4:	e0fffe17 	ldw	r3,-8(fp)
  8102f8:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  8102fc:	e13ffb17 	ldw	r4,-20(fp)
  810300:	e17ffc17 	ldw	r5,-16(fp)
  810304:	e1bffd17 	ldw	r6,-12(fp)
  810308:	080fe5c0 	call	80fe5c <alt_up_av_config_write_data>
  81030c:	e0bfff15 	stw	r2,-4(fp)
  810310:	e0bfff17 	ldw	r2,-4(fp)
}
  810314:	e037883a 	mov	sp,fp
  810318:	dfc00117 	ldw	ra,4(sp)
  81031c:	df000017 	ldw	fp,0(sp)
  810320:	dec00204 	addi	sp,sp,8
  810324:	f800283a 	ret

00810328 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  810328:	defffa04 	addi	sp,sp,-24
  81032c:	dfc00515 	stw	ra,20(sp)
  810330:	df000415 	stw	fp,16(sp)
  810334:	df000404 	addi	fp,sp,16
  810338:	e13ffc15 	stw	r4,-16(fp)
  81033c:	e17ffd15 	stw	r5,-12(fp)
  810340:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  810344:	e0bffc17 	ldw	r2,-16(fp)
  810348:	10800b17 	ldw	r2,44(r2)
  81034c:	10800220 	cmpeqi	r2,r2,8
  810350:	1000031e 	bne	r2,zero,810360 <alt_up_av_config_read_DC2_cfg_register+0x38>
		return -EINVAL;
  810354:	00bffa84 	movi	r2,-22
  810358:	e0bfff15 	stw	r2,-4(fp)
  81035c:	00000506 	br	810374 <alt_up_av_config_read_DC2_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  810360:	e13ffc17 	ldw	r4,-16(fp)
  810364:	e17ffd17 	ldw	r5,-12(fp)
  810368:	e1bffe17 	ldw	r6,-8(fp)
  81036c:	080fec00 	call	80fec0 <alt_up_av_config_read_data>
  810370:	e0bfff15 	stw	r2,-4(fp)
  810374:	e0bfff17 	ldw	r2,-4(fp)
}
  810378:	e037883a 	mov	sp,fp
  81037c:	dfc00117 	ldw	ra,4(sp)
  810380:	df000017 	ldw	fp,0(sp)
  810384:	dec00204 	addi	sp,sp,8
  810388:	f800283a 	ret

0081038c <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  81038c:	defffa04 	addi	sp,sp,-24
  810390:	dfc00515 	stw	ra,20(sp)
  810394:	df000415 	stw	fp,16(sp)
  810398:	df000404 	addi	fp,sp,16
  81039c:	e13ffc15 	stw	r4,-16(fp)
  8103a0:	e17ffd15 	stw	r5,-12(fp)
  8103a4:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  8103a8:	e0bffc17 	ldw	r2,-16(fp)
  8103ac:	10800b17 	ldw	r2,44(r2)
  8103b0:	10800220 	cmpeqi	r2,r2,8
  8103b4:	1000031e 	bne	r2,zero,8103c4 <alt_up_av_config_write_DC2_cfg_register+0x38>
		return -EINVAL;
  8103b8:	00bffa84 	movi	r2,-22
  8103bc:	e0bfff15 	stw	r2,-4(fp)
  8103c0:	00000506 	br	8103d8 <alt_up_av_config_write_DC2_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  8103c4:	e13ffc17 	ldw	r4,-16(fp)
  8103c8:	e17ffd17 	ldw	r5,-12(fp)
  8103cc:	e1bffe17 	ldw	r6,-8(fp)
  8103d0:	080fe5c0 	call	80fe5c <alt_up_av_config_write_data>
  8103d4:	e0bfff15 	stw	r2,-4(fp)
  8103d8:	e0bfff17 	ldw	r2,-4(fp)
}
  8103dc:	e037883a 	mov	sp,fp
  8103e0:	dfc00117 	ldw	ra,4(sp)
  8103e4:	df000017 	ldw	fp,0(sp)
  8103e8:	dec00204 	addi	sp,sp,8
  8103ec:	f800283a 	ret

008103f0 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  8103f0:	defffa04 	addi	sp,sp,-24
  8103f4:	dfc00515 	stw	ra,20(sp)
  8103f8:	df000415 	stw	fp,16(sp)
  8103fc:	df000404 	addi	fp,sp,16
  810400:	e13ffc15 	stw	r4,-16(fp)
  810404:	e17ffd15 	stw	r5,-12(fp)
  810408:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  81040c:	e0bffc17 	ldw	r2,-16(fp)
  810410:	10800b17 	ldw	r2,44(r2)
  810414:	10800260 	cmpeqi	r2,r2,9
  810418:	1000031e 	bne	r2,zero,810428 <alt_up_av_config_read_D5M_cfg_register+0x38>
		return -EINVAL;
  81041c:	00bffa84 	movi	r2,-22
  810420:	e0bfff15 	stw	r2,-4(fp)
  810424:	00000506 	br	81043c <alt_up_av_config_read_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_read_data(av_config, addr, data);
  810428:	e13ffc17 	ldw	r4,-16(fp)
  81042c:	e17ffd17 	ldw	r5,-12(fp)
  810430:	e1bffe17 	ldw	r6,-8(fp)
  810434:	080fec00 	call	80fec0 <alt_up_av_config_read_data>
  810438:	e0bfff15 	stw	r2,-4(fp)
  81043c:	e0bfff17 	ldw	r2,-4(fp)
}
  810440:	e037883a 	mov	sp,fp
  810444:	dfc00117 	ldw	ra,4(sp)
  810448:	df000017 	ldw	fp,0(sp)
  81044c:	dec00204 	addi	sp,sp,8
  810450:	f800283a 	ret

00810454 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  810454:	defffa04 	addi	sp,sp,-24
  810458:	dfc00515 	stw	ra,20(sp)
  81045c:	df000415 	stw	fp,16(sp)
  810460:	df000404 	addi	fp,sp,16
  810464:	e13ffc15 	stw	r4,-16(fp)
  810468:	e17ffd15 	stw	r5,-12(fp)
  81046c:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  810470:	e0bffc17 	ldw	r2,-16(fp)
  810474:	10800b17 	ldw	r2,44(r2)
  810478:	10800260 	cmpeqi	r2,r2,9
  81047c:	1000031e 	bne	r2,zero,81048c <alt_up_av_config_write_D5M_cfg_register+0x38>
		return -EINVAL;
  810480:	00bffa84 	movi	r2,-22
  810484:	e0bfff15 	stw	r2,-4(fp)
  810488:	00000506 	br	8104a0 <alt_up_av_config_write_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_write_data(av_config, addr, data);
  81048c:	e13ffc17 	ldw	r4,-16(fp)
  810490:	e17ffd17 	ldw	r5,-12(fp)
  810494:	e1bffe17 	ldw	r6,-8(fp)
  810498:	080fe5c0 	call	80fe5c <alt_up_av_config_write_data>
  81049c:	e0bfff15 	stw	r2,-4(fp)
  8104a0:	e0bfff17 	ldw	r2,-4(fp)
}
  8104a4:	e037883a 	mov	sp,fp
  8104a8:	dfc00117 	ldw	ra,4(sp)
  8104ac:	df000017 	ldw	fp,0(sp)
  8104b0:	dec00204 	addi	sp,sp,8
  8104b4:	f800283a 	ret

008104b8 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  8104b8:	defffa04 	addi	sp,sp,-24
  8104bc:	dfc00515 	stw	ra,20(sp)
  8104c0:	df000415 	stw	fp,16(sp)
  8104c4:	df000404 	addi	fp,sp,16
  8104c8:	e13ffc15 	stw	r4,-16(fp)
  8104cc:	e17ffd15 	stw	r5,-12(fp)
  8104d0:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  8104d4:	e0bffc17 	ldw	r2,-16(fp)
  8104d8:	10800b17 	ldw	r2,44(r2)
  8104dc:	108002a0 	cmpeqi	r2,r2,10
  8104e0:	1000031e 	bne	r2,zero,8104f0 <alt_up_av_config_read_LTM_cfg_register+0x38>
		return -EINVAL;
  8104e4:	00bffa84 	movi	r2,-22
  8104e8:	e0bfff15 	stw	r2,-4(fp)
  8104ec:	00000506 	br	810504 <alt_up_av_config_read_LTM_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  8104f0:	e13ffc17 	ldw	r4,-16(fp)
  8104f4:	e17ffd17 	ldw	r5,-12(fp)
  8104f8:	e1bffe17 	ldw	r6,-8(fp)
  8104fc:	080fec00 	call	80fec0 <alt_up_av_config_read_data>
  810500:	e0bfff15 	stw	r2,-4(fp)
  810504:	e0bfff17 	ldw	r2,-4(fp)
}
  810508:	e037883a 	mov	sp,fp
  81050c:	dfc00117 	ldw	ra,4(sp)
  810510:	df000017 	ldw	fp,0(sp)
  810514:	dec00204 	addi	sp,sp,8
  810518:	f800283a 	ret

0081051c <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  81051c:	defffa04 	addi	sp,sp,-24
  810520:	dfc00515 	stw	ra,20(sp)
  810524:	df000415 	stw	fp,16(sp)
  810528:	df000404 	addi	fp,sp,16
  81052c:	e13ffc15 	stw	r4,-16(fp)
  810530:	e17ffd15 	stw	r5,-12(fp)
  810534:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  810538:	e0bffc17 	ldw	r2,-16(fp)
  81053c:	10800b17 	ldw	r2,44(r2)
  810540:	108002a0 	cmpeqi	r2,r2,10
  810544:	1000031e 	bne	r2,zero,810554 <alt_up_av_config_write_LTM_cfg_register+0x38>
		return -EINVAL;
  810548:	00bffa84 	movi	r2,-22
  81054c:	e0bfff15 	stw	r2,-4(fp)
  810550:	00000506 	br	810568 <alt_up_av_config_write_LTM_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  810554:	e13ffc17 	ldw	r4,-16(fp)
  810558:	e17ffd17 	ldw	r5,-12(fp)
  81055c:	e1bffe17 	ldw	r6,-8(fp)
  810560:	080fe5c0 	call	80fe5c <alt_up_av_config_write_data>
  810564:	e0bfff15 	stw	r2,-4(fp)
  810568:	e0bfff17 	ldw	r2,-4(fp)
}
  81056c:	e037883a 	mov	sp,fp
  810570:	dfc00117 	ldw	ra,4(sp)
  810574:	df000017 	ldw	fp,0(sp)
  810578:	dec00204 	addi	sp,sp,8
  81057c:	f800283a 	ret

00810580 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  810580:	defffc04 	addi	sp,sp,-16
  810584:	df000315 	stw	fp,12(sp)
  810588:	df000304 	addi	fp,sp,12
  81058c:	e13ffe15 	stw	r4,-8(fp)
  810590:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  810594:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  810598:	e0bfff17 	ldw	r2,-4(fp)
  81059c:	1004c03a 	cmpne	r2,r2,zero
  8105a0:	1000061e 	bne	r2,zero,8105bc <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  8105a4:	e0bffe17 	ldw	r2,-8(fp)
  8105a8:	1007883a 	mov	r3,r2
  8105ac:	e0bffd03 	ldbu	r2,-12(fp)
  8105b0:	10c4b03a 	or	r2,r2,r3
  8105b4:	e0bffd05 	stb	r2,-12(fp)
  8105b8:	00000806 	br	8105dc <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  8105bc:	e0bffe17 	ldw	r2,-8(fp)
  8105c0:	1007883a 	mov	r3,r2
  8105c4:	e0bffd03 	ldbu	r2,-12(fp)
  8105c8:	10c4b03a 	or	r2,r2,r3
  8105cc:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  8105d0:	e0bffd03 	ldbu	r2,-12(fp)
  8105d4:	10801014 	ori	r2,r2,64
  8105d8:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  8105dc:	e0fffd03 	ldbu	r3,-12(fp)
  8105e0:	00bfe004 	movi	r2,-128
  8105e4:	1884b03a 	or	r2,r3,r2
  8105e8:	10803fcc 	andi	r2,r2,255
}
  8105ec:	e037883a 	mov	sp,fp
  8105f0:	df000017 	ldw	fp,0(sp)
  8105f4:	dec00104 	addi	sp,sp,4
  8105f8:	f800283a 	ret

008105fc <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  8105fc:	defffd04 	addi	sp,sp,-12
  810600:	df000215 	stw	fp,8(sp)
  810604:	df000204 	addi	fp,sp,8
  810608:	e13ffe15 	stw	r4,-8(fp)
  81060c:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  810610:	e0bffe17 	ldw	r2,-8(fp)
  810614:	10800a17 	ldw	r2,40(r2)
  810618:	e0ffff03 	ldbu	r3,-4(fp)
  81061c:	10c00025 	stbio	r3,0(r2)
}
  810620:	e037883a 	mov	sp,fp
  810624:	df000017 	ldw	fp,0(sp)
  810628:	dec00104 	addi	sp,sp,4
  81062c:	f800283a 	ret

00810630 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  810630:	defffe04 	addi	sp,sp,-8
  810634:	df000115 	stw	fp,4(sp)
  810638:	df000104 	addi	fp,sp,4
  81063c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  810640:	e0bfff17 	ldw	r2,-4(fp)
  810644:	10800a17 	ldw	r2,40(r2)
  810648:	1007883a 	mov	r3,r2
  81064c:	00800044 	movi	r2,1
  810650:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  810654:	e037883a 	mov	sp,fp
  810658:	df000017 	ldw	fp,0(sp)
  81065c:	dec00104 	addi	sp,sp,4
  810660:	f800283a 	ret

00810664 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  810664:	defffc04 	addi	sp,sp,-16
  810668:	dfc00315 	stw	ra,12(sp)
  81066c:	df000215 	stw	fp,8(sp)
  810670:	df000204 	addi	fp,sp,8
  810674:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  810678:	e13fff17 	ldw	r4,-4(fp)
  81067c:	014020b4 	movhi	r5,130
  810680:	29681f04 	addi	r5,r5,-24452
  810684:	0816da00 	call	816da0 <alt_find_dev>
  810688:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  81068c:	e0bffe17 	ldw	r2,-8(fp)
}
  810690:	e037883a 	mov	sp,fp
  810694:	dfc00117 	ldw	ra,4(sp)
  810698:	df000017 	ldw	fp,0(sp)
  81069c:	dec00204 	addi	sp,sp,8
  8106a0:	f800283a 	ret

008106a4 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  8106a4:	defffb04 	addi	sp,sp,-20
  8106a8:	df000415 	stw	fp,16(sp)
  8106ac:	df000404 	addi	fp,sp,16
  8106b0:	e13ffd15 	stw	r4,-12(fp)
  8106b4:	e17ffe15 	stw	r5,-8(fp)
  8106b8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  8106bc:	e03ffc15 	stw	zero,-16(fp)
  8106c0:	00000f06 	br	810700 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  8106c4:	e0bffd17 	ldw	r2,-12(fp)
  8106c8:	10800a17 	ldw	r2,40(r2)
  8106cc:	11000044 	addi	r4,r2,1
  8106d0:	e0fffc17 	ldw	r3,-16(fp)
  8106d4:	e0bffe17 	ldw	r2,-8(fp)
  8106d8:	1885883a 	add	r2,r3,r2
  8106dc:	10800003 	ldbu	r2,0(r2)
  8106e0:	10c03fcc 	andi	r3,r2,255
  8106e4:	18c0201c 	xori	r3,r3,128
  8106e8:	18ffe004 	addi	r3,r3,-128
  8106ec:	2005883a 	mov	r2,r4
  8106f0:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  8106f4:	e0bffc17 	ldw	r2,-16(fp)
  8106f8:	10800044 	addi	r2,r2,1
  8106fc:	e0bffc15 	stw	r2,-16(fp)
  810700:	e0fffc17 	ldw	r3,-16(fp)
  810704:	e0bfff17 	ldw	r2,-4(fp)
  810708:	18bfee36 	bltu	r3,r2,8106c4 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  81070c:	e037883a 	mov	sp,fp
  810710:	df000017 	ldw	fp,0(sp)
  810714:	dec00104 	addi	sp,sp,4
  810718:	f800283a 	ret

0081071c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  81071c:	defffd04 	addi	sp,sp,-12
  810720:	df000215 	stw	fp,8(sp)
  810724:	df000204 	addi	fp,sp,8
  810728:	e13ffe15 	stw	r4,-8(fp)
  81072c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  810730:	00000d06 	br	810768 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  810734:	e0bffe17 	ldw	r2,-8(fp)
  810738:	10800a17 	ldw	r2,40(r2)
  81073c:	11000044 	addi	r4,r2,1
  810740:	e0bfff17 	ldw	r2,-4(fp)
  810744:	10800003 	ldbu	r2,0(r2)
  810748:	10c03fcc 	andi	r3,r2,255
  81074c:	18c0201c 	xori	r3,r3,128
  810750:	18ffe004 	addi	r3,r3,-128
  810754:	2005883a 	mov	r2,r4
  810758:	10c00025 	stbio	r3,0(r2)
		++ptr;
  81075c:	e0bfff17 	ldw	r2,-4(fp)
  810760:	10800044 	addi	r2,r2,1
  810764:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  810768:	e0bfff17 	ldw	r2,-4(fp)
  81076c:	10800003 	ldbu	r2,0(r2)
  810770:	10803fcc 	andi	r2,r2,255
  810774:	1080201c 	xori	r2,r2,128
  810778:	10bfe004 	addi	r2,r2,-128
  81077c:	1004c03a 	cmpne	r2,r2,zero
  810780:	103fec1e 	bne	r2,zero,810734 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  810784:	e037883a 	mov	sp,fp
  810788:	df000017 	ldw	fp,0(sp)
  81078c:	dec00104 	addi	sp,sp,4
  810790:	f800283a 	ret

00810794 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  810794:	defffb04 	addi	sp,sp,-20
  810798:	dfc00415 	stw	ra,16(sp)
  81079c:	df000315 	stw	fp,12(sp)
  8107a0:	df000304 	addi	fp,sp,12
  8107a4:	e13ffd15 	stw	r4,-12(fp)
  8107a8:	e17ffe15 	stw	r5,-8(fp)
  8107ac:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  8107b0:	e0bffd17 	ldw	r2,-12(fp)
  8107b4:	10800017 	ldw	r2,0(r2)
  8107b8:	1009883a 	mov	r4,r2
  8107bc:	e1bfff17 	ldw	r6,-4(fp)
  8107c0:	e17ffe17 	ldw	r5,-8(fp)
  8107c4:	08106a40 	call	8106a4 <alt_up_character_lcd_write>
	return 0;
  8107c8:	0005883a 	mov	r2,zero
}
  8107cc:	e037883a 	mov	sp,fp
  8107d0:	dfc00117 	ldw	ra,4(sp)
  8107d4:	df000017 	ldw	fp,0(sp)
  8107d8:	dec00204 	addi	sp,sp,8
  8107dc:	f800283a 	ret

008107e0 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  8107e0:	defff904 	addi	sp,sp,-28
  8107e4:	dfc00615 	stw	ra,24(sp)
  8107e8:	df000515 	stw	fp,20(sp)
  8107ec:	df000504 	addi	fp,sp,20
  8107f0:	e13ffc15 	stw	r4,-16(fp)
  8107f4:	e17ffd15 	stw	r5,-12(fp)
  8107f8:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  8107fc:	e0bffd17 	ldw	r2,-12(fp)
  810800:	10800a28 	cmpgeui	r2,r2,40
  810804:	1000031e 	bne	r2,zero,810814 <alt_up_character_lcd_set_cursor_pos+0x34>
  810808:	e0bffe17 	ldw	r2,-8(fp)
  81080c:	108000b0 	cmpltui	r2,r2,2
  810810:	1000031e 	bne	r2,zero,810820 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  810814:	00bfffc4 	movi	r2,-1
  810818:	e0bfff15 	stw	r2,-4(fp)
  81081c:	00000806 	br	810840 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  810820:	e13ffd17 	ldw	r4,-12(fp)
  810824:	e17ffe17 	ldw	r5,-8(fp)
  810828:	08105800 	call	810580 <get_DDRAM_addr>
  81082c:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  810830:	e17ffb03 	ldbu	r5,-20(fp)
  810834:	e13ffc17 	ldw	r4,-16(fp)
  810838:	08105fc0 	call	8105fc <alt_up_character_lcd_send_cmd>
	return 0;
  81083c:	e03fff15 	stw	zero,-4(fp)
  810840:	e0bfff17 	ldw	r2,-4(fp)
}
  810844:	e037883a 	mov	sp,fp
  810848:	dfc00117 	ldw	ra,4(sp)
  81084c:	df000017 	ldw	fp,0(sp)
  810850:	dec00204 	addi	sp,sp,8
  810854:	f800283a 	ret

00810858 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  810858:	defff904 	addi	sp,sp,-28
  81085c:	dfc00615 	stw	ra,24(sp)
  810860:	df000515 	stw	fp,20(sp)
  810864:	df000504 	addi	fp,sp,20
  810868:	e13ffc15 	stw	r4,-16(fp)
  81086c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  810870:	e0bffd17 	ldw	r2,-12(fp)
  810874:	1005003a 	cmpeq	r2,r2,zero
  810878:	10001e1e 	bne	r2,zero,8108f4 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  81087c:	e0bffd17 	ldw	r2,-12(fp)
  810880:	10800050 	cmplti	r2,r2,1
  810884:	1000031e 	bne	r2,zero,810894 <alt_up_character_lcd_shift_cursor+0x3c>
  810888:	00800504 	movi	r2,20
  81088c:	e0bfff05 	stb	r2,-4(fp)
  810890:	00000206 	br	81089c <alt_up_character_lcd_shift_cursor+0x44>
  810894:	00c00404 	movi	r3,16
  810898:	e0ffff05 	stb	r3,-4(fp)
  81089c:	e0bfff03 	ldbu	r2,-4(fp)
  8108a0:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  8108a4:	e0fffd17 	ldw	r3,-12(fp)
  8108a8:	e0fffe15 	stw	r3,-8(fp)
  8108ac:	e0fffe17 	ldw	r3,-8(fp)
  8108b0:	1804403a 	cmpge	r2,r3,zero
  8108b4:	1000031e 	bne	r2,zero,8108c4 <alt_up_character_lcd_shift_cursor+0x6c>
  8108b8:	e0bffe17 	ldw	r2,-8(fp)
  8108bc:	0085c83a 	sub	r2,zero,r2
  8108c0:	e0bffe15 	stw	r2,-8(fp)
  8108c4:	e0fffe17 	ldw	r3,-8(fp)
  8108c8:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  8108cc:	00000306 	br	8108dc <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  8108d0:	e17ffb43 	ldbu	r5,-19(fp)
  8108d4:	e13ffc17 	ldw	r4,-16(fp)
  8108d8:	08105fc0 	call	8105fc <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  8108dc:	e0bffb03 	ldbu	r2,-20(fp)
  8108e0:	10bfffc4 	addi	r2,r2,-1
  8108e4:	e0bffb05 	stb	r2,-20(fp)
  8108e8:	e0bffb03 	ldbu	r2,-20(fp)
  8108ec:	10803fd8 	cmpnei	r2,r2,255
  8108f0:	103ff71e 	bne	r2,zero,8108d0 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  8108f4:	e037883a 	mov	sp,fp
  8108f8:	dfc00117 	ldw	ra,4(sp)
  8108fc:	df000017 	ldw	fp,0(sp)
  810900:	dec00204 	addi	sp,sp,8
  810904:	f800283a 	ret

00810908 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  810908:	defff904 	addi	sp,sp,-28
  81090c:	dfc00615 	stw	ra,24(sp)
  810910:	df000515 	stw	fp,20(sp)
  810914:	df000504 	addi	fp,sp,20
  810918:	e13ffc15 	stw	r4,-16(fp)
  81091c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  810920:	e0bffd17 	ldw	r2,-12(fp)
  810924:	1005003a 	cmpeq	r2,r2,zero
  810928:	10001e1e 	bne	r2,zero,8109a4 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  81092c:	e0bffd17 	ldw	r2,-12(fp)
  810930:	10800050 	cmplti	r2,r2,1
  810934:	1000031e 	bne	r2,zero,810944 <alt_up_character_lcd_shift_display+0x3c>
  810938:	00800704 	movi	r2,28
  81093c:	e0bfff05 	stb	r2,-4(fp)
  810940:	00000206 	br	81094c <alt_up_character_lcd_shift_display+0x44>
  810944:	00c00604 	movi	r3,24
  810948:	e0ffff05 	stb	r3,-4(fp)
  81094c:	e0bfff03 	ldbu	r2,-4(fp)
  810950:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  810954:	e0fffd17 	ldw	r3,-12(fp)
  810958:	e0fffe15 	stw	r3,-8(fp)
  81095c:	e0fffe17 	ldw	r3,-8(fp)
  810960:	1804403a 	cmpge	r2,r3,zero
  810964:	1000031e 	bne	r2,zero,810974 <alt_up_character_lcd_shift_display+0x6c>
  810968:	e0bffe17 	ldw	r2,-8(fp)
  81096c:	0085c83a 	sub	r2,zero,r2
  810970:	e0bffe15 	stw	r2,-8(fp)
  810974:	e0fffe17 	ldw	r3,-8(fp)
  810978:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  81097c:	00000306 	br	81098c <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  810980:	e17ffb43 	ldbu	r5,-19(fp)
  810984:	e13ffc17 	ldw	r4,-16(fp)
  810988:	08105fc0 	call	8105fc <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  81098c:	e0bffb03 	ldbu	r2,-20(fp)
  810990:	10bfffc4 	addi	r2,r2,-1
  810994:	e0bffb05 	stb	r2,-20(fp)
  810998:	e0bffb03 	ldbu	r2,-20(fp)
  81099c:	10803fd8 	cmpnei	r2,r2,255
  8109a0:	103ff71e 	bne	r2,zero,810980 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  8109a4:	e037883a 	mov	sp,fp
  8109a8:	dfc00117 	ldw	ra,4(sp)
  8109ac:	df000017 	ldw	fp,0(sp)
  8109b0:	dec00204 	addi	sp,sp,8
  8109b4:	f800283a 	ret

008109b8 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  8109b8:	defff904 	addi	sp,sp,-28
  8109bc:	dfc00615 	stw	ra,24(sp)
  8109c0:	df000515 	stw	fp,20(sp)
  8109c4:	df000504 	addi	fp,sp,20
  8109c8:	e13ffc15 	stw	r4,-16(fp)
  8109cc:	e17ffd15 	stw	r5,-12(fp)
  8109d0:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  8109d4:	e0bffd17 	ldw	r2,-12(fp)
  8109d8:	10800a28 	cmpgeui	r2,r2,40
  8109dc:	1000031e 	bne	r2,zero,8109ec <alt_up_character_lcd_erase_pos+0x34>
  8109e0:	e0bffe17 	ldw	r2,-8(fp)
  8109e4:	108000b0 	cmpltui	r2,r2,2
  8109e8:	1000031e 	bne	r2,zero,8109f8 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  8109ec:	00bfffc4 	movi	r2,-1
  8109f0:	e0bfff15 	stw	r2,-4(fp)
  8109f4:	00000e06 	br	810a30 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  8109f8:	e13ffd17 	ldw	r4,-12(fp)
  8109fc:	e17ffe17 	ldw	r5,-8(fp)
  810a00:	08105800 	call	810580 <get_DDRAM_addr>
  810a04:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  810a08:	e17ffb03 	ldbu	r5,-20(fp)
  810a0c:	e13ffc17 	ldw	r4,-16(fp)
  810a10:	08105fc0 	call	8105fc <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
  810a14:	e0bffc17 	ldw	r2,-16(fp)
  810a18:	10800a17 	ldw	r2,40(r2)
  810a1c:	10800044 	addi	r2,r2,1
  810a20:	1007883a 	mov	r3,r2
  810a24:	00800084 	movi	r2,2
  810a28:	18800025 	stbio	r2,0(r3)
	return 0;
  810a2c:	e03fff15 	stw	zero,-4(fp)
  810a30:	e0bfff17 	ldw	r2,-4(fp)
}
  810a34:	e037883a 	mov	sp,fp
  810a38:	dfc00117 	ldw	ra,4(sp)
  810a3c:	df000017 	ldw	fp,0(sp)
  810a40:	dec00204 	addi	sp,sp,8
  810a44:	f800283a 	ret

00810a48 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  810a48:	defffd04 	addi	sp,sp,-12
  810a4c:	dfc00215 	stw	ra,8(sp)
  810a50:	df000115 	stw	fp,4(sp)
  810a54:	df000104 	addi	fp,sp,4
  810a58:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  810a5c:	e13fff17 	ldw	r4,-4(fp)
  810a60:	01400304 	movi	r5,12
  810a64:	08105fc0 	call	8105fc <alt_up_character_lcd_send_cmd>
}
  810a68:	e037883a 	mov	sp,fp
  810a6c:	dfc00117 	ldw	ra,4(sp)
  810a70:	df000017 	ldw	fp,0(sp)
  810a74:	dec00204 	addi	sp,sp,8
  810a78:	f800283a 	ret

00810a7c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  810a7c:	defffd04 	addi	sp,sp,-12
  810a80:	dfc00215 	stw	ra,8(sp)
  810a84:	df000115 	stw	fp,4(sp)
  810a88:	df000104 	addi	fp,sp,4
  810a8c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  810a90:	e13fff17 	ldw	r4,-4(fp)
  810a94:	014003c4 	movi	r5,15
  810a98:	08105fc0 	call	8105fc <alt_up_character_lcd_send_cmd>
}
  810a9c:	e037883a 	mov	sp,fp
  810aa0:	dfc00117 	ldw	ra,4(sp)
  810aa4:	df000017 	ldw	fp,0(sp)
  810aa8:	dec00204 	addi	sp,sp,8
  810aac:	f800283a 	ret

00810ab0 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
  810ab0:	defffc04 	addi	sp,sp,-16
  810ab4:	dfc00315 	stw	ra,12(sp)
  810ab8:	df000215 	stw	fp,8(sp)
  810abc:	df000204 	addi	fp,sp,8
  810ac0:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
  810ac4:	e0bfff17 	ldw	r2,-4(fp)
  810ac8:	10800217 	ldw	r2,8(r2)
  810acc:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
  810ad0:	00000c06 	br	810b04 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
  810ad4:	e13ffe17 	ldw	r4,-8(fp)
  810ad8:	014020b4 	movhi	r5,130
  810adc:	29613104 	addi	r5,r5,-31548
  810ae0:	080c30c0 	call	80c30c <strcmp>
  810ae4:	1004c03a 	cmpne	r2,r2,zero
  810ae8:	1000031e 	bne	r2,zero,810af8 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
  810aec:	e0bffe17 	ldw	r2,-8(fp)
  810af0:	10000005 	stb	zero,0(r2)
			break;
  810af4:	00000a06 	br	810b20 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
  810af8:	e0bffe17 	ldw	r2,-8(fp)
  810afc:	10800044 	addi	r2,r2,1
  810b00:	e0bffe15 	stw	r2,-8(fp)
  810b04:	e0bffe17 	ldw	r2,-8(fp)
  810b08:	10800003 	ldbu	r2,0(r2)
  810b0c:	10803fcc 	andi	r2,r2,255
  810b10:	1080201c 	xori	r2,r2,128
  810b14:	10bfe004 	addi	r2,r2,-128
  810b18:	1004c03a 	cmpne	r2,r2,zero
  810b1c:	103fed1e 	bne	r2,zero,810ad4 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
  810b20:	e037883a 	mov	sp,fp
  810b24:	dfc00117 	ldw	ra,4(sp)
  810b28:	df000017 	ldw	fp,0(sp)
  810b2c:	dec00204 	addi	sp,sp,8
  810b30:	f800283a 	ret

00810b34 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
  810b34:	defffc04 	addi	sp,sp,-16
  810b38:	dfc00315 	stw	ra,12(sp)
  810b3c:	df000215 	stw	fp,8(sp)
  810b40:	df000204 	addi	fp,sp,8
  810b44:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
  810b48:	e13fff17 	ldw	r4,-4(fp)
  810b4c:	014020b4 	movhi	r5,130
  810b50:	29681f04 	addi	r5,r5,-24452
  810b54:	0816da00 	call	816da0 <alt_find_dev>
  810b58:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  810b5c:	e0bffe17 	ldw	r2,-8(fp)
}
  810b60:	e037883a 	mov	sp,fp
  810b64:	dfc00117 	ldw	ra,4(sp)
  810b68:	df000017 	ldw	fp,0(sp)
  810b6c:	dec00204 	addi	sp,sp,8
  810b70:	f800283a 	ret

00810b74 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
  810b74:	defff904 	addi	sp,sp,-28
  810b78:	df000615 	stw	fp,24(sp)
  810b7c:	df000604 	addi	fp,sp,24
  810b80:	e13ffb15 	stw	r4,-20(fp)
  810b84:	e1bffd15 	stw	r6,-12(fp)
  810b88:	e1fffe15 	stw	r7,-8(fp)
  810b8c:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  810b90:	e0bffb17 	ldw	r2,-20(fp)
  810b94:	10c00c17 	ldw	r3,48(r2)
  810b98:	e0bffd17 	ldw	r2,-12(fp)
  810b9c:	10c0042e 	bgeu	r2,r3,810bb0 <alt_up_char_buffer_draw+0x3c>
  810ba0:	e0bffb17 	ldw	r2,-20(fp)
  810ba4:	10c00d17 	ldw	r3,52(r2)
  810ba8:	e0bffe17 	ldw	r2,-8(fp)
  810bac:	10c00336 	bltu	r2,r3,810bbc <alt_up_char_buffer_draw+0x48>
		return -1;
  810bb0:	00bfffc4 	movi	r2,-1
  810bb4:	e0bfff15 	stw	r2,-4(fp)
  810bb8:	00001d06 	br	810c30 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
  810bbc:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
  810bc0:	e0bffb17 	ldw	r2,-20(fp)
  810bc4:	10c00f17 	ldw	r3,60(r2)
  810bc8:	e0bffd17 	ldw	r2,-12(fp)
  810bcc:	1886703a 	and	r3,r3,r2
  810bd0:	e0bffb17 	ldw	r2,-20(fp)
  810bd4:	10800e17 	ldw	r2,56(r2)
  810bd8:	1886983a 	sll	r3,r3,r2
  810bdc:	e0bffa17 	ldw	r2,-24(fp)
  810be0:	10c4b03a 	or	r2,r2,r3
  810be4:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
  810be8:	e0bffb17 	ldw	r2,-20(fp)
  810bec:	10c01117 	ldw	r3,68(r2)
  810bf0:	e0bffe17 	ldw	r2,-8(fp)
  810bf4:	1886703a 	and	r3,r3,r2
  810bf8:	e0bffb17 	ldw	r2,-20(fp)
  810bfc:	10801017 	ldw	r2,64(r2)
  810c00:	1886983a 	sll	r3,r3,r2
  810c04:	e0bffa17 	ldw	r2,-24(fp)
  810c08:	10c4b03a 	or	r2,r2,r3
  810c0c:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
  810c10:	e0bffb17 	ldw	r2,-20(fp)
  810c14:	10800b17 	ldw	r2,44(r2)
  810c18:	1007883a 	mov	r3,r2
  810c1c:	e0bffa17 	ldw	r2,-24(fp)
  810c20:	1885883a 	add	r2,r3,r2
  810c24:	e0fffc03 	ldbu	r3,-16(fp)
  810c28:	10c00025 	stbio	r3,0(r2)

	return 0;
  810c2c:	e03fff15 	stw	zero,-4(fp)
  810c30:	e0bfff17 	ldw	r2,-4(fp)
}
  810c34:	e037883a 	mov	sp,fp
  810c38:	df000017 	ldw	fp,0(sp)
  810c3c:	dec00104 	addi	sp,sp,4
  810c40:	f800283a 	ret

00810c44 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
  810c44:	defff904 	addi	sp,sp,-28
  810c48:	df000615 	stw	fp,24(sp)
  810c4c:	df000604 	addi	fp,sp,24
  810c50:	e13ffb15 	stw	r4,-20(fp)
  810c54:	e17ffc15 	stw	r5,-16(fp)
  810c58:	e1bffd15 	stw	r6,-12(fp)
  810c5c:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  810c60:	e0bffb17 	ldw	r2,-20(fp)
  810c64:	10c00c17 	ldw	r3,48(r2)
  810c68:	e0bffd17 	ldw	r2,-12(fp)
  810c6c:	10c0042e 	bgeu	r2,r3,810c80 <alt_up_char_buffer_string+0x3c>
  810c70:	e0bffb17 	ldw	r2,-20(fp)
  810c74:	10c00d17 	ldw	r3,52(r2)
  810c78:	e0bffe17 	ldw	r2,-8(fp)
  810c7c:	10c00336 	bltu	r2,r3,810c8c <alt_up_char_buffer_string+0x48>
		return -1;
  810c80:	00bfffc4 	movi	r2,-1
  810c84:	e0bfff15 	stw	r2,-4(fp)
  810c88:	00002e06 	br	810d44 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
  810c8c:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
  810c90:	e0bffb17 	ldw	r2,-20(fp)
  810c94:	10801017 	ldw	r2,64(r2)
  810c98:	1007883a 	mov	r3,r2
  810c9c:	e0bffe17 	ldw	r2,-8(fp)
  810ca0:	10c6983a 	sll	r3,r2,r3
  810ca4:	e0bffd17 	ldw	r2,-12(fp)
  810ca8:	1885883a 	add	r2,r3,r2
  810cac:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
  810cb0:	00001c06 	br	810d24 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
  810cb4:	e0bffb17 	ldw	r2,-20(fp)
  810cb8:	10800b17 	ldw	r2,44(r2)
  810cbc:	1007883a 	mov	r3,r2
  810cc0:	e0bffa17 	ldw	r2,-24(fp)
  810cc4:	1889883a 	add	r4,r3,r2
  810cc8:	e0bffc17 	ldw	r2,-16(fp)
  810ccc:	10800003 	ldbu	r2,0(r2)
  810cd0:	10c03fcc 	andi	r3,r2,255
  810cd4:	18c0201c 	xori	r3,r3,128
  810cd8:	18ffe004 	addi	r3,r3,-128
  810cdc:	2005883a 	mov	r2,r4
  810ce0:	10c00025 	stbio	r3,0(r2)
		++ptr;
  810ce4:	e0bffc17 	ldw	r2,-16(fp)
  810ce8:	10800044 	addi	r2,r2,1
  810cec:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
  810cf0:	e0bffd17 	ldw	r2,-12(fp)
  810cf4:	10800044 	addi	r2,r2,1
  810cf8:	e0bffd15 	stw	r2,-12(fp)
  810cfc:	e0bffb17 	ldw	r2,-20(fp)
  810d00:	10c00c17 	ldw	r3,48(r2)
  810d04:	e0bffd17 	ldw	r2,-12(fp)
  810d08:	10c00336 	bltu	r2,r3,810d18 <alt_up_char_buffer_string+0xd4>
			return -1;
  810d0c:	00bfffc4 	movi	r2,-1
  810d10:	e0bfff15 	stw	r2,-4(fp)
  810d14:	00000b06 	br	810d44 <alt_up_char_buffer_string+0x100>
		++offset;
  810d18:	e0bffa17 	ldw	r2,-24(fp)
  810d1c:	10800044 	addi	r2,r2,1
  810d20:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
  810d24:	e0bffc17 	ldw	r2,-16(fp)
  810d28:	10800003 	ldbu	r2,0(r2)
  810d2c:	10803fcc 	andi	r2,r2,255
  810d30:	1080201c 	xori	r2,r2,128
  810d34:	10bfe004 	addi	r2,r2,-128
  810d38:	1004c03a 	cmpne	r2,r2,zero
  810d3c:	103fdd1e 	bne	r2,zero,810cb4 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
  810d40:	e03fff15 	stw	zero,-4(fp)
  810d44:	e0bfff17 	ldw	r2,-4(fp)
}
  810d48:	e037883a 	mov	sp,fp
  810d4c:	df000017 	ldw	fp,0(sp)
  810d50:	dec00104 	addi	sp,sp,4
  810d54:	f800283a 	ret

00810d58 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
  810d58:	defffe04 	addi	sp,sp,-8
  810d5c:	df000115 	stw	fp,4(sp)
  810d60:	df000104 	addi	fp,sp,4
  810d64:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
  810d68:	e0bfff17 	ldw	r2,-4(fp)
  810d6c:	10800a17 	ldw	r2,40(r2)
  810d70:	10800084 	addi	r2,r2,2
  810d74:	1007883a 	mov	r3,r2
  810d78:	00800044 	movi	r2,1
  810d7c:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
  810d80:	e0bfff17 	ldw	r2,-4(fp)
  810d84:	10800a17 	ldw	r2,40(r2)
  810d88:	10800084 	addi	r2,r2,2
  810d8c:	10800023 	ldbuio	r2,0(r2)
  810d90:	1080004c 	andi	r2,r2,1
  810d94:	10803fcc 	andi	r2,r2,255
  810d98:	1004c03a 	cmpne	r2,r2,zero
  810d9c:	103ff81e 	bne	r2,zero,810d80 <alt_up_char_buffer_clear+0x28>
	return 0;
  810da0:	0005883a 	mov	r2,zero
}
  810da4:	e037883a 	mov	sp,fp
  810da8:	df000017 	ldw	fp,0(sp)
  810dac:	dec00104 	addi	sp,sp,4
  810db0:	f800283a 	ret

00810db4 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  810db4:	defffc04 	addi	sp,sp,-16
  810db8:	dfc00315 	stw	ra,12(sp)
  810dbc:	df000215 	stw	fp,8(sp)
  810dc0:	df000204 	addi	fp,sp,8
  810dc4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  810dc8:	e13fff17 	ldw	r4,-4(fp)
  810dcc:	014020b4 	movhi	r5,130
  810dd0:	29681f04 	addi	r5,r5,-24452
  810dd4:	0816da00 	call	816da0 <alt_find_dev>
  810dd8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  810ddc:	e0bffe17 	ldw	r2,-8(fp)
}
  810de0:	e037883a 	mov	sp,fp
  810de4:	dfc00117 	ldw	ra,4(sp)
  810de8:	df000017 	ldw	fp,0(sp)
  810dec:	dec00204 	addi	sp,sp,8
  810df0:	f800283a 	ret

00810df4 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  810df4:	defff904 	addi	sp,sp,-28
  810df8:	df000615 	stw	fp,24(sp)
  810dfc:	df000604 	addi	fp,sp,24
  810e00:	e13ffb15 	stw	r4,-20(fp)
  810e04:	e17ffc15 	stw	r5,-16(fp)
  810e08:	e1bffd15 	stw	r6,-12(fp)
  810e0c:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  810e10:	e0bffb17 	ldw	r2,-20(fp)
  810e14:	10c00f17 	ldw	r3,60(r2)
  810e18:	e0bffd17 	ldw	r2,-12(fp)
  810e1c:	10c0042e 	bgeu	r2,r3,810e30 <alt_up_pixel_buffer_dma_draw+0x3c>
  810e20:	e0bffb17 	ldw	r2,-20(fp)
  810e24:	10c01017 	ldw	r3,64(r2)
  810e28:	e0bffe17 	ldw	r2,-8(fp)
  810e2c:	10c00336 	bltu	r2,r3,810e3c <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
  810e30:	00bfffc4 	movi	r2,-1
  810e34:	e0bfff15 	stw	r2,-4(fp)
  810e38:	00005106 	br	810f80 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
  810e3c:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  810e40:	e0bffb17 	ldw	r2,-20(fp)
  810e44:	10800d17 	ldw	r2,52(r2)
  810e48:	1004c03a 	cmpne	r2,r2,zero
  810e4c:	1000151e 	bne	r2,zero,810ea4 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  810e50:	e0bffb17 	ldw	r2,-20(fp)
  810e54:	10c01217 	ldw	r3,72(r2)
  810e58:	e0bffd17 	ldw	r2,-12(fp)
  810e5c:	1886703a 	and	r3,r3,r2
  810e60:	e0bffb17 	ldw	r2,-20(fp)
  810e64:	10801117 	ldw	r2,68(r2)
  810e68:	1886983a 	sll	r3,r3,r2
  810e6c:	e0bffa17 	ldw	r2,-24(fp)
  810e70:	10c4b03a 	or	r2,r2,r3
  810e74:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  810e78:	e0bffb17 	ldw	r2,-20(fp)
  810e7c:	10c01417 	ldw	r3,80(r2)
  810e80:	e0bffe17 	ldw	r2,-8(fp)
  810e84:	1886703a 	and	r3,r3,r2
  810e88:	e0bffb17 	ldw	r2,-20(fp)
  810e8c:	10801317 	ldw	r2,76(r2)
  810e90:	1886983a 	sll	r3,r3,r2
  810e94:	e0bffa17 	ldw	r2,-24(fp)
  810e98:	10c4b03a 	or	r2,r2,r3
  810e9c:	e0bffa15 	stw	r2,-24(fp)
  810ea0:	00001706 	br	810f00 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  810ea4:	e0bffb17 	ldw	r2,-20(fp)
  810ea8:	10c01217 	ldw	r3,72(r2)
  810eac:	e0bffd17 	ldw	r2,-12(fp)
  810eb0:	1886703a 	and	r3,r3,r2
  810eb4:	e0bffb17 	ldw	r2,-20(fp)
  810eb8:	10801117 	ldw	r2,68(r2)
  810ebc:	1886983a 	sll	r3,r3,r2
  810ec0:	e0bffa17 	ldw	r2,-24(fp)
  810ec4:	10c5883a 	add	r2,r2,r3
  810ec8:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  810ecc:	e0bffb17 	ldw	r2,-20(fp)
  810ed0:	10c01417 	ldw	r3,80(r2)
  810ed4:	e0bffe17 	ldw	r2,-8(fp)
  810ed8:	1886703a 	and	r3,r3,r2
  810edc:	e0bffb17 	ldw	r2,-20(fp)
  810ee0:	10800f17 	ldw	r2,60(r2)
  810ee4:	1887383a 	mul	r3,r3,r2
  810ee8:	e0bffb17 	ldw	r2,-20(fp)
  810eec:	10801117 	ldw	r2,68(r2)
  810ef0:	1886983a 	sll	r3,r3,r2
  810ef4:	e0bffa17 	ldw	r2,-24(fp)
  810ef8:	10c5883a 	add	r2,r2,r3
  810efc:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  810f00:	e0bffb17 	ldw	r2,-20(fp)
  810f04:	10800e17 	ldw	r2,56(r2)
  810f08:	10800058 	cmpnei	r2,r2,1
  810f0c:	1000081e 	bne	r2,zero,810f30 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  810f10:	e0bffb17 	ldw	r2,-20(fp)
  810f14:	10800c17 	ldw	r2,48(r2)
  810f18:	1007883a 	mov	r3,r2
  810f1c:	e0bffa17 	ldw	r2,-24(fp)
  810f20:	1885883a 	add	r2,r3,r2
  810f24:	e0fffc17 	ldw	r3,-16(fp)
  810f28:	10c00025 	stbio	r3,0(r2)
  810f2c:	00001306 	br	810f7c <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  810f30:	e0bffb17 	ldw	r2,-20(fp)
  810f34:	10800e17 	ldw	r2,56(r2)
  810f38:	10800098 	cmpnei	r2,r2,2
  810f3c:	1000081e 	bne	r2,zero,810f60 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  810f40:	e0bffb17 	ldw	r2,-20(fp)
  810f44:	10800c17 	ldw	r2,48(r2)
  810f48:	1007883a 	mov	r3,r2
  810f4c:	e0bffa17 	ldw	r2,-24(fp)
  810f50:	1885883a 	add	r2,r3,r2
  810f54:	e0fffc17 	ldw	r3,-16(fp)
  810f58:	10c0002d 	sthio	r3,0(r2)
  810f5c:	00000706 	br	810f7c <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  810f60:	e0bffb17 	ldw	r2,-20(fp)
  810f64:	10800c17 	ldw	r2,48(r2)
  810f68:	1007883a 	mov	r3,r2
  810f6c:	e0bffa17 	ldw	r2,-24(fp)
  810f70:	1885883a 	add	r2,r3,r2
  810f74:	e0fffc17 	ldw	r3,-16(fp)
  810f78:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  810f7c:	e03fff15 	stw	zero,-4(fp)
  810f80:	e0bfff17 	ldw	r2,-4(fp)
}
  810f84:	e037883a 	mov	sp,fp
  810f88:	df000017 	ldw	fp,0(sp)
  810f8c:	dec00104 	addi	sp,sp,4
  810f90:	f800283a 	ret

00810f94 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  810f94:	defffd04 	addi	sp,sp,-12
  810f98:	df000215 	stw	fp,8(sp)
  810f9c:	df000204 	addi	fp,sp,8
  810fa0:	e13ffe15 	stw	r4,-8(fp)
  810fa4:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  810fa8:	e0bffe17 	ldw	r2,-8(fp)
  810fac:	10800a17 	ldw	r2,40(r2)
  810fb0:	10800104 	addi	r2,r2,4
  810fb4:	e0ffff17 	ldw	r3,-4(fp)
  810fb8:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  810fbc:	e0bffe17 	ldw	r2,-8(fp)
  810fc0:	10800a17 	ldw	r2,40(r2)
  810fc4:	10800104 	addi	r2,r2,4
  810fc8:	10800037 	ldwio	r2,0(r2)
  810fcc:	1007883a 	mov	r3,r2
  810fd0:	e0bffe17 	ldw	r2,-8(fp)
  810fd4:	10c00c15 	stw	r3,48(r2)
	return 0;
  810fd8:	0005883a 	mov	r2,zero
}
  810fdc:	e037883a 	mov	sp,fp
  810fe0:	df000017 	ldw	fp,0(sp)
  810fe4:	dec00104 	addi	sp,sp,4
  810fe8:	f800283a 	ret

00810fec <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  810fec:	defffe04 	addi	sp,sp,-8
  810ff0:	df000115 	stw	fp,4(sp)
  810ff4:	df000104 	addi	fp,sp,4
  810ff8:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  810ffc:	e0bfff17 	ldw	r2,-4(fp)
  811000:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  811004:	e0bfff17 	ldw	r2,-4(fp)
  811008:	10800a17 	ldw	r2,40(r2)
  81100c:	1007883a 	mov	r3,r2
  811010:	00800044 	movi	r2,1
  811014:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  811018:	e0bfff17 	ldw	r2,-4(fp)
  81101c:	10c00b17 	ldw	r3,44(r2)
  811020:	e0bfff17 	ldw	r2,-4(fp)
  811024:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  811028:	e0bfff17 	ldw	r2,-4(fp)
  81102c:	11000b15 	stw	r4,44(r2)
	return 0;
  811030:	0005883a 	mov	r2,zero
}
  811034:	e037883a 	mov	sp,fp
  811038:	df000017 	ldw	fp,0(sp)
  81103c:	dec00104 	addi	sp,sp,4
  811040:	f800283a 	ret

00811044 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  811044:	defffe04 	addi	sp,sp,-8
  811048:	df000115 	stw	fp,4(sp)
  81104c:	df000104 	addi	fp,sp,4
  811050:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  811054:	e0bfff17 	ldw	r2,-4(fp)
  811058:	10800a17 	ldw	r2,40(r2)
  81105c:	10800304 	addi	r2,r2,12
  811060:	10800037 	ldwio	r2,0(r2)
  811064:	1080004c 	andi	r2,r2,1
}
  811068:	e037883a 	mov	sp,fp
  81106c:	df000017 	ldw	fp,0(sp)
  811070:	dec00104 	addi	sp,sp,4
  811074:	f800283a 	ret

00811078 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  811078:	defff604 	addi	sp,sp,-40
  81107c:	df000915 	stw	fp,36(sp)
  811080:	df000904 	addi	fp,sp,36
  811084:	e13ff715 	stw	r4,-36(fp)
  811088:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  81108c:	e0bff817 	ldw	r2,-32(fp)
  811090:	10800058 	cmpnei	r2,r2,1
  811094:	1000041e 	bne	r2,zero,8110a8 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  811098:	e0bff717 	ldw	r2,-36(fp)
  81109c:	10800c17 	ldw	r2,48(r2)
  8110a0:	e0bfff15 	stw	r2,-4(fp)
  8110a4:	00000306 	br	8110b4 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  8110a8:	e0bff717 	ldw	r2,-36(fp)
  8110ac:	10800b17 	ldw	r2,44(r2)
  8110b0:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  8110b4:	e0bff717 	ldw	r2,-36(fp)
  8110b8:	10800f17 	ldw	r2,60(r2)
  8110bc:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  8110c0:	e0bff717 	ldw	r2,-36(fp)
  8110c4:	10800e17 	ldw	r2,56(r2)
  8110c8:	10800098 	cmpnei	r2,r2,2
  8110cc:	1000051e 	bne	r2,zero,8110e4 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
  8110d0:	e0fffe17 	ldw	r3,-8(fp)
  8110d4:	e0fffe17 	ldw	r3,-8(fp)
  8110d8:	18c5883a 	add	r2,r3,r3
  8110dc:	e0bffe15 	stw	r2,-8(fp)
  8110e0:	00000506 	br	8110f8 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
  8110e4:	e13ffe17 	ldw	r4,-8(fp)
  8110e8:	e13ffe17 	ldw	r4,-8(fp)
  8110ec:	2105883a 	add	r2,r4,r4
  8110f0:	1085883a 	add	r2,r2,r2
  8110f4:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  8110f8:	e0bff717 	ldw	r2,-36(fp)
  8110fc:	10801017 	ldw	r2,64(r2)
  811100:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  811104:	e0bff717 	ldw	r2,-36(fp)
  811108:	10800d17 	ldw	r2,52(r2)
  81110c:	1004c03a 	cmpne	r2,r2,zero
  811110:	10001e1e 	bne	r2,zero,81118c <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  811114:	e0bff717 	ldw	r2,-36(fp)
  811118:	10801317 	ldw	r2,76(r2)
  81111c:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  811120:	e03ffb15 	stw	zero,-20(fp)
  811124:	00001506 	br	81117c <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
  811128:	e03ffc15 	stw	zero,-16(fp)
  81112c:	00000706 	br	81114c <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
  811130:	e0ffff17 	ldw	r3,-4(fp)
  811134:	e0bffc17 	ldw	r2,-16(fp)
  811138:	1885883a 	add	r2,r3,r2
  81113c:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  811140:	e0bffc17 	ldw	r2,-16(fp)
  811144:	10800104 	addi	r2,r2,4
  811148:	e0bffc15 	stw	r2,-16(fp)
  81114c:	e0fffc17 	ldw	r3,-16(fp)
  811150:	e13ffe17 	ldw	r4,-8(fp)
  811154:	193ff636 	bltu	r3,r4,811130 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  811158:	e0fffa17 	ldw	r3,-24(fp)
  81115c:	00800044 	movi	r2,1
  811160:	10c4983a 	sll	r2,r2,r3
  811164:	e0ffff17 	ldw	r3,-4(fp)
  811168:	1887883a 	add	r3,r3,r2
  81116c:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  811170:	e13ffb17 	ldw	r4,-20(fp)
  811174:	21000044 	addi	r4,r4,1
  811178:	e13ffb15 	stw	r4,-20(fp)
  81117c:	e0bffb17 	ldw	r2,-20(fp)
  811180:	e0fffd17 	ldw	r3,-12(fp)
  811184:	10ffe836 	bltu	r2,r3,811128 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
  811188:	00001006 	br	8111cc <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  81118c:	e13ffd17 	ldw	r4,-12(fp)
  811190:	e0bffe17 	ldw	r2,-8(fp)
  811194:	2089383a 	mul	r4,r4,r2
  811198:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  81119c:	e03ff915 	stw	zero,-28(fp)
  8111a0:	00000706 	br	8111c0 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
  8111a4:	e0ffff17 	ldw	r3,-4(fp)
  8111a8:	e0bff917 	ldw	r2,-28(fp)
  8111ac:	1885883a 	add	r2,r3,r2
  8111b0:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  8111b4:	e0fff917 	ldw	r3,-28(fp)
  8111b8:	18c00104 	addi	r3,r3,4
  8111bc:	e0fff915 	stw	r3,-28(fp)
  8111c0:	e0bff917 	ldw	r2,-28(fp)
  8111c4:	e13ffd17 	ldw	r4,-12(fp)
  8111c8:	113ff636 	bltu	r2,r4,8111a4 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  8111cc:	e037883a 	mov	sp,fp
  8111d0:	df000017 	ldw	fp,0(sp)
  8111d4:	dec00104 	addi	sp,sp,4
  8111d8:	f800283a 	ret

008111dc <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  8111dc:	deffed04 	addi	sp,sp,-76
  8111e0:	df001215 	stw	fp,72(sp)
  8111e4:	df001204 	addi	fp,sp,72
  8111e8:	e13fee15 	stw	r4,-72(fp)
  8111ec:	e17fef15 	stw	r5,-68(fp)
  8111f0:	e1bff015 	stw	r6,-64(fp)
  8111f4:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  8111f8:	e0bfee17 	ldw	r2,-72(fp)
  8111fc:	10800f17 	ldw	r2,60(r2)
  811200:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  811204:	e0bfee17 	ldw	r2,-72(fp)
  811208:	10801017 	ldw	r2,64(r2)
  81120c:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  811210:	e0bfef17 	ldw	r2,-68(fp)
  811214:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  811218:	e0fff117 	ldw	r3,-60(fp)
  81121c:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  811220:	e13ff017 	ldw	r4,-64(fp)
  811224:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  811228:	e0800117 	ldw	r2,4(fp)
  81122c:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  811230:	e0c00217 	ldw	r3,8(fp)
  811234:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  811238:	e13ffa17 	ldw	r4,-24(fp)
  81123c:	e0bffb17 	ldw	r2,-20(fp)
  811240:	2080062e 	bgeu	r4,r2,81125c <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
  811244:	e0fffb17 	ldw	r3,-20(fp)
  811248:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  81124c:	e13ffa17 	ldw	r4,-24(fp)
  811250:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  811254:	e0bffc17 	ldw	r2,-16(fp)
  811258:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  81125c:	e0fff817 	ldw	r3,-32(fp)
  811260:	e13ff917 	ldw	r4,-28(fp)
  811264:	1900062e 	bgeu	r3,r4,811280 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
  811268:	e0bff917 	ldw	r2,-28(fp)
  81126c:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  811270:	e0fff817 	ldw	r3,-32(fp)
  811274:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  811278:	e13ffc17 	ldw	r4,-16(fp)
  81127c:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  811280:	e0bffb17 	ldw	r2,-20(fp)
  811284:	e0fffe17 	ldw	r3,-8(fp)
  811288:	10c10d2e 	bgeu	r2,r3,8116c0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
  81128c:	e13ff917 	ldw	r4,-28(fp)
  811290:	e0bffd17 	ldw	r2,-12(fp)
  811294:	20800136 	bltu	r4,r2,81129c <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  811298:	00010906 	br	8116c0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  81129c:	e0fffa17 	ldw	r3,-24(fp)
  8112a0:	e13ffe17 	ldw	r4,-8(fp)
  8112a4:	19000336 	bltu	r3,r4,8112b4 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
  8112a8:	e0bffe17 	ldw	r2,-8(fp)
  8112ac:	10bfffc4 	addi	r2,r2,-1
  8112b0:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  8112b4:	e0fff817 	ldw	r3,-32(fp)
  8112b8:	e13ffd17 	ldw	r4,-12(fp)
  8112bc:	19000336 	bltu	r3,r4,8112cc <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
  8112c0:	e0bffd17 	ldw	r2,-12(fp)
  8112c4:	10bfffc4 	addi	r2,r2,-1
  8112c8:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  8112cc:	e0800317 	ldw	r2,12(fp)
  8112d0:	10800058 	cmpnei	r2,r2,1
  8112d4:	1000041e 	bne	r2,zero,8112e8 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
  8112d8:	e0bfee17 	ldw	r2,-72(fp)
  8112dc:	10800c17 	ldw	r2,48(r2)
  8112e0:	e0bfff15 	stw	r2,-4(fp)
  8112e4:	00000306 	br	8112f4 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
  8112e8:	e0bfee17 	ldw	r2,-72(fp)
  8112ec:	10800b17 	ldw	r2,44(r2)
  8112f0:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  8112f4:	e0bfee17 	ldw	r2,-72(fp)
  8112f8:	10800d17 	ldw	r2,52(r2)
  8112fc:	1004c03a 	cmpne	r2,r2,zero
  811300:	1000721e 	bne	r2,zero,8114cc <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  811304:	e0bfee17 	ldw	r2,-72(fp)
  811308:	10801317 	ldw	r2,76(r2)
  81130c:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  811310:	e0bff417 	ldw	r2,-48(fp)
  811314:	e0fff917 	ldw	r3,-28(fp)
  811318:	1884983a 	sll	r2,r3,r2
  81131c:	e13fff17 	ldw	r4,-4(fp)
  811320:	2089883a 	add	r4,r4,r2
  811324:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  811328:	e0bfee17 	ldw	r2,-72(fp)
  81132c:	10800e17 	ldw	r2,56(r2)
  811330:	10800058 	cmpnei	r2,r2,1
  811334:	10001e1e 	bne	r2,zero,8113b0 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
  811338:	e0bff917 	ldw	r2,-28(fp)
  81133c:	e0bff515 	stw	r2,-44(fp)
  811340:	00001706 	br	8113a0 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
  811344:	e0fffb17 	ldw	r3,-20(fp)
  811348:	e0fff615 	stw	r3,-40(fp)
  81134c:	00000806 	br	811370 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
  811350:	e0ffff17 	ldw	r3,-4(fp)
  811354:	e0bff617 	ldw	r2,-40(fp)
  811358:	1885883a 	add	r2,r3,r2
  81135c:	e0fff717 	ldw	r3,-36(fp)
  811360:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  811364:	e13ff617 	ldw	r4,-40(fp)
  811368:	21000044 	addi	r4,r4,1
  81136c:	e13ff615 	stw	r4,-40(fp)
  811370:	e0bffa17 	ldw	r2,-24(fp)
  811374:	e0fff617 	ldw	r3,-40(fp)
  811378:	10fff52e 	bgeu	r2,r3,811350 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  81137c:	e0fff417 	ldw	r3,-48(fp)
  811380:	00800044 	movi	r2,1
  811384:	10c4983a 	sll	r2,r2,r3
  811388:	e13fff17 	ldw	r4,-4(fp)
  81138c:	2089883a 	add	r4,r4,r2
  811390:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  811394:	e0bff517 	ldw	r2,-44(fp)
  811398:	10800044 	addi	r2,r2,1
  81139c:	e0bff515 	stw	r2,-44(fp)
  8113a0:	e0fff817 	ldw	r3,-32(fp)
  8113a4:	e13ff517 	ldw	r4,-44(fp)
  8113a8:	193fe62e 	bgeu	r3,r4,811344 <alt_up_pixel_buffer_dma_draw_box+0x168>
  8113ac:	0000c406 	br	8116c0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  8113b0:	e0bfee17 	ldw	r2,-72(fp)
  8113b4:	10800e17 	ldw	r2,56(r2)
  8113b8:	10800098 	cmpnei	r2,r2,2
  8113bc:	1000211e 	bne	r2,zero,811444 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
  8113c0:	e0bff917 	ldw	r2,-28(fp)
  8113c4:	e0bff515 	stw	r2,-44(fp)
  8113c8:	00001a06 	br	811434 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
  8113cc:	e0fffb17 	ldw	r3,-20(fp)
  8113d0:	e0fff615 	stw	r3,-40(fp)
  8113d4:	00000b06 	br	811404 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  8113d8:	e13ff617 	ldw	r4,-40(fp)
  8113dc:	e13ff617 	ldw	r4,-40(fp)
  8113e0:	2105883a 	add	r2,r4,r4
  8113e4:	1007883a 	mov	r3,r2
  8113e8:	e0bfff17 	ldw	r2,-4(fp)
  8113ec:	1885883a 	add	r2,r3,r2
  8113f0:	e0fff717 	ldw	r3,-36(fp)
  8113f4:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  8113f8:	e0bff617 	ldw	r2,-40(fp)
  8113fc:	10800044 	addi	r2,r2,1
  811400:	e0bff615 	stw	r2,-40(fp)
  811404:	e0fffa17 	ldw	r3,-24(fp)
  811408:	e13ff617 	ldw	r4,-40(fp)
  81140c:	193ff22e 	bgeu	r3,r4,8113d8 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  811410:	e0fff417 	ldw	r3,-48(fp)
  811414:	00800044 	movi	r2,1
  811418:	10c4983a 	sll	r2,r2,r3
  81141c:	e0ffff17 	ldw	r3,-4(fp)
  811420:	1887883a 	add	r3,r3,r2
  811424:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  811428:	e13ff517 	ldw	r4,-44(fp)
  81142c:	21000044 	addi	r4,r4,1
  811430:	e13ff515 	stw	r4,-44(fp)
  811434:	e0bff817 	ldw	r2,-32(fp)
  811438:	e0fff517 	ldw	r3,-44(fp)
  81143c:	10ffe32e 	bgeu	r2,r3,8113cc <alt_up_pixel_buffer_dma_draw_box+0x1f0>
  811440:	00009f06 	br	8116c0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  811444:	e13ff917 	ldw	r4,-28(fp)
  811448:	e13ff515 	stw	r4,-44(fp)
  81144c:	00001b06 	br	8114bc <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
  811450:	e0bffb17 	ldw	r2,-20(fp)
  811454:	e0bff615 	stw	r2,-40(fp)
  811458:	00000c06 	br	81148c <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  81145c:	e0fff617 	ldw	r3,-40(fp)
  811460:	e0fff617 	ldw	r3,-40(fp)
  811464:	18c5883a 	add	r2,r3,r3
  811468:	1085883a 	add	r2,r2,r2
  81146c:	1007883a 	mov	r3,r2
  811470:	e0bfff17 	ldw	r2,-4(fp)
  811474:	1885883a 	add	r2,r3,r2
  811478:	e0fff717 	ldw	r3,-36(fp)
  81147c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  811480:	e13ff617 	ldw	r4,-40(fp)
  811484:	21000044 	addi	r4,r4,1
  811488:	e13ff615 	stw	r4,-40(fp)
  81148c:	e0bffa17 	ldw	r2,-24(fp)
  811490:	e0fff617 	ldw	r3,-40(fp)
  811494:	10fff12e 	bgeu	r2,r3,81145c <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  811498:	e0fff417 	ldw	r3,-48(fp)
  81149c:	00800044 	movi	r2,1
  8114a0:	10c4983a 	sll	r2,r2,r3
  8114a4:	e13fff17 	ldw	r4,-4(fp)
  8114a8:	2089883a 	add	r4,r4,r2
  8114ac:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  8114b0:	e0bff517 	ldw	r2,-44(fp)
  8114b4:	10800044 	addi	r2,r2,1
  8114b8:	e0bff515 	stw	r2,-44(fp)
  8114bc:	e0fff817 	ldw	r3,-32(fp)
  8114c0:	e13ff517 	ldw	r4,-44(fp)
  8114c4:	193fe22e 	bgeu	r3,r4,811450 <alt_up_pixel_buffer_dma_draw_box+0x274>
  8114c8:	00007d06 	br	8116c0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  8114cc:	e0bfee17 	ldw	r2,-72(fp)
  8114d0:	10800e17 	ldw	r2,56(r2)
  8114d4:	10800058 	cmpnei	r2,r2,1
  8114d8:	1000221e 	bne	r2,zero,811564 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
  8114dc:	e0fff917 	ldw	r3,-28(fp)
  8114e0:	e13ffe17 	ldw	r4,-8(fp)
  8114e4:	1905383a 	mul	r2,r3,r4
  8114e8:	e0ffff17 	ldw	r3,-4(fp)
  8114ec:	1887883a 	add	r3,r3,r2
  8114f0:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  8114f4:	e13ff917 	ldw	r4,-28(fp)
  8114f8:	e13ff215 	stw	r4,-56(fp)
  8114fc:	00001506 	br	811554 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
  811500:	e0bffb17 	ldw	r2,-20(fp)
  811504:	e0bff315 	stw	r2,-52(fp)
  811508:	00000806 	br	81152c <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
  81150c:	e0ffff17 	ldw	r3,-4(fp)
  811510:	e0bff317 	ldw	r2,-52(fp)
  811514:	1885883a 	add	r2,r3,r2
  811518:	e0fff717 	ldw	r3,-36(fp)
  81151c:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  811520:	e0fff317 	ldw	r3,-52(fp)
  811524:	18c00044 	addi	r3,r3,1
  811528:	e0fff315 	stw	r3,-52(fp)
  81152c:	e13ffa17 	ldw	r4,-24(fp)
  811530:	e0bff317 	ldw	r2,-52(fp)
  811534:	20bff52e 	bgeu	r4,r2,81150c <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  811538:	e0ffff17 	ldw	r3,-4(fp)
  81153c:	e13ffe17 	ldw	r4,-8(fp)
  811540:	1907883a 	add	r3,r3,r4
  811544:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  811548:	e0bff217 	ldw	r2,-56(fp)
  81154c:	10800044 	addi	r2,r2,1
  811550:	e0bff215 	stw	r2,-56(fp)
  811554:	e0fff817 	ldw	r3,-32(fp)
  811558:	e13ff217 	ldw	r4,-56(fp)
  81155c:	193fe82e 	bgeu	r3,r4,811500 <alt_up_pixel_buffer_dma_draw_box+0x324>
  811560:	00005706 	br	8116c0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  811564:	e0bfee17 	ldw	r2,-72(fp)
  811568:	10800e17 	ldw	r2,56(r2)
  81156c:	10800098 	cmpnei	r2,r2,2
  811570:	1000291e 	bne	r2,zero,811618 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
  811574:	e0fffe17 	ldw	r3,-8(fp)
  811578:	e0fffe17 	ldw	r3,-8(fp)
  81157c:	18c5883a 	add	r2,r3,r3
  811580:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  811584:	e13ff917 	ldw	r4,-28(fp)
  811588:	e0fffe17 	ldw	r3,-8(fp)
  81158c:	20c5383a 	mul	r2,r4,r3
  811590:	e13fff17 	ldw	r4,-4(fp)
  811594:	2089883a 	add	r4,r4,r2
  811598:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  81159c:	e0bff917 	ldw	r2,-28(fp)
  8115a0:	e0bff215 	stw	r2,-56(fp)
  8115a4:	00001806 	br	811608 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
  8115a8:	e0fffb17 	ldw	r3,-20(fp)
  8115ac:	e0fff315 	stw	r3,-52(fp)
  8115b0:	00000b06 	br	8115e0 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  8115b4:	e13ff317 	ldw	r4,-52(fp)
  8115b8:	e13ff317 	ldw	r4,-52(fp)
  8115bc:	2105883a 	add	r2,r4,r4
  8115c0:	1007883a 	mov	r3,r2
  8115c4:	e0bfff17 	ldw	r2,-4(fp)
  8115c8:	1885883a 	add	r2,r3,r2
  8115cc:	e0fff717 	ldw	r3,-36(fp)
  8115d0:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  8115d4:	e0bff317 	ldw	r2,-52(fp)
  8115d8:	10800044 	addi	r2,r2,1
  8115dc:	e0bff315 	stw	r2,-52(fp)
  8115e0:	e0fffa17 	ldw	r3,-24(fp)
  8115e4:	e13ff317 	ldw	r4,-52(fp)
  8115e8:	193ff22e 	bgeu	r3,r4,8115b4 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  8115ec:	e0bfff17 	ldw	r2,-4(fp)
  8115f0:	e0fffe17 	ldw	r3,-8(fp)
  8115f4:	10c5883a 	add	r2,r2,r3
  8115f8:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  8115fc:	e13ff217 	ldw	r4,-56(fp)
  811600:	21000044 	addi	r4,r4,1
  811604:	e13ff215 	stw	r4,-56(fp)
  811608:	e0bff817 	ldw	r2,-32(fp)
  81160c:	e0fff217 	ldw	r3,-56(fp)
  811610:	10ffe52e 	bgeu	r2,r3,8115a8 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
  811614:	00002a06 	br	8116c0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  811618:	e13ffe17 	ldw	r4,-8(fp)
  81161c:	e13ffe17 	ldw	r4,-8(fp)
  811620:	2105883a 	add	r2,r4,r4
  811624:	1085883a 	add	r2,r2,r2
  811628:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  81162c:	e0fff917 	ldw	r3,-28(fp)
  811630:	e13ffe17 	ldw	r4,-8(fp)
  811634:	1905383a 	mul	r2,r3,r4
  811638:	e0ffff17 	ldw	r3,-4(fp)
  81163c:	1887883a 	add	r3,r3,r2
  811640:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  811644:	e13ff917 	ldw	r4,-28(fp)
  811648:	e13ff215 	stw	r4,-56(fp)
  81164c:	00001906 	br	8116b4 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
  811650:	e0bffb17 	ldw	r2,-20(fp)
  811654:	e0bff315 	stw	r2,-52(fp)
  811658:	00000c06 	br	81168c <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  81165c:	e0fff317 	ldw	r3,-52(fp)
  811660:	e0fff317 	ldw	r3,-52(fp)
  811664:	18c5883a 	add	r2,r3,r3
  811668:	1085883a 	add	r2,r2,r2
  81166c:	1007883a 	mov	r3,r2
  811670:	e0bfff17 	ldw	r2,-4(fp)
  811674:	1885883a 	add	r2,r3,r2
  811678:	e0fff717 	ldw	r3,-36(fp)
  81167c:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  811680:	e13ff317 	ldw	r4,-52(fp)
  811684:	21000044 	addi	r4,r4,1
  811688:	e13ff315 	stw	r4,-52(fp)
  81168c:	e0bffa17 	ldw	r2,-24(fp)
  811690:	e0fff317 	ldw	r3,-52(fp)
  811694:	10fff12e 	bgeu	r2,r3,81165c <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  811698:	e13fff17 	ldw	r4,-4(fp)
  81169c:	e0bffe17 	ldw	r2,-8(fp)
  8116a0:	2089883a 	add	r4,r4,r2
  8116a4:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  8116a8:	e0fff217 	ldw	r3,-56(fp)
  8116ac:	18c00044 	addi	r3,r3,1
  8116b0:	e0fff215 	stw	r3,-56(fp)
  8116b4:	e13ff817 	ldw	r4,-32(fp)
  8116b8:	e0bff217 	ldw	r2,-56(fp)
  8116bc:	20bfe42e 	bgeu	r4,r2,811650 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  8116c0:	e037883a 	mov	sp,fp
  8116c4:	df000017 	ldw	fp,0(sp)
  8116c8:	dec00104 	addi	sp,sp,4
  8116cc:	f800283a 	ret

008116d0 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  8116d0:	defff204 	addi	sp,sp,-56
  8116d4:	df000d15 	stw	fp,52(sp)
  8116d8:	df000d04 	addi	fp,sp,52
  8116dc:	e13ff315 	stw	r4,-52(fp)
  8116e0:	e17ff415 	stw	r5,-48(fp)
  8116e4:	e1bff515 	stw	r6,-44(fp)
  8116e8:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  8116ec:	e0bff317 	ldw	r2,-52(fp)
  8116f0:	10800f17 	ldw	r2,60(r2)
  8116f4:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  8116f8:	e0bff317 	ldw	r2,-52(fp)
  8116fc:	10801017 	ldw	r2,64(r2)
  811700:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  811704:	e0bff417 	ldw	r2,-48(fp)
  811708:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  81170c:	e0fff517 	ldw	r3,-44(fp)
  811710:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  811714:	e13ff617 	ldw	r4,-40(fp)
  811718:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  81171c:	e0800117 	ldw	r2,4(fp)
  811720:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  811724:	e0fffb17 	ldw	r3,-20(fp)
  811728:	e13ffc17 	ldw	r4,-16(fp)
  81172c:	1900042e 	bgeu	r3,r4,811740 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
  811730:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  811734:	e0fffb17 	ldw	r3,-20(fp)
  811738:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  81173c:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  811740:	e13ffc17 	ldw	r4,-16(fp)
  811744:	e0bffe17 	ldw	r2,-8(fp)
  811748:	2080b12e 	bgeu	r4,r2,811a10 <alt_up_pixel_buffer_dma_draw_hline+0x340>
  81174c:	e0fffa17 	ldw	r3,-24(fp)
  811750:	e13ffd17 	ldw	r4,-12(fp)
  811754:	19000136 	bltu	r3,r4,81175c <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  811758:	0000ad06 	br	811a10 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  81175c:	e0bffb17 	ldw	r2,-20(fp)
  811760:	e0fffe17 	ldw	r3,-8(fp)
  811764:	10c00336 	bltu	r2,r3,811774 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
  811768:	e13ffe17 	ldw	r4,-8(fp)
  81176c:	213fffc4 	addi	r4,r4,-1
  811770:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  811774:	e0800217 	ldw	r2,8(fp)
  811778:	10800058 	cmpnei	r2,r2,1
  81177c:	1000041e 	bne	r2,zero,811790 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  811780:	e0bff317 	ldw	r2,-52(fp)
  811784:	10800c17 	ldw	r2,48(r2)
  811788:	e0bfff15 	stw	r2,-4(fp)
  81178c:	00000306 	br	81179c <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  811790:	e0bff317 	ldw	r2,-52(fp)
  811794:	10800b17 	ldw	r2,44(r2)
  811798:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  81179c:	e0bff317 	ldw	r2,-52(fp)
  8117a0:	10800d17 	ldw	r2,52(r2)
  8117a4:	1004c03a 	cmpne	r2,r2,zero
  8117a8:	1000431e 	bne	r2,zero,8118b8 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  8117ac:	e0bff317 	ldw	r2,-52(fp)
  8117b0:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  8117b4:	e0fffa17 	ldw	r3,-24(fp)
  8117b8:	1884983a 	sll	r2,r3,r2
  8117bc:	e13fff17 	ldw	r4,-4(fp)
  8117c0:	2089883a 	add	r4,r4,r2
  8117c4:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  8117c8:	e0bff317 	ldw	r2,-52(fp)
  8117cc:	10800e17 	ldw	r2,56(r2)
  8117d0:	10800058 	cmpnei	r2,r2,1
  8117d4:	10000f1e 	bne	r2,zero,811814 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
  8117d8:	e0bffc17 	ldw	r2,-16(fp)
  8117dc:	e0bff815 	stw	r2,-32(fp)
  8117e0:	00000806 	br	811804 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
  8117e4:	e0ffff17 	ldw	r3,-4(fp)
  8117e8:	e0bff817 	ldw	r2,-32(fp)
  8117ec:	1885883a 	add	r2,r3,r2
  8117f0:	e0fff917 	ldw	r3,-28(fp)
  8117f4:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  8117f8:	e0fff817 	ldw	r3,-32(fp)
  8117fc:	18c00044 	addi	r3,r3,1
  811800:	e0fff815 	stw	r3,-32(fp)
  811804:	e13ffb17 	ldw	r4,-20(fp)
  811808:	e0bff817 	ldw	r2,-32(fp)
  81180c:	20bff52e 	bgeu	r4,r2,8117e4 <alt_up_pixel_buffer_dma_draw_hline+0x114>
  811810:	00007f06 	br	811a10 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  811814:	e0bff317 	ldw	r2,-52(fp)
  811818:	10800e17 	ldw	r2,56(r2)
  81181c:	10800098 	cmpnei	r2,r2,2
  811820:	1000121e 	bne	r2,zero,81186c <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
  811824:	e0fffc17 	ldw	r3,-16(fp)
  811828:	e0fff815 	stw	r3,-32(fp)
  81182c:	00000b06 	br	81185c <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  811830:	e13ff817 	ldw	r4,-32(fp)
  811834:	e13ff817 	ldw	r4,-32(fp)
  811838:	2105883a 	add	r2,r4,r4
  81183c:	1007883a 	mov	r3,r2
  811840:	e0bfff17 	ldw	r2,-4(fp)
  811844:	1885883a 	add	r2,r3,r2
  811848:	e0fff917 	ldw	r3,-28(fp)
  81184c:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  811850:	e0bff817 	ldw	r2,-32(fp)
  811854:	10800044 	addi	r2,r2,1
  811858:	e0bff815 	stw	r2,-32(fp)
  81185c:	e0fffb17 	ldw	r3,-20(fp)
  811860:	e13ff817 	ldw	r4,-32(fp)
  811864:	193ff22e 	bgeu	r3,r4,811830 <alt_up_pixel_buffer_dma_draw_hline+0x160>
  811868:	00006906 	br	811a10 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  81186c:	e0bffc17 	ldw	r2,-16(fp)
  811870:	e0bff815 	stw	r2,-32(fp)
  811874:	00000c06 	br	8118a8 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  811878:	e0fff817 	ldw	r3,-32(fp)
  81187c:	e0fff817 	ldw	r3,-32(fp)
  811880:	18c5883a 	add	r2,r3,r3
  811884:	1085883a 	add	r2,r2,r2
  811888:	1007883a 	mov	r3,r2
  81188c:	e0bfff17 	ldw	r2,-4(fp)
  811890:	1885883a 	add	r2,r3,r2
  811894:	e0fff917 	ldw	r3,-28(fp)
  811898:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  81189c:	e13ff817 	ldw	r4,-32(fp)
  8118a0:	21000044 	addi	r4,r4,1
  8118a4:	e13ff815 	stw	r4,-32(fp)
  8118a8:	e0bffb17 	ldw	r2,-20(fp)
  8118ac:	e0fff817 	ldw	r3,-32(fp)
  8118b0:	10fff12e 	bgeu	r2,r3,811878 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
  8118b4:	00005606 	br	811a10 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  8118b8:	e0bff317 	ldw	r2,-52(fp)
  8118bc:	10800e17 	ldw	r2,56(r2)
  8118c0:	10800058 	cmpnei	r2,r2,1
  8118c4:	1000151e 	bne	r2,zero,81191c <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
  8118c8:	e13ffa17 	ldw	r4,-24(fp)
  8118cc:	e0fffe17 	ldw	r3,-8(fp)
  8118d0:	20c5383a 	mul	r2,r4,r3
  8118d4:	e13fff17 	ldw	r4,-4(fp)
  8118d8:	2089883a 	add	r4,r4,r2
  8118dc:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  8118e0:	e0bffc17 	ldw	r2,-16(fp)
  8118e4:	e0bff715 	stw	r2,-36(fp)
  8118e8:	00000806 	br	81190c <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  8118ec:	e0ffff17 	ldw	r3,-4(fp)
  8118f0:	e0bff717 	ldw	r2,-36(fp)
  8118f4:	1885883a 	add	r2,r3,r2
  8118f8:	e0fff917 	ldw	r3,-28(fp)
  8118fc:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  811900:	e0fff717 	ldw	r3,-36(fp)
  811904:	18c00044 	addi	r3,r3,1
  811908:	e0fff715 	stw	r3,-36(fp)
  81190c:	e13ffb17 	ldw	r4,-20(fp)
  811910:	e0bff717 	ldw	r2,-36(fp)
  811914:	20bff52e 	bgeu	r4,r2,8118ec <alt_up_pixel_buffer_dma_draw_hline+0x21c>
  811918:	00003d06 	br	811a10 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  81191c:	e0bff317 	ldw	r2,-52(fp)
  811920:	10800e17 	ldw	r2,56(r2)
  811924:	10800098 	cmpnei	r2,r2,2
  811928:	10001c1e 	bne	r2,zero,81199c <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
  81192c:	e0fffe17 	ldw	r3,-8(fp)
  811930:	e0fffe17 	ldw	r3,-8(fp)
  811934:	18c5883a 	add	r2,r3,r3
  811938:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  81193c:	e13ffa17 	ldw	r4,-24(fp)
  811940:	e0fffe17 	ldw	r3,-8(fp)
  811944:	20c5383a 	mul	r2,r4,r3
  811948:	e13fff17 	ldw	r4,-4(fp)
  81194c:	2089883a 	add	r4,r4,r2
  811950:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  811954:	e0bffc17 	ldw	r2,-16(fp)
  811958:	e0bff715 	stw	r2,-36(fp)
  81195c:	00000b06 	br	81198c <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  811960:	e0fff717 	ldw	r3,-36(fp)
  811964:	e0fff717 	ldw	r3,-36(fp)
  811968:	18c5883a 	add	r2,r3,r3
  81196c:	1007883a 	mov	r3,r2
  811970:	e0bfff17 	ldw	r2,-4(fp)
  811974:	1885883a 	add	r2,r3,r2
  811978:	e0fff917 	ldw	r3,-28(fp)
  81197c:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  811980:	e13ff717 	ldw	r4,-36(fp)
  811984:	21000044 	addi	r4,r4,1
  811988:	e13ff715 	stw	r4,-36(fp)
  81198c:	e0bffb17 	ldw	r2,-20(fp)
  811990:	e0fff717 	ldw	r3,-36(fp)
  811994:	10fff22e 	bgeu	r2,r3,811960 <alt_up_pixel_buffer_dma_draw_hline+0x290>
  811998:	00001d06 	br	811a10 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  81199c:	e13ffe17 	ldw	r4,-8(fp)
  8119a0:	e13ffe17 	ldw	r4,-8(fp)
  8119a4:	2105883a 	add	r2,r4,r4
  8119a8:	1085883a 	add	r2,r2,r2
  8119ac:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  8119b0:	e0fffa17 	ldw	r3,-24(fp)
  8119b4:	e13ffe17 	ldw	r4,-8(fp)
  8119b8:	1905383a 	mul	r2,r3,r4
  8119bc:	e0ffff17 	ldw	r3,-4(fp)
  8119c0:	1887883a 	add	r3,r3,r2
  8119c4:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  8119c8:	e13ffc17 	ldw	r4,-16(fp)
  8119cc:	e13ff715 	stw	r4,-36(fp)
  8119d0:	00000c06 	br	811a04 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  8119d4:	e0fff717 	ldw	r3,-36(fp)
  8119d8:	e0fff717 	ldw	r3,-36(fp)
  8119dc:	18c5883a 	add	r2,r3,r3
  8119e0:	1085883a 	add	r2,r2,r2
  8119e4:	1007883a 	mov	r3,r2
  8119e8:	e0bfff17 	ldw	r2,-4(fp)
  8119ec:	1885883a 	add	r2,r3,r2
  8119f0:	e0fff917 	ldw	r3,-28(fp)
  8119f4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  8119f8:	e13ff717 	ldw	r4,-36(fp)
  8119fc:	21000044 	addi	r4,r4,1
  811a00:	e13ff715 	stw	r4,-36(fp)
  811a04:	e0bffb17 	ldw	r2,-20(fp)
  811a08:	e0fff717 	ldw	r3,-36(fp)
  811a0c:	10fff12e 	bgeu	r2,r3,8119d4 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  811a10:	e037883a 	mov	sp,fp
  811a14:	df000017 	ldw	fp,0(sp)
  811a18:	dec00104 	addi	sp,sp,4
  811a1c:	f800283a 	ret

00811a20 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  811a20:	defff104 	addi	sp,sp,-60
  811a24:	df000e15 	stw	fp,56(sp)
  811a28:	df000e04 	addi	fp,sp,56
  811a2c:	e13ff215 	stw	r4,-56(fp)
  811a30:	e17ff315 	stw	r5,-52(fp)
  811a34:	e1bff415 	stw	r6,-48(fp)
  811a38:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  811a3c:	e0bff217 	ldw	r2,-56(fp)
  811a40:	10800f17 	ldw	r2,60(r2)
  811a44:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  811a48:	e0bff217 	ldw	r2,-56(fp)
  811a4c:	10801017 	ldw	r2,64(r2)
  811a50:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  811a54:	e0bff317 	ldw	r2,-52(fp)
  811a58:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  811a5c:	e0fff417 	ldw	r3,-48(fp)
  811a60:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  811a64:	e13ff517 	ldw	r4,-44(fp)
  811a68:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  811a6c:	e0800117 	ldw	r2,4(fp)
  811a70:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  811a74:	e0fffa17 	ldw	r3,-24(fp)
  811a78:	e13ffb17 	ldw	r4,-20(fp)
  811a7c:	1900042e 	bgeu	r3,r4,811a90 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
  811a80:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  811a84:	e0fffa17 	ldw	r3,-24(fp)
  811a88:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  811a8c:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  811a90:	e13ffc17 	ldw	r4,-16(fp)
  811a94:	e0bffe17 	ldw	r2,-8(fp)
  811a98:	2080d12e 	bgeu	r4,r2,811de0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
  811a9c:	e0fffb17 	ldw	r3,-20(fp)
  811aa0:	e13ffd17 	ldw	r4,-12(fp)
  811aa4:	19000136 	bltu	r3,r4,811aac <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  811aa8:	0000cd06 	br	811de0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  811aac:	e0bffa17 	ldw	r2,-24(fp)
  811ab0:	e0fffd17 	ldw	r3,-12(fp)
  811ab4:	10c00336 	bltu	r2,r3,811ac4 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
  811ab8:	e13ffd17 	ldw	r4,-12(fp)
  811abc:	213fffc4 	addi	r4,r4,-1
  811ac0:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  811ac4:	e0800217 	ldw	r2,8(fp)
  811ac8:	10800058 	cmpnei	r2,r2,1
  811acc:	1000041e 	bne	r2,zero,811ae0 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  811ad0:	e0bff217 	ldw	r2,-56(fp)
  811ad4:	10800c17 	ldw	r2,48(r2)
  811ad8:	e0bfff15 	stw	r2,-4(fp)
  811adc:	00000306 	br	811aec <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  811ae0:	e0bff217 	ldw	r2,-56(fp)
  811ae4:	10800b17 	ldw	r2,44(r2)
  811ae8:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  811aec:	e0bff217 	ldw	r2,-56(fp)
  811af0:	10800d17 	ldw	r2,52(r2)
  811af4:	1004c03a 	cmpne	r2,r2,zero
  811af8:	1000571e 	bne	r2,zero,811c58 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  811afc:	e0bff217 	ldw	r2,-56(fp)
  811b00:	10801317 	ldw	r2,76(r2)
  811b04:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  811b08:	e0bff717 	ldw	r2,-36(fp)
  811b0c:	e0fffb17 	ldw	r3,-20(fp)
  811b10:	1884983a 	sll	r2,r3,r2
  811b14:	e13fff17 	ldw	r4,-4(fp)
  811b18:	2089883a 	add	r4,r4,r2
  811b1c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  811b20:	e0bff217 	ldw	r2,-56(fp)
  811b24:	10800e17 	ldw	r2,56(r2)
  811b28:	10800058 	cmpnei	r2,r2,1
  811b2c:	1000151e 	bne	r2,zero,811b84 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
  811b30:	e0bffb17 	ldw	r2,-20(fp)
  811b34:	e0bff815 	stw	r2,-32(fp)
  811b38:	00000e06 	br	811b74 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  811b3c:	e0ffff17 	ldw	r3,-4(fp)
  811b40:	e0bffc17 	ldw	r2,-16(fp)
  811b44:	1885883a 	add	r2,r3,r2
  811b48:	e0fff917 	ldw	r3,-28(fp)
  811b4c:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  811b50:	e0fff717 	ldw	r3,-36(fp)
  811b54:	00800044 	movi	r2,1
  811b58:	10c4983a 	sll	r2,r2,r3
  811b5c:	e0ffff17 	ldw	r3,-4(fp)
  811b60:	1887883a 	add	r3,r3,r2
  811b64:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  811b68:	e13ff817 	ldw	r4,-32(fp)
  811b6c:	21000044 	addi	r4,r4,1
  811b70:	e13ff815 	stw	r4,-32(fp)
  811b74:	e0bffa17 	ldw	r2,-24(fp)
  811b78:	e0fff817 	ldw	r3,-32(fp)
  811b7c:	10ffef2e 	bgeu	r2,r3,811b3c <alt_up_pixel_buffer_dma_draw_vline+0x11c>
  811b80:	00009706 	br	811de0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  811b84:	e0bff217 	ldw	r2,-56(fp)
  811b88:	10800e17 	ldw	r2,56(r2)
  811b8c:	10800098 	cmpnei	r2,r2,2
  811b90:	1000181e 	bne	r2,zero,811bf4 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
  811b94:	e13ffb17 	ldw	r4,-20(fp)
  811b98:	e13ff815 	stw	r4,-32(fp)
  811b9c:	00001106 	br	811be4 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  811ba0:	e0fffc17 	ldw	r3,-16(fp)
  811ba4:	e0fffc17 	ldw	r3,-16(fp)
  811ba8:	18c5883a 	add	r2,r3,r3
  811bac:	1007883a 	mov	r3,r2
  811bb0:	e0bfff17 	ldw	r2,-4(fp)
  811bb4:	1885883a 	add	r2,r3,r2
  811bb8:	e0fff917 	ldw	r3,-28(fp)
  811bbc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  811bc0:	e0fff717 	ldw	r3,-36(fp)
  811bc4:	00800044 	movi	r2,1
  811bc8:	10c4983a 	sll	r2,r2,r3
  811bcc:	e13fff17 	ldw	r4,-4(fp)
  811bd0:	2089883a 	add	r4,r4,r2
  811bd4:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  811bd8:	e0bff817 	ldw	r2,-32(fp)
  811bdc:	10800044 	addi	r2,r2,1
  811be0:	e0bff815 	stw	r2,-32(fp)
  811be4:	e0fffa17 	ldw	r3,-24(fp)
  811be8:	e13ff817 	ldw	r4,-32(fp)
  811bec:	193fec2e 	bgeu	r3,r4,811ba0 <alt_up_pixel_buffer_dma_draw_vline+0x180>
  811bf0:	00007b06 	br	811de0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  811bf4:	e0bffb17 	ldw	r2,-20(fp)
  811bf8:	e0bff815 	stw	r2,-32(fp)
  811bfc:	00001206 	br	811c48 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  811c00:	e0fffc17 	ldw	r3,-16(fp)
  811c04:	e0fffc17 	ldw	r3,-16(fp)
  811c08:	18c5883a 	add	r2,r3,r3
  811c0c:	1085883a 	add	r2,r2,r2
  811c10:	1007883a 	mov	r3,r2
  811c14:	e0bfff17 	ldw	r2,-4(fp)
  811c18:	1885883a 	add	r2,r3,r2
  811c1c:	e0fff917 	ldw	r3,-28(fp)
  811c20:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  811c24:	e0fff717 	ldw	r3,-36(fp)
  811c28:	00800044 	movi	r2,1
  811c2c:	10c4983a 	sll	r2,r2,r3
  811c30:	e13fff17 	ldw	r4,-4(fp)
  811c34:	2089883a 	add	r4,r4,r2
  811c38:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  811c3c:	e0bff817 	ldw	r2,-32(fp)
  811c40:	10800044 	addi	r2,r2,1
  811c44:	e0bff815 	stw	r2,-32(fp)
  811c48:	e0fffa17 	ldw	r3,-24(fp)
  811c4c:	e13ff817 	ldw	r4,-32(fp)
  811c50:	193feb2e 	bgeu	r3,r4,811c00 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
  811c54:	00006206 	br	811de0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  811c58:	e0bff217 	ldw	r2,-56(fp)
  811c5c:	10800e17 	ldw	r2,56(r2)
  811c60:	10800058 	cmpnei	r2,r2,1
  811c64:	1000191e 	bne	r2,zero,811ccc <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
  811c68:	e0fffb17 	ldw	r3,-20(fp)
  811c6c:	e13ffe17 	ldw	r4,-8(fp)
  811c70:	1905383a 	mul	r2,r3,r4
  811c74:	e0ffff17 	ldw	r3,-4(fp)
  811c78:	1887883a 	add	r3,r3,r2
  811c7c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  811c80:	e13ffb17 	ldw	r4,-20(fp)
  811c84:	e13ff615 	stw	r4,-40(fp)
  811c88:	00000c06 	br	811cbc <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  811c8c:	e0ffff17 	ldw	r3,-4(fp)
  811c90:	e0bffc17 	ldw	r2,-16(fp)
  811c94:	1885883a 	add	r2,r3,r2
  811c98:	e0fff917 	ldw	r3,-28(fp)
  811c9c:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  811ca0:	e0bfff17 	ldw	r2,-4(fp)
  811ca4:	e0fffe17 	ldw	r3,-8(fp)
  811ca8:	10c5883a 	add	r2,r2,r3
  811cac:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  811cb0:	e13ff617 	ldw	r4,-40(fp)
  811cb4:	21000044 	addi	r4,r4,1
  811cb8:	e13ff615 	stw	r4,-40(fp)
  811cbc:	e0bffa17 	ldw	r2,-24(fp)
  811cc0:	e0fff617 	ldw	r3,-40(fp)
  811cc4:	10fff12e 	bgeu	r2,r3,811c8c <alt_up_pixel_buffer_dma_draw_vline+0x26c>
  811cc8:	00004506 	br	811de0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  811ccc:	e0bff217 	ldw	r2,-56(fp)
  811cd0:	10800e17 	ldw	r2,56(r2)
  811cd4:	10800098 	cmpnei	r2,r2,2
  811cd8:	1000201e 	bne	r2,zero,811d5c <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
  811cdc:	e13ffe17 	ldw	r4,-8(fp)
  811ce0:	e13ffe17 	ldw	r4,-8(fp)
  811ce4:	2105883a 	add	r2,r4,r4
  811ce8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  811cec:	e0fffb17 	ldw	r3,-20(fp)
  811cf0:	e13ffe17 	ldw	r4,-8(fp)
  811cf4:	1905383a 	mul	r2,r3,r4
  811cf8:	e0ffff17 	ldw	r3,-4(fp)
  811cfc:	1887883a 	add	r3,r3,r2
  811d00:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  811d04:	e13ffb17 	ldw	r4,-20(fp)
  811d08:	e13ff615 	stw	r4,-40(fp)
  811d0c:	00000f06 	br	811d4c <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  811d10:	e0fffc17 	ldw	r3,-16(fp)
  811d14:	e0fffc17 	ldw	r3,-16(fp)
  811d18:	18c5883a 	add	r2,r3,r3
  811d1c:	1007883a 	mov	r3,r2
  811d20:	e0bfff17 	ldw	r2,-4(fp)
  811d24:	1885883a 	add	r2,r3,r2
  811d28:	e0fff917 	ldw	r3,-28(fp)
  811d2c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  811d30:	e13fff17 	ldw	r4,-4(fp)
  811d34:	e0bffe17 	ldw	r2,-8(fp)
  811d38:	2089883a 	add	r4,r4,r2
  811d3c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  811d40:	e0fff617 	ldw	r3,-40(fp)
  811d44:	18c00044 	addi	r3,r3,1
  811d48:	e0fff615 	stw	r3,-40(fp)
  811d4c:	e13ffa17 	ldw	r4,-24(fp)
  811d50:	e0bff617 	ldw	r2,-40(fp)
  811d54:	20bfee2e 	bgeu	r4,r2,811d10 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
  811d58:	00002106 	br	811de0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  811d5c:	e0fffe17 	ldw	r3,-8(fp)
  811d60:	e0fffe17 	ldw	r3,-8(fp)
  811d64:	18c5883a 	add	r2,r3,r3
  811d68:	1085883a 	add	r2,r2,r2
  811d6c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  811d70:	e13ffb17 	ldw	r4,-20(fp)
  811d74:	e0fffe17 	ldw	r3,-8(fp)
  811d78:	20c5383a 	mul	r2,r4,r3
  811d7c:	e13fff17 	ldw	r4,-4(fp)
  811d80:	2089883a 	add	r4,r4,r2
  811d84:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  811d88:	e0bffb17 	ldw	r2,-20(fp)
  811d8c:	e0bff615 	stw	r2,-40(fp)
  811d90:	00001006 	br	811dd4 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  811d94:	e0fffc17 	ldw	r3,-16(fp)
  811d98:	e0fffc17 	ldw	r3,-16(fp)
  811d9c:	18c5883a 	add	r2,r3,r3
  811da0:	1085883a 	add	r2,r2,r2
  811da4:	1007883a 	mov	r3,r2
  811da8:	e0bfff17 	ldw	r2,-4(fp)
  811dac:	1885883a 	add	r2,r3,r2
  811db0:	e0fff917 	ldw	r3,-28(fp)
  811db4:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  811db8:	e13fff17 	ldw	r4,-4(fp)
  811dbc:	e0bffe17 	ldw	r2,-8(fp)
  811dc0:	2089883a 	add	r4,r4,r2
  811dc4:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  811dc8:	e0fff617 	ldw	r3,-40(fp)
  811dcc:	18c00044 	addi	r3,r3,1
  811dd0:	e0fff615 	stw	r3,-40(fp)
  811dd4:	e13ffa17 	ldw	r4,-24(fp)
  811dd8:	e0bff617 	ldw	r2,-40(fp)
  811ddc:	20bfed2e 	bgeu	r4,r2,811d94 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  811de0:	e037883a 	mov	sp,fp
  811de4:	df000017 	ldw	fp,0(sp)
  811de8:	dec00104 	addi	sp,sp,4
  811dec:	f800283a 	ret

00811df0 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  811df0:	defff804 	addi	sp,sp,-32
  811df4:	dfc00715 	stw	ra,28(sp)
  811df8:	df000615 	stw	fp,24(sp)
  811dfc:	df000604 	addi	fp,sp,24
  811e00:	e13ffc15 	stw	r4,-16(fp)
  811e04:	e17ffd15 	stw	r5,-12(fp)
  811e08:	e1bffe15 	stw	r6,-8(fp)
  811e0c:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  811e10:	e0800317 	ldw	r2,12(fp)
  811e14:	d8800015 	stw	r2,0(sp)
  811e18:	e0800417 	ldw	r2,16(fp)
  811e1c:	d8800115 	stw	r2,4(sp)
  811e20:	e13ffc17 	ldw	r4,-16(fp)
  811e24:	e17ffd17 	ldw	r5,-12(fp)
  811e28:	e1bfff17 	ldw	r6,-4(fp)
  811e2c:	e1fffe17 	ldw	r7,-8(fp)
  811e30:	08116d00 	call	8116d0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  811e34:	e0800317 	ldw	r2,12(fp)
  811e38:	d8800015 	stw	r2,0(sp)
  811e3c:	e0800417 	ldw	r2,16(fp)
  811e40:	d8800115 	stw	r2,4(sp)
  811e44:	e13ffc17 	ldw	r4,-16(fp)
  811e48:	e17ffd17 	ldw	r5,-12(fp)
  811e4c:	e1bfff17 	ldw	r6,-4(fp)
  811e50:	e1c00217 	ldw	r7,8(fp)
  811e54:	08116d00 	call	8116d0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  811e58:	e0800317 	ldw	r2,12(fp)
  811e5c:	d8800015 	stw	r2,0(sp)
  811e60:	e0800417 	ldw	r2,16(fp)
  811e64:	d8800115 	stw	r2,4(sp)
  811e68:	e13ffc17 	ldw	r4,-16(fp)
  811e6c:	e17ffd17 	ldw	r5,-12(fp)
  811e70:	e1bffe17 	ldw	r6,-8(fp)
  811e74:	e1c00217 	ldw	r7,8(fp)
  811e78:	0811a200 	call	811a20 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  811e7c:	e0800317 	ldw	r2,12(fp)
  811e80:	d8800015 	stw	r2,0(sp)
  811e84:	e0800417 	ldw	r2,16(fp)
  811e88:	d8800115 	stw	r2,4(sp)
  811e8c:	e13ffc17 	ldw	r4,-16(fp)
  811e90:	e17fff17 	ldw	r5,-4(fp)
  811e94:	e1bffe17 	ldw	r6,-8(fp)
  811e98:	e1c00217 	ldw	r7,8(fp)
  811e9c:	0811a200 	call	811a20 <alt_up_pixel_buffer_dma_draw_vline>
}
  811ea0:	e037883a 	mov	sp,fp
  811ea4:	dfc00117 	ldw	ra,4(sp)
  811ea8:	df000017 	ldw	fp,0(sp)
  811eac:	dec00204 	addi	sp,sp,8
  811eb0:	f800283a 	ret

00811eb4 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  811eb4:	defffb04 	addi	sp,sp,-20
  811eb8:	df000415 	stw	fp,16(sp)
  811ebc:	df000404 	addi	fp,sp,16
  811ec0:	e13ffc15 	stw	r4,-16(fp)
  811ec4:	e17ffd15 	stw	r5,-12(fp)
  811ec8:	e1bffe15 	stw	r6,-8(fp)
  811ecc:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  811ed0:	e0c00217 	ldw	r3,8(fp)
  811ed4:	1804c03a 	cmpne	r2,r3,zero
  811ed8:	10000b1e 	bne	r2,zero,811f08 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  811edc:	e13ffd17 	ldw	r4,-12(fp)
  811ee0:	e0ffff17 	ldw	r3,-4(fp)
  811ee4:	20c5383a 	mul	r2,r4,r3
  811ee8:	e13ffe17 	ldw	r4,-8(fp)
  811eec:	1105883a 	add	r2,r2,r4
  811ef0:	1007883a 	mov	r3,r2
  811ef4:	e0bffc17 	ldw	r2,-16(fp)
  811ef8:	1885883a 	add	r2,r3,r2
  811efc:	e0c00117 	ldw	r3,4(fp)
  811f00:	10c00025 	stbio	r3,0(r2)
  811f04:	00001b06 	br	811f74 <helper_plot_pixel+0xc0>
	else if (mode == 1)
  811f08:	e1000217 	ldw	r4,8(fp)
  811f0c:	20800058 	cmpnei	r2,r4,1
  811f10:	10000c1e 	bne	r2,zero,811f44 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  811f14:	e0fffd17 	ldw	r3,-12(fp)
  811f18:	e13fff17 	ldw	r4,-4(fp)
  811f1c:	1905383a 	mul	r2,r3,r4
  811f20:	e0fffe17 	ldw	r3,-8(fp)
  811f24:	10c5883a 	add	r2,r2,r3
  811f28:	1085883a 	add	r2,r2,r2
  811f2c:	1007883a 	mov	r3,r2
  811f30:	e0bffc17 	ldw	r2,-16(fp)
  811f34:	1885883a 	add	r2,r3,r2
  811f38:	e1000117 	ldw	r4,4(fp)
  811f3c:	1100002d 	sthio	r4,0(r2)
  811f40:	00000c06 	br	811f74 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  811f44:	e0fffd17 	ldw	r3,-12(fp)
  811f48:	e13fff17 	ldw	r4,-4(fp)
  811f4c:	1905383a 	mul	r2,r3,r4
  811f50:	e0fffe17 	ldw	r3,-8(fp)
  811f54:	10c5883a 	add	r2,r2,r3
  811f58:	1085883a 	add	r2,r2,r2
  811f5c:	1085883a 	add	r2,r2,r2
  811f60:	1007883a 	mov	r3,r2
  811f64:	e0bffc17 	ldw	r2,-16(fp)
  811f68:	1885883a 	add	r2,r3,r2
  811f6c:	e1000117 	ldw	r4,4(fp)
  811f70:	11000035 	stwio	r4,0(r2)
}
  811f74:	e037883a 	mov	sp,fp
  811f78:	df000017 	ldw	fp,0(sp)
  811f7c:	dec00104 	addi	sp,sp,4
  811f80:	f800283a 	ret

00811f84 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  811f84:	deffe404 	addi	sp,sp,-112
  811f88:	dfc01b15 	stw	ra,108(sp)
  811f8c:	df001a15 	stw	fp,104(sp)
  811f90:	df001a04 	addi	fp,sp,104
  811f94:	e13fe815 	stw	r4,-96(fp)
  811f98:	e17fe915 	stw	r5,-92(fp)
  811f9c:	e1bfea15 	stw	r6,-88(fp)
  811fa0:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  811fa4:	e0bfe917 	ldw	r2,-92(fp)
  811fa8:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  811fac:	e0ffea17 	ldw	r3,-88(fp)
  811fb0:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  811fb4:	e13feb17 	ldw	r4,-84(fp)
  811fb8:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  811fbc:	e0800217 	ldw	r2,8(fp)
  811fc0:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  811fc4:	e0fff717 	ldw	r3,-36(fp)
  811fc8:	e13ff917 	ldw	r4,-28(fp)
  811fcc:	1905c83a 	sub	r2,r3,r4
  811fd0:	e0bfff15 	stw	r2,-4(fp)
  811fd4:	e0ffff17 	ldw	r3,-4(fp)
  811fd8:	1804403a 	cmpge	r2,r3,zero
  811fdc:	1000031e 	bne	r2,zero,811fec <alt_up_pixel_buffer_dma_draw_line+0x68>
  811fe0:	e13fff17 	ldw	r4,-4(fp)
  811fe4:	0109c83a 	sub	r4,zero,r4
  811fe8:	e13fff15 	stw	r4,-4(fp)
  811fec:	e0fff817 	ldw	r3,-32(fp)
  811ff0:	e13ffa17 	ldw	r4,-24(fp)
  811ff4:	1905c83a 	sub	r2,r3,r4
  811ff8:	e0bffe15 	stw	r2,-8(fp)
  811ffc:	e0fffe17 	ldw	r3,-8(fp)
  812000:	1804403a 	cmpge	r2,r3,zero
  812004:	1000031e 	bne	r2,zero,812014 <alt_up_pixel_buffer_dma_draw_line+0x90>
  812008:	e13ffe17 	ldw	r4,-8(fp)
  81200c:	0109c83a 	sub	r4,zero,r4
  812010:	e13ffe15 	stw	r4,-8(fp)
  812014:	e0fffe17 	ldw	r3,-8(fp)
  812018:	e13fff17 	ldw	r4,-4(fp)
  81201c:	1904803a 	cmplt	r2,r3,r4
  812020:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  812024:	e0bfe817 	ldw	r2,-96(fp)
  812028:	10800e17 	ldw	r2,56(r2)
  81202c:	10800060 	cmpeqi	r2,r2,1
  812030:	10000c1e 	bne	r2,zero,812064 <alt_up_pixel_buffer_dma_draw_line+0xe0>
  812034:	e0bfe817 	ldw	r2,-96(fp)
  812038:	10800e17 	ldw	r2,56(r2)
  81203c:	10800098 	cmpnei	r2,r2,2
  812040:	1000031e 	bne	r2,zero,812050 <alt_up_pixel_buffer_dma_draw_line+0xcc>
  812044:	00800044 	movi	r2,1
  812048:	e0bffc15 	stw	r2,-16(fp)
  81204c:	00000206 	br	812058 <alt_up_pixel_buffer_dma_draw_line+0xd4>
  812050:	00c00084 	movi	r3,2
  812054:	e0fffc15 	stw	r3,-16(fp)
  812058:	e13ffc17 	ldw	r4,-16(fp)
  81205c:	e13ffd15 	stw	r4,-12(fp)
  812060:	00000106 	br	812068 <alt_up_pixel_buffer_dma_draw_line+0xe4>
  812064:	e03ffd15 	stw	zero,-12(fp)
  812068:	e0bffd17 	ldw	r2,-12(fp)
  81206c:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  812070:	e0c00317 	ldw	r3,12(fp)
  812074:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  812078:	e0bfe817 	ldw	r2,-96(fp)
  81207c:	10800d17 	ldw	r2,52(r2)
  812080:	1004c03a 	cmpne	r2,r2,zero
  812084:	1000091e 	bne	r2,zero,8120ac <alt_up_pixel_buffer_dma_draw_line+0x128>
  812088:	e0bfe817 	ldw	r2,-96(fp)
  81208c:	10c01317 	ldw	r3,76(r2)
  812090:	e0bfef17 	ldw	r2,-68(fp)
  812094:	1885c83a 	sub	r2,r3,r2
  812098:	1007883a 	mov	r3,r2
  81209c:	00800044 	movi	r2,1
  8120a0:	10c4983a 	sll	r2,r2,r3
  8120a4:	e0bffb15 	stw	r2,-20(fp)
  8120a8:	00000306 	br	8120b8 <alt_up_pixel_buffer_dma_draw_line+0x134>
  8120ac:	e0bfe817 	ldw	r2,-96(fp)
  8120b0:	10800f17 	ldw	r2,60(r2)
  8120b4:	e0bffb15 	stw	r2,-20(fp)
  8120b8:	e13ffb17 	ldw	r4,-20(fp)
  8120bc:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  8120c0:	e0800417 	ldw	r2,16(fp)
  8120c4:	10800058 	cmpnei	r2,r2,1
  8120c8:	1000041e 	bne	r2,zero,8120dc <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  8120cc:	e0bfe817 	ldw	r2,-96(fp)
  8120d0:	10800c17 	ldw	r2,48(r2)
  8120d4:	e0bfed15 	stw	r2,-76(fp)
  8120d8:	00000306 	br	8120e8 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  8120dc:	e0bfe817 	ldw	r2,-96(fp)
  8120e0:	10800b17 	ldw	r2,44(r2)
  8120e4:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  8120e8:	e0fff603 	ldbu	r3,-40(fp)
  8120ec:	18803fcc 	andi	r2,r3,255
  8120f0:	1080201c 	xori	r2,r2,128
  8120f4:	10bfe004 	addi	r2,r2,-128
  8120f8:	10800050 	cmplti	r2,r2,1
  8120fc:	10000c1e 	bne	r2,zero,812130 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  812100:	e13ffa17 	ldw	r4,-24(fp)
  812104:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  812108:	e0bff917 	ldw	r2,-28(fp)
  81210c:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  812110:	e0fff317 	ldw	r3,-52(fp)
  812114:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  812118:	e13ff817 	ldw	r4,-32(fp)
  81211c:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  812120:	e0bff717 	ldw	r2,-36(fp)
  812124:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  812128:	e0fff317 	ldw	r3,-52(fp)
  81212c:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  812130:	e13ff817 	ldw	r4,-32(fp)
  812134:	e0bffa17 	ldw	r2,-24(fp)
  812138:	20800c0e 	bge	r4,r2,81216c <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  81213c:	e0fffa17 	ldw	r3,-24(fp)
  812140:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  812144:	e13ff817 	ldw	r4,-32(fp)
  812148:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  81214c:	e0bff317 	ldw	r2,-52(fp)
  812150:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  812154:	e0fff917 	ldw	r3,-28(fp)
  812158:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  81215c:	e13ff717 	ldw	r4,-36(fp)
  812160:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  812164:	e0bff317 	ldw	r2,-52(fp)
  812168:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  81216c:	e0fff817 	ldw	r3,-32(fp)
  812170:	e13ffa17 	ldw	r4,-24(fp)
  812174:	1907c83a 	sub	r3,r3,r4
  812178:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  81217c:	e0fff717 	ldw	r3,-36(fp)
  812180:	e13ff917 	ldw	r4,-28(fp)
  812184:	1905c83a 	sub	r2,r3,r4
  812188:	e0bff415 	stw	r2,-48(fp)
  81218c:	e0fff417 	ldw	r3,-48(fp)
  812190:	1804403a 	cmpge	r2,r3,zero
  812194:	1000031e 	bne	r2,zero,8121a4 <alt_up_pixel_buffer_dma_draw_line+0x220>
  812198:	e13ff417 	ldw	r4,-48(fp)
  81219c:	0109c83a 	sub	r4,zero,r4
  8121a0:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  8121a4:	e0fff517 	ldw	r3,-44(fp)
  8121a8:	1804d7fa 	srli	r2,r3,31
  8121ac:	e13ff517 	ldw	r4,-44(fp)
  8121b0:	1105883a 	add	r2,r2,r4
  8121b4:	1005d07a 	srai	r2,r2,1
  8121b8:	0085c83a 	sub	r2,zero,r2
  8121bc:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  8121c0:	e0bff917 	ldw	r2,-28(fp)
  8121c4:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  8121c8:	e0fff917 	ldw	r3,-28(fp)
  8121cc:	e13ff717 	ldw	r4,-36(fp)
  8121d0:	1900030e 	bge	r3,r4,8121e0 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  8121d4:	00800044 	movi	r2,1
  8121d8:	e0bff215 	stw	r2,-56(fp)
  8121dc:	00000206 	br	8121e8 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  8121e0:	00ffffc4 	movi	r3,-1
  8121e4:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  8121e8:	e13ff603 	ldbu	r4,-40(fp)
  8121ec:	20803fcc 	andi	r2,r4,255
  8121f0:	1080201c 	xori	r2,r2,128
  8121f4:	10bfe004 	addi	r2,r2,-128
  8121f8:	10800058 	cmpnei	r2,r2,1
  8121fc:	1000221e 	bne	r2,zero,812288 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  812200:	e0bffa17 	ldw	r2,-24(fp)
  812204:	e0bff115 	stw	r2,-60(fp)
  812208:	00001b06 	br	812278 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  81220c:	e0ffee17 	ldw	r3,-72(fp)
  812210:	d8c00015 	stw	r3,0(sp)
  812214:	e13fef17 	ldw	r4,-68(fp)
  812218:	d9000115 	stw	r4,4(sp)
  81221c:	e13fed17 	ldw	r4,-76(fp)
  812220:	e17fec17 	ldw	r5,-80(fp)
  812224:	e1bff017 	ldw	r6,-64(fp)
  812228:	e1fff117 	ldw	r7,-60(fp)
  81222c:	0811eb40 	call	811eb4 <helper_plot_pixel>
			error = error + deltay;
  812230:	e0bff317 	ldw	r2,-52(fp)
  812234:	e0fff417 	ldw	r3,-48(fp)
  812238:	10c5883a 	add	r2,r2,r3
  81223c:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  812240:	e13ff317 	ldw	r4,-52(fp)
  812244:	20800050 	cmplti	r2,r4,1
  812248:	1000081e 	bne	r2,zero,81226c <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  81224c:	e0bff017 	ldw	r2,-64(fp)
  812250:	e0fff217 	ldw	r3,-56(fp)
  812254:	10c5883a 	add	r2,r2,r3
  812258:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  81225c:	e13ff317 	ldw	r4,-52(fp)
  812260:	e0bff517 	ldw	r2,-44(fp)
  812264:	2089c83a 	sub	r4,r4,r2
  812268:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  81226c:	e0fff117 	ldw	r3,-60(fp)
  812270:	18c00044 	addi	r3,r3,1
  812274:	e0fff115 	stw	r3,-60(fp)
  812278:	e13ff817 	ldw	r4,-32(fp)
  81227c:	e0bff117 	ldw	r2,-60(fp)
  812280:	20bfe20e 	bge	r4,r2,81220c <alt_up_pixel_buffer_dma_draw_line+0x288>
  812284:	00002106 	br	81230c <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  812288:	e0fffa17 	ldw	r3,-24(fp)
  81228c:	e0fff115 	stw	r3,-60(fp)
  812290:	00001b06 	br	812300 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  812294:	e13fee17 	ldw	r4,-72(fp)
  812298:	d9000015 	stw	r4,0(sp)
  81229c:	e0bfef17 	ldw	r2,-68(fp)
  8122a0:	d8800115 	stw	r2,4(sp)
  8122a4:	e13fed17 	ldw	r4,-76(fp)
  8122a8:	e17fec17 	ldw	r5,-80(fp)
  8122ac:	e1bff117 	ldw	r6,-60(fp)
  8122b0:	e1fff017 	ldw	r7,-64(fp)
  8122b4:	0811eb40 	call	811eb4 <helper_plot_pixel>
			error = error + deltay;
  8122b8:	e0fff317 	ldw	r3,-52(fp)
  8122bc:	e13ff417 	ldw	r4,-48(fp)
  8122c0:	1907883a 	add	r3,r3,r4
  8122c4:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  8122c8:	e0fff317 	ldw	r3,-52(fp)
  8122cc:	18800050 	cmplti	r2,r3,1
  8122d0:	1000081e 	bne	r2,zero,8122f4 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  8122d4:	e13ff017 	ldw	r4,-64(fp)
  8122d8:	e0bff217 	ldw	r2,-56(fp)
  8122dc:	2089883a 	add	r4,r4,r2
  8122e0:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  8122e4:	e0fff317 	ldw	r3,-52(fp)
  8122e8:	e13ff517 	ldw	r4,-44(fp)
  8122ec:	1907c83a 	sub	r3,r3,r4
  8122f0:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  8122f4:	e0bff117 	ldw	r2,-60(fp)
  8122f8:	10800044 	addi	r2,r2,1
  8122fc:	e0bff115 	stw	r2,-60(fp)
  812300:	e0fff817 	ldw	r3,-32(fp)
  812304:	e13ff117 	ldw	r4,-60(fp)
  812308:	193fe20e 	bge	r3,r4,812294 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  81230c:	e037883a 	mov	sp,fp
  812310:	dfc00117 	ldw	ra,4(sp)
  812314:	df000017 	ldw	fp,0(sp)
  812318:	dec00204 	addi	sp,sp,8
  81231c:	f800283a 	ret

00812320 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset);

bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
  812320:	defffa04 	addi	sp,sp,-24
  812324:	dfc00515 	stw	ra,20(sp)
  812328:	df000415 	stw	fp,16(sp)
  81232c:	df000404 	addi	fp,sp,16
  812330:	e13ffe15 	stw	r4,-8(fp)
  812334:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
  812338:	e03ffd15 	stw	zero,-12(fp)

	if (alt_up_sd_card_is_Present()) {
  81233c:	081514c0 	call	81514c <alt_up_sd_card_is_Present>
  812340:	1005003a 	cmpeq	r2,r2,zero
  812344:	1000221e 	bne	r2,zero,8123d0 <Write_Sector_Data+0xb0>
		short int reg_state = 0xff;
  812348:	00803fc4 	movi	r2,255
  81234c:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  812350:	d0a72017 	ldw	r2,-25472(gp)
  812354:	1009883a 	mov	r4,r2
  812358:	e0fffe17 	ldw	r3,-8(fp)
  81235c:	e0bfff17 	ldw	r2,-4(fp)
  812360:	1885883a 	add	r2,r3,r2
  812364:	1006927a 	slli	r3,r2,9
  812368:	2005883a 	mov	r2,r4
  81236c:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  812370:	d0a71f17 	ldw	r2,-25476(gp)
  812374:	1007883a 	mov	r3,r2
  812378:	00800604 	movi	r2,24
  81237c:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  812380:	d0a71c17 	ldw	r2,-25488(gp)
  812384:	1080002b 	ldhuio	r2,0(r2)
  812388:	e0bffc0d 	sth	r2,-16(fp)
		} while ((reg_state & 0x04) != 0);
  81238c:	e0bffc0b 	ldhu	r2,-16(fp)
  812390:	10bfffcc 	andi	r2,r2,65535
  812394:	1080010c 	andi	r2,r2,4
  812398:	1004c03a 	cmpne	r2,r2,zero
  81239c:	103ff81e 	bne	r2,zero,812380 <Write_Sector_Data+0x60>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
  8123a0:	e0bffc0b 	ldhu	r2,-16(fp)
  8123a4:	10bfffcc 	andi	r2,r2,65535
  8123a8:	1080040c 	andi	r2,r2,16
  8123ac:	1004c03a 	cmpne	r2,r2,zero
  8123b0:	1000071e 	bne	r2,zero,8123d0 <Write_Sector_Data+0xb0>
			result = true;
  8123b4:	00800044 	movi	r2,1
  8123b8:	e0bffd15 	stw	r2,-12(fp)
			current_sector_modified = false;
  8123bc:	d0272515 	stw	zero,-25452(gp)
			current_sector_index = sector_index + partition_offset;
  8123c0:	e0fffe17 	ldw	r3,-8(fp)
  8123c4:	e0bfff17 	ldw	r2,-4(fp)
  8123c8:	1885883a 	add	r2,r3,r2
  8123cc:	d0a72615 	stw	r2,-25448(gp)
		}
	}
	return result;
  8123d0:	e0bffd17 	ldw	r2,-12(fp)
}
  8123d4:	e037883a 	mov	sp,fp
  8123d8:	dfc00117 	ldw	ra,4(sp)
  8123dc:	df000017 	ldw	fp,0(sp)
  8123e0:	dec00204 	addi	sp,sp,8
  8123e4:	f800283a 	ret

008123e8 <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
  8123e8:	defffd04 	addi	sp,sp,-12
  8123ec:	dfc00215 	stw	ra,8(sp)
  8123f0:	df000115 	stw	fp,4(sp)
  8123f4:	df000104 	addi	fp,sp,4
	bool result = true;
  8123f8:	00800044 	movi	r2,1
  8123fc:	e0bfff15 	stw	r2,-4(fp)
	if (current_sector_modified) {
  812400:	d0a72517 	ldw	r2,-25452(gp)
  812404:	1005003a 	cmpeq	r2,r2,zero
  812408:	1000051e 	bne	r2,zero,812420 <Save_Modified_Sector+0x38>
		result = Write_Sector_Data(current_sector_index, 0);
  81240c:	d0a72617 	ldw	r2,-25448(gp)
  812410:	1009883a 	mov	r4,r2
  812414:	000b883a 	mov	r5,zero
  812418:	08123200 	call	812320 <Write_Sector_Data>
  81241c:	e0bfff15 	stw	r2,-4(fp)
	}
	return result;
  812420:	e0bfff17 	ldw	r2,-4(fp)
}
  812424:	e037883a 	mov	sp,fp
  812428:	dfc00117 	ldw	ra,4(sp)
  81242c:	df000017 	ldw	fp,0(sp)
  812430:	dec00204 	addi	sp,sp,8
  812434:	f800283a 	ret

00812438 <Read_Sector_Data>:

bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  812438:	defff904 	addi	sp,sp,-28
  81243c:	dfc00615 	stw	ra,24(sp)
  812440:	df000515 	stw	fp,20(sp)
  812444:	df000504 	addi	fp,sp,20
  812448:	e13ffd15 	stw	r4,-12(fp)
  81244c:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
  812450:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
  812454:	081514c0 	call	81514c <alt_up_sd_card_is_Present>
  812458:	1005003a 	cmpeq	r2,r2,zero
  81245c:	10002d1e 	bne	r2,zero,812514 <Read_Sector_Data+0xdc>
		short int reg_state = 0xff;
  812460:	00803fc4 	movi	r2,255
  812464:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
  812468:	d0a72517 	ldw	r2,-25452(gp)
  81246c:	1005003a 	cmpeq	r2,r2,zero
  812470:	1000081e 	bne	r2,zero,812494 <Read_Sector_Data+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
  812474:	d0a72617 	ldw	r2,-25448(gp)
  812478:	1009883a 	mov	r4,r2
  81247c:	000b883a 	mov	r5,zero
  812480:	08123200 	call	812320 <Write_Sector_Data>
  812484:	1004c03a 	cmpne	r2,r2,zero
  812488:	1000021e 	bne	r2,zero,812494 <Read_Sector_Data+0x5c>
				return false;
  81248c:	e03fff15 	stw	zero,-4(fp)
  812490:	00002206 	br	81251c <Read_Sector_Data+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  812494:	d0a72017 	ldw	r2,-25472(gp)
  812498:	1009883a 	mov	r4,r2
  81249c:	e0fffd17 	ldw	r3,-12(fp)
  8124a0:	e0bffe17 	ldw	r2,-8(fp)
  8124a4:	1885883a 	add	r2,r3,r2
  8124a8:	1006927a 	slli	r3,r2,9
  8124ac:	2005883a 	mov	r2,r4
  8124b0:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  8124b4:	d0a71f17 	ldw	r2,-25476(gp)
  8124b8:	1007883a 	mov	r3,r2
  8124bc:	00800444 	movi	r2,17
  8124c0:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  8124c4:	d0a71c17 	ldw	r2,-25488(gp)
  8124c8:	1080002b 	ldhuio	r2,0(r2)
  8124cc:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
  8124d0:	e0bffb0b 	ldhu	r2,-20(fp)
  8124d4:	10bfffcc 	andi	r2,r2,65535
  8124d8:	1080010c 	andi	r2,r2,4
  8124dc:	1004c03a 	cmpne	r2,r2,zero
  8124e0:	103ff81e 	bne	r2,zero,8124c4 <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
  8124e4:	e0bffb0b 	ldhu	r2,-20(fp)
  8124e8:	10bfffcc 	andi	r2,r2,65535
  8124ec:	1080040c 	andi	r2,r2,16
  8124f0:	1004c03a 	cmpne	r2,r2,zero
  8124f4:	1000071e 	bne	r2,zero,812514 <Read_Sector_Data+0xdc>
			result = true;
  8124f8:	00800044 	movi	r2,1
  8124fc:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
  812500:	d0272515 	stw	zero,-25452(gp)
			current_sector_index = sector_index + partition_offset;
  812504:	e0fffd17 	ldw	r3,-12(fp)
  812508:	e0bffe17 	ldw	r2,-8(fp)
  81250c:	1885883a 	add	r2,r3,r2
  812510:	d0a72615 	stw	r2,-25448(gp)
		}
	}
	return result;
  812514:	e0bffc17 	ldw	r2,-16(fp)
  812518:	e0bfff15 	stw	r2,-4(fp)
  81251c:	e0bfff17 	ldw	r2,-4(fp)
}
  812520:	e037883a 	mov	sp,fp
  812524:	dfc00117 	ldw	ra,4(sp)
  812528:	df000017 	ldw	fp,0(sp)
  81252c:	dec00204 	addi	sp,sp,8
  812530:	f800283a 	ret

00812534 <get_cluster_flag>:

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  812534:	defffa04 	addi	sp,sp,-24
  812538:	dfc00515 	stw	ra,20(sp)
  81253c:	df000415 	stw	fp,16(sp)
  812540:	df000404 	addi	fp,sp,16
  812544:	e13ffd15 	stw	r4,-12(fp)
  812548:	e17ffe15 	stw	r5,-8(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  81254c:	e0bffd17 	ldw	r2,-12(fp)
  812550:	1006d23a 	srli	r3,r2,8
  812554:	d0a72217 	ldw	r2,-25464(gp)
  812558:	1885883a 	add	r2,r3,r2
  81255c:	e0bffc15 	stw	r2,-16(fp)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  812560:	008020b4 	movhi	r2,130
  812564:	10afc404 	addi	r2,r2,-16624
  812568:	10c01117 	ldw	r3,68(r2)
  81256c:	e0bffc17 	ldw	r2,-16(fp)
  812570:	10c5883a 	add	r2,r2,r3
  812574:	e0bffc15 	stw	r2,-16(fp)

	if (sector_index != current_sector_index) {
  812578:	d0e72617 	ldw	r3,-25448(gp)
  81257c:	e0bffc17 	ldw	r2,-16(fp)
  812580:	10c00726 	beq	r2,r3,8125a0 <get_cluster_flag+0x6c>
		if (Read_Sector_Data(sector_index, 0) == false) {
  812584:	e13ffc17 	ldw	r4,-16(fp)
  812588:	000b883a 	mov	r5,zero
  81258c:	08124380 	call	812438 <Read_Sector_Data>
  812590:	1004c03a 	cmpne	r2,r2,zero
  812594:	1000021e 	bne	r2,zero,8125a0 <get_cluster_flag+0x6c>
			return false;
  812598:	e03fff15 	stw	zero,-4(fp)
  81259c:	00000d06 	br	8125d4 <get_cluster_flag+0xa0>
		}
	}
	*flag
  8125a0:	d0a72417 	ldw	r2,-25456(gp)
  8125a4:	10800a17 	ldw	r2,40(r2)
  8125a8:	1007883a 	mov	r3,r2
  8125ac:	e0bffd17 	ldw	r2,-12(fp)
  8125b0:	10803fcc 	andi	r2,r2,255
  8125b4:	1085883a 	add	r2,r2,r2
  8125b8:	1885883a 	add	r2,r3,r2
  8125bc:	1080002b 	ldhuio	r2,0(r2)
  8125c0:	1007883a 	mov	r3,r2
  8125c4:	e0bffe17 	ldw	r2,-8(fp)
  8125c8:	10c0000d 	sth	r3,0(r2)
			= (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
	return true;
  8125cc:	00800044 	movi	r2,1
  8125d0:	e0bfff15 	stw	r2,-4(fp)
  8125d4:	e0bfff17 	ldw	r2,-4(fp)
}
  8125d8:	e037883a 	mov	sp,fp
  8125dc:	dfc00117 	ldw	ra,4(sp)
  8125e0:	df000017 	ldw	fp,0(sp)
  8125e4:	dec00204 	addi	sp,sp,8
  8125e8:	f800283a 	ret

008125ec <mark_cluster>:

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
  8125ec:	defff904 	addi	sp,sp,-28
  8125f0:	dfc00615 	stw	ra,24(sp)
  8125f4:	df000515 	stw	fp,20(sp)
  8125f8:	df000504 	addi	fp,sp,20
  8125fc:	e13ffc15 	stw	r4,-16(fp)
  812600:	e1bffe15 	stw	r6,-8(fp)
  812604:	e17ffd0d 	sth	r5,-12(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  812608:	e0bffc17 	ldw	r2,-16(fp)
  81260c:	1006d23a 	srli	r3,r2,8
  812610:	d0a72217 	ldw	r2,-25464(gp)
  812614:	1885883a 	add	r2,r3,r2
  812618:	e0bffb15 	stw	r2,-20(fp)

	if (first_fat) {
  81261c:	e0bffe17 	ldw	r2,-8(fp)
  812620:	1005003a 	cmpeq	r2,r2,zero
  812624:	1000071e 	bne	r2,zero,812644 <mark_cluster+0x58>
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  812628:	008020b4 	movhi	r2,130
  81262c:	10afc404 	addi	r2,r2,-16624
  812630:	10c01117 	ldw	r3,68(r2)
  812634:	e0bffb17 	ldw	r2,-20(fp)
  812638:	10c5883a 	add	r2,r2,r3
  81263c:	e0bffb15 	stw	r2,-20(fp)
  812640:	00000606 	br	81265c <mark_cluster+0x70>
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
  812644:	008020b4 	movhi	r2,130
  812648:	10afc404 	addi	r2,r2,-16624
  81264c:	10c01217 	ldw	r3,72(r2)
  812650:	e0bffb17 	ldw	r2,-20(fp)
  812654:	10c5883a 	add	r2,r2,r3
  812658:	e0bffb15 	stw	r2,-20(fp)
	}

	if (sector_index != current_sector_index) {
  81265c:	d0e72617 	ldw	r3,-25448(gp)
  812660:	e0bffb17 	ldw	r2,-20(fp)
  812664:	10c00726 	beq	r2,r3,812684 <mark_cluster+0x98>
		if (Read_Sector_Data(sector_index, 0) == false) {
  812668:	e13ffb17 	ldw	r4,-20(fp)
  81266c:	000b883a 	mov	r5,zero
  812670:	08124380 	call	812438 <Read_Sector_Data>
  812674:	1004c03a 	cmpne	r2,r2,zero
  812678:	1000021e 	bne	r2,zero,812684 <mark_cluster+0x98>
			return false;
  81267c:	e03fff15 	stw	zero,-4(fp)
  812680:	00000d06 	br	8126b8 <mark_cluster+0xcc>
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  812684:	d0a72417 	ldw	r2,-25456(gp)
  812688:	10800a17 	ldw	r2,40(r2)
  81268c:	1007883a 	mov	r3,r2
  812690:	e0bffc17 	ldw	r2,-16(fp)
  812694:	10803fcc 	andi	r2,r2,255
  812698:	1085883a 	add	r2,r2,r2
  81269c:	1885883a 	add	r2,r3,r2
  8126a0:	e0fffd0f 	ldh	r3,-12(fp)
  8126a4:	10c0002d 	sthio	r3,0(r2)
	current_sector_modified = true;
  8126a8:	00800044 	movi	r2,1
  8126ac:	d0a72515 	stw	r2,-25452(gp)
	return true;
  8126b0:	00800044 	movi	r2,1
  8126b4:	e0bfff15 	stw	r2,-4(fp)
  8126b8:	e0bfff17 	ldw	r2,-4(fp)
}
  8126bc:	e037883a 	mov	sp,fp
  8126c0:	dfc00117 	ldw	ra,4(sp)
  8126c4:	df000017 	ldw	fp,0(sp)
  8126c8:	dec00204 	addi	sp,sp,8
  8126cc:	f800283a 	ret

008126d0 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
  8126d0:	defff704 	addi	sp,sp,-36
  8126d4:	dfc00815 	stw	ra,32(sp)
  8126d8:	df000715 	stw	fp,28(sp)
  8126dc:	df000704 	addi	fp,sp,28
	bool result = false;
  8126e0:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data_Attempt_CRC(0, 0)) {
  8126e4:	0009883a 	mov	r4,zero
  8126e8:	000b883a 	mov	r5,zero
  8126ec:	08168500 	call	816850 <Read_Sector_Data_Attempt_CRC>
  8126f0:	1005003a 	cmpeq	r2,r2,zero
  8126f4:	10005c1e 	bne	r2,zero,812868 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
  8126f8:	d0a72417 	ldw	r2,-25456(gp)
  8126fc:	10800a17 	ldw	r2,40(r2)
  812700:	10807f84 	addi	r2,r2,510
  812704:	1080002b 	ldhuio	r2,0(r2)
  812708:	10bfffcc 	andi	r2,r2,65535
  81270c:	10a0001c 	xori	r2,r2,32768
  812710:	10a00004 	addi	r2,r2,-32768
  812714:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
  812718:	e0bffd17 	ldw	r2,-12(fp)
  81271c:	10ffffcc 	andi	r3,r2,65535
  812720:	00aa9554 	movui	r2,43605
  812724:	1880501e 	bne	r3,r2,812868 <Check_for_Master_Boot_Record+0x198>
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
  812728:	e03ffe15 	stw	zero,-8(fp)
  81272c:	00004b06 	br	81285c <Check_for_Master_Boot_Record+0x18c>
				int partition_data_offset = (index * 16) + 0x01be;
  812730:	e0bffe17 	ldw	r2,-8(fp)
  812734:	1004913a 	slli	r2,r2,4
  812738:	10806f84 	addi	r2,r2,446
  81273c:	e0bffa15 	stw	r2,-24(fp)
				char type;

				// Read Partition type
				type
  812740:	d0a72417 	ldw	r2,-25456(gp)
  812744:	10800a17 	ldw	r2,40(r2)
  812748:	1007883a 	mov	r3,r2
  81274c:	e0bffa17 	ldw	r2,-24(fp)
  812750:	1885883a 	add	r2,r3,r2
  812754:	10800104 	addi	r2,r2,4
  812758:	10800023 	ldbuio	r2,0(r2)
  81275c:	e0bff905 	stb	r2,-28(fp)
						= (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14)) {
  812760:	e0bff907 	ldb	r2,-28(fp)
  812764:	10800060 	cmpeqi	r2,r2,1
  812768:	1000091e 	bne	r2,zero,812790 <Check_for_Master_Boot_Record+0xc0>
  81276c:	e0bff907 	ldb	r2,-28(fp)
  812770:	10800120 	cmpeqi	r2,r2,4
  812774:	1000061e 	bne	r2,zero,812790 <Check_for_Master_Boot_Record+0xc0>
  812778:	e0bff907 	ldb	r2,-28(fp)
  81277c:	108001a0 	cmpeqi	r2,r2,6
  812780:	1000031e 	bne	r2,zero,812790 <Check_for_Master_Boot_Record+0xc0>
  812784:	e0bff907 	ldb	r2,-28(fp)
  812788:	10800398 	cmpnei	r2,r2,14
  81278c:	1000301e 	bne	r2,zero,812850 <Check_for_Master_Boot_Record+0x180>
					// Get partition offset and size.
					offset
  812790:	d0a72417 	ldw	r2,-25456(gp)
  812794:	10800a17 	ldw	r2,40(r2)
  812798:	1007883a 	mov	r3,r2
  81279c:	e0bffa17 	ldw	r2,-24(fp)
  8127a0:	1885883a 	add	r2,r3,r2
  8127a4:	10800284 	addi	r2,r2,10
  8127a8:	1080002b 	ldhuio	r2,0(r2)
  8127ac:	10bfffcc 	andi	r2,r2,65535
  8127b0:	1008943a 	slli	r4,r2,16
  8127b4:	d0a72417 	ldw	r2,-25456(gp)
  8127b8:	10800a17 	ldw	r2,40(r2)
  8127bc:	1007883a 	mov	r3,r2
  8127c0:	e0bffa17 	ldw	r2,-24(fp)
  8127c4:	1885883a 	add	r2,r3,r2
  8127c8:	10800204 	addi	r2,r2,8
  8127cc:	1080002b 	ldhuio	r2,0(r2)
  8127d0:	10bfffcc 	andi	r2,r2,65535
  8127d4:	2084b03a 	or	r2,r4,r2
  8127d8:	e0bffc15 	stw	r2,-16(fp)
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
					partition_size
  8127dc:	d0a72417 	ldw	r2,-25456(gp)
  8127e0:	10800a17 	ldw	r2,40(r2)
  8127e4:	1007883a 	mov	r3,r2
  8127e8:	e0bffa17 	ldw	r2,-24(fp)
  8127ec:	1885883a 	add	r2,r3,r2
  8127f0:	10800384 	addi	r2,r2,14
  8127f4:	1080002b 	ldhuio	r2,0(r2)
  8127f8:	10bfffcc 	andi	r2,r2,65535
  8127fc:	1008943a 	slli	r4,r2,16
  812800:	d0a72417 	ldw	r2,-25456(gp)
  812804:	10800a17 	ldw	r2,40(r2)
  812808:	1007883a 	mov	r3,r2
  81280c:	e0bffa17 	ldw	r2,-24(fp)
  812810:	1885883a 	add	r2,r3,r2
  812814:	10800304 	addi	r2,r2,12
  812818:	1080002b 	ldhuio	r2,0(r2)
  81281c:	10bfffcc 	andi	r2,r2,65535
  812820:	2084b03a 	or	r2,r4,r2
  812824:	e0bffb15 	stw	r2,-20(fp)
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
  812828:	e0bffb17 	ldw	r2,-20(fp)
  81282c:	10800050 	cmplti	r2,r2,1
  812830:	1000071e 	bne	r2,zero,812850 <Check_for_Master_Boot_Record+0x180>
						result = true;
  812834:	00800044 	movi	r2,1
  812838:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
  81283c:	e0bffb17 	ldw	r2,-20(fp)
  812840:	d0a72315 	stw	r2,-25460(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
  812844:	e0bffc17 	ldw	r2,-16(fp)
  812848:	d0a72215 	stw	r2,-25464(gp)
						break;
  81284c:	00000606 	br	812868 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
  812850:	e0bffe17 	ldw	r2,-8(fp)
  812854:	10800044 	addi	r2,r2,1
  812858:	e0bffe15 	stw	r2,-8(fp)
  81285c:	e0bffe17 	ldw	r2,-8(fp)
  812860:	10800110 	cmplti	r2,r2,4
  812864:	103fb21e 	bne	r2,zero,812730 <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
  812868:	e0bfff17 	ldw	r2,-4(fp)
}
  81286c:	e037883a 	mov	sp,fp
  812870:	dfc00117 	ldw	ra,4(sp)
  812874:	df000017 	ldw	fp,0(sp)
  812878:	dec00204 	addi	sp,sp,8
  81287c:	f800283a 	ret

00812880 <Read_File_Record_At_Offset>:

bool Read_File_Record_At_Offset(int offset, t_file_record *record,
		unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
  812880:	defff804 	addi	sp,sp,-32
  812884:	dfc00715 	stw	ra,28(sp)
  812888:	df000615 	stw	fp,24(sp)
  81288c:	df000604 	addi	fp,sp,24
  812890:	e13ffc15 	stw	r4,-16(fp)
  812894:	e17ffd15 	stw	r5,-12(fp)
  812898:	e1bffe15 	stw	r6,-8(fp)
  81289c:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
  8128a0:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  8128a4:	e0bffc17 	ldw	r2,-16(fp)
  8128a8:	108007cc 	andi	r2,r2,31
  8128ac:	1004c03a 	cmpne	r2,r2,zero
  8128b0:	10008e1e 	bne	r2,zero,812aec <Read_File_Record_At_Offset+0x26c>
  8128b4:	081514c0 	call	81514c <alt_up_sd_card_is_Present>
  8128b8:	1005003a 	cmpeq	r2,r2,zero
  8128bc:	10008b1e 	bne	r2,zero,812aec <Read_File_Record_At_Offset+0x26c>
  8128c0:	d0a71b17 	ldw	r2,-25492(gp)
  8128c4:	1005003a 	cmpeq	r2,r2,zero
  8128c8:	1000881e 	bne	r2,zero,812aec <Read_File_Record_At_Offset+0x26c>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
  8128cc:	e03ffa15 	stw	zero,-24(fp)
  8128d0:	00001006 	br	812914 <Read_File_Record_At_Offset+0x94>
			record->name[counter]
  8128d4:	e17ffa17 	ldw	r5,-24(fp)
  8128d8:	d0a72417 	ldw	r2,-25456(gp)
  8128dc:	10800a17 	ldw	r2,40(r2)
  8128e0:	1009883a 	mov	r4,r2
  8128e4:	e0fffc17 	ldw	r3,-16(fp)
  8128e8:	e0bffa17 	ldw	r2,-24(fp)
  8128ec:	1885883a 	add	r2,r3,r2
  8128f0:	2085883a 	add	r2,r4,r2
  8128f4:	10800023 	ldbuio	r2,0(r2)
  8128f8:	1007883a 	mov	r3,r2
  8128fc:	e0bffd17 	ldw	r2,-12(fp)
  812900:	1145883a 	add	r2,r2,r5
  812904:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
  812908:	e0bffa17 	ldw	r2,-24(fp)
  81290c:	10800044 	addi	r2,r2,1
  812910:	e0bffa15 	stw	r2,-24(fp)
  812914:	e0bffa17 	ldw	r2,-24(fp)
  812918:	10800210 	cmplti	r2,r2,8
  81291c:	103fed1e 	bne	r2,zero,8128d4 <Read_File_Record_At_Offset+0x54>
			record->name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
  812920:	e03ffa15 	stw	zero,-24(fp)
  812924:	00001206 	br	812970 <Read_File_Record_At_Offset+0xf0>
			record->extension[counter]
  812928:	e17ffa17 	ldw	r5,-24(fp)
  81292c:	d0a72417 	ldw	r2,-25456(gp)
  812930:	10800a17 	ldw	r2,40(r2)
  812934:	1009883a 	mov	r4,r2
  812938:	e0fffc17 	ldw	r3,-16(fp)
  81293c:	e0bffa17 	ldw	r2,-24(fp)
  812940:	1885883a 	add	r2,r3,r2
  812944:	2085883a 	add	r2,r4,r2
  812948:	10800204 	addi	r2,r2,8
  81294c:	10800023 	ldbuio	r2,0(r2)
  812950:	1007883a 	mov	r3,r2
  812954:	e0bffd17 	ldw	r2,-12(fp)
  812958:	2885883a 	add	r2,r5,r2
  81295c:	10800204 	addi	r2,r2,8
  812960:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++) {
			record->name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
  812964:	e0bffa17 	ldw	r2,-24(fp)
  812968:	10800044 	addi	r2,r2,1
  81296c:	e0bffa15 	stw	r2,-24(fp)
  812970:	e0bffa17 	ldw	r2,-24(fp)
  812974:	108000d0 	cmplti	r2,r2,3
  812978:	103feb1e 	bne	r2,zero,812928 <Read_File_Record_At_Offset+0xa8>
			record->extension[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}
		record->attributes
  81297c:	d0a72417 	ldw	r2,-25456(gp)
  812980:	10800a17 	ldw	r2,40(r2)
  812984:	1007883a 	mov	r3,r2
  812988:	e0bffc17 	ldw	r2,-16(fp)
  81298c:	1885883a 	add	r2,r3,r2
  812990:	108002c4 	addi	r2,r2,11
  812994:	10800023 	ldbuio	r2,0(r2)
  812998:	1007883a 	mov	r3,r2
  81299c:	e0bffd17 	ldw	r2,-12(fp)
  8129a0:	10c002c5 	stb	r3,11(r2)
				= (char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time
  8129a4:	d0a72417 	ldw	r2,-25456(gp)
  8129a8:	10800a17 	ldw	r2,40(r2)
  8129ac:	1007883a 	mov	r3,r2
  8129b0:	e0bffc17 	ldw	r2,-16(fp)
  8129b4:	1885883a 	add	r2,r3,r2
  8129b8:	10800384 	addi	r2,r2,14
  8129bc:	1080002b 	ldhuio	r2,0(r2)
  8129c0:	1007883a 	mov	r3,r2
  8129c4:	e0bffd17 	ldw	r2,-12(fp)
  8129c8:	10c0030d 	sth	r3,12(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date
  8129cc:	d0a72417 	ldw	r2,-25456(gp)
  8129d0:	10800a17 	ldw	r2,40(r2)
  8129d4:	1007883a 	mov	r3,r2
  8129d8:	e0bffc17 	ldw	r2,-16(fp)
  8129dc:	1885883a 	add	r2,r3,r2
  8129e0:	10800404 	addi	r2,r2,16
  8129e4:	1080002b 	ldhuio	r2,0(r2)
  8129e8:	1007883a 	mov	r3,r2
  8129ec:	e0bffd17 	ldw	r2,-12(fp)
  8129f0:	10c0038d 	sth	r3,14(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date
  8129f4:	d0a72417 	ldw	r2,-25456(gp)
  8129f8:	10800a17 	ldw	r2,40(r2)
  8129fc:	1007883a 	mov	r3,r2
  812a00:	e0bffc17 	ldw	r2,-16(fp)
  812a04:	1885883a 	add	r2,r3,r2
  812a08:	10800484 	addi	r2,r2,18
  812a0c:	1080002b 	ldhuio	r2,0(r2)
  812a10:	1007883a 	mov	r3,r2
  812a14:	e0bffd17 	ldw	r2,-12(fp)
  812a18:	10c0040d 	sth	r3,16(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time
  812a1c:	d0a72417 	ldw	r2,-25456(gp)
  812a20:	10800a17 	ldw	r2,40(r2)
  812a24:	1007883a 	mov	r3,r2
  812a28:	e0bffc17 	ldw	r2,-16(fp)
  812a2c:	1885883a 	add	r2,r3,r2
  812a30:	10800584 	addi	r2,r2,22
  812a34:	1080002b 	ldhuio	r2,0(r2)
  812a38:	1007883a 	mov	r3,r2
  812a3c:	e0bffd17 	ldw	r2,-12(fp)
  812a40:	10c0048d 	sth	r3,18(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date
  812a44:	d0a72417 	ldw	r2,-25456(gp)
  812a48:	10800a17 	ldw	r2,40(r2)
  812a4c:	1007883a 	mov	r3,r2
  812a50:	e0bffc17 	ldw	r2,-16(fp)
  812a54:	1885883a 	add	r2,r3,r2
  812a58:	10800604 	addi	r2,r2,24
  812a5c:	1080002b 	ldhuio	r2,0(r2)
  812a60:	1007883a 	mov	r3,r2
  812a64:	e0bffd17 	ldw	r2,-12(fp)
  812a68:	10c0050d 	sth	r3,20(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index
  812a6c:	d0a72417 	ldw	r2,-25456(gp)
  812a70:	10800a17 	ldw	r2,40(r2)
  812a74:	1007883a 	mov	r3,r2
  812a78:	e0bffc17 	ldw	r2,-16(fp)
  812a7c:	1885883a 	add	r2,r3,r2
  812a80:	10800684 	addi	r2,r2,26
  812a84:	1080002b 	ldhuio	r2,0(r2)
  812a88:	1007883a 	mov	r3,r2
  812a8c:	e0bffd17 	ldw	r2,-12(fp)
  812a90:	10c0058d 	sth	r3,22(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes
  812a94:	d0a72417 	ldw	r2,-25456(gp)
  812a98:	10800a17 	ldw	r2,40(r2)
  812a9c:	1007883a 	mov	r3,r2
  812aa0:	e0bffc17 	ldw	r2,-16(fp)
  812aa4:	1885883a 	add	r2,r3,r2
  812aa8:	10800704 	addi	r2,r2,28
  812aac:	10800037 	ldwio	r2,0(r2)
  812ab0:	1007883a 	mov	r3,r2
  812ab4:	e0bffd17 	ldw	r2,-12(fp)
  812ab8:	10c00615 	stw	r3,24(r2)
				= (unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
  812abc:	e0fffd17 	ldw	r3,-12(fp)
  812ac0:	e0bffe17 	ldw	r2,-8(fp)
  812ac4:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
  812ac8:	e0fffd17 	ldw	r3,-12(fp)
  812acc:	e0bfff17 	ldw	r2,-4(fp)
  812ad0:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
  812ad4:	e0bffc17 	ldw	r2,-16(fp)
  812ad8:	1007883a 	mov	r3,r2
  812adc:	e0bffd17 	ldw	r2,-12(fp)
  812ae0:	10c00c0d 	sth	r3,48(r2)
		result = true;
  812ae4:	00800044 	movi	r2,1
  812ae8:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
  812aec:	e0bffb17 	ldw	r2,-20(fp)
}
  812af0:	e037883a 	mov	sp,fp
  812af4:	dfc00117 	ldw	ra,4(sp)
  812af8:	df000017 	ldw	fp,0(sp)
  812afc:	dec00204 	addi	sp,sp,8
  812b00:	f800283a 	ret

00812b04 <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
  812b04:	defff904 	addi	sp,sp,-28
  812b08:	dfc00615 	stw	ra,24(sp)
  812b0c:	df000515 	stw	fp,20(sp)
  812b10:	df000504 	addi	fp,sp,20
  812b14:	e13ffe15 	stw	r4,-8(fp)
  812b18:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
  812b1c:	e03ffd15 	stw	zero,-12(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  812b20:	e0bffe17 	ldw	r2,-8(fp)
  812b24:	108007cc 	andi	r2,r2,31
  812b28:	1004c03a 	cmpne	r2,r2,zero
  812b2c:	10009d1e 	bne	r2,zero,812da4 <Write_File_Record_At_Offset+0x2a0>
  812b30:	081514c0 	call	81514c <alt_up_sd_card_is_Present>
  812b34:	1005003a 	cmpeq	r2,r2,zero
  812b38:	10009a1e 	bne	r2,zero,812da4 <Write_File_Record_At_Offset+0x2a0>
  812b3c:	d0a71b17 	ldw	r2,-25492(gp)
  812b40:	1005003a 	cmpeq	r2,r2,zero
  812b44:	1000971e 	bne	r2,zero,812da4 <Write_File_Record_At_Offset+0x2a0>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
  812b48:	e03ffc15 	stw	zero,-16(fp)
  812b4c:	00001e06 	br	812bc8 <Write_File_Record_At_Offset+0xc4>
			short int two_chars = (short int) record->name[counter + 1];
  812b50:	e0bffc17 	ldw	r2,-16(fp)
  812b54:	10c00044 	addi	r3,r2,1
  812b58:	e0bfff17 	ldw	r2,-4(fp)
  812b5c:	10c5883a 	add	r2,r2,r3
  812b60:	10800003 	ldbu	r2,0(r2)
  812b64:	10803fcc 	andi	r2,r2,255
  812b68:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars << 8;
  812b6c:	e0bffb0f 	ldh	r2,-20(fp)
  812b70:	1004923a 	slli	r2,r2,8
  812b74:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars | record->name[counter];
  812b78:	e0fffc17 	ldw	r3,-16(fp)
  812b7c:	e0bfff17 	ldw	r2,-4(fp)
  812b80:	10c5883a 	add	r2,r2,r3
  812b84:	10800003 	ldbu	r2,0(r2)
  812b88:	10c03fcc 	andi	r3,r2,255
  812b8c:	e0bffb0b 	ldhu	r2,-20(fp)
  812b90:	10c4b03a 	or	r2,r2,r3
  812b94:	e0bffb0d 	sth	r2,-20(fp)
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  812b98:	d0a72417 	ldw	r2,-25456(gp)
  812b9c:	10800a17 	ldw	r2,40(r2)
  812ba0:	1009883a 	mov	r4,r2
  812ba4:	e0fffe17 	ldw	r3,-8(fp)
  812ba8:	e0bffc17 	ldw	r2,-16(fp)
  812bac:	1885883a 	add	r2,r3,r2
  812bb0:	2085883a 	add	r2,r4,r2
  812bb4:	e0fffb0f 	ldh	r3,-20(fp)
  812bb8:	10c0002d 	sthio	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
  812bbc:	e0bffc17 	ldw	r2,-16(fp)
  812bc0:	10800084 	addi	r2,r2,2
  812bc4:	e0bffc15 	stw	r2,-16(fp)
  812bc8:	e0bffc17 	ldw	r2,-16(fp)
  812bcc:	10800210 	cmplti	r2,r2,8
  812bd0:	103fdf1e 	bne	r2,zero,812b50 <Write_File_Record_At_Offset+0x4c>
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
  812bd4:	e03ffc15 	stw	zero,-16(fp)
  812bd8:	00001306 	br	812c28 <Write_File_Record_At_Offset+0x124>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
  812bdc:	d0a72417 	ldw	r2,-25456(gp)
  812be0:	10800a17 	ldw	r2,40(r2)
  812be4:	1009883a 	mov	r4,r2
  812be8:	e0fffe17 	ldw	r3,-8(fp)
  812bec:	e0bffc17 	ldw	r2,-16(fp)
  812bf0:	1885883a 	add	r2,r3,r2
  812bf4:	2085883a 	add	r2,r4,r2
  812bf8:	11000204 	addi	r4,r2,8
  812bfc:	e0fffc17 	ldw	r3,-16(fp)
  812c00:	e0bfff17 	ldw	r2,-4(fp)
  812c04:	1885883a 	add	r2,r3,r2
  812c08:	10800204 	addi	r2,r2,8
  812c0c:	10800003 	ldbu	r2,0(r2)
  812c10:	10c03fcc 	andi	r3,r2,255
  812c14:	2005883a 	mov	r2,r4
  812c18:	10c00025 	stbio	r3,0(r2)
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
  812c1c:	e0bffc17 	ldw	r2,-16(fp)
  812c20:	10800044 	addi	r2,r2,1
  812c24:	e0bffc15 	stw	r2,-16(fp)
  812c28:	e0bffc17 	ldw	r2,-16(fp)
  812c2c:	108000d0 	cmplti	r2,r2,3
  812c30:	103fea1e 	bne	r2,zero,812bdc <Write_File_Record_At_Offset+0xd8>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
		}
		IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
  812c34:	d0a72417 	ldw	r2,-25456(gp)
  812c38:	10800a17 	ldw	r2,40(r2)
  812c3c:	1007883a 	mov	r3,r2
  812c40:	e0bffe17 	ldw	r2,-8(fp)
  812c44:	1885883a 	add	r2,r3,r2
  812c48:	110002c4 	addi	r4,r2,11
  812c4c:	e0bfff17 	ldw	r2,-4(fp)
  812c50:	108002c3 	ldbu	r2,11(r2)
  812c54:	10c03fcc 	andi	r3,r2,255
  812c58:	2005883a 	mov	r2,r4
  812c5c:	10c00025 	stbio	r3,0(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
  812c60:	d0a72417 	ldw	r2,-25456(gp)
  812c64:	10800a17 	ldw	r2,40(r2)
  812c68:	1007883a 	mov	r3,r2
  812c6c:	e0bffe17 	ldw	r2,-8(fp)
  812c70:	1885883a 	add	r2,r3,r2
  812c74:	11000384 	addi	r4,r2,14
  812c78:	e0bfff17 	ldw	r2,-4(fp)
  812c7c:	1080030b 	ldhu	r2,12(r2)
  812c80:	10ffffcc 	andi	r3,r2,65535
  812c84:	2005883a 	mov	r2,r4
  812c88:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
  812c8c:	d0a72417 	ldw	r2,-25456(gp)
  812c90:	10800a17 	ldw	r2,40(r2)
  812c94:	1007883a 	mov	r3,r2
  812c98:	e0bffe17 	ldw	r2,-8(fp)
  812c9c:	1885883a 	add	r2,r3,r2
  812ca0:	11000404 	addi	r4,r2,16
  812ca4:	e0bfff17 	ldw	r2,-4(fp)
  812ca8:	1080038b 	ldhu	r2,14(r2)
  812cac:	10ffffcc 	andi	r3,r2,65535
  812cb0:	2005883a 	mov	r2,r4
  812cb4:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
  812cb8:	d0a72417 	ldw	r2,-25456(gp)
  812cbc:	10800a17 	ldw	r2,40(r2)
  812cc0:	1007883a 	mov	r3,r2
  812cc4:	e0bffe17 	ldw	r2,-8(fp)
  812cc8:	1885883a 	add	r2,r3,r2
  812ccc:	11000484 	addi	r4,r2,18
  812cd0:	e0bfff17 	ldw	r2,-4(fp)
  812cd4:	1080040b 	ldhu	r2,16(r2)
  812cd8:	10ffffcc 	andi	r3,r2,65535
  812cdc:	2005883a 	mov	r2,r4
  812ce0:	10c0002d 	sthio	r3,0(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
  812ce4:	d0a72417 	ldw	r2,-25456(gp)
  812ce8:	10800a17 	ldw	r2,40(r2)
  812cec:	1007883a 	mov	r3,r2
  812cf0:	e0bffe17 	ldw	r2,-8(fp)
  812cf4:	1885883a 	add	r2,r3,r2
  812cf8:	11000584 	addi	r4,r2,22
  812cfc:	e0bfff17 	ldw	r2,-4(fp)
  812d00:	1080048b 	ldhu	r2,18(r2)
  812d04:	10ffffcc 	andi	r3,r2,65535
  812d08:	2005883a 	mov	r2,r4
  812d0c:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
  812d10:	d0a72417 	ldw	r2,-25456(gp)
  812d14:	10800a17 	ldw	r2,40(r2)
  812d18:	1007883a 	mov	r3,r2
  812d1c:	e0bffe17 	ldw	r2,-8(fp)
  812d20:	1885883a 	add	r2,r3,r2
  812d24:	11000604 	addi	r4,r2,24
  812d28:	e0bfff17 	ldw	r2,-4(fp)
  812d2c:	1080050b 	ldhu	r2,20(r2)
  812d30:	10ffffcc 	andi	r3,r2,65535
  812d34:	2005883a 	mov	r2,r4
  812d38:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
  812d3c:	d0a72417 	ldw	r2,-25456(gp)
  812d40:	10800a17 	ldw	r2,40(r2)
  812d44:	1007883a 	mov	r3,r2
  812d48:	e0bffe17 	ldw	r2,-8(fp)
  812d4c:	1885883a 	add	r2,r3,r2
  812d50:	11000684 	addi	r4,r2,26
  812d54:	e0bfff17 	ldw	r2,-4(fp)
  812d58:	1080058b 	ldhu	r2,22(r2)
  812d5c:	10ffffcc 	andi	r3,r2,65535
  812d60:	2005883a 	mov	r2,r4
  812d64:	10c0002d 	sthio	r3,0(r2)
		IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
  812d68:	d0a72417 	ldw	r2,-25456(gp)
  812d6c:	10800a17 	ldw	r2,40(r2)
  812d70:	1007883a 	mov	r3,r2
  812d74:	e0bffe17 	ldw	r2,-8(fp)
  812d78:	1885883a 	add	r2,r3,r2
  812d7c:	11000704 	addi	r4,r2,28
  812d80:	e0bfff17 	ldw	r2,-4(fp)
  812d84:	10800617 	ldw	r2,24(r2)
  812d88:	1007883a 	mov	r3,r2
  812d8c:	2005883a 	mov	r2,r4
  812d90:	10c00035 	stwio	r3,0(r2)
		current_sector_modified = true;
  812d94:	00800044 	movi	r2,1
  812d98:	d0a72515 	stw	r2,-25452(gp)
		result = true;
  812d9c:	00800044 	movi	r2,1
  812da0:	e0bffd15 	stw	r2,-12(fp)
	}
	return result;
  812da4:	e0bffd17 	ldw	r2,-12(fp)
}
  812da8:	e037883a 	mov	sp,fp
  812dac:	dfc00117 	ldw	ra,4(sp)
  812db0:	df000017 	ldw	fp,0(sp)
  812db4:	dec00204 	addi	sp,sp,8
  812db8:	f800283a 	ret

00812dbc <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
  812dbc:	defff804 	addi	sp,sp,-32
  812dc0:	dfc00715 	stw	ra,28(sp)
  812dc4:	df000615 	stw	fp,24(sp)
  812dc8:	dc000515 	stw	r16,20(sp)
  812dcc:	df000504 	addi	fp,sp,20
  812dd0:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
  812dd4:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
  812dd8:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
  812ddc:	0009883a 	mov	r4,zero
  812de0:	e17fff17 	ldw	r5,-4(fp)
  812de4:	08168500 	call	816850 <Read_Sector_Data_Attempt_CRC>
  812de8:	e0bffe15 	stw	r2,-8(fp)
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
  812dec:	d0a72417 	ldw	r2,-25456(gp)
  812df0:	10800a17 	ldw	r2,40(r2)
  812df4:	10807f84 	addi	r2,r2,510
  812df8:	1080002b 	ldhuio	r2,0(r2)
  812dfc:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
  812e00:	e0bffc0f 	ldh	r2,-16(fp)
  812e04:	10ffffcc 	andi	r3,r2,65535
  812e08:	00aa9554 	movui	r2,43605
  812e0c:	1881751e 	bne	r3,r2,8133e4 <Check_for_DOS_FAT+0x628>
  812e10:	e0bffe17 	ldw	r2,-8(fp)
  812e14:	1005003a 	cmpeq	r2,r2,zero
  812e18:	1001721e 	bne	r2,zero,8133e4 <Check_for_DOS_FAT+0x628>
		int num_clusters = 0;
  812e1c:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0]
  812e20:	d0a72417 	ldw	r2,-25456(gp)
  812e24:	10800a17 	ldw	r2,40(r2)
  812e28:	10800023 	ldbuio	r2,0(r2)
  812e2c:	1007883a 	mov	r3,r2
  812e30:	008020b4 	movhi	r2,130
  812e34:	10afc404 	addi	r2,r2,-16624
  812e38:	10c00005 	stb	r3,0(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1]
  812e3c:	d0a72417 	ldw	r2,-25456(gp)
  812e40:	10800a17 	ldw	r2,40(r2)
  812e44:	10800044 	addi	r2,r2,1
  812e48:	10800023 	ldbuio	r2,0(r2)
  812e4c:	1007883a 	mov	r3,r2
  812e50:	008020b4 	movhi	r2,130
  812e54:	10afc404 	addi	r2,r2,-16624
  812e58:	10c00045 	stb	r3,1(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2]
  812e5c:	d0a72417 	ldw	r2,-25456(gp)
  812e60:	10800a17 	ldw	r2,40(r2)
  812e64:	10800084 	addi	r2,r2,2
  812e68:	10800023 	ldbuio	r2,0(r2)
  812e6c:	1007883a 	mov	r3,r2
  812e70:	008020b4 	movhi	r2,130
  812e74:	10afc404 	addi	r2,r2,-16624
  812e78:	10c00085 	stb	r3,2(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
  812e7c:	e03ffd15 	stw	zero,-12(fp)
  812e80:	00001006 	br	812ec4 <Check_for_DOS_FAT+0x108>
			boot_sector_data.OEM_name[counter]
  812e84:	e13ffd17 	ldw	r4,-12(fp)
  812e88:	d0a72417 	ldw	r2,-25456(gp)
  812e8c:	10800a17 	ldw	r2,40(r2)
  812e90:	1007883a 	mov	r3,r2
  812e94:	e0bffd17 	ldw	r2,-12(fp)
  812e98:	1885883a 	add	r2,r3,r2
  812e9c:	108000c4 	addi	r2,r2,3
  812ea0:	10800023 	ldbuio	r2,0(r2)
  812ea4:	1007883a 	mov	r3,r2
  812ea8:	008020b4 	movhi	r2,130
  812eac:	10afc404 	addi	r2,r2,-16624
  812eb0:	1105883a 	add	r2,r2,r4
  812eb4:	10c000c5 	stb	r3,3(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1]
				= (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2]
				= (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
  812eb8:	e0bffd17 	ldw	r2,-12(fp)
  812ebc:	10800044 	addi	r2,r2,1
  812ec0:	e0bffd15 	stw	r2,-12(fp)
  812ec4:	e0bffd17 	ldw	r2,-12(fp)
  812ec8:	10800210 	cmplti	r2,r2,8
  812ecc:	103fed1e 	bne	r2,zero,812e84 <Check_for_DOS_FAT+0xc8>
			boot_sector_data.OEM_name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes
  812ed0:	d0a72417 	ldw	r2,-25456(gp)
  812ed4:	10800a17 	ldw	r2,40(r2)
  812ed8:	10800304 	addi	r2,r2,12
  812edc:	10800023 	ldbuio	r2,0(r2)
  812ee0:	10803fcc 	andi	r2,r2,255
  812ee4:	1004923a 	slli	r2,r2,8
  812ee8:	1007883a 	mov	r3,r2
  812eec:	d0a72417 	ldw	r2,-25456(gp)
  812ef0:	10800a17 	ldw	r2,40(r2)
  812ef4:	108002c4 	addi	r2,r2,11
  812ef8:	10800023 	ldbuio	r2,0(r2)
  812efc:	10803fcc 	andi	r2,r2,255
  812f00:	1080201c 	xori	r2,r2,128
  812f04:	10bfe004 	addi	r2,r2,-128
  812f08:	1884b03a 	or	r2,r3,r2
  812f0c:	1007883a 	mov	r3,r2
  812f10:	008020b4 	movhi	r2,130
  812f14:	10afc404 	addi	r2,r2,-16624
  812f18:	10c0030d 	sth	r3,12(r2)
				= (((unsigned char) IORD_8DIRECT(device_pointer->base, 12))
						<< 8) | ((char) IORD_8DIRECT(device_pointer->base, 11));
		boot_sector_data.sectors_per_cluster
  812f1c:	d0a72417 	ldw	r2,-25456(gp)
  812f20:	10800a17 	ldw	r2,40(r2)
  812f24:	10800344 	addi	r2,r2,13
  812f28:	10800023 	ldbuio	r2,0(r2)
  812f2c:	1007883a 	mov	r3,r2
  812f30:	008020b4 	movhi	r2,130
  812f34:	10afc404 	addi	r2,r2,-16624
  812f38:	10c00385 	stb	r3,14(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
		boot_sector_data.reserved_sectors
  812f3c:	d0a72417 	ldw	r2,-25456(gp)
  812f40:	10800a17 	ldw	r2,40(r2)
  812f44:	10800384 	addi	r2,r2,14
  812f48:	1080002b 	ldhuio	r2,0(r2)
  812f4c:	1007883a 	mov	r3,r2
  812f50:	008020b4 	movhi	r2,130
  812f54:	10afc404 	addi	r2,r2,-16624
  812f58:	10c0040d 	sth	r3,16(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
		boot_sector_data.number_of_FATs
  812f5c:	d0a72417 	ldw	r2,-25456(gp)
  812f60:	10800a17 	ldw	r2,40(r2)
  812f64:	10800404 	addi	r2,r2,16
  812f68:	10800023 	ldbuio	r2,0(r2)
  812f6c:	1007883a 	mov	r3,r2
  812f70:	008020b4 	movhi	r2,130
  812f74:	10afc404 	addi	r2,r2,-16624
  812f78:	10c00485 	stb	r3,18(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
		boot_sector_data.max_number_of_dir_entires
  812f7c:	d0a72417 	ldw	r2,-25456(gp)
  812f80:	10800a17 	ldw	r2,40(r2)
  812f84:	10800484 	addi	r2,r2,18
  812f88:	10800023 	ldbuio	r2,0(r2)
  812f8c:	10803fcc 	andi	r2,r2,255
  812f90:	1004923a 	slli	r2,r2,8
  812f94:	1007883a 	mov	r3,r2
  812f98:	d0a72417 	ldw	r2,-25456(gp)
  812f9c:	10800a17 	ldw	r2,40(r2)
  812fa0:	10800444 	addi	r2,r2,17
  812fa4:	10800023 	ldbuio	r2,0(r2)
  812fa8:	10803fcc 	andi	r2,r2,255
  812fac:	1884b03a 	or	r2,r3,r2
  812fb0:	1007883a 	mov	r3,r2
  812fb4:	008020b4 	movhi	r2,130
  812fb8:	10afc404 	addi	r2,r2,-16624
  812fbc:	10c0050d 	sth	r3,20(r2)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 18))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
		boot_sector_data.number_of_sectors_in_partition
  812fc0:	d0a72417 	ldw	r2,-25456(gp)
  812fc4:	10800a17 	ldw	r2,40(r2)
  812fc8:	10800504 	addi	r2,r2,20
  812fcc:	10800023 	ldbuio	r2,0(r2)
  812fd0:	10803fcc 	andi	r2,r2,255
  812fd4:	1004923a 	slli	r2,r2,8
  812fd8:	1007883a 	mov	r3,r2
  812fdc:	d0a72417 	ldw	r2,-25456(gp)
  812fe0:	10800a17 	ldw	r2,40(r2)
  812fe4:	108004c4 	addi	r2,r2,19
  812fe8:	10800023 	ldbuio	r2,0(r2)
  812fec:	10803fcc 	andi	r2,r2,255
  812ff0:	1884b03a 	or	r2,r3,r2
  812ff4:	1007883a 	mov	r3,r2
  812ff8:	008020b4 	movhi	r2,130
  812ffc:	10afc404 	addi	r2,r2,-16624
  813000:	10c0058d 	sth	r3,22(r2)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 20))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
		boot_sector_data.media_descriptor
  813004:	d0a72417 	ldw	r2,-25456(gp)
  813008:	10800a17 	ldw	r2,40(r2)
  81300c:	10800544 	addi	r2,r2,21
  813010:	10800023 	ldbuio	r2,0(r2)
  813014:	1007883a 	mov	r3,r2
  813018:	008020b4 	movhi	r2,130
  81301c:	10afc404 	addi	r2,r2,-16624
  813020:	10c00605 	stb	r3,24(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
		boot_sector_data.number_of_sectors_per_table
  813024:	d0a72417 	ldw	r2,-25456(gp)
  813028:	10800a17 	ldw	r2,40(r2)
  81302c:	10800584 	addi	r2,r2,22
  813030:	1080002b 	ldhuio	r2,0(r2)
  813034:	1007883a 	mov	r3,r2
  813038:	008020b4 	movhi	r2,130
  81303c:	10afc404 	addi	r2,r2,-16624
  813040:	10c0068d 	sth	r3,26(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
		boot_sector_data.number_of_sectors_per_track
  813044:	d0a72417 	ldw	r2,-25456(gp)
  813048:	10800a17 	ldw	r2,40(r2)
  81304c:	10800604 	addi	r2,r2,24
  813050:	1080002b 	ldhuio	r2,0(r2)
  813054:	1007883a 	mov	r3,r2
  813058:	008020b4 	movhi	r2,130
  81305c:	10afc404 	addi	r2,r2,-16624
  813060:	10c0070d 	sth	r3,28(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
		boot_sector_data.number_of_heads
  813064:	d0a72417 	ldw	r2,-25456(gp)
  813068:	10800a17 	ldw	r2,40(r2)
  81306c:	10800684 	addi	r2,r2,26
  813070:	1080002b 	ldhuio	r2,0(r2)
  813074:	1007883a 	mov	r3,r2
  813078:	008020b4 	movhi	r2,130
  81307c:	10afc404 	addi	r2,r2,-16624
  813080:	10c0078d 	sth	r3,30(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors
  813084:	d0a72417 	ldw	r2,-25456(gp)
  813088:	10800a17 	ldw	r2,40(r2)
  81308c:	10800704 	addi	r2,r2,28
  813090:	10800037 	ldwio	r2,0(r2)
  813094:	1007883a 	mov	r3,r2
  813098:	008020b4 	movhi	r2,130
  81309c:	10afc404 	addi	r2,r2,-16624
  8130a0:	10c00815 	stw	r3,32(r2)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB
  8130a4:	d0a72417 	ldw	r2,-25456(gp)
  8130a8:	10800a17 	ldw	r2,40(r2)
  8130ac:	10800804 	addi	r2,r2,32
  8130b0:	10800037 	ldwio	r2,0(r2)
  8130b4:	1007883a 	mov	r3,r2
  8130b8:	008020b4 	movhi	r2,130
  8130bc:	10afc404 	addi	r2,r2,-16624
  8130c0:	10c00915 	stw	r3,36(r2)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number
  8130c4:	d0a72417 	ldw	r2,-25456(gp)
  8130c8:	10800a17 	ldw	r2,40(r2)
  8130cc:	10800904 	addi	r2,r2,36
  8130d0:	10800023 	ldbuio	r2,0(r2)
  8130d4:	1007883a 	mov	r3,r2
  8130d8:	008020b4 	movhi	r2,130
  8130dc:	10afc404 	addi	r2,r2,-16624
  8130e0:	10c00a05 	stb	r3,40(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head
  8130e4:	d0a72417 	ldw	r2,-25456(gp)
  8130e8:	10800a17 	ldw	r2,40(r2)
  8130ec:	10800944 	addi	r2,r2,37
  8130f0:	10800023 	ldbuio	r2,0(r2)
  8130f4:	1007883a 	mov	r3,r2
  8130f8:	008020b4 	movhi	r2,130
  8130fc:	10afc404 	addi	r2,r2,-16624
  813100:	10c00a45 	stb	r3,41(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature
  813104:	d0a72417 	ldw	r2,-25456(gp)
  813108:	10800a17 	ldw	r2,40(r2)
  81310c:	10800984 	addi	r2,r2,38
  813110:	10800023 	ldbuio	r2,0(r2)
  813114:	1007883a 	mov	r3,r2
  813118:	008020b4 	movhi	r2,130
  81311c:	10afc404 	addi	r2,r2,-16624
  813120:	10c00a85 	stb	r3,42(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset
  813124:	008020b4 	movhi	r2,130
  813128:	10afc404 	addi	r2,r2,-16624
  81312c:	1080040b 	ldhu	r2,16(r2)
  813130:	10ffffcc 	andi	r3,r2,65535
  813134:	008020b4 	movhi	r2,130
  813138:	10afc404 	addi	r2,r2,-16624
  81313c:	10c01115 	stw	r3,68(r2)
				= boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset
  813140:	008020b4 	movhi	r2,130
  813144:	10afc404 	addi	r2,r2,-16624
  813148:	10c01117 	ldw	r3,68(r2)
  81314c:	008020b4 	movhi	r2,130
  813150:	10afc404 	addi	r2,r2,-16624
  813154:	1080068b 	ldhu	r2,26(r2)
  813158:	10bfffcc 	andi	r2,r2,65535
  81315c:	1887883a 	add	r3,r3,r2
  813160:	008020b4 	movhi	r2,130
  813164:	10afc404 	addi	r2,r2,-16624
  813168:	10c01215 	stw	r3,72(r2)
				= boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset
  81316c:	008020b4 	movhi	r2,130
  813170:	10afc404 	addi	r2,r2,-16624
  813174:	10c01217 	ldw	r3,72(r2)
  813178:	008020b4 	movhi	r2,130
  81317c:	10afc404 	addi	r2,r2,-16624
  813180:	1080068b 	ldhu	r2,26(r2)
  813184:	10bfffcc 	andi	r2,r2,65535
  813188:	1887883a 	add	r3,r3,r2
  81318c:	008020b4 	movhi	r2,130
  813190:	10afc404 	addi	r2,r2,-16624
  813194:	10c01315 	stw	r3,76(r2)
				= boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset
  813198:	008020b4 	movhi	r2,130
  81319c:	10afc404 	addi	r2,r2,-16624
  8131a0:	14001317 	ldw	r16,76(r2)
  8131a4:	008020b4 	movhi	r2,130
  8131a8:	10afc404 	addi	r2,r2,-16624
  8131ac:	1080050b 	ldhu	r2,20(r2)
  8131b0:	10bfffcc 	andi	r2,r2,65535
  8131b4:	1008917a 	slli	r4,r2,5
  8131b8:	008020b4 	movhi	r2,130
  8131bc:	10afc404 	addi	r2,r2,-16624
  8131c0:	1080030b 	ldhu	r2,12(r2)
  8131c4:	117fffcc 	andi	r5,r2,65535
  8131c8:	0804bfc0 	call	804bfc <__divsi3>
  8131cc:	8087883a 	add	r3,r16,r2
  8131d0:	008020b4 	movhi	r2,130
  8131d4:	10afc404 	addi	r2,r2,-16624
  8131d8:	10c01415 	stw	r3,80(r2)
				= boot_sector_data.root_directory_sector_offset + (32
						* boot_sector_data.max_number_of_dir_entires
						/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
  8131dc:	008020b4 	movhi	r2,130
  8131e0:	10afc404 	addi	r2,r2,-16624
  8131e4:	1080058b 	ldhu	r2,22(r2)
  8131e8:	10bfffcc 	andi	r2,r2,65535
  8131ec:	1005003a 	cmpeq	r2,r2,zero
  8131f0:	10000b1e 	bne	r2,zero,813220 <Check_for_DOS_FAT+0x464>
			num_clusters = (boot_sector_data.number_of_sectors_in_partition
  8131f4:	008020b4 	movhi	r2,130
  8131f8:	10afc404 	addi	r2,r2,-16624
  8131fc:	1080058b 	ldhu	r2,22(r2)
  813200:	113fffcc 	andi	r4,r2,65535
  813204:	008020b4 	movhi	r2,130
  813208:	10afc404 	addi	r2,r2,-16624
  81320c:	10800383 	ldbu	r2,14(r2)
  813210:	11403fcc 	andi	r5,r2,255
  813214:	0804bfc0 	call	804bfc <__divsi3>
  813218:	e0bffb15 	stw	r2,-20(fp)
  81321c:	00000906 	br	813244 <Check_for_DOS_FAT+0x488>
					/ boot_sector_data.sectors_per_cluster);
		} else {
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB
  813220:	008020b4 	movhi	r2,130
  813224:	10afc404 	addi	r2,r2,-16624
  813228:	11000917 	ldw	r4,36(r2)
  81322c:	008020b4 	movhi	r2,130
  813230:	10afc404 	addi	r2,r2,-16624
  813234:	10800383 	ldbu	r2,14(r2)
  813238:	11403fcc 	andi	r5,r2,255
  81323c:	0804cbc0 	call	804cbc <__udivsi3>
  813240:	e0bffb15 	stw	r2,-20(fp)
					/ boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087) {
  813244:	e0bffb17 	ldw	r2,-20(fp)
  813248:	1083fdc8 	cmpgei	r2,r2,4087
  81324c:	1000051e 	bne	r2,zero,813264 <Check_for_DOS_FAT+0x4a8>
			boot_sector_data.bits_for_cluster_index = 12;
  813250:	00c020b4 	movhi	r3,130
  813254:	18efc404 	addi	r3,r3,-16624
  813258:	00800304 	movi	r2,12
  81325c:	18801085 	stb	r2,66(r3)
  813260:	00000c06 	br	813294 <Check_for_DOS_FAT+0x4d8>
		} else if (num_clusters <= 65517) {
  813264:	e0fffb17 	ldw	r3,-20(fp)
  813268:	00bffb54 	movui	r2,65517
  81326c:	10c00516 	blt	r2,r3,813284 <Check_for_DOS_FAT+0x4c8>
			boot_sector_data.bits_for_cluster_index = 16;
  813270:	00c020b4 	movhi	r3,130
  813274:	18efc404 	addi	r3,r3,-16624
  813278:	00800404 	movi	r2,16
  81327c:	18801085 	stb	r2,66(r3)
  813280:	00000406 	br	813294 <Check_for_DOS_FAT+0x4d8>
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
  813284:	00c020b4 	movhi	r3,130
  813288:	18efc404 	addi	r3,r3,-16624
  81328c:	00800804 	movi	r2,32
  813290:	18801085 	stb	r2,66(r3)
		}

		for (counter = 0; counter < 4; counter++) {
  813294:	e03ffd15 	stw	zero,-12(fp)
  813298:	00001106 	br	8132e0 <Check_for_DOS_FAT+0x524>
			boot_sector_data.volume_id[counter]
  81329c:	e13ffd17 	ldw	r4,-12(fp)
  8132a0:	d0a72417 	ldw	r2,-25456(gp)
  8132a4:	10800a17 	ldw	r2,40(r2)
  8132a8:	1007883a 	mov	r3,r2
  8132ac:	e0bffd17 	ldw	r2,-12(fp)
  8132b0:	1885883a 	add	r2,r3,r2
  8132b4:	108009c4 	addi	r2,r2,39
  8132b8:	10800023 	ldbuio	r2,0(r2)
  8132bc:	1007883a 	mov	r3,r2
  8132c0:	008020b4 	movhi	r2,130
  8132c4:	10afc404 	addi	r2,r2,-16624
  8132c8:	2085883a 	add	r2,r4,r2
  8132cc:	10800a04 	addi	r2,r2,40
  8132d0:	10c000c5 	stb	r3,3(r2)
			boot_sector_data.bits_for_cluster_index = 16;
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
		}

		for (counter = 0; counter < 4; counter++) {
  8132d4:	e0bffd17 	ldw	r2,-12(fp)
  8132d8:	10800044 	addi	r2,r2,1
  8132dc:	e0bffd15 	stw	r2,-12(fp)
  8132e0:	e0bffd17 	ldw	r2,-12(fp)
  8132e4:	10800110 	cmplti	r2,r2,4
  8132e8:	103fec1e 	bne	r2,zero,81329c <Check_for_DOS_FAT+0x4e0>
			boot_sector_data.volume_id[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
  8132ec:	e03ffd15 	stw	zero,-12(fp)
  8132f0:	00001106 	br	813338 <Check_for_DOS_FAT+0x57c>
			boot_sector_data.volume_label[counter]
  8132f4:	e13ffd17 	ldw	r4,-12(fp)
  8132f8:	d0a72417 	ldw	r2,-25456(gp)
  8132fc:	10800a17 	ldw	r2,40(r2)
  813300:	1007883a 	mov	r3,r2
  813304:	e0bffd17 	ldw	r2,-12(fp)
  813308:	1885883a 	add	r2,r3,r2
  81330c:	10800ac4 	addi	r2,r2,43
  813310:	10800023 	ldbuio	r2,0(r2)
  813314:	1007883a 	mov	r3,r2
  813318:	008020b4 	movhi	r2,130
  81331c:	10afc404 	addi	r2,r2,-16624
  813320:	2085883a 	add	r2,r4,r2
  813324:	10800b04 	addi	r2,r2,44
  813328:	10c000c5 	stb	r3,3(r2)

		for (counter = 0; counter < 4; counter++) {
			boot_sector_data.volume_id[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
  81332c:	e0bffd17 	ldw	r2,-12(fp)
  813330:	10800044 	addi	r2,r2,1
  813334:	e0bffd15 	stw	r2,-12(fp)
  813338:	e0bffd17 	ldw	r2,-12(fp)
  81333c:	108002d0 	cmplti	r2,r2,11
  813340:	103fec1e 	bne	r2,zero,8132f4 <Check_for_DOS_FAT+0x538>
			boot_sector_data.volume_label[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
  813344:	e03ffd15 	stw	zero,-12(fp)
  813348:	00001106 	br	813390 <Check_for_DOS_FAT+0x5d4>
			boot_sector_data.file_system_type[counter]
  81334c:	e13ffd17 	ldw	r4,-12(fp)
  813350:	d0a72417 	ldw	r2,-25456(gp)
  813354:	10800a17 	ldw	r2,40(r2)
  813358:	1007883a 	mov	r3,r2
  81335c:	e0bffd17 	ldw	r2,-12(fp)
  813360:	1885883a 	add	r2,r3,r2
  813364:	10800d84 	addi	r2,r2,54
  813368:	10800023 	ldbuio	r2,0(r2)
  81336c:	1007883a 	mov	r3,r2
  813370:	008020b4 	movhi	r2,130
  813374:	10afc404 	addi	r2,r2,-16624
  813378:	2085883a 	add	r2,r4,r2
  81337c:	10800e04 	addi	r2,r2,56
  813380:	10c00085 	stb	r3,2(r2)
		}
		for (counter = 0; counter < 11; counter++) {
			boot_sector_data.volume_label[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
  813384:	e0bffd17 	ldw	r2,-12(fp)
  813388:	10800044 	addi	r2,r2,1
  81338c:	e0bffd15 	stw	r2,-12(fp)
  813390:	e0bffd17 	ldw	r2,-12(fp)
  813394:	10800210 	cmplti	r2,r2,8
  813398:	103fec1e 	bne	r2,zero,81334c <Check_for_DOS_FAT+0x590>
			boot_sector_data.file_system_type[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
  81339c:	e03ffd15 	stw	zero,-12(fp)
  8133a0:	00000a06 	br	8133cc <Check_for_DOS_FAT+0x610>
			active_files[counter].in_use = false;
  8133a4:	e0bffd17 	ldw	r2,-12(fp)
  8133a8:	00c020b4 	movhi	r3,130
  8133ac:	18efd904 	addi	r3,r3,-16540
  8133b0:	100491ba 	slli	r2,r2,6
  8133b4:	10c5883a 	add	r2,r2,r3
  8133b8:	10800f04 	addi	r2,r2,60
  8133bc:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++) {
			boot_sector_data.file_system_type[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
  8133c0:	e0bffd17 	ldw	r2,-12(fp)
  8133c4:	10800044 	addi	r2,r2,1
  8133c8:	e0bffd15 	stw	r2,-12(fp)
  8133cc:	e0bffd17 	ldw	r2,-12(fp)
  8133d0:	10800510 	cmplti	r2,r2,20
  8133d4:	103ff31e 	bne	r2,zero,8133a4 <Check_for_DOS_FAT+0x5e8>
			active_files[counter].in_use = false;
		}
		result = true;
  8133d8:	00800044 	movi	r2,1
  8133dc:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
  8133e0:	00000106 	br	8133e8 <Check_for_DOS_FAT+0x62c>
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
			active_files[counter].in_use = false;
		}
		result = true;
	} else {
		result = false;
  8133e4:	e03ffe15 	stw	zero,-8(fp)
	}
	return result;
  8133e8:	e0bffe17 	ldw	r2,-8(fp)
}
  8133ec:	e037883a 	mov	sp,fp
  8133f0:	dfc00217 	ldw	ra,8(sp)
  8133f4:	df000117 	ldw	fp,4(sp)
  8133f8:	dc000017 	ldw	r16,0(sp)
  8133fc:	dec00304 	addi	sp,sp,12
  813400:	f800283a 	ret

00813404 <Look_for_FAT16>:

bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
  813404:	defffc04 	addi	sp,sp,-16
  813408:	dfc00315 	stw	ra,12(sp)
  81340c:	df000215 	stw	fp,8(sp)
  813410:	df000204 	addi	fp,sp,8
	bool result = false;
  813414:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
  813418:	081514c0 	call	81514c <alt_up_sd_card_is_Present>
  81341c:	1005003a 	cmpeq	r2,r2,zero
  813420:	1000331e 	bne	r2,zero,8134f0 <Look_for_FAT16+0xec>
		Read_Sector_Data_Attempt_CRC(0, 0);
  813424:	0009883a 	mov	r4,zero
  813428:	000b883a 	mov	r5,zero
  81342c:	08168500 	call	816850 <Read_Sector_Data_Attempt_CRC>

		short int csd_file_format = *CSD_register_w0;
  813430:	d0a71e17 	ldw	r2,-25480(gp)
  813434:	1080000b 	ldhu	r2,0(r2)
  813438:	e0bffe0d 	sth	r2,-8(fp)

		fat_partition_offset_in_512_byte_sectors = 0;
  81343c:	d0272215 	stw	zero,-25464(gp)
		fat_partition_size_in_512_byte_sectors = 0;
  813440:	d0272315 	stw	zero,-25460(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00)
  813444:	e0bffe0f 	ldh	r2,-8(fp)
  813448:	1004803a 	cmplt	r2,r2,zero
  81344c:	1000281e 	bne	r2,zero,8134f0 <Look_for_FAT16+0xec>
  813450:	e0bffe0b 	ldhu	r2,-8(fp)
  813454:	10bfffcc 	andi	r2,r2,65535
  813458:	1083000c 	andi	r2,r2,3072
  81345c:	10830020 	cmpeqi	r2,r2,3072
  813460:	1000231e 	bne	r2,zero,8134f0 <Look_for_FAT16+0xec>
				!= 0x0c00)) {
			if ((csd_file_format & 0x0c00) == 0x0400) {
  813464:	e0bffe0b 	ldhu	r2,-8(fp)
  813468:	10bfffcc 	andi	r2,r2,65535
  81346c:	1083000c 	andi	r2,r2,3072
  813470:	10810018 	cmpnei	r2,r2,1024
  813474:	1000031e 	bne	r2,zero,813484 <Look_for_FAT16+0x80>
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
  813478:	0009883a 	mov	r4,zero
  81347c:	0812dbc0 	call	812dbc <Check_for_DOS_FAT>
  813480:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000) {
  813484:	e0bffe0b 	ldhu	r2,-8(fp)
  813488:	10bfffcc 	andi	r2,r2,65535
  81348c:	1083000c 	andi	r2,r2,3072
  813490:	1004c03a 	cmpne	r2,r2,zero
  813494:	1000061e 	bne	r2,zero,8134b0 <Look_for_FAT16+0xac>
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record()) {
  813498:	08126d00 	call	8126d0 <Check_for_Master_Boot_Record>
  81349c:	1005003a 	cmpeq	r2,r2,zero
  8134a0:	1000031e 	bne	r2,zero,8134b0 <Look_for_FAT16+0xac>
					result = Check_for_DOS_FAT(
  8134a4:	d1272217 	ldw	r4,-25464(gp)
  8134a8:	0812dbc0 	call	812dbc <Check_for_DOS_FAT>
  8134ac:	e0bfff15 	stw	r2,-4(fp)
							fat_partition_offset_in_512_byte_sectors);
				}
			}
			if (result == true) {
  8134b0:	e0bfff17 	ldw	r2,-4(fp)
  8134b4:	10800058 	cmpnei	r2,r2,1
  8134b8:	10000d1e 	bne	r2,zero,8134f0 <Look_for_FAT16+0xec>
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16) {
  8134bc:	008020b4 	movhi	r2,130
  8134c0:	10afc404 	addi	r2,r2,-16624
  8134c4:	10801083 	ldbu	r2,66(r2)
  8134c8:	10803fcc 	andi	r2,r2,255
  8134cc:	10800420 	cmpeqi	r2,r2,16
  8134d0:	1000021e 	bne	r2,zero,8134dc <Look_for_FAT16+0xd8>
					result = false;
  8134d4:	e03fff15 	stw	zero,-4(fp)
  8134d8:	00000506 	br	8134f0 <Look_for_FAT16+0xec>
				} else {
					fat_partition_size_in_512_byte_sectors
  8134dc:	008020b4 	movhi	r2,130
  8134e0:	10afc404 	addi	r2,r2,-16624
  8134e4:	1080058b 	ldhu	r2,22(r2)
  8134e8:	10bfffcc 	andi	r2,r2,65535
  8134ec:	d0a72315 	stw	r2,-25460(gp)
							= boot_sector_data.number_of_sectors_in_partition;
				}
			}
		}
	}
	return result;
  8134f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8134f4:	e037883a 	mov	sp,fp
  8134f8:	dfc00117 	ldw	ra,4(sp)
  8134fc:	df000017 	ldw	fp,0(sp)
  813500:	dec00204 	addi	sp,sp,8
  813504:	f800283a 	ret

00813508 <filename_to_upper_case>:

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
  813508:	defffb04 	addi	sp,sp,-20
  81350c:	dfc00415 	stw	ra,16(sp)
  813510:	df000315 	stw	fp,12(sp)
  813514:	df000304 	addi	fp,sp,12
  813518:	e13fff15 	stw	r4,-4(fp)
	int index;
	int length = strlen(file_name);
  81351c:	e13fff17 	ldw	r4,-4(fp)
  813520:	0805e240 	call	805e24 <strlen>
  813524:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
  813528:	e03ffe15 	stw	zero,-8(fp)
  81352c:	00002206 	br	8135b8 <filename_to_upper_case+0xb0>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
  813530:	e0bffe17 	ldw	r2,-8(fp)
  813534:	1007883a 	mov	r3,r2
  813538:	e0bfff17 	ldw	r2,-4(fp)
  81353c:	1885883a 	add	r2,r3,r2
  813540:	10800003 	ldbu	r2,0(r2)
  813544:	10803fcc 	andi	r2,r2,255
  813548:	1080201c 	xori	r2,r2,128
  81354c:	10bfe004 	addi	r2,r2,-128
  813550:	10801850 	cmplti	r2,r2,97
  813554:	1000151e 	bne	r2,zero,8135ac <filename_to_upper_case+0xa4>
  813558:	e0bffe17 	ldw	r2,-8(fp)
  81355c:	1007883a 	mov	r3,r2
  813560:	e0bfff17 	ldw	r2,-4(fp)
  813564:	1885883a 	add	r2,r3,r2
  813568:	10800003 	ldbu	r2,0(r2)
  81356c:	10803fcc 	andi	r2,r2,255
  813570:	1080201c 	xori	r2,r2,128
  813574:	10bfe004 	addi	r2,r2,-128
  813578:	10801ec8 	cmpgei	r2,r2,123
  81357c:	10000b1e 	bne	r2,zero,8135ac <filename_to_upper_case+0xa4>
			file_name[index] = (file_name[index] - 'a') + 'A';
  813580:	e0bffe17 	ldw	r2,-8(fp)
  813584:	1007883a 	mov	r3,r2
  813588:	e0bfff17 	ldw	r2,-4(fp)
  81358c:	1889883a 	add	r4,r3,r2
  813590:	e0bffe17 	ldw	r2,-8(fp)
  813594:	1007883a 	mov	r3,r2
  813598:	e0bfff17 	ldw	r2,-4(fp)
  81359c:	1885883a 	add	r2,r3,r2
  8135a0:	10800003 	ldbu	r2,0(r2)
  8135a4:	10bff804 	addi	r2,r2,-32
  8135a8:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
  8135ac:	e0bffe17 	ldw	r2,-8(fp)
  8135b0:	10800044 	addi	r2,r2,1
  8135b4:	e0bffe15 	stw	r2,-8(fp)
  8135b8:	e0fffe17 	ldw	r3,-8(fp)
  8135bc:	e0bffd17 	ldw	r2,-12(fp)
  8135c0:	18bfdb16 	blt	r3,r2,813530 <filename_to_upper_case+0x28>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
			file_name[index] = (file_name[index] - 'a') + 'A';
		}
	}
}
  8135c4:	e037883a 	mov	sp,fp
  8135c8:	dfc00117 	ldw	ra,4(sp)
  8135cc:	df000017 	ldw	fp,0(sp)
  8135d0:	dec00204 	addi	sp,sp,8
  8135d4:	f800283a 	ret

008135d8 <check_file_name_for_FAT16_compliance>:

bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
  8135d8:	defff804 	addi	sp,sp,-32
  8135dc:	dfc00715 	stw	ra,28(sp)
  8135e0:	df000615 	stw	fp,24(sp)
  8135e4:	df000604 	addi	fp,sp,24
  8135e8:	e13fff15 	stw	r4,-4(fp)
	int length = strlen(file_name);
  8135ec:	e13fff17 	ldw	r4,-4(fp)
  8135f0:	0805e240 	call	805e24 <strlen>
  8135f4:	e0bffe15 	stw	r2,-8(fp)
	int index;
	int last_dir_break_position = -1;
  8135f8:	00bfffc4 	movi	r2,-1
  8135fc:	e0bffc15 	stw	r2,-16(fp)
	int last_period = -1;
  813600:	00bfffc4 	movi	r2,-1
  813604:	e0bffb15 	stw	r2,-20(fp)
	bool result = true;
  813608:	00800044 	movi	r2,1
  81360c:	e0bffa15 	stw	r2,-24(fp)

	for (index = 0; index < length; index++) {
  813610:	e03ffd15 	stw	zero,-12(fp)
  813614:	00007606 	br	8137f0 <check_file_name_for_FAT16_compliance+0x218>
		if ((file_name[index] == ' ') || ((last_dir_break_position == (index
  813618:	e0bffd17 	ldw	r2,-12(fp)
  81361c:	1007883a 	mov	r3,r2
  813620:	e0bfff17 	ldw	r2,-4(fp)
  813624:	1885883a 	add	r2,r3,r2
  813628:	10800003 	ldbu	r2,0(r2)
  81362c:	10803fcc 	andi	r2,r2,255
  813630:	1080201c 	xori	r2,r2,128
  813634:	10bfe004 	addi	r2,r2,-128
  813638:	10800820 	cmpeqi	r2,r2,32
  81363c:	1000431e 	bne	r2,zero,81374c <check_file_name_for_FAT16_compliance+0x174>
  813640:	e0bffd17 	ldw	r2,-12(fp)
  813644:	10ffffc4 	addi	r3,r2,-1
  813648:	e0bffc17 	ldw	r2,-16(fp)
  81364c:	1880141e 	bne	r3,r2,8136a0 <check_file_name_for_FAT16_compliance+0xc8>
  813650:	e0bffd17 	ldw	r2,-12(fp)
  813654:	1007883a 	mov	r3,r2
  813658:	e0bfff17 	ldw	r2,-4(fp)
  81365c:	1885883a 	add	r2,r3,r2
  813660:	10800003 	ldbu	r2,0(r2)
  813664:	10803fcc 	andi	r2,r2,255
  813668:	1080201c 	xori	r2,r2,128
  81366c:	10bfe004 	addi	r2,r2,-128
  813670:	10801720 	cmpeqi	r2,r2,92
  813674:	1000351e 	bne	r2,zero,81374c <check_file_name_for_FAT16_compliance+0x174>
  813678:	e0bffd17 	ldw	r2,-12(fp)
  81367c:	1007883a 	mov	r3,r2
  813680:	e0bfff17 	ldw	r2,-4(fp)
  813684:	1885883a 	add	r2,r3,r2
  813688:	10800003 	ldbu	r2,0(r2)
  81368c:	10803fcc 	andi	r2,r2,255
  813690:	1080201c 	xori	r2,r2,128
  813694:	10bfe004 	addi	r2,r2,-128
  813698:	10800be0 	cmpeqi	r2,r2,47
  81369c:	10002b1e 	bne	r2,zero,81374c <check_file_name_for_FAT16_compliance+0x174>
  8136a0:	e0fffd17 	ldw	r3,-12(fp)
  8136a4:	e0bffb17 	ldw	r2,-20(fp)
  8136a8:	1885c83a 	sub	r2,r3,r2
  8136ac:	10800258 	cmpnei	r2,r2,9
  8136b0:	10000a1e 	bne	r2,zero,8136dc <check_file_name_for_FAT16_compliance+0x104>
  8136b4:	e0bffd17 	ldw	r2,-12(fp)
  8136b8:	1007883a 	mov	r3,r2
  8136bc:	e0bfff17 	ldw	r2,-4(fp)
  8136c0:	1885883a 	add	r2,r3,r2
  8136c4:	10800003 	ldbu	r2,0(r2)
  8136c8:	10803fcc 	andi	r2,r2,255
  8136cc:	1080201c 	xori	r2,r2,128
  8136d0:	10bfe004 	addi	r2,r2,-128
  8136d4:	10800b98 	cmpnei	r2,r2,46
  8136d8:	10001c1e 	bne	r2,zero,81374c <check_file_name_for_FAT16_compliance+0x174>
  8136dc:	e0fffc17 	ldw	r3,-16(fp)
  8136e0:	e0bffb17 	ldw	r2,-20(fp)
  8136e4:	18801b26 	beq	r3,r2,813754 <check_file_name_for_FAT16_compliance+0x17c>
  8136e8:	e0fffd17 	ldw	r3,-12(fp)
  8136ec:	e0bffb17 	ldw	r2,-20(fp)
  8136f0:	1885c83a 	sub	r2,r3,r2
  8136f4:	10800110 	cmplti	r2,r2,4
  8136f8:	1000161e 	bne	r2,zero,813754 <check_file_name_for_FAT16_compliance+0x17c>
  8136fc:	e0bffd17 	ldw	r2,-12(fp)
  813700:	1007883a 	mov	r3,r2
  813704:	e0bfff17 	ldw	r2,-4(fp)
  813708:	1885883a 	add	r2,r3,r2
  81370c:	10800003 	ldbu	r2,0(r2)
  813710:	10803fcc 	andi	r2,r2,255
  813714:	1080201c 	xori	r2,r2,128
  813718:	10bfe004 	addi	r2,r2,-128
  81371c:	10801720 	cmpeqi	r2,r2,92
  813720:	10000c1e 	bne	r2,zero,813754 <check_file_name_for_FAT16_compliance+0x17c>
  813724:	e0bffd17 	ldw	r2,-12(fp)
  813728:	1007883a 	mov	r3,r2
  81372c:	e0bfff17 	ldw	r2,-4(fp)
  813730:	1885883a 	add	r2,r3,r2
  813734:	10800003 	ldbu	r2,0(r2)
  813738:	10803fcc 	andi	r2,r2,255
  81373c:	1080201c 	xori	r2,r2,128
  813740:	10bfe004 	addi	r2,r2,-128
  813744:	10800be0 	cmpeqi	r2,r2,47
  813748:	1000021e 	bne	r2,zero,813754 <check_file_name_for_FAT16_compliance+0x17c>
				- 1)) && ((file_name[index] == '\\') || (file_name[index]
				== '/'))) || ((index - last_period == 9) && (file_name[index]
				!= '.')) || ((last_dir_break_position != last_period) && (index
				- last_period > 3) && (file_name[index] != '\\')
				&& (file_name[index] != '/'))) {
			result = false;
  81374c:	e03ffa15 	stw	zero,-24(fp)
			break;
  813750:	00002a06 	br	8137fc <check_file_name_for_FAT16_compliance+0x224>
		}
		if ((file_name[index] == '\\') || (file_name[index] == '/')) {
  813754:	e0bffd17 	ldw	r2,-12(fp)
  813758:	1007883a 	mov	r3,r2
  81375c:	e0bfff17 	ldw	r2,-4(fp)
  813760:	1885883a 	add	r2,r3,r2
  813764:	10800003 	ldbu	r2,0(r2)
  813768:	10803fcc 	andi	r2,r2,255
  81376c:	1080201c 	xori	r2,r2,128
  813770:	10bfe004 	addi	r2,r2,-128
  813774:	10801720 	cmpeqi	r2,r2,92
  813778:	10000a1e 	bne	r2,zero,8137a4 <check_file_name_for_FAT16_compliance+0x1cc>
  81377c:	e0bffd17 	ldw	r2,-12(fp)
  813780:	1007883a 	mov	r3,r2
  813784:	e0bfff17 	ldw	r2,-4(fp)
  813788:	1885883a 	add	r2,r3,r2
  81378c:	10800003 	ldbu	r2,0(r2)
  813790:	10803fcc 	andi	r2,r2,255
  813794:	1080201c 	xori	r2,r2,128
  813798:	10bfe004 	addi	r2,r2,-128
  81379c:	10800bd8 	cmpnei	r2,r2,47
  8137a0:	1000041e 	bne	r2,zero,8137b4 <check_file_name_for_FAT16_compliance+0x1dc>
			last_period = index;
  8137a4:	e0bffd17 	ldw	r2,-12(fp)
  8137a8:	e0bffb15 	stw	r2,-20(fp)
			last_dir_break_position = index;
  8137ac:	e0bffd17 	ldw	r2,-12(fp)
  8137b0:	e0bffc15 	stw	r2,-16(fp)
		}
		if (file_name[index] == '.') {
  8137b4:	e0bffd17 	ldw	r2,-12(fp)
  8137b8:	1007883a 	mov	r3,r2
  8137bc:	e0bfff17 	ldw	r2,-4(fp)
  8137c0:	1885883a 	add	r2,r3,r2
  8137c4:	10800003 	ldbu	r2,0(r2)
  8137c8:	10803fcc 	andi	r2,r2,255
  8137cc:	1080201c 	xori	r2,r2,128
  8137d0:	10bfe004 	addi	r2,r2,-128
  8137d4:	10800b98 	cmpnei	r2,r2,46
  8137d8:	1000021e 	bne	r2,zero,8137e4 <check_file_name_for_FAT16_compliance+0x20c>
			last_period = index;
  8137dc:	e0bffd17 	ldw	r2,-12(fp)
  8137e0:	e0bffb15 	stw	r2,-20(fp)
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
  8137e4:	e0bffd17 	ldw	r2,-12(fp)
  8137e8:	10800044 	addi	r2,r2,1
  8137ec:	e0bffd15 	stw	r2,-12(fp)
  8137f0:	e0fffd17 	ldw	r3,-12(fp)
  8137f4:	e0bffe17 	ldw	r2,-8(fp)
  8137f8:	18bf8716 	blt	r3,r2,813618 <check_file_name_for_FAT16_compliance+0x40>
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
  8137fc:	e0fffe17 	ldw	r3,-8(fp)
  813800:	e0bfff17 	ldw	r2,-4(fp)
  813804:	1885883a 	add	r2,r3,r2
  813808:	10bfffc4 	addi	r2,r2,-1
  81380c:	10800003 	ldbu	r2,0(r2)
  813810:	10803fcc 	andi	r2,r2,255
  813814:	1080201c 	xori	r2,r2,128
  813818:	10bfe004 	addi	r2,r2,-128
  81381c:	10801720 	cmpeqi	r2,r2,92
  813820:	10000a1e 	bne	r2,zero,81384c <check_file_name_for_FAT16_compliance+0x274>
  813824:	e0fffe17 	ldw	r3,-8(fp)
  813828:	e0bfff17 	ldw	r2,-4(fp)
  81382c:	1885883a 	add	r2,r3,r2
  813830:	10bfffc4 	addi	r2,r2,-1
  813834:	10800003 	ldbu	r2,0(r2)
  813838:	10803fcc 	andi	r2,r2,255
  81383c:	1080201c 	xori	r2,r2,128
  813840:	10bfe004 	addi	r2,r2,-128
  813844:	10800bd8 	cmpnei	r2,r2,47
  813848:	1000011e 	bne	r2,zero,813850 <check_file_name_for_FAT16_compliance+0x278>
		result = false;
  81384c:	e03ffa15 	stw	zero,-24(fp)
	}
	return result;
  813850:	e0bffa17 	ldw	r2,-24(fp)
}
  813854:	e037883a 	mov	sp,fp
  813858:	dfc00117 	ldw	ra,4(sp)
  81385c:	df000017 	ldw	fp,0(sp)
  813860:	dec00204 	addi	sp,sp,8
  813864:	f800283a 	ret

00813868 <get_dir_divider_location>:

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
  813868:	defffb04 	addi	sp,sp,-20
  81386c:	dfc00415 	stw	ra,16(sp)
  813870:	df000315 	stw	fp,12(sp)
  813874:	df000304 	addi	fp,sp,12
  813878:	e13fff15 	stw	r4,-4(fp)
	int index = 0;
  81387c:	e03ffe15 	stw	zero,-8(fp)
	int length = strlen(name);
  813880:	e13fff17 	ldw	r4,-4(fp)
  813884:	0805e240 	call	805e24 <strlen>
  813888:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
  81388c:	e03ffe15 	stw	zero,-8(fp)
  813890:	00001706 	br	8138f0 <get_dir_divider_location+0x88>
		if ((name[index] == '\\') || (name[index] == '/')) {
  813894:	e0bffe17 	ldw	r2,-8(fp)
  813898:	1007883a 	mov	r3,r2
  81389c:	e0bfff17 	ldw	r2,-4(fp)
  8138a0:	1885883a 	add	r2,r3,r2
  8138a4:	10800003 	ldbu	r2,0(r2)
  8138a8:	10803fcc 	andi	r2,r2,255
  8138ac:	1080201c 	xori	r2,r2,128
  8138b0:	10bfe004 	addi	r2,r2,-128
  8138b4:	10801720 	cmpeqi	r2,r2,92
  8138b8:	1000101e 	bne	r2,zero,8138fc <get_dir_divider_location+0x94>
  8138bc:	e0bffe17 	ldw	r2,-8(fp)
  8138c0:	1007883a 	mov	r3,r2
  8138c4:	e0bfff17 	ldw	r2,-4(fp)
  8138c8:	1885883a 	add	r2,r3,r2
  8138cc:	10800003 	ldbu	r2,0(r2)
  8138d0:	10803fcc 	andi	r2,r2,255
  8138d4:	1080201c 	xori	r2,r2,128
  8138d8:	10bfe004 	addi	r2,r2,-128
  8138dc:	10800be0 	cmpeqi	r2,r2,47
  8138e0:	1000061e 	bne	r2,zero,8138fc <get_dir_divider_location+0x94>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  8138e4:	e0bffe17 	ldw	r2,-8(fp)
  8138e8:	10800044 	addi	r2,r2,1
  8138ec:	e0bffe15 	stw	r2,-8(fp)
  8138f0:	e0fffe17 	ldw	r3,-8(fp)
  8138f4:	e0bffd17 	ldw	r2,-12(fp)
  8138f8:	18bfe616 	blt	r3,r2,813894 <get_dir_divider_location+0x2c>
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
  8138fc:	e0fffe17 	ldw	r3,-8(fp)
  813900:	e0bffd17 	ldw	r2,-12(fp)
  813904:	1880021e 	bne	r3,r2,813910 <get_dir_divider_location+0xa8>
		index = -1;
  813908:	00bfffc4 	movi	r2,-1
  81390c:	e0bffe15 	stw	r2,-8(fp)
	}

	return index;
  813910:	e0bffe17 	ldw	r2,-8(fp)
}
  813914:	e037883a 	mov	sp,fp
  813918:	dfc00117 	ldw	ra,4(sp)
  81391c:	df000017 	ldw	fp,0(sp)
  813920:	dec00204 	addi	sp,sp,8
  813924:	f800283a 	ret

00813928 <match_file_record_to_name_ext>:

bool match_file_record_to_name_ext(t_file_record *file_record, char *name,
		char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
  813928:	defff604 	addi	sp,sp,-40
  81392c:	df000915 	stw	fp,36(sp)
  813930:	df000904 	addi	fp,sp,36
  813934:	e13ff915 	stw	r4,-28(fp)
  813938:	e17ffa15 	stw	r5,-24(fp)
  81393c:	e1bffb15 	stw	r6,-20(fp)
	bool match = true;
  813940:	00800044 	movi	r2,1
  813944:	e0bff815 	stw	r2,-32(fp)
	int index;

	for (index = 0; index < 8; index++) {
  813948:	e03ff715 	stw	zero,-36(fp)
  81394c:	00005006 	br	813a90 <match_file_record_to_name_ext+0x168>
		if (CHAR_TO_UPPER(file_record->name[index])
  813950:	e0fff717 	ldw	r3,-36(fp)
  813954:	e0bff917 	ldw	r2,-28(fp)
  813958:	10c5883a 	add	r2,r2,r3
  81395c:	10800003 	ldbu	r2,0(r2)
  813960:	10803fcc 	andi	r2,r2,255
  813964:	10801870 	cmpltui	r2,r2,97
  813968:	1000111e 	bne	r2,zero,8139b0 <match_file_record_to_name_ext+0x88>
  81396c:	e0fff717 	ldw	r3,-36(fp)
  813970:	e0bff917 	ldw	r2,-28(fp)
  813974:	10c5883a 	add	r2,r2,r3
  813978:	10800003 	ldbu	r2,0(r2)
  81397c:	10803fcc 	andi	r2,r2,255
  813980:	10801ee8 	cmpgeui	r2,r2,123
  813984:	10000a1e 	bne	r2,zero,8139b0 <match_file_record_to_name_ext+0x88>
  813988:	e0fff717 	ldw	r3,-36(fp)
  81398c:	e0bff917 	ldw	r2,-28(fp)
  813990:	10c5883a 	add	r2,r2,r3
  813994:	10800003 	ldbu	r2,0(r2)
  813998:	10bff804 	addi	r2,r2,-32
  81399c:	10803fcc 	andi	r2,r2,255
  8139a0:	1080201c 	xori	r2,r2,128
  8139a4:	10bfe004 	addi	r2,r2,-128
  8139a8:	e0bfff15 	stw	r2,-4(fp)
  8139ac:	00000806 	br	8139d0 <match_file_record_to_name_ext+0xa8>
  8139b0:	e0fff717 	ldw	r3,-36(fp)
  8139b4:	e0bff917 	ldw	r2,-28(fp)
  8139b8:	10c5883a 	add	r2,r2,r3
  8139bc:	10800003 	ldbu	r2,0(r2)
  8139c0:	10803fcc 	andi	r2,r2,255
  8139c4:	1080201c 	xori	r2,r2,128
  8139c8:	10bfe004 	addi	r2,r2,-128
  8139cc:	e0bfff15 	stw	r2,-4(fp)
  8139d0:	e0bff717 	ldw	r2,-36(fp)
  8139d4:	1007883a 	mov	r3,r2
  8139d8:	e0bffa17 	ldw	r2,-24(fp)
  8139dc:	1885883a 	add	r2,r3,r2
  8139e0:	10800003 	ldbu	r2,0(r2)
  8139e4:	10803fcc 	andi	r2,r2,255
  8139e8:	1080201c 	xori	r2,r2,128
  8139ec:	10bfe004 	addi	r2,r2,-128
  8139f0:	10801850 	cmplti	r2,r2,97
  8139f4:	1000151e 	bne	r2,zero,813a4c <match_file_record_to_name_ext+0x124>
  8139f8:	e0bff717 	ldw	r2,-36(fp)
  8139fc:	1007883a 	mov	r3,r2
  813a00:	e0bffa17 	ldw	r2,-24(fp)
  813a04:	1885883a 	add	r2,r3,r2
  813a08:	10800003 	ldbu	r2,0(r2)
  813a0c:	10803fcc 	andi	r2,r2,255
  813a10:	1080201c 	xori	r2,r2,128
  813a14:	10bfe004 	addi	r2,r2,-128
  813a18:	10801ec8 	cmpgei	r2,r2,123
  813a1c:	10000b1e 	bne	r2,zero,813a4c <match_file_record_to_name_ext+0x124>
  813a20:	e0bff717 	ldw	r2,-36(fp)
  813a24:	1007883a 	mov	r3,r2
  813a28:	e0bffa17 	ldw	r2,-24(fp)
  813a2c:	1885883a 	add	r2,r3,r2
  813a30:	10800003 	ldbu	r2,0(r2)
  813a34:	10bff804 	addi	r2,r2,-32
  813a38:	10803fcc 	andi	r2,r2,255
  813a3c:	1080201c 	xori	r2,r2,128
  813a40:	10bfe004 	addi	r2,r2,-128
  813a44:	e0bffe15 	stw	r2,-8(fp)
  813a48:	00000906 	br	813a70 <match_file_record_to_name_ext+0x148>
  813a4c:	e0bff717 	ldw	r2,-36(fp)
  813a50:	1007883a 	mov	r3,r2
  813a54:	e0bffa17 	ldw	r2,-24(fp)
  813a58:	1885883a 	add	r2,r3,r2
  813a5c:	10800003 	ldbu	r2,0(r2)
  813a60:	10803fcc 	andi	r2,r2,255
  813a64:	1080201c 	xori	r2,r2,128
  813a68:	10bfe004 	addi	r2,r2,-128
  813a6c:	e0bffe15 	stw	r2,-8(fp)
  813a70:	e0bfff17 	ldw	r2,-4(fp)
  813a74:	e0fffe17 	ldw	r3,-8(fp)
  813a78:	10c00226 	beq	r2,r3,813a84 <match_file_record_to_name_ext+0x15c>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
  813a7c:	e03ff815 	stw	zero,-32(fp)
			break;
  813a80:	00000606 	br	813a9c <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
  813a84:	e0bff717 	ldw	r2,-36(fp)
  813a88:	10800044 	addi	r2,r2,1
  813a8c:	e0bff715 	stw	r2,-36(fp)
  813a90:	e0bff717 	ldw	r2,-36(fp)
  813a94:	10800210 	cmplti	r2,r2,8
  813a98:	103fad1e 	bne	r2,zero,813950 <match_file_record_to_name_ext+0x28>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
  813a9c:	e03ff715 	stw	zero,-36(fp)
  813aa0:	00005406 	br	813bf4 <match_file_record_to_name_ext+0x2cc>
		if (CHAR_TO_UPPER(file_record->extension[index])
  813aa4:	e0fff717 	ldw	r3,-36(fp)
  813aa8:	e0bff917 	ldw	r2,-28(fp)
  813aac:	1885883a 	add	r2,r3,r2
  813ab0:	10800204 	addi	r2,r2,8
  813ab4:	10800003 	ldbu	r2,0(r2)
  813ab8:	10803fcc 	andi	r2,r2,255
  813abc:	10801870 	cmpltui	r2,r2,97
  813ac0:	1000131e 	bne	r2,zero,813b10 <match_file_record_to_name_ext+0x1e8>
  813ac4:	e0fff717 	ldw	r3,-36(fp)
  813ac8:	e0bff917 	ldw	r2,-28(fp)
  813acc:	1885883a 	add	r2,r3,r2
  813ad0:	10800204 	addi	r2,r2,8
  813ad4:	10800003 	ldbu	r2,0(r2)
  813ad8:	10803fcc 	andi	r2,r2,255
  813adc:	10801ee8 	cmpgeui	r2,r2,123
  813ae0:	10000b1e 	bne	r2,zero,813b10 <match_file_record_to_name_ext+0x1e8>
  813ae4:	e0fff717 	ldw	r3,-36(fp)
  813ae8:	e0bff917 	ldw	r2,-28(fp)
  813aec:	1885883a 	add	r2,r3,r2
  813af0:	10800204 	addi	r2,r2,8
  813af4:	10800003 	ldbu	r2,0(r2)
  813af8:	10bff804 	addi	r2,r2,-32
  813afc:	10803fcc 	andi	r2,r2,255
  813b00:	1080201c 	xori	r2,r2,128
  813b04:	10bfe004 	addi	r2,r2,-128
  813b08:	e0bffd15 	stw	r2,-12(fp)
  813b0c:	00000906 	br	813b34 <match_file_record_to_name_ext+0x20c>
  813b10:	e0fff717 	ldw	r3,-36(fp)
  813b14:	e0bff917 	ldw	r2,-28(fp)
  813b18:	1885883a 	add	r2,r3,r2
  813b1c:	10800204 	addi	r2,r2,8
  813b20:	10800003 	ldbu	r2,0(r2)
  813b24:	10803fcc 	andi	r2,r2,255
  813b28:	1080201c 	xori	r2,r2,128
  813b2c:	10bfe004 	addi	r2,r2,-128
  813b30:	e0bffd15 	stw	r2,-12(fp)
  813b34:	e0bff717 	ldw	r2,-36(fp)
  813b38:	1007883a 	mov	r3,r2
  813b3c:	e0bffb17 	ldw	r2,-20(fp)
  813b40:	1885883a 	add	r2,r3,r2
  813b44:	10800003 	ldbu	r2,0(r2)
  813b48:	10803fcc 	andi	r2,r2,255
  813b4c:	1080201c 	xori	r2,r2,128
  813b50:	10bfe004 	addi	r2,r2,-128
  813b54:	10801850 	cmplti	r2,r2,97
  813b58:	1000151e 	bne	r2,zero,813bb0 <match_file_record_to_name_ext+0x288>
  813b5c:	e0bff717 	ldw	r2,-36(fp)
  813b60:	1007883a 	mov	r3,r2
  813b64:	e0bffb17 	ldw	r2,-20(fp)
  813b68:	1885883a 	add	r2,r3,r2
  813b6c:	10800003 	ldbu	r2,0(r2)
  813b70:	10803fcc 	andi	r2,r2,255
  813b74:	1080201c 	xori	r2,r2,128
  813b78:	10bfe004 	addi	r2,r2,-128
  813b7c:	10801ec8 	cmpgei	r2,r2,123
  813b80:	10000b1e 	bne	r2,zero,813bb0 <match_file_record_to_name_ext+0x288>
  813b84:	e0bff717 	ldw	r2,-36(fp)
  813b88:	1007883a 	mov	r3,r2
  813b8c:	e0bffb17 	ldw	r2,-20(fp)
  813b90:	1885883a 	add	r2,r3,r2
  813b94:	10800003 	ldbu	r2,0(r2)
  813b98:	10bff804 	addi	r2,r2,-32
  813b9c:	10803fcc 	andi	r2,r2,255
  813ba0:	1080201c 	xori	r2,r2,128
  813ba4:	10bfe004 	addi	r2,r2,-128
  813ba8:	e0bffc15 	stw	r2,-16(fp)
  813bac:	00000906 	br	813bd4 <match_file_record_to_name_ext+0x2ac>
  813bb0:	e0bff717 	ldw	r2,-36(fp)
  813bb4:	1007883a 	mov	r3,r2
  813bb8:	e0bffb17 	ldw	r2,-20(fp)
  813bbc:	1885883a 	add	r2,r3,r2
  813bc0:	10800003 	ldbu	r2,0(r2)
  813bc4:	10803fcc 	andi	r2,r2,255
  813bc8:	1080201c 	xori	r2,r2,128
  813bcc:	10bfe004 	addi	r2,r2,-128
  813bd0:	e0bffc15 	stw	r2,-16(fp)
  813bd4:	e0bffd17 	ldw	r2,-12(fp)
  813bd8:	e0fffc17 	ldw	r3,-16(fp)
  813bdc:	10c00226 	beq	r2,r3,813be8 <match_file_record_to_name_ext+0x2c0>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
  813be0:	e03ff815 	stw	zero,-32(fp)
			break;
  813be4:	00000606 	br	813c00 <match_file_record_to_name_ext+0x2d8>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
  813be8:	e0bff717 	ldw	r2,-36(fp)
  813bec:	10800044 	addi	r2,r2,1
  813bf0:	e0bff715 	stw	r2,-36(fp)
  813bf4:	e0bff717 	ldw	r2,-36(fp)
  813bf8:	108000d0 	cmplti	r2,r2,3
  813bfc:	103fa91e 	bne	r2,zero,813aa4 <match_file_record_to_name_ext+0x17c>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
			break;
		}
	}
	return match;
  813c00:	e0bff817 	ldw	r2,-32(fp)
}
  813c04:	e037883a 	mov	sp,fp
  813c08:	df000017 	ldw	fp,0(sp)
  813c0c:	dec00104 	addi	sp,sp,4
  813c10:	f800283a 	ret

00813c14 <get_home_directory_cluster_for_file>:

bool get_home_directory_cluster_for_file(char *file_name,
		int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
  813c14:	deffe604 	addi	sp,sp,-104
  813c18:	dfc01915 	stw	ra,100(sp)
  813c1c:	df001815 	stw	fp,96(sp)
  813c20:	df001804 	addi	fp,sp,96
  813c24:	e13ffc15 	stw	r4,-16(fp)
  813c28:	e17ffd15 	stw	r5,-12(fp)
  813c2c:	e1bffe15 	stw	r6,-8(fp)
	bool result = false;
  813c30:	e03ff715 	stw	zero,-36(fp)
	int home_dir_cluster = 0;
  813c34:	e03ff615 	stw	zero,-40(fp)
	int location, index;
	int start_location = 0;
  813c38:	e03ff315 	stw	zero,-52(fp)

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
  813c3c:	e13ffc17 	ldw	r4,-16(fp)
  813c40:	08138680 	call	813868 <get_dir_divider_location>
  813c44:	e0bff515 	stw	r2,-44(fp)
	while (location > 0) {
  813c48:	00012206 	br	8140d4 <get_home_directory_cluster_for_file+0x4c0>
		char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  813c4c:	00800804 	movi	r2,32
  813c50:	e0bff805 	stb	r2,-32(fp)
  813c54:	00800804 	movi	r2,32
  813c58:	e0bff845 	stb	r2,-31(fp)
  813c5c:	00800804 	movi	r2,32
  813c60:	e0bff885 	stb	r2,-30(fp)
  813c64:	00800804 	movi	r2,32
  813c68:	e0bff8c5 	stb	r2,-29(fp)
  813c6c:	00800804 	movi	r2,32
  813c70:	e0bff905 	stb	r2,-28(fp)
  813c74:	00800804 	movi	r2,32
  813c78:	e0bff945 	stb	r2,-27(fp)
  813c7c:	00800804 	movi	r2,32
  813c80:	e0bff985 	stb	r2,-26(fp)
  813c84:	00800804 	movi	r2,32
  813c88:	e0bff9c5 	stb	r2,-25(fp)
		char extension[3] = { ' ', ' ', ' ' };
  813c8c:	00800804 	movi	r2,32
  813c90:	e0bffa05 	stb	r2,-24(fp)
  813c94:	00800804 	movi	r2,32
  813c98:	e0bffa45 	stb	r2,-23(fp)
  813c9c:	00800804 	movi	r2,32
  813ca0:	e0bffa85 	stb	r2,-22(fp)
		int ext_index = -1;
  813ca4:	00bfffc4 	movi	r2,-1
  813ca8:	e0bff215 	stw	r2,-56(fp)
		int new_cluster = home_dir_cluster;
  813cac:	e0bff617 	ldw	r2,-40(fp)
  813cb0:	e0bff115 	stw	r2,-60(fp)

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
  813cb4:	e03ff415 	stw	zero,-48(fp)
  813cb8:	00002e06 	br	813d74 <get_home_directory_cluster_for_file+0x160>
			if (file_name[index + start_location] == '.') {
  813cbc:	e0fff417 	ldw	r3,-48(fp)
  813cc0:	e0bff317 	ldw	r2,-52(fp)
  813cc4:	1885883a 	add	r2,r3,r2
  813cc8:	1007883a 	mov	r3,r2
  813ccc:	e0bffc17 	ldw	r2,-16(fp)
  813cd0:	1885883a 	add	r2,r3,r2
  813cd4:	10800003 	ldbu	r2,0(r2)
  813cd8:	10803fcc 	andi	r2,r2,255
  813cdc:	1080201c 	xori	r2,r2,128
  813ce0:	10bfe004 	addi	r2,r2,-128
  813ce4:	10800b98 	cmpnei	r2,r2,46
  813ce8:	1000031e 	bne	r2,zero,813cf8 <get_home_directory_cluster_for_file+0xe4>
				ext_index = index;
  813cec:	e0bff417 	ldw	r2,-48(fp)
  813cf0:	e0bff215 	stw	r2,-56(fp)
  813cf4:	00001c06 	br	813d68 <get_home_directory_cluster_for_file+0x154>
			} else if (ext_index < 0) {
  813cf8:	e0bff217 	ldw	r2,-56(fp)
  813cfc:	1004403a 	cmpge	r2,r2,zero
  813d00:	10000c1e 	bne	r2,zero,813d34 <get_home_directory_cluster_for_file+0x120>
				name[index] = file_name[index + start_location];
  813d04:	e13ff417 	ldw	r4,-48(fp)
  813d08:	e0fff417 	ldw	r3,-48(fp)
  813d0c:	e0bff317 	ldw	r2,-52(fp)
  813d10:	1885883a 	add	r2,r3,r2
  813d14:	1007883a 	mov	r3,r2
  813d18:	e0bffc17 	ldw	r2,-16(fp)
  813d1c:	1885883a 	add	r2,r3,r2
  813d20:	10c00003 	ldbu	r3,0(r2)
  813d24:	e0bff804 	addi	r2,fp,-32
  813d28:	1105883a 	add	r2,r2,r4
  813d2c:	10c00005 	stb	r3,0(r2)
  813d30:	00000d06 	br	813d68 <get_home_directory_cluster_for_file+0x154>
			} else {
				extension[index - ext_index]
  813d34:	e0fff417 	ldw	r3,-48(fp)
  813d38:	e0bff217 	ldw	r2,-56(fp)
  813d3c:	1889c83a 	sub	r4,r3,r2
  813d40:	e0fff417 	ldw	r3,-48(fp)
  813d44:	e0bff317 	ldw	r2,-52(fp)
  813d48:	1885883a 	add	r2,r3,r2
  813d4c:	1007883a 	mov	r3,r2
  813d50:	e0bffc17 	ldw	r2,-16(fp)
  813d54:	1885883a 	add	r2,r3,r2
  813d58:	10c00003 	ldbu	r3,0(r2)
  813d5c:	e0bffa04 	addi	r2,fp,-24
  813d60:	1105883a 	add	r2,r2,r4
  813d64:	10c00005 	stb	r3,0(r2)
		char extension[3] = { ' ', ' ', ' ' };
		int ext_index = -1;
		int new_cluster = home_dir_cluster;

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
  813d68:	e0bff417 	ldw	r2,-48(fp)
  813d6c:	10800044 	addi	r2,r2,1
  813d70:	e0bff415 	stw	r2,-48(fp)
  813d74:	e0fff417 	ldw	r3,-48(fp)
  813d78:	e0bff517 	ldw	r2,-44(fp)
  813d7c:	18bfcf16 	blt	r3,r2,813cbc <get_home_directory_cluster_for_file+0xa8>
				extension[index - ext_index]
						= file_name[index + start_location];
			}
		}

		if (home_dir_cluster == 0) {
  813d80:	e0bff617 	ldw	r2,-40(fp)
  813d84:	1004c03a 	cmpne	r2,r2,zero
  813d88:	1000551e 	bne	r2,zero,813ee0 <get_home_directory_cluster_for_file+0x2cc>
			/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
  813d8c:	008020b4 	movhi	r2,130
  813d90:	10afc404 	addi	r2,r2,-16624
  813d94:	1080050b 	ldhu	r2,20(r2)
  813d98:	10bfffcc 	andi	r2,r2,65535
  813d9c:	1008917a 	slli	r4,r2,5
  813da0:	008020b4 	movhi	r2,130
  813da4:	10afc404 	addi	r2,r2,-16624
  813da8:	1080030b 	ldhu	r2,12(r2)
  813dac:	117fffcc 	andi	r5,r2,65535
  813db0:	0804bfc0 	call	804bfc <__divsi3>
  813db4:	e0bff015 	stw	r2,-64(fp)
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  813db8:	e03fef15 	stw	zero,-68(fp)
  813dbc:	00003806 	br	813ea0 <get_home_directory_cluster_for_file+0x28c>
				if (Read_Sector_Data(sector_index
  813dc0:	008020b4 	movhi	r2,130
  813dc4:	10afc404 	addi	r2,r2,-16624
  813dc8:	10c01317 	ldw	r3,76(r2)
  813dcc:	e0bfef17 	ldw	r2,-68(fp)
  813dd0:	1885883a 	add	r2,r3,r2
  813dd4:	1009883a 	mov	r4,r2
  813dd8:	d1672217 	ldw	r5,-25464(gp)
  813ddc:	08124380 	call	812438 <Read_Sector_Data>
  813de0:	1005003a 	cmpeq	r2,r2,zero
  813de4:	1000311e 	bne	r2,zero,813eac <get_home_directory_cluster_for_file+0x298>
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  813de8:	e03fee15 	stw	zero,-72(fp)
  813dec:	00002306 	br	813e7c <get_home_directory_cluster_for_file+0x268>

						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
  813df0:	e0bfee17 	ldw	r2,-72(fp)
  813df4:	1008917a 	slli	r4,r2,5
  813df8:	e1ffef17 	ldw	r7,-68(fp)
  813dfc:	e17ffe17 	ldw	r5,-8(fp)
  813e00:	000d883a 	mov	r6,zero
  813e04:	08128800 	call	812880 <Read_File_Record_At_Offset>
								file_record, 0, sector_index);
						if ((file_record->name[0] != 0xe5)
  813e08:	e0bffe17 	ldw	r2,-8(fp)
  813e0c:	10800003 	ldbu	r2,0(r2)
  813e10:	10803fcc 	andi	r2,r2,255
  813e14:	10803960 	cmpeqi	r2,r2,229
  813e18:	1000151e 	bne	r2,zero,813e70 <get_home_directory_cluster_for_file+0x25c>
  813e1c:	e0bffe17 	ldw	r2,-8(fp)
  813e20:	10800003 	ldbu	r2,0(r2)
  813e24:	10803fcc 	andi	r2,r2,255
  813e28:	1005003a 	cmpeq	r2,r2,zero
  813e2c:	1000101e 	bne	r2,zero,813e70 <get_home_directory_cluster_for_file+0x25c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
  813e30:	e17ff804 	addi	r5,fp,-32
  813e34:	e1bffa04 	addi	r6,fp,-24
  813e38:	e13ffe17 	ldw	r4,-8(fp)
  813e3c:	08139280 	call	813928 <match_file_record_to_name_ext>
  813e40:	e0bfed15 	stw	r2,-76(fp)
							if (match) {
  813e44:	e0bfed17 	ldw	r2,-76(fp)
  813e48:	1005003a 	cmpeq	r2,r2,zero
  813e4c:	1000081e 	bne	r2,zero,813e70 <get_home_directory_cluster_for_file+0x25c>
								new_cluster = file_record->start_cluster_index;
  813e50:	e0bffe17 	ldw	r2,-8(fp)
  813e54:	1080058b 	ldhu	r2,22(r2)
  813e58:	10bfffcc 	andi	r2,r2,65535
  813e5c:	e0bff115 	stw	r2,-60(fp)
								file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
  813e60:	e0fffe17 	ldw	r3,-8(fp)
  813e64:	00800044 	movi	r2,1
  813e68:	18800a15 	stw	r2,40(r3)
								break;
  813e6c:	00000606 	br	813e88 <get_home_directory_cluster_for_file+0x274>
				if (Read_Sector_Data(sector_index
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  813e70:	e0bfee17 	ldw	r2,-72(fp)
  813e74:	10800044 	addi	r2,r2,1
  813e78:	e0bfee15 	stw	r2,-72(fp)
  813e7c:	e0bfee17 	ldw	r2,-72(fp)
  813e80:	10800410 	cmplti	r2,r2,16
  813e84:	103fda1e 	bne	r2,zero,813df0 <get_home_directory_cluster_for_file+0x1dc>
						}
					}
				} else {
					break;
				}
				if (new_cluster != home_dir_cluster) {
  813e88:	e0fff117 	ldw	r3,-60(fp)
  813e8c:	e0bff617 	ldw	r2,-40(fp)
  813e90:	1880061e 	bne	r3,r2,813eac <get_home_directory_cluster_for_file+0x298>
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  813e94:	e0bfef17 	ldw	r2,-68(fp)
  813e98:	10800044 	addi	r2,r2,1
  813e9c:	e0bfef15 	stw	r2,-68(fp)
  813ea0:	e0ffef17 	ldw	r3,-68(fp)
  813ea4:	e0bff017 	ldw	r2,-64(fp)
  813ea8:	18bfc516 	blt	r3,r2,813dc0 <get_home_directory_cluster_for_file+0x1ac>
				}
				if (new_cluster != home_dir_cluster) {
					break;
				}
			}
			if (new_cluster != home_dir_cluster) {
  813eac:	e0fff117 	ldw	r3,-60(fp)
  813eb0:	e0bff617 	ldw	r2,-40(fp)
  813eb4:	18800826 	beq	r3,r2,813ed8 <get_home_directory_cluster_for_file+0x2c4>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
  813eb8:	e0bff117 	ldw	r2,-60(fp)
  813ebc:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
  813ec0:	e0fff317 	ldw	r3,-52(fp)
  813ec4:	e0bff517 	ldw	r2,-44(fp)
  813ec8:	1885883a 	add	r2,r3,r2
  813ecc:	10800044 	addi	r2,r2,1
  813ed0:	e0bff315 	stw	r2,-52(fp)
  813ed4:	00007406 	br	8140a8 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
  813ed8:	e03fff15 	stw	zero,-4(fp)
  813edc:	00008c06 	br	814110 <get_home_directory_cluster_for_file+0x4fc>
			}
		} else {
			// This is a subdirectory that can have any number of elements. So scan through it as though it was a file
			// and see if you can find the directory of interest.
			int cluster = home_dir_cluster;
  813ee0:	e0bff617 	ldw	r2,-40(fp)
  813ee4:	e0bfec15 	stw	r2,-80(fp)

			do {
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
  813ee8:	e0bfec17 	ldw	r2,-80(fp)
  813eec:	10ffff84 	addi	r3,r2,-2
  813ef0:	008020b4 	movhi	r2,130
  813ef4:	10afc404 	addi	r2,r2,-16624
  813ef8:	10800383 	ldbu	r2,14(r2)
  813efc:	10803fcc 	andi	r2,r2,255
  813f00:	1885383a 	mul	r2,r3,r2
  813f04:	1007883a 	mov	r3,r2
  813f08:	008020b4 	movhi	r2,130
  813f0c:	10afc404 	addi	r2,r2,-16624
  813f10:	10801417 	ldw	r2,80(r2)
  813f14:	1885883a 	add	r2,r3,r2
  813f18:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index;

				for (sector_index = 0; sector_index
  813f1c:	e03fea15 	stw	zero,-88(fp)
  813f20:	00003206 	br	813fec <get_home_directory_cluster_for_file+0x3d8>
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
  813f24:	e0ffea17 	ldw	r3,-88(fp)
  813f28:	e0bfeb17 	ldw	r2,-84(fp)
  813f2c:	1889883a 	add	r4,r3,r2
  813f30:	d1672217 	ldw	r5,-25464(gp)
  813f34:	08124380 	call	812438 <Read_Sector_Data>
  813f38:	1005003a 	cmpeq	r2,r2,zero
  813f3c:	1000311e 	bne	r2,zero,814004 <get_home_directory_cluster_for_file+0x3f0>
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
  813f40:	e03fe915 	stw	zero,-92(fp)
  813f44:	00002006 	br	813fc8 <get_home_directory_cluster_for_file+0x3b4>
							// Read file record.
							Read_File_Record_At_Offset(file_counter * 32,
  813f48:	e0bfe917 	ldw	r2,-92(fp)
  813f4c:	1008917a 	slli	r4,r2,5
  813f50:	e1bfec17 	ldw	r6,-80(fp)
  813f54:	e1ffea17 	ldw	r7,-88(fp)
  813f58:	e17ffe17 	ldw	r5,-8(fp)
  813f5c:	08128800 	call	812880 <Read_File_Record_At_Offset>
									file_record, cluster, sector_index);
							if ((file_record->name[0] != 0xe5)
  813f60:	e0bffe17 	ldw	r2,-8(fp)
  813f64:	10800003 	ldbu	r2,0(r2)
  813f68:	10803fcc 	andi	r2,r2,255
  813f6c:	10803960 	cmpeqi	r2,r2,229
  813f70:	1000121e 	bne	r2,zero,813fbc <get_home_directory_cluster_for_file+0x3a8>
  813f74:	e0bffe17 	ldw	r2,-8(fp)
  813f78:	10800003 	ldbu	r2,0(r2)
  813f7c:	10803fcc 	andi	r2,r2,255
  813f80:	1005003a 	cmpeq	r2,r2,zero
  813f84:	10000d1e 	bne	r2,zero,813fbc <get_home_directory_cluster_for_file+0x3a8>
									&& (file_record->name[0] != 0x00)) {
								bool match = match_file_record_to_name_ext(
										file_record, name, extension);
  813f88:	e17ff804 	addi	r5,fp,-32
  813f8c:	e1bffa04 	addi	r6,fp,-24
  813f90:	e13ffe17 	ldw	r4,-8(fp)
  813f94:	08139280 	call	813928 <match_file_record_to_name_ext>
  813f98:	e0bfe815 	stw	r2,-96(fp)
								if (match) {
  813f9c:	e0bfe817 	ldw	r2,-96(fp)
  813fa0:	1005003a 	cmpeq	r2,r2,zero
  813fa4:	1000051e 	bne	r2,zero,813fbc <get_home_directory_cluster_for_file+0x3a8>
									new_cluster
  813fa8:	e0bffe17 	ldw	r2,-8(fp)
  813fac:	1080058b 	ldhu	r2,22(r2)
  813fb0:	10bfffcc 	andi	r2,r2,65535
  813fb4:	e0bff115 	stw	r2,-60(fp)
											= file_record->start_cluster_index;
									break;
  813fb8:	00000606 	br	813fd4 <get_home_directory_cluster_for_file+0x3c0>
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
  813fbc:	e0bfe917 	ldw	r2,-92(fp)
  813fc0:	10800044 	addi	r2,r2,1
  813fc4:	e0bfe915 	stw	r2,-92(fp)
  813fc8:	e0bfe917 	ldw	r2,-92(fp)
  813fcc:	10800410 	cmplti	r2,r2,16
  813fd0:	103fdd1e 	bne	r2,zero,813f48 <get_home_directory_cluster_for_file+0x334>
							}
						}
					} else {
						break;
					}
					if (new_cluster != home_dir_cluster) {
  813fd4:	e0fff117 	ldw	r3,-60(fp)
  813fd8:	e0bff617 	ldw	r2,-40(fp)
  813fdc:	1880091e 	bne	r3,r2,814004 <get_home_directory_cluster_for_file+0x3f0>
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
						< boot_sector_data.sectors_per_cluster; sector_index++) {
  813fe0:	e0bfea17 	ldw	r2,-88(fp)
  813fe4:	10800044 	addi	r2,r2,1
  813fe8:	e0bfea15 	stw	r2,-88(fp)
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
  813fec:	008020b4 	movhi	r2,130
  813ff0:	10afc404 	addi	r2,r2,-16624
  813ff4:	10800383 	ldbu	r2,14(r2)
  813ff8:	10c03fcc 	andi	r3,r2,255
  813ffc:	e0bfea17 	ldw	r2,-88(fp)
  814000:	10ffc816 	blt	r2,r3,813f24 <get_home_directory_cluster_for_file+0x310>
						break;
					}
				}
				// If this is the end of the cluster and the directory has not been found, then see if there is another cluster
				// that holds data for the current directory.
				if (new_cluster == home_dir_cluster) {
  814004:	e0fff117 	ldw	r3,-60(fp)
  814008:	e0bff617 	ldw	r2,-40(fp)
  81400c:	1880131e 	bne	r3,r2,81405c <get_home_directory_cluster_for_file+0x448>
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster)) {
  814010:	e13ff117 	ldw	r4,-60(fp)
  814014:	e17ffb04 	addi	r5,fp,-20
  814018:	08125340 	call	812534 <get_cluster_flag>
  81401c:	1005003a 	cmpeq	r2,r2,zero
  814020:	10000c1e 	bne	r2,zero,814054 <get_home_directory_cluster_for_file+0x440>
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
  814024:	e0bffb0b 	ldhu	r2,-20(fp)
  814028:	10bfffcc 	andi	r2,r2,65535
  81402c:	10fffe0c 	andi	r3,r2,65528
  814030:	00bffe14 	movui	r2,65528
  814034:	1880021e 	bne	r3,r2,814040 <get_home_directory_cluster_for_file+0x42c>
							return false;
  814038:	e03fff15 	stw	zero,-4(fp)
  81403c:	00003406 	br	814110 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
  814040:	e0bffb0b 	ldhu	r2,-20(fp)
  814044:	10bfffcc 	andi	r2,r2,65535
  814048:	10bffe0c 	andi	r2,r2,65528
  81404c:	e0bff115 	stw	r2,-60(fp)
  814050:	00000206 	br	81405c <get_home_directory_cluster_for_file+0x448>
					} else {
						// Directory path is invalid.                 
						return false;
  814054:	e03fff15 	stw	zero,-4(fp)
  814058:	00002d06 	br	814110 <get_home_directory_cluster_for_file+0x4fc>
					}
				}
			} while ((cluster < 0x0000fff8)
					&& (new_cluster == home_dir_cluster));
  81405c:	e0ffec17 	ldw	r3,-80(fp)
  814060:	00bffdd4 	movui	r2,65527
  814064:	10c00316 	blt	r2,r3,814074 <get_home_directory_cluster_for_file+0x460>
  814068:	e0fff117 	ldw	r3,-60(fp)
  81406c:	e0bff617 	ldw	r2,-40(fp)
  814070:	18bf9d26 	beq	r3,r2,813ee8 <get_home_directory_cluster_for_file+0x2d4>
			if (new_cluster != home_dir_cluster) {
  814074:	e0fff117 	ldw	r3,-60(fp)
  814078:	e0bff617 	ldw	r2,-40(fp)
  81407c:	18800826 	beq	r3,r2,8140a0 <get_home_directory_cluster_for_file+0x48c>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
  814080:	e0bff117 	ldw	r2,-60(fp)
  814084:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
  814088:	e0fff317 	ldw	r3,-52(fp)
  81408c:	e0bff517 	ldw	r2,-44(fp)
  814090:	1885883a 	add	r2,r3,r2
  814094:	10800044 	addi	r2,r2,1
  814098:	e0bff315 	stw	r2,-52(fp)
  81409c:	00000206 	br	8140a8 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
  8140a0:	e03fff15 	stw	zero,-4(fp)
  8140a4:	00001a06 	br	814110 <get_home_directory_cluster_for_file+0x4fc>
			}
		}
		location = get_dir_divider_location(&(file_name[start_location]));
  8140a8:	e0bff317 	ldw	r2,-52(fp)
  8140ac:	1007883a 	mov	r3,r2
  8140b0:	e0bffc17 	ldw	r2,-16(fp)
  8140b4:	1889883a 	add	r4,r3,r2
  8140b8:	08138680 	call	813868 <get_dir_divider_location>
  8140bc:	e0bff515 	stw	r2,-44(fp)
		if (location < 0) {
  8140c0:	e0bff517 	ldw	r2,-44(fp)
  8140c4:	1004403a 	cmpge	r2,r2,zero
  8140c8:	1000021e 	bne	r2,zero,8140d4 <get_home_directory_cluster_for_file+0x4c0>
			// Directory has been located.
			result = true;
  8140cc:	00800044 	movi	r2,1
  8140d0:	e0bff715 	stw	r2,-36(fp)
	int location, index;
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
  8140d4:	e0bff517 	ldw	r2,-44(fp)
  8140d8:	10800048 	cmpgei	r2,r2,1
  8140dc:	103edb1e 	bne	r2,zero,813c4c <get_home_directory_cluster_for_file+0x38>
			// Directory has been located.
			result = true;
		}
	}

	*home_directory_cluster = home_dir_cluster;
  8140e0:	e0fffd17 	ldw	r3,-12(fp)
  8140e4:	e0bff617 	ldw	r2,-40(fp)
  8140e8:	18800015 	stw	r2,0(r3)
	if (home_dir_cluster == 0) {
  8140ec:	e0bff617 	ldw	r2,-40(fp)
  8140f0:	1004c03a 	cmpne	r2,r2,zero
  8140f4:	1000041e 	bne	r2,zero,814108 <get_home_directory_cluster_for_file+0x4f4>
		file_record->file_record_cluster = 0; // Home directory is the root directory.
  8140f8:	e0bffe17 	ldw	r2,-8(fp)
  8140fc:	10000a15 	stw	zero,40(r2)
		result = true;
  814100:	00800044 	movi	r2,1
  814104:	e0bff715 	stw	r2,-36(fp)
	}
	return result;
  814108:	e0bff717 	ldw	r2,-36(fp)
  81410c:	e0bfff15 	stw	r2,-4(fp)
  814110:	e0bfff17 	ldw	r2,-4(fp)
}
  814114:	e037883a 	mov	sp,fp
  814118:	dfc00117 	ldw	ra,4(sp)
  81411c:	df000017 	ldw	fp,0(sp)
  814120:	dec00204 	addi	sp,sp,8
  814124:	f800283a 	ret

00814128 <find_file_in_directory>:

bool find_file_in_directory(int directory_start_cluster, char *file_name,
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  814128:	deffe704 	addi	sp,sp,-100
  81412c:	dfc01815 	stw	ra,96(sp)
  814130:	df001715 	stw	fp,92(sp)
  814134:	df001704 	addi	fp,sp,92
  814138:	e13ffc15 	stw	r4,-16(fp)
  81413c:	e17ffd15 	stw	r5,-12(fp)
  814140:	e1bffe15 	stw	r6,-8(fp)
	int location = get_dir_divider_location(file_name);
  814144:	e13ffd17 	ldw	r4,-12(fp)
  814148:	08138680 	call	813868 <get_dir_divider_location>
  81414c:	e0bff715 	stw	r2,-36(fp)
	int last_dir_separator = 0;
  814150:	e03ff615 	stw	zero,-40(fp)
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  814154:	00800804 	movi	r2,32
  814158:	e0bff805 	stb	r2,-32(fp)
  81415c:	00800804 	movi	r2,32
  814160:	e0bff845 	stb	r2,-31(fp)
  814164:	00800804 	movi	r2,32
  814168:	e0bff885 	stb	r2,-30(fp)
  81416c:	00800804 	movi	r2,32
  814170:	e0bff8c5 	stb	r2,-29(fp)
  814174:	00800804 	movi	r2,32
  814178:	e0bff905 	stb	r2,-28(fp)
  81417c:	00800804 	movi	r2,32
  814180:	e0bff945 	stb	r2,-27(fp)
  814184:	00800804 	movi	r2,32
  814188:	e0bff985 	stb	r2,-26(fp)
  81418c:	00800804 	movi	r2,32
  814190:	e0bff9c5 	stb	r2,-25(fp)
	char extension[3] = { ' ', ' ', ' ' };
  814194:	00800804 	movi	r2,32
  814198:	e0bffa05 	stb	r2,-24(fp)
  81419c:	00800804 	movi	r2,32
  8141a0:	e0bffa45 	stb	r2,-23(fp)
  8141a4:	00800804 	movi	r2,32
  8141a8:	e0bffa85 	stb	r2,-22(fp)
	int ext_index = -1;
  8141ac:	00bfffc4 	movi	r2,-1
  8141b0:	e0bff515 	stw	r2,-44(fp)
	int cluster = directory_start_cluster;
  8141b4:	e0bffc17 	ldw	r2,-16(fp)
  8141b8:	e0bff415 	stw	r2,-48(fp)
	int index;
	int length = strlen(file_name);
  8141bc:	e13ffd17 	ldw	r4,-12(fp)
  8141c0:	0805e240 	call	805e24 <strlen>
  8141c4:	e0bff215 	stw	r2,-56(fp)
	bool result = false;
  8141c8:	e03ff115 	stw	zero,-60(fp)

	// Skip through all directory separators.
	while (location > 0) {
  8141cc:	00000b06 	br	8141fc <find_file_in_directory+0xd4>
		last_dir_separator = last_dir_separator + location + 1;
  8141d0:	e0fff617 	ldw	r3,-40(fp)
  8141d4:	e0bff717 	ldw	r2,-36(fp)
  8141d8:	1885883a 	add	r2,r3,r2
  8141dc:	10800044 	addi	r2,r2,1
  8141e0:	e0bff615 	stw	r2,-40(fp)
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
  8141e4:	e0bff617 	ldw	r2,-40(fp)
  8141e8:	1007883a 	mov	r3,r2
  8141ec:	e0bffd17 	ldw	r2,-12(fp)
  8141f0:	1889883a 	add	r4,r3,r2
  8141f4:	08138680 	call	813868 <get_dir_divider_location>
  8141f8:	e0bff715 	stw	r2,-36(fp)
	int index;
	int length = strlen(file_name);
	bool result = false;

	// Skip through all directory separators.
	while (location > 0) {
  8141fc:	e0bff717 	ldw	r2,-36(fp)
  814200:	10800048 	cmpgei	r2,r2,1
  814204:	103ff21e 	bne	r2,zero,8141d0 <find_file_in_directory+0xa8>
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
  814208:	e0bff617 	ldw	r2,-40(fp)
  81420c:	e0bff315 	stw	r2,-52(fp)
  814210:	00002b06 	br	8142c0 <find_file_in_directory+0x198>
		if (file_name[index] == '.') {
  814214:	e0bff317 	ldw	r2,-52(fp)
  814218:	1007883a 	mov	r3,r2
  81421c:	e0bffd17 	ldw	r2,-12(fp)
  814220:	1885883a 	add	r2,r3,r2
  814224:	10800003 	ldbu	r2,0(r2)
  814228:	10803fcc 	andi	r2,r2,255
  81422c:	1080201c 	xori	r2,r2,128
  814230:	10bfe004 	addi	r2,r2,-128
  814234:	10800b98 	cmpnei	r2,r2,46
  814238:	1000031e 	bne	r2,zero,814248 <find_file_in_directory+0x120>
			ext_index = index;
  81423c:	e0bff317 	ldw	r2,-52(fp)
  814240:	e0bff515 	stw	r2,-44(fp)
  814244:	00001b06 	br	8142b4 <find_file_in_directory+0x18c>
		} else if (ext_index < 0) {
  814248:	e0bff517 	ldw	r2,-44(fp)
  81424c:	1004403a 	cmpge	r2,r2,zero
  814250:	10000c1e 	bne	r2,zero,814284 <find_file_in_directory+0x15c>
			name[index - last_dir_separator] = file_name[index];
  814254:	e0fff317 	ldw	r3,-52(fp)
  814258:	e0bff617 	ldw	r2,-40(fp)
  81425c:	1889c83a 	sub	r4,r3,r2
  814260:	e0bff317 	ldw	r2,-52(fp)
  814264:	1007883a 	mov	r3,r2
  814268:	e0bffd17 	ldw	r2,-12(fp)
  81426c:	1885883a 	add	r2,r3,r2
  814270:	10c00003 	ldbu	r3,0(r2)
  814274:	e0bff804 	addi	r2,fp,-32
  814278:	1105883a 	add	r2,r2,r4
  81427c:	10c00005 	stb	r3,0(r2)
  814280:	00000c06 	br	8142b4 <find_file_in_directory+0x18c>
		} else {
			extension[index - ext_index - 1] = file_name[index];
  814284:	e0fff317 	ldw	r3,-52(fp)
  814288:	e0bff517 	ldw	r2,-44(fp)
  81428c:	1885c83a 	sub	r2,r3,r2
  814290:	113fffc4 	addi	r4,r2,-1
  814294:	e0bff317 	ldw	r2,-52(fp)
  814298:	1007883a 	mov	r3,r2
  81429c:	e0bffd17 	ldw	r2,-12(fp)
  8142a0:	1885883a 	add	r2,r3,r2
  8142a4:	10c00003 	ldbu	r3,0(r2)
  8142a8:	e0bffa04 	addi	r2,fp,-24
  8142ac:	1105883a 	add	r2,r2,r4
  8142b0:	10c00005 	stb	r3,0(r2)
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
  8142b4:	e0bff317 	ldw	r2,-52(fp)
  8142b8:	10800044 	addi	r2,r2,1
  8142bc:	e0bff315 	stw	r2,-52(fp)
  8142c0:	e0fff317 	ldw	r3,-52(fp)
  8142c4:	e0bff217 	ldw	r2,-56(fp)
  8142c8:	18bfd216 	blt	r3,r2,814214 <find_file_in_directory+0xec>
			extension[index - ext_index - 1] = file_name[index];
		}
	}

	// Look for the file.
	if (directory_start_cluster == 0) {
  8142cc:	e0bffc17 	ldw	r2,-16(fp)
  8142d0:	1004c03a 	cmpne	r2,r2,zero
  8142d4:	1000441e 	bne	r2,zero,8143e8 <find_file_in_directory+0x2c0>
		/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
  8142d8:	008020b4 	movhi	r2,130
  8142dc:	10afc404 	addi	r2,r2,-16624
  8142e0:	1080050b 	ldhu	r2,20(r2)
  8142e4:	10bfffcc 	andi	r2,r2,65535
  8142e8:	1008917a 	slli	r4,r2,5
  8142ec:	008020b4 	movhi	r2,130
  8142f0:	10afc404 	addi	r2,r2,-16624
  8142f4:	1080030b 	ldhu	r2,12(r2)
  8142f8:	117fffcc 	andi	r5,r2,65535
  8142fc:	0804bfc0 	call	804bfc <__divsi3>
  814300:	e0bff015 	stw	r2,-64(fp)
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  814304:	e03fef15 	stw	zero,-68(fp)
  814308:	00003306 	br	8143d8 <find_file_in_directory+0x2b0>
			if (Read_Sector_Data(sector_index
  81430c:	008020b4 	movhi	r2,130
  814310:	10afc404 	addi	r2,r2,-16624
  814314:	10c01317 	ldw	r3,76(r2)
  814318:	e0bfef17 	ldw	r2,-68(fp)
  81431c:	1885883a 	add	r2,r3,r2
  814320:	1009883a 	mov	r4,r2
  814324:	d1672217 	ldw	r5,-25464(gp)
  814328:	08124380 	call	812438 <Read_Sector_Data>
  81432c:	1005003a 	cmpeq	r2,r2,zero
  814330:	10008e1e 	bne	r2,zero,81456c <find_file_in_directory+0x444>
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  814334:	e03fee15 	stw	zero,-72(fp)
  814338:	00001e06 	br	8143b4 <find_file_in_directory+0x28c>
					// Read file record.
					Read_File_Record_At_Offset(file_counter * 32, file_record,
  81433c:	e0bfee17 	ldw	r2,-72(fp)
  814340:	1008917a 	slli	r4,r2,5
  814344:	e1ffef17 	ldw	r7,-68(fp)
  814348:	e17ffe17 	ldw	r5,-8(fp)
  81434c:	000d883a 	mov	r6,zero
  814350:	08128800 	call	812880 <Read_File_Record_At_Offset>
							0, sector_index);
					if ((file_record->name[0] != 0xe5) && (file_record->name[0]
  814354:	e0bffe17 	ldw	r2,-8(fp)
  814358:	10800003 	ldbu	r2,0(r2)
  81435c:	10803fcc 	andi	r2,r2,255
  814360:	10803960 	cmpeqi	r2,r2,229
  814364:	1000101e 	bne	r2,zero,8143a8 <find_file_in_directory+0x280>
  814368:	e0bffe17 	ldw	r2,-8(fp)
  81436c:	10800003 	ldbu	r2,0(r2)
  814370:	10803fcc 	andi	r2,r2,255
  814374:	1005003a 	cmpeq	r2,r2,zero
  814378:	10000b1e 	bne	r2,zero,8143a8 <find_file_in_directory+0x280>
							!= 0x00)) {
						bool match = match_file_record_to_name_ext(file_record,
								name, extension);
  81437c:	e17ff804 	addi	r5,fp,-32
  814380:	e1bffa04 	addi	r6,fp,-24
  814384:	e13ffe17 	ldw	r4,-8(fp)
  814388:	08139280 	call	813928 <match_file_record_to_name_ext>
  81438c:	e0bfed15 	stw	r2,-76(fp)

						if (match) {
  814390:	e0bfed17 	ldw	r2,-76(fp)
  814394:	1005003a 	cmpeq	r2,r2,zero
  814398:	1000031e 	bne	r2,zero,8143a8 <find_file_in_directory+0x280>
							result = true;
  81439c:	00800044 	movi	r2,1
  8143a0:	e0bff115 	stw	r2,-60(fp)
							break;
  8143a4:	00000606 	br	8143c0 <find_file_in_directory+0x298>
			if (Read_Sector_Data(sector_index
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  8143a8:	e0bfee17 	ldw	r2,-72(fp)
  8143ac:	10800044 	addi	r2,r2,1
  8143b0:	e0bfee15 	stw	r2,-72(fp)
  8143b4:	e0bfee17 	ldw	r2,-72(fp)
  8143b8:	10800410 	cmplti	r2,r2,16
  8143bc:	103fdf1e 	bne	r2,zero,81433c <find_file_in_directory+0x214>
					}
				}
			} else {
				break;
			}
			if (result) {
  8143c0:	e0bff117 	ldw	r2,-60(fp)
  8143c4:	1004c03a 	cmpne	r2,r2,zero
  8143c8:	1000681e 	bne	r2,zero,81456c <find_file_in_directory+0x444>
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  8143cc:	e0bfef17 	ldw	r2,-68(fp)
  8143d0:	10800044 	addi	r2,r2,1
  8143d4:	e0bfef15 	stw	r2,-68(fp)
  8143d8:	e0ffef17 	ldw	r3,-68(fp)
  8143dc:	e0bff017 	ldw	r2,-64(fp)
  8143e0:	18bfca16 	blt	r3,r2,81430c <find_file_in_directory+0x1e4>
  8143e4:	00006106 	br	81456c <find_file_in_directory+0x444>
		}
	} else {
		do {
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
  8143e8:	e0bff417 	ldw	r2,-48(fp)
  8143ec:	10ffff84 	addi	r3,r2,-2
  8143f0:	008020b4 	movhi	r2,130
  8143f4:	10afc404 	addi	r2,r2,-16624
  8143f8:	10800383 	ldbu	r2,14(r2)
  8143fc:	10803fcc 	andi	r2,r2,255
  814400:	1885383a 	mul	r2,r3,r2
  814404:	1007883a 	mov	r3,r2
  814408:	008020b4 	movhi	r2,130
  81440c:	10afc404 	addi	r2,r2,-16624
  814410:	10801417 	ldw	r2,80(r2)
  814414:	1885883a 	add	r2,r3,r2
  814418:	e0bfec15 	stw	r2,-80(fp)
			int sector_index;

			for (sector_index = 0; sector_index
  81441c:	e03feb15 	stw	zero,-84(fp)
  814420:	00003006 	br	8144e4 <find_file_in_directory+0x3bc>
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
  814424:	e0ffeb17 	ldw	r3,-84(fp)
  814428:	e0bfec17 	ldw	r2,-80(fp)
  81442c:	1889883a 	add	r4,r3,r2
  814430:	d1672217 	ldw	r5,-25464(gp)
  814434:	08124380 	call	812438 <Read_Sector_Data>
  814438:	1005003a 	cmpeq	r2,r2,zero
  81443c:	10002f1e 	bne	r2,zero,8144fc <find_file_in_directory+0x3d4>
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  814440:	e03fea15 	stw	zero,-88(fp)
  814444:	00001e06 	br	8144c0 <find_file_in_directory+0x398>
						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
  814448:	e0bfea17 	ldw	r2,-88(fp)
  81444c:	1008917a 	slli	r4,r2,5
  814450:	e1bff417 	ldw	r6,-48(fp)
  814454:	e1ffeb17 	ldw	r7,-84(fp)
  814458:	e17ffe17 	ldw	r5,-8(fp)
  81445c:	08128800 	call	812880 <Read_File_Record_At_Offset>
								file_record, cluster, sector_index);
						if ((file_record->name[0] != 0xe5)
  814460:	e0bffe17 	ldw	r2,-8(fp)
  814464:	10800003 	ldbu	r2,0(r2)
  814468:	10803fcc 	andi	r2,r2,255
  81446c:	10803960 	cmpeqi	r2,r2,229
  814470:	1000101e 	bne	r2,zero,8144b4 <find_file_in_directory+0x38c>
  814474:	e0bffe17 	ldw	r2,-8(fp)
  814478:	10800003 	ldbu	r2,0(r2)
  81447c:	10803fcc 	andi	r2,r2,255
  814480:	1005003a 	cmpeq	r2,r2,zero
  814484:	10000b1e 	bne	r2,zero,8144b4 <find_file_in_directory+0x38c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
  814488:	e17ff804 	addi	r5,fp,-32
  81448c:	e1bffa04 	addi	r6,fp,-24
  814490:	e13ffe17 	ldw	r4,-8(fp)
  814494:	08139280 	call	813928 <match_file_record_to_name_ext>
  814498:	e0bfe915 	stw	r2,-92(fp)

							if (match) {
  81449c:	e0bfe917 	ldw	r2,-92(fp)
  8144a0:	1005003a 	cmpeq	r2,r2,zero
  8144a4:	1000031e 	bne	r2,zero,8144b4 <find_file_in_directory+0x38c>
								result = true;
  8144a8:	00800044 	movi	r2,1
  8144ac:	e0bff115 	stw	r2,-60(fp)
								break;
  8144b0:	00000606 	br	8144cc <find_file_in_directory+0x3a4>
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  8144b4:	e0bfea17 	ldw	r2,-88(fp)
  8144b8:	10800044 	addi	r2,r2,1
  8144bc:	e0bfea15 	stw	r2,-88(fp)
  8144c0:	e0bfea17 	ldw	r2,-88(fp)
  8144c4:	10800410 	cmplti	r2,r2,16
  8144c8:	103fdf1e 	bne	r2,zero,814448 <find_file_in_directory+0x320>
						}
					}
				} else {
					break;
				}
				if (result) {
  8144cc:	e0bff117 	ldw	r2,-60(fp)
  8144d0:	1004c03a 	cmpne	r2,r2,zero
  8144d4:	1000091e 	bne	r2,zero,8144fc <find_file_in_directory+0x3d4>
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
					< boot_sector_data.sectors_per_cluster; sector_index++) {
  8144d8:	e0bfeb17 	ldw	r2,-84(fp)
  8144dc:	10800044 	addi	r2,r2,1
  8144e0:	e0bfeb15 	stw	r2,-84(fp)
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
  8144e4:	008020b4 	movhi	r2,130
  8144e8:	10afc404 	addi	r2,r2,-16624
  8144ec:	10800383 	ldbu	r2,14(r2)
  8144f0:	10c03fcc 	andi	r3,r2,255
  8144f4:	e0bfeb17 	ldw	r2,-84(fp)
  8144f8:	10ffca16 	blt	r2,r3,814424 <find_file_in_directory+0x2fc>
					break;
				}
			}
			// If this is the end of the cluster and the file has not been found, then see if there is another cluster
			// that holds data for the current directory.
			if (result == false) {
  8144fc:	e0bff117 	ldw	r2,-60(fp)
  814500:	1004c03a 	cmpne	r2,r2,zero
  814504:	1000131e 	bne	r2,zero,814554 <find_file_in_directory+0x42c>
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster)) {
  814508:	e13ff417 	ldw	r4,-48(fp)
  81450c:	e17ffb04 	addi	r5,fp,-20
  814510:	08125340 	call	812534 <get_cluster_flag>
  814514:	1005003a 	cmpeq	r2,r2,zero
  814518:	10000c1e 	bne	r2,zero,81454c <find_file_in_directory+0x424>
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  81451c:	e0bffb0b 	ldhu	r2,-20(fp)
  814520:	10bfffcc 	andi	r2,r2,65535
  814524:	10fffe0c 	andi	r3,r2,65528
  814528:	00bffe14 	movui	r2,65528
  81452c:	1880021e 	bne	r3,r2,814538 <find_file_in_directory+0x410>
						return false;
  814530:	e03fff15 	stw	zero,-4(fp)
  814534:	00000f06 	br	814574 <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
  814538:	e0bffb0b 	ldhu	r2,-20(fp)
  81453c:	10bfffcc 	andi	r2,r2,65535
  814540:	10bffe0c 	andi	r2,r2,65528
  814544:	e0bff415 	stw	r2,-48(fp)
  814548:	00000206 	br	814554 <find_file_in_directory+0x42c>
				} else {
					// Directory path is invalid.
					return false;
  81454c:	e03fff15 	stw	zero,-4(fp)
  814550:	00000806 	br	814574 <find_file_in_directory+0x44c>
				}
			}
		} while ((cluster < 0x0000fff8) && (result == false));
  814554:	e0fff417 	ldw	r3,-48(fp)
  814558:	00bffdd4 	movui	r2,65527
  81455c:	10c00316 	blt	r2,r3,81456c <find_file_in_directory+0x444>
  814560:	e0bff117 	ldw	r2,-60(fp)
  814564:	1005003a 	cmpeq	r2,r2,zero
  814568:	103f9f1e 	bne	r2,zero,8143e8 <find_file_in_directory+0x2c0>
	}

	return result;
  81456c:	e0bff117 	ldw	r2,-60(fp)
  814570:	e0bfff15 	stw	r2,-4(fp)
  814574:	e0bfff17 	ldw	r2,-4(fp)
}
  814578:	e037883a 	mov	sp,fp
  81457c:	dfc00117 	ldw	ra,4(sp)
  814580:	df000017 	ldw	fp,0(sp)
  814584:	dec00204 	addi	sp,sp,8
  814588:	f800283a 	ret

0081458c <find_first_empty_cluster>:

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  81458c:	defff504 	addi	sp,sp,-44
  814590:	dfc00a15 	stw	ra,40(sp)
  814594:	df000915 	stw	fp,36(sp)
  814598:	df000904 	addi	fp,sp,36
  81459c:	e13fff15 	stw	r4,-4(fp)
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
  8145a0:	008020b4 	movhi	r2,130
  8145a4:	10afc404 	addi	r2,r2,-16624
  8145a8:	10801117 	ldw	r2,68(r2)
  8145ac:	e0bffe15 	stw	r2,-8(fp)
	unsigned int cluster_index = 2;
  8145b0:	00800084 	movi	r2,2
  8145b4:	e0bffd15 	stw	r2,-12(fp)
	short int cluster = -1;
  8145b8:	00bfffc4 	movi	r2,-1
  8145bc:	e0bffc0d 	sth	r2,-16(fp)
	bool result = false;
  8145c0:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
  8145c4:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
  8145c8:	008020b4 	movhi	r2,130
  8145cc:	10afc404 	addi	r2,r2,-16624
  8145d0:	10801417 	ldw	r2,80(r2)
  8145d4:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
  8145d8:	008020b4 	movhi	r2,130
  8145dc:	10afc404 	addi	r2,r2,-16624
  8145e0:	1080058b 	ldhu	r2,22(r2)
  8145e4:	10bfffcc 	andi	r2,r2,65535
  8145e8:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 =
			boot_sector_data.total_sector_count_if_above_32MB;
  8145ec:	008020b4 	movhi	r2,130
  8145f0:	10afc404 	addi	r2,r2,-16624
  8145f4:	10800917 	ldw	r2,36(r2)
  8145f8:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32) {
  8145fc:	e0fff817 	ldw	r3,-32(fp)
  814600:	e0bff717 	ldw	r2,-36(fp)
  814604:	10c00b2e 	bgeu	r2,r3,814634 <find_first_empty_cluster+0xa8>
		max_cluster_index = ((less_than_32 - non_data_sectors)
  814608:	e0fff817 	ldw	r3,-32(fp)
  81460c:	e0bff917 	ldw	r2,-28(fp)
  814610:	1889c83a 	sub	r4,r3,r2
  814614:	008020b4 	movhi	r2,130
  814618:	10afc404 	addi	r2,r2,-16624
  81461c:	10800383 	ldbu	r2,14(r2)
  814620:	11403fcc 	andi	r5,r2,255
  814624:	0804cbc0 	call	804cbc <__udivsi3>
  814628:	10800044 	addi	r2,r2,1
  81462c:	e0bffa15 	stw	r2,-24(fp)
  814630:	00002906 	br	8146d8 <find_first_empty_cluster+0x14c>
				/ boot_sector_data.sectors_per_cluster) + 1;
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
  814634:	e0fff717 	ldw	r3,-36(fp)
  814638:	e0bff917 	ldw	r2,-28(fp)
  81463c:	1889c83a 	sub	r4,r3,r2
  814640:	008020b4 	movhi	r2,130
  814644:	10afc404 	addi	r2,r2,-16624
  814648:	10800383 	ldbu	r2,14(r2)
  81464c:	11403fcc 	andi	r5,r2,255
  814650:	0804cbc0 	call	804cbc <__udivsi3>
  814654:	10800044 	addi	r2,r2,1
  814658:	e0bffa15 	stw	r2,-24(fp)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  81465c:	00001e06 	br	8146d8 <find_first_empty_cluster+0x14c>
		if (Read_Sector_Data(sector, fat_partition_offset_in_512_byte_sectors)) {
  814660:	e13ffe17 	ldw	r4,-8(fp)
  814664:	d1672217 	ldw	r5,-25464(gp)
  814668:	08124380 	call	812438 <Read_Sector_Data>
  81466c:	1005003a 	cmpeq	r2,r2,zero
  814670:	1000131e 	bne	r2,zero,8146c0 <find_first_empty_cluster+0x134>
			do {
				cluster
  814674:	d0a72417 	ldw	r2,-25456(gp)
  814678:	10800a17 	ldw	r2,40(r2)
  81467c:	1007883a 	mov	r3,r2
  814680:	e0bffd17 	ldw	r2,-12(fp)
  814684:	10803fcc 	andi	r2,r2,255
  814688:	1085883a 	add	r2,r2,r2
  81468c:	1885883a 	add	r2,r3,r2
  814690:	1080002b 	ldhuio	r2,0(r2)
  814694:	e0bffc0d 	sth	r2,-16(fp)
						= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
  814698:	e0bffc0f 	ldh	r2,-16(fp)
  81469c:	1005003a 	cmpeq	r2,r2,zero
  8146a0:	1000071e 	bne	r2,zero,8146c0 <find_first_empty_cluster+0x134>
					// Free cluster found.
					break;
				} else {
					cluster_index++;
  8146a4:	e0bffd17 	ldw	r2,-12(fp)
  8146a8:	10800044 	addi	r2,r2,1
  8146ac:	e0bffd15 	stw	r2,-12(fp)
				}
			} while ((cluster_index % 256) != 0);
  8146b0:	e0bffd17 	ldw	r2,-12(fp)
  8146b4:	10803fcc 	andi	r2,r2,255
  8146b8:	1004c03a 	cmpne	r2,r2,zero
  8146bc:	103fed1e 	bne	r2,zero,814674 <find_first_empty_cluster+0xe8>
		}
		if (cluster == 0) {
  8146c0:	e0bffc0f 	ldh	r2,-16(fp)
  8146c4:	1005003a 	cmpeq	r2,r2,zero
  8146c8:	1000081e 	bne	r2,zero,8146ec <find_first_empty_cluster+0x160>
			break;
		}
		sector++;
  8146cc:	e0bffe17 	ldw	r2,-8(fp)
  8146d0:	10800044 	addi	r2,r2,1
  8146d4:	e0bffe15 	stw	r2,-8(fp)
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  8146d8:	008020b4 	movhi	r2,130
  8146dc:	10afc404 	addi	r2,r2,-16624
  8146e0:	10c01217 	ldw	r3,72(r2)
  8146e4:	e0bffe17 	ldw	r2,-8(fp)
  8146e8:	18bfdd1e 	bne	r3,r2,814660 <find_first_empty_cluster+0xd4>
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
  8146ec:	e0bffc0f 	ldh	r2,-16(fp)
  8146f0:	1004c03a 	cmpne	r2,r2,zero
  8146f4:	1000081e 	bne	r2,zero,814718 <find_first_empty_cluster+0x18c>
  8146f8:	e0fffc0f 	ldh	r3,-16(fp)
  8146fc:	e0bffa17 	ldw	r2,-24(fp)
  814700:	10c00536 	bltu	r2,r3,814718 <find_first_empty_cluster+0x18c>
		*cluster_number = cluster_index;
  814704:	e0bfff17 	ldw	r2,-4(fp)
  814708:	e0fffd17 	ldw	r3,-12(fp)
  81470c:	10c00015 	stw	r3,0(r2)
		result = true;
  814710:	00800044 	movi	r2,1
  814714:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
  814718:	e0bffb17 	ldw	r2,-20(fp)
}
  81471c:	e037883a 	mov	sp,fp
  814720:	dfc00117 	ldw	ra,4(sp)
  814724:	df000017 	ldw	fp,0(sp)
  814728:	dec00204 	addi	sp,sp,8
  81472c:	f800283a 	ret

00814730 <find_first_empty_record_in_a_subdirectory>:

int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
  814730:	defff404 	addi	sp,sp,-48
  814734:	dfc00b15 	stw	ra,44(sp)
  814738:	df000a15 	stw	fp,40(sp)
  81473c:	df000a04 	addi	fp,sp,40
  814740:	e13ffe15 	stw	r4,-8(fp)
	int result = -1;
  814744:	00bfffc4 	movi	r2,-1
  814748:	e0bffb15 	stw	r2,-20(fp)
	int cluster = start_cluster_index;
  81474c:	e0bffe17 	ldw	r2,-8(fp)
  814750:	e0bffa15 	stw	r2,-24(fp)
	do {
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
  814754:	e0bffa17 	ldw	r2,-24(fp)
  814758:	10ffff84 	addi	r3,r2,-2
  81475c:	008020b4 	movhi	r2,130
  814760:	10afc404 	addi	r2,r2,-16624
  814764:	10800383 	ldbu	r2,14(r2)
  814768:	10803fcc 	andi	r2,r2,255
  81476c:	1885383a 	mul	r2,r3,r2
  814770:	1007883a 	mov	r3,r2
  814774:	008020b4 	movhi	r2,130
  814778:	10afc404 	addi	r2,r2,-16624
  81477c:	10801417 	ldw	r2,80(r2)
  814780:	1885883a 	add	r2,r3,r2
  814784:	e0bff915 	stw	r2,-28(fp)
		int sector_index;

		for (sector_index = 0; sector_index
  814788:	e03ff815 	stw	zero,-32(fp)
  81478c:	00002c06 	br	814840 <find_first_empty_record_in_a_subdirectory+0x110>
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
  814790:	e0fff817 	ldw	r3,-32(fp)
  814794:	e0bff917 	ldw	r2,-28(fp)
  814798:	1889883a 	add	r4,r3,r2
  81479c:	d1672217 	ldw	r5,-25464(gp)
  8147a0:	08124380 	call	812438 <Read_Sector_Data>
  8147a4:	1005003a 	cmpeq	r2,r2,zero
  8147a8:	10002b1e 	bne	r2,zero,814858 <find_first_empty_record_in_a_subdirectory+0x128>
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  8147ac:	e03ff715 	stw	zero,-36(fp)
  8147b0:	00001d06 	br	814828 <find_first_empty_record_in_a_subdirectory+0xf8>
					unsigned short int leading_char;

					// Read file record.
					leading_char
  8147b4:	d0a72417 	ldw	r2,-25456(gp)
  8147b8:	10800a17 	ldw	r2,40(r2)
  8147bc:	1007883a 	mov	r3,r2
  8147c0:	e0bff717 	ldw	r2,-36(fp)
  8147c4:	1004917a 	slli	r2,r2,5
  8147c8:	1885883a 	add	r2,r3,r2
  8147cc:	10800023 	ldbuio	r2,0(r2)
  8147d0:	10803fcc 	andi	r2,r2,255
  8147d4:	e0bff60d 	sth	r2,-40(fp)
							= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
					if ((leading_char == 0x00e5) || (leading_char == 0)) {
  8147d8:	e0bff60b 	ldhu	r2,-40(fp)
  8147dc:	10803960 	cmpeqi	r2,r2,229
  8147e0:	1000031e 	bne	r2,zero,8147f0 <find_first_empty_record_in_a_subdirectory+0xc0>
  8147e4:	e0bff60b 	ldhu	r2,-40(fp)
  8147e8:	1004c03a 	cmpne	r2,r2,zero
  8147ec:	10000b1e 	bne	r2,zero,81481c <find_first_empty_record_in_a_subdirectory+0xec>
						result = (cluster)
  8147f0:	e0bff817 	ldw	r2,-32(fp)
  8147f4:	1006913a 	slli	r3,r2,4
  8147f8:	e0bff717 	ldw	r2,-36(fp)
  8147fc:	1885883a 	add	r2,r3,r2
  814800:	1006943a 	slli	r3,r2,16
  814804:	e0bffa17 	ldw	r2,-24(fp)
  814808:	1884b03a 	or	r2,r3,r2
  81480c:	e0bffb15 	stw	r2,-20(fp)
								| ((sector_index * 16 + file_counter) << 16);
						return result;
  814810:	e0bffb17 	ldw	r2,-20(fp)
  814814:	e0bfff15 	stw	r2,-4(fp)
  814818:	00005206 	br	814964 <find_first_empty_record_in_a_subdirectory+0x234>
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  81481c:	e0bff717 	ldw	r2,-36(fp)
  814820:	10800044 	addi	r2,r2,1
  814824:	e0bff715 	stw	r2,-36(fp)
  814828:	e0bff717 	ldw	r2,-36(fp)
  81482c:	10800410 	cmplti	r2,r2,16
  814830:	103fe01e 	bne	r2,zero,8147b4 <find_first_empty_record_in_a_subdirectory+0x84>
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
				< boot_sector_data.sectors_per_cluster; sector_index++) {
  814834:	e0bff817 	ldw	r2,-32(fp)
  814838:	10800044 	addi	r2,r2,1
  81483c:	e0bff815 	stw	r2,-32(fp)
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
  814840:	008020b4 	movhi	r2,130
  814844:	10afc404 	addi	r2,r2,-16624
  814848:	10800383 	ldbu	r2,14(r2)
  81484c:	10c03fcc 	andi	r3,r2,255
  814850:	e0bff817 	ldw	r2,-32(fp)
  814854:	10ffce16 	blt	r2,r3,814790 <find_first_empty_record_in_a_subdirectory+0x60>
				break;
			}
		}
		// If this is the end of the cluster and the file has not been found, then see if there is another cluster
		// that holds data for the current directory.
		if (result < 0) {
  814858:	e0bffb17 	ldw	r2,-20(fp)
  81485c:	1004403a 	cmpge	r2,r2,zero
  814860:	1000381e 	bne	r2,zero,814944 <find_first_empty_record_in_a_subdirectory+0x214>
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster)) {
  814864:	e13ffa17 	ldw	r4,-24(fp)
  814868:	e17ffc04 	addi	r5,fp,-16
  81486c:	08125340 	call	812534 <get_cluster_flag>
  814870:	1005003a 	cmpeq	r2,r2,zero
  814874:	1000311e 	bne	r2,zero,81493c <find_first_empty_record_in_a_subdirectory+0x20c>
				// The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  814878:	e0bffc0b 	ldhu	r2,-16(fp)
  81487c:	10bfffcc 	andi	r2,r2,65535
  814880:	10fffe0c 	andi	r3,r2,65528
  814884:	00bffe14 	movui	r2,65528
  814888:	18802e1e 	bne	r3,r2,814944 <find_first_empty_record_in_a_subdirectory+0x214>
					int new_dir_cluster;
					if (find_first_empty_cluster(&new_dir_cluster)) {
  81488c:	e13ffd04 	addi	r4,fp,-12
  814890:	081458c0 	call	81458c <find_first_empty_cluster>
  814894:	1005003a 	cmpeq	r2,r2,zero
  814898:	1000231e 	bne	r2,zero,814928 <find_first_empty_record_in_a_subdirectory+0x1f8>
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster,
  81489c:	e13ffa17 	ldw	r4,-24(fp)
  8148a0:	e0bffd17 	ldw	r2,-12(fp)
  8148a4:	117fffcc 	andi	r5,r2,65535
  8148a8:	2960001c 	xori	r5,r5,32768
  8148ac:	29600004 	addi	r5,r5,-32768
  8148b0:	01800044 	movi	r6,1
  8148b4:	08125ec0 	call	8125ec <mark_cluster>
  8148b8:	1005003a 	cmpeq	r2,r2,zero
  8148bc:	10001a1e 	bne	r2,zero,814928 <find_first_empty_record_in_a_subdirectory+0x1f8>
  8148c0:	e0bffd17 	ldw	r2,-12(fp)
  8148c4:	1009883a 	mov	r4,r2
  8148c8:	017fffc4 	movi	r5,-1
  8148cc:	01800044 	movi	r6,1
  8148d0:	08125ec0 	call	8125ec <mark_cluster>
  8148d4:	1005003a 	cmpeq	r2,r2,zero
  8148d8:	1000131e 	bne	r2,zero,814928 <find_first_empty_record_in_a_subdirectory+0x1f8>
  8148dc:	e13ffa17 	ldw	r4,-24(fp)
  8148e0:	e0bffd17 	ldw	r2,-12(fp)
  8148e4:	117fffcc 	andi	r5,r2,65535
  8148e8:	2960001c 	xori	r5,r5,32768
  8148ec:	29600004 	addi	r5,r5,-32768
  8148f0:	000d883a 	mov	r6,zero
  8148f4:	08125ec0 	call	8125ec <mark_cluster>
  8148f8:	1005003a 	cmpeq	r2,r2,zero
  8148fc:	10000a1e 	bne	r2,zero,814928 <find_first_empty_record_in_a_subdirectory+0x1f8>
  814900:	e0bffd17 	ldw	r2,-12(fp)
  814904:	1009883a 	mov	r4,r2
  814908:	017fffc4 	movi	r5,-1
  81490c:	000d883a 	mov	r6,zero
  814910:	08125ec0 	call	8125ec <mark_cluster>
  814914:	1005003a 	cmpeq	r2,r2,zero
  814918:	1000031e 	bne	r2,zero,814928 <find_first_empty_record_in_a_subdirectory+0x1f8>
										((short int) (0xffff)), true)
								&& mark_cluster(cluster,
										((short int) (new_dir_cluster)), false)
								&& mark_cluster(new_dir_cluster,
										((short int) (0xffff)), false)) {
							Save_Modified_Sector();
  81491c:	08123e80 	call	8123e8 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;
  814920:	e0bffd17 	ldw	r2,-12(fp)
  814924:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
  814928:	e0bffc0b 	ldhu	r2,-16(fp)
  81492c:	10bfffcc 	andi	r2,r2,65535
  814930:	10bffe0c 	andi	r2,r2,65528
  814934:	e0bffa15 	stw	r2,-24(fp)
  814938:	00000206 	br	814944 <find_first_empty_record_in_a_subdirectory+0x214>
				}
			} else {
				// Error encountered.                 
				result = -1;
  81493c:	00bfffc4 	movi	r2,-1
  814940:	e0bffb15 	stw	r2,-20(fp)
			}
		}
	} while ((cluster < 0x0000fff8) && (result == -1));
  814944:	e0fffa17 	ldw	r3,-24(fp)
  814948:	00bffdd4 	movui	r2,65527
  81494c:	10c00316 	blt	r2,r3,81495c <find_first_empty_record_in_a_subdirectory+0x22c>
  814950:	e0bffb17 	ldw	r2,-20(fp)
  814954:	10bfffe0 	cmpeqi	r2,r2,-1
  814958:	103f7e1e 	bne	r2,zero,814754 <find_first_empty_record_in_a_subdirectory+0x24>
	return result;
  81495c:	e0bffb17 	ldw	r2,-20(fp)
  814960:	e0bfff15 	stw	r2,-4(fp)
  814964:	e0bfff17 	ldw	r2,-4(fp)
}
  814968:	e037883a 	mov	sp,fp
  81496c:	dfc00117 	ldw	ra,4(sp)
  814970:	df000017 	ldw	fp,0(sp)
  814974:	dec00204 	addi	sp,sp,8
  814978:	f800283a 	ret

0081497c <find_first_empty_record_in_root_directory>:

int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  81497c:	defff804 	addi	sp,sp,-32
  814980:	dfc00715 	stw	ra,28(sp)
  814984:	df000615 	stw	fp,24(sp)
  814988:	df000604 	addi	fp,sp,24
	int max_root_dir_sectors = ((32
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
  81498c:	008020b4 	movhi	r2,130
  814990:	10afc404 	addi	r2,r2,-16624
  814994:	1080050b 	ldhu	r2,20(r2)
  814998:	10bfffcc 	andi	r2,r2,65535
  81499c:	1008917a 	slli	r4,r2,5
  8149a0:	008020b4 	movhi	r2,130
  8149a4:	10afc404 	addi	r2,r2,-16624
  8149a8:	1080030b 	ldhu	r2,12(r2)
  8149ac:	117fffcc 	andi	r5,r2,65535
  8149b0:	0804bfc0 	call	804bfc <__divsi3>
  8149b4:	e0bffe15 	stw	r2,-8(fp)
	int sector_index;
	int result = -1;
  8149b8:	00bfffc4 	movi	r2,-1
  8149bc:	e0bffc15 	stw	r2,-16(fp)

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  8149c0:	e03ffd15 	stw	zero,-12(fp)
  8149c4:	00002d06 	br	814a7c <find_first_empty_record_in_root_directory+0x100>
		if (Read_Sector_Data(sector_index
  8149c8:	008020b4 	movhi	r2,130
  8149cc:	10afc404 	addi	r2,r2,-16624
  8149d0:	10c01317 	ldw	r3,76(r2)
  8149d4:	e0bffd17 	ldw	r2,-12(fp)
  8149d8:	1885883a 	add	r2,r3,r2
  8149dc:	1009883a 	mov	r4,r2
  8149e0:	d1672217 	ldw	r5,-25464(gp)
  8149e4:	08124380 	call	812438 <Read_Sector_Data>
  8149e8:	1005003a 	cmpeq	r2,r2,zero
  8149ec:	1000261e 	bne	r2,zero,814a88 <find_first_empty_record_in_root_directory+0x10c>
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
  8149f0:	e03ffb15 	stw	zero,-20(fp)
  8149f4:	00001b06 	br	814a64 <find_first_empty_record_in_root_directory+0xe8>
				unsigned short int leading_char;

				// Read first character of the file record.
				leading_char
  8149f8:	d0a72417 	ldw	r2,-25456(gp)
  8149fc:	10800a17 	ldw	r2,40(r2)
  814a00:	1007883a 	mov	r3,r2
  814a04:	e0bffb17 	ldw	r2,-20(fp)
  814a08:	1004917a 	slli	r2,r2,5
  814a0c:	1885883a 	add	r2,r3,r2
  814a10:	10800023 	ldbuio	r2,0(r2)
  814a14:	10803fcc 	andi	r2,r2,255
  814a18:	e0bffa0d 	sth	r2,-24(fp)
						= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
  814a1c:	e0bffa0b 	ldhu	r2,-24(fp)
  814a20:	10803960 	cmpeqi	r2,r2,229
  814a24:	1000031e 	bne	r2,zero,814a34 <find_first_empty_record_in_root_directory+0xb8>
  814a28:	e0bffa0b 	ldhu	r2,-24(fp)
  814a2c:	1004c03a 	cmpne	r2,r2,zero
  814a30:	1000091e 	bne	r2,zero,814a58 <find_first_empty_record_in_root_directory+0xdc>
					result = (sector_index * 16 + file_counter) << 16;
  814a34:	e0bffd17 	ldw	r2,-12(fp)
  814a38:	1006913a 	slli	r3,r2,4
  814a3c:	e0bffb17 	ldw	r2,-20(fp)
  814a40:	1885883a 	add	r2,r3,r2
  814a44:	1004943a 	slli	r2,r2,16
  814a48:	e0bffc15 	stw	r2,-16(fp)
					return result;
  814a4c:	e0bffc17 	ldw	r2,-16(fp)
  814a50:	e0bfff15 	stw	r2,-4(fp)
  814a54:	00000e06 	br	814a90 <find_first_empty_record_in_root_directory+0x114>
		if (Read_Sector_Data(sector_index
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
  814a58:	e0bffb17 	ldw	r2,-20(fp)
  814a5c:	10800044 	addi	r2,r2,1
  814a60:	e0bffb15 	stw	r2,-20(fp)
  814a64:	e0bffb17 	ldw	r2,-20(fp)
  814a68:	10800410 	cmplti	r2,r2,16
  814a6c:	103fe21e 	bne	r2,zero,8149f8 <find_first_empty_record_in_root_directory+0x7c>
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  814a70:	e0bffd17 	ldw	r2,-12(fp)
  814a74:	10800044 	addi	r2,r2,1
  814a78:	e0bffd15 	stw	r2,-12(fp)
  814a7c:	e0fffd17 	ldw	r3,-12(fp)
  814a80:	e0bffe17 	ldw	r2,-8(fp)
  814a84:	18bfd016 	blt	r3,r2,8149c8 <find_first_empty_record_in_root_directory+0x4c>
			}
		} else {
			break;
		}
	}
	return result;
  814a88:	e0bffc17 	ldw	r2,-16(fp)
  814a8c:	e0bfff15 	stw	r2,-4(fp)
  814a90:	e0bfff17 	ldw	r2,-4(fp)
}
  814a94:	e037883a 	mov	sp,fp
  814a98:	dfc00117 	ldw	ra,4(sp)
  814a9c:	df000017 	ldw	fp,0(sp)
  814aa0:	dec00204 	addi	sp,sp,8
  814aa4:	f800283a 	ret

00814aa8 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name,
		char *extension)
// This function converts the file name into a name . extension format.
{
  814aa8:	defffa04 	addi	sp,sp,-24
  814aac:	df000515 	stw	fp,20(sp)
  814ab0:	df000504 	addi	fp,sp,20
  814ab4:	e13ffd15 	stw	r4,-12(fp)
  814ab8:	e17ffe15 	stw	r5,-8(fp)
  814abc:	e1bfff15 	stw	r6,-4(fp)
	int counter;
	int local = 0;
  814ac0:	e03ffb15 	stw	zero,-20(fp)

	for (counter = 0; counter < 8; counter++) {
  814ac4:	e03ffc15 	stw	zero,-16(fp)
  814ac8:	00002b06 	br	814b78 <convert_filename_to_name_extension+0xd0>
		if (filename[local] != '.') {
  814acc:	e0bffb17 	ldw	r2,-20(fp)
  814ad0:	1007883a 	mov	r3,r2
  814ad4:	e0bffd17 	ldw	r2,-12(fp)
  814ad8:	1885883a 	add	r2,r3,r2
  814adc:	10800003 	ldbu	r2,0(r2)
  814ae0:	10803fcc 	andi	r2,r2,255
  814ae4:	1080201c 	xori	r2,r2,128
  814ae8:	10bfe004 	addi	r2,r2,-128
  814aec:	10800ba0 	cmpeqi	r2,r2,46
  814af0:	1000181e 	bne	r2,zero,814b54 <convert_filename_to_name_extension+0xac>
			name[counter] = filename[local];
  814af4:	e0bffc17 	ldw	r2,-16(fp)
  814af8:	1007883a 	mov	r3,r2
  814afc:	e0bffe17 	ldw	r2,-8(fp)
  814b00:	1889883a 	add	r4,r3,r2
  814b04:	e0bffb17 	ldw	r2,-20(fp)
  814b08:	1007883a 	mov	r3,r2
  814b0c:	e0bffd17 	ldw	r2,-12(fp)
  814b10:	1885883a 	add	r2,r3,r2
  814b14:	10800003 	ldbu	r2,0(r2)
  814b18:	20800005 	stb	r2,0(r4)
			if (filename[local] != 0)
  814b1c:	e0bffb17 	ldw	r2,-20(fp)
  814b20:	1007883a 	mov	r3,r2
  814b24:	e0bffd17 	ldw	r2,-12(fp)
  814b28:	1885883a 	add	r2,r3,r2
  814b2c:	10800003 	ldbu	r2,0(r2)
  814b30:	10803fcc 	andi	r2,r2,255
  814b34:	1080201c 	xori	r2,r2,128
  814b38:	10bfe004 	addi	r2,r2,-128
  814b3c:	1005003a 	cmpeq	r2,r2,zero
  814b40:	10000a1e 	bne	r2,zero,814b6c <convert_filename_to_name_extension+0xc4>
				local++;
  814b44:	e0bffb17 	ldw	r2,-20(fp)
  814b48:	10800044 	addi	r2,r2,1
  814b4c:	e0bffb15 	stw	r2,-20(fp)
  814b50:	00000606 	br	814b6c <convert_filename_to_name_extension+0xc4>
		} else {
			name[counter] = ' ';
  814b54:	e0bffc17 	ldw	r2,-16(fp)
  814b58:	1007883a 	mov	r3,r2
  814b5c:	e0bffe17 	ldw	r2,-8(fp)
  814b60:	1887883a 	add	r3,r3,r2
  814b64:	00800804 	movi	r2,32
  814b68:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
  814b6c:	e0bffc17 	ldw	r2,-16(fp)
  814b70:	10800044 	addi	r2,r2,1
  814b74:	e0bffc15 	stw	r2,-16(fp)
  814b78:	e0bffc17 	ldw	r2,-16(fp)
  814b7c:	10800210 	cmplti	r2,r2,8
  814b80:	103fd21e 	bne	r2,zero,814acc <convert_filename_to_name_extension+0x24>
				local++;
		} else {
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
  814b84:	e0bffb17 	ldw	r2,-20(fp)
  814b88:	1007883a 	mov	r3,r2
  814b8c:	e0bffd17 	ldw	r2,-12(fp)
  814b90:	1885883a 	add	r2,r3,r2
  814b94:	10800003 	ldbu	r2,0(r2)
  814b98:	10803fcc 	andi	r2,r2,255
  814b9c:	1080201c 	xori	r2,r2,128
  814ba0:	10bfe004 	addi	r2,r2,-128
  814ba4:	10800b98 	cmpnei	r2,r2,46
  814ba8:	1000031e 	bne	r2,zero,814bb8 <convert_filename_to_name_extension+0x110>
		local++;
  814bac:	e0bffb17 	ldw	r2,-20(fp)
  814bb0:	10800044 	addi	r2,r2,1
  814bb4:	e0bffb15 	stw	r2,-20(fp)
	for (counter = 0; counter < 3; counter++) {
  814bb8:	e03ffc15 	stw	zero,-16(fp)
  814bbc:	00002106 	br	814c44 <convert_filename_to_name_extension+0x19c>
		if (filename[local] != 0) {
  814bc0:	e0bffb17 	ldw	r2,-20(fp)
  814bc4:	1007883a 	mov	r3,r2
  814bc8:	e0bffd17 	ldw	r2,-12(fp)
  814bcc:	1885883a 	add	r2,r3,r2
  814bd0:	10800003 	ldbu	r2,0(r2)
  814bd4:	10803fcc 	andi	r2,r2,255
  814bd8:	1080201c 	xori	r2,r2,128
  814bdc:	10bfe004 	addi	r2,r2,-128
  814be0:	1005003a 	cmpeq	r2,r2,zero
  814be4:	10000e1e 	bne	r2,zero,814c20 <convert_filename_to_name_extension+0x178>
			extension[counter] = filename[local];
  814be8:	e0bffc17 	ldw	r2,-16(fp)
  814bec:	1007883a 	mov	r3,r2
  814bf0:	e0bfff17 	ldw	r2,-4(fp)
  814bf4:	1889883a 	add	r4,r3,r2
  814bf8:	e0bffb17 	ldw	r2,-20(fp)
  814bfc:	1007883a 	mov	r3,r2
  814c00:	e0bffd17 	ldw	r2,-12(fp)
  814c04:	1885883a 	add	r2,r3,r2
  814c08:	10800003 	ldbu	r2,0(r2)
  814c0c:	20800005 	stb	r2,0(r4)
			local++;
  814c10:	e0bffb17 	ldw	r2,-20(fp)
  814c14:	10800044 	addi	r2,r2,1
  814c18:	e0bffb15 	stw	r2,-20(fp)
  814c1c:	00000606 	br	814c38 <convert_filename_to_name_extension+0x190>
		} else {
			extension[counter] = ' ';
  814c20:	e0bffc17 	ldw	r2,-16(fp)
  814c24:	1007883a 	mov	r3,r2
  814c28:	e0bfff17 	ldw	r2,-4(fp)
  814c2c:	1887883a 	add	r3,r3,r2
  814c30:	00800804 	movi	r2,32
  814c34:	18800005 	stb	r2,0(r3)
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
  814c38:	e0bffc17 	ldw	r2,-16(fp)
  814c3c:	10800044 	addi	r2,r2,1
  814c40:	e0bffc15 	stw	r2,-16(fp)
  814c44:	e0bffc17 	ldw	r2,-16(fp)
  814c48:	108000d0 	cmplti	r2,r2,3
  814c4c:	103fdc1e 	bne	r2,zero,814bc0 <convert_filename_to_name_extension+0x118>
		} else {
			extension[counter] = ' ';
		}
	}

}
  814c50:	e037883a 	mov	sp,fp
  814c54:	df000017 	ldw	fp,0(sp)
  814c58:	dec00104 	addi	sp,sp,4
  814c5c:	f800283a 	ret

00814c60 <create_file>:

bool create_file(char *name, t_file_record *file_record,
		t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  814c60:	defff304 	addi	sp,sp,-52
  814c64:	dfc00c15 	stw	ra,48(sp)
  814c68:	df000b15 	stw	fp,44(sp)
  814c6c:	df000b04 	addi	fp,sp,44
  814c70:	e13ffb15 	stw	r4,-20(fp)
  814c74:	e17ffc15 	stw	r5,-16(fp)
  814c78:	e1bffd15 	stw	r6,-12(fp)
	unsigned int cluster_number;
	bool result = false;
  814c7c:	e03ff915 	stw	zero,-28(fp)

	if (find_first_empty_cluster(&cluster_number)) {
  814c80:	e13ffa04 	addi	r4,fp,-24
  814c84:	081458c0 	call	81458c <find_first_empty_cluster>
  814c88:	1005003a 	cmpeq	r2,r2,zero
  814c8c:	1000a31e 	bne	r2,zero,814f1c <create_file+0x2bc>
		int record_index;

		if (home_dir->file_record_cluster == 0) {
  814c90:	e0bffd17 	ldw	r2,-12(fp)
  814c94:	10800a17 	ldw	r2,40(r2)
  814c98:	1004c03a 	cmpne	r2,r2,zero
  814c9c:	1000031e 	bne	r2,zero,814cac <create_file+0x4c>
			// Put a file in the root directory.
			record_index = find_first_empty_record_in_root_directory();
  814ca0:	081497c0 	call	81497c <find_first_empty_record_in_root_directory>
  814ca4:	e0bff815 	stw	r2,-32(fp)
  814ca8:	00000506 	br	814cc0 <create_file+0x60>
		} else {
			// Put a file in a subdirectory.
			record_index = find_first_empty_record_in_a_subdirectory(
  814cac:	e0bffd17 	ldw	r2,-12(fp)
  814cb0:	1080058b 	ldhu	r2,22(r2)
  814cb4:	113fffcc 	andi	r4,r2,65535
  814cb8:	08147300 	call	814730 <find_first_empty_record_in_a_subdirectory>
  814cbc:	e0bff815 	stw	r2,-32(fp)
					home_dir->start_cluster_index);
		}
		if (record_index >= 0) {
  814cc0:	e0bff817 	ldw	r2,-32(fp)
  814cc4:	1004803a 	cmplt	r2,r2,zero
  814cc8:	1000941e 	bne	r2,zero,814f1c <create_file+0x2bc>
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
  814ccc:	e13ffb17 	ldw	r4,-20(fp)
  814cd0:	08138680 	call	813868 <get_dir_divider_location>
  814cd4:	e0bff615 	stw	r2,-40(fp)
			int last_dir_separator = 0;
  814cd8:	e03ff515 	stw	zero,-44(fp)

			// Skip through all directory separators.
			while (location > 0) {
  814cdc:	00000b06 	br	814d0c <create_file+0xac>
				last_dir_separator = last_dir_separator + location + 1;
  814ce0:	e0fff517 	ldw	r3,-44(fp)
  814ce4:	e0bff617 	ldw	r2,-40(fp)
  814ce8:	1885883a 	add	r2,r3,r2
  814cec:	10800044 	addi	r2,r2,1
  814cf0:	e0bff515 	stw	r2,-44(fp)
				location
  814cf4:	e0bff517 	ldw	r2,-44(fp)
  814cf8:	1007883a 	mov	r3,r2
  814cfc:	e0bffb17 	ldw	r2,-20(fp)
  814d00:	1889883a 	add	r4,r3,r2
  814d04:	08138680 	call	813868 <get_dir_divider_location>
  814d08:	e0bff615 	stw	r2,-40(fp)
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
			int last_dir_separator = 0;

			// Skip through all directory separators.
			while (location > 0) {
  814d0c:	e0bff617 	ldw	r2,-40(fp)
  814d10:	10800048 	cmpgei	r2,r2,1
  814d14:	103ff21e 	bne	r2,zero,814ce0 <create_file+0x80>
				last_dir_separator = last_dir_separator + location + 1;
				location
						= get_dir_divider_location(&(name[last_dir_separator]));
			}

			convert_filename_to_name_extension(&(name[last_dir_separator]),
  814d18:	e0bff517 	ldw	r2,-44(fp)
  814d1c:	1007883a 	mov	r3,r2
  814d20:	e0bffb17 	ldw	r2,-20(fp)
  814d24:	1889883a 	add	r4,r3,r2
  814d28:	e0bffc17 	ldw	r2,-16(fp)
  814d2c:	100b883a 	mov	r5,r2
  814d30:	e0bffc17 	ldw	r2,-16(fp)
  814d34:	10800204 	addi	r2,r2,8
  814d38:	100d883a 	mov	r6,r2
  814d3c:	0814aa80 	call	814aa8 <convert_filename_to_name_extension>
					file_record->name, file_record->extension);

			file_record->attributes = 0;
  814d40:	e0bffc17 	ldw	r2,-16(fp)
  814d44:	100002c5 	stb	zero,11(r2)
			file_record->create_time = 0;
  814d48:	e0bffc17 	ldw	r2,-16(fp)
  814d4c:	1000030d 	sth	zero,12(r2)
			file_record->create_date = 0;
  814d50:	e0bffc17 	ldw	r2,-16(fp)
  814d54:	1000038d 	sth	zero,14(r2)
			file_record->last_access_date = 0;
  814d58:	e0bffc17 	ldw	r2,-16(fp)
  814d5c:	1000040d 	sth	zero,16(r2)
			file_record->last_modified_time = 0;
  814d60:	e0bffc17 	ldw	r2,-16(fp)
  814d64:	1000048d 	sth	zero,18(r2)
			file_record->last_modified_date = 0;
  814d68:	e0bffc17 	ldw	r2,-16(fp)
  814d6c:	1000050d 	sth	zero,20(r2)
			file_record->start_cluster_index = cluster_number;
  814d70:	e0bffa17 	ldw	r2,-24(fp)
  814d74:	1007883a 	mov	r3,r2
  814d78:	e0bffc17 	ldw	r2,-16(fp)
  814d7c:	10c0058d 	sth	r3,22(r2)
			file_record->file_size_in_bytes = 0;
  814d80:	e0bffc17 	ldw	r2,-16(fp)
  814d84:	10000615 	stw	zero,24(r2)
			file_record->current_cluster_index = cluster_number;
  814d88:	e0fffa17 	ldw	r3,-24(fp)
  814d8c:	e0bffc17 	ldw	r2,-16(fp)
  814d90:	10c00715 	stw	r3,28(r2)
			file_record->current_sector_in_cluster = 0;
  814d94:	e0bffc17 	ldw	r2,-16(fp)
  814d98:	10000815 	stw	zero,32(r2)
			file_record->current_byte_position = 0;
  814d9c:	e0bffc17 	ldw	r2,-16(fp)
  814da0:	10000915 	stw	zero,36(r2)
			file_record->file_record_cluster = record_index & 0x0000ffff;
  814da4:	e0bff817 	ldw	r2,-32(fp)
  814da8:	10ffffcc 	andi	r3,r2,65535
  814dac:	e0bffc17 	ldw	r2,-16(fp)
  814db0:	10c00a15 	stw	r3,40(r2)
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
  814db4:	e0bff817 	ldw	r2,-32(fp)
  814db8:	1005d43a 	srai	r2,r2,16
  814dbc:	10bfffcc 	andi	r2,r2,65535
  814dc0:	e0bfff15 	stw	r2,-4(fp)
  814dc4:	e0ffff17 	ldw	r3,-4(fp)
  814dc8:	1804403a 	cmpge	r2,r3,zero
  814dcc:	1000031e 	bne	r2,zero,814ddc <create_file+0x17c>
  814dd0:	e0bfff17 	ldw	r2,-4(fp)
  814dd4:	108003c4 	addi	r2,r2,15
  814dd8:	e0bfff15 	stw	r2,-4(fp)
  814ddc:	e0ffff17 	ldw	r3,-4(fp)
  814de0:	1805d13a 	srai	r2,r3,4
  814de4:	1007883a 	mov	r3,r2
  814de8:	e0bffc17 	ldw	r2,-16(fp)
  814dec:	10c00b15 	stw	r3,44(r2)
					& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
  814df0:	e0bff817 	ldw	r2,-32(fp)
  814df4:	1005d43a 	srai	r2,r2,16
  814df8:	108003cc 	andi	r2,r2,15
  814dfc:	1004917a 	slli	r2,r2,5
  814e00:	1007883a 	mov	r3,r2
  814e04:	e0bffc17 	ldw	r2,-16(fp)
  814e08:	10c00c0d 	sth	r3,48(r2)
					& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
  814e0c:	e0bffd17 	ldw	r2,-12(fp)
  814e10:	1080058b 	ldhu	r2,22(r2)
  814e14:	10ffffcc 	andi	r3,r2,65535
  814e18:	e0bffc17 	ldw	r2,-16(fp)
  814e1c:	10c00d15 	stw	r3,52(r2)
			file_record->in_use = true;
  814e20:	e0fffc17 	ldw	r3,-16(fp)
  814e24:	00800044 	movi	r2,1
  814e28:	18800f15 	stw	r2,60(r3)
			file_record->modified = true;
  814e2c:	e0fffc17 	ldw	r3,-16(fp)
  814e30:	00800044 	movi	r2,1
  814e34:	18800e15 	stw	r2,56(r3)
			// Now write the record at the specified location.
			file_record_sector
  814e38:	e0bffc17 	ldw	r2,-16(fp)
  814e3c:	10800a17 	ldw	r2,40(r2)
  814e40:	1004c03a 	cmpne	r2,r2,zero
  814e44:	1000081e 	bne	r2,zero,814e68 <create_file+0x208>
  814e48:	008020b4 	movhi	r2,130
  814e4c:	10afc404 	addi	r2,r2,-16624
  814e50:	10c01317 	ldw	r3,76(r2)
  814e54:	e0bffc17 	ldw	r2,-16(fp)
  814e58:	10800b17 	ldw	r2,44(r2)
  814e5c:	1887883a 	add	r3,r3,r2
  814e60:	e0fffe15 	stw	r3,-8(fp)
  814e64:	00001006 	br	814ea8 <create_file+0x248>
  814e68:	008020b4 	movhi	r2,130
  814e6c:	10afc404 	addi	r2,r2,-16624
  814e70:	11001417 	ldw	r4,80(r2)
  814e74:	e0bffc17 	ldw	r2,-16(fp)
  814e78:	10800a17 	ldw	r2,40(r2)
  814e7c:	10ffff84 	addi	r3,r2,-2
  814e80:	008020b4 	movhi	r2,130
  814e84:	10afc404 	addi	r2,r2,-16624
  814e88:	10800383 	ldbu	r2,14(r2)
  814e8c:	10803fcc 	andi	r2,r2,255
  814e90:	1885383a 	mul	r2,r3,r2
  814e94:	2087883a 	add	r3,r4,r2
  814e98:	e0bffc17 	ldw	r2,-16(fp)
  814e9c:	10800b17 	ldw	r2,44(r2)
  814ea0:	1887883a 	add	r3,r3,r2
  814ea4:	e0fffe15 	stw	r3,-8(fp)
  814ea8:	e0bffe17 	ldw	r2,-8(fp)
  814eac:	e0bff715 	stw	r2,-36(fp)
							: (boot_sector_data.data_sector_offset
									+ (file_record->file_record_cluster - 2)
											* boot_sector_data.sectors_per_cluster
									+ file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector,
  814eb0:	e13ff717 	ldw	r4,-36(fp)
  814eb4:	d1672217 	ldw	r5,-25464(gp)
  814eb8:	08124380 	call	812438 <Read_Sector_Data>
  814ebc:	1005003a 	cmpeq	r2,r2,zero
  814ec0:	1000161e 	bne	r2,zero,814f1c <create_file+0x2bc>
					fat_partition_offset_in_512_byte_sectors)) {
				if (Write_File_Record_At_Offset(
  814ec4:	e0bffc17 	ldw	r2,-16(fp)
  814ec8:	10800c0b 	ldhu	r2,48(r2)
  814ecc:	113fffcc 	andi	r4,r2,65535
  814ed0:	2120001c 	xori	r4,r4,32768
  814ed4:	21200004 	addi	r4,r4,-32768
  814ed8:	e17ffc17 	ldw	r5,-16(fp)
  814edc:	0812b040 	call	812b04 <Write_File_Record_At_Offset>
  814ee0:	1005003a 	cmpeq	r2,r2,zero
  814ee4:	10000d1e 	bne	r2,zero,814f1c <create_file+0x2bc>
						file_record->file_record_offset, file_record)) {
					Save_Modified_Sector();
  814ee8:	08123e80 	call	8123e8 <Save_Modified_Sector>
					// Mark the first cluster of the file as the last cluster at first.
					mark_cluster(cluster_number, ((short int) (0xffff)), true);
  814eec:	e13ffa17 	ldw	r4,-24(fp)
  814ef0:	017fffc4 	movi	r5,-1
  814ef4:	01800044 	movi	r6,1
  814ef8:	08125ec0 	call	8125ec <mark_cluster>
					if (mark_cluster(cluster_number, ((short int) (0xffff)),
  814efc:	e13ffa17 	ldw	r4,-24(fp)
  814f00:	017fffc4 	movi	r5,-1
  814f04:	000d883a 	mov	r6,zero
  814f08:	08125ec0 	call	8125ec <mark_cluster>
  814f0c:	1005003a 	cmpeq	r2,r2,zero
  814f10:	1000021e 	bne	r2,zero,814f1c <create_file+0x2bc>
							false)) {
						result = true;
  814f14:	00800044 	movi	r2,1
  814f18:	e0bff915 	stw	r2,-28(fp)
				}
			}
		}

	}
	return result;
  814f1c:	e0bff917 	ldw	r2,-28(fp)
}
  814f20:	e037883a 	mov	sp,fp
  814f24:	dfc00117 	ldw	ra,4(sp)
  814f28:	df000017 	ldw	fp,0(sp)
  814f2c:	dec00204 	addi	sp,sp,8
  814f30:	f800283a 	ret

00814f34 <copy_file_record_name_to_string>:

void copy_file_record_name_to_string(t_file_record *file_record,
		char *file_name)
/* Copy a file name from the file record to a given string */
{
  814f34:	defffb04 	addi	sp,sp,-20
  814f38:	df000415 	stw	fp,16(sp)
  814f3c:	df000404 	addi	fp,sp,16
  814f40:	e13ffe15 	stw	r4,-8(fp)
  814f44:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
  814f48:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
  814f4c:	e03ffd15 	stw	zero,-12(fp)
  814f50:	00001606 	br	814fac <copy_file_record_name_to_string+0x78>
		if (file_record->name[index] != ' ') {
  814f54:	e0fffd17 	ldw	r3,-12(fp)
  814f58:	e0bffe17 	ldw	r2,-8(fp)
  814f5c:	10c5883a 	add	r2,r2,r3
  814f60:	10800003 	ldbu	r2,0(r2)
  814f64:	10803fcc 	andi	r2,r2,255
  814f68:	10800820 	cmpeqi	r2,r2,32
  814f6c:	10000c1e 	bne	r2,zero,814fa0 <copy_file_record_name_to_string+0x6c>
			file_name[flength] = file_record->name[index];
  814f70:	e0bffc17 	ldw	r2,-16(fp)
  814f74:	1007883a 	mov	r3,r2
  814f78:	e0bfff17 	ldw	r2,-4(fp)
  814f7c:	1889883a 	add	r4,r3,r2
  814f80:	e0fffd17 	ldw	r3,-12(fp)
  814f84:	e0bffe17 	ldw	r2,-8(fp)
  814f88:	10c5883a 	add	r2,r2,r3
  814f8c:	10800003 	ldbu	r2,0(r2)
  814f90:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
  814f94:	e0bffc17 	ldw	r2,-16(fp)
  814f98:	10800044 	addi	r2,r2,1
  814f9c:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
  814fa0:	e0bffd17 	ldw	r2,-12(fp)
  814fa4:	10800044 	addi	r2,r2,1
  814fa8:	e0bffd15 	stw	r2,-12(fp)
  814fac:	e0bffd17 	ldw	r2,-12(fp)
  814fb0:	10800210 	cmplti	r2,r2,8
  814fb4:	103fe71e 	bne	r2,zero,814f54 <copy_file_record_name_to_string+0x20>
		if (file_record->name[index] != ' ') {
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ') {
  814fb8:	e0bffe17 	ldw	r2,-8(fp)
  814fbc:	10800203 	ldbu	r2,8(r2)
  814fc0:	10803fcc 	andi	r2,r2,255
  814fc4:	10800820 	cmpeqi	r2,r2,32
  814fc8:	1000261e 	bne	r2,zero,815064 <copy_file_record_name_to_string+0x130>
		file_name[flength] = '.';
  814fcc:	e0bffc17 	ldw	r2,-16(fp)
  814fd0:	1007883a 	mov	r3,r2
  814fd4:	e0bfff17 	ldw	r2,-4(fp)
  814fd8:	1887883a 	add	r3,r3,r2
  814fdc:	00800b84 	movi	r2,46
  814fe0:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
  814fe4:	e0bffc17 	ldw	r2,-16(fp)
  814fe8:	10800044 	addi	r2,r2,1
  814fec:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++) {
  814ff0:	e03ffd15 	stw	zero,-12(fp)
  814ff4:	00001806 	br	815058 <copy_file_record_name_to_string+0x124>
			if (file_record->extension[index] != ' ') {
  814ff8:	e0fffd17 	ldw	r3,-12(fp)
  814ffc:	e0bffe17 	ldw	r2,-8(fp)
  815000:	1885883a 	add	r2,r3,r2
  815004:	10800204 	addi	r2,r2,8
  815008:	10800003 	ldbu	r2,0(r2)
  81500c:	10803fcc 	andi	r2,r2,255
  815010:	10800820 	cmpeqi	r2,r2,32
  815014:	10000d1e 	bne	r2,zero,81504c <copy_file_record_name_to_string+0x118>
				file_name[flength] = file_record->extension[index];
  815018:	e0bffc17 	ldw	r2,-16(fp)
  81501c:	1007883a 	mov	r3,r2
  815020:	e0bfff17 	ldw	r2,-4(fp)
  815024:	1889883a 	add	r4,r3,r2
  815028:	e0fffd17 	ldw	r3,-12(fp)
  81502c:	e0bffe17 	ldw	r2,-8(fp)
  815030:	1885883a 	add	r2,r3,r2
  815034:	10800204 	addi	r2,r2,8
  815038:	10800003 	ldbu	r2,0(r2)
  81503c:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
  815040:	e0bffc17 	ldw	r2,-16(fp)
  815044:	10800044 	addi	r2,r2,1
  815048:	e0bffc15 	stw	r2,-16(fp)
		}
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
  81504c:	e0bffd17 	ldw	r2,-12(fp)
  815050:	10800044 	addi	r2,r2,1
  815054:	e0bffd15 	stw	r2,-12(fp)
  815058:	e0bffd17 	ldw	r2,-12(fp)
  81505c:	108000d0 	cmplti	r2,r2,3
  815060:	103fe51e 	bne	r2,zero,814ff8 <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
  815064:	e0bffc17 	ldw	r2,-16(fp)
  815068:	1007883a 	mov	r3,r2
  81506c:	e0bfff17 	ldw	r2,-4(fp)
  815070:	1885883a 	add	r2,r3,r2
  815074:	10000005 	stb	zero,0(r2)
}
  815078:	e037883a 	mov	sp,fp
  81507c:	df000017 	ldw	fp,0(sp)
  815080:	dec00104 	addi	sp,sp,4
  815084:	f800283a 	ret

00815088 <alt_up_sd_card_open_dev>:
///////////////////////////////////////////////////////////////////////////
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name) {
  815088:	defffc04 	addi	sp,sp,-16
  81508c:	dfc00315 	stw	ra,12(sp)
  815090:	df000215 	stw	fp,8(sp)
  815094:	df000204 	addi	fp,sp,8
  815098:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name,
			&alt_dev_list);
  81509c:	e13fff17 	ldw	r4,-4(fp)
  8150a0:	014020b4 	movhi	r5,130
  8150a4:	29681f04 	addi	r5,r5,-24452
  8150a8:	0816da00 	call	816da0 <alt_find_dev>
  8150ac:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL) {
  8150b0:	e0bffe17 	ldw	r2,-8(fp)
  8150b4:	1005003a 	cmpeq	r2,r2,zero
  8150b8:	10001e1e 	bne	r2,zero,815134 <alt_up_sd_card_open_dev+0xac>
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  8150bc:	e0bffe17 	ldw	r2,-8(fp)
  8150c0:	10800a17 	ldw	r2,40(r2)
  8150c4:	10808d04 	addi	r2,r2,564
  8150c8:	d0a71c15 	stw	r2,-25488(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
  8150cc:	e0bffe17 	ldw	r2,-8(fp)
  8150d0:	10800a17 	ldw	r2,40(r2)
  8150d4:	10808904 	addi	r2,r2,548
  8150d8:	d0a71d15 	stw	r2,-25484(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
  8150dc:	e0bffe17 	ldw	r2,-8(fp)
  8150e0:	10800a17 	ldw	r2,40(r2)
  8150e4:	10808404 	addi	r2,r2,528
  8150e8:	d0a71e15 	stw	r2,-25480(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
  8150ec:	e0bffe17 	ldw	r2,-8(fp)
  8150f0:	10800a17 	ldw	r2,40(r2)
  8150f4:	10808c04 	addi	r2,r2,560
  8150f8:	d0a71f15 	stw	r2,-25476(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
  8150fc:	e0bffe17 	ldw	r2,-8(fp)
  815100:	10800a17 	ldw	r2,40(r2)
  815104:	10808b04 	addi	r2,r2,556
  815108:	d0a72015 	stw	r2,-25472(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
  81510c:	e0bffe17 	ldw	r2,-8(fp)
  815110:	10800a17 	ldw	r2,40(r2)
  815114:	d0a72115 	stw	r2,-25468(gp)
		device_pointer = dev;
  815118:	e0bffe17 	ldw	r2,-8(fp)
  81511c:	d0a72415 	stw	r2,-25456(gp)
		initialized = false;
  815120:	d0271a15 	stw	zero,-25496(gp)
		is_sd_card_formated_as_FAT16 = false;
  815124:	d0271b15 	stw	zero,-25492(gp)
		search_data.valid = false;
  815128:	008020b4 	movhi	r2,130
  81512c:	10afbf04 	addi	r2,r2,-16644
  815130:	10000415 	stw	zero,16(r2)
	}
	return dev;
  815134:	e0bffe17 	ldw	r2,-8(fp)
}
  815138:	e037883a 	mov	sp,fp
  81513c:	dfc00117 	ldw	ra,4(sp)
  815140:	df000017 	ldw	fp,0(sp)
  815144:	dec00204 	addi	sp,sp,8
  815148:	f800283a 	ret

0081514c <alt_up_sd_card_is_Present>:

bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
  81514c:	defffd04 	addi	sp,sp,-12
  815150:	df000215 	stw	fp,8(sp)
  815154:	df000204 	addi	fp,sp,8
	bool result = false;
  815158:	e03fff15 	stw	zero,-4(fp)

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  81515c:	d0a72417 	ldw	r2,-25456(gp)
  815160:	1005003a 	cmpeq	r2,r2,zero
  815164:	1000081e 	bne	r2,zero,815188 <alt_up_sd_card_is_Present+0x3c>
  815168:	d0a71c17 	ldw	r2,-25488(gp)
  81516c:	1080002b 	ldhuio	r2,0(r2)
  815170:	1080008c 	andi	r2,r2,2
  815174:	1005003a 	cmpeq	r2,r2,zero
  815178:	1000031e 	bne	r2,zero,815188 <alt_up_sd_card_is_Present+0x3c>
			& 0x02) != 0)) {
		result = true;
  81517c:	00800044 	movi	r2,1
  815180:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  815184:	00001e06 	br	815200 <alt_up_sd_card_is_Present+0xb4>
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
  815188:	d0a71a17 	ldw	r2,-25496(gp)
  81518c:	10800058 	cmpnei	r2,r2,1
  815190:	10001b1e 	bne	r2,zero,815200 <alt_up_sd_card_is_Present+0xb4>
		int index;

		initialized = false;
  815194:	d0271a15 	stw	zero,-25496(gp)
		search_data.valid = false;
  815198:	008020b4 	movhi	r2,130
  81519c:	10afbf04 	addi	r2,r2,-16644
  8151a0:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
  8151a4:	d0271b15 	stw	zero,-25492(gp)

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  8151a8:	e03ffe15 	stw	zero,-8(fp)
  8151ac:	00001106 	br	8151f4 <alt_up_sd_card_is_Present+0xa8>
			active_files[index].in_use = false;
  8151b0:	e0bffe17 	ldw	r2,-8(fp)
  8151b4:	00c020b4 	movhi	r3,130
  8151b8:	18efd904 	addi	r3,r3,-16540
  8151bc:	100491ba 	slli	r2,r2,6
  8151c0:	10c5883a 	add	r2,r2,r3
  8151c4:	10800f04 	addi	r2,r2,60
  8151c8:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
  8151cc:	e0bffe17 	ldw	r2,-8(fp)
  8151d0:	00c020b4 	movhi	r3,130
  8151d4:	18efd904 	addi	r3,r3,-16540
  8151d8:	100491ba 	slli	r2,r2,6
  8151dc:	10c5883a 	add	r2,r2,r3
  8151e0:	10800e04 	addi	r2,r2,56
  8151e4:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  8151e8:	e0bffe17 	ldw	r2,-8(fp)
  8151ec:	10800044 	addi	r2,r2,1
  8151f0:	e0bffe15 	stw	r2,-8(fp)
  8151f4:	e0bffe17 	ldw	r2,-8(fp)
  8151f8:	10800510 	cmplti	r2,r2,20
  8151fc:	103fec1e 	bne	r2,zero,8151b0 <alt_up_sd_card_is_Present+0x64>
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
	return result;
  815200:	e0bfff17 	ldw	r2,-4(fp)
}
  815204:	e037883a 	mov	sp,fp
  815208:	df000017 	ldw	fp,0(sp)
  81520c:	dec00104 	addi	sp,sp,4
  815210:	f800283a 	ret

00815214 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
  815214:	defffd04 	addi	sp,sp,-12
  815218:	dfc00215 	stw	ra,8(sp)
  81521c:	df000115 	stw	fp,4(sp)
  815220:	df000104 	addi	fp,sp,4
	bool result = false;
  815224:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
  815228:	081514c0 	call	81514c <alt_up_sd_card_is_Present>
  81522c:	1005003a 	cmpeq	r2,r2,zero
  815230:	10000d1e 	bne	r2,zero,815268 <alt_up_sd_card_is_FAT16+0x54>
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false) {
  815234:	d0a71a17 	ldw	r2,-25496(gp)
  815238:	1004c03a 	cmpne	r2,r2,zero
  81523c:	1000071e 	bne	r2,zero,81525c <alt_up_sd_card_is_FAT16+0x48>
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
  815240:	08134040 	call	813404 <Look_for_FAT16>
  815244:	d0a71b15 	stw	r2,-25492(gp)
			initialized = is_sd_card_formated_as_FAT16;
  815248:	d0a71b17 	ldw	r2,-25492(gp)
  81524c:	d0a71a15 	stw	r2,-25496(gp)
			search_data.valid = false;
  815250:	008020b4 	movhi	r2,130
  815254:	10afbf04 	addi	r2,r2,-16644
  815258:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
  81525c:	d0a71b17 	ldw	r2,-25492(gp)
  815260:	e0bfff15 	stw	r2,-4(fp)
  815264:	00000206 	br	815270 <alt_up_sd_card_is_FAT16+0x5c>
	} else {
		// If not then you may as well not open the device.
		initialized = false;
  815268:	d0271a15 	stw	zero,-25496(gp)
		is_sd_card_formated_as_FAT16 = false;
  81526c:	d0271b15 	stw	zero,-25492(gp)
	}

	return result;
  815270:	e0bfff17 	ldw	r2,-4(fp)
}
  815274:	e037883a 	mov	sp,fp
  815278:	dfc00117 	ldw	ra,4(sp)
  81527c:	df000017 	ldw	fp,0(sp)
  815280:	dec00204 	addi	sp,sp,8
  815284:	f800283a 	ret

00815288 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
  815288:	deffea04 	addi	sp,sp,-88
  81528c:	dfc01515 	stw	ra,84(sp)
  815290:	df001415 	stw	fp,80(sp)
  815294:	df001404 	addi	fp,sp,80
  815298:	e13ffe15 	stw	r4,-8(fp)
  81529c:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
  8152a0:	00800084 	movi	r2,2
  8152a4:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  8152a8:	081514c0 	call	81514c <alt_up_sd_card_is_Present>
  8152ac:	1005003a 	cmpeq	r2,r2,zero
  8152b0:	1000241e 	bne	r2,zero,815344 <alt_up_sd_card_find_first+0xbc>
  8152b4:	d0a71b17 	ldw	r2,-25492(gp)
  8152b8:	1005003a 	cmpeq	r2,r2,zero
  8152bc:	1000211e 	bne	r2,zero,815344 <alt_up_sd_card_find_first+0xbc>
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through,
  8152c0:	e17fed04 	addi	r5,fp,-76
  8152c4:	e1bfee04 	addi	r6,fp,-72
  8152c8:	e13ffe17 	ldw	r4,-8(fp)
  8152cc:	0813c140 	call	813c14 <get_home_directory_cluster_for_file>
  8152d0:	1005003a 	cmpeq	r2,r2,zero
  8152d4:	1000191e 	bne	r2,zero,81533c <alt_up_sd_card_find_first+0xb4>
				&home_directory_cluster, &file_record)) {
			search_data.directory_root_cluster = home_directory_cluster;
  8152d8:	e0bfed17 	ldw	r2,-76(fp)
  8152dc:	1007883a 	mov	r3,r2
  8152e0:	008020b4 	movhi	r2,130
  8152e4:	10afbf04 	addi	r2,r2,-16644
  8152e8:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
  8152ec:	e0bfed17 	ldw	r2,-76(fp)
  8152f0:	1007883a 	mov	r3,r2
  8152f4:	008020b4 	movhi	r2,130
  8152f8:	10afbf04 	addi	r2,r2,-16644
  8152fc:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
  815300:	008020b4 	movhi	r2,130
  815304:	10afbf04 	addi	r2,r2,-16644
  815308:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
  81530c:	00c020b4 	movhi	r3,130
  815310:	18efbf04 	addi	r3,r3,-16644
  815314:	00bfffc4 	movi	r2,-1
  815318:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
  81531c:	00c020b4 	movhi	r3,130
  815320:	18efbf04 	addi	r3,r3,-16644
  815324:	00800044 	movi	r2,1
  815328:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
  81532c:	e13fff17 	ldw	r4,-4(fp)
  815330:	081535c0 	call	81535c <alt_up_sd_card_find_next>
  815334:	e0bfec0d 	sth	r2,-80(fp)
  815338:	00000206 	br	815344 <alt_up_sd_card_find_first+0xbc>
		} else {
			result = 1;
  81533c:	00800044 	movi	r2,1
  815340:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
  815344:	e0bfec0f 	ldh	r2,-80(fp)
}
  815348:	e037883a 	mov	sp,fp
  81534c:	dfc00117 	ldw	ra,4(sp)
  815350:	df000017 	ldw	fp,0(sp)
  815354:	dec00204 	addi	sp,sp,8
  815358:	f800283a 	ret

0081535c <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
  81535c:	deffe404 	addi	sp,sp,-112
  815360:	dfc01b15 	stw	ra,108(sp)
  815364:	df001a15 	stw	fp,104(sp)
  815368:	df001a04 	addi	fp,sp,104
  81536c:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
  815370:	00800084 	movi	r2,2
  815374:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  815378:	081514c0 	call	81514c <alt_up_sd_card_is_Present>
  81537c:	1005003a 	cmpeq	r2,r2,zero
  815380:	1000da1e 	bne	r2,zero,8156ec <alt_up_sd_card_find_next+0x390>
  815384:	d0a71b17 	ldw	r2,-25492(gp)
  815388:	1005003a 	cmpeq	r2,r2,zero
  81538c:	1000d71e 	bne	r2,zero,8156ec <alt_up_sd_card_find_next+0x390>
		if (search_data.valid) {
  815390:	008020b4 	movhi	r2,130
  815394:	10afbf04 	addi	r2,r2,-16644
  815398:	10800417 	ldw	r2,16(r2)
  81539c:	1005003a 	cmpeq	r2,r2,zero
  8153a0:	1000d01e 	bne	r2,zero,8156e4 <alt_up_sd_card_find_next+0x388>
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
  8153a4:	008020b4 	movhi	r2,130
  8153a8:	10afbf04 	addi	r2,r2,-16644
  8153ac:	10800117 	ldw	r2,4(r2)
  8153b0:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0) {
  8153b4:	e0bfec17 	ldw	r2,-80(fp)
  8153b8:	1004c03a 	cmpne	r2,r2,zero
  8153bc:	1000511e 	bne	r2,zero,815504 <alt_up_sd_card_find_next+0x1a8>
				// Searching through the root directory
				int max_root_dir_sectors = ((32
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
  8153c0:	008020b4 	movhi	r2,130
  8153c4:	10afc404 	addi	r2,r2,-16624
  8153c8:	1080050b 	ldhu	r2,20(r2)
  8153cc:	10bfffcc 	andi	r2,r2,65535
  8153d0:	1008917a 	slli	r4,r2,5
  8153d4:	008020b4 	movhi	r2,130
  8153d8:	10afc404 	addi	r2,r2,-16624
  8153dc:	1080030b 	ldhu	r2,12(r2)
  8153e0:	117fffcc 	andi	r5,r2,65535
  8153e4:	0804bfc0 	call	804bfc <__divsi3>
  8153e8:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
  8153ec:	008020b4 	movhi	r2,130
  8153f0:	10afbf04 	addi	r2,r2,-16644
  8153f4:	10800217 	ldw	r2,8(r2)
  8153f8:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector + 1;
  8153fc:	008020b4 	movhi	r2,130
  815400:	10afbf04 	addi	r2,r2,-16644
  815404:	1080030b 	ldhu	r2,12(r2)
  815408:	10bfffcc 	andi	r2,r2,65535
  81540c:	10a0001c 	xori	r2,r2,32768
  815410:	10a00004 	addi	r2,r2,-32768
  815414:	10800044 	addi	r2,r2,1
  815418:	e0bfe915 	stw	r2,-92(fp)

				for (; sector_index < max_root_dir_sectors; sector_index++) {
  81541c:	00003306 	br	8154ec <alt_up_sd_card_find_next+0x190>
					if (Read_Sector_Data(sector_index
  815420:	008020b4 	movhi	r2,130
  815424:	10afc404 	addi	r2,r2,-16624
  815428:	10c01317 	ldw	r3,76(r2)
  81542c:	e0bfea17 	ldw	r2,-88(fp)
  815430:	1885883a 	add	r2,r3,r2
  815434:	1009883a 	mov	r4,r2
  815438:	d1672217 	ldw	r5,-25464(gp)
  81543c:	08124380 	call	812438 <Read_Sector_Data>
  815440:	1005003a 	cmpeq	r2,r2,zero
  815444:	10002c1e 	bne	r2,zero,8154f8 <alt_up_sd_card_find_next+0x19c>
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
  815448:	00002106 	br	8154d0 <alt_up_sd_card_find_next+0x174>
							if (Read_File_Record_At_Offset(file_counter * 32,
  81544c:	e0bfe917 	ldw	r2,-92(fp)
  815450:	1008917a 	slli	r4,r2,5
  815454:	e1ffea17 	ldw	r7,-88(fp)
  815458:	e17fee04 	addi	r5,fp,-72
  81545c:	000d883a 	mov	r6,zero
  815460:	08128800 	call	812880 <Read_File_Record_At_Offset>
  815464:	1005003a 	cmpeq	r2,r2,zero
  815468:	1000161e 	bne	r2,zero,8154c4 <alt_up_sd_card_find_next+0x168>
									&file_record, 0, sector_index)) {
								if ((file_record.name[0] != 0)
  81546c:	e0bfee03 	ldbu	r2,-72(fp)
  815470:	10803fcc 	andi	r2,r2,255
  815474:	1005003a 	cmpeq	r2,r2,zero
  815478:	1000121e 	bne	r2,zero,8154c4 <alt_up_sd_card_find_next+0x168>
  81547c:	e0bfee03 	ldbu	r2,-72(fp)
  815480:	10803fcc 	andi	r2,r2,255
  815484:	10803960 	cmpeqi	r2,r2,229
  815488:	10000e1e 	bne	r2,zero,8154c4 <alt_up_sd_card_find_next+0x168>
										&& (file_record.name[0] != 0xe5)) {
									/* Update search structure. */
									search_data.file_index_in_sector
  81548c:	e0bfe917 	ldw	r2,-92(fp)
  815490:	1007883a 	mov	r3,r2
  815494:	008020b4 	movhi	r2,130
  815498:	10afbf04 	addi	r2,r2,-16644
  81549c:	10c0030d 	sth	r3,12(r2)
											= file_counter;
									search_data.current_sector_in_cluster
  8154a0:	e0ffea17 	ldw	r3,-88(fp)
  8154a4:	008020b4 	movhi	r2,130
  8154a8:	10afbf04 	addi	r2,r2,-16644
  8154ac:	10c00215 	stw	r3,8(r2)
											= sector_index;

									/* Copy file name.*/
									copy_file_record_name_to_string(
  8154b0:	e13fee04 	addi	r4,fp,-72
  8154b4:	e17ffe17 	ldw	r5,-8(fp)
  8154b8:	0814f340 	call	814f34 <copy_file_record_name_to_string>
											&file_record, file_name);
									return 0;
  8154bc:	e03fff15 	stw	zero,-4(fp)
  8154c0:	00008c06 	br	8156f4 <alt_up_sd_card_find_next+0x398>

				for (; sector_index < max_root_dir_sectors; sector_index++) {
					if (Read_Sector_Data(sector_index
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
  8154c4:	e0bfe917 	ldw	r2,-92(fp)
  8154c8:	10800044 	addi	r2,r2,1
  8154cc:	e0bfe915 	stw	r2,-92(fp)
  8154d0:	e0bfe917 	ldw	r2,-92(fp)
  8154d4:	10800410 	cmplti	r2,r2,16
  8154d8:	103fdc1e 	bne	r2,zero,81544c <alt_up_sd_card_find_next+0xf0>
											&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
  8154dc:	e03fe915 	stw	zero,-92(fp)
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector + 1;

				for (; sector_index < max_root_dir_sectors; sector_index++) {
  8154e0:	e0bfea17 	ldw	r2,-88(fp)
  8154e4:	10800044 	addi	r2,r2,1
  8154e8:	e0bfea15 	stw	r2,-88(fp)
  8154ec:	e0ffea17 	ldw	r3,-88(fp)
  8154f0:	e0bfeb17 	ldw	r2,-84(fp)
  8154f4:	18bfca16 	blt	r3,r2,815420 <alt_up_sd_card_find_next+0xc4>
						file_counter = 0;
					} else {
						break;
					}
				}
				result = -1;
  8154f8:	00bfffc4 	movi	r2,-1
  8154fc:	e0bfed0d 	sth	r2,-76(fp)
  815500:	00007a06 	br	8156ec <alt_up_sd_card_find_next+0x390>
			} else {
				int file_counter = search_data.file_index_in_sector + 1;
  815504:	008020b4 	movhi	r2,130
  815508:	10afbf04 	addi	r2,r2,-16644
  81550c:	1080030b 	ldhu	r2,12(r2)
  815510:	10bfffcc 	andi	r2,r2,65535
  815514:	10a0001c 	xori	r2,r2,32768
  815518:	10a00004 	addi	r2,r2,-32768
  81551c:	10800044 	addi	r2,r2,1
  815520:	e0bfe815 	stw	r2,-96(fp)
				do {
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
  815524:	e0bfec17 	ldw	r2,-80(fp)
  815528:	10ffff84 	addi	r3,r2,-2
  81552c:	008020b4 	movhi	r2,130
  815530:	10afc404 	addi	r2,r2,-16624
  815534:	10800383 	ldbu	r2,14(r2)
  815538:	10803fcc 	andi	r2,r2,255
  81553c:	1885383a 	mul	r2,r3,r2
  815540:	1007883a 	mov	r3,r2
  815544:	008020b4 	movhi	r2,130
  815548:	10afc404 	addi	r2,r2,-16624
  81554c:	10801417 	ldw	r2,80(r2)
  815550:	1885883a 	add	r2,r3,r2
  815554:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
  815558:	008020b4 	movhi	r2,130
  81555c:	10afbf04 	addi	r2,r2,-16644
  815560:	10800217 	ldw	r2,8(r2)
  815564:	e0bfe615 	stw	r2,-104(fp)

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
  815568:	00003406 	br	81563c <alt_up_sd_card_find_next+0x2e0>
						if (Read_Sector_Data(sector_index + start_sector,
  81556c:	e0ffe617 	ldw	r3,-104(fp)
  815570:	e0bfe717 	ldw	r2,-100(fp)
  815574:	1889883a 	add	r4,r3,r2
  815578:	d1672217 	ldw	r5,-25464(gp)
  81557c:	08124380 	call	812438 <Read_Sector_Data>
  815580:	1005003a 	cmpeq	r2,r2,zero
  815584:	1000331e 	bne	r2,zero,815654 <alt_up_sd_card_find_next+0x2f8>
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
  815588:	00002506 	br	815620 <alt_up_sd_card_find_next+0x2c4>
								if (Read_File_Record_At_Offset(file_counter
  81558c:	e0bfe817 	ldw	r2,-96(fp)
  815590:	1008917a 	slli	r4,r2,5
  815594:	e1bfec17 	ldw	r6,-80(fp)
  815598:	e1ffe617 	ldw	r7,-104(fp)
  81559c:	e17fee04 	addi	r5,fp,-72
  8155a0:	08128800 	call	812880 <Read_File_Record_At_Offset>
  8155a4:	1005003a 	cmpeq	r2,r2,zero
  8155a8:	10001a1e 	bne	r2,zero,815614 <alt_up_sd_card_find_next+0x2b8>
										* 32, &file_record, cluster,
										sector_index)) {
									if ((file_record.name[0] != 0)
  8155ac:	e0bfee03 	ldbu	r2,-72(fp)
  8155b0:	10803fcc 	andi	r2,r2,255
  8155b4:	1005003a 	cmpeq	r2,r2,zero
  8155b8:	1000161e 	bne	r2,zero,815614 <alt_up_sd_card_find_next+0x2b8>
  8155bc:	e0bfee03 	ldbu	r2,-72(fp)
  8155c0:	10803fcc 	andi	r2,r2,255
  8155c4:	10803960 	cmpeqi	r2,r2,229
  8155c8:	1000121e 	bne	r2,zero,815614 <alt_up_sd_card_find_next+0x2b8>
											&& (file_record.name[0] != 0xe5)) {
										/* Update search structure. */
										search_data.current_cluster_index
  8155cc:	e0ffec17 	ldw	r3,-80(fp)
  8155d0:	008020b4 	movhi	r2,130
  8155d4:	10afbf04 	addi	r2,r2,-16644
  8155d8:	10c00115 	stw	r3,4(r2)
												= cluster;
										search_data.file_index_in_sector
  8155dc:	e0bfe817 	ldw	r2,-96(fp)
  8155e0:	1007883a 	mov	r3,r2
  8155e4:	008020b4 	movhi	r2,130
  8155e8:	10afbf04 	addi	r2,r2,-16644
  8155ec:	10c0030d 	sth	r3,12(r2)
												= file_counter;
										search_data.current_sector_in_cluster
  8155f0:	e0ffe617 	ldw	r3,-104(fp)
  8155f4:	008020b4 	movhi	r2,130
  8155f8:	10afbf04 	addi	r2,r2,-16644
  8155fc:	10c00215 	stw	r3,8(r2)
												= sector_index;

										/* Copy file name.*/
										copy_file_record_name_to_string(
  815600:	e13fee04 	addi	r4,fp,-72
  815604:	e17ffe17 	ldw	r5,-8(fp)
  815608:	0814f340 	call	814f34 <copy_file_record_name_to_string>
												&file_record, file_name);
										return 0;
  81560c:	e03fff15 	stw	zero,-4(fp)
  815610:	00003806 	br	8156f4 <alt_up_sd_card_find_next+0x398>
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
  815614:	e0bfe817 	ldw	r2,-96(fp)
  815618:	10800044 	addi	r2,r2,1
  81561c:	e0bfe815 	stw	r2,-96(fp)
  815620:	e0bfe817 	ldw	r2,-96(fp)
  815624:	10800410 	cmplti	r2,r2,16
  815628:	103fd81e 	bne	r2,zero,81558c <alt_up_sd_card_find_next+0x230>
												&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
  81562c:	e03fe815 	stw	zero,-96(fp)
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
  815630:	e0bfe617 	ldw	r2,-104(fp)
  815634:	10800044 	addi	r2,r2,1
  815638:	e0bfe615 	stw	r2,-104(fp)
  81563c:	008020b4 	movhi	r2,130
  815640:	10afc404 	addi	r2,r2,-16624
  815644:	10800383 	ldbu	r2,14(r2)
  815648:	10c03fcc 	andi	r3,r2,255
  81564c:	e0bfe617 	ldw	r2,-104(fp)
  815650:	10ffc616 	blt	r2,r3,81556c <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster) {
  815654:	008020b4 	movhi	r2,130
  815658:	10afc404 	addi	r2,r2,-16624
  81565c:	10800383 	ldbu	r2,14(r2)
  815660:	10c03fcc 	andi	r3,r2,255
  815664:	e0bfe617 	ldw	r2,-104(fp)
  815668:	10c01a16 	blt	r2,r3,8156d4 <alt_up_sd_card_find_next+0x378>
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster)) {
  81566c:	e13fec17 	ldw	r4,-80(fp)
  815670:	e17fed84 	addi	r5,fp,-74
  815674:	08125340 	call	812534 <get_cluster_flag>
  815678:	1005003a 	cmpeq	r2,r2,zero
  81567c:	1000131e 	bne	r2,zero,8156cc <alt_up_sd_card_find_next+0x370>
							if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  815680:	e0bfed8b 	ldhu	r2,-74(fp)
  815684:	10bfffcc 	andi	r2,r2,65535
  815688:	10a0001c 	xori	r2,r2,32768
  81568c:	10a00004 	addi	r2,r2,-32768
  815690:	10fffe0c 	andi	r3,r2,65528
  815694:	00bffe14 	movui	r2,65528
  815698:	1880051e 	bne	r3,r2,8156b0 <alt_up_sd_card_find_next+0x354>
								result = -1;
  81569c:	00bfffc4 	movi	r2,-1
  8156a0:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
  8156a4:	008020b4 	movhi	r2,130
  8156a8:	10afbf04 	addi	r2,r2,-16644
  8156ac:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
  8156b0:	e0bfed8b 	ldhu	r2,-74(fp)
  8156b4:	10bfffcc 	andi	r2,r2,65535
  8156b8:	10a0001c 	xori	r2,r2,32768
  8156bc:	10a00004 	addi	r2,r2,-32768
  8156c0:	10bffe0c 	andi	r2,r2,65528
  8156c4:	e0bfec15 	stw	r2,-80(fp)
  8156c8:	00000206 	br	8156d4 <alt_up_sd_card_find_next+0x378>
						} else {
							// Error encountered.                 
							result = -1;
  8156cc:	00bfffc4 	movi	r2,-1
  8156d0:	e0bfed0d 	sth	r2,-76(fp)
						}
					}
				} while (cluster < 0x0000fff8);
  8156d4:	e0ffec17 	ldw	r3,-80(fp)
  8156d8:	00bffdd4 	movui	r2,65527
  8156dc:	10ff910e 	bge	r2,r3,815524 <alt_up_sd_card_find_next+0x1c8>
  8156e0:	00000206 	br	8156ec <alt_up_sd_card_find_next+0x390>
			}
		} else {
			// Call Find_First first.
			result = 3;
  8156e4:	008000c4 	movi	r2,3
  8156e8:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
  8156ec:	e0bfed0f 	ldh	r2,-76(fp)
  8156f0:	e0bfff15 	stw	r2,-4(fp)
  8156f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8156f8:	e037883a 	mov	sp,fp
  8156fc:	dfc00117 	ldw	ra,4(sp)
  815700:	df000017 	ldw	fp,0(sp)
  815704:	dec00204 	addi	sp,sp,8
  815708:	f800283a 	ret

0081570c <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
  81570c:	deffe804 	addi	sp,sp,-96
  815710:	dfc01715 	stw	ra,92(sp)
  815714:	df001615 	stw	fp,88(sp)
  815718:	df001604 	addi	fp,sp,88
  81571c:	e13ffd15 	stw	r4,-12(fp)
  815720:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
  815724:	00bfffc4 	movi	r2,-1
  815728:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  81572c:	081514c0 	call	81514c <alt_up_sd_card_is_Present>
  815730:	1005003a 	cmpeq	r2,r2,zero
  815734:	1000d71e 	bne	r2,zero,815a94 <alt_up_sd_card_fopen+0x388>
  815738:	d0a71b17 	ldw	r2,-25492(gp)
  81573c:	1005003a 	cmpeq	r2,r2,zero
  815740:	1000d41e 	bne	r2,zero,815a94 <alt_up_sd_card_fopen+0x388>
		unsigned int home_directory_cluster = 0;
  815744:	e03fec15 	stw	zero,-80(fp)
		 * Rules:
		 *  - no spaces
		 *  - at most 12 chatacters per name, with a period in 9th position.
		 *  - a / or a \ every at most 12 characters.
		 */
		filename_to_upper_case(name);
  815748:	e13ffd17 	ldw	r4,-12(fp)
  81574c:	08135080 	call	813508 <filename_to_upper_case>
		if (check_file_name_for_FAT16_compliance(name)) {
  815750:	e13ffd17 	ldw	r4,-12(fp)
  815754:	08135d80 	call	8135d8 <check_file_name_for_FAT16_compliance>
  815758:	1005003a 	cmpeq	r2,r2,zero
  81575c:	1000cd1e 	bne	r2,zero,815a94 <alt_up_sd_card_fopen+0x388>
			int index;

			/* Get home directory cluster location for the specified file. 0 means root directory. */
			if (!get_home_directory_cluster_for_file(name,
  815760:	e17fec04 	addi	r5,fp,-80
  815764:	e1bfed04 	addi	r6,fp,-76
  815768:	e13ffd17 	ldw	r4,-12(fp)
  81576c:	0813c140 	call	813c14 <get_home_directory_cluster_for_file>
  815770:	1004c03a 	cmpne	r2,r2,zero
  815774:	1000031e 	bne	r2,zero,815784 <alt_up_sd_card_fopen+0x78>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
  815778:	e0bfeb0f 	ldh	r2,-84(fp)
  81577c:	e0bfff15 	stw	r2,-4(fp)
  815780:	0000c606 	br	815a9c <alt_up_sd_card_fopen+0x390>
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
  815784:	e03fea15 	stw	zero,-88(fp)
  815788:	00000f06 	br	8157c8 <alt_up_sd_card_fopen+0xbc>
				if (active_files[index].in_use == false) {
  81578c:	e0bfea17 	ldw	r2,-88(fp)
  815790:	00c020b4 	movhi	r3,130
  815794:	18efd904 	addi	r3,r3,-16540
  815798:	100491ba 	slli	r2,r2,6
  81579c:	10c5883a 	add	r2,r2,r3
  8157a0:	10800f04 	addi	r2,r2,60
  8157a4:	10800017 	ldw	r2,0(r2)
  8157a8:	1004c03a 	cmpne	r2,r2,zero
  8157ac:	1000031e 	bne	r2,zero,8157bc <alt_up_sd_card_fopen+0xb0>
					file_record_index = index;
  8157b0:	e0bfea17 	ldw	r2,-88(fp)
  8157b4:	e0bfeb0d 	sth	r2,-84(fp)
					break;
  8157b8:	00000606 	br	8157d4 <alt_up_sd_card_fopen+0xc8>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
  8157bc:	e0bfea17 	ldw	r2,-88(fp)
  8157c0:	10800044 	addi	r2,r2,1
  8157c4:	e0bfea15 	stw	r2,-88(fp)
  8157c8:	e0bfea17 	ldw	r2,-88(fp)
  8157cc:	10800510 	cmplti	r2,r2,20
  8157d0:	103fee1e 	bne	r2,zero,81578c <alt_up_sd_card_fopen+0x80>
				if (active_files[index].in_use == false) {
					file_record_index = index;
					break;
				}
			}
			if (file_record_index >= 0) {
  8157d4:	e0bfeb0f 	ldh	r2,-84(fp)
  8157d8:	1004803a 	cmplt	r2,r2,zero
  8157dc:	1000ad1e 	bne	r2,zero,815a94 <alt_up_sd_card_fopen+0x388>
				/* If file record is found, then look for the specified file. If the create flag is set to true
				 * and the file is not found, then it should be created in the current directory.
				 */

				if (find_file_in_directory(home_directory_cluster, name,
  8157e0:	e0bfec17 	ldw	r2,-80(fp)
  8157e4:	1009883a 	mov	r4,r2
  8157e8:	e0bfeb0f 	ldh	r2,-84(fp)
  8157ec:	100491ba 	slli	r2,r2,6
  8157f0:	1007883a 	mov	r3,r2
  8157f4:	008020b4 	movhi	r2,130
  8157f8:	10afd904 	addi	r2,r2,-16540
  8157fc:	188d883a 	add	r6,r3,r2
  815800:	e17ffd17 	ldw	r5,-12(fp)
  815804:	08141280 	call	814128 <find_file_in_directory>
  815808:	1005003a 	cmpeq	r2,r2,zero
  81580c:	10007d1e 	bne	r2,zero,815a04 <alt_up_sd_card_fopen+0x2f8>
						&(active_files[file_record_index]))) {
					if (create) {
  815810:	e0bffe17 	ldw	r2,-8(fp)
  815814:	1005003a 	cmpeq	r2,r2,zero
  815818:	1000031e 	bne	r2,zero,815828 <alt_up_sd_card_fopen+0x11c>
						/* Do not allow overwriting existing files for now. */
						return -1;
  81581c:	00bfffc4 	movi	r2,-1
  815820:	e0bfff15 	stw	r2,-4(fp)
  815824:	00009d06 	br	815a9c <alt_up_sd_card_fopen+0x390>
					}
					active_files[file_record_index].current_cluster_index
  815828:	e17feb0f 	ldh	r5,-84(fp)
  81582c:	e0bfeb0f 	ldh	r2,-84(fp)
  815830:	00c020b4 	movhi	r3,130
  815834:	18efd904 	addi	r3,r3,-16540
  815838:	100491ba 	slli	r2,r2,6
  81583c:	10c5883a 	add	r2,r2,r3
  815840:	10800504 	addi	r2,r2,20
  815844:	1080008b 	ldhu	r2,2(r2)
  815848:	113fffcc 	andi	r4,r2,65535
  81584c:	00c020b4 	movhi	r3,130
  815850:	18efd904 	addi	r3,r3,-16540
  815854:	280491ba 	slli	r2,r5,6
  815858:	10c5883a 	add	r2,r2,r3
  81585c:	10800704 	addi	r2,r2,28
  815860:	11000015 	stw	r4,0(r2)
							= active_files[file_record_index].start_cluster_index;
					active_files[file_record_index].current_sector_in_cluster
  815864:	e0bfeb0f 	ldh	r2,-84(fp)
  815868:	00c020b4 	movhi	r3,130
  81586c:	18efd904 	addi	r3,r3,-16540
  815870:	100491ba 	slli	r2,r2,6
  815874:	10c5883a 	add	r2,r2,r3
  815878:	10800804 	addi	r2,r2,32
  81587c:	10000015 	stw	zero,0(r2)
							= 0;
					active_files[file_record_index].current_byte_position = 0;
  815880:	e0bfeb0f 	ldh	r2,-84(fp)
  815884:	00c020b4 	movhi	r3,130
  815888:	18efd904 	addi	r3,r3,-16540
  81588c:	100491ba 	slli	r2,r2,6
  815890:	10c5883a 	add	r2,r2,r3
  815894:	10800904 	addi	r2,r2,36
  815898:	10000015 	stw	zero,0(r2)
					active_files[file_record_index].in_use = true;
  81589c:	e0bfeb0f 	ldh	r2,-84(fp)
  8158a0:	00c020b4 	movhi	r3,130
  8158a4:	18efd904 	addi	r3,r3,-16540
  8158a8:	100491ba 	slli	r2,r2,6
  8158ac:	10c5883a 	add	r2,r2,r3
  8158b0:	10c00f04 	addi	r3,r2,60
  8158b4:	00800044 	movi	r2,1
  8158b8:	18800015 	stw	r2,0(r3)
					active_files[file_record_index].modified = false;
  8158bc:	e0bfeb0f 	ldh	r2,-84(fp)
  8158c0:	00c020b4 	movhi	r3,130
  8158c4:	18efd904 	addi	r3,r3,-16540
  8158c8:	100491ba 	slli	r2,r2,6
  8158cc:	10c5883a 	add	r2,r2,r3
  8158d0:	10800e04 	addi	r2,r2,56
  8158d4:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
  8158d8:	e03fea15 	stw	zero,-88(fp)
  8158dc:	00004506 	br	8159f4 <alt_up_sd_card_fopen+0x2e8>
						if ((file_record_index != index)
  8158e0:	e0ffeb0f 	ldh	r3,-84(fp)
  8158e4:	e0bfea17 	ldw	r2,-88(fp)
  8158e8:	18803f26 	beq	r3,r2,8159e8 <alt_up_sd_card_fopen+0x2dc>
  8158ec:	e0bfea17 	ldw	r2,-88(fp)
  8158f0:	00c020b4 	movhi	r3,130
  8158f4:	18efd904 	addi	r3,r3,-16540
  8158f8:	100491ba 	slli	r2,r2,6
  8158fc:	10c5883a 	add	r2,r2,r3
  815900:	10800f04 	addi	r2,r2,60
  815904:	10800017 	ldw	r2,0(r2)
  815908:	10800058 	cmpnei	r2,r2,1
  81590c:	1000361e 	bne	r2,zero,8159e8 <alt_up_sd_card_fopen+0x2dc>
								&& (active_files[index].in_use == true)) {
							if ((active_files[file_record_index].file_record_cluster
  815910:	e0bfeb0f 	ldh	r2,-84(fp)
  815914:	00c020b4 	movhi	r3,130
  815918:	18efd904 	addi	r3,r3,-16540
  81591c:	100491ba 	slli	r2,r2,6
  815920:	10c5883a 	add	r2,r2,r3
  815924:	10800a04 	addi	r2,r2,40
  815928:	11000017 	ldw	r4,0(r2)
  81592c:	e0bfea17 	ldw	r2,-88(fp)
  815930:	00c020b4 	movhi	r3,130
  815934:	18efd904 	addi	r3,r3,-16540
  815938:	100491ba 	slli	r2,r2,6
  81593c:	10c5883a 	add	r2,r2,r3
  815940:	10800a04 	addi	r2,r2,40
  815944:	10800017 	ldw	r2,0(r2)
  815948:	2080271e 	bne	r4,r2,8159e8 <alt_up_sd_card_fopen+0x2dc>
  81594c:	e0bfeb0f 	ldh	r2,-84(fp)
  815950:	00c020b4 	movhi	r3,130
  815954:	18efd904 	addi	r3,r3,-16540
  815958:	100491ba 	slli	r2,r2,6
  81595c:	10c5883a 	add	r2,r2,r3
  815960:	10800b04 	addi	r2,r2,44
  815964:	11000017 	ldw	r4,0(r2)
  815968:	e0bfea17 	ldw	r2,-88(fp)
  81596c:	00c020b4 	movhi	r3,130
  815970:	18efd904 	addi	r3,r3,-16540
  815974:	100491ba 	slli	r2,r2,6
  815978:	10c5883a 	add	r2,r2,r3
  81597c:	10800b04 	addi	r2,r2,44
  815980:	10800017 	ldw	r2,0(r2)
  815984:	2080181e 	bne	r4,r2,8159e8 <alt_up_sd_card_fopen+0x2dc>
  815988:	e0bfeb0f 	ldh	r2,-84(fp)
  81598c:	00c020b4 	movhi	r3,130
  815990:	18efd904 	addi	r3,r3,-16540
  815994:	100491ba 	slli	r2,r2,6
  815998:	10c5883a 	add	r2,r2,r3
  81599c:	10800c04 	addi	r2,r2,48
  8159a0:	1100000b 	ldhu	r4,0(r2)
  8159a4:	e0bfea17 	ldw	r2,-88(fp)
  8159a8:	00c020b4 	movhi	r3,130
  8159ac:	18efd904 	addi	r3,r3,-16540
  8159b0:	100491ba 	slli	r2,r2,6
  8159b4:	10c5883a 	add	r2,r2,r3
  8159b8:	10800c04 	addi	r2,r2,48
  8159bc:	1080000b 	ldhu	r2,0(r2)
  8159c0:	20ffffcc 	andi	r3,r4,65535
  8159c4:	18e0001c 	xori	r3,r3,32768
  8159c8:	18e00004 	addi	r3,r3,-32768
  8159cc:	10bfffcc 	andi	r2,r2,65535
  8159d0:	10a0001c 	xori	r2,r2,32768
  8159d4:	10a00004 	addi	r2,r2,-32768
  8159d8:	1880031e 	bne	r3,r2,8159e8 <alt_up_sd_card_fopen+0x2dc>
									&& (active_files[file_record_index].file_record_sector_in_cluster
											== active_files[index].file_record_sector_in_cluster)
									&& (active_files[file_record_index].file_record_offset
											== active_files[index].file_record_offset)) {
								// file already in use.
								file_record_index = -2;
  8159dc:	00bfff84 	movi	r2,-2
  8159e0:	e0bfeb0d 	sth	r2,-84(fp)
								break;
  8159e4:	00002b06 	br	815a94 <alt_up_sd_card_fopen+0x388>
					active_files[file_record_index].current_byte_position = 0;
					active_files[file_record_index].in_use = true;
					active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
  8159e8:	e0bfea17 	ldw	r2,-88(fp)
  8159ec:	10800044 	addi	r2,r2,1
  8159f0:	e0bfea15 	stw	r2,-88(fp)
  8159f4:	e0bfea17 	ldw	r2,-88(fp)
  8159f8:	10800510 	cmplti	r2,r2,20
  8159fc:	103fb81e 	bne	r2,zero,8158e0 <alt_up_sd_card_fopen+0x1d4>
  815a00:	00002406 	br	815a94 <alt_up_sd_card_fopen+0x388>
								break;
							}
						}
					}

				} else if (create) {
  815a04:	e0bffe17 	ldw	r2,-8(fp)
  815a08:	1005003a 	cmpeq	r2,r2,zero
  815a0c:	10001f1e 	bne	r2,zero,815a8c <alt_up_sd_card_fopen+0x380>
					/* Create file if needed. */
					if (create_file(name, &(active_files[file_record_index]),
  815a10:	e0bfeb0f 	ldh	r2,-84(fp)
  815a14:	100491ba 	slli	r2,r2,6
  815a18:	1007883a 	mov	r3,r2
  815a1c:	008020b4 	movhi	r2,130
  815a20:	10afd904 	addi	r2,r2,-16540
  815a24:	188b883a 	add	r5,r3,r2
  815a28:	e1bfed04 	addi	r6,fp,-76
  815a2c:	e13ffd17 	ldw	r4,-12(fp)
  815a30:	0814c600 	call	814c60 <create_file>
  815a34:	1005003a 	cmpeq	r2,r2,zero
  815a38:	1000111e 	bne	r2,zero,815a80 <alt_up_sd_card_fopen+0x374>
							&home_dir)) {
						active_files[file_record_index].in_use = true;
  815a3c:	e0bfeb0f 	ldh	r2,-84(fp)
  815a40:	00c020b4 	movhi	r3,130
  815a44:	18efd904 	addi	r3,r3,-16540
  815a48:	100491ba 	slli	r2,r2,6
  815a4c:	10c5883a 	add	r2,r2,r3
  815a50:	10c00f04 	addi	r3,r2,60
  815a54:	00800044 	movi	r2,1
  815a58:	18800015 	stw	r2,0(r3)
						active_files[file_record_index].modified = true;
  815a5c:	e0bfeb0f 	ldh	r2,-84(fp)
  815a60:	00c020b4 	movhi	r3,130
  815a64:	18efd904 	addi	r3,r3,-16540
  815a68:	100491ba 	slli	r2,r2,6
  815a6c:	10c5883a 	add	r2,r2,r3
  815a70:	10c00e04 	addi	r3,r2,56
  815a74:	00800044 	movi	r2,1
  815a78:	18800015 	stw	r2,0(r3)
  815a7c:	00000506 	br	815a94 <alt_up_sd_card_fopen+0x388>
					} else {
						/* If file creation fails then return an invalid file handle. */
						file_record_index = -1;
  815a80:	00bfffc4 	movi	r2,-1
  815a84:	e0bfeb0d 	sth	r2,-84(fp)
  815a88:	00000206 	br	815a94 <alt_up_sd_card_fopen+0x388>
					}
				} else {
					/* Otherwise the file could not be opened.*/
					file_record_index = -1;
  815a8c:	00bfffc4 	movi	r2,-1
  815a90:	e0bfeb0d 	sth	r2,-84(fp)
				}
			}
		}
	}

	return file_record_index;
  815a94:	e0bfeb0f 	ldh	r2,-84(fp)
  815a98:	e0bfff15 	stw	r2,-4(fp)
  815a9c:	e0bfff17 	ldw	r2,-4(fp)
}
  815aa0:	e037883a 	mov	sp,fp
  815aa4:	dfc00117 	ldw	ra,4(sp)
  815aa8:	df000017 	ldw	fp,0(sp)
  815aac:	dec00204 	addi	sp,sp,8
  815ab0:	f800283a 	ret

00815ab4 <alt_up_sd_card_set_attributes>:

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  815ab4:	defffd04 	addi	sp,sp,-12
  815ab8:	df000215 	stw	fp,8(sp)
  815abc:	df000204 	addi	fp,sp,8
  815ac0:	e13ffe0d 	sth	r4,-8(fp)
  815ac4:	e17fff0d 	sth	r5,-4(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  815ac8:	e0bffe0f 	ldh	r2,-8(fp)
  815acc:	1004803a 	cmplt	r2,r2,zero
  815ad0:	1000181e 	bne	r2,zero,815b34 <alt_up_sd_card_set_attributes+0x80>
  815ad4:	e0bffe0f 	ldh	r2,-8(fp)
  815ad8:	10800508 	cmpgei	r2,r2,20
  815adc:	1000151e 	bne	r2,zero,815b34 <alt_up_sd_card_set_attributes+0x80>
		if (active_files[file_handle].in_use) {
  815ae0:	e0bffe0f 	ldh	r2,-8(fp)
  815ae4:	00c020b4 	movhi	r3,130
  815ae8:	18efd904 	addi	r3,r3,-16540
  815aec:	100491ba 	slli	r2,r2,6
  815af0:	10c5883a 	add	r2,r2,r3
  815af4:	10800f04 	addi	r2,r2,60
  815af8:	10800017 	ldw	r2,0(r2)
  815afc:	1005003a 	cmpeq	r2,r2,zero
  815b00:	10000c1e 	bne	r2,zero,815b34 <alt_up_sd_card_set_attributes+0x80>
			active_files[file_handle].attributes
  815b04:	e17ffe0f 	ldh	r5,-8(fp)
  815b08:	e0bfff0b 	ldhu	r2,-4(fp)
  815b0c:	1007883a 	mov	r3,r2
  815b10:	00bfffc4 	movi	r2,-1
  815b14:	1884703a 	and	r2,r3,r2
  815b18:	1009883a 	mov	r4,r2
  815b1c:	00c020b4 	movhi	r3,130
  815b20:	18efd904 	addi	r3,r3,-16540
  815b24:	280491ba 	slli	r2,r5,6
  815b28:	10c5883a 	add	r2,r2,r3
  815b2c:	10800204 	addi	r2,r2,8
  815b30:	110000c5 	stb	r4,3(r2)
					= ((char) (attributes & 0x00ff));
		}
	}
}
  815b34:	e037883a 	mov	sp,fp
  815b38:	df000017 	ldw	fp,0(sp)
  815b3c:	dec00104 	addi	sp,sp,4
  815b40:	f800283a 	ret

00815b44 <alt_up_sd_card_get_attributes>:

short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  815b44:	defffd04 	addi	sp,sp,-12
  815b48:	df000215 	stw	fp,8(sp)
  815b4c:	df000204 	addi	fp,sp,8
  815b50:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
  815b54:	00bfffc4 	movi	r2,-1
  815b58:	e0bffe0d 	sth	r2,-8(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  815b5c:	e0bfff0f 	ldh	r2,-4(fp)
  815b60:	1004803a 	cmplt	r2,r2,zero
  815b64:	1000151e 	bne	r2,zero,815bbc <alt_up_sd_card_get_attributes+0x78>
  815b68:	e0bfff0f 	ldh	r2,-4(fp)
  815b6c:	10800508 	cmpgei	r2,r2,20
  815b70:	1000121e 	bne	r2,zero,815bbc <alt_up_sd_card_get_attributes+0x78>
		if (active_files[file_handle].in_use) {
  815b74:	e0bfff0f 	ldh	r2,-4(fp)
  815b78:	00c020b4 	movhi	r3,130
  815b7c:	18efd904 	addi	r3,r3,-16540
  815b80:	100491ba 	slli	r2,r2,6
  815b84:	10c5883a 	add	r2,r2,r3
  815b88:	10800f04 	addi	r2,r2,60
  815b8c:	10800017 	ldw	r2,0(r2)
  815b90:	1005003a 	cmpeq	r2,r2,zero
  815b94:	1000091e 	bne	r2,zero,815bbc <alt_up_sd_card_get_attributes+0x78>
			result = ((active_files[file_handle].attributes) & 0x00ff);
  815b98:	e0bfff0f 	ldh	r2,-4(fp)
  815b9c:	00c020b4 	movhi	r3,130
  815ba0:	18efd904 	addi	r3,r3,-16540
  815ba4:	100491ba 	slli	r2,r2,6
  815ba8:	10c5883a 	add	r2,r2,r3
  815bac:	10800204 	addi	r2,r2,8
  815bb0:	108000c3 	ldbu	r2,3(r2)
  815bb4:	10803fcc 	andi	r2,r2,255
  815bb8:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
  815bbc:	e0bffe0f 	ldh	r2,-8(fp)
}
  815bc0:	e037883a 	mov	sp,fp
  815bc4:	df000017 	ldw	fp,0(sp)
  815bc8:	dec00104 	addi	sp,sp,4
  815bcc:	f800283a 	ret

00815bd0 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
  815bd0:	defffa04 	addi	sp,sp,-24
  815bd4:	dfc00515 	stw	ra,20(sp)
  815bd8:	df000415 	stw	fp,16(sp)
  815bdc:	df000404 	addi	fp,sp,16
  815be0:	e13ffe0d 	sth	r4,-8(fp)
	short int ch = -1;
  815be4:	00bfffc4 	movi	r2,-1
  815be8:	e0bffd0d 	sth	r2,-12(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  815bec:	e0bffe0f 	ldh	r2,-8(fp)
  815bf0:	1004803a 	cmplt	r2,r2,zero
  815bf4:	1000d31e 	bne	r2,zero,815f44 <alt_up_sd_card_read+0x374>
  815bf8:	e0bffe0f 	ldh	r2,-8(fp)
  815bfc:	10800508 	cmpgei	r2,r2,20
  815c00:	1000d01e 	bne	r2,zero,815f44 <alt_up_sd_card_read+0x374>
		if (active_files[file_handle].in_use) {
  815c04:	e0bffe0f 	ldh	r2,-8(fp)
  815c08:	00c020b4 	movhi	r3,130
  815c0c:	18efd904 	addi	r3,r3,-16540
  815c10:	100491ba 	slli	r2,r2,6
  815c14:	10c5883a 	add	r2,r2,r3
  815c18:	10800f04 	addi	r2,r2,60
  815c1c:	10800017 	ldw	r2,0(r2)
  815c20:	1005003a 	cmpeq	r2,r2,zero
  815c24:	1000c71e 	bne	r2,zero,815f44 <alt_up_sd_card_read+0x374>
			if (active_files[file_handle].current_byte_position
  815c28:	e0bffe0f 	ldh	r2,-8(fp)
  815c2c:	00c020b4 	movhi	r3,130
  815c30:	18efd904 	addi	r3,r3,-16540
  815c34:	100491ba 	slli	r2,r2,6
  815c38:	10c5883a 	add	r2,r2,r3
  815c3c:	10800904 	addi	r2,r2,36
  815c40:	11000017 	ldw	r4,0(r2)
  815c44:	e0bffe0f 	ldh	r2,-8(fp)
  815c48:	00c020b4 	movhi	r3,130
  815c4c:	18efd904 	addi	r3,r3,-16540
  815c50:	100491ba 	slli	r2,r2,6
  815c54:	10c5883a 	add	r2,r2,r3
  815c58:	10800604 	addi	r2,r2,24
  815c5c:	10800017 	ldw	r2,0(r2)
  815c60:	2080b82e 	bgeu	r4,r2,815f44 <alt_up_sd_card_read+0x374>
					< active_files[file_handle].file_size_in_bytes) {
				int data_sector = boot_sector_data.data_sector_offset
						+ (active_files[file_handle].current_cluster_index - 2)
								* boot_sector_data.sectors_per_cluster
						+ active_files[file_handle].current_sector_in_cluster;
  815c64:	008020b4 	movhi	r2,130
  815c68:	10afc404 	addi	r2,r2,-16624
  815c6c:	11001417 	ldw	r4,80(r2)
  815c70:	e0bffe0f 	ldh	r2,-8(fp)
  815c74:	00c020b4 	movhi	r3,130
  815c78:	18efd904 	addi	r3,r3,-16540
  815c7c:	100491ba 	slli	r2,r2,6
  815c80:	10c5883a 	add	r2,r2,r3
  815c84:	10800704 	addi	r2,r2,28
  815c88:	10800017 	ldw	r2,0(r2)
  815c8c:	10ffff84 	addi	r3,r2,-2
  815c90:	008020b4 	movhi	r2,130
  815c94:	10afc404 	addi	r2,r2,-16624
  815c98:	10800383 	ldbu	r2,14(r2)
  815c9c:	10803fcc 	andi	r2,r2,255
  815ca0:	1885383a 	mul	r2,r3,r2
  815ca4:	2089883a 	add	r4,r4,r2
  815ca8:	e0bffe0f 	ldh	r2,-8(fp)
  815cac:	00c020b4 	movhi	r3,130
  815cb0:	18efd904 	addi	r3,r3,-16540
  815cb4:	100491ba 	slli	r2,r2,6
  815cb8:	10c5883a 	add	r2,r2,r3
  815cbc:	10800804 	addi	r2,r2,32
  815cc0:	10800017 	ldw	r2,0(r2)
  815cc4:	2085883a 	add	r2,r4,r2
  815cc8:	e0bffc15 	stw	r2,-16(fp)

				if ((active_files[file_handle].current_byte_position > 0)
  815ccc:	e0bffe0f 	ldh	r2,-8(fp)
  815cd0:	00c020b4 	movhi	r3,130
  815cd4:	18efd904 	addi	r3,r3,-16540
  815cd8:	100491ba 	slli	r2,r2,6
  815cdc:	10c5883a 	add	r2,r2,r3
  815ce0:	10800904 	addi	r2,r2,36
  815ce4:	10800017 	ldw	r2,0(r2)
  815ce8:	1005003a 	cmpeq	r2,r2,zero
  815cec:	10006a1e 	bne	r2,zero,815e98 <alt_up_sd_card_read+0x2c8>
  815cf0:	e0bffe0f 	ldh	r2,-8(fp)
  815cf4:	00c020b4 	movhi	r3,130
  815cf8:	18efd904 	addi	r3,r3,-16540
  815cfc:	100491ba 	slli	r2,r2,6
  815d00:	10c5883a 	add	r2,r2,r3
  815d04:	10800904 	addi	r2,r2,36
  815d08:	10800017 	ldw	r2,0(r2)
  815d0c:	10807fcc 	andi	r2,r2,511
  815d10:	1004c03a 	cmpne	r2,r2,zero
  815d14:	1000601e 	bne	r2,zero,815e98 <alt_up_sd_card_read+0x2c8>
						&& ((active_files[file_handle].current_byte_position
								% 512) == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
  815d18:	e0bffe0f 	ldh	r2,-8(fp)
  815d1c:	00c020b4 	movhi	r3,130
  815d20:	18efd904 	addi	r3,r3,-16540
  815d24:	100491ba 	slli	r2,r2,6
  815d28:	10c5883a 	add	r2,r2,r3
  815d2c:	10800804 	addi	r2,r2,32
  815d30:	10c00017 	ldw	r3,0(r2)
  815d34:	008020b4 	movhi	r2,130
  815d38:	10afc404 	addi	r2,r2,-16624
  815d3c:	10800383 	ldbu	r2,14(r2)
  815d40:	10803fcc 	andi	r2,r2,255
  815d44:	10bfffc4 	addi	r2,r2,-1
  815d48:	1880411e 	bne	r3,r2,815e50 <alt_up_sd_card_read+0x280>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
  815d4c:	e0bffe0f 	ldh	r2,-8(fp)
  815d50:	00c020b4 	movhi	r3,130
  815d54:	18efd904 	addi	r3,r3,-16540
  815d58:	100491ba 	slli	r2,r2,6
  815d5c:	10c5883a 	add	r2,r2,r3
  815d60:	10800704 	addi	r2,r2,28
  815d64:	11000017 	ldw	r4,0(r2)
  815d68:	e17ffd84 	addi	r5,fp,-10
  815d6c:	08125340 	call	812534 <get_cluster_flag>
  815d70:	1005003a 	cmpeq	r2,r2,zero
  815d74:	1000331e 	bne	r2,zero,815e44 <alt_up_sd_card_read+0x274>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
  815d78:	e0bffd8b 	ldhu	r2,-10(fp)
  815d7c:	10bfffcc 	andi	r2,r2,65535
  815d80:	10fffe0c 	andi	r3,r2,65528
  815d84:	00bffe14 	movui	r2,65528
  815d88:	1880031e 	bne	r3,r2,815d98 <alt_up_sd_card_read+0x1c8>
								/* End of file */
								return -1;
  815d8c:	00bfffc4 	movi	r2,-1
  815d90:	e0bfff15 	stw	r2,-4(fp)
  815d94:	00006d06 	br	815f4c <alt_up_sd_card_read+0x37c>
							} else {
								active_files[file_handle].current_cluster_index
  815d98:	e13ffe0f 	ldh	r4,-8(fp)
  815d9c:	e0bffd8b 	ldhu	r2,-10(fp)
  815da0:	117fffcc 	andi	r5,r2,65535
  815da4:	00c020b4 	movhi	r3,130
  815da8:	18efd904 	addi	r3,r3,-16540
  815dac:	200491ba 	slli	r2,r4,6
  815db0:	10c5883a 	add	r2,r2,r3
  815db4:	10800704 	addi	r2,r2,28
  815db8:	11400015 	stw	r5,0(r2)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
  815dbc:	e0bffe0f 	ldh	r2,-8(fp)
  815dc0:	00c020b4 	movhi	r3,130
  815dc4:	18efd904 	addi	r3,r3,-16540
  815dc8:	100491ba 	slli	r2,r2,6
  815dcc:	10c5883a 	add	r2,r2,r3
  815dd0:	10800804 	addi	r2,r2,32
  815dd4:	10000015 	stw	zero,0(r2)
										= 0;
								data_sector
  815dd8:	008020b4 	movhi	r2,130
  815ddc:	10afc404 	addi	r2,r2,-16624
  815de0:	11001417 	ldw	r4,80(r2)
  815de4:	e0bffe0f 	ldh	r2,-8(fp)
  815de8:	00c020b4 	movhi	r3,130
  815dec:	18efd904 	addi	r3,r3,-16540
  815df0:	100491ba 	slli	r2,r2,6
  815df4:	10c5883a 	add	r2,r2,r3
  815df8:	10800704 	addi	r2,r2,28
  815dfc:	10800017 	ldw	r2,0(r2)
  815e00:	10ffff84 	addi	r3,r2,-2
  815e04:	008020b4 	movhi	r2,130
  815e08:	10afc404 	addi	r2,r2,-16624
  815e0c:	10800383 	ldbu	r2,14(r2)
  815e10:	10803fcc 	andi	r2,r2,255
  815e14:	1885383a 	mul	r2,r3,r2
  815e18:	2089883a 	add	r4,r4,r2
  815e1c:	e0bffe0f 	ldh	r2,-8(fp)
  815e20:	00c020b4 	movhi	r3,130
  815e24:	18efd904 	addi	r3,r3,-16540
  815e28:	100491ba 	slli	r2,r2,6
  815e2c:	10c5883a 	add	r2,r2,r3
  815e30:	10800804 	addi	r2,r2,32
  815e34:	10800017 	ldw	r2,0(r2)
  815e38:	2085883a 	add	r2,r4,r2
  815e3c:	e0bffc15 	stw	r2,-16(fp)
  815e40:	00001506 	br	815e98 <alt_up_sd_card_read+0x2c8>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return -2;
  815e44:	00bfff84 	movi	r2,-2
  815e48:	e0bfff15 	stw	r2,-4(fp)
  815e4c:	00003f06 	br	815f4c <alt_up_sd_card_read+0x37c>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
  815e50:	e17ffe0f 	ldh	r5,-8(fp)
  815e54:	e0bffe0f 	ldh	r2,-8(fp)
  815e58:	00c020b4 	movhi	r3,130
  815e5c:	18efd904 	addi	r3,r3,-16540
  815e60:	100491ba 	slli	r2,r2,6
  815e64:	10c5883a 	add	r2,r2,r3
  815e68:	10800804 	addi	r2,r2,32
  815e6c:	10800017 	ldw	r2,0(r2)
  815e70:	11000044 	addi	r4,r2,1
  815e74:	00c020b4 	movhi	r3,130
  815e78:	18efd904 	addi	r3,r3,-16540
  815e7c:	280491ba 	slli	r2,r5,6
  815e80:	10c5883a 	add	r2,r2,r3
  815e84:	10800804 	addi	r2,r2,32
  815e88:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
  815e8c:	e0bffc17 	ldw	r2,-16(fp)
  815e90:	10800044 	addi	r2,r2,1
  815e94:	e0bffc15 	stw	r2,-16(fp)
					}
				}
				// Reading te first byte of the file.
				if (current_sector_index != (data_sector
  815e98:	d0e72217 	ldw	r3,-25464(gp)
  815e9c:	e0bffc17 	ldw	r2,-16(fp)
  815ea0:	1885883a 	add	r2,r3,r2
  815ea4:	1007883a 	mov	r3,r2
  815ea8:	d0a72617 	ldw	r2,-25448(gp)
  815eac:	18800826 	beq	r3,r2,815ed0 <alt_up_sd_card_read+0x300>
						+ fat_partition_offset_in_512_byte_sectors)) {
					if (!Read_Sector_Data(data_sector,
  815eb0:	d1672217 	ldw	r5,-25464(gp)
  815eb4:	e13ffc17 	ldw	r4,-16(fp)
  815eb8:	08124380 	call	812438 <Read_Sector_Data>
  815ebc:	1004c03a 	cmpne	r2,r2,zero
  815ec0:	1000031e 	bne	r2,zero,815ed0 <alt_up_sd_card_read+0x300>
							fat_partition_offset_in_512_byte_sectors)) {
						return -2;
  815ec4:	00bfff84 	movi	r2,-2
  815ec8:	e0bfff15 	stw	r2,-4(fp)
  815ecc:	00001f06 	br	815f4c <alt_up_sd_card_read+0x37c>
					}
				}

				ch
  815ed0:	e0bffe0f 	ldh	r2,-8(fp)
  815ed4:	00c020b4 	movhi	r3,130
  815ed8:	18efd904 	addi	r3,r3,-16540
  815edc:	100491ba 	slli	r2,r2,6
  815ee0:	10c5883a 	add	r2,r2,r3
  815ee4:	10800904 	addi	r2,r2,36
  815ee8:	10800017 	ldw	r2,0(r2)
  815eec:	10807fcc 	andi	r2,r2,511
  815ef0:	1007883a 	mov	r3,r2
  815ef4:	d0a72117 	ldw	r2,-25468(gp)
  815ef8:	1885883a 	add	r2,r3,r2
  815efc:	10800023 	ldbuio	r2,0(r2)
  815f00:	10803fcc 	andi	r2,r2,255
  815f04:	e0bffd0d 	sth	r2,-12(fp)
						= (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
				active_files[file_handle].current_byte_position
  815f08:	e17ffe0f 	ldh	r5,-8(fp)
  815f0c:	e0bffe0f 	ldh	r2,-8(fp)
  815f10:	00c020b4 	movhi	r3,130
  815f14:	18efd904 	addi	r3,r3,-16540
  815f18:	100491ba 	slli	r2,r2,6
  815f1c:	10c5883a 	add	r2,r2,r3
  815f20:	10800904 	addi	r2,r2,36
  815f24:	10800017 	ldw	r2,0(r2)
  815f28:	11000044 	addi	r4,r2,1
  815f2c:	00c020b4 	movhi	r3,130
  815f30:	18efd904 	addi	r3,r3,-16540
  815f34:	280491ba 	slli	r2,r5,6
  815f38:	10c5883a 	add	r2,r2,r3
  815f3c:	10800904 	addi	r2,r2,36
  815f40:	11000015 	stw	r4,0(r2)
						= active_files[file_handle].current_byte_position + 1;
			}
		}
	}

	return ch;
  815f44:	e0bffd0f 	ldh	r2,-12(fp)
  815f48:	e0bfff15 	stw	r2,-4(fp)
  815f4c:	e0bfff17 	ldw	r2,-4(fp)
}
  815f50:	e037883a 	mov	sp,fp
  815f54:	dfc00117 	ldw	ra,4(sp)
  815f58:	df000017 	ldw	fp,0(sp)
  815f5c:	dec00204 	addi	sp,sp,8
  815f60:	f800283a 	ret

00815f64 <alt_up_sd_card_write>:

bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
  815f64:	defff504 	addi	sp,sp,-44
  815f68:	dfc00a15 	stw	ra,40(sp)
  815f6c:	df000915 	stw	fp,36(sp)
  815f70:	dc000815 	stw	r16,32(sp)
  815f74:	df000804 	addi	fp,sp,32
  815f78:	e13ffd0d 	sth	r4,-12(fp)
  815f7c:	e17ffe05 	stb	r5,-8(fp)
	bool result = false;
  815f80:	e03ffa15 	stw	zero,-24(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  815f84:	e0bffd0f 	ldh	r2,-12(fp)
  815f88:	1004803a 	cmplt	r2,r2,zero
  815f8c:	1001751e 	bne	r2,zero,816564 <alt_up_sd_card_write+0x600>
  815f90:	e0bffd0f 	ldh	r2,-12(fp)
  815f94:	10800508 	cmpgei	r2,r2,20
  815f98:	1001721e 	bne	r2,zero,816564 <alt_up_sd_card_write+0x600>
		if (active_files[file_handle].in_use) {
  815f9c:	e0bffd0f 	ldh	r2,-12(fp)
  815fa0:	00c020b4 	movhi	r3,130
  815fa4:	18efd904 	addi	r3,r3,-16540
  815fa8:	100491ba 	slli	r2,r2,6
  815fac:	10c5883a 	add	r2,r2,r3
  815fb0:	10800f04 	addi	r2,r2,60
  815fb4:	10800017 	ldw	r2,0(r2)
  815fb8:	1005003a 	cmpeq	r2,r2,zero
  815fbc:	1001691e 	bne	r2,zero,816564 <alt_up_sd_card_write+0x600>
			int data_sector = boot_sector_data.data_sector_offset
					+ (active_files[file_handle].current_cluster_index - 2)
							* boot_sector_data.sectors_per_cluster
					+ active_files[file_handle].current_sector_in_cluster;
  815fc0:	008020b4 	movhi	r2,130
  815fc4:	10afc404 	addi	r2,r2,-16624
  815fc8:	11001417 	ldw	r4,80(r2)
  815fcc:	e0bffd0f 	ldh	r2,-12(fp)
  815fd0:	00c020b4 	movhi	r3,130
  815fd4:	18efd904 	addi	r3,r3,-16540
  815fd8:	100491ba 	slli	r2,r2,6
  815fdc:	10c5883a 	add	r2,r2,r3
  815fe0:	10800704 	addi	r2,r2,28
  815fe4:	10800017 	ldw	r2,0(r2)
  815fe8:	10ffff84 	addi	r3,r2,-2
  815fec:	008020b4 	movhi	r2,130
  815ff0:	10afc404 	addi	r2,r2,-16624
  815ff4:	10800383 	ldbu	r2,14(r2)
  815ff8:	10803fcc 	andi	r2,r2,255
  815ffc:	1885383a 	mul	r2,r3,r2
  816000:	2089883a 	add	r4,r4,r2
  816004:	e0bffd0f 	ldh	r2,-12(fp)
  816008:	00c020b4 	movhi	r3,130
  81600c:	18efd904 	addi	r3,r3,-16540
  816010:	100491ba 	slli	r2,r2,6
  816014:	10c5883a 	add	r2,r2,r3
  816018:	10800804 	addi	r2,r2,32
  81601c:	10800017 	ldw	r2,0(r2)
  816020:	2085883a 	add	r2,r4,r2
  816024:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset =
					active_files[file_handle].current_byte_position
							% boot_sector_data.sector_size_in_bytes;
  816028:	e0bffd0f 	ldh	r2,-12(fp)
  81602c:	00c020b4 	movhi	r3,130
  816030:	18efd904 	addi	r3,r3,-16540
  816034:	100491ba 	slli	r2,r2,6
  816038:	10c5883a 	add	r2,r2,r3
  81603c:	10800904 	addi	r2,r2,36
  816040:	11000017 	ldw	r4,0(r2)
  816044:	008020b4 	movhi	r2,130
  816048:	10afc404 	addi	r2,r2,-16624
  81604c:	1080030b 	ldhu	r2,12(r2)
  816050:	117fffcc 	andi	r5,r2,65535
  816054:	0804cc40 	call	804cc4 <__umodsi3>
  816058:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position
  81605c:	e0bffd0f 	ldh	r2,-12(fp)
  816060:	00c020b4 	movhi	r3,130
  816064:	18efd904 	addi	r3,r3,-16540
  816068:	100491ba 	slli	r2,r2,6
  81606c:	10c5883a 	add	r2,r2,r3
  816070:	10800904 	addi	r2,r2,36
  816074:	11000017 	ldw	r4,0(r2)
  816078:	e0bffd0f 	ldh	r2,-12(fp)
  81607c:	00c020b4 	movhi	r3,130
  816080:	18efd904 	addi	r3,r3,-16540
  816084:	100491ba 	slli	r2,r2,6
  816088:	10c5883a 	add	r2,r2,r3
  81608c:	10800604 	addi	r2,r2,24
  816090:	10800017 	ldw	r2,0(r2)
  816094:	2080682e 	bgeu	r4,r2,816238 <alt_up_sd_card_write+0x2d4>
					< active_files[file_handle].file_size_in_bytes) {
				if ((active_files[file_handle].current_byte_position > 0)
  816098:	e0bffd0f 	ldh	r2,-12(fp)
  81609c:	00c020b4 	movhi	r3,130
  8160a0:	18efd904 	addi	r3,r3,-16540
  8160a4:	100491ba 	slli	r2,r2,6
  8160a8:	10c5883a 	add	r2,r2,r3
  8160ac:	10800904 	addi	r2,r2,36
  8160b0:	10800017 	ldw	r2,0(r2)
  8160b4:	1005003a 	cmpeq	r2,r2,zero
  8160b8:	1000de1e 	bne	r2,zero,816434 <alt_up_sd_card_write+0x4d0>
  8160bc:	e0bff80f 	ldh	r2,-32(fp)
  8160c0:	1004c03a 	cmpne	r2,r2,zero
  8160c4:	1000db1e 	bne	r2,zero,816434 <alt_up_sd_card_write+0x4d0>
						&& (buffer_offset == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
  8160c8:	e0bffd0f 	ldh	r2,-12(fp)
  8160cc:	00c020b4 	movhi	r3,130
  8160d0:	18efd904 	addi	r3,r3,-16540
  8160d4:	100491ba 	slli	r2,r2,6
  8160d8:	10c5883a 	add	r2,r2,r3
  8160dc:	10800804 	addi	r2,r2,32
  8160e0:	10c00017 	ldw	r3,0(r2)
  8160e4:	008020b4 	movhi	r2,130
  8160e8:	10afc404 	addi	r2,r2,-16624
  8160ec:	10800383 	ldbu	r2,14(r2)
  8160f0:	10803fcc 	andi	r2,r2,255
  8160f4:	10bfffc4 	addi	r2,r2,-1
  8160f8:	18803c1e 	bne	r3,r2,8161ec <alt_up_sd_card_write+0x288>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
  8160fc:	e0bffd0f 	ldh	r2,-12(fp)
  816100:	00c020b4 	movhi	r3,130
  816104:	18efd904 	addi	r3,r3,-16540
  816108:	100491ba 	slli	r2,r2,6
  81610c:	10c5883a 	add	r2,r2,r3
  816110:	10800704 	addi	r2,r2,28
  816114:	11000017 	ldw	r4,0(r2)
  816118:	e17ffb04 	addi	r5,fp,-20
  81611c:	08125340 	call	812534 <get_cluster_flag>
  816120:	1005003a 	cmpeq	r2,r2,zero
  816124:	10002f1e 	bne	r2,zero,8161e4 <alt_up_sd_card_write+0x280>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if (next_cluster < 0x0000fff8) {
  816128:	e0bffb0b 	ldhu	r2,-20(fp)
  81612c:	10ffffcc 	andi	r3,r2,65535
  816130:	00bffdd4 	movui	r2,65527
  816134:	10c0bf36 	bltu	r2,r3,816434 <alt_up_sd_card_write+0x4d0>
								active_files[file_handle].current_cluster_index
  816138:	e13ffd0f 	ldh	r4,-12(fp)
  81613c:	e0bffb0b 	ldhu	r2,-20(fp)
  816140:	117fffcc 	andi	r5,r2,65535
  816144:	00c020b4 	movhi	r3,130
  816148:	18efd904 	addi	r3,r3,-16540
  81614c:	200491ba 	slli	r2,r4,6
  816150:	10c5883a 	add	r2,r2,r3
  816154:	10800704 	addi	r2,r2,28
  816158:	11400015 	stw	r5,0(r2)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
  81615c:	e0bffd0f 	ldh	r2,-12(fp)
  816160:	00c020b4 	movhi	r3,130
  816164:	18efd904 	addi	r3,r3,-16540
  816168:	100491ba 	slli	r2,r2,6
  81616c:	10c5883a 	add	r2,r2,r3
  816170:	10800804 	addi	r2,r2,32
  816174:	10000015 	stw	zero,0(r2)
										= 0;
								data_sector
  816178:	008020b4 	movhi	r2,130
  81617c:	10afc404 	addi	r2,r2,-16624
  816180:	11001417 	ldw	r4,80(r2)
  816184:	e0bffd0f 	ldh	r2,-12(fp)
  816188:	00c020b4 	movhi	r3,130
  81618c:	18efd904 	addi	r3,r3,-16540
  816190:	100491ba 	slli	r2,r2,6
  816194:	10c5883a 	add	r2,r2,r3
  816198:	10800704 	addi	r2,r2,28
  81619c:	10800017 	ldw	r2,0(r2)
  8161a0:	10ffff84 	addi	r3,r2,-2
  8161a4:	008020b4 	movhi	r2,130
  8161a8:	10afc404 	addi	r2,r2,-16624
  8161ac:	10800383 	ldbu	r2,14(r2)
  8161b0:	10803fcc 	andi	r2,r2,255
  8161b4:	1885383a 	mul	r2,r3,r2
  8161b8:	2089883a 	add	r4,r4,r2
  8161bc:	e0bffd0f 	ldh	r2,-12(fp)
  8161c0:	00c020b4 	movhi	r3,130
  8161c4:	18efd904 	addi	r3,r3,-16540
  8161c8:	100491ba 	slli	r2,r2,6
  8161cc:	10c5883a 	add	r2,r2,r3
  8161d0:	10800804 	addi	r2,r2,32
  8161d4:	10800017 	ldw	r2,0(r2)
  8161d8:	2085883a 	add	r2,r4,r2
  8161dc:	e0bff915 	stw	r2,-28(fp)
  8161e0:	00009406 	br	816434 <alt_up_sd_card_write+0x4d0>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return false;
  8161e4:	e03fff15 	stw	zero,-4(fp)
  8161e8:	0000e006 	br	81656c <alt_up_sd_card_write+0x608>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
  8161ec:	e17ffd0f 	ldh	r5,-12(fp)
  8161f0:	e0bffd0f 	ldh	r2,-12(fp)
  8161f4:	00c020b4 	movhi	r3,130
  8161f8:	18efd904 	addi	r3,r3,-16540
  8161fc:	100491ba 	slli	r2,r2,6
  816200:	10c5883a 	add	r2,r2,r3
  816204:	10800804 	addi	r2,r2,32
  816208:	10800017 	ldw	r2,0(r2)
  81620c:	11000044 	addi	r4,r2,1
  816210:	00c020b4 	movhi	r3,130
  816214:	18efd904 	addi	r3,r3,-16540
  816218:	280491ba 	slli	r2,r5,6
  81621c:	10c5883a 	add	r2,r2,r3
  816220:	10800804 	addi	r2,r2,32
  816224:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
  816228:	e0bff917 	ldw	r2,-28(fp)
  81622c:	10800044 	addi	r2,r2,1
  816230:	e0bff915 	stw	r2,-28(fp)
  816234:	00007f06 	br	816434 <alt_up_sd_card_write+0x4d0>
					}
				}
			} else {
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0)
  816238:	e0bffd0f 	ldh	r2,-12(fp)
  81623c:	00c020b4 	movhi	r3,130
  816240:	18efd904 	addi	r3,r3,-16540
  816244:	100491ba 	slli	r2,r2,6
  816248:	10c5883a 	add	r2,r2,r3
  81624c:	10800904 	addi	r2,r2,36
  816250:	10800017 	ldw	r2,0(r2)
  816254:	1005003a 	cmpeq	r2,r2,zero
  816258:	1000761e 	bne	r2,zero,816434 <alt_up_sd_card_write+0x4d0>
  81625c:	e0bff80f 	ldh	r2,-32(fp)
  816260:	1004c03a 	cmpne	r2,r2,zero
  816264:	1000731e 	bne	r2,zero,816434 <alt_up_sd_card_write+0x4d0>
						&& (buffer_offset == 0)) {
					if (active_files[file_handle].current_sector_in_cluster
  816268:	e0bffd0f 	ldh	r2,-12(fp)
  81626c:	00c020b4 	movhi	r3,130
  816270:	18efd904 	addi	r3,r3,-16540
  816274:	100491ba 	slli	r2,r2,6
  816278:	10c5883a 	add	r2,r2,r3
  81627c:	10800804 	addi	r2,r2,32
  816280:	10c00017 	ldw	r3,0(r2)
  816284:	008020b4 	movhi	r2,130
  816288:	10afc404 	addi	r2,r2,-16624
  81628c:	10800383 	ldbu	r2,14(r2)
  816290:	10803fcc 	andi	r2,r2,255
  816294:	10bfffc4 	addi	r2,r2,-1
  816298:	1880381e 	bne	r3,r2,81637c <alt_up_sd_card_write+0x418>
							== boot_sector_data.sectors_per_cluster - 1) {
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number)) {
  81629c:	e13ffc04 	addi	r4,fp,-16
  8162a0:	081458c0 	call	81458c <find_first_empty_cluster>
  8162a4:	1005003a 	cmpeq	r2,r2,zero
  8162a8:	1000321e 	bne	r2,zero,816374 <alt_up_sd_card_write+0x410>
							// mark clusters in both File Allocation Tables.
							mark_cluster(
  8162ac:	e0bffd0f 	ldh	r2,-12(fp)
  8162b0:	00c020b4 	movhi	r3,130
  8162b4:	18efd904 	addi	r3,r3,-16540
  8162b8:	100491ba 	slli	r2,r2,6
  8162bc:	10c5883a 	add	r2,r2,r3
  8162c0:	10800704 	addi	r2,r2,28
  8162c4:	11000017 	ldw	r4,0(r2)
  8162c8:	e0bffc17 	ldw	r2,-16(fp)
  8162cc:	117fffcc 	andi	r5,r2,65535
  8162d0:	2960001c 	xori	r5,r5,32768
  8162d4:	29600004 	addi	r5,r5,-32768
  8162d8:	01800044 	movi	r6,1
  8162dc:	08125ec0 	call	8125ec <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
  8162e0:	e13ffc17 	ldw	r4,-16(fp)
  8162e4:	017fffc4 	movi	r5,-1
  8162e8:	01800044 	movi	r6,1
  8162ec:	08125ec0 	call	8125ec <mark_cluster>
							mark_cluster(
  8162f0:	e0bffd0f 	ldh	r2,-12(fp)
  8162f4:	00c020b4 	movhi	r3,130
  8162f8:	18efd904 	addi	r3,r3,-16540
  8162fc:	100491ba 	slli	r2,r2,6
  816300:	10c5883a 	add	r2,r2,r3
  816304:	10800704 	addi	r2,r2,28
  816308:	11000017 	ldw	r4,0(r2)
  81630c:	e0bffc17 	ldw	r2,-16(fp)
  816310:	117fffcc 	andi	r5,r2,65535
  816314:	2960001c 	xori	r5,r5,32768
  816318:	29600004 	addi	r5,r5,-32768
  81631c:	000d883a 	mov	r6,zero
  816320:	08125ec0 	call	8125ec <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
  816324:	e13ffc17 	ldw	r4,-16(fp)
  816328:	017fffc4 	movi	r5,-1
  81632c:	000d883a 	mov	r6,zero
  816330:	08125ec0 	call	8125ec <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index
  816334:	e0bffd0f 	ldh	r2,-12(fp)
  816338:	e13ffc17 	ldw	r4,-16(fp)
  81633c:	00c020b4 	movhi	r3,130
  816340:	18efd904 	addi	r3,r3,-16540
  816344:	100491ba 	slli	r2,r2,6
  816348:	10c5883a 	add	r2,r2,r3
  81634c:	10800704 	addi	r2,r2,28
  816350:	11000015 	stw	r4,0(r2)
									= cluster_number;
							active_files[file_handle].current_sector_in_cluster
  816354:	e0bffd0f 	ldh	r2,-12(fp)
  816358:	00c020b4 	movhi	r3,130
  81635c:	18efd904 	addi	r3,r3,-16540
  816360:	100491ba 	slli	r2,r2,6
  816364:	10c5883a 	add	r2,r2,r3
  816368:	10800804 	addi	r2,r2,32
  81636c:	10000015 	stw	zero,0(r2)
  816370:	00001606 	br	8163cc <alt_up_sd_card_write+0x468>
									= 0;
						} else {
							return false;
  816374:	e03fff15 	stw	zero,-4(fp)
  816378:	00007c06 	br	81656c <alt_up_sd_card_write+0x608>
						}
					} else {
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster
  81637c:	e43ffd0f 	ldh	r16,-12(fp)
  816380:	e0bffd0f 	ldh	r2,-12(fp)
  816384:	00c020b4 	movhi	r3,130
  816388:	18efd904 	addi	r3,r3,-16540
  81638c:	100491ba 	slli	r2,r2,6
  816390:	10c5883a 	add	r2,r2,r3
  816394:	10800904 	addi	r2,r2,36
  816398:	11000017 	ldw	r4,0(r2)
  81639c:	008020b4 	movhi	r2,130
  8163a0:	10afc404 	addi	r2,r2,-16624
  8163a4:	1080030b 	ldhu	r2,12(r2)
  8163a8:	117fffcc 	andi	r5,r2,65535
  8163ac:	0804cbc0 	call	804cbc <__udivsi3>
  8163b0:	1009883a 	mov	r4,r2
  8163b4:	00c020b4 	movhi	r3,130
  8163b8:	18efd904 	addi	r3,r3,-16540
  8163bc:	800491ba 	slli	r2,r16,6
  8163c0:	10c5883a 	add	r2,r2,r3
  8163c4:	10800804 	addi	r2,r2,32
  8163c8:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_byte_position
										/ boot_sector_data.sector_size_in_bytes;
					}
					data_sector
  8163cc:	008020b4 	movhi	r2,130
  8163d0:	10afc404 	addi	r2,r2,-16624
  8163d4:	11001417 	ldw	r4,80(r2)
  8163d8:	e0bffd0f 	ldh	r2,-12(fp)
  8163dc:	00c020b4 	movhi	r3,130
  8163e0:	18efd904 	addi	r3,r3,-16540
  8163e4:	100491ba 	slli	r2,r2,6
  8163e8:	10c5883a 	add	r2,r2,r3
  8163ec:	10800704 	addi	r2,r2,28
  8163f0:	10800017 	ldw	r2,0(r2)
  8163f4:	10ffff84 	addi	r3,r2,-2
  8163f8:	008020b4 	movhi	r2,130
  8163fc:	10afc404 	addi	r2,r2,-16624
  816400:	10800383 	ldbu	r2,14(r2)
  816404:	10803fcc 	andi	r2,r2,255
  816408:	1885383a 	mul	r2,r3,r2
  81640c:	2089883a 	add	r4,r4,r2
  816410:	e0bffd0f 	ldh	r2,-12(fp)
  816414:	00c020b4 	movhi	r3,130
  816418:	18efd904 	addi	r3,r3,-16540
  81641c:	100491ba 	slli	r2,r2,6
  816420:	10c5883a 	add	r2,r2,r3
  816424:	10800804 	addi	r2,r2,32
  816428:	10800017 	ldw	r2,0(r2)
  81642c:	2085883a 	add	r2,r4,r2
  816430:	e0bff915 	stw	r2,-28(fp)
									+ active_files[file_handle].current_sector_in_cluster;
				}
			}
			// Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
			if (current_sector_index != data_sector
  816434:	d0e72217 	ldw	r3,-25464(gp)
  816438:	e0bff917 	ldw	r2,-28(fp)
  81643c:	1885883a 	add	r2,r3,r2
  816440:	1007883a 	mov	r3,r2
  816444:	d0a72617 	ldw	r2,-25448(gp)
  816448:	18800726 	beq	r3,r2,816468 <alt_up_sd_card_write+0x504>
					+ fat_partition_offset_in_512_byte_sectors) {
				if (!Read_Sector_Data(data_sector,
  81644c:	d1672217 	ldw	r5,-25464(gp)
  816450:	e13ff917 	ldw	r4,-28(fp)
  816454:	08124380 	call	812438 <Read_Sector_Data>
  816458:	1004c03a 	cmpne	r2,r2,zero
  81645c:	1000021e 	bne	r2,zero,816468 <alt_up_sd_card_write+0x504>
						fat_partition_offset_in_512_byte_sectors)) {
					return false;
  816460:	e03fff15 	stw	zero,-4(fp)
  816464:	00004106 	br	81656c <alt_up_sd_card_write+0x608>
				}
			}
			// Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
  816468:	e0bff80f 	ldh	r2,-32(fp)
  81646c:	1007883a 	mov	r3,r2
  816470:	d0a72117 	ldw	r2,-25468(gp)
  816474:	1885883a 	add	r2,r3,r2
  816478:	e0fffe07 	ldb	r3,-8(fp)
  81647c:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position
  816480:	e17ffd0f 	ldh	r5,-12(fp)
  816484:	e0bffd0f 	ldh	r2,-12(fp)
  816488:	00c020b4 	movhi	r3,130
  81648c:	18efd904 	addi	r3,r3,-16540
  816490:	100491ba 	slli	r2,r2,6
  816494:	10c5883a 	add	r2,r2,r3
  816498:	10800904 	addi	r2,r2,36
  81649c:	10800017 	ldw	r2,0(r2)
  8164a0:	11000044 	addi	r4,r2,1
  8164a4:	00c020b4 	movhi	r3,130
  8164a8:	18efd904 	addi	r3,r3,-16540
  8164ac:	280491ba 	slli	r2,r5,6
  8164b0:	10c5883a 	add	r2,r2,r3
  8164b4:	10800904 	addi	r2,r2,36
  8164b8:	11000015 	stw	r4,0(r2)
					= active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position
  8164bc:	e0bffd0f 	ldh	r2,-12(fp)
  8164c0:	00c020b4 	movhi	r3,130
  8164c4:	18efd904 	addi	r3,r3,-16540
  8164c8:	100491ba 	slli	r2,r2,6
  8164cc:	10c5883a 	add	r2,r2,r3
  8164d0:	10800904 	addi	r2,r2,36
  8164d4:	11000017 	ldw	r4,0(r2)
  8164d8:	e0bffd0f 	ldh	r2,-12(fp)
  8164dc:	00c020b4 	movhi	r3,130
  8164e0:	18efd904 	addi	r3,r3,-16540
  8164e4:	100491ba 	slli	r2,r2,6
  8164e8:	10c5883a 	add	r2,r2,r3
  8164ec:	10800604 	addi	r2,r2,24
  8164f0:	10800017 	ldw	r2,0(r2)
  8164f4:	20801736 	bltu	r4,r2,816554 <alt_up_sd_card_write+0x5f0>
					>= active_files[file_handle].file_size_in_bytes) {
				active_files[file_handle].file_size_in_bytes
  8164f8:	e17ffd0f 	ldh	r5,-12(fp)
  8164fc:	e0bffd0f 	ldh	r2,-12(fp)
  816500:	00c020b4 	movhi	r3,130
  816504:	18efd904 	addi	r3,r3,-16540
  816508:	100491ba 	slli	r2,r2,6
  81650c:	10c5883a 	add	r2,r2,r3
  816510:	10800604 	addi	r2,r2,24
  816514:	10800017 	ldw	r2,0(r2)
  816518:	11000044 	addi	r4,r2,1
  81651c:	00c020b4 	movhi	r3,130
  816520:	18efd904 	addi	r3,r3,-16540
  816524:	280491ba 	slli	r2,r5,6
  816528:	10c5883a 	add	r2,r2,r3
  81652c:	10800604 	addi	r2,r2,24
  816530:	11000015 	stw	r4,0(r2)
						= active_files[file_handle].file_size_in_bytes + 1;
				active_files[file_handle].modified = true;
  816534:	e0bffd0f 	ldh	r2,-12(fp)
  816538:	00c020b4 	movhi	r3,130
  81653c:	18efd904 	addi	r3,r3,-16540
  816540:	100491ba 	slli	r2,r2,6
  816544:	10c5883a 	add	r2,r2,r3
  816548:	10c00e04 	addi	r3,r2,56
  81654c:	00800044 	movi	r2,1
  816550:	18800015 	stw	r2,0(r3)
			}
			// Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
			current_sector_modified = true;
  816554:	00800044 	movi	r2,1
  816558:	d0a72515 	stw	r2,-25452(gp)
			result = true;
  81655c:	00800044 	movi	r2,1
  816560:	e0bffa15 	stw	r2,-24(fp)
		}
	}

	return result;
  816564:	e0bffa17 	ldw	r2,-24(fp)
  816568:	e0bfff15 	stw	r2,-4(fp)
  81656c:	e0bfff17 	ldw	r2,-4(fp)
}
  816570:	e037883a 	mov	sp,fp
  816574:	dfc00217 	ldw	ra,8(sp)
  816578:	df000117 	ldw	fp,4(sp)
  81657c:	dc000017 	ldw	r16,0(sp)
  816580:	dec00304 	addi	sp,sp,12
  816584:	f800283a 	ret

00816588 <alt_up_sd_card_fclose>:

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
  816588:	defffb04 	addi	sp,sp,-20
  81658c:	dfc00415 	stw	ra,16(sp)
  816590:	df000315 	stw	fp,12(sp)
  816594:	df000304 	addi	fp,sp,12
  816598:	e13fff0d 	sth	r4,-4(fp)
	bool result = false;
  81659c:	e03ffe15 	stw	zero,-8(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  8165a0:	081514c0 	call	81514c <alt_up_sd_card_is_Present>
  8165a4:	1005003a 	cmpeq	r2,r2,zero
  8165a8:	1000641e 	bne	r2,zero,81673c <alt_up_sd_card_fclose+0x1b4>
  8165ac:	d0a71b17 	ldw	r2,-25492(gp)
  8165b0:	1005003a 	cmpeq	r2,r2,zero
  8165b4:	1000611e 	bne	r2,zero,81673c <alt_up_sd_card_fclose+0x1b4>
		if (active_files[file_handle].in_use) {
  8165b8:	e0bfff0f 	ldh	r2,-4(fp)
  8165bc:	00c020b4 	movhi	r3,130
  8165c0:	18efd904 	addi	r3,r3,-16540
  8165c4:	100491ba 	slli	r2,r2,6
  8165c8:	10c5883a 	add	r2,r2,r3
  8165cc:	10800f04 	addi	r2,r2,60
  8165d0:	10800017 	ldw	r2,0(r2)
  8165d4:	1005003a 	cmpeq	r2,r2,zero
  8165d8:	1000581e 	bne	r2,zero,81673c <alt_up_sd_card_fclose+0x1b4>
			if (active_files[file_handle].modified) {
  8165dc:	e0bfff0f 	ldh	r2,-4(fp)
  8165e0:	00c020b4 	movhi	r3,130
  8165e4:	18efd904 	addi	r3,r3,-16540
  8165e8:	100491ba 	slli	r2,r2,6
  8165ec:	10c5883a 	add	r2,r2,r3
  8165f0:	10800e04 	addi	r2,r2,56
  8165f4:	10800017 	ldw	r2,0(r2)
  8165f8:	1005003a 	cmpeq	r2,r2,zero
  8165fc:	1000461e 	bne	r2,zero,816718 <alt_up_sd_card_fclose+0x190>
				unsigned int record_sector =
						active_files[file_handle].file_record_sector_in_cluster;
  816600:	e0bfff0f 	ldh	r2,-4(fp)
  816604:	00c020b4 	movhi	r3,130
  816608:	18efd904 	addi	r3,r3,-16540
  81660c:	100491ba 	slli	r2,r2,6
  816610:	10c5883a 	add	r2,r2,r3
  816614:	10800b04 	addi	r2,r2,44
  816618:	10800017 	ldw	r2,0(r2)
  81661c:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0) {
  816620:	e0bfff0f 	ldh	r2,-4(fp)
  816624:	00c020b4 	movhi	r3,130
  816628:	18efd904 	addi	r3,r3,-16540
  81662c:	100491ba 	slli	r2,r2,6
  816630:	10c5883a 	add	r2,r2,r3
  816634:	10800a04 	addi	r2,r2,40
  816638:	10800017 	ldw	r2,0(r2)
  81663c:	1004c03a 	cmpne	r2,r2,zero
  816640:	1000071e 	bne	r2,zero,816660 <alt_up_sd_card_fclose+0xd8>
					record_sector = record_sector
  816644:	008020b4 	movhi	r2,130
  816648:	10afc404 	addi	r2,r2,-16624
  81664c:	10c01317 	ldw	r3,76(r2)
  816650:	e0bffd17 	ldw	r2,-12(fp)
  816654:	10c5883a 	add	r2,r2,r3
  816658:	e0bffd15 	stw	r2,-12(fp)
  81665c:	00001406 	br	8166b0 <alt_up_sd_card_fclose+0x128>
							+ boot_sector_data.root_directory_sector_offset;
				} else {
					record_sector = record_sector
  816660:	008020b4 	movhi	r2,130
  816664:	10afc404 	addi	r2,r2,-16624
  816668:	10c01417 	ldw	r3,80(r2)
  81666c:	e0bffd17 	ldw	r2,-12(fp)
  816670:	1889883a 	add	r4,r3,r2
  816674:	e0bfff0f 	ldh	r2,-4(fp)
  816678:	00c020b4 	movhi	r3,130
  81667c:	18efd904 	addi	r3,r3,-16540
  816680:	100491ba 	slli	r2,r2,6
  816684:	10c5883a 	add	r2,r2,r3
  816688:	10800a04 	addi	r2,r2,40
  81668c:	10800017 	ldw	r2,0(r2)
  816690:	10ffff84 	addi	r3,r2,-2
  816694:	008020b4 	movhi	r2,130
  816698:	10afc404 	addi	r2,r2,-16624
  81669c:	10800383 	ldbu	r2,14(r2)
  8166a0:	10803fcc 	andi	r2,r2,255
  8166a4:	1885383a 	mul	r2,r3,r2
  8166a8:	2085883a 	add	r2,r4,r2
  8166ac:	e0bffd15 	stw	r2,-12(fp)
							+ boot_sector_data.data_sector_offset
							+ (active_files[file_handle].file_record_cluster
									- 2) * boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector,
  8166b0:	e13ffd17 	ldw	r4,-12(fp)
  8166b4:	d1672217 	ldw	r5,-25464(gp)
  8166b8:	08124380 	call	812438 <Read_Sector_Data>
  8166bc:	1005003a 	cmpeq	r2,r2,zero
  8166c0:	1000151e 	bne	r2,zero,816718 <alt_up_sd_card_fclose+0x190>
						fat_partition_offset_in_512_byte_sectors)) {
					if (Write_File_Record_At_Offset(
  8166c4:	e0bfff0f 	ldh	r2,-4(fp)
  8166c8:	00c020b4 	movhi	r3,130
  8166cc:	18efd904 	addi	r3,r3,-16540
  8166d0:	100491ba 	slli	r2,r2,6
  8166d4:	10c5883a 	add	r2,r2,r3
  8166d8:	10800c04 	addi	r2,r2,48
  8166dc:	1080000b 	ldhu	r2,0(r2)
  8166e0:	113fffcc 	andi	r4,r2,65535
  8166e4:	2120001c 	xori	r4,r4,32768
  8166e8:	21200004 	addi	r4,r4,-32768
  8166ec:	e0bfff0f 	ldh	r2,-4(fp)
  8166f0:	100491ba 	slli	r2,r2,6
  8166f4:	1007883a 	mov	r3,r2
  8166f8:	008020b4 	movhi	r2,130
  8166fc:	10afd904 	addi	r2,r2,-16540
  816700:	188b883a 	add	r5,r3,r2
  816704:	0812b040 	call	812b04 <Write_File_Record_At_Offset>
  816708:	1005003a 	cmpeq	r2,r2,zero
  81670c:	1000021e 	bne	r2,zero,816718 <alt_up_sd_card_fclose+0x190>
							active_files[file_handle].file_record_offset,
							&(active_files[file_handle]))) {
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
  816710:	08123e80 	call	8123e8 <Save_Modified_Sector>
  816714:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
  816718:	e0bfff0f 	ldh	r2,-4(fp)
  81671c:	00c020b4 	movhi	r3,130
  816720:	18efd904 	addi	r3,r3,-16540
  816724:	100491ba 	slli	r2,r2,6
  816728:	10c5883a 	add	r2,r2,r3
  81672c:	10800f04 	addi	r2,r2,60
  816730:	10000015 	stw	zero,0(r2)
			result = true;
  816734:	00800044 	movi	r2,1
  816738:	e0bffe15 	stw	r2,-8(fp)
		}
	}

	return result;
  81673c:	e0bffe17 	ldw	r2,-8(fp)
}
  816740:	e037883a 	mov	sp,fp
  816744:	dfc00117 	ldw	ra,4(sp)
  816748:	df000017 	ldw	fp,0(sp)
  81674c:	dec00204 	addi	sp,sp,8
  816750:	f800283a 	ret

00816754 <Read_Sector_Data_CRC>:

bool Read_Sector_Data_CRC(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  816754:	defff904 	addi	sp,sp,-28
  816758:	dfc00615 	stw	ra,24(sp)
  81675c:	df000515 	stw	fp,20(sp)
  816760:	df000504 	addi	fp,sp,20
  816764:	e13ffd15 	stw	r4,-12(fp)
  816768:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
  81676c:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
  816770:	081514c0 	call	81514c <alt_up_sd_card_is_Present>
  816774:	1005003a 	cmpeq	r2,r2,zero
  816778:	10002d1e 	bne	r2,zero,816830 <Read_Sector_Data_CRC+0xdc>
		short int reg_state = 0xff;
  81677c:	00803fc4 	movi	r2,255
  816780:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
  816784:	d0a72517 	ldw	r2,-25452(gp)
  816788:	1005003a 	cmpeq	r2,r2,zero
  81678c:	1000081e 	bne	r2,zero,8167b0 <Read_Sector_Data_CRC+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
  816790:	d0a72617 	ldw	r2,-25448(gp)
  816794:	1009883a 	mov	r4,r2
  816798:	000b883a 	mov	r5,zero
  81679c:	08123200 	call	812320 <Write_Sector_Data>
  8167a0:	1004c03a 	cmpne	r2,r2,zero
  8167a4:	1000021e 	bne	r2,zero,8167b0 <Read_Sector_Data_CRC+0x5c>
				return false;
  8167a8:	e03fff15 	stw	zero,-4(fp)
  8167ac:	00002206 	br	816838 <Read_Sector_Data_CRC+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  8167b0:	d0a72017 	ldw	r2,-25472(gp)
  8167b4:	1009883a 	mov	r4,r2
  8167b8:	e0fffd17 	ldw	r3,-12(fp)
  8167bc:	e0bffe17 	ldw	r2,-8(fp)
  8167c0:	1885883a 	add	r2,r3,r2
  8167c4:	1006927a 	slli	r3,r2,9
  8167c8:	2005883a 	mov	r2,r4
  8167cc:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  8167d0:	d0a71f17 	ldw	r2,-25476(gp)
  8167d4:	1007883a 	mov	r3,r2
  8167d8:	00800444 	movi	r2,17
  8167dc:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  8167e0:	d0a71c17 	ldw	r2,-25488(gp)
  8167e4:	1080002b 	ldhuio	r2,0(r2)
  8167e8:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
  8167ec:	e0bffb0b 	ldhu	r2,-20(fp)
  8167f0:	10bfffcc 	andi	r2,r2,65535
  8167f4:	1080010c 	andi	r2,r2,4
  8167f8:	1004c03a 	cmpne	r2,r2,zero
  8167fc:	103ff81e 	bne	r2,zero,8167e0 <Read_Sector_Data_CRC+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x30) == 0) {
  816800:	e0bffb0b 	ldhu	r2,-20(fp)
  816804:	10bfffcc 	andi	r2,r2,65535
  816808:	10800c0c 	andi	r2,r2,48
  81680c:	1004c03a 	cmpne	r2,r2,zero
  816810:	1000071e 	bne	r2,zero,816830 <Read_Sector_Data_CRC+0xdc>
			result = true;
  816814:	00800044 	movi	r2,1
  816818:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
  81681c:	d0272515 	stw	zero,-25452(gp)
			current_sector_index = sector_index + partition_offset;
  816820:	e0fffd17 	ldw	r3,-12(fp)
  816824:	e0bffe17 	ldw	r2,-8(fp)
  816828:	1885883a 	add	r2,r3,r2
  81682c:	d0a72615 	stw	r2,-25448(gp)
		}
	}
	return result;
  816830:	e0bffc17 	ldw	r2,-16(fp)
  816834:	e0bfff15 	stw	r2,-4(fp)
  816838:	e0bfff17 	ldw	r2,-4(fp)
}
  81683c:	e037883a 	mov	sp,fp
  816840:	dfc00117 	ldw	ra,4(sp)
  816844:	df000017 	ldw	fp,0(sp)
  816848:	dec00204 	addi	sp,sp,8
  81684c:	f800283a 	ret

00816850 <Read_Sector_Data_Attempt_CRC>:

bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
  816850:	defff804 	addi	sp,sp,-32
  816854:	dfc00715 	stw	ra,28(sp)
  816858:	df000615 	stw	fp,24(sp)
  81685c:	df000604 	addi	fp,sp,24
  816860:	e13ffd15 	stw	r4,-12(fp)
  816864:	e17ffe15 	stw	r5,-8(fp)
	int i;
	bool correct;
	const int attempts = 100;
  816868:	00801904 	movi	r2,100
  81686c:	e0bffa15 	stw	r2,-24(fp)

	for (i = 0; i < attempts; i++) {
  816870:	e03ffc15 	stw	zero,-16(fp)
  816874:	00000d06 	br	8168ac <Read_Sector_Data_Attempt_CRC+0x5c>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
  816878:	e13ffd17 	ldw	r4,-12(fp)
  81687c:	e17ffe17 	ldw	r5,-8(fp)
  816880:	08167540 	call	816754 <Read_Sector_Data_CRC>
  816884:	e0bffb15 	stw	r2,-20(fp)
		if (correct) {
  816888:	e0bffb17 	ldw	r2,-20(fp)
  81688c:	1005003a 	cmpeq	r2,r2,zero
  816890:	1000031e 	bne	r2,zero,8168a0 <Read_Sector_Data_Attempt_CRC+0x50>
			return true;
  816894:	00800044 	movi	r2,1
  816898:	e0bfff15 	stw	r2,-4(fp)
  81689c:	00000a06 	br	8168c8 <Read_Sector_Data_Attempt_CRC+0x78>
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
  8168a0:	e0bffc17 	ldw	r2,-16(fp)
  8168a4:	10800044 	addi	r2,r2,1
  8168a8:	e0bffc15 	stw	r2,-16(fp)
  8168ac:	e0fffc17 	ldw	r3,-16(fp)
  8168b0:	e0bffa17 	ldw	r2,-24(fp)
  8168b4:	18bff016 	blt	r3,r2,816878 <Read_Sector_Data_Attempt_CRC+0x28>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
  8168b8:	e13ffd17 	ldw	r4,-12(fp)
  8168bc:	e17ffe17 	ldw	r5,-8(fp)
  8168c0:	08124380 	call	812438 <Read_Sector_Data>
  8168c4:	e0bfff15 	stw	r2,-4(fp)
  8168c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8168cc:	e037883a 	mov	sp,fp
  8168d0:	dfc00117 	ldw	ra,4(sp)
  8168d4:	df000017 	ldw	fp,0(sp)
  8168d8:	dec00204 	addi	sp,sp,8
  8168dc:	f800283a 	ret

008168e0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8168e0:	defff404 	addi	sp,sp,-48
  8168e4:	df000b15 	stw	fp,44(sp)
  8168e8:	df000b04 	addi	fp,sp,44
  8168ec:	e13ffb15 	stw	r4,-20(fp)
  8168f0:	e17ffc15 	stw	r5,-16(fp)
  8168f4:	e1bffd15 	stw	r6,-12(fp)
  8168f8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8168fc:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  816900:	008020b4 	movhi	r2,130
  816904:	10af2a04 	addi	r2,r2,-17240
  816908:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  81690c:	1005003a 	cmpeq	r2,r2,zero
  816910:	1000411e 	bne	r2,zero,816a18 <alt_alarm_start+0x138>
  {
    if (alarm)
  816914:	e0bffb17 	ldw	r2,-20(fp)
  816918:	1005003a 	cmpeq	r2,r2,zero
  81691c:	10003b1e 	bne	r2,zero,816a0c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  816920:	e0fffb17 	ldw	r3,-20(fp)
  816924:	e0bffd17 	ldw	r2,-12(fp)
  816928:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  81692c:	e0fffb17 	ldw	r3,-20(fp)
  816930:	e0bffe17 	ldw	r2,-8(fp)
  816934:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816938:	0005303a 	rdctl	r2,status
  81693c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816940:	e0fff817 	ldw	r3,-32(fp)
  816944:	00bfff84 	movi	r2,-2
  816948:	1884703a 	and	r2,r3,r2
  81694c:	1001703a 	wrctl	status,r2
  
  return context;
  816950:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  816954:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  816958:	008020b4 	movhi	r2,130
  81695c:	10af2b04 	addi	r2,r2,-17236
  816960:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  816964:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  816968:	e0fffc17 	ldw	r3,-16(fp)
  81696c:	e0bff917 	ldw	r2,-28(fp)
  816970:	1885883a 	add	r2,r3,r2
  816974:	10c00044 	addi	r3,r2,1
  816978:	e0bffb17 	ldw	r2,-20(fp)
  81697c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  816980:	e0bffb17 	ldw	r2,-20(fp)
  816984:	10c00217 	ldw	r3,8(r2)
  816988:	e0bff917 	ldw	r2,-28(fp)
  81698c:	1880042e 	bgeu	r3,r2,8169a0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  816990:	e0fffb17 	ldw	r3,-20(fp)
  816994:	00800044 	movi	r2,1
  816998:	18800405 	stb	r2,16(r3)
  81699c:	00000206 	br	8169a8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  8169a0:	e0bffb17 	ldw	r2,-20(fp)
  8169a4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8169a8:	e0fffb17 	ldw	r3,-20(fp)
  8169ac:	008020b4 	movhi	r2,130
  8169b0:	10a82504 	addi	r2,r2,-24428
  8169b4:	e0bff615 	stw	r2,-40(fp)
  8169b8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8169bc:	e0fff717 	ldw	r3,-36(fp)
  8169c0:	e0bff617 	ldw	r2,-40(fp)
  8169c4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8169c8:	e0bff617 	ldw	r2,-40(fp)
  8169cc:	10c00017 	ldw	r3,0(r2)
  8169d0:	e0bff717 	ldw	r2,-36(fp)
  8169d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8169d8:	e0bff617 	ldw	r2,-40(fp)
  8169dc:	10c00017 	ldw	r3,0(r2)
  8169e0:	e0bff717 	ldw	r2,-36(fp)
  8169e4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8169e8:	e0fff617 	ldw	r3,-40(fp)
  8169ec:	e0bff717 	ldw	r2,-36(fp)
  8169f0:	18800015 	stw	r2,0(r3)
  8169f4:	e0bffa17 	ldw	r2,-24(fp)
  8169f8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8169fc:	e0bff517 	ldw	r2,-44(fp)
  816a00:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  816a04:	e03fff15 	stw	zero,-4(fp)
  816a08:	00000506 	br	816a20 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  816a0c:	00bffa84 	movi	r2,-22
  816a10:	e0bfff15 	stw	r2,-4(fp)
  816a14:	00000206 	br	816a20 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  816a18:	00bfde84 	movi	r2,-134
  816a1c:	e0bfff15 	stw	r2,-4(fp)
  816a20:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  816a24:	e037883a 	mov	sp,fp
  816a28:	df000017 	ldw	fp,0(sp)
  816a2c:	dec00104 	addi	sp,sp,4
  816a30:	f800283a 	ret

00816a34 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  816a34:	defffa04 	addi	sp,sp,-24
  816a38:	dfc00515 	stw	ra,20(sp)
  816a3c:	df000415 	stw	fp,16(sp)
  816a40:	df000404 	addi	fp,sp,16
  816a44:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  816a48:	008000c4 	movi	r2,3
  816a4c:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  816a50:	e0fffc17 	ldw	r3,-16(fp)
  816a54:	008003f4 	movhi	r2,15
  816a58:	10909004 	addi	r2,r2,16960
  816a5c:	188b383a 	mul	r5,r3,r2
  816a60:	0100bef4 	movhi	r4,763
  816a64:	213c2004 	addi	r4,r4,-3968
  816a68:	0804cbc0 	call	804cbc <__udivsi3>
  816a6c:	100b883a 	mov	r5,r2
  816a70:	01200034 	movhi	r4,32768
  816a74:	213fffc4 	addi	r4,r4,-1
  816a78:	0804cbc0 	call	804cbc <__udivsi3>
  816a7c:	100b883a 	mov	r5,r2
  816a80:	e13fff17 	ldw	r4,-4(fp)
  816a84:	0804cbc0 	call	804cbc <__udivsi3>
  816a88:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  816a8c:	e0bffd17 	ldw	r2,-12(fp)
  816a90:	1005003a 	cmpeq	r2,r2,zero
  816a94:	1000281e 	bne	r2,zero,816b38 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  816a98:	e03ffe15 	stw	zero,-8(fp)
  816a9c:	00001606 	br	816af8 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  816aa0:	00a00034 	movhi	r2,32768
  816aa4:	10bfffc4 	addi	r2,r2,-1
  816aa8:	10bfffc4 	addi	r2,r2,-1
  816aac:	103ffe1e 	bne	r2,zero,816aa8 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  816ab0:	e0fffc17 	ldw	r3,-16(fp)
  816ab4:	008003f4 	movhi	r2,15
  816ab8:	10909004 	addi	r2,r2,16960
  816abc:	188b383a 	mul	r5,r3,r2
  816ac0:	0100bef4 	movhi	r4,763
  816ac4:	213c2004 	addi	r4,r4,-3968
  816ac8:	0804cbc0 	call	804cbc <__udivsi3>
  816acc:	100b883a 	mov	r5,r2
  816ad0:	01200034 	movhi	r4,32768
  816ad4:	213fffc4 	addi	r4,r4,-1
  816ad8:	0804cbc0 	call	804cbc <__udivsi3>
  816adc:	1007883a 	mov	r3,r2
  816ae0:	e0bfff17 	ldw	r2,-4(fp)
  816ae4:	10c5c83a 	sub	r2,r2,r3
  816ae8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  816aec:	e0bffe17 	ldw	r2,-8(fp)
  816af0:	10800044 	addi	r2,r2,1
  816af4:	e0bffe15 	stw	r2,-8(fp)
  816af8:	e0fffe17 	ldw	r3,-8(fp)
  816afc:	e0bffd17 	ldw	r2,-12(fp)
  816b00:	18bfe716 	blt	r3,r2,816aa0 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  816b04:	e0fffc17 	ldw	r3,-16(fp)
  816b08:	008003f4 	movhi	r2,15
  816b0c:	10909004 	addi	r2,r2,16960
  816b10:	188b383a 	mul	r5,r3,r2
  816b14:	0100bef4 	movhi	r4,763
  816b18:	213c2004 	addi	r4,r4,-3968
  816b1c:	0804cbc0 	call	804cbc <__udivsi3>
  816b20:	1007883a 	mov	r3,r2
  816b24:	e0bfff17 	ldw	r2,-4(fp)
  816b28:	1885383a 	mul	r2,r3,r2
  816b2c:	10bfffc4 	addi	r2,r2,-1
  816b30:	103ffe1e 	bne	r2,zero,816b2c <alt_busy_sleep+0xf8>
  816b34:	00000c06 	br	816b68 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  816b38:	e0fffc17 	ldw	r3,-16(fp)
  816b3c:	008003f4 	movhi	r2,15
  816b40:	10909004 	addi	r2,r2,16960
  816b44:	188b383a 	mul	r5,r3,r2
  816b48:	0100bef4 	movhi	r4,763
  816b4c:	213c2004 	addi	r4,r4,-3968
  816b50:	0804cbc0 	call	804cbc <__udivsi3>
  816b54:	1007883a 	mov	r3,r2
  816b58:	e0bfff17 	ldw	r2,-4(fp)
  816b5c:	1885383a 	mul	r2,r3,r2
  816b60:	10bfffc4 	addi	r2,r2,-1
  816b64:	00bffe16 	blt	zero,r2,816b60 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  816b68:	0005883a 	mov	r2,zero
}
  816b6c:	e037883a 	mov	sp,fp
  816b70:	dfc00117 	ldw	ra,4(sp)
  816b74:	df000017 	ldw	fp,0(sp)
  816b78:	dec00204 	addi	sp,sp,8
  816b7c:	f800283a 	ret

00816b80 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  816b80:	defffe04 	addi	sp,sp,-8
  816b84:	df000115 	stw	fp,4(sp)
  816b88:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  816b8c:	e03fff15 	stw	zero,-4(fp)
  816b90:	00000506 	br	816ba8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  816b94:	e0bfff17 	ldw	r2,-4(fp)
  816b98:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  816b9c:	e0bfff17 	ldw	r2,-4(fp)
  816ba0:	10800804 	addi	r2,r2,32
  816ba4:	e0bfff15 	stw	r2,-4(fp)
  816ba8:	e0bfff17 	ldw	r2,-4(fp)
  816bac:	10900030 	cmpltui	r2,r2,16384
  816bb0:	103ff81e 	bne	r2,zero,816b94 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  816bb4:	e037883a 	mov	sp,fp
  816bb8:	df000017 	ldw	fp,0(sp)
  816bbc:	dec00104 	addi	sp,sp,4
  816bc0:	f800283a 	ret

00816bc4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  816bc4:	defff904 	addi	sp,sp,-28
  816bc8:	dfc00615 	stw	ra,24(sp)
  816bcc:	df000515 	stw	fp,20(sp)
  816bd0:	df000504 	addi	fp,sp,20
  816bd4:	e13ffd15 	stw	r4,-12(fp)
  816bd8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  816bdc:	e0bffd17 	ldw	r2,-12(fp)
  816be0:	1005003a 	cmpeq	r2,r2,zero
  816be4:	1000041e 	bne	r2,zero,816bf8 <alt_dev_llist_insert+0x34>
  816be8:	e0bffd17 	ldw	r2,-12(fp)
  816bec:	10800217 	ldw	r2,8(r2)
  816bf0:	1004c03a 	cmpne	r2,r2,zero
  816bf4:	1000071e 	bne	r2,zero,816c14 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  816bf8:	0816c780 	call	816c78 <alt_get_errno>
  816bfc:	1007883a 	mov	r3,r2
  816c00:	00800584 	movi	r2,22
  816c04:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  816c08:	00bffa84 	movi	r2,-22
  816c0c:	e0bfff15 	stw	r2,-4(fp)
  816c10:	00001306 	br	816c60 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  816c14:	e0fffd17 	ldw	r3,-12(fp)
  816c18:	e0bffe17 	ldw	r2,-8(fp)
  816c1c:	e0bffb15 	stw	r2,-20(fp)
  816c20:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  816c24:	e0fffc17 	ldw	r3,-16(fp)
  816c28:	e0bffb17 	ldw	r2,-20(fp)
  816c2c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  816c30:	e0bffb17 	ldw	r2,-20(fp)
  816c34:	10c00017 	ldw	r3,0(r2)
  816c38:	e0bffc17 	ldw	r2,-16(fp)
  816c3c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  816c40:	e0bffb17 	ldw	r2,-20(fp)
  816c44:	10c00017 	ldw	r3,0(r2)
  816c48:	e0bffc17 	ldw	r2,-16(fp)
  816c4c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  816c50:	e0fffb17 	ldw	r3,-20(fp)
  816c54:	e0bffc17 	ldw	r2,-16(fp)
  816c58:	18800015 	stw	r2,0(r3)

  return 0;  
  816c5c:	e03fff15 	stw	zero,-4(fp)
  816c60:	e0bfff17 	ldw	r2,-4(fp)
}
  816c64:	e037883a 	mov	sp,fp
  816c68:	dfc00117 	ldw	ra,4(sp)
  816c6c:	df000017 	ldw	fp,0(sp)
  816c70:	dec00204 	addi	sp,sp,8
  816c74:	f800283a 	ret

00816c78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  816c78:	defffd04 	addi	sp,sp,-12
  816c7c:	dfc00215 	stw	ra,8(sp)
  816c80:	df000115 	stw	fp,4(sp)
  816c84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  816c88:	008020b4 	movhi	r2,130
  816c8c:	10a82204 	addi	r2,r2,-24440
  816c90:	10800017 	ldw	r2,0(r2)
  816c94:	1005003a 	cmpeq	r2,r2,zero
  816c98:	1000061e 	bne	r2,zero,816cb4 <alt_get_errno+0x3c>
  816c9c:	008020b4 	movhi	r2,130
  816ca0:	10a82204 	addi	r2,r2,-24440
  816ca4:	10800017 	ldw	r2,0(r2)
  816ca8:	103ee83a 	callr	r2
  816cac:	e0bfff15 	stw	r2,-4(fp)
  816cb0:	00000306 	br	816cc0 <alt_get_errno+0x48>
  816cb4:	008020b4 	movhi	r2,130
  816cb8:	10af2204 	addi	r2,r2,-17272
  816cbc:	e0bfff15 	stw	r2,-4(fp)
  816cc0:	e0bfff17 	ldw	r2,-4(fp)
}
  816cc4:	e037883a 	mov	sp,fp
  816cc8:	dfc00117 	ldw	ra,4(sp)
  816ccc:	df000017 	ldw	fp,0(sp)
  816cd0:	dec00204 	addi	sp,sp,8
  816cd4:	f800283a 	ret

00816cd8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  816cd8:	defffd04 	addi	sp,sp,-12
  816cdc:	dfc00215 	stw	ra,8(sp)
  816ce0:	df000115 	stw	fp,4(sp)
  816ce4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  816ce8:	00bfff04 	movi	r2,-4
  816cec:	00c02074 	movhi	r3,129
  816cf0:	18de5904 	addi	r3,r3,31076
  816cf4:	1885883a 	add	r2,r3,r2
  816cf8:	e0bfff15 	stw	r2,-4(fp)
  816cfc:	00000606 	br	816d18 <_do_ctors+0x40>
        (*ctor) (); 
  816d00:	e0bfff17 	ldw	r2,-4(fp)
  816d04:	10800017 	ldw	r2,0(r2)
  816d08:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  816d0c:	e0bfff17 	ldw	r2,-4(fp)
  816d10:	10bfff04 	addi	r2,r2,-4
  816d14:	e0bfff15 	stw	r2,-4(fp)
  816d18:	e0ffff17 	ldw	r3,-4(fp)
  816d1c:	00802074 	movhi	r2,129
  816d20:	109e5804 	addi	r2,r2,31072
  816d24:	18bff62e 	bgeu	r3,r2,816d00 <_do_ctors+0x28>
        (*ctor) (); 
}
  816d28:	e037883a 	mov	sp,fp
  816d2c:	dfc00117 	ldw	ra,4(sp)
  816d30:	df000017 	ldw	fp,0(sp)
  816d34:	dec00204 	addi	sp,sp,8
  816d38:	f800283a 	ret

00816d3c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  816d3c:	defffd04 	addi	sp,sp,-12
  816d40:	dfc00215 	stw	ra,8(sp)
  816d44:	df000115 	stw	fp,4(sp)
  816d48:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  816d4c:	00bfff04 	movi	r2,-4
  816d50:	00c02074 	movhi	r3,129
  816d54:	18de5904 	addi	r3,r3,31076
  816d58:	1885883a 	add	r2,r3,r2
  816d5c:	e0bfff15 	stw	r2,-4(fp)
  816d60:	00000606 	br	816d7c <_do_dtors+0x40>
        (*dtor) (); 
  816d64:	e0bfff17 	ldw	r2,-4(fp)
  816d68:	10800017 	ldw	r2,0(r2)
  816d6c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  816d70:	e0bfff17 	ldw	r2,-4(fp)
  816d74:	10bfff04 	addi	r2,r2,-4
  816d78:	e0bfff15 	stw	r2,-4(fp)
  816d7c:	e0ffff17 	ldw	r3,-4(fp)
  816d80:	00802074 	movhi	r2,129
  816d84:	109e5904 	addi	r2,r2,31076
  816d88:	18bff62e 	bgeu	r3,r2,816d64 <_do_dtors+0x28>
        (*dtor) (); 
}
  816d8c:	e037883a 	mov	sp,fp
  816d90:	dfc00117 	ldw	ra,4(sp)
  816d94:	df000017 	ldw	fp,0(sp)
  816d98:	dec00204 	addi	sp,sp,8
  816d9c:	f800283a 	ret

00816da0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  816da0:	defff904 	addi	sp,sp,-28
  816da4:	dfc00615 	stw	ra,24(sp)
  816da8:	df000515 	stw	fp,20(sp)
  816dac:	df000504 	addi	fp,sp,20
  816db0:	e13ffd15 	stw	r4,-12(fp)
  816db4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  816db8:	e0bffe17 	ldw	r2,-8(fp)
  816dbc:	10800017 	ldw	r2,0(r2)
  816dc0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  816dc4:	e13ffd17 	ldw	r4,-12(fp)
  816dc8:	0805e240 	call	805e24 <strlen>
  816dcc:	10800044 	addi	r2,r2,1
  816dd0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  816dd4:	00000d06 	br	816e0c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  816dd8:	e0bffc17 	ldw	r2,-16(fp)
  816ddc:	11000217 	ldw	r4,8(r2)
  816de0:	e1bffb17 	ldw	r6,-20(fp)
  816de4:	e17ffd17 	ldw	r5,-12(fp)
  816de8:	08175380 	call	817538 <memcmp>
  816dec:	1004c03a 	cmpne	r2,r2,zero
  816df0:	1000031e 	bne	r2,zero,816e00 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  816df4:	e0bffc17 	ldw	r2,-16(fp)
  816df8:	e0bfff15 	stw	r2,-4(fp)
  816dfc:	00000706 	br	816e1c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  816e00:	e0bffc17 	ldw	r2,-16(fp)
  816e04:	10800017 	ldw	r2,0(r2)
  816e08:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  816e0c:	e0fffe17 	ldw	r3,-8(fp)
  816e10:	e0bffc17 	ldw	r2,-16(fp)
  816e14:	10fff01e 	bne	r2,r3,816dd8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  816e18:	e03fff15 	stw	zero,-4(fp)
  816e1c:	e0bfff17 	ldw	r2,-4(fp)
}
  816e20:	e037883a 	mov	sp,fp
  816e24:	dfc00117 	ldw	ra,4(sp)
  816e28:	df000017 	ldw	fp,0(sp)
  816e2c:	dec00204 	addi	sp,sp,8
  816e30:	f800283a 	ret

00816e34 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  816e34:	defffe04 	addi	sp,sp,-8
  816e38:	dfc00115 	stw	ra,4(sp)
  816e3c:	df000015 	stw	fp,0(sp)
  816e40:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  816e44:	0009883a 	mov	r4,zero
  816e48:	01440004 	movi	r5,4096
  816e4c:	081745c0 	call	81745c <alt_icache_flush>
#endif
}
  816e50:	e037883a 	mov	sp,fp
  816e54:	dfc00117 	ldw	ra,4(sp)
  816e58:	df000017 	ldw	fp,0(sp)
  816e5c:	dec00204 	addi	sp,sp,8
  816e60:	f800283a 	ret

00816e64 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  816e64:	defff904 	addi	sp,sp,-28
  816e68:	dfc00615 	stw	ra,24(sp)
  816e6c:	df000515 	stw	fp,20(sp)
  816e70:	df000504 	addi	fp,sp,20
  816e74:	e13ffc15 	stw	r4,-16(fp)
  816e78:	e17ffd15 	stw	r5,-12(fp)
  816e7c:	e1bffe15 	stw	r6,-8(fp)
  816e80:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  816e84:	e13ffd17 	ldw	r4,-12(fp)
  816e88:	e17ffe17 	ldw	r5,-8(fp)
  816e8c:	e1bfff17 	ldw	r6,-4(fp)
  816e90:	081707c0 	call	81707c <open>
  816e94:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  816e98:	e0bffb17 	ldw	r2,-20(fp)
  816e9c:	1004803a 	cmplt	r2,r2,zero
  816ea0:	10001c1e 	bne	r2,zero,816f14 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  816ea4:	e0bffb17 	ldw	r2,-20(fp)
  816ea8:	00c020b4 	movhi	r3,130
  816eac:	18e34704 	addi	r3,r3,-29412
  816eb0:	10800324 	muli	r2,r2,12
  816eb4:	10c5883a 	add	r2,r2,r3
  816eb8:	10c00017 	ldw	r3,0(r2)
  816ebc:	e0bffc17 	ldw	r2,-16(fp)
  816ec0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  816ec4:	e0bffb17 	ldw	r2,-20(fp)
  816ec8:	00c020b4 	movhi	r3,130
  816ecc:	18e34704 	addi	r3,r3,-29412
  816ed0:	10800324 	muli	r2,r2,12
  816ed4:	10c5883a 	add	r2,r2,r3
  816ed8:	10800104 	addi	r2,r2,4
  816edc:	10c00017 	ldw	r3,0(r2)
  816ee0:	e0bffc17 	ldw	r2,-16(fp)
  816ee4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  816ee8:	e0bffb17 	ldw	r2,-20(fp)
  816eec:	00c020b4 	movhi	r3,130
  816ef0:	18e34704 	addi	r3,r3,-29412
  816ef4:	10800324 	muli	r2,r2,12
  816ef8:	10c5883a 	add	r2,r2,r3
  816efc:	10800204 	addi	r2,r2,8
  816f00:	10c00017 	ldw	r3,0(r2)
  816f04:	e0bffc17 	ldw	r2,-16(fp)
  816f08:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  816f0c:	e13ffb17 	ldw	r4,-20(fp)
  816f10:	080e0900 	call	80e090 <alt_release_fd>
  }
} 
  816f14:	e037883a 	mov	sp,fp
  816f18:	dfc00117 	ldw	ra,4(sp)
  816f1c:	df000017 	ldw	fp,0(sp)
  816f20:	dec00204 	addi	sp,sp,8
  816f24:	f800283a 	ret

00816f28 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  816f28:	defffb04 	addi	sp,sp,-20
  816f2c:	dfc00415 	stw	ra,16(sp)
  816f30:	df000315 	stw	fp,12(sp)
  816f34:	df000304 	addi	fp,sp,12
  816f38:	e13ffd15 	stw	r4,-12(fp)
  816f3c:	e17ffe15 	stw	r5,-8(fp)
  816f40:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  816f44:	010020b4 	movhi	r4,130
  816f48:	21234a04 	addi	r4,r4,-29400
  816f4c:	e17ffd17 	ldw	r5,-12(fp)
  816f50:	01800044 	movi	r6,1
  816f54:	01c07fc4 	movi	r7,511
  816f58:	0816e640 	call	816e64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  816f5c:	010020b4 	movhi	r4,130
  816f60:	21234704 	addi	r4,r4,-29412
  816f64:	e17ffe17 	ldw	r5,-8(fp)
  816f68:	000d883a 	mov	r6,zero
  816f6c:	01c07fc4 	movi	r7,511
  816f70:	0816e640 	call	816e64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  816f74:	010020b4 	movhi	r4,130
  816f78:	21234d04 	addi	r4,r4,-29388
  816f7c:	e17fff17 	ldw	r5,-4(fp)
  816f80:	01800044 	movi	r6,1
  816f84:	01c07fc4 	movi	r7,511
  816f88:	0816e640 	call	816e64 <alt_open_fd>
}  
  816f8c:	e037883a 	mov	sp,fp
  816f90:	dfc00117 	ldw	ra,4(sp)
  816f94:	df000017 	ldw	fp,0(sp)
  816f98:	dec00204 	addi	sp,sp,8
  816f9c:	f800283a 	ret

00816fa0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  816fa0:	defffc04 	addi	sp,sp,-16
  816fa4:	df000315 	stw	fp,12(sp)
  816fa8:	df000304 	addi	fp,sp,12
  816fac:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  816fb0:	e0bffe17 	ldw	r2,-8(fp)
  816fb4:	10800217 	ldw	r2,8(r2)
  816fb8:	10d00034 	orhi	r3,r2,16384
  816fbc:	e0bffe17 	ldw	r2,-8(fp)
  816fc0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  816fc4:	e03ffd15 	stw	zero,-12(fp)
  816fc8:	00002006 	br	81704c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  816fcc:	e0bffd17 	ldw	r2,-12(fp)
  816fd0:	00c020b4 	movhi	r3,130
  816fd4:	18e34704 	addi	r3,r3,-29412
  816fd8:	10800324 	muli	r2,r2,12
  816fdc:	10c5883a 	add	r2,r2,r3
  816fe0:	10c00017 	ldw	r3,0(r2)
  816fe4:	e0bffe17 	ldw	r2,-8(fp)
  816fe8:	10800017 	ldw	r2,0(r2)
  816fec:	1880141e 	bne	r3,r2,817040 <alt_file_locked+0xa0>
  816ff0:	e0bffd17 	ldw	r2,-12(fp)
  816ff4:	00c020b4 	movhi	r3,130
  816ff8:	18e34704 	addi	r3,r3,-29412
  816ffc:	10800324 	muli	r2,r2,12
  817000:	10c5883a 	add	r2,r2,r3
  817004:	10800204 	addi	r2,r2,8
  817008:	10800017 	ldw	r2,0(r2)
  81700c:	1004403a 	cmpge	r2,r2,zero
  817010:	10000b1e 	bne	r2,zero,817040 <alt_file_locked+0xa0>
  817014:	e0bffd17 	ldw	r2,-12(fp)
  817018:	10800324 	muli	r2,r2,12
  81701c:	1007883a 	mov	r3,r2
  817020:	008020b4 	movhi	r2,130
  817024:	10a34704 	addi	r2,r2,-29412
  817028:	1887883a 	add	r3,r3,r2
  81702c:	e0bffe17 	ldw	r2,-8(fp)
  817030:	18800326 	beq	r3,r2,817040 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  817034:	00bffcc4 	movi	r2,-13
  817038:	e0bfff15 	stw	r2,-4(fp)
  81703c:	00000a06 	br	817068 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  817040:	e0bffd17 	ldw	r2,-12(fp)
  817044:	10800044 	addi	r2,r2,1
  817048:	e0bffd15 	stw	r2,-12(fp)
  81704c:	008020b4 	movhi	r2,130
  817050:	10a82104 	addi	r2,r2,-24444
  817054:	10800017 	ldw	r2,0(r2)
  817058:	1007883a 	mov	r3,r2
  81705c:	e0bffd17 	ldw	r2,-12(fp)
  817060:	18bfda2e 	bgeu	r3,r2,816fcc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  817064:	e03fff15 	stw	zero,-4(fp)
  817068:	e0bfff17 	ldw	r2,-4(fp)
}
  81706c:	e037883a 	mov	sp,fp
  817070:	df000017 	ldw	fp,0(sp)
  817074:	dec00104 	addi	sp,sp,4
  817078:	f800283a 	ret

0081707c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  81707c:	defff404 	addi	sp,sp,-48
  817080:	dfc00b15 	stw	ra,44(sp)
  817084:	df000a15 	stw	fp,40(sp)
  817088:	df000a04 	addi	fp,sp,40
  81708c:	e13ffb15 	stw	r4,-20(fp)
  817090:	e17ffc15 	stw	r5,-16(fp)
  817094:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  817098:	00bfffc4 	movi	r2,-1
  81709c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  8170a0:	00bffb44 	movi	r2,-19
  8170a4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  8170a8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8170ac:	e13ffb17 	ldw	r4,-20(fp)
  8170b0:	014020b4 	movhi	r5,130
  8170b4:	29681f04 	addi	r5,r5,-24452
  8170b8:	0816da00 	call	816da0 <alt_find_dev>
  8170bc:	e0bffa15 	stw	r2,-24(fp)
  8170c0:	e0bffa17 	ldw	r2,-24(fp)
  8170c4:	1004c03a 	cmpne	r2,r2,zero
  8170c8:	1000051e 	bne	r2,zero,8170e0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8170cc:	e13ffb17 	ldw	r4,-20(fp)
  8170d0:	08172840 	call	817284 <alt_find_file>
  8170d4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  8170d8:	00800044 	movi	r2,1
  8170dc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8170e0:	e0bffa17 	ldw	r2,-24(fp)
  8170e4:	1005003a 	cmpeq	r2,r2,zero
  8170e8:	1000301e 	bne	r2,zero,8171ac <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  8170ec:	e13ffa17 	ldw	r4,-24(fp)
  8170f0:	08173a40 	call	8173a4 <alt_get_fd>
  8170f4:	e0bff815 	stw	r2,-32(fp)
  8170f8:	e0bff817 	ldw	r2,-32(fp)
  8170fc:	1004403a 	cmpge	r2,r2,zero
  817100:	1000031e 	bne	r2,zero,817110 <open+0x94>
    {
      status = index;
  817104:	e0bff817 	ldw	r2,-32(fp)
  817108:	e0bff715 	stw	r2,-36(fp)
  81710c:	00002906 	br	8171b4 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  817110:	e0bff817 	ldw	r2,-32(fp)
  817114:	10800324 	muli	r2,r2,12
  817118:	1007883a 	mov	r3,r2
  81711c:	008020b4 	movhi	r2,130
  817120:	10a34704 	addi	r2,r2,-29412
  817124:	1885883a 	add	r2,r3,r2
  817128:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  81712c:	e0fffc17 	ldw	r3,-16(fp)
  817130:	00900034 	movhi	r2,16384
  817134:	10bfffc4 	addi	r2,r2,-1
  817138:	1886703a 	and	r3,r3,r2
  81713c:	e0bff917 	ldw	r2,-28(fp)
  817140:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  817144:	e0bff617 	ldw	r2,-40(fp)
  817148:	1004c03a 	cmpne	r2,r2,zero
  81714c:	1000061e 	bne	r2,zero,817168 <open+0xec>
  817150:	e13ff917 	ldw	r4,-28(fp)
  817154:	0816fa00 	call	816fa0 <alt_file_locked>
  817158:	e0bff715 	stw	r2,-36(fp)
  81715c:	e0bff717 	ldw	r2,-36(fp)
  817160:	1004803a 	cmplt	r2,r2,zero
  817164:	1000131e 	bne	r2,zero,8171b4 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  817168:	e0bffa17 	ldw	r2,-24(fp)
  81716c:	10800317 	ldw	r2,12(r2)
  817170:	1005003a 	cmpeq	r2,r2,zero
  817174:	1000091e 	bne	r2,zero,81719c <open+0x120>
  817178:	e0bffa17 	ldw	r2,-24(fp)
  81717c:	10800317 	ldw	r2,12(r2)
  817180:	e13ff917 	ldw	r4,-28(fp)
  817184:	e17ffb17 	ldw	r5,-20(fp)
  817188:	e1bffc17 	ldw	r6,-16(fp)
  81718c:	e1fffd17 	ldw	r7,-12(fp)
  817190:	103ee83a 	callr	r2
  817194:	e0bfff15 	stw	r2,-4(fp)
  817198:	00000106 	br	8171a0 <open+0x124>
  81719c:	e03fff15 	stw	zero,-4(fp)
  8171a0:	e0bfff17 	ldw	r2,-4(fp)
  8171a4:	e0bff715 	stw	r2,-36(fp)
  8171a8:	00000206 	br	8171b4 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8171ac:	00bffb44 	movi	r2,-19
  8171b0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8171b4:	e0bff717 	ldw	r2,-36(fp)
  8171b8:	1004403a 	cmpge	r2,r2,zero
  8171bc:	1000091e 	bne	r2,zero,8171e4 <open+0x168>
  {
    alt_release_fd (index);  
  8171c0:	e13ff817 	ldw	r4,-32(fp)
  8171c4:	080e0900 	call	80e090 <alt_release_fd>
    ALT_ERRNO = -status;
  8171c8:	08172040 	call	817204 <alt_get_errno>
  8171cc:	e0fff717 	ldw	r3,-36(fp)
  8171d0:	00c7c83a 	sub	r3,zero,r3
  8171d4:	10c00015 	stw	r3,0(r2)
    return -1;
  8171d8:	00bfffc4 	movi	r2,-1
  8171dc:	e0bffe15 	stw	r2,-8(fp)
  8171e0:	00000206 	br	8171ec <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  8171e4:	e0bff817 	ldw	r2,-32(fp)
  8171e8:	e0bffe15 	stw	r2,-8(fp)
  8171ec:	e0bffe17 	ldw	r2,-8(fp)
}
  8171f0:	e037883a 	mov	sp,fp
  8171f4:	dfc00117 	ldw	ra,4(sp)
  8171f8:	df000017 	ldw	fp,0(sp)
  8171fc:	dec00204 	addi	sp,sp,8
  817200:	f800283a 	ret

00817204 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  817204:	defffd04 	addi	sp,sp,-12
  817208:	dfc00215 	stw	ra,8(sp)
  81720c:	df000115 	stw	fp,4(sp)
  817210:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  817214:	008020b4 	movhi	r2,130
  817218:	10a82204 	addi	r2,r2,-24440
  81721c:	10800017 	ldw	r2,0(r2)
  817220:	1005003a 	cmpeq	r2,r2,zero
  817224:	1000061e 	bne	r2,zero,817240 <alt_get_errno+0x3c>
  817228:	008020b4 	movhi	r2,130
  81722c:	10a82204 	addi	r2,r2,-24440
  817230:	10800017 	ldw	r2,0(r2)
  817234:	103ee83a 	callr	r2
  817238:	e0bfff15 	stw	r2,-4(fp)
  81723c:	00000306 	br	81724c <alt_get_errno+0x48>
  817240:	008020b4 	movhi	r2,130
  817244:	10af2204 	addi	r2,r2,-17272
  817248:	e0bfff15 	stw	r2,-4(fp)
  81724c:	e0bfff17 	ldw	r2,-4(fp)
}
  817250:	e037883a 	mov	sp,fp
  817254:	dfc00117 	ldw	ra,4(sp)
  817258:	df000017 	ldw	fp,0(sp)
  81725c:	dec00204 	addi	sp,sp,8
  817260:	f800283a 	ret

00817264 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  817264:	deffff04 	addi	sp,sp,-4
  817268:	df000015 	stw	fp,0(sp)
  81726c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  817270:	000170fa 	wrctl	ienable,zero
}
  817274:	e037883a 	mov	sp,fp
  817278:	df000017 	ldw	fp,0(sp)
  81727c:	dec00104 	addi	sp,sp,4
  817280:	f800283a 	ret

00817284 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  817284:	defffa04 	addi	sp,sp,-24
  817288:	dfc00515 	stw	ra,20(sp)
  81728c:	df000415 	stw	fp,16(sp)
  817290:	df000404 	addi	fp,sp,16
  817294:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  817298:	008020b4 	movhi	r2,130
  81729c:	10a81d04 	addi	r2,r2,-24460
  8172a0:	10800017 	ldw	r2,0(r2)
  8172a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8172a8:	00003306 	br	817378 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  8172ac:	e0bffd17 	ldw	r2,-12(fp)
  8172b0:	11000217 	ldw	r4,8(r2)
  8172b4:	0805e240 	call	805e24 <strlen>
  8172b8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  8172bc:	e0bffd17 	ldw	r2,-12(fp)
  8172c0:	10c00217 	ldw	r3,8(r2)
  8172c4:	e0bffc17 	ldw	r2,-16(fp)
  8172c8:	1885883a 	add	r2,r3,r2
  8172cc:	10bfffc4 	addi	r2,r2,-1
  8172d0:	10800003 	ldbu	r2,0(r2)
  8172d4:	10803fcc 	andi	r2,r2,255
  8172d8:	1080201c 	xori	r2,r2,128
  8172dc:	10bfe004 	addi	r2,r2,-128
  8172e0:	10800bd8 	cmpnei	r2,r2,47
  8172e4:	1000031e 	bne	r2,zero,8172f4 <alt_find_file+0x70>
    {
      len -= 1;
  8172e8:	e0bffc17 	ldw	r2,-16(fp)
  8172ec:	10bfffc4 	addi	r2,r2,-1
  8172f0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8172f4:	e0bffc17 	ldw	r2,-16(fp)
  8172f8:	1007883a 	mov	r3,r2
  8172fc:	e0bffe17 	ldw	r2,-8(fp)
  817300:	1885883a 	add	r2,r3,r2
  817304:	10800003 	ldbu	r2,0(r2)
  817308:	10803fcc 	andi	r2,r2,255
  81730c:	1080201c 	xori	r2,r2,128
  817310:	10bfe004 	addi	r2,r2,-128
  817314:	10800be0 	cmpeqi	r2,r2,47
  817318:	10000a1e 	bne	r2,zero,817344 <alt_find_file+0xc0>
  81731c:	e0bffc17 	ldw	r2,-16(fp)
  817320:	1007883a 	mov	r3,r2
  817324:	e0bffe17 	ldw	r2,-8(fp)
  817328:	1885883a 	add	r2,r3,r2
  81732c:	10800003 	ldbu	r2,0(r2)
  817330:	10803fcc 	andi	r2,r2,255
  817334:	1080201c 	xori	r2,r2,128
  817338:	10bfe004 	addi	r2,r2,-128
  81733c:	1004c03a 	cmpne	r2,r2,zero
  817340:	10000a1e 	bne	r2,zero,81736c <alt_find_file+0xe8>
  817344:	e0bffd17 	ldw	r2,-12(fp)
  817348:	11000217 	ldw	r4,8(r2)
  81734c:	e1bffc17 	ldw	r6,-16(fp)
  817350:	e17ffe17 	ldw	r5,-8(fp)
  817354:	08175380 	call	817538 <memcmp>
  817358:	1004c03a 	cmpne	r2,r2,zero
  81735c:	1000031e 	bne	r2,zero,81736c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  817360:	e0bffd17 	ldw	r2,-12(fp)
  817364:	e0bfff15 	stw	r2,-4(fp)
  817368:	00000806 	br	81738c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  81736c:	e0bffd17 	ldw	r2,-12(fp)
  817370:	10800017 	ldw	r2,0(r2)
  817374:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  817378:	00c020b4 	movhi	r3,130
  81737c:	18e81d04 	addi	r3,r3,-24460
  817380:	e0bffd17 	ldw	r2,-12(fp)
  817384:	10ffc91e 	bne	r2,r3,8172ac <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  817388:	e03fff15 	stw	zero,-4(fp)
  81738c:	e0bfff17 	ldw	r2,-4(fp)
}
  817390:	e037883a 	mov	sp,fp
  817394:	dfc00117 	ldw	ra,4(sp)
  817398:	df000017 	ldw	fp,0(sp)
  81739c:	dec00204 	addi	sp,sp,8
  8173a0:	f800283a 	ret

008173a4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8173a4:	defffc04 	addi	sp,sp,-16
  8173a8:	df000315 	stw	fp,12(sp)
  8173ac:	df000304 	addi	fp,sp,12
  8173b0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8173b4:	00bffa04 	movi	r2,-24
  8173b8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8173bc:	e03ffe15 	stw	zero,-8(fp)
  8173c0:	00001e06 	br	81743c <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  8173c4:	e0bffe17 	ldw	r2,-8(fp)
  8173c8:	00c020b4 	movhi	r3,130
  8173cc:	18e34704 	addi	r3,r3,-29412
  8173d0:	10800324 	muli	r2,r2,12
  8173d4:	10c5883a 	add	r2,r2,r3
  8173d8:	10800017 	ldw	r2,0(r2)
  8173dc:	1004c03a 	cmpne	r2,r2,zero
  8173e0:	1000131e 	bne	r2,zero,817430 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  8173e4:	e0bffe17 	ldw	r2,-8(fp)
  8173e8:	00c020b4 	movhi	r3,130
  8173ec:	18e34704 	addi	r3,r3,-29412
  8173f0:	10800324 	muli	r2,r2,12
  8173f4:	10c7883a 	add	r3,r2,r3
  8173f8:	e0bfff17 	ldw	r2,-4(fp)
  8173fc:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  817400:	008020b4 	movhi	r2,130
  817404:	10a82104 	addi	r2,r2,-24444
  817408:	10c00017 	ldw	r3,0(r2)
  81740c:	e0bffe17 	ldw	r2,-8(fp)
  817410:	1880040e 	bge	r3,r2,817424 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  817414:	00c020b4 	movhi	r3,130
  817418:	18e82104 	addi	r3,r3,-24444
  81741c:	e0bffe17 	ldw	r2,-8(fp)
  817420:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  817424:	e0bffe17 	ldw	r2,-8(fp)
  817428:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  81742c:	00000606 	br	817448 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  817430:	e0bffe17 	ldw	r2,-8(fp)
  817434:	10800044 	addi	r2,r2,1
  817438:	e0bffe15 	stw	r2,-8(fp)
  81743c:	e0bffe17 	ldw	r2,-8(fp)
  817440:	10800810 	cmplti	r2,r2,32
  817444:	103fdf1e 	bne	r2,zero,8173c4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  817448:	e0bffd17 	ldw	r2,-12(fp)
}
  81744c:	e037883a 	mov	sp,fp
  817450:	df000017 	ldw	fp,0(sp)
  817454:	dec00104 	addi	sp,sp,4
  817458:	f800283a 	ret

0081745c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  81745c:	defffb04 	addi	sp,sp,-20
  817460:	df000415 	stw	fp,16(sp)
  817464:	df000404 	addi	fp,sp,16
  817468:	e13ffe15 	stw	r4,-8(fp)
  81746c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  817470:	e0bfff17 	ldw	r2,-4(fp)
  817474:	10840070 	cmpltui	r2,r2,4097
  817478:	1000021e 	bne	r2,zero,817484 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  81747c:	00840004 	movi	r2,4096
  817480:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  817484:	e0fffe17 	ldw	r3,-8(fp)
  817488:	e0bfff17 	ldw	r2,-4(fp)
  81748c:	1885883a 	add	r2,r3,r2
  817490:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  817494:	e0bffe17 	ldw	r2,-8(fp)
  817498:	e0bffd15 	stw	r2,-12(fp)
  81749c:	00000506 	br	8174b4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8174a0:	e0bffd17 	ldw	r2,-12(fp)
  8174a4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8174a8:	e0bffd17 	ldw	r2,-12(fp)
  8174ac:	10800804 	addi	r2,r2,32
  8174b0:	e0bffd15 	stw	r2,-12(fp)
  8174b4:	e0fffd17 	ldw	r3,-12(fp)
  8174b8:	e0bffc17 	ldw	r2,-16(fp)
  8174bc:	18bff836 	bltu	r3,r2,8174a0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8174c0:	e0bffe17 	ldw	r2,-8(fp)
  8174c4:	108007cc 	andi	r2,r2,31
  8174c8:	1005003a 	cmpeq	r2,r2,zero
  8174cc:	1000021e 	bne	r2,zero,8174d8 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8174d0:	e0bffd17 	ldw	r2,-12(fp)
  8174d4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8174d8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8174dc:	e037883a 	mov	sp,fp
  8174e0:	df000017 	ldw	fp,0(sp)
  8174e4:	dec00104 	addi	sp,sp,4
  8174e8:	f800283a 	ret

008174ec <atexit>:
  8174ec:	200b883a 	mov	r5,r4
  8174f0:	000d883a 	mov	r6,zero
  8174f4:	0009883a 	mov	r4,zero
  8174f8:	000f883a 	mov	r7,zero
  8174fc:	08175ac1 	jmpi	8175ac <__register_exitproc>

00817500 <exit>:
  817500:	defffe04 	addi	sp,sp,-8
  817504:	000b883a 	mov	r5,zero
  817508:	dc000015 	stw	r16,0(sp)
  81750c:	dfc00115 	stw	ra,4(sp)
  817510:	2021883a 	mov	r16,r4
  817514:	08176e40 	call	8176e4 <__call_exitprocs>
  817518:	008020b4 	movhi	r2,130
  81751c:	10a81a04 	addi	r2,r2,-24472
  817520:	11000017 	ldw	r4,0(r2)
  817524:	20800f17 	ldw	r2,60(r4)
  817528:	10000126 	beq	r2,zero,817530 <exit+0x30>
  81752c:	103ee83a 	callr	r2
  817530:	8009883a 	mov	r4,r16
  817534:	08178d40 	call	8178d4 <_exit>

00817538 <memcmp>:
  817538:	00c000c4 	movi	r3,3
  81753c:	1980032e 	bgeu	r3,r6,81754c <memcmp+0x14>
  817540:	2144b03a 	or	r2,r4,r5
  817544:	10c4703a 	and	r2,r2,r3
  817548:	10000f26 	beq	r2,zero,817588 <memcmp+0x50>
  81754c:	31ffffc4 	addi	r7,r6,-1
  817550:	3000061e 	bne	r6,zero,81756c <memcmp+0x34>
  817554:	00000a06 	br	817580 <memcmp+0x48>
  817558:	39ffffc4 	addi	r7,r7,-1
  81755c:	00bfffc4 	movi	r2,-1
  817560:	21000044 	addi	r4,r4,1
  817564:	29400044 	addi	r5,r5,1
  817568:	38800526 	beq	r7,r2,817580 <memcmp+0x48>
  81756c:	20c00003 	ldbu	r3,0(r4)
  817570:	28800003 	ldbu	r2,0(r5)
  817574:	18bff826 	beq	r3,r2,817558 <memcmp+0x20>
  817578:	1885c83a 	sub	r2,r3,r2
  81757c:	f800283a 	ret
  817580:	0005883a 	mov	r2,zero
  817584:	f800283a 	ret
  817588:	180f883a 	mov	r7,r3
  81758c:	20c00017 	ldw	r3,0(r4)
  817590:	28800017 	ldw	r2,0(r5)
  817594:	18bfed1e 	bne	r3,r2,81754c <memcmp+0x14>
  817598:	31bfff04 	addi	r6,r6,-4
  81759c:	21000104 	addi	r4,r4,4
  8175a0:	29400104 	addi	r5,r5,4
  8175a4:	39bff936 	bltu	r7,r6,81758c <memcmp+0x54>
  8175a8:	003fe806 	br	81754c <memcmp+0x14>

008175ac <__register_exitproc>:
  8175ac:	defffa04 	addi	sp,sp,-24
  8175b0:	008020b4 	movhi	r2,130
  8175b4:	10a81a04 	addi	r2,r2,-24472
  8175b8:	dc000015 	stw	r16,0(sp)
  8175bc:	14000017 	ldw	r16,0(r2)
  8175c0:	dd000415 	stw	r20,16(sp)
  8175c4:	2829883a 	mov	r20,r5
  8175c8:	81405217 	ldw	r5,328(r16)
  8175cc:	dcc00315 	stw	r19,12(sp)
  8175d0:	dc800215 	stw	r18,8(sp)
  8175d4:	dc400115 	stw	r17,4(sp)
  8175d8:	dfc00515 	stw	ra,20(sp)
  8175dc:	2023883a 	mov	r17,r4
  8175e0:	3027883a 	mov	r19,r6
  8175e4:	3825883a 	mov	r18,r7
  8175e8:	28002526 	beq	r5,zero,817680 <__register_exitproc+0xd4>
  8175ec:	29000117 	ldw	r4,4(r5)
  8175f0:	008007c4 	movi	r2,31
  8175f4:	11002716 	blt	r2,r4,817694 <__register_exitproc+0xe8>
  8175f8:	8800101e 	bne	r17,zero,81763c <__register_exitproc+0x90>
  8175fc:	2105883a 	add	r2,r4,r4
  817600:	1085883a 	add	r2,r2,r2
  817604:	20c00044 	addi	r3,r4,1
  817608:	1145883a 	add	r2,r2,r5
  81760c:	0009883a 	mov	r4,zero
  817610:	15000215 	stw	r20,8(r2)
  817614:	28c00115 	stw	r3,4(r5)
  817618:	2005883a 	mov	r2,r4
  81761c:	dfc00517 	ldw	ra,20(sp)
  817620:	dd000417 	ldw	r20,16(sp)
  817624:	dcc00317 	ldw	r19,12(sp)
  817628:	dc800217 	ldw	r18,8(sp)
  81762c:	dc400117 	ldw	r17,4(sp)
  817630:	dc000017 	ldw	r16,0(sp)
  817634:	dec00604 	addi	sp,sp,24
  817638:	f800283a 	ret
  81763c:	29802204 	addi	r6,r5,136
  817640:	00800044 	movi	r2,1
  817644:	110e983a 	sll	r7,r2,r4
  817648:	30c04017 	ldw	r3,256(r6)
  81764c:	2105883a 	add	r2,r4,r4
  817650:	1085883a 	add	r2,r2,r2
  817654:	1185883a 	add	r2,r2,r6
  817658:	19c6b03a 	or	r3,r3,r7
  81765c:	14802015 	stw	r18,128(r2)
  817660:	14c00015 	stw	r19,0(r2)
  817664:	00800084 	movi	r2,2
  817668:	30c04015 	stw	r3,256(r6)
  81766c:	88bfe31e 	bne	r17,r2,8175fc <__register_exitproc+0x50>
  817670:	30804117 	ldw	r2,260(r6)
  817674:	11c4b03a 	or	r2,r2,r7
  817678:	30804115 	stw	r2,260(r6)
  81767c:	003fdf06 	br	8175fc <__register_exitproc+0x50>
  817680:	008020b4 	movhi	r2,130
  817684:	10b15904 	addi	r2,r2,-15004
  817688:	100b883a 	mov	r5,r2
  81768c:	80805215 	stw	r2,328(r16)
  817690:	003fd606 	br	8175ec <__register_exitproc+0x40>
  817694:	00802034 	movhi	r2,128
  817698:	10954d04 	addi	r2,r2,21812
  81769c:	1000021e 	bne	r2,zero,8176a8 <__register_exitproc+0xfc>
  8176a0:	013fffc4 	movi	r4,-1
  8176a4:	003fdc06 	br	817618 <__register_exitproc+0x6c>
  8176a8:	01006404 	movi	r4,400
  8176ac:	103ee83a 	callr	r2
  8176b0:	1007883a 	mov	r3,r2
  8176b4:	103ffa26 	beq	r2,zero,8176a0 <__register_exitproc+0xf4>
  8176b8:	80805217 	ldw	r2,328(r16)
  8176bc:	180b883a 	mov	r5,r3
  8176c0:	18000115 	stw	zero,4(r3)
  8176c4:	18800015 	stw	r2,0(r3)
  8176c8:	80c05215 	stw	r3,328(r16)
  8176cc:	18006215 	stw	zero,392(r3)
  8176d0:	18006315 	stw	zero,396(r3)
  8176d4:	0009883a 	mov	r4,zero
  8176d8:	883fc826 	beq	r17,zero,8175fc <__register_exitproc+0x50>
  8176dc:	003fd706 	br	81763c <__register_exitproc+0x90>

008176e0 <register_fini>:
  8176e0:	f800283a 	ret

008176e4 <__call_exitprocs>:
  8176e4:	008020b4 	movhi	r2,130
  8176e8:	10a81a04 	addi	r2,r2,-24472
  8176ec:	10800017 	ldw	r2,0(r2)
  8176f0:	defff304 	addi	sp,sp,-52
  8176f4:	df000b15 	stw	fp,44(sp)
  8176f8:	d8800115 	stw	r2,4(sp)
  8176fc:	00802034 	movhi	r2,128
  817700:	10954804 	addi	r2,r2,21792
  817704:	1005003a 	cmpeq	r2,r2,zero
  817708:	d8800215 	stw	r2,8(sp)
  81770c:	d8800117 	ldw	r2,4(sp)
  817710:	dd400815 	stw	r21,32(sp)
  817714:	dd000715 	stw	r20,28(sp)
  817718:	10805204 	addi	r2,r2,328
  81771c:	dfc00c15 	stw	ra,48(sp)
  817720:	ddc00a15 	stw	r23,40(sp)
  817724:	dd800915 	stw	r22,36(sp)
  817728:	dcc00615 	stw	r19,24(sp)
  81772c:	dc800515 	stw	r18,20(sp)
  817730:	dc400415 	stw	r17,16(sp)
  817734:	dc000315 	stw	r16,12(sp)
  817738:	282b883a 	mov	r21,r5
  81773c:	2039883a 	mov	fp,r4
  817740:	d8800015 	stw	r2,0(sp)
  817744:	2829003a 	cmpeq	r20,r5,zero
  817748:	d8800117 	ldw	r2,4(sp)
  81774c:	14405217 	ldw	r17,328(r2)
  817750:	88001026 	beq	r17,zero,817794 <__call_exitprocs+0xb0>
  817754:	ddc00017 	ldw	r23,0(sp)
  817758:	88800117 	ldw	r2,4(r17)
  81775c:	8c802204 	addi	r18,r17,136
  817760:	143fffc4 	addi	r16,r2,-1
  817764:	80000916 	blt	r16,zero,81778c <__call_exitprocs+0xa8>
  817768:	05bfffc4 	movi	r22,-1
  81776c:	a000151e 	bne	r20,zero,8177c4 <__call_exitprocs+0xe0>
  817770:	8409883a 	add	r4,r16,r16
  817774:	2105883a 	add	r2,r4,r4
  817778:	1485883a 	add	r2,r2,r18
  81777c:	10c02017 	ldw	r3,128(r2)
  817780:	a8c01126 	beq	r21,r3,8177c8 <__call_exitprocs+0xe4>
  817784:	843fffc4 	addi	r16,r16,-1
  817788:	85bff81e 	bne	r16,r22,81776c <__call_exitprocs+0x88>
  81778c:	d8800217 	ldw	r2,8(sp)
  817790:	10003126 	beq	r2,zero,817858 <__call_exitprocs+0x174>
  817794:	dfc00c17 	ldw	ra,48(sp)
  817798:	df000b17 	ldw	fp,44(sp)
  81779c:	ddc00a17 	ldw	r23,40(sp)
  8177a0:	dd800917 	ldw	r22,36(sp)
  8177a4:	dd400817 	ldw	r21,32(sp)
  8177a8:	dd000717 	ldw	r20,28(sp)
  8177ac:	dcc00617 	ldw	r19,24(sp)
  8177b0:	dc800517 	ldw	r18,20(sp)
  8177b4:	dc400417 	ldw	r17,16(sp)
  8177b8:	dc000317 	ldw	r16,12(sp)
  8177bc:	dec00d04 	addi	sp,sp,52
  8177c0:	f800283a 	ret
  8177c4:	8409883a 	add	r4,r16,r16
  8177c8:	88c00117 	ldw	r3,4(r17)
  8177cc:	2105883a 	add	r2,r4,r4
  8177d0:	1445883a 	add	r2,r2,r17
  8177d4:	18ffffc4 	addi	r3,r3,-1
  8177d8:	11800217 	ldw	r6,8(r2)
  8177dc:	1c001526 	beq	r3,r16,817834 <__call_exitprocs+0x150>
  8177e0:	10000215 	stw	zero,8(r2)
  8177e4:	303fe726 	beq	r6,zero,817784 <__call_exitprocs+0xa0>
  8177e8:	00c00044 	movi	r3,1
  8177ec:	1c06983a 	sll	r3,r3,r16
  8177f0:	90804017 	ldw	r2,256(r18)
  8177f4:	8cc00117 	ldw	r19,4(r17)
  8177f8:	1884703a 	and	r2,r3,r2
  8177fc:	10001426 	beq	r2,zero,817850 <__call_exitprocs+0x16c>
  817800:	90804117 	ldw	r2,260(r18)
  817804:	1884703a 	and	r2,r3,r2
  817808:	10000c1e 	bne	r2,zero,81783c <__call_exitprocs+0x158>
  81780c:	2105883a 	add	r2,r4,r4
  817810:	1485883a 	add	r2,r2,r18
  817814:	11400017 	ldw	r5,0(r2)
  817818:	e009883a 	mov	r4,fp
  81781c:	303ee83a 	callr	r6
  817820:	88800117 	ldw	r2,4(r17)
  817824:	98bfc81e 	bne	r19,r2,817748 <__call_exitprocs+0x64>
  817828:	b8800017 	ldw	r2,0(r23)
  81782c:	147fd526 	beq	r2,r17,817784 <__call_exitprocs+0xa0>
  817830:	003fc506 	br	817748 <__call_exitprocs+0x64>
  817834:	8c000115 	stw	r16,4(r17)
  817838:	003fea06 	br	8177e4 <__call_exitprocs+0x100>
  81783c:	2105883a 	add	r2,r4,r4
  817840:	1485883a 	add	r2,r2,r18
  817844:	11000017 	ldw	r4,0(r2)
  817848:	303ee83a 	callr	r6
  81784c:	003ff406 	br	817820 <__call_exitprocs+0x13c>
  817850:	303ee83a 	callr	r6
  817854:	003ff206 	br	817820 <__call_exitprocs+0x13c>
  817858:	88800117 	ldw	r2,4(r17)
  81785c:	1000081e 	bne	r2,zero,817880 <__call_exitprocs+0x19c>
  817860:	89000017 	ldw	r4,0(r17)
  817864:	20000726 	beq	r4,zero,817884 <__call_exitprocs+0x1a0>
  817868:	b9000015 	stw	r4,0(r23)
  81786c:	8809883a 	mov	r4,r17
  817870:	08055200 	call	805520 <free>
  817874:	bc400017 	ldw	r17,0(r23)
  817878:	883fb71e 	bne	r17,zero,817758 <__call_exitprocs+0x74>
  81787c:	003fc506 	br	817794 <__call_exitprocs+0xb0>
  817880:	89000017 	ldw	r4,0(r17)
  817884:	882f883a 	mov	r23,r17
  817888:	2023883a 	mov	r17,r4
  81788c:	883fb21e 	bne	r17,zero,817758 <__call_exitprocs+0x74>
  817890:	003fc006 	br	817794 <__call_exitprocs+0xb0>

00817894 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  817894:	defffd04 	addi	sp,sp,-12
  817898:	df000215 	stw	fp,8(sp)
  81789c:	df000204 	addi	fp,sp,8
  8178a0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  8178a4:	e0bfff17 	ldw	r2,-4(fp)
  8178a8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8178ac:	e0bffe17 	ldw	r2,-8(fp)
  8178b0:	1005003a 	cmpeq	r2,r2,zero
  8178b4:	1000021e 	bne	r2,zero,8178c0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  8178b8:	002af070 	cmpltui	zero,zero,43969
  8178bc:	00000106 	br	8178c4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  8178c0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  8178c4:	e037883a 	mov	sp,fp
  8178c8:	df000017 	ldw	fp,0(sp)
  8178cc:	dec00104 	addi	sp,sp,4
  8178d0:	f800283a 	ret

008178d4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8178d4:	defffd04 	addi	sp,sp,-12
  8178d8:	dfc00215 	stw	ra,8(sp)
  8178dc:	df000115 	stw	fp,4(sp)
  8178e0:	df000104 	addi	fp,sp,4
  8178e4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  8178e8:	e13fff17 	ldw	r4,-4(fp)
  8178ec:	08178940 	call	817894 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8178f0:	003fff06 	br	8178f0 <_exit+0x1c>
  8178f4:	00000010 	cmplti	zero,zero,0
  8178f8:	00000000 	call	0 <__reset-0x800000>
  8178fc:	00527a01 	jmpi	527a0 <__reset-0x7ad860>
  817900:	011f7c01 	jmpi	11f7c0 <__reset-0x6e0840>
  817904:	001b0c0b 	ldhu	zero,27696(zero)
  817908:	00000028 	cmpgeui	zero,zero,0
  81790c:	00000018 	cmpnei	zero,zero,0
  817910:	0080c85c 	xori	r2,zero,801
  817914:	000005dc 	xori	zero,zero,23
  817918:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  81791c:	92099170 	cmpltui	r8,r18,9797
  817920:	95079308 	cmpgei	r20,r18,7756
  817924:	97049605 	stb	fp,4696(r18)
  817928:	90019f03 	ldbu	zero,1660(r18)
  81792c:	9c06940a 	0x9c06940a
  817930:	00000002 	0x2
  817934:	00000028 	cmpgeui	zero,zero,0
  817938:	00000044 	movi	zero,1
  81793c:	0080ce38 	rdprs	r2,zero,824
  817940:	000005b0 	cmpltui	zero,zero,22
  817944:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  817948:	92099168 	cmpgeui	r8,r18,9797
  81794c:	95079308 	cmpgei	r20,r18,7756
  817950:	9c039705 	stb	r16,3676(r19)
  817954:	90019f02 	0x90019f02
  817958:	9606940a 	0x9606940a
  81795c:	00000004 	movi	zero,0
  817960:	008176e0 	cmpeqi	r2,zero,1499
